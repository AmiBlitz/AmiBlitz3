
---------------------------------------------------------------------
=====                   Mikes Space FX Library V1.1             =====
---------------------------------------------------------------------

                         Written by Michael Milne
                             (c)1995 SUNTEAM


At the moment this library only contains some basic starfield commands but
I hope that they will lighten the load of programming such things. Please
note that any reference to 3D starfields is at the moment unused. This is
becoz I haven't had time to write these routines and therefore no 3D bits
are included in this release.

This library takes full use of the object oriented programming method
offered by Blitz and thus you can set the maximum number of starfields
required in the Compiler Options.


Commands:
                InitStarField           starfield,num of stars
                FreeStarField           starfield
        adr.l = StarFieldAdr            (starfield)
        sze.l = StarFieldSize           (starfield)
        num.w = NumStars                (starfield)
                SetStar                 starfield,star,x,y,xspd,yspd
        stx.w = StarX                   (starfield,star)
        sty.w = StarY                   (starfield,star)
        sxs.w = StarXSpeed              (starfield,star)
        sys.w = StarYSpeed              (starfield,star)
                RecalcStarfield         starfield,max width,max height
                PlotStarfield           starfield,colour
                DoStarfield             starfield,max wid,max hgt,colour



Statement: InitStarField
---------------------------------------------------------------------
Modes:  Amiga/Blitz
Syntax: InitStarField starfield,num of stars

This sets up a starfield ready for use. 'starfield' is the starfield id
number and 'num' is the number of stars you want in that particular
starfield.



Statement: FreeStarField
---------------------------------------------------------------------
Modes:  Blitz/Amiga
Syntax: FreeStarField starfield

This simply frees up the memory that a starfield uses and resets all
associated bits to 0. Useful when quitting!!



Function: StarFieldAdr
---------------------------------------------------------------------
Modes:  Blitz/Amiga
Syntax: adr.l = StarFieldAdr(starfield)

This returns the base address of the starfield (ie. the address of the
first star.). This is basically only for debugging purposes.



Function: StarFieldSize
---------------------------------------------------------------------
Modes:  Amiga/Blitz
Syntax: sze.l = StarFieldSize(starfield)

This is another debugging tool and just returns the physical size of the
starfield in bytes. It can be useful if you are keeping an eye on memory
consumption.



Function: NumStars
---------------------------------------------------------------------
Modes:  Amiga/Blitz
Syntax: num.w = NumStars(starfield)

This returns the number of stars in a previously defined starfield.



Statement: SetStar
---------------------------------------------------------------------
Modes:  Amiga/Blitz
Syntax: SetStar starfield,star,x,y,xspeed,yspeed

This sets a specific stars attributes within a previously defined
starfield. 'starfield' is the id number of the starfield and 'star' is the
number of the specific star. 'x' and 'y' sets the stars physical location
and 'xspeed' and 'yspeed' sets the stars speed attributes. A good thing to
relate to when using the positions of stars is to think in terms of bitmaps
so that the x and y apply to bitmap locations and the speeds determine the
direction and velocity of the starfield and star.



Function: StarX
---------------------------------------------------------------------
Modes:  Amiga/Blitz
Syntax: stx.w = StarX(starfield,star)

This returns the specified stars 'x' position.



Function: StarY
---------------------------------------------------------------------
Modes:  Amiga/Blitz
Syntax: sty.w = StarY(starfield,star)

This returns the specified stars 'y' position.



Function: StarXSpeed
---------------------------------------------------------------------
Modes:  Amiga/Blitz
Syntax: sxs.w = StarXSpeed(starfield,star)

This returns the specified stars 'x' speed.



Function: StarYSpeed
---------------------------------------------------------------------
Modes:  Amiga/Blitz
Syntax: sys.w = StarYSpeed(starfield,star)

This returns the specified stars 'y' speed.



Statement: RecalcStarfield
---------------------------------------------------------------------
Modes:  Amiga/Blitz
Syntax: RecalcStarfield starfield,max width,max height

This recalculates a starfield. What this means is that it goes through the
whole starfield star by star and takes the x and y speeds and adds them to
the x and y positions, then checks the new positions to see if they have
fallen below 0 or have risen above 'max width' or 'max height'. If they
have gone outside the boundaries then they are wrapped round to the other
side. Thus if you are drawing a starfield on a standard bitmap (ie. 320 x
256 pixels) then the max width and height could be set to the width and
height of the bitmap!!



Statement: PlotStarfield
---------------------------------------------------------------------
Modes:  Amiga/Blitz
Syntax: PlotStarfield starfield,colour

This command plots the specified starfield in the specified colour to the
CURRENTLY USED BITMAP.



Statement: DoStarfield
---------------------------------------------------------------------
Modes:  Amiga/Blitz
Syntax: DoStarfield starfield,max width,max height,colour

This effectively does the same as RecalcStarfield and DoStarfield in one
handy command. (See above for specifics).



NB: The reason for splitting the recalc and plotting into two commands as
well as having one that does them both is so that you can control the
various stages of re-drawing a starfield in a time-critical calculation. If
you are doing a shoot-em-up which involves a starfield you could use
DoStarfield to do the starfield and then draw sprites on top. But if the
shoot-em-up had GFX behind the starfield it might be more beneficial for
speed to calculate the starfield first then draw the BG GFX and then draw
the starfield thus splitting up the processes into a more speedier
solution.
