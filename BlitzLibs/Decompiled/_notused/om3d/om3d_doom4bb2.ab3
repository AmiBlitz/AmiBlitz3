; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; Max ChunkyBuffer= 2
; /XTRA
;
;  My first DOOM experiments
;
;  (w) 1996 by Oliver Michel
;  email: htw7194@htw-dresden.informatik.de
;
;controls:   <cursors>=navigate,<n>=new map,<esc>=end
;

DEFTYPE.w

cnk.l=AllocMem(64*64,65536)
If cnk=0 Then End

texture.s="texture"

InitPalette 0,256
LoadPalette 0,texture

Screen 0,0,0,320,256,8,0,"doom",0,0
ScreensBitMap 0,0
Window 0,0,0,320,256,$800,"doom",0,0
Cls 0

ShowPalette 0
Use BitMap 0

txt.l=?txt
scl.l=?scal

planar.l=Peek.l(Addr BitMap(0)+8) +40*96 +16


#xws=8   ; x-walls
#yws=7   ; y-walls
#dw=64   ; wall-width

Dim xwalls.b(#xws*#yws)
Dim ywalls.b(#yws*#xws)

BitMapOutput 0

vx=92    ; viewpoint x
vy=144   ; viewpoint y
vw=0     ; viewangle

stepx.q=5
stepy.q=0

newmap=1

new:

If newmap
  For x=0 To #xws*(#yws-1)-1
    If newmap=1
      If Int(Rnd(2))=1
        xwalls(x)=1
      Else
        xwalls(x)=0
      End If
    End If
  Next

  For y=0 To #yws*(#xws-1)-1
    If newmap=1
      If Int(Rnd(2))=1
        ywalls(y)=1
      Else
        ywalls(y)=0
      End If
    End If
  Next

  ylimit=(#yws-1)*64
  xlimit=(#xws-1)*64
  newmap=0
End If

For winkadd=-31 To 32

  wink=(vw+winkadd) & $FF
  quader=(wink & $C0) LSR 6
  Select quader
  Case 0
    winky=64-wink
  Case 1
    winky=-(wink-64) & $FF
  Case 2
    winky=-(64-(wink-128)) & $FF
  Case 3
    winky=64-(256-wink)
  End Select
  xpos=vx:ypos=vy

  xrast=(vx & $FFC0)LSR 6
  yrast=(vy & $FFC0)LSR 6
  xrel=(xpos & $3F)
  yrel=(ypos & $3F)
  yadd=1
  xadd=1

  If QCos(wink)>=0
    xrel=64-xrel
  Else
    xadd=-1:xrast+1
  End If
  If QSin(wink)>=0
    yadd=-1:yrast+1
  Else
    yrel=64-yrel
  End If

  xwallstep=QTan(wink)*xrel
  ywallstep=QTan(winky)*yrel

  xrast+xadd
  yrast+yadd

  ypos-xwallstep
  foundx.b=0
  xwallstep=QTan(wink)*64


  While (ypos>0 AND ypos<ylimit) AND foundx=0 AND xrast>=0 AND xrast<#xws

    xwall=((ypos & $FFC0)LSR 6)*#xws+xrast
    If xwalls(xwall)
      foundx=1
      foundxrast=xrast
      foundypos=ypos
    End If
    xrast+xadd
    ypos-xwallstep
  Wend

  xpos+ywallstep
  foundy.b=0
  ywallstep=QTan(winky)*64

  While (xpos>0 AND xpos<xlimit) AND foundy=0 AND yrast>=0 AND yrast<#yws

    ywall=((xpos & $FFC0)LSR 6)*#yws+yrast
    If ywalls(ywall)
      foundy=1
      foundyrast=yrast
      foundxpos=xpos
    End If
    yrast+yadd
    xpos+ywallstep
  Wend
  winkoff.w=-winkadd & $FF

  disty.q=Sqr(QAbs((foundyrast*64)-vy)^2+QAbs(foundxpos-vx)^2)
  distx.q=Sqr(QAbs(foundypos-vy)^2+QAbs((foundxrast*64)-vx)^2)

  If foundx AND foundy
    If distx<disty
      h.w=20000/(256+(distx*QCos(winkoff)))
      lin.w=foundypos & %111111
      OMcolumn txt+lin LSL6,cnk+winkadd+31,scl+h LSL4
    Else
      h.w=20000/(256+(disty*QCos(winkoff)))
      lin.w=foundxpos & %111111
      OMcolumn txt+lin LSL6,cnk+winkadd+31,scl+h LSL4
    End If
  Else
    If foundx
      h.w=20000/(256+(distx*QCos(winkoff)))
      lin.w=foundypos & %111111
      OMcolumn txt+lin LSL6,cnk+winkadd+31,scl+h LSL4
    End If
    If foundy
      h.w=20000/(256+(disty*QCos(winkoff)))
      lin.w=foundxpos & %111111
      OMcolumn txt+lin LSL6,cnk+winkadd+31,scl+h LSL4
    End If
  End If

Next

;my chunky2planar-routine (2.5x slower than them of Gloom(blackmagic)) but free for you!
OMc2p 64,64,10240,40,cnk,planar
;      \  /   \    \  \      \____ planar-buffer (bitmap)
;       \/     \    \  \__________ chunky-buffer (in fastmem)
;        \      \    \____________ line-modulo (lores 40;hires 80)
;         \      \________________ bitplane-modulo (lores 10240;640x256=20480;640x512=40960)
;          \______________________ chunky-buffer size

;clear chunky-buffer
FillMem cnk,4096   ;64*64


FlushEvents ev.l
ev.l=WaitEvent
evc.l=EventCode

If ev=$400
Select evc
  Case $4c
    vx+stepx
    vy+stepy
  Case $4d
    vx-stepx
    vy-stepy
  Case $4f
    vw=(vw+2) & $FF
    stepx=QCos(vw)*5
    stepy=-QSin(vw)*5
  Case $4e
    vw=(vw-2) & $FF
    stepx=QCos(vw)*5
    stepy=-QSin(vw)*5
  Case $45
    Goto ende
  Case $36
    newmap=1
End Select
End If

Goto new


ende:
FreeMem cnk,64*64

End

scal: XINCLUDE "OMcolumn_scal.ab3"

txt: IncBin "texture.chk"

