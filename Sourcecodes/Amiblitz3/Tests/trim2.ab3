; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 55
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8192
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 28
; CursorColumn    = 2
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; Max BitMap      = 10
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
  a$ = "    hallo  "
  GetD0 &a$ : MOVE.l D0,A3
  GetD0 Len(a$)

; left:
  MOVEQ #$20,D1
  MOVEQ #-1,D2
  MOVEA.l A3,A0

  loop_left:
    ADDQ.l #1,D2
    CMP.w D2,D0
    BCS.w exit_trim
  CMP.b (A3)+,D1
  BEQ.w loop_left
  SUBQ #1,A3
 ; TRAP #0
  ; D2 contains number of first character / A3 points to begin of string

; right:
  ADDA.l D0,A0        ; go to the end of the string
  SUB.l D2,D0
  loop_right:
    SUBQ #1,D0
    BMI.w exit_trim
  CMP.b -(A0),D1
  BEQ.w loop_right
;  ADDQ #1,D0
  ;D0 contains length of string

  MOVE.l D0,D1
  MOVE.l A3,A0
TRAP #5
  BSR copyNewStringA3
  le.l = PutD0
  TRAP #5
  MOVE.l A3,D0 : ad.l = PutD0
  NPrint le
  NPrint ">"+Peek$(ad-le)+"<"
End
                                                                                                                                                                                                                                                        

  exit_trim:
  MOVEQ  #0,D0
End


.copyNewStringA3:     ; (a0: string pointer, d1: length)
  ;Dc.w $2001
  ;Dc.l $6700003a,$0c810000
  ;Dc.l $00086500,$00282401,$e68a6700,$002016d8
  ;Dc.l $16d816d8,$16d816d8,$16d816d8,$16d85382
  ;Dc.l $6600ffec,$c27c0007,$6700000a,$534116d8
  ;Dc.l $51c9fffc
  ;Dc.w $4e75
  MOVE.l     D1,D0
  BEQ.w      LAB_0021f7ba           ; if length is 0 just return d0 = 0

  CMPI.l     #8,D1
  BCS.w      LAB_0021f7b2           ; if length is less than 8 goto ...
    MOVE.l     D1,D2
    LSR.l      #3,D2
    BEQ.w      LAB_0021f7b2
      LAB_0021f794:;                                    XREF[1]:     0021f7a6(j)
        MOVE.b     (A0)+,(A3)+
        MOVE.b     (A0)+,(A3)+
        MOVE.b     (A0)+,(A3)+
        MOVE.b     (A0)+,(A3)+
        MOVE.b     (A0)+,(A3)+
        MOVE.b     (A0)+,(A3)+
        MOVE.b     (A0)+,(A3)+
        MOVE.b     (A0)+,(A3)+
        SUBQ.l     #1,D2
      BNE.w      LAB_0021f794
      AND.w      #7,D1
      BEQ.w      LAB_0021f7ba
    LAB_0021f7b2:;                                    XREF[2]:     0021f788(j), 0021f790(j)

    SUBQ.w     #1,D1

    LAB_0021f7b4:;                                    XREF[1]:     0021f7b6(j)
      MOVE.b     (A0)+,(A3)+
    DBF D1,LAB_0021f7b4
  LAB_0021f7ba:;                                    XREF[2]:     0021f77e(j), 0021f7ae(j)
RTS

