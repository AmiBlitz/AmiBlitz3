; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "C:"
; ExeFile         = "AB2GuideExtract"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 2502400
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 18
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = "Sourcecodes:Includes/intuition.include.bb2"
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 668
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
optimize 7
Syntax 2
WBStartup
XINCLUDE "xlog.include.ab3"
XINCLUDE "file.include.ab3"
XINCLUDE "multilist.include.ab3"

Function.s iReplace{string.s,old.s,repl.s}
lstring.s = LCase$(string)
lold.s = LCase$(old)
olen.l = FLen(old)
nleng.l = FLen(repl)
pos.l=0
While Instr(lstring,lold,pos)>0
  pos.l = Instr(lstring,lold,pos)
  string = Left$(string,pos-1) + repl + Right$(string,FLen(string)-pos-olen+1)
  lstring = LCase$(string.s)
  pos+nleng
Wend
Function Return string
End Function


Macro add_sort ; Listname, Sortentry, Value
breakme.l = False
succ.l = False
ResetList `1
Repeat
  If NextItemFast(`1)
    If `1\`2>`3
      If PrevItem (`1) ; whoops, we seeked 1 to far
        If AddItem (`1)
          `1\`2 = `3
          succ=True
        End If
        breakme = True
      Else
        If AddFirst (`1)
          `1\`2 = `3
          succ=True
        End If
        breakme=True
      End If
    End If
  Else
    If AddItem (`1) ; seek till there is no more
      `1\`2 = `3
      succ = True
    End If
    breakme = True
  End If
Until breakme = True
End Macro

Macro list_unique ; Listname, Sortentry, cachevar
ResetList `1
While NextItemFast(`1)
  `3 = `1\`2
  PushItem `1
  count.l = 0
  ResetList `1
  While NextItemFast(`1)
    If `3 = `1\`2
      count+1
      If count>1
        If `1\desc = "" OR Left$(`1\desc,1) = "*"
          KillItem `1 : NPrint "Removing duplicate: ",`3 : count=1
        Else
          `1\`2 = `1\`2+"("+Str$(count)+")"
        End If
      End If
    End If
  Wend
  PopItem `1
Wend
End Macro

NEWTYPE.ab2func
typ.s
name.s
synt.s
desc.s
inputs.s
result.s
bugs.s
seealso.s
example.s
public.l
End NEWTYPE

Dim List docu.s(0)
Dim List ab2func.ab2func(0)

Dim arg.s(20)

Function.l notokens{a.s}
succ.l = False

For n.l=0 To Len(a.s)-1
  c.b =  Peek.b(&a.s+n)
  If (c&$80) Then succ=False : n = Len(a.s)
  If c=@";" Then n = Len(a.s) : succ=True
Next

Function Return succ
End Function


#side_left  = 1
#side_right = 2
Function.s trim{a.s,@side.l}
If side&#side_left Then While Peek.b(&a.s)<=32 AND Peek.b(&a.s)>0:a.s = Right$(a.s,Len(a.s)-1) : Wend
If side&#side_right Then While Peek.b(&a.s+Len(a.s)-1)<=32 AND Peek.b(&a.s+Len(a.s)-1)>0:a.s = Left$(a.s,Len(a.s)-1):Wend
Function Return a.s
End Function



Function.s makenice{a.s,@isdocu.l}
SHARED allcomments.l
succ.l = True
If isdocu=True AND allcomments=False
  s.s = Left$(a.s,2)
  If s.s><";/" AND s.s><";=" AND s.s><";-" AND s.s><";#" Then a.s = ""
End If
s.s = Left$(a.s,8)
If s.s = ";=======" Then a.s = ""
If s.s = ";*******" Then a.s = ""
If s.s = ";-------" Then a.s = ""
If s.s = ";///////" Then a.s = ""
If s.s = ";_______" Then a.s = ""
If s.s = ";#######" Then a.s = ""

If Left$(a.s,1)= ";"
  a.s = Replace$(a.s,";*","")
  a.s = Replace$(a.s,";=","")
  a.s = Replace$(a.s,";+","")
  a.s = Replace$(a.s,";-","")
  a.s = Replace$(a.s,";/","")
  a.s = Replace$(a.s,";#","")
  a.s = Replace$(a.s,";%","")
  If Left$(a.s,1)= ";" Then a.s = Right$(a.s,Len(a.s)-1)
  a.s = trim{a.s,#side_right}
  If Left$(a.s,1)= "%" Then a.s = Right$(a.s,Len(a.s)-1)
  If Left$(a.s,1)= " " Then a.s = Right$(a.s,Len(a.s)-1)
  s.s = Right$(a.s,2)
  If s.s= " *" OR a.s ="*" Then a.s = Left$(a.s,FLen(a.s)-2)
  If s.s= " #" OR a.s ="#" Then a.s = Left$(a.s,FLen(a.s)-2)
  If s.s= " /" OR a.s ="/" Then a.s = Left$(a.s,FLen(a.s)-2)
  If s.s= " =" OR a.s ="=" Then a.s = Left$(a.s,FLen(a.s)-2)
  If s.s= " -" OR a.s ="-" Then a.s = Left$(a.s,FLen(a.s)-2)
  If s.s= " _" OR a.s ="_" Then a.s = Left$(a.s,FLen(a.s)-2)
  a.s = trim{a.s,#side_right}
End If
Function Return a.s
End Function

Function.s guidize{a.s}
a.s = Replace$(a.s,"}","\}")
a.s = Replace$(a.s,"{","\{")
a.s = Replace$(a.s,"Inputs:","@{B}Inputs:@{UB}")
a.s = Replace$(a.s,"Result:","@{B}Result:@{UB}")
a.s = Replace$(a.s,"Bugs:","@{B}Bugs:@{UB}")
a.s = Replace$(a.s,"Example:","@{B}Example:@{UB}")
a.s = Replace$(a.s,"See also:","@{B}See also:@{UB}")
a.s = Replace$(a.s,"Description:","@{B}Description:@{UB}")
a.s = Replace$(a.s,"Syntax:","@{B}Syntax:@{UB}")
a.s = Replace$(a.s,"::\\n","")
a.s = Replace$(a.s,"Name:","@{B}Name:@{UB}")
a.s = Replace$(a.s,"Platforms:","@{B}Platforms:@{UB}")
a.s = Replace$(a.s,"Purpose:","@{B}Purpose:@{UB}")
a.s = Replace$(a.s,"Author:","@{B}Author:@{UB}")
a.s = Replace$(a.s,"Date:","@{B}Date:@{UB}")
a.s = Replace$(a.s,"Abstract:","@{B}Abstract:@{UB}")
a.s = Replace$(a.s,"Requirements:","@{B}Requirements:@{UB}")
a.s = Replace$(a.s,"User Constants:","@{B}User Constants:@{UB}")
Function Return a.s
End Function


Function.s highlight{a.s,ownname.s}
SHARED ab2func()
ownname = LCase$(ownname)
ResetList ab2func()
While NextItem(ab2func())
  If LCase$(ab2func()\name)><ownname
  a.s = iReplace{a.s,ab2func()\name+" ","@{\\22 "+ab2func()\name+" \\22 link "+ab2func()\name+"} "}
  a.s = iReplace{a.s,ab2func()\name+"\\n","@{\\22 "+ab2func()\name+" \\22 link "+ab2func()\name+"}\\n"}
  a.s = iReplace{a.s,ab2func()\name+",","@{\\22 "+ab2func()\name+" \\22 link "+ab2func()\name+"},"}
  a.s = iReplace{a.s,ab2func()\name+".","@{\\22 "+ab2func()\name+" \\22 link "+ab2func()\name+"}."}
  a.s = iReplace{a.s,ab2func()\name+")","@{\\22 "+ab2func()\name+" \\22 link "+ab2func()\name+"})"}
  a.s = iReplace{a.s,ab2func()\name+"{","@{\\22 "+ab2func()\name+" \\22 link "+ab2func()\name+"} \{"}
  End If
Wend
Function Return a.s
End Function


Function.s funcname{a.s}
succ.l = True
func.s = ""
;NPrint a.s
a.s = trim{a.s}
For n.l=0 To Len(a.s)-1
  c.b = Peek.b(&a.s+n)
  If c<0
    n+1
    c2.b = Peek.b(&a.s+n)
    libnum.l  = c&$7f*2 + ((c2&$80) LSR 7)
    tokenid.l = c2&$7f ;-128;: str_ptr+1:blength-1
    If libnum = 0
      If tokenid = 8 OR tokenid = 9 OR tokenid=13
        endpos.l = Instr(a.s,"}",n)
        If endpos=0 Then endpos = Instr(a.s,":",n+1)
        If endpos=0 Then endpos = Len(a.s)
        If endpos
          func.s = Mid$(a.s,n+1,endpos-n)
          For m.l=0 To Len(func.s)-1
            d.b = Peek.b(&func.s+m)
            If d.b<0 Then func.s=""
          Next
         ; NPrint "."+func.s
          func.s = trim{func.s}
          If func.s><""
            If tokenid =  9 Then func.s = "Function result"+Left$(func.s,2)+" = "+trim{Right$(func.s,Len(func.s)-2)}
            If tokenid = 13 Then func.s = "Macro !"+func.s : func.s = Replace$(func.s,";","") ;: error {"Found macro:"+func.s}
            If tokenid = 8 Then func.s = "Statement "+func.s
            func.s = Replace$(func.s,"  "," ")
            func.s = Replace$(func.s,"{ ","{")
            func.s = Replace$(func.s,", ",",")
            func.s = Replace$(func.s," ,",",")
            func.s = Replace$(func.s," {","{")
            func.s = Replace$(func.s," }","}")
            func.s = Replace$(func.s,"{"," {")
            func.s = Replace$(func.s,"  "," ")
            NPrint func.s
          End If
        End If
      End If
    End If
    n=Len(a.s)
  End If
Next
;func.s = makenice{func.s}
func.s = trim{func.s}
Function Return func.s
End Function

error_SetFlags {#error_stdout}

infos.l = True
succ.l = False
showhelp.l = False
totallines.l=0

allcomments.l = False
; get the CLI args ...
Repeat
  ioption.s = dos_GetNextArg{}
  option.s = LCase$(ioption.s)
  If Peek.b(&option.s) = @"-" Then option.s = Right$(option.s,FLen(option.s)-1);: Else Goto skip
  Select option.s
    Case "o"  ;
       savepath.s = dos_GetNextArg{}
    Case "?"  ; help
      showhelp = True
    Case "h"
      showhelp.l = True
    Case "q"  ; quiet
      infos = False
    Case "i"
      pattern.s = dos_GetNextArg{}
    Case "all"
      allcomments.l = -1
    Default
      If option.s><""
        NPrint "ERROR: unknown option: \\22",ioption.s,"\\22"
        showhelp = True
        err.l = True
        option.s = ""
      End If
  End Select
  skip:
Until option.s = ""

If pattern.s = "" Then showhelp = True

If showhelp
  NPrint "AB2GuideExtract -i <inputpattern> [-o <output directory>] [-h] [-q] [-all] [?]"
  NPrint " "
  NPrint "This little tool extracts documentation from a .bb2 file and generates a .guide file."
  End
End If





filename.s = pattern.s
If savepath="" Then destfilename.s = dos_PathPart{filename}:Else destfilename =savepath

  path.s    = dos_PathPart{filename.s}
  filen.s   = dos_FilePart{filename.s}
  *parent.ml_node =  ml_CreatePathTree{path.s,filen.s}
  *parent   = ml_GetFirstNode{*parent}
  *freenode.ml_node = *parent
  count.l   = 0

  While *parent
    filename.s = ml_GetUserString{*parent}
    If dos_IsDir{filename.s} = False
      If infos Then NPrint "Analysing ",filename.s," ..."
      dos.l = file_Open {filename.s,#file_read}
      If dos.l>=0
        stem.s = dos_RemExt{dos_FilePart{filename.s}}
        ;stem2.s = Replace$(stem.s,".","_")
        logfile.s = stem.s + ".guide" ;dos_SetExt{stem.s,"guide"}
        logfile.s = dos_AddPart{destfilename.s,logfile.s}
        dos_Delete{logfile.s}
        xlog_SetFile{logfile.s}
        If infos Then NPrint "Writing to ",logfile.s,"..."
        xlog{ "@Database \\22AB3Includes\\22"}
        xlog{"@Width 80"}
;        xlog{"@font helvetica.font 13"}
        xlog{"@wordwrap"}
        ;xlog{"@font \\22vera sans\\22 15"}
        xlog{"@TAB 3"}
      ;  xlog{"@NODE Main \\22 Function Reference\\22"}
      ;  xlog{"      @{\\22   \\22 link "+stem2.s+"} "+stem.s}
      ;  xlog{"@ENDNODE"}
        xlog{""}
        xlog{"@NODE main \\22"+stem.s+"\\22"}
        xlog{""}
        xlog{"@{B}"+stem.s+"@{UB}"}
        xlog{""}
        ClearList docu.s()
        lastfunc.s = "Abstract Introduction"
        totalfiles.l+1
        While file_EOF{dos} = False
          a.s = file_ReadBB2Line{dos}
          totallines.l+1
          If notokens{a.s}
            a.s = makenice{a.s}
            ;If a.s><""
              If AddItem(docu.s())

              docu.s() = a.s
              ;NPrint a.s
              End If
            ;End If
          Else
            func.s = funcname{a.s}
            If func.s><""
              ;If infos Then NPrint "Found Function: ",func.s
              lastfunc.s = func.s
            Else
              If lastfunc.s><""

                  xname.s = Replace$(lastfunc.s,"FAST "," ")
                  epos.l = Instr(xname.s,"{")
                  apos.l = Instr(xname.s,"=")+1
                  If apos=1 Then apos.l = Instr(xname.s," ")
                  If epos=0 Then epos=Len(xname.s)+1
                  name.s = trim{Mid$(xname.s,apos,epos-apos)}

                  apos.l = Instr(xname.s," ",0)
                  typ.s = trim{Left$(xname.s,apos)}
                  xname.s = trim{Right$(xname.s,Len(xname.s)-Len(typ.s)-1)}


                  apos.l = Instr(xname.s,"{")
                  epos.l = Instr(xname.s,"}")
                  For n.l=0 To 19
                    arg.s(n) = ""
                  Next
                  n.l = 0
                  If apos<epos
                    arg.s = Mid$(xname.s,apos+1,epos-apos-1)
                    Repeat
                      apos.l = Instr(arg.s,",")
                      If apos>0
                        argname.s = Left$(arg.s,apos-1)
                        arg.s = Right$(arg.s,Len(arg.s)-apos)
                      Else
                        argname.s = arg.s
                        arg.s = ""
                      End If
                      If Peek.b(&argname.s)=@"@" Then argname.s = Right$(argname.s,Len(argname.s)-1)
                      arg.s(n) = argname.s
                      n+1
                    Until arg.s = "" OR n>18

                  End If
                 !add_sort{ab2func(),name,name.s}
                 If succ
                  ab2func()\typ     = typ.s
                  ab2func()\name    = name.s
                  ab2func()\synt    = xname.s
                  ab2func()\inputs  = "\\n"
                  ab2func()\result  = "\\n"
                  ab2func()\bugs    = ""
                  ab2func()\example = ""
                  ab2func()\seealso = ""
                  ab2func()\desc    = ""
                  checkname.s = name.s + " {"
                  If allcomments><0 OR name = "Abstract" OR name = "Introduction"
                    mode.s = "Description"
                  Else
                    mode.s = "trash"
                  End If
                  space.l = 0
                  ResetList docu.s()
                  While NextItem(docu.s())
                    If docu.s()><name.s ; skip the name line ...
                      If Instr(docu.s(),"Inputs:")   Then mode.s = "Inputs"
                      If Instr(docu.s(),"Result:")   Then mode.s = "Result"
                      If Instr(docu.s(),"Bugs:")     Then mode.s = "Bugs"
                      If Instr(docu.s(),"Example:")  Then mode.s = "Example"
                      If Instr(docu.s(),"See also:") Then mode.s = "See also"
                      If Instr(docu.s(),"Syntax:")   Then mode.s = "Syntax"
                      If Instr(docu.s(),"Description:")   Then mode.s = "Description"
                      Select mode.s
                        Case "Inputs"
                          docu.s() = trim{Replace$(docu.s(),"Inputs:","")}
                          If docu.s()><""
                            If Left$(docu.s(),1)="#" Then ab2func()\inputs + "    "
                            ab2func()\inputs + docu.s()+"\\n"
                          End If
                        Case "Result"
                          docu.s() = trim{Replace$(docu.s(),"Result:","")}
                          If Left$(docu.s(),1)="#" Then ab2func()\inputs + "    "
                          If docu.s()><""
                            ab2func()\result + docu.s()+"\\n"
                          End If
                        Case "Bugs"
                          docu.s() = trim{Replace$(docu.s(),"Bugs:","")}
                          ab2func()\bugs   + docu.s()+"\\n"
                        Case "Example"
                          docu.s() = trim{Replace$(docu.s(),"Example:",""),#side_right}
                          ab2func()\example+ docu.s()+"\\n"
                        Case "See also"
                          docu.s() = trim{Replace$(docu.s(),"See also:","")}
                          ab2func()\seealso+ docu.s()+"\\n"
                        Case "Syntax"
                          ; well, we generate this again anyway...
                        Default
                          If Instr(docu.s(),"Description:") = False
                            If docu.s()><"" OR space=0
                              If mode><"trash"
                                ab2func()\desc   + docu.s()+"\\n"
                              End If
                            End If
                            If docu.s()="" Then space=1:Else space=0
                          Else
                            space=1
                            If Len(ab2func()\desc)<4 Then ab2func()\desc=""
                          End If

                      End Select
                    End If
                  Wend

                  n.l = 0
                  While arg.s(n)><""
                    If Instr(ab2func()\inputs,arg.s(n)) = 0
                      ab2func()\inputs + "- "+arg.s(n)+"    : ???\\n"
                    End If
                    n+1
                  Wend
                  ret.s = ""
                  ap.l = Instr(ab2func()\result,"- ",0)
                  If ap
                    bp.l = Instr(ab2func()\result,".",ap)
                    If bp>ap
                      ret.s = Mid$(ab2func()\result,ap+1,bp-ap)
                      ab2func()\synt = Replace$(xname.s,"result.",ret.s)
                    End If
                  End If

                  bp.l = Instr(xname.s,".",0)
                  cp.l = Instr(xname.s,"{",0)
                  If bp<cp AND bp>0
                    ret.s = Left$(xname.s,bp+2)
                  End If

                  If ab2func()\result="\\n" AND ret.s><""
                    ab2func()\result = "\\n- "+ret.s+"    : ???\\n"
                  End If

                  If ab2func()\inputs  = "\\n" Then ab2func()\inputs  = "none\\n"
                  If ab2func()\result  = "\\n" Then ab2func()\result  = "none\\n"
                  If ab2func()\bugs    = "" Then ab2func()\bugs    = "no bugs\\n"
                  If ab2func()\example = "" Then ab2func()\example = "no example\\n"
                  If ab2func()\seealso = "" Then ab2func()\seealso = "-\\n"
                  If ab2func()\desc    = "" Then ab2func()\desc    = "* no description available *\\n"

                  If Right$(ab2func()\desc,2)="\\n\\n" Then ab2func()\desc = Left$(ab2func()\desc,Len(ab2func()\desc)-1)
                  If Left$(ab2func()\desc,2)="\\n\\n" Then ab2func()\desc = Right$(ab2func()\desc,Len(ab2func()\desc)-1)

                End If
                lastfunc.s = ""
                ClearList docu.s()
              End If

            End If
          End If
        Wend
        !list_unique{ab2func(),name,uname.s}

        pubfunc.l = 0  : privfunc.l = 0
        pubmacro.l = 0 : privmacro.l = 0
        ResetList ab2func()
        While NextItem(ab2func())
          If Instr(ab2func()\desc,"* private")><0 OR Left$(ab2func()\name,1)="_"
            If ab2func()\typ="Function" OR ab2func()\typ="Statement" Then privfunc+1
            If ab2func()\typ="Macro" Then privmacro+1
            ab2func()\public = False
          Else
            If ab2func()\typ="Function" OR ab2func()\typ="Statement" Then pubfunc+1
            If ab2func()\typ="Macro" Then pubmacro+1
            ab2func()\public = True
          End If
        Wend

        xlog{"@{B}Abstract@{UB}"}
        xlog{""}
        ResetList ab2func()
        While NextItem(ab2func())
          If ab2func()\typ="Abstract"
          xlog {"   @{\\22 "+ab2func()\name+" \\22 link "+ab2func()\name+"} "}
          End If
        Wend

        xlog{""}
        xlog{"@{B}Public Function Index:@{UB}"}
        xlog{""}
        If pubfunc>0
          ResetList ab2func()
          While NextItem(ab2func())
            If ab2func()\typ="Function" OR ab2func()\typ="Statement"
              If ab2func()\public Then xlog {"   @{\\22 "+ab2func()\name+" \\22 link "+ab2func()\name+"} "}
            End If
          Wend
        Else
          xlog{" * no functions/statements defined * "}
        End If

        If privfunc>0
          xlog{""}
          xlog{"@{B}Private Function Index:@{UB}"}
          xlog{""}
          ResetList ab2func()
          While NextItem(ab2func())
            If ab2func()\typ="Function" OR ab2func()\typ="Statement"
              If ab2func()\public=False Then xlog {"   @{\\22 "+ab2func()\name+" \\22 link "+ab2func()\name+"} "}
            End If
          Wend
        End If

        xlog{""}
        xlog{"@{B}Public Macro Index:@{UB}"}
        xlog{""}
        If pubmacro>0
          ResetList ab2func()
          While NextItem(ab2func())
            If ab2func()\typ="Macro"
              If ab2func()\public Then xlog {"   @{\\22 "+ab2func()\name+" \\22 link "+ab2func()\name+"} "}
            End If
          Wend
        Else
          xlog{" * no macros defined * "}
        End If

        If privmacro>0
          xlog{""}
          xlog{"@{B}Private Macro Index:@{UB}"}
          xlog{""}
          ResetList ab2func()
          While NextItem(ab2func())
            If ab2func()\typ="Macro"
              If ab2func()\public=False Then  xlog {"   @{\\22 "+ab2func()\name+" \\22 link "+ab2func()\name+"} "}
            End If
          Wend
        End If

        xlog{""}

        xlog{"@ENDNODE"}


        ResetList ab2func()
        While NextItemFast(ab2func())
          xlog {"@NODE "+ab2func()\name+" \\22"+ab2func()\name+"\\22"}
          c.l = 0

          If ab2func()\typ><"Abstract"
            xlog{""}
            xlog{"@{B}"+ab2func()\name+"@{UB}"}
            xlog{""}
            xlog{guidize{"Syntax: "+ab2func()\synt }}
            xlog{""}
            xlog{"@{B}Description:@{UB}"}
          End If

          If ab2func()\typ="Abstract"
            If Instr(ab2func()\desc,"Name:")=0         Then xlog{"\\n@{B}Name:@{UB} "+dos_RemExt{dos_FilePart{filename}}}
            If Instr(ab2func()\desc,"Platforms:")=0    Then xlog{"\\n@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4"}
            DateStamp_ datestamp.DateStamp
            If Instr(ab2func()\desc,"Date:")=0         Then xlog{"\\n@{B}Date:@{UB} "+Date$(datestamp\ds_Days)}
            If Instr(ab2func()\desc,"Author:")=0       Then xlog{"\\n@{B}Author:@{UB} <unknown>"}
            If Instr(ab2func()\desc,"Requirements:")=0 Then xlog{"\\n@{B}Requirements: @{UB} Amiblitz3"}
            If Instr(ab2func()\desc,"Purpose:")=0      Then xlog{"\\n@{B}Purpose:@{UB}\\nExtend AB3 functionality."}
          End If

          PushItem ab2func()
          xlog{highlight{guidize{ab2func()\desc},ab2func()\name}}
          PopItem ab2func()

          If ab2func()\typ="Abstract"
            If Instr(ab2func()\desc,"Abstract:")=0     Then xlog{"\\n@{B}Abstract:@{UB}\\n* no abstract available *"}
            If Instr(ab2func()\desc,"User Constants:")=0 Then xlog{"\\n@{B}User Constants:@{UB}\\n#max_objects   = n"}
          End If


          If ab2func()\typ><"Abstract"
            If ab2func()\inputs><""  Then xlog{guidize{"Inputs:      "+ab2func()\inputs} }
            If ab2func()\result><""  Then xlog{guidize{"Result:      "+ab2func()\result} }
          End If

          PushItem ab2func()
            If ab2func()\example><"" Then xlog{highlight{guidize{"Example:     "+ab2func()\example},ab2func()\name}}
          PopItem ab2func()

          PushItem ab2func()
            If ab2func()\bugs><""    Then xlog{highlight{guidize{"Bugs:        "+ab2func()\bugs},ab2func()\name}   }
          PopItem ab2func()

          PushItem ab2func()
            If ab2func()\seealso><"" Then xlog{highlight{guidize{"See also:    "+ab2func()\seealso},ab2func()\name}}
          PopItem ab2func()
          xlog{""}
          xlog{"@ENDNODE"}

        Wend
        ClearList ab2func()
        totalfuncs.l + privmacro+privfunc+pubmacro+pubfunc

        file_Close {dos}
      Else
        If infos Then NPrint "Unable to cut file \\22"+filename.s+"\\22 !"
      End If
    End If
    *parent = ml_GetNextNode{*parent}
    count+1

    signals.l = SetSignal_(0,#SIGBREAKF_CTRL_C)
    If signals&#SIGBREAKF_CTRL_C
      *parent = 0
    End If
  Wend
  ml_RemoveAllNodes{*freenode}
  NPrint "Checked ",totallines," of code in ",totalfiles," of files, ",totalfuncs," functions."
;Delay_ 200
End
 

 

