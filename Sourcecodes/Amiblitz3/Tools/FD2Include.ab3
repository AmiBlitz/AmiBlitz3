; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "///Tools"
; ExeFile         = "FD2Include"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 30
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 142
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
optimize 7
Syntax 2

XINCLUDE "dos.include.ab3"
XINCLUDE "file.include.ab3"

If NumPars<1
  NPrint "Usage:"
  NPrint "FD2Include <fd-file>"
  NPrint "Converts an FD file of a library into an AB3 include file ready to compile!"
  End
End If

startfile.s = Par$(1)

fidR.l = file_Open{startfile.s,#file_read}

NEWTYPE.fdengine
bias.l
public.l
basename.s
funccount.l
libname.s
includename.s
prefix.s
maxlenlvo.l
End NEWTYPE

NEWTYPE.func
name.s
param.s[32]
reg.s[32]
lvo.l
lvoname.s
public.l
paramcount.l
End NEWTYPE

SHARED fd.fdengine
fd\bias        = 30
fd\public      = True
fd\basename    = dos_FilePart{dos_RemExt{startfile}}
fd\libname     = dos_SetExt{Replace$(fd\basename,"_lib",""),"library"}
fd\basename    = "_"+fd\basename+"Base"
fd\funccount   = 0
fd\includename = dos_RemExt{fd\libname} +".include"
fd\prefix      = dos_RemExt{fd\libname}

Dim List func.func(0)

If fidR>=0
  quitme.l = False
  While quitme = False AND file_EOF{fidR}=False
    lin.s = file_ReadLine{fidR} : If lin.s = "" Then quitme = True
    compos.l = Instr(lin,"*")
    If compos>0 Then lin = Left$(lin,compos-1)
    If Left$(lin.s,2)="##"
      Select LCase$(Mid$(lin.s,3,3))
        Case "bas"
          fd\basename = Right$(lin.s,FLen(lin.s)-7)
        Case "bia"
          fd\bias = Vallong(Right$(lin.s,FLen(lin.s)-7))
        Case "pub"
          fd\public = True
        Case "pri"
          fd\public = False
        Case "end"
          quitme = True
        Default
          error{"Unknown instruction:"+ LCase$(Mid$(lin.s,3,3))}
      End Select
    Else
      lin=Replace$(lin," ","")
      pos1.l = Instr(lin,"(")
      pos2.l = Instr(lin,")")
      If pos1>0 AND pos2>0
        name.s  = Left$(lin,pos1-1)
        param.s = Mid$(lin,pos1+1,pos2-pos1-1)
        reg.s   = Right$(lin,FLen(lin)-pos2);: NPrint reg
        pos1.l  = Instr(reg,"(")
        pos2.l  = Instr(reg,")")
        reg     = Right$(reg,FLen(reg)-pos1)
        reg     = Left$(reg,FLen(reg)-1)
        ;NPrint "; Library function "+name+"("+param+")/("+reg+")"
        If AddItem(func())
          If UCase$(Left$(name,FLen(fd\prefix))) >< UCase$(fd\prefix)
            func()\name = fd\prefix+"_"+name
          Else
            func()\name = name
          End If
          While param><""
            pos.l = Instr(param,",")
            If pos<=0 Then thisparam.s = param:param="":Else thisparam=Left$(param,pos-1):param = Right$(param,Len(param)-pos)
            thisparam = Replace$(thisparam," ","")
            If thisparam><""
              func()\param[func()\paramcount] = thisparam
              func()\paramcount+1
            Else
              param = ""
            End If
          Wend
          For n.l=0 To func()\paramcount-1
            pos.l = Instr(reg,",")
            pos2.l = Instr(reg,"/")
            If pos2>0 Then If pos=0 Then pos = pos2: Else pos = Min(pos,pos2)
            If pos<=0
              thisreg.s = reg:reg=""
            Else
              thisreg=Left$(reg,pos-1):reg = Right$(reg,FLen(reg)-pos)
            End If
            ;NPrint "thisreg: ",thisreg," ... ",reg
            func()\reg[n] = thisreg
          Next
          func()\lvo = fd\bias : fd\funccount+1
          fd\bias + 6
          func()\lvoname = "_LVO"+UCase$(fd\basename)+"_"+name
          fd\maxlenlvo = Max(FLen(func()\lvoname),fd\maxlenlvo)
          func()\public = fd\public
        End If
      End If
    End If
  Wend
  ; print out ...
  NPrint "; "+fd\includename+".ab2 automatically generated by FD2Include (Thilo Koehler)\\n"
  NPrint "CNIF #__include=0"
  NPrint "optimize 7"
  NPrint "Syntax 2"
  NPrint "WBStartup"
  NPrint "CEND"
  NPrint "\\nXINCLUDE \\22error.include.ab3\\22\\n"
  NPrint "; Library offsets:"
  ResetList func()
  While NextItem(func())
    space.s = LSet$(" ",fd\maxlenlvo-Len(func()\lvoname))
    NPrint "#"+func()\lvoname+space.s+" = -"+Str$(func()\lvo)
  Wend
  NPrint "\\nSHARED *"+fd\basename+".Library\\n"
  NPrint "; Helper Macros:"
  saveregs.s    = "_"+fd\basename+"_SaveRegs"
  restoreregs.s = "_"+fd\basename+"_RestoreRegs"
  NPrint "Macro "+saveregs
  NPrint "MOVE.l a4,-(a7) : MOVE.l a5,-(a7) : MOVE.l a6,-(a7) : MOVE.l d7,-(a7)"
  NPrint "End Macro"
  NPrint "\\nMacro "+restoreregs
  NPrint "MOVE.l (a7)+,d7 : MOVE.l (a7)+,a6 : MOVE.l (a7)+,a5 : MOVE.l (a7)+,a4"
  NPrint "End Macro\\n\\n"
  NPrint "; Wrapper Macros:"
  ResetList func()
  While NextItem(func())
    Print "Macro "+func()\name+";{ret.l"
    For n.l=0 To func()\paramcount-1
      Print ","+func()\param[n]
    Next
    NPrint "}"
    NPrint "!"+saveregs
    For n.l=0 To func()\paramcount-1
      NPrint "GetReg "+func()\reg[n]+",`"+Str$(n+2)
    Next
    NPrint "GetReg a6,*"+fd\basename
    NPrint "JSR "+func()\lvoname+"(a6)"
    NPrint "!"+restoreregs
    NPrint "`1 = PutD0"
    NPrint "End Macro\\n"
  Wend
  NPrint "\\n; Open/Close Library:"
  NPrint "Function.l "+fd\prefix+"_OpenLib{@minVersion.l}"
  NPrint "If (*"+fd\basename+")"
  NPrint "  If (minVersion<=*"+fd\basename+"\lib_Version) Then Function Return *"+fd\basename
  NPrint "  CloseLibrary_ *"+fd\basename+" : *"+fd\basename+" = 0"
  NPrint "End If"
  NPrint "If minVersion<0 Then minVersion = 0"
  NPrint "*"+fd\basename+" = OpenLibrary_ (\\22"+fd\libname+"\\22,minVersion)"
  NPrint "If *"+fd\basename
  NPrint "  ; (!) Do some other init stuff here..."
  NPrint "Else"
  NPrint "  If (minVersion>0)"
  NPrint "    error{\\22Unable to open "+fd\libname+" (v\\22+Str$(minVersion)+\\22+)!\\22}"
  NPrint "  Else"
  NPrint "    error{\\22Unable to open "+fd\libname+"!\\22}"
  NPrint "  End If"
  NPrint "End If"
  NPrint "Function Return *"+fd\basename
  NPrint "End Function\\n"
  NPrint "Statement "+fd\prefix+"_CloseLib {}"
  NPrint "If *"+fd\basename
  NPrint "  ; (!) Do some freeing stuff here that you inited in "+fd\basename+"_Init{}..."
  NPrint "  CloseLibrary_ *"+fd\basename+" : *"+fd\basename+" = 0"
  NPrint "End If"
  NPrint "End Statement"
  NPrint "!autoexit{"+fd\prefix+"_CloseLib}\\n\\n"
  NPrint "; Wrapper Functions:"
  ResetList func()
  While NextItem(func())
    Print "Function.l "+func()\name+"{"
    For n.l=0 To func()\paramcount-1
      If n>0 Then Print ","
      Print "_"+func()\param[n]+".l"
    Next
    NPrint "}"
    NPrint "If ("+fd\prefix+"_OpenLib{}) ; (!) put your min version here if needed!"
    Print "  !"+func()\name+"{result.l"
    For n.l=0 To func()\paramcount-1
      Print ",_"+func()\param[n]
    Next
    NPrint "}"
    NPrint "End If"
    NPrint "Function Return result"
    NPrint "End Function\\n"
  Wend
  NPrint "\\n; User Functions..."
  NPrint "Function.l "+fd\prefix+"_MyFunction{myParam.l}"
  NPrint "If "+fd\prefix+"_OpenLib{}"
  NPrint "  ; (!) Do here your stuff for this function.\\n  ; (!) The OpenLib call makes sure that your library is open when you need it!"
  NPrint "  ; (!) A library function is called via macro like this: "
  ResetList func()
  If NextItem(func())
    Print "  !"+func()\name+"{myResult.l"
    For n.l=0 To func()\paramcount-1
      Print ",_"+func()\param[n]+".l"
    Next
    Print "}\\n"
  Else
    NPrint " .... hmmm, actually no function found, something must be wrong ...."
  End If
  NPrint "  ; (!) Note: The first macro parameter is always the return value of the lib function as a long word, followed by the lib function parameters."
  NPrint "  ; (!) Note: Not all functions will return something meaningful. Read always the librarie's autodocs!"
  NPrint "  ; (!) Note: Strings have to be passed as a pointer (&myString$) to the macro, no expressions are allowed!"
  NPrint "End If"
  NPrint "Function Return myResult"
  NPrint "End Function\\n\\n"
  NPrint "CNIF #__include=0\\n"
  NPrint "; (!) place your built-in demo here\\n"
  NPrint "End\\n"
  NPrint "CEND\\n\\n"

  file_Close{fidR}
EndIf
End

