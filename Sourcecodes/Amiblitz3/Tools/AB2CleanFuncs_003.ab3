; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "C:"
; ExeFile         = "AB2CleanFuncs"
; CreateIcon      = 0
; Residents       = "Blitzlibs:all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 502400
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = "Sourcecodes:Includes/intuition.include.bb2"
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 252
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 2
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
; This tools replaces function names in your program
; from include files, where the function name has slightly
; changed, e.g. ffa_length => ffa_getLength etc.
; this helps you to keep the source up to date wihtout
; changing the function names manually

OPTIMIZE 7

SYNTAX 2
WBStartup
XINCLUDE "file.include.ab3"
XINCLUDE "multilist.include.ab3"


Macro add_sort ; Listname, Sortentry, Value
breakme.l = False
succ.l = False
ResetList `1
Repeat
  If NextItemFast(`1)
    If `1\`2>=`3
      If LCase$(`1\`2)=LCase$(`3)
        ; already Exists !
        NPrint "WARNING: Function already declared: ",`3
        breakme = True
      Else
      If PrevItem (`1) ; whoops, we seeked 1 to far
        If AddItem (`1)
          `1\`2 = `3
          succ=True
        End If
        breakme = True
      Else
        If AddFirst (`1)
          `1\`2 = `3
          succ=True
        End If
        breakme=True
      End If
      End If
    End If
  Else
    If AddItem (`1) ; seek till there is no more
      `1\`2 = `3
      succ = True
    End If
    breakme = True
  End If
Until breakme = True
End Macro


NEWTYPE.ab2func
typ.s
name.s
synt.s
count.l
lname.s
minname.s
End NEWTYPE

NEWTYPE.mapper
oldname.s
newname.s
End NEWTYPE

Dim List ab2func.ab2func(0)
Dim List srcfunc.ab2func(0)
Dim List mapper.mapper(0)

; check if a token is present in line
Function.l notokens{a.s}
succ.l = False

For n.l=0 To Len(a.s)-1
  c.b =  Peek.b(&a.s+n)
  If (c&$80) Then succ=False : n = Len(a.s)
  If c=@";" Then n = Len(a.s) : succ=True
Next

Function Return succ
End Function


Function.s trim{a.s}
While Peek.b(&a.s)<=32 AND Peek.b(&a.s)>0:a.s = Right$(a.s,FLen(a.s)-1) : Wend
While Peek.b(&a.s+FLen(a.s)-1)<=32 AND Peek.b(&a.s+FLen(a.s)-1)>0:a.s = Left$(a.s,FLen(a.s)-1):Wend
Function Return a.s
End Function


Function.s makenice{a.s}
succ.l = True

count.l = 0
strptr.l = &a.s
For n.l=0 To Peek.l(strptr-4)-1
  c.b =  Peek.b(strptr+n)
  If c<32 Then c=32

  If c=@"*"
    If count=0 Then lptr.l = strptr+n
    count+1
  Else
    If count>1
      For xptr.l = lptr To strptr+n-1
        Poke.b xptr,32
      Next
    End If
    count=0
  End If
  Poke.b (strptr+n),c
Next

    If count>=1
      For xptr.l = lptr To strptr+Len(a.s)-1
        Poke.b xptr,32
      Next
    End If

a.s = Replace$(a.s,";","")
a.s = Replace$(a.s,":","")
a.s = trim{a.s}
Function Return a.s
End Function

;********************************************
;**                                        **
;*  result.l = myfunc {a.l,b.l}             *
;*                                          *
;*  description:                            *
;*  This function does basically nothing.   *
;*                                          *
;**                                        **
;********************************************


;////////////////////////////////////////////
;/                                          /
;/  result.l = myfunc {a.l,b.l}             /
;/                                          /
;/  description:                            /
;/  This function does basically nothing.   /
;/                                          /
;////////////////////////////////////////////


;============================================
;=                                          =
;=  result.l = myfunc {a.l,b.l}             =
;=                                          =
;=  description:                            =
;=  This Function does basically nothing.   =
;=                                          =
;============================================


;############################################
;#                                          #
;#  result.l = myfunc {a.l,b.l}             #
;#                                          #
;#  description:                            #
;#  This function does basically nothing.   #
;#                                          #
;############################################


;____________________________________________
;
;  result.l = myfunc {a.l,b.l}
;
;  description:
;  This function does basically nothing.
;
;____________________________________________


;--------------------------------------------
;-                                          -
;-  result.l = myfunc {a.l,b.l}             -
;-                                          -
;-  description:                            -
;-  This function does basically nothing.   -
;-                                          -
;--------------------------------------------


;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
;X                                          X
;X  result.l = myfunc {a.l,b.l}             X
;X                                          X
;X  description:                            X
;X  This function does basically nothing.   X
;X                                          X
;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXxxx


Function.s funcname{a.s}
SHARED totalfuncs.l
succ.l = True
func.s = ""
;NPrint a.s
a.s = trim{a.s}
For n.l=0 To Len(a.s)-1
  c.b = Peek.b(&a.s+n)
  If c<0
    n+1
    c2.b = Peek.b(&a.s+n)
    libnum.l  = c&$7f*2 + ((c2&$80) LSR 7)
    tokenid.l = c2&$7f ;-128;: str_ptr+1:blength-1
    If libnum = 0
      If tokenid = 8 OR tokenid = 9 OR tokenid=13
        endpos.l = Instr(a.s,"}",n)
        If endpos=0 Then endpos = Instr(a.s,":",n+1)
        If endpos=0 Then endpos = Len(a.s)
        If endpos
          func.s = Mid$(a.s,n+1,endpos-n)
          For m.l=0 To Len(func.s)-1
            d.b = Peek.b(&func.s+m)
            If d.b<0 Then func.s=""
          Next
         ; NPrint "."+func.s
          func.s = trim{func.s}
          If func.s><""
            If tokenid =  9 Then func.s = "Function result"+Left$(func.s,2)+" = "+trim{Right$(func.s,Len(func.s)-2)}
            If tokenid = 13 Then func.s = "Macro !"+func.s;: error {"Found macro:"+func.s}
            If tokenid = 8 Then func.s = "Statement "+func.s
           ; NPrint func.s
           totalfuncs+1
          End If
        End If
      End If
    End If
    n=Len(a.s)
  End If
Next
func.s = makenice{func.s}
func.s = trim{func.s}
Function Return func.s
End Function

Function.l findFuncCall{a.s,ipos.l}
epos.l = Instr(a.s,"{",ipos)
spos.l = epos-2
apos.l = -1
gotsomething.l=0
If epos>0
  apos=1
  ;Print "getting..."
  While spos>0
    c.b=Peek.b(&a.s+spos)
    If c.b=@" " OR c.b = @"(" OR c.b = @":" OR c.b=@"{" OR c.b = @"+" OR c.b=@"*" OR c.b=@"/" OR c.b=@"-" OR c.b=@"&" OR c.b=@"|" OR c.b=@"=" OR c.b=96 OR c.b=@";" OR c.b=@"," OR c.b=@">" OR c.b=@"<" OR c.b=@"&" OR c.b=@"(" OR c.b=@"/"
      If gotsomething
        apos.l = spos+2
        spos=0
      End If
    Else
      If c>32 AND c<=127
      gotsomething=-1
      End If
    End If
    ;Print Chr$(c)
    spos-1
  Wend
  ;Print "\\n"
  ;name.s = Mid$(a.s,apos,epos-apos)
 ; NPrint "INTERN Func: ",name.s
End If
Function Return apos
End Function



error_SetFlags {#error_stdout}

infos.l = True
succ.l = False
showhelp.l = False

savepath.s = ""
mappingfile.s = ""
; get the CLI args ...
Repeat
  ioption.s = dos_GetNextArg{}
  option.s = LCase$(ioption.s)
  If Peek.b(&option.s) = @"-" Then option.s = Right$(option.s,FLen(option.s)-1);: Else Goto skip
  Select option.s
    Case "o"  ;
       savepath.s = dos_GetNextArg{}
    Case "?"  ; help
      showhelp = True
    Case "h"
      showhelp.l = True
    Case "q"  ; quiet
      infos = False
    Case "i"
      pattern.s = dos_GetNextArg{}
    Case "s"
      sourcepattern.s = dos_GetNextArg{}
    Case "m"
      mappingfile.s = dos_GetNextArg {}
    Default
      If option.s><""
        NPrint "ERROR: unknown option: \\22",ioption.s,"\\22"
        showhelp = True
        err.l = True
        option.s = ""
      End If
  End Select
  skip:
Until option.s = ""

If pattern.s = "" Then showhelp = True

If showhelp
  NPrint "AB2CleanFuncs -i <include dir> -s <sources pattern> [-o <output dir>] [-m <mappingfile>] [-h]"
  NPrint " "
  NPrint "This little tool extracts all functions from the include dir and crosscheck all .bb2 files that match the  sourcecode pattern."
  NPrint "Functions that have wrong case writing will be corrected, also some small variances are corrected."
  End
End If

filename.s = pattern.s
If mappingfile><""
fid.l = file_Open {mappingfile,#file_read}
If fid>=0
  While file_EOF{fid} = False
    lineA.s = file_ReadLine {fid}
    pos.l = Instr(lineA.s,"#")
    If pos>0
      If AddItem(mapper())
        mapper()\oldname = Replace$(LCase$(Left$(lineA,pos-1)),"_","")
        mapper()\newname = Right$(lineA,FLen(lineA)-pos)
      ;  NPrint "Mapping ",mapper()\oldname,"=>",mapper()\newname
      End If
    End If
  Wend
  file_Close{fid}
End If
End If

  path.s    = dos_PathPart{filename.s}
  filen.s   = dos_FilePart{filename.s}
  *parent.ml_node =  ml_CreatePathTree {path.s,filen.s}
  *parent   = ml_GetFirstNode {*parent}
  *freenode.ml_node = *parent
  breakmex.l = False
  count.l   = 0
  totalfuncs.l = 0
  While *parent
    filename.s = ml_GetUserString {*parent}
    If dos_IsDir{filename.s} = False
      If infos Then NPrint "Analysing ",filename.s," ..."
      dos.l = file_Open {filename.s,#file_read}
      If dos.l>=0
        While file_EOF{dos} = False AND breakmex=False
          a.s = file_ReadBB2Line {dos}
          If notokens{a.s}

          Else
            func.s = funcname{a.s}
            If func.s><""
              xname.s = Replace$(func.s,"FAST "," ")
              epos.l = Instr(xname.s,"{")
              apos.l = Instr(xname.s,"=")+1
              If apos=1 Then apos.l = Instr(xname.s," ")
              If epos=0 Then epos=Len(xname.s)+1
              name.s = trim{Mid$(xname.s,apos,epos-apos)}

              apos.l = Instr(xname.s," ",0)
              typ.s = trim{Left$(xname.s,apos)}
              xname.s = trim{Right$(xname.s,Len(xname.s)-Len(typ.s)-1)}

              !add_sort{ab2func(),name,name.s}
              If succ
              ab2func()\typ     = typ.s
              ab2func()\name    = name.s
              ab2func()\synt    = xname.s
              ab2func()\lname   = LCase$(Replace$(name,"_",""))
              minname.s = Replace$(name,"_get","_")
              minname.s = Replace$(minname,"_set","_")
              minname.s = Replace$(minname,"_Get","_")
              minname.s = Replace$(minname,"_Set","_")
              minname.s = Replace$(minname,"_","")
              ab2func()\minname   = LCase$(minname)
              If Right$(ab2func()\name,1)="_" Then ab2func()\lname+"_"
              ab2func()\count   = 0
              End If
            End If
          End If

          signals.l = SetSignal_(0,#SIGBREAKF_CTRL_C)
          If signals&#SIGBREAKF_CTRL_C
            *parent = 0
            breakmex=True
            NPrint "*** USER BREAK ***"
          End If

        Wend
        file_Close {dos}
      Else
        If infos Then NPrint "Unable to cut file \\22"+filename.s+"\\22 !"
      End If
    End If
    If *parent Then *parent = ml_GetNextNode {*parent}
    count+1

  Wend
  ml_RemoveAllNodes {*freenode}
  totalfuncs.l = 0
  ResetList ab2func()
  While NextItemFast(ab2func())
    ;NPrint ab2func()\lname
    totalfuncs+1
  Wend
  NPrint "Found ",totalfuncs," functions/statements/macros."
  NPrint "Will check sourcecodes now ..."



  filename.s = sourcepattern.s

  path.s    = dos_PathPart{filename.s}
  filen.s   = dos_FilePart{filename.s}
  *parent.ml_node =  ml_CreatePathTree {path.s,filen.s}
  *parent   = ml_GetFirstNode {*parent}
  *freenode.ml_node = *parent
  breakmex.l = False
  count.l   = 0
  totalfuncs.l = 0
  While *parent
    filename.s = ml_GetUserString {*parent}
    If dos_IsDir{filename.s} = False
      If infos Then NPrint "Analysing ",filename.s," ..."
      dos.l = file_Open {filename.s,#file_read}
      If savepath=""
        savefile.s = dos_SetExt{filename,"upd.bb2"}
      Else
        savefile.s = dos_AddPart{savepath,dos_FilePart{filename}}
      End If
      dosD.l = file_Open {savefile,#file_write}
      If dos.l>=0 AND dosD>=0
        ClearList srcfunc()
        While file_EOF{dos} = False AND breakmex=False
          a.s = file_ReadBB2Line{dos}
          If notokens{a.s}

          Else
            func.s = funcname{a.s}
            If func.s><""
              xname.s = Replace$(func.s,"FAST "," ")
              epos.l = Instr(xname.s,"{")
              apos.l = Instr(xname.s,"=")+1
              If apos=1 Then apos.l = Instr(xname.s," ")
              If epos=0 Then epos=Len(xname.s)+1
              name.s = trim{Mid$(xname.s,apos,epos-apos)}
              name.s = Replace$(name.s,";","")
              name.s = Replace$(name.s,"\\22","")

              apos.l = Instr(xname.s," ",0)
              typ.s = trim{Left$(xname.s,apos)}
              xname.s = trim{Right$(xname.s,Len(xname.s)-Len(typ.s)-1)}

              !add_sort{srcfunc(),name,name.s}
              If succ
              srcfunc()\typ     = typ.s
              srcfunc()\name    = name.s
              srcfunc()\synt    = xname.s
              srcfunc()\count   = 0
              End If
            End If
          End If

          signals.l = SetSignal_(0,#SIGBREAKF_CTRL_C)
          If signals&#SIGBREAKF_CTRL_C
            *parent = 0
            breakmex=True
            NPrint "*** USER BREAK ***"
          End If

        Wend
 


        file_Seek{dos,0}


        While file_EOF{dos} = False AND breakmex=False
            a.s = file_ReadBB2Line{dos}
            fpos.l = 0
            Repeat
              apos.l = findFuncCall{a.s,fpos.l}
              If apos>0
                epos.l = Instr(a.s,"{",apos) : If epos<=0 Then epos = FLen(a.s)
                func.s = Mid$(a.s,apos,epos-apos)
                fpos = epos+1
                name.s = trim{func.s}
                name.s = Replace$(name.s,";","")
                name.s = Replace$(name.s,"\\22","")
                name.s = trim{name.s}
                                                                                                                                                                                                                                                    






                lname.s = Replace$(LCase$(name.s),"_","")
                minname.s = Replace$(lname.s,"get","")
                minname.s = Replace$(minname.s,"set","")
                ;minname.s = Replace$(minname.s,"Get","")
                ;minname.s = Replace$(minname.s,"Set","")

                correctname.s = ""
                pri.l = 0

                ; check if own func
                  ResetList srcfunc()
                  While NextItemFast(srcfunc()) AND pri<200
                    If name = srcfunc()\name
                      srcfunc()\count+1
                    ;  NPrint ".. is an include func... ",name.s
                    pri=200
                    End If
                  Wend

                 ; check if from mapper
                 ResetList mapper()
                 While NextItemFast(mapper()) AND pri<150
                   If lname = mapper()\oldname
                     correctname.s = mapper()\newname
                     pri = 150
                   End If
                 Wend

                  ResetList ab2func()
                  While NextItemFast(ab2func()) AND pri<100
                    ; check if 1:1 from include
                    If name.s = ab2func()\name
                      correctname.s = ""
                      pri = 100
                    End If

                    ; check if similar
                    If lname = ab2func()\lname AND pri<2

                      If name.s >< ab2func()\name
                        correctname.s = ab2func()\name
                        pri = 2
                      End If
                    End If

                    ; check if similar
                    If minname = ab2func()\minname AND pri<1
                      If name.s >< ab2func()\name
                        correctname.s = ab2func()\name
                        pri = 1
                      End If
                    End If
                  Wend

                If correctname.s
                ;  NPrint "INFO   : mapping \\22",name.s,"\\22 => \\22",correctname.s,"\\22"
                  a.s =Replace$(a.s,name.s,correctname.s)

mapped.l+1
                  fpos + FLen(correctname.s)-FLen(name.s)
                End If

                If pri=0
                  NPrint "WARNING: ",name.s," was not found in source/includes !"
                  notfound.l+1
                End If

              End If

            Until apos<=0
            file_WriteBB2Line{dosD,a.s}
          signals.l = SetSignal_(0,#SIGBREAKF_CTRL_C)
          If signals&#SIGBREAKF_CTRL_C
            *parent = 0
            breakmex=True
            NPrint "*** USER BREAK ***"
          End If
        Wend
        file_Close {dos}
        file_Close {dosD}
      Else
        If infos Then NPrint "Unable to cut file \\22"+filename.s+"\\22 !"
      End If
    End If
    If *parent Then *parent = ml_GetNextNode{*parent}
    count+1

  Wend
  ml_RemoveAllNodes{*freenode}

   NPrint mapped," function/macro names successfully corrected."
   NPrint notfound," function/macro names still wrong!"
   NPrint "Done"

End
 

 

