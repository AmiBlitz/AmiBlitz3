; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "///Tools"
; ExeFile         = "AB3AutodocViewer"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; Version         = 1.8.0
; NumberOfBuilds  = 72
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = "dir autodocs: file intuition_os4"
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 1
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 54
; CursorColumn    = 23
; LabelSearch     = "dis"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
; AB3 - AutoDocViewer
; 1.08 by tomsmart1
; + replaced reqtools commands with error.include Function calls
;
; 1.07:  by tomsmart1
; + fixed the size of the array
; + made the sourcecode Syntax 6 compatible
; + convert the source to ".ab3" format
; + replaced file and Path string magic with proper dos.include functions
; + fixed a possible endless loop with files that are not in autodoc format
; + added exe Versionstring
; + recompile with the latest AB3
;
; 1.06:
; + recompiled with latest AB3beta
;
; 1.05:
; + Tooltype for Standardpath added
;
; 1.04:
; + ???
;
; 1.03:
; + window position and size will be stored to tolltypes on exit
; + textviewgadget has greater priority when resizing window
; + Requester when no autodoc loaded removed
;
; 1.02:
; + fixed slow reaction time
;
; 1.01:
; + added appWindowsupport
; + fixed some little errors (as always!)
;
;
Syntax 6            ; changed to 6  tomsmart1
optimize 5          ; chanded to 5  tomsmart1



JMP skipvers:
Dc.b "$VER: "
.version
Dc.b "AB3AutoDocViewer \\__VER_MAJOR.\\__VER_MINOR (\\__DATE_GER__))",0
Even
skipvers:

version$           = "\\__VER_MAJOR.\\__VER_MINOR"
filepattern$       = "#?"
autodoc_extension$ = "doc"

#MAX_NODES = 256   ; fix size because we use entry 0-255  tomsmart1
;WBStartup
FindScreen 0


#CLIARGMODE = 1
XINCLUDE "file.include.ab3"
XINCLUDE "PE/wizard_Tools.include.ab3"   ; renamed to the new name  tomsmart1
WZLoadGUI ?wzgui

Dim autodoc_nodes$(#MAX_NODES)
DEFTYPE.w winx,winy,winw,winh

; --
; -- get the Tooltypes
default_path.s = dos_GetToolString{"PATH","Blitz3:Docs/"}

; --
; -- get the CLI args ...
If dos_GetNumArgs{} = 0
  wbmode.b = True
Else
  Repeat
    ioption.s = dos_GetNextArg{}
    option.s = LCase$(ioption.s)
    If Peek.b(&option.s) = @"-" Then option.s = Right$(option.s,FLen(option.s)-1)
    Select UCase$(option.s)
      Case "DIR"
        default_path = dos_GetNextArg{}            ; replaces directory$ with default_path  tomsmart1
        ; removed string magic  tomsmart1

      Case "FILE"
        autodoc$  = dos_GetNextArg{}
        library$  = dos_FilePart{autodoc$}
        library$  = dos_RemExt{library$}
        temppath$ = dos_PathPart{autodoc$}       ; added to set the correct path  tomsmart1
        If temppath$<>""
          directory$ = temppath$
        EndIf

      Case "FUNCTION"
        token.s = dos_GetNextArg{}

      Case "PUBSCREEN"
        pubscreen$ = dos_GetNextArg{}

      Case "WX"
        wx.w = Val(dos_GetNextArg{})

      Case "WY"
        wy.w = Val(dos_GetNextArg{})

      Case "WW"
        ww.w = Val(dos_GetNextArg{})

      Case "WH"
        wh.w = Val(dos_GetNextArg{})

    End Select
  Until option.s = ""

  If (directory$ = "") AND (autodoc$ = "")
    NPrint "No valid data for mandatory options FILE and/or DIR set."
    Gosub autodoc_writeinfos
    End
  Else
    If (dos_Exist{dos_AddPart{directory$,autodoc$} } = 0)  AND (dos_Exist{dos_AddPart{directory$,dos_SetExt{library$,autodoc_extension$} } } = 0)
      NPrint "File " + dos_AddPart{directory$,autodoc$} + " has not been found."
      End
    EndIf
  EndIf
EndIf


; --
; -- check of PubScreen with the given PubScreenname exists
If pubscreen$<>""
  GetPubScreen 0,pubscreen$
  If Peek.l(Addr Screen(0))=0
    WbToScreen 0
  Else
    Use Screen 0
  EndIf
EndIf

; --
; -- display the window with the selected node and goto the main loop
Gosub get_windowsettings
WZWindow WZID("WIN_AUTODOC"),?wzgui,128,winx,winy,winw,winh,WZID("WIN_AUTODOC")
AddAppWindow WZID("WIN_AUTODOC")

Gosub autodoc_open

exit.b = False
Repeat
  Delay_ 2
  ev.l = Event : appev.l = AppEvent
  Select ev
  Case #IDCMP_IDCMPUPDATE
    Select WZGadName
    Case "LISTVIEW_FUNCTIONS"
      selfunc$ = WZListString(entries.List,WZInput,1)
      For i.w = 1 To fcounter.w
        If dos_FilePart {autodoc_nodes$(i)} = selfunc$ Then  akt_entry.w = i : Pop For:Goto quit_for
      Next i
      akt_entry = 0
      quit_for:
      Gosub autodoc_showentry

    Case "AUTODOC_OPENFILE"
      aslfr_SetRequesterTitle{2,"Select autodoc-file","Ok","Cancel"}
      If directory$=""
        aslfr_SetPath{2,default_path,"",dos_SetExt{filepattern$,autodoc_extension$} }
      Else
        aslfr_SetPath{2,directory$,library$,dos_SetExt{filepattern$,autodoc_extension$} }
      EndIf
      If aslfr_Request{2,False,False,False}
        directory$ = aslfr_GetPath{2}
        library$   = aslfr_GetFile{2}
        a.s = dos_AddPart{directory$,library$}
          If a.s<>""
            token.s = "" : akt_entry = 0
            autodoc$ = a.s
            Gosub autodoc_open
            Gosub autodoc_showentry
          EndIf
      End If
    End Select

  Case #IDCMP_VANILLAKEY
    If EventCode = 27
      exit = True
    EndIf

  Case #IDCMP_MENUPICK
    Select WZMenuName
    Case "MENU_ABOUT"
      message$ = "AB3AutoDocViewer Version " +version$ + "\\n\\n"
      message$ + "written in 2008 by Sven Dröge\\n"
      message$ + "updated 2009-2013 by The Opensource Team\\n"
      message$ + "http://www.programmed-excellence.de"
      FindScreen 0
      message{message$,"About"} ; Request replaced with a error.include function call  tomsmart1
    Case "MENU_EXIT"
      exit = True
    End Select

  Case #IDCMP_CLOSEWINDOW
    exit = True
  End Select

  Select appev
  Case $800000
    If AppNumFiles > 0
      a.s = NextAppFile
      If a.s<>""
        directory$ ="" : token.s = "" : akt_entry = 0
        autodoc$ = a.s
        Gosub autodoc_open
        Gosub autodoc_showentry
      EndIf
    EndIf

  End Select
Until exit = True

Gosub put_windowsettings
Gosub autodoc_close
End


.autodoc_open
  ; -- clear windowgadgets
  For i = 0 To (#MAX_NODES-1)      ; fixed loop because we use 0-255 makes 256 entry  tomsmart1
    autodoc_nodes$(i) = "HONITOS"
  Next i
  WZListRemove entries.List
  WZPrint "LISTVIEW_FUNCTIONS",0,&entries
  WZListRemove info.List                           ; added to clear the right listview  tomsmart1
  WZPrint "LISTVIEW_INFO",0,&info                  ;   "
  displaystring$ = ""                              ; set default

  ; check for file
  file_Close{fid.l}
  If autodoc$ <> ""

    If dos_Exist{dos_AddPart{directory$,library$} } = 0
      If dos_Exist{dos_AddPart{directory$,dos_SetExt{library$,autodoc_extension$} } }= 0
        Return
      Else
        library$ = dos_SetExt{library$,autodoc_extension$}
      EndIf
    EndIf
    ; deactived it because we don't need a auto open Asl Requester if we open form WB becasue we can select the Gadget  tomsmart1
    ;If directory$ = ""
    ;  file_SetASLPath{default_path,"",dos_SetExt{filepattern$,autodoc_extension$}}
    ;Else
    ;  file_SetASLPath{directory$,"",dos_SetExt{filepattern$,autodoc_extension$}}
    ;EndIf
    fid.l = file_Open{dos_AddPart{directory$,library$},#file_read}
  Else
   fid=-1
  EndIf

  If fid<>-1
    file_Cache{fid}
    zeile$ = file_ReadLine{fid}
    If zeile$ = "TABLE OF CONTENTS"
      lf.l = file_GetLength{fid} : content_begin.w = 0 : fcounter.w = 1
      leerzeile$ = file_ReadLine{fid}
      While (file_GetSeekPos{fid} < lf) AND (content_begin = 0)
        zeile$ = file_ReadLine{fid}
        char.w = Asc( Left$(zeile$,1) )
        If (char = 12) OR (char = -1); OR (zeile$="")
          content_begin = file_GetSeekPos{fid} - Len(zeile$)
          file_Seek{fid,lf}
        Else
          If zeile$<>""
            WZListAdd entries,dos_FilePart{zeile$}
            If fcounter < (#MAX_NODES-1)       ; fix max because we use 0-255  tomsmart1
              autodoc_nodes$(fcounter) = StrChg(zeile$," ","")
            Else
              error{"Only autodocs with up to 256 functions are supported."}         ; fixed max notes tomsmart1 ; Request replaced with a error.include function call  tomsmart1
            EndIf
            fcounter + 1
          EndIf
        EndIf
      Wend

      exit.b = False
      If token<>""
        For i.w = 1 To (#MAX_NODES-1)      ; replaced hardcode 255 with (#MAX_NODES-1)  tomsmart1
          If LCase$(dos_FilePart {autodoc_nodes$(i)}) = LCase$(token.s) Then akt_entry.w = i : Pop For : Goto end_for
        Next i
      EndIf
      akt_entry.w = 1
      end_for:
      WZPrint "LISTVIEW_FUNCTIONS",akt_entry - 1,entries.List,akt_entry - 1
      Gosub autodoc_showentry
      displaystring$ = autodoc$ ;library$                                       ; added to show the file name  tomsmart1
    Else ; we have to build a TOC for ourselves
      error{"This autodocfile does not supply a table of contents\\nThe feature of build a TOC is not implemented yet.\\nPlease report the author if you need that feature."} ; Request replaced with a error.include function call  tomsmart1
      library$ = ""                                             ; added to not run in a endless loop  tomsmart1
      displaystring$ = "*** No autodoc loaded ***"              ; added to print the status  tomsmart1
    EndIf
  Else
    If wbmode = False
      Gosub autodoc_writeinfos
      NPrint "ERROR: unkown or missing autodoc-file."
      NPrint ""
      End
    Else
      library$ = ""                                            ; changed to not run in a endless loop  tomsmart1
      displaystring$ = "*** No autodoc loaded ***"             ; added to print the status  tomsmart1
    EndIf
  EndIf
  WZPrint "AUTODOC_LIBNAME",&displaystring$
Return


.autodoc_close
  file_Close{fid}
  WZCloseWindow WZID("WIN_AUTODOC")
  DelAppWindow WZID("WIN_AUTODOC")
  ReleasePubScreen 0
Return


.autodoc_showentry:
  If(fid = -1) OR (library$="") Then Return      ;added the test of the library$ to prevent a possible endless loop if the file is not a Autodoc  tomsmart1
  WZListRemove info.List
  ;
  ; seek until die function name comes up ...
  ;
  file_Seek{fid,content_begin}
  Repeat
    zeile$ = file_ReadLine{fid}
  Until Instr(zeile$,autodoc_nodes$(akt_entry)) > 0 OR (file_GetSeekPos{fid} >= lf)
  If file_GetSeekPos{fid} >= lf
    WZPrint "LISTVIEW_INFO",-1,info.List
    Return
  EndIf
  ;
  ; print all the infos until the next function is described...
  ;
  CaseSense On
  Repeat
    key_found.b = False
    Restore key_words
    Repeat
      Read keyword$
      If Instr(zeile$,keyword$) > 0
        key_found = True
      EndIf
    Until keyword$ = "###"
    If key_found = True
      WZTags #WENTRYA_FormatStyle,2
      WZTags #WENTRYA_TextStyle,6
      WZTags #WENTRYA_TextPen,3
      zeile$ = StripLead$(zeile$,32)
    Else
      WZTags #WENTRYA_TextPen,1
    EndIf
    zeile$ = StrChg(zeile$,Chr$(9),"  ")
    zeile$ = StrChg(zeile$,Chr$(12),"")   ; this indicates a new function
    WZListAdd info.List,zeile$,-2

    zeile$ = file_ReadLine{fid}
  Until Instr(zeile$,autodoc_nodes$(akt_entry+1)) OR (file_GetSeekPos{fid} >= lf)
  CaseSense Off
  WZPrint "LISTVIEW_INFO",-1,info.List
Return


.get_windowsettings
  winx.w = dos_GetToolValue {"winx",-2}
  winy.w = dos_GetToolValue {"winy",-2}
  winw.w = dos_GetToolValue {"winw",-2}
  winh.w = dos_GetToolValue {"winh",-2}
Return


.put_windowsettings
  dos_SetToolValue {"winx",WindowX}
  dos_SetToolValue {"winy",WindowY}
  dos_SetToolValue {"winw",WindowWidth}
  dos_SetToolValue {"winh",WindowHeight}
Return


.autodoc_writeinfos
    NPrint ""
    NPrint "AB3AutoDocViewer V" + version$
    NPrint "written in 2008 by Sven Dröge for AmiBlitz3-IDE"
    NPrint "updated 2009-2013 by The Opensource Team"
    NPrint "Parameters: "
    NPrint "FILE <autodoc>"
    NPrint "FUNCTION <functionname>"
    NPrint "PUBSCREEN <screenname>"
    NPrint "DIR <path>"
    NPrint "WX <windowtopleft>"
    NPrint "WY <windowtopoff>"
    NPrint "WW <windowwidth>"
    NPrint "WH <windowheight>"
    NPrint ""
Return


key_words:
  Data$ "NAME"
  Data$ "SYNOPSIS"
  Data$ "FUNCTION"
  Data$ "INPUT"
  Data$ "RESULT"
  Data$ "SEE ALSO"
  Data$ "BUGS"
  Data$ "###"


wzgui:
IncBin "AB3AutoDocViewer.wizard"
wzguiend:

