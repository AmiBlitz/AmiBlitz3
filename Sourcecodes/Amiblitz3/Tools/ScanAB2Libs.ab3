; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "C:"
; ExeFile         = "scanAB2libs"
; CreateIcon      = 0
; Residents       = "blitzlibs:all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 15
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 222
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 61
; LabelAll        = 5
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 16
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 50
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 50
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 50
; /XTRA
CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
CEND

XINCLUDE "file.include.ab3"
Macro UBYTEX
`1
End Macro

Function.s ab2_read_syslib {dos.l,libnum.l}
succ.l = True
done.l = False
tokenid.l = 0
Repeat
  help.s = ""
  token.s = ""
  dummyb.b = file_ReadByte {dos}
  If dummyb=-1;!UBYTEX{$ff}            ;now look for 6 or 7 0's
    dummyb = file_ReadByte {dos}
    If dummyb=-1;!UBYTEX{$ff}            ;in system libs, $FFFF means end of command list
      dummyb = file_ReadByte {dos}
      If dummyb=0
        done=1
      EndIf
    Else
      If dummyb=0            ;OK, now check for at least 6 $00's
        gonext.b=0
        For i.l = 1 To 5
          dummyb = file_ReadByte {dos}
          If dummyb<>0 Then gonext.b=1
        Next
        If gonext=0
          gotall.b=0
          tokenid+1
          dummyb = file_ReadByte {dos}
          If dummyb = 0  ;sometimes there is one more $00
            succ&file_ReadMem{dos,&dummyb,1}
          EndIf
          token.s+Chr$(dummyb)         ;now we read the command string
          Repeat
            succ&file_ReadMem{dos,&dummyb,1}
            If dummyb>35 AND dummyb<126 ;alphabetic character?
              token.s+Chr$(dummyb)
            Else
              gotall=1
            EndIf
          Until gotall

          Repeat        ;chuck the "help" stuff
            dummyb = file_ReadByte {dos}
            help.s + Chr$(dummyb)
          Until dummyb=0 OR dummyb=-1;!UBYTEX{$ff}
          succ&file_SeekRel {dos,-1}

          If token.s><""
            done=True
          End If

        EndIf
      EndIf
    EndIf
  Else
    If dummyb=0 Then If file_EOF{dos} Then done=1 : error {"Read over EOF ! seekpos="+Str$(file_GetSeekPos{dos})+" / length="+Str$(file_GetLength{dos})}
  EndIf
Until done
Function Return token.s
End Function


#ab2_okx = $000003F3
#ab2_ok1 = $000003E9
#ab2_ok2 = $004E7500


Function.s ab2_read_ab2lib {dos.l,libnum.l}
succ.l     = True
done.l     = 0
firstcmd.b = 0
tokenid.l   = 0
Repeat
  token.s = ""
  help.s = ""
  dummyb.b = file_ReadByte {dos}
  If dummyb=-1;!UBYTEX{$ff} ; 255
    dummyb = file_ReadByte {dos}
    If dummyb=-1;!UBYTEX{$ff}                 ;aha, two $FF's !
      For i.l = 1 To 6         ;now the 6 $00's ?
        dummyb = file_ReadByte {dos}
        If dummyb<>0 Then done=1;:error {"END of Lib 0!"}  ;nope, must be the end of the command list!
      Next

      If done = 0
        gotall.b=0
        dummyb = file_ReadByte {dos}
        If dummyb = 0 OR dummyb=@"3"   ;another $00?
          done=1
        Else
          If firstcmd=0 Then firstcmd=1
          If dummyb>35 Then token.s+Chr$(dummyb)
        EndIf

        If done=0       ;here we read the actual command string
          tokenid+1
          Repeat
            ;succ&file_Read{dos,&dummyb,1}
            dummyb = file_ReadByte {dos}
            If succ
              If dummyb>35 AND dummyb<126
                token.s+Chr$(dummyb)
              Else
                gotall=1
              EndIf
            Else
              gotall=1
            End If
          Until gotall

          Repeat        ;chuck the "help" stuff
            dummyb = file_ReadByte {dos}
            If succ Then help.s + Chr$(dummyb):Else dummyb=$ff
          Until dummyb=0 OR dummyb=-1;!UBYTEX{$ff}
          If dummyb=-1;!UBYTEX{$ff}
            succ&file_SeekRel {dos,-1}
            done.l = 1
          EndIf
        EndIf
      EndIf
    EndIf
  Else
    If (dummyb>64 AND dummyb<91)  ;first letter will be uppercase
      c.b=dummyb
      Repeat
        token.s+Chr$(c)
        ;succ&file_Read{dos,&c,1}
        c = file_ReadByte {dos}
      Until c<32 OR c>122

      If c=0
        Repeat        ;chuck the "help" stuff
          ;succ&file_Read{dos,&dummyb,1}
          dummyb = file_ReadByte {dos}
          help.s + Chr$(dummyb)
        Until (dummyb<32 OR dummyb>122) OR succ=False
        If dummyb=-1;!UBYTEX{$ff}
          succ&file_SeekRel {dos,-1}
         ; done = 1
          ;error {"End of lib 3!"}
        EndIf
      EndIf

      If c<>0 OR Len(token.s)<3
        token.s=""
        If c=-1;!UBYTEX{$ff}
          succ&file_SeekRel {dos,-1}
          ;done=1
          ;error {"End of lib 4!"}
        EndIf
      EndIf
    EndIf
    If token.s<>""  ;hidden token found!
      If firstcmd=0 Then firstcmd=1
      tokenid+1
    EndIf
  EndIf

  If token.s><""
    done=1
  End If
Until (done=1) OR (succ=False) OR file_EOF{dos}
Function Return token.s
End Function

Statement ab2_getlib {filename.s}
fil.s = LCase$(dos_FilePart {filename.s})
ex.s  = LCase$(dos_GetExt {filename.s})
If fil.s><"dhandlerlib.obj" AND (ex.s="obj" OR ex.s="library1" OR ex.s="library2")
 dos.l = file_Open {filename.s,#file_read}
 If dos>=0
  file_Cache {dos}
  succ.l=file_ReadMem{dos,&dummy1.l,4}
  If dummy1><#ab2_okx Then succ.l=file_ReadMem{dos,&dummy1.l,4}
  ;error {"Lib opended: "+filename.s}
  If dummy1=#ab2_okx
    succ=file_SeekRel {dos,20}
    succ=file_ReadMem{dos,&dummy1.l,4}
    If dummy1=#ab2_ok1
      succ=file_SeekRel {dos,4}
      ;succ.l=file_Read{dos,&dummyb.b,1}
      dummyb.b = file_ReadByte {dos}
      If dummyb=@"p"    ; ab2lib
       ; error {"Found a ab2 lib !"}
        ;succ=file_seek {dos,28}
        succ=file_SeekRel {dos,-1}
        While file_EOF{dos}=False AND succ=True
          ;succ.l = file_Read{dos,&dummyb,1}
          dummyb = file_ReadByte {dos}
          If dummyb=!UBYTEX{$70} AND succ=True
            succ&file_ReadMem{dos,&dummy1.l,4}
            If dummy1=#ab2_ok2
              dummyb = file_ReadByte {dos}

              If dummyb><0
                libnum.l = dummyb & $FF
                If libnum>0
                  libname.s= dos_FilePart{filename.s}
                  token.s = ab2_read_ab2lib{dos,libnum}
                End If
              End If
            End If
          End If
        Wend
      Else              ; Sys Lib
        succ&file_Seek {dos,37}
        dummyb = file_ReadByte {dos}
        libnum.l = dummyb & $FF
        libname.s = dos_FilePart{filename.s}
        token.s= ab2_read_syslib {dos,libnum}
      End If
      If libnum>0
      Format "000"
        NPrint "",Str$(libnum)," ; ",libname.s," ; First Token: ",token.s

      End If
    Else
      error {"Not a blitz lib 2!"+Hex$(dummy1)}
    End If
  Else
    error {"Not a blitz lib !"}
  End If
  file_Close{dos}
 End If
End If
End Statement



Statement libs_getem {path.s}
lock.l = Lock_(&path.s,#ACCESS_READ)
DEFTYPE.FileInfoBlock fib
If lock
  If Examine_ (lock,&fib)
    While ExNext_(lock,&fib)
      filename.s = dos_AddPart{path.s,Peek.s(&fib\fib_FileName)}
      If fib\fib_DirEntryType<0
        ;error {"STAT: "+Hex$(ted)}
        ;NPrint "Analyzing ",filename.s," ..."
        ab2_getlib {filename.s}
      Else
        ;NPrint "Going to subdir ",filename.s," ..."
        libs_getem {filename.s}
      End If
    Wend
  End If
  UnLock_ lock
End If
End Statement




CNIF #__include=0
;ab2_getlib {"blitz2:userlibs/acidlibs/fpulib.obj"}
n.l = NumPars
error_SetFlags{#error_stdout}
If n>0
path.s = Par$(1)
If path.s><""
 libs_getem{path.s}
End If
End If
End
CEND

