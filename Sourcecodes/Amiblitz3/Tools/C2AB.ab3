; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "C:"
; ExeFile         = "C2AB"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 48
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 168
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 2
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 15
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 15
; Max BlitzFont   = 4
; Max GTList      = 15
; /XTRA
OPTIMIZE 7
SYNTAX 2

XINCLUDE "dos.include.ab3"
XINCLUDE "file.include.ab3"

#comment = 1
#struct  = 2
#main    = 0

Dim mode(1024)

Macro inc
If mindex<1023
  mindex+1
  mode(mindex) = `1
End If
End Macro

Macro dec
If mindex>0 Then mindex-1
End Macro

Macro mode
mode(mindex)
End Macro

Function.s lrest{string.s,lindex.l}
pos.l = 0
maxl.l = FLen(string.s)
apos.l = 0
epos.l = -1

Repeat
  While Peek.b(&string.s+pos)&$00FF<33 AND pos<maxl
    pos+1
  Wend
  apos.l = pos
  While Peek.b(&string.s+pos)&$00FF>32 AND (Peek.b(&string.s+pos)&$00FF)><@";"  AND (Peek.b(&string.s+pos)&$00FF)><@"[" AND pos<maxl
    pos+1
  Wend
  epos.l = pos
  lindex-1
Until lindex<=0
If apos<=epos
  arg.s = Right$(string.s,maxl-apos)
End If
Function Return arg.s
End Function


Function.s lindex{string.s,lindex.l}
pos.l = 0
maxl.l = FLen(string.s)
apos.l = 0
epos.l = -1
Repeat
  While (Peek.b(&string.s+pos)&$00FF)<33 AND pos<maxl
    pos+1
  Wend
  apos.l = pos
  While (Peek.b(&string.s+pos)&$00FF)>32 AND (Peek.b(&string.s+pos)&$00FF)><@";"  AND (Peek.b(&string.s+pos)&$00FF)><@"["AND pos<maxl
    pos+1
  Wend
  epos.l = pos
  lindex-1
Until lindex<=0
If apos<=epos
  If apos=epos Then epos+1
  arg.s = Mid$(string.s,apos+1,epos-apos)
End If
Function Return arg.s
End Function

Function.l Convert{srcfile.s,dstfile.s}
SHARED mode()
succ.l = True
Print srcfile,"=>",dstfile,"..."
fidR.l = file_Open{srcfile,#file_read}
fidW.l = file_Open{dstfile,#file_forcewrite,"include.ab2"}
If fidW>=0 AND fidR>=0
  mindex.l = 0
  mode(mindex) = #main
  While file_EOF{fidR} = False
    text.s = file_ReadLine{fidR}
    text.s = Replace$(text.s,"0x","$")

    Select !mode
      Case #main
        token.s = lindex{text,1}
        Select token
          Case "#define"
            constant.s = lindex{text,2}
            rest.s = lrest{text,3}
            If rest.s = "" Then rest.s = "1"
            text.s = "#"+constant.s+" = "+rest
          Case "#ifndef"
            constant.s = lindex{text,2}
            text.s = "CNIF @#"+constant+"=0 "+lrest{text,3}
          Case "#else"
            text.s = "CELSE "+lrest{text,2}
          Case "#endif"
            text.s = "CEND "+lrest{text,2}
          Case "struct"
            !inc{#struct}
            name.s = lindex{text,2}
            text.s = "NEWTYPE ."+name
          Case "#include"
            inc.s = lindex{text,2}
            inc = Replace$(inc,"<",Chr$(34))
            inc = Replace$(inc,">",Chr$(34))
            inc = Replace$(inc,".h",".include.ab3")
            text.s = "XINCLUDE "+inc+" "+lrest{text,3}
        End Select

      Case #comment
        text.s = ";"+text.s
        If Instr(text.s,"*/") Then !dec

      Case #struct
        pos.l = Instr(text.s,"}")
        If pos>0 Then pos2.l = Instr(text.s,";",pos) : Else pos2=0
        If pos2>pos
          !dec
          text.s = Replace$(text.s,"}","End NEWTYPE")
        Else
          token.s = lindex{text,1}
          ind.l = 2
          isptr.l = False
          If token="unsigned" Then token.s = lindex{text,ind} :  ind+1
          If token="struct"   Then token.s = lindex{text,ind} :  ind+1
          If token="union"    Then token.s = lindex{text,ind} :  ind+1
          Select LCase$(token)
            Case "char"   : ex.s = "b"
            Case "uchar"  : ex.s = "b"
            Case "byte"   : ex.s = "b"
            Case "ubyte"  : ex.s = "b"
            Case "word"   : ex.s = "w"
            Case "uword"  : ex.s = "w"
            Case "short"  : ex.s = "w"
            Case "long"   : ex.s = "l"
            Case "ulong"  : ex.s = "l"
            Case "int"    : ex.s = "l"
            Case "aptr"   : ex.s = "l"
            Case "strptr" : ex.s = "l"
            Default
              ex.s = token
          End Select
          NPrint "ex.s = ",ex.s
          varname.s = lindex{text,ind}
          If varname.s = "*" Then ind+1 : varname.s ="*"+lindex{text,ind}
          If varname><""
            text.s = varname.s + "."+ex+" " + lrest{text,ind+1}
          Else
            text.s = ""
          End If
        End If

    End Select

    ; detect comment
    If Instr(text.s,"/*")
      !inc{#comment} : text.s = Replace$(text.s,"/*",";/*")
      If Instr(text.s,"*/") Then !dec
    End If

    text.s = Replace$(text.s,"<<"," LSL ")
    text.s = Replace$(text.s,">>"," LSR ")
    If Right$(text.s,1) = ";" Then text.s = UnLeft$(text.s,1)

    file_WriteLine{fidW,text}
  Wend
End If
If fidW>=0 Then file_Close{fidW}
If fidR>=0 Then file_Close{fidR}
NPrint "ok."
Function Return succ
End Function

Function.l ScanDir {relpath.s}
SHARED dos_pattern.s,dst.s,src.s
srcpath.s = dos_AddPart{src,relpath}
dstpath.s = dos_AddPart{dst,relpath}
lock.l = Lock_(&srcpath.s,#ACCESS_READ)
succ.l = True
DEFTYPE.FileInfoBlock fib
If lock
  If Examine_ (lock,&fib)
    While ExNext_(lock,&fib)
      If fib\fib_DirEntryType<0 ; it is a file
        If MatchPatternNoCase_ (&dos_pattern.s,&fib\fib_FileName)
          srcfile.s = dos_AddPart{srcpath.s,Peek.s(&fib\fib_FileName)}
          dstfile.s = dos_AddPart{dstpath.s,Peek.s(&fib\fib_FileName)}
          If Convert {srcfile.s,dstfile.s}

          Else
            NPrint srcfile.s,"...NOT converted"
          End If
        End If
      Else
        nextpath.s = dos_AddPart{relpath.s,Peek.s(&fib\fib_FileName)}
        createpath.s = dos_AddPart{dstpath.s,Peek.s(&fib\fib_FileName)}
        If dos_Exist{createpath} = False
          dos_CreateDir{createpath}
        End If
        ScanDir {nextpath.s}
      End If
    Wend
  End If
  UnLock_ lock
End If
Function Return succ
End Function

If NumPars<2
  NPrint "Usage:\\nC2AB <sourcedir> <destdir>"
  NPrint "Make a copy of sourcedir, but convert .h into .bb2"
  End
End If

patt.s = "#?.h"
src.s = Par$(1)
dst.s = Par$(2)

tempbuf.s = LSet$(" ",FLen(patt.s)*3+4)
ParsePatternNoCase_ &patt.s,&tempbuf.s,FLen(tempbuf.s)
dos_pattern.s = Peek.s(&tempbuf.s)

NPrint "Scanning "+src+" for "+patt.s+" files..."
ScanDir {""}
NPrint "Done."
End

