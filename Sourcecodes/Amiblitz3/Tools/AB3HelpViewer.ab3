; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "///Tools"
; ExeFile         = "AB3HelpViewer"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 502400
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 24
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = "-l tui.include -d sys:programme/Amiblitz3/Docs"
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 65535
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 258
; CursorColumn    = 1
; LabelSearch     = "dos_getnextarg"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Screen      = 5
; Max Shape       = 100
; Max Window      = 20
; Max Bank        = 5
; Max IntuiFont   = 5
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;;;;;;;;;;;;;;;;;;;;;;
; V1.7
;  - made it Syntax 6 compatible  tomsmart1
;  - chand include name to .ab3

optimize 5  ;was 7 changed to 5 because no FPU  tomsmart1
Syntax 6    ;was 2 changed to 6  tomsmart

JMP skipvers:
Dc.b "$VER: "
.version
Dc.b "AB3HelpViewer 1.7 (\\__DATE_GER__)",0
Even
skipvers:
ver.s  = Peek.s(?version)

#max_searchpath = 20
#max_viewers    = 5

Dim path.s(#max_searchpath)
Dim viewer_pattern.s(#max_viewers)
Dim viewer_command.s(#max_viewers)

#CLIARGMODE  = 1
#use_bbscreen=0 ; we dont want to use any function from screenlib.obj

XINCLUDE "PE/logging.include.ab3"
XINCLUDE "dos.include.ab3"
XINCLUDE "amigaguide.include.ab3"

dos_SetDebugExe{"Blitz3:Tools/AB3HelpViewer"}

log_SetDestination{#log_toconsole}
log_SetLevel{#log_nothing}


Statement docu_find {path.s}
 SHARED dos_pattern.s,found_file.s
 DEFTYPE.FileInfoBlock fib

  lock.l = Lock_(&path.s,#ACCESS_READ)
  If lock
    If Examine_ (lock,&fib)
      While ExNext_(lock,&fib)><0 AND found_file.s=""
        filename.s = dos_AddPart{path.s,Peek.s(&fib\fib_FileName)}
        If fib\fib_DirEntryType<0
          If MatchPatternNoCase_ (&dos_pattern.s,&fib\fib_FileName)
            ;error{"found "  + filename}
            found_file.s = filename.s
          End If
        Else
          docu_find {filename.s}
        End If
      Wend
    End If
    UnLock_ lock
  End If
End Statement


numpath.l       = 0
showhelp.l      = False
clioutput.l     = True
guioutput.l     = True
foundfile.s     = ""
pubscreen.s     = "AmiBlitz3_1"
winX.l          =  20
winY.l          =  20
winW.l          = 600
winH.l          = 440
token.s         = "main"
stem.s          = "nolib"
forcefile.s     = ""

; get the CLI args ...
Repeat
  ioption.s = dos_GetNextArg{}
  option.s = LCase$(ioption.s)
  If Peek.b(&option.s) = @"-" Then option.s = Right$(option.s,FLen(option.s)-1);: Else Goto skip
  Select option.s
    Case "l"  ; library stem name, e.g. graphics, image, shapeslib
      stem.s = dos_GetNextArg{}
      If fullname.s="" Then fullname.s=stem.s
    Case "t"  ; token name, e.g. WritePixelArray, image_blit, LoadShape
      token.s = dos_GetNextArg{}
    Case "d"  ; directories, e.g. Blitz2:Doc
       path.s(numpath) = dos_GetNextArg{}
       If numpath<#max_searchpath Then numpath+1
    Case "?"  ; help
      showhelp.l = True
    Case "n"  ; full name, e.g. graphics.library, image.inlcude.bb2, shapeslib.obj
      fullname.s = dos_GetNextArg{}
    Case "s"
      pubscreen.s = dos_GetNextArg{}
    Case "x"
      winX.l = Vallong(dos_GetNextArg{})
    Case "y"
      winY.l = Vallong(dos_GetNextArg{})
    Case "h"
      winH.l = Vallong(dos_GetNextArg{})
    Case "w"
      winW.l = Vallong(dos_GetNextArg{})
    Case "q"  ; quiet
      clioutput.l = False
      guioutput.l = False
    Case "g"  ; no gui ouput
      guioutput.l = False
    Case "f"
      forcefile.s = dos_GetNextArg{}
      stem.s = dos_RemExt{forcefile}
   Default
     If option.s><""
       NPrint "ERROR: unknown option: \\22",ioption.s,"\\22"
       showhelp = True
       err.l = True
       option.s = ""
     End If
  End Select
  skip:
Until option.s = ""

error_SetFlags{0}
If clioutput Then error_SetFlags{#error_stdout}
If guioutput Then error_SetFlags{#error_requester}
FindScreen 0

; show the help if something went wrong or help was requested
If (numpath=0 OR stem.s="" AND forcefile ="") OR showhelp=True
  If numpath=0  Then error{"No directory specified !"}
  If stem.s ="" Then error{"No library specified !"}
  If err Then error {"Invalid option \\22"+ioption.s+"\\22 specified !"}
    NPrint"\\nSyntax: AB2HelpViewer -l <libname>  -d <searchdir> [-t <tokenname>] [-... more params see below]"
    NPrint "l <libstem> : name of the library/blitzlib/include, e.g. shapeslib or image.include"
    NPrint "t <token>   : name of the token, e.g. LoadShape or image_Blit"
    NPrint "d <dir>     : directory to search in, e.g. \\22Sys:Docs\\22 (note: you can specify this multiple times to search in multiple directories)"
    NPrint "?           : show this help"
    NPrint "q           : quiet, do not produce any requesters or CLI output"
    NPrint "g           : disable error/message requesters"
    NPrint "s <pubname> : name of public screen to open the docu on"
    NPrint "x <n>       : display window x position"
    NPrint "y <n>       : display window y position"
    NPrint "w <n>       : display window width"
    NPrint "h <n>       : display window height"
    NPrint "n <libfile> : full name of library, e.g. shapeslib.obj"
    NPrint "f <docfile> : force this docu file to be shown, this will not cause any search"
    NPrint " "
  End
End If
Stop


; load the viewer information from the tooltypes
For n.l=0 To (#max_viewers-1)
  pattern.s = dos_GetToolString{"pattern"+Str$(n+1),"#?.txt"}
  viewer_command.s(n) = dos_GetToolString{"command"+Str$(n+1),"EditPad %f"}
  tempbuf.s = LSet$(" ",FLen(pattern.s)*3+4)
  ParsePatternNoCase_ &pattern.s,&tempbuf.s,FLen(tempbuf.s)
  log_Print{pattern  + "  ["+ Trim$(Peek.s(&tempbuf.s)) +  "] [" + viewer_command(n) + "]"}
  viewer_pattern.s(n) = Peek.s(&tempbuf.s)
Next

pattern.s = stem.s + dos_GetToolString{"extentions",".(doc|html|guide)"}
If clioutput Then NPrint "Searching for ",pattern.s
tempbuf.s = LSet$(" ",FLen(pattern.s)*3+4)
ParsePatternNoCase_ &pattern.s,&tempbuf.s,FLen(tempbuf.s)
dos_pattern.s = Peek.s(&tempbuf.s)


; find the docu file ...
If forcefile = ""
  For n.l = 0 To numpath - 1
    ;If clioutput Then NPrint "searching in [" + path(n) + "] for ["+ dos_pattern + "]"

    If found_file.s = "" Then docu_find{path.s(n)}
  Next
Else
  found_file = forcefile
End If


; no file found ?
If found_file = ""
  a.s = "Searched recursively in following paths:\\n"
  For n.l=0 To numpath-1
    a.s + path.s(n)+"\\n"
  Next
  error{"No documentation available for \\22"+token+"\\22 ("+stem.s+")!\\n"+a.s}

; file found, so launch the viewer
Else
  If clioutput Then NPrint "Found ",found_file.s," ..."
  If token.s = "#?" Then token.s = ""
  If Right$(token.s,1)="_" Then token.s = UnRight$(token.s,1)

  n.l=0
  While n < #max_viewers
    If MatchPatternNoCase_ (&viewer_pattern.s(n),&found_file.s)

      commandline.s = viewer_command.s(n)
      done.l = False

      ; check for internal AmigaGuide viewer ...
      If UCase$(Left$(commandline.s,10)) = "AMIGAGUIDE"

        ; check if the pubscreen exists, or open on frontmost screen
        found.l = False

        *psl.List = LockPubScreenList_()
        If *psl
          *psn.PubScreenNode = (.PubScreenNode)*psl\lh_Head      ;cast  tomsmart1

          While *psn\psn_Node\ln_Succ
            If *psn\psn_Node\ln_Name
              If pubscreen.s = Peek.s(*psn\psn_Node\ln_Name) Then found=-1
            End If
            *psn = (.PubScreenNode)*psn\psn_Node\ln_Succ        ;cast  tomsmart1
          Wend
          UnlockPubScreenList_
        End If

        If found = False Then pubscreen.s = ""

        If amigaguide_Show{found_file.s,token.s,pubscreen.s} = False
          ;error {"Node \\22"+token.s+"\\22 not found in document "+found_file.s+"!"}
          If amigaguide_Show{found_file.s,"",pubscreen.s} = False
            error {"Unable to display "+found_file.s+"!"}
          End If
        End If
        done.l = True
      End If

      ; no internal viewer, launch external ...
      If done=False
        ;If clioutput Then NPrint "building call..."

        commandline.s = Replace$(commandline.s,"%f",found_file.s)
        commandline.s = Replace$(commandline.s,"%F",dos_FilePart{found_file.s})
        commandline.s = Replace$(commandline.s,"%p",dos_PathPart{found_file.s})
        commandline.s = Replace$(commandline.s,"%s",pubscreen.s)
        commandline.s = Replace$(commandline.s,"%x",Str$(winX))
        commandline.s = Replace$(commandline.s,"%y",Str$(winY))
        commandline.s = Replace$(commandline.s,"%w",Str$(winW))
        commandline.s = Replace$(commandline.s,"%h",Str$(winH))
        commandline.s = Replace$(commandline.s,"%t",token.s)
        commandline.s = Replace$(commandline.s,"%l",stem.s)
        commandline.s = Replace$(commandline.s,"%n",fullname.s)
        InitArgParse commandline
        command.s = NextArg$
        commandline = UnRight$(commandline,Len(command))
        ;If clioutput Then NPrint "calling [" + command + "] with paramter [" + commandline +"]"
        dos_RunCli{command,0,8192,True,commandline}
        done=True
      End If
      n = #max_viewers
    End If
    n+1
  Wend

  If done=False Then error {"There is no viewer configured to display "+found_file.s+"!"}
End If

;If log_GetLevel{} = #log_debug Then error{"ende"}
End


