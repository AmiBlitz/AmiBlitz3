; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "all"
; CreateIcon      = 1
; Residents       = "bars.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 4096
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = "#__distance_from_top_of_stack"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 1
; Max Sound       = 1
; Max Bank        = 5
; Max Buffer      = 10
; Max Slice       = 10
; Max Page        = 1
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max BitMap      = 10
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
;#WBStart_Name            =     #TAG_USER+1      ; APTR
;
;;* Name of a directory. Mutually exclusive To WBStart_DirectoryLock
;#WBStart_DirectoryName   =     #TAG_USER+2      ; APTR
;
;;* Lock of a directory. Mutually exclusive To WBStart_DirectoryName
;#WBStart_DirectoryLock   =     #TAG_USER+3      ; BPTR
;
;;* Stack size For the New process
;#WBStart_Stack           =     #TAG_USER+4      ; ULONG
;
;;* Priority For the New process
;#WBStart_Priority        =     #TAG_USER+5      ; LONG
;
;;* Number of arguments in WBStart_ArgumentList
;#WBStart_ArgumentCount   =     #TAG_USER+6      ; ULONG
;
;;* Array of arguments. WBStart_ArgumentCount MUST be specified also!
;#WBStart_ArgumentList    =     #TAG_USER+7      ; Pointer to struct WBArg
;
Macro UBYTE
(`1-$100)
End Macro

Macro fpuround_nearest
!setpfcr {$0}
End Macro

Macro fpuround_zero
!setpfcr {$10}
End Macro

Macro fpuround_smallest
!setpfcr {$20}
End Macro

Macro fpuround_highest
!setpfcr {$30}
End Macro


NEWTYPE .DiskObject
do_Magic.w
do_Version.w
do_Gadget.Gadget
do_Type.b
*do_DefaultTool.l
*do_ToolTypes.l
do_CurrentX.l
do_CurrentY.l
*do_DrawerData.DrawerData
*do_ToolWindow.l
*do_StackSize.l
End NEWTYPE




#RPTAG_FgColor  = $80000081     ;tags work in AFA and MOS
#RPTAG_BgColor  = $80000082     ;tags work in AFA and MOS



Macro autoexit
.autofree_`1  ;Note all labels must be unique.use another name than

MOVE.l #myfreecode_`1,d0 ;
SysJsr $c801       ;this install the exithandler
MOVE.l d0,oldfree_`1  ;This read the oldfree code to link all handlers

BRA l1_`1
myfreecode_`1         ;this is the autoexit routine
CNIF #__debug
Dc.w $7000
SysJsr $d50a              ;set this task to no debug.
CEND
                          ;if you want singlestep autoexit you can remove it
;*****************User Code Start
`1{} ; this is called on program exit automatic
;*****************User Code End******************************
MOVE.l oldfree_`1,a0  ;jump to next exithandler
JMP (a0)
End
oldfree_`1: Dc.l 0
l1_`1
End Macro

Macro arrayptr ;memaddr(dont use *),arryvar
Dim `2
;hack start             ;must be immediate after dim
LEA 0(a5,d2.w),a0       ;set the dim to the adress of *buf
MOVE.l a0,`1mem
MOVE.l (a0),old`1mem
GetD0 `1
MOVE.l d0,(a0)
MOVE.l #myfreecode_`1,d0 ;
SysJsr $c801       ;this install the exithandler
MOVE.l d0,oldfree_`1   ;This read the oldfree code to link all handlers together
BRA l1_`1
`1mem: Dc.l 0
old`1mem: Dc.l 0
myfreecode_`1          ;this is the autoexit routine
;*****************User Code Start
MOVE.l `1mem,a0
MOVE.l old`1mem,(a0)
;*****************User Code End******************************
MOVE.l oldfree_`1,a0  ;jump to next exithandler
JMP (a0)
oldfree_`1: Dc.l 0
l1_`1
;hackEnd
End Macro

Macro loc_arrayptr ;memaddr(dont use *),arryvar
Dim `2
;hack start             ;must be immediate after dim
LEA 0(a4,d2.w),a0       ;set the dim to the adress of *buf
MOVE.l a0,`1mem
MOVE.l (a0),old`1mem
GetD0 `1
MOVE.l d0,(a0)
MOVE.l #myfreecode_`1,d0 ;
SysJsr $c801       ;this install the exithandler
MOVE.l d0,oldfree_`1   ;This read the oldfree code to link all handlers together
BRA l1_`1
`1mem: Dc.l 0
old`1mem: Dc.l 0
myfreecode_`1          ;this is the autoexit routine
;*****************User Code Start
MOVE.l `1mem,a0
MOVE.l old`1mem,(a0)
;*****************User Code End******************************
MOVE.l oldfree_`1,a0  ;jump to next exithandler
JMP (a0)
oldfree_`1: Dc.l 0
l1_`1
;hackEnd
End Macro

Macro getfpcr                       ; get FPU-Controlregister via D0
  If ProcessorFPU > 0
    Dc.l $f200b000                    ; fmove fpcr, d0
    `1 = PutD0
  Else
    `1 = 0
  End If
End Macro

Macro setfpcr                       ; set FPU-Controlregister via D0
  If ProcessorFPU > 0
    GetD0 `1
    Dc.l $f2009000                    ; fmove d0, fpcr
  End If
End Macro

Macro checklib ;{mode,libname,libversion} ;check for lib  mode=1 quit program mode=0 only warn
  *lib_M.Library = OpenLibrary_(`2,`3)
  If *lib_M
    CloseLibrary_ *lib_M
  Else
  ret_M.l = Request(" Library ","Library "+`2+" Version "+Str$(`3)+" is missing.","OK")
  If `1 Then End
  EndIf
End Macro


Macro togglevar ;{variable} ;toggle every call the var betweeen true and false
  If `1=0 Then `1=True : Else `1=0
End Macro

.version
Macro version ;{version} ;add a standard amiga Version String
  BRA __version
  Even4
  Dc.b 0,"$VER: "
  Dc.b `1,0
  Even
  __version
End Macro

Macro windowaddr
;CNIF `0=0
     Peek.l(Addr Window(Used Window))
;CELSE
;     Peek.l(Addr Window(`1))
;CEND
End Macro

Macro screenaddr
;CNIF `0=0
     Peek.l(Addr Screen(Used Screen))
;CELSE
;     Peek.l(Addr Window(`1))
;CEND
End Macro

;Macro delayuse ;buffer,size
;_del@buf.l=`1
;#_del@size=(`2 LSL 3)-1
;#_del@writeoffset=`3*8
;End Macro
;
;Macro dspint
;`1*(1/$7fffffff)
;End Macro
;Macro interp
;((`3-`1)*`2)+`1
;End Macro
;Macro delayaddr
;(_del@count.l+(`1*8) AND #_del@size)+_del@buf.l
;End Macro
;
;Macro delayread
;Peek.f((_del@count.l+(`1*8) AND #_del@size)+_del@buf.l)
;End Macro
;
;Macro delaywrite
;Poke.f(((`1*8)+_del@count.l+#_del@writeoffset) AND #_del@size)+_del@buf.l,`2
;End Macro
;
;
;Macro delaywriteaddr
;((_del@count.l+(`1*8)+#_del@writeoffset) AND #_del@size)+_del@buf.l
;End Macro
;
;Macro delayinc
;;_del@count=_del@count+`1 AND #_del@size
;If _del@count<=0 Then _del@count=#_del@size
;End Macro
;
;Macro delayset ;value
;_del@count=`1
;End Macro

Macro cout
  MOVEM.l d0-d7/a0-a6,-(a7)

CNIF @#firsttime_cout=0
  #firsttime_cout = 1
  SHARED __consoleaddr.l
  BRA __skip_

  __consoleopen_:
     Poke.l ?__console,Open_("CON:/18/640/200/shell/CLOSE",1006)
    .Installexithandler_cout
     MOVE.l #myfreecode_cout,d0
     SysJsr $c801             ; this install the exithandler  (EXITLIB)
     MOVE.l d0,oldfree_cout   ; This read the oldfree code to link all handlers together
     BRA lcout_cout

  myfreecode_cout:            ; this is the autoexit routine
     CNIF #__debug
     Dc.w $7000
     SysJsr $d50a              ;set this task to no debug.
     CEND
     ;*****************User Code Start
     If __consoleaddr Then Close_ __consoleaddr
     ;*****************User Code End******************************
     MOVE.l oldfree_cout,a0  ;jump to next exithandler
  JMP (a0)

  oldfree_cout: Dc.l 0
  __console:Dc.l 0
  lcout_cout:
     ;***************** exit handler code end
  RTS
  __skip_
CEND
  MOVE.l __console,d0
  BNE ok`@
    JSR __consoleopen_
  ok`@
  MOVE.l __console,d0
  __consoleaddr.l = PutD0
  CNIF `0=1
    __cout$ = UStr$(`1) + Chr$($a)
    Write_ __consoleaddr ,__cout$,StrLen(__cout$)
  CEND
  CNIF `0=2
    __cout$ = UStr$(`1)+" "+UStr$(`2)+Chr$($a)
    Write_ __consoleaddr ,__cout$,StrLen(__cout$)
  CEND
  CNIF `0=3
    __cout$ = UStr$(`1)+" "+UStr$(`2)+" "+UStr$(`3)+Chr$($a)
    Write_ __consoleaddr ,__cout$,StrLen(__cout$)
  CEND
  CNIF `0=4
    __cout$ = UStr$(`1)+" "+UStr$(`2)+" "+UStr$(`3)+" "+UStr$(`4) +Chr$($a)
    Write_ __consoleaddr ,__cout$,StrLen(__cout$)
  CEND
  CNIF `0=5
    __cout$ = UStr$(`1)+" "+UStr$(`2)+" "+UStr$(`3)+" "+UStr$(`4)+" "+UStr$(`5) +Chr$($a)
    Write_ __consoleaddr ,__cout$,StrLen(__cout$)
  CEND
  MOVEM.l (a7)+,d0-d7/a0-a6
End Macro
 
Macro coutclose
  If __consoleaddr.l Then Close_ __consoleaddr:__consoleaddr=0
End Macro



.structwith_
;******************************* struct with _ for compatibility

NEWTYPE ._BitMap
    BytesPerRow.w
    Rows.w
    Flags.b
    _Depth.b
    pad.w
    *Planes.l[8]
End NEWTYPE

NEWTYPE ._ViewPort

 *_Next._ViewPort
 *ColorMap.ColorMap ;  table of colors for this viewport
     ;  if this is nil, MakeVPort assumes default values
 *DspIns.CopList ;  used by MakeVPort()
 *SprIns.CopList ;  used by sprite stuff
 *ClrIns.CopList ;  used by sprite stuff
 *UCopIns.UCopList ;  User copper list
 DWidth.w
 DHeight.w
 DxOffset.w
 DyOffset.w
 Modes.w
 SpritePriorities.b
 ExtendedModes.b
 *RasInfo.RasInfo
End NEWTYPE

NEWTYPE  ._RastPort
    *Layer.Layer
    *_BitMap.BitMap
    *AreaPtrn.w      ;  ptr to areafill pattern
    *TmpRas.TmpRas
    *AreaInfo.AreaInfo
    *GelsInfo.GelsInfo
    Mask.b       ;  write mask for this raster
    FgPen.b       ;  foreground pen for this raster
    BgPen.b       ;  background pen
    AOlPen.b       ;  areafill outline pen
    DrawMode.b       ;  drawing mode for fill, lines, and text
    AreaPtSz.b       ;  2^n words for areafill pattern
    linpatcnt.b       ;  current line drawing pattern preshift
    dummy.b
    Flags.w      ;  miscellaneous control bits
    LinePtrn.w      ;  16 bits for textured lines
    cp_x.w
    cp_y.w      ;  current pen position
    minterms.b[8]
    PenWidth.w
    PenHeight.w
    *Font.TextFont   ;  current font address
    AlgoStyle.b       ;  the algorithmically generated style
    TxFlags.b       ;  text specific flags
    TxHeight.w       ;  text height
    TxWidth.w       ;  text nominal width
    TxBaseline.w       ;  text baseline
    TxSpacing.w       ;  text spacing (per character)
    *RP_User.l
    longreserved.l[2]
    wordreserved.w[7]  ;  used to be a node
    reserved.b[8]      ;  for future use
End NEWTYPE


NEWTYPE ._Screen

    *NextScreen._Screen  ;  linked list of screens
    *FirstWindow._Window  ;  linked list Screen's Windows

    LeftEdge.w
    TopEdge.w  ;  parameters of the screen
    Width.w
    Height.w   ;  parameters of the screen

    _MouseY.w
    _MouseX.w  ;  position relative to upper-left

    Flags.w   ;  see definitions below

    *Title.b   ;  null-terminated Title text
    *DefaultTitle.b  ;  for Windows without ScreenTitle

    ;  Bar sizes for this Screen and all Window's in this Screen
    ;  Note that BarHeight is one less than the actual menu bar
;      * height. We're going to keep this in V36 for compatibility,
;      * although V36 artwork might use that extra pixel
;      *
;      * Also, the title bar height of a window is calculated from the
;      * screen's WBorTop field, plus the font height, plus one.
;
    BarHeight.b
    BarVBorder.b
    BarHBorder.b
    MenuVBorder.b
    MenuHBorder.b
    WBorTop.b
    WBorLeft.b
    WBorRight.b
    WBorBottom.b

    Pad.b           ; NEEDED !!! Really bad done the RKMs... C/C++ round up automatically, not PureBasic :-)

    *Font.TextAttr  ;  this screen's default font

    ;  the display data structures for this Screen
    _ViewPort._ViewPort  ;  describing the Screen's display
    _RastPort._RastPort  ;  describing Screen rendering
    _BitMap._BitMap  ;  SEE WARNING ABOVE!
    LayerInfo.Layer_Info ;  each screen gets a LayerInfo

    ;  Only system gadgets may be attached to a screen.
;      * You get the standard system Screen Gadgets automatically
;
    *FirstGadget.Gadget

    DetailPen.b
    BlockPen.b  ;  for bar/border/gadget rendering

    ;  the following variable(s) are maintained by Intuition to support the
;      * DisplayBeep() color flashing technique
;
    SaveColor0.w

    ;  This layer is for the Screen and Menu bars
    *BarLayer.Layer

    *ExtData.b

    *UserData.b ;  general-purpose pointer to User data extension

    ; *** Data below this point are SYSTEM PRIVATE ***
End NEWTYPE



NEWTYPE ._Window

    *NextWindow._Window  ;  for the linked list in a screen

    LeftEdge.w
    TopEdge.w  ;  screen dimensions of window
    Width.w
    Height.w   ;  screen dimensions of window

    _MouseY.w
    _MouseX.w  ;  relative to upper-left of window

    MinWidth.w
    MinHeight.w  ;  minimum sizes
    MaxWidth.w
    MaxHeight.w  ;  maximum sizes

    Flags.l   ;  see below for defines

    *MenuStrip.Menu  ;  the strip of Menu headers

    *Title.b   ;  the title text for this window

    *FirstRequest.Requester ;  all active Requesters

    *DMRequest.Requester ;  double-click Requester

    ReqCount.w   ;  count of reqs blocking Window

    *WScreen._Screen  ;  this Window's Screen
    *RPort._RastPort  ;  this Window's very own RastPort

    ;  the border variables describe the window border.  If you specify
;      * WFLG_GIMMEZEROZERO when you open the window, then the upper-left of
;      * the ClipRect for this window will be upper-left of the BitMap (with
;      * correct offsets when in SuperBitMap mode; you MUST select
;      * WFLG_GIMMEZEROZERO when using SuperBitMap).  If you don't specify
;      * ZeroZero, then you save memory (no allocation of RastPort, Layer,
;      * ClipRect and associated Bitmaps), but you also must offset all your
;      * writes by BorderTop, BorderLeft and do your own mini-clipping to
;      * prevent writing over the system gadgets
;
    BorderLeft.b
    BorderTop.b
    BorderRight.b
    BorderBottom.b
    *BorderRPort._RastPort


    ;  You supply a linked-list of Gadgets for your Window.
;      * This list DOES NOT include system gadgets.  You get the standard
;      * window system gadgets by setting flag-bits in the variable Flags (see
;      * the bit definitions below)
;
    *FirstGadget.Gadget

    ;  these are for opening/closing the windows
    *Parent.Window
    *Descendant.Window

    ;  sprite data information for your own Pointer
;      * set these AFTER you Open the Window by calling SetPointer()
;
    *_Pointer.w ;  sprite data
    PtrHeight.b ;  sprite height (not including sprite padding)
    PtrWidth.b ;  sprite width (must be less than or equal to 16)
    XOffset.b
    YOffset.b ;  sprite offsets

    ;  the IDCMP Flags and User's and Intuition's Message Ports
    IDCMPFlags.l ;  User-selected flags
    *UserPort.MsgPort
    *WindowPort.MsgPort
    *MessageKey.IntuiMessage

    DetailPen.b
    BlockPen.b ;  for bar/border/gadget rendering

    ;  the CheckMark is a pointer to the imagery that will be used when
;      * rendering MenuItems of this Window that want to be checkmarked
;      * if this is equal to NULL, you'll get the default imagery
;
    *CheckMark.Image

    *ScreenTitle.b ;  if non-null, Screen title when Window is active

    ;  These variables have the mouse coordinates relative to the
;      * inner-Window of WFLG_GIMMEZEROZERO Windows.  This is compared with the
;      * MouseX and MouseY variables, which contain the mouse coordinates
;      * relative to the upper-left corner of the Window, WFLG_GIMMEZEROZERO
;      * notwithstanding
;
    GZZMouseX.w
    GZZMouseY.w
    ;  these variables contain the width and height of the inner-Window of
;      * WFLG_GIMMEZEROZERO Windows
;
    GZZWidth.w
    GZZHeight.w

    *ExtData.b

    *UserData.b ;  general-purpose pointer to User data extension

    ; * 11/18/85: this pointer keeps a duplicate of what
;      * Window.RPort->Layer is _supposed_ to be pointing at
;
    *WLayer.Layer

    ;  NEW 1.2: need to keep track of the font that
;      * OpenWindow opened, in case user SetFont's into RastPort
;
    *IFont.TextFont

    ;  (V36) another flag word (the Flags field is used up).
;      * At present, all flag values are system private.
;      * Until further notice, you may not change nor use this field.
;
    MoreFlags.l

    ; *** Data beyond this point are Intuition Private.  DO NOT USE ***
End NEWTYPE
.structwith_end

#local           = 13
#base            =  2
#stack           =  1
#trash           =  0
#_d0             =   3
#_d1             =    4
#_d2             =    22
#_d3             =    23
#_d4             =    24
#_d5             =    25
#_d6             =    26
#_d7             =    27
#_a0             =    5
#_a1             =    6
#_a2             =    28
#_a3             =    29
;_a4            =    base
#_a5             =    30
#_a6             =    31
#SetExcHandler = -516
#RemExcHandler = -522
#CauseInterruptPPC = -108
#SetExcMMU        = -576
#ClearExcMMU       = -582
#SetCache          = -510
Macro citf  ;read a long value in a fpu register
  xoris   `2,`2,-$8000
  stw      `2,_CITF_TEMP+4-_base(r2)
  lfd      `1,_CITF_TEMP-_base(r2)
  fsub    `1,`1,f31
End Macro
Macro tofloat  ;convert ffp Value to 881 fpu
  ADD.l d0,d0
  BEQ 'lab1`@
    EORI.b #$80,d0
    ASR.b #1,d0
    SUBI.b #-$7e,d0
    SWAP d0
 'lab1`@
  ROL.l #7,d0
End Macro
UsePPC
Macro lf
lfd `1,`2-_base(r2)
End Macro
Macro ls
lfs `1,`2-_base(r2)
End Macro
Macro sw
stw `1,`2-_base(r2)
End Macro
Macro lw
lwz `1,`2-_base(r2)
End Macro
Macro sh
sth `1,`2-_base(r2)
End Macro
Macro lh
  lhz `1,`2-_base(r2)
End Macro
Macro lhs
  lha `1,`2-_base(r2)
End Macro
Macro ss
  stfs `1,`2-_base(r2)
End Macro
Macro _sf
  stfd `1,`2-_base(r2)
End Macro
Macro CALLPOWERPC
  lwz r3,_PowerPCBase-_base(r2)
  lwz r0,`1+2(r3)
  mtlr r0
  blrl
End Macro
Macro epilog
  lwz         r1,0(r1)
  lwz         r13,-4(r1)
  lwz         r0,8(r1)
  mtlr        trash
  blr
End Macro
Macro prolog
  mflr r0
  stw  r0,8(r1)
  stw  r13,-4(r1)
  SUBI r13,r1,4
  stwu r1,-1052(r1)
End Macro

#__distance_from_top_of_stack = 64

Macro initasm                               ;getregisters d0-d7 use this as first line for plugins
  MOVE.l a5,basicvars
  ;MOVE.l a4,localvars
  __init_ab3_variable_heap_here__.l=0
  MOVEM.l (a7)+,d0-d7/a0-a6
  LEA 12(a7),a7
  BRA LBLXC1
    basicvars:    Dc.l 0
    localvars:    Dc.l 0
    asmregisters: Ds.l 16
  LBLXC1
End Macro

Macro exitasm                              ;put registers d0-d7 for end plugin call from asm before end
                                           ;call from asm before end instruction
  LEA -12(a7),a7
  MOVEM.l d0-d7/a0-a6,-(a7)
  MOVE.l basicvars,a5
  ;MOVE.l localvars,a4
End Macro

Macro basic                                ;stores registers from asm prg to use basic now
                                           ;to use basic Instructions (do not use in Interrupts)

  ; Bernd's code to store asm registers UNDER the stack
  MOVE.l a0,-(a7)                          ; a0 to stack
  MOVE.l $4,a0                             ; execbase > a0
  MOVE.l $114(a0),a0                       ; thisTask.Task > a0
  MOVE.l $3a(a0),a0                        ; tc_SPLower > a0
  ADD.l #__distance_from_top_of_stack,a0   ; increase stack

  MOVEM.l d1-d7/a0-a6,$8(a0)               ; store registers in increased stack area
  MOVE.l (a7)+,$24(a0)                     ;
  MOVE.l 4(a0),a4

  ; Thilo's code to store asm registers in mem
  ;MOVEM.l d1-d7/a0-a6,asmregisters
  ;MOVE.l localvars,a4

  MOVE.l basicvars,a5                      ; load pointer to basic vars to a5
End Macro

Macro asm                                  ;reloads asm registers
  ; Bernd's code to store asm registers UNDER the stack
  MOVE.l $4,a0
  MOVE.l $114(a0),a0
  MOVE.l $3a(a0),a0
  ADD.l #__distance_from_top_of_stack,a0
  MOVE.l a4,4(a0)
  MOVEM.l $8(a0),d1-d7/a0-a6

  ; Thilo's code to store asm registers in mem
  ;MOVE.l a4,localvars
  ;MOVEM.l asmregisters,d1-d7/a0-a6
End Macro

Macro basica7                             ;stores asm register on stack
                                          ;call asma7 on same stackpos
  MOVEM.l d1-d7/a0-a6,-(a7)
  MOVE.l basicvars,a5
End Macro

Macro asma7
  MOVEM.l (a7)+,d1-d7/a0-a6
End Macro

Macro newidcmp       ;gets a own idcmp for wizard Windows
 Poke WZWindowAddr+$56,0
 i.l=Peek.l(WZWindowAddr+$52)
 ModifyIDCMP_ WZWindowAddr,i
End Macro

Macro freenewidcmp   ;free own idcmp for wizard windows
ModifyIDCMP_ WZWindowAddr,0
End Macro

Macro  newsigtask    ;put current task in windows->UserPort->SigTask
MOVE.l d2,-(a7)
i.l=WZWindowAddr
MOVE.l d0,d2
MOVE.l $4,a6
SUB.l a1,a1
JSR -$126(a6)
MOVE.l d2,a0
MOVE.l $56(a0),a0
MOVE.l d0,$10(a0)
MOVE.l (a7)+,d2
End Macro

Macro geta7var      ;get max 7 long Variables which were put from C
                    ;Functions to stack !use basica7 before call
CNIF `0=7
MOVE.l 84(a7),d0
`7=PutD0
CEND
CNIF `0=>6
MOVE.l 80(a7),d0
`6=PutD0
CEND
CNIF `0=>5
MOVE.l 76(a7),d0
`5=PutD0
CEND
CNIF `0=>4
MOVE.l 72(a7),d0
`4=PutD0
CEND
CNIF `0=>3
MOVE.l 68(a7),d0
`3=PutD0
CEND
CNIF `0=>2
MOVE.l 64(a7),d0
`2=PutD0
CEND
CNIF `0=>1
MOVE.l 60(a7),d0
`1=PutD0
CEND
End Macro
            Macro ENUM  ;[new base]
            CNIF `0=0
EOFFSET     SET     0
            CELSE
EOFFSET     SET     `1
            CEND
            End Macro

            Macro   EITEM;label
`1          EQU     EOFFSET
EOFFSET     SET     EOFFSET+1
            End Macro
.screenMacro
Macro screen_  ;num,title,prefsfile,mode[,tags ]
  _xx.l = `4
  FindScreen 0
  Window 0,0,0,10,10,$100f,"",0,1
  ShowRequesters 2
  CloseWindow 0
  If (_xx BitTst 0)
    i.l = 0
  Else
    i = Open_ (`3,1005)
  End If

  If i
    Read_ i,&__scr.screeninfo,SizeOf.screeninfo
    Close_ i
  Else
    MOVE.l a7,d0
    __stackstore.l=PutD0
    NInitASL
    CLR.l -(a7)
    CNIF `0 = 5
        i = `5
        MOVE.l d0,-(a7)
        MOVE.l #$2,-(a7)
     CEND
    FindScreen (0)
    MOVE.l d0,-(a7)
    MOVE.l #$80080000+40,-(a7)  ;screen
    MOVE.l #-1,-(a7)
    MOVE.l #$80080000+109,-(a7) ;wid
    MOVE.l #-1,-(a7)
    MOVE.l #$80080000+110,-(a7)  ;height
    MOVE.l #-1,-(a7)
    MOVE.l #$80080000+111,-(a7)  ;depth
    MOVE.l #-1,-(a7)
    ;MOVE.l #$80080000+112,-(a7)  ;oscan
    ;MOVE.l #-1,-(a7)
    MOVE.l #$80080000+113,-(a7)  ;scroll
    MOVE.l a7,d0
    i = PutD0
    *__m.screeninfo=NASLScreenRequest(i)
    MOVE.l __stackstore@(a5),a7
    If *__m
      CopyMem_ *__m,&__scr,SizeOf .screeninfo
      i = Open_ (`3,1004)
      Write_ i,&__scr,SizeOf .screeninfo
      Close_ i
    End If
  End If
  __scrl.l = 1
  USEPATH __scr
  If (_xx BitTst 4) Then \height=\height*4:__scrl=0
  If (_xx BitTst 3) Then \height=\height*3:__scrl=0
  If (_xx BitTst 2) Then \height=\height*2:__scrl=0
  If (_xx BitTst 1)=0
    i = ScreenTags (`1,`2,#SA_DisplayID,\id,#SA_Width,\width,#SA_AutoScroll,__scrl,#SA_Height,\height,#SA_Depth,\dep,#SA_Interleaved,0,#SA_LikeWorkbench,1)
  End If
  If (_xx BitTst 2) Then \height=\height/2
  If (_xx BitTst 3) Then \height=\height/3
  If (_xx BitTst 4) Then \height=\height/4
  GetD0 i
  USELASTPATH

End Macro

NEWTYPE .screeninfo
        id.l
        width.l
        height.l
        dep.w
        overscan.w
        autoscroll.w
        bmapwidth.l
        bmapheight.l
End NEWTYPE

Macro screen_width ;return visible width of last opened screen from !screen
__scr\width
End Macro
Macro screen_height ;return visible height of last opened screen from !screen
__scr\height
End Macro
Macro screen_depth ;return depth of last opened screen from !screen
__scr\dep
End Macro
Macro screen_realwidth ;return total width of last opened screen from !screen
__scr\bmapwidth
End Macro
Macro screen_realheight ;return total height of last opened screen from !screen
__scr\bmapheight
End Macro
Macro screen_id ;return screenmode id of last opend screen from !screen
__scr\id
End Macro

;
; ** $VER: cybergraphics.h 41.18 (21.02.1998)
; **
; ** include file for cybergraphics.library
; **
; ** Copyright ) 1996-1998 by phase5 digital products
; **      All Rights reserved.
; **
;

#CYBERGRAPHX_CYBERGRAPHICS_H = 1

#DISPLAYNAMELEN  = 32


Macro CYBERGFXNAME
  "cybergraphics.library"
End Macro
#CYBERGFX_INCLUDE_VERSION  = 41
.cgxincludes_begin
;                                                           *
;  *  Definition of CyberModeNode (Returned in AllocModeList) *
;  *

NEWTYPE .CyberModeNode

  Node.Node
  ModeText.b[#DISPLAYNAMELEN] ;  name for this mode
  DisplayID.l   ;  display id associated with the node
  Width.w    ;  visible width
  Height.w   ;  visible height
 ;:@ Depth.w    ;  display depth
  *DisplayTagList.TagItem ;  taglist with extended ModeID information
 End NEWTYPE


;                                   *
;  * Parameters for GetCyberMapAttr() *
;  *

#CYBRMATTR_XMOD        = $80000001 ;  function returns BytesPerRow if its called with this parameter
#CYBRMATTR_BPPIX       = $80000002 ;  BytesPerPixel shall be returned
#CYBRMATTR_DISPADR     = $80000003 ;  do not use this ! private tag
#CYBRMATTR_PIXFMT      = $80000004 ;  the pixel format is returned
#CYBRMATTR_WIDTH       = $80000005 ;  returns width in pixels
#CYBRMATTR_HEIGHT      = $80000006 ;  returns height in lines
#CYBRMATTR_DEPTH       = $80000007 ;  returns bits per pixel
#CYBRMATTR_ISCYBERGFX  = $80000008 ;  returns -1 if supplied bitmap is a cybergfx one
#CYBRMATTR_ISLINEARMEM = $80000009 ;  returns -1 if supplied bitmap is linear accessable

;                                  *
;  * Parameters for GetCyberIDAttr() *
;  *

#CYBRIDATTR_PIXFMT = $80000001 ;  the pixel format is returned
#CYBRIDATTR_WIDTH  = $80000002 ;  returns visible width in pixels
#CYBRIDATTR_HEIGHT = $80000003 ;  returns visible height in lines
#CYBRIDATTR_DEPTH  = $80000004 ;  returns bits per pixel
#CYBRIDATTR_BPPIX  = $80000005 ;  BytesPerPixel shall be returned

;                               *
;  * Tags for CyberModeRequest()  *
;  *

#CYBRMREQ_TB          = #TAG_USER+$40000

;             *
;  * FilterTags *
;  *

#CYBRMREQ_MinDepth    = #CYBRMREQ_TB+0  ;  Minimum depth for displayed screenmode
#CYBRMREQ_MaxDepth    = #CYBRMREQ_TB+1  ;  Maximum depth  "       "        "
#CYBRMREQ_MinWidth    = #CYBRMREQ_TB+2  ;  Minumum width  "       "        "
#CYBRMREQ_MaxWidth    = #CYBRMREQ_TB+3  ;  Maximum width  "       "        "
#CYBRMREQ_MinHeight   = #CYBRMREQ_TB+4  ;  Minumum height "       "        "
#CYBRMREQ_MaxHeight   = #CYBRMREQ_TB+5  ;  Minumum height "       "        "
#CYBRMREQ_CModelArray = #CYBRMREQ_TB+6

#CYBRMREQ_WinTitle    = #CYBRMREQ_TB+20
#CYBRMREQ_OKText      = #CYBRMREQ_TB+21
#CYBRMREQ_CancelText  = #CYBRMREQ_TB+22

#CYBRMREQ_Screen      = #CYBRMREQ_TB+30  ;  Screen you wish the Requester to open on

;                             *
;  * Tags for BestCyberModeID() *
;  *

#CYBRBIDTG_TB  = #TAG_USER+$50000

;  FilterTags

#CYBRBIDTG_Depth         = #CYBRBIDTG_TB+0
#CYBRBIDTG_NominalWidth  = #CYBRBIDTG_TB+1
#CYBRBIDTG_NominalHeight = #CYBRBIDTG_TB+2
#CYBRBIDTG_MonitorID     = #CYBRBIDTG_TB+3
#CYBRBIDTG_BoardName     = #CYBRBIDTG_TB+5

;                                     *
;  * definition of divers pixel formats *
;  *

#PIXFMT_LUT8 = 0
#PIXFMT_RGB15 = 1
#PIXFMT_BGR15 = 2
#PIXFMT_RGB15PC = 3
#PIXFMT_BGR15PC = 4
#PIXFMT_RGB16 = 5
#PIXFMT_BGR16 = 6
#PIXFMT_RGB16PC = 7
#PIXFMT_BGR16PC = 8
#PIXFMT_RGB24 = 9
#PIXFMT_BGR24 = 10
#PIXFMT_ARGB32 = 11
#PIXFMT_BGRA32 = 12
#PIXFMT_RGBA32 = 13

;                                                         *
;  * SrcRectangle formats defines for xxxPixelArray calls() *
;  *

#RECTFMT_RGB = 0
#RECTFMT_RGBA = 1
#RECTFMT_ARGB = 2
#RECTFMT_LUT8 = 3
#RECTFMT_GREY8 = 4

;                                     *
;  * Parameters for CVideoCtrlTagList() *
;  *

#SETVC_DPMSLevel  = $88002001

#DPMS_ON      = 0   ;  Full operation
#DPMS_STANDBY = 1   ;  Optional state of minimal power reduction
#DPMS_SUSPEND = 2   ;  Significant reduction of power consumption
#DPMS_OFF     = 3   ;  Lowest level of power consumption

;                               *
;  * Tags for LockBitMapTagList() *
;  *

#LBMI_WIDTH       = $84001001
#LBMI_HEIGHT      = $84001002
#LBMI_DEPTH       = $84001003
#LBMI_PIXFMT      = $84001004
#LBMI_BYTESPERPIX = $84001005
#LBMI_BYTESPERROW = $84001006
#LBMI_BASEADDRESS = $84001007

;                                 *
;  * Tags for UnLockBitMapTagList() *
;  *

#UBMI_UPDATERECTS = $85001001
#UBMI_REALLYUNLOCK = $85001002



;         *
;  * Message passed to the DoCDrawMethodTagList() hook function *
;  *


NEWTYPE . CDrawMsg

        *cdm_MemPtr.l
        cdm_offx.l
        cdm_offy.l
        cdm_xsize.l
        cdm_ysize.l
        cdm_BytesPerRow.w
        cdm_BytesPerPix.w
        cdm_ColorModel.w
End NEWTYPE

;        *
;  * Colour Table source formats for WriteLUTPixelArray() *
;  *

#CTABFMT_XRGB8 = 0 ;  ULONG [] table


;        *
;  * graphics.library/AllocBitMap() extended flags *
;  *

#BMB_SPECIALFMT = 7
#BMF_SPECIALFMT = 1 LSL #BMB_SPECIALFMT

;#SHIFT_PIXFMT( = fmt ) (((fmt)) LSL 24UL)

;end cybergfxinclude *********************************************
.cgxincludes_end


