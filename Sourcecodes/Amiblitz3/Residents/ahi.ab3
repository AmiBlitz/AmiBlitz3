; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "test"
; CreateIcon      = 1
; Residents       = "blitzlibs:all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 3
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 44
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = -1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
NEWTYPE .Fixed
a.l
End NEWTYPE
DEFTYPE.l

; ** $VER: ahi.h 4.1 (2.4.97)
; **
; ** ahi.device definitions
; **
; ** (C) Copyright 1994-1997 Martin Blom
; ** All Rights Reserved.
; **
; ** (TAB SIZE: 8)
;
_LVOAHI_AllocAudioA             EQU     -42
_LVOAHI_FreeAudio               EQU     -48
_LVOAHI_KillAudio               EQU     -54
_LVOAHI_ControlAudioA           EQU     -60
_LVOAHI_SetVol                  EQU     -66
_LVOAHI_SetFreq                 EQU     -72
_LVOAHI_SetSound                EQU     -78
_LVOAHI_SetEffect               EQU     -84
_LVOAHI_LoadSound               EQU     -90
_LVOAHI_UnloadSound             EQU     -96
_LVOAHI_NextAudioID             EQU     -102
_LVOAHI_GetAudioAttrsA          EQU     -108
_LVOAHI_BestAudioIDA            EQU     -114
_LVOAHI_AllocAudioRequestA      EQU     -120
_LVOAHI_AudioRequestA           EQU     -126
_LVOAHI_FreeAudioRequest        EQU     -132
_LVOAHI_PlayA                   EQU     -138
_LVOAHI_SampleFrameSize         EQU     -144
_LVOAHI_AddAudioMode            EQU     -150
_LVOAHI_RemoveAudioMode         EQU     -156
_LVOAHI_LoadModeFile            EQU     -162

; ***************************************************************************


; ***************************************************************************

INCLUDE "blitzoffs.ab3"

; ** STRUCTURES

 ;  AHIAudioCtrl
NEWTYPE .AHIAudioCtrl

 *ahiac_UserData.l
 ;  Lots of private data follows!
End NEWTYPE

 ;  AHISoundMessage
NEWTYPE .AHISoundMessage

  ahism_Channel.w
End NEWTYPE

 ;  AHIRecordMessage
NEWTYPE .AHIRecordMessage

 ahirm_Type.l   ;  Format of buffer (object)
 *ahirm_Buffer.l   ;  Pointer to the sample array
 ahirm_Length.l   ;  Number of sample frames in buffer
End NEWTYPE

 ;  AHISampleInfo
NEWTYPE .AHISampleInfo

 ahisi_Type.l   ;  Format of samples
 *ahisi_Address.l   ;  Address to array of samples
 ahisi_Length.l   ;  Number of samples in array
End NEWTYPE


 ;  AHIAudioModeRequester
NEWTYPE .AHIAudioModeRequester

 ahiam_AudioID.l   ;  Selected audio mode
 ahiam_MixFreq.l   ;  Selected mixing/sampling frequency

 ahiam_LeftEdge.w   ;  Coordinates of requester on exit
 ahiam_TopEdge.w
 ahiam_Width.w
 ahiam_Height.w

 ahiam_InfoOpened.w  ;  Info window opened on exit?
 ahiam_InfoLeftEdge.w  ;  Last coordinates of Info window
 ahiam_InfoTopEdge.w
 ahiam_InfoWidth.w
 ahiam_InfoHeight.w

 *ahiam_UserData.l   ;  You can store your own data here
 ;  Lots of private data follows!
End NEWTYPE

 ;  AHIEffMasterVolume
NEWTYPE .AHIEffMasterVolume

 ahie_Effect.l   ;  Set to AHIET_MASTERVOLUME
 ahiemv_Volume.l   ;  See autodocs for range!
End NEWTYPE

 ;  AHIEffOutputBuffer
NEWTYPE .AHIEffOutputBuffer

 ahie_Effect.l  ;  Set to AHIET_OUTPUTBUFFER
 *ahieob_Func.Hook
 ;  These fields are filled by AHI
 ahieob_Type.l  ;  Format of buffer
 *ahieob_Buffer.l  ;  Pointer to the sample array
 ahieob_Length.l  ;  Number of sample frames in buffer
End NEWTYPE

 ;  AHIEffDSPMask (V4)
NEWTYPE .AHIEffDSPMask

 ahie_Effect.l   ;  Set to AHIET_DSPMASK
 ahiedm_Channels.w  ;  Number of elements in array
 ahiedm_Mask.b   ;  Here follows the array
End NEWTYPE

#AHIEDM_WET  = (0)
#AHIEDM_DRY  = (1)

 ;  AHIEffDSPEcho (V4)
NEWTYPE .AHIDSPEcho

 ahie_Effect.l   ;  Set to AHIET_DSPECHO
 ahiede_Delay.l   ;  In samples
 ahiede_Feedback.l
 ahiede_Mix.l
 ahiede_Cross.Fixed
End NEWTYPE

 ;  AHIEffChannelInfo (V4)

NEWTYPE .AHIEffChannelInfo

 ahie_Effect.l  ;  Set to AHIET_CHANNELINFO
 *ahieci_Func.Hook
 ahieci_Channels.w
 ahieci_Pad.w
 ;  The rest is filled by AHI
  ahieci_Offset.l ;  The array follows
End NEWTYPE

; ** TAGS

#AHI_TagBase  = (#TAG_USER)
#AHI_TagBaseR  = (#AHI_TagBase+$8000)

 ;  AHI_AllocAudioA tags
#AHIA_AudioID  = (#AHI_TagBase+1)  ;  Desired audio mode
#AHIA_MixFreq  = (#AHI_TagBase+2)  ;  Suggested mixing frequency
#AHIA_Channels  = (#AHI_TagBase+3)  ;  Suggested number of channels
#AHIA_Sounds  = (#AHI_TagBase+4)  ;  Number of sounds to use
#AHIA_SoundFunc  = (#AHI_TagBase+5)  ;  End-of-Sound Hook
#AHIA_PlayerFunc  = (#AHI_TagBase+6)  ;  Player Hook
#AHIA_PlayerFreq  = (#AHI_TagBase+7)  ;  Frequency for player Hook (Fixed)
#AHIA_MinPlayerFreq = (#AHI_TagBase+8)  ;  Minimum Frequency for player Hook
#AHIA_MaxPlayerFreq = (#AHI_TagBase+9)  ;  Maximum Frequency for player Hook
#AHIA_RecordFunc  = (#AHI_TagBase+10) ;  Sample recording Hook
#AHIA_UserData  = (#AHI_TagBase+11) ;  What to put in ahiac_UserData

  ;  AHI_PlayA tags (V4)
#AHIP_BeginChannel = (#AHI_TagBase+40) ;  All command tags should be...
#AHIP_EndChannel  = (#AHI_TagBase+41) ;  ... enclosed by these tags.
#AHIP_Freq  = (#AHI_TagBase+50)
#AHIP_Vol  = (#AHI_TagBase+51)
#AHIP_Pan  = (#AHI_TagBase+52)
#AHIP_Sound  = (#AHI_TagBase+53)
#AHIP_Offset  = (#AHI_TagBase+54)
#AHIP_Length  = (#AHI_TagBase+55)
#AHIP_LoopFreq  = (#AHI_TagBase+60)
#AHIP_LoopVol  = (#AHI_TagBase+61)
#AHIP_LoopPan  = (#AHI_TagBase+62)
#AHIP_LoopSound  = (#AHI_TagBase+63)
#AHIP_LoopOffset  = (#AHI_TagBase+64)
#AHIP_LoopLength  = (#AHI_TagBase+65)

 ;  AHI_ControlAudioA tags
#AHIC_Play  = (#AHI_TagBase+80) ;  Boolean
#AHIC_Record  = (#AHI_TagBase+81) ;  Boolean
#AHIC_MonitorVolume = (#AHI_TagBase+82)
#AHIC_MonitorVolume_Query = (#AHI_TagBase+83) ;  ti_Data is pointer to Fixed (LONG)
#AHIC_MixFreq_Query = (#AHI_TagBase+84) ;  ti_Data is pointer to ULONG
;  --- New for V2, they will be ignored by V1 ---
#AHIC_InputGain  = (#AHI_TagBase+85)
#AHIC_InputGain_Query = (#AHI_TagBase+86) ;  ti_Data is pointer to Fixed (LONG)
#AHIC_OutputVolume = (#AHI_TagBase+87)
#AHIC_OutputVolume_Query = (#AHI_TagBase+88) ;  ti_Data is pointer to Fixed (LONG)
#AHIC_Input  = (#AHI_TagBase+89)
#AHIC_Input_Query = (#AHI_TagBase+90) ;  ti_Data is pointer to ULONG
#AHIC_Output  = (#AHI_TagBase+91)
#AHIC_Output_Query = (#AHI_TagBase+92) ;  ti_Data is pointer to ULONG

 ;  AHI_GetAudioAttrsA tags
#AHIDB_AudioID  = (#AHI_TagBase+100)
#AHIDB_Driver  = (#AHI_TagBaseR+101) ;  Pointer to name of driver
#AHIDB_Flags  = (#AHI_TagBase+102) ;  Private!
#AHIDB_Volume  = (#AHI_TagBase+103) ;  Boolean
#AHIDB_Panning  = (#AHI_TagBase+104) ;  Boolean
#AHIDB_Stereo  = (#AHI_TagBase+105) ;  Boolean
#AHIDB_HiFi  = (#AHI_TagBase+106) ;  Boolean
#AHIDB_PingPong  = (#AHI_TagBase+107) ;  Boolean
#AHIDB_MultTable  = (#AHI_TagBase+108) ;  Private!
#AHIDB_Name  = (#AHI_TagBaseR+109) ;  Pointer to name of this mode
#AHIDB_Bits  = (#AHI_TagBase+110) ;  Output bits
#AHIDB_MaxChannels = (#AHI_TagBase+111) ;  Max supported channels
#AHIDB_MinMixFreq = (#AHI_TagBase+112) ;  Min mixing freq. supported
#AHIDB_MaxMixFreq = (#AHI_TagBase+113) ;  Max mixing freq. supported
#AHIDB_Record  = (#AHI_TagBase+114) ;  Boolean
#AHIDB_Frequencies = (#AHI_TagBase+115)
#AHIDB_FrequencyArg = (#AHI_TagBase+116) ;  ti_Data is frequency index
#AHIDB_Frequency  = (#AHI_TagBase+117)
#AHIDB_Author  = (#AHI_TagBase+118) ;  Pointer to driver author name
#AHIDB_Copyright  = (#AHI_TagBase+119) ;  Pointer to driver copyright notice
#AHIDB_Version  = (#AHI_TagBase+120) ;  Pointer to driver version string
#AHIDB_Annotation = (#AHI_TagBase+121) ;  Pointer to driver annotation text
#AHIDB_BufferLen  = (#AHI_TagBase+122) ;  Specifies the string buffer size
#AHIDB_IndexArg  = (#AHI_TagBase+123) ;  ti_Data is frequency!
#AHIDB_Index  = (#AHI_TagBase+124)
#AHIDB_Realtime  = (#AHI_TagBase+125) ;  Boolean
#AHIDB_MaxPlaySamples = (#AHI_TagBase+126) ;  It's sample *frames*
#AHIDB_MaxRecordSamples = (#AHI_TagBase+127) ;  It's sample *frames*
#AHIDB_FullDuplex = (#AHI_TagBase+129) ;  Boolean
;  --- New for V2, they will be ignored by V1 ---
#AHIDB_MinMonitorVolume = (#AHI_TagBase+130)
#AHIDB_MaxMonitorVolume = (#AHI_TagBase+131)
#AHIDB_MinInputGain = (#AHI_TagBase+132)
#AHIDB_MaxInputGain = (#AHI_TagBase+133)
#AHIDB_MinOutputVolume = (#AHI_TagBase+134)
#AHIDB_MaxOutputVolume = (#AHI_TagBase+135)
#AHIDB_Inputs  = (#AHI_TagBase+136)
#AHIDB_InputArg  = (#AHI_TagBase+137) ;  ti_Data is input index
#AHIDB_Input  = (#AHI_TagBase+138)
#AHIDB_Outputs  = (#AHI_TagBase+139)
#AHIDB_OutputArg  = (#AHI_TagBase+140) ;  ti_Data is input index
#AHIDB_Output  = (#AHI_TagBase+141)
;  --- New for V4, they will be ignored by V2 and earlier ---
#AHIDB_Data  = (#AHI_TagBaseR+142) ;  Private!

 ;  AHI_BestAudioIDA tags
;  --- New for V4, they will be ignored by V2 and earlier ---
#AHIB_Dizzy  = (#AHI_TagBase+190)

 ;  AHI_AudioRequestA tags
 ;  Window control
#AHIR_Window  = (#AHI_TagBase+200) ;  Parent window
#AHIR_Screen  = (#AHI_TagBase+201) ;  Screen to open on if no window
#AHIR_PubScreenName = (#AHI_TagBase+202) ;  Name of public screen
#AHIR_PrivateIDCMP = (#AHI_TagBase+203) ;  Allocate private IDCMP?
#AHIR_IntuiMsgFunc = (#AHI_TagBase+204) ;  Function to handle IntuiMessages
#AHIR_SleepWindow = (#AHI_TagBase+205) ;  Block input in AHIR_Window?
#AHIR_UserData  = (#AHI_TagBase+206) ;  What to put in ahiam_UserData
 ;  Text display
#AHIR_TextAttr  = (#AHI_TagBase+220) ;  Text font to use for gadget text
#AHIR_Locale  = (#AHI_TagBase+221) ;  Locale to use for text
#AHIR_TitleText  = (#AHI_TagBase+222) ;  Title of requester
#AHIR_PositiveText = (#AHI_TagBase+223) ;  Positive gadget text
#AHIR_NegativeText = (#AHI_TagBase+224) ;  Negative gadget text
 ;  Initial settings
#AHIR_InitialLeftEdge = (#AHI_TagBase+240) ;  Initial requester coordinates
#AHIR_InitialTopEdge = (#AHI_TagBase+241)
#AHIR_InitialWidth = (#AHI_TagBase+242) ;  Initial requester dimensions
#AHIR_InitialHeight = (#AHI_TagBase+243)
#AHIR_InitialAudioID = (#AHI_TagBase+244) ;  Initial audio mode id
#AHIR_InitialMixFreq = (#AHI_TagBase+245) ;  Initial mixing/sampling frequency
#AHIR_InitialInfoOpened = (#AHI_TagBase+246) ;  Info window initially opened?
#AHIR_InitialInfoLeftEdge = (#AHI_TagBase+247) ;  Initial Info window coords.
#AHIR_InitialInfoTopEdge = (#AHI_TagBase+248)
#AHIR_InitialInfoWidth = (#AHI_TagBase+249) ;  Not used!
#AHIR_InitialInfoHeight = (#AHI_TagBase+250) ;  Not used!
 ;  Options
#AHIR_DoMixFreq  = (#AHI_TagBase+260) ;  Allow selection of mixing frequency?
#AHIR_DoDefaultMode = (#AHI_TagBase+261) ;  Allow selection of default mode? (V4)
 ;  Filtering
#AHIR_FilterTags  = (#AHI_TagBase+270) ;  Pointer to filter taglist
#AHIR_FilterFunc  = (#AHI_TagBase+271) ;  Function to filter mode id's

; ** DEFS

;#AHINAME   = "ahi\device"
#AHI_INVALID_ID  = NOT 0   ;  Invalid Audio ID
#AHI_DEFAULT_ID  = $00000000  ;  Only for AHI_AllocAudioA()!
#AHI_LOOPBACK_ID  = ($00000001)  ;  Special sample render Audio ID
#AHI_DEFAULT_FREQ = 0   ;  Only for AHI_AllocAudioA()!
#AHI_MIXFREQ  = NOT 0   ;  Special frequency for AHI_SetFreq()
#AHI_NOSOUND  = $ffff  ;  Turns a channel off

 ;  Set#? Flags
#AHISF_IMM  = (1 LSL 0)
#AHISB_IMM  = (0)

 ;  Effect Types
#AHIET_CANCEL  = (1 LSL 31)   ;  OR with effect to disable
#AHIET_MASTERVOLUME = (1)
#AHIET_OUTPUTBUFFER = (2)
;  --- New for V4 ---
#AHIET_DSPMASK  = (3)
#AHIET_DSPECHO  = (4)
#AHIET_CHANNELINFO = (5)

 ;  Sound Types
#AHIST_NOTYPE  = (NOT 0)   ;  Private
#AHIST_SAMPLE  = (0)   ;  8 or 16 bit sample
#AHIST_DYNAMICSAMPLE = (1)   ;  Dynamic sample
#AHIST_INPUT  = (1 LSL 29)   ;  The input from your sampler
#AHIST_BW  = (1 LSL 30)   ;  Private

 ;  Sample types
;  Note that only AHIST_M8S, AHIST_S8S, AHIST_M16S and AHIST_S16S
;    are supported by AHI_LoadSound().
#AHIST_M8S  = (0)   ;  Mono, 8 bit signed (BYTE)
#AHIST_M16S  = (1)   ;  Mono, 16 bit signed (WORD)
#AHIST_S8S  = (2)   ;  Stereo, 8 bit signed (2WBYTE)
#AHIST_S16S  = (3)   ;  Stereo, 16 bit signed (2WWORD)
#AHIST_M32S  = (8)   ;  Mono, 32 bit signed (LONG)
#AHIST_S32S  = (10)   ;  Stereo, 32 bit signed (2WLONG)

#AHIST_M8U  = (4)   ;  OBSOLETE!

 ;  Error codes
#AHIE_OK   = (0)   ;  No error
#AHIE_NOMEM  = (1)   ;  Out of memory
#AHIE_BADSOUNDTYPE = (2)   ;  Unknown sound type
#AHIE_BADSAMPLETYPE = (3)   ;  Unknown/unsupported sample type
#AHIE_ABORTED  = (4)   ;  User-triggered abortion
#AHIE_UNKNOWN  = (5)   ;  Error, but unknown
#AHIE_HALFDUPLEX  = (6)   ;  CMD_WRITE/CMD_READ failure



;  DEVICE INTERFACE DEFINITIONS FOLLOWS ***********************************

 ;  Device units

#AHI_DEFAULT_UNIT = (0)
#AHI_NO_UNIT  = (255)


 ;  The preference file

;#ID_AHIU = MAKE_ID('A','H','I','U')
;#ID_AHIG = MAKE_ID('A','H','I','G')

NEWTYPE .AHIUnitPrefs

 ahiup_Unit.b
        ahiup_Pad.b
        ahiup_Channels.w
        ahiup_AudioMode.l
        ahiup_Frequency.l
        ahiup_MonitorVolume.Fixed
        ahiup_InputGain.Fixed
        ahiup_OutputVolume.Fixed
        ahiup_Input.l
        ahiup_Output.l
End NEWTYPE

NEWTYPE .AHIGlobalPrefs

 ahigp_DebugLevel.w   ;  Range: 0-3 (for None, Low,
;           High and All)
 ahigp_DisableSurround.b ;bool
 ahigp_DisableEcho.b     ;bool
 ahigp_FastEcho.b        ;bool
 ahigp_MaxCPU.Fixed
End NEWTYPE

 ;  Debug levels
#AHI_DEBUG_NONE  = (0)
#AHI_DEBUG_LOW  = (1)
#AHI_DEBUG_HIGH  = (2)
#AHI_DEBUG_ALL  = (3)

 ;  AHIRequest

NEWTYPE .AHIRequest

 ahir_Std.IOStdReq  ;  Standard IO request
 ahir_Version.w  ;  Needed version
;  --- New for V4, they will be ignored by V2 and earlier ---
 ahir_Pad1.w
 ahir_Private.l[2] ;  Hands off!
 ahir_Type.l  ;  Sample format
 ahir_Frequency.l ;  Sample/Record frequency
 ahir_Volume.Fixed  ;  Sample volume
 ahir_Position.Fixed  ;  Stereo position
 *ahir_Link.AHIRequest  ;  For double buffering
End NEWTYPE

 ;  Flags for OpenDevice()

#AHIDF_NOMODESCAN = (1 LSL 0)
#AHIDB_NOMODESCAN = (0)


 ; A handy macro to open the device for use as a library.
 ; Usage:  OPENAHI <version>
 ; On exit: d0=_AHIBase or NULL for error.
.openahi
 Macro openahi
        MOVEM.l d1/a0-a1/a6,-(a7)
        LEA     AHI_PORT(pc),a0
        CLR.l   (a0)+
        CLR.l   (a0)+
        MOVEQ   #0,d0
        MOVE.l  d0,(a0)+
        MOVE.l  4,a6
        JSR     _CreateMsgPort(a6)
        LEA     AHI_PORT(pc),a0
        MOVE.l  d0,(a0)
        BEQ.b   AHI_ERROR
        MOVE.l  d0,a0
        MOVEQ   #SizeOf .AHIRequest,d0
        JSR     _CreateIORequest(a6)
        LEA     AHI_IOR(pc),a0
        MOVE.l  d0,(a0)
        BEQ.b   AHI_ERROR
        LEA     AHI_NAME(pc),a0
        MOVE.l  d0,a1
        MOVE.w  #0,.AHIRequest\ahir_Version(a1)
        MOVE.l  #AHI_NO_UNIT,d0
        MOVEQ   #0,d1
        JSR     _OpenDevice(a6)
        LEA     AHI_DEVICE(pc),a0
        MOVE.l  d0,(a0)
        BNE.b   AHI_ERROR

        MOVE.l  AHI_IOR(PC),a0
        MOVE.l  $14(a0),d0
        MOVE.l d0,ahibase
        BRA.b   AHI_EXIT
ahibase:         Dc.l 0
AHI_PORT:       Dc.l    0
AHI_IOR:        Dc.l    0
AHI_DEVICE:     Dc.l    0
AHI_NAME:       Dc.b    "ahi.device",0
        Even
AHI_ERROR:
        MOVEQ   #0,D0
AHI_EXIT:
        MOVEM.l (a7)+,d1/a0-a1/a6
        End Macro

 ; Here is the macro for closing the device after it has been
 ; opened with the OPENAHI macro. Call CLOSEAHI even if OPENAHI
 ; failed!
.closeahi
 Macro closeahi
        MOVEM.l d0-d1/a0-a1/a6,-(a7)
        MOVE.l  4,a6
        LEA     AHI_DEVICE(pc),a1
        TST.l   (a1)
        BNE.b   'ahi_nodevice
        SUBQ.l  #1,(a1)
        MOVE.l  AHI_IOR(pc),a1
        JSR     _CloseDevice(a6)
        LEA     AHI_IOR(pc),a1
        MOVE.l  (a1),a0
        CLR.l   (a1)
        JSR     _DeleteIORequest(a6)
'ahi_nodevice
        LEA     AHI_PORT(pc),a1
        MOVE.l  (a1),a0
        CLR.l   (a1)
        JSR     _DeleteMsgPort(a6)
        MOVEM.l (a7)+,d0-d1/a0-a1/a6
      End Macro

Macro AHI_LoadSound
    MOVE.l ahibase,a6
    PushD0 `1
    PushD0 `2
    PushD0 `3
    PushD0 `4
    MOVE.l (a7)+,a2
    MOVE.l (a7)+,a0
    MOVE.l (a7)+,d1
    MOVE.l (a7)+,d0
    JSR _LVOAHI_LoadSound(a6)
End Macro
Macro AHI_UnloadSound
    MOVE.l ahibase,a6
    PushD0 `1
    PushD0 `2
    MOVE.l (a7)+,a2
    MOVE.l (a7)+,d0
    JSR _LVOAHI_UnloadSound(a6)
End Macro
Macro AHI_FreeAudio
    MOVE.l ahibase,a6
    PushD0 `1
    MOVE.l (a7)+,a2
    JSR _LVOAHI_FreeAudio(a6)
End Macro
Macro AHI_Play
    MOVE.l ahibase,a6
    PushD0 `1
    PushD0 `2
    MOVE.l (a7)+,a1
    MOVE.l (a7)+,a2
    JSR _LVOAHI_PlayA(a6)
End Macro
Macro AHI_AllocAudio
    MOVE.l ahibase,a6
    PushD0 `1
    MOVE.l (a7)+,a1
    JSR _LVOAHI_AllocAudioA(a6)
End Macro

Macro AHI_ControlAudio
    MOVE.l ahibase,a6
    PushD0 `1
    PushD0 `2
    MOVE.l (a7)+,a1
    MOVE.l (a7)+,a2
    JSR _LVOAHI_ControlAudioA(a6)
End Macro

Macro AHI_SetSound
    MOVE.l ahibase,a6
    PushD0 `1
    PushD0 `2
    PushD0 `3
    PushD0 `4
    PushD0 `5
    PushD0 `6
    MOVE.l (a7)+,d4
    MOVE.l (a7)+,a2
    MOVE.l (a7)+,d3
    MOVE.l (a7)+,d2
    MOVE.l (a7)+,d1
    MOVE.l (a7)+,d0
    JSR _LVOAHI_SetSound(a6)
End Macro
Macro AHI_SetVol
    MOVE.l ahibase,a6
    PushD0 `1
    PushD0 `2
    PushD0 `3
    PushD0 `4
    PushD0 `5
    MOVE.l (a7)+,d3
    MOVE.l (a7)+,a2
    MOVE.l (a7)+,d2
    MOVE.l (a7)+,d1
    MOVE.l (a7)+,d0
    JSR _LVOAHI_SetVol(a6)
End Macro

Macro AHI_BestAudioID
    MOVE.l ahibase,a6
    PushD0 `1
    MOVE.l (a7)+,a1
    JSR _LVOAHI_BestAudioIDA(a6)
End Macro

Macro AHI_SetFreq
    MOVE.l ahibase,a6
    PushD0 `1
    PushD0 `2
    PushD0 `3
    PushD0 `4
    MOVE.l (a7)+,d2
    MOVE.l (a7)+,a2
    MOVE.l (a7)+,d1
    MOVE.l (a7)+,d0
    JSR _LVOAHI_SetFreq(a6)
End Macro

Macro AHI_GetAudioAttrs
    MOVE.l ahibase,a6
    PushD0 `1
    PushD0 `2
    PushD0 `3
    MOVE.l (a7)+,a1
    MOVE.l (a7)+,a2
    MOVE.l (a7)+,d0
    JSR _LVOAHI_GetAudioAttrsA(a6)
End Macro

;.test
;WBStartup
;optimize 4
;!initasm
;!basic
;bufaddr0=$4
;bufaddr1=$40000
;buflen=4000
;SoundHook.Hook\h_Entry=?soundfunc
;smp0.AHISampleInfo\ahisi_Type=#AHIST_S16S,bufaddr0,buflen
;smp1.AHISampleInfo\ahisi_Type=#AHIST_S16S,bufaddr1,buflen
;!openahi
;!AHI_AllocAudio Tags (@@
;                #AHIA_Channels,1,@@
;                #AHIA_SoundFunc,SoundHook,@@
;                #AHIA_Sounds,2@@
;                                 )
;actrl=PutRegD0
;!AHI_LoadSound  0,#AHIST_DYNAMICSAMPLE,smp0,actrl
;!AHI_LoadSound  1,#AHIST_DYNAMICSAMPLE,smp1,actrl
;!AHI_ControlAudio actrl,Tags(#AHIC_Play,1)
;!AHI_Play actrl,Tags (#AHIP_BeginChannel,0,@@
;                      #AHIP_Vol,$10000,@@
;                      #AHIP_Pan,$8000,@@
;                      #AHIP_Freq,31000,@@
;                      #AHIP_Sound,0,@@
;                      #AHIP_EndChannel,0@@
;                     )
;VWait 50
;!AHI_FreeAudio actrl
;End
;soundfunc
;!basica7
;If tog=0 Then tog=1 Else tog=0
;!AHI_SetSound 0,tog,0,0,actrl,0 ;unit,sample
;!asma7
;RTS
;
;
