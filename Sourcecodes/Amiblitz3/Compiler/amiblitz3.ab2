;DEBUG
;
; 3.01.33 \
; 3.01.32  |-- extracted errormessages and internal blitzlibs to separate include-files
; 3.01.31 /
;
; 3.01.30
; - changed: continued cleaning up asm code, little improvements
;
; 3.01.29
; - changed: mostly replaced PeekS() by Peek.s()
; - fixed:   some library-entries where marked as free, even if a lib with that number was loaded
;
; 3.01.28
; - changed: code for compiler constants rewritten in total
; - fixed:   return values for internal constants without zero-byte at the end
; - added:   constant __THIS_INCLUDE returns the last used include
;
; 3.00.27 internal builds without bigger changes
; 3.00.26

; 3.00.25
; - added: compiler constants: __THIS_FUNCTION, __CODELINE
;
; 3.00.24
; - ???
;
; 3.00.23
; - changed: errorfile "amiblitzerror.txt" is now stored in AB3 system-directory
; - changed: some native blitz-libs replaced with include-functions
;
; 3.00.22
; - changed: path "<blitz3:>libs" will be added to libs:-assign on startup
; - added:   IDE will be quit, if wizard.library is not available
;
; 3.00.21
; - changed: cleaned up further parts of old asm-code
; - changed: minor changes in common datastructure of PED<->Compiler
;
; 3.00.20
; - changed: writes a txt-file "userlibs_token_mapping.txt" with libname and first tokenname of each dynamic added library

; 3.00.18
; - fixed: when starting AB3 twice or more, the first instance that was closed, killed the dynamic assign
; - added: writes a txt-file "userlibs_mapping.txt" with libnum and name of dynamic added library
;
; 3.00.17
; - changed: some gui changes due to redesign of menu-structure
;
; 3.00.16
; - fixed: "optimize 3 Bug"
;
; 3.00.15
; - fixed: finally fixed problems with runerrson/runerrsoff/lastrunerrsmode combinations
;
; 3.00.14
; - changed:improved compiler errormessages
; - fixed: again problems with switching debugger on/off
;
; 3.00.13
; - fixed: problems with switching debugger on/off
;
; 3.00.12
; - new compiler constants: VER_MAJOR, VER_MINOR, VER_PATCH, VER_BUILD
;
; 3.00.11
; - further tidyups of code: complete source for old compiler settings window extracted
; - analysed xtra-fileformat for further improvements
;
; 3.00.10
; - integrated tkincludes 2.0
; - improved auto-assign-handling
;
; 3.00.09
; - window "CLI ARGUMENTS" moved to PED
; - window "compiling status" replaced with a wizard-one
; - a lot of cleanups of old code
;
; 3.00x beta
; - creates an dynamic Assign now and kills it at quit
; - some changes for new AmiBlitz3 file structure
; - compiler now searches in blitzlibs/residents/ for res-files first
; - fixed bug: startupcode replaced, OS4 related problems solved
; - additional libs will be searched in blitzlibs/userlibs/private/
;
; 2.51x beta
; - fixed bug: if defined a function with optionals parameters, and called the function without any parameters
;              these parameters got trashed values
; - fixed bug: compiler generated trashed code when using optional string parameters in functions
; - updated syntax help texts
;
; 2.50 beta
; - replaced most library offsets with corresponding library function names
; - compiler searches in includedir & in sourcedirectory for includes now
; - better compiler options dialogue


optimize 5 ;dont use fpu
Syntax 2
!initasm
!basic
XINCLUDE "dos.include.bb2"
XINCLUDE "/library_offsets.bb2"
XINCLUDE "PE/wizard_Table.include.bb2"
XINCLUDE "PE/logging.include.bb2"
optimize 5
WBStartup

If NOT dos_Exist{"LIBS:wizard.library"}
  error{"The wizard.library has not been found.\\nTo run this IDE, please install a copy of this library into libs:"}
  !asm
  !exitasm
  End
EndIf

.TOOLTYPES
; --
; -- check, if an assign-value was set via Tooltype
dynassign.s = dos_GetToolString{"ASSIGN","Blitz3:"}
If dynassign <> ""
    *AssignSema.SignalSemaphore = FindSemaphore_(&dynassign) ; does it already exist?
    If *AssignSema
      ObtainSemaphoreShared_ *AssignSema
    Else                                                      ; no, create one...
      *AssignSema = AllocVec_ (SizeOf.SignalSemaphore,#MEMF_PUBLIC|#MEMF_CLEAR)
      If *AssignSema
        InitSemaphore_ *AssignSema
        ObtainSemaphoreShared_ *AssignSema

        *AssignSema\ss_Link\ln_Name = AllocVec_(FLen(dynassign)+1,#MEMF_PUBLIC|#MEMF_CLEAR)
        If *AssignSema\ss_Link\ln_Name
          Poke.s  *AssignSema\ss_Link\ln_Name,dynassign
        End If
        *AssignSema\ss_Link\ln_Pri  = 1
        *AssignSema\ss_Link\ln_Type = #NT_SIGNALSEM

        AddSemaphore_ *AssignSema
      End If
    End If

  ; -- create our assign & config the directory variables
  mydir.s = dos_GetProgDir{""}
  Blitz3AssignWasCreated.l = dos_SetAssign{dynassign,mydir,False}
  If Blitz3AssignWasCreated
    dos_AddAssign{"LIBS:",dos_AddPart{dynassign,"Libs"}}
  EndIf

  Poke$ ?str_blitz3assign,dynassign
  Poke$ ?str_defaultdbug,dos_AddPart{dynassign,"Debug/DefaultDBug"}
  ;Poke$ ?str_defaultdbug,dos_AddPart{dynassign,"Debug/REDDebugger"}

  Poke$ ?str_path_acidlibs,dos_AddPart{dynassign, "BlitzLibs/AcidLibs"}
  Poke$ ?str_path_deflibs ,dos_AddPart{dynassign, "BlitzLibs/DefLibs" }
  Poke$ ?str_path_userlibs,dos_AddPart{dynassign, "BlitzLibs/UserLibs"}
  my_systemdir$    = dos_AddPart{dynassign, "System"}
  my_residentsdir$ = dos_AddPart{dynassign, "BlitzLibs/Residents"}
  my_blitzlibsdir$ = dos_AddPart{dynassign, "BlitzLibs"}
  dos_CreateDir{my_blitzlibsdir$}
  dos_CreateDir{Peek$(?str_path_userlibs)}
  dos_CreateDir{my_residentsdir$}
  dos_CreateDir{my_systemdir$}

EndIf

; --
; -- check, if there is an alternative PED-executable set via Tooltype
pedfile$ = dos_GetToolString{"PEDFILE",dos_AddPart{my_systemdir$,"PED"}}
Poke$ ?str_pedfile,pedfile$

If dos_GetToolState{"START_WITHOUT_LIBS"} = -1
  Poke.b ?start_without_libs,1
Else
  Poke.b ?start_without_libs,0
EndIf

; --
; -- Konstanten- und Variableninitialisierung
.DEFINITIONS
Dim incdim.s(40)
Dim incline.l(40)

#64bitconstant    = 0
#funcscan         = 0   ; if 1 functions are add at beginning
#WZ_singletable   = 1
;#newoptions       = 1   ; the new compiler option requester
#debugmacro       = 1   ; macros can debug
#more6string      = 1   ; more than 6 strings can use
#errorconstant    = 0   ; constants can not declare twice
#types64          = 1   ; types can use 64kb
#longbranch       = 1   ; if thens have no 32kb limit
#lang             = 0   ; 0=english 1=german selects program language sprache einstellen
#stopignore       = 1   ; ignore stop on release build
#debugtrap        = 0   ; only use if you want debug the trap#15 compile feature
#fpudebug         = 1   ; allow fpu code for debugger
#optibreak        = 0   ; set breakpoint on all optimzer positions
#moremem          = 40
#isfunc           = $21 ; increase if morepars than 10
#doublecheck      = $00080d64

MinByteSgnd           EQU $80
MaxByte               EQU $FF
MaxWordSgnd           EQU $7FFF
MinWordSgnd           EQU $8000
MaxWord               EQU $FFFF
MemfPublic_MemfClear  EQU $10001
_custom               EQU $DFF000
COLOR00               EQU $180
MaxIntSgnd            EQU $7FFFFFFF
HUNK_RELOC_16__MODE_OLDFILE EQU $3ED
HUNK_RELOC_8__MODE_NEWFILE  EQU $3EE
hashsize              EQU $3ff        ;$ff=256,$1ff=512,$3ff=1024,$7ff=2048,$fff=4096

; --
; -- Macro definitions
.MACROS
Macro vers
  "\\__VER_MAJOR.\\__VER_MINOR.\\__VER_PATCH"
End Macro

Macro regs2stack
  MOVEM.l d0-d7/a0-a6,-(a7)
End Macro

Macro stack2regs
  MOVEM.l (a7)+,d0-d7/a0-a6
End Macro


Macro hashalgo    ;d1 currentchar d0 hashvalue
  MULS.w #5,d0      ;important for fast hash speed
  ADD.l d1,d0
End Macro

Macro newcalc
   MOVE.l destpointer,a1
   MOVE.l #$4e754e75,(a1)+
   MOVEQ #0,d1
   MOVE.w (a0)+,d1
   CMP.l #$303c,d1           ;move.w    ;d0
   BNE 'nw1
   MOVE.w (a0)+,d0
   CMP.w #$48c0,(a0)         ;ext.l
   BNE 'nw2
   EXT.l d0
   ADDQ.l #2,a0
   BRA 'nw2
  'nw1
   CMP.l #$323c,d1           ;move.w     ;d1
   BNE 'nw1_w
   MOVE.w (a0)+,d1
   CMP.w #$48c1,(a0)         ;ext.l
   BNE 'nw2
   EXT.l d1
   ADDQ.l #2,a0
   BRA 'nw2
  'nw1_w
   CMP.l #$203c,d1    ;move.l #,d0
   BNE.s 'nw2_w          ;fault
   MOVE.l (a0)+,d0
   BRA 'nw2
  'nw2_w
; CMP.l #$243c,d1   ;move.l #,d2
; BNE 'nw2_d2
; MOVE.l (a0)+,d2
; BRA 'nw2
  'nw2_d2 CMP.l #$223c,d1    ;move.l #,d1
   BNE.s 'Fals`@          ;fault
   MOVE.l (a0)+,d1
'nw2
;CMP.w #$243c,(a0)
; BNE.s 'nod2`@       ;no d2 load
; MOVE.l 2(a0),d2
; ADDQ.l #6,a0
  'nod2`@
   CMP.w #$223c,(a0)
   BNE.s 'nod1`@       ;no d1 load
   MOVE.l 2(a0),d1
   ADDQ.l #6,a0

  'nod1`@ ;CMP.w #$d081,(a0)
;  BNE.s 'noadd_l_d1     ;no add l d1,d0
;  ADD.l d1,d0
;  ADDQ.l #2,a0
;'noadd_l_d1
   CMP.w #$d0bc,(a0)
   BNE.s 'noadd_i_d0     ;no add.l #,d0
   ADDQ.l #2,a0
   ADD.l (a0)+,d0
   BRA 'nosub_w_d2
  'noadd_i_d0
   CMP.w #$90bc,(a0)
   BNE.s 'nosub_i_d0     ;no sub.l #,d0
   ADDQ.l #2,a0
   SUB.l (a0)+,d0
   BRA 'nosub_w_d2
  'nosub_i_d0
   CMP.w #$8081,(a0)
   BNE.s 'noor_d1_d0     ;no or.l d1,d0
   ADDQ.l #2,a0
   OR.l d1,d0
   BRA 'nosub_w_d2
  'noor_d1_d0 CMP.w #$d07c,(a0)
   BNE.s 'noadd_w_d1     ;no add w #,d0
   ADDQ.l #2,a0
   ADD.w (a0)+,d0
  'noadd_w_d1 CMP.l #$4c3c0800,(a0)
   BNE.s 'nomul_l_d1      ; no mul.l #,d0
   MOVE.l d1,-(a7)
   ADDQ.l #4,a0
   MOVE.l (a0)+,d1
   MULS.l d1,d0
   MOVE.l (a7)+,d1
  'nomul_l_d1 CMP.w #$94bc,(a0)
   BNE.s 'nosub_i_d2    ;no sub l #,d2
   ADDQ.l #2,a0
   SUB.l (a0)+,d2
  'nosub_i_d2 CMP.w #$9081,(a0)
   BNE 'nosub_l_d1
   SUB.l d1,d0   ;no sub l d1,d0
   ADDQ.l #2,a0
'nosub_l_d1 ;CMP.w #$9041,(a0)
  ;bne 'nosub_w_d2
;  SUB.w d1,d0   ;no sub w d1,d0
;  ADDQ.l #2,a0
;'nosub_w_d1 CMP.w #$9282,(a0)
;  Bne 'nosub_l_d2
;  SUB.l d2,d1   ;no sub l d2,d0
;  ADDQ.l #2,a0
;'nosub_l_d2 CMP.w #$9242,(a0)
;  Bne 'nosub_w_d2
;  SUB.w d2,d1   ;no sub w d2,d1
;  ADDQ.l #2,a0
  'nosub_w_d2
   CMP.w #$4480,(a0)
   BNE.s 'noneg`@   ;no neg
   NEG.l d0
   ADDQ.l #2,a0
  'noneg`@
   CMP.w #$48c0,(a0)
   BNE 'noext
   EXT.l d0
   ADDQ.l #2,a0
  'noext
   CMP.w #$b081,(a0)       ;nocmp
   BNE 'nocmp
   ADDQ.l #2,a0
   CMP.w #$57c0,(a0)
   BNE 'se1
   CMP.l d1,d0
   SEQ d0
   BRA 'sw1
  'se1
   CMP.w #$56c0,(a0)
   BNE 'Fals`@
   CMP.l d1,d0
   SNE d0
  'sw1
   EXT.w d0
   ADDQ.l #6,a0
  'nocmp CMP.w #$4e75,(a0)   ;is last instruction
   BNE 'Fals`@
   TST.w regnum
   BNE 'Fals`@
   MOVEQ #1,d1
   BRA.s 'ok`@
  'Fals`@ MOVEA.l AL_0_A6B0(PC),A0
   MOVEQ #0,d1
  'ok`@
End Macro

Macro compare3
   TST.w D0
   BEQ.w 'lab1`@
   CMP.w #$3A,D0
   BEQ.w 'lab1`@
   CMP.w #$2C,D0
  'lab1`@
End Macro

Macro compare1
  CMP.w #$7A,D0
   BHI 'lab2`@
  CMP.w #$41,D0
   BCS 'lab2`@
  CMP.w #$61,D0
   BCC 'lab1`@
  CMP.w #$5A,D0
   BHI 'lab1`@
'lab1`@
 CMP.w D0,D0
'lab2`@
End Macro

Macro fget
  MOVEQ #0,d0
 'lab1`@
  MOVE.l a5,lastsourcepos
  MOVE.b (a5)+,d0
  TST.w instringon
  BNE 'lab2`@
  CMP.b #$20,d0
  BEQ 'lab1`@
  CMP.b #";",d0
  BNE 'lab2`@
  MOVEQ #0,d0
'lab2`@
  MOVE.w d0,lastchar
End Macro

Macro fget2
  MOVEQ #0,d0
 'lab1`@
  MOVE.l a5,lastsourcepos
  MOVE.b (a5)+,d0

  TST.w instringon
  BNE 'lab2`@
  CMP.b #$20,d0
  BEQ 'lab1`@
  CMP.b #";",d0
  BNE 'lab2`@
  MOVEQ #0,d0
 'lab2@`
  MOVE.w d0,lastchar
End Macro

Macro compare2
  CMP.w #$30,D0
   BCS.w 'lab1`@
  CMP.w #$39,D0
   BHI.w 'lab1`@
  CMP.w D0,D0
 'lab1`@
End Macro


Statement activategadget{ag$}  ;ag$ = gadget
  ActivateGadget_ WZGadAddr (ag$),WZWindowAddr,0
End Statement

Function.s Get_Libinfo{addr_libnum.l}
  ; diese Funktion holt aus der nativen lib im Speicher den ersten Tokennamen
  lib_ab2.b = False : lib_os.b = False
  addr_counter.l = addr_libnum
;  runner.l = 0
;  !cout{Hex$(addr_counter)}
  Repeat
    mem.l = Peek.l(addr_counter)
;    If (runner MOD 8 = 0) AND (runner < $80)
;        !cout{Hex$(addr_counter)+": "+Hex$(mem) + " " + Hex$(Peek.l(addr_counter + 4))+"   "+Hex$(mem LSR 16)}
;    EndIf
;    runner + 2
    addr_counter + 2
    If (mem = $0000ffff) Then lib_ab2= True : skip = 8
    If (mem LSR 16) = $ffe2
;      !cout{"found."}
      lib_os = True
      skip = 10
      If Peek$(addr_counter+skip) = "" Then skip + 4
    EndIf
  Until (lib_ab2=True OR lib_os = True) OR (addr_counter>addr_libnum + $400)
  ;!cout{Hex$(addr_libnum),Peek$(addr_counter + skip),Peek$(addr_counter + skip+1),Peek$(addr_counter + skip+2)   }
  If (addr_counter>addr_libnum + $400)
;    !cout{"error"}
    Function Return ""
  Else
    Function Return Peek$(addr_counter + skip)
  EndIf
End Function



;d2 mode  1=byte 2 =word 3=long 4=quick 5=float  bit 15 newtype
;a3=current instruction struct
;34(a3)=Instruction Token

;SECTION "Segment0",CODE
;cnop 0,4
       ;labelbase   $0
                   ; $4 mode 0 = label 1 = constant
                   ; $8 addr/label value/constant
                   ; $c nexthash
                   ; $12 Bytecount
                   ; $13 name

       ;templabel   ; $0 next
                    ; $4 addr in code
                    ; $8 = resultmode 5 = word
                    ; $a
                    ; $e templabelsize
                    ; $10 addr in source or short string
       ;variable    ;$0
                    ;$4 offset of a5
                    ;$8 size
                    ;$a type addr add+4 for findvariable2 to find offset for Newtype
      ;typestruct
      ;             ;$4 * to typeitemlist
                    ;$8 size of newtype
      ;typeitemlist
                    ;$0 * nexttypeentry
                    ;$4.w Offset
                    ;$6
                    ;$8
                    ;$a addr to variable
                    ;$e name

; ------------------------------------------ BEGIN OF MAINPROGRAM -------------------------------
.MAINPROGRAM
  !asm
  MOVEA.l _execbase,A6
  MOVEM.l d0/a0,-(a7)

  MOVEQ #127,d0
  LEA chartab,a0
 'l12
    MOVE.b #1,128(a0)
    CLR.b (a0)+
  DBF d0,'l12

  LEA chartab,a0
  MOVE.b #1,(a0)
  MOVE.b #1,","(a0)
  MOVE.b #1,";"(a0)
  MOVE.b #1,":"(a0)
  MOVE.b #1,"("(a0)
  MOVE.b #1,")"(a0)
  MOVE.b #1,"="(a0)
  MOVE.b #1,"+"(a0)
  MOVE.b #1,"-"(a0)
  MOVE.b #1,"*"(a0)
  MOVE.b #1,"/"(a0)
  MOVE.b #1,"$"(a0)
  MOVE.b #1,"%"(a0)
  MOVE.b #1,"."(a0)
  MOVE.b #1,"["(a0)
  MOVE.b #1,"]"(a0)
  MOVE.b #1,"{"(a0)
  MOVE.b #1,"}"(a0)
  MOVE.b #1,"\"(a0)
  MOVE.b #1,">"(a0)
  MOVE.b #1,"<"(a0)
  MOVE.b #1,"&"(a0)
  MOVE.b #1,"|"(a0)
  MOVE.b #1,"^"(a0)
  MOVE.b #1,$7e(a0)
  MOVE.w #$0101,1(a0)

  LEA instrtab,a0
  MOVE.l #labelhash-instrtab,d0
  ASR.l #2,d0
  SUBQ.l #1,d0
 'l10
   CLR.l (a0)+
   SUBQ.l #1,d0
  BNE 'l10

  LEA allowtab,a0
  MOVE.l #255,d0
 'la1
    CLR.b (a0)+
  DBF d0,'la1

  LEA allowtab,a0
  MOVE.b #1,$7d(a0)
  MOVE.b #1,$7c(a0)
  MOVE.b #1,$44(a0)
  MOVE.b #1,$45(a0)
  MOVE.b #1,$b9(a0)
  MOVE.b #1,$89(a0)
  MOVE.b #1,$ce(a0)
  MOVE.b #1,$cf(a0)
  MOVE.b #1,$d0(a0)
  MOVE.b #1,$cd(a0)
  MOVEQ #0,d0

  MOVEA.l _execbase,a6
  ;LEA _intuiname,a1
  ;JSR _OpenLibrary(a6)            ; open intuition.library
  ;MOVE.l d0,_intuibase

  MOVE.l #$10000,d0
  MOVE.l #80000,d1
  MOVE.l d1,d2
  JSR _CreatePool(a6)             ; alloc memory for own stuff
  MOVE.l d0,mempool
  MOVEM.l (a7)+,d0/a0
  TST.l mempool
  BEQ shutdown_compiler

  MOVEA.l $114(A6),A4             ; get adress of this.Task-Structure
  MOVE.l A4,ptr_ThisTask

  !basic
  ; -- get the CLI args ...
  get_filename.s = dos_GetNextArg{}
  If get_filename <> ""
    Poke$ ?str_tempfilename,get_filename
  EndIf
  !asm
  BSR.w open_doslibrary
  BEQ.w shutdown_compiler

  MOVE.l D2,stacksize

  ; --
  ; -- get the last token
  MOVEQ.l #$00,D0
  LEA tokens,A0
  JL_0_2D0E:
    ADDQ.w #1,D0
    MOVE.l (A0),D1
    BEQ.w JL_0_2D1C
    MOVEA.l D1,A0
  BRA.w JL_0_2D0E
  JL_0_2D1C:
  MOVE.l A0,end_of_tokenlist

  BSR.w makeasmtable
  MOVE.w #$FFFF,AL_0_2B42

  BSR.w open_mathlibrary
  BEQ.w freemem_and_quit4

  MOVE.l AL_0_E33E,D0
  MOVEQ.l #$02,D1              ;chipmem
  JSR _AllocMem(A6)            ;mem for branch routine
  MOVE.l D0,AL_0_E336
  BEQ.w freemem_and_quit3
  ADD.l AL_0_E33E,D0
  MOVE.l D0,AL_0_E33A

  MOVE.l macrobuffer_size,D0
  CMP.l #40000,d0
  BGE 'ok
    MOVE.l #40000,d0
    MOVE.l d0,macrobuffer_size
 'ok
  ADDQ.l #4,d0
  MOVEQ.l #$01,D1
  JSR _AllocMem(A6)            ;macro mem
  MOVE.l d0,a0
  MOVE.l macrobuffer_size,(a0)+
  MOVE.l a0,d0
  MOVE.l D0,ptr_macrobuffer_begin
  BEQ.w freemem_and_quit2
  ADD.l macrobuffer_size,D0
  MOVE.l D0,ptr_macrobuffer_end

  ; --
  ; -- load_PED
  MOVE.l #str_pedfile,D1            ; Load PED
  MOVEA.l _dosbase,A6
  JSR _LoadSeg(A6)
  MOVE.l D0,ptr_seg_ped
  BEQ.w freemem_and_quit

  ; --
  ; -- calulate entryaddress for starting segment
  MOVEA.l D0,A2
  ADDA.l A2,A2
  ADDA.l A2,A2
  ; -- start_PED
  LEA teddata,a1                  ;lea AL_0_85E,A1
  MOVE.l #"TEDY",d1
  JSR 4(A2)                        ; Run PED

  MOVE.l A0,ped_startup_addr       ; PED returns address of routine "startup_code"
  MOVE.l A1,comdata                ; PED returns address of comdata-area in A1
  MOVE.w $7b2(a1),d0               ; if PED_IsAvailable=0, quit AmiBlitz
  BEQ.w unload_ped

  ; --
  ; -- extent_comdatas:
  MOVE.l #AJL_0_50E0,$7e2(a1)
  MOVE.l #directbuffer,$7e6(a1)      ;addr of directbuffer
  MOVE.l #macrobase,$7ea(a1)
  MOVE.l #varbase,$7f2(a1)
  MOVE.l #instrtab,$7F6(a1)
  MOVE.l #libpointer,$7FA(a1)
  MOVE.l #myversion,$7FE(a1)
  MOVE.l #versioninformation,$80E(A1)
  MOVE.l #number_of_builds,$812(A1)

  CLR.w AL_0_2B42
;  MOVE.l $2C(A1),_intuibase        ; intuibase of PED

  ; --
  ; -- load all acidlibs, deflibs and userlibs
  TST.b start_without_libs
  BNE skip_loading_libs
    BSR.w call_setpointerbusy
    MOVE.l #$FFFFffff,AL_0_E9E8
    BSR.w get_libraries
    BSR.w init_libraries
    BSR.w init_buffers
    BSR.w call_setpointernormal
  skip_loading_libs:

  ; --
  ; --
  MOVEQ.l #-$01,D0
  MOVEA.l _execbase,A6
  JSR _AllocSignal(A6)
  MOVE.l D0,signalNum
  MOVEQ.l #$00,D1
  BSET D0,D1
  MOVE.l D1,signals

  ; --
  ; -- load_debugger:
  MOVE.l #str_defaultdbug,D1
  MOVEA.l _dosbase(PC),A6
  JSR _LoadSeg(A6)
  MOVE.l D0,ptr_seg_debugger
  TST.l d0
  BNE ok_12
    !basic
    error{"The Debugexecutor `Defaultdbug` was not found.\\nDebugging is not possible."}
    !asm
  ok_12:

  ; -- jump to the address ped returned before and pass a sourcename in A0
  MOVEA.l ped_startup_addr,A1
  LEA str_tempfilename,A0
  JSR (A1)
  ; --
  ; -- PED has been quit now ...
  ; --

  MOVE.l signalNum,D0
  MOVEA.l _execbase,A6
  JSR _FreeSignal(A6)

  MOVE.l ptr_seg_debugger,D1
  BEQ.b skip_unload_debugger
    MOVEA.l _dosbase(PC),A6
    JSR _UnLoadSeg(A6)
  skip_unload_debugger:

  BSR.w Aclearallvars
  BSR.w free_residents
  BSR.w free_blitzlibs

  unload_ped:
  MOVE.l ptr_seg_ped,D1
  MOVEA.l _dosbase(PC),A6
  JSR _UnLoadSeg(A6)

  freemem_and_quit:
  BSR.w JL_0_52F6
  MOVEA.l ptr_macrobuffer_begin,A1
  MOVE.l -(a1),D0
  ADDQ.l #4,d0
  MOVEA.l _execbase,A6
  JSR _FreeMem(A6)

  freemem_and_quit2:
  MOVEA.l _dosbase,A1
  MOVEA.l _execbase,A6
  JSR _CloseLibrary(A6)

  MOVEA.l AL_0_E336,A1
  MOVE.l AL_0_E33E,D0
  MOVEA.l _execbase,A6
  JSR _FreeMem(A6)

  freemem_and_quit3:
  MOVEA.l _mathffpbase,A1
  MOVEA.l _execbase,A6
  JSR _CloseLibrary(A6)

  freemem_and_quit4:
  ;MOVE.w AL_0_2B42,D0
  ;EXT.l D0
  ;BRA shutdown_compiler

  shutdown_compiler:
  MOVE.l ptr_wbmessage,D0
  BEQ.w JL_0_12A
    MOVEA.l _execbase,A6
    MOVE.l mempool,a0
    JSR _DeletePool(a6)
    CLR.l AL_0_B5B8
    JSR _Forbid(A6)
    MOVEA.l ptr_wbmessage,A1
    JSR _ReplyMsg(A6)
  JL_0_12A:

  JSR free_unusedfunctions
  MOVEQ #0,d0
  !exitasm
  If dynassign<>""
    error {"Check for pending assign!"}
    If *AssignSema
      error {"Release sema...!"}
      ReleaseSemaphore_ *AssignSema
      error {"attempt sema!"}
      If (AttemptSemaphore_ (*AssignSema)) ; we are the exclusive owner of the sema now!
        error {"remassign!"}
        dos_RemAssign{dynassign} ; what about the Libs: Assign !?
        RemSemaphore_ *AssignSema
        ReleaseSemaphore_ *AssignSema
        If *AssignSema\ss_Link\ln_Name Then FreeVec_ *AssignSema\ss_Link\ln_Name : *AssignSema\ss_Link\ln_Name = !_NULL
        FreeVec_ *AssignSema
        *AssingSema = !_NULL
      End If
    End If
  EndIf
  !coutclose
End
; ------------------------------------------ END OF MAINPORGRAM --------------------------------




ptr_wbmessage:      Ds.l 1
str_doslibrary:     Dc.b "dos.library",0
_dosbase:           Ds.l 1
.open_doslibrary:
  MOVEA.l _execbase,A6
  LEA str_doslibrary,A1
  JSR _OldOpenLibrary(A6)
  MOVE.l D0,_dosbase
RTS

.open_mathlibrary:
  MOVEA.l #str_mathffpname,A1
  MOVEA.l _execbase,A6
  JSR _OldOpenLibrary(A6)
  MOVE.l D0,_mathffpbase
RTS


.call_setpointernormal:
  MOVEA.l comdata,A0
  MOVEA.l $48(A0),A0
  L_0_2EFE:
JMP (A0)

.call_setpointerbusy:
  MOVEA.l comdata,A0
  MOVEA.l $4C(A0),A0
  L_0_2F0A:
JMP (A0)

.call_menuentry:          ; D6: menuitem
  MOVE.l A5,AL_0_2B3C
  MOVE.w D7,AL_0_2B40
  MOVE.l d7,numlines
  LSL.w #2,D6
  LEA menu_items,A0
  MOVEA.l $0(A0,D6.W),A0
  MOVE.l #$FFFFffff,AL_0_E9E8
  MOVE.l #$FFFFffff,compilelinecounter
  L_0_2F34:
  JSR (A0)
  MOVE.l compilelinecounter,D0
RTS

mempool Dc.l 0
str_loaddebugmessage:  Dc.b "Debug module to load",0,0
JL_0_314A:             JSR handle_compileerror
                       Dc.b "Can't LoadSeg debug module!",0
.menu_loaddebugmodule:
  MOVEA.l comdata,A3
  MOVEA.l $18(A3),A3              ; asl filerequest
  LEA str_loaddebugmessage,A2
  LEA str_blitz3assign,A0
  LEA str_temp_debugmodulename,A1
  L_0_30FC:
  JSR (A3)

  BEQ.w AJL_0_3148
  MOVE.l D0,ptr_temp_debugmodule
  BSR.w call_setpointerbusy
  MOVE.l A7,AL_0_2B18
  MOVE.l #AJL_0_3148,AL_0_2B1C
  MOVE.l ptr_temp_debugmodule,D1

  MOVEA.l _dosbase(PC),A6
  JSR _LoadSeg(A6)
  MOVE.l D0,D7
  BEQ.w JL_0_314A
  MOVE.l ptr_seg_debugger,D1
  BEQ.b JL_0_3142
  MOVEA.l _dosbase(PC),A6
  JSR _UnLoadSeg(A6)
  BSR.w call_setpointernormal

  JL_0_3142:
  MOVE.l D7,ptr_seg_debugger

  AJL_0_3148:
RTS


str_request_exename:   Dc.b "Name of Executable to create",0,0
exepath:               Ds.l 48
exefilename:           Ds.l 48
ptr_newexefilename:    Ds.l 1
.menu_newcreate
  LEA exepath,a0
  LEA exefilename,a1
  TST.b (a1)
  BEQ menu_createexecutable
  LEA tempspace,a1
  'l10
  MOVE.b (a0)+,(a1)+
  BNE 'l10
  SUBQ.l #1,a1
  CMP.b #":",-1(a1)
  BEQ 'lw1
  MOVE.b #"/",(a1)+
  'lw1
  LEA exefilename,a0
  'l20
  MOVE.b (a0)+,(a1)+
  BNE 'l20
  LEA tempspace,a0
  MOVE.l a0,d0
BRA newcreate2

.menu_createexecutable:
  MOVEA.l comdata,A3
  MOVEA.l $18(A3),A3
  LEA str_request_exename,A2
  LEA exepath,A0
  LEA exefilename,A1
  L_0_332A:
  JSR (A3)                          ;open ped filerequest
  BEQ.w cancel_createexe

  newcreate2:
  ADD.l #1,number_of_builds
  MOVE.l D0,ptr_newexefilename
  MOVE.w #$FFFF,debugversion
  MOVE.w set_make_smallestcode,-(A7)
  ;bset #$7,make_smallestcode       ;set optimize for create file

 'l1
    MOVE.w #1,makeexec
    BSR.w startcompile
    CMP.l #"NORE",reqmode
  BEQ 'l1

  TST.w AL_0_E84C
  BNE.b JL_0_335C
  BSR.w savefile
  JL_0_335C:
  MOVE.w (A7)+,set_make_smallestcode
  cancel_createexe:
RTS

.do_CloseEd:
  MOVE.w #$FFFF,flag_noPED
RTS

.do_NoCli:
  MOVE.w #$FFFF,flag_noCLI
RTS

flag_noPED:  Ds.w 1
flag_noCLI:  Ds.w 1

Aclearcache:
  MOVEM.l D0-D1/A0-A1/A6,-(A7)
  MOVEA.l _execbase,A6
  JSR _CacheClearU(A6)
  MOVEM.l (A7)+,D0-D1/A0-A1/A6
RTS

;Aclearcache2:  MOVEM.l D0-D1/A0-A1/A6,-(A7)
; movea.l _execbase,A6
; MOVE    $128(A6),D0
; BTST    #3,D0
; BRA.S   'l10
;; MOVE.l a0,-(a7)
;; JSR     -$96(A6)
;; JSR     -$78(A6)
;; MOVEA.L (A7)+,A1
;; CPUSHL  Dc,(A1)
;; cinvl   ic,(a1)
;; ADDA #16,a1
;; CPUSHL  Dc,(A1)
;; cinvl   ic,(a1)
;; ADDA #16,a1
;; CPUSHL  Dc,(A1)
;; cinvl   ic,(a1)
;; ADDA #16,a1
;; CPUSHL  Dc,(A1)
;; cinvl   ic,(a1)
;; ADDA #16,a1
;; CPUSHL  Dc,(A1)
;; cinvl   ic,(a1)
;; ADDA #16,a1
;; CPUSHL  Dc,(A1)
;; cinvl   ic,(a1)
;; JSR     -$7E(A6)
;; JSR     -$9C(A6)
;; BRA 'l20
;'l10
;       movea.l _execbase,A6
;   JSR CacheClearU(A6)
;'l20  MOVEM.l (A7)+,D0-D1/A0-A1/A6
; RTS

.menu_compile_run:
  ADD.l #1,number_of_builds

  CLR.w debugversion
  CLR.w flag_noPED
  CLR.w flag_noCLI
 'l1
    MOVE.w #0,makeexec                     ;MOVE.w #$FFFF,debugversion
    BSR.w startcompile
    CMP.l #"NORE",reqmode
  BEQ 'l1

  .menu_run:
  TST.w AL_0_E84C
   BNE.w JL_0_3482

  MOVE.w flag_noPED(PC),D1
   BEQ.w skip_closingGUI
  MOVEA.l comdata,A0
  MOVEA.l -$8(A0),A0
  L_0_33C8:
  JSR (A0)
  BRA.b JL_0_33D4
  skip_closingGUI:

  ;LEA str_executing(PC),A0
  BSR.w compilerequester

  JL_0_33D4:
  MOVEA.l _dosbase,A6
  LEA exepath,a0
  MOVE.l a0,d1
  MOVEQ #-2,d2
  JSR _Lock(a6) ;lock
  MOVE.l d0,exelock
  MOVE.l #0,d1
  JSR _CurrentDir(A6)
  MOVE.l D0,lock_currentdir
  MOVE.l D0,D1
  JSR _CurrentDir(A6)
  CLR.l ptr_exetask
  MOVE.l #str_process_name,D1
  MOVEQ.l #$00,D2
  MOVE.l #proc_seglist,D3
  LSR.l #2,D3
  MOVE.l stacksize,D4
  MOVEA.l _dosbase,A6
  JSR _CreateProc(A6)             ;runtask
  TST.l D0
   BEQ JL_0_344E

  TST.w flag_noPED
   BNE.b JL_0_344E
  BSR.w close_compilewin

  JL_0_344E:
  CLR.l firstlocal
  CLR.l firstglob
  MOVE.w flag_noPED(PC),D1
  BEQ.w skip_openGUI
  MOVEA.l comdata,A0
  MOVEA.l -$4(A0),A0        ; create_whole_gui in PED
  JSR (A0)
  skip_openGUI:

;  MOVEA.l comdata,A0
;  MOVEA.l $50(A0),A0
;  MOVEA.l _intuibase,A6
;JMP _ActivateWindow(A6)
  JL_0_3482:
RTS

lock_currentdir:  Ds.l 1
ptr_exetask:  Ds.l 1
signalNum:  Ds.l 1
signals:  Ds.l 1
str_process_name:  Dc.b "Blitz ][ Program Proc",0,0
Ds.b 5
Even4

ptr_ThisTask:       Ds.l 1
.proc_seglist:
  Ds.l 1
  MOVEA.l $4,A0
  MOVE.l  $114(A0),ptr_exetask
  MOVEA.l _dosbase,A6
  MOVE.l exelock,D1
  JSR _CurrentDir(A6)

  ; -- set the running flag for IDE
  MOVEA.l comdata,A0
  MOVE.b #1,$1ea(a0)

  ; -- optionally open the console
  MOVE.w flag_noCLI(PC),D1
   BNE.b skip_openconsole
  MOVEA.l comdata,A0
  MOVEA.l $3C(A0),A0                 ; WBtoFront  etc.
  JSR (A0)
  skip_openconsole:

  BSR.w calcvbr
  MOVEA.l AL_0_E32A,A0
  ;MOVE.l $84(a0),lasttrap1            ;activate for 68k low level trap
  ;MOVE.l #tokens,$84(A0)            ;set trap vectors  1
  ;MOVE.l newtype_string,$88(A0)          ;2 activate for 68k low level trap
  ;MOVE.l #AJL_0_50E0,$BC(A0)        ;15 for expression calculation
  CLR.w dirmode
  CLR.l firstglob
  CLR.l firstlocal
  ;MOVE.l destpointer,directbuffer      ;direct buffer
  MOVE.l stacksize,D2
  MOVE.l #$624C745A,D7
  LEA str_cliarguments,A0
  MOVEA.l destbufferstart,A1
  BSR.w Aclearcache
  L_0_353A:   JSR (A1)              ; execute compiled code

  MOVEA.l AL_0_E32A,A0
  ;MOVE.l lasttrap1,$84(a0)
  CLR.l firstglob
  CLR.l firstlocal
  MOVEA.l _dosbase,A6
  MOVE.l exelock,d1
  BEQ 'nolock
  JSR _UnLock(a6)
  'nolock
  MOVEA.l comdata,A0
  MOVE.b #0,$1ea(a0)                ; clear running flag

  ; -- optionally close the console and bring ide to front
  MOVE.w flag_noCLI(PC),D1
   BNE.b skip_closeconsole
  MOVEA.l comdata,A0
  MOVEA.l $40(A0),A0                ; close the console window and bring IDE to front
  JSR (A0)
  skip_closeconsole:

  MOVE.w #$0001,AL_0_3EDA
  MOVE.l signals(PC),D0
  MOVEA.l ptr_ThisTask,A1
  MOVEA.l _execbase,A6
  JSR _Signal(A6)
RTS


.calcvbr:
  MOVEA.l _execbase,A6
  MOVE.w $128(A6),D0
  MOVEQ.l #$00,D1
  ANDI.w #$F,D0
  JL_0_3578:
    BEQ.b JL_0_3580
    ADDQ.w #1,D1
    LSR.w #1,D0
  BRA.b JL_0_3578

  JL_0_3580:
  MOVEQ.l #$00,D2
  CMP.w #$2,D1
   BCS.b JL_0_3594
  JSR _SuperState(A6)
  Dc.l $4E7A2801;movec vbr,D2
  JSR _UserState(A6)

  JL_0_3594:
  MOVE.l D2,AL_0_E32A
RTS


.menu_reloadlibs:
  LEA instrtab,a0
  MOVE.l #labelhash-instrtab,d0
  ASR.l #2,d0
  SUBQ.l #1,d0
  'l10 CLR.l (a0)+
  SUBQ.l #1,d0
  BNE 'l10
  BSR.w call_setpointerbusy
  BSR.w free_userlibs
  BSR.w scan_for_userlibs
  BSR.w JL_0_7082
BRA.w call_setpointernormal


.get_libraries:
  ; --
  ; -- get size of acidlibs/deflibs
  !basic
  Poke.l ?size_acidlibs, dos_GetFileSize{Peek$(?str_path_acidlibs)}

  If Peek$(Peek.l(?deflib))<>""
    Poke.l ?size_deflibs, dos_GetFileSize{Peek$(Peek.l(?deflib))}
  Else
    Poke.l ?size_deflibs, dos_GetFileSize{Peek$(?str_path_deflibs)}
  EndIf
  !asm

  scan_for_userlibs:
  ; --
  ; -- search for the userlibs-path
  MOVE.l #str_path_userlibs,D1
  MOVEQ.l #-$02,D2
  MOVEA.l _dosbase,A6
  JSR _Lock(A6)
  MOVE.l D0,D7
   BEQ.w exit_get_libraries
  MOVE.l D7,D1
  MOVE.l #ptr_parameterstore,D2
  JSR _Examine(A6)
  TST.l D0
  BEQ.w unlock_and_exit_get_libraries
  MOVE.l fib_DirEntryType,D0
  BMI.w unlock_and_exit_get_libraries

  ; --
  ; -- hier wird rekursiv in str_path_userlibs nach libs gesucht ...
  scan_libsdrawer:
    MOVE.l D7,D1
    MOVE.l #ptr_parameterstore,D2
    JSR _ExNext(A6)
    TST.l D0
     BEQ.w exit_scan_libsdrawer     ; kein weiteres File

    MOVE.l fib_DirEntryType,D0      ; positive for directoies, negative for files
    BPL.w scan_libsdrawer           ; skip directories

    LEA fib_FileName,A0             ; pruefen ob infofile
    BSR.w check_for_infoextention
    BEQ.w scan_libsdrawer

    MOVEA.l _execbase,A6            ; allocate $26 = 38 bytes fuer listeneintrag
    MOVEQ.l #$26,D0
    MOVEQ.l #$01,D1
    MOVE.l mempool,a0
    JSR _AllocPooled(a6)
    ;jsr AJL_0_4B6C
    MOVEA.l _dosbase,A6
    MOVE.l D0,D6                    ; sichere speicheradresse in D6


    LEA ptr_userlibs_list,A0        ; pruefe liste
    JL_0_36D6:
    MOVE.l (A0),D5
     BEQ.w JL_0_3722                ; kein pointer da? kann springe weiter
    MOVEA.l D5,A2
    ADDQ.w #6,A2                    ; 6 bytes weiter gehen, um dateinamen zu speichern


    LEA fib_FileName,A1             ; vergleich, ob Dateiname schon in der liste ist
    JL_0_36E6:
      MOVEQ.l #$00,D0
      MOVE.b (A1)+,D0
       BEQ.w JL_0_3722              ; dateiname komplett, dann weiter
      MOVEQ.l #$00,D1
      MOVE.b (A2)+,D1
       BEQ.w JL_0_371C
      !compare1;bsr.w JL_0_8B92
      BNE.w JL_0_3702
      ANDI.w #$DF,D0
      JL_0_3702:
      EXG.l D0,D1
      !compare1;bsr.w JL_0_8B92
      BNE.w JL_0_3710
      ANDI.w #$DF,D0
      JL_0_3710:
      EXG.l D0,D1
      CMP.b D1,D0
    BEQ.w JL_0_36E6
    BCS.w JL_0_3722

    JL_0_371C:
    MOVEA.l D5,A0
    BRA.w JL_0_36D6

    JL_0_3722:
    MOVEA.l D6,A1               ; hier war die adresse des allokierten Speicers drin
    MOVE.l (A0),(A1)
    MOVE.l A1,(A0)
    ADDQ.w #4,A1                ; pointer zum naechsten namen ueberspringen
    MOVE.w #$FFFF,(A1)+         ; $FFFF schreiben
    MOVEA.l #fib_FileName,A0    ; dateinamen in die liste kopieren
    JL_0_3734:
      MOVE.b (A0)+,(A1)+
    BNE.w JL_0_3734
  BRA.w scan_libsdrawer

  exit_scan_libsdrawer:
  MOVE.l D7,D1
  JSR _UnLock(A6)
  MOVEQ.l #-$01,D0

  exit_get_libraries:
  RTS

  unlock_and_exit_get_libraries:
  MOVE.l D7,D1
  JSR _UnLock(A6)
  MOVEQ.l #$00,D0
RTS

.free_userlib:
  MOVEA.l _execbase,A6
  MOVEA.l ptr_userlibs_list,A2
  CLR.l ptr_userlibs_list
  loop_free_userlib:
    CMPA.w #$0,A2
    BEQ.w exit_free_userlib
      MOVEA.l A2,A1
      MOVEQ.l #$26,D0
      MOVEA.l (A2),A2
      MOVE.l mempool,a0
      JSR _FreePooled(A6)
  BRA.w loop_free_userlib
  exit_free_userlib:
RTS









pass: Dc.w 0
.startcompile
  MOVE.l A7,AL_0_2B18       ;startcompile
        ;tst.l mempool2
        ;beq 'l10
        ;move.l $4,a6
        ;move.l mempool2,a0
        ;clr.l mempool2
  ;jsr -$2be(a6)
;.10
  CLR.l reqmode
  MOVE.l #Aclearallvars,AL_0_2B1C
  MOVE.l #AL_0_E95C,AL_0_E99C
;  MOVEA.l comdata,A0
;  MOVEA.l $50(A0),A0
  ;MOVE.w $8(A0),D0       ;width for progress
  MOVE.w #1450,D0
  LSR.w #3,D0
  SUBQ.w #7,D0                 ; 173
  MOVE.w D0,progressbar_width
  SWAP D0
  CLR.w D0
  MOVE.l numlines,d1
  DIVU.l d1,d0                    ; progressbar_width / numlines

  TST.w D0
  BNE.w JL_0_37C0
  MOVEQ.l #-$01,D0
  JL_0_37C0:

  MOVE.w D0,progress_per_line
;  MOVEA.l comdata,A0
;  MOVE.w $5C(A0),D0              ; screenwidth * 2
;  MOVE.w D0,screenwidth_lsl1
;  MULU #$9,D0
;  MOVE.w D0,screenwidth_lsl1_mul9

  ; check if debugger is on
  BTST #$7,use_debugger
;  SNE debugmode
  BNE 'debugon
  CLR.w debugmode
  BRA.b 'debugoff
 'debugon
  SNE debugmode
 'debugoff
;!basic
;logging_peekw{?debugmode}
;!asm
  MOVEA.l comdata,A0
  MOVE.b debugmode,$7ee(a0)


  CLR.w dirmode
  CLR.w AL_0_8AFE
  CLR.l currentfunction
  CLR.w AL_0_E948
  CLR.w varmode
  CLR.w proceduremode
  CLR.w ininclude
  CLR.w AL_0_50D2
  CLR.w pass
  CLR.l funcscanon

  JL_0_3824:
  CNIF #funcscan                ; scan, welche funktionen verwendet werden
    MOVE.l #1,funcscanon
    BSR compileall
  CEND

  CLR.l funcscanon
  BSR.w compileall

  MOVE.w dontwrite,d0
  CMP.w #1,d0
  BNE 'l3
  CLR.w dontwrite
  BSR compileall               ;if a function is not found
  'l3

  JL_0_3832:
  TST.b funcoptimize
   ;BEQ 'out
  LEA firstproc,a0
  CLR.l savefuncspace
  MOVE.l (a0),d0
.'funcskiplist
 'lr1
    MOVE.l d0,a0
    BEQ 'out
    TST.b isfunc(a0)
    BNE 'nex
    MOVEM.l d2/a6/a0,-(a7)
    MOVE.l $4,a6
    MOVEQ #0,d0
    MOVE.b $21+16-1(a0),d0
    SUB.w #$21+16,d0
    ADD.w #16,d0
    MOVE.l #$10000,d1
    MOVE.l d0,d2
    JSR -$c6(a6)
    MOVE.l d0,a1
    MOVE.l d2,4(a1)
    MOVE.l unusedfunc,(a1)
    MOVE.l d0,unusedfunc
    MOVEM.l (a7)+,a6/a0/d2
    MOVE.l isfunc+1(a0),d0
    ADDQ.l #6,d0
    ADD.l d0,savefuncspace
   'l1f
    MOVE.l d0,8(a1)
    LEA 12(a1),a1
    MOVE.l a0,-(a7)
    LEA $20+16(a0),a0
   'l1
      MOVE.b (a0)+,(a1)+
    BNE 'l1
    MOVE.l (a7)+,a0
   'nex
    MOVE.l (a0),d0
  BRA 'lr1

 'out
  BTST #$7,make_smallestcode
  BEQ.b JL_0_3844             ;optimize for executable
  CLR.l morememadd
  again
  BSR.w JL_0_52AA
  BEQ.w JL_0_388A
  ADDQ.w #1,pass
  BSR.w compileall

  JL_0_3844:
  MOVE.w dontwrite,D1
  BEQ.w JL_0_38A2
  ;MOVEA.l #comreq_datas,A0
  ;MOVEA.l comdata,A1
  ;MOVEA.l (A1),A1
  L_0_385C:   ;JSR (A1)
  JL_0_385E:  ;MOVEA.l comdata,A1
  ;MOVEA.l $8(A1),A1
  L_0_3868:   ;JSR (A1)             ;compile requester more mem
  ;CMP.w #-$1,D7
   ;BNE.w JL_0_385E
  ;CMP.w #$1,D6
   ;ADD.l #20000,morememadd
   ;ADD.l #500000,libsbuffer
  BRA.w JL_0_3896
   ;BRA.w JL_0_3824
  ;CMP.w #$2,D6
   ;MOVE.l #30000,morememadd
   ;ADD.l #5000,libsbuffer
   ;BRA.w again
  ;CMP.w #$3,D6
   ;BNE.w JL_0_385E
  JL_0_388A:
  MOVE.w #$FFFF,AL_0_E84C
  BRA.w JL_0_38A2

  JL_0_3896:
  BSR.w JL_0_526E    ;increase all by 50%
  BEQ.w Aclearallvars
BRA.w JL_0_3824


JL_0_38A2:
         ;move.l $4,a6
    ;move.l mempool2,d0
        ;beq 'l10
        ;move.l d0,a0
  ;jsr -$2be(a6)
        ;clr.l mempool2
;'l10:
  BRA.w JL_0_38A6

.JL_0_38A6:
  JSR AJL_0_CCFE
  JSR AJL_0_CD0A
  JSR AJL_0_6DF2
  JSR AJL_0_8DB8
  JSR AJL_0_3928
  JSR AJL_0_C188
  JSR AJL_0_C15C
  JSR AJL_0_D9BC
; 'l10:
JMP cleartemplabel

mempool2: Dc.l 0
.Aclearallvars:     ;called from ped every filechange
  JSR Aclearcache

  BTST #$7,use_debugger
;  SNE debugmode
  BNE 'debugon
  CLR.w debugmode
  BRA.b 'debugoff
 'debugon
  SNE debugmode
 'debugoff

  MOVE.l comdata,a0
  MOVE.b debugmode,$7ee(a0)

  LEA regtable,a0
  MOVEQ #10,d0
 'l1
    CLR.l (a0)+
  DBF d0,'l1
  LEA includetemp2,a0
  CLR.b (a0)
  MOVE.l #7,maxregs
  CLR.w debugnest
  CLR.b funcparloop
  CLR.b nostringopt
  CLR.b firsttime
  CLR.l lastdestpointer
  CLR.l lastwritedat
  CLR.l prevwritedat
  CLR.l includeline
  CLR.b incnif
  CLR.b formode
  CLR.b funccall
  CLR.w objectcount
  CLR.b resdisable
  CLR.b developobject
  CLR.b optistring
  CLR.b optistring2
  CLR.b optiarray
  CLR.b quickadd
  CLR.w newmode
  CLR.w mode
  CLR.w string1
  CLR.b fastfunc
  CLR.w load_var_size
  CLR.w load_var_reg
  CLR.l load_var_addr
  CLR.w imm_size
  CLR.w imm_reg
  CLR.l imm_addr
  CLR.b _dcb
  CLR.l nohunkoffset
  CLR.b peekaddrsize
  CLR.b typecheck
  CLR.b declare2
  CLR.b declare
  CLR.l AL_0_E950       ;check
  CLR.l AL_0_E954       ;check
  CLR.b newvariable
  CLR.b saved0
  CLR.l bsssize
  CLR.l chipsize
  CLR.b infunctioncode
  MOVE.l #-1,bssstart
  MOVE.l #-1,bssend
  MOVE.l #-1,chipstart
  MOVE.l #-1,chipend
  MOVE.w #0,bssmode
  CLR.w a2offset
  CLR.w fast
  CLR.w fpu
  CLR.b iee
  CLR.w newsyntax
  BSR.w JL_0_38A6
  JSR AJL_0_7962
  JSR AJL_0_3918
  JSR AJL_0_390A
  JSR AJL_0_73C0
  JSR clearfunctionlist
  TST.w pass
  ;bne AJL_0_8D16
  JSR clearlabels
  JSR clearhash
 'l2a
  LEA devo,a0
  MOVEM.l a0-a6/d0-d7,-(a7)
  LEA ptr_parameterstore,a1
 'l1b
    MOVE.b (a0)+,(a1)+
  BNE 'l1b
  MOVEQ #13,d2
  JSR findlabel2
  BNE 'd
  CLR.l 8(a2)
 'd
  MOVEM.l (a7)+,a0-a6/d0-d7
  !basic
  dos_Delete{dos_AddPart{my_systemdir$,"ab_compileerror.txt"}}
  !asm
  CLR.b returncode
JMP AJL_0_8D16

.clearhash
  MOVE.l #bssstore-labelhash,d0
  ASR.l #2,d0
  LEA labelhash,a0
 'l10
    CLR.l (a0)+
    SUBQ.l #1,d0
  BNE.s 'l10

  LEA labelbase,a1
  MOVE.l (a1),d0
  BEQ 'l11
 'l21
    MOVE.l d0,a1
    TST.l 4(a1)
    BEQ 'l29
    LEA $13(a1),a0
    MOVEQ #0,d0
    MOVEQ #0,d1
   'l13
      MOVE.b (a0)+,d1
      BEQ 'l12
      !hashalgo
    BRA 'l13

   'l12
    LEA labelhash,a0
    AND.l #hashsize,d0
     ASL.l #2,d0
    MOVE.l 0(a0,d0),d1          ;*4
    MOVE.l d1,$c(a1)
    MOVE.l a1,0(a0,d0)
   'l29
    MOVE.l (a1),d0
  BNE 'l21

 'l11
RTS

AJL_0_390A:
  MOVEA.l AL_0_E34E,A0
  MOVEA.l (A0),A2
  CLR.l (A0)
JMP JL_0_8E0C

AJL_0_3918:
  MOVEA.l varbase,A3
  CLR.l varbase
 'l10
  CMPA.w #$0,A3
  BEQ.w 'l20
  MOVEA.l A3,A1
  MOVEA.l (A3),A3
  MOVEQ.l #$00,D0
  MOVE.b $E+4(A1),D0
  MOVEA.l _execbase,A6
  MOVE.l mempool2,a0
  JSR _FreePooled(A6)
BRA.w 'l10

'l20
RTS
JMP JL_0_8D4A


AJL_0_3928:
  LEA firstiff,A2
  MOVEQ.l #$0E,D2
JMP AJL_0_CD10

progressbar_width:   Ds.w 1
inmacro:   Ds.w 1                 ;macro found

.nextline:
  CLR.w inmacro
  ADDQ.l #1,globallinecount
  CLR.b nostringopt
  BSR.w JL_0_3CA4
  CLR.w instringon

  mergeline:
  TST.w ininclude
  BEQ.w JL_0_39B0
  ADDQ.l #1,includeline
  JSR AJL_0_C09E
  BEQ.w JL_0_39B0
  MOVE.w ininclude,D0
  CMP.w #$4,D0
  BCC.w JL_0_39AC
  ADD.w D0,D0
  LEA progress_per_line,A0
  MOVE.w $0(A0,D0.W),D2
  CMP.w progressbar_width(PC),D2
  BCC.w JL_0_39AC
  ADDQ.w #1,$0(A0,D0.W)
  LSR.w #1,D0
  MOVE.l d0,d1
  EXT.l d1
  MOVE.l d2,d0
  EXT.l d0                      ;d0=x,d1=y

  !basic
  saved0.l = PutD0
  comstatus$ = "Pass "+Str$(Peek.w(?pass))+": compiling sources ..."
  GetD0 saved0
  !asm
  JSR update_progressbar
  JL_0_39AC:
  MOVEQ.l #-$01,D0
RTS


JL_0_39B0:
  MOVE.l AL_0_E93A,D0
  MOVEQ.l #$00,D1
  MOVE.w progress_per_line,D1
  ADD.l D1,D0
  MOVE.l D0,D1
  SWAP D0
  CMP.w AL_0_E93A,D0
   BEQ.w JL_0_39E4
;  MOVEA.l comdata,A0             ; fr|her wird direkt in die Planes geschrieben
;  MOVEA.l $24(A0),A0
  EXT.l d0
  MOVE.l d1,-(a7)
;  MOVEQ #9,d1                    ; y-pos runtersetzen
  !basic
  saved0.l = PutD0
  comstatus$ = "Pass "+Str$(Peek.w(?pass))+": building executable ..."
  GetD0 saved0
  !asm
  JSR update_progressbar

  ;NOT.b -$1(A0,D0.W)
  ;ADDA.w screenwidth_lsl1_mul9(PC),A0        ;progress
  ;NOT.b -$1(A0,D0.W)
  MOVE.l (a7)+,d1

  JL_0_39E4:
  MOVE.l D1,AL_0_E93A
  ADDQ.l #1,AL_0_E9E8
  CLR.w AL_0_E35A
  ;SUBQ.w #1,AL_0_2B22
  SUBQ.l #1,numlines2
   BEQ.w JL_0_3A12
  MOVEA.l sourceline,A0
  MOVEA.l (A0),A0
  MOVE.l A0,sourceline
  LEA $9(A0),A5
  JL_0_3A12:
RTS

JL_0_3A14:
  MOVE.w D0,-(A7)
  MOVEQ.l #$03,D0

  JL_0_3A18:
    MOVE.w D1,D2
    ANDI.w #$F,D2
    ADDI.w #$30,D2
    CMP.w #$3A,D2
     BCS.w JL_0_3A2C
    ADDQ.w #7,D2
    JL_0_3A2C:
    MOVE.b D2,$0(A0,D0.W)
    LSR.w #4,D1
  DBF D0,JL_0_3A18
  MOVE.w (A7)+,D0
RTS

findmacro:
  MOVE.w skipcode,D1
  BNE.w JL_0_3A46
RTS

JL_0_3A46:  MOVE.l A5,-(A7)
  MOVEQ.l #$3A,D1
  MOVEQ.l #$21,D2
  MOVEQ.l #$3B,D3
  MOVEQ.l #$22,D4
JL_0_3A50:  MOVE.b (A5)+,D0
   BEQ.w JL_0_3CA0
   BPL.w JL_0_3A60
  MOVE.b (A5)+,D0
 BRA.w JL_0_3A50

JL_0_3A60:  CMP.b D4,D0
   BNE.w JL_0_3A82
JL_0_3A66:  MOVE.b (A5)+,D0
   BEQ.w JL_0_8224
   ;BPL.w JL_0_3A76 ;morechar
  ;MOVE.b (A5)+,D0
 ;BRA.w JL_0_3A66

JL_0_3A76:  CMP.b #$22,D0
   BNE.w JL_0_3A66
 BRA.w JL_0_3A50

JL_0_3A82:  CMP.b D1,D0
   BEQ.w JL_0_3CA0
  CMP.b D3,D0
   BEQ.w JL_0_3CA0
'l10 CMP.b D2,D0
   BNE.w JL_0_3A50
  MOVE.w #$FFFF,inmacro  ; no runtimecheck in macros
  MOVEA.l A5,A3
   JSR getparameter2
   BNE.w JL_0_3AAC
 JMP syntaxerr
JL_0_3AAC:   ;bsr.w JL_0_7C44
   MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
   JSR findmac       ;find macro
   BEQ.w JL_0_3ABE
 JMP AJL_0_876A

JL_0_3ABE:
 TST.b debugmode
 BEQ 'sk1
 MOVE.w #$4e71,d1
 JSR writeword
 MOVE.l a5,-(a7)
 MOVE.l a3,a5
 SUBQ.l #1,a5
 MOVE.w #$0,inmacro
 BSR JL_0_44B0a
 MOVE.w #$FFFF,inmacro
 MOVE.l (a7)+,a5
 MOVE.w #$4e71,d1
 JSR writeword
'sk1 MOVEA.l A5,A4
     'l5a
          CMP.b #" ",(a4)+
    BEQ 'l5a
     SUBQ.l#1,a4
     CMP.b #",",(a4)
    BEQ JL_0_3AEA
'l5b  MOVEQ.l #$00,D4
  TST.b newsyntax
  BEQ 'l10b
  MOVEM.l a0/d0,-(a7)
  MOVE.l 4(a2),a0
  MOVE.w 8(a2),d0
'x2 CMP.b #"`",(a0)+
  BEQ 'x1
  SUBQ.w #1,d0
  BNE 'x2
  BRA 'x3
'x1 MOVEM.l (a7)+,a0/d0
  BRA 'l10
'x3 MOVEM.l (a7)+,a0/d0
  BRA JL_0_3AEA
'l10b  CMPI.b #"{",(A4)
   BNE.w JL_0_3AEA
  ;BNE 'l10
'l5  ADDQ.l #1,a4
'l10
    CMP.b #" ",(a4)
    BEQ 'l5
    MOVEM.l a0/d0,-(a7)
    CLR.b exmac
    LEA chartab,a0
    MOVEQ #0,d0
    MOVE.b (a4),d0
    BMI 'm1
    TST.b 0(a0,d0)
    BEQ 'm1
    TST.b newsyntax
    BEQ 'ns1
    CMP.b #"#",d0
    BEQ 'm1
    CMP.b #"$",d0
    BEQ 'm1
    CMP.b #"-",d0
    BEQ 'm1
'ns1    CMP.b #",",d0
    BEQ 'm1
    CMP.b #"{",d0
    BNE 'm1b
    ADDQ.l #1,a4
    BRA 'm1
'm1b    TST.b newsyntax
    BEQ 'm1
    MOVE.b #1,exmac
'm1 MOVEM.l (a7)+,a0/d0
    TST.b exmac
    BNE JL_0_3AEA
;CMP.b #"|",(a4)
    ;BEQ JL_0_3AEA
    ;CMP.b #":",(a4)
    ;BEQ JL_0_3AEA
    ;CMP.b #";",(a4)
    ;BEQ JL_0_3AEA
  TST.b (a4)
  BEQ JL_0_3AEA
  oldlab
  MOVEA.l ptr_macrobuffer_begin,A0
  JL_0_3AD0:
  ADDQ.w #1,D4
  MOVE.l A4,(A0)
  CLR.w 4(a0)
   BSR.w JL_0_3CC6
  ;move.l A4,D1
  ADDQ.l #4,a0
  ;sub.l (A0)+,D1
  ;subq.w #1,D1
  ;move.w D1,(A0)+
  SUBQ.w #1,(a0)+
  CMP.b #$7D,D0
  BEQ 'l10
  TST.b d0
  BEQ 'l10
  BRA JL_0_3AD0
   ;bne.w JL_0_3AD0
'l10 CLR.l sourceline3
  MOVEA.l A4,A5
JL_0_3AEA:  MOVE.w D4,AL_0_E94E
  ;tst.l AL_0_E950
  ;beq 'l1
  ;move.l AL_0_E954,d0
  ;bra 'l10
'l1  MOVE.l #$01,D1
  MOVEA.l _execbase,A6
  MOVE.l mempool,a0
  MOVE.l macrobuffer_size,D0
  CMP.l #40000,d0
  BGE 'l1m
  MOVE.l #40000,d0
  MOVE.l d0,macrobuffer_size
'l1m  JSR _AllocPooled(a6)
   ;jsr AJL_0_4B6C
  MOVE.l AL_0_E954,AL_0_E950
'l10 ADDQ.l #1,d0
  MOVE.l D0,AL_0_E954
  MOVEA.l D0,A1
  MOVE.b #":",-1(a1)
  MOVEA.l A1,A6
  ADDA.l macrobuffer_size,A6
  MOVEA.l (A7)+,A0
JL_0_3B1E:  CMPA.l A6,A1
   BCC.w JL_0_81E6
  MOVE.b (A0)+,(a1)+
  CMPA.l A3,A0
   BCS.w JL_0_3B1E
  SUBQ.w #1,A1
  MOVE.w $8(A2),D1
   BEQ.w JL_0_3C70
  MOVE.w $A(A2),AL_0_E934
  ADDQ.w #1,$A(A2)
  MOVEA.l $4(A2),A2
  SUBQ.w #1,D1
  CLR.b firstmline
JL_0_3B48:  MOVEQ.l #$00,D0
  MOVE.b (A2)+,D0
  TST.b firstmline
  BNE 'c1
  CMP.b #$22,d0
  BNE 's1
  MOVE.b #1,firstmline
's1  CMP.b #":",d0
  BNE 'm1
  MOVE.b #1,firstmline
'm1 CMP.b #";",d0
  BNE 'c1
'l1  SUBQ.w #1,d1                  ;filter out comment
  MOVE.b (a2)+,d0
  CMP.w #":@",-1(a2)
  BEQ 'c2
  TST.w d1
  BNE 'l1
  BRA JL_0_3C6C
'c2 CMP.b #":",1(a2)
    BNE 'l1
    ADDQ #2,a2
    SUBQ #3,d1
    MOVE.b (a2)+,d0
    MOVE.b #1,firstmline
'c1
  CMP.b #"`",D0
   BNE.w JL_0_3C56
  SUBQ.w #1,D1
  MOVE.b (A2)+,D0
  CMP.w #$7B,D0
   BEQ.w JL_0_3BB6
  CMP.w #$40,D0
   BNE.w JL_0_3B82
  MOVEQ.l #$00,D2
  MOVE.w AL_0_E934,D2
  MOVEA.l A1,A0
  MOVE.w D1,-(A7)
   JSR AJL_0_53DC
  MOVEA.l A0,A1
  MOVE.w (A7)+,D1
  BRA.w JL_0_3C6C

  JL_0_3B82:
  ORI.w #$20,D0
  CMP.w #$7A,D0
   BCS.w JL_0_3B94
  JMP AJL_0_85DA

  JL_0_3B94:
  SUBI.w #$30,D0
  CMP.w #$A,D0
   BCS.w JL_0_3BF2
  SUBI.w #$27,D0
  CMP.w #$A,D0
   BCC.w JL_0_3BB2
  JMP AJL_0_85DA

  JL_0_3BB2:
  BRA.w JL_0_3BF2

  JL_0_3BB6:
  MOVE.l A5,-(A7)
  MOVEM.l D1/A1-A2/A6,-(A7)
  MOVEA.l A2,A5
   JSR AJL_0_BF6E
  CMP.w #$7D,D0
   BEQ.w JL_0_3BD2
  JMP syntaxerr

  JL_0_3BD2:
  MOVEM.l (A7)+,D1/A1-A2/A6
  MOVE.l A5,D2
  SUB.l A2,D2
  SUB.w D2,D1
  MOVEA.l A5,A2
  CLR.w instringon
  MOVEA.l (A7)+,A5
  MOVE.l D3,D0
  BPL.w JL_0_3BF2
  JMP AJL_0_85DA

  JL_0_3BF2:
  SUBQ.w #1,D0
   BPL.w JL_0_3C20
  MOVE.w AL_0_E94E,D0
  DIVU #$A,D0
  ADDI.w #$30,D0
  CMPA.l A6,A1
   BCC.w JL_0_81E6
  MOVE.b D0,(A1)+
  SWAP D0
  ADDI.w #$30,D0
  CMPA.l A6,A1
   BCC.w JL_0_81E6
  MOVE.b D0,(A1)+
  BRA.w JL_0_3C6C

  JL_0_3C20:
  CMP.w AL_0_E94E,D0
   BCC.w JL_0_3C6C
  LSL.w #1,D0
  MOVE.w D0,D4
  LSL.w #1,D0
  ADD.w D4,D0
  MOVEA.l ptr_macrobuffer_begin,A0
  ADDA.w D0,A0
  MOVE.w $4(A0),D4
   BEQ.w JL_0_3C6C
  MOVEA.l (A0),A0
  SUBQ.w #1,D4

  JL_0_3C46:
    CMPA.l A6,A1
     BCC.w JL_0_81E6
    CMP.w #"@@",(a0)
     BNE 'l10
    TST.w ininclude
     BNE errorjoin
   'l111
    MOVE.l sourceline,a0
    MOVE.l (a0),a0
    CMP.l #0,a0
    BNE 'l11
    MOVEQ #0,d0
    JSR error
   'l11
    MOVE.l a0,sourceline
    ADDQ.l #1,AL_0_E9E8
    LEA 9(a0),a0
    MOVE.l a0,-(a7)
   'l110
    CMP.b #" ",(a0)+
     BEQ 'l110
    CMP.b #";",-1(a0)
    MOVE.l (a7)+,a0
     BEQ 'l111
    SUBQ.l #1,d4
   'l10
    MOVE.b (A0)+,(A1)+
  DBF D4,JL_0_3C46
  BRA.w JL_0_3C6C

  JL_0_3C56:
  CMPA.l A6,A1
   BCC.w JL_0_81E6
  MOVE.b D0,(A1)+
   BPL.w JL_0_3C6C
  CMPA.l A6,A1
   BCC.w JL_0_81E6
  MOVE.b (A2)+,(A1)+
  SUBQ.w #1,D1

  JL_0_3C6C:
  DBF D1,JL_0_3B48
  ;tst.l AL_0_E94E
  ;beq 'l10
  ;cmp.b #"}",-1(a5)
  ;beq 'l10
  ;subq.l #1,a5
 'l10
  JL_0_3C70:
  CMPA.l A6,A1
   BCC.w JL_0_81E6
  MOVE.b (A5)+,(A1)+
   BNE.w JL_0_3C70
  MOVEA.l AL_0_E954,A5
  MOVE.l AL_0_E950,D0
   BEQ.w JL_0_3C9C
  SUBQ.l #1,d0
  MOVEA.l D0,A1
  MOVE.l macrobuffer_size,D0
  MOVEA.l _execbase,A6
  MOVE.l mempool,a0
  JSR _FreePooled(A6)

  JL_0_3C9C:
  BRA.w JL_0_3A46

  JL_0_3CA0:
  MOVEA.l (A7)+,A5
RTS

JL_0_3CA4:
  MOVE.l AL_0_E954,D0
  BEQ.w JL_0_3CC4
  SUBQ.l #1,d0
  CLR.l AL_0_E954
  MOVEA.l D0,A1
  MOVE.l macrobuffer_size,D0
  MOVEA.l _execbase,A6
  MOVE.l mempool,a0
  JMP _FreePooled(A6)

  JL_0_3CC4:
RTS

JL_0_3CC6:  MOVEQ.l #$00,D2
JL_0_3CC8:
            ADDQ.w #1,4(a0)
   MOVE.b (A4)+,D0
   ;beq.w syntaxerr
   BEQ exit1
   BPL.w JL_0_3CD8
  ADDQ.w #1,4(a0)
  ADDQ.w #1,A4
 BRA.w JL_0_3CC8

JL_0_3CD8:
   TST.w instringon
   BNE 'lnom
   CMP.b #";",d0
   BEQ exit2
   CMP.b #":",d0
   BEQ exit2
'lnom   CMP.b #$22,D0
   BNE.w JL_0_3CEA
  NOT.w instringon
 BRA.w JL_0_3CC8

JL_0_3CEA:  TST.w instringon
   BNE.w JL_0_3CC8
   CMP.b #"@",d0
   BNE 'l10
   CMP.b #"@",(a4)
   BNE 'l10
   TST.w ininclude
   BNE errorjoin
   MOVE.l sourceline3,a4
   CMP.l #0,a4
   BNE 'l11
   MOVE.l sourceline,a4
'l11   MOVE.l (a4),a4
      CMP.l #0,a4
      BNE 'l12
      MOVEQ #0,d0
      JSR error
'l12   MOVE.l a4,sourceline3
   LEA 9(a4),a4
   MOVEQ #",",d0
'l10
  CMP.b #$2C,D0
   BNE.w JL_0_3D06
  TST.w D2
   BEQ.w JL_0_3D30
 BRA.w JL_0_3CC8

JL_0_3D06:   ;bsr.w JL_0_3D32
   CMP.b #$7B,D0
   BEQ.w 'l10
  CMP.b #$28,D0
'l10
   BNE.w JL_0_3D14
  ADDQ.w #1,D2
 BRA.w JL_0_3CC8

JL_0_3D14:  CMP.b #$7D,D0
   BNE.w JL_0_3D22
 TST.w D2
   BEQ.w JL_0_3D30
JL_0_3D22:   ;bsr.w JL_0_3D40
   CMP.b #$7D,D0
   BEQ.w 'l10
  CMP.b #$29,D0
'l10
   BNE.w JL_0_3CC8
  SUBQ.w #1,D2
  BRA.w JL_0_3CC8

  JL_0_3D30:
RTS

exit1
      SUBQ.l #1,a4
      CLR.l sourceline3
      RTS
exit2 MOVEQ #0,d0
      SUBQ.l #1,a4
      CLR.l sourceline3
RTS

JL_0_3D32:
  CMP.b #$7B,D0
  BEQ.w JL_0_3D3E
  CMP.b #$28,D0
  JL_0_3D3E:
RTS

JL_0_3D40:
  CMP.b #$7D,D0
  BEQ.w JL_0_3D4C
  CMP.b #$29,D0
  JL_0_3D4C:
RTS


;L_0_3ED8:  Ds.b 1
;AL_0_3ED9:  Ds.b 1
AL_0_3EDA:  Ds.w 1
AL_0_3EDC:  Ds.w 1
;
;AJL_0_3EDE:
;  MOVE.w AL_0_3EDA(PC),D1
;  BNE.b JL_0_3F0E
;  MOVE.w L_0_3ED8(PC),D1
;  BTST D1,D0
;  BEQ.b JL_0_3F0E
;  ;MOVE.w #$FFFF,AL_0_3EDA
;  MOVEM.l D0/A6,-(A7)
;  MOVE.l signals(PC),D0
;  MOVEA.l ptr_ThisTask,A1
;  MOVEA.l _execbase,A6
;  JSR _Signal(A6)
;  MOVEM.l (A7)+,D0/A6
;  JL_0_3F0E:
;RTS

.close_compilewin:
  MOVE.w AL_0_3EDC(PC),D0
   BEQ.w JL_0_3F38

  !basic
  If Peek.l(Addr Window(4))<>0 Then WZCloseWindow 4
  !asm
  LEA AL_0_3EDC,a0
  NOT.w (a0)            ;reass
  MOVEA.l ptr_ThisTask,A0
  CLR.l $1E(A0)
  CLR.l $2A(A0)

  JL_0_3F38:
RTS

AL_0_3F3A:  Ds.w 1
AJL_0_3F3C:
  MOVE.w #$FFFF,AL_0_BCF0
  CLR.w AL_0_3F3A
  CLR.w AL_0_E84C
  CLR.w AL_0_BCF2
  CLR.w dontwrite
  CLR.w AL_0_E91E
  CLR.w AL_0_79AC
  CLR.w AL_0_E32E
  CLR.l AL_0_50C8
  CLR.w AL_0_AD80
  CLR.w AL_0_D2DA
  CLR.w AL_0_D2DC
  CLR.w AL_0_B3DA
  CLR.l AL_0_E93A
  CLR.b AL_0_4A20
  CLR.b path2
  CLR.w AL_0_4F36
  CLR.w AL_0_50D4
  CLR.l AL_0_449C
  CLR.l AL_0_44A0
  CLR.l AL_0_44A4
  MOVE.l destbufferstart,destpointer
  MOVE.l destbufferstart,AL_0_959E
  MOVE.l destbufferend,libend
  MOVE.l data1start,AL_0_E8EE
  MOVE.l AL_0_E8E2,AL_0_E8E6
  MOVE.w #$FFFF,skipcode
  MOVE.w #$FFFF,AL_0_2B20
  CLR.w AL_0_EBF2
  CLR.b lastgloballabel
RTS


debugmode:  Ds.w 1
.compilerequester:
  LEA  AL_0_3EDC,a1
  MOVE.w #2000,(a1)
  !basic
  FindScreen 0
  WZWindow 4,?wzgui,64,-2,-2,-2,-2,4
  ;  comstatus$ = "Pass "+Str$(Peek.w(?pass))
  ;  WZPrint "COMPILE_INFO",&comstatus$
  calcpro_old.w = 0
  old_comstatus$= ""
  !asm
  CLR.w AL_0_3EDA
RTS

.compileall:
  CLR.w storedebugmode
  BSR.w compilerequester

  MOVE.l #0,globallinecount
  JSR check_of_same_source
  BSR.w call_setpointerbusy
  BSR.w AJL_0_3F3C
  MOVE.w #$8000,globalvarpointer
  MOVE.l #newtype_quick,AL_0_E848
  MOVE.l A7,AL_0_EC10
  MOVE.l #AL_0_2B3C,sourceline
  MOVE.w AL_0_2B40,AL_0_2B22
  MOVE.l numlines,numlines2
  ADDQ.w #1,AL_0_2B22
  ADDQ.l #1,numlines2
  MOVE.l #$ffffFFFF,AL_0_E9E8
  BSR.w JL_0_6A1C
  BSR.w Aclearallvars
  LEA AL_0_E940,A0
  MOVEQ.l #$03,D0
  JL_0_40EC:
    CLR.w (A0)+
  DBF D0,JL_0_40EC
 'l2a
  LEA _include,a0
  MOVEM.l a0-a6/d0-d7,-(a7)
  LEA ptr_parameterstore,a1
 'l1b
    MOVE.b (a0)+,(a1)+
  BNE 'l1b

  MOVEQ #9,d2
  JSR findlabel2
  BNE 'd
  MOVE.l #0,8(a2)
  MOVEM.l (a7)+,a0-a6/d0-d7
  BRA 'd2
 'd
  JSR addlabelhash
  MOVE.l #$1,$4(A2)
  MOVE.l #0,8(a2)
  MOVEM.l (a7)+,a0-a6/d0-d7
 'd2
  LEA _debug,a0
  MOVEM.l a0-a6/d0-d7,-(a7)
  LEA ptr_parameterstore,a1
 'l9b
    MOVE.b (a0)+,(a1)+
  BNE 'l9b

  MOVEQ #7,d2
  JSR findlabel2
  BNE 'd9
  MOVE.b debugmode(PC),D0
  EXT.w d0
  EXT.l d0
  MOVE.l d0,8(a2)
  MOVEM.l (a7)+,a0-a6/d0-d7
  BRA 'd9b
 'd9

  JSR addlabelhash
  MOVE.l #$1,$4(A2)
  MOVE.b debugmode(PC),D0
  EXT.w d0
  EXT.l d0
  MOVE.l d0,8(a2)
  MOVEM.l (a7)+,a0-a6/d0-d7
 'd9b

  MOVE.l #AL_0_2B3C,a0
  MOVE.l (a0),a0
  LEA 9(a0),a0
  MOVE.w #0,exdebug
  TST.b debugmode
   BEQ 'l10
 'l2
  MOVE.b (a0)+,d0
   BEQ 'l10
  CMP.b #$20,d0
   BEQ 'l2
  SUBQ.l #1,a0
  CMP.l #"DEBU",(a0)
   BNE 'l10
  CMP.b #"G",4(a0)
   BNE 'l10
  MOVE.w #$0,debugversion
  MOVE.b #1,exdebug
 'l10
  LEA AL_0_28FA,A0
  LEA AL_0_2902,A1
  JSR JL_0_95BA                 ;write intro nops
  MOVE.l #$01010101,d1
  JSR writedatalong              ;for the 4 tempregs
  JSR writedatalong
  JSR writedatalong
  JSR writedatalong
  TST.b saved0
   BEQ 'l1
  MOVE.l #$4e714e71,d1
  JSR writelong                   ;add 2 nops
  MOVE.l #$4e714e71,d1
  JSR writelong                   ;add 2 nops
  MOVE.l #$4e714e71,d1
  JSR writelong                   ;add 2 nops
   MOVE.l #$4e714e71,d1
  JSR writelong                   ;add 2 nops
 'l1
  MOVE.b debugmode(PC),D1
   BEQ.b JL_0_4132
  MOVE.b debugmode,storedebugmode
  MOVE.w #$FFDC,D1
   BSR.w uselib
  TST.w debugversion                  ;make a version for debugger
   BNE.b JL_0_412A
  MOVE.w #$FA3C,D1
   BSR.w uselib
  MOVE.w #$0001,D1
   BSR.w uselib
  BRA.b JL_0_4132

  JL_0_412A:
  MOVE.w #$FA32,D1
  BSR.w uselib

  JL_0_4132:
  BSR.w nextline
  CLR.l linenum
  CLR.l stacktrack

  JL_0_4136:
  ADDQ.l #1,linenum
  MOVE.l destpointer,destpointer2
  MOVE.l a5,sourceline2
  BSR.w compilepass        ;compile pass

  AJL_0_413A:
  BSR.w nextline
   BNE.w JL_0_4136
  BSR.w do_runerrson_b
  BSR.w JL_0_421E
  TST.b objectcount
   BNE JL_0_8716
  CLR.l AL_0_E9E8
  BSR.w JL_0_424E
  CMP.l #-1,bssend
   BNE 'l30
  MOVE.l destpointer,bssend          ;compile end
 'l30
  MOVE.l destpointer,d0
  CMP.l #-1,bssstart
  BNE 'lnf6
  CMP.l #-1,chipstart
  BNE 'lnf6
  BRA 'leven4
 'lnf6
  MOVE.l destpointer,d1
  ADDQ.l #3,d1
  AND.l #$fffffffc,d1         ;bug ?
  MOVE.l d1,destpointer
 'leven4
  MOVE.l destpointer,codeend
  CMP.l #-1,chipend
  BNE 'l31
  MOVE.l destpointer,chipend
 'l31                          ;write exitcode
  MOVE.l destpointer,d1
  ADDQ.l #1,d1
  AND.l #$fffffffe,d1         ;new evenexit
  MOVE.l d1,destpointer
  MOVE.b debugmode(PC),D1
   BEQ.b JL_0_4180
   BSR.w JL_0_44B0
  MOVE.w #$C300,D1
   JSR Atokejsr
   BSR.w JL_0_44B0
  MOVE.l L_0_4216(PC),D1
   JSR writelong
  MOVE.l AL_0_44A4(PC),D1
   BEQ.b JL_0_4180
  MOVEA.l D1,A0
  CLR.w $6(A0)

  JL_0_4180:
  MOVE.l destpointer,AL_0_EC32
  TST.w AL_0_BCF2
  BEQ.w JL_0_4198
  BSR.w do_AMIGA
  JL_0_4198:
  TST.w AL_0_3F3A
  BEQ.b JL_0_41AA
  MOVE.w #$C105,D1
  JSR tokejsr2

  JL_0_41AA:
  BSR.w JL_0_7484
  MOVE.w D4,AL_0_EC3E
  MOVE.l D3,AL_0_EC40
   BSR.w JL_0_434A

  TST.l AL_0_6EEE
   BEQ.b JL_0_41F8
  MOVE.w AL_0_2A3C,D1
   JSR writeword
  MOVE.l destpointer,AL_0_421A
   BSR.w JL_0_791C
   JSR writelong
   BSR.w JL_0_6C76
  TST.w dontwrite
   BNE.b JL_0_41F8
  MOVEA.l AL_0_421A(PC),A4
  MOVE.l destpointer,(A4)

  JL_0_41F8:
  TST.b returncode
  BEQ 'l2
  MOVE.w #$2e80,d1
  JSR writeword
 'l2
  JSR JL_0_B98A
  TST.b returncode
  BEQ 'l3
  MOVE.w #$4e75,d1
  JSR writeword
  BRA 'l1
 'l3
  MOVE.l #$70004E75,D1
  JSR writelong               ;write moveq #0,d0:rts
 'l1
  JSR JL_0_B73E
  BSR.w JL_0_6410
  BSR.w close_compilewin
BRA.w call_setpointernormal

.do_runerrson_b:
JMP do_runerrson


L_0_4216:   Dc.b "p"
            Dc.b $03 ;.
            Dc.b "N@"
AL_0_421A:  Ds.l 1

JL_0_421E:
  MOVEA.l newtype_string,A2
  MOVE.l #MaxByte,D0
  JL_0_422A:
    CMPA.w #$0,A2
     BEQ.w JL_0_424C
    CMP.l $4(A2),D0
     BNE.w JL_0_4246
    MOVE.w $8(A2),AL_0_E9E8+2       ;type not found
    BRA.w JL_0_8440
    JL_0_4246:
    MOVEA.l (A2),A2
  BRA.w JL_0_422A

  JL_0_424C:
RTS

JL_0_424E:
  LEA labelbase,A2
  JL_0_4254:
  MOVE.l (A2),D0        ;testlabels
   BEQ.w JL_0_427E
  MOVEA.l D0,A2
  MOVE.l $4(A2),D0
  BTST #$0,D0
   BNE.w JL_0_4254
  MOVE.l $8(A2),D0
   BNE.w JL_0_4254
  MOVE.w $10(A2),AL_0_E9E8+2
  MOVEQ #0,d0
  MOVE.b $12(a2),d0
  MOVE.w 0(a2,d0),AL_0_E9E8
JMP AJL_0_8652                     ;label not found

JL_0_427E:
  MOVE.l AL_0_E99C,D0
  CMP.l #AL_0_E95C,D0
   BNE.w JL_0_433A
  MOVE.w AL_0_E948,D1
   BNE.w JL_0_433A

  AJL_0_4298:
  MOVE.l D1,-(A7)
  MOVE.l AL_0_CD4A,D1
   BNE.w JL_0_42DA
  MOVE.l AL_0_4D0A,D1
   BNE.w JL_0_42EA
  MOVE.w AL_0_50D2,D1
   BNE.w JL_0_42FA
  MOVE.l 4(a7),d1
  MOVE.w proceduremode,D1
   BNE.w JL_0_431A
  MOVE.l firstiff,d1
   BNE JL_0_430A
  MOVE.l AL_0_E9A8,D1
   BNE.w JL_0_432A
  MOVE.l (A7)+,D1
RTS

JL_0_42DA:
  MOVE.l AL_0_CEFA,AL_0_E9E8
JMP AJL_0_7D9A

JL_0_42EA:
  MOVE.l AL_0_4D0E,AL_0_E9E8
JMP AJL_0_7DEE

JL_0_42FA:
  MOVE.l AL_0_4FE0,AL_0_E9E8
JMP AJL_0_8034

JL_0_430A:
  MOVE.l AL_0_D048,AL_0_E9E8
JMP AJL_0_8842

JL_0_431A:
  MOVE.l AL_0_D2DE,AL_0_E9E8
JMP AJL_0_88E4

JL_0_432A:
  MOVE.l AL_0_DCF8,AL_0_E9E8
JMP AJL_0_8A14

JL_0_433A:
  MOVE.l AL_0_7B9E,AL_0_E9E8
JMP AJL_0_7D34

JL_0_434A:
  MOVE.l AL_0_E8EE,AL_0_E83C
  MOVEQ.l #$00,D4
  MOVEA.l libpointer,A2
  JL_0_435C:
    CMPA.w #$0,A2
     BEQ.w JL_0_4398
    TST.w $C(A2)
     BPL.w JL_0_4392
    MOVE.l $12(A2),D0
    TST.w -$2(A2,D0.L)
     BEQ.w JL_0_4392
    ADDQ.w #1,D4
    MOVE.w -$6(A2,D0.L),D1
    BSR.w JL_0_745A
    MOVEQ.l #$01,D1
    MOVE.w -$2(A2,D0.L),D2
    LSL.w D2,D1
    MULU -$4(A2,D0.L),D1         ;write objectspacesize
    BSR.w writedatalong
    JL_0_4392:
    MOVEA.l (A2),A2
  BRA.w JL_0_435C

  JL_0_4398:
  MOVE.w D4,AL_0_E842
   BEQ.w JL_0_43AA
  MOVE.w #$FFFA,D1
  BRA.w uselib

  JL_0_43AA:
RTS

.compilepass:
   MOVE.l a7,stackaddr
   BSR.w compileloop
   BSR.w JL_0_7C3A
   BNE.w JL_0_8292
   TST.w dontwrite
   BNE 'l1
   TST.l stacktrack
   BNE errormsg_stack
  'l1
   CMP.w #-$7FDE,D0
   BNE.w JL_0_43CA
   JSR AJL_0_C438
BRA.w compilepass

JL_0_43CA:
  TST.w D0
  BNE.w compilepass

  JL_0_43D0:
  MOVE.l firstiff,D0
   BEQ.w JL_0_43F8
  MOVEA.l D0,A0
  MOVE.w $C(A0),D1
   BPL.w JL_0_43F8
  BCLR #$F,D1
   JSR AJL_0_D7B8
   JSR AJL_0_D81C
  BRA.w JL_0_43D0

  JL_0_43F8:
RTS

JL_0_43FA:
  LEA lastgloballabel,A0
  TST.b (A0)
   BEQ.w JL_0_83A2
  LEA ptr_parameterstore,A1
  MOVEQ.l #$00,D2
  JL_0_440E:
  ADDQ.w #1,D2
  MOVE.b (A0)+,(A1)+
   BNE.w JL_0_440E
  MOVE.b #$27,-$1(A1)
  MOVE.w D2,-(A7)
   BSR.w JL_0_8BF4
  CMP.w (A7)+,D2
   BEQ.w syntaxerr
   TST.w d0
   BPL 'l10
   MOVE.w #$3a,lastchar
   SUBQ.l #2,a5
 'l10
RTS

JL_0_442A:
  MOVE.l #AL_0_A470,AL_0_A6B0
  MOVE.l #AL_0_9D14,AL_0_9D10
RTS

JL_0_4440:
  MOVEQ.l #$00,D4
  JL_0_4442:
  !basic
  Use Window 4
  ev.l = Event : c_abort.b = False
  While ev
    If ev = #IDCMP_IDCMPUPDATE
      If WZGadName = "COMPILE_ABORT" Then c_abort = True
    EndIf
    If (c_abort = True)
      Pop If : Pop While
      MOVEQ.l #-$01,d4
      MOVE.w D4,AL_0_3EDA
      !asm
      BRA JL_0_4462
    EndIf
    ev = Event
  Wend
  !asm
  MOVEQ.l #$00,D6
  MOVEQ.l #$00,D7   ; clr Z-Flag for beq.b in JL_0_4472
  JL_0_4462:  ;MOVE.w D4,AL_0_3EDA
RTS

JL_0_446A:
  MOVE.w AL_0_3EDA(PC),D0
  BEQ JL_0_4472
  SUBQ.w #1,AL_0_3EDA
  ;BNE.b JL_0_4472
  JL_0_4470:
RTS

JL_0_4472:
  MOVE.w #2000,AL_0_3EDA
  BSR.w JL_0_4440
  BEQ.b JL_0_4470
  BSR.w close_compilewin
  BSR.w call_setpointernormal
  MOVEA.l AL_0_2B18,A7
  MOVEA.l AL_0_2B1C,A0
  MOVE.w #$FFFF,AL_0_E84C
  L_0_4490:
JMP (A0)

AL_0_4492:   Ds.l 1
AL_0_4496:   Ds.l 1
AL_0_449A:   Ds.w 1
AL_0_449C:   Ds.l 1
AL_0_44A0:   Ds.l 1
AL_0_44A4:   Ds.l 1

writetrap:
  ORI.w #$4E40,D1
BRA.w writewordb

JL_0_44B0:
  TST.b debugmode
  BEQ.w JL_0_453E
  JL_0_44B0a:
CNIF #debugmacro=0
   TST.w inmacro
   BNE JL_0_453E                     ;disable to show macros in debugger
CEND
  TST.w dirmode
   BNE JL_0_453E
  MOVE.l destpointer,AL_0_4492
  MOVE.l AL_0_959E,AL_0_4496
  MOVE.w dontwrite,AL_0_449A
  MOVEM.l D0-D1,-(A7)
  MOVEQ.l #$01,D1
   BSR.w writetrap                    ;write the adress to sourceline
   MOVE.l destpointer,D0
  MOVE.l AL_0_449C,D1
  MOVE.l D0,AL_0_449C
  MOVE.l D1,AL_0_44A0
   BEQ.b JL_0_4522
  TST.w dontwrite
   BNE.b JL_0_4522
  MOVEA.l D1,A4
  SUB.l A4,D0
  MOVE.w D0,$6(A4)
  MOVE.l A4,AL_0_44A4
JL_0_4522:
  TST.w ininclude
  ;BEQ 'noinc
  TST.w makeexec
  BEQ 'l1
  TST.w exdebug
  BEQ 'noinc
'l1 MOVEM.l a0-a1/d2/d3,-(a7)              ;write source for includes
  MOVE.l AL_0_E8EE,d1
  TST.b firsttime
  BNE 'nofirst
  MOVE.b #1,firsttime
  MOVE.l #"DuCk",d1                       ; to found from debugger the code start
  JSR writedatalong
  MOVE.l #"AmiB",d1
  JSR writedatalong
  MOVE.l destbufferstart,d1
  JSR writedatalong
  TST.w dontwrite
  BNE 'nohunk
  MOVE.l AL_0_E8EE,d1
  SUBQ.l #4,d1
  SUB.l destbufferstart,d1
  MOVE.l d1,d2
  JSR addhunkoffset
'nohunk MOVE.l destpointer,d2
  MOVE.l AL_0_E8EE,d1
'nofirst
  MOVE.l destpointer,d2
  MOVE.l d1,d3
  SUB.l destbufferstart,d1
  OR.l #$80000000,d1
  JSR writelong
  TST.w inmacro
  BEQ 'sc1
  MOVE.l AL_0_E954,a0
  ;SUBQ.l #1,a0
  BRA 'inc2
'sc1  TST.w ininclude
  BEQ 'inc
  MOVE.l includesourceline,a0
  BRA 'inc2
'inc  MOVE.l sourceline,a0
      LEA 9(a0),a0

'inc2 MOVE.l d1,d2
   MOVE.l A5,D1
   SUB.l a0,D1
   ADD.l #9,d1
   BSR.w writewordb
   CMP.l #9,d1
   BEQ 'pos1
   TST.w dontwrite
   BNE 'nopad
   MOVE.l lastsourceline,d1
   MOVE.l d1,-6(a4)
   BRA 'nopad
'pos1   MOVE.l d2,lastsourceline
   MOVE.l destpointer,lastdestpointer
   MOVEQ #0,d1
  MOVE.l AL_0_E8EE,d2
  SUB.l destbufferstart,d2
  JSR writedatalong
  TST.w dontwrite
  BNE 'no2
  JSR addhunkoffset
 'no2
  MOVE.l AL_0_E8EE,d2
  SUB.l destbufferstart,d2
  JSR writedatalong
  TST.w dontwrite
  BNE 'no
  JSR addhunkoffset
  MOVE.l lastwritedat,a1
  CMP.l #0,a1
  BEQ 'no
  MOVE.l d3,(a1)
  MOVE.l prevwritedat,4(a1)
  MOVE.l lastwritedat,prevwritedat
 'no
  MOVE.l d3,lastwritedat
  MOVEQ #4,d1
  BSR JL_0_7428
 'loop
  MOVE.b (a0)+,d1
  BEQ 'done
  BSR JL_0_7428
  BRA 'loop
 'done
  MOVEQ #0,d1
  BSR JL_0_7428
  MOVE.l AL_0_E8EE,d1
  BTST #0,d1
  BEQ 'nopad
  MOVEQ #0,d1
  BSR JL_0_7428
 'nopad
  MOVEM.l (a7)+,a0-a1/d2/d3
  BRA 'noinc2
 'noinc
  MOVE.l sourceline,D1
  BSR.w writelong
  MOVE.l A5,D1
  SUB.l sourceline,D1
;  BSR.w writeword
  JSR writeword
 'noinc2
  MOVEQ.l #$00,D1
  JSR writeword ; was: BSR.w writeword
  MOVEM.l (A7)+,D0-D1

  JL_0_453E:
RTS

JL_0_4540:
  TST.b debugmode       ;extern debug
   BEQ.b JL_0_4578
  TST.b dirmode
  BNE JL_0_4578
CNIF #debugmacro=0
  TST.w inmacro
   BNE.b JL_0_4578
CEND
  MOVE.w AL_0_449A,dontwrite
  MOVE.l AL_0_4496,AL_0_959E
  MOVE.l AL_0_4492,destpointer
  MOVE.l AL_0_44A0,AL_0_449C
JL_0_4578: RTS

AJL_0_457A:   ;bsr.w JL_0_442A
  MOVE.l #AL_0_A470,AL_0_A6B0
  MOVE.l #AL_0_9D14,AL_0_9D10
  CLR.w regnum
  CLR.w AL_0_EC5E
  CLR.w AL_0_EC48
  MOVE.w AL_0_EBEE,AL_0_EBF2
  CLR.w AL_0_EBEE
  MOVE.w #$FFFF,AL_0_EC22
 RTS

JL_0_45AA:
  TST.w AL_0_2B20
  BMI.b JL_0_45D0
  BSR.w JL_0_4540
  MOVE.w AL_0_2B20,D1
  ADDQ.w #4,A7
  LSL.w #2,D1
  LEA AL_0_E75C,A0
  MOVEA.l $0(A0,D1.W),A0
  BSR.w JL_0_7C3A
  L_0_45CE:
  JMP (A0)       ;jumptokenroutine

  JL_0_45D0:
RTS



.compileloop: ;a0 sourceline  a5 sourcepos
  CLR.b nowdeclare
  CLR.b notypecheck
  CLR.l lasttoken
  CLR.b doimmediate
  CLR.w vartype
  CLR.w regnumfunc
  CLR.b optistring
  CLR.b iniffcommand
  TST.b debugmode
   BEQ 'fpu
CNIF #fpudebug=0
  CLR.b fpu           ;fpu off when debug
CEND
 'fpu
  MOVE.b fpu,iee
  MOVE.w AL_0_3EDA(PC),D0
  BNE JL_0_4472b
  BSR.w JL_0_446A                    ; message here
  JL_0_4472b
  SUBQ.w #1,AL_0_3EDA
 'l20
  BSR.w findmacro    ;macro
CNIF #funcscan
  TST.l funcscan
   BEQ funcscanskip
  .funcscan_
   CLR.b instringf
   BSR.w get1bytemain
   CMP.w #"#",d0
   BNE 'lf9b
   JSR JL_0_4718
   BRA 'lf9b
  'lf9
   BSR.w get1bytemain
  'lf9b
   CMP.w #$22,d0
    BNE 'nos
   NOT.b instringf
  'nos
   TST.b instringf
    BNE 'sk3
   CMP.w #$8008,d0
   ;BEQ 'lf4
   CMP.w #$8009,d0
   ;BEQ 'lf4

  'sk1
   CMP.w #$8012,d0      ;xinclude
    BNE 'sk2
   ADDQ.l #2,lastsourcepos
   JSR do_xinclude
  'sk2
   CMP.w #$8013,d0      ;include
   BNE 'sk3
   ADDQ.l #2,lastsourcepos
   JSR do_INCLUDE
  'sk3
   TST.w lastchar
    BNE 'lf9
   RTS
  'lf4
   RTS
CEND
  funcscanskip:
  CMP.b #$2b,(a5)
  BNE 'lb2
  BSR.w get1bytemain       ;gettokenmain
  MOVE.b #1,notypecheck
 'lb2
  TST.b debugmode
   BEQ.s 'l10
  TST.b exdebug
  BEQ 'l10a
  MOVE.w (a5),d0
  CMP.w #$8025,d0
   BEQ 'l10
 'l10a
  BSR.w JL_0_44B0a     ;insert runtimecode debugcode
 'l10
  moredata
 'l1
  BSR.w get1bytemain       ;gettokenmain
  BEQ.w JL_0_4540;JL_0_462C
   ;  CMP.l #2698,globallinecount
   ;BNE 'lb1
   ; trap #0
 'lb1
  MOVE.l #AL_0_A470,AL_0_A6B0
  MOVE.l #AL_0_9D14,AL_0_9D10
  CLR.w regnum
  CLR.w AL_0_EC5E
  CLR.w AL_0_EC48
  MOVE.w AL_0_EBEE,AL_0_EBF2
  CLR.w AL_0_EBEE
  MOVE.w #$FFFF,AL_0_EC22
  ;bsr.w AJL_0_457A
  BSR.w JL_0_45AA
  TST.w D0
  BMI.w get_tokencode
  CMP.w #$2E,D0
   BEQ.w JL_0_4644                ;shortlist
  CMP.w #"#",D0
   BEQ.w JL_0_4718                ;constant found
  CMP.w #$27,D0
   BEQ.w JL_0_4638                ;local label
  MOVE.l A5,AL_0_E854
  JSR getparameter
  BSR.w JL_0_7C3A
   BEQ.w JL_0_4658                 ;label found
  CMP.w #$7B,D0
   BEQ.w JL_0_475C
  TST.w d0
   BPL 'll1
  TST.b newsyntax
   BEQ 'll1
  LEA allowtab,a0
  MOVEQ #0,d1
  MOVE.b d0,d1
  TST.b 0(a0,d1.w)
   BNE 'll1
  SUBQ.l #2,a5
  MOVE.w #":",lastchar            ;no doublepoint
  BRA JL_0_4658
 'll1
  CMP.l #"equ ",-1(a5)
   BEQ 'll4
  CMP.l #"EQU ",-1(a5)
   BNE 'll2
 'll4
  ADDQ.l #2,a5
  BSR.w findlabel2
  BEQ.w 'lf1
  BSR.w addlabelhash
  MOVE.l #$1,$4(A2)
 'lf1
  CMPI.l #$1,$4(A2)
   BNE.w JL_0_8256
  BSR get1bytemain
  MOVE.l A2,-(A7)
     ;cmp.b #$30,d0
     ;blt 'lnonum
     ;cmp.b #$39,d0
     ;bgt 'lnonum
     ;bra 'lnum
 'lnonum
     ;cmp.b #"#",d0
     ;beq 'lnum
     ;move.b #"#",-2(a5)
  SUBQ.l #1,a5
 'lnum
  SUBQ.l #1,a5
  JSR AJL_0_BF6E
  MOVEA.l (A7)+,A2
  MOVE.l D3,$8(A2)
  RTS
  BSR get1bytemain
 'll2
  CMP.l #"SET ",-1(a5)
  BNE 'll3
  BRA 'll4
 'll3
JMP AJL_0_DEA6

JL_0_462C:
  CMP.w #-$7FDE,D0
  BEQ.w get_tokencode
BRA.w JL_0_4540

JL_0_4638:
  BSR.w JL_0_4540
  BSR.w JL_0_43FA
BRA.w JL_0_466E

JL_0_4644:
  BSR.w get1bytemain
   BEQ.w JL_0_462C
  CMP.w #"'",D0
   BEQ.w JL_0_4638
   BSR.w makename2
   TST.w d0
   BPL 'll1
   SUBQ.l #2,a5
   MOVE.w #":",lastchar
   BRA JL_0_4658
'll1
JL_0_4658:   BSR.w JL_0_4540
  LEA ptr_parameterstore,A0
  LEA lastgloballabel,A1
JL_0_4668:  MOVE.b (A0)+,(A1)+
   BNE.w JL_0_4668
JL_0_466E:   BSR.w findlabel2
   BEQ.w JL_0_4698
   BSR.w addlabelhash
JL_0_467A:  CLR.l $4(A2)
  MOVE.l destpointer,$8(A2)
  ;clr.l $c(a2)
  ;move.l AL_0_E8E6,$C(A2)
  MOVE.w AL_0_D2DA,$10(A2)
 RTS

JL_0_4698:  MOVE.l $4(A2),D0
  BTST #$0,D0
   BNE.w JL_0_7D74
  TST.w pass
  ;bne JL_0_467A
  MOVE.l $8(A2),D0
   BNE.w JL_0_863E
  MOVE.w AL_0_D2DA,$10(A2)
  MOVEA.l $4(A2),A3
  MOVEA.l _execbase,A6
JL_0_46BC:
  CMPA.w #$0,A3
   BEQ.w JL_0_467A
    MOVE.l $4(A2),D1
    BTST #$0,D1
    BNE.w JL_0_7D74
  MOVE.w $8(A3),D1
  CMP.w $10(A2),D1
   BEQ.w JL_0_46DC
   TST.b newsyntax
   BEQ 'l1
   BRA.w JL_0_46DC            ;label context out of range fix
'l1  MOVE.w $A(A3),AL_0_E9E8+2
 BRA.w JL_0_7D50

JL_0_46DC:  MOVE.w dontwrite,D1
   BNE.w JL_0_4706
  MOVEA.l $4(A3),A1
  BTST #$0,$7(A3)
   BEQ.w JL_0_4700
  SUBQ.w #1,A1
  MOVE.l AL_0_E8E6,(A1)
 BRA.w JL_0_4706

JL_0_4700:  MOVE.l destpointer,(A1)
JL_0_4706:  MOVEA.l A3,A1
  MOVEA.l (A3),A3
  MOVE.l A3,$4(A2)
  MOVEQ.l #$0C+2,D0
  MOVE.l mempool,a0
   JSR _FreePooled(A6)
 BRA.w JL_0_46BC

JL_0_4718:   ;bsr.w JL_0_442A
   MOVE.l #AL_0_A470,AL_0_A6B0
  MOVE.l #AL_0_9D14,AL_0_9D10
   BSR.w getparameter2
constant2:   BSR.w findlabel2
   BEQ.w JL_0_4738
   BSR.w addlabelhash
  MOVE.l #$1,$4(A2)
 BRA.w JL_0_4744

JL_0_4738:  CMPI.l #$1,$4(A2)
   BNE.w JL_0_8256
CNIF #errorconstant=1
   TST.b declare2
   BNE errormsg_declaredtwice
   TST.b declare
   BNE errormsg_declaredtwice
CEND
  JL_0_4744:
  CMP.w #$3D,D0
  BEQ.w JL_0_474E
RTS

JL_0_474E:
  MOVE.l A2,-(A7)
  JSR AJL_0_BF6E
  MOVEA.l (A7)+,A2
  MOVE.l D3,$8(A2)                ;store constant
  CMP.w #$0a,lastchar
  BNE 'l1
  MOVE.w #":",lastchar                ;hack to read wizard include files
 'l1
RTS

JL_0_475C:
  BSR.w findproc       ;write statement call
  BEQ _state
  TST.l unusedfunc
  BEQ JL_0_8898
  ;BRA JL_0_8898
  JSR gotoendsource
 ._state
  TST.b $5(A2)
   ;BPL.w JL_0_8900          ;error function is called without returnpar
  MOVE.l a2,currentfunccall
  MOVE.b #1,funccall
  MOVE.b #1,isfunc(a2)
  MOVE.l $E(A2),-(A7)
  MOVEQ.l #$00,D0
  MOVE.b $4(A2),D0
  MOVE.l d0,parnumtemp
  BEQ.w JL_0_4786
  TST.b $20(a2)                 ;increase if morepar
  BNE 'no0par
  MOVE.l a5,a4
 'l1
  CMP.b #$20,(a4)+
  BEQ 'l1
  CMP.b #"}",-1(a4)
  BNE  'no0par                ;statementcall pars
  MOVEQ #0,d0

  ;-- functioncall no pars
  LEA $16(A2),A1
 'again
  MOVE.l d1,-(a7)
  MOVE.b (a1),d2
  MOVE.l d0,d1
  CMP.w #4,d2
  BNE 'l1b
  ADD.l #$203c,d1
  BSR writeword
  MOVE.l #$ffff0000,d1
  BSR writelong
  BRA 'l2b
 'l1b
  TST.b fpu
  BNE 'l1c
  CMP.w #5,d2
  BNE 'l1c
  ADD.l #$203c,d1
  BSR writeword
  MOVE.l #$800000c1,d1
  BSR writelong
  BRA 'l2b
 'l1c
  ADD.l #$70ff,d1
  BSR writeword
  MOVE.l #$f23c5000,d1
  MOVE.l d0,d2
  ASR.l #2,d2
  ADD.l d2,d1
  BSR writelong
  MOVE.w #$ffff,d1
  BSR writeword
 'l2b
  MOVE.l (a7)+,d1
  ADDQ.l #1,a1
  ADD.l #$0200,d0
  CMP.l #$0e00,d0
   BEQ syntaxerr
  TST.b (a1)
   BNE 'again
  BRA JL_0_4786
 'no0par
  MOVE.w a2offset,a2offset2
  LEA $16(A2),A2
  MOVE.b funcparloop,-(a7)
  MOVE.b #1,funcparloop
  BSR.w JL_0_67F0
  MOVE.b (a7)+,funcparloop
  BRA.w JL_0_478A

  JL_0_4786:
  BSR.w get1bytemain

  JL_0_478A:
  CMP.w #$7D,D0
   BNE.w morepar_                  ;syntax error morepar
   JSR AJL_0_BA86
  MOVE.l (A7)+,D1
;  CMP.l #6,parnumtemp
;  BLE 'l1
;  CMP.l #11,parnumtemp
;  BGE 'l1
;   TST.w a2offset
;   BEQ 'l1
;   MOVE.l d1,-(a7)
;   MOVE.w #$47ef,d1        ;lea x(a7),a3 nat
;   BSR writeword
;   MOVE.w a2offset,d1
;   SUB.w a2offset2,d1
;   BSR writeword
;   MOVE.l (a7)+,d1
 'l1
   JSR JL_0_AFCA
;   CMP.l #6,parnumtemp
;  BLE JL_0_493Ab
;  CMP.l #11,parnumtemp
;  BGE JL_0_493Ab
;   TST.w a2offset
;   BEQ.w JL_0_493Ab        ;changed
;   MOVE.l d1,-(a7)
;   MOVE.l #$4fef0000,d1    ;lea $x(a7),a7   nat
;   MOVE.w a2offset,d1
;   SUB.w a2offset2,d1
;   BSR.w writelong                ;correct stack with more parameters
;  MOVE.w AL_0_E9BA,AL_0_29E0
;   BEQ.w JL_0_493Ac
;  MOVE.l AL_0_29DE,D1
;   BSR.w writelong
;JL_0_493Ac
;  MOVE.w a2offset2,a2offset
; MOVE.l (a7)+,d1
JL_0_493Ab:
  CLR.b funccall
BRA.w get1bytemain

get_tokencode:
  CMP.w #$c09f,d0       ;hack to use getregd0 instead of getd0
  BNE 'l2
    MOVE.w #$dd05,d0
 'l2

  CMP.w #$c0a0,d0       ;hack to use getregd0 instead of getd0
  BNE 'l3
   MOVE.w #$dd06,d0
 'l3

  CMP.w #-$7FC4,D0
  BCS.w JL_0_47C4
    CMP.w #-$7F4D,D0
    BCC.w JL_0_47C4
      BTST #$7,assemblercheck   ;inline Assembler checking
      BNE.b JL_0_47C0
        TST.b debugmode
        BEQ.b 'l10
          CNIF #debugmacro=0
          TST.w inmacro
          BNE.b 'l10
          CEND
          MOVE.w AL_0_449A,dontwrite
          MOVE.l AL_0_4496,AL_0_959E
          MOVE.l AL_0_4492,destpointer
          MOVE.l AL_0_44A0,AL_0_449C
       'l10
        ;bsr.w JL_0_4540
      JL_0_47C0:
      BRA.w JL_0_612C
  JL_0_47C4:

  BCLR #$F,D0
  MOVE.w D0,D1
  ANDI.w #$7F00,D1
  BNE.w JL_0_4856
    CMP.w #$B3,D0                    ;intern Instructions
    BCS.w JL_0_47F2
      SUBI.w #$77,D0
      CMP.w #$4B,D0
      BEQ.w JL_0_4830
        CMP.w #$46,D0
        BEQ.w JL_0_4830
          BRA.w JL_0_4834            ; change tokennum
    JL_0_47F2:
    CMP.w #$38,D0
     BEQ.w JL_0_4830
    CMP.w #$39,D0
     BEQ.w JL_0_4830
    CMP.w #$D,D0
     BEQ.w JL_0_4830
    CMP.w #$12,D0
     BEQ.w JL_0_4830
    CMP.w #$13,D0
     BEQ.w JL_0_4830
    CMP.w #$1A,D0
     BEQ.w JL_0_4830
    CMP.w #$2A,D0
     BHI.w JL_0_4834
    CMP.w #$23,D0
     BCS.b JL_0_4834
  JL_0_4830:
  BSR.w JL_0_4540

  JL_0_4834:                        ; change tokennum
  SUBQ.w #1,D0
  LSL.w #2,D0
  ;CMP.w #$170,D0
   ;BCS.w JL_0_4846
   ;BSR.w JL_0_359C
  ;RTS

  JL_0_4846:
  LEA instructionbase,A0
  MOVEA.l $0(A0,D0.W),A0
  MOVE.l A0,-(A7)
BRA.w get1bytemain

JL_0_4856:  MOVE.w D0,D1
   BSR.w searchinstr
   TST.b newmode
   BNE compileloop
  BTST #$2,$1(A3)           ;a3 = pointer to instr
   BNE.w JL_0_51D2
  BTST #$0,$1(A3)
   BEQ.w needreturn_          ;syntax err need return
   BSR.w JL_0_49EA
   BSR.w JL_0_66F6
JL_0_4878:  MOVE.w AL_0_E9BA,-(A7)
  MOVE.w AL_0_E9B2,-(A7)
  MOVE.w a2offset,-(A7)
  MOVE.l A2,-(A7)
  MOVE.w convsize,AL_0_E9B2
  LEA $6(A3),A1
JL_0_489A:

   MOVE.w (A1),D2
   BMI.w SERR          ;statement syntax error
  ANDI.w #$FF,D2
  CMP.w D2,D1
   BEQ.w JL_0_48E0
   BCS.w JL_0_48CC
  MOVE.b (A1),D3
  ANDI.w #$7,D3
   BEQ.w JL_0_48CC
  MOVE.w D2,D4
  SUB.w D3,D4
  MOVEQ.l #$00,D5
  MOVE.w D1,D5
  SUB.w D4,D5
  DIVU D3,D5
  SWAP D5
  TST.w D5
   BEQ.w JL_0_48E0
JL_0_48CC:  ADDQ.w #2,A1
  ADDA.w D2,A1
   BSR.w JL_0_732C
   BSR.w JL_0_7314
  LEA $C(A1),A1
 BRA.w JL_0_489A
SERR MOVE.w (a3),d2
  BTST #1,d2
  BEQ statement_
  CMP.w #1,d1
  BEQ statement_
'l2:
CMP.b #$20,(a5)+
  BEQ 'l2
  CMP.b #"(",-2(a5)
  BNE 'l1
  BRA parameter_
'l1
  BRA inbrackets_
JL_0_48E0:  MOVE.b (A1),D2
  LSL.w #8,D2
  OR.w D2,D1
  MOVE.l A1,-(A7)
  CLR.w a2offset
  TST.w D1
   BEQ.w JL_0_4900
  LEA $2(A1),A2
   BSR.w JL_0_6772
 BRA.w JL_0_4904

JL_0_4900:   BSR.w get1bytemain
JL_0_4904:  MOVEA.l (A7)+,A1
  MOVEA.l (A7)+,A2
  MOVE.w a2offset,D1
   BEQ.w JL_0_493A
  MOVE.w D1,AL_0_29E4
  MOVE.l AL_0_29E2,D1
   BSR.w writelong                ;write array offset stack correct
  MOVE.w AL_0_E9BA,AL_0_29E0
   BEQ.w JL_0_493A
  MOVE.l AL_0_29DE,D1
   BSR.w writelong
JL_0_493A:

'l10  JSR userjsr
'l20  MOVE.w a2offset,D1
   BEQ.w JL_0_4974
  CMP.w #$8,D1
   BHI.w JL_0_4964
  ANDI.w #$7,D1
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$504F,D1
  BSR.w writeword
BRA.w JL_0_4974

JL_0_4964:
  MOVE.w D1,AL_0_29E8
  MOVE.l AL_0_29E6,D1
BSR.w writelong

JL_0_4974:
  MOVE.w (A7)+,a2offset
  MOVE.w (A7)+,AL_0_E9B2
  MOVE.w (A7)+,AL_0_E9BA
BRA.w JL_0_7C3A

AJL_0_498A:
  MOVEM.l A2-A3,-(A7)
  CLR.b doublepeek
  MOVE.l A5,lastsourcepos
   BSR.w JL_0_7A2E
  CMP.w #$2E,D0
   BEQ.w JL_0_49B4
  MOVEA.l AL_0_E848,A2
  CMP.w #$24,D0
   BNE.w JL_0_49CA
  MOVEQ.l #$07,D1
BRA.w JL_0_49DE

JL_0_49B4:
  BSR.w getparameter2
  BEQ.w syntaxerr
  LEA newtypebase,A2
  BSR.w JL_0_8CBE
  BNE.w JL_0_8440

  JL_0_49CA:   ;bsr.w JL_0_7C44
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
  CMPI.l #$100,$4(A2)
   BCC.w JL_0_8454
  MOVE.w $6(A2),D1
  CMP.w #8,8(a2)
  BNE 'l1
  MOVE.b #1,doublepeek
 'l1
  JL_0_49DE:
  MOVE.w D1,convsize
  MOVEM.l (A7)+,A2-A3
RTS

JL_0_49EA:
  BTST #$3,$1(A3)
  BEQ.w JL_0_4A06
  BSR.w AJL_0_498A                 ;read peek/poke size

  ORI.w #$7000,D1
  BSR.w writeword
  ADDQ.w #1,regnum

  JL_0_4A06:
RTS





L_0_4ABE:
  Dc.b $10,$12,$14,$91 ;....
  Dc.b $12 ;.
  Dc.b $80 ;.
L_0_4AC4:  Dc.b "0"
  Dc.b $12,$34 ;.4
  Dc.b $91,$32,$80 ;.2.
L_0_4ACA:  Dc.b " "
  Dc.b $12,$24 ;.$
  Dc.b $91,$22 ;."
  Dc.b $80 ;.
L_0_4AD0:  Dc.b 34,"_"
AL_0_4AD2:  Ds.w 1

.do_Exchange:
  BSR.w JL_0_4B36
  CMP.w #$2C,D0
   BNE.w syntaxerr
  MOVE.b D2,AL_0_4AD2
  MOVE.w AL_0_2A94,D1
  BSR.w writeword
  BSR.w get1bytemain
  BSR.w JL_0_4B36
  CMP.b AL_0_4AD2,D2
   BNE.w JL_0_7CDC
  MOVE.w L_0_4AD0,D1
   BSR.w writeword
  CMP.b #$2,D2
   BCS.w JL_0_4B2A
   BEQ.w JL_0_4B1E
  LEA L_0_4ACA(PC),A0
  LEA L_0_4AD0(PC),A1
BRA.w JL_0_95A2

JL_0_4B1E:
  LEA L_0_4AC4(PC),A0
  LEA L_0_4ACA(PC),A1
BRA.w JL_0_95A2

JL_0_4B2A:
  LEA L_0_4ABE(PC),A0
  LEA L_0_4AC4(PC),A1
BRA.w JL_0_95A2

JL_0_4B36:
  BSR.w getparameter
  BSR.w JL_0_8E3C
  BSR.w JL_0_9122
  BTST #$E,D2
   BEQ.w JL_0_4B4E
  MOVE.b #$4,D2

  JL_0_4B4E:
  TST.b D2
   BEQ.w JL_0_7D00
  BTST #$F,D2
   BNE.w JL_0_4B6A
  MOVE.w AL_0_29C8,D1
   BSR.w JL_0_94C0
  MOVE.w D3,D1
  BRA.w writeword

  JL_0_4B6A:
RTS


AJL_0_4B6C:
  ;movea.l comdata,A0
  ;movea.l $58(A0),A0
  MOVE.l mempool,a0
JMP _AllocPooled(a6)

L_0_4B76:
JMP (A0)                 ;allocmemfromted

.do_WBStartup:
  MOVE.w #$BF00,D1
JMP Atokejsr

.do_Pop:
  CMP.w #-$7FFA,D0
   BEQ.w JL_0_4BBE
  CMP.w #-$7FEA,D0
   BEQ.w JL_0_4C08
  CMP.w #-$7FF2,D0
   BEQ.w JL_0_4C84
  CMP.w #-$7FF5,D0
   BEQ.w get1bytemain
  CMP.w #-$7FF4,D0
   BEQ.w get1bytemain
  CMP.w #-$7FEC,D0
   BEQ.w get1bytemain
  CMP.w #-$7F45,D0
   BEQ.w get1bytemain
BRA.w syntaxerr

JL_0_4BBE:
  TST.b debugmode
   BEQ.w JL_0_4BFA
  LEA JL_0_4BE8(PC),A0
  LEA L_0_4BF2(PC),A1
   BSR.w JL_0_95A2
  MOVE.w #$C305,D1
   JSR Atokejsr
  MOVE.w JL_0_4BF8(PC),D1
   BSR.w writeword
BRA.w get1bytemain


JL_0_4BE8:
  CMPI.w #$6753,$4(A7)
  BEQ.w JL_0_4BF8
  L_0_4BF2:
  JSR $20000          ;reass

  JL_0_4BF8:
  ADDQ.w #6,A7
  JL_0_4BFA:
  MOVE.w L_0_4C06(PC),D1
  BSR.w writeword
BRA.w get1bytemain

L_0_4C06:
Dc.b "XO"

JL_0_4C08:
  MOVE.l AL_0_E9A8,D0
   BEQ.w JL_0_89E0
  MOVEA.l D0,A2
   BSR.w get1bytemain
  BSR.w AJL_0_4C5E

  AJL_0_4C1C:
  TST.b debugmode
   BEQ.w JL_0_4C40
  MOVE.l AL_0_293C,D1
  CMPI.w #$3,$C(A2)
   BCS.w writelong
  MOVE.l AL_0_2944,D1
BRA.w writelong

JL_0_4C40:
  CMPI.w #$3,$C(A2)
   BCS.w JL_0_4C54
  MOVE.l AL_0_2940,D1
 BRA.w writelong

JL_0_4C54:
  MOVE.w AL_0_293A,D1
BRA.w writeword

AJL_0_4C5E:
  MOVE.w $C(A2),D0
  TST.b debugmode
   BEQ.w JL_0_4C82
  MOVE.w #$C306,D1
  CMP.w #$3,D0
   BCS.w JL_0_4C7A
  ADDQ.w #1,D1

  JL_0_4C7A:
  MOVE.l A2,-(A7)
  JSR Atokejsr
  MOVEA.l (A7)+,A2

  JL_0_4C82:
RTS


JL_0_4C84:
  MOVE.l AL_0_CD4A,D0
   BEQ.w JL_0_7ECE
  MOVEA.l D0,A2
   BSR.w get1bytemain

  AJL_0_4C94:
  MOVE.w $C(A2),D2
  TST.b debugmode
   BEQ.w JL_0_4CB4
  MOVE.w #$C313,D1
  CMP.w #$3,D2
   BCS.w JL_0_4CB0
  ADDQ.w #1,D1
  JL_0_4CB0:
  JSR Atokejsr

  JL_0_4CB4:
  MOVEQ.l #$02,D1
  CMP.w #$3,D2
   BCS.w JL_0_4CF0
  MOVEQ.l #$04,D1
  CMP.w #$7,D2
   BCS.w JL_0_4CF0
  LEA AJL_0_CDD4,A0
  LEA AL_0_CDDC,A1
  TST.b debugmode
   BEQ.w JL_0_4CE4
  LEA do_default,A1

  JL_0_4CE4:
  BSR.w JL_0_95A2
  MOVE.w #$C003,D1
JMP Atokejsr

JL_0_4CF0:
  TST.b debugmode
   BEQ.w JL_0_4CFC
  ADDQ.w #2,D1
  JL_0_4CFC:
  LSL.w #8,D1
  LSL.w #1,D1
  OR.w AL_0_CD66,D1
BRA.w writeword

AL_0_4D0A:   Ds.l 1
AL_0_4D0E:   Ds.l 1
.do_Repeat:
  CLR.l fp0addr
  MOVE.l AL_0_E9E8,AL_0_4D0E
  MOVEQ.l #$08,D0
  MOVEA.l _execbase,A6
  MOVE.l mempool,a0
  JSR _AllocPooled(a6)
   ;jsr AJL_0_4B6C                ;allocmem8
  MOVEA.l D0,A0
  MOVE.l AL_0_4D0A(PC),(A0)
  MOVE.l A0,AL_0_4D0A
  MOVE.l destpointer,$4(A0)
RTS

str_temp:  Ds.w 3
check_for_infoextention:
  LEA str_temp(PC),A1
  CLR.w (A1)
  CLR.l $2(A1)

  JL_0_4D4E:
  MOVEQ.l #$04,D0
  JL_0_4D50:
    MOVE.b $1(A1),(A1)+
  DBF D0,JL_0_4D50
;!basic
;logging{Peek$(?str_temp)+" "}
;!asm
  LEA str_temp(PC),A1
  MOVE.b (A0),D0
  ORI.b #$20,D0
  MOVE.b D0,$5(A1)
  TST.b (A0)+
   BNE.w JL_0_4D4E
  CMPI.w #$2E69,(A1)+     ;".i"
   BNE.w JL_0_4D7A
  CMPI.l #$6E666F20,(A1)  ;"nfo "

  JL_0_4D7A:
RTS


JL_0_4D7C:
  BPL.w JL_0_4D98
  MOVE.w D0,D1
  ANDI.w #$7F80,D1
   BEQ.w JL_0_7F26
  BCLR #$F,D0
  MOVE.w D0,D4
  BSR.w get1bytemain
  BRA.w JL_0_4DAE

  JL_0_4D98:
  JSR JL_0_BF6A
  CMP.l #MaxWord,D3
   BHI.w JL_0_7F26
  TST.w D6
   BNE.w JL_0_7F26
  MOVE.w D3,D4

  JL_0_4DAE:
  MOVEQ.l #$00,D5
  CMP.w #$2C,D0
   BNE.w JL_0_4DD2
  MOVE.w D4,-(A7)
   JSR AJL_0_BF6E
  CMP.l #MaxWord,D3
   BHI.w JL_0_7F26
  TST.w D6
   BNE.w JL_0_7F26
  MOVE.w D3,D5
  MOVE.w (A7)+,D4

  JL_0_4DD2:
RTS


.do_LibJsr:
  TST.w D0
   BSR.w JL_0_4D7C
  MOVE.w #$4EB9,D1
  BSR.w writeword
  BSR.w JL_0_791C
  MOVE.w D5,D1
  ORI.w #$8000,D1
  SWAP D1
  MOVE.w D4,D1
BRA.w writelong

.do_BLibJsr:
  TST.w D0
   BSR.w JL_0_4D7C
  MOVE.w #$4EB9,D1
  BSR.w writeword
  BSR.w JL_0_791C
  MOVE.w D5,D1
  ORI.w #$C000,D1
  SWAP D1
  MOVE.w D4,D1
BRA.w writelong


.do_SysJsr:
  JSR JL_0_BF6A
  CMP.l #$10000,D3
   BCC.w JL_0_7F26
  MOVE.w D3,D1
JMP Atokejsr

.do_TokeJsr:
  BSR.w JL_0_4D7C
  MOVE.w #$4EB9,D1
  BSR.w writeword
  MOVE.l destpointer,D3
  BTST #$7,AL_0_BCF2
   BEQ.w JL_0_4E4A
  BSET #$E,D5

  JL_0_4E4A:
  BSR.w JL_0_6E86
  BSR.w JL_0_791C
BRA.w writelong

.do_VWait:
  BEQ.w JL_0_4E68
  MOVEQ.l #$02,D2
  BSR.w JL_0_9988
  MOVE.w JL_0_4E78(PC),D1
BRA.w JL_0_4E6C

JL_0_4E68:
  MOVE.w #$7000,D1
  JL_0_4E6C:
  BSR.w writeword
  MOVE.w #$C104,D1
JMP Atokejsr

JL_0_4E78:
  SUBQ.w #1,D0
  L_0_4E7A: Dc.w $3b7c,$ffff,0 ;move.w #$FFFF,$0(A5) ;noopt
  L_0_4E80: Dc.l $426d0001    ;clr.w $0(A5)

  JL_0_4E84:
  MOVE.b debugmode(PC),D1
  BEQ.b JL_0_4E92
  MOVE.w #$D500,D1
  JMP Atokejsr

  JL_0_4E92:
RTS


.do_BLITZ:
  BSET #$0,AL_0_BCF2
  BSET #$7,AL_0_BCF2
  MOVE.w #$C200,D1
  JSR Atokejsr
  TST.b debugmode
   BEQ.w JL_0_4ECC
  MOVE.w L_0_4E7A(PC),D1
  BSR.w writeword
  MOVEQ.l #-$01,D1
  BSR.w writeword
  JSR JL_0_BCBC
  BSR.w writeword

  JL_0_4ECC:
BRA.w JL_0_4E84

.do_AMIGA:
  MOVE.w #$C201,D1
BRA.w JL_0_4EDC

.do_QAMIGA:
Dc.b "2<"
Dc.b $C2,$02 ;..

JL_0_4EDC:
  BSET #$0,AL_0_BCF2
  BCLR #$7,AL_0_BCF2
  JSR Atokejsr
  TST.b debugmode
   BEQ.w JL_0_4F0A
  MOVE.w L_0_4E80(PC),D1
  BSR.w writeword
  JSR JL_0_BCBC
  BSR.w writeword
  JL_0_4F0A:
BRA.w JL_0_4E84

JL_0_4F0E:
  MOVEM.l D2-D7/A2-A4,-(A7)
  AL_0_4F12:
  MOVEM.l (A7)+,D2-D7/A2-A4
.do_ClrInt:
  JSR JL_0_BF6A
  CMP.l #$E,D3
   BCC.w JL_0_7FB0
  MOVE.w #$7000,D1
  OR.w D3,D1
  BSR.w writeword
  MOVE.w #$C101,D1
JMP Atokejsr

AL_0_4F36:   Ds.w 1
AL_0_4F38:   Ds.l 1
AL_0_4F3C:   Ds.l 1
.do_ClrErr:
  Dc.b "2<"
  Dc.b $D2 ;.
  Dc.b $02,$60 ;.`
  Dc.b $00 ;.
  Dc.b "kb"
  AJL_0_4F48:
  MOVE.w AL_0_4F36(PC),D1
   BEQ.w JL_0_7E68
  CLR.w AL_0_4F36
  MOVE.w dontwrite,D1
   BNE.w JL_0_4F6A
  MOVEA.l AL_0_4F38(PC),A0
  MOVE.l destpointer,(A0)

  JL_0_4F6A:
BRA.w get1bytemain

.do_ErrFail:
  MOVE.w #$D205,D1
JMP Atokejsr

.do_SetErr:
  MOVE.w proceduremode,D1
   BNE.w JL_0_7E2C
  MOVE.w AL_0_4F36(PC),D1
   BNE.w JL_0_7E52
  LEA AL_0_4F36,a0
  NOT.w (a0)              ;reass
  MOVE.w #$203C,D1
  BSR.w writeword
  MOVE.l destpointer,AL_0_4F3C
  BSR.w JL_0_791C
  BSR.w writelong
  MOVE.w #$D201,D1
  JSR Atokejsr
  MOVE.w #$4EF9,D1
  BSR.w writeword
  MOVE.l destpointer,AL_0_4F38
  BSR.w JL_0_791C
  BSR.w writelong
  MOVE.w dontwrite,D1
   BNE.w JL_0_4FDE
  MOVEA.l AL_0_4F3C(PC),A0
  MOVE.l destpointer,(A0)

  JL_0_4FDE:
RTS


AL_0_4FE0:  Ds.l 1
.do_SetInt:
  MOVEQ.l #-$01,D1
  BSR.w AJL_0_4298
  MOVE.w D1,AL_0_50D2
  MOVE.l AL_0_E9E8,AL_0_4FE0
  JSR JL_0_BF6A
  CMP.l #$E,D3
   BCC.w JL_0_7FB0
  ST AL_0_3F3A
  MOVE.w D3,AL_0_50D4
  MOVE.w #$7000,D1
  OR.w D3,D1
  BSR.w writeword
  MOVE.w #$223C,D1
  BSR.w writeword
  BSR.w JL_0_791C
  MOVE.l destpointer,-(A7)
  BSR.w writelong
  MOVE.w #$C100,D1
  JSR Atokejsr
  MOVE.w #$4EF9,D1
  BSR.w writeword
  BSR.w JL_0_791C
  MOVE.l destpointer,AL_0_50CC
  BSR.w writelong
  MOVEA.l (A7)+,A0
  MOVE.w dontwrite,D1
  BNE.w JL_0_5066
  MOVE.l destpointer,(A0)

  JL_0_5066:
  MOVE.l JL_0_4F0E(PC),D1
  BSR.w writelong
  TST.b debugmode
   BEQ.w JL_0_50A2
  MOVEQ.l #$02,D1
  BSR.w writetrap
  BSR.w JL_0_791C
  MOVE.l destpointer,AL_0_50D6
  BSR.w writelong
  MOVE.w AL_0_50D4,D1
  BSR.w writeword
  MOVE.w #$C30B,D1
  JSR Atokejsr

  JL_0_50A2:
  MOVE.w #$FED3,D1
  BSR.w uselib
  MOVE.w #$C102,D1
  JSR Atokejsr
  MOVE.w #$FFFF,AL_0_EC22
  MOVE.l AL_0_E9E8,AL_0_50D0
RTS

Ds.w 1
AL_0_50C8:  Ds.l 1
AL_0_50CC:  Ds.l 1
AL_0_50D0:  Ds.l 1
AL_0_50D2:  Ds.w 1
AL_0_50D4:  Ds.w 1
AL_0_50D6:  Ds.l 1
AL_0_50DA:  Ds.l 1
AL_0_50DE:  Ds.w 1

AJL_0_50E0:                ;directrap trap #15
  ADDI.l #$12,$2(A7)
  MOVE.l $2(A7),AL_0_50DA
  MOVE.w (A7),AL_0_50DE
  MOVE.l #AJL_0_5100,$2(A7)
RTE
  ;.l : input - code to compile
  ;.l : firstlocal
  ;.l : firstglobal
  ;.l : returned - 0 if no compile error, else pointer to err text
  ;.w : blitz mode status

.trap15
AJL_0_5100:
  MOVE.l AL_0_50DA(PC),-(A7)
  MOVE.w AL_0_50DE(PC),-(A7)
  MOVEM.l D0-D7/A0-A6,-(A7)
  MOVE.l destbufferend,trap15temp    ;store high buff addr
  MOVE.l destbufferstart,trap15temp2
  MOVE.l libend,templibend
  MOVE.l data1start,tempdata1start
  CLR.l hunkoffsetcounter

  MOVE.l directbuffer,a0
CNIF #debugtrap
  MOVE.l #$40000,a0
CEND
  MOVE.l a0,destbufferstart
  ADD.l #3900,a0
  MOVE.l a0,destbufferend
  TST.b exdebug
  BEQ 'l1
  MOVE.l a0,libend
  ADD.l #4000,a0
  MOVE.l a0,data1start
 'l1
  MOVE.l #AJL_0_51C6,AL_0_2B1C
  MOVE.l A7,AL_0_2B18
  MOVE.w #$FFFF,dirmode
CNIF #debugtrap=0
  MOVEA.l AL_0_50DA(PC),A1
  MOVE.w -(A1),AL_0_BCF2
  CLR.l -(A1)
  MOVE.l -(A1),firstglob
  MOVE.l -(A1),firstlocal
CEND
  CLR.w proceduremode
  MOVE.l firstglob,D0
  OR.l firstlocal,D0
  BEQ.b JL_0_5156
  NOT.w proceduremode
  JL_0_5156:
  MOVEA.l -(A1),A0
CNIF #debugtrap
  LEA testcode,a0
CEND
  MOVE.l A0,-(A7)
  MOVEA.l comdata,A1
  MOVEA.l $38(A1),A1
  L_0_5164:   JSR (A1)
  MOVEA.l (A7)+,A5
  MOVE.l directbuffer,destpointer
  TST.b exdebug
  BEQ 'noexdebug
  MOVE.l a5,a0
  MOVE.l #200,d0
 'l1
    MOVE.b 0(a0,d0.l),8(a0,d0.l)
  DBF d0,'l1
  CNIF #debugtrap
  MOVE.l destbufferstart,destpointer
  CEND
  MOVE.l destpointer,a0
  MOVE.w #$207c,(a0)+
  MOVE.l a5,d0
  ADD.l #$206,d0               ;constant from debuglib
  MOVE.l d0,(a0)+
  MOVE.l a0,destpointer
  MOVE.l a5,a0
  MOVE.w #$8039,(a0)+         ;TokeJsr 164 (inputoutputlib) LSL 7+4
  MOVE.l #"$520",(a0)+
  MOVE.w #"4:",(a0)+
 'noexdebug

  CLR.w dontwrite
  MOVE.w #$FFFF,AL_0_EC22
  BSR.w compilepass
  TST.b exdebug
  BEQ 'noexdebug2
  JSR JL_0_6C76
 'noexdebug2

  CLR.w proceduremode
  BSR.w AJL_0_4298
  MOVE.w #$4EF9,D1
  BSR.w writeword
  MOVE.l AL_0_50DA(PC),D1
  BSR.w writelong
  MOVE.w dontwrite,D0
   BNE.w JL_0_8168
  MOVE.l directbuffer,$3E(A7)

  JL_0_51B0:
  CLR.w dirmode
  MOVE.w AL_0_50DE(PC),$3C(A7)
  MOVE.l trap15temp,destbufferend
  MOVE.l trap15temp2,destbufferstart
  MOVE.l tempdata1start,data1start
  MOVE.l templibend,libend
  MOVEM.l (A7)+,D0-D7/A0-A6
  BSR.w Aclearcache              ;selden used
RTR

AJL_0_51C6:
  MOVEA.l AL_0_50DA(PC),A0
  SUBQ.w #2,A0
  MOVE.l D0,-(A0)
BRA.w JL_0_51B0

JL_0_51D2:
  MOVE.w $6(A3),D1
  BSR.w uselib
  MOVE.w $A(A1),-(A7)
  ADDQ.w #8,A3
  MOVE.w (A3)+,-(A7)
  MOVE.l A3,-(A7)
  MOVEQ.l #$00,D3
  JL_0_51E6:
  MOVE.b (A3)+,D1
   BMI.w JL_0_520A
  MOVEQ.l #$03,D2
  ADDQ.w #1,D3
  MOVEM.l D3/A3,-(A7)
   BSR.w JL_0_996C
  MOVEM.l (A7)+,D3/A3
  CMP.w #$2C,D0
   BEQ.w JL_0_51E6
  TST.b (A3)
   BPL.w syntaxerr
JL_0_520A:  MOVEA.l (A7)+,A3
  SUBQ.w #1,D3
   BPL.w JL_0_521A
   BSR.w get1bytemain
 BRA.w JL_0_524E

JL_0_521A:  TST.b (A3)+
   BPL.w JL_0_521A
  SUBQ.w #1,A3
JL_0_5222:  MOVEQ.l #$00,D1
  MOVE.b -(A3),D1
  BTST #$4,D1
   BNE.w JL_0_523A
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$201F,D1
 BRA.w JL_0_5246

JL_0_523A:  ANDI.w #$7,D1
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$205F,D1
JL_0_5246:   BSR.w writeword
   DBF D3,JL_0_5222
JL_0_524E:  MOVE.w (A7)+,AL_0_2A5C
  MOVE.w (A7)+,AL_0_2A58
  MOVE.l AL_0_2A56,D1
   BSR.w writelong
  MOVE.l AL_0_2A5A,D1
BRA.w writelong

JL_0_526E:
  MOVE.l AL_0_E8EE,D4
  SUB.l data1start,D4
  ADD.l #10000,d4
  MOVE.l libend,D3
  SUB.l destbufferend,D3
  ADD.l #40000,d3
  MOVE.l AL_0_959E,D2
  SUB.l destbufferstart,D2
  ADD.l #20000,d2
  MOVE.l databuffer,D5
  ADD.l #10000,D5
  BRA JL_0_52E8

  MOVE.l objectbuffer,D2
  LSR.l #1,D2
  ADD.l objectbuffer,D2
  MOVE.l libsbuffer,D3
  LSR.l #1,D3
  ADD.l libsbuffer,D3
  MOVE.l systembuffer,D4
  LSR.l #1,D4
  ADD.l systembuffer,D4
  MOVE.l databuffer,D5
  LSR.l #1,D5
  ADD.l databuffer,D5
  BRA.w JL_0_52E8

  JL_0_52AA:
  MOVE.l AL_0_959E,D2
  SUB.l destbufferstart,D2
  SUB.l savefuncspace,d2
  ;ADD.l morememadd,d2
  TST.w debugversion
   BNE.b JL_0_52C4
  ADDI.l #$800,D2
  JL_0_52C4:
  MOVE.l libend,D3
  SUB.l destbufferend,D3
  ;ADD.l morememadd,d3
  MOVE.l AL_0_E8EE,D4
  SUB.l data1start,D4
  ;ADD.l morememadd,d4
  MOVE.l AL_0_E8E6,D5
  SUB.l AL_0_E8E2,D5
  ;ADD.l morememadd,d5
  CLR.l morememadd

  JL_0_52E8:
  BSR.w JL_0_532E
  BNE.w JL_0_52F4
  BRA.w init_buffers

  JL_0_52F4:
RTS

JL_0_52F6:
  MOVEA.l _execbase,A6
  MOVE.l AL_0_EC4E,D0
  BEQ.w JL_0_5314
  CLR.l AL_0_EC4E
  MOVEA.l destbufferstart,A1
  MOVE.l mempool,a0
  JMP _FreeVec(A6)

  JL_0_5314:
RTS


.init_buffers:
  MOVE.l objectbuffer,D2
  MOVE.l libsbuffer,D3
  MOVE.l systembuffer,D4
  MOVE.l databuffer,D5

  JL_0_532E:
  MOVE.w #$FFFF,AL_0_E84C
  BSR.w JL_0_52F6
  ADDQ.l #1,D2
  BCLR #$0,D2
  ADDQ.l #1,D3
  BCLR #$0,D3
  ADDQ.l #1,D4
  BCLR #$0,D4
  TST.l d5
  BNE 'l1
 'l1
  ADDQ.l #1,D5
  BCLR #$0,D5
  MOVE.l D2,D0
  ADD.l D3,D0
  ADD.l D4,D0
  ADD.l D5,D0
  ADD.l #moremem,d0
  MOVE.l D0,D6
  MOVE.l #MemfPublic_MemfClear,D1
  MOVE.l mempool,a0
  JSR _AllocVec(a6)                 ;alloc mem for objectbuffer
   ;jsr AJL_0_4B6C
  TST.l D0
  BEQ.w exit_initbuffers
  MOVE.l D6,AL_0_EC4E
  MOVE.l D2,objectbuffer
  MOVE.l D3,libsbuffer
  MOVE.l D4,systembuffer
  MOVE.l D5,databuffer
  MOVE.l D0,destbufferstart
  MOVE.l comdata,a0
  MOVE.l d0,$1f0(a0)
  ADD.l D2,D0
  MOVE.l D0,destbufferend
  ADD.l D3,D0
  MOVE.l D0,data1start
  ADD.l D4,D0
  MOVE.l D0,AL_0_E8E2
  ADD.l D5,D0
  MOVE.l D0,AL_0_E902

  exit_initbuffers:
RTS


L_0_53B4:  Ds.w 1
  Dc.b $00,$01,$00,$00 ;....      ; 1
  Dc.b $00,$0A,$00,$00 ;....      ; 10
  Dc.b $00,$64,$00,$00 ;.d..      ; 100
  Dc.b $03,$E8,$00 ;...           ; 1000
  Dc.b $00,$27,$10 ;.'.           ; 10000
  Dc.b $00,$01,$86,$A0 ;....      ; 100000
  Dc.b $00 ;.
  Dc.b $0F ;.
  Dc.b "B@",0
  Dc.b $98,$96,$80 ;...
  Dc.b $05,$F5,$E1 ;...
  Dc.b $00,$3B,$9A ;.;.
  Dc.b $CA ;.
  Dc.b $00 ;.

AJL_0_53DC:         ; D2
  MOVEQ.l #$00,D1
  MOVEQ.l #$24,D3   ; "$"
  JL_0_53E0:
  MOVEQ.l #$30,D4   ; "0"

  JL_0_53E2:
    CMP.l L_0_53B4(PC,D3.W),D2
    BCS.w JL_0_53F4
    SUB.l L_0_53B4(PC,D3.W),D2
    ADDQ.w #1,D4
  BRA.w JL_0_53E2

  JL_0_53F4:
  CMP.b #"0",D4
  BNE.w JL_0_5402
  TST.w D1
  BEQ.w JL_0_5406
  JL_0_5402:
  MOVE.b D4,(A0)+
  MOVEQ.l #$01,D1
  JL_0_5406:
  SUBQ.w #4,D3
  BPL.w JL_0_53E0
  TST.w D1
  BNE.w JL_0_5416
  MOVE.b #"0",(A0)+

  JL_0_5416:
  CLR.b (A0)
RTS

str_residentrequester:  Dc.b "Name of Resident File to Create",0
str_residentpath: Ds.l 48
str_residentname: Ds.l 48

.menu_createresidentfile:
  MOVE.l macrobase,D0
   BNE.w create_residentfile
  MOVE.l newtype_string,D0
   BNE.w create_residentfile
  MOVEA.l labelbase,A2
  JL_0_55D4:
    CMPA.w #$0,A2
     BEQ.w JL_0_55EE
    CMPI.l #$1,$4(A2)
     BEQ.w create_residentfile
    MOVEA.l (A2),A2
  BRA.w JL_0_55D4
  JL_0_55EE:
  !basic
  error{"There is no data to be stored in a resident file.\\nTry again to create the resident after one compile pass."}
  !asm
RTS


.create_residentfile:
  MOVEA.l comdata,A3
  MOVEA.l $18(A3),A3
  LEA str_residentrequester,A2
  LEA str_residentpath,A0
  LEA str_residentname,A1
  !basic
  Poke$ ?str_residentpath,my_residentsdir$
  Poke$ ?str_residentname,".res"
  !asm
  L_0_560C:
  JSR (A3)

  BEQ.w JL_0_55EE
  MOVE.l D0,D1
  MOVE.l #HUNK_RELOC_8__MODE_NEWFILE,D2
  MOVEA.l _dosbase(PC),A6
  JSR _Open(A6)
  MOVE.l D0,D7
  BEQ.w JL_0_55EE
  MOVEM.l d2-d7/a0-a6,-(a7)
  LEA devo,a0
  LEA ptr_parameterstore,a1
 'l1
    MOVE.b (a0)+,(a1)+
  BNE 'l1
  MOVEQ #13,d2
  JSR findlabel2
  BNE 'd
  TST.l 8(a2)
  BEQ 'd2
  !basic
  error{"Cannot create Resident with developdebug 1"}
  !asm
  MOVEM.l (a7)+,d2-d7/a0-a6
  MOVEA.l _dosbase(PC),A6
  MOVE.l d7,d1
  JSR _Close(a6)
  BRA JL_0_55EE
 'd2
 'd
  MOVEM.l (a7)+,d2-d7/a0-a6
  BSR.w call_setpointerbusy

  BSR.w AJL_0_7962
  MOVE.l D7,D1
  MOVE.l #AL_0_82E,D2
  MOVEQ.l #$20,D3
  MOVEA.l _dosbase(PC),A6
  JSR _Write(A6)
  MOVEQ.l #$00,D6
  BSR.w JL_0_583C
  BSR.w JL_0_57BC
  BSR.w JL_0_5890
  MOVE.l D6,D3
  ADDQ.l #3,D3
  ANDI.l #$FFFFFFFC,D3
  MOVE.l D3,-(A7)
  SUB.l D6,D3
  BEQ.w JL_0_566E
  MOVE.l #AJL_0_570C,D2
  MOVE.l D7,D1
  JSR _Write(A6)

  JL_0_566E:
   MOVE.l hunkoffsetcounter,AL_0_852
   BEQ.w JL_0_56BA
  MOVE.l D7,D1
  MOVE.l #AL_0_84E,D2
  MOVEQ.l #$0C,D3
   JSR _Write(A6)
  MOVEA.l hunkoffsetbase,A2

  JL_0_5690:
  CMPA.w #$0,A2
   BEQ.w JL_0_56AC
  LEA $4(A2),A1
  MOVE.l D7,D1
  MOVE.l A1,D2
  MOVEQ.l #$04,D3
   JSR _Write(A6)
  MOVEA.l (A2),A2
 BRA.w JL_0_5690

  JL_0_56AC:  MOVE.l D7,D1
  MOVE.l #AL_0_EC14,D2
  MOVEQ.l #$04,D3
  JSR _Write(A6)

  JL_0_56BA:  MOVE.l D7,D1
  MOVE.l #AL_0_85A,D2
  MOVEQ.l #$04,D3
   JSR _Write(A6)
  MOVE.l (A7)+,D0
  LSR.l #2,D0
  MOVE.l D0,AL_0_EC60
  MOVE.l D7,D1
  MOVEQ.l #$14,D2
  MOVEQ.l #-$01,D3
  JSR _Seek(A6)
  MOVE.l D7,D1
  MOVE.l #AL_0_EC60,D2
  MOVEQ.l #$04,D3
   JSR _Write(A6)
  MOVE.l D7,D1
  MOVEQ.l #$1C,D2
  MOVEQ.l #-$01,D3
   JSR _Seek(A6)
  MOVE.l D7,D1
  MOVE.l #AL_0_EC60,D2
  MOVEQ.l #$04,D3
   JSR _Write(A6)
  MOVE.l D7,D1
   JSR _Close(A6)
BRA.w call_setpointernormal

AJL_0_570C:
  ADDQ.w #5,D1
  ADDQ.b #8,D0
  JL_0_5710:
    CMPA.w #$0,A2
    BEQ.w JL_0_5722
     BSR.w JL_0_5724
    MOVEA.l (A2),A2
  BRA.w JL_0_5710

  JL_0_5722:
RTS

JL_0_5724:
  MOVEQ.l #$00,D3
  MOVE.b $0(A2,D5.W),D3
  ADDQ.w #1,D3
  BCLR #$0,D3
  MOVE.l (A2),-(A7)
   BEQ.w JL_0_5740
   BSR.w JL_0_574E
  ADD.l D3,D6
  MOVE.l D6,(A2)
  SUB.l D3,D6

  JL_0_5740:
   ADD.l D3,D6
  MOVE.l A2,D2
  MOVE.l D7,D1
   JSR _Write(A6)
  MOVE.l (A7)+,(A2)
RTS

JL_0_574E:
  MOVE.l D6,D2
  BRA.w addhunkoffset

  JL_0_5754:
    CMPA.w #$0,A2
     BEQ.w JL_0_5792
    MOVEA.l newtypebase,A1
    MOVEQ.l #$00,D1

    JL_0_5764:
      CMPA.w #$0,A1
      BEQ.w JL_0_577C
      CMPA.l $A(A2),A1
       BEQ.w JL_0_577C
      ADDQ.w #1,D1
      MOVEA.l (A1),A1
    BRA.w JL_0_5764

    JL_0_577C:
    MOVE.w $A(A2),-(A7)
    MOVE.w D1,$A(A2)
     BSR.w JL_0_5724
    MOVE.w (A7)+,$A(A2)
    MOVEA.l (A2),A2
  BRA.w JL_0_5754

  JL_0_5792:
RTS

JL_0_5794:
  MOVEQ.l #$00,D0
  JL_0_5796:
  CMPA.w #$0,A2
   BEQ.w JL_0_57A6
  ADDQ.w #1,D0
  MOVEA.l (A2),A2
  BRA.w JL_0_5796

  JL_0_57A6:
  MOVE.w D0,AL_0_EC60
  MOVE.l D7,D1
  MOVE.l #AL_0_EC60,D2
  MOVEQ.l #$02,D3
  ADDQ.l #2,D6
  JMP _Write(A6)

  JL_0_57BC:
   TST.b resdisable
   BEQ 'l1
   MOVE.l currentmacroaddr,a3
   CMP.l #0,a3
   BEQ 'l1
   MOVE.l (a3),a3
   BRA 'l2
  'l1
  MOVEA.l macrobase,A3
  'l2  MOVEA.l A3,A2
  BSR.w JL_0_5794
  JL_0_57C8:  CMPA.w #$0,A3
   BEQ.w JL_0_583A
  MOVE.l D6,D5
  MOVE.l (A3),-(A7)
  MOVE.l $4(A3),-(A7)
  MOVEQ.l #$00,D3
  MOVE.b $C(A3),D3
  ADDQ.w #1,D3
  BCLR #$0,D3
  ADD.l D3,D6
  TST.w $8(A3)
   BEQ.w JL_0_57FA
  MOVE.l D6,$4(A3)
  MOVE.l D5,D2
  ADDQ.l #4,D2
   BSR.w addhunkoffset
  JL_0_57FA:  MOVEQ.l #$00,D4
  MOVE.w $8(A3),D4
  ADDQ.w #1,D4
  BCLR #$0,D4
  ADD.l D4,D6
  TST.l (A3)
   BEQ.w JL_0_5816
  MOVE.l D6,(A3)
  MOVE.l D5,D2
   BSR.w addhunkoffset
  JL_0_5816:  MOVE.l A3,D2
  MOVE.l D7,D1
   JSR -$30(A6)
  TST.l D4
   BEQ.w JL_0_582E
  MOVE.l (A7),D2
  MOVE.l D4,D3
  MOVE.l D7,D1
   JSR -$30(A6)
  JL_0_582E:  MOVE.l (A7)+,$4(A3)
  MOVE.l (A7)+,(A3)
  MOVEA.l (A3),A3
 BRA.w JL_0_57C8

  JL_0_583A:
RTS



JL_0_583C:
  TST.b resdisable
  BEQ 'l1
  MOVE.l AL_0_E34E,a3
  CMP.l #0,a3
  BEQ 'l1
  MOVE.l (a3),a3
  BRA 'l2
'l1
  MOVEA.l newtype_string,A3
'l2
  MOVEA.l A3,A2
   BSR.w JL_0_5794
JL_0_5848:  CMPA.w #$0,A3
   BEQ.w JL_0_588E
  MOVE.l D6,-(A7)
  MOVEA.l $4(A3),A2
  MOVEQ.l #$0E,D5
   BSR.w JL_0_5754
  MOVE.l (A7)+,D0
  MOVE.l $4(A3),-(A7)
  MOVE.l D0,$4(A3)
  MOVE.l D6,D2
  ADDQ.l #4,D2
   BSR.w addhunkoffset
  MOVEQ.l #$00,D3
  MOVE.b $A(A3),D3
  ADDQ.w #1,D3
  BCLR #$0,D3
  ADD.l D3,D6
  MOVE.l A3,D2
  MOVE.l D7,D1
   JSR -$30(A6)
  MOVE.l (A7)+,$4(A3)
  MOVEA.l (A3),A3
 BRA.w JL_0_5848

JL_0_588E: RTS

JL_0_5890:
   TST.b resdisable
   BEQ 'l1
   MOVE.l currentlabeladdr,a2
   CMP.l #0,a2
   BEQ 'l1
   MOVE.l (a2),a2
   BRA 'l2
'l1
   MOVEA.l labelbase,A2
'l2 MOVEQ.l #$00,D0
JL_0_5898:  CMPA.w #$0,A2
   BEQ.w JL_0_58B4
  CMPI.l #$1,$4(A2)
   BNE.w JL_0_58AE
  ADDQ.w #1,D0
JL_0_58AE:  MOVEA.l (A2),A2
 BRA.w JL_0_5898

JL_0_58B4:  MOVE.w D0,AL_0_EC60
  MOVE.l D7,D1
  MOVE.l #AL_0_EC60,D2
  MOVEQ.l #$02,D3
  ADDQ.l #2,D6
   JSR -$30(A6)
   TST.b resdisable
   BEQ 'l1
   MOVE.l currentlabeladdr,a2
   CMP.l #0,a2
   BEQ 'l1
   MOVE.l (a2),a2
   BRA JL_0_58D0
'l1  MOVEA.l labelbase,A2          ;write resident labels
JL_0_58D0:  CMPA.w #$0,A2
   BEQ.w JL_0_5912
  CMPI.l #$1,$4(A2)
   BNE.w JL_0_590C
   MOVEQ.l #$00,D3
  MOVE.b $12(A2),D3
  ADDQ.w #1,D3
  BCLR #$0,D3
  MOVE.l D6,D2
  ADD.l D3,D6
skipf  MOVE.l (A2),-(A7)
  TST.l (A2)
   BEQ.w JL_0_5902
  MOVE.l D6,(A2)
   BSR.w addhunkoffset
JL_0_5902:  MOVE.l A2,D2
  MOVE.l D7,D1
   JSR -$30(A6)
  MOVE.l (A7)+,(A2)
JL_0_590C:  MOVEA.l (A2),A2
 BRA.w JL_0_58D0

  JL_0_5912:
RTS


.check_residentpath
    !basic
    MOVE.l ptr_resfile,d0
    resfile$ = Peek$(Peek.l(?ptr_resfile))
    tests.b = Instr(resfile$,"/")
    testc.b = Instr(resfile$,":")
    If tests=0 AND testc=0
      resfile$ = dos_AddPart{my_residentsdir$,resfile$}
      Poke.l ?ptr_resfile,&resfile$
    EndIf
    !asm
RTS





.reloadresident:
  MOVE.l A7,AL_0_2B18
  ;JSR free_unusedfunctions
  MOVE.l #next_resentry,AL_0_2B1C
  MOVE.w #$FFFF,AL_0_8AFE
  BSR.w Aclearallvars
  BSR.w free_residents

  LEA residents_table,A5
  MOVEQ.l #$07,D6

  JL_0_593C:
    TST.b (A5)
    BEQ.w next_resentry
    MOVE.l A5,ptr_resfile
    BSR check_residentpath
    MOVE.l ptr_resfile,d1
    JSR _LoadSeg(A6)
    MOVE.l D0,$40(A5)
    BNE.w JL_0_5954
    BSR.w JL_0_80AE

    JL_0_5954:
    MOVEA.l D0,A3
    ADDA.l A3,A3
    ADDA.l A3,A3
    ADDQ.w #4,A3
    BSR.w JL_0_5A9E
    BSR.w JL_0_5A62            ;add macros to list
    BSR.w JL_0_5A32            ;read labels

    next_resentry:
    LEA $44(A5),A5
  DBF D6,JL_0_593C

  MOVE.l #free_residents,AL_0_2B1C

  MOVEA.l newtype_string,A3
  MOVEQ.l #$0B,D7
  BSR.w JL_0_59A0

  MOVEA.l macrobase,A3
  MOVEQ.l #$d,D7
  BSR.w JL_0_59A0

  MOVEA.l AL_0_E94A,A3
  MOVEQ.l #$19,D7
  BSR.w JL_0_59A0

  skipresload:
RTS

JL_0_59A0:
  MOVEA.l A3,A4

  JL_0_59A2:
    CMPA.w #$0,A4
    BEQ.w JL_0_59D8

    LEA ptr_parameterstore,A0
    LEA $0(A4,D7.W),A1
    MOVEQ.l #-$01,D2

    JL_0_59B6:
      ADDQ.w #1,D2
      MOVE.b (A1)+,(A0)+
    BNE.w JL_0_59B6
    MOVEA.l A3,A2

    JL_0_59C0:
    BSR.w JL_0_8CDE
    BNE.w JL_0_59D2
    CMPA.l A2,A4
    BEQ.w 'l1
    MOVE.l a1,a5
    BRA JL_0_8096
   'l1
    BRA.w JL_0_59C0

    JL_0_59D2:
    MOVEA.l (A4),A4
  BRA.w JL_0_59A2

  JL_0_59D8:
RTS

.free_residents:
  MOVEA.l _dosbase,A6

  LEA newtype_string,A0
  MOVE.l A0,AL_0_E34E
  CLR.l (A0)

  LEA macrobase,A0
  MOVE.l A0,currentmacroaddr
  CLR.l (A0)

  LEA labelbase,A0
  MOVE.l A0,currentlabeladdr
  CLR.l (A0)
  CLR.w AL_0_E352

  MOVEA.l comdata,A2
  MOVE.b debugmode,$7ee(a2)

  LEA residents_table,A2
  MOVEQ.l #$07,D2
  JL_0_5A18:
    MOVE.l $40(A2),D1
    BEQ.w JL_0_5A28
      CLR.l $40(A2)
      JSR _UnLoadSeg(A6)
    JL_0_5A28:
    LEA $44(A2),A2
  DBF D2,JL_0_5A18
RTS

JL_0_5A32:
  MOVE.w (A3)+,D1
  BEQ.w JL_0_5A60
  MOVEA.l currentlabeladdr,A2
  MOVE.l A3,(A2)
  SUBQ.w #1,D1
  JL_0_5A42:
    MOVEA.l A3,A2
    MOVEA.l (A3),A3
  DBF D1,JL_0_5A42

  CLR.l (a2)                  ;bugfix for object
  MOVE.l A2,currentlabeladdr
  MOVEA.l A2,A3
  MOVEQ.l #$00,D0
  MOVE.b $12(A3),D0
  ADDQ.w #1,D0
  BCLR #$0,D0
  ADDA.w D0,A3

  JL_0_5A60:
RTS


JL_0_5A62:
  MOVE.w (A3)+,D1
  BEQ.w JL_0_5A9C

  MOVEA.l currentmacroaddr,A2
  MOVE.l A3,(A2)
  SUBQ.w #1,D1
  JL_0_5A72:
    MOVEA.l A3,A2
    MOVEA.l (A3),A3
  DBF D1,JL_0_5A72

  MOVE.l A2,currentmacroaddr
  MOVEA.l A2,A3
  MOVEQ.l #$00,D0
  MOVE.b $C(A3),D0
  ADDQ.w #1,D0
  BCLR #$0,D0
  MOVE.w $8(A3),D1
  ADDQ.w #1,D1
  BCLR #$0,D1
  ADDA.w D0,A3
  ADDA.w D1,A3

  JL_0_5A9C:
RTS


JL_0_5A9E:
  MOVE.w (A3)+,D1
  BEQ.w JL_0_5B38
  MOVE.w D1,-(A7)
  SUBQ.w #1,D1
  MOVEA.l AL_0_E34E,A2
  MOVE.l A2,-(A7)

  JL_0_5AB0:
      MOVE.l (A3),D0
      BEQ.w JL_0_5ABC
      MOVEA.l D0,A3
    BRA.w JL_0_5AB0

    JL_0_5ABC:
    MOVE.b $E(A3),D0
    ADDQ.w #1,D0
    BCLR #$0,D0
    ADDA.w D0,A3
    MOVE.l A3,(A2)
    MOVEA.l A3,A2
    MOVEQ.l #$00,D0
    MOVE.b $A(A3),D0
    ADDQ.w #1,D0
    BCLR #$0,D0
    ADDA.w D0,A3
  DBF D1,JL_0_5AB0

  MOVEA.l (A7)+,A0
  MOVEA.l (A0),A0
  JL_0_5AE2:
    CMPA.w #$0,A0
    BEQ.w JL_0_5B2A
    MOVEA.l $4(A0),A1

    JL_0_5AEE:
      CMPA.w #$0,A1
      BEQ.w JL_0_5B24
      MOVE.w $A(A1),D0
      MOVEA.l newtypebase,A4
      CMP.w #$7,D0
      BCS.w JL_0_5B0E
      SUB.w AL_0_E352,D0
      JL_0_5B0E:
      SUBQ.w #1,D0
      BMI.w JL_0_5B1A

      JL_0_5B14:
        MOVEA.l (A4),A4
      DBF D0,JL_0_5B14

      JL_0_5B1A:
      MOVE.l A4,$A(A1)
      MOVEA.l (A1),A1
    BRA.w JL_0_5AEE

    JL_0_5B24:
    MOVEA.l (A0),A0
  BRA.w JL_0_5AE2

  JL_0_5B2A:
  MOVE.w (A7)+,D0
  ADD.w D0,AL_0_E352
  MOVE.l A2,AL_0_E34E

  JL_0_5B38:
RTS


.makeasmtable:  ;make a table of pointers to ASM data
  LEA tokens,A0
  MOVE.w #$003A,D0            ; $003A : 58 dec
  JL_0_5BD0:                  ; diese Tokens ueberspringen
    MOVEA.l (A0),A0
  DBF D0,JL_0_5BD0

  MOVEA.l #asmpnts,A1          ;create tokentab
  MOVE.w #$0076,D0            ; $0076 : 118 dec

  JL_0_5BE0:
    LEA $6(A0),A2
    JL_0_5BE4:
      TST.b (A2)+
    BNE.w JL_0_5BE4

    JL_0_5BEA:
      TST.b (A2)+
    BNE.w JL_0_5BEA

    ADDQ.w #1,A2
    EXG.l D1,A2
    BCLR #$0,D1
    EXG.l D1,A2
    MOVE.l A2,(A1)+
    MOVEA.l (A0),A0
  DBF D0,JL_0_5BE0
RTS

JL_0_5C04:
  BSR.w JL_0_6062
  MOVEQ.l #$0B,D5
RTS

AL_0_5C0C:  Ds.w 1
JL_0_5C0E:
  MOVE.w #$48E7,D1
  BSR.w writeword
  MOVE.w #$000F,D2
  SUB.w D4,D2
  MOVEQ.l #-$01,D1
  BCLR D2,D1
  BSR.w writeword
  MOVEQ.l #-$01,D1
  BCLR D4,D1
  MOVE.w D1,AL_0_5C0C
RTS

JL_0_5C30:
  MOVE.w #$4CDF,D1
  BSR.w writeword
  MOVE.w AL_0_5C0C(PC),D1
BRA.w writeword

.do_PutReg:
  BSR.w JL_0_5D22
  CMP.w #$2C,D0
   BNE.w syntaxerr
  MOVE.l #$48E7FFFE,D1
   BSR.w writelong
  MOVE.w D4,D1
  ORI.w #$2F00,D1
   BSR.w writeword
   BSR.w get1bytemain
   BSR.w getparameter
   BSR.w JL_0_8E3C
   BSR.w JL_0_9122
   BTST #$E,D2
   BEQ.w JL_0_5C80

   JL_0_5C78:
   MOVE.b #$3,D2
   BRA.w JL_0_5C8E

  JL_0_5C80:
  TST.b D2
   BEQ.w JL_0_5C78
  CMP.b #$7,D2
   BEQ.w JL_0_5C78
  JL_0_5C8E:
  BTST #$F,D2
   BNE.w JL_0_5CA4
  MOVE.w #$45ED,D1
   BSR.w writeword
  MOVE.w D3,D1
   BSR.w writeword
  JL_0_5CA4:
  MOVE.w #$201F,D1
   BSR.w writeword
  MOVE.w #$1480,D1
  CMP.b #$1,D2
   BEQ.w JL_0_5CC8
  EORI.w #$3000,D1
  CMP.b #$2,D2
   BNE.w JL_0_5CC8
  ORI.w #$1000,D1
  JL_0_5CC8:
  BSR.w writeword
  MOVE.l #$4CDF7FFF,D1
BRA.w writelong

.do_setreg:
  BSR.w JL_0_5D22
  CMP.w #$2C,D0
   BNE.w syntaxerr
   BSR.w JL_0_5C0E
  MOVE.w D4,-(A7)
  MOVEQ.l #$03,D2
   BSR.w eval
  MOVE.w (A7)+,D1
   BEQ.w JL_0_5D1A
  CMP.w #$8,D1
   BCC.w JL_0_5D0C
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$2000,D1
   BSR.w writeword
  BRA.w JL_0_5D1A

  JL_0_5D0C:
  SUBQ.w #8,D1
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$2040,D1
  BSR.w writeword

  JL_0_5D1A:
BRA.w JL_0_5C30

JL_0_5D1E:
  BSR.w get1bytemain

  JL_0_5D22:
  ORI.w #$20,D0
  CMP.w #$64,D0
   BEQ.w JL_0_5D4E
  CMP.w #$61,D0
   BNE.w syntaxerr
   BSR.w JL_0_5D4E
  ADDQ.w #8,D4
RTS

JL_0_5D3E:
  !fget
 ;bsr.w get1bytemain

  ORI.w #$20,D0

  JL_0_5D46:
  CMP.w #$61,D0
  BNE.w syntaxerr

  JL_0_5D4E:
  !fget
  ;bsr.w get1bytemain
  SUBI.w #$30,D0
   BMI.w syntaxerr
  CMP.w #$7,D0
   BHI.w syntaxerr
  MOVE.w D0,D4
  !fget
RTS
 ;bra.w get1bytemain

JL_0_5D68:
  ADDQ.w #8,D4
  JL_0_5D6A:
  MOVEQ.l #$00,D5
  SUBI.w #$30,D4
  JL_0_5D70:
  CMP.w #$2D,D0
   BEQ.w JL_0_5D9E
  CMP.w #$2F,D0
   BEQ.w JL_0_5D8C
BRA.w syntaxerr

JL_0_5D84:
  BSET D4,D5
  JL_0_5D86:
  MOVE.w D5,D4
  MOVEQ.l #$0F,D5
RTS

JL_0_5D8C:
  BSET D4,D5
  BSR.w JL_0_5D1E
  !compare3;bsr.w JL_0_5FC0
  BNE.w JL_0_5D70
BRA.w JL_0_5D84

JL_0_5D9E:
  MOVE.w D4,D1
   BSR.w JL_0_5D1E
  CMP.w D4,D1
   BLS.w JL_0_5DAC
  EXG.l D4,D1
  JL_0_5DAC:
  BSET D1,D5
  ADDQ.w #1,D1
  CMP.w D4,D1
   BLS.w JL_0_5DAC
  !compare3;bsr.w JL_0_5FC0
  BNE.w JL_0_5D70
BRA.w JL_0_5D86

  JL_0_5DC2:
  MOVEA.l A5,A4
   ;bsr.w get1bytemain
   !fget
  CMP.w #$23,D0
   BEQ.w JL_0_5C04
  CMP.w #$28,D0
   BEQ.w JL_0_5DFE
  CMP.w #$2D,D0
   BNE.w JL_0_5E20
   !fget ;bsr.w get1bytemain       -(
  CMP.w #$28,D0
   BNE.w JL_0_5F4E
   BSR.w JL_0_5D3E
  CMP.w #$29,D0
   BNE.w syntaxerr
  MOVEQ.l #$04,D5
 ;bra.w get1bytemain
  !fget
RTS

JL_0_5DFE:
  BSR.w JL_0_5D3E
  CMP.w #$29,D0
   BNE.w syntaxerr
  !fget; bsr.w get1bytemain
  CMP.w #$2B,D0
   BEQ.w JL_0_5E1A
  MOVEQ.l #$02,D5
RTS

JL_0_5E1A:
  MOVEQ.l #$03,D5
  !fget ;bra.w get1bytemain
RTS

JL_0_5E20:
  ORI.w #$20,D0
  MOVE.w D0,D1
   ;bsr.w get1bytemain
   !fget
  CMP.w #$64,D1
   BNE.w JL_0_5E6C
  CMP.w #$30,D0
   BCS.w JL_0_5EAE
  CMP.w #$37,D0
   BHI.w JL_0_5EAE
  MOVE.w D0,D4
   !fget;bsr.w get1bytemain
   !compare3;bsr.w JL_0_5FC0
   BEQ.w JL_0_5E64
  CMP.w #$2D,D0
   BEQ.w JL_0_5D6A
  CMP.w #$2F,D0
   BEQ.w JL_0_5D6A
BRA.w JL_0_5EB8

JL_0_5E64:
  MOVEQ.l #$00,D5
  SUBI.w #$30,D4
RTS

JL_0_5E6C:  CMP.w #$61,D1
   BNE.w JL_0_5EAE
  CMP.w #$30,D0
   BCS.w JL_0_5EAE
  CMP.w #$37,D0
   BHI.w JL_0_5EAE
  MOVE.w D0,D4
   !fget;bsr.w get1bytemain
   !compare3;bsr.w JL_0_5FC0
   BEQ.w JL_0_5EA6
  CMP.w #$2D,D0
   BEQ.w JL_0_5D68                 ;movem
  CMP.w #$2F,D0
   BEQ.w JL_0_5D68
 BRA.w JL_0_5EB8

JL_0_5EA6:
  MOVEQ.l #1,d5
  SUBI.w #$30,D4
  BRA 'l10
  ADDQ.w #8,d4
  MOVEQ #0,d5
  BSET d4,d5
  MOVE.w d5,d4
  MOVEQ.l #$0f,D5  ;01
'l10 RTS

JL_0_5EAE:  ORI.w #$20,D0
  MOVE.w D0,D4
   !fget;bsr.w get1bytemain
JL_0_5EB8:   !compare3;bsr.w JL_0_5FC0
   BNE.w JL_0_5EF2
  CMP.w #$73,D1
   BNE.w JL_0_5EF2
  CMP.w #$70,D4
   BNE.w JL_0_5EDE
   !compare3;bsr.w JL_0_5FC0
   BNE.w JL_0_5F4E
  MOVEQ.l #$07,D4
  MOVEQ.l #$01,D5
 RTS

JL_0_5EDE:  CMP.w #$72,D4
   BNE.w JL_0_5F4E
   !compare3;bsr.w JL_0_5FC0
   BNE.w JL_0_5F4E
  MOVEQ.l #$0D,D5
 RTS

JL_0_5EF2:  ORI.w #$20,D0
  CMP.w #$63,D1
   BNE.w JL_0_5F22
  CMP.w #$63,D4
   BNE.w JL_0_5F4E
  CMP.w #$72,D0
   BNE.w JL_0_5F4E
   BSR.w get1bytemain
   BEQ.w JL_0_5F1E
  CMP.w #$2C,D0
   BNE.w JL_0_5F4E
JL_0_5F1E:  MOVEQ.l #$0C,D5
 RTS

JL_0_5F22:  CMP.w #$75,D1
   BNE.w JL_0_5F4E
  CMP.w #$73,D4
   BNE.w JL_0_5F4E
  CMP.w #$70,D0
   BNE.w JL_0_5F4E
   BSR.w get1bytemain
   BEQ.w JL_0_5F4A
  CMP.w #$2C,D0
   BNE.w JL_0_5F4E
JL_0_5F4A:  MOVEQ.l #$0E,D5
 RTS

JL_0_5F4E:  MOVEA.l A4,A5
   BSR.w JL_0_6062
   !compare3;bsr.w JL_0_5FC0
   BEQ.w JL_0_5FB8
  CMP.w #$2E,D0
   BEQ.w JL_0_5FA0
  CMP.w #$28,D0
   BNE.w syntaxerr
   BSR.w get1bytemain
  ORI.w #$20,D0
  CMP.w #$70,D0
   BNE.w JL_0_5F98
   BSR.w get1bytemain
  ORI.w #$20,D0
  CMP.w #$63,D0
   BNE.w syntaxerr
   BSR.w get1bytemain
   BSR.w JL_0_5FD4
  ADDQ.w #4,D5
 RTS

JL_0_5F98:   BSR.w JL_0_5D46
 BRA.w JL_0_5FD4

JL_0_5FA0:   BSR.w get1bytemain
  ORI.w #$20,D0
  CMP.w #$77,D0
   BEQ.w JL_0_5FBC
  CMP.w #$6C,D0
   BNE.w syntaxerr
JL_0_5FB8:  MOVEQ.l #$08,D5
 RTS

JL_0_5FBC:  MOVEQ.l #$07,D5
 RTS

JL_0_5FC0:  TST.w D0
   BEQ.w JL_0_5FD2
  CMP.w #$3A,D0
   BEQ.w JL_0_5FD2
  CMP.w #$2C,D0
JL_0_5FD2: RTS

JL_0_5FD4:  CMP.w #$2C,D0
   BNE.w JL_0_6054
   BSR.w get1bytemain
  ORI.w #$20,D0
  MOVEQ.l #$00,D1
  CMP.w #$64,D0
   BEQ.w JL_0_5FFA
  CMP.w #$61,D0
   BNE.w syntaxerr
  BSET #$F,D1
JL_0_5FFA:   BSR.w get1bytemain
  SUBI.w #$30,D0
   BMI.w syntaxerr
  CMP.w #$7,D0
   BHI.w syntaxerr
  LSL.w #8,D0
  LSL.w #4,D0
  OR.w D0,D1
   BSR.w get1bytemain
  CMP.w #$2E,D0
   BNE.w JL_0_6040
   BSR.w get1bytemain
  ORI.w #$20,D0
  CMP.w #$77,D0
   BEQ.w JL_0_603C
  CMP.w #$6C,D0
   BNE.w syntaxerr
  BSET #$B,D1
JL_0_603C:   BSR.w get1bytemain
JL_0_6040:  CMP.b #"*",d0         ;020 * Mode
            BNE 'l1
            BSR.w get1bytemain
            CMP.b #"2",d0
            BNE 'l2
            OR.w #$200,d1
            BRA 'l1b
'l2            CMP.b #"4",d0
            BNE 'l3
            OR.w #$400,d1
            BRA 'l1b
'l3            CMP.b #"8",d0
            BNE syntaxerr
            OR.w #$600,d1
'l1b        BSR.w get1bytemain
'l1 CMP.w #$29,D0
   BNE.w syntaxerr
  MOVE.w D1,AL_0_E922
  MOVEQ.l #$06,D5
 BRA.w get1bytemain

JL_0_6054:  CMP.w #$29,D0
   BNE.w syntaxerr
  MOVEQ.l #$05,D5
 BRA.w get1bytemain

JL_0_6062:  MOVEA.l AL_0_E928,A0
  MOVE.w ininclude,D1
  OR.w inmacro,D1
  MOVE.w D1,(A0)+
   BNE.w JL_0_60B0
  MOVE.l A5,-(A7)
   BSR.w JL_0_60B0
  MOVEA.l AL_0_E928,A0
  CMP.w #$4,D1
   BLS.w JL_0_60A8
  TST.w AL_0_60AE
   BNE.w JL_0_60A8
  ADDQ.w #2,A0
  MOVE.l (A7)+,(A0)+
  CLR.b (A0)
  MOVE.w #$0004,AL_0_E92E
 RTS

JL_0_60A8:  NOT.w (A0)
  ADDQ.w #4,A7
 RTS

AL_0_60AE:  Ds.w 1
JL_0_60B0:  CLR.w AL_0_60AE
  MOVEQ.l #$00,D1
JL_0_60B8:  ADDQ.w #1,D1       ;label name
   !fget;bsr.w get1bytemain
   BEQ.w JL_0_6122
   CMP.w #$22,d0
   BNE.s 'l10
   NOT.w instringon
'l10   CMP.w #":",d0
   BNE.s 'l11
   TST.w instringon
   BEQ JL_0_6122
'l11 TST.w D0
   BPL.w JL_0_60D8
  MOVE.w D0,-(A7)
  LSR.w #8,D0
  MOVE.b D0,(A0)+
  MOVE.w (A7)+,D0
  MOVE.b D0,(A0)+
  ADDQ.w #1,D1
 BRA.s JL_0_60B8

JL_0_60D8:  TST.w instringon
   BNE.w JL_0_611C
   TST.b _dcb
   BNE 'l10
  CMP.w #$28,D0
   BEQ.w JL_0_6122
'l10 CMP.w #$2C,D0
    BEQ.w JL_0_6122
   CMP.b #"'",D0
   BNE.w JL_0_611C
  MOVE.w D0,AL_0_60AE           ;locallabels
  MOVE.l A1,-(A7)
  LEA lastgloballabel,A1
  TST.b (A1)
   BEQ.w JL_0_83A2
JL_0_610E:  ADDQ.w #1,D1
  MOVE.b (A1)+,(A0)+
   BNE.w JL_0_610E
  SUBQ.w #1,D1
  SUBQ.w #1,A0
  MOVEA.l (A7)+,A1
JL_0_611C:  MOVE.b D0,(A0)+
 BRA.w JL_0_60B8

JL_0_6122:  CLR.b (A0)
  MOVE.w D1,AL_0_E92E
 RTS

JL_0_612C:   ;jsr do_even
  CMP.l #$80ad,d0
  BNE.s 'l12
  JMP bssseg
'l12 CMP.l #$807f,d0
    BNE.s 'l13
  JMP chipseg
'l13
  ADDQ.l #1,destpointer      ;even
  BCLR #$0,AL_0_E8F9
  SUBI.w #$803C,D0
  LSL.w #2,D0
  MOVEA.l #asmpnts,A0
  MOVEA.l $0(A0,D0.W),A0     ;begin inline assembler
  MOVE.w D0,AL_0_EC60
  MOVE.l A0,-(A7)
  MOVEQ.l #$01,D1
   !fget
   ;bsr.w get1bytemain
  CMP.w #$2E,D0
   BNE.w JL_0_6184
  !fget
   ;bsr.w get1bytemain
  ORI.w #$20,D0
  CMP.w #$77,D0                   ;long
   BEQ.w JL_0_618A
  CMP.w #$62,D0                   ;byte
   BEQ.w JL_0_617A
  CMP.w #$6C,D0                   ;word
   BEQ.w JL_0_6196
  CMP.w #"s",d0
  BNE syntaxerr
 BRA.w JL_0_617A

JL_0_617A:  MOVEQ.l #$00,D1
  MOVE.w $8(A0),D0
 BRA.w JL_0_619E

JL_0_6184:  MOVEQ.l #$04,D1
 BRA.w JL_0_61AE

JL_0_618A:  MOVEQ.l #$04,D1
  MOVE.w $8(A0),D0
  LSR.w #4,D0
 BRA.w JL_0_619E

JL_0_6196:  MOVEQ.l #$08,D1
  MOVE.w $8(A0),D0
  LSR.w #8,D0
JL_0_619E:  ANDI.w #$F,D0
  CMP.w #$F,D0
   BNE.w 'cl60
'c10   CMP.l #"MULS",-6(a0)
   BNE 'c20
   MOVE.l #$4c000800,d1
   JMP do32
'c20   CMP.l #"MULU",-6(a0)
   BNE 'c30
   MOVE.l #$4c000000,d1
   JMP do32
'c30   CMP.l #"DIVS",-6(a0)
   BNE 'c40
   MOVE.l #$4c400800,d1
   JMP do32
'c40   CMP.l #"DIVU",-6(a0)
   BNE 'c50
   MOVE.l #$4c400000,d1
   JMP do32
'c50  BRA JL_0_8354

'cl60 !fget;bsr.w get1bytemain
JL_0_61AE:  MOVE.w D1,AL_0_E926
  MOVEQ.l #-$01,D3
   BSR.w JL_0_7C3A
   BEQ.w JL_0_6200
  MOVE.l #ptr_parameterstore,AL_0_E928
   ;bsr.w JL_0_7C44
   MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
   BSR.w JL_0_5DC2
  MOVE.l D4,D2
  MOVE.l D5,D3
  MOVE.w AL_0_E92E,AL_0_E92C
  MOVEQ.l #-$01,D5
  MOVE.w AL_0_E922,AL_0_E924
  CMP.w #$2C,D0
   BNE.w JL_0_6200
  MOVE.l #AL_0_ECE8,AL_0_E928
   BSR.w JL_0_5DC2
JL_0_6200:  MOVEA.l (A7)+,A0
  MOVEA.l destpointer,A1
  MOVEA.l A1,A4
  ADDQ.w #2,A1
  MOVE.w (A0),D1
  TST.w D3
   BMI.w JL_0_639E
  MOVE.w $E(A0),D0
   BPL.w JL_0_6264
  BTST #$0,D0
   BEQ.w JL_0_6240
  CMP.w #$1,D5
   BNE.w JL_0_6240
  CMP.w #$E,D3
   BEQ.w JL_0_6264
  MOVE.w AL_0_EC60,D0
  ADDQ.w #4,D0
 BRA.w JL_0_6256

JL_0_6240:  BTST #$1,D0
   BEQ.w JL_0_6264
  CMP.w #$B,D3
   BNE.w JL_0_6264
  MOVE.w AL_0_EC60,D0
JL_0_6256:  ADDQ.w #4,D0
  MOVEA.l #asmpnts,A0
  MOVEA.l $0(A0,D0.W),A0
  MOVE.w (A0),D1
JL_0_6264:  MOVE.l #ptr_parameterstore,AL_0_E916
  MOVE.l #AL_0_ECE8,AL_0_E91A
  MOVE.l $A(A0),D0
   BEQ.w JL_0_62DC
  MOVEA.l D0,A3
  MOVE.w AL_0_E926,D6
L_0_6288:   JSR (A3)
   BPL.w JL_0_629A
  CMP.w #-$2,D0
   BEQ.w JL_0_8354
 BRA.w JL_0_837C

JL_0_629A:   BEQ.w JL_0_62DC
  EXG.l D2,D4
  EXG.l D3,D5
  MOVE.l AL_0_E922,D6
  SWAP D6
  MOVE.l D6,AL_0_E922
  MOVE.l #AL_0_ECE8,AL_0_E916
  MOVE.l #ptr_parameterstore,AL_0_E91A
  MOVE.w AL_0_E92C,D6
  MOVE.w AL_0_E92E,D7
  MOVE.w D6,AL_0_E92E
  MOVE.w D7,AL_0_E92C
JL_0_62DC:  MOVE.l AL_0_E916,AL_0_E928
  MOVE.w $E(A0),D0
   BEQ.w JL_0_6348
   BMI.w JL_0_6348
   CMP.w #$7000,d1
   BNE 'skip
   CMP.w #$b,d3
   BNE JL_0_837C
'skip  CMP.w #$1,D0
   BNE.w JL_0_630E
   CMP.w #$B,D3
   BNE.w JL_0_6348
JL_0_6302:   BSR.w JL_0_65F0
  MOVE.w D4,D2
  MOVE.w D5,D3
 BRA.w JL_0_6364

JL_0_630E:  CMP.w #$2,D0
   BNE.w JL_0_6324
  CMP.w #$8,D3
   BNE.w JL_0_837C
  MOVEQ.l #$09,D3
 BRA.w JL_0_6348

JL_0_6324:  CMP.w #$3,D0
   BEQ.w JL_0_6302
  CMP.w #$4,D0
   BEQ.w JL_0_6302
  CMP.w #$5,D0
   BNE.w JL_0_6348
  CMP.w #$8,D5
   BNE.w JL_0_837C
  OR.w D2,D1
  MOVEQ.l #$09,D5
JL_0_6348:  MOVE.w $2(A0),D6
  MOVE.b $6(A0),D7
  MOVEM.l D4-D5,-(A7)
  MOVE.w AL_0_E924,D4
   BSR.w JL_0_657C
  MOVEM.l (A7)+,D2-D3
  TST.w D3
JL_0_6364:   BMI.w JL_0_6392
  MOVE.w AL_0_E922,D4
  MOVE.w $4(A0),D6
  MOVE.b $7(A0),D7
  MOVE.l AL_0_E91A,AL_0_E928
  MOVE.w AL_0_E92E,AL_0_E92C
   BSR.w JL_0_657C
 BRA.w JL_0_63AA

JL_0_6392:  MOVE.w $4(A0),D0
   BNE.w JL_0_837C
 BRA.w JL_0_63AA

JL_0_639E:  MOVE.w $2(A0),D0
  OR.w $4(A0),D0
   BNE.w JL_0_837C
JL_0_63AA:  MOVE.w $8(A0),D0
  ANDI.w #$F000,D0
  CMP.w #-$1000,D0
   BEQ.w JL_0_63D2
  LSR.w #8,D0
  LSR.w #4,D0
  MOVE.w $8(A0),D2
  MOVE.w AL_0_E926,D3
  LSR.w D3,D2
  ANDI.w #$F,D2
  LSL.w D0,D2
  OR.w D2,D1
JL_0_63D2:  CMPA.l destbufferend,A4
   BCS.w JL_0_63E8

  MOVE.w #$FFFF,dontwrite
 BRA.w JL_0_63EA

JL_0_63E8:  MOVE.w D1,(A4)
JL_0_63EA:  MOVE.l A1,destpointer
 RTS

JL_0_63F2:  MOVE.l destpointer,-(A7)
  MOVE.l A1,destpointer
   BSR.w JL_0_791C
  MOVEA.l destpointer,A1
  MOVE.l (A7)+,destpointer
 RTS

.do32
 MOVEM.l d2-d6,-(a7)
 JSR stripspaces
 CMP.b #"d",(a5)+
 BNE noreg
 MOVE.b (a5)+,d0
 CMP.b #$30,d0
 BLT noreg
 CMP.b #$37,d0
 BGT noreg
 SUB.b #$30,d0
 MOVEQ #0,d3
 MOVE.b d0,d3            ;reg1
 ASL.l #8,d3
 ASL.l #8,d3
 JSR stripspaces
 CMP.b #",",(a5)+
 BNE noreg
 JSR stripspaces
 CMP.b #"d",(a5)+
 BNE noreg
 MOVE.b (a5)+,d0
 CMP.b #$30,d0
 BLT noreg
 CMP.b #$37,d0
 BGT noreg
 SUB.b #$30,d0
 MOVEQ #0,d4
 MOVE.b d0,d4         ;reg2
 ASL.l #8,d4
 ASL.l #4,d4
 OR.b d0,d1
 OR.l d3,d1
 OR.l d4,d1
 JSR writelong
 MOVEM.l (a7)+,d2-d6
 MOVEM.l d1/a1-a3,-(a7)
 BRA exit
noreg
 MOVEM.l (a7)+,d2-d6
 LEA errtext,a0
 MOVE.l a0,-(a7)
        JMP handle_compileerror
 BRA syntaxerr
 RTS
JL_0_6410:  MOVE.w dontwrite,D1
   BNE.w JL_0_657A
  BTST #$7,make_smallestcode
   BEQ.w JL_0_642E
  MOVE.w pass(PC),D1
   BEQ.w JL_0_657A
JL_0_642E:
  MOVEA.l templabel,A2         ;insert labels in Code
  MOVE.b #1,curtemplabel
  MOVE.w #$FFFF,AL_0_E91E
  CLR.w regnum
          MOVE.l #AL_0_A470,AL_0_A6B0
          MOVE.l #AL_0_9D14,AL_0_9D10
   BSR.w JL_0_442A
JL_0_6446:  MOVE.l A2,-(A7)
   BSR.w JL_0_446A
  MOVEA.l (A7)+,A2
  CMPA.w #$0,A2
   BEQ.w JL_0_6574
   CLR.b iee
  MOVE.l A2,AL_0_E928
  LEA $10(A2),A5
  TST.b $F(A2)
   BNE.w JL_0_646A
  MOVEA.l (A5),A5
JL_0_646A:  CLR.w AL_0_E920
   CMP.b #".",(a5)
   BNE.s 'l10
   MOVE.l a2,-(a7)
   ADDQ.l #1,a5
   LEA newtypebase,a2
   BSR getparameter2
   BEQ.w syntaxerr
   BSR JL_0_8CBE
   BNE.w JL_0_8440
   LEA $4(a2),a2
   BSR getparameter2
   BEQ.w syntaxerr
   BSR.w findvariable2
   BNE.w JL_0_8440
   MOVE.w $4(a2),d3
   EXT.l d3
   BRA 'l30b
'l10 CMP.b #"\",(a5)
    BNE 'l20
    ADDQ.l #1,a5
   MOVE.l a2,-(a7)
   MOVE.l a5,a4
   LEA AL_0_4A20,a5
   CMP.b #"*",(a5)
   BNE 'lm1
   ADDQ.l #1,a5
'lm1   BSR.w getparameter2
   BEQ.w syntaxerr
   LEA varbase,A2
   MOVE.b #1,newvariable
   BSR.w findvariable
   CLR.b newvariable
   CMP.l #-1,d0
   BEQ.w JL_0_8440
   MOVE.l a4,a5
   MOVE.l $a(a2),a2
   LEA $4(a2),a2
   BSR getparameter2
   BEQ.w syntaxerr
   BSR.w findvariable2
   BNE.w JL_0_8440
  MOVE.w $4(A2),D3
  EXT.l D3
'l30b
 CMP.b #"[",-1(a5)
 BNE 'l30c
 MOVEQ #0,d0
 MOVE.b (a5)+,d0
 MOVE.l d3,-(a7)
 MOVEQ #0,d3
 JSR atoi
 MOVE.l (a7)+,d1
 MOVE.l $a(a2),a2
 MOVE.w 8(a2),d0
 MULS d0,d3
 ADD.l d1,d3
'l30c: MOVE.l (a7)+,a2
 BRA JL_0_6492
'l20

 CMP.w #$c,$8(a2)
     BEQ 'lf1
     CMP.w #$d,$8(a2)
     BEQ 'lf1
'lf2:  JSR AJL_0_BF6E
'l30: MOVEA.l AL_0_E928,A2
   BEQ.w JL_0_6492
  CMP.w #$28,D0
   BEQ.w JL_0_6492
  CMP.w #$2C,D0
   BEQ.w JL_0_6492
 BRA.w syntaxerr
'lf1: MOVE.b #1,iee
   BRA 'lf2
JL_0_6492:
  MOVEA.l $4(A2),A1

  MOVE.w $8(A2),D1                   ;labelmode
  CMP.w #$5,D1
   BNE.w JL_0_64AC
JL_0_64A2:   BSR.w JL_0_65DA         ;word
JL_0_64A6:  MOVE.w D3,(A1)
 BRA.w JL_0_656E

JL_0_64AC:  CMP.w #$6,D1
   BNE.w JL_0_64C0
JL_0_64B4:   BSR.w JL_0_65C4         ;byte
JL_0_64B8:  MOVE.b D3,$1(A1)
 BRA.w JL_0_656E

JL_0_64C0:
   CMP.w #$11,D1                     ;byte
   BEQ.w JL_0_64B8
   CMP.w #$c,d1
   BEQ single1
   CMP.w #$d,d1
   BEQ double1
  CMP.w #$7,D1
   BEQ.w JL_0_64A2                   ;word
  CMP.w #$8,D1
   BNE.w JL_0_64EC
JL_0_64D8:  MOVE.w AL_0_E920,D1      ;long
   BEQ.w JL_0_64E6
     BSR.w JL_0_63F2
JL_0_64E6:  MOVE.l D3,(A1)
 BRA.w JL_0_656E
single1
 fmove.s fp0,0(a1)
 BRA.w JL_0_656E
double1
 fmove.d fp0,0(a1)
 BRA.w JL_0_656E
JL_0_64EC:  CMP.w #$9,D1
   BNE.w JL_0_6500
  SUB.l A1,D3                       ;branchword
   BSR.w JL_0_65DA
  MOVE.w D3,(A1)
 BRA.w JL_0_656E

JL_0_6500:  CMP.w #$A,D1
   BNE.w JL_0_650E
  SUB.l A1,D3                       ;branchbyte
 BRA.w JL_0_64B4

JL_0_650E: CMP.w #$11,d1
  BLE 'l10
  MOVE.l a3,-(a7)
  LEA pluginbase,a3
  MOVE.l 8(a2),a0
  JSR (a0)                          ;hook
  MOVE.l (a7)+,a3
  BRA JL_0_656E
'l10   MOVE.w $A(A2),D0
   BEQ.w JL_0_652E
  CMP.w #$1,D0
   BEQ.w JL_0_654A
  CMP.w #$3,D0
   BEQ.w JL_0_6568
  CMP.w #$4,D0
   BEQ.w JL_0_653A
JL_0_652E:  CMP.w #$B,D1           ;long
   BEQ.w JL_0_64D8
  BRA JL_0_64A6                   ;word

JL_0_653A:  CMP.l #$F,D3
   BHI.w JL_0_82F0
  OR.b D3,-(A1)
 BRA.w JL_0_656E

JL_0_654A:  CMP.l #$8,D3
   BHI.w JL_0_8308
  TST.l D3
   BEQ.w JL_0_8308
  ANDI.w #$7,D3
  LSL.w #8,D3
  LSL.w #1,D3
  OR.w D3,-(A1)
 BRA.w JL_0_656E

JL_0_6568:   BSR.w JL_0_65C4
  MOVE.b D3,-(A1)
JL_0_656E:  MOVEA.l (A2),A2
 BRA.w JL_0_6446

JL_0_6574:
 CLR.w AL_0_E91E

JL_0_657A: CLR.b curtemplabel
  RTS

JL_0_657C:  BTST D3,D6
   BEQ.w JL_0_837C
   BSR.w JL_0_6664
  CMP.w #$7,D3
   BCS.w JL_0_659E
  MOVE.w D3,D2
  SUBQ.w #7,D2
  CMP.w #$5,D2
   BCS.w JL_0_659C
  MOVEQ.l #$04,D2
JL_0_659C:  MOVEQ.l #$07,D3
JL_0_659E:  MOVE.b D7,D0
  ANDI.w #$F,D0
  CMP.w #$F,D0
   BEQ.w JL_0_65B0
  LSL.w D0,D3
  OR.w D3,D1
JL_0_65B0:  LSR.w #4,D7
  ANDI.w #$F,D7
  CMP.w #$F,D7
   BEQ.w JL_0_65C2
  LSL.w D7,D2
  OR.w D2,D1
JL_0_65C2: RTS

JL_0_65C4:  CMP.l #$7F,D3
   BGT.w JL_0_833A
  CMP.l #$FFFFFF80,D3
   BLT.w JL_0_833A
 RTS

JL_0_65DA:  CMP.l #$7fff,D3
   BGT.w JL_0_833A
  CMP.l #$FFFF8000,D3
   BLT.w JL_0_833A
 RTS
findchar
'll20: MOVE.b (a5)+,d0
 CMP.b d1,d0
 BEQ 'll10
 TST.b d0
 BNE 'll20
'll10:
 SUBQ #1,a5
 RTS
findnext
'll20: MOVE.b (a5)+,d0
 CMP.b #",",d0
 BEQ 'll10
 CMP.b #";",d0
 BEQ 'll10
 CMP.b #":",d0
 BEQ 'll10
 ;cmp.b #"(",d0
 ;beq 'll10
 TST.b d0
 BNE 'll20
'll10:
 SUBQ #1,a5
 RTS
macroexecute
 ADD.l a2,d1
 LEA tempspace,a1
 MOVE.l d1,a0
'l10 MOVE.b (a0)+,(a1)+
 BNE.s 'l10
 SUBQ.l #1,a0
 SUBQ.l #1,a1
'l20 MOVE.b (a5)+,(a1)+
 BNE.s 'l20
 CLR.b (a1)
 LEA tempspace,a5
 RTS
calc
  MOVEM.l D1-D2/A0,-(A7)
  MOVE.l d0,d2
  MOVEQ #0,d1
  MOVE.l a5,a4
'll20: ADDQ.l #1,d1
 MOVE.b (a5)+,d0
 CMP.b #",",d0
 BEQ 'll10
 CMP.b #";",d0
 BEQ 'll10
 CMP.b #":",d0
 BEQ 'll10
 CMP.b #"(",d0
 BEQ 'll10
 TST.b d0
 BNE 'll20
'll10:
 SUBQ #1,a5
 CMP.b #"'",(a4)
 BEQ 'llocal
 TST.w inmacro
 BNE 'lmacro
  MOVEQ.l #$14+4,D0
  ADD.l d1,d0
  MOVE.l d1,-(a7)
  MOVEQ.l #$01,D1
  MOVEA.l _execbase,A6
  MOVE.l mempool2,a0
  JSR _AllocPooled(a6)
   ;jsr AJL_0_4B6C            ;allocmemforcompile
  MOVE.l (a7)+,d1
  TST.l d0
  BEQ nomemory
  MOVEA.l D0,A0
  ;MOVE.w AL_0_E9E8+2,$C(A0)
  MOVE.w AL_0_E9E8+2,$A(A0)
  ;MOVE.w AL_0_E9E8,$c(a0)
  MOVE.l templabel,(A0)
  MOVE.l A0,templabel
  MOVE.l destpointer,$4(A0)
  MOVE.l d2,$8(A0)
  LEA $E(A0),A0
  MOVE.b #$14,(A0)+
  CLR.b (a0)+
  ;MOVE.l A4,(A0)+
  MOVE.l a0,d2
  ADDQ.l #4,d2
  MOVE.l d2,(a0)+
'lc1 MOVE.b (a4)+,(a0)+
  SUBQ.l #1,d1
  BNE 'lc1
  CLR.b (a0)+
  MOVE.w AL_0_E9E8,(a0)
  MOVEM.l (A7)+,D1-D2/A0
 RTS

'lmacro
  MOVEQ.l #$10+2,D0
  ADD.l d1,d0
  MOVEM.l a4/d3,-(a7)
  MOVE.l d1,d3
  MOVEQ.l #$01,D1
  MOVEA.l _execbase,A6
  MOVE.l mempool2,a0
  JSR _AllocPooled(a6)
   ;jsr AJL_0_4B6C            ;allocmemforcompile
  TST.l d0
  BEQ nomemory
  MOVEA.l D0,A0
'o2 MOVE.w AL_0_E9E8+2,$C(A0)
  MOVE.l templabel,(A0)
  MOVE.l A0,templabel
  MOVE.l destpointer,$4(A0)
  MOVE.l d2,$8(A0)
  LEA $E(A0),A0
  MOVE.b d3,(A0)+
  ADD.b #$10,-1(a0)
  MOVE.b #$1,(a0)+
  SUBQ.w #1,d3
'lm2  MOVE.b (a4)+,(a0)+
  SUBQ.l #1,d3
  BNE.s 'lm2
  CLR.b (a0)+
  MOVE.w AL_0_E9E8,(a0)
  MOVEM.l (a7)+,d3/a4
  MOVEM.l (A7)+,D1-D2/A0
 RTS
'llocal
  LEA lastgloballabel,a1
'll11 ADDQ.l #1,d1
  TST.b (a1)+
  BNE.s 'll11
  MOVEQ.l #$10+2,D0
  ADD.l d1,d0
  MOVEM.l a4/d3,-(a7)
  MOVE.l d1,d3
  MOVEQ.l #$01,D1
  MOVEA.l _execbase,A6
  MOVE.l mempool2,a0
  JSR _AllocPooled(a6)
   ;jsr AJL_0_4B6C            ;allocmemforcompile
  TST.l d0
  BEQ nomemory
  MOVEA.l D0,A0
'o3  MOVE.w AL_0_E9E8+2,$C(A0)
  MOVE.l templabel,(A0)
  MOVE.l A0,templabel
  MOVE.l destpointer,$4(A0)
  MOVE.l d2,$8(A0)
  LEA $E(A0),A0
  MOVE.b d3,(A0)+
  ADD.b #$10,-1(a0)
  MOVE.b #$1,(a0)+
  SUBQ.w #1,d3
  LEA lastgloballabel,a1
'lm3
  SUBQ.l #1,d3
  MOVE.b (a1)+,(a0)+
  BNE.s 'lm3
  SUBQ.l #1,a0
'lm1  MOVE.b (a4)+,(a0)+
  SUBQ.l #1,d3
  BNE.s 'lm1
  CLR.b (a0)+
  MOVE.w AL_0_E9E8,(a0)
  MOVEM.l (a7)+,d3/a4
  MOVEM.l (A7)+,D1-D2/A0
RTS

.nomemory
  !basic
  error{"No memory available\\nAB3 will terminate due to low memory"}
  Even
  loop Delay_ 1
Goto loop

JL_0_65F0:
  MOVEM.l D0-D2/A0,-(A7)
  MOVE.w $E(A0),-(A7)
   BPL.w JL_0_65FE
  CLR.w (A7)
JL_0_65FE:  MOVE.l A1,-(A7)
  MOVEQ.l #$10+2,D0
  ADD.w AL_0_E92C,D0
  MOVE.w D0,D2
  MOVEQ.l #$01,D1
  MOVEA.l _execbase,A6
  MOVE.l mempool2,a0
  JSR _AllocPooled(a6)
   ;jsr AJL_0_4B6C            ;allocmemforcompile
  MOVEA.l D0,A0
'o MOVE.w AL_0_E9E8+2,$C(A0)
  MOVE.l templabel,(A0)
  MOVE.l A0,templabel
  MOVE.l (A7),$4(A0)
  MOVE.w d3,$8(A0)
  MOVE.w $4(A7),$A(A0)
  LEA $E(A0),A0
  MOVE.b D2,(A0)+
  MOVEA.l AL_0_E928,A1
  ADDQ.w #1,A1
  MOVE.b (A1)+,(A0)+
   BNE.w JL_0_6654
  MOVE.l (A1)+,(A0)+
  MOVE.w AL_0_E9E8,(a0)
 BRA.w JL_0_665A

JL_0_6654:  MOVE.b (A1)+,(A0)+
   BNE.w JL_0_6654
   MOVE.w AL_0_E9E8,(a0)
JL_0_665A:  MOVEA.l (A7)+,A1
  ADDQ.w #2,A7
  MOVEM.l (A7)+,D0-D2/A0
 RTS

JL_0_6664:  CMP.w #$5,D3
   BCS.w JL_0_66F4
  CMP.w #$B,D3
   BHI.w JL_0_66D8
   BEQ.w JL_0_66B6
   BSR.w JL_0_65F0
  CMP.w #$5,D3
   BEQ.w JL_0_66D4
  CMP.w #$6,D3
   BEQ.w JL_0_66A4
  CMP.w #$7,D3
   BEQ.w JL_0_66D4
  CMP.w #$8,D3
   BEQ.w JL_0_66D2
  CMP.w #$9,D3
   BEQ.w JL_0_66D4
JL_0_66A4:  CMPA.l destbufferend,A1
   BCS.w JL_0_66B2
  ADDQ.w #2,A1
 RTS

JL_0_66B2:  MOVE.w D4,(A1)+
 RTS

JL_0_66B6:  CMPI.w #$8,AL_0_E926
   BCC.w JL_0_66CE
  MOVEQ.l #$10,D3
   BSR.w JL_0_65F0
  MOVEQ.l #$0B,D3
 BRA.w JL_0_66D4

JL_0_66CE:   BSR.w JL_0_65F0
JL_0_66D2:  ADDQ.w #2,A1
JL_0_66D4:  ADDQ.w #2,A1
 RTS

JL_0_66D8:  CMP.w #$F,D3
   BNE.w JL_0_66F4
  CMPA.l destbufferend,A1
   BCS.w JL_0_66F0
  ADDQ.w #2,A1
  ADDQ.w #4,A7
 RTS

JL_0_66F0:  MOVE.w D2,(A1)+
  ADDQ.w #4,A7
JL_0_66F4: RTS

JL_0_66F6:   BSR.w JL_0_7C56
  MOVE.l AL_0_E9E8,oldline
  MOVEQ.l #$00,D1
   BSR.w get1bytemain
   BEQ.w JL_0_676E
  MOVEQ.l #$00,D3
 BRA.w JL_0_6726

JL_0_670A:   BSR.w get1bytemain
   BNE.w JL_0_671C

ready
 TST.w D3
   BNE.w brackets_                  ;syntax error brackets
 BRA.w JL_0_676C

JL_0_671C:  MOVE.w instringon,D4
   ;BNE.w JL_0_670A
     BEQ JL_0_6726
'l1  MOVEQ #0,d0
     MOVE.b (a5)+,d0                     ;fix "ue"
     MOVE.w d0,lastchar
     BEQ ready
     CMP.b #$22,d0
     BNE 'l1
     NOT.w instringon
     BRA JL_0_670A
JL_0_6726:

           CMP.b #"@",d0                ;expand line @@ 1. for parameter
           BNE 'l10
           CMP.b #"@",(a5)
           BNE 'l10
'l111      TST.w ininclude
           BNE 'inc
           MOVE.l sourceline3,a5
           CMP.l #0,a5
           BNE 'l11t
           MOVEA.l sourceline,A5
'l11t      MOVEA.l (A5),A5
           CMP.l #0,a5
           BEQ JL_0_676C
           MOVE.l a5,sourceline3
           LEA $9(A5),A5
           BRA 'l11
'inc       ADDQ.l #1,a5
           TST.b (a5)
           BNE 'inc
           ;BEQ JL_0_8292
'l11       ADDQ.l #1,a5
           TST.b (a5)
           BEQ JL_0_8292
           MOVE.l a5,-(a7)
'l110   CMP.b #" ",(a5)+
      BEQ 'l110
       CMP.b #";",-1(a5)
       MOVE.l (a7)+,a5
       BEQ 'l111
        BRA JL_0_670A
'l10   CMP.w #$29,D0
   BNE.w JL_0_673A
  TST.w D3
   BEQ.w JL_0_676C
JL_0_6734:  SUBQ.w #1,D3
 BRA.w JL_0_670A

JL_0_673A:  CMP.w #$7D,D0
   BEQ.w JL_0_6734
  CMP.w #$28,D0
   BNE.w JL_0_6750
JL_0_674A:  ADDQ.w #1,D3
 BRA.w JL_0_670A

JL_0_6750:  CMP.w #$7B,D0
   BEQ.w JL_0_674A
  CMP.w #$2C,D0
   BNE.w JL_0_670A
  TST.w D3
   BNE.w JL_0_670A
  ADDQ.w #1,D1
 BRA.w JL_0_670A

JL_0_676C:  ADDQ.w #1,D1
JL_0_676E: CLR.l sourceline3
           MOVE.l oldline,AL_0_E9E8
 BRA.w JL_0_7C64

JL_0_6772:  CLR.w AL_0_E9BA
  MOVE.w D1,D0
  ANDI.w #$FF00,D0
   BEQ.w JL_0_67DC
  LSR.w #8,D0
  LSR.w #4,D0
   BEQ.w JL_0_6798
  SUB.b D0,D1
   MOVE.w regnum,regnumfunc
   MOVE.b funcparloop,-(a7)
   MOVE.b #0,funcparloop
   BSR.w JL_0_67F0
   MOVE.b (a7)+,funcparloop
  CMP.w #$2C,D0
   BNE.w syntaxerr
JL_0_6798:  MOVE.w D1,D2
  LSR.w #8,D2
  ANDI.w #$7,D2
JL_0_67A0:
   CMP.b D2,D1
   BCS.w JL_0_67C0
  SUB.b D2,D1
  MOVEM.l D2/A2,-(A7)
  MOVE.w D2,D0
  MOVE.b funcparloop,-(a7)
  MOVE.b #0,funcparloop
  BSR.w JL_0_67EA
  MOVE.b (a7)+,funcparloop
  MOVEM.l (A7)+,D2/A2
  ADDQ.w #1,AL_0_E9BA
 BRA.w JL_0_67A0

JL_0_67C0:  MOVE.w AL_0_E9BA,D3
   BEQ.w syntaxerr
  ADDA.w D2,A2
  ANDI.w #$FF,D1
   BEQ.w JL_0_67E2
  CMP.w #$2C,D0
   BNE.w syntaxerr
JL_0_67DC:  MOVE.w D1,D0
   BNE.w JL_0_67F0b
JL_0_67E2: RTS
JL_0_67F0b
 MOVE.b funcparloop,-(a7)
 MOVE.b #0,funcparloop
 BSR.w JL_0_67F0
 MOVE.b (a7)+,funcparloop
 RTS
L_0_67E4:  Dc.b "?<",0,0
partostack:  Ds.w 1
JL_0_67EA:  MOVEQ.l #$01,D2
 BRA.w JL_0_67F2

JL_0_67F0:  MOVEQ.l #$00,D2
JL_0_67F2:  ANDI.w #$F,D0
  CLR.w parnum
  MOVE.w D1,-(A7)
  MOVE.w partostack(PC),-(A7)
  MOVE.w D2,partostack
  MOVE.w D0,-(A7)
  CMP.w #"@@",(a5)
  BNE 'l15
  TST.w ininclude              ;merge macrolines
  BNE errorjoin
       MOVEA.l sourceline,A5
'l111     MOVEA.l (A5),A5
           MOVE.l a5,sourceline
           LEA $9(A5),A5
           ADDQ.l #1,AL_0_E9E8
'l15
JL_0_6804:
   MOVE.b (A2)+,D2        ;parameterloop   d2=vartype
   BNE.w JL_0_6810
  MOVE.w AL_0_E9B2,D2
JL_0_6810:  MOVE.l A2,-(A7)
   ADDQ.w #1,parnum
   TST.b funccall
   BEQ 'l1
   CMP.w #6,parnum
   BLE 'l1
   CMP.w #7,d2
CNIF #more6string=0
   BEQ more6par
CEND
'l1
   TST.b fpu
   BEQ 'old
   TST.w regnumfunc
   BEQ 'old
   CMP.w #$48e7,-4(a4)
   BNE 'old
   MOVEQ #0,d1
   MOVE.w regnum,d1
   CMP regnumfunc,d1                      ;fpu reg function save
   BGE 'old
   ASL.w #7,d1
   MOVE.l d0,-(a7)
   MOVE.w regnumfunc,d0
   CLR.w regmask
'loop BSET d0,regmask
   SUBQ #1,d0
   BNE 'loop
    MOVEQ #0,d0
   'loop2
      BTST d0,regmask
      BEQ 'noa7
      MOVEQ #0,d1
      MOVE.w d0,d1
      SUBQ.w #1,d1
      ASL #7,d1
      OR.l #$f2277400,d1      ;fmove.d
      ;OR.l #$f2276400,d1     ;fmove.s
      BSR writelong

      ADDQ.l #2,stacktrack
      MOVE.l stacktrack,d1
      CMP.l #180,d1
      BGT JL_0_805C               ;formel too complex
      MOVE.l a0,-(a7)
      LEA fpustackbase,a0
      MOVE.w regmask,0(a0,d1)
      MOVE.l (a7)+,a0
    'noa7
      ADDQ.w #1,d0
      CMP.w regnumfunc,d0
      BLE 'loop2
   'ready   MOVE.l (a7)+,d0
'old MOVE.l currentfunccall,-(a7)
     MOVE.w parnum,-(a7)
 BSR.w JL_0_6836
     MOVE.w (a7)+,parnum
;CLR.b funcparloop
   MOVE.l (a7)+,currentfunccall
   TST.b fpu
   BEQ 'noprint
  MOVE.l (a7),a2
  ADDQ.l #1,a2
   CMP.b #5,d2
  BNE 'noprint
  CMP.b #$5d,24(a2)
  BNE 'noprint
  CMP.b #$81,25(a2)
  BLT 'noprint
  CMP.b #$86,25(a2)
  BEQ 'ok
  CMP.b #$87,25(a2)
  BEQ 'ok
  CMP.b #$88,25(a2)
  BEQ 'ok
  CMP.b #$83,25(a2)
  BGT 'noprint
'ok  MOVE.l destpointer,a4
  CMP.w #$2f00,-2(a4)
  BNE 'noprint
  SUBQ.l #2,destpointer
;MOVE.w (a2),-(a7)         ;fpu print,nprint,str$
  MOVE.l #$f2277400,d1
  BSR writelong             ;fmove.d fp0,-(a7)
  ADDQ #4,a2offset
;  MOVE.w #$c0,(a2)
;  MOVE.l a2,-(a7)
;  JSR JL_0_BCF4
;  MOVE.l #$f2006400,d1      ;fmove.s fp0,d0
;  BSR writelong
;  MOVE.l #$4EAEFF94,d1      ;SPfieee
;  BSR writelong
;  MOVE.l (a7)+,a2
;MOVE.w (a7)+,(a2)
  ;CMP.b #$83,25(a2)
  ;BEQ 'nomovea7
  ;MOVE.w #$2e80,d1
  ;BSR writeword
;'nomovea7


'noprint  CLR.b optistring
  MOVEA.l (A7)+,A2
   CMP.w #"@",d0
  BNE 'l10
   CMP.b #"@",(a5)
  BNE 'l10
  TST.w ininclude
  BNE errorjoin
 MOVEA.l sourceline,A5
           MOVEA.l (A5),A5
           MOVE.l a5,sourceline
  ADDQ.l #1,AL_0_E9E8
           LEA $9(A5),A5
           MOVEQ #0,d0
           BSR get1bytemain
'l10
   CMP.w #"@@",(a5)               ;if merge
   BNE 'l15
   MOVEM.l d0-d7/a0-a4/a6,-(a7)
   JSR mergeline
   MOVEM.l (a7)+,d0-d7/a0-a4/a6
;'l111       MOVEA.l sourceline,A5
;           MOVEA.l (A5),A5
;           MOVE.l a5,sourceline
;  ADDQ.l #1,AL_0_E9E8
;           LEA $9(A5),A5
;           TST.b (a5)
;           BEQ 'l111
;           MOVE.l a5,-(a7)
;'l110   CMP.b #" ",(a5)+
;   BEQ 'l110
;   CMP.b #";",-1(a5)
;   MOVE.l (a7)+,a5
;   BEQ 'l111
'l15
      SUBQ.w #1,(A7)
   BEQ.w JL_0_682A

    CMP.w #$2C,D0
   ;BNE.w JL_0_80E2            ;not enough parameter
   BNE overloadfunc
 BRA.w JL_0_6804

  JL_0_682A:
  ADDQ.w #2,A7
  MOVE.w (A7)+,partostack
  MOVE.w (A7)+,D1
  CLR.b funccall
RTS


overloadfunc:
 CLR.b funccall
 MOVE.w regnum,d1
 MOVE.l currentfunccall,a4
 CMP.b $20(a4),d1                   ;increase if more pars
 BLT JL_0_80E2
'ol2
 MOVE.b (a2)+,d2
 ADD.w #1,parnum
 TST.b fpu
 BEQ 'nofpu
 CMP.b #5,d2
 BNE 'nofpu
 MOVEQ #0,d1
 MOVE.w regnum,d1
 CMP.w #6,regnum
 BLT 'nostack2
CNIF #more6string=0
 CMP.l #$b,parnumtemp
 BGE more6par
CEND
 MOVE.w #$2c3c,d1
 BSR writeword
 MOVE.l #$bf800000,d1
 BSR writelong
 MOVE.w #$c4ff,d1    ;savetemp+regnum
 ADD.w parnum,d1
 JSR Atokejsr
 TST.w dontwrite
 BNE 'l1
 MOVE.l data1start,d1
 MOVE.l destpointer,a4
 ADD.l d1,-4(a4)
 MOVE.l destpointer,d1
 SUBQ.l #4,d1
 SUB.l destbufferstart,d1
 MOVE.l d2,-(a7)
 MOVE.l d1,d2
 JSR addhunkoffset
 MOVE.l (a7)+,d2
 BRA 'l1
'nostack2
 ASL.l #7,d1
 OR.l #$F23C5000,d1         ;fmove.w #-1,fpx
 BSR writelong
 MOVEQ #-1,d1               ;-1
 BSR writeword
 BRA 'l1
'nofpu MOVE.w regnum,d1
 CMP.w #6,regnum
 BLT 'nostack
CNIF #more6string=0
 CMP.l #$b,parnumtemp
 BGE more6par
CEND
 CMP.b #2,d2
 BGT 'nw
 BRA 'nos
; ADDQ #2,a2offset
; MOVE.l #$3f3cffff,d1
; BSR writelong
; BRA 'l1
'nw  ;ADDQ #4,a2offset
 CMP.w #7,d2
 BNE 'nos
 ADDQ #4,a2offset
CNIF #more6string
 MOVE.l #$48780000,d1
 BSR writelong
 ADDQ.w #4,a2offset
 MOVE.w #$2f3c,d1
 BSR writeword
 MOVE.l #-1,d1
 BSR writelong
 BRA 'l1
CEND
'nos CMP.b #4,d2
     BNE 'noq
     MOVE.w #$2c3c,d1
     BSR writeword
     MOVE.l #$ffff0000,d1
     BSR writelong
     BRA 'noq2
'noq
    CMP.b #5,d2
    BNE 'nof
     MOVE.w #$2c3c,d1
     BSR writeword
     MOVE.l #$800000c1,d1
     BSR writelong
    BRA 'noq2
'nof MOVE.w #$7cff,d1
 BSR writeword
'noq2 MOVE.w #$c4ff,d1    ;savetemp+regnum
 ADD.w parnum,d1
 JSR Atokejsr
  TST.w dontwrite
  BNE 'l1
  MOVE.l data1start,d1
  MOVE.l destpointer,a4
  ADD.l d1,-4(a4)
  MOVE.l destpointer,d1
  SUBQ.l #4,d1
  SUB.l destbufferstart,d1
  MOVE.l d2,-(a7)
  MOVE.l d1,d2
  JSR addhunkoffset
  MOVE.l (a7)+,d2
 BRA 'l1
'nostack ASL.l #8,d1
 ASL.l #1,d1
 OR.l #$203c,d1          ;-1
 BSR writeword
 MOVE.l #-1,d1
 CMP.b #4,d2
 BNE 'nq1
 MOVE.l #$ffff0000,d1
'nq1
 CMP.b #5,d2
 BNE 'nof2
 TST.b fpu
 BNE 'nof2
 MOVE.l #$800000c1,d1

'nof2
  BSR writelong
  CMP.b #7,d2
  BNE 'l1
CNIF #more6string
  MOVE.l #$48780000,d1
  BSR writelong
CEND
  ADDQ.w #4,a2offset        ; bug fix for string parameters
  MOVE.l #$594f,d1          ; subq #4,a7
  BSR writeword

 'l1
  SUBQ.w #1,(A7)
  BEQ.w JL_0_682A
  ADDQ.w #1,regnum
  BRA 'ol2

  JL_0_6836:
  MOVE.w D2,D1
  ANDI.w #$40,D1
  MOVE.b D1,partostack
  TST.b D2
   BMI.w JL_0_6894
  BTST #$5,D2
   BNE.w JL_0_68EC
   MOVE.w regnumstore,-(a7)
   MOVE.w tempregnum,-(a7)
   MOVE.w parnum,-(a7)
   BSR.w JL_0_6A10                    ;recursive entry
   MOVE.w (a7)+,parnum
   MOVE.w (a7)+,tempregnum
   MOVE.w (a7)+,regnumstore
JL_0_6854:
   MOVE.w partostack(PC),D1
   BEQ.w JL_0_6886
JL_0_685C:
  ADDQ.w #4,a2offset
'l10  MOVE.w AL_0_29EA,D1
  OR.w regnum,D1
  CMP.w #$3,D2
   BCC.w JL_0_6880
  SUBQ.w #2,a2offset
  ORI.w #$1000,D1
  BSR.w writeword
  RTS
JL_0_6880: CMP.b #7,d2
  BNE 'l10
  CMP.b #2,optistring
  ;BEQ 'l20                    muicycle fix
'l10
 TST.b iee
 BEQ 'old
 CMP.b #5,d2
 BNE 'old


'old BSR.w writeword          ;write val to stack

 RTS
'l20 SUBQ.w #4,a2offset
 RTS
JL_0_6886:  ADDQ.w #1,regnum
 RTS

JL_0_688E:  MOVEQ.l #$03,D2
 BRA.w JL_0_6854

JL_0_6894:  ANDI.w #$7,D2
  MOVE.w D2,-(A7)
   BSR.w JL_0_A916
  CMP.b #$7,D2
   BEQ.w JL_0_68C0
  BTST #$E,D2
   BEQ.w JL_0_68B6
  MOVE.b #$3,D2
 BRA.w JL_0_68C0

JL_0_68B6:  TST.b D2
   BNE.w JL_0_68C0
  MOVE.b #$3,D2
JL_0_68C0:  MOVE.w (A7)+,D3
  TST.b D3
   BEQ.w JL_0_68D2
  CMP.b D2,D3
   BEQ.w JL_0_688E
 BRA.w JL_0_853E

JL_0_68D2:  ADDQ.w #2,a2offset
  MOVE.w L_0_67E4(PC),D1
   BSR.w writeword
  MOVEQ.l #$00,D1
  MOVE.b D2,D1
   BSR.w writeword
 BRA.w JL_0_688E

JL_0_68EC:  MOVE.w D2,-(A7)
   BSR.w JL_0_694E
  BTST #$4,$1(A7)
   BEQ.w JL_0_6900
   BSR.w JL_0_699A
JL_0_6900:  BTST #$3,$1(A7)
   BEQ.w JL_0_690E
   BSR.w JL_0_6914
JL_0_690E:  MOVE.w (A7)+,D2
 BRA.w get1bytemain

JL_0_6914:  MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$7000,D1
  BTST #$0,$7(A3)
   BNE.w JL_0_6946
  CMPI.l #$100,$4(A2)
   BCC.w JL_0_7D1C
  MOVE.b $7(A2),D1
JL_0_693C:   BSR.w writeword
  MOVEQ.l #$02,D2
 BRA.w JL_0_685C

JL_0_6946:  MOVE.b #$3,D1
 BRA.w JL_0_693C

JL_0_694E:   BSR.w get1bytemain    ;write array paramter code
   BSR.w getparameter
  BTST #$1,AL_0_EC5B
   BEQ.w syntaxerr
   BSR.w JL_0_8E3C
   BSR.w get1bytemain
  CMP.w #$29,D0
   BNE.w syntaxerr
  MOVE.w notshared,D1
   BNE.w JL_0_7E86
  MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  OR.w L_0_6A08(PC),D1
   TST.b varmode
   BEQ 'l1
   BCLR #0,d1
'l1   BSR.w writeword
  MOVE.w $4(A3),D1
   BSR.w writeword
 BRA.w JL_0_688E

JL_0_699A:  MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  OR.w L_0_6A08(PC),D1
   TST.b varmode
   BEQ 'l1
   BCLR #0,d1
'l1
   BSR.w writeword
  MOVE.w $8(A3),D1
  LSL.w #2,D1
  MOVE.w varmode,D2
   BEQ.w JL_0_69BE
  NEG.w D1
JL_0_69BE:  ADD.w $4(A3),D1
   BSR.w writeword
  MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  MOVE.w partostack(PC),D2
   BNE.w JL_0_69F4
  CMPI.w #$7,regnum
   BCC.w JL_0_69F4
  OR.w L_0_6A0E(PC),D1
  MOVE.w regnum,D2
  SUBQ.w #1,D2
  OR.w D2,D1
 BRA.w JL_0_69F8

JL_0_69F4:  OR.w L_0_6A0C(PC),D1
JL_0_69F8:   BSR.w writeword
  MOVE.b #$1,partostack
 BRA.w JL_0_688E

L_0_6A08:   Dc.b " -",0,0
L_0_6A0C:   Dc.b $D0,$97 ;..
L_0_6A0E:   Dc.b $D0,$80 ;..
JL_0_6A10:  ANDI.w #$7,D2
   BEQ.w JL_0_9980
 BRA.w eval

JL_0_6A1C:  MOVEA.l libpointer,A1
JL_0_6A22:  CMPA.w #$0,A1
   BEQ.w JL_0_6A3C
  MOVE.w #$FFFF,$A(A1)
  BCLR #$7,$C(A1)
  MOVEA.l (A1),A1
 BRA.w JL_0_6A22

JL_0_6A3C: RTS

uselib2:  MOVE.w #$FFFE,D1
uselib:   BSR.w JL_0_6F38
JL_0_6A46:
  TST.w AL_0_E32E
   BEQ.w JL_0_6A60
  BTST #$6,$C(A1)
   BNE.w JL_0_6A5E
 BRA.w JL_0_8AC4

JL_0_6A5E: RTS

JL_0_6A60:  BSET #$7,$C(A1)
   BNE.w JL_0_6C74
   CMPI.w #$FFFF,$A(A1)
   BNE.w JL_0_6C74
   TST.w dirmode
   BEQ.b JL_0_6A86
   TST.b exdebug
   BEQ 'l1
   BRA.b JL_0_6A86
'l1 BCLR #$7,$C(A1)
 BRA.w JL_0_811E

JL_0_6A86:                    ;addlibrary
  MOVE.b debugmode,-(a7)
  MOVEM.l D1/A0/A2,-(A7)

;  BTST #$7,use_debugger
;  SNE d1
;  MOVE.b d1,debugmode

  BTST #$7,use_debugger
  BNE 'debugon
  CLR.w D1
  BRA.b 'debugoff
 'debugon
  SNE D1
 'debugoff
  MOVE.b d1,debugmode
;!basic
;logging{"debugmode in d1, state:" +Str$(Peek.w(?debugmode))}
;!asm
  MOVEA.l A1,A0
  ADDA.l $12(A1),A0
  TST.w -$2(A0)
   BEQ.w JL_0_6AD2
  MOVEM.l A0-A1,-(A7)
  MOVE.w #$FB4F,D1
   BSR.w uselib
  MOVEM.l (A7)+,A0-A1
  ADDQ.w #1,globalvarpointer
  BCLR #$0,AL_0_2B39
  MOVE.w globalvarpointer,-$6(A0)
  ADDQ.w #4,globalvarpointer
  TST.l -$E(A0)
   BEQ.w JL_0_6AD2
  ADDQ.w #4,globalvarpointer
  JL_0_6AD2:
  MOVE.l libend,$28(A1)
  MOVEA.l A1,A0
  ADDA.l $12(A1),A0
  MOVE.l A1,D1
  ADD.l $6(A1),D1
  TST.l $2C(A1)
   BEQ.w JL_0_6AFE

  TST.b debugmode
   BNE.w JL_0_6AFE
  MOVE.l A1,D1
  ADD.l $2C(A1),D1

  JL_0_6AFE:
  MOVEA.l libend,A2
  JL_0_6B04:
  CMPA.l data1start,A2
   BCS.w JL_0_6B24
  MOVE.w #$FFFF,dontwrite
  JL_0_6B16:
  ADDQ.w #2,A0
  ADDQ.w #2,A2
  CMPA.l D1,A0
   BCS.w JL_0_6B16
  BRA.w JL_0_6B2C

  JL_0_6B24:
  MOVE.w (A0)+,(A2)+        ;copylibcode
  CMPA.l D1,A0
   BCS.w JL_0_6B04

  JL_0_6B2C:
  MOVE.l A2,libend
  MOVE.l $20(A1),D1
   BEQ.w JL_0_6BB8
  MOVEM.l D0/D2-D3,-(A7)
  MOVEA.l $24(A1),A0
  MOVEQ.l #$00,D3

  JL_0_6B44:
  MOVE.l (A0)+,D2
  TST.l $2C(A1)
   BEQ.w JL_0_6B60
  TST.b debugmode
   BNE.w JL_0_6B60
  CMP.l $2C(A1),D2
   BCC.w JL_0_6BA0

  JL_0_6B60:
  TST.w $0(A1,D2.L)
   BPL.w JL_0_6B72
  TST.l D3
   BNE.w JL_0_6B72
  MOVE.l A0,D0
  MOVE.l D1,D3

  JL_0_6B72:
  SUB.l $12(A1),D2
   BMI.w JL_0_6BA0
  ADD.l $28(A1),D2
  MOVE.l D2,-(A7)
  SUB.l destbufferstart,D2
   BSR.w addhunkoffset
  MOVEA.l (A7)+,A2
  TST.w dontwrite
   BNE.w JL_0_6BA0
  MOVE.l $28(A1),D2
  SUB.l $12(A1),D2
  ADD.l D2,(A2)
JL_0_6BA0:  SUBQ.l #1,D1
   BNE.w JL_0_6B44
  MOVE.l D3,D2
   BEQ.w JL_0_6BB4
  MOVEA.l D0,A2
  SUBQ.w #4,A2
   BSR.w JL_0_6E34
JL_0_6BB4:  MOVEM.l (A7)+,D0/D2-D3
JL_0_6BB8:  MOVEM.l (A7)+,D1/A0/A2
  MOVEM.l D1-D2,-(A7)
  TST.w $1A(A1)
   BNE.w JL_0_6BD0
  CLR.w $A(A1)
 BRA.w JL_0_6C5E

JL_0_6BD0:  ADDQ.w #1,globalvarpointer
  BCLR #$0,AL_0_2B39
  MOVE.w globalvarpointer,$A(A1)
  CMP.w #-$12D,D1
   BNE.w JL_0_6C16
  MOVE.w $A(A1),AL_0_2A04
  MOVE.w $A(A1),AL_0_2AA2
  MOVE.w $A(A1),AL_0_2AA6
  MOVE.w $A(A1),AL_0_2AAA
  MOVE.w $A(A1),AL_0_2AAE
JL_0_6C16:  CMP.w #-$3E9,D1
   BNE.w JL_0_6C3E
  MOVE.w $A(A1),AL_0_2904
  MOVE.w $A(A1),AL_0_2908
  MOVE.w $A(A1),AL_0_C520
  MOVE.w $A(A1),AL_0_C524
  JL_0_6C3E:
  ADDQ.w #2,globalvarpointer
  TST.w $1A(A1)
   BMI.w JL_0_6C52
  ADDQ.w #2,globalvarpointer
  JL_0_6C52:
  MOVEM.l D1/A1,-(A7)
  BSR.w uselib2
  MOVEM.l (A7)+,D1/A1

  JL_0_6C5E:
  MOVE.w D1,D2
  MOVE.l $16(A1),D1
   BSR.w JL_0_6EF2
  MOVE.l $1C(A1),D1
   BSR.w JL_0_6EF2
  MOVEM.l (A7)+,D1-D2
  ;JSR Aclearcache
  MOVE.b (a7)+,debugmode

  JL_0_6C74:
RTS

JL_0_6C76:  MOVEQ.l #$00,D2
JL_0_6C78:  MOVEA.l AL_0_6EEE,A2
  CMPA.l D2,A2
   BEQ.w JL_0_6CE0
  MOVE.l A2,-(A7)
JL_0_6C86:  MOVEQ.l #$00,D3
JL_0_6C88:  MOVEA.l $8(A2),A3
  CMPA.l D3,A3
   BEQ.w JL_0_6CD2
  MOVE.l A3,-(A7)
  MOVEM.l D2-D3/A2-A3,-(A7)
  MOVE.w $4(A2),D1
  MOVE.w $6(A2),D2
   BSR.w JL_0_6CE2
  MOVEM.l (A7)+,D2-D3/A2-A3
  MOVE.w dontwrite,D0
   BEQ.w JL_0_6CBE
JL_0_6CB2:  MOVEA.l (A3),A3
  CMPA.l D3,A3
   BNE.w JL_0_6CB2
 BRA.w JL_0_6CCC

JL_0_6CBE:  MOVEA.l $4(A3),A0
  MOVE.l D7,(A0)
  MOVEA.l (A3),A3
  CMPA.l D3,A3
   BNE.w JL_0_6CBE
JL_0_6CCC:  MOVE.l (A7)+,D3
 BRA.w JL_0_6C88

JL_0_6CD2:  MOVEA.l (A2),A2
  CMPA.l D2,A2
   BNE.w JL_0_6C86
  MOVE.l (A7)+,D2
 BRA.w JL_0_6C78

JL_0_6CE0: RTS

JL_0_6CE2:  MOVE.w D2,-(A7)
   BSR.w searchinstr
  MOVE.w (A7)+,D2
  BCLR #$7,AL_0_BCF2
  BCLR #$E,D2
   BEQ.w JL_0_6D02
  BSET #$7,AL_0_BCF2
JL_0_6D02:  TST.w (A3)
   BEQ.w JL_0_6DAC
  BTST #$2,$1(A3)
   BNE.w JL_0_7F26
  BTST #$3,$1(A3)
   BNE.w JL_0_7F26
  LEA $6(A3),A3
JL_0_6D20:  MOVE.w (A3)+,D0
   BMI.w JL_0_7F26
  ANDI.w #$FF,D0
  ADDA.w D0,A3
  ADDQ.w #1,A3
  EXG.l D0,A3
  BCLR #$0,D0
  EXG.l D0,A3
  SUBQ.w #1,D2
   BPL.w JL_0_6D98
  TST.w (A3)
   BNE.w JL_0_6D76
  MOVE.l $2(A3),D0
  OR.l $A(A3),D0
   BNE.w JL_0_6D76
  BTST #$0,$9(A3)
   BNE.w JL_0_6D76
  MOVE.l $6(A3),D7
  MOVE.w $0(A2,D7.L),D0
  ANDI.w #$F000,D0
  CMP.w #-$6000,D0
   BEQ.w JL_0_6D76
JL_0_6D6C:  SUB.l $12(A2),D7
  ADD.l $28(A2),D7
 RTS

JL_0_6D76:  LEA AJL_0_BAE2,A0
JL_0_6D7C:  MOVE.l destpointer,-(A7)
  MOVE.w #$FFFF,AL_0_EC22
L_0_6D8A:   JSR (A0)
  MOVE.w #$4E75,D1
   BSR.w writeword
  MOVE.l (A7)+,D7
 RTS

JL_0_6D98:  TST.w (A3)+
   BEQ.w JL_0_6DA4
  ADDQ.w #2,A3
 BRA.w JL_0_6D98

JL_0_6DA4:  LEA $C(A3),A3
 BRA.w JL_0_6D20

JL_0_6DAC:  TST.w D2
   BNE.w JL_0_7F26
  TST.w $6(A3)
   BNE.w JL_0_6DE4
  MOVE.l $8(A3),D0
  OR.l $10(A3),D0
   BNE.w JL_0_6DE4
  BTST #$0,$F(A3)
   BNE.w JL_0_6DE4
  MOVE.l $C(A3),D7
  MOVE.w $0(A2,D7.L),D0
  ANDI.w #$F000,D0
  CMP.w #-$6000,D0
   BNE.w JL_0_6D6C
JL_0_6DE4:  MOVE.l A3,D1
  SUB.l A2,D1
  LEA Amakelibsub,A0
 BRA.w JL_0_6D7C

AJL_0_6DF2:
  MOVEA.l _execbase,A6
  MOVEA.l AL_0_6EEE,A2
  CLR.l AL_0_6EEE
  JL_0_6E02:
    CMPA.w #$0,A2
     BEQ.w JL_0_6E32
    MOVEA.l $8(A2),A3
    JL_0_6E0E:
      CMPA.w #$0,A3
       BEQ.w JL_0_6E24
      MOVEA.l A3,A1
      MOVEA.l (A3),A3
      MOVEQ.l #$08,D0
      MOVE.l mempool,a0
      JSR _FreePooled(A6)
    BRA.w JL_0_6E0E

    JL_0_6E24:
    MOVEA.l A2,A1
    MOVEA.l (A2),A2
    MOVEQ.l #$0C,D0
    MOVE.l mempool,a0
    JSR _FreePooled(A6)
  BRA.w JL_0_6E02

  JL_0_6E32:
RTS

JL_0_6E34:
  MOVEM.l D3-D5/A1-A6,-(A7)
  MOVEA.l A1,A4
  JL_0_6E3A:
  MOVE.l (A2)+,D3
  MOVE.w $0(A4,D3.L),D5
   BPL.w JL_0_6E7A
  TST.l $2C(A4)
   BEQ.w JL_0_6E5E
  TST.b debugmode
   BNE.w JL_0_6E5E
  CMP.l $2C(A4),D3
   BCC.w JL_0_6E7A

  JL_0_6E5E:
  BCLR #$F,D5
  MOVE.w $2(A4,D3.L),D4
  SUB.l $12(A4),D3
  ADD.l $28(A4),D3
  MOVEM.l D2/A2/A4,-(A7)
   BSR.w JL_0_6E86
  MOVEM.l (A7)+,D2/A2/A4
  JL_0_6E7A:
  SUBQ.l #1,D2
   BNE.w JL_0_6E3A
  MOVEM.l (A7)+,D3-D5/A1-A6
RTS

JL_0_6E86:  LEA AL_0_6EEE,A3
  MOVEA.l _execbase,A6
JL_0_6E90:  MOVE.l (A3),D0
   BEQ.w JL_0_6EAC
  MOVEA.l D0,A3
  CMP.w $4(A3),D4
   BNE.w JL_0_6E90
  CMP.w $6(A3),D5
   BNE.w JL_0_6E90
 BRA.w JL_0_6ED0

JL_0_6EAC:  MOVEQ.l #$0C,D0
  MOVEQ.l #$01,D1
  MOVE.l mempool,a0
  JSR _AllocPooled(a6)
   ;jsr AJL_0_4B6C
  MOVEA.l D0,A3
  MOVE.l AL_0_6EEE,(A3)
  MOVE.l A3,AL_0_6EEE
  MOVE.w D4,$4(A3)
  MOVE.w D5,$6(A3)
  CLR.l $8(A3)
JL_0_6ED0:  MOVEQ.l #$08,D0
  MOVEQ.l #$01,D1
  MOVE.l mempool,a0
  JSR _AllocPooled(a6)
   ;jsr AJL_0_4B6C
  MOVEA.l D0,A0
  MOVE.l D3,$4(A0)
  MOVE.l $8(A3),(A0)
  MOVE.l A0,$8(A3)
  MOVE.w D4,D1
BRA.w searchinstr

AL_0_6EEE: Ds.l 1
JL_0_6EF2:
  BEQ.w JL_0_6F18
  MOVE.l A1,-(A7)
  ADDA.l D1,A1
  ADDQ.w #6,A1

  JL_0_6EFC:
    MOVE.w (A1)+,D1
    BEQ.w JL_0_6F16
    CMP.w D2,D1
    BEQ.w JL_0_6F10
    MOVE.l A1,-(A7)
    BSR.w uselib
    MOVEA.l (A7)+,A1
    JL_0_6F10:
    ADDQ.w #2,A1
  BRA.w JL_0_6EFC

  JL_0_6F16:
  MOVEA.l (A7)+,A1
  JL_0_6F18:
RTS

AJL_0_6F1A:  MOVEA.l libpointer,A1
JL_0_6F20:  CMPA.w #$0,A1
   BEQ.b JL_0_6F36
  CMP.w $4(A1),D1
   BEQ.w JL_0_6F34
  MOVEA.l (A1),A1
 BRA.w JL_0_6F20

  JL_0_6F34:
  MOVEQ.l #-$01,D1
  JL_0_6F36:
RTS

JL_0_6F38:
  MOVEM.l d0/a2,-(a7)
  MOVEQ #0,d0
  LEA instrtab+4,a2
  MOVE.w d1,d0
  ASL.l #3,d0
  MOVE.l 0(a2,d0.l),a1         ;*8
  CMP.l #0,a1
  BNE JL_0_6F54b

  MOVEA.l libpointer,A1
  JL_0_6F3E:
    CMPA.w #$0,A1
    BEQ.w JL_0_85F0
    CMP.w $4(A1),D1
    BEQ.w JL_0_6F54
   MOVEA.l (A1),A1
  BRA.w JL_0_6F3E

  JL_0_6F54:
  MOVE.l a1,0(a2,d0.l)

  JL_0_6F54b:
  MOVEM.l (a7)+,d0/a2
RTS

searchinstr:
  MOVEM.l d0-d1/a1,-(a7)
  MOVEQ #0,d0
  LEA instrtab,a1
  MOVE.w d1,d0
  ASL.l #3,d0
  MOVE.l 0(a1,d0.l),a3
  MOVE.l 4(a1,d0.l),a2
  CMP.l #0,a3
  BNE JL_0_6F92b

  MOVEA.l libpointer,A2
  JL_0_6F5C:
  CMPA.w #$0,A2
  BEQ.w L_0_8618
  CMP.w $E(A2),D1
  BCS.w JL_0_6FB8
  CMP.w $10(A2),D1
  BCC.w JL_0_6FB8
  LEA $30(A2),A3
  TST.w $4(A2)
  BPL.w JL_0_6FA6

  JL_0_6F80:
    CMP.w $E(A2),D1
    BEQ.w JL_0_6F92
    SUBQ.w #1,D1
    MOVEA.l $2(A3),A3
  BRA.w JL_0_6F80

  JL_0_6F92:
  MOVE.l a3,0(a1,d0.l)
  MOVE.l a2,4(a1,d0.l)

  JL_0_6F92b
  MOVEM.l (a7)+,d0-d1/a1
  MOVEM.l D1/A1-a3,-(A7)
  CMP.w #1,(a3)
  BNE.s ex10
  CMP.l #$12345678,$e(a3)
  BNE.s ex10
  CMP.w #$ffff,$16(a3)
  BNE.s ex10
  MOVE.l $12(a3),d1
  BEQ.s ex10
  LEA pluginbase,a3
  ;move.b #1,newmode
  JMP 0(a2,d1.l)                  ;plugin

  exit:
  MOVEM.l (A7)+,D1/A1-a3
  JSR stripspaces
  MOVEQ #0,d0
  MOVE.b (a5)+,d0
  MOVE.w d0,lastchar
  ADDQ.l #4,a7
  RTS

  ex10:
  MOVEA.l A2,A1
  CLR.b newmode
  MOVE.w $4(A1),D1
  ;CMP.w #$fed3,d1
  ;BEQ 'l1
  BSR.w JL_0_6A46
  MOVEM.l (A7)+,D1/A1-a3
  RTS

 'l1
  MOVE.w globalvarpointer,-(a7)
  MOVE.w #$8004,globalvarpointer
  BSR.w JL_0_6A46
  MOVE.w (a7)+,globalvarpointer
  MOVEM.l (A7)+,D1/A1-a3
  RTS

  JL_0_6FA6:
    CMP.w $E(A2),D1
    BEQ.w JL_0_6F92
    SUBQ.w #1,D1
    MOVEA.l $2(A3),A3
  BRA.w JL_0_6FA6

  JL_0_6FB8:
  MOVEA.l (A2),A2
BRA.w JL_0_6F5C

writewordb:
JMP writeword


ptr_acidlibs:   Ds.l 1
ptr_deflibs:   Ds.l 1
ptr_userlibs:   Ds.l 1

; input  : D0: size,D1: ptr_strname
; returns: D0: buffer addr
.load_libsfile:
  TST.l D0
  BEQ.w exit_loadlibsfile
    MOVE.l D0,D6
    MOVEA.l _dosbase,A6
    MOVE.l #HUNK_RELOC_16__MODE_OLDFILE,D2
    JSR _Open(A6)
    MOVE.l D0,D7
    BEQ.w exit_loadlibsfile
      MOVE.l D6,D0
      MOVEQ.l #$01,D1
      MOVEA.l _execbase,A6
      MOVE.l mempool,a0
      JSR _AllocPooled(a6)
      MOVE.l D0,D5

      MOVE.l D7,D1        ; handle
      MOVE.l D5,D2        ; buffer addr
      MOVE.l D6,D3        ; size
      MOVEA.l _dosbase,A6
      JSR _Read(A6)
      MOVE.l D7,D1
      JSR _Close(A6)

      MOVEA.l D5,A0       ; buffer addr

      ; --
      ; -- process loaded acid/deflibs
      ; -- (libpointer steht ja in A3)
      JL_0_7010:
        MOVE.l (A0)+,D0               ; naechster Longwert nach DO
        BEQ.b JL_0_7044               ; wenn <> 0, dann
          LEA $20(A0),A1              ;   lade inhalt von D0+40bytes nach A1
          MOVE.l A1,(A3)              ;   kopiere Adresse in A1 zum libpointer
          MOVEA.l A1,A3               ;   kopiere A1 nach A3
          ADDA.l D0,A0                ;   addiere inhalt von D0 zu A0 hinzu
          MOVE.l -$4(A1),D0           ;   hole die 4bytes vor nach D0
          ADD.l D0,D0                 ;   verdoppele D0
          ADD.l D0,D0                 ;   verdoppele D0 nochmal
          MOVE.l D0,$6(A1)            ;   schreibe D0 6bytes nach A1
          CLR.l $20(A1)               ;   loesche D0+40bytes
          LEA $C(A1,D0.L),A2          ;   lade inhalt von (A1)+D0+$C nach A2
          CMPA.l A0,A2
          BCC.b JL_0_7010             ; wenn A0=>A2
            MOVE.l -$8(A2),$20(A1)    ;
            MOVE.l A2,$24(A1)         ;
      BRA.w JL_0_7010
      JL_0_7044:

      MOVE.l D5,D0
  exit_loadlibsfile:
RTS


.init_libraries:
  !basic
  tempmapping$ = dos_AddPart{my_systemdir$,"token_mapping_userlibs.txt"}
  dos_Delete{tempmapping$}
  fid.l = file_Open{tempmapping$,#file_forcewrite}
  !asm

  LEA libpointer,A3

  ; --
  ; -- load the deflibs
  MOVE.l size_deflibs,D0
  MOVE.l deflib,d1
  BEQ 'l1
    BRA 'l2
  'l1
  MOVE.l #str_path_deflibs,D1
 'l2
  BSR.w load_libsfile
  MOVE.l D0,ptr_deflibs
  ; --
  ; -- load the acidlibs
  MOVE.l size_acidlibs,D0
  MOVE.l #str_path_acidlibs,D1
  BSR.w load_libsfile
  MOVE.l D0,ptr_acidlibs

  ; --
  ; -- load the userlibs
  CLR.l (A3)
  MOVE.l A3,ptr_userlibs

  ; -- copy current path to str_libfilename
  JL_0_7082:
  LEA str_libfilename,A0
  LEA str_path_userlibs,A1
  JL_0_708E:
    MOVE.b (A1)+,(A0)+
  BNE.b JL_0_708E
  ; -- append "/" = $2F
  SUBQ.w #1,A0
  MOVE.b #$2F,(A0)+
  JL_0_70A6:

  MOVE.l A0,-(A7)                 ; -- store str_path_userlibs in A7

  LEA ptr_userlibs_list,A2
  MOVEA.l ptr_userlibs,A3
  MOVEA.l _dosbase,A6
  ; --
  ; -- loop for loading libs out of "userlibs"
  JL_0_70BA:
      MOVE.l (A2),D0          ; addresse aus liste nach D0
      BNE.b JL_0_70C6         ; wenn nix drin, processing ueberspringen

      CLR.l (A3)
      ADDQ.w #4,A7
      !basic
      If fid<>-1
        file_Close{fid}
        fid = -1
      EndIf
      !asm
      BRA.w process_libraries
      JL_0_70C6:

      MOVEA.l D0,A2           ; addresse zureuck nach A2
      TST.w $4(A2)            ; naechste addresse pruefen
    BEQ.b JL_0_70BA

    LEA $6(A2),A1
    MOVEA.l (A7),A0
    JL_0_70D4:
      MOVE.b (A1)+,(A0)+
    BNE.w JL_0_70D4

    ; --
    ; -- lock the userlibs directory, e.g. "private"
    MOVE.l A0,-(A7)
    MOVE.l #str_libfilename,D1
    MOVEQ.l #-$02,D2
     JSR _Lock(A6)
    MOVE.l D0,D1
     BEQ.w JL_0_7156
    MOVEA.l (A7),A0
    MOVE.b #$2F,-$1(A0)

    ; -- examine the files
    MOVE.l D1,-(A7)
    MOVE.l #ptr_parameterstore,D2
    JSR _Examine(A6)
    TST.l D0
     BEQ.w JL_0_7150

    ; pruefen, ob infofile
    LEA fib_FileName,A0
    BSR.w check_for_infoextention
    BEQ.w JL_0_7150
    ; --
    ; -- open that file ...
    !basic
    Poke$ ?str_libfilename,dos_AddPart{Peek$(?str_path_userlibs),Peek$(?fib_FileName)}
    !asm
    MOVE.l #str_libfilename,D1
    BSR.w open_userlibfile
    JL_0_7150:

    MOVE.l (A7)+,D1
    JSR _UnLock(A6)

    JL_0_7156:
    ADDQ.w #4,A7
  BRA.w JL_0_70BA

  open_userlibfile:
  MOVE.l #HUNK_RELOC_16__MODE_OLDFILE,D2
   JSR _Open(A6)
  MOVE.l D0,D7
   BEQ.w exit_userlibfile

  ; -- read 32 bytes of library
  MOVE.l D7,D1              ; filehandle
  MOVE.l #AL_0_ED70,D2      ; buffer
  MOVEQ.l #$20,D3           ; size
  JSR _Read(A6)

  ; -- calculate size of datachunk and allocate memory
  MOVE.l AL_0_ED8C,D6
  LSL.l #2,D6
  MOVE.l D6,D0
  MOVEQ.l #$01,D1
  MOVEA.l _execbase,A6
  MOVE.l mempool,a0
  JSR _AllocPooled(a6)
  MOVEA.l D0,A5

  ; -- read that datachunk from library
  MOVEA.l _dosbase,A6
  MOVE.l D7,D1             ; filehandle
  MOVE.l A5,D2             ; buffer
  MOVE.l D6,D3             ; size
   JSR _Read(A6)
  MOVE.l A5,(A3)
  ; -- get the address for basic code
  MOVE.l A5,d0
  ; --
  MOVEA.l A5,A3
  MOVE.l D6,$6(A5)
  CLR.l $20(A5)

  !basic
  ; -- get the first token of the lib
  addr_libnum.l = PutD0 + 4
  If fid<>-1
    currentlib$ = LSet$(Peek.s(?fib_FileName),30)+";"+LSet$(Get_Libinfo{addr_libnum},30) ;+";"+Str$(Peek.w(addr_libnum))
    file_WriteLine{fid,currentlib$}
  EndIf
  !asm

  ; -- read 12 bytes from library
  MOVE.l D7,D1             ; filehandle
  MOVE.l #AL_0_ED70,D2     ; buffer
  MOVEQ.l #$0C,D3          ; size
   JSR _Read(A6)
  ; -- close file if these 12 bytes could not be read
  CMP.l #$C,D0
   BCS.w close_and_exit_userlibfile

  ; -- else read on
  MOVE.l AL_0_ED74,D0
  MOVE.l D0,$20(A5)
  LSL.l #2,D0
  MOVE.l D0,D5
  MOVEQ.l #$01,D1
  MOVEA.l _execbase,A6
  MOVE.l mempool,a0
  JSR _AllocPooled(a6)
   ;jsr AJL_0_4B6C
  MOVEA.l _dosbase,A6
  MOVE.l D0,$24(A5)
  MOVE.l D7,D1
  MOVE.l D0,D2
  MOVE.l D5,D3
  JSR _Read(A6)

  close_and_exit_userlibfile:
  MOVE.l D7,D1
  JMP _Close(A6)

  exit_userlibfile:
RTS

  ; --
  ; -- prepare userlibs and adding to librarylist
.process_libraries:
  CLR.w number_of_objects
  MOVEA.l end_of_tokenlist,A3
  MOVEA.l libpointer,A2
  JL_0_720E:
    CMPA.w #$0,A2
    BEQ.w JL_0_72D8   ; <-- abbruch mit RTS

    MOVE.w $4(A2),D7   ; <-- get tokennumber
    BMI.w JL_0_7226
      LSL.w #7,D7
      ADDQ.w #1,D7
      MOVE.w D7,$E(A2)
    JL_0_7226:

    LEA $30(A2),A1
    LEA AL_0_EC60,A4
    JL_0_7230:
      MOVE.w (A1),D0
      BMI.w JL_0_72AE
      MOVE.l A1,(A4)
      MOVEA.l A1,A4
      ADDQ.w #2,A4
      ADDQ.w #6,A1
      CMP.w #$8,D0
      BEQ.w JL_0_7290
        ANDI.w #$F,D0
        BNE.w JL_0_725C
          BSR.w JL_0_7314
          LEA $C(A1),A1
          ADDQ.w #1,D7
    BRA.w JL_0_7230

    JL_0_725C:
    BTST #$2,D0
    BEQ.w JL_0_7274
      ADDQ.w #4,A1

      JL_0_7266:
        TST.b (A1)+
      BPL.w JL_0_7266
      BSR.w JL_0_732C
      BRA.w JL_0_7290

    JL_0_7274:
      MOVE.w (A1)+,D0
      BMI.w JL_0_7290
      ANDI.w #$FF,D0
      ADDA.w D0,A1
      BSR.w JL_0_732C
      BSR.w JL_0_7314
      LEA $C(A1),A1
    BRA.w JL_0_7274

    JL_0_7290:
    MOVE.l A1,(A3)
    MOVEA.l A1,A3
    ADDQ.w #4,A1
    MOVE.w D7,(A1)+
    JL_0_7298:
      TST.b (A1)+
    BNE.w JL_0_7298

    JL_0_729E:
      TST.b (A1)+
    BNE.w JL_0_729E

    BSR.w JL_0_732C
    ADDQ.w #1,D7
    BRA.w JL_0_7230

    JL_0_72AE:
    TST.w $4(A2)
     BMI.w JL_0_72BA
    MOVE.w D7,$10(A2)
    JL_0_72BA:
    ADDQ.w #2,A1
    TST.l (A1)+
     BEQ.w JL_0_72CC
    ADDQ.w #1,number_of_objects
    LEA $16(A1),A1
    JL_0_72CC:
    SUBA.l A2,A1
    MOVE.l A1,$12(A2)
    MOVEA.l (A2),A2
  BRA.w JL_0_720E

  JL_0_72D8:
  CLR.l (A3)
  MOVE.l A7,AL_0_2B18
  MOVE.l #AL_0_730E,AL_0_2B1C
  MOVE.w #$FFFF,AL_0_8AFE
  MOVE.w #$FFFA,D1
   BSR.w JL_0_6F38
  MOVE.l A1,tempvm
  MOVE.w #$FDA7,D1
   BSR.w JL_0_6F38
  MOVE.l A1,AL_0_7310
  AL_0_730E:
RTS


AL_0_7310:  Ds.l 1
JL_0_7314:
    TST.w (A1)+
    BEQ.w JL_0_7320
    ADDQ.w #2,A1
  BRA.w JL_0_7314

  JL_0_7320:
RTS

JL_0_7322:
  EXG.l A1,A0
  BSR.w JL_0_732C
  EXG.l A1,A0
  RTS

  JL_0_732C:
  EXG.l D0,A1
  ADDQ.l #1,D0
  BCLR #$0,D0
  EXG.l D0,A1
RTS


.free_userlibs:
  MOVEA.l _execbase,A6
  MOVEA.l ptr_userlibs,A2
  MOVE.l (A2),D0
  CLR.l (A2)
  MOVEA.l D0,A2
  JL_0_7348:
    CMPA.w #$0,A2
    BEQ.w free_userlib

    MOVE.l $20(A2),D0
    BEQ.b JL_0_7360
      LSL.l #2,D0
      MOVE.l mempool,a0
      MOVEA.l $24(A2),A1
      JSR _FreePooled(A6)
    JL_0_7360:

    MOVEA.l A2,A1
    MOVE.l $6(A1),D0
    MOVE.l mempool,a0
    MOVEA.l (A2),A2
    JSR _FreePooled(A6)
  BRA.w JL_0_7348


.free_blitzlibs:
  BSR.w free_userlibs
  MOVEA.l _execbase,A6
  CLR.l libpointer
  MOVEA.l end_of_tokenlist,A0
  CLR.l (A0)

  MOVE.l size_acidlibs,D0
  BEQ.b JL_0_73A2
    MOVE.l ptr_acidlibs,D1
    BEQ.b JL_0_73A2
      CLR.l ptr_acidlibs
      MOVEA.l D1,A1
      MOVE.l mempool,a0
      JSR _FreePooled(A6)         ; free acidlibs
  JL_0_73A2:

  MOVE.l size_deflibs,D0
  BEQ.b JL_0_73BE
    MOVE.l ptr_deflibs,D1
    BEQ.b JL_0_73BE
      CLR.l ptr_deflibs           ; d0: memorySize
      MOVEA.l D1,A1               ; a1: memory
      MOVE.l mempool,a0           ; a0: poolHeader
      JSR _FreePooled(A6)         ; free deflibs
  JL_0_73BE:
RTS


AJL_0_73C0:
  MOVEA.l currentmacroaddr,A0
  MOVEA.l (A0),A2
  CLR.l (A0)
  MOVEA.l _execbase,A6
  JL_0_73CE:
    CMPA.w #$0,A2
    BEQ.w JL_0_73FA
    MOVEQ.l #$00,D0
    MOVE.w $8(A2),D0
    BEQ.w JL_0_73E8
    MOVEA.l $4(A2),A1
    MOVE.l mempool,a0
    JSR _FreePooled(A6)
    JL_0_73E8:
    MOVEA.l A2,A1
    MOVEA.l (A2),A2
    MOVEQ.l #$00,D0
    MOVE.b $C(A1),D0
    MOVE.l mempool2,a0
    JSR _FreePooled(A6)
  BRA.w JL_0_73CE

  JL_0_73FA:
RTS

cleartemplabel:
  MOVEA.l templabel,A2
  CLR.l templabel
RTS
  MOVEA.l _execbase,A6
  JL_0_740C:
    CMPA.w #$0,A2
    BEQ.w JL_0_7426
    MOVEQ.l #$00,D0
    MOVE.b $E(A2),D0            ;labeltemp
    MOVEA.l A2,A1
    MOVEA.l (A2),A2
    MOVE.l mempool2,a0
    ;jsr _FreePooled(A6)
  BRA.w JL_0_740C

  JL_0_7426:
RTS


JL_0_7428:
  MOVEA.l AL_0_E8EE,A4
  CMPA.l AL_0_E8E2,A4
  BCC.w JL_0_7442
    MOVE.b D1,(A4)+
    MOVE.l A4,AL_0_E8EE
    RTS
  JL_0_7442:

  MOVE.w #$FFFF,dontwrite
  ADDQ.l #1,AL_0_E8EE
RTS


writedatalong:
  SWAP D1
  BSR.w JL_0_745A
  SWAP D1

  JL_0_745A:
  MOVEA.l AL_0_E8EE,A4
  CMPA.l AL_0_E8E2,A4
   BCC.w JL_0_7474
  MOVE.w D1,(A4)+
  MOVE.l A4,AL_0_E8EE
  RTS

  JL_0_7474:
  MOVE.w #$FFFF,dontwrite
  ADDQ.l #2,AL_0_E8EE
RTS

JL_0_748Ab:  MOVE.l AL_0_E8EE,D3       ;write local string/type allocs
  MOVEQ.l #$00,D4
JL_0_7492c:  CMPA.w #$0,A2
   BEQ.w JL_0_74CAc
  TST.w $6(A2)
   BNE.w JL_0_74C4c
  MOVEA.l $A(A2),A3
  CMPI.l #$100,$4(A3)
   BCS.w JL_0_74C4c
  MOVE.w $4(A2),D1
   BSR.w JL_0_745A
  MOVE.w $8(A3),D1
   BSR.w JL_0_745A
  ADDQ.w #1,D4
JL_0_74C4c:  MOVEA.l (A2),A2
 BRA.w JL_0_7492c

JL_0_74CAc:
   TST.w D4
   BEQ.w JL_0_74E0
  MOVE.w #$FF37,D1
   BSR.w uselib
  MOVE.w #$FFFA,D1
 BRA.w uselib


JL_0_7484:  MOVEA.l varbase,A2      ;add alloc mem for types/strings global
JL_0_748A:  MOVE.l AL_0_E8EE,D3
  MOVEQ.l #$00,D4
JL_0_7492:  CMPA.w #$0,A2
   BEQ.w JL_0_74CA
  TST.w $6(A2)
   BNE.w JL_0_74C4
  MOVEA.l $A(A2),A3
  CMPI.l #$100,$4(A3)
   BCS.w JL_0_74C4
  MOVE.w $4(A2),D1
   BSR.w JL_0_745A
  MOVE.w $8(A3),D1
   BSR.w JL_0_745A
  ADDQ.w #1,D4
JL_0_74C4:  MOVEA.l (A2),A2
 BRA.w JL_0_7492

JL_0_74CA:

JL_0_7484b:  MOVEA.l sharebase,A2

JL_0_7492b:  CMPA.w #$0,A2
   BEQ.w JL_0_74CAb

  TST.w $6(A2)
   BNE.w JL_0_74C4b
  MOVEA.l $A(A2),A3
  CMPI.l #$100,$4(A3)
   BCS.w JL_0_74C4b
  MOVE.w $4(A2),D1
   BSR.w JL_0_745A
  MOVE.w $8(A3),D1
   BSR.w JL_0_745A
  ADDQ.w #1,D4
JL_0_74C4b:  MOVEA.l (A2),A2
 BRA.w JL_0_7492b
JL_0_74CAb
   TST.w D4
   BEQ.w JL_0_74E0
  MOVE.w #$FF37,D1
   BSR.w uselib
  MOVE.w #$FFFA,D1
 BRA.w uselib

JL_0_74E0: RTS

JL_0_74E2:  MOVE.w AL_0_2AB6,D1
   BSR.w writeword
   BSR.w JL_0_791C
  MOVE.l D3,D1
   BSR.w writelong
  SUBQ.w #1,D4
  MOVE.w D4,AL_0_2ABE
  MOVE.l AL_0_2ABC,D1
BRA.w writelong

JL_0_7508:
  MOVE.l D3,-(A7)
   JSR _Reschedule(A6)
  CMP.l (A7)+,D0
   BNE.w JL_0_7516
RTS

JL_0_7516:
  MOVE.l D7,D1
  JSR _ExitIntr(A6)
  JL_0_751C:
JMP error_create_exe

Dc.b "Nu"
.savefile:
  MOVE.l A7,AL_0_2B18
  MOVEM.l d2-d7/a2-a6,-(a7)
  MOVE.l #AL_0_7790,AL_0_2B1C
   BSR.w call_setpointerbusy
  MOVE.w #$FFFF,AL_0_E84C
  CMP.l #-1,chipstart
  BEQ 'l01
  MOVE.l chipend,d1
  ADDQ.l #3,d1
  AND.l #$fffffffc,d1   ;bug
  MOVE.l d1,chipend
  MOVE.l d1,a1
  MOVE.l chipstart,a0
  MOVE.l a1,d1
  SUB.l a0,d1
  MOVE.l d1,chipsize
'l01  CMP.l #-1,bssstart
  BEQ 'l11

  MOVE.l realbssend,a1
  MOVE.l bssstart,a0
  MOVE.l a1,d1
  SUB.l a0,d1
  MOVE.l d1,bsssize
  BEQ 'l11
'l32 TST.b (a0)+
  BEQ 'l31
  TST.b debugmode
  BEQ 'l1
  TST.b exdebug
  BNE 'l31
'l1  MOVE.l #nodata,-(a7)
  JMP handle_compileerror
'l31
  CMP.l a0,a1
  BGT 'l32
  MOVE.l bssend,d1
  ADDQ.l #3,d1
  AND.l #$fffffffc,d1     ;bug
  MOVE.l d1,bssend
  MOVE.l d1,a1
  MOVE.l bssstart,a0
  MOVE.l a1,d1
  SUB.l a0,d1
  MOVE.l d1,bsssize
'l11
  MOVEM.l d5-d7/d3,-(a7)
  MOVE.w dontwrite,D1
  BNE.w JL_0_757C
  MOVE.l chipsize,d5
  MOVE.l bsssize,d3
  MOVE.l chipstart,d7
  MOVE.l bssstart,d6
  MOVEA.l hunkoffsetbase,A2
  MOVEA.l destbufferstart,A1
  MOVE.l A1,D2
  ADD.l AL_0_E850,D2
  CLR.l hunkoffsetnum
JL_0_755E:  CMPA.w #$0,A2
   BEQ.w JL_0_757C
  MOVE.l $4(A2),D0
   LEA $0(a1,d0.l),a0
   MOVE.l (a0),d1
  TST.l d1
   BMI.w 'lm1
  MOVE.b #0,newhunk
  CMP.l #-1,chipstart
  BEQ 'l10
  CMP.l chipstart,d1
  BLT 'l10
  MOVE.b #1,newhunk
  CMP.l chipend,d1
  BGE 'l110
  SUB.l d7,(a0)
  ADD.l #$80000000,4(a2)
  BRA JL_0_7576
'l110  SUB.l d5,0(a0)
'l10 CMP.l #-1,bssstart
    BEQ 'l11
  CMP.l bssstart,d1
  BLT 'l11
  CMP.l bssend,d1
  BGE 'l111
  TST.b newhunk
  BEQ 'ln1
  ADD.l d5,(a0)
'ln1  SUB.l d6,(a0)
  ADD.l #$40000000,4(a2)
  BRA JL_0_7576
'l111  SUB.l d3,0(a0)
'l11
  SUB.l D2,(A0)
'lm1 ADDQ.l #1,hunkoffsetnum
JL_0_7576:  MOVEA.l (A2),A2
 BRA.w JL_0_755E

JL_0_757C:
  MOVEM.l (a7)+,d5-d7/d3
  MOVE.l ptr_newexefilename,D1
  MOVE.l #HUNK_RELOC_8__MODE_NEWFILE,D2
  MOVEA.l _dosbase,A6
   JSR _Open(A6)
  MOVE.l D0,D7
   BEQ.w JL_0_751C
  MOVE.l AL_0_EC4E,D0
  SUB.l #moremem,d0
  SUB.l AL_0_E850,D0
  CMP.l #-1,bssstart
  BEQ 'l60
  SUB.l bsssize,d0
  SUB.l chipsize,d0
  BRA.s 'l61
'l60
  CMP.l #-1,chipstart
  BEQ 'l61
  SUB.l bsssize,d0
  SUB.l chipsize,d0
'l61
  ADDQ.l #3,D0
  LSR.l #2,D0
  MOVE.l D0,AL_0_842
  MOVE.l D0,AL_0_84A
  MOVE.l D7,D1
  MOVE.l #AL_0_82E,D2           ;hunkbegin
  MOVEQ.l #$20,D3
  CMP.l #-1,bssstart
  BEQ 'lb1
  CMP.l #-1,chipstart
  BEQ 'lb1
  MOVE.l #1,bssnum
  MOVE.l #2,chipnum
  MOVEQ.l #$28,D3
  MOVE.l bsssize,d2
  ADDQ.l #3,d2
  ASR.l #2,d2
  MOVE.l d2,hunkend+8
  MOVE.l d2,bsssize3
  MOVE.l chipsize,d2
  ADDQ.l #3,d2
  ASR.l #2,d2
  MOVE.l d2,chipsize2
  ADD.l #$40000000,chipsize2
  MOVE.l d2,hunkend2+8
  MOVE.l D0,AL_0_842c
  MOVE.l D0,AL_0_84Ac
  MOVE.l #hunkbegin2,d2
  BRA 'l100
'lb1  CMP.l #-1,bssstart
  BEQ 'l10
  MOVE.l #1,bssnum
  MOVEQ.l #$24,D3
  MOVE.l bsssize,d2
  ADDQ.l #3,d2
  ASR.l #2,d2
  MOVE.l d2,hunkend+8
  MOVE.l d2,bsssize2
  MOVE.l D0,AL_0_842b
  MOVE.l D0,AL_0_84Ab
  MOVE.l #hunkbegin,d2
'l10
  CMP.l #-1,chipstart
  BEQ 'l100
  MOVE.l #1,chipnum
  MOVEQ.l #$24,D3
  MOVE.l chipsize,d2
  ADDQ.l #3,d2
  ASR.l #2,d2
  MOVE.l d2,hunkend2+8
  MOVE.l d2,bsssize2
  ADD.l #$40000000,bsssize2
  MOVE.l D0,AL_0_842b
  MOVE.l D0,AL_0_84Ab
  MOVE.l #hunkbegin,d2
'l100
   BSR.w JL_0_7508
  MOVE.l destbufferstart,D2
  ADD.l AL_0_E850,D2
  MOVE.l AL_0_EC4E,D3
  SUB.l #moremem,d3
  SUB.l AL_0_E850,D3
  CMP.l #-1,bssstart
  BNE 'l40
  CMP.l #-1,chipstart
  BNE 'l40
  BRA 'l41
'l40 MOVE.l codeend,d1
    SUB.l d2,d1
    MOVE.l d1,d3
  SUB.l bsssize,d3
  SUB.l chipsize,d3
  MOVE.l D7,D1
  BSR.w JL_0_7508
  MOVE.l AL_0_EC4E,D3
  SUB.l #moremem,d3
  SUB.l AL_0_E850,D3
  MOVE.l d3,d1
  MOVE.l destbufferstart,D2
  ADD.l AL_0_E850,D2
  ADD.l d2,d1
  SUB.l codeend,d1
  MOVE.l d1,d3
  MOVE.l codeend,d2
'l41
  MOVE.l d2,d1
  ADD.l d3,d1
  ADDQ.l #3,D1
  ANDI.l #$FFFFFFFC,D1
  SUB.l d2,d1
  MOVE.l d1,d3
  MOVE.l D7,D1
   BSR.w JL_0_7508
  MOVE.l hunkoffsetcounter,AL_0_852
   BEQ.w JL_0_7646
  MOVE.l D7,D1
  MOVE.l #AL_0_84E,D2
  MOVEQ.l #$04,D3
   BSR.w JL_0_7508
   MOVE.l $4,a6
   MOVE.l hunkoffsetcounter,d0
   ASL.l #2,d0
   ADD.l #12,d0
   MOVEQ #0,d1
   JSR -$c6(a6)
   TST.l d0
   BEQ nomem
   MOVE.l AL_0_E850,D4
   MOVE.l d5,-(a7)
   MOVE.l d0,d5
   MOVE.l d0,a1
   MOVEA.l hunkoffsetbase,A2
   MOVE.b #0,newhunk
JL_0_5690b:  CMPA.w #$0,A2
   BEQ.w savehunk
  MOVE.l destbufferstart,D2
  ADD.l AL_0_E850,D2
  MOVE.l  $4(A2),d1
  BTST #31,d1
  BEQ 'lh1
  MOVE.b #1,newhunk
  BRA 'lh3
'lh1  BTST #30,d1
  BEQ 'lh2
  MOVE.b #1,newhunk
  BRA 'lh3
'lh2  ADD.l d1,d2
  CMP.l chipend,d2
  BLT 'l100
  SUB.l chipsize,d1
'l100 CMP.l bssend,d2
  BLT 'l101
  SUB.l bsssize,d1
'l101
  MOVE.l d1,(a1)
  SUB.l D4,(A1)+
'lh3  MOVEA.l (A2),A2
 BRA.w JL_0_5690b
savehunk MOVE.l D7,D1
  MOVEA.l _dosbase,A6
  MOVE.l hunkoffsetnum,AL_0_852
  BEQ 'ln1
  MOVE.l #AL_0_84E+4,d2
    MOVEQ #8,d3
   JSR _Write(A6)
  MOVE.l d7,d1
  MOVE.l hunkoffsetnum,d3
  ASL.l #2,d3
  MOVE.l d5,D2
  JSR _Write(a6)
'ln1  TST.b newhunk
  BEQ 'l10
  MOVEA.l hunkoffsetbase,A2
  MOVE.l d5,a0
  ADDQ #8,a0
  MOVE.l bssnum,-4(a0)
  MOVEQ #0,d6
'lh2  CMPA.w #$0,A2
   BEQ.w 'lh3
  MOVE.l destbufferstart,D2
  ADD.l AL_0_E850,D2
  MOVE.l  $4(A2),d1
  BTST #30,d1
  BEQ 'lh1
  BCLR #30,d1
  MOVE.l d1,(a0)
  SUB.l D4,(A0)+
  ADDQ.l #1,d6
'lh1  MOVE.l (a2),a2
  BRA 'lh2
'lh3 TST.l d6
    BEQ 'lh10
    MOVE.l d5,a0
    MOVE.l d6,(a0)
    MOVE.l d7,d1
    MOVE.l d5,d2
    MOVE.l d6,d3
    ASL.l #2,d3
    ADDQ.l #8,d3
    BSR.w JL_0_7508
'lh10
  MOVEA.l hunkoffsetbase,A2
  MOVE.l d5,a0
  ADDQ #8,a0
  MOVE.l chipnum,-4(a0)
  MOVEQ #0,d6
'lh20
  CMPA.w #$0,A2
   BEQ.w 'lh30
  MOVE.l destbufferstart,D2
  ADD.l AL_0_E850,D2
  MOVE.l  $4(A2),d1
  BTST #31,d1
  BEQ 'lh11
  BCLR #31,d1
  MOVE.l d1,(a0)
  SUB.l D4,(A0)+
  ADDQ.l #1,d6
'lh11  MOVE.l (a2),a2
  BRA 'lh20
'lh30 TST.l d6
    BEQ 'l10
    MOVE.l d5,a0
    MOVE.l d6,(a0)
    MOVE.l d7,d1
    MOVE.l d5,d2
    MOVE.l d6,d3
    ASL.l #2,d3
    ADDQ.l #8,d3
    BSR.w JL_0_7508
'l10   MOVE.l $4,a6
   MOVE.l hunkoffsetcounter,d0
   ASL.l #2,d0
   ADD.l #12,d0
   MOVE.l d5,a1
   JSR -$d2(a6)
   MOVEA.l _dosbase,A6
   MOVE.l (a7)+,d5
   BRA JL_0_7632
  nomem
  MOVEA.l hunkoffsetbase,A2
  MOVE.l AL_0_E850,D4

  JL_0_7610:
  CMPA.w #$0,A2   ;write hunkoffsets
  BEQ.w JL_0_7632
  LEA $4(A2),A1
  SUB.l D4,(A1)
  MOVE.l D7,D1
  MOVE.l A1,D2
  MOVEQ.l #$04,D3
  BSR.w JL_0_7508
  ADD.l D4,$4(A2)
  MOVEA.l (A2),A2
  BRA.w JL_0_7610

  JL_0_7632:
  CLR.l AL_0_852
  MOVE.l D7,D1
  MOVE.l #AL_0_852,D2
  MOVEQ.l #$04,D3
   BSR.w JL_0_7508
JL_0_7646:
  BTST #$7,link_debuginfo
   BEQ.w JL_0_7706
  MOVE.l #AL_0_7918,D2            ;debughunks
  MOVEQ.l #$04,D3
  MOVE.l D7,D1
   BSR.w JL_0_7508
  MOVEA.l labelbase,A2
JL_0_7664:
  CMPA.w #$0,A2
   BEQ.w JL_0_76F8
  BTST #$0,$7(A2)
   BEQ.w JL_0_7682
  CMPI.l #$1,$4(A2)
   ;bne.w JL_0_76F2
BRA.w JL_0_76F2               ;only addr labels

JL_0_7682:
  MOVEQ.l #$00,D4
  MOVE.b $12(A2),D4
  SUBI.w #$13,D4
  ADDQ.w #2,D4
  ANDI.w #$FFFC,D4
  MOVE.l D4,D5
  LSR.w #2,D5
  MOVE.l D5,AL_0_EC60
  LSL.w #2,D5
  MOVE.l #AL_0_EC60,a1
  ;move.l #AL_0_EC60,D2
  LEA debugstore,a0
  MOVE.l (a1),(a0)+
  MOVEQ.l #$04,D3
  ;move.l D7,D1
  ;bsr.w JL_0_7508
  LEA $13(A2),A1
  MOVE.l d4,d1
  SUBQ.l #1,d1
'l10  MOVE.b (a1)+,d0
  BEQ 'l21
  MOVE.b d0,(a0)+
  DBF d1,'l10
  BRA 'l22
'l21 CLR.b (a0)+
    DBF d1,'l21
'l22  ADD.l d4,d3
  ;move.l A1,D2
  ;move.l D4,D3
  ;move.l D7,D1
   ;bsr.w JL_0_7508
  SUB.l D4,D5
   BEQ.w JL_0_76CE
  MOVE.l #AL_0_EC14,a1
  ;move.l #AL_0_EC14,D2
  MOVE.l (a1),(a0)+
  ;move.l D5,D3
  ADD.l d5,d3
  ;move.l D7,D1
   ;bsr.w JL_0_7508
JL_0_76CE:  MOVE.l $8(A2),D2
  SUB.l destbufferstart,D2
  SUB.l AL_0_E850,D2
  MOVE.l D2,AL_0_EC60
  MOVE.l #AL_0_EC60,a1
  ;move.l #AL_0_EC60,D2
  MOVE.l (a1),(a0)+
  ADD.l #4,d3
  LEA debugstore,a0
  MOVE.l a0,d2
  ;moveq.l #$04,D3
  MOVE.l D7,D1
  BSR.w JL_0_7508
  JL_0_76F2:
  MOVEA.l (A2),A2
BRA.w JL_0_7664

JL_0_76F8:
  MOVE.l #AL_0_EC14,D2
  MOVEQ.l #$04,D3
  MOVE.l D7,D1
  BSR.w JL_0_7508
  JL_0_7706:
  MOVE.l D7,D1
  MOVE.l #AL_0_85A,D2                 ;hunkend
  MOVEQ.l #$04,D3
  CMPI.l #-1,bssstart
  BEQ 'l10
  MOVEQ #16,d3
  MOVE.l #hunkend,d2
  CMPI.l #-1,chipstart
  BEQ 'l10
  MOVE.l d7,d1
  MOVEQ #12,d3
  BSR.w JL_0_7508
 'l10
  CMPI.l #-1,chipstart
  BEQ 'l11
  MOVEQ #12,d3
  MOVE.l #hunkend2,d2
  MOVE.l d7,d1
  BSR.w JL_0_7508
  MOVE.l d7,d1
  MOVE.l chipstart,d2
  MOVE.l chipsize,d3
  BSR.w JL_0_7508
  MOVEQ #4,d3
  MOVE.l #hunkend,d2
  MOVE.l d7,d1
 'l11
  BSR.w JL_0_7508
  MOVE.l D7,D1
  JSR _Close(A6)

  ; --
  ; -- create the optional icon for the executable
  .create_icon
  BTST #$7,create_iconfile
   BEQ.w skip_createicon

  MOVEA.l ptr_newexefilename,A0
  JL_0_772C:
    TST.b (A0)+
  BNE.w JL_0_772C
  SUBQ.w #1,A0
  MOVE.l A0,-(A7)
  LEA str_infoextention2,A1
  JL_0_773A:
    MOVE.b (A1)+,(A0)+
  BNE.w JL_0_773A

  MOVE.l ptr_newexefilename,D1
  MOVEQ.l #-$02,D2
  JSR _Lock(A6)
  MOVE.l D0,D1
  BEQ.w JL_0_775A
  JSR _Lock(A6)
  BRA.w JL_0_7788

  JL_0_775A:
  MOVE.l ptr_newexefilename,D1
  MOVE.l #HUNK_RELOC_8__MODE_NEWFILE,D2
   JSR _Open(A6)
  MOVE.l D0,D7
   BEQ.w JL_0_7788
  MOVE.l #icongfx_data,D2                   ; icon graphics
  MOVE.l #$17F,D3                           ; length of gfx-data
  MOVE.l D7,D1
  JSR _Write(A6)
  MOVE.l D7,D1
  JSR _Close(A6)

  JL_0_7788:
  MOVEA.l (A7)+,A0
  CLR.b (A0)
  skip_createicon:

  ; --
  ; -- restore offsets for extern debug
  TST.b exdebug
   BEQ JL_0_757Cb
  MOVE.w dontwrite,D1
  BNE.w JL_0_757Cb
  MOVE.l chipsize,d5
  MOVE.l bsssize,d3
  MOVE.l chipstart,d7
  MOVE.l bssstart,d6
  MOVEA.l hunkoffsetbase,A2
  MOVEA.l destbufferstart,A1
  MOVE.l A1,D2
  ADD.l AL_0_E850,D2
  CLR.l hunkoffsetnum
  JL_0_755Eb:
  CMPA.w #$0,A2
   BEQ.w JL_0_757Cb
  MOVE.l $4(A2),D0
   LEA $0(a1,d0.l),a0
   MOVE.l (a0),d1
  TST.l d1
   BMI.w 'lm1
  MOVE.b #0,newhunk
  CMP.l #-1,chipstart
  BEQ 'l10
  CMP.l chipstart,d1
  BLT 'l10
  MOVE.b #1,newhunk
  CMP.l chipend,d1
  BGE 'l110
  ADD.l d7,(a0)
  ADD.l #$80000000,4(a2)
  BRA JL_0_7576b
'l110  ADD.l d5,0(a0)
'l10 CMP.l #-1,bssstart
    BEQ 'l11
  CMP.l bssstart,d1
  BLT 'l11
  CMP.l bssend,d1
  BGE 'l111
  TST.b newhunk
  BEQ 'ln1
  ADD.l d5,(a0)
 'ln1
  ADD.l d6,(a0)
  ADD.l #$40000000,4(a2)
  BRA JL_0_7576b
 'l111
  ADD.l d3,0(a0)
 'l11
  ADD.l D2,(A0)                ;only normal code offsets restore
 'lm1
  ADDQ.l #1,hunkoffsetnum
  JL_0_7576b:
  MOVEA.l (A2),A2
BRA.w JL_0_755Eb

  JL_0_757Cb
  BSR.w call_setpointernormal
  MOVEM.l (a7)+,d2-d7/a2-a6
  AL_0_7790:
RTS


JL_0_791C:
  MOVE.l D2,-(A7)
  MOVE.l destpointer,D2
  SUB.l destbufferstart,D2
  BSR.w addhunkoffset
  MOVE.l (A7)+,D2
RTS

.addhunkoffset:
  MOVEM.l D0-D1/A0-A1/A6,-(A7)
  TST.b nohunkoffset
  BNE 'l10
  MOVEQ.l #$8,D0
  MOVEQ.l #$01,D1
  MOVEA.l _execbase,A6
  MOVE.l mempool2,a0
  JSR _AllocPooled(a6)
   ;jsr AJL_0_4B6C
  ADDQ.l #1,hunkoffsetcounter
  MOVEA.l D0,A0
  MOVE.l hunkoffsetbase,(A0)
  MOVE.l A0,hunkoffsetbase
  MOVE.l D2,$4(A0)
 'l10
  MOVEM.l (A7)+,D0-D1/A0-A1/A6
RTS


AJL_0_7962:
  CLR.l hunkoffsetbase
  MOVEA.l _execbase,A6
  MOVEA.l hunkoffsetbase,A2
  JL_0_7972:
    CMPA.w #$0,A2
     BEQ.w JL_0_7988
    MOVEA.l A2,A1
    MOVEQ.l #$08,D0
    MOVEA.l (A2),A2
    MOVE.l mempool2,a0
    JSR _FreePooled(A6)
  BRA.w JL_0_7972

  JL_0_7988:
  CLR.l hunkoffsetcounter
RTS

L_0_7990:  Ds.l 6
AL_0_79A8:  Ds.l 1
AL_0_79AC:  Ds.w 1
L_0_79AE:  Ds.l 32
JL_0_7A2E:
  MOVE.l A5,lastsourcepos
  MOVE.w instringon,AL_0_E9A0
   ;bsr.w getcharb          ;gettokennum
  JL_0_7BA0a:
  MOVEQ.l #$00,D0
  MOVE.b (A5)+,D0
   BEQ JL_0_7BCCa
  BPL JL_0_7BAEa
  LSL.l #8,D0
  MOVE.b (A5)+,D0
  MOVE.l a1,-(a7)
  LEA replacedat,a1
  Dc.w $4a71,$0a00;TST.w 0(a1,d0.l*2)
  BEQ 'l10
  Dc.w $3031,$0a00;MOVE.w 0(a1,d0.l*2),d0
 'l10
  MOVE.l d0,lasttoken
  MOVE.l (a7)+,a1
  BRA weiter

  JL_0_7BAEa:
  CMP.w #$22,D0
   BEQ.b JL_0_7BCEa
  CMP.w #$3B,D0
   BNE.b JL_0_7BCCa
  TST.w instringon
   BNE.b JL_0_7BCCa
JL_0_7BC2a:  MOVE.b (A5)+,D0
             BEQ 'l1
             CMP.b #":",d0
             BNE JL_0_7BC2a            ;:@
             CMP.b #"@",(a5)
             BNE JL_0_7BC2a
             ADDQ #1,a5
'l1  MOVE.w D0,lastchar
JL_0_7BCCa: BRA.s weiter

JL_0_7BCEa:  NOT.w instringon
weiter:  MOVE.w D0,lastchar
   BEQ.w JL_0_7B0C
   BPL.w JL_0_7A70
  CMP.w #-$7FE4,D0                    ;cnif
   BEQ.w JL_0_7B2E
  CMP.w #-$7FE3,D0                    ;csif
   BEQ.w JL_0_7B0E
  CMP.w #-$7FE2,D0                    ;celse
   BEQ.w JL_0_7B58
  CMP.w #-$7FE1,D0                    ;cend
   BEQ.w JL_0_7B6C
JL_0_7A70:  TST.w skipcode
   BEQ.w JL_0_7A2E
  CMP.w #$7E,D0
   BEQ.w JL_0_7AA4                       ;tilde
  CMP.w #$2,D0
   BNE.w JL_0_7A94
  MOVEA.l AL_0_97A4,A5
  CLR.l AL_0_97A4
 BRA.w JL_0_7A2E

JL_0_7A94:  CMP.w #$1,D0
   BNE.w JL_0_7B0C
  MOVEA.l AL_0_79A8(PC),A5
 BRA.w JL_0_7A2E

JL_0_7AA4:
TST.w AL_0_79AC
   BNE.w JL_0_7B0C

  MOVEM.l D0-D7/A0-A6,-(A7)
  LEA AL_0_79AC,a0           ;reass
  NOT.w (a0)
  LEA L_0_79AE(PC),A0
  LEA ptr_parameterstore,A1
  MOVEQ.l #$1F,D0
JL_0_7AC4:  MOVE.l (A1)+,(A0)+
   DBF D0,JL_0_7AC4
   BSR.w AJL_0_BF6E
  CMP.w #$7E,D0
   BNE.w syntaxerr
  MOVE.l A5,AL_0_79A8                   ;tilde
  LEA L_0_7990(PC),A0
  MOVE.l D3,D2
  BSR.w AJL_0_53DC
  ADDQ.b #1,(A0)
  LEA AL_0_79AC,a0
  NOT.w (a0)            ;reass
  LEA L_0_79AE(PC),A0
  LEA ptr_parameterstore,A1
  MOVEQ.l #$1F,D0
JL_0_7AFA:  MOVE.l (A0)+,(A1)+
   DBF D0,JL_0_7AFA
  MOVEM.l (A7)+,D0-D7/A0-A6
  LEA L_0_7990(PC),A5
 BRA.w JL_0_7A2E

JL_0_7B0C: RTS

JL_0_7B0E:  MOVE.l AL_0_E9E8,AL_0_7B9E   ;csif
  TST.w skipcode
   BEQ.w JL_0_7B4E
   BSR.w get1bytemain
   MOVE.l a1,-(a7)
   JSR JL_0_C492
   MOVE.l (a7)+,a1
 BRA.w JL_0_7A2E

JL_0_7B2E:  MOVE.l AL_0_E9E8,AL_0_7B9E    ;cnif
  TST.w skipcode
   BEQ.w JL_0_7B4E
   BSR.w get1bytemain
   CMP.b #"@",d0
   BNE 'ok2
   BSR.w get1bytemain
   MOVE.b #1,incnif
   JSR findconstant2
   BEQ 'ok2

'ok2   MOVE.w fast,-(a7)
   CLR.b fast
   MOVE.l a1,-(a7)
   JSR JL_0_C47E
   CLR.b incnif
   MOVE.l (a7)+,a1
   MOVE.w (a7)+,fast
 BRA.w JL_0_7A2E

JL_0_7B4E:  ADDQ.w #1,AL_0_E948
 BRA.w JL_0_7A2E

JL_0_7B58:  MOVE.w AL_0_E948,D0           ;celse
   BNE.w JL_0_7A2E
  NOT.w skipcode
 BRA.w JL_0_7A2E

JL_0_7B6C:  SUBQ.w #1,AL_0_E948           ;cend
   BPL.w JL_0_7A2E
  ADDQ.w #1,AL_0_E948
  MOVEA.l AL_0_E99C,A0
  CMPA.l #AL_0_E95C,A0
   BEQ.w JL_0_8A8E
  SUBQ.w #2,A0
  MOVE.l A0,AL_0_E99C
  MOVE.w (A0),skipcode
 BRA.w JL_0_7A2E

AL_0_7B9E:   Ds.l 1
getcharb:  MOVEQ.l #$00,D0
  MOVE.b (A5)+,D0
   BEQ.b JL_0_7BCC
   BPL.b JL_0_7BAE
  LSL.w #8,D0
  MOVE.b (A5)+,D0
 RTS

JL_0_7BAE:  CMP.w #$22,D0
   BEQ.b JL_0_7BCE
  CMP.w #$3B,D0
   BNE.b JL_0_7BCC
  TST.w instringon
   BNE.b JL_0_7BCC
JL_0_7BC2:  MOVE.b (A5)+,D0
            BEQ 'l1
            CMP.b #":",d0
            BNE JL_0_7BC2
            CMP.b #"@",(a5)
            BNE JL_0_7BC2
 'l1:
  MOVE.w D0,lastchar
  JL_0_7BCC:
RTS

JL_0_7BCE:
  NOT.w instringon
RTS

get1byte_:
  BSR.w JL_0_7A2E
  TST.w instringon
   BNE.w JL_0_7BEC
  CMP.w #$20,D0
   BEQ.w get1byte_

  JL_0_7BEC:
RTS

L_0_7BEE:  Ds.w 13
Dc.b $f6,$e4,$fc,$d6,$c4,$dc

.get1bytemain:   ;bsr.w get1byte_
  BSR.w JL_0_7A2E
  TST.w instringon
   BNE.w JL_0_7C14
  CMP.w #$20,D0
   BEQ.w get1bytemain

  TST.w D0
  JL_0_7C14:
  BEQ.b JL_0_7C38
  TST.w instringon
   BEQ.b JL_0_7C2A
  CMP.b #$20,D0
   BCC.b JL_0_7C36
  MOVE.b L_0_7BEE(PC,D0.W),D0
  RTS

  JL_0_7C2A:
  CMP.w #-$7FDE,D0
   BEQ.b JL_0_7C38
  CMP.w #$3A,D0
   BEQ.b JL_0_7C38

  JL_0_7C36:
  TST.w D0
  JL_0_7C38:
  RTS

JL_0_7C3A:
  MOVE.w lastchar,D0
BRA.w JL_0_7C14

JL_0_7C44:
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
RTS

JL_0_7C56:
  MOVE.w D0,AL_0_E9C0
  MOVE.l A5,AL_0_E9BC
RTS

JL_0_7C64:
  MOVEA.l AL_0_E9BC,A5
  MOVE.w AL_0_E9C0,D0
  MOVE.w D0,lastchar
RTS


.error_messages:
XINCLUDE "internal_errormsg.bb2"


AL_0_8AFE:   Ds.w 1
.handle_compileerror:
  MOVE.l AL_0_E954,d0
  BNE 'l2
    SUBA.l a5,a5
 'l2

  TST.l AL_0_97A4
  BEQ 'l1
    MOVEA.l AL_0_97A4,a5
 'l1

  TST.w dirmode
  BNE.b JL_0_8B82
    JSR call_setpointernormal
    MOVE.w AL_0_8AFE(PC),D0
    BNE.w JL_0_8B5E
      MOVE.w AL_0_E32E,D0
      BEQ.w JL_0_8B28
        MOVE.l AL_0_C034,destbufferend
  JL_0_8B28:

  MOVE.w AL_0_E91E,D0
  BEQ.b JL_0_8B34
    BSR.w JL_0_81D6
  JL_0_8B34:

  MOVE.l firstlocal,D1
  OR.l firstglob,D1
  BEQ.b JL_0_8B46
    JSR JL_0_DB5C
  JL_0_8B46:

  MOVE.w #$FFFF,AL_0_E84C
  CMP.l #"NORE",reqmode    ;for used functions
  BEQ 'l1
    MOVE.l AL_0_E9E8,compilelinecounter
 'l1
  JSR close_compilewin

  JL_0_8B5E:
  MOVEA.l (A7)+,A0
  CMP.l #"NORE",reqmode    ;for used functions
  BEQ Lxx2
  JSR save_errorfile

  MOVEA.l comdata,A1
  MOVEA.l $C(A1),A1       ; show errorrequester

  MOVEM.l d6/D7/A6,-(A7)
  MOVE.l includeline,d7
  MOVE.l #"INLN",a6
  MOVE.l AL_0_2B18,tempa7
  JSR (A1)
  !basic
  If Peek.l(Addr Window(3))<>0 Then WZCloseWindow 3
  !asm
  MOVEM.l (A7)+,D7/d6/A6

 ;MOVEA.l AL_0_2B18,A7
  MOVE.l tempa7,a7
  MOVEA.l AL_0_2B1C,A0
 ;JMP (A0)             ;clear all vars
RTS

Lxx2
  MOVEA.l AL_0_2B18,A7
  MOVEA.l AL_0_2B1C,A0
 ;JMP (A0)             ;clear all vars
RTS

JL_0_8B82:
  MOVE.l (A7),D0
  MOVEA.l AL_0_2B18,A7
  MOVEA.l AL_0_2B1C,A0
JMP (A0)

JL_0_8B92:
  CMP.w #$7A,D0
   BHI.w JL_0_8BB4
  CMP.w #$41,D0
   BCS.w JL_0_8BB4
  CMP.w #$61,D0
   BCC.w JL_0_8BB2
  CMP.w #$5A,D0
   BHI.w JL_0_8BB4

  JL_0_8BB2:
  CMP.w D0,D0
  JL_0_8BB4:
RTS

JL_0_8BB6:
  CMP.w #$30,D0
   BCS.w JL_0_8BC8
  CMP.w #$39,D0
   BHI.w JL_0_8BC8
  CMP.w D0,D0
  JL_0_8BC8:
RTS

JL_0_8BCA:
  !compare1;bsr.w JL_0_8B92
   BEQ.w JL_0_8BE6
  !compare2;bsr.w JL_0_8BB6
   BEQ.w JL_0_8BE6
  CMP.w #$5F,D0
   BEQ.w JL_0_8BE6
  CMP.w #$27,D0

  JL_0_8BE6:
RTS


makename2:   ;bsr.w JL_0_7C44
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
  getparameter2:
  LEA ptr_parameterstore,A1
  JL_0_8BF2:
  MOVEQ.l #$00,D2
  JL_0_8BF4:
  LEA chartab,a0
  MOVEQ #0,d0
  MOVE.l A5,lastsourcepos
  MOVE.w instringon,AL_0_E9A0
 'retry
    MOVE.b (a5)+,d0
  CMP.b #$20,d0                  ;space deftype
  BEQ 'retry

  MOVE.w d0,lastchar
  TST.b 0(a0,d0.w)
  BNE JL_0_8C24

  ;move.l a0,-(a7)
  ;cmp.w #$5F,D0
   ;beq.w JL_0_8C08
   ;compare1;bsr.w JL_0_8B92
   ;bne.w JL_0_8C24
JL_0_8C08:
  MOVE.b D0,(A1)+
  ADDQ.l #1,D2
  MOVE.l A5,lastsourcepos
'ln1  MOVE.b (a5)+,d0
  MOVE.b d0,lastchar+1
  CMP.b #$20,d0
  BEQ 'l20

 TST.b 0(a0,d0)
 BEQ JL_0_8C08
 CMP.b #2,d0
 BNE 'lf1
 MOVEA.l AL_0_97A4,A5
 CLR.l AL_0_97A4
 BRA 'ln1

'lf1 CMP.b #1,d0
 BNE 'l20
  MOVEA.l AL_0_79A8(PC),A5
  BRA 'ln1
'l20 CMP.b #$7e,d0
            BNE 'lt
            TST.w AL_0_79AC
            BNE.w 'a1
            SUBQ.l #1,a5
            BSR.w get1bytemain
            BRA JL_0_8C08
'a1
'lt BRA gpex
old  BSR.w JL_0_7A2E
   !compare1;bsr.w JL_0_8B92
   BEQ.w getp1
   !compare2;bsr.w JL_0_8BB6
   BEQ.w getp1
  CMP.w #$5F,D0
   BEQ.w getp1
  CMP.w #$27,D0
;JL_0_8BE6:
getp1           BNE gpex
      CMP.b #$20,d0
      BNE.w JL_0_8C08

gpex
     TST.b d0
     BPL 'l10
     SUBQ.l #1,a5
     BSR get1byte_
'l10
   CMP.w #$20,D0
   BNE.w JL_0_8C24
   MOVEQ #0,d0
  MOVE.l a5,lastsourcepos
'l103 MOVE.b (a5)+,d0              ;neuneu
  BPL 'l101
  ASL.w #8,d0
  MOVE.b (a5)+,d0
'l101
  TST.w instringon
  BNE 'l102
  CMP.b #$20,d0
  BEQ 'l103
  CMP.b #";",d0
  BNE 'l102
'lr  MOVE.b (A5)+,D0
             BEQ 'l1
             CMP.b #":",d0
             BNE 'lr            ;:@
             CMP.b #"@",(a5)
             BNE 'lr
             ADDQ #1,a5
'l1
'l102
  MOVE.w d0,lastchar
   ;BSR.w get1bytemain
  JL_0_8C24:
  CMP.b #";",d0
  BEQ 'l11
  CLR.b (A1)
  ;move.l (a7)+,a0
  TST.w D2
  RTS
 'l11
  CLR.b (a1)
  MOVEQ #0,d0
  MOVE.w d0,lastchar
  ;move.l (a7)+,a0
  TST.w D2
  RTS
  JL_0_8C2A:
  MOVE.l (A2),D0
  JL_0_8C2C:
  BEQ.w JL_0_8C36
  MOVEA.l D0,A2
BRA.w JL_0_8C2C

JL_0_8C36:
BRA.w JL_0_7C3A

JL_0_8C3A:
  MOVE.l (A2),-(A7)
  BSR.w addlabel
  MOVE.l (A7)+,(A2)
RTS

addlabelhash:
  CLR.l fp0addr
  TST.w dirmode
   BNE.w JL_0_8192
  MOVEQ.l #$00,D0
  MOVE.w D7,D0
  ADD.w D2,D0
  ADDQ.w #1,D0
  MOVE.w D0,D2
  ADDQ.l #2,d0
  MOVEQ.l #$01,D1
  MOVEA.l _execbase,A6
  MOVE.l mempool2,a0
  JSR _AllocPooled(a6)
   ;jsr AJL_0_4B6C
  MOVE.l lastlabel,a2
  MOVE.l D0,(A2)
  MOVE.l d0,a0
  CLR.l (a0)
  MOVE.l a0,lastlabel
  MOVE.l d0,A2
  LEA -$1(A0,D7.W),A0
  MOVE.b D2,(A0)+
  LEA ptr_parameterstore,A1
  MOVEQ #0,d0
  MOVEQ #0,d1
JL_0_8C78a:  MOVE.b (A1)+,d1
   BEQ 'l1
   !hashalgo
   MOVE.b d1,(A0)+
   BRA JL_0_8C78a
'l1 CLR.b (a0)+
   LEA labelhash,a0
   AND.l #hashsize,d0
   ASL.l #2,d0
   MOVE.l 0(a0,d0),d1
   MOVE.l d1,$c(a2)
   MOVE.l a2,0(a0,d0)
   MOVEQ #0,d0
 BRA.w JL_0_7C3A
addvariable:
   TST.b newvariable
   BNE addlabel
'l1 TST.w dirmode
   BNE.w JL_0_8192
  MOVEQ.l #$00,D0
  MOVE.w D7,D0
  ADD.w D2,D0
  ADDQ.w #1,D0
  MOVE.w D0,D2
  MOVEQ.l #$01,D1
  MOVEA.l _execbase,A6
  MOVE.l mempool2,a0
  JSR _AllocPooled(a6)
  MOVEA.l D0,A0
   ;jsr AJL_0_4B6C
  LEA varbase,a2
  MOVE.l (a2),(a0)
  MOVE.l A0,(A2)
  MOVEA.l A0,A2
  LEA -$1(A0,D7.W),A0
  MOVE.b D2,(A0)+
  LEA ptr_parameterstore,A1
  MOVEQ #0,d0
  MOVEQ #0,d1
'l11  MOVE.b (A1)+,d1
   BEQ 'l12
   !hashalgo
   MOVE.b d1,(A0)+
   BRA 'l11
'l12 CLR.b (a0)+
LEA variablehash,a0
   AND.l #hashsize,d0
   ASL.l #2,d0
   MOVE.l 0(a0,d0),d1
   MOVE.l d1,$e(a2)
   MOVE.l a2,0(a0,d0)
   MOVEQ #0,d0
BRA.w JL_0_7C3A

.addlabel
  TST.w dirmode
   BNE.w JL_0_8192
  MOVEQ.l #$00,D0
  MOVE.w D7,D0
  ADD.w D2,D0
  ADDQ.w #1,D0
  MOVE.w D0,D2
  MOVEQ.l #$01,D1
  MOVEA.l _execbase,A6
  MOVE.l mempool2,a0
  JSR _AllocPooled(a6)
   ;jsr AJL_0_4B6C
  MOVEA.l D0,A0
  MOVE.l A0,(A2)
  CLR.l (a0)
  CLR.l 8(a0)
  MOVEA.l A0,A2
  LEA -$1(A0,D7.W),A0
  MOVE.b D2,(A0)+
  LEA ptr_parameterstore,A1
  MOVEQ #0,d0
  MOVEQ #0,d1
  JL_0_8C78:
  MOVE.b (A1)+,d1
 'l1
  MOVE.b d1,(A0)+
  BNE.w JL_0_8C78
BRA.w JL_0_7C3A

.findconstant:
  MOVEQ.l #$13,D7
  LEA constantbase,A2
BRA.w JL_0_8CDE

JL_0_8C8E:
  MOVEQ.l #$05+8,D7
  LEA xinclude_base,A2
BRA.w JL_0_8CDE

JL_0_8C9A:
  MOVEQ.l #$09,D7
  LEA AL_0_E94A,A2
BRA.w JL_0_8CDE

findmac:
  MOVEQ.l #$0d,D7   ;find macro
  LEA macrobase,A2
BRA.w JL_0_8CDE

findlabel2:
  LEA labelhash,A2
  MOVEQ.l #$13,D7
  EXT.l d2
  LEA ptr_parameterstore,A0
  MOVEQ #0,d0
  MOVEQ #0,d1
 'l20
    MOVE.b (a0)+,d1
    BEQ 'l15
    !hashalgo
  BRA 'l20
 'l15
  AND.l #hashsize,d0
  ASL.l #2,d0
  MOVE.l 0(a2,d0),d0
  BRA 'l11
 'l10
  MOVE.l $c(A2),D0      ;find label
 'l11
  BEQ JL_0_8D0E
  MOVEA.l D0,A2
  MOVEQ.l #$00,D0
  MOVE.b -$1(A2,D7.l),D0
  LEA ptr_parameterstore,A0
  SUB.l D7,D0
  SUBQ.l #1,D0
  CMP.l D0,D2
   BNE.b 'l10
  LEA $0(A2,D7.W),A1
  SUBQ.l #1,D0
 'l201:
  MOVE.b (a1)+,d1
  CMP.b (a0)+,d1
  ;CMPM.b (A1)+,(A0)+
  BNE.b 'l10
  DBF D0,'l201
  BSR.w JL_0_7C3A
  CMP.w D0,D0
   RTS

  JL_0_8CBE:
  MOVEQ.l #$0B,D7
BRA.w JL_0_8CDE

findproc:
  LEA firstproc,A2
  MOVEQ.l #$21+16,D7
BRA JL_0_8CDE


JL_0_8CD0:
  LEA AL_0_E9A8,A2
  MOVEQ.l #$11,D7
BRA.w JL_0_8CDE

findvariable2
  MOVEQ.l #$0F,D7
BRA.w JL_0_8CDE

findvariable:
  MOVEQ.l #$0F+4,D7
  TST.b newvariable
   BNE.w JL_0_8CDE
  LEA variablehash,A2
  LEA ptr_parameterstore,A0
  MOVEQ #0,d0
  MOVEQ #0,d1
 'l20
    MOVE.b (a0)+,d1
    BEQ 'l15
    !hashalgo
  BRA 'l20
 'l15
  AND.l #hashsize,d0
  ASL.l #2,d0
  MOVE.l 0(a2,d0),d0
  BRA 'l11
 'l10
  MOVE.l $e(A2),D0      ;find label
 'l11
  BEQ JL_0_8D0E
  MOVEA.l D0,A2
  MOVEQ.l #$00,D0
  MOVE.b -$1(A2,D7.W),D0
  LEA ptr_parameterstore,A0
  SUB.w D7,D0
  SUBQ.l #1,D0
  CMP.w D0,D2
   BNE.b 'l10
  LEA $0(A2,D7.W),A1
  SUBQ.l #1,D0
 'l201:
  MOVE.b (a1)+,d1
  CMP.b (a0)+,d1
  ;CMPM.b (A1)+,(A0)+
  BNE.b 'l10
  DBF D0,'l201
  BSR.w JL_0_7C3A
  CMP.w D0,D0
   RTS

  JL_0_8CDE:
    labelold
    MOVE.l (A2),D0      ;find label
     BEQ.b JL_0_8D0E
    MOVEA.l D0,A2
    MOVEQ.l #$00,D0
    MOVE.b -$1(A2,D7.W),D0
    SUB.l D7,D0
    SUBQ.l #1,D0
  CMP.w D0,D2
  BNE.b JL_0_8CDE

  LEA $0(A2,D7.W),A1
  LEA ptr_parameterstore,A0
  SUBQ.l #1,D0
  JL_0_8CFE:
    MOVE.b (a1)+,d1
    CMP.b (a0)+,d1
    ;CMPM.b (A1)+,(A0)+
    BNE.b JL_0_8CDE
  DBF D0,JL_0_8CFE

  BSR.w JL_0_7C3A
  CMP.w D0,D0
   RTS

  JL_0_8D0E:
  BSR.w JL_0_7C3A
  MOVEQ.l #-$01,D1
RTS


AJL_0_8D16:
  MOVEA.l AL_0_2B2C,A4
  CLR.l AL_0_2B2C
  ;BRA JL_0_8D48
  JL_0_8D22:
    CMPA.w #$0,A4
     BEQ.b JL_0_8D48
    MOVEA.l $4(A4),A3
    ;BSR.w JL_0_8D4Ab
    MOVEA.l $8(A4),A3
    ;BSR.w JL_0_8D4A
    MOVEA.l A4,A1
    MOVEA.l (A4),A4
    MOVEQ.l #$0C,D0
    MOVEA.l _execbase,A6
    MOVE.l mempool,a0
    JSR _FreePooled(A6)
  BRA.b JL_0_8D22

  JL_0_8D48:
  CLR.l firstglob    ;fix 2*aclearallvar called
  CLR.l firstlocal
  CLR.l sharebase
  TST.l mempool2
  BEQ 'l10
  MOVE.l $4,a6
  MOVE.l mempool2,a0
  CLR.l mempool2
  JSR _DeletePool(a6)
 'l10
  MOVE.l _execbase,a6
  MOVE.l #$10000,d0
  MOVE.l #80000,d1
  MOVE.l d1,d2
  JSR _CreatePool(a6)
  MOVE.l d0,mempool2
RTS

JL_0_8D4A:
  CMPA.w #$0,A3
   BEQ.w JL_0_8D68
  MOVEA.l A3,A1
  MOVEA.l (A3),A3
  MOVEQ.l #$00,D0
  MOVE.b $E(A1),D0
  MOVEA.l _execbase,A6
  MOVE.l mempool2,a0
  JSR _FreePooled(A6)
BRA.w JL_0_8D4A

JL_0_8D4Ab:
    CMPA.w #$0,A3
     BEQ.w JL_0_8D68
    MOVEA.l A3,A1
    MOVEA.l (A3),A3
    MOVEQ.l #$00,D0
    MOVE.b $E+4(A1),D0
    MOVEA.l _execbase,A6
    MOVE.l mempool2,a0
    JSR _FreePooled(A6)
  BRA.w JL_0_8D4Ab

  JL_0_8D68:
RTS


clearlabels:
  MOVEA.l currentlabeladdr,A0
  MOVE.l a0,lastlabel
  MOVEA.l (A0),A2
  CLR.l (A0)
  MOVEA.l _execbase,A6

  JL_0_8D78:
  CMPA.w #$0,A2
   BEQ.w JL_0_8DB6
  MOVE.l $4(A2),D0
  BTST #$0,D0
   BNE.w JL_0_8DA4
  MOVEA.l D0,A3

  JL_0_8D8E:
    CMPA.w #$0,A3
     BEQ.w JL_0_8DA4
    MOVEA.l A3,A1
    MOVEA.l (A3),A3
    MOVEQ.l #$0C+2,D0                  ;cancel fix
    MOVE.l mempool,a0
    JSR _FreePooled(A6)
  BRA.w JL_0_8D8E

  JL_0_8DA4:
  MOVEQ.l #$00,D0
  MOVE.b $12(A2),D0
  MOVEA.l A2,A1
  MOVEA.l (A2),A2
  MOVE.l mempool2,a0
   ;JSR _FreePooled(A6)             ;nofreemem
  BRA.w JL_0_8D78

  JL_0_8DB6:
RTS

AJL_0_8DB8:
  MOVEA.l AL_0_E8DE,A3
  CLR.l AL_0_E8DE
  MOVEA.l _execbase,A6
  JL_0_8DC8:
    CMPA.w #$0,A3
     BEQ.w JL_0_8DDE
    MOVEA.l A3,A1
    MOVEQ.l #$08,D0
    MOVEA.l (A3),A3
    MOVE.l mempool,a0
    JSR _FreePooled(A6)
  BRA.w JL_0_8DC8

  JL_0_8DDE:
RTS


clearfunctionlist:
  MOVEA.l firstproc,A2
  CLR.l firstproc
  MOVEA.l _execbase,A6

  JL_0_8DF0:
    CMPA.w #$0,A2
     BEQ.w JL_0_8E0A
    MOVEA.l A2,A1
    MOVEA.l (A2),A2
    MOVEQ.l #$00,D0
    MOVE.b $20+16(A1),D0
    MOVE.l mempool2,a0
    JSR _FreePooled(A6)
  BRA.w JL_0_8DF0

  JL_0_8E0A:
RTS

JL_0_8E0C:
  CMPA.w #$0,A2
   BEQ.w JL_0_8E3A
  MOVEA.l $4(A2),A3
  CMPA.w #$FF,A3
   BEQ.w JL_0_8E24
   BSR.w JL_0_8D4A

  JL_0_8E24:
    MOVEA.l A2,A1
    MOVEA.l (A2),A2
    MOVEQ.l #$00,D0
    MOVE.b $A(A1),D0
    MOVEA.l _execbase,A6
    MOVE.l mempool2,a0
    JSR _FreePooled(A6)
  BRA.w JL_0_8E0C

  JL_0_8E3A:
RTS

JL_0_8E3C:
  JSR uselib2

  CLR.w notshared
  CLR.w varmode
  MOVE.w proceduremode,D1
   BNE.w JL_0_8F4E
  LEA varbase,A2
  LEA ptr_parameterstore,a0
  CMP.b #$22,(a0)
  BNE JL_0_8E5E
  MOVEQ #0,d0
JMP error

JL_0_8E5E:
  BSR.w findvariable
  JL_0_8E62:
  BNE.w JL_0_8E7E
  JL_0_8E62b
  MOVE.b AL_0_EC5B,D1
  MOVE.b $7(A2),D3
  EOR.b D3,D1
  BNE 'l2
  CMP.b #2,nowdeclare
  BEQ errormsg_declaredtwice
  BRA.w JL_0_8FA8
 'l2
  BSR.w JL_0_8CDE
  BNE 'l1
  CMP.b #2,nowdeclare
  BEQ errormsg_declaredtwice
  CMP.w d0,d0
 'l1
 BRA.w JL_0_8E62

JL_0_8E7E:
   MOVE.l a2,-(a7)
   LEA sharebase,a2
   MOVEQ #$f+4,d7
   BSR.w JL_0_8CDE
   BEQ 'l2x
   MOVE.l (a7)+,a2
   BRA 'cont
'l2x
  ADDQ.l #4,a7
  CLR.w varmode
  MOVE.b AL_0_EC5B,D1
  MOVE.b $7(A2),D3
  EOR.b D3,D1
  BNE vardeclareerr

  BRA JL_0_8FA8

'cont   MOVE.w AL_0_EC5E,D1
   BNE.w JL_0_8568
   TST.b nowdeclare
   BNE 'l2
   TST.b declare2
   BEQ 'l1
   CMP.b #$2e,d0
   BEQ 'l2
   CMP.b #"$",d0
   BEQ 'l2
   BRA vardeclareerr
'l1 TST.b declare
   BNE vardeclareerr
'l2
BSR.w addvariable
  NOT.w notshared
  MOVEA.l A2,A3
  MOVEA.l AL_0_E848,A2
  CMP.w #$2E,D0
   BEQ.w JL_0_8EB8
  CMP.w #$24,D0
   BNE.w JL_0_8ECA
  LEA newtype_string,A2
   BSR.w get1bytemain
 BRA.w JL_0_8ECA

JL_0_8EB8b:   BSR.w getparameter2
  LEA newtypebase,A2
   BSR.w JL_0_8CBE
   BNE.w JL_0_8440b
JL_0_8ECAb:  CMPA.l #newtype_byte,A2
   BEQ.w JL_0_8EECb
  MOVE.w varmode,D1
   BNE.w JL_0_8EE4b
  ADDQ.w #1,globalvarpointer
JL_0_8EE4b:  BCLR #$0,AL_0_2B39
JL_0_8EECb:  MOVE.l A2,$A(A3)
  MOVE.w AL_0_EC5A,$6(A3)         ;??????????
  ;MOVE.w #0,$6(A3)         ;??????????
  MOVEQ.l #$04,D1
  BTST #$0,AL_0_EC5B
   BNE.w JL_0_8F22b
  BTST #$1,AL_0_EC5B
   BNE.w JL_0_8F22b
  CMPI.l #$100,$4(A2)
   BCC.w JL_0_8F22b
  MOVE.w $8(A2),D1
JL_0_8F22b:  TST.w varmode
   BRA.w JL_0_8F3E
;  NEG.w D1
;  ADD.w D1,globalvarpointer
;  MOVE.w globalvarpointer,$4(A3)
; RTS

JL_0_8EB8:   BSR.w getparameter2
  LEA newtypebase,A2
   BSR.w JL_0_8CBE
   BNE.w JL_0_8440
JL_0_8ECA:  CMPA.l #newtype_byte,A2
   BEQ.w JL_0_8EEC
  MOVE.w varmode,D1
   BNE.w JL_0_8EE4
  ADDQ.w #1,globalvarpointer
JL_0_8EE4:  BCLR #$0,AL_0_2B39
JL_0_8EEC:  MOVE.l A2,$A(A3)
  MOVE.w AL_0_EC5A,$6(A3)         ;??????????
  MOVEQ.l #$04,D1
  BTST #$0,AL_0_EC5B
   BNE.w JL_0_8F22
  BTST #$1,AL_0_EC5B
   BNE.w JL_0_8F22
  CMPI.l #$100,$4(A2)
   BCC.w JL_0_8F22
  MOVE.w $8(A2),D1
JL_0_8F22:  TST.w varmode
   BEQ.w JL_0_8F3E
  NEG.w D1
  ADD.w D1,globalvarpointer
  MOVE.w globalvarpointer,$4(A3)
 RTS

JL_0_8F3E:  MOVE.w globalvarpointer,$4(A3)
  ADD.w D1,globalvarpointer
 RTS

JL_0_8F4E:  LEA firstglob,A2
   BSR.w findvariable2
JL_0_8F58:   BNE.w JL_0_8F74
  MOVE.b AL_0_EC5B,D1
  MOVE.b $7(A2),D3
  EOR.b D3,D1
   BEQ.w JL_0_8FA8
   BSR.w JL_0_8CDE
 BRA.w JL_0_8F58

JL_0_8F74:  MOVE.w #$FFFF,varmode
  MOVE.w globalvarpointer,-(A7)
  MOVE.w AL_0_2B3A,globalvarpointer
  LEA firstlocal,A2
  MOVE.b #1,newvariable
   BSR.w JL_0_8E5E
  CLR.b newvariable
  MOVE.w globalvarpointer,AL_0_2B3A
  MOVE.w (A7)+,globalvarpointer
 RTS

JL_0_8FA8:  MOVEA.l A2,A3
  CMP.w #$2E,D0
   BEQ.w JL_0_8FCE
  CMP.w #$24,D0
   BNE.w JL_0_8FE8
  CMPI.l #newtype_string,$A(A3)
   BNE.w JL_0_84A4
   BSR.w get1bytemain
 BRA.w JL_0_8FE8

JL_0_8FCE:   BSR.w getparameter2
  LEA newtypebase,A2
   BSR.w JL_0_8CBE
   BNE.w JL_0_8440
  CMPA.l $A(A3),A2
   BNE.w JL_0_84A4
JL_0_8FE8:  BTST #$0,AL_0_EC5B
   BEQ.w JL_0_8FFE
  BTST #$0,$7(A3)
   BEQ.w JL_0_84E8
JL_0_8FFE:  MOVEA.l $A(A3),A2
 RTS

JL_0_9004:  TST.l D3  ;newtype >32kb  .w to .l
   BEQ.w JL_0_9042
   MOVE.l destpointer,loada
   ;TST.b fast
   ;BNE JL_0_9032
   BRA JL_0_9032
  CMP.w #$9,D3                   ;_addq_arrays
   BCC.w JL_0_9032
  MOVE.w d3,arrayoffset
  ANDI.w #$7,D3
  LSL.w #8,D3
  LSL.w #1,D3
  ANDI.w #$F1FF,AL_0_2AEA
  OR.w D3,AL_0_2AEA
  MOVE.w AL_0_2AEA,D1
 BRA.w writeword

JL_0_9032:
  CMP.l #$7fff,d3          ;>32kb newtypes
  BGT longoffset
  MOVE.w D3,AL_0_2AEE
  MOVE.w d3,arrayoffset
  MOVE.l AL_0_2AEC,D1
  BSR.w writelong
JL_0_9042: RTS

longoffset
   MOVE.w #$d5fc,d1
   BSR writeword
   MOVE.l d3,d1
   BSR.w writelong
 RTS

JL_0_9044:  Dc.w $b0ad,0000 ;cmp.l $0(A5),D0    ;nooptimize
L_0_9048:   BCS.w JL_0_9052
   JSR $20000
JL_0_9052:
TST.b fast
BEQ 'l1
   MOVEQ #0,d1                   ;faster arrays
   MOVE.w regnum,d2
   MOVE.w d2,d1
   LSL.w #8,d1
   LSL.w #4,d1
   ADD.w d2,d1
   OR.l #$4c2d0000,d1
   TST.w varmode
   BEQ 'l1a
   BCLR #16,d1
'l1a   BSR writelong
   MOVE.w $4(A7),D1
   BSR.w writeword
   MOVE.w regnum,D1
  SUBQ.w #1,D1
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$D080,D1
  OR.w regnum,D1
   BSR.w writeword
   RTS

'l1 MOVE.w regnum,D2
  MOVE.w L_0_9104(PC),D1
  OR.w D2,D1
  SUBQ.w #1,D1
   BSR.w writeword
  MOVE.w L_0_9106(PC),D1
  OR.w D2,D1
  MOVE.w D2,D3
  SUBQ.w #1,D3
  LSL.w #8,D3
  LSL.w #1,D3
  OR.w D3,D1
   BSR.w writeword
  MOVE.w L_0_9108(PC),D1
  MOVE.w D2,D3
  LSL.w #8,D3
  LSL.w #1,D3
  OR.w D3,D1
   BSR.w JL_0_94C0
  MOVE.w $4(A7),D1
  ADDQ.w #2,D1
   BSR.w writeword
  MOVE.w L_0_910C(PC),D1
  MOVE.w D2,D3
  SUBQ.w #1,D3
  LSL.w #8,D3
  LSL.w #1,D3
  OR.w D3,D1
   BSR.w JL_0_94C0
  MOVE.w $4(A7),D1
   BSR.w writeword
  MOVE.w L_0_9110(PC),D1
  OR.w D2,D1
  SUBQ.w #1,D1
   BSR.w writeword
  MOVE.w L_0_9112(PC),D1
  OR.w D2,D1
  SUBQ.w #1,D1
   BSR.w writeword
  MOVE.w L_0_9114(PC),D1
  OR.w D2,D1
  SUBQ.w #1,D1
  MOVE.w D2,D3
  LSL.w #8,D3
  LSL.w #1,D3
  OR.w D3,D1
   BSR.w writeword
  MOVE.w L_0_9116(PC),D1
  MOVE.w D2,D3
  SUBQ.w #1,D3
  LSL.w #8,D3
  LSL.w #1,D3
  OR.w D3,D1
   BSR.w writeword
  MOVE.w regnum,D1
  SUBQ.w #1,D1
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$D080,D1
  OR.w regnum,D1
 BRA.w writeword

L_0_9104:   MOVE.l d0,-(a7)  ;write array access
L_0_9106:   MOVE  d0,d0
L_0_9108:   MULU 0(a5),d0
L_0_910C:   MULU 0(a5),d0
;
L_0_9110:   SWAP d0
L_0_9112:   CLR d0
L_0_9114:   ADD.l d0,d0
L_0_9116:   MOVE.l (a7)+,d0

;arraynew   Dc.l $4c150000 ; MULU.l 0(a5),d0  ;new arrayaccess



L_0_9118:   Dc.b "$m"
AL_0_911A:   Ds.w 1
L_0_911C:   Dc.b "$j"
   Dc.b $FF ;.
   Dc.b $E0 ;.
L_0_9120:   Dc.b "PJ"
JL_0_9122:  CLR.l AL_0_E9E4
  BTST #$1,$7(A3)
   BEQ.w JL_0_92DE
  MOVE.w notshared,D1
   BNE.w JL_0_84BA
   BSR.w get1bytemain
  CMP.w #$29,D0
   BNE.w JL_0_918E
  BTST #$0,$6(A3)
   BEQ.w JL_0_7E9A
  MOVE.w $4(A3),AL_0_911A
  MOVE.l L_0_9118(PC),D1
   BSR.w JL_0_94F6
  MOVE.l L_0_911C(PC),D1
   BSR.w writelong
  TST.b debugmode
   BEQ.w JL_0_9180
  MOVE.l A2,-(A7)
  MOVE.w #$C315,D1
   BSR.w Atokejsr
  MOVEA.l (A7)+,A2
JL_0_9180:  MOVE.w L_0_9120(PC),D1
   BSR.w writeword
 BRA.w JL_0_92AE

AL_0_918C:   Ds.w 1
JL_0_918E:  CLR.w AL_0_918C
  BTST #$0,$6(A3)
   BEQ.w JL_0_91A6
  MOVE.w #$0008,AL_0_918C
JL_0_91A6:  MOVEM.l A2-A3,-(A7)
  MOVE.w varmode,-(A7)
  MOVE.w $8(A3),-(A7)
  MOVE.w $4(A3),-(A7)
  MOVE.l A2,-(A7)
  MOVE.w AL_0_EC5A,-(A7)
   ;bsr.w JL_0_7C44
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
   BSR.w JL_0_9952
  MOVE.w (A7)+,AL_0_EC5A
  MOVE.w $8(A7),varmode
  TST.b debugmode
   BEQ.w JL_0_91E4
   ;BSR.w JL_0_9922          ;skip for dim >65536
JL_0_91E4:  MOVEA.l (A7)+,A2
  MOVEQ.l #$04,D1
  BTST #$0,AL_0_EC5B
   BNE.b JL_0_91F6
  MOVE.w $8(A2),D1

  JL_0_91F6:
  ADD.w AL_0_918C(PC),D1
  BSR.w JL_0_B6DE
  ADDQ.w #1,regnum

  JL_0_9204:
  ADDQ.w #4,(A7)
  TST.w $4(A7)
   BEQ.w JL_0_9210
  SUBQ.w #8,(A7)                   ;range check local array

  JL_0_9210:
  TST.b debugmode
   BEQ.w JL_0_9244
  MOVE.w regnum,D1
  SUBQ.w #1,D1
  LSL.w #8,D1
  LSL.w #1,D1
  OR.w JL_0_9044(PC),D1
   BSR.w JL_0_94C0
  MOVE.w (A7),D1
   BSR.w writeword
  MOVE.l L_0_9048(PC),D1
   BSR.w writelong
  MOVE.w #$C309,D1
   BSR.w Atokejsr

  JL_0_9244:
  SUBQ.w #1,$2(A7)
   BEQ.w JL_0_9268
  CMP.w #$2C,D0
   BNE.w syntaxerr
   TST.b fast
   BNE 'l1
   BSR.w JL_0_9914
   BRA 'l2
 'l1
  BSR JL_0_9952
 'l2
  MOVE.w $4(A7),varmode
  BSR.w JL_0_9052
  BRA.w JL_0_9204

  JL_0_9268:
  CMP.w #$29,D0
   BNE.w syntaxerr
  SUBQ.w #1,regnum
  ADDQ.w #6,A7
  MOVEM.l (A7)+,A2-A3
  MOVE.w $4(A3),AL_0_2AE4
  MOVE.l AL_0_2AE2,D1
   BSR.w JL_0_94F6
  MOVE.w regnum,D1
  ORI.w #$D5C0,D1
   BSR.w writeword
  BTST #$0,$6(A3)
   BEQ.w JL_0_92AE
  MOVE.w L_0_9120(PC),D1
   BSR.w writeword
JL_0_92AE:   BSR.w get1bytemain
  BTST #$0,$7(A3)
   BEQ.w JL_0_92CC
  CMP.w #$5C,D0
   BNE.w JL_0_92D4
  MOVE.w L_0_92DC(PC),D1
   BSR.w writeword
JL_0_92CC:  MOVE.w #$8000,D2
 BRA.w JL_0_9320

JL_0_92D4:  MOVE.w #$C000,D2
 BRA.w JL_0_9320

L_0_92DC:   Dc.b "$R"
JL_0_92DE:  CMP.w #$28,D0
   BEQ.w JL_0_84BA
  CMPI.l #$100,$4(A2)
   BCS.w JL_0_949A
  BTST #$0,$7(A3)
   BEQ.w JL_0_930A
  CMP.w #$5C,D0
   BEQ.w JL_0_930A
  MOVEQ.l #$00,D2
 BRA.w JL_0_949E

JL_0_930A:  MOVE.w #$8000,D2
  MOVE.w $4(A3),AL_0_2AE4
  MOVE.l AL_0_2AE2,D1
   BSR.w JL_0_94F6
                                ;check read pointer <=0
   TST.b debugmode
   BEQ.w 'skip
   MOVE.w #$c320,D1
   JSR Atokejsr
   'skip
JL_0_9320:  MOVEQ.l #$00,D3
JL_0_9322:  CMP.w #$5C,D0
   BNE.w JL_0_9486
  CMPI.l #$100,$4(A2)
   BCS.w JL_0_84A4
  MOVE.w D2,-(A7)
   BSR.w getparameter2
   BEQ.w syntaxerr
  ADDQ.w #4,A2
   BSR.w findvariable2
   BNE.w JL_0_84D2
  MOVE.w (A7)+,D2
  MOVEA.l A2,A3
  MOVEA.l $A(A3),A2
  MOVEQ #0,d1
  MOVE.w 4(a3),d1
  ADD.l d1,d3
  ;ADD.w $4(A3),D3                ;offset for newtype
  MOVE.l A3,AL_0_E9E4
  CMP.w #$5B,D0
   BNE.w JL_0_9422
  BTST #$1,$7(A3)
   BEQ.w JL_0_84A4
   BSR.w JL_0_9004
  MOVEM.l A2-A3,-(A7)
  MOVE.w varmode,-(A7)
  MOVE.l AL_0_E9E4,-(A7)
  MOVE.w AL_0_2A94,D1
   BSR.w writeword
  MOVEQ.l #$03,D2        ;was 2 >32kb types
  MOVE.l destpointer,deststore
   BSR.w eval
  CMP.w #$5D,D0
   BNE.w syntaxerr
  TST.b fast ;a2,-(a7) array
  BEQ 'l10
  CNIF #optibreak
   ILLEGAL
   CEND
  MOVE.l destpointer,d1
  SUB.l deststore,d1
  CMP.l #4,d1
  BNE 'l10
  MOVE.l destpointer,a4
  MOVE.l -4(a4),-6(a4)
  SUBQ.l #2,destpointer
  CLR.l imm_addr
  CLR.l load_var_addr
  BRA 'l20
'l10  MOVE.w AL_0_2A98,D1
   BSR.w writeword
'l20  MOVE.l (A7)+,AL_0_E9E4
  MOVE.w (A7)+,varmode
  MOVEM.l (A7)+,A2-A3
  TST.w debugmode
   BEQ.b JL_0_93F4
  MOVE.w $8(A3),D1
   BEQ.b JL_0_93F4
  MOVE.w D1,AL_0_94B8
  MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  OR.w L_0_94B2(PC),D1
  MOVE.w D1,AL_0_94B6
  MOVE.l AL_0_94B6(PC),D1
   BSR.w writelong
  MOVE.l L_0_94BA(PC),D1
   BSR.w writelong
  MOVE.w L_0_94BE(PC),D1
   BSR.w writeword
JL_0_93F4:  MOVEQ.l #$04,D1
  BTST #$0,$7(A3)
   BNE.w JL_0_9404
  MOVE.w $8(A2),D1
JL_0_9404:   BSR.w JL_0_B6DE
  MOVE.w AL_0_2AF0,D1
  OR.w regnum,D1
   OR.w #$100,d1      ;>32kb types
   BSR.w writeword
   BSR.w get1bytemain
  MOVEQ.l #$00,D3
  MOVE.w #$8000,D2
JL_0_9422:  BTST #$0,$7(A3)
   BNE.w JL_0_9430
 BRA.w JL_0_9322

JL_0_9430:  CMP.w #$5C,D0
   BNE.w JL_0_9474
  TST.w D3
   BNE.w JL_0_944C
  MOVE.w AL_0_2AD8,D1
   BSR.w writeword
 BRA.w JL_0_945C

JL_0_944C:  MOVE.w D3,AL_0_2AE8
  MOVE.l AL_0_2AE6,D1
   BSR.w writelong
JL_0_945C:  BTST #$2,$7(A3)
   BEQ.w JL_0_9320
  MOVE.l AL_0_2ADA,D1
   BSR.w writelong
 BRA.w JL_0_9320

JL_0_9474:  BSET #$E,D2
  BTST #$2,$7(A3)
   BNE.w JL_0_9486
  BSET #$D,D2
JL_0_9486:  CMPI.l #$100,$4(A2)
   BCC.w JL_0_9496
  MOVE.b $7(A2),D2
JL_0_9496: BRA.w JL_0_9004

JL_0_949A:  MOVE.w $6(A2),D2
JL_0_949E:  MOVE.w $4(A3),D3
  BTST #$0,$7(A3)
   BEQ.w JL_0_94B0
  BSET #$E,D2
JL_0_94B0: RTS

L_0_94B2:  Dc.b $B0,$7C,$00,$00 ;.|..
AL_0_94B6:  Dc.b $B0,$7C ;.|
AL_0_94B8:  Ds.w 1
L_0_94BA:  Dc.b "e"
  Dc.b $04,$70 ;.p
  Dc.b $02 ;.
L_0_94BE:  Dc.b "N@"
JL_0_94C0:  TST.w varmode
   BEQ.w writeword
  BCLR #$0,D1
 BRA.w writeword

JL_0_94D2:  TST.w varmode
   BEQ.w writeword
  BCLR #$9,D1
 BRA.w writeword

JL_0_94E4:  TST.w proceduremode
   BEQ.w writelong
  BCLR #$19,D1
 BRA.w writelong

JL_0_94F6:  TST.w varmode
  BEQ.w writelong
  BCLR #$10,D1
writelong:
  ADDQ.l #1,destpointer
  BCLR #$0,AL_0_E8F9
  MOVEA.l destpointer,A4
  CMPA.l destbufferend,A4
   BCC.w JL_0_954Ea
  MOVE.l D1,(A4)+

  JL_0_952Ca:
  MOVE.l A4,destpointer
  CMPA.l AL_0_959E(PC),A4
   BHI.w JL_0_953C
RTS

JL_0_954Ea:
  MOVE.w #$FFFF,dontwrite
  CLR.b fast
  CLR.b fpu
  CLR.b iee
  ADDQ.w #4,A4
  BRA.w JL_0_952Ca
RTS

.writeword:
  ADDQ.l #1,destpointer
  BCLR #$0,AL_0_E8F9
  MOVEA.l destpointer,A4
  CMPA.l destbufferend,A4
   BCC.w JL_0_954E
  MOVE.w D1,(A4)+

  JL_0_952C:
  MOVE.l A4,destpointer
  CMPA.l AL_0_959E(PC),A4
   BHI.w JL_0_953C
RTS

.writeinstruction:
  ADDQ.l #1,destpointer
  BCLR #$0,AL_0_E8F9
  MOVEA.l destpointer,A4
  CMPA.l destbufferend,A4
   BCC.w JL_0_954E
  MOVE.w D1,(A4)+
  MOVE.l A4,destpointer
  CMPA.l AL_0_959E(PC),A4
   BHI.w JL_0_953C
RTS

JL_0_953C:
  TST.w AL_0_E32E
  BNE.w JL_0_954C
  MOVE.l A4,AL_0_959E

  JL_0_954C:
RTS

JL_0_954E:
  MOVE.w #$FFFF,dontwrite
  ADDQ.w #2,A4
  CLR.b fast
  CLR.b fpu
  CLR.b iee
BRA.w JL_0_952C

writebyte:
  MOVEA.l destpointer,A4
  CMPA.l destbufferend,A4
   BCC.w JL_0_9590
  MOVE.b D1,(A4)+
  JL_0_956E:
  MOVE.l A4,destpointer
  CMPA.l AL_0_959E(PC),A4
   BHI.w JL_0_957E
RTS

JL_0_957E:
  TST.w AL_0_E32E
   BNE.w JL_0_958E
  MOVE.l A4,AL_0_959E
  JL_0_958E:
RTS

JL_0_9590:
  MOVE.w #$FFFF,dontwrite
  ADDQ.w #1,A4
  CLR.b fast
  CLR.b fpu
  CLR.b iee
BRA.w JL_0_956E

AL_0_959E:   Ds.l 1
JL_0_95A2:
  MOVE.w (A0)+,D1
  BSR.w writeword
  JL_0_95A8:
    CMPA.l A1,A0
    BCC.w JL_0_95B8
      MOVE.w (A0)+,D1
      BSR.w writeword
  BRA.w JL_0_95A8
  JL_0_95B8:
RTS

JL_0_95BA:
  MOVE.w (A0)+,D1
  BSR.w writeword
  CMPA.l A1,A0
  BCS.w JL_0_95BA
    RTS

  AJL_0_95C8:           ;byte to word
  TST.b iniffcommand
  BEQ 'l1
    MOVE.w #$4880,D1
    OR.w regnum,D1
    BSR writeword
 'l1
RTS

AJL_0_95CA:
  BSR.w AJL_0_95C8
  AJL_0_95CE:            ;word to long word_to_fpu
  TST.b iee
  BEQ 'old
  CMP.b #5,d2
  BEQ wtof
'old  MOVE.w #$48C0,D1
  OR.w regnum,D1
 BRA.w writeword
wtof
 MOVEQ #0,d0
 MOVE.w regnum,d0
 ASL.l #7,d0
 MOVE.l #$f2005000,d1
 OR.l d0,d1
 ASL.l #1,d0
 ASL.l #8,d0
 OR.l d0,d1
 BRA writelong


AJL_0_95DC:
             BSR.w AJL_0_95C8
AJL_0_95E0:  MOVE.w #$4840,D1
  OR.w regnum,D1
   BSR.w writeword
  MOVE.w #$4240,D1
  OR.w regnum,D1
 BRA.w writeword
ltof                   ;long to fpu
CMP.w #$ffdc,d1
 BNE 'negfpu
 MOVEQ #0,d0
 MOVE.w regnum,d0
 ASL.l #7,d0
 MOVE.l #$f2004000,d1
 OR.l d0,d1
 ASL.l #1,d0
 ASL.l #8,d0
 OR.l d0,d1
 BRA writelong
'negfpu
 MOVEQ #0,d1
 MOVE.w regnum,d1        ;fpu neg
 ASL.l #7,d1
 OR.l #$f200001a,d1
 MOVE.l d0,-(a7)
 MOVEQ #0,d0
 MOVE.w regnum,d0
 ASL.l #8,d0
 ASL.l #2,d0
 OR.l d0,d1
 MOVE.l (a7)+,d0
 BRA writelong

AJL_0_95FC:
TST.b iee
             BNE wtof
             BSR.w AJL_0_95CA
JL_0_9600:  MOVE.w #$FFDC,D1
JL_0_9604: TST.b iee
           BNE ltof
   MOVE.w D1,AL_0_2A5C
   BSR.w JL_0_AD40
  MOVE.l D4,D1
   BSR.w JL_0_AD38
  MOVE.w #$C900,D1
   BSR.w Atokejsr
   BSR.w JL_0_A352
  MOVE.l AL_0_2A5A,D1
   BSR.w writelong
   BSR.w JL_0_A36E
  MOVE.l D5,D1
 BRA.w JL_0_AD38

JL_0_9634: RTS

AJL_0_9636:  MOVE.w #$C317,D1
 TST.b typecheck
             BEQ 'l1
   TST.b notypecheck
   BNE 'l1
   TST.l lasttoken
   BEQ typeerror
'l1

JL_0_963A:
  TST.b debugmode
   BEQ.w JL_0_9696
  BTST #$7,overflowcheck
   BEQ.w JL_0_9696
  TST.w AL_0_E32E
   BNE.w JL_0_9696
  TST.w regnum
   BEQ.w JL_0_968A
  MOVE.w D1,-(A7)
  MOVE.w JL_0_9698(PC),D1
   BSR.w writeword
  MOVE.w regnum,D1
  OR.w L_0_969C(PC),D1
   BSR.w writeword
  MOVE.w (A7)+,D1
   BSR.w JL_0_968A
  MOVE.w L_0_969A(PC),D1
 BRA.w writeword

JL_0_968A:  MOVEM.l D0-D7/A0-A6,-(A7)
   BSR.w Atokejsr
  MOVEM.l (A7)+,D0-D7/A0-A6
JL_0_9696: RTS

JL_0_9698:  MOVE.l D0,-(A7)
L_0_969A:  MOVE.l (A7)+,D0
L_0_969C:  MOVE.l D0,D0
AL_0_969E:   BSR.w AJL_0_95CE
 TST.b iee
 BEQ 'old
 CMP.b #5,d2
 BNE 'old
 RTS
'old BRA.w JL_0_9600

AJL_0_96A6:  MOVE.w #$C316,D1
   TST.b typecheck
  BEQ 'l1
  TST.b peekaddrsize
  BNE 'l1
  TST.b notypecheck
  BNE 'l1
  TST.l lasttoken
  BEQ typeerror
'l1
 BRA.w JL_0_963A

AJL_0_96AE:  MOVE.w #$C318,D1
    TST.b typecheck
  BEQ 'l1
  TST.b peekaddrsize
  BNE 'l1
  TST.b notypecheck
  BNE 'l1
  TST.l lasttoken
  BEQ typeerror
'l1




 BRA.w JL_0_963A

AJL_0_96B6:  MOVE.w #$C318,D1
     TST.b typecheck
             BEQ 'l1
   TST.b notypecheck
    BNE 'l1
   TST.l lasttoken
   BEQ typeerror
'l1
   BSR.w JL_0_963A
 BRA.w AJL_0_95E0

AJL_0_96C2: BRA.w JL_0_9600

JL_0_96C6: RTS

AJL_0_96C8:  MOVE.w #$C319,D1
   TST.b typecheck
             BEQ 'l1
   TST.b notypecheck
   BNE 'l1
   TST.l lasttoken
   BEQ typeerror
'l1
   BSR.w JL_0_963A
JL_0_96D0:  MOVE.w #$4240,D1
  OR.w regnum,D1
   BSR.w writeword
  MOVE.w #$4840,D1
  OR.w regnum,D1
 BRA.w writeword

AJL_0_96EC: BRA.w JL_0_96D0

AJL_0_96F0:   BSR.w JL_0_96D0
 BRA.w AJL_0_95CE
 qtof                   ;quick to fpu
'l2
 MOVEQ #0,d0
 MOVE.w regnum,d0
 ASL.l #7,d0
 MOVE.l #$f2004000,d1
 OR.l d0,d1
 ASL.l #1,d0
 ASL.l #8,d0
 OR.l d0,d1
 BSR writelong
 MOVE.w regnum,d0
 ASL.l #7,d0
 MOVE.l #$f23c4423,d1     ;fmul.s #1/65536,fpreg
 OR.w d0,d1
 BSR writelong
 MOVE.l #$37800000,d1
 BSR writelong
 RTS


AJL_0_96F8:  TST.b iee
             BNE qtof
MOVE.w #$D300,D1
JL_0_96FC:  MOVE.w D1,-(A7)
   BSR.w JL_0_AD40
  MOVE.l D4,D1
   BSR.w JL_0_AD38
   BSR.w JL_0_A352
  MOVE.w (A7)+,D1
   BSR.w Atokejsr
   BSR.w JL_0_A36E
  MOVE.l D5,D1
 BRA.w JL_0_AD38

JL_0_971C: RTS

AJL_0_971E:
 TST.b typecheck
             BEQ 'l1
   TST.b notypecheck
    BNE 'l1
   TST.l lasttoken
   BEQ typeerror
'l1

TST.b iee
             BNE ftol
MOVE.w #$C31A,D1
   BSR.w JL_0_963A
   BSR.w JL_0_974A
 BRA.w AJL_0_96A6

JL_0_972E: RTS

AJL_0_9730:
    TST.b typecheck
             BEQ 'l1
    TST.b notypecheck
    BNE 'l1
   TST.l lasttoken
   BEQ typeerror
'l1
   TST.b iee
   BNE ftol
   MOVE.w #$C31B,D1
   BSR.w JL_0_963A
   BSR.w JL_0_974A
 BRA.w AJL_0_96AE

JL_0_9740: RTS

AJL_0_9742: TST.b iee
            BNE ftol
   MOVE.w #$C31C,D1
   BSR.w JL_0_963A
JL_0_974A:  MOVE.w #$FFE2,D1
 BRA.w JL_0_9604
 ftol                         ;fpu to long
 MOVE.l d0,-(a7)
 MOVEQ #0,d0
  MOVE.w regnum,d0
 ASL.l #7,d0
 MOVE.l #$f2006000,d1
 OR.l d0,d1
 ASL.l #1,d0
 ASL.l #8,d0
 OR.l d0,d1
 MOVE.l (a7)+,d0
 BRA writelong
 ftoq                         ;fpu to quick
  MOVE.l d0,-(a7)
  MOVEQ #0,d0
  MOVE.l #$f23c4023,d1
  MOVE.w regnum,d0
 ASL.l #7,d0
 OR.l d0,d1
 BSR writelong
 MOVE.l #$00010000,d1
 BSR writelong
  MOVE.w regnum,d0
 ASL.l #7,d0
 MOVE.l #$f2006000,d1
 OR.l d0,d1
 ASL.l #1,d0
 ASL.l #8,d0
 OR.l d0,d1
 BSR writelong
 MOVE.l (a7)+,d0
 RTS



JL_0_9752: RTS

AJL_0_9754:
  TST.b iee
  BNE ftoq
MOVE.w #$C31B,D1
   BSR.w JL_0_963A
  MOVE.w #$D301,D1
 BRA.w JL_0_96FC

AJL_0_9764:                      ;stringtolong
   TST.l lasttoken
   BNE 'l1
   BRA error_convert_types
'l1 CMP.b #2,optistring
   BEQ JLrts
   MOVE.w L_0_29D8,D1
   BSR.w writeword
   CMPI.w #$2,AL_0_E9AE
   BCS.w JL_0_9888

      MOVE.w L_0_9886(PC),D1
      BSR.w writeword
   'l10 MOVE.w regnum,D1
     LSL.w #8,D1
     LSL.w #1,D1
     CMPI.w #$2,AL_0_E9AE
      BCS.w JL_0_98E8
     MOVE.w a2offset,D3
     SUB.w AL_0_9ACC,D3
     CMP.w #$6,D3
      BNE.w JL_0_98D4b
     OR.w AL_0_29EE,D1
      BSR.w writeword
     LEA AL_0_29F0,A0
     LEA AL_0_29FA,A1
    BRA.w JL_0_95BA

  JL_0_98D4b:            ;OS call 2 strings fix
    OR.w AL_0_29FA,D1
     BSR.w writeword
    MOVE.l #0,D1
BRA.w writeword

JL_0_9770:
  ADDQ.w #1,AL_0_AD80
  BSR.w writeconvertcode
  SUBQ.w #1,AL_0_AD80
  JLrts
RTS

writeconvertcode:
  MOVE.w D3,D1
  SUBQ.w #1,D1
  MULU #$7,D1
  ADD.w D2,D1
  SUBQ.w #1,D1
  LSL.w #2,D1
  LEA convtable,A0
  MOVE.l $0(A0,D1.W),D1
  BEQ.w JL_0_97A2
    MOVEA.l D1,A0
    CMP.b #$ff,d3
    BEQ JL_0_97A2
      JMP (A0)
    JL_0_97A2:
RTS

AL_0_97A4:  Ds.l 1
getparameter:
  CMP.w #"\",D0
  BNE.w JL_0_97C2
    CMP.b #"\",(a5)
    BNE 'first
      MOVE.l A5,AL_0_97A4
      LEA path2,A5
      BRA 'g1
   'first
    SUBQ.w #1,A5
  MOVE.l A5,AL_0_97A4
  LEA AL_0_4A20,A5                ;read path
 'g1
  BSR.w get1bytemain
  JL_0_97C2:
  CLR.w AL_0_EC5A
  CMP.w #$2A,D0
   BNE.w JL_0_983A
  MOVE.w #$0001,AL_0_EC5A
JL_0_97D8:   BSR.w getparameter2
JL_0_97DC:   BEQ.w syntaxerr
  CMP.w #$28,D0
   BEQ.w JL_0_9830
  CMP.w #$2E,D0
   BEQ.w JL_0_980C
  CMP.w #$24,D0
   BNE.w JL_0_9838
  ORI.w #$8,AL_0_EC5A
   BSR.w JL_0_7C56
   BSR.w get1bytemain
 BRA.w JL_0_9822

JL_0_980C:   BSR.w JL_0_7C56
  MOVE.w D2,-(A7)
  LEA AL_0_ECE8,A1
   BSR.w JL_0_8BF2
   BEQ.w syntaxerr
  MOVE.w (A7)+,D2
JL_0_9822:  MOVE.w D0,D1
   BSR.w JL_0_7C64
  CMP.w #$28,D1
   BNE.w JL_0_9838
JL_0_9830:  ORI.w #$2,AL_0_EC5A
JL_0_9838: RTS

JL_0_983A:  CMP.w #$40,D0
   BNE.w JL_0_984E
  MOVE.w #$0005,AL_0_EC5A
 BRA.w JL_0_97D8

JL_0_984E:   BSR.w makename2
 BRA.w JL_0_97DC

JL_0_9856:  MOVE.w #$FED3,D1
   BSR.w uselib
  LEA AL_0_2AA0,A0
  LEA AL_0_2AA8,A1
 BRA.w JL_0_95A2

JL_0_986E:  MOVE.w #$FED3,D1
   BSR.w uselib
  LEA AL_0_2AA8,A0
  LEA AL_0_2AAC,A1
 BRA.w JL_0_95A2

L_0_9886:   Dc.b "B",27
JL_0_9888:
    CMP.b #2,optistring
   BEQ 'l10
   MOVE.w L_0_9886(PC),D1
   BSR.w writeword
'l10 MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  CMPI.w #$2,AL_0_E9AE
   BCS.w JL_0_98E8
  MOVE.w a2offset,D3
  SUB.w AL_0_9ACC,D3
  CMP.w #$6,D3
   BNE.w JL_0_98D4
  OR.w AL_0_29EE,D1
   BSR.w writeword
  LEA AL_0_29F0,A0
  LEA AL_0_29FA,A1
 BRA.w JL_0_95BA

JL_0_98D4:
   OR.w AL_0_29FA,D1
   BSR.w writeword
  MOVE.l AL_0_29FC,D1
;CNIF #more6string
; MOVE.w #$0008,d1
; BSR writeword
; MOVE.w #$2f6f,d1       ;native move.l 4(a7),8(a7)
; BSR writeinstruction
; MOVE.l #$00040008,d1
; BSR writelong
; MOVE.w #$588f,d1          ;native addq.l #4,a7
; BSR writeword
; RTS
;CEND
 BSR writelong
CNIF #more6string
   CMP.w #6,regnum
   BEQ 'l1
   TST.w stackpar
   BNE 'l1
   TST.b funcparloop
   BEQ 'l1
   MOVE.l #$48780000,d1
   BSR writelong
'l1
CEND
 RTS
JL_0_98E8:
CNIF #more6string
     MOVE.l d1,-(a7)
     CMP.w #6,regnum
     BEQ 'l1
     TST.w stackpar
     BNE 'l1
     TST.b funcparloop
     BEQ 'l1
     MOVE.l #$48780000,d1
     BSR writelong
   'l1
    MOVE.l (a7)+,d1
CEND
   OR.w AL_0_2A02,D1
   BSR.w writeword
  MOVE.w #$FED3,D1
   BSR.w uselib
  MOVE.w $A(A1),D1
 BRA.w writeword

AL_0_9902:   Ds.w 1
L_0_9904:   Dc.b 12
   Dc.b $80,$00,$01 ;...
   Ds.w 1
L_0_990A:   Dc.b "e",0,0
   Dc.b 8,"N"
   Dc.b $B9,$00,$00 ;...
   Ds.w 1
JL_0_9914:
  TST.b debugmode
  BEQ.w JL_0_9948
BSR.w JL_0_9952

JL_0_9922:
  MOVE.w L_0_9904(PC),D1
  OR.w regnum,D1
   BSR.w writeword
  MOVEQ.l #$01,D1
  SWAP D1
   BSR.w writelong
  MOVE.l L_0_990A(PC),D1
   BSR.w writelong
  MOVE.w #$C309,D1
BRA.w Atokejsr

JL_0_9948:
  MOVEQ.l #$02,D2
  MOVEQ.l #$00,D1
  MOVEQ.l #$00,D3
BRA.w JL_0_99A6

JL_0_9952:
  MOVEQ.l #$03,D2
  MOVEQ.l #$00,D1
  MOVEQ.l #$00,D3
BRA.w JL_0_99A6

JL_0_995C:   ;bsr.w JL_0_7C44
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
  MOVEQ.l #-$01,D1
  MOVEQ.l #-$01,D3
BRA.w JL_0_996C

JL_0_9968:   ;bsr.w JL_0_7C44
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
  JL_0_996C:
  MOVEQ.l #-$01,D1
  MOVEQ.l #$00,D3
BRA.w JL_0_9990

JL_0_9974:   ;bsr.w JL_0_7C44
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
  MOVEQ.l #$00,D1
  MOVEQ.l #-$01,D3
BRA.w JL_0_9990

JL_0_9980:
  MOVEQ.l #$01,D1
  MOVEQ.l #-$01,D3
BRA.w JL_0_9990

JL_0_9988:   ;bsr.w JL_0_7C44
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
eval:  MOVEQ.l #$00,D1
  MOVEQ.l #$00,D3
JL_0_9990:  CMPI.w #$6,regnum
   BCS.w JL_0_99A6
   MOVEQ #0,d1
   MOVE.l destpointer,a4
   CMP.w #$2f0a,-2(a4)                 ;bug is a move.l a2,-(a7) before (show temp calc)?
                                       ;then put not to stack
   BNE 'l2
;   JSR linemessage
;   TST.l result
;   BEQ 'l2
   BRA 'l1
'l2  MOVEQ.l #-$01,D1
'l1 MOVE.w #$0006,regnum               ;write a func par To stack
JL_0_99A6:  MOVE.w AL_0_9ACC,-(A7)
  MOVE.w a2offset,AL_0_9ACC
  MOVE.w stackpar,-(A7)
  MOVE.w D1,stackpar
  MOVE.w AL_0_E9AE,-(A7)
  CLR.w AL_0_E9AE
  MOVE.w AL_0_9902(PC),-(A7)
  MOVE.w D3,AL_0_9902
  MOVE.w D2,-(a7)
  MOVE.w d2,mode
   BSR.w JL_0_9AD2
  MOVE.w (a7)+,d3
   BEQ.w JL_0_99F2
  MOVE.w AL_0_9902(PC),D1
   BNE.w JL_0_99F2
  EXG.l D2,D3
   MOVE.l a2,-(a7)
   TST.b curtemplabel
   BEQ 'l10
   MOVE.l AL_0_E928,a2
   CMP.w #$c,$8(a2)
   BEQ 'l20
   CMP.w #$d,$8(a2)
   BEQ 'l20
'l10:
  CMP.w d2,d3
  BEQ 'l20
  BSR.w writeconvertcode
  CLR.b doimmediate
'l20 MOVE.l (a7)+,a2
JL_0_99F2:
  MOVE.w (A7)+,AL_0_9902
  MOVE.w stackpar,D1
   BEQ.w JL_0_9A5A
   BMI.w JL_0_9A5A
  MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  CMP.w #$7,D2
   BNE.w JL_0_9A24
   CMP.b #2,optistring
   BEQ JL_0_9A24a
  MOVE.w D1,-(A7)
  OR.w AL_0_2A0A,D1
   BSR.w writeword
  MOVE.w (A7)+,D1
JL_0_9A24:
  ADDQ.w #2,a2offset         ;lib mode to stack
  ;ORI.w #$7000,D1
  ;ADDI.w #$200,D1
  ;OR.w D2,D1
  MOVE.w #$3f3c,d1
   BSR.w writeword
  ;move.w L_0_9AD0(PC),D1
  ;or.w regnum,D1
  ;addq.w #1,D1
  MOVE.w d2,d1
  MOVE.w d1,libmode
   BSR.w writeword
  CMP.w #$7,D2
   BNE.w JL_0_9A5A
  MOVE.w AL_0_2A08,D1
  OR.w regnum,D1
   BSR.w writeword
JL_0_9A5A:  CMP.w #$7,D2
   BNE.w JL_0_9A70
; CNIF #more6string
;   CMP.w #6,regnum
;   BEQ 'l1
;   TST.b funcparloop
;   BEQ 'l1
;   MOVE.l #$48780000,d1
;   BSR writelong
;'l1
; CEND
   CMP.b #2,optistring
   BEQ 'l10
   ADDQ.w #4,a2offset
   BSR.w JL_0_9888
   BRA.w JL_0_9A84
'l10
CNIF #more6string
    CMP.w #6,regnum
    BEQ 'l1
    TST.b funcparloop
    BEQ 'l1
    MOVE.l #$48780000,d1
    BSR writelong
 'l1
CEND
 BRA.w JL_0_9A84
JL_0_9A24a
  ADDQ.w #2,a2offset
  BRA JL_0_9A5A
JL_0_9A70:  CMPI.w #$2,AL_0_E9AE
   BCS.w JL_0_9A84                  ;correct stack
  MOVE.w L_0_9ACE(PC),D1
   BSR.w writeword
JL_0_9A84:  MOVE.w (A7)+,AL_0_E9AE
  MOVE.w stackpar,D1
   BPL.w JL_0_9ABE
   CMP.b #7,d2
   BEQ 'l1
  TST.b funcparloop
  BEQ 'l1
  CMP.b #5,d2
  BNE 'skip
  TST.b fpu
  BEQ 'skip
  MOVE.l #$f2066700,d1   ;fmove.s fp6,d6
  JSR writelong
'skip  MOVE.w #$c4ff,d1    ;savetemp+regnum
  ADD.w parnum,d1
  JSR Atokejsr
   TST.w dontwrite
   BNE 'l1
   MOVE.l data1start,d1
   MOVE.l destpointer,a4
   ADD.l d1,-4(a4)
   MOVE.l destpointer,d1
   SUBQ.l #4,d1
   SUB.l destbufferstart,d1
   MOVE.l d2,-(a7)
   MOVE.l d1,d2
   JSR addhunkoffset
   MOVE.l (a7)+,d2
   BRA JL_0_9ABE
'l1
  ADDQ.w #2,a2offset
  MOVE.w AL_0_29DA,D1
  CMP.w #$3,D2                         ;write parameter to stack
   BCS.w JL_0_9AB4
  ADDQ.w #2,a2offset
  TST.b fpu
  BEQ 'nofpu
  CMP.w #5,d2
  BNE 'nofpu
  MOVEQ #0,d1
  MOVE.w regnum,d1
  ASL.l #7,d1
  OR.l #$f2276400,d1
  BSR writelong
  BRA JL_0_9ABE
'nofpu  MOVE.w AL_0_29DC,D1
JL_0_9AB4:  OR.w regnum,D1
   BSR.w writeword                     ;nat
JL_0_9ABE:  MOVE.w (A7)+,stackpar
  MOVE.w (A7)+,AL_0_9ACC
 RTS

AL_0_9ACC:  Ds.w 1
L_0_9ACE:  Dc.b "XO"
L_0_9AD0:  Dc.b "?",0
JL_0_9AD2:   BSR.w JL_0_9AE2
  SUBI.l #$12,AL_0_A6B0
 RTS

JL_0_9AE2:  MOVEQ.l #$01,D1
   ;BSR.w JL_0_9CE6
      MOVEA.l AL_0_9D10(PC),A1
      MOVE.l A0,(A1)+
      MOVE.w D1,(A1)+
      MOVE.l A1,AL_0_9D10
   BSR.w calcloop
  TST.w D1
   BNE.w syntaxerr
  SUBQ.l #6,AL_0_9D10
 RTS

calcloop:                     ;eval5
             BSR.w JL_0_9C24
JL_0_9AFE:  MOVEA.l AL_0_9D10(PC),A1
  CMP.w -(A1),D1
   BHI.w JL_0_9B0A
   RTS
JL_0_9B0A:   ;BSR.w JL_0_9CE6
          MOVEA.l AL_0_9D10(PC),A1
          MOVE.l A0,(A1)+
          MOVE.w D1,(A1)+
          MOVE.l A1,AL_0_9D10
  MOVE.w D2,-(A7)
  ADDQ.w #1,regnum
   BSR.w calcloop
  SUBQ.w #1,regnum
  MOVE.w (A7)+,D3
  MOVEM.l D1/A0,-(A7)
   BEQ.w JL_0_9B2E
   BSR.w JL_0_9770
JL_0_9B2E:   BSR.w JL_0_9CF6
   BSR.w writecode
  MOVEA.l AL_0_A6B0(PC),A0
  MOVE.w -$2(A0),D1
  OR.w -$14(A0),D1
  MOVE.w D1,-$14(A0)
   BNE.w JL_0_9C0E
  MOVE.w dontwrite,D1
   BNE.w JL_0_9C0E
   MOVEA.l -$24(A0),A0
   !newcalc
   BEQ 'l10
   MOVEA.l AL_0_A6B0(PC),A0
   MOVE.w -$18(A0),AL_0_EC22
   MOVE.l -$1C(A0),AL_0_EC22
   MOVEA.l -$24(A0),A0
   MOVE.l A0,destpointer
   MOVEA.l _mathffpbase,A6
   MOVEA.l AL_0_7310,A1
   BRA cont1
'l10  MOVE.w #$2000,D1
  OR.w regnum,D1
   BSR.w writeword
    MOVEQ #0,d1
    MOVE.w regnum,D1
    ASL.l #8,d1
    ASL.l #2,d1
    OR.l #$f2000000,d1
    BSR writelong
  MOVE.w #$4E75,D1
   BSR.w writeword
  MOVE.w -$18(A0),AL_0_EC22
  MOVE.l -$1C(A0),AL_0_EC22
  MOVEA.l -$24(A0),A0
  MOVE.l A0,destpointer
  MOVEM.l D2/A5,-(A7)
  MOVEA.l _mathffpbase,A6
  MOVEA.l AL_0_7310,A1
  MOVE.w $A(A1),D0
  LEA _mathffpbase,A5
  SUBA.w D0,A5
  JSR Aclearcache      ;neg +
  CLR.l load_var_addr
  CLR.l imm_addr
  TST.w dontwrite
  BNE '1
  JSR (A0)                 ;calc constant inline expression
'1  MOVEM.l (A7)+,D2/A5
cont1:
  MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$203C,D1
  CMP.w #$3,D2
   BCC.w JL_0_9BCE
  ORI.w #$1000,D1
   BSR.w writeword
  MOVE.w D0,D1
   BSR.w writeword
 BRA.w JL_0_9BD8

JL_0_9BCE:
           TST.b iee    ;fpu constant
           BEQ 'l10
           CMP.b #5,d2
           BNE 'l10
 MOVEQ #0,d1
 MOVE.w regnum,D1
 ASL.l #7,d1
 OR.l #$f23c5400,d1
 BSR writelong
 SUBQ.l #8,a7
 fmove.d fp0,0(a7)
 MOVE.l (a7)+,d1
 BSR writelong
 MOVE.l (a7)+,d1
 BSR writelong
  BRA JL_0_9BD8
'l10 BSR.w writeword
  MOVE.l D0,D1
   BSR.w writelong
JL_0_9BD8:  MOVEA.l AL_0_A6B0(PC),A0
  MOVEA.l -$20(A0),A3
  MOVEA.l hunkoffsetbase,A2
  MOVE.l A3,hunkoffsetbase
  MOVEA.l _execbase,A6
JL_0_9BF0:  CMPA.l A3,A2
   BEQ.w JL_0_9C0A
  SUBQ.l #1,hunkoffsetcounter
  MOVEA.l A2,A1
  MOVEA.l (A2),A2
  MOVEQ.l #$8,D0
  MOVE.l mempool2,a0
   JSR _FreePooled(A6)
 BRA.w JL_0_9BF0

JL_0_9C0A:  MOVEA.l AL_0_A6B0(PC),A0
JL_0_9C0E:  LEA -$12(A0),A0
  MOVE.l A0,AL_0_A6B0
  MOVEM.l (A7)+,D1/A0
   BSR.w JL_0_7C3A
 BRA.w JL_0_9AFE

JL_0_9C24:   BSR.w JL_0_A386
  TST.w d0
  BEQ JL_0_9C42
  CMP.b #",",d0
  BEQ JL_0_9C42
  CMP.b #"@",d0            ;expandline @@
  BEQ JL_0_9C42
  LEA AL_0_E43A,A0
JL_0_9C2E:  TST.w (A0)
   BEQ.w JL_0_9C42
  CMP.w (A0),D0
   BEQ.w JL_0_9C46a
  LEA $20(A0),A0
 BRA.w JL_0_9C2E
JL_0_9C42:
 MOVEQ.l #$00,D1
 RTS
JL_0_9C46a
JL_0_9C46:  CMP.w #$3C,D0
   BNE.w JL_0_9C70
   BSR.w get1bytemain
  CMP.w #$3D,D0
   BNE.w JL_0_9C64
  LEA AL_0_E67A,A0
 BRA.w JL_0_9CCA

JL_0_9C64:  CMP.w #$3E,D0
   BNE.w JL_0_9C96
 BRA.w JL_0_9CC4

JL_0_9C70:  CMP.w #$3E,D0
   BNE.w JL_0_9C9E
   BSR.w get1bytemain
  CMP.w #$3D,D0
   BNE.w JL_0_9C8E
  LEA opge,A0
 BRA.w JL_0_9CCA

JL_0_9C8E:  CMP.w #$3C,D0
   BEQ.w JL_0_9CC4
JL_0_9C96:   ;bsr.w JL_0_7C44
 MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
 BRA.w JL_0_9CCA

JL_0_9C9E:  CMP.w #$3D,D0
   BNE.w JL_0_9CCA
   BSR.w get1bytemain
  CMP.w #$3E,D0
   BNE.w JL_0_9CBC
  LEA opge,A0
 BRA.w JL_0_9CCA

JL_0_9CBC:  CMP.w #$3C,D0
   BNE.w JL_0_9C96
JL_0_9CC4:  LEA AL_0_E63A,A0
JL_0_9CCA:  MOVE.w $1E(A0),D1
 RTS

writecode:
 ;CLR.b iniffcommand
  MOVE.w d2,d1
  SUBQ.w #1,D1
   BMI.w JL_0_8520
  LSL.w #2,D1
  MOVE.l $2(A0,D1.W),D1
   BEQ.w JL_0_8520
  MOVEA.l D1,A0
L_0_9CE4: JMP (A0)

;JL_0_9CE6:  MOVEA.l AL_0_9D10(PC),A1
  ;MOVE.l A0,(A1)+
  ;MOVE.w D1,(A1)+
  ;MOVE.l A1,AL_0_9D10
 ;RTS

JL_0_9CF6:  MOVEA.l AL_0_9D10(PC),A1
  CMPA.l #AJL_0_9E94,A1
   BCC.w JL_0_8078
  MOVE.w -(A1),D1
  MOVEA.l -(A1),A0
  MOVE.l A1,AL_0_9D10
 RTS

AL_0_9D10: Dc.l AL_0_9D14
AL_0_9D14:  Ds.l 63
  Ds.l 33
AJL_0_9E94:  SEQ D0
L_0_9E96:  SNE D0
L_0_9E98:  SLT D0
L_0_9E9A:  SLE D0
L_0_9E9C:  SGT D0
L_0_9E9E:  SGE D0
L_0_9EA0:  CMP.b D0,D0
L_0_9EA2:  CMP.w D0,D0
L_0_9EA4:  CMP.l D0,D0
AL_0_9EA6:  MOVE.w L_0_9EA0(PC),D1
 BRA.w JL_0_A034                   ;writecompare

AJL_0_9EAE:  MOVE.w L_0_9EA0(PC),D1
 BRA.w JL_0_A040

AJL_0_9EB6:  MOVE.w L_0_9EA0(PC),D1
 BRA.w JL_0_A04C

AJL_0_9EBE:  MOVE.w L_0_9EA0(PC),D1
 BRA.w JL_0_A058

AJL_0_9EC6:  MOVE.w L_0_9EA0(PC),D1
 BRA.w JL_0_A064

AJL_0_9ECE:
dogeb MOVE.w L_0_9EA0(PC),D1
 BRA.w JL_0_A070

AJL_0_9ED6:

 MOVE.w L_0_9EA2(PC),D1
 BRA.w JL_0_A034

AJL_0_9EDE:  MOVE.w L_0_9EA2(PC),D1
 BRA.w JL_0_A040

AJL_0_9EE6:  MOVE.w L_0_9EA2(PC),D1
 BRA.w JL_0_A04C

AJL_0_9EEE:  MOVE.w L_0_9EA2(PC),D1
 BRA.w JL_0_A058

AJL_0_9EF6:  MOVE.w L_0_9EA2(PC),D1
 BRA.w JL_0_A064

AJL_0_9EFE:
dogew  MOVE.w L_0_9EA2(PC),D1
 BRA.w JL_0_A070

AJL_0_9F06:  MOVE.w L_0_9EA4(PC),D1 ;writecomparelong
 BRA JL_0_A034
AJL_0_9F0E:  MOVE.w L_0_9EA4(PC),D1
 BRA JL_0_A040
AJL_0_9F16:  MOVE.w L_0_9EA4(PC),D1
 BRA.w JL_0_A04C

AJL_0_9F1E:  MOVE.w L_0_9EA4(PC),D1
 BRA.w JL_0_A058

AJL_0_9F26:  MOVE.w L_0_9EA4(PC),D1
 BRA.w JL_0_A064

AJL_0_9F2E:  MOVE.w L_0_9EA4(PC),D1
 BRA.w JL_0_A070

AL_0_9F36:   Ds.w 1
JL_0_9F38:  MOVE.w D1,AL_0_2A5C
   BSR.w JL_0_AD40
  MOVE.l D4,D1
   BSR.w JL_0_AD38
  MOVE.w #$C900,D1
   BSR.w Atokejsr
   BSR.w JL_0_A352
  MOVE.l AL_0_2A5A,D1
   BSR.w writelong
  MOVE.w regnum,AL_0_9F36
  CLR.w regnum
 RTS

JL_0_9F70:  MOVE.w AL_0_9F36,regnum
   BSR.w JL_0_A36E
  MOVE.l D5,D1
 BRA.w JL_0_AD38

AJL_0_9F84:  MOVEQ.l #-$2A,D1
   TST.b fpu
   BEQ 'nofpu
   MOVEQ #0,d1
   MOVE.w regnum,d1
   MOVE.l d1,d2
   ASL.l #7,d1
   ADDQ  #1,d2
   ASL.l #8,d2
   ASL.l #2,d2
   OR.l d2,d1
   OR.l #$f2000038,d1
   JSR writelong
   MOVE.w #$f240,d1
   OR.w regnum,d1
   BSR writeword
   MOVEQ.l #1,d2
   MOVE.w #1,d1                 ;fpu comp fseq
   BSR writeword
   RTS
'nofpu   BSR.w JL_0_9F38
   BSR.w JL_0_A038
 BRA.w JL_0_9F70

AJL_0_9F92:  MOVEQ.l #-$2A,D1
  TST.b fpu
   BEQ 'nofpu
   MOVEQ #0,d1
   MOVE.w regnum,d1
   MOVE.l d1,d2
   ASL.l #7,d1
   ADDQ  #1,d2
   ASL.l #8,d2
   ASL.l #2,d2
   OR.l d2,d1
   OR.l #$f2000038,d1
   JSR writelong
   MOVE.w #$f240,d1
   OR.w regnum,d1
   BSR writeword
   MOVE.l #1,d2
   MOVE.w #$e,d1                 ;fpu comp fsne
   BSR writeword
   RTS
'nofpu

   BSR.w JL_0_9F38
   BSR.w JL_0_A044
 BRA.w JL_0_9F70

AJL_0_9FA0:  MOVEQ.l #-$2A,D1
    TST.b fpu
   BEQ 'nofpu
   MOVEQ #0,d1
   MOVE.w regnum,d1
   MOVE.l d1,d2
   ASL.l #7,d1
   ADDQ  #1,d2
   ASL.l #8,d2
   ASL.l #2,d2
   OR.l d2,d1
   OR.l #$f2000038,d1
   JSR writelong
   MOVE.w #$f240,d1
   OR.w regnum,d1
   BSR writeword
   MOVE.l #$1,d2
   MOVE.w #$14,d1                 ;fpu comp fslt
   BSR writeword
   RTS
'nofpu

   BSR.w JL_0_9F38
   BSR.w JL_0_A050
 BRA.w JL_0_9F70

AJL_0_9FAE:  MOVEQ.l #-$2A,D1
  TST.b fpu
   BEQ 'nofpu
   MOVEQ #0,d1
   MOVE.w regnum,d1
   MOVE.l d1,d2
   ASL.l #7,d1
   ADDQ  #1,d2
   ASL.l #8,d2
   ASL.l #2,d2
   OR.l d2,d1
   OR.l #$f2000038,d1
   JSR writelong
   MOVE.w #$f240,d1
   OR.w regnum,d1
   BSR writeword
   MOVE.l #1,d2
   MOVE.w #$15,d1                 ;fpu comp fsle
   BSR writeword
   RTS
'nofpu
   BSR.w JL_0_9F38
   BSR.w JL_0_A05C
 BRA.w JL_0_9F70

AJL_0_9FBC:  MOVEQ.l #-$2A,D1
   TST.b fpu
   BEQ 'nofpu
    MOVEQ #0,d1
   MOVE.w regnum,d1
   MOVE.l d1,d2
   ASL.l #7,d1
   ADDQ  #1,d2
   ASL.l #8,d2
   ASL.l #2,d2
   OR.l d2,d1
   OR.l #$f2000038,d1
   JSR writelong
   MOVE.w #$f240,d1
   OR.w regnum,d1
   BSR writeword
   MOVE.l #1,d2
   MOVE.w #$12,d1                 ;fpu comp fsgt
   BSR writeword
   RTS
'nofpu

   BSR.w JL_0_9F38
   BSR.w JL_0_A068
 BRA.w JL_0_9F70

AJL_0_9FCA:  MOVEQ.l #-$2A,D1
 TST.b fpu
   BEQ 'nofpu
   MOVEQ #0,d1
   MOVE.w regnum,d1
   MOVE.l d1,d2
   ASL.l #7,d1
   ADDQ  #1,d2
   ASL.l #8,d2
   ASL.l #2,d2
   OR.l d2,d1
   OR.l #$f2000038,d1
   JSR writelong
   MOVE.w #$f240,d1
   OR.w regnum,d1
   BSR writeword
   MOVE.l #1,d2
   MOVE.w #$13,d1                 ;fpu comp fsge
   BSR writeword
   RTS
'nofpu

   BSR.w JL_0_9F38
   BSR.w JL_0_A074
 BRA.w JL_0_9F70

AJL_0_9FD8:  MOVE.l #$CE00,D1
   MOVE.l d1,lastinstruction
   BSR.w Atokejsr
 BRA.w JL_0_A038

AJL_0_9FE4:  MOVE.l #$CE00,D1
   MOVE.l d1,lastinstruction
   BSR.w Atokejsr
 BRA.w JL_0_A044

AJL_0_9FF0:  MOVE.l #$CE00,D1
   MOVE.l d1,lastinstruction
   BSR.w Atokejsr
 BRA.w JL_0_A050

AJL_0_9FFC:  MOVE.l #$CE00,D1
   MOVE.l d1,lastinstruction
   BSR.w Atokejsr
 BRA.w JL_0_A05C

AJL_0_A008:  MOVE.l #$CE00,D1
   MOVE.l d1,lastinstruction
   BSR.w Atokejsr
 BRA.w JL_0_A068

AJL_0_A014:  MOVE.l #$CE00,D1
   MOVE.l d1,lastinstruction
   BSR.w Atokejsr
 BRA.w JL_0_A074

JL_0_A020:
  TST.b fast  ;compare
  BEQ 'l100
  CNIF #optibreak
   ILLEGAL
   CEND

  MOVE.l destpointer,a0
  SUB.l imm_addr,a0
  CMP.l #6,a0
  BNE 'l11
  MOVE.l imm_addr,a0
  CMP.w #$223c,imm_addr
  BNE 'l100
  ADD.w #$8e80,-6(a4)
'l2b  CLR.l imm_addr
 RTS
'l11
 CMP.l #4,a0
 BNE 'l10
 CMP.b #2,d3
 BNE 'l11b
 ADD.w #$7e40,-4(a4)
 RTS
'l11b
 ADD.w #$7e00,-4(a4)
 RTS
'l10
    MOVE.l destpointer,a0
   SUB.l load_var_addr,a0
   CMP.w #4,a0
   BNE 'l100
   CMP.b #3,d3
   BCS 'lv1
   CLR.l load_var_addr
   ADD.w #$9080-$200,-4(a4)
   RTS
'lv1 CMP.b #2,d3
   BNE 'l100
   CLR.l load_var_addr
   ADD.w #$8040-$200,-4(a4)
   RTS
'l100  MOVE.w regnum,D3
  OR.w D3,D1
  LSL.w #8,D3
  LSL.w #1,D3
  OR.w D3,D1
  ADDQ.w #1,D1
 BRA.w writeword

JL_0_A034:   BSR.w JL_0_A020
JL_0_A038:  MOVE.w AJL_0_9E94(PC),D1
 BRA.w JL_0_A078

JL_0_A040:   BSR.w JL_0_A020
JL_0_A044:  MOVE.w L_0_9E96(PC),D1
 BRA.w JL_0_A078

JL_0_A04C:   BSR.w JL_0_A020
JL_0_A050:  MOVE.w L_0_9E98(PC),D1
 BRA.w JL_0_A078

JL_0_A058:   BSR.w JL_0_A020
JL_0_A05C:  MOVE.w L_0_9E9A(PC),D1
 BRA.w JL_0_A078

JL_0_A064:   BSR.w JL_0_A020
JL_0_A068:  MOVE.w L_0_9E9C(PC),D1
 BRA.w JL_0_A078

JL_0_A070:   BSR.w JL_0_A020
JL_0_A074:  MOVE.w L_0_9E9E(PC),D1
JL_0_A078:  OR.w regnum,D1
   CMP.w #5,d2
   BNE 'nod0
   CMP.w #5,d3
   BNE 'nod0
   MOVE.l d1,-(a7)
   MOVE.l #$44004a00,d1             ;68k neg.b:tst.b
   BSR writelong
   MOVE.l (a7)+,d1
'nod0   BSR.w writeword            ;writeseq
   MOVEQ.l #1,d2
   MOVE.l lasttoken,d1
    TST.b fast
    BEQ.s 'l11
   CMP.l #$800b,d1
   BEQ 'l10
'l11
  MOVE.w #$4880,D1
  OR.w regnum,D1
   BSR.w writeword            ;writeext.w
  MOVEQ.l #$02,D2
'l10 RTS

AJL_0_A090:  MOVE.w #$D040,D1
  MOVEQ.l #$02,D2             ;writeaddword
 BRA.w JL_0_A0AC

AJL_0_A09A:  MOVE.w #$D040,D1
  MOVEQ.l #$03,D2
   BSR.w JL_0_A0AC
 BRA.w AJL_0_95CE

AJL_0_A0A8:
  MOVE.w #$D080,D1             ;writeaddlong
JL_0_A0AC:
  MOVE.w d1,a1
  TST.b fast
  BEQ 'l10
  CNIF #optibreak
   ILLEGAL
   CEND
  ASR.w #8,d1
  CMP.b #$90,d1
  BEQ sub1
  CMP.b #$d0,d1
  BNE 'l10
  CMP.b #3,d3
  BCS 'lq10
  TST.b quickadd
  ;BNE 'lq1                        ;????????????activate
'lq10   MOVE.l destpointer,a0
   CLR.b quickadd
          CLR.l load_var_addr
   SUB.l imm_addr,a0
   CMP.w #6,a0
   BEQ 'li10
   CMP.w #4,a0
   BNE.s 'li1
   CLR.l imm_addr
   ADD.w #$a040-$200,-4(a4)
   RTS
'lq1 MOVE.l a4,a0
    SUB.l load_var_addr,a0
    CMP.l #$a,a0
    BNE 'l10e
   CLR.l load_var_addr
   MOVE.w -$8(a4),d1
   MOVE.l -$4(a4),-$8(a4)
   MOVE.w d1,-$4(a4)
   SUB.w #$1980,-$a(a4)
   SUBQ.l #2,destpointer
   RTS
'l10e CLR.b quickadd
  BRA 'l10
'li10
   CLR.l imm_addr
   TST.l -4(a4)                    ;skip If ADD.l #0,dx
   BNE 'doit
   SUBQ.l #6,destpointer
   RTS
'doit   ADD.w #$b080-$200,-6(a4)
   RTS
'li1
   MOVE.l destpointer,a0
   SUB.l load_var_addr,a0
   CMP.w #4,a0
   BNE 'l10
   CMP.b #3,d3
   BNE 'lv1
   CLR.l load_var_addr
   ADD.w #$b080-$200,-4(a4)
   RTS
'lv1 CMP.b #2,d3
   BNE 'l10
   CLR.l load_var_addr
   ADD.w #$a040-$200,-4(a4)
   RTS
'l10
  MOVE.w regnum,D3
  MOVE.w a1,d1
  OR.w D3,D1
  ADDQ.w #1,D1
  LSL.w #8,D3
  LSL.w #1,D3
  OR.w D3,D1
 BRA.w writeword
sub1
   CMP.b #3,d3
   BCS 'lq10
   TST.b quickadd
   ;BNE 'lqs1
'lq10   MOVE.l destpointer,a0
   CLR.b quickadd
          CLR.l load_var_addr
   SUB.l imm_addr,a0
   CMP.w #6,a0
   BEQ 'li10
   CMP.w #4,a0
   BNE.s 'li1
   CLR.l imm_addr
   ADD.w #$6040-$200,-4(a4)
   RTS
'lqs1
   MOVE.l a4,a0
    SUB.l load_var_addr,a0
    CMP.l #$a,a0
    BNE 'l10e
   CLR.l load_var_addr
   MOVE.w -$8(a4),d1
   MOVE.l -$4(a4),-$8(a4)
   MOVE.w d1,-$4(a4)
   SUB.w #$1b80,-$a(a4)
   SUBQ.l #2,destpointer
   RTS
'l10e CLR.b quickadd
  BRA 'l10
'li10
   CLR.l imm_addr
   ADD.w #$7080-$200,-6(a4)
   RTS
'li1
   MOVE.l destpointer,a0
   SUB.l load_var_addr,a0
   CMP.w #4,a0
   BNE 'l10
   CMP.b #3,d3
   BNE 'lv1
   CLR.l load_var_addr
   ADD.w #$7080-$200,-4(a4)
   RTS
'lv1 CMP.b #2,d3
    BNE 'l10
    CLR.l load_var_addr
    ADD.w #$6040-$200,-4(a4)
    RTS
'l10 MOVE.w regnum,D3
  MOVE.w a1,d1
  OR.w D3,D1
  ADDQ.w #1,D1
  LSL.w #8,D3
  LSL.w #1,D3
  OR.w D3,D1
 BRA.w writeword
fadd1
   MOVEQ #0,d0

 MOVE.w regnum,d0
 ADDQ #1,d0
 ASL.w #8,d0
 ASL.w #2,d0
 MOVE.l #$f2000022,d1             ;fpu add
 OR.l d0,d1
 MOVE.w regnum,d0
 ASL.w #7,d0
 OR.l d0,d1
 BRA.w writelong
AJL_0_A0C0:
      TST.b iee
    BNE fadd1
    MOVE.w #$FFBE,D1   ;floatadd
JL_0_A0C4:  MOVE.w D1,AL_0_2A5C
   BSR.w JL_0_AD40
  MOVE.l D4,D1
   BSR.w JL_0_AD38
  MOVE.w #$C900,D1
   BSR.w Atokejsr
   BSR.w JL_0_A352
  MOVE.l AL_0_2A5A,D1
   BSR.w writelong
   BSR.w JL_0_A36E
  MOVE.l D5,D1
 BRA.w JL_0_AD38

AJL_0_A0F4:  MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  MOVE.w D1,-(A7)
  CMP.w #3072,d1
  BEQ 'l1
  OR.w AL_0_2A8A,D1             ;move.l (a7)+,d0
  BRA 'l2
'l1  MOVE.w #$588f,d1               ;addq.l #4,a7

'l2  BSR.w writeword
  MOVE.w (A7)+,D1
  OR.w AL_0_2A8C,D1              ;native string add.l d0,(a7)
 BRA.w writeword

AJL_0_A116:  MOVE.w #$9040,D1
 BRA.w JL_0_A0AC

AJL_0_A11E:  MOVE.w #$9040,D1
 BRA.w JL_0_A0AC

AJL_0_A126:
 MOVE.w #$9080,D1
 BRA.w JL_0_A0AC

AJL_0_A12E:
   TST.b iee
    BNE fs1
 MOVE.w #$FFB8,D1    ;floatsub

 BRA.w JL_0_A0C4
fs1                   ;fpu sub
   MOVEQ #0,d0

 MOVE.w regnum,d0
 ADDQ #1,d0
 ASL.w #8,d0
 ASL.w #2,d0
 MOVE.l #$f2000028,d1
 OR.l d0,d1
 MOVE.w regnum,d0
 ASL.w #7,d0
 OR.l d0,d1
 BRA.w writelong
AJL_0_A136:  MOVE.w #$C1C0,D1
  MOVEQ.l #$02,D2
 BRA.w JL_0_A0AC

AJL_0_A140:  MOVE.w #$C1C0,D1
  MOVEQ.l #$03,D2
 BRA.w JL_0_A0AC

AJL_0_A14A:
MOVE.w #$CA00,D1      ;quickmul
 BRA.w JL_0_A156
AJL_0_A152:
 TST.b fast
 BNE.s 'l10
 MOVE.w #$CA01,D1                 ;writelongmul
 BRA.w JL_0_A156
'l10 ;bsr.w JL_0_AD40
mull  ;move.l D4,D1
   ;bsr.w JL_0_AD38
   ;bsr.w JL_0_A352
   MOVE.l destpointer,a0
   SUB.l imm_addr,a0
   CMP.w #6,a0
   BNE 'li1
   MOVEQ.l #2,d1
   MOVEQ #1,d3
'ag CMP.l -4(a4),d1
   BEQ 'oklsl
    LSL.l #1,d1
    ADD.l #1,d3
    CMP.l #9,d3
    BNE 'ag
   MOVE.w -2(a4),d1
   BSR writeword
   MOVE.w -6(a4),-4(a4)
   MOVE.l #$4c3c0800,-8(a4)
   MOVE.w regnum,D3
   MULS #$1000,D3
   OR.w D3,-6(a4)
   CLR.l load_var_addr
   CLR.l imm_addr
   BRA 'li3
'oklsl
   CMP.w #8,d3
   BEQ 'ok
   ASL.l #1,d3
   ASL.l #8,d3
   MOVE.w #$e188,d1
   OR.w d3,d1
   MOVE.w d1,-6(a4)
   BRA 'okls
'ok MOVE.w #$e188,-6(a4)    ;lsl.l #,dx
'okls MOVE.w regnum,d3
   OR.b d3,-5(a4)
   SUBQ.l #4,destpointer
   CLR.l load_var_addr
   CLR.l imm_addr
   BRA 'li3
'li1
   MOVE.l destpointer,a0
   SUB.l load_var_addr,a0
   CMP.w #4,a0
   BNE 'li2
   MOVE.w -2(a4),d1
   BSR writeword
   MOVE.b #$4c,-6(a4)
   MOVE.w #$0800,-4(a4)
   MOVE.w regnum,D3
   MULS #$1000,d3
   OR.w D3,-4(a4)
   BRA 'li3
'li2   MOVE.l #$4c010800,d1
   MOVE.w regnum,D3
   EXT.l d3
   MULS #$1000,d3
   OR.w D3,d1
   MULS #$10,d3
   ADD.l d3,d1
   BSR writelong
'li3

  ;bsr.w JL_0_A36E
  ;move.l D5,D1
  RTS
JL_0_A156:  MOVE.w D1,-(A7)
   BSR.w JL_0_AD40
  MOVE.l D4,D1
   BSR.w JL_0_AD38
   BSR.w JL_0_A352
  MOVEQ #0,d1
  MOVE.w (A7)+,D1
  MOVE.l d1,lastinstruction
   BSR.w Atokejsr
   BSR.w JL_0_A36E
  MOVE.l D5,D1
 BRA.w JL_0_AD38

AJL_0_A176:
   TST.b iee
    BNE fm1
 MOVE.w #$FFB2,D1 ;floatmul
 BRA.w JL_0_A0C4
fm1                         ;fpu mul
   MOVEQ #0,d0

 MOVE.w regnum,d0
 ADDQ #1,d0
 ASL.w #8,d0
 ASL.w #2,d0
 MOVE.l #$f2000023,d1
 OR.l d0,d1
 MOVE.w regnum,d0
 ASL.w #7,d0
 OR.l d0,d1
 BRA.w writelong
AJL_0_A17E:  MOVE.w D2,-(A7)     ;dopow
  MOVE.w D2,D3
  MOVEQ.l #$05,D2
   BSR.w JL_0_9770
  ADDQ.w #1,regnum
  MOVE.w (A7)+,D3
  MOVEQ.l #$05,D2
   BSR.w writeconvertcode
  SUBQ.w #1,regnum
   BSR.w JL_0_A1A8
   TST.b fpu
   BEQ 'old
   MOVEQ #0,d1
   MOVE.w regnum,d1
  MOVE.l d1,d0
  ASL.w #7,d1
  ASL.w #8,d0
  ASL.w #2,d0
  OR.w d0,d1
  MOVE.l d1,-(a7)
   ;OR.l #$f2000014,d1      ;flogn.x fp0                      ;fpu ^ pow
   OR.l #$f2000016,d1      ;flog2.x fp0                      ;fpu ^ pow
   BSR writelong
   MOVE.w regnum,d0
 ADDQ #1,d0
 ASL.w #8,d0
 ASL.w #2,d0
 MOVE.l #$f2000023,d1
 OR.l d0,d1
 MOVE.w regnum,d0
 ASL.w #7,d0
 OR.l d0,d1
   OR.l #$f2000023,d1    ;fmulx.x fp1,fp0
   BSR writelong
   MOVE.l (a7)+,d1
   ;OR.l #$f2000010,d1    ;fetox.x fp0
   OR.l #$f2000011,d1    ;ftwotox.x fp0
   BSR writelong
   RTS
'old  MOVE.w #$6001,D1
 BRA.w JL_0_A156

JL_0_A1A8:  MOVEA.l AL_0_A6B0(PC),A0
  MOVE.w #$FFFF,-(A0)
 RTS

AJL_0_A1B2:  MOVE.w #$D400,D1
 BRA.w JL_0_A156

AJL_0_A1BA:  MOVE.w #$D401,D1
 BRA.w JL_0_A156

AJL_0_A1C2:   BSR.w JL_0_A1A8
  MOVE.w #$D402,D1
 BRA.w JL_0_A156

AJL_0_A1CE:  MOVE.w #$D403,D1
  MOVEQ.l #$02,D2
 BRA.w JL_0_A156

AJL_0_A1D8:   BSR.w JL_0_A1A8      ;domod float
  TST.b fpu
  BEQ 'old
  MOVEQ #0,d1
  MOVE.w regnum,d1                                 ;fpu mod
  MOVE.l d1,d0
  ADDQ.l #1,d1
  ASL.l #7,d0
  ASL.l #8,d1
  ASL.l #2,d1
  OR.l d0,d1
  MOVE.l d0,-(a7)
  OR.l #$f2000021,d1
  BSR writelong
  MOVE.l (a7)+,d0
  RTS
'old  MOVE.w #$D404,D1
  MOVEQ.l #$03,D2
 BRA.w JL_0_A156

AJL_0_A1E6:  MOVE.w #$48C0,D1
  OR.w regnum,D1
   BSR.w writeword
  ADDQ.w #1,D1
   BSR.w writeword
AL_0_A1FA:  MOVE.w #$48C0,D1
  OR.w regnum,D1
   BSR.w writeword
  MOVE.w #$81C0,D1
 BRA.w JL_0_A0AC

AJL_0_A210:        ;longdiv
 TST.b fast
 BNE.s 'l10
 MOVE.w #$CB01,D1
 BRA.w JL_0_A156
'l10 CNIF #optibreak
   ILLEGAL
   CEND

BSR.w JL_0_AD40

  MOVE.l D4,D1
   BSR.w JL_0_AD38
   BSR.w JL_0_A352
;   MOVE.l destpointer,a4
;   MOVEQ.l #2,d1               ;have problem on negative float
;   MOVE.l d3,-(a7)             ;-18/8 =-3 should be -2
;   MOVEQ #1,d3
;   'ag CMP.l -4(a4),d1
;       BEQ 'oklsr
;       LSL.l #1,d1
;       ADD.l #1,d3
;       CMP.l #9,d3
;       BNE 'ag
;   MOVE.l (a7)+,d3
   MOVE.l #$4c410800,d1
   BSR writelong
'weit MOVE.w #$4e71,d1
   ;bsr writeword
   BSR.w JL_0_A36E
  MOVE.l D5,D1
 BRA.w JL_0_AD38
'oklsr
    CMP.w #8,d3
    BEQ 'ok
    ASL.l #1,d3
    ASL.l #8,d3
    MOVE.w #$e080,d1
    OR.w d3,d1
    BRA 'oklsr2
 'ok MOVE.w #$e080,d1    ;lsr.l #,dx
 'oklsr2
     SUBQ.l #6,destpointer
     BSR writeword
     MOVE.l (a7)+,d3
     MOVEQ #0,d1
     CLR.l load_var_addr
     CLR.l imm_addr
 BRA JL_0_AD38
AJL_0_A218:  MOVE.w #$CB00,D1   ;quickdiv
 BRA.w JL_0_A156

AJL_0_A220:
   TST.b iee
    BNE fdiv1

 MOVE.w #$FFAC,D1 ;floatdiv
 BRA.w JL_0_A0C4
fdiv1
   MOVEQ #0,d0

 MOVE.w regnum,d0
 ADDQ #1,d0
 ASL.w #8,d0
 ASL.w #2,d0
MOVE.l #$f2000020,d1            ;fpu div
 OR.l d0,d1
 MOVE.w regnum,d0
 ASL.w #7,d0
 OR.l d0,d1
 BRA.w writelong

AJL_0_A228:  MOVE.w #$C000,D1
 BRA.w JL_0_A0AC

AJL_0_A230:  MOVE.w #$C040,D1
 BRA.w JL_0_A0AC

AJL_0_A238:  MOVE.w #$C080,D1
 BRA.w JL_0_A0AC

AJL_0_A240:  MOVE.w #$8000,D1
 BRA.w JL_0_A0AC

AJL_0_A248:  MOVE.w #$8040,D1
 BRA.w JL_0_A0AC

AJL_0_A250:  MOVE.w #$8080,D1
 BRA.w JL_0_A0AC

AJL_0_A258:  MOVE.w #$B100,D1
JL_0_A25C:  MOVE.w regnum,D3
  OR.w D3,D1
  ADDQ.w #1,D3
  LSL.w #8,D3
  LSL.w #1,D3
  OR.w D3,D1
 BRA.w writeword

AJL_0_A270:  MOVE.w #$B140,D1
 BRA.w JL_0_A25C

AJL_0_A278:  MOVE.w #$B180,D1
 BRA.w JL_0_A25C

AJL_0_A280:  MOVE.w #$E1A8,D1
 BRA.w JL_0_A298

AJL_0_A288:  MOVE.w #$E0A8,D1
 BRA.w JL_0_A298

AJL_0_A290:  MOVE.w #$E0A0,D1
 BRA.w JL_0_A298

JL_0_A298:  MOVE.w D1,-(A7)
  ADDQ.w #1,regnum
  MOVE.w D2,-(A7)
  MOVE.w D2,D3
  MOVEQ.l #$02,D2
'l1  BSR.w writeconvertcode
  MOVE.w (A7)+,D2
  SUBQ.w #1,regnum
  CMP.w #$4,D2
   BEQ.w JL_0_A2C2
  MOVE.w D2,D3
  MOVEQ.l #$03,D2
   BSR.w JL_0_9770
JL_0_A2C2:  MOVE.w (A7)+,D1
  MOVE.w regnum,D3
  OR.w D3,D1
  ADDQ.w #1,D3
  LSL.w #8,D3
  LSL.w #1,D3
  OR.w D3,D1
 BRA.w writeword

_BitTst:  MOVE.w #$0100,D1
   BSR.w JL_0_A31C
  MOVE.w regnum,D1
  ORI.w #$56C0,D1
   BSR.w writeword
  MOVE.w regnum,D1
  ORI.w #$4880,D1
   BSR.w writeword
  MOVEQ.l #$02,D2
 RTS

_BitSet:  MOVE.w #$01C0,D1
JL_0_A304:   BSR.w JL_0_A31C
  MOVEQ.l #$03,D2
 RTS

_BitClr:  MOVE.w #$0180,D1
 BRA.w JL_0_A304

_BitChg:  MOVE.w #$0140,D1
 BRA.w JL_0_A304

JL_0_A31C:  MOVE.w D1,-(A7)
  MOVE.w D2,-(A7)
  MOVE.w D2,D3
  MOVEQ.l #$03,D2
   BSR.w JL_0_9770
  MOVE.w (A7)+,D3
  MOVEQ.l #$01,D2
  ADDQ.w #1,regnum
   BSR.w writeconvertcode
  SUBQ.w #1,regnum
  MOVE.w regnum,D1
  MOVE.w D1,D2
  ADDQ.w #1,D2
  LSL.w #8,D2
  LSL.w #1,D2
  OR.w (A7)+,D1
  OR.w D2,D1
 BRA.w writeword

JL_0_A352:  MOVE.w regnum,D1
   BEQ.w JL_0_A36C
  ORI.w #$2000,D1
   BSR.w writeword
  ADDI.w #$201,D1
   BSR.w writeword
JL_0_A36C: RTS

JL_0_A36E:  MOVE.w regnum,D1
   BEQ.w JL_0_A384
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$2000,D1
   BSR.w writeword
JL_0_A384: RTS

JL_0_A386:
   CMPI.w #$7,regnum
   BCS.w JL_0_A6B4
  MOVE.l #$f2277700,d1      ;fmove.d fp6,-(a7)
  BSR writelong
  MOVE.w #$2F06,D1          ;d6 to stack
  ;MOVE.w #$3F06,D1          ;d6 to stack
  CMP.w #$3,D2
   BCS.w JL_0_A3A2
  MOVE.w #$2F06,D1
JL_0_A3A2:   BSR.w writeword

  MOVE.w D1,-(A7)
  SUBQ.w #1,regnum
   BSR.w JL_0_A6B4
  ADDQ.w #1,regnum
  MOVE.l #$f2001b80,d1
  BSR writelong
  MOVE.w #$3E06,D1
  CMP.w #$3,D2
   BCS.w JL_0_A3C8
  MOVE.w #$2E06,D1
JL_0_A3C8:   BSR.w writeword
  MOVE.w (A7)+,D1
  ANDI.w #$F000,D1
  ORI.w #$C1F,D1
  JSR writeword

  MOVE.l #$f21f5700,d1      ;fmove.d (a7)+,fp6
  BRA writelong

JL_0_A3DA:   BSR.w JL_0_A6B4
  MOVE.w #$4440,D1
  CMP.w #$3,D2
   BCS.w JL_0_A406
  MOVE.w #$4480,D1
  CMP.w #$5,D2
   BCS.w JL_0_A406
  CMP.w #$6,D2
   BCC.w JL_0_8520
  MOVE.w #$FFC4,D1
 BRA.w JL_0_9604

JL_0_A406:  OR.w regnum,D1   ;negate
 CLR.l imm_addr
 BRA.w writeword
JL_0_A410:   BSR.w JL_0_9AE2
  CMP.w #$29,D0
   BEQ.w JL_0_A424
  CMP.w #$7D,D0
   BNE.w brackets_                 ;syntax error brackets
JL_0_A424: BRA.w get1bytemain

JL_0_A428:   BSR.w JL_0_9AE2
  CMP.w #$5,D2
   BCC.w JL_0_8520
  MOVE.w regnum,D1
  ORI.w #$4640,D1
  CMP.w #$3,D2
   BCS.w writeword
  EORI.w #$C0,D1
 BRA.w writeword

JL_0_A44E:  MOVEQ.l #$05,D2       ;fpu pi
   TST.b fpu
  BEQ 'old
  JMP fpupi
'old
  MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$203C,D1
   BSR.w writeword
  MOVE.l #$C90FDA42,D1
   BSR.w writelong
 BRA.w get1bytemain

AL_0_A470:   Ds.l 63
   Ds.l 63
   Ds.l 18
AL_0_A6B0: Dc.l AL_0_A470
JL_0_A6B4:   ;bsr.w get1bytemain
   !fget
   CMP.b #$7e,d0
   BNE 'noc
   SUBQ.l #1,a5
   BSR get1bytemain
'noc   CMP.b #"#",d0
   BNE 'ld1
   CMP.b #$22,(a5)
   BNE 'ld1
   JSR addimmi

'ld1 CMP.b #$22,d0
   BNE 'l11
   ;BTST #$d,vartype
   ;BNE 'ls1
   ;CMP.b #7,d2                                    ;long pointer string error
   ;BEQ 'ls1
   ;TST.b vartype+1
   ;BEQ 'ls1
   ;BRA error_convert_types
'ls1   NOT.w instringon
'l11   TST.b d0
   BPL 'l10
   LSL.w #8,d0
   MOVE.b (a5)+,d0
   MOVE.l d0,lasttoken
   MOVE.w d0,lastchar
'l10
  CMP.w #$28,D0
   BEQ.w JL_0_A410
  CMP.w #$7B,D0
   BEQ.w JL_0_A410
  CMP.w #$2D,D0
   BEQ.w JL_0_A3DA
  CMP.w #-$7F77,D0
   BEQ.w JL_0_A428
  MOVEA.l AL_0_A6B0(PC),A1
  CMPA.l #AL_0_A6B0,A1
   BCC.w JL_0_805C
  MOVE.l destpointer,(A1)+
  MOVE.l hunkoffsetbase,(A1)+
  MOVE.l AL_0_EC22,(A1)+
  MOVE.w AL_0_EC22,(A1)+
  CLR.w (A1)+
  CLR.w (A1)+
  MOVE.l A1,AL_0_A6B0
   ;bsr.w JL_0_8BB6
   !compare2
   BEQ.w JL_0_B224
  CMP.w #".",D0
   BEQ.w JL_0_B21E
  CMP.w #"#",D0
   BEQ.w get_constant
  CMP.w #"$",D0
   BEQ.w get_hexconstant
  CMP.w #"%",D0
   BEQ.w JL_0_A8C0
  CMP.w #-$7FD1,D0
   BEQ.w _SizeOf
  CMP.w #-$7F46,D0
   BEQ.w JL_0_A44E
  CMP.w #-$7F3B,D0
   BEQ.w JL_0_A83C
  CMP.w #-$7F3A,D0
   BEQ.w JL_0_A846
  MOVE.w AL_0_E91E,D1
   BEQ.w JL_0_A776
   !compare1;bsr.w JL_0_8B92
   BEQ.w JL_0_AF22
  CMP.w #$5F,D0
   BEQ.w JL_0_AF22
  CMP.w #$22,D0
   BEQ.w JL_0_AF00
 BRA.w syntaxerr

JL_0_A776:
  MOVE.w AL_0_E32E,D1
  BEQ.w JL_0_A784
BRA.w JL_0_8AC4
syntaxerropt4_b JMP syntaxerropt4

JL_0_A784:
  NOT.w -(A1)
  !compare1;bsr.w JL_0_8B92
   BEQ.w JL_0_AF4C
  CMP.w #$2A,D0
   BEQ.w JL_0_AF4C
  CMP.w #$5C,D0
   BEQ.w JL_0_AF4C
  CMP.w #$22,D0
   BEQ.w JL_0_ADC0
  BTST #$F,D0
   BNE.w JL_0_AAF2
  CMP.w #$26,D0
   BEQ.w JL_0_A90E
  CMP.w #$3F,D0
   BEQ.w JL_0_AED4
.atmode_iff
  CMP.b #"@",d0
   BNE syntaxerr
  TST.b newsyntax
   BEQ syntaxerropt4_b
  MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$203C,D1
  BSR.w writeword
  CMP.b #$22,(a5)
   BNE syntaxerr
  ADDQ #1,a5
  MOVEQ #0,d0
  CMP.b #1,d2
   BEQ 'l3b
  CMP.b #2,d2
   BEQ 'l2b
  CMP.b #4,d2
   BEQ error_convert_types
  MOVE.b (a5)+,d0
  BEQ syntaxerr
  CMP.b #$22,d0
  BNE 'l1
    MOVE.b #0,d0
    BRA 'do
 'l1
  ASL.l #8,d0
  MOVE.b (a5)+,d0
  BEQ syntaxerr
  CMP.b #$22,d0
  BNE 'l2
    MOVE.b #0,d0
    ASR.l #8,d0
    BRA 'do
 'l2
  ASL.l #8,d0
 'l2b
  MOVE.b (a5)+,d0
   BEQ syntaxerr
   CMP.b #$22,d0
   BNE 'l3
   MOVE.b #0,d0
   ASR.l #8,d0
   BRA 'do
'l3 ASL.l #8,d0
'l3b MOVE.b (a5)+,d0
   BEQ syntaxerr
   CMP.b #$22,d0
   BNE 'l4
   MOVE.b #0,d0
   ASR.l #8,d0
   BRA 'do
'l4
   CMP.b #$22,(a5)+
   BNE error4char_
'do MOVE.l d0,d1
    BSR writelong
    BSR get1bytemain
    RTS

_SizeOf:   BSR.w get1bytemain
  CMP.w #$2E,D0
   BEQ.b JL_0_A7F4
   ;bsr.w JL_0_7C44
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
  MOVE.w D2,-(A7)
   BSR.w getparameter2
   BEQ.w syntaxerr
  LEA varbase,A2
   BSR.w findvariable
   BNE.w JL_0_8440
  MOVE.w $4(A2),D3
  EXT.l D3
  MOVE.w (A7)+,D2
 BRA.w JL_0_B46E

JL_0_A7F4:  MOVE.w D2,-(A7)
   BSR.w getparameter2
   BEQ.w syntaxerr
  LEA newtypebase,A2
   BSR.w JL_0_8CBE
   BNE.w JL_0_8440
  MOVEQ.l #$00,D3
  CMP.w #$5C,D0
   BNE.w JL_0_A832
   BSR.w getparameter2
   BEQ.w syntaxerr
  LEA $4(A2),A2
   BSR.w findvariable2
   BNE.w JL_0_84D2
  MOVE.w $4(A2),D3
 BRA.w JL_0_A836

JL_0_A832:  MOVE.w $8(A2),D3
JL_0_A836:  MOVE.w (A7)+,D2
 BRA.w JL_0_B46E

JL_0_A83C:  MOVEQ.l #-$01,D3
   BSR.w get1bytemain
 BRA.w JL_0_B46E

JL_0_A846:  MOVEQ.l #$00,D3
   BSR.w get1bytemain
 BRA.w JL_0_B46E

ishex:  CMP.w #$30,D0
   BCS.w JL_0_A876
  CMP.w #$39,D0
   BLS.w JL_0_A874
  ANDI.w #$FFDF,D0
  CMP.w #$46,D0
   BHI.w JL_0_A876
  CMP.w #$41,D0
   BCS.w JL_0_A876
JL_0_A874:  CMP.w D0,D0
JL_0_A876: RTS

JL_0_A878:  CMP.w #$31,D0
   BEQ.w JL_0_A884
  CMP.w #$30,D0
JL_0_A884: RTS

get_hexbyte
   MOVEQ #0,d0
   MOVE.b (a5)+,d0
   MOVE.b (a5)+,d0
   BSR ishex
   BNE syntaxerr
   SUBI.w #$30,D0
   CMP.w #$9,D0
   BLS.w 'l1
   SUBQ.w #7,D0
'l1  MOVE.l d0,d1
MOVE.b (a5)+,d0
     BSR ishex
    BNE syntaxerr
    LSL.l #4,d1
    SUBI.w #$30,D0
   CMP.w #$9,D0
   BLS.w 'l2
   SUBQ.w #7,D0
'l2 ADD.l d1,d0
   RTS
get_hexconstant:   BSR.w get1bytemain
   BSR.w ishex
   BNE.w syntaxerr
  MOVEQ.l #$00,D3
  CMP.w #5,d2
  BNE JL_0_A894
  CMP.l #newtype_double,a2
  BEQ 'doit
  CMP.l #newtype_float,a2
  BNE JL_0_A894
'doit  fmove.s #0,fp0
JL_0_A894a:
  TST.b fpu
  BEQ JL_0_A894
  fmove.w #16,fp1
  fmul.x fp1,fp0
  SUBI.w #$30,D0
  CMP.w #$9,D0
   BLS.w JL_0_A8AEa
  SUBQ.w #7,D0
JL_0_A8AEa:
   fmove.w d0,fp1
   fadd.x fp1,fp0
   BSR.w get1bytemain
   BSR.w ishex
   BEQ.w JL_0_A894a
 BRA.w nofpregload

JL_0_A894:  CMP.l #$10000000,D3
   BCC.w JL_0_847C
  LSL.l #4,D3
  SUBI.w #$30,D0
  CMP.w #$9,D0
   BLS.w JL_0_A8AE
  SUBQ.w #7,D0
JL_0_A8AE:  OR.w D0,D3
   BSR.w get1bytemain
   BSR.w ishex
   BEQ.w JL_0_A894
 BRA.w JL_0_B46E

JL_0_A8C0:   BSR.w get1bytemain
   BSR.w JL_0_A878
   BNE.w syntaxerr
  MOVEQ.l #$00,D3
JL_0_A8CE:  LSL.l #1,D3
   BCS.w JL_0_847C
  SUBI.w #$30,D0
  OR.w D0,D3
   BSR.w get1bytemain
   BSR.w JL_0_A878
   BEQ.w JL_0_A8CE
 BRA.w JL_0_B46E

get_constant: MOVE.w d2,-(A7)
   MOVE.b #0,automode
   CMP.b #"@",(a5)
   BNE 'l1
   ADDQ.l #1,a5
   MOVE.b #1,automode
   BSR getparameter2
   BSR findlabel2
   BNE 'addit
   BRA errormsg_autocount
'addit
  BSR.w addlabelhash
  MOVE.l #$1,$4(A2)
  MOVEM.l a2/a5,-(a7)
  MOVE.w lastchar,-(a7)
  LEA autostorename,a5
  BSR getparameter2
  BSR findlabel2
  BEQ 'found
  BSR.w addlabelhash
  MOVE.l #$1,$4(A2)
  MOVE.l #0,8(a2)
'found
   MOVE.w (a7)+,d0
   MOVE.w d0,lastchar
  MOVE.l 8(a2),d3
  ADD.l #1,8(a2)
  MOVEM.l (a7)+,a2/a5
  MOVE.l d3,8(a2)
  MOVE.l $8(A2),D3
  BRA.l 'l3
'l1 BSR.w getparameter2
    TST.b incnif
    BEQ 'lc1
    BSR.w findlabel2
    BNE 'l5
    MOVEQ #1,d3
    MOVE.w (A7)+,D2
    BRA JL_0_B46E
'l5 MOVEQ #0,d3
    MOVE.w (A7)+,D2
    BRA JL_0_B46E
'lc1   BSR.w findlabel2
   BNE.w JL_0_8AAC
'l2  CMPI.l #$1,$4(A2)
   BNE.w JL_0_8AAC
'l3  MOVE.l $8(A2),D3
     MOVE.w (A7)+,D2
 BRA.w JL_0_B46E

JL_0_A90E:   CLR.w vartype
BSR.w JL_0_A916
  MOVEQ.l #$03,D2
 RTS

JL_0_A916:   BSR.w get1bytemain
   !compare2
   BEQ andop2
   BSR.w getparameter
   BSR.w JL_0_8E3C
   BSR.w JL_0_9122
  CMP.b #$7,D2
   BNE.w JL_0_A960
  BTST #$F,D2
   BNE.w JL_0_A94A
  MOVE.w D3,AL_0_29D6
  MOVE.l AL_0_29D4,D1
   BSR.w JL_0_94F6
 BRA.w JL_0_A978

JL_0_A94A:  MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  OR.w AL_0_29D2,D1
   BSR.w writeword
 RTS

JL_0_A960:  BTST #$F,D2
   BNE.w JL_0_A978
  MOVE.w D3,AL_0_29CA
  MOVE.l AL_0_29C8,D1
   BSR.w JL_0_94F6
JL_0_A978:  MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  OR.w AL_0_29CC,D1
 BRA.w writeword

JL_0_A98C:  MOVE.w #$D200,D1
   BSR.w Atokejsr
  MOVEQ.l #$03,D2
 RTS

L_0_A998:  Dc.b " m",0,0
  Dc.b $D0,$C0,$20 ;..
  Dc.b $8
JL_0_A9A0:   BSR.w get1bytemain
  MOVE.w D0,D1
   BPL.w syntaxerr
  MOVE.w D2,-(A7)
  BCLR #$F,D1
   BSR.w searchinstr
  MOVE.l $12(A2),D0
  TST.w -$2(A2,D0.L)
   BEQ.w JL_0_81C4
  MOVE.w (A7)+,D2
 RTS

JL_0_A9C4:  MOVE.l $0(A5),D0           ;usedcode
   BNE.b JL_0_A9CE
  MOVEQ.l #-$01,D0
   BRA.b JL_0_A9D4

JL_0_A9CE:  SUB.l $0(A5),D0
  LSR.w #8,D0
JL_0_A9D4:  MOVE.l $0(A5),D0
   BNE.b JL_0_A9DE
  MOVEQ.l #-$01,D0
   BRA.b JL_0_A9E6

JL_0_A9DE:  SUB.l $0(A5),D0           ;usedcode2
  LSR.w #8,D0
  LSR.w #8,D0
JL_0_A9E6:  MOVE.l D0,-(A7)
L_0_A9E8:  MOVE.l (A7)+,D0
L_0_A9EA:  MOVE.l D0,D0
JL_0_A9EC:   BSR.w JL_0_A9A0
  MOVE.w -$2(A2,D0.L),D3
  CMP.w #$9,D3
   BCC.w JL_0_AA1A
  LEA JL_0_A9C4(PC),A0
  LEA JL_0_A9D4(PC),A1
  ANDI.w #$F1FF,$E+4(A0)
  ANDI.w #$7,D3
  LSL.w #8,D3
  LSL.w #1,D3
  OR.w D3,$E+4(A0)
 BRA.w JL_0_AA32

JL_0_AA1A:  LEA JL_0_A9D4(PC),A0
  LEA JL_0_A9E6(PC),A1
  ANDI.w #$F1FF,$10+4(A0)
  SUBQ.w #8,D3
  LSL.w #8,D3
  LSL.w #1,D3
  OR.w D3,$10+4(A0)
JL_0_AA32:  MOVE.w -$6(A2,D0.L),D3
  MOVE.w D3,$C+4(A0)
  ADDQ.w #4,D3
  MOVE.w D3,$2(A0)
  MOVE.w regnum,D1
   BEQ.w JL_0_AA52
  MOVE.w JL_0_A9E6(PC),D1
   BSR.w writeword
JL_0_AA52:   BSR.w JL_0_95A2
  MOVE.w regnum,D1
   BEQ.w JL_0_AA74
  LSL.w #8,D1
  LSL.w #1,D1
  OR.w L_0_A9EA(PC),D1
   BSR.w writeword
  MOVE.w L_0_A9E8(PC),D1
   BSR.w writeword
JL_0_AA74:  MOVEQ.l #$02,D2
 BRA.w get1bytemain

JL_0_AA7A:   BSR.w JL_0_A9A0
  MOVEQ.l #$00,D3
  MOVE.w -$4(A2,D0.L),D3
   BSR.w get1bytemain
 BRA.w JL_0_B46E

JL_0_AA8C:   BSR.w get1bytemain
  MOVE.w D0,-(A7)
   BSR.w get1bytemain
  CMP.w #$28,D0
   BNE.w syntaxerr
  MOVE.w (A7)+,D0
   BSR.w JL_0_C340
   BSR.w JL_0_7C3A
  CMP.w #$29,D0
   BNE.w syntaxerr
  LEA L_0_A998(PC),A0
  LEA JL_0_A9A0(PC),A1
  MOVE.w -$6(A2),$2(A0)
  MOVE.w $4(A0),D1
  ANDI.w #$FFF8,D1
  OR.w regnum,D1
  MOVE.w D1,$4(A0)
  MOVE.w $6(A0),D1
  ANDI.w #$F1FF,D1
  MOVE.w regnum,D0
  LSL.w #8,D0
  LSL.w #1,D0
  OR.w D0,D1
  MOVE.w D1,$6(A0)
   BSR.w JL_0_95A2
  MOVEQ.l #$03,D2
 BRA.w get1bytemain

JL_0_AAF2:  CMP.w #-$7F4D,D0
   BHI.w JL_0_AAFE
 BRA.w syntaxerr

JL_0_AAFE:  CMP.w #-$7F4A,D0
   BEQ.w JL_0_A98C
  CMP.w #-$7F48,D0
   BEQ.w JL_0_AA8C
  CMP.w #-$7F3C,D0
   BEQ.w JL_0_AA7A
  CMP.w #-$7F2F,D0
   BEQ.w JL_0_A9EC
  MOVE.w D2,-(A7)
  MOVE.w D0,D1
  BCLR #$F,D1
  ;CLR.b quickpeek
   BSR.w searchinstr
  MOVE.w (A3),D1
  BTST #$1,D1
   BEQ.w noreturn_               ;syntax error noreturn
  BTST #$2,D1
   BNE.w JL_0_AC1A
  LSR.w #8,D1
  BTST #$3,$1(A3)
   BEQ.w JL_0_AB4C
   JSR AJL_0_498A
JL_0_AB4C:  MOVE.w D1,-(A7)     ;is library instruction
  CMP.w #$7,D1
   BNE.w JL_0_AB5E
  MOVE.l A2,-(A7)
   BSR.w JL_0_AD82
  MOVEA.l (A7)+,A2
JL_0_AB5E:   BSR.w JL_0_AFA2
  MOVE.w D3,-(A7)
   BSR.w get1bytemain
  MOVEQ.l #$00,D1
  CMP.w #$28,D0
   BNE.w JL_0_AB80
   BSR.w JL_0_66F6
  TST.w D1
   BEQ.w syntaxerr
 BRA.w JL_0_AB84

JL_0_AB80:   ;bsr.w JL_0_7C44
            MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
JL_0_AB84:  MOVE.w regnum,-(A7)
            MOVE.w regnum,regnumstore
     TST.b fpu
            BEQ 'nofloat
            CMP.w #$ffff,28(a3)
            BNE 'nofloat
            CMP.w #$3c01,34(a3)  ;val do nofpu stuff
            BEQ 'nofloat
            CMP.w #$3c02,34(a3)  ;int skip
            BEQ 'quick
            CMP.b #5,(a3)
            BNE 'nofloat
'quick
            CLR.l load_var_addr
            BRA 'isfpu
'nofloat  CLR.w regnum

'isfpu  MOVE.w D1,-(A7)
  BTST #$3,$1(A3)
   BEQ.w JL_0_ABB0
;   TST.b fast
;   BEQ 'l2
;   CMP.w #$ffff,24(a3)
;   BNE 'l2
;   CMP.w #$5a02,30(a3)           ;peek
;   BNE 'l2
;  MOVE.w $6(A7),D1
;  MOVE.w d1,peeksize
;  TST.b fpu
;  BEQ 'l2
;  CMP.w #5,d1                    ;is float on fpu
;  BNE 'l1
;  ;MOVE.b #1,quickpeek
;'l1
;  BRA 'l11
'l2 MOVE.w $6(A7),D1
  MOVE.w d1,peeksize
;  CMP.w #$5a02,30(a3)           ;peek
;  BNE 'l10
;  CMP.b #7,d1                   ;optimize dont work in peek.w(peek.w))
;  BEQ 'l10
;  TST.b fast
;  BEQ 'l10
;  BRA 'l11
'l10  ORI.w #$7000,D1
    BSR.w writeword            ;write peekmode
'l11
     ADDQ.w #1,regnum
  MOVE.w (A7),D1

JL_0_ABB0: MOVE.w 2(a7),tempregnum
JSR JL_0_4878
 TST.w (A7)+
   BEQ.w JL_0_ABC6
  CMP.w #$29,D0
   BNE.w syntaxerr
   BSR.w get1bytemain
JL_0_ABC6:  MOVE.w (A7)+,D1
  MOVE.w D1,regnum
   BEQ.w JL_0_ABDE
   CMP.w #$3c01,24(a2)           ;val skipped
   BNE 'noval
   TST.b fpu
   BEQ 'noval
   CLR.l load_var_addr
   MOVEQ #0,d1
   MOVE.w regnum,d1
   LSL.l #7,d1
   OR.l #$f2000000,d1
   BSR writelong
   BRA JL_0_ABDE
'noval CMP.w #$3c02,24(a2)           ;int skipped
   BEQ 'quick
   CMP.b #5,d2
   BNE 'nofpu
   TST.b fpu
   BEQ 'nofpu
   ;CLR.l load_var_addr
   ;BRA 'nofpu
'quick   CLR.l load_var_addr
   BRA JL_0_ABDE
'nofpu  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$2000,D1
  BSR.w writeword             ;write move.l d0,dx
  TST.b fpu
  BEQ JL_0_ABDE
  MOVEQ #0,d1
  MOVE.w regnum,d1
  LSL.l #7,d1
  OR.l #$f2000000,d1
  ;BSR writelong
JL_0_ABDE:
       MOVE.w (A7)+,D3
       BEQ.w JL_0_ABFC
       TST.b fpu
       BEQ 'nofpu
      MOVE.l d0,-(a7)
       MOVE.l a0,-(a7)
       MOVE.l stacktrack,d1
       LEA fpustackbase,a0
       MOVE.w 0(a0,d1),regmask
       MOVE.l (a7)+,a0
      MOVE.w #8,d0
   'loop   BEQ 'ready
      BTST d0,regmask
      BEQ 'noa7
      MOVEQ #0,d1
      MOVE.w d0,d1
      SUBQ.w #1,d1
      ASL #7,d1
      ;OR.l #$f21f4400,d1  ;fmove.s (a7)+
      OR.l #$f21f5400,d1   ;fmove.d (a7)+
      BSR writelong
      SUBQ.l #2,stacktrack
    'noa7
      SUBQ.w #1,d0
      BNE 'loop
   'ready   MOVE.l (a7)+,d0
            SUBQ.l #2,stacktrack  ;int track
'nofpu  MOVE.w #$4CDF,D1
   BSR.w writeword             ;write movem.l (a7)+,
  MOVEQ.l #$00,D1
  MOVEQ.l #$0F,D4
JL_0_ABF0:  LSL.w #1,D3
  ROXR.w #1,D1
   DBF D4,JL_0_ABF0
   BSR.w writeword
   TST.b fast
   BEQ JL_0_ABFC
   TST.w regnum
   BEQ JL_0_ABFC
   CMP.w #$3c0e,$1c(a3)       ;true
   BNE 'l1
   MOVE.w regnum,d1
   ASL.l #8,d1
   ASL.l #1,d1
   OR.w #$70ff,d1
   SUB.l #12,destpointer
   BSR writeword
'l1 CMP.w #$3c0f,$1c(a3)       ;false
   BNE 'l2
    MOVE.w regnum,d1
    ASL.l #8,d1
    ASL.l #1,d1
    OR.w #$7000,d1
    SUB.l #12,destpointer
    BSR writeword
'l2
JL_0_ABFC:  MOVE.w (A7)+,D2
  CMP.w #$7,D2                ;destination var type
   BNE.w JL_0_AC16
  MOVE.w AL_0_2A08,D1
  OR.w regnum,D1
   BSR.w writeword
JL_0_AC16: BRA.w JL_0_AF66

JL_0_AC1A:  MOVE.w $6(A3),D1
   BSR.w uselib
   BSR.w JL_0_AD40
  MOVE.l D4,D1
  MOVE.l D5,-(A7)
   BSR.w JL_0_AD38
  MOVE.w $A(A1),-(A7)
  ADDQ.w #8,A3
  MOVE.w (A3)+,-(A7)
  MOVE.l A3,-(A7)
   BSR.w get1bytemain
  MOVE.w D0,-(A7)
  MOVEQ.l #$00,D3
JL_0_AC40:  MOVE.b (A3)+,D1
   BMI.w JL_0_AC6A
  MOVEQ.l #$03,D2
  ADDQ.w #1,D3
  MOVEM.l D3/A3,-(A7)
   BSR.w JL_0_996C
  SUBQ.w #4,a2offset
  MOVEM.l (A7)+,D3/A3
  CMP.w #$2C,D0
   BEQ.w JL_0_AC40
  TST.b (A3)
   BPL.w syntaxerr
JL_0_AC6A:  MOVE.w (A7)+,D1
   BSR.w JL_0_AD04
  MOVEA.l (A7)+,A3
  SUBQ.w #1,D3
   BMI.w JL_0_ACBE
JL_0_AC78:  TST.b (A3)+
   BPL.w JL_0_AC78
  SUBQ.w #1,A3
JL_0_AC80:  MOVEQ.l #$00,D1
  MOVE.b -(A3),D1
  BTST #$4,D1
   BNE.w JL_0_ACAA
  CMP.w regnum,D1
   BCC.w JL_0_AC9E
  BSET D1,D5
  MOVEQ.l #$0F,D0
  SUB.w D1,D0
  BSET D0,D4
JL_0_AC9E:  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$201F,D1
 BRA.w JL_0_ACB6

JL_0_ACAA:  ANDI.w #$7,D1
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$205F,D1
JL_0_ACB6:   BSR.w writeword
   DBF D3,JL_0_AC80
JL_0_ACBE:  MOVE.w (A7)+,AL_0_2A5C
  MOVE.w (A7)+,AL_0_2A58
  MOVE.l AL_0_2A56,D1
   BSR.w writelong
  MOVE.l AL_0_2A5A,D1
   BSR.w writelong
  MOVE.w regnum,D1
   BEQ.w JL_0_ACF4
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$2000,D1
   BSR.w writeword
JL_0_ACF4:  MOVE.l (A7)+,D1
   BSR.w JL_0_AD38
  MOVEQ.l #$03,D2
   BSR.w JL_0_7C3A
 BRA.w JL_0_AF66

JL_0_AD04:  TST.w D3
   BEQ.w JL_0_AD1E
  CMP.w #$28,D1
   BNE.w syntaxerr
  CMP.w #$29,D0
   BNE.w syntaxerr
 BRA.w get1bytemain

JL_0_AD1E:  CMP.w #$28,D1
   BNE.w JL_0_AD36
   BSR.w get1bytemain
  CMP.w #$29,D0
   BNE.w syntaxerr
 BRA.w get1bytemain

JL_0_AD36: RTS

JL_0_AD38:  TST.w D1
   BNE.w writelong
 RTS

JL_0_AD40:  MOVE.w #$48E7,D4
  SWAP D4
  CLR.w D4
  MOVE.w #$4CDF,D5
  SWAP D5
  CLR.w D5
  MOVE.w regnum,D1
   BEQ.w JL_0_AD74
  BSET #$F,D4
  BSET #$0,D5
  CMP.w #$2,D1
   BCS.w JL_0_AD72
  JL_0_AD6A:
  BSET #$E,D4
  BSET #$1,D5

  JL_0_AD72:
RTS

JL_0_AD74:
  TST.w AL_0_AD80
  BNE.w JL_0_AD6A
RTS

AL_0_AD80: Ds.w 1

JL_0_AD82:
  MOVE.w AL_0_EC48,D1
   BEQ.w JL_0_ADA8
  MOVE.w AL_0_E9AE(PC),D1
   BNE.w JL_0_ADA6
  MOVE.w #$0002,AL_0_E9AE
  MOVE.w AL_0_29EC,D1
  BRA.w writeword

  JL_0_ADA6:
RTS

JL_0_ADA8:                       ;add tempstring
  MOVE.w #$0001,AL_0_E9AE
 'l1
  MOVE.l #$C601,D1
  MOVE.w #-1,AL_0_EC48
  MOVE.l d1,lastinstruction
  BSR.w Atokejsr
RTS




JL_0_ADC0:
  MOVE.l AL_0_E8EE,AL_0_EC4A
  TST.b fast:BEQ 'l50 ;optistring  seem impossible to get work
                       ;100% compatible see string$ for problems
                       ;only assign constant and case constant is activate
                       ;when on print "test",fi$  fail
  BRA 'l50            ;to deactivate

  CNIF #optibreak
    ILLEGAL
  CEND

  TST.b optistring
  BNE.s 'l21
  CLR.b string1
  MOVE.b #1,optistring
  TST.b nostringopt
  BNE 'l21
  MOVE.l a5,a4
  SUBQ.l #1,a4
 'l10
    TST.b (a4)
    BMI 'l19a
    BEQ.s 'l20
    CMP.b #$22,(a4)
    BEQ.s 'l19
   'l18
    TST.w string1
    BNE 'l11
    CMP.b #":",(a4)
    BEQ.s 'l20
    CMP.b #";",(a4)
    BEQ.s 'l20
    CMP.b #"+",(a4)
    BEQ.s 'l21
    CMP.b #",",(a4)
    BEQ.s 'l20         ;was l21
    CMP.b #")",(a4)
    BEQ.s 'l20         ;was l21
   'l11
    ADDQ.l #1,a4
  BRA.s 'l10
 'l19

  BCHG #0,string1
  BRA 'l18
 'l19a
  ADDQ.l #1,a4
  TST.b (a4)
  BEQ 'l21
  BRA 'l11
 'l20
  MOVE.l a5,a4
  SUBQ.l #1,a4
 'll1
  CMP.b #$20,-(a4)
  BEQ 'll1
  CMP.b #"+",(a4)
  BEQ 'l21
 ;CMP.b #",",(a4)
 ;BEQ 'l22
 ;CMP.b #"(",(a4)
 ;BEQ 'l22
 ;BRA 'l21
;; CMP.b #"=",(a4)
;; BEQ 'l21
 ;CMP.b #">",(a4)
 ;BEQ 'l21
 ;CMP.b #"<",(a4)
 ;BEQ 'l21
 'l22
  MOVE.b #2,optistring
 'l21
  CMP.b #2,optistring
  BEQ.s 'l100
 'l50
  BSR.w JL_0_AD82
  BSR.w JL_0_745A           ;writestringsizespace
  BSR.w JL_0_745A
 'l100
  MOVEQ.l #$00,D2

  writestring:
    MOVE.l a5,lastsourcepos
    MOVEQ #0,d0
    MOVE.b (a5)+,d0
    TST.w D0
     BEQ.w JL_0_8224
    CMP.w #$22,D0           ; --- " ---
     BEQ.w JL_0_ADF6
    CMP.b #"\",d0
     BNE 'l1
    CMP.b #"\",(a5)
     BNE 'l1
    TST.b newsyntax
     BEQ 'l1
    CMP.w #"\\",1(a5)       ; new compiler constants
    BNE 'l2
    ADDQ #2,a5
  'l1
    ADDQ.w #1,D2
    MOVE.w D0,D1
    BSR.w JL_0_7428          ;writestring
    BRA.w writestring

   'l2                         ;\\char//
    JSR check_newconstants
  BRA writestring

  JL_0_ADF6:
  NOT instringon
  MOVE.w dontwrite,D1
  BNE.w JL_0_AE0A
  CMP.b #2,optistring
  BEQ 'l10
    MOVEA.l AL_0_EC4A,A0
    CLR.w (A0)+               ;writesize
    MOVE.w D2,(A0)
 'l10
  JL_0_AE0A:
  BSR.w JL_0_AEA4          ;writestringconstantcode
  ADDQ.l #1,AL_0_E8EE
  BCLR #$0,AL_0_E8F1
  MOVEQ.l #$07,D2
BRA.w get1bytemain







JL_0_AE22:
  BSR.w makename2
  BSR.w findlabel2
  BEQ.w JL_0_AE4A
  BSR.w addlabelhash
  CLR.l $4(A2)
  CLR.l $8(A2)
  ;clr.l $C(A2)
  MOVE.w AL_0_E9E8+2,$10(A2)
  MOVE.w AL_0_E9E8,d0
  MOVEQ #0,d1
  MOVE.b -1(a2,d7),d1
  MOVE.w d0,0(a2,d1)
BRA.w JL_0_AE52

JL_0_AE4A:
  TST.l $8(A2)
  BNE.w JL_0_AE88
  JL_0_AE52:
  MOVEA.l _execbase,A6
  MOVEQ.l #$0C+2,D0
  MOVEQ.l #$01,D1
  MOVE.l mempool,a0
  JSR _AllocPooled(a6)
   ;jsr AJL_0_4B6C
  MOVEA.l D0,A0
  MOVE.l $4(A2),(A0)
  MOVE.l A0,$4(A2)
  MOVE.l destpointer,$4(A0)
  ADDQ.l #2,$4(A0)
  MOVE.w AL_0_D2DA,$8(A0)
  MOVE.w AL_0_E9E8+2,$A(A0)
  MOVE.w AL_0_E9E8,$c(a0)
 RTS

JL_0_AE88:  MOVE.l $4(A2),D1
  BTST #$0,D1
   BNE.w JL_0_7D74
  MOVE.w AL_0_D2DA,D1
  CMP.w $10(A2),D1
   BNE.w JL_0_7D50
 RTS

JL_0_AEA4:  MOVE.w D0,-(A7)
  CMP.b #2,optistring
  BEQ 'l10
'l35  MOVE.w AL_0_2AB0,D1
   BSR.w writeword
   BSR.w JL_0_791C
  MOVE.l AL_0_EC4A,D1
   BSR.w writelong
  MOVE.w AL_0_2A8E,D1
   BSR.w writeword
  MOVE.w #$C600,D1
   BSR.w Atokejsr
  MOVE.w (A7)+,D0
 RTS

'l10
 MOVEQ #0,d1
 BSR.w JL_0_7428
 MOVE.l destpointer,a4
 MOVE.w #$203c,d1
 TST.w mode
 BNE 'lm10
  ADDQ.w #4,a2offset
 MOVE.w #$2f3c,d1
'lm10
 TST.w mode
 BEQ 'lm3
 MOVE.w regnum,D0
 LSL.w #8,D0
 LSL.w #1,D0
 OR.w d0,d1
 BSR writeword
 BSR.w JL_0_791C
 MOVE.l AL_0_EC4A,D1
 BSR.w writelong
 CMP.w #3,mode
 BEQ 'l30
  ADDQ.w #4,a2offset
 MOVE.w #$4878,D1
 BSR.w writeword
 MOVE.l d2,d1
 BSR writeword
'l30 MOVE.w (A7)+,D0
 RTS
'lm3
 MOVE.l #$3f3c0007,d1
 BSR writelong
 MOVE.w regnum,D1
 LSL.w #8,D1
 LSL.w #1,D1
 ORI.w #$2f3c,d1
 BSR writeword
  ADDQ.w #4,a2offset
 MOVE.l d2,d1
 BSR writelong
 MOVE.w #$2f3c,d1
 BSR writeword
 BSR.w JL_0_791C
 MOVE.l AL_0_EC4A,D1
 BSR.w writelong
 MOVE.w (A7)+,D0
 RTS
JL_0_AED4:   BSR.w get1bytemain
   BSR.w JL_0_AE22
  MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$203C,D1
   BSR.w writeword
   BSR.w JL_0_791C
  MOVE.l $8(A2),D1
   BSR.w writelong
  MOVEQ.l #$03,D2
 BRA.w JL_0_7C3A

JL_0_AF00:  MOVEQ.l #$00,D3
JL_0_AF02:   BSR.w get1bytemain
   BEQ.w syntaxerr
  CMP.w #$22,D0
   BEQ.w JL_0_AF1A
  LSL.l #8,D3
  MOVE.b D0,D3
 BRA.w JL_0_AF02

JL_0_AF1A:   BSR.w get1bytemain
 BRA.w JL_0_B46E

JL_0_AF22:  MOVE.w D2,-(A7)   ;basicvarsforasm
   BSR.w makename2
   BSR.w findlabel2
   BEQ.w 'l10
   LEA ptr_parameterstore,a0
   CMP.b #"@",-1(a0,d2.w)
   BNE JL_0_8AAC
   CLR.b -1(a0,d2.w)
   SUBQ.l #1,d2
   LEA varbase,a2
   BSR findvariable
   BNE JL_0_8AAC
   CMP.b #"\",d0
   BNE 'l6
   ADDQ #1,lastsourcepos
   MOVE.l $a(a2),a2
   ADDQ.l #4,a2
   BSR.w makename2
   BSR findvariable2
   BNE JL_0_8AAC
   BRA.s 'l6
'l6 MOVE.w $4(a2),d3
   EXT.l d3
   BRA JL_0_AF46
'l10  MOVE.l $8(A2),D3
  CMPI.l #$1,$4(A2)
   BEQ.w JL_0_AF46
  NOT.w AL_0_E920
JL_0_AF46:  MOVE.w (A7)+,D2
 BRA.w JL_0_B46E

JL_0_AF4C:  MOVE.w D2,-(A7)
   BSR.w getparameter
  CMP.w #$7B,D0
   BEQ.w JL_0_AFDE
   BSR.w JL_0_8E3C
   BSR.w JL_0_9122                  ;getvaroffset+type
   BSR.w JL_0_B150
   ;BTST #$d,vartype
   ;BNE 'ls1
   ;CMP.b #7,vartype+1                                    ;long pointer string error
   ;BEQ 'ls1
   ;TST.b vartype+1
   ;BEQ 'ls1
   ;CMP.b #7,d2
   ;BNE 'ls1
   ;BRA error_convert_types
'ls1
   TST.b typecheck
   BEQ JL_0_AF66


   CMP.l #$da01,lasttoken           ;poke
   BEQ 'l1
   CMP.l #$da02,lasttoken           ;peek
   BNE 'l2
'l1

   CMP.w #1,parnum
   BNE JL_0_AF66
   MOVE.b d2,peekaddrsize
   BRA JL_0_AF66
'l2 CLR.b peekaddrsize
JL_0_AF66:  CMP.w #$1,D2
   BNE.w JL_0_AF7C
  MOVE.w regnum,D1
  ORI.w #$4880,D1
   BSR.w writeword
JL_0_AF7C:  MOVE.w (A7)+,D3
   BEQ.w JL_0_AF9E
   MOVE.l lastinstruction,a0
  CMP.w #$3,D3
   BNE.w JL_0_AF92
  CMP.w #$4,D2
   BEQ.w JL_0_AF98
JL_0_AF92:  CMP.w D2,D3
   BLS.w JL_0_AF9E
JL_0_AF98:  EXG.l D2,D3

 BSR.w writeconvertcode
JL_0_AF9E: BRA.w JL_0_7C3A

JL_0_AFA2func:
MOVEQ.l #$00,D3
  MOVE.w regnum,D1
   BEQ.w JL_0_AFC8
 SUBQ.w #1,D1
JL_0_AFB0b:  LSR.l #1,D3
  BSET #$F,D3
   DBF D1,JL_0_AFB0b
   TST.b fpu
   BEQ 'l1
   ADDQ.l #2,stacktrack        ;intern command
    MOVE.l a0,-(a7)
    MOVE.l stacktrack,d1
    LEA fpustackbase,a0
    CLR.w 0(a0,d1)
    CLR.w regmask
    MOVE.l (a7)+,a0
'l1  MOVE.w #$48E7,D1
   BSR.w writeword           ;write movem.l d0/d1,-(a7)
  MOVE.w D3,D1
 BRA.w writeword



JL_0_AFA2:
MOVEQ.l #$00,D3
  MOVE.w regnum,D1
   BEQ.w JL_0_AFC8
 SUBQ.w #1,D1
JL_0_AFB0:  LSR.l #1,D3
  BSET #$F,D3
   DBF D1,JL_0_AFB0

   TST.b fpu
   BEQ 'l1
   ADDQ.l #2,stacktrack        ;intern command
    MOVE.l a0,-(a7)
    MOVE.l stacktrack,d1
    LEA fpustackbase,a0
    CLR.w 0(a0,d1)
   CMP.b #5,(a3)             ;result float ?
    BNE 'nofpu
;    MOVE.w #1,0(a0,d1.w)
    MOVE.w regnum,regnumfunc
'nofpu  CLR.w regmask
    MOVE.l (a7)+,a0
'l1  MOVE.w #$48E7,D1
   BSR.w writeword           ;write movem.l d0/d1,-(a7)
  MOVE.w D3,D1
 BRA.w writeword

JL_0_AFC8: RTS

JL_0_AFCA:  MOVE.l D1,-(A7)
  MOVE.w #$4EB9,D1
   BSR.w writeword
   BSR.w JL_0_791C
  MOVE.l (A7)+,D1
 BRA.w writelong


JL_0_AFDE:
   BSR.w findproc          ;write function call
   BEQ 'l1
   TST.l unusedfunc
   BEQ JL_0_8898
   ;BRA JL_0_8898
   JSR gotoendsource
'l1   MOVEQ.l #$00,D1
  MOVE.b $5(A2),D1
  MOVE.b d1,retmode
   BMI.w JL_0_8900
   MOVE.b #1,isfunc(a2)
  MOVE.w D1,-(A7)
  MOVEQ.l #$00,D1
  MOVE.b $4(A2),D1
  LSR.w #4,D1
   BEQ.w JL_0_B006
  LSL.w #2,D1
  SUB.w D1,a2offset
JL_0_B006:  CMPI.w #$7,(A7)
   BNE.b JL_0_B014
  MOVE.l A2,-(A7)
   BSR.w JL_0_AD82
  MOVEA.l (A7)+,A2
JL_0_B014:  MOVE.w AL_0_EC48,-(A7)
   BEQ.b JL_0_B020
   BSR.w JL_0_9856
JL_0_B020:   BSR.w JL_0_AFA2func
  MOVE.w D3,-(A7)
  MOVE.l $E(A2),D1
  TST.b $20(a2)                ;increase if morepar
  BNE 'no0par
  MOVE.l a5,a4
'l1 CMP.b #$20,(a4)+
  BEQ 'l1
  CMP.b #"}",-1(a4)
  BNE  'no0par
  MOVEQ #0,d0

             ;functioncall no pars
  LEA $16(A2),A1
'again
  MOVE.l d1,-(a7)
  MOVE.b (a1),d2
  MOVE.l d0,d1
  CMP.w #4,d2
  BNE 'l1b
  ADD.l #$203c,d1
  BSR writeword
  MOVE.l #$ffff0000,d1
  BSR writelong
  BRA 'l2b
'l1b
   TST.b fpu
   BNE 'l1c
   CMP.w #5,d2
   BNE 'l1c
   ADD.l #$203c,d1
   BSR writeword
   MOVE.l #$800000c1,d1
   BSR writelong
   BRA 'l2b
   'l1c
  ADD.l #$70ff,d1
  BSR writeword
  MOVE.l #$f23c5000,d1
  MOVE.l d0,d2
  ASR.l #2,d2
  ADD.l d2,d1
  BSR writelong
  MOVE.w #$ffff,d1
  BSR writeword
'l2b MOVE.l (a7)+,d1
     ADDQ.l #1,a1
     ADD.l #$0200,d0
     CMP.l #$0e00,d0
     BEQ syntaxerr
     TST.b (a1)
     BNE 'again
     BRA 'p1
'no0par  TST.b $4(A2)
   BNE.w JL_0_B03E
'p1 BSR.w JL_0_AFCA
   BSR.w get1bytemain
 BRA.w JL_0_B06C


JL_0_B03E:  MOVE.w regnum,-(A7)
            MOVE.w regnum,regnumfunc
._func  MOVE.l D1,-(A7)                    ;write function call with pars
  MOVE.b #1,funccall
  MOVEQ.l #$00,D0
  MOVE.b $4(A2),D0
  MOVE.l d0,parnumtemp
  MOVE.w a2offset,a2offset2
  MOVE.b 5(a2),retmode
  MOVE.l a2,currentfunccall
  LEA $16(A2),A2
  CLR.w regnum
  CLR.w regmask
  MOVE.b funcparloop,-(a7)
  MOVE.b #1,funcparloop
  BSR.w JL_0_67F0
  MOVE.b (a7)+,funcparloop
  JSR AJL_0_BA86
  MOVE.l (A7)+,D1
;  CMP.l #6,parnumtemp
;  BLE 'l1
;  CMP.l #11,parnumtemp
;  BGE 'l1
;   TST.w a2offset
;   BEQ 'l1
;   MOVE.l d1,-(a7)
;   MOVE.w #$47ef,d1        ;lea x(a7),a3 nat
;   BSR writeword
;   MOVE.w a2offset,d1
;   SUB.w a2offset2,d1
;   BSR writeword
;   MOVE.l (a7)+,d1
; 'l1
   BTST #0,d1
   BNE intern1
   BSR.w JL_0_AFCA
;   CMP.l #6,parnumtemp
;  BLE 'le
;  CMP.l #11,parnumtemp
;  BGE 'le
;   TST.w a2offset
;   BEQ 'le        ;changed
;   MOVE.l d1,-(a7)
;   MOVE.l #$4fef0000,d1    ;lea $x(a7),a7   nat
;   MOVE.w a2offset,d1
;   SUB.w a2offset2,d1
;   BSR.w writelong                ;correct stack with more parameters
;  MOVE.w AL_0_E9BA,AL_0_29E0
;   BEQ.w 'le2
;  MOVE.l AL_0_29DE,D1
;   BSR.w writelong
;'le2
; MOVE.w a2offset2,a2offset
; MOVE.l (a7)+,d1
'le
  MOVE.w (A7)+,regnum
JL_0_B06C:  CMP.w #$7D,D0
   BNE.w syntaxerr
   MOVEQ #0,d1
  MOVE.w regnum,D1
   BEQ.w JL_0_B08A
   TST.b fpu
   BEQ 'old
   CMP.b #5,retmode
   BNE 'old
   ASL.l #7,d1
   OR.l #$f2000000,d1
   BSR writelong
   BRA JL_0_B08A
'old  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$2000,D1
   BSR.w writeword
JL_0_B08A:

   MOVE.w (A7)+,D3
   BEQ.w JL_0_B0A8
   TST.b fpu
   BEQ 'old
   MOVE.l d0,-(a7)
   MOVE.w #8,d0
   MOVE.l a0,-(a7)
   MOVE.l stacktrack,d1
   LEA fpustackbase,a0
   MOVE.w 0(a0,d1),regmask
   MOVE.l (a7)+,a0
'loop   BEQ 'ready
   BTST d0,regmask
   BEQ 'noa7
   MOVEQ #0,d1
   MOVE.w d0,d1
   SUBQ.w #1,d1
   ASL #7,d1
   ;OR.l #$f21f4400,d1
   OR.l #$f21f5400,d1   ;fmove.d (a7)+
   BSR writelong
   SUBQ.l #2,stacktrack
 'noa7
   SUBQ.w #1,d0
   BNE 'loop
'ready  SUBQ.l #2,stacktrack      ;integer sub
 MOVE.l (a7)+,d0
'old  MOVE.w #$4CDF,D1
   BSR.w writeword
  MOVEQ.l #$00,D1
  MOVEQ.l #$0F,D4
JL_0_B09C:  LSL.w #1,D3
  ROXR.w #1,D1
   DBF D4,JL_0_B09C       ;movem.l (a7)+,dx
   BSR.w writeword
   CLR.w regnumfunc
JL_0_B0A8:  MOVE.w (A7)+,D1
   BEQ.b JL_0_B0D2
  CMPI.w #$7,(A7)
   BEQ.b JL_0_B0C4
  LEA AL_0_2AAC,A0
  LEA AL_0_2AB0,A1
   BSR.w JL_0_95A2
 BRA.b JL_0_B0CE

JL_0_B0C4:  MOVE.w AL_0_B0F4,D1
   BSR.w writeword
JL_0_B0CE:   BSR.w JL_0_986E
JL_0_B0D2:  MOVE.w (A7)+,D2
  CMP.w #$7,D2
   BNE.w JL_0_B0EC
  MOVE.w AL_0_2A08,D1
  OR.w regnum,D1
   BSR.w writeword
JL_0_B0EC:   BSR.w get1bytemain
 BRA.w JL_0_AF66

AL_0_B0F4:   Dc.b "SK"
JL_0_B0F6: CMP.b #2,optistring
  BEQ fs2
  BSR.w JL_0_AD82  ;writestringvariable
  BTST #$F,D2
   BNE.w JL_0_B112
  MOVE.w D3,AL_0_2A92
  MOVE.l AL_0_2A90,D1
   BSR.w JL_0_94F6
JL_0_B112:  MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$7000,D1
  LEA AL_0_2A74,A0
  MOVE.w D1,(A0)
  MOVE.w regnum,D1
  ANDI.w #$FFF8,$2(A0)
  OR.w D1,$2(A0)
  LEA AL_0_2A84,A1
   BSR.w JL_0_95A2
  MOVE.w #$C600,D1
   BSR.w Atokejsr
  MOVEQ.l #$07,D2
 BRA.w JL_0_7C3A
fs2:
     TST.w stackpar
     BMI 'l10
     MOVE.l #$3f3c0007,d1
     ADDQ.w #2,a2offset
     BSR writelong
'l10     MOVE.w #$4878,d1
     CLR.w stackpar
     BSR writeword
     MOVE.w #$0,d1
     BSR writeword
     MOVE.w #$246d,d1
     BSR writeword
     MOVE.w d3,d1
     BSR writeword
     MOVE.l #$4a926704,d1
     BSR writelong
     MOVE.l #$2eaafffc,d1
     BSR writelong
     MOVE.w #$2f0a,d1
     ADDQ.w #8,a2offset
     BSR writeword
    BRA.w JL_0_7C3A
JL_0_B150:  CMP.b #$7,D2     ;load basic var
   BEQ.w JL_0_B0F6

   TST.b iee
   BEQ 'noiee
   CMP.b #5,d2
   BNE 'noiee
   MOVE.l d0,-(a7)                         ;fpu load var
   BTST #15,d2
   BEQ 'var
   CMP.l #$7fff,d3
   BGT 'longoffset
   MOVE.l #$f22a4400,d1        ;newtype     >32kb
   TST.w d3                    ;offset =0
   BNE 'offset
'longoffset MOVE.l #$f2124400,d1
   MOVEQ #0,d3
   BRA 'glob

'offset   SUBQ.l #4,destpointer
   BRA 'glob
'var TST.b fast
   BEQ 'nofastload
   TST.w regnum
   BNE 'nofastload
   CMP.l fp0addr,a4
   BNE 'nofastload
   MOVE.l fp0iff,d1
   CMP.l firstiff,d1
   BNE 'nofastload
   MOVE.w varmode,d1
   CMP.w fp0mode,d1
   BNE 'nofastload
   CMP.w fp0var,d3
   BNE 'nofastload
   BCLR #16,d2
   MOVE.l (a7)+,d0
   RTS
'nofastload
   MOVEQ #0,d0
   MOVE.w regnum,d0
   CMP.l maxregs,d0
   BLE 'ok
   LEA cmplxerr,a0
  MOVE.l a0,-(a7)
  JMP handle_compileerror
'ok
   LEA regtable,a4
   TST.l (a4)
   BEQ 'noreg
   CMP.w 0+4(a4),d3
   BNE 'doreg1
   MOVE.l #$f2001c00,d1
   MOVE.w regnum,d0
   ASL.w #7,d0
   OR.w d0,d1
   BSR writelong
   MOVE.l (a7)+,d0
   RTS
'doreg1   CMP.w 8+4(a4),d3
   BNE 'doreg2
   MOVE.l #$f2001800,d1
   MOVE.w regnum,d0
   ASL.w #7,d0
   OR.w d0,d1
   BSR writelong
   MOVE.l (a7)+,d0
   RTS
'doreg2   CMP.w 16+4(a4),d3
   BNE 'doreg3
   MOVE.l #$f2001400,d1
   MOVE.w regnum,d0
   ASL.w #7,d0
   OR.w d0,d1
   BSR  writelong
   MOVE.l (a7)+,d0
   RTS
'doreg3   CMP.w 24+4(a4),d3
   BNE 'doreg4
   MOVE.l #$f2001000,d1
   MOVE.w regnum,d0
   ASL.w #7,d0
   OR.w d0,d1
   BSR writelong
   MOVE.l (a7)+,d0
   RTS
'doreg4
   CMP.w 32+4(a4),d3
   BNE 'noreg
   MOVE.l #$f2000c00,d1
   MOVE.w regnum,d0
   ASL.w #7,d0
   OR.w d0,d1
   BSR writelong
   MOVE.l (a7)+,d0
   RTS

'noreg MOVE.l #$f22d4400,d1      ;var
   TST.w varmode
 BEQ 'glob
 BCLR #16,d1                   ;local
 'glob
   MOVEQ #0,d0
   MOVE.w regnum,d0
   CMP.w #7,d0
   BLE 'ok2
   LEA cmplxerr,a0
  MOVE.l a0,-(a7)
  JMP handle_compileerror
'ok2
     ASL.w #7,d0
   OR.l d0,d1
   CMP.l #doublecheck,8(a2)
   BNE 'dbl
   OR.l #$00001000,d1
'dbl   BSR writelong
   MOVE.l (a7)+,d0
   AND.w #$ff,d2
   MOVE.w d3,d1
   BEQ 'nooffs
   BRA writeword
'nooffs
   ;CMP.l #$f2124400,-4(a4)
   ;BNE writeword
   RTS

'noiee  MOVE.w regnum,D1
  MOVE.w d1,load_var_reg
  LSL.w #8,D1
  MOVE.l destpointer,load_var_addr
  MOVE.w d2,load_var_size
  LSL.w #1,D1
  BTST #$E,D2
   BNE.w JL_0_B17A
  TST.b D2
   BNE.w JL_0_B17E
  MOVEQ.l #$03,D2
  ORI.w #$200A,D1
 BRA.w writeword

JL_0_B17A:  MOVE.b #$3,D2
JL_0_B17E:
BTST #$F,D2
   BEQ.w JL_0_B19A              ;loadarray
   TST.b fast ;lea->move xx(a2)
   BEQ 'la10
   CNIF #optibreak
   ILLEGAL
   CEND

   CLR.l load_var_addr
   BRA 'la10
   CMP.w #$2012,AL_0_2A6E
   BNE 'la10
   TST.b optiarray
   BNE 'la10
   MOVE.l destpointer,a4
   SUB.l loada,a4
   CMP.w #4,a4
   BEQ 'la100
   CMP.w #2,a4
   BNE 'la10
   MOVE.l destpointer,a4
   CMP.b #3,d2
   BCS 'la110
   MOVE.w #$202a,-2(a4)
   OR.w d1,-2(a4)
   MOVE.w arrayoffset,d1
   BSR writeword
   BRA JL_0_B194
'la110
   CMP.b #2,d2
   BNE 'la120
    MOVE.w #$302a,-2(a4)
   OR.w d1,-2(a4)

   MOVE.w arrayoffset,d1
   BSR writeword
   BRA JL_0_B194
'la120 CMP.b #1,d2
   BNE.s 'la10
    MOVE.w #$102a,-2(a4)
   OR.w d1,-2(a4)
   MOVE.w arrayoffset,d1
   BSR writeword
   BRA JL_0_B194
'la100   MOVE.l destpointer,a4
   CMP.w #$45ea,-2(a4)
   BNE 'la10
   CMP.b #3,d2
   BCS 'la11
   MOVE.w #$202a,-4(a4)
   OR.w d1,-4(a4)
   BRA JL_0_B194
'la11
   CMP.b #2,d2
   BNE 'la12
    MOVE.w #$302a,-4(a4)
   OR.w d1,-4(a4)
   BRA JL_0_B194
'la12 CMP.b #1,d2
   BNE.s 'la10
    MOVE.w #$102a,-4(a4)
   OR.w d1,-4(a4)
   BRA JL_0_B194
'la10
   OR.w AL_0_2A6E,D1
   BSR.w JL_0_B1B2
   BSR.w writeword
JL_0_B194:
  ANDI.w #$FF,D2
 RTS
farr2
   MOVE.l destpointer,a4
   MOVE.l #$f22a4400,-4(a4)
   MOVE.w arrayoffset,d1
   BRA writeword


JL_0_B19A:  OR.w AL_0_2A70,D1      ;write move.l 0(a5),reg
   BSR.w JL_0_B1B2
   BSR.w JL_0_94C0
  MOVE.w D3,D1
   BSR.w writeword
 BRA.w JL_0_B194

JL_0_B1B2:  BTST #$E,D2
   BNE.w JL_0_B1CA
  CMP.b #$1,D2
   BEQ.w JL_0_B1CC
  CMP.b #$2,D2
   BEQ.w JL_0_B1D2
JL_0_B1CA: RTS

JL_0_B1CC:  EORI.w #$3000,D1
 RTS

JL_0_B1D2:  ORI.w #$1000,D1
 RTS

JL_0_B1D8:
  MOVE.w #$FFFF,AL_0_B3DA
  BSR.w get1bytemain
  CMP.w #$2D,D0
   BNE.w JL_0_B206
  BSR.w get1bytemain
  BSR.w JL_0_B206
  CMP.w #$5,D2
   BCC.w JL_0_B200
  NEG.l D0
RTS

JL_0_B200:
  TST.b fpu
  BEQ 'noneg
  fneg.x fp0
  RTS
 'noneg
  BCHG #$7,D0
RTS

JL_0_B206:  CMP.w #$24,D0
   BEQ.w get_hexconstant
  CMP.w #$25,D0
   BEQ.w JL_0_A8C0
  CMP.w #$2E,D0
   BNE.w JL_0_B224
JL_0_B21E:  MOVEQ.l #$00,D3
 BRA.w JL_0_B272

JL_0_B224:  MOVEQ.l #$00,D3        ;number
   BSR.w atoi
  CMP.w #$2E,D0
   BEQ.w JL_0_B268
  ORI.w #$20,D0
  CMP.w #$65,D0
   BNE.w JL_0_B46E
  CMP.l #$800000,D3
   BCC.w JL_0_847C
  MOVEQ.l #-$01,D6
  fmove.l d3,fp0
  MOVE.l D3,D0
  MOVEA.l _mathffpbase,A6
   JSR -$24(A6)
  MOVE.l D0,D3
   BSR.w JL_0_B2E6
   BSR.w JL_0_7C3A
   BSR.w JL_0_B480
 BRA.w JL_0_B3DC

JL_0_B268: CMP.b #4,d2
           BEQ 'l4
           MOVE.b #5,d2            ;nprint 2/0.5 bugfix
'l4        TST.b fpu
           BNE 'l1
   CMP.l #$800000,D3
   BCC.w JL_0_847C
   BRA JL_0_B272
'l1 CMP.l #$7fffffff,d3
    BCC.w JL_0_847C
JL_0_B272:  MOVEQ.l #-$01,D6
  MOVE.l D3,D0
  fmove.l d3,fp0
  MOVEA.l _mathffpbase,A6
   JSR -$24(A6)               ;integer to ffp
  MOVE.l D0,-(A7)
   BSR.w get1bytemain
   BSR.w JL_0_8BB6
   BNE.w syntaxerr
  MOVEQ.l #$00,D3
   BSR.w atoi
  TST.l D3
   BEQ.w JL_0_B2E0
  TST.b fpu
  BNE 'l1
  CMP.l #$800000,D3
   BCC.w JL_0_847C
      BRA 'l2
'l1   CMP.l #$7fffffff,d3
      BCC JL_0_847C
'l2  fmove.l d5,fp1
  MOVE.l D5,D0
   JSR -$24(A6)
  MOVE.l D0,D5
  fmove.l d3,fp2
  MOVE.l D3,D0
   JSR -$24(A6)
  fdiv.x fp1,fp2
  MOVE.l D5,D1
   JSR -$54(A6)
  fadd.x fp2,fp0
  MOVE.l (A7)+,D1
   JSR -$42(A6)
  MOVE.l D0,D3
   BSR.w JL_0_7C3A
  ORI.w #$20,D0
  CMP.w #$65,D0
   BNE.w JL_0_B2D4
   BSR.w JL_0_B2E6
JL_0_B2D4:   BSR.w JL_0_7C3A
   BSR.w JL_0_B480
 BRA.w JL_0_B3DC

JL_0_B2E0:  MOVE.l (A7)+,D3
 BRA.w JL_0_B2D4

JL_0_B2E6:   BSR.w get1bytemain
  CMP.w #$2B,D0
   BEQ.w JL_0_B30E
  CMP.w #$2D,D0
   BNE.w JL_0_B312
   BSR.w get1bytemain
   BSR.w JL_0_B322
  MOVE.l D3,D0
  fdiv.x fp1,fp0
  MOVE.l D4,D1
   JSR -$54(A6)
  MOVE.l D0,D3
 RTS

JL_0_B30E:   BSR.w get1bytemain
JL_0_B312:   BSR.w JL_0_B322
  fmul.x fp1,fp0
  MOVE.l D3,D0
  MOVE.l D4,D1
   JSR -$4E(A6)
  MOVE.l D0,D3
 RTS

JL_0_B322:   BSR.w JL_0_8BB6
   BNE.w syntaxerr
  MOVE.w D0,D4
  SUBI.w #$30,D4
   BSR.w get1bytemain
   BSR.w JL_0_8BB6
   BNE.w JL_0_B34A
  MULU #$A,D4
  SUBI.w #$30,D0
  ADD.w D0,D4
   BSR.w get1bytemain
JL_0_B34A:  CMP.w #$12,D4
   BHI.w JL_0_847C
  LSL.w #3,D4
  LEA fputab,a0
  ADD.l d4,a0
  fmove.d 0(a0),fp1
  LSR.w #1,d4
  MOVE.l L_0_B35A(PC,D4.W),D4
 RTS

fputab
  Dc.d 1,10,100,1000,10000,100000,1000000,10000000,100000000;,1000000000,10000000000
  ;Dc.d 100000000000,1000000000000,10000000000000,100000000000000
L_0_B35A:  Dc.b $80,$00 ;..
  Dc.b $00,$41,$A0,$00 ;.A..
  Dc.b $00,$44,$C8,$00 ;.D..
  Dc.b $00,$47,$FA,$00 ;.G..
  Dc.b $00,$4A ;.J
  Dc.b $9C,$40 ;.@
  Dc.b $00,$4E ;.N
  Dc.b $C3,$50 ;.P
  Dc.b $00,$51 ;.Q
  Dc.b $F4,$24 ;.$
  Dc.b $00,$54,$98,$96 ;.T..
  Dc.b $80,$58,$BE,$BC ;.X..
  Dc.b " ["
  Dc.b $EE ;.
  Dc.b "k(^"
  Dc.b $95,$02 ;..
  Dc.b $F9,$62 ;.b
  Dc.b $BA,$43 ;.C
  Dc.b $B7,$65,$E8,$D4 ;.e..
  Dc.b $A5,$68,$91,$84 ;.h..
  Dc.b $E7,$6C,$B5 ;.l.
  Dc.b $E6 ;.
  Dc.b $a9,"o"
  Dc.b $E3,$5F ;._
  Dc.b ")r"
  Dc.b $8E,$1B ;..
  Dc.b $CA,$76,$B1,$A2 ;.v..
  Dc.b $BD,$79,$DE ;.y.
  Dc.b $0B ;.
  Dc.b "l|"
atoi:  MOVEQ.l #$01,D5
JL_0_B3A8:  LSL.l #1,D5
  MOVE.l D5,D1
  LSL.l #2,D5
  ADD.l D1,D5
  LSL.l #1,D3
   BCS.w JL_0_847C
  MOVE.l D3,D1
  LSL.l #1,D3
   BCS.w JL_0_847C
  LSL.l #1,D3
   BCS.w JL_0_847C
  ADD.l D1,D3
  SUBI.w #$30,D0
  ADD.l D0,D3
   !fget;bsr.w get1bytemain
   CMP.b #1,d0
   BNE 'cm1
   SUBQ.l #1,a5
   BSR get1bytemain
'cm1 CMP.b #$7e,d0
   BNE 'cm2
   SUBQ.l #1,a5
   BSR get1bytemain
'cm2 TST.b d0
   BPL 'l10
   LSL.w #8,d0
   MOVE.b (a5)+,d0
   MOVE.w d0,lastchar
'l10   !compare2;bsr.w JL_0_8BB6 ;cmake bug
   BEQ.w JL_0_B3A8

   RTS

AL_0_B3DA:  Ds.w 1
JL_0_B3DC:  MOVE.w AL_0_B3DA(PC),D1
   BEQ.w JL_0_B3EC
  CLR.w AL_0_B3DA
 RTS

JL_0_B3EC: MOVE.w d2,imm_size
           MOVE.w regnum,imm_reg
           MOVE.l destpointer,imm_addr
   CMP.w #$1,D2
   BEQ.w JL_0_B418
  CMP.w #$2,D2
   BEQ.w JL_0_B418
  CMP.w #$3,D2
   BEQ.w JL_0_B434
  CMP.w #$4,D2
   BEQ.w JL_0_B434
  CMP.w #$5,D2
   BEQ.w JL_0_B434
 BRA.w JL_0_853E

JL_0_B418:  MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$303C,D1
   BSR.w writeword
  MOVE.w D0,D1
   BSR.w writeword
 BRA.w JL_0_7C3A

JL_0_B434: MOVEQ #0,d1
  MOVE.w regnum,D1
  TST.b fpu
  BEQ 'f1
  CMP.w #5,d2
  BEQ 'l10
  BRA 'f2
'f1
  TST.b iee
  BNE 'l10
'f2  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$203C,D1
   BSR.w writeword
  MOVE.l D0,D1
   BSR.w writelong
 BRA.w JL_0_7C3A
'l10                          ;fpu constant
 MOVEQ #5,d2
 ASL.l #7,d1
 SUBQ.l #8,a7
 CNIF #64bitconstant
     OR.l #$f23c5400,d1           ;fmove.d
     fmove.d fp0,0(a7)
 CELSE
     OR.l #$f23c4400,d1           ;fmove.s
      fmove.s fp0,0(a7)
 CEND
 BSR writelong
 MOVE.l (a7)+,d1
 BSR writelong
 MOVE.l (a7)+,d1
 CNIF #64bitconstant
     BSR writelong
 CEND
 BRA.w JL_0_7C3A
JL_0_B450:  MOVE.l D3,D0
  TST.w D6
   BEQ.w JL_0_B46C
  MOVEA.l _mathffpbase,A6
   JSR -$1E(A6)
   BVC.w JL_0_B46C
  ADDQ.w #4,A7
 BRA.w JL_0_B5A0

JL_0_B46C: RTS

JL_0_B46E:  MOVEQ.l #$00,D6
   fmove.l d3,fp0
nofpregload   BSR.w JL_0_B480
 BRA.w JL_0_B3DC

JL_0_B478:  MOVE.w D2,-(A7)
   BSR.w JL_0_BF6A
  MOVE.w (A7)+,D2
JL_0_B480:  TST.w D2
   BNE.w JL_0_B498
  TST.w D6
   BEQ.w JL_0_B492
  MOVEQ.l #$04,D2
 BRA.w JL_0_B510

JL_0_B492:  MOVEQ.l #$02,D2
 BRA.w JL_0_B4C4

JL_0_B498:  CMP.w #$1,D2
   BEQ.w JL_0_B4C4
  CMP.w #$2,D2
   BEQ.w JL_0_B4F8
  CMP.w #$3,D2
   BEQ.w JL_0_B57A
  CMP.w #$4,D2
   BEQ.w JL_0_B506
  CMP.w #$5,D2
   BEQ.w JL_0_B586
 BRA.w JL_0_853E
JL_0_B4C4:
  BSR.w JL_0_B450      ;bugfix if a.b=$90 bug fix
  CMP.l #$7f,D0
   BGT.w JL_0_B4DC
  CMP.l #$FFFFFF80,D0
   BGE.w JL_0_B59E
JL_0_B4DC:  MOVEQ.l #$02,D2       ;was 2 before
  CMP.l #$7fff,D0
   BGT.w JL_0_B4F2
  CMP.l #$FFFF8000,D0
   BGE.w JL_0_B59E
JL_0_B4F2:  MOVEQ.l #$03,D2
 BRA.w JL_0_B59E
errorbytes2 JMP errorbytes

;JL_0_B4C4:   BSR.w JL_0_B450      ;if a.b=$90 bug
;  CMP.l #$7F,D0
;   BGT.w JL_0_B4DC
;  CMP.l #$FFFFFF80,D0
;   BGE.w JL_0_B59E
;JL_0_B4DC:  MOVEQ.l #$02,D2
;  CMP.l #MaxWordSgnd,D0
;   BGT.w JL_0_B4F2
;  CMP.l #$FFFF8000,D0
;   BGE.w JL_0_B59E
;JL_0_B4F2:  MOVEQ.l #$03,D2
; BRA.w JL_0_B59E

JL_0_B4F8:  TST.w D6
   BNE.w JL_0_B510
   BSR.w JL_0_B450
 BRA.w JL_0_B4DC

JL_0_B506:
  BSR.w JL_0_B450
  TST.w D6
  BEQ.w JL_0_B560
  JL_0_B510:
  CMP.l #MaxWordSgnd,D0
   BGT.w JL_0_B5A0
  CMP.l #$FFFF8000,D0
   BLT.w JL_0_B5A0
  MOVE.w D0,-(A7)
   JSR -$24(A6)
  MOVE.l D0,D1
  MOVE.l D3,D0
   JSR -$48(A6)
  MOVE.l #$80000051,D1
   JSR -$4E(A6)
   JSR -$1E(A6)
   BEQ.w JL_0_B55A
  CMP.l #$10000,D0
   BCC.w JL_0_B55A
  MOVE.w D0,D1
  MOVE.w (A7)+,D0
  SWAP D0
  MOVE.w D1,D0
  BRA.w JL_0_B59E

  JL_0_B55A:
  ADDQ.w #2,A7
  BRA.w JL_0_B5A0

  JL_0_B560:
  CMP.l #MaxWordSgnd,D0
   BGT.w JL_0_B4F2
  CMP.l #$FFFF8000,D0
   BLT.w JL_0_B4F2
  SWAP D0
  BRA.w JL_0_B59E

  JL_0_B57A:
  TST.w D6
  BNE.w JL_0_B5A0
  MOVE.l D3,D0
  BRA.w JL_0_B59E

  JL_0_B586:
  TST.w D6
  BNE.w JL_0_B5A0
  MOVE.l D3,D0
  MOVEA.l _mathffpbase,A6
  JSR -$24(A6)
  MOVE.l D0,D3
  BRA.w JL_0_B5A0

  JL_0_B59E:
  RTS

  JL_0_B5A0:
  MOVEQ.l #$05,D2
  MOVE.l D3,D0
RTS

Ds.l 1
AL_0_B5AA:  Ds.l 1
AL_0_B5AE:  Ds.l 1
AL_0_B5B2:  Ds.l 1
AL_0_B5B6:  Ds.w 1
AL_0_B5B8:  Ds.l 1
JL_0_B5BC:
  MOVE.l destpointer,AL_0_B5AA
  MOVE.l hunkoffsetbase,AL_0_B5AE
RTS

JL_0_B5D2:
  MOVEM.l D0-D1/A0-A1,-(A7)
  MOVE.l destpointer,D0
  MOVE.l AL_0_B5AA(PC),D1
  MOVE.l D1,destpointer
  SUB.l D1,D0
  MOVE.w D0,AL_0_B5B6
   BEQ.w JL_0_B636
  MOVE.w dontwrite,D1
   BNE.w JL_0_B636
   CMP.w #1000,AL_0_B5B6
   BGE JL_0_805C
   MOVE.l AL_0_B5B8,d0
   BNE 'nomem
   MOVE.l #1024,d0
  MOVEQ.l #$01,D1
  MOVEA.l _execbase,A6
  MOVE.l mempool,a0
  JSR _AllocPooled(a6)
   ;jsr AJL_0_4B6C
  MOVE.l D0,AL_0_B5B8
 'nomem
  MOVEA.l D0,A0
  MOVEA.l AL_0_B5AA,A1
  MOVE.l A1,destpointer
  MOVE.w AL_0_B5B6,D0
  LSR.w #1,D0
  SUBQ.w #1,D0
  JL_0_B626:
    MOVE.w (A1)+,(A0)+
  DBF D0,JL_0_B626
  MOVE.l hunkoffsetbase,AL_0_B5B2
  JL_0_B636:
  MOVEM.l (A7)+,D0-D1/A0-A1
RTS

JL_0_B63C:
  MOVEM.l D0-D1/A0-A1,-(A7)
  MOVEQ.l #$00,D0
  MOVE.w AL_0_B5B6,D0
   BEQ.w JL_0_B6D8
  MOVE.l destpointer,D1
  ADD.l D0,destpointer
  TST.w dontwrite
   BNE.w JL_0_B6D8
  LSR.w #1,D0
  SUBQ.w #1,D0
  MOVEA.l D1,A1
  MOVEA.l AL_0_B5B8,A0

  JL_0_B66E:
    CMPA.l destbufferend,A1
    BCS.w JL_0_B684

    MOVE.w #$FFFF,dontwrite
    BRA.w JL_0_B6D8

    JL_0_B684:
    MOVE.w (A0)+,(A1)+     ;copylibcode
  DBF D0,JL_0_B66E

  SUB.l AL_0_B5AA,D1
  BEQ.w JL_0_B6C2
  MOVEA.l AL_0_B5B2,A0
  JL_0_B69A:
  CMPA.l AL_0_B5AE,A0
  BEQ.w JL_0_B6C2
  MOVEA.l $4(A0),A1
  ADDA.l destbufferstart,A1
  CMPA.l destbufferend,A1
  BCC.w JL_0_B6BC
  ADD.l D1,$4(A0)

  JL_0_B6BC:
  MOVEA.l (A0),A0
  BRA.w JL_0_B69A

  JL_0_B6C2:
  MOVEA.l AL_0_B5B8,A1
  MOVEQ.l #$00,D0
  MOVE.w AL_0_B5B6,D0
  MOVEA.l _execbase,A6
  MOVE.l mempool,a0
   ;JSR _FreePooled(A6)

  JL_0_B6D8:
  MOVEM.l (A7)+,D0-D1/A0-A1
RTS

JL_0_B6DE:
  MOVE.l D1,-(A7)     ;array mul
  MOVEQ.l #$00,D2
  MOVEQ.l #$0F,D3
  JL_0_B6E4:
    LSL.w #1,D1
    BCC.w JL_0_B6EE
    ADDQ.w #1,D2
    MOVE.w D3,D4
    JL_0_B6EE:
  DBF D3,JL_0_B6E4

  SUBQ.w #1,D2
   BNE.w JL_0_B726
  ADDQ.w #4,A7
  MOVE.w D4,D1
   BEQ.w JL_0_B724
  CMP.w #$8,D1
   BCS.w JL_0_B712
  SUBI.w #$8,D1
   BSR.w JL_0_B712
  MOVEQ.l #$00,D1
  JL_0_B712:  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$E188,D1
  OR.w regnum,D1
  BRA.w writeword

  JL_0_B724:
RTS

JL_0_B726:
  MOVEQ #0,d1
  MOVE.w regnum,D1
  LSL.l #8,D1
  ;LSL.l #1,D1
  LSL.l #4,d1
  ;ORI.w #$C0FC,D1
  OR.l #$4c3c0000,d1
  OR.w regnum,d1
  BSR.w writelong
  MOVE.l (A7)+,D1
 ;BRA.w writeword
  BRA writelong

  JL_0_B73E:
  MOVE.l destpointer,-(A7)
  MOVEQ.l #-$01,D7
  JL_0_B746:
    BSR.w JL_0_B926
     BEQ.w JL_0_B8A4
    TST.w $C(A2)
     BPL.w JL_0_B746

    MOVE.l $16(A2),D1
    BEQ.w JL_0_B746

    MOVE.w $4(A2),D1          ; check state in D1 and do some things
    CMP.w #-$2,D1
     BNE.w JL_0_B772
    BSR.w JL_0_B904
    BRA.w JL_0_B7FE
    JL_0_B772:

    CMP.w #-$5C4,D1
     BNE.w JL_0_B790
    MOVE.w #$7000,D1
    BTST #$7,autorun
    SNE D1
    BSR.w writeword
    BRA.w JL_0_B7FE
    JL_0_B790:

    CMP.w #-$12D,D1
     BNE.w JL_0_B7A0
    BSR.w JL_0_B8FA
    BRA.w JL_0_B7FE
    JL_0_B7A0:

    CMP.w #-$1F5,D1
     BNE.w JL_0_B7C2
    MOVE.w #$203C,D1
    BSR.w writeword
    BSR.w JL_0_791C
    MOVE.l AL_0_EC32,D1
    BSR.w writelong
    BRA.w JL_0_B7FE
    JL_0_B7C2:

    CMP.w #-$3E9,D1
     BNE.w JL_0_B7E4
    MOVE.w #$203C,D1
    BSR.w writeword
    BSR.w JL_0_791C
    MOVE.l AL_0_E8E2,D1
    BSR.w writelong
    BRA.w JL_0_B7FE
    JL_0_B7E4:

    CMP.w #$1,D1
     BNE.w JL_0_B7FE
    MOVE.w #$203C,D1
    BSR.w writeword
    MOVE.l ptr_seg_debugger,D1
    BSR.w writelong

    JL_0_B7FE:
    MOVE.l $16(A2),D1
    MOVE.w #$FFFF,AL_0_EC22
    BSR.w Amakelibsub
    CMPI.w #$FFFE,$4(A2)
     BNE.w JL_0_B83A
    MOVE.l AL_0_50C8,D1
     BEQ.w JL_0_B83A
    MOVE.w AL_0_B8EE,D1
    BSR.w writeword
    BSR.w JL_0_791C
    MOVE.l AL_0_50C8,D1
    BSR.w writelong
    JL_0_B83A:

    MOVE.w #$2B40,D1
    TST.w $1A(A2)
     BEQ.w JL_0_B746
     BPL.w JL_0_B84E
    MOVE.w #$3B40,D1
    JL_0_B84E:

    BSR.w writeword
    MOVE.w $A(A2),D1
     BSR.w writeword
    CMPI.w #$FFFA,$4(A2)
     BNE.w JL_0_B746
    MOVE.w D7,-(A7)
    MOVE.w AL_0_EC3E,D4
     BEQ.w JL_0_B882
    MOVE.l AL_0_EC40,D3
     BSR.w JL_0_74E2
    MOVE.w #$C500,D1
     BSR.w tokejsr2
    JL_0_B882:

    MOVE.w AL_0_E842,D4
     BEQ.w JL_0_B89E
    MOVE.l AL_0_E83C,D3
     BSR.w JL_0_74E2
    MOVE.w #$CF00,D1
     BSR.w tokejsr2
    JL_0_B89E:
    MOVE.w (A7)+,D7
  BRA.w JL_0_B746

  JL_0_B8A4:
  MOVE.l destpointer,D1
  CMP.l (A7),D1
   BNE.w JL_0_B8BC
  MOVE.w #$0008,AL_0_E852
  BRA.w JL_0_B8E6
  JL_0_B8BC:

  CLR.w AL_0_E852
  MOVE.w dontwrite,D1
   BNE.w JL_0_B8DE
  TST.l newinitaddr
   BEQ 'l10
  MOVE.l newinitaddr,D2
  SUB.l destbufferstart,D2
  ADDQ.l #2,d2
  MOVEA.l newinitaddr,A0     ;write newinitcode
  ;MOVE.w #$2f00,(a0)+
  MOVE.w #$4EB9,(A0)+
  MOVE.l (A7),(A0)+
  ;MOVE.l #$202f0048,(a0)
  BRA 'l20
 'l10

  MOVEA.l destbufferstart,A0     ;write initcode
  TST.b saved0
  BEQ 'l1
  MOVE.w #$23c0,(a0)+
  MOVE.l a0,a1
  ADDQ.l #6,a1
  MOVE.l a1,(a0)+
  MOVEQ.l #$02,D2
  BSR.w addhunkoffset
  MOVE.w #$6004,(a0)+
  MOVE.l #$4e714e71,(a0)+
  'l1
  MOVE.w #$4EB9,(A0)+
  MOVE.l (A7),(A0)+
  MOVEQ #2,d2
  TST.b saved0
  BEQ 'l20
  MOVEQ.l #14,D2
 'l2
  BSR.w addhunkoffset
  MOVE.w #$2039,(a0)+
  MOVE.l a1,(a0)+
  MOVEQ.l #20,d2
 'l20
  BSR.w addhunkoffset
  JL_0_B8DE:
  MOVE.w #$4E75,D1
  BSR.w writeword
  JL_0_B8E6:
  ADDQ.w #4,A7
RTS


Dc.b 34,"-",0,0
AL_0_B8EE:
  Dc.b "#"
  Dc.b $CD,$00,$00 ;...
  Ds.w 1
  Dc.b "$|",0,0
  Ds.w 1

JL_0_B8FA:
  MOVE.l stringbuffer,D1
  BRA.w JL_0_B916

  JL_0_B904:
  MOVEQ.l #$00,D1
  MOVE.w globalvarpointer,D1
  SUBI.w #$8000,D1
  BNE.w JL_0_B916
    MOVEQ.l #$08,D1
  JL_0_B916:
  MOVE.l D1,-(A7)
  MOVE.w #$203C,D1
  BSR.w writeword
  MOVE.l (A7)+,D1
BRA.w writelong

JL_0_B926:
  MOVEQ.l #$00,D1
  MOVEA.l libpointer,A1
  JL_0_B92E:
    CMPA.w #$0,A1
    BEQ.w JL_0_B952
      CMP.w $4(A1),D7
      BLS.w JL_0_B94C
        CMP.w $4(A1),D1
        BCC.w JL_0_B94C
          MOVE.w $4(A1),D1
          MOVEA.l A1,A2
    JL_0_B94C:
    MOVEA.l (A1),A1
  BRA.w JL_0_B92E

  JL_0_B952:
  MOVE.w D1,D7
RTS

JL_0_B956:
  MOVEQ.l #-$01,D1
  MOVEA.l libpointer,A1
  JL_0_B95E:
    CMPA.w #$0,A1
     BEQ.w JL_0_B982
    CMP.w $4(A1),D7
     BCC.w JL_0_B97C
    CMP.w $4(A1),D1
     BLS.w JL_0_B97C
    MOVE.w $4(A1),D1
    MOVEA.l A1,A2
    JL_0_B97C:

    MOVEA.l (A1),A1
  BRA.w JL_0_B95E

  JL_0_B982:
  MOVE.w D1,D7
  CMP.w #-$1,D1
    RTS

  JL_0_B98A:
  ADDQ.w #1,globalvarpointer
  BCLR #$0,AL_0_2B39
  MOVEQ.l #$00,D7
  JL_0_B99A:
    BSR.w JL_0_B956
    BEQ.w JL_0_BA74
    TST.w $C(A2)
    BPL.w JL_0_B99A
    MOVEA.l A2,A1
    ADDA.l $12(A1),A1
    TST.w -$2(A1)
    BEQ.w JL_0_BA34
    MOVE.l -$A(A1),D1
    LEA $6(A2,D1.L),A3
    JL_0_B9C0:
      TST.w (A3)+
      BEQ.w JL_0_B9CC
        ADDQ.w #2,A3
    BRA.w JL_0_B9C0
    JL_0_B9CC:
    TST.l $4(A3)
    BEQ.w JL_0_BA34
      MOVE.w L_0_BA76(PC),D1
      BSR.w writeword
      MOVE.w -$4(A1),D1
      BSR.w writeword
      MOVE.l AL_0_C3DC,D1
      MOVE.w -$6(A1),D1
      BSR.w writelong
      MOVE.l destpointer,-(A7)
      MOVEQ.l #$01,D1
      MOVE.w -$2(A1),D2
      LSL.w D2,D1
      MOVE.w D1,-(A7)
      MOVE.l -$A(A1),D1
      BSR.w Amakelibsub
      MOVE.w L_0_BA82(PC),D1
      BSR.w writeword
      MOVE.w (A7)+,D1
      BSR.w writeword
      MOVE.l L_0_BA7A(PC),D1
      BSR.w writelong
      MOVE.l (A7)+,D1
      SUB.l destpointer,D1
      BSR.w writeword
      MOVE.w L_0_BA80(PC),D1
      BSR.w writeword
    JL_0_BA34:

    MOVE.l $1C(A2),D1
    BEQ.w JL_0_B99A

    MOVE.w $4(A2),D1
    CMP.w #-$2,D1
    BNE.w JL_0_BA50
      BSR.w JL_0_B904
      BRA.w JL_0_BA60
    JL_0_BA50:

    CMP.w #-$12D,D1
    BNE.w JL_0_BA60
      BSR.w JL_0_B8FA
      BRA.w JL_0_BA60
    JL_0_BA60:

    MOVE.l $1C(A2),D1
    MOVE.w #$FFFF,AL_0_EC22
    BSR.w Amakelibsub
  BRA.w JL_0_B99A

  JL_0_BA74:
RTS

L_0_BA76:  Dc.b "?<",0,0
L_0_BA7A:  Dc.b "SWf",0
           Dc.b $FF ;.
           Dc.b $FC
L_0_BA80:  Dc.b "TO"
L_0_BA82:  Dc.b "G"
           Dc.b $EB,$00 ;..
           Dc.b $00 ;.

AJL_0_BA86:
  TST.b debugmode
   BEQ.b JL_0_BA9E
  TST.w debugversion
   BNE.b JL_0_BA9E
  MOVE.w #$C308,D1
  BRA.w Atokejsr

  JL_0_BA9E:
RTS

tokejsr2:
  MOVE.w #$FFFF,AL_0_EC22
Atokejsr:
  MOVEM.l D0-d7/A0-a6,-(A7)
  MOVE.b #1,nostringopt
  JSR searchinstr
  MOVE.l A3,D1
  SUB.l A2,D1
  BSR.w Amakelibsub
  MOVEM.l (A7)+,d0-d7/a0-a6
RTS

userjsr:
  MOVE.l AL_0_BAF4,-(A7)    ;library write
  MOVE.l A2,AL_0_BAF4

  MOVEA.l A1,A2
  MOVE.w (A2)+,D1
  MOVE.l a2,lastinstruction
  ANDI.w #$FF,D1
  ADDA.w D1,A2
  EXG.l D0,A2
  ADDQ.l #1,D0
  BCLR #$0,D0
  EXG.l D0,A2
BRA.w JL_0_BB08

AJL_0_BAE2:
  MOVE.l AL_0_BAF4,-(A7)
  MOVE.l A2,AL_0_BAF4
  MOVEA.l A3,A2
BRA.w JL_0_BB08

scantype
  MOVE.l a1,-(a7)
 'more
  MOVE.l d0,a0
  MOVE.l $a(a0),d0
  MOVE.l d0,a1
  CMP.l #8,4(a1)
  BLE 'norec
  MOVE.l a0,-(a7)
  MOVE.l typebase,-(a7)
  MOVEQ #0,d0
  MOVE.w 4(a0),d0
  ADD.l d0,typebase
  MOVE.l $4(a1),d0
  BSR scantype
  MOVE.l (a7)+,typebase
  MOVE.l (a7)+,a0
 'norec
  CMP.l #newtype_string,d0
  BNE 'nostring
  ADDQ #2,a2offset
  MOVE.l #$3f3c0000,d1
  MOVEQ #0,d0
  MOVE.w 4(a0),d0
  ADD.l typebase,d0
  MOVE.w d0,d1
  BSR writelong
  TST.b debugmode
  BEQ 'l1a
  MOVE.l d1,-(a7)
  MOVE.l #$c308,d1
  JSR Atokejsr
  MOVE.l (a7)+,d1
 'l1a
  TST.w 8(a0)
  BEQ 'nostring
  MOVEM.l d2/d3,-(a7)
  MOVE.l d1,d2
  MOVEQ #0,d3
  MOVE.w 8(a0),d3
  SUBQ.l #1,d3
  BEQ 'nostring2
 'loop
  ADDQ.l #4,d2
  MOVE.l d2,d1
  BSR writelong
  TST.b debugmode
  BEQ 'l1
  MOVE.l #$c308,d1
  JSR Atokejsr
 'l1
  ADDQ #2,a2offset
  SUBQ.l #1,d3
  BNE 'loop
 'nostring2
  MOVEM.l (a7)+,d2/d3
 'nostring
  MOVE.l (a0),d0
  BNE 'more
  MOVE.l (a7)+,a1
RTS

AL_0_BAF4:   Ds.l 1
Amakelibsub:
  MOVE.l AL_0_BAF4,-(A7)   ;lib in a2, sub offset in d1
  MOVE.l A2,AL_0_BAF4
  LEA $6(A2,D1.L),A2
  JL_0_BB08:
.writetype
  CMP.l #$3e19436c,$1c-8(a2)   ;clear type
  BEQ 'dowritevar
  CMP.l #$3e18436f,$1c-8(a2)   ;copy type
  BEQ 'dowritevar
  CMP.l #$3e175265,$1c(a2)
  BEQ 'dowritevar
  CMP.l #$3e165772,$1c(a2)
  BNE 'nowritef
 'dowritevar
  MOVEM.l a0-a2/d2,-(a7)
  MOVEQ #0,d1
  MOVE.l #0,typebase
  MOVE.l $a(a3),a0
  MOVE.l $4(a0),d0
  CMP.l #8,d0
  BLE 'notype
  BSR scantype

 'notype:
  MOVE.l #$3f3c0000,d1
  MOVE.w a2offset,d1
  BSR writelong
  MOVE.l #$3f3c0000,d1
  MOVE.l $a(a3),a0
  MOVE.w 8(a0),d1
  BSR writelong
  MOVE.l #$3f3cab12,d1
  BSR writelong
  ADDQ.w #6,a2offset
  MOVEM.l (a7)+,a0-a2/d2

 'nowritef
  TST.b fpu
  BEQ 'nofpu2
  CMP.l #$496e7400,$1a(a2)
  BNE 'noint
  MOVEQ #0,d1
  SUBQ.l #8,destpointer            ;fpu int
  CLR.w a2offset
  CMP.b #2,d2
  BGT 'noword
  MOVE.w #$48c0,d1
  OR.w regnumstore,d1
  BSR writeword
  BRA 'exit2

'noword CMP.b #3,d2
        BNE 'nolong
        BRA 'exit2
'nolong CMP.b #4,d2
        BNE 'noquick
        MOVE.w #$e080,d1
        OR.w regnumstore,d1
        BSR writeword
        MOVE.w #$e080,d1
        OR.w regnumstore,d1
        BSR writeword
        BRA 'exit2
'noquick
        MOVEQ #0,d0
        MOVEQ #0,d1
        MOVE.w regnumstore,d0
        ASL.l #7,d0
        OR.l #$f23c4428,d1          ;fsub.s 0.5,fpx
        OR.l d0,d1
        ;BSR writelong
        MOVE.l #$3f000000,d1
        ;BSR writelong
        MOVEQ #0,d0
        MOVEQ #0,d1
        MOVE.w regnumstore,d0
        ASL.l #7,d0
        MOVE.l d0,d1
        OR.l #$f2000003,d1          ;fintrz fpx
        ASL.l #3,d0
        OR.l d0,d1
        BSR writelong
        MOVEQ #0,d0
        MOVE.w regnumstore,d0
        ASL.l #7,d0
        MOVE.l #$f2006000,d1        ;fmove.l fp0,d0
        OR.l d0,d1
        ASL.l #1,d0
        ASL.l #8,d0
        OR.l d0,d1
        BRA 'exit
 'noint
  CMP.w #$3c01,24(a2)
  BNE 'noval
  MOVE.l a2,-(a7)
  BSR.w JL_0_BB14
  MOVE.l (a7)+,a2
  BRA 'exit2
;  MOVE.l (a7),a2
;  MOVE.w (a2),-(a7)         ;fpu val
;  MOVE.w #$c0,(a2)
;  BSR.w JL_0_BCF4
;  MOVE.l #$4eaeff9a,d1      ;SPtieee
;  BSR writelong
;  MOVE.l 2(a7),a2
;  MOVE.w (a7)+,(a2)
;  MOVE.l (a7)+,a2
;  MOVE.l #$4a876604,d1
;  BSR writelong
;  MOVE.l #$f2004400,d1      ;fmove.s d0,fp0
;  BRA 'exit
 'noval
  CMP.l #$41627300,$1a(a2)
  BNE 'noabs
  MOVEQ #0,d1
  MOVE.w regnumstore,d1
  MOVE.w d1,d0
  ASL.w #7,d1
  ASL.w #8,d0
  ASL.w #2,d0
  OR.w d0,d1
  SUBQ.l #8,destpointer           ;fpu abs
  MOVEM.l d3/d1,-(a7)
  MOVE.w #5,d3
  EXG d2,d3
  MOVE.w regnum,-(a7)
  MOVE.w regnumstore,regnum
  BSR writeconvertcode
  MOVE.w (a7)+,regnum
  EXG d2,d3
  MOVEM.l (a7)+,d3/d1
  OR.l #$f2000018,d1
  CLR.w a2offset
  BRA 'exit

 'noabs
  CMP.b #5,d2
  BNE 'nofpu2
  MOVE.b 24(a2),d0
  CMP.b #$60,d0                   ;nolib $edxx
  BNE 'nofpu
  MOVEQ #0,d1
  MOVE.w regnumstore,d1
  MOVE.w d1,d0
  ASL.w #7,d1
  ASL.w #8,d0
  ASL.w #2,d0
  OR.w d0,d1
  MOVE.b 25(a2),d0
  CMP.b #5,d0
  BNE 'nocos
  OR.l #$f200001d,d1                          ;fpu cos
  BRA 'exit

 'nocos
  CMP.b #$c,d0
  BNE 'nosqr
  OR.l #$f2000004,d1                          ;fpu sqr
  BRA 'exit

 'nosqr
  CMP.b #$d,d0
  BNE 'notan
  OR.l #$f200000f,d1                          ;fpu tan
  BRA 'exit

 'notan
  CMP.b #$a,d0
  BNE 'nosin
  OR.l #$f200000e,d1                          ;fpu sin
  BRA 'exit

 'nosin
  CMP.b #$3,d0
  BNE 'noasin
  OR.l #$f200000c,d1                          ;fpu asin
  BRA 'exit

 'noasin
  CMP.b #$2,d0
  BNE 'noacos
  OR.l #$f200001c,d1                          ;fpu acos
  BRA 'exit

 'noacos
  CMP.b #$4,d0
  BNE 'noatan
  OR.l #$f200000a,d1                          ;fpu atan
  BRA 'exit

 'noatan
  CMP.b #$e,d0
  BNE 'nohtan
  OR.l #$f2000009,d1                          ;fpu htan
  BRA 'exit

 'nohtan
  CMP.b #$6,d0
  BNE 'nohcos
  OR.l #$f2000019,d1                          ;fpu hcos
  BRA 'exit

 'nohcos
  CMP.b #$b,d0
  BNE 'nohsin
  OR.l #$f2000002,d1                          ;fpu hsin
  BRA 'exit

 'nohsin
  CMP.b #$9,d0
  BNE 'nolog
  OR.l #$f2000014,d1                          ;fpu log
  BRA 'exit

 'nolog
  CMP.b #$8,d0
  BNE 'nolog10
  OR.l #$f2000015,d1                          ;fpu log10
  BRA 'exit

 'nolog10
  CMP.b #$7,d0
  BNE 'noexp
  OR.l #$f2000010,d1                          ;fpu exp
  BRA 'exit

 'noexp
  LEA fpuerr,a0
  MOVE.l a0,-(a7)
  JMP handle_compileerror
  BRA 'exit

 'nofpu
  CMP.b #$3c,d0
  BNE 'nofpu2
  MOVEQ #0,d1
      MOVE.w regnumstore,d1
      MOVE.w d1,d0
      ASL.w #7,d1
      ASL.w #8,d0
      ASL.w #2,d0
      OR.w d0,d1
      CMP.b #$03,25(a2)
      BNE 'nosgn
               ;BRA 'noexp
      SUBQ.l #8,destpointer            ;fpu sgn
        OR.l #$f200003a,d1
        BSR writelong
        CLR.w a2offset
         MOVE.l #$F28E0006,d1
         BSR writelong
  MOVE.l #$7000600a,d1
  BSR writelong
  MOVE.l #$70014840,d1
  BSR writelong
  MOVE.l #$F292,d1
  BSR writeword
  MOVE.l #$000470FF,d1
  BRA 'exit

 'nosgn
  CMP.l #"Frac",$1a(a2)
  BNE 'nofrac
  JMP notwork
;        MOVE.l d0,-(a7)
;        MOVEQ #0,d1
;        MOVE.w regnumstore,d1
;        ASL.w #7,d1
;        OR.l #$f23c4428,d1
;        ;OR.l #$f2000380,d1
;        BSR writelong               ;fsub.s #-0.5,fp0
;        MOVE.l #$3f000000,d1
;        BSR writelong
;        MOVE.w regnumstore,d1
;        ASL.l #8,d1
;        ASL.l #8,d1
;        OR.l #$f2006000,d1          ;fmove.l fp0,d0
;        MOVE.w regnumstore,d0
;        ASL.w #7,d0
;        OR.w d0,d1
;        ;OR.l #$f2000380,d1              ;fmove.x fpx,fp7
;        BSR writelong
;        ;MOVE.l #$f2001f83,d1               ;fintrz,fp7
;        ;BSR writelong
;        MOVEQ #0,d1
;        MOVE.w regnumstore,d1
;        ASL.w #7,d1
;        OR.l #$f23c4422,d1
;
;        BSR writelong               ;fadd.s #-0.5,fp0
;        MOVE.l #$3f000000,d1
;        BSR writelong
;        MOVEQ #0,d1
;        MOVE.w regnumstore,d1
;        ASL.l #8,d1
;        ASL.l #8,d1                     ;fsub.l d0,fp0
;        OR.l #$f2004028,d1
;        MOVE.w regnumstore,d0
;        ASL.w #7,d0
;        OR.w d0,d1
;        ;SUBQ.l #8,destpointer           ;fpu frac
;        CLR.w a2offset
;        MOVE.l (a7)+,d0
  BRA 'exit
 'nofrac
 'nofpu2
  BSR.w JL_0_BB14           ;write lib code
  MOVE.l (A7)+,AL_0_BAF4
  RTS

 'exit
  BSR writelong

 'exit2
  MOVE.l (A7)+,AL_0_BAF4
RTS


JL_0_BB14:   BSR.w JL_0_BCF4
  TST.b debugmode
   BEQ.w JL_0_BB76
  MOVE.l (A2),D1
  OR.l $8(A2),D1
  BCLR #$0,D1
  TST.l D1
   BEQ.w JL_0_BB76
  MOVE.l (A2)+,D1
  BTST #$0,D1
   BEQ.w JL_0_BB60
  TST.w AL_0_BCF2
   BPL.w JL_0_7F6C
  TST.b debugmode
   BEQ.w JL_0_BB5C
  MOVE.l D1,-(A7)
  MOVE.w #$C311,D1
   BSR.w JL_0_BC9A
  MOVE.l (A7)+,D1
JL_0_BB5C:  BCLR #$0,D1
JL_0_BB60:  TST.l D1
   BSR.w JL_0_BBC6
  MOVE.l (A2)+,D1
   BSR.w JL_0_BB98
  MOVE.l (A2)+,D1
   BSR.w JL_0_BBC6
 BRA.w JL_0_BB90

JL_0_BB76:  BTST #$0,$3(A2)
   BEQ.w JL_0_BB88
  MOVE.w AL_0_BCF2(PC),D1
   BPL.w JL_0_7F6C
JL_0_BB88:  MOVE.l $4(A2),D1
   BSR.w JL_0_BB98
JL_0_BB90:  MOVEA.l AL_0_BAF4,A2
 RTS

JL_0_BB98:  BTST #$0,D1
   BEQ.w JL_0_BBC4
  TST.w AL_0_BCF2
   BMI.w JL_0_7F8E
  TST.b debugmode
   BEQ.w JL_0_BBC0
  MOVE.l D1,-(A7)
  MOVE.w #$C312,D1
   BSR.w JL_0_BC9A
  MOVE.l (A7)+,D1
JL_0_BBC0:  BCLR #$0,D1
JL_0_BBC4:  TST.l D1
JL_0_BBC6:   BEQ.w JL_0_BBD2
  MOVE.l A1,-(A7)
   BSR.w JL_0_BBD4
  MOVEA.l (A7)+,A1
JL_0_BBD2: RTS

JL_0_BBD4:  MOVEA.l AL_0_BAF4,A0
  TST.w AL_0_E32E
   BEQ.w JL_0_BBF6
  ADD.l A0,D1
  MOVE.l D1,-(A7)
  MOVE.w #$4EB9,D1
   BSR.w writeword
  MOVE.l (A7)+,D1
 BRA.w writelong

JL_0_BBF6:  LEA $0(A0,D1.L),A1
  CLR.w AL_0_BCEE
JL_0_BC00:  CMPI.b #$A0,(A1)+
   BNE.w JL_0_BC68
  TST.b (A1)+
   BEQ.w JL_0_BC18
  CMPI.b #$1,-$1(A1)
   BEQ.w JL_0_BC24
JL_0_BC18:  MOVE.w (A1)+,AL_0_BCEE
  ADDQ.l #4,D1
 BRA.w JL_0_BC00

JL_0_BC24:  TST.w AL_0_BCF2
   BPL.w JL_0_BC4A
  TST.b debugmode
   BEQ.w JL_0_BC40
  MOVE.w #$C311,D1
   BSR.w JL_0_BC9A
JL_0_BC40:  MOVE.l (A1)+,D1
  LEA $0(A0,D1.L),A1
BRA.w JL_0_BC00

JL_0_BC4A:
  TST.b debugmode
   BEQ.w JL_0_BC60
  MOVE.l D1,-(A7)
  MOVE.w #$C312,D1
   BSR.w JL_0_BC9A
  MOVE.l (A7)+,D1
  JL_0_BC60:
  ADDQ.w #4,A1
  ADDQ.l #6,D1
BRA.w JL_0_BC00

JL_0_BC68:  TST.w AL_0_BCEE
   BEQ.w JL_0_BC7E
  SUBQ.w #1,A1
  MOVEA.l A1,A0
  ADDA.w AL_0_BCEE(PC),A1
 BRA.w JL_0_95BA

JL_0_BC7E:
  MOVEM.l a0/D1,-(A7)
  TST.w debugversion
  BEQ 'l11
  BTST #$7,link_debuginfo
  BEQ.w 'l11
  MOVE.l lastinstruction,d1
  BEQ 'l11
  CLR.l lastinstruction
  CMP.l #$e000,d1
  BGE 'ln99
  LEA notf,a0
  CMP.l #$c601,d1
  BNE 'ln1
  LEA strcpy,a0
  BRA 'ln3
'ln1 CMP.l #$c700,d1
  BNE 'ln2
  LEA strvar,a0
  BRA 'ln3
'ln2
  CMP.l #$ce00,d1
  BNE 'ln4
  LEA strcmp,a0
  BRA 'ln3
'ln4
  CMP.l #$ca00,d1
  BNE 'ln5
  LEA qmul,a0
  BRA 'ln3
'ln5  CMP.l #$d000,d1
     BNE 'ln6
     LEA _MaxLen,a0
     BRA 'ln3
'ln6  CMP.l #$cb00,d1
  BNE 'ln3
  LEA qdiv,a0
  BRA 'ln3
'ln99 MOVE.l d1,a0
  LEA $8(a0),a0
'l1  CMP.w #$ffff,(a0)+
  BNE 'l1
  LEA 6(a0),a0
'ln3 MOVEM.l a1/a2/d7/d2,-(a7)
  MOVEQ #0,d2
  LEA ptr_parameterstore,a1
'l2 ADDQ.l #1,d2
  MOVE.b (a0)+,(a1)+
  BNE 'l2
  MOVE.w #"__",-1(a1)
  ADDQ.l #2,d2
  CLR.b 1(a1)
  JSR findlabel2
  BEQ 'l3
  JSR addlabelhash
'l3  CLR.l 4(a2)
  MOVE.l $14(a7),a0
  MOVE.l $10(a7),d1
  SUB.l $12(a0),d1
  ADD.l $28(a0),d1
  MOVE.l d1,8(a2)
  MOVEM.l (a7)+,a1/a2/d7/d2
'l11

                                             ;peek/poke
  TST.b typecheck
  BEQ 'p1
  ;MOVE.l lasttoken,d1
  ;CMP.l #$da01,d1           ;poke
  ;BEQ 'lp1
  ;CMP.l #$da02,d1           ;peek
  ;BNE 'p1
'lp1
  TST.b peekaddrsize
  BEQ 'p1
  CMP.b #3,peekaddrsize
  BNE errormsg_onlylong
  CLR.b peekaddrsize
;  BEQ 'p1
;'p2
;  CMP.w #3,lasttoken
;  BNE errormsg_onlylong
'p1
   TST.b fpu
  BNE 'optf
  TST.b fast
  BEQ JL11a2

'optf
  CNIF #optibreak
   ILLEGAL
   CEND
  CMP.l #"Poke",20(a2)        ;poke
  BNE peekopt
  TST.b 24(a2)
  BNE peekopt
  CMP.b #3,d2
  BNE 'lw1
'll1  MOVE.l #$21821990,d1
  BRA.s 'lpx
'lw1
  CMP.b #2,d2
  BNE 'lb1
  MOVE.l #$31821990,d1
  BRA.s 'lpx
'lb1 CMP.b #1,d2
  BNE 'lp3
  MOVE.l #$11821990,d1
  BRA.s 'lpx
'lp3 CMP.b #5,d2
    BNE JL11a2
    TST.b fpu
    BEQ 'll1
     MOVE.l destpointer,a4
    CMP.l #$f22d4500,-6(a4)
    BNE 'noglob
    TST.b doublepeek
    BNE 'noglob
    MOVE.w -2(a4),-4(a4)
    MOVE.w #$21ad,-6(a4)
    MOVE.w #$1990,-2(a4)
    MOVE.w #9,peeksize
    ADDQ #8,a7
    RTS
'noglob
    CMP.l #$f22c4500,-6(a4)
    BNE 'nolocal
    MOVE.w -2(a4),-4(a4)
    TST.b doublepeek       ;dont move longfix on double floats
    BNE 'nolocal
    MOVE.w #$21ac,-6(a4)
    MOVE.w #$1990,-2(a4)
    MOVE.w #9,peeksize
    ADDQ #8,a7
    RTS

'nolocal
    MOVE.w #$f230,d1
    BSR writeword
  MOVE.l #$65001990,d1
  TST.b doublepeek
  BEQ 'lpx
  OR.l   #$10000000,d1
'lpx
exitjsr  ADDQ #8,a7
  MOVE.w #9,peeksize
  BRA writelong
peekopt
  CMP.l #"Peek",20(a2)
  BNE 'l10
  TST.b 24(a2)
  BNE 'l10
  CMP.w #7,peeksize
  BEQ 'l10
   CMP.w #3,peeksize
   BNE.s 'lw1
'll1 MOVE.l #$20301990,d1
   BRA exitjsr
'lw1 CMP.w #2,peeksize
   BNE.s 'lb1
   MOVE.l #$30301990,d1
   BRA exitjsr
'lb1 CMP.w #1,peeksize
   BNE.s 'lf1
   MOVE.l #$10301990,d1
  BRA exitjsr
'lf1 CMP.w #5,peeksize
   BNE 'l10
   TST.b fpu
   BEQ 'll1
   MOVE.w #$f230,d1
   BSR writeword
   MOVEQ #0,d1
   MOVE.w tempregnum,d1
   ASL.l #7,d1
   ASL.l #8,d1
   ASL.l #8,d1
   ADD.l #$44001990,d1
    TST.b doublepeek
    BEQ 'lpx2
    OR.l   #$10000000,d1
   'lpx2
   BRA exitjsr
'l10

JL11a2   MOVE.w #$4EB9,D1
   BSR.w writeword             ;writesysjsr
  MOVEM.l (A7)+,a0/D1
   BSR.w JL_0_791C
  SUB.l $12(A0),D1
  ADD.l $28(A0),D1
 BRA.w writelong
 RTS
JL_0_BC9A:  MOVE.w D1,-(A7)
  MOVE.w L_0_BCEA(PC),D1
   BSR.w writeword
   BSR.w JL_0_BCBC
   BSR.w writeword
  MOVE.w (A7)+,D1
  MOVEM.l D0/D3-D7/A0-A2/A4,-(A7)
   BSR.w Atokejsr
  MOVEM.l (A7)+,D0/D3-D7/A0-A2/A4
 RTS

JL_0_BCBC:  MOVE.w AL_0_BCF0(PC),D1
  CMP.w #-$1,D1
   BNE.w JL_0_BCE8
  ADDQ.w #1,globalvarpointer
  BCLR #$0,AL_0_2B39
  MOVE.w globalvarpointer,D1
  MOVE.w D1,AL_0_BCF0
  ADDQ.w #2,globalvarpointer
JL_0_BCE8: RTS

L_0_BCEA:  Dc.b "Jm",0,0
AL_0_BCEE:  Ds.w 1
AL_0_BCF0:  Dc.b $FF,$FF ;..
AL_0_BCF2:  Ds.w 1
JL_0_BCF4:  MOVE.w (A2)+,D1
   BEQ.w JL_0_BD04
  MOVE.w (A2)+,D2
   BSR.w JL_0_BD06
 BRA.w JL_0_BCF4

JL_0_BD04: RTS

JL_0_BD06:  CMP.w #-$100,D2
   BCC.w JL_0_BD36
  BCLR #$F,D2
   BEQ.w JL_0_BD22
  TST.w AL_0_BCF2
   BMI.w JL_0_BD36
 RTS

JL_0_BD22:  BCLR #$E,D2
   BEQ.w JL_0_BD36
  TST.w AL_0_BCF2
   BPL.w JL_0_BD36
 RTS

JL_0_BD36:   JSR uselib
  TST.b D2
   BEQ.w JL_0_BEBA
  CMP.b #$4,D2
   BNE.w JL_0_BD56
  MOVE.w #$0004,-(A7)
  MOVE.l #$FFFFFFFA,-(A7)
 BRA.w JL_0_BD66

JL_0_BD56:  CMP.b #$3,D2
   BNE.w JL_0_BDA6
  CLR.w -(A7)
  MOVE.l #$FFFFFFFC,-(A7)
JL_0_BD66:  LSR.w #8,D2
  MOVE.w #$303C,D1
  BTST #$7,D2
   BEQ.w JL_0_BD88
  MOVE.w #$307C,D1
  CMP.w #$16,D2
   BNE.w JL_0_BD88
  MOVE.w #$FFFF,AL_0_EC22
JL_0_BD88:  ANDI.w #$7,D2
  LSL.w #8,D2
  LSL.w #1,D2
  OR.w D2,D1
   BSR.w writeword
  MOVE.l $12(A1),D1
  ADD.l (A7)+,D1
  MOVE.w $0(A1,D1.L),D1
  ADD.w (A7)+,D1
 BRA.w writeword

JL_0_BDA6:  MOVE.w D2,-(A7)
  LSR.w #8,D2
  CMP.w #$16,D2
   BNE.w JL_0_BDBA
  MOVE.w #$FFFF,AL_0_EC22
JL_0_BDBA:  MOVE.l $12(A1),D1     ;objectspace
  MOVE.w -$6(A1,D1.L),-(A7)
   BSR.w JL_0_BF18
   BSR.w writeword
  MOVE.w (A7)+,D1
  MOVE.w (A7)+,D2
  TST.b D2
   BPL.w JL_0_BE76
   BSR.w writeword
  MOVE.w D2,-(A7)
  ADDA.l $12(A1),A1
  MOVE.b D2,D1
  ANDI.w #$7,D1
  TST.b debugmode
   BEQ.w JL_0_BE1A
  MOVE.w D1,-(A7)
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$B07C,D1
   BSR.w writeword
  MOVE.w -$4(A1),D1
   BSR.w writeword
  MOVE.l AL_0_BF06(PC),D1
   BSR.w writelong
  MOVE.l A2,-(A7)
  MOVE.w #$C30A,D1
   BSR.w Atokejsr
  MOVEA.l (A7)+,A2
  MOVE.w (A7)+,D1
JL_0_BE1A:  MOVE.w -$2(A1),D2
JL_0_BE1E:  CMP.w #$9,D2
   BCS.w JL_0_BE44
  MOVEM.w D1-D2,-(A7)
  MOVEQ.l #$00,D2
  LSL.w #8,D2
  LSL.w #1,D2
  OR.w D2,D1
  OR.w L_0_BF04(PC),D1
   BSR.w writeword
  MOVEM.w (A7)+,D1-D2
  SUBQ.w #8,D2
 BRA.w JL_0_BE1E

JL_0_BE44:  MOVE.w D1,-(A7)
  OR.w #$48c0,d1
  BSR writeword
  MOVE.w (a7),d1
  TST.w D2
  BEQ.w JL_0_BE5E
  ANDI.w #$7,D2
  LSL.w #8,D2
  LSL.w #1,D2
  OR.w D2,D1
  OR.w L_0_BF04(PC),D1
   BSR.w writeword
JL_0_BE5E:  MOVE.w (A7)+,D1
  ANDI.w #$7,D1
  OR.w L_0_BF10(PC),D1
  MOVE.w (A7)+,D2
  LSL.w #1,D2
  ANDI.w #$E00,D2
  OR.w D2,D1
 BRA.w writeword

JL_0_BE76:  CMP.b #$1,D2
   BEQ.w JL_0_BEAA
  ADDQ.w #4,D1
  TST.b debugmode
   BEQ.w JL_0_BEAA
   BSR.w writeword
  SWAP D1
  MOVE.w L_0_BEAE(PC),D1
  SWAP D1
   BSR.w writelong
  MOVE.l L_0_BEB2(PC),D1
   BSR.w writelong
  MOVE.l L_0_BEB6(PC),D1
 BRA.w writelong

JL_0_BEAA: BRA.w writeword

L_0_BEAE:   Dc.b "J"
   Dc.b $AD,$00 ;..
   Dc.b $00 ;.
L_0_BEB2:   Dc.b "f",0,0
   Dc.b $06 ;.
L_0_BEB6:   Dc.b "p"
   Dc.b $01 ;.
   Dc.b "N@"
JL_0_BEBA:  LSR.w #8,D2
  CMP.b #$16,D2
   BNE.w JL_0_BED8
  MOVE.w $A(A1),D1
  CMP.w AL_0_EC22,D1
   BEQ.w JL_0_BF02
  MOVE.w D1,AL_0_EC22
JL_0_BED8:   BSR.w JL_0_BF18
  TST.w $1A(A1)
   BPL.w JL_0_BEF6
  CMP.w L_0_BF14(PC),D1
   BNE.w JL_0_BEF2
  SUBQ.w #2,a2offset
JL_0_BEF2:  ORI.w #$1000,D1
JL_0_BEF6:   BSR.w writeword
  MOVE.w $A(A1),D1
   BSR.w writeword
JL_0_BF02: RTS

L_0_BF04:  Dc.b $E1 ;.
  Dc.b $88 ;Dc.b $48       ;object long acsess
AL_0_BF06:  Dc.b "e",0,0
  Dc.b 8,"N"
  Dc.b $B9,$00,$00 ;...
  Ds.w 1
L_0_BF10:  Dc.b $D1,$C0,$00 ;...   old $d0 $C0,00
  Dc.b $00 ;.
L_0_BF14:  Dc.b "/-",0,0
JL_0_BF18:  CMP.b #$FF,D2
   BNE.w JL_0_BF2C
  MOVE.w L_0_BF14(PC),D1
  ADDQ.w #4,a2offset
 RTS

JL_0_BF2C:  MOVE.l A3,-(A7)
  LEA AL_0_2A5E,A3
  BTST #$4,D2
   BEQ.w JL_0_BF42
  LEA AL_0_2A62,A3
JL_0_BF42:  ANDI.w #$7,D2
  MOVE.w D2,D1
  LSL.w #8,D1
  LSL.w #1,D1
  OR.w (A3),D1
  MOVEA.l (A7)+,A3
 RTS

JL_0_BF52:  CMP.w #$3C,D0
   BCS.w JL_0_BF68
  CMP.w #$3E,D0
   BHI.w JL_0_BF68
  SUBI.w #$3C,D0
  CMP.w D0,D0
JL_0_BF68: RTS

JL_0_BF6A:   ;bsr.w JL_0_7C44
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5

  AJL_0_BF6E:
  MOVE.w regnum,-(A7)
  CLR.w regnum
  MOVE.l destpointer,-(A7)
  MOVE.l destbufferend,-(A7)
  MOVE.w dontwrite,-(A7)
  MOVE.w AL_0_EC22,-(A7)
  MOVE.w AL_0_E32E,-(A7)
   BNE.w JL_0_BFB6
  MOVE.l destbufferend,AL_0_C034
  MOVEA.l AL_0_E336,A0
  MOVE.l A0,destpointer
  BRA.w JL_0_BFBC

  JL_0_BFB6:
  MOVEA.l destpointer,A0

  JL_0_BFBC:
  MOVE.l A0,-(A7)
  MOVE.l AL_0_E33A,destbufferend
  CLR.w dontwrite

  MOVE.w #$FFFF,AL_0_EC22
  MOVE.w #$FFFF,AL_0_E32E
  ;clr.b _neg
    BSR.w JL_0_9952
   MOVE.l (a7),a0

   !newcalc
   BEQ 'l10
   MOVE.l d0,d3
   MOVEA.l (A7)+,A0
   BRA bc1
'l10
   MOVE.w #$2600,D1
  OR.w regnum,D1
   BSR.w writeword
  MOVE.w #$4E75,D1
   BSR.w writeword
  MOVE.w dontwrite,D1
   BNE.w JL_0_805C
  MOVEA.l (A7)+,A0
  NOP
   JSR Aclearcache  ;simple expression
L_0_C00A:   JSR (A0)             ;writeresult
bc1  MOVE.w (A7)+,AL_0_E32E
  MOVE.w (A7)+,AL_0_EC22
  MOVE.w (A7)+,dontwrite
  MOVE.l (A7)+,destbufferend
  MOVE.l (A7)+,destpointer
  MOVE.w (A7)+,regnum
BRA.w JL_0_7C3A

AL_0_C034:   Ds.l 1
.do_INCDIR:
  LEA AL_0_E7D4,A0
  JL_0_C03E:
  CMP.w #$22,D0
   BEQ.w JL_0_C052
  MOVE.b D0,(A0)+
  TST.w D0
   BEQ.w JL_0_C05A
   BMI.w syntaxerr
  JL_0_C052:
  BSR.w get1bytemain
  BRA.w JL_0_C03E

  JL_0_C05A:
RTS


JL_0_C05C:
  LEA ptr_parameterstore,A1     ;getparameter
  LEA AL_0_E7D4,A0
  MOVEQ.l #-$01,D2
  JL_0_C06A:
    ADDQ.w #1,D2
    MOVE.b (A0)+,(A1)+
  BNE.w JL_0_C06A
  SUBQ.w #1,A1
   ;bsr.w JL_0_7C44
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
  JL_0_C078:
  BSR.w get1bytemain
  TST.w D0
   BMI.w syntaxerr
  CMP.b #$22,D0
   BEQ.w JL_0_C078
  MOVE.b D0,(A1)+
   BEQ.w JL_0_C096
  ADDQ.w #1,D2
  BRA.w JL_0_C078

  JL_0_C096:
  TST.w D2
   BEQ.w syntaxerr
RTS

AJL_0_C09E:
  MOVEA.l constantbase,A2
  MOVEA.l $E(A2),A5
  MOVE.l a5,includesourceline
  LEA inctab,a0
  MOVE.w ininclude,d0
  MOVE.l $0(a0,d0*4),d0
  MOVEA.l $4(A2),A0
  ;MOVE.w $C(A2),D0
  LEA $0(A0,D0.l),A0
  MOVEA.l A5,A1
  JL_0_C0B6:
    CMPA.l A0,A1
     BCC.w JL_0_C0C6
  TST.b (A1)+
  BNE.w JL_0_C0B6
  BRA.w JL_0_C112

JL_0_C0C6:  MOVEA.l $4(A2),A1
JL_0_C0CA:  CMPA.l A0,A5
  BCC.w JL_0_C0D6
  MOVE.b (A5)+,(A1)+
 BRA.w JL_0_C0CA

JL_0_C0D6:  MOVE.l A1,D0
  SUB.l $4(A2),D0
  LEA inctab,a0
  MOVEQ #0,d1
  MOVE.w ininclude,d1
  MOVE.l d0,0(a0,d1*4)
  ;MOVE.w D0,$C(A2)
  MOVEA.l _dosbase,A6
  MOVE.l $8(A2),D1
  MOVE.l A1,D2
  ;MOVE.l #$3FF*8,D3
  MOVE.l #$10000000,d3     ;load whole file
  SUB.l D0,D3
   JSR _Read(A6)
  TST.l D0
   BMI.w JL_0_880A
   BEQ.w JL_0_C120
   LEA inctab,a0
   MOVEQ #0,d1
   MOVE.w ininclude,d1
   ADD.l d0,0(a0,d1*4)
  ;ADD.w D0,$C(A2)
  MOVEA.l $4(A2),A5
  ;MOVE.w $C(A2),D0
   MOVE.l 0(a0,d1*4),d0
  CLR.b $0(A5,D0.l)

  JL_0_C112:
  MOVEA.l A5,A0
  JL_0_C114:
    TST.b (A0)+
  BNE.w JL_0_C114
  MOVE.l A0,$E(A2)
RTS

JL_0_C120:
  MOVE.l $8(A2),D1
  JSR -$24(A6)
  MOVEA.l _execbase,A6
  MOVEA.l $4(A2),A1
  MOVE.l #$400*8,D0               ;exit include
  ;MOVE.l mempool,a0
  JSR _FreeVec(a6)
  ;JSR _FreePooled(a6)
   ;jsr _FreeMem(A6)
  MOVE.l (A2),constantbase
  MOVEA.l A2,A1
  MOVEQ.l #$00,D0
  MOVE.b $12(A2),D0
  MOVEA.l _execbase,A6
  MOVE.l mempool2,a0
  JSR _FreePooled(A6)
  JSR zero_includename
  SUBQ.w #1,ininclude
  BNE.w AJL_0_C09E
 'l2a
  LEA _include,a0
  MOVEM.l a0-a6/d0-d7,-(a7)
  LEA ptr_parameterstore,a1
 'l1b
    MOVE.b (a0)+,(a1)+
  BNE 'l1b
  MOVEQ #9,d2
  JSR findlabel2
  BNE 'd
  CLR.l 8(a2)
 'd
  MOVEM.l (a7)+,a0-a6/d0-d7
RTS

.free_unusedfunctions:
  MOVE.l unusedfunc,d0
  BEQ 'noclear
  MOVEM.l d0-d2/a0-a1/a6,-(a7)
 'f1
    MOVE.l d0,a1
    MOVE.l 4(a1),d0
    MOVE.l (a1),d2
    MOVE.l _execbase,a6
    JSR _FreeMem(a6)
    MOVE.l d2,d0
  BNE 'f1
  CLR.l unusedfunc
  MOVEM.l (a7)+,a0-a1/a6/d0-d2
 'noclear
RTS

AJL_0_C15C:
  MOVEA.l xinclude_base,A2
  CLR.l xinclude_base
  JL_0_C168:
    CMPA.w #$0,A2
     BEQ.w JL_0_C186
    MOVEQ.l #$00,D0
    MOVE.b 4+8(A2),D0
    MOVEA.l A2,A1
    MOVEA.l (A2),A2
    MOVEA.l _execbase,A6
    MOVE.l mempool2,a0
    JSR _FreePooled(A6)
  BRA.w JL_0_C168

  JL_0_C186:
RTS


AJL_0_C188:
  MOVEA.l constantbase,A2
  CLR.l constantbase

  JL_0_C194:
    CMPA.w #$0,A2
     BEQ.w JL_0_C1DC
    MOVE.l $8(A2),D1
     BEQ.w JL_0_C1AE
    MOVEA.l _dosbase,A6
     JSR _Close(A6)

    JL_0_C1AE:
    MOVE.l $4(A2),D0
     BEQ.w JL_0_C1C6
    MOVEA.l D0,A1
    MOVE.l #$400*8,D0
    MOVEA.l _execbase,A6
    MOVE.l mempool,a0
    JSR _FreeVec(a6)

    JL_0_C1C6:
    MOVEQ.l #$00,D0
    MOVE.b $12(A2),D0
    MOVEA.l A2,A1
    MOVEA.l (A2),A2
    MOVEA.l _execbase,A6
    MOVE.l mempool2,a0
    JSR _FreePooled(A6)
  BRA.w JL_0_C194

  JL_0_C1DC:
RTS


JL_0_C1DE:
  SWAP D0
   BSR.w JL_0_C1E6
  SWAP D0
  JL_0_C1E6:
  MOVEA.l AL_0_E8E6,A4
  CMPA.l AL_0_E902,A4
   BCC.w JL_0_C200
  MOVE.w D0,(A4)+
  MOVE.l A4,AL_0_E8E6
RTS

JL_0_C200:
  MOVE.w #$FFFF,dontwrite
  ADDQ.l #2,AL_0_E8E6
RTS

JL_0_C210:
  MOVEA.l AL_0_E8E6,A4
  CMPA.l AL_0_E902,A4
   BCC.w JL_0_C22A
  MOVE.b D0,(A4)+
  MOVE.l A4,AL_0_E8E6
RTS

JL_0_C22A:
  MOVE.w #$FFFF,dontwrite
  ADDQ.l #1,AL_0_E8E6
RTS


JL_0_C23A:
  CMP.w #$22,D0
   BNE.w syntaxerr
  JL_0_C242:
  BSR.w get1bytemain
  CMP.b #$22,D0
   BEQ.w JL_0_C25A
  TST.w D0
   BEQ.w syntaxerr
  MOVE.b D0,(A0)+
  BRA.w JL_0_C242

  JL_0_C25A:
  CLR.b (A0)
RTS

AJL_0_C25E:
  TST.l D3
  RTS

  AJL_0_C262:
  LEA ptr_parameterstore,A0
  LEA AL_0_ECE8,A1
  JL_0_C26E:
    MOVE.b (A0)+,D0
    BEQ.w JL_0_C27C
  CMP.b (A1)+,D0
  BEQ.w JL_0_C26E
RTS

JL_0_C27C:
  TST.b (A1)
  BNE.w JL_0_C284
  RTS

  JL_0_C284:
  CMP.w #$1,D0
RTS

.do_DEFTYPE:
  CMP.w #$2E,D0            ;dodeftype
   BNE.w syntaxerr
  BSR.w getparameter2
  LEA newtypebase,A2
  BSR.w JL_0_8CBE
   BNE.w JL_0_8440
  TST.b declare
   BNE 'l1
  TST.b declare2
   BEQ 'l2
 'l1
  MOVE.b #2,nowdeclare
 'l2
  BSR.w JL_0_7C3A
   BNE.w JL_0_C2B4
  MOVE.l A2,AL_0_E848
RTS

JL_0_C2B4:
  MOVE.l AL_0_E848,-(A7)
  MOVE.l A2,AL_0_E848
  JL_0_C2C0:
  BSR.w getparameter
   BSR.w JL_0_8E3C
  CMP.w #$2C,D0
   BNE.w JL_0_C2D8
   BSR.w get1bytemain
  BRA.w JL_0_C2C0

  JL_0_C2D8:
  MOVE.l (A7)+,AL_0_E848
RTS

JL_0_C2E0:
  LEA $4(A5),A2      ;fehler function
  L_0_C2E4:
  MOVE.l A2,D0
.do_MaxLen:
  BSR.w getparameter
  BSR.w JL_0_8E3C
  BSR.w JL_0_9122
  CMP.b #$7,D2
   BNE.w JL_0_853E
  MOVE.w varmode(PC),-(A7)
  CMP.w #$3D,D0
   BNE.w syntaxerr
  BTST #$F,D2
   BNE.w JL_0_C31C
  MOVE.w JL_0_C2E0(PC),D1
  BSR.w JL_0_94C0
  MOVE.w D3,D1
  BSR.w writeword

  JL_0_C31C:
  MOVE.w L_0_C2E4(PC),D1
  BSR.w writeword
  ADDQ.w #1,regnum
  MOVEQ.l #$03,D2
  BSR.w eval
  MOVE.l #$D000,D1
  MOVE.l d1,lastinstruction
  TST.w (A7)+
   BEQ.w Atokejsr
  ADDQ.w #1,D1
BRA.w Atokejsr

JL_0_C340:
  MOVE.w D0,D1
   BPL.w syntaxerr
  BCLR #$F,D1
   JSR searchinstr
  MOVE.l $12(A2),D0
  TST.w -$2(A2,D0.L)
   BEQ.w JL_0_81C4
  MOVEQ.l #$02,D2
  MOVE.l A2,-(A7)
   BSR.w eval
  MOVEA.l (A7)+,A2
  MOVE.l A2,AL_0_C3E2
  ADDA.l $12(A2),A2
  TST.b debugmode
   BEQ.w JL_0_C3A8
  MOVE.w regnum,D1
  LSL.w #8,D1
  LSL.w #1,D1
  ORI.w #$B07C,D1
   BSR.w writeword
  MOVE.w -$4(A2),D1
   BSR.w writeword
  MOVE.l AL_0_BF06,D1
   BSR.w writelong
  MOVE.l A2,-(A7)
  MOVE.w #$C30A,D1
   BSR.w Atokejsr
  MOVEA.l (A7)+,A2
  JL_0_C3A8:  MOVE.w -$2(A2),D2
  JL_0_C3AC:  MOVE.w regnum,D1
  OR.w AL_0_28CE,D1
  CMP.w #$8,D2
   BCS.w JL_0_C3CE
   BSR.w writeword
  SUBQ.w #8,D2
   BNE.w JL_0_C3AC
  BRA.w JL_0_C3DA

  JL_0_C3CE:
  MOVE.w D2,D0
  LSL.w #8,D0
  LSL.w #1,D0
  OR.w D0,D1
  BSR.w writeword
  JL_0_C3DA:
RTS


AL_0_C3DC:
  Dc.b "&m",0,0
  Dc.b $d6
  Dc.b $C0 ;.
  AL_0_C3E2:
  Ds.l 1

.do_free:
  BSR.w JL_0_C340
  LEA AL_0_C3DC(PC),A0
  LEA AL_0_C3E2(PC),A1
  MOVE.w -$6(A2),$2(A0)
  BSR.w JL_0_95A2
  MOVE.l -$A(A2),D1
  JL_0_C400:
  BEQ.w JL_0_81B2
  MOVEA.l AL_0_C3E2(PC),A2
BRA.w Amakelibsub

.do_use:
  BSR.w JL_0_C340
  LEA AL_0_28D0,A0
  LEA AL_0_28DA,A1
  MOVE.w -$6(A2),$2(A0)
  MOVE.w -$6(A2),-$2(A1)
  ADDQ.w #4,-$2(A1)
  BSR.w JL_0_95A2
  MOVE.l -$E(A2),D1
BRA.w JL_0_C400

AJL_0_C438:
  BSR.w get1bytemain
.do_else:
  MOVE.l firstiff,D0
   BEQ.w JL_0_867E
  MOVEA.l D0,A0
  CMPI.b #$1,$D(A0)
   BEQ.w JL_0_82AE
  MOVE.w #$6000,D1
CNIF #longbranch
   TST.b fast
   BEQ 'l1
  OR.l #$ff,d1
  BSR writeword
CEND
 'l1
  SWAP D1
  BSR.w writelong
  MOVEQ.l #$00,D1
  BSR.w AJL_0_D7B8
  MOVE.l destpointer,$8(A0)
BRA.w do_then

.do_cerr:
  LEA ptr_parameterstore,A0
  MOVE.l A0,-(A7)
  BSR.w JL_0_C23A
BRA.w handle_compileerror

JL_0_C47E:
  BSR.w JL_0_BF6A
  MOVEQ.l #$05,D1
   ;bsr.w JL_0_7C44
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
  LEA AJL_0_C25E,A0
BRA.w JL_0_C4B4

JL_0_C492:
  LEA ptr_parameterstore,A0
  BSR.w JL_0_C23A
  JSR get1bytemain
  BSR.w JL_0_CCA8
  LEA AL_0_ECE8,A0
  BSR.w JL_0_C23A
  LEA AJL_0_C262,A0
  JL_0_C4B4:
  LSL.w #2,D1
  LEA CIF_branches,A1
  MOVE.l $0(A1,D1.W),-(A7)
  MOVEQ.l #-$01,D1
  L_0_C4C2: JSR (A0)
  MOVEA.l (A7)+,A1
  L_0_C4C6:
JMP (A1)

cif_eq:
  BEQ.w JL_0_C4F6
BRA.w JL_0_C4F4

cif_ne:
  BNE.w JL_0_C4F6
BRA.w JL_0_C4F4

cif_lt:
  BLT.w JL_0_C4F6
BRA.w JL_0_C4F4

cif_le:
  BLE.w JL_0_C4F6
BRA.w JL_0_C4F4

cif_gt:
  BGT.w JL_0_C4F6
BRA.w JL_0_C4F4

cif_ge:
  BGE.w JL_0_C4F6
  JL_0_C4F4:
  MOVEQ.l #$00,D1
  JL_0_C4F6:
  MOVEA.l AL_0_E99C,A0
  MOVE.w skipcode,(A0)+
  MOVE.l A0,AL_0_E99C
  MOVE.w D1,skipcode
  JSR get1bytemain
   BNE.w syntaxerr
JMP JL_0_7C44

L_0_C51A:   Dc.b "+|",0,0
            Ds.w 1
AL_0_C520:  Ds.w 1
L_0_C522:   Dc.b "+@"
AL_0_C524:  Ds.w 1
.do_Restore:
  MOVE.w #$FC17,D1
  JSR uselib
  JSR JL_0_7C3A
   BEQ.w JL_0_C568
  BSR.w JL_0_AE22
  MOVE.w L_0_C51A(PC),D1
  BSR.w writeword
  JSR JL_0_791C
  MOVE.l $C(A2),D1
  BSR.w writelong
  MOVE.w AL_0_C520(PC),D1
  BSR.w writeword
  MOVE.l $4(A2),D1
  BEQ.w JL_0_C566
  MOVEA.l D1,A1
  ADDQ.l #1,$4(A1)
  RTS

  JL_0_C566:
RTS

JL_0_C568:
  MOVE.w #$CD00,D1
  JSR Atokejsr
  MOVE.l L_0_C522(PC),D1
JMP writelong

.do_read:
  MOVE.w #$FC17,D1
  JSR uselib
  JL_0_C584:
  MOVE.l AL_0_2902,D1
  BSR.w writelong
  BSR.w getparameter
  BSR.w JL_0_8E3C
  BSR.w JL_0_9122
  BTST #$E,D2
   BEQ.w JL_0_C5A6
  MOVE.b #$6,D2
  JL_0_C5A6:
  TST.b D2
   BEQ.w JL_0_8504
  TST.b debugmode
   BEQ.w JL_0_C5D0
  MOVE.w #$7000,D1
  MOVE.b D2,D1
  ANDI.b #$F,D1
  BSR.w writeword
  MOVE.w #$C310,D1
  MOVE.w D2,-(A7)
  BSR.w Atokejsr
  MOVE.w (A7)+,D2
  JL_0_C5D0:
  CMP.b #$7,D2
   BEQ.w JL_0_C684
  CMP.b #$1,D2
   BNE.w JL_0_C62A
  LEA AL_0_2922,A0
  LEA AL_0_2926,A1
  BTST #$F,D2
   BEQ.w JL_0_C5FC
  BSR.w JL_0_95A2
  BRA.w JL_0_C668

  JL_0_C5FC:
  LEA AL_0_2916,A0
  LEA AL_0_291C,A1
  TST.w varmode
   BEQ.w JL_0_C61E
  LEA AL_0_291C,A0
  LEA AL_0_2922,A1
  JL_0_C61E:
  MOVE.w D3,$4(A0)
  BSR.w JL_0_95A2
  BRA.w JL_0_C668

  JL_0_C62A:
  LEA AL_0_2926,A0
  CMP.b #$3,D2
   BCS.w JL_0_C63E
  LEA AL_0_2930,A0
  JL_0_C63E:
  BTST #$F,D2
   BEQ.w JL_0_C652
  MOVE.w $4(A0),D1
   BSR.w writeword
  BRA.w JL_0_C668

  JL_0_C652:
  TST.w varmode
   BEQ.w JL_0_C65E
  ADDQ.w #6,A0
  JL_0_C65E:
  MOVE.w D3,$2(A0)
  MOVE.l (A0),D1
  BSR.w writelong

  JL_0_C668:
  MOVE.l AL_0_2906,D1
   BSR.w writelong
  CMP.w #$2C,D0
   BEQ.w JL_0_C67C
  RTS

  JL_0_C67C:
  JSR get1bytemain
  BRA.w JL_0_C584

  JL_0_C684:
  MOVE.w AL_0_290A,D1
   BSR.w writeword
  BTST #$F,D2
   BNE.w JL_0_C6C0
  TST.w varmode
   BEQ.w JL_0_C6B0
  MOVE.w D3,AL_0_29D0
  MOVE.l AL_0_29CE,D1
  BRA.w JL_0_C6BC

  JL_0_C6B0:
  MOVE.w D3,AL_0_29CA
  MOVE.l AL_0_29C8,D1
  JL_0_C6BC:
  BSR.w writelong
  JL_0_C6C0:
  MOVE.w #$C701,D1
  MOVE.w varmode,D2
   BEQ.w JL_0_C6D0
  SUBQ.w #1,D1
  JL_0_C6D0:
  BSR.w Atokejsr
  MOVE.w #$FFFF,AL_0_EC22
  LEA AL_0_290C,A0
  LEA AL_0_2916,A1
  BSR.w JL_0_95A2
  BRA.w JL_0_C668

JL_0_C6F0:
  CMP.w #$2E,D0          ;definecode 'lb 'lw 'll
   BNE.w JL_0_C720
  JSR get1bytemain
  CMP.w #$77,D0
   BEQ.w JL_0_C71C
  CMP.w #$62,D0
   BEQ.w JL_0_C718
  CMP.w #"s",d0
  BEQ single3
  CMP.w #"d",d0
  BEQ double3
  CMP.w #$6C,D0
   BNE.w syntaxerr
  MOVEQ.l #$02,D1
RTS

single3
 MOVE.b #1,iee
 MOVEQ.l #$3,d1
 RTS
double3
 MOVE.b #1,iee
 MOVEQ.l #$4,d1
 RTS
JL_0_C718:  MOVEQ.l #$00,D1
 RTS

JL_0_C71C:  MOVEQ.l #$01,D1
 RTS

JL_0_C720:  MOVEQ.l #$01,D1
 JMP JL_0_7C44

.do_dcb:
BSR.w JL_0_C6F0

  MOVE.w D1,-(A7)
   BSR.w AJL_0_BF6E
  CMP.w #$2C,D0
   BNE.w syntaxerr
  MOVE.l D3,-(A7)
   BSR.w AJL_0_BF6E
  MOVE.l D3,D1
  MOVE.l (A7)+,D3
  MOVE.w (A7)+,D2
   BEQ.w JL_0_C774
   ;bsr.w do_even
   ;addq.l #1,destpointer      ;even
   ;bclr #$0,AL_0_E8F9
  CMP.w #$1,D2
   BEQ.w JL_0_C768
JL_0_C754:  SWAP D1
   BSR.w writeword
  SWAP D1
   BSR.w writeword
  SUBQ.l #1,D3
   BNE.w JL_0_C754
 RTS

JL_0_C768:   BSR.w writeword
  SUBQ.l #1,D3
   BNE.w JL_0_C768
 RTS

JL_0_C774:   BSR.w writebyte
  SUBQ.l #1,D3
   BNE.w JL_0_C774
 RTS

.do_ds:
  BSR.w JL_0_C6F0     ;definestorage
  MOVE.w D1,-(A7)
  BSR.w AJL_0_BF6E
  MOVE.w (A7)+,D1
  LSL.l D1,D3
  MOVE.l d3,d0
  BEQ 'll5
  MOVEQ #0,d1
 'll10:
    JSR writebyte
    SUBQ.l #1,d3
  BNE.s 'll10
 'll5:
RTS

JL_0_C796:
  MOVE.w D0,-(A7)
  LEA AL_0_E906,A0
  MOVEA.l destpointer,A1
  MOVE.w AL_0_E92E,AL_0_E92C
  JSR JL_0_65F0
  MOVE.w (A7)+,D0
RTS

.do_dc:
  BSR.w JL_0_C6F0

  MOVE.l #ptr_parameterstore,AL_0_E928
  TST.w D1
   BEQ.w JL_0_C7EE
  CMP.w #$1,D1
   BEQ.w JL_0_C844
  CMP.w #$2,d1
   BEQ long
  CMP.w #$3,d1
   BEQ single
   MOVEQ.l #$0d,D3
   ;bsr.w do_even
   ;addq.l #1,destpointer      ;even
  ;bclr #$0,AL_0_E8F9
JL_0_C7D8b:   JSR JL_0_6062
   BSR.w JL_0_C796
   BSR.w writelong
   BSR   writelong
  CMP.w #$2C,D0
   BEQ.w JL_0_C7D8b
RTS

long
  MOVEQ.l #$0B,D3
   ;bsr.w do_even
   ;addq.l #1,destpointer      ;even
  ;bclr #$0,AL_0_E8F9
  MOVE.b #1,_dcb

  JL_0_C7D8:
  JSR JL_0_6062
  CLR.b _dcb
  BSR.w JL_0_C796
  BSR writebyte
  BSR writebyte
  BSR writebyte              ;long
  BSR writebyte
  CMP.w #$2C,D0
   BEQ.w JL_0_C7D8
RTS

single
  MOVEQ.l #$0c,D3
  ;bsr.w do_even
  ;addq.l #1,destpointer      ;even
  ;bclr #$0,AL_0_E8F9
  MOVE.b #1,_dcb
  JL_0_C7D8a:
  JSR JL_0_6062
  CLR.b _dcb
  BSR.w JL_0_C796
  BSR.w writebyte
  BSR.w writebyte
  BSR.w writebyte
  BSR.w writebyte
  CMP.w #$2C,D0
   BEQ.w JL_0_C7D8a
RTS
RTS

JL_0_C7EE:
  MOVEQ.l #$11,D3

  JL_0_C7F0:
  JSR get1bytemain
  CMP.w #$22,D0
   BNE.w JL_0_C81E

  JL_0_C7FC:
  MOVE.b (a5)+,d0;bsr.w get1bytemain ascii dc.b
   BEQ.w syntaxerr
  CMP.w #$22,D0
   BEQ.w JL_0_C816
  CMP.b #"\",d0
   BNE 'n1
  CMP.b #"\",(a5)
   BEQ 'do1

 'n1
  MOVE.w D0,D1
  BSR.w writebyte
BRA.w JL_0_C7FC

'do1
  CMP.l #"__DA",1(a5)
   BNE 'nodate1
  CMP.l #"TE__",5(a5)
   BEQ 'c1
  CMP.l #"TE_G",5(a5)
   BNE 'nodate1
  CMP.l #"ER__",9(a5)
   BNE 'nodate1
  JSR compiledatedc_ger
  BRA 'n1

 'c1
  JSR compiledatedc
  BRA 'n1

 'nodate1
  CMP.l #"__VE",1(a5)
   BNE 'n1
  CMP.w #"R_",5(a5)
   BNE 'n1
  JSR version_string_dc
BRA.w JL_0_C7FC


JL_0_C816:
  CLR.w instringon
  JSR get1bytemain
  BRA.w JL_0_C83A

  JL_0_C81E:   ;bsr.w JL_0_7C44
   MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
   JSR JL_0_6062
  SUBQ.l #1,destpointer
   BSR.w JL_0_C796
  ADDQ.l #1,destpointer
   BSR.w writebyte

  JL_0_C83A:
  CMP.w #$2C,D0
   BEQ.w JL_0_C7F0
RTS

JL_0_C844:
  MOVEQ.l #$10,D3
   ;bsr.w do_even
   ;addq.l #1,destpointer      ;even
  ;bclr #$0,AL_0_E8F9

  JL_0_C84A:
  MOVE.b #1,_dcb
  JSR JL_0_6062
  CLR.b _dcb
  BSR.w JL_0_C796
  BSR.w writebyte
  BSR.w writebyte
  CMP.w #$2C,D0
   BEQ.w JL_0_C84A
RTS

.do_even4:
  ADDQ.l #3,destpointer
  ANDI.w #$FFFC,AL_0_E8F8
RTS

.do_even8:
  ADDQ.l #7,destpointer
  ANDI.w #$FFF8,AL_0_E8F8
RTS

.do_even:
  ADDQ.l #1,destpointer      ;even
  BCLR #$0,AL_0_E8F9
RTS

AL_0_C890: Ds.b 1
L_0_C891:  Dc.b $00 ;.
JL_0_C892:
  TST.b debugmode
  BEQ.w JL_0_C8A8
  MOVE.w #$4420,D0
  MOVE.b L_0_C891(PC),D0
  BRA.w JL_0_C1E6

  JL_0_C8A8:
RTS


.do_data:
  MOVE.w #$FC17,D1
   JSR uselib
   ;bsr.w JL_0_7C44
   MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
   JSR AJL_0_498A
  MOVE.w D1,AL_0_C890
  CMP.w #$7,D1
   BEQ.w JL_0_C944
  MOVE.w D1,-(A7)

  JL_0_C8CC:
  BSR.w JL_0_C892
  MOVE.w (A7),D2
   BSR.w JL_0_B1D8
  CMP.w (A7),D2                ;datamode
   BEQ.w JL_0_C920
  MOVE.w D2,D1
  MOVE.w (A7),D2
  CMP.w #$2,D2
   BNE.w JL_0_C8FE
  CMP.w #$3,D1
   BNE.w JL_0_8A80
  CMP.l #$10000,D3
   BCC.w JL_0_8A80
  BRA.w JL_0_C920

  JL_0_C8FE:
  CMP.w #$1,D2
   BNE.w JL_0_C91C
  CMP.w #$2,D1
   BNE.w JL_0_8A80
  CMP.l #$100,D3
   BCC.w JL_0_8A80
  BRA.w JL_0_C920

  JL_0_C91C:
  BRA.w JL_0_8A80

  JL_0_C920:
  CMP.w #$3,D2
  BCC.w JL_0_C930
  BSR.w JL_0_C1E6
  BRA.w JL_0_C934

  JL_0_C930:
  TST.b iee
  BEQ 'old
  CMP.b #5,d2
  BNE 'old
  Dc.l $f2006400 ;  fpu data write fmove.s fp0,d0
  ;BSR writelong
 'old
  BSR.w JL_0_C1DE                  ;write data >3
  JL_0_C934:
  JSR JL_0_7C3A
  CMP.w #$2C,D0
   BEQ.w JL_0_C8CC
  ADDQ.w #2,A7
RTS

JL_0_C944:   BSR.w JL_0_C892
  MOVE.l AL_0_E8E6,-(A7)
   BSR.w JL_0_C1DE
  MOVEQ.l #$00,D1
   JSR get1bytemain
   BEQ.w JL_0_C9A6
  CMP.w #$22,D0
   BEQ.w JL_0_C988
  CMP.w #$2C,D0
   BEQ.w JL_0_C9A6
JL_0_C96C:   BSR.w JL_0_C210
  ADDQ.w #1,D1
   JSR JL_0_7A2E
  TST.w D0
   BEQ.w JL_0_C9A6
  CMP.w #$2C,D0
   BEQ.w JL_0_C9A6
 BRA.w JL_0_C96C

JL_0_C988:   ;BSR.w get1bytemain       ;data writestring
   MOVEQ #0,d0
   MOVE.b (a5)+,d0
   BEQ.w JL_0_8224
  CMP.w #$22,D0
   BEQ.w JL_0_C9A2
   BSR.w JL_0_C210
  ADDQ.w #1,D1
 BRA.w JL_0_C988

JL_0_C9A2: CLR.w instringon
  JSR get1bytemain
JL_0_C9A6:  MOVEA.l (A7)+,A0
  MOVE.w dontwrite,D2
   BNE.w JL_0_C9B4
  MOVE.l D1,(A0)
JL_0_C9B4:  ADDQ.l #1,AL_0_E8E6
  BCLR #$0,AL_0_E8E9
  CMP.w #$2C,D0
   BEQ.w JL_0_C944
RTS
vardeclareerr_ JMP  vardeclareerr

.do_shared:
  MOVE.w proceduremode,D1  ;doshared
  ;BEQ.w JL_0_8988
  BNE.w 'l1
  MOVE.w D1,-(A7)
  CLR.w proceduremode
 'again2
  LEA varbase,a2
  BSR.w getparameter
  MOVE.w d2,-(a7)
   JSR findvariable
   BEQ 'checkdim
   LEA sharebase,a2
   MOVEQ #$f+4,d7
   BSR.w JL_0_8CDE     ;find var
   BEQ.b JL_0_89A8
   BSR addlabel
   CMP.b #".",d0
   BNE vardeclareerr_
   MOVE.l a2,a3
   JSR JL_0_8EB8b
;      BSR.w getparameter2
;   LEA newtypebase,A2
;   BSR.w JL_0_8CBE
;   BNE.w JL_0_8440
;   MOVE.l a2,$A(A3)
;   MOVE.w AL_0_EC5A,$6(A3)
;   MOVE.w globalvarpointer,$4(A3)
;   MOVEQ.l #4,d1
;   CMPI.l #$100,$4(A2)
;    BCC.w 'l1d
;   MOVE.w 8(a2),d1
;'l1d   ADD.w d1,globalvarpointer
;   CMP.b #$2e,d0
;   BNE vardeclareerr
;   JSR get1bytemain
;   CMP.b #"l",d0
;   BNE 'lo
;   BRA 'ok
;'lo   CMP.l #"f",d0
;   BNE onlyfloatint
;'ok   MOVE.w globalvarpointer,$4(A3)
;   ADD.w #4,globalvarpointer
'domore MOVE.w (a7)+,d2
   CMP.b #",",d0
   BNE 'ret
   JSR get1bytemain
   BRA 'again2
'ret MOVE.w (A7)+,proceduremode
RTS

'errormsg_declaredtwice_ JMP errormsg_declaredtwice

'checkdim
   CMP.w #2,6(a2)
   BEQ 'do
   CMP.w #$102,6(a2)
   BEQ 'do
   BRA 'errormsg_declaredtwice_
'do   LEA varbase,a0
'm1  MOVE.l (A0),D0      ;find label
   BEQ.b 'z1
   CMP.l d0,a2
   BEQ 'z1
   MOVE.l d0,a0
   BRA 'm1
'z1 MOVE.l (a2),d1
    MOVE.l d1,(a0)
    CLR.l (a2)
    LEA sharebase,a0
    MOVE.l (a0),(a2)
    MOVE.l a2,(a0)
    JSR get1bytemain
    JSR get1bytemain
    BRA 'domore
'l1   MOVE.b #1,nowdeclare
  MOVE.w D1,-(A7)
  CLR.w proceduremode
JL_0_C9DE:   BSR.w getparameter
  MOVE.w D2,-(A7)
  LEA firstglob,A2
   BSR.w findvariable2
   BNE.b JL_0_CA06
JL_0_C9F0:  MOVE.b AL_0_EC5B,D1
  MOVE.b $7(A2),D3
  EOR.b D3,D1
   BEQ.w JL_0_89A8
   BSR.w JL_0_8CDE
   BEQ.b JL_0_C9F0
JL_0_CA06:   BSR.w addlabel
  MOVE.w (A7)+,D2
  MOVE.l A2,-(A7)
   BSR.w JL_0_8E3C
  MOVEA.l (A7)+,A2
  MOVEQ.l #$04,D1
  ADDQ.w #4,A2
  ADDQ.w #4,A3
JL_0_CA1A:  MOVE.w (A3)+,(A2)+
   DBF D1,JL_0_CA1A
  BTST #$1,AL_0_EC5B
   BEQ.w JL_0_CA3C
   JSR get1bytemain
  CMP.w #$29,D0
   BNE.w syntaxerr
   JSR get1bytemain
  JL_0_CA3C:  CMP.w #$2C,D0
   BNE.w JL_0_CA4C
   JSR get1bytemain
  BRA.w JL_0_C9DE

  JL_0_CA4C:
  MOVE.w (A7)+,proceduremode
RTS


.do_xinclude:
   BSR.w JL_0_C05C
   JSR check_incdir             ; ergebnis in d2

   LEA ptr_parameterstore,a1
   MOVE.l d2,-(a7)
   LEA includetemp,a0           ; filename in includetemp packen
  'l4
     MOVE.b (a1)+,(a0)+
   BNE 'l4

   LEA ptr_parameterstore,a1
   MOVE.l a1,a0
  'l1
    TST.b (a0)+
   BNE 'l1
  'l2
     MOVE.b -(a0),d0
     CMP.b #":",d0
      BEQ 'out
     CMP.b #"/",d0
      BEQ 'out
     CMP.l a1,a0
      BEQ 'out2
   BRA 'l2
  'out
   ADDQ.l #1,a0                 ; dateinamen vom pfad extrahiert
  'out2
   MOVEQ.l #-$01,D2
  'l3
     ADDQ.w #1,D2
     MOVE.b (a0)+,(a1)+
   BNE 'l3
   CLR.b (a1)+

   LEA ptr_parameterstore,a1
   BSR.w JL_0_8C8E              ;find include
    BEQ.w 'outb

   MOVE.w D2,-(A7)
   BSR.w addlabel
   MOVE.w (A7)+,D2

   LEA ptr_parameterstore,a1
   LEA includetemp,a0           ; namen in includetemp schreiben
  'l4b
    MOVE.b (a0)+,(a1)+
   BNE 'l4b

   MOVE.l (a7)+,d2
   LEA ptr_parameterstore,a1
   BRA.w JL_0_CB18

  'outb
   LEA ptr_parameterstore,a1
   LEA includetemp,a0
  'l4b2
    MOVE.b (a0)+,(a1)+
   BNE 'l4b2

   MOVE.l (a7)+,d2
   LEA ptr_parameterstore,a1

   ;JL_0_CA6C:
RTS

.do_IncBin:
  BSR.w JL_0_C05C
  MOVE.l #ptr_parameterstore,D1
  MOVEQ.l #-$02,D2
  MOVEA.l _dosbase,A6
  JSR _Lock(A6)
  MOVE.l D0,D7
  BEQ.w JL_0_87F2
  MOVE.l D7,D1
  MOVE.l ptr_macrobuffer_begin,D2
  JSR _Examine(A6)
  MOVEA.l ptr_macrobuffer_begin,A0
  MOVE.l $4(A0),D0
   BPL.w JL_0_87F2
  MOVE.l $7C(A0),D3
  MOVE.l D7,D1
   JSR _UnLock(A6)
  MOVE.l #ptr_parameterstore,D1
  MOVE.l #HUNK_RELOC_16__MODE_OLDFILE,D2
   JSR _Open(A6)
  MOVE.l D0,D7
   BEQ.w JL_0_87F2
  MOVE.l destpointer,D0
  ADD.l D3,D0
  CMP.l destbufferend,D0
   BHI.w JL_0_CAF6
  MOVE.l destpointer,D2
  MOVE.l D7,D1
   JSR _Read(A6)
  CMP.l #$FFFFFFFF,D0
   BEQ.w JL_0_880A
  ADD.l D0,destpointer
BRA.w JL_0_CB04

JL_0_CAF6:
  MOVE.w #$FFFF,dontwrite
  MOVE.l D0,destpointer
  JL_0_CB04:
  MOVE.l D7,D1
JMP _Close(A6)


JL_0_8192b: JMP JL_0_8192
.do_INCLUDE:
  TST.w dirmode             ;include  open
   BNE.w JL_0_8192b
  BSR.w JL_0_C05C
  JSR check_incdir

  JL_0_CB18:
  BSR.w findconstant
   BEQ.w JL_0_87DC

  LEA constantbase,A2
  BSR.w JL_0_8C3A
  CLR.w $C(A2)
  CLR.l $4(A2)

  MOVE.l #ptr_parameterstore,D1
  MOVE.l d1,a0
  LEA includetemp2,a1
 'l1
    MOVE.b (a0)+,(a1)+
  BNE 'l1
  JSR save_includename

  CMP.l #$62623200,-4(a0)     ;.bb2
  BEQ 'ok
  CMP.l #$2e626200,-4(a0)     ;.bb files
  BEQ 'ok
  JMP errortoken              ;can only include
 'ok
  MOVE.l #HUNK_RELOC_16__MODE_OLDFILE,D2
  MOVEA.l _dosbase,A6
  JSR _Open(A6)
  MOVE.l D0,$8(A2)
  BEQ.w JL_0_87F2
  CLR.l includeline
  MOVE.l 8(a2),d1
  MOVE.l d3,-(a7)
  MOVEQ #0,d2
  MOVEQ #1,d3
  JSR _Seek(a6)   ; -66
  MOVE.l 8(a2),d1
  MOVEQ #0,d2
  MOVEQ #-1,d3
  JSR _Seek(a6)   ; -66
  MOVE.l (a7)+,d3
  ADDQ.l #4,d0
  ;MOVE.l #$400*8,D0
  MOVE.l #$10000,D1
  MOVEA.l _execbase,A6
  ;MOVE.l mempool,a0
  ;JSR _AllocPooled(a6)
  JSR _AllocVec(a6)
   ;jsr AJL_0_4B6C
  MOVE.l D0,$4(A2)
  MOVE.l D0,$E(A2)
  MOVEA.l D0,A5
;  MOVE.l #ptr_parameterstore,D1
;  MOVE.l #HUNK_RELOC_16__MODE_OLDFILE,D2
;  MOVEA.l _dosbase,A6
;   jsr _Open(A6)
;  MOVE.l D0,$8(A2)
  ; BEQ.w JL_0_87F2
  ADDQ.w #1,ininclude            ;enter include
 'l2a
  LEA _include,a0
  MOVEM.l a0-a6/d0-d7,-(a7)
  LEA ptr_parameterstore,a1
 'l1b
    MOVE.b (a0)+,(a1)+
  BNE 'l1b

  MOVEQ #9,d2
  JSR findlabel2
  BNE 'd
  MOVE.l #1,8(a2)
  MOVEM.l (a7)+,a0-a6/d0-d7
  BRA 'd2
 'd
  JSR addlabelhash
  MOVE.l #$1,$4(A2)
  MOVE.l #1,8(a2)
  MOVEM.l (a7)+,a0-a6/d0-d7
 'd2
  LEA inctab,a0
  MOVEQ #0,d1
  MOVE.w ininclude,d1
  CLR.l $0(a0,d1*4)
  MOVEA.l AL_0_EC10,A7
JMP AJL_0_413A

AL_0_CB7E:   Ds.w 1
AL_0_CB80:   Ds.l 1
.do_Macro:
  MOVE.l AL_0_E9E8,AL_0_CB80
   BSR.w makename2
   BEQ.w syntaxerr
   CLR.b thenmode
   ;bsr.w JL_0_7C44
   MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
   BSR.w findmac
   BEQ.w JL_0_86D8
   BSR.w addlabel
  CLR.w $A(A2)
  MOVEA.l ptr_macrobuffer_begin,A0
  MOVEQ.l #$00,D2
  CLR.w AL_0_CB7E
'l1  MOVE.b (a5),d0
     BEQ 'l3
     CMP.b #" ",d0
      BNE 'l2            ;space macro
      ADDQ.l #1,a5
      BRA 'l1
'l2   CMP.b #";",d0
      BNE 'l3
'l4   MOVE.b (a5),d0
      BEQ 'l5
      BSR.w JL_0_CC98   ;add comment
      ADDQ.l #1,a5
      BRA 'l4
'l5   MOVE.b #":",d0
      BSR.w JL_0_CC98
      MOVE.b #"@",d0
      BSR.w JL_0_CC98
'l3   MOVE.b #0,temp
      MOVE.b #0,thenmode
JL_0_CBB6:  JSR getcharb
  TST.w D0
   BNE.w JL_0_CBDE
  MOVEM.l D2/A0/A2,-(A7)
  CMP.w #"@@",-3(a5)
  BNE 'l2a
  JSR nextline
  BEQ.w JL_0_8716
  MOVEM.l (A7)+,D2/A0/A2
  BRA.w JL_0_CBB6
'l2a
   JSR nextline
   BEQ.w JL_0_8716
  MOVEM.l (A7)+,D2/A0/A2
  TST.w D2
   BEQ.w JL_0_CBB6
'l2   MOVE.b (a5),d0
      CMP.b #" ",d0
      BNE 'l1
      ADDQ.w #1,a5
      BRA 'l2
'l1  TST.b thenmode
     BEQ 'l3
     MOVEQ #":",d0
     BSR.w JL_0_CC98
     MOVE.w #-$7FFE,D0        ;write end if
     BSR macputw
     MOVE.w #$800b,d0
     BSR.w macputw
     CLR.b thenmode
'l3     MOVEQ.l #$3A,D0
     MOVE.b #1,temp

 BRA.w JL_0_CC2A

JL_0_CBDE:   BPL.w JL_0_CC2A
  CMP.w #-$7FF3,D0                ;macro ?
   BNE.w JL_0_CBF4
  ADDQ.w #1,AL_0_CB7E
 BRA.w JL_0_CC22

JL_0_CBF4: CMP.w #$80d7,d0        ;object ?
           BNE 'l1x
    TST.b objectcount
    BNE JL_0_86F2
'l1x CMP.w #$8021,d0
    BNE 'nothen
    MOVE.b #1,thenmode
'nothen TST.b thenmode
        BEQ 'l1
   CMP.w #$8002,d0             ;end if
   BNE 'l1
   MOVEM.l d0/a5,-(a7)
   JSR get1bytemain
   MOVE.w d0,d1
   MOVEM.l (a7)+,a5/d0
   CMP.w #$800b,d1
   BNE 'l1
   CLR.b thenmode
'l1   CMP.w #-$7FFE,D0      ;end ?
   BNE.w JL_0_CC22
   MOVE.l a5,-(a7)
   JSR get1bytemain
   MOVE.l (a7)+,a5
   TST.w d0
   BEQ 'doend
   CMP.w #":",d0
   BEQ 'doend
   CMP.w #";",d0
   BEQ 'doend
   MOVE.l a5,-(a7)
   JSR get1bytemain
   MOVE.l -1(a5),d0
   MOVE.l (a7)+,a5
   CMP.l #"noa7",d0
   BEQ 'doend
   BRA 'morechar
'doend:  MOVE.w #$8002,D0
   BSR.w macputw
   BRA JL_0_CBB6
'morechar  JSR get1bytemain
   CMP.w #-$7FF3,D0                ;end macro
   BEQ.w 'lo1
  CMP.w #$80d7,d0                 ;end object
  BNE JL_0_CC12
  SUBQ.b #1,objectcount
  TST.b developobject
  BEQ 'lo1
  BSR skiprest
    RTS
'lo1  SUBQ.w #1,AL_0_CB7E
   BMI.w JL_0_CC32
JL_0_CC12:  MOVE.w D0,-(A7)
  MOVE.w #$8002,D0
   BSR.w macputw
  MOVE.w (A7)+,D0
 BRA.w JL_0_CC22

JL_0_CC22:   BSR.w macputw
 BRA.w JL_0_CBB6

JL_0_CC2A:    CMP.w #"@@",-1(a5)             ;merge lines
    BNE 'no
     MOVEM.l D2/A0/A2,-(A7)
   JSR nextline
   BEQ.w JL_0_8716
  MOVEM.l (A7)+,D2/A0/A2
    TST.w D2
   BEQ.w JL_0_CBB6
   BRA JL_0_CBB6
'no
BSR.w JL_0_CC98
 BRA.w JL_0_CBB6

JL_0_CC32:  ADDQ.w #4,A7
  MOVE.l A0,D0
  SUB.l ptr_macrobuffer_begin,D0
JL_0_CC3C:   BEQ.w JL_0_CC5E
  CMPI.b #":",-(A0)
   BNE.w JL_0_CC5E
  CMP.w #$1,D0
   BEQ.w JL_0_CC58
  TST.b -$1(A0)
   BMI.w JL_0_CC5E
JL_0_CC58:  SUBQ.w #1,D0
 BRA.w JL_0_CC3C

JL_0_CC5E:
  MOVE.w D0,$8(A2)
   BEQ.w JL_0_CC8E
  MOVEQ.l #$01,D1
  MOVEA.l _execbase,A6
  MOVE.l mempool,a0
  JSR _AllocPooled(a6)
   ;jsr AJL_0_4B6C
  MOVEA.l D0,A0
  MOVE.l A0,$4(A2)
  MOVE.w $8(A2),D1
   BEQ.w JL_0_CC8E
  SUBQ.w #1,D1
  MOVEA.l ptr_macrobuffer_begin,A1
  JL_0_CC88:
    MOVE.b (A1)+,(A0)+
  DBF D1,JL_0_CC88

  JL_0_CC8E:
JMP get1bytemain

macputw:
  MOVE.w D0,D1
  LSR.w #8,D1
  MOVE.b D1,(A0)+
  JL_0_CC98:
  MOVEQ.l #-$01,D2
  MOVE.b D0,(A0)+
  CMPA.l ptr_macrobuffer_end,A0
   BCC.w JL_0_873C
RTS

skiprest:
  MOVE.l d0,-(a7)
  MOVEQ #0,d0
  CLR.b skiptoggle
 'loop
    MOVE.b (a5),d0
    BEQ 'l3
    CMP.b #";",d0
    BNE 'l2
    MOVE.b #1,skiptoggle
   'l2
    TST.b skiptoggle
    BNE 'l4
    CMP.b #":",d0
    BEQ 'l3
   'l4
    ADDQ #1,a5
  BRA 'loop
 'l3
  MOVE.w d0,lastchar
  MOVE.l (a7)+,d0
RTS

JL_0_CCA8:
  BSR.w JL_0_BF52
   BNE.w syntaxerr
  MOVE.w D0,D1
  JSR get1bytemain
  BSR.w JL_0_BF52
   BNE.w JL_0_CCDA
  ADDQ.w #1,D0
  MOVE.w D0,D2
  ADD.w D0,D0
  ADD.w D2,D0
  ADD.w D0,D1
  MOVE.w D1,D0
  ANDI.w #$3,D0
  CMP.w #$3,D0
   BEQ.w syntaxerr
  JSR get1bytemain

  JL_0_CCDA:
RTS


JL_0_CCDC: TST.b D0
L_0_CCDE:  TST.w D0
L_0_CCE0:  TST.l D0
L_0_CCE2:  TST.l (A7)+
L_0_CCE4:  JSR _Reschedule(A6)
JL_0_CCE8: BEQ.w JL_0_CCE8
JL_0_CCEC: BNE.w JL_0_CCEC
  MOVEQ.l #-$01,D2
  BRA.w JL_0_D04C

.do_while:
  CLR.l fp0addr
  MOVEQ.l #$01,D1
  MOVEQ.l #$00,D2
BRA.w JL_0_D04E

AJL_0_CCFE:
  LEA AL_0_4D0A,A2
  MOVEQ.l #$08,D2
BRA.w AJL_0_CD10

AJL_0_CD0A:
  LEA AL_0_CD4A(PC),A2
  MOVEQ.l #$0E,D2

  AJL_0_CD10:
  MOVEQ.l #$00,D3
  MOVE.l (A2),D0
  CLR.l (A2)
  MOVEA.l D0,A2
  MOVEA.l _execbase,A6
  JL_0_CD1C:
    CMPA.w #$0,A2
     BEQ.w JL_0_CD48
    TST.w D3
     BEQ.w JL_0_CD3A
    MOVEM.l D2-D3/A2,-(A7)
    ADDA.w D3,A2
    MOVE.l D4,D2
    BSR.w AJL_0_CD10
    MOVEM.l (A7)+,D2-D3/A2
    JL_0_CD3A:
    MOVEA.l A2,A1
    MOVE.l D2,D0
    MOVEA.l (A2),A2
    MOVE.l mempool,a0
    JSR _FreePooled(A6)
  BRA.w JL_0_CD1C

  JL_0_CD48:
RTS

JL_0_7ECEb JMP JL_0_7ECE
AL_0_CD4A:  Ds.l 1
L_0_CD4E:  Dc.b $02,$40,$00 ;.@.
  Dc.b $FF ;.
JL_0_CD52:  MOVE.w D0,-(A7)
L_0_CD54:  MOVE.l D0,-(A7)
L_0_CD56:  LEA $4(A7),A2
L_0_CD5A:  ANDI.w #$FF,D0
L_0_CD5E:  CMP.w (A7),D0
L_0_CD60:  CMP.l (A7),D0
JL_0_CD62:   BNE.w JL_0_CD62
AL_0_CD66:  ADDQ.w #8,A7
JL_0_CD68:  MOVE.l AL_0_CD4A(PC),D0  ;doendselect
   BEQ.w JL_0_7ECEb
  MOVEA.l D0,A2
   BSR.w JL_0_CDFC
  MOVEA.l _execbase,A6
JL_0_CD7A:  MOVE.l $4(A2),D0
   BEQ.w JL_0_CDB6
  MOVEA.l D0,A3
  MOVEA.l $4(A3),A0
  MOVE.l destpointer,D1
  SUB.l A0,D1
CNIF #longbranch
  TST.b fast
  BEQ 'l1
  MOVE.w dontwrite,D0
   BNE.w JL_0_CDA6
   ADDQ.l #2,d1
   MOVE.l d1,-2(a0)
   BRA JL_0_CDA6
CEND
'l1  TST.w dontwrite
     BNE.w JL_0_CDA6
 CMP.l #MaxWordSgnd,D1
   BHI.w JL_0_7EEC_b
  MOVE.w D1,(A0)
JL_0_CDA6:  MOVE.l (A3),$4(A2)
  MOVEA.l A3,A1
  MOVEQ.l #$08,D0
  MOVE.l mempool,a0
   JSR _FreePooled(A6)
 BRA.w JL_0_CD7A

JL_0_CDB6:   JSR AJL_0_4C94
  MOVEA.l AL_0_CD4A(PC),A1
  MOVE.l (A1),AL_0_CD4A
  MOVEQ.l #$0E,D0
  MOVEA.l _execbase,A6
  MOVE.l mempool,a0
  JSR _FreePooled(A6)
JMP get1bytemain

AJL_0_CDD4:
  MOVEA.l (A7)+,A1
  SUBQ.w #8,A1
  MOVEQ.l #$09,D0
  ADD.l (A1),D0
  AL_0_CDDC:
  ADDQ.w #2,A7
.do_default:
  MOVE.l AL_0_CD4A(PC),D0
   BEQ.w JL_0_7EB2_b
  MOVEA.l D0,A2
  BSR.w JL_0_CE26
  BSR.w JL_0_CDFC
  CLR.l $8(A2)
  MOVE.w $C(A2),D2
BRA.w JL_0_CE5E
JL_0_7EB2_b JMP JL_0_7EB2

JL_0_CDFC:
  MOVE.l $8(A2),D0
   BEQ.w JL_0_CE24
  MOVEA.l D0,A0
  MOVE.l destpointer,D1
  SUB.l A0,D1
CNIF #longbranch
    TST.b fast
    BEQ 'l1
   TST.w dontwrite
    BNE.w JL_0_CE24
    ADDQ.l #2,d1
   MOVE.l D1,-2(A0)
   BRA JL_0_CE24
CEND
'l1  TST.w dontwrite
     BNE.w JL_0_CE24
   CMP.l #MaxWordSgnd,D1
   BHI.w JL_0_7EEC_b

  MOVE.w D1,(A0)
JL_0_CE24: RTS
JL_0_7EEC_b JMP JL_0_7EEC
JL_0_CE26:  MOVE.l $8(A2),D0
   BEQ.w JL_0_CE5C
  MOVEA.l D0,A3
  MOVE.w #$6000,D1
 CNIF #longbranch
 TST.b fast
 BEQ 'l1
 OR.l #$ff,d1
 BSR writeword
 CEND
'l1 BSR.w writeword
  MOVEQ.l #$08,D0
  MOVEQ.l #$01,D1
  MOVEA.l _execbase,A6
  MOVE.l mempool,a0
  JSR _AllocPooled(a6)
   ;jsr AJL_0_4B6C
  MOVEA.l D0,A0
  MOVE.l $4(A2),(A0)
  MOVE.l A0,$4(A2)
  MOVE.l destpointer,$4(A0)
 BRA.w writeword

JL_0_CE5C: RTS

JL_0_CE5E:
  TST.b debugmode
   BEQ.w JL_0_CE7A
  MOVE.w #$C313,D1
  CMP.w #$3,D2
   BCS.w JL_0_CE76
  ADDQ.w #1,D1
  JL_0_CE76:
  BRA.w Atokejsr

  JL_0_CE7A:
RTS

JL_0_7F0E_b  JMP JL_0_7F0E

.do_case:
  MOVE.l AL_0_CD4A(PC),D0
   BEQ.w JL_0_7F0E_b
  MOVEA.l D0,A2
   BSR.w JL_0_CE26
   BSR.w JL_0_CDFC
  MOVE.w $C(A2),D2
  MOVE.w D2,-(A7)
   BSR.w JL_0_CE5E
  MOVE.w (A7),D2
   BSR.w JL_0_9988
  MOVE.w (A7)+,D2
  LEA L_0_CD5A(PC),A0
  LEA L_0_CD60(PC),A1
  CMP.w #$1,D2
   BEQ.w JL_0_CED8
  LEA L_0_CD5E(PC),A0
  CMP.w #$2,D2
   BEQ.w JL_0_CED8
  LEA L_0_CD60(PC),A0
  LEA JL_0_CD62(PC),A1
  CMP.w #$7,D2
   BCS.w JL_0_CED8
  MOVE.w #$CE01,D1
   BSR.w Atokejsr
  BRA.w JL_0_CEDC

  JL_0_CED8:
  BSR.w JL_0_95A2

  JL_0_CEDC:
  MOVE.w JL_0_CD62(PC),D1
CNIF #longbranch
  TST.b fast
  BEQ 'l1
  ORI.l #$ff,d1
  BSR writeword
CEND
'l1 BSR.w writeword
  MOVEA.l AL_0_CD4A(PC),A0
  MOVE.l destpointer,$8(A0)
 BRA.w writeword

L_0_CEF4:   Dc.b "?<sE"
L_0_CEF8:   Dc.b "B"
   Dc.b $A7 ;.
AL_0_CEFA:   Ds.l 1
.do_select:
  TST.b debugmode
   BEQ.w JL_0_CF0E
  MOVE.l L_0_CEF4(PC),D1
   BSR.w writelong
JL_0_CF0E:  MOVE.l AL_0_E9E8,AL_0_CEFA
   ;bsr.w JL_0_B5BC
   MOVE.l destpointer,AL_0_B5AA
  MOVE.l hunkoffsetbase,AL_0_B5AE
  MOVEQ.l #$00,D2
   BSR.w JL_0_9974
   BSR.w JL_0_B5D2
  CMP.w #$7,D2
   BNE.w JL_0_CF36
  MOVE.w L_0_CEF8(PC),D1
   BSR.w writeword
JL_0_CF36:   BSR.w JL_0_B63C
  LEA L_0_CD4E(PC),A0
  LEA L_0_CD54(PC),A1
  CMP.w #$1,D2
   BEQ.w JL_0_CF88
  LEA JL_0_CD52(PC),A0
  CMP.w #$2,D2
   BEQ.w JL_0_CF88
  LEA L_0_CD54(PC),A0
  LEA L_0_CD56(PC),A1
  CMP.w #$7,D2
   BCS.w JL_0_CF88
  MOVE.w AL_0_2A00,D1
   BSR.w writeword
  LEA L_0_CD56(PC),A0
  LEA L_0_CD5A(PC),A1
   BSR.w JL_0_95A2
  MOVE.w #$C701,D1
   BSR.w Atokejsr
 BRA.w JL_0_CF8C

JL_0_CF88:   BSR.w JL_0_95A2
JL_0_CF8C:  MOVEQ.l #$0E,D0
  MOVEQ.l #$01,D1
  MOVEA.l _execbase,A6
   ;jsr AJL_0_4B6C
  MOVE.l mempool,a0
  JSR _AllocPooled(a6)
  MOVEA.l D0,A0
  MOVE.l AL_0_CD4A(PC),(A0)
  MOVE.l A0,AL_0_CD4A
  CLR.l $4(A0)
  CLR.l $8(A0)
  MOVE.w D2,$C(A0)
RTS

.do_Forever:
  MOVE.l AL_0_4D0A,D0
   BEQ.w JL_0_7DB8b
  MOVE.w #$6000,D1
  BSR.w writeword
  MOVEA.l D0,A0
  MOVE.l $4(A0),D1
  SUB.l destpointer,D1
  TST.w D1
   BPL.w JL_0_7DD2b
  BSR.w writeword
  MOVEA.l _execbase,A6
BRA.w JL_0_D036
JL_0_7DD2b JMP JL_0_7DD2
JL_0_7DB8b JMP JL_0_7DB8

.do_Until:
  MOVE.l AL_0_4D0A,D0
   BEQ.w JL_0_7DB8b
  BSR.w do_if
  JSR JL_0_7C3A
   BNE.w syntaxerrb
  MOVE.w dontwrite,D1
   BNE.w JL_0_D020
  MOVEA.l AL_0_4D0A,A0
  MOVEA.l destpointer,A1
CNIF #longbranch
  TST.b fast
  BEQ 'l1
  SUBQ.w #4,a1
  MOVE.l $4(A0),D2
  SUB.l A1,D2
  MOVE.l d2,(a1)
  BRA JL_0_D020
CEND
 'l1
  SUBQ.w #2,A1
  MOVE.l $4(A0),D2
  SUB.l A1,D2
  TST.w D2
   BPL.w JL_0_7DD2b
  MOVE.w D2,(A1)

  JL_0_D020:
  MOVEA.l firstiff,A1
  MOVE.l (A1),firstiff
  MOVEQ.l #$0E,D0
  MOVEA.l _execbase,A6
  MOVE.l mempool,a0
  JSR _FreePooled(A6)
  JL_0_D036:
  MOVEA.l AL_0_4D0A,A1
  MOVE.l (A1),AL_0_4D0A
  MOVEQ.l #$08,D0
  MOVE.l mempool,a0
JMP _FreePooled(A6)

AL_0_D048:   Ds.l 1
.do_if:
  MOVEQ.l #$00,D2
  TST.b fast
  BEQ 'l1
  MOVE.b #1,nostringopt
  MOVE.b #1,iniffcommand
 'l1
  JL_0_D04C:  MOVEQ.l #$00,D1
  JL_0_D04E:  MOVE.w D1,-(A7)
  MOVE.l destpointer,-(A7)
  MOVE.w D2,-(A7)
  MOVE.l AL_0_E9E8,AL_0_D048
  MOVEQ.l #$00,D2
  MOVE.b optistring,optistring2
  MOVE.b #1,optistring
  BSR.w JL_0_9974
  MOVE.b optistring2,optistring
  CMP.w #$5,D2
   BEQ.w JL_0_D09C
  MOVE.w JL_0_CCDC(PC),D1
  CMP.w #$1,D2
   BEQ.w writebranchcode
  MOVE.w L_0_CCDE(PC),D1
  CMP.w #$2,D2
   BEQ.w writebranchcode
  MOVE.w L_0_CCE2(PC),D1
  CMP.w #$7,D2
   BEQ.w writebranchcode
  MOVE.w L_0_CCE0(PC),D1
BRA.w writebranchcode

JL_0_D09C:
  TST.b fpu
  BEQ 'dofpu
  MOVE.l #$f200003a,d1
  BSR writelong
  MOVE.w #$f2c1,d1
  BSR writeword
  BSR writelong
  ADDQ.l #2,a7
  BRA.w br2
'dofpu   MOVE.w #$C900,D1
   BSR.w Atokejsr
  MOVE.l L_0_CCE4(PC),D1
   BSR.w writelong
 BRA.w JL_0_D0B4

.writebranchcode:
         CLR.b iniffcommand
         TST.b fast ;branchcode
         BEQ b6
         TST.b fpu
         BEQ 'nofpu
         CNIF #optibreak
   ILLEGAL
   CEND
          MOVE.l destpointer,a0
         SUB.l load_var_addr,a0
         CMP.l #4,a0
         BEQ 'nofpu
         CMP.l #$f2400014,-4(a4)    ;<
         BNE 'nolt
         SUBQ.l #2,destpointer
         MOVE.w #$f293,-4(a4)       ;
         BRA 'brf
'nolt    CMP.l #$f2400015,-4(a4)    ;<=
         BNE 'nole
         SUBQ.l #2,destpointer
         MOVE.w #$f292,-4(a4)
         BRA 'brf
'nole    CMP.l #$f2400013,-4(a4)    ;=>
         BNE 'noge
         SUBQ.l #2,destpointer
         MOVE.w #$f294,-4(a4)
         BRA 'brf
'noge    CMP.l #$f2400012,-4(a4)    ;>
         BNE 'nogt
         SUBQ.l #2,destpointer
         MOVE.w #$f295,-4(a4)
         BRA 'brf
'nogt    CMP.l #$f2400001,-4(a4)    ;=
         BNE 'noeq
         SUBQ.l #2,destpointer
         MOVE.w #$f28e,-4(a4)
         BRA 'brf
'noeq    CMP.l #$f240000e,-4(a4)    ;<>
         BNE 'none
         SUBQ.l #2,destpointer
         MOVE.w #$f281,-4(a4)
'brf     ADDQ.l #2,a7
     CNIF #longbranch
     TST.b fast
     BEQ 'l1
         OR.b #$40,-3(a4)
         BSR writeword
     CEND
'l1           BSR writeword
           BRA.s br2
'none
'nofpu         MOVE.l destpointer,a0
         SUB.l load_var_addr,a0
         CMP.l #4,a0
         BEQ JL_0_D0B4
         CMP.w #$4eb9,-6(a4)
         BEQ b6
         CMP.w #$5ec0,-2(a4)    ;>
     BNE.s 'lb1
         MOVE.w #$6f00,-2(a4)         ;ble
         BRA.s br
'lb1 CMP.w #$5dc0,-2(a4)     ;<
  BNE.s 'lb2
         MOVE.w #$6c00,-2(a4)         ;bge
         BRA.s br
'lb2 CMP.w #$57c0,-2(a4)     ;=
  BNE.s 'lb3
         MOVE.w #$6600,-2(a4)         ;bne
         BRA.s br
'lb3 CMP.w #$56c0,-2(a4)     ;<>
  BNE.s 'lb4
         MOVE.w #$6700,-2(a4)         ;beq
         BRA.s br
'lb4 CMP.w #$5cc0,-2(a4)     ;>=
  BNE.s 'lb5
         MOVE.w #$6d00,-2(a4)         ;blt
         BRA.s br
'lb5     CMP.w #$5fc0,-2(a4)     ;<=
        BNE.s b6
         MOVE.w #$6e00,-2(a4)         ;bgt
br      TST.w (a7)+
CNIF #longbranch
        TST.b fast
        BEQ 'l1
        OR.b #$ff,-1(a4)                   ;long branches
        BSR writeword
CEND
'l1
        BSR writeword
        BRA.s br2
b6 BSR.w writeword
JL_0_D0B4:  MOVE.l JL_0_CCE8(PC),D1
  TST.w (A7)+
   BEQ.w JL_0_D0C2
  MOVE.l JL_0_CCEC(PC),D1
JL_0_D0C2: TST.b fast
           BEQ 'l1
           OR.l #$00ff0000,d1
           BSR writelong
           BSR writeword
           BRA br2
'l1 BSR.w writelong
br2  MOVEQ.l #$0E,D0
  MOVEQ.l #$01,D1
  MOVEA.l _execbase,A6
   ;jsr AJL_0_4B6C
  MOVE.l mempool,a0
  JSR _AllocPooled(a6)
  MOVEA.l D0,A0
  MOVE.l firstiff,(A0)
  MOVE.l A0,firstiff
  MOVE.l (A7)+,$4(A0)
  MOVE.l destpointer,$8(A0)
  MOVE.w (A7)+,$C(A0)
   JSR JL_0_7C3A
   BEQ.w JL_0_D10C
  BSET #$7,$C(A0)

.do_then:
  ;bsr.w JL_0_7C44
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
  MOVE.w #$003A,lastchar
  JL_0_D10C:
RTS


JL_0_D10E:
  CMP.w #$1,D0
   BLT.w JL_0_D128
  CMP.w #$0,D0
   BGT.w JL_0_D128
  ADD.w D0,D0
  ADD.w D0,D0
  MOVEA.l JL_0_D128(PC,D0.W),A0
L_0_D126: JMP (A0)

JL_0_D128: BRA.w JL_0_D128

JL_0_D12C:  CMP.w #$1,D0
   BLT.w JL_0_D146
  CMP.w #$0,D0
   BGT.w JL_0_D146
  ADD.w D0,D0
  ADD.w D0,D0
  MOVEA.l JL_0_D146(PC,D0.W),A0
L_0_D144:   JSR (A0)
JL_0_D146: BRA.w JL_0_D146

JL_0_D14A:  CMP.w #$1,D0
   BLT.w JL_0_D168
  CMP.w #$0,D0
   BGT.w JL_0_D168
  ADD.w D0,D0
  ADD.w D0,D0
  MOVEA.l JL_0_D168(PC,D0.W),A0
AL_0_D162:  MOVE.w #$6753,-(A7)
L_0_D166:   JSR (A0)
JL_0_D168: BRA.w JL_0_D168

AL_0_D16C:   Ds.w 1
AJL_0_D16E:  MOVEQ.l #$02,D2
   BSR.w JL_0_9988
  LEA JL_0_D10E(PC),A0
  LEA JL_0_D12C(PC),A1
  MOVE.w #$001A,D1
  CMP.w #-$7FFB,D0
   BEQ.w JL_0_D1B6
  CMP.w #-$7FFA,D0
   BNE.w syntaxerrb
  LEA JL_0_D12C(PC),A0
  LEA JL_0_D14A(PC),A1
  MOVE.w #$001A,D1
  TST.b debugmode
   BEQ.b JL_0_D1B6
   JSR AJL_0_BA86
  LEA JL_0_D14A(PC),A0
  LEA AL_0_D16C(PC),A1
  MOVE.w #$001E,D1
JL_0_D1B6:  MOVE.w D1,-(A7)
  MOVE.l destpointer,-(A7)
   BSR.w JL_0_95A2
  CLR.w AL_0_D16C
JL_0_D1C8:   JSR get1bytemain
  SUBQ.l #2,destpointer
   BSR.w JL_0_AE22
  ADDQ.l #2,destpointer
   JSR JL_0_791C
  MOVE.l $8(A2),D1
   BSR.w writelong
  ADDQ.w #1,AL_0_D16C
   JSR JL_0_7C3A
  CMP.w #$2C,D0
   BEQ.w JL_0_D1C8
  MOVEA.l (A7)+,A0
  MOVE.w (A7)+,D2
  MOVE.w dontwrite,D1
   BNE.w JL_0_D21A
  MOVE.w AL_0_D16C(PC),D1
  MOVE.w D1,$A(A0)
  ADD.w D1,D1
  ADD.w D1,D1
  ADDQ.w #2,D1
  MOVE.w D1,$2(A0,D2.W)
  JL_0_D21A:
RTS

.do_gosub:
  TST.b debugmode
   BEQ.w JL_0_D236
   JSR AJL_0_BA86
  MOVE.l AL_0_D162,D1
   BSR.w writelong
JL_0_D236:  MOVE.w AL_0_2A42,D1
 BRA.w JL_0_D246

.do_goto:
  MOVE.w AL_0_2A3C,D1

  JL_0_D246:
  MOVE.w D1,-(A7)
   BSR.w JL_0_AE22
  MOVE.w (A7)+,D1
   BSR.w writeword
   JSR JL_0_791C
  MOVE.l $8(A2),D1
BRA.w writelong

.do_AsmExit:
  MOVE.w proceduremode,D1
   BEQ.w JL_0_8AE4b
  MOVE.w #$4EF9,D1
   BSR.w writeword
   JSR JL_0_791C
  MOVEA.l _execbase,A6
  MOVEQ.l #$08,D0
  MOVEQ.l #$01,D1
   ;jsr AJL_0_4B6C
  MOVE.l mempool,a0
  JSR _AllocPooled(a6)
  MOVEA.l D0,A0
  MOVE.l AL_0_E8DE,(A0)
  MOVE.l A0,AL_0_E8DE
  MOVE.l destpointer,$4(A0)
 BRA.w writelong

JL_0_D29C:
  BSR.w do_AsmExit
JMP get1bytemain

JL_0_D2A4:
  MOVE.b #1,nostringopt
  MOVEA.l currentfunction,A0
  MOVEQ.l #$00,D2
  MOVE.b $5(A0),D2
  BSR.w eval
BRA.w do_AsmExit

.do_return:
;  TST.w proceduremode       ; return work in functions
;  BEQ 'no                   ; must forbid gosub in functions
;  TST.l currentfunction     ; if that work
;  BEQ 'no
;  SUBQ.l #1,a5
;  BGT JL_0_D2A4
;  CMP.w #$ffff,proceduremode
;  BEQ JL_0_D29C
;'no
TST.b debugmode
   BEQ.w JL_0_D2CA
  MOVE.w #$C305,D1
 BRA.w Atokejsr

JL_0_D2CA:  MOVE.w #$4E75,D1
 BRA.w writeword

   Ds.l 1
AL_0_D2D6:   Ds.l 1
AL_0_D2DA:   Ds.w 1
AL_0_D2DC:   Ds.w 1
AL_0_D2DE:   Ds.l 1
.do_statement:
   TST.w proceduremode
   BGT JL_0_896Aa
   CMP.w #-$7FF9,D0
   BEQ.w JL_0_D29C
   MOVEQ.l #-$01,D1
BRA.w JL_0_D304
JL_0_896Aa JMP JL_0_896A

checkused
CLR.b skipfunc
TST.l unusedfunc
BEQ 'ex
MOVEM.l d0-d7/a0-a6,-(a7)
MOVE.l unusedfunc,d1
LEA ptr_parameterstore,a5
'ag MOVE.l d1,a0
LEA 13(a0),a2
MOVE.l a5,a1
'ch CMPM.b (a1)+,(a2)+
BNE 'neq
TST.b (a2)
BNE 'ch
TST.b (a1)
BNE 'neq
MOVE.b #1,skipfunc

BRA 'out
'neq
MOVE.l (a0),d1
BNE 'ag
'out MOVEM.l (a7)+,d0-d7/a0-a6
'ex
RTS

JL_0_8858b JMP JL_0_8858
JL_0_8936b JMP JL_0_8936
JL_0_896Ab JMP JL_0_896A
.do_function:
  CMP.w #-1,proceduremode
   BEQ JL_0_896Ab
  CMP.w #-$7FF9,D0
   BEQ.w JL_0_D2A4

  ;bsr.w JL_0_7C44
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
  JSR AJL_0_498A
  JSR get1bytemain
  JL_0_D304:
   TST.b declare
  BEQ 'l1
  MOVE.b #1,nowdeclare
 'l1
  JSR AJL_0_4298      ;writejumpoverfunction
  returnaddr  CLR.b fastfunc
  MOVE.l firstiff,firstiffstore
  CMP.l #"FAST",-1(a5)
  BNE 'nofast
  CMP.b #" ",3(a5)
  BNE 'nofast
  ADDQ.l #3,a5
 'x2
    CMP.b #" ",(a5)
     BNE 'x1
    ADDQ #1,a5
  BRA 'x2
 'x1
  MOVE.l a5,lastsourcepos
  MOVE.b #1,fastfunc
 'nofast

  CMP.l #"NOOP",-1(a5)        ;compile 3* so its deactivate
  BRA 'noopt
  CMP.w #"T ",3(a5)
  BNE 'noopt
  ADDQ.l #4,a5
 'x2b
    CMP.b #" ",(a5)
     BNE 'x1b
    ADDQ #1,a5
  BRA 'x2b
 'x1b
  MOVE.l a5,lastsourcepos
  BSR makename2
  BRA 'l1
 'noopt
  BSR.w makename2
  JSR checkused
  TST.b skipfunc
   BEQ 'l1
  JSR skipme
  CLR.b fastfunc
  RTS

 'l1
  MOVE.l AL_0_E9E8,AL_0_D2DE
  ADDQ.w #1,AL_0_D2DC
  MOVE.w AL_0_D2DC(PC),AL_0_D2DA
  MOVE.w D1,proceduremode
  CLR.w AL_0_2B3A
  CMP.w #$7B,D0
   BNE.w syntaxerrb
   MOVE.b #1,infunctioncode
  MOVEA.l tempvm,A0
  MOVE.w $C(A0),AL_0_EBFC
  BCLR #$7,$C(A0) ;Bit out of range
  MOVE.w #$4EF9,D1
   BSR.w writeword
   JSR JL_0_791C
   BSR.w writelong
   BSR.w findproc            ;findproc function
   BEQ.w JL_0_8858b
   BSR.w addlabel
   MOVE.b #31,$20(a2)        ;increase if more pars
   MOVE.b #0,isfunc(a2)
  MOVE.l destpointer,$E(A2)
  MOVE.l A2,currentfunction
  LEA AL_0_28F2,A0
  LEA AL_0_2902,A1
   BSR.w JL_0_95BA
  TST.b debugmode
   BEQ.b JL_0_D3AA
  MOVEQ.l #$04,D1
   JSR writetrap
  MOVE.l destpointer,AL_0_D2D6
   BSR.w writelong
   BSR.w writelong
JL_0_D3AA:  LEA $16(A2),A4
  MOVE.b AL_0_EC0D,$5(A2)
  MOVEQ.l #$00,D6
  MOVEQ.l #$00,D5
   JSR get1bytemain
  CMP.w #$7D,D0
   BEQ.w JL_0_D466
JL_0_D3C6:
   CMP.b #"@",d0
   BNE 'l2
   MOVE.l a0,-(a7)
   MOVE.l currentfunction,a0
   CMP.b #31,$20(a0)             ;increase if morepars
   BNE 'l1
   MOVE.b d6,$20(a0)             ;increase if morepar
'l1 JSR get1bytemain
   MOVE.l (a7)+,a0
'l2
   BSR.w getparameter
   BSR.w JL_0_8E3C
  CMPI.l #$7,$4(A2)
   BNE.w JL_0_D3F6
  LEA AL_0_E9C2,A0
  MOVE.w D5,D1
  LSL.w #2,D1
  MOVE.w D6,$0(A0,D1.W)
  MOVE.w $4(A3),$2(A0,D1.W)
  ADDQ.w #1,D5
  MOVEQ.l #$07,D2
 BRA.w JL_0_D442
JL_0_88B0a JMP JL_0_88B0
JL_0_D3F6:  MOVE.w #$2940,D1
  MOVEQ.l #$03,D2
  BTST #$0,AL_0_EC5B
   BNE.w JL_0_D430
  CMPI.l #$100,$4(A2)
   BCC.w JL_0_8936b
  MOVE.w $6(A2),D2
  CMP.w #$2,D2
   BHI.w JL_0_D430
   BEQ.w JL_0_D42C
  EORI.w #$3000,D1
 BRA.w JL_0_D430
more6pard_b JMP more6pard
JL_0_D42C:  ORI.w #$1000,D1
JL_0_D430:  OR.w D6,D1
  TST.b fpu
  BEQ 'nofpu
  CMP.b #5,d2
  BNE 'nofpu
  CMP.w #6,d6
  BLT 'l10a
  CMP.l #newtype_double,a2
  BEQ more6pard_b
  BRA 'nofpu
'l10a

  MOVE.l #$f22c6400,d1
  MOVEM.l d0/a4,-(a7)
  MOVE.l d6,d0
  ASL.l #7,d0
  OR.w d0,d1
  CMP.l #newtype_double,a2
  BNE 'l1
  OR.l #$1000,d1
'l1  BSR writelong
  MOVE.w 4(a3),d1
  BSR writeword
  MOVEM.l (a7)+,a4/d0
  BRA JL_0_D442
'nofpu  MOVE.l A4,-(A7)
   CMP.w #6,d6
   BLT 'l10
   MOVE.w #$c500-4,d1    ;savetemp+regnum
   ADD.w d6,d1
   JSR Atokejsr
   TST.w dontwrite
   BNE 'l10
   MOVE.l data1start,d1
   MOVE.l destpointer,a4
   ADD.l d1,-6(a4)
   MOVE.l destpointer,d1
   SUBQ.l #6,d1
   SUB.l destbufferstart,d1

   MOVE.l d2,-(a7)
   MOVE.l d1,d2
   JSR addhunkoffset              ;move.l $0,-x(a4)
   MOVE.l (a7)+,d2
   MOVE.l destpointer,a4
   CMP.w #2,d2
   BNE 'nw1

   MOVE.w #$3979,-8(a4)           ;move.w $0,-x(a4)
   ADD.l #2,-6(a4)
'nw1
   CMP.w #1,d2
   BNE 'nb
   MOVE.w #$1979,-8(a4)           ;move.b $0,-x(a4)
   ADD.l #3,-6(a4)
'nb
   MOVE.w $4(a3),-2(a4)
   BRA 'ne1
'l10  BSR.w writeword             ;write storeparameter
'l20  MOVE.w $4(A3),D1
   BSR.w writeword
'ne1  MOVEA.l (A7)+,A4
JL_0_D442:  ADDQ.w #1,D6
  CMP.w #11,D6                ;max function parameters
   BCC.w JL_0_88B0a
  MOVE.b D2,(A4)+
  CMP.w #$2C,D0
   BNE.w JL_0_D45E
   JSR get1bytemain

;   CMP.b #"@",d0
;   BNE JL_0_D3C6
;   MOVE.l a0,-(a7)
;   MOVE.l currentfunction,a0
;   CMP.b #31,$20(a0)             ;increase if morepars
;   BNE 'l1
;   MOVE.b d6,$20(a0)
;'l1 JSR get1bytemain
;   MOVE.l (a7)+,a0
   BRA.w JL_0_D3C6

JL_0_D45E:  CMP.w #$7D,D0
   BNE.w syntaxerrb
JL_0_D466:  MOVEA.l currentfunction,A2
  LSL.w #4,D5
  OR.w D5,D6
  MOVE.b D6,$4(A2)
  LSR.w #4,D6
   BEQ.w JL_0_D4C4
  LEA AL_0_E9C2,A0
  SUBQ.w #1,D6
JL_0_D482:  MOVE.w D6,D1      ;function stringpars
  LSL.w #2,D1                 ;stringsize was 2
CNIF #more6string
  LSL.w #1,d1
  ADDQ.w #4,d1
CEND
  ADDQ.w #8,D1
  MOVE.w D1,AL_0_2A20
  MOVE.l AL_0_2A1E,D1
  BSR.w writelong
  MOVE.w (A0)+,D1
  CMP.b #5,d1
  BLE 's1
  MOVE.w #$266c,d1  ;native move.l 4(a4),a3
  BSR writeinstruction
  MOVE.w D6,D1      ;function stringpars
  LSL.w #2,D1                 ;stringsize was 2
CNIF #more6string
  LSL.w #1,d1
CEND
  ADDQ.w #8,D1
  BSR writeword
  BRA 's2
  's1
  OR.w AL_0_2A18,D1
   BSR.w writeword
's2 MOVE.w (A0)+,AL_0_2A1C
  MOVE.l AL_0_2A1A,D1
   BSR.w writelong
  MOVE.l A0,-(A7)
  MOVE.w #$C700,D1
   BSR.w Atokejsr
  MOVEA.l (A7)+,A0
   DBF D6,JL_0_D482
JL_0_D4C4: JMP get1bytemain

JL_0_D4C8:  MOVE.w dontwrite,D1
   BNE.w JL_0_D4F6
  MOVE.l destpointer,-(A7)
  MOVE.l A0,destpointer
  MOVE.l linksize,D1
   BSR.w writelong                 ;writefunctions jumppos
   TST.b fastfunc
   BNE 'skip
  MOVE.w #$CC00,D1
   BSR.w tokejsr2                ;write clearvars
'skip  MOVE.l (A7)+,destpointer
JL_0_D4F6: RTS

JL_0_D4F8:  MOVEA.l currentfunction,A2
  MOVEA.l $E(A2),A0
  MOVE.w $6(A2),D1
   BEQ.w JL_0_D538
  MOVE.w D1,linksize2
  MOVE.w $8(A2),D1                 ;check if function memalloc need
   BNE.w JL_0_D522
  ADDQ.w #6,A0
  MOVE.l A0,$E(A2)
 BRA.w JL_0_D4C8

JL_0_D522:  MOVE.l A0,-(A7)
   BSR.w JL_0_D4C8
  MOVEA.l (A7)+,A0
  LEA $A(A0),A0
  MOVEA.l currentfunction,A2
 BRA.w JL_0_D54A

JL_0_D538:
MOVE.w $8(A2),D1
   BNE.w JL_0_D54A
  LEA $10(A0),A0
  MOVE.l A0,$E(A2)
RTS
errormsg_nofastb: JMP errormsg_nofast

JL_0_D54A:
   MOVE.w dontwrite,D1  ;writeallocmem for functions (after releasemem called)
   BNE.w JL_0_D580
   TST.b fastfunc
   BNE errormsg_nofastb
  MOVE.l destpointer,-(A7)
  MOVE.l A0,destpointer
  MOVE.w #$4EB9,D1
   BSR.w writeword
   JSR JL_0_791C
   BSR.w writelong
  MOVEA.l (A7)+,A0
  MOVEA.l destpointer,A1
  MOVE.l A0,-(A1)
  MOVE.l A0,destpointer
JL_0_D580:  MOVE.w $8(A2),D4
   BPL.w JL_0_D59E
  MOVE.w #$C004,D1
   BSR.w tokejsr2
  MOVEA.l currentfunction,A2
  MOVE.w $8(A2),D4
  ANDI.w #$7FFF,D4
JL_0_D59E:   BEQ.w JL_0_D5E0
  MOVE.b $4(A2),D1
  ANDI.w #$F,D1
  MOVE.w D1,-(A7)
  CMP.w #$5,D1
   BCS.w JL_0_D5BC
  MOVE.w #$2F04,D1
   BSR.w writeword
JL_0_D5BC:  MOVE.l AL_0_E8DA,D3
   JSR JL_0_74E2
  MOVE.w #$C501,D1
   BSR.w tokejsr2
  MOVE.w (A7)+,D1
  CMP.w #$5,D1
   BCS.w JL_0_D5E0
  MOVE.w #$281F,D1
   BSR.w writeword
  JL_0_D5E0:
  MOVE.w #$4E75,D1
BRA.w writeword

.do_mousewait:
  LEA AL_0_2A48,A0
  LEA AL_0_2A54,A1
  BRA.w JL_0_95A2
  JL_0_8408b
JMP JL_0_8408

.do_newtype:
  CMP.w #$2E,D0
  BNE.w syntaxerrb
  JSR getparameter2
  BEQ.w JL_0_8408b
  LEA newtypebase,A2
  JSR JL_0_8CBE
  BNE.w JL_0_D626
  CMPI.l #MaxByte,$4(A2)
  BNE.w JL_0_83F4b
BRA.w JL_0_D62A
JL_0_83F4b
JMP JL_0_83F4

JL_0_D626:
  JSR addlabel
  JL_0_D62A:
  CLR.l $4(A2)
  MOVE.l A2,AL_0_2B14
  CLR.l AL_0_2B0A
  CLR.w AL_0_2B08
  CLR.w AL_0_2B20
  JSR JL_0_7C3A
  BNE.w AJL_0_D650
RTS

AJL_0_D650:
  CMP.w #-$7FFE,D0
  BEQ.w JL_0_D82E
   ;bsr.w JL_0_7C44
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5
  MOVEQ.l #$00,D6
  CMP.w #$2A,D0
  BNE.w JL_0_D670
  MOVEQ.l #$01,D6
  JSR get1bytemain
  BRA.w JL_0_D67E

  JL_0_D670:
  CMP.w #$40,D0
  BNE.w JL_0_D67E
  MOVEQ.l #$05,D6
  JSR get1bytemain

  JL_0_D67E:
  MOVE.w D6,AL_0_EC5A
  JSR getparameter2
  BEQ.w syntaxerrb
  MOVEA.l AL_0_2B14,A2
  ADDQ.w #4,A2
  JSR findvariable2
  BEQ.w JL_0_80C6b
  JSR addlabel
  MOVE.l A2,-(A7)
  CMP.w #$2E,D0
   BEQ.w JL_0_D6CE
  CMP.w #$24,D0
   BNE.w JL_0_D6C0
  MOVE.l #newtype_string,D2
   JSR get1bytemain
BRA.w JL_0_D710
JL_0_80C6b
JMP JL_0_80C6

JL_0_D6C0:
  MOVE.l AL_0_2B0A,D2
  BEQ.w JL_0_8440b
BRA.w JL_0_D706
JL_0_8440b
JMP   JL_0_8440

JL_0_D6CE:
  JSR getparameter2
   BEQ.w syntaxerrb
  LEA newtypebase,A2
   JSR JL_0_8CBE
   BEQ.w JL_0_D704
  BTST #$0,AL_0_EC5B
   BEQ.w JL_0_8440b
  JSR addlabel
 'n
  MOVE.w AL_0_E9E8+2,$8(A2)
  MOVE.l #MaxByte,$4(A2)

  JL_0_D704:
  MOVE.l A2,D2

  JL_0_D706:
  CMP.l #newtype_byte,D2
   BEQ.w JL_0_D71E

  JL_0_D710:
  ADDQ.w #1,AL_0_2B08
  BCLR #$0,AL_0_2B09

  JL_0_D71E:
  MOVEQ.l #$00,D3
  MOVEA.l D2,A2
  MOVE.l A2,AL_0_2B0A
  MOVE.w $8(A2),D3
  MOVEA.l (A7)+,A2
  MOVE.l D2,$A(A2)
  MOVEQ.l #$00,D4
  MOVE.w AL_0_2B08,D4
  MOVE.w D4,$4(A2)
  BTST #$0,AL_0_EC5B
   BEQ.w JL_0_D74C
  MOVEQ.l #$04,D3

  JL_0_D74C:
  CMP.w #$5B,D0
   BNE.w JL_0_D782
  MOVEM.l D3-D4/A2,-(A7)
   BSR.w AJL_0_BF6E
  CMP.w #$5D,D0
   BNE.w syntaxerrb
  TST.w D6
   BNE.w JL_0_83BAb
  MOVE.l D3,D1
  MOVEM.l (A7)+,D3-D4/A2
   JSR get1bytemain
  MOVE.w D1,$8(A2)
  MULU.l d1,d3               ;>32k fix was mulu.w
  ORI.w #$2,AL_0_EC5A

  JL_0_D782:
  ADD.l D3,D4

CNIF #types64
  CMP.l #65532,d4
CELSE
  CMP.l #32764,d4
CEND

  BCC JL_0_8492b
  MOVE.w AL_0_EC5A,$6(A2)
  MOVE.w D4,AL_0_2B08
RTS
JL_0_86BAb JMP JL_0_86BA
JL_0_867Eb JMP JL_0_867E
JL_0_8492b JMP JL_0_8492
JL_0_83BAb JMP JL_0_83BA

JL_0_D79E:
  MOVE.l firstiff,D0
   BEQ.w JL_0_867Eb
  MOVEA.l D0,A0
  MOVE.w $C(A0),D0
  ANDI.w #$FF,D0
  CMP.w D0,D1
   BNE.w JL_0_86BAb

  AJL_0_D7B8:
  CMP.w #$1,D1
  BNE.w JL_0_D7D8
  MOVE.w #$6000,D1

CNIF #longbranch
  TST.b fast
BEQ 'l1
  OR.l #$ff,d1
CEND

 'l1
  BSR.w writeword
  MOVEA.l destpointer,A1
  MOVE.l $4(A0),D1
  SUB.l A1,D1

CNIF #longbranch
  TST.b fast
  BEQ 'l2
  BSR writelong
  BRA JL_0_D7D8
CEND

 'l2
  BSR.w writeword

  JL_0_D7D8:
  MOVEA.l $8(A0),A1    ;write if branch destination
  MOVE.l destpointer,D1
  SUB.l A1,D1

CNIF #longbranch
  TST.b fast
  BEQ 'l1
  ADDQ.l #4,D1
  MOVE.w dontwrite,D0
  BNE.w JL_0_D7FE
  MOVE.l d1,-$4(a1)
  BRA JL_0_D7FE
CEND

 'l1
  ADDQ.l #2,d1
  TST.w dontwrite
  BNE JL_0_D7FE
  CMP.l #MinWordSgnd,D1
  BCC.w JL_0_86A2b
  MOVE.w D1,-$2(A1)

  JL_0_D7FE:
RTS
JL_0_86A2b JMP JL_0_86A2


.do_Wend:
  ;bsr.w JL_0_7C44
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5

  JL_0_D804:
  MOVEQ.l #$01,D1
  BRA.w JL_0_D810

  AJL_0_D80A:   ;bsr.w JL_0_7C44
  MOVE.w AL_0_E9A0,instringon
  MOVEA.l lastsourcepos,A5

  JL_0_D80E:
  MOVEQ.l #$00,D1

  JL_0_D810:
  BSR.w JL_0_D79E
  BSR.w AJL_0_D81C
JMP get1bytemain

AJL_0_D81C:
  MOVE.l (A0),firstiff
  MOVEA.l A0,A1
  MOVEQ.l #$0E,D0
  MOVEA.l _execbase,A6
  MOVE.l mempool,a0
JMP _FreePooled(A6)

JL_0_D82E:
  JSR get1bytemain

.do_end:
  BEQ.w JL_0_D980
  CMP.l #"noa7",-1(a5)
  BNE 'l1
  JSR get1bytemain
  JSR get1bytemain
  JSR get1bytemain
  MOVE.w #$3a,lastchar
  BRA JL_0_D980
 'l1
  CMP.w #"d0",-1(a5)
  BNE 'l2
  MOVE.b #1,returncode
  CLR.w lastchar
  BRA JL_0_D980
 'l2
  CMP.w #$80d7,d0
  BNE JL_0_D836
  JSR skiprest
RTS

JL_0_D836:
  BSR.w JL_0_D844
  JSR JL_0_7C3A
  BNE.w JL_0_D836
RTS

JL_0_D844:
  CMP.w #-$7FFF,D0
   BNE.w JL_0_D87E
  MOVE.w AL_0_2B20,D1
   BNE.w JL_0_8420b
  ADDQ.w #1,AL_0_2B08
  BCLR #$0,AL_0_2B09
  MOVEA.l AL_0_2B14,A0
  MOVE.w AL_0_2B08,$8(A0)
  MOVE.w #$FFFF,AL_0_2B20
 JMP get1bytemain
JL_0_8420b JMP JL_0_8420
JL_0_D87E:  CMP.w #-$7FF5,D0
   BEQ.w JL_0_D80E
  CMP.w #-$7FF4,D0
   BEQ.w JL_0_D804
  CMP.w #-$7FF8,D0
   BNE.w JL_0_D89A
JL_0_D896: BRA.w JL_0_D9E8
JL_0_7FEEa JMP JL_0_7FEE
JL_0_D89A:  CMP.w #-$7FF7,D0
   BNE.w JL_0_D8C8
   TST.b fpu
   BEQ 'nof
   MOVEA.l currentfunction,A0
   CMP.l #0,a0
   BEQ 'nof
   CMP.b #5,$5(a0)
    BNE 'nof
   MOVE.l #$f23c5000,d1
   BSR writelong
   MOVE.w #0,d1
   BSR writeword
'nof  MOVE.w #$7000,D1               ;end function moveq #0,d0
   BSR.w writeword
  MOVEA.l currentfunction,A0
  CMP.l #0,a0
  BEQ JL_0_D896
  MOVE.l destpointer,d1
  SUB.l $e(a0),d1
  MOVE.l d1,isfunc+1(a0)
  CMPI.b #$7,$5(A0)
   BNE.w JL_0_D896
  MOVE.w AL_0_2A08,D1
   BSR.w writeword
 BRA.w JL_0_D896
JL_0_8016a JMP JL_0_8016
JL_0_D8C8:  CMP.w #-$7FD0,D0
   BNE.w JL_0_D966
  MOVE.w proceduremode,D1
   BNE.w JL_0_7FEEa
  TST.b debugmode
   BEQ.w JL_0_D90A
  MOVEQ.l #$03,D1
   JSR writetrap
  MOVE.w dontwrite,D1
   BNE.w JL_0_D90A
  MOVEA.l AL_0_50D6,A0
  MOVE.l destpointer,(A0)
  MOVE.w #$C30C,D1
   BSR.w Atokejsr
  JL_0_D90A:  MOVE.w AL_0_50D2,D1
   BEQ.w JL_0_8016a
   BPL.w JL_0_D934
  MOVE.w AL_0_50D4,D1
  ORI.w #$7200,D1
   BSR.w writeword
  MOVE.w #$C103,D1
   BSR.w Atokejsr
  CLR.w AL_0_50D4
  JL_0_D934:  CLR.w AL_0_50D2
  MOVE.l AL_0_4F12,D1
   BSR.w writelong
  MOVE.l #$70004E75,D1
   BSR.w writelong
  MOVE.w dontwrite,D1
   BNE.w JL_0_D962
  MOVEA.l AL_0_50CC,A0
  MOVE.l destpointer(PC),(A0)
  JL_0_D962:
JMP get1bytemain

JL_0_D966:
  CMP.w #-$7FF2,D0
   BEQ.w JL_0_CD68
  CMP.w #-$7F4C,D0
   BNE.w JL_0_D97C
JMP AJL_0_4F48
JL_0_D97C: JMP syntaxerr

JL_0_D980:
  TST.w dirmode
  BNE.w JL_0_8148a
  MOVE.w #$C800,D1
 JSR Atokejsr                    ;end
 CMP.l #"noa7",-4(a5)
 BNE 'l10
 TST.w dontwrite
 BNE 'l10
 MOVE.l destpointer,d1
 SUBQ.l #4,d1
 MOVE.l a0,-(a7)
 MOVE.l d1,a0
 MOVE.l (a0),a0
 MOVE.l #$60000002,(a0)+
 MOVE.w #$588f,(a0)
 MOVE.l (a7)+,a0
 'l10
RTS

.do_Stop:
  TST.w dirmode   ;stop
  BNE.w JL_0_8148a
  MOVE.w d0,d1
  BEQ 'l10
  CMP.b #$3a,d0
  BEQ 'l10
  JSR get1bytemain
 'l10
  TST.b debugmode
  BEQ.w newstop
  MOVE.w #$D501,D1
  BRA.w Atokejsr
  newstop
CNIF #stopignore
  RTS
CEND
  MOVE.w d1,d0
  BEQ 'l10
  CMP.b #$3a,d0
  BEQ 'l10
  SUB.b #$30,d0
  MOVE.w #$4e40,d1
  BRA 'l11
 'l10
  MOVE.w #$4e4a,d1
  BRA writeword

 'l11
  ADD.b d0,d1
BRA writeword

.do_Cont:
JMP AJL_0_80FC

JL_0_D9B4:
  MOVE.w #$4E71,D1
BRA.w writeword

AJL_0_D9BC:
  MOVEA.l AL_0_E9A8,A2
  CLR.l AL_0_E9A8
  MOVEA.l _execbase,A6

  JL_0_D9CC:
  CMPA.w #$0,A2
  BEQ.w JL_0_D9E6
  MOVEA.l A2,A1
  MOVEA.l (A1),A2
  MOVEQ.l #$00,D0
  MOVE.l mempool2,a0
  MOVE.b $10(A1),D0
  JSR _FreePooled(A6)      ;freememfor_error
  BRA.w JL_0_D9CC

  JL_0_D9E6:
RTS

JL_0_8AE4b JMP JL_0_8AE4

JL_0_D9E8:
  MOVE.w proceduremode,D1   ;end statement
   BEQ.w JL_0_8AE4b
  MOVE.w dontwrite,D1
   BNE.w JL_0_DA1A
  MOVEA.l AL_0_E8DE,A2
  JL_0_DA02:
  CMPA.w #$0,A2
   BEQ.w JL_0_DA1A
  MOVEA.l $4(A2),A0
  MOVE.l destpointer,(A0)
  MOVEA.l (A2),A2
  BRA.w JL_0_DA02

  JL_0_DA1A:
  TST.b debugmode
   BEQ.b JL_0_DA2A
  MOVEQ.l #$05,D1
  JSR writetrap
  JL_0_DA2A:

  MOVEA.l firstlocal,A2      ;firstlocal
  JSR JL_0_748Ab                      ;calcstatic
  MOVEA.l currentfunction,A0
  MOVE.l destpointer,d1
  SUB.l $e(a0),d1
  MOVE.l d1,isfunc+1(a0)              ;store function size
  MOVE.w D4,$8(A0)                    ;set if memalloc need
  MOVE.l D3,AL_0_E8DA
  MOVEA.l tempvm,A1
 CLR.b infunctioncode
  MOVE.l firstiffstore,d1
  CMP.l firstiff,d1
  BNE AJL_0_8842b
  TST.w $C(A1)          ;dim
   BPL.w JL_0_DA64
 BSET #$7,$8(A0)
  MOVE.w #$C005,D1
   BSR.w tokejsr2     ;writefreememstatement
   BRA.w JL_0_DA6C
AJL_0_8842b JMP AJL_0_8842
JL_0_DA64:  MOVE.w AL_0_EBFC,$C(A1)
JL_0_DA6C:  MOVEA.l currentfunction,A0
  MOVE.l $E(A0),-(A7)
  MOVE.w AL_0_2B3A,$6(A0)
  BCLR #$1,$7(A0)
  BCLR #$0,$7(A0)
  CMPI.b #$7,$5(A0)
   BNE.w JL_0_DA9E
  MOVE.w AL_0_2A0A,D1
   BSR.w writeword
JL_0_DA9E:  TST.w $6(A0)
   BEQ.w JL_0_DAB8
  MOVE.w #$FC7B,D1
   JSR uselib
  MOVE.w AL_0_2A36,D1
   BSR.w writeword
JL_0_DAB8:  MOVEA.l currentfunction,A0
  MOVEQ.l #$00,D1
  MOVE.b $4(A0),D1
  LSR.w #4,D1
   BEQ.w JL_0_DB24
CNIF #more6string
     LSL.w #1,d1
CEND
  CMP.w #$1,D1
   BNE.w JL_0_DAE0
  MOVE.w AL_0_2A16,D1
   BSR.w writeword
 BRA.w JL_0_DB24

JL_0_DAE0:  LSL.w #2,D1

  MOVE.w D1,-(A7)
  MOVE.w D1,AL_0_2A0E
  MOVE.l AL_0_2A0C,D1
   BSR.w writelong
  MOVE.w (A7)+,D1
  CMP.w #$8,D1
   BHI.w JL_0_DB14
  ANDI.w #$7,D1
  LSL.w #8,D1
  LSL.w #1,D1
  OR.w AL_0_2A14,D1
   BSR.w writeword
 BRA.w JL_0_DB24

JL_0_DB14:  MOVE.w D1,AL_0_2A12
  MOVE.l AL_0_2A10,D1
   BSR.w writelong
JL_0_DB24:   BSR.w JL_0_D2CA
   BSR.w JL_0_D4F8
  MOVEA.l (A7)+,A0
  MOVE.w dontwrite,D1
   BNE.w JL_0_DB3E
  MOVE.l destpointer,-(A0)
JL_0_DB3E:  CLR.w proceduremode
  CLR.l currentfunction
  CLR.w AL_0_D2DA
   BSR.w JL_0_DB5C
   JSR AJL_0_8DB8
 JMP get1bytemain

JL_0_DB5C:  MOVEQ.l #$0C,D0
  MOVEQ.l #$01,D1
  MOVEA.l _execbase,A6
   ;jsr AJL_0_4B6C
  MOVE.l mempool,a0
  JSR _AllocPooled(a6)
  MOVEA.l D0,A0
  MOVE.l AL_0_2B2C,(A0)
  MOVE.l A0,AL_0_2B2C
  MOVE.l firstlocal,D0
  CLR.l firstlocal
  MOVE.l D0,$4(A0)
  MOVE.l firstglob,D1
  CLR.l firstglob
  MOVE.l D1,$8(A0)
  TST.b debugmode
   BEQ.b JL_0_DBB0
  TST.w dontwrite
   BNE.b JL_0_DBB0
  MOVEA.l AL_0_D2D6(PC),A0
  MOVE.l D0,(A0)+
  MOVE.l D1,(A0)

  JL_0_DBB0:
RTS
JL_0_8148b JMP JL_0_8148

.do_next:
  TST.w dirmode
   BNE.w JL_0_8148b
  MOVE.l AL_0_E9A8,D1
   BEQ.w JL_0_89E0b
  JSR JL_0_7C3A
   BEQ.w JL_0_DC18
  JL_0_DBCE:
  BSR.w getparameter
  MOVEA.l AL_0_E9A8(PC),A2
  MOVEQ.l #$00,D1
  MOVE.b $10(A2),D1
  SUBI.w #$12,D1
  CMP.w D1,D2
   BNE.w JL_0_89E0b
  LEA ptr_parameterstore(PC),A0
  LEA $11(A2),A1
  SUBQ.w #1,D2
  JL_0_DBF0:  CMPM.b (A0)+,(A1)+
   BNE.w JL_0_89E0b
   DBF D2,JL_0_DBF0
   BSR.w JL_0_DC1A
   JSR JL_0_7C3A
   BEQ.w JL_0_DC16
  CMP.w #$2C,D0
   BNE.w syntaxerrb
   JSR get1bytemain
 BRA.w JL_0_DBCE
JL_0_89E0b:JMP JL_0_89E0
JL_0_DC16: RTS
 fpu2dats
 MOVE.l 8(a7),a2
 Dc.l  $f2124400     ;fmove.s (a2),fp0
 Dc.l  $F2174422     ;fadd.s (a7),fp0
 Dc.l  $F2126400     ;fmove.s fp0,(a2)
 fpu2date
JL_0_DC18:  MOVEA.l D1,A2
JL_0_DC1A:   JSR AJL_0_4C5E
  MOVE.w $C(A2),D0
  LEA AL_0_2948,A0
  LEA AL_0_2950,A1
  CMP.w #$1,D0
   BEQ.w JL_0_DC74
  LEA AL_0_2950,A0
  LEA AL_0_2958,A1
  CMP.w #$2,D0
   BEQ.w JL_0_DC74
  LEA AL_0_2958,A0
  LEA AL_0_2960,A1
  CMP.w #$5,D0
   BNE.w JL_0_DC74
   TST.b fpu
   BEQ 'old
   LEA fpu2dats,a0                               ;fpu next code
   LEA fpu2date,a1
   BRA JL_0_DC74
'old  MOVE.w #$C900,D1
   BSR.w Atokejsr
  LEA AL_0_2960,A0
  LEA AL_0_296E,A1
JL_0_DC74:   BSR.w JL_0_95A2
    TST.b fast                       ;fast for next deactivate
    BRA 'l1
    TST.b onestep
    BEQ 'l1
    CLR.b onestep
    SUBQ.l #4,destpointer
    MOVE.w #$5292,d1
    BSR writeword
  'l1
  MOVE.l JL_0_DCF4(PC),D1
   BSR.w writelong
  MOVEA.l AL_0_E9A8,A2
  MOVE.l (A2),AL_0_E9A8
  MOVEA.l $8(A2),A0
  MOVEA.l destpointer,A1
  MOVE.l A1,D1
  SUB.l A0,D1
  ADDQ.l #2,D1
  CMP.l #MinWordSgnd,D1
   BCC.w JL_0_89F6b
  TST.w dontwrite
   BNE.w JL_0_DCB4
  MOVE.w D1,-$2(A0)
JL_0_DCB4:  MOVE.l A1,D1
  SUB.l $4(A2),D1
  SUBQ.l #6,D1
  CMP.l #MinWordSgnd,D1
   BCC.w JL_0_89F6b
  TST.w dontwrite
   BNE.w JL_0_DCD6
  NEG.w D1
  MOVE.w D1,-$2(A1)
  JL_0_DCD6:
  JSR AJL_0_4C1C
  MOVEA.l _execbase,A6
  MOVEA.l A2,A1
  MOVEQ.l #$00,D0
  MOVE.b $10(A1),D0
  MOVE.l mempool2,a0
  JSR _FreePooled(A6)
JMP JL_0_7C3A

notallowd_b: JMP notallowd
JL_0_89F6b:  JMP JL_0_89F6
JL_0_8148a:  JMP JL_0_8148

AJL_0_DCF0:
  MOVE.w #$664F,-(A7)
  JL_0_DCF4:
BRA.w JL_0_DCF4

error_dublicate_forFAR: JMP error_dublicate_for

AL_0_DCF8:   Ds.l 1
AL_0_DCFA:   Ds.w 1
.do_for:
  CLR.l fp0addr
  TST.w dirmode
   BNE.w JL_0_8148a
  MOVE.l AL_0_E9E8,AL_0_DCF8
  MOVE.l A5,AL_0_E854
  BSR.w getparameter
  MOVE.w D2,AL_0_DCFA
  JSR JL_0_8CD0
   BEQ.w error_dublicate_forFAR
  LEA AL_0_E9A8,A2
  JSR JL_0_8C3A
  MOVE.l A2,-(A7)
  TST.b debugmode
   BEQ.b JL_0_DD4C
  JSR AJL_0_BA86
  MOVE.l AJL_0_DCF0,D1
  JSR  writelong
  JL_0_DD4C:
  MOVE.w AL_0_DCFA(PC),D2
  MOVE.b #1,formode
  BSR.w AJL_0_DEA6                  ;for get 1. value
  CLR.b formode
  CMP.w #-$7FE8,D0
   BNE.w syntaxerrb
  MOVE.w AL_0_E9E2,D1
   BNE.w syntaxerrb
  CMP.b #$6,D2
   BCC.w JL_0_89C4b
  BTST #$F,D2
   BNE.w JL_0_DD86
  MOVE.w AL_0_29C8,D1
  JSR JL_0_94C0
  MOVE.w D3,D1
  JSR  writeword

  JL_0_DD86:
  MOVE.w AL_0_29C6,D1
  JSR  writeword
  ANDI.w #$FF,D2

  MOVEA.l (A7),A1
  MOVE.w D2,$C(A1)
  MOVE.w D2,-(A7)
   BSR.w eval
   CLR.b onestep
   CMP.w #$8019,d0
   BEQ 'l1
   MOVE.b #1,onestep
   'l1
  MOVE.w (A7),D2
  MOVE.w AL_0_29DC,D1
  CMP.w #$3,D2
   BCC.w JL_0_DDB6
  MOVE.w AL_0_29DA,D1
JL_0_DDB6:
   MOVE.w D1,-(A7)
   TST.b fpu
   BEQ 'old
   CMP.b #5,d2
   BNE 'old
   MOVE.l #$f2276400,d1
   ;MOVE.l #$f2277400,d1
   JSR writelong
   BRA 'weit

'old
   JSR  writeword               ;fpu for end value
'weit  CMP.w #-$7FE7,D0
   BNE.w JL_0_DDCC
   BSR.w eval
   TST.b fpu
   BEQ JL_0_DE0C
   CMP.b #5,d2
   BNE JL_0_DE0C
   MOVE.l #$f2276400,d1         ;write step <> 1
   ;MOVE.l #$f2277400,d1         ;write step <> 1
  JSR writelong
 ;BRA.w JL_0_DE0C
   MOVE.w (a7)+,d1
   BRA fpur
JL_0_DDCC:  CMP.w #$4,D2
   BCC.w JL_0_DDE0
  MOVE.w #$7001,D1
  JSR writeword
BRA.w JL_0_DE0C

JL_0_89C4b JMP JL_0_89C4

JL_0_DDE0:
  BNE.w JL_0_DDFA
  MOVE.w #$7001,D1
  JSR writeword
  MOVE.w AL_0_29C4,D1
  JSR writeword
  BRA.w JL_0_DE0C

  JL_0_DDFA:
  TST.b fpu
   BEQ 'old
  CMP.b #5,d2
   BNE 'old
  MOVE.l #$f23c5000,d1
  JSR writelong
  MOVE.w #$1,d1
  JSR writeword
  MOVE.l #$f2276400,d1
  JSR writelong
  MOVE.w (a7)+,d1
  BRA fpur
 'old
  MOVE.w #$203C,D1      ;write step 1
  JSR writeword
  MOVE.l #SA_BackFill,D1
  JSR writelong

  JL_0_DE0C:
  MOVE.w (A7)+,D1
  JSR writeword

  fpur
  MOVE.w (A7)+,D2
  MOVEA.l (A7),A1
  MOVE.l destpointer,$4(A1)
  LEA AL_0_296E,A0
  LEA AL_0_2982,A1
  CMP.w #$1,D2
   BEQ.w JL_0_DE7E
  LEA AL_0_2982,A0
  LEA AL_0_2996,A1
  CMP.w #$2,D2
   BEQ.w JL_0_DE7E
  LEA AL_0_2996,A0
  LEA AL_0_29AA,A1
  CMP.w #$5,D2
   BNE.w JL_0_DE7E
  TST.b fpu
   BEQ 'old
  LEA fpu_start,a0
  LEA fpu_end,a1
  JSR JL_0_95A2
  BRA fpu3

 'old
  LEA AL_0_29AA,A0        ;
  LEA AL_0_29C0,A1
  JSR JL_0_95A2
  MOVE.w #$C900,D1
  BSR.w Atokejsr
  LEA AL_0_29C0,A0
  LEA AL_0_29C4,A1

  JL_0_DE7E:
  JSR JL_0_95A2
  TST.b fast                 ;fast for next
   BEQ 's1
  CMP.w #3,d2
   BNE 's1
  TST.b onestep
   BEQ 's1
  SUB.l #10,destpointer
  MOVE.w #$b081,d1
  JSR writeword
 's1
  fpu2
  MOVE.l JL_0_DE98(PC),D1
  JSR writelong
  fpu3
  MOVEA.l (A7)+,A1
  MOVE.l destpointer,$8(A1)
  JMP JL_0_7C3A

  fpu_start
  MOVEA.l 8(a7),a2
  Dc.l $f2124400                ;fmove.s (a2),fp0
  fmove.s 4(a7),fp1
  BTST.b #7,(a7)
  BNE 'negi
  fcmp.x fp1,fp0
  BRA 'negi2
 'negi
  fcmp.x fp0,fp1
 'negi2
  Dc.l $f2920000               ;fbgt.w
  fpu_end

  JL_0_DE98:
  BGT.w JL_0_DE98
.do_let:
  MOVE.l A5,AL_0_E854
  BSR.w getparameter
  AJL_0_DEA6:   ;bsr.w JL_0_B5BC
.varassign
  MOVE.l destpointer,AL_0_B5AA
  MOVE.l hunkoffsetbase,AL_0_B5AE
  MOVE.w #$0001,regnum
  JSR JL_0_8E3C
  JSR JL_0_9122
  TST.b formode
  BEQ 'lf1
  CMP.l #newtype_double,A2
  BEQ notallowd_b
  MOVE.l a2,currtype
 'lf1
  CLR.w startoffsetmore
  CMP.w #$3d,d0
  BNE 'l1a
  BTST #15,d2
  BEQ 'l1a
  CMP.b #1,d2
  BNE 'l1a
  MOVE.w AL_0_2AEE,startoffsetmore
 'l1a
  CLR.w regnum
  BSR.w JL_0_B5D2
  CLR.w AL_0_E9E2
  CLR.w stackcorrect
  CLR.w AL_0_E0E8
  MOVE.w startoffsetmore,d1
  BTST #0,d1
  BEQ 'l2a
  MOVE.w #1,AL_0_E0E8
 'l2a
  CMP.w #$3D,D0                   ;=
  BEQ.w JL_0_DEE0
 'l1
  MOVE.b (a5)+,d1
  BEQ 'l10
  CMP.b #":",d1
  BEQ 'l10
  CMP.b #";",d1
  BEQ 'l10
  CMP.b #"0",d1
  BLT 'l11
  CMP.b #"9",d1
  BGT 'l11
  BRA.s 'l1
'l10  MOVE.b #1,quickadd
'l11  MOVEA.l AL_0_E854,A5
  SUBQ.w #1,A5
JL_0_DEE0:
CMP.b #$7,D2
   BNE.w JL_0_DF8A
;   TST.b infunctioncode
;   BEQ 'l10
;   MOVE.b #1,addmemcode
'l10  MOVEM.w D2-D3,-(A7)
  MOVE.l AL_0_E9E4,-(A7)
  MOVE.w varmode,-(A7)
  ; JSR AJL_0_457A
   MOVE.l #AL_0_A470,AL_0_A6B0
   MOVE.l #AL_0_9D14,AL_0_9D10
   CLR.w regnum
   CLR.w AL_0_EC5E
   CLR.w AL_0_EC48
   MOVE.w AL_0_EBEE,AL_0_EBF2
   CLR.w AL_0_EBEE
   MOVE.w #$FFFF,AL_0_EC22
  ;end 457a
  MOVEQ.l #$07,D2
   BSR.w eval
  MOVE.w (A7)+,varmode
  MOVE.l (A7)+,AL_0_E9E4
  MOVE.w AL_0_2A00,D1
   JSR writeword
  MOVE.w AL_0_E9E2,D1
   BEQ.w JL_0_DF38
  LEA AL_0_2A9A,A0
  LEA AL_0_2AA0,A1
   JSR JL_0_95A2
BRA.w JL_0_DF3C

JL_0_DF38:
  BSR.w JL_0_B63C
  JL_0_DF3C:
  MOVEM.w (A7)+,D2-D3
  BTST #$F,D2
  BNE.w JL_0_DF58
    MOVE.w D3,AL_0_2A92
    MOVE.l AL_0_2A90,D1
    JSR JL_0_94F6
  JL_0_DF58:
  MOVE.w #$FE6F,D1
  JSR uselib
  MOVE.l #$C700,D1
  MOVE.l d1,lastinstruction
  MOVE.w varmode,D2
  BNE.w JL_0_DF70
    ADDQ.w #1,D1
  JL_0_DF70:
  BSR.w Atokejsr
  CMP.w #$2C,D0
  BNE.w JL_0_E0C6

  MOVE.w AL_0_2A22,D1
  JSR writeword
BRA.w JL_0_E018

error4char_:          JMP error4char
error_convert_typesb: JMP error_convert_types

JL_0_DF8A:
   BTST #$E,D2
   BNE.w JL_0_DF9C
  TST.b D2
   BEQ.w JL_0_8504b
   TST.b newsyntax
   BEQ JL_0_DFA0
.atmode
   CMP.w #$4022,(a5)
   BNE JL_0_DFA0
   CMP.l #3,d2
   BNE  error_convert_typesb
   ADDQ #2,a5
   MOVEQ #0,d0
   MOVE.b (a5)+,d0
   BEQ JL_0_DFA0
   CMP.b #$22,d0
   BNE 'l1
   MOVE.b #0,d0
   BRA 'do
'l1 ASL.l #8,d0
   MOVE.b (a5)+,d0
   BEQ JL_0_DFA0
   CMP.b #$22,d0
   BNE 'l2
   MOVE.b #0,d0
   ASR.l #8,d0
   BRA 'do
'l2 ASL.l #8,d0
    MOVE.b (a5)+,d0
   BEQ JL_0_DFA0
   CMP.b #$22,d0
   BNE 'l3
   MOVE.b #0,d0
   ASR.l #8,d0
   BRA 'do
'l3 ASL.l #8,d0
    MOVE.b (a5)+,d0
   BEQ JL_0_DFA0
   CMP.b #$22,d0
   BNE 'l4
   MOVE.b #0,d0
   ASR.l #8,d0
   BRA 'do
'l4
   CMP.b #$22,(a5)+
   BNE error4char_
'do MOVE.w #$2b7c,d1
   TST.w varmode
   BEQ 'g3
   BCLR #9,d1
'g3
    JSR writeword
    MOVE.l d0,d1
    JSR writelong
    MOVE.w d3,d1
    JSR writeword
    JSR get1bytemain
    RTS
   BRA.w JL_0_DFA0
JL_0_8504b JMP JL_0_8504
JL_0_DF9C:  MOVE.w d2,vartype
MOVE.b #$3,D2
JL_0_DFA0:
  CMP.b #5,d2
  BNE 'l1
  MOVE.l a2,currtype
'l1  ;MOVE.l currtype,-(a7)
  MOVEM.w D2-D3,-(A7)
  MOVE.w varmode,-(A7)
  ANDI.w #$FF,D2
  MOVE.l AL_0_E9E4,-(A7)
   BSR.w eval
  MOVE.l (A7)+,AL_0_E9E4
  MOVE.w AL_0_E9E2,D1
   BNE.w JL_0_DFCC
   BSR.w JL_0_B63C
JL_0_DFCC:  MOVE.w (A7)+,varmode
  MOVEM.w (A7)+,D2-D3
  ;MOVE.l (a7)+,currtype
  MOVE.w #$2B40,D1
  MOVE.w varmode,D4
   BEQ.w JL_0_DFE8
  BCLR #$9,D1
JL_0_DFE8:  BTST #$F,D2
   BEQ.w JL_0_E090
   TST.b stackcorrect
   BNE 'st1
  MOVE.w AL_0_E9E2,D1
   BEQ.w JL_0_E004
'st1 MOVE.w AL_0_2A98,D1
   JSR writeword
JL_0_E004:  MOVE.w #$2480,D1
   MOVEM.l a0/d0,-(a7)
   MOVEA.l AL_0_E9E4,A0
   MOVE.l A0,D0
   BEQ.w 'skip
   MOVEA.l D0,A0
   MOVE.l $A(A0),currtype
'skip   MOVEM.l (a7)+,a0/d0
  CMP.w #$2C,D0
   BNE.w JL_0_E090
    MOVE.w #$24C0,D1
   BSR.w JL_0_E090      ;write store
JL_0_E018:
   MOVE.l AL_0_E9E4,D0
   ;BEQ.w JL_0_879Ab
'dim1 MOVE.w #$FFFF,AL_0_E9E2
  CLR.w AL_0_EBEE
  MOVE.b #1,optiarray
  MOVE.w AL_0_2A94,D1
   JSR writeword
  TST.l AL_0_E9E4
  BEQ dimmore
  MOVEA.l AL_0_E9E4,A0
  MOVE.l (A0),D0
   BEQ.w JL_0_877Eb
  MOVEA.l D0,A0
  MOVE.l A0,AL_0_E9E4
  BTST #$1,$7(A0)
   BNE.w JL_0_879Ab
  MOVEA.l $A(A0),A1
  MOVE.l $4(A1),D2
dimlet  BTST #$0,$7(A0)
   BNE.w JL_0_E078
  CMP.l #$100,D2
   BCC.l JL_0_879Ab
 BRA.w JL_0_E088
dimmore
        CLR.b optiarray
        CMP.w #"@@",(a5)
        BEQ 'n1
        BRA 'd1
'n1     JSR nextline
        MOVE.l a5,-(a7)
'l2     MOVE.b (a5)+,d0
        CMP.b #$20,d0
        BEQ 'l2
        MOVE.l (a7)+,a5
        CMP.b #";",d0
        BEQ 'n1
'd1
        TST.w debugmode
        BEQ JL_0_DEE0
        MOVE.l a0,-(a7)
        MOVE.l AL_0_B5B8,a0
        CMP.l #0,a0
        BNE 'o1
        BRA 'skip
'o1
        ADD.l #1,2(a0)
'skip   CLR.w AL_0_E9E2
        MOVE.b #1,stackcorrect
        MOVE.l (a7)+,a0
        JMP JL_0_DEE0
JL_0_879Ab JMP JL_0_879A
JL_0_E078:  CMP.l #$100,D2
   BCS.w JL_0_E084
  MOVEQ.l #$00,D2
JL_0_E084:  BSET #$E,D2
JL_0_E088:  BSET #$F,D2
 BRA.w JL_0_DEE0
farr
   MOVE.l destpointer,a4
   MOVE.l #$f22a6400,-4(a4)
   MOVE.w arrayoffset,d1
   JMP writeword
JL_0_877Eb JMP JL_0_877E

JL_0_E090:
   TST.b fpu
   BEQ 'nofloat
   CMP.b #5,d2
   BNE 'nofloat
   CLR.w fp0var
   LEA regtable,a4
   TST.l (a4)
   BEQ 'noreg
   BTST #15,d2                  ;regvars
   BNE 'noreg
   CMP.w 0+4(a4),d3
   BNE 'doreg1
   MOVE.l #$f2000380,d1
   MOVE.w regnum,d0
   BNE 'noopt
                                ;fmove.x fp0,fp7 should add

                                ;optimize if code before is
                                ;fmove.x fp7,fp1
                                ;fadd.x fp1,fp0
   MOVE.l destpointer,a4
   CMP.l #$f2001c80,-8(a4)
   BNE 'noopt
   CMP.l #$f2000422,-4(a4)
   BNE 'noopt
   MOVE.l #$f20003a2,d1
   SUB.l #8,destpointer
'noopt   ASL.w #7,d0
   OR.w d0,d1
   JSR writelong
   RTS
'doreg1   CMP.w 8+4(a4),d3
   BNE 'doreg2
   MOVE.l #$f2000300,d1
   MOVE.w regnum,d0
   ASL.w #7,d0
   OR.w d0,d1
   JSR writelong
   RTS
'doreg2   CMP.w 16+4(a4),d3
   BNE 'doreg3
   MOVE.l #$f2000280,d1
   MOVE.w regnum,d0
   ASL.w #7,d0
   OR.w d0,d1
   JSR  writelong
   RTS
'doreg3   CMP.w 24+4(a4),d3
   BNE 'doreg4
   MOVE.l #$f2000200,d1
   MOVE.w regnum,d0
   ASL.w #7,d0
   OR.w d0,d1
   JSR writelong
   RTS
'doreg4   CMP.w 32+4(a4),d3
   BNE 'noreg
   MOVE.l #$f2000180,d1
   MOVE.w regnum,d0
   ASL.w #7,d0
   OR.w d0,d1
   JSR writelong
   RTS
'noreg
   TST.w regnum
   BNE 'nofp0
   MOVE.l destpointer ,a4
   CMP.l #$f2304400,-6(a4)
   BNE 'do
   CMP.w #$1990,-2(a4)
   BNE 'do
   BTST #15,d2                    ;types ?
   BNE 'do
  MOVE.l #$2b701990,d1          ;var
 TST.w varmode
 BEQ 'glob1
 BCLR #25,d1
'glob1
  MOVE.l d1,-6(a4)
  MOVE.w d3,-2(a4)
  CLR.w fp0var
  MOVE.w #$ffff,fp0mode
  RTS
'do:
   CMP.l #$f22d4400,-6(a4)  ;fmove.s (a5),fp0
   BNE 'do3
   CMP.l #newtype_double,currtype
   BEQ 'do4
'nd1   MOVE.w #$2b6d,d1
   TST.w varmode
   BEQ 'g2
    BCLR #9,d1
'g2
    CMP.w #$2b6d,d1
    BNE 'd1
    CMP.w -2(a4),d3
    BNE 'd1
    SUBQ.l #6,destpointer
    BRA 'd12
'd1
    MOVE.w d1,-6(a4)           ;fmove.s to move.l mem,mem
    MOVE.w -2(a4),-4(a4)
    MOVE.w d3,-2(a4)
'd12  CLR.w fp0var
    MOVE.w #$ffff,fp0mode
    RTS

'do3 CMP.l #$f22c4400,-6(a4) ;fmove.s (a4)
   BNE 'do4
   MOVE.w #$2b6c,d1
      TST.w varmode
   BEQ 'g3
   BCLR #9,d1
'g3  MOVE.w d1,-6(a4)
    MOVE.w -2(a4),-4(a4)
    MOVE.w d3,-2(a4)
    CLR.w fp0var
    MOVE.w #$ffff,fp0mode
    RTS
'do4   MOVE.w d3,fp0var
   MOVE.w varmode,fp0mode
   ADDQ.l #6,a4
   MOVE.l a4,fp0addr
   MOVE.l firstiff,fp0iff
'nofp0   MOVEM.l d0/d4,-(a7)
   MOVEQ #0,d0
    MOVE.w regnum,d0
   ASL.w #7,d0                          ;fpu store var
  BTST #15,d2
   BEQ 'var
   MOVE.w d1,d4
   CMP.w #$24c0,d4
   BNE 'nopl
   MOVE.l #$f21a6400,d1
   MOVEQ #0,d3
   BRA 'glob
'nopl   ;MOVE.l #$f22a6400,d1        ;for newtype
        MOVE.l #$f2126400,d1
   TST.w d3                    ;offset =0
   BNE 'offset
   MOVE.l #$f2126400,d1
;   CMP.w #$24c0,d4
;   BNE 'glob
;   MOVE.l #$f21a6400,d1 ;fmove.s fp0,(a2)+
;   BRA 'glob
'offset   ;SUBQ.l #4,destpointer
   MOVEQ #0,d3
   BRA 'glob

'var

MOVE.l #$f22d6400,d1          ;var
 TST.w varmode
 BEQ 'glob
 BCLR #16,d1
 'glob OR.l d0,d1
 'weit
 CMP.l #newtype_double,currtype
 BNE 'dbl1
 OR.l #$00001000,d1
'dbl1 JSR writelong
 CLR.l currtype
 MOVEM.l (a7)+,d0/d4
 MOVE.l d3,d1
 BEQ 'nooffs
 JMP writeword
'nooffs
 RTS
; CMP.l #$f2126400,-4(a4)
; BEQ 'exit
; CMP.l #$f21a6400,-4(a4)
; BEQ 'exit
; BRA writeword
;'exit RTS

 JMP writeword
'nofloat
    TST.b fast ;write lea->xx(a2)
   BEQ 'la10
   CNIF #optibreak
   ILLEGAL
   CEND
   TST.b quickadd
   ;BNE 'lq1                 ;to avoid bug
                            CLR.b quickadd
   CMP.w #$2480,d1
   BNE 'la10
   TST.b optiarray
   BNE 'la10
   MOVE.l destpointer,a4
   CMP.w #$45ea,-4(a4)
   BNE 'la10
   CMP.w #8,AL_0_B5B6
   BEQ 'la100
   CMP.w #6,AL_0_B5B6
   BNE 'la10
   CMP.b #3,d2
   BCS 'la110
                ;store value
   MOVE.w #$2540,-2(a4)
   MOVE.w arrayoffset,d1
   JMP writeword
'lq1
   CLR.b quickadd
   RTS
'la110
   CMP.b #2,d2
   BNE 'la120
    MOVE.w #$3540,-2(a4)
   MOVE.w arrayoffset,d1
   JMP writeword
'la120 CMP.b #1,d2
   BNE.s 'la10
    MOVE.w #$1540,-2(a4)
   MOVE.w arrayoffset,d1
   JMP writeword
'la100
   CMP.b #3,d2
   BCS 'la11
   MOVE.w #$2540,-4(a4)
   RTS
'la11
   CMP.b #2,d2
   BNE 'la12
    MOVE.w #$3540,-4(a4)
   RTS
'la12 CMP.b #1,d2
   BNE.s 'la10
    MOVE.w #$1540,-4(a4)
   RTS
'la10 CLR.b optiarray
   CMP.b #$1,D2
   BEQ.w JL_0_E0AC
   BSR.w JL_0_E0C8
   CMP.b #$3,D2
   BCC.w writevarlong
   TST.b fast ;optiimmi
   BEQ 'l10b
   CNIF #optibreak
   ILLEGAL
   CEND

   MOVE.l destpointer,a0
   SUB.l imm_addr,a0
   CMP.l #4,a0
   BNE 'l10
   CLR.l imm_addr
   MOVE.l destpointer,a4
   OR.w #$107c,d1
   MOVE.w d1,-4(a4)
    MOVE.w D3,D1
    JMP writeword
'l10
  MOVE.l destpointer,a0
  SUB.l load_var_addr,a0
  CMP.l #4,a0
  BNE 'l10b
  CMP.w #$302d,-4(a4)              ;check 68k opcode
  BNE 'l10b

  CLR.l load_var_addr
  MOVE.l destpointer,a4
  OR.w #$102d,d1
  MOVE.w d1,-4(a4)
  MOVE.w d3,d1
  JMP writeword
'l10b
 ORI.w #$1000,D1             ;word
 BRA.w writestorevar

JL_0_E0AC:
   TST.b fast ;optiimmi
   BEQ 'l10b
   CNIF #optibreak
   ILLEGAL
   CEND

   MOVE.l destpointer,a0
   SUB.l imm_addr,a0
   CMP.l #4,a0
   BNE 'l10
   CLR.l imm_addr
   MOVE.l destpointer,a4
   OR.w #$7c,d1
   EORI #$3000,d1
   MOVE.w d1,-4(a4)
      MOVE.w D3,D1
    JMP writeword
'l10
  MOVE.l destpointer,a0
  SUB.l load_var_addr,a0
  CMP.l #4,a0
  BNE 'l10b
  CLR.l load_var_addr
  MOVE.l destpointer,a4
   CMP.w #$1b6d,-4(a4)
   BNE 'l10b
   OR.w #$2d,d1
   EORI #$3000,d1
   MOVE.w d1,-4(a4)
  MOVE.w d3,d1
  JMP writeword
'l10b  ADDQ.w #1,AL_0_E0E8  ;byte
  EORI.w #$3000,D1
writestorevar:   JSR writeword
  BTST #$7,D1
   BNE JL_0_E0C6
  MOVE.w D3,D1
 JMP writeword

.writevarlong:
   TST.b fast ;optiimmi
   BEQ 'l10b
   CNIF #optibreak
   ILLEGAL
   CEND
   MOVE.l destpointer,a0
   SUB.l imm_addr,a0
   CMP.l #6,a0
   BNE 'l10
   CLR.l imm_addr
   MOVE.l destpointer,a4
   OR.w #$7c,d1
   MOVE.w d1,-6(a4)
    MOVE.w D3,D1
 JMP writeword
'l10
  MOVE.l destpointer,a0
  SUB.l load_var_addr,a0
  CMP.l #4,a0
  BNE 'l10b
  CLR.l load_var_addr
  MOVE.l destpointer,a4
  CMP.w #$245f,-2(a4)
  BEQ 'l10b
  OR.w #$28,d1
  OR.w d1,-4(a4)
  CMP.w #$2b6d,-4(a4)
  BNE 'd1
  CMP.w -2(a4),d3
  BNE 'd1
  SUBQ.l #4,destpointer
  RTS
'd1  MOVE.w d3,d1
  JMP writeword
'l10b  JSR writeword
  BTST #$7,D1
   BNE.b JL_0_E0C6
  MOVE.w D3,D1
 JMP writeword
JL_0_E0C6: RTS

JL_0_E0C8:  MOVE.w D1,-(A7)
  MOVE.w AL_0_E0E8(PC),D1
  LSR.w #1,D1
   BCC.b JL_0_E0E2
  CLR.w AL_0_E0E8
  MOVE.w AL_0_E0E6,D1
   JSR writeword
JL_0_E0E2:  MOVE.w (A7)+,D1
 RTS

AL_0_E0E6:  Dc.b "RJ"
AL_0_E0E8:  Ds.w 1
AL_0_E0EA:  Ds.w 1
AL_0_E0EC:  Ds.w 1
.do_dim:
  ADDQ.w #1,regnum
  MOVE.b #1,nowdeclare
  CLR.b dimkeep
   CMP.l #"KEEP",-1(a5)
  BNE 'nokeep
  CMP.b #" ",3(a5)
  BNE 'nokeep
  ADDQ.l #3,a5
 '2
    CMP.b #" ",(a5)
    BNE '1
   ADDQ #1,a5
  BRA '2
 '1
  MOVE.l a5,lastsourcepos
  MOVE.b #1,dimkeep
 'nokeep
;  TST.b infunctioncode
;  BEQ 'l10
;  MOVE.b #1,addmemcode
;'l10
  MOVE.w #$FF9A,D1
  JSR uselib
  JL_0_E0FC:
  CLR.w AL_0_E0EA
  CMP.w #-$7F4D,D0
   BNE.w JL_0_E11E
  MOVE.w #$0008,AL_0_E0EA
  MOVE.w #$FFFA,D1
   JSR uselib
   JSR get1bytemain
JL_0_E11E:  CLR.w AL_0_EC5E
   JSR getparameter
  BTST #$1,AL_0_EC5B
   BEQ.w syntaxerrb
   JSR JL_0_8E3C
  MOVE.w notshared,D1
   BNE.w JL_0_E198
  MOVE.w $8(A3),AL_0_EC60
  MOVE.w proceduremode,D2
   BNE.w JL_0_E176
  MOVE.w globalvarpointer,-(A7)
  MOVE.w $4(A3),globalvarpointer
  ADDQ.w #4,globalvarpointer
   BSR.w write_dim_code
  MOVE.w (A7)+,globalvarpointer
 BRA.w JL_0_E1BA

;JL_0_E176:  MOVE.w globalvarpointer,-(A7)
;  MOVE.w $4(A3),AL_0_2B3A
;  subq.w #4,AL_0_2B3A
;   BSR.w write_dim_code
;  MOVE.w (A7)+,AL_0_2B3A
; BRA.w JL_0_E1BA
JL_0_E176:  MOVE.w globalvarpointer,-(A7)
            MOVE.w proceduremode,-(a7)
            CLR.w proceduremode
  MOVE.w $4(A3),globalvarpointer
  ADDQ.w #4,globalvarpointer
   BSR.w write_dim_code
   MOVE.w (a7)+,proceduremode
  MOVE.w (A7)+,globalvarpointer
 BRA.w JL_0_E1BA

JL_0_E198:  MOVE.w #$FFFF,AL_0_EC60
  MOVE.w AL_0_E0EA(PC),D1
   BEQ.w JL_0_E1B6
  MOVE.w #$4000,AL_0_EC60
  BSET #$0,$6(A3)
JL_0_E1B6:
        TST.w proceduremode
       BNE 'l1
       MOVE.w AL_0_2B3A,-(a7)
'l1       BSR.w write_dim_code
        TST.w proceduremode
        BNE JL_0_E1BA
       MOVE.w (A7)+,AL_0_2B3A
JL_0_E1BA:   JSR get1bytemain
  CMP.w #$2C,D0
   BNE.w JL_0_E1CE
   JSR get1bytemain
 BRA.w JL_0_E0FC

JL_0_E1CE: RTS

write_dim_code:  MOVE.w #$FFFF,AL_0_EC5E
  MOVE.w AL_0_28DA,D1
   JSR writeword
  MOVEQ.l #$00,D1
   JSR writeword
  MOVEQ.l #$04,D1
  BTST #$0,AL_0_EC5B
   BNE.w JL_0_E1FA
  MOVE.w $8(A2),D1
JL_0_E1FA:  ADD.w AL_0_E0EA(PC),D1
  MOVE.w D1,AL_0_E0EC
   JSR writeword
  CLR.w AL_0_EC64
  MOVE.l A3,-(A7)
JL_0_E210:  ADDQ.w #1,AL_0_EC64
  MOVEQ.l #$03,D2
  MOVE.w notshared,-(a7)
   JSR eval
  MOVE.w (a7)+,notshared
  TST.b debugmode
   BEQ.w JL_0_E22E
  MOVE.w #$C30F,D1
   ;BSR.w Atokejsr
JL_0_E22E:  ;MOVE.w #$C402,D1
   ;BSR.w Atokejsr
      MOVE.w #$5281,d1
      JSR writeword
      MOVE.l #$4c010800,d1        ;dim >65536 fix
      JSR writelong
  MOVE.w proceduremode,D2
   BEQ.w JL_0_E254
  SUBQ.w #4,AL_0_2B3A
  MOVE.w AL_0_2B3A,AL_0_28E4
 BRA.w JL_0_E264
syntaxerrb JMP syntaxerr
JL_0_E254:  MOVE.w globalvarpointer,AL_0_28E4
  ADDQ.w #4,globalvarpointer
JL_0_E264: TST.b dimkeep
           BEQ 'l1
      MOVEQ #0,d1
      MOVE.w AL_0_28E2+2,d1
      OR.l  #$222d0000,d1
      MOVE.w proceduremode,D2
      BEQ 'l2
      TST.w notshared
      BEQ 'l2
      SUB.l #$00010000,d1
'l2   JSR writelong
'l1   MOVE.l AL_0_28E2,D1
      TST.w notshared
      BNE 'l1a
      JSR writelong
      BRA 'l4
'l1a      JSR JL_0_94E4
'l4  CMP.w #$2C,D0
   BEQ.w JL_0_E210
  CMP.w #$29,D0
   BNE.w syntaxerrb
  MOVEA.l (A7)+,A3
  MOVE.w AL_0_EC60,D1
   BMI.w JL_0_E2CC
  BTST #$E,D1
   BEQ.w JL_0_E2A2
  CMPI.w #$1,AL_0_EC64
   BNE.w lab8270
 BRA.w JL_0_E2CC
lab8270 JMP JL_0_8270
JL_0_E2A2:  CMP.w AL_0_EC64,D1
   BNE.w lab8270              ;range too long

'ok
  LEA globalvarpointer,A0
  MOVE.w proceduremode,D1
  BEQ.w JL_0_E2C2
  LEA AL_0_2B3A,A0

  JL_0_E2C2:
  Dc.b "0"
  Dc.b $B9 ;.

  JL_0_E2C4:
  Dc.l AL_0_E922
  Dc.b "`",0,0
  Dc.b $A

  JL_0_E2CC:
  MOVE.w AL_0_EC64,$8(A3)
  LEA AL_0_28E6,A0
  MOVE.w $4(A3),$2(A0)
  MOVE.w AL_0_28E4,$6(A0)
  MOVE.l (A0)+,D1
   JSR writelong
  MOVE.l (A0),D1
   JSR writelong
   TST.b dimkeep
  BNE 'l3

 'l1
  MOVE.w #$C400,D1
  BRA 'l2
 'l3
  MOVE.w #$C405,d1
 'l2
  MOVE.w proceduremode,D2
   BEQ.w JL_0_E304
   TST.w notshared
   BEQ JL_0_E304
  ADDQ.w #1,D1

  JL_0_E304:
  MOVE.w AL_0_E0EA(PC),D2
   BEQ.w JL_0_E322
  MOVE.w D1,-(A7)
  MOVE.w L_0_E326(PC),D1
   JSR writeword
  MOVE.w AL_0_E0EC(PC),D1
   JSR writeword
  MOVE.w (A7)+,D1
  ADDQ.w #3,D1

  JL_0_E322:
BRA.w Atokejsr

fpupi:
CNIF #64bitconstant
  MOVE.l #$f23c5400,d1
CELSE
  MOVE.l #$f23c4400,d1
CEND
  MOVE.w regnum,d0
  ASL.w #7,d0
  OR.w d0,d1
  JSR writelong
CNIF #64bitconstant
  MOVE.l #$400921fb,d1
  JSR writelong
  MOVE.l #$54442D18,d1
CELSE
  MOVE.l #$40490fd9,d1
CEND
  JSR writelong
JMP get1bytemain


L_0_E326:    Dc.b "8<",0,0
AL_0_E32A:   Ds.l 1
AL_0_E32E:
  Ds.w 1
  Dc.b $FD,$A7,$FC,$DF ;....
  Dc.b $FD,$43 ;.C

AL_0_E336:   Ds.l 1
AL_0_E33A:   Ds.l 1
AL_0_E33E:   Dc.l $400
stacksize:   Ds.l 1
currentlabeladdr: Dc.l labelbase
currentmacroaddr: Dc.l macrobase
AL_0_E34E:   Dc.l newtype_string
AL_0_E352:   Ds.w 1
state_of_residents:   Ds.w 1
AL_0_E356:   Dc.l residents_table
AL_0_E35A:   Ds.w 1
directbuffer:   Ds.w 11

comdata:     Ds.l 1
convtable:   Ds.l 1

.handle_datatypes
AL_0_E37A: Dc.l AJL_0_95C8     ;bytetoword
AL_0_E37E: Dc.l AJL_0_95CA     ;bytetolong
AL_0_E382: Dc.l AJL_0_95DC     ;bytetoquick
AL_0_E386: Dc.l AJL_0_95FC     ;bytetofloat
AL_0_E38A: Dc.l AJL_0_95CA     ;bytetolong
AL_0_E38E: Dc.l error_convert_types     ;noconerr
AL_0_E392: Dc.l AJL_0_9636     ;wordtobyte
   Ds.l 1
AL_0_E39A: Dc.l AJL_0_95CE     ;wordtolong
AL_0_E39E: Dc.l AJL_0_95E0     ;wordtoquick
AL_0_E3A2: Dc.l AL_0_969E      ;wordtofloat
AL_0_E3A6: Dc.l AJL_0_95CE     ;wordtolong
AL_0_E3AA: Dc.l error_convert_types     ;noconerr
AL_0_E3AE: Dc.l AJL_0_96A6     ;longtobyte
AL_0_E3B2: Dc.l AJL_0_96AE     ;longtoword
   Ds.l 1
   Dc.l AJL_0_96B6             ;longtoquick
   Dc.l AJL_0_96C2             ;longtofloat
   Ds.l 1
AL_0_E3C6: Dc.l error_convert_types     ;noconerr
AL_0_E3CA: Dc.l AJL_0_96C8     ;quicktobyte
AL_0_E3CE: Dc.l AJL_0_96EC     ;quicktoword
AL_0_E3D2: Dc.l AJL_0_96F0     ;quicktolong
   Ds.l 1
AL_0_E3DA: Dc.l AJL_0_96F8     ;quicktofloat
AL_0_E3DE: Dc.l AJL_0_96F0     ;quicktolong
AL_0_E3E2: Dc.l error_convert_types     ;noconerr
AL_0_E3E6: Dc.l AJL_0_971E     ;floattobyte
AL_0_E3EA: Dc.l AJL_0_9730     ;floattoword
AL_0_E3EE: Dc.l AJL_0_9742     ;floattolong
AL_0_E3F2: Dc.l AJL_0_9754     ;floattoquick
   Ds.l 1
AL_0_E3FA: Dc.l AJL_0_9742     ;floattolong
AL_0_E3FE: Dc.l error_convert_types     ;noconerr
AL_0_E402: Dc.l AJL_0_96A6     ;longtobyte
AL_0_E406: Dc.l AJL_0_96AE     ;longtoword
   Ds.l 1
   Dc.l AJL_0_96B6             ;longtoquick
   Dc.l AJL_0_96C2             ;longtofloat
   Ds.l 1
AL_0_E41A: Dc.l error_convert_types     ;noconerr
AL_0_E41E: Dc.l error_convert_types     ;noconerr
AL_0_E422: Dc.l error_convert_types     ;noconerr
AL_0_E426: Dc.l AJL_0_9764     ;stringtolong
AL_0_E42A: Dc.l error_convert_types     ;noconerr
AL_0_E42E: Dc.l error_convert_types     ;noconerr
AL_0_E432: Dc.l AJL_0_9764     ;stringtolong
   Ds.l 1
AL_0_E43A:   Dc.b $00,$2B ;.+   ;add
AL_0_E43C: Dc.l AJL_0_A090
AL_0_E440: Dc.l AJL_0_A09A
AL_0_E444: Dc.l AJL_0_A0A8
AL_0_E448: Dc.l AJL_0_A0A8
AL_0_E44C: Dc.l AJL_0_A0C0
   Ds.l 1
   Dc.l AJL_0_A0F4
   Dc.b $0B,$B8 ;..
   Dc.b $00,$2D ;.-         ;sub
AL_0_E45C: Dc.l AJL_0_A116
AL_0_E460: Dc.l AJL_0_A11E
AL_0_E464: Dc.l AJL_0_A126
AL_0_E468: Dc.l AJL_0_A126
AL_0_E46C: Dc.l AJL_0_A12E
   Ds.l 2
   Dc.b $0B,$B8 ;..
   Dc.b $00,$2A ;.*          ;mul
AL_0_E47C: Dc.l AJL_0_A136
AL_0_E480: Dc.l AJL_0_A140
AL_0_E484: Dc.l AJL_0_A152
AL_0_E488: Dc.l AJL_0_A14A
AL_0_E48C: Dc.l AJL_0_A176
   Ds.l 2
   Dc.b $0F,$A0 ;..
   Dc.b $00,$2F ;./          ;div
AL_0_E49C: Dc.l AJL_0_A1E6
AL_0_E4A0: Dc.l AL_0_A1FA
AL_0_E4A4: Dc.l AJL_0_A210
AL_0_E4A8: Dc.l AJL_0_A218
AL_0_E4AC: Dc.l AJL_0_A220
   Ds.l 2
   Dc.b $0F,$A0 ;..
   Dc.b $00,$26 ;.&
AL_0_E4BC: Dc.l AJL_0_A228    ;and &  int
AL_0_E4C0: Dc.l AJL_0_A230
AL_0_E4C4: Dc.l AJL_0_A238
AL_0_E4C8: Dc.l AJL_0_A238
   Ds.l 3
   Dc.b $13,$88 ;..
   Dc.b $00,$7C ;.|           ;or |  int
AL_0_E4DC: Dc.l AJL_0_A240
AL_0_E4E0: Dc.l AJL_0_A248
AL_0_E4E4: Dc.l AJL_0_A250
AL_0_E4E8: Dc.l AJL_0_A250
   Ds.l 3
   Dc.b $13,$88 ;..
   Dc.b $80,$42 ;.B           ;or int
AL_0_E4FC: Dc.l AJL_0_A228
AL_0_E500: Dc.l AJL_0_A230
AL_0_E504: Dc.l AJL_0_A238
AL_0_E508: Dc.l AJL_0_A238
   Ds.l 3
   Dc.b $03,$E8,$80,$8A ;.... ;and int
AL_0_E51C: Dc.l AJL_0_A240
AL_0_E520: Dc.l AJL_0_A248
AL_0_E524: Dc.l AJL_0_A250
AL_0_E528: Dc.l AJL_0_A250
   Ds.l 3
   Dc.b $03,$E8 ;..
   Dc.b $80,$73 ;.s          ;eor int
AL_0_E53C: Dc.l AJL_0_A258
AL_0_E540: Dc.l AJL_0_A270
AL_0_E544: Dc.l AJL_0_A278
AL_0_E548: Dc.l AJL_0_A278
   Ds.l 3
   Dc.b $03,$E8 ;..
   Dc.b $80,$7C ;.|          ;LSL   int
AL_0_E55C: Dc.l AJL_0_A280
AL_0_E560: Dc.l AJL_0_A280
AL_0_E564: Dc.l AJL_0_A280
AL_0_E568: Dc.l AJL_0_A280
   Ds.l 3
   Dc.b $17,$70 ;.p
   Dc.b $80,$44 ;.D          ;ASL  int
AL_0_E57C: Dc.l AJL_0_A280
AL_0_E580: Dc.l AJL_0_A280
AL_0_E584: Dc.l AJL_0_A280
AL_0_E588: Dc.l AJL_0_A280
   Ds.l 3
   Dc.b $17,$70 ;.p
   Dc.b $80,$7D ;.}          ;LSR  int
AL_0_E59C: Dc.l AJL_0_A288 ;b
AL_0_E5A0: Dc.l AJL_0_A288 ;w
AL_0_E5A4: Dc.l AJL_0_A288 ;l
AL_0_E5A8: Dc.l AJL_0_A288 ;l
   Ds.l 3
   Dc.b $17,$70 ;.p
   Dc.b $80,$45 ;.E           ;ASR int
AL_0_E5BC: Dc.l AJL_0_A290
AL_0_E5C0: Dc.l AJL_0_A290
AL_0_E5C4: Dc.l AJL_0_A290
AL_0_E5C8: Dc.l AJL_0_A290
   Ds.l 3
  Dc.b $17,$70,$80,$B9 ;.p..  ;mod
AL_0_E5DC: Dc.l AJL_0_A1B2
AL_0_E5E0: Dc.l AJL_0_A1BA
AL_0_E5E4: Dc.l AJL_0_A1C2
AL_0_E5E8: Dc.l AJL_0_A1CE
AL_0_E5EC: Dc.l AJL_0_A1D8
   Ds.l 2
   Dc.b $13,$88 ;..
oppow   Dc.b $00,$5E ;.^
AL_0_E5FC: Dc.l AJL_0_A17E
AL_0_E600: Dc.l AJL_0_A17E
AL_0_E604: Dc.l AJL_0_A17E
AL_0_E608: Dc.l AJL_0_A17E
AL_0_E60C: Dc.l AJL_0_A17E
   Ds.l 2
   Dc.b 27,"X",0
opeq   Dc.b $3D
AL_0_E61C: Dc.l AL_0_9EA6
AL_0_E620: Dc.l AJL_0_9ED6
AL_0_E624: Dc.l AJL_0_9F06
AL_0_E628: Dc.l AJL_0_9F06
AL_0_E62C: Dc.l AJL_0_9F84
AL_0_E630: Dc.l AJL_0_9F06
AL_0_E634: Dc.l AJL_0_9FD8
   Dc.b 7
   Dc.b $D0 ;.
AL_0_E63A:
opne   Dc.b "<>"
AL_0_E63C: Dc.l AJL_0_9EAE
AL_0_E640: Dc.l AJL_0_9EDE
AL_0_E644: Dc.l AJL_0_9F0E
AL_0_E648: Dc.l AJL_0_9F0E
AL_0_E64C: Dc.l AJL_0_9F92
AL_0_E650: Dc.l AJL_0_9F0E
AL_0_E654: Dc.l AJL_0_9FE4
   Dc.b 7
   Dc.b $D0 ;.
oplt   Dc.b $00,$3C ;.<
AL_0_E65C: Dc.l AJL_0_9EB6
AL_0_E660: Dc.l AJL_0_9EE6
AL_0_E664: Dc.l AJL_0_9F16
AL_0_E668: Dc.l AJL_0_9F16
AL_0_E66C: Dc.l AJL_0_9FA0
AL_0_E670: Dc.l AJL_0_9F16
AL_0_E674: Dc.l AJL_0_9FF0
   Dc.b 7
   Dc.b $D0 ;.
AL_0_E67A:
ople Dc.b "<="
AL_0_E67C: Dc.l AJL_0_9EBE
AL_0_E680: Dc.l AJL_0_9EEE
AL_0_E684: Dc.l AJL_0_9F1E
AL_0_E688: Dc.l AJL_0_9F1E
AL_0_E68C: Dc.l AJL_0_9FAE
AL_0_E690: Dc.l AJL_0_9F1E
AL_0_E694: Dc.l AJL_0_9FFC
   Dc.b 7
   Dc.b $D0 ;.
opgt   Dc.b $00,$3E ;.>
AL_0_E69C: Dc.l AJL_0_9EC6 ;b
AL_0_E6A0: Dc.l AJL_0_9EF6 ;w
AL_0_E6A4: Dc.l AJL_0_9F26 ;l
AL_0_E6A8: Dc.l AJL_0_9F26 ;l
AL_0_E6AC: Dc.l AJL_0_9FBC ;f
AL_0_E6B0: Dc.l AJL_0_9F26 ;l
AL_0_E6B4: Dc.l AJL_0_A008 ;s
   Dc.b 7
   Dc.b $D0 ;.
opge:
   Dc.b ">="
AL_0_E6BC: Dc.l AJL_0_9ECE ;dogeb
AL_0_E6C0: Dc.l AJL_0_9EFE ;dogew
AL_0_E6C4: Dc.l AJL_0_9F2E ;dogel
AL_0_E6C8: Dc.l AJL_0_9F2E ;dogel
AL_0_E6CC: Dc.l AJL_0_9FCA ;dogef
AL_0_E6D0: Dc.l AJL_0_9F2E ;dogel
AL_0_E6D4: Dc.l AJL_0_A014 ;doges
   Dc.b 7
   Dc.b $D0,$80,$CD ;...
AL_0_E6DC: Dc.l _BitTst
AL_0_E6E0: Dc.l _BitTst
AL_0_E6E4: Dc.l _BitTst
AL_0_E6E8: Dc.l _BitTst
   Ds.l 3
   Dc.b $1F,$40,$80,$CE ;.@..
AL_0_E6FC: Dc.l _BitSet
AL_0_E700: Dc.l _BitSet
AL_0_E704: Dc.l _BitSet
AL_0_E708: Dc.l _BitSet
   Ds.l 3
   Dc.b $1F,$40,$80,$CF ;.@..
AL_0_E71C: Dc.l _BitClr
AL_0_E720: Dc.l _BitClr
AL_0_E724: Dc.l _BitClr
AL_0_E728: Dc.l _BitClr
   Ds.l 3
   Dc.b $1F,$40,$80,$D0 ;.@..
AL_0_E73C: Dc.l _BitChg
AL_0_E740: Dc.l _BitChg
AL_0_E744: Dc.l _BitChg
AL_0_E748: Dc.l _BitChg
   Ds.l 3
   Dc.b $1F,$40,$00,$00 ;.@..

AL_0_E75C: Dc.l AJL_0_D650
newtypebase: Dc.l newtype_byte


newtype_byte:
  Dc.l newtype_word         ;bytetype
  Ds.w 1
  Dc.b $00,$01,$00,$01 ;....
  Dc.b 13,"b",0,0

newtype_word:
  Dc.l newtype_long         ;wordtype
  Ds.w 1
  Dc.b $00,$02,$00,$02 ;....
  Dc.b 13,"w",0,0

newtype_long:
  Dc.l newtype_quick         ;longtype
  Ds.w 1
  Dc.b $00,$03,$00,$04 ;....
  Dc.b 13,"l",0,0

newtype_quick:
  Dc.l newtype_float         ;quicktype
  Ds.w 1
  Dc.b $00,$04,$00,$04 ;....
  Dc.b 13,"q",0,0

newtype_float:
  ;Dc.l AL_0_E7AA        ;floattype
  Dc.l newtype_double                ;make problems on old residents
  Ds.w 1
  Dc.b $00,$05,$00,$04 ;....
  Dc.b 13,"f",0,0

AL_0_E7AA:              ;addresstype ????
  Dc.l newtype_double
  Ds.w 1
  Dc.b $00,$06,$00,$04 ;....
  Dc.b 13,"a",0,0

newtype_double:
  Dc.l newtype_string
  Ds.w 1
  Dc.b $00,$05,$00,$08 ;....
  Dc.b 13,"d",0,0

newtype_string:
  Ds.w 3             ;stringtype
  Dc.b $00,$07,$00,$04 ;....
  Dc.b 13,"s",0,0
  Ds.w 5
  Dc.b $01,$00,$00,$00 ;....

AL_0_E7D4:    Ds.l 24
dirmode:      Ds.w 1              ;shows if directmode is on
;_intuibase:
Ds.l 1
maxobject_pos:Ds.w 1
AL_0_E83C:    Ds.l 1
number_of_objects:   Ds.w 1
AL_0_E842:   Ds.w 3
AL_0_E848: Dc.l newtype_quick
AL_0_E84C:   Dc.b $FF,$FF ;..
debugversion:   Ds.w 1
AL_0_E850:   Ds.w 1
AL_0_E852:   Ds.w 1
AL_0_E854:   Ds.l 1
dontwrite:   Ds.w 1
lastgloballabel:   Ds.l 32
AL_0_E8DA:   Ds.l 1
AL_0_E8DE:   Ds.l 1
AL_0_E8E2:   Ds.l 1
AL_0_E8E6:   Ds.b 3
AL_0_E8E9:   Ds.b 1
data1start:   Ds.l 1
AL_0_E8EE:   Ds.b 3
AL_0_E8F1:   Ds.b 1
destbufferstart:   Ds.l 1
;destpointer:   ds.w 1
;AL_0_E8F8:   ds.b 1
;AL_0_E8F9:   ds.b 1
destbufferend:   Ds.l 1
libend:   Ds.l 1
AL_0_E902:   Ds.l 1
AL_0_E906:   Ds.l 4
AL_0_E916:   Ds.l 1
AL_0_E91A:   Ds.l 1
AL_0_E91E:   Ds.w 1
AL_0_E920:   Ds.w 1
AL_0_E922:   Ds.w 1
AL_0_E924:   Ds.w 1
AL_0_E926:   Ds.w 1
AL_0_E928:   Ds.l 1
AL_0_E92C:   Ds.w 1
AL_0_E92E:   Ds.w 1
templabel:   Ds.l 1
AL_0_E934:   Ds.w 3
AL_0_E93A:   Ds.l 1
progress_per_line:    Ds.w 1
AL_0_E940:   Ds.l 2
AL_0_E948:   Ds.w 1
AL_0_E94A:   Ds.l 1
AL_0_E94E:   Ds.w 1
AL_0_E950:   Ds.l 1
AL_0_E954:   Ds.l 2
AL_0_E95C:   Ds.l 16
AL_0_E99C: Dc.l AL_0_E95C
AL_0_E9A0:   Ds.l 2
AL_0_E9A8:   Ds.l 1
stackpar:   Ds.w 1    ;1 par to stack 0 normal
AL_0_E9AE:   Ds.w 1
convsize:   Ds.w 1
AL_0_E9B2:            Ds.w 1
ptr_userlibs_list:    Ds.l 1
a2offset:             Ds.w 1
AL_0_E9BA:            Ds.w 1
AL_0_E9BC:            Ds.l 1
AL_0_E9C0:            Ds.w 1
AL_0_E9C2:            Ds.l 32  ;was 8
AL_0_E9E2:            Ds.w 1
AL_0_E9E4:            Ds.l 1
AL_0_E9E8:            Dc.b $FF,$FF,$ff,$ff ;..             ;linecounter
compilelinecounter:   Dc.b $ff,$ff,$FF,$FF,$00,$00 ;....
                      Ds.l 63
                      Ds.l 63
                      Ds.l 2
AL_0_EBEE:            Ds.l 1
AL_0_EBF2:            Ds.w 3
Even4
tempvm:               Ds.l 1
AL_0_EBFC:            Ds.w 3
varmode:              Ds.w 1      ;0 a5 pointer to global
currentfunction:      Ds.l 1      ;thisproc
firstproc:            Ds.l 1      ;firstproc
proceduremode:        Ds.b 1      ;procmode -1=statement/ function return type
AL_0_EC0D:            Ds.b 1
skipcode:             Ds.w 1      ;nocompile
AL_0_EC10:            Ds.l 1      ;passstack
AL_0_EC14:            Ds.l 1      ;zero
ininclude:            Ds.w 1      ;numincs number of include files
xinclude_base:        Ds.l 1
constantbase:         Ds.l 1
AL_0_EC22:            Dc.b $FF,$FF;..  ;lasta6
instringon:           Ds.w 1
ptr_macrobuffer_begin:Ds.l 1      ;macrobuff  ;begin
ptr_macrobuffer_end:  Ds.l 1      ;macrobufff ;end of
macrobase:            Ds.l 1      ;firstmacro ;macrolist
AL_0_EC32:            Ds.l 1      ;endop      ;end of program pc - before finishups!
labelbase:            Ds.l 1      ;firstlabel
end_of_tokenlist:     Ds.l 1      ;lasttoken
AL_0_EC3E:   Ds.w 1
AL_0_EC40:   Ds.l 1
libpointer:  Ds.l 1
AL_0_EC48:   Ds.w 1
AL_0_EC4A:   Ds.l 1
AL_0_EC4E:   Ds.l 1
hunkoffsetcounter:   Ds.l 1
hunkoffsetbase:   Ds.l 1
AL_0_EC5A:   Ds.b 1
AL_0_EC5B:   Ds.b 1
notshared:   Ds.w 1
AL_0_EC5E:   Ds.w 1
AL_0_EC60:   Ds.w 1
AL_0_EC62:            Ds.w 1
AL_0_EC64:            Ds.l 1

ptr_parameterstore:   Ds.l 1
fib_DirEntryType:     Ds.l 1
fib_FileName:         Ds.l 29
fib_Size:             Ds.l 1

AL_0_ECE8:            Ds.l 34


; buffer fuer uselibs
AL_0_ED70:            Ds.l 1 ;  0-3 bytes
AL_0_ED74:            Ds.l 6 ;  4-27
AL_0_ED8C:            Ds.l 9 ; 28-63 bytes



.menu_viewnewtypes:
  MOVEA.l comdata,A1
  MOVEA.l $802(A1),A1   ; compiler says to PED: openwindow
  MOVE.l #1000,D0
  JSR (A1)
RTS


.ptr_xtradata:
Dc.b $00,$01                ; 1 byte schreiben
Dc.l AL_0_FD8E
Dc.l create_iconfile        ; create icon for executable
Ds.l 1

Dc.b $00,$02                ; 2 bytes schreiben
Dc.l set_use_debugger
Dc.l AL_0_11010             ;+obsolet: debugger
Dc.l AL_0_1103C             ;+obsolet: long arrays
Dc.l AL_0_11068             ;+obsolet: expand macros
Dc.l AL_0_11094             ;+obsolet: quoted macros
Dc.l set_make_smallestcode
Dc.l set_link_debuginfo
Dc.l set_autorun
Dc.l set_interruptcheck
Dc.l set_assemblercheck
Dc.l set_overflowcheck
Dc.l default_obsolete       ;+obsolet: ohne inhalt
Dc.l default_interruptcheck ;+obsolet: interruptcheck vorgabe
Dc.l default_overflowcheck  ;+obsolet: overflow vorgabe
Ds.l 1

Dc.b $00,$04                ; 4 bytes schreiben..
bufferlist:
Dc.l objectbuffer
Dc.l libsbuffer
Dc.l systembuffer
Dc.l databuffer
Dc.l macrobuffer_size
Dc.l stringbuffer
Ds.l 1

Dc.b $02,$20                      ; 544 bytes schreiben.
Dc.l residents_table
Ds.l 1

Dc.b $01,$80                      ; 384 bytes schreiben
Dc.l exepath                      ; exepath und exefilename jeweils 192 bytes
Ds.w 3


AL_0_F9B6:                        ; 982 bytes
Ds.l 63
Ds.l 63
Ds.l 63
Ds.w 113

comsettings_message:  Ds.w 1
AL_0_FD8E:            Ds.w 1

.read_xtrafile:          ;load xtrafile, filehandle via PED in D7
  CLR.b exefilename
  TST.l d0
  BNE 'l10
RTS

'l10
  JSR free_residents
  LEA ptr_xtradata,A2
  MOVEQ.l #$00,D4

  JL_0_FD9E:
    MOVE.w (A2)+,D4             ; anzahl bytes zum lesen
    BEQ.b JL_0_FDB6
    JL_0_FDA2:
    MOVE.l (A2)+,D2
  BEQ.b JL_0_FD9E

  MOVE.l D4,D3
  MOVE.l D7,D1
  JSR _Read(A6)                 ; d1: file, d2: buffer, d3:length
  TST.l D0
  BNE.b JL_0_FDA2
  BRA.w AJL_0_FE3A

  JL_0_FDB6:                    ; set defaults
  TST.b AL_0_FD8E
   BNE.b JL_0_FDE2
  MOVE.w #$0080,set_autorun
  MOVE.w default_interruptcheck,set_interruptcheck
  CLR.w set_assemblercheck
  MOVE.w default_overflowcheck,set_overflowcheck
  BRA.b JL_0_FDF4
  JL_0_FDE2:

  MOVE.l D7,D1
  MOVE.l #str_cliarguments,D2
  MOVE.l #120,D3                  ; vorher 128 , jetzt 8 weniger fuer die Versionsdaten
  JSR _Read(A6)                   ; d1: file, d2: buffer, d3:length

  MOVE.l D7,D1
  MOVE.l #versioninformation,D2
  MOVE.l #4,D3
  JSR _Read(A6)

  MOVE.l D7,D1
  MOVE.l #number_of_builds,D2
  MOVE.l #4,D3
  JSR _Read(A6)

  JL_0_FDF4:
  MOVE.l A7,AL_0_2B18
  MOVE.l #AJL_0_FE3A,AL_0_2B1C
  MOVE.w #$FFFF,AL_0_8AFE

  JL_0_FE0C:
    MOVE.l #AL_0_EC60,D2      ;load maxobjectsvalues
    MOVEQ.l #$04,D3
    MOVE.l D7,D1
    JSR _Read(A6)
    TST.l D0
    BEQ.b AJL_0_FE3A
    MOVE.w AL_0_EC60,D1
    TST.w d1                           ;new
    BEQ AJL_0_FE3A                     ;new
     JSR AJL_0_6F1A
     ;BEQ.b AJL_0_FE3A
    CMP.l #0,a1
    BEQ JL_0_FE0C
    MOVE.l $12(A1),D0
    MOVE.w AL_0_EC62,-$4(A1,D0.L)
  BRA.b JL_0_FE0C

  AJL_0_FE3A:
  LEA residents_table(PC),A0
  MOVEQ.l #$07,D0

  JL_0_FE40:
    CLR.l $40(A0)
    LEA $44(A0),A0
  DBF D0,JL_0_FE40

  MOVEM.l D7/A6,-(A7)
  JSR init_buffers
  JSR reloadresident
  MOVEM.l (A7)+,D7/A6
RTS


.write_xtrafile:
  MOVE.b #$1,AL_0_FD8E

;  LEA ptr_xtradata,A2
;  MOVE.l A2,D0
;  !basic
;  testD0.l= PutD0
;  !cout{"xtradata at: ",Hex$(testD0)}
;  !asm

  LEA ptr_xtradata,A2
  MOVEQ.l #$00,D4

  ; -- boolean options speichern
  JL_0_FE72:
  MOVE.w (A2)+,D4                    ; anzahl bytes zu schreiben
  BEQ.b JL_0_FE84
  JL_0_FE76:
    MOVE.l (A2)+,D2
    BEQ.b JL_0_FE72

    MOVE.l D4,D3
    MOVE.l D7,D1                     ; schreiben der daten in ptr_xtradata
    JSR _Write(A6)                   ; d1: file, d2: buffer, d3:length
  BRA.b JL_0_FE76
  JL_0_FE84:

  MOVE.l D7,D1
  MOVE.l #str_cliarguments,D2
  MOVE.l #120,D3
  JSR _Write(A6)                     ; hier werden 120 bytes an cli_arguments geschrieben !!

  MOVE.l D7,D1
  MOVE.l #versioninformation,D2
  MOVE.l #4,D3
  JSR _Write(A6)

  MOVE.l D7,D1
  MOVE.l #number_of_builds,D2
  MOVE.l #4,D3
  JSR _Write(A6)

  LEA libpointer,A2
  JL_0_FE9C:
    MOVE.l (A2),D0
    BEQ.w JL_0_FED0
    MOVEA.l D0,A2
    MOVE.l $12(A2),D4
    TST.w -$2(A2,D4.L)
    BEQ.w JL_0_FE9C

    LEA $4(A2),A0
    MOVE.l A0,D2
    MOVEQ.l #$02,D3
    MOVE.l D7,D1                     ; schreiben der Libnum mit 2 bytes
    JSR _Write(A6)                   ; d1: file, d2: buffer, d3:length

    LEA -$4(A2,D4.L),A0
    MOVE.l A0,D2
    MOVEQ.l #$02,D3
    MOVE.l D7,D1                     ; schreiben der Max Objects mit 2 bytes
    JSR _Write(A6)                   ; d1: file, d2: buffer, d3:length
  BRA.w JL_0_FE9C

  JL_0_FED0:
RTS



.menu_compileroptions:
  LEA AL_0_F9B6,A0
  LEA ptr_xtradata,A1

  JL_0_FEDE:
  MOVE.w (A1)+,D0
  BEQ.b JL_0_FEF6
  SUBQ.w #1,D0

  JL_0_FEE4:
    MOVE.l (A1)+,D1
    BEQ.b JL_0_FEDE
    MOVEA.l D1,A2
    MOVE.w D0,D1
    JL_0_FEEC:
      MOVE.b (A2)+,(A0)+
    DBF D1,JL_0_FEEC
  BRA.w JL_0_FEE4

  JL_0_FEF6:
  LEA bufferlist,A1

  JL_0_FEFC:
    MOVE.l (A1)+,D2
    BEQ.b JL_0_FF0E

    MOVEA.l D2,A0
    MOVE.l (A0),D2
    ADDQ.w #8,A0
    JSR AJL_0_53DC
  BRA.b JL_0_FEFC

  JL_0_FF0E:
  CLR.w state_of_residents
  CLR.w comsettings_message
  CLR.w maxobject_pos

  settings_events:
    Gosub newoptionsfunc
    ;$6 stringbuffer
    ;$9 icons
    ;$a runtime error
    ;$f smallest
    ;$10 debuginfo
    ;$11 =ok
    ;$14 =cancel
    ;$1b =resident  line 1
    ;$1c =resident  line 2
    JL_0_FF44:
    CMP.w #-$1,D7
     BNE.w settings_events
    CMP.w #$5,D6                      ; vorher $6
     BHI.w JL_0_1001E                 ; 6, 9, F, 10, 11, 14
    MOVE.w D6,comsettings_message
  BRA.w settings_events

  JL_0_1001E:
  CMP.w #$A,D6
  BNE.w JL_0_10084                  ; JL_0_1003C

  BTST #$7,use_debugger             ;runtime error
  BNE 'debugon
  CLR.w debugmode
  BRA.b 'debugoff
 'debugon
  SNE debugmode
 'debugoff

  MOVE.l a0,-(a7)
  MOVE.l comdata,a0
  MOVE.b debugmode,$7ee(a0)
  MOVE.l (a7)+,a0

  BRA.w settings_events


JL_0_10084:
  CMP.w #$11,D6
   BCS.w settings_events
  CMP.w #$14,D6
   BHI.w settings_events
  BEQ.w JL_0_100E2
  ; -- settings closed with "ok"
  MOVE.w D6,-(A7)
  MOVE.w comsettings_message,D0
   BEQ.w JL_0_100B2
  JSR init_buffers

  JL_0_100B2:
  MOVE.w state_of_residents,D0
   BEQ.w JL_0_100C2
  JSR reloadresident
  JL_0_100C2:
  MOVE.w (A7)+,D6

  CMP.w #$12,D6
   BEQ.w JL_0_100D6
  CMP.w #$13,D6
   BEQ.w JL_0_100DC
RTS

JL_0_100D6: JMP menu_compile_run
JL_0_100DC: JMP menu_createexecutable





JL_0_100E2:           ;cancel compilersettings
  LEA AL_0_F9B6,A0
  LEA ptr_xtradata,A1
  JL_0_100EE:
  MOVE.w (A1)+,D0
  BEQ.b JL_0_10104
  SUBQ.w #1,D0
  JL_0_100F4:
    MOVE.l (A1)+,D1
    BEQ.b JL_0_100EE
    MOVEA.l D1,A2
    MOVE.w D0,D1
    JL_0_100FC:
      MOVE.b (A0)+,(A2)+
    DBF D1,JL_0_100FC
  BRA.b JL_0_100F4
  JL_0_10104:
RTS

.getobjectentry:
  MOVE.l d0,a1
  MOVEA.l libpointer,A2

  JL_0_1027Ca:
    MOVE.l $12(A2),D0
    TST.w -$2(A2,D0.L)
     BEQ.w JL_0_102AAa
    SUBQ.w #1,D1
     BPL.w JL_0_102AAa
    MOVEA.l -$1A(A2,D0.L),A3
    ADDA.l A2,A3

    JL_0_10294a:
      MOVE.b (A3)+,(A1)+
    BNE.w JL_0_10294a

    CLR.b -(A1)
    MOVE.w -$4(A2,D0.L),D0
    AND.l #$ffff,d0
    RTS

    JL_0_102AAa:
    MOVEA.l (A2),A2
BRA.w JL_0_1027Ca

; --
; -- compilersetting_datas
str_maxobjects_name:   Dc.b "              ",0,0
str_maxobjects_name2:  Dc.b "              ",0,0
objectbuffer:          Ds.w 1
                       Dc.b "@",0,0
                       Ds.b 3
str_objectbuffer:      Dc.b "16384",0,0
                       Ds.b 5
libsbuffer:            Ds.w 1
                       Dc.b $80,$00,$00,$00
                       Ds.w 1
str_libsbuffer:        Dc.b "16384",0,0
                       Ds.b 5
systembuffer:          Ds.w 1                        ; systen buffer
                       Dc.b $10,$00,$00,$00 ;....
                       Ds.w 1
str_systembuffer:      Dc.b "4096",0,0
                       Ds.w 3
databuffer:            Ds.w 1                        ; data buffer
                       Dc.b $10,$00,$00,$00 ;....
                       Ds.w 1
str_databuffer:        Dc.b "4096",0,0
                       Ds.w 3
macrobuffer_size:      Ds.w 1                        ; macro buffer
                       Dc.b " ",0,0
                       Ds.b 3
str_macrobuffer:       Dc.b "8192",0,0
                       Ds.w 3
stringbuffer:          Ds.w 1                     ; string buffer
                       Dc.b "(",0,0
                       Ds.b 3
str_stringbuffer:      Dc.b "10240",0,0      ;stringbuff
                       Ds.b 5
maxobjects_value:      Dc.b $00,$64,$00,$00 ;.d..
                       Ds.w 1
str_maxobjects_value:  Dc.b "100",0,0
                       Ds.b 7
maxobjects_value2:     Dc.b $00,$14,$00,$00 ;....
;   Ds.w 1
str_maxobjects_value2: Dc.b "20",0,0
                       Ds.l 2

set_create_iconfile:   Dc.b $00 ;.
create_iconfile:       Dc.b $80,$01,$01 ;...    ;create icon
                       Dc.b $00,$01

set_use_debugger:      Dc.b $00 ;.                   ; Flags.w
use_debugger:          Dc.b $80,$01,$01 ;...       ; Activation.w
                       Dc.b $00,$01 ;..                         ; GadgetType.w
AL_0_11010:            Dc.b $00,$80,$01,$01 ;....   ; flags, activation
AL_0_1103C:            Dc.b $00,$80,$01,$01 ;....   ; flags, activation
AL_0_11068:            Dc.b $00,$80,$01,$01 ;....    ; flags, activation
AL_0_11094:            Ds.w 1

set_make_smallestcode: Ds.b 1
make_smallestcode:     Dc.b $00,$01,$01 ;...   ;make smallest
                       Dc.b $00,$01 ;..
set_link_debuginfo:    Ds.b 1
link_debuginfo:        Dc.b $00,$01,$01 ;...  ;create debuginfo
                       Dc.b $00,$01 ;..


; -------------------------------------------------
residents_table: ; 544 bytes, 68 bytes je eintrag
Ds.l 17          ;resident files step $44 piece 8
AL_0_113A8:
Ds.l 63
Ds.l 39
AL_0_11540:
Ds.l 17
; -------------------------------------------------

str_calcexpression:   Ds.l 32
AL_0_11A20:           Ds.l 1
.menu_calculator:
  MOVE.l destbufferend,AL_0_11A20
  MOVE.l A7,AL_0_2B18
  MOVE.l #AJL_0_11C00,AL_0_2B1C
  CLR.b str_calcexpression
  !basic
  If Peek.l(Addr Window(3))=0
    FindScreen 0
    WZWindow 3,?wzgui,128,-2,-2,-2,-2,3
    Poke.w ?button_bin_flags, $00
    Poke.w ?button_dec_flags, $80

    activategadget{"CALC_EXPRESSION"}
    calc_exit = False
    Repeat
      ev.l = WaitEvent
      Select ev
      Case #IDCMP_IDCMPUPDATE
        Select WZGadName
        Case "CALC_EXPRESSION"
          calc_expression$ = WZGetString("CALC_EXPRESSION")
          Poke$ ?str_calcexpression,calc_expression$

        Case "BIN"
          Poke.w ?button_bin_flags, $80
          Poke.w ?button_dec_flags, $00

        Case "HEX"
          Poke.w ?button_bin_flags, $00
          Poke.w ?button_dec_flags, $00

        Case "DEC"
          Poke.w ?button_bin_flags, $00
          Poke.w ?button_dec_flags, $80

        Case "CALC_CLOSE"
          calc_exit = True
        End Select

        If calc_expression$<>""
          !asm
          BSR examine_expression
          !basic
          calc_expression$ = Peek$(?str_calcexpression)
          WZPrint "CALC_EXPRESSION",&calc_expression$
        EndIf
      Case #IDCMP_CLOSEWINDOW
        calc_exit = True
      End Select
      activategadget{"CALC_EXPRESSION"}
    Until calc_exit
    WZCloseWindow 3
    !asm
    RTS
  EndIf
  !asm

  ; examine entered expression
.examine_expression:
  LEA str_calcexpression,A0

  ;MOVEA.l comdata,A1
  ;MOVEA.l $38(A1),A1            ; print update in stringgadget
  ;L_0_11AB8: JSR (A1)

  ; auswerten der expression
  JSR AJL_0_3F3C
  JSR AJL_0_457A
  CLR.w AL_0_E948
  LEA str_calcexpression,A5
  JSR AJL_0_BF6E
  LEA str_calcexpression,A0
  TST.l D3
   BPL.w JL_0_11AE8
  MOVE.b #$2D,(A0)+
  NEG.l D3

  JL_0_11AE8:
  CMPI.w #$80,button_dec_flags
   BEQ.w JL_0_11B74
  MOVEQ.l #$00,D1
  CMPI.w #$80,button_bin_flags
   BNE.w JL_0_11B36
  MOVEQ.l #$1F,D0
  MOVE.b #$25,(A0)+

  JL_0_11B08:
    LSL.l #1,D3
     BCC.w JL_0_11B18
    MOVE.b #"1",(A0)+
    MOVEQ.l #-$01,D1
    BRA.w JL_0_11B22

    JL_0_11B18:
    TST.w D1
    BEQ.w JL_0_11B22
    MOVE.b #"0",(A0)+

    JL_0_11B22:
  DBF D0,JL_0_11B08

  JL_0_11B26:
  TST.w D1
  BNE.w JL_0_11B30
  MOVE.b #"0",(A0)+

  JL_0_11B30:
  CLR.b (A0)
  BRA.w JL_0_11B7C

  JL_0_11B36:
  MOVEQ.l #$07,D0
  MOVE.b #$24,(A0)+

  JL_0_11B3C:
    MOVE.l D3,D2
    SWAP D2
    LSR.w #8,D2
    LSR.w #4,D2
    ADDI.w #$30,D2
    CMP.w #$3A,D2
     BCS.w JL_0_11B52
    ADDQ.w #7,D2

    JL_0_11B52:
    CMP.w #$30,D2
    BEQ.w JL_0_11B62
    MOVE.b D2,(A0)+
    MOVEQ.l #-$01,D1
    BRA.w JL_0_11B6A

    JL_0_11B62:
    TST.w D1
     BEQ.w JL_0_11B6A
    MOVE.b D2,(A0)+
    JL_0_11B6A:
    LSL.l #4,D3
  DBF D0,JL_0_11B3C
  BRA.w JL_0_11B26

  JL_0_11B74:
  MOVE.l D3,D2
  JSR AJL_0_53DC
  JL_0_11B7C:
RTS


AJL_0_11C00:
  MOVE.l AL_0_11A20,destbufferend
  CLR.b str_calcexpression
BRA.w JL_0_11B7C


Even
str_cliarguments: Ds.l 32

.menu_simcliarguments:
  MOVEA.l comdata,A1
  MOVEA.l $802(A1),A1   ; compiler says to PED: openwindow
  MOVE.l #1001,D0
  MOVE.l #str_cliarguments,D1
  JSR (A1)
RTS


.skipme:
 'l1
    MOVE.b (a5)+,d0
    BEQ 'l2
    CMP.b #$80,d0
    BNE 'l1
    MOVE.b (a5)+,d0
    BEQ 'l2
    CMP.b #$02,d0
  BNE 'l1
 'l3
    CMP.b #$20,(a5)+
  BEQ 'l3
  SUBQ.l #1,a5
  TST.b (a5)
  BEQ 'l2
  CMP.w #$8008,(a5)
  BEQ 'l4
  CMP.w #$8009,(a5)
  BEQ 'l4
  BRA 'l1
 'l4
  ADDQ.l #2,a5
  JSR skiprest
  RTS

 'l2
  JSR nextline
  BNE 'l1
RTS

.compiledate
  !basic
  DateFormat 1
  i.l=SystemDate
  a$=Date$ (i)
  a$=Replace$(a$,"/",".")
  GetD0 &a$
  MOVEQ #8,d2
  MOVE.l d0,a0
  'l1
    MOVE.b (a0)+,d1
    JSR JL_0_7428
  DBF d2,'l1
  MOVEQ #0,d0
  MOVE.b (a0)+,d0
  !asm
  ADD.l #9,d2
  ADD.l #9,a5
RTS

.compiledate_ger
  !basic
  DateFormat 0
  i.l=SystemDate
  a$=Date$ (i)
  a$=Replace$(a$,"/",".")
  GetD0 &a$
  MOVEQ #8,d2
  MOVE.l d0,a0
  'l1
    MOVE.b (a0)+,d1
    JSR JL_0_7428
  DBF d2,'l1
  MOVEQ #0,d0
  MOVE.b (a0)+,d0
  !asm
  ADD.l #9,d2
  ADD.l #13,a5
RTS


.compiledatedc
  !basic
  DateFormat 1
  i.l = SystemDate
  a$ = Date$ (i)
  a$ = Replace$(a$,"/",".")
  GetD0 &a$
  MOVEQ #8,d2
  MOVE.l d0,a0
  'l1
    MOVE.b (a0)+,d1
    JSR writebyte
  DBF d2,'l1
  MOVEQ #0,d0
  MOVE.b (a0)+,d0
  !asm
  ADD.l #9,a5
RTS

.compiledatedc_ger
  !basic
  DateFormat 0
  i.l=SystemDate
  a$=Date$ (i)
  a$=Replace$(a$,"/",".")
  GetD0 &a$
  MOVEQ #8,d2
  MOVE.l d0,a0
  'l1
    MOVE.b (a0)+,d1
    JSR writebyte
  DBF d2,'l1
  MOVEQ #0,d0
  MOVE.b (a0)+,d0
  !asm
  ADD.l #13,a5
RTS


.version_string:
  MOVE.l d2,-(a7)                           ; D2 -> stack
  MOVE.l a5,d0
  !basic
  _myD0.l = PutD0
  verstring$ = Left$(Peek.s(_myD0),9+3)
  verstring$ = UnRight$(verstring$,3)       ; Compilerkonstantenbeginn \__ entfernen

  ; Version coded as : Majorversion Minorversion Patchlevel
  ;                    00           00           00
  actual_version.l = Peek.l(?versioninformation)
  actual_build.l   = Peek.l(?number_of_builds)

  Format "00"
  Select verstring$
  Case "VER_MAJOR"
    put_versionstr$ = Str$(actual_version LSR 24)
  Case "VER_MINOR"
    put_versionstr$ = Str$((actual_version LSL 8) LSR 24)
  Case "VER_PATCH"
    put_versionstr$ = Str$((actual_version LSL 16) LSR 24 )
  Case "VER_BUILD"
    Format ""
    put_versionstr$ = Str$(actual_build)
  Default
    put_versionstr$ = "{unknown compilerconstant}"
;    a5add.l = 4
  End Select
  Format ""

  GetD0 FLen(put_versionstr$)                ; laenge zielstring -> Stack
  MOVE.l d0,d2
  MOVE.l d2,-(a7)
  SUB #1,d2

  GetD0 &put_versionstr$                    ; kopieren des neuen Strings in den Zielstring
  MOVE.l d0,a0
 'l1
    MOVE.b (a0)+,d1
    JSR JL_0_7428
  DBF d2,'l1
  MOVEQ #0,d0
  !asm
  MOVE.l (a7)+,d0                           ; laenge Zielstring <- Stack
  MOVE.l (a7)+,d2                           ; d2 <-Stack
  ADD.l d0,d2
  ADD.l #12,a5                                ; string_ptr um konstante weitersetzen
  MOVEQ #0,d0
RTS


.version_string_dc:
  MOVE.l a5,d0
  !basic
  _myD0.l = PutD0
  verstring$ = Left$(Peek.s(_myD0),9+3)
  verstring$ = UnRight$(verstring$,3)       ; Compilerkonstantenbeginn \__ entfernen

  ; Version coded as : Majorversion Minorversion Patchlevel
  ;                    00           00           00
  actual_version.l = Peek.l(?versioninformation)
  actual_build.l   = Peek.l(?number_of_builds)

  Format "00"
  Select verstring$
  Case "VER_MAJOR"
    put_versionstr$ = Str$(actual_version LSR 24)
  Case "VER_MINOR"
    put_versionstr$ = Str$((actual_version LSL 8) LSR 24)
  Case "VER_PATCH"
    put_versionstr$ = Str$((actual_version LSL 16) LSR 24 )
  Case "VER_BUILD"
    Format ""
    put_versionstr$ = Str$(actual_build)
  Default
    put_versionstr$ = "{unknown compilerconstant}"
  End Select
  Format ""

  GetD0 FLen(put_versionstr$)-1
  MOVE.l d0,d2

  GetD0 &put_versionstr$                    ; kopieren des neuen Strings in den Zielstring
  MOVE.l d0,a0
 'l1
    MOVE.b (a0)+,d1
    JSR writebyte
  DBF d2,'l1
  MOVEQ #0,d0
  MOVE.b -(a0),d0                           ; letztes Zeichen in D0
  !asm
  ADD.l #12,a5                              ; string_ptr um konstante weitersetzen
RTS


.insert_functionname:
; "\\__THIS_FUNCTION
  MOVE.l d2,-(a7)                           ; D2 -> stack
  MOVE.l a5,d0
  !basic
  _myD0.l = PutD0
  constring$ = Left$(Peek.s(_myD0),13 + 3)
  constring$ = UnRight$(constring$,3)       ; Compilerkonstantenbeginn \__ entfernen
  Select LCase$(constring$)
  Case "this_function"
    If Peek.l(?currentfunction)<>0
      condata$ = Peek.s(Peek.l(?currentfunction) + 48 + 1)
    Else
      condata$ = "GLOBAL"
    EndIf
  Default
    condata$ = constring$
  End Select
  GetD0 Len(condata$)                ; laenge zielstring -> Stack
  MOVE.l d0,d2
  MOVE.l d2,-(a7)

  GetD0 &condata$                    ; kopieren des neuen Strings in den Zielstring
  MOVE.l d0,a0
 'l1
    MOVE.b (a0)+,d1
    JSR JL_0_7428
  DBF d2,'l1
  !asm
  MOVE.l (a7)+,d0                           ; laenge Zielstring <- Stack
  MOVE.l (a7)+,d2                           ; d2 <-Stack
  ADD.l d0,d2                               ; eingefuegte chars zu D2 dazu
  ADD.l #16,a5                              ; string_ptr um konstante weitersetzen
RTS


.insert_codeline:
; "\\__codeline
  MOVE.l d2,-(a7)                           ; D2 -> stack
  MOVE.l a5,d0
  !basic
  _myD0.l = PutD0
  constring$ = Left$(Peek.s(_myD0),8 + 3)
  constring$ = UnRight$(constring$,3)       ; Compilerkonstantenbeginn \__ entfernen
  Select LCase$(constring$)
  Case "codeline"
    condata$ = Str$(Peek.l(?globallinecount))
  Default
    condata$ = constring$
  End Select

  GetD0 Len(condata$)                ; laenge zielstring -> Stack
  MOVE.l d0,d2
  MOVE.l d2,-(a7)
  SUB #1,d2

  GetD0 &condata$                    ; kopieren des neuen Strings in den Zielstring
  MOVE.l d0,a0
 'l1
    MOVE.b (a0)+,d1
    JSR JL_0_7428
  DBF d2,'l1
  MOVEQ #0,d0
  !asm
  MOVE.l (a7)+,d0                           ; laenge Zielstring <- Stack
  MOVE.l (a7)+,d2                           ; d2 <-Stack
  ADD.l d0,d2
  ADD.l #11,a5                                ; string_ptr um konstante weitersetzen
  MOVEQ #0,d0
RTS








.check_incdir:
  !basic
  If Peek.l(?incd)
    includedir$ = Peek$(Peek.l(?incd))
  Else
    includedir$ = dos_AddPart{Peek$(?str_blitz3assign),"Sourcecodes/Includes"}
  End If
  inc$ = Peek$(?ptr_parameterstore)
  CLR.l tempstore

  If dos_Exist{inc$} = 0
    incfile$ = dos_FilePart{inc$}
    inccomplete$ = dos_AddPart{includedir$,incfile$}
    If dos_Exist{inccomplete$}
      Poke$ ?ptr_parameterstore,inccomplete$
      i = FLen(inccomplete$)
      GetReg d0,i
      MOVE.l d0,tempstore
    Else
      ; -- additional checking if includedir$+<completely given includename> exists
      incfile$ = dos_AddPart{includedir$,inc$}
      If dos_Exist{incfile$}
        Poke$ ?ptr_parameterstore,incfile$
        i = FLen(incfile$)
        GetReg d0,i
        MOVE.l d0,tempstore
      EndIf
    End If
  End If
  !asm
  TST.l tempstore
   BEQ 'l1
  MOVE.l tempstore,d2
  'l1
RTS




.gotoendsource
  ; MOVE.w #1,dontwrite
  ;'l1 JSR naloextline
  ; BNE 'l1
  ; ADDQ.l #1,numlines2
  ; ;JSR skiprest
  JSR Aclearallvars
  JSR free_unusedfunctions
  ;
  ;'l2 MOVE.l firstiff,d0
  ; BEQ 'done
  ; MOVE.l d0,a1
  ; MOVE.l (A1),firstiff
  ; MOVEQ.l #$0E,D0
  ; movea.l _execbase,A6
  ; MOVE.l mempool,a0
  ; JSR _FreePooled(A6)
  ; BRA 'l2
 'done
  ; MOVE.l stackaddr,a7
  MOVE.l #"NORE",reqmode
JSR handle_compileerror

.linemessage
  MOVE.l d0,-(a7)
  MOVE.l a5,d0
  !basica7
  i.l = PutD0
  a$ = Peek$(i)
  b$ = Peeks$(i-7,7)
  i = Request("Do workaround ?",b$ + a$,"Yes|No")
  MOVE.l d0,result
  !asma7
  MOVE.l (a7)+,d0
RTS

.check_of_same_source:
  !basic
  check_dirname$  = Peek$(Peek.l(?comdata)+$96)
  check_filename$ = Peek$(Peek.l(?comdata)+$96+48*4)
  If (olddirname$<>check_dirname$) OR (oldfilename$<>check_filename$)
    JSR free_unusedfunctions
  End If
  olddirname$ = Peek$(check_dirname$)
  oldfilename$ = Peek$(check_filename$)
  For i = 0 To 39
    incline(i) = 0
  Next
  !asm
RTS


.addimmi
  MOVEQ #0,d1
  'l1
  MOVE.b (a5)+,d0
  BEQ 'er1
  CMP.b #$20,d0
  BEQ 'l1
  ADDQ #1,d1
  CMP.b #$22,d0
  BNE 'l1
  RTS
  'er1
  JMP syntaxerr
  Dc.l $3A3A

  checkfor_wbmessage:
  JSR _WaitPort(A6)
  LEA $5C(A4),A0
  JSR _GetMsg(A6)
RTS

erro1t   Dc.b "Only one BSS / Chip Segment allowed",0
nodata   Dc.b "BSS Segment contains Data !!!!",0
Even

.bssseg
  TST.b exdebug
  BNE 'l10
  MOVE.l #$4e71,d1
  JSR writeword
  MOVE.l destpointer,d0
  MOVE.l d0,d1
  ADDQ.l #3,d1
  AND.l #$fffffffc,d1
  MOVE.l d1,destpointer
  SUB.l destpointer,d0
  BEQ 'lnf1
  CMP.l #-1,bssstart
  BNE 'lnf1
  CMP.l #-1,chipstart
  BNE 'lnf1
  MOVE.l destpointer,a4
  TST.w dontwrite
  BNE 'lnf1
  MOVE.w #$4e71,-2(a4)
'lnf1  CMP.l #-1,bssstart
  BEQ 'l11
  MOVE.l #erro1t,-(a7)
  JMP handle_compileerror
'l11

  MOVE.l destpointer,bssstart
  MOVE.b #1,bssmode
'x2 TST.b chipmode
  BEQ 'l10
  MOVE.l destpointer,chipend
  CLR.b chipmode
'l10
  JSR get1bytemain
RTS

.chipseg
   TST.b exdebug
  BNE 'x1
  MOVE.l destpointer,d0
  MOVE.l d0,realbssend
  MOVE.l #$4e71,d1
  JSR writeword
  MOVE.l destpointer,d0
  MOVE.l d0,d1
  ADDQ.l #3,d1
  AND.l #$fffffffc,d1
  MOVE.l d1,destpointer
  SUB.l destpointer,d0
  BEQ 'lnf1
  MOVE.l destpointer,a4
  CMP.l #-1,bssstart
  BNE 'lnf1
  CMP.l #-1,chipstart
  BNE 'lnf1
  TST.w dontwrite
  BNE 'lnf1
  MOVE.w #$4e71,-2(a4)
'lnf1
  TST.b bssmode
  BEQ 'l10
  MOVE.l destpointer,bssend
  CLR.b bssmode
'l10
  ;addq.l #3,destpointer
  ;and.l #$fffffffc,destpointer
  CMP.l #-1,chipstart
  BEQ 'l11
  MOVE.l #erro1t,-(a7)
  JMP handle_compileerror
'l11

  MOVE.l destpointer,chipstart
  MOVE.b #1,chipmode
'x1 JSR get1bytemain
RTS


.save_includename:
  !basic
  For i = 0 To 40
    If dos_FilePart{incdim(i)} = dos_FilePart{Peek$(?includetemp2)}
;      !cout{"schon drin: " + Peek$(?includetemp2)}
;      Pop For
;      !asm
;      RTS
    EndIf
  Next i
;  !cout{"storing: ",Peek$(?includetemp2),Peek.l(?includeline)}
  incdim(Peek.w(?ininclude)) = Peek$(?includetemp2)
  incline(Peek.w(?ininclude)) = Peek.l(?includeline)
  !asm
RTS

.zero_includename:
  !basic
  incdim(Peek.w(?ininclude)) = ""
  incline(Peek.w(?ininclude)) = 0
  Poke.l (?includeline),incline(Peek.w(?ininclude)-1)+1
  !asm
RTS


.replacelib:
  LEA replacedat,a0
  Dc.w $3181,$0a00;MOVE.w d1,0(a0,d0.l*2)
RTS

.writeinit:
  TST.b fpu
  BEQ 'l1

 'l1
  MOVE.l destpointer,newinitaddr
  JSR writeword
  JSR writelong
RTS

.stripspaces:
 'll21
  TST.b (a5)
   BEQ.s 'll20
  CMP.b #$20,(a5)
   BNE.s 'll10
  ADDQ.l #1,a5
  BRA.s 'll21
 'll10
  CMP.b #";",(a5)
  BNE.s 'll20
 'll25
  TST.b (a5)+
  BEQ.s 'll23
  BRA.s 'll25
 'll23
  SUBQ.l #1,a5
 'll20
RTS

.findconstant2:
  MOVEM.l a2/d2,-(a7)
  MOVEQ #0,d2
  LEA ptr_parameterstore,a0
  LEA chartab,a2
  fc2
  MOVE.b (a5),d0
  TST.b 0(a2,d0)
  BNE 'l10
  ADDQ.l #1,a5
  MOVE.b d0,(a0)+
  ADDQ.l #1,d2
  BRA fc2
 'l10
  CLR.b (a0)+
  JSR findlabel2
  MOVE.l a2,a0
  MOVEM.l (a7)+,a2/d2
RTS

.error:
  TST.l d0
  BNE 'l10
    MOVE.l #syntax_,-(a7)
    JMP handle_compileerror
 'l10
  CMP.l #1,d0
  BNE 'l20
    MOVE.l #overflow,-(a7)
    JMP handle_compileerror
 'l20
  ADD.l a2,d0
  MOVE.l d0,-(a7)
JMP handle_compileerror


.AL_0_1C06b:
  TST.l d5
  BNE 'l1
    MOVEQ #0,d5
    BSET d4,d5
    MOVE.l d5,d4
    MOVEQ #$f,d5
    JMP AL_0_1C06
  'l1
  CMP.l #1,d5
  BNE 'l10
    MOVEQ #0,d5
    ADDQ #8,d4
    BSET d4,d5
    MOVE.l d5,d4
    MOVEQ #$f,d5
  'l10
  JMP AL_0_1C06
;************************** dont scatter end
  JMP _return
  JMP _return
  JMP _return
  JMP _return
  JMP _return
  JMP _return
  JMP _return
  JMP _return
  JMP _return
  JMP _return
  JMP Atokejsr
  JMP writeinit
  JMP macroexecute
  JMP findnext
  JMP replacelib
  JMP findconstant2
  JMP findchar              ;char in d1
  JMP stripspaces
  JMP calc                  ;d0 varmode
  JMP error
  JMP writelong             ;d1 value
  JMP writeword             ;d1 value
  JMP writebyte             ;d1 value
JMP exit

.pluginbase
destpointer:  Ds.w 1
AL_0_E8F8:    Ds.b 1
AL_0_E8F9:    Ds.b 1
fast          Dc.w 0
fpu           Dc.w 0
newsyntax     Dc.w 0
;******************** dont scatter end
optistring    Dc.b 0
optistring2   Dc.b 0
optiarray     Dc.b 0
quickadd      Dc.b 0
newmode       Dc.w 0
mode          Dc.w 0
string1       Dc.w 0
load_var_size Dc.w 0
load_var_reg  Dc.w 0
load_var_addr Dc.l 0
imm_size      Dc.w 0
imm_reg       Dc.w 0
imm_addr      Dc.l 0
iee           Dc.b 0
_dcb          Dc.b 0
nohunkoffset  Dc.l 0

;-- data for ted
teddata:      Dc.l tokens
              Dc.l compilermenu_entries
              Dc.l read_xtrafile
              Dc.l write_xtrafile
              Dc.l call_menuentry        ; compile and run ?
              Dc.l 0
              Dc.b ":",34,".;"
              Dc.l "NEW1"
              Dc.l newtypebase
              Dc.l labelbase
deflib        Dc.l 0
incd          Dc.l 0
              Dc.l 0
              Dc.l 0
              Dc.l 0
_return       RTS
              Dc.b 0
chartab2      Ds.l 256
codeend       Dc.l 0
hunkoffsetnum Dc.l 0
chipsize      Dc.l 0
bsssize       Dc.l 0
bssstart      Dc.l -1
bssend        Dc.l -1
chipstart     Dc.l -1
chipend       Dc.l -1
bssmode       Dc.b 0
chipmode      Dc.b 0
newhunk       Dc.b 0
bssnum        Dc.l 0
chipnum       Dc.l 0
lastinstruction Dc.l 0
hunkbegin     Dc.l $03f3,0,2,0,1
AL_0_842b:    Ds.l 1
bsssize2      Dc.l 1
              Dc.l $03E9 ;..
AL_0_84Ab:    Dc.l $100
hunkbegin2    Dc.l $03f3,0,3,0,2
AL_0_842c:    Ds.l 1
bsssize3      Dc.l 1
chipsize2     Dc.l 1
              Dc.l $3e9
AL_0_84Ac     Dc.l 0
hunkend       Dc.l $3f2,$3eb,0,$3f2
hunkend2      Dc.l $3f2,$3ea,0,$3f2
strcpy        Dc.b "strcpy",0
strcmp        Dc.b "strcmp",0
strvar        Dc.b "strvar",0
qmul          Dc.b "qmul",0
qdiv          Dc.b "qdiv",0
_MaxLen       Dc.b "maxlen",0
notf          Dc.b "????",0
;_intuiname    Dc.b "intuition.library",0
errtext       Dc.b "only reg addressing Mode supported",0
fpuerr        Dc.b "Instruction not yet supported by 68K FPU ",0
cmplxerr      Dc.b "Formula too complex for 68K FPU or too much regload register used",0
peeksize      Dc.w 0

mainstart     Dc.l 0
;addmemcode Dc.b 0
infunctioncode Dc.b 0
regnumstore   Dc.w 0
              Dc.b "$VER: Amiblitz3 V",!vers,", Build: \\__VER_BUILD (\\__DATE_GER__)",0
testcode      Dc.b "print i",0
              Ds.b 100
devo          Dc.b "developobject",0
autostorename Dc.b "__autoconstantnum",0
_include      Dc.b "__include",0
_debug        Dc.b "__debug",0
unusedfunc    Dc.l 0
Even

.save_errorfile
  MOVE.l a0,-(a7)
  MOVE.l a0,d0
  MOVE.l a5,a0           ;macro title
  !basic
  i = PutD0
  MOVEQ #20,d0
  'l2:
    MOVE.b -(a0),d1
    BEQ 'l1
    CMP.b #":",d1
    BEQ 'l1
    SUBQ.l #1,d0
    BNE 'l2
  'l1
  ADDQ #1,a0
  MOVE.l a0,d0
  i2.l = PutD0
  fid.l = file_Open{dos_AddPart{my_systemdir$,"ab_compileerror.txt"},#file_forcewrite}
  If fid <> -1
    If Peek.w (?ininclude)>0
      Poke$(?includetemp2),incdim(Peek.w(?ininclude)-1)
    Else
      Poke$(?includetemp2),""
    End If
    a$ = Peek$(?includetemp2)
    x$ = Replace$(Peek$(i),"\\0a","\n")
    file_WriteLine{fid,x$}
    file_WriteLine{fid,Str$(Peek.l(?compilelinecounter) + 1)}
    If a$
      file_WriteLine{fid,a$}
      file_WriteLine{fid,Str$(Peek.l(?includeline)-1)}
      Poke.l ?compilelinecounter,Peek.l(?includeline) - 1
    Else
      file_WriteLine{fid,"none"}
    End If
    file_WriteLine{fid,Peek$(i2)}
    file_WriteLine{fid,Str$(Peek.l(?globallinecount))+" line(s) compiled"}
    file_WriteLine{fid,Hex$(Peek.w(?globalvarpointer))+" global var base"}
    file_Close{fid}
  End If
  !asm
  MOVE.l (a7)+,a0
RTS

.update_progressbar
  !basic
  testd0.w = PutD0
  testd1.w = Peek.w(?progressbar_width)
  If Peek.l(Addr Window(4))<>0
    calcpro.w = (testd0 * 100.0 ) / testd1
    Use Window 4
    If comstatus$<>old_comstatus$
      WZPrint "COMPILE_INFO",&comstatus$
      old_comstatus$ = comstatus$
    EndIf
    If (calcpro > calcpro_old) OR (calcpro < 20)
      testpr$ = ""
      If ((calcpro+1) MOD 5 )=0 Then WZPrint "COMPILE_GAUGE",calcpro,100,&testpr$
      calcpro_old = calcpro
    EndIf
  EndIf
  !asm
RTS


.newoptionsfunc
  !basic
  MaxLen a$ = 5000
  var.l = ?residents_table
  If winon.l = 0
    FindScreen 0
    WZWindow 1,?wzgui,256,-2,ScreenHeight/6,-2,ScreenHeight/1.5,1
    WZ_SetFont{"WIN_CPREFS"}
    WZ_InitTable{"WIN_CPREFS","OBJECTS",2,0}
    WZ_SetTableColors{"OBJECTS",1,0,2,3,3}

    ; Setzen der Spaltentitel fuer die erste Zeile
    WZ_SetTableTitle{"OBJECTS","Objects","Max"}

    ; Legt die Prioritaet der 6 Spalten fest
    WZ_SetPriority{"OBJECTS",3,1}

    ; Setzt die zweite Spalte der Tabelle "OBJECTS" auf nicht editierbar
    WZ_SetEditable{"OBJECTS",False,True}

    ; Sortieren verboten
    WZ_SetSortable{"OBJECTS",Off}

    ; Fuegt Zeilen an die Tabelle "OBJECTS" an
    For i = 0 To Peek.w(?number_of_objects)-1
      a$ = ""
      GetD0 &a$,i:JSR getobjectentry : a = PutD0
      WZ_AddRow{"OBJECTS",Peek$(&a$),Str$(a)}
    Next
    WZ_DrawTable{"OBJECTS"}
    ; Fuellt die Tabelle mit den Werten, die mit WZAddRow{} erstellt wurden
    WZ_UpdateTable{"OBJECTS"}
    winon = 1
    var.l = ?residents_table
    a$ = Peek$(var)
    For i = 0 To 6
      a$ = a$ + "\\0a"
      var + $44
      a$ = a$ + Peek$(var)
    Next
    WZPrint "RESIDENTS",&a$

    i = Peek.l(?stringbuffer)
    WZPrint "STRINGBUFFER",i

    var.l = 0
    BTST #7,use_debugger
    BEQ 'nod
    var = 1
    'nod
    WZPrint "DEBUG",var
    var = 0
    BTST #7,create_iconfile
    BEQ 'noi
    var = 1
    'noi
    WZPrint "ICON",var
    var = 0
    BTST #7,make_smallestcode
    BEQ 'nos
    var = 1
    'nos
    WZPrint "SMALLEST",var
    var = 0
    BTST #7,link_debuginfo
    BEQ 'nodi
    var = 1
    'nodi
    WZPrint "DEBUGINFO",var
    ; Setzen der Schaltflaechen fuer die Debuggersettings
    var.l = 0
    BTST #7,autorun
    BEQ 'nod4
    var = 1
    'nod4
    WZPrint "AUTORUN",var
    var.l = 0
    BTST #7,interruptcheck
    BEQ 'nod1
    var = 1
    'nod1
    WZPrint "CHECK_INTERRUPT",var
    var.l = 0
    BTST #7,assemblercheck
    BEQ 'nod2
    var = 1
    'nod2
    WZPrint "CHECK_ASSEMBLER",var
    var.l = 0
    BTST #7,overflowcheck
    BEQ 'nod3
    var = 1
    'nod3
    WZPrint "CHECK_OVERFLOW",var
  End If

  exit.l = 0
  mess.l = 0
  ev.l = WaitEvent
  WZ_CheckTableEvent{ev}
  Select ev
  Case #IDCMP_IDCMPUPDATE
    Select LCase$(WZGadName)
    Case "autorun"
      If WZInput
        BSET #7,autorun
      Else
        BCLR #7,autorun
      End If

    Case "check_interrupt"
      If WZInput
        BSET #7,interruptcheck
      Else
        BCLR #7,interruptcheck
      End If

    Case "check_assembler"
      If WZInput
        BSET #7,assemblercheck
      Else
        BCLR #7,assemblercheck
      End If

    Case "check_overflow"
      If WZInput
        BSET #7,overflowcheck
      Else
        BCLR #7,overflowcheck
      End If

    Case "residents"

    Case "stringbuffer"
      ;Poke$ ?str_stringbuffer,Str$(WZInput)
      Poke.l ?stringbuffer,WZInput
      mess = $6

    Case "debug"
      If WZInput
        BSET #7,use_debugger
      Else
        BCLR #7,use_debugger
      End If
      mess = $a

    Case "icon"
      If WZInput
        BSET #7,create_iconfile
      Else
        BCLR #7,create_iconfile
      End If
      mess = $9

    Case "smallest"
      If WZInput
        BSET #7,make_smallestcode
      Else
        BCLR #7,make_smallestcode
      End If
      mess = $f

    Case "debuginfo"
      If WZInput
        BSET #7,link_debuginfo
      Else
        BCLR #7,link_debuginfo
      End If
      mess = $10

    Case "cr" ; compile and run in compiler prefs
      mess = $12 : exit = 1

    Case "ce" ; compile und create exe in compile prefs
      Poke$ (?exefilename),""
      mess = $13 : exit = 1
;      Poke$ (?exefilename),""
;      !asm
;      JSR menu_newcreate
;      !basic

    Case "cancel"
      mess.l = $14 : exit = 1

    Case "ok"
      mess = $11 : exit = 1

    End Select
  End Select

  If ev = $200 Then mess = $11:exit = 1
  If mess = $11
    For i = 1 To Peek.w(?number_of_objects)
      a$ = WZ_GetCell{"OBJECTS",i,2}
      i2 = Val(a$):If i2 = 0 Then i2 = 1
      Poke.w ?maxobjects_value,i2
      Poke.w ?maxobject_pos,i-1
      Gosub storemaxobjects
    Next
    Gosub stringtores
  End If

  If exit = 1
    MOVE.w #$FFFF,state_of_residents   ;load resident
    WZ_KillTable{"OBJECTS"}
    WZCloseWindow 1
    winon = 0
  End If

  GetD0 mess
  !asm
  MOVEQ #-1,d7
  MOVE.l d0,d6
Return

.stringtores
  i.l = WZInput("RESIDENTS")
  a$ = Peek$(i)
  InitArgParse a$
  var.l = ?residents_table
  For i = 0 To 7
    p$ = NextArgChar$ ($a)
    Poke$ var,p$
    var + $44
  Next
Return


.storemaxobjects
  MOVE.w maxobject_pos,D5                ;max objects 1. visible
  LEA maxobjects_value,A3                  ;current value
  MOVEA.l libpointer,A2
  JL_0_FFDAb:
  CMPA.w #$0,A2
  BEQ.w JL_0_FF44b
  MOVEA.l A2,A1
  ADDA.l $12(A1),A1
  TST.w -$2(A1)
  BEQ.w JL_0_FFF6b
  SUBQ.w #1,D5
  BMI.w JL_0_FFFCb

  JL_0_FFF6b:
  MOVEA.l (A2),A2
  BRA.w JL_0_FFDAb

  JL_0_FFFCb:
  MOVE.w (A3),-$4(A1)

  JL_0_FF44b
RTS



.do_LastRunErrsMode:
  MOVE.w debugnest,d0
  LEA storedebugmode, a0
  MOVE.b 0(a0,d0.w),debugmode
  TST.w debugnest
  BEQ unpairrunerrs_
  SUBQ.w #1,debugnest
RTS
runerrsoverflow_ JMP runerrsoverflow
unpairrunerrs_ JMP unpairrunerrs

.toggledebug:
  BCHG #$7,use_debugger

  BTST #$7,use_debugger
  BNE 'debugon
  CLR.w debugmode
  BRA.b 'debugoff
 'debugon
  SNE debugmode
 'debugoff

  MOVE.l a0,-(a7)
  MOVE.l comdata,a0
  MOVE.b debugmode,$7ee(a0)

;  !basic
;  !cout{Peek.b(?debugmode)}
;  !asm
  MOVE.l (a7)+,a0
RTS

.do_runerrson:
  BTST #$7,use_debugger
  BNE 'debugon
  CLR.w debugmode
  BRA.b 'debugoff
 'debugon
  SNE debugmode
 'debugoff
RTS

.do_runerrsoff:
  ADDQ.w #1,debugnest
  MOVE.w debugnest,d0
  CMP.w #18,d0
   BGE runerrsoverflow_b
  LEA storedebugmode, a0
  MOVE.b debugmode,0( a0,d0.w)
 'l1
  SF debugmode
RTS


AL_0_4A20:  Ds.l 32
.do_USEPATH:
  BEQ.w syntaxerr_b
  LEA lastpath,A0
  MOVEM.l a0-a1/d0,-(a7)
  LEA lastpath2,a1
 'l2
    MOVE.b (a0)+,(a1)+
  BNE 'l2
  MOVEM.l (a7)+,a0-a1/d0
  LEA AL_0_4A20(PC),A0
  MOVEM.l a0-a1/d0,-(a7)
  LEA lastpath,a1
 'l1
    MOVE.b (a0)+,(a1)+
  BNE 'l1
  MOVEM.l (a7)+,a0-a1/d0

  JL_0_4AA8:
  TST.w D0
   BMI.w syntaxerr_b
  MOVE.b D0,(A0)+
  BSR.w get1bytemainb
   BNE.w JL_0_4AA8
  MOVE.b #$2,(A0)
RTS

.do_usepath2:
  BEQ.w syntaxerr_b
  LEA path2,A0
;  MOVEM.l a0-a1/d0,-(a7)
;  LEA lastpath,a1
;'l1 MOVE.b (a0)+,(a1)+
;  BNE 'l1
;  MOVEM.l (a7)+,a0-a1/d0
  JL_0_4AA8b:
  TST.w D0
   BMI.w syntaxerr_b
  MOVE.b D0,(A0)+
  BSR.w get1bytemainb
   BNE.w JL_0_4AA8b
  MOVE.b #$2,(A0)
RTS

runerrsoverflow_b:  JMP runerrsoverflow
syntaxerr_b:        JMP syntaxerr
errormsg_reg_b:     JMP errormsg_reg



.do_regsave:
  MOVE.l #$f22d6780,fpucodeglobal
  MOVE.l #$f22c6780,fpucodelocal
  LEA regtable,a0
  MOVE.l #7,maxregs
  'again MOVE.l (a0),d0
  BEQ 'e1
  CLR.l (a0)
  MOVE.w 4(a0),d0
  MOVE.l fpucodeglobal,fpucode
  TST.w 6(a0)
  BEQ 'glob
  MOVE.l fpucodelocal,fpucode
  'glob
  MOVE.l fpucode,d1
  JSR writelong
  SUB.l #$80,fpucodelocal
  SUB.l #$80,fpucodeglobal
  MOVE.w d0,d1
  JSR writeword
  ADDQ #8,a0
  BRA 'again
  'e1
RTS



syntaxerrc JMP syntaxerr
JL_0_8440c JMP JL_0_8440
JL_0_8454b JMP JL_0_8454

.do_regload:
  MOVE.l #$f22d4780,fpucodeglobal
  MOVE.l #$f22c4780,fpucodelocal
  LEA regtable,a0
  TST.l (a0)
   BNE errormsg_reg_b
  MOVE.l d7,-(a7)
  SUBQ.l #1,a5
 'l2
  JSR getparameter2
  BEQ.w 'nopar
  MOVE.w d0,lastchar
  JSR findvariable
  BNE 'islocal
  MOVE.l fpucodeglobal,fpucode
  MOVE.l #3,maxregs
  MOVEQ #0,d7
 'go
  CMP.l #newtype_float,$a(a2)        ;is float type
   BEQ 'doit
  CMP.l #newtype_double,$a(a2)
   BNE JL_0_8454b
 'doit
  LEA regtable,a0
  MOVEQ #0,d0
 'loop
  TST.l (a0)
   BEQ 'store
  ADDQ.l #4,d0
  ADDQ.l #8,a0
  CMP.l #16,d0
   BCS 'loop
  MOVE.l #2,maxregs
  CMP.l #20,d0
   BCS 'loop
  MOVE.l #1,maxregs
  CMP.l #24,d0
   BCS 'loop
  JMP JL_0_88B0
 'store
  TST.b fpu
   BEQ 'nofpu
  MOVE.l a2,(a0)
  MOVE.w 4(a2),4(a0)
  MOVE.w d7,6(a0)
  MOVE.l fpucode,d1
  SUB.l #$80,fpucodeglobal
  SUB.l #$80,fpucodelocal
  JSR writelong
  MOVE.w 4(a2),d1
  JSR writeword
 'nofpu
  MOVE.w lastchar,d0
  CMP.w #":",d0
   BEQ 'nopar
  TST.w d0
   BEQ 'nopar
  CMP.w #",",d0
  BNE syntaxerrc
  BRA 'l2
 'nopar
   MOVE.l (a7)+,d7
  RTS

 'islocal
  MOVEQ #1,d7
  MOVE.b #1,newvariable
  LEA firstlocal,a2
  JSR findvariable
  CLR.b newvariable
  CMP.l #-1,d0
  BEQ.w JL_0_8440c
  MOVE.l fpucodelocal,fpucode
  BRA 'go
  _extb                          ;020 instr extb
  CMP.b #".",d0
   BNE 'l1
  BSR get1bytemainb
  BSR get1bytemainb
 'l1
  ORI .b #$20,d0
  CMP.b #"d",d0
   BNE JL_0_837Cb
  BSR get1bytemainb
  SUB.b #$30,d0
  CMP.b #$7,d0
   BGT syntaxerrc
  MOVE.w #$49c0,d1
  ADD.b d0,d1
  JSR writeword
  BSR get1bytemainb
RTS

.do_uselastpath
  LEA lastpath,a0
  LEA AL_0_4A20(PC),A1
 'l1:
    MOVE.b (a0)+,(a1)+
  BNE 'l1

  LEA lastpath2,a0
  LEA lastpath,A1
 'l2:
    MOVE.b (a0)+,(a1)+
  BNE 'l2
RTS



.do_Object:
  TST.b objectcount
  BEQ 'l2a
  JMP JL_0_86F2
 'l2a
  LEA devo,a0
  ADDQ.b #1,objectcount
  MOVEM.l a1/d2,-(a7)

  LEA ptr_parameterstore,a1
 'l1
    MOVE.b (a0)+,(a1)+
  BNE 'l1

  MOVEQ #13,d2
  JSR findlabel2
  BNE 'd
  TST.l 8(a2)
  BEQ 'd
  SUBQ.b #1,objectcount
  MOVEM.l (a7)+,a1/d2
  JSR skiprest
  MOVE.b #1,developobject
  RTS

 'd
  MOVEM.l (a7)+,a1/d2
  MOVE.b #1,resdisable
 'l2
  CLR.b developobject
  JMP do_Macro
RTS


JL_0_837Cb:
JMP JL_0_837C

.do_syntax
  CLR.b typecheck
  CLR.b declare
  CLR.b declare2
  SUB.b #$30,d0
  BTST #0,d0
  BEQ 'l1
  MOVE.b #1,declare
 'l1
  BTST #1,d0
  BEQ 'l2
  MOVE.b #1,declare2
 'l2
  BTST #2,d0
  BEQ 'l3
  MOVE.b #1,typecheck
 'l3
  BSR.w get1bytemainb
RTS

get1bytemainb:
JMP get1bytemain


.check_newconstants:
;  !regs2stack
  MOVE.l d2,-(a7)                           ; D2 -> stack
  ADDQ #1,a5
  MOVE.l a5,-(a7)
  !basic
  MOVE.l (a7)+,d0 : _myD0.l = PutD0
  newconst$ = UCase$(Peek$(_myD0))
  condata$ =""
  Poke.b ?skip_bytes,0
  If Left$(newconst$,2) = "__"
    Select Mid$(newconst$,3,4)
    Case "DATE"
      Select Mid$(newconst$,3,6)
      Case "DATE__" : DateFormat 1 : Poke.b ?skip_bytes,8
      Case "DATE_G" : DateFormat 0 : Poke.b ?skip_bytes,12
      End Select
      i.l=SystemDate
      condata$ = Date$ (i)
      condata$ = Replace$(condata$,"/",".")

    Case "VER_"
      ; Version coded as : Majorversion Minorversion Patchlevel
      ;                    00           00           00
      actual_version.l = Peek.l(?versioninformation)
      actual_build.l   = Peek.l(?number_of_builds)

      Format "00"
      Select Mid$(newconst$,3,9)
      Case "VER_MAJOR"
        condata$ = Str$(actual_version LSR 24)
      Case "VER_MINOR"
        condata$ = Str$((actual_version LSL 8) LSR 24)
      Case "VER_PATCH"
        condata$ = Str$((actual_version LSL 16) LSR 24 )
      Case "VER_BUILD"
        Format ""
        condata$ = Str$(actual_build)
      Default
        condata$ = "{unknown compilerconstant}"
      End Select
      Format ""
      Poke.b ?skip_bytes,11

    Case "THIS"
      Select Mid$(newconst$,3,9)
      Case "THIS_FUNC"
        Poke.b ?skip_bytes,15
        If Peek.l(?currentfunction)<>0
          condata$ = Peek.s(Peek.l(?currentfunction) + 48 + 1)
        Else
          condata$ = "GLOBAL"
        EndIf
      Case "THIS_INCL"
        Poke.b ?skip_bytes,14
        If Peek.l(?includetemp2)<>0
          condata$ = dos_FilePart{Peek$(?includetemp2)}
        EndIf
      Case "THIS_POIN"
        Poke.b ?skip_bytes,14
        If Peek.l(?currentfunction)<>0
          condata$ = Hex$(Peek.l(?currentfunction))
        EndIf

      End Select

    Case "CODE"
      Poke.b ?skip_bytes,10
      If Mid$(newconst$,3,8) = "CODELINE"
        condata$ = Str$(Peek.l(?globallinecount))
      EndIf

    End Select

  Else
    Select Left$(newconst$,1)
    Case "R"
      Poke.b ?skip_bytes,3
      For i = 1 To Vallong(Mid$(newconst$,2,2))
        condata$ = condata$ + Mid$(newconst$,4,1)
      Next

    Case "N"
      Poke.b ?skip_bytes,1
      condata$ = Chr$(10)

    Default
      newchar = Vallong("$"+Mid$(newconst$,1,2))
      If newchar >0
        condata$ = Chr$(newchar)
        Poke.b ?skip_bytes,2
      EndIf
    End Select
  EndIf
  If condata$ = "" AND Peek.b(?skip_bytes)=0
    !cout{"detected unknown const: " + newconst$}
    condata$ = newconst$
  EndIf

  GetD0 Len(condata$)-1                ; laenge zielstring -> Stack
  MOVE.l d0,d2
  MOVE.l d2,-(a7)

  GetD0 &condata$                    ; kopieren des neuen Strings in den Zielstring
  MOVE.l d0,a0
 'l1
    MOVE.b (a0)+,d1
    JSR JL_0_7428
  DBF d2,'l1
  !asm
  MOVE.l (a7)+,d0                           ; laenge Zielstring <- Stack
  MOVE.l (a7)+,d2                           ; d2 <-Stack
  ADD.l d0,d2                               ; eingefuegte chars zu D2 dazu
  ADD.l #1,d2

  MOVE.l #0,d0                              ; a5 um konstantennamen weiterschieben
  MOVE.b skip_bytes,D0
  ADD.l D0,a5
RTS

;  CMP.l #"__DA",1(a5)
;   BEQ 'date
;
;  CMP.l #"__VE",1(a5)
;   BEQ 'versionstring
;
;  CMP.l #"__TH",1(a5)
;   BEQ 'functionname
;
;  CMP.l #"__CO",1(a5)
;   BEQ 'codeline
;
;  CMP.b #"R",1(a5)
;   BNE 'l21
;
;  ADDQ #1,a5
;  JSR get_hexbyte
;  SUBQ #1,d0
;  MOVE.b (a5),d1
; 'lr1
;    ADDQ #1,d2
;    BSR.w JL_0_7428
;  DBF d0,'lr1
;  ADDQ.l #1,a5
;  BRA writestring
;
; 'l21
;  CMP.b #"n",1(a5)
;   BNE 'l22
;  MOVEQ #$a,d0
;  ADDQ.l #2,a5
;  BRA 'l1
;
; 'l22
;  JSR get_hexbyte
;  BRA 'l1
;
; 'date
;  CMP.l #"TE__",5(a5)
;   BNE 'l1b
;  JSR compiledate
;  BRA 'l1
; 'l1b
;  CMP.l #"TE_G",5(a5)
;   BNE 'l1
;  CMP.l #"ER__",9(a5)
;   BNE 'l1
;  JSR compiledate_ger
;  BRA 'l1
;
; 'functionname
;  CMP.w #"IS",5(a5)
;   BNE 'l1
;  JSR insert_functionname
;  BRA writestring
;
; 'codeline
;  CMP.w #"DE",5(a5)
;   BNE 'l1
;  JSR insert_codeline
;  BRA 'l1
;
; 'versionstring
;  CMP.w #"R_",5(a5)
;   BNE 'l1
;  JSR version_string
;
;RTS



.internal_commands:
.tokens:
INCLUDE "internal_commands.bb2"
Even


.CIF_branches:
           Dc.l cif_lt  ;ciflt
AL_0_2B6C: Dc.l cif_eq  ;cifeq
AL_0_2B70: Dc.l cif_gt  ;cifgt
           Ds.l 1
AL_0_2B78: Dc.l cif_le  ;cifle
AL_0_2B7C: Dc.l cif_ne  ;cifne
AL_0_2B80: Dc.l cif_le  ;cifge
           Ds.l 1
AL_0_2B88: Dc.l cif_ge  ;cifge
AL_0_2B8C: Dc.l cif_ne  ;cifne
AL_0_2B90: Dc.l cif_ge  ;cifge
           Ds.l 1

instructionbase:
           Dc.l do_newtype    ;donewtype
AL_0_2B9C: Dc.l do_end        ;doend
AL_0_2BA0: Dc.l do_let        ;dolet
AL_0_2BA4: Dc.l do_dim        ;dodim
AL_0_2BA8: Dc.l do_goto       ;dogoto
AL_0_2BAC: Dc.l do_gosub      ;dogosub
AL_0_2BB0: Dc.l do_return     ;doreturn
AL_0_2BB4: Dc.l do_statement  ;dostatement
AL_0_2BB8: Dc.l do_function   ;dofunc
AL_0_2BBC: Dc.l do_mousewait  ;domwait
AL_0_2BC0: Dc.l do_if         ;doif
AL_0_2BC4: Dc.l do_while      ;dowhile
AL_0_2BC8: Dc.l do_Macro      ;domacro
AL_0_2BCC: Dc.l do_select     ;doselect
AL_0_2BD0: Dc.l do_case       ;docase
AL_0_2BD4: Dc.l do_default    ;dodefault
AL_0_2BD8: Dc.l do_AsmExit    ;doasmexit
AL_0_2BDC: Dc.l do_xinclude   ;doxinclude
AL_0_2BE0: Dc.l do_INCLUDE    ;doinclude
AL_0_2BE4: Dc.l do_syntax     ;syntaxerr
AL_0_2BE8: Dc.l do_shared     ;doshared
AL_0_2BEC: Dc.l do_for        ;dofor
AL_0_2BF0: Dc.l do_next       ;donext
AL_0_2BF4: Dc.l syntaxerr     ; To
AL_0_2BF8: Dc.l syntaxerr     ; Step
AL_0_2BFC: Dc.l do_data       ;dodata
AL_0_2C00: Dc.l do_read       ;doread

; --
; -- the following should all be intercepted by getchar
AL_0_2C04: Dc.l syntaxerr     ; CNIF
AL_0_2C08: Dc.l syntaxerr     ; CSIF
AL_0_2C0C: Dc.l syntaxerr     ; CELSE
AL_0_2C10: Dc.l syntaxerr     ; CEND
AL_0_2C14: Dc.l do_cerr       ;docerr
AL_0_2C18: Dc.l do_then       ;dothen
AL_0_2C1C: Dc.l do_else       ;doelse
AL_0_2C20: Dc.l do_even4      ;doeven4
AL_0_2C24: Dc.l do_even8      ;doeven8

AL_0_2C28: Dc.l do_dc         ;dodc
AL_0_2C2C: Dc.l do_ds         ;dods
AL_0_2C30: Dc.l do_even       ;doeven
AL_0_2C34: Dc.l do_dcb        ;dodcb
AL_0_2C38: Dc.l do_setreg     ;dosetreg
AL_0_2C3C: Dc.l do_IncBin     ;doincbin
AL_0_2C40: Dc.l do_free       ;dofree
AL_0_2C44: Dc.l do_use        ;douse
AL_0_2C48: Dc.l do_Stop       ;dostop
AL_0_2C4C: Dc.l do_Cont       ;docont
AL_0_2C50: Dc.l syntaxerr     ;syntaxeer
AL_0_2C54: Dc.l do_SetInt     ;dosetint
AL_0_2C58: Dc.l do_ClrInt     ;doclrint
AL_0_2C5C: Dc.l do_MaxLen     ;domaxlen
AL_0_2C60: Dc.l do_DEFTYPE    ;dodeftype
AL_0_2C64: Dc.l do_BLITZ      ;doblitz
AL_0_2C68: Dc.l do_AMIGA      ;doamiga
AL_0_2C6C: Dc.l do_QAMIGA     ;doqamiga
AL_0_2C70: Dc.l do_VWait      ;dovwait
AL_0_2C74: Dc.l do_LibJsr     ;dolibjsr
AL_0_2C78: Dc.l do_TokeJsr    ;dotokejsr
AL_0_2C7C: Dc.l do_BLibJsr    ;doblibjsr
AL_0_2C80: Dc.l _extb         ;syntaxerr
AL_0_2C84: Dc.l syntaxerr     ;syntaxerr
AL_0_2C88: Dc.l do_SetErr     ;doseterr
AL_0_2C8C: Dc.l do_ClrErr     ;doclrerr
AL_0_2C90: Dc.l syntaxerr     ;syntaxerr
AL_0_2C94: Dc.l do_ErrFail    ;doerrfail
AL_0_2C98: Dc.l syntaxerr
AL_0_2C9C: Dc.l syntaxerr     ;mod
AL_0_2CA0: Dc.l syntaxerr     ;Pi
AL_0_2CA4: Dc.l do_Repeat     ;dorepeat
AL_0_2CA8: Dc.l do_Until      ;dountil
AL_0_2CAC: Dc.l do_PutReg     ;doputreg
AL_0_2CB0: Dc.l do_Pop        ;dopop
AL_0_2CB4: Dc.l do_INCDIR     ;doincdir
AL_0_2CB8: Dc.l AJL_0_D80A    ;mydoendif2
AL_0_2CBC: Dc.l do_Wend       ;dowend
AL_0_2CC0: Dc.l do_SysJsr     ;dosysjsr
AL_0_2CC4: Dc.l do_WBStartup  ;dowbstartup
AL_0_2CC8: Dc.l syntaxerr
AL_0_2CCC: Dc.l AJL_0_D16E    ;doongo
AL_0_2CD0: Dc.l syntaxerr
AL_0_2CD4: Dc.l do_Forever    ;doforever
AL_0_2CD8: Dc.l do_Restore    ;dorestore
AL_0_2CDC: Dc.l do_Exchange   ;doexchange
AL_0_2CE0: Dc.l do_USEPATH    ;dousepath
AL_0_2CE4: Dc.l do_CloseEd    ;doclosed
AL_0_2CE8: Dc.l do_NoCli      ;donocli
AL_0_2CEC: Dc.l syntaxerr
AL_0_2CF0: Dc.l syntaxerr
AL_0_2CF4: Dc.l syntaxerr
AL_0_2CF8: Dc.l syntaxerr
AL_0_2CFC: Dc.l syntaxerr
AL_0_2D00: Dc.l do_runerrson
AL_0_2D04: Dc.l do_runerrsoff
           Dc.l do_uselastpath
           Dc.l do_regload
           Dc.l do_regsave
           Dc.l do_Object
           Dc.l do_usepath2
           Dc.l do_LastRunErrsMode

.compilermenu_entries:
   Dc.b "COMPILER",0
   Dc.b "COMPILE AND RUN        ",0
   Dc.b "XRUN                    ",0
   Dc.b "MCREATE EXECUTABLE      ",0
   Dc.b "ECOMPILER OPTIONS       ",0
   Dc.b "OCREATE RESIDENT        ",0
   Dc.b ";VIEW NEWTYPES          ",0
   Dc.b "-CLI ARGUMENT           ",0
   Dc.b "=CALCULATOR             ",0
   Dc.b "HRELOAD ALL LIBS        ",0
   Dc.b $5C ;\
   Dc.b "LOAD DEBUG MODULE      ",0
   Dc.b ".",0
Even

menu_items:Dc.l menu_compile_run
AL_0_21F8: Dc.l menu_run
AL_0_21FC: Dc.l menu_createexecutable
AL_0_2200: Dc.l menu_compileroptions
AL_0_2204: Dc.l menu_createresidentfile
AL_0_2208: Dc.l menu_viewnewtypes
AL_0_220C: Dc.l menu_simcliarguments
AL_0_2210: Dc.l menu_calculator
AL_0_2214: Dc.l menu_reloadlibs
AL_0_2218: Dc.l menu_loaddebugmodule
           Dc.l $0
           Dc.l menu_newcreate
           Dc.l 0
           Dc.l toggledebug
Even4






; --
; -- configuration data for debugger
set_autorun:            Dc.b $00
autorun:                Dc.b $80,$01,$01,$00,$01

set_interruptcheck:     Dc.b $00
interruptcheck          Dc.b $80,$01,$01,$00,$01

set_assemblercheck:     Ds.b 1
assemblercheck:         Dc.b $00,$01,$01,$00,$01

set_overflowcheck:      Ds.b 1
overflowcheck:          Dc.b $00,$01,$01,$00,$01

default_obsolete:       Dc.b $00,$80,$01,$01,$00,$01
default_interruptcheck: Dc.b $00,$80,$01,$01,$00,$01
default_overflowcheck:  Dc.b $00,$80,$01,$01,$00,$01
Even4


AL_0_82E:               Ds.w 1
                        Dc.b $03,$F3,$00,$00 ;....
                        Ds.l 1
                        Dc.b $00,$01,$00,$00 ;....
                        Ds.w 3
AL_0_842:               Ds.w 1
                        Dc.b $01,$00,$00,$00 ;....
                        Dc.b $03,$E9 ;..
AL_0_84A:               Dc.l $100
AL_0_84E:               Dc.l $3EC
AL_0_852:               Ds.l 2
AL_0_85A:               Dc.l $3F2

AL_0_85E:               Dc.l tokens     ;data for ted


AL_0_862:               Dc.l compilermenu_entries
AL_0_866:               Dc.l read_xtrafile
AL_0_86A:               Dc.l write_xtrafile
AL_0_86E:               Dc.l call_menuentry
                        Ds.l 1
                        Dc.b ":",34,".;"
Even4

asmpnts:     Ds.l 63
             Ds.l 56

AL_0_28CE:   Dc.b $E1 ;.
             Dc.b $48
AL_0_28D0:   Dc.b "&m",0,0
             Dc.b $d6
             Dc.b $C0 ;.
             Dc.b "+K",0,0
AL_0_28DA:   Dc.b " <",0,0
             Dc.l $C0C1
AL_0_28E2:   Dc.b "+@"
AL_0_28E4:   Ds.w 1
AL_0_28E6:   Dc.b "4<",0,0
             Dc.b "6<",0,0
             Dc.b "J@J"
             Dc.b $80 ;.
AL_0_28F2:   Dc.b "NqNqNqNq"
AL_0_28FA:   Dc.b "NqNqNqNq"
AL_0_2902:   Dc.b "&m"
AL_0_2904:   Ds.w 1
AL_0_2906:   Dc.b "+K"
AL_0_2908:   Ds.w 1
AL_0_290A:   Dc.b "/",27
AL_0_290C:   Dc.b "RK"
             Dc.b $C1,$8B,$08,$80 ;....
             Dc.l $C18B
AL_0_2916:   Dc.b "RK",27,"[",0,0
AL_0_291C:   Dc.b "RK"
             Dc.b $19,$5B,$00 ;.[.
             Dc.b $00 ;.
AL_0_2922:   Dc.b "RK"
             Dc.b $14 ;.
             Dc.b $9B ;.
AL_0_2926:   Dc.b ";[",0,0
             Dc.b "4"
             Dc.b $9B ;.
             Dc.b "9[",0,0
AL_0_2930:   Dc.b "+[",0,0
             Dc.b "$"
             Dc.b $9B ;.
             Dc.b ")[",0,0
AL_0_293A:   Dc.b "PO"
AL_0_293C:   Dc.b "O"
             Dc.b $EF,$00 ;..
             Dc.b $A
AL_0_2940:   Dc.b "O"
             Dc.b $EF,$00 ;..
             Dc.b $C
AL_0_2944:   Dc.b "O"
             Dc.b $EF,$00 ;..
             Dc.b $0E ;.
AL_0_2948:   Dc.b "$o",0
             Dc.b $04,$30,$17 ;.0.
             Dc.b $D1 ;.
             Dc.b $12 ;.
AL_0_2950:   Dc.b "$o",0
             Dc.b $04,$30,$17 ;.0.
             Dc.b $D1 ;.
             Dc.b $52
AL_0_2958:   Dc.b "$o",0
             Dc.b 8," "
             Dc.b $17,$D1 ;..
             Dc.b $92 ;.
AL_0_2960:   Dc.b "$o",0
             Dc.b 8," "
             Dc.b $12,$22 ;."
             Dc.b $17,$4E,$AE ;.N.
             Dc.b $FF ;.
             Dc.b $BE,$24 ;.$
             Dc.b $80 ;.
AL_0_296E:   Dc.b "$o",0
             Dc.b $04,$10 ;..
             Dc.b $12 ;.
             Dc.b "2/",0
             Dc.b $02 ;.
             Dc.b "JWj",0,0
             Dc.b $04 ;.
             Dc.b $C1,$41,$B0 ;.A.
             Dc.b $01 ;.
AL_0_2982:   Dc.b "$o",0
             Dc.b $04,$30 ;.0
             Dc.b $12 ;.
             Dc.b "2/",0
             Dc.b $02 ;.
             Dc.b "JWj",0,0
             Dc.b $04 ;.
             Dc.b $C1,$41 ;.A
             Dc.b $B0 ;.
             Dc.b $41
AL_0_2996:   Dc.b "$o",0
             Dc.b 8," "
             Dc.b $12 ;.
             Dc.b 34,"/",0
             Dc.b $04 ;.
             Dc.b "JWj",0,0
             Dc.b $04 ;.
             Dc.b $C1,$41,$B0 ;.A.
             Dc.b $81 ;.
AL_0_29AA:   Dc.b "$o",0
             Dc.b 8," "
             Dc.b $12 ;.
             Dc.b 34,"/",0
             Dc.b $04 ;.
             Dc.b 8,"/",0
             Dc.b 7,0
             Dc.b $03,$67,$00 ;.g.
             Dc.b $00,$04 ;..
             Dc.b $C1 ;.
             Dc.b $41
AL_0_29C0:   Dc.b "N"
             Dc.b $AE,$FF ;..
             Dc.b $D6
AL_0_29C4:   Dc.b "H@"
AL_0_29C6:   Dc.b "/",10
AL_0_29C8:   Dc.b "E"
             Dc.b $ED ;.
AL_0_29CA:   Ds.w 1
AL_0_29CC:   Dc.b " ",10
AL_0_29CE:   Dc.b "E"
             Dc.b $EC ;.
AL_0_29D0:   Ds.w 1
AL_0_29D2:   Dc.b " "
             Dc.b $12 ;.
AL_0_29D4:   Dc.b "$m"
AL_0_29D6:   Ds.w 1
L_0_29D8:    Dc.b "XO"
AL_0_29DA:   Dc.b "?",0
AL_0_29DC:   Dc.b "/",0
AL_0_29DE:   Dc.b "><"
AL_0_29E0:   Ds.w 1
AL_0_29E2:   Dc.b "E"
             Dc.b $EF ;.
AL_0_29E4:   Ds.w 1
AL_0_29E6:   Dc.b "O"
             Dc.b $EF ;.
AL_0_29E8:   Ds.w 1
AL_0_29EA:   Dc.b "/",0
AL_0_29EC:   Dc.b "/"
             Dc.b $0B ;.
AL_0_29EE:   Dc.b " /"
AL_0_29F0:   Dc.b $00 ;.
             Dc.b $06 ;.
             Dc.b "?o",0
             Dc.b $04,$00 ;..
             Dc.b 8,"."
             Dc.b $9F ;.
AL_0_29FA:   Dc.b " /"
AL_0_29FC:   Dc.b $00 ;.
             Dc.b $04,$2E ;..
             Dc.b $9F ;.
AL_0_2A00:   Dc.b "&@"
AL_0_2A02:   Dc.b " -"
AL_0_2A04:   Dc.l $200B
AL_0_2A08:   Dc.b "/",0
AL_0_2A0A:   Dc.b " "
             Dc.b $1F ;.
AL_0_2A0C:   Dc.b "/W"
AL_0_2A0E:   Ds.w 1
AL_0_2A10:   Dc.b "O"
             Dc.b $EF ;.
AL_0_2A12:   Ds.w 1
AL_0_2A14:   Dc.b "PO"
AL_0_2A16:   Dc.b "."
             Dc.b $9F ;.
AL_0_2A18:   Dc.b "&@"
AL_0_2A1A:   Dc.b "E"
             Dc.b $EC ;.
AL_0_2A1C:   Ds.w 1
AL_0_2A1E:   Dc.b "/,"
AL_0_2A20:   Ds.w 1
AL_0_2A22:   Dc.b "XJ/"
             Dc.b $0B ;.
             Dc.b "+K",0,0
             Dc.b "&_+K",0,0
             Dc.b $CB ;.
             Dc.b $4C
linksize:    Dc.b "NT"
linksize2:   Ds.w 1
AL_0_2A36:   Dc.b "N",92
             Dc.b "/",10,"$_"
AL_0_2A3C:   Dc.b "N"
             Dc.b $F9,$00,$00 ;...
             Ds.w 1
AL_0_2A42:   Dc.b "N"
             Dc.b $B9,$00,$00 ;...
             Ds.w 1
AL_0_2A48:   Dc.b 8,"9",0
             Dc.b $06,$00,$BF ;...
             Dc.b $E0 ;.
             Dc.b $01,$66,$00 ;.f.
             Dc.b $FF,$F6 ;..
AL_0_2A54:   Dc.b " ",0
AL_0_2A56:   Dc.b ",m"
AL_0_2A58:   Ds.w 1
AL_0_2A5A:   Dc.b "N"
             Dc.b $AE ;.
AL_0_2A5C:   Ds.w 1
AL_0_2A5E:   Dc.b " -",0,0
AL_0_2A62:   Dc.b " m",0,0
             Dc.b "&|",0,0
             Dc.l $3F1B
AL_0_2A6E:   Dc.b " "
             Dc.b $12 ;.
AL_0_2A70:   Dc.b " -",0,0
AL_0_2A74:   Dc.b "p",0
             Dc.b "/",0
             Dc.b "J"
             Dc.b $92,$67,$00 ;.g.
             Dc.b $00,$0E ;..
             Dc.b " RYH."
             Dc.b $98 ;.
AL_0_2A84:   Dc.b "N"
             Dc.b $B9,$00,$00 ;...
             Ds.w 1
AL_0_2A8A:   Dc.b " "
             Dc.b $1F ;.
AL_0_2A8C:   Dc.b $D1 ;.
             Dc.b $97 ;.
AL_0_2A8E:   Dc.b "/"
             Dc.b $18 ;.
AL_0_2A90:   Dc.b "E"
             Dc.b $ED ;.
AL_0_2A92:   Ds.w 1
AL_0_2A94:   Dc.b "/",10,"$W"
AL_0_2A98:   Dc.b "$_"
AL_0_2A9A:   Dc.b "$o",0
             Dc.b $04,$2E ;..
             Dc.b $9F ;.
AL_0_2AA0:   Dc.b "/-"
AL_0_2AA2:   Dc.l $2B4B
AL_0_2AA6:   Ds.w 1
AL_0_2AA8:   Dc.b "+_"
AL_0_2AAA:   Ds.w 1
AL_0_2AAC:   Dc.b "&m"
AL_0_2AAE:   Ds.w 1
AL_0_2AB0:   Dc.b " |",0,0
             Ds.w 1
AL_0_2AB6:   Dc.b "$|",0,0
             Ds.w 1
AL_0_2ABC:   Dc.b "8<"
AL_0_2ABE:   Ds.w 1
             Dc.b "4<",0,0
             Dc.b "6<",0,0
             Dc.b " <",0,0
             Dc.b $00 ;.
             Dc.b $04 ;.
             Dc.b "+@",0,0
             Dc.b $C0 ;.
             Dc.b $C1 ;.
             Dc.b "+@",0,0
AL_0_2AD8:   Dc.b "$R"
AL_0_2ADA:   Dc.b $D5,$CA,$D5 ;...
             Dc.b $CA ;.
             Dc.b ",x",0
             Dc.b $04 ;.
AL_0_2AE2:   Dc.b "$m"
AL_0_2AE4:   Ds.w 1
AL_0_2AE6:   Dc.b "$j"
AL_0_2AE8:   Ds.w 1
AL_0_2AEA:   Dc.b "RJ"
AL_0_2AEC:   Dc.b "E"
             Dc.b $EA ;.
AL_0_2AEE:   Ds.w 1
AL_0_2AF0:   Dc.b $D4 ;.
             Dc.b $C0 ;.
             Dc.b "ram:test",0,0
             Ds.w 3

_mathffpbase: Ds.l 1
regnum:       Ds.w 1
AL_0_2B08:    Ds.b 1
AL_0_2B09:    Ds.b 1
AL_0_2B0A:    Ds.l 1
lastsourcepos:Ds.l 1
lastchar:     Ds.w 1
AL_0_2B14:    Ds.l 1
AL_0_2B18:    Ds.l 1
AL_0_2B1C:    Ds.l 1
AL_0_2B20:    Ds.w 1
AL_0_2B22:    Ds.w 1
sourceline:   Ds.l 1
varbase:      Ds.l 1
AL_0_2B2C:    Ds.l 1
firstlocal:   Ds.l 1
firstglob:    Ds.l 1
globalvarpointer:   Ds.b 1
AL_0_2B39:          Ds.b 1
AL_0_2B3A:          Ds.w 1
AL_0_2B3C:          Ds.l 1
AL_0_2B40:          Ds.w 1
AL_0_2B42:          Ds.w 1
firstiff:           Ds.l 1
ptr_seg_ped:        Ds.l 1
str_pedfile:        Ds.b 256
str_mathffpname:    Dc.b "mathffp.library",0
str_libfilename:    Ds.b 256
str_path_userlibs:  Ds.b 256
str_defaultdbug:    Ds.b 256
                    Even
ptr_seg_debugger:   Ds.l 1
str_blitz3assign:   Ds.b 256
                    Even
str_path_acidlibs:  Ds.b 256
size_acidlibs:      Ds.l 1
str_path_deflibs:   Ds.b 256
size_deflibs:       Ds.l 1
str_tempfilename:   Ds.b 256
Even
str_temp_debugmodulename:  Ds.s 256
ptr_temp_debugmodule:  Ds.l 1
Even








.icongfx_data:
  Dc.b $E3,$10,$00,$01 ;....    ;icondata
  Ds.l 1
  Dc.b $00,$19,$00,$11 ;....
  Dc.b $00,$2E,$00,$18 ;....
  Dc.b $00,$04,$00,$03 ;....
  Dc.b $00,$01 ;..
  Dc.b $00 ;.
  Dc.b 34,"sh",0,0
  Ds.l 5
  Dc.b $03,$22 ;."
  Dc.b $00 ;.
  Dc.b "!<(",0
  Dc.b 34,"n"
  Dc.b $C0,$00,$00 ;...
  Dc.b $00,$12,$00,$00 ;....
  Dc.b $00,$0E,$00,$00 ;....
  Ds.w 7
  Dc.b $00,$2E,$00,$17 ;....
  Dc.b $00,$02,$00,$01 ;....
  Dc.b $8E,$80,$03,$00 ;....
  Ds.l 1
  Dc.b $FF,$FF,$FF,$FF ;....
  Dc.b $FF,$FC,$80,$00 ;....
  Ds.l 1
  Dc.b $80,$00 ;..
  Dc.b $00,$3F ;.?
  Dc.b $BB,$40,$80,$1F ;.@..
  Dc.b $C0,$00,$00,$00 ;....
  Dc.b $80,$3F,$C0,$0F ;.?..
  Dc.b $BB,$40,$80,$1F ;.@..
  Dc.b $C0,$00,$00,$00 ;....
  Dc.b $8E,$00,$F8,$00 ;....
  Ds.w 1
  Dc.b $8F,$01,$FF ;...
  Dc.b $00 ;.
  Dc.b ";@"
  Dc.b $81,$E3,$F7,$C0 ;....
  Ds.w 1
  Dc.b $80,$7F ;..
  Dc.b $F8 ;.
  Dc.b "p;@"
  Dc.b $80 ;.
  Dc.b $0F,$7C,$E0 ;.|.
  Ds.w 1
  Dc.b $80,$00,$FD,$80 ;....
  Ds.w 1
  Dc.b $80,$01,$F6,$00 ;....
  Dc.b $FB,$40,$80,$03 ;.@..
  Dc.b $EF,$00,$00,$00 ;....
  Dc.b $80,$07,$87 ;...
  Dc.b $80 ;.
  Dc.b ";@"
  Dc.b $80,$0F,$01,$C0 ;....
  Ds.w 1
  Dc.b $80,$03 ;..
  Dc.b $F0,$70 ;.p
  Dc.b $1D,$40,$80,$00 ;.@..
  Dc.b $18,$1C,$00,$00 ;....
  Dc.b $80,$00,$10,$06 ;....
  Dc.b $03,$40,$80,$00 ;.@..
  Dc.b " "
  Dc.b $1F,$00,$00 ;...
  Dc.b $80,$00,$00,$00 ;....
  Dc.b $01,$40,$80,$00 ;.@..
  Ds.l 1
  Dc.b $80,$00,$00,$00 ;....
  Ds.l 3
  Dc.b $00,$04 ;..
  Dc.b $00,$3F,$FC,$01 ;.?..
  Dc.b $BB,$44 ;.D
  Dc.b $00,$60,$FE,$00 ;.`..
  Dc.b $00,$04,$00,$CF ;....
  Dc.b $FF,$01 ;..
  Dc.b $BB,$44,$1F,$EF ;.D..
  Dc.b $FF,$00,$00 ;...
  Dc.b $04,$33,$FF ;.3.
  Dc.b $FF,$E0,$00 ;...
  Dc.b $04,$37,$FE ;.7.
  Dc.b $7F,$FC ;..
  Dc.b 27,"D"
  Dc.b $0F,$9C,$FF,$FF ;....
  Dc.b $00,$04,$03,$E3 ;....
  Dc.b $FF,$FF ;..
  Dc.b $DB,$44,$00,$7F ;.D..
  Dc.b $BF,$FF,$80,$04 ;....
  Dc.b $00 ;.
  Dc.b $0F,$3F,$FE ;.?.
  Dc.b $00,$04,$00,$06 ;....
  Dc.b $7F,$F8 ;..
  Dc.b 27,"D",0
  Dc.b 12
  Dc.b $F7,$FC,$00,$04 ;....
  Dc.b $00,$19,$F9,$FE ;....
  Dc.b 27,"D",0
  Dc.b "3"
  Dc.b $FE,$7F,$00,$04 ;....
  Dc.b $00,$0F,$FF,$BF ;....
  Dc.b $CD,$44,$00,$03 ;.D..
  Dc.b $EF,$EF,$F0,$04 ;....
  Ds.w 1
  Dc.b $7F,$DF ;..
  Dc.b $FB,$44,$00,$00 ;.D..
  Dc.b $FF,$A7,$FC,$04 ;....
  Ds.w 1
  Dc.b "~?"
  Dc.b $FD,$44,$00,$00 ;.D..
  Ds.w 1
  Dc.b $00,$04,$7F,$FF ;....
  Dc.b $FF,$FF,$FF,$FC ;....
  Ds.w 1
  Dc.b $00,$01,$00,$00 ;....
  Ds.w 1
  Dc.b $04 ;.
str_infoextention2:  Dc.b ".info",0,0
AL_0_7918:  Dc.l $3F0
Even


exelock         Ds.l 1
wzgui           IncBin "compiler.wizard"
includesourceline Dc.l 0
linenum         Ds.l 1
globallinecount Ds.l 1
myversion       Dc.b !vers,0
calc_option     Dc.l 1
versioninformation Dc.l $00
number_of_builds   Dc.l $00


BSS
debugnest       Ds.w 1
instringf       Ds.l 1
funcscanon      Ds.l 1
storedebugmode  Ds.b 20
firsttimepref   Ds.l 1
funcparloop     Ds.w 1
nostringopt     Ds.w 1
path2:          Ds.l 32
typebase        Dc.l 0
doublepeek      Dc.w 0
lastoffset      Dc.l 0
firsttime       Dc.w 0
lastdestpointer Dc.l 0
prevwritedat    Dc.l 0
lastsourceline  Dc.l 0
lastwritedat    Dc.l 0
makeexec        Dc.w 0
sharebase       Ds.l 1
tempa7          Ds.l 1
incnif          Ds.w 1
tempstore       Ds.l 1
result          Ds.l 1
automode        Ds.w 1
stackcorrect    Ds.w 1
formode         Ds.w 1
limitregs       Ds.l 1
onestep         Ds.w 1
reqmode         Ds.l 1
inctab          Ds.l 40
funcoptimize    Ds.w 1
includeline     Ds.l 1
morememadd      Ds.l 1
objectcount     Ds.w 1
savefuncspace   Ds.l 1
lasttrap1       Ds.l 1
currentfunccall Ds.l 1
skipfunc        Ds.b 1
resdisable      Ds.b 1
skiptoggle      Ds.b 1
developobject   Ds.b 1
iniffcommand    Ds.w 1
startoffsetmore Ds.w 1
olddebugmode    Ds.w 1
fpucodeglobal   Ds.l 1
fpucodelocal    Ds.l 1
maxregs         Ds.l 1
fpucode         Ds.l 1
firstmline      Ds.w 1
regtable        Ds.l 16
exdebug         Ds.w 1
a2offset2       Ds.w 1
parnumtemp      Ds.l 1
doimmediate     Ds.b 1
notypecheck     Ds.b 1
vartype         Ds.w 1
peekaddrsize    Ds.b 1
declare2        Ds.b 1
parameternum    Ds.w 1
lasttoken       Ds.l 1
newvariable     Ds.w 1
declare         Ds.b 1
typecheck       Ds.b 1
nowdeclare      Ds.b 1
dimkeep         Ds.b 1

firstiffstore   Ds.l 1
destpointer2    Ds.l 1
stackaddr       Ds.l 1
allowtab        Ds.b 260
templine        Ds.b 256
thenmode        Ds.w 1
temp            Ds.w 1
tempregnum      Ds.w 1
;quickpeek   Ds.w 1
numlines2       Ds.l 1
numlines        Ds.l 1
exmac           Ds.w 1
returncode      Ds.w 1
fp0iff      Ds.l 1
fp0addr     Ds.l 1
fp0mode     Ds.w 1
fp0var      Ds.w 1
fastfunc    Ds.w 1
retmode     Ds.w 1
parnum      Ds.w 1
regmask     Ds.w 1
regnumfunc  Ds.w 1
libmode     Ds.w 1
oldline     Ds.l 1
sourceline3 Ds.l 1
debugstore  Ds.b 200
deststore   Ds.l 1
;_Screen     Ds.l 1
loada       Ds.l 1
;_intuibase  Ds.l 1
currtype    Ds.l 1
arrayoffset Ds.l 1
lastlabel   Ds.l 1
curtemplabel Ds.l 1
sourceline2  Ds.l 1
chartab     Ds.b 256
tempspace   Ds.b 120
instrtab    Ds.l 65538*2
labelhash   Ds.l 8192      ;-bssstore clear every compile pass
replacedat  Ds.w 65538
variablehash Ds.l 8192
newinitaddr Ds.l 1
realbssend  Ds.l 1
saved0      Ds.b 1
lastpath    Ds.b 128
lastpath2   Ds.b 128
fpustackbase Ds.w 100
bssstore
trap15temp  Ds.l 1
trap15temp2 Ds.l 1
templibend  Ds.l 1
tempdata1start Ds.l 1
pad2        Ds.b 1
stacktrack  Ds.l 1
pad         Ds.l 1
includetemp Ds.b 256
includetemp2 Ds.b 256*10
funccall    Ds.w 1
;progressrp  Ds.l 1
;_gfxbase     Ds.l 1
ptr_resfile         Ds.l 1
button_bin_flags:   Ds.w 1
button_dec_flags:   Ds.w 1
ped_startup_addr:   Ds.l 1
start_without_libs: Ds.b 1
skip_bytes:         Ds.b 1
