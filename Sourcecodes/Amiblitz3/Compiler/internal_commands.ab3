; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "commands"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 3.3.1
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 65535
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 25
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 25
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 25
; /XTRA
; ////////////////////////////////////////////////////////////////////////////////////////
; / list of all implemented - native tokens of amiblitz                                  /
; ////////////////////////////////////////////////////////////////////////////////////////
; this list includes all tokens for internal blitz libraries system1lib and dhandlerlib
; token    1 - 127 : systemlib
; token  128 - 217 : dhandlerlib

; make sure, if you change a instruction
; name that it is aligned even
;
Even
.system1lib:    Dc.l tok2               ;make sure if you change a instruction
                                        ;name that it is alligned even
                Dc.b $00,$01            ; Tokennumber
                Dc.b "NEWTYPE",0        ; Tokenname
                Dc.b "<.Typename>",0    ; helptext ?
                Even


tok2:           Dc.l tok3
                Dc.b $00,$02
                Dc.b "End",0
                Dc.b "[If|While|Select|Statement|Function|SetInt|SetErr|NEWTYPE|MACRO|d0|noa7]",0
                Even


tok3:           Dc.l tok4
                Dc.b $00,$03
                Dc.b "Let",0
                Dc.b "<Var = Operator Expression>",0
                Even


tok4:           Dc.l tok5
                Dc.b $00,$04
                Dc.b "Dim",0
                Dc.b "<Arrayname> [KEEP]|[List] (Dimension1[,Dimension2..])  # KEEP : resize without loosing datas",0
                Even


tok5:           Dc.l tok6
                Dc.b $00,$05
                Dc.b "Goto",0
                Dc.b "<Program Label>",0
                Even


tok6:           Dc.l tok7
                Dc.b $00,$06
                Dc.b "Gosub",0
                Dc.b "<Program Label>",0
                Even


tok7:           Dc.l tok8
                Dc.b $00,$07
                Dc.b "Return",0
                Dc.b 0
                Even


tok8:           Dc.l tok9
                Dc.b $00,$08
                Dc.b "Statement",0
                Dc.b "[FAST] Procedurename{[Parameter1[,Parameter2...]]}",0
                Even


tok9:           Dc.l tok10
                Dc.b $00,$09
                Dc.b "Function",0
                Dc.b "[.Type] [FAST] Procedurename{[Parameter1[,Parameter2...]]}",0
                Even


tok10:          Dc.l tok11
                Dc.b $00,$0A
                Dc.b "MouseWait",0
                Dc.b 0
                Even


tok11:          Dc.l tok12
                Dc.b $00,$0B
                Dc.b "If",0
                Dc.b "<Expression> [Then...]",0
                Even


tok12:          Dc.l tok13
                Dc.b $00,$0C
                Dc.b "While",0
                Dc.b "<Expression>",0
                Even


tok13:          Dc.l tok14
                Dc.b $00,$0D
                Dc.b "Macro",0
                Dc.b "<Macroname>",0
                Even


tok14:          Dc.l tok15
                Dc.b $00,$0E
                Dc.b "Select",0
                Dc.b "<Expression>",0
                Even


tok15:          Dc.l tok16
                Dc.b $00,$0F
                Dc.b "Case",0
                Dc.b "<Expression>",0
                Even


tok16:          Dc.l tok17
                Dc.b $00,$10
                Dc.b "Default",0
                Dc.b 0
                Even


tok17:          Dc.l tok18
                Dc.b $00,$11
                Dc.b "AsmExit",0
                Dc.b 0
                Even


tok18:          Dc.l tok19
                Dc.b $00,$12
                Dc.b "XINCLUDE",0
                Dc.b "<Filename>",0
                Even


tok19:          Dc.l tok20
                Dc.b $00,$13
                Dc.b "INCLUDE",0
                Dc.b "<Filename>",0
                Even


tok20:          Dc.l tok21
                Dc.b $00,$14
                Dc.b "Syntax",0
                Dc.b " <mode>   # bit0(1) vars need declaration, bit1(2) a.l=x/a$=x =declare, bit2(4) typecheck +=force",0
                Even


tok21:          Dc.l tok22
                Dc.b $00,$15
                Dc.b "SHARED",0
                Dc.b "<Var[,Var...]>",0
                Even


tok22:          Dc.l tok23
                Dc.b $00,$16
                Dc.b "For",0
                Dc.b "<Var = Expression1 To Expression2 [Step Expression3]>",0
                Even


tok23:          Dc.l tok24
                Dc.b $00,$17
                Dc.b "Next",0
                Dc.b "[Var[,Var...]]",0
                Even


tok24:          Dc.l tok25
                Dc.b $00,$18
                Dc.b "To",0
                Dc.b "<Expression2 [Step Expression3]>",0
                Even


tok25:          Dc.l tok26
                Dc.b $00,$19
                Dc.b "Step",0
                Dc.b "<increment>",0
                Even


tok26:          Dc.l tok27
                Dc.b $00,$1A
                Dc.b "Data",0
                Dc.b "[.Type] Item[,Item...]",0
                Even


tok27:          Dc.l tok28
                Dc.b $00,$1B
                Dc.b "Read",0
                Dc.b "<Var[,Var...]>",0
                Even


tok28:          Dc.l tok29
                Dc.b $00,$1C
                Dc.b "CNIF",0
                Dc.b "<Constant Comparison Constant>",0
                Even


tok29:          Dc.l tok30
                Dc.b $00,$1D
                Dc.b "CSIF",0
                Dc.b "<",34,"String",34," Comparison ",34,"String",34,">",0
                Even


tok30:          Dc.l tok31
                Dc.b $00,$1E
                Dc.b "CELSE",0
                Dc.b 0
                Even


tok31:          Dc.l tok32
                Dc.b $00,$1F
                Dc.b "CEND",0
                Dc.b 0
                Even


tok32:          Dc.l tok33
                Dc.b $00,$20
                Dc.b "CERR",0
                Dc.b "Errormessage",0
                Even


tok33:          Dc.l tok34
                Dc.b $00,$21
                Dc.b "Then",0
                Dc.b "<statement...>",0
                Even


tok34:          Dc.l tok35
                Dc.b $00,$22
                Dc.b "Else",0
                Dc.b "[Statement...]",0
                Even
                ;
                ;below should not activate runtime error checking
                ;

tok35:          Dc.l tok36
                Dc.b $00,$23
                Dc.b "Even4",0
                Dc.b "  # align to 4 byte boundary",0
                Even


tok36:          Dc.l tok37
                Dc.b $00,$24
                Dc.b "Even8",0
                Dc.b "  # align to 8 byte boundary",0
                Even


tok37:          Dc.l tok38
                Dc.b $00,$25
                Dc.b "Dc",0
                Dc.b "[.Size] Data[,Data...]",0
                Even


tok38:          Dc.l tok39
                Dc.b $00,$26
                Dc.b "Ds",0
                Dc.b "[.Size] Length",0
                Even


tok39:          Dc.l tok40
                Dc.b $00,$27
                Dc.b "Even",0
                Dc.b 0
                Even


tok40:          Dc.l tok41
                Dc.b $00,$28
                Dc.b "Dcb",0
                Dc.b "[.Size] Repeats,Data",0
                Even


tok41:          Dc.l tok42
                Dc.b $00,$29
                Dc.b "GetReg",0
                Dc.b "<68000 Reg>,<Expression>",0
                Even


tok42:          Dc.l tok43
                Dc.b $00,$2A
                Dc.b "IncBin",0
                Dc.b "<Filename>",0
                Even
                ;
                ;end of disablables
                ;

tok43:          Dc.l tok44
                Dc.b $00,$2B
                Dc.b "Free",0
                Dc.b "<Objectname> <Object#>",0
                Even


tok44:          Dc.l tok45
                Dc.b $00,$2C
                Dc.b "Use",0
                Dc.b "<Objectname> <Object#>",0
                Even


tok45:          Dc.l tok46
                Dc.b $00,$2D
                Dc.b "Stop",0
                Dc.b 0
                Even


tok46:          Dc.l tok47
                Dc.b $00,$2E
                Dc.b "Cont",0
                Dc.b "[N]",0
                Even


tok47:          Dc.l tok48
                Dc.b $00,$2F
                Dc.b "SizeOf",0
                Dc.b "<.Typename[,Entrypath]>",0
                Even


tok48:          Dc.l tok49
                Dc.b $00,$30
                Dc.b "SetInt",0
                Dc.b "Type",0
                Even


tok49:          Dc.l tok50
                Dc.b $00,$31
                Dc.b "ClrInt",0
                Dc.b "Type",0
                Even


tok50:          Dc.l tok51
                Dc.b $00,$32
                Dc.b "MaxLen",0
                Dc.b "<StringVar> = <Expression>",0
                Even


tok51:          Dc.l tok52
                Dc.b $00,$33
                Dc.b "DEFTYPE",0
                Dc.b ".Typename [Var[,Var...]]",0
                Even


tok52:          Dc.l tok53
                Dc.b $00,$34
                Dc.b "BLITZ",0
                Dc.b 0
                Even


tok53:          Dc.l tok54
                Dc.b $00,$35
                Dc.b "AMIGA",0
                Dc.b 0
                Even


tok54:          Dc.l tok55
                Dc.b $00,$36
                Dc.b "QAMIGA",0
                Dc.b 0
                Even


tok55:          Dc.l tok56
                Dc.b $00,$37
                Dc.b "VWait",0
                Dc.b "[Frames]",0
                Even


tok56:          Dc.l tok57
                Dc.b $00,$38
                Dc.b "ALibJsr",0
                Dc.b "Token[,Form]",0
                Even


tok57:          Dc.l tok58
                Dc.b $00,$39
                Dc.b "TokeJsr",0
                Dc.b "Token[,Form]",0
                Even


tok58:          Dc.l tok59
                Dc.b $00,$3A
                Dc.b "BLibJsr",0
                Dc.b "Token[,Form]",0
                Even


tok59:          Dc.l opabcd
                Dc.b $00,$3B
                Dc.b "EXTB",0
                Dc.b 0
                Even


; begin asmmac include from the original sourcecode

; begin of the original macro definition form asmmac for documentation
;;tnum   set 0
;    opt m+
;    ;
;a   macro
;    dc.l    n\@
;    dc  tnum
;tnum    set tnum+1
;    dc.b    '\1',0,0
;    even
;    dc  \2
;    ;
;    dc  \3,\4
;    dc.b    (\5<<4)+\6,(\7<<4)+\8
;    dc  (\9<<12)+\a
;    dc.l    \b
;    dc  \c
;n\@ ;
;    endm
;
;c   macro
;    dc.l    toktnum
;    dc  tnum
;tnum    set tnum+1
;    dc.b    'EndAsm',0,0
;    even
;    endm
;
;ndn         equ $fffe
;nan         equ $fffd
;nian        equ $fffb
;nanp        equ $fff7
;npan        equ $ffef
;ndan        equ $ffdf
;ndanxi      equ $ffbf
;nabsw       equ $ff7f
;nabsl       equ $feff
;ndpc        equ $fdff
;ndpcxi      equ $fbff
;nimm        equ $f7ff
;nccr        equ $efff
;nsr         equ $dfff
;nusp        equ $bfff
;nmem        equ $7fff
;nall        equ 0
;
;dn          equ 1
;an          equ 2
;ian         equ 4
;anp         equ 8
;pan         equ 16
;dan         equ 32
;danxi       equ 64
;absw        equ 128
;absl        equ 256
;dpc         equ 512
;dpcxi       equ 1024
;imm         equ 2048
;ccr         equ 4096
;sr          equ 8192
;usp         equ 16384
;mem         equ 32768
;all         equ $fff
;
;byte        equ $ff0
;word        equ $f1f
;long        equ $2ff
;sall        equ $210
;nosz        equ $fff
;    ;
;byteword    equ $f10
;wordlong    equ $10f
; end of of the original macro definition

    ;the last parameter is a 'do it yourself' subroutine
    ;that allows you to do your own error chking for
    ;silly opmodes!
    ;
    ;size/ea's have already been created
    ;
    ;d1=opcode,d2=srcreg,d3=srcea,d4=destreg,d5=destea
    ;
    ;return ne if no can do!

opabcd:         Dc.l opadd
                Dc.b $00,$3C
                Dc.b "ABCD",0
                Dc.b 0
                Even

                Dc.w $C100
                Dc.w $0011,$0011
                Dc.b $90,$00
                Dc.w $FFF0
                Dc.l _abcdchk
                Dc.w $0000
                Even

    ;add <ea>,d0
opadd:          Dc.l opaddi
                Dc.b $00,$3D
                Dc.b "ADD",0
                Dc.b 0
                Even

                Dc.w $D000
                Dc.w $0FFF,$01FD
                Dc.b $03,$9F
                Dc.w $6210
                Dc.l _addchk
                Dc.w $8003
                Even


opaddi:         Dc.l opadda
                Dc.b $00,$3E
                Dc.b "ADDI",0
                Dc.b 0
                Even

                Dc.w $0600
                Dc.w $0800,$01FD
                Dc.b $FF,$03
                Dc.w $6210
                Dc.l $00000000
                Dc.w $0000
                Even


opadda:         Dc.l opaddq
                Dc.b $00,$3F
                Dc.b "ADDA",0
                Dc.b 0
                Even

                Dc.w $D0C0
                Dc.w $0FFF,$0002
                Dc.b $03,$9F
                Dc.w $810F
                Dc.l $00000000
                Dc.w $0000
                Even


opaddq:         Dc.l opaddx
                Dc.b $00,$40
                Dc.b "ADDQ",0
                Dc.b 0
                Even

                Dc.w $5000
                Dc.w $0800,$01FF
                Dc.b $FF,$03
                Dc.w $6210
                Dc.l $00000000
                Dc.w $0001
                Even


opaddx:         Dc.l opand
                Dc.b $00,$41
                Dc.b "ADDX",0
                Dc.b 0
                Even

                Dc.w $D100
                Dc.w $0011,$0011
                Dc.b $0F,$9F
                Dc.w $6210
                Dc.l _abcdchk
                Dc.w $0000
                Even


opand:          Dc.l opandi
                Dc.b $00,$42
                Dc.b "AND",0
                Dc.b 0
                Even

                Dc.w $C000
                Dc.w $0FFD,$01FD
                Dc.b $03,$9F
                Dc.w $6210
                Dc.l _addchk
                Dc.w $0000
                Even


opandi:         Dc.l opasl
                Dc.b $00,$43
                Dc.b "ANDI",0
                Dc.b 0
                Even

                Dc.w $0200
                Dc.w $0800,$39FD
                Dc.b $FF,$03
                Dc.w $6210
                Dc.l _andichk
                Dc.w $0000
                Even


opasl:          Dc.l opasr
                Dc.b $00,$44
                Dc.b "ASL",0
                Dc.b 0
                Even

                Dc.w $E100
                Dc.w $09FD,$0001
                Dc.b $FF,$FF
                Dc.w $F210
                Dc.l _aslchk
                Dc.w $0001
                Even


opasr:          Dc.l opbcc
                Dc.b $00,$45
                Dc.b "ASR",0
                Dc.b 0
                Even

                Dc.w $E000
                Dc.w $09FD,$0001
                Dc.b $FF,$FF
                Dc.w $F210
                Dc.l _aslchk
                Dc.w $0001
                Even


opbcc:          Dc.l opbcs
                Dc.b $00,$46
                Dc.b "BCC",0
                Dc.b 0
                Even

                Dc.w $6400
                Dc.w $0200,$0000
                Dc.b $FF,$FF
                Dc.w $F000
                Dc.l $00000000
                Dc.w $0002
                Even


opbcs:          Dc.l opbeq
                Dc.b $00,$47
                Dc.b "BCS",0
                Dc.b 0
                Even

                Dc.w $6500
                Dc.w $0200,$0000
                Dc.b $FF,$FF
                Dc.w $F000
                Dc.l $00000000
                Dc.w $0002
                Even


opbeq:          Dc.l opbqe
                Dc.b $00,$48
                Dc.b "BEQ",0
                Dc.b 0
                Even

                Dc.w $6700
                Dc.w $0200,$0000
                Dc.b $FF,$FF
                Dc.w $F000
                Dc.l $00000000
                Dc.w $0002
                Even


opbqe:          Dc.l opbgt
                Dc.b $00,$49
                Dc.b "BGE",0
                Dc.b 0
                Even

                Dc.w $6C00
                Dc.w $0200,$0000
                Dc.b $FF,$FF
                Dc.w $F000
                Dc.l $00000000
                Dc.w $0002
                Even


opbgt:          Dc.l opbhi
                Dc.b $00,$4A
                Dc.b "BGT",0
                Dc.b 0
                Even

                Dc.w $6E00
                Dc.w $0200,$0000
                Dc.b $FF,$FF
                Dc.w $F000
                Dc.l $00000000
                Dc.w $0002
                Even


opbhi:          Dc.l opble
                Dc.b $00,$4B
                Dc.b "BHI",0
                Dc.b 0
                Even

                Dc.w $6200
                Dc.w $0200,$0000
                Dc.b $FF,$FF
                Dc.w $F000
                Dc.l $00000000
                Dc.w $0002
                Even


opble:          Dc.l opbls
                Dc.b $00,$4C
                Dc.b "BLE",0
                Dc.b 0
                Even

                Dc.w $6F00
                Dc.w $0200,$0000
                Dc.b $FF,$FF
                Dc.w $F000
                Dc.l $00000000
                Dc.w $0002
                Even


opbls:          Dc.l opblt
                Dc.b $00,$4D
                Dc.b "BLS",0
                Dc.b 0
                Even

                Dc.w $6300
                Dc.w $0200,$0000
                Dc.b $FF,$FF
                Dc.w $F000
                Dc.l $00000000
                Dc.w $0002
                Even


opblt:          Dc.l opbmi
                Dc.b $00,$4E
                Dc.b "BLT",0
                Dc.b 0
                Even

                Dc.w $6D00
                Dc.w $0200,$0000
                Dc.b $FF,$FF
                Dc.w $F000
                Dc.l $00000000
                Dc.w $0002
                Even


opbmi:          Dc.l opbne
                Dc.b $00,$4F
                Dc.b "BMI",0
                Dc.b 0
                Even

                Dc.w $6B00
                Dc.w $0200,$0000
                Dc.b $FF,$FF
                Dc.w $F000
                Dc.l $00000000
                Dc.w $0002
                Even


opbne:          Dc.l opbpl
                Dc.b $00,$50
                Dc.b "BNE",0
                Dc.b 0
                Even

                Dc.w $6600
                Dc.w $0200,$0000
                Dc.b $FF,$FF
                Dc.w $F000
                Dc.l $00000000
                Dc.w $0002
                Even


opbpl:          Dc.l opbvc
                Dc.b $00,$51
                Dc.b "BPL",0
                Dc.b 0
                Even

                Dc.w $6A00
                Dc.w $0200,$0000
                Dc.b $FF,$FF
                Dc.w $F000
                Dc.l $00000000
                Dc.w $0002
                Even


opbvc:          Dc.l opbvs
                Dc.b $00,$52
                Dc.b "BVC",0
                Dc.b 0
                Even

                Dc.w $6800
                Dc.w $0200,$0000
                Dc.b $FF,$FF
                Dc.w $F000
                Dc.l $00000000
                Dc.w $0002
                Even


opbvs:          Dc.l opbchg
                Dc.b $00,$53
                Dc.b "BVS",0
                Dc.b 0
                Even

                Dc.w $6900
                Dc.w $0200,$0000
                Dc.b $FF,$FF
                Dc.w $F000
                Dc.l $00000000
                Dc.w $0002
                Even


opbchg:         Dc.l opbclr
                Dc.b $00,$54
                Dc.b "BCHG",0
                Dc.b 0
                Even

                Dc.w $0140
                Dc.w $0801,$01FD
                Dc.b $FF,$03
                Dc.w $F210
                Dc.l _bitchk
                Dc.w $0000
                Even


opbclr:         Dc.l opbset
                Dc.b $00,$55
                Dc.b "BCLR",0
                Dc.b 0
                Even

                Dc.w $0180
                Dc.w $0801,$01FD
                Dc.b $FF,$03
                Dc.w $F210
                Dc.l _bitchk
                Dc.w $0000
                Even


opbset:         Dc.l opbtst
                Dc.b $00,$56
                Dc.b "BSET",0
                Dc.b 0
                Even

                Dc.w $01C0
                Dc.w $0801,$01FD
                Dc.b $FF,$03
                Dc.w $F210
                Dc.l _bitchk
                Dc.w $0000
                Even


opbtst:         Dc.l opbra
                Dc.b $00,$57
                Dc.b "BTST",0
                Dc.b 0
                Even

                Dc.w $0100
                Dc.w $0801,$01FD
                Dc.b $FF,$03
                Dc.w $F210
                Dc.l _bitchk
                Dc.w $0000
                Even


opbra:          Dc.l opbsr
                Dc.b $00,$58
                Dc.b "BRA",0
                Dc.b 0
                Even

                Dc.w $6000
                Dc.w $0200,$0000
                Dc.b $FF,$FF
                Dc.w $0000                                 ;dc.w $FFFF
                Dc.l $00000000
                Dc.w $0002
                Even


opbsr:          Dc.l opchk
                Dc.b $00,$59
                Dc.b "BSR",0
                Dc.b 0
                Even

                Dc.w $6100
                Dc.w $0200,$0000
                Dc.b $FF,$FF
                Dc.w $0000                                 ;dc.w $FFFF
                Dc.l $00000000
                Dc.w $0002
                Even


opchk:          Dc.l opclr
                Dc.b $00,$5A
                Dc.b "CHK",0
                Dc.b 0
                Even

                Dc.w $4180
                Dc.w $0FFD,$0001
                Dc.b $03,$9F
                Dc.w $FF1F
                Dc.l $00000000
                Dc.w $0000
                Even


opclr:          Dc.l opcmp
                Dc.b $00,$5B
                Dc.b "CLR",0
                Dc.b 0
                Even

                Dc.w $4200
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $6210
                Dc.l $00000000
                Dc.w $0000
                Even


opcmp:          Dc.l opcmpi
                Dc.b $00,$5C
                Dc.b "CMP",0
                Dc.b 0
                Even

                Dc.w $B000
                Dc.w $0FFF,$0001
                Dc.b $03,$9F
                Dc.w $6210
                Dc.l $00000000
                Dc.w $8003
                Even


opcmpi:         Dc.l opcmpa
                Dc.b $00,$5D
                Dc.b "CMPI",0
                Dc.b 0
                Even

                Dc.w $0C00
                Dc.w $0800,$01FD
                Dc.b $FF,$03
                Dc.w $6210
                Dc.l $00000000
                Dc.w $0000
                Even


opcmpa:         Dc.l opcmpm
                Dc.b $00,$5E
                Dc.b "CMPA",0
                Dc.b 0
                Even

                Dc.w $B0C0
                Dc.w $0FFF,$0002
                Dc.b $03,$9F
                Dc.w $810F
                Dc.l $00000000
                Dc.w $0000
                Even


opcmpm:         Dc.l opdbcc
                Dc.b $00,$5F
                Dc.b "CMPM",0
                Dc.b 0
                Even

                Dc.w $B108
                Dc.w $0008,$0008
                Dc.b $0F,$9F
                Dc.w $6210
                Dc.l $00000000
                Dc.w $0000
                Even


opdbcc:         Dc.l opdbcs
                Dc.b $00,$60
                Dc.b "DBCC",0
                Dc.b 0
                Even

                Dc.w $54C8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even


opdbcs:         Dc.l opdbeq
                Dc.b $00,$61
                Dc.b "DBCS",0
                Dc.b 0
                Even

                Dc.w $55C8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even


opdbeq:         Dc.l opdbge
                Dc.b $00,$62
                Dc.b "DBEQ",0
                Dc.b 0
                Even

                Dc.w $57C8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even


opdbge:         Dc.l opdbgt
                Dc.b $00,$63
                Dc.b "DBGE",0
                Dc.b 0
                Even

                Dc.w $5CC8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even


opdbgt:         Dc.l opdbhi
                Dc.b $00,$64
                Dc.b "DBGT",0
                Dc.b 0
                Even

                Dc.w $5EC8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even


opdbhi:         Dc.l opdble
                Dc.b $00,$65
                Dc.b "DBHI",0
                Dc.b 0
                Even

                Dc.w $52C8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even


opdble:         Dc.l opdbls
                Dc.b $00,$66
                Dc.b "DBLE",0
                Dc.b 0
                Even

                Dc.w $5FC8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even


opdbls:         Dc.l opdblt
                Dc.b $00,$67
                Dc.b "DBLS",0
                Dc.b 0
                Even

                Dc.w $53C8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even


opdblt:         Dc.l opdbmi
                Dc.b $00,$68
                Dc.b "DBLT",0
                Dc.b 0
                Even

                Dc.w $5DC8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even


opdbmi:         Dc.l opdbne
                Dc.b $00,$69
                Dc.b "DBMI",0
                Dc.b 0
                Even

                Dc.w $5BC8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even


opdbne:         Dc.l opdbpl
                Dc.b $00,$6A
                Dc.b "DBNE",0
                Dc.b 0
                Even

                Dc.w $56C8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even


opdbpl:         Dc.l opdbvc
                Dc.b $00,$6B
                Dc.b "DBPL",0
                Dc.b 0
                Even

                Dc.w $5AC8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even


opdbvc:         Dc.l opdbvs
                Dc.b $00,$6C
                Dc.b "DBVC",0
                Dc.b 0
                Even

                Dc.w $58C8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even


opdbvs:         Dc.l opdbf
                Dc.b $00,$6D
                Dc.b "DBVS",0
                Dc.b 0
                Even

                Dc.w $59C8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even

opdbf:          Dc.l opdbra
                Dc.b $00,$6E
                Dc.b "DBF",0
                Dc.b 0
                Even

                Dc.w $51C8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even


opdbra:         Dc.l opdbt
                Dc.b $00,$6F
                Dc.b "DBRA",0
                Dc.b 0
                Even

                Dc.w $51C8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even


opdbt:          Dc.l opdivs
                Dc.b $00,$70
                Dc.b "DBT",0
                Dc.b 0
                Even

                Dc.w $50C8
                Dc.w $0001,$0200
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0005
                Even


opdivs:         Dc.l opdivu
                Dc.b $00,$71
                Dc.b "DIVS",0
                Dc.b 0
                Even

                Dc.w $81C0
                Dc.w $0FFD,$0001
                Dc.b $03,$9F
                Dc.w $FF1F
                Dc.l $00000000
                Dc.w $0000
                Even


opdivu:         Dc.l opeor
                Dc.b $00,$72
                Dc.b "DIVU",0
                Dc.b 0
                Even

                Dc.w $80C0
                Dc.w $0FFD,$0001
                Dc.b $03,$9F
                Dc.w $FF1F
                Dc.l $00000000
                Dc.w $0000
                Even


opeor:          Dc.l opeori
                Dc.b $00,$73
                Dc.b "EOR",0
                Dc.b 0
                Even

                Dc.w $B100
                Dc.w $0001,$01FD
                Dc.b $9F,$03
                Dc.w $6210
                Dc.l $00000000
                Dc.w $8002
                Even


opeori:         Dc.l opexg
                Dc.b $00,$74
                Dc.b "EORI",0
                Dc.b 0
                Even

                Dc.w $0A00
                Dc.w $0800,$39FD
                Dc.b $FF,$03
                Dc.w $6210
                Dc.l _andichk
                Dc.w $0000
                Even


opexg:          Dc.l opext
                Dc.b $00,$75
                Dc.b "EXG",0
                Dc.b 0
                Even

                Dc.w $C100
                Dc.w $0003,$0003
                Dc.b $9F,$0F
                Dc.w $F2FF
                Dc.l _exgchk
                Dc.w $0000
                Even


opext:          Dc.l opillegal
                Dc.b $00,$76
                Dc.b "EXT",0
                Dc.b 0
                Even

                Dc.w $4800
                Dc.w $0001,$0000
                Dc.b $0F,$FF
                Dc.w $632F
                Dc.l $00000000
                Dc.w $0000
                Even


opillegal:      Dc.l opjmp
                Dc.b $00,$77
                Dc.b "ILLEGAL",0
                Dc.b 0
                Even

                Dc.w $4AFC
                Dc.w $0000,$0000
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0000
                Even


opjmp:          Dc.l opjsr
                Dc.b $00,$78
                Dc.b "JMP",0
                Dc.b 0
                Even

                Dc.w $4EC0
                Dc.w $07E4,$0000
                Dc.b $03,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0000
                Even


opjsr:          Dc.l oplea
                Dc.b $00,$79
                Dc.b "JSR",0
                Dc.b 0
                Even

                Dc.w $4E80
                Dc.w $07E4,$0000
                Dc.b $03,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0000
                Even


oplea:          Dc.l oplink
                Dc.b $00,$7A
                Dc.b "LEA",0
                Dc.b 0
                Even

                Dc.w $41C0
                Dc.w $07E4,$0002
                Dc.b $03,$9F
                Dc.w $F2FF
                Dc.l $00000000
                Dc.w $0000
                Even


oplink:         Dc.l oplsl
                Dc.b $00,$7B
                Dc.b "LINK",0
                Dc.b 0
                Even

                Dc.w $4E50
                Dc.w $0002,$0800
                Dc.b $0F,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0000
                Even


oplsl:          Dc.l oplsr
                Dc.b $00,$7C
                Dc.b "LSL",0
                Dc.b 0
                Even

                Dc.w $E108
                Dc.w $09FD,$0001
                Dc.b $FF,$FF
                Dc.w $F210
                Dc.l _lslchk
                Dc.w $0001
                Even


oplsr:          Dc.l opmove
                Dc.b $00,$7D
                Dc.b "LSR",0
                Dc.b 0
                Even

                Dc.w $E008
                Dc.w $09FD,$0001
                Dc.b $FF,$FF
                Dc.w $F210
                Dc.l _lslchk
                Dc.w $0001
                Even


opmove:         Dc.l opmovep
                Dc.b $00,$7E
                Dc.b "MOVE",0
                Dc.b 0
                Even

                Dc.w $0000
                Dc.w $7FFF,$71FD
                Dc.b $03,$96
                Dc.w $F210
                Dc.l _movechk
                Dc.w $8001
                Even


opmovep:        Dc.l opmovea
                Dc.b $00,$7F
                Dc.b "Chip",0                             ;Dc.b "movep",0 org source
                Dc.b 0
                Even

                Dc.w $0108
                Dc.w $0021,$0021
                Dc.b $9F,$0F
                Dc.w $610F
                Dc.l _movepchk
                Dc.w $0000
                Even

; -- following commands belon to dhandlerlib.obj, LibNr.1
.dhandlerlib:
opmovea:        Dc.l opmoveq
                Dc.b $00,$80
                Dc.b "MOVEA",0
                Dc.b 0
                Even

                Dc.w $0040
                Dc.w $0FFF,$0002
                Dc.b $03,$9F
                Dc.w $C23F
                Dc.l $00000000
                Dc.w $0000
                Even


opmoveq:        Dc.l opmovem
                Dc.b $00,$81
                Dc.b "MOVEQ",0
                Dc.b 0
                Even

                Dc.w $7000
                Dc.w $0800,$0001
                Dc.b $FF,$9F
                Dc.w $F2FF
                Dc.l $00000000
                Dc.w $0003
                Even


opmovem:        Dc.l opmuls
                Dc.b $00,$82
                Dc.b "MOVEM",0
                Dc.b 0
                Even

                Dc.w $4880
                Dc.w $87FC,$87FC
                Dc.b $03,$03
                Dc.w $610F
                Dc.l _movemchk_new
                Dc.w $0000
                Even


opmuls:         Dc.l opmulu
                Dc.b $00,$83
                Dc.b "MULS",0
                Dc.b 0
                Even

                Dc.w $C1C0
                Dc.w $0FFD,$0001
                Dc.b $03,$9F
                Dc.w $FF1F
                Dc.l $00000000
                Dc.w $0000
                Even


opmulu:         Dc.l opnbcd
                Dc.b $00,$84
                Dc.b "MULU",0
                Dc.b 0
                Even

                Dc.w $C0C0
                Dc.w $0FFD,$0001
                Dc.b $03,$9F
                Dc.w $FF1F
                Dc.l $00000000
                Dc.w $0000
                Even


opnbcd:         Dc.l opneg
                Dc.b $00,$85
                Dc.b "NBCD",0
                Dc.b 0
                Even

                Dc.w $4800
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opneg:          Dc.l opnegx
                Dc.b $00,$86
                Dc.b "NEG",0
                Dc.b 0
                Even

                Dc.w $4400
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $6210
                Dc.l $00000000
                Dc.w $0000
                Even


opnegx:         Dc.l opnop
                Dc.b $00,$87
                Dc.b "NEGX",0
                Dc.b 0
                Even

                Dc.w $4000
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $6210
                Dc.l $00000000
                Dc.w $0000
                Even


opnop:          Dc.l opnot
                Dc.b $00,$88
                Dc.b "NOP",0
                Dc.b 0
                Even

                Dc.w $4E71
                Dc.w $0000,$0000
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0000
                Even


opnot:          Dc.l opor
                Dc.b $00,$89
                Dc.b "NOT",0
                Dc.b 0
                Even

                Dc.w $4600
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $6210
                Dc.l $00000000
                Dc.w $0000
                Even


opor:           Dc.l opori
                Dc.b $00,$8A
                Dc.b "OR",0
                Dc.b 0
                Even

                Dc.w $8000
                Dc.w $0FFD,$01FD
                Dc.b $03,$9F
                Dc.w $6210
                Dc.l _addchk
                Dc.w $8002
                Even


opori:          Dc.l oppea
                Dc.b $00,$8B
                Dc.b "ORI",0
                Dc.b 0
                Even

                Dc.w $0000
                Dc.w $0800,$39FD
                Dc.b $FF,$03
                Dc.w $6210
                Dc.l _andichk
                Dc.w $0000
                Even


oppea:          Dc.l opreset
                Dc.b $00,$8C
                Dc.b "PEA",0
                Dc.b 0
                Even

                Dc.w $4840
                Dc.w $07E4,$0000
                Dc.b $03,$FF
                Dc.w $F2FF
                Dc.l $00000000
                Dc.w $0000
                Even


opreset:        Dc.l oprol
                Dc.b $00,$8D
                Dc.b "RESET",0
                Dc.b 0
                Even

                Dc.w $4E70
                Dc.w $0000,$0000
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0000
                Even


oprol:          Dc.l opror
                Dc.b $00,$8E
                Dc.b "ROL",0
                Dc.b 0
                Even

                Dc.w $E118
                Dc.w $09FD,$0001
                Dc.b $FF,$FF
                Dc.w $F210
                Dc.l _rolchk
                Dc.w $0001
                Even


opror:          Dc.l oproxl
                Dc.b $00,$8F
                Dc.b "ROR",0
                Dc.b 0
                Even

                Dc.w $E018
                Dc.w $09FD,$0001
                Dc.b $FF,$FF
                Dc.w $F210
                Dc.l _rolchk
                Dc.w $0001
                Even


oproxl:         Dc.l oproxr
                Dc.b $00,$90
                Dc.b "ROXL",0
                Dc.b 0
                Even

                Dc.w $E110
                Dc.w $09FD,$0001
                Dc.b $FF,$FF
                Dc.w $F210
                Dc.l _roxlchk
                Dc.w $0001
                Even


oproxr:         Dc.l oprte
                Dc.b $00,$91
                Dc.b "ROXR",0
                Dc.b 0
                Even

                Dc.w $E010
                Dc.w $09FD,$0001
                Dc.b $FF,$FF
                Dc.w $F210
                Dc.l _roxlchk
                Dc.w $0001
                Even


oprte:          Dc.l oprtr
                Dc.b $00,$92
                Dc.b "RTE",0
                Dc.b 0
                Even

                Dc.w $4E73
                Dc.w $0000,$0000
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0000
                Even


oprtr:          Dc.l oprts
                Dc.b $00,$93
                Dc.b "RTR",0
                Dc.b 0
                Even

                Dc.w $4E77
                Dc.w $0000,$0000
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0000
                Even


oprts:          Dc.l opsbcd
                Dc.b $00,$94
                Dc.b "RTS",0
                Dc.b 0
                Even

                Dc.w $4E75
                Dc.w $0000,$0000
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0000
                Even


opsbcd:         Dc.l opscc
                Dc.b $00,$95
                Dc.b "SBCD",0
                Dc.b 0
                Even

                Dc.w $8100
                Dc.w $0011,$0011
                Dc.b $90,$00
                Dc.w $FFF0
                Dc.l _abcdchk
                Dc.w $0000
                Even


opscc:          Dc.l opscs
                Dc.b $00,$96
                Dc.b "SCC",0
                Dc.b 0
                Even

                Dc.w $54C0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opscs:          Dc.l opscq
                Dc.b $00,$97
                Dc.b "SCS",0
                Dc.b 0
                Even

                Dc.w $55C0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opscq:          Dc.l opsge
                Dc.b $00,$98
                Dc.b "SEQ",0
                Dc.b 0
                Even

                Dc.w $57C0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opsge:          Dc.l opsgt
                Dc.b $00,$99
                Dc.b "SGE",0
                Dc.b 0
                Even

                Dc.w $5CC0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opsgt:          Dc.l opshi
                Dc.b $00,$9A
                Dc.b "SGT",0
                Dc.b 0
                Even

                Dc.w $5EC0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opshi:          Dc.l opsle
                Dc.b $00,$9B
                Dc.b "SHI",0
                Dc.b 0
                Even

                Dc.w $52C0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opsle:          Dc.l opsls
                Dc.b $00,$9C
                Dc.b "SLE",0
                Dc.b 0
                Even

                Dc.w $5FC0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opsls:          Dc.l opslt
                Dc.b $00,$9D
                Dc.b "SLS",0
                Dc.b 0
                Even

                Dc.w $53C0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opslt:          Dc.l opsmi
                Dc.b $00,$9E
                Dc.b "SLT",0
                Dc.b 0
                Even

                Dc.w $5DC0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opsmi:          Dc.l opsne
                Dc.b $00,$9F
                Dc.b "SMI",0
                Dc.b 0
                Even

                Dc.w $5BC0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opsne:          Dc.l opspl
                Dc.b $00,$A0
                Dc.b "SNE",0
                Dc.b 0
                Even

                Dc.w $56C0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opspl:          Dc.l opsvc
                Dc.b $00,$A1
                Dc.b "SPL",0
                Dc.b 0
                Even

                Dc.w $5AC0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opsvc:          Dc.l opsvs
                Dc.b $00,$A2
                Dc.b "SVC",0
                Dc.b 0
                Even

                Dc.w $58C0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opsvs:          Dc.l opst
                Dc.b $00,$A3
                Dc.b "SVS",0
                Dc.b 0
                Even

                Dc.w $59C0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opst:           Dc.l opsf
                Dc.b $00,$A4
                Dc.b "ST",0
                Dc.b 0
                Even

                Dc.w $50C0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opsf:           Dc.l opstop
                Dc.b $00,$A5
                Dc.b "SF",0
                Dc.b 0
                Even

                Dc.w $51C0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


opstop:         Dc.l opsub
                Dc.b $00,$A6
                Dc.b "STOP",0
                Dc.b 0
                Even

                Dc.w $4E72
                Dc.w $0800,$0000
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0000
                Even


opsub:          Dc.l opsubi
                Dc.b $00,$A7
                Dc.b "SUB",0
                Dc.b 0
                Even

                Dc.w $9000
                Dc.w $0FFF,$01FD
                Dc.b $03,$9F
                Dc.w $6210
                Dc.l _addchk
                Dc.w $8003
                Even


opsubi:         Dc.l opsuba
                Dc.b $00,$A8
                Dc.b "SUBI",0
                Dc.b 0
                Even

                Dc.w $0400
                Dc.w $0800,$01FD
                Dc.b $FF,$03
                Dc.w $6210
                Dc.l $00000000
                Dc.w $0000
                Even


opsuba:         Dc.l opsubq
                Dc.b $00,$A9
                Dc.b "SUBA",0
                Dc.b 0
                Even

                Dc.w $90C0
                Dc.w $0FFF,$0002
                Dc.b $03,$9F
                Dc.w $810F
                Dc.l $00000000
                Dc.w $0000
                Even


opsubq:         Dc.l opsubx
                Dc.b $00,$AA
                Dc.b "SUBQ",0
                Dc.b 0
                Even

                Dc.w $5100
                Dc.w $0800,$01FF
                Dc.b $FF,$03
                Dc.w $6210
                Dc.l $00000000
                Dc.w $0001
                Even


opsubx:         Dc.l opswap
                Dc.b $00,$AB
                Dc.b "SUBX",0
                Dc.b 0
                Even

                Dc.w $9100
                Dc.w $0011,$0011
                Dc.b $0F,$9F
                Dc.w $6210
                Dc.l _abcdchk
                Dc.w $0000
                Even


opswap:         Dc.l optas
                Dc.b $00,$AC
                Dc.b "SWAP",0
                Dc.b 0
                Even

                Dc.w $4840
                Dc.w $0001,$0000
                Dc.b $0F,$FF
                Dc.w $FF1F
                Dc.l $00000000
                Dc.w $0000
                Even


optas:          Dc.l optrap
                Dc.b $00,$AD
                Dc.b "BSS",0                               ;Dc.b "TAS",0 org source
                Dc.b 0
                Even

                Dc.w $4AC0
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $FFF0
                Dc.l $00000000
                Dc.w $0000
                Even


optrap:         Dc.l optrapv
                Dc.b $00,$AE
                Dc.b "TRAP",0
                Dc.b 0
                Even

                Dc.w $4E40
                Dc.w $0800,$0000
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0004
                Even


optrapv:        Dc.l optst
                Dc.b $00,$AF
                Dc.b "TRAPV",0
                Dc.b 0
                Even

                Dc.w $4E76
                Dc.w $0000,$0000
                Dc.b $FF,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0000
                Even


optst:          Dc.l opunlk
                Dc.b $00,$B0
                Dc.b "TST",0
                Dc.b 0
                Even

                Dc.w $4A00
                Dc.w $01FD,$0000
                Dc.b $03,$FF
                Dc.w $6210
                Dc.l $00000000
                Dc.w $0000
                Even


opunlk:         Dc.l opendasm
                Dc.b $00,$B1
                Dc.b "UNLK",0
                Dc.b 0
                Even

                Dc.w $4E58
                Dc.w $0002,$0000
                Dc.b $0F,$FF
                Dc.w $FFFF
                Dc.l $00000000
                Dc.w $0000
                Even

;-----------The End------------;

opendasm:       Dc.l toktnum
                Dc.b $00,$B2
                Dc.b "EndAsm",0
                Dc.b 0
                Even

; ///////////////////////////////////////////////////////////////////////////////////////
; /   ASM MACROS                                                                        /
; ///////////////////////////////////////////////////////////////////////////////////////

.asm_macros:
;-----------The code-----------;

    ;d1=opcode
    ;d2=src  reg,d3=src  mode
    ;d4=dest reg,d5=dest mode
    ;d6.l=src  longint
    ;d7.l=dest longint
    ;d0.l=extraword1<<16+extraword2
    ;all changes get used in assembly!

noerror:
      MOVEQ #$00,D0
RTS


eaerror:
      MOVEQ #-$01,D0
RTS


szerror:
      MOVEQ #-$02,D0
RTS


swapem:
      MOVEQ #$01,D0
RTS


;ASM Marco moved form AmiBlitz3 (compiler)
; new >
._movemchk_new:
  TST.l d5
  BNE 'l1
    MOVEQ #0,d5
    BSET d4,d5
    MOVE.l d5,d4
    MOVEQ #$f,d5
    BRA _movemchk                                          ;was JMP

 'l1
  CMP.l #1,d5
  BNE 'l10
    MOVEQ #0,d5
    ADDQ #8,d4
    BSET d4,d5
    MOVE.l d5,d4
    MOVEQ #$f,d5

 'l10
;JMP _movemchk                                             ;not needed
; < new

_movemchk:
      CMP.W D3,D5
      BEQ.W eaerror
      CMP.W #$000F,D3
      BEQ.W 'regscr
      CMP.W #$000F,D5
      BNE.W eaerror

 'regdst
      MOVEQ #$00,D0
      BSET  D3,D0
      ANDI.W  #$0813,D0
      BNE.W eaerror
      BSET  #010,D1
 BRA.W swapem

 'regscr
      MOVEQ #$00,D0
      BSET  D5,D0
      ANDI.W  #$0E0B,D0
      BNE.W eaerror
      CMP.W #$0004,D5
      BNE.W noerror
      MOVEQ #$0F,D0

 'loop
       LSL.W #1,D2
       ROXR.W  #1,D6
      DBF D0,'loop

      MOVE.W  D6,D2
BRA.W noerror


_movepchk:
      CMP.W D3,D5
      BEQ.W eaerror
      TST.W D3
      BNE.W noerror
      BSET  #7,D1
BRA.W noerror


_movechk:
      CMP.W #$000C,D3
      BCS.W 'notform
      ;
      CMP.W #$000C,D5
      BCC.W eaerror
      CMP.W #$000C,D3
      BEQ.W 'fromccr
      CMP.W #$000D,D3
      BEQ.W 'fromsr
      CMP.W #$000E,D3
      BEQ.W 'fromusp
      ;
 BRA.W eaerror

 'notform
      CMP.W #$000C,D5
      BCS.W 'dosize
      ;
      CMP.W #$000C,D3
      BCC.W eaerror
      CMP.W #$000C,D5
      BEQ.W 'toccr
      CMP.W #$000D,D5
      BEQ.W 'tosr
      CMP.W #$000E,D5
      BEQ.W 'tousp
      ;
 BRA.W eaerror

 'dosize
      MOVE.W  #$1000,D1
      TST.W D6
      BEQ.W noerror
      MOVE.W  #$3000,D1
      CMP.W #$0004,D6
      BEQ.W noerror
      MOVE.W  #$2000,D1
  BRA.W noerror

 'fromusp
      CMP.W #$0001,D5                                      ;to address reg?
      BNE.W eaerror
      MOVE.W  #$4E68,D1
      OR.W  D4,D1

 'usp
      MOVEQ #$00,D2
      MOVEQ #$00,D3
      MOVEQ #$00,D4
      MOVEQ #$00,D5
  BRA.W noerror

 'tousp
      CMP.W #$0001,D3
      BNE.W eaerror
      MOVE.W  #$4E60,D1
      OR.W  D2,D1
  BRA.W 'usp

  ;
 'fromccr
      MOVE.W  #$42C0,D1

 'from
      CMP.W #$0004,D6
      BNE.W szerror
      MOVEQ #$00,D3
      MOVEQ #$00,D2
  BRA.W swapem

 'fromsr
      MOVE.W  #$40C0,D1
  BRA.W 'from

  ;
 'toccr
      MOVE.W  #$44C0,D1

 'to
      CMP.W #$0004,D6
      BNE.W szerror
      MOVEQ #$00,D5
      MOVEQ #$00,D4
  BRA.W noerror

 'tosr
      MOVE.W  #$46C0,D1
BRA.W 'to


_exgchk:
      CMP.W D3,D5
      BEQ.W 'skip
      ORI.W #$0088,D1
      TST.W D3
      BEQ.W noerror
 BRA.W swapem

 'skip
      TST.W D3
      BEQ.W 'data
      ORI.W #$0048,D1
 BRA.W noerror

 'data
      ORI.W #$0040,D1
BRA.W noerror


_bitchk:
      TST.W D3
      BNE.W 'notdn
      LSL.W #8,D2
      LSL.W #1,D2
      OR.W  D2,D1
 BRA.W noerror

 'notdn
      CMP.W #$0008,D6
      BCC.W szerror
      EORI.W  #$0900,D1
BRA.W noerror


_roxlchk:
      MOVE.W  #$E4C0,D0
BRA.W _aslchk2


_rolchk:
      MOVE.W  #$E6C0,D0
BRA.W _aslchk2


_lslchk:
      MOVE.W  #$E2C0,D0
BRA.W _aslchk2


_aslchk:
      MOVE.W  #$E0C0,D0

_aslchk2:
      TST.W D5
      BMI.W 'word
      BNE.W eaerror
      LSL.W #4,D6
      OR.W  D6,D1
      OR.W  D4,D1
      CMP.W #$000B,D3
      BEQ.W noerror
      TST.W D3
      BNE.W eaerror
      LSL.W #8,D2
      LSL.W #1,D2
      OR.W  D2,D1
      BSET  #5,D1
 BRA.W noerror

 'word
      MOVEQ #$00,D5                                        ;dummy d0
      TST.W D3
      BEQ.W eaerror
      CMP.W #$0004,D6
      BNE.W szerror
      ANDI.W  #$0100,D1
      OR.W  D0,D1
      MOVEM.W D2/D3,-(A7)
      CMP.W #$0007,D3
      BCS.W 'skip
      MOVE.W  D3,D2
      SUBQ.W  #7,D2
      MOVEQ #$07,D3

 'skip
      OR.W  D2,D1
      LSL.W #3,D3
      OR.W  D3,D1
      MOVEM.W (A7)+,D2/D3
BRA.W noerror


_abcdchk:
      CMP.W D3,D5
      BNE.W eaerror
      TST.W D3
      BEQ.W 'ok
      BSET  #3,D1
      CMP.W D3,D3

 'ok
RTS


_addchk:
      TST.W D5                                             ;if dest is dn, ok
      BEQ.W 'ok
      TST.W D3
      BNE.W eaerror                                        ;src not dn - fuct
      BSET  #008,D1                                        ;turn into dn,<ea>
 BRA.W swapem

 'ok
RTS


_andichk:
      CMP.W #$000C,D5                                      ;dest ccr?
      BNE.W 'notccr
      TST.W D6
      BNE.W szerror
 BRA.W noerror

 'notccr
      CMP.W #$000D,D5                                      ;or ccr?
      BNE.W noerror
      CMP.W #$0004,D6
      BNE.W szerror
BRA.W noerror

; ///////////////////////////////////////////////////////////////////////////////////////
; /   END OF ASM MACROS                                                                        /
; ///////////////////////////////////////////////////////////////////////////////////////
; begin asmmac include from the original sourcecode


Even
toktnum:        Dc.l toktnum2
                Dc.b $00,$B3     ; was tum org source  ;next one is tnum+1, tnum+2...
                Dc.b "List",0
                Dc.b 0
                Even


toktnum2:       Dc.l toktnum3
                Dc.b $00,$B4     ; was tum+1
                Dc.b "SetErr",0
                Dc.b 0
                Even


toktnum3:       Dc.l toktnum5    ;next one is tnum+1, tnum+2...
                Dc.b $00,$B5
                Dc.b "ClrErr",0
                Dc.b 0
                Even


;toktnum4       dc.l    toktnum5
;               dc  tnum+3
;               dc.b    'Ern',0,0
;               even


toktnum5:       Dc.l toktnum6
                Dc.b $00,$B7
                Dc.b "ErrFail",0
                Dc.b 0
                Even


toktnum6:       Dc.l toktnum7
                Dc.b $00,$B8
                Dc.b "Addr",0
                Dc.b "Objectname(Object#)",0
                Even


toktnum7:       Dc.l toktnum8
                Dc.b $00,$B9
                Dc.b "MOD",0
                Dc.b 0
                Even


toktnum8:       Dc.l toktnum9
                Dc.b $00,$BA
                Dc.b "Pi",0
                Dc.b 0
                Even


toktnum9:       Dc.l toktnum10
                Dc.b $00,$BB
                Dc.b "Repeat",0
                Dc.b 0
                Even


toktnum10:      Dc.l toktnum11
                Dc.b $00,$BC
                Dc.b "Until",0
                Dc.b "<Expression>",0
                Even


toktnum11:      Dc.l toktnum12
                Dc.b $00,$BD
                Dc.b "PutReg",0
                Dc.b "<68000 Reg>, <Variable>",0
                Even


toktnum12:      Dc.l toktnum13
                Dc.b $00,$BE
                Dc.b "Pop",0
                Dc.b "<Gosub|For|Select|If|While|Repeat>",0
                Even                             


toktnum13:      Dc.l toktnum14
                Dc.b $00,$BF
                Dc.b "INCDIR",0
                Dc.b "<Pathname>",0
                Even


toktnum14:      Dc.l toktnum15
                Dc.b $00,$C0
                Dc.b "EndIf",0
                Dc.b 0
                Even


toktnum15:      Dc.l toktnum16
                Dc.b $00,$C1
                Dc.b "Wend",0
                Dc.b 0
                Even


toktnum16:      Dc.l toktnum17
                Dc.b $00,$C2
                Dc.b "SysJsr",0
                Dc.b "<Routine address>",0
                Even


toktnum17:      Dc.l toktnum18
                Dc.b $00,$C3
                Dc.b "WBStartup",0
                Dc.b 0
                Even


toktnum18:      Dc.l toktnum19
                Dc.b $00,$C4
                Dc.b "Maximum",0
                Dc.b "<Objectname>",0
                Even


toktnum19:      Dc.l toktnum20
                Dc.b $00,$C5
                Dc.b "On",0
                Dc.b "<Expression> Goto|Gosub <Program Label[,Program Label...]>",0
                Even


toktnum20:      Dc.l toktnum21
                Dc.b $00,$C6
                Dc.b "Off",0
                Dc.b 0
                Even


toktnum21:      Dc.l toktnum22
                Dc.b $00,$C7
                Dc.b "Forever",0
                Dc.b 0
                Even


toktnum22:      Dc.l toktnum23
                Dc.b $00,$C8
                Dc.b "Restore",0
                Dc.b "[Program Label]",0
                Even


toktnum23:      Dc.l toktnum24
                Dc.b $00,$C9
                Dc.b "Exchange",0
                Dc.b "Var,Var",0
                Even


toktnum24:      Dc.l toktnum25
                Dc.b $00,$CA
                Dc.b "USEPATH",0
                Dc.b "Pathtext",0
                Even


toktnum25:      Dc.l toktnum26
                Dc.b $00,$CB
                Dc.b "CloseEd",0
                Dc.b 0
                Even


toktnum26:      Dc.l toktnum27
                Dc.b $00,$CC
                Dc.b "NoCli",0
                Dc.b 0
                Even


toktnum27:      Dc.l toktnum28
                Dc.b $00,$CD
                Dc.b "BitTst",0
                Dc.b 0
                Even


toktnum28:      Dc.l toktnum29
                Dc.b $00,$CE
                Dc.b "BitSet",0
                Dc.b 0
                Even


toktnum29:      Dc.l toktnum30
                Dc.b $00,$CF
                Dc.b "BitClr",0
                Dc.b 0
                Even


toktnum30:      Dc.l toktnum31
                Dc.b $00,$D0
                Dc.b "BitChg",0
                Dc.b 0
                Even


toktnum31:      Dc.l toktnum32
                Dc.b $00,$D1
                Dc.b "Used",0
                Dc.b "<Objectname(Object#)>",0
                Even


toktnum32:      Dc.l toktnum33           ;last must be zero, else pointer to next
                Dc.b $00,$D2             ;increment this
                Dc.b "RunErrsOn",0       ;name
                Dc.b 0
                Even


toktnum33:      Dc.l  _uselastpath       ; was 0 org source
                Dc.b $00,$D3
                Dc.b "RunErrsOff",0
                Dc.b 0
                Even

; new >
_uselastpath:   Dc.l _regload
                Dc.b $00,$D4
                Dc.b "USELASTPATH",0
                Dc.b "   # Uses the previous path set with usepath",0
                Even

;use registervars
_regload:       Dc.l _regsave
                Dc.b $00,$D5
                Dc.b "RegLoad",0
                Dc.b "<regs>   # load max. 5 Vars to FPU regs for faster use",0
                Even

;store registers
_regsave:       Dc.l _object
                Dc.b $00,$D6
                Dc.b "RegSave",0
                Dc.b "   # store changed loaded regs",0
                Even


_object:        Dc.l _usepath2
                Dc.b $00,$D7
                Dc.b "Object",0
                Dc.b "<Name>    # define object #developobject=1 disable it",0
                Even


_usepath2:      Dc.l _lastrunerr
                Dc.b $00,$D8
                Dc.b "USEPATH2",0
                Dc.b "<Pathtext>   # a second type path can acsess with \\",0
                Even


_lastrunerr:    Dc.l 0
                Dc.b $00,$D9
                Dc.b "LastRunErrsMode",0
                Dc.b "   # Set the runerror state that was before RunErrsOff",0
                Even
; < new
; ///////////////////////////////////////////////////////////////////////////////////////
; /   END OF TOKENLIST                                                                  /
; ///////////////////////////////////////////////////////////////////////////////////////
