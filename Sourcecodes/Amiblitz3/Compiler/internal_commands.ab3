; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "commands"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 3.3.1
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 3
; CursorColumn    = 1
; LabelSearch     = "form"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 25
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 25
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max Window      = 25
; Max IntuiFont   = 5
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
; ////////////////////////////////////////////////////////////////////////////////////////
; / list of all implemented - native tokens of amiblitz                                  /
; ////////////////////////////////////////////////////////////////////////////////////////
;
; this list includes all tokens for internal blitz libraries system1lib and dhandlerlib
; token    1 - 127 : systemlib
; token  128 - 217 : dhandlerlib

; make sure, if you change an instruction name that it is aligned even!

Macro token
  CNIF `0=4
  Dc.l 0
  CELSE
  Dc.l 'lab_nexttoken`@   ; pointer next token
  CEND
  Dc.w `1 : Dc.b `2,0 : Dc.b `3,0
  Even
 'lab_nexttoken`@
End Macro


Even
.system1lib:
!token{$0001,"NEWTYPE","<.Typename>"}
!token{$0002,"End","[If|While|Select|Statement|Function|SetInt|SetErr|Newtype|MACRO|d0|noa7]"}
!token{$0003,"Let","<Var = Operator Expression>"}
!token{$0004,"Dim","<Arrayname> [KEEP]|[List] (Dimension1[,Dimension2..])  # KEEP : resize without loosing data"}
!token{$0005,"Goto","<Program Label>"}
!token{$0006,"Gosub","<Program Label>"}
!token{$0007,"Return",""}
!token{$0008,"Statement","[FAST] Procedurename{[Parameter1[,Parameter2...]]}"}
!token{$0009,"Function","[.Type] [FAST] Procedurename{[Parameter1[,Parameter2...]]}"}
!token{$000A,"MouseWait",""}
!token{$000B,"If","<Expression> [Then...]"}
!token{$000C,"While","<Expression>"}
!token{$000D,"Macro","<Macroname>"}
!token{$000E,"Select","<Expression>"}
!token{$000F,"Case","<Expression>"}
!token{$0010,"Default",""}
!token{$0011,"AsmExit",""}
!token{$0012,"XINCLUDE","<Filename>"}
!token{$0013,"INCLUDE","<Filename>"}
!token{$0014,"SYNTAX","<Mode = Bit0(1) variables need declaration, Bit1(2) a.l=x/a$=x means declaration, Bit2(4) force typecheck>"}
!token{$0015,"SHARED","<Var[,Var...]>"}
!token{$0016,"For","<Var = Expression1 To Expression2 [Step Expression3]>"}
!token{$0017,"Next","[Var[,Var...]]"}
!token{$0018,"To","<Expression2 [Step Expression3]>"}
!token{$0019,"Step","<increment>"}
!token{$001A,"Data","[.Type] Item[,Item...]"}
!token{$001B,"Read","<Var[,Var...]>"}
!token{$001C,"CNIF","<Constant Comparison Constant>"}
!token{$001D,"CSIF","<\\22String\\22 Comparison  String >"}
!token{$001E,"CELSE",""}
!token{$001F,"CEND",""}
!token{$0020,"CERR","Errormessage"}
!token{$0021,"Then","<statement...>"}
!token{$0022,"Else","[Statement...]"}
;
;below should not be used with enabled runtime error checking
;
!token{$0023,"Even4","# align to 4 byte boundary"}
!token{$0024,"Even8","# align to 8 byte boundary"}
!token{$0025,"Dc","[.Size] Data[,Data...]"}
!token{$0026,"Ds","[.Size] Length"}
!token{$0027,"Even",""}
!token{$0028,"Dcb","[.Size] Repeats,Data"}
!token{$0029,"GetReg","<68000 Reg>,<Expression>"}
!token{$002A,"IncBin","<Filename>"}
;
; end of disablables
;
!token{$002B,"Free","<Objectname> <Object#>"}
!token{$002C,"Use","<Objectname> <Object#>"}
!token{$002D,"Stop",""}
!token{$002E,"Cont","[N]"}
!token{$002F,"SizeOf","<.Typename[,Entrypath]>"}
!token{$0030,"SetInt","Type"}
!token{$0031,"ClrInt","Type"}
!token{$0032,"MaxLen","<StringVar> = <Expression>"}
!token{$0033,"DEFTYPE",".Typename [Var[,Var...]]"}
!token{$0034,"BLITZ",""}
!token{$0035,"AMIGA",""}
!token{$0036,"QAMIGA",""}
!token{$0037,"VWait","[Frames]"}
!token{$0038,"ALibJsr","Token[,Form]"}
!token{$0039,"TokeJsr","Token[,Form]"}
!token{$003A,"BLibJsr","Token[,Form]"}
!token{$003B,"EXTB",""}

; ///////////////////////////////////////////////////////////////////////////////////////
; /  begin asmmac include from the original sourcecode                                  /
; ///////////////////////////////////////////////////////////////////////////////////////
#ndn         = $fffe
#nan         = $fffd
#nian        = $fffb
#nanp        = $fff7
#npan        = $ffef
#ndan        = $ffdf
#ndanxi      = $ffbf
#nabsw       = $ff7f
#nabsl       = $feff
#ndpc        = $fdff
#ndpcxi      = $fbff
#nimm        = $f7ff
#nccr        = $efff
#nsr         = $dfff
#nusp        = $bfff
#nmem        = $7fff
#nall        = 0
;
#dn          = 1
#an          = 2
#ian         = 4
#anp         = 8
#pan         = 16   ; $0010
#dan         = 32   ; $0020
#danxi       = 64   ; $0040
#absw        = 128  ; $0080
#absl        = 256  ; $0100
#dpc         = 512  ; $0200
#dpcxi       = 1024 ; $0400
#imm         = 2048 ; $0800
#ccr         = 4096 ; $1000
#sr          = 8192 ; $2000
#usp         = 16384; $4000
#mem         = 32768; $8000
#all         = $fff
;
#byte        = $ff0
#word        = $f1f
#long        = $2ff
#sall        = $210
#nosz        = $fff
;
#byteword    = $f10
#wordlong    = $10f

;the last parameter is a 'do it yourself' subroutine
;that allows you to do your own error chking for
;silly opmodes!
;
;size/ea's have already been created
;
;d1=opcode,d2=srcreg,d3=srcea,d4=destreg,d5=destea

; d1 = opcode
; d2 = src  reg ; d3 = src  mode
; d4 = dest reg ; d5 = dest mode
; d6.l=src  longint
; d7.l=dest longint
; d0.l=extraword1<<16+extraword2
; all changes get used in assembly!
;
;return ne if no can do!

;    /1       /2       /3
; a{tokname, opcode, }
Macro a
  Dc.l 'lab_nexttoken`@   ; pointer next token
  Dc `1                 ; token number
  Dc.b `2,0,0 : Even      ; token symbol
  Dc.w `3                 ; opcode
  Dc.w `4
  Dc.w `5
  Dc.b `6 LSL 4 + `7
  Dc.b `8 LSL 4 + `9
  Dc.w `a LSL 12 + `b
  Dc.l `c
  Dc.w `d
  'lab_nexttoken`@
End Macro

Macro c
  Dc.l toktnum
  Dc.l `1
  Dc.b `2,0,0 : Even
End Macro


; structure
;original   /1   /2     /3   /4    /5 /6  /7 /8  /9  /a     /b  /c
;amiblitz   /2   /3     /4   /5    /6 /7  /8 /9  /a  /b     /c  /d
;           B*   W      W    W     --B--  --B--  --W--      L,  W
;optrap  a TRAP,$4e40, imm,    0, 15,15, 15,15, 15, nosz,  0,  4
;opsubq  a SUBQ,$5100, imm, $1ff, 15,15,  0, 3,  6, sall,  0,  1

;1 Symbol
;2 opcode
;3 source reg or value
;4 source ea : addressing mode
;5 dest reg
;6 dest ea
;7
;8
;9
;a operand size
;b check routine
;c

;         1      2     3      4    5   6   7 8 9 a  b c     d
;NOP
asmto:
!a{$003C,"ABCD", $C100,$11,$11,9,0,0,0,15,#byte,_abcdchk,0,0}
!a{$003D,"ADD",  $D000,#all,$1fd,0,3,9,15,6,#sall,_addchk,$8003}        ;add <ea>,d0
!a{$003E,"ADDI", $0600,#imm,$1fd,15,15,0,3,6,#sall,0,0}
!a{$003F,"ADDA", $D0C0,#all,2,0,3,9,15,8,#wordlong,0,0}
!a{$0040,"ADDQ", $5000,#imm,$1ff,15,15,0,3,6,#sall,0,1}
!a{$0041,"ADDX", $D100,$11,$11,0,15,9,15,6,#sall,_abcdchk,0}
!a{$0042,"AND",  $C000,#all AND #nan,$1fd,0,3,9,15,6,#sall,_addchk,0}
!a{$0043,"ANDI", $0200,#imm,$39FD,15,15,0,3,6,#sall,_andichk,0                   ; $39FD: $1fd^#ccr^#sr^#imm
!a{$0044,"ASL",  $e100,$09fd,1,15,15,15,15,15,#sall,_aslchk,1}                   ; $09fd: #imm^$1fd
!a{$0045,"ASR",  $e000,$09fd,1,15,15,15,15,15,#sall,_aslchk,1}                   ; $09fd: #imm^$1fd
!a{$0046,"BCC",  $6400,#dpc,0,15,15,15,15,15,0,0,2}
!a{$0047,"BCS",  $6500,#dpc,0,15,15,15,15,15,0,0,2}
!a{$0048,"BEQ",  $6700,#dpc,0,15,15,15,15,15,0,0,2}
!a{$0049,"BGE",  $6C00,#dpc,0,15,15,15,15,15,0,0,2}
!a{$004A,"BGT",  $6E00,#dpc,0,15,15,15,15,15,0,0,2}
!a{$004B,"BHI",  $6200,#dpc,0,15,15,15,15,15,0,0,2}
!a{$004C,"BLE",  $6F00,#dpc,0,15,15,15,15,15,0,0,2}
!a{$004D,"BLS",  $6300,#dpc,0,15,15,15,15,15,0,0,2}
!a{$004E,"BLT",  $6D00,#dpc,0,15,15,15,15,15,0,0,2}
!a{$004F,"BMI",  $6B00,#dpc,0,15,15,15,15,15,0,0,2}
!a{$0050,"BNE",  $6600,#dpc,0,15,15,15,15,15,0,0,2}
!a{$0051,"BPL",  $6A00,#dpc,0,15,15,15,15,15,0,0,2}
!a{$0052,"BVC",  $6800,#dpc,0,15,15,15,15,15,0,0,2}
!a{$0053,"BVS",  $6900,#dpc,0,15,15,15,15,15,0,0,2}
!a{$0054,"BCHG", $0140,$0801,$1fd,15,15,0,3,15,#sall,_bitchk,0}                ; $0801: #imm^dn
!a{$0055,"BCLR", $0180,$0801,$1fd,15,15,0,3,15,#sall,_bitchk,0}                ; $0801: #imm^dn
!a{$0056,"BSET", $01c0,$0801,$1fd,15,15,0,3,15,#sall,_bitchk,0}                ; $0801: #imm^dn
!a{$0057,"BTST", $0100,$0801,$1fd,15,15,0,3,15,#sall,_bitchk,0}                ; $0801: #imm^dn
!a{$0058,"BRA",  $6000,#dpc,0,15,15, 0, 0,0, 0,0,2}                            ; #dpc,0,15,15,15,15,15,#nosz,0,2
!a{$0059,"BSR",  $6100,#dpc,0,15,15, 0, 0,0, 0,0,2}                            ; #dpc,0,15,15,15,15,15,#nosz,0,2
!a{$005A,"CHK",  $4180,$ffd,#dn,0,3,9,15,15,#word,0,0}
!a{$005B,"CLR",  $4200,$1fd,0,0,3,15,15,6,#sall,0,0}
!a{$005C,"CMP",  $b000,#all,#dn,0,3,9,15,6,#sall,0,$8003}
!a{$005D,"CMPI", $0c00,#imm,$1fd,15,15,0,3,6,#sall,0,0}
!a{$005E,"CMPA", $b0c0,#all,#an,0,3,9,15,8,#wordlong,0,0}
!a{$005F,"CMPM", $b108,#anp,anp,0,15,9,15,6,#sall,0,0}
!a{$0060,"DBCC", $54C8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$0061,"DBCS", $55C8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$0062,"DBEQ", $57C8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$0063,"DBGE", $5CC8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$0064,"DBGT", $5EC8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$0065,"DBHI", $52C8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$0066,"DBLE", $5FC8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$0067,"DBLS", $53C8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$0068,"DBLT", $5DC8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$0069,"DBMI", $5BC8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$006A,"DBNE", $56C8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$006B,"DBPL", $5AC8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$006C,"DBVC", $58C8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$006D,"DBVS", $59C8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$006E,"DBF",  $51c8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$006F,"DBRA", $51c8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$0070,"DBT",  $50c8,#dn,#dpc,15,15,15,15,15,#nosz,0,5}
!a{$0071,"DIVS", $81c0,$ffd,#dn,0,3,9,15,15,#word,0,0}
!a{$0072,"DIVU", $80c0,$ffd,#dn,0,3,9,15,15,#word,0,0}
!a{$0073,"EOR",  $b100,#dn,$1fd,9,15,0,3,6,#sall,0,$8002}
!a{$0074,"EORI", $0a00,#imm,$39FD,15,15,0,3,6,#sall,_andichk,0}                       ;$39FD: $1fd^ccr^sr^#imm
!a{$0075,"EXG",  $c100,$3,$3,9,15,0,15,15,#long,_exgchk,0}                             ;$3: dn^an
!a{$0076,"EXT",  $4800,#dn,0,0,15,15,15,6,$32f,0,0}
!a{$0077,"ILLEGAL",$4afc,0,0,15,15,15,15,15,#nosz,0,0}
!a{$0078,"JMP",  $4ec0,$7e4,0,0,3,15,15,15,#nosz,0,0}
!a{$0079,"JSR",  $4e80,$7e4,0,0,3,15,15,15,#nosz,0,0}
!a{$007A,"LEA",  $41c0,$7e4,#an,0,3,9,15,15,#long,0,0}
!a{$007B,"LINK", $4e50,#an,#imm,0,15,15,15,15,#nosz,0,0}
!a{$007C,"LSL",  $e108,$09FD,1,15,15,15,15,15,#sall,_lslchk,1}                         ;$09FD: #imm^$1fd
!a{$007D,"LSR",  $e008,$09FD,1,15,15,15,15,15,#sall,_lslchk,1}                         ;$09FD: #imm^$1fd
!a{$007E,"MOVE", $0000,$7FFF,$71FD,0,3,9,6,15,#sall,_movechk,$8001}                    ;$7FFF: all^ccr^sr^usp, $71FD: $1fd^ccr^sr^usp
!a{$007F,"Chip", $0108,$21,$21,9,15,0,15,6,$10f,_movepchk,0}                           ;$21: dn^dan     ;MOVEP has been replaced bei "Chip"

; -- following commands belong to dhandlerlib.obj, LibNr.1
.dhandlerlib:
!a{$0080,"MOVEA",$0040,#all,#an,0,3,9,15,12,$23f,0,0}
!a{$0081,"MOVEQ",$7000,#imm,#dn,15,15,9,15,15,#long,0,3}
!a{$0082,"MOVEM",$4880,$87FC,$87FC,0,3,0,3,6,$10f,_movemchk,0}                    ;$: mem^$7fc
!a{$0083,"MULS", $c1c0,$ffd,#dn,0,3,9,15,15,#word,0,0}
!a{$0084,"MULU", $c0c0,$ffd,#dn,0,3,9,15,15,#word,0,0}
!a{$0085,"NBCD", $4800,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$0086,"NEG",  $4400,$1fd,0,0,3,15,15,6,#sall,0,0}
!a{$0087,"NEGX", $4000,$1fd,0,0,3,15,15,6,#sall,0,0}
!a{$0088,"NOP",  $4e71,0,0,15,15,15,15,15,#nosz,0,0}
!a{$0089,"NOT",  $4600,$1fd,0,0,3,15,15,6,#sall,0,0}
!a{$008A,"OR",   $8000,#all AND #nan,$1fd,0,3,9,15,6,#sall,_addchk,$8002}
!a{$008B,"ORI",  $0000,#imm,$39FD,15,15,0,3,6,#sall,_andichk,0}                       ;??39FD: $1fd^ccr^sr^#imm
!a{$008C,"PEA",  $4840,$7e4,0,0,3,15,15,15,#long,0,0}
!a{$008D,"RESET",$4e70,0,0,15,15,15,15,15,#nosz,0,0}
!a{$008E,"ROL",  $e118,$09FD,1,15,15,15,15,15,#sall,_rolchk,1}                   ;$09FD: #imm^$1fd
!a{$008F,"ROR",  $e018,$09FD,1,15,15,15,15,15,#sall,_rolchk,1}                   ;$09FD: #imm^$1fd
!a{$0090,"ROXL", $e110,$09FD,1,15,15,15,15,15,#sall,_roxlchk,1}                  ;$09FD: #imm^$1fd
!a{$0091,"ROXR", $e010,$09FD,1,15,15,15,15,15,#sall,_roxlchk,1}                  ;$09FD: #imm^$1fd
!a{$0092,"RTE",  $4e73,0,0,15,15,15,15,15,#nosz,0,0}
!a{$0093,"RTR",  $4e77,0,0,15,15,15,15,15,#nosz,0,0}
!a{$0094,"RTS",  $4e75,0,0,15,15,15,15,15,#nosz,0,0}
!a{$0095,"SBCD", $8100,$11,$11,9,0,0,0,15,#byte,_abcdchk,0}                      ;$11: dn^pan
!a{$0096,"SCC",  $54c0,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$0097,"SCS",  $55c0,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$0098,"SEQ",  $57c0,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$0099,"SGE",  $5Cc0,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$009A,"SGT",  $5Ec0,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$009B,"SHI",  $52c0,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$009C,"SLE",  $5Fc0,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$009D,"SLS",  $53c0,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$009E,"SLT",  $5Dc0,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$009F,"SMI",  $5Bc0,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$00A0,"SNE",  $56c0,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$00A1,"SPL",  $5Ac0,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$00A2,"SVC",  $58c0,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$00A3,"SVS",  $59c0,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$00A4,"ST",   $50c0,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$00A5,"SF",   $51c0,$1fd,0,0,3,15,15,15,#byte,0,0}
!a{$00A6,"STOP", $4e72,#imm,0,15,15,15,15,15,#nosz,0,0}
!a{$00A7,"SUB",  $9000,#all,$1fd,0,3,9,15,6,#sall,_addchk,$8003}
!a{$00A8,"SUBI", $0400,#imm,$1fd,15,15,0,3,6,#sall,0,0}
!a{$00A9,"SUBA", $90c0,#all,2,0,3,9,15,8,#wordlong,0,0}
!a{$00AA,"SUBQ", $5100,#imm,$1ff,15,15,0,3,6,#sall,0,1}
!a{$00AB,"SUBX", $9100,$11,$11,0,15,9,15,6,#sall,_abcdchk,0}               ;$11: dn^pan
!a{$00AC,"SWAP", $4840,#dn,0,0,15,15,15,15,#word,0,0}
!a{$00AD,"BSS",  $4ac0,$1fd,0,0,3,15,15,15,#byte,0,0}                       ; "TAS" has been replaced by "BSS" in assembler
!a{$00AE,"TRAP", $4e40,#imm,0,15,15,15,15,15,#nosz,0,4}
!a{$00AF,"TRAPV",$4e76,0,0,15,15,15,15,15,#nosz,0,0}
!a{$00B0,"TST",  $4a00,$1fd,0,0,3,15,15,6,#sall,0,0}
!a{$00B1,"UNLK", $4e58,#an,0,0,15,15,15,15,#nosz,0,0}
!c{$00B2,"EndAsm"}
; ///////////////////////////////////////////////////////////////////////////////////////
; /   ASM MACROS                                                                        /
; ///////////////////////////////////////////////////////////////////////////////////////

.asm_macros:
;-----------The code-----------;

    ;d1=opcode
    ;d2=src  reg,d3=src  mode
    ;d4=dest reg,d5=dest mode
    ;d6.l=src  longint
    ;d7.l=dest longint
    ;d0.l=extraword1<<16+extraword2
    ;all changes get used in assembly!

noerror: MOVEQ #$00,D0 : RTS
eaerror: MOVEQ #-$01,D0 : RTS
szerror: MOVEQ #-$02,D0 : RTS
swapem: MOVEQ #$01,D0 : RTS

._movemchk_new:
  TST.l d5
  BNE 'l1
    MOVEQ #0,d5
    BSET d4,d5
    MOVE.l d5,d4
    MOVEQ #$f,d5
    BRA _movemchk                                          ;was JMP

 'l1
  CMP.l #1,d5
  BNE 'l10
    MOVEQ #0,d5
    ADDQ #8,d4
    BSET d4,d5
    MOVE.l d5,d4
    MOVEQ #$f,d5

 'l10
;JMP _movemchk                                             ;not needed
; < new

_movemchk:
      CMP.W D3,D5
      BEQ.W eaerror
      CMP.W #$000F,D3
      BEQ.W 'regscr
      CMP.W #$000F,D5
      BNE.W eaerror

 'regdst
      MOVEQ #$00,D0
      BSET  D3,D0
      ANDI.W  #$0813,D0
      BNE.W eaerror
      BSET  #010,D1
 BRA.W swapem

 'regscr
      MOVEQ #$00,D0
      BSET  D5,D0
      ANDI.W  #$0E0B,D0
      BNE.W eaerror
      CMP.W #$0004,D5
      BNE.W noerror
      MOVEQ #$0F,D0

 'loop
       LSL.W #1,D2
       ROXR.W  #1,D6
      DBF D0,'loop

      MOVE.W  D6,D2
BRA.W noerror


_movepchk:
      CMP.W D3,D5
      BEQ.W eaerror
      TST.W D3
      BNE.W noerror
      BSET  #7,D1
BRA.W noerror


_movechk:
      CMP.W #$000C,D3
      BCS.W 'notform
      ;
      CMP.W #$000C,D5
      BCC.W eaerror
      CMP.W #$000C,D3
      BEQ.W 'fromccr
      CMP.W #$000D,D3
      BEQ.W 'fromsr
      CMP.W #$000E,D3
      BEQ.W 'fromusp
      ;
 BRA.W eaerror

 'notform
      CMP.W #$000C,D5
      BCS.W 'dosize
      ;
      CMP.W #$000C,D3
      BCC.W eaerror
      CMP.W #$000C,D5
      BEQ.W 'toccr
      CMP.W #$000D,D5
      BEQ.W 'tosr
      CMP.W #$000E,D5
      BEQ.W 'tousp
      ;
 BRA.W eaerror

 'dosize
      MOVE.W  #$1000,D1
      TST.W D6
      BEQ.W noerror
      MOVE.W  #$3000,D1
      CMP.W #$0004,D6
      BEQ.W noerror
      MOVE.W  #$2000,D1
  BRA.W noerror

 'fromusp
      CMP.W #$0001,D5                                      ;to address reg?
      BNE.W eaerror
      MOVE.W  #$4E68,D1
      OR.W  D4,D1

 'usp
      MOVEQ #$00,D2
      MOVEQ #$00,D3
      MOVEQ #$00,D4
      MOVEQ #$00,D5
  BRA.W noerror

 'tousp
      CMP.W #$0001,D3
      BNE.W eaerror
      MOVE.W  #$4E60,D1
      OR.W  D2,D1
  BRA.W 'usp

  ;
 'fromccr
      MOVE.W  #$42C0,D1

 'from
      CMP.W #$0004,D6
      BNE.W szerror
      MOVEQ #$00,D3
      MOVEQ #$00,D2
  BRA.W swapem

 'fromsr
      MOVE.W  #$40C0,D1
  BRA.W 'from

  ;
 'toccr
      MOVE.W  #$44C0,D1

 'to
      CMP.W #$0004,D6
      BNE.W szerror
      MOVEQ #$00,D5
      MOVEQ #$00,D4
  BRA.W noerror

 'tosr
      MOVE.W  #$46C0,D1
BRA.W 'to


_exgchk:
      CMP.W D3,D5
      BEQ.W 'skip
      ORI.W #$0088,D1
      TST.W D3
      BEQ.W noerror
 BRA.W swapem

 'skip
      TST.W D3
      BEQ.W 'data
      ORI.W #$0048,D1
 BRA.W noerror

 'data
      ORI.W #$0040,D1
BRA.W noerror


_bitchk:
      TST.W D3
      BNE.W 'notdn
      LSL.W #8,D2
      LSL.W #1,D2
      OR.W  D2,D1
 BRA.W noerror

 'notdn
      CMP.W #$0008,D6
      BCC.W szerror
      EORI.W  #$0900,D1
BRA.W noerror


_roxlchk:
      MOVE.W  #$E4C0,D0
BRA.W _aslchk2


_rolchk:
      MOVE.W  #$E6C0,D0
BRA.W _aslchk2


_lslchk:
      MOVE.W  #$E2C0,D0
BRA.W _aslchk2


_aslchk:
      MOVE.W  #$E0C0,D0

_aslchk2:
      TST.W D5
      BMI.W 'word
      BNE.W eaerror
      LSL.W #4,D6
      OR.W  D6,D1
      OR.W  D4,D1
      CMP.W #$000B,D3
      BEQ.W noerror
      TST.W D3
      BNE.W eaerror
      LSL.W #8,D2
      LSL.W #1,D2
      OR.W  D2,D1
      BSET  #5,D1
 BRA.W noerror

 'word
      MOVEQ #$00,D5                                        ;dummy d0
      TST.W D3
      BEQ.W eaerror
      CMP.W #$0004,D6
      BNE.W szerror
      ANDI.W  #$0100,D1
      OR.W  D0,D1
      MOVEM.W D2/D3,-(A7)
      CMP.W #$0007,D3
      BCS.W 'skip
      MOVE.W  D3,D2
      SUBQ.W  #7,D2
      MOVEQ #$07,D3

 'skip
      OR.W  D2,D1
      LSL.W #3,D3
      OR.W  D3,D1
      MOVEM.W (A7)+,D2/D3
BRA.W noerror


_abcdchk:
      CMP.W D3,D5
      BNE.W eaerror
      TST.W D3
      BEQ.W 'ok
      BSET  #3,D1
      CMP.W D3,D3

 'ok
RTS


_addchk:
      TST.W D5                                             ;if dest is dn, ok
      BEQ.W 'ok
      TST.W D3
      BNE.W eaerror                                        ;src not dn - fuct
      BSET  #008,D1                                        ;turn into dn,<ea>
 BRA.W swapem

 'ok
RTS


_andichk:
      CMP.W #$000C,D5                                      ;dest ccr?
      BNE.W 'notccr
      TST.W D6
      BNE.W szerror
 BRA.W noerror

 'notccr
      CMP.W #$000D,D5                                      ;or ccr?
      BNE.W noerror
      CMP.W #$0004,D6
      BNE.W szerror
BRA.W noerror

; ///////////////////////////////////////////////////////////////////////////////////////
; /   END OF ASM MACROS                                                                 /
; ///////////////////////////////////////////////////////////////////////////////////////
Even
toktnum:
!token{$00B3,"List",""}
!token{$00B4,"SetErr",""}
!token{$00B5,"ClrErr",""}
;!token{$00B6,"Ern",""}
!token{$00B7,"ErrFail",""}
!token{$00B8,"Addr","Objectname(Object#)"}
!token{$00B9,"MOD",""}
!token{$00BA,"Pi",""}
!token{$00BB,"Repeat",""}
!token{$00BC,"Until","<Expression>"}
!token{$00BD,"PutReg","<68000 Reg>, <Variable>"}
!token{$00BE,"Pop","<Gosub|For|Select|If|While|Repeat>"}
!token{$00BF,"INCDIR","<Pathname>"}
!token{$00C0,"EndIf",""}
!token{$00C1,"Wend",""}
!token{$00C2,"SysJsr","<Routine address>"}
!token{$00C3,"WBStartup",""}
!token{$00C4,"Maximum","<Objectname>"}
!token{$00C5,"On","<Expression> Goto|Gosub <Program Label[,Program Label...]>"}
!token{$00C6,"Off",""}
!token{$00C7,"Forever",""}
!token{$00C8,"Restore","[Program Label]"}
!token{$00C9,"Exchange","Var,Var"}
!token{$00CA,"USEPATH","Pathtext"}
!token{$00CB,"CloseEd",""}
!token{$00CC,"NoCli",""}
!token{$00CD,"BitTst",""}
!token{$00CE,"BitSet",""}
!token{$00CF,"BitClr",""}
!token{$00D0,"BitChg",""}
!token{$00D1,"Used","<Objectname(Object#)>"}
!token{$00D2,"RunErrsOn",""}
!token{$00D3,"RunErrsOff",""}
           ; new commands since BlitzBasic2
!token{$00D4,"USELASTPATH","   # Uses the previous path set with usepath"}
!token{$00D5,"RegLoad","<regs>   # load max. 5 Vars to FPU regs for faster use"}
!token{$00D6,"RegSave","   # store changed loaded regs"}
!token{$00D7,"Object","<Name>    # define object #developobject=1 disable it"}
!token{$00D8,"USEPATH2","<Pathtext>   # a second type path can acsess with \\"}
!token{$00D9,"LastRunErrsMode","   # Set the runerror state that was before RunErrsOff",true}
           ; add a 4th parameter to indicate macro the end of tokenlist
;!token{$00DA,"HONITOS"," Dummy Token",True}
; ///////////////////////////////////////////////////////////////////////////////////////
; /   END OF TOKENLIST                                                                  /
; ///////////////////////////////////////////////////////////////////////////////////////
