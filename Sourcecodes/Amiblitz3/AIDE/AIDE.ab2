optimize 7
Syntax 2
ver.s = Peek.s(?shortversion)

XINCLUDE "ntui.include.bb2"

;/* define use constants */
#NOTIFY_Quit                = 1
#NOTIFY_Calculator_Evaluate = 2
#NOTIFY_Calculator_Format   = 3
#NOTIFY_FileList_ShowDrives = 4
#NOTIFY_FileList_ParentPath = 5
#NOTIFY_FileList_SetPath    = 6
#NOTIFY_FileList_ClickFile  = 7


#WINID_Calculator           = 1
#WINID_About                = 2
#WINID_SourceEditor         = 3
#WINID_Browser              = 4
#WINID_Find                 = 5
#WINID_CompilerSettings     = 6
#WINID_IDEPrefs             = 7
#WINID_Error                = 8
#WINID_FileList             = 9

NEWTYPE.AIDE
;/* Preferences */
ShowWelcome.l            ; -1 Show Welcome Window, 0 dont show
AutoFormat.l             ; auto format the line that you are editing
BoldTokens.l             ; use bold font for tokens
ItalicRemarks.l          ; use italic font for comments
PubScreenName.s          ; use this pubscreen, or create if not found
ConsoleOnWB.l            ; -1 open output console on WB, 0 open on Amiblitz3 screen
ConsoleWait.l            ; wait for keypress on program end
ConsoleDevice.s          ; name of console device, default is CON:
OpenLastSource.l         ; open last sourcecode on next start
FileHistory.s[10]        ; filenames of last 10 files
RGBPens.l[#TUITBPEN_MAX] ; RGB values of pens, see ntui_TextBox for pens
SourceCodeFontName.s     ; name of the font used for sourcecode
SourceCodeFontSize.l     ; size
AREXXPort.s              ; AIDE's AREXX Port name
AppIcon.s                ; AIDE's AppIcon filename
IncludePath.s            ; include path
SourcePattern.s
SourcePath.s

;/* Runtime Data */
Path.s                   ; base path
Quit.l                   ; indicate exit of program
End NEWTYPE

SHARED AIDE.AIDE
SHARED *tuiEngine.tuiEngine


;/* init the AIDE preferences and path settings */
Statement InitAIDE{icon.s,dir.s}
AIDE\Path           = dir
AIDE\AREXXPort      = dos_GetToolString{"AREXXPort"      ,"AIDE_REXX"   ,icon}
AIDE\PubScreenName  = dos_GetToolString{"PubScreenName"  ,"Workbench"   ,icon}
AIDE\ConsoleDevice  = dos_GetToolString{"ConsoleDevice"  ,"CON:"        ,icon}
AIDE\ShowWelcome    = dos_GetToolValue {"ShowWelcome"    ,True          ,icon}
AIDE\AppIcon        = icon
AIDE\SourcePattern = "~(#?.(xtra|bak|info))"
AIDE\SourcePath    = "Sourcecodes:"
; ...
AIDE\Quit = False
End Statement


;/* open window functions */
Statement OpenCalculator{}
;/* create the demo window */
If ntui_CreateWindow{*tuiEngine,"Calculator",#WINID_Calculator}
  ntui_BeginVGroup{0}
    ntui_BeginVGroup{0,"Expression"}
      ntui_String{"",32,#NOTIFY_Calculator_Evaluate,"type your constant expression to evaluate here"}

      ntui_BeginHGroup{0,"","",#TUIF_SAMESIZE}
        ntui_Button{"Hex","",#NOTIFY_Calculator_Format ,"set output format to hexadecimal",#TUIF_TOGGLE,@"CHEX"}
        ntui_Button{"Dec","",#NOTIFY_Calculator_Format ,"set output format to decimal"    ,#TUIF_TOGGLE,@"CDEC"}
        ntui_Button{"Bin","",#NOTIFY_Calculator_Format ,"set output format to binary"     ,#TUIF_TOGGLE,@"CBIN"}
      ntui_EndGroup{}

    ntui_EndGroup{}
    ntui_Button{"Close","TBImages:quit",#NOTIFY_CLOSE,"close the calculator"}
    ntui_SetMinSize{300,10}
  ntui_EndGroup{}

ntui_EndWindow{}
End If

; /* now we can actually open the window */
If ntui_ShowWindowByID{*tuiEngine,#WINID_Calculator}=False Then error{"\\__THIS_FUNCTION: Unable to open Calculator!"}
End Statement


Statement OpenSourceWindow{}
If ntui_CreateWindow{*tuiEngine,"AIDE Source Editor",#WINID_SourceEditor}
  ntui_BeginVGroup{0}
  ntui_BeginHGroup{0} : ntui_SetBorder{#TUIBORDER_GROUP} : ntui_SetFlags{#TUIF_SAMEHEIGHT}
    ntui_ToolButton{"open","TBImages:open",-1,0,"open a new file"}                 : ntui_SetFlags{#TUIF_SAMESIZE}
    ntui_ToolButton{"save","TBImages:save",-1 ,0,"save the current file"}          : ntui_SetFlags{#TUIF_SAMESIZE}
    ntui_ToolButton{"all","TBImages:saveall",-1 ,0,"save all open files"}          : ntui_SetFlags{#TUIF_SAMESIZE}
    ntui_ToolButton{"close","TBImages:close",-1 ,0,"close the current file"}       : ntui_SetFlags{#TUIF_SAMESIZE}
    ntui_VSeperator{}
    ntui_ToolButton{"cut","TBImages:cut",-1 ,0,"cut the marked text"}              : ntui_SetFlags{#TUIF_SAMESIZE}
    ntui_ToolButton{"copy","TBImages:copy",-1 ,0,"copy the marked text"}           : ntui_SetFlags{#TUIF_SAMESIZE}
    ntui_ToolButton{"paste","TBImages:paste",-1 ,0,"paste text from clipboard"}    : ntui_SetFlags{#TUIF_SAMESIZE}
    ntui_VSeperator{}
    ntui_ToolButton{"undo","TBImages:undo",-1 ,0,"undo latest operation"}          : ntui_SetFlags{#TUIF_SAMESIZE}
    ntui_VSeperator{}
    ntui_ToolButton{"help","TBImages:help",-1 ,0,"popup help guide"}               : ntui_SetFlags{#TUIF_SAMESIZE}
    ntui_VSeperator{}
    ntui_ToolButton{"quit","TBImages:quit",-1 ,#NOTIFY_QUIT,"quit the application"}: ntui_SetFlags{#TUIF_SAMESIZE}

    ntui_Space{0,0,#TUIF_FIXHEIGHT}
  ntui_EndGroup{}

  ntui_BeginPage{0,-1,"",#TUIF_BOTTOM|#TUIF_SMALL}
    ntui_BeginVGroup{0,"myProgram.ab2","TBImages:file"}
      ntui_TextBox{"XINCLUDE \\22error.include.bb2\\22\\n\\nNPrint \\22Hello World\\22\\nEnd\\n",32000,0,"",#TUIF_FIX,@"ED01"}
      ntui_Label{"Line: 000001 Column: 101",#TUIF_LEFT|#TUIF_FIX}
    ntui_EndGroup{}

    ntui_BeginVGroup{0,"another.include.bb2","TBImages:file"}
      ntui_TextBox{"NPrint \\22Test\\22 : End\\n",32000,0,"",#TUIF_FIX,@"ED02"}
      ntui_Label{"Line: 000001 Column: 101",#TUIF_LEFT|#TUIF_FIX}
    ntui_EndGroup{}

  ntui_EndPage{}
  ntui_EndGroup{}
ntui_EndWindow{}
End If
If ntui_ShowWindowByID{*tuiEngine,#WINID_SourceEditor}=False Then error{"\\__THIS_FUNCTION: Unable to open Source Window!"}
End Statement

Statement FillFileLister{*tuiListView.tuiListView,path.s,pattern.s}
ntui_ClearListView{*tuiListView}
If path
  Repeat
    name.s = dos_ScanDir{path,pattern}
    If name
      If dos_IsDir{name}
        flags.l=#TUIF_HIGHLIGHT|#TUIF_BOLD
        b.s = "<DIR>"
        i.s = "TBImages:folder"
        ;i.s = "ENVARC:Sys/def_drawer.info"
      Else
        bs.l = dos_GetFileSize{name}
        If bs>=1000
          Format "000"
          b = Str$(bs MOD 1000)
          Format ""
        Else
          b = Str$(bs)
        End If
        While bs>1000
          bs/1000
          If bs>=1000
            Format "000"
            b = Str$(bs MOD 1000)+"."+b
            Format ""
          Else
            b = Str$(bs)+"."+b
          End If
        Wend
        flags = 0 :b+" bytes"
        i.s = "TBImages:file"
        ;i.s = "ENVARC:Sys/def_text.info"
      End If
      d.s = dos_GetFileDate{name}
      ;If image_Test{name} Then i.s = name
      If dos_Exist{name+".info"}
        i.s = name+".info"
      End If
      ntui_AddListViewItem{*tuiListView,-1,"\p"+i+"|"+dos_FilePart{name}+"|"+b+"|"+d+"",0,1234,flags,""}
    End If
  Until name=""
Else
  Repeat
    name.s = dos_ScanVolumes{}
    If name
      flags.l=#TUIF_HIGHLIGHT|#TUIF_BOLD
      s.f = dos_GetDiskSize{name}
      unit.s="bytes"
      If s>1024 Then s/1024 : unit="kB"
      If s>1024 Then s/1024 : unit="MB"
      If s>1024 Then s/1024 : unit="GB"
      b.s = Str$(Int(s))
      If s<100 Then n.l = Int(s*10) MOD 10 : b.s + "."+Str$(n)
      b.s + unit
      i.s = "TBImages:disk"
      ;If dos_Exist{dos_AddPart{name,"disk.info"} }
      ;  i.s = dos_AddPart{name,"disk.info"}
      ;End If
      i=name
      d.s = dos_GetFileDate{name}
      ntui_AddListViewItem{*tuiListView,-1,"\p"+i+"|"+name+"|"+b+"|"+d+"",0,1234,flags,""}
    End If
  Until name=""
  Repeat
    name.s = dos_ScanAssigns{}
    If name
      flags.l=#TUIF_HIGHLIGHT|#TUIF_BOLD
      b.s = "<ASSIGN>"
      i.s = "TBImages:assign"
      ;If dos_Exist{dos_AddPart{name,"disk.info"}}
        ;i.s = namedos_AddPart{name,"disk.info"}
      ;End If
      i=name
      d.s = dos_GetFileDate{name}
      ntui_AddListViewItem{*tuiListView,-1,"\p"+i+"|"+name+"|"+b+"|"+d+"",0,1234,flags,""}
    End If
  Until name=""
End If
End Statement


Statement OpenFileWindow{}
If ntui_CreateWindow{*tuiEngine,"Files",#WINID_FileList}
  ntui_BeginVGroup{0}
  ntui_BeginHGroup{0}
  ntui_ToolButton{"","TBImages:harddisk",#TUISIZE_BUTTON,#NOTIFY_FileList_ShowDrives,"show all system drives"}
  ntui_ToolButton{"","TBImages:nav_west",#TUISIZE_BUTTON,#NOTIFY_FileList_ParentPath,"go back to parent path"}
  ntui_String{AIDE\SourcePath ,120,#NOTIFY_FileList_SetPath,"",#TUIF_LEFT,@"PATH"} : ntui_ClearFlags{#TUIF_FIXWIDTH}
  ntui_EndGroup{}
  *tuiListViewA.tuiListView=ntui_ListView {"\pTBImages:file\~|\l\tFilename\~|\rSize|\lDate\pTBImages:date",False,#NOTIFY_FileList_ClickFile,"",#TUIF_NORMAL,@"LIST" }
  ntui_SetMinSize{100,100}
  FillFileLister{*tuiListViewA,AIDE\SourcePath,AIDE\SourcePattern}
  ntui_EndGroup{}
  ntui_EndWindow{}
End If
If ntui_ShowWindowByID{*tuiEngine,#WINID_FileList}=False Then error{"\\__THIS_FUNCTION: Unable to open File Window!"}
End Statement


Statement OpenBrowserWindow{}
If ntui_CreateWindow{*tuiEngine,"Browser",#WINID_Browser}
  ntui_BeginVGroup{0}
  ntui_BeginPage{0,-1,"",#TUIF_TOP};|#TUIF_SMALL}
    ntui_BeginVGroup{0,"Source","TBImages:file"}
    ntui_String{"",32} : ntui_SetMinSize{200,0}
    ntui_ListView{""} : ntui_SetMinSize{0,100}
    ntui_EndGroup{}

    ntui_BeginVGroup{0,"Libraries","TBImages:addressbook"}
    ntui_String{"",32}
    ntui_ListView{""}
    ntui_EndGroup{}

    ntui_BeginVGroup{0,"Constants","TBImages:file"}
    ntui_String{"",32}
    ntui_ListView{""}
    ntui_EndGroup{}

    ntui_BeginVGroup{0,"Structures","TBImages:appointment"}
    ntui_String{"",32}
    ntui_ListView{""}
    ntui_EndGroup{}

    ntui_BeginVGroup{0,"Variables","TBImages:file"}
    ntui_String{"",32}
    ntui_ListView{""}
    ntui_EndGroup{}

  ntui_EndPage{}
  ntui_EndGroup{}
ntui_EndWindow{}
End If
If ntui_ShowWindowByID{*tuiEngine,#WINID_Browser}=False Then error{"\\__THIS_FUNCTION: Unable to open Browser Window!"}
End Statement



Statement OpenAboutWindow{}
If ntui_CreateWindow{*tuiEngine,"About",#WINID_About}
  ntui_BeginVGroup{0}
  ntui_BeginVGroup{0} : ntui_SetBorder{#TUIBORDER_GROUP}
  ntui_Image{"System/LogoAIDE.png"}
  ntui_Label{"AmiBlitz3/C/C++/HTML/MonkeyScript Development Environment"}
  ntui_Label{"2009 by Thilo Koehler"}
  ntui_HSeperator{}
  ntui_BeginHGroup{2}
  ntui_Label{"AIDE:"         ,#TUIF_RIGHT} : ntui_Label{" \\__VER_MAJOR.\\__VER_MINOR",#TUIF_LEFT}
  ntui_Label{"Compiler:"     ,#TUIF_RIGHT} : ntui_Label{" 0",#TUIF_LEFT }
  ntui_Label{"AREXX Port:"   ,#TUIF_RIGHT} : ntui_Label{" "+AIDE\AREXXPort  ,#TUIF_LEFT }
  ntui_Label{"Public Screen:",#TUIF_RIGHT} : ntui_Label{" "+AIDE\PubScreenName ,#TUIF_LEFT }
  ntui_Label{"AcidLibs:"     ,#TUIF_RIGHT} : ntui_Label{" ???"  ,#TUIF_LEFT }
  ntui_Label{"DefLibs:"      ,#TUIF_RIGHT} : ntui_Label{" ???"  ,#TUIF_LEFT }
  ntui_EndGroup{}
  ntui_EndGroup{}
  ntui_Button{"Close","TBImages:close",#NOTIFY_CLOSE}
  ntui_EndGroup{}
ntui_EndWindow{}
End If
If ntui_ShowWindowByID{*tuiEngine,#WINID_About}=False Then error{"\\__THIS_FUNCTION: Unable to open About Window!"}
End Statement


;/* event handler function */
Statement HandleEvents{}
!tuiev_WhileEvent{*tuiEngine}
  *tuiWindow.tuiWindow = !tuiev_TuiWindow
  *tuiObject.tuiObject = !tuiev_TuiObject

  Select !tuiev_Notify
    Case #NOTIFY_POPUP        ; someone wants us to popup
      ntui_PopUp{*tuiEngine}
      ntui_HideAppIcon{*tuiEngine}
      OpenSourceWindow{}

    Case #NOTIFY_ICONIFY      ; someone wants us to iconify
      ntui_Iconify{*tuiEngine}
      ntui_ShowAppIcon{*tuiEngine}

    Case #NOTIFY_AREXX        ; we got an arexx message
      Select !tuiev_String
         Case "QUIT"    : ntui_CauseEvent{#NOTIFY_QUIT    ,*tuiEngine}
         Case "ICONFIY" : ntui_CauseEvent{#NOTIFY_ICONIFY ,*tuiEngine}
         Case "POPUP"   : ntui_CauseEvent{#NOTIFY_POPUP   ,*tuiEngine}
      End Select

    Case #NOTIFY_CLOSE        ; close a window
      Select !tuiev_WinID
        Case #WINID_SourceEditor
          ntui_CauseEvent{#NOTIFY_ICONIFY    ,*tuiEngine}
        Default
          ntui_FreeWindow{!tuiev_TuiWindow}
      End Select

    Case #NOTIFY_QUIT         ; someone wants us to quit
      AIDE\Quit = True

    Case #NOTIFY_FileList_ClickFile
      If !tuiev_DoubleClick
        *tui.tuiObject = ntui_GetObjectByID{*tuiEngine,@"ED01"}
        If *tui
          ntui_LoadTextBox{*tui,!tuiev_String,!_NULL}
        End If
      Else

      End If

    Case #NOTIFY_FileList_ParentPath
      *tui.tuiObject = ntui_GetObjectByID{*tuiWindow,@"LIST"}
      If *tui
        path.s = ntui_GetStringByID{*tuiWindow,@"PATH"}
        path = dos_PathPart{path}
        ntui_SetStringByID{*tuiWindow,path,@"PATH"}
        FillFileLister{*tui,path,AIDE\SourcePattern}
      End If

    Case #NOTIFY_FileList_ShowDrives
      *tui.tuiObject = ntui_GetObjectByID{*tuiWindow,@"LIST"}
      If *tui
         FillFileLister{*tui,"",AIDE\SourcePattern}
         ntui_SetStringByID{*tuiWindow,"",@"PATH"}
      End If

  End Select
!tuiev_WendEvent
End Statement

Statement AutoLayout{}
top.l    = *tuiEngine\scr\BarHeight
bottom.l = *tuiEngine\scr\Height-1
left.l   = 0
right.l  = *tuiEngine\scr\Width-1

lock.l = LockIBase_ (0)
  *myWindow.Window = *tuiEngine\scr\FirstWindow

  While *myWindow
    rx.l = *myWindow\Width/*myWindow\Height
    ry.l = *myWindow\Height/*myWindow\Width
    If rx>2
      If *myWindow\TopEdge+*myWindow\Height-1 >= bottom
        bottom = Min(bottom,*myWindow\TopEdge-1)
      End If
      If *myWindow\TopEdge<*tuiEngine\scr\BarHeight
        top    = Max(top,*myWindow\TopEdge+*myWindow\Height)
      End If
    End If

    If ry>2
      If *myWindow\LeftEdge+*myWindow\Width-1 >= right
        right = Min(right,*myWindow\LeftEdge-1)
      End If
      If *myWindow\LeftEdge<=0
        left  = Max(left,*myWindow\LeftEdge+*myWindow\Width)
      End If
    End If
    *myWindow = *myWindow\NextWindow
  Wend

UnlockIBase_ lock

*tuiWindow.tuiWindow = ntui_GetWindowByID{*tuiEngine,#WINID_FileList}
If *tuiWindow
  width.l = right-left+1
  width*2/7
  ChangeWindowBox_ *tuiWindow\win,left,top,width,bottom-top+1
  left+width
End If


*tuiWindow.tuiWindow = ntui_GetWindowByID{*tuiEngine,#WINID_SourceEditor}
If *tuiWindow
  width.l = right-left+1
  width*2/3
  ChangeWindowBox_ *tuiWindow\win,left,top,width,bottom-top+1
  left+width
End If

*tuiWindow.tuiWindow = ntui_GetWindowByID{*tuiEngine,#WINID_Browser}
If *tuiWindow
  ChangeWindowBox_ *tuiWindow\win,left,top,right-left+1,bottom-top+1
End If
End Statement

;/* ============== Main Program ==============
progIcon.s  = dos_GetStartIcon{"AIDE"}
progDir.s   = dos_GetProgDir{""}
InitAIDE{progIcon,progDir}
*tuiEngine = ntui_CreateEngine{"AIDE",AIDE\AREXXPort,"Open AIDE",AIDE\AppIcon,AIDE\PubScreenName}
If *tuiEngine = !_NULL Then error{"Unable to init NTUI environment for AIDE!"} : End
OpenSourceWindow{}
OpenBrowserWindow{}
OpenFileWindow{}
AutoLayout{}
If AIDE\ShowWelcome Then OpenAboutWindow{}

Repeat
  Wait_ -1
  HandleEvents{}
Until AIDE\Quit

ntui_FreeEngine{*tuiEngine} : *tuiEngine=!_NULL


End

Dc.b "$VER: "
version:
Dc.b "AIDE \\__VER_MAJOR.\\__VER_MINOR (\\__DATE_GER__) Build \\__VER_PATCH.\\__VER_BUILD",0
shortversion:
Dc.b "AIDE \\__VER_MAJOR.\\__VER_MINOR",0

