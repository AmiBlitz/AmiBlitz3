; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 8224
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 8
; CursorColumn    = 7
; LabelSearch     = "arexx_parsemessage"
; LabelRemark     = 0
; LabelAll        = 1
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 25
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 25
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 25
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 25
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 1
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 1
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 1
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
NEWTYPE.arexx
  senderName.s
  incomingMsg.s
  incomingParNums.b
  answerFlag.b
  command.s
  parameter1.s
  parameter2.s
  ; result
  resultCode.l
  resultText.s
  ; internal data
  ptr_SourceLine.l
End NEWTYPE
DEFTYPE.arexx arexx
;Dim registeredArexxHosts.s(8)  ; moved to ped as it has to be dimensioned early

.arexx_parseMessage:
  arexx\command = UCase$(arexx_GetNextString{})
  arexx\incomingParNums = 0
  Repeat
    tmpa.s = arexx_GetNextString{}
    If tmpa <> ""
      arexx\incomingParNums + 1
      log_Print{"- parameter " + Str$(arexx\incomingParNums) + " [" + tmpa + "]"}
      If arexx\incomingParNums = 1 Then arexx\parameter1 = Trim$(tmpa)
      If arexx\incomingParNums = 2 Then arexx\parameter2 = Trim$(tmpa)
    EndIf
  Until tmpa = ""

  arexxlist.l = ?ptr_arexxcmd_list
  acom_ptr.l = 0
  While (acom_ptr = 0) AND Peek.l(arexxlist) <> 0
    If Peek.s(Peek.l(arexxlist)) = arexx\command
      acom_ptr = Peek.l(arexxlist + 4)
    Else
      arexxlist + 8
    EndIf
  Wend
Return


.arexx_event:
  arexx\senderName = arexx_GetSenderName{}
  arexx\incomingMsg = arexx_GetCommandString{}
  Gosub arexx_parseMessage
  log_Print{"received Arexxmessage from [" + arexx\senderName + "]: <" + arexx\incomingMsg + ">, Parameters: " + Str$(arexx\incomingParNums)}

  arexx\answerFlag = False

  If acom_ptr.l <> 0
    log_Print{"arexx-command <" + arexx\command + "> found, calling ..."}
    arexx\resultCode = #RC_OK : arexx\resultText = ""
    Call acom_ptr
    log_Print{"function result: " + Str$(arexx\resultCode) + " - " + arexx\resultText}
  Else
    arexx\resultCode = #RC_ERROR : arexx\resultText = "UNKNOWN COMMAND"
    log_Print{"unknown arexx-command <" + arexx\command + ">, ignored..."}
  EndIf
  Gosub arexx_answer_message
Return

.arexx_answer_message:
  If arexx\answerFlag = False
    ;#RC_OK = 0
    ;#RC_WARN = 5
    ;#RC_ERROR = $A
    ;#RC_FATAL = $14
    log_Print{"answering arexxmessage... ["+ arexx\resultText +"]"}
    If arexx\resultText <> ""
      arexx_ReplyMsgString{arexx\resultText}
    Else
      arexx_ReplyMsg{arexx\resultCode}
    EndIf
    arexx\answerFlag = True
  Else
    log_Print{"already answered."}
  EndIf
Return


.arexx_init:
  ArexxPortName.s = "N/A"
  *ArexxPort.MsgPort = arexx_FindPort{"REXX"}
  If *ArexxPort <> 0
    ;-- bereits vorhandenen AB3-Port suchen
    ArexxPortName = "PED"
    For ArexxPortNumber.b = 1 To 9
      If NOT FindPort_(ArexxPortName + "." + Str$(ArexxPortNumber))
        Pop For : Goto exit_arexxloop2
      EndIf
    Next ArexxPortNumber
    exit_arexxloop2:
    ArexxPortName + "." + Str$(ArexxPortNumber)
    *ArexxMsgPort.MsgPort = arexx_Init{ArexxPortName}
    If *ArexxMsgPort <> 0
      ArexxPort_Available.b = True
    EndIf
  Else
    log_Print{"AREXX not running."}
  EndIf
Return

.arexx_free:
  arexx_Free{}
Return


.arexx_sendmessage:
  If ArexxMyMessage.s <> ""
    log_Print{"sending message <" + ArexxMyMessage + "> to registered hosts:"}
    For ai.b = 0 To 7
      If registeredArexxHosts(ai) <> ""
        log_Print{"- " + registeredArexxHosts(ai)}
        If arexx_SendMessage{registeredArexxHosts(ai),ArexxMyMessage}
          log_Print{"send ok"}
        Else
          log_Print{"sending failed to " + registeredArexxHosts(ai),#log_warning}
        EndIf
      EndIf
    Next ai
    log_Print{"sending done."}
  EndIf
Return

; --
; -- Arexx-Command, pointer to function:
; --
.ptr_arexxcmd_list:
 Dc.l str_RUN,          arexxfunc_runexe
 Dc.l str_COMPILE,      arexxfunc_compilerun         
 Dc.l str_PREVDOC,      arexxfunc_prevsource
 Dc.l str_NEXTDOC,      arexxfunc_nextsource         
 Dc.l str_CUT,          arexxfunc_cut                
 Dc.l str_COPY,         arexxfunc_copy               
 Dc.l str_PASTE,        arexxfunc_paste              
 Dc.l str_LOAD,         arexxfunc_load               
 Dc.l str_QUIT,         arexxfunc_quit               
 Dc.l str_LOADNEW,      arexxfunc_loadnew            
 Dc.l str_SAVE,         arexxfunc_save               
 Dc.l str_SAVEAS,       arexxfunc_saveas             
 Dc.l str_NEW,          arexxfunc_new                
 Dc.l str_PRINT,        arexxfunc_print              
 Dc.l str_ERASE,        arexxfunc_erase              
 Dc.l str_TOPLINE,      arexxfunc_topline            
 Dc.l str_BOTTOMLINE,   arexxfunc_bottomline         
 Dc.l str_NEXTLINE,     arexxfunc_nextline 
 Dc.l str_GETLINE,      arexxfunc_getline            
 Dc.l str_PREVLINE,     arexxfunc_prevline           
 Dc.l str_HIDESCREEN,   arexxfunc_screentoback       
 Dc.l str_REDRAW,       arexxfunc_redraw            
 Dc.l str_SCREENNAME,   arexxfunc_screenname         
 Dc.l str_ICONIFY,      arexxfunc_iconify
 Dc.l str_NOTIFYNEWDOC, arexxfunc_notifynewdoc 
 Dc.l str_DONTNOTIFYNEWDOC, arexxfunc_dontnotifynewdoc
 Dc.l str_GETDOCLIST,   arexxfunc_getdoclist     
 Dc.l str_SHOWSCREEN,   arexxfunc_screentofront 
 Dc.l str_GETWORD,      arexxfunc_getword
 Dc.l str_HELP,         arexxfunc_help               
 Dc.l str_HELPTEXT,     arexxfunc_helptext           
 Dc.l str_ACTIVATE,     arexxfunc_activate           
 Dc.l str_GOTODOC,      arexxfunc_gotodoc
; Dc.l str_GETDOCNUM,    arexxfunc_getdocnum         
 Dc.l str_REMEMBERME,   arexxfunc_rememberme         
 Dc.l str_FORGETME,     arexxfunc_forgetme           
 Dc.l str_ABOUT,        arexxfunc_about              
 Dc.l str_VERSION,      arexxfunc_version            
 Dc.l str_NUMLINES,     arexxfunc_numlines           
 Dc.l str_RELOADMENUS,  arexxfunc_reloadmenus
 Dc.l str_MAKEEXEC,     arexxfunc_makeexec           
 Ds.l 4

 ; --
 ; -- arexx-commandlabels
 ; --
 str_GETWORD:           Dc.b "GETWORD",0
 str_COMPILE:           Dc.b "COMPILE",0
 str_SHOWSCREEN:        Dc.b "SHOWSCREEN",0,0
 str_RELOADMENUS:       Dc.b "RELOADMENUS",0
 str_ICONIFY:           Dc.b "ICONIFY",0
 str_ABOUT:             Dc.b "ABOUT",0
 str_NUMLINES:          Dc.b "NUMLINES",0,0
 str_VERSION:           Dc.b "VERSION",0
 str_TOPLINE:           Dc.b "TOPLINE",0
 str_BOTTOMLINE:        Dc.b "BOTTOMLINE",0,0
 str_GETLINE:           Dc.b "GETLINE",0
 str_REDRAW:            Dc.b "REDRAW",0,0
 str_NEXTLINE:          Dc.b "NEXTLINE",0,0
 str_HIDESCREEN:        Dc.b "HIDESCREEN",0,0
 str_PREVLINE:          Dc.b "PREVLINE",0,0
 str_PREVDOC:           Dc.b "PREVDOC",0
 str_NEXTDOC:           Dc.b "NEXTDOC",0
 str_SCREENNAME:        Dc.b "SCREENNAME",0,0
 str_ERASE:             Dc.b "ERASE",0
 str_HELP:              Dc.b "HELP",0,0
 str_HELPTEXT:          Dc.b "HELPTEXT",0,0
 str_NEW:               Dc.b "NEW",0
 str_QUIT:              Dc.b "QUIT",0,0
 str_LOAD:              Dc.b "LOAD",0,0
 str_LOADNEW:           Dc.b "LOADNEW",0
 str_SAVE:              Dc.b "SAVE",0,0
 str_SAVEAS:            Dc.b "SAVEAS",0,0
 str_PRINT:             Dc.b "PRINT",0
 str_REMEMBERME:        Dc.b "REMEMBERME",0,0
 str_FORGETME:          Dc.b "FORGETME",0,0
 str_RUN:               Dc.b "RUN",0
 str_NOTIFYNEWDOC:      Dc.b "NOTIFYNEWDOC",0,0
 str_DONTNOTIFYNEWDOC:  Dc.b "DONTNOTIFYNEWDOC",0,0
 str_GETDOCLIST:        Dc.b "GETDOCLIST",0,0
 str_GOTODOC:           Dc.b "GOTODOC",0
 str_GETDOCNUM:         Dc.b "GETDOCNUM",0
 str_CUT:               Dc.b "CUT",0
 str_COPY:              Dc.b "COPY",0,0
 str_PASTE:             Dc.b "PASTE",0
 str_ACTIVATE:          Dc.b "ACTIVATE",0,0
 str_MAKEEXEC:          Dc.b "MAKEEXEC",0,0



; --
; -- funtions to be executed by appropriate arexx-command
; --
.arexxfunc_activate:
  If sourceWindow\win Then ActivateWindow_ sourceWindow\win
Return

.arexxfunc_rememberme:
  log_Print{"REMEMBERME from " + arexx\senderName}
  already_registered.b = False
  spare_entry.b = -1
  For ai = 0 To 7
    If registeredArexxHosts(ai) = arexx\senderName
      already_registered = True
      Pop If : Pop For: Goto exit_registersearch
    EndIf
    If registeredArexxHosts(ai) = ""
      spare_entry.b = ai
      Pop For : Pop If: Goto exit_registersearch
    EndIf
  Next ai
  exit_registersearch:
  If NOT already_registered AND spare_entry<>-1
    registeredArexxHosts(spare_entry) = arexx\senderName
    arexx\resultText = "SUCCESSFULLY REGISTERED"
  EndIf
Return

.arexxfunc_forgetme:
  reg_found.b = 0
  For ai = 0 To 7
    If registeredArexxHosts(ai) = arexx\senderName
      reg_found = True
      Pop For: Pop If : Goto exit_registersearch2
    EndIf
  Next ai
  exit_registersearch2:
  If reg_found
    registeredArexxHosts(ai) = ""
    arexx\resultText = "SUCCESSFULLY UNREGISTERED"
  EndIf
Return

.arexxfunc_iconify:
  Gosub menu_iconify
Return

.arexxfunc_gotodoc:
;  !asm
;  MOVEA.l loadedfilesbase,A0
;  TST.l D0
;  BEQ.w JL_0_E918
;    JL_0_E912:
;      MOVEA.l (A0),A0
;      SUBQ.l #1,D0
;    BNE.b JL_0_E912
;  JL_0_E918:
;  MOVE.l A0,D0
;  CMP.l actualfile,D0
;  BEQ.w JL_0_E92A
;    JSR selectfile
;  JL_0_E92A:
;  !basic
  arexx\resultCode = #RC_OK : arexx\resultText = ""
RTS

.arexxfunc_getdoclist:
  Gosub storeCurrentSourceData
  arexx\resultCode = #RC_OK : arexx\resultText = Hex$(ped\firstSourceEntry)
Return

.arexxfunc_cut:
  Gosub menu_cut
Return

.arexxfunc_copy:
  Gosub menu_copy
Return

.arexxfunc_paste:
  Gosub menu_paste
Return

.arexxfunc_notifynewdoc:
;  !asm
;  LEA str_arexx_message_doclist,A0
;  MOVEQ.l #$1F,D0
;
;  JL_0_EA44:
;    TST.l (A0)+
;    BEQ.w JL_0_EA54
;  DBF D0,JL_0_EA44
;  MOVEQ.l #$00,D0
;  SUBA.l A0,A0
;  RTS
;
;  JL_0_EA54:
;  MOVE.l ptr_arexx_sendername,-(A0)
;  !basic
RTS

.arexxfunc_dontnotifynewdoc:
;  !asm
;  LEA str_arexx_message_doclist,A0
;  MOVE.l ptr_arexx_sendername,D0
;  MOVEQ.l #$1F,D1
;
;  JL_0_EA6C:
;  CMP.l (A0)+,D0
;   BEQ.w JL_0_EA7A
;   DBF D1,JL_0_EA6C
; BRA.w JL_0_EA7C
;
;  JL_0_EA7A:
;  CLR.l -(A0)
;  JL_0_EA7C:
;  !basic
RTS

.arexxfunc_erase:
  Gosub arexx_answer_message

  ;exit_eventloop = True
  ;exit_loop_class = -2
  ;_menu_item.l = #MENU_QUIT
  ;!asm
  ;MOVEQ.l #$65,D6
  ;MOVEQ.l #-$02,D7
  ;!basic
RTS

.arexxfunc_quit:
  Gosub arexx_answer_message

  exit_eventloop = True
  exit_loop_class = -2
  _menuitem.l = #MENU_QUIT
  ;!asm
  ;MOVEQ.l #$73,D6
  ;MOVEQ.l #-$02,D7
  ;!basic
RTS

.arexxfunc_new:
  Gosub menu_new
Return

.arexxfunc_loadnew:
 If arexx\incomingParNums = 1
    arexx\resultCode = #RC_OK : arexx\resultText = ""
    Gosub menu_new
    loadsourcefilename.s = arexx\parameter1 : Gosub load_source
  Else
    Gosub menu_loadAsNew
  EndIf
Return

.arexxfunc_load:
  If arexx\incomingParNums = 1
    arexx\resultCode = #RC_OK : arexx\resultText = "" : Gosub arexx_answer_message
    loadsourcefilename.s = arexx\parameter1 : Gosub load_source
  Else
    Gosub menu_load
    PED_RedrawSource{}
  EndIf
Return

.arexxfunc_save:
  ped\check_existsfile = True
  Gosub menu_save
  ped\check_existsfile = False
Return

.arexxfunc_saveas:
  If arexx\incomingParNums = 1
    ped\currentDir = dos_PathPart{arexx\parameter1}
    ped\currentFile = dos_FilePart{arexx\parameter1}
    ped\sourceFileComplete = arexx\parameter1

    ped\check_existsfile = True
    Gosub menu_save
    ped\check_existsfile = False

    PED_UpdateStatusArea{#STATUS_REDRAW}
    arexx\resultCode = #RC_OK : arexx\resultText = "" : Gosub arexx_answer_message
  Else
    arexx\resultCode = #RC_ERROR : arexx\resultText = "NO FILENAME GIVEN" : Gosub arexx_answer_message
  EndIf
Return

.arexxfunc_print:
  Gosub menu_print
Return

.arexxfunc_prevsource:
  Gosub menu_previousfile
Return

.arexxfunc_nextsource:
  Gosub menu_nextfile
Return

.arexxfunc_screenname:
  arexx\resultText = ped\defaultPubscreenName
Return

.arexxfunc_redraw:
  PED_RedrawSource{}
Return

.arexxfunc_about:
  Gosub menu_about
Return

.arexxfunc_numlines:
  arexx\resultText = Str$(Peek.l(?comLong_TotalLines))
Return

.arexxfunc_version:
  arexx\resultText = "PED " + !versions
Return

.arexxfunc_topline:
  arexx\ptr_SourceLine = Peek.l(?comPtr_FirstSourceLine)
Return

.arexxfunc_bottomline:
  arexx\ptr_SourceLine = ped\currentSourceEntry\LastSourceLine  ;Peek.l(?comPtr_LastSourceLine)
Return

.arexxfunc_nextline:
  *tempLine.sourceLine = arexx\ptr_SourceLine
  If *tempLine <> 0
    If *tempLine\nextLine
      arexx\ptr_SourceLine = *tempLine\nextLine
      arexx\resultCode = #RC_OK
      Return
    EndIf
  EndIf
  arexx\resultCode = #RC_WARN
Return

.arexxfunc_screentoback:
  ScreenToBack_ sourceWindow\pedScreen
Return

.arexxfunc_screentofront:
  ScreenToFront_ sourceWindow\pedScreen
Return

.arexxfunc_getline:
  *tempLine.sourceLine = arexx\ptr_SourceLine
  If *tempLine <> 0
    arexx\resultText = PED_Detoke{*tempLine}
  Else
    arexx\resultCode = #RC_WARN
  EndIf
Return

.arexxfunc_prevline:
  *tempLine.sourceLine = arexx\ptr_SourceLine
  If *tempLine <> 0
    If *tempLine\previousLine
      arexx\ptr_SourceLine = *tempLine\previousLine
      Return
    EndIf
  EndIf
  arexx\resultCode = #RC_WARN
Return

.arexxfunc_getword:
  *tempLine.sourceLine = arexx\ptr_SourceLine
  If *tempLine <> 0
    strline$ = PED_Detoke{*tempLine}
    arexx\resultText = PED_GetWordAtPos{strline$, Peek.w(?comWord_Column),False}
  Else
    arexx\resultCode = #RC_WARN
  EndIf
Return

.arexxfunc_compilerun:
  _menuitem = #MENU_COMPILERUN
  Gosub call_compilermenuitem
  arexx\resultText = Str$(compile_state)
Return

.arexxfunc_runexe:
  _menuitem = #MENU_RUN
  Gosub call_compilermenuitem
Return


.arexxfunc_makeexec:
  _menuitem = #MENU_CREATEEXE
  Gosub call_compilermenuitem
Return

.arexxfunc_help:
    strline$ = PED_Detoke{ped\ptrCurrentSourceData\CurrentSourceLine}
    tokname$ = PED_GetWordAtPos{strline$, ped\ptrCurrentSourceData\Column,True}
    If tokname$ <> ""
      arexx\resultCode = #RC_OK
      arexx\resultText = PED_GetHelptextFor{tokname$}
    EndIf
Return

.arexxfunc_helptext:
  strline$ = PED_Detoke{ped\ptrCurrentSourceData\CurrentSourceLine}
    tokname$ = PED_GetWordAtPos{strline$, ped\ptrCurrentSourceData\Column,True}
    If tokname$ <> ""
      arexx\resultCode = #RC_OK
      arexx\resultText = PED_GetHelptextFor{tokname$}
    EndIf
Return

.arexxfunc_reloadmenus:
  Gosub init_menus
Return
