; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 80000
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 374
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
*******************************************************************************************
* ted.library.s -- SuperTED run-time library source code
*
* Assemble AND LINK, without startup code, To create ted.library,
*   a LIBS: drawer run-time SHARED library
*
*  Linkage Info:
*  FROM   ted.library.o
*  LIBRARY  LIB:AMIGA.lib
*  To   ted.library
*
* BLink from ted.library.o  LIB LIB:AMIGA.lib To ted.library
* Copyright (c) 1995-1996 Red When Excited Ltd
*
* All rights reserved.
*
*******************************************************************************************

  output  libs:ted.library

  SECTION code

  NOLIST
  INCDIR  "INCLUDES:"
  INCLUDE "LVOs.i"
  INCLUDE "exec/types.i"
  INCLUDE "exec/initializers.i"
  INCLUDE "exec/libraries.i"
  INCLUDE "exec/lists.i"
  INCLUDE "exec/alerts.i"
  INCLUDE "exec/resident.i"
  INCLUDE "libraries/dos.i"

  INCLUDE "include/asmsupp.i"
  INCLUDE "include/tedbase.i"
  INCLUDE "include/ted_rev.i"

  XDEF  InitTable ;- These don't have to be external but it helps
  XDEF  Open    ;- some debuggers to have them globally visible
  XDEF  Close
  XDEF  Expunge
  XDEF  Null
  XDEF  LibName

  XREF  _AbsExecBase

  XLIB  OpenLibrary
  XLIB  CloseLibrary
  XLIB  Alert
  XLIB  FreeMem
  XLIB  Remove

;*****************************
;* First executable location *
;*****************************
Start:  MOVEQ #-1,d0
  RTS

MYPRI EQU 0

RomTag:       ;STRUCTURE RT,0
    Dc.w   RTC_MATCHWORD  ; UWORD RT_MATCHWORD
    Dc.l   RomTag   ; APTR  RT_MATCHTAG
    Dc.l   EndCode  ; APTR  RT_ENDSKIP
    Dc.b   RTF_AUTOINIT ; UBYTE RT_FLAGS
    Dc.b   VERSION  ; UBYTE RT_VERSION  (defined in ted_rev.i)
    Dc.b   NT_LIBRARY ; UBYTE RT_TYPE
    Dc.b   MYPRI    ; BYTE  RT_PRI
    Dc.l   LibName  ; APTR  RT_NAME
    Dc.l   IDString ; APTR  RT_IDSTRING
    Dc.l   InitTable  ; APTR  RT_INIT  table for InitResident()

LibName: tedNAME
IDString: VSTRING

dosName: DOSNAME

  Ds.w  0

InitTable:
  Dc.l  tedBase_SIZEOF  ; size of library base data space
  Dc.l  funcTable ; pointer to function initializers
  Dc.l  dataTable ; pointer to data initializers
  Dc.l  initRoutine ; routine to run


funcTable:

  ;------ standard system routines
  Dc.l  Open
  Dc.l  Close
  Dc.l  Expunge
  Dc.l  Null

  ;------ my libraries definitions
  Dc.l  TEDSetLabelList
  Dc.l  TEDSetLabelCount
  Dc.l  TEDGetLabelList
  Dc.l  TEDGetLabelCount
  Dc.l  TEDSetJumpTable
  Dc.l  TEDGetJumpTable
  Dc.l  TEDError
  Dc.l  TEDSetFirstLine
  Dc.l  TEDSetCurrentLine
  Dc.l  TEDGetFirstLine
  Dc.l  TEDGetCurrentLine
  Dc.l  TEDDetoke
  Dc.l  TEDGetFilename
  Dc.l  TEDGetPathname
  Dc.l  TEDGetVariables
  Dc.l  TEDGetTypes

  ;------ function table end marker
  Dc.l  -1


dataTable:
  INITBYTE  LN_TYPE,NT_LIBRARY
  INITLONG  LN_NAME,LibName
  INITBYTE  LIB_FLAGS,LIBF_SUMUSED!LIBF_CHANGED
  INITWORD  LIB_VERSION,VERSION
  INITWORD  LIB_REVISION,REVISION
  INITLONG  LIB_IDSTRING,IDString

  Dc.l  0

;**************************
;* Initialisation routine *
;**************************
initRoutine:

  ;------ get the library pointer into a convenient A register
  MOVE.l  a5,-(a7)
  MOVE.l  d0,a5

  ;------ save a pointer to exec
  MOVE.l  a6,sb_SysLib(a5)

  ;------ save a pointer to our loaded code
  MOVE.l  a0,sb_SegList(a5)

  ;------ open the dos library
  LEA dosName(pc),a1
  MOVEQ #0,d0
  CALLSYS OpenLibrary

  MOVE.l  d0,sb_DosLib(a5)
; bne.s 1$

  ;------ can't open the dos!  what gives
; ALERT AG_OpenLib!AO_DOSLib

1$:
  ;------ now build the static data that we need
  ;
  ; put your initialization here...
  ;

  MOVE.l  a5,d0
  MOVE.l  (a7)+,a5
  RTS

;------------------------------------------------------------------------------------------
; here begins the system interface commands.  When the user calls OpenLibrary/CloseLibrary/
; RemoveLibrary, this eventually gets translated into a call to the following routines
; (Open/Close/Expunge).  Exec has already put our library pointer in A6 for us.  Exec has
; turned off task switching while in these routines (via Forbid/Permit), so we should not
; take too long in them.
;------------------------------------------------------------------------------------------

  ; Open returns the library pointer in d0 if the open was successful.  If the open failed
  ; then null is returned.  It might fail if we allocated memory on each open, or if only
  ; open application could have the library open at a time...

Open:    ; ( libptr:a6, version:d0 )

  ;------ mark us as having another opener
  ADDQ.w  #1,LIB_OPENCNT(a6)

  ;------ prevent delayed expunges
  BCLR  #LIBB_DELEXP,sb_Flags(a6)

  MOVE.l  a6,d0
  RTS

Close:     ; ( libptr:a6 )

  ;------ set the return value
  MOVEQ #0,d0

  ;------ mark us as having one fewer openers
  SUBQ.w  #1,LIB_OPENCNT(a6)

  ;------ see if there is anyone left with us open
  BNE.s 1$

  ;------ see if we have a delayed expunge pending
  BTST  #LIBB_DELEXP,sb_Flags(a6)
  BEQ.s 1$

  ;------ do the expunge
  BSR Expunge
1$:
  RTS

  ; There are two different things that might be returned from the Expunge routine.  If
  ; the library is no longer open then Expunge should return the segment list (as given
  ; to Init).  Otherwise Expunge should set the delayed expunge flag and return NULL.
  ;
  ; One other important note: because Expunge is called from the memory allocator, it may
  ; NEVER Wait() or otherwise take long time to complete.

Expunge:  ; ( libptr: a6 )

  MOVEM.l d2/a5/a6,-(a7)
  MOVE.l  a6,a5
  MOVE.l  sb_SysLib(a5),a6

  ;------ see if anyone has us open
  TST.w LIB_OPENCNT(a5)
  BEQ 1$

  ;------ it is still open.  set the delayed expunge flag
  BSET  #LIBB_DELEXP,sb_Flags(a5)
  MOVEQ #0,d0
  BRA.s Expunge_End

1$:
  ;------ go ahead and get rid of us.  Store our seglist in d2
  MOVE.l  sb_SegList(a5),d2

  ;------ unlink from library list
  MOVE.l  a5,a1
  CALLSYS Remove

  ;
  ; device specific closings here...
  ;

  ;------ close the dos library
  MOVE.l  sb_DosLib(a5),a1
  CALLSYS CloseLibrary

  ;------ free our memory
  MOVEQ #0,d0
  MOVE.l  a5,a1
  MOVE.w  LIB_NEGSIZE(a5),d0

  SUB.l d0,a1
  ADD.w LIB_POSSIZE(a5),d0

  CALLSYS FreeMem

  ;------ set up our return value
  MOVE.l  d2,d0

Expunge_End:
  MOVEM.l (a7)+,d2/a5/a6
  RTS

Null:
  MOVEQ #0,d0
  RTS

;------------------------------------------------------------------------------------------
; Here begins the library specific functions.
;------------------------------------------------------------------------------------------




;*------------------------*
;-    TEDSetLabelList     -
;- Set the pointer to the -
;- label list.            -
;*------------------------*
.TEDSetLabelList:
  MOVE.l  a0,mice
  RTS


;*------------------------*
;-   TEDSetLabelCount     -
;- Set the pointer to the -
;- label count.           -
;*------------------------*
.TEDSetLabelCount:
  MOVE.l  a0,nummice
  RTS


;*------------------------*
;-    TEDSetJumpTable     -
;- Set the pointer to Teds-
;- jump table.            -
;*------------------------*
.TEDSetJumpTable:
  MOVE.l  a0,comdata
  RTS


;*------------------------*
;-     TEDSetFirstLine    -
;- Store pointer to the   -
;- first line ptr.        -
;*------------------------*
.TEDSetFirstLine:
  MOVE.l  a0,firstline
  RTS


;*------------------------*
;-    TEDSetCurrentLine   -
;- Store pointer to the   -
;- current line ptr.      -
;*------------------------*
.TEDSetCurrentLine:
  MOVE.l  a0,thisline
  RTS




;*------------------------*
;-    TEDGetLabelList     -
;- Get the the label list -
;*------------------------*
.TEDGetLabelList:
  MOVE.l  mice,a0
  MOVE.l  (a0),d0
  RTS





;*------------------------*
;-    TEDGetLabelCount    -
;- Get the the label count-
;*------------------------*
.TEDGetLabelCount:
  MOVE.l  nummice,a0
  MOVEQ #0,d0
  MOVE.w  (a0),d0
  RTS


;*------------------------*
;-    TEDGetJumpTable     -
;- Get the pointer to Teds-
;- jump table.            -
;*------------------------*
.TEDGetJumpTable:
  MOVE.l  comdata,d0
  RTS


;*------------------------*
;-       TEDError         -
;- Bring up a Ted error   -
;- requester              -
;*------------------------*
.TEDError:
  MOVE.l  comdata,a1
  LEA 12(a1),a1
  MOVE.l  (a1),a1
  JMP (a1)


;*------------------------*
;-     TEDGetFirstLine    -
;- Get the first line ptr -
;*------------------------*
.TEDGetFirstLine:
  MOVE.l  firstline,a0
  MOVE.l  (a0),d0
  RTS


;*------------------------*
;-    TEDGetCurrentLine   -
;- Get the current line   -
;*------------------------*
.TEDGetCurrentLine:
  MOVE.l  thisline,a0
  MOVE.l  (a0),d0
  RTS



.TEDDetoke:
  MOVEM.l d2-d7/a2-a5,-(a7)
  MOVE.l  comdata,a2
  LEA 100(a2),a2
  MOVE.l  (a2),a2
  LEA linebuffer(pc),a1
  JSR (a2)
  MOVEM.l (a7)+,d2-d7/a2-a5
  MOVE.l  #linebuffer,d0
  RTS

.TEDGetFilename:
  MOVE.l  a2,-(a7)
  MOVE.l  comdata,a1
  LEA 108(a1),a1
  MOVE.l  (a1)+,a0
  LEA linebuffer(pc),a2
.loopy: MOVE.b  (a0)+,(a2)+
  BNE .loopy
  MOVE.l  (a7)+,a2
  MOVE.l  #linebuffer,d0
  RTS



.TEDGetPathname:
  MOVE.l  a2,-(a7)
  MOVE.l  comdata,a1
  LEA 104(a1),a1
  MOVE.l  (a1)+,a0
  LEA linebuffer(pc),a2
.loopy: MOVE.b  (a0)+,(a2)+
  BNE .loopy
  MOVE.l  (a7)+,a2
  MOVE.l  #linebuffer,d0
  RTS


.TEDGetTypes:
  MOVE.l  comdata,a1
  MOVE.l  116(a1),a1
  MOVE.l  -2(a1),d0
  RTS



.TEDGetVariables:
  MOVE.l  comdata,a1
  MOVE.l  112(a1),a1
  MOVE.l  -2(a1),d0
  RTS

mice:       Dc.l  0
nummice:    Dc.l  0
comdata:    Dc.l  0
firstline:  Dc.l  0
thisline:   Dc.l  0
linebuffer: Dcb.b 255,0

EndCode:

  End

