; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "h0:w-pr/Blitz2/blitzlibs/patchlibs"
; ExeFile         = "displaylib.obj"
; CreateIcon      = 1
; Residents       = "blitzlibs:libmacs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 170
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 10
; LabelAll        = 50
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
; *********************************************************
; *                                                       *
; *                  display lib                          *
; *                                                       *
; *********************************************************

; new for bum5
; aga modes, all relative position
; res = flags|mode|width|bps
;       (flags=smooth|ham|dpf|???)
; fmode | width | resolution | ham ehb dpf smooth | bitplanes

; bum7
; ham8 mode working properly (flips bitplane pointers)
; ehb enable now switched (was disable)
; short version of initcoplist added
; smoothscroll set and no x,y in displaybitmap bug fixed
; force ntsc?

; bug when extended sprite leaves top of screen???

!libheader{#displaylib,init,0,finit,errs}

!dumtoke{"CopList","",_toke}

!astatement
!args {#word,#long}
!libs {#displaylib,$1380,#spriteslib,#la0,#displaylib,$0604}
!subs {_initcoplist2,0,0}
!args {#word,#word,#word,#long,#word,#word,#word}
!libs {#displaylib,$1380,#spriteslib,#la0,#displaylib,$0604}
!subs {_initcoplist,0,0}
!name {"InitCopList","CopList#[,type]|[,ypos,height,type,sprites,colors,numcustoms]"}

!astatement
!repargs {0,1,#push|#word}
!libs {#displaylib,#ba0}
!subs {_createdisplay,1,0}
!name {"CreateDisplay","CopList#[,CopList#..]"}

!astatement
;
!args {#word,#word}
!libs {#displaylib,$1380,#bitmaplib,$1081}
!subs {_displaybmap,_checkcoplist,0}
!args {#word,#word,#quick,#word}
!libs {#displaylib,$1380,#bitmaplib,$1081}
!subs {_displaybmap2,_checkcoplist,0}
;
!args {#word,#word,#word}
!libs {#displaylib,$1380,#bitmaplib,$1081,#bitmaplib,$1182}
!subs {_displaydbmap,_checkcoplist,0}
!args {#word,#word,#quick,#word,#word,#quick,#word}
!libs {#displaylib,$1380,#bitmaplib,$1081,#bitmaplib,$1184}
!subs {_displaydbmap2,_checkcoplist,0}
;
!name {"DisplayBitMap","CopList#,bmap[,x,y] [,bmap[,x,y]]"}

!astatement
!args {#word,#word,#quick,#word,#word}
!libs {#spriteslib,$1181,#displaylib,$1380}
!subs {_displaysprite,_checkcoplist,0}
!name {"DisplaySprite","CopList#,Sprite#,X,Y,Sprite Channel"}

!astatement
!args {#word,#word}
!libs {#displaylib,$1380,#palettelib,$1081}
!subs {_displaypalette,_checkcoplist,0}
!args {#word,#word,#word}
!libs {#displaylib,$1380,#palettelib,$1081}
!subs {_displaypalette2,_checkcoplist,0}
!args {#word,#word,#word,#word}
!libs {#displaylib,$1380,#palettelib,$1081}
!subs {_displaypalette3,_checkcoplist,0}
!name {"DisplayPalette","CopList#,Palette# [,coloroffset] [,coloroffset,bankoffset]"}

!astatement
!args {#word,#word,#word,#word}
!libs {#displaylib,$1380}
!subs {_dobplcons,_checkcoplist,0}
!name {"DisplayControls","CopList#,BPLCON2,BPLCON3,BPLCON4"}

!astatement
!args {#word,#word,#word,#word,#word,#word}
!libs {#displaylib,$1380}
!subs {_doadjust,_checkcoplist,0}
!name {"DisplayAdjust","CopList#,fetchwid,ddfstrt,ddfstop,diwstrt,diwstop"}

!astatement
!args {#word,#word,#word,#word,#word,#word,word}
!libs {#displaylib,$1380,#palettelib,$1083}
!subs {_customcols2,_checkcoplist,0}
!args {#word,#word,#word,#word,#word,#word}
!libs {#displaylib,$1380,#palettelib,$1083}
!subs {_customcols,_checkcoplist,0}
!name {"CustomColors","CopList#,CCOffset,YPos,Palette,startcol,numcols[,thru256flag]  ;ecs=2+n aga=2+n+n+n/16"}

!astatement
!args {#word,#word,#word,#string}
!libs {#displaylib,$1380}
!subs {_customstring,_checkcoplist,0}
!name {"CustomString","CopList#,CCOffset,YPos,Copper$  ;2+n {n=len(a$)/4}"}

!astatement               ;create double scan modulo
!args {#word,#word}
!libs {#displaylib,$1380}
!subs {_displaydblscan0,_checkcoplist,0}
!args {#word,#word,#word}
!libs {#displaylib,$1380}
!subs {_displaydblscan,_checkcoplist,0}
!name {"DisplayDblScan","CopList#,Mode[,copoffset]   ;2"}

!astatement
!args {#word,#word,#word}
!libs {#displaylib,$1380,#palettelib,$1282}
!subs {_displayrainbow0,_checkcoplist,0}
!args {#word,#word,#word,#word}
!libs {#displaylib,$1380,#palettelib,$1282}
!subs {_displayrainbow,_checkcoplist,0}
!name {"DisplayRainbow","CopList#,Register,Palette[,copoffset] ;ecs=1 aga=4"}

!astatement
!args {#word,#word,#word,#word,#word,#word}
!libs {#displaylib,$1380}
!subs {_displayrgb0,_checkcoplist,0}
!args {#word,#word,#word,#word,#word,#word,#word}
!libs {#displaylib,$1380}
!subs {_displayrgb,_checkcoplist,0}
!name {"DisplayRGB","CopList#,Register,line,r,g,b[,copoffset] ;ecs=1 aga=4"}

!astatement
!args {#word,#word,#string}
!libs {#displaylib,$1380}
!subs {_displayuser0,_checkcoplist,0}
!args {#word,#word,#string,#word}
!libs {#displaylib,$1380}
!subs {_displayuser,_checkcoplist,0}
!name {"DisplayUser","CopList#,Line,String[,Offset]"}

!astatement
!args {#word,#long,#long}
!libs {#displaylib,$1380}
!subs {_displayscroll0,_checkcoplist,0}
!args {#word,#long,#long,#word}
!libs {#displaylib,$1380}
!subs {_displayscroll,_checkcoplist,0}
!name {"DisplayScroll","CopList#,&xpos.q(n),&xpos.q(n)[,Offset]   ;3"}

!astatement
!args {#word,#word,#word,#word}
!libs {#spriteslib,$1181,#displaylib,$1380}
!subs {_customsprites,_checkcoplist,0}
!name {"CustomSprites","CopList#,CCOffset,YPos,NumSprites ;4n+2"}

!astatement
!args {#word,#word,#word,#word,#word,#word}
!libs {#displaylib,$1380}
!subs {_customchunky,_checkcoplist,0}
!args {#word,#word,#word,#word,#word,#word,#word}
!libs {#displaylib,$1380}
!subs {_customchunky2,_checkcoplist,0}
!name {"CustomChunky","CopList#,CCOffset,YPos,width,height,res[,splitpos] ;4n+2"}

!afunction{#long}
!args {#word,#word}
!libs
!subs {_customchunkysize,0,0}
!name {"CustomChunkySize","width,height"}

!astatement
!args {#word}
!libs
!subs {_setgenlock,0,0}
!name {"DisplayGenlock","BPLCON0     ;2=use external sync 4=interlace"}

!astatement
!args {#word,#word,#word,#word}
!libs {#displaylib,$1380}
!subs {AJL_0_1116,_checkcoplist,0}
!name {"DisplayBitmapKK","CopList#,bmap,x,offset.w"}

;Even
;  Dc.b 0
;  Dc.b $01,$00,$00 ;...
;  Ds.w 1
;  Dc.b $00,$03,$02,$02 ;....
;  Dc.b $02,$00,$00,$8F ;....
;  Dc.b $13,$80,$00,$A0 ;....
;  Dc.b $10,$81,$00,$00 ;....
;  Dc.l _checkcoplist
;  Dc.l AJL_0_1116
;  Ds.l 1
;  Dc.b $FF,$FF,$00,$00 ;....
;  Ds.l 1
;  Dc.b "DisplayBitMapKK",0
;  Dc.b "CopList#,bmap,x,offset.w",0
;  Even
;
;

_load:!nullsub{0,0,0}
_save:!nullsub{0,0,0}
_use:!nullsub{0,0,0}
_free:!nullsub{_freecoplist,0,0}

init:!nullsub{_codeinit,0,0}
finit:!nullsub{_codefinit,0,0}

!libfin{_toke,_load,_save,_use,_free,10,7} ;128 bytes for a mycop entry

;----------------------------------------------------------------------------------
; macros constants and structures
;----------------------------------------------------------------------------------
JL_0_1114:
 RTS

AJL_0_1116:
  MOVEQ.l #$00,D7
  MOVE.w D2,D7
  MOVEA.l $14(A3),A2
  MOVE.w $26(A3),D0
   BEQ.w JL_0_1114
  SUBQ.w #1,D0
  ADDQ.l #8,A0
JL_0_112A:
  MOVE.l (A0)+,D1
  ADD.l D7,D1
  MOVE.w D1,$6(A2)
  SWAP D1
  MOVE.w D1,$2(A2)
  ADDQ.w #8,A2
   DBF D0,JL_0_112A
 RTS


Macro BlitWait:BTST.b#6,2(a2):bw`@:BTST.b#6,2(a2):BNE bw`@:End Macro

#stdcops=10+8+6+3+3+1+1+2+1+3+6 ;spritecludge+wait+ctrl+cons+shows+waiteol+dmaon+wait+dmaoff+jump

;res= ham/ehb/dpf/smooth | res/fetch | width | bitplanes

;coplist = copctrl | bps | sprites | cols | wait | dmaon | custom | wait | dmaoff

NEWTYPE .copctrl fmode.l:diwstrt:diwstop:ddfstrt:ddfstop:bpcon0:End NEWTYPE

NEWTYPE .table maxbp.w:fetchwid:xmask:xrshift:adjwid:adjstop:ctrl.copctrl:End NEWTYPE

NEWTYPE .mycop
  size.l            ;0 = not initialised
  coppos.l          ;location in chipmem
  colors.l
  sprites.l
  bpcons.l
  bplanes.l
  dot.l
  customs.l
  dob.l
  bot.w                ;ypos of last copper before bottom of display
  numbp.w:colpokes.w            ;limits
  fetchwid.w:xand:xshift        ;for show calculations (3 words)
  ypos.w:height:res
  numsprites.w:numcols
  ;
  numcustoms.w:cpline
  ;
  x0.q:x1.q                           ;displaybitmap x positions
  ;
  bplcon3.w                           ;main color bank register
  aga.w                               ;24bit=$8000 fetch = $00,$10,$20,$30
  resshift.w                          ;lo,hi,shi = 2 1 0
  setup.w                             ;lines taken for setup
  cblow.w                             ;NOTUSED
  sfetch.w:spres:spif:spwid:sspwid    ;sprite mode for display
  ham8.w                              ;stupid fucking cludge
  csprites.l
  cchunky.l                           ;96 location of copperchunky
  chy.w:chw.w:chh:chr:chc:pad0        ;   ypos width height resolution mod
  cchunky2.l                          ;96 location of copperchunky
  chy2.w:chw2.w:chh2:chr2:chc2:spri   ;   ypos width height resolution mod
End NEWTYPE

#dmaoff=$0960120  ;was 120
#dmaon=$0968120   ;was 8120

#sproff=$0960020  ;was 0020
#spron=$0968020   ;was 0020

;#waitbh=$ffe1fffe      ;was e1

#waitbh=$ffe1fffe      ;was e1
#nowcop=$01fe0000      ;$0001fffe
#copnop=$01fe0000
#waitend=$fffffffe
#strobe1=$8a0001

Macro t {SizeOf.table\`1}(a0):End Macro
Macro c {SizeOf.copctrl\`1}(a1):End Macro
Macro m {SizeOf.mycop\`1}(a3):End Macro

;----------------------------------------------------------------------------------
; main initilisation code
;----------------------------------------------------------------------------------

_codeinit:
  MOVE.l#32,d0:MOVE.l#65538,d1:ALibJsr $c002:MOVE.l d0,mysprite
  MOVE d0,spp+6:SWAP d0:MOVE d0,spp+2
  MOVE $dff07c,d0:AND #255,d0:CMP #248,d0:BEQ isaga:CLR agamac:RTS
  isaga:MOVE#-1,agamac:RTS

_codefinit:
  RTS

_doadjust:
  MOVE.l !m{coppos},a1:ADDQ#8,a1   ;12,a1 ;sproff+wait
  ADD d1,!m{fetchwid}
  ADD d2,!c{ddfstrt+2}
  ADD d3,!c{ddfstop+2}
  ADD d4,!c{diwstrt+2}
  ADD d5,!c{diwstop+2}
  RTS

_dobplcons:
  MOVE.l !m{bpcons},a0:MOVEM.l (a0),d4-d6
  EOR d1,d4:EOR d2,d5:EOR d3,d6:EOR d2,!m{bplcon3}
  MOVEM.l d4-d6,(a0):RTS

colup:Dc.w 0,2,4,8,16,32,64,128,256,256,256,256,256,256,256,256


_setgenlock:
  MOVE d0,genlock:RTS

genlock:Dc 0
slup:Dc 0,4,12
shup:Dc 2,1,0
swup:Dc 8,16,32

agaflag:Dc 0
mysprite:Dc.l 0
agamac:Dc 0

_initcoplist2:     ;quick version
  ;
  MOVE.l d1,d3:MOVE#44,d1:MOVE #256,d2
  MOVE d3,d5:AND#15,d5:ADD d5,d5:MOVE colup(pc,d5),d5
  BTST #5,d3:BEQ nodpf:LSR#1,d5:nodpf
  BTST #6,d3:BEQ noehb:MOVE #32,d5:noehb
  MOVEQ #8,d4:LEA colup+2(pc),a2

_initcoplist:
  ;
  MOVE.l a3,0(a5,d6) ;make used
  ;
  MOVE (a0),d0:MOVE d0,!m{spif}:ADD #2,!m{spif}:ADD d0,d0
  MOVE slup(pc,d0),!m{sfetch}:MOVE shup(pc,d0),!m{spres}
  MOVE swup(pc,d0),!m{spwid}
  ;
  CLR !m{ham8}:MOVE d3,d6:AND #$8f,d6:CMP.b #$88,d6:BNE nme:MOVE#-1,!m{ham8}:nme
  ;
  MOVEM d1-d5,!m{ypos}:MOVE d1,!m{bot}:BSR _freecoplist
  ;
calccustoms:
  MOVE -(a2),d6:MOVE d6,!m{numcustoms}:BPL checkaga
  NEG d6:ADDQ#1,d6:ASL#2,d6:MOVE d6,!m{cpline}:LSR#2,d6
  SUBQ#1,d2:MULU d2,d6:MOVE d6,!m{numcustoms}
checkaga:
  MOVE.l d3,d0:LSR#5,d0:LSR.l#1,d0:AND #$80c0,d0:MOVE d0,!m{aga}
  BPL calcsize:TST d5:BEQ calcsize
  MOVE d5,d7:SUBQ#1,d7:LSR#5,d7:ADDQ#1,d7:ADD d7,d7:ADD d5,d5:ADD d7,d5
calcsize:
  MOVE d5,!m{colpokes}:AND#15,d3:MOVE d3,!m{numbp}:ADD d3,d3
  MOVEQ#0,d0:MOVE d3,d0:ASL#2,d4:ADD d4,d0:ADD d5,d0:ADD d6,d0
  ADD #stdcops,d0:ASL.l#2,d0:MOVE.l d0,!m{size}
  ;
  MOVEQ#2,d1:MOVE.l#65538,d1:ALibJsr$c002
  ;
  MOVE.l d0,!m{coppos}:MOVE.l d0,a1:MOVE !m{res},d0
firstwait:
  MOVE.l #copnop,d7:MOVE.l d7,(a1)+:MOVE.l d7,(a1)+
ctrl1:
  LEA table(pc),a0:MOVE d0,d1:AND #$300,d1:MOVE.b !m{aga+1},d1
  ADD d1,a0:LSR#8,d1:MOVEQ#2,d2:SUB d1,d2:MOVE d2,!m{resshift}
  ;
  MOVEM.l !t{ctrl},d2-d7:OR !m{sfetch},d2:OR genlock(pc),d7:MOVEM.l d2-d7,(a1)   ;copy ctrl
  ;
  MOVEM !t{fetchwid},d1-d3:MOVEM d1-d3,!m{fetchwid}            ;constants
  ;
  MOVEM !t{adjwid},d1-d2:BTST #4,d0:BEQ notsc
  ADD d1,!m{fetchwid}:SUB d2,!c{ddfstrt+2}:notsc
  ;
  MOVE!m{numbp},d1:CMP!t{maxbp},d1:BGT maxbperr:ADD d1,d1
  LEA bpb(pc),a2:MOVE 0(a2,d1),d1                               ;bpcon0
  BTST #7,d0:BEQ notham:BSET#11,d1:notham
  BTST #5,d0:BEQ notdpf:BSET#10,d1:notdpf:OR d1,!c{bpcon0+2}
  LEA 24(a1),a1:MOVE.l #copnop,d7

cols:
  MOVE.l a1,!m{colors}:MOVE !m{colpokes},d1:BEQ sprites:SUBQ#1,d1
  nxcol:MOVE.l d7,(a1)+:DBRA d1,nxcol

sprites:
  MOVE.l a1,!m{sprites}:MOVE !m{numsprites},d1:BEQ ctrl2:SUBQ#1,d1:MOVEQ#4,d2
  SWAP d2:MOVEM.l spp(pc),d3-d6:nxspri:MOVEM.l d3-d6,(a1):LEA16(a1),a1
  ADD.l d2,d3:ADD.l d2,d4:ADD.l d2,d3:ADD.l d2,d4:ADD.l d2,d5:ADD.l d2,d6
  DBRA d1,nxspri     ;:MOVE.l #spron,(a1)+

ctrl2
  MOVE.la1,!m{bpcons}
  MOVEM.lbcp(pc),d1-d6:BTST#6,d0:BEQ notehb:BCLR #9,d1:notehb
  AND#$c00,d0:LSR#4,d0:OR d0,d2
  LSR#6,d0:BEQ noo:SUBQ#1,d0:noo:MOVE d0,!m{spri}
  MOVEM.ld1-d6,(a1):ADD#24,a1:MOVE d2,!m{bplcon3}
  MOVE !m{spwid},d1:LSR d0,d1:MOVE d1,!m{sspwid}
bps:
  MOVE.l a1,!m{bplanes}:MOVE.l #$e00000,d0:MOVE !m{numbp},d1:BEQ dot
  ADD d1,d1:SUBQ#1,d1:MOVEQ#2,d2:SWAP d2
  nxbp:MOVE.l d0,(a1)+:ADD.l d2,d0:DBRA d1,nxbp
dot:
  MOVE.l a1,d0:SUB.l !m{coppos},d0:DIVU #55*4+2,d0:ADDQ#3,d0:MOVE d0,!m{setup} ;was 2
  MOVE.l a1,!m{dot}:MOVE.l d7,(a1)+:MOVE.l d7,(a1)+:MOVE.l #dmaon,(a1)+
customs:
  MOVE.l a1,!m{customs}:MOVE !m{cpline},d2:BNE lino
  MOVE!m{numcustoms},d1:BEQ dob:SUBQ#1,d1:nxcus:MOVE.l d7,(a1)+:DBRA d1,nxcus:BRA dob
lino:
  LSR#2,d2:SUBQ#2,d2
  MOVE.l #nowcop,d5:MOVE !m{ypos},d0:SUBQ#1,d0:MOVE !m{height},d1:SUBQ#2,d1
nxlino:
  MOVE.b d0,(a1)+:MOVE.b#$e1,(a1)+:MOVE #$fffe,(a1)+      ;wait eol
  MOVE d2,d3:nxcp:MOVE.l d7,(a1)+:DBRA d3,nxcp
  ADDQ#1,d0:DBRA d1,nxlino:SUBQ#1,d0:MOVE d0,!m{bot}
dob:
;  MOVE.l #$1800fff,-4(a1)
  MOVE.l a1,!m{dob}:MOVE.l d7,(a1)+:MOVE.l d7,(a1)+:MOVE.l #dmaoff,(a1)+
  RTS

bpb:Dc 0,$1000,$2000,$3000,$4000,$5000,$6000,$7000,$10,$10,$10,$10,$10,$10,$10,$10
bcp:Dc $104,$224,$106,$c00,$10c,$11,$102,0,$108,0,$10a,0 ;3f
spp:Dc $140,0,$142,0,$120,0,$122,0  ;3006 4006

_freecoplist:
  MOVE.l !m{size},d0:BEQ dun:MOVE.l !m{coppos},a1:ALibJsr $c003
  MOVEQ#0,d0:MOVE.l d0,!m{size}:MOVE.w d0,!m{cpline}:dun:RTS

table:   ;64 bytes each maxbp.w:fetchwid:xmask:xrshift:adjwid:adjstop:ctrl.copctrl
  Dc 8,40,$3f,5,2,08,$1fc,0,$8e,$0081,$90,$70c1,$92,$38,$94,$d0,$100,$201:Ds 14
  Dc 8,40,$7f,5,4,16,$1fc,1,$8e,$0081,$90,$70c1,$92,$38,$94,$c0,$100,$201:Ds 14
  Dc 8,40,$7f,5,4,16,$1fc,2,$8e,$0081,$90,$70c1,$92,$38,$94,$c0,$100,$201:Ds 14
  Dc 8,40,$ff,5,8,32,$1fc,3,$8e,$0081,$90,$70c1,$92,$38,$94,$b8,$100,$201:Ds 14

  Dc 8,80,$1f,4,04,04,$1fc,0,$8e,$0081,$90,$70c1,$92,$3c,$94,$d4,$100,$8201:Ds 14
  Dc 8,80,$3f,4,04,08,$1fc,1,$8e,$0081,$90,$70c1,$92,$38,$94,$d0,$100,$8201:Ds 14
  Dc 8,80,$3f,4,04,08,$1fc,2,$8e,$0081,$90,$70c1,$92,$38,$94,$d0,$100,$8201:Ds 14
  Dc 8,80,$7f,4,08,16,$1fc,3,$8e,$0081,$90,$70c1,$92,$38,$94,$c0,$100,$8201:Ds 14

  Dc 8,160,$0f,3,00,00,$1fc,0,$8e,$0081,$90,$70c1,$92,$3e,$94,$d6,$100,$241:Ds 14
  Dc 8,160,$1f,3,04,04,$1fc,1,$8e,$0081,$90,$70c1,$92,$38,$94,$d0,$100,$241:Ds 14
  Dc 8,160,$1f,3,04,04,$1fc,2,$8e,$0081,$90,$70c1,$92,$38,$94,$d0,$100,$241:Ds 14
  Dc 8,160,$3f,3,08,08,$1fc,3,$8e,$0081,$90,$70c1,$92,$38,$94,$d0,$100,$241:Ds 14

;----------------------------------------------------------------------------------
; createdisplay links up coplists into a display
;----------------------------------------------------------------------------------

_createdisplay:
  SUBQ#1,d7:BPL cool:RTS:cool:MOVE -(a2),d0
  ASL#7,d0:LEA 0(a0,d0),a3:TST.l (a3):BEQ uniniterr:MOVE.l !m{coppos},topcop
  MOVE #0,lastwait
nxlink:
  MOVEM !m{ypos},d1-d2:SUB !m{setup},d1:MOVE.l !m{coppos},a1
  MOVE.l #nowcop,d0:BTST #8,d1:BEQ nolo:BTST #0,lastwait:BNE nolo:MOVE.l#waitbh,d0
  nolo:MOVE.l d0,(a1)+:MOVE.bd1,(a1)+:MOVE.b#$e1,(a1)+:MOVE #$fffe,(a1)+ ;bigwait +8
  MOVE d1,lastwait:ADD !m{setup},d1:MOVE.l !m{dot},a1
  MOVE.l #nowcop,d0:BTST #8,d1:BEQ nolo1:BTST #0,lastwait:BNE nolo1:MOVE.l#waitbh,d0
  nolo1:MOVE.l d0,(a1)+:MOVE.bd1,(a1)+:MOVE.b#$01,(a1)+:MOVE #$fffe,(a1)+ ;bigwait +8
  ADD d2,d1:MOVE.l !m{dob},a1
  MOVE.l #nowcop,d0:BTST #8,d1:BEQ nolo2:BTST #0,!m{bot}:BNE nolo2:MOVE.l#waitbh,d0
  nolo2:MOVE.l d0,(a1)+:MOVE.bd1,(a1)+:MOVE.b#1,(a1)+:MOVE #$fffe,(a1)+ ;bigwait +8
  MOVE d1,lastwait
dolink:
  ADDQ#4,a1:DBRA d7,another:MOVE.l #waitend,(a1)
  MOVE.l topcop(pc),a0:;MOVE #$0020,2(a0)
  LEA $dff000,a2:!BlitWait:MOVE.l a0,$80(a2):ALibJsr $c205:RTS
another:
  MOVE -(a2),d0:ASL#7,d0:LEA 0(a0,d0),a3:TST.l (a3):BEQ uniniterr
  MOVE.l !m{coppos},d0
  MOVE #$86,(a1)+:MOVE d0,(a1)+:MOVE#$84,(a1)+:SWAP d0:MOVE d0,(a1)+
  MOVE.l #strobe1,(a1):BRA nxlink

lastwait:Dc 0
topcop:Dc.l 0

;----------------------------------------------------------------------------------
; display bitmap routines
;----------------------------------------------------------------------------------

_displaybmap2:  ;x,y=d2,d3
  MOVE.l d2,!m{x0}:MOVE.l d2,!m{x1}
  MOVE !m{resshift},d7:ASL.ld7,d2:SWAP d2
  MOVE.l !m{bplanes},a2:MOVE !m{numbp},d0:BEQ nobo2:SUBQ#1,d0
  MOVEM !m{fetchwid},d5-d7:MOVE (a0),d1:SUB d5,d1:MOVE d1,-6(a2):MOVE d1,-2(a2)
  ;
  MOVE d2,d4:AND d6,d4:MOVE !m{ham8},d5                       ;:BSET#7,d4
  ADD d4,d4:LEA bp1(pc),a3:MOVE 0(a3,d4),-10(a2)
  NOT d6:AND d6,d2:EXT.l d2:ASR d7,d2
  MULU (a0),d3:ADD.l d3,d2 ;offset
  LEA 8(a0),a0:ADDQ#2,a2:TST d5:BEQ wobp2
  ;
  MOVE.l 24(a0),d1:ADD.l d2,d1:MOVE d1,4(a2):SWAP d1:MOVE d1,(a2):ADDQ#8,a2
  MOVE.l 28(a0),d1:ADD.l d2,d1:MOVE d1,4(a2):SWAP d1:MOVE d1,(a2):ADDQ#8,a2
  SUBQ#2,d0
  ;
  wobp2:MOVE.l (a0)+,d1:ADD.l d2,d1:MOVE d1,4(a2):SWAP d1:MOVE d1,(a2)
  ADDQ#8,a2:DBRA d0,wobp2:nobo2:RTS

_displaybmap:
  BTST #4,!m{res+1}:BEQ nots:MOVEQ#0,d2:MOVEQ#0,d3:BRA _displaybmap2:nots
  MOVEM.l d2-d3,!m{x0}
  MOVE.l !m{bplanes},a2:MOVE !m{numbp},d0:BEQ nobo:SUBQ#1,d0
  MOVE (a0),d1:SUB !m{fetchwid},d1:MOVE d1,-6(a2):MOVE d1,-2(a2)
  LEA 8(a0),a0:ADDQ#2,a2:TST !m{ham8}:BEQ wobp
  ;
  MOVE 24(a0),(a2):ADDQ#4,a2:MOVE 26(a0),(a2):ADDQ#4,a2
  MOVE 28(a0),(a2):ADDQ#4,a2:MOVE 30(a0),(a2):ADDQ#4,a2:SUBQ#2,d0
  ;
  wobp:MOVE (a0)+,(a2):ADDQ#4,a2:MOVE (a0)+,(a2):ADDQ#4,a2:DBRA d0,wobp
  nobo:RTS

_displaydbmap2:    ;xy1=d2d3 xy2=d5d6
  MOVE -(a2),d6:scludge:MOVEM.l d2/d5,!m{x0}
  MOVE !m{resshift},d7:ASL.ld7,d2:ASL.l d7,d5:SWAP d2:SWAP d5
  MOVE.l !m{bplanes},a2:MOVE !m{numbp},d0:BEQ nojo2:MOVE d0,-(a7)
  MOVEM !m{fetchwid},d0/d4/d7:LEA bp1(pc),a3
  MOVE (a0),d1:MULU d1,d3:SUB d0,d1:MOVE d1,-6(a2)
  MOVE (a1),d1:MULU d1,d6:SUB d0,d1:MOVE d1,-2(a2)
  MOVE d2,d0:AND d4,d0:ADD d0,d0:MOVE 0(a3,d0),d0
  MOVE d5,d1:AND d4,d1:ADD d1,d1:MOVE 0(a3,d1),d1
  AND #$f0f0,d1:AND #$0f0f,d0:OR d1,d0:MOVE d0,-10(a2):NOT d4
  AND d4,d2:EXT.l d2:ASR d7,d2:ADD.l d3,d2:AND d4,d5:EXT.l d5:ASR d7,d5:ADD.l d6,d5
  MOVE (a7)+,d0:SUBQ#1,d0:LEA 8(a0),a0:LEA 8(a1),a1:ADDQ#2,a2
gobp2:MOVE.l (a0)+,d1:ADD.l d2,d1:MOVE d1,4(a2):SWAP d1:MOVE d1,(a2)
  ADDQ#8,a2:DBRA d0,gogp2:RTS:gogp2
  MOVE.l (a1)+,d1:ADD.l d5,d1:MOVE d1,4(a2):SWAP d1:MOVE d1,(a2)
  ADDQ#8,a2:DBRA d0,gobp2:nojo2:RTS

_displaydbmap:
  BTST #4,!m{res+1}:BEQ nots2
  MOVE d2,d4:MOVEQ#0,d2:MOVEQ#0,d3:MOVEQ#0,d5:MOVEQ#0,d6:BRA scludge:nots2
  MOVEQ#0,d2:MOVE.l d2,!m{x0}:MOVE.l d2,!m{x1}
  MOVE.l !m{bplanes},a2:MOVE !m{numbp},d0:BEQ nojo:SUBQ#1,d0
  MOVE (a0),d1:SUB !m{fetchwid},d1:MOVE d1,-6(a2)
  MOVE (a1),d1:SUB !m{fetchwid},d1:MOVE d1,-2(a2)
  LEA 8(a0),a0:LEA 8(a1),a1:ADDQ#2,a2
gobp:MOVE.l (a0)+,d1:MOVE d1,4(a2):SWAP d1:MOVE d1,(a2):ADDQ#8,a2
  DBRA d0,gogp:RTS:gogp:MOVE.l (a1)+,d1:MOVE d1,4(a2):SWAP d1:MOVE d1,(a2)
  ADDQ#8,a2:DBRA d0,gobp:nojo:RTS

bp1:
  Dc.w $FFFF,$EEFF,$DDFF,$CCFF,$FFEE,$EEEE,$DDEE,$CCEE
  Dc.w $FFDD,$EEDD,$DDDD,$CCDD,$FFCC,$EECC,$DDCC,$CCCC
  Dc.w $FFBB,$EEBB,$DDBB,$CCBB,$FFAA,$EEAA,$DDAA,$CCAA
  Dc.w $FF99,$EE99,$DD99,$CC99,$FF88,$EE88,$DD88,$CC88
  Dc.w $FF77,$EE77,$DD77,$CC77,$FF66,$EE66,$DD66,$CC66
  Dc.w $FF55,$EE55,$DD55,$CC55,$FF44,$EE44,$DD44,$CC44
  Dc.w $FF33,$EE33,$DD33,$CC33,$FF22,$EE22,$DD22,$CC22
  Dc.w $FF11,$EE11,$DD11,$CC11,$FF00,$EE00,$DD00,$CC00
  Dc.w $BBFF,$AAFF,$99FF,$88FF,$BBEE,$AAEE,$99EE,$88EE
  Dc.w $BBDD,$AADD,$99DD,$88DD,$BBCC,$AACC,$99CC,$88CC
  Dc.w $BBBB,$AABB,$99BB,$88BB,$BBAA,$AAAA,$99AA,$88AA
  Dc.w $BB99,$AA99,$9999,$8899,$BB88,$AA88,$9988,$8888
  Dc.w $BB77,$AA77,$9977,$8877,$BB66,$AA66,$9966,$8866
  Dc.w $BB55,$AA55,$9955,$8855,$BB44,$AA44,$9944,$8844
  Dc.w $BB33,$AA33,$9933,$8833,$BB22,$AA22,$9922,$8822
  Dc.w $BB11,$AA11,$9911,$8811,$BB00,$AA00,$9900,$8800
  Dc.w $77FF,$66FF,$55FF,$44FF,$77EE,$66EE,$55EE,$44EE
  Dc.w $77DD,$66DD,$55DD,$44DD,$77CC,$66CC,$55CC,$44CC
  Dc.w $77BB,$66BB,$55BB,$44BB,$77AA,$66AA,$55AA,$44AA
  Dc.w $7799,$6699,$5599,$4499,$7788,$6688,$5588,$4488
  Dc.w $7777,$6677,$5577,$4477,$7766,$6666,$5566,$4466
  Dc.w $7755,$6655,$5555,$4455,$7744,$6644,$5544,$4444
  Dc.w $7733,$6633,$5533,$4433,$7722,$6622,$5522,$4422
  Dc.w $7711,$6611,$5511,$4411,$7700,$6600,$5500,$4400
  Dc.w $33FF,$22FF,$11FF,$00FF,$33EE,$22EE,$11EE,$00EE
  Dc.w $33DD,$22DD,$11DD,$00DD,$33CC,$22CC,$11CC,$00CC
  Dc.w $33BB,$22BB,$11BB,$00BB,$33AA,$22AA,$11AA,$00AA
  Dc.w $3399,$2299,$1199,$0099,$3388,$2288,$1188,$0088
  Dc.w $3377,$2277,$1177,$0077,$3366,$2266,$1166,$0066
  Dc.w $3355,$2255,$1155,$0055,$3344,$2244,$1144,$0044
  Dc.w $3333,$2233,$1133,$0033,$3322,$2222,$1122,$0022
  Dc.w $3311,$2211,$1111,$0011,$3300,$2200,$1100,$0000

;----------------------------------------------------------------------------------
; sprite routines, ecs on aga still glitchy
;----------------------------------------------------------------------------------

_displaysprite:           ;x,y,ch = d2,d3,d4 a1=sprite
  ;
  TST.l (a1):BEQ nosprierr
  ;
  MOVE d4,d5:MOVE !m{numsprites},d6:TST.l !m{csprites}:BEQ na:ADD d6,d6:na
  ADD 6(a1),d5:CMP d5,d6:BMI spriterr
  ;
  MOVE.l d2,d1:MOVE d3,d2:MOVE d4,d3

  MOVEM 12(a1),d4-d5:MOVE !m{spri},d6:ASL#2,d4:ASR d6,d4:SWAP d1      ;was asl!

;  MOVE !m{resshift},d6:ROL.l d6,d1:SUB d4,d1:ADD#128*4,d1

  MOVE !m{resshift},d6:ROL.l d6,d1:ADD#128*4,d1:SUB d4,d1

  SUB d5,d2:MOVE !m{height},d0:ADDQ#1,d0 ;was 1
  SUB d2,d0:BLE spriteoff         ;:ADDQ#1,d0 ;off bottom was addq2

  MOVEQ#0,d4:MOVE4(a1),d5:TST d2:BPL'skipy0:ADD d2,d5:BLE spriteoff   ;wasbploff top
  EXG d2,d4:NEG d4:MOVE !m{spif},d7:EXT.l d4:ASL.l d7,d4

  'skipy0:CMP d5,d0:BPL 'skipy1:MOVE d0,d5:'skipy1

  ADD !m{ypos},d2   ;d2=ystart d5=height
  ;d1=x
  MOVEQ #0,d7:MOVE d2,d6
  ASL #8,d6:BCC 'skip:BSET#2,d7:'skip     ;pos/ctrl in d6d7
  TST agamac:BNE sssprite:AND #$fffc,d1:sssprite
  LSR #1,d1:BCC 'skipa:BSET #3,d7:'skipa
  LSR #1,d1:BCC 'skipb:BSET #4,d7:'skipb
  LSR #1,d1:BCC 'skipc:BSET #0,d7:'skipc

  TST d1:BPL cs0:MOVEQ#0,d1:cs0:CMP#256,d1:BMI cs1:MOVE#255,d1:cs1

  MOVE.b d1,d6:ADD d5,d2:SUBQ #1,d2: ;sprite end -1

  LSL #8,d2:BCC 'skip3:BSET #1,d7 ;ADDQ #2,d7
  'skip3:OR d2,d7:TST 8(a1):BPL 'skip4:BSET #7,d7:'skip4

  MOVE.l !m{sprites},a0:CMP !m{numsprites},d3:BCS norml:SUB !m{numsprites},d3
  MOVE.l !m{csprites},a0:norml:LSL #4,d3:ADD d3,a0:MOVE.l (a1),d0:ADD.l d4,d0

  MOVE 10(a1),d1:EXT.l d1:MOVE 6(a1),d2:SUBQ #1,d2

  'loop:MOVE d6,2(a0):MOVE d7,6(a0):MOVE d0,14(a0):SWAP d0:MOVE d0,10(a0):SWAP d0
  ADD.l d1,d0:LEA 16(a0),a0:TST 8(a1):BPL 'only3
  MOVE d6,2(a0):MOVE d7,6(a0):MOVE d0,14(a0):SWAP d0:MOVE d0,10(a0):SWAP d0
  ADD.l d1,d0:LEA 16(a0),a0:SUBQ #1,d2
  'only3:ADD !m{sspwid},d6:DBF d2,'loop:RTS

spriteoff:
  MOVE 6(a1),d2:SUBQ #1,d2:LSL #4,d3:MOVE.l !m{sprites},a0:ADD d3,a0
  'loop2:MOVE#0,2(a0):MOVE#0,6(a0)
  MOVE mysprite(pc),10(a0):MOVE mysprite+2(pc),14(a0):
  LEA16(a0),a0:TST 8(a1):BPL 'only4:
  MOVE#0,2(a0):MOVE#0,6(a0):
  MOVE mysprite(pc),10(a0):MOVE mysprite+2(pc),14(a0)
  LEA16(a0),a0:SUBQ#1,d2:'only4:DBF d2,'loop2:RTS

;----------------------------------------------------------------------------------
; palette handling routines including cludgy 24bit
;----------------------------------------------------------------------------------

_customcols2:
  BSR _customcols:MOVE #257,!m{bot}:RTS

_customcols:     ;d1-d5 CCOffset,YPos,Palette,startcol,numcols
  MOVE.l !m{customs},a1:ASL#2,d1:ADD d1,a1:MOVE d2,d1:ADD !m{ypos},d1
  MOVE.l #nowcop,d0:BTST #8,d1:BEQ nolo3:BTST #0,!m{bot}:BNE nolo3:MOVE.l#waitbh,d0
  nolo3:MOVE.l d0,(a1)+:MOVE.bd1,(a1)+:MOVE.b#$e1,(a1)+:MOVE #$fffe,(a1)+
  ADDQ#1,d1:MOVE d1,!m{bot}
  MOVE.l (a0),d0:BEQ nopalerr:MOVE.ld0,a0:ADDQ#4,a0
  MOVE d4,d0:MULU #12,d0:ADD d0,a0
  MOVE d5,d7:BEQ dunp:TST !m{aga}:BPL simple
  AND#$e0,d4:ASL#8,d4:MOVE.l#$1060000,d0:MOVE!m{bplcon3},d0:OR d4,d0:BRA complex2

_displaypalette3:
  MOVE.l (a0),d0:BEQ nopalerr:MOVE.ld0,a0:ADDQ#4,a0 ;a1=rgb
  MULU #12,d2:ADD d2,a0
  MOVE.l !m{colors},a1:MOVE !m{numcols},d7:BEQ dunp
  TST !m{aga}:BPL simple
  ASL#8,d3:ASL#5,d3:MOVE.l#$1060000,d0
  MOVE!m{bplcon3},d0:ADD d3,d0:BRA complex2

_displaypalette2:
  MOVE.l (a0),d0:BEQ nopalerr:MOVE.ld0,a0:ADDQ#4,a0 ;a1=rgb
  MULU #12,d2:ADD d2,a0
  MOVE.l !m{colors},a1:MOVE !m{numcols},d7:BEQ dunp
  TST !m{aga}:BPL simple:BMI complex

_displaypalette:
  MOVE.l (a0),d0:BEQ nopalerr:MOVE.ld0,a0:ADDQ#4,a0 ;a1=rgb
  MOVE.l !m{colors},a1:MOVE !m{numcols},d7:BEQ dunp:TST !m{aga}:BPL simple

complex:
  MOVE.l#$1060000,d0:MOVE!m{bplcon3},d0:
complex2:
  MOVEQ#2,d2:SWAP d2:MOVEQ#12,d3:SUBQ#1,d7
nxbank:
  MOVEQ #31,d6:CMP d6,d7:BPL nok:MOVE d7,d6:nok
  MOVE.l d0,(a1)+:MOVE d6,d5:MOVE#$180,d1:SWAP d1:MOVE.l a0,a2
nxcb1:
  MOVE (a0),d1:LSR#4,d1:MOVE.b4(a0),d1:ASL#4,d1:MOVE.b8(a0),d1:LSR#4,d1
  MOVE.l d1,(a1)+:ADD.l d2,d1:ADD d3,a0:DBRA d5,nxcb1:BCHG#9,d0
  MOVE.l d0,(a1)+:MOVE d6,d5:MOVE#$180,d1:SWAP d1:MOVE.l a2,a0
nxcb2:
  MOVE (a0),d1:MOVE.b8(a0),d1:AND.b#15,d1:MOVE.b4(a0),d4:ASL.b#4,d4:OR.b d4,d1
  MOVE.l d1,(a1)+:ADD.l d2,d1:ADD d3,a0:DBRA d5,nxcb2:BCHG#9,d0
  ADD #$2000,d0:SUB#32,d7:BPL nxbank
  dunp:CMP.l !m{dob},a1:BGT overrunerr:RTS

simple:
  CMP #32,d7:BGT agapalerr
  MOVE#$180,d0:SWAP d0:MOVEQ#2,d1:SWAP d1:MOVEQ#12,d2:SUBQ#1,d7
sloop:
  MOVE (a0),d0:LSR#4,d0:MOVE.b4(a0),d0:ASL#4,d0:MOVE.b8(a0),d0:LSR#4,d0
  MOVE.l d0,(a1)+:ADD.l d1,d0:ADD d2,a0:DBRA d7,sloop
  CMP.l !m{dob},a1:BGT overrunerr:RTS

;----------------------------------------------------------------------------------
; custom copper routines for effects
;----------------------------------------------------------------------------------

_customstring:   ;d1-d3 CCOffset,YPos,a$
  MOVE.l !m{customs},a1
  EXT.l d1:ASL.l#2,d1:ADD.l d1,a1  ;wo was word!
  MOVE d2,d1:ADD !m{ypos},d1
  MOVE.l #nowcop,d0:BTST #8,d1:BEQ nolo4:BTST #0,!m{bot}:BNE nolo4:MOVE.l#waitbh,d0
  nolo4:MOVE.l d0,(a1)+:MOVE.bd1,(a1)+:MOVE.b#$e1,(a1)+:MOVE #$fffe,(a1)+
  ADDQ#1,d1:MOVE d1,!m{bot}:   ;add size of list!
  MOVE.l d3,a0:MOVE.l -(a2),d0:LSR.l #1,d0:BCS freakerr:LSR.l #1,d0:BCS freakerr
  BEQ freakerr:SUBQ#1,d0:pokem:MOVE.l (a0)+,(a1)+:DBRA d0,pokem
  duncus:CMP.l !m{dob},a1:BGT overrunerr:RTS

_displaydblscan0:    ;d1=mode d2=offset
  MOVEQ#0,d2
_displaydblscan:
  MOVE.l !m{customs},a1:ADDQ#1,d2:ASL#2,d2:ADD d2,a1:MOVE !m{cpline},d5
  ADDQ#8,d2:CMP d5,d2:BGT linerr:MOVE !m{height},d7:SUBQ#2,d7:MOVE d1,d6
  SUBQ#1,d6:BMI clrdbl:MOVE.l !m{bplanes},a2:MOVEM.l -8(a2),d1-d2:MOVE.l d1,d3
  MOVE.l d2,d4:MOVE !m{fetchwid},d1:NEG d1:MOVE d1,d2:TST d6:BNE dbldbl
nxline:MOVEM.l d1-d2,(a1):ADD d5,a1:EXG d1,d3:EXG d2,d4:DBRA d7,nxline:RTS
clrdbl:MOVE.l#copnop,d0:MOVE.l d0,d1:nxcb:MOVEM.l d0-d1,(a1):ADD d5,a1:DBRA d7,nxcb:RTS
dbldbl:ADD d6,d6:MOVE dloop(pc,d6),d6:MOVE d6,loopd:BRA nux1
nux1:MOVE loopd(pc),d6:lbub:MOVEM.l d1-d2,(a1):ADD d5,a1:DBRA d7,nux2:RTS
nux2:DBRA d6,lbub:MOVEM.l d1-d2,(a1):ADD d5,a1:EXG d1,d3:EXG d2,d4:DBRA d7,nux4:RTS
nux4:MOVEM.l d1-d2,(a1):ADD d5,a1:EXG d1,d3:EXG d2,d4:DBRA d7,nux1:RTS

dloop:Dc 0,1,5,13,29
loopd:Dc 0

_customsprites:  ;d1=off d2=ypos d3=numsprites (setup second bank of sprites 9->15)
  MOVE.l !m{customs},a1:ASL#2,d1:ADD d1,a1:MOVE d2,d1:ADD !m{ypos},d1
  MOVE.l #nowcop,d0:BTST #8,d1:BEQ nolo5:BTST #0,!m{bot}:BNE nolo5:MOVE.l#waitbh,d0
  nolo5:MOVE.l d0,(a1)+:MOVE.bd1,(a1)+:MOVE.b#$e1,(a1)+:MOVE #$fffe,(a1)+
  ADDQ#1,d1:MOVE d1,!m{bot}:MOVE.l a1,!m{csprites}:MOVE d3,d1:SUBQ#1,d1:MOVEQ#4,d2
  SWAP d2:MOVEM.l spp(pc),d3-d6:nxspri2:MOVEM.l d3-d6,(a1):LEA16(a1),a1
  ADD.l d2,d3:ADD.l d2,d4:ADD.l d2,d3:ADD.l d2,d4:ADD.l d2,d5:ADD.l d2,d6
  DBRA d1,nxspri2:CMP.l !m{dob},a1:BGT overrunerr:RTS

;----------------------------------------------------------------------------------
; new color split routines for displays
;----------------------------------------------------------------------------------

_displayrainbow0:      ;d1=register a2=palette d3=offset
  MOVEQ#0,d3
_displayrainbow:
  MOVE.l (a2),a2:ADDQ#4,a2
  MOVE.l !m{customs},a1:ADDQ#1,d3:ASL#2,d3:ADD d3,a1:MOVE !m{cpline},d5
  TST !m{aga}:BPL ecsrainbow
agarainbow:
  ADD#16,d3:CMP d5,d3:BGT linerr
  MOVE d1,d6:AND#$e0,d6:ASL#8,d6:MOVE.l#$1060000,d3:MOVE!m{bplcon3},d3:OR d6,d3
  MOVE d1,d6:AND#$1f,d6:ADD d6,d6:ADD#$180,d6:SWAP d6:MOVE !m{height},d7:SUBQ#2,d7
hxch:
  MOVEM.l (a2)+,d0-d2
  ROL.l#4,d0:MOVE d0,d1:ROL.l#4,d1:MOVE d1,d2:ROL.l#4,d2
  MOVE d2,d6:MOVEM.l d3/d6,(a1):BCHG #9,d3
  ROL.l#4,d0:MOVE d0,d1:ROL.l#4,d1:MOVE d1,d2:ROL.l#4,d2
  MOVE d2,d6:MOVEM.l d3/d6,8(a1):BCHG #9,d3
  ADD d5,a1:DBRA d7,hxch
  SUB d5,a1:CMP.l !m{dob},a1:BGT overrunerr:RTS
ecsrainbow:
  ADDQ#4,d3:CMP d5,d3:BGT linerr:ADD d1,d1:ADD#$180,d1:MOVE !m{height},d7:SUBQ#2,d7
axch:
  MOVEM.l (a2)+,d2-d4:ROL.l#4,d2:MOVE d2,d3:ROL.l#4,d3:MOVE d3,d4:ROL.l#4,d4
  MOVEM d1/d4,(a1):ADD d5,a1:DBRA d7,axch
  SUB d5,a1:CMP.l !m{dob},a1:BGT overrunerr:RTS

_displayrgb0:          ;reg line r g b off
  LEA blah+2(pc),a2
_displayrgb:
  MOVE.l !m{customs},a1:MOVE -(a2),d6:ADDQ#1,d6:ASL#2,d6:ADD d6,a1
  MOVE !m{cpline},d7:MULU d7,d2:ADD.l d2,a1:TST !m{aga}:BPL ecsrgbb
agargbb:
  ADD#16,d6:CMP d7,d6:BGT linerr
  MOVE d1,d6:AND#$e0,d6:ASL#8,d6:MOVE.l#$1060000,d2:MOVE!m{bplcon3},d2:OR d6,d2
  MOVE d1,d6:AND#$1f,d6:ADD d6,d6:ADD#$180,d6:SWAP d6
  MOVE d3,d6:ROL#4,d6:MOVE.b d4,d6:ROL#4,d6:MOVE.b d5,d6:LSR#4,d6
  MOVEM.l d2/d6,(a1):BCHG #9,d2:MOVE d5,d6:ROR#4,d6:MOVE.b d4,d6:ROR#4,d6
  MOVE.b d3,d6:ROL#8,d6:MOVEM.l d2/d6,8(a1):CMP.l !m{dob},a1:BGT overrunerr:RTS
ecsrgbb:
  ADDQ#4,d6:CMP d7,d6:BGT linerr:ADD d1,d1:ADD#$180,d1
  ROR#4,d5:MOVE.b d4,d5:ROR#4,d5:MOVE.b d3,d5:ROL#8,d5:MOVEM d1/d5,(a1)
  CMP.l !m{dob},a1:BGT overrunerr::RTS

blah:Dc 0

_displayuser0:             ;line,string,offset
  MOVEQ#0,d3
_displayuser:
  MOVE.l !m{customs},a1:ADDQ#1,d3:ASL#2,d3:ADD d3,a1
  MOVE !m{cpline},d7:MULU d7,d1:ADD.l d1,a1:MOVE.l -(a2),d0
  ADD d0,d3:CMP d7,d3:BGT linerr:LSR#1,d0:BCS freakerr:LSR#1,d0:BCS freakerr
  BEQ dunbo:SUBQ#1,d0:MOVE.l d2,a0:nxl:MOVE.l (a0)+,(a1)+:DBRA d0,nxl
  dunbo:CMP.l !m{dob},a1:BGT overrunerr:RTS

;----------------------------------------------------------------------------------
; new custom copper routines for effects *************************************
;----------------------------------------------------------------------------------

shifs:Dc.w 1,4,2,5,2,5,3,6
flups:Dc.b 0,1,1,2

_displayscroll0:     ;d1=&deltas0 d2=&deltas1 d3=ccoff
  MOVEQ#0,d3

_displayscroll:
  MOVE.l a4,-(a7):MOVE.b !m{res},d0:MOVE d0,d6:AND#3,d0:MOVE.l#$fffff,d4
  AND#$30,d6:LSR#2,d6:MOVE.l shifs(pc,d6),d5
  LSR#2,d6:MOVE.b flups(pc,d6),d6:ASL.l d6,d4:ADDQ#6,d6:SUB d0,d6
  MOVE.l !m{customs},a4:ADDQ#1,d3:ASL#2,d3:ADD d3,a4
  ADD#12,d3:CMP !m{cpline},d3:BGT linerr:MOVE !m{height},d7:SUBQ#2,d7:MOVE d7,ycont
  MOVE.l d1,a0:MOVE.l d2,a1:MOVEM.l !m{x0},d0-d1:AND.l d4,d0:AND.l d4,d1
  MOVE.l !m{bplanes},a2:MOVEM.l -12(a2),d2-d4:MOVEM d3/d4,mods:LEA bp1(pc),a2
nxlisc:
  MOVE.l d2,(a4)
  ADD.l (a0)+,d0:ADD.l (a1)+,d1           ;add delta
  ASR.l d5,d0:ASR.l d5,d1:SWAP d5         ;shift to fetch width
  SWAP d0:SWAP d1:MOVE d0,d3:MOVE d1,d4   ;stick in modulo
  ASL d5,d3:ASL d5,d4:SWAP d5             ;raise to correct power
  ADD mods(pc),d3:ADD mods+2(pc),d4       ;add std modulo
  MOVE#0,d0:ROL.l d6,d0:MOVE d0,d2:ROR.l d6,d0:SWAP d0:ASL.l d5,d0
  MOVE#0,d1:ROL.l d6,d1:MOVE d1,d7:ROR.l d6,d1:SWAP d1:ASL.l d5,d1
  ADD d2,d2:MOVE 0(a2,d2),d2:AND #$0f0f,d2
  ADD d7,d7:MOVE 0(a2,d7),d7:AND #$f0f0,d7:OR d7,d2
  MOVEM.l d3-d4,4(a4):ADD !m{cpline},a4:SUBQ#1,ycont:BPL nxlisc:MOVE.l (a7)+,a4
  RTS

mods:Dc 0,0
ycont:Dc.w 0

;----------------------------------------------------------------------------------
; chunky copper routine, for AGA machines only!
;----------------------------------------------------------------------------------
_customchunkysize: ;d0d1 = width height
  MOVE d0,d2:ADD#31,d2:LSR#5,d2:ADD d2,d0:ADDQ#3,d0:MULU d1,d0:ADDQ#2,d0:RTS

;#chc=#chw+#chw/32+1+2           ;coppers per line


;  cchunky.l                           ;96 location of copperchunky
;  chy.w:chw.w:chh:chr:chc:pad0        ;   ypos width height resolution mod
;  cchunky2.l                          ;96 location of copperchunky
;  chy2.w:chw2.w:chh2:chr2:chc2:pad2   ;   ypos width height resolution mod


_customchunky2:  ;d1=coff d2=y d3=w d4=h d5=res
  BSR _customchunky
  MOVEM.l !m{cchunky},d0-d3:MOVE -(a2),d4:MOVE d4,!m{chh}
  MOVEM.l d0-d3,!m{cchunky2}:SUB d4,!m{chh2}
  MULU !m{chc},d4:ADD.l d4,!m{cchunky2}:RTS

_customchunky:  ;d1=coff d2=y d3=w d4=h d5=res
  ;
  MOVEM d2-d5,!m{chy}:MOVE.l !m{customs},a1:ASL#2,d1:ADD d1,a1
  ;
  MOVE d2,d1:SUB d5,d1:BMI toolowerr:ADD !m{ypos},d1:ADD !m{ypos},d2
  MOVE.l #nowcop,d0:BTST #8,d1:BEQ nolo6:BTST #0,!m{bot}:BNE nolo6:MOVE.l#waitbh,d0
  nolo6:MOVE.l d0,(a1)+:MOVE.bd1,(a1)+:MOVE.b#$e1,(a1)+:MOVE #$fffe,(a1)+
  ;
  LEA 6(a1),a0:MOVE.l a0,!m{cchunky}
  MOVE d5,d6:MULU d4,d6:ADD d2,d6:MOVE d6,!m{bot}
  ;
  MOVE d3,d6:LSR#5,d6:ADD d6,d3:ADDQ#3,d3:ASL#2,d3:MOVE d3,!m{chc} ;linelength
  MOVE d1,d0:ADD d5,d0:EXT.l d0:SWAP d0:ASL.l#8,d0:OR.l#$e1fffe,d0 ;d0=wait was e1
  EXT.l d5:ASL#8,d5:SWAP d5                                        ;d5=wait add
  MOVE d4,d7:SUBQ#1,d7                                             ;d7=ycount
  MOVE.l #$10c0011,d6:MOVE.l #$1066c00,d4                          ;d6d4=banks
  xline:MOVE!m{chw},d2:SUBQ#1,d2:MOVE #$17e,d1:MOVE.l d4,d3:BCHG#15,d4
  xcol:CMP #$17e,d1:BNE nc:MOVE#$1be,d1:MOVE.l d3,(a1)+:SUB#$2000,d3:nc
  MOVE d1,(a1)+:MOVE#0,(a1)+:SUBQ#2,d1:DBRA d2,xcol
  dunline:MOVE.ld0,(a1)+:MOVE.ld6,(a1)+:BCHG#15,d6:ADD.l d5,d0
  DBRA d7,xline:CMP.l !m{dob},a1:BGT overrunerr:RTS
  MOVE.l #$1060c00,(a1)+:RTS

;----------------------------------------------------------------------------------
; error handling
;----------------------------------------------------------------------------------

errs:

maxbperr:MOVE.l #mess1,d0:TRAP#0
uniniterr:MOVE.l #mess2,d0:TRAP#0
nopalerr:MOVE.l #mess3,d0:TRAP#0
nosprierr:MOVE.l #mess4,d0:TRAP#0
freakerr:MOVE.l #mess5,d0:TRAP#0
linerr:MOVE.l #mess6,d0:TRAP#0
agapalerr:MOVE.l #mess7,d0:TRAP#0
toolowerr:MOVE.l #mess8,d0:TRAP#0
overrunerr:MOVE.l #mess9,d0:TRAP#0
spriterr:MOVE.l #mess10,d0:TRAP#0

mess1:Dc.b "Illegal Number of BitPlanes for Resolution",0:Even
mess2:Dc.b "Uninitialised CopList",0:Even
mess3:Dc.b "Uninitialised Palette",0:Even
mess4:Dc.b "Uninitialised Sprite",0:Even
mess5:Dc.b "Custom Copper String Must Be Multiple Of 4 Bytes Silly!",0:Even
mess6:Dc.b "Not Enough Custom Copper Space",0:Even
mess7:Dc.b "Need AGA palette mode ($10000) for this many colors",0:Even
mess8:Dc.b "CustomChunky must start at ypos greater than res",0:Even
mess9:Dc.b "Not Enough Custom Cops",0:Even
mess10:Dc.b "Not Enough Sprite Channels",0:Even

_checkcoplist:TST.l !m{size}:BEQ uniniterr:RTS

