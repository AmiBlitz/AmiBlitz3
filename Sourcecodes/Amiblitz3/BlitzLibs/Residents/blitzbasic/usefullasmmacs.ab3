; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 641
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 5
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 5
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 1
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 1
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 1
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
Macro UBYTE
(`1-$100)
End Macro

Macro fpuround_nearest
!setpfcr {$0}
End Macro

Macro fpuround_zero
!setpfcr {$10}
End Macro

Macro fpuround_smallest
!setpfcr {$20}
End Macro

Macro fpuround_highest
!setpfcr {$30}
End Macro

;==============================================================================
;== autoexit{}
;==============================================================================
Macro autoexit
  .autofree_`1  ;Note all labels must be unique.use another name than

  MOVE.l #myfreecode_`1,d0 ;
  SysJsr $c801       ;this install the exithandler
  MOVE.l d0,oldfree_`1  ;This read the oldfree code to link all handlers

  BRA l1_`1
  myfreecode_`1         ;this is the autoexit routine
  CNIF #__debug
  Dc.w $7000
  SysJsr $d50a              ;set this task to no debug.
  CEND
                            ;if you want singlestep autoexit you can remove it
  ;*****************User Code Start
  `1{} ; this is called on program exit automatic
  ;*****************User Code End******************************
  MOVE.l oldfree_`1,a0  ;jump to next exithandler
  JMP (a0)
  End
  oldfree_`1: Dc.l 0
  l1_`1
End Macro

;==============================================================================
;== arrayptr{}
;==============================================================================
Macro arrayptr ;memaddr(dont use *),arryvar
  Dim `2
  ;hack start             ;must be immediate after dim
  LEA 0(a5,d2.w),a0       ;set the dim to the adress of *buf
  MOVE.l a0,`1mem
  MOVE.l (a0),old`1mem
  GetRegD0 `1
  MOVE.l d0,(a0)
  MOVE.l #myfreecode_`1,d0 ;
  SysJsr $c801            ;this install the exithandler
  MOVE.l d0,oldfree_`1    ;This read the oldfree code to link all handlers together
  BRA l1_`1
  `1mem: Dc.l 0
  old`1mem: Dc.l 0
  myfreecode_`1           ;this is the autoexit routine
  ;*****************User Code Start
  MOVE.l `1mem,a0
  MOVE.l old`1mem,(a0)
  ;*****************User Code End******************************
  MOVE.l oldfree_`1,a0    ;jump to next exithandler
  JMP (a0)
  oldfree_`1: Dc.l 0
  l1_`1
  ;hackEnd
End Macro

;==============================================================================
;== loc_arrayptr{}
;==============================================================================
Macro loc_arrayptr ;memaddr(dont use *),arryvar
  Dim `2
  ;hack start             ;must be immediate after dim
  LEA 0(a4,d2.w),a0       ;set the dim to the adress of *buf
  MOVE.l a0,`1mem
  MOVE.l (a0),old`1mem
  GetRegD0 `1
  MOVE.l d0,(a0)
  MOVE.l #myfreecode_`1,d0 ;
  SysJsr $c801       ;this install the exithandler
  MOVE.l d0,oldfree_`1   ;This read the oldfree code to link all handlers together
  BRA l1_`1
  `1mem: Dc.l 0
  old`1mem: Dc.l 0
  myfreecode_`1          ;this is the autoexit routine
  ;*****************User Code Start
  MOVE.l `1mem,a0
  MOVE.l old`1mem,(a0)
  ;*****************User Code End******************************
  MOVE.l oldfree_`1,a0  ;jump to next exithandler
  JMP (a0)
  oldfree_`1: Dc.l 0
  l1_`1
  ;hackEnd
End Macro

;==============================================================================
;== getfpcr{}
;==============================================================================
Macro getfpcr                       ; get FPU-Controlregister via D0
  If ProcessorFPU > 0
    Dc.l $f200b000                    ; fmove fpcr, d0
    `1 = PutRegD0
  Else
    `1 = 0
  End If
End Macro

;==============================================================================
;== setfpcr{}
;==============================================================================
Macro setfpcr                       ; set FPU-Controlregister via D0
  If ProcessorFPU > 0
    GetRegD0 `1
    Dc.l $f2009000                    ; fmove d0, fpcr
  End If
End Macro

;==============================================================================
;== checklib{}
;==============================================================================
Macro checklib ;{mode,libname,libversion} ;check for lib  mode=1 quit program mode=0 only warn
  *lib_M.Library = OpenLibrary_(`2,`3)
  If *lib_M
    CloseLibrary_ *lib_M
  Else
  ret_M.l = Request(" Library ","Library "+`2+" Version "+Str$(`3)+" is missing.","OK")
  If `1 Then End
  EndIf
End Macro


;==============================================================================
;== togglevar{}
;==============================================================================
Macro togglevar ;{variable} ;toggle every call the var betweeen true and false
  If `1=0 Then `1=True : Else `1=0
End Macro

;==============================================================================
;== version{}
;==============================================================================
.version
Macro version ;{version} ;add a standard amiga Version String
  BRA __version
  Even4
  Dc.b 0,"$VER: "
  Dc.b `1,0
  Even
  __version
End Macro

;==============================================================================
;== windowaddr{}
;==============================================================================
Macro windowaddr
;CNIF `0=0
     Peek.l(Addr Window(Used Window))
;CELSE
;     Peek.l(Addr Window(`1))
;CEND
End Macro

;==============================================================================
;== screenaddr{}
;==============================================================================
Macro screenaddr
;CNIF `0=0
     Peek.l(Addr Screen(Used Screen))
;CELSE
;     Peek.l(Addr Window(`1))
;CEND
End Macro

;Macro delayuse ;buffer,size
;_del@buf.l=`1
;#_del@size=(`2 LSL 3)-1
;#_del@writeoffset=`3*8
;End Macro
;
;Macro dspint
;`1*(1/$7fffffff)
;End Macro
;Macro interp
;((`3-`1)*`2)+`1
;End Macro
;Macro delayaddr
;(_del@count.l+(`1*8) AND #_del@size)+_del@buf.l
;End Macro
;
;Macro delayread
;Peek.f((_del@count.l+(`1*8) AND #_del@size)+_del@buf.l)
;End Macro
;
;Macro delaywrite
;Poke.f(((`1*8)+_del@count.l+#_del@writeoffset) AND #_del@size)+_del@buf.l,`2
;End Macro
;
;
;Macro delaywriteaddr
;((_del@count.l+(`1*8)+#_del@writeoffset) AND #_del@size)+_del@buf.l
;End Macro
;
;Macro delayinc
;;_del@count=_del@count+`1 AND #_del@size
;If _del@count<=0 Then _del@count=#_del@size
;End Macro
;
;Macro delayset ;value
;_del@count=`1
;End Macro

;==============================================================================
;== cout{}
;==============================================================================
Macro cout
  MOVEM.l d0-d7/a0-a6,-(a7)

CNIF @#firsttime_cout=0
  #firsttime_cout = 1
  SHARED __consoleaddr.l
  BRA __skip_

  __consoleopen_:
     Poke.l ?__console,Open_("CON:/18/640/200/AB3 Logout/CLOSE",1006)
    .Installexithandler_cout
     MOVE.l #myfreecode_cout,d0
     SysJsr $c801             ; this install the exithandler  (EXITLIB)
     MOVE.l d0,oldfree_cout   ; This read the oldfree code to link all handlers together
     BRA lcout_cout

  myfreecode_cout:            ; this is the autoexit routine
     CNIF #__debug
     Dc.w $7000
     SysJsr $d50a              ;set this task to no debug.
     CEND
     ;*****************User Code Start
     If __consoleaddr Then Close_ __consoleaddr
     ;*****************User Code End******************************
     MOVE.l oldfree_cout,a0  ;jump to next exithandler
  JMP (a0)

  oldfree_cout: Dc.l 0
  __console:Dc.l 0
  lcout_cout:
     ;***************** exit handler code end
  RTS
  __skip_
CEND
  MOVE.l __console,d0
  BNE ok`@
    JSR __consoleopen_
  ok`@
  MOVE.l __console,d0
  __consoleaddr.l = PutRegD0
  CNIF `0=1
    __cout$ = UStr$(`1) + Chr$($a)
    Write_ __consoleaddr ,__cout$,FLen(__cout$)
  CEND
  CNIF `0=2
    __cout$ = UStr$(`1)+" "+UStr$(`2)+Chr$($a)
    Write_ __consoleaddr ,__cout$,FLen(__cout$)
  CEND
  CNIF `0=3
    __cout$ = UStr$(`1)+" "+UStr$(`2)+" "+UStr$(`3)+Chr$($a)
    Write_ __consoleaddr ,__cout$,FLen(__cout$)
  CEND
  CNIF `0=4
    __cout$ = UStr$(`1)+" "+UStr$(`2)+" "+UStr$(`3)+" "+UStr$(`4) +Chr$($a)
    Write_ __consoleaddr ,__cout$,FLen(__cout$)
  CEND
  CNIF `0=5
    __cout$ = UStr$(`1)+" "+UStr$(`2)+" "+UStr$(`3)+" "+UStr$(`4)+" "+UStr$(`5) +Chr$($a)
    Write_ __consoleaddr ,__cout$,FLen(__cout$)
  CEND
  MOVEM.l (a7)+,d0-d7/a0-a6
End Macro
 
;==============================================================================
;== coutclose{}
;==============================================================================
Macro coutclose
  If __consoleaddr.l Then Close_ __consoleaddr:__consoleaddr=0
End Macro

;-----------------------------------------------------------
#local           = 13
#base            =  2
#stack           =  1
#trash           =  0
#_d0             =   3
#_d1             =    4
#_d2             =    22
#_d3             =    23
#_d4             =    24
#_d5             =    25
#_d6             =    26
#_d7             =    27
#_a0             =    5
#_a1             =    6
#_a2             =    28
#_a3             =    29
;_a4            =    base
#_a5             =    30
#_a6             =    31
#SetExcHandler   = -516
#RemExcHandler   = -522
#CauseInterruptPPC = -108
#SetExcMMU       = -576
#ClearExcMMU     = -582
#SetCache        = -510

Macro citf  ;read a long value in a fpu register
  xoris   `2,`2,-$8000
  stw      `2,_CITF_TEMP+4-_base(r2)
  lfd      `1,_CITF_TEMP-_base(r2)
  fsub    `1,`1,f31
End Macro

Macro tofloat  ;convert ffp Value to 881 fpu
  ADD.l d0,d0
  BEQ 'lab1`@
    EORI.b #$80,d0
    ASR.b #1,d0
    SUBI.b #-$7e,d0
    SWAP d0
 'lab1`@
  ROL.l #7,d0
End Macro

UsePPC

Macro lf
lfd `1,`2-_base(r2)
End Macro
Macro ls
lfs `1,`2-_base(r2)
End Macro
Macro sw
stw `1,`2-_base(r2)
End Macro
Macro lw
lwz `1,`2-_base(r2)
End Macro
Macro sh
sth `1,`2-_base(r2)
End Macro
Macro lh
  lhz `1,`2-_base(r2)
End Macro
Macro lhs
  lha `1,`2-_base(r2)
End Macro
Macro ss
  stfs `1,`2-_base(r2)
End Macro
Macro _sf
  stfd `1,`2-_base(r2)
End Macro
Macro CALLPOWERPC
  lwz r3,_PowerPCBase-_base(r2)
  lwz r0,`1+2(r3)
  mtlr r0
  blrl
End Macro
Macro epilog
  lwz         r1,0(r1)
  lwz         r13,-4(r1)
  lwz         r0,8(r1)
  mtlr        trash
  blr
End Macro
Macro prolog
  mflr r0
  stw  r0,8(r1)
  stw  r13,-4(r1)
  SUBI r13,r1,4
  stwu r1,-1052(r1)
End Macro

#__distance_from_top_of_stack = 64


;==============================================================================
;== initasm
;==============================================================================
Macro initasm                               ;getregisters d0-d7 use this as first line for plugins
  MOVE.l a5,basicvars
  ;MOVE.l a4,localvars
  __init_ab3_variable_heap_here__.l=0
  MOVEM.l (a7)+,d0-d7/a0-a6
  LEA 12(a7),a7
  BRA LBLXC1
    basicvars:    Dc.l 0
    localvars:    Dc.l 0
    asmregisters: Ds.l 16
  LBLXC1
End Macro

;==============================================================================
;== exitasm
;==============================================================================
Macro exitasm                              ;put registers d0-d7 for end plugin call from asm before end
                                           ;call from asm before end instruction
  LEA -12(a7),a7
  MOVEM.l d0-d7/a0-a6,-(a7)
  MOVE.l basicvars,a5
  ;MOVE.l localvars,a4
End Macro

;==============================================================================
;== basic
;==============================================================================
Macro basic                                ;stores registers from asm prg to use basic now
                                           ;to use basic Instructions (do not use in Interrupts)

  ; Bernd's code to store asm registers UNDER the stack
  MOVE.l a0,-(a7)                          ; a0 to stack
  MOVE.l $4,a0                             ; execbase > a0
  MOVE.l $114(a0),a0                       ; thisTask.Task > a0
  MOVE.l $3a(a0),a0                        ; tc_SPLower > a0
  ADD.l #__distance_from_top_of_stack,a0   ; increase stack

  MOVEM.l d1-d7/a0-a6,$8(a0)               ; store registers in increased stack area
  MOVE.l (a7)+,$24(a0)                     ;
  MOVE.l 4(a0),a4

  ; Thilo's code to store asm registers in mem
  ;MOVEM.l d1-d7/a0-a6,asmregisters
  ;MOVE.l localvars,a4

  MOVE.l basicvars,a5                      ; load pointer to basic vars to a5
End Macro

;==============================================================================
;== asm
;==============================================================================
Macro asm                                  ;reloads asm registers
  ; Bernd's code to store asm registers UNDER the stack
  MOVE.l $4,a0                             ; ExecBase > A0
  MOVE.l $114(a0),a0                       ; ThisTask > A0
  MOVE.l $3a(a0),a0                        ; tc_SPLower > A0
  ADD.l #__distance_from_top_of_stack,a0
  MOVE.l a4,4(a0)
  MOVEM.l $8(a0),d1-d7/a0-a6

  ; Thilo's code to store asm registers in mem
  ;MOVE.l a4,localvars
  ;MOVEM.l asmregisters,d1-d7/a0-a6
End Macro

;==============================================================================
;== basica7
;==============================================================================
Macro basica7                             ;stores asm register on stack
                                          ;call asma7 on same stackpos
  MOVEM.l d1-d7/a0-a6,-(a7)
  MOVE.l basicvars,a5
End Macro

;==============================================================================
;== asma7
;==============================================================================
Macro asma7
  MOVEM.l (a7)+,d1-d7/a0-a6
End Macro

Macro newidcmp       ;gets an own idcmp for wizard Windows
  Poke WZWindowAddr+$56,0
  i.l = Peek.l(WZWindowAddr + $52)
  ModifyIDCMP_ WZWindowAddr,i
End Macro

Macro freenewidcmp   ;free own idcmp for wizard windows
  ModifyIDCMP_ WZWindowAddr,0
End Macro

Macro  newsigtask    ;put current task in windows->UserPort->SigTask
  MOVE.l d2,-(a7)
  i.l = WZWindowAddr
  MOVE.l d0,d2
  MOVE.l $4,a6
  SUB.l a1,a1
  JSR -$126(a6)
  MOVE.l d2,a0
  MOVE.l $56(a0),a0
  MOVE.l d0,$10(a0)
  MOVE.l (a7)+,d2
End Macro

Macro geta7var      ;get max 7 long Variables which were put from C
                    ;Functions to stack !use basica7 before call
CNIF `0=7
MOVE.l 84(a7),d0
`7=PutRegD0
CEND
CNIF `0=>6
MOVE.l 80(a7),d0
`6=PutRegD0
CEND
CNIF `0=>5
MOVE.l 76(a7),d0
`5=PutRegD0
CEND
CNIF `0=>4
MOVE.l 72(a7),d0
`4=PutRegD0
CEND
CNIF `0=>3
MOVE.l 68(a7),d0
`3=PutRegD0
CEND
CNIF `0=>2
MOVE.l 64(a7),d0
`2=PutRegD0
CEND
CNIF `0=>1
MOVE.l 60(a7),d0
`1=PutRegD0
CEND
End Macro

            Macro ENUM  ;[new base]
            CNIF `0=0
EOFFSET     SET     0
            CELSE
EOFFSET     SET     `1
            CEND
            End Macro

            Macro   EITEM;label
`1          EQU     EOFFSET
EOFFSET     SET     EOFFSET+1
            End Macro

.screenMacro
Macro screen_  ;num,title,prefsfile,mode[,tags ]
  _xx.l = `4
                                                                                                                                                                                                                                                
  FindScreen 0
  Window 0,0,0,10,10,$100f,"",0,1
  ShowRequesters 2 : CloseWindow 0
                                                                                                                                                                                                                          
  If (_xx BitTst 0)
    i.l = 0
  Else
    i = Open_ (`3,1005)
  EndIf

  If i
    Read_ i,&__scr.screeninfo,SizeOf.screeninfo
    Close_ i
  Else
    MOVE.l a7,d0
    __stackstore.l=PutRegD0
    NInitASL
    CLR.l -(a7)
    CNIF `0 = 5
        i = `5
        MOVE.l d0,-(a7)
        MOVE.l #$2,-(a7)
     CEND
    FindScreen (0)
    MOVE.l d0,-(a7)
    MOVE.l #$80080000+40,-(a7)  ;screen
    MOVE.l #-1,-(a7)
    MOVE.l #$80080000+109,-(a7) ;wid
    MOVE.l #-1,-(a7)
    MOVE.l #$80080000+110,-(a7)  ;height
    MOVE.l #-1,-(a7)
    MOVE.l #$80080000+111,-(a7)  ;depth
    MOVE.l #-1,-(a7)
    ;MOVE.l #$80080000+112,-(a7)  ;oscan
    ;MOVE.l #-1,-(a7)
    MOVE.l #$80080000+113,-(a7)  ;scroll
    MOVE.l a7,d0
    i = PutRegD0
    *__m.screeninfo=NASLScreenRequest(i)
    MOVE.l __stackstore@(a5),a7
    If *__m
      CopyMem_ *__m,&__scr,SizeOf .screeninfo
      i = Open_ (`3,1004)
      Write_ i,&__scr,SizeOf .screeninfo
      Close_ i
    EndIf
  EndIf
  __scrl.l = 1
  USEPATH __scr
  If (_xx BitTst 4) Then \height=\height*4:__scrl=0
  If (_xx BitTst 3) Then \height=\height*3:__scrl=0
  If (_xx BitTst 2) Then \height=\height*2:__scrl=0
  If (_xx BitTst 1)=0
    i = ScreenTags (`1,`2,#SA_DisplayID,\id,#SA_Width,\width,#SA_AutoScroll,__scrl,#SA_Height,\height,#SA_Depth,\dep,#SA_Interleaved,0,#SA_LikeWorkbench,1)
  EndIf
  If (_xx BitTst 2) Then \height=\height/2
  If (_xx BitTst 3) Then \height=\height/3
  If (_xx BitTst 4) Then \height=\height/4
  GetRegD0 i
  USELASTPATH

End Macro

NEWTYPE .screeninfo
        id.l
        width.l
        height.l
        dep.w
        overscan.w
        autoscroll.w
        bmapwidth.l
        bmapheight.l
End NEWTYPE

Macro screen_width ;return visible width of last opened screen from !screen
__scr\width
End Macro
Macro screen_height ;return visible height of last opened screen from !screen
__scr\height
End Macro
Macro screen_depth ;return depth of last opened screen from !screen
__scr\dep
End Macro
Macro screen_realwidth ;return total width of last opened screen from !screen
__scr\bmapwidth
End Macro
Macro screen_realheight ;return total height of last opened screen from !screen
__scr\bmapheight
End Macro
Macro screen_id ;return screenmode id of last opend screen from !screen
__scr\id
End Macro
                                                                                                                                                                                                                                                 
