; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 80000
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 65535
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 69
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;--
;-- The following is a list of useful System calls for use with the ALibJsr command
;-- (the BLibJsr command is for accessing the BlitzMode version of certain commands).
;--
;-- All of the following routines will only alter the registers supplied and preserve all registers not listed.
;--

;********************************************* System library : blitzkeyslib
#rawkeystatus = $3102

;********************************************* System library : inputoutputlib (#164)
#setInputChannel    = $5203 ; input: a0: pointer to inputhandler
#setOutputChannel   = $5204 ; input: a0: pointer to outputhandler
#getByteFromChannel = $5205 ; returns byte in d0 or -1 if no byte
#getDataFromChannel = $5206 ; input: a0: buffer, d0:length
#putByteToChannel   = $5207 ; input: d0: byte to put
#putDataToChannel   = $5208 ; input: a0: buffer, d0:length

;********************************************* System library : MEMLIB (65530 -> )
#globalalloc = $c002
; Input:   D0.l : bytesize, D1.l : memory requirements
; Returns: D0.l : memory block
; Despription: Standard memory allocate routine, automatically cleared by Blitz when program ends, see also globalfree.

#globalfree = $c003
; Input: A1.l : memory block, D0.l : bytesize
; Description: Standard memory deallocate routine.

#newlocalmem = $c004
; Input: -
; Description: Creates a new local memory node, which will link subsequent calls to localalloc together, useful for recursive type operations, for advanced users only.

#freelocalmem= $c005
; Input: -
; Description: Frees all memory attatched to current local memory node.

#localalloc = $c000
; Input:   D0.l : bytesize, D1.l : memory requirements
; Returns: D0.l : memory block
; Description: Local memory allocate routine, for use after newlocalmem call.

#localfree = $c001
; Input:   A1.l : memory block, D0.l : bytesize
; Description: Local memory deallocate routine.

;********************************************* System library : INTLIB
#addanint   = $c100 ;(AMIGA/BLITZ)
; Syntax:  addanint level+ID+$8000 d0.w, code d1.l
; Input:   D0.w : level - low 4 bits are interupt level. High bit should be set.
;          other bits may be used for id purposes to allow selective interupt clearing
;          D1.l : code to be executed on interupt. Code added using an ALibJsr
;          MUST preserve registers D2-D7/A2-A4, and MUST end with a MOVEQ #0,D0
;          Code added using a BLibJsr MUST preserve registers D5-D7/A4.
;
; Description: Adds an interupt at the level specified, Low 4 bits of dO should contain interupt level, high
;          bit must be set, other bits can be Used For ID. Interupt code should be pointed To by register d1.
;          It is up To the programmer to determine whether ALibJsr of BLibJsr is appropriate by
;          determining which mode their command is being called in. AMIGA mode interupt code
;          MUST preserve d2-d7/a2-a4 AND End with MOVEQ #0,dO, BLITZ mode interupts should
;          preserve registers d5-d7/a4.

#clranint   = $c101 ;(AMIGA/BLITZ)
; Syntax:  clranint level+ID+$8Q00 dO.w
; Input:   D0.w : level, as above.
; Description: Removes the interupt(s) with specified ID from the interupt List.
;          Reserved Interupt ID'S are:
;          Level 3: $8003-BlitzKeys (strobe)
;          Level 5: $8005-FadeLib
;


;********************************************* System library :$8015-Mouse

;********************************************* System library :$8025-TrackerLib

;********************************************* System library :$8035-BlitzKeys (repeat function)


;********************************************* System library : SWITCHLIB
#goblitz    = $c200
; Description: Changes operating mode for compiler and program

#goamiga    = $c201
; Description: Changes operating mode for compiler and program

#goqamiga   = $c202
; Description: Changes operating mode for compiler and program

#ownblit    = $c203
; Description: Must be used before routines that use the blitter in Amiga mode.

#disownblit = $c204
; Description: Must be used after routines that use the blitter in Amiga mode.

#setcoplist = $c205
#goblitzS   = $c206

; ******************************************** System library : ARRAYSLIB
#newarr     = $c400
#newlocarr  = $c401
#arrmult    = $c402
#newlist    = $c403
#newloclist = $c404
#newarr2    = $c405
#newlocarr2 = $c406

;********************************************* System library : STRING2LIB
#setfpumode = $c703
; Description: sets fpumode for use in stringXlib

#getfpumode = $c704
; Description: returns mode in D0: 0=normal, 2=fpu

;********************************************* System library : EXITSLIB
#progend    = $c800
; Description: same as the Blitz command End

;********************************************* System library : FFPLIB
#getffpbase = $c900
; Output:  A6.l : library base of mathffp.library
; Description: returns library base of mathffp.library in a6.

;********************************************* System library : LMULLIB
#quickmult  = $ca00
; Syntax:  D0.q = quickmult(d0.q, d1.q)
; Input:   D0.q : factor1, D1.q : factor2
; Returns: D0.l = factor1 * factor2
; Description: Function that multiply two quicks

#longmult   = $ca01
; Syntax:  d0.l = longmult(d0.l,d1.l)
; Input:   D0.l : factor1, D1.l : factor2
; Returns: D0.l = factor1 * factor2
; Description: Function that multiply two longs

;********************************************* System library : LDIVLIB
#quickdiv   = $cb00
; Syntax:  d0.q = quickdiv(d0.q/d1.q)
; Description: Functions that divide two quicks

#longdiv    = $cb01
; Syntax:  d0.l = longdiv(d0.l/d1.l)
; Description: Functions that divide two longs.


;********************************************* System library : MAXSLIB
#allocstring= $cf01
; Input:   D0.l : start of string. A null terminated copy of the string is created,
;          a pointer to which is returned in D0. This is mainly used to create
;          copies of string parameters for such things as screen
;          or window titles.
;          D1.l : length of string.
; Description: A null terminated copy of the string is created, a pointer to which is returned in DO. This
           is mainly used to create copies of string parameters for such things as screen or window
           titles.

#freestring = $cf02
; Input:   D0.l : pointer to string to free.
; Descriptioh: frees up the string pointed to the register dO.

;********************************************* System library : FLOATQUICKLIB
#quicktofloat= $d300
; Syntax:  d0.f = quicktofloat(d0.q)
; Input:   D0.q : quick value to be converted.
; Returns: D0.l : converted value in fast ffp format.
; Description: Functions to converts between quick and long types.

#floattoquick= $d301
; Syntax:  d0.q = floattoquick(d0.f)
; Input:   D0.l : float value to be converted.
; Returns: D0.q : converted value in quick format.
; Description: Function to convert between quick and long types.

;********************************************* System library : modlib
# = $d400

;********************************************* System library : DEBUGLIB
#newmode    = $d500