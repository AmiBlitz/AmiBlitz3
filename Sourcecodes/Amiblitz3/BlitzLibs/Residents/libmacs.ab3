; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 80000
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 65535
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 19
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; Max Window      = 20
; /XTRA
;pchk{a,b}
;
Macro pchk
CNIF `1<>`2
    CERR "Wrong number of macro parameters"
CEND
End Macro

;echk{a,b}
;
Macro echk
CNIF `1<`2
    CERR "Not enough parameters"
CEND
End Macro

;syslibheader{libnum,firsttoke,lasttoke+1,init,return,finit,error[,flags]}
;               1        2         3       4     5      6     7      8
Macro syslibheader
CNIF `0<>8
    !pchk{`0,7}
    MOVEQ #0,d0:RTS
    Dc `1:Dc.l 0,0:Dc `2,`3:Dc.l 0,`4
    Dc `5:Dc.l `6,0,0,0,`7
CELSE
    MOVEQ #0,d0:RTS
    Dc `1:Dc.l 0:Dc 0,`8,`2,`3:Dc.l 0,`4
    Dc `5:Dc.l `6,0,0,0,`7
CEND
End Macro
;                             cleanup
;libheader{libnum,init,return,finit,error}
;            1     2     3      4    5
; libnum: the internal library number
; init: called on init at the beginning of the program
; return: 1 means the init routine returns a long word for use by other libraries
; finit: called at end of programm (cleanup)
; error: section only to be loaded when debugger is turned on
Macro libheader
!pchk{`0,5}
MOVEQ #0,d0:RTS:Dc `1:Dcb.l 4,0:Dc.l `2:Dc `3:Dc.l `4
Dcb.l 3,0:Dc.l `5
End Macro

#wordret=-1:#noret=0:#longret=1

;libfin{}
;or libfin{toke,load,save,use,free,defmax,shift} if maximums needed for this
;            1    2   3    4    5     6     7
; toke: pointer to !dumtoke confining the objects name
; load: not implemented, points to nullsub
; save: not implemented, points to nullsub
; used: called, when object is used bei "Use"-command
; free: called at end of program
; default number ob obects allocated by compiler, can be changed in compiler options
; size of each object as 1<<"shift"
Macro libfin
CNIF `0>0
    !pchk{`0,7}
CEND
Dc -1
CNIF `0=0
    Dc.l 0
CELSE
    Dc.l `1,`2,`3,`4,`5:Dc 0,`6,`7
CEND
End Macro

;astatement
;
Macro astatement
!pchk{`0,0}
Dc 1,0,0
End Macro

;ustatement - unknown type, gets passed to sub on the stack
;
Macro ustatement
!pchk{`0,0}
Dc 8+1,0,0
End Macro

;afunction{type}
;
Macro afunction
!pchk{`0,1}
Dc {`1 LSL 8}+2,0,0
End Macro

;ufunction - unknown type, type selected pushed on stack
;
Macro ufunction
!pchk{`0,0}
Dc 8+2,0,0
End Macro

;acommand{type}
;
Macro acommand
!pchk{`0,1}
Dc {`1 LSL 8}+3,0,0
End Macro

#byte=1
#word=2
#long=3
#quick=4
#float=5
#string=7
;
#usesize=0
#unknown=8
#arrayend=16
#array=32
#push=64
#varptr=128

;putargs{1,2,3,4}
;
Macro putargs
CSIF "`1">""
    Dc.b `1:!putargs{`2,`3,`4,`5,`6,`7,`8,`9,`a,`b,`c,`d,`e}
CEND
End Macro

;args{1,2,3,4,...}
;will be passed to routine in d0-d5, others on stack
Macro args
Dc `0:!putargs{`1,`2,`3,`4,`5,`6,`7,`8,`9,`a,`b,`c,`d,`e,`f}
Even
End Macro

;repargs{first rep,num rep,1,2,3,4.....}
;
Macro repargs
!echk{`0,3}
Dc {`1 LSL 12} OR {`2 LSL 8} OR {`0-2}
!putargs{`3,`4,`5,`6,`7,`8,`9,`a,`b,`c,`d,`e,`f,`g,`h,`i,`j,`k}
Even
End Macro

;putlibs
;
Macro putlibs
CSIF "`1">""
    Dc `1,`2:!putlibs{`3,`4,`5,`6,`7,`8,`9,`a,`b,`c,`d,`e,`f}
CEND
End Macro

;libs{lib,reg,lib,reg....}
;
Macro libs
!pchk{(`0 AND 1),0}
!putlibs{`1,`2,`3,`4,`5,`6,`7,`8,`9,`a,`b,`c,`d,`e,`f,`g,`h}
Dc 0
End Macro

;These constants are for passing data directly to a register
;from a library.
;
#ld0=0:#ld1=$100:#ld2=$200:#ld3=$300
#ld4=$400:#ld5=$500:#ld6=$600:#ld7=$700
;
#la0=$1000:#la1=$1100:#la2=$1200:#la3=$1300
#la6=$1600

;This one means you want it pushed on the stack
;
#lpush=$ff00

;Asking for a USED type data puts the currently used
;struct of a max type lib into the appropriate reg
;
#used=2
;
#ud0=#ld0|#used:#ud1=#ld1|#used
#ud2=#ld2|#used:#ud3=#ld3|#used
#ud4=#ld4|#used:#ud5=#ld5|#used
#ud6=#ld6|#used:#ud7=#ld7|#used

#ua0=#la0|#used:#ua1=#la1|#used
#ua2=#la2|#used:#ua3=#la3|#used
#ua6=#la6|#used

;Asking for a BASE type data puts the base item (item 0)
;of a block of max type structs into the paritcular reg
;
#base=1
;
#bd0=#ld0|#base:#bd1=#ld1|#base
#bd2=#ld2|#base:#bd3=#ld3|#base
#bd4=#ld4|#base:#bd5=#ld5|#base
#bd6=#ld6|#base:#bd7=#ld7|#base
;
#ba0=#la0|#base:#ba1=#la1|#base
#ba2=#la2|#base:#ba3=#la3|#base
#ba6=#la6|#base

;Asking for ITEM type data calculates a max type struct
;entry based on a specified data register. Just OR
;in the paramter (#pd0-#pd7) you which to use in the
;calculation. The final pointer ends in an address register
;
#pd0=0:#pd1=1:#pd2=2:#pd3=3
#pd4=4:#pd5=5:#pd6=6:#pd7=7
;
#item=$80
;
#ia0=#la0|#item:#ia1=#la1|#item
#ia2=#la2|#item:#ia3=#la3|#item
#ia6=#la6|#item

;Asking for a MAX type data passes the currently defined
;maximum setting as selected in COMPILER OPTIONS
;
#max=3
;
#md0=#ld0|#max:#md1=#ld1|#max
#md2=#ld2|#max:#md3=#ld3|#max
#md4=#ld4|#max:#md5=#ld5|#max
#md6=#ld6|#max:#md7=#ld7|#max
;
#ma0=#la0|#max:#ma1=#la1|#max
#ma2=#la2|#max:#ma3=#la3|#max
#ma6=#la6|#max

;subs{code,error1,0}
;
Macro subs
!pchk{`0,3}
Dc.l `2,`1,`3
Even
End Macro

;name{"name","help"}
;or name{"name","help",label}
;
Macro name
CNIF `0<>2
    !pchk{`0,3}
CEND
Dc -1:Dc.l 0:Dc 0
`3:Dc.b `1,0
Dc.b `2,0
Even
End Macro

;nullsub{routine,error1,error2,lib,lib,lib....}
;
Macro nullsub
!echk{`0,3}
Dc 0,0,0
!libs{`4,`5,`6,`7,`8,`9,`a,`b,`c,`d,`e,`f}
Dc.l `2,`1,`3
End Macro

;dumtoke{"name","help",label}
;
Macro dumtoke
!pchk{3,`0}
Dc 8,0,0:Dc.l 0:Dc 0
`3:Dc.b `1,0
Dc.b `2,0
Even
End Macro

Macro blitwait
BTST #6,$002(a1):'blitwait`@:BTST #6,$002(a1):BNE 'blitwait`@
End Macro

;copwait{x,y}
;
Macro copwait
!pchk{2,`0}
Dc {{`2 LSL 8} OR `1}+7,$fffe
End Macro

;copmove{reg,val}
;
Macro copmove
!pchk{2,`0}
Dc `1,`2
End Macro

;copend
;
Macro copend
!pchk{0,`0}
Dc $ffff,$fffe
End Macro

XINCLUDE libnums.ab3
;XINCLUDE asmmacs.ab3

;Setting up a library should happen as follows:
;
;any dumtokes for object names should be at the top
;(after libheader), so they don't get moved around when
;the library is extended.
;
;   !libheader
;
;   [!dumtoke] for object name -> if object type lib!
;
;   !astatement/!function/!ustatement/!ufunction
;   !args
;   !libs
;   !subs [back to args/libs if more]
;   !name
;
;   !astatement
;   .
;   .
;   .
;
;   !libfin
;
;Then your actual code!

