; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "wbstartuplib.obj"
; CreateIcon      = 0
; Residents       = "libmacs.res,amigalibs.res,blitzoffs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 1024
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 3
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 29
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 1
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
;**** WORKBENCH STARTUP AND PARAMETER FETCH *****
;
; aaron was here for bum7

!syslibheader{#wbstartuplib,$bf00,$bf02,init,1,finit,errors}

!nullsub{0,0,0}

!nullsub{GetWBStartupMsg ,0,0} ;$bf01
init:!nullsub{codeinit,0,0}

finit:!nullsub{codefinit,0,0}

!libfin

; Thilo was here for dos.include!
.GetWBStartupMsg
MOVE.l wbMsg,d0:RTS


;*********************** CODE BELOW ***********************

dosName:  Dc.b "dos.library",0:Even
dBase:    Dc.l  0
argPtr:   Dc.l  0
thisTask: Dc.l  0
thisArg:  Dc.l  0
thisLock: Dc.l  0
prevArg:  Dc.l  0
saveA0:   Dc.l  0
wbMsg:    Dc.l  0
inQuote:  Dc.w  0
; XINCLUDE "blitz2:blitzlibssource/wbinc.bb"

     #DATSIZE=14

    ; For each new argument we allocate DATSIZE bytes
    ; Data in this memory is..

    ; 0.l Pointer To Next one
    ; 4.l Pointer to this arguments text
    ; 8.w Length of this argument
    ; 10.l Lock for this argument
    #nextArg=0
    #argText=4
    #argLength=8
    #argLock=10


    #fromCLI=0
    #numArgs=2
    #firstArg=6
    #firstTool=10

argData
    Dc.w  0     ; Was it run from CLI?
    Dc.l  0     ; Number of arguments
    Dc.l  0     ; Pointer to first argument in list

Macro ExecCall
    MOVE.l  4,a6
    JSR     `1(a6)
    End Macro

;===========================================================
;
; a0  Points to the CLI argument string
;
;===========================================================
.codeinit
; Ok, preserve registers, as one has the stack size in it!
  MOVEM.l a1-a6/d1-d7,-(a7)

  MOVE.l  a0,argPtr
  MOVE.l  #0,argData+#numArgs
  MOVE.l  #0,argData+#firstArg
  MOVE.l  #0,wbMsg

  CMP.l   #"bLtZ",d7
  BEQ     runFromBlitz

; Get the address of our task
  MOVE.l  #0,a1
  !ExecCall{_FindTask}
  MOVE.l  d0,thisTask
  MOVE.l  d0,a3

; Check to see whether it was run from cli or workbench
  TST.l   SizeOf.Process\pr_CLI(a3)
  BNE     runFromCLI            ; Was run from the CLI
.
.fromWB
; Was run from WB
  MOVE.w  #0,argData       ; Was run from WB so set to 0

  LEA     SizeOf.Process\pr_MsgPort(a3),a0  ; Msg Port
  !ExecCall{_WaitPort}
  LEA     SizeOf.Process\pr_MsgPort(a3),a0  ; Msg Port
  !ExecCall{_GetMsg}
  MOVE.l  d0,wbMsg
  BEQ     GotAllArgs

  MOVE.l  d0,-(a7)      ;a0

.
.currentdir
  LEA     dosName,a1
  MOVE.l  4,a6
  JSR     -408(a6)
  MOVE.l  d0,a6
  MOVE.l  (a7),a0
  MOVE.l  $24(a0),a0  ;smarglist
  MOVE.l  (a0),d1     ;lock
  JSR     -126(a6)    ;-126 changedir  ;closelibrary
  MOVE.l  (a7)+,a0

  MOVE.l  SizeOf.WBStartup\sm_NumArgs(a0),d0
  SUBQ.l  #1,d0                 ; One less, as we forget
                                ; about the filename argument

  MOVE.l  d0,argData+#numArgs   ; Set the number of arguments
  BLE     GotAllArgs            ; No arguments, so finish

  MOVE.l  SizeOf.WBStartup\sm_ArgList(a0),a1     ; Pointer to WBArgs

; Point past first one!
.GetWBArg
  LEA     SizeOf.WBArg(a1),a1

  MOVEM.l d0/a1,-(a7)
  MOVE.l  SizeOf.WBArg\wa_Name(a1),thisArg
  MOVE.l  SizeOf.WBArg\wa_Lock(a1),thisLock
  BSR     AddArg
  MOVEM.l (a7)+,d0/a1

  MOVE.l  a0,a2                 ; Make copy of pointer to new arg

; Size the string and save that size
  MOVE.l  SizeOf.WBArg\wa_Name(a1),a0
  BSR     SizeString

  MOVE.w  d2,argLength(a2)      ; Set the size of the argument

  SUBQ.l  #1,d0
  BGT     GetWBArg

  BRA     GotAllArgs

;===============================================
; Was run from Blitz!
.runFromBlitz

; Was run from CLI
.runFromCLI
.
; Copy te CLI string to our buffer!
  LEA     cliString,a1
  MOVE.l  argPtr,a0
'Around:
  MOVE.b  (a0)+,(a1)+
  BNE     'Around
  LEA     cliString,a0

  MOVE.l  #0,argData+#numArgs
  MOVE.w  #-1,argData              ; Was run from CLI

.GetAnotherArg
  BSR     GetCLIArg

  MOVE.l  a0,saveA0               ; Save current pos in string

  TST     d2                      ; Checl length of arg
  BGT     WasArg                  ; >0
; If we were collecting a quoted argument allow any length
; of argument
  TST     inQuote
  BEQ     GotAllArgs              ; Was the last arg!
WasArg
  MOVE.l  a1,thisArg
  BSR     AddArg

  ADDQ.l  #1,argData+#numArgs     ; Got another argument

  MOVE.w  d2,argLength(a0)        ; Save length of arg

  MOVE.l  saveA0,a0

; OK, since to get here, we hit an EOL or NULL or QUOTE
; we can erase this character.
; This is so we have a NULL char at the end of EVERY
; cli argument
  MOVE.b  #0,-1(a0)
  BRA     GetAnotherArg

.GotAllArgs
  MOVE.l  #argData,d0             ; Return pointer to data
  MOVEM.l (a7)+,a1-a6/d1-d7
  RTS

;=======================================
; Accepts: a0 points to NULL terminated string
; returns: d2 holds length of string
.SizeString
  MOVEQ   #0,d2
CC
  CMP.b   #0,(a0)+
  BEQ     GotSize
  ADDQ.l  #1,d2
  BRA     CC
GotSize
  RTS

;=======================================
; Accepts: thisArg points to argument string
;           thisLock points to args lock
; Returns: a0 points to new argument memory

.AddArg
; Allocate space for a new pointer to argument
  MOVEQ   #DATSIZE,d0
  MOVE.l  #$10001,d1
  !ExecCall{_AllocMem}
  TST.l   d0
  BEQ     err

  TST.l   argData+#firstArg
  BNE     NotFirstArg
  MOVE.l  d0,argData+#firstArg    ; Set pointer to first argument
  BRA     Over
.NotFirstArg
  MOVE.l  prevArg,a0
  MOVE.l  d0,nextArg(a0)                 ; Link args together
.Over
  MOVE.l  d0,prevArg
  MOVE.l  d0,a0
  MOVE.l  thisArg,argText(a0)           ; Save pointer to this arg
  MOVE.l  thisLock,argLock(a0)     ; Save pointer to this args lock
  RTS


;=============================
; Accepts:  a0 points to string
; Returns:  a1 Pointer to this argument
;           d2.w length of this argument
;           a0 Points to char after argument
; Registers d0,d3,d2,a0,a1
;

; Skip spaces
; if char is " then set end char to " else set to <space>
; If " then advance pointer
; count chars until eol, NULL, or endchar

.GetCLIArg
  MOVE.w  #0,inQuote

; OK, go through the command line, and remove arguments!
  BSR     SkipSpaces
  MOVEQ   #0,d2           ; Clear length of this arg

  MOVE.b  #32,d3          ; End char is space by default
  CMP.b   #34,(a0)
  BNE     NotStartQuote
  MOVE.b  #34,d3          ; End char is now quote
  ADDQ.w  #1,a0           ; Advance pointer 1 char
  MOVE.w  #1,inQuote
NotStartQuote

  MOVE.l  a0,a1           ; Keep pointer to start of this arg

.GetArgChar
  MOVE.b  (a0)+,d0
  BEQ     GotArg          ; EQ = was null char
  CMP.b   #10,d0          ; Was it end of line?
  BEQ     GotArg
  CMP.b   d3,d0
  BEQ     GotArg          ; Quote finished this arg?
.NotSpace
  ADDQ.w  #1,d2
  BRA     GetArgChar
.GotArg
;; Check to see that the last char was indeed a quote if we
;; were collecting a quoted argument
;  TST.w   inQuote
;  BEQ     'Over
;  CMP.b   #34,d0
;  BNE     err2
'Over
  RTS

;=======================================

.SkipSpaces
  MOVE.b  (a0)+,d0
  BEQ     Skipped
  CMP.b   #32,d0
  BEQ     SkipSpaces
.Skipped
  SUBQ.w  #1,a0
  RTS



;========================================================
.
.codefinit

  MOVE.l  argData+#firstArg,a2
.FreeNext
  CMP.l   #0,a2
  BEQ     Over2
  MOVE.l  (a2),a3               ; Next arg

  MOVE.l  a2,a1
  MOVEQ   #DATSIZE,d0
  !ExecCall{_FreeMem}

  MOVE.l  a3,a2
  BRA     FreeNext
.Over2

  MOVE.l wbMsg(pc),d0
  BEQ   'alldone
  !ExecCall{_Forbid}
  MOVE.l wbMsg(pc),a1
  !ExecCall{_ReplyMsg}
  MOVE.l #0,wbMsg
'alldone

  RTS

cliString:  Dcb.b 256,0

.errors
err:  MOVE.l  #err1,d0:TRAP #0
err2: MOVE.l  #errMsg2,d0:TRAP #0
err1:  Dc.b  "Can't read args!",0
errMsg2:  Dc.b "Missing closing quote in argument string.",0
  Even

