; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "printlib.obj"
; CreateIcon      = 0
; Residents       = "libmacs.res,libjsrs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 52
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1011
; CursorColumn    = 17
; LabelSearch     = "c70"
; LabelRemark     = 0
; LabelAll        = 1
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 5
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 5
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
!libheader{#printlib,init,0,0,errorhandling}

!astatement
!repargs{0,1,#unknown}
!libs{#ffplib,#la6}
!subs{do_Print,0,0}
!name{"Print","Expression[,Expression...]"}

!astatement
!repargs{0,1,#unknown}
!libs{#ffplib,#la6}
!subs{do_NPrint,0,0}
!name{"NPrint","Expression[,Expression...]"}

!afunction{#string}
!args{#unknown}
!libs{#ffplib,0}
!subs{do_Str,0,0}
!name{"Str$","(Expression)"}

!astatement
!args{#string}
!libs
!subs{do_Format,chkstrlen,0}
!name{"Format","FormatString"}

!astatement
!args{#word}
!libs
!subs{do_FloatMode,0,0}
!name{"FloatMode","Mode : -1=standard, 0=guess, 1=exp"}

!afunction{#string}
!args{#unknown}
!libs{#ffplib,#la6}
!subs{do_UStr,0,0}
!name{"UStr$","(Expression)"}

!astatement
!repargs{0,1,8}
!libs{#ffplib,#la6}
!subs{do_UPrint,0,0}
!name{"UPrint","Expression[,Expression...]"} ;*****

!astatement
!repargs{0,1,8}
!libs{#ffplib,#la6}
!subs{do_UNPrint,0,0}
!name{"UNPrint","Expression[,Expression...]"}    ;*****


init: !nullsub{initcode,0,0}

!libfin

; ======================================================================================================================

_formatStr:               Ds.b 32
_lenFormatStr:            Ds.w 1
_numberPreDecimalPlaces:  Ds.w 1
_numberDecimalPlaces:     Ds.w 1
_showDecimalPoint:        Dc.l $2020
_returnString:            Ds.b 32
_returnForPrint:          Ds.b 32
L_0_230:                  Ds.w 1
_floatMode:               Ds.w 1

.initcode:
  CLR.w _lenFormatStr
  CLR.w _floatMode
RTS

.do_FloatMode:
  MOVE.w D0,_floatMode
RTS

.do_UNPrint:
  MOVE.w _lenFormatStr(PC),-(A7)
  CLR.w _lenFormatStr
  BSR do_NPrint
  MOVE.w (A7)+,_lenFormatStr
RTS

.do_UPrint:
  MOVE.w _lenFormatStr(PC),-(A7)
  CLR.w _lenFormatStr
  BSR do_Print
  MOVE.w (A7)+,_lenFormatStr
RTS

.do_Format:
  LEA _formatStr(PC),A1
  MOVE.l -(A2),D1           ; length of given format string
  MOVE.w D1,_lenFormatStr
  BEQ.w JL_0_2AC
    SUBQ.w #1,D1
    MOVEA.l D0,A0           ; pointer to given format string
    MOVEQ.l #-$01,D2
    MOVEQ.l #$00,D3
    MOVEQ.l #$00,D4
    MOVEQ.l #$00,D5
    JL_0_266:
      MOVE.b (A0),(A1)+

      CMPI.b #".",(A0)+       ; "."
      BNE.w JL_0_276
        MOVE.w D5,D2          ; reset D2 to 0
        BRA.w JL_0_296
      JL_0_276:
        CMPI.b #"#",-$1(A0)   ; "#"
        BEQ.w JL_0_28A
          CMPI.b #"0",-$1(A0) ; "0"
          BNE.w JL_0_296
        JL_0_28A:
          ADDQ.w #1,D3
          TST.w D2
          BMI.w JL_0_296      ; check if decimalPoint is inserted
            SUBQ.w #1,D3
            ADDQ.w #1,D4
      JL_0_296:
    DBF D1,JL_0_266
    MOVE.w D2,_showDecimalPoint
    MOVE.w D3,_numberPreDecimalPlaces
    MOVE.w D4,_numberDecimalPlaces
  JL_0_2AC:
RTS

.formatAndOutputResult:
  MOVEA.l A0,A1
  MOVEQ.l #-$01,D0
  JL_0_2B2:
    ADDQ.l #1,D0
  TST.b (A1)+
  BNE.w JL_0_2B2

  MOVE.w _lenFormatStr(PC),D1
  BEQ.w JL_0_438
  MOVE.l A2,-(A7)
  MOVEQ.l #-$01,D1
  MOVEQ.l #-$01,D2
  CMPI.b #$2D,(A0)          ; "-"
  BNE.w JL_0_2D6
    MOVEQ.l #$00,D2
    ADDQ.w #1,A0
    SUBQ.w #1,D0
  JL_0_2D6:
  MOVEQ.l #$00,D3
  MOVEQ.l #$00,D4
  MOVEQ.l #$00,D5
  MOVE.w D0,D6
  SUBQ.w #1,D6
  MOVEA.l A0,A1
  JL_0_2E2:
    CMPI.b #$2E,(A1)        ; "."
    BNE.w JL_0_2F0
      MOVE.w D5,D1
      BRA.w JL_0_2FC
    JL_0_2F0:
      ADDQ.w #1,D3
      TST.w D1
      BMI.w JL_0_2FC
        SUBQ.w #1,D3
        ADDQ.w #1,D4
    JL_0_2FC:
    ADDQ.w #1,A1
    ADDQ.w #1,D5
  DBF D6,JL_0_2E2
  LEA _returnString(PC),A1
  LEA _formatStr(PC),A2
  MOVE.w _lenFormatStr(PC),D6
  MOVEQ.l #$00,D1
  MOVE.w _numberPreDecimalPlaces(PC),D5
  SUB.w D3,D5
  BPL.w JL_0_32A
    MOVE.b #"?",(A1)+
    NEG.w D5
    ADDA.w D5,A0
    SUB.w D5,D0
    MOVE.w _numberPreDecimalPlaces(PC),D5
  JL_0_32A:
  MOVE.w D5,D3
  MOVE.w _numberPreDecimalPlaces(PC),D5
  BEQ.w JL_0_37E

  SUBQ.w #1,D5
  JL_0_336:
  BSR.w applyFormat
  BNE.w JL_0_42E
  CMPI.b #$23,(A2)+     ;"#"
   BNE.w JL_0_362
  SUBQ.w #1,D3
   BPL.w JL_0_35A
  SUBQ.w #1,D0
   BMI.w JL_0_35A
  MOVE.b (A0)+,(A1)+
  MOVE.l A1,D1
 BRA.w JL_0_37A

JL_0_35A:
  MOVE.b #$20,(A1)+
 BRA.w JL_0_37A

JL_0_362:
  SUBQ.w #1,D3
   BPL.w JL_0_376
  SUBQ.w #1,D0
   BMI.w JL_0_35A
  MOVE.b (A0)+,(A1)+
  MOVE.l A1,D1
 BRA.w JL_0_37A

JL_0_376:
  MOVE.b #"0",(A1)+
JL_0_37A:
   DBF D5,JL_0_336
JL_0_37E:
  SUBQ.w #1,D0
   BMI.w JL_0_38E
  CMPI.b #$2E,(A0)+       ; "."
   BEQ.w JL_0_390
  SUBQ.w #1,A0
JL_0_38E:
  ADDQ.w #1,D0
JL_0_390:
  MOVE.w _numberDecimalPlaces(PC),D5
   BEQ.w JL_0_3E2
  SUBQ.w #1,D5
JL_0_39A:
   BSR.w applyFormat
   BNE.w JL_0_3EA
  CMPI.b #$23,(A2)+
   BNE.w JL_0_3C6
  SUBQ.w #1,D4
   BMI.w JL_0_3BE
  SUBQ.w #1,D0
   BMI.w JL_0_3BE
  MOVE.b (A0)+,(A1)+
  MOVE.l A1,D1
 BRA.w JL_0_3DE

JL_0_3BE:
  MOVE.b #$20,(A1)+
 BRA.w JL_0_3DE

JL_0_3C6:
  SUBQ.w #1,D4
   BMI.w JL_0_3DA
  SUBQ.w #1,D0
   BMI.w JL_0_3DA
  MOVE.b (A0)+,(A1)+
  MOVE.l A1,D1
 BRA.w JL_0_3DE

  JL_0_3DA:
    MOVE.b #"0",(A1)+
  JL_0_3DE:
  DBF D5,JL_0_39A

  JL_0_3E2:
   BSR.w applyFormat
   BEQ.w JL_0_3E2
  JL_0_3EA:
  SUBQ.w #1,D0 : BMI.w JL_0_42E
  TST.l D3 : BEQ.w JL_0_42E
  CMPI.b #"5",(A0) : BCS.w JL_0_42E
    MOVEA.l D1,A0
    JL_0_400:
      SUBQ.w #1,A0
      CMPA.l #_returnString,A0 : BCS.w JL_0_42E
      CMPI.b #"0",(A0) : BCS.w JL_0_400
      CMPI.b #"9",(A0) : BHI.w JL_0_400
      ADDQ.b #1,(A0)
      CMPI.b #"9",(A0) : BLS.w JL_0_42E
      MOVE.b #"0",(A0)
    BRA.w JL_0_400
  JL_0_42E:
  LEA _returnString(PC),A0
  SUBA.l A0,A1
  MOVE.l A1,D0
  MOVEA.l (A7)+,A2

  JL_0_438:
  ALibJsr #putDataToChannel  ;a0:string, d0:length
 RTS

JL_0_440: ADDQ.w #1,A1
JL_0_442: ADDQ.w #1,A2
applyFormat:                               ; A2: formatString, A1: return string
    SUBQ.w #1,D6 : BMI.w JL_0_480
    CMPI.b #$23,(A2) : BEQ.w JL_0_480   ; "#"
    CMPI.b #"0",(A2) : BEQ.w JL_0_480   ; "0"
    CMPI.b #$2D,(A2) : BEQ.w JL_0_482   ; "-"
    CMPI.b #$2B,(A2) : BEQ.w JL_0_498   ; "+"
    CMPI.b #$2E,(A2) : BEQ.w JL_0_4AA   ; "."
    CMPI.b #$2C,(A2) : BEQ.w JL_0_4B2   ; ","
    MOVE.b (A2)+,(A1)+
BRA.w applyFormat
JL_0_480: RTS

JL_0_482:
  TST.w D2
  BPL.w JL_0_490
    JL_0_488:
    MOVE.b #$20,(A1)+       ; " "
    BRA.w JL_0_442
  JL_0_490:
    MOVE.b #$2D,(A1)+         ; "-"
BRA.w JL_0_442

JL_0_498:
  MOVE.b #$2B,(A1)          ; "+"
  TST.w D2
  BMI.w JL_0_440
    MOVE.b #$2D,(A1)+         ; "-"
BRA.w JL_0_442

JL_0_4AA:
  MOVE.b #$2E,(A1)+         ; "."
BRA.w JL_0_442

JL_0_4B2:
  CMPI.b #$20,-$1(A1)       ; " "
  BEQ.w JL_0_488

  MOVE.b (A2)+,(A1)+
BRA.w applyFormat

.do_UStr:
  MOVE.w _lenFormatStr(PC),-(A7)
  CLR.w _lenFormatStr
  BSR.w do_Str
  MOVE.w (A7)+,_lenFormatStr
RTS

.do_Str:
  MOVEM.l D2-D3,-(A7)
  MOVE.l D0,D2
  LEA outputHandler(PC),A0 : ALibJsr #setOutputChannel
  MOVE.l D0,-(A7)
  BSR.w JL_0_500
  MOVE.l D0,D2
  MOVEA.l (A7)+,A0 : ALibJsr #setOutputChannel
  MOVE.l D2,D0
  MOVEM.l (A7)+,D2-D3
RTS

JL_0_500:                   ;branch type str$
  MOVE.l D2,D0
  MOVE.w -(A2),D1

  CMPI.w ##quick,D1 : BEQ.w JL_0_5C8
  CMPI.w ##long,D1  : BEQ.w long2str
  CMPI.w ##word,D1  : BEQ.w JL_0_5B0
  CMPI.w ##float,D1 : BEQ.w float2str
  CMPI.w #$6,D1     : BEQ.w long2str
  CMPI.w ##string,D1: BEQ.w str2str
BRA.w JL_0_5A4

BRA.w copy_result_to_A3               ; handler to copy Data from a0 to a3
BRA.w outputHandler
outputHandler:                        ; copy return string to A3, length of string d0 -> A3 is pointer to string result of blitz function
  MOVE.l D0,D1
  BEQ.w JL_0_546
    JL_0_53E:
      MOVE.b (A0)+,(A3)+
      SUBQ.l #1,D1
    BNE.w JL_0_53E
  JL_0_546:
RTS

copy_result_to_A3:
  MOVEQ.l #-$01,D0
  JL_0_54A:                         ; ghidra: address 0021f60c
    ADDQ.l #1,D0
    MOVE.b (A0)+,(A3)+
  BNE.w JL_0_54A
  SUBQ.w #1,A3
RTS

.do_NPrint:
  BSR.w do_Print
  MOVEQ.l #$0A,D0
  ALibJsr #putByteToChannel
RTS

.do_Print:
  SUBQ.w #1,D7                      ; number of parameters
  JL_0_566:
    MOVE.w -(A2),D0
    BSR.w handleDatatypes
  DBF D7,JL_0_566
RTS

.handleDatatypes:
  CMPI.w ##quick,D0 : BEQ.w JL_0_5C6
  CMPI.w ##long,D0  : BEQ.w JL_0_5B8
  CMPI.w ##string,D0: BEQ.w JL_0_634
  CMPI.w ##word,D0  : BEQ.w JL_0_5AE
  CMPI.w ##float,D0 : BEQ.w JL_0_640
  CMPI.w #$6,D0     : BEQ.w JL_0_5B8
  MOVE.w -(A2),D0

JL_0_5A4:
  EXT.w D0
  EXT.l D0
  MOVEQ.l #$02,D1
BRA.w JL_0_9D4

JL_0_5AE:
  MOVE.w -(A2),D0
JL_0_5B0:
  EXT.l D0
  MOVEQ.l #$04,D1
  BRA.w JL_0_9D4

JL_0_5B8:
  MOVE.l -(A2),D0
long2str:
  BSR.w JL_0_A4C
  LEA _returnForPrint(PC),A0
 BRA.w formatAndOutputResult

JL_0_5C6:
  MOVE.l -(A2),D0
JL_0_5C8:
  MOVE.l D0,D2
  BPL.w JL_0_5DC
    NEG.l D2
    BSR.w JL_0_5E4
    MOVE.b #$2D,-(A0)     ; "-"
    BRA.w JL_0_5E0
  JL_0_5DC:
    BSR.w JL_0_5E4
  JL_0_5E0:
BRA.w formatAndOutputResult

JL_0_5E4:
  LEA L_0_230(PC),A0
  MOVE.w D2,D0
  BEQ.w JL_0_628
    MULU #$2710,D0      ; 10000
    MOVE.w D0,D1
    CLR.w D0
    SWAP D0
    CMPI.w #$8000,D1
    BCS.w JL_0_602
      ADDQ.l #1,D0
    JL_0_602:
    MOVEQ.l #$03,D1
    LEA L_0_230(PC),A0
    BSR.w padNumberWithZeros
    MOVE.b #$2E,-(A0)     ; "."
    LEA L_0_230(PC),A1

    JL_0_614:
      CMPI.b #"0",-$1(A1)
      BNE.w JL_0_626
        CMPI.b #$2E,-(A1)   ; "."
    BNE.w JL_0_614
    JL_0_626:

    CLR.b (A1)
  JL_0_628:

  MOVE.l D2,D0
  CLR.w D0
  SWAP D0
  MOVEQ.l #$04,D1
BRA.w JL_0_9F4


JL_0_634:
  MOVE.l -(A2),D0
  MOVE.l -(a2),a0
  ALibJsr #putDataToChannel
RTS

str2str:
 MOVE.l d2,a0
 MOVE.l d2,a3
 MOVE.l -(a2),d0
 ALibJsr #putDataToChannel
RTS

float2str:
  TST.b firstrun
  BNE 'do
    MOVE.b #1,firstrun
    MOVE.l d0,-(a7)
    ALibJsr #getfpumode
    MOVE.b d0,fpuon
    MOVE.l (a7)+,d0
 'do
  BTST #1,fpuon
  BEQ JL_0_642
    fmove.d fp0,fstore
    BRA JL_0_642
    JL_0_640:               ;float
     TST.b firstrun
     BNE 'do
      MOVE.b #1,firstrun
      MOVE.l d0,-(a7)
      ALibJsr #getfpumode
      MOVE.b d0,fpuon
      MOVE.l (a7)+,d0
   'do
    BTST #1,fpuon
    BNE 'fpu
      MOVE.l -(A2),D0
      BRA JL_0_642
   'fpu
      Dc.l $f2225400    ;fmove.d -(a2),fp0
  JL_0_642:

  MOVE.w _floatMode(PC),D1
  MOVE.w _lenFormatStr(PC),D2
  BEQ.w JL_0_650
    MOVEQ.l #-$01,D1
  JL_0_650:
  TST.b firstrun
  BNE 'do
    MOVE.b #1,firstrun
    MOVE.l d0,-(a7)
    ALibJsr #getfpumode
    MOVE.b d0,fpuon
    MOVE.l (a7)+,d0
 'do
  BTST #1,fpuon
  BEQ 'nofpu
    BSR dofpu
    LEA charDot(PC),A0
    BRA formatAndOutputResult
 'nofpu
    BSR.w JL_0_658
BRA.w formatAndOutputResult

.dofpu:
    Dc.l $f227e08e      ;fmovem.x fp1-fp3/fp7,-(a7)
    fmove.d fp0,fstore
    fbeq ret0
    LEA charDot(PC),A1
 OR.b #1,fstore+7       ;das ist neu
 MOVEQ   #0,d0
 fmove.d fstore,fp0
 fmove.x fp0,fp3
 fmove.x fp3,fp0
 fbge    'noneg
 fneg.x  fp0
 MOVE.b  #$2D,(A1)+           ; "-"
 fmove.x fp0,fp3
 'noneg fmove.x fp3,fp0
 fble    'out
 fmove.l #1,fp1
 'loop1 fcmp.x  fp1,fp0
 fbge    'in1
 fmove.l #10,fp1
 fmul.x  fp1,fp0
 fmove.x fp0,fp3
 SUBQ.l  #1,d0
 BRA   'loop1
 'in1 fmove.l #10,fp1
 fmove.d nullp1,fp2
 'loop2 fcmp.x fp1,fp0
 fblt    'out
 fmul.x  fp2,fp0
 fmove.x fp0,fp3
 ADDQ.l  #1,d0
 BRA   'loop2
 'out
 fmove.w #10,fp7
 MOVE.l d0,d2
 ADDQ.l #1,d2
 BGT 'nodot
   MOVE.b #$2e,(a1)+        ; "."
   MOVE.l d2,d0
   BEQ 'nodot
     CMP.l #-18,d0           ;12 digits after . can be zero
     BGE 'dod
      BRA ret0
'dod
   MOVE.b #$30,(a1)+    ; "0"
   ADDQ.l #1,d0
   TST.l d0
   BEQ 'nodot
 BRA 'dod
'nodot
 MOVE.l #15,d0   ;here is number of digit num
 MOVEQ #0,d6

 'loop
    CMPI.L  #$14,D6
    BGE   'do0
      fmove.x fp3,fp0
      Dc.l $f2000003 ;fintrz fp0
      fmove.l fp0,d1
      ADDI.l  #$30,d1          ; "0"
      MOVE.b  d1,(a1)+
      fmove.x fp3,fp1
      fsub.x  fp0,fp1
      fmul.x  fp7,fp1
      fmove.x fp1,fp3
      BRA  'skip0
   'do0
      MOVE.b  #$30,(a1)+      ; "0"
   'skip0 
    SUBQ.l  #1,d0
    BEQ   'exit
    TST.L   d2
    BEQ   'skip2
      SUBQ.L  #1,d2
      BNE   'skip2
        MOVE.b  #$2E,(a1)+       ; "."
   'skip2
    ADDQ.L  #1,D6
  BRA  'loop
 'exit
  SUBQ.l #1,a1
 'rem0
  CMP.b #"0",(a1)
  BNE 'ex
    SUBQ.l #1,a1
    CMP.b #".",(a1)
    BNE 'rem0
      BRA 'dot
 'ex
  ADDQ.l #1,a1
 'dot CLR.b (a1)+
  Dc.l $f21fd071 ;fmovem.x (a7)+,fp1-fp3/fp7
RTS

ret0
  LEA charDot(PC),A1
  MOVE.w #$3000,(a1)
  Dc.l $f21fd071 ;fmovem.x (a7)+,fp1-fp3/fp7
RTS

JL_0_658:
  MOVEM.l D2-D5/A1-A3,-(A7)
  MOVE.w D1,-(A7)
  LEA L_0_872(PC),A0
  TST.b D0
  BNE.w JL_0_66A
    MOVEQ.l #$41,D0                     ; "A"
  JL_0_66A:
  MOVE.w #$2B2E,$0(A0)                  ; "+."
  MOVE.b D0,D1
  BPL.w JL_0_67A
    ADDQ.b #2,$0(A0)
  JL_0_67A:
  ADD.b D1,D1
  MOVE.b #$80,D0
  EOR.b D0,D1
  EXT.w D1
  ASR.w #1,D1
  MOVEQ.l #$01,D3
  LEA L_0_926(PC),A3
  CMP.w (A3),D1
  BLT.w JL_0_6BA
  BGT.w JL_0_6A6
JL_0_696:
  CMP.l $2(A3),D0
   BCC.w JL_0_6CA
JL_0_69E:
  ADDQ.w #6,A3
  SUBQ.w #1,D3
 BRA.w JL_0_6CA

JL_0_6A6:
  LEA -$6(A3),A3
  ADDQ.w #1,D3
  CMP.w (A3),D1
   BGT.w JL_0_6A6
   BEQ.w JL_0_696
 BRA.w JL_0_69E

JL_0_6BA:
  LEA $6(A3),A3
  SUBQ.w #1,D3
  CMP.w (A3),D1
   BLT.w JL_0_6BA
   BEQ.w JL_0_696
JL_0_6CA:
  MOVE.l #$452B3030,$A(A0)
  MOVE.w D3,D2
   BPL.w JL_0_6DE
  NEG.w D2
  ADDQ.b #2,$B(A0)
JL_0_6DE:
  CMPI.w #$A,D2
   BCS.w JL_0_6EE
  ADDQ.b #1,$C(A0)
  SUBI.w #$A,D2
JL_0_6EE:
  OR.b D2,$D(A0)
  MOVEQ.l #$06,D2
  LEA $2(A0),A1
  TST.l D0
   BPL.w JL_0_706
  TST.b $5(A3)
   BNE.w JL_0_708
JL_0_706:
  CLR.b D0
JL_0_708:
  MOVE.w D1,D4
  SUB.w (A3)+,D4
  MOVE.l (A3)+,D5
  LSR.l D4,D5
  MOVEQ.l #$09,D4
JL_0_712:
  SUB.l D5,D0
   DBCS D4,JL_0_712
   BCS.w JL_0_71E
  CLR.b D4
JL_0_71E:
  ADD.l D5,D0
  SUBI.b #$9,D4
  NEG.b D4
  ORI.b #"0",D4
  MOVE.b D4,(A1)+
   DBF D2,JL_0_708
  MOVE.b #"0",(A1)+
  MOVE.w (A7)+,D1
   BMI.w JL_0_7C8
   BNE.w JL_0_74E
  CMPI.w #$8,D3
   BCS.w JL_0_7C8
  CMPI.w #$FFF8,D3
   BCC.w JL_0_7C8
JL_0_74E:
  LEA L_0_872(PC),A0
  MOVE.b $2(A0),$1(A0)
  MOVE.b #$2E,$2(A0)      ; "."
JL_0_75E:
  CMPI.b #"0",-(A1)
   BEQ.w JL_0_75E
  CMPI.b #$2E,(A1)+       ; "."
   BNE.w JL_0_77A
  SUBQ.w #1,A1
  CMPI.b #"0",$1(A0)
   BEQ.w JL_0_7B8
JL_0_77A:
  SUBQ.w #1,D3
  MOVE.b #"E",(A1)+
  MOVE.b #$2B,(A1)+
  TST.w D3
   BPL.w JL_0_792
  MOVE.b #$2D,-$1(A1)     ; "-"
  NEG.w D3
JL_0_792:
  MOVEQ.l #$00,D2
  MOVE.w D3,D2
  DIVU #$A,D2
  TST.w D2
   BEQ.w JL_0_7A8
  MOVE.w D2,D1
  ADDI.w #$30,D1          ; "0"
  MOVE.b D1,(A1)+
JL_0_7A8:
  LSL.w #1,D2
  MOVE.w D2,D1
  LSL.w #2,D2
  ADD.w D1,D2
  SUB.w D2,D3
  ADDI.w #$30,D3          ; "0"
  MOVE.b D3,(A1)+
JL_0_7B8:
  CLR.b (A1)
  CMPI.b #$2D,(A0)        ; "-"
   BEQ.w JL_0_86A
  ADDQ.w #1,A0
BRA.w JL_0_86A

JL_0_7C8:
  LEA L_0_882(PC),A0
  LEA L_0_89C(PC),A1
  MOVEQ.l #$05,D1
  MOVE.l #$30303030,D2   ; "0000"
  MOVE.b D2,-$1(A1)      ; set char0 to "0"
  JL_0_7DC:              ; prepare string with 24x"0"
    MOVE.l D2,(A0)+
    MOVE.l D2,(A1)+
  DBF D1,JL_0_7DC
  MOVE.b #$2E,(A0)        ; "."
  TST.w D3
  BPL.w JL_0_7F0
    ADDQ.w #1,A0
  JL_0_7F0:
  SUBA.w D3,A0
  LEA L_0_874(PC),A1
  MOVE.l A0,-(A7)
  MOVEQ.l #$07,D1
  JL_0_7FA:
    CMPI.b #$2E,(A0)        ; "."
    BNE.w JL_0_804
      ADDQ.w #1,A0
    JL_0_804:
    MOVE.b (A1)+,(A0)+
  DBF D1,JL_0_7FA
  CMPA.l #char0,A0
   BCS.w JL_0_846
JL_0_814:
  CMPI.b #"0",-(A0)
   BNE.w JL_0_822
  CLR.b (A0)
 BRA.w JL_0_814

JL_0_822:
  CMPI.b #$2E,(A0)        ; "."
   BEQ.w JL_0_832
  ADDQ.w #1,A0
  CLR.b (A0)
 BRA.w JL_0_84C

JL_0_832:
  CMPA.l (A7),A0
   BHI.w JL_0_846
  ADDQ.w #4,A7
  MOVE.b #"0",(A0)
  CLR.b $1(A0)
 BRA.w JL_0_86A

JL_0_846:
  CLR.b charDot
JL_0_84C:
  MOVEA.l (A7)+,A0
  CMPA.l #charDot,A0
   BCS.w JL_0_85C
  LEA charDot(PC),A0
JL_0_85C:
  MOVE.b L_0_872(PC),-(A0)
  CMPI.b #$2D,(A0)          ; "-"
   BEQ.w JL_0_86A
  ADDQ.w #1,A0
JL_0_86A:
  MOVEM.l (A7)+,D2-D5/A1-A3
 RTS

JL_0_870:
RTS

fstore:   Dc.d 0
nullp1:   Dc.d 0.1
firstrun: Dc.b 0
fpuon:    Dc.b 0
Even

L_0_872:  Ds.w 1
L_0_874:  Ds.b 14
L_0_882:  Ds.b 24
charDot:  Dc.b $2E              ; "."
char0:    Dc.b $30              ; "0"
L_0_89C:  Ds.b 178
L_0_926:  Ds.b 174

JL_0_9D4:
  LEA L_0_230(PC),A0
  TST.l D0
  BPL.w JL_0_9EC
    NEG.l D0
    BSR.w JL_0_9F4
    MOVE.b #$2D,-(A0)       ; "-"
    BRA.w formatAndOutputResult
  JL_0_9EC:
    BSR.w JL_0_9F4
BRA.w formatAndOutputResult

JL_0_9F4:
  BSR.w padNumberWithZeros
  JL_0_9F8:
    CMPI.b #"0",(A0)+
  BEQ.w JL_0_9F8

  TST.b -(A0)
  BEQ.w JL_0_A08
    RTS
  JL_0_A08:
  MOVE.b #"0",-(A0)
RTS

padNumberWithZeros:                 ; a0: rightmost buffer pos, d0: value, d1: places
    DIVU #$A,D0
    SWAP D0
    ORI.w #$30,D0         ; "0": convert digit to ascii
    MOVE.b D0,-(A0)
    CLR.w D0
    SWAP D0
  DBF D1,padNumberWithZeros
RTS


L_0_A24:
  Dc.l $00000001 ; 1
  Dc.l $0000000A ; 10
  Dc.l $00000064 ; 100
  Dc.l $000003E8 ; 1.000
  Dc.l $00002710 ; 10.000
  Dc.l $000186A0 ; 100.000
  Dc.l $000F4240 ; 1.000.000
  Dc.l $00989680 ; 10.000.000
  Dc.l $05F5E100 ; 100.000.000
  Dc.l $3B9ACA00 ; 1.000.000.000

JL_0_A4C:
  LEA _returnForPrint(PC),A0
  TST.l D0
  BPL.w JL_0_A5C
    MOVE.b #$2D,(A0)+       ; "-"
    NEG.l D0
  JL_0_A5C:
  MOVEQ.l #$00,D1
  MOVEQ.l #$24,D2           ; 36

  JL_0_A60:
    MOVEQ.l #$30,D3         ; "0" ascii code for "0"

    JL_0_A62:
      CMP.l L_0_A24(PC,D2.W),D0
      BCS.w JL_0_A74
        SUB.l L_0_A24(PC,D2.W),D0
        ADDQ.w #1,D3        ; add ascii code from 0 to matching digit
    BRA.w JL_0_A62
    JL_0_A74:

    CMPI.w #$30,D3            ; "0"
    BNE.w JL_0_A82
      TST.w D1
      BEQ.w JL_0_A86
    JL_0_A82:
      MOVE.b D3,(A0)+
      MOVEQ.l #$01,D1         ; add a 0 at the end
    JL_0_A86:
    SUBQ.w #4,D2
  BPL.w JL_0_A60

  TST.w D1
  BNE.w JL_0_A96
    MOVE.b #"0",(A0)+
  JL_0_A96:
  CLR.b (A0)
 RTS


;******************** ERROR CHECKING *********************

errorhandling:
  MOVE.l #errorMessage,D0 : TRAP #$0

errorMessage:
  Dc.b "Format String too long",0
  Dc.b $34
  Even

chkstrlen:
  CMPI.l #$20,-$4(A2) : BHI.w errorhandling : RTS  ; 32 bytes
