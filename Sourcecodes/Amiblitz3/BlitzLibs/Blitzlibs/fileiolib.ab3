; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "fileiolib.obj"
; CreateIcon      = 0
; Residents       = "blitzlibs:libmacs.res,blitzlibs:blitzoffs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 332
; CursorColumn    = 1
; LabelSearch     = "docopy"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 20
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
#readbuflen=300
; ***** FILEIOLIB *****
;

; 28th August, 1993
;
; added exists() which tells you if file is there and size if cool
;
; March 1995 (BUM 6)
;
; no more writing to a read file
; exists recognises drawers
;
; November 1994
; exists returns -1 for drawer, thanks Steve

!libheader{#fileiolib,init,0,0,errors}

!afunction{2}
!args{2,7}
!libs{#fileiolib,$1180,#doslib,#la6}
!subs{doopenfile,0,0}
!name{"OpenFile","(File#,Filename$)"}

!astatement
!args{2}
!libs{#fileiolib,$1380,#doslib,#la6}
!subs{dofreefile,0,0}
!name{"CloseFile","File#"}

!astatement
!args{7}
!libs{#doslib,#la6}
!subs{dokillfile,0,0}
!name{"KillFile","Filename$"}

!astatement
!repargs{1,1,2,$80}
!libs{#fileiolib,$1380}
!subs{dorecord,0,0}
!name{"Fields","File#,Var1[,Var2...]"}

!astatement
!args{2,2}
!libs{#fileiolib,$1380,#doslib,#la6}
!subs{doput,racchk,0}
!name{"Put","File#,Record"}

!astatement
!args{2,2}
!libs{#fileiolib,$1380,#doslib,#la6}
!subs{doget,racchk,0}
!name{"Get","File#,Record"}

!astatement
!args{2}
!libs{#fileiolib,$1380}
!subs{dofileoutput,0,0}
!name{"FileOutput","File#"}

!astatement
!args{2}
!libs{#fileiolib,$1380}
!subs{dofileinput,0,0}
!name{"FileInput","File#"}

!nullsub{0,0,0}

!afunction{3}
!args{2}
!libs{#fileiolib,$1280,#doslib,#la6}
!subs{dolof,fchk,0}
!name{"Lof","(File#)"}

!acommand{#long}
!args{2,3}
!libs{#fileiolib,$1280,#doslib,#la6}
!subs{dofileseek,fchk,0}
!name{"FileSeek","File#,Position"}

!afunction{3}
!args{2}
!libs{#fileiolib,$1280}
!subs{doloc,fchk,0}
!name{"Loc","(File#)"}

!afunction{3}
!args{2}
!libs{#fileiolib,$1280,#doslib,#la6}
!subs{doeof,fchk,0}
!name{"Eof","(File#)"}

!astatement
!args{3}
!libs
!subs{dodbufflen,dbchk,0}
!name{"DosBuffLen","Bytes"}

init:!nullsub{codeinit,0,0,#doslib,#ld0}

!dumtoke{"File","",_toke}

!afunction{2}
!args{2,7}
!libs{#fileiolib,$1180,#doslib,#la6}
!subs{doreadfile,0,0}
!name{"ReadFile","(File#,Filename$)"}

!afunction{2}
!args{2,7}
!libs{#fileiolib,$1180,#doslib,#la6}
!subs{dowritefile,0,0}
!name{"WriteFile","(File#,Filename$)"}

!astatement
!args{2,3,3}
!libs{#fileiolib,$1280,#doslib,#la6}
!subs{dowritemem,fchk,0}
!name{"WriteMem","File#,Address,Length"}

!astatement
!args{2,3,3}
!libs{#fileiolib,$1280,#doslib,#la6}
!subs{doreadmem,fchk,0}
!name{"ReadMem","File#,Address,Length"}

!afunction{#long}
!args{#string}
!libs{#doslib,#la6}
!subs{doexists,0,0}
!name{"Exists","(Filename$)"}

!astatement
!args{2,3|#varptr}
!libs{#fileiolib,$1280,#doslib,#la6}
!subs{dowritevar,fchk,0}
!name{"WriteType","File#,Variable ;write a whole type (strings too)"}

!astatement
!args{2,3}
!libs{#fileiolib,$1280,#doslib,#la6}
!subs{doreadvar,fchk,0}
!name{"ReadType","File#,Variable ;read a whole type (strings too)"}

!astatement
!args{3,3}
!libs
!subs{docopytype,0,0}
!name{"CopyType","srctype,dsttype ;copy a whole type (strings too) to another"}

!astatement
!args{3}
!libs
!subs{docleartype,0,0}
!name{"ClearType","type; clear a whole type (strings too)"}
 
;

_load:!nullsub{0,0,0}

_save:!nullsub{0,0,0}

_use:!nullsub{0,0,0}

_free:!nullsub{dofreefile,0,0,#doslib,#la6}

!libfin{_toke,_load,_save,_use,_free,5,5}

;
; A File looks like this:
;
; 00.l Dos Handle (0 = no file open)
; 04.l length of record (IF any)
; 08.l - UNUSED
; 12.l - linked list of record structs -
    ;
    ;00.l - next
    ;04.l - buffer
    ;08.l - length
; 16.l - mydos buffer
; 20.w - len of mydos
; 22.w - buffer flags: <0 - buffer has been written to.
; 24.w - #valid chars in buffer
; 26.w - seek offset in buffer...
; 28.l - dos seek loc of start of buffer.

;********************** CODE BELOW ************************

_dosbase:Dc.l 0
temp:Dc 0
infile:Dc.l 0
outfile:Dc.l 0
sizec:Dc.l 0
doslen:Dc.l 8192    ;size of mydos buffer
_handle:Dc.l 0
_buffer:Dc.l 0
srcbuff:Dc.l 0
size:Dc.l 0
tstore: Dc.l 0
mykey:Dc.l 0
myfib:Dc.l 0
readbuf:Ds.b #readbuflen
        Dc.l 0
tempstr:Dc.w 0
Even

;.doexists
; MOVE.l d0,d1:MOVEQ#-2,d2:JSR _Lock(a6):MOVE.l d0,mykey:BLE exfail
; MOVE.l#260,d0:MOVEQ#0,d1:ALibJsr $c002:MOVE.l d0,myfib
; MOVE.l mykey(pc),d1:MOVE.l d0,d2:JSR _Examine(a6)
; MOVE.l mykey(pc),d1:JSR _UnLock(a6)
; MOVE.l myfib(pc),a1:MOVE.l 4(a1),d4 ;length
; MOVE.l myfib(pc),a1:MOVE.l #260,d0:ALibJsr $c003
; MOVE.l d4,d0:RTS
;exfail:MOVEQ.l#0,d0:RTS

;.doexists
; MOVE.l d0,d1:MOVEQ#-2,d2:JSR _Lock(a6):MOVE.l d0,mykey:BLE exfail
; MOVE.l#260,d0:MOVEQ#0,d1:ALibJsr $c002:MOVE.l d0,myfib
; MOVE.l mykey(pc),d1:MOVE.l d0,d2:JSR _Examine(a6)
; MOVE.l mykey(pc),d1:JSR _UnLock(a6)
; MOVE.l myfib(pc),a1:MOVE.l 124(a1),d4 ;length
; MOVE.l myfib(pc),a1:MOVE.l #260,d0:ALibJsr $c003
; MOVE.l d4,d0:RTS
;exfail:MOVEQ.l#0,d0:RTS

;Exists now returns -1 if it find a DIR.
;Change made by S. Matty
.doexists
 MOVE.l d0,d1:MOVEQ#-2,d2:JSR _Lock(a6):MOVE.l d0,mykey:BLE exfail
 MOVE.l#260,d0:MOVEQ#0,d1:ALibJsr $c002:MOVE.l d0,myfib
 MOVE.l mykey(pc),d1:MOVE.l d0,d2:JSR _Examine(a6)
 MOVE.l mykey(pc),d1:JSR _UnLock(a6)
 MOVE.l myfib(pc),a1:MOVE.l 124(a1),d4 ;length
 CMP.l  #2,120(a1)
 BNE    'nope
 MOVEQ  #-1,d4
 'nope:
 MOVE.l myfib(pc),a1:MOVE.l #260,d0:ALibJsr $c003
 MOVE.l d4,d0:RTS
exfail:MOVEQ.l#0,d0:RTS


dodbufflen:MOVE.l d0,doslen:RTS

.dowritevar ;a2=file, d1=buffer, d2=len
CMP.w #$ab12,4(a7)
BNE errwv
LEA 6(a7),a3
MOVEM.l d4-d7/a3,-(a7)
MOVEQ #0,d0
MOVE.w (a3)+,d0:MOVE.l d0,size:MOVE.l d1,_buffer:MOVE.l a2,_handle:
CMP.l #4,size
BLE 'nostring
MOVE.l #tstore,a0
MOVE.l size,(a0)
MOVEQ #4,d3
MOVE.l a0,d2
MOVE.l a2,d1
BSR mywrite                ;write size
MOVEQ #0,d4
MOVE.w (a3)+,d4 ;num of strings
BEQ 'nostring
ADD.l d4,a3
MOVEQ #0,d7
MOVEQ #0,d5
MOVE.w -(a3),d5
MOVE.l size,d6
'loop CMP.l d5,d7
BEQ 'dostring
MOVE.l a2,d1
MOVE.l _buffer,d2
ADD.l d7,d2
MOVEQ #1,d3
BSR mywrite2
ADDQ.l #1,d7
CMP.l d7,d6
BNE 'loop
'exit MOVEM.l (a7)+,d4-d7/a3
RTS
'nostring:MOVEM.l (a7)+,d4-d7/a3
MOVE.l a2,d1
MOVE.l _buffer,d2
MOVE.l size,d3
BRA mywrite
'dostring
MOVE.l _buffer,a0
ADD.l d7,a0
TST.l (a0)
BNE 'ok1
LEA tempstr,a0
BRA 'ok2
'ok1 MOVE.l (a0),a0
'ok2 MOVE.w -2(a0),d3
ADDQ #5,d3
LEA -4(a0),a0
MOVE.l a0,d2
MOVE.l a2,d1
BSR mywrite
ADDQ.l #4,d7
CMP.l d7,d6
BLE  'exit
SUBQ #2,d4
BEQ 'loop
MOVE.w -(a3),d5
BRA 'loop
.docleartype
CMP.w #$ab12,4(a7)
BNE errwv
LEA 6(a7),a3
MOVEM.l d4-d7/a3,-(a7)
MOVE.l d0,srcbuff
MOVEQ #0,d0
MOVE.w (a3)+,d0:MOVE.l d0,size
MOVE.l d1,_buffer
MOVEQ #0,d4
MOVE.w (a3)+,d4
ADD.l d4,a3
MOVEQ #0,d7
MOVEQ #0,d5
MOVE.w -(a3),d5
MOVE.l size,d6
'loop CMP.l d5,d7
BEQ 'dostring
MOVE.l srcbuff,a0
ADD.l d7,a0
CLR.b (a0)
ADDQ.l #1,d7
CMP.l d7,d6
BNE 'loop
'exit2 MOVEM.l (a7)+,d4-d7/a3
RTS
'dostring
 MOVE.l srcbuff,d0
 ADD.l d7,d0
 MOVE.l d0,a0
 TST.l (a0)
 BEQ 'nostring
'stringok MOVE.l (a0),a0
 CLR.b (a0)
'nostring
 ADDQ.l #4,d7
 CMP.l d7,d6
 BLE  'exit2
 MOVE.w -(a3),d5
 BRA 'loop
 

.docopytype
CMP.w #$ab12,4(a7)
BNE errwv
LEA 6(a7),a3
MOVEM.l d4-d7/a3,-(a7)
MOVE.l d0,srcbuff
MOVEQ #0,d0
MOVE.w (a3)+,d0:MOVE.l d0,size
MOVE.l d1,_buffer
MOVEQ #0,d4
MOVE.w (a3)+,d4
ADD.l d4,a3
MOVEQ #0,d7
MOVEQ #0,d5
MOVE.w -(a3),d5
MOVE.l size,d6
CMP.w #0,d4
BEQ 'skip
'loop CMP.l d5,d7
BEQ 'dostring
'skip MOVE.l srcbuff,a0
MOVE.l _buffer,a1
ADD.l d7,a0
ADD.l d7,a1
MOVE.b (a0),(a1)
ADDQ.l #1,d7
CMP.l d7,d6
BNE 'loop
'exit2 MOVEM.l (a7)+,d4-d7/a3
RTS
'dostring
 MOVE.l _buffer,a2
 ADD.l d7,a2
 MOVE.l srcbuff,d0
 ADD.l d7,d0
 MOVE.l d0,a0
 TST.l (a0)
 BNE 'stringok
 LEA tempstr,a0
 BRA 'nostring
'stringok MOVE.l (a0),a0
'nostring
 MOVE.l a3,-(a7)
 MOVE.l a0,a3
 MOVE.l -4(a0),-(a7)
 ALibJsr $c702         ;string assign
 ADDQ #4,a7
 MOVE.l (a7)+,a3
 ADDQ.l #4,d7
 CMP.l d7,d6
 BLE  'exit2
 MOVE.w -(a3),d5
 BRA 'loop
.doreadvar ;a2=file, d1=buffer, d2=len
CMP.w #$ab12,4(a7)
BNE errwv
LEA 6(a7),a3
MOVEM.l d4-d7/a3,-(a7)
MOVEQ #0,d0
MOVE.w (a3)+,d0:MOVE.l d0,sizec:MOVE.l d1,_buffer:MOVE.l a2,_handle:
CMP.l #4,sizec
BLE 'nostring
MOVE.l #tstore,a0
MOVEQ #4,d3
MOVE.l a0,d2
MOVE.l a2,d1
BSR myread                ;read size
MOVE.l #tstore,a0
MOVE.l (a0),size
MOVEQ #0,d4
MOVE.w (a3)+,d4 ;num of strings
BEQ 'nostring
ADD.l d4,a3
MOVEQ #0,d7
MOVEQ #0,d5
MOVE.w -(a3),d5
MOVE.l size,d6
'loop CMP.l d5,d7
BEQ 'dostring
MOVE.l a2,d1
MOVE.l _buffer,d2
ADD.l d7,d2
MOVEQ #1,d3
BSR myread
ADDQ.l #1,d7
CMP.l d7,d6
BNE 'loop

'exit
CMP.l sizec,d7
BEQ 'noeq
MOVE.l sizec,d6
'c2: MOVE.l _buffer,a0
ADD.l d7,a0
CMP.l d5,d7
BEQ 'str0
CLR.b (a0)+
ADDQ.l #1,d7
'lp1 CMP.l d6,d7
BNE 'c2
'noeq: MOVEM.l (a7)+,d4-d7/a3
RTS
'exit2 CMP.l sizec,d7
       BEQ 'noeq
       SUBQ.l #2,d4
       BEQ 'exit
       MOVE.w -(a3),d5
       BRA 'exit
'str0
 ADDQ.l #4,d7
 TST.l (a0)
 BEQ 'nw
 MOVE.l (a0),a0
 CLR.l -4(a0)
'nw
 SUBQ #2,d4
 BEQ 'lp1
 MOVE.w -(a3),d5
 BRA 'lp1
'nostring:MOVEM.l (a7)+,d4-d7/a3
MOVE.l a2,d1
MOVE.l _buffer,d2
MOVE.l size,d3
BRA myread
'dostring
MOVE.l #4,d3
MOVE.l a2,d1
MOVE.l #tstore,d2
BSR myread            ;read stringsize
MOVE.l #tstore,a0
MOVE.l (a0),d0        ;size
MOVEM.l a2/a3,-(a7)
MOVE.l d0,-(a7)
ADDQ.l #1,d0
CMP.l #readbuflen-8,d0
BGE errst
LEA readbuf,a3
MOVE.l a3,d2
MOVE.l a2,d1
MOVE.l d0,d3
BSR myread
MOVE.l _buffer,a2
ADD.l d7,a2
ALibJsr $c702         ;string assign
ADDQ #4,a7
MOVEM.l (a7)+,a2/a3
ADDQ.l #4,d7
CMP.l d7,d6
BLE  'exit2
SUBQ.l #2,d4
BEQ 'loop
MOVE.w -(a3),d5
BRA 'loop

.dowritemem ;a2=file, d1=buffer, d2=len
MOVE.l d2,d3:MOVE.l d1,d2:MOVE.l a2,d1:BRA mywrite

.doreadmem  ;a2=file, d1=buffer, d2=len
MOVE.l d2,d3:MOVE.l d1,d2:MOVE.l a2,d1:BRA myread


;**********************************************************
;
;   The following routines allow for the simple
;   fact that DOS is FUCT.
;

.myflush ;clean up my buff - a3=used file.
;
MOVE.l 22(a3),d0:BEQ 'done
;
MOVEM.l d2-d3,-(a7)
MOVE 22(a3),d0:BPL 'skip
;
;Write it out!
;
MOVE.l (a3),d1:MOVE.l 28(a3),d2:MOVEQ #-1,d3
JSR _Seek(a6)
MOVE.l (a3),d1:MOVE.l 16(a3),d2:MOVEQ #0,d3:MOVE 24(a3),d3
JSR _Write(a6)
;
'skip
MOVE.l (a3),d1:MOVE.l 28(a3),d2:MOVEQ #0,d0:MOVE 26(a3),d0
ADD.l d0,d2:MOVE.l d2,28(a3):MOVEQ #-1,d3:JSR _Seek(a6)
CLR.l 22(a3):CLR 26(a3)
MOVEM.l (a7)+,d2-d3
;
'done:RTS

.mywrite    ;d1=file, d2=buffer, d3=len
TST.l d3:BNE mywrite2:RTS
;
mywrite2:MOVE.l a3,-(a7):MOVE.l d1,a3
;
MOVEQ #0,d0:MOVE 20(a3),d0:CMP.l d0,d3:BHI 'skip
MOVE 26(a3),d0:ADD d3,d0:CMP 20(a3),d0:BLS 'writeit
;
BSR myflush
;
'writeit:MOVE #-1,22(a3):MOVE.l 16(a3),a0:ADD 26(a3),a0
MOVE.l d2,a1:MOVE.l d3,d0
ADD d3,26(a3):MOVE 26(a3),d0:CMP 24(a3),d0:BLS 'noinc
MOVE d0,24(a3)
'noinc:SUBQ #1,d3
'loop:MOVE.b (a1)+,(a0)+:DBF d3,'loop
MOVE.l (a7)+,a3:RTS
;
'skip2:;not enough space in remainder of buffer...
BSR myflush:BRA 'writeit

'skip:;too big for our buffer!
BSR myflush
MOVE.l (a3),d1:JSR _Write(a6):CMP.l #-1,d0:BEQ 'oops
ADD.l d0,28(a3)
'oops:MOVE.l (a7)+,a3:RTS

.myread     ;d1=file, d2=buffer, d3=len
TST.l d3:BNE 'doit:RTS
;
'doit:MOVEM.l a3/a6,-(a7):MOVE.l d1,a3
 MOVE.l _dosbase(pc),a6
;
MOVEQ #0,d0:MOVE 20(a3),d0:CMP.l d0,d3:BHI 'skip
MOVE 24(a3),d0:SUB 26(a3),d0:CMP d0,d3:BHI 'skip2
;
;OK, we can do it ourselves!
;
'readit:MOVE.l 16(a3),a0:ADD 26(a3),a0  ;current pos in buffer.
MOVE.l d2,a1:ADD d3,26(a3)
MOVE.l d3,d0:BEQ 'zero:
      SUBQ #1,d3
'loop:MOVE.b (a0)+,(a1)+:
      DBF d3,'loop
'zero:MOVEM.l (a7)+,a3/a6:RTS




'skip2  ;not enough valid bytes in buffer, but enough room.
MOVEM.l d2-d3,-(a7)
BSR myflush
MOVE.l (a3),d1:MOVE.l 16(a3),d2
MOVEQ #0,d3:MOVE 20(a3),d3
JSR _Read(a6):MOVEM.l (a7)+,d2-d3
CMP.l #-1,d0:BEQ 'oops
MOVE d0,24(a3)  ;bytes read!
CMP d0,d3:BLS 'readit:MOVE d0,d3:BRA 'readit
;
'skip   ;too big to put in our buffer!
BSR myflush
MOVE.l (a3),d1:JSR _Read(a6):CMP.l #-1,d0:BEQ 'oops
ADD.l d0,28(a3)
'oops:MOVEM.l (a7)+,a3/a6:RTS

;
; A File looks like this:
;
; 00.l Dos Handle (0 = no file open)
; 04.l length of record (IF any)
; 08.l - UNUSED
; 12.l - linked list of record structs -
    ;
    ;00.l - next
    ;04.l - buffer
    ;08.l - length
; 16.l - mydos buffer
; 20.w - len of mydos
; 22.w - buffer flags: <0 - buffer has been written to.
; 24.w - #valid chars in buffer
; 26.w - seek offset in buffer...
; 28.l - dos seek loc of start of buffer.

.myseek     ;d1=file, d2=position
;            d3=-1 For offset beginning, 0 for current.
;
MOVE.l a3,-(a7):MOVE.l d1,a3
;
TST d3:BMI 'skip0
;
;convert d2 to offset beginning...
;
MOVEQ #-1,d3:MOVE.l 28(a3),a0:ADD 26(a3),a0
ADD.l d2,a0:MOVE.l a0,d2
;
;is it somewhere in buffer?
;
'skip0
MOVE.l 28(a3),a0
CMP.l a0,d2:BCS 'nocando
ADD 24(a3),a0
CMP.l a0,d2:BCC 'nocando
;
;OK to use current buffer!
;
SUB.l 28(a3),d2:MOVE d2,26(a3):MOVE.l (a7)+,a3:RTS
;
'nocando
;
BSR myflush:TST d3:BMI 'skip:ADD.l 28(a3),d2:MOVEQ #-1,d3
;
'skip:MOVE.l d2,28(a3):MOVE #1,22(a3)
MOVE.l (a3),d1:JSR _Seek(a6)
;
MOVE.l (a7)+,a3:RTS

.doeof
MOVE 26(a2),d1:CMP 24(a2),d1:BCC 'slow:MOVEQ #0,d0:RTS
'slow:MOVE.l a2,d1:MOVEQ #1,d2:MOVEQ #0,d3
BSR myseek:ADDQ.l #1,d0:BEQ 'atend
MOVE.l a2,d1:MOVEQ #-1,d2:MOVEQ #0,d3
BSR myseek:MOVEQ #0,d0:RTS
'atend:MOVEQ #-1,d0:RTS

; 16.l - mydos buffer
; 20.w - len of mydos
; 22.w - buffer flags: <0 - buffer has been written to.
; 24.w - #valid chars in buffer
; 26.w - seek offset in buffer...
; 28.l - dos seek loc of start of buffer.

.dolof
;
MOVE.l (a2),d1:MOVEQ #0,d2:MOVEQ #1,d3
JSR _Seek(a6)                             ;now at end!
MOVE.l (a2),d1:MOVE.l d0,d2:MOVEQ #-1,d3  ;back to old
JSR _Seek(a6)
;
MOVEQ #0,d1:MOVE 24(a2),d1:ADD.l 28(a2),d1
CMP.l d1,d0:BCC 'done:MOVE.l d1,d0
'done:RTS

.doloc:MOVEQ #0,d0:MOVE 26(a2),d0:ADD.l 28(a2),d0:RTS

;.doreclen:MOVE.l 4(a2),d0:RTS

.dofileseek:MOVE.l d1,d2:MOVE.l a2,d1:MOVEQ #-1,d3
BSR myseek:ADDQ.l #1,d0:BEQ err6:RTS

codeinit:MOVE.l d0,_dosbase:RTS

.doreadfile:MOVEQ #-1,d7:BRA realopen

.dowritefile:MOVEQ #1,d7:BRA realopen

.doopenfile:;open a file.
;
;a3=file, d1=name
;
;d7=<0 for old only, >0 for new only or 0 for either
MOVEQ #0,d7
;
realopen:MOVE.l a3,-(a7):MOVE.l a1,a3:MOVE d7,-(a7)
MOVE.l d1,-(a7):BSR dofreefile:MOVE.l (a7)+,d7 ;file name
MOVE.l -(a2),d0:MOVE.l d7,a0:CLR.b 0(a0,d0)
;
TST (a7):BGT 'newonly
MOVE.l d7,d1:MOVE.l #1005,d2
JSR _Open(a6):MOVE.l d0,d6:BNE 'skip
TST (a7):BLT openerr
JSR _IoErr(a6):CMP.l #205,d0:BNE openerr
;
'newonly:MOVE.l d7,d1:MOVE.l #1006,d2
JSR _Open(a6):MOVE.l d0,d6:BEQ openerr
;
'skip:;file has been opened
MOVE.l d0,(a3):;lock
CLR.l 4(a3):CLR.l 8(a3):CLR.l 12(a3)
;
MOVE.l doslen(pc),d0:MOVEQ #1,d1:ALibJsr $c002
MOVE.l d0,16(a3):MOVE doslen+2(pc),20(a3)
CLR.l 22(a3):CLR 26(a3):CLR.l 28(a3)
ADDQ #2,a7:MOVE.l (a7)+,a3:MOVEQ #-1,d0:RTS
openerr
ADDQ #2,a7:MOVE.l (a7)+,a3:MOVEQ #0,d0:RTS

.dofreefile:MOVE.l (a3),d1:BEQ 'done
BSR myflush:MOVE.l (a3),d1:JSR _Close(a6):CLR.l (a3)
;
MOVE.l 16(a3),a1:CLR.l 16(a3)   ;free mydos buffer
MOVEQ #0,d0:MOVE 20(a3),d0:ALibJsr $c003
;
MOVE.l 12(a3),d0:BEQ 'done:MOVE.l d0,a2
'loop:CMP #0,a2:BEQ 'done
MOVE.l a2,a1:MOVEQ #12,d0:MOVE.l (a2),a2:ALibJsr $c003
BRA 'loop
'done:RTS

.dorecord:;a3=file, -(a2)=type, -(a2)=data
;
SUBQ #1,d7:MOVE.l 4(a3),d6:;record len so far
;
'loop
MOVE -(a2),d1:MOVE.l -(a2),d5
MOVEQ #1,d2:CMP #1,d1:BEQ 'got
MOVEQ #2,d2:CMP #2,d1:BEQ 'got
MOVEQ #4,d2:CMP #7,d1:BNE 'got
;
SUBQ.l #4,d5:;start at length bit.
MOVE.l d5,a0:MOVE.l -(a0),d2:ADDQ.l #6,d2:;for the length and 0!
;
'got:;len of field in d2, pointer in d5
;
ADD.l d2,d6:MOVEQ #16,d0:
MOVE.l d1,-(a7)
MOVEQ #1,d1:ALibJsr $c002
MOVE.l d0,a0:MOVE.l 12(a3),(a0):MOVE.l a0,12(a3)
MOVE.l (a7)+,d1
MOVE.w d1,12(a0)
MOVE.l d5,4(a0):MOVE.l d2,8(a0)
;
DBF d7,'loop:MOVE.l d6,4(a3):RTS

.seekrec:;d1= record#
MULU 6(a3),d1:MOVE.l d1,d2:MOVE.l a3,d1
MOVEQ #-1,d3:BSR myseek:ADDQ.l #1,d0:BEQ err3
RTS

.doget
;
MOVEQ #-1,d7
BRA transdata

.doput
;
MOVEQ #1,d7
;
.transdata:;a3=file, d1=record#
;
BSR seekrec:LEA 12(a3),a2
'loop:MOVE.l (a2),d0:BEQ 'done:MOVE.l d0,a2
MOVE.l a3,d1:MOVE.l 4(a2),d2:MOVE.l 8(a2),d3
TST d7:BMI 'doread:BSR mywrite:BRA 'ddone
'doread:
 CMP.w #7,12(a2)
 BNE 'nostring
 MOVE.l d2,a0
 MOVE.l -4(a0),d0
 ADDQ.l #6,d0
 CMP.l d0,d3
 BLE 'ok
 BRA stringtosmall
'ok
BSR myread
TST.l d0:BMI err7
MOVE.l d2,a0
MOVE.l -4(a0),d0
CMP.l (a0),d0
BGE 'ok2
MOVE.l -4(a0),(a0)
BRA stringtosmall
'ok2
BRA 'ddone


'nostring:
 BSR myread
'ddone:TST.l d0:BMI err7:

BRA 'loop
;
'done:RTS

.dokillfile:
  MOVE.l d0,d1
JMP _DeleteFile(a6)

.dofileinput: ;set input to file read routine
  MOVE.l a3,infile
  LEA inputhandler(pc),a0
  ALibJsr #setInputChannel                  ; setInputChannel
RTS

.dofileoutput
  MOVE.l a3,outfile
  LEA outputhandler(pc),a0
  ALibJsr #setOutputChannel                  ; setOutputChannel
RTS

BRA inhandle2
.inputhandler:
  MOVEM.l a0-a1/d1-d3,-(a7)
  MOVE.l infile(pc),a1 : MOVE.l (a1),d1 : BEQ err1

  MOVE.l a1,d1          ;d1=file, d2=buffer, d3=len
  MOVE.l #temp,d2
  MOVEQ #1,d3
  MOVE.l _dosbase(pc),a6 : BSR myread : CMP.l #-1,d0 : BEQ err7

  MOVEQ #-1,d1 : TST.l d0 : BEQ 'fail
    MOVEQ #0,d1 : MOVE.b temp(pc),d1
 'fail:
  MOVE.l d1,d0
  MOVEM.l (a7)+,a0-a1/d1-d3
RTS

inhandle2:
  ;
  ;a0=buffer, d0=bytes max!
  ;
  MOVEM.l a1/d1-d3,-(a7)
  MOVE.l infile(pc),a1 : MOVE.l (a1),d1:BEQ err1

  MOVE.l a1,d1              ;d1=file, d2=buffer, d3=len
  MOVE.l a0,d2
  MOVE.l d0,d3
  MOVE.l a0,-(a7)
  MOVE.l _dosbase(pc),a6 : BSR myread : TST.l d0 : BMI err7

  MOVE.l (a7)+,a0:MOVE.l d0,d2:MOVEQ #-1,d1
 'loop:
    SUBQ.l #1,d2:BMI 'done
    ADDQ.l #1,d1
    CMP.b #10,(a0) : BEQ 'found
  CMP.b #13,(a0)+ : BNE 'loop
 'found: ;d1=new chars read. d0=old
  MOVE.l d1,-(a7)
  SUB.l d0,d1 : ADDQ.l #1,d1 : BEQ 'done2
    MOVE.l d1,d2
    MOVE.l infile(pc),d1 : MOVEQ #0,d3 : BSR myseek
 'done2:
  MOVE.l (a7)+,d0
 'done:
  MOVEM.l (a7)+,a1/d1-d3
RTS

BRA outhandle3
BRA outhandle2
outputhandler
;
MOVEM.l a0-a1/d1-d3,-(a7)
;
MOVE.l outfile(pc),a1
MOVE.l (a1),d1:BEQ err2:MOVE.b d0,temp:MOVE.l #temp,d2:MOVEQ #1,d3
MOVE.l _dosbase(pc),a6
MOVE.l a1,d1:BSR mywrite:MOVE.l d0,d1:ADDQ.l #1,d1:BEQ err7
;
MOVEM.l (a7)+,a0-a1/d1-d3:RTS

outhandle2
;
MOVEM.l a1/d1-d3,-(a7)
;
MOVE.l outfile(pc),a1
MOVE.l (a1),d1:BEQ err2:MOVE.l a0,d2:MOVE.l d0,d3
MOVE.l _dosbase(pc),a6
MOVE.l a1,d1:BSR mywrite:MOVE.l d0,d1:ADDQ.l #1,d1:BEQ err7
;
MOVEM.l (a7)+,a1/d1-d3:RTS

outhandle3
;
MOVEM.l a1/d0-d3,-(a7)
;
MOVE.l a0,a1:MOVEQ #-1,d3
'loop:ADDQ.l #1,d3:TST.b (a1)+:BNE 'loop:TST.l d3:BEQ 'done
MOVE.l outfile(pc),a1
MOVE.l (a1),d1:BEQ err2:MOVE.l a0,d2
MOVE.l _dosbase(pc),a6
MOVE.l a1,d1:BSR mywrite:MOVE.l d0,d1:ADDQ.l #1,d1:BEQ err7
;
'done:MOVEM.l (a7)+,a1/d0-d3:RTS

err0:MOVE.l #mess0,d0:TRAP #0
err7:MOVE.l #mess7,d0:TRAP #0
errwv: MOVE.l #mess9,d0:TRAP #0
stringtosmall:MOVE.l #mess10,d0:TRAP #0
;********************* ERRORS BELOW ***********************

errors
errst:MOVE.l #mess9,d0:TRAP #0
err1:MOVE.l #mess1,d0:TRAP #0
err2:MOVE.l #mess2,d0:TRAP #0
err3:MOVE.l #mess3,d0:TRAP #0
err4:MOVE.l #mess4,d0:TRAP #0
err5:MOVE.l #mess5,d0:TRAP #0
err6:MOVE.l #mess6,d0:TRAP #0
;err7
err8:MOVE.l #mess8,d0:TRAP #0

mess0:Dc.b "Can't Open File",0
mess1:Dc.b "Invalid Input File",0
mess2:Dc.b "Invalid Output File",0
mess3:Dc.b "Can't Find Record",0
mess4:Dc.b "Non-Existant File",0
mess5:Dc.b "No Record Set",0
mess6:Dc.b "Can't FileSeek Position",0
mess7:Dc.b "Error Reading/Writing File",0
mess8:Dc.b "Illegal Dos Buffer Length",0
mess9:Dc.b "String in type to large >300 Chars or wrong AB2 Version",0
mess10:Dc.b "string to small (use larger size with maxlen or load to save order is diffrent)",0
Even

reclenchk:EXG a2,a3:BSR racchk:EXG a2,a3:RTS

racchk:TST.l (a3):BEQ err4:TST.l 12(a3):BEQ err5:RTS

fchk:TST.l (a2):BEQ err4:RTS

dbchk:CMP.l #32767,d0:BHI err8:RTS

