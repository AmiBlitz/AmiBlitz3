; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Development:AmiBlitz3/BlitzLibs/Decompiled/thirdpartylibs"
; ExeFile         = "Ripacklib25.obj"
; CreateIcon      = 0
; Residents       = "libnums.res,libmacs.res,libjsrs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 16
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 637
; CursorColumn    = 6
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
; Reflective Images PACK-library, (C) 1994, (#ripacklib=73)
; needs riamosfunclib
; Updates:
;         UnpackIFF: looks for BMHD & BODY chunks to unpack
;         fixed LOADIFF
;         UnpackIFF now checks against: bitmap to small or not
;                                        deep enough
;                                       Unpacking too many lines
;                                       No destination bitmap
; V2.5: new commands for IFFHeight, IFFWidth, IFFViewmode, IFF UnPackPBM,...
CIAA_PRA EQU $BFE001

!libheader {#ripacklib,init,0,finit,0}

!afunction{#long}
!args {#long,#long,#long}
!libs
!subs {_PackPBM,0,0}
!name {"PackPBM","sourceaddr,destaddr,length"}
Ds.l 5

!acommand {#long}
!args {#long,#long}
!libs {#bitmaplib,#ia1|#pd1}
!subs {_IFF1,0,0}
!args {#long,#long,#word,#long}
!libs {#bitmaplib,#ia1|#pd1}
!subs {_unpackIFF,0,0}
!name {"UnpackIFF","(sourceaddr,bitmap#[,numlines,xy_offset])"}

!acommand {#long}
!args {#long,#long}
!libs {#palettelib,#ia1|#pd1}
!subs {_ILBMPalette1,0,0}
!args {#long,#long,#long}
!libs {#palettelib,#ia1|#pd1}
!subs {_ILBMPalette2,0,0}
!name {"ILBMPalette","(sourceaddr,palette#[,#offset)"}

!astatement
!args {#long,#word,#word}
!libs {#bitmaplib,#ia0|#pd1,#palettelib,#ia1|#pd2}
!subs {_ILBMGrab,0,0}
!name {"ILBMGrab","sourceaddr,bitmap#,palette#"}

!acommand {#long}
!args {#string,#word}
!libs {#bitmaplib,#ia0|#pd1}
!subs {_ILBMLoadNoPal,0,1}
!args {#string,#word,#word}
!libs {#bitmaplib,#ia0|#pd1,#palettelib,#ia1|#pd2}
!subs {_ILBMLoad,0,1}
!name {"LoadIFF","(filename$,bitmap[,palette])"}
 
!afunction {#long}
!args {#string}
!libs
!subs {_ChunkHeader,0,0}
!name {"ChunkHeader","(a$)"}

!astatement
!args {#long,#long,#long}
!libs
!subs {_UnpackPBM,0,0}
!name {"UnPackPBM","sourceaddr,destaddr,length"}

!afunction {#word}
!args {#long}
!libs
!subs {_IFFDepth,0,0}
!name {"IFFDepth","address -- address of your ILBM IFF file"}

!afunction {#word}
!args {#long}
!libs
!subs {_IFFWidth,0,0}
!name {"IFFWidth","address -- address of your ILBM IFF file"}

!afunction {#word}
!args {#long}
!libs
!subs {_IFFHeight,0,0}
!name {"IFFHeight","address -- address of your ILBM IFF file"}

!afunction {#long}
!args {#long}
!libs
!subs {_IFFViewmode,0,0}
!name {"IFFViewmode","address -- address of your ILBM IFF file"}

finit: !nullsub{_libfinit,0,0}
init:  !nullsub{_libinit,0,0}

!libfin

; ======================================================================
; = Begin of code
; ======================================================================

_libinit:  
  RTS

_libfinit: 
  RTS

._ChunkHeader:
  Dc $a000,'f-'s
 's:
  MOVEA.l D0,A0
  MOVE.l (A0),D0
 'f:
RTS

_IFFViewmode:
  MOVEA.l D0,A0
  MOVE.l #"ILBM",D0
  BSR.w check_Chunk
  Dc.w $6710 ; BEQ.s LAB_0007
   MOVE.l #"CAMG",D0
   BSR.w get_Chunk
   Dc.w $6704 ; BEQ.S LAB_0007
     MOVE.l (A2),D0
     RTS
  LAB_0007:
  MOVEQ #0,D0
RTS

_IFFDepth:
  BSR.w get_BitmapHeader  
  Dc.w $6706 ;BEQ.S LAB_0009
    MOVEQ #0,D0
    MOVE.b 8(A2),D0
  LAB_0009:
RTS

_IFFWidth:
  BSR.w get_BitmapHeader
  Dc.w $6702 ;BEQ.S LAB_000B
    MOVE.w (A2),D0
  LAB_000B:
RTS

_IFFHeight:
  BSR.w get_BitmapHeader
  Dc.w $6704  ;BEQ.S LAB_000D
    MOVE.w 2(A2),D0
  LAB_000D:
RTS

get_BitmapHeader:
  MOVEA.l D0,A0
  MOVE.l  #"ILBM",D0
  BSR.w   check_Chunk
  Dc.w $670a ;BEQ.S LAB_000F
    MOVE.l #"BMHD",D0
    BSR.w get_Chunk
  LAB_000F:
RTS

_ILBMGrab:
  MOVEM.l D0/A1,-(A7) 
  MOVEA.l A0,A1  
  BSR.w   _IFF1
  MOVEM.l (A7)+,D0/A1
  BSR.w   _ILBMPalette1
RTS

_PackPBM:
  MOVEM.l D1-D7/A0-A6,-(A7)
  MOVE.l D0,source
  MOVE.l D1,dest
  MOVE.l D2,size

  iff_pack:
  MOVEA.l source,A0
  MOVEA.l dest,A1
  MOVE.l size,D0
  MOVE.l source,max_size
  ADD.l D0,max_size
  MOVEA.l max_size,A6

; Start of code

check1:
  CMPA.l a0,a6
  BEQ.w  finish

  MOVEA.l A0,A5
  MOVE.b (A5)+,D0

  CMPA.l a0,a6
  BEQ.w  finish1
check2
  CMP.b  (a5),d0
  BEQ.w  check5

  MOVEQ  #0,D1
check3:
  MOVE.b D0,D3
  MOVE.b (A5)+,D0
 
  CMP.b  d0,d3 ;Dc.w $b600
  BEQ.w check4

  ADDQ.b #1,D1

  CMP.l  a5,a6 ;Dc.w $bdcd
  BEQ.w check41

  CMPI.b #$7f,D1
  BNE.w check3

check4:
  MOVE.b D1,(A1)+
check4_loop:
  MOVE.b (A0)+,(A1)+
  DBF D1,check4_loop

  BRA.w check1

check41:
  MOVE.b D1,(A1)+
LAB_0017:
    MOVE.b (A0)+,(A1)+
  DBF D1,LAB_0017

  BRA.w finish

check5:
  MOVEQ   #0,D1
  MOVEA.l A5,A0
check5_loop:
  MOVE.b  (A0)+,D0
  CMP.b   (a5),d0  ;Dc.w $b015
  BNE.w   check62
  ADDQ.b  #1,D1

  CMP.l   a0,a6     ;Dc.w $bdc8
  BEQ.w   check61

  CMPI.b  #$7f,D1
  BNE.w   check5_loop

check6:
  NEG.b   D1
  MOVE.b  D1,(A1)+
  MOVE.b  (A5),(A1)+

  BRA.w   check1

check62:
  SUBQ.l  #1,A0
  BRA.w   check6

check61:
  NEG.b   D1
  MOVE.b  D1,(A1)+
  MOVE.b  (A5),(A1)+

finish:
  MOVE.l  A1,D0
  SUB.l   dest,D0
  MOVEM.l (A7)+,D1-D7/A0-A6
  RTS

finish1:
  MOVE.b #0,(A1)+
  MOVE.b D0,(A1)+
  MOVE.l A1,D0
  SUB.l dest,D0
  MOVEM.l (A7)+,D1-D7/A0-A6
RTS

_UnpackPBM:
  MOVEM.l D0-D7/A0-A6,-(A7)
  MOVEA.l D0,A0
  MOVEA.l D1,A1
  MOVEA.l D2,A6
  ADDA.l D0,A6
  MOVEQ #0,D0

mainloop:
  MOVE.b (A0)+,D0

  CMP.l a0,a6
  BLT.w the_end

  CMPI.b #-128,d0
  BEQ.w mainloop

  TST.b D0
  BMI.w minus

; Positive: next n+1 bytes ar literal data

bytes_lit:
  MOVE.b (A0)+,(A1)+
  DBF   D0,bytes_lit
  MOVEQ #0,D0
  BRA.w mainloop

minus:
  MOVE.b (A0)+,D2

  NEG.b D0
minus_loop:
  MOVE.b D2,(A1)+
  DBF D0,minus_loop

  MOVEQ #0,D0
  BRA.w mainloop
 
the_end:
  MOVEM.l (A7)+,D0-D7/A0-A6
RTS
Even
source:   Dc.l $00000001
dest:     Dc.l $00000001
size:     Dc.l $00000001
max_size: Dc.l $00000001

_IFF1:
  MOVE.w #-1,D2
  MOVEQ #0,D3

_unpackIFF:
  MOVEM.l D0-D6/A0-A6,-(A7)

  MOVEA.l D0,A0
  MOVE.l  #"ILBM",D0
  BSR.w   check_Chunk
  BEQ.w   header_not_found

  MOVE.l  #"BMHD",D0
  BSR.w   get_Chunk
  BEQ.w   header_not_found
  
  MOVEA.l A2,A0
  TST.w   D2
  BPL.w   'okheight
    MOVE.w 2(A0),D2
  'okheight:

  CMP.w   2(a1),d2
  Dc.w $6b04   ;BMI.S 'okheight2
    MOVE.w 2(A1),D2
  'okheight2:
  SUBQ.w  #1,D2
  BMI.w   header_not_found
  MOVE.w  D2,iffheight

  MOVEQ   #0,D2
  MOVE.b  8(A0),D2
  CMP.b   5(a1),d2
  BHI.w   header_not_found

  SUBQ.w  #1,D2
  MOVE.w  D2,iffdepth

  MOVE.w  (A1),bitmapwidth
  ADDQ.l  #8,A1
  TST.l   (A1) 
  BEQ.w   header_not_found

  MOVE.w  iffdepth,D0
  LEA     bitplanes(PC),A4
iffstore_bitplanes:
    MOVE.l (A1)+,(A4)
    ADD.l D3,(A4)+
  DBF D0,iffstore_bitplanes

  MOVE.w  (A0),D7
  ASR.w   #3,D7

  CMP.w   bitmapwidth,d7
  BHI.w   header_not_found

  SUBQ.w  #1,D7
  MOVE.w  D7,bytewidth

  MOVE.l  #"BODY",D0
  BSR.w   get_Chunk
  BEQ.w   header_not_found

  MOVEA.l A2,A0
  MOVEQ   #0,D7
  MOVE.w  iffheight,D7

iffline_loop:
  LEA     bitplanes(PC),A2
  MOVE.w  iffdepth,D6
iffbitplane_loop:
  MOVEA.l (A2),A1
  MOVEQ   #0,D5
  MOVE.w  bitmapwidth,D5
  ADD.l   D5,(A2)+
  MOVE.w  bytewidth,D5

iffmainloop:
  TST.b   D5
  BMI.w   unpacked40

  MOVEQ   #0,D0
  MOVE.b  (A0)+,D0

  CMPI.b  #-128,D0
  BEQ.w   iffmainloop

  TST.b   D0
  BMI.w   iffminus

  ; Positive: next n+1 bytes ar literal data
  SUB.b D0,D5
  SUBQ.b #1,D5

iffbytes_lit:
    MOVE.b (A0)+,(A1)+
  DBF D0,iffbytes_lit
  BRA.w iffmainloop

iffminus:
  MOVE.b (A0)+,D2
  NEG.b  D0

  SUB.b  D0,D5
  SUBQ.b #1,D5

  iffminus_loop:
    MOVE.b D2,(A1)+
  DBF    D0,iffminus_loop
  BRA.w  iffmainloop

unpacked40:
  DBF    D6,iffbitplane_loop
  DBF    D7,iffline_loop
  MOVEM.l (A7)+,D0-D6/A0-A6
  MOVEQ  #-1,D0
RTS

header_not_found:
  MOVEM.l (A7)+,D0-D6/A0-A6
  MOVEQ #0,D0
RTS

Even
iffsource:   Dc.l $00000001
iffdest:     Dc.l $00000001
bitplanes:   Dc.l $00000000
             Dc.l $00000000
             Dc.l $00000000
             Dc.l $00000000
             Dc.l $00000000
             Dc.l $00000000
             Dc.l $00000000
             Dc.l $00000000
iffheight:   Dc.w $0001
bytewidth:   Dc.w $0001
bitmapwidth: Dc.w $0001
iffdepth:    Dc.w $0001
reserved:    RTS

;d0=source
;a0=palette object address

_ILBMPalette1:
  MOVEQ   #-1,D2
_ILBMPalette2:
  MOVE.l  D2,paloffset
  MOVEM.l D1-D7/A0-A6,-(A7)
  MOVEA.l D0,A0

  MOVE.l  #-1,D0
  CMPI.l  #"CMAP",(A0)        ; check if we are at the CMAP-Chunk, else search it
  Dc.w $6606 ;BNE.S LAB_003D
    MOVE.l #"CMAP",D0
  LAB_003D:
  BSR.w   check_Chunk
  BEQ.w   error

  MOVE.l  #"CMAP",D0
  BSR.w   get_Chunk
  BEQ.w   error

  ;a2 points to the CMAP chunk right after the first longword that is size of chunk
  MOVEA.l A2,A0
  SUBQ.l  #4,A0

;Test Blitz2 palette object
  TST.l   (A1)
  BEQ.w   reserve_block

  MOVE.w  4(A1),D0
  TST.l   paloffset
  Dc.w    $6b1e   ;BMI.S LAB_003E

  MOVE.l  (A0),D7
  DIVU    #$0003,D7
  ANDI.l  #$0000ffff,D7
  ADD.l   paloffset,D7
  CMP.w   D7,D0
  Dc.w    $6d08 ;BLT.S LAB_003E

  MOVEA.l (A1),A1
  ADDQ.l  #4,A1
  BRA.w   LAB_0040

  LAB_003E:
  MOVE.l  #$ffffffff,paloffset
  MULU.w  #12,D0
  ADDI.l  #16,D0
  MOVEM.l D0-D1/A0-A1,-(A7)
  MOVEA.l (A1),A1               ; a1=address to Free_mem
  ALibJsr #globalfree
  MOVEM.l (A7)+,D0-D1/A0-A1

reserve_block:
  MOVE.l (A0),D0
  MULU.w #4,d0
  ADDI.l #16,D0

  MOVE.l #$10001,D1
  MOVEM.l A0-A1,-(A7)
  ALibJsr #globalalloc
  MOVEM.l (A7)+,A0-A1
  TST.l D0
  BEQ.w error

  MOVE.l D0,(A1)
  
  MOVE.l  (A0),D0
  DIVU    #3,D0
  MOVE.w  D0,4(A1)
  MOVE.l  #0,6(A1)
  MOVEA.l (A1),A1
  MOVE.l  #0,(A1)
  MOVE.w  D0,(A1)
  ADDQ.l  #4,A1
  LAB_0040:
  MOVE.l paloffset,D7
  BMI.w LAB_0041
    MULU.w #12,D7
    ADDA.l D7,A1
  LAB_0041:

  MOVE.l (A0)+,D7  ;7f4: 2e18
  DIVU #$0003,D7  ;7f6: 8efc0003
  SUBQ.w #1,D7   ;7fa: 5347
  LAB_0042:
  MOVE.l #$00000000,(A1)  ;7fc: 22bc00000000
  MOVE.b (A0)+,(A1)  ;802: 1298
  ADDQ.l #4,A1   ;804: 5889
  MOVE.l #$00000000,(A1)  ;806: 22bc00000000
  MOVE.b (A0)+,(A1)  ;80c: 1298
  ADDQ.l #4,A1   ;80e: 5889
  MOVE.l #$00000000,(A1)  ;810: 22bc00000000
  MOVE.b (A0)+,(A1)  ;816: 1298
  ADDQ.l #4,A1   ;818: 5889
  DBF D7,LAB_0042  ;81a: 51cfffe0
  MOVEM.l (A7)+,D1-D7/A0-A6 ;81e: 4cdf7ffe
  MOVE.l #$ffffffff,D0  ;822: 203cffffffff
RTS    ;828: 4e75

error:
  MOVEQ #0,D0
  MOVEM.l (A7)+,D1-D7/A0-A6
RTS

paloffset:  Dc.l $00000000
filename:   Dc.l $00000000
bmapaddr:   Dc.l $00000000
paladdr:    Dc.l $00000000
bnk:        Dc.l $00000000

_ILBMLoadNoPal:
  MOVEA.l  #0,A1
_ILBMLoad:
  MOVE.l   D0,filename
  MOVE.l   A0,bmapaddr
  MOVE.l   A1,paladdr
  MOVEQ    #0,D0
  ALibJsr  NextBank,0
  TST.l    D0
  BMI.w    err
  MOVE.l   D0,bnk
  MOVE.l   filename,D0
  MOVE.l   bnk,D1
  CLR.l    D2
  MOVEQ    #-1,D4
  ALibJsr  BLoad,1
  TST.l    D0
  BNE.w    ok
  MOVE.l   bnk,D0
  ALibJsr  Erase,0
err:
  MOVEQ    #0,D0
  RTS
ok:
  MOVE.l   bnk,D0
  ALibJsr  Start,0
  MOVEA.l  bmapaddr,A1
  BSR.w    _IFF1
  TST.l    paladdr
  BEQ.w   'nothanks
  MOVE.l   bnk,D0
  ALibJsr  Start,0
  MOVEA.l  paladdr,A1
  BSR.w    _ILBMPalette1
 'nothanks:
  MOVE.l   bnk,D0
  ALibJsr  Erase,0
  MOVEQ    #-1,D0
RTS

; simple file format description of IFF ILBM
;  0.. 3   "FORM"
;  4.. 7   size in bytes
;  8..11   "ILBM"
; 12..15     "BMHD"
; 16..19     size in bytes 
; ......     data of BMHD
; 4bytes     "CMAP"
; 4bytes     size in bytes
; ------     data of CMAP
; 1byte      "0" padding byte
; 4bytes   "BODY"
; 4bytes   size in bytes
; ------   data of BODY


check_Chunk:
  CMPI.l #"FORM",(A0)             ; check if we are at the beginning of the file
  Dc.w $662e ; BNE.s LAB_0050

  CMPI.l #-1,D0                   ; -1 if we are already at the "CMAP" chunk
  Dc.w $6708 ; BEQ.s LAB_004F  

  CMP.l 8(A0),D0                  ; is the first chunkId in the file the searched one?
  BNE.w LAB_0051

  LAB_004F:                       ; analyse the CMAP-Chunk
    MOVE.l  A1,-(A7)
    LEA     12(A0),A1
    MOVE.l  A1,chunk_begin
    ADDA.l  4(A0),A1
    SUBQ.l  #4,A1
    MOVE.l  A1,chunk_end
    MOVEA.l (A7)+,A1
    MOVEQ   #-1,D0
    RTS

  LAB_0050:                       ; analyse the ILBM-chunk
    BCHG #1,CIAA_PRA              ; switch LED of Low-Pass-Filter
    CMP.l (a0),d0
    Dc.w $6616 ;BNE.S LAB_0051
      MOVE.l A0,chunk_begin
      ADDA.l 4(A0),A0
      ADDQ.l #8,A0
      MOVE.l A0,chunk_end
      MOVEQ  #-1,D0
      RTS
  
  LAB_0051:                       ; chunk not found
    MOVEQ #0,D0
    RTS

chunk_begin: Dc.l $00000000
chunk_end: Dc.l $00000000

get_Chunk:
  MOVE.l A3,-(A7)
  MOVEA.l chunk_begin,A2
  MOVEA.l chunk_end,A3
  LAB_0055:
    CMPA.l  A3,A2
    Dc.w $6c14 ;BGE.S LAB_0057
    CMP.l (a2),D0
    Dc.w $6708 ;BEQ.S LAB_0056
    ADDA.l 4(A2),A2
    ADDQ.l #8,A2  
  Dc.w $60f0 ;BRA.S LAB_0055
  LAB_0056:
    MOVEA.l (A7)+,A3
    ADDQ.l #8,A2
    MOVEQ #-1,D0
    RTS
  LAB_0057:
    MOVEA.l (A7)+,A3
    MOVEQ #0,D0
 RTS
