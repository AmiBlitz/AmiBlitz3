; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "riPackLib.obj"
; CreateIcon      = 0
; Residents       = "libnums.res,libmacs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max Window      = 20
; Max BlitzFont   = 4
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;#ripacklib=73

; Reflective Images PACK-library
; (C)1994

; Updates:
;         UnpackIFF: looks for BMHD & BODY chunks to unpack
;         fixed LOADIFF
;         UnpackIFF now checks against: bitmap to small or not
;                                        deep enough
;                                       Unpacking too many lines
;                                       No destination bitmap

!libheader {#ripacklib,init,0,finit,0}

!astatement
!args {#long,#long,#long,#byte}
!libs
!subs {_PackPBM,0,0}
!name {"PackPBM","sourceaddr,destaddr,length,packmode"}

!acommand {#long}
!args {#long,#long}
!libs
!subs {_DeIcer240,0,0}
!name {"DeIce","(sourceaddr,destaddr)"}

!acommand {#long}
!args {#long,#long}
!libs {#bitmaplib,#ia1|#pd1}
!subs {_IFF1,0,0}
!args {#long,#long,#word,#long}
!libs {#bitmaplib,#ia1|#pd1}
!subs {_unpackIFF,0,0}
!name {"UnpackIFF","(sourceaddr,bitmap#[,numlines,xy_offset])"}

!acommand {#long}
!args {#long,#long}
!libs {#palettelib,#ia1|#pd1}
!subs {_ILBMPalette,0,0}
!name {"ILBMPalette","(sourceaddr,palette#)"}

!astatement
!args {#long,#word,#word}
!libs {#bitmaplib,#ia0|#pd1,#palettelib,#ia1|#pd2}
!subs {_ILBMGrab,0,0}
!name {"ILBMGrab","sourceaddr,bitmap#,palette#"}

!acommand {#long}
!args {#string,#word}
!libs {#bitmaplib,#ia0|#pd1}
!subs {_ILBMLoadNoPal,0,1}
!args {#string,#word,#word}
!libs {#bitmaplib,#ia0|#pd1,#palettelib,#ia1|#pd2}
!subs {_ILBMLoad,0,1}
!name {"LoadIFF","(filename$,bitmap[,palette])"}

!afunction {#long}
!args {#string}
!libs
!subs {_ChunkHeader,0,0}
!name {"ChunkHeader","(a$)"}

finit:!nullsub{_libfinit,0,0}
init: !nullsub{_libinit,0,0}

!libfin

_libinit:
  RTS

_libfinit:
  RTS

._ChunkHeader:
  MOVE.l    d0,a0
  MOVE.l    (a0),d0
  RTS

._ILBMGrab:
  MOVEM.l   d0/a1,-(a7)
  MOVE.l    a0,a1
  BSR       _IFF1
  MOVEM.l   (a7)+,d0/a1
  BSR       _ILBMPalette
  RTS

._PackPBM:
  MOVEM.l d0-d7/a0-a6,-(a7)
  MOVE.l  d0,source
  ADD.l   #4,d1
  MOVE.l  d1,dest
  MOVE.l  d2,size

  CMP.b   #0,d3
  BNE     unpack_data

iff_pack
  MOVE.l  source,a0
  MOVE.l  dest,a1
  MOVE.l  size,d0

  MOVE.l  source,max_size
  ADD.l   d0,max_size
  MOVE.l  max_size,a6

; Start of code

check1
  CMP.l   a0,a6
  BEQ     finish

  MOVE.l  a0,a5
  MOVE.b  (a5)+,d0

  CMP.l   a0,a6
  BEQ     finish1
check2
  CMP.b   (a5),d0
  BEQ     check5

  MOVEQ   #0,d1
check3
  MOVE.b  d0,d3
  MOVE.b  (a5)+,d0

  CMP.b   d0,d3
  BEQ     check4

  ADDQ.b  #1,d1

  CMP.l   a5,a6
  BEQ     check41

  CMPI.b  #127,d1
  BNE     check3

check4
  MOVE.b  d1,(a1)+
check4_loop
  MOVE.b  (a0)+,(a1)+
  DBRA    d1,check4_loop

  BRA check1

check41
  MOVE.b  d1,(a1)+
check41_loop
  MOVE.b  (a0)+,(a1)+
  DBRA    d1,check41_loop

  BRA     finish

check5
  MOVEQ   #0,d1
  MOVE.l  a5,a0
check5_loop
  MOVE.b  (a0)+,d0
  CMP.b   (a5),d0
  BNE     check62
  ADDQ.b  #1,d1

  CMP.l   a0,a6
  BEQ     check61

  CMP.b   #127,d1
  BNE     check5_loop

check6
  NEG.b   d1
  MOVE.b  d1,(a1)+
  MOVE.b  (a5),(a1)+

  BRA     check1

check62
  SUBQ.l  #1,a0
  BRA     check6

check61
  NEG.b   d1
  MOVE.b  d1,(a1)+
  MOVE.b  (a5),(a1)+

finish
  MOVE.l  a1,d0
  SUB.l   dest,d0
  MOVE.l  dest,a0
  SUB.l   #4,a0
  MOVE.l  d0,(a0)
  MOVEM.l (a7)+,d0-d7/a0-a6
  RTS

finish1
  MOVE.b  #0,(a1)+
  MOVE.b  d0,(a1)+
  MOVE.l  a1,d0
  SUB.l   dest,d0
  MOVE.l  dest,a0
  SUB.l   #4,a0
  MOVE.l  d0,(a0)
  MOVEM.l (a7)+,d0-d7/a0-a6
  RTS

.unpack_data
  SUB.l   #4,dest
  MOVE.l  source,a0
  MOVE.l  dest,a1
  MOVE.l  size,a2

  MOVE.l  a2,a6
  CLR.l   d0

mainloop
  MOVE.b  (a0)+,d0
  ANDI.l  #$ff,d0

  CMP.l   a0,a6
  BLT     the_end

  CMPI.b  #-128,d0
  BEQ     mainloop

  TST.b   d0
  BMI     minus

; Positive: next n+1 bytes ar literal data

bytes_lit
  MOVE.b  (a0)+,(a1)+
  DBRA    d0,bytes_lit
  CLR.l   d0
  BRA     mainloop

minus
  MOVE.b  (a0)+,d2

  NEG.b   d0
minus_loop
  MOVE.b  d2,(a1)+
  DBRA    d0,minus_loop

  CLR.l   d0
  BRA     mainloop

the_end
  MOVEM.l (a7)+,d0-d7/a0-a6
  RTS
  Even
source:   Dc.l  1
dest:     Dc.l  1
size:     Dc.l  1
max_size: Dc.l  1

._DeIcer240:
  MOVE.l  d0,a0
  MOVE.l  d1,a1
; unpacking routine of PACK-ICE 2.40
; a0 = Pointer to packed data
; a1 = Address to which the data is unpacked
; "bsr" of "jsr" to ice_decrunch with registers a0 and a1 prepared.
ice_decrunch
  MOVEM.l d0-d7/a0-a6,-(a7)
  BSR getinfo
  CMPI.l #"ICE!",d0
  BNE not_packed2
  BSR getinfo
  LEA.l -8(a0,d0.l),a5
  BSR getinfo
  MOVE.l  d0,(a7)
  MOVE.l  a1,a4
  MOVE.l  a1,a6
  ADDA.l  d0,a6
  MOVE.l  a6,a3
  MOVE.b  -(a5),d7
  BSR normal_bytes
  MOVE.l  a3,a6
  BSR get_1_bit
  BCC not_packed
  MOVE.w  #$0f9f,d7
  BSR get_1_bit
  BCC ice_00
  MOVEQ #15,d0
  BSR get_d0_bits
  MOVE.w  d1,d7
ice_00: MOVEQ #3,d6
ice_01: MOVE.w  -(a3),d4
  MOVEQ #3,d5
ice_02: ADD.w d4,d4
  ADDX.w  d0,d0
  ADD.w d4,d4
  ADDX.w  d1,d1
  ADD.w d4,d4
  ADDX.w  d2,d2
  ADD.w d4,d4
  ADDX.w  d3,d3
  DBRA  d5,ice_02
  DBRA  d6,ice_01
  MOVEM.w d0-d3,(a3)
  DBRA  d7,ice_00
  MOVE.l  #-1,d0
not_packed:
  MOVEM.l (a7)+,d0-d7/a0-a6
  MOVE.l  #-1,d0
  RTS
not_packed2:
  MOVEM.l (a7)+,d0-d7/a0-a6
  MOVE.l  #0,d0
  RTS
getinfo
 MOVEQ #3,d1
getbytes
  LSL.l #8,d0
  MOVE.b  (a0)+,d0
  DBF d1,getbytes
  RTS
normal_bytes
  BSR get_1_bit
  BCC test_if_end
  MOVEQ.l #0,d1
  BSR get_1_bit
  BCC copy_direkt
  LEA.l direkt_tab+20(pc),a1
 MOVEQ.l #4,d3
nextgb
  MOVE.l  -(a1),d0
  BSR get_d0_bits
  SWAP.w  d0
  CMP.w d0,d1
  DBNE  d3,nextgb
no_more
 ADD.l 20(a1),d1
copy_direkt
 MOVE.b  -(a5),-(a6)
  DBF d1,copy_direkt
test_if_end
 CMPA.l  a4,a6
  BGT strings
  RTS
get_1_bit
 ADD.b d7,d7
  BNE bitfound
  MOVE.b  -(a5),d7
  ADDX.b  d7,d7
bitfound: RTS
get_d0_bits
 MOVEQ.l #0,d1
hole_bit_loop
 ADD.b d7,d7
  BNE on_d0
  MOVE.b  -(a5),d7
  ADDX.b  d7,d7
on_d0:  ADDX.w  d1,d1
  DBF d0,hole_bit_loop
  RTS
strings
 LEA.l length_tab(pc),a1
  MOVEQ.l #3,d2
get_length_bit
  BSR get_1_bit
  DBCC  d2,get_length_bit
no_length_bit
 MOVEQ.l #0,d4
  MOVEQ.l #0,d1
  MOVE.b  1(a1,d2.w),d0
  EXT.w d0
  BMI no_ber
get_ber
  BSR get_d0_bits
no_ber
 MOVE.b  6(a1,d2.w),d4
  ADD.w d1,d4
  BEQ get_offset_2
  LEA.l more_offset(pc),a1
  MOVEQ.l #1,d2
getoffs:  BSR get_1_bit
  DBCC  d2,getoffs
  MOVEQ.l #0,d1
  MOVE.b  1(a1,d2.w),d0
  EXT.w d0
  BSR get_d0_bits
  ADD.w d2,d2
  ADD.w 6(a1,d2.w),d1
  BPL depack_bytes
  SUB.w d4,d1
  BRA depack_bytes
get_offset_2
  MOVEQ.l #0,d1
  MOVEQ.l #5,d0
  MOVEQ.l #-1,d2
  BSR get_1_bit
  BCC less_40
  MOVEQ.l #8,d0
  MOVEQ.l #$3f,d2
less_40:  BSR get_d0_bits
  ADD.w d2,d1
depack_bytes: LEA.l 2(a6,d4.w),a1
  ADDA.w  d1,a1
  MOVE.b  -(a1),-(a6)
dep_b:  MOVE.b  -(a1),-(a6)
  DBF d4,dep_b
  BRA normal_bytes
direkt_tab
  Dc.l  $7fff000e,$00ff0007,$00070002,$00030001,$00030001
  Dc.l  270-1,  15-1,  8-1,  5-1,  2-1
length_tab
  Dc.b  9,1,0,-1,-1
  Dc.b  8,4,2,1,0
more_offset
 Dc.b  11,   4,   7,  0
  Dc.w  $11f,  -1, $1f


._IFF1:
  MOVE.w  #-1,d2
  MOVEQ.l #0,d3
._unpackIFF:
  MOVEM.l d0-d7/a0-a6,-(a7)

  MOVE.l  d0,a2
  MOVE.l  #5120,d7
'loop:
  CMPI.l  #"BMHD",(a2)
  BEQ     'got_header
  ADDQ.l  #2,a2
  SUBQ.l  #2,d7
  BEQ     header_not_found
  BRA     'loop
'got_header:
;  CMPI.l  #"ILBM",8(a2)
;  BEQ     'got_ILBM
;  BRA     header_not_found
'got_ILBM:
  ADDQ.l  #8,a2
  MOVE.l  a2,a0
  TST.w   d2
  BPL     'okheight
  MOVE.w  2(a2),d2
'okheight:
  CMP.w   2(a1),d2
  BMI     'okheight2
  MOVE.w  2(a1),d2
'okheight2:
  SUBQ.w  #1,d2
  BMI     header_not_found
  MOVE.w  d2,iffheight

  MOVE.b  8(a2),d2
;  MOVE.l  d0,a0
;  MOVE.b  28(a0),d2
  CMP.b   5(a1),d2
  BHI     header_not_found

  SUBQ.b  #1,d2
  MOVE.b  d2,iffdepth

  MOVE.w  (a1),bitmapwidth
  ADDQ.l  #8,a1
  TST.l   (a1)
  BEQ     header_not_found

  MOVEQ.l #0,d0
  MOVE.b  iffdepth,d0
  LEA     bitplanes(pc),a2
iffstore_bitplanes
  MOVE.l  (a1)+,(a2)
  ADD.l   d3,(a2)+         ;!!!!!!!!!!!!!!!
  DBRA    d0,iffstore_bitplanes

  MOVE.w  (a0),d7
  ASR.w   #3,d7

  CMP.w   bitmapwidth,d7
  BHI     header_not_found

  SUBQ.w  #1,d7
  MOVE.w  d7,bytewidth

  MOVE.l  #5120,d7
;check the data and search for "BODY" header
Body_loop
  CMPI.l  #"BODY",(a0)
  BEQ     got_header
  ADDQ.l  #2,a0
  SUBQ.w  #2,d7
  BMI     header_not_found
  BRA     Body_loop
;unpack the data
got_header
  ADDQ.l  #8,a0
  MOVEQ.l #0,d7
  MOVE.w  iffheight,d7                     ; loop for unpacking lines

iffline_loop
  LEA     bitplanes(pc),a2
  MOVEQ.l #0,d6
  MOVE.b  iffdepth,d6
iffbitplane_loop
  MOVE.l  (a2),a1
  MOVEQ.l #0,d5
  MOVE.w  bitmapwidth,d5
  ADD.l   d5,(a2)+
  MOVE.w  bytewidth,d5

iffmainloop
  TST.b   d5
  BMI     unpacked40

  MOVEQ.l #0,d0
  MOVE.b  (a0)+,d0


  CMPI.b  #-128,d0
  BEQ     iffmainloop

  TST.b   d0
  BMI     iffminus

; Positive: next n+1 bytes ar literal data
  SUB.b   d0,d5
  SUBQ.b  #1,d5
iffbytes_lit
  MOVE.b  (a0)+,(a1)+
  DBRA    d0,iffbytes_lit
  BRA     iffmainloop

iffminus:
  MOVE.b  (a0)+,d2
  NEG.b   d0

  SUB.b   d0,d5
  SUBQ.b  #1,d5

iffminus_loop:
  MOVE.b  d2,(a1)+
  DBRA    d0,iffminus_loop
  BRA     iffmainloop

unpacked40:
  DBRA    d6,iffbitplane_loop
  DBRA    d7,iffline_loop
iff_the_end:
  MOVEM.l (a7)+,d0-d7/a0-a6
  MOVE.l  #-1,d0
  RTS

header_not_found:
  MOVEM.l (a7)+,d0-d7/a0-a6
  MOVE.l  #0,d0
  RTS

  Even
iffsource:    Dc.l  1
iffdest:      Dc.l  1
bitplanes:    Ds.l  8
iffheight:    Dc.w  1
bytewidth:    Dc.w  1
bitmapwidth:  Dc.w  1
iffdepth:     Dc.b  1
reserved:
  RTS

;d0=source
;a0=palette object address


._ILBMPalette:
  MOVEM.l   d1-d7/a0-a6,-(a7)
  MOVE.l    d0,a0
; Get Palette Block address
  MOVE.l    #5120,d7
Findpal:
  CMPI.l    #"CMAP",(a0)
  BEQ       Gotit
  ADDQ.l    #2,a0
  SUBQ.l    #4,d7
  BPL       Findpal
  MOVEM.l   (a7)+,d1-d7/a0-a6
  MOVEQ.l   #0,d0
thatsit:
  RTS

;a0 points to the CMAP chunk, first longword is size of chunk
Gotit:
  ADDQ.l    #4,a0                 ; a0 points to numcols in CMAP

;Test Blitz2 palette object
  TST.l     (a1)
  BEQ       reserve_block

'gotblock:

  MOVE.w    4(a1),d0              ; get Blitz2 numcols
  MULU.w    #12,d0
  ADD.l     #16,d0
  MOVEM.l   d0-d1/a0-a1,-(a7)
  MOVE.l    (a1),a1               ; a1=address to Free_mem
  BSR       unallocmem
  MOVEM.l   (a7)+,d0-d1/a0-a1

reserve_block:
  MOVE.l    (a0),d0               ; get chunk size
  MULU.w    #4,d0                 ; multiple by 4
  ADD.l     #16,d0                ; add 8

  MOVE.l    #$10001,d1            ; memory please!
  MOVE.l    #0,d2

  MOVEM.l   a0-a1,-(a7)           ; store registers
  BSR       allocmem
  MOVEM.l   (a7)+,a0-a1           ; restore A0-A1
  TST.l     d0
  BEQ       error

  MOVE.l    d0,(a1)               ; store memory block address

  MOVE.l    (a0)+,d0              ; get CMAP chunk size
  DIVU      #3,d0                 ; divide by 3 to get numcols

  MOVE.w    d0,4(a1)              ; store numcols in pal object
  MOVE.l    #0,6(a1)              ; clear extra words

  MOVE.l    (a1),a1               ; get block address
  MOVE.l    #0,(a1)               ; clear long word at address
  MOVE.w    d0,(a1)               ; store numcols
  ADDQ.l    #4,a1                 ; add 4 to address to get pal dest

  MOVE.w    d0,d7                 ; move numcols
  SUBQ.w    #1,d7                 ; adjust for dbra

loop:
  MOVE.l    #0,(a1)               ; clear red value in dest
  MOVE.b    (a0)+,(a1)            ; move IFF colour byte over
  ADDQ.l    #4,a1                 ; adjust destination pointer

  MOVE.l    #0,(a1)               ; clear green value in dest
  MOVE.b    (a0)+,(a1)            ; move IFF colour byte over
  ADDQ.l    #4,a1                 ; adjust destination pointer

  MOVE.l    #0,(a1)               ; clear blue value in dest
  MOVE.b    (a0)+,(a1)            ; move IFF colour byte over
  ADDQ.l    #4,a1                 ; adjust destination pointer

  DBRA      d7,loop
  MOVEM.l   (a7)+,d1-d7/a0-a6
  MOVE.l    #-1,d0
  RTS

error:
  MOVEQ.l   #0,d0
  MOVEM.l   (a7)+,d1-d7/a0-a6
  RTS

allocmem:
  ALibJsr   $c002
  RTS
  Even

unallocmem:
  ALibJsr   $c003
  RTS
  Even

filename:   Dc.l  0
bmapaddr: Dc.l  0
paladdr:  Dc.l  0
bnk:      Dc.l  0


_ILBMLoadNoPal:
  MOVE.l  #0,a1
._ILBMLoad:
  MOVE.l  d0,filename
  MOVE.l  a0,bmapaddr
  MOVE.l  a1,paladdr
  MOVE.l  #51,d0
  ALibJsr NextBank,0
  TST.l   d0
  BMI     err
  MOVE.l  d0,bnk
  MOVE.l  filename,d0
  MOVE.l  bnk,d1
  CLR.l   d2
  MOVE.l  #-1,d4
  ALibJsr BLoad,0
  TST.l   d0
  BNE     ok
  RTS
  MOVE.l  bnk,d0
  ALibJsr Erase,0
err:
  MOVE.l  #0,d0
  RTS
ok:
  MOVE.l  bnk,d0
  ALibJsr Start,0
  MOVE.l  bmapaddr,a1
  BSR     _IFF1
  TST.l   paladdr
  BEQ     'nothanks

  MOVE.l  bnk,d0
  ALibJsr Start,0
  MOVE.l  paladdr,a1
  BSR     _ILBMPalette

'nothanks:
  ALibJsr Erase,0
  MOVE.l  #-1,d0
  RTS

version: Dc.b "$VER: Pack-Library v1.0 (29.5.1994)",0
libnum: Dc.b "Pack-Library libnum : ",#ripacklib,0
