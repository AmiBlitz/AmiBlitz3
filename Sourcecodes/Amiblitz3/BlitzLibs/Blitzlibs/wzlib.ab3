; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "wzlib.obj"
; CreateIcon      = 0
; Residents       = "libjsrs.res,libmacs.res,blitzoffs.res,all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 32
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 0
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 527
; CursorColumn    = 2
; LabelSearch     = "_lockbasic"
; LabelRemark     = 0
; LabelAll        = 1
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 5
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 5
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;
; 20221114: moved GetD0,PutD0,PushD0 to environlib

#_ItemAddress = -144
#_execBase    = $4


#wnf_tree     = 1 LSL 5
#wnf_automatic= 1 LSL 6
#wzlib        = 129

;--- constants for PPC-usage
#PP_CODE    = 0     ;Ptr to PPC code
#PP_OFFSET  = 4     ;Offset to PP_CODE
#PP_FLAGS   = 8     ;flags (see below)
#PP_STACKPTR = 12   ;stack pointer
#PP_STACKSIZE = 16  ;stack size
#PP_REGS = 20       ;15 registers (d0-a6)
#PP_FREGS = 80      ;8 registers (fp0-fp7)
#PP_SIZE = 150

!libheader{#wzlib,init,0,finit,errorcheckings}

!dumtoke{"Wizard","Wizards Lib",_toke}

!astatement
!args {#long,#unknown,#long}
!libs {#windowslib,$1380,#screenslib,#ua1,#windowslib,#md4}
!subs {_wzwindow,0,0}
!args {#long,#unknown,#long,#word|#push,#word|#push,#word|#push,#word|#push,#long|#push}
!libs {#windowslib,$1380,#screenslib,#ua1,#windowslib,#md4}
!subs {_wzwindow1,0,0}
!name {"WZWindow","window#,address or fname need on first call,max gadgets[,x,y,w,h,wzid]"}

!astatement
!args {#word}
!libs {#windowslib,$1380}
!subs {_freewindow,0,0}
!name {"WZCloseWindow","Window#"}


!afunction{#word}
!args
!libs
!subs {_wzgadgethit,0,0}
!name {"WZGadHit",";Current Gadgetnum"}

!afunction{#long}
!args {#long}
!libs {#windowslib,#ua1}
!subs {_wzinput2,0,0}
!args
!libs
!subs {_wzresult,0,0}
!name {"WZInput","[gadget];Current (or spezified Gadget)Slider etc. Value"}

!afunction {#long}
!args
!libs {#windowslib,#ua0}
!subs {_wzhandle,0,0}
!name {"WZHandle",";Current Windowhandleaddress"}


!afunction {#long}
!args
!libs {#windowslib,#ua0}
!subs {_wzwindowaddr,0,0}
!name {"WZWindowAddr",";Current Windowaddress"}

!afunction {#long}
!args
!libs
!subs {_wzsurface,_checklibswz,0}
!name {"WZSurface"," ;Address of Surface"}

!astatement
!repargs {0,2,#long|#push,#long|#push}
!libs
!subs {_wztags+1,0,0}
!name {"WZTags","Tag,Value [,Tag,Value...]"}

!afunction{#long}
!repargs {0,2,#long|#push,#long|#push}
!libs
!subs {_tags+1,0,0}
!name {"Tags","Tag,Value [,Tag,Value...]"}

!afunction {#long}
!args {#unknown|#long}
!libs {#windowslib,#ua0}
!subs {_wzgadaddr,0,0}
!name {"WZGadAddr","GadgetId; Returns Gadget Addr"}

!afunction {#string}
!args
!libs {#windowslib,#ba1}
!subs {_wzgadgethelp,0,0}
!name {"WZGadHelp"," ;Returns Gadgethelpstring"}

!afunction {#string}
!args
!libs {#windowslib,#ba1}
!subs {_wzmenuhelp,0,0}
!name {"WZMenuHelp",";Returns Menuhelpstring"}

!astatement
!repargs{1,1,#long,#unknown}
!libs {#windowslib,#ua1}
!subs {_wzgadgetset,0,0}

!name {"WZPrint","Id or Name,Value (noFloat),[.];Set Gadget Parameter"}

!afunction {#string}
!args
!libs {#windowslib,#ba1}
!subs {_wzgadgetname,0,0}
!name {"WZGadName"," ;Returns Gadget Name"}

!afunction {#string}
!args
!libs {#windowslib,#ba1}
!subs {_wzmenuname,0,0}
!name {"WZMenuName",";Returns Menu Name"}

!astatement
!args {#long,#long}
!libs
!subs {_wzlistadd,0,0}
!args {#long,#long,#long}
!libs
!subs {_wzlist2add_,0,0}
!args {#long,#long,#long,#long}
!libs
!subs {_wzlist2add_,0,0}
!name {"WZListAdd","Listbase.List,string$[,Num,Data.l];Add Entry for Listview"}

!astatement
!args {#long}
!libs
!subs {_wzlistremove,0,0}
!args {#long,#long}
!libs
!subs {_wzlistremove2,0,0}
!name {"WZListRemove","Listbase.List[,Num];Remove Entry for Listview"}

!afunction {#string}
!args {#long,#long}
!libs
!subs {_wzliststring,0,0}
!args {#long,#long,#long}
!libs
!subs {_wzliststring2,0,0}
!name {"WZListString","Listbase.List,Item[,Mode];Returns Item String Mode=1 all Mode=2 clear select"}

!afunction{#long}
!args {#long,#long}
!libs
!subs {_wzlistaddr,0,0}
!name {"WZListAddr","Listbase.List,Item;Adress of Listview"}


!astatement
!args {#long}
!libs {#windowslib,#ua1}
!subs {_wzenable,0,0}
!name {"WZEnable","Gadnum;Enable Wizard Gadget"}

!astatement
!args {#long}
!libs {#windowslib,#ua1}
!subs {_wzdisable,0,0}
!name {"WZDisable","Gadnum;Disable Wizard Gadget"}

!afunction{#long}
!args {#long}
!libs
!subs {_wzlistmaxitems,0,0}
!name {"WZListItems","Listbase ;Returns Number of Listviewitems"}

!astatement
!args {#string}
!libs
!subs {_wzoffmenu,0,0}
!name {"WZMenuOff","Menuname;"}

!astatement
!args {#string}
!libs
!subs {_wzonmenu,0,0}
!name {"WZMenuOn","Menuname;"}

!astatement
!args {#string,#word}
!libs
!subs {_wzmenuset,0,0}
!name {"WZMenuSet","Menuname,Status;Set Toggle Status"}

!afunction {#word}
!args {#string}
!libs
!subs {_wzmenuget,0,0}
!name {"WZMenuGet","Menuname;Get Toggle Status"}

!afunction{#long}
!args
!libs
!subs {_wzdoubleclick,0,0}
!name {"WZDoubleClick",";Returns Gadnumber for Doubleclick"}

!afunction{#word}
!args
!libs {#screenslib,#ua1}
!subs {_wzyfontsize,0,0}
!name {"WZYFontsize",";Return y Fontheight"}

!afunction{#word}
!args
!libs {#screenslib,#ua1}
!subs {_wzxfontsize,0,0}
!name {"WZXFontsize",";Return x Fontheight"}

!astatement
!args
!libs
!subs {_wzputmsg,0,0}
!name {"WZPutMsg","Put Message in Reg d0 to Blitz Port for use with Event"}

!afunction {#long}
!args
!libs {#windowslib,#ua0}
!subs {_wzwaitevent,0,0}
!args {#long}
!libs
!subs {_wzwaitevent2,0,0}
!name {"WZWaitEvent","(IntuiMsg if one exists);"}

!afunction{#long}
!args {#long,#long}
!libs
!subs {_wzlistdata,0,0}
!name {"WZListData","Listbase.List,Item;Content of Listview userdata "}

!afunction{#long}
!args {#long}
!libs
!subs {_wzlistpos,0,0}
!name {"WZListPos","Name or id;pos=Listviewpos 1. visible entry"}

!afunction{#string}
!args {#unknown}
!libs
!subs {_wzgetstring,0,0}
!name {"WZGetString","Name or id;string$=String in Stringgadget"}

!afunction{#string}
!args
!libs
!subs {_wzresult2,0,0}
!name {"WZInputstr",";Current Gadget String"}

!afunction{#long}
!args {#long}
!libs
!subs {_wzlistitem,0,0}
!name {"WZListNum","Name or id;pos=give number of sel entry"}

;!astatement
Dc 3 LSL 8+3,0,0
!args {#long,#long}
!libs
!subs {_wzlistaddtree,0,0}
!args {#long,#long,#long}
!libs
!subs {_wzlist2addtree,0,0}
!args {#long,#long,#long,#long}
!libs
!subs {_wzlist3addtree,0,0}
!args {#long,#long,#long,#long,#long}
!libs
!subs {_wzlist4addtree,0,0}
!args {#long,#long,#long,#long,#long,#long}
!libs
!subs {_wzlist5addtree,0,0}
!name {"WZListAddTree","Listbase.List,string$[,Parent Node[,num.l[,child list[,UserData];Add Entry for Hierachy"}

!afunction{#long}
!args {#long}
!libs
!subs {_wzgetnode,0,0}
!name {"WZGetNode","(WizardNode);pos=give the selected Hierachy Node"}

!afunction {#long}
!args {#string}
!libs {#windowslib,#ba1}
!subs {_wzobjectid,0,0}
!name {"WZID","(Object Name);Returns the ID num of a given name"}

!astatement
;Dc 3 LSL 8+3,0,0
!args {#unknown}
!libs
!subs {_wzloadgui,_checklibswz,0}
!name {"WZLoadGUI","pointer to a incbin file or filename.wizard"}

!afunction {#long}
!args
!libs {#windowslib,#ua0}
!subs {_wzhandle2,0,0}
!name {"WZHandlenocheck",";Current Windowhandleaddress"}

!afunction {#string}
!args {#long,#long}
!libs {#windowslib,#ua0}
!subs {_wz_gadgetconfig,0,0}
!name {"WZGadgetConfig",";Win handle,gadget"}

; ================================== declarations to be moved in other libs ===============

!afunction{#long}
!args
!libs
!subs {openpowerpc,0,0}
!name {"PowerPCBase","Returns Address of powerpc.library"}

!astatement
!args {#long}
!libs
!subs {_runpowerpc,0,0}
!args {#long,#long}
!libs
!subs {_runpowerpc,0,0}
!args {#long,#long,#long}
!libs
!subs {_runpowerpc,0,0}
!name {"RunPPc","?CodeAddr,[d1,d2,a1,a5]"}
!astatement
!args
!libs
!subs {_lockbasic,0,0}
!name {"LockBasic",";Lock Basic for Subtask"}

!astatement
!args
!libs
!subs {_unlockbasic,0,0}
!name {"UnLockBasic","Unlock Basic for Subtask"}



; ================================== END OF DECLARATIONS ================================== 

init:!nullsub{_codeinit,0,0,#intuitionlib,#la6}

finit:!nullsub{_codefinit,0,0}

;_load:!nullsub{0,0,0}
;_save:!nullsub{0,0,0}
;_use:!nullsub{0,0,0}
;_free:!nullsub{0,0,0}
;
;!libfin{_toke,_load,_save,_use,_free,0,0}
!libfin


#winstructsize = 5
poolheader: Dc.l 0
childstore: Dc.l 0
treedata:   Dc.l 0
surface:    Dc.l 0


_wzloadgui:
  TST.l surface
  BNE alreadyloaded

  SUBA.l a0,a0
  MOVE.l d0,a1                ; instead of name the mem address of the surface data
  CMP.l #"FORM",(a1)          ; check if not memaddr but file ist given
  BEQ 'w11
    MOVE.l d0,a0
    SUBA.l a1,a1
 'w11

  MOVE.l usertags,a2          ; Tags for surface data
  MOVE.l _wizardBase(pc),a6
  JSR -$1e(a6)                ; WZ_OpenSurfaceA(A0:name,A1:memaddr,A2:tags)

  TST.l d0
  BEQ errsurface

  MOVE.l d0,surface
  CLR.l (a2)
RTS


.openpowerpc:
  TST.l _powerpcbase
  BNE 'l10
    LEA powerpcname(pc),a1
    MOVEQ #0,d0
    MOVE.l 4,a6
    JSR _OpenLibrary(a6)              ; open powerpc.library
    TST.l d0 : BEQ missinglibppc
    MOVE.l d0,_powerpcbase
  'l10:
RTS

._runpowerpc
  TST.l _powerpcbase
  BNE 'l10
    MOVEM.l d0-d1,-(a7)
    JSR openpowerpc
    MOVEM.l (a7)+,d0-d1
 'l10:
  LEA    -$90(a7),a7
  MOVE.l d1,PP_REGS+12*4(a7)
  MOVE.l d2,PP_REGS(a7)
  MOVE.l _powerpcbase,PP_REGS+8*4(a7)
  MOVE.l a5,PP_REGS+9*4(a7)
  MOVE.l a7,a0
  MOVE.l d0,PP_CODE(a0)
  CLR.l  PP_OFFSET(a0)
  MOVE.l #0,PP_FLAGS(a0)    ;1=asynchron
  CLR.l  PP_STACKPTR(a0)
  CLR.l  PP_STACKSIZE(a0)
  MOVE.l _powerpcbase,a6
  JSR    -30(a6)                 ;RunPPC
  LEA    $90(a7),a7
RTS

._codeinit
  SUB.w #$18,a4
  MOVE.l a4,blitzport

  MOVE.l a6,_intuiBase

  MOVE.l _execBase,A6
  JSR check_kickstart

  LEA locname(pc),a1             ; open locale.library - just for existance check, as it is needed by wizard.library
  MOVEQ #0,d0
  JSR _OpenLibrary(a6)
  ;TST.l d0 : BEQ missinglibloc
  MOVE.l d0,_labelBase                                                                                                                                                                                                                                     

  LEA wzname(pc),a1             ; open wizard.library
  MOVEQ #0,d0
  JSR _OpenLibrary(a6)
  ;TST.l d0 : BEQ missinglibwzl
  MOVE.l d0,_wizardBase                                                                                                                                                                                                                                    

  LEA gadname(pc),a1            ; open GadTools.library
  MOVEQ #0,d0
  JSR _OpenLibrary(a6)
  ;TST.l d0 : BEQ missinglibgdt
  MOVE.l d0,_gadtoolsBase



  MOVE.l #336+$2e+$4c,d0        ; allocate memory
  MOVEQ #1,d1
  SWAP d1
  ALibJsr $c002                 ; globalalloc;  D0.l : bytesize;  D1.l : requirements => D0.l : memory block

  TST.l d0
  BEQ err2
  MOVE.l d0,_Tags
  ADD.l #16,d0                  ; usertags from 64(_Tags) on ...
  MOVE.l d0,usertags

  MOVE.l #_prehandler,d0
  MOVE.l #_posthandler,d1
  ALibJsr SetEventFilter

  MOVE.l d2,-(a7)
  MOVE.l #$10000,d0             ; memFlags
  MOVE.l #2000,d1               ; puddleSize
  MOVE.l #2000,d2               ; threshSize
  MOVE.l _execbase,a6
  JSR -$2b8(a6)                 ; _Createpool
  MOVE.l (a7)+,d2
  MOVE.l d0,poolheader

  MOVE.l usertags(pc),a0
  LEA 336(a0),a0                ; struct Semaphore ($24 bytes)
  JSR -558(a6)                  ; _InitSemaphore
RTS

.check_kickstart:
  MOVEQ.l #0,d0
  MOVEA.l $4,A0
  MOVE.w $14(A0),d0             ; Exec.libVersion
  CMP.w #39,d0
  BCS 'nokick3
    MOVE #1,kick3_available
 'nokick3
RTS
kick3_available: Dc.w 0


._lockbasic
  MOVE.l a6,-(a7)
  MOVE.l _execbase,a6
  MOVE.l usertags(pc),a0
  LEA 336(a0),a0
  JSR -564(a6)                ; _ObtainSemaphore
  MOVE.l (a7)+,a6
RTS

._unlockbasic
  MOVE.l a6,-(a7)
  MOVE.l _execbase,a6
  MOVE.l usertags(pc),a0
  LEA 336(a0),a0
  JSR -570(a6)                ; _ReleaseSemaphore
  MOVE.l (a7)+,a6
RTS

._codefinit:
  MOVE.l poolheader(pc),a0
  MOVE.l _execbase,a6
  JSR -$2be(a6)               ; _DeletePool

nopool:
  MOVE.l _wizardBase(pc),d0
  BEQ noclose

  MOVE.l d0,a6
  MOVE.l surface(pc),d0
  BEQ c1
    MOVE.w maxwindows(pc),-(a7)
    c2:
      MOVE.w (a7),d0
      ALibJsr WZCloseWindow      ;itself
      SUBQ #1,(a7)
    BPL c2
    ADDQ #2,a7
    MOVE.l surface,d0
    MOVE.l d0,a0
    JSR -$24(a6)              ;WZ_CloseSurface
  c1:

  MOVE.l _wizardBase(pc),d0                                                                                                                                                                                                                                
  BEQ nc2
    MOVE.l d0,a1
    MOVE.l _execbase,a6
    JSR _CloseLibrary(a6)
    CLR.l _wizardBase                                                                                                                                                                                                                                     
  nc2:

  MOVE.l _labelBase(pc),d0                                                                                                                                                                                                                                 
  BEQ nloc
    MOVE.l d0,a1
    MOVE.l _execbase,a6
    JSR _CloseLibrary(a6)
    CLR.l _labelBase                                                                                                                                                                                                                                      
  nloc:

  MOVE.l _gadtoolsBase(pc),d0                                                                                                                                                                                                                              
  BEQ noc3
    MOVE.l d0,a1
    JSR _CloseLibrary(a6)
    CLR.l _gadtoolsBase                                                                                                                                                                                                                                   
  noc3:

  MOVE.l _intuiBase(pc),a1                                                                                                                                                                                                                                 
  JSR _CloseLibrary(a6)
  CLR.l _intuiBase                                                                                                                                                                                                                                        
  MOVE.l _powerpcbase(pc),d0
  BEQ noclose
    MOVE.l d0,a1
    JSR _CloseLibrary(a6)
    CLR.l _powerpcbase
  noclose:
RTS

._wz_gadgetconfig
  MOVE.l _wizardBase(PC),a6                                                                                                                                                                                                                                
  MOVE.l d0,a0
  MOVE.l d1,a1
  JSR -$66(a6)
RTS

._wzgetnode
  MOVE.l d0,a0
  ALibJsr EMouseX
  ASL.l #8,d0
  ASL.l #8,d0
  ALibJsr EMouseY
  ;ALibJsr WZInput
  MOVE.l a6,-(a7)
  MOVE.l _wizardBase(PC),a6
  JSR -$96(a6)
  TST.l d0
  BEQ 'l1
    MOVE.l d0,a0
    MOVE.l 4(a0),d0
 'l1
  MOVE.l (a7)+,a6
RTS

._wzputmsg
  TST.l d0
  BEQ 'nomsg
    MOVE.l d0,a1
    MOVE.l usertags(pc),a0
    LEA 336+$2e(a0),a0
    MOVEQ #$38/4,d1
   'l10:
      MOVE.l (a1)+,(a0)+
    DBF d1,'l10
    MOVE.l usertags,a1
    LEA 336+$2e(a1),a1
    CLR.l $e(a1)
    MOVE.l blitzport(pc),d0
    BEQ 'nomsg
      MOVE.l d0,a0
      JSR -366(a6)
      ALibJsr Event
 'nomsg
RTS

._wzlistitem
 CMP.l #4000,d0
 BCS 'l1
 MOVE.l a2,-(a7)
 JSR findid
 MOVE.l (a7)+,a2
 TST.l d0
 BEQ 'l2
'l1:
 ALibJsr WZGadAddr            ;itself
 MOVE.l d0,a0
 MOVE.l #WLISTVIEWA_Selected,d0
 MOVE.l _intuiBase,a6                                                                                                                                                                                                                                      
 LEA vartemp,a1
 JSR -654(a6)
 LEA vartemp,a1
 MOVE.l (a1),d0
 ;MOVE.l $124(a0),d0
'l2 RTS
._wzlistpos
 CMP.l #4000,d0
 BCS 'l1
 MOVE.l a2,-(a7)
 JSR findid
 MOVE.l (a7)+,a2
 TST.l d0
 BEQ 'l2
'l1:
 ALibJsr WZGadAddr            ;itself
 MOVE.l d0,a0
 ;;MOVE.l $124(a0),d0
 MOVE.l d2,-(a7)
 MOVE.l #WLISTVIEWA_Top,d0
 MOVE.l _intuiBase,a6                                                                                                                                                                                                                                      
 LEA vartemp,a1
 JSR -654(a6)
 LEA vartemp,a1
 MOVE.l (a1),d0
;MOVE.l $104(a0),d2
; ALibJsr WZYFontsize          ;itself
; ADDQ.l #1,d0
; DIVS d0,d2
; MOVE.l d2,d0
; EXT.l d0
 MOVE.l (a7)+,d2
'l2 RTS

._wzgetstring
 CMP.w #7,-2(a2)
 BEQ 's1
 AND.l #$ffff,d0
's1 CMP.l #4000,d0
 BCS 'l1
 MOVE.l a2,-(a7)
 JSR findid
 MOVE.l (a7)+,a2
 TST.l d0
 BEQ exit
'l1:
 ALibJsr WZGadAddr             ;itself
 MOVE.l d0,a0
 MOVE.l _intuiBase,a6                                                                                                                                                                                                                                      
 MOVE.l #$801801FE,d0
 LEA vartemp,a1
 JSR -654(a6)
 LEA vartemp,a0
 MOVE.l (a0),d0
 CMP.w #7,-2(a2)
 BNE gh3
 SUB.l -6(a2),a3
's3 SUBQ.l #1,a3
 BRA gh3
._wzwaitevent2
  MOVE.l _execbase,a6
  JSR -$84(a6)
  JSR _wzputmsg
  MOVE.l d7,d0
  JSR -$8a(a6)
  exit:
RTS

._wzwaitevent
 MOVE.l a2,-(a7)
 MOVE.l (a0),d0
 BEQ 'l14
 MOVE.l d0,a0
 MOVE.l $56(a0),d0
 BEQ 'l10
 MOVE.l d0,a1
 CMP.l blitzport,d0
 BEQ 'l10
 MOVE.l a0,a2
 ;MOVE.l a1,-(a7)
 ;ALibJsr Event
 ;MOVE.l (a7)+,a1
 ;TST.l d0
 ;BNE 'l14
 MOVE.l _execbase,a6
 MOVE.l a1,-(a7)
 MOVE.l $56(a2),a0
 JSR -$174(a6)
 MOVE.l (a7)+,a1
 TST.l d0
 BNE 'l25
 MOVEQ #0,d1
 MOVE.b SizeOf .MsgPort\mp_SigBit(a1),d1
 MOVEQ #1,d0
 ASL.l d1,d0
 JSR -$13e(a6)
 MOVE.l $56(a2),a0
 JSR -$174(a6)
 TST.l d0
 BEQ 'l14
'l25 JSR -$84(a6)
 MOVE.l d0,-(a7)
 JSR _wzputmsg
 MOVE.l (a7)+,a1
 JSR -$17a(a6)
'l30:
      JSR -$8a(a6)
      MOVE.l d7,d0
'l14: MOVE.l (a7)+,a2
 RTS
'l10:
 ALibJsr WaitEvent
 MOVE.l (a7)+,a2
 RTS

                                                                                                                               

_posthandler:
  MOVE.l d0,a1
  TST.l d0
  BEQ gad2
  CMP.l #IDCMP_CLOSEWINDOW,$14(a1)
  BGE nogad2
    gad2:
    TST.l _gadtoolsBase                                                                                                                                                                                                                                   
    BEQ nogad2
      MOVE.l _gadtoolsBase(pc),a6                                                                                                                                                                                                                          
      JSR -108(a6)
      MOVE.l $4,a6
  nogad2:
RTS
                                                                                                                               

_prehandler
 ;TST.l d0
 ;BEQ nogad1
 MOVE.l d0,A0
 CMP.l #IDCMP_IDCMPUPDATE,$14(a0)
 BNE p4b
 MOVE.l $1c(a0),a1
 CMP.l #GA_ID,(a1)
 BNE p4
 MOVE.l $4(a1),d1
 MOVE.w d1,$18(a0)
; CMP.l lastgadnum,d1
; BEQ 'l1
; MOVE.l $24(a0),seconds
; MOVE.l $28(a0),micros
; MOVE.l d1,lastgadnum
; BRA 'l2
;'l1
; MOVEM.l a0-a1/d0/d2-d3,-(a7)
; CLR.l doublenum
; MOVE.l seconds,d0:MOVE.l micros,d1
; MOVE.l $24(a0),d2:MOVE.l $28(a0),d3
; MOVE.l _intuiBase,a6                                                                                                                                                                                                                                   
; JSR -102(a6)
; TST.l d0
; BEQ 'l3
; MOVE.l lastgadnum,doublenum
;'l3:
; MOVEM.l (a7)+,a0-a1/d0/d2-d3
; MOVE.l $24(a0),seconds
; MOVE.l $28(a0),micros
'l2: MOVE.l $c(a1),$20(a0)
 CMP.l #$8018021b,$10(a1)       ;doubleclick
 BNE p4
 TST.l $14(a1)
 BEQ p4
 MOVE.l #1,doublenum
p4: CMP.l #$8018026f,$10(a1)
  BNE p4b
 TST.l $14(a1)
 BEQ p4b
 MOVE.l #1,doublenum
p4b:
 CMP.l #IDCMP_GADGETHELP,$14(a0)
 BNE p5
 MOVE.l $1c(a0),$20(a0)
  p5:
  CMP.l #IDCMP_MENUHELP,$14(a0)
  BNE p6
    CLR.l $20(a0)
    MOVE.w $18(a0),$22(a0)
  p6:
  CMP.l #IDCMP_VANILLAKEY,$14(a0)
  BNE p7
    ;MOVEM.l d2-d7/a6,-(a7)
    MOVE.l d0,-(a7)
    ALibJsr WZHandlenocheck
    TST.l d0
    BEQ 'nw
      MOVE.l d0,a0
      MOVE.l (a7),a1
      MOVEQ #0,d0
      MOVEQ #0,d1
      MOVE.w $18(a1),d0
      MOVE.w $1a(a1),d1
      MOVE.l _wizardBase(pc),a6                                                                                                                                                                                                                            
      SUBA.l a1,a1
      JSR -$84(a6)             ;wz_gadgetkey
   'nw
    MOVE.l (a7)+,d0
    ;MOVEM.l (a7)+,d2-d7/a6
    BRA nogad1
  p7:
    CMP.l #IDCMP_CLOSEWINDOW,$14(a0)
    BGE nogad1
      TST.l _gadtoolsBase
      BEQ nogad1
        MOVE.l a0,a1
        MOVE.l _gadtoolsBase(pc),a6
        JSR -102(a6)
  nogad1:
  MOVE.l _execbase,a6
RTS


maxwindows:   Dc.w $0
wzname:       Dc.b "wizard.library",0,0
gadname:      Dc.b "gadtools.library",0,0
powerpcname:  Dc.b "powerpc.library",0
locname:      Dc.b "locale.library",0,0

;_execbase:    Dc.l 0
_wizardBase:  Dc.l 0
_labelBase:   Dc.l 0
_gadtoolsBase:Dc.l 0
_powerpcbase: Dc.l 0
_intuiBase:   Dc.l 0

screenaddr:   Dc.l 0
_Tags:        Dc.l 0
usertags:     Dc.l 0
basewindow:   Dc.l 0
blitzport:    Dc.l 0
idcmpflags:   Dc.l 0
winnum:       Dc.l 0
seconds:      Dc.l 0
micros:       Dc.l 0
lastgadnum:   Dc.l 0
doublenum:    Dc.l 0

.arg0:
Dc.l #WGROUPA_ActivePage,0
Dc.l #WBUTTONA_Label,0
Dc.l #WSTRINGA_String,0
Dc.l #WCHECKBOXA_Checked,0
Dc.l #WMXA_Active,0
Dc.l #WINTEGERA_Long,0
Dc.l #WSCROLLERA_Top,0
Dc.l #WARROWA_Step,0
Dc.l #WTOGGLEA_Checked,0
Dc.l #WCOLORFIELDA_Pen,0
Dc.l #WARGSA_Arg0,0
Dc.l #WGAUGEA_Current,0
Dc.l #WCYCLEA_Active,0
Dc.l #WDATEA_Day,0
Dc.l #WIMAGETOGGLEA_Checked,0
Dc.l #WPALETTEA_Selected,0
Dc.l #WSLIDERA_Level,0
Dc.l #WSTRINGFIELDA_Text,0
Dc.l #WLISTVIEWA_Selected,0
Dc.l #WHIERARCHYA_Selected,0
arg1:Dc.l #WARGSA_Arg1,1
Dc.l #WHIERARCHYA_List,1
Dc.l #WLISTVIEWA_List,1
Dc.l #WDATEA_Month,1
Dc.l #WGAUGEA_Total,1
Dc.l #WSLIDERA_Min,1
Dc.l #WSCROLLERA_Visible,1
Dc.l #WCYCLEA_Labels,1
Dc.l #WTEXTPOPUPA_Labels,1
Dc.l #WIMAGEPOPUPA_Labels,1
Dc.l #WVECTORPOPUPA_Labels,1

arg2:
Dc.l #WSCROLLERA_Total,2
Dc.l #WSLIDERA_Max,2
Dc.l #WLISTVIEWA_Top,2
Dc.l #WGAUGEA_Format,2
Dc.l #WDATEA_Year,2
Dc.l #WARGSA_Arg2,2
Dc.l #WHIERARCHYA_Top,2

arg3:
winx: Dc.w -1
winy: Dc.w -1
winw: Dc.w -1
winh: Dc.w -1
winnum2:Dc.l 0

getatttags
Dc.l #WMXA_Active
Dc.l #WINTEGERA_Long
Dc.l #WTOGGLEA_Checked
Dc.l #WIMAGETOGGLEA_Checked
Dc.l #WCYCLEA_Active
Dc.l #WSLIDERA_Level
Dc.l #WDATEA_Day
Dc.l #WINTEGERA_Long
Dc.l #WLISTVIEWA_Selected
Dc.l #WHIERARCHYA_Selected
Dc.l #WPALETTEA_Selected
Dc.l #WSTRINGFIELDA_Text
Dc.l #WCHECKBOXA_Checked
Dc.l #WSCROLLERA_Top
Dc.l #WGROUPA_ActivePage
Dc.l 0        ;end of list

_wzyfontsize
  CMP.l #0,a1
  BEQ _nowzwin
    MOVE.l (a1),a1
    MOVEQ #0,d0
    MOVE.w $54+$3a(a1),d0
RTS

_nowzwin:
  MOVEQ.l #8,d0
RTS

_wzxfontsize:
  CMP.l #0,a1
  BEQ _nowzwin
    MOVE.l (a1),a1
    MOVEQ #0,d0
    MOVE.w $54+$3c(a1),d0
RTS

_wzwindow1:
  SUBQ.l #2,a2
  CMP.w #7,(a2)
  BNE 'l1
    SUBQ.l #4,a2
 'l1:
  MOVE.w -(a2),winx
  MOVE.w -(a2),winy
  MOVE.w -(a2),winw
  MOVE.w -(a2),winh
  MOVE.l -(a2),winnum2
BRA _wz1x

._wzwindow:
  TST.l d0
  BEQ error
  _wz1x:
  MOVEM.l a2-a6/d2-d7,-(a7)
  LSR.l #winstructsize,d0
  ASL.l #2,d2
  ADD.l #12,d2
  MOVE.l d0,winnum
  MOVE.l a1,screenaddr
  SUBQ.l #1,d4
  MOVE.w d4,maxwindows
  MOVE.l _wizardBase(pc),d0
  BEQ exitwindow
  MOVE.l d0,a6
  TST.l (a3)
  BEQ w1
    MOVE.l d1,-(a7)
    JSR _freewindow
    MOVE.l (a7)+,d1
  w1:
  TST.l surface
  BNE nosurface
    SUBA.l a0,a0
    MOVE.l d1,a1
    MOVE.l d1,a2
    CMP.l #"FORM",(a2)
    BEQ w11
      MOVE.l d1,a0
      SUBA.l a1,a1
    w11:
    MOVE.l usertags,a2
    JSR -$1e(a6)              ;WZ_OpenSurfaceA
    MOVE.l d0,surface
    TST.l d0
    BEQ error
  nosurface:
  MOVEM.l d3-d4/a6,-(a7)
  MOVE.w #0,-(a7)
  MOVE.w #0,-(a7)
  MOVE.w #5,-(a7)
  MOVE.w #5,-(a7)
  SUBA.l a0,a0
  MOVE.l a0,-(a7)
  MOVE.l winnum,d0

  MOVEQ #0,d1
  MOVEQ #0,d3
  MOVEQ #1,d4
  MOVE.l screenaddr,a0
  MOVE.l (a0),a1
  LEA $c(a7),a2
  ALibJsr Window
  LEA $c(a7),a7
  MOVEM.l (a7)+,d3-d4/a6
  MOVE.l (a3),d0
  TST.l d0
  BEQ error

  MOVE.l d0,a0
  MOVE.l $52(a0),idcmpflags
  MOVE.l $56(a0),blitzport
  MOVE.l winnum,d0
  ALibJsr CloseWindow
  MOVE.l _wizardBase(pc),a6                                                                                                                                                                                                                                
  MOVE.l screenaddr(pc),a0
  MOVE.l (a0),d0
  MOVEQ #32,d1
  MOVE.l surface(pc),a0
  SUBA.l a1,a1
  JSR -$2a(a6);WZ_AllocWindowHandle
  TST.l d0
  BEQ error

  MOVE.l d0,$10(a3)
  MOVE.l d2,d0
  MOVE.l #MEMF_CLEAR,d1
  ALibJsr $c002
  TST.l d0
  BEQ error

  ADDQ #4,d0
  MOVE.l d0,$18(a3):MOVE.l d0,a0:
  MOVE.l d2,-4(a0)
  MOVE.l $10(a3),a0
  MOVE.l _Tags,a1
  MOVE.l $18(a3),4(a1)
  MOVE.l #WWH_GadgetArray,(a1)
  MOVE.l #WWH_GadgetArraySize,$8(a1)
  MOVEQ #0,d0
  TST.l winnum2
  BNE 'l1
    MOVE.l winnum,d0
    BRA 'l2
 'l1:
    MOVE.l winnum2,d0
 'l2:
  MOVEQ #0,d1
  SUBQ.l #4,d2
  MOVE.l d2,$c(a1)
  JSR -$30(a6)
  ;ALibJsr WZ_CreateWindowObjA_
  TST.l d0
  BEQ error

  MOVE.l d0,a1
  TST.w winx
  BLT 'l2b
    MOVE.w winx,(a1)
 'l2b:
  TST.w winy
  BLT 'l2c
    MOVE.w winy,2(a1)
 'l2c
  MOVE.l screenaddr,a0
  MOVE.l (a0),a0
  CMP.w #-2,winx
  BNE 'centerx
    MOVE.w $c(a0),d0
    SUB.w $4(a1),d0
    BGT 'gx1
      MOVEQ #0,d0
   'gx1
    ASR.w #1,d0
    MOVE.w d0,(a1)
 'centerx
  CMP.w #-2,winy
  BNE 'centery
    MOVE.w $e(a0),d0
    SUB.w $6(a1),d0
    BGT 'gy1
      MOVEQ #0,d0
   'gy1
    ASR.w #1,d0
    MOVE.w d0,2(a1)
 'centery
  TST.w winw
  BLE 'l3
    MOVE.w winw,4(a1)
 'l3:
  TST.w winh
  BLE 'l3b
    MOVE.w winh,6(a1)
 'l3b
  MOVE.l $10(a3),a0
  MOVE.l _Tags(pc),a2
  MOVE.l #$1,$4(a2)
  MOVE.l #WA_AutoAdjust,(a2)
  MOVE.l #WA_MenuHelp,8(a2)
  MOVE.l #$1,$c(a2)
  JSR -$36(a6)                ; WZ_OPenWindowObj
  MOVE.l d0,(a3)
  TST.l d0
  BEQ error

  MOVE.l d0,a0
  MOVE.l $20(a0),d0
  BEQ 'noname
    MOVE.l d0,a0
    MOVEQ #0,d1
   'wname
      ADDQ.l #1,d1
    TST.b (a0)+
    BNE 'wname
    ALibJsr $cf01
    MOVE.l (a3),a0
    MOVE.l d0,$20(a0)
 'noname
  MOVEQ #0,d0
  MOVE.l winnum,d0
  MOVE.w d0,$78(a0)
  MOVE.l $56(a0),$14(a3)
  MOVE.l $52(a0),d3
  CLR.l $52(a0)

  MOVE.l _execbase,a6
  JSR -$84(a6)                ; Forbid_
  TST.l $56(a0)
  BNE 'l20
    MOVE.l idcmpflags,d3
    OR.l #$800000,d3
    BRA 'l10
 'l20:
    MOVE.l (a3),a1
    MOVE.l $56(a1),a0
    JSR -$174(a6)             ; GetMsg_
    TST.l d0
    BEQ 'l10
      MOVE.l d0,a1
      JSR -$17a(a6)           ; ReplyMsg_
  BRA 'l20
 'l10:
  MOVE.l (a3),a0
  MOVE.l $56(a0),a0
  CMP.l #0,a0
  BEQ 'nofree
    MOVEQ #0,d0
    MOVE.b SizeOf .MsgPort\mp_SigBit(a0),d0
    JSR -336(a6)              ; FreeSignal_
 'nofree
  MOVE.l (a3),a0
  MOVE.l blitzport(pc),$56(a0)
  OR.l #$800000,d3
  MOVE.l d3,$52(a0)
  SUBA.l a1,a1
  JSR -294(a6)                ; FindTask_
  MOVE.l (a3),a0
  MOVE.l $56(a0),a0
  MOVE.l SizeOf .MsgPort\mp_SigTask(a0),d1
  CMP.l d0,d1
  BEQ 'portok
    ;MOVE.l d0,SizeOf .MsgPort\mp_SigTask(a0)
 'portok:
  JSR -$8a(a6)                ; Permit_

  TST kick3_available
  BEQ 'skip_helpcontrol
    ;ALibJsr intuitionbase      ; replaced by available libpointer
    MOVE.l _intuiBase(pc),a6
    MOVE.l (a3),a0
    MOVEQ #HC_GADGETHELP,d0
    JSR -828(a6)                ; HelpControl_ (a0:window,d0:flags) --> intuition V39
 'skip_helpcontrol:

  MOVE.l usertags,a0
  CLR.l (a0)
  MOVE.l #-1,winx
  MOVE.l #-1,winw
  CLR.l winnum2
  MOVE.l (a3),d0

  exitwindow:
  MOVEM.l (a7)+,a2-a6/d2-d7
RTS

gadnums:
  MOVE.l (a3),a0
  MOVEQ #0,d0
  MOVE.l $3e(a0),d1
  BEQ gn1
    gn2:
      MOVE.l d1,a0
      MOVE.l (a0),d1
      BEQ gn1
        ADDQ.l #1,d0
    BRA gn2
  gn1:
  ASL.l #2,d0
  MOVE.l d0,d2
RTS

altport:Dc.l 0

._freewindow:
  CMP.l #0,a3
  BEQ nohandle
  MOVE.l $10(a3),d0:BEQ nohandle:
  MOVE.l (a3),a0
  MOVE.l d0,a0
  MOVE.l _execbase,a6
  JSR -$84(a6)
'l20:  MOVE.l (a3),a1
  MOVE.l $56(a1),d0
 BEQ 'l10
  MOVE.l d0,a0
  JSR -$174(a6)
  TST.l d0
  BEQ 'l10
  MOVE.l d0,a1
  JSR -$17a(a6)
  BRA 'l20
'l10:
  MOVEQ #0,d0
  MOVE.l (a3),a0
  CLR.l $56(a0)
  MOVE.l _intuiBase(pc),a6                                                                                                                                                                                                                                 
  JSR -150(a6)
  MOVE.l (a3),a1
  MOVE.l $10(a3),a0
  MOVE.l $14(a3),$56(a1)
  MOVE.l _execbase,a6
  JSR -$8a(a6)
  MOVE.l _wizardBase(pc),a6                                                                                                                                                                                                                                
  JSR -$3c(a6)    ;WZ_CloseWindow
  MOVE.l $10(a3),a0
  JSR -$42(a6)    ;WZ_FreeWindowHandle
  CLR.l $10(a3)
  CLR.l $14(a3)
  CLR.l (a3)
  MOVE.l $18(a3),a0
  LEA.l -4(a0),a1
  MOVE.l a1,d0
  ALibJsr $c003                   ; globalfree; A1.l : memory block ;  D0.l : bytesize
  CLR.l $18(a3)
  ALibJsr FlushEvents
  nohandle:
RTS

._wzgadgethit:
  MOVEQ #0,d0
  ALibJsr EventCode
RTS

._wzresult:
  ALibJsr EMouseX
  ASL.l #8,d0
  ASL.l #8,d0
  ALibJsr EMouseY
RTS

._wzresult2:
  ALibJsr EMouseX
  ASL.l #8,d0
  ASL.l #8,d0
  ALibJsr EMouseY
BRA gh3

._wzhandle2:
  MOVE.l $10(a0),d0
RTS


._wzhandle:
 MOVE.l $10(a0),d0:
 TST.l d0
 BEQ nowin
RTS

._wzwindowaddr:
  MOVE.l a0,d0
  BEQ nowin
  MOVE.l (a0),d0:
 'l1
RTS

._wzsurface:
  MOVE.l surface(pc),d0
  TST.l d0
  BEQ nowin
RTS

._wzgadaddr:
  CMP.l #4000,d0
  BCS 'l1
    MOVE.l a0,-(a7)
    JSR findid
    MOVE.l (a7)+,a0
    TST.l d0
    BEQ exit
 'l1:
  MOVE.l $18(a0),a0
  ASL.l #2,d0
  ADDQ #4,d0
  CMP.l -4(a0),d0
  BGE err4
    SUBQ #4,d0
    ADD.l d0,a0
    MOVE.l (a0),d0
    BEQ err4
RTS

._tags
  MOVEM.l a0/d7,-(a7)
  MOVE.l usertags(pc),a0
BRA gettags

._wztags:
  MOVEM.l a0/d7,-(a7)
  MOVE.l usertags(pc),a0
BRA gettags

  tagloop:
    MOVE.l -(a2),d0
    MOVE.l -(a2),d1
    MOVEM.l d0-d1,(a0)
    ADDQ #8,a0
    gettags:
  DBRA d7,tagloop
  MOVE.l #0,(a0)+
  MOVEM.l (a7)+,a0/d7
  MOVE.l usertags(pc),d0
RTS

._wzgadgethelp:
  ALibJsr EventWindow
  LSL.w #winstructsize,d0
  ADD.w d0,a1
  MOVE.l $10(a1),a0
  BSR _wzresult

  TST.l d0:BEQ gh1
  MOVE.l d0,a1
  MOVE.l _wizardBase(pc),a6                                                                                                                                                                                                                                
  JSR -$60(a6)  ;Gadgethelp
  TST.l d0
  BEQ gh1
    gh3:
      MOVE.l d0,a0
      MOVEQ #0,d0
    gh2:
      MOVE.b (a0)+,(a3)+
      BEQ gh1
        ADDQ.l #1,d0
    BRA gh2
  gh1:
  SUBQ #1,a3
RTS

._wzmenuhelp:
  ALibJsr EventWindow
  LSL.w #winstructsize,d0
  ADD.w d0,a1
  MOVE.l $10(a1),a0
  MOVEQ #0,d0
  ALibJsr EventCode
  MOVE.l _wizardBase(pc),a6                                                                                                                                                                                                                                
  JSR -$6c(a6)  ;Menuhelp
  TST.l d0
  BEQ gh1
BRA gh3

Even
toupper:
 'loop:
    MOVE.b (a1)+,d1
    BEQ 'ready
      CMP.b #"a",d1
      BCS 'skip
        CMP.b #"z",-1(a1)
        BHI 'skip
          ANDI.b #255-32,-1(a1)
     'skip:
  BRA 'loop
 'ready
RTS

findid:
  MOVEM.l d1/a1/a2/a6,-(a7)
  MOVE.l surface(pc),a0
  CMP.l #0,a0
  BEQ nowin
  LEA winx,a2
  MOVE.l d0,a1
  JSR toupper
  MOVE.l d0,a1
  MOVE.l _wizardBase(pc),a6                                                                                                                                                                                                                                
  JSR -$ae(a6);Object id
  MOVE.l a2,a0
  MOVEM.l (a7)+,d1/a1/a2/a6
  TST.w d0
  BEQ err5
  MOVE.l (a0),d0
  ;BEQ err5
RTS

._parsepar:
 MOVE.w -(a2),d0
 CMP.b #1,d0
 BNE  'l1
 MOVE.w -(a2),d1
 EXT.l d1
'l1: CMP.b #2,d0
 BNE  'l2
 MOVE.w -(a2),d1
 EXT.l d1
'l2: CMP.b #3,d0
 BNE 'l3
 MOVE.l -(a2),d1
'l3: CMP.w #4,d0
 BNE 'l4
 MOVE.l -(a2),d1
 CLR.w d1
 SWAP d1
 EXT.l d1
'l4: CMP.w #7,d0
 BNE 'l5
 MOVE.l -(a2),d1
 MOVE.l -(a2),d1
'l5: CMP.w #5,d0
 BNE 'l6
 MOVE.l -(a2),d1
'l6:RTS

._wzinput2:
  CMP.l #4000,d0                ; string or id provided?
  BCS 'l1
    JSR findid
 'l1:
  TST.l (a1)
  BEQ err3                      ; no surface or window

  ALibJsr WZGadAddr             ;itself
  MOVE.l d0,a0
  TST.l d0
  BEQ 'gsout
    MOVE.l _intuiBase,a6                                                                                                                                                                                                                                   
    LEA vartemp,a1
    LEA getatttags,a2
    MOVEM.l a0/a1,-(a7)
   'loop
      MOVE.l (a2)+,d0
      BEQ 'no
      JSR -654(a6)
      TST.l d0
      BNE 'ok
        MOVEM.l (a7),a0/a1
    BRA 'loop
 'ok
  LEA vartemp,a0
  MOVE.l (a0),d0
  MOVEM.l (a7)+,a0/a1
  RTS

 'no
  MOVEM.l (a7)+,a0/a1
 'gsout
BRA err4


._wzgadgetset
 CMP.l #4000,d0
 BCS 'l1
 JSR findid
'l1: TST.l (a1)
  BEQ err3
  MOVEM.l d2/d3/a3,-(a7)
  MOVE.l d0,d2
  BEQ gsexit
  MOVE.l usertags(pc),a6
gs4: TST.l (a6)
  BEQ gs3
  ADDQ #8,a6
  BRA gs4
gs3: CMP.b #0,d7
  BLE gs11
  JSR _parsepar
  LEA arg0,a0
 MOVE.l #arg1-arg0,d0:ASR.l #3,d0
gs2:  MOVE.l (a0)+,(a6)+
  MOVE.l d1,(a6)+
  ADDQ #4,a0
  SUBQ #1,d0
  BNE gs2

  CMP.b #1,d7
  BLE gs11
  JSR _parsepar
  LEA arg1,a0
 MOVE.l #arg2-arg1,d0:ASR.l #3,d0
gs22:  MOVE.l (a0)+,(a6)+
  MOVE.l d1,(a6)+
  ADDQ #4,a0
  SUBQ #1,d0
  BNE gs22
  CMP.b #2,d7
  BLE gs11
   JSR _parsepar
  LEA arg2,a0
 MOVE.l #arg3-arg2,d0:ASR.l #3,d0
gs222:  MOVE.l (a0)+,(a6)+
  MOVE.l d1,(a6)+
  ADDQ #4,a0
  SUBQ #1,d0
  BNE gs222
gs11: CLR.l (a6)
gs1:
  MOVE.l usertags(pc),a3
  MOVE.l _intuiBase(pc),a6                                                                                                                                                                                                                                 
;  ALibJsr IntuitionBase
 MOVE.l (a1),a1
 SUBA.l a2,a2
 MOVE.l d2,d0
 ALibJsr WZGadAddr         ;itself
 MOVE.l d0,a0
 JSR -660(a6)
 CLR.l (a3)
gsexit: MOVEM.l (a7)+,d2/d3/a3
 RTS
result: Dc.l 0

._wzobjectid
  MOVE.l _wizardBase(pc),a6                                                                                                                                                                                                                                
  MOVE.l d0,a1
  MOVE.l surface(pc),a0
  CMP.l #0,a0
  BEQ nowin

  MOVE.l a2,-(a7)
  LEA result,a2
  JSR -174(a6)             ;object id
  MOVE.l result,d0
  MOVE.l (a7)+,a2
  SUB.l -(a2),a3
  SUBQ.l #1,a3
RTS

._wzgadgetname
  ALibJsr EventWindow
  LSL.w #winstructsize,d0
  ADD.w d0,a1
  MOVE.l $10(a1),a0
  BSR _wzgadgethit
  ALibJsr WZGadAddr       ;itself
  MOVE.l d0,a1
  MOVE.l _wizardBase(pc),a6                                                                                                                                                                                                                                
  JSR -$d2(a6)            ;gadgetname
  TST.l d0
  BEQ gh1
  BRA gh3

._wzmenuname
  ALibJsr EventWindow
  LSL.w #winstructsize,d0
  ADD.w d0,a1
  MOVE.l $10(a1),a0
  MOVEQ #0,d0
  ALibJsr EventCode
  MOVE.l _wizardBase(pc),a6                                                                                                                                                                                                                                
  JSR -$d8(a6)  ;Menuname
  TST.l d0
  BEQ gh1
  BRA gh3

_wzlistaddtree
  MOVEQ #0,d2
._wzlist2addtree
  MOVEQ #-1,d3
_wzlist3addtree
  MOVEQ #0,d4
_wzlist4addtree
  MOVEQ #0,d5
_wzlist5addtree
  MOVE.l d5,treedata
  MOVE.l d4,childstore
  MOVEM.l d2-d6,-(a7)
  MOVE.l d2,d6              ;parent
  MOVE.l d3,d5
  MOVE.l d0,d2
  MOVE.l $4,a6
  MOVE.l d1,d3
  MOVE.l d3,d0
  MOVE.l d3,a0
  MOVEQ #12,d0
 'l2:
    TST.b (a0)+
    BEQ 'l1
      ADDQ #1,d0
  BRA 'l2
 'l1:

  MOVE.l poolheader(pc),a0
  MOVEQ #0,d1
  MOVE.l d0,-(a7)
  JSR -$2c4(a6)
  MOVE.l (a7)+,d1
  TST.l d0
  BEQ 'nomem
  MOVE.l d0,a0
 MOVE.l d1,(a0)+
 MOVE.l a0,d0
 MOVE.l d3,a1
'c1: MOVE.b (a1)+,(a0)+
 BNE 'c1
 CLR.b (a0)+
 MOVE.l treedata,(a0)
 ;ALibJsr $cf01

 MOVE.l d0,d3
 MOVEQ #$58,d0
 MOVEQ #0,d1
 MOVE.l poolheader(pc),a0
 JSR -$2c4(a6)
 ;ALibJsr $c002
 MOVE.l d0,a0
 MOVE.l d0,d4
 SUBA.l a1,a1
 MOVE.l _Tags,a1
 MOVE.l #WNODEA_Flags,(a1)
 MOVE.l #wnf_tree+#wnf_automatic,4(a1)
 CLR .l 8(a1)
 MOVEQ #1,d0
 MOVE.l _wizardBase(pc),a6
 JSR -$b4(a6)                    ;init Node
 MOVE.l _Tags,a1
 MOVE.l usertags,a0
'lc MOVE.l (a0)+,d0                   ;copy tag data
 BEQ 'lc2
 MOVE.l d0,(a1)+
 MOVE.l (a0)+,(a1)+
 BRA 'lc
'lc2
 MOVE.l #WENTRYA_Type,(a1)+
 MOVE.l #WNE_TREE,(a1)+
 MOVE.l #WENTRYA_TreeString,(a1)+
 MOVE.l d3,(a1)+
 TST.l d6
 BEQ 'l1a
 MOVE.l #WENTRYA_TreeParentNode,(a1)+
 MOVE.l d6,(a1)+
'l1a MOVE.l childstore,d0
 BEQ 'l2a
 MOVE.l #WENTRYA_TreeChilds,(a1)+
 MOVE.l childstore,(a1)+
'l2a
 CLR.l (a1)+
MOVE.l _Tags,a1
 MOVEQ #0,d0
 MOVE.l d4,a0
 JSR -$ba(a6)                   ;init node entry a
 MOVE.l d4,a1
 MOVE.l d2,a0
 TST.l (a0)
 BNE 'l10
 MOVE.l a0,(a0)
 ADDQ.l #4,(a0)
 MOVE.l a0,8(a0)
 CLR.l 4(a0)
'l10: MOVE.l a0,a2
 TST.l d5:BEQ 'l100
 MOVE.l (a2),a2
 CMP.l #-1,d5
 BEQ '_sort
 SUBQ.l #1,d5
'l200:TST.l d5:BEQ 'l100
 MOVE.l (a2),d1
 BEQ 'l100
 MOVE.l d1,a2
 SUBQ.l #1,d5
 BRA 'l200
'l100:MOVE.l $4,a6
 JSR _Insert(a6)
 MOVE.l usertags(pc),a0
 CLR.l $0(a0)
 MOVE.l d4,d0
'nomem: MOVEM.l (a7)+,d2-d6
 RTS
'_sort
'l2c
 MOVE.l d4,a3
 MOVE.l $3c(a3),a3
 MOVE.l (a2),d1
 BEQ 'l100
 MOVE.l $3c(a2),a6
'l10a: TST.b (a6)
 BEQ 'l100
 TST.b (a3)
 BEQ 'l100
 CMPM.b (a6)+,(a3)+
 BEQ 'l10a
 BLE 'back
 MOVE.l d1,a2
 BRA 'l2c
'back
 MOVE.l 4(a2),a2
 BRA 'l100


._wzlistadd
  MOVEQ #-1,d2
_wzlist2add_
  MOVEM.l d2-d6,-(a7)
  MOVE.l d3,d4
  MOVE.l d2,d5
  MOVE.l d0,d2
  MOVE.l $4,a6
  MOVE.l d1,d3
  MOVE.l d3,d0
  MOVE.l d3,a0
  MOVEQ #12,d0
 'l2:TST.b (a0)+
 BEQ 'l1
 ADDQ #1,d0
 BRA 'l2
 'l1:
 MOVE.l poolheader(pc),a0
 MOVEQ #0,d1
 MOVE.l d0,-(a7)
 JSR -$2c4(a6)
 MOVE.l (a7)+,d1
 TST.l d0
 BEQ 'nomem
 MOVE.l d0,a0
 MOVE.l d1,(a0)+
 MOVE.l a0,d0
 MOVE.l d3,a1
'c1: MOVE.b (a1)+,(a0)+
 BNE 'c1
 CLR.b (a0)+
 MOVE.l d4,(a0)
 ;ALibJsr $cf01

 MOVE.l d0,d3
 MOVEQ #$58,d0
 MOVEQ #0,d1
 MOVE.l poolheader(pc),a0
 JSR -$2c4(a6)
 ;ALibJsr $c002
 MOVE.l d0,a0
 MOVE.l d0,d4
 SUBA.l a1,a1
 MOVEQ #1,d0
 MOVE.l _wizardBase(pc),a6
 JSR -$b4(a6)                    ;init Node
 MOVE.l _Tags,a1
 MOVE.l #WENTRYA_Type,(a1)
 MOVE.l #WNE_TEXT,4(a1)
 MOVE.l #WENTRYA_TextString,8(a1)
 MOVE.l d3,$c(a1)
 ;CLR.l $10(a1)
 MOVEQ #0,d0
 MOVE.l d4,a0
 JSR -$ba(a6)                   ;init node entry a
 MOVE.l d4,a1
 MOVE.l d2,a0
 TST.l (a0)
 BNE 'l10
 MOVE.l a0,(a0)
 ADDQ.l #4,(a0)
 MOVE.l a0,8(a0)
 CLR.l 4(a0)
'l10: MOVE.l a0,a2
 TST.l d5
 BEQ 'l100
 MOVE.l (a2),a2
 CMP.l #-1,d5
 BEQ '_sort
 SUBQ.l #1,d5
'l200:TST.l d5:BEQ 'l100
 MOVE.l (a2),d1
 BEQ 'l100
 MOVE.l d1,a2
 SUBQ.l #1,d5
 BRA 'l200
'l100:MOVE.l $4,a6
 JSR _Insert(a6)
 MOVE.l usertags(pc),a0
 CLR.l (a0)
'nomem: MOVEM.l (a7)+,d2-d6
 RTS
'_sort
'l2c
 MOVE.l d4,a3
 MOVE.l $3c(a3),a3
 MOVE.l (a2),d1
 BEQ 'l100
 MOVE.l $3c(a2),a6
'l10a: TST.b (a6)
 BEQ 'l100
 TST.b (a3)
 BEQ 'l100
 CMPM.b (a6)+,(a3)+
 BEQ 'l10a
 BLE 'back
 MOVE.l d1,a2
 BRA 'l2c
'back
 MOVE.l 4(a2),a2
 BRA 'l100
._wzlistremove
 MOVEM.l a2/d2,-(a7)
 MOVE.l d0,a2
 MOVE.l (a2),a2
 MOVE.l a2,d1
 BEQ 'l1a
'l3:MOVE.l (a2),d1
 BEQ 'l1
 MOVE.l d1,-(a7)
 JSR removeitem
 MOVE.l (a7)+,d1
 MOVE.l d1,a2
 BRA 'l3
'l1a
 MOVE.l d0,a2
 MOVE.l a2,(a2)
 ADDQ.l #4,(a2)
 MOVE.l a2,8(a2)
 CLR.l 4(a2)
'l10:
'l1
 MOVEM.l (a7)+,a2/d2
 RTS

removeitem:
 MOVE.l a2,a1
 MOVE.l $4,a6
 JSR _Remove(a6)
 MOVE.l $3c(a2),d0
 TST.l d0
 BEQ 'l2
   MOVE.l d0,a1
   MOVE.l poolheader(pc),a0
   MOVE.l -(a1),d0
   JSR -$2ca(a6);freep
   ;ALibJsr $cf02
'l2
   MOVE.l a2,a1
   MOVEQ #$58,d0
   MOVE.l poolheader(pc),a0
   JSR -$2ca(a6);freep
   ;ALibJsr $c003
RTS

._wzlistremove2:
 MOVEM.l d2/a2,-(a7)
 MOVE.l d0,a2
 MOVE.l (a2),a2
'l2:MOVE.l (a2),d0
 BEQ 'l3
 TST.l d1
 BEQ 'l1
 SUBQ.l #1,d1
 MOVE.l d0,a2
 BRA 'l2
'l1:JSR removeitem
'l3:MOVEM.l (a7)+,d2/a2
RTS

._wzliststring
  MOVEQ #0,d2
_wzliststring2: 
  JSR listfind
  TST.l d0
  BEQ 'l3
  BTST #0,d2
  BNE 'l1
  TST.b 9(a0)
  BEQ 'l3
 'l1:MOVE.l $3c(a0),d0
    BTST #1,d2
    BEQ 'l4
    CLR.b 9(a0)
 'l4
    BRA gh3
 'l3: MOVEQ #0,d0
RTS

._wzlistdata:
  JSR listfind
  TST.l d0
  BEQ 'l3
    TST.w d2
    BNE 'l1
      TST.b 9(a0)
      BEQ 'l3
   'l1:
    MOVE.l $3c(a0),a0
   'l5:
      TST.b (a0)+
    BNE 'l5
    MOVE.l 1(a0),d0
    RTS
 'l3:
  MOVEQ #0,d0
RTS

listfind:
  MOVE.l d0,a0
  MOVE.l (a0),d0
  BEQ 'l1
    MOVE.l d0,a0
   'l2:
      MOVE.l (a0),d0
      BEQ 'l3
        TST.l d1
        BEQ 'l1
          SUBQ.l #1,d1
          MOVE.l d0,a0
    BRA 'l2
   'l3:
    MOVEQ #0,d0
 'l1:
RTS

._wzlistaddr
  JSR listfind
  MOVE.l a0,d0
RTS

._wzenable
  MOVEM.l d2/d3/a3,-(a7)
  MOVE.l usertags(pc),a3
  MOVE.l #GA_Disabled,(a3)
  MOVE.l #0,4(a3)
  CLR.l 8(a3)
  MOVE.l d0,d2
BRA gs1

._wzdisable
  MOVEM.l d2/d3/a3,-(a7)
  MOVE.l usertags(pc),a3
  MOVE.l #GA_Disabled,(a3)
  MOVE.l #1,4(a3)
  CLR.l 8(a3)
  MOVE.l d0,d2
BRA gs1

._wzlistmaxitems
  MOVE.l d0,a0
  MOVEQ #0,d0
  MOVE.l (a0),d1
  BEQ 'l1
    MOVE.l d1,a0
   'l2:
      MOVE.l (a0),d1
      BEQ 'l1
        ADDQ #1,d0
        MOVE.l (a0),a0
    BRA 'l2
 'l1:
RTS

._wzoffmenu
 MOVE.l d0,d1
 ALibJsr WZWindowAddr       ;itself
 MOVE.l d0,a0
 MOVE.l a0,-(a7)
 MOVE.l _intuiBase(pc),a6
; ALibJsr IntuitionBase
 MOVE.l d1,d0
 JSR findid
 MOVE.l (a7)+,a0
 TST.l d0
 BEQ 'exit
 JSR _OffMenu(a6)
'exit
RTS

._wzonmenu
 MOVE.l d0,d1
 ALibJsr WZWindowAddr       ;itself
 MOVE.l d0,a0
 MOVE.l a0,-(a7)
 MOVE.l _intuiBase(pc),a6
 ; LibJsr IntuitionBase
 MOVE.l d1,d0
 JSR findid
 MOVE.l (a7)+,a0
 TST.l d0
 BEQ 'exit
 JSR _OnMenu(a6)
'exit
RTS

_wzmenuset
 MOVE.l d0,a1
 ALibJsr WZWindowAddr      ;itself
 MOVE.l d0,a0
 MOVE.l a0,-(a7)
 MOVE.l _intuiBase(pc),a6
; ALibJsr IntuitionBase
 MOVE.l a1,d0
 JSR findid
 MOVE.l (a7)+,a0
 TST.l d0
 BEQ 'l1
 MOVE.l $1c(a0),a0
 MOVE.l d1,-(a7)
 JSR _ItemAddress(a6)
 MOVE.l (a7)+,d1
 TST.l d0
 BEQ 'l1
  MOVE.l d0,a0
  BCLR #0,$c(a0)
  TST.w d1
  BEQ 'l1
   BSET #0,$c(a0)
 'l1:
RTS

_wzmenuget
  MOVE.l d0,d1
  ALibJsr WZWindowAddr      ;itself
  MOVE.l d0,a0
  MOVE.l a0,-(a7)
   ;ALibJsr _intuiBase
  MOVE.l _intuiBase,A6
  MOVE.l d1,d0
  JSR findid
  TST.l d0
  BEQ 'l1
  MOVE.l (a7)+,a0
  MOVE.l $1c(a0),a0
  JSR _ItemAddress(a6)
  BEQ 'l1
   MOVE.l d0,a0
   MOVEQ #0,d0
   BTST #0,$c(a0)
   SNE d0
   EXT d0
 'l1
RTS

_wzdoubleclick:
 MOVE.l doublenum,d0
 CLR.l doublenum
RTS

ALibJsr SMouseY  ;important must stay in

vartemp: Dc.l 0

;*************************************** error handlers ********************************
errsurface:    MOVE.l #errnosurface,d0 : TRAP #0 : MOVEQ #0,d0 : RTS
error:         MOVE.l #errtextwindow,d0 : TRAP #0 : MOVEQ #0,d0 : RTS
error2:        MOVE.l #err2,d0 : TRAP #0 : RTS
err4:          MOVE.l #err4text,d0 : TRAP #0 : MOVEQ #0,d0 : RTS
alreadyloaded: MOVE.l #alreadytext,d0 : TRAP #0 : MOVEQ #0,d0 : RTS
err5:          MOVE.l #err5t,d0 : TRAP #0 : MOVEQ #0,d0 : RTS
err3:          MOVE.l #err3text,d0 : TRAP #0 : ADDQ #4,a7 : MOVEQ #0,d0 : RTS
nowin:         MOVE.l #err3text,d0 : TRAP #0 : MOVEQ #0,d0 : RTS

errnosurface:   Dc.b "Could not open surface",0,0
alreadytext:    Dc.b "GUI file already loaded",0
errtextwindow:  Dc.b "Can t open Window (no win number 0 allow)",0
err2:           Dc.b "Error to many Gadgets",0
err4text:       Dc.b "Gadget not found",0,0
err5t:          Dc.b "ID for Name not found",0
err3text:       Dc.b "No window open or surface data Wrong",0,0

; =======================================================================================
.errorcheckings:

_checklibswz:
  MOVE.l _wizardBase,D0 : TST.l d0 : BEQ missinglibwzl
  MOVE.l _gadtoolsBase,D0 : TST.l d0 : BEQ missinglibgdt
  MOVE.l _labelBase,D0 : TST.l d0 : BEQ missinglibloc
RTS

_checkppclib:
  MOVE.l _powerpcbase,D0 : TST.l d0 : BEQ missinglibppc
RTS

missinglibppc:  MOVE.l #missingppclib,d0 : TRAP #0:MOVEQ #0,d0
missinglibgdt:  MOVE.l #missinggdtlib,d0: TRAP #0:MOVEQ #0,d0
missinglibwzl:  MOVE.l #missingwzlib,d0 : TRAP #0:MOVEQ #0,d0
missinglibloc:  MOVE.l #missingloclib,d0 : TRAP #0:MOVEQ #0,d0

missingppclib:  Dc.b "powerpc.library not found",0
missinggdtlib:  Dc.b "gadtools.library not found",0,0
missingwzlib:   Dc.b "wizard.library not found",0,0
missingloclib:  Dc.b "locale.library not found",0,0
