; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "riZonejoyLib.obj"
; CreateIcon      = 0
; Residents       = "libnums.res,libmacs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max Window      = 20
; Max BlitzFont   = 4
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;#rizonejoylib=64

!libheader {#rizonejoylib,init,0,finit,0}

!astatement
!args
!libs
!subs {_ZoneInit1,0,0}
!args {#long}
!libs
!subs {_ZoneInit2,0,0}
!args {#long,#long}
!libs
!subs {_ZoneInit,0,0}
!name {"ZoneInit","[zone_num#]|[#start_num,#end_num] - intialize zones"}

!acommand {#byte}
!args {#long,#long,#long,#long}
!libs
!subs {_SetZone2,0,0}
!args {#long,#long,#long,#long,#long}
!libs
!subs {_SetZone,0,0}
!name {"SetZone","num,x1,y1[,x2,y2]|[,radius]"}

!afunction {#word}
!args {#word,#word}
!libs
!subs {_ZoneTest,0,0}
!name {"Zone","(x,y)"}

!afunction {#long}
!args {#long,#word,#word}
!libs
!subs {_TestZoneRange2,0,0}
!args {#long,#long,#word,#word}
!libs
!subs {_TestZoneRange,0,0}
!name {"ZoneTest","(start_num[,end_num],x,y)"}

!afunction {#long}
!args
!libs
!subs {_ZoneTable,0,0}
!name {"ZoneTable","- returns address of the current zone table"}

!afunction {#byte}
!args {#byte}
!libs
!subs {_jfire,0,0}
!name {"JFire","(port)"}

!afunction {#byte}
!args {#byte}
!libs
!subs {_jvert,0,0}
!name {"JVert","(port)"}

!afunction {#byte}
!args {#byte}
!libs
!subs {_jhoriz,0,0}
!name {"JHoriz","(port)"}

!afunction {#byte}
!args
!libs
!subs {_allfire,0,0}
!args {#byte}
!libs
!subs {_allfire2,0,0}
!name {"AllFire","([joybits])"}

!afunction {#long}
!args
!libs
!subs {_ZoneTableSize,0,0}
!name {"ZoneTableSize","- returns size of the current zone table"}

!afunction {#byte}
!args {#long,#long}
!libs
!subs {_NewZoneTable,0,0}
!name {"NewZoneTable","table#,num_zones"}

!acommand {#byte}
!args {#long}
!libs
!subs {_UseZoneTable,0,0}
!name {"UseZoneTable"," - select a zone table for use"}

!afunction {#byte}
!args {#long}
!libs
!subs {_FreeZoneTable,0,0}
!name {"FreeZoneTable","table#"}

!afunction {#byte}
!args
!libs
!subs {_zonetablenumber,0,0}
!name {"ZoneTableNumber","- returns the number of the current zone table"}

finit:!nullsub{_libfinit,0,0}
init: !nullsub{_Initmem,0,0}

!libfin

._libfinit:
  LEA       zonetablelist(pc),a0
  MOVEQ.l   #15,d7
'loop:
  TST.l     (a0)
  BEQ       'next_item
  MOVE.l    (a0),a1
  BSR       _free_mem
'next_item:
  ADDQ.l    #4,a0
  DBRA      d7,'loop
  RTS


;Inputs: a1=memory block to free
;       (a1).l=number of zones in block (size=num*8+4)
._free_mem:                     ; De-allocate zone memory
  MOVEM.l   d0-d1/a0-a1,-(a7)
  MOVE.l    #0,a0
  MOVE.l    (a1),d0
  ASL.l     #3,d0
  ADDQ.l    #4,d0
  MOVEQ.l   #0,d2
  MOVE.l    4,a6
  JSR       -210(a6)
  MOVEM.l   (a7)+,d0-d1/a0-a1
  RTS

;STARTUP routine which allocates memory for zonetable 0
._Initmem:                      ; allocate memory for zone table
  MOVE.l    #0,_zonetable
  MOVE.l    #0,zonetablelist
  MOVE.l    #2052,d0
  MOVEQ.l   #%1,d1             ; ANY memory please!
  MOVEQ.l   #0,d2
  MOVE.l    4,a6
  JSR       -198(a6)

  TST.l     d0
  BNE       'ok
  RTS
'ok:
  MOVE.l    d0,_zonetable
  MOVE.l    d0,zonetablelist
  MOVE.l    d0,a0
  MOVE.l    #256,(a0)

  BNE       _ZoneInit1
  RTS

._NewZoneTable:
  TST.l     d0
  BEQ       _return0
  CMPI.l    #16,d0
  BPL       _return0
  CMPI.l    #2,d1
  BMI       _return0
  CMPI.l    #65536,d1               ; max number of zones!
  BPL       _return0

  LEA       zonetablelist(pc),a0
  ASL.w     #2,d0
  ADD.l     d0,a0
  TST.l     (a0)
  BEQ       'oka
  MOVE.l    (a0),a1
  BSR       _free_mem
'oka:
  MOVE.l    d1,d7
  ASL.l     #3,d1
  ADD.l     #4,d1
  MOVE.l    d1,d0
  MOVE.l    #%1,d1
  MOVEQ.l   #0,d2

  MOVE.l    a0,-(a7)
  MOVE.l    4,a6
  JSR       -198(a6)            ; reserve the mem!

  MOVE.l    (a7)+,a0
  TST.l     d0
  BEQ       _return0
  MOVE.l    d0,(a0)
  MOVE.l    d0,a0
  MOVE.l    d7,(a0)

  BSR       _ZoneInit1

  MOVEQ.l   #-1,d0
  RTS


._UseZoneTable:
  LEA       zonetablelist(pc),a0
  CMPI.l    #16,d0
  BPL       _return0
  ASL.w     #2,d0
  ADD.l     d0,a0
  TST.l     (a0)
  BEQ       _return0
  MOVE.l    (a0),d0
  MOVE.l    d0,_zonetable

  MOVEQ.l   #-1,d0
  RTS

._FreeZoneTable:
  LEA       zonetablelist(pc),a0
  TST.l     d0
  BEQ       _return0
  CMPI.l    #16,d0
  BPL       _return0
  ASL.w     #2,d0
  ADD.l     d0,a0
  TST.l     (a0)
  BEQ       _return0
  MOVE.l    (a0),a1
  BSR       _free_mem

  LEA       zonetablelist(pc),a0
  MOVE.l    (a0),_zonetable
  MOVEQ.l   #-1,d0
  RTS


_nozones                        ; abort zone testing because AllocMem failed!
  MOVEQ.l   #-1,d0
  RTS

._ZoneInit2:                    ; Initialise 1 zone only
  TST.l     _zonetable
  BEQ       _nozones
  MOVE.l    _zonetable,a0
  MOVE.l    (a0)+,d7
  SUBQ.l    #1,d7
  CMP.l     d0,d7
  BMI       _nozones

  ASL.w     #3,d0
  ADD.l     d0,a0
  MOVE.l    #-1,(a0)+
  MOVE.l    #0,(a1)+
  RTS

._ZoneInit1:                    ; Initialise all zones
  MOVE.l    _zonetable,a0
  MOVE.l    (a0),d1
  MOVEQ.l   #0,d0
_ZoneInit:                     ; Initialise a range of zones (d0 to d1)
  TST.l     _zonetable
  BEQ       _nozones
  MOVE.l    _zonetable,a0
  MOVE.l    (a0)+,d7
  SUBQ.l    #1,d7
  CMP.l     d0,d7
  BMI       _nozones
  CMP.l     d1,d7
  BMI       _nozones
  CMP.l     d0,d1
  BMI       _nozones
  ADDQ.w    #1,d1

  MOVE.l    d0,d2
  ASL.w     #3,d2
  ADD.l     d2,a0

'loop:
  MOVE.l    #-1,(a0)+
  MOVE.l    #-1,(a0)+

  ADDQ.w    #1,d0
  CMP.w     d0,d1
  BNE       'loop
'exit
  RTS

_return0:
  MOVEQ.l   #0,d0
  RTS

_SetZone2:
  MULS.w    d3,d3
  MOVE.w    #-1,d4
._SetZone:
  TST.l     _zonetable
  BEQ       _nozones

  MOVE.l    _zonetable,a0                       ; get zone table
  MOVE.l    (a0)+,d7
  SUBQ.l    #1,d7
  CMP.l     d0,d7                               ; mask out zone number
  BMI       _return0

  ASL.w     #3,d0                               ; multiply by 8
  ADD.l     d0,a0                               ; add zone number offset to address

  MOVE.w    d1,(a0)+                            ; x1
  MOVE.w    d2,(a0)+                            ; y1
  MOVE.w    d3,(a0)+                            ; x2
  MOVE.w    d4,(a0)+                            ; y2

  MOVEQ.l   #-1,d0
  RTS

._ZoneTest:
  MOVE.l  d1,d3
  MOVE.l  d0,d2

  MOVE.l  _zonetable,a0
  MOVE.l  (a0),d1
  SUBQ.l  #1,d1
  MOVEQ.l #0,d0
  BRA     _TestZoneRange

_TestZoneRange2: ;(3 parameters)
  MOVE.l    d2,d3
  MOVE.l    d1,d2
  MOVE.l    d0,d1
_TestZoneRange:
  TST.l     _zonetable
  BEQ       _nozones

  MOVE.l    _zonetable,a0                       ; get zone table
  MOVE.l    (a0)+,d7
  SUBQ.l    #1,d7
  CMP.l     d0,d7
  BPL       'ok1
  MOVE.l    d7,d0
'ok1:
  CMP.l     d1,d7
  BMI       _nozones

  CMP.l     d0,d1
  BMI       _nozones

  ADDQ.w    #1,d1
  MOVE.w    d1,endzone
  MOVEQ.l   #0,d4
  MOVE.b    d0,d4
  ASL.w     #3,d0
  ADD.l     d0,a0
  MOVE.l    d4,d0                               ; d0=current zone test
'testloop:
  MOVE.w    (a0)+,d4
  MOVE.w    (a0)+,d5
  MOVE.w    (a0)+,d6
  MOVE.w    (a0)+,d7
  TST.w     d4
  BMI       'not_set

  CMPI.w    #-1,d7
  BEQ       'circular

  CMP.w     d2,d4                               ; x and x1
  BGT       'not_set
  CMP.w     d3,d5                               ; y and y1
  BGT       'not_set
  CMP.w     d2,d6                               ; x and x2
  BMI       'not_set
  CMP.w     d3,d7                               ; y and y2
  BMI       'not_set

'got_a_zone
  RTS
'not_set
  ADDQ.w    #1,d0
  CMP.w     endzone,d0
  BNE       'testloop
  MOVEQ.l   #-1,d0
  RTS

'circular:                      ; circular zone test for ZONETEST(s[,e],x,y)
  MOVEM.w   d2-d3,-(a7)

  SUB.w     d4,d2
  SUB.w     d5,d3
  MULS.w    d2,d2
  MULS.w    d3,d3

  ANDI.l    #$ffff,d6
  ADD.l     d2,d3

  CMP.l     d3,d6
  BPL       'got_circular
  MOVEM.w   (a7)+,d2-d3
  BRA       'not_set
'got_circular:
  MOVEM.w   (a7)+,d2-d3
  RTS

._ZoneTable:
  MOVE.l    _zonetable,d0
  BEQ       _nozones
  RTS

._ZoneTableSize:
  TST.l     _zonetable
  BNE       'ok
  MOVE.l    #0,d0
  RTS
'ok:
  MOVE.l    _zonetable,a0
  MOVE.l    (a0),d0
  RTS

._zonetablenumber:
  TST.l     _zonetable
  BNE       'ok
  MOVE.l    #-1,d0
  RTS
'ok:
  MOVE.l    _zonetable,d0
  LEA       zonetablelist(pc),a1
  MOVEQ.l   #15,d7
'loop:
  MOVE.l    (a1)+,d1
  CMP.l     d0,d1
  BEQ       'gotit
  DBRA      d7,'loop
  MOVEQ.l   #-1,d0
  RTS
'gotit:
  NOT.b     d7
  ANDI.l    #$f,d7
  MOVE.l    d7,d0
  RTS

endzone:        Dc.w  1
_zonetable:     Dc.l  0
zonetablelist:  Dcb.l 16,0

;========================================================

._allfire:
  MOVE.b #%1111,d0
_allfire2:
  MOVE.b d0,d1
  BTST #0,d1
  BEQ 'no2
  BCLR #0,d1

  BTST #7,$bfe001
  BNE  'no2

  BSET #0,d1
'no2:
  BTST #1,d1
  BEQ 'no3
  BCLR #1,d1

  BTST #6,$bfe001
  BNE  'no3

  BSET #1,d1
'no3:
  BTST #2,d1
  BEQ 'no4
  BCLR #2,d1

  MOVE.b $bfd000,d0
  NOT.b  d0
  BTST   #2,d0
  BEQ    'no4

  BSET   #2,d1
'no4:
  BTST #3,d1
  BEQ 'none
  BCLR #3,d1

  MOVE.b $bfd000,d0
  NOT.b d0
  BTST #0,d0
  BEQ 'none

  BSET #3,d1
'none:
  MOVEQ #0,d0
  MOVE.b d1,d0
  RTS

._jfire:
  CMP.b #1,d0
  BEQ fplayer1
  CMP.b #2,d0
  BEQ fplayer2
  CMP.b #3,d0
  BEQ fplayer3
  CMP.b #4,d0
  BEQ fplayer4
finishfire:
  CLR.b d0
  RTS
fplayer1:
  BTST #7,$bfe001
  BNE finishfire
  MOVE.b #-1,d0
  RTS
fplayer2:
  BTST #6,$bfe001
  BNE finishfire
  MOVE.b #-1,d0
  RTS
fplayer3:
  MOVE.b $bfd000,d0
  NOT.b d0
  BTST #2,d0
  BEQ finishfire
  MOVE.b #-1,d0
  RTS
fplayer4:
  MOVE.b $bfd000,d0
  NOT.b d0
  BTST #0,d0
  BEQ finishfire
  MOVE.b #-1,d0
  RTS

._jvert:
  CMP.b #1,d0
  BEQ vplayer1
  CMP.b #2,d0
  BEQ vplayer2
  CMP.b #3,d0
  BEQ vplayer3
  CMP.b #4,d0
  BEQ vplayer4
finishvert:
  MOVE.b #0,d0
  RTS
vplayer1:
  MOVE.l  #1,d0
  ALibJsr Joyy,0
  RTS
vplayer2:
  MOVE.l  #0,d0
  ALibJsr Joyy,0
  RTS
vplayer3:
  MOVE.b $bfe101,d0
  NOT.b d0
  BTST #0,d0
  BEQ vplayer3down
  MOVE.b #-1,d0
  RTS
vplayer3down:
  MOVE.b $bfe101,d0
  NOT.b d0
  BTST #1,d0
  BEQ finishvert
  MOVE.b #1,d0
  RTS
vplayer4:
  MOVE.b $bfe101,d0
  NOT.b d0
  BTST #4,d0
  BEQ vplayer4down
  MOVE.b #-1,d0
  RTS
vplayer4down:
  MOVE.b $bfe101,d0
  NOT.b d0
  BTST #5,d0
  BEQ finishvert
  MOVE.b #1,d0
  RTS
._jhoriz:
  CMP.b #1,d0
  BEQ hplayer1
  CMP.b #2,d0
  BEQ hplayer2
  CMP.b #3,d0
  BEQ hplayer3
  CMP.b #4,d0
  BEQ hplayer4
finishhoriz:
  MOVE.b #0,d0
  RTS
hplayer1:
  MOVE.l  #1,d0
  ALibJsr Joyx,0
  RTS
hplayer2:
  MOVE.l  #0,d0
  ALibJsr Joyx,0
  RTS
hplayer3:
  MOVE.b $bfe101,d0
  NOT.b d0
  BTST #2,d0
  BEQ hplayer3right
  MOVE.b #-1,d0
  RTS
hplayer3right:
  MOVE.b $bfe101,d0
  NOT.b d0
  BTST #3,d0
  BEQ finishhoriz
  MOVE.b #1,d0
  RTS
hplayer4:
  MOVE.b $bfe101,d0
  NOT.b d0
  BTST #6,d0
  BEQ hplayer4right
  MOVE.b #-1,d0
  RTS
hplayer4right:
  MOVE.b $bfe101,d0
  NOT.b d0
  BTST #7,d0
  BEQ finishhoriz
  MOVE.b #1,d0
  RTS

version: Dc.b "$VER: Zone/Joy-Library v1.2 (16.6.1994)",0


