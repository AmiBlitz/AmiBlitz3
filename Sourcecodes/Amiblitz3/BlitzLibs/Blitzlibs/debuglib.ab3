; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Blitz3:BlitzLibs/Decompiled/baselibs"
; ExeFile         = "debuglib_new.obj"
; CreateIcon      = 0
; Residents       = "libmacs.res,blitzoffs.res,libjsrs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 19
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 37
; LabelSearch     = "dodeb"
; LabelRemark     = 0
; LabelAll        = 1
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 5
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 5
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 100
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
; disassembled with the help of ADis
; 05.2016 tomsmart1
; 10.05.2016
;  - rebuild with the help of a old source i found
;  - unused code removed 
;  - changed Bernds "CNIF tasktrap" in that way that
;    with #tasktrap = 0 the result lib has none of
;    Bernds 2012 changes
;  - removed unneeded code from Bernd
;  - fixed the number of functions in the syslib header

#tasktrap = 1    ; added by Bernd

_execbase equ 4

;
CNIF #tasktrap=1
  !syslibheader{#debuglib,$d500,$d50b,init,0,finit,0}
CELSE
  !syslibheader{#debuglib,$d500,$d50a,init,0,finit,0}
CEND

  !nullsub{donewmode,0,0}       ;$d500

  !nullsub{dostop,0,0}          ;$d501

  !nullsub{dosethandler,0,0}    ;$d502

  !nullsub{dodetoke,0,0}        ;$d503

  !nullsub{doevaluate,0,0}      ;$d504

  !nullsub{doexecute,0,0}       ;$d505

  !nullsub{doquit,0,0}          ;$d506

  !nullsub{dofindoff,0,0}       ;$d507

  !nullsub{doskip,0,0}          ;$d508

  !nullsub{do_lab_d3a,0,0}      ;$d509

  CNIF #tasktrap=1
    !nullsub{dochangetrap,0,0}  ;$d50a ; added by Bernd 2012
  CEND

 init
  !nullsub{codeinit,0,0}

 finit
  !nullsub{codefinit,0,0}

!libfin


;******************* CODE BELOW *********************


intsoff:      Dc.w 0   ;turn interupts off
oldmode:      Dc.w 0
flags:        Dc.l 0
tokens:       Dc.l 0
supertext:    Dc.l 0
usertext:     Dc.l 0
evaltext:     Dc.l 0
exectext:     Dc.l 0

handler:      Dc.l statehandler

statehandler: Dc.l statehandler_
superhandler: Dc.l superhandler_
userhandler:  Dc.l userhandler_
waithandler:  Dc.l waithandler_
evalhandler:  Dc.l evalhandler_

lab_16e:      Dc.l evalhandler_
lab_172:      Dc.l evalhandler_

procnull:     Dc.l 0,0
procsp:       Dc.l procstack-6
procstack:    Dc.l procnull
              Dc.w 0
              Ds.l 6*32  ;procmax  ;maximum proc nest

intsp:        Dc.l intstack
intstack:     Ds.l 2*16  ;max interupt nest

procstatus:   Dc.l 0


statehandler_
   CMP.w    d0,d0
RTS


superhandler_
BRA doquit


userhandler_
BRA doquit


waithandler_
   CMP.w    d0,d0
RTS


evalhandler_
RTS


.mytrap4  ;start of procedure processing
   ;
   MOVEM.l  a0-a1,-(a7)
   ; new >
   MOVEA.l  procstatus(pc),a0
   TST.w    (a0)
   BEQ      'lab_540
   MOVEM.l  d0-d7/a0-a6,-(a7)
   MOVEQ    #0,d1
   MOVEA.l  lab_172(pc),a0
   JSR      (a0)
   MOVEM.l  (a7)+,d0-d7/a0-a6

  'lab_540
   ; < new end
   MOVEA.l  $a(a7),a0
   ADDQ.l   #8,$a(a7)   ;fix return address

   MOVEA.l  procsp(pc),a1
   CMPA.l   (a1),a0
   BEQ      'skip

   ADDQ.w   #6,a1
   MOVE.l   a1,procsp

   MOVE.l   a0,(a1)+
   CLR.w    (a1)+

   MOVEM.l  (a7)+,a0-a1
 RTE

 'skip
   ADDQ.w   #1,4(a1)
   MOVEM.l  (a7)+,a0-a1
RTE


.mytrap5   ;end of proc processing
   MOVE.l   a0,-(a7)
   ; new >
   MOVEA.l  procstatus(pc),a0
   TST.w    (a0)
   BEQ      'lab_58a
   MOVEM.l  d0-d7/a0-a6,-(a7)
   MOVEQ    #-1,d1
   MOVEA.l  lab_172(pc),a0
   JSR      (a0)
   MOVEM.l  (a7)+,d0-d7/a0-a6

 'lab_58a
   ; < new end
   MOVEA.l  procsp(pc),a0
   SUBQ.w   #1,4(a0)
   BPL      'skip

   SUBQ.l   #6,a0
   MOVE.l   a0,procsp

 'skip
   MOVEA.l  (a7)+,a0
RTE


maxerrtext: Dc.b     "No currently used object!",0 : Even
braerrtext: Dc.b     "Offset out of range",0 : Even
eoptext:    Dc.b     "End of Program",0 : Even


mytrap2  ;trap handler for start of interupt...
;
   MOVEA.l  2(a7),a0
   TST.w    4(a0)
   BMI      'dont
   MOVE.w   intsoff(pc),d0
   BEQ      'ok

 'dont
   MOVE.l   (a0),2(a7)
 RTE

 'ok
   MOVE.l   #'more,2(a7)
 RTE

 'more
   MOVEA.l  intsp(pc),a1

   MOVE.l   sp,(a1)+
   MOVE.l   a0,(a1)+

   MOVE.l   a1,intsp
   ADDQ.w   #6,a0
JMP (a0)


.mytrap3   ;exiting interupt routine...
;
   SUBQ.l   #8,intsp
RTE


.mytrap1  ;new line...              ;store register
   ;
   ;save regs...
   ;
   BTST     #5,(a7)                 ; check if a user trap 32-47 (TRAP 0-15) has been catched
   BNE      'done  ;skip supervisor stuff!
   ;
   ;store info...
   ;
   MOVE.l   2(a7),trappc
   MOVE.w   (a7),trapcc

   MOVEM.l  d0-d7/a0-a6,trapregs
   MOVE.l   usp,a0
   MOVE.l   a0,a7_

   LEA      trapregs(pc),a0
   MOVEA.l  statehandler(pc),a1

   JSR      (a1)
   BNE      touser
   TST.b    flags
   BNE      touser
   ;
   MOVEM.l  a0_(pc),a0-a1

 'done
   ADDQ.l   #8,2(a7)
RTE


.touser
   MOVE.l   #'more,2(a7)
RTE

 'more
   BSR amigamode


.handleflags
   BCLR     #7,flags
   BEQ      'notquit

   MOVEA.l  a5_(pc),a5
   ALibJsr  $c800

 'notquit
   BCLR     #6,flags
   BEQ      'notserr

   MOVEA.l  supertext(pc),a0
   MOVEA.l  superhandler(pc),a1
   JSR      (a1)

 'notserr
   BCLR     #5,flags
   BEQ      'notuerr

   MOVEA.l  usertext(pc),a0
   MOVEA.l  userhandler(pc),a1
   JSR      (a1)

 'notuerr
   BCLR     #4,flags
   BEQ      'noteval
   MOVEM.l  a4_(pc),a4-a5

   MOVEA.l  evaltext(pc),a0
   BSR      evaluate
   MOVEA.l  evalhandler(pc),a1
   JSR      (a1)

 'noteval
   BCLR     #3,flags
   BEQ      'notexec
   MOVEM.l  a4_(pc),a4-a5

   MOVEA.l  exectext(pc),a0
   BSR      execute
   TST.b    (a0)
   BEQ      'noprint
   MOVEA.l  evalhandler(pc),a1
   JSR      (a1)

 'noprint
 'notexec
  ;
   BCLR     #2,flags
   BEQ      'notskip

   MOVEA.l  trappc(pc),a0
   MOVE.w   6(a0),d0
   BEQ      'notskip
   ADDA.w   d0,a0

   LEA      -$a(a0),a0
   MOVE.l   a0,trappc
BRA tofix

 'notskip
   MOVEA.l  waithandler(pc),a0
   JSR      (a0)
   ; > new begin
   MOVE.w   d0,lab_7b8
   ; end
   TST.b    flags
   BNE      handleflags


.tofix                            ;loadregister
   BSR      fixmode

 executestate
   CNIF #tasktrap=1
     MOVEM.l trapregs(pc),d0-d7/a0-a6  ; changed by Bernd 2012
   CELSE
     MOVEM.l trapregs(pc),d0-d7/a0-a7
   CEND
   MOVE.l trappc(pc),-(a7)
   MOVE.w trapcc(pc),-(a7)

   ADDQ.l #8,2(a7)
RTR


.amigamode
   ST       intsoff
   ALibJsr  $c201
   MOVE.w   d0,oldmode
RTS


.fixmode
   ; > new begin
   MOVE.w   lab_7b8(pc),d0
   BNE      'lab_794
   ;< end
   MOVE.w   oldmode(pc),d0
   BEQ      'skip
   BMI      'goblitz
   ALibJsr  $c202
 BRA 'skip

 'goblitz
   ALibJsr  $c200

 'skip
   SF       intsoff
 RTS

 'lab_794
   MOVE.w   oldmode(pc),d0
   BEQ      'lab_7b0
   BMI      'lab_7aa
   ALibJsr  $c207
 BRA 'lab_7b0

 'lab_7aa
   ALibJsr  $c206

 'lab_7b0
   SF       intsoff
RTS


lab_7b8:  Dc.w     0


trapregs:
 d0_:  Dc.l 0
 d1_:  Dc.l 0
 d2_:  Dc.l 0
 d3_:  Dc.l 0
 d4_:  Dc.l 0
 d5_:  Dc.l 0
 d6_:  Dc.l 0
 d7_:  Dc.l 0
 ;
 a0_:  Dc.l 0
 a1_:  Dc.l 0
 a2_:  Dc.l 0
 a3_:  Dc.l 0
 a4_:  Dc.l 0
 a5_:  Dc.l 0
 a6_:  Dc.l 0
 a7_:  Dc.l 0

trappc:   Dc.l     0
trapcc:   Dc.w     0


.mytrap0  ;runtime error!
;
  CMPI.l   #1,d0
  BNE      'notmax
    MOVE.l   #maxerrtext,d0
 'notmax

  CMPI.l   #2,d0
  BNE      'notbra
    MOVE.l   #braerrtext,d0
 'notbra

  CMPI.l   #3,d0
  BNE      'noteop
    MOVE.l   #eoptext,d0
 'noteop

  BTST     #5,(a7)         ; check if a user trap 32-47 (TRAP 0-15) has been catched
  BNE      'super
    MOVE.l   d0,usertext
    BSET     #5,flags

    TST.w    dirmode
    BEQ      touser
    BRA touser2
 'super

  MOVE.l   d0,supertext
  BSET     #6,flags
  MOVE.l   #'more,2(a7)
  RTE

 'more
  MOVEA.l  intsp(pc),a1
  MOVEA.l  -(a1),a0
  ST       4(a0)

  MOVEA.l  -(a1),sp
  MOVE.l   a1,intsp
  ;
  MOVEA.l  (a0),a0
JMP (a0)


astring:   Ds.b 256+16 : Even
pstring:
  CNIF #tasktrap=1
    Dc.b "UPrint ",0 : Even       ; changed by Bernd 2012
  CELSE
    Dc.b "Print ",0 : Even
  CEND
dirmode:   Dc.w 0  ;ne = in direct mode!
oldouth:   Dc.l 0  ;ne = old output handler!


.evaluate  ;a0=text string to evaluate!
   ;
   ;wack a 'Print' in front!
   ;
   LEA      pstring(pc),a1
   LEA      astring(pc),a2

 'loop
   MOVE.b   (a1)+,(a2)+
   BNE      'loop
   SUBQ.w   #1,a2

   MOVE.l   #douthandler,d0
BRA exec2


.execute  ;a0=text to execute
;
   LEA      astring(pc),a2
   MOVEQ    #0,d0

exec2
   MOVE.b   (a0)+,(a2)+
   BNE      exec2
   ;
   TST.l    d0
   BEQ      'skip

   MOVEA.l  d0,a0
   ALibJsr  #setOutputChannel
   MOVE.l   d0,oldouth

 'skip
   CLR.w    doutx
   ;
   ;OK, all set!
   ;
   MOVEA.l  procsp(pc),a0
   MOVEA.l  (a0),a0

   MOVE.l   (a0)+,t_flo
   MOVE.l   (a0),t_fgl
   CLR.l    t_err

   MOVE.w   oldmode(pc),d0
   SMI      d0
   EXT.w    d0
   MOVE.w   d0,t_bmd

   BSR      fixmode
   ST dirmode
TRAP #15  ;execute the bastard!


t_str:   Dc.l     astring  ;input string
t_flo:   Dc.l     0        ;firstlocal
t_fgl:   Dc.l     0        ;first global
t_err:   Dc.l     0        ;output error
t_bmd:   Dc.w     0        ;blitz mode! are we in blitz mode?


.dirdone
   SF       dirmode
   BSR      amigamode
   ;
   MOVE.l   t_err(pc),d0
   BEQ      'skip

   MOVEA.l  d0,a0
   LEA      astring(pc),a1
   MOVE.w   #$ffff,doutx    ;-1

 'loop
   ADDQ.w   #1,doutx
   MOVE.b   (a0)+,(a1)+
   BNE      'loop

 'skip
   MOVE.l   oldouth(pc),d0
   BEQ      'skip2

   CLR.l    oldouth
   MOVEA.l  d0,a0
   ALibJsr  #setOutputChannel

 'skip2
   LEA      astring(pc),a0
   MOVE.w   doutx(pc),d0
   CLR.b    $00(a0,d0.w)
RTS


.touser2
   MOVE.l   #dirdone,2(a7)
RTE


.doutx
   Dc.w     0
  BRA      dout3
  BRA      dout2


.douthandler  ;outut a byte!
   CMPI.w   #$100,doutx
   BCC      'done

   MOVEM.l  d0-d1/a0-a1,-(a7)

   LEA      astring(pc),a1
   MOVE.w   doutx(pc),d1
   MOVE.b   d0,$00(a1,d1.w)
   ADDQ.w   #1,doutx

   MOVEM.l  (a7)+,d0-d1/a0-a1

 'done
RTS


.dout2  ;output a string of length d0!
   TST.w   D0
   BEQ.w   'done

   MOVEM.l D0/D1/A0/A1,-(A7)

   LEA     astring(PC),A1
   MOVE.w  doutx(PC),D1

 'loop
   CMPI.w  #$0100,D1
   BCC.w   'skip
   MOVE.b  (A0)+,$00(A1,D1.w)
   ADDQ.w  #1,D1
 BRA 'loop

 'skip
   MOVE.w  D1,doutx

   MOVEM.l (A7)+,D0/D1/A0/A1

 'done
RTS


.dout3  ;output string until 0!
   MOVEM.l D0/D1/A0/A1,-(A7)

   LEA astring(PC),A1
   MOVE.w  doutx(PC),D1

 'loop
   CMPI.w  #$0100,D1
   BCC.w   'skip
   ADDQ.w  #1,D1
   MOVE.b  (A0)+,-$01(A1,D1.w)
   BNE.w   'loop
   SUBQ.w  #1,D1

 'skip
   MOVE.w  D1,doutx

   MOVEM.l (A7)+,D0/D1/A0/A1
RTS


CNIF #tasktrap=1
  .dochangetrap                   ; added by Bernd 2012
     TST.l    d0
     BEQ      'null
     ALibJsr  $c31f
   BRA dodebug

   'null
     MOVEA.l  _execbase,a6
     SUBA.l   a1,a1
     JSR      _FindTask(a6)
     MOVEA.l  d0,a0
     MOVE.l   #nullhandler,$32(a0)
  RTS
CEND


lab_b34: Dc.b     "Interrupted - program start",0 :Even


.codeinit  ;d0=non zero for auto run!
;
   CLR.w    dirmode
   CLR.l    oldouth
   CLR.w    intsoff
   CLR.w    oldmode
   CLR.l    flags

   ; > new
   TST.b    d0
   BNE      'lab_b86

   MOVE.l   #lab_b34,usertext
   BSET     #5,flags

 'lab_b86   ; installtrap
   ; < new end
   MOVE.l   #intstack,intsp
   MOVE.l   #procstack,procsp
   MOVE.l   #statehandler_,statehandler
   MOVE.l   #superhandler_,superhandler
   MOVE.l   #userhandler_,userhandler
   MOVE.l   #waithandler_,waithandler
   MOVE.l   #evalhandler_,evalhandler

   ; > new
dodebug                           ; added by Bernd 2012
   CNIF #tasktrap=1
     MOVE.l   $84(a0),trap1store
   CELSE
   ; < new end
     ALibJsr  $c31d     ; getvbr in a0 !!!
   ; > new
   CEND
   ; < new end
   MOVE.l   $84(a0),tokens

   CNIF #tasktrap=0
     MOVE.l #mytrap0,$80(A0)      ; set trapcode for TRAP 0-5
     MOVE.l #mytrap1,$84(A0)
     MOVE.l #mytrap2,$88(A0)
     MOVE.l #mytrap3,$8C(A0)
     MOVE.l #mytrap4,$90(A0)
     MOVE.l #mytrap5,$94(A0)
   CEND

   ; > new
   MOVEA.l  _execbase,a6
   SUBA.l   a1,a1
   JSR      _FindTask(a6)
   CNIF #tasktrap=1               ; added by Bernd 2012
     TST.l    task
     BEQ      'lab_c0a
     CMP.l    task,d0
     BEQ      'lab_c0a
     MOVEA.l  task,a0
     MOVE.l   #nullhandler,$32(a0)
   CEND

 'lab_c0a
   MOVE.l   d0,task
   CNIF #tasktrap=1               ; added by Bernd 2012
     MOVEA.l  d0,a0
     MOVE.l   $32(a0),oldhandler
     MOVE.l   #tasktrap_handler,$32(a0)
   CEND
   MOVEQ    #-1,d0
   JSR      _AllocSignal(a6)
   MOVE.w   d0,signal
RTS

; > new
CNIF #tasktrap=1
  .nullhandler                    ; added by Bernd 2012
     CMPI.b   #$21,3(a7)          ;trap #1
     BNE      'lab_c42
     ADDQ.l   #4,sp
     ADDQ.l   #8,2(a7)
   RTE

   'lab_c42
     CMPI.b   #$20,3(a7)          ;trap #0
     BNE      'lab_c54
     ADDQ.l   #4,sp
   JMP mytrap0

   'lab_c54
     CMPI.b   #$22,3(a7)          ;trap #2
     BNE      'lab_c66
     ADDQ.l   #4,sp
   JMP mytrap2

   'lab_c66
     CMPI.b   #$23,3(a7)          ;trap #3
     BNE      'lab_c78
     ADDQ.l   #4,sp
   JMP mytrap3

   'lab_c78
     CMPI.b   #$24,3(a7)          ;trap #4
     BNE      'lab_c8e
     ADDA.l   #4,sp
     ADDQ.l   #8,2(a7)
   RTE

   'lab_c8e
     CMPI.b   #$25,3(a7)          ;trap #5
     BNE      'lab_c9c
     ADDQ.l   #4,sp
   RTE

   'lab_c9c
     ADDQ.l   #4,sp
  RTE


  .tasktrap_handler               ; added by Bernd 2012
     CMPI.b   #$21,3(a7)          ;trap #1
     BNE      'lab_cb2
     ADDQ.l   #4,sp
   JMP mytrap1

   'lab_cb2
     CMPI.b   #$20,3(a7)          ;trap #0
     BNE      'lab_cc4
     ADDQ.l   #4,sp
   JMP mytrap0

   'lab_cc4
     CMPI.b   #$22,3(a7)          ;trap #2
     BNE      'lab_cd6
     ADDQ.l   #4,sp
   JMP mytrap2

   'lab_cd6
     CMPI.b   #$23,3(a7)          ;trap #3
     BNE      'lab_ce8
     ADDQ.l   #4,sp
   JMP mytrap3

   'lab_ce8
     CMPI.b   #$24,3(a7)          ;trap #4
     BNE      'lab_cfa
     ADDQ.l   #4,sp
   JMP mytrap4

   'lab_cfa
     CMPI.b   #$25,3(a7)          ;trap #5
     BNE      'lab_d0c
     ADDQ.l   #4,sp
   JMP mytrap5

   'lab_d0c
     MOVE.l   oldhandler,-(a7)
  RTS
CEND

task:       Dc.l     0
signal:     Dc.w     0

CNIF #tasktrap=1                  ; added by Bernd 2012
  trap1store: Dc.l     0
  oldhandler: Dc.l     0
CEND
; < end


.codefinit
   MOVEA.l  _execbase,a6
   MOVE.w   signal(pc),d0
   JSR      _FreeSignal(a6)
RTS


.do_lab_d3a
   MOVEA.l  lab_16e(pc),a1
   JSR      (a1)
RTS


.dostop
   MOVE.l   #'text,usertext
   BSET     #5,flags
RTS

 'text
   Dc.b     "***** Interupted *****",0 : Even


.doevaluate
   MOVE.l   a0,evaltext
   BSET     #4,flags
RTS


.doexecute
   MOVE.l   a0,exectext
   BSET     #3,flags
RTS


.doquit
   BSET     #7,flags
RTS


.doskip
   BSET     #2,flags
RTS


.dosethandler
   ; > new
   MOVE.l   d0,procstatus
   ; < new end
   MOVE.l   handler(pc),d0
   MOVE.l   a0,handler
   MOVEM.l  d0-d5,-(a7)

   MOVEM.l  (a0)+,d0-d4
   MOVEM.l  d0-d4,statehandler
   ; > new
   ADDQ.l   #4,a0
   MOVE.l   (a0)+,lab_16e
   MOVE.l   (a0)+,lab_172
   ; < new end
   MOVEM.l  (a7)+,d0-d5
   ; > new
   LEA      trapregs(pc),a0
   LEA      oldmode(pc),a1
   MOVEA.l  tokens,a2
   MOVEA.l  task(pc),a3
   MOVE.w   signal(pc),d0
   ;< new end
RTS


.donewmode
RTS


.dodetoke  ;detokenise a0 -> a1
;
 'loop
   MOVE.b   (a0)+,(a1)+
   BEQ      'done
   BPL      'loop
   ;
   MOVE.b   -(a1),d0
   LSL.w    #8,d0
   MOVE.b   (a0)+,d0

   LEA      tokens(pc),a2
   BCLR     #$f,d0

 'loop2
   MOVE.l   (a2),d1
   BEQ      'err
   MOVEA.l  d1,a2

   CMP.w    4(a2),d0
   BNE      'loop2
   ADDQ.w   #6,a2

 'loop3
   MOVE.b   (a2)+,(a1)+
   BNE      'loop3
   SUBQ.w   #1,a1
 BRA 'loop

 'err
   LEA      notoke(pc),a2
 BRA 'loop3

 'done
RTS


notoke: Dc.b "?????",0 : Even


.dofindoff  ;a0=tokenised string, d0=char pos...return d0=asc offset
   ;
   MOVEQ    #0,d1
   TST.w    d0

 'loop
   BEQ      'done
   TST.b    (a0)+
   BEQ      'done
   BMI      'toke

   ADDQ.w   #1,d1
   SUBQ.w   #1,d0
 BRA 'loop

 'toke
   SUBQ.w   #2,d0
   MOVE.b   -1(a0),d2
   LSL.w    #8,d2
   MOVE.b   (a0)+,d2

   LEA      tokens(pc),a2
   BCLR     #$f,d2

 'loop2
   MOVE.l   (a2),d3
   BEQ      'err
   MOVEA.l  d3,a2

   CMP.w    4(a2),d2
   BNE      'loop2
   ADDQ.w   #6,a2

 'loop3
   ADDQ.w   #1,d1
   TST.b    (a2)+
   BNE      'loop3
   SUBQ.w   #1,d1
 BRA 'loop

 'err
   LEA      notoke(pc),a2
 BRA 'loop3

 'done
   MOVE.w   d1,d0
RTS
