; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Development:Amiblitz3/BlitzLibs/Decompiled"
; ExeFile         = "shapeslib_new.obj"
; CreateIcon      = 0
; Residents       = "libmacs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 152
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 318
; CursorColumn    = 57
; LabelSearch     = "getashape"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max BitMap      = 10
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
; IRA V2.09 (06.03.18) (c)1993-1995 Tim Ruehsen
; (c)2009-2015 Frank Wille, (c)2014-2017 Nicolas Bastien
; backported to AmiBlitz3 by Sven Droege
#HARDBASE = $DFF000

#DMACONR = $DFF002
;http://coppershade.org/articles/Code/Reference/DMACON/
;Bit Function  Description
;15  SET/CLR 0=clear, 1=set bits that are set To 1 below
;14  BBUSY Blitter busy status bit (Read only)
;13  BZERO Blitter logic zero status bit. (Read only)
;12  - Reserved/Unused
;11  - Reserved/Unused
;10  BLTPRI  Blitter priority, 0=give every 4th Cycle To CPU
;09  DMAEN Enable all DMA below
;08  BPLEN Bit plane DMA
;07  COPEN Copper DMA
;06  BLTEN Blitter DMA
;05  SPREN Sprite DMA
;04  DSKEN Disk DMA
;03  AUD3EN  Audio channel 3 DMA
;02  AUD2EN  Audio channel 2 DMA
;01  AUD1EN  Audio channel 1 DMA
;00  AUD0EN  Audio channel 0 DMA

#_Open                       = -$1E     ; -30
#_Close                      = -$24     ; -36
#_Read                       = -$2A     ; -42
#_Write                      = -$30     ; -48

#_OwnBlitter                 = -$1C8    ; -456
#_DisownBlit                 = -$1CE    ; -462
#_WaitTOF                    = -$10E    ; -270

;-------------------------------------------------------------------------
!libheader {#shapeslib,init,0,0,errors}

!astatement
!args{#word,#string}
!libs{#shapeslib,$1080}
!subs{LAB_0018,0,0}
!args{#word,#string,#word}
!libs{#shapeslib,$1080,#palettelib,$1182}
!subs{LAB_0017,0,0}
!name{"LoadShape","Shape#,Filename$[,Palette#]"}

!astatement
!args{#word}
!libs{#shapeslib,$1380}
!subs{do_MakeCookie,shapechk,0}
!name{"MakeCookie","Shape#"}

!afunction{#word}
!args{#word}
!libs{#shapeslib,$1080}
!subs{do_ShapeWidth,shapechk2,0}
!name{"ShapeWidth","(Shape#)"}

!afunction{#word}
!args{#word}
!libs{#shapeslib,$1080}
!subs{do_ShapeHeight,shapechk2,0}
!name{"ShapeHeight","(Shape#)"}

!astatement
!args{#word,#word,#word}
!libs{#shapeslib,$1380}
!subs{do_Handle,shapechk,0}
!name{"Handle","Shape#,X,Y"}

!astatement
!args{#word}
!libs
!subs{do_AutoCookie,0,0}
!name{"AutoCookie","On|Off"}

!astatement
!args{#word,#word}
!libs{#shapeslib,$1380,#shapeslib,$1281}
!subs{do_CopyShape,shapechk,0}
!name{"CopyShape","Shape#,Shape#"}

!astatement
;Dc.w $0001
;Dc.w $0000
;Dc.w $0000
!args{2,2,2,2,2}
;Dc.w $0005
;Dc.l $02020202
;Dc.w $0200
!libs{#shapeslib,$1380,#bitmaplib,$1202,#graphicslib,$5600}
;Dc.w $009a,$1380
;Dc.w $00a0,$1202
;Dc.w $00fe,$5600
;Dc.w $0000
!subs{do_GetaShape,bitmapareachk,0}
;Dc.l bitmapareachk
;Dc.l do_GetaShape
;Ds.l 1
!name{"GetaShape","Shape#,X,Y,Width,Height"}

!astatement
!args{2,2,7}
!libs{#shapeslib,$1380,#shapeslib,$1281,#doslib,#la6}
!subs{do_SaveShapes,shapeorderchk,0}
!name{"SaveShapes","Shape#,Shape#,Filename$"}

!astatement
!args{2,7}
!libs{#shapeslib,$1380,#shapeslib,$1201,#shapeslib,$0203,#doslib,#la6}
!subs{do_LoadShapes1,0,0}
!args{2,2,7}
!libs{#shapeslib,$1380,#shapeslib,$1281,#doslib,#la6}
!subs{do_LoadShapes2,shapeorderchk,0}
!name{"LoadShapes","Shape#[,Shape#],Filename$"}

!nullsub{do_MakeCookie,0,0}

;dumtoke
;dumtoke{"name","help",label}
;
;Macro dumtoke
;!pchk{3,`0}
;Dc 8,0,0:Dc.l 0:Dc 0
;`3:Dc.b `1,0
;Dc.b `2,0
;Even
;End Macro
!dumtoke{"Shape","- image",toke_shape}
;Dc.l $00080000
;Ds.l 2
;toke_shape:
;Dc.b "Shape",0
;Dc.b "- image",0

!astatement
!args{2}
!libs{#shapeslib,$1380}
!subs{do_MidHandle,shapechk,0}
!name{"MidHandle","Shape#"}

!nullsub{LAB_000D,0,0}

!astatement
!args{2,3}
!libs{#shapeslib,#ia3,#shapeslib,#ba2,#shapeslib,#ld2|#used|#base} ; $0203
!subs{do_DecodeShape1,0,0}
!args{2,2,3}
!libs{#shapeslib,#ia3,#shapeslib,$1281}
!subs{do_DecodeShape2,0,0}
!name{"DecodeShapes","Shape#[,Shape#],MemoryLocation"}

!astatement
!args{2,2,2,2}
!libs{#shapeslib,$1380}
!subs{do_InitShape,0,0}
!name{"InitShape","Shape#,Width,Height,Depth"}

;---------------------------------------------------------------------------------------
init:
; nullsub{routine,error1,error2,lib,lib,lib....}
!nullsub{do_init,0,0}
_load:!nullsub{0,0,0}
_save:!nullsub{0,0,0}
_used:!nullsub{0,0,0}
_free:!nullsub{do_free,0,0}
;libfin{toke,load,save,Use,Free,defmax,shift} ; max 100 Shapes, 32bytes each object
!libfin{toke_shape,_load,_save,_used,_free,100,5}

; -----------------------------------------------------------------------------------
mode_autocookie:         ; DAT_0021f4b8
Dc.w $ffff


;new bitmap struct:
;
;0.w _ebwidth/_linemod
;2.w _height
;4.w _depth
;6.w _flags (OS's 4..5 bytes) ; btst #2 to see if interleaved
;8.l...39 _data ; bitplane pointer
;40 layer in systemmode
;52 _mem ; contiguos memory occupied by bitmap!
;56 _memlen ; bytes occupied by _mem
;60 _xclip in pixels...
;62 _isreal ; 0=no bitmap here, 1=borrowed, -1=ours

struct_bitmap:                ; DAT_0021f4ba / LAB_0021
Dc.w $0000
Ds.l 16
Ds.w 1
Even

do_init:
  MOVE.w #-1,mode_autocookie
RTS

.do_SaveShapes:
  MOVE.l D2,D1
  MOVE.l #$3ee,D2
  JSR _Open(A6)                  ;-30
  MOVE.l D0,D7
  BEQ.w error2                   ;cannot open shapes file

  LAB_0021f51a:
    MOVE.l D7,D1
    MOVE.l A3,D2
    MOVEQ #32,D3
    JSR _Write(A6)                 ; -48
    CMPI.l #$00000020,D0
    BNE.w error3                                  ; Can't Read/Write Shapes File

    TST.w (A3)
    BEQ.w LAB_0021f54c
      MOVE.l D7,D1
      MOVE.l 14(A3),D2
      MOVEQ #0,D3
      MOVE.w 26(A3),D3
      JSR _Write(A6)              ; -48
      CMP.w 26(A3),D0
      BNE.w error3                                ; Can't Read/Write Shapes File
    LAB_0021f54c:

    LEA 32(A3),A3
    CMPA.l A2,A3
  BLS.w LAB_0021f51a
  MOVE.l D7,D1
JMP _Close(A6)                ;-36

.do_LoadShapes1:               ; d0: shape#, d1: stringptr, length on stack
  SUBQ.w #1,D2
  LSL.w #5,D2
  ADDA.w D2,A2
  MOVE.l D1,D2

.do_LoadShapes2:               ; d0: shape#, d1: shape#, d2: stringptr, length on stack
  MOVE.l D2,D1
  MOVE.l #$000003ed,D2
  JSR _Open(A6)                                   ;-30 d1:name, d2:mode
  MOVE.l D0,D7                                    ; store file handle
  BEQ.w error2                                    ;cannot open shapes file

  LAB_0021f576:
    BSR.w do_free

    MOVE.l D7,D1                                  ; file handle
    MOVE.l A3,D2                                  ; buffer
    MOVEQ #32,D3                                  ; length
    JSR _Read(A6)                                 ;-42 d1:file, d2:buffer, d3:length
    TST.l D0
    BEQ.w LAB_0021f600

    CMPI.l #$20,D0                                ; did we get 32 bytes?
    BNE.w error3                                  ;

    CLR.l 18(A3)
    TST.w (A3)
    BEQ.w LAB_0021f5f6                            ; next shape

    MOVE.w 6(A3),D0
    MULU 2(A3),D0
    CMP.w 22(A3),D0
    BNE.w error3                                    ;LAB_0021fbee

    MULU 4(A3),D0
    CMP.w 26(A3),D0
    BNE.w error3                                   ; Can't Read/Write Shapes File

    MOVEQ #0,D0
    MOVE.w 26(A3),D0
    MOVEQ #2,D1
    ALibJsr $c002                                  ;#globalalloc
    MOVE.l D0,14(A3)
    MOVE.l D7,D1
    MOVE.l D0,D2
    MOVEQ #0,D3
    MOVE.w 26(A3),D3
    JSR _Read(A6)             ;-42

    CMP.w 26(A3),D0
    BNE.w error3                                    ; Can't Read/Write Shapes File

    MOVE.w mode_autocookie(PC),D0
    BEQ.w LAB_0021f5f6
      MOVEM.l D7/A2,-(A7)
      BSR.w do_MakeCookie
      MOVEM.l (A7)+,D7/A2
    LAB_0021f5f6:

    LEA 32(A3),A3
  CMPA.l A2,A3
  BLS.w LAB_0021f576

  LAB_0021f600:
  MOVE.l D7,D1
JMP _Close(A6)                ;-36

.do_GetaShape:
  Dc.w $a001 : Dc.l LAB_000D      ; if in BLITZMODE jump immediately to code
  MOVE.l D1,-(A7)
  JSR  _OwnBlitter(A6)
  MOVE.l (A7)+,D1
  BSR.w  LAB_000D
  BTST.b #6,DMACONR               ; wait for blitter finish
  LAB_0021f620:
    BTST.b #6,DMACONR
  BNE.w LAB_0021f620
JMP _DisownBlit(A6)


LAB_000D:
  MOVEM.l D1-D4,-(A7)
  BSR.w do_free
  MOVE.l A3,-(A7)
  MOVE.w D3,D1                                  ; width
  MOVE.w D4,D2                                  ; height
  MOVE.w 4(A2),D3                               ; depth
  LEA struct_bitmap(PC),A3                      ; memory to bitmapstruct
  ALibJsr $5004                                 ; # ExtBitmap  ;a3=bitmap struct / d1=pix width, d2=pix height, d3=Depth

  LEA struct_bitmap(PC),A3
  MOVEA.l (A7)+,A0
  MOVE.l 2(A3),2(A0)
  MOVE.w (A3),6(A0)
  CLR.l 10(A0)
  MOVE.l 8(A3),14(A0)
  MOVE.w (A3),D0
  MULU 2(A3),D0
  MOVE.w D0,22(A0)
  MULU 4(A3),D0
  MOVE.w D0,26(A0)
  MOVE.w (A3),D0
  ADDQ.w #2,D0
  MULU 2(A3),D0
  MOVE.w D0,24(A0)
  MULU 4(A3),D0
  MOVE.w D0,28(A0)
  MOVE.w 2(A3),D0
  MOVE.w (A3),D1
  LSR.w #1,D1
  ADDQ.w #1,D1
  LSL.w #6,D0
  OR.w D1,D0
  MOVE.w D0,8(A0)
  MOVEM.l (A7)+,D0-D3
  MOVE.w D2,(A0)
  MOVE.l A0,-(A7)
  MOVEA.l A2,A0
  LEA do_init(PC),A2
  MOVE.w D2,-2(A2)
  MOVE.w D3,-4(A2)
  MOVEQ #0,D2
  MOVEQ #0,D3
  LEA HARDBASE,A1
  ALibJsr $3202                                 ; scrollib: maybe copy a bitmap ??
  BTST #6,DMACONR                               ; wait for blitter
  LAB_002E:
    BTST #6,DMACONR
  BNE.w LAB_002E
  MOVEA.l (A7)+,A3
  MOVE.w mode_autocookie(PC),D0
  BNE.w do_MakeCookie
RTS

LAB_002F:                                         ; FUN_0021f6e4
  MOVE.l A3,-(A7)
  MOVEA.l A2,A3
  BSR.w do_free
  MOVEA.l (A7)+,A3
  MOVEA.l A3,A0
  MOVEA.l A2,A1
  MOVEQ #7,D0
  LAB_0030:
    MOVE.l (A0)+,(A1)+
  DBF D0,LAB_0030
  MOVEQ #14,D7
  MOVEQ #26,D6

  LAB_0031:                                       ;LAB_0021f6fe
  MOVE.l 0(A3,D7.w),D0
  BEQ.w LAB_0033
    MOVEQ #0,D0
    MOVE.w 0(A3,D6.w),D0
    MOVEQ #2,D1
    ALibJsr $c002                                 ; #globalalloc
    MOVE.l D0,0(A2,D7.w)
    MOVEA.l 0(A3,D7.w),A0
    MOVEA.l D0,A1
    MOVE.w 0(A3,D6.w),D0
    LSR.w #1,D0
    SUBQ.w #1,D0
    LAB_0032:
      MOVE.w (A0)+,(A1)+
    DBF D0,LAB_0032
  LAB_0033:
RTS

.do_CopyShape:                                               ; Copy Shape  / LAB_0021f72e
  BSR.w LAB_002F
  MOVEQ #18,D7
  MOVEQ #22,D6
BRA.w LAB_0031

.do_AutoCookie:
  MOVE.w D0,mode_autocookie
RTS

.do_ShapeWidth:                                               ; LAB_0021f742
  MOVE.w (A0),D0
RTS

.do_ShapeHeight:                                               ; LAB_0021f746
  MOVE.w 2(A0),D0
RTS

.do_MidHandle:                                               ; LAB_0021f74c
  MOVE.w (A3),D0
  LSR.w #1,D0
  MOVE.w D0,10(A3)
  MOVE.w 2(A3),D0
  LSR.w #1,D0
  MOVE.w D0,12(A3)
RTS

.do_Handle:
  MOVE.w D1,10(A3)
  MOVE.w D2,12(A3)
RTS

  BTST #6,2(A1)
  LAB_003A:
    BTST #6,2(A1)
  BNE.w LAB_003A

do_MakeCookie:
  MOVE.l 18(A3),D0
  BEQ.w LAB_003C
    MOVEA.l D0,A1
    CLR.l 18(A3)
    MOVEQ #0,D0
    MOVE.w 22(A3),D0
    ALibJsr $c003                               ; #globalfree
  LAB_003C:
  MOVEQ #0,D0
  MOVE.w 22(A3),D0
  MOVE.l #$00010002,D1
  ALibJsr $c002                                 ; #globalalloc
  MOVE.l D0,18(A3)
  MOVEA.l D0,A2
  MOVE.w 22(A3),D0
  MOVEA.l 14(A3),A1
  MOVE.w 2(A3),D1
  SUBQ.w #1,D1

  MOVEM.l A4-A5,-(A7)
  LAB_003D:
    MOVE.w 4(A3),D2
    SUBQ.w #1,D2
    MOVEA.l A1,A4
    MOVEA.l A2,A5
    LAB_003E:
      MOVE.w 6(A3),D3
      LSR.w #1,D3
      SUBQ.w #1,D3
      LAB_003F:
        MOVE.w (A4)+,D7
        OR.w D7,(A5)+
      DBF D3,LAB_003F
      SUBA.w 6(A3),A4
      ADDA.w D0,A4
      SUBA.w 6(A3),A5
    DBF D2,LAB_003E
    ADDA.w 6(A3),A1
    ADDA.w 6(A3),A2
  DBF D1,LAB_003D
  MOVEM.l (A7)+,A4-A5
RTS

Dc.w $a001
Dc.l LAB_0015

;Dc.l $a0000004
;Dc.l $4eaefef2
;Dc.w $4e75
do_wait:
Dc $a000,'f-'s
 's:JSR _WaitTOF(A6):'f
RTS

LAB_0015:
  Dc.w $a000
  Dc.w $0010
  Dc.l $337c0020,$009c0829,$0005001f
  Dc.l $6700fff8
  Dc.w $4e75
;  Dc $a000,'f-'s
; 's: MOVE.w #$20,$9C(A1)
;  LAB_0021f812:
;    BTST.b #5,$1f(A1)
;  BEQ.w LAB_0021f812
; 'f:RTS

do_free:                      ;LAB_0016
  TST.w (A3)
  BEQ.w exit_free
    CLR.w (A3)
    CMPI.w #$634c,30(A3)
    BEQ.w skip_0043
      CLR.w 30(A3)
      MOVEQ #0,D0
      MOVE.w 26(A3),D0                ; d0: bytesize
      MOVEA.l 14(A3),A1               ; a1: memoryblock
      ALibJsr $c003                   ; #globalfree
    skip_0043:
    MOVE.l 18(A3),D0
    BEQ.w exit_free
      MOVEA.l D0,A1
      CLR.l 18(A3)
      MOVEQ #0,D0
      MOVE.w 22(A3),D0
      ALibJsr $c003                   ; #globalfree
  exit_free:
RTS

LAB_0017:           ; do_LoadShape1   ; d0: Shape#, d1: Filename$[,Palette#]
  MOVEM.l D1/A0,-(A7)
  MOVEA.l D1,A0
  ALibJsr $4e03                       ;#palettelib: getpalette (A0:palettename,d2:palette offset)
  MOVEM.l (A7)+,D1/A0

LAB_0018:           ; do_LoadShape2   ; d0: shape#, d1: filename, d2: palette#
  MOVE.l A4,-(A7)
  MOVEA.l A0,A4
  MOVE.l D1,-(A7)
  MOVEA.l A0,A3
  BSR.w do_free

  MOVEA.l (A7)+,A0
  MOVE.l A4,-(A7)
  ALibJsr                                  ; ilbmifflib: open file
  BEQ.w error2                             ;cannot open shapes file

  MOVE.w (A0),(A4)
  MOVE.w 2(A0),D0
  MOVE.w D0,2(A4)
  MOVE.w D0,D3
  LSL.w #6,D0
  MOVE.w4 (A0),D4
  MOVE.w D4,4(A4)
  MOVE.w6 (A0),D1
  LSL.w #1,D1
  MOVE.w D1,D2
  MOVE.w D1,6(A4)
  LSR.w #1,D1
  ADDQ.w #1,D1
  OR.w D1,D0
  MOVE.w D0,8(A4)
  CLR.l 10(A4)
  MOVE.w D2,D0
  ADDQ.w #2,D0
  MULU D3,D0
  MOVE.w D0,24(A4)
  MULU D4,D0
  MOVE.w D0,28(A4)
  MOVE.w D2,D0
  MULU D3,D0
  MOVE.w D0,22(A4)
  MOVE.w D0,D7
  MULU D4,D0
  MOVE.w D0,26(A4)
  MOVEQ #2,D1
  ALibJsr $c002                                        ; #globalalloc
  MOVE.l D0,14(A4)
  MOVEA.l D0,A2
  MOVE.l #$424f4459,D0
  ALibJsr $5106                                        ;#iffiolib: readChunk
  SUB.w D2,D7
  SUBQ.w #1,D3
  SUBQ.w #1,D4
  LAB_0047:
    MOVEA.l A2,A4
    MOVE.w D4,D5
    LAB_0048:
      MOVE.w D2,D6
      SUBQ.w #1,D6
      LAB_0049:
        ALibJsr $5082
        MOVE.b D0,(A2)+
      DBF D6,LAB_0049
      ADDA.w D7,A2
    DBF D5,LAB_0048
    MOVEA.l A4,A2
    ADDA.w D2,A2
  DBF D3,LAB_0047
  MOVEA.l(A7)+,A3

  MOVE.w mode_autocookie(PC),D0
  BEQ.w LAB_004A
    BSR.w do_MakeCookie
  LAB_004A:

  MOVE.l #$414e4844,D0
  ALibJsr $5106                                       ;#iffiolib
  BNE.w LAB_005D

  ALibJsr $5103                                       ;#iffiolib
  CMPI.b #$05,D0
  BNE.w error7

  MOVEQ #17,D0
  ALibJsr $5107                                       ;#iffiolib
  ALibJsr $5103                                       ;#iffiolib
  CMPI.b #$01,D0
  BNE.w error8

  ALibJsr $5103                                       ;#iffiolib
  ALibJsr $5105                                       ;#iffiolib
  AND.w #$0002,D0
  MOVE.w D0,LAB_0019
  LAB_004B:
  LEA 32(A3),A2
  BSR.w LAB_002F
  MOVEA.l A2,A3
  CLR.l 18(A3)
  MOVE.l #$444c5441,D0
  ALibJsr $5106                                       ;#iffiolib
  MOVE.w 4(A3),D1
  SUBQ.w #1,D1
  LEA LAB_0019+2(PC),A0
  MOVEQ #0,D2
  LAB_004C:
    ADDQ.l #4,D2
    ALibJsr $5105                                     ;#iffiolib
    MOVE.l D0,(A0)+
  DBF D1,LAB_004C
  MOVE.w 4(A3),D1
  SUBQ.w #1,D1
  LEA LAB_0019+2(PC),A1
  MOVEA.l 14(A3),A2
  LAB_004D:
  MOVE.l (A1)+,D0
  BEQ.w LAB_005B
  SUB.l D2,D0
  BEQ.w LAB_004E
    ALibJsr $5107                                     ;#iffiolib
    MOVE.l -4(A1),D2
  LAB_004E:
  MOVE.w 6(A3),D3
  SUBQ.w #1,D3
  MOVE.l A2,-(A7)
  LAB_004F:
  ADDQ.l #1,D2
  ALibJsr $5103                                       ;#iffiolib
  MOVEQ #0,D4
  MOVE.b D0,D4
  BEQ.w LAB_005A
  SUBQ.w #1,D4
  MOVE.l A2,-(A7)
  LAB_0050:
  ADDQ.l #1,D2
  ALibJsr $5103                                       ;#iffiolib
  TST.b D0
  BEQ.w LAB_0055
    BMI.w LAB_0051
      EXT.w D0
      MULU 6(A3),D0
      ADDA.l D0,A2
      BRA.w LAB_0059
    LAB_0051:
    AND.w #$007f,D0
    MOVE.w D0,D5
    SUBQ.w #1,D5
    LAB_0052:
      ADDQ.l#1,D2
      ALibJsr $5103                                   ;#iffiolib
      TST.w LAB_0019
      BEQ.w LAB_0053
        EOR.b D0,(A2)
        BRA.w LAB_0054
      LAB_0053:
        MOVE.b D0,(A2)
      LAB_0054:
      ADDA.w 6(A3),A2
    DBF D5,LAB_0052
    BRA.w LAB_0059
  LAB_0055:
    ADDQ.l#1,D2
    ALibJsr $5103                                     ;#iffiolib
    MOVEQ #0,D5
    MOVE.b D0,D5
    SUBQ.w #1,D5
    ADDQ.l #1,D2
    ALibJsr $5103                                     ;#iffiolib
    LAB_0056:
      TST.w LAB_0019
      BEQ.w LAB_0057
        EOR.b D0,(A2)
        BRA.w LAB_0058
      LAB_0057:
        MOVE.bD0,(A2)
      LAB_0058:
      ADDA.w 6(A3),A2
    DBF D5,LAB_0056
  LAB_0059:
  DBF D4,LAB_0050

  MOVEA.l (A7)+,A2
  LAB_005A:
    ADDQ.w#1,A2
  DBF D3,LAB_004F
  MOVEA.l (A7)+,A2
  LAB_005B:
    ADDA.w 22(A3),A2
  DBF D1,LAB_004D

  MOVE.w mode_autocookie(PC),D0
  BEQ.w LAB_005C
    BSR.w do_MakeCookie
  LAB_005C:
  MOVE.l #$414e4844,D0
  ALibJsr $5106                                       ;#iffiolib
  BEQ.w LAB_004B
  LAB_005D:
  ALibJsr $5102                                       ;#iffiolib
  MOVEA.l (A7)+,A4
RTS


LAB_0019:
Ds.l 8
Ds.w 1

.do_DecodeShape1:   ; D0: Shape#, D1: Memory-Location
  SUBQ.w #1,D2
  LSL.w #5,D2
  ADDA.w D2,A2
  MOVE.l D1,D2

.do_DecodeShape2:  ; D0: Shape#, D1: Shape#, D2: Memory-Location
  TST.l D2
  BEQ.w errorA
  MOVE.l A4,-(A7)
  MOVEA.l D2,A4
  MOVE.l D2,D7
  AND.l #$ffe00000,D7

  LAB_0062:
    MOVE.w 6(A4),D0
    MULU 2(A4),D0
    CMP.w 22(A4),D0
    BNE.w LAB_0068
    MULU 4(A4),D0
    CMP.w 26(A4),D0
    BNE.w LAB_0068

    BSR.w do_free
    MOVEQ #7,D0
    LAB_0063:
      MOVE.l (A4)+,(A3)+
    DBF D0,LAB_0063
    SUBA.w #$0020,A3
    CLR.l 18(A3)
    CLR.l 14(A3)
    TST.w (A3)
    BEQ.w LAB_0067
    TST.l D7
    BEQ.w LAB_0065
      MOVEQ #0,D0
      MOVE.w 26(A3),D0
      MOVEQ #2,D1
      ALibJsr $c002                               ;#globalalloc
      MOVE.l D0,14(A3)
      MOVEA.l D0,A1
      MOVE.w 26(A3),D0
      LSR.w #1,D0
      SUBQ.w #1,D0
      LAB_0064:
        MOVE.w (A4)+,(A1)+
      DBF D0,LAB_0064
      BRA.w LAB_0066
    LAB_0065:
      MOVEQ #0,D0
      MOVE.w 26(A3),D0
      MOVE.l A4,14(A3)
      ADDA.l D0,A4
      MOVE.w #$634c,30(A3)
    LAB_0066:

    MOVE.w mode_autocookie(PC),D0
    BEQ.w LAB_0067
      MOVEM.l D7/A2,-(A7)
      BSR.w do_MakeCookie
      MOVEM.l (A7)+,D7/A2
    LAB_0067:
    LEA 32(A3),A3
    CMPA.l A2,A3
  BLS.w LAB_0062

  LAB_0068:
  MOVEA.l (A7)+,A4
RTS

.do_InitShape:
  MOVEM.w D1-D3,-(A7)
  BSR.w do_free
  MOVEM.w (a7)+,D1-D3
  MOVE.w d2,d5
  ASL.w #6,d5
  MOVE.w D1,D4
  ADDI.w #$000f,D4
  LSR.w #4,D4
  OR.w D4,D5
  ADD.w D4,D4
  ADDQ.w #1,D5
  MOVEM.w D1-D5,(A3)
  CLR.l 10(A3)
  MOVE.w D4,D5
  ADDQ.w #2,D5
  MULU D2,D4
  MULU D2,D5
  MOVEM.w D4-D5,22(A3)
  MULU D3,D4
  MULU D3,D5
  MOVEM.w D4-D5,26(A3)
  MOVE.l D4,D0
  MOVE.l #$00010002,D1
  ALibJsr $c002                                      ; #globalalloc
  MOVE.l D0,14(A3)
  MOVE.w mode_autocookie(PC),D0
  BEQ.w LAB_006A
    MOVEQ #0,D0
    MOVE.w 22(A3),D0
    MOVE.l #$00010002,D1
    ALibJsr $c002                                    ; #globalalloc
    MOVE.l d0,$12(a3)
  LAB_006A:
RTS

;******************** Error Checking ******************;
.errors:
error2:MOVE.l #mess2,D0 : TRAP #0        ; LAB_0021fbe6
error3:MOVE.l #mess3,D0 : TRAP #0        ; LAB_0021fbee
error7:MOVE.l #mess7,D0 : TRAP #0        ; LAB_0021fbf6
error8:MOVE.l #mess8,D0 : TRAP #0
error1:MOVE.l #mess1,D0 : TRAP #0
error4:MOVE.l #mess4,D0 : TRAP #0
error5:MOVE.l #mess5,D0 : TRAP #0
error6:MOVE.l #mess6,D0 : TRAP #0
error9:MOVE.l #mess9,D0 : TRAP #0
errorA:MOVE.l #messA,D0 : TRAP #0
mess1: Dc.b "Uninitialized Shape",0
mess2: Dc.b "Can't open Shapes File",0
mess3: Dc.b "Can't Read/Write Shapes File",0
mess4: Dc.b "First shape must be lower than second",0
mess5: Dc.b "Illegal area for GetaShape",0
mess6: Dc.b "Uninitialized BitMap",0
mess7: Dc.b "ANIM format not supported",0
mess8: Dc.b "Illegal ANIM interleave value",0
mess9: Dc.b "Cannot GetaShape from an interleaved Bitmap",0
messA: Dc.b "Shapes file at memory location 0? NOWAY!",0,0

.shapeorderchk:
  CMPA.l A2,A3
  BHI.w error4              ; first shape must be lower than second
RTS

.shapechk2:
  TST.w (a0)
  BEQ.w error1              ; uninitialized shape
RTS

.shapechk:
  TST.w (a3)
  BEQ.w error1              ; uninitialized shape
RTS

.bitmapareachk:
  TST.w $3e(A2)
  BEQ.w error6              ; uninitialized bitmap
  TST.w $34(A2)             ; 52
  BMI.w error9              ; interleaved bitmap error
  TST.w D3
  BMI.w error5              ; illegal area for getashape
  TST.w D4
  BMI.w error5
  MOVE.w $38(A2),D7
  CMP.w  D7,D1
  BCC.w  error5
  MOVE.w D1,D6
  ADD.w  D3,D6
  CMP.w  D7,D6
  BHI.w  error5
  MOVE.w $3a(A2),D7
  CMP.w  D7,D2
  BCC.w  error5
  MOVE.w D2,D6
  ADD.w  D4,D6
  CMP.w  D7,D6
  BHI.w  error5
RTS
