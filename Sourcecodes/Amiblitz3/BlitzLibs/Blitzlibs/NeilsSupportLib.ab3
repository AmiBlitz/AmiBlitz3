; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "NeilsSupportlib.obj"
; CreateIcon      = 0
; Residents       = "libnums.res,all.res,libjsrs.res,libmacs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 65535
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 36
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max Window      = 20
; Max BlitzFont   = 4
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;          **************************************************
;          **                                              **
;          **   Amiga Support Library for Blitz Basic II   **
;          **                                              **
;          **************************************************
;          **                                              **
;          **   Credits:                                   **
;          **     Initial concept and 680x0 coding -       **
;          **         Neil O'Rourke                        **
;          **                                              **
;          **     Basic coding of some commands -          **
;          **         Roy "The Rat" Hurley                 **
;          **                                              **
;          **************************************************

;Library History:

;Sometime in 1993:  Library created with just AllocMem and FreeMem
;A bit after that:  Created IsEven just to prove a point to my brother
;Later in 1993:     SearchString nicked from Roy's article in ACAR
;Too far into 1994  Library released with Blitz 1.80
;28-4-94            Added BLoad, BSave and BFree after naggings by Roy

;#neilssupportlib = 54 ;promise not to move it again, oops just did

!libheader{#neilssupportlib,0,0,0,0}

!afunction{#long}
!args{#long,#long}
!libs
!subs{_allocmem,0,0}
!name{"AllocMem","(ByteSize,Attributes)"}

!astatement
!args{#long,#long}
!libs
!subs{_freemem,0,0}
!name{"FreeMem","MemoryBlock,ByteSize"}

!afunction{#byte}
!args{#long}
!libs
!subs{_iseven,0,0}
!name{"IsEven","(Expression)"}

!afunction{#long}
!args{#long,#long,#long}
!libs
!subs{_search,0,0}
!name{"SearchString","(MatchStringPointer,Start,Length)"}

!afunction{#long}
!args{#string,#long}
!libs{#doslib,#la6}
!subs{_bload,0,0}
!name{"BLoad","(FileName$,MemoryType)"}

!astatement
!args{#long}
!libs
!subs{_bfree,0,0}
!name{"BFree","BFilePointer"}

!astatement
!args{#string,#long,#long}
!libs{#doslib,#la6}
!subs{_bsave,0,0}
!name{"BSave","FileName$,Address,Length"}

!libfin

_allocmem:ALibJsr $c002:RTS

_freemem:MOVEA.l d0,a1:MOVE.l d1,d0:ALibJsr $c003:RTS

_iseven:BTST #0,d0:BEQ _settrue:MOVE.b #0,d0:RTS
_settrue:MOVE.b #-1,d0:RTS

_search:MOVE.l d1,a0:MOVE.l d0,a1:MOVE.l d2,d5:SUB.l a3,a3
MOVE.l a1,a4:MOVE.b (a1),d0:BEQ _search_finn
_search_start:CMP.b (a0)+,d0:BEQ _search_match:SUBQ.l #1,d5:BNE _search_start
_search_finn:MOVE.l a3,d0:RTS
_search_match:SUBQ.l #1,a0:MOVE.l a0,a3
_search_loop:MOVE.b (a1)+,d0:BEQ _search_finn:CMP.b (a0)+,d0:BEQ _search_loop
SUB.l a3,a3:MOVE.l d4,a1:MOVE.b (a1),d0:BRA _search_start

;You will note how professional the coding is from now on :)

._bload:
  MOVEM.l a4-a6,-(a7)
  MOVE.l d0,fname         ;Save the name of the file we want to load
  MOVE.l d1,mtype         ;and the type of memory to load it into
  MOVE.l fname,d1
  MOVE.l #1005,d2         ;Access mode
  JSR -$54(a6)            ;Get a lock on the file
  CMP.l #0,d0
  BEQ fileerr
  MOVE.l d0,lock          ;and save it
  MOVE.l #$e0,d0          ;Enough memory for a FileInfoBlock
  MOVE #0,d1              ;Memory type (0=any)
  ALibJsr $c002
  BEQ trackererr
  MOVE.l d0,fib           ;Save address
  MOVE.l lock,d1          ;Now get our lock
  MOVE.l fib,d2           ;and our file info block
  JSR -$66(a6)            ;and "examine" the file
  BEQ fileerr
  MOVE.l fib,a0
  MOVE.l $7c(a0),d0       ;Get the length of the file
  MOVE.l d0,tmpsize       ;Save it in our data table
  MOVE.l mtype,d1         ;Requested memory
  ALibJsr $c002           ;And allocate enough RAM
  MOVE.l d0,tmploc        ;Save the address in the table
  MOVE.l lock,d1          ;Get our lock
  JSR -$17a(a6)           ;and open the file for reading from our lock
  MOVE.l d0,hand          ;This is our file handle
  MOVE.l tmploc,d2        ;The file buffer...
  MOVE.l d0,d1            ;the handle...
  MOVE.l tmpsize,d3       ;the length...
  JSR -$2a(a6)            ;Now read the whole file in
  MOVE.l d0,readerr       ;Save the error code
nottrk:
  MOVE.l hand,d1          ;Get our file handle back
  JSR -$24(a6)            ;Close the file
  MOVE.l readerr,d0       ;Get the error code
  MOVE.l #-1,readerr      ;Set it to Blitz True
  CMP.l #-1,d0            ;Was it an error?
  BNE setvar              ;No, don't attempt to free the lock
  MOVE.l lock,d1          ;Get our lock
  JSR -$5a(a6)            ;and UnLock it
  MOVE.l #0,readerr       ;Set the error code to Blitz False
  MOVE.l tmploc,a1        ;Get the buffer location
  MOVE.l tmpsize,d0
  ALibJsr $c003           ;Free it
freefib:
  MOVE.l fib,a1           ;Get the address of our FileInfoBlock
  MOVE.l #$e0,d0          ;The size of it
  ALibJsr $c003           ;and free it
nofile:
  MOVEM.l (a7)+,a4-a6     ;Restore the registers
  MOVE.l readerr,d0       ;Set a return code or address
  RTS                     ;Done

setvar:
  MOVE.l #8,d0            ;8 bytes
  MOVE.l #0,d0            ;anywhere
  ALibJsr $c002           ;Allocate that memory
  MOVE.l d0,readerr       ;Save the location
  MOVE.l d0,a3
  MOVE.l tmploc,(a3)
  MOVE.l tmpsize,4(a3)
  BRA freefib

fileerr:
  MOVE.l #mess,d0
  TRAP#0
trackererr:
  MOVE.l #mess2,d0
  TRAP#0

mess:Dc.b "Can't Open File!",0
mess2:Dc.b "Support Library Error",0
  Even

;Some inportant data
hand:Dc.l 0
lock:Dc.l 0
fname: Dc.l 0
fib: Dc.l 0
readerr: Dc.l 0
tmpsize: Dc.l 0
tmploc: Dc.l 0
mtype: Dc.l 0

._bfree:
  CMP #0,d0
  BEQ endit
  MOVE.l d0,a3
  MOVE.l 0(a3),a1         ;Get file address
  MOVE.l 4(a3),d0         ;Get file size
  ALibJsr $c003           ;Free it
  MOVE.l a3,a1
  MOVE.l #8,d0            ;Size
  ALibJsr $c003           ;Free it
endit:
  RTS                     ;Done!

._bsave
  MOVEM.l a4-a6,-(a7)
  MOVE.l d0,fname         ;Save the name of the file we want to save
  MOVE.l d1,tmploc        ;Its address
  MOVE.l d2,tmpsize       ;and size
  MOVE.l fname,d1
  MOVE.l #1006,d2         ;Access mode
  JSR -$1e(a6)            ;and open the file for writing to our lock
  MOVE.l d0,hand          ;This is our file handle
  MOVE.l tmploc,d2        ;The file buffer...
  MOVE.l d0,d1            ;the handle...
  MOVE.l tmpsize,d3       ;the length...
  JSR -$30(a6)            ;Now write the file
  MOVE.l hand,d1          ;Get our file handle back
  JSR -$24(a6)            ;Close the file
  MOVEM.l (a7)+,a4-a6     ;Restore the registers
  MOVE.l readerr,d0       ;Set a return code or address
  RTS                     ;Done

