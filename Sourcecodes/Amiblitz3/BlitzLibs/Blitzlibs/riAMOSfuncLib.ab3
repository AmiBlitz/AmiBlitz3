; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "RIAmosFuncLib.obj"
; CreateIcon      = 0
; Residents       = "libnums.res,libmacs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1111
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;#riamosfunclib=75

!libheader {#riamosfunclib,init,0,finit,0}

!dumtoke{"MemBank","",_toke}

!astatement
!args
!libs
!subs {_reboot,0,0}
!name {"Reboot"," -- performs a cold reboot"}

!afunction {#word}
!args
!libs
!subs {_lisa,0,0}
!name {"Lisa"," -- returns Lisa chip version"}

!afunction {#byte}
!args {#string}
!libs
!subs {_makedir+1,0,0}
!name {"MakeDir","(dirname$)"}

!afunction {#byte}
!args {#string,#string}
!libs
!subs {_rename+1,0,0}
!name {"Rename","(oldfilename$,newfilename$)"}

!afunction {#long}
!args
!libs
!subs {_memfree,0,0}
!name {"MemFree",""}

!afunction {#long}
!args
!libs
!subs {_gttags,0,0}
!args {#long}
!libs
!subs {_gttags2,0,0}
!name {"GTTagValue","([tagvalue])"}


!afunction {#word}
!args
!libs
!subs {_timer,0,0}
!name {"Timer"," -- returns number of 50ths since machine startup"}

!astatement
!args {#long,#long,#long}
!libs
!subs {_copybyte,0,0}
!name {"CopyByte","sourceaddr,destaddr,bytes"}

!astatement
!args {#long,#long,#long}
!libs
!subs {_copyword,0,0}
!name {"CopyWord","sourceaddr,destaddr,words"}

!astatement
!args {#long,#long,#long}
!libs
!subs {_copylong,0,0}
!name {"CopyLong","sourceaddr,destaddr,longs"}

!afunction {#long}
!args {#string}
!libs
!subs {_filesize+1,0,0}
!name {"FileSize","(filename$)"}

!afunction {#long}
!args {#string,#long}
!libs
!subs {_bload1+1,0,0}
!args {#string,#long,#long}
!libs
!subs {_bload0+1,0,0}
!args {#string,#long,#long,#long}
!libs
!subs {_bload+1,0,0}
!args {#string,#long,#long,#long,#long}
!libs
!subs {_bload2+1,0,0}
!name {"BLoad","(filename$,address[,length,offset,memtype])"}

!afunction {#long}
!args {#string,#long}
!libs
!subs {_bsave2+1,0,0}
!args {#string,#long,#long}
!libs
!subs {_bsave+1,0,0}
!name {"BSave","(filename$,address/bank[,length])"}

!afunction {#long}
!args {#byte}
!libs
!subs {_start,0,0}
!name {"Start","(bank)"}

!afunction {#long}
!args {#byte}
!libs
!subs {_length,0,0}
!name {"Length","(bank)"}

!astatement
!args {#byte}
!libs
!subs {_erase,0,0}
!name {"Erase","(bank)"}

!astatement
!args
!libs
!subs {_eraseall,0,0}
!name {"EraseAll",""}

!afunction {#byte}
!args {#byte,#long}
!libs
!subs {_allocmem1,0,0}
!args {#byte,#long,#long}
!libs
!subs {_allocmem,0,0}
!name {"Reserve","(bank,length[,requirements])"}

!afunction {#byte}
!args
!libs
!subs {_findfreebank,0,0}
!args {#long}
!libs
!subs {_findfreebank,0,0}
!name {"NextBank","[startbank]"}

!astatement
!args {#long}
!libs
!subs {_cacheoff,0,0}
!name {"Cache","On|Off"}

!afunction {#long}
!args {#string,#long}
!libs
!subs {_pload+1,0,0}
!name {"PLoad","(filename$,address)"}

!astatement
!args {#long,#long}
!libs
!subs {fillmemzeros,0,0}
!args {#long,#long,#long}
!libs
!subs {fillmem,0,0}
!name {"FillMem","address,length[,value]"}

!afunction {#word}
!args
!libs
!subs {_keycode,0,0}
!name {"KeyCode",""}

!acommand {#long}
!args {#long,#long,#long}
!libs {#shapeslib,#ia0|#pd0}
!subs {_loadshapes,0,0}
!name {"CludgeShapes","shape#,numshapes,address"}

!acommand {#long}
!args {#long,#long}
!libs {#audiolib,#ia0|#pd0}
!subs {_loadsounds,0,0}
!name {"CludgeSound","sound#,address"}

finit:!nullsub{_libfinit,0,0}
init:!nullsub{_libinit,0,0}
!libfin


_gttags:
  MOVE.l  #0,d0
_gttags2:
  ADDI.l  #$80080000,d0
  RTS


.fillmemzeros:
  MOVEQ.l #0,d2
.fillmem:
  ANDI.l #$ff,d2
  CMP.l #50,d0          ; Did we specify bank or address
  BGE notalloc3          ; ADDRESS
  MOVE.l d0,banknum
  BSR _start
  TST.l d0
  BEQ notfoundit
notalloc3:
  MOVE.l d0,a0
floop:
  MOVE.b d2,(a0)+
  SUBQ.l #1,d1
  BNE floop
  RTS

temp: Dc.l  0

._copybank:      ; On entry - D0=Sourcebank D1=Dest
  MOVE.l  d0,temp                 ;Make copy of sourcebank num
  MOVE.l  d1,destbank             ;Make copy of destbank num
  BSR     _length                 ;Find length of source
  TST.l   d0                      ;
  BEQ     'oops                   ; If 0 then not exists!
  MOVE.l  d0,lengthmem            ; Store length of bank
  MOVE.l  destbank,banknum        ; Put dest
  MOVE.l  banknum,d0              ; into d0
  BSR     _start                  ; find start
  TST.l   d0
  BEQ     'okok1                  ; Is it there?
  MOVE.l  banknum,d0              ; put banknum (dest)
  BSR     eraseit                 ; erase it
'okok1:
  MOVE.l  banknum,d0
  MOVE.l  lengthmem,d1
  BSR     _allocmem1              ; Allocate the RAM
  TST.l   d0
  BEQ     'oops                   ; OK?
  MOVE.l  banknum,d0
  BSR     _start
  MOVE.l  d0,d1
  MOVE.l  temp,d0
  BSR     _start
  TST.l   d0
  BEQ     'oops
  MOVE.l  lengthmem,d2
  BSR     _copybyte
  MOVE.l  #-1,d0
  RTS
'oops:
  MOVE.l  #0,d0
  RTS


.FindFreeBank
_findfreebank:
afloop:
  MOVE.l  #50,maxbanks
  TST.l d4
  BEQ   'okok
  MOVE.l  #70,maxbanks
'okok:
  MOVE.l d0,banknum
  BSR _start
  TST.l d0
  BEQ foundit
  MOVE.l banknum,d0
  CMP.l maxbanks,d0
  BGT notfoundit
  ADDQ.l #1,d0
  BRA afloop
foundit:
  MOVE.l banknum,d0
  RTS
notfoundit:
  MOVEQ.l #-1,d0
  RTS

_keycode:
  MOVEQ.l #0,d0
  MOVE.b $bfec01,d0
  RTS

_xorlong:
  EOR.l d1,d0
  RTS

.Start
_start:
  ANDI.l #$000000ff,d0
  MOVE.l  #50,maxbanks
  TST.l d4
  BEQ   'okok
  MOVE.l  #70,maxbanks
'okok:
  CMP.l maxbanks,d0
  BGT   'oops
  LEA starttable(pc),a0
  ASL.l #2,d0
  ADD.l d0,a0
  MOVE.l (a0),d0
  RTS
'oops:
  MOVE.l  #0,d0
  RTS

.Length
_length:
  ANDI.l #$000000ff,d0
  MOVE.l  #50,maxbanks
  TST.l d4
  BEQ   'okok
  MOVE.l  #70,maxbanks
'okok:
  CMP.l maxbanks,d0
  BGT   'oops
  LEA lengthtable(pc),a0
  ASL.l #2,d0
  ADD.l d0,a0
  MOVE.l (a0),d0
  RTS
'oops:
  MOVE.l  #0,d0
  RTS

_libinit
  BSR dosopen
_libfinit:
  BSR _eraseall
  RTS

Even
banknum: Dc.l 0
lengthmem: Dc.l 0
Even
reqmem: Dc.l 0
destbank: Dc.l  0

.Erase
_erase:
  MOVE.l d0,banknum
  BSR _start
  TST.l d0
  BEQ endit
  BSR eraseit
endit:
  RTS


.EraseAll
_eraseall:
  MOVE.l #-1,d4
  MOVE.l #50,banknum
  MOVE.l banknum,d0
eloop:
  MOVE.l d0,banknum
  BSR _start
  TST.l d0
  BEQ empty2
  BSR eraseit
empty2:  MOVE.l banknum,d0
  DBRA d0,eloop
  RTS

eraseit:
  LEA starttable(pc),a0
  MOVE.l banknum,d2
  ASL.l #2,d2
  ADD.l d2,a0
  MOVE.l (a0),a1
  MOVE.l #0,(a0)
  LEA lengthtable(pc),a0
  MOVE.l banknum,d2
  ASL.l #2,d2
  ADD.l d2,a0
  MOVE.l (a0),d0
  MOVE.l #0,(a0)
  CLR.l d2
  MOVE.l 4,a6
  JSR -210(a6)

  RTS

.AllocMem
_allocmem1:
  MOVE.l #%1,d2
_allocmem:
  ANDI.l #$000000ff,d0
  MOVE.l d0,banknum
  MOVE.l d1,lengthmem
  BSR _start
  TST.l d0
  BEQ empty
  MOVE.l d2,-(a7)
  BSR eraseit
  MOVE.l (a7)+,d2
empty:
  MOVE.l 4,a6
  MOVE.l lengthmem,d0
  MOVE.l d2,d1
  CLR.l d2
  JSR -198(a6)
  TST.l d0
  BNE ok
  MOVE.l #0,d0
  RTS
ok:
  MOVE.l banknum,d1
  LEA starttable(pc),a0
  ASL.l #2,d1
  ADD.l d1,a0
  MOVE.l d0,(a0)
  MOVE.l banknum,d1
  MOVE.l lengthmem,d0
  LEA lengthtable(pc),a0
  ASL.l #2,d1
  ADD.l d1,a0
  MOVE.l d0,(a0)
  MOVE.l #-1,d0
bye:
  RTS

  Even
starttable:
Dcb.l 70,0
lengthtable:
Dcb.l 70,0

  Even
ver: Dc.l 0


_reboot:
MOVE.l 4,a6
JSR -726(a6)
RTS

_lisa:
MOVE.w $dff07c,d0
RTS

dosname: Dc.b "dos.library",0

dosbase: Dc.l 0

_makedir:
   MOVE.l d0,d6
   TST.l dosbase
   BNE skip1
   BSR dosopen
   TST.l d0
   BNE skip1
   BEQ dosnotopen
skip1:
   MOVE.l dosbase,a6
   MOVE.l d6,d1
   JSR -120(a6)
   TST.l d0
   BEQ dosnotopen
   JSR -90(a6)
   MOVE.l #-1,d0
   RTS

dosnotopen:
   MOVE.l #0,d0
   RTS

dosopen:
   MOVE.l 4,a6
   LEA dosname(pc),a1
   MOVE.l #37,d0
   JSR -552(a6)
   TST.l d0
   BEQ dosnotopen
   MOVE.l d0,dosbase
   RTS

_rename:
  MOVE.l d0,d4
  MOVE.l d1,d5
  TST.l dosbase
  BNE renamedosopen
  BSR dosopen
  TST.l d0
  BEQ dosnotopen
renamedosopen:
  MOVE.l d4,d1
  MOVE.l d5,d2
  MOVE.l dosbase,a6
  JSR -78(a6)
  RTS

_palmode:
  MOVE.w #32,$dff1dc
  RTS

_ntscmode:
  MOVE.w #0,$dff1dc
  RTS

_timer
MOVEQ.l #0,d0
MOVE.b $bfea01,d0
ROL.l #8,d0
MOVE.b $bfe901,d0
ROL.l #8,d0
MOVE.b $bfe801,d0
RTS



_resettimer
MOVE.b #0,$bfea01
MOVE.b #0,$bfe901
MOVE.b #0,$bfe801
RTS

_copybyte:
  MOVE.l d0,a0
  MOVE.l d1,a1
  MOVE.l d2,d0
  SUBQ.l #1,d0
memloop:
  MOVE.b (a0)+,(a1)+
  DBRA d0,memloop
  RTS

_copyword:
  MOVE.l d0,a0
  MOVE.l d1,a1
  MOVE.l d2,d0
  SUBQ.l #1,d0
memloop2:
  MOVE.w (a0)+,(a1)+
  DBRA d0,memloop2
  RTS

_copylong:
  MOVE.l d0,a0
  MOVE.l d1,a1
  MOVE.l d2,d0
  SUBQ.l #1,d0
memloop3:
  MOVE.l (a0)+,(a1)+
  DBRA d0,memloop3
  RTS

reserved:
  RTS

Even
fileinfoblock: Dc.l 0
Even
lock: Dc.l 0
filehandle: Dc.l 0

.FileSize
_filesize:
  MOVE.l d0,d6
  TST.l dosbase
  BNE skip3
  BSR dosopen
  TST.l d0
  BNE skip3
  BEQ dosnotopen
skip3:
  MOVE.l #2,d1
  MOVE.l #$80000000+2000,d2
  MOVE.l dosbase,a6
  JSR -228(a6)
  TST.l d0
  BEQ dosnotopen
  MOVE.l d0,fileinfoblock
  MOVE.l d6,d1
  MOVE.l #1005,d2
  CLR.l d0
  MOVE.l dosbase,a6
  JSR -84(a6)
  TST.l d0
  BEQ freedosobject
  MOVE.l d0,lock
  MOVE.l dosbase,a6
  MOVE.l lock,d1
  CLR.l d0
  MOVE.l fileinfoblock,d2
  JSR -102(a6)
  CLR.l d0
  MOVE.l lock,d1
  MOVE.l dosbase,a6
  JSR -90(a6)
  MOVE.l fileinfoblock,a0
  MOVE.l 124(a0),d0
  RTS

freedosobject:
  MOVE.l fileinfoblock,d2
  MOVE.l #2,d1
  MOVE.l dosbase,a6
  JSR -234(a6)
  MOVE.l #0,d0
  RTS

fileclose:
  MOVE.l dosbase,a6
  MOVE.l d0,d1
  CLR.l d0
  JSR -36(a6)
  RTS

  Even
filename:
  Dc.l 0
spos:     Dc.l  0


.BLoad
; On entry : D0=*filename  D1=Address/BankNumber  [D2=Length] [D3=Offset]
_bload2:
  MOVE.l  d4,d5
  BRA   _bload3
_bload0:
  MOVE.l #0,d3          ; No Offset
  BRA _bload
_bload1:                ; No Length or Offset
  MOVE.l #0,d2
  MOVE.l #0,d3
_bload:
  CLR.l  d5
_bload3:
  MOVE.l  d3,spos
  MOVE.l #50,maxbanks
  TST.l  d4
  BEQ    'okok
  MOVE.l #70,maxbanks
'okok:
  MOVE.l d0,filename
  MOVE.l d1,banknum
  TST.l d2              ; Have we specified length?
  BNE _okok             ; YES
  BSR _filesize         ; Get file size
  MOVE.l d0,d2
  TST.l d0              ; is it >0
  BNE _okok             ; YES
  MOVE.l #0,d0
  RTS                   ; ERROR
_okok:
  MOVE.l d2,lengthmem
  MOVE.l banknum,d1
  CMP.l maxbanks,d1          ; Did we specify bank or address
  BGE notalloc          ; ADDRESS
  MOVE.l d1,d0          ; Store Bank Number param
  BSR _length           ; Find Length of bank
  TST.l d0              ; Is it allocated?
  BEQ notalloc1         ; Not allocated
  MOVE.l lengthmem,-(a7)
  MOVE.l d0,lengthmem
  BSR eraseit           ; erase bank
  MOVE.l (a7)+,lengthmem
  MOVE.l lengthmem,d0
notalloc1:
  CLR.l d0
  MOVE.l d5,d2
  BSR empty             ; Allocate It
  TST.l d0
  BNE ok4
uh:
  MOVE.l #0,d0
  RTS
ok4:
  MOVE.l banknum,d0     ; Store bank number
  BSR _start            ; Find start address
  TST.l d0
  BEQ uh
  MOVE.l d0,banknum     ; Store new address (banknum => address)
notalloc:
  CLR.l d0
  MOVE.l #1005,d2        ; READ MODE
  MOVE.l filename,d1
  MOVE.l dosbase,a6
  JSR -30(a6)           ; Open file
  MOVE.l d0,filehandle
  TST.l d0              ; Success?
  BNE ok2               ; Yes
  MOVE.l #0,d0
  RTS
ok2:
  MOVE.l  spos,d3
  TST.l d3
  BEQ ok6
  MOVE.l dosbase,a6
  MOVE.l filehandle,d1
  MOVE.l d3,d2
  MOVE.l #-1,d3
  JSR -66(a6)
ok6:
  MOVE.l dosbase,a6
  CLR.l d0
  MOVE.l filehandle,d1    ; File handle
  MOVE.l banknum,d2       ; Address
  MOVE.l lengthmem,d3     ; Length
  JSR -42(a6)
  TST.l d0
  BNE ok3
  MOVE.l filehandle,d0
  BSR fileclose
  MOVE.l #0,d0
  RTS
ok3:
  MOVE.l filehandle,d0
  BSR fileclose
  MOVE.l #-1,d0
  RTS

.PLoad
; On entry : D0=*filename  D1=Address/BankNumber  [D2=Length]
_pload:
  MOVE.l d0,filename
  MOVE.l d1,banknum
  MOVE.l #0,d2
  MOVE.l #32,d3
  TST.l d2              ; Have we specified length?
  BNE '_okok             ; YES
  BSR _filesize         ; Get file size
  MOVE.l d0,d2
  TST.l d0              ; is it >0
  BNE '_okok             ; YES
  MOVE.l #0,d0
  RTS                   ; ERROR
'_okok:
  MOVE.l d2,lengthmem
  MOVE.l banknum,d1
  CMP.l #50,d1          ; Did we specify bank or address
  BGE 'notalloc          ; ADDRESS
  MOVE.l d1,d0          ; Store Bank Number param
  BSR _length           ; Find Length of bank
  TST.l d0              ; Is it allocated?
  BEQ 'notalloc1         ; Not allocated
  MOVE.l lengthmem,-(a7)
  MOVE.l d0,lengthmem
  BSR eraseit           ; erase bank
  MOVE.l (a7)+,lengthmem
  MOVE.l lengthmem,d0
'notalloc1:
  CLR.l d0
  MOVE.l #%1,d2         ; Any memory
  BSR empty             ; Allocate It
  TST.l d0
  BNE 'ok4
'uh:
  MOVE.l #0,d0
  RTS
'ok4:
  MOVE.l banknum,d0     ; Store bank number
  BSR _start            ; Find start address
  TST.l d0
  BEQ 'uh
  MOVE.l d0,banknum     ; Store new address (banknum => address)
'notalloc:
  CLR.l d0
  MOVE.l #1005,d2        ; READ MODE
  MOVE.l filename,d1
  MOVE.l dosbase,a6
  JSR -30(a6)           ; Open file
  MOVE.l d0,filehandle
  TST.l d0              ; Success?
  BNE 'ok2               ; Yes
  MOVE.l #0,d0
  RTS
'ok2:
  TST.l d3
  BEQ 'ok6
  MOVE.l dosbase,a6
  MOVE.l filehandle,d1
  MOVE.l d3,d2
  MOVE.l #-1,d3
  JSR -66(a6)
'ok6:
  MOVE.l dosbase,a6
  CLR.l d0
  MOVE.l filehandle,d1    ; File handle
  MOVE.l banknum,d2       ; Address
  MOVE.l lengthmem,d3     ; Length
  JSR -42(a6)
  TST.l d0
  BNE 'ok3
  MOVE.l filehandle,d0
  BSR fileclose
  MOVE.l #0,d0
  RTS
'ok3:
  MOVE.l filehandle,d0
  BSR fileclose
  MOVE.l #-1,d0
  RTS


.BSave
_bsave2:
  MOVEQ.l #0,d2
_bsave:
  MOVE.l #50,maxbanks
  TST.l  d4
  BEQ    'okok
  MOVE.l #70,maxbanks
'okok:
  MOVE.l d0,filename
  MOVE.l d1,banknum
  TST.l d2
  BNE   'okok2
  CMP.l maxbanks,d1
  BGE   uh2
  MOVE.l  banknum,d0
  BSR   _length
  MOVE.l  d0,d2
'okok2:
  MOVE.l d2,lengthmem
  MOVE.l banknum,d1
  CMP.l maxbanks,d1          ; Did we specify bank or address
  BGE notabank          ; ADDRESS
  MOVE.l d1,d0          ; Store Bank Number param
  BSR _start            ; Find Length of bank
  TST.l d0              ; Is it allocated?
  BEQ uh2               ; Not allocated
  BRA yesabank
uh2:
  MOVE.l #0,d0
  RTS
yesabank:
  MOVE.l d0,banknum
notabank:
  CLR.l d0
  MOVE.l #1006,d2        ; WRITE MODE
  MOVE.l filename,d1
  MOVE.l dosbase,a6
  JSR -30(a6)           ; Open file
  MOVE.l d0,filehandle
  TST.l d0              ; Success?
  BNE ok12               ; Yes
  MOVE.l #0,d0
  RTS
ok12:
  MOVE.l dosbase,a6
  CLR.l d0
  MOVE.l filehandle,d1    ; File handle
  MOVE.l banknum,d2       ; Address
  MOVE.l lengthmem,d3     ; Length
  JSR -48(a6)
  CMP.l #-1,d0
  BNE okwrite
errwrite:
  MOVE.l filehandle,d0
  BSR fileclose
  MOVE.l #0,d0
  RTS
okwrite:
  MOVE.l filehandle,d0
  BSR fileclose
  MOVE.l #-1,d0
  RTS

_cacheoff:
  CMP.l #-1,d0
  BEQ _cacheon
  MOVE.l 4,a6
  MOVE.l #%10,d0
  MOVE.l #%0,d1
  JSR -648(a6)
  RTS

_cacheon:
  MOVE.l 4,a6
  MOVE.l #%10,d0
  MOVE.l #%1,d1
  JSR -648(a6)
  RTS

_memfree:
  MOVE.l a6,-(a7)
  MOVE.l 4,a6
  MOVE.l #%1,d1
  JSR -216(a6)
  MOVE.l (a7)+,a6
  RTS

maxbanks: Dc.l  50

version: Dc.b "$VER: Func-Library v1.0 (1.7.1994)",0
    Even
libnum: Dc.b "Libnumber : ",#misclib,0
    Even

._loadsounds:
  MOVE.l  d1,sram
  MOVE.l  a0,saddr
  TST.l (a0)
  BEQ   'itsfree
  MOVEM.l d0-d1/a0,-(a7)
  MOVE.w 6(a0),d0
  MOVE.l (a0),a1
  ALibJsr $c003             ; Free old sample
  MOVEM.l (a7)+,d0-d1/a0
'itsfree:
  MOVE.l  sram,a0
  MOVEQ.l #0,d0
  CMP.l   #"8SVX",8(a0)     ; Is it an 8SVX?
  BNE     'oops
  CMP.l   #"VHDR",12(a0)    ; Followed by VHDR?
  BNE     'oops
  ADD.l   #12,a0
  ADD.l   4(a0),a0
  MOVEQ.l #0,d1
  MOVE.w  (a0),d1           ; Sample rate
  MOVE.l  #3579545,d0
  MOVE.l  #0,d2
'dloop:
  CMP.l   d1,d0
  BLT     'thatsit
  ADDQ.l  #1,d2
  SUB.l   d1,d0
  BRA     'dloop
'thatsit:
  MOVE.w  d2,sper
  MOVE.l  sram,a0
  ADD.l   #12,a0
  MOVEQ.l #0,d0
'notyet:
  CMP.l   #"BODY",(a0)
  BEQ     'foundit
  ADD.l   4(a0),a0
  ADD.l   #8,a0
  ADD.l   #1,d0
  CMP.l   #6,d0
  BGT     'oops
  BRA     'notyet
'foundit:
  MOVE.l  a0,sdata
  ADD.l   #8,sdata
  MOVE.l  4(a0),slen

  MOVE.l  a0,-(a7)
  MOVEQ.l #0,d0
  MOVE.l  slen,d0
  MOVE.l  #%10,d1
  ALibJsr $c002
  MOVE.l (a7)+,a0
  TST.l   d0
  BEQ     'oops

  MOVE.l  d0,-(a7)
  MOVE.l  d0,a1
  MOVE.l  sdata,a0
  MOVEQ.l #0,d0
  MOVE.l  slen,d0
  SUBQ.l  #1,d0
'copyloop:
  MOVE.b  (a0)+,(a1)+
  DBRA    d0,'copyloop
  MOVE.l  (a7)+,d0

  MOVE.l  saddr,a0
  MOVE.l  d0,(a0)
  MOVE.w  sper,4(a0)        ; _period.w
  MOVE.l  slen,d0
  ANDI.l  #$ffff,d0
  DIVU.w  #2,d0
  MOVE.w  d0,6(a0)
  MOVE.l  #0,8(a0)          ; No Loop!
  MOVE.w  #0,12(a0)         ; No Loop!
  MOVE.w  #0,14(a0)
  MOVEQ.l #-1,d0
  RTS

'oops:
  MOVEQ.l #123,d0
  RTS



;= D0 = Shape Number
;= D1 = Number of Shapes
;= D2 = Address
;= A0 = Addr Shape(D0)
._loadshapes:
  DIVU.w  #32,d0
  ANDI.l  #$0000ffff,d0
  MOVE.l  d0,shapestart
  MOVE.l  d1,numbershapes
  MOVE.l  d2,shaperam
  MOVE.l  a0,shapeptr
  TST.l d1              ; Have we specified >0 shapes
  BEQ   'oops
  MOVE.l  #0,shapenumber    ; Number of shapes done

'aloop:       ; A0=Addr Shape(shapenumber)
  MOVE.l  shapeptr,a0
  TST.w  (a0)
  BNE    'ok2
  MOVE.l shaperam,a0    ; Get RAM shape info...
  BRA     'ok1
'ok2:
  BSR    calcsize
  BSR     _freeshapemem ; Free the shape memory
  MOVE.l  shaperam,a0

'ok1:
  MOVE.w  #0,bytespershape
  TST.w   (a0)          ;
  BEQ     'continueplease
  TST.w   2(a0)
  BEQ     'continueplease

  BSR     calcsize
  BSR     _allocshapemem

  MOVE.l  shapeptr,a0

  TST.l   14(a0)        ; Were we successful
  BEQ     'oops

  MOVE.l  shaperam,a0
  MOVE.l  shapeptr,a1

  MOVE.l  (a0)+,(a1)+       ; Copy shape object structure
  MOVE.l  (a0)+,(a1)+
  MOVE.l  (a0)+,(a1)+
  MOVE.w  (a0)+,(a1)+
  ADD.l   #8,a0
  ADD.l   #8,a1
  MOVE.w  (a0)+,(a1)+
  MOVE.l  (a0)+,(a1)+
  MOVE.l  (a0)+,(a1)+

  MOVE.l  shapeptr,a1
  MOVE.l  14(a1),a2
  MOVE.l  bytespershape,d0
  SUBQ.l  #1,d0
'aloop1:
  MOVE.b  (a0)+,(a2)+
  DBRA    d0,'aloop1

  MOVE.l  shapestart,d0
  ALibJsr MakeCookie

'continueplease:
  ADD.l  #1,shapestart

  MOVE.l  shapeptr,a0
  ADD.l   #32,a0      ; Move to next shape structure
  MOVE.l  a0,shapeptr

  MOVE.l  shaperam,a0
  ADD.l   #32,a0
  ADD.l   bytespershape,a0  ; Move to next shape structure in RAM
  MOVE.l  a0,shaperam

  ADDQ.l  #1,shapenumber    ; Next shape
  MOVE.l  numbershapes,d7
  CMP.l   shapenumber,d7    ; Next p
  BGT     'aloop
  MOVE.l  #-1,d0
  RTS
'oops:
  MOVE.l  #0,d0
  RTS

.calcsize:
  MOVE.w (a0),pixwidth     ; Get old shape values
  MOVE.w 2(a0),pixheight
  MOVE.w 4(a0),pixdepth
  MOVEQ.l #0,d2
  MOVEQ.l #0,d1
  MOVE.w  22(a0),d1
  MOVE.l  d1,bytesperbitplane
  MOVE.l  d1,d2
  MULU.w  pixdepth,d2
  MOVE.l  d2,bytespershape
RTS

_freeshapemem:
  MOVE.l  a0,-(a7)
  MOVE.l  14(a0),a1
  MOVE.l  bytespershape,d0
  ALibJsr $c003
  MOVE.l  (a7)+,a0
  CMP.l   #0,18(a0)
  BNE     'oops
  MOVE.l  18(a0),a1
  MOVE.l  bytesperbitplane,d0
  ALibJsr $c003
'oops:
RTS

_allocshapemem:
  MOVE.l  bytespershape,d0
  MOVE.l  #%10,d1
  ALibJsr $c002
  MOVE.l  shapeptr,a0
  MOVE.l  d0,14(a0)             ; Store ptr to plane data
RTS


saddr:            Dc.l  0
sper:             Dc.w  0
slen:             Dc.l  0
sram:             Dc.l  0
shapeptr:         Dc.l  0
shaperam:         Dc.l  0
sdata:            Dc.l  0
numbershapes:     Dc.l  0
bytesperbitplane: Dc.l  0
bytespershape:    Dc.l  0
shapenumber:      Dc.l  0
pixwidth:         Dc.w  0
pixdepth:         Dc.w  0
pixheight:        Dc.w  0
shapestart:       Dc.l  0
