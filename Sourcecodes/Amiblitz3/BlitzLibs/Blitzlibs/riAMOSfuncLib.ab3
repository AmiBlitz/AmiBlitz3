; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Development:AmiBlitz3/BlitzLibs/Decompiled/thirdpartylibs"
; ExeFile         = "riAmosFuncLib_new.obj"
; CreateIcon      = 0
; Residents       = "libnums.res,libmacs.res,libjsrs.res,lvo.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 45
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 841
; CursorColumn    = 36
; LabelSearch     = "alibjsr"
; LabelRemark     = 0
; LabelAll        = 1
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
#riamosfunclib=75

ABSEXECBASE EQU $4
CIAA_TDLO EQU $BFE801
CIAA_TDMD EQU $BFE901
CIAA_TDHI EQU $BFEA01
CIAA_SDR EQU $BFEC01
DMACONR  EQU $DFF002
DENISEID EQU $DFF07C


SECSTRT_0:
!libheader {#riamosfunclib,init,0,finit,errorhandling}


!acommand{#long}                                                         ; token 1
!args{#long}
!libs
!subs {_cacheson,0,0}
!name {"CachesOn","bitmask"}


!astatement                                                              ; token 2
!args
!libs
!subs {_reboot,0,0}
!name {"Reboot"," -- performs a cold reboot"}


!afunction {#word}                                                       ; token 3
!args
!libs
!subs {_lisa,0,0}
!name {"Lisa"," -- returns Lisa chip version"}


!acommand{#long}                                                         ; token 4
!args {#string}
!libs
!subs {_makedir+1,0,0}
!name {"MakeDir","(dirname$)"}


!acommand{#long}                                                         ; token 5
!args {#string,#string}
!libs
!subs {_rename+1,0,0}
!name {"Rename","(oldfilename$,newfilename$)"}


!afunction{#long}                                                        ; token 6
!args
!libs
!subs {_memfree,0,0}
!name {"MemFree",""}


!afunction {#long}                                                       ; token 7
!args
!libs
!subs {_gttags,0,0}
!args {#long}
!libs
!subs {_gttags2,0,0}
!name {"GTTagValue","([tagvalue])"}


!afunction {#word}                                                       ; token 8
!args
!libs
!subs {_timer,0,0}
!name {"Timer",""}


;-- moved to vallib
;!afunction {#long}
;!args {#long,#long}
;!libs
;!subs {_min,0,0}
;!name {"Min","(a,b)"}


!astatement                                                             ; token 9
!args {#long,#long,#long}
!libs
!subs {_copybyte,0,0}
!name {"CopyByte","sourceaddr,destaddr,bytes"}


!astatement                                                             ; token 10
!args {#long,#long,#long}
!libs
!subs {_copyword,0,0}
!name {"CopyWord","sourceaddr,destaddr,words"}


!astatement                                                             ; token 11
!args {#long,#long,#long}
!libs
!subs {_copylong,0,0}
!name {"CopyLong","sourceaddr,destaddr,longs"}

;-- moved to vallib
;!afunction {#long}
;!args {#long,#long}
;!libs
;!subs {_max,0,0}
;!name {"Max","(a,b)"}


!afunction {#long}                                                       ; token 12
!args {#string}
!libs
!subs {_filesize+1,0,0}
!name {"FileSize","(filename$)"}


!acommand {#long}                                                       ; token 13
!args {#string}
!libs
!subs {_bload1+1,chkfile,0}

!args {#string,#long}
!libs
!subs {_bload0+1,chkfile,0}

!args {#string,#long,#long}
!libs
!subs {LAB_003D+1,chkfile,0}

!args {#string,#long,#long,#long}
!libs
!subs {_bload2+1,chkfile,0}

!args {#string,#long,#long,#long,#long}
!libs
!subs {LAB_003C+1,chkfile,0}

!name {"BLoad","(filename$,[address,[,length,[offset,[memtype]]]])"}


!acommand {#long}
!args {#string,#long}                                                   ; token 14
!libs
!subs {_bsave2+1,0,0}
!args {#string,#long,#long}
!libs
!subs {_bsave1+1,0,0}
!name {"BSave","(filename$,address/bank[,length])"}


!afunction{#long}                                                       ; token 15
!args {#long}
!libs
!subs {_start,0,0}
!name {"Start","(bank)"}


!afunction {#long}                                                      ; token 16
!args {#long}
!libs
!subs {_length,0,0}
!name {"Length","(bank)"}


!astatement                                                             ; token 17
!args {#long}
!libs
!subs {_erase,0,0}
!name {"Erase","bank"}


!astatement                                                             ; token 18
!args
!libs
!subs {_eraseall,0,0}
!name {"EraseAll",""}


!acommand {#long}                                                       ; token 19
!args {#long}
!libs
!subs {_allocmem1,0,0}

!args {#long,#long}
!libs
!subs {_allocmem,0,0}
!args {#long,#long,#long}

!libs
!subs {_allocmem2,0,0}
!name {"Reserve","(length)|(bank,length[,requirements])"}


!afunction{#long}                                                       ; token 20
!args
!libs
!subs {_findfreebank,0,0}
!args {#long}
!libs
!subs {_findfreebank,0,0}
!name {"NextBank","[startbank]"}


!acommand {#long}                                                       ; token 21
!args {#long}
!libs
!subs {_cachesoff,0,0}
!name {"CachesOff","bitmask"}


Ds.l 5
!astatement                                                             ; token 22
!args {#long,#long}
!libs
!subs {_fillmemzeros,0,0}
!args {#long,#long,#long}
!libs
!subs {_fillmem,0,0}
!name {"FillMem","address,length[,value]"}


!afunction {#word}                                                      ; token 23
!args
!libs
!subs {_keycode,0,0}
!name {"KeyCode",""}


Ds.l 10
!afunction{#long}                                                       ; token 24
!args
!libs
!subs{_blitterdone,0,0}
!name{"BlitterDone",""}


!astatement                                                             ; token 25
!args
!libs
!subs{_waitblitter,0,0}
!name{"WaitBlitter",""}


!afunction{#long}                                                       ; token 26
!args {#long}
!libs
!subs{_findvolume+1,0,0}
!name{"FindVolume","(volumename)"}


Ds.l 5
!acommand {#long}                                                       ; token 27
!args {#long,#long}
!libs
!subs {_swapbank,0,0}
!name {"SwapBank","(sourcebank,destbank)"}


!afunction {#string}                                                    ; token 28
!args {#string}
!libs
!subs {_devicename,0,0}
!name {"DeviceName$","(volumename$)"}
 

!acommand {#long}                                                       ; token 29
!args {#string}
!libs
!subs {_changedir+1,0,0}
!name {"ChangeDir","dir$"}


!acommand {#long}                                                       ; token 30
!args {#long}
!libs
!subs {_banklimit1,0,0}
!args
!libs
!subs {_banklimit,0,0}
!name {"BankLimit","[numbanks]"}


!acommand {#long}                                                       ; token 31
!args {#string,#array}
!libs
!subs {_saveexec+1,0,0}
!name {"SaveExec","filename$,list()"}

; ===========================================================================================
finit:!nullsub{_libfinit,0,0}
init:!nullsub{_libinit,0,0}
!libfin
; ===========================================================================================

_libinit:
  LEA str_doslib(PC),A1
  MOVEQ #0,D0
  MOVEA.l ABSEXECBASE,A6
  JSR _OpenLibrary(A6)
  MOVE.l D0,ptr_dosbase

  MOVE.l maxbanks,D0
  ASL.l #3,D0
  MOVE.l #$00010000,D1
  ALibJsr #globalalloc
  MOVE.l D0,bankdata_begin

  MOVE.l maxbanks,D1
  ASL.l #2,D1
  ADD.l D1,D0
  MOVE.l D0,bankdata_end
RTS

_libfinit:
  MOVEA.l ptr_dosbase,A6
  MOVE.l oldlock,D1
  BEQ.w LAB_0005
    JSR _UnLock(A6)
  LAB_0005:

  BSR.w _eraseall

  MOVEA.l bankdata_begin,A1
  MOVE.l maxbanks,D0
  ASL.l #3,D0
  ALibJsr #globalfree

  MOVEA.l ABSEXECBASE,A6
  MOVEA.l ptr_dosbase,A1
  JSR _CloseLibrary(A6)
RTS

return_False:
  MOVEQ #0,D0
RTS

return_True:
  MOVEQ #-1,D0
RTS

_changedir:
  MOVEA.l ptr_dosbase,A6
  MOVEQ #-2,D2
  MOVE.l D0,D1
  JSR _Lock(A6)
  MOVE.l D0,D1
  BEQ.w return_False

  MOVE.l D0,newlock
  JSR _CurrentDir(A6)
  TST.l D0
  BEQ.w LAB_000A
    MOVE.l oldlock,D1
    BEQ.w LAB_0009
      JSR _UnLock(A6)
    LAB_0009:
    MOVE.l newlock,oldlock
    MOVEQ #-1,D0
  LAB_000A:
RTS

_blitterdone:
  BTST #6,DMACONR
  BNE.w LAB_000C
    MOVEQ #-1,D0
    RTS
  LAB_000C:
    MOVEQ #0,D0
RTS

_waitblitter:
  BTST #6,DMACONR
  BNE.w _waitblitter
RTS

_gttags2:
  Dc.w $a000,'rts-'s
 's:
  ADDI.l #$80080000,D0
 'rts

_gttags:
  Dc.w $a000,'rts-'s
 's:
  MOVE.l #$80080000,D0
 'rts

_fillmemzeros:
  MOVEA.l ABSEXECBASE,A6
  MOVEQ #0,D2

_fillmem:
  CMP.l maxbanks,D0
  BGE.w LAB_0012
    MOVE.l D0,newlock
    BSR.w _start
    TST.l D0
    BEQ.w LAB_001B
  LAB_0012:
  MOVEA.l D0,A0
  LAB_0013:
    MOVE.b D2,(A0)+
    SUBQ.l #1,D1
  BNE.w LAB_0013
RTS

_max:
  CMP.l D0,D1
  BLT.w LAB_0015
    MOVE.l D1,D0
  LAB_0015:
RTS

_min:
  CMP.l D0,D1
  BGT.w LAB_0017
    MOVE.l D1,D0
  LAB_0017:
RTS

_findfreebank:
  MOVEA.l ABSEXECBASE,A6  ;09e4: 2c7900000004
  LAB_0019:
    CMP.l maxbanks,D0  ;09ea: b0b900001238
    BGE.w LAB_001B  ;09f0: 6c000030
    MOVE.l D0,newlock  ;09f4: 23c000001224
    BSR.w _start  ;09fa: 61000038
    TST.l D0   ;09fe: 4a80
    BEQ.w LAB_001A  ;0a00: 67000018
    MOVE.l newlock,D0  ;0a04: 203900001224
    CMP.l maxbanks,D0  ;0a0a: b0b900001238
    BGE.w LAB_001B  ;0a10: 6c000010
    ADDQ.l #1,D0   ;0a14: 5280
  BRA.w LAB_0019  ;0a16: 6000ffd2

  LAB_001A:
  MOVE.l newlock,D0
  RTS
  LAB_001B:
  MOVEQ #-1,D0
RTS

_keycode:
  MOVEQ #0,D0
  MOVE.b CIAA_SDR,D0
  RTS
  EOR.l D1,D0
RTS

_start:
  CMP.l maxbanks,D0
  BGE.w return_False

  MOVEA.l bankdata_end,A0
  ASL.l #2,D0
  ADDA.l D0,A0
  MOVE.l (A0),D0
RTS

_length:
   CMP.l maxbanks,D0
   BGE.w return_False
   
   MOVEA.l bankdata_begin,A0
   ASL.l #2,D0
   MOVE.l 0(A0,D0.l),D0
 RTS

_swapbank:
  MOVE.l D0,D6
  MOVE.l D1,D7
  BSR.w _length                     ;check first bank
  TST.l D0
  BEQ.w return_False

  MOVE.l D7,D0
  BSR.w _length                     ;check second bank
  TST.l D0
  BEQ.w return_False

  MOVEA.l bankdata_begin,A0
  MOVEA.l A0,A1
  MOVE.l D6,D0
  MOVE.l D7,D1
  ASL.l #2,D0 
  ASL.l #2,D1
  ADDA.l D0,A0
  ADDA.l D1,A1
  MOVE.l (A0),D4
  MOVE.l (A1),D5
  MOVE.l D5,(A0)
  MOVE.l D4,(A1)

  MOVEA.l bankdata_end,A0
  MOVEA.l A0,A1
  ADDA.l D0,A0
  ADDA.l D1,A1
  MOVE.l (A0),D4
  MOVE.l (A1),D5
  MOVE.l D5,(A0)
  MOVE.l D4,(A1)

  MOVEQ #-1,D0
RTS

_erase:
  MOVE.l D0,newlock
  BSR.w _start
  TST.l D0
  BEQ.w LAB_0021
    BRA.w erasebank
  LAB_0021:
RTS

_eraseall:
  MOVEQ #-1,D4
  MOVE.l maxbanks,D0
  SUBQ.l #1,D0
  LAB_0023:
    MOVE.l D0,newlock
    BSR.w _start
    TST.l D0
    BEQ.w LAB_0024
      BSR.w erasebank
    LAB_0024:
    MOVE.l newlock,D0
  DBF D0,LAB_0023
RTS

erasebank:
  MOVEA.l bankdata_end,A0
  MOVE.l newlock,D2
  ASL.l #2,D2
  ADDA.l D2,A0
  MOVEA.l (A0),A1
  MOVE.l #$00000000,(A0)

  MOVEA.l bankdata_begin,A0
  MOVE.l newlock,D2
  ASL.l #2,D2
  ADDA.l D2,A0
  MOVE.l (A0),D0
  MOVE.l #$00000000,(A0)

  MOVEQ #0,D2
  MOVE.l A6,-(A7)
  MOVEA.l ABSEXECBASE,A6
  JSR _FreeMem(A6)            ; A1: memoryBlock, D0: byteSize
  MOVEA.l (A7)+,A6
RTS

_allocmem1:
  MOVE.l D0,-(A7)
  MOVEQ #0,D0
  ALibJsr #riamosfunclib LSL 7 + 20 ;find free bank ;$2596 ; reduced by 2 because of min/max moved out of lib

  MOVE.l (A7)+,D1
  TST.l D1
  BMI.w return_False

  MOVE.l D0,-(A7)
  ALibJsr #riamosfunclib LSL 7 + 19,1 ;reserve bank ;$2595 ; reduced by 2 because of min/max moved out of lib

  MOVE.l D0,D1
  MOVE.l (A7)+,D0
  TST.l D1
  BEQ.w return_True
RTS

_allocmem:
  MOVEQ #1,D2
_allocmem2:
  MOVE.l D0,newlock
  MOVE.l D1,LAB_0071
  BSR.w _start
  TST.l D0
  BEQ.w LAB_0029
    MOVE.l D2,-(A7)
    BSR.w erasebank
    MOVE.l (A7)+,D2
  LAB_0029:

  MOVE.l A6,-(A7)
  MOVEA.l ABSEXECBASE,A6
  MOVE.l LAB_0071,D0
  MOVE.l D2,D1
  MOVEQ #0,D2
  JSR _AllocMem(A6)
  MOVEA.l (A7)+,A6
  TST.l D0
  BNE.w LAB_002A
    MOVEQ #0,D0
    RTS
  LAB_002A:

  MOVE.l newlock,D1
  MOVEA.l bankdata_end,A0
  ASL.l #2,D1
  ADDA.l D1,A0
  MOVE.l D0,(A0)
  MOVE.l newlock,D1
  MOVE.l LAB_0071,D0
  MOVEA.l bankdata_begin,A0
  ASL.l #2,D1
  ADDA.l D1,A0
  MOVE.l D0,(A0)
  MOVEQ #-1,D0
RTS

_reboot:
  MOVEA.l ABSEXECBASE,A6
  JSR _ColdReboot(A6)
RTS

_lisa:
  MOVE.w DENISEID,D0
RTS

_makedir:
  MOVEA.l ptr_dosbase,A6
  MOVE.l D0,D6
  MOVE.l D6,D1
  JSR _CreateDir(A6)
  TST.l D0
  BEQ.w return_False

  JSR _UnLock(A6)
  MOVEQ #-1,D0
RTS

_rename:
 MOVEA.l ptr_dosbase,A6
 MOVE.l D1,D2
 MOVE.l D0,D1
 JSR _Rename(A6)
RTS

_timer:
  MOVEQ #0,D0
  MOVE.b CIAA_TDHI,D0
  ROL.l #8,D0
  MOVE.b CIAA_TDMD,D0
  ROL.l #8,D0
  MOVE.b CIAA_TDLO,D0
RTS

_copybyte:
  MOVEA.l D0,A0
  MOVEA.l D1,A1
  TST.l D2
  BMI.w return_False

  LAB_0031:
    MOVE.b (A0)+,(A1)+
    SUBQ.l #1,D2
  BNE.w LAB_0031
RTS

_copyword:
  MOVEA.l D0,A0
  MOVEA.l D1,A1
  TST.l D2
  BMI.w return_False
  LAB_0033:
    MOVE.w (A0)+,(A1)+
    SUBQ.l #1,D2
  BNE.w LAB_0033
RTS

_copylong:
  MOVEA.l D0,A0
  MOVEA.l D1,A1
  TST.l D2
  BMI.w return_False

  LAB_0035:
    MOVE.l (A0)+,(A1)+
    SUBQ.l #1,D2
  BNE.w LAB_0035
RTS

_filesize:
  MOVE.l D0,D6
  MOVEA.l ABSEXECBASE,A6
  MOVE.l #$00000108,D0
  MOVE.l #$00010000,D1
  JSR _AllocMem(A6)
  TST.l D0
  BEQ.w return_False

  MOVE.l D0,LAB_006D
  MOVEA.l ptr_dosbase,A6
  MOVE.l D6,D1
  MOVEQ #-2,D2
  MOVEQ #0,D0
  JSR _Lock(A6)
  MOVE.l D0,LAB_006E
  BEQ.w LAB_0038
  MOVE.l D0,LAB_006E
  MOVE.l LAB_006E,D1
  MOVEQ #0,D0
  MOVE.l LAB_006D,D2
  JSR _Examine(A6)
  MOVEQ #0,D0
  MOVE.l LAB_006E,D1
  JSR _UnLock(A6)
  MOVEA.l LAB_006D,A0
  MOVE.l 124(A0),D7
  BSR.w LAB_0038
  MOVE.l D7,D0
RTS

LAB_0038:
  MOVEA.l ABSEXECBASE,A6
  MOVEA.l LAB_006D,A1
  MOVE.l #$00000108,D0
  JSR _FreeMem(A6)
  MOVEA.l ptr_dosbase,A6
  MOVEQ #0,D0
RTS

LAB_0039:
  MOVE.l D0,D1
  MOVEQ #0,D0
  JSR _Close(A6)
RTS

_bload1:
  MOVE.l D0,LAB_006B
  ALibJsr #riamosfunclib LSL 7 + 12         ;filesize ; $258e ; reduced by 2 because of min/max moved out of lib

  TST.l D0
  BEQ.w return_True

  MOVEQ #0,D1
  MOVEQ #0,D2
  ALibJsr #riamosfunclib LSL 7 + 19         ;reserve bank; $2595 ; reduced by 2 because of min/max moved out of lib

  TST.l D0
  BMI.w return_False

  MOVE.l D0,-(A7)
  ALibJsr #riamosfunclib LSL 7 + 15         ;get start of bank ; $2591 ; reduced by 2 because of min/max moved out of lib

  MOVE.l D0,D1
  MOVE.l LAB_006B,D0
  ALibJsr #riamosfunclib LSL 7 + 13,1       ;load file to bank ; $258f ; reduced by 2 because of min/max moved out of lib

  MOVE.l (A7)+,D1
  TST.l D0
  BNE.w LAB_003B
  LAB_003B:
  MOVE.l D1,D0
RTS

LAB_003C:
  MOVE.l D4,D5
  BRA.w LAB_0041
LAB_003D:
  MOVEQ #0,D4
  MOVEQ #0,D3
  BRA.w _bload2

_bload0:
  MOVEQ #0,D2
  MOVEQ #0,D3
_bload2:
  MOVEQ #0,D5
LAB_0041:
  MOVEA.l ptr_dosbase,A6
  MOVE.l D3,LAB_006C
  MOVE.l D0,LAB_006B
  MOVE.l D1,newlock
  TST.l D2
  BNE.w LAB_0042
    BSR.w _filesize
    MOVE.l D0,D2
    TST.l D0
    BEQ.w return_False
  LAB_0042:

  MOVE.l D2,LAB_0071
  MOVE.l newlock,D1
  CMP.l maxbanks,D1
  BGE.w LAB_0044
    MOVE.l D1,D0
    BSR.w _length
    TST.l D0
    BEQ.w LAB_0043
      MOVE.l LAB_0071,-(A7)
      MOVE.l D0,LAB_0071
      BSR.w erasebank
      MOVE.l (A7)+,LAB_0071
      MOVE.l LAB_0071,D0
    LAB_0043:
    MOVEQ #0,D0   ;0dbe: 7000
    MOVE.l D5,D2   ;0dc0: 2405
    BSR.w LAB_0029  ;0dc2: 6100fdb6
    TST.l D0   ;0dc6: 4a80
    BEQ.w return_False  ;0dc8: 6700fb5a

    MOVE.l newlock,D0  ;0dcc: 203900001224
    MOVE.l D0,LAB_0076  ;0dd2: 23c000001240
    BSR.w _start  ;0dd8: 6100fc5a
    MOVE.l D0,newlock  ;0ddc: 23c000001224
    BEQ.w return_False  ;0de2: 6700fb40
  LAB_0044:

  MOVEQ #0,D0   ;0de6: 7000
  MOVE.l #$000003ed,D2  ;0de8: 243c000003ed
  MOVE.l LAB_006B,D1  ;0dee: 223900001210
  JSR _Open(A6)   ;0df4: 4eaeffe2
  MOVE.l D0,LAB_006F  ;0df8: 23c000001220
  TST.l D0   ;0dfe: 4a80
  BNE.w LAB_0045  ;0e00: 66000006
    MOVEQ #0,D0   ;0e04: 7000
    RTS    ;0e06: 4e75
  LAB_0045:
  MOVE.l LAB_006C,D3  ;0e08: 263900001214
  TST.l D3   ;0e0e: 4a83
  BEQ.w LAB_0046  ;0e10: 67000010
   MOVE.l LAB_006F,D1  ;0e14: 223900001220
   MOVE.l D3,D2   ;0e1a: 2403
   MOVEQ #-1,D3   ;0e1c: 76ff
   JSR _Seek(A6)   ;0e1e: 4eaeffbe
  LAB_0046:
  MOVEQ #0,D0   ;0e22: 7000
  MOVE.l LAB_006F,D1  ;0e24: 223900001220
  MOVE.l newlock,D2  ;0e2a: 243900001224
  MOVE.l LAB_0071,D3  ;0e30: 263900001228
  JSR _Read(A6)
  TST.l D0
  BEQ.w LAB_0047  ;0e3c: 67000010
    MOVE.l LAB_006F,D0  ;0e40: 203900001220
    BSR.w LAB_0039  ;0e46: 6100feac
    MOVEQ #-1,D0   ;0e4a: 70ff
    RTS    ;0e4c: 4e75
  LAB_0047:
    MOVE.l LAB_006F,D0  ;0e4e: 203900001220
    BSR.w LAB_0039  ;0e54: 6100fe9e
    MOVEQ #0,D0   ;0e58: 7000
RTS

LAB_0048: ORI.b #$00,D0
          ORI.b #$00,D0
          ORI.b #$00,D0
          ORI.b #$00,D0
          ORI.b #$00,D0
          ORI.b #$00,D0
          ORI.b #$00,D0
          ORI.b #$00,D0
          ORI.b #$00,D0
LAB_0049: ORI.b #$00,D0

_saveexec:
  MOVEA.l D1,A0
  CMPI.l #$6c497354,-4(A0) ; "lIsT" -> check if pointer leads to a linked list
  BNE.w LAB_004E
    BSR.w LAB_0058
    TST.l D6
    BEQ.w LAB_004F
      MOVE.w #$ffe4,D6
      TST.l 0(A0,D6.w)
      BEQ.w LAB_004F
        MOVEA.l 0(A0,D6.w),A1
        MOVEQ #0,D7
        MOVEQ #0,D6
        LAB_004B:
          MOVE.l 10(A1),D0
          MOVE.l 14(A1),D1
          MOVE.w 8(A1),D3
          CMPI.w #$03e9,D3
          BNE.w LAB_004C
            BSR.w LAB_0052
            BRA.w LAB_004D
          LAB_004C:
            CMPI.w #$03f0,D3
            BNE.w LAB_004D
            BSR.w LAB_0054
            BRA.w LAB_004D
          LAB_004D:
          ADDQ.l #1,D6
          MOVEA.l (A1),A1
        TST.l (A1)
        BNE.w LAB_004B
        BSR.w LAB_005A
        MOVEQ #-1,D0
        RTS
  LAB_004E:
    MOVEQ #0,D0
    RTS
  LAB_004F:
RTS

LAB_0050:
  MOVE.l D1,D2
  ANDI.l #$00000003,D2
  BEQ.w LAB_0051
    ANDI.l #$fffffffc,D1
    ADDQ.l #4,D1
  LAB_0051:
  MOVE.l D1,D2
  ASR.l #2,D2
RTS

LAB_0052:
  MOVEM.l D0-D3/A0-A1,-(A7) ;0f0e: 48e7f0c0
  BSR.w LAB_0050  ;0f12: 6100ffe0
  ADD.l D2,D7   ;0f16: de82
  LEA LAB_0048(PC),A2  ;0f18: 45faff42
  MOVE.l #$000003e9,D3  ;0f1c: 263c000003e9
  OR.l 26(A1),D3  ;0f22: 86a9001a
  MOVE.l D3,(A2)   ;0f26: 2483
  MOVEQ #8,D3   ;0f28: 7608
  MOVE.l D2,4(A2)  ;0f2a: 25420004
  BSR.w LAB_0057  ;0f2e: 61000092
  BSR.w LAB_0056  ;0f32: 61000076
  TST.l 18(A1)   ;0f36: 4aa90012
  BEQ.w LAB_0053  ;0f3a: 67000006
    BSR.w LAB_0055  ;0f3e: 6100000a
  LAB_0053:
  MOVEM.l (A7)+,D0-D3/A0-A1 ;0f42: 4cdf030f
RTS    ;0f46: 4e75

LAB_0054:
RTS    ;0f48: 4e75

LAB_0055:
  MOVEM.l D0-D3,-(A7)  ;0f4a: 48e7f000
  MOVE.l 18(A1),D0  ;0f4e: 20290012
  MOVE.l 22(A1),D1  ;0f52: 22290016
  LEA LAB_0048(PC),A2  ;0f56: 45faff04
  MOVE.l #$000003ec,(A2)+ ;0f5a: 24fc000003ec
  ASR.l #2,D1   ;0f60: e481
  MOVE.l D1,(A2)+  ;0f62: 24c1
  MOVE.l D6,(A2)+  ;0f64: 24c6
  MOVEM.l D0-D4/A0-A2,-(A7) ;0f66: 48e7f8e0
  LEA LAB_0048(PC),A2  ;0f6a: 45fafef0
  MOVEQ #12,D3   ;0f6e: 760c
  MOVE.l LAB_0049,D1  ;0f70: 223900000e80
  MOVE.l A2,D2   ;0f76: 240a
  JSR _Write(A6)   ;0f78: 4eaeffd0
  MOVEM.l (A7)+,D0-D4/A0-A2 ;0f7c: 4cdf071f
  ASL.l #2,D1   ;0f80: e581
  MOVE.l D1,D3   ;0f82: 2601
  MOVE.l LAB_0049,D1  ;0f84: 223900000e80
  MOVE.l D0,D2   ;0f8a: 2400
  JSR _Write(A6)   ;0f8c: 4eaeffd0
  LEA LAB_0048(PC),A2  ;0f90: 45fafeca
  CLR.l (A2)   ;0f94: 4292
  MOVE.l A2,D2   ;0f96: 240a
  MOVEQ #4,D3   ;0f98: 7604
  MOVE.l LAB_0049,D1  ;0f9a: 223900000e80
  JSR _Write(A6)   ;0fa0: 4eaeffd0
  MOVEM.l (A7)+,D0-D3  ;0fa4: 4cdf000f
RTS    ;0fa8: 4e75

LAB_0056:
  MOVEM.l D0-D3/A0-A1,-(A7) ;0faa: 48e7f0c0
  MOVE.l D0,D2   ;0fae: 2400
  MOVE.l D1,D3   ;0fb0: 2601
  MOVE.l LAB_0049,D1  ;0fb2: 223900000e80
  JSR _Write(A6)   ;0fb8: 4eaeffd0
  MOVEM.l (A7)+,D0-D3/A0-A1 ;0fbc: 4cdf030f
RTS    ;0fc0: 4e75

LAB_0057:
  MOVEM.l D0-D3/A0-A1,-(A7) ;0fc2: 48e7f0c0
  MOVE.l LAB_0049,D1  ;0fc6: 223900000e80
  MOVE.l A2,D2   ;0fcc: 240a
  JSR _Write(A6)   ;0fce: 4eaeffd0
  MOVEM.l (A7)+,D0-D3/A0-A1 ;0fd2: 4cdf030f
RTS    ;0fd6: 4e75

LAB_0058:
 MOVEM.l D0-D1/A0-A1,-(A7) ;0fd8: 48e7c0c0
 MOVEA.l ptr_dosbase,A6  ;0fdc: 2c7900001244
 MOVE.l D0,D1   ;0fe2: 2200
 MOVE.l #$000003ee,D2  ;0fe4: 243c000003ee
 JSR _Open(A6)   ;0fea: 4eaeffe2
 TST.l D0   ;0fee: 4a80
 BEQ.w LAB_0059  ;0ff0: 67000032
   MOVE.l D0,LAB_0049  ;0ff4: 23c000000e80
   MOVE.l D0,D1   ;0ffa: 2200
   LEA LAB_0048(PC),A2  ;0ffc: 45fafe5e
   MOVE.l #$000003f3,(A2)+ ;1000: 24fc000003f3
   CLR.l (A2)+   ;1006: 429a
   CLR.l (A2)+   ;1008: 429a
   CLR.l (A2)+   ;100a: 429a
   CLR.l (A2)+   ;100c: 429a
   CLR.l (A2)+   ;100e: 429a
   LEA LAB_0048(PC),A2  ;1010: 45fafe4a
   MOVE.l A2,D2   ;1014: 240a
   MOVEQ #24,D3   ;1016: 7618
   JSR _Write(A6)   ;1018: 4eaeffd0
   MOVEM.l (A7)+,D0-D1/A0-A1 ;101c: 4cdf0303
   MOVEQ #-1,D6   ;1020: 7cff
   RTS    ;1022: 4e75
 LAB_0059:
   MOVEM.l (A7)+,D0-D1/A0-A1 ;1024: 4cdf0303
   MOVEQ #0,D6   ;1028: 7c00
RTS    ;102a: 4e75

LAB_005A:
  LEA LAB_0048(PC),A2  ;102c: 45fafe2e
  MOVE.l #$000003f2,(A2)  ;1030: 24bc000003f2
  MOVE.l LAB_0049,D1  ;1036: 223900000e80
  MOVE.l A2,D2   ;103c: 240a
  MOVEQ #4,D3   ;103e: 7604
  JSR _Write(A6)   ;1040: 4eaeffd0
  MOVE.l LAB_0049,D1  ;1044: 223900000e80
  MOVEQ #8,D2   ;104a: 7408
  MOVEQ #-1,D3   ;104c: 76ff
  JSR _Seek(A6)   ;104e: 4eaeffbe
  LEA LAB_0048(PC),A2  ;1052: 45fafe08
  MOVE.l D6,(A2)   ;1056: 2486
  CLR.l 4(A2)   ;1058: 42aa0004
  CLR.l 8(A2)   ;105c: 42aa0008
  MOVE.l D7,12(A2)  ;1060: 2547000c
  MOVE.l LAB_0049,D1  ;1064: 223900000e80
  MOVE.l A2,D2   ;106a: 240a
  MOVEQ #16,D3   ;106c: 7610
  JSR _Write(A6)   ;106e: 4eaeffd0
  MOVE.l LAB_0049,D1  ;1072: 223900000e80
  JSR _Close(A6)   ;1078: 4eaeffdc
RTS    ;107c: 4e75

_bsave2:
  MOVEQ #0,D2   ;107e: 7400
_bsave1:
  MOVEA.l ptr_dosbase,A6  ;1080: 2c7900001244
  MOVE.l D0,LAB_006B  ;1086: 23c000001210
  MOVE.l D1,newlock  ;108c: 23c100001224
  TST.l D2   ;1092: 4a82
  BNE.w LAB_005D  ;1094: 66000018
   CMP.l maxbanks,D1  ;1098: b2b900001238
   BGE.w return_False  ;109e: 6c00f884
     MOVE.l newlock,D0  ;10a2: 203900001224
     BSR.w _length  ;10a8: 6100f9a2
     MOVE.l D0,D2   ;10ac: 2400
  LAB_005D:
  MOVE.l D2,LAB_0071  ;10ae: 23c200001228
  MOVE.l newlock,D1  ;10b4: 223900001224
  CMP.l maxbanks,D1  ;10ba: b2b900001238
  BGE.w LAB_005E  ;10c0: 6c000012
    MOVE.l D1,D0   ;10c4: 2001
    BSR.w _start  ;10c6: 6100f96c
    MOVE.l D0,newlock  ;10ca: 23c000001224
    BEQ.w return_False  ;10d0: 6700f852
  LAB_005E:
  MOVEQ #0,D0   ;10d4: 7000
  MOVE.l #$000003ee,D2  ;10d6: 243c000003ee
  MOVE.l LAB_006B,D1  ;10dc: 223900001210
  JSR _Open(A6)   ;10e2: 4eaeffe2
  MOVE.l D0,LAB_006F  ;10e6: 23c000001220
  BNE.w LAB_005F  ;10ec: 66000006
    MOVEQ #0,D0   ;10f0: 7000
    RTS    ;10f2: 4e75
  LAB_005F:
  MOVEQ #0,D0   ;10f4: 7000
  MOVE.l LAB_006F,D1  ;10f6: 223900001220
  MOVE.l newlock,D2  ;10fc: 243900001224
  MOVE.l LAB_0071,D3  ;1102: 263900001228
  JSR _Write(A6)   ;1108: 4eaeffd0
  TST.l D0   ;110c: 4a80
  BPL.w LAB_0060  ;110e: 6a000010
    MOVE.l LAB_006F,D0  ;1112: 203900001220
    BSR.w LAB_0039  ;1118: 6100fbda
    MOVEQ #0,D0   ;111c: 7000
    RTS    ;111e: 4e75
  LAB_0060:
    MOVE.l LAB_006F,D0  ;1120: 203900001220
    BSR.w LAB_0039  ;1126: 6100fbcc
    MOVEQ #-1,D0   ;112a: 70ff
RTS

_cachesoff:
  MOVEA.l ABSEXECBASE,A6
  MOVE.l D0,D1
  MOVEQ #0,D0
  JSR _CacheControl(A6)
RTS

_cacheson:
  MOVEA.l ABSEXECBASE,A6
  MOVE.l D0,D1
  JSR _CacheControl(A6)
RTS

_memfree:
  MOVEA.l ABSEXECBASE,A6
  MOVEQ #1,D1
  JSR _AvailMem(A6)
RTS

_findvolume:
  MOVEA.l ptr_dosbase,A6  ;115a: 2c7900001244
  MOVE.l D0,D7   ;1160: 2e00
  MOVE.l #$0000003d,D1  ;1162: 223c0000003d
  JSR _LockDosList (A6)  ;1168: 4eaefd72
  TST.l D0   ;116c: 4a80
  BEQ.w return_False  ;116e: 6700f7b4
 
  MOVE.l D0,D1   ;1172: 2200
  MOVE.l D7,D2   ;1174: 2407
  MOVE.l #$0000003d,D3  ;1176: 263c0000003d
  JSR _FindDosEntry(A6)  ;117c: 4eaefd54
  MOVE.l D0,D7   ;1180: 2e00
  MOVEQ #61,D1   ;1182: 723d
  JSR _UnLockDosList(A6)  ;1184: 4eaefd6c
  MOVE.l D7,D0   ;1188: 2007
RTS    ;118a: 4e75

_devicename:
  MOVEM.l D1-D3/D7/A0/A4/A6,-(A7) ;118c: 48e7718a
  MOVEA.l ptr_dosbase(PC),A6  ;1190: 2c7a00b2
  MOVE.l -(A2),D7  ;1194: 2e22
  MOVEA.l D0,A0   ;1196: 2040
  MOVEA.l A3,A4   ;1198: 284b
  SUBQ.w #2,A3   ;119a: 554b
  MOVE.b (A3)+,D0  ;119c: 101b
  CMPI.b #$3a,D0   ;119e: 0c00003a
  BNE.w LAB_0066  ;11a2: 66000008
    MOVE.b #$00,-1(A3)  ;11a6: 177c0000ffff
  LAB_0066:
  SUBA.l D7,A3   ;11ac: 97c7
  MOVEQ #13,D1   ;11ae: 720d
  JSR _LockDosList (A6)  ;11b0: 4eaefd72
  MOVE.l D0,D1   ;11b4: 2200
  BEQ.w LAB_0068  ;11b6: 67000038

  MOVE.l A3,D2   ;11ba: 240b
  MOVEQ #12,D3   ;11bc: 760c
  JSR _FindDosEntry(A6)  ;11be: 4eaefd54
  MOVEA.l D0,A4   ;11c2: 2840
  MOVEQ #13,D1   ;11c4: 720d
  JSR _UnLockDosList(A6)  ;11c6: 4eaefd6c
  MOVE.l A4,D0   ;11ca: 200c
  BEQ.w LAB_0068  ;11cc: 67000022

  MOVEA.l 8(A4),A4  ;11d0: 286c0008
  MOVEA.l 16(A4),A4  ;11d4: 286c0010
  MOVEA.l 10(A4),A4  ;11d8: 286c000a
  MOVEQ #0,D0   ;11dc: 7000
  LAB_0067:
    ADDQ.l #1,D0   ;11de: 5280
    MOVE.b (A4)+,(A3)+  ;11e0: 16dc
  BNE.w LAB_0067  ;11e2: 6600fffa
  MOVE.b #$3a,-1(A3)  ;11e6: 177c003affff
  MOVE.b #$00,(A3)  ;11ec: 16bc0000

  LAB_0068:
  MOVEM.l (A7)+,D1-D3/D7/A0/A4/A6 ;11f0: 4cdf518e
RTS

_banklimit:
  MOVE.l maxbanks,D0
RTS

_banklimit1:
  MOVE.l D0,-(A7)
  BSR.w _libfinit
  MOVE.l (A7)+,maxbanks
  BSR.w _libinit
RTS


LAB_006B:   Dc.l $00000000
LAB_006C:   Dc.l $00000000
LAB_006D:   Dc.l $00000000
LAB_006E:   Dc.l $00000000
LAB_006F:   Dc.l $00000000
newlock:   Dc.l $00000000
LAB_0071:   Dc.l $00000000
oldlock:   Dc.l $00000000
bankdata_begin:   Dc.l $00000000
bankdata_end:   Dc.l $00000000
maxbanks:   Dc.l $00000032
            Dc.l $00000000
LAB_0076:   Dc.l $00000000
ptr_dosbase:Dc.l $00000000
str_doslib: Dc.b "dos.library",0

; =================================================================================================
.errorhandling:
LAB_0079: MOVE.l #LAB_007A,D0 : TRAP #0
LAB_007A: Dc.b "Unable to load file!",0,0

.chkfile:
RTS
  MOVEM.l D0-D2/A0-A1/A6,-(A7)
  MOVEA.l ptr_dosbase,A6
  MOVE.l D0,D1
  MOVEQ #-2,D2
  JSR _Lock(A6)
  TST.l D0
  BEQ.w LAB_007C
    MOVE.l D0,D1
    JSR _UnLock(A6)
    MOVEM.l (A7)+,D0-D2/A0-A1/A6
    RTS
  LAB_007C:
    MOVEM.l (A7)+,D0-D2/A0-A1/A6
  BRA.w LAB_0079
