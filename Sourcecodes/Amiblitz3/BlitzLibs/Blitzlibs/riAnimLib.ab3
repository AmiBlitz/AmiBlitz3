; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "riAnimLib.obj"
; CreateIcon      = 0
; Residents       = "libnums.res,libmacs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max Window      = 20
; Max BlitzFont   = 4
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;RIAnimlib v1.0
;(C)1994 Reflective Images
;Written by Stephen McNamara
;June-July 1994

;Updates:
;         - fixed anim loop off bug (nextframe ignored flag)

;#rianimlib=57

Macro bmap
CNIF `0<>2
  CERR "Not enough parameters"
CEND
!libs {#bitmaplib,#ia`1|#pd`2}
End Macro

!libheader {#rianimlib,0,0,0,0}

!acommand {#long}
!args {#long,#long,#long}
!libs
!subs {_InitAnim2,0,0}
!args {#long,#long,#long,#long}
!libs
!subs {_InitAnim,0,0}
!name {"RIAnimInit","(address,bitmap#,palette#[,xy_offset])"}

!acommand {#long}
!args {#byte}
!bmap {0,0}
!subs {_NextAnimFrame,0,0}
!name {"RINextAnimFrame","(bitmap#)"}

!astatement
!args {#byte}
!libs
!subs {_AnimLoop,0,0}
!name {"AnimLoop","On|Off"}

!libfin

_libfinit:
  RTS

.GetChunkHeader:
'loop:
  CMP.l     (a0),d0
  BEQ       'gotit
  ADDQ.l    #2,a0
  CMP.l     a0,a1
  BPL       'loop
  MOVEQ.l   #0,d0
  RTS
'gotit:
  MOVEQ.l   #-1,d0
  RTS


_AnimLoop:
  MOVE.l    #0,doanimloop
  TST.b     d0

  BNE       'gotit
  RTS
'gotit:
  MOVE.l    #-1,doanimloop
  RTS


;================================================

_InitAnim2:
  MOVEQ.l   #0,d3
._InitAnim:
  MOVE.b    d1,bitmapnumber
  MOVE.b    d2,palettenumber
  MOVE.l    d3,bitplaneoffset
  MOVE.l    d0,a0
  CMPI.l    #"ANIM",8(a0)
  BEQ       'gotit
  MOVEQ.l   #0,d0
  RTS
'gotit:
  MOVE.l    4(a0),animsize
  ADD.l     d0,animsize
  MOVE.l    d0,animaddress
  MOVE.l    d0,nextanimframe
  ADD.l     #28,nextanimframe

  MOVE.l    #"BMHD",d0
  MOVE.l    a0,a1
  ADD.l     #2000,a1
  BSR       GetChunkHeader
  TST.l     d0
  BNE       'gotBMHD
  RTS
'gotBMHD:
  ADDQ.l    #8,a0
  MOVE.w    (a0),animwidth
  MOVE.w    2(a0),animheight
  MOVE.b    8(a0),animdepth

  MOVE.l    animaddress,d0
  MOVEQ.l   #0,d1
  MOVE.b    bitmapnumber,d1
  MOVE.l    #-1,d2
  MOVE.l    bitplaneoffset,d3
  ALibJsr   UnpackIFF,1

  MOVE.l    animaddress,d0
  MOVEQ.l   #0,d1
  MOVE.b    palettenumber,d1
  ALibJsr   ILBMPalette

  MOVE.l    animaddress,a0
  MOVE.l    a0,thirdframe
  MOVE.l    animsize,a1
  MOVE.l    #"FORM",d0
  BSR       GetChunkHeader

  ADDQ.l    #8,a0
  MOVE.l    #"FORM",d0
  BSR       GetChunkHeader

  ADDQ.l    #8,a0
  MOVE.l    #"FORM",d0
  BSR       GetChunkHeader

  MOVE.l    a0,nextanimframe

  ADDQ.l    #8,a0
  MOVE.l    #"FORM",d0
  BSR       GetChunkHeader

  TST.l     d0
  BEQ       'nothirdframe
  MOVE.l    a0,thirdframe

'nothirdframe:
;  MOVE.l    thirdframe,d0
;  MOVE.l    d0,nextanimframe
  MOVEQ.l   #-1,d0
  RTS

;a0=bitmap address
;d1=offset
._NextAnimFrame:
  MOVE.l    nextanimframe,d0
  BNE       'gotanim
  MOVE.l    #0,d0
  RTS
'gotanim:
  MOVEM.l   d1-d7/a0-a6,-(a7)
  ADDQ.l    #8,a0
  MOVE.l    a0,bitmapaddress

  MOVE.l    d0,a0
  CMPI.l    #"FORM",(a0)
  BEQ       'gotaframe

'looparound:
  TST.b     doanimloop
  BNE       'yesloop
  MOVEM.l   (a7)+,d1-d7/a0-a6
  MOVEQ.l   #0,d0
  RTS
'yesloop:
  MOVE.l    thirdframe,a0
'gotaframe:
  MOVE.l    4(a0),d7
  ADDQ.l    #8,a0
  MOVE.l    a0,nextanimframe
  ADD.l     d7,nextanimframe

  ADDQ.l    #4,a0               ;skip ILBM
  CMPI.l    #"ANHD",(a0)
  BEQ       'gotANHD
  MOVEM.l   (a7)+,d1-d7/a0-a6
  MOVEQ.l   #0,d0
  RTS
'gotANHD
  MOVE.b    8(a0),animtype
  MOVE.l    28(a0),animtype7
  ADD.l     4(a0),a0
  ADDQ.l    #8,a0

  CMPI.l    #"CMAP",(a0)
  BNE       'heynopalette
  MOVE.l    a0,-(a7)
  MOVE.l    a0,d0
  MOVEQ.l   #0,d1
  MOVE.b    palettenumber,d1               ;palette number
  ALibJsr   ILBMPalette
  MOVE.l    (a7)+,a0
  ADD.l     4(a0),a0
  ADDQ.l    #8,a0
'heynopalette:
  CMPI.l    #"DLTA",(a0)
  BEQ       'yesdelta
  MOVEQ.l   #0,d0
  RTS
'yesdelta:
  MOVE.l    bitmapaddress,a6
  MOVE.b    animtype,d0

  CMPI.b    #5,d0
  BEQ       UnpackAnim5
  CMPI.b    #65,d0
  BEQ       UnpackAnim5
  CMPI.b    #7,d0
  BEQ       UnpackAnim7

  MOVEM.l   (a7)+,d1-d7/a0-a6
  MOVEQ.l   #0,d0
  RTS

;a0=delta chunk header
;a6=pointer to bitplane array
.UnpackAnim7:
  ADDQ.l    #8,a0

  MOVE.l    a0,a5
  MOVE.l    a0,a4

  MOVEQ.l   #0,d7
  MOVE.w    -8(a6),d7
  MOVE.l    #0,d4

  TST.b     d0
  BEQ       UnpackAnim7Short

  MOVEQ.l   #0,d0
  MOVE.w    animwidth,d0
  ASR.w     #5,d0
  SUBQ.w    #1,d0
  MOVE.w    d0,animwidthtemp

unpacklooplong:
  MOVE.l    (a6)+,a1                   ; get a bitplane
  ADD.l     bitplaneoffset,a1
  MOVE.l    (a5)+,d0
  MOVE.l    28(a5),a3
  TST.l     d0
  BEQ       'nodata

;got some plane data to unpack
  ADD.l     a4,d0
  MOVE.l    d0,a0
  ADD.l     a4,a3
  BSR       'unpackaplane
'nodata:
  ADDQ.b    #1,d4
  CMP.b     animdepth,d4
  BNE       unpacklooplong

  MOVEM.l   (a7)+,d1-d7/a0-a6
  MOVEQ.l   #-1,d0
  RTS

'unpackaplane:
  MOVE.w    animwidthtemp,d6                      ; 40 columns
'columnloop:
  MOVE.l    a1,a2
  ADDQ.l    #4,a1
  MOVE.b    (a0)+,d3
  BNE       'getdata
  DBRA      d6,'columnloop
  RTS
'getdata:
  MOVEQ.l   #0,d0
  MOVE.b    (a0)+,d0
  BEQ       'condition0
  BTST      #7,d0
  BNE       'condition1
;case 0: top bit is 0
;so adjust y value downwards
  MOVE.w    d0,d1
  MULU.w    d7,d1
  ADD.l     d1,a2
  SUBQ.b    #1,d3
  BNE       'getdata
  DBRA      d6,'columnloop
  RTS

;case 1: condition=0 so get repeat number and value
'condition0:
  MOVE.b    (a0)+,d0                        ; repeat number
  MOVE.l    (a3)+,d1                        ; data
  SUB.b     d0,d5
  SUBQ.b    #1,d0
'loop:
  MOVE.l    d1,(a2)
  ADD.l     d7,a2
  DBRA      d0,'loop

  SUBQ.b    #1,d3
  BNE       'getdata
  DBRA      d6,'columnloop
  RTS

;case 2: condition>0 and condition<128 so get raw data
'condition1:
  ANDI.b    #%01111111,d0
  SUB.b     d0,d5
  SUBQ.b    #1,d0
'loop2:
  MOVE.l    (a3)+,(a2)
  ADD.l     d7,a2
  DBRA      d0,'loop2

  SUBQ.b    #1,d3
  BNE       'getdata
  DBRA      d6,'columnloop
  RTS

;Short ANIM7 unpacking
.UnpackAnim7Short:
  MOVE.l    animtype7,d0
  ASR.w     #4,d0
  SUBQ.w    #1,d0
  MOVE.w    d0,animwidthtemp

unpackloopshort:
  MOVE.l    (a6)+,a1                   ; get a bitplane
  ADD.l     bitplaneoffset,a1
  MOVE.l    (a5)+,d0
  MOVE.l    28(a5),a3
  TST.l     d0
  BEQ       'nodata

;got some plane data to unpack
  ADD.l     a4,d0
  MOVE.l    d0,a0
  ADD.l     a4,a3
  BSR       'unpackaplane
'nodata:
  ADDQ.b    #1,d4
  CMP.b     animdepth,d4
  BNE       unpackloopshort

  MOVEM.l   (a7)+,d1-d7/a0-a6
  MOVEQ.l   #-1,d0
  RTS

'unpackaplane:
  MOVE.w    animwidthtemp,d6                      ; 40 columns
'columnloop:
  MOVE.l    a1,a2
  ADDQ.l    #2,a1
  MOVE.b    (a0)+,d3
  BNE       'getdata
  DBRA      d6,'columnloop
  RTS
'getdata:
  MOVEQ.l   #0,d0
  MOVE.b    (a0)+,d0
  BEQ       'condition0
  BTST      #7,d0
  BNE       'condition1
;case 0: top bit is 0
;so adjust y value downwards
  MOVE.w    d0,d1
  MULU.w    d7,d1
  ADD.l     d1,a2
  SUBQ.b    #1,d3
  BNE       'getdata
  DBRA      d6,'columnloop
  RTS

;case 1: condition=0 so get repeat number and value
'condition0:
  MOVE.b    (a0)+,d0                        ; repeat number
  MOVE.w    (a3)+,d1                        ; data
  SUB.b     d0,d5
  SUBQ.b    #1,d0
'loop:
  MOVE.w    d1,(a2)
  ADD.l     d7,a2
  DBRA      d0,'loop

  SUBQ.b    #1,d3
  BNE       'getdata
  DBRA      d6,'columnloop
  RTS

;case 2: condition>0 and condition<128 so get raw data
'condition1:
  ANDI.b    #%01111111,d0
  SUB.b     d0,d5
  SUBQ.b    #1,d0
'loop2:
  MOVE.w    (a3)+,(a2)
  ADD.l     d7,a2
  DBRA      d0,'loop2

  SUBQ.b    #1,d3
  BNE       'getdata
  DBRA      d6,'columnloop
  RTS

;a0=pointer to DLTA chunk
;a6=pointer to bitplanes array
.UnpackAnim5:
  MOVE.l    bitmapaddress,a6
  ADDQ.l    #8,a0

  MOVE.l    a0,a5
  MOVE.l    a0,a4

  MOVEQ.l   #0,d7
  MOVE.w    -8(a6),d7

  MOVE.w    animwidth,d0
  ASR.w     #3,d0
  SUBQ.w    #1,d0
  MOVE.w    d0,animwidthtemp

  MOVE.l    #0,d4
'unpackloop:
  MOVE.l    (a6)+,a1                   ; get a bitplane
  ADD.l     bitplaneoffset,a1
  MOVE.l    (a5)+,d0
  TST.l     d0
  BEQ       'nodata

;got some plane data to unpack
  ADD.l     a4,d0
  MOVE.l    d0,a0
  BSR       'unpackaplane
'nodata:
  ADDQ.b    #1,d4
  CMP.b     animdepth,d4
  BNE       'unpackloop

  MOVEM.l   (a7)+,d1-d7/a0-a6
  MOVEQ.l   #-1,d0
  RTS

'unpackaplane:
  MOVE.w    animwidthtemp,d6                      ; 40 columns
'columnloop:
  MOVE.l    a1,a2
  ADDQ.l    #1,a1
  MOVE.b    (a0)+,d3
  BNE       'getdata
  DBRA      d6,'columnloop
  RTS
'getdata:
  MOVEQ.l   #0,d0
  MOVE.b    (a0)+,d0
  BEQ       'condition0
  BTST      #7,d0
  BNE       'condition1
;case 0: top bit is 0
;so adjust y value downwards
  MOVE.w    d0,d1
  MULU.w    d7,d1
  ADD.l     d1,a2
  SUBQ.b    #1,d3
  BNE       'getdata
  DBRA      d6,'columnloop
  RTS

;case 1: condition=0 so get repeat number and value
'condition0:
  MOVE.b    (a0)+,d0                        ; repeat number
  MOVE.b    (a0)+,d1                        ; data
  SUBQ.b    #1,d0
'loop:
  MOVE.b    d1,(a2)
  ADD.l     d7,a2
  DBRA      d0,'loop

  SUBQ.b    #1,d3
  BNE       'getdata
  DBRA      d6,'columnloop
  RTS

;case 2: condition>0 and condition<128 so get raw data
'condition1:
  ANDI.b    #%01111111,d0
  SUBQ.b    #1,d0
'loop2:
  MOVE.b    (a0)+,(a2)
  ADD.l     d7,a2
  DBRA      d0,'loop2

  SUBQ.b    #1,d3
  BNE       'getdata
  DBRA      d6,'columnloop
  RTS

animaddress:     Dc.l  0
animsize:        Dc.l  0
nextanimframe:   Dc.l  0
animheight:      Dc.l  0
animdepth:       Dc.l  0
animwidth:       Dc.l  0
animwidthtemp:   Dc.w  0
bitmapaddress:   Dc.l  0
animtype7:       Dc.l  0
bitplaneoffset:  Dc.l  0
thirdframe:      Dc.l  0
  Even
doanimloop:       Dc.b  -1
bitmapnumber:     Dc.b  0
palettenumber:    Dc.b  0
animtype:         Dc.b  0

