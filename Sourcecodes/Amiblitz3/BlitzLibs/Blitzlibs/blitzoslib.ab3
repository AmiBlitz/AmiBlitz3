; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Blitz3:BlitzLibs/Decompiled/baselibs"
; ExeFile         = "blitzoslib_new.obj"
; CreateIcon      = 0
; Residents       = "libjsrs.res,libnums.res,libmacs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 64000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 3.9.11
; NumberOfBuilds  = 3277
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8192
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 75
; CursorColumn    = 1
; LabelSearch     = ""debug"
; LabelRemark     = 0
; LabelAll        = 1
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 25
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 25
; Max Palette     = 4
; Max BitMap      = 1
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 25
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
HARDBASE       EQU $DFF000
DMACONR        EQU $DFF002
RAWKEY_TAB     EQU $0042
RAWKEY_RETURN  EQU $0044
RAWKEY_ESC     EQU $0045
RAWKEY_UP      EQU $004C
RAWKEY_DOWN    EQU $004D
RAWKEY_RIGHT   EQU $004E
RAWKEY_LEFT    EQU $004F
RAWKEY_F1      EQU $0050
RAWKEY_F10     EQU $0059
RAWKEY_HELP    EQU $005F
RAWKEY_LALT    EQU $0064
RAWKEY_RALT    EQU $0065
RAWKEY_LAMIGA  EQU $0066
RAWKEY_RAMIGA  EQU $0067


; Struct Page (in A3)
;   memsize.l     0
;   memptr.l      4
;   bitmapPtr.l   8
;   numBoxes.w   12
;   color0.w     14
;   color1.w     16
;   color2.w     18
;   color3.w     20
;   selboxptr.l  22
;
; Struct for box
;   x.W           ; 0
;   y.W           ; 2
;   w.W           ; 4
;   h.W           ; 6 
;   type.w        ; 8     2: stringbox, 3:propbox
;   toggleState.W ; 10
;   valux,value   ; 12   -1 or $4000 --> 28(a0)=12 
;   valuey, shape1; 14   -1 or $4000 --> 30(a0)=6
;                 ; 16   $ffff if shapebox ?
;   shape2        ; 18
;   maxstrLen.l   ; 20
;   strPointer.l  ; 24
;   strLength     ; 28
;                 ; 30

#TYPE_FRAME0= $0000 ; 0 1
#TYPE_FRAME1= $0001 ; 2 3
#TYPE_TEXT  = $0002 ; 4 5
#TYPE_PROP  = $0003 ; 6 7
#TYPE_INPUT = $0004 ; 8 9
#TYPE_UNKNOW= $0005 ;10 11 
#TYPE_UNKNO1= $0006 ;12 13

!libheader{#blitzoslib,0,0,0,0}

!dumtoke{"Page","",_toke}

!astatement
!args{#word,#word,#word}
!libs{#bitmaplib,#ia2|#pd1,#blitzoslib,#ia3,#blitzoslib,#ld6|#pd4}
!subs{_initpage,0,0}
!name{"InitPage","Page#,BitMap#,NumBoxes"}

!astatement
!args{#word}
!libs{#blitzoslib,#ia3}
!subs{_freepage,0,0}
!name{"FreePage","Page#"}

!astatement
!args{#word,#word,#word,#word,#word,#word,#word}
!libs{#blitzoslib,#ia3}
!subs{_addbox,0,0}
!args{#word,#word,#word,#word,#word,#word,#word,#string}
!libs{#blitzoslib,#ia3}
!subs{_addboxWithText,0,0}
!args{#word,#word,#word,#word,#word,#word,#word,#word,#word}
!libs{#blitzoslib,#ia3}
!subs{_addboxWithShapes,0,0}
!name{"AddBox","Page#,Box#,x,y,w,h,type[,text$]|[,shape,shape]"}

!astatement
!args
!libs{#blitzoslib,#ua3}
!subs{_redrawpage,1,0}
!name{"RedrawPage",""}
 
!astatement
!args{#word}
!libs{#blitzoslib,#ua3}
!subs{_redrawbox,1,0}
!name{"RedrawBox","Box#"}
 
!astatement
!args{#word}
!libs{#blitzoslib,#ua3}
!subs{_selectbox,1,0}
!args{#word,#word}
!libs{#blitzoslib,#ua3}
!subs{_selectbox1,1,0}
!args{#word,#word,#word}
!libs{#blitzoslib,#ua3}
!subs{_selectbox2,1,0}
!name{"SelectBox","[Box#]|[x+,y+][0,x,y] ;deselects previously selected"}

!astatement
!args
!libs{#blitzoslib,#ua3}
!subs{_deselectbox,1,0}
!name{"DeSelectBox",""}
 
!astatement
!args
!libs{#blitzoslib,#ua3}
!subs{_activateselectedbox,1,0}
!name{"ActivateSelectedBox",""} 

!astatement
!args{#word,#word}
!libs{#blitzoslib,#ua3}
!subs{_setbox1,0,0}
!args{#word,#quick,#quick}
!libs{#blitzoslib,#ua3}
!subs{_setbox,1,0}
!name{"SetBox","Box#[,Value]|[xprop,yprop]"} 
 
!afunction{#word}
!args{#word}
!libs{#blitzoslib,#ua3}
!subs{_boxvalue,1,0}
!args{#word,#word}
!libs{#blitzoslib,#ia3}
!subs{_boxvalue1,1,0}
!name{"BoxValue","(Box#)|(Page#,Box#)"}  
 
!astatement
!args{#word,#string}
!libs{#blitzoslib,#ua3}
!subs{_setboxstring,0,0}
!name{"SetBoxString","Box#,String$"} 
 
!afunction{#string}
!args{#word}
!libs{#blitzoslib,#ua1}
!subs{_boxstring,1,0}
!args{#word,#word}
!libs{#blitzoslib,#ia1}
!subs{_boxstring1,1,0}
!name{"BoxString","(Box#)|(Page#,Box#)"} 

!astatement
!args{#word,#word,#word,#word}
!libs{#blitzoslib,#ua3,#bitmaplib,#ia2|#pd1}
!subs{_boxshow,1,0}
!args{#word,#word,#word}
!libs{#blitzoslib,#ua3}
!subs{_boxshow1,1,0}
!name{"BoxShow","Box#[,Bitmap#,x,y]|[dx,dy]"} 

!afunction{#word}
!args
!libs{#blitzoslib,#ua3}
!subs{_boxselected,1,0}
!name{"BoxSelected",""} 

!astatement
!args{#word,#string}
!libs{#blitzoslib,#ua3}
!subs{_boxprint,1,0}
!args{#word,#word,#word}
!libs{#blitzoslib,#ua3,#banklib,#ia2|#pd1}
!subs{_boxprint1,1,0}
!name{"BoxPrint","Box#[,String$]|[Bank#,Line]"} 
 
!astatement
!args{#word,#word}
!libs{#blitzoslib,#ua3}
!subs{_setboxcolor,1,0}
!name{"SetBoxColor","Box#,color"} 
 
!afunction{#word}
!args
!libs{#blitzoslib,#ua3}
!subs{_blitzevent,1,0}
!name{"BlitzEvent",";handles user input and returns event"} 
 
!astatement
!args{#word,#string}
!libs{#blitzoslib,#ua3}
!subs{_setboxtitle,1,0}
!name{"SetBoxTitle","Box#,String$"} 
 
!astatement
!args{#word}
!libs{#blitzoslib,#ua3}
!subs{_disablebox,1,0}
!name{"DisableBox","Box#"} 

!astatement
!args{#word}
!libs{#blitzoslib,#ua3}
!subs{_enablebox,1,0}
!name{"EnableBox","Box#"}

!afunction{#word}
!args
!libs
!subs{_mouseenabled,1,0}
!name{"MouseEnabled",""}   
 
!astatement
!args{#word,#word,#word,#word,#word}
!libs{#blitzoslib,#ia3}
!subs{_setpagepens,0,0}
!name{"SetPagePens","Page#,c0,c1,c2,c3 (defaults: 3,1,2,3)"}    
 
!afunction{#quick}
!args{#word}
!libs{#blitzoslib,#ua3}
!subs{_boxpropx,1,0}
!name{"BoxPropX","Box#"} 

!afunction{#quick}
!args{#word}
!libs{#blitzoslib,#ua3}
!subs{_boxpropy,1,0}
!name{"BoxPropY","Box#"} 
 
!astatement
!args{#word,#word,#word}
!libs{#blitzoslib,#ia3}
!subs{_changebox,0,0}
!name{"ChangeBox","Page#,Box#,Value"}

!astatement
!args{#word}
!libs{#blitzoslib,#ua3}
!subs{_togglebox,1,0}
!name{"ToggleBox","Box#"}

!afunction{#word}
!args
!libs{#blitzoslib,#ua3}
!subs{_spotbox,1,0}
!name{"SpotBox","; returns box that mouse is over"}

_load: !nullsub{0,0,0}
_save: !nullsub{0,0,0}
_use:  !nullsub{0,0,0}
_free: !nullsub{0,0,0}

!libfin{_toke,_load,_save,_use,_free,4,5}

; ===============================================================================
_boxpropx:
  TST.l (A3) : BEQ.w error_uninitpage
  CMP.w  12(A3),D0 : BCC.w error_illegalboxnumber

  ASL.w #5,D0
  MOVEA.l 4(A3),A0
  ADDA.w D0,A0

  MOVE.w 12(A0),D0
  EXT.l D0
  ASL.l #1,D0
RTS

_boxpropy:
  TST.l (A3) : BEQ.w error_uninitpage
  CMP.w 12(A3),D0 : BCC.w error_illegalboxnumber

  ASL.w #5,D0
  MOVEA.l 4(A3),A0
  ADDA.w D0,A0

  MOVE.w 14(A0),D0
  EXT.l D0
  ASL.l #1,D0
RTS

_freepage:
  MOVE.l 0(A3),D0 : BEQ.w LAB_0009
    MOVEA.l 4(A3),A1
    ALibJsr #globalfree
    MOVEQ #0,D0
    MOVE.l D0,0(A3)
    MOVE.w D0,12(A3)
  LAB_0009:
RTS

;libs{#bitmaplib,#ia2|#pd1,#blitzoslib,#ia3,#blitzoslib,#ld6|#pd4}
;-- D0: Page#, D1:Bitmap#, D2: number of boxes

_initpage: 
  MOVE.l A3,0(A5,D6.w)                      ; set used page!

  TST.w (A2) : BEQ.w error_uninitbitmap
  
  BSR.w _freepage

  MOVE.w D2,12(A3)
  EXT.l D2
  ASL.l #5,D2
  MOVE.l D2,0(A3)
  MOVE.l #$00010001,D1
  MOVE.l D2,D0
  ALibJsr #globalalloc  
  MOVE.l D0,4(A3)
  
  MOVE.w #$0001,14(A3)
  MOVE.w #$0003,16(A3)
  MOVE.w #$0002,18(A3)
  MOVE.w #$0001,20(A3)
  MOVE.l A2,8(A3)
RTS

;Page#,c0,c1,c2,c3 (defaults: 3,1,2,3)
_setpagepens:
  MOVEM.w D1-D4,14(A3)
RTS

_togglebox:
  TST.l (A3) : BEQ.w error_uninitpage
  CMP.w 12(A3),D0 : BCC.w error_illegalboxnumber
  
  ASL.w #5,D0
  MOVEA.l 4(A3),A0
  ADDA.w D0,A0
  NOT.w 10(A0)
RTS

_enablebox:
  TST.l (A3) : BEQ.w error_uninitpage
  CMP.w 12(A3),D0 : BCC.w error_illegalboxnumber
  
  ASL.w #5,D0
  MOVEA.l 4(A3),A0
  ADDA.w D0,A0
  TST.w 8(A0) : BPL.w LAB_000E
    NEG.w 8(A0)
  LAB_000E:
RTS

_disablebox:
  TST.l (A3) : BEQ.w error_uninitpage
  CMP.w 12(A3),D0 : BCC.w error_illegalboxnumber
  
  ASL.w #5,D0
  MOVEA.l 4(A3),A0
  ADDA.w D0,A0
  TST.w 8(A0) : BLE.w LAB_0010
    NEG.w 8(A0)
  LAB_0010:
RTS

;d0:Box#,d1:String$
_setboxtitle:
  TST.l (A3) : BEQ.w error_uninitpage 
  CMP.w 12(A3),D0 : BCC.w error_illegalboxnumber
  
  ASL.w #5,D0
  MOVEA.l 4(A3),A0
  ADDA.w D0,A0

  MOVEA.l D1,A1
  MOVE.l -(A2),D0                           ; get string length
  
  CMPI.w ##TYPE_TEXT,8(A0) : BEQ.w setBoxString
  
  MOVEM.l D0/A1,-(A7)                       
  MOVEM.l 20(A0),D0/A1                      ; free old string if available
  TST.l D0 : BEQ.w LAB_0012
    ALibJsr #globalfree
  LAB_0012:
  MOVEM.l (A7)+,D0/A1

  BRA.w LAB_0015

;Page#,Box#,x,y,w,h,type[,shape,shape]
_addboxWithShapes:
  BSR.w _addbox

  MOVEM.w -4(A2),D0-D1      ; get the parameter values from the stack
  EXG D0,D1
  SUB.w D0,D1
  ADDQ.w #1,D1
  MOVE.w D1,14(A0)
  MOVE.w D0,18(A0)
  MOVE.w #$ffff,16(A0)
RTS

;Page#,Box#,x,y,w,h,type[,text$]
_addboxWithText:
  BSR.w _addbox

  MOVEM.l -8(A2),D0/A1  ; get type and string param from stack
  EXG  D0,A1
  CMPI.w ##TYPE_TEXT,8(A0) : BEQ.w setBoxString

  LAB_0015:
  ADDQ.w #1,D0          ; alloc mem for max string
  MOVE.l D0,20(A0)
  MOVEQ #0,D1
  ALibJsr #globalalloc
  MOVE.l D0,24(A0)

  MOVEA.l D0,A2         ; copy string to boxstring
  MOVEQ #1,D1
  CMPI.b #$7c,(A1) : BNE.w LAB_0017         ;"|"
    LAB_0016:
      MOVE.b (A1)+,D0 : BEQ.w LAB_0019 

      MOVE.b D0,(A2)+
    BRA.w LAB_0016 
  LAB_0017:
    MOVE.b (A1)+,D0 : BEQ.w LAB_0019 

    CMPI.b #$7c,D0 : BNE.w LAB_0018         ;"|"
      MOVEQ #0,D0 
      ADDQ.w #1,D1
    LAB_0018:
    MOVE.b D0,(A2)+
  BRA.w LAB_0017 
  LAB_0019:

  CLR.b (A2)
  CMPI.w ##TYPE_TEXT,8(A0) : BPL.w LAB_001A
    MOVE.w D1,14(A0)
    CLR.w 12(A0)
  LAB_001A:
RTS

setBoxString:   ; d0: string length, a1: pointer to string
  MOVEM.l 20(A0),D1/A2
  MOVE.w D0,28(A0)
  CMP.w D0,D1 : BLE.w error_noroom
  
  LAB_001C:
    MOVE.b (A1)+,D0 : BEQ.w LAB_001D
    
    MOVE.b D0,(A2)+
  BRA.w LAB_001C
  LAB_001D:
RTS


; d0:Page#,d1:Box#,d2:x,d3:y,d4:w,d5:h,d6:type
_addbox:
  TST.l (A3) : BEQ.w error_uninitpage
  CMP.w 12(A3),D1 : BCC.w error_illegalboxnumber

  ASL.w #5,D1
  MOVEA.l 4(A3),A0
  LEA 0(A0,D1.w),A0           ;-- get struct box in A0

  MOVEM.l 20(A0),D0/A1        ;-- free the string for the box label if available
  TST.l D0 : BEQ.w LAB_001F
    ALibJsr #globalfree
    CLR.l 20(A0)
  LAB_001F:

  MOVEM.w D2-D5,0(A0)         ;-- store box dimensions

  MOVE.w -(A2),D0             ;-- type ??

  MOVE.w 18(A3),D1            ;-- color2 of page?

  ASR.w #1,D0 : BCC.w LAB_0020
    NOT.w D1
  LAB_0020:

  MOVEM.w D0-D1,8(A0)         ;-- set type and togglestate

  ; check type:
  ; 2: string, init an empty string
  ; 3: propbox
  CMPI.w ##TYPE_TEXT,D0 : BEQ.w initTextValue
  CMPI.w ##TYPE_PROP,D0 : BEQ.w initPropValue
RTS

.initTextValue:
  LSR.w #3,D4                       ; if width/8 < 0 then
  EXT.l D4 : BLE.w error_noroom     ; string does not fit into box!
  
  MOVE.l D4,D0                      ; alloc mem for longest string
  MOVEQ #0,D1
  MOVE.l D0,20(A0)
  ALibJsr #globalalloc
  MOVE.l D0,24(A0)

  MOVEA.l D0,A1                     ; fill string with spaces
  MOVE.l 20(A0),D0
  SUBQ.w #2,D0
  LAB_0022:
    MOVE.b #$20,(A1)+
  DBF D0,LAB_0022
  MOVE.b #$00,(A1)+
RTS
  
.initPropValue:
  MOVEQ #-1,D2
  SUBQ.w #4,D4
  CMPI.w #28,D4 : BMI.w LAB_0024
    MOVE.w #$4000,D2                ;16384
    MOVEQ #12,D4
  LAB_0024:

  MOVEQ #-1,D3
  SUBQ.w #2,D5
  CMPI.w #10,D5 : BMI.w LAB_0025
    MOVE.w #$4000,D3
    MOVEQ #6,D5
  LAB_0025:
  MOVEM.w D2-D3,12(A0)
  MOVEM.w D4-D5,28(A0)
RTS


_redrawpage:
  TST.l (A3) : BEQ.w error_uninitpage
  
  MOVE.l A4,-(A7)
  MOVEA.l 4(A3),A0
  MOVE.w 12(A3),D7
  SUBQ.w #1,D7 : BMI.w LAB_0029
  LAB_0027:
    TST.w 4(A0) : BEQ.w LAB_0028
      MOVEM.l D7/A0/A3,-(A7)
      BSR.w renderBox
      MOVEM.l (A7)+,D7/A0/A3
    LAB_0028:
    ADDA.w #$0020,A0
  DBF D7,LAB_0027
  LAB_0029:
  MOVEA.l (A7)+,A4
RTS

_redrawbox:
  TST.l (A3) : BEQ.w error_uninitpage
  CMP.w 12(A3),D0 : BCC.w error_illegalboxnumber

  MOVE.l A4,-(A7)

  ASL.w #5,D0
  MOVEA.l 4(A3),A0
  ADDA.w D0,A0
  BSR.w renderBox

  MOVEA.l (A7)+,A4
RTS

;d0:Box#[d1:xprop,d2:yprop]
_setbox:
  TST.l (A3) : BEQ.w error_uninitpage
  CMP.w 12(A3),D0 : BCC.w error_illegalboxnumber

  ASL.w #5,D0
  MOVEA.l 4(A3),A0
  ADDA.w D0,A0
  CMPI.w ##TYPE_PROP,8(A0) : BNE.w error_nopropbox

  TST.l D1 : BEQ.w LAB_002C
    SUBQ.l #1,D1
  LAB_002C:

  LSR.w #1,D1
  TST.l D2 : BEQ.w LAB_002D
    SUBQ.l #1,D2
  LAB_002D:

  LSR.w #1,D2
  MOVEM.w 12(A0),D3-D4
  TST.w D3 : BMI.w LAB_002E
    MOVE.w D1,D3
  LAB_002E:

  TST.w D4 : BMI.w LAB_002F
    MOVE.w D2,D4
  LAB_002F:
  MOVEM.w D3-D4,12(A0)
RTS

;d0:Page#,d1:Box#,d2:Value
_changebox:
  MOVE.w D1,d0
  MOVE.w D2,D1
BRA.w _setbox1

;d0:Box#[,Value] 
_setbox1:
  TST.l (A3) : BEQ.w error_uninitpage
  CMP.w 12(A3),D0 : BCC.w error_illegalboxnumber

  ASL.w #5,D0 
  MOVEA.l 4(A3),A0
  ADDA.w D0,A0

  TST.w D1 : BPL.w LAB_0032
    ADD.w 14(A0),D1
  LAB_0032:
  CMP.w 14(A0),D1 : BCC.w error_valueoutofrange

  MOVE.w D1,12(A0)
RTS

_setboxcolor:
  TST.l (A3) : BEQ.w error_uninitpage 
  CMP.w 12(A3),D0 : BCC.w error_illegalboxnumber

  MOVE.l A4,-(A7)
  ASL.w #5,D0
  MOVEA.l 4(A3),A0
  ADDA.w D0,A0 
  
  TST.w 10(A0) : BPL.w LAB_0034 
    NOT.w D1  
  LAB_0034:

  MOVE.w D1,10(A0) 
  BSR.w renderBox 
  MOVEA.l (A7)+,A4 
RTS 

;d0:Box#,d1:String$
_setboxstring:
  TST.l (A3) : BEQ.w error_uninitpage
  CMP.w 12(A3),D0 : BCC.w error_illegalboxnumber
  
  ASL.w #5,D0
  MOVEA.l 4(A3),A0
  ADDA.w D0,A0

  MOVEA.l D1,A1
  MOVE.l -(A2),D1                     ; get stringlength

  MOVEM.l 20(A0),D2/A2                ; check if string would fit into box
  SUB.w 28(A0),D2
  SUB.w D1,D2 : BLE.w error_noroom
  
  ADDA.w 28(A0),A2
  SUBQ.w #1,D1 : BMI.w LAB_0037
    LAB_0036:
      MOVE.b (A1)+,(A2)+
    DBF D1,LAB_0036
  LAB_0037:

  SUBQ.w #2,D2 : BMI.w LAB_0039
    LAB_0038:
      MOVE.b #$20,(A2)+
    DBF D2,LAB_0038
  LAB_0039:
  MOVE.b #$00,(A2)+
RTS

;(d0:Box#)|(d0:Page#,d1:Box#)
_boxvalue1:
  MOVE.w D1,D0
_boxvalue:
  TST.l (A3) : BEQ.w error_uninitpage
  CMP.w 12(A3),D0 : BCC.w error_illegalboxnumber

  ASL.w #5,D0
  MOVEA.l 4(A3),A0
  ADDA.w D0,A0
  MOVE.w 12(A0),D0
RTS

;(d0:Page#,d1:Box#)
_boxstring1:
  MOVE.w D1,D0
;(d0:Box#)
_boxstring:
  EXG    A1,A3
  TST.l (A3) : BEQ.w error_uninitpage
  CMP.w 12(A3),D0 : BCC.w error_illegalboxnumber

  ASL.w #5,D0
  MOVEA.l 4(A3),A0
  ADDA.w D0,A0

  MOVE.w 28(A0),D2
  MOVEM.l 20(A0),D0/A0
  ADDA.w D2,A0
  SUB.w D2,D0
  MOVEA.l A1,A3
  
  LEA -1(A0,D0.w),A1
  LAB_003E:
    SUBQ.w #1,D0
  CMPI.b #$20,-(A1) : BEQ.w LAB_003E

  MOVE.w D0,D1 : BEQ.w LAB_0040
    SUBQ.w #1,D1
    LAB_003F:
      MOVE.b (A0)+,(A3)+
    DBF D1,LAB_003F
  LAB_0040:
RTS

.renderBox:
 MOVEQ #0,D0
 
 MOVE.w 8(A0),boxType : BPL.w LAB_0042
  NEG.w boxType
  MOVEQ #-1,D0
 LAB_0042:
 MOVE.w D0,simpleBox

 MOVEM.l A3-A4,-(A7)

 MOVEM.l 14(A3),D0-D1                       ; get page color0,1
 CLR.w LAB_006C+2
 CMPA.l $16(A3),A0 : BEQ.w LAB_0043         ; check color1
   MOVE.w D0,D1
   MOVE.w #$ffff,LAB_006C+2
   BRA.w LAB_0044
 LAB_0043:
   CMPI.w ##TYPE_INPUT,boxType : BNE.w LAB_0044
     MOVE.w D1,D0
 LAB_0044:

 SWAP D1
 MOVE.w 10(A0),D1 : BPL.w LAB_0045
   SWAP D0
   NOT.w D1
   TST.w boxType : BNE.w LAB_0045
     TST.l 20(A0) : BEQ.w LAB_0045
       MOVEQ #0,D0
 LAB_0045:
 SWAP D1

 MOVEM.l D0-D1,boxColor
 
 MOVEM.w 0(A0),D0-D3
 ADD.w D0,D2
 SUBQ.w #1,D2
 ADD.w D1,D3
 SUBQ.w #1,D3
 MOVEM.w D0-D3,boxDimensions

 TST.w simpleBox : BEQ.w LAB_0046
   MOVE.w textColorBack(PC),D4 
   BLibJsr #sis2dlib LSL 7 + 4 ; Boxf
   BRA.w LAB_0061 
 LAB_0046:
   CMPI.w ##TYPE_INPUT,boxType : BEQ.w LAB_0060
   CMPI.w #$0006,boxType : BNE.w LAB_0047
     TST.l 20(A0) : BEQ.w LAB_0060
   LAB_0047:
   CMPI.w ##TYPE_FRAME1,boxType : BNE.w LAB_0049
    TST.w 16(A0) : BEQ.w LAB_0049           ; is a shapebox ?
      MOVE.l A0,-(A7) 
      ADDQ.w #2,D0    
      ADDQ.w #1,D1    
      SUBQ.w #2,D2    
      SUBQ.w #1,D3    
      MOVE.w boxColor(PC),D4 
      TST.w LAB_006C+2 : BEQ.w LAB_0048 
        MOVE.w textColorBack(PC),D4 
      LAB_0048:
      BLibJsr #sis2dlib LSL 7 + 4 ; Boxf
      MOVEA.l (A7),A0  
      MOVE.w 18(A0),D0  
      ADD.w 12(A0),D0   
      MOVEM.w boxDimensions(PC),D1-D2 
      ADDQ.w #2,D1 
      ADDQ.w #1,D2  
      BLibJsr #blitlib LSL 7 + 1 ; Blit
      MOVEA.l (A7)+,A0 
      BRA.w LAB_0060  
  LAB_0049:

  MOVE.l A0,-(A7)  ;0dee: 2f08
  ADDQ.w #2,D0   ;0df0: 5440
  ADDQ.w #1,D1   ;0df2: 5241
  SUBQ.w #2,D2   ;0df4: 5542
  SUBQ.w #1,D3   ;0df6: 5343
  MOVE.w textColorBack(PC),D4 ;0df8: 383a03a2
  BLibJsr #sis2dlib LSL 7 + 4 ; Boxf
  MOVEA.l (A7)+,A0 

  CMPI.w ##TYPE_PROP,boxType : BNE.w LAB_004D
    MOVEM.w 0(A0),D0-D3
    MOVEM.w 12(A0),D4-D5
    MOVEM.w 28(A0),D6-D7
    ADDQ.w #2,D0
    ADDQ.w #1,D1
    SUBQ.w #3,D2
    SUBQ.w #1,D3
    SUB.w D6,D2
    SUB.w D7,D3

    TST.w D4 : BMI.w LAB_004A
      ADD.w D4,D4
      MULU.w D4,D2
      SWAP D2 
      ADD.w D2,D0
    LAB_004A:

    TST.w D5 : BMI.w LAB_004B
      ADD.w D5,D5
      MULU.w D5,D3
      SWAP D3
      ADD.w D3,D1
    LAB_004B:

    ADD.w D0,D6
    SUBQ.w #1,D6
    ADD.w D1,D7 
    SUBQ.w #1,D7
    MOVEM.w D0-D1/D6-D7,LAB_0065

    MOVE.l A0,-(A7)
    TST.w LAB_006C+2 : BNE.w LAB_004C
      MOVEM.w LAB_0065(PC),D0-D3
      MOVE.w LAB_006C(PC),D4
      BLibJsr #sis2dlib LSL 7 + 4 ; Boxf
    LAB_004C:

    MOVEM.w LAB_0065(PC),D0-D3
    MOVE.w D1,D3
    MOVE.w textColorFront(PC),D4
    BLibJsr #sis2dlib LSL 7 + 5 ; Line
    
    MOVEM.w LAB_0065(PC),D0-D3
    MOVE.w D2,D0
    MOVE.w textColorFront(PC),D4
    BLibJsr #sis2dlib LSL 7 + 5 ; Line
    
    MOVEM.w LAB_0065(PC),D0-D3
    ADDQ.w #1,D2
    MOVE.w D2,D0
    MOVE.w textColorFront(PC),D4
    BLibJsr #sis2dlib LSL 7 + 5 ; Line
    
    MOVEM.w LAB_0065(PC),D0-D3
    MOVE.w D0,D2
    MOVE.w boxColor(PC),D4
    BLibJsr #sis2dlib LSL 7 + 5 ; Line 
    
    MOVEM.w LAB_0065(PC),D0-D3
    SUBQ.w #1,D0
    MOVE.w D0,D2
    ADDQ.w #1,D1
    MOVE.w boxColor(PC),D4
    BLibJsr #sis2dlib LSL 7 + 5 ; Line

    MOVEM.w LAB_0065(PC),D0-D3
    ADDQ.w #1,D0
    MOVE.w D3,D1
    SUBQ.w #1,D2
    MOVE.w boxColor(PC),D4
    BLibJsr #sis2dlib LSL 7 + 5 ; Line
    
    MOVEA.l (A7)+,A0
 LAB_004D:

 CMPI.w #$0005,boxType : BNE.w LAB_0056
   MOVE.w 6(A0),D0 
   SUBQ.w #3,D0    
   LSR.w #3,D0    
   MOVE.w D0,LAB_0071+2  ;0f02: 33c0000011ac
   LSR.w #1,D0   ;0f08: e248
   MOVE.w 12(A0),D2  ;0f0a: 3428000c
   SUB.w D0,D2   ;0f0e: 9440
   BPL.w LAB_004E  ;0f10: 6a000004
     MOVEQ #0,D2   ;0f14: 7400
   LAB_004E:
   MOVE.w 14(A0),D0  ;0f16: 3028000e
   SUB.w LAB_0071+2(PC),D0 ;0f1a: 907a0290
   BPL.w LAB_004F  ;0f1e: 6a00000c
     MOVEQ #0,D0   ;0f22: 7000
     MOVE.w 14(A0),LAB_0071+2 ;0f24: 33e8000e000011ac
   LAB_004F:
   CMP.w D0,D2
   BMI.w LAB_0050  ;0f2e: 6b000004
     MOVE.w D0,D2   ;0f32: 3400
   LAB_0050:
   MOVE.w 12(A0),D0  ;0f34: 3028000c
   SUB.w D2,D0   ;0f38: 9042
   MOVE.w D0,LAB_0072  ;0f3a: 33c0000011ae
   MOVEA.l 24(A0),A1  ;0f40: 22680018
   BRA.w LAB_0052  ;0f44: 60000008
     LAB_0051:
       TST.b (A1)+   ;0f48: 4a19
     BNE.w LAB_0051  ;0f4a: 6600fffc
   LAB_0052:
   DBF D2,LAB_0051  ;0f4e: 51cafff8
   MOVE.l A1,LAB_0066  ;0f52: 23c90000118e
   
   MOVEM.w boxDimensions(PC),D0-D1
   ADDI.w #$000b,D0
   LSR.w #3,D0
   EXT.l D1 
   ADDQ.w #2,D1 
   SWAP D1 
   LSR.l #3,D1 
   MOVEM.l D0-D1,textPos 
   MOVE.w textColorBack(PC),D1 
   MOVE.w textColorFront(PC),D0 
   BLibJsr #fontlib LSL 7 + 3,1 ; Colour
   
   LAB_0053:
   MOVEM.l textPos(PC),D0-D1 
   BLibJsr #fontlib LSL 7 + 4 ; Locate 
   
   ADDI.w #$0001,LAB_0070+2 ;0f8e: 06790001000011a8
   MOVEA.l LAB_0066(PC),A0  ;0f96: 207a01f6
   MOVEA.l A0,A1   ;0f9a: 2248
   LAB_0054:
     TST.b (A1)+   ;0f9c: 4a19
   BNE.w LAB_0054  ;0f9e: 6600fffc
   MOVE.l A1,LAB_0066  ;0fa2: 23c90000118e
   BTST #6,DMACONR  ;0fa8: 0839000600dff002
   LAB_0055:
     BTST #6,DMACONR  ;0fb0: 0839000600dff002
   BNE.w LAB_0055  ;0fb8: 6600fff6
   BLibJsr #fontlib LSL 7 + $f ; ??? 
   SUBI.w #$0001,LAB_0071+2 ;0fc2: 04790001000011ac
   BGT.w LAB_0053  ;0fca: 6e00ffb6
   TST.w LAB_006C+2  ;0fce: 4a79000011a0
   BNE.w LAB_0060  ;0fd4: 66000120
   MOVEM.w boxDimensions(PC),D0-D2 ;0fd8: 4cba000701a2
   ADDQ.w #2,D0   ;0fde: 5440
   SUBQ.w #2,D2   ;0fe0: 5542
   MOVE.w LAB_0072(PC),D3  ;0fe2: 363a01ca
   ASL.w #3,D3   ;0fe6: e743
   ADD.w D3,D1   ;0fe8: d243
   ADDQ.w #1,D1   ;0fea: 5241
   MOVE.w D1,D3   ;0fec: 3601
   ADDQ.w #8,D3   ;0fee: 5043
   MOVE.w #$8001,D4  ;0ff0: 383c8001
   BLibJsr #sis2dlib LSL 7 + 4 ; Boxf
   BRA.w LAB_0060  ;0ffa: 600000fa
 LAB_0056:
 
 MOVEM.l 20(A0),D0-D1
 TST.l D0 : BEQ.w LAB_005B

 EXG D0,D1
 CMPI.w ##TYPE_PROP,boxType : BNE.w LAB_0058
   MOVEM.l D0-D1,LAB_0066  ;1018: 48f900030000118e
   MOVE.w D1,D2   ;1020: 3401
   MOVEM.w boxDimensions(PC),D0-D1 ;1022: 4cba00030158
   ADDI.w #$000b,D0  ;1028: 0640000b
   LSR.w #3,D0   ;102c: e648
   SUBQ.w #8,D1   ;102e: 5141
   TST.w 28(A0) : BMI.w LAB_0057  ;1034: 6b000006
     ADDQ.w #8,D1   ;1038: 5041
     SUB.w D2,D0   ;103a: 9042
   LAB_0057:
   ADDQ.w #2,D1   ;103c: 5441
   SWAP D1   ;103e: 4841
   LSR.l #3,D1   ;1040: e689
   BLibJsr #fontlib LSL 7 + 4 ; Locate
   BRA.w LAB_005E  ;1048: 6000007c
 LAB_0058:
 
 CMPI.w #$0006,boxType : BEQ.w LAB_005B  ;1054: 67000024
   TST.w 14(A0) : BEQ.w LAB_005B  ;105c: 6700001c
     MOVE.w 12(A0),D2
     MOVEA.l D0,A1
     LAB_0059:
       MOVEQ #0,D1
       LAB_005A:
         ADDQ.w #1,D1
         TST.b (A1)+ 
       BNE.w LAB_005A 
     DBF D2,LAB_0059  
     SUBA.l D1,A1    
     SUBQ.w #1,D1    
     MOVE.l A1,D0    
 LAB_005B:

 MOVEM.l D0-D1,LAB_0066  ;107a: 48f900030000118e
 
 MOVE.l LAB_0067(PC),D0 : BEQ.w LAB_0060  ;1086: 6700006e
 
 CMPI.w ##TYPE_TEXT,boxType : BNE.w LAB_005C
   MOVE.w boxDimensions(PC),D0 
   ADDI.w #$000b,D0
   LSR.w #3,D0  
   BRA.w LAB_005D 
 LAB_005C:
   NEG.w D0  
   ASL.w #3,D0
   ADD.w boxDimensions(PC),D0
   ADD.w LAB_0064(PC),D0
   ADDQ.w #7,D0
   LSR.w #4,D0 
 LAB_005D:
  
  MOVE.w boxDimensions+2(PC),D1
  EXT.l D1
  ADDQ.w #2,D1
  SWAP D1   
  LSR.l #3,D1
  BLibJsr #fontlib LSL 7 + 4 ; Locate
  
  LAB_005E:
  MOVE.w textColorBack(PC),D1
  MOVE.w LAB_006C(PC),D0
  BLibJsr #fontlib LSL 7 + 3,1 ; Colour
 
  BTST #6,DMACONR  
  LAB_005F:
    BTST #6,DMACONR 
  BNE.w LAB_005F
  
  MOVEM.l LAB_0066(PC),D0/A0
  EXG     D0,A0
  BLibJsr #fontlib LSL 7 + $e ; ???
 
  LAB_0060:
  TST.l boxColor : BEQ.w LAB_0061
    MOVEM.w boxDimensions(PC),D0-D3
    MOVE.w D1,D3
    MOVE.w boxColor(PC),D4
    BLibJsr #sis2dlib LSL 7 + 5 ; Line
    
    MOVEM.w boxDimensions(PC),D0-D3
    MOVE.w D2,D0    
    MOVE.w textColorFront(PC),D4 
    BLibJsr #sis2dlib LSL 7 + 5 ; Line
    
    MOVEM.w boxDimensions(PC),D0-D3 
    SUBQ.w #1,D2   
    MOVE.w D2,D0  
    ADDQ.w #1,D1 
    MOVE.w textColorFront(PC),D4 
    BLibJsr #sis2dlib LSL 7 + 5 ; Line
    
    MOVEM.w boxDimensions(PC),D0-D3 
    MOVE.w D0,D2 
    MOVE.w boxColor(PC),D4 
    BLibJsr #sis2dlib LSL 7 + 5 ; Line
    
    MOVEM.w boxDimensions(PC),D0-D3 ;114c: 4cba000f002e
    ADDQ.w #1,D0   ;1152: 5240
    MOVE.w D0,D2   ;1154: 3400
    ADDQ.w #1,D1   ;1156: 5241
    MOVE.w boxColor(PC),D4 ;1158: 383a003e
    BLibJsr #sis2dlib LSL 7 + 5 ; Line
    
    MOVEM.w boxDimensions(PC),D0-D3 ;1162: 4cba000f0018
    ADDQ.w #1,D0   ;1168: 5240
    MOVE.w D3,D1   ;116a: 3203
    SUBQ.w #1,D2   ;116c: 5342
    MOVE.w textColorFront(PC),D4  ;116e: 383a002a
    BLibJsr #sis2dlib LSL 7 + 5 ; Line
  
  LAB_0061:
  MOVEM.l (A7)+,A3-A4
RTS

boxDimensions:   Dc.w $0000
                 Dc.w $0000
LAB_0064: Dc.l $00000000
LAB_0065: Dc.l $00000000    
          Dc.l $00000000   
LAB_0066: Dc.l $00000000  
LAB_0067: Dc.l $00000000 
boxType:  Dc.w $0000
boxColor: Dc.w $0000
textColorFront:Dc.w $0000
textColorBack: Dc.w $0000
LAB_006C: Dc.w $0000
          Dc.w $0000 ;Colours
simpleBox:Dc.w $0000 
textPos:  Dc.w $0000
LAB_0070: Dc.l $00000000   ;11a6: 00000000
LAB_0071: Dc.l $00000000   ;11aa: 00000000
LAB_0072: Dc.w $0000   ;11ae

_spotbox:
  MOVEM.w MOUSEX(PC),D0-D1

  MOVEA.l 4(A3),A0
  MOVE.w 12(A3),D7
  SUBQ.w #1,D7
  MOVEQ #0,D6
  LAB_0074:
    TST.w 8(A0) : BLE.w LAB_0075
      MOVEM.w 0(A0),D2-D5
      SUB.w D0,D2 : BGT.w LAB_0075
      SUB.w D1,D3 : BGT.w LAB_0075
      NEG.w D2
      NEG.w D3
      CMP.w D2,D4 : BLE.w LAB_0075
      CMP.w D3,D5 : BGT.w LAB_0076
    LAB_0075:
    ADDQ.w #1,D6
    ADDA.w #$0020,A0
  DBF  D7,LAB_0074
  MOVEQ #-1,D0
  RTS

  LAB_0076:
  MOVE.w D6,D0
RTS

;d0:0, d1:x, d2:y
_selectbox2:
  TST.l (A3) : BEQ.w error_uninitpage

  MOVE.l A4,-(A7)
  MOVE.l 22(A3),-(A7) ; get current selected box

  MOVE.w D1,D0
  MOVE.w D2,D1
  MOVEA.l 4(A3),A0
  MOVE.w 12(A3),D7
  SUBQ.w #1,D7
  LAB_0078:
    TST.w 8(A0) : BLE.w LAB_0079
      MOVEM.w 0(A0),D2-D5
      SUB.w D0,D2 : BGT.w LAB_0079
      SUB.w D1,D3 : BGT.w LAB_0079
      NEG.w D2
      NEG.w D3
      CMP.w D2,D4 : BLE.w LAB_0079

      CMP.w D3,D5 : BGT.w LAB_007A
    LAB_0079:
    ADDA.w #$0020,A0
  DBF D7,LAB_0078 
  ;-- no box at that position
  MOVE.l (A7)+,D0
  MOVEA.l (A7)+,A4
  MOVEQ #0,D0
  RTS
  
  LAB_007A:
  ;-- register box as selected box and render it
  MOVE.l A0,22(A3)
  BSR.w renderBox

  ;-- if a selected box was registered render it as normal
  MOVE.l (A7)+,D0 : BEQ.w LAB_007B 
    MOVEA.l D0,A0
    BSR.w renderBox
  LAB_007B:

  MOVEA.l (A7)+,A4
  MOVE.w #$ffff,D0
RTS

; d0:x+, d1:y+
_selectbox1:
  TST.l (A3) : BEQ.w error_uninitpage

  MOVE.l A4,-(A7)

  MOVE.w D1,D2
  MOVE.w D0,D1
  MOVE.l 22(A3),D0 : BEQ.w LAB_0087 ; get current selected box

  MOVEA.l D0,A0
  MOVEA.l D0,A2
  MOVEA.l 4(A3),A1
  MOVEM.w 0(A0),D4-D7
  TST.w D1 : BLE.w LAB_007D
    ADD.w D6,D4
  LAB_007D:
  TST.w D2 : BLE.w LAB_007E
    ADD.w D7,D5
    SUBQ.w #1,D5
  LAB_007E:

  MOVE.w #$2000,D0
  MOVE.w 12(A3),D3
  SUBQ.w #1,D3
  LAB_007F:
    CMPA.l A1,A0 : BEQ.w LAB_0086
    TST.w 8(A1) : BLE.w LAB_0086
    
    MOVEM.w 0(A1),D6-D7
    
    SUB.w D4,D6
    TST.w D1 : BPL.w LAB_0080
      NEG.w D6
    LAB_0080:
    
    TST.w D6 : BPL.w LAB_0081
      TST.w D1 : BNE.w LAB_0086
      NEG.w D6
    LAB_0081:
    
    SUB.w D5,D7
    TST.w D2 : BPL.w LAB_0082
      NEG.w D7
    LAB_0082:
    
    TST.w D7 : BPL.w LAB_0083
      TST.w D2 : BNE.w LAB_0086
      NEG.w D7
    LAB_0083:
    
    TST.w D1 : BEQ.w LAB_0084  ;12f2: 6700000a
      TST.w D6 : BEQ.w LAB_0086  ;12f8: 6700001e
      ASL.w #5,D7
    LAB_0084:
    
    TST.w D2 : BEQ.w LAB_0085  ;1300: 6700000a
      TST.w D7 : BEQ.w LAB_0086  ;1306: 67000010
      ASL.w #5,D6   ;130a: eb46
    LAB_0085:
    
    ADD.w D6,D7   ;130c: de46
    CMP.w  D7,D0 : BCS.w LAB_0086  ;1310: 65000006
      MOVE.w D7,D0   ;1314: 3007
      MOVEA.l A1,A2   ;1316: 2449
    LAB_0086:
    ADDA.w #$0020,A1
  DBF D3,LAB_007F 

  ;-- if found box is the selected one, skip
  ;-- otherwise register the found box as the new selected one
  CMPA.l A2,A0 : BEQ.w LAB_0087
    MOVE.l A2,22(A3) 
    BSR.w renderBox  
    MOVEA.l 22(A3),A0  
    BSR.w renderBox  

  LAB_0087:
  MOVEA.l (A7)+,A4
RTS

; d0:Box#
_selectbox:
  TST.l (A3) : BEQ.w error_uninitpage

  MOVE.l A4,-(A7)

  MOVE.l 22(A3),-(A7) ; store the current selected box on stack
  CLR.l 22(A3)        ; unregister it

  ASL.w #5,D0 : BMI.w LAB_0089
    MOVEA.l 4(A3),A0
    ADDA.w D0,A0
    MOVE.l A0,22(A3)  ; set the given box as selected
    BSR.w renderBox
  LAB_0089:

  MOVE.l (A7)+,D0 : BEQ.w LAB_008A ; render old selected box as normal
    MOVEA.l D0,A0
    BSR.w renderBox
  LAB_008A:

  MOVEA.l (A7)+,A4
RTS

; d0:Box#, d1:Bitmap#,d2:x,d3:y
_boxshow:
  TST.l (A3) : BEQ.w error_uninitpage
  CMP.w 12(A3),D0 : BCC.w error_illegalboxnumber 

  ASL.w #5,D0 
  MOVEA.l 4(A3),A0 
  ADDA.w D0,A0
  
  TST.w 8(A0) : BNE.w error_illegalboxtype

  MOVE.l A2,12(A0)
  MOVEM.w D2-D3,16(A0)
  BRA.w LAB_008D

; d0:Box#,d1:dx,d2:dy
_boxshow1:
  TST.l (A3) : BEQ.w error_uninitpage 
  CMP.w 12(A3),D0 : BCC.w error_illegalboxnumber
  
  ASL.w #5,D0   
  MOVEA.l 4(A3),A0
  ADDA.w D0,A0  
  
  TST.w 8(A0) : BNE.w error_illegalboxtype  ; boxtype may not be 0 !
  
  ADD.w D1,16(A0) 
  ADD.w D2,18(A0) 
  BRA.w LAB_008D 

  LAB_008D:
  MOVEM.w 16(A0),D0-D1
  MOVEM.w 0(A0),D2-D5
  MOVEA.l 12(A0),A1 
  ADDQ.w #4,D2   
  ADDQ.w #2,D3   
  SUBQ.w #8,D4   
  SUBQ.w #4,D5   

  TST.w D0 : BPL.w LAB_008E 
    MOVEQ #0,D0 
  LAB_008E:

  TST.w D1 : BPL.w LAB_008F
    MOVEQ #0,D1
  LAB_008F:

  MOVEM.w 56(A1), D6-D7              ; 
  SUB.w D4,D6   
  SUB.w D5,D7   
  CMP.w D0,D6 : BCC.w LAB_0090
    MOVE.w D6,D0
  LAB_0090:

  CMP.w D1,D7 : BCC.w LAB_0091 
    MOVE.w D7,D1
  LAB_0091:

  MOVEM.w D0-D1,16(A0)
  LEA LAB_0064(PC),A2
  EXG D4,D5
  MOVEM.w D4-D5,-4(A2)
  MOVEA.l A1,A0
  LEA HARDBASE,A1
  MOVEA.l 8(A3),A3
  BLibJsr #scrolllib LSL 7 + 2 ; ???
RTS

_boxprint1:
  MOVE.l (A2),D1 : BEQ.w error_uninitbank 

  MOVEA.l D1,A2
  SUBQ.w #1,D2 : BMI.w LAB_0095
  LAB_0093:
    MOVE.b (A2)+,D1 : BEQ.w LAB_0094 
      CMPI.b #$0a,D1  : BNE.w LAB_0093 
    LAB_0094:
  DBF D2,LAB_0093
  LAB_0095:

  MOVE.l A2,D1
  MOVEQ #-1,D3
  LAB_0096:
    ADDQ.l #1,D3
    MOVE.b (A2)+,D2 : BEQ.w LAB_0097 
      CMPI.b #$0a,D2  : BNE.w LAB_0096 
        CLR.b -1(A2)   
  LAB_0097:
  LEA LAB_0098(PC),A2
  MOVE.l D3,(A2)+
BRA.w _boxprint
 
 LAB_0098: Dc.l $00000000 

_boxprint:
  TST.l (A3) : BEQ.w error_uninitpage
  CMP.w 12(A3),D0 : BCC.w error_illegalboxnumber

  ASL.w #5,D0
  MOVEA.l 4(A3),A0
  ADDA.w D0,A0
  TST.w 8(A0) : BNE.w error_illegalboxtype

  MOVE.l A4,-(A7)

  MOVE.l -4(A2),D7
  MOVEM.l D1/D7,-(A7)
  
  CMPI.w #$0010,6(A0) : BCC.w LAB_009B
    MOVEM.w 0(A0),D2-D5  ;14a4: 4ca8003c0000
    MOVE.w D2,D0   ;14aa: 3002
    ADDI.w #$000b,D2  ;14ac: 0642000b
    LSR.w #3,D2   ;14b0: e64a
    ADDQ.w #2,D3   ;14b2: 5443
    MOVEM.w D2-D3,LAB_009D  ;14b4: 48b9000c000015d2
    ASL.w #3,D2   ;14bc: e742
    SUB.w D2,D0   ;14be: 9042
    ADD.w D4,D0   ;14c0: d044
    SUBQ.w #1,D0   ;14c2: 5340
    LSR.w #3,D0   ;14c4: e648
    ADD.w D0,LAB_009D  ;14c6: d179000015d2
    ASL.w #3,D0   ;14cc: e740
    MOVE.w D3,D1   ;14ce: 3203
    ASL.w #3,D7   ;14d0: e747
    MOVE.w D0,D4   ;14d2: 3800
    SUB.w D7,D4   ;14d4: 9847
    MOVEQ #8,D5   ;14d6: 7a08
    MOVE.w D2,D0   ;14d8: 3002
    ADD.w D7,D0   ;14da: d047
    EXG D4,D5   ;14dc: c945
    MOVEM.w D4-D5,-4(A2)
    
    MOVE.l A3,-(A7) 
    LEA HARDBASE,A1 
    MOVEA.l 8(A3),A3
    MOVEA.l A3,A0   
    BLibJsr #scrolllib LSL 7 + 2 ; ???
    BTST #6,DMACONR  
    LAB_009A:
      BTST #6,DMACONR
    BNE.w LAB_009A  
    MOVEA.l (A7)+,A3

    MOVEM.l (A7)+,D6-D7
    MOVEM.w LAB_009D(PC),D0-D1
    SWAP D1
    LSR.l #3,D1
    SUB.w D7,D0
    BLibJsr #fontlib LSL 7 + 4 ; Locate
    MOVEA.l D6,A0
    MOVE.l D7,D0
    BLibJsr #fontlib LSL 7 + $e ; ???
    MOVEA.l (A7)+,A4
    RTS
  
  LAB_009B:
  
    MOVEM.w 0(A0),D2-D5  ;1532: 4ca8003c0000
    ADDQ.w #4,D2   ;1538: 5842
    ADDQ.w #2,D3   ;153a: 5443
    SUBQ.w #8,D4   ;153c: 5144
    SUBI.w #$000c,D5  ;153e: 0445000c
    MOVE.w D2,D0   ;1542: 3002
    MOVE.w D3,D1   ;1544: 3203
    ADDQ.w #8,D1   ;1546: 5041
    EXG D4,D5   ;1548: c945
    MOVEM.w D4-D5,-4(A2)  ;154a: 48aa0030fffc
    
    MOVEM.l A0/A3,-(A7)  ;1550: 48e70090
    LEA HARDBASE,A1  ;1554: 43f900dff000
    MOVEA.l 8(A3),A3  ;155a: 266b0008
    MOVEA.l A3,A0   ;155e: 204b
    BLibJsr #scrolllib LSL 7 + 2 ; ???
    MOVEM.l (A7),A0/A3  ;1566: 4cd70900
    
    MOVEM.w 0(A0),D0-D3  ;156a: 4ca8000f0000
    ADD.w D0,D2   ;1570: d440
    ADDQ.w #2,D0   ;1572: 5440
    SUBQ.w #3,D2   ;1574: 5742
    ADD.w D3,D1   ;1576: d243
    MOVE.w D1,D3   ;1578: 3601
    SUBI.w #$000a,D1  ;157a: 0441000a
    SUBQ.w #2,D3   ;157e: 5543
    MOVE.w 18(A3),D4  ;1580: 382b0012
    BLibJsr #sis2dlib LSL 7 + 4 ; Boxf

    BTST #6,DMACONR
    LAB_009C:
      BTST #6,DMACONR
    BNE.w LAB_009C

    MOVEM.l (A7)+,A0/A3  
    MOVEM.l (A7)+,D6-D7  
    MOVEM.w 0(A0),D0-D3  
    ADDI.w #$000b,D0 
    LSR.w #3,D0  
    ADD.w D3,D1  
    SUBI.w #$000a,D1
    EXT.l D1   
    SWAP D1
    LSR.l #3,D1
    BLibJsr #fontlib LSL 7 + 4 ; Locate

    MOVEA.l D6,A0
    MOVE.l D7,D0
    BLibJsr #fontlib LSL 7 + $e ; ???

    MOVEA.l (A7)+,A4
RTS

LAB_009D: Dc.l $00000000

_boxselected:
  TST.l (A3) : BEQ.w error_uninitpage
  
  MOVE.l 22(A3),D0 : BEQ.w LAB_009F
    SUB.l 4(A3),D0 : BMI.w LAB_009F
      LSR.w #5,D0
      RTS
  LAB_009F:

  MOVEQ #-1,D0
 RTS

_deselectbox:
  TST.l (A3) : BEQ.w error_uninitpage

  MOVE.l A4,-(A7)

  MOVE.l 22(A3),D0 : BEQ.w LAB_00A2
    MOVEA.l D0,A0
    TST.w 10(A0) : BPL.w LAB_00A1
      NOT.w 10(A0)
    LAB_00A1:
    BSR.w renderBox
    CLR.w LAB_00A9
    CLR.w textBoxActive
    CLR.w LAB_00AB
  LAB_00A2:
  
  MOVEA.l (A7)+,A4
RTS

_activateselectedbox:
  TST.l (A3) : BEQ.w error_uninitpage

  MOVE.l A4,-(A7)

  MOVE.l 22(A3),D0 : BEQ.w LAB_00A4
    MOVEA.l D0,A0
    CMPI.w ##TYPE_FRAME1,8(A0) : BEQ.w LAB_00A5
    CMPI.w ##TYPE_TEXT,8(A0) : BEQ.w LAB_00A6
    CMPI.w ##TYPE_PROP,8(A0) : BEQ.w LAB_00A7
    CMPI.w #$0005,8(A0) : BEQ.w LAB_00A5
    CMPI.w #$0006,8(A0) : BEQ.w LAB_00A8
  LAB_00A4:

  MOVEA.l (A7)+,A4
RTS

.LAB_00A5:
  BSR.w renderBox
BRA.w LAB_00A4

.LAB_00A6:
  MOVEM.w 0(A0),D0-D1
  ADDI.w #$000b,D0  
  LSR.w #3,D0   
  ADD.w 28(A0),D0
  ASL.w #3,D0   
  ADDQ.w #2,D1  
  MOVEQ #0,D2   
  MOVEM.w D0-D2,LAB_00AB+2
  MOVE.w #$ffff,textBoxActive
  BSR.w renderBox
  BSR.w LAB_00DE 
BRA.w LAB_00A4 

.LAB_00A7:
  MOVE.w #$ffff,LAB_00A9
  BSR.w renderBox
BRA.w LAB_00A4

.LAB_00A8:
  MOVE.w #$ffff,LAB_00AB
  BSR.w renderBox
BRA.w LAB_00A4

LAB_00A9: Dc.w $0000
textBoxActive: Dc.w $0000 
LAB_00AB: Dc.w $0000
          Dc.w $0000 
LAB_00AD: Dc.w $0000
          Dc.w $0000 

_mouseenabled:
   TST.w LAB_00AB : BNE.w LAB_00AF
     MOVE.w LAB_00EF+2,D0
     RTS
   LAB_00AF:
   MOVEQ #0,D0
 RTS

_blitzevent:
  MOVEM.l A3-A4,-(A7)

  MOVEQ #1,D0 : BLibJsr #gameiolib LSL 7 + 1 ; JoyX
  MOVE.w D0,JOYX1

  MOVEQ #1,D0 : BLibJsr #gameiolib LSL 7 + 2 ; JoyY
  MOVE.w D0,JOYY1

  MOVEQ #1,D0 : BLibJsr #gameiolib LSL 7 + 4 ; JoyB
  BCLR #1,D0 : MOVE.w D0,JOYB1

  MOVEQ #0,D0 : BLibJsr #gameiolib LSL 7 + 4 ; JoyB
  MOVE.w D0,JOYB0

  TST.w LAB_00EF+2 : BNE.w LAB_00B2
    BLibJsr #mouselib LSL 7 + 6 ; MouseXSpeed
    TST.l D0 : BPL.w LAB_00B1
      NEG.l D0
    LAB_00B1:

    CMPI.l #$00050000,D0 : BMI.w LAB_00B3
      MOVE.w #$ffff,LAB_00EF+2
  LAB_00B2:

    MOVE.l MOUSEX,OMOUSEX
    BLibJsr #mouselib LSL 7 + 4 : SWAP D0 : MOVE.w D0,MOUSEX  ; MouseX 
    BLibJsr #mouselib LSL 7 + 5 : SWAP D0 : MOVE.w D0,MOUSEY  ; MouseY
  LAB_00B3:

  MOVE.w JOYX1(PC),D2 : BEQ.w LAB_00B4
    ADDQ.w #3,D2
    BRA.w LAB_00B5
  LAB_00B4:

  MOVE.w JOYY1(PC),D2 : BEQ.w LAB_00B5
    ADDQ.w #2,D2
  LAB_00B5:

  MOVE.w #RAWKEY_UP,D0 : BLibJsr #rawkeystatus : BEQ.w LAB_00B6
    MOVEQ #1,D2
  LAB_00B6:

  MOVE.w #RAWKEY_DOWN,D0 : BLibJsr #rawkeystatus : BEQ.w LAB_00B7
    MOVEQ #3,D2
  LAB_00B7:

  MOVE.w #RAWKEY_RIGHT,D0 : BLibJsr #rawkeystatus : BEQ.w LAB_00B8
    MOVEQ #4,D2
  LAB_00B8:

  MOVE.w #RAWKEY_LEFT,D0 : BLibJsr #rawkeystatus : BEQ.w LAB_00B9
    MOVEQ #2,D2
  LAB_00B9:

  MOVE.w #RAWKEY_LALT,D0 : BLibJsr #rawkeystatus : BEQ.w LAB_00BA
  MOVE.w #RAWKEY_LAMIGA,D0 : BLibJsr #rawkeystatus : BEQ.w LAB_00BA
    BSET #0,MOUSEY+3
  LAB_00BA:

  MOVE.w #RAWKEY_RAMIGA,D0 : BLibJsr #rawkeystatus : BEQ.w LAB_00BB
  MOVE.w #RAWKEY_RALT,D0 : BLibJsr #rawkeystatus : BEQ.w LAB_00BB
    BSET #1,MOUSEY+3
  LAB_00BB:

  TST.w D2 : BNE.w LAB_00BC
    MOVE.w D2,LAB_00EA
    BRA.w LAB_00CD
  LAB_00BC:
    CLR.w LAB_00EF+2
    CMP.w LAB_00EA,D2 : BNE.w LAB_00BD
      SUBI.w #$0001,LAB_00EA+2 : BPL.w LAB_00CD
        MOVE.w LAB_00ED+2(PC),LAB_00EA+2
        BRA.w LAB_00BE
    LAB_00BD:
      MOVE.w LAB_00ED+2(PC),D0
      ADD.w D0,D0
      MOVE.w D0,LAB_00EA+2
      MOVE.w D2,LAB_00EA
    LAB_00BE:

    TST.w textBoxActive : BNE.w LAB_00C4

    TST.w LAB_00ED : BNE.w LAB_00CD

    BTST #0,LAB_00EA+1 : BEQ.w LAB_00BF
      MOVEA.l 22(A3),A0
      CMPI.w #$0005,8(A0) : BEQ.w LAB_00C1
    LAB_00BF:

    ASL.w #2,D2
    MOVEM.w LAB_00C0(PC,D2.w),D0-D1
    MOVEA.l (A7),A3
    BSR.w _selectbox1
  BRA.w LAB_00CD

LAB_00C0: Dc.w $0000 ;1
          Dc.w $0000 ; 
          Dc.w $0000 ;
          Dc.w $ffff ;
          Dc.w $ffff ;
          Dc.w $0000 ;
          Dc.w $0000 ;
          Dc.w $0001 ;
          Dc.w $0001 ;
          Dc.w $0000 ;10

LAB_00C1:
  MOVEM.w 12(A0),D0-D1  ;18be: 4ca80003000c
  ADD.w LAB_00EA(PC),D0  ;18c4: d07a0408
  SUBQ.w #2,D0   ;18c8: 5540
  BPL.w LAB_00C2  ;18ca: 6a000004
    MOVEQ #0,D0   ;18ce: 7000
  LAB_00C2:
  ;DC.w $b041   ;18d0
  CMP.w D1,D0
  BMI.w LAB_00C3  ;18d2: 6b000006
    MOVE.w D1,D0   ;18d6: 3001
    SUBQ.w #1,D0   ;18d8: 5340
  LAB_00C3:
  MOVE.w D0,12(A0)  ;18da: 3140000c
  BSR.w renderBox  ;18de: 6100f3ee
BRA.w exit_blitzevent  ;18e2: 6000025c
  
LAB_00C4:
  MOVEA.l (A7),A3
  BSR.w LAB_00DE 
  MOVE.w LAB_00AD+2,D0
  MOVEA.l 22(A3),A0 
  MOVE.l 20(A0),D1
  SUB.w 28(A0),D1 
  SUBQ.w #1,D1 

  CMPI.w #$0002,LAB_00EA : BNE.w LAB_00C5
    SUBQ.w #1,D0 : BPL.w LAB_00C5
      MOVEQ #0,D0
  LAB_00C5:

  CMPI.w #$0004,LAB_00EA : BNE.w LAB_00C6
    ADDQ.w #1,D0
    CMP.w D1,D0 : BMI.w LAB_00C6
      SUBQ.w #1,D0
  LAB_00C6:

  MOVE.w D0,LAB_00AD+2
  MOVEQ #1,D1
  CMPI.w #$0001,LAB_00EA : BEQ.w LAB_00C7
    CMPI.w ##TYPE_PROP,LAB_00EA : BNE.w LAB_00CC
      MOVEQ #-1,D1
  LAB_00C7:

  MOVEA.l 24(A0),A1
  ADDA.w 28(A0),A1
  ADDA.w D0,A1   
  ADD.b (A1),D1   

  CMPI.b #$1f,D1 : BNE.w LAB_00C8
    MOVE.b #$5a,D1
  LAB_00C8:

  CMPI.b #$21,D1 : BNE.w LAB_00C9  
    MOVE.b #$30,D1
  LAB_00C9:

  CMPI.b #$30,D1 : BMI.w LAB_00CA 
  CMPI.b #$5b,D1 : BMI.w LAB_00CB
  LAB_00CA:
    MOVE.b #$20,D1   
  LAB_00CB:
  MOVE.b D1,(A1)
  BSR.w LAB_00DD
  LAB_00CC:
  BSR.w LAB_00DE
BRA.w exit_blitzevent

LAB_00CD:
  MOVE.w #RAWKEY_RETURN,D0 : BLibJsr #rawkeystatus
  SNE D2 : EXT.w D2
  OR.w JOYB1(PC),D2
  OR.w JOYB0(PC),D2 : BNE.w LAB_00D0
    TST.w LAB_00ED : BEQ.w LAB_00D3
    CLR.w LAB_00ED
    TST.w textBoxActive : BNE.w LAB_00D3
    CLR.w LAB_00A9
    CLR.w LAB_00AB

    MOVEA.l (A7),A3
    MOVE.l 22(A3),D0 : BEQ.w LAB_00D3           ; is selected box ?

    MOVEA.l D0,A0
    
    TST.w 10(A0) : BPL.w LAB_00D3               ; toggle state

    NOT.w 10(A0)
    CMPI.w ##TYPE_FRAME1,8(A0) : BNE.w LAB_00CF
      MOVEM.w 12(A0),D0-D1
      ADDQ.w #1,D0
      CMP.w D1,D0 : BCS.w LAB_00CE
        MOVEQ #0,D0
      LAB_00CE:
      MOVE.w D0,12(A0)
    LAB_00CF:
    BSR.w renderBox
    MOVEM.l (A7)+,A3-A4
    MOVEQ #-1,D0
    RTS
  LAB_00D0:
  TST.w LAB_00A9 : BNE.w LAB_00E0
  TST.w LAB_00AB : BNE.w LAB_00DF
  TST.w LAB_00ED : BNE.w LAB_00D3
  MOVE.w D2,LAB_00ED
  TST.w textBoxActive : BEQ.w LAB_00D1
    CLR.w textBoxActive
    BRA.w LAB_00D3
  LAB_00D1:
  TST.w LAB_00EF+2 : BEQ.w LAB_00D2
    MOVEM.w MOUSEX(PC),D1-D2
    MOVEA.l (A7),A3
    BSR.w _selectbox2 : TST.w D0 : BEQ.w exit_blitzevent
  LAB_00D2:

  MOVEA.l (A7),A3  
  MOVE.l 22(A3),D0 : BEQ.w LAB_00D3  
    MOVEA.l D0,A0 
    NOT.w 10(A0)  
    BSR.w _activateselectedbox  
    MOVEM.l (A7)+,A3-A4  
    MOVEQ #1,D0 
    RTS 
  LAB_00D3:

  TST.w textBoxActive : BEQ.w exit_blitzevent
    BLibJsr #blitzkeyslib LSL 7 + 6 ; BlitzKey
    TST.w D0 : BMI.w exit_blitzevent
      MOVEA.l (A7),A3
      MOVE.w D0,-(A7)
      BSR.w LAB_00DE 
      MOVE.w (A7)+,D0
      MOVEA.l 22(A3),A0
      MOVEM.l 20(A0),D1/A1  
      ADDA.w 28(A0),A1 
      SUB.w 28(A0),D1 
      SUBQ.w #1,D1  
      MOVE.w LAB_00AD+2(PC),D2
      CMPI.w #$0020,D0 : BCS.w LAB_00D8 
      CMPI.w #$007e,D0 : BHI.w LAB_00D8 
        CMPI.w #$0061,D0 : BCS.w LAB_00D4
        SUBI.w #$0020,D0
        LAB_00D4:
        MOVE.w D1,D3  
        LAB_00D5:
          SUBQ.w #1,D3
          CMP.w D3,D2 : BEQ.w LAB_00D6
            MOVE.b -1(A1,D3.w),0(A1,D3.w)
        BRA.w LAB_00D5
          LAB_00D6:
        MOVE.b D0,0(A1,D2.w)
        ADDQ.w #1,D2
        CMP.w D1,D2 : BMI.w LAB_00D7 
          SUBQ.w #1,D2
        LAB_00D7:
        MOVE.w D2,LAB_00AD+2
        BRA.w LAB_00DB  
      LAB_00D8:

      CMPI.w #$007f,D0 : BEQ.w LAB_00D9
        CMPI.w #$0008,D0 : BNE.w exit_blitzevent
          SUBQ.w #1,D2 : BMI.w exit_blitzevent 
            MOVE.w D2,LAB_00AD+2
      LAB_00D9:

      ADDQ.w #1,D2
      CMP.w D2,D1 : BEQ.w LAB_00DA 
        MOVE.b 0(A1,D2.w),-1(A1,D2.w)
        BRA.w LAB_00D9 
      LAB_00DA:
      MOVE.b #$20,-1(A1,D2.w)
      LAB_00DB:
      BSR.w LAB_00DD 
      BSR.w LAB_00DE 
  exit_blitzevent:
  MOVEM.l (A7)+,A3-A4
  MOVEQ #0,D0
RTS   

LAB_00DD:
  MOVEA.l 8(A3),A4
  MOVE.l A0,-(A7) 
  MOVE.l 40(A4),-(A7)
  MOVE.w 28(A0),D3  
  MOVE.l LAB_00AB+2(PC),40(A4)
  MOVEM.l 20(A0),D0/A0
  ADDA.w D3,A0 
  SUB.w D3,D0  
  SUBQ.w #1,D0 
  BLibJsr #fontlib LSL 7 + $e ; ???
  MOVE.l (A7)+,40(A4) 
  MOVEA.l (A7)+,A0 
RTS

LAB_00DE:
  MOVEA.l 8(A3),A4
  MOVE.w (A4),D3  
  MOVEA.l 8(A4),A4
  MOVEM.w LAB_00AB+2(PC),D0-D2
  LSR.w #3,D0 
  MULU.w  D3,D1
  ADDA.w D0,A4
  ADDA.l D1,A4
  ADDA.w D2,A4
  NOT.b (A4)  
  ADDA.w D3,A4
  NOT.b (A4)  
  ADDA.w D3,A4
  NOT.b (A4)  
  ADDA.w D3,A4
  NOT.b (A4)  
  ADDA.w D3,A4
  NOT.b (A4)  
  ADDA.w D3,A4
  NOT.b (A4)  
  ADDA.w D3,A4
  NOT.b (A4)  
  ADDA.w D3,A4
  NOT.b (A4)  
RTS

LAB_00DF:
  MOVEA.l (A7),A3
  MOVEA.l 22(A3),A0
  MOVEM.w OMOUSEX(PC),D0-D1
  MOVEM.w MOUSEX(PC),D2-D3
  SUB.w D0,D2
  SUB.w D1,D3
  MOVEM.w D2-D3,12(A0)
  MOVEM.w D0-D1,MOUSEX
  BLibJsr #mouselib LSL 7 + 8 ; PositionMouse

  MOVEM.l (A7)+,A3-A4
  MOVEQ #2,D0
RTS

LAB_00E0:
 MOVEA.l (A7),A3   ;1be2: 2657
 MOVEA.l 22(A3),A0  ;1be4: 206b0016
 MOVEM.w 12(A0),D0-D1  ;1be8: 4ca80003000c
 TST.w LAB_00EF+2 : BEQ.w LAB_00E5

 MOVEM.w 4(A0),D2-D3  ;1bf8: 4ca8000c0004
 MOVEM.w 28(A0),D4-D5  ;1bfe: 4ca80030001c
 TST.w D0   ;1c04: 4a40
 BMI.w LAB_00E2  ;1c06: 6b00002a
 MOVE.w MOUSEX(PC),D0 ;1c0a: 303a00d4
 SUBQ.w #4,D2   ;1c0e: 5942
 SUB.w D4,D2   ;1c10: 9444
 SUB.w 0(A0),D0  ;1c12: 90680000
 SUBQ.w #2,D0   ;1c16: 5540
 LSR.w #1,D4   ;1c18: e24c
 SUB.w D4,D0   ;1c1a: 9044
 BPL.w LAB_00E1  ;1c1c: 6a000004
 MOVEQ #0,D0   ;1c20: 7000
LAB_00E1:
 LSR.w #1,D0   ;1c22: e248
 EXT.l D0   ;1c24: 48c0
 SWAP D0   ;1c26: 4840
 DIVS D2,D0   ;1c28: 81c2
 BVC.w LAB_00E2  ;1c2a: 68000006
 MOVE.w #$7fff,D0  ;1c2e: 303c7fff
LAB_00E2:
 TST.w D1   ;1c32: 4a41
 BMI.w LAB_00E4  ;1c34: 6b00002a
 MOVE.w MOUSEY(PC),D1  ;1c38: 323a00a8
 SUBQ.w #2,D3   ;1c3c: 5543
 SUB.w D5,D3   ;1c3e: 9645
 SUB.w 2(A0),D1  ;1c40: 92680002
 SUBQ.w #2,D1   ;1c44: 5541
 LSR.w #1,D5   ;1c46: e24d
 SUB.w D5,D1   ;1c48: 9245
 BPL.w LAB_00E3  ;1c4a: 6a000004
 MOVEQ #0,D1   ;1c4e: 7200 
  LAB_00E3:
  LSR.w #1,D1   ;1c50: e249
  EXT.l D1   ;1c52: 48c1
  SWAP D1   ;1c54: 4841
  DIVS D3,D1   ;1c56: 83c3
  BVC.w LAB_00E4  ;1c58: 68000006
    MOVE.w #$7fff,D1  ;1c5c: 323c7fff
  LAB_00E4:
  BRA.w LAB_00E9  ;1c60: 6000005a
  LAB_00E5:
  MOVE.w LAB_00EA(PC),D2
  MOVE.w LAB_00EF(PC),D3
  TST.w D0 : BMI.w LAB_00E7
    CMPI.w #$0002,D2 : BNE.w LAB_00E6
      SUB.w D3,D0 : BPL.w LAB_00E6
      MOVEQ #0,D0
    LAB_00E6:
    CMPI.w #$0004,D2 : BNE.w LAB_00E7
      ADD.w D3,D0 : BPL.w LAB_00E7
        MOVE.w #$7fff,D0
  LAB_00E7:
  TST.w D1 : BMI.w LAB_00E9
    CMPI.w #$0001,D2 : BNE.w LAB_00E8
    SUB.w D3,D1 : BPL.w LAB_00E8
      MOVEQ #0,D1   ;1ca8: 7200
    LAB_00E8:
    CMPI.w ##TYPE_PROP,D2 : BNE.w LAB_00E9  ;1cae: 6600000c
      ADD.w D3,D1 : BPL.w LAB_00E9
        MOVE.w #$7fff,D1
  LAB_00E9:
  MOVEM.w D0-D1,12(A0)
  BSR.w renderBox
  MOVEM.l (A7)+,A3-A4
  MOVEQ #2,D0
RTS

LAB_00EA: Dc.l $00000000
LAB_00ED: Dc.l $00000006
LAB_00EF: Dc.w $0400          ; 1024
          Dc.w $0000
JOYX1:    Dc.w $0000
JOYY1:    Dc.w $0000
JOYB1:    Dc.w $0000
MOUSEX:   Dc.w $0000
MOUSEY:   Dc.w $0000
JOYB0:    Dc.w $0000
OMOUSEX:  Dc.w $0000
OMOUSEY:  Dc.w $0000

error_uninitpage:       MOVE.l #LAB_00FA,D0 :  TRAP #0
error_illegalboxnumber: MOVE.l #LAB_00FC,D0 :  TRAP #0
error_valueoutofrange:  MOVE.l #LAB_00FE,D0 :  TRAP #0
error_noroom:           MOVE.l #LAB_0100,D0 :  TRAP #0
error_illegalboxtype:   MOVE.l #LAB_0102,D0 :  TRAP #0
error_uninitbank:       MOVE.l #LAB_0104,D0 :  TRAP #0
error_nopropbox:        MOVE.l #LAB_0106,D0 :  TRAP #0
error_uninitbitmap:     MOVE.l #LAB_0108,D0 :  TRAP #0

Even
LAB_00FA: Dc.b "UnInitialised Page",0,0
LAB_00FC: Dc.b "Illegal Box# For Page",0
LAB_00FE: Dc.b "Value Out of Range",0,0
LAB_0100: Dc.b "No Room For String",0,0
LAB_0102: Dc.b "Illegal Box Type",0,0
LAB_0104: Dc.b "Unitialised Bank",0,0
LAB_0106: Dc.b "Not a Prop Box",0,0
LAB_0108: Dc.b "Unitialised BitMap",0,0