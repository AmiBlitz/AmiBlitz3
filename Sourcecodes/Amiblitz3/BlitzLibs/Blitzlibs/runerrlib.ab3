; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "runerrlib.obj"
; CreateIcon      = 0
; Residents       = "blitzlibs:libmacs.res,blitzlibs:blitzoffs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 236
; CursorColumn    = 43
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 145
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max Window      = 5
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 100
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;
; heavy trap level shit
;

;this has getvbr and getcpu commands added

!syslibheader{#runerrlib,$c300,$c321,init,0,finit,0}

!nullsub{finalscheck,0,0} ;$c300
!nullsub{0,0,0}           ;$c301
!nullsub{0,0,0}           ;$c302
!nullsub{0,0,0}           ;$c303
!nullsub{0,0,0}           ;$c304
!nullsub{retchk,0,0}      ;$c305
!nullsub{nextchkw,0,0}    ;$c306
!nullsub{nextchkl,0,0}    ;$c307
!nullsub{stackchk,0,0}    ;$c308
!nullsub{arrerr,0,0}      ;$c309
!nullsub{maxerr,0,0}      ;$c30a
!nullsub{gosuper,0,0}     ;$c30b
!nullsub{gouser,0,0}      ;$c30c
!nullsub{0,0,0}           ;$c30d
!nullsub{sarraychk,0,0}   ;$c30e
!nullsub{aarraychk,0,0}   ;$c30f
!nullsub{datachk,0,0}     ;$c310
!nullsub{bmodechk,0,0}    ;$c311
!nullsub{amodechk,0,0}    ;$c312
!nullsub{casechkw,0,0}    ;$c313
!nullsub{casechkl,0,0}    ;$c314
!nullsub{currentchk,0,0}  ;$c315
;
!nullsub{ltobover,0,0}    ;$c316
!nullsub{wtobover,0,0}    ;$c317
!nullsub{ltowover,0,0}    ;$c318
!nullsub{qtobover,0,0}    ;$c319
;
!nullsub{ftobover,0,0,#ffplib,#la6} ;$c31a
!nullsub{ftowover,0,0,#ffplib,#la6} ;$c31b
!nullsub{ftolover,0,0,#ffplib,#la6} ;$c31c
;
!nullsub{getvbr,0,0}  ;$c31d
!nullsub{getcpu,0,0}  ;$c31e
!nullsub{updatestack,0,0}  ;$c31f
!nullsub{checkpointer,0,0}  ;$c320

init:!nullsub{codeinit,0,0}
finit:!nullsub{codefinit,0,0}

!libfin

;******************* CODE BELOW *********************

cpu_:       Dc      0
vbr_:       Dc.l    0
ostack:     Dc.l    0   ;stack should meet up with this value at end of prog!
supernest:  Dc      0
maxstack:   Dc.l    0
oldtrap:    Dc.l    0
    ;
trapmesss:  Dc.l trapn2,trapn3,trapn4,trapn5,trapn6,trapn7
            Dc.l trapn8,trapn9,trapn10,trapn11,trapn12,trapn13

;********************** GURUS *********************** Traps (as for 68000 Exception Vector Numbers)

trapn2:Dc.b "GURU! - Bus Error",0             ; access of nonexistent memory
trapn3:Dc.b "GURU! - Address Error",0         ; long/word access of odd address (68000)
trapn4:Dc.b "GURU! - ILLEGAL Instruction",0   ; illegal opcode (other than Axxx or Fxxx)
trapn5:Dc.b "GURU! - Division by Zero",0      ; processor division by zero
trapn6:Dc.b "GURU! - CHK Instruction",0       ; register bounds error trap by CHK
trapn7:Dc.b "GURU! - TRAPV Instruction",0     ; overflow error trap by TRAPV
trapn8:Dc.b "GURU! - Privilege Violation",0   ; user execution of supervisor opcode
trapn9:Dc.b "GURU! - Trace",0                 ; status register TRACE bit trap
trapn10:Dc.b "GURU! - Line 1010 Emulator",0   ; execution of opcode beginning with $A
trapn11:Dc.b "GURU! - Line 1111 Emulator",0   ; execution of opcode beginning with $F
trapn12:Dc.b "TRAP! - Trap Instruction",0     ; TRAP N instruction where N = 0 to 15
trapn13:Dc.b "GURU! - No Idea",0              ; should not happen
Even

;********************* MESSAGES *********************

returnmess:  Dc.b    "Return without Gosub",0
nextmess:    Dc.b    "Next without For",0
stackmess:   Dc.b    "Stack Error on Exit - Unterminated Gosub or For?",0
nostackmess: Dc.b    "Out of Stack Space",0
arrmess:     Dc.b    "Array Subscript out of Range",0
maxmess:     Dc.b    "Value out of Maximum Range",0
;ferr1:       Dc.b    "ILLEGAL Quantity Error",0
sarraymess:  Dc.b    "Array Dimension out of Range",0
datamess:    Dc.b    "Data type mismatch",0
bmodemess:   Dc.b    "Command only available in BLITZ mode!",0
amodemess:   Dc.b    "Command only available in AMIGA mode!",0
casemess:    Dc.b    "End Select/Case/Default without Select",0
currentmess: Dc.b    "No Current List Item",0
overmess:    Dc.b    "OverFlow Error",0
pointermess:  Dc.b    "Error pointer adress <=0",0
Even

;********************* ERRORS **********************

overerr:    MOVE.l #overmess,d0:TRAP #0
pointererr: MOVE.l #pointermess,d0:TRAP #0
returnerr:  MOVE.l #returnmess,d0:TRAP #0
nexterr:    MOVE.l #nextmess,d0:TRAP #0
stackerr:   MOVE.l #stackmess,d0:TRAP #0
nostackerr: MOVE.l #nostackmess,d0:TRAP #0
arrerr:     MOVE.l #arrmess,d0:TRAP #0
maxerr:     MOVE.l #maxmess,d0:TRAP #0
sarrayerr:  MOVE.l #sarraymess,d0:TRAP #0
dataerr:    MOVE.l #datamess,d0:TRAP #0
bmodeerr:   MOVE.l #bmodemess,d0:TRAP #0
amodeerr:   MOVE.l #amodemess,d0:TRAP #0
caseerr:    MOVE.l #casemess,d0:TRAP #0
currenterr: MOVE.l #currentmess,d0:TRAP #0

;********************* CHECKING **********************

.finalscheck:
  CMP.l ostack(pc),a7 : BNE stackerr
RTS

.ltobover:
  CMP.l #127,d0 : BGT overerr
  CMP.l #-128,d0 : BLT overerr
RTS

.wtobover:
  CMP #127,d0 : BGT overerr
  CMP #-128,d0 : BLT overerr
RTS

.ltowover:
  CMP.l #32767,d0 : BGT overerr
  CMP.l #-32768,d0 : BLT overerr
RTS

.checkpointer:
  CMP.l #4,a2
  BPL 'r1
    BRA pointererr
 'r1
RTS

.updatestack:
  MOVE.l a6,-(a7)
  MOVE.l $4,a6
  SUBA.l a1,a1
  JSR -294(a6)                ; _FindTask
  MOVE.l d0,a6
  MOVE.l $3a(a6),a0
  MOVE.l (a7)+,a6
  LEA 1024(a0),a0 : MOVE.l a0,maxstack
  MOVE.l a7,a0:ADDQ #8,a0 : MOVE.l a0,ostack
RTS

.qtobover:
  SWAP d0
  CMP #127,d0 : BGT overerr
  CMP #-128,d0 : BLT overerr
  SWAP d0
RTS

.ftobover:
  MOVEM.l d0-d1/a0-a1,-(a7)
  JSR -30(a6):BVS overerr           ;mathffplib :_SPFix()
  BSR ltobover
  MOVEM.l (a7)+,d0-d1/a0-a1
RTS

.ftowover:
  MOVEM.l d0-d1/a0-a1,-(a7)
  JSR -30(a6):BVS overerr           ;mathffplib :_SPFix()
  BSR ltowover
  MOVEM.l (a7)+,d0-d1/a0-a1
RTS

.ftolover:
  MOVEM.l d0-d1/a0-a1,-(a7)
  JSR -30(a6):BVS overerr           ;mathffplib :_SPFix()
  MOVEM.l (a7)+,d0-d1/a0-a1
RTS

.sarraychk:
  CMP.l #65536,d0 : BCC sarrayerr
RTS

.aarraychk:
  CMP.l #65536,d1 : BCC sarrayerr
RTS

.datachk:
  MOVE.b (a3)+,d1
  CMP.b #"D",d1 : BNE dataerr
  CMP.b (a3)+,d0 : BNE dataerr
RTS

.bmodechk:
  BPL bmodeerr
RTS

.amodechk:
  BMI amodeerr
RTS

.stackchk:
  TST supernest : BNE 'skip
    CMP.l maxstack(pc),a7 : BCS nostackerr
 'skip
RTS

.retchk:
  CMP #"gS",8(a7)  :BNE returnerr
  MOVE.l 4(a7),a0
  LEA 10(a7),a7
JMP (a0)

.nextchkw:
  CMP #"fO",12(a7):BNE nexterr
RTS

.nextchkl:
  CMP #"fO",16(a7):BNE nexterr
RTS

.casechkw:
  CMP #"sE",6(a7):BNE caseerr
RTS

.casechkl:
  CMP #"sE",8(a7):BNE caseerr
RTS

.currentchk:
  CMP #0,a2:BEQ currenterr
RTS

;*********************** MISC *************************

.gosuper:
  ADDQ #1,supernest
RTS

.gouser:
  SUBQ #1,supernest
RTS

.trapper:
  MOVE.l (a7)+,d0                                                 ; exception number is on top of the *supervisor* stack as a longword!
  MOVE.l #'more,2(a7)                                             ; remove the number and 
  RTE
 'more
  CMP #32,d0 : BCS 'skip : MOVEQ #12,d0 : 'skip
  CMP #14,d0 : BCS 'skiq : MOVEQ #13,d0 : 'skiq
  LEA trapmesss(pc),a0 : LSL #2,d0 : MOVE.l -8(a0,d0),d0
TRAP #0

.getvbr:
  MOVE.l vbr_,a0
RTS

.getcpu:
  MOVE cpu_,d0
RTS

.codeinit:
  MOVE.l a7,a0:SUB.l d2,a0:LEA 1024(a0),a0:MOVE.l a0,maxstack
  MOVE.l a7,a0:ADDQ #4,a0:MOVE.l a0,ostack

  MOVE.l 4,a0:MOVE.l 276(a0),a0                     ;-- get current task
  MOVE.l 50(a0),oldtrap:MOVE.l #trapper,50(a0)      ;-- init my trapcode for the task

  MOVE.l 4,a0    ;-- get cpu information of exec struct element "AttnFlags"
  MOVE 296(a0),d0:MOVEQ #0,d1:AND #15,d0
 'loop:
    BEQ 'done:
    ADDQ #1,d1
    LSR #1,d0
  BRA 'loop
 'done:
  MOVE d1,cpu_

  MOVEQ #0,d2    ;-- if we have a 68010+ we can get the vbr via instrution!
  CMP #2,d1
  BCS 'skip
    MOVE.l 4,a6
    JSR -150(a6)  ;supervisor state!
    Dc $4e7a,$2801;movec vbr,d2
    JSR -156(a6)  ;userstate
 'skip:
  MOVE.l d2,vbr_
RTS

.codefinit:
  MOVE.l 4,a0:MOVE.l 276(a0),a0 ;-- get current task
  MOVE.l oldtrap(pc),50(a0)     ;-- restore old trap code
'skip:
RTS