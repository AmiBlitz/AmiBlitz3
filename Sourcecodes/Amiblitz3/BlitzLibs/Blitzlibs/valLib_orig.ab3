;
; ********* ALRIGHTY - A VAL( FUNCITON
;

!libheader{#vallib,0,0,0,errors}

!afunction{5}   ;   return a FLOAT
!args{7}
!libs{#ffplib,#la6}
!subs{doval,0,0}
!name{"Val","(String$)"}    ;*****

!afunction{3}
!args{8}
!libs{#ffplib,#la6}
!subs{doint,intchk,0}
!name{"Int","(Expression)"} ;*****

!afunction{4}
!args{8}
!libs{#ffplib,#la6}
!subs{dosgn,intchk,0}
!name{"Sgn","(Expression)"} ;*****

!afunction{5}
!args{5}
!libs{#ffplib,#la6}
!subs{doffrac,0,0}
!name{"Frac","(Expression)"}    ;*****

!afunction{4}
!args{4}
!libs
!subs{doqfrac,0,0}
!name{"QFrac","(Quick)"}    ;*****

!afunction{4}
!args{4,4,4}
!libs
!subs{doqwrap,0,0}
!name{"QWrap","(Quick,Low,High)"}   ;*****

!afunction{4}
!args
!libs
!subs{dornd1,0,0}
!args{2}
!libs
!subs{dornd2,0,0}
!name{"Rnd","[(Range)]"}    ;*****

!afunction{4}
!args{4}
!libs
!subs{doqabs,0,0}
!name{"QAbs","(Quick)"} ;*****

!afunction{5}
!args{8}
!libs{#ffplib,#la6}
!subs{dofabs,0,0}
!name{"Abs","(Expression)"} ;*****

!afunction{4}
!args{4,4,4}
!libs
!subs{doqlimit,0,0}
!name{"QLimit","(Quick,Low,High)"}  ;*****

!afunction{2}
!args
!libs{#graphicslib,#la0}
!subs{dontsc,0,0}
!name{"NTSC",""}    ;*****

!afunction{2}
!args
!libs{#graphicslib,#la0}
!subs{dodispheight,0,0}
!name{"DispHeight",""}  ;*****

!afunction{2}
!args
!libs
!subs{dobeamy,0,0}
!name{"VPos",""}

!afunction{3}
!args
!libs
!subs{dotrue,0,0}
!name{"True",""}

!afunction{3}
!args
!libs
!subs{dofalse,0,0}
!name{"False",""}

!afunction{4}
!args{2,2,2,2}
!libs
!subs{doqangle,0,0}
!name{"QAngle","(Src X,Src Y,Dest X,Dest Y)New"}

!afunction{#long}
!args{#string}
!libs
!subs{AJL_0_646,0,0}
!name{"Vallong","(String$)"}

!astatement
!args{2}
!libs
!subs{rndseed,0,0}
!name{"RndSeed","value ;set start value for random generator"}

;  Dc.b $00
;  Dc.b $03,$02 ;...
;  Ds.l 1
;  Dc.b $00,$01,$07,$00 ;....
;  Ds.w 3
;  Dc.l AJL_0_646
;  Ds.l 1
;  Dc.b $FF,$FF,$00,$00 ;....
;  Ds.l 1
;  Dc.b "ValLong",0
;  Dc.b "(String$)",0
;

!libfin

;********************* CODE BELOW ************************

last:Dc 17
sweor:Dc 17*2
old: Dc.w 0
old2: Dc.w 17*8
isinit: Dc.w 0
rndseed
MOVE.w d0,last
LSL.w #2,d0
MOVE.w d0,sweor
LSL.w #2,d0
MOVE.w d0,old
LSL.w #2,d0
MOVE.w d0,old2
RTS
JL_0_588:
  MOVEQ.l #$00,D7
  MOVEQ.l #$01,D6
  MOVEQ.l #$00,D3
JL_0_58E:
  SUBQ.w #1,D2
   BMI.w JL_0_5C0
  MOVE.b (A3)+,D3
  CMPI.w #$30,D3
   BCS.w JL_0_5C0
  CMPI.w #$39,D3
   BHI.w JL_0_5C0
  SUBI.w #$30,D3
  LSL.l #1,D6
  MOVE.l D6,D1
  LSL.l #2,D6
  ADD.l D1,D6
  LSL.l #1,D7
  MOVE.l D7,D1
  LSL.l #2,D7
  ADD.l D1,D7
  ADD.l D3,D7
 BRA.w JL_0_58E

JL_0_5C0:
 RTS


JL_0_5C2:
  MOVE.w #$0030,D3
  MOVEQ.l #$00,D0
  ADDQ.w #1,A3
 BRA.w JL_0_5E0

JL_0_5CE:
  MOVE.b (A3)+,D1
  SUB.b D3,D1
   BMI.w JL_0_5E4
  ADDI.b #$FF,D1
   BGT.w JL_0_5E4
  ROXL.l #1,D0
JL_0_5E0:
   DBF D2,JL_0_5CE
JL_0_5E4:
 BRA.w JL_0_62E

JL_0_5E8:
  MOVEQ.l #$00,D0
  ADDQ.w #1,A3
 BRA.w JL_0_62A

JL_0_5F0:
  MOVE.b (A3)+,D1
  SUBI.b #"0",D1 : BMI.w JL_0_62E
  CMPI.b #$A,D1  : BCS.w JL_0_626
  SUBI.b #$11,D1 : BMI.w JL_0_62E
  CMPI.b #$6,D1  : BCS.w JL_0_622
  SUBI.b #$20,D1 : BMI.w JL_0_62E
  CMPI.b #$6,D1  : BCC.w JL_0_62E

  JL_0_622:
  ADDI.w #$A,D1
  JL_0_626:
  ASL.l #4,D0
  ADD.b D1,D0
  JL_0_62A:
  DBF D2,JL_0_5F0
  JL_0_62E:

  TST.b longmode
   BNE.w JL_0_63E
   JSR -$24(A6)
 RTS

JL_0_63E:
  CLR.b longmode
 RTS


AJL_0_646:
  MOVE.b #$FF,longmode
  MOVEA.l D0,A3
  MOVE.l A3,-(A7)
   BSR.w JL_0_65A
  MOVEA.l (A7)+,A3
 RTS

JL_0_65A:
  MOVEQ.l #$00,D0
  MOVE.l -(A2),D2
JL_0_65E:
  SUBQ.w #1,D2
   BMI.w JL_0_698
  CMPI.b #$20,(A3)+
   BEQ.w JL_0_65E
  ADDQ.w #1,D2
  SUBQ.w #1,A3
  CMPI.b #$24,(A3)
   BEQ.w JL_0_5E8
  CMPI.b #$25,(A3)
   BEQ.w JL_0_5C2
  CMPI.b #$2D,(A3)
   BNE.w JL_0_692
  ADDQ.w #1,A3
   BSR.w JL_0_692
  NEG.l D0
 RTS

JL_0_692:
   BSR.w JL_0_588
  MOVE.l D7,D0
JL_0_698:
 RTS
longmode: Ds.w 1


.doqangle
  ;
  SUB d2,d0:SUB d3,d1
  ;
  MOVEQ #0,d2:TST d1:BPL 'hpos:MOVEQ #16,d2:NEG d1
'hpos
  TST d0:BPL 'wpos:EOR #8,d2:NEG d0
'wpos
  CMP d1,d0:BMI 'notsteep:BNE 'neq:MOVE  #$2000,d1:BRA 'flow
'neq
  EOR #4,d2:EXG d1,d0
'notsteep
  TST d1:BNE 'noflow:MOVEQ #0,d1:BRA 'flow
'noflow
  EXT.l d0:SWAP  d0:DIVU  d1,d0:LSR #6,d0:AND #1022,d0:MOVE  'arc(pc,d0),d1
'flow
  MOVE.l  'oct(pc,d2),d0:EOR d0,d1:CLR d0:SWAP d0:ADD d1,d0
  ;
  NEG d0:SUB #$4000,d0:RTS
  ;
'oct
  Dc  0,0,$4000,-1,0,-1,$c000,0
  Dc  $8000,-1,$4000,0,$8000,0,$c000,-1
'arc:IncBin arc.bin

.dotrue:Dc $a000,'f-'s
's:MOVEQ #-1,d0:'f:RTS

.dofalse:Dc $a000,'f-'s
's:MOVEQ #0,d0:'f:RTS

.dobeamy:Dc $a000,'f-'s
's
MOVE.l $dff004,d0 ;pick up whole long word...
LSR.l #8,d0:AND #$1ff,d0
'f:RTS

.dodispheight   ;return 200 for NTSC or 256 for PAL
;
MOVE #200,d0:BTST #0,207(a0):BNE 'done:MOVE #256,d0
'done:RTS

.dontsc ;return -1 if in ntsc mode.
;
BTST #0,207(a0):SNE d0:EXT d0:RTS

.doffrac
MOVE.l d0,-(a7):BTST #7,d0:BEQ 'skip
JSR -84-12(a6):BRA 'more
'skip:JSR -84-6(a6)
'more:MOVE.l d0,d1
MOVE.l (a7)+,d0:JMP -72(a6)

.dofabs
MOVE -(a2),d1:CMP #5,d1:BEQ 'float
CMP #4,d1:BEQ 'quick:CMP #2,d1:BHI 'long:BEQ 'word
'byte:EXT d0
'word:EXT.l d0
'long:JSR -36(a6)
'float:BCHG #7,d0:BNE 'skip:BCHG #7,d0
'skip:RTS
'quick:ALibJsr $d300:BRA 'float

.doqabs:Dc $a000,'skip-'s
's:NEG.l d0:BPL 'skip:NEG.l d0
'skip:RTS

.dornd2:MOVE d0,d7:BSR genrnd:MULU d7,d0:RTS

.dornd1:MOVEQ #0,d0
.genrnd
;
;not bad, this one...
;
;MOVE $dff006,d0
MOVE.w old,d0
BNE 'l1
TST.b isinit
BNE 'l1
MOVE $dff006,d0:ROR #8,d0
MOVE.b #1,isinit
;;EOR d1,d0
;;
'l1 MOVE old2,d1:ROR #8,d1
ADDQ #1,d1
MOVE.w d1,old2
ADDQ.w #1,d0
MOVE.w d0,old
EOR d1,d0
;;
;MOVE.b $bfe601,d1
MOVE last(pc),d2:ROL d2,d1
EOR d1,d0
;;
EOR d2,d0
;;
MOVE sweor(pc),d1:EOR #$aaaa,d1:ROR #1,d1:MOVE d1,sweor
EOR d1,d0
;;
MOVE d0,last:RTS


;MOVE $dff00a,d2
;MOVE last(pc),d3
;MOVE.b $bfe601,d4:ROL.l d3,d4
;MOVE sweor(pc),d5:EOR #$aaaa,d5:ROR #1,d5:MOVE d5,sweor
;;
;ADD.l d0,d0:EOR.l d0,d0
;ADD.l d0,d0:EOR.l d0,d0
;ADD.l d0,d0:EOR.l d0,d0
;ADD.l d0,d0:EOR.l d0,d0
;EOR.l d0,d0
;ASR.l #8,d0
;ASR.l #8,d0
;
;MOVE d0,last:RTS


.doqlimit
;
CMP.l d1,d0:BGE 'skip
MOVE.l d1,d0:RTS
'skip:CMP.l d2,d0:BLT 'skip2
MOVE.l d2,d0
'skip2:RTS

.doqwrap:Dc $a000,'skip2-'s
;
's:CMP.l d1,d0:BGE 'skip
SUB.l d1,d0:ADD.l d2,d0:BRA 'skip2
'skip:CMP.l d2,d0:BLT 'skip2
SUB.l d2,d0:ADD.l d1,d0
'skip2:RTS

.doqfrac:Dc $a000,'f-'s
's:TST.l d0:BPL 'skip:NEG.l d0
'skip:SWAP d0:CLR d0:SWAP d0
'f:RTS

.dosgn:MOVE -(a2),d1:CMP #4,d1:BHI 'float:BEQ 'long
CMP #3,d1:BEQ 'long
CMP #1,d1:BNE 'word:EXT d0
'word:EXT.l d0
'long:TST.l d0:BMI 'minus:BEQ 'zilch
'plus:MOVEQ #1,d0:SWAP d0:RTS
'minus:MOVEQ #-1,d0:SWAP d0:CLR d0:RTS
'zilch:MOVEQ #0,d0:RTS
'float:JSR -48(a6):BRA 'long

.doint:MOVE -(a2),d1:CMP #4,d1:BCC 'over3
CMP #3,d1:BEQ 'done
CMP #2,d1:BEQ 'word:EXT d0
'word:EXT.l d0
'done:RTS
'over3:BNE 'float
TST.l d0:BPL 'pos
;
NEG.l d0:CLR d0:SWAP d0:NEG d0:EXT.l d0:RTS
;
'pos:CLR d0:SWAP d0:EXT.l d0:RTS
;
'float:JMP -30(a6)
firstrun: Dc.b 0
fpuon:    Dc.b 0
.doval:MOVE.l d0,a3:MOVE.l a3,-(a7)
  TST.b firstrun
  BNE 'do
   MOVE.b #1,firstrun
  MOVE.l d0,-(a7)
  ALibJsr $c704
  MOVE.b d0,fpuon
  MOVE.l (a7)+,d0
'do

BSR doval2:MOVE.l (a7)+,a3:RTS

.doval2:;calc val of string
;
MOVEQ #0,d0:MOVE.l -(a2),d2
;
;Remove leading spaces...
;
'dl:SUBQ #1,d2:BMI 'done:CMP.b #" ",(a3)+:BEQ 'dl
ADDQ #1,d2:SUBQ #1,a3
;
CMP.b#"$",(a3):BEQ gethex:CMP.b #"%",(a3):BEQ getbin
;
CMP.b #"-",(a3):BNE 'notneg
ADDQ #1,a3:BSR 'notneg:recvfrom_.x fp0:JMP -60(a6)

'notneg:BSR getdec

BTST #1,fpuon
BNE 'f1
MOVE.l d7,d0:JSR -36(a6):;d0 is now a FLOAT!
BRA 'f2
'f1
bind_.s fp0,d0
'f2
CMP #".",d3:
BNE 'done;that's it!

;
bind_.x fp0,fp2
MOVE.l d0,d5:BSR getdec:MOVE.l d5,d0:TST.l d6:BEQ 'done
;
sendto_.x fp1,fp0
accept_.x fp2,fp0
MOVE.l d6,d0:JSR -36(a6):MOVE.l d0,-(a7) ;divisor to float
MOVE.l d7,d0:JSR -36(a6) ;fraction to float
MOVE.l (a7)+,d1
JSR -84(a6):MOVE.l d5,d1:JSR -66(a6):MOVEQ #0,d7
;
'done:RTS

.getdec:;get a decimal number into d7, 10^ in d6
 Dc.l $f227e084  ;fmovem.x fp2/fp7,-(a7)
MOVEQ #0,d7:MOVEQ #1,d6:MOVEQ #0,d3:bind_.w #0,fp0:bind_.w #1,fp1
bind_.w #10,fp2
;
'loop:SUBQ #1,d2:BMI 'done
MOVE.b (a3)+,d3:CMP #"0",d3:BCS 'done
CMP #"9",d3:BHI 'done:SUB #"0",d3
;
;multiply d6 and d7 by ten. add digit to d7
;
bind_.w d3,fp7
connect_.x fp2,fp0
connect_.x fp2,fp1
accept_.x fp7,fp0
LSL.l #1,d6:MOVE.l d6,d1:LSL.l #2,d6:ADD.l d1,d6
LSL.l #1,d7:MOVE.l d7,d1:LSL.l #2,d7:ADD.l d1,d7
ADD.l d3,d7:BRA 'loop
;
'done:
Dc.l $f21fd021 ;fmovem.x (a7)+,fp2/fp7
RTS

getbin:
  MOVE #"0",d3:MOVEQ.l#0,d0:ADDQ#1,a3:BRA inbin
nxbin:MOVE.b (a3)+,d1:SUB.b d3,d1:BMI dunbin
  ADD.b#255,d1:BGT dunbin:ROXL.l#1,d0
inbin:DBRA d2,nxbin:dunbin:
bind_.l d0,fp0
JSR -36(a6):RTS

gethex:            ;d2=size a3=string
  MOVEQ#0,d0:ADDQ#1,a3:BRA inhx
nxhx:MOVE.b (a3)+,d1:SUB.b #48,d1:BMI dunhx:CMP.b#10,d1:BCS gotdd
  SUB.b#17,d1:BMI dunhx:CMP.b#6,d1:BCS gothd
  SUB.b#32,d1:BMI dunhx:CMP.b#6,d1:BCC dunhx
gothd:ADD#10,d1:gotdd:ASL.l#4,d0:ADD.b d1,d0
inhx:DBRA d2,nxhx:dunhx:
bind_.l d0,fp0
JSR -36(a6):RTS

;******************** ERROR CHECKING *********************

errors

err1:MOVE.l #mess1,d0:TRAP #0

mess1:Dc.b "Illegal Type",0
Even

intchk:CMP #6,-2(a2):BCC err1:RTS
