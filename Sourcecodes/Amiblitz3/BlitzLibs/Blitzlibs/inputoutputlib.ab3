; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Development:AmiBlitz3/BlitzLibs/Decompiled/acidlibs"
; ExeFile         = "inputoutputlib.obj"
; CreateIcon      = 0
; Residents       = "libmacs.res,libnums.res,blitzoffs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 32
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 103
; CursorColumn    = 1
; LabelSearch     = "lab_0018"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max Window      = 20
; Max BlitzFont   = 4
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
; IRA V2.09 (06.03.18) (c)1993-1995 Tim Ruehsen
; (c)2009-2015 Frank Wille, (c)2014-2017 Nicolas Bastien

!libheader{#inputoutputlib,init,0,0,errorHandler}

!astatement
!args
!libs
!subs{do_DefaultInput,0,0}
!name{"DefaultInput",""}

!astatement
!args
!libs
!subs{do_DefaultOutput,0,0}
!name{"DefaultOutput",""}

!nullsub{setInputChannel,0,0}     ; token 3  input: a0: pointer to inputhandler
!nullsub{setOutputChannel,0,0}    ; token 4  input: a0: pointer to outputhandler
!nullsub{getByteFromChannel,0,0}  ; token 5
!nullsub{getDataFromChannel,0,0}  ; token 6  input: a0: buffer, d0:length
!nullsub{putByteToChannel,0,0}    ; token 7  input: d0: byte to send
!nullsub{putDataToChannel,0,0}    ; token 8  input: a0: bugger, d0:length
!nullsub{LAB_0021,0,0}    ;       9

!astatement
!args
!libs
!subs{do_PopInput,chkInputChannel,0}
!name{"PopInput",""}

!astatement
!args
!libs
!subs{do_PopOutput,chkOutputChannel,0}
!name{"PopOutput",""}

init: !nullsub{_codeinit,0,0,#doslib,#la6}

!libfin
; ----------------------------------------------------------------------

LAB_0002:
 ORI.b #$00,D0   ;186: 00000000
 ORI.b #$00,D0   ;18a: 00000000
 ORI.b #$00,D0   ;18e: 00000000
 ORI.b #$00,D0   ;192: 00000000
 ORI.b #$00,D0   ;196: 00000000
 ORI.b #$00,D0   ;19a: 00000000
 ORI.b #$00,D0   ;19e: 00000000
 ORI.b #$00,D0   ;1a2: 00000000
 ORI.b #$00,D0   ;1a6: 00000000
LAB_0003:
 ORI.b #$00,D0   ;1aa: 00000000
 ORI.b #$00,D0   ;1ae: 00000000
 ORI.b #$00,D0   ;1b2: 00000000
 ORI.b #$00,D0   ;1b6: 00000000
 ORI.b #$00,D0   ;1ba: 00000000
 ORI.b #$00,D0   ;1be: 00000000
 ORI.b #$00,D0   ;1c2: 00000000
LAB_0004:
 ORI.b #$00,D0   ;1c6: 00000000
LAB_0006:
 ORI.b #$00,D0   ;1ca: 00000000
 ORI.b #$00,D0   ;1ce: 00000000
 ORI.b #$00,D0   ;1d2: 00000000
 ORI.b #$00,D0   ;1d6: 00000000
 ORI.b #$00,D0   ;1da: 00000000
 ORI.b #$00,D0   ;1de: 00000000
 ORI.b #$00,D0   ;1e2: 00000000
 ORI.b #$00,D0   ;1e6: 00000000
 ORI.b #$00,D0   ;1ea: 00000000
 ORI.b #$00,D0   ;1ee: 00000000
 ORI.b #$00,D0   ;1f2: 00000000
 ORI.b #$00,D0   ;1f6: 00000000
 ORI.b #$00,D0   ;1fa: 00000000
 ORI.b #$00,D0   ;1fe: 00000000
 ORI.b #$00,D0   ;202: 00000000
 ORI.b #$00,D0   ;206: 00000000

LAB_0007: Dc.l 0
outputHandler: Dc.l 0
inputhandler: Dc.l 0
_dosBase: Dc.l 0
inputFileHandle: Dc.l 0
outputFileHandle:Dc.l 0
writeBuffer: Dc.w $0000   ;222

;---------------------------------------------------------------------------------------
_codeinit:
  MOVE.l A6,_dosBase
  JSR _Input(A6)        ;-54
  MOVE.l D0,inputFileHandle
  CLR.w LAB_0004
  CLR.w LAB_0004+2

  JSR _Output(A6)
  MOVE.l D0,outputFileHandle
  CLR.w LAB_0007
  CLR.w LAB_0007+2

  BSR.w do_DefaultInput
BRA.w do_DefaultOutput


  BRA.w readFromInput

LAB_0010:
  BRA.w errorInput  ;262: 60000184


readFromInput:
  MOVEM.l D1-D3/A1,-(A7)
  MOVE.l A0,D2                  ; buffer
  MOVE.l D0,D3                  ; length
  MOVE.l inputFileHandle(PC),D1 ; file
  MOVEA.l _dosBase(PC),A6
  ADDQ.l #1,D3
  JSR _Read(A6)    ; -42
  SUBQ.l #1,D0
  MOVEM.l (A7)+,D1-D3/A1
RTS

 BRA.w writeA0ToOutputWithCheck  ;284: 60000044
 BRA.w writeA0ToOutput  ;288: 60000026

writeToOutput:
  MOVEM.l D1-D3/A0-A1,-(A7)
  MOVE.b D0,writeBuffer
  MOVE.l outputFileHandle(PC),D1   ;file
  MOVE.l #writeBuffer,D2           ;buffer
  MOVEQ #1,D3                      ;length
  MOVEA.l _dosBase(PC),A6
  JSR _Write(A6)                   ; -48
  MOVEM.l (A7)+,D1-D3/A0-A1
RTS

writeA0ToOutput:                                                                                                                                                                                                                                         
  MOVEM.l D1-D3/A1,-(A7)
  MOVE.l A0,D2                     ;buffer
  MOVE.l D0,D3                     ;length
  MOVE.l outputFileHandle(PC),D1   ;file
  MOVEA.l _dosBase(PC),A6
  JSR _Write(A6)                   ; -48
  MOVEM.l (A7)+,D1-D3/A1
RTS

writeA0ToOutputWithCheck:
  MOVEM.l D0-D3/A1,-(A7)

  MOVE.l A0,D2
  MOVEQ #-1,D3
  LAB_0015:
    ADDQ.l #1,D3
    TST.b (A0)+
  BNE.w LAB_0015

  TST.w D3
  BEQ.w LAB_0016
    MOVE.l outputFileHandle(PC),D1
    MOVEA.l _dosBase(PC),A6
    JSR _Write(A6)                   ; -48
  LAB_0016:
  MOVEM.l (A7)+,D0-D3/A1
RTS

.do_DefaultOutput:
  LEA writeToOutput(PC),A0  ;2f2: 41faff98

setOutputChannel:
  MOVE.l outputHandler(PC),D0  ;2f6: 203aff16
  MOVE.l A0,outputHandler  ;2fa: 23c80000020e
  MOVEM.l D1/A1,-(A7)  ;300: 48e74040
  LEA LAB_0006(PC),A1  ;304: 43fafec4
  MOVE.w LAB_0007(PC),D1  ;308: 323aff00
  MOVE.l D0,0(A1,D1.W)  ;30c: 23801000
  ADDQ.w #4,D1   ;310: 5841
  AND.w #$003f,D1  ;312: c27c003f
  MOVE.w D1,LAB_0007  ;316: 33c10000020a
  ADDQ.w #1,LAB_0007+2  ;31c: 52790000020c
  MOVEM.l (A7)+,D1/A1  ;322: 4cdf0202
RTS    ;326: 4e75

.do_PopOutput:
  SUBQ.w #1,LAB_0007+2
  LEA LAB_0006(PC),A0
  MOVE.w LAB_0007(PC),D0
  SUBQ.w #4,D0
  AND.w #$003f,D0           ; 63
  MOVE.w D0,LAB_0007
  MOVE.l 0(A0,D0.W),outputHandler
RTS

do_DefaultInput:
 LEA LAB_0010(PC),A0  ;34c: 41faff14

.setInputChannel:
  MOVE.l inputhandler(PC),D0
  MOVE.l A0,inputhandler
  MOVEM.l D1/A1,-(A7)
  LEA LAB_0002(PC),A1
  MOVE.w LAB_0004(PC),D1
  MOVE.l D0,0(A1,D1.W)
  ADDQ.w #4,D1 : AND.w #$003f,D1
  MOVE.w D1,LAB_0004
  ADDQ.w #1,LAB_0004+2
  MOVEM.l (A7)+,D1/A1
RTS

do_PopInput:
  SUBQ.w #1,LAB_0004+2
  LEA LAB_0002(PC),A0
  MOVE.w LAB_0004(PC),D0
  SUBQ.w #4,D0 : AND.w #$003f,D0
  MOVE.w D0,LAB_0004
  MOVE.l 0(A0,D0.W),inputhandler
RTS

.getByteFromChannel:
  MOVE.l A6,-(A7)
  MOVEA.l inputhandler(PC),A6
  JSR (A6)
  MOVEA.l (A7)+,A6
RTS

.getDataFromChannel:
  MOVE.l A6,-(A7)
  MOVEA.l inputhandler(PC),A6
  JSR -4(A6)
  MOVEA.l (A7)+,A6
RTS

.putByteToChannel:
  MOVE.l A6,-(A7)
  MOVEA.l outputHandler(PC),A6
  JSR (A6)
  MOVEA.l (A7)+,A6
RTS

putDataToChannel:
  MOVE.l A6,-(A7)
  MOVEA.l outputHandler(PC),A6
  JSR -4(A6)
  MOVEA.l (A7)+,A6
RTS

LAB_0021:
  MOVE.l A6,-(A7)
  MOVEA.l outputHandler(PC),A6
  JSR -8(A6)
  MOVEA.l (A7)+,A6
RTS

; =========================================================================================
errorHandler:
errorInput:     MOVE.l #message1,D0 : TRAP #0
errorPopInput:  MOVE.l #message2,D0 : TRAP #0
errorPopOutput: MOVE.l #message3,D0 : TRAP #0

message1: Dc.b  "Can't Input Character from Defualt Input",0
message2: Dc.b  "No Input channel to pop!",0
message3: Dc.b  "No Output channel to pop!",0

.chkInputChannel:
  TST.w LAB_0004+2
  BEQ.w errorPopInput
RTS

.chkOutputChannel:
  TST.w LAB_0007+2
  BEQ.w errorPopOutput
RTS
