; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Development:Amiblitz3/BlitzLibs/Decompiled"
; ExeFile         = "stringfunclib_new.obj"
; CreateIcon      = 0
; Residents       = "libmacs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 143
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 877
; CursorColumn    = 3
; LabelSearch     = "striptrai"
; LabelRemark     = 0
; LabelAll        = 1
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
!libheader{#stringfunclib,init,1,0,0}

!afunction{#string}
!args{#string,#long}
!libs
!subs{do_Left,0,0}
!name{"Left$","(String$,Length)"}

!afunction{#string}
!args{#string,#long}
!libs
!subs{do_Right,0,0}
!name{"Right$","(String$,Length)"}

!acommand{#string}
!args{#string,#long,#long}
!libs
!subs{do_Mid,0,0}
!args{#string,#long}
!libs
!subs{do_MidOnlyLeft,0,0}
!args{#string,#long,#long,#string}
!libs
!subs{do_MidWithReplace,0,0}
!name{"Mid$","(String$,Startchar[,Length][,Replace$])"}

!afunction{#string}
!args{#long}
!libs
!subs{do_Hex,0,0}
!name{"Hex$","(Expression)"}

!afunction{#string}
!args{#long}
!libs
!subs{do_Bin,0,0}
!name{"Bin$","(Expression)"}

!afunction{#string}
!args{#word}
!libs
!subs{do_Chr,0,0}
!name{"Chr$","(Expression)"}

!afunction{#word}
!args{#string}
!libs
!subs{do_Asc,0,0}
!name{"Asc","(String$)"}

!afunction{#string}
!args{#string,#long}
!libs
!subs{do_String,0,0}
!name{"String$","(String$,Repeats)"}

!afunction{#long}
!args{#string,#string}
!libs
!subs{do_Instr,0,0}
!args{#string,#string,#long}
!libs
!subs{do_InstrStartPos,0,0}
!name{"Instr","(String$,Findstring$[,Startpos])"}

!afunction{#string}
!args{#string,#string,#string}
!libs
!subs{do_Replace,0,0}
!name{"Replace$","(String$,Findstring$,Replacestring$)"}

!afunction{#string}
!args{#long}
!libs
!subs{do_Mki,0,0}
!name{"Mki$","(Integer)"}

!afunction{#string}
!args{#long}
!libs
!subs{do_Mklq,0,0}
!name{"Mkl$","(Long)"}

!afunction{#word}
!args{#string}
!libs
!subs{do_Cvi,0,0}
!name{"Cvi","(String$)"}

!afunction{#long}
!args{#string}
!libs
!subs{do_Cvlq,0,0}
!name{"Cvl","(String$)"}

!afunction{#long}
!args{#string}
!libs
!subs{do_Len,0,0}
!name{"Len","(String$)"}

!afunction{#string}
!args{#string,#long}
!libs
!subs{do_UnLeft,0,0}
!name{"UnLeft$","(String$,Length)"}

!afunction{#string}
!args{#string,#long}
!libs
!subs{do_UnRight,0,0}
!name{"UnRight$","(String$,Length)"}

!afunction{#string}
!args{#string,#word}
!libs
!subs{do_striplead,0,0}
!name{"StripLead$","(String$,Ascii)"}

!afunction{#string}
!args{#string,#word}
!libs
!subs{do_StripTrail,0,0}
!name{"StripTrail$","(String$,Ascii)"}

!afunction{#string}
!args{#string,#long}
!libs
!subs{do_LSet,0,0}
!name{"LSet$","(String$,Characters)"}

!afunction{#string}
!args{#string,#long}
!libs
!subs{do_RSet,0,0}
!name{"RSet$","(String$,Characters)"}

!afunction{#string}
!args{#string,#long}
!libs
!subs{do_Centre,0,0}
!name{"Centre$","(String$,Characters)"}

!afunction{#string}
!args{#string}
!libs
!subs{do_LCase,0,0}
!name{"LCase$","(String$)"}

!afunction{#string}
!args{#string}
!libs
!subs{do_UCase,0,0}
!name{"UCase$","(String$)"}

!astatement
!args{#word}
!libs
!subs{do_CaseSense,0,0}
!name{"CaseSense","On|Off"}

!afunction{#string}
!args{#quick}
!libs
!subs{do_Mklq,0,0}
!name{"Mkq$","(Quick)"}

!afunction{#quick}
!args{#string}
!libs
!subs{do_Cvlq,0,0}
!name{"Cvq","(String$)"}

!afunction{#string}
!args{#byte}
!libs
!subs{do_Hexb,0,0}
!name{"Hexb$","(Expression)"}

!afunction{#string}
!args{#word}
!libs
!subs{do_Hexw,0,0}
!name{"Hexw$","(Expression)"}

!afunction{#string}
!args{#byte}
!libs
!subs{do_Binb,0,0}
!name{"Binb$","(Expression)"}

!afunction{#string}
!args{#word}
!libs
!subs{do_Binw,0,0}
!name{"Binw$","(Expression)"}

!afunction{#string}
!args{#long,#word}
!libs
!subs{do_PeekMax,0,0}
!name{"PeekMax$","(Addr, MaxChars)"}

!afunction{#string}
!args{#string}
!libs
!subs{do_Trim,0,0}
!name{"Trim$","(String$)"}

; =========================================================================================================
.init: :!nullsub{do_init,0,0}
!libfin

; =========================================================================================================

mode_casesense: Ds.w 1

.do_CaseSense:
  MOVE.w D0,mode_casesense
RTS

.do_PeekMax:
  MOVEA.l D0,A0
  MOVEQ   #-1,D0
  SUBQ.w  #1,D1
  do_PeekMaxb:
    ADDQ.l #1,D0
    MOVE.b (A0)+,(A3)+
    BEQ.w do_PeekMaxc
  DBF D1,do_PeekMaxb
  do_PeekMaxc:
  SUBQ.l #1,A3
RTS

.copyNewStringA3:     ; (a0: string pointer, d1: length)
  MOVE.l     D1,D0
  BEQ.w      LAB_0021f7ba           ; if length is 0 just return d0 = 0

  CMPI.l     #8,D1
  BCS.w      LAB_0021f7b2           ; if length is less than 8 goto ...
    MOVE.l     D1,D2
    LSR.l      #3,D2
    BEQ.w      LAB_0021f7b2
      LAB_0021f794:
        MOVE.b     (A0)+,(A3)+
        MOVE.b     (A0)+,(A3)+
        MOVE.b     (A0)+,(A3)+
        MOVE.b     (A0)+,(A3)+
        MOVE.b     (A0)+,(A3)+
        MOVE.b     (A0)+,(A3)+
        MOVE.b     (A0)+,(A3)+
        MOVE.b     (A0)+,(A3)+
        SUBQ.l     #1,D2
      BNE.w LAB_0021f794
      AND.w #7,D1
      BEQ.w LAB_0021f7ba
    LAB_0021f7b2:
    SUBQ.w #1,D1

    LAB_0021f7b4:
      MOVE.b (A0)+,(A3)+
    DBF D1,LAB_0021f7b4
  LAB_0021f7ba:
RTS


.do_init:
  MOVE.w #-1,mode_casesense
  LEA copyNewStringA3(PC),A0
  MOVE.l A0,D0
RTS

.do_StripTrail:       ;(d0:string$,d1:character)
  MOVEA.l D0,A3       ; stringpointer to a3
  MOVE.l  -(A2),D0    ; length of string
  ADDA.l  D0,A3       ; move pointer to end of string

  LAB_0021f7d2:
    SUBQ.l  #1,D0
    BMI.w   LAB_0021f7e0
  CMP.b   -(A3),D1
  BEQ.w   LAB_0021f7d2

  ADDQ.w  #1,A3
  LAB_0021f7e0:
  ADDQ.l  #1,D0
RTS


.do_UnLeft:     ; (d0: String,d1:Length)
  MOVE.l  -4(A2),D2 ; stringlength
  SUB.l   D1,D2     ; sub length of stringlength
  MOVE.l  D2,D1     ; set as new stringlength

.do_Left:
  TST.l  D1
  BPL.w  LAB_0021f7f4
    MOVEQ #0,D1
  LAB_0021f7f4:

  MOVEA.l D0,A3       ; stringpointer to A3
  CMP.l   -(A2),D1
  BLT.w   LAB_0021f7fe
    MOVE.l  (A2),D1
  LAB_0021f7fe:
  MOVE.l  D1,D0
  ADDA.l  D0,A3
RTS


.do_LSet:
  TST.l      D1
  BPL.w      LAB_0021f80c
    MOVEQ      #0,D1
  LAB_0021f80c:

  SUBQ.w     #1,A3
  MOVE.l     D1,D3
  MOVE.l     -(A2),D2
  SUB.l      D2,D3
  BEQ.w      LAB_0021f82a
  BMI.w      LAB_0021f826

  LAB_0021f81c:
  MOVE.b     #$20,(A3)+
  SUBQ.l     #1,D3
  BNE.w LAB_0021f81c

  LAB_0021f826:
  MOVEA.l    D0,A3
  ADDA.l     D1,A3
  LAB_0021f82a:
  MOVE.l     D1,D0
RTS

.do_RSet:
Dc.l $4a816a00,$00047200,$534b2601,$24229682
Dc.l $67000026,$6b000026,$2040d1c1,$4a826700
Dc.l $000a1123,$53826600,$fffa113c,$00205383
Dc.l $6600fff8,$2640d7c1,$20014e75,$2040d1c2
Dc.l $91c12640,$6000ff08

.do_Centre:
Dc.l $4a816a00,$00047200,$534b2601,$24229682
Dc.l $6b000058,$67000050,$20402801,$e28cd1c4
Dc.l $2802e28c,$d1c43801,$c842e24c,$55c44884
Dc.l $90c42f08,$4a826700,$000a1123,$53826600
Dc.l $fffa2803,$e28c6700,$000e113c,$00205383
Dc.l $53846600,$fff6205f,$10fc0020,$53836600
Dc.l $fff82640,$d7c12001,$4e752040,$e28ad1c2
Dc.l $2401e28a,$91c22640,$6000fe8c

.do_LCase:
Dc.l $22226700,$00242640,$24010c1b,$00416500
Dc.l $00120c2b,$005affff,$62000008,$002b0020
Dc.l $ffff5382,$6600ffe4,$20014e75

.do_UCase:
Dc.l $22226700,$00242640,$24010c1b,$00616500
Dc.l $00120c2b,$007affff,$62000008,$022b00df
Dc.l $ffff5382,$6600ffe4,$20014e75

.do_striplead:      ; (d0: String$, d1: ascii, -(a2): length)
  MOVE.w     D1,D2      ;char > d2
  MOVEA.l    D0,A3      ;
  MOVEA.l    A3,A0      ;strg > a0
  MOVE.l     -(A2),D1   ;lngth > D1
  LAB_0021f952:
    SUBQ.l     #1,D1
    BMI.w      LAB_0021f966 ; if string is empty just return an empty string
  CMP.b      (A0)+,D2       ; while current character is equal decrease length
  BEQ.w      LAB_0021f952

  SUBQ.w     #1,A0          ; move pointer 1 back
  ADDQ.l     #1,D1          ; add 1 to length due to loop
  BRA.w      copyNewStringA3
  LAB_0021f966:
  MOVEQ      #0,D0
RTS

.do_UnRight:
  MOVE.l     -4(A2),D2
  SUB.l      D1,D2
  MOVE.l     D2,D1

.do_Right:
  TST.l      D1
  BPL.w      LAB_0021f97a
    MOVEQ      #0,D1
  LAB_0021f97a:

  MOVEA.l    D0,A3          ; stringpointer to a3
  CMP.l      -(A2),D1       ; compare original length with d1
  BGE.w      LAB_0021f98e   ; if original length greater or equal ...
    MOVE.l     (A2),D0      ; original length to d0
    SUB.l      D1,D0        ; substract charactercount from original length
    LEA        0(A3,D0.w),A0; move stringpointer to new start in A0
    BRA.w      copyNewStringA3
  LAB_0021f98e:
  MOVE.l     (A2),D0  ; original length to d0
  ADDA.l     D0,A3
RTS


.do_MidWithReplace:  ; (D0:String$,D1:Startchar,D2:Length,D3:Replace)
  MOVE.l     -(A2),D4       ; length of mainstring
  MOVE.l     -(A2),D5       ; length of replacestring
  CMP.l      D4,D1
  BGT.w      LAB_0021f9ae
    SUBQ.l     #1,D1
    ADD.l      D1,D0
    MOVEA.l    D0,A0
    MOVEA.l    D3,A1
    SUBQ.l     #1,D2
    LAB_0021f9a8
      MOVE.b     (A1)+,(A0)+
    DBF        D2,LAB_0021f9a8
  LAB_0021f9ae:

  MOVE.l     D4,D0
RTS

.do_MidOnlyLeft:
  MOVE.l     -4(A2),D2
  SUB.l      D1,D2
  ADDQ.l     #1,D2
BRA.w      do_Mid


.do_Mid:
  MOVEA.l    D0,A3
  SUBQ.l     #1,D1

  TST.l      D1
  BPL.w      LAB_0021f9ca
    MOVEQ      #0,D1
  LAB_0021f9ca:

  TST.l      D2
  BPL.w      LAB_0021f9d2
    MOVEQ      #0,D2
  LAB_0021f9d2:

  CMP.l      -(A2),D1
  BGT.w      LAB_0021f9ec
    MOVE.l     D1,D3
    ADD.l      D2,D3
    CMP.l      (A2),D3
    BGT.w      LAB_0021f9f0
  LAB_0021f9e2:
      LEA        0(A3,D1.l),A0
      MOVE.l     D2,D1
      BRA.w      copyNewStringA3
  LAB_0021f9ec:
    MOVEQ      #0,D0
    RTS
  LAB_0021f9f0:
  MOVE.l     (A2),D2
  SUB.l      D1,D2
BRA.w      LAB_0021f9e2




.do_Chr:
  Dc $a000,'f-'s
 's:
  MOVE.b D0,(A3)+
  MOVEQ  #1,D0
 'f:
  RTS


.do_Bin:
  MOVEQ #$1f,D2
  MOVEQ #0,D3
  LAB_0021fa06:
    MOVEQ #$30,D1
    LSL.l #1,D0
    ADDX.w D3,D1
    MOVE.b D1,(A3)+
  DBF D2,LAB_0021fa06
  MOVEQ #32,D0
RTS

.do_Binb:
  MOVEQ  #7,D2
  MOVEQ  #0,D3
  ANDI.l #$ff,D0
  ROR.l  #8,D0
  LAB_0021fa22:
    MOVEQ #$30,D1
    LSL.l #1,D0
    ADDX.w D3,D1
    MOVE.b D1,(A3)+
  DBF D2,LAB_0021fa22
  MOVEQ #8,D0
RTS

.do_Binw:
  MOVEQ #$f,D2
  MOVEQ #0,D3
  SWAP D0
  LAB_0021fa38:
    MOVEQ #$30,D1
    LSL.l #1,D0
    ADDX.w D3,D1
    MOVE.b D1,(A3)+
  DBF D2,LAB_0021fa38
  MOVEQ #16,D0
RTS

.do_Hex:
  MOVEQ #7,D2

  LAB_0021fa4a:
    MOVEQ  #0,D1

    LSL.l  #1,D0
    ROXL.w #1,D1
    LSL.l  #1,D0
    ROXL.w #1,D1
    LSL.l  #1,D0
    ROXL.w #1,D1
    LSL.l  #1,D0
    ROXL.w #1,D1
    ADDI.w #$30,D1

    CMPI.w #$39,D1
    BLS.w  LAB_0021fa6a
      ADDQ.w #7,D1
    LAB_0021fa6a:
    MOVE.b D1,(A3)+                             ; returns string in A3, length in d0
  DBF D2,LAB_0021fa4a
  MOVEQ #8,D0
RTS

.do_Hexb:
  ANDI.l #$ff,D0
  ROR.l #8,D0
  MOVEQ #1,D2

  LAB_0021fa7e:
    MOVEQ  #0,D1

    LSL.l  #1,D0
    ROXL.w #1,D1

    LSL.l  #1,D0
    ROXL.w #1,D1

    LSL.l  #1,D0
    ROXL.w #1,D1

    LSL.l  #1,D0
    ROXL.w #1,D1

    ADDI.w #$30,D1

    CMPI.w #$39,D1
    BLS.w LAB_0021fa9e
      ADDQ.w #7,D1
    LAB_0021fa9e:
    MOVE.b D1,(A3)+
  DBF D2,LAB_0021fa7e
  MOVEQ #2,D0
RTS


.do_Hexw:
  ANDI.l #$ffff,D0

  SWAP   D0
  MOVEQ  #3,D2

  LAB_0021fab2:;                                    XREF[1]:     0021fad4(j)
    MOVEQ  #0,D1
    LSL.l  #1,D0
    ROXL.w #1,D1
    LSL.l  #1,D0
    ROXL.w #1,D1
    LSL.l  #1,D0
    ROXL.w #1,D1
    LSL.l  #1,D0
    ROXL.w #1,D1
    ADDI.w #$30,D1
    CMPI.w #$39,D1
    BLS.w LAB_0021fad2
    ADDQ.w #7,D1
    LAB_0021fad2:;                                    XREF[1]:     0021facc(j)
    MOVE.b D1,(A3)+
  DBF D2,LAB_0021fab2

  MOVEQ #4,D0
RTS

.do_Asc:
  TST.l -(A2)
  BEQ.w LAB_0021faea
    MOVEA.l D0,A3
    MOVEQ  #0,D0
    MOVE.b (A3),D0
    RTS
  LAB_0021faea:
  MOVEQ #-1,D0
RTS

.do_String:       ; (d0:String, d1:Repeats)
  SUBQ.w #1,A3
  MOVE.l D1,D3
  BLE.w  LAB_0021fb18
    MOVEA.l D0,A0
    MOVE.l A0,-(A7)
    MOVE.l A3,-(A7)
    MOVE.l -(A2),D1
    MOVEQ  #0,D4
    LAB_0021fb00:
      BSR.w copyNewStringA3
      MOVE.l D0,D1
      ADD.l D1,D4
      SUBQ.l #1,D3
    BNE.w LAB_0021fb00
    MOVEA.l (A7)+,A0
    MOVEA.l (A7)+,A3
    MOVE.l D4,D1
    BRA.w  copyNewStringA3
  LAB_0021fb18:

  MOVEA.l D0,A3
  MOVEQ #0,D0
RTS


.do_InstrStartPos:
  MOVE.L D2,D4
  SUBQ.L #2,D4
  BRA.W LAB_0096

.do_Instr:
  MOVEQ #-1,D4   ;b26: 78ff
  LAB_0096:

  MOVEA.L D0,A3   ;b28: 2640
  MOVE.L -(A2),D2  ;b2a: 2422
  MOVE.L -(A2),D3  ;b2c: 2622
  LAB_0097:
  ADDQ.L #1,D4   ;b2e: 5284
  MOVE.L D4,D5   ;b30: 2a04
  ADD.L D3,D5   ;b32: da83
  Dc.w $ba82   ;b34
  BGT.W LAB_009E  ;b36: 6e00005a
  MOVEA.L D0,A0   ;b3a: 2040
  ADDA.L D4,A0   ;b3c: d1c4
  MOVEA.L D1,A1   ;b3e: 2241
  MOVE.L D3,D5   ;b40: 2a03
  LAB_0098:
   BEQ.W LAB_009D  ;b42: 67000048
   MOVE.W mode_casesense(PC),D7  ;b46: 3e3afc14
   BNE.W LAB_009B  ;b4a: 66000034
     MOVE.B (A0)+,D7  ;b4e: 1e18
     CMPI.B #$7a,D7   ;b50: 0c07007a
     BHI.W LAB_0099  ;b54: 6200000e
     CMPI.B #$61,D7   ;b58: 0c070061
     BCS.W LAB_0099  ;b5c: 65000006
       Dc.w $ce3c   ;b60
       Dc.w $00df   ;b62
      LAB_0099:
     MOVE.B (A1)+,D6  ;b64: 1c19
     CMPI.B #$7a,D6   ;b66: 0c06007a    
      BHI.W LAB_009A  ;b6a: 6200000e
      CMPI.B #$61,D6   ;b6e: 0c060061
      BCS.W LAB_009A  ;b72: 65000006
        Dc.w $cc3c   ;b76
        Dc.w $00df   ;b78
      LAB_009A:
      Dc.w $be06   ;b7a
      BRA.W LAB_009C  ;b7c: 60000004
    LAB_009B:
      Dc.w $b308   ;b80
    LAB_009C:
    BNE.W LAB_0097  ;b82: 6600ffaa
  SUBQ.L #1,D5   ;b86: 5385
 BRA.W LAB_0098  ;b88: 6000ffb8
  LAB_009D:
 ADDQ.L #1,D4   ;b8c: 5284
 MOVE.L D4,D0   ;b8e: 2004
  RTS    ;b90: 4e75
  LAB_009E:
 MOVEQ #0,D0   ;b92: 7000
RTS    ;b94: 4e75

.do_Replace:
;Dc.l $26222822,$670000b4,$594a2f0b,$2f002040
;Dc.l $7a002c03,$6700009a,$2e08de84,$be816200
;Dc.l $00862f08,$22412e04,$303afb9c,$66000042
;Dc.l $3f011018,$0c00007a,$6200000e,$0c000061
;Dc.l $65000006,$c03c00df,$12190c01,$007a6200
;Dc.l $000e0c01,$00616500,$0006c23c,$00dfb001
;Dc.l $66000036,$53876600,$ffca321f,$6000000e
;Dc.l $b3086600,$00265387,$6600fff6,$205f2242
;Dc.l $2e126700,$000a16d9,$53876000,$fff6da92
;Dc.l $d1c49c84,$6000ff7e,$321f205f,$16d85285
;Dc.l $53866000,$ff7016d8,$52855386,$6600fff8
;Dc.l $265f205f,$22056000,$fb2e2003
;Dc.w $4e75
LAB_009F:
 MOVE.L -(A2),D3  ;b96: 2622
 MOVE.L -(A2),D4  ;b98: 2822
 BEQ.W LAB_00AC  ;b9a: 670000b4
 SUBQ.W #4,A2   ;b9e: 594a
 MOVE.L A3,-(A7)  ;ba0: 2f0b
 MOVE.L D0,-(A7)  ;ba2: 2f00
 MOVEA.L D0,A0   ;ba4: 2040
 MOVEQ #0,D5   ;ba6: 7a00
 MOVE.L D3,D6   ;ba8: 2c03
LAB_00A0:
 BEQ.W LAB_00AB  ;baa: 6700009a
 MOVE.L A0,D7   ;bae: 2e08
 ADD.L D4,D7   ;bb0: de84
 Dc.w $be81   ;bb2
 BHI.W LAB_00AA  ;bb4: 62000086
 MOVE.L A0,-(A7)  ;bb8: 2f08
 MOVEA.L D1,A1   ;bba: 2241
 MOVE.L D4,D7   ;bbc: 2e04
 MOVE.W mode_casesense(PC),D0  ;bbe: 303afb9c
 BNE.W LAB_00A4  ;bc2: 66000042
 MOVE.W D1,-(A7)  ;bc6: 3f01
LAB_00A1:
 MOVE.B (A0)+,D0  ;bc8: 1018
 CMPI.B #$7a,D0   ;bca: 0c00007a
 BHI.W LAB_00A2  ;bce: 6200000e
 CMPI.B #$61,D0   ;bd2: 0c000061
 BCS.W LAB_00A2  ;bd6: 65000006
 Dc.w $c03c   ;bda
 Dc.w $00df   ;bdc
LAB_00A2:
 MOVE.B (A1)+,D1  ;bde: 1219
 CMPI.B #$7a,D1   ;be0: 0c01007a
 BHI.W LAB_00A3  ;be4: 6200000e
 CMPI.B #$61,D1   ;be8: 0c010061
 BCS.W LAB_00A3  ;bec: 65000006
 Dc.w $c23c   ;bf0
 Dc.w $00df   ;bf2
LAB_00A3:
 Dc.w $b001   ;bf4
 BNE.W LAB_00A8  ;bf6: 66000036
 SUBQ.L #1,D7   ;bfa: 5387
 BNE.W LAB_00A1  ;bfc: 6600ffca
 MOVE.W (A7)+,D1  ;c00: 321f
 BRA.W LAB_00A5  ;c02: 6000000e
LAB_00A4:
 Dc.w $b308   ;c06
 BNE.W LAB_00A9  ;c08: 66000026
 SUBQ.L #1,D7   ;c0c: 5387
 BNE.W LAB_00A4  ;c0e: 6600fff6
LAB_00A5:
 MOVEA.L (A7)+,A0  ;c12: 205f
 MOVEA.L D2,A1   ;c14: 2242
 MOVE.L (A2),D7   ;c16: 2e12
LAB_00A6:
 BEQ.W LAB_00A7  ;c18: 6700000a
 MOVE.B (A1)+,(A3)+  ;c1c: 16d9
 SUBQ.L #1,D7   ;c1e: 5387
 BRA.W LAB_00A6  ;c20: 6000fff6
LAB_00A7:
 ADD.L (A2),D5   ;c24: da92
 ADDA.L D4,A0   ;c26: d1c4
 SUB.L D4,D6   ;c28: 9c84
 BRA.W LAB_00A0  ;c2a: 6000ff7e
LAB_00A8:
 MOVE.W (A7)+,D1  ;c2e: 321f
LAB_00A9:
 MOVEA.L (A7)+,A0  ;c30: 205f
 MOVE.B (A0)+,(A3)+  ;c32: 16d8
 ADDQ.L #1,D5   ;c34: 5285
 SUBQ.L #1,D6   ;c36: 5386
 BRA.W LAB_00A0  ;c38: 6000ff70
LAB_00AA:
 MOVE.B (A0)+,(A3)+  ;c3c: 16d8
 ADDQ.L #1,D5   ;c3e: 5285
 SUBQ.L #1,D6   ;c40: 5386
 BNE.W LAB_00AA  ;c42: 6600fff8
LAB_00AB:
 MOVEA.L (A7)+,A3  ;c46: 265f
 MOVEA.L (A7)+,A0  ;c48: 205f
 MOVE.L D5,D1   ;c4a: 2205
 BRA.W copyNewStringA3  ;c4c: 6000fb2e
LAB_00AC:
 MOVE.L D3,D0   ;c50: 2003
 RTS    ;c52: 4e75

.do_Mki:
  MOVE.b D0,1(A3)
  LSR.w  #8,D0
  MOVE.b D0,(A3)
  ADDQ.w #2,A3
  MOVEQ  #2,D0
RTS

.do_Mklq:
  MOVE.b D0,3(A3)
  LSR.w  #8,D0
  MOVE.b D0,2(A3)
  SWAP   D0
  MOVE.b D0,1(A3)
  LSR.w  #8,D0
  MOVE.b D0,(A3)
  ADDQ.w #4,A3
  MOVEQ  #4,D0
RTS

.do_Cvi:
  MOVEA.l D0,A0
  MOVEA.l D0,A3
  MOVE.b (A0)+,D0
  LSL.w #8,D0
  MOVE.b (A0),D0
RTS

.do_Cvlq:
  MOVEA.l D0,A0
  MOVEA.l D0,A3
  MOVEQ #3,D1
  LAB_0021fc8e:
    LSL.l #8,D0
    MOVE.b (A0)+,D0
  DBF D1,LAB_0021fc8e
RTS

.do_Len:
  ;Dc.l $a0000004
  ;Dc.l $26402022
  ;Dc.w $4e75
  ;Dc.w $7000
  ;Dc.l $4e750
  Dc $a000,'f-'s
 's:
  MOVEA.l D0,A3
  MOVE.l -(A2),D0
 'f:
  RTS

.do_Trim:                 ; (d0:String$) /  -(a2): length)
  MOVEA.l D0,A3           ; stringpointer to a3
  MOVEA.l D0,A1           ;
  MOVEA.l A1,A0           ;strg > a0
  MOVE.l -(A2),D0         ;lngth > D1
  MOVEQ #" ",D1           ; space

  ;left
  MOVEQ #-1,D2
  loop_left:
    ADDQ.l #1,D2
    CMP.w D2,D0
    BCS.w exit_trim
  CMP.b (A1)+,D1
  BEQ.w loop_left
  SUBQ #1,A1              ; D2 contains number of first character / A1 points to begin of string

  ; right:
  ADDA.l D0,A0            ; go to the end of the string
  SUB.l D2,D0
  loop_right:
    SUBQ #1,D0
    BMI.w exit_trim
  CMP.b -(A0),D1
  BEQ.w loop_right
  ADDQ #1,D0
  ;D0 contains length of string

  MOVE.l D0,D1
  MOVE.l A1,A0
  BRA copyNewStringA3

  exit_trim:
  MOVEQ  #0,D0
RTS
