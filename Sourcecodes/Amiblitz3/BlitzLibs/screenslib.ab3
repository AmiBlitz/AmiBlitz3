; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "blitz2:Decompiled"
; ExeFile         = "screenslib.obj"
; CreateIcon      = 0
; Residents       = "blitzlibs:libmacs.res,blitzlibs:blitzoffs.res,blitzlibs:all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 1
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 435
; CursorColumn    = 1
; LabelSearch     = "screen"
; LabelRemark     = 0
; LabelAll        = 373
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 5
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
;**********************************
;*                                *
;* SCREENSLIB - Intuition Screens *
;*                                *
;**********************************

; 30 Aug, 1993
; CloseScreen added  (works same as free screen)
; HideScreen added   (to complement showscreen)
; BeepScreen added
; MoveScreen added

; Aug 1994
; screen rounds size to nearest 16

!libheader{#screenslib,init,0,0,errors}

;!astatement
!acommand{#long}
;
!args{2,2}
!libs{#intuitionlib,#la6,#screenslib,$1380,#intuifontlib,#la1,#screenslib,$0604,#graphicslib,#la0}
!subs{domode+1,modechk,0}
;
!args{2,2,7}
!libs{#intuitionlib,#la6,#screenslib,$1380,#intuifontlib,#la1,#screenslib,$0604,#graphicslib,#la0}
!subs{domode2+1,modechk,0}
;
!args{2,$42,$42,$42,$42,$42,3,7,2,2}
!libs{#intuitionlib,#la6,#screenslib,$1380,#intuifontlib,#la1,#screenslib,$0604}
!subs{_screen+1,prescreen,0}
;
!args{2,$42,$42,$42,$42,$42,3,7,2,2,2}
!libs{#intuitionlib,#la6,#screenslib,$1380,#bitmaplib,$1085,#intuifontlib,#la1,#screenslib,$0604}
!subs{_screen2+1,prescreen2,0}
;
!name{"Screen","[Screen#,Mode[,Title$]]|[Screen#,X,Y,W,H,D,Viewmode,Title$,Dpen,Bpen[,BitMap#]",_toke}

!astatement
!args{2}
!libs{#intuitionlib,#la6,#screenslib,$1380,#screenslib,$0604}
!subs{dowbscreen,0,0}
!name{"WbToScreen","Screen#"}   ;*****

!astatement
!args{2,7}
!libs{#screenslib,$1080}
!subs{doloadscreen+1,loadscreenchk,0}
!args{2,7,2}
!libs{#screenslib,$1080,#palettelib,$1182}
!subs{doloadscreen2+1,loadscreenchk,0}  ;*****
!name{"LoadScreen","Screen#,Filename$[,Palette#]"}

;!astatement
!acommand{#long}
!args{2}
!libs{#intuitionlib,#la6,#screenslib,$1380,#screenslib,$0604}
!subs{dofstoscreen,0,0}
!args{2,7}
!libs{#intuitionlib,#la6,#screenslib,$1380,#screenslib,$0604}
!subs{dofindscreen,0,0}
!name{"FindScreen","Screen#[,Title$]"}  ;*****

!afunction{2}
!args
!libs{#screenslib,$1002}
!subs{dosmousex,loadscreenchk,0}
!name{"SMouseX",""} ;*****

!afunction{2}
!args
!libs{#screenslib,$1002}
!subs{dosmousey,loadscreenchk,0}
!name{"SMouseY",""} ;*****

!astatement
!args{2}
!libs{#screenslib,$1080,#intuitionlib,#la6}
!subs{doshowscreen,loadscreenchk,0}
!name{"ShowScreen","Screen#"}   ;*****

!astatement
;
!args{2}
!libs
!subs{doscreenpens2,0,0}
;
!args{2,2,2,2,2,2,2}
!libs
!subs{doscreenpens,0,0}
;
!name{"ScreenPens","Text,Shine,Shadow,Fill,FillText,Background,HighLight"}

;ActiveTxt,InActiveTxt,HiLight,Shadow,ActiveFill,Gadg

!afunction{3}
!args{2}
!libs{#screenslib,$1080}
!subs{dosviewport,loadscreenchk,0}
!name{"ViewPort","(Screen#)"}

!astatement
;
!args
!libs{#graphicslib,#la6,#intuitionlib,#la3,#screenslib,#ua1}
!subs{doshowbitmap0,showbmchk0,0}
;
!args{2}
!libs{#graphicslib,#la6,#intuitionlib,#la3,#bitmaplib,#ia0|#pd0,#screenslib,#ua1}
!subs{doshowbitmap1,showbmchk,0}
;
!name{"ShowBitMap","[BitMap#]"}

!acommand{3}
!args{2}
!libs{#screenslib,$1380,#intuitionlib,#la6,#graphicslib,#la2}
!subs{freescreen,0,0}
!name{"CloseScreen","Screen# or ret=CloseScreen (screen#)"}   ;*****

!astatement
!args{2}
!libs{#screenslib,$1080,#intuitionlib,#la6}
!subs{dohidescreen,loadscreenchk,0}
!name{"HideScreen","Screen#"}             ;*****

!astatement
!args{2}
!libs{#screenslib,$1080,#intuitionlib,#la6}
!subs{dobeepscreen,loadscreenchk,0}
!name{"BeepScreen","Screen#"}             ;*****

!astatement
!args{2,2,2}
!libs{#screenslib,$1080,#intuitionlib,#la6}
!subs{domovescreen,loadscreenchk,0}
!name{"MoveScreen","Screen#,deltax,deltay"}              ;*****

!acommand{#long}
;
!args {#word,#string}
!libs{#intuitionlib,#la6,#screenslib,$1380,#intuifontlib,#la1,#screenslib,$0604}
!subs{doscreentags2+1,0,0}  ;prescreen3,0}
;
!args {#word,#string,#long}
!libs{#intuitionlib,#la6,#screenslib,$1380,#intuifontlib,#la1,#screenslib,$0604}
!subs{doscreentags3+1,0,0}  ;prescreen3,0}
;
!repargs {2,2,#word,#string,#long|#push,#long|#push}
!libs{#intuitionlib,#la6,#screenslib,$1380,#intuifontlib,#la1,#screenslib,$0604}
!subs{doscreentags+1,0,0}  ;prescreen3,0}
;
!name{"ScreenTags","Screen#,Title$ [&TagList] or [[,Tag,Data]...]"}

  Even
  Dc.b $03,$02,$00,$00 ;....
  Ds.l 1
  Dc.b $00,$FF,$10,$00 ;....
  Ds.w 3
  Dc.l comm1+1
  Ds.l 1
  Dc.b $FF,$FF,$00,$00 ;....
  Ds.l 1
  Dc.b "FrontScreen",0,0
  Dc.b $00,$02,$02 ;...
  Ds.l 1
  Dc.b $00,$01,$02,$00 ;....
  Dc.b $00,$9E,$13,$80 ;....
  Dc.b $00,$FF,$16,$00 ;....
  Dc.b $00,$FE,$12,$00 ;....
  Ds.w 3
  Dc.l AJL_0_A38
  Ds.l 1
  Dc.b $FF,$FF,$00,$00 ;....
  Ds.l 1
  Dc.b "NewCloseScreen",0
  Dc.b "Screen#",0,0
  Dc.b $03,$03,$00,$00 ;....
  Ds.w 1
  Dc.b $00,$01,$02,$00 ;....
  Dc.b $00,$FF,$16,$00 ;....
  Dc.b $00,$9E,$13,$80 ;....
  Dc.b $00,$9E,$06,$04 ;....
  Ds.w 3
  Dc.l AL_0_CC8
  Ds.l 1
  Dc.b $00,$02,$02,$03 ;....
  Dc.b $00,$FF,$16,$00 ;....
  Dc.b $00,$9E,$13,$80 ;....
  Dc.b $00,$9E,$06,$04 ;....
  Ds.w 3
  Dc.l AJL_0_CCA
  Ds.l 1
  Dc.b $FF,$FF,$00,$00 ;....
  Ds.l 1
  Dc.b "GetPubScreen",0
  Dc.b "Screen#[,Title$]",0,0
  Dc.b $01,$00,$00 ;...
  Ds.w 1
  Dc.b $00,$01,$02,$00 ;....
  Dc.b $00,$FF,$16,$00 ;....
  Dc.b $00,$9E,$13,$80 ;....
  Dc.b $00,$9E,$06,$04 ;....
  Ds.w 3
  Dc.l AJL_0_CDE
  Ds.l 1
  Dc.b $00,$02,$02,$03 ;....
  Dc.b $00,$FF,$16,$00 ;....
  Dc.b $00,$9E,$13,$80 ;....
  Dc.b $00,$9E,$06,$04 ;....
  Ds.w 3
  Dc.l AL_0_CE0
  Ds.l 1
  Dc.b $FF,$FF,$00,$00 ;....
  Ds.l 1
  Dc.b "ReleasePubScreen",0
  Dc.b "Screen#[,Title$]",0
!astatement
;

;
!args{2,2,2,2,2}
!libs
!subs{doscreenpensex,0,0}
;
!name{"ScreenPens2","background,par1,par2,par2,par3"}

init:!nullsub{doinit,0,0}
finit:!nullsub{codefinit,0,0}

_load:!nullsub{0,0,0}

_save:!nullsub{0,0,0}

_use:!nullsub{0,0,0}

_free:!nullsub{freescreen,0,0,#intuitionlib,#la6,#graphicslib,#la2}

!libfin{_toke,_load,_save,_use,_free,5,3} ;screen,buffer

;***************** Code Below *******************
Even
AJL_0_CDE:
  MOVEQ.l #$00,D1
AL_0_CE0:
  MOVEA.l D1,A0
  MOVEA.l (A3),A1
   JSR -$204(A6)
 RTS

codefinit
TST.l cgxbase
BEQ 'noclose
MOVE.l cgxbase,a1
JSR -414(a6)
'noclose
RTS
romrevision:Dc 0
AJL_0_A38:
  MOVE.l (A3),D0
   BEQ.w JL_0_A7A
  MOVEA.l D0,A0
  CMPI.l #$624C745A,$156(A0)
   BNE.w JL_0_A7A
  MOVE.l $16(A0),-(A7)
  MOVEA.l (A3),A0
   JSR -$42(A6)
  MOVEA.l (A7)+,A0
  TST.w D0
   BEQ.w JL_0_A7E
  MOVE.l A0,D0
  ALibJsr $cf02
  MOVE.l $4(A3),D0
   BEQ.w JL_0_A7A
  MOVEA.l D0,A1
  MOVEA.l A2,A6
   JSR -$3CC(A6)
  CLR.l $4(A3)
JL_0_A7A:
  CLR.l (A3)
  MOVEQ.l #$01,D0
JL_0_A7E:
 RTS
comm1:  Dc.b $20
AL_0_CC3:
  Dc.b "(",0
  Dc.b "8Nu"
AL_0_CC8:
  MOVEQ #0,d1
AJL_0_CCA:
  MOVE.l A3,$0(A5,D6.W)
  MOVE.l D1,D7
   BSR.w freescreen
  MOVEA.l D7,A0
   JSR -$1FE(A6)
  MOVE.l D0,(A3)
 RTS

newscreen
Dc 0,0,0,0,0
Dc.b 0,0
Dc 0,0+$1000
Dc.l 0,0,0,0
Dc.l extnewscreen

extnewscreen
;
Dc.l 1 LSL 31+32+$12  ;displayid
newmodes:Dc.l 0
;
Dc.l 1 LSL 31+32+$1b  ;fullpal!
Dc.l $12345678
;
Dc.l 1 LSL 31+32+$1a  ;pens?
Dc.l pens                         ;$ffffffff ;$12345678

Dc.l $80000047       ;interleave
interleave: Dc.l -1
;
Dc.l 0

pens
Dc 2    ;defaults (taken from WB)
Dc 1
Dc 1,2,1,3,1,0,2,1,2,1
;
Dc -1   ;!!!!!

;#define SA_LikeWorkbench  (SA_Dummy + 0x0027)
;#define SA_Pens           (SA_Dummy + 0x001A)

defstype:Dc $1000

dosviewport
Dc $a000,'f-'s
's:MOVE.l (a0),a0:LEA 44(a0),a0:MOVE.l a0,d0:'f:RTS

doinit:MOVE #$1000,defstype
MOVE.l #$00010002,pens+4
MOVE.l #$00010003,pens+8
MOVE.l #$00010000,pens+12
MOVE.l #$00020001,pens+16
MOVE.l #$00020001,pens+20

ALibJsr #environlib LSL 7+7:MOVE d0,romrevision
MOVE.l $4,a6
LEA cgxname,a1
MOVEQ #0,d0
JSR -552(a6)
MOVE.l d0,cgxbase
RTS
cgxname: Dc.b "cybergraphics.library",0
cgxbase: Dc.l 0
cgxtags:  Dc.l #CYBRBIDTG_NominalWidth ,0
         Dc.l #CYBRBIDTG_NominalHeight ,0
         Dc.l #CYBRBIDTG_Depth ,0
         Dc.l 0,0
Even
doscreenpens2
MOVEQ #0,d1:TST d0:BEQ 'skip:MOVE #$1000,d1
'skip:MOVE d1,defstype:RTS

doscreenpens
LEA pens(pc),a0
MOVEM d0-d5,4(a0):MOVE -(a2),16(a0)
;MOVE d0,12(a0):MOVE d1,4(a0)
;MOVE d2,6(a0):MOVE d3,8(a0)
;MOVE d4,10(a0):MOVE d5,14(a0)
RTS

doscreenpensex
LEA pens(pc),a0
MOVE.w d0,(a0)
MOVE.w d1,2(a0)
MOVE.w d2,18(a0)
MOVE.w d3,20(a0)
MOVE.w d4,22(a0)
;MOVE d0,12(a0):MOVE d1,4(a0)
;MOVE d2,6(a0):MOVE d3,8(a0)
;MOVE d4,10(a0):MOVE d5,14(a0)
RTS
 


.doshowscreen:Dc $a000,'f-'s
's:MOVE.l (a0),a0:JSR _ScreenToFront(a6):'f:RTS

.dohidescreen:Dc $a000,'f-'s
's:MOVE.l (a0),a0:JSR _ScreenToBack(a6):'f:RTS

.dobeepscreen:Dc $a000,'f-'s
's:MOVE.l (a0),a0:JSR _DisplayBeep(a6):'f:RTS

.domovescreen:Dc $a000,'f-'s
's:MOVE.l (a0),a0:MOVE d1,d0:MOVE d2,d1:JSR _MoveScreen(a6):'f:RTS

.dosmousex:Dc $a000,'f-'s
's:MOVE.l (a0),a0:MOVE 18(a0),d0:'f:RTS

.dosmousey:Dc $a000,'f-'s
's:MOVE.l (a0),a0:MOVE 16(a0),d0:'f:RTS

.doloadscreen2
MOVEM.l d1/a0,-(a7)
MOVE.l d1,a0:MOVEQ#0,d0:ALibJsr #palettelib LSL 7+4
MOVEM.l (a7)+,d1/a0
;
doloadscreen
MOVE.l (a0),a0:MOVE.l 88(a0),a1:MOVE.l d1,a0:ALibJsr #ilbmifflib LSL 7+3
RTS

dummydata:Dc.l 0:Ds 3:Dc.l 0
dummyf

.domode2:MOVE d1,d0:MOVE.l d2,d1:MOVE.l -(a2),d2:BRA modec  ;get length of string

.domode:;OK, d0 and 7 = # bitplanes, bit 3=1 for hires
      ;bit 4=1 for interlace
;
MOVE d1,d0:MOVEQ #0,d1:MOVEQ #0,d2
;
modec:;d1=string, d2=length
;
MOVE.l d1,-(a7):LEA dummyf(pc),a2:MOVE.l d2,-14(a2)
MOVE d0,d1:AND #7,d1:BNE 'notzero:MOVEQ #8,d1
'notzero:MOVE d1,-10(a2)
MOVE #320,d2:MOVEQ #0,d1:BTST #3,d0:BEQ 'islores
MOVE #640,d2:MOVE #$8000,d1
'islores:MOVE d2,-6(a2) ;width
MOVE #200,d2:BTST #0,207(a0):BNE 'ntsc:MOVE #256,d2
'ntsc:BTST #4,d0:BEQ 'isntint
LSL #1,d2:OR #4,d1
'isntint:MOVE d2,-8(a2) ;height
MOVE.l (a7)+,d2:MOVEQ #1,d3:MOVEQ #2,d4
;
._screen:SUB.l a0,a0
_screen2:;a6=intuilib, a3=screen item, a0=bitmap, a1=intuifontlib
;
MOVE.l a3,0(a5,d6)  ;set used screen!
;
MOVE.l (a1),d7
MOVEM.l d1/d7/a0,-(a7)
BSR freescreen
MOVEM.l (a7)+,d1/d7/a0
;
LEA newscreen(pc),a1:MOVE.l d7,16(a1)
;
LEA newscreen(pc),a1:MOVE -(a2),(a1):MOVE -(a2),2(a1)
;
MOVE -(a2),d0:ADD#15,d0:AND#$fff0,d0:MOVE d0,4(a1) ;simon was here
;
MOVE -(a2),6(a1):
MOVE -(a2),8(a1) ;depth
MOVE d1,12(a1):MOVE.w d1,newmodes+2:
TST.w 8(a1)
BNE 'ok1
MOVE.l d1,newmodes
'ok1: MOVE.l -(a2),d1
MOVE.b d3,10(a1):MOVE.b d4,11(a1):MOVE.l a0,28(a1)
MOVE.l d2,d0:ALibJsr $cf01:MOVE.l d0,20(a1)
;
MOVEQ #15,d0:TST.l 28(a1):BEQ 'skip:MOVEQ #$4f,d0
'skip:OR defstype(pc),d0:MOVE d0,14(a1)
;
CLR.l interleave
CMP.w #8,8(a1)
BLE 'no24
MOVE.l #-1,interleave
TST.l cgxbase
BEQ 'no24
CMP.w #9,8(a1)
BNE 'n1
MOVE.w #8,8(a1)
'n1 MOVEM.l a1/a6,-(a7)
MOVE.l cgxbase,a6
LEA cgxtags,a0
MOVEQ #0,d0
MOVE.w 4(a1),d0
MOVE.l d0,4(a0)
MOVE.w 6(a1),d0
MOVE.l d0,12(a0)
MOVE.w 8(a1),d0
MOVE.l d0,20(a0)
JSR -$3c(a6)
MOVE.l d0,newmodes
MOVEM.l (a7)+,a6/a1
'no24
MOVE.l a1,a0:JSR _OpenScreen(a6)
MOVE.l d0,(a3):BEQ 'out:MOVE.l d0,a0
MOVE.l #"bLtZ",342(a0):
'out
RTS


.freescreen:;a3=screen to free, a6=intuilib, a2=graphics lib
            ;d6=maxslib, d7=memacclib

MOVE.l (a3),d0:BEQ 'done:MOVE.l d0,a0
CMP.l #"bLtZ",342(a0):BNE 'done2    ;don't close non Blitzs
;
MOVE.l 22(a0),d0:
MOVE.l d0,-(a7)
MOVE.l (a3),a0:JSR _CloseScreen(a6)
TST.l d0
BEQ 'dones
MOVE.l (a7)+,d0
 ALibJsr $cf02
MOVE.l 4(a3),d0:BEQ 'nobuff:MOVE.l d0,a1:MOVE.l a2,a6:JSR-$3cc(a6):CLR.l4(a3):'nobuff
;
'done2:CLR.l (a3)
'done:
       MOVEQ #-1,d0
       RTS
'dones MOVE.l (a7)+,d0
       MOVEQ #0,d0
       RTS
dowbscreen:;convert WB into a Screen for us.
;
BSR freescreen
LEA SizeOf.IntuitionBase\FirstScreen(a6),a0
'loop:MOVE.l (a0),d0:BEQ err8:MOVE.l d0,a0
MOVE 20(a0),d0:AND #15,d0:CMP #1,d0:BNE 'loop
;
;Got WorkBench
;
MOVE.l a0,(a3):MOVE.l a3,0(a5,d6)
RTS

dofstoscreen
MOVEQ #0,d1:;no title
;
dofindscreen:;d1=titlename (or 0)
;
MOVE.l a3,0(a5,d6):MOVE.l d1,d7:BSR freescreen
LEA SizeOf.IntuitionBase\FirstScreen(a6),a0
'loop:MOVE.l (a0),d0:BEQ noscreen:MOVE.l d0,a0
TST.l d7:BEQ 'done
MOVE.l 22(a0),d0:BEQ 'loop:MOVE.l d0,a1:MOVE.l d7,a2
'loop2:TST.b (a2):BEQ 'done:CMPM.b (a1)+,(a2)+:BEQ 'loop2
MOVE.l 26(a0),d0:BEQ 'loop:MOVE.l d0,a1:MOVE.l d7,a2
'loop3:TST.b (a2):BEQ 'done:CMPM.b (a1)+,(a2)+:BEQ 'loop3
BRA 'loop
'done:MOVE.l a0,(a3):MOVE.l a0,d0:RTS
noscreen: RTS
intshowbitmap
MOVE 4(a0),d0:SUBQ #1,d0:ADDQ #8,a0:LEA 192(a1),a2
'loop:MOVE.l (a0)+,(a2)+:DBF d0,'loop
LEA 44(a1),a1:LEA 34(a3),a0:JSR _MakeVPort(a6)
BRA doshowbitmap2

doshowbitmap0 ;no parameters
;
MOVE.l (a1),a0:LEA 184(a0),a0
;
.doshowbitmap
doshowbitmap1 ;one parameter
;
;a0=bitmap, a1=screen, a3=intution, a6=graphics
;
ALibJsr #environlib LSL 7+7:CMP #39,d0:BPL agashowbitmap  ;simon was here!
;
MOVE #$4000,$dff09a
;
MOVE.l (a1),a1:BTST #2,77(a1):BNE intshowbitmap ;interlace!
;
ALibJsr #environlib LSL 7+7:CMP #39,d0:BGE intshowbitmap  ;simon was here
;
LEA 44+8(a1),a1:MOVE.l #$f0e0,d1
;
'loop0:MOVE.l (a1),d0:BEQ err13:MOVE.l d0,a1
MOVE 28(a1),d0:BEQ 'loop0
MOVE.l 12(a1),a2:SUBQ #6,a2:SUBQ #1,d0
'loop2:ADDQ #6,a2:CMP.l (a2),d1:DBEQ d0,'loop2:BNE 'loop0
;
;found - install it...
;
MOVE 4(a0),d1:ADD d1,d1:ADDQ #8,a0:MOVEQ #2,d2
;
'loop:CMP (a2),d2:BEQ 'more
MOVE (a0)+,4(a2):ADDQ #6,a2:SUBQ #1,d1
DBEQ d0,'loop:BEQ doshowbitmap2
;
'more:MOVE.l (a1),d0:BEQ err13:MOVE.l d0,a1
MOVE 28(a1),d0:BEQ 'more
MOVE.l 12(a1),a2:SUBQ #1,d0:BRA 'loop
;
doshowbitmap2
LEA 34(a3),a1:JSR _MrgCop(a6)
LEA 34(a3),a1:JSR _LoadView(a6)

MOVE #$c000,$dff09a:RTS

err8:MOVE.l #mess8,d0:TRAP #0
err12:MOVE.l #mess12,d0:TRAP #0
err13:MOVE.l #mess13,d0:TRAP #0


;
;a0=bitmap, a1=screen, a3=intution, a6=graphics
;
.agashowbitmap
  MOVE.l a0,d4:MOVE.l (a1),a2:MOVE.l 4(a1),d0:BNE gotdbuff
  MOVEM.l a1-a2,-(a7):LEA 44(a2),a0:JSR -$3c6(a6):MOVEM.l (a7)+,a1-a2
  ;_AllocDBufInfo(a6):
  MOVE.l d0,4(a1)
gotdbuff:
  LEA 44(a2),a0:MOVE.l d4,a1:MOVE.l d0,a2:JSR -$3ae(a6) ;ChangeVPBitMap_
  RTS



#_Left=$80000021:#_Top=$80000022:#_Width=$80000023:#_Height=$80000024
#_Depth=$80000025:#_DetailPen=$80000026:#_BlockPen=$80000027
#_Title=$80000028:#_Colors=$80000029:#_ErrorCode=$8000002A
#_Font=$8000002B:#_SysFont=$8000002C:#_Type=$8000002D:#_BitMap=$8000002E
#_PubName=$8000002F:#_PubSig=$80000030:#_PubTask=$80000031
#_DisplayID=$80000032:#_DClip=$80000033:#_Overscan=$80000034:#_Obsolete1=$80000035

#_OpenScreenTagList=-612

.doscreentags3
  MOVE.l a3,0(a5,d6)
  MOVE.l d1,d0:MOVE.l -(a2),d1:ALibJsr $cf01
  MOVE.l d0,mytitle+4:MOVE.l (a1),myfont+4:BSR freescreen
  MOVE.l d2,a2:LEA usertags(pc),a0
  nxtag:MOVEM.l (a2)+,d0-d1:MOVEM.l d0-d1,(a0):ADDQ#8,a0:TST.l d0:BNE nxtag
  BRA duntags
.doscreentags2
  MOVEQ#0,d7           ;no tags
.doscreentags
  MOVE.l a3,0(a5,d6)   ;make used
  MOVE.l d1,d0:MOVE.l -(a2),d1:ALibJsr $cf01
  MOVE.l d0,mytitle+4:MOVE.l (a1),myfont+4:BSR freescreen
  LEA usertags(pc),a0:BRA gettags
  tagloop:MOVE.l -(a2),d0:MOVE.l -(a2),d1:MOVEM.l d0-d1,(a0):ADDQ#8,a0
  gettags:DBRA d7,tagloop:MOVE.l #0,(a0)+:duntags
  ALibJsr #environlib LSL 7+7:CMP #36,d0:BMI dostfail
  SUB.l a0,a0:LEA mytaglist(pc),a1:JSR _OpenScreenTagList(a6)
  MOVE.l d0,(a3):BEQ 'no:MOVE.l d0,a0:MOVE.l #"bLtZ",342(a0):RTS
'no:RTS
dostfail:
  MOVE.l errcode(pc),d0:RTS

errcode:Dc.l -1

mytaglist:
          Dc.l $8000003A,pens
  mytitle:Dc.l _Title,0
   myfont:Dc.l _Font,0
    error:Dc.l _ErrorCode,errcode
 usertags:Ds.l 32

;******************** Error Checking ******************;

errors

err1:MOVE.l #mess1,d0:TRAP #0
err2:MOVE.l #mess2,d0:TRAP #0
err3:MOVE.l #mess3,d0:TRAP #0
err4:MOVE.l #mess4,d0:TRAP #0
err5:MOVE.l #mess5,d0:TRAP #0
err6:MOVE.l #mess6,d0:TRAP #0
err7:MOVE.l #mess7,d0:TRAP #0
;err8
err9:MOVE.l #mess9,d0:TRAP #0
err10:MOVE.l #mess10,d0:TRAP #0
err11:MOVE.l #mess11,d0:TRAP #0
;err12
;err13
err14:MOVE.l #mess14,d0:TRAP #0

mess1:Dc.b "Can't open Screen",0
mess2:Dc.b "Uninitialized BitMap",0
mess3:Dc.b "Can't use specified BitMap",0
mess4:Dc.b "Screen Width MUST be multiple of 16",0
mess5:Dc.b "Screen width MUST be at least 320",0
mess6:Dc.b "Screen Height MUST be at least 10",0
mess7:Dc.b "Uninitialized Screen",0
mess8:Dc.b "Can't find WorkBench",0
mess9:Dc.b "Illegal number of BitPlanes",0
mess10:Dc.b "Uninitialized IntuiFont",0
mess11:Dc.b "Illegal Mode",0
mess12:Dc.b "Can't find Screen",0
mess13:Dc.b "Can't find CopIns!",0
mess14:Dc.b "Screen and BitMap MUST be same size",0
Even

prescreen:
TST.l 8(a1):BEQ err10
MOVE -6(a2),d0:CMP #320,d0:BLT err5
;AND #15,d0:BNE err4
MOVE -8(a2),d0:CMP #10,d0:BLT err6
;
ALibJsr #environlib LSL 7+7:CMP #39,d0:BGE 'aa
;
MOVE -10(a2),d0:BMI err9:CMP #6,d0:BGT err9
BTST #15,d1:BEQ 'skip
CMP #4,d0:BGT err9
'skip:RTS
'aa:MOVE -10(a2),d0:BLT err9:CMP #32,d0:BGT err9:RTS

prescreen2:
BSR prescreen
TST (a0):BEQ err2:MOVE (a0),d0:LSL #3,d0:CMP -6(a2),d0
BCS err3:MOVE 2(a0),d0:CMP -8(a2),d0:BCS err3
MOVE 4(a0),d0:CMP -10(a2),d0:BCS err3
RTS

loadscreenchk
TST.l (a0):BEQ err7:RTS

modechk
MOVE d0,-(a7):ALibJsr #environlib LSL 7+7
MOVE d0,d7:MOVE (a7)+,d0:CMP #39,d7:BGE 'done
MOVE d1,d7:AND #7,d7:BEQ err11:CMP #6,d7:BHI err11
BTST #3,d1:BEQ 'done:CMP #4,d7:BHI err11
'done:RTS

showbmchk0
TST.l (a1):BEQ err7:RTS

showbmchk
BSR showbmchk0:TST (a0):BEQ err2
MOVE.l (a1),a2:LEA 184(a2),a2
MOVE (a0),d7:CMP (a2)+,d7:BNE err14
MOVE 2(a0),d7:CMP (a2)+,d7:BNE err14
MOVE.b 5(a0),d7:CMP.b 1(a2),d7:BNE err14
RTS

