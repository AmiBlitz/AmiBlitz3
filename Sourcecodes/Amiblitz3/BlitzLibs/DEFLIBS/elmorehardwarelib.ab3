; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Window      = 20
; Max Bank        = 5
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
.HARDWARE

;
; #elmorehardwarelib=103  (rev bum6)
;

Macro pushreg:MOVE.l `1,-(a7):End Macro
Macro pullreg:MOVE.l (a7)+,`1:End Macro
Macro pushregs:MOVEM.l `1,-(a7):End Macro
Macro pullregs:MOVEM.l (a7)+,`1:End Macro
Macro error:MOVE.l #`1,d0:TRAP#0:`1:Dc.b `2,0:Even:End Macro

#audiovol=$dff0a8
#audioper=$dff0a6

!libheader{#elmorehardwarelib,0,0,0,0}


;Audio control commands

!astatement
!args{#byte,#word}
!libs
!subs{_myfreq,0,0}
!name{"Freq","Channelmask,period"}


!astatement
!args{#word}
!libs
!subs{_quiet,0,0}
!name{"Quiet","ChannelMask ;Stops specified currently playing sounds"}


!astatement
!args{#word}
!libs
!subs{_vwaitpos,0,0}
!name{"VWaitPos","RasterLine"}




;Timer functions

!afunction{#long}
!args
!libs
!subs{_gettimer,0,0}
!name {"Ticks"," ;'ticks' since last ResetTimer (1/50 secs. PAL, 1/60 NTSC)"}


!astatement
!args
!libs
!subs{_resettime,0,0}
!name {"ResetTimer"," ;Resets timer to zero 'Ticks.'"}


;2-button (more in future hopefully) controller support

!afunction{#byte}
!args {#byte}
!libs
!subs {_myjoyc,0,0}
!name {"JoyC","(Port)  ;For 2-button controllers:  Detects buttons pressed"}


;AGA Stuff...

!afunction {#byte}
!args
!libs
!subs{_checkaga,0,0}
!name{"CheckAGA"," ;Returns 'TRUE' for AGA machines, otherwise returns 'FALSE'"}


;New peeking ability:

!afunction {#string}
!args {#long,#byte}
!libs
!subs {_peekto,0,0}
!name {"PeekTo$","(Address,byte)  ;Reads memory into string upto specified byte"}


;Force monitor scanrate into PAL or NTSC

!astatement
!args
!libs
!subs{_forcepal,0,0}
!name {"ForcePAL"," ;Forces screen mode to PAL (50hz)"}

                                                                                                                   











!astatement
!args
!libs
!subs{_forcentsc,0,0}
!name {"ForceNTSC"," ;Forces screen mode to NTSC (60hz)"}


;Depth of bitmap

!afunction {#word}
!args{#word}
!libs{#bitmaplib,#pd0+#ia0}
!subs{_depth,0,0}
!name {"Depth","(Bitmap#) ;Returns DEPTH of specified bitmap"}


;"WAIT" Commmands


!astatement
!args
!libs
!subs {_clickmouse,0,0}
!name {"ClickMouse"," ;Waits for left mouse button to be CLICKED"}

!libfin




._vwaitpos
MOVE.w d0,d1
MOVE.w #30000,d2

vwpdelay:
!pushregs{d1-d2}
ALibJsr VPos
!pullregs{d1-d2}
CMP.w d0,d1
BEQ donevwp
DBRA d2,vwpdelay

!error{vwp,"Raster-wait position out of range"}


donevwp:
RTS

._quiet
CMPI.w #15,d0
BGT ssfxerr
TST.b d0
BMI ssfxerr

MOVE.w d0,$dff096
RTS

ssfxerr
!error{invalidcm,"Invalid channel mask"}


._peekto
!pushregs{a0-a6}
MOVE.l  a3,pstring    ;String address
MOVE.l  d0,pstart     ;Start of search
MOVE.l  d0,a0         ;Into addr. reg.

                      ;d1 is byte to search for:

CLR.l   d0            ;Start looking from zero

                      ;d2 is current byte read
psearchloop
MOVE.b  0(a0,d0),d2
CMP.b   d2,d1
BEQ     pdone

MOVEA.l pstring,a3
MOVE.b  d2,(a3)+
MOVE.l  a3,pstring
ADDQ    #1,d0
BRA     psearchloop

pdone
!pullregs{a0-a6}
MOVEA.l pstring,a3
RTS



._forcepal
MOVE.w #32,$dff1dc
MOVEA.l #4,a6
MOVE.w #$3232,530(a6)
RTS


_forcentsc
MOVE.w #0,$dff1dc
MOVEA.l#4,a6
MOVE.w #$3c3c,530(a6)
RTS

._depth
MOVE.w 4(a0),d0
RTS





._checkaga
ALibJsr ExecVersion
CMP.b #39,d0
BLT notaga


MOVE.w $dff07c,d1
CLR.w d0
CMP.b #$f8,d1
SEQ d0
RTS
notaga
CLR.w d0
RTS


._myjoyc

CMP.b #1,d0
BEQ port1

TST.b d0
BEQ dojoyc


!error{badarg,"Argument Invalid."}


dojoyc
CLR d0
TokeJsr Joyb
RTS

port1
CLR d0

;Register to check:
BTST #6,$dff016
BNE addit
MOVE.b #2,d0

addit
BTST #7,$bfe001
BNE joydone
OR.b #1,d0
joydone
RTS

._gettimer
MOVE.l #0,d0
MOVE.b $bfea01,d0
LSL.l #4,d0
LSL.l #4,d0
MOVE.b $bfe901,d0
LSL.l #4,d0
LSL.l #4,d0
MOVE.b $bfe801,d0
RTS



._resettime
MOVE.b #0,d0
MOVE.b d0,$bfea01
MOVE.b d0,$bfe901
MOVE.b d0,$bfe801
RTS



._clickmouse
click1
BTST #6,$bfe001
BEQ click1
click2
BTST #6,$bfe001
BNE click2
RTS




._myfreq


;fchan0
BTST.b #0,d0
BEQ fchan1
MOVE.w d1,audioper


fchan1:
BTST.b #1,d0
BEQ fchan2
MOVE.w d1,audioper+16

fchan2:
BTST.b #2,d0
BEQ fchan3
MOVE.w d1,audioper+32

fchan3:
BTST.b #3,d0
BEQ fdone
MOVE.w d1,audioper+48


fdone
RTS


pstring:
Ds.l 1

pstart:
Ds.l 1

