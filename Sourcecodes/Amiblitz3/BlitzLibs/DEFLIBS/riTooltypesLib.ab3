; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "riTooltypesLib.obj"
; CreateIcon      = 0
; Residents       = "libnums.res,libmacs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max Window      = 20
; Max BlitzFont   = 4
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
#ritooltypeslib=59

; (C)1994 Reflective Images
; Written by Stephen McNamara on 13th and 14th of June

;Size of disk object: 78 bytes

; ICON.LIBRARY CALLS USED:
; Function: GetDiskObject
;           registers: a0=filename
;           Returns 0 or address of a DISKOBJECT
;           LVO=-78
; Function: GetDiskObjectNew
;           registers: a0=filename
;           Returns 0 or address of a DISKOBJECT
;           LVO=-132
; Function: FindToolType
;           registers: a0=tool array
;                      a1=address of tooltype name
;           Returns 0 or address of the text after the '=' of the tooltype
;           LVO=-96
; Function: MatchToolType
;           registers: a0=tooltype string
;                      a1=address of match string
;           Returns true or false
;           LVO=-102
; Function: PutDiskObject
;           registers: a0=filename pointer
;                      a1=address of DISKOBJECT to write
;           Returns true or false
;           LVO=-84
; Function: FreeDiskObject
;           registers: a0=address of DISKOBJECT to free
;           Returns true or false
;           LVO=-90
; Function: AddFreeList
;           registers: a0=address of freelist
;                      a1=address of mem block
;                      a2=length of memory
;           Returns true or false
;           LVO=-72

!libheader {#ritooltypeslib,init,0,finit,0}

!acommand {#long}
!args {#string}
!libs
!subs {_getstructure+1,0,0}
!name {"GetIconObject","(filename$)"}

!afunction {#string}
!args {#string}
!libs
!subs {_gettooltype+1,0,0}
!name {"FindToolValue","(tooltype$)"}

!acommand {#long}
!args {#string,#string}
!libs
!subs {_PutTool2+1,0,0}
!args {#string,#string,#long}
!libs
!subs {_PutTool+1,0,0}
!name {"SetToolValue","(tooltype$,value$[,status])"}

!acommand {#long}
!args {#string}
!libs
!subs {_Put_icon2+1,0,0}
!args {#string,#long}
!libs
!subs {_Put_icon+1,0,0}
!name {"PutIconObject","(filename$[,icontype])"}

!acommand {#long}
!args
!libs
!subs {_Close_icon+1,0,0}
!name {"FreeIconObject"," - free the disk object of a icon"}

!afunction {#long}
!args {#string,#string}
!libs
!subs {_Matchtoolvalue+1,0,0}
!name {"MatchToolValue","(tooltype$,value$)"}

!acommand {#long}
!args {#string,#string}
!libs
!subs {_NewTool2+1,0,0}
!args {#string,#string,#long}
!libs
!subs {_NewTool+1,0,0}
!name {"NewToolType","(tooltype$,value$[,status])"}

!afunction {#string}
!args {#long}
!libs
!subs {_gettoolnumber+1,0,0}
!name {"FindToolNumber","(tooltype#)"}

!astatement
!args
!libs
!subs {_cleartooltypes+1,0,0}
!name {"ClearToolTypes",""}

!astatement
!args {#word,#word}
!libs
!subs {_seticonhit+1,0,0}
!name {"SetIconHit","width,height"}

!astatement
!args {#long}
!libs {#shapeslib,#ia0|#pd0}
!subs {_shapetoicon+1,0,0}
!args {#long,#long}
!libs {#shapeslib,#ia0|#pd0,#shapeslib,#ia1|#pd1}
!subs {_shapetoicon2+1,0,0}
!name {"ShapeToIcon","shape"}

!acommand {#long}
!args {#long}
!libs
!subs {_icontype+1,0,0}
!name {"SetIconType","object_type"}

!astatement
!args {#long}
!libs
!subs {_selectrender+1,0,0}
!name {"IconRender","render_flags"}

!acommand {#long}
!args {#string}
!libs
!subs {_defaulttool+1,0,0}
!name {"IconDefTool","tool$"}

!afunction {#byte}
!args {#string}
!libs
!subs {_istooltype+1,0,0}
!name {"FindToolType","(tooltype$)"}

finit:!nullsub{_libfinit,0,0}
init:!nullsub{_libinit,0,0}
!libfin

._libinit:
  LEA       iconlibrary(pc),a1       ; get our library name
  MOVEQ.l   #0,d0                    ; clear version number
  MOVE.l    4,a6                     ; get exec base
  JSR       -552(a6)                 ; and call OpenLibrary()
  MOVE.l    d0,iconlibbase           ; store lib address
  MOVE.l    #0,tooltype              ; clear tooltype
  RTS                                ; return

._libfinit:
  MOVE.l    iconlibbase,d0           ; get lib base
  BNE       'lib_open                ; is it open?
  RTS                                ; no - exit
'lib_open:
  TST.l     diskobject
  BEQ       'closelib
  BSR       _Close_icon
'closelib:
  MOVE.l    iconlibbase,a1           ; get lib base
  MOVE.l    4,a6                     ; get exec base
  JSR       -414(a6)                 ; call CloseLibrary()
  RTS                                ; and exit

ReturnFalse:
  MOVEQ.l   #0,d0
  RTS

;======================

._getstructure:
  MOVE.l    -(a2),d7                 ; get our string length
  TST.l     tooltype                 ; have we an open icon file?
  BNE       ReturnFalse              ; yes or no?
'no_open_icon:
  MOVE.l    iconlibbase,a6           ; get our lib base
  TST.l     iconlibbase              ; is the lib open?
  BEQ       ReturnFalse              ; yes or no?
'open_lib
  MOVE.l    d0,a0                    ; get file name
  JSR       -132(a6)                 ; call GetDiskObject()

  TST.l     d0                       ; did we get one
  BEQ       ReturnFalse              ; yes or no?
'okay:
  MOVE.l    d0,a0                    ; get our object address
  MOVE.l    a0,diskobject            ; and store it
  ADD.l     #54,a0                   ; get address of tooltype array
  MOVE.l    (a0),a0                  ; and get our array start
  MOVE.l    a0,d0                    ; move into d0 for return
  MOVE.l    d0,tooltype              ; and store for later use
  MOVE.l    diskobject,d0            ; give back the addr of object
  RTS                                ; return

._cleartooltypes:
  MOVE.l    tooltype,d1              ; get tooltype array
  BEQ       ReturnFalse              ; yes or no?
'open_icon
  MOVE.l    d1,a0
'loop:
  TST.l     (a0)
  BEQ       'exit_this
  MOVE.l    #0,(a0)+
  BRA       'loop
'exit_this:
  RTS

;========================

._gettoolnumber:
  MOVE.l    tooltype,d1              ; get tooltype array
  BEQ       ReturnFalse              ; yes or no?
'open_icon
  MOVE.l    d1,a0
  MOVEQ.l   #0,d1
'loop:
  TST.l     (a0)
  BEQ       ReturnFalse
  CMP.l     d1,d0
  BEQ       'gotit
  ADDQ.l    #1,d1
  ADDQ.l    #4,a0
  BRA       'loop
'gotit
  MOVEQ.l   #0,d0
  MOVE.l    (a0),a0
'storestring:
  TST.b     (a0)
  BEQ       'the_end
  MOVE.b    (a0)+,(a3)+
  ADDQ.l    #1,d0
  BRA       'storestring
'the_end:
  RTS

._istooltype:
  MOVE.l    tooltype,d1              ; get tooltype array
  BEQ       ReturnFalse              ; yes or no?
'open_icon
  MOVE.l    d1,a0                    ; copy array pointer
  MOVE.l    d0,a1                    ; get tooltype name

  MOVE.l    iconlibbase,a6           ; get lib base
  JSR       -96(a6)                  ; and call FindToolType()

  TST.l     d0                       ; did we find it?
  BEQ       'endthis                 ; yes or no?
  MOVEQ.l   #-1,d0                    ; no - clear return value
'endthis:
  RTS                                ; and exit

._gettooltype:
  MOVE.l    tooltype,d1              ; get tooltype array
  BEQ       ReturnFalse              ; yes or no?
'open_icon
  MOVE.l    d1,a0                    ; copy array pointer
  MOVE.l    d0,a1                    ; get tooltype name

  MOVE.l    iconlibbase,a6           ; get lib base
  JSR       -96(a6)                  ; and call FindToolType()

  TST.l     d0                       ; did we find it?
  BEQ       ReturnFalse              ; yes or no?

'got_tooltype
  MOVE.l    -(a2),d7                 ; get tooltype string length
  ADDQ.l    #1,d7                    ; add one (Blitz is wierd...)
  SUBA.l    d7,a3                    ; subtract from Blitz's string pointer
  MOVE.l    d0,a0                    ; get pointer to tooltype
  MOVEQ.l   #0,d0                    ; and clear d0 for loop
'stringlength:
  CMPI.b    #")",(a0)
  BEQ       'the_end
'continue:
  TST.b     (a0)
  BEQ       'the_end
  MOVE.b    (a0)+,(a3)+              ; and copy the string into Blitz's buffer
  ADDQ.w    #1,d0                    ; increase length
  BRA       'stringlength            ; and loop some more
'the_end
  RTS                                ; and exit

._Matchtoolvalue:
  MOVE.l    d1,string_address        ; store match string address
  MOVE.l    tooltype,d1              ; get tooltype array
  BEQ       ReturnFalse              ; yes or no?
'open_icon
  MOVE.l    d1,a0                    ; get our array pointer
  MOVE.l    d0,a1                    ; get tooltype string

  MOVE.l    iconlibbase,a6           ; get lib base
  JSR       -96(a6)                  ; call FindToolType()

  TST.l     d0                       ; did we find it?
  BEQ       ReturnFalse              ; yes or no?

'got_tooltype
  MOVE.l    string_address,a1        ; get match string address
  MOVE.l    d0,a0                    ; move tooltype address
  JSR       -102(a6)                 ; call MatchToolValue()
  TST.l     d0                       ; did we match it?

  BEQ       'not_found               ; yes or no?
  MOVEQ.l   #-1,d0                   ; YES! - set return value
'not_found
  RTS                                ; and exit

;==============================

; SAVE icon tooltype information to the specified file.
; Using PutDiskObject

_Put_icon2:
  MOVEQ.l   #0,d1
._Put_icon:
  MOVE.l    d1,d7
  MOVE.l    iconlibbase,d1           ; get our lib base
  BEQ       ReturnFalse              ; yes or no?
'got_iconlib:
  MOVE.l    d1,a6                    ; move lib start
  MOVE.l    diskobject,d1            ; get disk object address
  BEQ       ReturnFalse              ; have we got a disk object?

'got_tooltype:
  MOVE.l    d1,a1                    ; a1=pointer to disk object
  MOVE.l    d0,a0                    ; a0=pointer to filename
  TST.b     d7
  BEQ       'no_change
  MOVE.b    d7,48(a1)
'no_change:
  JSR       -84(a6)                  ; call PutDiskdObject
  MOVE.l    #0,diskobject            ; clear pointer
  MOVE.l    #0,tooltype              ; clear pointer
  MOVEQ.l   #-1,d0
  RTS                                ; and exit

;===========================

._Close_icon:                        ; SAME AS _Put_Icon
  MOVE.l    iconlibbase,d0           ; except that it doesn't
  BEQ       ReturnFalse              ; yes or no?
'got_iconlib:
  MOVE.l    d0,a6
  MOVE.l    diskobject,d0
  BEQ       ReturnFalse
'got_tooltype:
  MOVE.l    d0,a0
  JSR       -90(a6)
  MOVEQ.l   #-1,d0
  MOVE.l    #0,diskobject
  MOVE.l    #0,tooltype
  RTS


;===========================
; Add a new tool type to the list for the current icon
; Note: no checking is done to see if the tooltype already
;       exists.  Use GetaToolType(type$) to check this.
; This routine scans the tooltype array and puts the new tooltype
; into the first free position.

_NewTool2:
  MOVEQ.l   #-1,d2                   ; optional status parameter
._NewTool:
  MOVE.l    d0,a0                    ; move pointer to tooltype
  MOVE.l    d0,tooltype_address      ; and store it
  MOVE.l    d1,string_address        ; store tooltype value
  MOVE.l    d2,status_tool           ; store tooltype status

  MOVE.l    -(a2),d7                 ; get string length
  ADD.l     -(a2),d7                 ; get more string length
  ADDQ.l    #8,d7                    ; add 8
  MOVE.l    d7,toolbuffersize        ; and store

  MOVE.l    tooltype,d0              ; get tooltype array
  BEQ       ReturnFalse              ; yes or no?

'ok:
  MOVE.l    tooltype_address,a0      ; copy array pointer
  MOVE.l    d0,a6                    ; get array pointer
'loop
  TST.l     (a6)                     ; get address of entry
  BEQ       'yesss                   ; is it clear?
  ADDQ.l    #4,a6                    ; no - increment pointer
  BRA       'loop                    ; loop until free pointer
  MOVEQ.l   #0,d0                    ; no free tooltype found
  RTS                                ; exit
'yesss:
  MOVE.l    #0,4(a6)
  BRA       gotit                    ; sloppy!  Branches to
                                     ; routine to save tooltype info

; Given a tooltype name, value and optionally status, this
; routine updates the current tooltype array if the tooltype
; given is present.

_PutTool2:
  MOVEQ.l   #-1,d2                   ; optional status parameter
._PutTool:
  MOVE.l    d0,a0                    ; copy pointer to tooltype
  MOVE.l    d0,tooltype_address      ; and store it
  MOVE.l    d1,string_address        ; store tooltype value
  MOVE.l    d2,status_tool           ; store tooltype status

  MOVE.l    -(a2),d7                 ; get string length
  ADD.l     -(a2),d7                 ; get more string length
  ADDQ.l    #8,d7                    ; add 8
  MOVE.l    d7,toolbuffersize        ; and store

  MOVE.l    tooltype,d0              ; get tooltype array
  BEQ       ReturnFalse              ; yes or no?
'ok:
  MOVE.l    tooltype_address,a0      ; copy array pointer
  MOVE.l    d0,a6
'loop
  TST.l     (a6)                     ; empty pointer
  BEQ       'end_of_list             ; yes - exit loop
  MOVE.l    (a6),a1                  ; get ponter
  BSR       _stringcompare           ; branch to test routine
  TST.b     d0                       ; did we get a match?
  BNE       gotit                    ; yes or not?
  ADDQ.l    #4,a6                    ; no - increment pointer
  BRA       'loop                    ; loop for all entries
'end_of_list:
  MOVEQ.l   #0,d0                    ; not found - clear return
  RTS                                ; and exit
gotit:
  MOVE.l    a6,array_address         ; store pointer to tooltype
  MOVE.l    toolbuffersize,d0        ; reserve bytes
  MOVE.l    #65536+1,d1              ; any mem but clear it
  MOVEQ.l   #0,d2                    ; clear d2 (?)
  MOVE.l    4,a6                     ; get EXEC base
  JSR       -198(a6)                 ; and call ALLOCMEM ()

  TST.l     d0                       ; did we get some memory?
  BEQ       ReturnFalse              ; yes or no?
'gotmem:
  MOVE.l    d0,data_address          ; store pointer to memory
  MOVE.l    diskobject,a0            ; get disk object address
  ADD.l     #78,a0                   ; add 78 to get our FreeMemList structure
  MOVE.l    d0,a1                    ; move data address
  MOVE.l    toolbuffersize,a2        ; get size of block
  MOVE.l    iconlibbase,a6           ; get lib base
  JSR       -72(a6)                  ; and call AddFreeList ()

  TST.l     d0                       ; did it get added to the list ok?
  BEQ       '_freemem                ; yes or no?

  MOVE.l    data_address,a0          ; get pointer to mem
  MOVE.l    array_address,a6         ; get our array entry address
  MOVE.l    a0,(a6)                  ; store mem pointer in array
  MOVE.l    tooltype_address,a1      ; get tooltype string address

  TST.l     status_tool              ; is it on or off?
  BNE       'loop1                   ; on or off?
  MOVE.b    #"(",(a0)+               ; its OFF [ shown by (..) ]

'loop1:
  MOVE.b    (a1)+,(a0)+              ; store byte of name
  TST.b     (a1)                     ; is it the last byte
  BEQ       'endtool                 ; yes or no?
  BRA       'loop1                   ; loop for all of name
'endtool:
  MOVE.l    string_address,a1        ; get tooltype value string
  TST.b     (a1)
  BEQ       'endtool2

  MOVE.b    #"=",(a0)+               ; put "="
'loop2:
  MOVE.b    (a1)+,(a0)+              ; and store byte of string
  TST.b     (a1)                     ; is it the last byte
  BEQ       'endtool2                ; yes or no?
  BRA       'loop2                   ; loop for all of value
'endtool2:
  TST.l     status_tool              ; is it on or off?
  BNE       'THE_END                 ;                ?
  MOVE.b    #")",(a0)+               ; its off
'THE_END:
  MOVEQ.l   #-1,d0                   ; return SUCCESS
  RTS                                ; and exit

'_freemem:
  MOVE.l    d0,a1                    ; AddFreeList failed so we
  MOVE.l    toolbuffersize,d0        ; have to free up our
  MOVE.l    4,a6                     ; ALLOCMEMed memory
  JSR       -210(a6)                 ; call UnAlloc
  MOVEQ.l   #0,d0                    ; return failure
  RTS                                ; and end


;Inputs: a0=string to check
;        a1=address
;Alters: a0,a1,d0,d1

._stringcompare:
  MOVEM.l   d1/a0/a1,-(a7)
  CMPI.b    #"(",(a1)
  BNE       _casecheck
  ADDQ.l    #1,a1
_casecheck:
  MOVE.b    (a0)+,d0
  BEQ       'end_check
  MOVE.b    (a1)+,d1
  CMPI.b    #"a",d0
  BMI       'ok
  CMPI.b    #"z"+1,d0
  BPL       'ok
  SUBI.b    #$20,d0
'ok:
  CMPI.b    #"a",d1
  BMI       'ok2
  CMPI.b    #"z"+1,d1
  BPL       'ok2
  SUBI.b    #$20,d1
'ok2:
  CMP.b     d0,d1
  BNE       not_same
  BRA       _casecheck
'end_check:
  MOVEQ.l   #-1,d0
  MOVEM.l   (a7)+,d1/a0/a1
  RTS
not_same:
  MOVEQ.l   #0,d0
  MOVEM.l   (a7)+,d1/a0/a1
  RTS

._seticonhit:
  MOVE.l    diskobject,d2              ; get tooltype array
  BEQ       ReturnFalse              ; yes or no?
'gotit:
  MOVE.l    d2,a0
  LEA       12(a0),a0
  MOVE.w    d0,(a0)+
  MOVE.w    d1,(a0)+
  RTS

._shapetoicon2:
  MOVE.l    diskobject,d2              ; get tooltype array
  BEQ       ReturnFalse              ; yes or no?
'gotit:
  MOVE.l    d2,a2
  MOVE.w    (a1),width
  MOVE.w    2(a1),height
  MOVE.w    4(a1),deep
  MOVE.l    14(a1),dat
  LEA       SelectRender(pc),a3
  MOVE.l    a3,26(a2)
  MOVE.w    #6,16(a2)
;  RTS

._shapetoicon:
  MOVE.l    diskobject,d2              ; get tooltype array
  BEQ       ReturnFalse              ; yes or no?
'gotit:
  MOVE.l    d2,a1

  MOVE.w    (a0),12(a1)
  MOVE.w    2(a0),14(a1)
  ADD.w     #1,14(a1)

  MOVE.l    22(a1),a1

  ADDQ.l    #4,a1
  MOVE.w    (a0)+,(a1)+                 ; pixel width
  MOVE.w    (a0)+,(a1)+                 ; pixel height
  MOVE.w    (a0)+,(a1)+                 ; depth

  MOVE.l    8(a0),(a1)                  ; pointer to data
  RTS

._icontype:
  TST.l     d0
  BEQ       ReturnFalse
  CMPI.l    #5,d0
  BHI       ReturnFalse
  TST.l     diskobject
  BEQ       ReturnFalse

  MOVE.l    diskobject,a0
  MOVE.b    d0,48(a0)
  MOVEQ.l   #-1,d0
  RTS

._selectrender:
  TST.l     diskobject
  BEQ       'endthis

  MOVE.l    diskobject,a0
  MOVE.w    d0,16(a0)
'endthis:
  RTS

._defaulttool:
  TST.l     diskobject
  BEQ       ReturnFalse              ; yes or no?
'yup:
  MOVE.l    d0,string_address
  MOVE.l    -(a2),d0
  BNE       'gotit
  RTS
'gotit:
  ADDQ.l    #1,d0
  MOVE.l    d0,toolbuffersize
  SUB.l     d0,a3

  MOVE.l    #65536+1,d1              ; any mem but clear it
  MOVEQ.l   #0,d2                    ; clear d2 (?)
  MOVE.l    4,a6                     ; get EXEC base
  JSR       -198(a6)                 ; and call ALLOCMEM ()

  TST.l     d0                       ; did we get some memory?
  BEQ       ReturnFalse              ; yes or no?
'gotmem:
  MOVE.l    d0,data_address          ; store pointer to memory
  MOVE.l    diskobject,a0            ; get disk object address
  ADD.l     #78,a0                   ; add 78 to get our FreeMemList structure
  MOVE.l    d0,a1                    ; move data address
  MOVE.l    toolbuffersize,a2        ; get size of block
  MOVE.l    iconlibbase,a6           ; get lib base
  JSR       -72(a6)                  ; and call AddFreeList ()

  TST.l     d0                       ; did it get added to the list ok?
  BEQ       '_freemem                ; yes or no?

  MOVE.l    data_address,a0          ; get pointer to mem
  MOVE.l    string_address,a1

'loop1:
  MOVE.b    (a1)+,(a0)+              ; store byte of name
  TST.b     (a1)                     ; is it the last byte
  BEQ       'endtool                 ; yes or no?
  BRA       'loop1                   ; loop for all of name
'endtool:
  MOVE.l    diskobject,a0
  MOVE.l    data_address,d0
  MOVE.l    d0,50(a0)

  MOVEQ.l   #-1,d0                   ; return SUCCESS
  RTS                                ; and exit

'_freemem:
  MOVE.l    d0,a1                    ; AddFreeList failed so we
  MOVE.l    toolbuffersize,d0        ; have to free up our
  MOVE.l    4,a6                     ; ALLOCMEMed memory
  JSR       -210(a6)                 ; call UnAlloc
  MOVE.l    #0,d0                    ; return failure
  RTS                                ; and end


Even
toolbuffersize: Dc.l  0
status_tool:    Dc.l  0
array_address:  Dc.l  0
tooltype_address:Dc.l 0
data_address:   Dc.l 0
string_address: Dc.l 0
diskobject:     Dc.l 0
tooltype:       Dc.l 0
iconlibbase:    Dc.l 0
iconlibrary:    Dc.b "icon.library",0

  Even
SelectRender:
left:       Dc.w 0
top:        Dc.w 0
width:      Dc.w 0
height:     Dc.w 0
deep:       Dc.w 0
dat:        Dc.l 0
planepick:  Dc.w 0
planeonoof: Dc.w 0
nextimage:  Dc.l 0


