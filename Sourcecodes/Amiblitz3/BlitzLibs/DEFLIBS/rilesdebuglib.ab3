; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Development:AmiBlitz3/BlitzLibs/Decompiled/thirdpartylibs"
; ExeFile         = "rilesdebuglib_new.obj"
; CreateIcon      = 0
; Residents       = "libmacs.res,LVO.res,libjsrs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 143
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 896
; CursorColumn    = 46
; LabelSearch     = "addi"
; LabelRemark     = 0
; LabelAll        = 1
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
; IRA V2.09 (Mar  5 2018) (c)1993-1995 Tim Ruehsen
; (c)2009-2015 Frank Wille, (c)2014-2017 Nicolas Bastien

#ABSEXECBASE = $4

!libheader{#rilesdebuglib,init,0,finit,0}

!acommand{#long}
!args{#long}
!libs{#doslib,#la6}
!subs{do_FindVolume+1,0,0
!name{"D_FindVolume","(volumename)"}    ; gets the disk volume

!astatement
!args{#long,#word}
!libs
!subs{do_GetSR,0,0}
!name {"D_GetSR","buffer,SR"}           ; gets a visualization of the status register into a string buffer with 6 bytes

!astatement
!args{#long,#long,#word}
!libs
!subs{do_HexWord,0,0}
!name{"D_HexWord","source,address,num"} ; converted the memory at source to a string buffer (address) for the given numbers of bytes

!astatement
!args{#long,#long}
!libs
!subs{do_CheckNMove,0,0}
!args{#long,long,#word}
!libs
!subs{do_CheckNMove2,0,0}
!name{"D_CheckNMove","source_address,dest_address[,count]"} ; copies "count" long values to from source to destination with one gap between the longs
                                                            ; e.g. "12345678" -> "1234x5678"

!afunction{#long}
!args{#long,#long}
!libs
!subs{do_FindStringPtr,0,0}
!name{"D_FindStringPtr","areg5,lookfor"}    ; given a stringpointer "lookfor" it searches in the memory from 32768-areg5 to args5 for the stringpointer
                                            ; it it is found, the given pointer a valid pointer to a basic variable string

!afunction{#string}
!args{#long}
!libs
!subs{do_GetCopIns,0,0}
!name{"GetCopIns$","copdata"}               ; converts the current copper instruction to human readable code

!astatement
!args{#word,#word}
!libs
!subs{do_FLocate,0,0}
!name{"FLocate","x,y"}                      ; sets the cursorposition in source window

!astatement
!args{#string}
!libs{#bitmaplib,#ua0}
!subs{do_FPrint,0,0}
!name{"FPrint","a$"}                        ; print a$ to bitmap at current position

!astatement
!args{#string}
!libs{#bitmaplib,#ua0}
!subs{do_FNPrint,0,0}
!name{"FNPrint","a$"}                       ; print a$ and move cursor to next line

!astatement
!args{#word}
!libs
!subs{do_FInverse,0,0}
!name{"FInverse","inversemode"}             ; set inverse mode for printing

!astatement
!args{#word,#long}
!libs
!subs{do_GetProgMode,0,0}
!name{"GetProgMode","mode,buffer"}          ; gets the current program mode as a string (will be written into "buffer")

!astatement
!args{#word}
!libs
!subs{do_FVOffset,0,0}
!name{"FYOffset","pixel_offset - offset from vertical y cursor to print at"}

!afunction{#long}
!args{#byte,8,#long,#long}
!libs
!subs{do_SearchMem,0,0}
!name{"SearchMem","type,value,start_ad,end_ad"} ; type: datasize, searchvalue , returns true if found

!afunction{#long}
!args
!libs
!subs{do_SearchMemFound,0,0}
!name{"SearchMemFound",""}      ; returns mem address of search

!afunction{#string}
!args{#long,#word}
!libs
!subs{do_PeekMax,0,0}
!name{"PeekMax$","(address,max_chars)"}     ; same as PeekS$() in memaccLib

!astatement
!args{#long,#long}
!libs
!subs{do_CheckNMoveWord,0,0}
!args{#long,#long,#word}
!libs
!subs{do_CheckNMoveWord2,0,0}
!name{"D_CheckNMoveWord","source_address,dest_address[,count]"}     ; copy count of words from s to d
                                                                    ; if source address is < 1056, return values will be returnsd as "*"

!afunction{#string}
!args{#long,#word}
!libs
!subs{do_GetHex,0,0}
!name{"GetHex$","value,mode  (1=byte, 2=word, 3=longword)"}         ; returns requested hexvalues from given data

!afunction{#string}
!args{#long,#word}
!libs
!subs{do_GetHexAdr,0,0}
!name{"GetHexAdr$","*value,mode  (1=byte, 2=word, 3=longword)"}     ; returns requested hexvalues from given address

!afunction{#string}
!args{#word}
!libs
!subs{do_GetCustomReg,0,0}
!name{"GetCustomReg","address"}                                     ; returns name of custom reg address

!afunction{#long}
!args{#string}
!libs
!subs{do_GetCustomRegAdr,0,0}
!name{"GetCustomRegAdr","name$"}                                    ; returns address of given custom reg name

!astatement
!args{#long,#word,#word,#word}
!libs{#bitmaplib,#ua0}
!subs{do_FPrintDetoke,0,0}
!name{"FPrintDetoke","tokenised_string,cio,typ,lineoffset"}         ; detokenize the string, print it and return it in d0

!astatement
!args{#long,#byte}
!libs
!subs{do_SetupLESDebug,0,0}
!name{"SetupLESDebug","token_addr,tokenise"}                        ; inits the detokenization routine

!afunction{#string}
!args{#long}
!libs
!subs{do_ExtractLabel,0,0}
!name{"ExtractLabel","label_string"}                                ; inputs pointer to sourceline, returns string between "." and ":"

!astatement
!args{#word,#word,#long,8}
!libs
!subs{do_OutText,0,0}
!name{"OutText","x,y,rastport,address/string"}                      ; prints text to rastport with Move_ and Text_

!astatement
!args{#long,#long}
!libs
!subs{do_CheckNMoveA,0,0}
!args{#long,#long,#word}
!libs
!subs{do_CheckNMoveA2,0,0}
!name{"D_CheckNMoveA","source_address,dest_address[,count]"}        ; works like D_CheckMove but replaces "0"-values with "1"-values

!astatement
!args{#long,#word}
!libs
!subs{do_OutTextPen,0,0}
!name{"OutTextPen","rastport,pen"}                                  ; set color for textoutput with SetAPen_

!astatement
!args{#long}
!libs
!subs{do_InitParse,0,0}
!name{"D_InitParse","string"}                                       ; gets the string for further parsing

!afunction{#string}
!args
!libs
!subs{do_NextArg,0,0}
!name{"D_NextArg$","- get next parameter"}                          ; gets the next parameter divded by ","

!afunction{#string}
!args
!libs
!subs{do_ProcessString,0,0}
!name{"ProcessString","string"}                                     ; parses the string gotten by "D_InitParse" an replaces the "% "-options by its values

!astatement
!args{#string,#long}
!libs
!subs{do_AddProcessPtr,0,0}
!name{"AddProcessPtr","character,string"}                           ; adds a string as a process parameter for ProcessString, e.g. AddProcessPtr "f",&test$

!astatement
!args
!libs
!subs{do_ClearProcessPtrs,0,0}
!name{"ClearProcessPtrs","-- reset process string pointers"}        ; clears all pointers

!afunction{#string}
!args{#long,#byte}
!libs
!subs{do_detokenize,0,0}
!name{"DetokenizeLine","(ptr to sourceline, mark tokens) -detokenizes the given source line"}


finit: !nullsub{_libfinit,0,0}
init:  !nullsub{_libinit,0,0}
!libfin

; *********************************************************************************

_libinit:
    LEA     str_graphicslib(PC),A1
    MOVEQ   #0,D0
    MOVEA.L ABSEXECBASE,A6
    JSR     _OpenLibrary(A6)
    MOVE.L  D0,gfxBase
    MOVE.L  #str_REDDebugger,ptrStrREDDebugger
    MOVE.L  #str_TokenAddress,ptrStrTokenAddress
RTS

str_graphicslib: Dc.b "graphics.library",0,0
gfxBase:    Dc.l 0

_libfinit:
    MOVEA.L gfxBase,A1
    MOVEA.L ABSEXECBASE,A6
    JSR     _CloseLibrary(A6)
    CLR.L   gfxBase
RTS

returnFalse:
    MOVEQ   #0,D0
RTS

.do_ProcessString:
    MOVEA.L ptrToNextArg,A0     ;08be: 207900000ac4
    MOVEQ   #0,D0           ;08c4: 7000
LAB_0009:
    MOVE.B  (A0)+,D1        ;08c6: 1218         ; A0 Parameter String
    BEQ.S   LAB_000F        ;08c8: 6732
    CMPI.B  #$25,D1         ;08ca: 0c010025     ; 37 "%"
    BEQ.S   LAB_000B        ;08ce: 6706
LAB_000A:
    MOVE.B  D1,(A3)+        ;08d0: 16c1
    ADDQ.L  #1,D0           ;08d2: 5280
    BRA.S   LAB_0009        ;08d4: 60f0
LAB_000B:
    LEA     formatOptions(PC),A1 ;08d6: 43fa0054
    MOVE.B  (A0)+,D1        ;08da: 1218
    CMPI.B  #$25,D1         ;08dc: 0c010025     ; 37 "%"
    BEQ.S   LAB_000A        ;08e0: 67ee
LAB_000C:
    TST.B   (A1)            ;08e2: 4a11
    BEQ.S   LAB_0009        ;08e4: 67e0
    CMP.B   (A1),D1         ;08e6: b211
    BEQ.b   LAB_000D        ;08e8: 6704
    ADDQ.L  #6,A1           ;08ea: 5c89         ; get ptr to REDDebugger in A1, as is is 6 bytes after formatOptions
    BRA.b   LAB_000C        ;08ec: 60f4
LAB_000D:
    ADDQ.L  #2,A1           ;08ee: 5489
    MOVEA.L (A1)+,A1        ;08f0: 2259
LAB_000E:
    MOVE.B  (A1)+,D1        ;08f2: 1219
    BEQ.b   LAB_0009        ;08f4: 67d0
    MOVE.B  D1,(A3)+        ;08f6: 16c1
    ADDQ.L  #1,D0           ;08f8: 5280
    BRA.b   LAB_000E        ;08fa: 60f6
LAB_000F:
    RTS                     ;08fc: 4e75

str_REDDebugger: Dc.b "REDDebugger",0

.do_AddProcessPtr:
    LEA    optFormatOptions(PC),A0  ;090a: 41fa002c

    LAB_0013:
    TST.B   (A0)            ;090e: 4a10
    BEQ.S   LAB_0014        ;0910: 6704
    ADDQ.L  #6,A0           ;0912: 5c88
    BRA.S   LAB_0013        ;0914: 60f8
    LAB_0014:
    MOVEA.L D0,A1           ;0916: 2240
    MOVE.B  (A1),(A0)       ;0918: 1091
    MOVE.L  D1,2(A0)        ;091a: 21410002
    CLR.B   6(A0)           ;091e: 42280006
    RTS

.do_ClearProcessPtrs:
    CLR.B   optFormatOptions
    RTS

formatOptions:      Dc.w    $7000             ; format option "p"
ptrStrREDDebugger:  Dc.l    $00000000         ;092e: 00000000
                    Dc.w    $6300             ; format option "c"
ptrStrTokenAddress: Dc.l    $00000000         ;0934: 00000000
optFormatOptions:   Ds.b    20 * (4+2)        ; 20 entries with word value indicating the format character and a long pointer
                    Dc.w    $0000             ;09b0: indicates end of list

.do_InitParse:                                ; copies the supplied string to strToParse
    MOVEA.L D0,A0                             ;09b2: 2040
    LEA     strToParse(PC),A1                 ;09b4: 43fa000e
    MOVE.L  A1,ptrToNextArg                   ;09b8: 23c900000ac4
    LAB_001C:
        MOVE.B  (A0)+,(A1)+                   ;09be: 12d8
    BNE.S   LAB_001C                          ;09c0: 66fc
    RTS                                       ;09c2: 4e75

strToParse:         Ds.b    256
ptrToNextArg:       Dc.l    $00000000         ;0ac4: 00000000

do_NextArg:
    MOVEQ   #0,D0                             ;0ac8: 7000
    TST.L   ptrToNextArg                      ;0aca: 4ab900000ac4
    BNE.W   LAB_0020                          ;0ad0: 66000004
    RTS                                       ;0ad4: 4e75
LAB_0020:
    MOVEA.L ptrToNextArg,A0                   ;0ad6: 207900000ac4
LAB_0021:
    MOVE.B  (A0)+,D1        ;0adc: 1218
    BEQ.S   LAB_0023        ;0ade: 6714
    CMPI.B  #$2c,D1         ;0ae0: 0c01002c     ; ","
    BEQ.S   LAB_0022        ;0ae4: 6706
    MOVE.B  D1,(A3)+        ;0ae6: 16c1
    ADDQ.L  #1,D0           ;0ae8: 5280
    BRA.S   LAB_0021        ;0aea: 60f0
LAB_0022:
    MOVE.L  A0,ptrToNextArg     ;0aec: 23c800000ac4
    RTS             ;0af2: 4e75
LAB_0023:
    CLR.L   ptrToNextArg        ;0af4: 42b900000ac4
    RTS             ;0afa: 4e75

.do_OutText:
    MOVEA.L gfxBase,A6       ;0afc: 2c790000089e
    MOVEA.L D2,A1           ;0b02: 2242                     ; D2 is rastport
    MOVEA.L 52(A1),A0       ;0b04: 20690034
    ADD.W   26(A0),D1       ;0b08: d268001a
    JSR     _Move(A6)        ;0b0c: 4eaeff10
    MOVEA.L D2,A1           ;0b10: 2242
    MOVEA.L D3,A0           ;0b12: 2043
    MOVEQ   #0,D0           ;0b14: 7000
LAB_0025:
    TST.B   (A0)+           ;0b16: 4a18
    BEQ.S   LAB_0026        ;0b18: 6704
    ADDQ.W  #1,D0           ;0b1a: 5240
    BRA.S   LAB_0025        ;0b1c: 60f8
LAB_0026:
    MOVEA.L D3,A0           ;0b1e: 2043
    JSR     _Text(A6)         ;0b20: 4eaeffc4
    RTS             ;0b24: 4e75

.do_OutTextPen:
    MOVEA.L D0,A1           ;0b26: 2240
    MOVE.W  D1,D0           ;0b28: 3001
    MOVEA.L gfxBase(PC),A6   ;0b2a: 2c7afd72
    JSR _SetAPen(A6)        ;0b2e: 4eaefeaa
    RTS             ;0b32: 4e75

.do_SetupLESDebug:                  ; tokenAddress, tokenize-Flag
    MOVE.L  D0,tokenBase     ;0b34: 23c000000fec
    MOVE.B  D1,doTokenize    ;0b3a: 13c100000ff7
    LEA     str_hexdigits(PC),A0 ;0b40: 41fa02d8
    LEA     str_TokenAddress(PC),A1     ;0b44: 43fa0018
    MOVEQ   #7,D2           ;0b48: 7407
    LAB_0029:
        ROL.L   #4,D0           ;0b4a: e998
        MOVE.B  D0,D1           ;0b4c: 1200
        ANDI.W  #$000f,D1       ;0b4e: 0241000f
        MOVE.B  0(A0,D1.W),D1       ;0b52: 12301000
        MOVE.B  D1,(A1)+        ;0b56: 12c1
    DBF D2,LAB_0029     ;0b58: 51cafff0
    RTS             ;0b5c: 4e75

str_TokenAddress:   ;10 bytes: 8 bytes for the hex-address, one byte as the end-byte, one byte for alignment
    Dc.l    $00000000         ;0b5e: 00000000
    Dc.l    $00000000         ;0b62: 00000000
    Dc.w    $0000           ;0b66

.do_ExtractLabel:   ; Input: pointer to SourceLine
    MOVEA.L D0,A0                   ; get source line
    LEA     9(A0),A0                ; get begin of source string
    MOVEQ   #0,D0
    LAB_002C:                       ; search for labelidentifier "."
        CMPI.B  #$2e,(A0)+          ; "."
    BNE.S   LAB_002C
    LAB_002D:
        MOVE.B  0(A0,D0.W),D2
        BEQ.S   LAB_002E
        CMPI.B  #$3a,D2             ; search until ":"
        BEQ.W   LAB_002E        ;0b80: 6700000c
        CMPI.B  #$00,D2         ;0b84: 0c020000
        BEQ.S   LAB_002E        ;0b88: 6704
        ADDQ.W  #1,D0           ;0b8a: 5240
    BRA.S   LAB_002D        ;0b8c: 60e8
    LAB_002E:
    MOVE.W  D0,D1           ;0b8e: 3200
    SUBQ.W  #1,D1           ;0b90: 5341
    BMI.S   LAB_0030        ;0b92: 6b06
LAB_002F:
    MOVE.B  (A0)+,(A3)+     ;0b94: 16d8
    DBF     D1,LAB_002F     ;0b96: 51c9fffc
LAB_0030:
    RTS             ;0b9a: 4e75

.do_PeekMax:
    MOVEA.L D0,A0           ;0b9c: 2040
    MOVE.L  #$0000ffff,D0       ;0b9e: 203c0000ffff
LAB_0032:
    ADDQ.W  #1,D0           ;0ba4: 5240
    MOVE.B  (A0)+,D2        ;0ba6: 1418
    BEQ.S   LAB_0033        ;0ba8: 6706
    MOVE.B  D2,(A3)+        ;0baa: 16c2
    SUBQ.W  #1,D1           ;0bac: 5341
    BPL.S   LAB_0032        ;0bae: 6af4
LAB_0033:
    RTS             ;0bb0: 4e75


.do_SearchMem:                              ; d0:size,d1:value,d2:start_ad,d3:end_ad"
    MOVEA.L D2,A1           ; start_ad
    MOVEA.L D3,A2           ; end_ad
    MOVE.L  D1,D2           ; value   : value to search for
    MOVEQ   #127,D7         ;
    CMPI.B  #$01,D0         ; check type: byte
    BEQ.W   searchByte        ;
    CMPI.B  #$02,D0         ; word
    BEQ.W   searchWord        ;
    CMPI.B  #$03,D0         ; long
    BEQ.W   searchLong        ;
    CMPI.B  #$04,D0         ; string
    BEQ.W   searchString        ;
    CMPI.B  #$05,D0         ; quick
    BEQ.W   searchLong        ;
    CMPI.B  #$06,D0         ; float
    BEQ.W   searchLong        ;
    BRA.W   searchNotFound        ;

searchByte:
    SUBQ.W  #1,D7           ;0bee: 5347
    BNE.S   LAB_0036        ;0bf0: 6610
    MOVEQ   #64,D0          ;0bf2: 7040
    ALibJsr #rawkeystatus
    TST.B   D0          ;0bfa: 4a00
    BNE.W   searchAbort        ;0bfc: 660000c0
    MOVEQ   #127,D7         ;0c00: 7e7f
LAB_0036:
    CMPA.L  A1,A2           ;0c02: b5c9
    BEQ.W   searchNotFound        ;0c04: 670000ae
    CMP.B   (A1),D2         ;0c08: b411
    BEQ.W   searchFound        ;0c0a: 6700009e
    ADDQ.L  #1,A1           ;0c0e: 5289
    BRA.S   searchByte        ;0c10: 60dc

searchWord:
    MOVE.B  (A1),D3         ;0c12: 1611
LAB_0038:
    SUBQ.W  #1,D7           ;0c14: 5347
    BNE.S   LAB_0039        ;0c16: 6610
    MOVEQ   #64,D0          ;0c18: 7040
    ALibJsr #rawkeystatus
    TST.B   D0          ;0c20: 4a00
    BNE.W   searchAbort        ;0c22: 6600009a
    MOVEQ   #127,D7         ;0c26: 7e7f
LAB_0039:
    CMPA.L  A1,A2           ;0c28: b5c9
    BEQ.W   searchNotFound        ;0c2a: 67000088
    ASL.W   #8,D3           ;0c2e: e143
    MOVE.B  1(A1),D3        ;0c30: 16290001
    CMP.W   D3,D2           ;0c34: b443
    BEQ.W   searchFound        ;0c36: 67000072
    ADDQ.L  #1,A1           ;0c3a: 5289
    BRA.S   LAB_0038        ;0c3c: 60d6

searchLong:
    MOVE.B  (A1),D3         ;0c3e: 1611
    SWAP    D3          ;0c40: 4843
    MOVE.B  1(A1),D3        ;0c42: 16290001
    ASL.W   #8,D3           ;0c46: e143
    MOVE.B  2(A1),D3        ;0c48: 16290002
LAB_003B:
    SUBQ.W  #1,D7           ;0c4c: 5347
    BNE.S   LAB_003C        ;0c4e: 6610
    MOVEQ   #64,D0          ;0c50: 7040
    ALibJsr #rawkeystatus
    TST.B   D0          ;0c58: 4a00
    BNE.W   searchAbort        ;0c5a: 66000062
    MOVEQ   #127,D7         ;0c5e: 7e7f
LAB_003C:
    CMPA.L  A1,A2           ;0c60: b5c9
    BEQ.W   searchNotFound        ;0c62: 67000050
    ASL.L   #8,D3           ;0c66: e183
    MOVE.B  3(A1),D3        ;0c68: 16290003
    CMP.L   D3,D2           ;0c6c: b483
    BEQ.W   searchFound        ;0c6e: 6700003a
    ADDQ.L  #1,A1           ;0c72: 5289
    BRA.S   LAB_003B        ;0c74: 60d6

searchString:
    MOVE.L  D2,D6           ;0c76: 2c02
    SUBQ.L  #1,A1           ;0c78: 5389
LAB_003E:
    MOVEA.L D2,A3           ;0c7a: 2642
LAB_003F:
    ADDQ.L  #1,A1           ;0c7c: 5289
    SUBQ.W  #1,D7           ;0c7e: 5347
    BNE.S   LAB_0040        ;0c80: 6610
    MOVEQ   #64,D0          ;0c82: 7040
    ALibJsr #rawkeystatus
    TST.B   D0          ;0c8a: 4a00
    BNE.W   searchAbort        ;0c8c: 66000030
    MOVEQ   #127,D7         ;0c90: 7e7f
LAB_0040:
    CMPA.L  A1,A2           ;0c92: b5c9
    BEQ.W   searchNotFound        ;0c94: 6700001e
    MOVE.B  (A3),D0         ;0c98: 1013
    CMP.B   (A1),D0         ;0c9a: b011
    BNE.S   LAB_003E        ;0c9c: 66dc
    ADDQ.L  #1,A3           ;0c9e: 528b
    TST.B   (A3)            ;0ca0: 4a13
    BNE.S   LAB_003F        ;0ca2: 66d8
    ADDQ.L  #1,D6           ;0ca4: 5286
    SUBA.L  D6,A3           ;0ca6: 97c6
    SUBA.L  A3,A1           ;0ca8: 93cb
searchFound:
    MOVE.L  A1,searchFoundAddress     ;0caa: 23c900000cc8
    MOVEQ   #-1,D0          ;0cb0: 70ff
    RTS             ;0cb2: 4e75

searchNotFound:
    CLR.L   searchFoundAddress        ;0cb4: 42b900000cc8
    MOVEQ   #0,D0           ;0cba: 7000
    RTS             ;0cbc: 4e75
searchAbort:
    MOVEQ   #1,D0           ;0cbe: 7001
    RTS             ;0cc0: 4e75

.do_SearchMemFound:
    MOVE.L  searchFoundAddress(PC),D0
    RTS

searchFoundAddress:   Dc.l $00000000

.do_FindVolume:                  ; dosbase in A6
    MOVE.L  D0,D7
    MOVE.L  #$0000003d,D1       ; flags
    JSR     -654(A6)            ; _LockDosList
    TST.L   D0
    BEQ.W   returnFalse
    MOVE.L  D0,D1               ; dlist
    MOVE.L  D7,D2               ; name
    MOVE.L  #$0000003d,D3       ; flags
    JSR     -684(A6)            ; _FindDosEntry
    MOVE.L  D0,D7
    MOVEQ   #61,D1              ; flags
    JSR     -660(A6)            ; _UnlockDosList
    MOVE.L  D7,D0               ; return the dosentry
    RTS

.do_GetSR:                       ; d0: buffer, d1: sr            ; visualize status register
    MOVEA.L D0,A0
    MOVE.L  #$2d2d2d2d,(A0)     ; "-----"
    MOVE.W  #$2d00,4(A0)
    LSR.B   #1,D1
    BCC.W   LAB_0048
    MOVE.B  #$43,4(A0)          ;"C"
LAB_0048:
    LSR.B   #1,D1
    BCC.W   LAB_0049
    MOVE.B  #$56,3(A0)          ;"V"
LAB_0049:
    LSR.B   #1,D1
    BCC.W   LAB_004A
    MOVE.B  #$5A,2(A0)          ;"Z"
LAB_004A:
    LSR.B   #1,D1
    BCC.W   LAB_004B
    MOVE.B  #$4e,1(A0)          ;"N"
LAB_004B:
    LSR.B   #1,D1
    BCC.W   LAB_004C
    MOVE.B  #$58,(A0)           ;"X"
LAB_004C:
    RTS             ;0d40: 4e75

.do_HexWord:                     ; d0: source, d1: address, d2: num  - convert data at source address into hexadecimal view
    MOVE.W  D2,D6               ; num
    SUBQ.W  #1,D6               ; num-1
    MOVEA.L D1,A0               ; address
    MOVEA.L D0,A1               ; source
    LEA str_hexdigits(PC),A2    ;
    MOVE.L  #$00000420,D7       ;
    ANDI.L  #$00000001,D0       ;
    BNE.W   LAB_0051
LAB_004E:
    CMPA.L  #$00000004,A1       ;0d5e: b3fc00000004
    BEQ.W   LAB_004F        ;0d64: 67000024
    CMPA.L  #$00000006,A1       ;0d68: b3fc00000006
    BEQ.W   LAB_004F        ;0d6e: 6700001a
    CMP.L   A1,D7           ;0d72: be89
    BLE.S   LAB_004F        ;0d74: 6f14
    ADDQ.L  #2,A1           ;0d76: 5489
    MOVE.B  #$2a,(A0)+      ;"*"
    MOVE.B  #$2a,(A0)+      ;"*"
    MOVE.B  #$2a,(A0)+      ;"*"
    MOVE.B  #$2a,(A0)+      ;"*"
    BRA.S   LAB_0050        ;0d88: 6030
LAB_004F:
    MOVE.W  (A1)+,D0        ;0d8a: 3019
    MOVE.W  D0,D2           ;0d8c: 3400
    ANDI.W  #$f000,D2       ;0d8e: 0242f000
    ROL.W   #4,D2           ;0d92: e95a
    MOVE.B  0(A2,D2.W),(A0)+    ;0d94: 10f22000
    MOVE.W  D0,D2           ;0d98: 3400
    ANDI.W  #$0f00,D2       ;0d9a: 02420f00
    ASR.W   #8,D2           ;0d9e: e042
    MOVE.B  0(A2,D2.W),(A0)+    ;0da0: 10f22000
    MOVE.W  D0,D2           ;0da4: 3400
    ANDI.W  #$00f0,D2       ;0da6: 024200f0
    ASR.W   #4,D2           ;0daa: e842
    MOVE.B  0(A2,D2.W),(A0)+    ;0dac: 10f22000
    MOVE.W  D0,D2           ;0db0: 3400
    ANDI.W  #$000f,D2       ;0db2: 0242000f
    MOVE.B  0(A2,D2.W),(A0)+    ;0db6: 10f22000
LAB_0050:
    MOVE.B  #$20,(A0)+      ;0dba: 10fc0020
    DBF D6,LAB_004E     ;0dbe: 51ceff9e
    RTS             ;0dc2: 4e75
LAB_0051:
    CMP.L   A1,D7           ;0dc4: be89
    BLE.S   LAB_0052        ;0dc6: 6f0c
    ADDQ.L  #1,A1           ;0dc8: 5289
    MOVE.B  #$2a,(A0)+      ;0dca: 10fc002a
    MOVE.B  #$2a,(A0)+      ;0dce: 10fc002a
    BRA.S   LAB_0053        ;0dd2: 6016
LAB_0052:
    MOVE.B  (A1)+,D0        ;0dd4: 1019
    MOVE.B  D0,D2           ;0dd6: 1400
    ANDI.W  #$00f0,D2       ;0dd8: 024200f0
    ASR.W   #4,D2           ;0ddc: e842
    MOVE.B  0(A2,D2.W),(A0)+    ;0dde: 10f22000
    ANDI.W  #$000f,D0       ;0de2: 0240000f
    MOVE.B  0(A2,D0.W),(A0)+    ;0de6: 10f20000
LAB_0053:
    MOVE.B  #$20,(A0)+      ;0dea: 10fc0020
    CMP.L   A1,D7           ;0dee: be89
    BLE.S   LAB_0054        ;0df0: 6f0c
    ADDQ.L  #1,A1           ;0df2: 5289
    MOVE.B  #$2a,(A0)+      ;0df4: 10fc002a
    MOVE.B  #$2a,(A0)+      ;0df8: 10fc002a
    BRA.S   LAB_0055        ;0dfc: 6016
LAB_0054:
    MOVE.B  (A1)+,D0        ;0dfe: 1019
    MOVE.B  D0,D2           ;0e00: 1400
    ANDI.W  #$00f0,D2       ;0e02: 024200f0
    ASR.W   #4,D2           ;0e06: e842
    MOVE.B  0(A2,D2.W),(A0)+    ;0e08: 10f22000
    ANDI.W  #$000f,D0       ;0e0c: 0240000f
    MOVE.B  0(A2,D0.W),(A0)+    ;0e10: 10f20000
LAB_0055:
    DBF D6,LAB_0051     ;0e14: 51ceffae
    RTS             ;0e18: 4e75

str_hexdigits:   Dc.b    "0123456789ABCDEF"

.do_CheckNMove:                              ;d0:source, d1:destination, [d2:count]
    MOVEQ   #1,D2           ;0e2a: 7401
.do_CheckNMove2:
    MOVE.W  D2,D7           ;0e2c: 3e02     ; count
    SUBQ.W  #1,D7           ;0e2e: 5347     ; count-1
    MOVEA.L D0,A0           ;0e30: 2040     ; source
    MOVEA.L D1,A1           ;0e32: 2241     ; destination
    MOVEQ   #0,D0           ;0e34: 7000
    LAB_0059:
        MOVE.B  (A0)+,(A1)+     ;0e36: 12d8
        MOVE.B  (A0)+,(A1)+     ;0e38: 12d8
        MOVE.B  (A0)+,(A1)+     ;0e3a: 12d8
        MOVE.B  (A0)+,(A1)+     ;0e3c: 12d8
        ADDQ.L  #1,A1           ;0e3e: 5289
    DBF D7,LAB_0059     ;0e40: 51cffff4
    RTS             ;0e44: 4e75

do_CheckNMoveA:                             ;d0:source, d1:destination, [d2:count]
    MOVEQ   #1,D2           ;0e46: 7401
do_CheckNMoveA2:
    MOVE.W  D2,D7           ;0e48: 3e02     ; count
    SUBQ.W  #1,D7           ;0e4a: 5347     ; count-1
    MOVEA.L D0,A0           ;0e4c: 2040     ; source
    MOVEA.L D1,A1           ;0e4e: 2241     ; destination
    MOVEQ   #0,D0           ;0e50: 7000
    LAB_005C:
        MOVE.B  (A0)+,D6    ;0e52: 1c18
        BNE.S   LAB_005D    ;0e54: 6602
            MOVEQ   #1,D6   ;0e56: 7c01
        LAB_005D:
        MOVE.B  D6,(A1)+    ;0e58: 12c6

        MOVE.B  (A0)+,D6    ;0e5a: 1c18
        BNE.S   LAB_005E    ;0e5c: 6602
            MOVEQ   #1,D6   ;0e5e: 7c01
        LAB_005E:
        MOVE.B  D6,(A1)+    ;0e60: 12c6

        MOVE.B  (A0)+,D6    ;0e62: 1c18
        BNE.S   LAB_005F    ;0e64: 6602
            MOVEQ   #1,D6   ;0e66: 7c01
        LAB_005F:
        MOVE.B  D6,(A1)+    ;0e68: 12c6

        MOVE.B  (A0)+,D6    ;0e6a: 1c18
        BNE.S   LAB_0060    ;0e6c: 6602
            MOVEQ   #1,D6   ;0e6e: 7c01
        LAB_0060:
        MOVE.B  D6,(A1)+    ;0e70: 12c6
        ADDQ.W  #1,A1       ;0e72: 5249
    DBF D7,LAB_005C         ;0e74: 51cfffdc
    RTS                     ;0e78: 4e75


do_CheckNMoveWord:                              ; d0: source_address, d1: dest_address d2:[,count of words]"
    MOVEQ   #1,D2           ;0e7a: 7401
do_CheckNMoveWord2:
    ASL.W   #1,D2           ;0e7c: e342
    MOVE.W  D2,D7           ;0e7e: 3e02
    SUBQ.W  #1,D7           ;0e80: 5347
    MOVEA.L D0,A0           ;0e82: 2040
    MOVEA.L D1,A1           ;0e84: 2241
    MOVEQ   #0,D0           ;0e86: 7000
    MOVE.L  #$00000420,D5       ;0e88: 2a3c00000420 ; 1056
    LAB_0063:
    CMP.L   A0,D5           ;0e8e: ba88
    BLE.S   LAB_0064        ;0e90: 6f08
        ADDQ.L  #1,A0           ;0e92: 5288
        MOVE.B  #$2a,(A1)+      ;0e94: 12fc002a ; "*"
        BRA.S   LAB_0066        ;0e98: 6008
    LAB_0064:
        MOVE.B  (A0)+,D6        ;0e9a: 1c18
        BNE.S   LAB_0065        ;0e9c: 6602
            MOVEQ   #1,D6           ;0e9e: 7c01
        LAB_0065:
        MOVE.B  D6,(A1)+        ;0ea0: 12c6
    LAB_0066:
    DBF D7,LAB_0063     ;0ea2: 51cfffea
    RTS             ;0ea6: 4e75

.do_FindStringPtr:          ; d0: areg5, d1: lookfor
    MOVEA.L D0,A0           ;0ea8: 2040
    MOVEA.L D0,A2           ;0eaa: 2440
    SUBA.L  #$00008000,A0   ;0eac: 91fc00008000 ; 32768
    LAB_0068:
    CMP.L   (A0),D1         ;0eb2: b290
    BEQ.S   LAB_0069        ;0eb4: 670a
    ADDQ.L  #2,A0           ;0eb6: 5488
    CMPA.L  A0,A2           ;0eb8: b5c8
    BNE.S   LAB_0068        ;0eba: 66f6
    MOVEQ   #-1,D0          ;0ebc: 70ff ; stringptr not found
    RTS                     ;0ebe: 4e75
    LAB_0069:
    MOVE.L  A0,D0           ;0ec0: 2008
    RTS                     ;0ec2: 4e75

do_FVOffset:
    MOVE.W  D0,pixel_offset
    RTS

do_FInverse:
    MOVE.W  D0,inversemode
    RTS

do_FLocate:
    MOVE.W  D0,locate_x
    MOVE.W  D1,locate_y
    RTS

locate_x:       Dc.w $0000
locate_y:       Dc.w $0000
inversemode:    Dc.w $0000
pixel_offset:   Dc.w $0000

do_FNPrint:
    BSR.W   do_FPrint
    MOVE.W  #$0000,locate_x
    ADDI.W  #$0001,locate_y
    RTS

do_FPrint:                   ; A0: current bitmap; D0: stringpointer
    MOVEQ   #0,D1           ;0f00: 7200
    MOVEQ   #0,D2           ;0f02: 7400
    MOVE.W  locate_x,D1     ;0f04: 323900000ee2
    MOVE.W  locate_y,D2       ;0f0a: 343900000ee4
    ASL.W   #3,D2           ;0f10: e742
    ADD.W   pixel_offset,D2       ;0f12: d47900000ee8
    MULU    #$0050,D2       ;0f18: c4fc0050            ; 80
    MOVEA.L 8(A0),A0         ;bitplanes to A0
    MOVE.L  D2,D7           ;
    ADD.L   D1,D7           ;
    ADDA.L  D7,A0           ;
    MOVE.W  locate_x,D6     ;0f26: 3c3900000ee2
    MOVE.W  locate_y,D7       ;0f2c: 3e3900000ee4

    MOVE.L  -(A2),D5        ;0f32: 2a22                 ; get string length of string from stack that will be provided by blitz2 in A2
    SUBQ.W  #1,D5           ;0f34: 5345
    BMI.W   LAB_0075        ;0f36: 6b0000a4

    MOVEA.L D0,A1           ;0f3a: 2240                 ; stringpointer to A1
    LEA     bitplaneMagic(PC),A2     ;0f3c: 45fa0278
    CMPI.B  #$50,D6         ;0f40: 0c060050             ; if locate_x <= 80
    BPL.W   LAB_0075        ;0f44: 6a000096
    LAB_0073:
        MOVEQ   #0,D0           ;0f48: 7000
        MOVE.B  (A1)+,D0        ;0f4a: 1019
        ASL.W   #3,D0           ;0f4c: e740
        MOVEA.L A2,A3           ;0f4e: 264a
        ADDA.L  D0,A3           ;0f50: d7c0
        TST.W   inversemode        ;0f52: 4a7900000ee6
        BNE.W   LAB_0074        ;0f58: 66000034
        MOVE.B  (A3)+,(A0)      ;0f5c: 109b
        MOVE.B  (A3)+,80(A0)        ;0f5e: 115b0050
        MOVE.B  (A3)+,160(A0)       ;0f62: 115b00a0
        MOVE.B  (A3)+,240(A0)       ;0f66: 115b00f0
        MOVE.B  (A3)+,320(A0)       ;0f6a: 115b0140
        MOVE.B  (A3)+,400(A0)       ;0f6e: 115b0190
        MOVE.B  (A3)+,480(A0)       ;0f72: 115b01e0
        MOVE.B  (A3)+,560(A0)       ;0f76: 115b0230
        ADDQ.L  #1,A0           ;0f7a: 5288
        ADDQ.L  #1,D6           ;0f7c: 5286
        CMPI.B  #$50,D6         ;0f7e: 0c060050
        BPL.W   LAB_0075        ;0f82: 6a000058
    DBF D5,LAB_0073     ;0f86: 51cdffc0
    BRA.W   LAB_0075        ;0f8a: 60000050
    LAB_0074:
        MOVE.B  (A3)+,D0        ;0f8e: 101b
        NOT.B   D0          ;0f90: 4600
        MOVE.B  D0,(A0)         ;0f92: 1080
        MOVE.B  (A3)+,D0        ;0f94: 101b
        NOT.B   D0          ;0f96: 4600
        MOVE.B  D0,80(A0)       ;0f98: 11400050

        MOVE.B  (A3)+,D0        ;0f9c: 101b
        NOT.B   D0          ;0f9e: 4600
        MOVE.B  D0,160(A0)      ;0fa0: 114000a0

        MOVE.B  (A3)+,D0        ;0fa4: 101b
        NOT.B   D0          ;0fa6: 4600
        MOVE.B  D0,240(A0)      ;0fa8: 114000f0

        MOVE.B  (A3)+,D0        ;0fac: 101b
        NOT.B   D0          ;0fae: 4600
        MOVE.B  D0,320(A0)      ;0fb0: 11400140

        MOVE.B  (A3)+,D0        ;0fb4: 101b
        NOT.B   D0          ;0fb6: 4600
        MOVE.B  D0,400(A0)      ;0fb8: 11400190

        MOVE.B  (A3)+,D0        ;0fbc: 101b
        NOT.B   D0          ;0fbe: 4600
        MOVE.B  D0,480(A0)      ;0fc0: 114001e0

        MOVE.B  (A3)+,D0        ;0fc4: 101b
        NOT.B   D0          ;0fc6: 4600
        MOVE.B  D0,560(A0)      ;0fc8: 11400230

        ADDQ.L  #1,A0           ;0fcc: 5288
        ADDQ.L  #1,D6           ;0fce: 5286
        CMPI.B  #$50,D6         ;0fd0: 0c060050
        BPL.W   LAB_0075        ;0fd4: 6a000006
    DBF D5,LAB_0073     ;0fd8: 51cdff6e
LAB_0075:
    MOVE.W  D6,locate_x     ;0fdc: 33c600000ee2
    MOVE.W  D7,locate_y       ;0fe2: 33c700000ee4
    MOVE.L  (A2),D0         ;0fe8: 2012
    RTS

tokenBase:        Dc.l $00000000
str_UnknownToken: Dc.b "?????",0
FPrintInverse:    Dc.b $00
doTokenize:       Dc.b $00
markTokens:       Dc.b $00
Even

.do_detokenize:
    MOVEM.L A4-A6,-(A7)     ;0ffa: 48e7000e
    MOVE.B  D1,markTokens
    ;LEA     returnString,A5 ;0ffe: 4bf9000023ea
    MOVEA.L D0,A1           ;1044: 2240
    ADDA.L  #9,A1
    MOVEQ.L #0,D6
    ;MOVEA.L A3,A5           ;save startposition of A3 to calculate length of return string

    LAB_007Ba:
    LAB_007Da:
    MOVEQ   #0,D0           ;10a8: 7000
    MOVE.B  (A1)+,D0        ;10aa: 1019             ; get next char
    BEQ.W   LAB_0083a       ;10ac: 6700007c         ; end of string ?
    BMI.S   LAB_007Ea       ;10b0: 6b0e             ; it is a token!
    MOVE.B  D0,(A3)+        ;1150: 1b806000                 put current char to return string
    ADDQ.L  #1,D6
    BRA.S   LAB_007Ba       ;10be: 6092

LAB_007Ea:
    TST.B   markTokens
    BEQ.S   'skipmark
    MOVE.B  #$c0,(A3)+                              ; add flag to indicate token begin
    ADDQ.L  #1,D6           ;10ca: 5286
   'skipmark
    LSL.W   #8,D0           ;10c2: e148
    MOVE.B  (A1)+,D0        ;10cc: 1019             ; get second tokenbyte
    LEA     tokenBase(PC),A6     ;10ce: 4dfaff1c
    BCLR    #15,D0          ;10d2: 0880000f

LAB_007Fa:                                       ; search tokenlist for current token
    MOVE.L  (A6),D1         ;10d6: 2216         ; next token
    BEQ.W   LAB_0082a        ;10d8: 6700004a     ; jump processing unknown token
    MOVEA.L D1,A6           ;10dc: 2c41
    CMP.W   4(A6),D0        ;10de: b06e0004     ; token found ?
    BNE.S   LAB_007Fa        ;10e2: 66f2

    ADDQ.W  #6,A6           ;10e4: 5c4e         ; found the token !!
LAB_0080a:
    CMPI.W  #256,D6       ;10e6: 0c4603e8      ; check if return string in <256 characters
    BPL.W   LAB_0083a       ;10ea: 6a00003e
    MOVEQ   #0,D0           ;10ee: 7000
    MOVE.B  (A6)+,D0        ;10f0: 101e
    BNE.W   LAB_0081a        ;10f2: 6600000e    ; copy token char to return string or ...
    TST.B   markTokens                          ; token finished, return to routine
    BEQ.S   'skipmark
    MOVE.B  #$c0,(A3)+      ;10f6: 1bbc00c06000
    ADDQ.L  #1,D6           ;10fc: 5286
   'skipmark
    BRA.W   LAB_007Ba        ;10fe: 6000ff52

LAB_0081a:
    TST.B   doTokenize      ;110c: 4a3900000ff7
    BEQ.S   LAB_0080a        ;1112: 67d2
    MOVE.B  D0,(A3)+          ;1150: 1b806000                 put current char to return string
    ADDQ.L  #1,D6
    BRA.S   LAB_0080a        ;1122: 60c2

LAB_0082a:
    LEA     str_UnknownToken(PC),A6
    BRA.S   LAB_0080a        ;1128: 60bc

LAB_0083a:
    MOVEQ.L #0,D0
    MOVE.w  D6,D0                               ; return length of return string in D0
    MOVEM.L (A7)+,A4-A6
    RTS


.do_FPrintDetoke:                ; D0=tokenised_string, D1= cio, D2 = inverse, D3 = lineoffset
    MOVE.W  D3,D5           ;0ff8: 3a03
    MOVEM.L A4-A6,-(A7)     ;0ffa: 48e7000e
    LEA     returnString,A5     ;0ffe: 4bf9000023ea
    MOVE.B  D2,FPrintInverse     ;1004: 13c200000ff6
    MOVE.W  D1,D3           ;100a: 3601                                             d3 = cio

    MOVEQ   #0,D1           ;100c: 7200
    MOVEQ   #0,D2           ;100e: 7400
    MOVE.W  locate_x,D1     ;1010: 323900000ee2
    MOVE.W  locate_y,D2       ;1016: 343900000ee4
    ASL.W   #3,D2           ;101c: e742
    ADD.W   pixel_offset,D2       ;101e: d47900000ee8
    MULU    #$0050,D2       ;1024: c4fc0050  $50 = 80
    MOVEA.L 12(A0),A4       ;1028: 2868000c
    MOVEA.L 8(A0),A0        ;102c: 20680008
    MOVE.L  D2,D7           ;1030: 2e02
    ADD.L   D1,D7           ;1032: de81
    ADDA.W  D7,A0           ;1034: d0c7
    ADDA.W  D7,A4           ;1036: d8c7
    MOVE.W  locate_x,D6     ;1038: 3c3900000ee2
    MOVE.W  locate_y,D7       ;103e: 3e3900000ee4
    MOVEA.L D0,A1           ;1044: 2240
    LEA     bitplaneMagic(PC),A2     ;1046: 45fa016e
    CMPI.W  #$03e8,D6       ;104a: 0c4603e8
    BPL.W   LAB_0083        ;104e: 6a0000da
LAB_007B:
    CMPI.W  #$03e8,D6       ;1052: 0c4603e8
    BPL.W   LAB_0083        ;1056: 6a0000d2
    TST.W   D3              ;105a: 4a43                     ; d3 = cio
    BNE.S   LAB_007D        ;105c: 664a
    SUBQ.W  #1,D5           ;105e: 5345
    BPL.S   LAB_007D        ;1060: 6a46
    TST.B   FPrintInverse   ;1062: 4a3900000ff6
    BNE.S   LAB_007C        ;1068: 660a
        MOVE.W  #$01f0,D0                               ;496
        BSR.W   LAB_0084        ;106e: 610000d8
        BNE.S   LAB_007D        ;1072: 6634
LAB_007C:
    MOVE.W  #$0600,D0       ;1074: 303c0600
    BSR.W   LAB_0087        ;1078: 6100010c
    MOVE.W  #$01e8,D0       ;107c: 303c01e8
    ST      inversemode        ;1080: 50f900000ee6
    BSR.W   LAB_0084        ;1086: 610000c0
    SF      inversemode        ;108a: 51f900000ee6
    MOVE.W  #$01f0,D0       ;1090: 303c01f0
    BSR.W   LAB_0084        ;1094: 610000b2
    MOVE.W  #$0600,D0       ;1098: 303c0600
    BSR.W   LAB_0084        ;109c: 610000aa
    MOVE.W  #$0100,D0       ;10a0: 303c0100
    BSR.W   LAB_0087        ;10a4: 610000e0
LAB_007D:
    MOVEQ   #0,D0           ;10a8: 7000
    MOVE.B  (A1)+,D0        ;10aa: 1019             ; get next char
    BEQ.W   LAB_0083        ;10ac: 6700007c         ; end of string ?
    BMI.S   LAB_007E        ;10b0: 6b0e             ; it is a token!
    SUBQ.W  #1,D3           ;10b2: 5343
    SUBQ.W  #1,D5           ;10b4: 5345
    BPL.S   LAB_007B        ;10b6: 6a9a
    ASL.W   #3,D0           ;10b8: e740
    BSR.W   LAB_0084        ;10ba: 6100008c
    BRA.S   LAB_007B        ;10be: 6092

LAB_007E:
    SUBQ.W  #2,D3           ;10c0: 5543
    LSL.W   #8,D0           ;10c2: e148
    MOVE.B  #$c0,0(A5,D6.W)                         ; 192    a5= returnstring
    ADDQ.L  #1,D6           ;10ca: 5286
    MOVE.B  (A1)+,D0        ;10cc: 1019             ; get second tokenbyte
    LEA     tokenBase(PC),A6     ;10ce: 4dfaff1c
    BCLR    #15,D0          ;10d2: 0880000f

LAB_007F:                                       ; search tokenlist for current token
    MOVE.L  (A6),D1         ;10d6: 2216         ; next token
    BEQ.W   LAB_0082        ;10d8: 6700004a     ; jump processing unknown token
    MOVEA.L D1,A6           ;10dc: 2c41
    CMP.W   4(A6),D0        ;10de: b06e0004     ; token found ?
    BNE.S   LAB_007F        ;10e2: 66f2

    ADDQ.W  #6,A6           ;10e4: 5c4e         ; found the token !!
LAB_0080:
    CMPI.W  #$03e8,D6       ;10e6: 0c4603e8
    BPL.W   LAB_0083        ;10ea: 6a00003e
    MOVEQ   #0,D0           ;10ee: 7000
    MOVE.B  (A6)+,D0        ;10f0: 101e
    BNE.W   LAB_0081        ;10f2: 6600000e
    MOVE.B  #$c0,0(A5,D6.W)     ;10f6: 1bbc00c06000  192  a5= returnstring
    ADDQ.L  #1,D6           ;10fc: 5286
    BRA.W   LAB_007B        ;10fe: 6000ff52
LAB_0081:
    SUBQ.W  #1,D5           ;1102: 5345
    BPL.S   LAB_0080        ;1104: 6ae0
    ASL.W   #3,D0           ;1106: e740
    BSR.W   LAB_0084        ;1108: 6100003e
    TST.B   doTokenize      ;110c: 4a3900000ff7
    BEQ.S   LAB_0080        ;1112: 67d2
    SUBQ.W  #1,A4           ;1114: 534c
    EXG     A0,A4           ;1116: c14c
    BSR.W   LAB_0084        ;1118: 6100002e
    SUBQ.W  #1,A4           ;111c: 534c
    EXG     A0,A4           ;111e: c14c
    SUBQ.W  #1,D6           ;1120: 5346
    BRA.S   LAB_0080        ;1122: 60c2

LAB_0082:
    LEA     str_UnknownToken(PC),A6
    BRA.S   LAB_0080        ;1128: 60bc

LAB_0083:
    MOVE.W  D6,locate_x     ;112a: 33c600000ee2
    MOVE.W  D7,locate_y       ;1130: 33c700000ee4
    MOVEA.L #returnString,A0        ;1136: 207c000023ea
    CLR.B   0(A0,D6.W)      ;add null-character at end
    MOVE.L  A0,D0           ;
    MOVEM.L (A7)+,A4-A6     ;
    RTS

LAB_0084:
    MOVEA.L A2,A3           ;1148: 264a
    ADDA.W  D0,A3           ;114a: d6c0
    MOVE.L  D0,-(A7)        ;114c: 2f00
    ASR.W   #3,D0           ;114e: e640
    MOVE.B  D0,0(A5,D6.W)   ;1150: 1b806000                 put current char to return string
    MOVE.L  (A7)+,D0        ;1154: 201f
    CMPI.W  #$004f,D6       ;1156: 0c46004f
    BGE.W   LAB_0085        ;115a: 6c00000c
    TST.B   inversemode        ;115e: 4a3900000ee6
    BNE.W   LAB_0086        ;1164: 6600000a
LAB_0085:
    ADDQ.L  #1,A0           ;1168: 5288
    ADDQ.L  #1,A4           ;116a: 528c
    ADDQ.L  #1,D6           ;116c: 5286
    RTS             ;116e: 4e75

LAB_0086:
    NOT.L   (A3)            ;1170: 4693
    NOT.L   4(A3)           ;1172: 46ab0004
    NOT.L   -8(A3)          ;1176: 46abfff8
    NOT.L   -4(A3)          ;117a: 46abfffc
    ADDQ.L  #1,A0           ;117e: 5288
    ADDQ.L  #1,A4           ;1180: 528c
    ADDQ.L  #1,D6           ;1182: 5286
    RTS             ;1184: 4e75

LAB_0087:
    MOVEA.L A2,A3           ;1186: 264a
    ADDA.W  D0,A3           ;1188: d6c0
    MOVE.L  D0,-(A7)        ;118a: 2f00
    ASR.W   #3,D0           ;118c: e640
    MOVE.B  D0,0(A5,D6.W)       ;118e: 1b806000
    MOVE.L  (A7)+,D0        ;1192: 201f
    CMPI.W  #$004f,D6       ;1194: 0c46004f
    BGE.W   LAB_0088        ;1198: 6c00000c
    TST.B   inversemode        ;119c: 4a3900000ee6
    BNE.W   LAB_0089        ;11a2: 6600000a
LAB_0088:
    ADDQ.L  #1,A0           ;11a6: 5288
    ADDQ.L  #1,A4           ;11a8: 528c
    ADDQ.L  #1,D6           ;11aa: 5286
    RTS             ;11ac: 4e75
LAB_0089:
    ADDQ.L  #1,A0           ;11ae: 5288
    ADDQ.L  #1,A4           ;11b0: 528c
    ADDQ.L  #1,D6           ;11b2: 5286
    RTS             ;11b4: 4e75

bitplaneMagic:
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;11b6
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;11c6
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;11d6
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;11e6
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;11f6
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;1206
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;1216
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;1226
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;1236
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;1246
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;1256
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;1266
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;1276
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;1286
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;1296
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;12a6
 Ds.l 2   ;12b6
 Dc.l $18181818,$18001800,$6c6c0000 ;12be
 Ds.l 1   ;12ca
 Dc.l $6c6cfe6c,$fe6c6c00,$183e603c,$067c1800 ;12ce
 Dc.l $0066acd8,$366acc00,$386c6876,$dcce7b00 ;12de
 Dc.l $18183000  ;12ee
 Ds.l 1   ;12f2
 Dc.l $0c183030,$30180c00,$30180c0c,$0c183000 ;12f6
 Dc.l $00663cff,$3c660000,$0018187e,$18180000 ;1306
 Ds.l 1   ;1316
 Dc.l $00181830,$0000007e ;131a
 Ds.l 2   ;1322
 Dc.l $00181800,$03060c18,$3060c000,$3c666e7e ;132a
 Dc.l $76663c00,$18387818,$18181800,$3c66060c ;133a
 Dc.l $18307e00,$3c66061c,$06663c00,$1c3c6ccc ;134a
 Dc.l $fe0c0c00,$7e607c06,$06663c00,$1c30607c ;135a
 Dc.l $66663c00,$7e06060c,$18181800,$3c66663c ;136a
 Dc.l $66663c00,$3c66663e,$060c3800,$00181800 ;137a
 Dc.l $00181800,$00181800,$00181830,$00061860 ;138a
 Dc.l $18060000,$00007e00,$7e000000,$00601806 ;139a
 Dc.l $18600000,$3c66060c,$18001800,$7cc6ded6 ;13aa
 Dc.l $dec07800,$3c66667e,$66666600,$7c66667c ;13ba
 Dc.l $66667c00,$1e306060,$60301e00,$786c6666 ;13ca
 Dc.l $666c7800,$7e606078,$60607e00,$7e606078 ;13da
 Dc.l $60606000,$3c66606e,$66663e00,$6666667e ;13ea
 Dc.l $66666600,$3c181818,$18183c00,$06060606 ;13fa
 Dc.l $06663c00,$c6ccd8f0,$d8ccc600,$60606060 ;140a
 Dc.l $60607e00,$c6eefed6,$c6c6c600,$c6e6f6de ;141a
 Dc.l $cec6c600,$3c666666,$66663c00,$7c66667c ;142a
 Dc.l $60606000,$78cccccc,$ccdc7e00,$7c66667c ;143a
 Dc.l $6c666600,$3c66703c,$0e663c00,$7e181818 ;144a
 Dc.l $18181800,$66666666,$66663c00,$66666666 ;145a
 Dc.l $3c3c1800,$c6c6c6d6,$feeec600,$c3663c18 ;146a
 Dc.l $3c66c300,$c3663c18,$18181800,$fe0c1830 ;147a
 Dc.l $60c0fe00,$3c303030,$30303c00,$c0603018 ;148a
 Dc.l $0c060300,$3c0c0c0c,$0c0c3c00,$10386cc6 ;149a
 Ds.l 2   ;14aa
 Dc.l $000000fe,$18180c00 ;14b2
 Ds.l 1   ;14ba
 Dc.l $00003c06,$3e663e00,$60607c66,$66667c00 ;14be
 Dc.l $00003c60,$60603c00,$06063e66,$66663e00 ;14ce
 Dc.l $00003c66,$7e603c00,$1c307c30,$30303000 ;14de
 Dc.l $00003e66,$663e063c,$60607c66,$66666600 ;14ee
 Dc.l $18001818,$18180c00,$0c000c0c,$0c0c0c78 ;14fe
 Dc.l $6060666c,$786c6600,$18181818,$18180c00 ;150e
 Dc.l $0000ecfe,$d6c6c600,$00007c66,$66666600 ;151e
 Dc.l $00003c66,$66663c00,$00007c66,$667c6060 ;152e
 Dc.l $00003e66,$663e0606,$00007c66,$60606000 ;153e
 Dc.l $00003c60,$3c067c00,$30307c30,$30301c00 ;154e
 Dc.l $00006666,$66663e00,$00006666,$663c1800 ;155e
 Dc.l $0000c6c6,$d6fe6c00,$0000c66c,$386cc600 ;156e
 Dc.l $00006666,$663c1830,$00007e0c,$18307e00 ;157e
 Dc.l $0e181870,$18180e00,$18181818,$18181800 ;158e
 Dc.l $7018180e,$18187000,$729c0000 ;159e
 Ds.l 1   ;15aa
 Dc.l $0f3cf0c3,$0f3cf000,$007e6666,$66667e00 ;15ae
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;15be
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;15ce
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;15de
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;15ee
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;15fe
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;160e
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;161e
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;162e
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;163e
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;164e
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;165e
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;166e
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;167e
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;168e
 Dc.l $007e6666,$66667e00,$007e6666,$66667e00 ;169e
 Dc.l $007e6666,$66667e00 ;16ae
 Ds.l 2   ;16b6
 Dc.l $18001818,$18181800,$000c3e6c,$3e0c0000 ;16be
 Dc.l $1c363078,$30307e00,$423c663c,$42000000 ;16ce
 Dc.l $c3663c18,$3c181800,$18181800,$18181800 ;16de
 Dc.l $3c603c66,$3c063c00,$66660000 ;16ee
 Ds.l 1   ;16fa
 Dc.l $7e819db1,$9d817e00,$1c24443c,$007e0000 ;16fe
 Dc.l $003366cc,$66330000,$3e060000 ;170e
 Ds.l 1   ;171a
 Dc.l $0000007e  ;171e
 Ds.l 1   ;1722
 Dc.l $7e81b9a5,$b9a5817e,$7e000000 ;1726
 Ds.l 1   ;1732
 Dc.l $3c663c00  ;1736
 Ds.l 1   ;173a
 Dc.l $18187e18,$18007e00,$780c1830,$7c000000 ;173e
 Dc.l $780c180c,$78000000,$18306000 ;174e
 Ds.l 1   ;175a
 Dc.l $00006666,$66667f60,$3e7a7a3a,$0a0a0a00 ;175e
 Dc.l $00001818  ;176e
 Ds.l 2   ;1772
 Dc.l $00001830,$30703030,$30000000,$38444438 ;177a
 Dc.l $007c0000,$00cc6633,$66cc0000,$40c64c58 ;178a
 Dc.l $3266cf02,$40c64c58,$3e62c40e,$c023662c ;179a
 Dc.l $d9336701,$18001830,$60663c00,$30183c66 ;17aa
 Dc.l $7e666600,$0c183c66,$7e666600,$18663c66 ;17ba
 Dc.l $7e666600,$718e3c66,$7e666600,$66003c66 ;17ca
 Dc.l $7e666600,$18243c66,$7e666600,$1f3c3c6f ;17da
 Dc.l $7ccccf00,$1e306060,$301e0c18,$30187e60 ;17ea
 Dc.l $78607e00,$0c187e60,$78607e00,$18667e60 ;17fa
 Dc.l $78607e00,$66007e60,$78607e00,$30183c18 ;180a
 Dc.l $18183c00,$0c183c18,$18183c00,$18663c18 ;181a
 Dc.l $18183c00,$66003c18,$18183c00,$786c66f6 ;182a
 Dc.l $666c7800,$71cee6f6,$decec600,$30183c66 ;183a
 Dc.l $66663c00,$0c183c66,$66663c00,$18663c66 ;184a
 Dc.l $66663c00,$718e3c66,$66663c00,$c33c6666 ;185a
 Dc.l $66663c00,$00c66c38,$6cc60000,$3f666e7e ;186a
 Dc.l $7666fc00,$30186666,$66663c00,$0c186666 ;187a
 Dc.l $66663c00,$18246666,$66663c00,$66006666 ;188a
 Dc.l $66663c00,$0608c366,$3c181800,$c0c0fcc6 ;189a
 Dc.l $fcc0c000,$3c66666c,$66666c60,$30183c06 ;18aa
 Dc.l $3e663e00,$0c183c06,$3e663e00,$18663c06 ;18ba
 Dc.l $3e663e00,$718e3c06,$3e663e00,$66003c06 ;18ca
 Dc.l $3e663e00,$18243c06,$3e663e00,$00007e1b ;18da
 Dc.l $7fd87700,$00003c60,$60603c18,$30183c66 ;18ea
 Dc.l $7e603c00,$0c183c66,$7e603c00,$18663c66 ;18fa
 Dc.l $7e603c00,$66003c66,$7e603c00,$30180018 ;190a
 Dc.l $18180c00,$0c180018,$18180c00,$18660018 ;191a
 Dc.l $18180c00,$00660018,$18180c00,$60fc183c ;192a
 Dc.l $66663c00,$718e007c,$66666600,$3018003c ;193a
 Dc.l $66663c00,$0c18003c,$66663c00,$1866003c ;194a
 Dc.l $66663c00,$718e003c,$66663c00,$0066003c ;195a
 Dc.l $66663c00,$0018007e,$00180000,$00027cce ;196a
 Dc.l $d6e67c80,$30180066,$66663e00,$0c180066 ;197a
 Dc.l $66663e00,$18660066,$66663e00,$00660066 ;198a
 Dc.l $66663e00,$0c180066,$663c1830,$60607c66 ;199a
 Dc.l $667c6060,$00660066,$663c1830 ;19aa

.do_GetHexAdr:
    MOVEA.L D0,A1           ;19b6: 2240
LAB_0160:
    LEA     str_hexdigits(PC),A0     ;19b8: 41faf460
    CMPI.B  #$01,D1         ;19bc: 0c010001
    BEQ.S   LAB_0163        ;19c0: 670e
LAB_0161:
    CMPI.B  #$02,D1         ;19c2: 0c010002
    BEQ.S   LAB_0165        ;19c6: 670c
    MOVE.L  (A1),D0         ;19c8: 2011
LAB_0162:
    MOVEQ   #7,D7           ;19ca: 7e07
    BRA.W   LAB_016D        ;19cc: 6000003c
LAB_0163:
    MOVE.B  (A1),D0         ;19d0: 1011
LAB_0164:
    BRA.S   LAB_0168        ;19d2: 601a
LAB_0165:
    MOVE.W  (A1),D0         ;19d4: 3011
    BRA.S   LAB_016C        ;19d6: 602e
do_GetHex:
    LEA     str_hexdigits(PC),A0     ;19d8: 41faf440
    CMPI.B  #$01,D1         ;19dc: 0c010001
LAB_0167:
    BEQ.S   LAB_0168        ;19e0: 670c
    CMPI.B  #$02,D1         ;19e2: 0c010002
    BEQ.S   LAB_016C        ;19e6: 671e
    MOVEQ   #7,D7           ;19e8: 7e07
    BRA.W   LAB_016D        ;19ea: 6000001e
LAB_0168:
    MOVE.B  D0,D1           ;19ee: 1200
LAB_0169:
    ASR.B   #4,D0           ;19f0: e800
LAB_016A:
    ANDI.W  #$000f,D0       ;19f2: 0240000f
    MOVE.B  0(A0,D0.W),(A3)+    ;19f6: 16f00000
    ANDI.W  #$000f,D1       ;19fa: 0241000f
    MOVE.B  0(A0,D1.W),(A3)+    ;19fe: 16f01000
LAB_016B:
    MOVEQ   #2,D0           ;1a02: 7002
    RTS             ;1a04: 4e75
LAB_016C:
    MOVEQ   #3,D7           ;1a06: 7e03
    SWAP    D0          ;1a08: 4840
LAB_016D:
    MOVE.L  D0,D2           ;1a0a: 2400
    MOVE.L  D7,D0           ;1a0c: 2007
LAB_016E:
    ADDQ.L  #1,D0           ;1a0e: 5280
LAB_016F:
    ROL.L   #4,D2           ;1a10: e99a
    MOVE.B  D2,D1           ;1a12: 1202
    ANDI.W  #$000f,D1       ;1a14: 0241000f
    MOVE.B  0(A0,D1.W),(A3)+    ;1a18: 16f01000
    DBF D7,LAB_016F     ;1a1c: 51cffff2
    RTS             ;1a20: 4e75

.do_GetProgMode:             ; D0.w : mode, D1.l : buffer
    MOVEA.L D1,A1           ;1a22: 2241
    TST.W   D0              ;1a24: 4a40
    BMI.S   LAB_0172        ;1a26: 6b08
LAB_0171:
    BEQ.S   LAB_0173        ;1a28: 670c
    LEA     str_QAMIGA(PC),A0     ;1a2a: 41fa001c
    BRA.S   LAB_0174        ;1a2e: 600a
LAB_0172:
    LEA     str_BLITZ(PC),A0     ;1a30: 41fa0022
    BRA.S   LAB_0174        ;1a34: 6004
LAB_0173:
    LEA     str_AMIGA(PC),A0     ;1a36: 41fa0016
LAB_0174:
    MOVE.B  (A0)+,(A1)+     ;1a3a: 12d8
    MOVE.B  (A0)+,(A1)+     ;1a3c: 12d8
    MOVE.B  (A0)+,(A1)+     ;1a3e: 12d8
    MOVE.B  (A0)+,(A1)+     ;1a40: 12d8
    MOVE.B  (A0)+,(A1)+     ;1a42: 12d8
    MOVE.B  (A0)+,(A1)+     ;1a44: 12d8
    RTS

str_QAMIGA:  Dc.b "QAMIGA"
str_AMIGA:   Dc.b "AMIGA "
str_BLITZ:   Dc.b "BLITZ "

.do_GetCustomReg:
    CMPI.W  #$01fc,D0       ;extreme value check (508)
    BLE.S   LAB_0179
    MOVEQ   #0,D0
    RTS
LAB_0179:
    TST.L   D0
    BPL.S   LAB_017A
    MOVEQ   #0,D0
    RTS
LAB_017A:
    ASL.W   #2,D0           ;1a6c: e540
    LEA     CustomRegNameTable(PC),A0     ;1a6e: 41fa017a
    ADDA.W  D0,A0           ;1a72: d0c0
    MOVEQ   #-1,D0          ;1a74: 70ff
LAB_017B:
    ADDQ.L  #1,D0           ;1a76: 5280
    CMPI.B  #$20,(A0)       ;1a78: 0c100020
    BEQ.W   LAB_017C        ;1a7c: 6700000a
    MOVE.B  (A0)+,(A3)+     ;1a80: 16d8
    CMPI.B  #$08,D0         ;1a82: 0c000008
    BNE.S   LAB_017B        ;1a86: 66ee
LAB_017C:
    RTS

.do_GetCustomRegAdr:        ; D0: stringpointer
    MOVE.L  D0,D1
    LEA     CustomRegNameTable(PC),A1
    MOVEQ   #0,D0           ;1a90: 7000
LAB_017E:
    MOVEA.L D1,A0           ;1a92: 2041
    MOVEA.L A1,A2           ;1a94: 2449
LAB_017F:
    CMPI.B  #$20,(A2)       ;1a96: 0c120020
    BEQ.S   LAB_0180        ;1a9a: 6710
    CMPM.B  (A0)+,(A2)+     ;1a9c: b508
    BEQ.S   LAB_017F        ;1a9e: 67f6
    ADDQ.L  #8,A1           ;1aa0: 5089
    ADDQ.L  #2,D0           ;1aa2: 5480
    CMPI.W  #$01fc,D0       ;508
    BLE.S   LAB_017E        ;1aa8: 6fe8
    MOVEQ   #-1,D0          ;1aaa: 70ff
LAB_0180:
    RTS

.do_GetCopIns:                ; D0: copdata
    MOVEA.L D0,A0           ;1aae: 2040
    MOVE.W  (A0)+,D0        ;1ab0: 3018
    SWAP    D0          ;1ab2: 4840
    MOVE.W  (A0)+,D0        ;1ab4: 3018
    SWAP    D0          ;1ab6: 4840
    BTST    #0,D0           ;1ab8: 08000000
    BEQ.W   LAB_0186        ;1abc: 670000c8
    BTST    #16,D0          ;1ac0: 08000010
    BEQ.S   LAB_0182        ;1ac4: 6716
    MOVE.B  #$53,(A3)+      ;1ac6: 16fc0053  ; "SKIP "
    MOVE.B  #$4b,(A3)+      ;1aca: 16fc004b
    MOVE.B  #$49,(A3)+      ;1ace: 16fc0049
    MOVE.B  #$50,(A3)+      ;1ad2: 16fc0050
    MOVE.B  #$20,(A3)+      ;1ad6: 16fc0020
    BRA.S   LAB_0183        ;1ada: 6014
LAB_0182:
    MOVE.B  #$57,(A3)+      ;1adc: 16fc0057  ; "WAIT "
    MOVE.B  #$41,(A3)+      ;1ae0: 16fc0041
    MOVE.B  #$49,(A3)+      ;1ae4: 16fc0049
    MOVE.B  #$54,(A3)+      ;1ae8: 16fc0054
    MOVE.B  #$20,(A3)+      ;1aec: 16fc0020
LAB_0183:
    LEA str_hexdigits(PC),A2     ;1af0: 45faf328
    MOVE.L  D0,D1           ;1af4: 2200
    BSR.W   LAB_0185        ;1af6: 61000048
    MOVE.B  #$20,(A3)+      ;1afa: 16fc0020  ; " MASK "
    MOVE.B  #$4d,(A3)+      ;1afe: 16fc004d
    MOVE.B  #$41,(A3)+      ;1b02: 16fc0041
    MOVE.B  #$53,(A3)+      ;1b06: 16fc0053
    MOVE.B  #$4b,(A3)+      ;1b0a: 16fc004b
    MOVE.B  #$20,(A3)+      ;1b0e: 16fc0020
    SWAP    D1          ;1b12: 4841
    BSR.W   LAB_0185        ;1b14: 6100002a
    MOVE.L  #$00000019,D0       ;1b18: 203c00000019
    BTST    #15,D1          ;1b1e: 0801000f
    BEQ.S   LAB_0184        ;1b22: 671a
    MOVE.B  #$20,(A3)+      ;1b24: 16fc0020  ; " [BFD]"
    MOVE.B  #$5b,(A3)+      ;1b28: 16fc005b
    MOVE.B  #$42,(A3)+      ;1b2c: 16fc0042
    MOVE.B  #$46,(A3)+      ;1b30: 16fc0046
    MOVE.B  #$44,(A3)+      ;1b34: 16fc0044
    MOVE.B  #$5d,(A3)+      ;1b38: 16fc005d
    ADDQ.W  #6,D0           ;1b3c: 5c40
LAB_0184:
RTS             ;1b3e: 4e75

LAB_0185:
    MOVE.B  #$28,(A3)+      ;1b40: 16fc0028
    MOVE.B  D1,D0           ;1b44: 1001
    ROR.B   #4,D0           ;1b46: e818
    ANDI.L  #$0000000e,D0       ;1b48: 02800000000e
    MOVE.B  0(A2,D0.W),(A3)+    ;1b4e: 16f20000
    MOVE.B  D1,D0           ;1b52: 1001
    ANDI.L  #$0000000e,D0       ;1b54: 02800000000e
    MOVE.B  0(A2,D0.W),(A3)+    ;1b5a: 16f20000
    MOVE.B  #$2c,(A3)+      ;1b5e: 16fc002c
    MOVE.W  D1,D0           ;1b62: 3001
    ASR.W   #8,D0           ;1b64: e040
    ROR.B   #4,D0           ;1b66: e818
    ANDI.L  #$0000000f,D0       ;1b68: 02800000000f
    MOVE.B  0(A2,D0.W),(A3)+    ;1b6e: 16f20000
    MOVE.W  D1,D0           ;1b72: 3001
    ASR.W   #8,D0           ;1b74: e040
    ANDI.L  #$0000000f,D0       ;1b76: 02800000000f
    MOVE.B  0(A2,D0.W),(A3)+    ;1b7c: 16f20000
    MOVE.B  #$29,(A3)+      ;1b80: 16fc0029
RTS             ;1b84: 4e75

LAB_0186:
    MOVE.B  #$4d,(A3)+      ;1b86: 16fc004d            ; "MOVE "
    MOVE.B  #$4f,(A3)+      ;1b8a: 16fc004f
    MOVE.B  #$56,(A3)+      ;1b8e: 16fc0056
    MOVE.B  #$45,(A3)+      ;1b92: 16fc0045
    MOVE.B  #$20,(A3)+      ;1b96: 16fc0020
    MOVE.L  D0,D1           ;1b9a: 2200
    SWAP    D0          ;1b9c: 4840
    ANDI.L  #$0000ffff,D0       ;1b9e: 02800000ffff
    LEA     str_hexdigits(PC),A2     ;1ba4: 45faf274
    MOVEQ   #3,D3           ;1ba8: 7603
    LAB_0187:
        ROL.W   #4,D0           ;1baa: e958
        MOVE.W  D0,D2           ;1bac: 3400
        ANDI.W  #$000f,D2       ;1bae: 0242000f
        MOVE.B  0(A2,D2.W),(A3)+    ;1bb2: 16f22000
    DBF     D3,LAB_0187     ;1bb6: 51cbfff2
    MOVE.B  #$20,(A3)+      ;1bba: 16fc0020            ; " to "
    MOVE.B  #$74,(A3)+      ;1bbe: 16fc0074
    MOVE.B  #$6f,(A3)+      ;1bc2: 16fc006f
    MOVE.B  #$20,(A3)+      ;1bc6: 16fc0020
    LEA     CustomRegNameTable(PC),A0     ;1bca: 41fa001e
    MOVE.L  D1,D0           ;1bce: 2001
    ANDI.L  #$000001ff,D0       ;1bd0: 0280000001ff
    ASL.W   #2,D0           ;1bd6: e540
    ADDA.L  D0,A0           ;1bd8: d1c0
    MOVEQ   #7,D0           ;1bda: 7007
LAB_0188:
    MOVE.B  (A0)+,(A3)+     ;1bdc: 16d8
    DBF D0,LAB_0188     ;1bde: 51c8fffc
    MOVE.L  #$00000015,D0       ;1be2: 203c00000015
RTS             ;1be8: 4e75

; =====================================================================================================
CustomRegNameTable:
    Dc.b "BLTDDAT "
    Dc.b "DMACONR "
    Dc.b "VPOSR   "
    Dc.b "VHPOSR  "
    Dc.b "DSKDATR "
    Dc.b "JOY0DAT "
    Dc.b "JOY1DAT "
    Dc.b "CLXDAT  "
    Dc.b "ADKCONR "
    Dc.b "POT0DAT "
    Dc.b "POT1DAT "
    Dc.b "POTINP  "
    Dc.b "SERDATR "
    Dc.b "DSKBYTR "
    Dc.b "INTENAR "
    Dc.b "INTREQR "
    Dc.b "DSKPTH  "
    Dc.b "DSKPTL  "
    Dc.b "DSKLEN  "
    Dc.b "DSKDAT  "
    Dc.b "REFPTR  "
    Dc.b "VPOSW   "
    Dc.b "VHPOSW  "
    Dc.b "COPCON  "
    Dc.b "SERDAT  "
    Dc.b "SERPER  "
    Dc.b "POTGO   "
    Dc.b "JOYTEST "
    Dc.b "STR     "
    Dc.b "STRVBL  "
    Dc.b "STRHOR  "
    Dc.b "STRLONG "
    Dc.b "BLTCON0 "
    Dc.b "BLTCON1 "
    Dc.b "BLTAFWM "
    Dc.b "BLTALWM "
    Dc.b "BLTCPTH "
    Dc.b "BLTCPTL "
    Dc.b "BLTBPTH "
    Dc.b "BLTBPTL "
    Dc.b "BLTAPTH "
    Dc.b "BLTAPTL "
    Dc.b "BLTDPTH "
    Dc.b "BLTDPTL "
    Dc.b "BLTSIZE "
    Dc.b "BLTCON0L"
    Dc.b "BLTSIZV "
    Dc.b "BLTSIZH "
    Dc.b "BLTCMOD "
    Dc.b "BLTBMOD "
    Dc.b "BLTAMOD "
    Dc.b "BLTDMOD "
    Dc.b "<UNUSED>"
    Dc.b "<UNUSED>"
    Dc.b "<UNUSED>"
    Dc.b "<UNUSED>"
    Dc.b "BLTCDAT "
    Dc.b "BLTBDAT "
    Dc.b "BLTADAT "
    Dc.b "<UNUSED>"
    Dc.b "SPRHDAT "
    Dc.b "<UNUSED>"
    Dc.b "DENISEID"
    Dc.b "DSKSYNC "
    Dc.b "COP1LCH "
    Dc.b "COP1LCL "
    Dc.b "COP2LCH "
    Dc.b "COP2LCL "
    Dc.b "COPJMP1 "
    Dc.b "COPJMP2 "
    Dc.b "COPINS  "
    Dc.b "DIWSTRT "
    Dc.b "DIWSTOP "
    Dc.b "DDFSTRT "
    Dc.b "DDFSTOP "
    Dc.b "DMACON  "
    Dc.b "CLXCON  "
    Dc.b "INTENA  "
    Dc.b "INTREQ  "
    Dc.b "ADKCON  "
    Dc.b "AUD0LCH "
    Dc.b "AUD0LCL "
    Dc.b "AUD0LEN "
    Dc.b "AUD0PER "
    Dc.b "AUD0VOL "
    Dc.b "AUD0DAT "
    Dc.b "<UNUSED>"
    Dc.b "<UNUSED>"
    Dc.b "AUD1LCH "
    Dc.b "AUD1LCL "
    Dc.b "AUD1LEN "
    Dc.b "AUD1PER "
    Dc.b "AUD1VOL "
    Dc.b "AUD1DAT "
    Dc.b "<UNUSED>"
    Dc.b "<UNUSED>"
    Dc.b "AUD2LCH "
    Dc.b "AUD2LCL "
    Dc.b "AUD2LEN "
    Dc.b "AUD2PER "
    Dc.b "AUD2VOL "
    Dc.b "AUD2DAT "
    Dc.b "<UNUSED>"
    Dc.b "<UNUSED>"
    Dc.b "AUD3LCH "
    Dc.b "AUD3LCL "
    Dc.b "AUD3LEN "
    Dc.b "AUD3PER "
    Dc.b "AUD3VOL "
    Dc.b "AUD3DAT "
    Dc.b "<UNUSED>"
    Dc.b "<UNUSED>"
    Dc.b "BPL0PTH "
    Dc.b "BPL0PTL "
    Dc.b "BPL1PTH "
    Dc.b "BPL1PTL "
    Dc.b "BPL2PTH "
    Dc.b "BPL2PTL "
    Dc.b "BPL3PTH "
    Dc.b "BPL3PTL "
    Dc.b "BPL4PTH "
    Dc.b "BPL4PTL "
    Dc.b "BPL5PTH "
    Dc.b "BPL5PTL "
    Dc.b "BPL6PTH "
    Dc.b "BPL6PTL "
    Dc.b "BPL7PTH "
    Dc.b "BPL7PTL "
    Dc.b "BPLCON0 "
    Dc.b "BPLCON1 "
    Dc.b "BPLCON2 "
    Dc.b "BPLCON3 "
    Dc.b "BPL1MOD "
    Dc.b "BPL2MOD "
    Dc.b "BPLCON4 "
    Dc.b "CLXCON2 "
    Dc.b "BPLDAT0 "
    Dc.b "BPLDAT1 "
    Dc.b "BPLDAT2 "
    Dc.b "BPLDAT3 "
    Dc.b "BPLDAT4 "
    Dc.b "BPLDAT5 "
    Dc.b "BPLDAT6 "
    Dc.b "BPLDAT7 "
    Dc.b "SPR0PTH "
    Dc.b "SPR0PTL "
    Dc.b "SPR1PTH "
    Dc.b "SPR1PTL "
    Dc.b "SPR2PTH "
    Dc.b "SPR2PTL "
    Dc.b "SPR3PTH "
    Dc.b "SPR3PTL "
    Dc.b "SPR4PTH "
    Dc.b "SPR4PTL "
    Dc.b "SPR5PTH "
    Dc.b "SPR5PTL "
    Dc.b "SPR6PTH "
    Dc.b "SPR6PTL "
    Dc.b "SPR7PTH "
    Dc.b "SPR7PTL "
    Dc.b "SPR0POS "
    Dc.b "SPR0CTL "
    Dc.b "SPR0DATA"
    Dc.b "SPR0DATB"
    Dc.b "SPR1POS "
    Dc.b "SPR1CTL "
    Dc.b "SPR1DATA"
    Dc.b "SPR1DATB"
    Dc.b "SPR2POS "
    Dc.b "SPR2CTL "
    Dc.b "SPR2DATA"
    Dc.b "SPR2DATB"
    Dc.b "SPR3POS "
    Dc.b "SPR3CTL "
    Dc.b "SPR3DATA"
    Dc.b "SPR3DATB"
    Dc.b "SPR4POS "
    Dc.b "SPR4CTL "
    Dc.b "SPR4DATA"
    Dc.b "SPR4DATB"
    Dc.b "SPR5POS "
    Dc.b "SPR5CTL "
    Dc.b "SPR5DATA"
    Dc.b "SPR5DATB"
    Dc.b "SPR6POS "
    Dc.b "SPR6CTL "
    Dc.b "SPR6DATA"
    Dc.b "SPR6DATB"
    Dc.b "SPR7POS "
    Dc.b "SPR7CTL "
    Dc.b "SPR7DATA"
    Dc.b "SPR7DATB"
    Dc.b "COLOR00 "
    Dc.b "COLOR01 "
    Dc.b "COLOR02 "
    Dc.b "COLOR03 "
    Dc.b "COLOR04 "
    Dc.b "COLOR05 "
    Dc.b "COLOR06 "
    Dc.b "COLOR07 "
    Dc.b "COLOR08 "
    Dc.b "COLOR09 "
    Dc.b "COLOR10 "
    Dc.b "COLOR11 "
    Dc.b "COLOR12 "
    Dc.b "COLOR13 "
    Dc.b "COLOR14 "
    Dc.b "COLOR15 "
    Dc.b "COLOR16 "
    Dc.b "COLOR17 "
    Dc.b "COLOR18 "
    Dc.b "COLOR19 "
    Dc.b "COLOR20 "
    Dc.b "COLOR21 "
    Dc.b "COLOR22 "
    Dc.b "COLOR23 "
    Dc.b "COLOR24 "
    Dc.b "COLOR25 "
    Dc.b "COLOR26 "
    Dc.b "COLOR27 "
    Dc.b "COLOR28 "
    Dc.b "COLOR29 "
    Dc.b "COLOR30 "
    Dc.b "COLOR31 "
    Dc.b "HTOTAL  "
    Dc.b "HSSTOP  "
    Dc.b "HBSTRT  "
    Dc.b "HBSTOP  "
    Dc.b "VTOTAL  "
    Dc.b "VSSTOP  "
    Dc.b "VBSTRT  "
    Dc.b "VBSTOP  "
    Dc.b "SPRHSTRT"
    Dc.b "SPRHSTOP"
    Dc.b "BPLHSTRT"
    Dc.b "BPLHSTOP"
    Dc.b "HHPOSW  "
    Dc.b "HHPOSR  "
    Dc.b "BEAMCON0"
    Dc.b "HSSTRT  "
    Dc.b "VSSTRT  "
    Dc.b "HCENTER "
    Dc.b "DIWHIGH "
    Dc.b "BPLHMOD "
    Dc.b "SPRHPTH "
    Dc.b "SPRHPTL "
    Dc.b "BPLHPTH "
    Dc.b "BPLHPTL "
    Dc.b "<UNUSED>"
    Dc.b "<UNUSED>"
    Dc.b "<UNUSED>"
    Dc.b "<UNUSED>"
    Dc.b "<UNUSED>"
    Dc.b "<UNUSED>"
    Dc.b "FMODE   "
    Dc.b "NOOP    "

returnString:   Ds.b 1500