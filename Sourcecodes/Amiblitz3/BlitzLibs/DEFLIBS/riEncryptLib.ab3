; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "riEncryptLib.obj"
; CreateIcon      = 0
; Residents       = "libnums.res,libmacs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max Window      = 20
; Max BlitzFont   = 4
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;Encrypt Library by Stephen McNamara
;(c)1994 Reflective Images

;#riencryptlib=55  ; Put this in your Libnums file
                  ; It'll probably change though!

!libheader {#riencryptlib,0,0,0,0}

!astatement
!args {#long,#long}
!libs
!subs {_encrypt2,0,0}
!args {#long,#long,#word,#word,#word}
!libs
!subs {_encrypt,0,0}
!name {"Encrypt","memadr,length,wheel1,wheel2,wheel3"}

!astatement
!args {#long,#long,#word,#word,#word}
!libs
!subs {_decrypt,0,0}
!name {"Decrypt","memadr,length,wheel1,wheel2,wheel3"}

!afunction {#word}
!args {#byte}
!libs
!subs {_getwheel,0,0}
!name {"GetWheel","wheel#"}

!libfin

_encrypt2:
  MOVEM.l     d0-d1,-(a7)

  MOVE.l      #256,d0
  ALibJsr     Rnd
  ALibJsr     Rnd
  MOVE.b      d0,d2

  MOVE.l      #65535,d0
  ALibJsr     Rnd
  ALibJsr     Rnd
  MOVE.b      d0,d3

  MOVE.l      #-1,d0
  ALibJsr     Rnd
  ALibJsr     Rnd
  MOVE.b      d0,d4

  MOVEM.l     (a7)+,d0-d1
._encrypt:
  MOVE.l      d0,a0
  ANDI.l      #$ff,d2
  ANDI.l      #$ff,d3
  ANDI.l      #$ff,d4

  SUBQ.l      #1,d1
'loop
  ADDQ.b      #1,d2
  BCC         'okok

  ADDQ.b      #1,d3
  BCC         'okok

  ADDQ.b      #1,d4
'okok:
  MOVE.b      (a0),d0
  ADD.b       d2,d0
  ADD.b       d3,d0
  ADD.b       d4,d0

  MOVE.b      d0,(a0)+

  SUBQ.l      #1,d1
  BPL         'loop

  MOVE.b      d2,wheels
  MOVE.b      d3,wheels+1
  MOVE.b      d4,wheels+2
  RTS

._decrypt
  MOVE.l      d0,a0
  ANDI.l      #$ff,d2
  ANDI.l      #$ff,d3
  ANDI.l      #$ff,d4

  SUBQ.l      #1,d1
  ADD.l       d1,a0
'loop
  MOVE.b      (a0),d0
  SUB.b       d2,d0
  SUB.b       d3,d0
  SUB.b       d4,d0

  MOVE.b      d0,(a0)
  SUBQ.l      #1,a0

  SUBQ.b      #1,d2
  BCC         'okok

  SUBQ.b      #1,d3
  BCC         'okok

  SUBQ.b      #1,d4
'okok:
  SUBQ.l      #1,d1
  BPL         'loop

  MOVE.b      d2,wheels
  MOVE.b      d3,wheels+1
  MOVE.b      d4,wheels+2
  RTS

._getwheel:
  MOVE.b      d0,d1
  MOVEQ.l     #0,d0

  CMPI.b      #1,d1
  BNE         'n1
  MOVE.b      wheels,d0
  RTS
'n1:
  CMPI.b      #2,d1
  BNE         'n2
  MOVE.b      wheels+1,d0
  RTS
'n2:
  CMPI.b      #3,d1
  BNE         'endthis
  MOVE.b      wheels+2,d0
  RTS
'endthis:
  MOVEQ.l     #-1,d0
  RTS

wheels:
  Dcb.b       3,0
  Even
  Dc.b        "$VERS:Version 0.1 (C)1994 Reflective Images",0

