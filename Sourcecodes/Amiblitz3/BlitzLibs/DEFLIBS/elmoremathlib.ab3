.MATH

;
; #elmoremathlib=105  (rev bum6)
;

Macro pushreg:MOVE.l `1,-(a7):End Macro
Macro pullreg:MOVE.l (a7)+,`1:End Macro
Macro pushregs:MOVEM.l `1,-(a7):End Macro
Macro pullregs:MOVEM.l (a7)+,`1:End Macro
Macro error:MOVE.l #`1,d0:TRAP#0:`1:Dc.b `2,0:Even:End Macro

#audiovol=$dff0a8
#audioper=$dff0a6

!libheader{#elmoremathlib,0,0,0,0}

!afunction{#long}
!args{#long,#long}
!libs
!subs{_xor,0,0}
!name{"Xor","(expression,expression) ;Returns Exclusive OR of two expressions"}


;Comparitive functions

!afunction{#long}
!args{#long,#long}
!libs
!subs {_bigger,0,0}
!name {"Largest.l","(Long Integer1,Long Integer2)"}

!afunction{#long}
!args{#long,#long}
!libs
!subs {_smaller,0,0}
!name {"Smallest.l","(Long Integer1,Long Integer2)"}


!afunction{#quick}
!args{#quick,#quick}
!libs
!subs {_bigger,0,0}
!name {"Largest.q","(Quick1,Quick2)"}

!afunction{#quick}
!args{#quick,#quick}
!libs
!subs {_smaller,0,0}
!name {"Smallest.q","(Quick1,Quick2)"}


!afunction{#word}
!args{#word,#word}
!libs
!subs {_wbigger,0,0}
!name {"Largest","(Integer1,Integer2)"}

!afunction{#word}
!args{#word,#word}
!libs
!subs {_wsmaller,0,0}
!name {"Smallest","(Integer1,Integer2)"}



;Quick math functions:


!afunction{#long}
!args{#long,#long}
!libs
!subs {_avg,0,0}
!name {"Avg.l","(Long Integer 1,Long Integer 2)"}

!afunction{#quick}
!args{#quick,#quick}
!libs
!subs {_avg,0,0}
!name {"Avg.q","(Quick1,Quick2)"}

!afunction{#word}
!args{#word,#word}
!libs
!subs {_wavg,0,0}
!name {"Avg","(Integer1,Integer2)"}



;Reproducible random number generation:

!astatement
!args{#long}
!libs
!subs{_randomize,0,0}
!name {"RRandomize","Seed"}


!afunction{#long}
!args {#long,#long}
!libs
!subs{_random,0,0}
!name {"RRnd","(Low,High)"}


!afunction{#long}
!args{#string}
!libs
!subs{_hdec,0,0}
!name{"Hex#","(HexString$) ;Converts hexadecimal (in string) value to decimal"}


!afunction{#long}
!args{#string}
!libs
!subs{_bdec,0,0}
!name{"Bin#","(BinString$) ;Converts binary value (in string) to decimal"}





!libfin


._bigger
CMP.l d1,d0
BGT biggerend
MOVE.l d1,d0
biggerend
RTS

._smaller
CMP.l d0,d1
BGT smallerend
MOVE.l d1,d0
smallerend
RTS

_wbigger
CMP.w d1,d0
BGT wbiggerend
MOVE.w d1,d0
wbiggerend
RTS

_wsmaller
CMP.w d0,d1
BGT wsmallerend
MOVE.w d1,d0
wsmallerend
RTS


._avg
ADD.l d1,d0
ASR.l #1,d0
RTS

_wavg
ADD.w d1,d0
ASR.w #1,d0
RTS






;Set random's seed
._randomize
ADD.l d1,d0
MOVEM.l d0/d1,numrnd




._rrndl

!pushregs{d2-d3}
MOVEM.l numrnd,d0/d1    ;   d0=LSB's, d1=MSB's of random number
ANDI.b  #$0E,d0      ;   ensure upper 59 bits are an...
ORI.b   #$20,d0      ;   ...odd binary number
MOVE.l  d0,d2
MOVE.l  d1,d3
ADD.l   d2,d2        ;   accounts for 1 of 17 left shifts
ADDX.l  d3,d3        ;   [d2/d3] = RND*2
ADD.l   d2,d0
ADDX.l  d3,d1        ;   [d0/d1] = RND*3
SWAP    d3           ;   shift [d2/d3] additional 16 times
SWAP    d2
MOVE.w  d2,d3
CLR.w   d2
ADD.l   d2,d0        ;   add to [d0/d1]
ADDX.l  d3,d1
MOVEM.l d0/d1,numrnd ;   save for next time through
MOVE.l  d1,d0        ;   most random part to d0
!pullregs{d2-d3}
RTS

._random
!pushregs{d1-d3}
ADDQ #1,d1
SUB.w d0,d1          ;   calc. difference from low to high

BEQ     random2      ;   range of 0 returns 0 always
MOVE.w  d1,d2        ;   save upper limit
MOVE.w  d0,d3        ;   save difference

BSR     _rrndl       ;   get a longword random number
CLR.w   d0           ;   use upper word (it's most random)
SWAP    d0
DIVU.w  d2,d0        ;   divide by range...

CLR.w   d0           ;   ...and use remainder for the value
SWAP    d0           ;   result in d0.w

ADD.w d3,d0          ;   add difference back on

random2
!pullregs{d1-d3}

RTS

._xor
EOR.l d1,d0
RTS


._hdec

;A0=Points to current char in our string
;D0=Current decimal value
;D1=No. characters left till end of string
;D2=Current byte

MOVE.l d0,a0
MOVE.l -4(a2),d1
CLR.l d0

;strip leading zeros:
hexstripzero:
CMP.b #48,(a0)
BNE hex2
ADDQ.l #1,a0
DBRA d1,hexstripzero
RTS


hex2:
CLR.l d2

parsehex:
MOVE.b (a0)+,d2
BSR bytetohex

;Any digits with bit 4 (16) mean STOP!!
BTST.b #4,d2
BEQ morehex
RTS


morehex:
TST.l d1
BEQ hex3

LSL.l #4,d0

hex3:

ADD.l d2,d0
DBRA d1,parsehex

hexret:
RTS

bytetohex:
SUB.b #48,d2

CMP.b #9,d2
BLS hexret

;Uppercase?
SUB.b #7,d2
CMP.b #15,d2
BLS hexret

;Lowercase?
SUB.b #32,d2
CMP.b #15,d2
BLS hexret

;Bad digit:  Set bit 4!

MOVE.b #16,d2

RTS


._bdec
;A0=Points to current char in our string
;D0=Current decimal value
;D1=No. characters left till end of string
;D2=Current byte

MOVE.l d0,a0
MOVE.l -4(a2),d1
CLR.l d0

;strip leading zeros:
binstripzero:
CMP.b #48,(a0)
BNE bin2
ADDQ.l #1,a0
DBRA d1,binstripzero
RTS


bin2:
CLR.l d2

parsebin:
MOVE.b (a0)+,d2

;is it a "1"?
CMP.b #49,d2
BNE binisit0
MOVEQ #1,d2:BRA morebin

binisit0:
CMP.b #48,d2
BNE binret
CLR.b d2
BRA morebin
RTS

morebin:
TST.l d1
BEQ bin3

LSL.l #1,d0

bin3:

ADD.l d2,d0
DBRA d1,parsebin

binret:
RTS






numrnd:
Ds.l 2

