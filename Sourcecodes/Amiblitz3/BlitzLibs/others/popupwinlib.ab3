; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "blitzlibs:userlibs"
; ExeFile         = "popupwinlib.obj"
; CreateIcon      = 0
; Residents       = "blitzlibs:amigalibs.res,blitzlibs:asmmacs.res,blitzlibs:asm.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 63
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 5
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
; Reflective Images library
; (C)1994

#GADTOOLS             = 0
#_CreateGadgetA       = -30
#_FreeGadgets         = -36
#_GT_SetGadgetAttrsA  = -42
#_CreateMenusA        = -48
#_FreeMenus           = -54
#_LayoutMenuItemsA    = -60
#_LayoutMenusA        = -66
#_GT_GetIMsg          = -72
#_GT_ReplyIMsg        = -78
#_GT_RefreshWindow    = -84
#_GT_BeginRefresh     = -90
#_GT_EndRefresh       = -96
#_GT_FilterIMsg       = -102
#_GT_PostFilterIMsg   = -108
#_CreateContext       = -114
#_DrawBevelBoxA       = -120
#_GetVisualInfoA      = -126
#_FreeVisualInfo      = -132

;Rastport info:
#RP_JAM1              =0
#RP_JAM2              =1
#RP_COMPLEMENT        =2

#succ            = 0
#name            = 4
#shap            = 8
#id              = 10
#subs            = 12
#cmd             = 16
#fullname        = 20

;Structure for holding current windows variables
#PARENT          = 0
#IMAGEWIDTH      = 4
#ITEMHEIGHT      = 6
#NUMITEMS        = 8
#ITEMS           = 10
#TEXTYOFFSET     = 14
#WINWIDTH        = 16
#ACTIVEITEM      = 18       ; pointer to currently highlighted item
#ACTIVEYPOS      = 22       ; index number of highlighted item
#WINDOWPTR       = 24
#WINX            = 28
#WINY            = 30
#POPUPDELAY      = 32
#WINHEIGHT       = 34
#EXITVAL         = 36
#STRUCT_SIZEOF   = 64

INCDIR "BlitzLibs:"
XINCLUDE "libmacs.bb"
#popupwinlib=24
!libheader {#popupwinlib,init,0,finit,0}

!astatement
!args {#word}
!libs
!subs {_popupinit,0,0}
!name {"PopUpInit","-- initialise the popup window system"}

!astatement
!args {#word,#long}
!libs {#screenslib,#ia0|#pd0}
!subs {_dopopup,0,0}
!name {"PopUpWindow","Screen#,*items"}

finit:!nullsub{_libfinit,0,0}
init: !nullsub{_libinit,0,0}

!libfin

_libinit:
  MOVE.l      4,a6

  LEA         intuiname(pc),a1
  MOVEQ       #0,d0
  JSR         _OpenLibrary(a6)
  MOVE.l      d0,intuibase

  LEA         gfxname(pc),a1
  MOVEQ       #0,d0
  JSR         _OpenLibrary(a6)
  MOVE.l      d0,gfxbase

  CNIF        #GADTOOLS = 1
  LEA         gadname(pc),a1
  MOVEQ       #0,d0
  JSR         _OpenLibrary(a6)
  MOVE.l      d0,gadtoolsbase
  CEND

  BSR         WindowInit
  RTS

_libfinit:
  BSR         WindowFinit

  MOVE.l      4,a6

  MOVE.l      intuibase(pc),a1
  JSR         _CloseLibrary(a6)

  MOVE.l      gfxbase(pc),a1
  JSR         _CloseLibrary(a6)

  CNIF        #GADTOOLS = 1
  MOVE.l      gadtoolsbase(pc),a1
  JSR         _CloseLibrary(a6)
  CEND

  RTS

intuiname:    Dc.b  "intuition.library",0
gadname:      Dc.b  "gadtools.library",0
gfxname:      Dc.b  "graphics.library",0

intuibase:    Dc.l  0
gfxbase:      Dc.l  0
gadtoolsbase: Dc.l  0


._popupinit:
  BSR         WindowInit
  RTS

;====================================================================
;a0=screen
;d1=items
;====================================================================
._dopopup:
  MOVEM.l     a3-a6,-(a7)
  MOVE.l      d1,-(a7)
  MOVE.l      (a0),myscreen

  BSR         inittemprast

  CLR.l       selecteditem

  MOVE.l      (a7)+,a0              ; get the items
  SUB.l       a1,a1
  MOVEQ       #0,d0
  MOVEQ       #0,d1
  BSR         DoPop

  MOVE.l      selecteditem(pc),d0
  MOVEM.l     (a7)+,a3-a6
  RTS


;a0=items
;a1=parent
;d0=x
;d1=y
;Returns: d0=Window that should be considered the 'active one' now OR
;            0 meaning that the system should be closed.
DoPop:
  MOVEM.l     d0-d1,-(a7)
  BSR         AllocStruct

  BSR         CalcWinSize
  MOVE.l      d0,d2
  MOVE.l      d1,d3

  MOVEQ       #0,d4       ; window #
  MOVEM.l     (a7)+,d0-d1
  MOVE.w      d0,WINX(a5)
  MOVE.w      d1,WINY(a5)
  BSR         newpopupwin
  TST.l       d0
  BEQ         'theend

;store the window
  MOVE.l      d0,WINDOWPTR(a5)
  MOVE.l      d0,a0
  BSR         BevelWindow
  BSR         DrawItems
'waithit:
  TST.w       POPUPDELAY(a5)
  BNE       'dowait
  MOVE.l      a5,-(a7)
  MOVE.l      a5,a1
  MOVE.l      ACTIVEITEM(a5),a0
  MOVE.l      subs(a0),a0
  MOVEQ       #0,d0
  MOVEQ       #0,d1

  MOVE.w      WINX(a5),d0
  ADD.w       WINWIDTH(a5),d0
  MOVE.w      WINY(a5),d1
  ADD.w       ACTIVEYPOS(a5),d1
  SUBQ.w      #2,d1

  BSR         DoPop
  MOVE.l      (a7)+,a5
  MOVE.w      #1,POPUPDELAY(a5)
  TST.l       d0              ; close everthing?
  BEQ         'close
  CMP.l       a5,d0
  BEQ       'check
  CMP.l       PARENT(a5),d0
  BEQ       'check
;not the parent or us so return to our parent
  BRA         'close
'check:
  MOVE.l      #IDCMP_MOUSEMOVE,d0
  BRA         'checkmouse

'dowait:
  BSR         WaitWinEvent

'checkmouse:
  CMP.l       #IDCMP_MOUSEMOVE,d0
  BNE         'nextevent
  BSR         MouseMove
  MOVE.l      EXITVAL(a5),d0
  BMI         'waithit
  BRA         'close

'nextevent:
  CMP.l       #IDCMP_MOUSEBUTTONS,d0
  BNE         'waithit
  MOVE.l      ACTIVEITEM(a5),d0
'close:
  MOVE.l      d0,-(a7)
  MOVE.l      WINDOWPTR(a5),d0
  BSR         CloseWin
  MOVE.l      (a7)+,d0
'theend:
  MOVE.l      d0,-(a7)
  BSR         DeAllocStruct
  MOVE.l      (a7)+,d0
  RTS

.MouseMove:
  BSR         findmousewindow

  TST.l       d0
  BEQ         'clearactive

  CMP.l       d0,a5
  BEQ         'handleme

  CMP.l       PARENT(a5),d0
  BNE         'exitlevel

  MOVE.l      a5,-(a7)
  MOVE.l      d0,a5
  BSR         findmouseitem
  MOVE.l      a5,a4
  MOVE.l      (a7)+,a5
  CMP.l       ACTIVEITEM(a4),a0
  BEQ         'clearactive
  MOVE.l      a4,EXITVAL(a5)        ; return to our parent
  RTS

'exitlevel:
  MOVE.l      d0,EXITVAL(a5)
  RTS

'handleme:
  BSR         findmouseitem

  CMP.l       #0,a0
  BEQ         'clearactive

  CMP.l       ACTIVEITEM(a5),a0
  BEQ       'ret

  TST.l       ACTIVEITEM(a5)
  BEQ       'nope

  MOVEM.l     d1/a0,-(a7)
  MOVEQ       #0,d0
  BSR         drawactiveitem
  MOVEM.l     (a7)+,d1/a0
'nope:
  TST.l       subs(a0)
  BEQ       'nosubs
  CLR.w       POPUPDELAY(a5)
'nosubs:
  MOVE.l      a0,ACTIVEITEM(a5)
  MOVE.w      d1,ACTIVEYPOS(a5)

  MOVEQ       #3,d0
  BSR         drawactiveitem
  RTS

'clearactive:
  TST.l       ACTIVEITEM(a5)
  BEQ       'ret
  MOVEQ       #0,d0
  BSR         drawactiveitem
  CLR.l       ACTIVEITEM(a5)
'none:
'ret:
  RTS

;d0=background pen colour
.drawactiveitem:
  MOVE.l      WINDOWPTR(a5),a4
  MOVE.l      50(a4),a1
  MOVE.l      gfxbase(pc),a6
  JSR         _SetAPen(a6)

  MOVE.l      50(a4),a1
  MOVEQ       #1,d0
  MOVE.w      ACTIVEYPOS(a5),d1
  MOVEQ       #-2,d2
  ADD.w       WINWIDTH(a5),d2
  MOVE.w      d1,d3
  ADD.w       ITEMHEIGHT(a5),d3
  SUBQ.w      #1,d3
  JSR         _RectFill(a6)

  MOVE.l      50(a4),a1
  MOVEQ       #1,d0
  JSR         _SetAPen(a6)

  MOVE.l      ACTIVEITEM(a5),a3

  MOVEQ       #2,d0
  MOVE.w      ACTIVEYPOS(a5),d1
  MOVE.l      50(a4),a4
  BSR         DrawTextItem
  RTS


;find the window that the mouse is currently 'in'
;returns: d0=menu that owns the window
.findmousewindow:
  MOVEM.l     a0/a5,-(a7)
'loop:
  MOVE.l      WINDOWPTR(a5),a0
  MOVE.w      14(a0),d0         ;mouse x
  BMI       'notthis
  MOVE.w      12(a0),d1         ;mouse y
  BMI       'notthis
  CMPI.w      #2,d1
  BLT       'notthis

  CMP.w       WINWIDTH(a5),d0
  BGE       'notthis

  CMP.w       WINHEIGHT(a5),d1
;  CMP.w       32,d1
  BGE       'notthis

  MOVE.l      a5,d0
  MOVEM.l     (a7)+,a0/a5
  RTS

'notthis:
  TST.l       PARENT(a5)
  BEQ       'failed
  MOVE.l      PARENT(a5),a5
  BRA       'loop
'failed:
  MOVEQ       #0,d0
  MOVEM.l     (a7)+,a0/a5
  RTS


;a5=menu
;returns: a0=item OR 0 for none
;         d1=yposition of item
.findmouseitem:
  MOVE.l      WINDOWPTR(a5),a0
  MOVE.w      12(a0),d7             ; get mouse y
  MOVE.l      ITEMS(a5),a0
  MOVEQ       #2,d1
'loop:
  MOVE.w      d1,d2
  TST.l       name(a0)
  BEQ       'sep
  ADD.w       ITEMHEIGHT(a5),d2
  BRA       'doneadjust

'sep:
  ADDQ.l      #4,d2

'doneadjust:
  CMP.w       d2,d7
  BGT       'notthisitem

  TST.l       name(a0)
  BEQ       'failed             ; separator hit!

  RTS

'notthisitem:
  TST.l       succ(a0)
  BEQ       'failed
  MOVE.w      d2,d1
  MOVE.l      succ(a0),a0
  BRA         'loop

'failed:
  SUB.l       a0,a0
  RTS

.


;====================================================================
;d0=x
;d1=y
;d2=w
;d3=h
;d4=window number
;====================================================================
.newpopupwin:
  MOVEM.l     a3-a6,-(a7)
  MOVE.w      d4,-(a7)
  MOVE.l      myscreen,a0 ; get the screen
  SUB.l       a1,a1       ; window name
  SUB.l       a2,a2       ; no extra tags
  MOVE.l      #WFLG_BORDERLESS | #WFLG_REPORTMOUSE | #WFLG_ACTIVATE,d4
  MOVE.l      #IDCMP_MOUSEBUTTONS | #IDCMP_INACTIVEWINDOW | #IDCMP_MOUSEMOVE,d5
  MOVEQ.l     #0,d6       ; first gadget
  BSR         OpenWindow
  MOVE.w      (a7)+,d4
  TST.l       d0
  BEQ       'theend

  MOVE.l      d0,-(a7)
  MOVE.l      gfxbase(pc),a6
  MOVE.l      d0,a1
  MOVE.l      50(a1),a1
  MOVE.l      a1,-(a7)
  MOVE.l      myfont(pc),a0
  JSR         _SetFont(a6)

  MOVE.l      (a7)+,a1
  MOVEQ       #RP_JAM1,d0
  JSR         _SetDrMd(a6)
  MOVE.l      (a7)+,d0

'theend:
  MOVEM.l     (a7)+,a3-a6
  RTS

;====================================================================
;a0=items
;====================================================================
.CalcWinSize:
  SF          hassubs
  MOVE.l      ITEMS(a5),a0

  MOVE.l      gfxbase(pc),a6
  MOVEQ       #8,d6             ; min width
  MOVEQ       #2,d7             ; min height
'loop:
  CMP.l       #0,a0
  BEQ         'theend

  TST.l       name(a0)
  BNE       'calclength
'separator:
  ADDQ.w      #4,d7
  BRA         'dotheloop

'calclength:
  MOVE.l      a0,-(a7)

  MOVE.l      name(a0),a0

  MOVE.l      a0,a1
  MOVEQ       #-1,d0             ; text length
'strlen:
  ADDQ.l      #1,d0
  TST.b       (a1)+
  BNE       'strlen

  LEA         myrast(pc),a1
  JSR         _TextLength(a6)
  MOVE.l      (a7)+,a0

  CMP.w       d0,d6
  BGE       'notbigger
  MOVE.w      d0,d6

'notbigger:
  ADD.w       ITEMHEIGHT(a5),d7   ; height
  TST.l       subs(a0)
  BEQ       'dotheloop
  ST          hassubs
'dotheloop:
  MOVE.l      succ(a0),a0
  BRA         'loop

'theend:
  MOVE.w      d7,d1
  MOVE.w      d7,WINHEIGHT(a5)

  ADDQ.w      #4,d6
  ADDQ.w      #2,d1

  MOVE.l      d6,d0

  MOVE.w      ITEMHEIGHT(a5),d2
  SUB.w       fontheight,d2
  ASR.w       #1,d2
  ADD.w       baseline,d2
  MOVE.w      d2,TEXTYOFFSET(a5)

  TST.w       hassubs
  BEQ       'nope
  ADDQ.w      #8,d0
  BCHG        #1,$bfe001
'nope:
  MOVE.w      d0,WINWIDTH(a5)
  RTS

hassubs:      Dc.b 0,0

;====================================================================
;Initialise a temporary rastport so that we can so some
;font calculations.
;====================================================================
inittemprast:
  LEA         myrast(pc),a1
  MOVE.l      gfxbase(pc),a6
  JSR         _InitRastPort(a6)

  MOVE.l      myscreen(pc),a0
  MOVE.l      84+52(a0),a0         ; get the textfont from the rastport

  MOVE.l      a0,myfont
  MOVE.w      20(a0),fontheight    ; store font height
  MOVE.w      26(a0),baseline

  LEA         myrast(pc),a1
  JSR         _SetFont(a6)
  RTS


;====================================================================
;a0=window
;====================================================================
.DrawItems:
  MOVE.l      gfxbase(pc),a6
  MOVE.l      ITEMS(a5),a3
  MOVE.l      50(a0),a4         ; rastport

  MOVEQ       #2,d6
  MOVEQ       #2,d7

'loop:
  TST.l       name(a3)
  BNE       'printtext
  MOVEM.l     a5/d6-d7,-(a7)

  MOVEQ       #2,d4
  MOVE.w      WINWIDTH(a5),d6
  SUBQ.w      #4,d6

  MOVE.w      d7,d5
  ADDQ.w      #1,d5
  ADDQ.w      #2,d7

  MOVE.l      a4,a5
  BSR         BevelBox
  MOVEM.l     (a7)+,a5/d6-d7
  ADDQ.l      #4,d7
  BRA         'doloop

'printtext:
  MOVE.l      d6,d0
  MOVE.l      d7,d1
  BSR         DrawTextItem
  ADD.w       ITEMHEIGHT(a5),d7
'doloop:
  TST.l       succ(a3)
  BEQ       'theend
  MOVE.l      succ(a3),a3
  BRA         'loop

'theend:
  RTS



myscreen:     Dc.l        0
myrast:       Dcb.b       SizeOf.RastPort,0
myfont:       Dc.l        0
fontheight:   Dc.w        0
baseline:     Dc.w        0
selecteditem: Dc.l        0

;====================================================================
;a3=item to draw
;a4=rastport
;d0=x
;d1=y
;====================================================================
.DrawTextItem:
  ADD.w       TEXTYOFFSET(a5),d1
  MOVE.l      a4,a1
  JSR         _Move(a6)

  MOVE.l      name(a3),a0
  MOVE.l      a0,a1
  MOVEQ       #-1,d0
'strlen:
  ADDQ.l      #1,d0
  TST.b       (a1)+
  BNE       'strlen

  MOVE.l      a4,a1
  JSR         _Text(a6)
  RTS


;====================================================================
;a0=items
;Returns: a5=structure
;====================================================================
.AllocStruct:
  MOVEM.l   a0/a1,-(a7)
  MOVE.l    #STRUCT_SIZEOF,d0
  MOVE.l    #$10001,d1
  MOVE.l    4,a6
  JSR       _AllocVec(a6)
  MOVEM.l   (a7)+,a0/a1

  MOVE.l    d0,a5
  TST.l     d0
  BEQ     'theend

  MOVE.w    fontheight,ITEMHEIGHT(a5)
  ADDQ.w    #6,ITEMHEIGHT(a5)
  MOVE.l    a0,ITEMS(a5)
  MOVE.l    a1,PARENT(a5)

  MOVEQ     #-1,d1
'loop:
  ADDQ.w    #1,d1
  TST.l     succ(a0)
  BEQ     'endloop
  MOVE.l    succ(a0),a0
  BRA     'loop
'endloop:
  MOVE.w    d1,NUMITEMS(a5)
  MOVE.w    #1,POPUPDELAY(a5)
  MOVE.l    #-1,EXITVAL(a5)
'theend:
  RTS

;a5=struct
DeAllocStruct:
  MOVE.l    a5,a1
  MOVE.l    4,a6
  JSR       _FreeVec(a6)
  RTS
.
;********************************************************************************
;* WindowInit
;*
;* Open the message port AND set up anything important
;********************************************************************************
.WindowInit:
  MOVE.l    4,a6
  JSR       _CreateMsgPort(a6)
  MOVE.l    d0,msgport
  RTS

msgport:Dc.l    0

;********************************************************************************
;* WindowFinit
;*
;* Clear the message port AND anything important
;********************************************************************************
.WindowFinit:
  MOVE.l    msgport,d0
  !SBEQ     {'err}
  MOVE.l    4,a6
  JSR       _Forbid(a6)
  BSR       FlushWinEvents
  MOVE.l    msgport(pc),a0
  JSR       _DeleteMsgPort(a6)
  JSR       _Permit(a6)
  CLR.l     msgport
'err:
  RTS

.FlushWinEvents:
  MOVE.l    msgport(pc),d0
  !SBEQ     {'exit}
  MOVE.l    4,a6
'loop:
  MOVE.l    msgport(pc),a0
  JSR       _GetMsg(a6)
  TST.l     d0
  !SBEQ     {'exit}
  MOVE.l    d0,a1
  TST.l     14(a1)
  !SBEQ     {'loop}     ; no reply!
  JSR       _ReplyMsg(a6)
  !SBRA     {'loop}
'exit:
  RTS

;********************************************************************************
;* OpenWindow  (taglist)
;*
;* INPUTS:
;* a0=Screen
;* a1=name
;* a2=extra tags
;* d0=x
;* d1=y
;* d2=width
;* d3=height
;* d4=flags
;* d5=IDCMP
;* d6=first gadget
;* OUTPUT:
;* d0=Window address OR 0 For error
;********************************************************************************
.OpenWindow:
  CLR.l     _extags
  CMP.l     #0,a2
  !SBEQ     {'none}
  MOVE.l    #2,_extags
  MOVE.l    a2,_extags+4
'none:
  MOVEM.l   a5-a6,-(a7)
  MOVE.l    d0,_wwtags+4          ;x
  MOVE.l    d1,_wwtags+12         ;y
  MOVE.l    d2,_wwtags+20         ;w
  MOVE.l    d3,_wwtags+28         ;h
  MOVE.l    a1,_wwtags+36         ;title
  MOVE.l    a0,_wwtags+44         ;screen
  MOVE.l    d4,_wwtags+52         ;flags
  MOVE.l    d5,-(a7)              ;store IDCMP
  MOVE.l    d6,_wwtags+124        ;first gadget
  MOVE.l    intuibase(pc),a6
  SUB.l     a0,a0                 ;no newwindow structure
  LEA       _wwtags(pc),a1
  JSR       _OpenWindowTagList(a6)
  MOVE.l    (a7)+,d5
  TST.l     d0
  BEQ       'err
  MOVE.l    d0,a0
  MOVE.l    msgport,86(a0)
  MOVE.l    d0,-(a7)
  MOVE.l    d5,d0
  OR.l      #IDCMP_CLOSEWINDOW|IDCMP_MOUSEBUTTONS,d0
  JSR       _ModifyIDCMP(a6)
  MOVE.l    (a7)+,d0
'err:
  MOVEM.l   (a7)+,a5-a6
  RTS

_wwtags:
  Dc.l    WA_Left,0         ;0
  Dc.l    WA_Top,0          ;8
  Dc.l    WA_Width,0        ;16
  Dc.l    WA_Height,0       ;24
  Dc.l    WA_Title,0        ;32
  Dc.l    WA_CustomScreen,0 ;40
  Dc.l    WA_Flags,0        ;48
  Dc.l    WA_DetailPen,-1   ;56
  Dc.l    WA_BlockPen,-1    ;64
_htags:
  Dc.l    WA_MinWidth,32    ;72
  Dc.l    WA_MinHeight,11   ;80
  Dc.l    WA_MaxWidth,640   ;88
  Dc.l    WA_MaxHeight,512  ;96
  Dc.l    WA_NewLookMenus,-1;104
  Dc.l    WA_IDCMP,0        ;112
  Dc.l    WA_Gadgets,0      ;120
_extags:
  Dc.l    2,0
  Dc.l    0

;********************************************************************************
;* WaitWinEvent command
;*
;* OUTPUTS:
;* d0=Event code
;* a0=Pointer To Event structure
;********************************************************************************
.WaitWinEvent:
  CLR.l     e_msgtype
  MOVE.l    msgport(pc),d0
  !SBEQ     {'err}

;*****   If NOT using gadtools library:
  CNIF      #GADTOOLS = 0
  MOVE.l    d0,a0
  MOVE.l    4,a6
  JSR       _GetMsg(a6)
  TST.l     d0
  !SBNE     {'gotmsg}
  MOVE.l    msgport(pc),a0
  JSR       _WaitPort(a6)
  MOVE.l    msgport(pc),a0
  JSR       _GetMsg(a6)
  TST.l     d0
  !SBEQ     {'err}
'gotmsg:
  MOVE.l    d0,a0
  MOVE.l    d0,a1
  TST.l     14(a1)
  !SBNE     {'doreply}
  !SBEQ     {'ret}
'doreply:
  LEA       20(a0),a0
  LEA       e_msgtype(pc),a2
  MOVEQ     #7,d0
'loop:
  MOVE.l    (a0)+,(a2)+
  DBRA      d0,'loop
  JSR       _ReplyMsg(a6)

  CELSE

  MOVE.l    d0,a0
  MOVE.l    gadtoolsbase,a6
  JSR       _GT_GetIMsg(a6)
  TST.l     d0
  !SBNE     {'gotmsg}
  MOVE.l    msgport(pc),a0
  MOVE.l    4,a6
  JSR       _WaitPort(a6)
  MOVE.l    msgport(pc),a0
  MOVE.l    gadtoolsbase,a6
  JSR       _GT_GetIMsg(a6)
  TST.l     d0
  !SBEQ     {'err}
'gotmsg:
  MOVE.l    d0,a0
  MOVE.l    d0,a1
  TST.l     14(a1)
  !SBEQ     {'ret}
'doreply:
  LEA       20(a0),a0
  LEA       e_msgtype(pc),a2
  MOVEQ     #7,d0
'loop:
  MOVE.l    (a0)+,(a2)+
  DBRA      d0,'loop
  JSR       _GT_ReplyIMsg(a6)
  CEND

'ret:
  MOVE.l    e_msgtype(pc),d0
  RTS
'err:
  MOVEQ     #-1,d0
  RTS

e_msgtype:        Dc.l  0
e_code:           Dc.w  0
e_Qualifier:      Dc.w  0
e_IAddress:       Dc.l  0
e_MouseX:         Dc.w  0
e_MouseY:         Dc.w  0
e_Seconds:        Dc.l  4
e_Micros:         Dc.l  4
e_IDCMPWindow:    Dc.l  4
e_SpecialLink:    Dc.l  4

.WinGadgetHit:
  MOVE.l    e_IAddress,a0
  MOVEQ     #0,d0
  MOVE.w    38(a0),d0
  RTS

;********************************************************************************
;* WSizeLimits
;*
;* Set Default Min/Max size For all windows created after the Call
;* INPUTS:
;* d0=Min width
;* d1=Min height
;* d2=Max width
;* d4=Max height
;********************************************************************************
.WSizeLimits:
  MOVE.w    d0,_htags+6
  MOVE.w    d1,_htags+14
  MOVE.w    d2,_htags+22
  MOVE.w    d3,_htags+30
  RTS

;********************************************************************************
;* CloseWindow
;*
;* INPUTS:
;* d0=Window To close
;********************************************************************************
.CloseWin:
  TST.l     d0
  !SBEQ     {'err}
  MOVE.l    d0,-(a7)
  MOVE.l    4,a6
  JSR       _Forbid(a6)
  BSR       FlushWinEvents
  MOVE.l    (a7)+,a0
  CLR.l     86(a0)
  MOVE.l    intuibase(pc),a6
  JSR       _CloseWindow(a6)
  MOVE.l    4,a6
  JSR       _Permit(a6)
'err:
  RTS

;********************************************************************************
;* WPrint
;*
;* INPUTS:
;* d0=x
;* d1=y
;* a0=Window
;* a1=text
;********************************************************************************
.WPrint:
  MOVE.l    a2,-(a7)
  LEA       itext(pc),a2
  MOVE.l    a1,12(a2)
  MOVE.b    54(a0),5(a2)
  MOVE.b    55(a0),7(a2)

  MOVE.l    50(a0),a0     ; get rastport
  MOVE.l    a2,a1
  MOVE.l    intuibase(pc),a6
  JSR       _PrintIText(a6)
  MOVE.l    (a7)+,a2
  RTS

itext:
  Dc.b  1 ; front pen
  Dc.b  0 ; BackPen
  Dc.b  1 ; draw mode
  Dc.w  0 ; left edge
  Dc.w  0 ; right edge
  Dc.l  0 ; itextfont
  Dc.l  0 ; itext
  Dc.l  0 ; next itext

;********************************************************************************
;* WinInnerCls
;* a0=Window To clear
;********************************************************************************
.WinInnerCls:
  MOVE.l    a0,-(a7)
  MOVE.l    50(a0),a1
  MOVE.l    gfxbase(pc),a6

  MOVEQ     #0,d0
  JSR       _SetAPen(a6)

  MOVE.l    (a7)+,a0
  MOVEQ     #0,d0
  MOVEQ     #0,d1
  MOVEQ     #0,d2
  MOVEQ     #0,d3

  MOVE.b    56(a0),d0   ; get border right
  MOVE.b    57(a0),d1   ; get border bottom
  MOVE.w    8(a0),d2    ; get width
  MOVE.w    10(a0),d3   ; get height

  SUBQ.w    #1,d2
  SUBQ.w    #1,d3

  SUB.w     d0,d2
  SUB.w     d1,d3

  MOVEQ     #0,d0
  MOVEQ     #0,d1
  MOVE.b    54(a0),d0
  MOVE.b    55(a0),d1

  MOVE.l    50(a0),a1

  JSR       _RectFill(a6)
  RTS

;a0=window
;a1=bitmap
.BitMaptoWin:
  MOVE.w    112(a0),d4
  MOVE.w    114(a0),d5
  MOVEQ     #0,d0
  MOVEQ     #0,d1
  MOVEQ     #0,d2
  MOVEQ     #0,d3
  MOVE.b    54(a0),d2
  MOVE.b    55(a0),d3

  MOVE.l    50(a0),a0
  MOVE.w    #$c0,d6
  EXG       a0,a1
  MOVE.l    gfxbase(pc),a6
  JSR       _BltBitMapRastPort(a6)
  RTS

;********************************************************************************
;* BevelWindow
;* a0=Window To bevel
;********************************************************************************
.BevelWindow:
  MOVE.l    gfxbase(pc),a6
  MOVEM.l   a0/a5,-(a7)

  MOVE.w    8(a0),d6                ; window width
  SUBQ.w    #1,d6
  MOVE.w    10(a0),d7               ; window height
  SUBQ.w    #1,d7

  MOVE.l    50(a0),a5               ; window rastport

  MOVEQ     #0,d4
  MOVEQ     #0,d5
  BSR       BevelBox


  MOVEM.l   (a7)+,a0/a5
  RTS

;d4=x
;d5=y
;d6=x2
;d7=y2
;a5=rastport
BevelBox:
  MOVE.l    gfxbase(pc),a6
  MOVE.l    a5,-(a7)

  MOVE.l    a5,a1
  MOVEQ     #2,d0
  JSR       _SetAPen(a6)

  MOVE.w    d4,d0
  MOVE.w    d7,d1                   ; start at bottom left
  MOVE.l    a5,a1
  JSR       _Move(a6)

  MOVE.w    d4,d0                   ; draw to top left
  MOVE.w    d5,d1
  MOVE.l    a5,a1
  JSR       _Draw(a6)

  MOVE.w    d6,d0                   ; draw to top right
  MOVE.w    d5,d1
  MOVE.l    a5,a1
  JSR       _Draw(a6)

  MOVE.l    a5,a1
  MOVEQ     #1,d0
  JSR       _SetAPen(a6)

  MOVE.w    d6,d0                   ; draw to bottom right
  MOVE.w    d7,d1
  MOVE.l    a5,a1
  JSR       _Draw(a6)

  MOVE.w    d4,d0                   ; draw to bottom left
  ADDQ.w    #1,d0
  MOVE.w    d7,d1
  MOVE.l    a5,a1
  JSR       _Draw(a6)

  MOVE.l    (a7)+,a5
  RTS


