; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 80000
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
; Reflective Images library
; (C)1995

; Changes:
;
; v0.91    - Changed structure of nodes
;            (prev/next/data/size) -> (next/prev/pad/data/size)
;            Added AddrListItem list# to return Addr of current node
; v0.9     - Inital Version

#nodenext=0
#nodeprev=4
#nodepad=8
#nodedat=10
#nodelen=14

INCDIR "BlitzLibs:"
XINCLUDE "libmacs.bb"

!libheader {#rilinkedlistlib,init,0,finit,0}

!acommand {#long}
!args {#long,#varptr}
!libs
!subs {_initlist,0,0}
!name {"InitList","list#,var"}

!acommand {#long}
!args {#long}
!libs
!subs {_addlistitem,0,0}
!name {"AddListItem","list#"}

!acommand {#long}
!args {#long,#varptr}
!libs
!subs {_setlistitem,0,0}
!name {"SetListItem","list#,var"}

!acommand {#long}
!args {#long}
!libs
!subs {_nextlistitem,0,0}
!name {"NextListItem","list#"}

!acommand {#long}
!args {#long,#varptr}
!libs
!subs {_getlistitem,0,0}
!name {"GetListItem","list#,var"}

!acommand {#long}
!args {#long}
!libs
!subs {_prevlistitem,0,0}
!name {"PrevListItem","list#"}


!acommand {#long}
!args {#long}
!libs
!subs {_firstlistitem,0,0}
!name {"FirstListItem","list#"}

!acommand {#long}
!args {#long}
!libs
!subs {_lastlistitem,0,0}
!name {"LastListItem","list#"}

!acommand {#long}
!args {#long}
!libs
!subs {_addfirstitem,0,0}
!name {"AddFirstListItem","list#"}

!acommand {#long}
!args {#long}
!libs
!subs {_addlastitem,0,0}
!name {"AddLastListItem","list#"}

!acommand {#long}
!args {#long}
!libs
!subs {_dellistitem,0,0}
!name {"DelListItem","list#"}

!afunction {#long}
!args {#long}
!libs
!subs {_addrlistitem,0,0}
!name {"AddrListItem","list#"}

!afunction {#long}
!args {#varptr}
!libs
!subs {_sizeoflistitem,0,0}
!name {"SizeOfListItem","var"}

finit:!nullsub{_libfinit,0,0}
init: !nullsub{_libinit,0,0}

!libfin

_libinit:
  RTS

_libfinit:
oops:
  MOVEQ.l #0,d0
  RTS


Macro getvarsize
  MOVE.l  `1,myvar
  MOVE.l  `1,a0
  MOVEQ.l #0,`1
  MOVE.w  -2(a0),`1
  SUBQ.l  #8,`1
  MOVE.l  `1,_size
End Macro


Macro getlistnum
  ASL.l   #2,`1
  MOVE.l  `1,listnum
End Macro

._sizeoflistitem:
  !getvarsize{d0}
  RTS

._addrlistitem:
  !getlistnum{d0}
  LEA   _current(pc),a0
  MOVE.l  0(a0,d0.l),d0
  RTS

._initlist:
  !getlistnum{d0}
  !getvarsize{d1}

  MOVE.l  #18,d0
  MOVEQ.l #0,d1
  ALibJsr $c002       ; Allocate a node
  TST.l   d0
  BEQ     oops
  MOVE.l  d0,nodeptr
  LEA     _first(pc),a0
  LEA     _last(pc),a1
  LEA     _current(pc),a2
  MOVE.l  listnum,d1
  MOVE.l  d0,0(a0,d1.l)     ; Store pointer to this node (first)
  MOVE.l  d0,0(a1,d1.l)     ; last
  MOVE.l  d0,0(a2,d1.l)     ; current

  MOVE.l  _size,d0
  MOVEQ.l #0,d1
  ALibJsr $c002
  MOVE.l  d0,_data
  TST.l   d0
  BNE     'ok
  MOVE.l  nodeptr,a1
  MOVEQ.l #18,d0
  ALibJsr $c003
  LEA     _first(pc),a0
  LEA     _last(pc),a1
  LEA     _current(pc),a2
  MOVE.l  listnum,d1
  MOVE.l  #0,0(a0,d1.l)     ; Clear pointer to this node (first)
  MOVE.l  #0,0(a1,d1.l)     ; last
  MOVE.l  #0,0(a2,d1.l)     ; current
  MOVEQ.l #0,d0
  RTS
'ok:
  MOVE.l  _data,d1
  MOVE.l  myvar,d0
  MOVE.l  _size,d2
  ALibJsr CopyByte
  MOVE.l  nodeptr,a0
  MOVE.l  #0,(a0)+
  MOVE.l  #0,(a0)+
  MOVE.w  #0,(a0)+
  MOVE.l  _data,(a0)+
  MOVE.l  _size,(a0)
  MOVEQ.l #-1,d0
  RTS

.nodeptr:  Dc.l 0

._addlistitem:
  !getlistnum{d0}
  MOVE.l  #18,d0
  MOVEQ.l #0,d1
  ALibJsr $c002
  TST.l   d0
  BEQ     oops
  MOVE.l  d0,nodeptr
  LEA     _current(pc),a0
  MOVE.l  listnum,d0
  MOVE.l  0(a0,d0.l),a0         ; current node
  MOVE.l  (a0)+,_next
  MOVE.l  (a0),_prev
  MOVE.l  _next,d0
  TST.l   d0
  BNE     'notlast
;LAST NODE IN LIST
  LEA     _last(pc),a0
  MOVE.l  listnum,d0
  MOVE.l  nodeptr,0(a0,d0.l)
'notlast:
  LEA     _current(pc),a0
  MOVE.l  listnum,d0
  MOVE.l  0(a0,d0.l),a1
  MOVE.l  nodeptr,0(a0,d0.l)         ; store new current node
  MOVE.l  nodenext(a1),_oldnext
  MOVE.l  nodeptr,nodenext(a1)
  MOVE.l  nodeptr,a0
  MOVE.l  _oldnext,(a0)+
  MOVE.l  a1,(a0)+
  MOVE.w  #0,(a0)+
  MOVE.l  #0,(a0)+
  MOVE.l  _size,(a0)
  MOVEQ.l #-1,d0
  RTS

._setlistitem:
  !getlistnum{d0}
  !getvarsize{d1}
  MOVE.l  d1,d0
  MOVEQ.l  #0,d1
  ALibJsr $c002
  TST.l   d0
  BEQ     oops

  MOVE.l  d0,d1
  MOVE.l  listnum,d0
  MOVE.l  _size,d2
  LEA     _current(pc),a0
  MOVE.l  0(a0,d0.l),a0     ; get pointer to current node
  MOVE.l  d1,nodedat(a0)          ; pointer to data
  MOVE.l  myvar,d0
  ALibJsr CopyByte
  MOVEQ.l #-1,d0
  RTS

._getlistitem:
  !getlistnum{d0}
  !getvarsize{d1}
  MOVE.l  d1,d2
  LEA     _current(pc),a0
  MOVE.l  0(a0,d0.l),a0     ; get pointer to current node
  MOVE.l  nodedat(a0),d0         ; pointer to data
  TST.l   d0
  BEQ     oops
  MOVE.l  myvar,d1
  ALibJsr CopyByte
  MOVEQ.l #-1,d0
  RTS

    Even

_oldnext: Dc.l  0
_next:    Dc.l  0
_prev:    Dc.l  0
_data:    Dc.l  0
myvar:    Dc.l  0
_size:    Dc.l  0
temp:     Dc.l  0
listnum:  Dc.l  0

._nextlistitem:
  !getlistnum{d0}
  LEA     _current(pc),a0
  MOVE.l  0(a0,d0.l),a1
  MOVE.l  nodenext(a1),d1
  TST.l   d1
  BEQ     oops
  MOVE.l  d1,0(a0,d0.l)
  MOVEQ.l #-1,d0
  RTS

._firstlistitem:
  !getlistnum{d0}
  LEA     _first(pc),a0
  LEA     _current(pc),a1
  MOVE.l  0(a0,d0.l),d1
  MOVE.l  d1,0(a1,d0.l)
  MOVEQ.l #-1,d0
  RTS

._lastlistitem:
  !getlistnum{d0}
  LEA     _last(pc),a0
  LEA     _current(pc),a1
  MOVE.l  0(a0,d0.l),d1
  MOVE.l  d1,0(a1,d0.l)
  MOVEQ.l #-1,d0
  RTS

._prevlistitem:
  !getlistnum{d0}
  LEA     _current(pc),a0
  MOVE.l  0(a0,d0.l),a1
  MOVE.l  nodeprev(a1),d1
  TST.l   d1
  BEQ     oops
  MOVE.l  d1,0(a0,d0.l)
  MOVEQ.l #-1,d0
  RTS

._addlastitem:
  MOVEM.l d0-d1,-(a7)
  BSR     _lastlistitem
  MOVEM.l (a7)+,d0-d1
  BSR     _addlistitem
  RTS

._addfirstitem:
  MOVE.l  d0,listnum
  MOVE.l  #18,d0
  MOVE.l  #0,d1
  ALibJsr $c002
  TST.l   d0
  BEQ     oops
  MOVE.l  d0,nodeptr
  MOVE.l  listnum,d0
  !getlistnum{d0}

  LEA     _first(pc),a0
  MOVE.l  0(a0,d0.l),_next
  MOVE.l  nodeptr,0(a0,d0.l)
  MOVE.l  _next,a0
  MOVE.l  nodeptr,(a0)
  LEA     _current(pc),a0
  MOVE.l  nodeptr,0(a0,d0.l)
  MOVE.l  nodeptr,a0
  MOVE.l  _next,nodenext(a0)
  RTS

._dellistitem:
  !getlistnum{d0}
  LEA     _current(pc),a0
  MOVE.l  0(a0,d0.l),nodeptr
  MOVE.l  nodeptr,a0
  CMP.l   #0,a0
  BEQ     oops                ; no Current node
  MOVE.l  (a0)+,_next
  MOVE.l  (a0)+,_prev
  MOVE.l  (a0)+,_data
  MOVE.w  (a0)+,pad
  MOVE.l  (a0)+,_size
  CMP.l   #0,_data
  BEQ     'ok
  MOVE.l  _data,a1
  MOVE.l  _size,d0
  ALibJsr $c003               ; Free DATA memory
  MOVE.l  nodeptr,a0
  MOVE.l  #0,nodedat(a0)
  MOVE.l  #0,nodelen(a0)
'ok:
  CMP.l   #0,_prev
  BNE     'ok2                ; At TOP of LIST
  CMP.l   #0,_next
  BEQ     oops                ; ONLY ITEM IN LIST
  MOVE.l  _next,a0
  MOVE.l  #0,0(a0)
  LEA     _first(pc),a0
  MOVE.l  listnum,d0
  MOVE.l  _next,0(a0,d0.l)    ; Set FIRST -> NEXT
  LEA     _current(pc),a0
  MOVE.l  _next,0(a0,d0.l)    ; Set CURRENT -> NEXT
  MOVE.l  nodeptr,a1
  MOVE.l  #18,d0
  ALibJsr $c003               ; Free NODE
  MOVEQ.l #-1,d0
  RTS
'ok2:                         ; Not At TOP of LIST
  CMP.l   #0,_next
  BNE     'ok3                ; In MIDDLE of LIST
  MOVE.l  _prev,a0
  MOVE.l  #0,nodenext(a0)            ; Clear NEXT of PREV
  LEA     _last(pc),a0
  MOVE.l  listnum,d0
  MOVE.l  _prev,0(a0,d0.l)    ; Set LAST -> PREV
  LEA     _current(pc),a0
  MOVE.l  _prev,0(a0,d0.l)    ; Set CURRENT -> PREV
  MOVE.l  #18,d0
  MOVE.l  nodeptr,a1
  ALibJsr  $c003              ; Free NODE
  MOVEQ.l #-1,d0
  RTS
'ok3:
  MOVE.l  _prev,a0
  MOVE.l  _next,nodenext(a0)         ; Set NEXT(PREV)->NEXT
  MOVE.l  _next,a0
  MOVE.l  _prev,nodeprev(a0)          ; Set PREV(NEXT)->PREV
  LEA     _current(pc),a0
  MOVE.l  listnum,d0
  MOVE.l  _next,0(a0,d0.l)    ; Set CURRENT -> NEXT
  MOVE.l  #18,d0
  MOVE.l  nodeptr,a1
  ALibJsr $c003
  MOVEQ.l #-1,d0
  RTS




_first:
  Dc.l  0,0,0,0,0

_last:
  Dc.l  0,0,0,0,0

_sizes:
  Dc.l  0,0,0,0,0

_current:
  Dc.l  0,0,0,0,0

pad:  Dc.w  0

