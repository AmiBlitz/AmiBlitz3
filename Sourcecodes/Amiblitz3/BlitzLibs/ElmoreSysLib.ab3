; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "ElmoreSysLib_org.obj"
; CreateIcon      = 0
; Residents       = "libmacs.res,blitzoffs.res,amigalibs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 5
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 29
; CursorColumn    = 16
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
; Copied the Null function to the new token 20 of the lib with no real function
; because it is overwriten by the compiler to put 0 in dx.
; Also renamed the original Null function to StrToAdr to make it working again.
; This means that Source in .bb2 format are converted automatic for .ab2 and .ab3
; that use the command NULL("string") must converted by hand to StrToAdr("string").
; Compiler overwrite check has to change to the new Token ID! (done by tomsmart1)
; tomsmart1 2014 10 26

.SYSTEM

;
; #elmoresyslib=107 (rev bum6)
;

Macro pushreg:MOVE.l `1,-(a7):End Macro
Macro pullreg:MOVE.l (a7)+,`1:End Macro
Macro pushregs:MOVEM.l `1,-(a7):End Macro
Macro pullregs:MOVEM.l (a7)+,`1:End Macro
Macro error:MOVE.l #`1,d0:TRAP#0:`1:Dc.b `2,0:Even:End Macro

#allocstring=$cf01
#freestring=$cf02
#globalalloc=$c002
#globalfree=$c003
#longmult=$ca01

#_findtask = -$126
#pr_windowptr = 184

!libheader{#elmoresyslib,0,0,0,0}

!afunction{#long}
!args{#string}
!libs
!subs{_nullterm,0,0}
!name{"StrToAdr","(String$) ;Returns address of null-termed string"}


!afunction{#long}
!args
!libs
!subs{_chipfree,0,0}
!name{"ChipFree",";Returns largest block of free CHIP memory"}


!afunction{#long}
!args
!libs
!subs{_fastfree,0,0}
!name{"FastFree",";Returns largest block of free FAST memory"}


!afunction{#long}
!args
!libs
!subs{_allfree,0,0}
!name{"LargestFree",";Returns largest block of memory available"}



!afunction {#long}:!args:!libs {#intuitionlib,#ld0}
!subs {_bases,0,0}
!name {"IntuitionBase"," ;Returns Intuition Library base"}


!afunction {#long}:!args:!libs {#doslib,#ld0}
!subs {_bases,0,0}
!name {"DosBase"," ;Returns DOS Library base"}


!afunction {#long}:!args:!libs {#graphicslib,#ld0}
!subs {_bases,0,0}
!name {"GraphicsBase"," ;Returns Graphics Library base"}


!afunction {#long}:!args:!libs {#mathffplib,#ld0}
!subs {_bases,0,0}
!name {"FFPBase"," ;Returns FFP Math Library base"}


!afunction {#long}:!args:!libs {#diskfontlib,#ld0}
!subs {_bases,0,0}
!name {"DiskFontBase"," ;Returns DiskFont Library base"}


!afunction {#long}:!args:!libs {#commoditieslib,#ld0}
!subs {_bases,0,0}
!name {"CommoditiesBase"," ;Returns Commodities Library base"}


!afunction {#long}:!args:!libs{#iconlib,#ld0}
!subs {_bases,0,0}
!name {"IconBase"," ;Returns Icon Library base"}


!afunction {#long}:!args:!libs{#rexxsyslib,#ld0}
!subs {_bases,0,0}
!name {"RexxSysBase"," ;Returns RexxSys Library base"}


;The system requester...
;
!acommand {#byte}
!args{#string,#string,#string}
!libs {#intuitionlib,#la6}
!subs {_requester+1,0,0}
!name {"Request","(Title$,text$,button$) ;OS 2.0 & above System Requester"}

;The version which does not return


;Address of Active Screen
!afunction{long}
!args
!libs {#intuitionlib,#la0}
!subs {_cscreenaddr+1,0,0}
!name {"ActiveScreen"," ;Returns ADDRESS of current Intuition screen"}


;Screen width of current screen
!afunction {#word}
!args
!libs {#intuitionlib,#la0}
!subs {_swidth+1,0,0}
!name {"ScreenWidth"," ;Returns width in pixels of active screen"}

;And height....
!afunction {#word}
!args
!libs {#intuitionlib,#la0}
!subs {_sheight+1,0,0}
!name {"ScreenHeight"," ;Returns height in pixels of active screen"}

!afunction {#long}
!args
!libs{#intuitionlib,#la0}
!subs{_awindow+1,0,0}
!name {"ActiveWindow"," ;Returns ADDRESS of current Intuition window"}


!acommand{#long}
!args{#long}
!libs
!subs{_waitfor+1,0,0}
!name {"WaitFor","(IDCMP Code)  ;Delays until specified Intuition event occurs"}


!astatement
!args{#byte}
!libs
!subs {_requesters,0,0}
!name {"ShowRequesters","[0=Cancel] [1=On Workbench Screen] [2=In Current Window]"}


!afunction{#long}
!args{#string}
!libs
!subs{_nulltermnew,0,0}
!name{"Null","0"}

!libfin




._requester
BSR checkrom

BSR do2string

!pushregs{a0-a3/d1-d2}

MOVE.l SizeOf.IntuitionBase\ActiveWindow(a6),currentwindow

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;Make null-terminated copies:

MOVE.l -4(a2),d1    ;Length from -4(a2) to d1
ALibJsr #allocstring

;Store in easystruct
MOVE.l d0,es_Title
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


!pullreg{d0}  ;Pull string2 but to d0


MOVE.l -8(a2),d1    ;Length
ALibJsr #allocstring

;Store in easy struct
MOVE.l d0,es_TextFormat
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


!pullreg{d0}        ;Pull string*3* now to d0

MOVE.l -12(a2),d1   ;And it's length
ALibJsr #allocstring

MOVE.l d0,es_GadgetFormat
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;Now put other items in easy struct:

MOVE.l SizeOf.EasyStruct,es_StructSize

;Not used in this release: (Maybe 3.0 but don't know!)
CLR.l es_Flags

LEA currentwindow,a1

MOVE.l (a1),a0  ;Current window's address to first A-reg


LEA EasyStruct,a1 ;EasyStruct address in A1


MOVE.l #0,a2      ;Zeroes here for now-- I don't use IDCMP


MOVE.l #0,a3


JSR -$024c(a6)    ;Call EasyRequestArgs_!


;Now free those strings!

!pushreg{d0}

MOVE.l es_Title,d0
ALibJsr #freestring

MOVE.l es_TextFormat,d0
ALibJsr #freestring

MOVE.l es_GadgetFormat,d0
ALibJsr #freestring

!pullreg{d0}




;Pull regs off stack!

!pullregs{a0-a3}

;EasyRequestArgs returns it's result in D0 for us,
;so now all we gotta do is return!!
;

RTS





;Sub to convert pipes "|" to chr$(10)
;from the second string argument:

;Yea, I know... Why is it way down here?  Well because
;I implemented it quite awhile after the original code!
;It works, don't it?


do2string:
!pushregs{a0-a6/d0-d3}

;d1 is our string's start:
;-8(a2) is the length:

;We'll use a0 as address reg, d0 as data, and d1 as counter:

MOVE.l d1,a0
MOVE.l -8(a2),d1

do2loop
MOVE.b (a0)+,d0
CMP.b #"|",d0
BNE do2more
MOVE.b #10,-1(a0)
do2more
DBRA d1,do2loop

!pullregs{d0-d3/a0-a6}
RTS




._cscreenaddr
MOVE.l SizeOf.IntuitionBase\ActiveScreen(a0),d0
RTS


._swidth
MOVE.l SizeOf.IntuitionBase\ActiveScreen(a0),a1
MOVE.l SizeOf.Screen\Width-2(a1),d0
EXT.l d0
RTS

._sheight
MOVE.l SizeOf.IntuitionBase\ActiveScreen(a0),a1
MOVE.l SizeOf.Screen\Height-2(a1),d0
EXT.l d0
RTS


._awindow
MOVE.l SizeOf.IntuitionBase\ActiveWindow(a0),d0
RTS




._bases
MOVE.l d0,a6
RTS





._waitfor
!pushreg{d0}

waitloop
ALibJsr WaitEvent
!pullreg{d1}
AND d1,d0
CMP.l #0,d0
BNE waitsatisfied
!pushreg{d1}
BRA waitloop

waitsatisfied
RTS


._nullterm
MOVE.l -4(a2),d1
ALibJsr #allocstring
._nulltermnew
RTS


._allfree
MOVE.l #$20000,d1
BRA _memfree


._fastfree
MOVE.l #$20000|4,d1
BRA _memfree


._chipfree
MOVE.l #$20000|2,d1

_memfree:

!pushregs{a6/d2}
MOVE.l 4,a6
JSR _AvailMem(a6)
!pullregs{d2/a6}
RTS



;Misc. system functions:

  ._requesters
  CMP.b #0,d0
  BEQ _Noreqs

  CMP.b #1,d0
  BEQ _WBReqs

  CMP.b #2,d0
  BEQ _CWreqs

  !error{badarg,"Arguments invalid!"}


  _CWreqs
  ALibJsr CatchDosErrs
  RTS


  _WBReqs
  BNE _Noreqs

  BSR getit
  MOVE.l #0,pr_windowptr(a0)  ;Enable requesters
  RTS

  _Noreqs
  BSR getit
  MOVE.l #-1,pr_windowptr(a0) ;Disable requesters
  RTS

  ;Find this task...
  getit
  MOVE.l 4,a6
  LEA 0,a1
  JSR _findtask(a6)
  MOVE.l d0,a0
  RTS








.checkrom
!pushregs{a0-a6/d0-d7}
ALibJsr ExecVersion
CMP.l #36,d0
BGE yes20
!error{under20,"Available only with 2.0 or higher ROMs"}
yes20
!pullregs{d0-d7/a0-a6}
RTS




EasyStruct:

es_StructSize:
Ds.l 1
es_Flags:
Ds.l 1
es_Title:         ;Pointer to string (null-terminated)
Ds.l 1
es_TextFormat:    ;Pointer to string    "        "
Ds.l 1
es_GadgetFormat:  ;Pointer to string    "        "
Ds.l 1

Even

currentwindow:
Ds.l 1
