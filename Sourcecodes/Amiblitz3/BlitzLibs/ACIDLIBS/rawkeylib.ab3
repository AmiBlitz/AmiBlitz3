; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Blitz3:BlitzLibs/Decompiled/acidlibs"
; ExeFile         = "rawkeylib_mew.obj"
; CreateIcon      = 0
; Residents       = "libmacs.res,blitzoffs.res,libnums.res,all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 49
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 186
; CursorColumn    = 9
; LabelSearch     = "inputevent"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; Max Window      = 20
; /XTRA
; IRA V2.09 (06.03.18) (c)1993-1995 Tim Ruehsen
; (c)2009-2015 Frank Wille, (c)2014-2017 Nicolas Bastien

_LVORawKeyConvert equ -48
ABSEXECBASE EQU $4

;syslibheader{libnum,firsttoke,lasttoke+1,init,return,finit,error[,flags]}
;               1        2         3       4     5      6     7      8
!syslibheader{#rawkeylib,0,0,init,1,finit,0}
 ;MOVEQ #0,D0
 ;RTS
 ;ORI.l #$00000000,D2  ;004: 008200000000
 ;ORI.b #$00,D0   ;00a: 00000000
 ;ORI.b #$00,D0   ;00e: 00000000
 ;ORI.b #$00,D0   ;012: 00000000
 ;Dc.l init       ;016: 0000006c
 ;Dc.w $0001      ;01a
 ;Dc.l finit      ;01c: 00000080
 ;ORI.b #$00,D0   ;020: 00000000
 ;ORI.b #$00,D0   ;024: 00000000
 ;ORI.b #$00,D0   ;028: 00000000
 ;ORI.b #$00,D0   ;02c: 00000000

fun1: !nullsub{LAB_0014,0,0}
fun2: !nullsub{LAB_0002,0,0}
fun3: !nullsub{LAB_000F,0,0}
init: !nullsub{codeinit,0,0}
finit: !nullsub{codefinit,0,0}
!libfin

LAB_0002:
  MOVEM.l D2/A0,-(A7)
  LEA LAB_000B(PC),A0
  MOVEQ #104,D2
  MOVEQ #0,D1
  LAB_0003:
    CMP.b (A0)+,D0
  DBEQ D2,LAB_0003
  BEQ.w LAB_0005
    MOVEQ #104,D2
    MOVEQ #1,D1
    LAB_0004:
      CMP.b (A0)+,D0
    DBEQ D2,LAB_0004
    BEQ.w LAB_0005
      MOVEQ #-1,D0
      BRA.w LAB_0006
  LAB_0005:
    MOVEQ #104,D0
    SUB.w D2,D0
  LAB_0006:
  MOVEM.l (A7)+,D2/A0
RTS

str_consoleDevice: Dc.b "console.device",0,$72
ptr_ConsoleLib:    Dc.l $00000000

rawBuffer:         Dc.w $0000

InputEvent:
ie_NextEvent:      Dc.l $00000000
ie_Class:          Dc.b $01
ie_SubClass:       Dc.b $00
ie_Code:           Dc.w $0000
ie_Qualifier:      Dc.w $0000
union:             Dc.w $0000
ie_x:              Dc.w $0000
ie_y:              Dc.w $0000
ie_addr:           Dc.l $00000000
ie_prev1DownCode:  Dc.b $00
ie_prev1DownQual:  Dc.b $00

LAB_000B:                                  ; array 104 bytes ?
ie_prev2DownCode:  Dc.b $00
ie_prev2DownQual:  Dc.b $00
ie_TimeStamp:      Dc.l $00000000

 Dc.w $0000
 ORI.b #$00,D0   ;102: 00000000
 ORI.b #$00,D0   ;106: 00000000
 ORI.b #$00,D0   ;10a: 00000000
 ORI.b #$00,D0   ;10e: 00000000
 ORI.b #$00,D0   ;112: 00000000
 ORI.b #$00,D0   ;116: 00000000
 ORI.b #$00,D0   ;11a: 00000000
 ORI.b #$00,D0   ;11e: 00000000
 ORI.b #$00,D0   ;122: 00000000
 ORI.b #$00,D0   ;126: 00000000
 ORI.b #$00,D0   ;12a: 00000000
 ORI.b #$00,D0   ;12e: 00000000
 ORI.b #$00,D0   ;132: 00000000
 ORI.b #$00,D0   ;136: 00000000
 ORI.b #$00,D0   ;13a: 00000000
 ORI.b #$00,D0   ;13e: 00000000
 ORI.b #$00,D0   ;142: 00000000
 ORI.b #$00,D0   ;146: 00000000
 ORI.b #$00,D0   ;14a: 00000000
 ORI.b #$00,D0   ;14e: 00000000
 ORI.b #$00,D0   ;152: 00000000
 ORI.b #$00,D0   ;156: 00000000
 ORI.b #$00,D0   ;15a: 00000000
 ORI.b #$00,D0   ;15e: 00000000

LAB_000E:                                    ;array 104 bytes
 ORI.b #$00,D0   ;162: 00000000
 ORI.b #$00,D0   ;166: 00000000
 ORI.b #$00,D0   ;16a: 00000000
 ORI.b #$00,D0   ;16e: 00000000
 ORI.b #$00,D0   ;172: 00000000
 ORI.b #$00,D0   ;176: 00000000
 ORI.b #$00,D0   ;17a: 00000000
 ORI.b #$00,D0   ;17e: 00000000
 ORI.b #$00,D0   ;182: 00000000
 ORI.b #$00,D0   ;186: 00000000
 ORI.b #$00,D0   ;18a: 00000000
 ORI.b #$00,D0   ;18e: 00000000
 ORI.b #$00,D0   ;192: 00000000
 ORI.b #$00,D0   ;196: 00000000
 ORI.b #$00,D0   ;19a: 00000000
 ORI.b #$00,D0   ;19e: 00000000
 ORI.b #$00,D0   ;1a2: 00000000
 ORI.b #$00,D0   ;1a6: 00000000
 ORI.b #$00,D0   ;1aa: 00000000
 ORI.b #$00,D0   ;1ae: 00000000
 ORI.b #$00,D0   ;1b2: 00000000
 ORI.b #$00,D0   ;1b6: 00000000
 ORI.b #$00,D0   ;1ba: 00000000
 ORI.b #$00,D0   ;1be: 00000000
 ORI.b #$00,D0   ;1c2: 00000000
 ORI.b #$00,D0   ;1c6: 00000000
 Dc.w $0000      ;1ca

LAB_000F:
  MOVEM.l D2/A0,-(A7)
  LEA LAB_000B(PC),A0
  MOVE.w D1,D2
  AND.w #$0003,D2
  BEQ.w LAB_0010
    LEA LAB_000E+1(PC),A0
  LAB_0010:
  AND.w #$00ff,D0
  MOVE.b 0(A0,D0.W),D0
  BEQ.w LAB_0013
    BTST #3,D1
    BEQ.w LAB_0012
      CMPI.w #$0041,D0
      BCS.w LAB_0013
        CMPI.w #$007a,D0
        BHI.w LAB_0013
          CMPI.w #$005a,D0
          BLS.w LAB_0011
            CMPI.w #$0061,D0
            BCS.w LAB_0013
          LAB_0011:
          AND.w #$ffdf,D0
          SUBI.w #$0040,D0
          BRA.w LAB_0013
    LAB_0012:
      CMPI.b #$61,D0
      BCS.w LAB_0013
        CMPI.b #$7a,D0
        BHI.w LAB_0013
          BTST #2,D1
          BEQ.w LAB_0013
            SUBI.w #$0020,D0
  LAB_0013:
  MOVEM.l (A7)+,D2/A0
RTS

LAB_0014:
  CMPI.w #$0059,D0
  BHI.w LAB_0016
    CMPI.w #$0050,D0
    BCS.w LAB_0015
      ADDI.w #$0031,D0
      RTS
    LAB_0015:
      CMPI.w #$004c,D0
      BCS.w LAB_0017
      SUBI.w #$0030,D0
      RTS
  LAB_0016:
    CMPI.w #$007A,D0               ; test if NM_WHEEL_UP
    BNE.w nowheelup
      RTS
    nowheelup:
    CMPI.w #$007B,D0               ; test if NM_WHEEP_DOWN
    BNE.w nowheeldown
      RTS
    nowheeldown:
    CMPI.w #$005f,D0
    BNE.w LAB_0017
      MOVE.w #$008b,D0
      RTS

  LAB_0017:
  MOVEM.l A0-A2/A6,-(A7)
  LEA InputEvent(PC),A0            ; event
  MOVE.w D0,6(A0)                  ; set eventcode
  MOVE.w D1,8(A0)                  ; set eventqualifier
  LEA rawBuffer(PC),A1             ; buffer
  CLR.w (A1)                       ;
  MOVEQ #1,D1                      ; length
  SUBA.l A2,A2                     ; keymap
  MOVEA.l ptr_ConsoleLib(PC),A6
  ;actual = RawKeyConvert(Event, Buffer, Length, keyMap)
  ;D0                     A0     A1      D1      A2
  JSR _LVORawKeyConvert(A6)        ;-48

  MOVEQ #0,D1
  CMPI.w #$ffff,D0                 ; number of characters in buffer, or $ffff if buffer overflow
  BEQ.w LAB_0018
    MOVE.b rawBuffer(PC),D1
  LAB_0018:
  MOVE.w D1,D0
  MOVEM.l (A7)+,A0-A2/A6
RTS

;-----------------------------------------------------------------

.codeinit:
  LEA ioRequestBlock(PC),A2
  MOVEA.l A2,A0
  MOVE.w #$0028,D0                 ;40
  LAB_001A:
    CLR.w (A0)+
  DBF D0,LAB_001A

  MOVE.b #$05,8(A2)                ; IORequest\Message\Node\Type = 5
  MOVE.w #$0030,18(A2)             ; IORequest\Message\Length = $30

  LEA myMsgList(PC),A0
  MOVE.l A0,8(A0)
  ADDQ.w #4,A0
  MOVE.l A0,-4(A0)

  MOVEA.l ABSEXECBASE,A6
  SUBA.l A1,A1
  JSR -294(A6)                     ;D0 = _FindTask(A1)

  LEA myPort(PC),A3
  MOVE.b #$04,8(A3)                ; MsgPort\Node\Type
  MOVE.l D0,16(A3)                 ; MsgPort\SigTask = thisTask

  MOVEQ #-1,D0
  JSR -330(A6)                     ;D0 = _AllocSignal(D0)
  MOVE.b D0,15(A3)                 ; msgPort\SigBit = mySigbits

  MOVE.l A3,14(A2)                 ; IORequest\Message\ReplyPort = MsgPort

  LEA str_consoleDevice(PC),A0     ; deviceName
  MOVEQ #-1,D0                     ; unit
  MOVEA.l A2,A1                    ; ioRequest
  MOVEQ #0,D1                      ; flags
  JSR -444(A6)                     ;D0 = _OpenDevice(A0=deviceName,D0=unitNumber,A1=ioRequest,D1=flags)

  LEA ioRequestBlock(PC),A0
  LEA ptr_ConsoleLib(PC),A1
  MOVE.l 20(A0),(A1)               ; get LibraryPointer of Device

  LEA LAB_000B(PC),A0
  LEA LAB_000E+1(PC),A1
  MOVEQ #0,D2
  LAB_001B:
    MOVE.w D2,D0
    MOVEQ #0,D1
    BSR.w LAB_0014
    MOVE.b D0,(A0)+
    MOVE.w D2,D0
    MOVEQ #1,D1
    BSR.w LAB_0014
    MOVE.b D0,(A1)+
    ADDQ.w #1,D2
    CMPI.w #$0069,D2                ; 105
  BNE.w LAB_001B
RTS

.codefinit:
  MOVEQ #0,D0
  MOVE.b mySigBit(PC),D0
  MOVEA.l ABSEXECBASE,A6
  JSR -336(A6)              ; _FreeSignal

  LEA ioRequestBlock(PC),A1
JMP -450(A6)                ; _CloseDevice

;----------------------------------------------------------------------

ioRequestBlock:
 ORI.b #$00,D0   ;35c: 00000000
 ORI.b #$00,D0   ;360: 00000000
 ORI.b #$00,D0   ;364: 00000000
 ORI.b #$00,D0   ;368: 00000000
 ORI.b #$00,D0   ;36c: 00000000
 ORI.b #$00,D0   ;370: 00000000
 ORI.b #$00,D0   ;374: 00000000

 ORI.b #$00,D0   ;378: 00000000
 ORI.b #$00,D0   ;37c: 00000000
 ORI.b #$00,D0   ;380: 00000000
 ORI.b #$00,D0   ;384: 00000000
 ORI.b #$00,D0   ;388: 00000000


myPort:
  Dc.l 0         ; 0-3
  Dc.l 0         ; 4-7
  Dc.l 0         ; 8-11
  Dc.w 0         ; 12-13

  Dc.b 0         ; 14             ; Flags
mySigBit:
  Dc.b 0         ; 15             ; SigBit
mySigTask:
  Dc.l 0         ; 16-19          ; SigTask
myMsgList:
  Dc.l 0         ; lh_Head
  Dc.l 0         ; lh_Tail
  Dc.l 0         ; la_TailPred
  Dc.b 0         ; lh_Type
  Dc.b 0         ; l_pad

;MOVEQ #0,D0
;RTS
;Dc.w $0028
