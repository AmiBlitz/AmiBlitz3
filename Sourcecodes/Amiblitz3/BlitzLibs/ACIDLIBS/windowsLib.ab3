; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "windowslib.obj"
; CreateIcon      = 0
; Residents       = "libmacs.res,LVO.res,amigaLibs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 25
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 2
; LabelSearch     = "free"
; LabelRemark     = 0
; LabelAll        = 1
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 5
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 5
; Max IconInfo    = 1
; Max MUIObject   = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 100
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA

;
;      RESURRECTED WINDOWS LIBRARY!
;

; 28th August,1993 (BUM5)
; WTitle(window$,screen$) added (have to insert your own nulls???)
; CloseWindow to keep things straight
; nprint fixed (wrong offset for font height before)
; WPrintScroll (scroll window if cursor below gimme00 window)
; WBlit (straight shape to window command)
; BitMaptoWindow (instead of super-bitmap windows)
; WindowFont now has optional style parameter
; Window supports super bitmap attach (flag $40)
; PositionSuperBitMap
; GetSuperBitMap
; PutSuperBitMap
;
; March 1994, BUM6
; Kludged string gadgets to always give a 'gadgetup' after
;                                 a 'gadgetdown' (FEB 13?)
; WindowTags command added courtesy of Germany :)
; event code poked in userdata of gadget for gtgetintger

; 10/94
; - WTitle: screen title is now optional.  Stephen McNamara was here!
; 09/03/96
; - Window command is now a function.
;   Returns 0 for open failure, else ptr to window
;   Does not now try to TRAP on error - what shit code Simon.........
; 14/03/96
; - Fixed WAITEVENT - now waits on the correct signal bit
; 10/06/97
; - WaitEvent now first checks the intuition message port
;   via updateevents and then exits straight away if an event
;   exists.

#MSGSIZE = 24 + 8


!libheader{#windowslib,init,#long,finit,errors}  ;now returns address of port!

!acommand{#long}
!args{2,$42,$42,$42,$42,3,7,2,2}
!libs{#windowslib,$1380,#screenslib,$1102,#windowslib,$0604,#intuitionlib,#la6}
!subs{dowindow2+1,0,0}
;
!args{2,$42,$42,$42,$42,3,7,2,2,2}
!libs{#windowslib,$1380,#screenslib,$1102,#gadgetslib,$1085,#windowslib,$0604,#intuitionlib,#la6}
!subs{dowindow+1,0,0}   ;*****
;
;!args{2,$42,$42,$42,$42,3,7,$42,$42,2,2}   ;superbitmap dont work
;!libs{#windowslib,$1380,#screenslib,$1102,#gadgetslib,$1083,#windowslib,$0604,#intuitionlib,#la6,#bitmaplib,$1484}
;!subs{dowindow3+1,0,0}   ;*****
;
!name{"Window","Window#,X,Y,Width,Height,Flags,Title$,Dpen,Bpen[,GadgetList#]",_toke}

;!afunction{3}
Dc 3 LSL 8+3,0,0  ;statement OR function!
!args
!libs
!subs{dowaitevent+1,0,0}
!name{"WaitEvent",""}   ;*****

!afunction{3} ;return IDCMP
!args
!libs
!subs{doevent+1,0,0}
!name{"Event",""}   ;*****

!afunction{2}
!args
!libs
!subs{dogadgethit,0,0}
!name{"GadgetHit",""}   ;*****

!afunction{2}
!args
!libs
!subs{doeventwindow,0,0}
!name{"EventWindow",""}

!astatement
!args{3}
!libs
!subs{dowindowidcmp,idcmpchk,0}
!name{"DefaultIDCMP","IDCMP_Flags"} ;*****

!afunction{2}
!args
!libs
!subs{domenuhit,0,0}
!name{"MenuHit",""} ;*****

!afunction{2}
!args
!libs
!subs{doitemhit,0,0}
!name{"ItemHit",""} ;*****

!afunction{2}
!args
!libs
!subs{dosubhit,0,0}
!name{"SubHit",""}  ;*****

!acommand{#long}
;
!args{2}
!libs{#windowslib,$1102,#intuifontlib,$1080,#graphicslib,#la6}
!subs{dowfont+1,wfontchk,0}
;
!args{2,3}
!libs{#windowslib,$1102,#intuifontlib,$1080,#graphicslib,#la6}
!subs{dowfont2+1,wfontchk,0}
;
!name{"WindowFont","IntuiFont# [,SoftStyle] ;work as function too with return ifont Addr"}    ;*****

!astatement
!args{2,2,2}
!libs{#windowslib,$1102,#graphicslib,#la6}
!subs{dowplot+1,wchk,0}
!name{"WPlot","X,Y,Colour"} ;*****

!astatement
!args{2,2,2,2,2}
!libs{#windowslib,$1102,#graphicslib,#la6}
!subs{dowbox+1,wchk,0}
!name{"WBox","X1,Y1,X2,Y2,Colour"}    ;*****

!astatement
!args{2,2,2,2}
!libs{#windowslib,$1102,#graphicslib,#la6}
!subs{dowcircle+1,wchk,0}
!name{"WCircle","X,Y,Radius,Colour"}    ;*****

!astatement
!args{2,2,2,2,2}
!libs{#windowslib,$1102,#graphicslib,#la6}
!subs{dowellipse+1,wchk,0}  ;*****
!name{"WEllipse","X,Y,X Radius,Y Radius,Colour"}

!astatement
!args
!libs{#windowslib,$1102,#graphicslib,#la6}
!subs{dowcls+1,wchk,0}
!args{2}
!libs{#windowslib,$1102,#graphicslib,#la6}
!subs{dowcls2+1,wchk,0}
!name{"WCls","[Colour]"}    ;*****

!astatement
!args{2,2}
!libs{#windowslib,$1102}
!subs{dowlocate,wchk,0}
!name{"WLocate","Cursor x,Cursor y"}

!astatement
!args{2}
!libs{#windowslib,$1380}
!subs{doinwindow,0,0}
!name{"WindowInput","Window#"}

!astatement
!args{2}
!libs{#windowslib,$1380}
!subs{dooutwindow,0,0}
!name{"WindowOutput","Window#"}

!afunction{3}
!args
!libs
!subs{doqual,0,0}
!name{"Qualifier",""}   ;*****

!afunction{2}
!args
!libs
!subs{dorawkey,0,0}
!name{"RawKey",""}  ;*****

!astatement
!args{2}
!libs
!subs{docursor,0,0} ;*****
!name{"Cursor","Thickness : <0 - block, >=0 - underline thickness"}

!afunction{2}
!args
!libs
!subs{doeditat,0,0}
!name{"Editat",""}  ;*****

!astatement
!args
!libs
!subs{doeditfrom,0,0}
!args{2}
!libs
!subs{doeditfrom2,0,0}
!name{"EditFrom","[Characterpos]"}  ;*****

!afunction{2}
!args
!libs
!subs{doeditexit,0,0}
!name{"EditExit",""}    ;*****

!astatement
!args{2,2,2,2,2,2}
!libs{#windowslib,$1102,#graphicslib,#la6}
!subs{dowscroll+1,wchk,0}
!args{2,2,2,2,2,2,2}
!libs{#windowslib,$1102,#graphicslib,#la6}
!subs{dowscroll2+1,wchk,0}
!name{"WScroll","X1,Y1,X2,Y2,Delta X,Delta Y[,colour]"}  ;*****

!afunction{2}
!args
!libs{#windowslib,$1102}
!subs{dowmousex,wchk,0}
!name{"WMouseX",""} ;*****

!afunction{2}
!args
!libs{#windowslib,$1102}
!subs{dowmousey,wchk,0}
!name{"WMouseY",""} ;*****

!astatement
!args{2}
!libs
!subs{dosetpens,0,0}
!args{2,2}
!libs
!subs{dosetpens2,0,0}   ;*****
!name{"WColour","Foreground Colour[,Background Colour]"}

!astatement
!args{2}
!libs
!subs{dosetjam,0,0}
!name{"WJam","Jammode"} ;*****

!astatement
!repargs{0,2,2,2,2}
!libs{#windowslib,$1102,#graphicslib,#la6}
!subs{dowline+1,wlinechk,0} ;*****
!name{"Wline","X1,Y1,X2,Y3[,Xn,Yn...],Colour"}

!astatement
!args{2}
!libs{#windowslib,$1180,#intuitionlib,#la6}
!subs{doactivate+1,wchk,0}
!name{"Activate","Window#"} ;*****

!afunction{2}
!args
!libs{#windowslib,$1102}
!subs{dowindowx,wchk,0}
!name{"WindowX",""} ;*****

!afunction{2}
!args
!libs{#windowslib,$1102}
!subs{dowindowy,wchk,0}
!name{"WindowY",""} ;*****

!afunction{2}
!args
!libs
!subs{buttons+1,0,0}
!name{"MButtons",""}    ;*****

!astatement
!args{2}
!libs{#windowslib,$1201,#windowslib,$0203,#intuitionlib,#la6}
!subs{domenusok+1,0,0}
!name{"Menus","On|Off"} ;*****

!afunction{2}
!args
!libs{#windowslib,$1102}
!subs{dowcursx,wchk,0}
!name{"WCursX",""}  ;*****

!afunction{2}
!args
!libs{#windowslib,$1102}
!subs{dowcursy,wchk,0}
!name{"WCursY",""}  ;*****

!astatement
!args{2}
!libs{#shapeslib,$1280,#windowslib,$1302,#intuitionlib,#la6}
!subs{dowpointer+1,wpointerchk,0}
!name{"WPointer","Shape#"}  ;*****

!astatement
!args
!libs{#windowslib,$1201,#windowslib,$0203,#intuitionlib,#la6}
!subs{domenuson+1,0,0}
!name{"MenusOn",""}

!astatement
!args
!libs{#windowslib,$1201,#windowslib,$0203,#intuitionlib,#la6}
!subs{domenusoff+1,0,0}
!name{"MenusOff",""}

!astatement
!args{2,2}
!libs{#windowslib,$1002,#intuitionlib,#la6}
!subs{dowmove,wmovechk,0}
!name{"WMove","X,Y"}    ;*****

!astatement
!args{2,2}
!libs{#windowslib,$1002,#intuitionlib,#la6}
!subs{dowsize,wsizechk,0}
!name{"WSize","Width,Height"}   ;*****

!afunction{2}
!args
!libs{#windowslib,$1102}
!subs{dowindowwidth,wchk,0}
!name{"WindowWidth",""} ;*****

!afunction{2}
!args
!libs{#windowslib,$1102}
!subs{dowindowheight,wchk,0}
!name{"WindowHeight",""}    ;*****

!afunction{2}
!args
!libs{#windowslib,$1102}
!subs{dogzzwidth,wchk,0}
!name{"InnerWidth",""}  ;*****

!afunction{2}
!args
!libs{#windowslib,$1102}
!subs{dogzzheight,wchk,0}
!name{"InnerHeight",""} ;*****

!astatement
!args
!libs{#windowslib,$1102,#graphicslib,#la6}
!subs{doinnercls+1,wchk,0}
!args{2}
!libs{#windowslib,$1102,#graphicslib,#la6}
!subs{doinnercls2+1,wchk,0}
!name{"InnerCls","[Colour]"}    ;*****

!afunction{2}
!args
!libs{#windowslib,$1102}
!subs{dowtopoff,wchk,0}
!name{"WTopOff",""} ;*****

!afunction{2}
!args
!libs{#windowslib,$1102}
!subs{dowleftoff,wchk,0}
!name{"WLeftOff",""}    ;*****

!astatement
;
!args{2}
!libs
!subs{doslimits2,0,0}
;
!args{2,2,2,2}
!libs
!subs{doslimits,0,0}    ;*****
;
!name{"SizeLimits","Min Width,Min Height,Max Width,Max Height"}

!afunction{2}
!args
!libs
!subs{doemousex,0,0}
!name{"EMouseX",""}

!afunction{2}
!args
!libs
!subs{doemousey,0,0}
!name{"EMouseY",""}

!astatement
!args{3}
!libs
!subs{doaddidcmp,0,0}
!name{"AddIDCMP","IDCMP_Flags"}

!astatement
!args{3}
!libs
!subs{dosubidcmp,0,0}
!name{"SubIDCMP","IDCMP_Flags"}

!astatement
;
!args
!libs
!subs{doflushevents,0,0}
;
!args{3}
!libs
!subs{doflushevents2,0,0}
;
!name{"FlushEvents","[IDCMP_Flag]"}

!astatement
!args
!libs{#windowslib,$1102}
!subs{docatchdoserrs,wchk,0}
!name{"CatchDosErrs",""}

!afunction{3}
!args
!libs{#windowslib,#ua1}
!subs{dowrport,wchk,0}
!args{2}
!libs{#windowslib,$1180}
!subs{dowrport,wchk,0}
!name{"RastPort","[(Window#)]"}

!astatement
!args {#long,#long}
!libs
!subs{dosetevfilter,0,0}
!name{"SetEventFilter","preprocess,postprocess"}

!astatement
!args{#string}
!libs{#windowslib,$1102,#intuitionlib,#la6}
!subs{dowtitle2,wchk,0}
!args{#string,#string}
!libs{#windowslib,$1102,#intuitionlib,#la6}
!subs{dowtitle,wchk,0}
!name{"WTitle","windowtitle$[,screentitle$]"} ;*****

!astatement
!args{2}
!libs{#windowslib,$1380,#intuitionlib,#la6}
!subs{freewindow,0,0}
!name{"CloseWindow","Window#"}     ;*****

!astatement
!args
!libs{#windowslib,$1102,#graphicslib,#la6}
!subs{dowprintscroll,wchk,0}
!name{"WPrintScroll",""}  ;*****

!astatement
!args{2,2,2}
!libs{#windowslib,$1002,#shapeslib,$1280,#graphicslib,#la6}
!subs{dowblit,wblitchk,0}
!name{"WBlit","Shape#,x,y"}  ;*****

!astatement
;
!args{2,2}
!libs{#windowslib,$1081,#bitmaplib,$1180,#graphicslib,#la6}
!subs{dobtow1,wbtowchk,0}
;
!args{2,2,2,2,2,2,2,2}
!libs{#windowslib,$1081,#bitmaplib,$1180,#graphicslib,#la6}
!subs{dobtow2,wbtowchk,0}
;
!name{"BitMaptoWindow","Bitmap#,Window#[,srcx,srcy,destx,desty,wid,height]"}  ;*****

!afunction{#long} ;return event code
!args
!libs
!subs{doeventcode+1,0,0}
!name{"EventCode",""}   ;*****

!afunction{#word} ;return event code
!args
!libs
!subs{doeventqualifier+1,0,0}
!name{"EventQualifier",""}   ;*****

!astatement
!args{#word,#word}
!libs{#windowslib,#ua1,#layerslib,#la6}
!subs{_showsuper,0,0}
!name{"PositionSuperBitMap","x,y"}

!astatement
!args
!libs{#windowslib,#ua0,#graphicslib,#la6}
!subs{_windowtobitmap,0,0}
!name{"GetSuperBitMap",""}

!astatement
!args
!libs{#windowslib,#ua0,#graphicslib,#la6}
!subs{_bitmaptowindow,0,0}
!name{"PutSuperBitMap",""}

!acommand {#long}
;
!args{#word,#long,#string}
!libs{#windowslib,$1380,#screenslib,$1102,#windowslib,$0604,#intuitionlib,#la6}
!subs{dowindowtags1+1,0,0}
;
!args{#word,#long,#string,#long}
!libs{#windowslib,$1380,#screenslib,$1102,#windowslib,$0604,#intuitionlib,#la6}
!subs{dowindowtags3+1,0,0}
;
!repargs{3,2,#word,#long,#string,#long|#push,#long|#push}
!libs{#windowslib,$1380,#screenslib,$1102,#windowslib,$0604,#intuitionlib,#la6}
!subs{dowindowtags2+1,0,0}
;
!name{"WindowTags","Window#,Flags,Title$ [,&TagList] or [[,Tag,Data]...]"}

!astatement
!args {#byte,#long}
!libs
!subs{dosetsigbit+1,0,0}
!name{"AddWaitEvent","bitnumber,returncode.l"}

!astatement
!args {#byte,#long}
!libs
!subs{doclrsigbit+1,0,0}
!name{"DelWaitEvent","bitnumber"}

!afunction{#long} ;return event iAddress
!args
!libs
!subs{doiAddress+1,0,0}
!name{"EventiAddress","Return Intui IAddress "}   ;*****

!afunction{#long}
!args
!libs
!subs{dowaitsigbits+1,0,0}
!name{"WaitEventSigBits","return the sig recieved from WaitEvent"}   ;*****

!afunction{#long}
!args
!libs
!subs{doeventseconds+1,0,0}
!name{"EventSeconds",""}   ;*****

!afunction{#long}
!args
!libs
!subs{doeventmicrons+1,0,0}
!name{"EventMicros",""}   ;*****

!astatement
!args {#long}
!libs
!subs{dowaiteventmask+1,0,0}
!name{"WaitEventMask","Signalmask ; sets the signalmask for waitevent" }

!afunction{#long}
!args
!libs
!subs{doblitzmsgport+1,0,0}
!name{"BlitzMsgPort","Return the adress of the Eventx Messageport"}   ;*****

!afunction{#long}
!args
!libs
!subs{dodoubleclick+1,0,0}
!name{"EventDoubleclick","Return true if a doubleclick occur"}   ;*****

!astatement
!args {#long}
!libs
!subs{dobackfillhook0,0,0}
!args{#long,#long}
!libs
!subs{dobackfillhook,0,0}

!name{"WindowBackFillHook","Adress of the function[,Hook number (max 19)]"}   ;*****

!afunction{3} ;return IDCMP
!args
!libs
!subs{doeventtest,0,0}
!name{"EventTest","read the next event but do not remove from list"}   ;*****

!afunction{2}
!args
!libs
!subs{dorealrawkey,0,0}
!name{"EventRawKey","give real rawkey and keyoff "}  ;give real rawkey and keyoff*****

!afunction{2}
!args{7,2}
!libs{#windowslib,#ua1}
!subs{dotextfit,0,0}
!name{"TextFit","(string,xwith);give the number of chars that fit in this pixel width"}

!afunction{2}
!args
!libs{#windowslib,#ua1}
!subs{dofontheight,0,0}
!name{"WinFontHeight","give fontsize of a window "}

!astatement
!args {#long}
!libs
!subs{dormbtrap,0,0}
!name{"SetMenuVerifyHandler","Address of the Handler for verify if a menu should show no menu *msg\Code=#MENUCANCEL"}   ;*****

!afunction{2}
!args
!libs{#windowslib,#ua1}
!subs{doeventvanillakey,0,0}
!name{"EventVanillaKey","return the translatet rawkey event "}

!afunction{2}
!args
!libs{#windowslib,$1102}
!subs{dowbottomsize,wchk,0}
!name{"WBottomSize","return the size of the bottom border"} ;*****

!afunction{2}
!args
!libs{#windowslib,$1102}
!subs{dowrightsize,wchk,0}
!name{"WRightSize","return the size of the right border"} ;*****

!afunction{2}
!args{2}
!libs{#windowslib,$1102}
!subs{doWindowIsOpen,0,0}
!name{"WindowIsOpen","(win#)  -- returns True, if window with number win# is available"}


; *******************************++ Library entry points:

init:!nullsub{codeinit,0,0,#graphicslib,#la0,#intuitionlib,#la1}

finit:!nullsub{codefinit,0,0}

_load:!nullsub{0,0,0}

_save:!nullsub{0,0,0}

_use:!nullsub{dousewindow,0,0}

_free:!nullsub{freewindow,0,0,#intuitionlib,#la6}

!libfin{_toke,_load,_save,_use,_free,20,5}      ;was 4 (16)

;   A Window :
;   00.l : pointer to Window Structure
;   04.w : Text cursor X Position
;   06.w : Text cursor Y position
;   08.l : pointer data
;   12.l : pointer length
;   16.w : super bitmap x
;   20.w : super bitmap y

;***************** Code Below *******************
doeventvanillakey
MOVEQ #0,d0
MOVE.w vanillakey,d0
RTS
trapaddress: Dc.l 0
dormbtrap
MOVE.l d0,trapaddress
RTS
dotextfit
MOVE.l d0,a3
MOVE.l d1,d2
MOVE.l (a1),a1
MOVE.l $32(a1),a2
MOVEQ #0,d3
ALibJsr GraphicsBase
again:MOVE.l a3,a0
MOVEQ #1,d0
MOVE.l a2,a1
JSR -54(a6)
ADDQ.l #1,d3
ADDQ.l #1,a3
SUB.l d0,d2
BPL again
MOVE.l d3,d0
SUBQ.l #1,d0
RTS
dofontheight
MOVE.l (a1),a1
MOVE.l $32(a1),a1
MOVE.w $3a(a1),d0
RTS
dorealrawkey
 MOVEQ #0,d0
 MOVE.w realrawkey,d0
 RTS
dodoubleclick
  ;BTST #14,evqualifier
  ;BEQ 'l1
  CMP.l #$20,eventclass
  BEQ 'doit
  CMP.l #$40,eventclass
  BEQ 'doit
  CMP.w #$68,evcode
  BNE 'l1b
  CMP.l #8,eventclass
  BNE 'l1b
  ;MOVE.l evcode(pc),oldevcode
'doit  MOVEM.l d2-d3/a6,-(a7)
  MOVE.l seconds(pc),d2
  MOVE.l microns(pc),d3
  MOVE.l oldsec(pc),d0
  MOVE.l oldmicro(pc),d1
  MOVE.l d2,oldsec
  MOVE.l d3,oldmicro
  MOVE.l d0,-(a7)
  ALibJsr IntuitionBase
  MOVE.l (a7)+,d0
  JSR -102(a6)
  MOVEM.l (a7)+,d2-d3/a6
  RTS
'l1:
  MOVE.l evcode(pc),oldevcode
  MOVE.l seconds(pc),oldsec
  MOVE.l microns(pc),oldmicro
'l1b MOVEQ #0,d0
  RTS
dowaiteventmask:
  LEA winsigbits(pc),a0
  MOVE.l  d0,(a0)
  RTS
doblitzmsgport:
  MOVE.l  #myport,d0
  RTS

_showsuper:
  MOVEM 16(a1),d2-d3:MOVEM d0-d1,16(a1)
  SUB d2,d0:SUB d3,d1:EXT.l d0:EXT.l d1
  MOVE.l (a1),a1:MOVE.l 50(a1),a1:MOVE.l (a1),a1 ;layer!
  JMP -72(a6)

.doiAddress:
  MOVE.l  iAddress(pc),d0
  RTS

.doeventseconds:
  MOVE.l  seconds(pc),d0
  RTS

doeventmicrons:
  MOVE.l  microns(pc),d0
  RTS

.dosetsigbit:
  AND.l #$ff,d0
  MOVE.l  winsigbits,d2
  BSET  d0,d2
  MOVE.l  d2,winsigbits
  LEA     wincodes(pc),a0
  ASL.l   #2,d0
  MOVE.l  d1,0(a0,d0.l)
  RTS

doclrsigbit:
  AND.l #$ff,d0
  MOVE.l  winsigbits,d2
  BCLR    d0,d2
  MOVE.l  d2,winsigbits
  LEA     wincodes(pc),a0
  ASL.l   #2,d0
  MOVE.l  #0,0(a0,d0.l)
  RTS

_windowtobitmap:
  MOVE.l (a0),a0:MOVE.l 50(a0),a0:MOVE.l (a0),a0:JMP _SyncSBitMap(a6)

_bitmaptowindow:
  MOVE.l (a0),a0:MOVE.l 50(a0),a0:MOVE.l (a0),a0:JMP _CopySBitMap(a6)

;*rp.RastPort=RastPort(0)
;*lr.Layer=*rp\Layer
;ScrollLayer_ 0,*lr,1,0

prefilter:JMP 0  ;seteventfilter for event preprocessing routine
postfilter:JMP 0 ;& postprocessing

zero:Dc.l 0
idcmp:Dc.l $100+$200+$40+$20+$400+8+$40000+$80000+2+4
;
evcode:Dc 0      ;simon was here :)
evqualifier:Dc 0
iAddress: Dc.l  0
seconds:  Dc.l  0
microns:  Dc.l  0
;
eventgnum:Dc 0 ;event gadget number
eventwin:Dc.l 0 ;address of window event came from!
menunum:Dc 0
itemnum:Dc 0
subnum:Dc 0
temp:Dc 0
gfxbase:Dc.l 0
prwindow:Dc.l 0
outkey:Dc 0 ;outstanding keystroke a-la event
outwindow:Dc.l 0:;window of above
outq:Dc 0
;
;*** NEW ***
outr:Dc 0
;
kqualifier:Dc 0:;qualifier of last keystroke
lrawkey:Dc 0:;most recently got raw key.
;
msgon:Dc 0 ;flag - enable msg gathering
oldexcode:Dc.l 0
oldexbits:Dc.l 0
firstmess:Dc.l 0 ;linked list of intuimessages. added on exception
nextmess:Dc.l firstmess ;next message pointer
inwindow:Dc.l 0 ;which window to get inkeys from (or -1 for any)
underline:Dc -1:;block type cursor
efrom:Dc 0:;where to begin editting
eat:Dc 0:;where last edit finished
emode:Dc 0:;0=normal, <>0=terminated on any key.
eexit:Dc 0:;ascii that terminated edit.
fpen:Dc 0:;foreground text colour
bpen:Dc 0:;background text colour
tjam:Dc 0:;text jam mode
outmouse:Dc 0 ;outstanding mouse button event.
outmwin:Dc.l 0  ;window of above.
linw:Dc.l 0
lflgs:Dc 0
evmousex:Dc 0
evmousey:      Dc 0
;
;00.l : Next
;04.l : Class
;08.w : code
;10.w : qualifier
;12.l : iAddress
;16.w : Mouse x
;18.w : Mouse y
;20.l : Window
;24.w :rawkey
;  **** 26 ****

myport
mynode:        Dc.l 0,0
               Dc.b 0,0
               Dc.l 0 ;node
myact:         Dc.b 0
mysig:         Dc.b 0
mytask:        Dc.l 0
mylist:        Dc.l 0,0,0:
               Dc.b 0,0

_sizelimits:   Dc 128,64,0,0
_sizelimitsok: Dc -1      ;on!
oldwptr:       Dc.l 0
intbase:       Dc.l 0

.dosetevfilter:
  MOVE.l d0,prefilter+2
  MOVE.l d1,postfilter+2
RTS

.dowrport:
  Dc $a000,'f-'s
 's:
  MOVE.l (a1),a1
  MOVE.l 50(a1),d0
 'f
RTS


docatchdoserrs  ;get dos error reqs up on our window!
  MOVE.l 4,a0
  MOVE.l 276(a0),a0
  MOVE.l (a1),184(a0)
RTS

doflushevents
  BSR updateevents
  BSR unlinkall
  CLR outkey
  CLR outmouse
RTS

doflushevents2  ;flush all events of type d0.
  MOVE.l d0,d7
  BSR updateevents

  LEA firstmess(pc),a0

 'loop:
    MOVE.l (a0),d0
    BEQ 'done
      MOVE.l d0,a1
      CMP.l 4(a1),d7
      BNE 'more
        MOVE.l a0,-(a7)
        BSR unlinkmess
        MOVE.l (a7)+,a0
        BRA 'loop
     'more:
   MOVE.l a1,a0
  BRA 'loop
 'done
  CMP.l #$400,d7
  BNE 'skip
    CLR outkey
 'skip
  CMP.l #8,d7
  BNE 'skip2
    CLR outmouse
 'skip2
RTS

doaddidcmp:OR.l d0,idcmp:RTS

dosubidcmp:NOT.l d0:AND.l d0,idcmp:RTS

.doslimits:
  LEA _sizelimits(pc),a0
  MOVE d0,(a0)+
  MOVE d1,(a0)+
  MOVE d2,(a0)+
  MOVE d3,(a0)
RTS

.doslimits2:
  MOVE d0,_sizelimitsok
RTS

.dowtopoff
MOVEQ #0,d0:MOVE.l (a1),a0:MOVE.b 55(a0),d0:RTS

.dowleftoff
MOVEQ #0,d0:MOVE.l (a1),a0:MOVE.b 54(a0),d0:RTS

.dowindowwidth
MOVE.l (a1),a1:MOVE 8(a1),d0:RTS

.dowindowheight
MOVE.l (a1),a1:MOVE 10(a1),d0:RTS

.dogzzwidth
MOVE.l (a1),a1:MOVE 112(a1),d0:RTS

.dogzzheight
MOVE.l (a1),a1:MOVE 114(a1),d0:RTS

.dowbottomsize
MOVEQ #0,d0:MOVE.l (a1),a0:MOVE.b 57(a0),d0:RTS
.dowrightsize
MOVEQ #0,d0:MOVE.l (a1),a0:MOVE.b 56(a0),d0:RTS
 




;.dogetactive
;  MOVE.l a3,0(a5,d6):MOVE.l d1,d7:BSR freewindow
;  MOVE.l SizeOf.IntuitionBase\ActiveWindow(a6),(a3)
;  RTS

.dobtow1  ;use bitmap for wid height
  MOVE.l (a0),a0:MOVE.l 50(a0),a0
  MOVEQ#0,d0:MOVEQ#0,d1:MOVEQ#0,d2:MOVEQ#0,d3
  MOVEM (a1),d4-d5:ASL#3,d4:MOVE #$c0,d6
  EXG a0,a1:MOVE #$c0,d6:JMP _BltBitMapRastPort(a6)

.dobtow2
  MOVE.l (a0),a0:MOVE.l 50(a0),a0
  MOVE d2,d0:MOVE d3,d1:MOVE d4,d2:MOVE d5,d3
  MOVE -(a2),d4:MOVE -(a2),d5
  EXG a0,a1:MOVE #$c0,d6:JMP _BltBitMapRastPort(a6)

.dowblit
  MOVE.l (a0),a0:MOVE.l 50(a0),a0:LEA mybmap(pc),a1 ;rp,image
  MOVE 6(a2),(a1):MOVE 2(a2),2(a1):MOVE 4(a2),4(a1)
  MOVE.l 14(a2),a3:MOVE 22(a2),d6:LEA 8(a1),a1:MOVEQ#7,d7
  'loop:MOVE.l a3,(a1)+:ADD d6,a3:DBF d7,'loop
  MOVE.l a0,a1:LEA mybmap(pc),a0
  MOVE d2,d3:MOVE d1,d2:SUB 10(a2),d2:SUB 12(a2),d3:MOVEQ#0,d0:MOVEQ#0,d1
  MOVEM (a2),d4-d5:MOVE.l 18(a2),d7:BEQ nocookie
  MOVE #$e0,d6:MOVE.l d7,a2:JMP _BltMaskBitMapRastPort(a6)
nocookie
  MOVE #$c0,d6:JMP _BltBitMapRastPort(a6)

mybmap
  Dc.w 0,0,0,0          ;wid height flags|depth pad
  Dc.l 0,0,0,0,0,0,0,0  ;bitplanes

.dowprintscroll
  MOVE 6(a1),d1  ;wcursy    a1=bwindow a0=window a2=rport
  MOVE.l (a1),a0:MOVEM 112(a0),d4-d5:MOVE.l 50(a0),a2
  SUB d5,d1:ADD $3a(a2),d1:BLE notscroll:SUB d1,6(a1)
  MOVEQ#0,d0:MOVEQ#0,d2:MOVEQ#0,d3
  MOVEQ #0,d7:MOVE #_ScrollRaster,d6:BRA ezfunc
notscroll:RTS

dowtitle2:
  MOVEQ #-1,d1
.dowtitle
  MOVE.l  (a1),a0
  MOVE.l d1,d4
  MOVE.l #-1,a1
  MOVE.l  -(a2),d1
  BEQ 'nowtitle
  MOVEM.l d0-d3,-(a7)

  MOVE.l  32(a0),d0
  BEQ     'okok
  ALibJsr $cf02               ; free up window title
'okok:
  MOVEM.l (a7)+,d0-d3
  ALibJsr $cf01:MOVE.l d0,a1
'nowtitle
  MOVE.l d4,d0 : CMPI.b #-1,d0 : BEQ 'skipit
  MOVE.l  $68(a0),d0
  BEQ     'okok1
  ;ALibJsr $cf02               ; free up screen title
  'okok1:
                                                                                                                                                                                                                                                        


  MOVE.l -(a2),d1:ALibJsr $cf01
  'skipit : MOVE.l d0,a2 : JSR _SetWindowTitles(a6) : RTS

.dowmove  ;move window a0 to d1,d2
MOVE.l (a0),a0
;
MOVE.l a0,a2:MOVE d0,d2:MOVE d1,d3
;
SUB 4(a0),d0:SUB 6(a0),d1:JSR _MoveWindow(a6)
'hmm
;CMP 4(a2),d2:BNE 'hmm:CMP 6(a2),d3:BNE 'hmm
RTS

.dowsize  ;size window a0 to d1,d2
MOVE.l (a0),a0
;
MOVE.l a0,a2:MOVE d0,d2:MOVE d1,d3
;
SUB 8(a0),d0:SUB 10(a0),d1:JSR _SizeWindow(a6)
'hmm
;CMP 8(a2),d2:BNE 'hmm:CMP 10(a2),d3:BNE 'hmm
RTS

.domenusok:TST d0:BEQ domenusoff
;
domenuson  ;turn on all menus
MOVEQ #0,d3:MOVEQ #0,d4
;
newidcmp:SUBQ #1,d2
'loop:MOVE.l (a2),d0:BEQ 'more
MOVE.l d0,a0:BCLR #0,25(a0):OR d4,24(a0)
MOVE.l 82(a0),d0:BCLR #13,d0:OR d3,d0
JSR _ModifyIDCMP(a6)
'more:LEA 16(a2),a2:DBF d2,'loop:RTS

.domenusoff ;turn off all menus
  MOVE #$2000,d3
  MOVEQ #1,d4
BRA newidcmp

.dowpointer
  MOVE.L 8(a3),d0
  BEQ 'skip               ; pointer already there?
    MOVE.l (a3),a0        ; old pointer
    JSR _ClearPointer(a6)
    MOVE.l 8(a3),a1
    CLR.l 8(a3)
    MOVE.l 12(a3),d0
    ALibJsr $c003
 'skip:

  MOVEQ #0,d0:MOVE 2(a2),d0:ADDQ #2,d0:LSL #2,d0
  MOVE.l d0,12(a3):MOVEQ #2,d1:ALibJsr $c002
  MOVE.l d0,a0:MOVE.l a0,8(a3):CLR.l (a0)+
  MOVE.l 14(a2),a1:MOVE 22(a2),d0:MOVE 2(a2),d1:SUBQ #1,d1
 'loop:
    MOVE (a1)+,(a0)+
    MOVE -2(a1,d0),(a0)+
  DBF d1,'loop
  CLR.l (a0)+
  MOVE.l (a3),a0     ; window
  MOVE.l 8(a3),a1    ; pointer
  MOVEQ #0,d0
  MOVEQ #0,d1
  MOVE 2(a2),d0      ; height
  MOVE (a2),d1       ; width
  MOVE 10(a2),d2     ; xoffset
  MOVE 12(a2),d3     ; yoffset
JMP _SetPointer(a6)

.doactivate:
  MOVE.l (a1),a0
JMP _ActivateWindow(a6)

dosetpens2:MOVE d1,bpen
dosetpens:MOVE d0,fpen:RTS
dosetjam:MOVE d0,tjam:RTS

dowindowx:MOVE.l (a1),a0:MOVE 4(a0),d0
BTST #2,26(a0):BEQ 'done
MOVEQ #0,d1:MOVE.b 54(a0),d1:ADD d1,d0
'done:RTS

dowmousex:MOVE.l (a1),a0:MOVE 14(a0),d0
BTST #2,26(a0):BEQ 'done
MOVEQ #0,d1:MOVE.b 54(a0),d1:SUB d1,d0
'done:RTS

dowindowy:MOVE.l (a1),a0:MOVE 6(a0),d0
BTST #2,26(a0):BEQ 'done
MOVEQ #0,d1:MOVE.b 55(a0),d1:ADD d1,d0
'done:RTS

dowmousey:MOVE.l (a1),a0:MOVE 12(a0),d0
BTST #2,26(a0):BEQ 'done
MOVEQ #0,d1:MOVE.b 55(a0),d1:SUB d1,d0
'done:RTS

doeditat:MOVE eat(pc),d0:RTS

doeditfrom:CLR emode:CLR efrom:RTS

doeditfrom2:MOVE #-1,emode:MOVE d0,efrom:RTS

doeditexit:MOVE eexit(pc),d0:RTS

docursor:MOVE d0,underline:RTS

doqual:MOVE kqualifier(pc),d0:AND #255,d0:RTS

dorawkey:MOVE lrawkey(pc),d0:RTS

dousewindow:;set used window as input and output window.
BSR dooutwindow
doinwindow:
  MOVE.l a3,inwindow
  LEA windowinp(pc),a0
  ALibJsr #setInputChannel
RTS

dooutwindow:
  MOVE.l a3,prwindow
  LEA windowprint(pc),a0
  ALibJsr #setOutputChannel                                          ; setOutputChannel?
RTS

.dowcursx
;
MOVE 4(a1),d0:MOVE.l (a1),a0:MOVE.b 122(a0),d1:EXT d1
SUB d1,d0:RTS

dowcursy
;
MOVE 6(a1),d0:MOVE.l (a1),a0:MOVE.b 123(a0),d1:EXT d1
SUB d1,d0:RTS

.dowlocate:;d0=x, d1=y, a1=used window
;
MOVE.l (a1),a0:MOVE.b 122(a0),d2:MOVE.b 123(a0),d3
EXT d2:EXT d3:ADD d2,d0:ADD d3,d1
MOVE d0,4(a1):MOVE d1,6(a1):RTS

setpen2:MOVE.l (a1),a1:MOVE.l 50(a1),a2
;
setpen:;d7=pen, a2=rastport
MOVEM d0-d1,-(a7)
MOVE.l a2,a1:MOVE d7,d0:JSR _SetAPen(a6)
MOVE.l a2,a1:MOVE bpen(pc),d0:JSR _SetBPen(a6)
MOVE.l a2,a1:MOVE tjam(pc),d0:JSR _SetDrMd(a6)
MOVEM (a7)+,d0-d1:MOVE.l a2,a1
RTS

.dowline:;d7=numargs (at least 2!), d0=colour
;
MOVE d7,d2:MOVE.l a2,a3:MOVE d0,d7
BSR setpen2
MOVE.l a3,a0:MOVE d2,d0
LSL #2,d2:SUB d2,a0:MOVE.l a0,a3:MOVE d0,d1:SUBQ #1,d1
;
'cswap:MOVE (a3),d2:MOVE 2(a3),(a3)+:MOVE d2,(a3)+
DBF d1,'cswap
;
MOVEM.l d0/a1,-(a7)
MOVE (a0)+,d0:MOVE (a0)+,d1:MOVE.l a0,-(a7)
JSR _Move(a6)
MOVE.l (a7)+,a0:MOVEM.l (a7)+,d0/a1:SUBQ #1,d0
;
JMP _PolyDraw(a6)

.dowcls:MOVEQ #0,d0
dowcls2:MOVE d0,d7:MOVE.l (a1),a0
MOVEQ #0,d0:MOVEQ #1,d1
MOVE 8(a0),d2:SUBQ #1,d2:MOVE 10(a0),d3:SUBQ #1,d3
BRA dowbox2

.doinnercls:MOVEQ #0,d0
doinnercls2:MOVE d0,d7:MOVE.l (a1),a0

MOVE.b 56(a0),d0:MOVE.b 57(a0),d1
EXT d0:EXT d1
MOVE 8(a0),d2:MOVE 10(a0),d3
SUB d0,d2:SUB d1,d3:SUBQ #1,d2:SUBQ #1,d3
;
MOVEQ #0,d0:MOVEQ #0,d1
MOVE.b 54(a0),d0:MOVE.b 55(a0),d1
;
BRA dowbox2
;
.dowbox:;d0=x,d1=y,d2=x2,d3=y2,d4=colour
;
MOVE d4,d7:CMP d2,d0:BLS 'skip1:EXG d0,d2
'skip1:CMP d3,d1:BLS dowbox2:EXG d1,d3
dowbox2:MOVE #_RectFill,d6:BRA ezfunc

.dowplot:;d0=x,d1=y,d2=colour
;
MOVE d2,d7:MOVE #_WritePixel,d6
;
.ezfunc:BSR setpen2:JMP 0(a6,d6)

.dowcircle:;d0=x,d1=y,d2=radius,d3=colour
;
MOVE d3,d4:MOVE d2,d3
;
dowellipse:;d0=x,d1=y,d2=x radius, d3=y radius,d4=colour
;
MOVE d4,d7:MOVE #_DrawEllipse,d6:BRA ezfunc

dowscroll2:
  MOVE.w    bpen(pc),-(a7)
  MOVE.w    d6,bpen
  BSR       dowscroll
  MOVE.w    (a7)+,bpen
RTS

.dowscroll:;d0=x1, d1=y1, d2=x2, d3=y2, d4=deltax, d5=deltay
  ;a1=used window
  ;
  EXG d0,d4:EXG d1,d5 ;delats to d0/d1
  EXG d2,d4:EXG d3,d5
  MOVEQ #0,d7:MOVE #_ScrollRaster,d6
BRA ezfunc

.dowindowidcmp
  MOVE.l d0,idcmp
RTS

.codeinit:;set up a port for windows to use
  ;
  ;first, initialize list header!
  ;
  MOVE.l a0,gfxbase
  MOVE.l a1,intbase
  MOVE.l 4,a1:MOVE.l 276(a1),a1:MOVE.l 184(a1),oldwptr
  ;
  LEA mylist(pc),a1
  MOVE.l a1,8(a1) : ADDQ #4,a1 : MOVE.l a1,-4(a1) : CLR.l (a1)
  MOVE.l 4,a6 : SUB.l a1,a1 : JSR _FindTask(a6)
  MOVE.l d0,mytask
  MOVEQ #-1,d0 : JSR _AllocSignal(a6) : MOVE.b d0,mysig
  CLR.b myact
  MOVEQ #0,d1
  BSET d0,d1
  MOVE.l d1,winsigbits
  ;
  ;set up message list
  ;
  CLR.l firstmess:MOVE.l #firstmess,nextmess
  ;
  MOVE.l #-1,eventgnum:MOVE.l #-1,menunum:MOVE #-1,subnum
  CLR.l prwindow:CLR outkey:CLR.l eventwin:CLR kqualifier
  MOVE #-1,underline:CLR emode:CLR efrom:CLR eexit
  MOVE #1,fpen:MOVE #0,bpen:MOVE #1,tjam
  CLR.l outmwin:CLR.l linw
  LEA _sizelimits(pc),a0
  MOVE #128,(a0)+ : MOVE #64,(a0)+ : MOVE.l #-1,(a0)
  MOVE #-1,_sizelimitsok:CLR.l evmousex
  ;
  MOVE.l #myport,d0
RTS

.updateevents:                          ;add any outstanding messages to my list
  MOVE.l a6,-(a7)
  ;
 'loop:
    BSR readevent
  BNE 'loop
  MOVE.l (a7)+,a6
RTS

.readevent:                            ;return ne if a message was read.....
  ;
  MOVE.l 4,a6                          ;execbase to A6
  ;
  mloop:
    LEA myport(pc),a0
    JSR _GetMsg(a6)
    MOVE.l d0,mymess
    BNE yom
      RTS
    yom

    TST.l prefilter+2                  ; if a prefilter has been set by SetEventFilter
    BEQ nof0
      BSR prefilter
      TST.l d0
        BEQ dunmess
    nof0:

    MOVE.l d0,a2
    CMP.l #$2000,20(a2)
    BNE notmenu
      TST.l trapaddress                              ;set by SetVerifyMenuHandler()
      BEQ 'l1
        MOVEM.l d0-d7/a0-a6,-(a7)
        MOVE.l trapaddress,a0
        JSR (a0)
        MOVEM.l (a7)+,d0-d7/a0-a6
        BRA dunmess
     'l1
       MOVE #2,24(a2)
       BRA dunmess
    notmenu:
      CMP.l #$400,20(a2)
      BNE domess
      BTST #7,25(a2):BEQ domess
      BRA domess
    dunmess:
    ;
    TST.l postfilter+2
    BEQ nofo1
      BSR postfilter
    nofo1
    MOVE.l mymess(pc),a1:JSR _ReplyMsg(a6)
  BRA mloop

  domess:
  ; alloc memory for storing data
  MOVEQ ##MSGSIZE,d0 : MOVEQ #1,d1 : ALibJsr $c002 : MOVE.l d0,a0

  MOVE.l nextmess(pc),a1:MOVE.l a0,(a1):MOVE.l a0,nextmess:CLR.l (a0)+

;  CMP.l #0,20(a2)
;  BEQ skiptrap
;    CMP.l ##IDCMP_VANILLAKEY,20(a2)
;    BNE skiptrap
;      TRAP #1
;  skiptrap:

  MOVE.l 20(a2),(a0)+    ; class         4
  MOVE 24(a2),(a0)+      ; code          2
  MOVE 26(a2),(a0)+      ; qualifier     2
  MOVE.l 28(a2),(a0)+    ; iaddress      4
  MOVE.l 32(a2),(a0)+    ; mousex,mousey 4
  MOVE.l 44(a2),(a0)+    ; idcmpwindow   4
  ;SM
  MOVE.l 36(a2),(a0)+    ; Store seconds 4
  MOVE.l 40(a2),(a0)+    ; Store microns 4
  ;SM

  MOVE.l a2,d0
  ;
  TST.l postfilter+2:BEQ nofo2:BSR postfilter:nofo2
  ;
  MOVE.l mymess(pc),a1
  JSR _ReplyMsg(a6)
  MOVEQ #-1,d0
RTS

mymess:Dc.l 0



.codefinit:              ;free up port
  MOVE.l 4,a6 : MOVEQ #0,d0 : MOVE.b mysig(pc),d0
  JSR _FreeSignal(a6)
  MOVE.l 4,a1 : MOVE.l 276(a1),a1
  MOVE.l oldwptr(pc),184(a1)
RTS

.notbuttongad
;
;check if it's cycling!
;
MOVE.l 26(a2),d0:BEQ 'done:BTST #0,14(a2):BNE 'done
;
MOVEM.l a4-a5,-(a7):MOVE.l d0,a3:MOVE.l 12(a3),a4 ;current text at.
MOVE.l 20(a3),a5:MOVE.l a4,d2:SUB.l a5,d2:MOVE.l -(a5),d1
SUB.l d2,d1
'loop:SUBQ.l #1,d1:BMI 'wrap:TST.b (a4)+:BNE 'loop
MOVE.l a4,12(a3):BRA 'done2
'wrap:MOVE.l 20(a3),12(a3)
'done2:MOVEM.l (a7)+,a4-a5:MOVE.l a2,a3:BRA redrawgad
;
'done:RTS

;a1=event
.gadgetevent
MOVE.l 12(a1),a2:MOVE 38(a2),eventgnum
CMP #"bL",40(a2):BNE 'done:MOVE 42(a2),d6:BEQ notbuttongad
;
;button style gadget!
;
MOVE.l 20(a1),a3:LEA 62(a3),a3   ;window.
'loop:MOVE.l (a3),d0:BEQ 'bye:MOVE.l d0,a3
CMP #"bL",40(a3):BNE 'loop:CMP 42(a3),d6:BNE 'loop
CMP.l a3,a2:BEQ 'loop:BTST #7,13(a3):BEQ 'loop
;
;this is the same button group, different button, and button on
;IE: turn it off!
;
BCLR #7,13(a3):BSR refgada3:BRA 'loop
;
'bye:BTST #7,13(a2):BNE 'done
BSET #7,13(a2):MOVE.l a2,a3:BRA refgada3
;
'done:RTS

refgada3  ;a3=button to refresh
MOVE 12(a3),d0:AND #3,d0:BEQ 'skip
CMP #1,d0:BNE redrawgad
'skip
MOVE.l 18(a3),-(a7):CLR.l 18(a3)
MOVE.l 22(a3),-(a7):CLR.l 22(a3)
MOVE.l 26(a3),-(a7):CLR.l 26(a3)
MOVE 12(a3),-(a7):BSET #7,13(a3):BSR redrawgad:MOVE (a7)+,12(a3)
MOVE.l (a7)+,26(a3)
MOVE.l (a7)+,22(a3)
MOVE.l (a7)+,18(a3)
RTS

redrawgad
MOVEM.l a0-a2/a6,-(a7)
MOVE.l a3,a0:MOVE.l 20(a1),a1:SUB.l a2,a2:MOVEQ #1,d0
MOVE.l intbase(pc),a6:JSR -432(a6)  ;refresh glist
MOVEM.l (a7)+,a0-a2/a6:RTS

kludgegnum  ;non zero=outstanding (!) gadget up event
Dc 0

.dowaitevent:        ;wait for some kind of event!
  BSR updateevents

 'loop:
    ;BSR updateevents
    MOVE.l firstmess(pc),d0:BNE 'got:;something there already
    MOVE.l a6,-(a7):
    MOVE.l 4,a6

    MOVE.l  winsigbits(pc),d0
    JSR     _Wait(a6)
    MOVE.l  (a7)+,a6
    MOVE.l  d0,sigbits
    MOVEQ.l #0,d1
   'loopy:
      BTST d1,d0
      BNE  'ok1
        ADDQ.l #1,d1
    BRA  'loopy
   'ok1:

    CMP.b  mysig,d1
    BEQ    'ok2
      LEA    wincodes(pc),a0
      ASL.l  #2,d1
      MOVE.l 0(a0,d1.l),d0
      RTS
   'ok2:
    BSR updateevents

   'got:
    MOVE.b #0,test
    BSR doevent2
  BEQ 'loop
RTS

.dowaitsigbits:
  MOVE.l sigbits(pc),d0
RTS

winsigbits:  Dc.l  %00000000000000000000000000000000
sigbits:     Dc.l  0
wincodes:    Dcb.l  32,0
test:        Dc.w 0

.doeventtest:
  MOVE.b #1,test
BRA doevent3


.doevent:          ;get an event!
  MOVE.b #0,test
  doevent3:
  BSR updateevents
  ;
  doevent2:
  LEA firstmess(pc),a0
  MOVE.l (a0),d0
  BEQ 'done2
    MOVE.l d0,a1
    ;
    ;00.l : Next
    ;04.l : Class
    ;08.w : code
    ;10.w : qualifier
    ;12.l : iAddress
    ;16.w : Mouse x
    ;18.w : Mouse y
    ;20.l : Window
    ;SM
    ;24.l : seconds
    ;28.l : microns
    ;
    MOVE.l 4(a1),d7       ;IDCMP
    MOVE.l 8(a1),evcode   ;simon was here :(
    MOVE.l 12(a1),iAddress
    MOVE.l 24(a1),seconds
    MOVE.l 28(a1),microns
    ;
    ;event $40 MUST come first for string kludge!
    ;
    CMP ##IDCMP_GADGETUP,d7:BNE 'notgadgetup                   ; IDCMP_GADGETUP
      ;
      ;gadget up!
      CLR kludgegnum
      BSR gadgetevent
      BRA 'done
    ;
   'notgadgetup
    MOVE kludgegnum(pc),d0
    BEQ 'notkludge
      ;
      MOVE.l 16(a1),evmousex
      MOVE d0,eventgnum : CLR kludgegnum
      MOVEQ #$40,d0
      RTS  ;give a dummy 'gadget up'

   'notkludge:
    CMP ##IDCMP_GADGETDOWN,d7                                    ; IDCMP_GADGETDOWN
    BNE 'notgadg
      ;
      ;gadget down!
      MOVE.l 12(a1),a2:MOVE 38(a2),eventgnum
      BTST #2,17(a2):BEQ 'done:MOVE eventgnum(pc),kludgegnum:BRA 'done

   'notgadg:
    CMP ##IDCMP_MENUPICK,d7 : BNE 'notmenu                     ; IDCMP_MENUPICK
      MOVE 8(a1),d1:CMP #-1,d1:BNE 'isok:MOVEQ #0,d7:BRA 'done
      ;
     'isok:AND #31,d1:CMP #31,d1:BNE 'ms1:MOVEQ #-1,d1
     'ms1:MOVE d1,menunum
      MOVE 8(a1),d1:LSR #5,d1:AND #63,d1:CMP #63,d1:BNE 'ms2:MOVEQ #-1,d1
     'ms2:MOVE d1,itemnum
      MOVE 8(a1),d1:ROL #5,d1:AND #31,d1:CMP #31,d1:BNE 'ms3:MOVEQ #-1,d1
     'ms3:MOVE d1,subnum
      ;
      ;here, we have to do multiple select stuff...
      ;
      MOVE.l 20(a1),a2  ;window
      MOVE.l 28(a2),a2  ;menu strip!
      MOVE 8(a1),d6     ;menu code...
      ;
      BSR 'done:MOVE.l a3,-(a7)
      ;
     'mmloop
      BSR findmenuitem:MOVE 32(a3),d6:CMP #-1,d6:BEQ 'mmdone
      ;
      MOVEQ ##MSGSIZE,d0:MOVEQ #1,d1:ALibJsr $c002:MOVE.l d0,a0
      MOVE.l nextmess(pc),a1:MOVE.l a0,(a1)
      MOVE.l a0,nextmess:CLR.l (a0)+
      MOVE.l #$100,(a0)+         ;class
      MOVE d6,(a0) : ADDQ #8,a0  ;code
      MOVE.l evmousex(pc),(a0)+ ;mousex/y
      MOVE.l eventwin(pc),(a0)  ;window!
      ;
      ;BRA 'mmloop
      ;
     'mmdone:MOVE.l (a7)+,a3:MOVE.l #256,d0:RTS

   'notmenu:
    CMP ##IDCMP_RAWKEY,d7 : BNE 'notkey
      ;TRAP #5
      MOVE 8(a1),d0                               ; eventcode
      ;BTST #7,d0:BNE 'fail:;key up - ignore!
      ;MOVE d0,realrawkey
      BTST #7,d0                                  ; check if released
      BNE 'rel
        MOVE.l a1,-(a7)
        CLR.w vanillakey
        MOVE 10(a1),d1 : ALibJsr #rawkeylib LSL 7+1    ; input d0:eventcode, d1:eventqualifier
        MOVE.l (a7)+,a1
        TST d0 : BEQ 'fail
        MOVE d0,outkey:                           ;outstanding keystroke!
        MOVE.w d0,vanillakey
     'rel
      MOVE 8(a1),outr                             ;outstanding rawkey...
      MOVE 8(a1),lrawkey
      MOVE 10(a1),outq                            ;outstanding qualifier
      MOVE.l 20(a1),outwindow:                    ;and window!
      BRA 'done

   'notkey:
    CMP ##IDCMP_MOUSEBUTTONS,d7:BNE 'notmbut
      MOVE 8(a1),outmouse
      MOVE.l 20(a1),outmwin
      BRA 'done

   'notmbut
   'notnothing:
  BRA 'done

 'fail:
  MOVEQ #0,d7 : BRA 'done3

 'done:
  MOVE.l 20(a1),eventwin
  MOVE.l 16(a1),evmousex

 'done3:
  TST.b test
  BNE 'skip
    BSR unlinkmess
 'skip
  MOVE.l d7,d0
  MOVE.l d0,eventclass
 'done2:
RTS


findmenuitem  ;a2=menustrip, d1=code, return a3=item...
;
MOVE.l a2,a3
MOVE d6,d0:AND #31,d0:BEQ 'skip:SUBQ #1,d0
'loop:MOVE.l (a3),a3:DBF d0,'loop
'skip:MOVE.l 18(a3),a3
MOVE d6,d0:LSR #5,d0:AND #63,d0:BEQ 'skip2:SUBQ #1,d0
'loop2:MOVE.l (a3),a3:DBF d0,'loop2
'skip2:MOVE d6,d0:ROL #5,d0:AND #31,d0:CMP #31,d0:BEQ 'done
MOVE.l 28(a3),a3:SUBQ #1,d0:BMI 'done
'loop3:MOVE.l (a3),a3:DBF d0,'loop3
'done:RTS


.unlinkmess2:
  MOVE.l a2,a0

unlinkmess:;free up message in a1, previous in a0
  MOVE.l (a1),(a0)
  CMP.l nextmess(pc),a1
  BNE 'skip
    MOVE.l a0,nextmess
 'skip:
  MOVEQ ##MSGSIZE,d0 : ALibJsr $c003
RTS

unlinkall:  ;unlink ALL messages!
LEA firstmess(pc),a0
'loop:MOVE.l (a0),d0:BEQ 'done
MOVE.l d0,a1:BSR unlinkmess:BRA 'loop
'done:RTS

unlinkonlywin  ;unlink ALL messages!
LEA firstmess(pc),a0
'loop:MOVE.l (a0),d0:BEQ 'done
MOVE.l d0,a1:
MOVE.l 20(a1),d1
CMP.l (a3),d1
BNE 'loop2
BSR unlinkmess:BRA 'loop
'done:RTS
'loop2
MOVE.l a1,a0
BRA 'loop

.doeventwindow:;which window did the event happen in?
  ;
  MOVE.l eventwin(pc),d0
  MOVE.l d0,a0
  BEQ 'fail:
    MOVE 120(a0),d0
    RTS
 'fail:
  MOVEQ #-1,d0
RTS

.doemousex:  MOVE evmousex(pc),d0:RTS
.doemousey:  MOVE evmousey(pc),d0:RTS
.dogadgethit:MOVE eventgnum(pc),d0:RTS
.domenuhit:  MOVE menunum(pc),d0:RTS
.doitemhit:  MOVE itemnum(pc),d0:RTS
.dosubhit:   MOVE subnum(pc),d0:RTS
.doeventcode:MOVEQ #0,d0 : MOVE evcode(pc),d0:RTS
.doeventqualifier:MOVE evqualifier(pc),d0:RTS

dowindow3 ;simon was here
;
MOVE.l a1,bmapbase:MOVE -10(a2),d3:MOVE -12(a2),d4:BRA dowindow
;
dowindow2
;
LEA zero(pc),a0
;
.dowindow                                   ;a3=window item, a1=used screen, a0=gadgetlist
                                            ;d0=window number

MOVE.l a3,0(a5,d6) : MOVE.l a3,-(a7)        ;set used window!
;
;MOVE.l (a0),-(a7):
;
LSR #5,d0:MOVE d0,-(a7)                     ;simon was here

MOVEM.l a0-a1/d1,-(a7)                      ; free possibly opened window with given window number
BSR freewindow
MOVEM.l (a7)+,a0-a1/d1

MOVE.l a4,-(a7)

LEA anewwindow(pc),a4
CLR.l 38(a4):CLR.l 42(a4)

MOVE.l (a0),18(a4)                          ; attach GadgetList to Window

MOVE _sizelimitsok(pc),d0 : BEQ 'nosl
  MOVE.l _sizelimits(pc),38(a4)             ; MinWidth
  MOVE.l _sizelimits+4(pc),42(a4)           ; MaxWidth
'nosl:

MOVE -(a2),(a4):MOVE -(a2),2(a4)            ; Window Dimensions
MOVE -(a2),4(a4):MOVE -(a2),6(a4)

BTST #4,idcmp+3 : BEQ 'nofm
  BSET #9,d1
'nofm:

BTST #7,d1:BEQ notsuper
  MOVE.l bmapbase(pc),34(a4):BSET #17,d1   ; attach bitmap to window
notsuper
OR.l #$40000,d1

MOVE.l d1,14(a4)                           ; Flags

MOVE.l -(a2),d1:MOVE.l d2,d0
ALibJsr $cf01 : MOVE.l d0,26(a4)           ; Titlestring
MOVE.b d3,8(a4):MOVE.b d4,9(a4)            ; DetailPen,BlockPen

MOVE.l (a1),a1:MOVE.l a1,30(a4)            ; Screenpointer
MOVE 20(a1),d0:AND #15,d0 : MOVE d0,46(a4) ; Type

MOVE.l a4,a0 : MOVE.l (a7)+,a4
JSR _OpenWindow(a6)

MOVE.l d0,(a3) : BEQ winerr ;'done

MOVE.l d0,a0
MOVE.l #myport,86(a0)                      ; MsgPort
MOVE (a7)+,120(a0)                         ; UserData
MOVE 54(a0),122(a0)                        ; ?
BTST #2,24+2(a0):BEQ 'nogzz
  CLR 122(a0)
'nogzz:
CLR.l 4(a3) : CLR.l 16(a3)
MOVE.b 122(a0),5(a3) : MOVE.b 123(a0),7(a3)
MOVE.l idcmp(pc),d0 : JSR _ModifyIDCMP(a6)
;
  ;MOVE.l (a7)+,d0
  ;BEQ 'nogads:
  ;  MOVE.l d0,d1
  ; 'flg:
  ;    MOVE.l d0,a0
  ;    MOVE.l (a0),d0
  ;  BNE 'flg
  ;  MOVE.l (a3),a1:MOVE.l 62(a1),(a0):MOVE.l d1,62(a1)
  ;  MOVE.l d1,a0:SUB.l a2,a2:JSR _RefreshGadgets(a6)
;
'nogads:
  MOVE.l (a7)+,a3
  BSR dousewindow
  MOVE.l (a3),d0
RTS

;2+4
winerr:
  ADDQ.l  #6,a7
  MOVEQ   #0,d0
RTS

;--------------------------------------------------------------------

.dowindowtags3
;  MOVE.l -(a2),-(a7)
;  MOVE.l d3,a2:LEA usertags(pc),a0
;  nxtag:MOVEM.l (a2)+,d4-d5:MOVEM.l d4-d5,(a0):ADDQ#8,a0:TST.l d4:BNE nxtag
;  MOVE.l (a7)+,(a2)+
  MOVE.l #TAG_MORE,usertags
  MOVE.l d3,usertags+4
BRA dowindowtags1

.dowindowtags2
  MOVE.l -(a2),-(a7)
  LEA usertags(pc),a0
  BRA gettags
  tagloop:
    MOVE.l -(a2),d4 : MOVE.l -(a2),d5 : MOVEM.l d4-d5,(a0) : ADDQ #8,a0
    gettags:
  DBRA d7,tagloop
  MOVE.l #0,(a0)+
  MOVE.l (a7)+,(a2)+

.dowindowtags1
  ;
  ;a3=window item, a1=used screen, a0=gadgetlist
  ;d0=window number
  ;
  MOVEM.l d0-d1,-(a7)
  MOVE.l d2,d0 : MOVE.l -(a2),d1 : ALibJsr $cf01 : MOVE.l d0,d2    ; alloc mem for windowtitle
  MOVEM.l (a7)+,d0-d1

  MOVE.l a3,0(a5,d6) : MOVE.l a3,-(a7)  ;set used window!
  ;
  ;MOVE.l (a0),-(a7):
  ;
  LSR #5,d0 : MOVE d0,-(a7)       ;simon was here
  ;
  MOVEM.l a0-a1/d1,-(a7)
  BSR freewindow
  MOVEM.l (a7)+,a0-a1/d1

  MOVE.l  d1,wintags+4
  MOVE.l  d2,wintags+12
  MOVE.l  (a1),wintags+20

  SUB.l a0,a0                     ; no NewWindow structure used, only TagList
  LEA wintags(pc),a1 ;:MOVE.l (a7)+,a4
  JSR _OpenWindowTagList(a6)      ; (A0=newWindow, A1=Taglist)
  MOVE.l d0,(a3)
  BEQ err1 ;'done

  MOVE.l d0,a0                    ; A0: the created window structure
  MOVE.l #myport,86(a0)           ; set Port
  MOVE (a7)+,120(a0)              ;
  MOVE 54(a0),122(a0)             ;
  BTST #2,24+2(a0) : BEQ 'nogzz2
    CLR 122(a0)
 'nogzz2:
  CLR.l 4(a3)
  CLR.l 16(a3)
  MOVE.b 122(a0),5(a3)
  MOVE.b 123(a0),7(a3)
  MOVE.l idcmp(pc),d0 : JSR _ModifyIDCMP(a6)    ; (A0: Window, D0: Flags)
 'nogads:
  MOVE.l (a7)+,a3 : BSR dousewindow : MOVE.l (a3),d0
RTS

#WA_NewLookMenus=$80000093
textfont: Dc.l 0
wintags:
  Dc.l  #WA_Flags,0
  Dc.l  #WA_Title,0
  Dc.l  #WA_CustomScreen,0
  Dc.l  #WA_NewLookMenus,-1
usertags:Ds.l 32

;--------------------------------------------------------------------

bmapbase: Dc.l 0

.dowfont:
  MOVE.w 6(a0),d1
.dowfont2:
  MOVE.l (a1),a1
  MOVE.l 50(a1),a1

  MOVEM.l a1/d1,-(a7)
  MOVE.l 8(a0),a0
  MOVE.l a0,textfont
  JSR    _SetFont(a6)      ; A1=rp, A0=textfont
  MOVEM.l (a7)+,d0/a1

  MOVEQ  #-1,d1
  JSR _SetSoftStyle(a6)
  MOVE.l textfont,d0
RTS
;MOVE.l (a1),a1:MOVE.l 50(a1),a1:MOVE.l 8(a0),a0

;JMP _SetFont(a6)

.freewindow ;something screwy is happening here!
  ;
  MOVE.l (a3),d0:BEQ 'done
  MOVE.l a6,-(a7):
  MOVE.l (a3),a0
  MOVE.l $20(a0),d0
  TST.l d0
  BEQ 'notitle
    ;ALibJsr $cf02                     ;free the windowtitle
 'notitle:
  MOVE.l 4,a6
  JSR _Forbid(a6)
  ;
  ;try flushing messages!
  ;
  LEA myport(pc),a0
  MOVE.l $14(a0),d0
  BEQ 'skip
 'loop:
    MOVE.l d0,a1
    MOVE.l (a1),d0
    BEQ 'skip
    MOVE.l $2c(a1),d1
    MOVE.l d0,-(a7)
    CMP.l (a3),d1
    BNE 'nomsg
      MOVE.l a1,-(a7)
      JSR _Remove(a6)
      MOVE.l (a7)+,a1
      ;JSR _GetMsg(a6):
      JSR _ReplyMsg(a6)
   'nomsg
    MOVE.l (a7)+,d0
  BRA 'loop
 'skip:
  MOVE.l (a7)+,a6
  ;
  MOVE.l (a3),a0
  MOVE.l 4,a1 : MOVE.l 276(a1),a1
  CMP.l 184(a1),a0 : BNE 'notreq:
    CLR.l 184(a1)
 'notreq:
  MOVE.l 28(a0),d0:BEQ 'nomenus
    JSR _ClearMenuStrip(a6)
    MOVE.l (a3),a0
 'nomenus
  CLR.l 86(a0):
  MOVEM.l a0/a6,-(a7):MOVE.l 4,a6:JSR _Permit(a6):MOVEM.l (a7)+,a6/a0
  JSR _CloseWindow(a6)
  BSR unlinkonlywin
  CLR.l (a3):
 'done:
RTS

.buttons
;
;return 0 if no button click
;
;1 For left button, 2 for right
;
;5 for left up, 6 for left down.
;
MOVE.l inwindow(pc),d1:BEQ err6:MOVE.l d1,a1
MOVE.l (a1),d2:BEQ err6
;check outstanding stuff
MOVE.l outmwin(pc),d1:BEQ 'noout
CMP.l d2,d1:BNE 'outskip
;
MOVE outmouse(pc),d2:CLR.l outmouse:BRA 'mgot
;
'outskip:CLR.l outmwin
;
'noout:BSR updateevents:LEA firstmess(pc),a2
;
'loop:MOVE.l (a2),d0:BEQ 'skip2:MOVE.l d0,a1
CMP.l #8,4(a1):BNE 'more:CMP.l 20(a1),d2:BEQ 'got
;
;Wrong window - through message away.
;
BSR unlinkmess2:BRA 'loop
;
'more:MOVE.l a1,a2:BRA 'loop
;
'got ;choice, a mousebuttons event in current inputwindow!
;
MOVE 8(a1),d2:BSR unlinkmess2
;
'mgot:MOVEQ #0,d0:BCLR #7,d2:BEQ 'skip0:MOVEQ #4,d0
'skip0:CMP.b #104,d2:BNE 'skip:OR #1,d0
'skip:CMP.b #105,d2:BNE 'skip2:OR #2,d0
'skip2:RTS

BRA inputstr
.windowinp:;get single char into d0, -1 if no char!
;
;First, check for outstanding keystroke.
;
MOVE.l d1,-(a7)
;
MOVEQ #0,d0:MOVE outkey(pc),d0:BEQ 'noout
MOVE.l inwindow(pc),a6:MOVE.l (a6),d1:BEQ err6
CMP.l outwindow(pc),d1:BNE 'noout
'doit:MOVE.l (a7)+,d1:CLR outkey
MOVE outr(pc),lrawkey::MOVE outq(pc),kqualifier
MOVE.l outwindow(pc),eventwin:RTS
;
'noout
;
MOVEM.l a0-a2/d2,-(a7):BSR updateevents
;
LEA firstmess(pc),a0
;
'loop2:MOVE.l inwindow(pc),a6:MOVE.l (a6),d1
;
'loop:MOVE.l (a0),d0:BEQ 'none:MOVE.l d0,a1
CMP.l #$400,4(a1):BNE 'more
TST.l d1:BEQ 'akey:CMP.l 20(a1),d1:BEQ 'akey
;
;Wrong Window - through message away!
;
'notme:MOVE.l a0,-(a7):BSR unlinkmess
MOVE.l (a7)+,a0:BRA 'loop2
;
'more:MOVE.l a1,a0:BRA 'loop
'akey:;we have found a key!
MOVE 8(a1),d0:MOVE 10(a1),d1:;code, qualifier
BTST #7,d0
BNE 'notme
CLR vanillakey
MOVE.l a1,-(a7)
ALibJsr #rawkeylib LSL 7+1:;convert rawkey
MOVE.l (a7)+,a1
MOVE d0,d2:BEQ 'notme:MOVE.l 20(a1),eventwin
MOVE.w d0,vanillakey
MOVE 8(a1),lrawkey:MOVE 10(a1),kqualifier
BSR unlinkmess:MOVE d2,d0:BRA 'done
;
'none:MOVEQ #-1,d0
;
'done:MOVEM.l (a7)+,a0-a2/d2:MOVE.l (a7)+,d1:RTS

maxchars:Dc 0
origxy:Dc.l 0
vanillakey:Dc.l 0

.inputstr:;Allrighty, my own Input Routine!
;
;a0=buffer, d0=max chars
;
MOVEM.l a1-a5/d1-d7,-(a7)
;
SUBQ#1,a3
;
;a5=buffer, d7=Curs X in buffer, a3=window, a4=font
;a6=gfxbase
;
MOVE.l a0,a5:MOVE d0,maxchars
MOVE.l prwindow(pc),d7:BEQ err7
MOVE.l d7,a3:TST.l (a3):BEQ err7
MOVE.l 4(a3),origxy
MOVE.l (a3),a4:MOVE.l 50(a4),a4:MOVE.l 52(a4),a4
MOVE.l gfxbase(pc),a6
MOVEQ #0,d7:BSR update:MOVE efrom(pc),d7
CMP maxchars(pc),d7:BCS 'skippy
MOVE maxchars(pc),d7:SUBQ #1,d7
'skippy:MOVE d7,d6:SUBQ #1,d6:BMI inmain2:MOVE.l a5,a1
'loopy:MOVE.b (a1)+,d0:BSR calcwidth
ADD d2,4(a3):DBF d6,'loopy:BRA inmain2
;
inmain:BSR update
inmain2:BSR zcursor
;
'loop:BSR windowinp:;input single character
TST d0:BPL 'gotone
'wloop:LEA myport(pc),a0:MOVE.l 4,a6:JSR _WaitPort(a6)
BSR windowinp:TST d0:BPL 'gotone
MOVE.l firstmess(pc),d0:BEQ 'loop
;
;OK, we got an event which wasn't a keypress!
;if in editor mode, return from prog.
;
MOVE emode(pc),d0:BEQ 'wloop
MOVE.l gfxbase(pc),a6:BSR zcursor:MOVEQ #-1,d6:BRA doreturn
;
'gotone:;character got in d0
;
MOVE.l gfxbase(pc),a6:MOVE d0,d6:BSR zcursor
;
CMP #32,d6:BCS lowchar
CMP #126,d6:BHI hichar
;
;OK, an ascii char
;
BTST #7,kqualifier+1:BEQ ascii
;
CMP #"d",d6:BEQ amigad
CMP #"y",d6:BEQ amigay
;
ascii:MOVE maxchars(pc),d0
'kloop:SUBQ #1,d0:CMP d0,d7:BCC 'kdone
MOVE.b -1(a5,d0),0(a5,d0):BRA 'kloop
'kdone:MOVE.b d6,0(a5,d7)
BSR update:BRA cursrite

amigad
MOVE.l a5,a0:MOVE maxchars(pc),d0:SUBQ #1,d0
'loop:MOVE.b #32,(a0)+:DBF d0,'loop
MOVE.l origxy(pc),4(a3):MOVEQ #0,d7:BRA inmain

amigay
LEA 0(a5,d7),a0:MOVE maxchars(pc),d0:SUB d7,d0:SUBQ #1,d0
'loop:MOVE.b #32,(a0)+:DBF d0,'loop
BRA inmain

shrite:;go to end of line
BSR calclen:;get length of line in chars
CMP maxchars(pc),d0:BCS 'skip:SUBQ #1,d0
'skip:MOVEQ #0,d7:MOVE origxy(pc),d4
SUBQ #1,d0:BMI 'done:MOVE d0,d3
'loop:MOVE.b 0(a5,d7),d0:BSR calcwidth:ADD d2,d4:ADDQ #1,d7
DBF d3,'loop
'done:MOVE d4,4(a3):BRA inmain2

calclen:MOVE maxchars(pc),d0:SUBQ #1,d0
'loop:CMP.b #32,0(a5,d0):DBNE d0,'loop
ADDQ #1,d0:RTS

lowchar
CMP #31,d6:BEQ cursleft
CMP #30,d6:BEQ docursrite
CMP #8,d6:BEQ backspace
CMP #13,d6:BEQ doreturn
CMP #10,d6:BEQ doreturn
BRA funnychar

hichar
CMP #127,d6:BEQ delete
funnychar:;we've hit a weird character...
MOVE emode(pc),d0:BEQ inmain2:;ignore.....
;
doreturn:MOVE d6,eexit:MOVE d7,eat
MOVEQ #10,d0:BSR windowprint
MOVEQ #0,d0:BSR calclen
MOVEM.l (a7)+,a1-a5/d1-d7:RTS

backspace:TST d7:BEQ inmain2:BSR docursleft2
;
delete:BSR dodelete:BRA inmain

dodelete:MOVE d7,d0
'loop:ADDQ #1,d0:CMP maxchars(pc),d0:BCC 'done
MOVE.b 0(a5,d0),-1(a5,d0):BRA 'loop
'done:MOVE.b #32,-1(a5,d0):RTS

cursleft:BSR docursleft:BRA inmain2

docursleft:TST d7:BEQ cldone
MOVE kqualifier(pc),d0:AND #3,d0:BNE shleft
docursleft2:SUBQ #1,d7
MOVE.b 0(a5,d7),d0:BSR calcwidth
SUB d2,4(a3)
cldone:RTS

shleft:MOVE.l origxy(pc),4(a3):MOVEQ #0,d7:RTS

docursrite:MOVE kqualifier(pc),d0:AND #3,d0:BNE shrite
cursrite:ADDQ #1,d7:CMP maxchars(pc),d7:BCC 'oops
MOVE.b -1(a5,d7),d0:BSR calcwidth
ADD d2,4(a3):BRA inmain2
'oops:SUBQ #1,d7:BRA inmain2

update:;redraw chars from d7.....
LEA 0(a5,d7),a0:MOVEQ #0,d0:MOVE maxchars(pc),d0
SUB d7,d0
MOVE.l 4(a3),-(a7)
BSR stringout1:MOVEQ #32,d0:BSR windowprint
MOVE.l (a7)+,4(a3)
RTS

calcwidth:;get width of char in d0 into d2
;
MOVE 24(a4),d2:BTST #5,23(a4):BEQ 'notprop
CMP.b 33(a4),d0:BHI 'notprop
SUB.b 32(a4),d0:BMI 'notprop
AND #255,d0:LSL #1,d0:MOVE.l 44(a4),a0
MOVE 0(a0,d0),d2
MOVE.l 48(a4),d1:BEQ 'notprop:MOVE.l d1,a0
ADD 0(a0,d0),d2
'notprop:RTS

.zcursor
MOVEA.L (A3),A1
MOVEA.L $32(A1),A1
MOVEQ   #0,D0
MOVE.B  $1C(A1),D0
MOVE.W  D0,-(A7)
MOVE.L  A1,-(A7)
MOVEQ   #3,D0
JSR     -$162(A6)
MOVE.B  0(A5,D7.W),D0
BSR     calcwidth
MOVE.W  $14(A4),D3
MOVE.W  4(A3),D0
MOVE.W  6(A3),D1
SUBQ.W  #1,D2
SUBQ.W  #1,D3
ADD.W   D0,D2
ADD.W   D1,D3
MOVE.W  underline(pc),D4
BMI     'skip
MOVE.W  D3,D1
SUB.W   D4,D1
'skip:MOVEA.L (A7),A1
JSR     -$132(A6)
MOVEA.L (A7)+,A1
MOVEQ   #0,D0
MOVE.W  (A7)+,D0
JMP     -$162(A6)

BRA     windowprint3
BRA     windowprint2
;
.windowprint
  CMPI.b  #$D,D0
  BEQ     'skip
    CMPI.b  #$A,D0
    BNE     'skip2
 'skip:
  MOVEM.L A0-A2,-(A7)
  MOVEA.L prwindow(pc),a0 ;*-$B46,A0
  MOVE.L  (A0),D0
  BEQ.L   err7
  MOVEA.L D0,A1
  MOVEA.L $32(A1),A2
  MOVE.W  6(A0),D0
  ADD.W   $3A(A2),D0  ;simon was here was $3C????
  MOVE.W  D0,6(A0)
  CLR.W   4(A0)
  MOVE.B  $7A(A1),5(A0)
  MOVEM.L (A7)+,A0-A2
  RTS
 'skip2:
  MOVEM.L D1/A1-A3,-(A7)
  MOVE.W  D0,-(A7)
  BSR     setpcursor
  LEA     temp(pc),a0
  MOVE.W  (A7)+,D0
  MOVE.B  D0,(A0)
  MOVEQ   #1,D0
  BSR     printtext
  MOVEM.L (A7)+,D1/A1-A3
RTS

stringout1
windowprint2
  TST.L   D0
  BEQ     wp2done

  MOVEM.L D1/A1-A3,-(A7)
  wp2sint2:
  MOVEM.L D0/A0,-(A7)
  BSR     setpcursor
  MOVEM.L (A7)+,D0/A0
  BSR     printtext
  wp2sint:
  MOVEM.L (A7)+,D1/A1-A3
  wp2done:
RTS

.windowprint3:
  MOVEM.L D1/A1-A3,-(A7)
  MOVEQ   #-1,D0
  MOVEA.L A0,A1
 'loop:
    ADDQ.L  #1,D0
  TST.B   (A1)+
  BNE     'loop
  TST.L   D0
  BEQ     wp2sint
BRA     wp2sint2

.setpcursor ;move cursor to print position
  MOVEA.L prwindow(pc),a3
  MOVE.L  (A3),D0
  BEQ     err7
    MOVEA.L D0,A0
    MOVEA.L $32(A0),A1
    MOVEQ   #0,D0
    MOVEQ   #0,D1
    MOVE.W  4(A3),D0
    MOVE.W  6(A3),D1
    ADD.W   $3E(A1),D1
    MOVEA.L gfxbase(pc),a6
    MOVE.L  A1,-(A7)
    JSR     _Move(A6)             ;-$F0
    MOVEA.L (A7),A1
    MOVE.W  fpen(pc),d0
    JSR     _SetAPen(A6)          ;-$156
    MOVEA.L (A7),A1
    MOVE.W  bpen(pc),d0
    JSR     _SetBPen(A6)          ;-$15C
    MOVEA.L (A7),A1
    MOVE.W  tjam(pc),d0
    JSR     _SetDrMd(A6)          ;-$162
    MOVEA.L (A7)+,A1
RTS

.printtext:
  MOVEM.L D0/A0-A1,-(A7)
  JSR     _TextLength(A6)         ;-$36
  ADD.W   D0,4(A3)
  MOVEM.L (A7)+,D0/A0-A1
JMP _Text(A6)                     ;-$3C

.doWindowIsOpen:
  ;MOVEM.L D1/A1-A3,-(A7)
  ;TST.l (a1) : BEQ 'done
    MOVE.l (a3),d0 : BEQ 'done
      MOVEQ #-1,D0
 'done
 ;MOVEM.L (A7)+,D1/A1-A3
RTS


anewwindow:
Dc 0,0,0,0,0,0,0,0
Dc 0,0,0,0,0,0,0,0
Dc 0,0,0,$20,$40,-1,-1,0
Dc.l tag
tag:     Dc.l $80000090
         Dc.l -1
backhook:Dc.l $0 ; set to $8000007f  if backfill hook
value:   Dc.l 0
         Dc.l 0
         Dc.l 0

.err1:
  MOVEQ     #0,d0
RTS

.dobackfillhook0
  MOVEQ #0,d1

.dobackfillhook
  TST.l d0
  BEQ 'l2
    LEA hookstruct,a0
    MULS.w #20,d1
    ADD.l d1,a0
    MOVE.l #$8000007f,backhook
    MOVE.l d0,8(a0)
    MOVE.l a0,value
    RTS
 'l2
  CLR.l backhook
RTS

hookstruct: Ds.b 20*20
oldsec:     Dc.l 0
oldmicro:   Dc.l 0
oldevcode:  Dc.l 0
eventclass: Dc.l 0
realrawkey: Dc.l 0
;****************** ERROR CHECKING *********************

errors

;err1
err2:MOVE.l #mess2,d0 : TRAP #0
err3:MOVE.l #mess3,d0 : TRAP #0
err4:MOVE.l #mess4,d0 : TRAP #0
err5:MOVE.l #mess5,d0 : TRAP #0
err6:MOVE.l #mess6,d0 : TRAP #0
err7:MOVE.l #mess7,d0 : TRAP #0
err8:MOVE.l #mess8,d0 : TRAP #0
err9:MOVE.l #mess9,d0 : TRAP #0
err10:MOVE.l #mess10,d0 : TRAP #0
err11:MOVE.l #mess11,d0 : TRAP #0
err12:MOVE.l #mess12,d0 : TRAP #0
err13:MOVE.l #mess12,d0 : TRAP #0
idcmperr:MOVE.l #idcmpmess,d0:TRAP #0

mess1:Dc.b "Couldn't Open Window",0
mess2:Dc.b "Uninitialized Screen",0
mess3:Dc.b "Uninitialized Window",0
mess4:Dc.b "Uninitialized IntuiFont",0
mess5:Dc.b "Not Enough Coordinates",0
mess6:Dc.b "Invalid Input Window",0
mess7:Dc.b "Invalid Output Window",0
mess8:Dc.b "Uninitialized Shape",0
mess9:Dc.b "Can't use Shape as Pointer",0
mess10:Dc.b "Can't move Window",0
mess11:Dc.b "Can't Size Window",0
mess12:Dc.b "Ininitialised Shape",0
mess13:Dc.b "Ininitialised BitMap",0
idcmpmess:Dc.b "IDCMP must not be 0",0
Even

;********* error checking routines ************************
.windowchk:
  TST.l (a1) : BEQ err2 : RTS

.wfontchk:
  BSR wchk
  TST.l 8(a0) : BEQ err4 : RTS

.wlinechk:
  CMPI.W  #2,D7 : BCS err5
.wchk:
  TST.l (a1) : BEQ err3 : RTS

.wpointerchk
  TST (a2) : BEQ err8
  TST.l (a3) : BEQ err3
RTS

.wmovechk:
RTS

  MOVE.l (a0),d7:BEQ err3:MOVE.l d7,a1
  MOVE d0,d6:BMI err10:MOVE d1,d7:BMI err10
  ;
  MOVE.l 46(a1),a2
  ADD 8(a1),d6:CMP 12(a2),d6:BHI err10
  ADD 10(a1),d7:CMP 14(a2),d7:BHI err10
RTS

.wsizechk:
RTS

  MOVE.l (a0),d7:BEQ err3:MOVE.l d7,a1
  MOVE d0,d6:BEQ err11:BMI err11
  MOVE d1,d7:BEQ err11:BMI err11
  ;
  MOVE.l 46(a1),a2
  ADD 4(a1),d6:CMP 12(a2),d6:BHI err11
  ADD 6(a1),d7:CMP 14(a2),d7:BHI err11
RTS

.idcmpchk:
  TST.l d0 : BEQ idcmperr : RTS

.wblitchk:.
  TST.l (a0) : BEQ err3 : TST (a2) : BEQ err12 : RTS

.wbtowchk:.
  TST.l (a0) : BEQ err3 : TST 62(a1) : BEQ err13 : RTS
