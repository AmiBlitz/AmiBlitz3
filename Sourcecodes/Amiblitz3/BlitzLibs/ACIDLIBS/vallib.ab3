; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Blitz3:BlitzLibs/Decompiled"
; ExeFile         = "vallib_noFPU.obj"
; CreateIcon      = 0
; Residents       = "libmacs.res,blitzoffs.res,all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 9
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 103
; CursorColumn    = 1
; LabelSearch     = "dornd2"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Window      = 5
; Max Bank        = 5
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
; ********* Names of the library-calls to mathffp.library
#_SPFix                      = -$01e   ;SPFix(float)(D0)                    -30
#_SPFlt                      = -$024   ;SPFlt(integer)(D0)                  -36
#_SPCmp                      = -$02a   ;SPCmp(leftFloat,rightFloat)(D1,D0)  -42
#_SPTst                      = -$030   ;SPTst(float)(D1)                    -48
#_SPAbs                      = -$036   ;SPAbs(float)(D0)
#_SPNeg                      = -$03c   ;SPNeg(float)(D0)                    -60
#_SPAdd                      = -$042   ;SPAdd(leftFloat,rightFloat)(D1,D0)  -66
#_SPSub                      = -$048   ;SPSub(leftFloat,rightFloat)(D1,D0)  -72
#_SPMul                      = -$04e   ;SPMul(leftFloat,rightFloat)(D1,D0)  -78
#_SPDiv                      = -$054   ;SPDiv(leftFloat,rightFloat)(D1,D0)  -84
; added with V33 or higher
#_SPFloor                    = -$05a   ;SPFloor(parm)(d0)                   -90
#_SPCeil                     = -$060   ;SPCeil(parm)(d0)                    -96


;
; ********* ALRIGHTY - A VAL( FUNCTION
;

!libheader{#vallib,0,0,0,errors}

!afunction{5}   ;   return a FLOAT
!args{7}
!libs{#ffplib,#la6}
!subs{do_Val,0,0}
!name{"Val","(String$)"}    ;*****

!afunction{3}
!args{8}
!libs{#ffplib,#la6}
!subs{doint,intchk,0}
!name{"Int","(Expression)"} ;*****

!afunction{4}
!args{8}
!libs{#ffplib,#la6}
!subs{dosgn,intchk,0}
!name{"Sgn","(Expression)"} ;*****

!afunction{5}
!args{5}
!libs{#ffplib,#la6}
!subs{doffrac,0,0}
!name{"Frac","(Expression)"}    ;*****

!afunction{4}
!args{4}
!libs
!subs{doqfrac,0,0}
!name{"QFrac","(Quick)"}    ;*****

!afunction{4}
!args{4,4,4}
!libs
!subs{doqwrap,0,0}
!name{"QWrap","(Quick,Low,High)"}   ;*****

!afunction{4}
!args
!libs
!subs{dornd1,0,0}
!args{2}
!libs
!subs{dornd2,0,0}
!name{"Rnd","[(Range)]"}    ;*****

!afunction{4}
!args{4}
!libs
!subs{doqabs,0,0}
!name{"QAbs","(Quick)"} ;*****

!afunction{5}
!args{8}
!libs{#ffplib,#la6}
!subs{dofabs,0,0}
!name{"Abs","(Expression)"} ;*****

!afunction{4}
!args{4,4,4}
!libs
!subs{doqlimit,0,0}
!name{"QLimit","(Quick,Low,High)"}  ;*****

!afunction{2}
!args
!libs{#graphicslib,#la0}
!subs{dontsc,0,0}
!name{"NTSC",""}    ;*****

!afunction{2}
!args
!libs{#graphicslib,#la0}
!subs{dodispheight,0,0}
!name{"DispHeight",""}  ;*****

!afunction{2}
!args
!libs
!subs{dobeamy,0,0}
!name{"VPos",""}

!afunction{3}
!args
!libs
!subs{dotrue,0,0}
!name{"True",""}

!afunction{3}
!args
!libs
!subs{dofalse,0,0}
!name{"False",""}

!afunction{4}
!args{2,2,2,2}
!libs
!subs{doqangle,0,0}
!name{"QAngle","(Src X,Src Y,Dest X,Dest Y)New"}

!afunction{#long}
!args{#string}
!libs
!subs{do_ValLong,0,0}
!name{"Vallong","(String$)"}

!astatement
!args{2}
!libs
!subs{rndseed,0,0}
!name{"RndSeed","(value) ;set start value for random generator"}


;  Dc.b $00
;  Dc.b $03,$02 ;...
;  Ds.l 1
;  Dc.b $00,$01,$07,$00 ;....
;  Ds.w 3
;  Dc.l do_ValLong
;  Ds.l 1
;  Dc.b $FF,$FF,$00,$00 ;....
;  Ds.l 1
;  Dc.b "ValLong",0
;  Dc.b "(String$)",0
;

!libfin
;********************* CODE BELOW ************************

last:     Dc 17
sweor:    Dc 17 * 2
old:      Dc.w 0
old2:     Dc.w 17 * 8
isinit:   Dc.w 0

rndseed
  MOVE.w d0,last
  LSL.w #2,d0
  MOVE.w d0,sweor
  LSL.w #2,d0
  MOVE.w d0,old
  LSL.w #2,d0
  MOVE.w d0,old2
RTS

JL_0_588:
  MOVEQ.l #$00,D7
  MOVEQ.l #$01,D6
  MOVEQ.l #$00,D3

  JL_0_58E:
    SUBQ.w #1,D2
    BMI.w JL_0_5C0
      MOVE.b (A3)+,D3
      CMPI.w #$30,D3
      BCS.w JL_0_5C0
        CMPI.w #$39,D3
        BHI.w JL_0_5C0

    SUBI.w #$30,D3
    LSL.l #1,D6
    MOVE.l D6,D1
    LSL.l #2,D6
    ADD.l D1,D6
    LSL.l #1,D7
    MOVE.l D7,D1
    LSL.l #2,D7
    ADD.l D1,D7
    ADD.l D3,D7
  BRA.w JL_0_58E

  JL_0_5C0:
RTS


JL_0_5C2:
  MOVE.w #$0030,D3
  MOVEQ.l #$00,D0
  ADDQ.w #1,A3
BRA.w JL_0_5E0

JL_0_5CE:
  MOVE.b (A3)+,D1
  SUB.b D3,D1
   BMI.w JL_0_5E4
  ADDI.b #$FF,D1
   BGT.w JL_0_5E4
  ROXL.l #1,D0
JL_0_5E0:
   DBF D2,JL_0_5CE
JL_0_5E4:
 BRA.w JL_0_62E

JL_0_5E8:
  MOVEQ.l #$00,D0
  ADDQ.w #1,A3
  BRA.w JL_0_62A

  JL_0_5F0:
    MOVE.b (A3)+,D1

    SUBI.b #"0",D1 : BMI.w JL_0_62E   ; if less than 0 we have no hexdigit anymore
    CMPI.b #10,D1  : BCS.w JL_0_626   ; if digit is lower than 10 we have a decimal digit
    SUBI.b #17,D1  : BMI.w JL_0_62E   ; if digit is less than 16 we have no hexdigit anymore
    CMPI.b #6,D1   : BCS.w JL_0_622   ; if we have a hexdigit A-F, so we have to add 10
    SUBI.b #32,D1  : BMI.w JL_0_62E   ; if we have less than 32, we have not hexdigit anymore
    CMPI.b #6,D1   : BCC.w JL_0_62E

    JL_0_622:
    ADDI.w #10,D1

    JL_0_626:
    ASL.l #4,D0
    ADD.b D1,D0

    JL_0_62A:
  DBF D2,JL_0_5F0
  JL_0_62E:

  TST.b longmode
  BNE.w JL_0_63E
    JSR _SPFlt(A6)
    RTS
  JL_0_63E:
  CLR.b longmode
RTS


.do_ValLong:
  MOVE.b #$FF,longmode
  MOVEA.l D0,A3
  MOVE.l A3,-(A7)
  BSR.w JL_0_65A
  MOVEA.l (A7)+,A3
RTS

JL_0_65A:
  MOVEQ.l #$00,D0
  MOVE.l -(A2),D2

  JL_0_65E:             ; skip spaces from string value
    SUBQ.w #1,D2
    BMI.w JL_0_698
  CMPI.b #$20,(A3)+
  BEQ.w JL_0_65E
  ADDQ.w #1,D2

  SUBQ.w #1,A3
  CMPI.b #$24,(A3) : BEQ.w JL_0_5E8  ; check for "$"
  CMPI.b #$25,(A3) : BEQ.w JL_0_5C2  ; check for "%"
  CMPI.b #$2D,(A3) : BNE.w JL_0_692  ; check for "-"
  ADDQ.w #1,A3
  BSR.w JL_0_692
  NEG.l D0
  RTS

  JL_0_692:
  BSR.w JL_0_588
  MOVE.l D7,D0

  JL_0_698:
RTS

longmode:         Ds.w 1


.doqangle
  SUB d2,d0
  SUB d3,d1
  
  MOVEQ #0,d2
  TST d1 : BPL 'hpos
    MOVEQ #16,d2
    NEG d1
 'hpos
 
  TST d0 : BPL 'wpos
    EOR #8,d2:NEG d0
 'wpos
 
  CMP d1,d0 : BMI 'notsteep
    BNE 'neq:
        MOVE  #$2000,d1
        BRA 'flow
    'neq
    EOR #4,d2
    EXG d1,d0
 'notsteep

  TST d1
  BNE 'noflow
    MOVEQ #0,d1
    BRA 'flow
 'noflow
    EXT.l d0
    SWAP  d0
    DIVU  d1,d0
    LSR #6,d0
    AND #1022,d0
    MOVE 'arc(pc,d0),d1
 'flow

  MOVE.l  'oct(pc,d2),d0
  EOR d0,d1
  CLR d0
  SWAP d0
  ADD d1,d0
  ;
  NEG d0
  SUB #$4000,d0
RTS
  ;
'oct
  Dc  0,0,$4000,-1,0,-1,$c000,0
  Dc  $8000,-1,$4000,0,$8000,0,$c000,-1
'arc: IncBin arc.bin

.dotrue:
  Dc $a000,'f-'s
 's:
  MOVEQ #-1,d0
 'f:
RTS

.dofalse:
  Dc $a000,'f-'s
 's:
  MOVEQ #0,d0
 'f
RTS

.dobeamy:
  Dc $a000,'f-'s
 's
  MOVE.l $dff004,d0                               ;pick up whole long word...
  LSR.l #8,d0
  AND #$1ff,d0
 'f
RTS

.dodispheight                                   ;return 200 for NTSC or 256 for PAL
  MOVE #200,d0
  BTST #0,207(a0)
  BNE 'done
    MOVE #256,d0
 'done:
RTS

.dontsc                                         ;return -1 if in ntsc mode.
  BTST #0,207(a0)
  SNE d0
  EXT d0
RTS


.doffrac
  MOVE.l d0,-(a7)
  BTST #7,d0
  BEQ 'skip
    JSR _SPCeil(a6)                           ; -84-12(a6)
    BRA 'more
 'skip:
    JSR _SPFloor(a6)                          ; -84-6(a6)
 'more
  MOVE.l d0,d1
  MOVE.l (a7)+,d0
JMP _SPSub(a6)


.dofabs
  MOVE -(a2),d1
  CMP #5,d1 : BEQ 'float
  CMP #4,d1 : BEQ 'quick
  CMP #2,d1 : BHI 'long : BEQ 'word
 'byte:
  EXT d0
 'word:
  EXT.l d0
 'long:
  JSR _SPFlt(a6)

 'float:
    BCHG #7,d0
    BNE 'skip
      BCHG #7,d0
   'skip:
    RTS
   'quick:
    ALibJsr $d300
  BRA 'float


.doqabs:
  Dc $A000,'skip-'s
 's:
  NEG.l d0 : BPL 'skip
    NEG.l d0
 'skip:
RTS

.dornd2:
  MOVE d0,d7
  BSR genrnd
  MULU d7,d0
RTS

.dornd1:
  MOVEQ #0,d0
.genrnd
  ;
  ;not bad, this one...
  ;
  ;MOVE $dff006,d0          ; hardware register for VPOSR
  MOVE.w old,d0
  BNE 'l1
    TST.b isinit
    BNE 'l1
      MOVE $dff006,d0         ; hardware register for VPOSR
      ROR #8,d0
      MOVE.b #1,isinit
      ;;EOR d1,d0
      ;;
 'l1
  MOVE old2,d1
  ROR #8,d1
  ADDQ #1,d1
  MOVE.w d1,old2
  ADDQ.w #1,d0
  MOVE.w d0,old
  EOR d1,d0
  ;;
  ;MOVE.b $bfe601,d1
  MOVE last(pc),d2
  ROL d2,d1
  EOR d1,d0
  ;;
  EOR d2,d0
  ;;
  MOVE sweor(pc),d1
  EOR #$aaaa,d1
  ROR #1,d1
  MOVE d1,sweor
  EOR d1,d0
  ;;
  MOVE d0,last
RTS

; old code
;MOVE $dff00a,d2
;MOVE last(pc),d3
;MOVE.b $bfe601,d4:ROL.l d3,d4
;MOVE sweor(pc),d5:EOR #$aaaa,d5:ROR #1,d5:MOVE d5,sweor
;;
;ADD.l d0,d0:EOR.l d0,d0
;ADD.l d0,d0:EOR.l d0,d0
;ADD.l d0,d0:EOR.l d0,d0
;ADD.l d0,d0:EOR.l d0,d0
;EOR.l d0,d0
;ASR.l #8,d0
;ASR.l #8,d0
;
;MOVE d0,last:RTS


.doqlimit:
  CMP.l d1,d0
  BGE 'skip
    MOVE.l d1,d0
    RTS
 'skip:
  CMP.l d2,d0
  BLT 'skip2
    MOVE.l d2,d0
 'skip2
RTS

.doqwrap:
  Dc $a000,'skip2-'s
 's:
  CMP.l d1,d0
  BGE 'skip
    SUB.l d1,d0
    ADD.l d2,d0
    BRA 'skip2
 'skip:
  CMP.l d2,d0
  BLT 'skip2
    SUB.l d2,d0
    ADD.l d1,d0
 'skip2:
RTS

.doqfrac:
  Dc $a000,'f-'s
 's:
  TST.l d0 : BPL 'skip
    NEG.l d0
 'skip:
  SWAP d0
  CLR d0
  SWAP d0
 'f:
RTS

.dosgn:
  MOVE -(a2),d1
  CMP #4,d1
  BHI 'float
  BEQ 'long
    CMP #3,d1 : BEQ 'long
    CMP #1,d1 : BNE 'word
      EXT d0
   'word:
  EXT.l d0

 'long:
    TST.l d0
    BMI 'minus
      BEQ 'zilch
     'plus:
      MOVEQ #1,d0
      SWAP d0
      RTS
     'minus:
      MOVEQ #-1,d0
      SWAP d0
      CLR d0
      RTS
   'zilch:
    MOVEQ #0,d0:RTS
   'float:
    JSR _SPTst(a6)
  BRA 'long

.doint:
  MOVE -(a2),d1
  CMP #4,d1
  BCC 'over3
    CMP #3,d1 : BEQ 'done
    CMP #2,d1 : BEQ 'word
    EXT d0
   'word:
    EXT.l d0
   'done:
    RTS
 'over3

  BNE 'float
  TST.l d0 : BPL 'pos
    NEG.l d0
    CLR d0 : SWAP d0 : NEG d0 : EXT.l d0
    RTS
 'pos:
  CLR d0 : SWAP d0 : EXT.l d0
  RTS

 'float:
JMP _SPFix(a6)


; ==============================================================================
; ====== Val() FPU / non-FPU implementation
; ==============================================================================

firstrun:     Dc.b 0
fpu_enabled:  Dc.b 0

.do_Val:
  MOVE.l d0,a3                                      ; d0 = address of given string
  MOVE.l a3,-(a7)

  TST.b firstrun
  BNE 'do
    MOVE.b #1,firstrun
    MOVE.l d0,-(a7)
    ALibJsr $c704                                   ; checkfpumode in string2lib (getfpumode)
    MOVE.b d0,fpu_enabled
    MOVE.l (a7)+,d0
 'do

  BTST #1,fpu_enabled
  BEQ 'val_fpu
    BSR doval_FPU
    BRA 'val_end
 'val_fpu
    BSR doval_noFPU
 'val_end

  MOVE.l (a7)+,a3
RTS

.doval_FPU:  ; -------------------------------------- non FPU versions ------------------------------------------
  MOVEQ #0,d0
  MOVE.l -(a2),d2
 'dl_FPU
    SUBQ #1,d2
    BMI 'done_FPU
    CMP.b #" ",(a3)+                                ; remove leading spaces
  BEQ 'dl_FPU

  ADDQ #1,d2
  SUBQ #1,a3

  CMP.b #$24,(a3) : BEQ 'gethex_FPU
  CMP.b #$25,(a3) : BEQ 'getbin_FPU
  CMP.b #$2D,(a3) : BNE 'notneg
    ADDQ #1,a3
    BSR 'notneg
    fneg.x fp0
 'notneg:
  BSR 'getdec_FPU

  fmove.s fp0,d0

  CMP #".",d3:
  BNE 'done_FPU                                     ;do we have a fracture part?
    fmove.x fp0,fp2

    MOVE.l d0,d5
    BSR 'getdec_FPU
    MOVE.l d5,d0

    TST.l d6
    BEQ 'done_FPU
      fdiv.x fp1,fp0
      fadd.x fp2,fp0
 'done_FPU
  RTS

 'gethex_FPU:            ;d2=size a3=string
  MOVEQ #0,d0
  ADDQ #1,a3
  BRA 'inhx

 'nxhx:
    MOVE.b (a3)+,d1
    SUB.b #48,d1 : BMI 'dunhx
    CMP.b #10,d1 : BCS 'gotdd
    SUB.b #17,d1 : BMI 'dunhx
    CMP.b #6,d1  : BCS 'gothd
    SUB.b #32,d1 : BMI 'dunhx
    CMP.b #6,d1  : BCC 'dunhx

   'gothd:
    ADD #10,d1

   'gotdd:
    ASL.l #4,d0
    ADD.b d1,d0

 'inhx:
  DBRA d2,'nxhx

 'dunhx:
  fmove.l d0,fp0
  RTS  


 'getbin_FPU:
  MOVE #"0",d3
  MOVEQ.l #0,d0
  ADDQ #1,a3
  BRA 'inbin

 'nxbin:
    MOVE.b (a3)+,d1
    SUB.b d3,d1   : BMI 'dunbin
    ADD.b #255,d1 : BGT 'dunbin
    ROXL.l #1,d0

 'inbin:
  DBRA d2,'nxbin

 'dunbin:
  fmove.l d0,fp0
  RTS

 'getdec_FPU:                                        ;get a decimal number into d7, 10^ in d6
  Dc.l $f227e084                                ;fmovem.x fp2/fp7,-(a7)
  MOVEQ #0,d7
  MOVEQ #1,d6
  MOVEQ #0,d3
  fmove.w #0,fp0
  fmove.w #1,fp1
  fmove.w #10,fp2

 'loop:
    SUBQ #1,d2
    BMI 'done
    MOVE.b (a3)+,d3
    CMP #"0",d3 : BCS 'done
    CMP #"9",d3 : BHI 'done
    SUB #"0",d3

    ; multiply d6 and d7 by ten. add digit to d7
    fmove.w d3,fp7
    fmul.x fp2,fp0
    fmul.x fp2,fp1
    fadd.x fp7,fp0
    LSL.l #1,d6 : MOVE.l d6,d1 : LSL.l #2,d6 : ADD.l d1,d6
    LSL.l #1,d7 : MOVE.l d7,d1 : LSL.l #2,d7 : ADD.l d1,d7
    ADD.l d3,d7
  BRA 'loop

 'done:
  Dc.l $f21fd021                                ;fmovem.x (a7)+,fp2/fp7
  RTS

  
.doval_noFPU: ; -------------------------------------- non FPU versions ------------------------------------------
  MOVEQ #0,d0
  MOVE.l -(a2),d2

 'skip_spaces:                                   ; remove leading spaces
    SUBQ #1,d2
    BMI 'done2
  CMP.b #" ",(a3)+
  BEQ 'skip_spaces
  ADDQ #1,d2

  SUBQ #1,a3
  CMP.b #$24,(a3) : BEQ 'gethex     ; check for "$"
  CMP.b #$25,(a3) : BEQ 'getbin     ; check for "%"
  CMP.b #$2D,(a3) : BNE 'notneg2    ; check for "-"
    ADDQ #1,a3
    BSR 'notneg2
    JMP _SPNeg(a6)
 'notneg2

  ;-- get the decimal value of the string
  BSR 'getdec

  MOVE.l d7,d0
  JSR _SPFlt(a6)                                 ;d0 is now a FLOAT!

  CMP #".",d3:
  BNE 'done2                                     ;do we have a fracture part?
    MOVE.l d0,d5
    BSR 'getdec
    MOVE.l d5,d0

    TST.l d6
    BEQ 'done2
      MOVE.l d6,d0    : JSR _SPFlt(a6)           ;divisor to float
      MOVE.l d0,-(a7)
      MOVE.l d7,d0    : JSR _SPFlt(a6)           ;fraction to float
      MOVE.l (a7)+,d1 : JSR _SPDiv(a6)
      MOVE.l d5,d1    : JSR _SPAdd(a6)
      MOVEQ #0,d7
 'done2:
  RTS
  
  
 'getdec:                                        ;get a decimal number into d7, 10^ in d6
  MOVEQ #0,d7
  MOVEQ #1,d6
  MOVEQ #0,d3

 'loop:
    SUBQ #1,d2  : BMI 'done
    MOVE.b (a3)+,d3
    CMP #"0",d3 : BCS 'done
    CMP #"9",d3 : BHI 'done
    SUB #"0",d3

    ; multiply d6 and d7 by ten. add digit to d7
    LSL.l #1,d6 : MOVE.l d6,d1 : LSL.l #2,d6 : ADD.l d1,d6
    LSL.l #1,d7 : MOVE.l d7,d1 : LSL.l #2,d7 : ADD.l d1,d7
    ADD.l d3,d7
  BRA 'loop

 'done:
  RTS

 'getbin:
  MOVE #"0",d3
  MOVEQ.l #0,d0
  ADDQ #1,a3
  BRA 'inbin

 'nxbin:
    MOVE.b (a3)+,d1
    SUB.b d3,d1 : BMI 'dunbin
    ADD.b #255,d1 : BGT 'dunbin
    ROXL.l #1,d0

 'inbin:
  DBRA d2,'nxbin

 'dunbin:
  JSR _SPFlt(a6)
  RTS


 'gethex:            ;d2=size a3=string
  MOVEQ #0,d0
  ADDQ #1,a3
  BRA 'inhx

 'nxhx:
    MOVE.b (a3)+,d1
    SUB.b #48,d1 : BMI 'dunhx   ; 48 = "0", if less, we have no number digit anymore
    CMP.b #10,d1 : BCS 'gotdd   ; if value is lower than 10, we have a standard digit
    SUB.b #17,d1 : BMI 'dunhx   ; if value is less than 16, we have no digit anymore
    CMP.b #6,d1  : BCS 'gothd
    SUB.b #32,d1 : BMI 'dunhx
    CMP.b #6,d1  : BCC 'dunhx

   'gothd:
    ADDI #10,d1

   'gotdd:
    ASL.l #4,d0
    ADD.b d1,d0

 'inhx:
  DBRA d2,'nxhx

 'dunhx:
  JSR _SPFlt(a6)
RTS

;******************** ERROR CHECKING *********************
errors

err1:   MOVE.l #mess1,d0:TRAP #0

mess1:  Dc.b "Illegal Type",0
Even

intchk: CMP #6,-2(a2) : BCC err1 : RTS
