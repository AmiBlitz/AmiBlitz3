; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "fpulib.obj"
; CreateIcon      = 0
; Residents       = "libmacs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 4
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1066
; CursorColumn    = 3
; LabelSearch     = "c70"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max BitMap      = 10
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA

#fplib=217:#real=$ec00  ; uses lib 217 and 218 ;muilib has num 218

;***************** calc results
#byte       = $60000
#word       = $50000
#long       = $80000    ; writes reloc32 if result is an address
#branchword = $90000    ; mode >$f = Address for Hook
#branchbyte = $a0000
#single     = $c0000
#double     = $d0000
;****************
                        ; a5=pointer to sourcecode
                        ; a3=functionsbase d0-d3 can trash
#destpointer= 0
#exit       =-6         ; a5 must point to end of term
#writebyte  =-12        ; data in d1
#writeword  =-18        ; data in d1
#writelong  =-24        ; data in d1
#error      =-30        ; d0=addr of errortext or 0 = Syntax 1= NumericOverflow
#calc       =-36        ; calc term d0=resultmode set a4->oldterm a5->nextterm d0->labelstore
#stripspaces=-42        ; skips spaces
#findchar   =-48        ; position a5 until char in d1 is found
#findconstant=-54       ; constant label or var at a5 and position a5 to
                        ; next char Zero is set if constant is
                        ; found Access = 8(a0)
#remaptoken =-60        ; maps libnum+token to new libnum+token d0=old d1=new
                        ; d1=0 dont map.Changes a0 to remapbase
#findnext   =-66        ; search until ,;: or $0 is found and position a5
#macroexecute=-72
#writeinit  =-78        ; write init at destpointer and not on start
#uselib     =-84


!libheader{#fplib,0,0,0,0}
!dumtoke{"fpulib","fpuLib",_toke}

!astatement
!args
!libs
!subs {$12345678,0,_fmove}
!name {"fmove","offs(ax),dest;floatmove"} ;$82

!astatement
!args
!libs
!subs {$12345678,0,_fsub}
!name {"fsub","source,dest"}              ;$83

!astatement
!args
!libs
!subs {$12345678,0,_fadd}
!name {"fadd","source,dest"}            ;$84

!astatement
!args
!libs
!subs {$12345678,0,_fmul}
!name {"fmul","source,dest"}           ;$85

!astatement
!args
!libs
!subs {$12345678,0,_fdiv}
!name {"fdiv","source,dest"}          ;$86

!astatement
!args
!libs
!subs {$12345678,0,_fcmp}
!name {"fcmp","source,dest"}         ;$87

!astatement
!args
!libs
!subs {$12345678,0,_fneg}
!name {"fneg","source"}             ;$88
;********************************ppc
!astatement
!args
!libs
!subs {$12345678,0,_ppc}
!name {"UsePPC","Use PPC Assembler"} ;$89

!astatement
!args
!libs
!subs {$12345678,0,_use68k}
!name {"UseNoPPC","Use 68k Assembler only if switch to ppc"};$8a

!astatement
!args
!libs
!subs {$12345678,0,_mullw}
!name {"mullw","(.)rd,ra,rb"};$8b

!astatement
!args
!libs
!subs {$12345678,0,_lbz}
!name {"lbz","rd,offs(ra)"};$8c

!astatement
!args
!libs
!subs {$12345678,0,_addis}
!name {"addis","rd,ra,imm"};$8d

!astatement
!args
!libs
!subs {$12345678,0,_add}
!name {"add",""};$8e

!astatement
!args
!libs
!subs {$12345678,0,_addi}
!name {"addi",""};$8f

!astatement
!args
!libs
!subs {$12345678,0,_cmpw}
!name {"cmpw","[CR0-7],ra,rb Compare ra-rb"};$90

!astatement
!args
!libs
!subs {$12345678,0,_cmpwi}
!name {"cmpwi","[CR0-7],ra,16bit Value Compare ra-rb"};$91

!astatement
!args
!libs
!subs {$12345678,0,_fcmpo}
!name {"fcmpo","0-7,fra,frb"};$92

!astatement
!args
!libs
!subs {$12345678,0,_bne}
!name {"bne",""};$93

!astatement
!args
!libs
!subs {$12345678,0,_beq}
!name {"beq",""};$94

!astatement
!args
!libs
!subs {$12345678,0,_blt}
!name {"blt",""};$95

!astatement
!args
!libs
!subs {$12345678,0,_ble}
!name {"ble",""};$96

!astatement
!args
!libs
!subs {$12345678,0,_bge}
!name {"bge",""};$97

!astatement
!args
!libs
!subs {$12345678,0,_bgt}
!name {"bgt",""};$98

!astatement
!args
!libs
!subs {$12345678,0,_bnl}
!name {"bnl",""};$99

!astatement
!args
!libs
!subs {$12345678,0,_bng}
!name {"bng",""};$9a

!astatement
!args
!libs
!subs {$12345678,0,_bso}
!name {"bso",""};$9b

!astatement
!args
!libs
!subs {$12345678,0,_bns}
!name {"bns",""};$9c

!astatement
!args
!libs
!subs {$12345678,0,_bun}
!name {"bun",""};$9d

!astatement
!args
!libs
!subs {$12345678,0,_bnu}
!name {"bnu",""};$9e

!astatement
!args
!libs
!subs {$12345678,0,_mulli}
!name {"mulli",""};$9f

!astatement
!args
!libs
!subs {$12345678,0,_addic}
!name {"addic",""};$a0

!astatement
!args
!libs
!subs {$12345678,0,_subfic}
!name {"subfic",""};$a1

!astatement
!args
!libs
!subs {$12345678,0,_cmplwi}
!name {"cmplwi",""};$a2

!astatement
!args
!libs
!subs {$12345678,0,_mtctr}
!name {"mtctr",""};$a3

!astatement
!args
!libs
!subs {$12345678,0,_mtlr}
!name {"mtlr",""};$a4

!astatement
!args
!libs
!subs {$12345678,0,_mflr}
!name {"mflr",""};$a5

!astatement
!args
!libs
!subs {$12345678,0,_mfctr}
!name {"mfctr",""};$a6

!astatement
!args
!libs
!subs {$12345678,0,_bdnz}
!name {"bdnz",""};$a7

!astatement
!args
!libs
!subs {$12345678,0,_b}
!name {"b_",""};$a8

!astatement
!args
!libs
!subs {$12345678,0,_bl}
!name {"bl",""};$a9

!astatement
!args
!libs
!subs {$12345678,0,_blr}
!name {"blr",""};$aa

!astatement
!args
!libs
!subs {$12345678,0,_rlwimi}
!name {"rlwimi","[.] s,a,sh,mb,me"};$ab

!astatement
!args
!libs
!subs {$12345678,0,_rlwinm}
!name {"rlwinm","[.] s,a,sh,mb,me"};$ac

!astatement
!args
!libs
!subs {$12345678,0,_rlwnm}
!name {"rlwnm","[.] s,a,b,mb,me"};$ad

!astatement
!args
!libs
!subs {$12345678,0,_ori}
!name {"ori",""};$ae;

!astatement
!args
!libs
!subs {$12345678,0,_oris}
!name {"oris",""};$af

!astatement
!args
!libs
!subs {$12345678,0,_andi}
!name {"andi",""};$b0;

!astatement
!args
!libs
!subs {$12345678,0,_andis}
!name {"andis",""};$b1

!astatement
!args
!libs
!subs {$12345678,0,_xori}
!name {"xori","s,a,imm"};$b2

!astatement
!args
!libs
!subs {$12345678,0,_xoris}
!name {"xoris","s,a,imm"};$b3

!astatement
!args
!libs
!subs {$12345678,0,_subfc}
!name {"subfc","[.] rd,ra-rb"};$b4

!astatement
!args
!libs
!subs {$12345678,0,_addc}
!name {"addc","[.] rd,ra+rb"};$b5

!astatement
!args
!libs
!subs {$12345678,0,_lwarx}
!name {"lwarx","rd,Offs(rb)"};$b6

!astatement
!args
!libs
!subs {$12345678,0,_lwzx}
!name {"lwzx","rd,ra,rb"};$b7

!astatement
!args
!libs
!subs {$12345678,0,_slw}
!name {"slw","[.]rd,ra,rb"};$b8

!astatement
!args
!libs
!subs {$12345678,0,_and}
!name {"and","[.]rd,ra,rb"};$b9

!astatement
!args
!libs
!subs {$12345678,0,_subf}
!name {"subf","[.]rd,ra,rb"};$ba

!astatement
!args
!libs
!subs {$12345678,0,_cmplw}
!name {"cmplw","[CR0-7],ra,rb"};$bb

!astatement
!args
!libs
!subs {$12345678,0,_lwzux}
!name {"lwzux","rd,ra,rb"};$bc

!astatement
!args
!libs
!subs {$12345678,0,_mulhw}
!name {"mulhw","[.] rd,ra,rb"};$bd

!astatement
!args
!libs
!subs {$12345678,0,_lbzx}
!name {"lbzx","rd,ra,rb"};$be

!astatement
!args
!libs
!subs {$12345678,0,_neg}
!name {"neg","[.] rd,ra"};$bf

!astatement
!args
!libs
!subs {$12345678,0,_lbzux}
!name {"lbzux","rd,ra,rb"};$c0

!astatement
!args
!libs
!subs {$12345678,0,_nor}
!name {"nor","[.] rd,ra,rb"};$c1

!astatement
!args
!libs
!subs {$12345678,0,_subfe}
!name {"subfe","[.] rd,ra,rb"};$c2

!astatement
!args
!libs
!subs {$12345678,0,_adde}
!name {"adde","[.] rd,ra,rb"};$c3

!astatement
!args
!libs
!subs {$12345678,0,_stwx}
!name {"stwx"," rd,ra,rb"};$c4

!astatement
!args
!libs
!subs {$12345678,0,_stwux}
!name {"stwux"," rd,ra,rb"};$c5

!astatement
!args
!libs
!subs {$12345678,0,_stbx}
!name {"stbx","rd,ra,rb"};$c6

!astatement
!args
!libs
!subs {$12345678,0,_stbux}
!name {"stbux","rd,ra,rb"};$c7

!astatement
!args
!libs
!subs {$12345678,0,_lhzx}
!name {"lhzx","rd,ra,rb"};$c8

!astatement
!args
!libs
!subs {$12345678,0,_lhax}
!name {"lhax","rd,ra,rb"};$c9

!astatement
!args
!libs
!subs {$12345678,0,_lhaux}
!name {"lhaux","rd,ra,rb"};$ca

!astatement
!args
!libs
!subs {$12345678,0,_sthx}
!name {"sthx","rd,ra,rb"};$cb

!astatement
!args
!libs
!subs {$12345678,0,_fdivppc}
!name {"fdiv","rd,ra,rb"};$cc

!astatement
!args
!libs
!subs {$12345678,0,_sthux}
!name {"sthux","rd,ra,rb"};$cd

!astatement
!args
!libs
!subs {$12345678,0,_or}
!name {"or","[.]rd,ra,rb"};$ce

!astatement
!args
!libs
!subs {$12345678,0,_divwu}
!name {"divwu","[.]rd,ra,rb"};$cf

!astatement
!args
!libs
!subs {$12345678,0,_divw}
!name {"divw","[.]rd,ra,rb"};$d0

!astatement
!args
!libs
!subs {$12345678,0,_lfsx}
!name {"lfsx","rd,ra,rb"};$d1

!astatement
!args
!libs
!subs {$12345678,0,_srw}
!name {"srw","[.]rd,ra,rb"};$d2


!astatement
!args
!libs
!subs {$12345678,0,_lfdx}
!name {"lfdx","rd,ra,rb"};$d3

!astatement
!args
!libs
!subs {$12345678,0,_lfdux}
!name {"lfdux","rd,ra,rb"};$d4

!astatement
!args
!libs
!subs {$12345678,0,_lfsux}
!name {"lfsux","rd,ra,rb"};$d5

!astatement
!args
!libs
!subs {$12345678,0,_stfsx}
!name {"stfsx","rd,ra,rb"};$d6

!astatement
!args
!libs
!subs {$12345678,0,_stfsux}
!name {"stfsux","rd,ra,rb"};$d7

!astatement
!args
!libs
!subs {$12345678,0,_stfdx}
!name {"stfdx","rd,ra,rb"};$d8

!astatement
!args
!libs
!subs {$12345678,0,_stfdux}
!name {"stfdux","rd,ra,rb"};$d9

!astatement
!args
!libs
!subs {$12345678,0,_sraw}
!name {"sraw","[.] rd,ra,rb"};$da

!astatement
!args
!libs
!subs {$12345678,0,_srawi}
!name {"srawi","[.] rd,ra,sh"};$db

!astatement
!args
!libs
!subs {$12345678,0,_extsh}
!name {"extsh","[.] rd,rah"};$dc

!astatement
!args
!libs
!subs {$12345678,0,_extsb}
!name {"extsb","[.] rd,ra"};$dd

!astatement
!args
!libs
!subs {$12345678,0,_lwz}
!name {"lwz","rd,Offs(ra)"};$de
!astatement
!args
!libs
!subs {$12345678,0,_lwzu}
!name {"lwzu","rd,Offs(ra)"};$df

!astatement
!args
!libs
!subs {$12345678,0,_lbzu}
!name {"lbzu","rd,Offs(ra)"};$e0

!astatement
!args
!libs
!subs {$12345678,0,_stw}
!name {"stw","rd,Offs(ra)"};$e1

!astatement
!args
!libs
!subs {$12345678,0,_stwu}
!name {"stwu","rd,Offs(ra)"};$e2

!astatement
!args
!libs
!subs {$12345678,0,_stb}
!name {"stb","rd,Offs(ra)"};$e3

!astatement
!args
!libs
!subs {$12345678,0,_stbu}
!name {"stbu","rd,Offs(ra)"};$e4

!astatement
!args
!libs
!subs {$12345678,0,_lhz}
!name {"lhz","rd,Offs(ra)"};$e5

!astatement
!args
!libs
!subs {$12345678,0,_lhzu}
!name {"lhzu","rd,Offs(ra)"};$e6

!astatement
!args
!libs
!subs {$12345678,0,_lha}
!name {"lha","rd,Offs(ra)"};$e7
!astatement
!args
!libs
!subs {$12345678,0,_lhau}
!name {"lhau","rd,Offs(ra)"};$e8

!astatement
!args
!libs
!subs {$12345678,0,_sth}
!name {"sth","rd,Offs(ra)"};$e9
!astatement
!args
!libs
!subs {$12345678,0,_sthu}
!name {"sthu","rd,Offs(ra)"};$ea

!astatement
!args
!libs
!subs {$12345678,0,_lfs}
!name {"lfs","rd,Offs(ra)"};$eb

!astatement
!args
!libs
!subs {$12345678,0,_lfsu}
!name {"lfsu","rd,Offs(ra)"};$ec

!astatement
!args
!libs
!subs {$12345678,0,_lfd}
!name {"lfd","rd,Offs(ra)"};$ed

!astatement
!args
!libs
!subs {$12345678,0,_lfdu}
!name {"lfdu","rd,Offs(ra)"};$ee

!astatement
!args
!libs
!subs {$12345678,0,_stfs}
!name {"stfs","rd,Offs(ra)"};$ef

!astatement
!args
!libs
!subs {$12345678,0,_stfsu}
!name {"stfsu","rd,Offs(ra)"};$f0

!astatement
!args
!libs
!subs {$12345678,0,_stfd}
!name {"stfd","rd,Offs(ra)"};$f1

!astatement
!args
!libs
!subs {$12345678,0,_stfdu}
!name {"stfdu","rd,Offs(ra)"};$f2

!astatement
!args
!libs
!subs {$12345678,0,_fsubppc}
!name {"fsub","rd,ra,rb"};$f3

!astatement
!args
!libs
!subs {$12345678,0,_faddppc}
!name {"fadd","rd,ra,rb"};$f4

!astatement
!args
!libs
!subs {$12345678,0,_frsp}
!name {"frsp","rd,ra"};$f5

!astatement
!args
!libs
!subs {$12345678,0,_fctiw}
!name {"fctiw","rd,ra"};$f6

!astatement
!args
!libs
!subs {$12345678,0,_fsqrt}
!name {"fsqrt","rd,ra"};$f7

!astatement
!args
!libs
!subs {$12345678,0,_fsel}
!name {"fsel","rd,ra,rb,rc"};$f8

!astatement
!args
!libs
!subs {$12345678,0,_fmulppc}
!name {"fmul","rd,ra,rb"};$f9

!astatement
!args
!libs
!subs {$12345678,0,_fcmpu}
!name {"fcmpu","[CR0-7] ra,rb"};$fa

!astatement
!args
!libs
!subs {$12345678,0,_fmsub}
!name {"fmsub","rd,ra,rb,rc rd=ra*rb-rc"};$fb

!astatement
!args
!libs
!subs {$12345678,0,_fmadd}
!name {"fmadd","rd,ra,rb,rc rd=ra*rb+rc"};$fc

!astatement
!args
!libs
!subs {$12345678,0,_fnmsub}
!name {"fnmsub","rd,ra,rb,rc"};$fd

!astatement
!args
!libs
!subs {$12345678,0,_fnmadd}
!name {"fnmadd","rd,ra,rb,rc"};$fe

!astatement
!args
!libs
!subs {$12345678,0,_fnegppc}
!name {"fneg","rd,ra"};$ff

!astatement
!args
!libs
!subs {$12345678,0,_dummy}
!name {"XVCXVL",""};$00

!astatement
!args
!libs
!subs {$12345678,0,_fabs}
!name {"fabs","rd,ra"};$01

!astatement
!args
!libs
!subs {$12345678,0,_fnabs}
!name {"fnabs","rd,ra"};$02

!astatement
!args
!libs
!subs {$12345678,0,_li}
!name {"li","rd,value"};$03

!astatement
!args
!libs
!subs {$12345678,0,_la}
!name {"la","rd,offs(ra)"};$04

!astatement
!args
!libs
!subs {$12345678,0,_subi}
!name {"subi","rd,offs(ra)"};$05

!astatement
!args
!libs
!subs {$12345678,0,_slwi}
!name {"slwi","rd,ra,shift"};$06

!astatement
!args
!libs
!subs {$12345678,0,_srwi}
!name {"srwi","rd,ra,shift"};$07

!astatement
!args
!libs
!subs {$12345678,0,_liw}
!name {"liw","rd,imm Use 2 PPC Instructions !!"};$08

!astatement
!args
!libs
!subs {$12345678,0,_illegal}
!name {"illegal",""};$09

!astatement
!args
!libs
!subs {$12345678,0,_mr}
!name {"mr",""};$0a

!astatement
!args
!libs
!subs {$12345678,0,_mftb}
!name {"mftb",""};$0b

!astatement
!args
!libs
!subs {$12345678,0,_mftbu}
!name {"mftbu",""};$0c

!astatement
!args
!libs
!subs {$12345678,0,_fmr}
!name {"fmr",""};$0d

!astatement
!args
!libs
!subs {$12345678,0,_blrl}
!name {"blrl",""};$0e
!astatement
!args
!libs
!subs {$12345678,0,_tstw}
!name {"tstw",""};$0f

!astatement
!args
!libs
!subs {$12345678,0,_sub}
!name {"sub",""};$10

!astatement
!args
!libs
!subs {$12345678,0,_optimize}
!name {"optimize","<Mode = [1] Integer on, [2] FPU on [4] New Syntax Mode on, or any combination>"};$11

!astatement
!args
!libs
!subs {$12345678,0,_ftan}
!name {"ftan",""};$12

!astatement
!args
!libs
!subs {$12345678,0,_stop}
!name {"STOP",""};$13

!astatement
!args
!libs
!subs {$12345678,0,_initbasic}
!name {"initbasic",""};$14

!astatement
!args
!libs
!subs {$12345678,0,_fbeq}
!name {"fbeq",""};$15

!astatement
!args
!libs
!subs {$12345678,0,_fbne}
!name {"fbne",""};$16

!astatement
!args
!libs
!subs {$12345678,0,_fbgt}
!name {"fbgt",""};$17

!astatement
!args
!libs
!subs {$12345678,0,_fblt}
!name {"fblt",""};$18

!astatement
!args
!libs
!subs {$12345678,0,_fbge}
!name {"fbge",""};$19

!astatement
!args
!libs
!subs {$12345678,0,_fble}
!name {"fble",""};$1a

.end_instructions

!libfin


._fble
  CMP.b #$2e,(a5)
  BNE 'no
    ADDQ.l #2,a5
 'no
  JSR stripspaces(a3)
  MOVE.l #$f2950000,d3
  BSR branch6
  JSR writelong(a3)
JMP exit(a3)

._fbge
  CMP.b #$2e,(a5)
  BNE 'no
    ADDQ.l #2,a5
 'no
  JSR stripspaces(a3)
  MOVE.l #$f2930000,d3
  BSR branch6
  JSR writelong(a3)
JMP exit(a3)

._fbgt
  CMP.b #$2e,(a5)
  BNE 'no
    ADDQ.l #2,a5
 'no
  JSR stripspaces(a3)
  MOVE.l #$f2920000,d3
  BSR branch6
  JSR writelong(a3)
JMP exit(a3)

._fblt
 CMP.b #$2e,(a5)
 BNE 'no
 ADDQ.l #2,a5
'no JSR stripspaces(a3)
 MOVE.l #$f2940000,d3
 BSR branch6
 JSR writelong(a3)
 JMP exit(a3)

._fbeq
 CMP.b #$2e,(a5)
 BNE 'no
 ADDQ.l #2,a5
'no JSR stripspaces(a3)
 MOVE.l #$f2810000,d3
 BSR branch6
 JSR writelong(a3)
 JMP exit(a3)
._fbne
  CMP.b #$2e,(a5)
 BNE 'no
 ADDQ.l #2,a5
'no JSR stripspaces(a3)
 MOVE.l #$f28e0000,d3
 BSR branch6
 JSR writelong(a3)
 JMP exit(a3)
._initbasic
 JSR writeinit(a3)
JMP exit(a3)

._stop
  JSR stripspaces(a3)
  MOVE.b (a5)+,d0
  MOVE.l #$0,d1
  JSR writelong(a3)
  JSR findnext(a3)
JMP exit(a3)

._optimize
  JSR stripspaces(a3)
  MOVEQ #0,d0
  MOVE.b (a5)+,d0
  SUB.b #$30,d0               ; convert asciic-code to number

  MOVE.b d0,d1
  AND.b #1,d0
  MOVE.b d0,4(a3)
  MOVE.b d1,d0
  AND.b #2,d0

  ; check if FPU is available and error of not but fpu is on
  MOVEM.l d0-d5/a0-a6,-(a7)
  CMP.b #2,d0
  BNE 'no_fpu_optimize
    BSR.w _checkfpu
    TST.b d0
    BNE 'fpufound
      MOVEM.l (a7)+,d0-d5/a0-a6
      MOVE.l #errtext4,d0
      JMP error(a3)
   'fpufound
 'no_fpu_optimize
  MOVEM.l (a7)+,d0-d5/a0-a6

  MOVEM.l d0-d5/a0-a6,-(a7)
  MOVEQ #0,d3                 ; AB pre 2.27 hack
  MOVEQ #0,d5
  MOVE.w #$203c,d1
  JSR writeword(a3)
  MOVE.l d0,d1
  JSR writelong(a3)

  MOVE.l #$c703,d1              ; 50947               ; call setfpumode in string2lib
  JSR uselib(a3)                                      ; fpu optimization flag for other libs
  MOVEM.l (a7)+,d0-d5/a0-a6

  MOVE.b d0,6(a3)
  MOVE.b d1,d0
  AND.b #4,d0
  MOVE.b d0,8(a3)
 'l5
JMP exit(a3)

_checkfpu:
  ;-- cpu / fpu checks
  MOVE.l 4,a0
  MOVE 296(a0),d0                                     ; AttnFlags of execbase
  LSR #4,d0                                           ; skip cpu data, move fpubits to the right
  AND 8,d0

  MOVEQ #0,d1
  TST d0
 `loop_highest_bit
    BEQ `done_highest_bit
    ADDQ #1,d1
    LSR #1,d0
  BRA `loop_highest_bit
 `done_highest_bit
  MOVE.l d1, d0
RTS

._sub
  MOVE.l #%011111 000000000000000 0000101000 0,d3
  MOVEQ #0,d4

  CMP.b #".",(a5)
  BNE 'no1
    ADDQ.l #1,a5
    ADDQ.l #1,d3
 'no1
  JSR stripspaces(a3)
  BSR getgpr
  Dc.l $4c3c0000,$200000 ;MULU.l
  ADD.l d0,d3
  CMP.b #",",(a5)+
  BNE syntax2
  BSR getgpr
  MULU #$800,d0
  ADD.l d0,d3
  CMP.b #",",(a5)+
  BNE syntax2
  BSR getgpr
  Dc.l $4c3c0000,$10000
  ADD.l d0,d3
  MOVE.l d3,d1
  JSR writelong(a3)
JMP exit(a3)

._blrl
  MOVE.l #$4e800021,d1
  JSR writelong(a3)
JMP exit(a3)

._tstw
  MOVE.l #$7c000378,d3
  ADDQ.l #1,d3
  MOVEQ #0,d4
  CMP.b #".",(a5)
  BNE 'no1
    ADDQ.l #1,a5
 'no1
  JSR stripspaces(a3)
  BSR getgpr
  MOVE.l d0,d1
  Dc.l $4c3c0000,$10000 ;MULU.l
  ADD.l d0,d3
  MOVE.l d1,d0
  Dc.l $4c3c0000,$200000
  MULS #$800,d1
  ADD.l d1,d3
  ADD.l d0,d3
  MOVE.l d3,d1
  JSR writelong(a3)
JMP exit(a3)

_dummy
 JMP exit(a3)

._mftbu
MOVEQ #0,d4
JSR stripspaces(a3)
MOVE.l #$7c0d42e6,d3
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
MOVE.l d3,d1
JSR writelong(a3)
JMP exit(a3)

._mftb
MOVEQ #0,d4
JSR stripspaces(a3)
MOVE.l #$7c0c42e6,d3
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
MOVE.l d3,d1
JSR writelong(a3)
JMP exit(a3)

._mr
MOVE.l #$7c000378,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
JSR stripspaces(a3)
BSR getgpr
Dc.l $4c3c0000,$10000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
BSR getgpr
MOVE.l d0,d1
Dc.l $4c3c0000,$200000
MULS #$800,d1
ADD.l d1,d3
ADD.l d0,d3
MOVE.l d3,d1
JSR writelong(a3)
JMP exit(a3)

._illegal
  MOVE.l #$0,d1
  JSR writelong(a3)
  JSR findnext(a3)
JMP exit(a3)

._liw
MOVE.l #%001111 000000000000000 0000000000 0,d3
MOVEQ #0,d4
JSR stripspaces(a3)
BSR getgpr
MOVE.l d0,d4
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
ADDQ.l #2,(a3)
MOVE.l #liwhook2,d0
ADD.l a2,d0
JSR calc(a3)
MOVE.l a4,a5
SUBQ.l #2,(a3)
MOVE.l d3,d1
JSR writelong(a3)
MOVE.l #%011000 000000000000000 0000000000 0,d3
MOVE.l d4,d0
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
MOVE.l d4,d0
Dc.l $4c3c0000,$10000 ;MULU.l
ADD.l d0,d3
ADDQ.l #2,(a3)
MOVE.l #liwhook1,d0
ADD.l a2,d0
JSR calc(a3)
SUBQ.l #2,(a3)
MOVE.l d3,d1
JSR writelong(a3)
JMP exit(a3)
liwhook2
ASR.l #8,d3
ASR.l #8,d3
MOVE.w d3,(a1)
RTS
liwhook1
MOVE.w d3,(a1)
RTS

._slwi
MOVE.l #%010101 000000000000000 0000000000 0,d3
CMP.b #".",(a5)
BNE 'l10
ADDQ.l #1,a5
ADDQ.l #1,d3
'l10
JSR stripspaces(a3)
MOVEQ #0,d4
BSR getgpr
Dc.l $4c3c0000,$10000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
ADDQ.l #2,(a3)
MOVE.l #slwihook,d0
ADD.l a2,d0
JSR calc(a3)
SUBQ.l #2,(a3)
MOVE.l d3,d1
JSR writelong(a3)
JMP exit(a3)
.slwihook
CMP.l #32,d3
BGE overflow
TST.l d3
BLT overflow
MOVE.l d3,d0
MOVEQ #31,d1
SUB.w d3,d1
ASL.l #1,d1
ASL.l #8,d0
ASL.l #3,d0
ADD.l d0,d1
ADD.w d1,0(a1)
RTS
.srwihook
CMP.l #32,d3
BGE overflow
TST.l d3
BLT overflow
MOVE.l d3,d0
MOVEQ #32,d1
SUB.w d3,d1
ASL.l #8,d1
ASL.l #3,d1
ASL.l #6,d0
ADD.l d0,d1
ADD.l #62,d1
ADD.w d1,0(a1)
RTS
._srwi
MOVE.l #%010101 000000000000000 0000000000 0,d3
CMP.b #".",(a5)
BNE 'l10
ADDQ.l #1,a5
ADDQ.l #1,d3
'l10
JSR stripspaces(a3)
MOVEQ #0,d4
BSR getgpr
Dc.l $4c3c0000,$10000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
ADDQ.l #2,(a3)
MOVE.l #srwihook,d0
ADD.l a2,d0
JSR calc(a3)
SUBQ.l #2,(a3)
MOVE.l d3,d1
JSR writelong(a3)
JMP exit(a3)
_subi
MOVE.l #%001110 000000000000000 0000000000 0,d3
MOVEQ #0,d4
JSR stripspaces(a3)
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
BSR getgpr
Dc.l $4c3c0000,$10000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
ADDQ.l #2,(a3)
MOVE.l #subihook,d0
ADD.l a2,d0
JSR calc(a3)
SUBQ.l #2,(a3)
MOVE.l d3,d1
JSR writelong(a3)
JMP exit(a3)
.subihook
CMP.l #$7fff,d3
BGE overflow
CMP.l #-$8000,d3
BLE overflow
NEG.w d3
ADD.w d3,0(a1)
RTS


_li
MOVE.l #%001110 000000000000000 0000000000 0,d3
MOVEQ #0,d4
JSR stripspaces(a3)
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
ADDQ.l #2,(a3)
MOVE.l #word,d0
JSR calc(a3)
SUBQ.l #2,(a3)
MOVE.l d3,d1
JSR writelong(a3)
JMP exit(a3)

_la
MOVE.l #%001110 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR load
JSR writelong(a3)
JMP exit(a3)

_fcmpu
MOVE.l #%111111 000000000000000 0000000000 0,d3
MOVEQ #1,d4
BSR cmpreg
JSR writelong(a3)
JMP exit(a3)

_frsp
MOVE.l #%111111 000000000000000 0000001100 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR fpr2
JSR writelong(a3)
JMP exit(a3)

_fmr
MOVE.l #%111111 000000000000000 0001001000 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR fpr2
JSR writelong(a3)
JMP exit(a3)
_fabs
MOVE.l #%111111 000000000000000 0100001000 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR fpr2
JSR writelong(a3)
JMP exit(a3)
_fnabs
MOVE.l #%111111 000000000000000 0010001000 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR fpr2
JSR writelong(a3)
JMP exit(a3)
_fnegppc
MOVE.l #%111111 000000000000000 0000101000 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR fpr2
JSR writelong(a3)
JMP exit(a3)

_fnmadd
MOVE.l #%111111 000000000000000 0000011111 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR fpr4
JMP exit(a3)

_fnmsub
MOVE.l #%111111 000000000000000 0000011110 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR fpr4
JMP exit(a3)

_fmadd
MOVE.l #%111111 000000000000000 0000011101 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR fpr4
JMP exit(a3)
_fmsub
MOVE.l #%111111 000000000000000 0000011100 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR fpr4
JMP exit(a3)
_fmulppc
MOVE.l #%111111 000000000000000 0000011001 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR fpr3
JMP exit(a3)
_fsel
MOVE.l #%111111 000000000000000 0000010111 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR fpr4
JMP exit(a3)
_fsqrt
MOVE.l #%111111 000000000000000 0000010110 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR fpr2
JSR writelong(a3)
JMP exit(a3)
_faddppc
MOVE.l #%111111 000000000000000 0000010101 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr3
JSR writelong(a3)
JMP exit(a3)
_fsubppc
MOVE.l #%111111 000000000000000 0000010100 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr3
JSR writelong(a3)
JMP exit(a3)
_fdivppc
MOVE.l #%111111 000000000000000 0000010010 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr3
JSR writelong(a3)
JMP exit(a3)
_fctiwz
MOVE.l #%111111 000000000000000 0000001111 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR fpr2
JSR writelong(a3)
JMP exit(a3)
_fctiw
MOVE.l #%111111 000000000000000 0000001110 0,d3
MOVEQ #1,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR fpr2
JSR writelong(a3)
JMP exit(a3)


_lfsu
MOVE.l #%110001 000000000000000 0000000000 0,d3
MOVEQ #1,d4
BSR loadf
JSR writelong(a3)
JMP exit(a3)
_lfd
MOVE.l #%110010 000000000000000 0000000000 0,d3
MOVEQ #1,d4
BSR loadf
JSR writelong(a3)
JMP exit(a3)
_lfdu
MOVE.l #%110011 000000000000000 0000000000 0,d3
MOVEQ #1,d4
BSR loadf
JSR writelong(a3)
JMP exit(a3)
_stfs
MOVE.l #%110100 000000000000000 0000000000 0,d3
MOVEQ #1,d4
BSR loadf
JSR writelong(a3)
JMP exit(a3)
_stfsu
MOVE.l #%110101 000000000000000 0000000000 0,d3
MOVEQ #1,d4
BSR loadf
JSR writelong(a3)
JMP exit(a3)
_stfd
MOVE.l #%110110 000000000000000 0000000000 0,d3
MOVEQ #1,d4
BSR loadf
JSR writelong(a3)
JMP exit(a3)
_stfdu
MOVE.l #%110111 000000000000000 0000000000 0,d3
MOVEQ #1,d4
BSR loadf
JSR writelong(a3)
JMP exit(a3)
_lfs
MOVE.l #%110000 000000000000000 0000000000 0,d3
MOVEQ #1,d4
BSR loadf
JSR writelong(a3)
JMP exit(a3)

_lwz
MOVE.l #%100000 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR load
JSR writelong(a3)
JMP exit(a3)

_lwzu
MOVE.l #%100001 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR load
JSR writelong(a3)
JMP exit(a3)
_lbzu
MOVE.l #%100011 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR load
JSR writelong(a3)
JMP exit(a3)
_stw
MOVE.l #%100100 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR load
JSR writelong(a3)
JMP exit(a3)
_stwu
MOVE.l #%100101 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR load
JSR writelong(a3)
JMP exit(a3)
_stb
MOVE.l #%100110 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR load
JSR writelong(a3)
JMP exit(a3)
_stbu
MOVE.l #%100111 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR load
JSR writelong(a3)
JMP exit(a3)
_lhz
MOVE.l #%101000 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR load
JSR writelong(a3)
JMP exit(a3)

_lhzu
MOVE.l #%101001 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR load
JSR writelong(a3)
JMP exit(a3)
_lha
MOVE.l #%101010 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR load
JSR writelong(a3)
JMP exit(a3)
_lhau
MOVE.l #%101011 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR load
JSR writelong(a3)
JMP exit(a3)
_sth
MOVE.l #%101100 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR load
JSR writelong(a3)
JMP exit(a3)
_sthu
MOVE.l #%101101 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR load
JSR writelong(a3)
JMP exit(a3)

_extsh
MOVE.l #%011111 000000000000000 1110011010 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr2_
MOVE.l d3,d1
JSR writelong(a3)
JMP exit(a3)
_extsb
MOVE.l #%011111 000000000000000 1110111010 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr2_
MOVE.l d3,d1
JSR writelong(a3)
JMP exit(a3)

_srawi
MOVE.l #%011111 000000000000000 1100111000 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr2_
ADDQ.l #2,(a3)
CMP.b #",",(a5)+
BNE syntax2
MOVE.l #srawihook,d0
ADD.l a2,d0
JSR calc(a3)
SUBQ.l #2,(a3)
MOVE.l d3,d1
JSR writelong(a3)
JMP exit(a3)

_sraw
MOVE.l #%011111 000000000000000 1100011000 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr32
JSR writelong(a3)
JMP exit(a3)

_stfdx
MOVE.l #%011111 000000000000000 1011010111 0,d3
MOVEQ #1,d4
BSR gprf2_
JSR writelong(a3)
JMP exit(a3)
_stfdux
MOVE.l #%011111 000000000000000 1011110111 0,d3
MOVEQ #1,d4
BSR gprf2_
JSR writelong(a3)
JMP exit(a3)

_stfsx
MOVE.l #%011111 000000000000000 1010010111 0,d3
MOVEQ #1,d4
BSR gprf2_
JSR writelong(a3)
JMP exit(a3)
_stfsux
MOVE.l #%011111 000000000000000 1010110111 0,d3
MOVEQ #1,d4
BSR gprf2_
JSR writelong(a3)
JMP exit(a3)

._lfdx
MOVE.l #%011111 000000000000000 1001010111 0,d3
MOVEQ #1,d4
BSR gprf2
JSR writelong(a3)
JMP exit(a3)

_lfdux
MOVE.l #%011111 000000000000000 1000110111 0,d3
MOVEQ #1,d4
BSR gprf2
JSR writelong(a3)
JMP exit(a3)

_lfsux
MOVE.l #%011111 000000000000000 1000110111 0,d3
MOVEQ #1,d4
BSR gprf2
JSR writelong(a3)
JMP exit(a3)

_lfsx
MOVE.l #%011111 000000000000000 1000010111 0,d3
MOVEQ #1,d4
BSR gprf2
JSR writelong(a3)
JMP exit(a3)

_srw
MOVE.l #%011111 000000000000000 1000011000 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr32
JSR writelong(a3)
JMP exit(a3)

_divw
MOVE.l #%011111 000000000000000 0111101011 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr3
JSR writelong(a3)
JMP exit(a3)

_divwu
MOVE.l #%011111 000000000000000 0111001011 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr3
JSR writelong(a3)
JMP exit(a3)

_or
MOVE.l #%011111 000000000000000 0110111100 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr32
JSR writelong(a3)
JMP exit(a3)

_sthux
MOVE.l #%011111 000000000000000 0110110111 0,d3
MOVEQ #0,d4
BSR gpr32
JSR writelong(a3)
JMP exit(a3)

_lhaux
MOVE.l #%011111 000000000000000 0101110111 0,d3
MOVEQ #0,d4
BSR gpr3
JSR writelong(a3)
JMP exit(a3)
_sthx
MOVE.l #%011111 000000000000000 0110010111 0,d3
MOVEQ #0,d4
BSR gpr3
JSR writelong(a3)
JMP exit(a3)

_lhax
MOVE.l #%011111 000000000000000 0101010111 0,d3
MOVEQ #0,d4
BSR gpr3
JSR writelong(a3)
JMP exit(a3)

_lhzx
MOVE.l #%011111 000000000000000 0100010111 0,d3
MOVEQ #0,d4
BSR gpr3
JSR writelong(a3)
JMP exit(a3)
_stbux
MOVE.l #%011111 000000000000000 0011110111 0,d3
MOVEQ #0,d4
BSR gpr3
JSR writelong(a3)
JMP exit(a3)
_stbx
MOVE.l #%011111 000000000000000 0011010111 0,d3
MOVEQ #0,d4
BSR gpr3
JSR writelong(a3)
JMP exit(a3)

_stwx
MOVE.l #%011111 000000000000000 0010010111 0,d3
MOVEQ #0,d4
BSR gpr3
JSR writelong(a3)
JMP exit(a3)
_stwux
MOVE.l #%011111 000000000000000 0010110111 0,d3
MOVEQ #0,d4
BSR gpr3
JSR writelong(a3)
JMP exit(a3)

_subfe
MOVE.l #%011111 000000000000000 0010001000 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr32
JSR writelong(a3)
JMP exit(a3)
_adde
MOVE.l #%011111 000000000000000 0010001010 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr32
JSR writelong(a3)
JMP exit(a3)

_lbzux
MOVE.l #%011111 000000000000000 0001110111 0,d3
MOVEQ #0,d4
BSR gpr3
JSR writelong(a3)
JMP exit(a3)

_nor
MOVE.l #%011111 000000000000000 0001111100 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr32
JSR writelong(a3)
JMP exit(a3)
_neg
MOVE.l #%011111 000000000000000 0001101000 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr2
JSR writelong(a3)
JMP exit(a3)

_mulhw
MOVE.l #%011111 000000000000000 0001001011 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr3
JSR writelong(a3)
JMP exit(a3)
_lwzux
MOVE.l #%011111 000000000000000 0000010111 0,d3
MOVEQ #0,d4
BSR gpr3
JSR writelong(a3)
JMP exit(a3)
_lbzx
MOVE.l #%011111 000000000000000 0001010100 0,d3
MOVEQ #0,d4
BSR gpr3
JSR writelong(a3)
JMP exit(a3)
_cmplw
MOVE.l #%011111 000000000000000 0000100000 0,d3
MOVEQ #0,d4
BSR cmpreg
JSR writelong(a3)
JMP exit(a3)
_slw
MOVE.l #%011111 000000000000000 0000011000 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr32
JSR writelong(a3)
JMP exit(a3)
_and
MOVE.l #%011111 000000000000000 0000011100 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr32
JSR writelong(a3)
JMP exit(a3)
_subf
MOVE.l #%011111 000000000000000 0000101000 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr3
JSR writelong(a3)
JMP exit(a3)

_lwarx
MOVE.l #%011111 000000000000000 0000010100 0,d3
MOVEQ #0,d4
BSR gpr3
JSR writelong(a3)
JMP exit(a3)

_lwzx
MOVE.l #%011111 000000000000000 0000010111 0,d3
MOVEQ #0,d4
BSR gpr3
JSR writelong(a3)
JMP exit(a3)

_subfc
MOVE.l #%011111 000000000000000 0000001000 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr3
JSR writelong(a3)
JMP exit(a3)

_addc
MOVE.l #%011111 000000000000000 0000001010 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr3
JSR writelong(a3)
JMP exit(a3)

_ori
MOVE.l #%011000 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR immppc2
JSR writelong(a3)
JMP exit(a3)
_oris
MOVE.l #%011001 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR immppc2
JSR writelong(a3)
JMP exit(a3)
_andi
MOVE.l #%011100 000000000000000 0000000000 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)+
BNE errrc
JSR stripspaces(a3)
BSR immppc2
JSR writelong(a3)
JMP exit(a3)
_andis
MOVE.l #%011101 000000000000000 0000000000 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)+
BNE errrc
BSR immppc2
JSR writelong(a3)
JMP exit(a3)
_xori
MOVE.l #%011010 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR immppc2
JSR writelong(a3)
JMP exit(a3)
_xoris
MOVE.l #%011011 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR immppc2
JSR writelong(a3)
JMP exit(a3)

_rlwimi
MOVE.l #%010100 000000000000000 0000000000 0,d3
BSR rlwmi2
JSR writelong(a3)
JMP exit(a3)
_rlwinm
MOVE.l #%010101 000000000000000 0000000000 0,d3
BSR rlwmi2
JSR writelong(a3)
JMP exit(a3)
_rlwnm
MOVE.l #%010111 000000000000000 0000000000 0,d3
BSR rlwmi2
JSR writelong(a3)
JMP exit(a3)

_blr
MOVE.l #$4e800020,d1
JSR writelong(a3)
JMP exit(a3)

_b
MOVE.l #%010010 000000000000000 0000000000 0,d3
BSR branch2
JSR writelong(a3)
JMP exit(a3)

_bl
MOVE.l #%010010 000000000000000 0000000000 1,d3
BSR branch2
JSR writelong(a3)
JMP exit(a3)
_bdnz
MOVE.l #$42000000,d3
BSR branch
JSR writelong(a3)
JMP exit(a3)

_mflr
MOVEQ #0,d4
JSR stripspaces(a3)
MOVE.l #$7c0802a6,d3
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
MOVE.l d3,d1
JSR writelong(a3)
JMP exit(a3)

_mfctr
MOVEQ #0,d4
JSR stripspaces(a3)
MOVE.l #$7c0902a6,d3
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
MOVE.l d3,d1
JSR writelong(a3)
JMP exit(a3)

_mtlr
MOVEQ #0,d4
JSR stripspaces(a3)
MOVE.l #$7c0803a6,d3
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
MOVE.l d3,d1
JSR writelong(a3)
JMP exit(a3)

_mtctr
MOVEQ #0,d4
JSR stripspaces(a3)
MOVE.l #$7c0903a6,d3
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
MOVE.l d3,d1
JSR writelong(a3)
JMP exit(a3)
_mulli
MOVE.l #%000111 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR immppc
JSR writelong(a3)
JMP exit(a3)

_subfic
MOVE.l #%001000 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR immppc
JSR writelong(a3)
JMP exit(a3)


_blt
MOVE.l #$41800000,d3
BSR branch
JSR writelong(a3)
JMP exit(a3)

_ble
MOVE.l #$40810000,d3
BSR branch
JSR writelong(a3)
JMP exit(a3)

_bge
MOVE.l #$40800000,d3
BSR branch
JSR writelong(a3)
JMP exit(a3)

_bgt
MOVE.l #$41810000,d3
BSR branch
JSR writelong(a3)
JMP exit(a3)

_bnl
MOVE.l #$40800000,d3
BSR branch
JSR writelong(a3)
JMP exit(a3)

_bng
MOVE.l #$40810000,d3
BSR branch
JSR writelong(a3)
JMP exit(a3)
_bso
MOVE.l #$41830000,d3
BSR branch
JSR writelong(a3)
JMP exit(a3)
_bns
MOVE.l #$40830000,d3
BSR branch
JSR writelong(a3)
JMP exit(a3)

_bun
MOVE.l #$41830000,d3
BSR branch
JSR writelong(a3)
JMP exit(a3)

_bnu
MOVE.l #$40830000,d3
BSR branch
JSR writelong(a3)
JMP exit(a3)

_beq
MOVE.l #$41820000,d3
BSR branch
JSR writelong(a3)
JMP exit(a3)

_bne
MOVE.l #$40820000,d3
BSR branch
JSR writelong(a3)
JMP exit(a3)
_fcmpo
MOVE.l #%111111 000000000000000 0000100000 0,d3
MOVEQ #1,d4
BSR cmpreg
JSR writelong(a3)
JMP exit(a3)
_cmpw
MOVE.l #%011111 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR cmpreg
JSR writelong(a3)
JMP exit(a3)
_cmpwi
MOVE.l #%001011 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR cmpim
JSR writelong(a3)
JMP exit(a3)
_cmplwi
MOVE.l #%001010 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR cmpim
JSR writelong(a3)
JMP exit(a3)


_addi
MOVE.l #%001110 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR immppc
JSR writelong(a3)
JMP exit(a3)

_addic
MOVE.l #%001100 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR immppc
JSR writelong(a3)
JMP exit(a3)

._add
MOVE.l #%011111 000000000000000 0100001010 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,a5
ADDQ.l #1,d3
'no1
BSR gpr3
JSR writelong(a3)
JMP exit(a3)

getgpr
MOVE.l a5,a0
CMP.b #0,d4
BNE 'l10
CMP.b #"r",(a5)
BNE 'l20
ADDQ.l #1,a5
BRA 'l20
'l10:
CMP.b #"f",(a5)
BNE 'l20
ADDQ.l #1,a5
'l20
MOVEQ #0,d0
MOVEQ #0,d2
MOVE.b (a5)+,d0
SUB.b #$30,d0
BMI 'var
CMP.b #$9,d0
BGT 'var
MOVE.b (a5)+,d2
SUB.b #$30,d2
BMI 'one
CMP.b #$9,d2
BGT 'one
MULS #10,d0
ADD.l d2,d0
CMP.l #32,d0
BGE errreg
RTS
'one
SUBQ.l #1,a5
RTS
'var
MOVE.l a0,a5
JSR findconstant(a3)
BNE errconstant
MOVE.l 8(a0),d0
CMP.l #32,d0
BGE errreg
TST.l d0
BMI errreg
RTS


._ppc
.remap
  JSR writelong(a3)
  MOVE.l (a3),d0
  AND.l #$fffffffc,d0
  MOVE.l d0,(a3)
  MOVEQ #0,d0
  MOVE.w #$803d,d0 ;add
  MOVE.w #real+$8e,d1 ;
  JSR remaptoken(a3)
  MOVE.w #$802d,d0 ;stop
  MOVE.w #real+$113,d1 ;
JSR remaptoken(a3)
MOVE.w #$8042,d0 ;and
MOVE.w #real+$b9,d1 ;
JSR remaptoken(a3)
MOVE.w #$8086,d0 ;neg
MOVE.w #real+$bf,d1 ;
JSR remaptoken(a3)
MOVE.w #$803e,d0 ;addi
MOVE.w #real+$8f,d1
JSR remaptoken(a3)
MOVE.w #$8050,d0 ;bne
MOVE.w #real+$93,d1 ;
JSR remaptoken(a3)
MOVE.w #$8048,d0 ;beq
MOVE.w #real+$94,d1 ;
JSR remaptoken(a3)
MOVE.w #$804e,d0 ;blt
MOVE.w #real+$95,d1 ;
JSR remaptoken(a3)
MOVE.w #$804c,d0 ;ble
MOVE.w #real+$96,d1 ;
JSR remaptoken(a3)
MOVE.w #$8049,d0 ;bge
MOVE.w #real+$97,d1 ;
JSR remaptoken(a3)
MOVE.w #$804a,d0 ;bgt
MOVE.w #real+$98,d1 ;
JSR remaptoken(a3)
MOVE.w #$8043,d0 ;andi
MOVE.w #real+$b0,d1 ;
JSR remaptoken(a3)
MOVE.w #$808b,d0 ;ori
MOVE.w #real+$ae,d1 ;
JSR remaptoken(a3)
MOVE.w #$808a,d0 ;or
MOVE.w #real+$ce,d1 ;
JSR remaptoken(a3)
MOVE.w #real+$86,d0 ;fdiv
MOVE.w #real+$cc,d1 ;
JSR remaptoken(a3)
MOVE.w #real+$83,d0 ;fsub
MOVE.w #real+$f3,d1 ;
JSR remaptoken(a3)
MOVE.w #real+$84,d0 ;fadd
MOVE.w #real+$f4,d1 ;
JSR remaptoken(a3)
MOVE.w #real+$85,d0 ;fmul
MOVE.w #real+$f9,d1 ;
JSR remaptoken(a3)
MOVE.w #real+$88,d0 ;fneg
MOVE.w #real+$ff,d1 ;
JSR remaptoken(a3)
MOVE.w #$80a8,d0 ;subi
MOVE.w #real+$105,d1 ;
JSR remaptoken(a3)
MOVE.w #$8077,d0 ;illegal
MOVE.w #real+$109,d1 ;
JSR remaptoken(a3)
MOVE.w #$80a7,d0 ;sub
MOVE.w #real+$110,d1 ;
JSR remaptoken(a3)

JMP exit(a3)


._use68k
MOVE.w #$803d,d0 ;add
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #$802d,d0 ;stop
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #$8042,d0 ;and
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #$8086,d0 ;neg
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #$803e,d0 ;addi
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #$8050,d0 ;bne
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #$8048,d0 ;beq
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #$804e,d0 ;blt
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #$804c,d0 ;ble
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #$8049,d0 ;bge
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #$804a,d0 ;bgt
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #$8043,d0 ;andi
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #$808b,d0 ;ori
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #$808a,d0 ;or
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #real+$86,d0 ;fdiv
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #real+$83,d0 ;fsub
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #real+$84,d0 ;fadd
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #real+$85,d0 ;fmul
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #real+$88,d0 ;fneg
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #$80a8,d0 ;subi
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #$8077,d0 ;illegal
MOVEQ #0,d1
JSR remaptoken(a3)
MOVE.w #$80a7,d0 ;sub
MOVEQ #0,d1
JSR remaptoken(a3)
JMP exit(a3)


_addis
MOVE.l #%001111 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR immppc
JSR writelong(a3)
JMP exit(a3)


._lbz
MOVE.l #%100010 000000000000000 0000000000 0,d3
MOVEQ #0,d4
BSR load
JSR writelong(a3)
JMP exit(a3)
_mullw
MOVE.l #%011111 000000000000000 0011101011 0,d3
MOVEQ #0,d4
CMP.b #".",(a5)
BNE 'no1
ADDQ.l #1,d3
ADDQ.l #1,a5
'no1
BSR gpr3
JSR writelong(a3)
JMP exit(a3)
.branch
CMP.b #"+",(a5)
BNE 'bl1
ADDQ.l #1,a5
ADD.l #$200000,d3
'bl1
CMP.b #"-",(a5)
BNE 'bl2
ADDQ.l #1,a5
'bl2:JSR stripspaces(a3)
MOVEQ #0,d0
MOVE.b (a5),d0
SUB.b #$30,d0
BMI 'var
CMP.b #$9,d0
BGT 'var
CMP.b #8,d0
BGE errreg
Dc.l $4c3c0000,$40000 ;MULU.l
ADD.l d0,d3
ADDQ.l #1,a5
CMP.b #",",(a5)+
BNE syntax2
'var
ADDQ.l #2,(a3)
MOVE.l #branchhook,d0
ADD.l a2,d0
JSR calc(a3)
SUBQ.l #2,(a3)
MOVE.l d3,d1
RTS
.branch2
JSR stripspaces(a3)
MOVEQ #0,d0
MOVE.b (a5),d0
SUB.b #$30,d0
BMI 'var
CMP.b #$9,d0
BGT 'var
CMP.b #8,d0
BGE errreg
Dc.l $4c3c0000,$40000 ;MULU.l
ADD.l d0,d3
ADDQ.l #1,a5
CMP.b #",",(a5)+
BNE syntax2
'var
ADDQ.l #2,(a3)
MOVE.l #branchhook2,d0
ADD.l a2,d0
JSR calc(a3)
SUBQ.l #2,(a3)
MOVE.l d3,d1
RTS
branch6
ADDQ.l #2,(a3)
MOVE.l #branchhook6,d0
ADD.l a2,d0
JSR calc(a3)
SUBQ.l #2,(a3)
MOVE.l d3,d1
RTS

srawihook
CMP.l #32,d3
BGE errreg
TST.l d3
BLT errreg
MULS  #$800,d3
ADD.w d3,0(a1)
RTS

.wimihook1
CMP.l #32,d3
BGE overflow
TST.l d3
BLT overflow
ASL.l #1,d3
ADD.w d3,0(a1)
RTS
.wimihook2
CMP.l #32,d3
BGE overflow
TST.l d3
BLT overflow
ASL.l #6,d3
ADD.w d3,0(a1)
RTS
.wimihook3
CMP.l #32,d3
BGE overflow
TST.l d3
BLT overflow
ASL.l #8,d3
ASL.l #3,d3
ADD.w d3,0(a1)
RTS

branchhook
ADDQ.l #2,d3
SUB.l a1,d3
CMP.l #$7fff,d3
BGE overflow
CMP.l #-$8000,d3
BLE overflow
OR.w d3,0(a1)
RTS
branchhook2
ADDQ.l #2,d3
SUB.l a1,d3
CMP.l #$ffffff,d3
BGE overflow
CMP.l #-$800000,d3
BLE overflow
AND.l #$3ffffff,d3
OR.l d3,-2(a1)
RTS
branchhook6
SUB.l a1,d3
CMP.l #$7fff,d3
BGE overflow
CMP.l #-$8000,d3
BLE overflow
OR.w d3,0(a1)
RTS

.cmpim
JSR stripspaces(a3)
BSR getgpr
CMP.w #8,d0
BGE errreg
Dc.l $4c3c0000,$800000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
BSR getgpr
Dc.l $4c3c0000,$10000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
ADDQ.l #2,(a3)
MOVE.l #word,d0
JSR calc(a3)
SUBQ.l #2,(a3)
MOVE.l d3,d1
RTS
.rlwmi2
CMP.b #".",(a5)
BNE 'l10
ADDQ.l #1,a5
ADDQ.l #1,d3
'l10
JSR stripspaces(a3)
MOVEQ #0,d4
BSR getgpr
Dc.l $4c3c0000,$10000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
ADDQ.l #2,(a3)
MOVE.l #wimihook3,d0
ADD.l a2,d0
JSR calc(a3)
CMP.b #",",(a5)+
BNE syntax2
MOVE.l #wimihook2,d0
ADD.l a2,d0
JSR calc(a3)
CMP.b #",",(a5)+
BNE syntax2
MOVE.l #wimihook1,d0
ADD.l a2,d0
JSR calc(a3)
SUBQ.l #2,(a3)
MOVE.l d3,d1
RTS
.immppc
JSR stripspaces(a3)
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
BSR getgpr
Dc.l $4c3c0000,$10000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
ADDQ.l #2,(a3)
MOVE.l #word,d0
JSR calc(a3)
SUBQ.l #2,(a3)
MOVE.l d3,d1
RTS
.immppc2
JSR stripspaces(a3)
BSR getgpr
Dc.l $4c3c0000,$10000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
ADDQ.l #2,(a3)
MOVE.l #word,d0
JSR calc(a3)
SUBQ.l #2,(a3)
MOVE.l d3,d1
RTS
.loadf
JSR stripspaces(a3)
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
ADDQ.l #2,(a3)
MOVE.l #word,d0
JSR calc(a3)
SUBQ.l #2,(a3)
ADDQ.l #1,a5
MOVEQ #0,d4
BSR getgpr
Dc.l $4c3c0000,$10000 ;MULU.l
ADD.l d0,d3
CMP.b #")",(a5)+
BNE syntax2
MOVE.l d3,d1
RTS
.load
JSR stripspaces(a3)
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
ADDQ.l #2,(a3)
MOVE.l #word,d0
JSR calc(a3)
SUBQ.l #2,(a3)
ADDQ.l #1,a5
BSR getgpr
Dc.l $4c3c0000,$10000 ;MULU.l
ADD.l d0,d3
CMP.b #")",(a5)+
BNE syntax2
MOVE.l d3,d1
RTS
.gpr2_
JSR stripspaces(a3)
BSR getgpr
Dc.l $4c3c0000,$10000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
BSR getgpr
Dc.l $4c3c0000,$200000
ADD.l d0,d3
RTS
.gpr3
JSR stripspaces(a3)
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
BSR getgpr
Dc.l $4c3c0000,$10000
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
BSR getgpr
MULU #$800,d0
ADD.l d0,d3
MOVE.l d3,d1
RTS
.fpr3
JSR stripspaces(a3)
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
BSR getgpr
Dc.l $4c3c0000,$10000
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
BSR getgpr
MULU #$40,d0
ADD.l d0,d3
MOVE.l d3,d1
JMP writelong(a3)

.fpr4
  JSR stripspaces(a3)
  BSR getgpr
  Dc.l $4c3c0000,$200000 ;MULU.l
  ADD.l d0,d3
  CMP.b #",",(a5)+
  BNE syntax2
  BSR getgpr
  Dc.l $4c3c0000,$10000
  ADD.l d0,d3
  CMP.b #",",(a5)+
  BNE syntax2
  BSR getgpr
  MULU #$40,d0
  ADD.l d0,d3
  CMP.b #",",(a5)+
  BNE syntax2
  BSR getgpr
  MULU #$800,d0
  OR.l d0,d3
  MOVE.l d3,d1
JMP writelong(a3)

.fpr2
JSR stripspaces(a3)
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
BSR getgpr
MULU #$800,d0
ADD.l d0,d3
MOVE.l d3,d1
RTS

.gprf2_
JSR stripspaces(a3)
BSR getgpr
Dc.l $4c3c0000,$10000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
MOVEQ #0,d4
BSR getgpr
Dc.l $4c3c0000,$200000
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
BSR getgpr
MULU #$800,d0
ADD.l d0,d3
MOVE.l d3,d1
RTS
.gprf2
JSR stripspaces(a3)
BSR getgpr
Dc.l $4c3c0000,$200000 ;MULU.l
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
MOVEQ #0,d4
BSR getgpr
Dc.l $4c3c0000,$10000
ADD.l d0,d3
CMP.b #",",(a5)+
BNE syntax2
BSR getgpr
MULU #$800,d0
ADD.l d0,d3
MOVE.l d3,d1
RTS

gpr2
  JSR stripspaces(a3)
  BSR getgpr
  Dc.l $4c3c0000,$200000 ;MULU.l
  ADD.l d0,d3
  CMP.b #",",(a5)+
  BNE syntax2
  BSR getgpr
  Dc.l $4c3c0000,$10000
  ADD.l d0,d3
  MOVE.l d3,d1
  RTS
  JSR stripspaces(a3)
  BSR getgpr
  Dc.l $4c3c0000,$200000 ;MULU.l
  ADD.l d0,d3
  CMP.b #",",(a5)+
  BNE syntax2
  BSR getgpr
  Dc.l $4c3c0000,$10000
  ADD.l d0,d3
  MOVE.l d3,d1
RTS

.gpr32
  JSR stripspaces(a3)
  BSR getgpr
  Dc.l $4c3c0000,$10000 ;MULU.l
  ADD.l d0,d3
  CMP.b #",",(a5)+
  BNE syntax2
  BSR getgpr
  Dc.l $4c3c0000,$200000
  ADD.l d0,d3
  CMP.b #",",(a5)+
  BNE syntax2
  BSR getgpr
  MULU #$800,d0
  ADD.l d0,d3
  MOVE.l d3,d1
RTS

cmpreg
  JSR stripspaces(a3)
  BSR getgpr
  CMP.w #8,d0
  BEQ errreg
  Dc.l $4c3c0000,$800000 ;MULU.l
  ADD.l d0,d3
  CMP.b #",",(a5)+
  BNE syntax2
  BSR getgpr
  Dc.l $4c3c0000,$10000
  ADD.l d0,d3
  CMP.b #",",(a5)+
  BNE syntax2
  BSR getgpr
  MULU #$800,d0
  ADD.l d0,d3
  MOVE.l d3,d1
RTS

._fmove;68
  CMP.b #".",(a5)+
    BNE syntax2
  CMP.b #"X",(a5)
    BEQ 'yes
  CMP.b #"x",(a5)
    BNE 'l21
 'yes
  MOVE.w #$f200,d1
  JSR writeword(a3)
  MOVEQ #0,d1
  BSR tworegs
JMP exit(a3)

'l21:
  MOVE.b (a5)+,-(a7)
  JSR stripspaces(a3)
  CMP.b #"#",(a5)
  BEQ 'immi
  CMP.w #"fp",(a5)
  BEQ 'l100
  CMP.w #"FP",(a5)
  BEQ 'l100
  CMP.b #"D",(a5)
  BEQ 'od
  CMP.b #"d",(a5)
  BNE 'nod
 'od
  MOVEQ #0,d0
  MOVE.b 1(a5),d0
  SUB.b #$30,d0
  BMI 'nod
  CMP.b #$7,d0
  BGT 'nod
  CMP.b #",",2(a5)
  BNE 'nod
  MOVE.w #$f200,d1
  ADD.w d0,d1
  JSR writeword(a3)
  ADDQ.l #3,a5
  MOVE.b (a7)+,d0
  CMP.b #"S",d0
  BEQ 'ok4
    CMP.b #"s",d0
    BNE 'd10
 'ok4
  MOVE.w #$4400,d1
 'd10:
CMP.b #"L",d0
BEQ 'l1
CMP.b #"l",d0
BNE 'd11
'l1 MOVE.w #$4000,d1
'd11:CMP.b #"w",d0
BNE 'd12
MOVE.w #$5000,d1
'd12:CMP.b #"b",d0
BNE 'd13
MOVE.w #$5800,d1
'd13:CMP.b #"d",d0
BNE 'd14
MOVE.w #$5400,d1
'd14
BSR freg3
JSR writeword(a3)
JMP exit(a3)
'nod:ADDQ.l #4,(a3)
MOVE.l #word,d0
JSR calc(a3)
SUBQ.l #4,(a3)
MOVE.w #$f228,d1
BSR  areg
JSR writeword(a3)
CMP.b #",",(a5)+
BNE syntax2
MOVE.b (a7)+,d0
CMP.b #"S",d0
BEQ 's1
     CMP.b #"s",d0
BNE 'l10
's1 MOVE.w #$4400,d1
'l10:
CMP.b #"L",d0
BEQ 'lo1
CMP.b #"l",d0
BNE 'l11
'lo1 MOVE.w #$4000,d1
'l11:CMP.b #"w",d0
BNE 'l12
MOVE.w #$5000,d1
'l12:CMP.b #"b",d0
BNE 'l13
MOVE.w #$5800,d1
'l13:CMP.b #"d",d0
BNE 'l14
MOVE.w #$5400,d1
'l14
BSR freg3
JSR writeword(a3)
CMP.b #2,d2
BNE 'wr
JSR writeword(a3)      ;add to destpointer for rel 16
JMP exit(a3)
'wr:JSR writelong(a3)
 JMP exit(a3)
'immi
ADDQ.l #1,a5
CMP.b #"w",(a7)
BNE 'float
MOVEQ #2,d2
ADDQ.l #4,(a3)
MOVE.l #word,d0
JSR calc(a3)
SUBQ.l #4,(a3)
MOVE.w #$f23c,d1
JSR writeword(a3)
MOVE.b #",",d1
JSR findchar(a3)
MOVE.w #$0,d1
BSR immi2:
ADDQ.l #2,a7
JMP exit(a3)
'float:
CMP.b #"S",(a7)
BEQ 'ok5
CMP.b #"s",(a7)
BNE 'long
'ok5 MOVEQ #4,d2
ADDQ.l #4,(a3)
MOVE.l #single,d0
JSR calc(a3)
SUBQ.l #4,(a3)
MOVE.w #$f23c,d1
JSR writeword(a3)
MOVE.b #",",d1
JSR findchar(a3)
MOVE.w #$0,d1
BSR immi2:
ADDQ.l #2,a7
JMP exit(a3)
'long
CMP.b #"L",(a7)
BEQ 'lo11
CMP.b #"l",(a7)
BNE syntax2
'lo11 MOVEQ #4,d2
ADDQ.l #4,(a3)
MOVE.l #long,d0
JSR calc(a3)
SUBQ.l #4,(a3)
MOVE.w #$f23c,d1
JSR writeword(a3)
MOVE.b #",",d1
JSR findchar(a3)
MOVE.w #$0,d1
BSR immi2:
ADDQ.l #2,a7
JMP exit(a3)
'l100
MOVE.b (a7)+,d0
CMP.b #"S",d0
BEQ 'ok6
      CMP.b #"s",d0
BNE 'l10a
'ok6 MOVE.w #$6400,d1
'l10a:
CMP.b #"L",d0
BEQ 'lo2
CMP.b #"l",d0
BNE 'l11a
'lo2 MOVE.w #$6000,d1
'l11a:CMP.b #"w",d0
BNE 'l12a
MOVE.w #$7000,d1
'l12a:CMP.b #"b",d0
BNE 'l13a
MOVE.w #$7800,d1
'l13a:
CMP.b #"D",d0
BEQ 'yes2
CMP.b #"d",d0
BNE 'l14a
'yes2 MOVE.w #$7400,d1
'l14a
BSR freg3
MOVE.w d1,-(a7)
CMP.b #",",(a5)+
BNE syntax2
CMP.b #"D",(a5)
BEQ 'ds
CMP.b #"d",(a5)
BNE 'nods
'ds MOVEQ #0,d0
MOVE.b 1(a5),d0
SUB.b #$30,d0
BMI 'nods
CMP.b #$7,d0
BGT 'nods
TST.b 2(a5)
BEQ 'nods2
CMP.b #" ",2(a5)
BEQ 'nods2
CMP.b #";",2(a5)
BEQ 'nods2
BRA 'nods
'nods2:MOVE.w #$f200,d1
ADD.w d0,d1
JSR writeword(a3)
ADDQ.l #2,a5
MOVE.w (a7)+,d1
JSR writeword(a3)
JMP exit(a3)

'nods:
  ADDQ.l #4,(a3)
  MOVE.l #word,d0
  JSR calc(a3)
  MOVE.l d0,a1
  SUBQ.l #4,(a3)
  MOVE.w #$f228,d1
  BSR areg
  JSR writeword(a3)
  MOVE.w (a7)+,d1
  JSR writeword(a3)
  JSR writeword(a3)
  CMP.b #4,d2
  BNE 'ln100
    JSR writeword(a3)
 'ln100:
JMP exit(a3)

errreg
  MOVE.l #errtext,d0
JMP error(a3)

errtext: Dc.b "Register Num out of range",0

errrc
  MOVE.l #errt2,d0
JMP error(a3)

overflow
  MOVEQ #1,d0
JMP error(a3)

syntax2
  MOVE.l #errtext3,d0
JMP error(a3)

errconstant:
  MOVE.l #errtext2,d0
JMP error(a3)

errtext4: Dc.b "FPU-Optimization not possible: no FPU present",0
errtext3: Dc.b "Syntax Error only reg/imm/off(ax) allowed",0
errtext2: Dc.b "Constant not found or declared too late",0
errt2:Dc.b "Wrong Rc Code Only cmd. allowed here",0
Even

areg
CMP.w #"(A",(a5)+
BEQ 'ok1
CMP.w #"(a",-2(a5)
BNE 'long
'ok1 MOVEQ #2,d2
MOVEQ #0,d0
MOVE.b (a5)+,d0
SUB.b #$30,d0
BMI syntax2
CMP.b #$7,d0
BGT errreg
ADD.w d0,d1
ADDQ #1,a5
RTS
'long
ADD.l #$11,d1
MOVE.l d0,a1
MOVE.l #long,8(a1)
SUBQ.l #2,a5
MOVEQ #4,d2
RTS
freg3
CMP.w #"FP",(a5)+
BEQ 'ok1
CMP.w #"fp",-2(a5)
BNE syntax2
'ok1 MOVEQ #0,d0
MOVE.b (a5)+,d0
SUB.b #$30,d0
BMI syntax2
CMP.b #$7,d0
BGT errreg
MULS #$80,d0
ADD.w d0,d1
RTS
fpreg
CMP.b #".",(a5)
BNE 'l12
ADDQ #2,a5
'l12
JSR stripspaces(a3)
CMP.w #"FP",(a5)+
BEQ 'ok
CMP.w #"fp",-2(a5)
BNE syntax2
'ok MOVEQ #0,d0
MOVE.b (a5)+,d0
SUB.b #$30,d0
BMI syntax2
CMP.b #$7,d0
BGT errreg
MULS #$480,d0
ADD.w d0,d1
RTS
fpreg2
LEA temp(pc),a0
MOVE.w d1,(a0)
CMP.w #".x",(a5)
BEQ tworegs
CMP.w #".X",(a5)
BEQ tworegs
MOVE.b 1(a5),-(a7)
ADDQ #2,a5
JSR stripspaces(a3)
CMP.b #"#",(a5)
BEQ immi
ADDQ.l #2,(a3)
MOVE.l #word,d0
JSR calc(a3)
SUBQ.l #4,(a3)
MOVE.w #$f228,d1
BSR areg
JSR writeword(a3)
MOVE.w temp(pc),d1
BSR immi2
ADDQ.l #2,a7
RTS

immi2:
  CMP.b #",",(a5)+
BNE syntax2
CMP.w #"FP",(a5)+
BEQ 'ok
CMP.w #"fp",-2(a5)
BNE syntax2
'ok MOVEQ #0,d0
MOVE.b (a5)+,d0
SUB.b #$30,d0
BMI syntax2
CMP.b #$7,d0
BGT errreg
MULS #$80,d0
ADD.w d0,d1
MOVE.b 4(a7),d0
     CMP.b #"S",d0
     BEQ 'ok1
     CMP.b #"s",d0
BNE 'l10a
'ok1 ADD.w #$4400,d1
'l10a:
CMP.l #"L",d0
BEQ 'yesl
CMP.b #"l",d0
BNE 'l11a
'yesl ADD.w #$4000,d1
'l11a:CMP.b #"w",d0
BNE 'l12a
ADD.w #$5000,d1
'l12a:CMP.b #"b",d0
BNE 'l13a
ADD.w #$5800,d1
'l13a:
CMP.b #"D",d0
BEQ 'yd
CMP.b #"d",d0
BNE 'l14a
'yd ADD.w #$5400,d1
'l14a
JSR writeword(a3)
CMP.b #2,d2
BNE 'wr
JMP writeword(a3)      ;add to destpointer for rel 16
'wr:JMP writelong(a3)

immi
ADDQ.l #1,a5
CMP.b #"w",(a7)
BNE 'float
MOVE.w #2,d2
ADDQ.l #2,(a3)
MOVE.l #word,d0
JSR calc(a3)
SUBQ.l #4,(a3)
MOVE.w #$f23c,d1
JSR writeword(a3)
MOVE.b #",",d1
JSR findchar(a3)
MOVE.w temp(pc),d1
BSR immi2:
ADDQ.l #2,a7
RTS
'float:
CMP.b #"S",(a7)
BEQ 'ok2
CMP.b #"s",(a7)
BNE syntax2
'ok2 MOVE.w #4,d2
ADDQ.l #2,(a3)
MOVE.l #single,d0
JSR calc(a3)
SUBQ.l #4,(a3)
MOVE.w #$f23c,d1
JSR writeword(a3)
MOVE.b #",",d1
JSR findchar(a3)
MOVE.w temp(pc),d1
BSR immi2:
ADDQ.l #2,a7
RTS

tworegs
ADDQ.l #2,a5
JSR stripspaces(a3)
CMP.w #"FP",(a5)+
BEQ 'ok1
CMP.w #"fp",-2(a5)
BNE syntax2
'ok1 MOVEQ #0,d0
MOVE.b (a5)+,d0
SUB.b #$30,d0
BMI syntax2
CMP.b #$7,d0
BGT errreg
MULS #$400,d0
ADD.w d0,d1
CMP.b #",",(a5)+
BNE syntax2
CMP.w #"FP",(a5)+
BEQ 'ok2
CMP.w #"fp",-2(a5)
BNE syntax2
'ok2 MOVEQ #0,d0
MOVE.b (a5)+,d0
SUB.b #$30,d0
BMI syntax2
CMP.b #$7,d0
BGT errreg
MULS #$80,d0
ADD.w d0,d1
JSR writeword(a3)
RTS

._fcmp
MOVE.w #$f200,d1
JSR writeword(a3)
MOVE.w #$0038,d1
BSR fpreg2
JMP exit(a3)

._fsub
MOVE.w #$f200,d1
JSR writeword(a3)
MOVE.w #$0028,d1
BSR fpreg2
JMP exit(a3)

._fadd
MOVE.w #$f200,d1
JSR writeword(a3)
MOVE.w #$0022,d1
BSR fpreg2
JMP exit(a3)

._fmul
MOVE.w #$f200,d1
JSR writeword(a3)
MOVE.w #$0023,d1
BSR fpreg2
JMP exit(a3)
._fdiv

MOVE.w #$f200,d1
JSR writeword(a3)
MOVE.w #$0020,d1
BSR fpreg2
JMP exit(a3)

._fneg
MOVE.w #$f200,d1
JSR writeword(a3)
MOVE.w #$001a,d1
BSR fpreg
JSR writeword(a3)
JMP exit(a3)

._ftan
  MOVE.w #$f200,d1
  JSR writeword(a3)
  MOVE.w #$000f,d1
  BSR fpreg
  JSR writeword(a3)
JMP exit(a3)

temp: Dc.w 0
