; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram_Disk:"
; ExeFile         = "palettelib.obj"
; CreateIcon      = 0
; Residents       = "blitzlibs:libmacs.res,blitzlibs:blitzoffs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 19
; CursorColumn    = 47
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max BitMap      = 10
; Max IconInfo    = 1
; Max NChunky     = 1
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
;*****************************************
;*                                       *
;* PALETTELIB - holds colour and cycling *
;*              information              *
;*                                       *
;*****************************************

!libheader{#palettelib,init,1,finit,errors}

!astatement
!args{2,7}
!libs{#palettelib,#ia1|#pd0}
!subs{dopalload+1,0,0}
!args{2,7,2}
!libs{#palettelib,#ia1|#pd0}
!subs{dopalload2+1,0,0}                                       ;*****
!name{"LoadPalette","Palette#,Filename$[,Palette Offset]"}

!astatement
!args{2}
!libs{#palettelib,$1380,#screenslib,$1202}
!subs{docycle+1,docyclechk,0}
!name{"Cycle","Palette#"}                                     ;*****

!nullsub{getpal,0,0}

!nullsub{getpal2,0,0}

!astatement
!args{2,2,2,2}
!libs{#graphicslib,$5600,#screenslib,$5002,#blitzcoplib,$9002}
!subs{dorgb,rgbchk,0}                                         ;*****
!name{"RGB","Colour Register,Red,Green,Blue"}

!afunction{2}
!args{2}
!libs{#graphicslib,$5600,#screenslib,$5002,#blitzcoplib,$9002}
!subs{dored,colchk,0}
!name{"Red","(Colour Register)"}                             ;*****

!afunction{2}
!args{2}
!libs{#graphicslib,$5600,#screenslib,$5002,#blitzcoplib,$9002}
!subs{dogreen,colchk,0}
!name{"Green","(Colour Register)"}                            ;*****

!afunction{2}
!args{2}
!libs{#graphicslib,$5600,#screenslib,$5002,#blitzcoplib,$9002}
!subs{doblue,colchk,0}
!name{"Blue","(Colour Register)"}                             ;*****

!dumtoke{"Palette","colour and cycling information",_toke}

!astatement
!args{2,2,2,2,2}
!libs{#palettelib,$1080}
!subs{do4bitpalrgb,prgbchk,0}   ;*****
!name{"PalRGB","Palette#,Colour Register,Red,Green,Blue"}

!astatement
;
!args{2,2,2,2}
!libs{#palettelib,$1080}
!subs{dosetcycle1,setcyclechk,0}
;
!args{2,2,2,2,4}
!libs{#palettelib,$1080}
!subs{dosetcycle2,setcyclechk2,0}
;
!name{"SetCycle","Palette#,Cycle,Low Colour,High Colour[,Speed]"}

!astatement
!args
!libs
!subs{dostopcycle,0,0}
!name{"StopCycle",""}

!astatement
!args{2,2,2,2}
!libs{#screenslib,#ua0,#graphicslib,#la6}
!subs{doaargb+1,aargbchk,0}   ;*****
!name{"AGARGB","Colour Register,Red,Green,Blue"}

!astatement
!args{2,2,2,2,2}
!libs{#palettelib,$1080}
!subs{dopalrgb,aaprgbchk,0}   ;*****
!name{"AGAPalRGB","Palette#,Colour Register,Red,Green,Blue"}

!nullsub{make4bitrgbs,0,0}

!afunction{2}
!args{2}
!libs{#screenslib,#ua0,#graphicslib,#la6}
!subs{doagared,agacolchk,0}
!name{"AGARed","(Colour Register)"}    ;*****

!afunction{2}
!args{2}
!libs{#screenslib,#ua0,#graphicslib,#la6}
!subs{doagagreen,agacolchk,0}
!name{"AGAGreen","(Colour Register)"}  ;*****

!afunction{2}
!args{2}
!libs{#screenslib,#ua0,#graphicslib,#la6}
!subs{doagablue,agacolchk,0}
!name{"AGABlue","(Colour Register)"}   ;*****

!astatement
!args{2}
!libs{#palettelib,$1380,#screenslib,$5202,#graphicslib,$5600,#blitzcoplib,$9002} ;,#ia1|#pd0
!subs{showpal,showpalchk,0}
!name{"ShowPalette","Palette#"}   ;*****

!astatement
!args{2}
!libs
!subs{newpalmode,0,0}
!name{"NewPaletteMode","On|Off"}

!astatement
!args{2}
!libs{#palettelib,$1280}
!subs{_cyclepalette,0,0}
!name{"CyclePalette","Palette#"}

!astatement
!args{#word,#word,#quick}
!libs{#palettelib,$1080,#palettelib,$1181}
!subs{_fadepalette,0,0}
!name{"FadePalette","SrcPalette#,DestPalette#,Brightness.q"}

!astatement
!args{2,2}
!libs{#palettelib,$1380}
!subs{_initpalette,0,0}
!name{"InitPalette","Palette#,NumColors"}

!astatement
!args{2,2,2,2,2,2,2,2,2}
!libs{#palettelib,$1380}
!subs{_paletterange,0,0}
!name{"PaletteRange","Palette#,StartCol,EndCol,r0,g0,b0,r1,g1,b1"}

!astatement
!args{2,2}
!libs{#palettelib,$1280,#palettelib,$1381}
!subs{_duplicatepalette,0,0}
!name{"DuplicatePalette","SrcPalette#,DestPalette#"}

!astatement
!args{#word,#long,#word}
!libs{#palettelib,$1380}
!subs{_cludgepalette,0,0}
!args{#word,#long}
!libs{#palettelib,$1380}
!subs{_cludgepalette2,0,0}
!name{"DecodePalette","Palette#,MemoryLocation[,Palette Offset]"}

!astatement            ;a0 a2 a3 d3
!args{2,2,2,#quick}
!libs{#palettelib,$1080,#palettelib,$1281,#palettelib,$1382}
!subs{_mixpalette,0,0}
!name{"MixPalette","Palette#,Palette#,DestPalette#,fraction"}

_load:!nullsub{0,0,0}

_save:!nullsub{0,0,0}

_use:!nullsub{usepal,usepalchk,0,#screenslib,$5202,#graphicslib,$5600,#blitzcoplib,$9002}
;a3=Palette #, a2=Screen, a6=gr.lib, a1=intuilib
;!nullsub{0,0,0}

_free:!nullsub{freepal,0,0}

init:!nullsub{codeinit,0,0,#graphicslib,#la0}

finit:!nullsub{codefinit,0,0}

!libfin{_toke,_load,_save,_use,_free,32,7}

;
;palette struct:
;
;0.l : palette RGBS - red0.l,green0.l,blue0,l,red1.l...
;4.w : number of above
;
;6.w  : low colour of cycle - 0 for end
;8.w  : high colour of cycle
;10.w : speed
;12.w : var
;
;....
;

NEWTYPE.rgbcomp
  _red.l        ;left justified red component
  _green.l      ;left justified green component
  _blue.l       ;left justified blue component
End NEWTYPE

NEWTYPE .palettedata
  _numcols.w          ;same as palette/_numcols.
  _zero.w             ;for compatibility with graphics lib LoadRGB32.
  _rgbs.rgbcomp[256]  ;256 is the max the amount it will vary
  _zero2.l            ;for graphics lib too.
End NEWTYPE

NEWTYPE.cycleinfo
  _lowcol.w               ;06: low colour for cycle range 0=end
  _hicol.w                ;08: high colour for cycle range.
  _speed.w                ;10: speed of cycle : 16384 = max speed sign=direction
  _var.w                  ;12: cvariable speed is added to.
End NEWTYPE

NEWTYPE.palette         ;size=128
  *_pdata.palettedata   ;00: pointer to palettedata null=none
  _numcols.w            ;04: num cols present in palettedata.
  _cycle.cycleinfo[14]  ;06: below is colour cycling info.
  _pad.b[10]
End NEWTYPE


;************** CODE BELOW ***************

gfxbase:Dc.l 0
cycon:Dc 0
cyclelist:Dc.l 0:; a list of all stuff to be cycled.
                 ;0.l = next
                 ;4.l = palette
                 ;8.l = viewport.
agamode:Dc 0
rgbs4bit:Ds 32   ;32 4 bit RGB vals.

do4bitpalrgb
;
MOVE d5,-(a7)
MOVE d2,d5:LSL #4,d2:OR d5,d2 ;from nyb to byte...
MOVE d3,d5:LSL #4,d3:OR d5,d3
MOVE d4,d5:LSL #4,d4:OR d5,d4
MOVE (a7)+,d5
;
.dopalrgb  ;a0=palette
;
;d1=colour reg, d2.b=red, d3.b=green, d4.b=blue.
;
MOVEM.l d0-d5/a0-a2,-(a7)
;
MOVE d2,d5:LSL #8,d2:OR d5,d2
MOVE d2,d5:SWAP d2:MOVE d5,d2
;
MOVE d3,d5:LSL #8,d3:OR d5,d3
MOVE d3,d5:SWAP d3:MOVE d5,d3
;
MOVE d4,d5:LSL #8,d4:OR d5,d4
MOVE d4,d5:SWAP d4:MOVE d5,d4
;
MOVE.l a0,a2:MOVE.l (a2),a0:CMP 4(a2),d1:BLT 'nogrow
;
;gotta expand palette object.
;
MOVE d1,-(a7)
;
MOVE d1,d0:ADDQ #1,d0:MULU #12,d0:ADDQ.l #8,d0
MOVE.l #$10001,d1:ALibJsr $c002:MOVE.l d0,a0  ;new palette
;
MOVE.l (a2),d0:BEQ 'noold:MOVE.l a0,-(a7)
MOVE.l d0,a1:MOVE 4(a2),d0:MULU #3,d0:ADDQ #1,d0
'loop:MOVE.l (a1)+,(a0)+:DBF d0,'loop
MOVE.l (a2),a1:MOVE 4(a2),d0:MULU #12,d0:ADDQ.l #8,d0
ALibJsr $c003:MOVE.l (a7)+,a0
;
'noold
MOVE.l a0,(a2):MOVE (a7)+,d1
MOVE d1,4(a2):ADDQ #1,4(a2)
MOVE d1,(a0):ADDQ #1,(a0)
;
'nogrow
;
MULU #12,d1:LEA 4(a0,d1),a0
MOVE.l d2,(a0)+:MOVE.l d3,(a0)+:MOVE.l d4,(a0)+
;
MOVEM.l (a7)+,d0-d5/a0-a2:RTS

make4bitrgbs  ;a0=palette object
              ;Return a1...4 bit RGB table, d0 : number of colors
              ;
LEA rgbs4bit(pc),a1:MOVE 4(a0),d0:BEQ 'done
CMP #32,d0:BLS 'skip:MOVE #32,d0
'skip:MOVEM.l d0/a2,-(a7):MOVE.l (a0),a2:ADDQ #4,a2:SUBQ #1,d0
'loop
MOVE.l (a2)+,d1:ROL.l #8,d1:ROL #4,d1:AND #$f00,d1
MOVE.l (a2)+,d2:ROL.l #8,d2:MOVE.b d2,d1
MOVE.l (a2)+,d2:ROL.l #4,d2:AND #15,d2:OR d2,d1
MOVE d1,(a1)+:DBF d0,'loop:LEA rgbs4bit(pc),a1
MOVEM.l (a7)+,d0/a2
'done:RTS

.codeinit
MOVE.l a0,gfxbase:CLR.l cyclelist:CLR cycon
ALibJsr #environlib LSL 7+7
CMP #39,d0:SGE d0:EXT.w d0:MOVE d0,agamode
RTS

codefinit
;
.cycoff
MOVE cycon(pc),d0:BEQ 'skip:NOT cycon
MOVE #$8005,d0:ALibJsr $c101
'skip:MOVE.l cyclelist(pc),a2
'loop:CMP #0,a2:BEQ 'done
MOVE.l a2,a1:MOVEQ #12,d0:MOVE.l (a2),a2:ALibJsr $c003
BRA 'loop
'done:RTS

dopalload:           ;d0=filename, a1=palette item
MOVE.l d1,a0
;
getpal:;palette name in a0, item in a1
MOVEM.l d0-d5,-(a7):MOVEQ #0,d2:BSR loadthepal
MOVEM.l (a7)+,d0-d5:RTS

dopalload2:;d0=filename, a1=palette item, d2=offset
;
MOVE.l d1,a0:MOVE.l d2,d0
;
getpal2:;palette name in a0,item in a1, offset in d0
MOVEM.l d0-d5,-(a7):MOVE.l d0,d2:BSR loadthepal
MOVEM.l (a7)+,d0-d5:RTS

._cludgepalette2:
  MOVEQ#0,d2

._cludgepalette:
  MOVE d2,myoff:MOVE.l d1,a0:MOVEM.l (a0)+,d0-d1:CMP.l#"FORM",d0:BNE err0
  LEA 0(a0,d1.l),a1:CMP.l #"ILBM",(a0)+:BNE err0
cv:
  MOVEM.l(a0)+,d0-d1:CMP.l #"CMAP",d0:BEQ fc
  ADD.l d1,a0:CMP.l a0,a1:BLE err1:BRA cv
fc:
  LEA 0(a0,d1.l),a2:MOVE.l a2,-(a7)
  DIVU#3,d1:MOVEM.l d1/a0-a1,-(a7):ADD myoff(pc),d1
  TST.l(a3):BEQ doin:CMP 4(a3),d1:BLE noin:doin:BSR _initpalette:noin
  MOVEM.l (a7)+,d1/a0-a1:MOVE.l (a3),a2:MOVE myoff(pc),d7:MULU #12,d7
  LEA 4(a2,d7),a2:SUBQ#1,d1
nxc:
  MOVE.b (a0)+,(a2):MOVE.b (a0)+,4(a2):MOVE.b (a0)+,8(a2):ADD#12,a2
  DBRA d1,nxc:ADDQ#6,a3:MOVE.l (a7)+,a0
yv:
  MOVEM.l(a0)+,d0-d1:CMP.l #"CRNG",d0:BEQ yc
  ADD.l d1,a0:CMP.l a0,a1:BLE duncp:BRA yv  ;lo hi speed var
yc:
  MOVEM 2(a0),d4-d5:CMP#1,d5:BEQ 'skip:NEG d4:MOVEQ#0,d5:'skip
  MOVE.b 6(a0),d2:MOVE.b 7(a0),d3:EXT.w d2:EXT.w d3:ADDQ#8,a0
  CMP d2,d3:BEQ yv:MOVEM d2-d5,(a3):ADDQ#8,a3:BRA yv
duncp:
  MOVE#-1,(a3):RTS

myoff:Dc 0

.loadthepal
;palette name in a0, palette item in a1, palette offset in d2
;
ALibJsr #iffiolib LSL 7+1:BNE err0:;open IFF
MOVE.l #"CMAP",d0:ALibJsr #iffiolib LSL 7+6:BNE err1:;find CMAP
MOVE d0,d5:EXT.l d5:DIVU #3,d5:SUBQ #1,d5:BMI 'none:MOVE.l a1,a0:MOVE.l a0,-(a7)
MOVE d2,d1:ADD d5,d1:BSR dopalrgb:MOVE d2,d1
;
'loop
MOVEQ #0,d2:ALibJsr #iffiolib LSL 7+3:MOVE.b d0,d2
MOVEQ #0,d3:ALibJsr #iffiolib LSL 7+3:MOVE.b d0,d3
MOVEQ #0,d4:ALibJsr #iffiolib LSL 7+3:MOVE.b d0,d4
;
BSR dopalrgb
;
ADDQ #1,d1:DBF d5,'loop:MOVE.l (a7)+,a1:ADDQ #6,a1
;
;load cycle info...
;
'cloop:MOVE.l #"CRNG",d0:ALibJsr #iffiolib LSL 7+6:BNE 'done:;ifffind
ALibJsr #iffiolib LSL 7+5:MOVE d0,d2
ALibJsr #iffiolib LSL 7+4:CMP #1,d0:BEQ 'skip2:NEG d2
'skip2:ALibJsr #iffiolib LSL 7+3:EXT d0:MOVE d0,(a1)
ALibJsr #iffiolib LSL 7+3:EXT d0:CMP (a1),d0:BEQ 'cloop
ADDQ #2,a1:MOVE d0,(a1)+:MOVE d2,(a1)+:CLR (a1)+:BRA 'cloop
'done:MOVE #-1,(a1)
;
'none:ALibJsr #iffiolib LSL 7+2:RTS

.dosetcycle1:MOVE.l #$10000,d4
;
.dosetcycle2
;
;find last cycle
;
LEA 4(a0),a1:MOVE (a1)+,d5:BEQ 'knob
;
'loop:TST (a1):BMI 'knob:ADDQ #8,a1:BRA 'loop
'knob
;
LSL #3,d1:LEA 6(a0,d1),a2
;
MOVEQ #0,d5:CMP.l a1,a2:BCS 'knob2:BNE errd:MOVEQ #-1,d5
'knob2
;
CMP d2,d3:BCC 'skip:EXG d2,d3
;
'skip:MOVE d2,(a2)+:MOVE d3,(a2)+
ASR.l #2,d4:MOVE d4,(a2)+:CLR (a2)+
;
TST d5:BPL 'skip2:MOVE d5,(a2)
;
'skip2:RTS

.freepal
MOVE 4(a3),d0:BEQ 'done:CLR 4(a3):MOVE.l (a3),a1:CLR.l (a3)
MOVE #-1,6(a3):MULU #12,d0:ADDQ.l #8,d0:ALibJsr $c003
'done:RTS

.newpalmode
;
MOVE d0,palmode:RTS
;
palmode:Dc 0

.usepal
;
Dc $a001:Dc.l b_usepal
;
TST palmode:BEQ doit1:RTS
;
b_usepal
:
TST palmode:BEQ doit2:RTS

.showpal:;a3=Palette #, a2=Used Screen, a6=gr.lib
;
Dc $a001:Dc.l b_showpal
;
doit1:TST agamode:BEQ 'do4bit
;
MOVE 4(a3),d4:BEQ 'skip:MOVE.l (a2),a0:LEA 44(a0),a0
MOVE.l (a3),a1:JMP -$372(a6)
;
'do4bit
;
MOVE.l a3,a0:BSR make4bitrgbs:TST d0:BEQ 'skip
MOVE.l (a2),a0:LEA 44(a0),a0:JMP _LoadRGB4(a6)
;
'skip

b_showpal
;
doit2:MOVE.l 18(a0),a1:;colour pokes
MOVE 8(a0),d2:CMP 4(a3),d2:BLS 'skip:MOVE 4(a3),d2
'skip:SUBQ #1,d2:BMI 'skip2:ADDQ #2,a1:MOVE.l (a3),a3:ADDQ #4,a3
'loop
;
MOVEQ #0,d0
MOVE.l (a3)+,d0:ROL.l #8,d0:LSL #4,d0
MOVE.l (a3)+,d1:ROL.l #8,d1:MOVE.b d1,d0:AND #$ff0,d0
MOVE.l (a3)+,d1:ROL.l #4,d1:AND #15,d1:OR d1,d0
;
MOVE d0,(a1):ADDQ #4,a1:DBF d2,'loop:RTS
'skip2:RTS

.docycle:;a3=Palette item, a2=Used Screen
;
MOVEQ #12,d0:MOVEQ #1,d1:ALibJsr $c002:MOVE.l d0,a0
;
MOVE.l a3,4(a0)
MOVE.l (a2),a2:LEA 44(a2),a2:MOVE.l a2,8(a0)
MOVE.l cyclelist(pc),(a0):MOVE.l a0,cyclelist
MOVE cycon(pc),d0:BNE 'done:NOT cycon
MOVE #$8005,d0:MOVE.l #cycleem,d1
ALibJsr $c100:;set int, d1=code, d0=level
'done:RTS

.dostopcycle
;
MOVE #$8005,d0:ALibJsr $c101:RTS

.doagared:MOVEQ #0,d7
;
doagacol:MOVE.l (a0),a0:LEA 44(a0),a0:MOVE.l 4(a0),a0
MOVEQ #1,d1:LEA agatable(pc),a1:JSR -$384(a6) ;getrgb32_
MOVE.l agatable(pc,d7),d0:ROL.l #8,d0:AND #255,d0:RTS
;
agatable:Ds.l 3

.doagagreen:MOVEQ #4,d7:BRA doagacol

.doagablue:MOVEQ #8,d7:BRA doagacol

.dored:Dc $a001:Dc.l b_dored
MOVEQ #8,d7
;
a_dogcol:MOVE.l (a0),a0:LEA 44(a0),a0:MOVE.l 4(a0),a0
JSR _GetRGB4(a6):LSR d7,d0:AND #15,d0:RTS

b_dored:;blitz form of red
MOVEQ #8,d7
;
b_dogcol:MOVE.l 18(a0),a0:LSL #2,d0:MOVE 2(a0,d0),d0
LSR d7,d0:AND #15,d0:RTS

.dogreen:Dc $a001:Dc.l b_dogreen
MOVEQ #4,d7:BRA a_dogcol
b_dogreen:MOVEQ #4,d7:BRA b_dogcol

.doblue:Dc $a001:Dc.l b_doblue
MOVEQ #0,d7:BRA a_dogcol
b_doblue:MOVEQ #0,d7:BRA b_dogcol

.doaargb  ;d0=reg, d1=red, d2=green, d3=blue, a6=graphics, a0=screen
;
MOVE d1,d4:LSL #8,d1:MOVE.b d4,d1:MOVE d1,d4:SWAP d1:MOVE d4,d1
MOVE d2,d4:LSL #8,d2:MOVE.b d4,d2:MOVE d2,d4:SWAP d2:MOVE d4,d2
MOVE d3,d4:LSL #8,d3:MOVE.b d4,d3:MOVE d3,d4:SWAP d3:MOVE d4,d3
;EXT.l d0:MOVE.l (a0),a0:LEA 44(a0),a0:JMP -$354(a6)
LEA table(pc),a1:MOVE.b d0,3(a1):MOVEM.l d1-d3,4(a1)
MOVE.l (a0),a0:LEA 44(a0),a0:JMP -$372(a6)

table:Dc.l $10000,0,0,0,0

.dorgb:;d0=reg, d1=red, d2=green, d3=blue
;
Dc $a001:Dc.l b_dorgb
MOVE.l (a0),a0:LEA 44(a0),a0
JMP _SetRGB4(a6)

b_dorgb:;blitz form of RGB command
;
MOVE.l 18(a0),a0:LSL #2,d0
LSL #8,d1:LSL #4,d2:OR d2,d1:OR d3,d1
MOVE d1,2(a0,d0):RTS

.cycleem: ;code to get executed on vblank interupt for
          ;some pretty colour cycling
          ;PC relative for easy duplication

MOVEM.l d2-d4/a2-a3,-(a7):MOVE.l gfxbase(pc),a6
LEA cyclelist(pc),a2

'bigloop
MOVE.l (a2),d0:BEQ 'alldone:MOVE.l d0,a2
MOVE.l 4(a2),a1:LEA 4(a1),a0:MOVEQ #0,d4
;
'cloop:ADDQ #2,a0:MOVE (a0)+,d0:BMI 'done:MOVE (a0)+,d1
MOVEQ #0,d3:MOVE (a0)+,d2:BPL 'skip:NEG d2:MOVEQ #-1,d3
'skip:ADD (a0),d2:MOVE d2,(a0):CMP #16384,d2
BCS 'cloop:SUB #16384,d2:MOVE d2,(a0):MOVEQ #-1,d4
MULU #12,d0:MULU #12,d1:MOVE.l (a1),a3:ADDQ #4,a3:TST d3:BEQ 'down
;
;Here, the palette is scrolling UPWARDS!
;
MOVE.l 0(a3,d0),-(a7)
MOVE.l 4(a3,d0),-(a7)
MOVE.l 8(a3,d0),-(a7)
'uloop
CMP d1,d0:BCC 'udone
MOVE.l 12(a3,d0),0(a3,d0)
MOVE.l 16(a3,d0),4(a3,d0)
MOVE.l 20(a3,d0),8(a3,d0)
ADD #12,d0:BRA 'uloop
'udone
MOVE.l (a7)+,8(a3,d0)
MOVE.l (a7)+,4(a3,d0)
MOVE.l (a7)+,0(a3,d0)
BRA 'cloop
;
;Here, the palette is scrolling DOWNWARDS!
;
'down:
MOVE.l 0(a3,d1),-(a7)
MOVE.l 4(a3,d1),-(a7)
MOVE.l 8(a3,d1),-(a7)
'dloop
CMP d0,d1:BLS 'ddone:SUB #12,d1
MOVE.l 0(a3,d1),12(a3,d1)
MOVE.l 4(a3,d1),16(a3,d1)
MOVE.l 8(a3,d1),20(a3,d1)
BRA 'dloop
'ddone
MOVE.l (a7)+,8(a3,d1)
MOVE.l (a7)+,4(a3,d1)
MOVE.l (a7)+,0(a3,d1)
BRA 'cloop
;
'done
;
TST d4:BEQ 'bigloop
;
TST agamode:BEQ 'do4bit
MOVE.l 8(a2),a0:MOVE.l (a1),a1:JSR -$372(a6):BRA 'bigloop  ;loadrgb32
'do4bit
MOVE.l a1,a0:BSR make4bitrgbs
MOVE.l 8(a2),a0:JSR _LoadRGB4(a6):BRA 'bigloop
;
'alldone
;
MOVEM.l (a7)+,d2-d4/a2-a3:MOVEQ #0,d0:RTS

;-------------------------------------------------------------
; new palette commands added by simon august 1994
;-------------------------------------------------------------

._cyclepalette:      ;a2=color palette
  TST 4(a2):BEQ 'done:MOVE.l a2,a1:LEA 4(a1),a0:MOVEQ #0,d4
  'cloop:ADDQ #2,a0:MOVE (a0)+,d0:BMI 'done:MOVE (a0)+,d1
  MOVEQ #0,d3:MOVE (a0)+,d2:BPL 'skip:NEG d2:MOVEQ #-1,d3
  'skip:ADD (a0),d2:MOVE d2,(a0):CMP #16384,d2
  BCS 'cloop:SUB #16384,d2:MOVE d2,(a0):MOVEQ #-1,d4
  MULU #12,d0:MULU #12,d1:MOVE.l (a1),a3:ADDQ #4,a3:TST d3:BEQ 'down
  MOVE.l 0(a3,d0),-(a7):MOVE.l 4(a3,d0),-(a7):MOVE.l 8(a3,d0),-(a7)
  'uloop:CMP d1,d0:BCC 'udone
  MOVE.l 12(a3,d0),0(a3,d0):MOVE.l 16(a3,d0),4(a3,d0):MOVE.l 20(a3,d0),8(a3,d0)
  ADD #12,d0:BRA 'uloop
  'udone:MOVE.l (a7)+,8(a3,d0):MOVE.l (a7)+,4(a3,d0):MOVE.l (a7)+,0(a3,d0)
  BRA 'cloop
  'down:MOVE.l 0(a3,d1),-(a7):MOVE.l 4(a3,d1),-(a7):MOVE.l 8(a3,d1),-(a7)
  'dloop:CMP d0,d1:BLS 'ddone:SUB #12,d1
  MOVE.l 0(a3,d1),12(a3,d1):MOVE.l 4(a3,d1),16(a3,d1):MOVE.l 8(a3,d1),20(a3,d1)
  BRA 'dloop
  'ddone:MOVE.l (a7)+,8(a3,d1):MOVE.l (a7)+,4(a3,d1):MOVE.l (a7)+,0(a3,d1)
  BRA 'cloop
  'done:RTS

._fadepalette:      ;a0=src a1=dest d2=brightness.q
  MOVE 4(a0),d0:BEQ nocols:CMP 4(a1),d0:BGT nocols:LSR.l#8,d2
  MOVE.l (a0),a0:ADDQ#2,a0:MOVE.l(a1),a1:ADDQ#4,a1:SUBQ#1,d0
  MOVE.l #$ff0000,d7 ;max!
nxcol:
  MOVEM.l (a0)+,d3-d5
  MULU d2,d3:CMP.l d7,d3:BCS ok1:MOVE.l d7,d3:ok1:ASL.l#8,d3
  MULU d2,d4:CMP.l d7,d4:BCS ok2:MOVE.l d7,d4:ok2:ASL.l#8,d4
  MULU d2,d5:CMP.l d7,d5:BCS ok3:MOVE.l d7,d5:ok3:ASL.l#8,d5
  MOVEM.l d3-d5,(a1):ADD#12,a1:DBRA d0,nxcol
  nocols:RTS

._initpalette:   ;a3,d1 palette=a3 d1=numcols
  MOVE d1,d7:MOVE.l (a3),d0:BEQ noold:MOVE.l d0,a1:MOVE 4(a3),d0
  MULU #12,d0:ADDQ#8,d0:ALibJsr$c003
noold:MOVE d7,d0:MULU #12,d0:ADDQ#8,d0:MOVE.l #$10001,d1:ALibJsr $c002
  MOVE.l d0,(a3):MOVE d7,4(a3):EXG d0,a3:MOVE d7,(a3):EXG d0,a3:RTS

._paletterange:   ;d1=start d2=end d3-d5 -(a2)...
  SUB d1,d2:BMI nopr:ADDQ#1,d2:CMP 4(a3),d2:BGT nopr:SUBQ#1,d2
  MOVE.l (a3),a0:MULU#12,d1:LEA 4(a0,d1),a0
  MOVEM -6(a2),d0/d6-d7:SUB d3,d7:SUB d4,d6:SUB d5,d0
  EXT.l d0:ASL.l#8,d0:DIVS d2,d0:EXT.l d0:SWAP d0
  EXT.l d6:ASL.l#8,d6:DIVS d2,d6:EXT.l d6:SWAP d6
  EXT.l d7:ASL.l#8,d7:DIVS d2,d7:EXT.l d7:SWAP d7
  EXT.l d3:SWAP d3:ASL.l#8,d3
  EXT.l d4:SWAP d4:ASL.l#8,d4
  EXT.l d5:SWAP d5:ASL.l#8,d5:MOVEQ#12,d1;:SUBQ#1,d2

  nxcp:MOVEM.l d3-d5,(a0):ADD d1,a0
  ADD.l d7,d3:ADD.l d6,d4:ADD.l d0,d5
  DBRA d2,nxcp:nopr:RTS

._duplicatepalette:    ;a2=src a3=dest
  MOVE 4(a2),d1:BEQ stuffed
  BSR _initpalette:MOVE 4(a2),d0:MULU #3,d0:SUBQ#1,d0
  MOVE.l (a2),a0:ADDQ#4,a0:MOVE.l (a3),a1:ADDQ#4,a1
  nxcdp:MOVE.l (a0)+,(a1)+:DBRA d0,nxcdp:stuffed:RTS

._savepalette:         ;a1=palette d1=string
  RTS



;!astatement            ;a0 a2 a3 d3
;!args{2,2,2,#quick}
;!libs{#palettelib,$1080,#palettelib,$1281,#palettelib,$1382}
;!subs{_mixpalette,0,0}
;!name{"MixPalette","Palette#,Palette#,DestPalette#,fraction"}

._mixpalette:                ;a0,a2=src a3=dest d3=fraction
  ;
  MOVE 4(a0),d0:MULU #3,d0:SUBQ#1,d0
  MOVE.l (a0),a0:ADD #2,a0
  MOVE.l (a2),a2:ADD #2,a2
  MOVE.l (a3),a3:ADD #4,a3
  ;
  ASR.l #1,d3:MOVE#32768,d4:SUB d3,d4
  ;
  nxcm:MOVE.l(a0)+,d1:MOVE.l (a2)+,d2:MULU d3,d1:MULU d4,d2
  ADD.l d2,d1:ADD.l d1,d1:MOVE.l d1,(a3)+:DBRA d0,nxcm
  ;
  RTS

;-------------------------------------------------------------
;-------------------------------------------------------------


err0:MOVE.l #mess0,d0:TRAP #0
err1:MOVE.l #mess1,d0:TRAP #0
errd:MOVE.l #messd,d0:TRAP #0

;***************** ERRORS ********************

errors
err2:MOVE.l #mess2,d0:TRAP #0
err3:MOVE.l #mess3,d0:TRAP #0
err4:MOVE.l #mess4,d0:TRAP #0
err5:MOVE.l #mess5,d0:TRAP #0
err6:MOVE.l #mess6,d0:TRAP #0
err7:MOVE.l #mess7,d0:TRAP #0
err8:MOVE.l #mess8,d0:TRAP #0
err9:MOVE.l #mess9,d0:TRAP #0
erra:MOVE.l #messa,d0:TRAP #0
errb:MOVE.l #messb,d0:TRAP #0
errc:MOVE.l #messc,d0:TRAP #0
;errd
erre:MOVE.l #messe,d0:TRAP #0

mess0:Dc.b "Can't Open IFF",0
mess1:Dc.b "Can't find IFF 'CMAP'",0
mess2:Dc.b "Can't Read File",0
mess3:Dc.b "Uninitialized Screen",0
mess4:Dc.b "Uninitialized Palette",0
mess5:Dc.b "RGB component out of range",0
mess6:Dc.b "Uninitialized Slice",0
mess7:Dc.b "Not enough colours in Slice",0
mess8:Dc.b "Colour must be in the range 0-31",0
mess9:Dc.b "Cycle colours out of range",0
messa:Dc.b "Cycle speed MUST be >=-1 AND <=1",0
messb:Dc.b "Cycle MUST be >=0 AND <=6",0
messc:Dc.b "Uninitialized cycle information",0
messd:Dc.b "Cycles must be added in order, you silly sausage!",0
messe:Dc.b "Not an AGA machine!",0
Even

rgbchk
Dc $a001:Dc.l b_rgbchk
TST.l (a0):BEQ err3:CMP #255,d0:BHI err8:TST agamode:BNE 'aga
CMP #31,d0:BHI err8:'aga
rgbchk2:CMP #15,d1:BHI err5
CMP #15,d2:BHI err5:CMP #15,d3:BHI err5
RTS
b_rgbchk
TST (a0):BEQ err6:CMP #31,d0:BHI err8
CMP 8(a0),d0:BCC err7
BRA rgbchk2

aargbchk
TST agamode:BEQ erre
;
TST.l (a0):BEQ err3:CMP #255,d0:BHI err8
CMP #255,d1:BHI err5:CMP #255,d2:BHI err5:CMP #255,d3:BHI err5
RTS

usepalchk
Dc $a001:Dc.l b_usepalchk
;
TST palmode:BEQ doit3:RTS
;
b_usepalchk
;
TST palmode:BEQ doit4:RTS

showpalchk
Dc $a001:Dc.l b_showpalchk
doit3:TST.l (a2):BEQ err3:RTS

b_showpalchk
doit4:TST (a0):BEQ err6:TST 8(a0):BEQ err7:RTS

docyclechk
TST 4(a3):BEQ errc:RTS

colchk:Dc $a001:Dc.l b_colchk
TST.l (a0):BEQ err3:RTS
b_colchk:TST (a0):BEQ err6:RTS

agacolchk:TST agamode:BEQ erre:TST.l (a0):BEQ err3:RTS

prgbchk
;
CMP #255,d1:BHI err8
TST agamode:BNE 'aga
CMP #31,d1:BHI err8
'aga:CMP #15,d2:BHI err5
CMP #15,d3:BHI err5
CMP #15,d4:BHI err5
RTS

aaprgbchk
;
TST agamode:BEQ erre
;
CMP #255,d1:BHI err8
CMP #255,d2:BHI err5
CMP #255,d3:BHI err5
CMP #255,d4:BHI err5
RTS

setcyclechk2
CMP.l #-$10000,d4:BLT erra
CMP.l #$10000,d4:BGT erra
;
setcyclechk
CMP #7,d1:BCC errb
CMP #256,d2:BCC err9
CMP #256,d3:BCC err9
RTS

