; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = "switchlib"
; CreateIcon      = 0
; Residents       = "libmacs.res,blitzoffs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 14
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 80000
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 4
; CursorColumn    = 12
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 5
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
; 05.05.2016
; added a fix for a null pointer access if it run on a CGX System
; tomsmart1
;
; disassembled with the help of ADis
; 05.2016
; disassembled form the used switchlib of the ACIDLIBS Blitzlibs
; rebuild and refactored disasm with the help of an old source
; code that i found  tomsmart1
;
;old Version details
;14/1/95
;   - Fix to doviewon - clears oldview ALL THE TIME NOW :)
;10/1/95
;   - Crash when CreateDisplay was called with Blitz mode control
;     on from debugger - fixed with special doviewoff that
;     saves the old view WITHOUT creating a new one. Extra flag
;     is used to say when this has happened.
;   - QAmigaS and BlitzS added for debugger - stops blitz display
;     being redraw when called (but doesn't stop BLITZ or QAMIGA
;     in the program from working - thus is only of use by the
;     debugger).
; 8/1/95
;   - Fixed Init routine so that it returns the address of
;     keyboard.device (for RawStatus etc in blitz mode)
;     Gets address from CIAA, if this points to lowlevel.library,
;     it reads the keyboard.device from this by getting the lword
;     at offset of $44 from the lowlevel.library base.
;     A BETTER way of doing this would be by looking through
;     Exec's devicelist.
;
;
;V1.1...
;
;converting this babe to NOT take over interupts!

; begin Blitzlib header
!syslibheader{#switchlib,$c200,$c208,init,1,finit,0}  ;return key stuff

  !nullsub{goblitz,0,0}             ;$c200

  !nullsub{goamiga,0,0}             ;$c201

  !nullsub{goqamiga,0,0}            ;$c202

  !nullsub{doownblit,0,0}           ;$c203

  !nullsub{dodisownblit,0,0}        ;$c204

  !nullsub{setcoplist,0,0}          ;$c205

  !nullsub{goblitzS,0,0}            ;$c206

  !nullsub{goqamigaS,0,0}           ;$c207

 init
  !nullsub{doinit,0,0}

 finit
  !nullsub{dofinit,0,0}

!libfin
; end Blitzlib header
;*********************** Code *************************

mymode
   Dc.w 0
agamode
   Dc.w 0
oldpoke
   Dc.w 0
monpoke
   Dc.w 0
forbiden
   Dc.w 0 ;non zero if a 'forbid' is in effect
blitowned
   Dc.w 0 ;non zero if we've got the blitter
oldview
   Dc.l 0 ;non zero if view disabled!
grname
   Dc.b "graphics.library",0
   Even
gr
   Dc.l 0
cianame
   Dc.b "ciaa.resource",0
   Even
cia
   Dc.l 0
key
   Dc.l 0
oldcoplist
   Dc.l 0


.doforbid
   TST.w    forbiden
   BNE.w    'done

   MOVEM.l  d0-d1/a0-a1/a6,-(a7)

   ST       forbiden
   MOVEA.l  4,a6
   JSR      _Forbid(a6)

   MOVEA.l  key(pc),a0
   BSET     #0,$3d(a0)
   MOVE.l   #4,$70(a0)

   MOVEM.l  (a7)+,d0-d1/a0-a1/a6

 'done
RTS


.dopermit
   TST.w    forbiden
   BEQ.w    'done

   MOVEM.l  d0-d1/a0-a1/a6,-(a7)

   SF       forbiden
   MOVEA.l  4,a6
   JSR      _Permit(a6)

   MOVEA.l  key(pc),a0
   BCLR     #0,$3d(a0)
   CLR.l    $70(a0)

   MOVEM.l  (a7)+,d0-d1/a0-a1/a6

 'done
RTS


doviewoff
   MOVE.w   #0,oldviewS

   TST.l    oldview
   BNE.w    'done

   MOVEM.l  d0-d1/a0-a1/a6,-(a7)

   MOVEA.l  gr(pc),a6
   MOVE.l   $22(a6),oldview
   ;
   SUBA.l   a1,a1
   JSR      -$de(a6)
   JSR      -$10e(a6)
   JSR      -$10e(a6)

   MOVE.l   oldcoplist(pc),d0
   BEQ.w    'nocop
   MOVE.l   d0,$dff080
   MOVE.w   #0,$dff088

 'nocop
   ;
   MOVE.w   #0,$dff1fc                 ;simon was here (hires sprite kludge)
   MOVE.w   #$c00,$dff106
   ;
   TST.w    agamode
   BEQ.w    'noaga
   MOVE.w   monpoke(pc),$dff1dc

 'noaga
   MOVEM.l  (a7)+,d0-d1/a0-a1/a6

 'done
RTS


.doviewoffS
   MOVEM.l  d0-d1/a0-a1/a6,-(a7)

   MOVEA.l  gr(pc),a6
   MOVE.l   $22(a6),oldview

   MOVEM.l  (a7)+,d0-d1/a0-a1/a6

   MOVE.w   #-1,oldviewS
RTS


oldviewS:
   Dc.w 0


.doviewon
   TST.l    oldview
   BEQ.w    'done

   TST.w    oldviewS
   BNE.w    'done

   MOVEM.l  d0-d1/a0-a1/a6,-(a7)

   MOVEA.l  gr(pc),a6
   MOVE.w   #$1a0,$dff096

   JSR      -$10e(a6)
   JSR      -$10e(a6)

   MOVE.l   $26(a6),$dff080
   MOVE.w   #0,$dff088
   MOVE.w   #$81a0,$dff096
   ;
;  TST      agamode               ; code that was disabled in the older source i found
;  BEQ      'noaga
;  MOVE     oldpoke(pc),$dff1dc
;
; 'noaga

   MOVEA.l  oldview(pc),a1
   JSR      -$de(a6)

;  TST      agamode               ; code that was disabled in the older source i found
;  BEQ      'noga
;  MOVE     oldpoke(pc),$dff1dc
;
; 'noga

   MOVEM.l  (a7)+,d0-d1/a0-a1/a6

 'done
   CLR.l    oldview
   MOVE.w   #0,oldviewS
RTS


.doownblit
   TST.w    blitowned
   BNE.w    'done

   MOVEM.l  d0-d1/a0-a1/a6,-(a7)

   ST       blitowned
   MOVEA.l  gr(pc),a6
   JSR      _OwnBlitter(a6)

   MOVEM.l  (a7)+,d0-d1/a0-a1/a6

 'done
RTS


.dodisownblit
   TST.w    blitowned
   BEQ.w    'done

   MOVEM.l  d0-d1/a0-a1/a6,-(a7)

   SF       blitowned
   MOVEA.l  gr(pc),a6
   JSR      _DisownBlitter(a6)

   MOVEM.l  (a7)+,d0-d1/a0-a1/a6

 'done
RTS


.goqamigaS
   BSR.w    doviewoffS
   ALibJsr  $c107
   BSR.w    dopermit
   BSR.w    dodisownblit

   MOVE.w   mymode(pc),d0
   MOVE.w   #1,mymode
RTS


.goblitzS
   BSR.w    doviewoffS
   BSR.w    doownblit
   BSR.w    doforbid
   ALibJsr  $c106

   MOVE.w   mymode(pc),d0
   MOVE.w   #-1,mymode
RTS


.goblitz
   BSR.w    doviewoff
   BSR.w    doownblit
   BSR.w    doforbid
   ALibJsr  $c106

   MOVE.w   mymode(pc),d0
   MOVE.w   #-1,mymode
RTS


.goamiga
   ALibJsr  $c107
   BSR.w    dopermit
   BSR.w    dodisownblit
   BSR.w    doviewon

   MOVE.w   mymode(pc),d0
   MOVE.w   #0,mymode
RTS


.goqamiga
   ALibJsr  $c107
   BSR.w    dopermit
   BSR.w    dodisownblit
   BSR.w    doviewoff

   MOVE.w   mymode(pc),d0
   MOVE.w   #1,mymode
RTS


.doinit
   CLR.w    forbiden
   CLR.l    oldview
   CLR.w    blitowned
   CLR.l    oldcoplist

   MOVEA.l  4,a6
   CMPI.w   #$27,$14(a6)
   SGE      d0
   EXT.w    d0
   MOVE.w   d0,agamode

   LEA      grname(pc),a1
   JSR      _OldOpenLibrary(a6)
   MOVE.l   d0,gr

   MOVEA.l  d0,a0
   BTST     #0,$cf(a0)
   SEQ      d0
   AND.w    #$20,d0
   MOVE.w   d0,monpoke
   MOVE.w   d0,oldpoke

   MOVE.w   agamode(pc),d0
   BEQ.w    'noaga
   MOVEA.l  $17c(a0),a0

   ; begin null pointer check
   MOVE.l   a0,d0    ; added to test if we have a null pointer
   TST.l    d0       ; test it
   BEQ.w    'noaga   ; if 0 skip next to prevent a Hit with CGX   tomsmart1
   ; end null pointer check

   MOVE.w   $28(a0),oldpoke

 'noaga
   LEA      cianame(pc),a1
   JSR      _OpenResource(a6)
   MOVE.l   d0,cia
;; begin code that is in the older source i found
;   MOVE.l   d0,a0
;   MOVE.l   $64(a0),d0
;
;  ;=============
;  ;Extra bit to find the keyboard device.
;   MOVE.l   d0,a0
;
;   MOVE.l   10(a0),a1
;   LEA      'name(pc),a2
;
; 'oldloop
;   MOVE.b   (a2)+,d0
;   BEQ      'endloop
;   CMP.b    (a1)+,d0
;   BNE      'nope
; BRA      'oldloop
;
; ;Yup - lowlevel.device found!
; 'endloop
;   MOVE.l   $44(a0),a0
;
; 'nope
;   MOVE.l   a0,d0
;   MOVE.l   d0,key
; RTS
;
; 'name
;   Dc.b     "lowlevel.library",0
;   Even
;; end code that is in the older source i found
; begin different code that is not in the older source i found
   MOVEA.l  4,a0
   MOVEA.l  $15e(a0),a0

 'loop
   MOVEA.l  $a(a0),a1
   CMPI.b   #"k",(a1)
   BNE.w    'next
   CMPI.b   #"e",1(a1)
   BNE.w    'next
   CMPI.b   #"y",2(a1)
   BNE.w    'next
   CMPI.b   #"b",3(a1)
   BNE.w    'next
   CMPI.b   #"o",4(a1)
   BNE.w    'next
   CMPI.b   #"a",5(a1)
   BNE.w    'next
   CMPI.b   #"r",6(a1)
   BNE.w    'next
   CMPI.b   #"d",7(a1)
   BNE.w    'next
   CMPI.b   #".",8(a1)
   BNE.w    'next
   MOVE.l   a0,key
   MOVE.l   a0,d0
 RTS

 'next
   MOVEA.l  (a0),a0
BRA.w    'loop
; end different code that is not in the older source i found

.dofinit
   MOVEA.l  gr(pc),a1
   MOVEA.l  4,a6

JMP _CloseLibrary(a6)


.setcoplist ;a0=coplist!
   MOVE.w   #0,oldviewS
   MOVE.l   a0,oldcoplist
RTS

