; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "linklistlib.obj"
; CreateIcon      = 0
; Residents       = "libmacs.res,blitzoffs.res,amigalibs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 10
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 956
; CursorColumn    = 3
; LabelSearch     = "_execbase"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max BitMap      = 10
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
#_execbase                   = $4

#_ExitIntr                   = -$24
#_Reschedule                 = -$30
#_MakeLibrary                = -$54
#_MakeFunctions              = -$5A
#_InitResident               = -$66
#_Disable                    = -$78
#_Enable                     = -$7E
; V39 exec
#_AllocPooled                = -$2c4   ; -708
#_CreatePool                 = -$2b8   ; -696
#_DeletePool                 = -$2be   ; -702
#_FreePooled                 = -$2ca   ; -714

Macro _disable
  MOVE.l _execbase,a6
  JSR _Disable(a6)
End Macro

Macro _enable
  JSR _Enable(a6)
End Macro

Macro checklist
  CMP.l #"lIsT",-4(`1)
  BNE err1
End Macro
;
;   LINKED LISTS LIBRARY
;
;list format is as follows
;      -40.l  : poolheader for listmem
;00.l (-36.w) : size of type
;00.l (-34.w) : mode 0 =oldlist 1=linklist
;00.l (-32.l) : current item, 0 If none
;04.l (-28.l) : List head node of in use
;08.l (-24.l) : List tail node of in use
;16.l (-16.l) : List head of free
;20.l (-12.l) : List tail of free
;28.l (-04.l) : "lIsT"     a identifier to detect wrong use of pointers

#incnum=6
;20/8/93
;added SortList command to sort lists on the first long in item
;really pleased with this one (see isometric demo)

!libheader{#linklistlib,init,0,0,errors}

!acommand{3}
!args{$20}
!libs
!subs{do_FirstItem,lchk,0}
!name{"FirstItem","(Arrayname())"}

!acommand{3}
;!args{$20}
!args{#array}
!libs
!subs{do_AddItem,lchk,0}
!name{"AddItem","(N Arrayname())"}

!acommand{3}
!args{$20}
!libs
!subs{do_NextItem,lchk,0}
!name{"NextItem","(Arrayname())"}

!astatement
!args{$20}
!libs
!subs{do_ResetList,lchk,0}
!name{"ResetList","Arrayname()"}

!astatement
!args{$20}
!libs
!subs{do_KillItem,lchk2,0}
!name{"KillItem","Arrayname()"}

!acommand{3}
!args{$20}
!libs
!subs{do_AddFirst,lchk,0}
!name{"AddFirst","(Arrayname())"}

!astatement
!args{$20}
!libs
!subs{do_ClearList,lchk,0}
!name{"ClearList","Arrayname()"}

!acommand{3}
!args{$20}
!libs
!subs{do_AddLast,lchk,0}
!name{"AddLast","(Arrayname())"}

!astatement
!args{$20}
!libs
!subs{dopushcurrent,pushchk,0}
!name{"PushItem","Arrayname()"}

!astatement
!args{$20}
!libs
!subs{dopopcurrent,popchk,0}
!name{"PopItem","Arrayname()"}

!acommand{3}
!args{$20}
!libs
!subs{do_PrevItem,lchk,0}
!name{"PrevItem","Arrayname()"}

!acommand{3}
!args{$20}
!libs
!subs{do_LastItem,lchk,0}
!name{"LastItem","Arrayname()"}

!astatement
!args{3}
!libs
!subs{do_ItemStackSize,0,0}
!name{"ItemStackSize","Max Items"}

!astatement
!args{$20,#word}
!libs
!subs{do_SortList,lchk,0}
!name{"SortList","Arrayname(),sizeof .type\offset"}

!astatement
!args{$20,#long}
!libs
!subs{do_SetItem,0,0}
!name{"SetItem","Arrayname(),&Item"}

!afunction{3}
!args{$20}
!libs
!subs{docountlist,0,0}
!name{"CountList","(Arrayname())"}

!afunction{3}
!args{$20}
!libs
!subs{docountitem,0,0}
!name{"CountItem","(Arrayname())"}

!acommand{3}
!args{$20}
!libs
!subs{do_NextItemFast,lchk,0}
!name{"NextItemFast","(Arrayname());same as nextitem but need manual task/Interrupt blocking "}

Even
  Dc.b $00,$01,$00,$00 ;....
  Ds.w 1
  Dc.b $00 ;.
  Dc.b $02,$38,$08 ;.8.
  Ds.w 3
  Dc.l AL_0_108
  Ds.l 1
  Dc.b $00 ;.
  Dc.b $01,$38,$00 ;.8.
  Ds.w 3
  Dc.l AJL_0_CC
  Ds.l 1
  Dc.b $FF,$FF,$00,$00 ;....
  Ds.l 1
  Dc.b "FillArray",0
  Dc.b "array(),value -- only byte/word/long arrays!",0,0



!astatement
!args{#varptr,#long}
!libs
!subs{do_CreateListPtr,0,0}
!name{"CreateListPtr","(*listpointer,typesize);create a list of typesize and store the adress for pointerlists"}
!afunction{3}
!args{#long}
!libs
!subs{donextlistitem,0,0}
!args{#long,#varptr}
!libs
!subs{donextlistitem2,0,0}
!name{"NextPtrItem","*curr .typ=NextPtrItem  (*listpointer[,*curr.typ])"}

!afunction{3}
!args{#long}
!libs
!subs{do_AddPtrLast,0,0}
!name{"AddPtrLast","*curr.typ=AddPtrLast (*listpointer)"}

!afunction{3}
!args{#long}
!libs
!subs{do_AddPtrItem,0,0}
!name{"AddPtrItem","*curr.typ=AddPtrItem (*listpointer)"}

!afunction{3}
!args{#long}
!libs
!subs{do_KillPtrItem,0,0}
!name{"KillPtrItem","*listpointer"}

!afunction{3}
!args{#long}
!libs
!subs{dogetlistitem,0,0}
!name{"GetPtrItem","curr.type=GetPtrItem (*listpointer)"}

!afunction{3}
!args{#long}
!libs
!subs{docountlistpointer,0,0}
!name{"CountPtrList","elementcount=CountPtrList (*listpointer)"}

!astatement
!args{#long,#word}
!libs
!subs{dosortptrlist,0,0}
!name{"SortPtrList","*listpointer,sizeof .type\offset"}

!acommand{3}
!args{#long}
!libs
!subs{dofirstptritem,0,0}
!name{"FirstPtrItem","*listpointer"}
 
!acommand{3}
!args{#long}
!libs
!subs{dolastptritem,0,0}
!name{"LastPtrItem","*curr.type=LastPtrItem (*listpointer)"}

!astatement
!args{#long}
!libs
!subs{doresptrlist,0,0}
!name{"ResetPtrList","*listpointer"}

!afunction{3}
!args{#long}
!libs
!subs{doprevptritem,0,0}
!name{"PrevPtrItem","*curr.typ=PrevPtrItem  (*listpointer)"}

!acommand{3}
!args{#long}
!libs
!subs{doaddptrfirst,0,0}
!name{"AddPtrFirst","(*listpointer)"}

!acommand{3}
!args{#long}
!libs
!subs{dofreeptrpointer,0,0}
!name{"FreePtrList","(*listpointer)"}

init
!nullsub{doinit,0,0}

!libfin



;;********************** CODE BELOW *************************

.dofreeptrpointer
  TST.l d0:
  BEQ err1

  MOVE.l d0,a0
  MOVE.l (a0),d0
  BEQ 'skip
    MOVE.l d0,a1
    !checklist{a1}
    MOVE.l a6,-(a7)
    MOVE.l -40(a1),a0              ; poolHeader
    CMP.l #0,a0
    BEQ 'nopool
      MOVE.l a1,-(a7)
      CLR.l -40(a1)
      MOVE.l _execbase,a6
      JSR _DeletePool(a6)          ;DeletePool(a0:poolHeader)
      MOVE.l (a7)+,a1
   'nopool:
    MOVE.l (a7)+,a6
    MOVEQ #40,d0
    SUB d0,a1
    ADD.l sizestore,d0
    ALibJsr $c001           ;localfree
 'skip
RTS


.doaddptrfirst:         ; add an item at the beginning of the list.
  MOVE.l d0,a0
  !checklist{a0}
  !_disable
  MOVE.l -16(a0),a1     ; next of head of free
  MOVE.l (a1),d0
  BNE 'l1               ; if no memory left get now one
    TST.w -34(a0)
    BEQ 'done
      BSR increase
      MOVE.l -16(a0),a1
      MOVE.l (a1),d0
 'l1:
  MOVE.l a1,-32(a0)     ; now current
  MOVE.l a3,-(a7)
  BSR unlinkitem
  LEA -28(a0),a2
  BSR linkitem
  MOVE.l (a7)+,a3:
  MOVE.l a1,d0
  ADDQ.l #8,d0
 'done:
  !_enable
  ;MOVE #$c000,$dff09a:
RTS


.doprevptritem ; if no current, do last item.
;
MOVE.l d0,a0
!checklist{a0}
!_disable
MOVE.l -32(a0),d0:BEQ dolastptritem2
MOVE.l d0,a1:MOVE.l 4(a1),a1:;previous of current
MOVE.l 4(a1),d0:BEQ 'done:MOVE.l a1,-32(a0):MOVE.l a0,d0:ADDQ.l #8,d0
'done:
!_enable
;MOVE #$c000,$dff09a:
RTS


.dolastptritem:; d0=array base. make current=last
MOVE.l d0,a0
!checklist{a0}
;MOVE #$4000,$dff09a:
!_disable
dolastptritem2:MOVE.l -20(a0),a1 ;a1=prev of tail node
MOVE.l 4(a1),d0:BNE 'skip:MOVE.l d0,a1
'skip:MOVE.l a1,-32(a0):
;MOVE #$c000,$dff09a
!_enable
TST.l d0:BEQ 'knob:MOVE.l a1,d0:ADDQ.l #8,d0
'knob:RTS


.dofirstptritem
MOVE.l d0,a0
!checklist{a0}
!_disable
dofirstptritem2:MOVE.l -28(a0),a1 ;a1=next of head node
MOVE.l (a1),d0:BNE 'skip:MOVE.l d0,a1
'skip:MOVE.l a1,-32(a0):
;MOVE #$c000,$dff09a
!_enable
TST.l d0:BEQ 'knob:MOVE.l a1,d0:ADDQ.l #8,d0
'knob:RTS
 


.dosortptrlist
  ;MOVE #$4000,$dff09a:
MOVE.l d0,a0
!checklist{a0}
BRA do_SortList
 

.docountlistpointer
MOVE.l d0,a0
!checklist{a0}

;
;d0=array base! return how many items in list
;
;MOVE #$4000,$dff09a:
!_disable
MOVE.l -28(a0),d1:MOVEQ #-1,d0
;
'loop
ADDQ.l #1,d0:MOVE.l d1,a0:MOVE.l (a0),d1:BNE 'loop
;
;MOVE #$c000,$dff09a:
!_enable
RTS
 


.dogetlistitem
MOVE.l d0,a0
!checklist{a0}
MOVE.l -32(a0),d0
ADDQ.l #8,d0
RTS

.do_KillPtrItem:; must be a current item to kill!
;set current to previous of me after killing it
;
MOVE.l d0,a0
!checklist{a0}
!_disable
;MOVE #$4000,$dff09a
MOVE.l -32(a0),a1:;current item
MOVE.l 4(a1),-(a7):;old previous of current
;
MOVE.l a3,-(a7):BSR unlinkitem:;remove from used...
LEA -16(a0),a2:BSR linkitem:;add to free
;
MOVE.l (a7)+,a3
MOVE.l (a7)+,a1:MOVE.l 4(a1),d0:BNE 'skip:MOVE.l d0,a1
'skip:MOVE.l a1,-32(a0):
MOVE.l a1,d0:ADDQ.l #8,d0
;MOVE #$c000,$dff09a:
!_enable
RTS


.do_AddPtrItem
  MOVE.l d0,a0
  !checklist{a0}
  !_disable
  MOVE.l -16(a0),a1 ;next of head node
  MOVE.l (a1),d0:
  BNE 'l1
    TST.w -34(a0)
    BEQ 'done
      BSR increase
      MOVE.l -16(a0),a1
      MOVE.l (a1),d0
 'l1:
  MOVE.l a3,-(a7)
  BSR unlinkitem
  MOVE.l -32(a0),d0
  BNE 'skip
    LEA -28(a0),a2
    MOVE.l a2,d0
 'skip:
  MOVE.l d0,a2
  BSR linkitem
  MOVE.l (a7)+,a3
  MOVE.l a1,-32(a0):;now current
  MOVE.l a1,d0
  ADDQ.l #8,d0
 'done:
  ;MOVE #$c000,$dff09a:
  !_enable
RTS
 
.donextlistitem
MOVE.l d0,a0
!checklist{a0}
!_disable
MOVE.l -32(a0),d0:BEQ dofirstptritem2
MOVE.l d0,a1:MOVE.l (a1),a1:;next of current
MOVE.l (a1),d0:BEQ 'done:MOVE.l a1,-32(a0):MOVE.l a1,d0
ADDQ.l #8,d0
'done:
;MOVE #$c000,$dff09a:
!_enable
RTS
.donextlistitem2
MOVE.l d0,a0               ;d1 may not trash
!checklist{a0}
!_disable
MOVE.l -32(a0),d0:BEQ dofirstptritem2b
MOVE.l d0,a1:MOVE.l (a1),a1:;next of current
MOVE.l (a1),d0:BEQ 'done:MOVE.l a1,-32(a0):MOVE.l a1,d0
ADDQ.l #8,d0
MOVE.l d1,a0
MOVE.l d0,(a0)
'done:
;MOVE #$c000,$dff09a:
!_enable
RTS

dofirstptritem2b:MOVE.l -28(a0),a1 ;a1=next of head node
MOVE.l (a1),d0:BNE 'skip:MOVE.l d0,a1
'skip:MOVE.l a1,-32(a0):
;MOVE #$c000,$dff09a
!_enable
TST.l d0:BEQ 'knob:MOVE.l a1,d0:ADDQ.l #8,d0
MOVE.l d1,a0
MOVE.l d0,(a0)
'knob:RTS


.do_AddPtrLast
  MOVE.l d0,a0
  !checklist{a0}
  !_disable
  MOVE.l -16(a0),a1  ;next of free
  MOVE.l (a1),d0
  BNE 'l1

  TST.w -34(a0)
  BEQ 'done
    BSR increase
    MOVE.l -16(a0),a1
    MOVE.l (a1),d0
   'l1:
    MOVE.l a1,-32(a0)
    MOVE.l a3,-(a7)
    BSR unlinkitem
    MOVE.l -20(a0),a2:;prev of tail of used
    BSR linkitem
    MOVE.l (a7)+,a3
    MOVE.l a1,d0
    ADDQ.l #8,d0
 'done:
  !_enable
RTS
 
.do_CreateListPtr
  ADD.l #$8,d1
  MOVE.l d1,d4
  MOVE.l d1,sizestore
  TST.l d0
  BEQ err1

  MOVE.l d0,addstore
  MOVE.l d0,a0
  MOVE.l (a0),d0
  BEQ 'skip
    MOVE.l d0,a1
    !checklist{a1}
    MOVE.l a6,-(a7)
    MOVE.l -40(a1),a0
    CMP.l #0,a0
    BEQ 'nopool
      MOVE.l a1,-(a7)
      CLR.l -40(a1)
      MOVE.l _execbase,a6
      JSR _DeletePool(a6)         ; DeletePool(a0:poolHeader)
      MOVE.l (a7)+,a1
   'nopool:
    MOVE.l (a7)+,a6
    MOVEQ #40,d0
    SUB d0,a1
    ADD.l sizestore,d0
    ALibJsr $c001                 ; free old
 'skip

  ; ----------- Create new Pool
  MOVEM.l a6/d2,-(a7)
  MOVE.l #$10001,d0
  MOVE.l #2000,d1                 ; $7D0
  MOVE.l #2000,d2
  MOVEA.l _execbase,a6
  JSR _CreatePool(a6)             ; d0 = CreatePool(d0:MemFlags, d1=puddleSize, d2=threshSize)

  TST.l d0
  BEQ 'out

  MOVE.l d0,a2                    ; poolheader

  MOVEQ #40,d0
  ADD.l sizestore,d0
  MOVE.l #$10001,d1
  ALibJsr $c000                   ; localalloc (d0:byteSize; d1:requirements)

  MOVEM.l (a7)+,a6/d2
  ; ------------------------------------

  MOVE.l d0,a0
  MOVE.l a2,0(a0)                 ; write poolheader
  SWAP d4
  CLR.w d4
  SWAP d4
  MOVE.w d4,4(a0)                 ; write size
  MOVE.l d0,a2
  MOVE.l addstore,a1
  LEA 40(a2),a0
  MOVE.l a0,(a1)
  MOVE.l a0,a1
  ADD.l sizestore,a1
  ;

  ;Empty out the IN-USE list, FREE list, and set ID
  ;
  LEA 4+8(a2),a3
  MOVE.l a3,12+8(a2)
  ADDQ #4,a3
  MOVE.l a3,4+8(a2)
  LEA 16+8(a2),a3
  MOVE.l a3,24+8(a2)
  ADDQ #4,a3
  MOVE.l a3,16+8(a2)
  MOVE.l #"lIsT",28+8(a2)
  ;
  ;OK, link all things together.....
  ;
  LEA 20+8(a2),a2:;tail node
  ;
  MOVEQ #0,d1
 'loop:;insert a0 node before a2 node

    MOVE.l 4(a2),a3:;   old last of tail
    ;
    MOVE.l a2,(a0):;    new next of me
    MOVE.l a3,4(a0):;   new last of me
    ;
    MOVE.l a0,4(a2):;   new last of tail
    MOVE.l a0,(a3):;    new next of old last
    ADDQ.l #1,d1
    ADD.l d4,a0
  CMP.l a1,a0
  BCS 'loop

  CMP.l #1,d1
  BNE 'l1
    MOVE.w #1,-$16(a2)  ; -22
 'l1
  RTS

 'out:
  TRAP #0
  MOVEM.l (a7)+,a6/d2
RTS


 

AJL_0_CC:
  Dc.b $A0,$00 ;..
  Dc.w JL_0_106-JL_0_D0
JL_0_D0:
  MOVEA.l D0,A0
  MOVEA.l -(A2),A1
  MOVE.w -(A2),D2
  CMPI.b #$1,D2
   BEQ.b JL_0_FE
  CMPI.b #$2,D2
   BEQ.b JL_0_F4
  CMPI.b #$3,D2
   BNE.b JL_0_106
JL_0_E8:
  MOVE.l #$0,(A0)+
  CMPA.l A0,A1
   BNE.b JL_0_E8
 BRA.b JL_0_106

JL_0_F4:
  MOVE.w #$0000,(A0)+
  CMPA.l A0,A1
   BNE.b JL_0_F4
 BRA.b JL_0_106

JL_0_FE:
  MOVE.b #$0,(A0)+
  CMPA.l A0,A1
   BNE.b JL_0_FE
JL_0_106:
 RTS

AL_0_108:
  Dc.b $A0,$00 ;..
  Dc.w JL_0_13A-JL_0_10C

JL_0_10C:
  MOVEA.l D0,A0
  MOVEA.l -(A2),A1
  MOVE.w -(A2),D2
  CMPI.b #$1,D2
  BEQ.b JL_0_134
    CMPI.b #$2,D2
    BEQ.b JL_0_12C
      CMPI.b #$3,D2
      BNE.b JL_0_13A

  JL_0_124:
    MOVE.l D1,(A0)+
    CMPA.l A0,A1
  BNE.b JL_0_124
  BRA.b JL_0_13A

  JL_0_12C:
    MOVE.w D1,(A0)+
    CMPA.l A0,A1
  BNE.b JL_0_12C
  BRA.b JL_0_13A

  JL_0_134:
    MOVE.b D1,(A0)+
    CMPA.l A0,A1
  BNE.b JL_0_134

  JL_0_13A:
RTS

_initlink
maxstack:         Dc.l 0
currstack:        Dc.l 0
currsp:           Dc.l 0
sizestore:        Dc.l 0
addstore:         Dc.l 0
is32bitCPU:       Dc.w 0
kick2_available:  Dc.w 0

.check_kickstart:
  MOVEQ.l #0,d0
  MOVEA.l _execbase,A0
  MOVE.w $14(A0),d0           ; Exec.libVersion
  CMP.w #37,d0
  BCS 'nokick2
    MOVE #1,kick2_available
 'nokick2
RTS


.check_32bit_cpu:            ; returns true if 32bit cpu
  MOVEQ #0,d0
  MOVEA.l _execbase,a0
  MOVE 296(a0),d1     ; AttnFlags of execbase
  BTST #1,d1
  BEQ 'no020
    MOVE #1,d0
    MOVE #1,is32bitCPU
 'no020:
RTS

.doinit:
  ;TRAP #5
  BSR check_32bit_cpu
  BSR check_kickstart

  CLR.l currstack
  CLR.l currsp
  MOVEQ #8,d0

.do_ItemStackSize  ;d0=stack size
  MOVE.l currstack(pc),d1
  BEQ 'skip
    MOVE.l d0,d2
    MOVE.l d1,a1
    MOVE.l maxstack(pc),d0
    ALibJsr $c003           ;globalfree
    CLR.l currstack
    MOVE.l d2,d0
 'skip
  LSL.l #3,d0
  MOVEQ #1,d1
  MOVE.l d0,maxstack
  ALibJsr $c002             ;globalalloc
  MOVE.l d0,currstack
  MOVE.l d0,currsp
RTS


.dopushcurrent
  MOVE.l d0,a0
  MOVE.l currsp(pc),a1
  MOVE.l a0,(a1)+
  MOVE.l -32(a0),(a1)+
  MOVE.l a1,currsp
RTS

.dopopcurrent
  MOVE.l d0,a0
  MOVE.l currsp(pc),a1
  MOVE.l -(a1),-32(a0)
  SUBQ #4,a1
  MOVE.l a1,currsp
RTS

.do_ClearList
  ;
  ;MOVE #$4000,$dff09a:
  !_disable
  MOVE.l d0,a0
  ;
 'loop:
    MOVE.l -28(a0),a1
    MOVE.l (a1),d0
    BEQ 'done
      BSR unlinkitem
      LEA -16(a0),a2
      BSR linkitem
  BRA 'loop
 'done:
  CLR.l -32(a0):
  !_enable
  ;MOVE #$c000,$dff09a:
RTS

.do_ResetList:;reset a list
  MOVE.l d0,a0
  CLR.l -32(a0)
RTS

.doresptrlist:;reset a list
  MOVE.l d0,a0:
  !checklist{a0}
  CLR.l -32(a0)
RTS


.docountitem:       ;d0=array base, return number of current item, 0 =if not in list
  ;MOVE #$4000,$dff09a:
  !_disable
  MOVE.l d0,a0
  MOVE.l -32(a0),d0
  BEQ 'done                 ;no current item?

  MOVE.l d0,d2
  MOVEQ #0,d1
  MOVE.l -28(a0),d0
 'loop
    MOVE.l d0,a0
    MOVE.l (a0),d0
    BEQ 'done  ;last!
      ADDQ.l #1,d1
  CMP.l a0,d2:
  BNE 'loop
  MOVE.l d1,d0
 'done
  !_enable
  ;MOVE #$c000,$dff09a:
RTS

.docountlist:   ;d0=array base! return how many items in list
  ;MOVE #$4000,$dff09a:
  !_disable
  MOVE.l d0,a0
  MOVE.l -28(a0),d1
  MOVEQ #-1,d0

 'loop
    ADDQ.l #1,d0:MOVE.l d1,a0:MOVE.l (a0),d1
  BNE 'loop
  ;MOVE #$c000,$dff09a:
  !_enable
RTS

.do_FirstItem:        ;ok, d0=array base. make current=first
  ;MOVE #$4000,$dff09a:
  !_disable
  MOVE.l d0,a0

  do_FirstItem2:
  MOVE.l -28(a0),a1 ;a1=next of head node
  MOVE.l (a1),d0
  BNE 'skip
    MOVE.l d0,a1
 'skip:
  MOVE.l a1,-32(a0):
  ;MOVE #$c000,$dff09a
  !_enable
  TST.l d0
  BEQ 'knob
    MOVEQ #-1,d0
 'knob
RTS

.do_LastItem:   ; d0=array base. make current=last
  ;MOVE #$4000,$dff09a:
  !_disable
  MOVE.l d0,a0

  do_LastItem2:
  MOVE.l -20(a0),a1 ;a1=prev of tail node
  MOVE.l 4(a1),d0
  BNE 'skip
    MOVE.l d0,a1
 'skip:
  MOVE.l a1,-32(a0):
  ;MOVE #$c000,$dff09a
  !_enable
  TST.l d0
  BEQ 'knob
    MOVEQ #-1,d0
 'knob:
RTS

.unlinkitem:                    ;item to unlink in a1
  MOVE.l 4(a1),a2
  MOVE.l (a1),a3
  MOVE.l a2,4(a3)
  MOVE.l a3,(a2)
RTS

.linkitem:                      ;link item in a1 after a2
  MOVE.l (a2),a3
  MOVE.l a1,(a2)
  MOVE.l a1,4(a3)
  MOVE.l a2,4(a1)
  MOVE.l a3,(a1)
RTS

.do_KillItem:                   ; must be a current item to kill!
                                ; set current to previous of me after killing it
  !_disable
  ;MOVE #$4000,$dff09a
  MOVE.l d0,a0:MOVE.l -32(a0),a1:;current item
  MOVE.l 4(a1),-(a7):;old previous of current

  MOVE.l a3,-(a7):BSR unlinkitem:;remove from used...
  LEA -16(a0),a2:BSR linkitem:;add to free

  MOVE.l (a7)+,a3
  MOVE.l (a7)+,a1
  MOVE.l 4(a1),d0
  BNE 'skip
    MOVE.l d0,a1
 'skip:
  MOVE.l a1,-32(a0):
  ;MOVE #$c000,$dff09a:
  !_enable
RTS

.do_AddItem:                    ; if no current, add at beginning
  ;MOVE #$4000,$dff09a
  !_disable
  MOVE.l d0,a0
  MOVE.l -16(a0),a1 ;next of head node
  MOVE.l (a1),d0
  BNE 'l1

  TST.w -34(a0)
  BEQ 'done
    BSR increase
    MOVE.l -16(a0),a1
    MOVE.l (a1),d0
   'l1:
    MOVE.l a3,-(a7)
    BSR unlinkitem
    MOVE.l -32(a0),d0
    BNE 'skip
      LEA -28(a0),a2
      MOVE.l a2,d0
   'skip:
    MOVE.l d0,a2
    BSR linkitem
    MOVE.l (a7)+,a3
    MOVE.l a1,-32(a0):;now current
    MOVEQ #-1,d0
 'done:
  ;MOVE #$c000,$dff09a:
  !_enable
RTS

.increase:
  ;MOVE #$c000,$dff09a:
  !_enable
  MOVEM.l a0-a2/a6/d2,-(a7)

  ;TRAP #5
  TST.w kick2_available           ; can we use that code at all?
  BEQ nofree2

  MOVE.l a0,a2
  MOVE.l -40(a2),a0               ; poolHeader
  MOVEQ #0,d0
  MOVE.w -36(a2),d0
  MOVEQ #incnum,d1                ; number of bytes to add
  ADDQ.l #$8,d0

  MOVE.w is32bitCPU(PC),d2
  TST.w d2
  BNE '32bit_available
    BSR mulunsigned
    BRA '32bitend
 '32bit_available
    MULU.l d1,d0
 '32bitend

  MOVE.l d0,d2                    ; requested memsize in d0 & d2
  MOVEA.l _execbase,a6
  JSR _AllocPooled(a6)            ; d0 = AllocPooled(a0=poolHeader,d0=memSize)

  TST.l d0
  BEQ nofree2
    !_disable
    ;MOVE #$4000,$dff09a
    ;MOVE.l d0,-16(a2)
    MOVE.l d0,a0
    MOVE.l a0,a1
    SUBQ.l #8,d2
    ADD.l d2,a1
    MOVEQ #0,d2
    MOVE.w -36(a2),d2
    ADDQ.l #8,d2
    LEA -12(a2),a2

   'loop:;insert a0 node before a2 node
      MOVE.l 4(a2),a3:;   old last of tail
      MOVE.l a2,(a0):;    new next of me
      MOVE.l a3,4(a0):;   new last of me
      MOVE.l a0,4(a2):;   new last of tail
      MOVE.l a0,(a3):;    new next of old last
      ADD.l d2,a0
    CMP.l a1,a0 : BCS 'loop
    MOVEM.l (a7)+,a0-a2/a6/d2
    RTS
  nofree2:
  MOVEM.l (a7)+,a0-a2/a6/d2
  ADDQ.l #4,a7
RTS

.mulunsigned:         ;Input d0:d1 = values, d0=Return
  MOVEM.l d2/d3,-(a7)
  MOVE.w  d1,d2       ; mul lower bytes
  MULU    d0,d2
  MOVE.l  d1,d3
  SWAP    d3          ; mul higher bytes
  MULU    d0,d3
  SWAP    d3
  CLR.w   d3
  ADD.l   d3,d2
  SWAP    d0
  MULU    d1,d0
  SWAP    d0
  CLR.w   d0
  ADD.l   d2,d0
  MOVEM.l (A7)+,d2/d3
RTS




.do_AddFirst: ; add an item at the beginning of the list.
  ;MOVE #$4000,$dff09a
  !_disable
  MOVE.l d0,a0
  MOVE.l -16(a0),a1  ;next of head of free
  MOVE.l (a1),d0
  BNE 'l1    ;none free

  TST.w -34(a0)
  BEQ 'done
    BSR increase
    MOVE.l -16(a0),a1
    MOVE.l (a1),d0
   'l1:
    MOVE.l a1,-32(a0)   ;now current
    MOVE.l a3,-(a7)
    BSR unlinkitem
    LEA -28(a0),a2
    BSR linkitem
    MOVE.l (a7)+,a3:
    MOVEQ #-1,d0
 'done:
  !_enable
  ;MOVE #$c000,$dff09a:
RTS

do_AddLast:   ; add item at end of the list
  !_disable
  ;MOVE #$4000,$dff09a
  MOVE.l d0,a0
  MOVE.l -16(a0),a1   ; next of free
  MOVE.l (a1),d0
  BNE 'l1             ; if not 0 then add the new item

  TST.w -34(a0)       ; else check for ? and ...          NEW CODE
  BEQ 'done           ;
    BSR increase      ; increase buffer
    MOVE.l -16(a0),a1 ;
    MOVE.l (a1),d0    ;

   'l1:
    MOVE.l a1,-32(a0)
    MOVE.l a3,-(a7)
    BSR unlinkitem
    MOVE.l -20(a0),a2 ; prev of tail of used
    BSR linkitem
    MOVE.l (a7)+,a3
    MOVEQ #-1,d0
 'done:
  ;MOVE #$c000,$dff09a:
  !_enable
RTS


.do_NextItem:         ; if no current, do first item.
  ;MOVE #$4000,$dff09a
  !_disable
  MOVE.l d0,a0
  MOVE.l -32(a0),d0
  BEQ do_FirstItem2

  MOVE.l d0,a1
  MOVE.l (a1),a1:;next of current
  MOVE.l (a1),d0
  BEQ 'done
    MOVE.l a1,-32(a0)
    MOVEQ #-1,d0
 'done:
  ;MOVE #$c000,$dff09a:
  !_enable
RTS

.do_NextItemFast:; if no current, do first item.
  ;MOVE #$4000,$dff09a
  MOVE.l d0,a0:MOVE.l -32(a0),d0:BEQ do_FirstItemfast
  MOVE.l d0,a1:MOVE.l (a1),a1:;next of current
  MOVE.l (a1),d0
  BEQ 'done
    MOVE.l a1,-32(a0)
    MOVEQ #-1,d0
 'done:
  ;MOVE #$c000,$dff09a:
RTS

do_FirstItemfast:
  MOVE.l -28(a0),a1 ;a1=next of head node
  MOVE.l (a1),d0
  BNE 'skip
    MOVE.l d0,a1
 'skip:
  MOVE.l a1,-32(a0)
  ;MOVE #$c000,$dff09a
  TST.l d0
  BEQ 'knob:
    MOVEQ #-1,d0
 'knob
RTS

.do_SetItem
  MOVE.l d0,a0
  SUBQ.l #8,d1
  MOVE.l d1,-32(a0)
RTS

.do_PrevItem ; if no current, do last item.
  ;MOVE #$4000,$dff09a
  !_disable
  MOVE.l d0,a0
  MOVE.l -32(a0),d0
  BEQ do_LastItem2

  MOVE.l d0,a1
  MOVE.l 4(a1),a1:;previous of current
  MOVE.l 4(a1),d0
  BEQ 'done
    MOVE.l a1,-32(a0)
    MOVEQ #-1,d0
 'done:
  !_enable
  ;MOVE #$c000,$dff09a:
RTS

.do_SortList
  ;MOVE #$4000,$dff09a:
  !_disable
  MOVE d1,d6
  MOVEM.l a4-a6,-(a7)
  MOVE.l d0,a0
  SUB.l#24,d0
  LEA -28(a0),a0
  CMP.l(a0),d0
  BEQ dun
    dopass:
      MOVE.l (a0),a1
      MOVEM.l (a1),a2-a3
      CMP.l a2,d0
      BEQ dun
        MOVE.l (a2),a4
        MOVE.l 8(a1,d6),d1
        MOVEQ #0,d3      ;d3=flag
        CMP.l d3,a3
        BNE nxpass
          TRAP #0

        nxpass:
          MOVE.l 8(a2,d6),d2
          CMP.l d1,d2
          BMI doswap

          MOVE.l d2,d1
          nxitem:
          CMP.l d0,a4
          BEQ dunpass
            MOVE.l a1,a3
            MOVE.l a2,a1
            MOVE.l a4,a2
            MOVE.l (a2),a4
        BRA nxpass
        dunpass:
      MOVE.l a2,d0
    TST d3
    BNE dopass
  dun:
  ;MOVE #$c000,$dff09a:
  !_enable
  MOVEM.l (a7)+,a4-a6:RTS

doswap:
  MOVE.l a2,(a3)
  MOVEM.l a1/a3,(a2)
  MOVE.l a2,4(a1)
  MOVE.l a4,(a1)
  MOVE.l a1,4(a4)
  EXG a1,a2
  MOVEQ #1,d3
  BRA nxitem

;******************** ERROR CHECKING ***********************

err1:MOVE.l #mess1,d0:TRAP #0
err2:MOVE.l #mess2,d0:TRAP #0
err3:MOVE.l #mess3,d0:TRAP #0
err4:MOVE.l #mess4,d0:TRAP #0
err5:MOVE.l #mess5,d0:TRAP #0

errors:
mess1:Dc.b "Array or pointer is not a List",0
mess2:Dc.b "No Current Item",0
mess3:Dc.b "Current Stack overflow",0
mess4:Dc.b "Current Stack Empty",0
mess5:Dc.b "Wrong Array on Stack",0
Even

.popchk:
  MOVE.l currsp(pc),a0
  CMP.l currstack(pc),a0
  BLS err4
    CMP.l -8(a0),d0
    BNE err5
BRA lchk

.pushchk:
  MOVE.l currsp(pc),a0
  SUB.l maxstack(pc),a0
  CMP.l currstack(pc),a0
  BCC err3
    BRA lchk
lchk2:
    MOVE.l d0,a0
    TST.l -32(a0)
    BEQ err2
lchk:
  MOVE.l d0,a0
  CMP.l #"lIsT",-4(a0)
  BNE err1
RTS

