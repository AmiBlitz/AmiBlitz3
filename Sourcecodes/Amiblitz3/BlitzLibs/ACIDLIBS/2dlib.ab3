; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "blitzlibs:basic"
; ExeFile         = "sis2dlib.obj"
; CreateIcon      = 1
; Residents       = "blitzlibs:libmacs.res,blitzlibs:blitzoffs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
;
; simons 2d library
;

; all should work with > 1024 size bitmaps
; clipblit works like blit but clips
; shapesbitmap means you can do fast 1 or 2 bitplane blits
; (more control as dummy bitmap is created with planepick)

; bum8
; bitmapwindow added
; bitmaporigin added

!libheader {#sis2dlib,0,0,0,0}

!astatement
!args {#word,#word,#word,#word,#word}
!libs {#bitmaplib,#ua3}
!subs {_ellipse,0,0}                 ;ellerrs
!args {#word,#word,#word,#word}
!libs {#bitmaplib,#ua3}
!subs {_circle,0,0}                  ;ellerrs1
!name {"Circle","x,y,rx[,ry],color"}

!astatement
!args {#word,#word,#word,#word,#word}
!libs {#bitmaplib,#ua3,254,$5600,#chipbaselib,#la2}
!subs {_ellipsef,0,0}
!args {#word,#word,#word,#word}
!libs {#bitmaplib,#ua3,254,$5600,#chipbaselib,#la2}
!subs {_circlef,0,0}
!name {"Circlef","x,y,rx[,ry],color"}

!astatement
!args {#word,#word,#word,#word,#word}
!libs {#bitmaplib,#ua3,#chipbaselib,#la2,254,$5600}
!subs {_box,0,0}
!name {"Box","x1,y1,x2,y2,color"}

!astatement
!args {#word,#word,#word,#word,#long}
!libs {#bitmaplib,#ua3,#chipbaselib,#la2,254,$5600}
!subs {_boxf,0,0}
!name {"Boxf","x1,y1,x2,y2,color"}

!astatement
!args {#word,#word,#word,#word,#word}
!libs {#bitmaplib,#ua3,#chipbaselib,#la2,254,$5600}
!subs {_line,0,0}
!args {#word,#word,#word}
!libs {#bitmaplib,#ua3,#chipbaselib,#la2,254,$5600}
!subs {_lineto,0,0}
!args {#word,#word,#word,#word,#word,#word}
!libs {#bitmaplib,#ua3,#chipbaselib,#la2,254,$5600}
!subs {_linew,0,0}
!name {"Line","[x1,y1,]x2,y2,color[,width]"}

!astatement
!args
!libs
!subs {_freefill,0,0}
!name {"FreeFill","frees memory allocated for 2d fill routines"}

!astatement
!args
!libs
!subs {_allocfill,0,0}
!name {"AllocFill","for internal use only (polylib.obj)"}

!astatement
!args {#word,#word}
!libs {#bitmaplib,#ua3,#chipbaselib,#la2,254,$5600}
!subs {_remap,0,0}
!args {#word,#word,#word}
!libs {#bitmaplib,#ua3,#bitmaplib,$1082,#chipbaselib,#la2,254,$5600}
!subs {_remap2,0,0}
!name {"ReMap","colour# to replace,destination colour# [,BitMap destintion"}

!astatement
!args {#word,#word,#word}
!libs {#bitmaplib,#ua3,#chipbaselib,#la2,254,$5600}
!subs {_floodfill,0,0}
!args {#word,#word,#word,#word}
!libs {#bitmaplib,#ua3,#chipbaselib,#la2,254,$5600}
!subs {_floodfill2,0,0}
!name {"FloodFill","x,y,colour [,border colour]"}

!astatement
!args {#word,#long,#word}
!libs {#bitmaplib,#ua3,#chipbaselib,#la2,254,$5600}
!subs {_poly,0,0}
!name {"Poly","numpts,*coords.w,color"}

!astatement
!args {#word,#long,#word}
!libs {#bitmaplib,#ua3,#chipbaselib,#la2,254,$5600}
!subs {_polyf,0,0}
!args {#word,#long,#word,#word}
!libs {#bitmaplib,#ua3,#chipbaselib,#la2,254,$5600}
!subs {_polyf2,0,0}
!name {"Polyf","numpts,*coords.w,color[,color2]"}

!astatement
!args {#word,#word,#word}
!libs {#bitmaplib,$1080,#bitmaplib,$1181}
!subs {_bitplanesbitmap,0,0}
!name {"BitPlanesBitMap","srcbitmap,destbitmap,planepick"}

!astatement
!args{#word,#word,#word}
!libs{#shapeslib,$1380,#chipbaselib,#la1,#bitmaplib,$1202,254,$5600}
!subs{_doclipblit,_cbchk,0}
!args{#word,#word,#word,#word}
!libs{#shapeslib,$1380,#chipbaselib,#la1,#bitmaplib,$1202,254,$5600}
!subs{_doclipblitx,_cbchk,0}
!name{"ClipBlit","Shape#,X,Y,[Excess]"}

!astatement
!args{#word}
!libs
!subs{_doclipblitmode,0,0}
!name{"ClipBlitMode","BPLCON0"}

!astatement
!args {#word,#word,#word,#word,#word,#word}
!libs {#bitmaplib,$1080,#bitmaplib,$1181}
!subs {_bitmapwindow,0,0}
!name {"BitMapWindow","srcbitmap,destbitmap,x,y,w,h"}

!astatement
!args {#word,#word,#word}
!libs {#bitmaplib,$1080}
!subs {_bitmaporigin,0,0}
!name {"BitMapOrigin","BitMap#,x,y"}

init:!nullsub {_init,0,0}

!libfin

;NEWTYPE.bitmap       ;size=64
;  _ebwidth.w[0]      ;00: for compatability.
;  _linemod.w         ;00: value to get from one scanline to next.
;  _height.w          ;02: currently pixel height - but open to commodore           ;'enhancement'.
;  _depth.w           ;04: number of bitplanes.
;  _pad.b[2]          ;06: nothing.
;  _data.l[8]         ;08: actual bitplane pointers.
;  _cursx.w           ;40
;  _cursy.w           ;42
;  _pad2.b[4]         ;40: zilch.
;  _originx.w         ;48: origin x position
;  _originy.w         ;50: origin y position
;  _flags.w           ;52: 0=normal bitmap, $8000=interleaved, $1=window
;  _bitplanemod.w     ;54: ebwidth if flag<>0 else 0
;  _xclip.w           ;56: pixel width for render clipping
;  _yclip.w           ;58: pixel height for render clipping
;  _cclip.w           ;60: number of colours available on bitmap ( = 2^_depth)
;  _isreal.w          ;62: 0=no bitmap here, <0=blitz created bitmap, >0=borrowed
;End NEWTYPE

;------------------------------------------------------------------------
Macro bblitwait:BTST#6,2(a4):bbw`@:BTST#6,2(a4):BNE bbw`@:End Macro
Macro BlitWait:BTST#6,2(a2):bw`@:BTST#6,2(a2):BNE bw`@:End Macro
Macro BlitLabel:`1:Dc $a001:Dc.l `1o:MOVEM.l d0-d1,-(a7)
 JSR _OwnBlitter(a6):MOVEM.l (a7)+,d0-d1:BSR `1o:!BlitWait
 JSR _DisownBlitter(a6):RTS:`1o:End Macro
;------------------------------------------------------------------------

_bitmaporigin:
  TST 62(a0):BEQ nobom:MOVEM d1-d2,48(a0):nobom:RTS

_bitplanesbitmap:
  TST 62(a0):BEQ dunbpb:TST 62(a1):BNE dunbpb
  MOVE.l (a0),(a1):MOVEQ#0,d0:MOVEQ#0,d1:LEA 8(a0),a2:LEA 8(a1),a3
  nxbmc:MOVE.l (a2)+,d4:BTST d0,d2:BEQ nobmp:ADDQ#1,d1:MOVE.l d4,(a3)+
  nobmp:ADDQ#1,d0:CMP 4(a0),d0:BNE nxbmc:MOVE d1,4(a1):BEQ dunbpb
  MOVE#0,52(a1):MOVE.l 56(a0),56(a1):MOVE #1,62(a1)
  dunbpb:RTS

_bitmapwindow:  ;xywh=d2d3d4d5
  TST 62(a0):BEQ dunwbm:TST 62(a1):BNE dunwbm
  MOVE (a0),d0:MOVE 4(a0),d6
  LSR#4,d2:ADD d2,d2:LSR#4,d4:ADD d4,d4       ;round to nearest word
  MULU d0,d3:EXT.l d2:ADD.l d2,d3             ;d3=offset from topleft
  MOVEM d0/d5/d6,(a1)                         ;wid hi depth
  LEA 8(a0),a2:LEA 8(a1),a3:SUBQ#1,d6
  nxwbm:MOVE.l (a2)+,d1:ADD.l d3,d1:MOVE.l d1,(a3)+:DBRA d6,nxwbm
  MOVE 52(a0),52(a1):BSET #0,53(a1):MOVE d4,54(a1)
  ASL#3,d4:MOVEM d4-d5,56(a1):MOVE 60(a0),60(a1):MOVE #1,62(a1)
  dunwbm:RTS

.polygons       ; a2=verts a3=bmap

!BlitLabel{_poly}
  MOVEM.l a4-a6,-(a7):MOVE.l a3,a4:MOVE.l d1,a5:MOVE.l d1,a6
  SUBQ#1,d0:MOVE d0,pfc:MOVE d2,color
nxpfc:
  MOVEM(a5),d0-d3:ADDQ#4,a5:MOVE.l a4,a3:BSR clipme:SUB#1,pfc:BNE nxpfc
  MOVEM(a5),d0-d1:MOVEM(a6),d2-d3:MOVE.l a4,a3:BSR clipme
  MOVEM.l (a7)+,a4-a6:RTS

pfc:Dc 0

!BlitLabel{_polyf2}
  MOVEM.l a4-a6,-(a7) : MOVEM d2-d3,pcolor : BRA dopy

!BlitLabel{_polyf}
  MOVEM.l a4-a6,-(a7) : MOVE d2,pcolor : MOVE d2,pcolor+2

dopy:
  MOVE.l d1,a2 : MOVE d0,d7 : MOVE.l a3,a6
  MOVEM (a2),d0-d5 : SUB d2,d4 : SUB d3,d5 : SUB d0,d2
  SUB d1,d3 : MULS d2,d5 : MULS d4,d3 : SUB.l d3,d5 : BLE anti
 clck:MOVE d7,d6 : ASL #2,d6 : LEA polypts(pc),a1 : LEA 0(a1,d6),a3 : MOVE d7,d6 : SUBQ #1,d6
 nxc1:MOVE.l(a2)+,d0:MOVE.ld0,(a1)+:MOVE.ld0,(a3)+:DBRA d6,nxc1:BRA dunc
 anti:MOVE d7,d6:ASL#2,d6:LEA polypts(pc,d6),a1:LEA 0(a1,d6),a3:MOVE d7,d6:SUBQ#1,d6
 nxc2:MOVE.l(a2)+,d0:MOVE.ld0,-(a1):MOVE.ld0,-(a3):DBRA d6,nxc2:MOVE pcolor+2(pc),pcolor
 dunc:
  LEA polypts(pc),a0 : BSR _drawpoly
  MOVEM.l(a7)+,a4-a6
  LEA $dff000,a2
RTS

polypts:Ds.l 32

_drawpoly:   ;a0=*polypts d1=pattern a6=bitmap d7=numpts

  TST pcolor:BPL porigin:RTS

porigin:
  MOVE.l 48(a6),d6:BEQ tops:MOVE.l d6,d5:SWAP d5
  MOVE d7,d4:SUBQ#1,d4:MOVE.l a0,a1
  nxpor:ADD d5,(a1)+:ADD d6,(a1)+:ADD d5,(a1)+:ADD d6,(a1)+:DBRA d4,nxpor

tops:
  MOVE d7,d6:SUBQ#1,d7:BRA fud
  fhi:CMP 2(a0),d1:BMI flo:BNE fud
  CMP(a0),d0:BMI fox:MOVE (a0),d0:MOVE.l a0,a1:BRA flo
  fox:CMP (a0),d2:BPL flo:MOVE(a0),d2:MOVE.la0,a2:BRA flo
  fud:MOVEM (a0),d0-d1:MOVE d0,d2:MOVE.l a0,a1:MOVE.l a0,a2
  flo:ADDQ#4,a0:DBRA d7,fhi:ASL#2,d6:ADD d6,a1:SUBQ#4,a1:ADDQ#4,a2

cliptotop:
  TST d1:BPL noclop:MOVEQ#0,d5
  lclo:CMP 2(a1),d5:BLT clipl
    MOVEM (a1),d0-d1:SUBQ#4,a1:CMP.l a2,a1:BPL lclo:BRA dun
    clipl:MOVEM (a1),d3-d4:SUB d1,d5:SUB d0,d3:SUB d1,d4
          MULS d5,d3:DIVS d4,d3:ADD d3,d0
  MOVEQ#0,d5:MOVE-2(a2),d1
  rclo:CMP 2(a2),d5:BLT clipr
    MOVEM(a2)+,d1-d2:EXG d1,d2:CMP.l a2,a1:BPL rclo:BRA dun
    clipr:MOVEM (a2),d3-d4:SUB d1,d5:SUB d2,d3:SUB d1,d4
          MULS d5,d3:DIVS d4,d3:ADD d3,d2:MOVEQ#0,d1
  noclop:

  ;clip to entry point d0-d2 (x0 y x1)

cliptostrt:
  CMP 56(a6),d0:BMI nomclip:MOVE d1,d6    ;entering from right

  MOVE 56(a6),d5:SUBQ#1,d5
  mclo:CMP (a1),d5:BGT clipm    ;bpl simon was here
    MOVEM (a1),d0-d1:SUBQ#4,a1:CMP.l a2,a1:BPL mclo:BRA dun
    clipm:MOVEM (a1),d3-d4
      SUB d0,d5:SUB d0,d3:SUB d1,d4:MULS d5,d4
      DIVS d3,d4:ADD d4,d1:EXG d1,d6:MOVE 56(a6),d0:SUBQ#1,d0
      sclo:CMP 2(a2),d6:BMI mom
        MOVEM(a2)+,d1-d2:EXG d1,d2:CMP.l a2,a1:BPL sclo:BRA dun
        mom:MOVEM(a2),d3-d4:SUB d1,d4:SUB d2,d3:EXG d1,d6
          SUB d1,d6:MULS d3,d6:DIVS d4,d6:SUB d6,d2:BRA nonclip
    nomclip:

  TST d2:BPL nonclip:MOVE d1,d6    ;entering from left
  MOVEQ#0,d5
  nclo:CMP (a2),d5:BLT clipn        ;ble simon was here
    MOVEM(a2)+,d1-d2:EXG d1,d2:CMP.l a2,a1:BPL nclo:BRA dun
    clipn:MOVEM (a2),d3-d4
      SUB d2,d5:SUB d2,d3:SUB d1,d4:MULS d5,d4
      DIVS d3,d4:ADD d4,d1:MOVEQ#0,d2:EXG d1,d6
      qclo:CMP 2(a1),d6:BMI mon
        MOVEM (a1),d0-d1:SUBQ#4,a1:CMP.l a2,a1:BPL qclo:BRA dun
        mon:MOVEM(a1),d3-d4:SUB d1,d4:SUB d0,d3:EXG d1,d6
            SUB d1,d6:MULS d3,d6:DIVS d4,d6:SUB d6,d0
        nonclip:

  ;still inside window?

  CMP 58(a6),d1:BPL dun:MOVEM d0-d2,xyx

  MOVE 58(a6),d5:MOVE 56(a6),d6:SUBQ#1,d6:MOVEQ#0,d7

lside:
  LEA l0(pc),a3:MOVEM (a1),d2-d3
lline:                            ;d0-d4=d,h,ax,ay,sx
  SUB d1,d3:BLE dunl:MOVE d3,d1:SUBQ#1,d3:MOVE d3,(a3)+
  SUB d0,d2:EXT.l d2:MOVEQ#15,d4:ADDQ#1,d3

  lls:SUBQ#2,d4:ASL.l#2,d2:LSR#2,d3:BNE lls
  DIVS d1,d2:EXT.l d2:ASL.l d4,d2:SWAP d2:ADD d2,d2:MOVE.l d2,(a3)+  ;was ASL#3,d2

  MOVEM(a1),d0-d1:CMP d5,d1:BPL lbot:CMP d6,d0:BGT loff
  SUBQ#4,a1:MOVEM (a1),d2-d3:BRA lline
  loff:MOVEM 4(a1),d2-d3:SUB d0,d2:SUB d1,d3:SUB d6,d0
       MULS d0,d3:DIVS d2,d3:SUB d3,-6(a3):BRA dunl
  lbot:SUB d5,d1:SUB d1,-6(a3)
  dunl:MOVEQ#-1,d0:MOVE.l d0,(a3)

rside:
  MOVEM xyx+2(pc),d0-d1:EXG d0,d1:LEA l1(pc),a3:MOVEM (a2),d2-d3
rline:
  SUB d1,d3:BLE dunr:MOVE d3,d1:SUBQ#1,d3:MOVE d3,(a3)+
  SUB d0,d2:EXT.l d2:MOVEQ#15,d4:ADDQ#1,d3:MOVEQ#3,d0

  rls:SUBQ#2,d4:ASL.l#2,d2:LSR#2,d3:BNE rls
  DIVS d1,d2:EXT.l d2:ASL.l d4,d2:SWAP d2:ADD d2,d2:MOVE.l d2,(a3)+  ;was ASL#3,d2

  MOVEM(a2),d0-d3:CMP d5,d1:BPL rbot:CMP d7,d0:BMI roff
  ADDQ#4,a2:BRA rline
  roff:MOVEM -4(a2),d2-d3:SUB d0,d2:SUB d1,d3:SUB d7,d0
    MULS d0,d3:DIVS d2,d3:SUB d3,-6(a3):BRA dunr
  rbot:SUB d5,d1:SUB d1,-6(a3)
  dunr:MOVEQ#-1,d0:MOVE.ld0,(a3)

;-------------------------------------------------------------------------

  MOVEM xyx(pc),d0-d2:MULU (a6),d1:MOVE.l d1,bmoff:MOVE(a6),bmwid+2   ;a5=bmapoffset
  MOVE 56(a6),d1:SUBQ#1,d1:ADD d1,d1:MOVE d1,rtclip

  MOVE.l d2,d1:ADD d0,d0:ADD d1,d1:BCHG#31,d0:BCHG#31,d1
  LEA l0(pc),a0:MOVE(a0)+,d2:BMI dun:MOVE.l(a0)+,d4
  LEA l1(pc),a1:MOVE(a1)+,d3:BMI dun:MOVE.l(a1)+,d5:LEA $dff000,a4

bltsetup:
  !bblitwait:MOVE#-1,$74(a4):MOVE#0,$42(a4)
ploop:
  ADD.l d4,d0:BCC noc0:ADDQ#2,d0:noc0:ADD.l d5,d1:BCC noc1:ADDQ#2,d1:noc1
  MOVE d0,d6:CMP rtclip(pc),d6:BGT dun
  SWAP d6:MOVE d0,d6:BPL ko1:MOVEQ#0,d6:ko1         ;clipping
  TST d1:BMI dun:MOVE rtclip(pc),d7:CMP d1,d7:BMI ko2:MOVE d1,d7:ko2

  !bblitwait:AND#30,d6:MOVE lup1(pc,d6),$44(a4)
  MOVE d7,d6:AND#30,d6:MOVE lup2(pc,d6),$46(a4)
  SWAP d6:LSR#5,d6:LSR#5,d7:SUB d6,d7:BMI dun:ADD#65,d7
  ADD d6,d6:MOVE.l bmoff(pc),a2:ADD d6,a2
  MOVEQ#0,d6:LEA 8(a6),a5:BRA nxpolyplane

lup1:Dc $ffff,$7fff,$3fff,$1fff,$0fff,$07ff,$03ff,$01ff
     Dc $00ff,$007f,$003f,$001f,$000f,$0007,$0003,$0001
lup2:Dc $8000,$c000,$e000,$f000,$f800,$fc00,$fe00,$ff00
     Dc $ff80,$ffc0,$ffe0,$fff0,$fff8,$fffc,$fffe,$ffff

nxpolyplane:
  !bblitwait
  MOVE #$3fa,$40(a4):BTST d6,pcolor+1:BNE fuck:MOVE #$30a,$40(a4):fuck
  MOVE.l (a5)+,a3:ADD.l a2,a3:MOVE.l a3,$48(a4):MOVE.l a3,$54(a4) ;c&d ptr
  MOVE d7,$58(a4):ADDQ#1,d6:CMP 4(a6),d6:BNE nxpolyplane
  MOVE.l bmwid(pc),d7:ADD.l d7,bmoff
  ADD.l d4,d0:BCC noc2:ADDQ#2,d0:noc2:ADD.l d5,d1:BCC noc3:ADDQ#2,d1:noc3
  DBRA d2,pn0:MOVE (a0)+,d2:BMI dun:MOVE.l(a0)+,d4:pn0
  DBRA d3,ploop:MOVE (a1)+,d3:BMI dun:MOVE.l(a1)+,d5:BRA ploop
dun:RTS

bmwid:Dc.l 0
bmoff:Dc.l 0
pcolor:Dc.l 0
rtclip:Dc 0
xyx:Dc 0,0,0        ;temporary poly start
l0:Dcb.w 32,0
l1:Dcb.w 32,0

;-----------------------------------------------------------------------------

_init:
 MOVEQ.l#0,d0:MOVE.ld0,fbloc:MOVE.ld0,fbsize:RTS

_allocfill:
 MOVEM.l d0-d1,-(a7):;MOVE 0(a3),d7:MULU 2(a3),d7

 MOVE 56(a3),d7:LSR#3,d7:MULU 58(a3),d7

 CMP.l fbsize(pc),d7:BMI yokay:BEQ yokay:MOVE.l fbloc(pc),a1
 MOVE.l fbsize(pc),d0:BEQ never:ALibJsr $c003
 never:MOVE.l d7,d0:MOVE.l d0,fbsize:MOVE.l #2,d1:ALibJsr $c002
 MOVE.l d0,fbloc
 yokay:MOVE.l fbloc(pc),d7:MOVEM.l (a7)+,d0-d1:RTS

_freefill:
 MOVE.l fbloc(pc),a1:MOVE.l fbsize(pc),d0:BEQ offmode
 ALibJsr $c003:CLR.l fbsize:offmode:MOVEQ#0,d0:RTS

fbloc:Dc.l 0
fbsize:Dc.l 0

;--------------------------------------------------------------------

Macro CalcOctant
 #lm=1:#o1=16:#o2=0:#o3=8:#o4=20:#o5=28:#o6=12:#o7=4:#o8=24
 SUB.w d0,d2:BMI xneg`@:SUB.w d1,d3:MOVE.w d3,d7:BMI yneg`@
 CMP.w d3,d2:BMI ygtx`@:MOVEQ.l#o1+lm,d5:BRA lad`@
 ygtx`@:EXG d2,d3:MOVEQ.l#o2+lm,d5:BRA lad`@
 yneg`@:NEG.w d3:CMP.w d3,d2:BMI ynygtx`@:MOVEQ.l#o8+lm,d5:BRA lad`@
 ynygtx`@:EXG d2,d3:MOVEQ #o7+lm,d5:BRA lad`@
 xneg`@:NEG.w d2:SUB.w d1,d3:MOVE.w d3,d7:BMI xyneg`@
 CMP.wd3,d2:BMI xnygtx`@:MOVEQ.l#o4+lm,d5:BRA lad`@
 xnygtx`@:EXG d2,d3:MOVEQ.l#o3+lm,d5:BRA lad`@
 xyneg`@:NEG.wd3:CMP.wd3,d2:BMI xynygtx`@:MOVEQ.l#o5+lm,d5:BRA lad`@
 xynygtx`@:EXG d2,d3:MOVEQ.l#o6+lm,d5:lad`@
End Macro

!BlitLabel{_floodfill}
 MOVEM.l a4-a6,-(a7):MOVEM d0-d2,coords
 MULU (a3),d1:MOVE d0,d2:NOT d2:LSR#3,d0:EXT.l d0:ADD.l d0,d1
 MOVE 4(a3),d7:MOVEQ#0,d6:MOVEQ#0,d0:LEA8(a3),a4
 nxpt:MOVE.l (a4)+,a0:BTST.b d2,0(a0,d1.l):BEQ nobg
 BSET d6,d0:nobg:ADDQ#1,d6:CMP d6,d7:BNE nxpt
 BSR monofetch:!BlitWait:BRA yofill

coords:Dc 0,0
fcol:Dc 0
widbytes:Dc 0

!BlitLabel{_floodfill2}
 MOVEM.l a4-a6,-(a7):MOVEM d0-d2,coords:MOVE d3,d0
 BSR monofetch:!BlitWait:MOVE #$090f,$40(a2):MOVE.la5,$50(a2)
 MOVE.la5,$54(a2):MOVE d6,$58(a2):!BlitWait

yofill:MOVEM coords(pc),d0-d1:MOVE#-1,-(a7)
 MOVE d0,d2:NOT d2:AND#7,d2:LSR#3,d0:EXT.l d0
 MOVE 56(a3),d4:LSR#3,d4:MOVE d4,widbytes
 MOVE (a3),d4:MOVE d4,d5:NEG d5

;d0=xbyte d1=y d2=xbit d3=y*bpwid+d0 d4=+l d5=-l d6=pcount
;a0=fbloc

fillline:
 MOVE d1,d3:MULU(a3),d3:ADD.ld0,d3:MOVE.lfbloc(pc),a0:ADD.ld3,a0
 goleft:BTST.b d2,(a0):BEQ gotleft:ADDQ#1,d2:BTST#3,d2:BEQ goleft
 BCLR#3,d2:SUBQ#1,a0:SUBQ#1,d3:SUBQ#1,d0:BPL goleft:gotleft
 MOVE#0,flags

drawright:
 SUBQ #1,d2:BPL chkr:AND#7,d2:ADDQ#1,a0:ADDQ#1,d3:ADDQ#1,d0
 CMP widbytes(pc),d0:BEQ gotright:chkr:BTST.bd2,(a0):BEQ gotright

plop:BCLR.bd2,(a0):LEA 8(a3),a1:MOVE4(a3),d6:SUBQ#1,d6
 MOVE fcol(pc),d7:nxps:

 MOVE.l(a1)+,a4:ADD.l d3,a4:LSR#1,d7:BCS dosc
 BCLR.b d2,(a4):BRA dosc2:dosc:BSET.b d2,(a4):dosc2:DBRA d6,nxps

 BTST.bd2,0(a0,d4):SNE d6:CMP.bflags(pc),d6:BEQ nodo:NOT.b flags
 BEQ nodo:ADDQ#1,d1:CMP 58(a3),d1:BEQ oflo:MOVEM d0-d2,-(a7)
 oflo:SUBQ#1,d1:nodo

 TST d1:BEQ noup:BTST.bd2,0(a0,d5):SNE d6:CMP.bflags+1(pc),d6
 BEQ noup:NOT.bflags+1:BEQ noup:SUBQ#1,d1:MOVEM d0-d2,-(a7)
 ADDQ#1,d1:noup:BRA drawright

gotright:MOVE (a7)+,d0:BMI finito:EXT.l d0:MOVEM(a7)+,d1-d2
 BRA fillline:finito:MOVEM.l (a7)+,a4-a6:RTS

flags:Dc.b 0,0


!BlitLabel{_remap}
 MOVEM.l a4-a6,-(a7):BSR monofetch:BSR monowrite:
 MOVEM.l (a7)+,a4-a6:RTS

!BlitLabel{_remap2}
 MOVEM.l a4-a6,-(a7):MOVE.l a0,-(a7):BSR monofetch
 MOVE.l (a7)+,a3:BSR monowrite:MOVEM.l (a7)+,a4-a6:RTS

monofetch:  ;d0=color
 BSR _allocfill:  ;MOVEM(a3),d5-d7:ASL#6,d6:LSR#1,d5:OR d5,d6
 MOVE 4(a3),d7:MOVEM 56(a3),d5-d6
 ASL.l#6,d6:LSR#4,d5:MOVE d5,d2:AND#$3fc0,d2:ADD d2,d2
 MOVE.l d6,d3:SWAP d3:TST d6:BNE bnot0:SUBQ#1,d3
 bnot0:AND#63,d5:BNE bnot1:SUB#128,d2:bnot1:OR d5,d6
 LEA8(a3),a4:SUBQ#1,d7:MOVEQ#0,d5:MOVE.l fbloc(pc),a5
 !BlitWait:MOVE.l#-1,$44(a2):MOVE.l#0,$60(a2):MOVE.l#0,$64(a2)
 MOVE d2,finx:BEQ dunxx1:MOVEQ#0,d2:MOVE d6,-(a7):AND #$ffc0,d6
 MOVE (a3),d4:SUB#128,d4:
 MOVE d4,$60(a2):MOVE d4,$62(a2):MOVE d4,$64(a2):MOVE d4,$66(a2):
nxxx1:
 MOVEM.ld5/d7/a4,-(a7):BSR dunxx1:MOVEM.l(a7)+,d5/d7/a4:!BlitWait
 ADD#128,d2:ADD#128,a5:CMP finx(pc),d2:BNE nxxx1:MOVE (a7)+,d6
 MOVE (a3),d4:AND#127,d4:BNE ns0:MOVE#128,d4:ns0:SUB(a3),d4:NEG d4
 MOVE d4,$60(a2):MOVE d4,$62(a2):MOVE d4,$64(a2):MOVE d4,$66(a2):
dunxx1:
 MOVE.l#$0bf00000,$40(a2):BTST d5,d0:BNE noa0:MOVE#$0b0f,$40(a2):noa0
 MOVE.l(a4)+,a0:ADD d2,a0:MOVE.l a0,$50(a2):MOVE.la5,$48(a2):MOVE.la5,$54(a2)
 TST d3:BEQ noel4:MOVE d6,-(a7):MOVE d3,d4:SUBQ#1,d4:AND#63,d6
 nxn4:MOVE d6,$58(a2):!BlitWait:DBRA d4,nxn4:MOVE (a7)+,d6:noel4
 MOVE d6,$58(a2):BRA poo1
nxpoo1:!BlitWait:MOVE #$0ba0,$40(a2)
 BTST d5,d0:BNE noa1:MOVE#$0b0a,$40(a2):noa1
 MOVE.l(a4)+,a0:ADD d2,a0:MOVE.l a0,$50(a2):MOVE.la5,$48(a2):MOVE.la5,$54(a2)
 TST d3:BEQ noel1:MOVE d6,-(a7):MOVE d3,d4:SUBQ#1,d4:AND#63,d6
 nxn1:MOVE d6,$58(a2):!BlitWait:DBRA d4,nxn1:MOVE (a7)+,d6:noel1
 MOVE d6,$58(a2):poo1:ADDQ#1,d5:DBRA d7,nxpoo1:RTS

finx:Dc 0

monowrite:  ;d1=color
 MOVE.l fbloc(pc),a5:;MOVEM(a3),d5-d7:ASL#6,d6:LSR#1,d5:OR d5,d6
 MOVE 4(a3),d7:MOVEM 56(a3),d5-d6
 ASL.l#6,d6:LSR#4,d5:MOVE d5,d2:AND#$3fc0,d2:ADD d2,d2
 MOVE.l d6,d3:SWAP d3:TST d6:BNE bnot2:SUBQ#1,d3
 bnot2:AND#63,d5:BNE bnot3:SUB#128,d2:bnot3:OR d5,d6
 LEA8(a3),a4:SUBQ#1,d7:MOVEQ#0,d5
 !BlitWait:MOVE.l#-1,$44(a2):MOVE.l#0,$60(a2):MOVE.l#0,$64(a2)
 MOVE d2,finx:BEQ dunxx2:MOVEQ#0,d2:MOVE d6,-(a7):AND #$ffc0,d6
 MOVE (a3),d4:SUB#128,d4:
 MOVE d4,$60(a2):MOVE d4,$62(a2):MOVE d4,$64(a2):MOVE d4,$66(a2):
nxxx2:MOVEM.l d5/d7/a4,-(a7):BSR dunxx2:MOVEM.l (a7)+,d5/d7/a4
 !BlitWait
 ADD#128,d2:ADD #128,a5:CMP finx(pc),d2:BNE nxxx2:MOVE (a7)+,d6
 MOVE (a3),d4:AND#127,d4:BNE ns1:MOVE#128,d4:ns1:SUB(a3),d4:NEG d4
 MOVE d4,$60(a2):MOVE d4,$62(a2):MOVE d4,$64(a2):MOVE d4,$66(a2):
dunxx2:
 MOVE.l#$0bfa0000,$40(a2):BTST d5,d1:BNE noa2:MOVE#$0b0a,$40(a2):noa2
 MOVE.la5,$50(a2):MOVE.l(a4)+,a0:ADD d2,a0:MOVE.l a0,$48(a2):MOVE.l a0,$54(a2)
 TST d3:BEQ noel3:MOVE d6,-(a7):MOVE d3,d4:SUBQ#1,d4:AND#63,d6
 nxn3:MOVE d6,$58(a2):!BlitWait:DBRA d4,nxn3:MOVE (a7)+,d6:noel3
 MOVE d6,$58(a2):BRA poo2
nxpoo2:!BlitWait:MOVE #$0bfa,$40(a2)
 BTST d5,d1:BNE noa3:MOVE#$0b0a,$40(a2):noa3
 MOVE.la5,$50(a2):MOVE.l(a4)+,a0:ADD d2,a0:MOVE.l a0,$48(a2):MOVE.l a0,$54(a2)
 TST d3:BEQ noel2:MOVE d6,-(a7):MOVE d3,d4:SUBQ#1,d4:AND#63,d6
 nxn2:MOVE d6,$58(a2):!BlitWait:DBRA d4,nxn2:MOVE (a7)+,d6:noel2
 MOVE d6,$58(a2):poo2:ADDQ#1,d5:DBRA d7,nxpoo2:RTS

._lineto:   Dc $a001:Dc.l _blineto
            MOVEM.l     d0-d1,-(a7)
            JSR         _OwnBlitter(a6)
            MOVEM.l     (a7)+,d0-d1
            BSR         _blineto
            !BlitWait
            JSR         _DisownBlitter(a6)
            RTS

_line:      Dc $a001:Dc.l _bline
            MOVEM.l     d0-d1,-(a7)
            JSR         _OwnBlitter(a6)
            MOVEM.l     (a7)+,d0-d1
            BSR         _bline
            !BlitWait
            JSR         _DisownBlitter(a6)
            RTS

_linew:     Dc $a001:Dc.l _blinew
            MOVEM.l     d0-d1,-(a7)
            JSR         _OwnBlitter(a6)
            MOVEM.l     (a7)+,d0-d1
            BSR         _blinew
            !BlitWait
            JSR         _DisownBlitter(a6)
            RTS

_blinew:    MOVEM       d0-d5,-(a7)

            ADD         d5,d0
            MOVE.l a3,-(a7):BSR _bline:MOVE.l (a7)+,a3
            MOVEM       (a7),d0-d5

            ADD         d5,d1
            MOVE.l a3,-(a7):BSR _bline:MOVE.l (a7)+,a3
            MOVEM       (a7),d0-d5

            ADD         d5,d2
            MOVE.l a3,-(a7):BSR _bline:MOVE.l (a7)+,a3
            MOVEM       (a7),d0-d5

            ADD         d5,d3
            MOVE.l a3,-(a7):BSR _bline:MOVE.l (a7)+,a3
            MOVEM       (a7)+,d0-d5

            DBRA        d5,_blinew
            RTS

_blineto:   MOVE.w      d2,color
            MOVEM.w     cpos,d2-d3
            MOVEM.w     d0-d1,cpos
            BRA         clipme

_bline:     MOVE.w      d4,color
            MOVEM.w     d2-d3,cpos

clipme:     MOVEM       48(a3),d4-d5
            ADD.w       d4,d0
            ADD.w       d4,d2
            ADD.w       d5,d1
            ADD.w       d5,d3
            MOVEM.w     56(a3),d4-d5  ;was (a3)
;            ASL.w       #3,d4
            CMP.w       d0,d2
            BPL         lefri
            EXG         d0,d2
            EXG         d1,d3
lefri:      TST.w       d2
            BMI         noline
            CMP.w       d4,d0
            BPL         noline
            CMP.w       d4,d2
            BMI         noclipR
            MOVE.w      d2,d7       ;clip right
            SUB.w       d4,d7
            ADD.w       #1,d7       ;xd
            MOVE.w      d3,d6
            SUB.w       d1,d6
            MULS        d6,d7       ;xd*y
            MOVE.w      d2,d6
            SUB.w       d0,d6
            DIVS        d6,d7       ;xd*y/x
            SUB.w       d7,d3
            MOVE.w      d4,d2
            SUB.w       #1,d2
noclipR:    TST.w       d0
            BPL         noclipL
            MOVE.w      d0,d7       ;xd
            MOVE.w      d3,d6
            SUB.w       d1,d6
            MULS        d6,d7       ;xd*y
            MOVE.w      d2,d6
            SUB.w       d0,d6
            DIVS        d6,d7       ;xd*y/x
            SUB.w       d7,d1
            MOVE.w      #0,d0
noclipL:    CMP.w       d1,d3
            BPL         updwn
            EXG         d0,d2
            EXG         d1,d3
updwn:      TST.w       d3
            BMI         noline
            CMP.w       d5,d1
            BPL         noline
            CMP.w       d5,d3
            BMI         noclipB
            MOVE.w      d3,d7       ;clip right
            SUB.w       d5,d7
            ADD.w       #1,d7       ;yd
            MOVE.w      d2,d6
            SUB.w       d0,d6
            MULS        d6,d7       ;yd*x
            MOVE.w      d3,d6
            SUB.w       d1,d6
            DIVS        d6,d7       ;xd*y/y
            SUB.w       d7,d2
            MOVE.w      d5,d3
            SUB.w       #1,d3
noclipB:    TST.w       d1
            BPL         noclip
            MOVE.w      d1,d7       ;yd
            MOVE.w      d2,d6
            SUB.w       d0,d6
            MULS        d6,d7       ;yd*x
            MOVE.w      d3,d6
            SUB.w       d1,d6
            DIVS        d6,d7       ;yd*x/y
            SUB.w       d7,d0
            MOVE.w      #0,d1

noclip:     !CalcOctant
            MULU        (a3),d1
            MOVE.l      d1,a1
            EXT.l       d0
            ROR.l       #4,d0
            ADD.w       d0,a1
            ADD.w       d0,a1       ;d1=bplane offset
            SWAP        d0

            LSL.w       #2,d3
            ADD.w       d2,d2
            MOVE.w      d2,d4

            EXT.l       d4
            LSL.l       #5,d4
            MOVE.l      d4,d1
            SWAP        d1

            ADD.w       #$42,d4             ;42 simon was here

            !BlitWait
            MOVE.w      d3,$62(a2)              ;bmod
            SUB.w       d2,d3
            EXT.l       d3
            MOVE.l      d3,d7
;            MOVE.l      d3,$50(a2)              ;aptr
            BPL         love
            OR.w        #64,d5
love:       SUB.w       d2,d3
            MOVE.w      d3,$64(a2)              ;amod
            MOVE.w      (a3),$60(a2)
            MOVE.w      (a3),$66(a2)
            MOVE.l      #-1,$44(a2)
            MOVE.w      4(a3),dpth    ;d1=depth
            ;
            LEA         8(a3),a3
            MOVEQ       #0,d6       ;d6=count
            TST.w       color
            BMI         nxplanus
nxplane:    MOVE.l      (a3)+,a0
            ADD.l       a1,a0
            OR.w        #$bfa,d0
            BTST.b      d6,color+1
            BNE         colon
            EOR.b       #$f0,d0
colon:      !BlitWait
            MOVE.w      #$8000,$74(a2)
            MOVE.l      d7,$50(a2)              ;aptr
            MOVE.l      a0,$48(a2)              ;ya ya
            MOVE.l      a0,$54(a2)
            MOVE.w      d0,$40(a2)
            MOVE.w      d5,$42(a2)
            TST         d1
            BNE         doextend1
dunex1:     MOVE.w      d4,$58(a2)              ;d4=size
            ADD.b       #1,d6
            CMP.b       dpth+1(pc),d6     ;d1  ouch was cmp.b!
            BNE         nxplane
noline:     RTS

dpth:Dc 0

doextend1:  MOVE        d1,-(a7)
            SUBQ        #1,d1
dox1:       MOVE        #$2,$58(a2)
            !BlitWait
            DBRA        d1,dox1
            MOVE        (a7)+,d1
            BRA         dunex1

nxplanus:   MOVE.l      (a3)+,a0
            ADD.l       a1,a0
            OR.w        #$b5a,d0
colonus:    !BlitWait
            MOVE.w      #$8000,$74(a2)
            MOVE.l      d7,$50(a2)              ;aptr
            MOVE.l      a0,$48(a2)              ;ya ya
            MOVE.l      a0,$54(a2)
            MOVE.w      d0,$40(a2)
            MOVE.w      d5,$42(a2)
            TST         d1
            BNE         doextend2
dunex2:     MOVE.w      d4,$58(a2)              ;d4=size
            ADD.b       #1,d6
            CMP.b       dpth+1(pc),d6     ;d1  ouch was cmp.b!
            BNE         nxplanus
nolinus:    RTS

doextend2:  MOVE        d1,-(a7)
            SUBQ        #1,d1
dox2:       MOVE        #2,$58(a2)
            !BlitWait
            DBRA        d1,dox2
            MOVE        (a7)+,d1
            BRA         dunex2
;=====================================================================
._box:      Dc $a001:Dc.l _boxo
            MOVEM.l     d0-d1,-(a7)
            JSR         _OwnBlitter(a6)
            MOVEM.l     (a7)+,d0-d1
            BSR         _boxo
            !BlitWait
            JSR         _DisownBlitter(a6)
            RTS

_boxo:      MOVEM.l     a4-a5,-(a7)
            MOVEM48(a3),d5-d6:ADD d5,d0:ADD d5,d2:ADD d6,d1:ADD d6,d3
            CMP.w       d0,d2
            BPL         noswp1
            EXG         d0,d2
noswp1:     CMP.w       d1,d3
            BPL         noswp2
            EXG         d1,d3
noswp2:     MOVEM.w     d0-d4,center
            MOVE.l      a3,a4
            MOVE.w      d0,d2
            SUBQ        #1,d3
            MOVE.l      a4,a3
            BSR         clipme
            MOVEM.w     center(pc),d0-d3
            MOVE.w      d2,d0
            ADDQ        #1,d1
            MOVE.l      a4,a3
            BSR         clipme
            MOVEM.w     center(pc),d0-d3
            MOVE.w      d1,d3
            ADDQ        #1,d0
            MOVE.l      a4,a3
            BSR         clipme
            MOVEM.w     center(pc),d0-d3
            MOVE.w      d3,d1
            SUBQ        #1,d2
            MOVE.l      a4,a3
            BSR         clipme
nobox:      MOVEM.l     (a7)+,a4-a5
            RTS
;=====================================================================
._boxf:     Dc $a001:Dc.l _boxfo
            MOVEM.l     d0-d1,-(a7)
            JSR         _OwnBlitter(a6)
            MOVEM.l     (a7)+,d0-d1
            BSR         _boxfo
            !BlitWait
            JSR         _DisownBlitter(a6)
            RTS

_boxfo:
 MOVEM48(a3),d5-d6:ADD d5,d0:ADD d5,d2:ADD d6,d1:ADD d6,d3
 CMP.w d0,d2:BPL xs:EXG d0,d2:xs:CMP.w d1,d3:BPL ys:EXG d1,d3:ys
 MOVEM.w 56(a3),d6-d7:;ASL.w #3,d6:
 SUBQ #1,d6:SUBQ #1,d7:TST.w d0 ;was (a3)
 BPL u1:CLR.w d0:u1:TST.w d1:BPL u2:CLR.w d1:u2:TST.w d2
 BMI nobx:TST.w d3:BMI nobx:CMP.w d6,d0:BGE nobx:CMP.w d7,d1
 BGE nobx:CMP.w d6,d2:BLT u3:MOVE.w d6,d2:u3:CMP.w d7,d3
 BLT noclip2:MOVE.w d7,d3:BRA noclip2

m1:Dc.w $ffff,$7fff,$3fff,$1fff,$fff,$7ff,$3ff,$1ff
   Dc.w $ff,$7f,$3f,$1f,$f,$7,$3,$1
m2:Dc.w $8000,$c000,$e000,$f000,$f800,$fc00,$fe00,$ff00
   Dc.w $ff80,$ffc0,$ffe0,$fff0,$fff8,$fffc,$fffe,$ffff

noclip2:
 MOVE d2,d6:SUB d0,d6:CMP #991,d6:BMI dobof
 MOVEM.l d0-d4/a3,-(a7):MOVE d0,d2:ADD #989,d2:BSR dobof
 MOVEM.l (a7)+,d0-d4/a3:ADD #990,d0:BRA noclip2

dobof:
 !BlitWait
 MOVE.w d0,d5:AND.w #15,d5:ADD.w d5,d5:MOVE.w m1(pc,d5),$44(a2)
 MOVE.w d2,d5:AND.w #15,d5:ADD.w d5,d5:MOVE.w m2(pc,d5),$46(a2)
 MOVE.w #$ffff,$74(a2):MOVE.w #0,$42(a2)

 SUB.w d1,d3:ADDQ #1,d3:EXT.l d3:ASL.l #6,d3
 MULU (a3),d1                                ;d1.l=bmapoffset

 LSR.w #4,d0:EXT.l d0:ADD.l d0,d1:ADD.l d0,d1      ;d3=size

 LSR.w #4,d2:SUB.w d0,d2:ADD.w #1,d2:OR.w d2,d3:MOVE.w (a3),d6

 SUB.w d2,d6:SUB.w d2,d6:MOVE.w d6,$66(a2):MOVE.w d6,$60(a2)

 MOVEQ #0,d7:MOVE.w 4(a3),d2:LEA 8(a3),a3

 MOVE.l d3,d5:SWAP d5:TST d5:BNE longun

 TST.w d4:BMI nxp2
 nxp1:!BlitWait:MOVE.l (a3)+,d0:ADD.l d1,d0:MOVE.l d0,$48(a2)
  MOVE.l d0,$54(a2):MOVE.w #$3fa,$40(a2):BTST d7,d4:BNE dop
  MOVE.w #$30a,$40(a2):dop:MOVE.w d3,$58(a2):ADDQ#1,d7:CMP.w d7,d2
  BNE nxp1:RTS

 nxp2:!BlitWait:MOVE.l (a3)+,d0:BTST d7,d4:BEQ missp
  ADD.l d1,d0:MOVE.l d0,$48(a2):MOVE.l d0,$54(a2)
  MOVE.w #$35a,$40(a2):MOVE.w d3,$58(a2)
  missp:ADDQ#1,d7:CMP.w d7,d2:BNE nxp2:nobx:RTS


longun:
  TST.w d4:BMI lnxp2

 lnxp1:!BlitWait:MOVE.l (a3)+,d0:ADD.l d1,d0:MOVE.l d0,$48(a2)
  MOVE.l d0,$54(a2):MOVE.w #$3fa,$40(a2):BTST d7,d4:BNE ldop
  MOVE.w #$30a,$40(a2):ldop:

  MOVEM d3/d5,-(a7):AND #63,d3:SUBQ#1,d5
  llp1:MOVE d3,$58(a2):!BlitWait:DBRA d5,llp1
  MOVEM(a7)+,d3/d5:MOVE.w d3,$58(a2)

  ADDQ#1,d7:CMP.w d7,d2:BNE lnxp1:RTS

 lnxp2:!BlitWait:MOVE.l (a3)+,d0:BTST d7,d4:BEQ lmissp
  ADD.l d1,d0:MOVE.l d0,$48(a2):MOVE.l d0,$54(a2)
  MOVE.w #$35a,$40(a2)

  MOVEM d3/d5,-(a7):AND #63,d3:SUBQ#1,d5
  llp2:MOVE d3,$58(a2):!BlitWait:DBRA d5,llp2
  MOVEM(a7)+,d3/d5:MOVE.w d3,$58(a2)

  lmissp:ADDQ#1,d7:CMP.w d7,d2:BNE lnxp2:lnobx:RTS

;=====================================================================
Macro       cplot                   ;d0d1=xy d3=count d4=col
            CMP.w       58(a3),d1 ;was 2(a3)
            BPL         plip`@
            MULU        (a3),d1
            BMI         plip`@
            MOVE.w      d0,d3
            BMI         plip`@
;            LSR.w       #3,d3
;            CMP.w       (a3),d3
;            BPL         plip`@
            CMP 56(a3),d3:BPL plip`@:LSR#3,d3
            EXT.l       d3
            ADD.l       d3,d1
            AND.w       #7,d0
            EOR.w       #7,d0
            LEA         8(a3),a2
            MOVEQ       #0,d3
            TST.w d4
            BPL         nxpp`@
nxpm`@:     MOVE.l      (a2)+,a0
            BCHG.b      d0,0(a0,d1.l)
            ADDQ        #1,d3
            CMP.b       5(a3),d3
            BNE         nxpm`@
            BRA         plip`@
nxpp`@:     MOVE.l      (a2)+,a0
            BTST        d3,d4
            BNE         doon`@
            BCLR.b      d0,0(a0,d1.l)
            BRA         doony`@
doon`@:     BSET.b      d0,0(a0,d1.l)
doony`@:    ADDQ.w      #1,d3
            CMP.b       5(a3),d3
            BNE         nxpp`@
plip`@:     End         Macro
;----------------------------------------------------------------------
Macro       cplot2
            CMP.w       58(a3),d1 ;was 2(a3)
            BPL         plipo`@
            MULU        (a3),d1
            BMI         plipo`@
            MOVE.w      d0,d3
            BMI         plipo`@
            CMP.w       d4,d3
            BMI         plopo`@
            MOVE.w      d4,d3
            MOVE.w      d4,d0
plopo`@:    LSR.w       #3,d3
            EXT.l       d3
            ADD.l       d3,d1
            AND.w       #7,d0
            EOR.w       #7,d0
            BCHG.b      d0,0(a0,d1.l)
plipo`@:    End         Macro
;==================================================================
calcellipse:MOVE.w      d3,d7       ;d7=y=b
            MULU        d2,d2       ;d2=a*a
            MOVE.l      d2,asq
            ASL.l       #1,d2       ;*2
            MOVE.l      d2,asq2
            MULU        d3,d3       ;d3=b*b
            MOVE.l      d3,bsq
            ASL.l       #1,d3       ;*2
            MOVE.l      d3,bsq2
            MOVE.l      bsq(pc),d5  ;d5=d=bsq
            MOVE.l      asq(pc),d3

        ;    MULU        d7,d3

            MOVE.w      d3,d6
            MULU        d7,d6
            SWAP        d3
            MULU        d7,d3
            SWAP        d3
            CLR.w       d3
            ADD.l       d6,d3

            SUB.l       d3,d5       ;     -asq*b
            MOVE.l      asq(pc),d3
            ASR.l       #2,d3
            ADD.l       d3,d5       ;     -asq/4
            MOVEQ       #0,d0
            MOVE.l      d0,dx
            MOVE.l      asq2(pc),d3

      ;      MULU        d7,d3

            MOVE.w      d3,d6
            MULU        d7,d6
            SWAP        d3
            MULU        d7,d3
            SWAP        d3
            CLR.w       d3
            ADD.l       d6,d3

            MOVE.l      d3,dy
            MOVEQ       #0,d6       ;d6=x=0
            RTS
;----------------------------------------------------------------------
_ellerrs:   CMP.w       #1024,d2
            BCC         err1
            CMP.w       #1024,d3
            BCC         err1
            RTS
err1:       MOVE.l      #etxt,d0
            TRAP        #0
etxt:       Dc.b        "Ellipse out of Bounds",0
_ellerrs1:  CMP.w       #1024,d2
            BCC         err1
            RTS
;---------------------------------------------------------------------
._circle:   MOVE.w      d3,d4
            MOVE.w      d2,d3

._ellipse:  CLR.w       flag

            ADD.w       48(a3),d0
            ADD.w       50(a3),d1

            MOVEM.w     d0-d4,center
            BSR         calcellipse
nxelp:      MOVEM.w     center(pc),d0-d1
            ADD.w       d6,d0
            ADD.w       d7,d1
            !cplot
            MOVEM.w     center(pc),d0-d1
            ADD.w       d6,d0
            SUB.w       d7,d1
            !cplot
            MOVEM.w     center(pc),d0-d1
            SUB.w       d6,d0
            ADD.w       d7,d1
            !cplot
            MOVEM.w     center(pc),d0-d1
            SUB.w       d6,d0
            SUB.w       d7,d1
            !cplot
            MOVEM.l     dx(pc),d0-d3
            TST.w       flag
            BNE         dooly
            CMP.l       d1,d0
            BPL         dxgtdy
            TST.l       d5
            BLE         nodab
            SUB.w       #1,d7
            SUB.l       asq2(pc),d1
            SUB.l       d1,d5
nodab:      ADD.w       #1,d6
            ADD.l       bsq2(pc),d0
            ADD.l       d0,d5
            ADD.l       bsq(pc),d5
            MOVEM.l     d0-d1,dx
            BRA         nxelp
dxgtdy:     NOT.w       flag
            SUB.l       d3,d2
            MOVE.l      d2,d3
            ASL.l       #1,d2
            ADD.l       d3,d2
            ASR.l       #1,d2
            SUB.l       d0,d2
            SUB.l       d1,d2
            ASR.l       #1,d2
            ADD.l       d2,d5
dooly:      TST.w       d7
            BLE         dunel
stillgong:  TST.l       d5
            BPL         dodab
            ADD.w       #1,d6
            ADD.l       bsq2(pc),d0
            ADD.l       d0,d5
dodab:      SUB.w       #1,d7
            SUB.l       asq2(pc),d1
            ADD.l       asq(pc),d5
            SUB.l       d1,d5
            MOVEM.l     d0-d1,dx
            BRA         nxelp
dunel:      RTS
;-----------------------------------------------------------------------
._circlef:  Dc $a001:Dc.l _circlefo
            MOVEM.l     d0-d1,-(a7)
            JSR         _OwnBlitter(a6)
            MOVEM.l     (a7)+,d0-d1
            BSR         _circlefo
            !BlitWait
            JSR         _DisownBlitter(a6)
            RTS

._ellipsef: Dc $a001:Dc.l _ellipsefo
            MOVEM.l     d0-d1,-(a7)
            JSR         _OwnBlitter(a6)
            MOVEM.l     (a7)+,d0-d1
            BSR         _ellipsefo
            !BlitWait
            JSR         _DisownBlitter(a6)
            RTS

_circlefo:  MOVE.w      d3,d4
            MOVE.w      d2,d3

_ellipsefo: BSR         _allocfill
            CLR.w       flag
            MOVEM.w     d0-d4,center
            MOVEM.l     a4-a5,-(a7)
            MOVE.w      d0,d6
            MOVE.w      d1,d7
            MOVEQ       #1,d4
            ADD.w       d4,d2       ;bigger radius
            ADD.w       d4,d3
            SUB.w       d2,d0
            BPL         lrco2
            CLR.w       d0
lrco2:      SUB.w       d3,d1
            BPL         tbco2
            CLR.w       d1
tbco2:      ADD.w       d2,d6
            BMI         pa
            ADD.w       d3,d7
            BMI         pa
            MOVEQ       #4,d4
            LSR.w       d4,d0
            LSR.w       d4,d6
            MOVEM.w     56(a3),d4-d5   ;clip right and bottom
            LSR.w       #4,d4    ;was#1
            CMP.w       d4,d0
            BPL         pa
            CMP.w       d5,d1
            BPL         pa
            CMP.w       d4,d6
            BMI         rboc2
            MOVE.w      d4,d6
            SUB.w       #1,d6
rboc2:      CMP.w       d5,d7
            BMI         bboc2
            MOVE.w      d5,d7
            SUB.w       #1,d7
bboc2:      SUB.w       d7,d1
            NEG.w       d1
            ADDQ        #1,d1
            SUB.w       d6,d0
            NEG.w       d0
            ADDQ        #1,d0
            CMP         #1024,d1
            BPL         bigo
            CMP         #64,d0
            BMI         notbigo
bigo:       MOVE        d1,bigsize
            MOVE        d0,bigsize+2
            MOVEQ       #0,d1
            BRA         domod
notbigo:    ASL.w       #6,d1
            OR.w        d0,d1           ;d1=size
domod:      ASL.w       #1,d0
            SUB.w       (a3),d0         ;d0=mod
            NEG.w       d0
            MULU        (a3),d7
            MOVE.l      d7,a0
            ADD.w       d6,a0
            ADD.w       d6,a0
            MOVE.l      a0,tempadd
            ADD.l       fbloc(pc),a0            ;a0=stpos
            MOVE.l      a0,blitpos
            MOVEM.w     d0-d1,modsize
            !BlitWait                           ;clear rectangle
            MOVE.l      #-1,$44(a2)
            MOVE.l      a0,$54(a2)              ;dpos
            MOVE.w      d0,$66(a2)              ;dmod
            MOVE.l      #$01000002,$40(a2)      ;ctrl
            TST         d1
            BNE         yogo1
            MOVE.l      bigsize(pc),$5c(a2)
            BRA         yogo2
yogo1:      MOVE.w      d1,$58(a2)              ;size
yogo2:      !BlitWait
            MOVEM.w     center(pc),d0-d3
            BSR         calcellipse
            MOVE.l      fbloc(pc),a0
;            MOVE.w      (a3),d4
;            ASL.w       #3,d4
            MOVE        56(a3),d4
            SUB.w       #1,d4
nxelp2:     TST.w       d7
            BEQ         j1e
            MOVEM.w     center(pc),d0-d1
            ADD.w       d6,d0
            ADD.w       d7,d1
            !cplot2
            MOVEM.w     center(pc),d0-d1
            SUB.w       d6,d0
            ADD.w       d7,d1
            !cplot2
j1e:        MOVEM.w     center(pc),d0-d1
            ADD.w       d6,d0
            SUB.w       d7,d1
            !cplot2
            MOVEM.w     center(pc),d0-d1
            SUB.w       d6,d0
            SUB.w       d7,d1
            !cplot2
flop9:      MOVEM.l     dx(pc),d0-d3
            TST.w       flag
            BNE         dooly2
            CMP.l       d1,d0
            BPL         dxgtdy2
            TST.l       d5
            BLE         nodab2
            SUB.w       #1,d7
            SUB.l       asq2(pc),d1
            SUB.l       d1,d5
            ADD.w       #1,d6
            ADD.l       bsq2(pc),d0
            ADD.l       d0,d5
            ADD.l       bsq(pc),d5
            MOVEM.l     d0-d1,dx
            BRA         nxelp2
nodab2:     ADD.w       #1,d6
            ADD.l       bsq2(pc),d0
            ADD.l       d0,d5
            ADD.l       bsq(pc),d5
            MOVEM.l     d0-d1,dx
            BRA         flop9       ;nxelp2
dxgtdy2:    NOT.w       flag
            SUB.l       d3,d2
            MOVE.l      d2,d3
            ASL.l       #1,d2
            ADD.l       d3,d2
            ASR.l       #1,d2
            SUB.l       d0,d2
            SUB.l       d1,d2
            ASR.l       #1,d2
            ADD.l       d2,d5
dooly2:     TST.w       d7
            BEQ         DoFill      ;blahdunel2
stillgong2: TST.l       d5
            BPL         dodab2
            ADD.w       #1,d6
            ADD.l       bsq2(pc),d0
            ADD.l       d0,d5
dodab2:     SUB.w       #1,d7
            SUB.l       asq2(pc),d1
            ADD.l       asq(pc),d5
            SUB.l       d1,d5
            MOVEM.l     d0-d1,dx
            BRA         nxelp2
pa:         MOVEM.l     (a7)+,a4-a5
            RTS
;---------------------------------------------------------------------
dx:         Dc.l        0
dy:         Dc.l        0
asq:        Dc.l        0
bsq:        Dc.l        0
asq2:       Dc.l        0
bsq2:       Dc.l        0
flag:       Dc.w        0
;=======================================================================
.DoFill:    MOVE.l      blitpos(pc),a0
            MOVEM.w     modsize(pc),d0-d1
            !BlitWait                           ;fill rectangle
            MOVE.l      a0,$50(a2)              ;apos
            MOVE.l      a0,$54(a2)              ;dpos
            MOVE.w      d0,$64(a2)              ;amod
            MOVE.w      d0,$66(a2)              ;dmod
            MOVE.l      #$09f0000a,$40(a2)      ;ctrl (12) 0a

            TST         d1
            BNE         yogo3
            MOVE.l      bigsize(pc),$5c(a2)
            BRA         yogo4
yogo3:      MOVE.w      d1,$58(a2)              ;size
yogo4:
;=======================================================================
.DoTransfer:MOVE.l      blitpos(pc),a0
            MOVEM.w     modsize(pc),d0-d1
            MOVEQ       #-1,d3
            ADD.w       4(a3),d3
            LEA         8(a3),a3
            MOVE.l      tempadd(pc),d6
            MOVE.w      color,d4
            BMI         xort
nxplaner:   MOVE.l      (a3)+,a1
            ADD.l       d6,a1
            !BlitWait                           ;move rectangle
            MOVE.l      a0,$50(a2)              ;apos
            MOVE.l      a1,$4c(a2)              ;bpos
            MOVE.l      a1,$54(a2)              ;dpos
            MOVE.w      d0,$64(a2)              ;amod
            MOVE.w      d0,$62(a2)              ;bmod
            MOVE.w      d0,$66(a2)              ;dmod
            MOVE.l      #$0dfc0002,$40(a2)
            LSR.w       #1,d4
            BCS         notcolb0
            MOVE.w      #$0d0c,$40(a2)

notcolb0:   TST         d1
            BNE         yogo5
            MOVE.l      bigsize(pc),$5c(a2)
            BRA         yogo6
yogo5:      MOVE.w      d1,$58(a2)              ;size
yogo6:
            DBRA        d3,nxplaner
            MOVEM.l     (a7)+,a4-a5
            RTS
xort:       MOVE.l      (a3)+,a1
            ADD.l       d6,a1
            !BlitWait                           ;move rectangle
            MOVE.l      a0,$50(a2)              ;apos
            MOVE.l      a1,$4c(a2)              ;bpos
            MOVE.l      a1,$54(a2)              ;dpos
            MOVE.w      d0,$64(a2)              ;amod
            MOVE.w      d0,$62(a2)              ;bmod
            MOVE.w      d0,$66(a2)              ;dmod
            MOVE.l      #$0d3c0002,$40(a2)

            TST         d1
            BNE         yogo7
            MOVE.l      bigsize(pc),$5c(a2)
            BRA         yogo8
yogo7:      MOVE.w      d1,$58(a2)              ;size
yogo8:
            DBRA        d3,xort
            MOVEM.l     (a7)+,a4-a5
            RTS
;===============================================================
modsize:    Dc.w        0,0
bigsize:    Dc.l        0
tempadd:    Dc.l        0
blitpos:    Dc.l        0
center:     Dc.w        0,0,0,0
color:      Dc.w        1
cpos:       Dc.w        0,0
;----------------------------------------------------------------

;NEWTYPE.Bitmap
;_ebwidth[0]       ;00: for compatability.
;_linemod.w        ;00: value to get from one scanline to next.
;_height.w         ;02: currently pixel height - but open to commodore 'enhancement'.
;_depth.w          ;04: number of bitplanes.
;_pad.b[2]         ;06: nothing.
;_data.l[8]        ;08: actual bitplane pointers.
;_pad2.b[12]       ;40: zilch.
;_flags.w          ;52: 0=normal bitmap, <0=interleaved.
;_bitplanemod.w    ;54: value to get from one bitplane to next. MAY BE 0!
;_xclip.w          ;56: pixel width for render clipping
;_yclip.w          ;58: pixel height for render clipping
;_cclip.w          ;60: number of colours available on bitmap ( = 2^_depth)
;_isreal.w         ;62: 0=no bitmap here, <0=blitz created bitmap, >0=borrowed
;End NEWTYPE       ;64: sizeof

._doclipblitmode:
  MOVE d0,bcon0:RTS

bcon0:Dc $fca


._doclipblitx:Dc $a001:Dc.l b_docblitx
  MOVEM.l a1/d1,-(a7):JSR _OwnBlitter(a6):MOVEM.l (a7)+,d1/a1
  BSR b_docblitx:BTST #6,$002(a1):'bwait:BTST #6,$002(a1):BNE 'bwait
  JMP _DisownBlitter(a6)

b_docblitx:;a3=shape#,a2=used bitmap,a1=chip base,d1=x,d2=y
;
;a3=Shape#,a2=used BitMap,a1=chip,d1=x,d2=y,d3=planeonoff
;
MOVE d3,-(a7):BSR b_docblit:MOVE (a7)+,d3:
;
TST d7:BEQ 'done
;
MOVE 4(a3),d7
;
'loop:CMP 4(a2),d7:BCC 'done
;
MOVE #$b0a,d5:LSR #1,d3:BCC 'planeoff:MOVE #$bfa,d5
'planeoff
OR d4,d5:MOVE.l (a0)+,d1:ADD.l d2,d1
BTST #6,$002(a1)
'bwait:BTST #6,$002(a1):BNE 'bwait
MOVE d5,$040(a1):MOVE.l d0,$050(a1)
MOVE.l d1,$048(a1):MOVE.l d1,$054(a1)
MOVE d6,$058(a1):ADDQ #1,d7:BRA 'loop
'done:RTS

._doclipblit:Dc $a001:Dc.l b_docblit
  MOVEM.l a1/d1,-(a7):JSR _OwnBlitter(a6):MOVEM.l (a7)+,d1/a1
  BSR b_docblit:BTST #6,$002(a1):'bwait:BTST #6,$002(a1):BNE 'bwait
  JMP _DisownBlitter(a6)

b_docblit:;a3=shape#,a2=used bitmap,a1=chip base,d1=x,d2=y

  SUB 10(a3),d1:SUB 12(a3),d2                      ;first, set up mods.
  CMP 56(a2),d1:BPL flopme
  CMP 58(a2),d2:BPL flopme

  BTST #6,$002(a1):'bwait:BTST #6,$002(a1):BNE 'bwait
  MOVEM.l d6-d7,$060(a1)
  ;
  MOVE 8(a3),d6:MOVEQ#0,d3:MOVE.w d2,d4            ;size d3=shape+
  BPL bolo:NEG.w d2:CMP 2(a3),d2:BPL flopme:MOVE.w d2,d3:MULU 6(a3),d3
  ASL.w #6,d2:SUB.w d2,d6:BCS flopme:CLR.w d2
  bolo:ADD.w 2(a3),d4:BMI flopme:SUB 58(a2),d4:BMI abuv  ;was 2(a2)
  ASL.w #6,d4:SUB.w d4,d6:BCS flopme
  abuv:

  MOVE.l #$ffff0000,$044(a1)

  MOVEQ #-2,d5:MOVE (a2),d7:SUB 6(a3),d7:ADD d5,d7  ;mods

  TST.w d1:BPL nolo:NEG d1:CMP (a3),d1:BPL flopme:NEG d1
  g1:ADD.w #16,d1:BPL g2:ADDQ #2,d5:ADDQ #2,d7
  SUBQ#1,d6:ADDQ #2,d3:BRA g1:g2:MOVEQ#-1,d0:ASL.w d1,d0
  NOT d0:MOVE.w d0,$44(a1):SUB #16,d1

nolo:

  MOVE.w d1,d0:ASR #4,d0:ADD.w d0,d0:ADD.w 6(a3),d0
  ADD.w #2,d0:MOVE 56(a2),d4:LSR#3,d4:SUB.w d4,d0:BLE noro:ADD.w d0,d5
;:SUB.w (a2),d0:BLE noro:ADD.w d0,d5
  ADD.w d0,d7:LSR #1,d0:SUB.w d0,d6

  MOVE.w d1,d4:AND.w #15,d4:MOVE.w #-1,d0:ASL.w d4,d0:MOVE.w d0,$46(a1)

noro:
  MOVE.w d5,$62(a1):MOVE.w d5,$64(a1)
  MOVE.w d7,$60(a1):MOVE.w d7,$66(a1)

  MOVE d1,d0:AND #15,d0:ROR #4,d0:MOVE d0,d4
  MOVE d0,$042(a1):OR bcon0(pc),d0:MOVE d0,$040(a1)

  MOVE.l d3,d0:ADD.l 18(a3),d0:ADD.l 14(a3),d3

  MULS (a2),d2:ASR #4,d1:EXT.l d1:ADD.l d1,d2:ADD.l d1,d2:LEA 8(a2),a0

  MOVE.w 2(a3),d5:MULU 6(a3),d5:MOVE 4(a3),d7:BEQ 'done
  SUBQ #1,d7:BRA 'doblit

'blitloop:BTST #6,$002(a1):'bwait2:BTST #6,$002(a1):BNE 'bwait2

'doblit:MOVE.l d0,$050(a1):MOVE.l d3,$04c(a1):ADD.l d5,d3
  MOVE.l (a0)+,d1:ADD.l d2,d1
  MOVE.l d1,$048(a1):MOVE.l d1,$054(a1)
  MOVE d6,$058(a1):DBF d7,'blitloop:RTS

'done:flopme:MOVEQ#0,d7:RTS


_cbchk:
  TST.w(a3):BEQ err2:RTS
  err2:MOVE.l#mess1,d0:TRAP#0:mess1:Dc.b "SHAPE UNKNOWNST TO ME",0
