; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = "dhandlerlib"
; CreateIcon      = 0
; Residents       = "libmacs.res,blitzoffs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 14
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 5
; CursorColumn    = 14
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 1
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
;OK, the Blitz DHANDLERLIB
;
; 08.05.2016 added information for the ltable ALibjsr  tomsmart1
;
;v1.1 - added popinput and popoutput!
#dhandlerlib = 1

!libheader{#dhandlerlib,init,0,finit,0}

 init
  !nullsub{codeinit ,0,0,#doslib,#la6,#graphicslib,#ld6}

 finit
  !nullsub{codefinit,0,0,#doslib,#la6,#graphicslib,#ld6}

!libfin

;********************** CODE BELOW ***************************

taskstack
   Dc.l     $000493e0
handler
   Dc.l     0
segadd
   Dc.l     0
progadd
   Dc.l     0
mysegadd
   Dc.l     0
taskdone
   Dc.w     0
mysegname
   Dc.b     "Blitz ][ Debug Proc",0
   Even
dosb
   Dc.l     0


mystart
   Dc.l     0
;
   MOVE.l   4,a0
   MOVE.l   276(a0),a0

 off_1
   MOVE.l   #0,88(a0)  ;ltable

 off_2
   MOVE.l   0,a0       ;progadd

   JSR      (a0)
   ST       taskdone
RTS
;
mystart_f


ltable
;
   Dc.l     l0
   Dc.l     l1
   Dc.l     l2
   Dc.l     l3
   Dc.l     l4
   Dc.l     l5
   Dc.l     l6
   Dc.l     l7
   Dc.l     l8
;


l0
   ALibJsr  $d500            ;debuglib  donewmode
RTS


l1
   ALibJsr  $d501            ;debuglib  dostop
RTS


l2
   MOVE.l   a0,handler
   ALibJsr  $d502            ;debuglib  dosethandler
RTS


l3
   ALibJsr  $d503            ;debuglib  dodetoke
RTS


l4
   ALibJsr  $d504            ;debuglib  doevaluate
RTS


l5
   ALibJsr  $d505            ;debuglib  doexecute
RTS


l6
   ALibJsr  $d506            ;debuglib  doquit
RTS


l7
   ALibJsr  $d507            ;debuglib  dofindoff
RTS


l8
   ALibJsr  $d508            ;debuglib  doskip
RTS



.codeinit
   ;
   CLR.w    taskdone
   CLR.l    handler
   MOVE.l   d0,segadd
   BEQ      'done

   LSL.l    #2,d0
   ADDQ.l   #4,d0
   MOVE.l   d0,progadd
   ;
   MOVEQ    #mystart_f-mystart,d0
   MOVEQ    #1,d1
   ALibJsr  $c002
   MOVE.l   d0,mysegadd
   ;
   LEA      mystart(pc),a0
   MOVEA.l  d0,a1

  'loop
   MOVE.w   (a0)+,(a1)+
   CMPA.l   #mystart_f,a0
   BCS      'loop
   ;
   MOVEA.l  d0,a1
   MOVE.l   #ltable ,off_1-mystart+2(a1)
   MOVE.l   #progadd,off_2-mystart+2(a1)
   MOVE.l   #mysegname,d1
   MOVEQ    #0,d2

   MOVE.l   d0,d3
   LSR.l    #2,d3
   MOVE.l   taskstack(pc),d4

   JSR      _CreateProc(a6) ;dos.library

   MOVE.l   a6,dosb
   ;
   ;EXG      d6,a6

  'wat
   TST.l    handler
   BNE      'skip

   MOVEQ    #1,d1

   JSR      _Delay(a6)
   ;JSR     _WaitTOF(a6)
 BRA      'wat

  'skip
   ;EXG      d6,a6
   ;
   MOVE.w   #$8035,d0
   MOVE.l   #check_c,d1
   ALibJsr  $c100  ;install vblank interrupt
   ;
  'done
RTS


.check_c
   MOVEQ    #$63,d0
   ;ALibJsr #blitzkeyslib LSL 7+2
   ALibJsr  #brexxlib LSL 7+16  ;system friendly rawkeystat
   BEQ      'done

   MOVEQ    #$64,d0
   ;ALibJsr #blitzkeyslib LSL 7+2
   ALibJsr  #brexxlib LSL 7+16  ;system friendly rawkeystat
   BEQ      'done

   MOVEQ    #$33,d0
   ;ALibJsr #blitzkeyslib LSL 7+2
   ALibJsr  #brexxlib LSL 7+16  ;system friendly rawkeystat
   BEQ      'done
   ;
   TST.w    laststop
   BEQ      'bye
   CLR.w    laststop
   ALibJsr  $d501
   MOVEQ    #0,d0
 RTS
   ;
  'done
   ST       laststop
   MOVEQ    #0,d0

  'bye
RTS


laststop
   Dc.w     0


.codefinit
   MOVE.l   segadd(pc),d1
   BEQ      'done
   ;
   MOVE.w   #$8035,d0
   ALibJsr  $c101
   ;
   MOVEM.l  a5-a6,-(a7)

   MOVEA.l  handler(pc),a0
   MOVEA.l  $14(a0),a0
   JSR      (a0)   ;tell him to stop!

   MOVEM.l  (a7)+,a5-a6
   ;
   ;wait for task to be removed!
   ;
   ;EXG      a6,d6
   MOVEA.l  dosb,a6

  'loop
   TST.w    taskdone
   BNE      'skip

   MOVEQ    #1,d1
   JSR      _Delay(a6)
 BRA      'loop

  'skip
   ;EXG      a6,d6
   ;
   MOVEA.l  mysegadd(pc),a1
   MOVEQ    #mystart_f-mystart,d0
   ALibJsr  $c003
   ;
  'done
RTS
