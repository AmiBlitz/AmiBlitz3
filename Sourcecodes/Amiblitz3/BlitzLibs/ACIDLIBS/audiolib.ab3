; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "blitzlibs:patchlibs"
; ExeFile         = "audiolib.obj"
; CreateIcon      = 0
; Residents       = "blitzlibs:libmacs.res,blitzlibs:blitzoffs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 81
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
;
;  OK, the AUDIOLIB!
;

;bum7 added cludgesound

!libheader{#audiolib,init,0,finit,errors}

!astatement
!args{7,2}
!libs
!subs{dodplay2,dpchk,0}
!repargs{2,1,7,2,1}
!libs
!subs{dodplay,dpchk,0}  ;*****
!name{"DiskPlay","Filename$,Channelmask[,Vol1[,Vol2...]]"}

!astatement
!args{3}
!libs
!subs{dodiskbuff,0,0}   ;*****
!name{"DiskBuffer","Bufferlen"}

!astatement
!args{2,7}
!libs{#audiolib,$1380}
!subs{doloadsound,0,0}  ;*****
!name{"LoadSound","Sound#,Filename$"}

!astatement
!args{2,2}
!libs{#audiolib,$1380}
!subs{dosound2,sndchk,0}
!repargs{2,1,2,2,2}
!libs{#audiolib,$1380}
!subs{dosound,sndchk,0} ;*****
!name{"Sound","Sound#,Channelmask[,Vol1[,Vol2...]]",_toke}

!astatement
!repargs{1,1,2,2}
!libs
!subs{dovolume,vchk,0}  ;*****
!name{"Volume","Channelmask,Vol1[,Vol2...]"}

!astatement
!args{2}
!libs
!subs{dofilter,0,0}
!name{"Filter","On|Off"}    ;*****

!astatement
!args{2,2}
!libs{#audiolib,$1380}
!subs{dosoundl2,sndchk,0}
!repargs{2,1,2,2,2}
!libs{#audiolib,$1380}
!subs{dosoundl,sndchk,0}    ;*****
!name{"LoopSound","Sound#,Channelmask[,Vol1[,Vol2...]]"}

!astatement
;
!args{2,3}
!libs{#audiolib,$1380}
!subs{doisound2,ischk1,0}
;
!args{2,3,2}
!libs{#audiolib,$1380}
!subs{doisound3,ischk1,0}
;
!args{2,3,2,3}
!libs{#audiolib,$1380}
!subs{doisound,ischk2,0}    ;*****
;
!name{"InitSound","Sound#,Length[,Period[,Repeat]]"}

!astatement
!args{2,3,1}
!libs{#audiolib,$1380}
!subs{dosdata,sdatachk,0}   ;*****
!name{"SoundData","Sound#,Offset,Data"}

!afunction{2}
!args{2,3}
!libs{#audiolib,$1380}
!subs{dopsound,sdatachk,0}
!name{"PeekSound","(Sound#,Offset)"}

!astatement
!args{#word,#long}
!libs{#audiolib,$1380}
!subs{_cludgesound,0,0}
!name{"DecodeSound","Sound#,MemoryLocation"}

!astatement
!args{#word,#word}
!libs{#audiolib,$1380}
!subs{_setperiod,sndchk2,0}
!name{"SetPeriod","Sound#,Period"}

init:!nullsub{codeinit,0,0}

finit:!nullsub{codefinit,0,0}

_load:!nullsub{0,0,0}

_save:!nullsub{0,0,0}

_use:!nullsub{0,0,0}

_free:!nullsub{dofreesound,0,0}

!libfin{_toke,_load,_save,_use,_free,10,4}

;
;A Sound block looks like this:
;
;00.l : pointer To Data
;04.w : period
;06.w : length
;08.l : pointer to repeat pos.
;12.w : repeat length
;14.w : priority - higher number is more important!
;
;    -16-

;OK, it looks like we're gonna have to do a messy
;vblank/sndint setup.
;
;this is how data for each chanel works:

;00.w : action (bits get cleared when action taken)
;
;       B0 : turn off DMA please
;       B1 : start new sound please

;02.w : status
;
;       02 : Sound started, no Int yet
;       01 : Sound started and first int occured
;       00 : Sound started and second int occured
;
;04.w : flags - 00 = play once, <00 = loop sound
;
;06.l : data - current
;10.w : length    "
;12.w : period    "
;14.w : volume    "
;
;16.l : data - for new sound
;20.w : length       "
;22.w : period       "
;24.w : volume       "
;
;26.w : priority
;
;28.l : more...

;    -32-

;********************* CODE BELOW *********************

dbufflen:Dc.l 1024  ;length of disk buffer.
dlen:Dc.l 0         ;length of sample!
dbuffat:Dc.l 0      ;buffer
dbuffend:Dc.l 0     ;end of buffer
chzero:Dc.l 0   ;a zero word in chipmem


CELSE
chandata:Ds.b 32*4

l3_int   ;vertical blank interupt.
LEA chandata(pc),a0:MOVE.l #$dff0a0,a1
MOVEQ #3,d0:MOVEQ #1,d1
;
'loop:MOVE (a0),d2:BEQ 'skip
LSR #1,d2:BCC 'skip2
;
;turn off DMA for the voice...
;
MOVE d1,$dff096:BCLR #0,1(a0):BRA 'skip
;
'skip2
LSR #1,d2:BCC 'skip3
;
;start new data...
;
MOVE.l 16(a0),6(a0):MOVE.l 20(a0),10(a0):MOVE 24(a0),14(a0)
MOVE.l 16(a0),(a1):MOVE.l 20(a0),4(a1):MOVE 24(a0),8(a1)
;
BCLR #1,1(a0):BRA 'skip
;
'skip3
;
'skip:LEA 30(a0),a0:LEA 16(a1),a1:DBF d0,'loop
RTS
CELSE

.dofilter:TST d0:BEQ 'fof:BSET #1,$bfe001:RTS
'fof:BCLR #1,$bfe001:RTS

.dodiskbuff:MOVE.l d0,dbufflen:RTS

.dovolume
MOVE.l #$dff0a0,a0:MOVEQ #3,d1
'loop:LSR #1,d0:BCC 'skip
MOVE -(a2),8(a0)
'skip:LEA 16(a0),a0:DBF d1,'loop:RTS

.doopensound
;
;return period in d1
;and length in bytes in d0
;also, repeat offset in d6
;repeat len (in bytes) in d5
;
ALibJsr #iffiolib LSL 7+1:BNE err1:MOVE.l #"VHDR",d0
ALibJsr #iffiolib LSL 7+6:BNE err2
ALibJsr #iffiolib LSL 7+5:BNE err3:MOVE.l d0,d6 ;repeat start.
ALibJsr #iffiolib LSL 7+5:BNE err3:MOVE.l d0,d5 ;repeat length.
MOVEQ #4,d0:ALibJsr #iffiolib LSL 7+7:BNE err3
ALibJsr #iffiolib LSL 7+4:BNE err3
MOVE.l #3579440,d1:DIVU d0,d1:;period...
MOVE.l #"BODY",d0:ALibJsr #iffiolib LSL 7+6:BNE err3:RTS

.doloadsound
;
;in which pooh loads an audio sample for later playback
;
;loadsound sound#,filename
;
MOVE.l d1,-(a7):BSR dofreesound:MOVE.l (a7)+,a0
BSR doopensound
MOVE d1,4(a3):CMP.l #65536*2,d0:BCC err4
MOVE.l d0,-(a7):MOVEQ #2,d1:ALibJsr $c002
MOVE.l d0,(a3):MOVE.l d0,a0:MOVE.l (a7),d0
ALibJsr #iffiolib LSL 7+8
MOVE.l (a7)+,d0:LSR.l #1,d0:MOVE d0,6(a3)
MOVE.l (a3),8(a3):ADD.l d6,8(a3)
LSR.l #1,d5:MOVE d5,12(a3):ALibJsr #iffiolib LSL 7+2
RTS

._cludgesound:
  MOVE.l d1,-(a7):BSR dofreesound:MOVE.l (a7)+,a0
  CMP.l #"FORM",(a0)+:BNE err1:MOVE.l (a0)+,d0:LEA 0(a0,d0.l),a1 ;a1=end
  CMP.l #"8SVX",(a0)+:BNE err1
wv:MOVEM.l(a0)+,d0-d1:CMP.l #"VHDR",d0:BEQ fv:ADD.l d1,a0:CMP.l a0,a1:BLE err1:BRA wv
fv:MOVEM.l(a0),d5-d6:MOVE.l#3579440,d7:DIVU12(a0),d7:ADD.ld1,a0
wb:MOVEM.l(a0)+,d0-d1:CMP.l #"BODY",d0:BEQ fb:ADD.l d1,a0:CMP.l a0,a1:BLE err1:BRA wb
fb:CMP.l #65536*2,d1:BCC err4:MOVE.l d1,d0:LSR.l#1,d1:MOVE d1,6(a3)
   LSR.l #1,d6:MOVE d6,12(a3):MOVE d7,4(a3)
   MOVE.l a0,d1:AND.l#$1fffff,d1:CMP.l d1,a0:BEQ inchip
infast:
   MOVEQ#2,d1:ALibJsr $c002:MOVE.l d0,(a3):MOVE.l d0,a1
   ADD.l d5,d0:MOVE.l d0,8(a3):MOVE 6(a3),d1:SUBQ#1,d1
   copsnd:MOVE (a0)+,(a1)+:DBRA d1,copsnd:RTS
inchip:
   MOVE.l a0,(a3):ADD.l d5,a0:MOVE.l a0,8(a3):MOVE #"cL",14(a3):RTS

._setperiod:TST.l (a3):BEQ err5:MOVE d1,4(a3):RTS

.dochansoff
;
;d1=chanell mask - return d2, int bits.
;
dochansoff2
;
MOVE d1,$dff096:MOVE.b $dff006,d2:MOVEQ #11,d0 ;skip 12 scan lines simon was here
;
'loop
MOVE.b $dff006,d3:CMP.b d3,d2:BEQ 'loop:MOVE.b d3,d2:DBF d0,'loop
;
MOVE d1,d2:LSL #7,d2:RTS

.dosoundl2:MOVEQ #0,d7
;
.dosoundl:MOVEQ #-1,d6:BRA dosnd

.dosound2:MOVEQ #0,d7
;
.dosound:;a3=sound, d1=chanel mask, -(a2)=vols, d7=#vols.
;
MOVEQ #0,d6 ;loopit flags
;
dosnd:BSR dochansoff
MOVE d1,d3:MOVEQ #3,d0:MOVE.l #$dff0a0,a0
'loop:LSR #1,d3:BCC 'skip
MOVE #0,8(a0)
MOVE.l (a3),(a0):MOVE 4(a3),6(a0):MOVE 6(a3),4(a0)
MOVE #64,8(a0):SUBQ #1,d7:BMI 'skip:MOVE -(a2),8(a0)
'skip:LEA 16(a0),a0:DBF d0,'loop
;
;what the f**ks happening here!
;
BSET #15,d1 ;:MOVE d2,$dff09c
MOVE d1,$dff096
;
;this should bloody work!
;
;'intwait:MOVE $dff01e,d0:AND d2,d0:CMP d2,d0:BNE 'intwait
;
;OK, sound has started. Do we want to loop it?
;
MOVE.b $dff006,d2:MOVEQ #11,d4               ;simon was here!!!
'wss:MOVE.b $dff006,d3:CMP.b d3,d2:BEQ 'wss
MOVE.b d3,d2:DBF d4,'wss
;
MOVEQ #3,d0:MOVE.l #$dff0a0,a0
;
MOVE.l chzero(pc),d2:MOVEQ #1,d3
TST d6:BEQ 'lloop
;
MOVE.l 8(a3),d2:MOVE 12(a3),d3
;
'lloop:LSR #1,d1:BCC 'skipl
MOVE d3,4(a0):MOVE.l d2,(a0)
'skipl:LEA 16(a0),a0:DBF d0,'lloop
;
RTS

.dosdata  ;set sound data.
;
;a3=sound, d1.l=offset, d2.b=data
;
Dc $a000,'f-'s
's:MOVE.l (a3),a0:MOVE.b d2,0(a0,d1.l)
'f:RTS

.dopsound ;peek sound data.
;
Dc $a000,'f-'s
's:MOVE.l (a3),a0:MOVE.b 0(a0,d1.l),d0:EXT d0
'f:RTS

.doisound2:MOVE #428,d2
;
.doisound3:MOVEQ #0,d3
;
.doisound:  ;init a sound for user data.
;
;a3=sound, d1.l=len, d2.w=period, d3.l=repeat.
;
MOVE.l d1,-(a7):BSR dofreesound:MOVE.l (a7)+,d1
;
MOVE.l d1,d4:LSR.l #1,d4:MOVE d2,4(a3):MOVE d4,6(a3)
MOVE.l d3,8(a3):MOVE.l d1,d4:SUB.l d3,d4
LSR.l #1,d4:MOVE d4,12(a3)
;
MOVE.l d1,d0:MOVE.l #$10002,d1:ALibJsr $c002
MOVE.l d0,(a3):ADD.l d0,8(a3)
RTS

;00.l : pointer To Data
;04.w : period
;06.w : length
;08.l : pointer to repeat pos.
;12.w : repeat length

.dofreesound
;
MOVE.l (a3),d0:BEQ 'done:CLR.l (a3):CMP #"cL",14(a3):BEQ 'done
MOVE.l d0,a1:MOVEQ #0,d0:MOVE 6(a3),d0:LSL.l #1,d0:ALibJsr $c003
'done:RTS

.codeinit:MOVE #$f,$dff096              ;audio DMA OFF
MOVE #$780,$dff09a                      ;and interupts
MOVE.l #1024,dbufflen
MOVEQ #2,d0:MOVEQ #2,d1:ALibJsr $c002:MOVE.l d0,chzero
MOVE.l d0,a0:CLR (a0):RTS

.codefinit:MOVE #$f,$dff096
MOVE.l #$dff0a8,a0:MOVEQ #3,d0
'loop:CLR (a0):LEA 16(a0),a0:DBF d0,'loop
RTS

.dodplay2:MOVEQ #0,d7

.dodplay:;d0=name, d1=chanelmask, d7=#vols.
;
MOVE d1,-(a7):MOVE.l d0,d2
MOVE.l dbufflen(pc),d0:LSL.l #1,d0:MOVEQ #2,d1
ALibJsr $c002:MOVE.l d0,dbuffat:MOVE.l d0,a3
ADD.l dbufflen(pc),d0:ADD.l dbufflen(pc),d0:MOVE.l d0,dbuffend
;
MOVE.l d2,a0:BSR doopensound
MOVE.l d0,dlen:MOVE d1,d4   ;period
MOVE (a7)+,d1:BSR dochansoff:MOVE d1,d6:MOVE d2,d5
;
;OK, d6=dma bits, d5=int bits, d4=period
;
MOVEQ #3,d0:MOVE.l #$dff0a0,a0:SUBQ #4,a2:;drop string length.
'loop0:LSR #1,d1:BCC 'skip
MOVE #0,8(a0):MOVE #0,10(a0):MOVE d4,6(a0)
MOVE #64,8(a0):TST d7:BEQ 'skip:SUBQ #1,d7:MOVE -(a2),8(a0)
'skip:LEA 16(a0),a0:DBF d0,'loop0
BSR loadbuff:BSET #15,d6:MOVE d5,$dff09c:MOVE d6,$dff096
BSR intwait
;
'loop:BSR loadbuff:BSR intwait:TST d0:BEQ 'loop
;
BCLR #15,d6:MOVE d6,$dff096
MOVE.l dbuffat(pc),a1:MOVE.l dbufflen(pc),d0:LSL.l #1,d0
ALibJsr $c003:ALibJsr #iffiolib LSL 7+2:RTS

intwait:;wait for a sound interupt
MOVE $dff01e,d1:AND d5,d1:CMP d5,d1:BNE intwait:MOVE d5,$dff09c
RTS

loadbuff:;read next buffer - return ne if none left
;
;else, set up audloc and audlen, and wait for int.
;
MOVE.l dlen(pc),d0:BEQ 'fail2:BMI 'fail
CMP.l dbufflen(pc),d0:BLS 'skip:MOVE.l dbufflen(pc),d0
'skip:MOVE d0,d1:LSR #1,d1
;
MOVE.l #$dff0a0,a0:MOVEQ #3,d2:MOVE d6,d3
'loop:LSR #1,d3:BCC 'skip0
MOVE.l a3,(a0):MOVE d1,4(a0)
'skip0:LEA 16(a0),a0:DBF d2,'loop
;
MOVE.l a3,a0:ALibJsr #iffiolib LSL 7+8
;
MOVE.l dbufflen(pc),d0:SUB.l d0,dlen
ADD.l d0,a3:CMP.l dbuffend(pc),a3:BCS 'skip2
MOVE.l dbuffat(pc),a3
'skip2:MOVEQ #0,d0:RTS
'fail:MOVEQ #-1,d0
'fail2:RTS

err1:MOVE.l #mess1,d0:TRAP #0
err2:MOVE.l #mess2,d0:TRAP #0
err3:MOVE.l #mess3,d0:TRAP #0
err4:MOVE.l #mess4,d0:TRAP #0

;******************** ERRORS BELOW *********************

errors
err5:MOVE.l #mess5,d0:TRAP #0
err6:MOVE.l #mess6,d0:TRAP #0
err7:MOVE.l #mess7,d0:TRAP #0
err8:MOVE.l #mess8,d0:TRAP #0
err9:MOVE.l #mess9,d0:TRAP #0
erra:MOVE.l #messa,d0:TRAP #0

mess1:Dc.b "Illegal Sound file",0
mess2:Dc.b "Can't Find VHDR",0
mess3:Dc.b "Error Reading File",0
mess4:Dc.b "Sound too long",0
mess5:Dc.b "Uninitialized Sound",0
mess6:Dc.b "Illegal Chanel Mask",0
mess7:Dc.b "Sound Length MUST be even",0
mess8:Dc.b "Repeat MUST be less than Length",0
mess9:Dc.b "Data offset too large",0
messa:Dc.b "Repeat offset MUST be even",0
Even
sndchk2:TST.l (a3):BEQ err5
;
vchk2:CMP #15,d0:BHI err6:RTS

ischk12:CMP.l #65536*2,d1:BCC err4
BTST #0,d1:BNE err7:RTS

sndchk:TST.l (a3):BEQ err5
;
dpchk:CMP #15,d1:BHI err6:RTS

vchk:CMP #15,d0:BHI err6:RTS

ischk1:CMP.l #65536*2,d1:BCC err4
BTST #0,d1:BNE err7:RTS

ischk2:BSR ischk1:BTST #0,d3:BNE erra
CMP.l d1,d3:BCC err8:RTS

sdatachk:TST.l (a3):BEQ err5
MOVEQ #0,d0:MOVE 6(a3),d0:ADD.l d0,d0
CMP.l d0,d1:BCC err9:RTS

