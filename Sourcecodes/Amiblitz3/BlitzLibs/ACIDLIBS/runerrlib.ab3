; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "blitz2:Decompiled"
; ExeFile         = "runerrlib.obj"
; CreateIcon      = 0
; Residents       = "blitzlibs:libmacs.res,blitzlibs:blitzoffs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 236
; CursorColumn    = 43
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 145
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max Window      = 5
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 100
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;
; heavy trap level shit
;

;this has getvbr and getcpu commands added

!syslibheader{#runerrlib,$c300,$c321,init,0,finit,0}

!nullsub{finalscheck,0,0} ;00
!nullsub{0,0,0}           ;01
!nullsub{0,0,0}           ;02
!nullsub{0,0,0}           ;03
!nullsub{0,0,0}           ;04
!nullsub{retchk,0,0}      ;05
!nullsub{nextchkw,0,0}    ;06
!nullsub{nextchkl,0,0}    ;07
!nullsub{stackchk,0,0}    ;08
!nullsub{arrerr,0,0}      ;09
!nullsub{maxerr,0,0}      ;0a
!nullsub{gosuper,0,0}     ;0b
!nullsub{gouser,0,0}      ;0c
!nullsub{0,0,0}           ;0d
!nullsub{sarraychk,0,0}   ;0e
!nullsub{aarraychk,0,0}   ;0f
!nullsub{datachk,0,0}     ;10
!nullsub{bmodechk,0,0}    ;11
!nullsub{amodechk,0,0}    ;12
!nullsub{casechkw,0,0}    ;13
!nullsub{casechkl,0,0}    ;14
!nullsub{currentchk,0,0}  ;15
;
!nullsub{ltobover,0,0}    ;16
!nullsub{wtobover,0,0}    ;17
!nullsub{ltowover,0,0}    ;18
!nullsub{qtobover,0,0}    ;19
;
!nullsub{ftobover,0,0,#ffplib,#la6} ;1a
!nullsub{ftowover,0,0,#ffplib,#la6} ;1b
!nullsub{ftolover,0,0,#ffplib,#la6} ;1c
;
!nullsub{getvbr,0,0}  ;$c31d
!nullsub{getcpu,0,0}  ;$c31e
!nullsub{updatestack,0,0}  ;$c31f
!nullsub{checkpointer,0,0}  ;$c320
init:!nullsub{codeinit,0,0}

finit:!nullsub{codefinit,0,0}

!libfin

;******************* CODE BELOW *********************

cpu_:       Dc      0
vbr_:       Dc.l    0
ostack:     Dc.l    0   ;stack should meet up with this value at end of prog!
supernest:  Dc      0
maxstack:   Dc.l    0
oldtrap:    Dc.l    0
    ;
trapmesss:Dc.l trapn2,trapn3,trapn4,trapn5,trapn6,trapn7
Dc.l trapn8,trapn9,trapn10,trapn11,trapn12,trapn13

;********************** GURUS ***********************

trapn2:Dc.b "GURU! - Bus Error",0
trapn3:Dc.b "GURU! - Address Error",0
trapn4:Dc.b "GURU! - ILLEGAL Instruction",0
trapn5:Dc.b "GURU! - Division by Zero",0
trapn6:Dc.b "GURU! - CHK Instruction",0
trapn7:Dc.b "GURU! - TRAPV Instruction",0
trapn8:Dc.b "GURU! - Privilege Violation",0
trapn9:Dc.b "GURU! - Trace",0
trapn10:Dc.b "GURU! - Line 1010 Emulator",0
trapn11:Dc.b "GURU! - Line 1111 Emulator",0
trapn12:Dc.b "TRAP! - Trap Instruction",0
trapn13:Dc.b "GURU! - No Idea",0
Even

;********************* MESSAGES *********************

returnmess:  Dc.b    "Return without Gosub",0
nextmess:    Dc.b    "Next without For",0
stackmess:   Dc.b    "Stack Error on Exit - Unterminated Gosub or For?",0
nostackmess: Dc.b    "Out of Stack Space",0
arrmess:     Dc.b    "Array Subscript out of Range",0
maxmess:     Dc.b    "Value out of Maximum Range",0
;ferr1:       Dc.b    "ILLEGAL Quantity Error",0
sarraymess:  Dc.b    "Array Dimension out of Range",0
datamess:    Dc.b    "Data type mismatch",0
bmodemess:   Dc.b    "Command only available in BLITZ mode!",0
amodemess:   Dc.b    "Command only available in AMIGA mode!",0
casemess:    Dc.b    "End Select/Case/Default without Select",0
currentmess: Dc.b    "No Current List Item",0
overmess:    Dc.b    "OverFlow Error",0
pointermess:  Dc.b    "Error pointer adress <=0",0
Even

;********************* ERRORS **********************

overerr:MOVE.l #overmess,d0:TRAP #0
pointererr:MOVE.l #pointermess,d0:TRAP #0
returnerr:MOVE.l #returnmess,d0:TRAP #0

nexterr:MOVE.l #nextmess,d0:TRAP #0

stackerr:MOVE.l #stackmess,d0:TRAP #0

nostackerr:MOVE.l #nostackmess,d0:TRAP #0

arrerr:MOVE.l #arrmess,d0:TRAP #0

maxerr:MOVE.l #maxmess,d0:TRAP #0

sarrayerr:MOVE.l #sarraymess,d0:TRAP #0

dataerr:MOVE.l #datamess,d0:TRAP #0

bmodeerr:MOVE.l #bmodemess,d0:TRAP #0

amodeerr:MOVE.l #amodemess,d0:TRAP #0

caseerr:MOVE.l #casemess,d0:TRAP #0

currenterr:MOVE.l #currentmess,d0:TRAP #0

;********************* CHECKING **********************

finalscheck:CMP.l ostack(pc),a7:BNE stackerr:RTS

ltobover:CMP.l #127,d0:BGT overerr:CMP.l #-128,d0:BLT overerr
RTS

wtobover:CMP #127,d0:BGT overerr:CMP #-128,d0:BLT overerr
RTS

ltowover:CMP.l #32767,d0:BGT overerr:CMP.l #-32768,d0:BLT overerr
RTS

checkpointer
CMP.l #4,a2
BPL 'r1
BRA pointererr
'r1 RTS

updatestack
MOVE.l a6,-(a7)
MOVE.l $4,a6
SUBA.l a1,a1
JSR -294(a6)
MOVE.l d0,a6
MOVE.l $3a(a6),a0
MOVE.l (a7)+,a6
LEA 1024(a0),a0:MOVE.l a0,maxstack
MOVE.l a7,a0:ADDQ #8,a0:MOVE.l a0,ostack
RTS

qtobover
SWAP d0
CMP #127,d0:BGT overerr
CMP #-128,d0:BLT overerr
SWAP d0:RTS

ftobover
MOVEM.l d0-d1/a0-a1,-(a7)
JSR -30(a6):BVS overerr
BSR ltobover
MOVEM.l (a7)+,d0-d1/a0-a1:RTS

ftowover
MOVEM.l d0-d1/a0-a1,-(a7)
JSR -30(a6):BVS overerr
BSR ltowover
MOVEM.l (a7)+,d0-d1/a0-a1:RTS

ftolover
MOVEM.l d0-d1/a0-a1,-(a7)
JSR -30(a6):BVS overerr
MOVEM.l (a7)+,d0-d1/a0-a1:RTS

sarraychk:CMP.l #65536,d0:BCC sarrayerr:RTS

aarraychk:CMP.l #65536,d1:BCC sarrayerr:RTS

datachk:MOVE.b (a3)+,d1:CMP.b #"D",d1:BNE dataerr
CMP.b (a3)+,d0:BNE dataerr:RTS

bmodechk:BPL bmodeerr:RTS

amodechk:BMI amodeerr:RTS

stackchk:TST supernest:BNE 'skip:CMP.l maxstack(pc),a7
BCS nostackerr:'skip:RTS

retchk:CMP #"gS",8(a7):BNE returnerr:MOVE.l 4(a7),a0
LEA 10(a7),a7:JMP (a0)

nextchkw:CMP #"fO",12(a7):BNE nexterr:RTS

nextchkl:CMP #"fO",16(a7):BNE nexterr:RTS

casechkw:CMP #"sE",6(a7):BNE caseerr:RTS

casechkl:CMP #"sE",8(a7):BNE caseerr:RTS

currentchk:CMP #0,a2:BEQ currenterr:RTS

;*********************** MISC *************************

.gosuper:ADDQ #1,supernest:RTS

.gouser:SUBQ #1,supernest:RTS

.trapper
MOVE.l (a7)+,d0:MOVE.l #'more,2(a7):RTE:'more
;
CMP #32,d0:BCS 'skip:MOVEQ #12,d0:'skip
CMP #14,d0:BCS 'skiq:MOVEQ #13,d0:'skiq
LEA trapmesss(pc),a0:LSL #2,d0:MOVE.l -8(a0,d0),d0:TRAP #0

getvbr:
  MOVE.l vbr_,a0:RTS

getcpu:
  MOVE cpu_,d0:RTS

.codeinit
  MOVE.l a7,a0:SUB.l d2,a0:LEA 1024(a0),a0:MOVE.l a0,maxstack
  MOVE.l a7,a0:ADDQ #4,a0:MOVE.l a0,ostack

  MOVE.l 4,a0:MOVE.l 276(a0),a0
  MOVE.l 50(a0),oldtrap:MOVE.l #trapper,50(a0)

  MOVE.l 4,a0:MOVE 296(a0),d0:MOVEQ #0,d1:AND #15,d0
 'loop:
    BEQ 'done:
    ADDQ #1,d1
    LSR #1,d0
  BRA 'loop
 'done:
  MOVE d1,cpu_

  MOVEQ #0,d2     ; if we have a 68010+ we can get the vbr via instrution!
  CMP #2,d1
  BCS 'skip
    MOVE.l 4,a6
    JSR -150(a6)  ;supervisor state!
    Dc $4e7a,$2801;movec vbr,d2
    JSR -156(a6)  ;userstate
 'skip:
  MOVE.l d2,vbr_
RTS

codefinit
;
MOVE.l 4,a0:MOVE.l 276(a0),a0
MOVE.l oldtrap(pc),50(a0)
;
'skip:RTS

