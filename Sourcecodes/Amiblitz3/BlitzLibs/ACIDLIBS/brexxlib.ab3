; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "blitz2:Decompiled"
; ExeFile         = "brexxlib.obj"
; CreateIcon      = 0
; Residents       = "blitzlibs:libmacs.res,blitzlibs:blitzoffs.res,blitzlibs:all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 198
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
;
;  BREXX LIB!
;

!libheader{#brexxlib,init,0,finit,errors}

!astatement
!args
!libs
!subs{dorecord,0,0}
!args{2}
!libs{#brexxlib,$1380}
!subs{dorecord2,0,0}
!name{"Record","[Tape#]"}   ;*****

!astatement
!args
!libs
!subs{doplayback,0,0}
!args{2}
!libs{#brexxlib,$1380}
!subs{doplayback2,0,0}
!name{"PlayBack","[Tape#]"} ;*****

!astatement
!args{2,7}
!libs{#brexxlib,$1380,#doslib,#la6}
!subs{dosavetape,0,0}   ;*****
!name{"SaveTape","Tape#,Filename$"}

!astatement
!args{2,7}
!libs{#brexxlib,$1380,#doslib,#la6}
!subs{doloadtape,0,0}   ;*****
!name{"LoadTape","Tape#,filename$"}

!astatement
!args{2,2}
!libs
!subs{doabsmouse,0,0}
!name{"AbsMouse","X,Y"} ;*****

!astatement
!args{2,2}
!libs
!subs{dorelmouse,0,0}
!name{"RelMouse","X Offset,Y Offset"} ;*****

!astatement
!args{2,2}
!libs
!subs{domousebutton,0,0}    ;*****
!name{"MouseButton","Button,On|Off : 0=Left"}

!astatement
!args{2}
!libs
!subs{doclickbutton,0,0}    ;*****
!name{"ClickButton","Button : 0=Left"}

!astatement
!args{2,2,2}
!libs{#brexxlib,$1380}
!subs{domacrokey,0,0}   ;*****
!name{"MacroKey","Tape#,Rawkey,Qualifier"}

!astatement
!args
!libs
!subs{dotapeadd,0,0}
!args{2}
!libs{#brexxlib,$1380}
!subs{dotapeadd2,0,0}
!name{"TapeTrap","[Tape#]"} ;*****

!astatement
!args{2}
!libs
!subs{dotapemode,0,0}
!name{"QuietTrap","On|Off"} ;*****

!astatement
!args{7}
!libs
!subs{dotype,0,0}

!args{7,2}
!libs
!subs{dotype2,0,0}


!name{"Type","String$[,QUILIFIER"} ;*****

!astatement
!args{2}
!libs
!subs{doqplay,0,0}
!name{"QuickPlay","On|Off"} ;*****

!afunction{3}
!args
!libs
!subs{doxstatus,0,0}
!name{"XStatus",""} ;*****

!astatement
!args{2}
!libs{#brexxlib,$1380}
!subs{doplaywait,0,0}
!name{"PlayWait",""}    ;*****

!afunction{2}
!args{2}
!libs
!subs{dogetkeystate,0,0}
!name{"RawKeyState","(rawkeynum) ;press =-1 or rel= 0 of the rawkey" }    ;*****

!afunction{2}
!args
!libs
!subs{dogetrawqualifier,0,0}
!name{"RawQualifier",""}

init:!nullsub{codeinit,0,0}

finit:!nullsub{codefinit,0,0}

!dumtoke{"Tape","A BREXX Macro",_toke}

!astatement
!args{2,2}
!libs
!subs{dofreemacrokey,0,0}
!name{"FreeMacroKey","Rawkey,Qualifier"}

_load:!nullsub{0,0,0}

_save:!nullsub{0,0,0}

_use:!nullsub{0,0,0}

_free:!nullsub{freetape,0,0}

!libfin{_toke,_load,_save,_use,_free,5,4}

;********************** CODE BELOW ************************

mode:Dc 0:;handler mode
;
;0=nothing, 1=record, 2=playback
;
lastrec:Dc.l 0
lastlink:Dc.l 0
firstval:Dc.l 0,0
firsta3:Dc.l 0
dummy:Dc.l 0
playval:Dc.l 0,0
tapeadd:Dc.l 0 ;pointer to tape to add to for simple events
trap_mode:Dc 1
qplay:Dc 0
mysig:Dc.l 0  ;signal bit for input.handler telling
            ;main prog that it's finished a playback or whatever
mytask:Dc.l 0
mybit:Dc 0
sigit:Dc 0 ;flag - should I signal when playback finished?
rawqualifier:Dc 0
dumevent:
ie
ie_nextevent:Dc.l 0
ie_class:Dc.b 4
ie_subclass:Dc.b 0
ie_code:Dc 0
ie_qualifier:Dc 0
ie_x:Dc 0
ie_y:Dc 0
ie_timeval:Dc.l 0,0
ief

mkeys:Dc.l 0
;
;macro keys -
;
;00.l : Next
;04.l : Tape
;08.b : rawkey
;09.b : qualifier

;---10----

dogetkeystate
MOVE.l a0,-(a7)
LEA keytab,a0
MOVE.b 0(a0,d0.w),d0
EXT.w d0
EXT.l d0
MOVE.l (a7)+,a0
RTS
dogetrawqualifier
MOVEQ #0,d0
MOVE.w rawqualifier,d0
RTS
doxstatus:MOVEQ #0,d0:MOVE mode(pc),d0:RTS

doqplay:MOVE d0,qplay:RTS

.addtape:;add dumevent to tape if necessary
;
MOVE.l tapeadd(pc),d0:BEQ 'done:MOVE.l d0,a3
MOVEQ #ief-ie,d0:MOVEQ #1,d1:ALibJsr $c002:MOVE.l d0,a0
LEA ie(pc),a1:MOVEQ #{ief-ie}/2-1,d1
'loop:MOVE (a1)+,(a0)+:DBF d1,'loop:MOVE.l d0,a0
;
;Find where in tape to add it
;
'loop2:MOVE.l (a3),d0:BEQ 'here:MOVE.l d0,a3:BRA 'loop2
;
'here:MOVE.l a0,(a3):CLR.l (a0)
CLR mode:MOVE trap_mode(pc),d0:BNE 'done2
'done:MOVE #$8000,mode
'done2:RTS

dotapeadd:CLR.l tapeadd

dotapeadd2:MOVE.l a3,tapeadd:RTS

dotapemode:;mode in d0
MOVE d0,trap_mode:RTS

.domacrokey:;a3=tape#, d1=rawkey, d2=qualifier
;
MOVE d1,d3:MOVE d2,d4
MOVE d1,d0:MOVE d2,d1:BSR dofreemacrokey
;
MOVEQ #10,d0:MOVEQ #1,d1:ALibJsr $c002:MOVE.l d0,a0
MOVE.l mkeys(pc),(a0):MOVE.l a0,mkeys
MOVE.l a3,4(a0):MOVE.b d3,8(a0):MOVE.b d4,9(a0):RTS

.dofreemacrokey ;free macro key on d0=rawkey, d1=qualifier
;
LEA mkeys(pc),a1
;
'loop
MOVE.l (a1),d2:BEQ 'done:MOVE.l a1,a0:MOVE.l d2,a1
CMP.b 8(a1),d0:BNE 'loop:CMP.b 9(a1),d1:BNE 'loop
;
;found it!
;
MOVE.l (a1),(a0)            ;fix link
MOVEQ #10,d0:ALibJsr $c003  ;free it!
;
'done:RTS

clearie:MOVE mode(pc),d7:BMI clearie
CLR ie_code:CLR ie_qualifier:CLR.l ie_x
CLR.l ie_timeval:CLR.l ie_timeval+4:RTS

.doabsmouse:;make mouse go to absolute coords d0,d1
;
MOVEQ #4,d2:MOVEQ #0,d3
;
movemouse:BSR clearie
MOVE.b #4,ie_class:MOVE d3,ie_qualifier
MOVE d0,ie_x:MOVE d1,ie_y
BRA addtape
.dotype2
MOVE d1,_qualifier
BRA dotypec
.dotype:
CLR.w _qualifier
dotypec
MOVE.l -(a2),d6:MOVE.l d0,a2
'loop:BEQ 'done
BSR clearie:MOVE.b #1,ie_class:;raw key!
MOVE.b (a2)+,d0:ALibJsr #rawkeylib LSL 7+2:;unconvert!
MOVE.w _qualifier,ie_qualifier
MOVE d0,ie_code:OR.w d1,ie_qualifier
BSR addtape:;doit!
SUBQ.l #1,d6:BRA 'loop
'done:RTS

.dorelmouse
MOVEQ #2,d2:MOVE #$8000,d3:BRA movemouse

.doclickbutton:;click mouse button d0, down then up
;
MOVEQ #1,d1:BSR domousebutton:MOVEQ #0,d1
;
.domousebutton:;mouse button# in d0, up/down in d1
;
BSR clearie
MOVE.b #2,ie_class:MOVE #$8000,ie_qualifier
MOVEQ #$68,d2:TST d0:BEQ 'skip:MOVEQ #$69,d2
'skip:TST d1:BNE 'skip2:BSET #7,d2
'skip2:MOVE d2,ie_code
BRA addtape

.toupleft:;move mouse to upper left of screen
;
BSR clearie:MOVE.b #4,ie_class:CLR.l ie_x:RTS

.codeinit:BSR openinput:BSR addhandler
CLR.l mkeys:MOVE #1,trap_mode:CLR qplay
MOVEQ #-1,d0:JSR _AllocSignal(a6)
MOVE d0,mybit:MOVEQ #1,d1:LSL.l d0,d1:MOVE.l d1,mysig
SUB.l a1,a1:JSR _FindTask(a6):MOVE.l d0,mytask
RTS

.codefinit:BSR doplayback:;turn off any tape...
BSR remhandler:BSR closeinput:BSR freesig
MOVEQ #0,d0:MOVE mybit(pc),d0:JSR _FreeSignal(a6)
RTS

.dorecord:;turn off recording...
;
BSR waitlast:MOVE.l 4,a6:JSR _Forbid(a6)
CMP #1,mode:BNE 'done
MOVE.l firsta3(pc),a0:MOVE.l firstval(pc),4(a0)
MOVE.l firstval+4(pc),8(a0):CLR mode
'done:JMP _Permit(a6)

.dorecord2:;turn on recording for item in a3
;
BSR dorecord:;turn off any other recording.
BSR freetape:MOVE.l a3,firsta3:MOVE.l a3,lastrec
CLR.b ie_class:MOVE #$8001,mode:RTS

doplayback:;turn off playback
;
BSR waitlast:MOVE.l 4,a6:JSR _Forbid(a6)
CMP #2,mode:BNE 'done
MOVE.l lastrec(pc),a0:MOVE.l lastlink(pc),(a0):CLR mode
'done:JMP _Permit(a6)

.doplaywait:CMP.b #2,mode+1:BNE 'done
MOVEQ #-1,d7:BSR dopb
MOVE.l mysig(pc),d0:MOVE.l 4,a6
JSR _Wait(a6)
'done:RTS

.doplayback2:;a3=item
;
MOVEQ #0,d7
dopb
TST.l (a3):BEQ pbdone
BSR doplayback:MOVE d7,sigit:;turn off any other playback
;
.doplayback3
;
MOVE.l a3,lastrec:MOVE.l (a3),lastlink
MOVE.l 4(a3),playval:MOVE.l 8(a3),playval+4
CLR.b ie_class:MOVE #$8002,mode
;
pbdone:RTS

waitlast
'loop:MOVE mode(pc),d0:BMI 'loop:RTS

.freetape:;tape in a3...
;
BSR doplayback:BSR dorecord:;just in case.....
MOVE.l (a3),a2:CLR.l (a3)
'loop:CMP #0,a2:BEQ 'done
MOVE.l a2,a1:MOVEQ #ief-ie,d0:MOVE.l (a2),a2
ALibJsr $c003:BRA 'loop
'done:RTS

.dosavetape:;a3=tape#, d1=filename
;
TST.l (a3):BEQ 'done2
MOVE.l #1006,d2:JSR _Open(a6):MOVE.l d0,d7:BEQ err1
;
LEA 4(a3),a0:MOVE.l a0,d2:MOVEQ #8,d3:MOVE.l d7,d1
JSR _Write(a6)
;
MOVE.l (a3),a2
'loop:CMP #0,a2:BEQ 'done
MOVE.l d7,d1:MOVE.l a2,d2:MOVEQ #ief-ie-4,d3
ADDQ.l #4,d2:JSR _Write(a6):MOVE.l (a2),a2:BRA 'loop
;
'done:MOVE.l d7,d1:JMP _Close(a6)
'done2:RTS

.doloadtape:;a3=tape#, d1=filename
;
MOVEM.l d1/a6,-(a7):BSR freetape:MOVEM.l (a7)+,d1/a6
;
MOVE.l #1005,d2:JSR _Open(a6):MOVE.l d0,d7:BEQ err1
;
LEA 4(a3),a0:MOVE.l a0,d2:MOVEQ #8,d3
MOVE.l d7,d1:JSR _Read(a6)
;
'loop:MOVE.l d7,d1:MOVE.l #dumtape,d2
MOVEQ #18,d3:JSR _Read(a6):CMP.l #18,d0:BNE 'done
MOVEQ #22,d0:MOVEQ #1,d1:ALibJsr $c002:MOVE.l d0,a0
ADDQ #4,a0:LEA dumtape(pc),a1:MOVEQ #8,d1
'loop2:MOVE (a1)+,(a0)+:DBF d1,'loop2
MOVE.l d0,a0:CLR.l (a0):MOVE.l a0,(a3):MOVE.l a0,a3
BRA 'loop
;
'done:MOVE.l d7,d1:JMP _Close(a6)

dumtape:Ds.b 18

;*********************** End Of Main *************************

.closeinput
MOVE.l 4,a6:LEA io_request(pc),a1:JMP _CloseDevice(a6)

.freesig:MOVEQ #0,d0:MOVE.b my_sig(pc),d0
MOVE.l 4,a6:JMP _FreeSignal(a6)

.openinput
LEA io_request(pc),a2
MOVE.l a2,a0:MOVE #{io_requestfin-io_request}/2-1,d0
'loop:CLR (a0)+:DBF d0,'loop
MOVE.b #NT_MESSAGE,8(a2)
MOVE #my_port-io,18(a2)
;
LEA my_list(pc),a0
MOVE.l a0,8(a0):ADDQ #4,a0:MOVE.l a0,-4(a0)
MOVE.l 4,a6:SUB.l a1,a1:JSR _FindTask(a6)
;
LEA my_port(pc),a3
MOVE.b #NT_MSGPORT,8(a3)
MOVE.l d0,my_task-my_port(a3)
MOVEQ #-1,d0:JSR _AllocSignal(a6)
MOVE.b d0,my_sig-my_port(a3)
;
MOVE.l a3,SizeOf.Message\mn_ReplyPort(a2)
LEA devname(pc),a0:MOVEQ #0,d0:MOVE.l a2,a1
MOVEQ #0,d1:JSR _OpenDevice(a6):TST.l d0:RTS

.addhandler
LEA io_request(pc),a1
MOVE.l #my_interrupt,io_data-io(a1)
MOVE #9,io_command-io(a1)
MOVE.l 4,a6:JMP _DoIO(a6)

.remhandler
LEA io_request(pc),a1
MOVE.l #my_interrupt,io_data-io(a1)
MOVE #10,io_command-io(a1)
MOVE.l 4,a6:JMP _DoIO(a6)

mwait:BTST #6,$bfe001:BNE mwait:RTS

.my_handler
;
MOVE.l a0,d0:BEQ handdone
MOVE.w 8(a0),rawqualifier
CMP.b #1,4(a0)       ;key
BNE 'no
MOVEM.l a0/d0/a1,-(a7)
LEA keytab,a1
MOVEQ #0,d0
MOVE.b 7(a0),d0
BTST #7,d0
BNE 'rel
MOVE.b #-1,0(a1,d0.w)
BRA 'set
'rel
BCLR #7,d0
CLR.b 0(a1,d0.w)
'set:
MOVEM.l (a7)+,a0/d0/a1
'no: MOVE mode(pc),d0:BEQ isitmacro:BPL 'something
;
;execute dumevent - get timeval
;
BCLR #15,d0:MOVE d0,mode
MOVE.l 14(a0),firstval
MOVE.l 18(a0),firstval+4:;first timeval
LEA dumevent(pc),a1:MOVE.l a0,(a1):MOVE.l a1,d0:RTS
;
'something:;mode in d0
;
;1=record, 2=playback
;
SUBQ #1,d0:BNE notrec:MOVE.l a0,-(a7)
;
'loop:MOVE.b 4(a0),d0:BEQ 'more
CMP.b #2,d0:BEQ 'doit:CMP.b #4,d0:BEQ 'doit
CMP.b #1,d0:BNE 'more
;
'doit:MOVEQ #ief-ie,d0:MOVEQ #1,d1:ALibJsr $c002:MOVE.l d0,a1
MOVEQ #10,d1:MOVE.l a0,a3
'loop2:MOVE (a3)+,(a1)+:DBF d1,'loop2
MOVE.l d0,a1:CLR.l (a1)
MOVE.l lastrec(pc),a3:MOVE.l a1,(a3):MOVE.l a1,lastrec
;
'more:MOVE.l (a0),d0:MOVE.l d0,a0:BNE 'loop
;
'done:MOVE.l (a7)+,d0:RTS

notrec:SUBQ #1,d0:BNE notplay
;
;Playback!
;
MOVE.l lastrec(pc),a1:MOVE.l lastlink(pc),(a1)
BEQ 'clrmode:MOVE.l (a1),a1:MOVE.l a0,a2
;
'loop:;is it time to play this one back yet?
;
MOVE qplay(pc),d0:BNE 'yesnow
MOVE.l 14(a1),d0:MOVE.l 18(a1),d1
MOVE.l d0,d2:OR.l d1,d2:BEQ 'yesnow
SUB.l playval+4(pc),d1:MOVE.l playval(pc),d4
SUBX.l d4,d0
;
MOVE.l 14(a0),d2:MOVE.l 18(a0),d3
SUB.l firstval+4(pc),d3:MOVE.l firstval(pc),d4
SUBX.l d4,d2
;
;d0(hi) AND d1(lo):;playback
;d2(hi) AND d3(lo):;from input device
;
CMP.l d0,d2:BCS 'notyet:BNE 'yesnow:CMP.l d1,d3:BCS 'notyet
;
'yesnow:MOVE.l a1,a2:MOVE.l (a1),d0:MOVE.l d0,a1:BNE 'loop
;
'notyet:CMP.l a0,a2:BEQ handdone
;
MOVE.l lastrec(pc),a1:MOVE.l (a1),d0:;where we start from
MOVE.l a2,lastrec:MOVE.l (a2),lastlink
MOVE.l a0,(a2):RTS
;
'clrmode:;here, we turn off whatever was happening, and
         ;send ourselves a signal
CLR mode:MOVE sigit(pc),d0:BEQ handdone
MOVE.l a0,a2
MOVE.l 4,a6:MOVE.l mytask(pc),a1:MOVE.l mysig(pc),d0
JSR _Signal(a6)
MOVE.l a2,a0:BRA handdone

notplay
BRA handdone

.isitmacro:CMP.b #1,4(a0):BNE handdone
;
;key hit, check if it's a macro key!
;
LEA mkeys(pc),a1:MOVE.b 7(a0),d2:MOVE.b 9(a0),d3
;
'loop:MOVE.l (a1),d1:BEQ handdone:MOVE.l d1,a1
CMP.b 8(a1),d2:BNE 'loop:CMP.b 9(a1),d3:BNE 'loop
;
;This is the one....
;
MOVE.l 4(a1),a3:MOVE.l a0,-(a7)
;
BSR doplayback3     ;was 2
;
MOVE.l (a7)+,d0:RTS

handdone:MOVE.l a0,d0:RTS

.my_interrupt:Dcb.b 9,0:Dc.b 51:;one more than intuition
Dcb.b 4,0
my_data:Dc.l 0
my_code:Dc.l my_handler

.devname:Dc.b "input.device",0:Even

.io_request
io
;
io_message:Dcb.b 20,0
io_device:Dc.l 0
io_unit:Dc.l 0
io_command:Dc 0
io_flags:Dc.b 0
io_error:Dc.b 0
;
io_actual:Dc.l 0
io_length:Dc.l 0
io_data:Dc.l 0
io_offset:Dc.l 0
;
my_port
;
my_node:Dc.l 0,0:Dc.b 0,0:Dc.l 0
my_act:Dc.b 0
my_sig:Dc.b 0
my_task:Dc.l 0
my_list:Dc.l 0,0,0:Dc.b 0,0
;
io_requestfin
 _qualifier:Dc.w 0
keytab: Ds.b 129
;****************** ERROR CHECKING ********************
;
errors
err1:MOVE.l #mess1,d0:TRAP #0

mess1:Dc.b "Can't Open File",0
Even

