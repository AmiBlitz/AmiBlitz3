; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "h0:w-pr/Blitz2/Decompiled"
; ExeFile         = "arrayslib.obj"
; CreateIcon      = 0
; Residents       = "blitzlibs:libmacs.res,blitzlibs:blitzoffs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 112
; CursorColumn    = 1
; LabelSearch     = "-702"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
!syslibheader{#arrayslib,$c400,$c407,0,0,0,0}

!nullsub{newarr,0,0}

!nullsub{newlocarr,0,0}

!nullsub{arrmult,0,0}

!nullsub{newlist,0,0}

!nullsub{newloclist,0,0}

!nullsub{newarr2,0,0}

!nullsub{newlocarr2,0,0}
!libfin

;******************** CODE BELOW *****************

;
;A List looks like this!
;
;-8.l : poolheader
;-4.l : size
;00.l : Current
;04.l : \
;08.l :  > - freaky list header for items in existance
;12.l : /
;16.l : \
;20.l :  > - freaky list header for free items
;24.l : /
;28.l : "lIsT" : list ID

;           40 long

.newlocarr:MOVE.b #1,localmode:EXG a4,a5:BSR newarrb:EXG a4,a5:RTS

.newarr:CLR.b localmode
.newarrb
MOVE.l 0(a5,d2),d0:BEQ 'skip:MOVE.l d0,a1
MOVE.l 0(a5,d3),d0:
TST.b localmode
BNE 'm10
ALibJsr $c003
BRA 'l5
'm10 ALibJsr $c001:                ;free old one!
'l5
'skip:MOVE.l 0(a5,d3),d0:
MOVE.l #$10001,d1
TST.b localmode
BNE 'm1
ALibJsr $c002
BRA 'm2
'm1: ALibJsr $c000:
'm2 MOVE.l d0,0(a5,d2):RTS

.newlocarr2:MOVE.b #1,localmode:EXG a4,a5:BSR newarr2:EXG a4,a5:RTS
localmode: Dc.w 0
.newarr2:CLR.b localmode
.newarr2b
MOVE.l a6,-(a7)
MOVE.l 0(a5,d2),d0:    ;(a5,d3) =size  (a5,d2)=addr
BEQ 'skip:
MOVE.l d0,-(a7)
MOVE.l d1,-(a7)
MOVE.l $4,a6
JSR -$84(a6)
MOVE.l #1 LSL 17,d1
JSR -216(a6)            ;get largest free block
MOVE.l d0,d1
MOVE.l 0(a5,d3),d0
ADD.l #200000,d0
CMP.l d1,d0
BLT 'c1
ADDQ #8,a7
JSR -$8a(a6)
MOVEQ #0,d0
BRA 'l1
'c1
MOVE.l 0(a5,d3),d0:
MOVE.l #$10001,d1
TST.b localmode
BNE 'm1
ALibJsr $c002
BRA 'm2
'm1: ALibJsr $c000:                ;alloc new
'm2 MOVE.l d0,0(a5,d2):
BEQ 'l5
MOVE.l (a7)+,d1
MOVE.l (a7),a0
MOVE.l d0,a1
MOVE.l 0(a5,d3),d0
CMP.l d0,d1
BGT 'l4
EXG.l d0,d1
'l4
JSR -$270(a6)                 ;copy old data
MOVE.l (a7)+,a1
MOVE.l 0(a5,d3),d0
TST.b localmode
BNE 'm10
ALibJsr $c003
BRA 'l5
'm10 ALibJsr $c001:                ;free old one!

'l5 JSR -$8a(a6)
BRA 'l1
'skip:MOVE.l 0(a5,d3),d0:
MOVE.l #$10001,d1
ALibJsr $c000:
MOVE.l d0,0(a5,d2):
'l1
MOVE.l (a7)+,a6
RTS

.arrmult:ADDQ #1,d1:MOVE.l d0,d2:MULU d1,d0
SWAP d2:MULU d1,d2:SWAP d2:ADD.l d2,d0
RTS

.newloclist:MOVE.b #1,localmode:EXG a4,a5:BSR newlistb:EXG a4,a5:RTS
newlistb
.newlist:
CLR.b localmode
MOVE.l 0(a5,d2),d0:BEQ 'skip:MOVE.l d0,a1
MOVE.l a6,-(a7)
MOVE.l -40(a1),a0
CMP.l #0,a0
BEQ 'nopool
MOVE.l a1,-(a7)
MOVE.l $4,a6
CLR.l -40(a1)
JSR -702(a6); delete Pool
MOVE.l (a7)+,a1
'nopool: MOVE.l (a7)+,a6
MOVEQ #40,d0:SUB d0,a1:ADD.l 0(a5,d3),d0:

ALibJsr $c001  ;free old
;
'skip
MOVE.l #$10001,d0
MOVE.l #2000,d1
MOVEM.l a6/d2,-(a7)
MOVE.l #2000,d2
MOVE.l $4,a6
JSR -696(a6)              ;create pool
TST.l d0
BEQ 'out
MOVE.l d0,a2
MOVEQ #40,d0:ADD.l 0(a5,d3),d0
MOVE.l #$10001,d1
ALibJsr $c000
;JSR -708(a6)
;TST.l d0
;BEQ 'out
MOVEM.l (a7)+,a6/d2

MOVE.l d0,a0
MOVE.l a2,0(a0)                 ;write poolheader
SWAP d4
CLR.w d4
SWAP d4
MOVE.w d4,4(a0)                ;write size
MOVE.l d0,a2

LEA 40(a2),a0:MOVE.l a0,0(a5,d2)
MOVE.l a0,a1:ADD.l 0(a5,d3),a1
;
;Empty out the IN-USE list, FREE list, and set ID
;
LEA 4+8(a2),a3:MOVE.l a3,12+8(a2):ADDQ #4,a3:MOVE.l a3,4+8(a2)
LEA 16+8(a2),a3:MOVE.l a3,24+8(a2):ADDQ #4,a3:MOVE.l a3,16+8(a2)
MOVE.l #"lIsT",28+8(a2)
;
;OK, link all things together.....
;
LEA 20+8(a2),a2:;tail node
;
MOVEQ #0,d1
'loop:;insert a0 node before a2 node
;
MOVE.l 4(a2),a3:;   old last of tail
;
MOVE.l a2,(a0):;    new next of me
MOVE.l a3,4(a0):;   new last of me
;
MOVE.l a0,4(a2):;   new last of tail
MOVE.l a0,(a3):;    new next of old last
ADDQ.l #1,d1
ADD.l d4,a0:CMP.l a1,a0:BCS 'loop
;
CMP.l #1,d1
BNE 'l1
MOVE.w #1,-$16(a2)
'l1 RTS
'out:
TRAP #0
MOVEM.l (a7)+,a6/d2
RTS
