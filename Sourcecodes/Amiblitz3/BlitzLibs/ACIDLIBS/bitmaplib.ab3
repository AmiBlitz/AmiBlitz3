; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "bitmaplib.obj"
; CreateIcon      = 0
; Residents       = "libmacs.res,blitzoffs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 6
; CursorColumn    = 1
; LabelSearch     = "init"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Screen      = 5
; Max Shape       = 100
; Max Window      = 5
; Max Bank        = 5
; Max IntuiFont   = 5
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max Palette     = 4
; Max BitMap      = 10
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 16
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 100
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;********************************
;*                              *
;* Library 215 - BitMap Library *
;*                              *
;* for creating BitMap structs  *
;*                              *
;********************************

!libheader{#bitmaplib,0,0,0,errors}

!astatement
!args{2,2,2,2}
!libs{#bitmaplib,$1380,#bitmaplib,$0604}
!subs{_bitmap,_bitmapchk,0}             ;***** $5001
!name{"BitMap","BitMap#,Width,Height,Depth",_toke}

!astatement
!args{2,7}
!libs{#bitmaplib,$1180}
!subs{_bitload+1,_bitloadchk,0}
!args{2,7,2}
!libs{#bitmaplib,$1180,#palettelib,$1082}
!subs{_bitload2+1,_bitloadchk,0}        ;***** $5002
!name{"LoadBitMap","BitMap#,Filename$[,Palette#]"}

!astatement
!args{2,2}
!libs{#screenslib,$1280,#bitmaplib,$1381,#bitmaplib,$0604}
!subs{doscbitmap,sbchk,0}               ;***** $5003
!name{"ScreensBitMap","Screen#,BitMap#"}

!nullsub{extbitmap,0,0}

!astatement
!args{2,2}
!libs{#bitmaplib,$1280,#bitmaplib,$1381}
!subs{docopybitmap,cbchk,0}             ;***** $5005
!name{"CopyBitMap","Src BitMap#,Dest BitMap#"}

!astatement
!args{2,2}
!libs{#shapeslib,$1280,#bitmaplib,$1381,#bitmaplib,$0604}
!subs{doshbitmap,shchk,0}               ;***** $5006
!name{"ShapesBitMap","Shape#,BitMap#"}

!astatement
!args{2,2,2,2,#long}
!libs{#bitmaplib,$1380,#bitmaplib,$0604}
!subs{_cludgebitmap,0,0}                ;***** $5007
!name{"CludgeBitMap","BitMap#,Width,Height,Depth,Memory"}

!astatement
!args{#long}
!libs
!subs{_systembitmap,0,0}
!name{"SystemBitMap","Mode;1= use layers and rastport so system frendly funcs can use"}

!afunction {#long}
!args
!libs{#bitmaplib,#ua3}
!subs{_bitmaprastport,0,0}
!name{"BitMapRastPort","return a rastport for system friendly funcs(SystemBitMap 1)active"}



;init:!nullsub{codeinit,0,0}

;finit:!nullsub{codefinit,0,0}

_load:!nullsub{0,0,0}

_save:!nullsub{0,0,0}

_use:!nullsub{0,_usechk,0}

_free:!nullsub{_freebitmap,0,0}

!libfin{_toke,_load,_save,_use,_free,10,6}

;new bitmap struct:
;
;0.w _ebwidth/_linemod
;2.w _height
;4.w _depth
;6.w _flags (OS's 4..5 bytes) ; btst #2 to see if interleaved
;8.l...39 _data ; bitplane pointer
;40 layer in systemmode
;52 _mem ; contiguos memory occupied by bitmap!
;56 _memlen ; bytes occupied by _mem
;60 _xclip in pixels...
;62 _isreal ; 0=no bitmap here, 1=borrowed, -1=ours

;********************* Code Follows *************************

_bitmaprastport
  MOVE.l 40(a3),d0
  BEQ errornosys
    MOVE.l d0,a0
    MOVE.l $c(a0),d0
    RTS

_systembitmap
  MOVE.b d0,system
RTS

_cludgebitmap  ;a3=bitmap d1 d2 d3 d4.l= width height depth mem
  MOVE.l a3,0(a5,d6)

  MOVEM.l d1-d4,-(a7)
  BSR _freebitmap
  MOVEM.l (a7)+,d1-d4
  MOVE #1,62(a3)
  ADD #15,d1
  LSR #4,d1
  ADD d1,d1
  MOVE d1,(a3)
  MOVE d2,2(a3)
  CLR.b 4(a3)
  MOVE.b d3,5(a3)
  MOVE.l d4,d0
  LEA 8(a3),a0
  SUBQ #1,d3
  MULU d1,d2
 'loop:
    MOVE.l d0,(a0)+
    ADD.l d2,d0
  DBF d3,'loop
  MOVE 4(a3),6(a3)
  CLR.b 4(a3)
  CLR 52(a3)
  MOVE 2(a3),58(a3)
  MOVEQ #1,d0
  MOVE 4(a3),d1
  LSL d1,d0
  MOVE d0,60(a3)
  MOVE (a3),d0
  LSL #3,d0
  MOVE d0,56(a3)
RTS

.docopybitmap ;a2=src, a3=dest
  BSR _freebitmap
  MOVE (a2),d0:MULU 2(a2),d0:MOVE.l d0,d7:LSR.l #1,d7
  MOVE 2(a2),d0:MULU 4(a2),d0:MULU (a2),d0
  MOVEQ #2,d1:ALibJsr $c002:MOVE.l d0,a0
  ;
  MOVE.l (a2),(a3):MOVE.l 4(a2),4(a3):MOVE #-1,62(a3)
  MOVE.l a3,-(a7)
  MOVE 4(a2),d0
  SUBQ #1,d0
  ADDQ #8,a2
  ADDQ #8,a3
  'loop
    MOVE.l a0,(a3)+
    MOVE.l (a2)+,a1
    MOVE.l d7,d1
   'loop2
      MOVE (a1)+,(a0)+
      SUBQ.l #1,d1
    BNE 'loop2
  DBF d0,'loop
  MOVE.l (a7)+,a3
BRA prepxtra


.doscbitmap:;get a screens bitmap for our use.
  MOVE.l a3,0(a5,d6)
  BSR _freebitmap
  MOVE.l (a2),a2
  MOVE.l 84+4(a2),a2
  MOVE #1,62(a3)
  MOVE.l a3,a1
  MOVEQ #40/4-1,d0
 'loop:
    MOVE.l (a2)+,(a1)+
  DBF d0,'loop
BRA prepxtra


.doshbitmap ;get a shapes bitmap for our own use.
  MOVE.l a3,0(a5,d6):BSR _freebitmap
  MOVE 6(a2),(a3):MOVE 2(a2),2(a3):MOVE 4(a2),d0
  MOVE d0,4(a3):MOVE #1,62(a3):SUBQ #1,d0
  MOVE.l 14(a2),a0:MOVE 22(a2),d1:LEA 8(a3),a1
 'loop:
    MOVE.l a0,(a1)+
    ADD d1,a0
  DBF d0,'loop
BRA prepxtra

._bitload2:;d1=filename, a1=bitmap, a0=palette item
  MOVEM.l d1/a1,-(a7)
  MOVE.l a0,a1
  MOVE.l d1,a0
  ALibJsr #palettelib LSL 7+3
  MOVEM.l (a7)+,d1/a1

._bitload:;d1=filename, a1=BitMap
  MOVE.l d1,a0
  ALibJsr #ilbmifflib LSL 7+3:;load bitmap
RTS

._bitmap:;a3=item,d1=w,d2=h,d3=depth
  MOVE.l a3,0(a5,d6)
  MOVEM.l d1-d3,-(a7)
  BSR _freebitmap
  MOVEM.l (a7)+,d1-d3
  MOVE #-1,62(a3)

extbitmap
  ;a3=bitmap struct
  ;d1=pix width, d2=pix height, d3=depth
  ;
  NOP
  MOVE.w d1,pixwidth
  ADD #15,d1
  LSR #4,d1
  ADD d1,d1  ;even byte width.
  MOVE d1,(a3)
  MOVE d2,2(a3)
  CLR.b 4(a3)
  MOVE.b d3,5(a3)
  ;
  MOVE d2,d0
  MULU d3,d0
  MULU d1,d0
  MULU d1,d2
  MOVE.l #$10002,d1
  ALibJsr $c002                     ; memlib: globalalloc, d0:bytesize, d1:requirements

  LEA 8(a3),a0                      ; set address of memoryblock into bitplane-pointers
  SUBQ #1,d3
 'loop:
    MOVE.l d0,(a0)+
    ADD.l d2,d0
  DBF d3,'loop

.prepxtra  ;initialize new fields....
  MOVE 4(a3),6(a3):CLR.b 4(a3):CLR 52(a3)
  MOVE 2(a3),58(a3):MOVEQ #1,d0:MOVE 4(a3),d1:LSL d1,d0:MOVE d0,60(a3)
  MOVE (a3),d0
  LSL #3,d0
  CMP #2,4(a3)
  BLT 'notint
    MOVE.l 12(a3),d2
    SUB.l 8(a3),d2
    BEQ 'notint
      CMP.l #32768,d2
      BCC 'notint
        CMP (a3),d2
        BHI 'notint
          DIVU d1,d0
          BSET #7,52(a3)
 'notint:
  MOVE d0,56(a3)

  MOVE.l 12(a3),d0:SUB.l 8(a3),d0:;CMP.l #32768,d0:BCC 'fail
  SUBQ #3,d1
  BMI 'ok
    LEA 12(a3),a0
   'loop:
      MOVE.l 4(a0),d2
      SUB.l (a0)+,d2
      CMP.l d0,d2
      BNE 'fail
    DBF d1,'loop
 'ok:
  MOVE d0,54(a3)

  TST.b system
  BEQ 'l1
    MOVE.l d0,-(a7)
    TST.l layerbase
    BNE 'skipopen
      MOVEQ #0,d0
      LEA layername,a1
      MOVE.l $4,a6
      JSR -$228(a6)     ; OpenLibrary_
      MOVE.l d0,layerbase
   'skipopen
    MOVE.l layerbase,a6
    JSR -$90(a6)        ; NewLayerInfo_
    MOVE.l d0,a0
    MOVE.l a3,a1
    SUBA.l a2,a2
    MOVEQ #0,d0
    MOVEQ #0,d1
    MOVEQ #0,d2
    MOVEQ #0,d3
    MOVE.w pixwidth,d2
    SUBQ.l #1,d2
    MOVE.w 2(a3),d3     ;height
    SUBQ.l #1,d3
    MOVEQ #1,d4
    JSR -36(a6)         ;Create UpfrontLayer
    MOVE.l d0,40(a3)
    MOVE.l (a7)+,d0
 'l1:
  RTS
 'fail:
  CLR 54(a3)
RTS

._freebitmap
  MOVE 62(a3),d0
  BPL 'done
    TST.b system
    BEQ 'l1
      MOVE.l 40(a3),d0
      BEQ 'l1
      MOVE.l a6,-(a7)
      MOVE.l layerbase,a6
      SUBA.l a0,a0          ; a0 : dummy
      MOVE.l d0,a1          ; a1 : struct Layer
      MOVE.l $44(a1),d2
      JSR -$5a(a6)          ; DeleteLayer_ ; a1:struct layer
      MOVE.l d2,a0
      JSR -$96(a6)          ; DisposeLayerInfo_
      MOVE.l (a7)+,a6
   'l1
    MOVE 2(a3),d0
    MULU 4(a3),d0
    MULU (a3),d0
    MOVE.l 8(a3),a1
    ALibJsr $c003           ; memlib
 'done:
  CLR 62(a3)
  RTS


;********************* local data store *********************
Even
pixwidth:   Dc.w 0
system:     Dc.w 0
layerbase:  Dc.l 0
layername:  Dc.b "layers.library",0
Even

;********************* Error Checking ***********************
err1:MOVEQ #1,d0:TRAP #0
err2:MOVE.l #mess2,d0:TRAP #0
err3:MOVE.l #mess3,d0:TRAP #0
err4:MOVE.l #mess4,d0:TRAP #0
err5:MOVE.l #mess5,d0:TRAP #0
errornosys:MOVE.l #mess6,d0:TRAP #0

errors
mess2:Dc.b "Uninitialized BitMap",0
mess3:Dc.b "Uninitialized Screen",0
mess4:Dc.b "Uninitialized Shape",0
mess5:Dc.b "Can't copy borrowed Bitmap",0
mess6:Dc.b "dont work if Systembitmap 1 is not called",0
Even

sbchk
TST.l (a2):BEQ err3:RTS

shchk
TST.l (a2):BEQ err4:RTS

_bitmapchk
TST d3:BEQ err1:CMP #8,d3:BHI err1
RTS

_usechk
TST 62(a3):BEQ err2:RTS

_bitloadchk
TST 62(a1):BEQ err2:RTS

bbchk2:MOVE d0,d1
bbchk:TST 62(a0):BEQ err2:CMP 4(a0),d1:BCC err1:RTS

cbchk:TST 62(a2):BPL err5:RTS

