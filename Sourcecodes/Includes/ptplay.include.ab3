; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "PTPlayDemo"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 12
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 18191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ptplay.include                                                        /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 24/05/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
CEND

XINCLUDE "dos.include.ab3"
XINCLUDE "file.include.ab3"
XINCLUDE "tempbuffer.include.ab3"
XINCLUDE "convert_audio.include.ab3"


#PTPLAY_CIAspeed        = (#TAG_USER + $00) ;/* SG ULONG   Default: 125          */
#PTPLAY_Flags           = (#TAG_USER + $01) ;/* SG ULONG   Default: MODF_ALLOWFILTER */
#PTPLAY_MasterVolume    = (#TAG_USER + $02) ;/* SG ULONG   Default: 256          */
#PTPLAY_PatternPosition = (#TAG_USER + $04) ;/* SG ULONG                     */
#PTPLAY_Patterns        = (#TAG_USER + $05) ;/* .G ULONG   Number of patterns      */
#PTPLAY_SongLength      = (#TAG_USER + $07) ;/* .G ULONG   Song Length in patterns   */
#PTPLAY_SongLoopCount   = (#TAG_USER + $08) ;/* .G ULONG   Number of loops done      */
#PTPLAY_SongPosition    = (#TAG_USER + $09) ;/* SG ULONG   Current position        */
#PTPLAY_SongTitle       = (#TAG_USER + $0A) ;/* .G STRPTR  Song name           */
#PTPLAY_TotalTime       = (#TAG_USER + $0B) ;/* .G ULONG   Song Length in seconds    */

#PT_MOD_UNKNOWN      = 0
#PT_MOD_PROTRACKER   = 1
#PT_MOD_SOUNDTRACKER = 2
#PT_MOD_SOUNDFX      = 3

; */
#MODF_DOSONGEND    = $0001    ;/* perform song-End detection */
#MODF_ALLOWPANNING = $0002    ;/* allow MOD To Use command $8 For panning */
#MODF_ALLOWFILTER  = $0004    ;/* allow MOD To set lowpass Filter */
#MODF_SONGEND      = $0008    ;/* songend occured */

; Library vectors
#_LVO_PtInit             = -30
#_LVO_PtRender           = -36
#_LVO_PtTest             = -42
#_LVO_PtCleanup          = -48
#_LVO_PtSetAttrs         = -54
#_LVO_PtGetAttr          = -60
#_LVO_PtSeek             = -66

NEWTYPE.modH
dummy.l
End NEWTYPE

NEWTYPE.ptH
*modH.modH
samplerate.l
channels.l
bits.l
framesize.l
modtype.l
moddata.l
modsize.l
seekpos.l
lsamp.l
rsamp.l
lrough.l
rrough.l
End NEWTYPE

; function wrappers
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !_PT_RescueRegs                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _PT_RescueRegs
MOVE.l a5,-(a7) : MOVE.l a6,-(a7) : MOVE.l d7,-(a7)
;MOVEM.l a0-a6/d1-d7,-(a7)  ; save all registers except d0
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !_PT_RestoreRegs                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _PT_RestoreRegs
MOVE.l (a7)+,d7 : MOVE.l (a7)+,a6 : MOVE.l (a7)+,a5
;MOVEM.l (a7)+,a0-a6/d1-d7  ; restore all registers except d0
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !PtInit {buf,bufsize,frequency,modtype}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - buf    : ???                                                              /
;/ - bufsize    : ???                                                          /
;/ - frequency    : ???                                                        /
;/ - modtype    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro PtInit ; {buf,bufsize,frequency,modtype}
;PtInit(buf,bufsize,frequency,modtype)(a1,d0,d1,d2)
GetReg a1,`2 ; buf
GetReg d0,`3 ; bufsize
GetReg d1,`4 ; freq
GetReg d2,`5 ; modtype
GetReg a2,ptengine\libbase
!_PT_RescueRegs
MOVE.l a2,a6
JSR _LVO_PtInit(a6)
!_PT_RestoreRegs
`1 = PutRegD0
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !PtRender {MOD,destbuf1,destbuf2,bufmodulo,numsp,Scale,Depth,chan:: /
;/ nels}                                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - MOD    : ???                                                              /
;/ - destbuf1    : ???                                                         /
;/ - destbuf2    : ???                                                         /
;/ - bufmodulo    : ???                                                        /
;/ - numsp    : ???                                                            /
;/ - Scale    : ???                                                            /
;/ - Depth    : ???                                                            /
;/ - channels    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro PtRender ; {MOD,destbuf1,destbuf2,bufmodulo,numsp,Scale,Depth,channels}
;PtRender(MOD,destbuf1,destbuf2,bufmodulo,numsp,Scale,Depth,channels)(a0,a1,a2,d0,d1,d2,d3,d4)
GetReg a0,`2  ; modH
GetReg a1,`3  ; destbuff1
GetReg a2,`4  ; destbuff2
GetReg d0,`5  ; bufmodulo
GetReg d1,`6  ; numsp
GetReg d2,`7  ; scale
GetReg d3,`8  ; depth
GetReg d4,`9  ; channels
GetReg a3,ptengine\libbase
!_PT_RescueRegs
MOVE.l a3,a6
JSR _LVO_PtRender(a6)
!_PT_RestoreRegs
`1 = PutRegD0
End Macro
 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !PtTest {filename,buf,bufsize}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename    : ???                                                         /
;/ - buf    : ???                                                              /
;/ - bufsize    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro PtTest ; {filename,buf,bufsize}
;PtTest(filename,buf,bufsize)(a0,a1,d0)
GetReg a0,`2  ; filename
GetReg a1,`3  ; buf
GetReg d0,`4  ; bufsize
GetReg a3,ptengine\libbase
!_PT_RescueRegs
MOVE.l a3,a6
JSR _LVO_PtTest(a6)
!_PT_RestoreRegs
`1 = PutRegD0
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !PtCleanup {modH}                                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - modH    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro PtCleanup ; {modH}
;PtCleanup(modH)(a0)
GetReg a0,`2 ; modH
GetReg a1,ptengine\libbase
!_PT_RescueRegs
MOVE.l a1,a6
JSR _LVO_PtCleanup(a6)
!_PT_RestoreRegs
`1 = PutRegD0
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !PtSetAttrs {modH,taglist}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - modH    : ???                                                             /
;/ - taglist    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro PtSetAttrs ; {modH,taglist }
;PtSetAttrs(MOD,taglist)(a0,a1)
GetReg a0,`2 ; modH
GetReg a1,`3 ; taglist
GetReg a2,ptengine\libbase
!_PT_RescueRegs
MOVE.l a2,a6
JSR _LVO_PtSetAttrs(a6)
!_PT_RestoreRegs
`1 = PutRegD0
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !PtGetAttr {modH,tagitem,storagePtr}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - modH    : ???                                                             /
;/ - tagitem    : ???                                                          /
;/ - storagePtr    : ???                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro PtGetAttr ; {modH,tagitem,storagePtr}
;PtGetAttr(MOD,tagitem,storagePtr)(a0,d0,a1)
GetReg a0,`2 ; modH
GetReg d0,`3 ; tagitem
GetReg a1,`4 ; storagePtr
GetReg a2,ptengine\libbase
!_PT_RescueRegs
MOVE.l a2,a6
JSR _LVO_PtGetAttr(a6)
!_PT_RestoreRegs
`1 = PutRegD0
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !PtSeek {modH,time}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - modH    : ???                                                             /
;/ - time    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro PtSeek ; {modH,time}
;PtSeek(mod,time)(a0,d0)
GetReg a0,`2 ; modH
GetReg d2,`3 ; time
GetReg a1,ptengine\libbase
MOVE.l d2,d0
!_PT_RescueRegs
MOVE.l a1,a6
JSR _LVO_PtSeek(a6)
!_PT_RestoreRegs
`1 = PutRegD0
End Macro

NEWTYPE.ptengine
*libbase.Library
usefilter.l
stereomix.l
tstmoddata.l
End NEWTYPE

DEFTYPE.ptengine ptengine
USEPATH ptengine

\stereomix = 50
\usefilter = 1

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = pt_InitLib {@doerror.l,@minVersion.l}                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - doerror.l    : ???                                                        /
;/ - minVersion.l    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l pt_InitLib {@doerror.l,@minVersion.l}
SHARED ptengine
If ptengine\libbase Then Function Return ptengine\libbase
If minVersion<0 Then minVersion = 0
ptengine\libbase = OpenLibrary_ ("ptplay.library",minVersion)
If ptengine\libbase
  ; ** Do some other init stuff here...
Else
  If doerror Then error {"Unable to open ptplay.library (v"+Str$(minVersion)+".0+)!"}
End If
Function Return ptengine\libbase
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = pt_CloseMod {*ptH.ptH}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ptH.ptH    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l pt_CloseMod {*ptH.ptH}
SHARED ptengine
succ.l = False
If *ptH
  If *ptH\modH
    !PtCleanup{succ,*ptH\modH} : *ptH\modH=0
  EndIf
  If *ptH\moddata
    FreeVec_ *ptH\moddata
    *ptH\moddata = 0
  End If
  FreeVec_ *ptH : *ptH=0
  succ.l = -1
End If
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = pt_Examine {filename.s}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l pt_Examine {filename.s}
SHARED ptengine
succ.l = False
If pt_InitLib{False,1} =0 Then Function Return False
fid.l = file_Open{filename.s,#file_read}
If fid>=0
  bsize.l   = Min(1200,file_GetLength{fid})
  If ptengine\tstmoddata=0 Then ptengine\tstmoddata = AllocVec_(1200,#MEMF_ANY)
  If ptengine\tstmoddata
    file_ReadMem{fid,ptengine\tstmoddata,bsize}
    !PtTest{modtype.l,&filename,ptengine\tstmoddata,bsize}
    Select modtype
      Case #PT_MOD_UNKNOWN      : succ=False
      Case #PT_MOD_PROTRACKER   : succ=True
      Case #PT_MOD_SOUNDTRACKER : succ=True
      Case #PT_MOD_SOUNDFX      : succ=True
      Default
        succ=True
    End Select
  End If
  file_Close{fid}
End If
Function Return succ
End Function


USEPATH *ptH
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = pt_OpenMod {filename.s,samplerate.l,channels.l}         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : ???                                                       /
;/ - samplerate.l    : ???                                                     /
;/ - channels.l    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l pt_OpenMod {filename.s,samplerate.l,channels.l}
SHARED ptengine
If dos_CheckStackSize{15000} = False
  error {"PT: ptplay.library needs a stack size of at least 15000 bytes!"}
  Function Return 0
End If
If pt_InitLib{True,1} =0 Then Function Return 0

*ptH.ptH = AllocVec_(SizeOf.ptH,#MEMF_CLEAR|#MEMF_ANY)
If *ptH
  *ptH\modH = 0
  *ptH\samplerate = samplerate
  *ptH\channels   = channels
  *ptH\bits       = 16
  *ptH\framesize  = *ptH\channels * *ptH\bits/8
  *ptH\modtype    = #PT_MOD_PROTRACKER
  *ptH\moddata    = 0
  *ptH\seekpos    = 0
  fid.l = file_Open{filename.s,#file_read}
  If fid>=0
    bsize.l = file_GetLength{fid}
    \moddata = AllocVec_(bsize,#MEMF_ANY)
    If \moddata
      \modsize = bsize
      file_ReadMem{fid,\moddata,\modsize}
    End If
    file_Close{fid}
    tstlen.l = Min(1200,\modsize)
    !PtTest{\modtype,&filename.s,\moddata,tstlen}
    !PtInit{\modH,\moddata,\modsize,\samplerate,\modtype}
    ;!PtSetAttrs {succ.l,\modH,Tags(#PTPLAY_Flags,#MODF_DOSONGEND|#MODF_ALLOWFILTER|#MODF_ALLOWPANNING  )}
  End If
  If *ptH\modH=0
    error {"Unable to init mod file!"}
    pt_CloseMod {*ptH}
    *ptH=0
  Else
    ; -)
  End If
Else
  error {"No enough memory for ptplay handle!"}
End If
Function Return *ptH
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: pt_SetAAFilter {onoff.l}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - onoff.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement pt_SetAAFilter{onoff.l}
SHARED ptengine
ptengine\usefilter = onoff
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: pt_SetStereoMix {mix.l}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mix.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement pt_SetStereoMix{mix.l}
SHARED ptengine
ptengine\stereomix = mix
End Statement
 


; stereomix = 0: mono
; stereomix = 50: 50/50
; stereomix = 100; full stereo (default)
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = pt_ReadData {*ptH.ptH,ptr.l,blength.l,@stereomix.l,@u:: /
;/ sefilter.l}                                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ptH.ptH    : ???                                                         /
;/ - ptr.l    : ???                                                            /
;/ - blength.l    : ???                                                        /
;/ - stereomix.l    : ???                                                      /
;/ - usefilter.l    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l pt_ReadData {*ptH.ptH,ptr.l,blength.l,@stereomix.l,@usefilter.l}
SHARED ptengine,ll.l,rr.l,roughnessr.l,roughnessl.l
\seekpos + blength / \framesize
!PtGetAttr{succ.l,\modH,#PTPLAY_Flags,&flags.l}
If (flags&#MODF_SONGEND)
  For n.l=0 To blength/2-1
    Poke.w ptr,0 : ptr+2
  Next
  Function Return False
End If
!PtRender {succ.l,\modH,ptr,ptr+2,\framesize,blength/\framesize,1,\bits,\channels}
succ=-1
flength.l = blength/4
xptr.l = ptr

#rough = 1000
#roughmin = #rough*3/ 9
#roughq = #rough*#rough
If usefilter=-1 Then usefilter=ptengine\usefilter
If usefilter
  roughnessl.l = *ptH\lrough
  roughnessr.l = *ptH\rrough
  ll.l = *ptH\lsamp
  rr.l = *ptH\rsamp
  For n.l=0 To flength-1
    l.l = Peek.w(ptr+n*4)
    diff.l = ((l-ll) * #rough) ASR 13 ; / 4096
    diff = diff*diff
    If diff>roughnessl
      roughnessl = (roughnessl *  15  + diff) ASR 4
    Else
      roughnessl = (roughnessl * 255 + diff ) ASR 8
    End If
    If roughnessl<#roughq
      x.l = roughnessl/#rough
      If x<#roughmin Then x=#roughmin
      ix.l = #rough-x
      ls.l = (l*x+ll*ix) / #rough
    Else
      ls = l
    End If
    Poke.w ptr+n*4,ls
    ll = ls

    r.l = Peek.w(ptr+n*4+2)
    diff.l = ((r-rr) * #rough) ASR 13 ; / 4096
    diff = diff*diff
    If diff>roughnessr
      roughnessr = (roughnessr *  15 + diff)  ASR 4
    Else
      roughnessr = (roughnessr * 255 + diff ) ASR 8
    End If

    If roughnessr<#roughq
      x.l = roughnessr/#rough
      If x<#roughmin Then x=#roughmin
      ix.l = #rough-x
      rs.l = (r*x+rr*ix) / #rough
    Else
      rs = r
    End If
    Poke.w ptr+n*4+2,rs
    rr = rs
  Next
  *ptH\lsamp = ll
  *ptH\rsamp = rr
  *ptH\lrough = roughnessl
  *ptH\rrough = roughnessr
End If

If stereomix<0 Then stereomix = ptengine\stereomix
If stereomix<100
  stereomix  = 128-(stereomix*128/100)
  istereomix.l = 256-stereomix
  For n.l=0 To flength-1
    l.l = Peek.w(ptr+n*4)
    r.l = Peek.w(ptr+n*4+2)
    l.l = (istereomix*l + r*stereomix) ASR 8
    r.l = (istereomix*r + l*stereomix) ASR 8
    Poke.w ptr+n*4,l
    Poke.w ptr+n*4+2,r
  Next
End If
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: pt_Free {}                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement pt_Free{}
SHARED ptengine
If ptengine\libbase Then CloseLibrary_(ptengine\libbase) : ptengine\libbase=0
If ptengine\tstmoddata Then FreeVec_ ptengine\tstmoddata
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = pt_Seek {*ptH.ptH,offset.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ptH.ptH    : ???                                                         /
;/ - offset.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l pt_Seek{*ptH.ptH,offset.l}
SHARED ptengine
;error {"Current: "+Str$(\seekpos)+" / Seek: "+Str$(offset)}
If offset><\seekpos
  time.l = offset / *ptH\samplerate
  If time<0 Then time=0
  !PtSeek {succ.l,*ptH\modH,time}
  !PtSetAttrs {succ.l,\modH,Tags(#PTPLAY_Flags,#MODF_DOSONGEND|#MODF_ALLOWFILTER|#MODF_ALLOWPANNING  )}
  \seekpos = offset
  succ.l = -1
Else
  succ.l=-1
End If
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = pt_GetLength {*ptH.ptH}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ptH.ptH    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l pt_GetLength {*ptH.ptH}
SHARED ptengine
tlength.l = -1
!PtGetAttr{succ.l,\modH,#PTPLAY_TotalTime ,&tlength}
If tlength>0 Then tlength * *ptH\samplerate
Function Return tlength
End Function

!autoexit{pt_Free}

CNIF #__include=0
  modfile.s = "Desktop:/Music/mod/exotic1.mod"
  NPrint "Will open MOD..."
  ptr.l = AllocVec_(40960,#MEMF_ANY)
  *ptH.ptH = pt_OpenMod{modfile,16000,1}
  If *ptH
    tlength.l = pt_GetLength{*ptH}
    NPrint "MOD is open, size = "+Str$(tlength/16000)+" s"
    While pt_ReadData{*ptH,ptr,40960} : Print "." : Wend : NPrint "!"
    pt_CloseMod{*ptH}
    NPrint "MOD converted to audio."
  Else
    NPrint {"Unable to open MOD!"}
  End If
  NPrint "Done."
  If ptr Then FreeVec_ ptr
  End
CEND

