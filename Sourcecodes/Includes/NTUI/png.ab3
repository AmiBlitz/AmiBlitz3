; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 234
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: png.include                                                           /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 29/12/2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements:  Amiblitz2.4, ab3zlib.library                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ This is a include to support the image.inlcude with png functionality.      /
;/                                                                             /
;/ Abstract:                                                                   /
;/ This include is of not much use stand alone, as you can load and save ima:: /
;/ ges through the image.include, but you might want to have a look at the s:: /
;/ ource code for educational reasons.                                         /
;/                                                                             /
;/ This include is used by the image.include to load the alpha channel of a :: /
;/ .png file, because picture.datatype on OS3.x does not support this.         /
;/ It can also be used to save a png file from an ARGB or RGB pixel array.     /
;/                                                                             /
;/ User Constants: none                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
XINCLUDE "error.include.ab3"
XINCLUDE "useful.include.ab3"
XINCLUDE "zlib.include.ab3"
CEND

NEWTYPE.tuiPNG_IHDR
_PNG.l
_check.l
csize.l
IHDR.l
img_width.l ; :              4 bytes
img_height.l ; :             4 bytes
img_bitdepth.b ; :          1 byte
img_colortype.b ; :         1 byte
img_compression_method.b ; : 1 byte
img_filter_method.b ; :          1 byte
img_interlace_method.b ; :   1 byte
b.b[4]
;dy.l
End NEWTYPE

NEWTYPE.tuiPNG_IEND
csize.l
IEND.l
End NEWTYPE

;Color                        Allowed     Interpretation
#ntui_png_color_gray  =   0 ;  1,2,4,8,16  Each pixel is a grayscale sample.
#ntui_png_color_rgb   =   2 ;  8,16        Each pixel is an R,G,B triple.
#ntui_png_color_clut  =   3 ;  1,2,4,8     Each pixel is a Index;  a PLTE chunk must appear.
#ntui_png_color_ga    =   4 ;  8,16        Each pixel is a grayscale sample, followed by an alpha sample.
#ntui_png_color_rgba  =   6 ;  8,16        Each pixel is an R,G,B triple, followed by an alpha sample.

#ntui_png_filter_none    =   0   ; None
#ntui_png_filter_sub     =   1   ; SUB
#ntui_png_filter_up      =   2   ; Up
#ntui_png_filter_average =   3   ; Average
#ntui_png_filter_paeth   =   4   ; Paeth

#ntui_png_interlace_none     = 0 ; no interlacing
#ntui_png_interlace_adam7    = 1 ; adam7 scheme interlacing
#ntui_png_compression_zlib   = 0 ; zlib compression

#ntui_png_filtermethod_5  = 0; 5 filters, standard

#ntui_png_unfilter_ARGB   = 0
#ntui_png_unfilter_alpha  = 1
#ntui_png_unfilter_RGB    = 2

NEWTYPE.tuiPNG_IDAT
csize.l
IDAT.l
End NEWTYPE

NEWTYPE.tuiPNG
*fh.FileHandle
fpos.l
*fib.FileInfoBlock
IHDR.tuiPNG_IHDR
IDAT.tuiPNG_IDAT
tmpP.l
blength.l
compSize.l
End NEWTYPE

USEPATH *tuiPNG
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  width.l = ntui_GetPNGWidth {*tuiPNG.tuiPNG}                        /
;/                                                                             /
;/ Description:                                                                /
;/ img_width.l ; :              4 bytes                                        /
;/ img_height.l ; :             4 bytes                                        /
;/ img_bitdepth.b ; :          1 byte                                          /
;/ img_colortype.b ; :         1 byte                                          /
;/ img_compression_method.b ; : 1 byte                                         /
;/ img_filter_method.b ; :          1 byte                                     /
;/ img_interlace_method.b ; :   1 byte                                         /
;/ dy.l                                                                        /
;/ Color                        Allowed     Interpretation                     /
;/ #ntui_png_color_gray  =   0 ;  1,2,4,8,16  Each pixel is a grayscale samp:: /
;/ le.                                                                         /
;/ #ntui_png_color_rgb   =   2 ;  8,16        Each pixel is an R,G,B triple.   /
;/ #ntui_png_color_clut  =   3 ;  1,2,4,8     Each pixel is a Index;  a PLTE:: /
;/  chunk must appear.                                                         /
;/ #ntui_png_color_ga    =   4 ;  8,16        Each pixel is a grayscale samp:: /
;/ le, followed by an alpha sample.                                            /
;/ #ntui_png_color_rgba  =   6 ;  8,16        Each pixel is an R,G,B triple,:: /
;/  followed by an alpha sample.                                               /
;/ #ntui_png_filter_none    =   0   ; None                                     /
;/ #ntui_png_filter_sub     =   1   ; SUB                                      /
;/ #ntui_png_filter_up      =   2   ; Up                                       /
;/ #ntui_png_filter_average =   3   ; Average                                  /
;/ #ntui_png_filter_paeth   =   4   ; Paeth                                    /
;/ #ntui_png_interlace_none     = 0 ; no interlacing                           /
;/ #ntui_png_interlace_adam7    = 1 ; adam7 scheme interlacing                 /
;/ #ntui_png_compression_zlib   = 0 ; zlib compression                         /
;/ #ntui_png_filtermethod_5  = 0; 5 filters, standard                          /
;/                                                                             /
;/ Return the width of the open png image in pixel.                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiPNG.tuiPNG    : ???                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - width.l     : width in pixel                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_GetPNGWidth{*tuiPNG.tuiPNG}
Function Return *tuiPNG\IHDR\img_width
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  height.l = ntui_GetPNGHeight {*tuiPNG.tuiPNG}                      /
;/                                                                             /
;/ Description:                                                                /
;/ Return the height of the png image in pixel.                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiPNG.tuiPNG    : ???                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - height.l     : height in pixel                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_GetPNGHeight{*tuiPNG.tuiPNG}
Function Return *tuiPNG\IHDR\img_height
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ntui_FindPNGChunk {*fh.FileHandle,chunk.l,posP.l,blen:: /
;/ gth.l,immediate.l}                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ Find a chunk within a png file.                                             /
;/ NOTE: The chunk format is different from the FORM chunks, so the png.incl:: /
;/ ude needs its own function.                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - dos.l    : file object ID (file.include)                                  /
;/ - chunk.l    : chunk header ID                                              /
;/ - pos.l    : file seek position from where to start                         /
;/ - blength.l    : maximum byte length                                        /
;/ - immediate.l    : allow the first chunk to be found                        /
;/ - *fh.FileHandle    : ???                                                   /
;/ - posP.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_FindPNGChunk{*fh.FileHandle,chunk.l,posP.l,blength.l,immediate.l}
count.l = 0
pos.l = Peek.l(posP)
If immediate Then immediate = 0:Else immediate=1
tlength.l = blength
blength-pos
Repeat
  If Seek_ (*fh,pos,#OFFSET_BEGINNING)
    If (Read_(*fh,&chlen.l,4)=4) AND (Read_(*fh,&dummy.l,4)=4)
      blength-chlen - 8 -4
      pos + chlen + 8 +4
      If pos>=tlength OR pos<=0 Then blength=-1
      count+1
    Else
      blength=-1
      dummy=0
    End If
  Else
    blength=0
    dummy=0
    ;error{"Called file_findchunk() with invalid seek position ! ("+Str$(pos)+")"}
  End If
  If count<=immediate Then dummy=0

Until dummy = chunk OR blength<=0
If dummy = chunk
  pos = pos-chlen-8-4
  dummy=Seek_(*fh,pos,#OFFSET_BEGINNING)
  Poke.l posP,pos
  Function Return pos
End If
Function Return 0
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_FreePNG {*tuiPNG.tuiPNG}                                       /
;/                                                                             /
;/ Description:                                                                /
;/     ;error{"Called file_findchunk() with invalid seek position ! ("+Str$(:: /
;/ pos)+")"}                                                                   /
;/                                                                             /
;/ Close the png file.                                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiPNG.tuiPNG    : ???                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_FreePNG{*tuiPNG.tuiPNG}
If *tuiPNG\tmpP Then FreeVec_ *tuiPNG\tmpP : *tuiPNG\tmpP = Null
If *tuiPNG\fh   Then Close_ *tuiPNG\fh : \fh=Null
FreeVec_ *tuiPNG : *tuiPNG = Null
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.l = ntui_ReadPNG {filename.s}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ Open a png file for reading.                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : file name of the png file                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.l     : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_ReadPNG{filename.s}
*tuiPNG.tuiPNG = AllocVec_(SizeOf.tuiPNG,#MEMF_ANY)
If *tuiPNG =Null Then Function Return Null
*tuiPNG\tmpP = Null
*tuiPNG\fh = Open_ (&filename,#MODE_OLDFILE)
If *tuiPNG\fh
  \fpos = 0
  If Read_(*tuiPNG\fh,*tuiPNG\IHDR,SizeOf.tuiPNG_IHDR-1)=SizeOf.tuiPNG_IHDR-1
    \fpos + SizeOf.tuiPNG_IHDR-1
    If (*tuiPNG\IHDR\_PNG=$89504E47) AND (*tuiPNG\IHDR\_check=$0D0A1A0A) AND (*tuiPNG\IHDR\IHDR=@"IHDR")
      If (*tuiPNG\IHDR\img_colortype = #ntui_png_color_rgba) AND (*tuiPNG\IHDR\img_bitdepth = 8)
        If (*tuiPNG\IHDR\img_compression_method = #ntui_png_compression_zlib) AND (*tuiPNG\IHDR\img_filter_method=#ntui_png_filtermethod_5)
          If (*tuiPNG\IHDR\img_interlace_method=#ntui_png_interlace_none OR *tuiPNG\IHDR\img_interlace_method=#ntui_png_interlace_adam7)
            *tuiPNG\fib = AllocDosObject_ (#DOS_FIB,#TAG_DONE)
            If *tuiPNG\fib
              ExamineFH_ \fh,\fib
              \blength = \fib\fib_Size
              FreeDosObject_ #DOS_FIB,\fib
              \fib = Null
            End If
            offset.l = 0
            \tmpP = AllocVec_(\blength,#MEMF_ANY)
            Seek_ \fh,\fpos,#OFFSET_BEGINNING

            While ntui_FindPNGChunk{\fh,@"IDAT",&\fpos,\blength,True}
              If (Read_(\fh,*tuiPNG\IDAT,SizeOf.tuiPNG_IDAT)=SizeOf.tuiPNG_IDAT)
                \fpos + SizeOf.tuiPNG_IDAT
                If (Read_(\fh,\tmpP+offset,*tuiPNG\IDAT\csize)=*tuiPNG\IDAT\csize)
                  \fpos + *tuiPNG\IDAT\csize
                  offset + *tuiPNG\IDAT\csize
                  Read_ \fh,&dummy.l,4  : \fpos+4
                End If
              End If
            Wend
            \compSize = offset

            Function Return *tuiPNG
          End If
        End If
      End If
    End If
  End If
End If
ntui_FreePNG{*tuiPNG}
Function Return Null
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ntui_UnfilterPNG {sourceaddr.l,destaddr.l,pixelwidth.:: /
;/ l,scanlines.l,bpr.l,bpp.l}                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - bpr.l    : ???                                                            /
;/ - mode.l    : ???                                                           /
;/ - pixelwidth.l    : ???                                                     /
;/ - scanlines.l    : ???                                                      /
;/ - bpp.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/ sBytesPerPixel.l = 4 ; we only decode ARGB pngs                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_UnfilterPNG{sourceaddr.l,destaddr.l,pixelwidth.l,scanlines.l,bpr.l,bpp.l}
sBytesPerPixel.l = 4 ; we only decode ARGB pngs
sBytesPerRow.l = pixelwidth*sBytesPerPixel

dBytesPerRow.l   = bpr
dBytesPerPixel.l = bpp
Aa.l = 0 ; left
Ab.l = 0 ; above
Ac.l = 0 ; upperleft
Ra.l = 0 ; left
Rb.l = 0 ; above
Rc.l = 0 ; upperleft
Ga.l = 0 ; left
Gb.l = 0 ; above
Gc.l = 0 ; upperleft
Ba.l = 0 ; left
Bb.l = 0 ; above
Bc.l = 0 ; upperleft
Apx.l = 0
Rpx.l = 0
Gpx.l = 0
Bpx.l = 0

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ntui_png_unfilter_peath                                            /
;/                                                                             /
;/ Description:                                                                /
;/ Aa.l = 0 ; left                                                             /
;/ Ab.l = 0 ; above                                                            /
;/ Ac.l = 0 ; upperleft                                                        /
;/ Ra.l = 0 ; left                                                             /
;/ Rb.l = 0 ; above                                                            /
;/ Rc.l = 0 ; upperleft                                                        /
;/ Ga.l = 0 ; left                                                             /
;/ Gb.l = 0 ; above                                                            /
;/ Gc.l = 0 ; upperleft                                                        /
;/ Ba.l = 0 ; left                                                             /
;/ Bb.l = 0 ; above                                                            /
;/ Bc.l = 0 ; upperleft                                                        /
;/                                                                             /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ntui_png_unfilter_peath
  p.l  = `1a + `1b - `1c
  pa.l = (p-`1a) : If pa<0 Then pa=0-pa
  pb.l = (p-`1b) : If pb<0 Then pb=0-pb
  pc.l = (p-`1c) : If pc<0 Then pc=0-pc
  Poke.b &`1px+3,Peek.b(sourceaddr+(`2))

  If pa<=pb AND pa<=pc
    p = `1a + `1px
  Else
    If pb<=pc
      p = `1b + `1px
    Else
      p = `1c + `1px
    End If
  End If
  Poke.b destaddr+(`3),Peek.b(&p+3)
  `1a = p & $FF
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ntui_png_unfilter_up                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro  ntui_png_unfilter_up
Poke.b &`1px+3,Peek.b(sourceaddr+`2)
p.l = `1px + `1b
Poke.b destaddr+`3,Peek.b(&p+3)
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ntui_png_unfilter_sub                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro  ntui_png_unfilter_sub
Poke.b &`1px+3,Peek.b(sourceaddr+`2)
p.l = `1px + `1a
`1a = p & $FF
Poke.b destaddr+`3,Peek.b(&p+3)
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ntui_png_unfilter_average                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro  ntui_png_unfilter_average
Poke.b &`1px+3,Peek.b(sourceaddr+`2)
;p.l = Int((`1a+`1b)/2) + `1px
p.l = ((`1a+`1b) LSR 1) + `1px
`1a = p & $FF
Poke.b destaddr+`3,Peek.b(&p+3)
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ntui_png_init_a                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ p.l = Int((`1a+`1b)/2) + `1px                                               /
;/                                                                             /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro  ntui_png_init_a
  Aa=0:Ra=0:Ga=0:Ba=0
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ntui_png_init_b                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro  ntui_png_init_b
  If y>0
    Poke.b &Ab+3,Peek.b(destaddr-dBytesPerRow+0)
    Poke.b &Rb+3,Peek.b(destaddr-dBytesPerRow+1)
    Poke.b &Gb+3,Peek.b(destaddr-dBytesPerRow+2)
    Poke.b &Bb+3,Peek.b(destaddr-dBytesPerRow+3)
  Else
    Ab=0:Rb=0:Gb=0:Bb=0
  End If
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ntui_png_init_c                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro  ntui_png_init_c
  Ac=0:Rc=0:Gc=0:Bc=0
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ntui_png_shift_b                                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro  ntui_png_shift_b
  If y>0
    Poke.b &Ab+3,Peek.b(destaddr-dBytesPerRow+0)
    Poke.b &Rb+3,Peek.b(destaddr-dBytesPerRow+1)
    Poke.b &Gb+3,Peek.b(destaddr-dBytesPerRow+2)
    Poke.b &Bb+3,Peek.b(destaddr-dBytesPerRow+3)
  End If
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ntui_png_shift_c                                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/   ;If y>0                                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro  ntui_png_shift_c
  ;If y>0
    Ac = Ab
    Rc = Rb
    Gc = Gb
    Bc = Bb
  ;End If
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ntui_png_inc_buffer                                                /
;/                                                                             /
;/ Description:                                                                /
;/   ;End If                                                                   /
;/                                                                             /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro  ntui_png_inc_buffer
  destaddr+dBytesPerPixel
  sourceaddr+sBytesPerPixel
End Macro
sourcebase.l = sourceaddr
destbase.l = destaddr
For y.l = 0 To scanlines-1 ; *tuiPNG\IHDR\img_height-1
  destaddr.l = destbase + y*dBytesPerRow
  prefilt.b = filt.b
  filt.b = Peek.b(sourceaddr)
  sourceaddr+1
     ; error{"Decoding filter id="+Str$(filt)+"!"}
  Select filt
    Case #ntui_png_filter_none
          For x.l = 0 To pixelwidth-1 ; *tuiPNG\IHDR\img_width-1
            Poke.b destaddr+3,Peek.b(sourceaddr+2) ; B
            Poke.b destaddr+2,Peek.b(sourceaddr+1) ; G
            Poke.b destaddr+1,Peek.b(sourceaddr+0) ; R
            Poke.b destaddr+0,Peek.b(sourceaddr+3) ; A
            !ntui_png_inc_buffer
          Next

    Case #ntui_png_filter_sub
          !ntui_png_init_a
          For x.l = 0 To pixelwidth-1 ;*tuiPNG\IHDR\img_width-1
            !ntui_png_unfilter_sub{B,2,3}
            !ntui_png_unfilter_sub{G,1,2}
            !ntui_png_unfilter_sub{R,0,1}
            !ntui_png_unfilter_sub{A,3,0}
            !ntui_png_inc_buffer
          Next

    Case #ntui_png_filter_up
          !ntui_png_init_b
          For x.l = 0 To pixelwidth-1;*tuiPNG\IHDR\img_width-1
            !ntui_png_unfilter_up{B,2,3}
            !ntui_png_unfilter_up{G,1,2}
            !ntui_png_unfilter_up{R,0,1}
            !ntui_png_unfilter_up{A,3,0}
            !ntui_png_inc_buffer
            !ntui_png_shift_b
          Next

    Case #ntui_png_filter_average
          !ntui_png_init_a
          !ntui_png_init_b
          For x.l = 0 To pixelwidth-1;*tuiPNG\IHDR\img_width-1
            !ntui_png_unfilter_average{B,2,3}
            !ntui_png_unfilter_average{G,1,2}
            !ntui_png_unfilter_average{R,0,1}
            !ntui_png_unfilter_average{A,3,0}
            !ntui_png_inc_buffer
            !ntui_png_shift_b
          Next

    Case #ntui_png_filter_paeth
          !ntui_png_init_a
          !ntui_png_init_b
          !ntui_png_init_c
          For x.l = 0 To pixelwidth-1;*tuiPNG\IHDR\img_width-1
            !ntui_png_unfilter_peath{B,2,3}
            !ntui_png_unfilter_peath{G,1,2}
            !ntui_png_unfilter_peath{R,0,1}
            !ntui_png_unfilter_peath{A,3,0}
            !ntui_png_inc_buffer
            !ntui_png_shift_c
            !ntui_png_shift_b
          Next

    Default
       sourceaddr+sBytesPerRow
       destaddr+dBytesPerRow
      If errdone.l=0
        error{"Invalid filter in png file (line "+Str$(y)+", filter id "+Str$(filt)+", pre id "+Str$(prefilt)+")!"}
        errdone = -1
      End If
   End Select
Next
BytesDone.l = sourceaddr-sourcebase
Function Return BytesDone
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ntui_png_unfilter_adam7_argb {xoff,yoff,xstep,ystep}               /
;/                                                                             /
;/ Description:                                                                /
;/      ; error{"Decoding filter id="+Str$(filt)+"!"}                          /
;/                                                                             /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - xoff    : ???                                                             /
;/ - yoff    : ???                                                             /
;/ - xstep    : ???                                                            /
;/ - ystep    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ntui_png_unfilter_adam7_argb;{xoff,yoff,xstep,ystep}
            pixelxoff.l  = `1
            pixelxstep.l = `3
            pixelyoff.l  = `2
            pixelystep.l = `4
            pixelwidth.l = (*tuiPNG\IHDR\img_width+pixelxstep-1-pixelxoff)/pixelxstep
            scanlines.l  = (*tuiPNG\IHDR\img_height+pixelystep-1-pixelyoff)/pixelystep
            destoff.l    = pixelxoff *4 + pixelyoff * bpr
            If pixelwidth>0 AND scanlines>0
              temp+  ntui_UnfilterPNG{temp,destbuffer+destoff,pixelwidth,scanlines,bpr*pixelystep,4*pixelxstep}
            End If
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DecodePNG {*tuiPNG.tuiPNG,destbuffer.l,bpr.l}                  /
;/                                                                             /
;/ Description:                                                                /
;/ Decode (means decompress and unfilter) a png buffer into an ARGB pixel ar:: /
;/ ray.                                                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - destbuffer.l    : memory pointer of the ARGB pixel array (make sure it :: /
;/ is big enough: width*height*4 bytes!)                                       /
;/ - bpr.l    : bpr of the ARGB pixel array                                    /
;/ - *tuiPNG.tuiPNG    : ???                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_DecodePNG{*tuiPNG.tuiPNG,destbuffer.l,bpr.l}

If \tmpP
  If destbuffer
    temp_size.l = *tuiPNG\IHDR\img_width * *tuiPNG\IHDR\img_height*4  +*tuiPNG\IHDR\img_height*2 +4
    temp.l = AllocVec_(temp_size,#MEMF_ANY);_ntui_ObtainTempBuffer{temp_size}
    tempx.l = temp
    If temp
      ;error.l= GZ_DecompressMem_(\tmpP,\compSize,temp,temp_size)
      error.l = zlib_Uncompress{temp,&temp_size,\tmpP,\compSize}
      If error=0
        Select *tuiPNG\IHDR\img_interlace_method
          Case #ntui_png_interlace_none
            ntui_UnfilterPNG{temp,destbuffer,*tuiPNG\IHDR\img_width,*tuiPNG\IHDR\img_height,bpr,4}
          Case #ntui_png_interlace_adam7
            !ntui_png_unfilter_adam7_argb{0,0,8,8}
            !ntui_png_unfilter_adam7_argb{4,0,8,8}
            !ntui_png_unfilter_adam7_argb{0,4,4,8}
            !ntui_png_unfilter_adam7_argb{2,0,4,4}
            !ntui_png_unfilter_adam7_argb{0,2,2,4}
            !ntui_png_unfilter_adam7_argb{1,0,2,2}
            !ntui_png_unfilter_adam7_argb{0,1,1,2}
         ; error{"left "+Str$(temp_size-temp+tempx)+" bytes!"}
        End Select
      Else
        error{"\\__THIS_FUNCTION: Unable to decrunch! (zlib err="+Str$(error)+")"}
      End If
    Else
      error{"\\__THIS_FUNCTION: Not enough memory for temp buffer!"}
    End If
    ;_ntui_ReleaseTempBuffer{}
    FreeVec_ temp
  End If
End If
End Statement

CNIF #__include=0

*tuiPNG.tuiPNG= ntui_ReadPNG{"/Data/AlphaBlit.png"}
If *tuiPNG
  NPrint "PNG file open !"
  png_FreePNG{}
Else
  NPrint "File is not an PNG file !"
End If

;Delay_ 200
End

CEND
