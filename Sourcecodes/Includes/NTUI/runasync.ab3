; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 0
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 1024
; MakeSmallest    = 0
; FuncOptimize    = 0
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 4000
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = -1
; InterruptCheck  = -1
; AutoRun         = -1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 0
; CursorColumn    = 0
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; /XTRA
RunErrsOff ; debugger must be switched off

NEWTYPE.tuiVarArgs

  lock.l
  argC.l
  *argVA.b[16]

End NEWTYPE


ntui_RunAsyncAndNotifyMain:
Function.l ntui_RunAsyncAndNotifyMain{}

  MOVE.l _ntui_runasync_amiblitz3_global_base,a5
  *pargs.tuiVarArgs = ?_ntui_runasync_args

  *exe.str        = Null
  *cliargs.str    = Null
  *outfile.str    = Null
  *notifyId.str   = Null
  *string.str     = Null
  *cmdline.str    = Null
  *obj.tuiObject              = *pargs\argVA[0]
  str_WritePtrAsync{&*exe      ,*pargs\argVA[1]}
  str_WritePtrAsync{&*cliargs  ,*pargs\argVA[2]}
  str_WritePtrAsync{&*outfile  ,*pargs\argVA[3]}
  str_WritePtrAsync{&*notifyId ,*pargs\argVA[4]}
  value.l                     = *pargs\argVA[5]
  str_WritePtrAsync{&*string   ,*pargs\argVA[6]}
  str_WritePtrAsync{&*cmdline  ,*pargs\argVA[7]}
  If *obj Then ntui_Lock{*obj}
  *pargs\lock = False
  *pargs = Null

  If str_LenAsync{*cmdline}>0
    Execute_ str_GetPtrAsync{*cmdline},Null,Null
  Else
    ;following code fails because input is not allowed to be null (RKM)
    outputFH.l = Open_(str_GetPtrAsync{*outfile},#MODE_NEWFILE)
    If outputFH
      n.l=0
      *tagList.tagL10 = AllocVec_(SizeOf.tagL10,#MEMF_ANY)
      If *tagList
        *tagList\tag[n]\ti_Tag = #NP_Priority  , 0                         : n=n+1
        *tagList\tag[n]\ti_Tag = #NP_Arguments , str_GetPtrAsync{*cliargs} : n=n+1
        *tagList\tag[n]\ti_Tag = #NP_StackSize , 8192                      : n=n+1
        *tagList\tag[n]\ti_Tag = #SYS_Input    , Null                      : n=n+1
        *tagList\tag[n]\ti_Tag = #SYS_Output   , outputFH                  : n=n+1
        *tagList\tag[n]\ti_Tag = #TAG_DONE     , 0
        ret.l = SystemTagList_ (str_GetPtrAsync{*exe},*tagList)
      End If
      Close_ outputFH
    End If
  End If
  ntui_PostNotifyWithData{*obj,str_GetPtrAsync{*notifyId},#TUIEV_USER,value,str_GetPtrAsync{*string},0,0,0,0}

  str_FreeAsync{&*exe}
  str_FreeAsync{&*cliargs}
  str_FreeAsync{&*outfile}
  str_FreeAsync{&*notifyId}
  str_FreeAsync{&*string}
  str_FreeAsync{&*cmdline}
  If *obj Then ntui_Unlock{*obj}
  Function Return 0
  
_ntui_runasync_amiblitz3_global_base:
  Dc.l 0

End Function
!_MakeGlobalFuncPointer_RunErrsOff{ntui_RunAsyncAndNotifyMain,{}}
LastRunErrsMode

ntui_RunAsyncAndNotify:
Function.l ntui_RunAsyncAndNotify{*obj.tuiObject,exe.s,params.s,outfile.s,notifyId.s,value.l,string.s}

  DEFTYPE.tag5 tagList
  MOVE.l a5,_ntui_runasync_amiblitz3_global_base
  tagList\ti_Tag = #NP_Entry,*ntui_RunAsyncAndNotifyMain,#NP_Name,?_ntui_runasync_taskname,#NP_Priority,0,#NP_StackSize,8192,#TAG_DONE,0

  commandline.s = "\\22"+exe+"\\22 >\\22"+outfile+"\\22 "+params
  *args.tuiVarArgs = ?_ntui_runasync_args
  *args\lock = True
  *args\argVA[0] = *obj
  *args\argVA[1] = &exe
  *args\argVA[2] = &params
  *args\argVA[3] = &outfile
  *args\argVA[4] = &notifyId
  *args\argVA[5] = value
  *args\argVA[6] = &string
  *args\argVA[7] = &commandline
  *args\argC = 8

  *process.Process = CreateNewProc_(tagList)
  If *process
    While (*args\lock) : Delay_ 1 : Wend
  EndIf
    
  Function Return *process><Null
  
_ntui_runasync_taskname:
  Dc.b "NTUI RunAsync",0
  Even
  
_ntui_runasync_args:
  Dc.l 0 ; lock
  Dc.l 0 ; argC
  Dc.l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; argVA
  
End Function
!_MakeGlobalFuncPointer{ntui_RunAsyncAndNotify,{Null,"","","","",0,""}}
