; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 14
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 80000
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1792
; CursorColumn    = 71
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max ChunkyBuffer= 2
; /XTRA
#TUI_HAS_LISTVIEW = 1

;X are all str_Read/Writes with &
;X Are onXZY events thrown?
;X Are onXZY event handlers initialized (constructor) and freed (Deinit)?
;X Are onXZY event handlers reachable via XML and SetAttr/GetAttr
;- remove *ev\tuiObject=... when notifyID is sent <======================== Why?
;X bool return values .w (get/setAttr/Dispatch are Bool!)
;X have all Pointer Return values? cast will be (.tuiType)
;X XML wrapper should Use SetObjectAttr instead of SetAttr For performance issues
;X is Syntax of getters AND setters OK (take pointers to fill, return value is bool)?
;X Every Setter should have a Getter AND v.v.
;X*ev shall be never never destroyed, Use tuiHandleNotify Macro !!!
;X if value or string is changed use parent TUIA values but treat them ::WAS: Double Definitions of TUIA_ NOT allowed! Make own AND wrapp
;X are ASSERTs Used where it makes sense? (also assert the Object class!!!)
;X set "b" Builder functions
;- are all string freed On deinit?
;- does it only draw If visible?
;X does dispatch Event correctly
;X make constructor with only taglist
;X Make punction pointers via global variable (MakeGlobalFunctionPointer)
;X do we read/write notifyIDs to \notifyID and not the NotifyHandler itself?
;X has #TUI_HAS_XZY ?
;X remove USEPATH
;X XML Register functions
;X Remove __include and optimize
;X add fg and bg Image drawing
;X are all bindings done?


;/* ntui Listview Attributes */
#TUILVA_BASE              =  #TUIA_USER
#TUILVA_MULTISELECT       =  #TUILVA_BASE + 1 ; lv
#TUILVA_CELLCONTENT       =  #TUILVA_BASE + 2
#TUILVA_TITLE             =  #TUILVA_BASE + 3
#TUILVA_TOPITEM           =  #TUILVA_BASE + 4
#TUILVA_LEFTOFFSET        =  #TUILVA_BASE + 5
#TUILVA_TOTALITEMS        =  #TUILVA_BASE + 6
#TUILVA_TOTALWIDTH        =  #TUILVA_BASE + 7
#TUILVA_VISIBLEITEMS      =  #TUILVA_BASE + 8
#TUILVA_VISIBLEWIDTH      =  #TUILVA_BASE + 9
#TUILVA_ITEMHEIGHT        =  #TUILVA_BASE + 10
#TUILVA_TITLEHEIGHT       =  #TUILVA_BASE + 11
#TUILVA_ONSELECT          =  #TUILVA_BASE + 12
#TUILVA_ONSELECTCB        =  #TUILVA_BASE + 13
#TUILVA_ONTOUCH           =  #TUILVA_BASE + 14
#TUILVA_ONTOUCHCB         =  #TUILVA_BASE + 15
#TUILVA_ONFILELISTENERCLOSE   =  #TUILVA_BASE + 16
#TUILVA_ONFILELISTENERCLOSECB =  #TUILVA_BASE + 17
#TUILVA_SCROLLERMODE      =  #TUILVA_BASE + 18

#TUILVEV_APPEND  = #TUIEV_USER +1
#TUILVEV_FLCLOSE = #TUIEV_USER +2


NEWTYPE.tuiListCell

  addFlags.l                ; additional flags For column
  pixWidth.l                ; real pixel width
  *img.tuiTBImage           ; image, if any
  textLen.l                 ; text length cache
  ; text string ...

End NEWTYPE


NEWTYPE.tuiListItem

  colN.l                    ; number of columns
  *cellA.tuiListCell        ; [...] ; array of cell items
  cellSize.l                ; size of the cellA in bytes
  userData.l                ; user data
  itemID.l                  ; item Id
  addFlags.l                ; additional flags for item
  *rawLabel.str

End NEWTYPE

#TUILV_MAXSORTFUNCS = 16
NEWTYPE.tuiListView

  obj.tuiObject             ; tui object header

  ; layout
  totalItems.l              ; height in rows
  totalWidth.l              ; width in pixels
  visibleItems.l            ; visible in rows
  visibleWidth.l            ; visible in pixels
  topItem.l                 ; offset in rows
  leftOffset.l              ; offset in pixels
  itemHeight.l              ; height of one item
  titleHeight.l             ; height of title item

  cellPadding.tuiRect

  *hScroller.tuiScroller    ; we have horizontal scroller
  *vScroller.tuiScroller    ; we have vertical scroller

  step_.tuiPixel

  ; database
  *listP.tuiListItem        ; linked list of items
  allocN.l                  ; allocated items
  incN.l                    ; buffer increase
  title.tuiListItem         ; title item

  ; functions
  multiSelect.l             ; multiselect activated
  seekPos.l                 ; last queries item

  pressedColN.l
  *pressedCell.tuiListCell
  scrollerMode.l
  slideMode.l

  ankerX.l

  ; sorting
  primeSortCol.l
  primeSortDir.l
  *primeSortImgUp.tuiTBImage
  *primeSortImgDown.tuiTBImage
  secondSortCol.l
  secondSortDir.l
  *secondSortImgUp.tuiTBImage
  *secondSortImgDown.tuiTBImage
  sortingDirty.l

  ; onEvents...
  onSelect.tuiNotifyHandler
  onTouch.tuiNotifyHandler
  onFileListenerClose.tuiNotifyHandler

  *fileListener.tuiFileListener
  *memPool.l
  *sortFunc.tuiFunc[#TUILV_MAXSORTFUNCS]
  *sortA.l
  sortN.l
  
End NEWTYPE

RunErrsOff ; debugger must be switched off


; return 0 if everything is fine, or error code
_lv_OnDataCB:
Function.l _lv_OnDataCB{*fileListener.tuiFileListener,dataP.l,dataLen.l}

   m.l = 0
   For n.l=0 To dataLen-1
     c.b = Peek.b(dataP+n)
     Select c
       Case 10
         Poke.b *fileListener\tempPtr + *fileListener\tempOff,0
         ntui_PostEvent{*fileListener\obj,#TUILVEV_APPEND,0,*fileListener\tempPtr}
         *fileListener\tempOff = 0
       Default
         Poke.b *fileListener\tempPtr + *fileListener\tempOff,c
         If *fileListener\tempOff<1023 Then *fileListener\tempOff+1
     End Select
   Next

   Function Return #TUIFLE_OK

End Function
!_MakeGlobalFuncPointer_RunErrsOff{_lv_OnDataCB,{Null,Null,0}}


; return 0 if everything is fine, or error code
_lv_OnCloseCB:
Function.l _lv_OnCloseCB{*fileListener.tuiFileListener}

  If *fileListener\tempOff>0
    Poke.b *fileListener\tempPtr + *fileListener\tempOff,0
    ntui_PostEvent{*fileListener\obj,#TUILVEV_APPEND,0,*fileListener\tempPtr}
  End If
  FreeVec_ *fileListener\tempPtr : *fileListener\tempPtr=Null

  ntui_PostEvent{*fileListener\obj,#TUILVEV_FLCLOSE}
  Function Return #TUIFLE_OK

End Function
!_MakeGlobalFuncPointer_RunErrsOff{_lv_OnCloseCB,{Null}}


_lv_OnFailCB:
Function.l _lv_OnFailCB{*fileListener.tuiFileListener,err.l}

   !_CallFuncPointer{*fileListener\onDataCB,  *fileListener\err,*fileListener,?__lv_errmsg,12}
   Function Return err

   __lv_errmsg:
   Dc.b "Pipe ERROR!",10,0
End Function
!_MakeGlobalFuncPointer_RunErrsOff{_lv_OnFailCB,{Null,0}}


; return 0 if everything is fine, or error code
_lv_OnOpenCB:
Function.l _lv_OnOpenCB{*fileListener.tuiFileListener}

  *fileListener\tempPtr = AllocVec_(1024,#MEMF_ANY)
  *fileListener\tempOff = 0
  If *fileListener\tempPtr=Null Then Function Return #TUIFLE_USERERROR
  Function Return #TUIFLE_OK

End Function
!_MakeGlobalFuncPointer_RunErrsOff{_lv_OnOpenCB,{Null}}


_lv_DefaultCellCompareCB:
Function.l _lv_DefaultCellCompareCB{*cellA.tuiListCell,*cellB.tuiListCell}

  If *cellA\textLen>*cellB\textLen Then Function Return 1
  If *cellA\textLen<*cellB\textLen Then Function Return -1
  Function Return 0
  
End Function
!_MakeGlobalFuncPointer_RunErrsOff{_lv_DefaultCellCompareCB,{Null,Null}}

LastRunErrsMode


Function.l ntui_SetListViewFileListener{*listView.tuiListView,*filenameP.b}
  !_ASSERT{*listView}
  !_ASSERT{*filenameP}

  If *listView\fileListener Then ntui_FreeFileListener{*listView\fileListener}
  *listView\fileListener = ntui_FileListener{*listView,*filenameP,(.tuiFunc)*_lv_OnOpenCB,(.tuiFunc)*_lv_OnCloseCB,(.tuiFunc)*_lv_OnFailCB,(.tuiFunc)*_lv_OnDataCB}
  Function Return *listView\fileListener><Null

End Function


Function.l _ntui_ParseListItem{*listView.tuiListView,*listItem.tuiListItem,*string.str}
  !_ASSERT{*listView}
  !_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}

  If *listItem =Null Then Function Return Null
  *engine.tuiEngine = *listView\obj\engine
  If *engine=Null Then Function Return Null

  ; parse the label...
  stringP.l  = str_GetPtr{*string}
  l.l        = str_Len{*string}
  i.l        = 0
  ;If (*listItem\cellA) Then FreeVec_ *listItem\cellA : *listItem\cellA=Null

  baseP.l = _ntui_ObtainTempBuffer{(l+1) * SizeOf.tuiListCell}
  *listItem\colN = 0
  labelP.l = baseP
  *cell.tuiListCell = labelP
  *cell\textLen  = 0
  *cell\img      = Null
  *cell\addFlags = 0
  *cell\pixWidth = 0
  labelP + SizeOf.tuiListCell

  While (i<l) ; fill the columns e.g.
    Select Peek.b(stringP+i)
      Case @"|"
        Poke.b labelP,0 : labelP+1
        If (labelP&1) Then Poke.b labelP,0 : labelP+1
        *listItem\colN+1 : *cell = labelP  : labelP+SizeOf.tuiListCell
        *cell\textLen  = 0
        *cell\img      = Null
        *cell\addFlags = 0
        *cell\pixWidth = 0
      Case @"\"
        Select  Peek.b(stringP+i+1)
          Case @"l" : *cell\addFlags|#TUIF_LEFT
          Case @"r" : *cell\addFlags|#TUIF_RIGHT
          Case @"b" : *cell\addFlags|#TUIF_BOLD
          Case @"i" : *cell\addFlags|#TUIF_ITALIC
          Case @"s" : *cell\addFlags|#TUIF_SMALL
          Case @"^" : *listView\sortFunc[*listItem\colN] = *_lv_DefaultCellCompareCB
          Case @"u" : *cell\addFlags|#TUIF_UNDERLINED
          Case @"f" : *cell\addFlags|#TUIF_FIX
          Case @"d" : *cell\addFlags|#TUIF_DISABLED
          Case @"h" : *cell\addFlags|#TUIF_HIGHLIGHT
          Case @"~" : *cell\addFlags|#TUIF_GONE
          Case @"|" : Poke.b labelP,@"|" : labelP+1 :       *cell\textLen+1
          Case @"\" : Poke.b labelP,@"\" : labelP+1 :       *cell\textLen+1
          Case @"t" : ;just continue with text
          Case @"p" : ;picture
          i+2
          j.l = i
          While i<l AND Peek.b(stringP+i)><@"|" AND Peek.b(stringP+i)><@"\"
            i+1
          Wend
          imagefile.s = Peeks$(stringP+j,i-j)
          ;error {"Loadimage: "+imagefile+"!"}

          *cell\img = ntui_CreateTBImage{*engine,imagefile,#TUISIZE_INLINE,#TUISIZE_INLINE}
          i-2
        End Select
        i+1

      Case 0
        ;Poke.b labelP,0 : labelP+1
        ;If (labelP&1) Then Poke.b labelP,0 : labelP+1
        ;*listItem\colN+1
        i=l

      Default
        Poke.b labelP,Peek.b(stringP+i) : labelP+1
        *cell\textLen+1

    End Select
    i+1
  Wend

  Poke.b labelP,0 : labelP+1
  ;If (labelP&1) Then Poke.b labelP,0 : labelP+1
  *listItem\colN+1


  byteSize.l = labelP-baseP
  If *listItem\cellSize<byteSize OR *listItem\cellA=Null
    If (*listItem\cellA) Then FreePooled_ *listView\memPool,*listItem\cellA,*listItem\cellSize
    *listItem\cellA = AllocPooled_(*listView\memPool,byteSize)
    *listItem\cellSize = byteSize
  End If
  *listItem\addFlags = (*listItem\addFlags | #TUIF_DIRTY) - #TUIF_DIRTY
  If *listItem\cellA Then CopyMem_ baseP,*listItem\cellA,byteSize
  _ntui_ReleaseTempBuffer{}
  Function Return *listItem\cellA

End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawListView {*listView.tuiListView,*rp.RastPort}           /
;/                                                                             /
;/ Description:                                                                /
;/   ;If click Then error{"Click!"}                                            /
;/     ;error {"Click: head, col:"+Str$(ccol)}                                 /
;/   ;    error {"Click: item:"+Str$(item)}                                      /
;/ * draw the ListView in all its beauty */                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *listView.tuiListView    : ???                                         /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawListView:
Statement _ntui_DrawListView{*listView.tuiListView,*rp.RastPort,*rpclip.tuiRect}
  !_ASSERT{*listView}
  !_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}
  !_ASSERT{*rp}
  *engine.tuiEngine = *listView\obj\engine
  !_ASSERT{*engine}

  !tuiAndRect{bclip.tuiRect,*listView\obj\bbox,*rpclip}
  If !tuiValidRect{bclip}=False Then Statement Return

  If (*listView\obj\borderType><#TUIBORDER_NONE)
    bgDone.l = ntui_DrawBorder{*engine,*rp,*listView\obj\bbox,*listView\obj\borderType,*listView\obj\flags}
  Else
    bgDone = False
  End If
  
  If *listView\totalItems<*listView\topItem+*listView\visibleItems
    ntui_SetAttr{*listView,#TUILVA_TOPITEM,*listView\totalItems-*listView\visibleItems}
  End If

  If *listView\hScroller
    If (*listView\hScroller\obj\flags&#TUIF_ONSCREEN) Then _ntui_Draw{*listView\hScroller,*rp,*rpclip}
  End If
  If *listView\vScroller
    If (*listView\vScroller\obj\flags&#TUIF_ONSCREEN) Then _ntui_Draw{*listView\vScroller,*rp,*rpclip}
  End If

  !tuiAndRect{iclip.tuiRect,*rpclip,*listView\obj\ibox}
  If !tuiValidRect{iclip}=False Then Statement Return

  !tuiAndRect{cclip.tuiRect,*rpclip,*listView\obj\cbox}
  If !tuiValidRect{cclip}=False Then Statement Return


redrawTuiListView:
  rd.l = False
  x1.l = *listView\obj\cbox\left
  x2.l = *listView\obj\cbox\right
  y1.l = *listView\obj\cbox\top
  y2.l = *listView\obj\cbox\bottom

  *oldRegion.Region = ntui_AddClip{*rp,cclip} ; set clip to the content box
  cx1.l = *listView\obj\cbox\left - *listView\leftOffset
  cy1.l = *listView\obj\cbox\top

  maxWidth.l = 0

; draw the title
  ;Stop
  If (*listView\title\addFlags&#TUIF_DIRTY) Then _ntui_ParseListItem{*listView,*listView\title,*listView\title\rawLabel}
  
  If *listView\title\cellA

    If (cclip\top<*listView\obj\cbox\top + *listView\titleHeight)
    *cell.tuiListCell = *listView\title\cellA

    SetAPen_ *rp,*engine\pen[#TUIPEN_SHADOW]
    Move_ *rp,x1,y1+*listView\titleHeight-2 : Draw_ *rp,x2,y1+*listView\titleHeight-2
    SetAPen_ *rp,*engine\pen[#TUIPEN_WHITE]
    Move_ *rp,x1,y1+*listView\titleHeight-1 : Draw_ *rp,x2,y1+*listView\titleHeight-1

    leftPadding.l = *listView\obj\padding\left

    For col.l=0 To *listView\title\colN-1
      flags.l = (*cell\addFlags|((*listView\obj\flags|#TUIF_ACTIVE)-#TUIF_ACTIVE) |*listView\title\addFlags)
      If (flags&#TUIF_ACTIVE)
        fgTuiPen.l = #TUIPEN_ACTIVETEXT
        bgTuiPen.l = #TUIPEN_MARKER
      Else
        fgTuiPen.l = #TUIPEN_TEXT
        bgTuiPen.l = #TUIPEN_HALFSHADOW
      End If

      If *cell\pixWidth<=0 ; not estimated yet
        If *cell\textLen>0
          _ntui_GetTextRect{*engine,(.str)&*cell\textLen,tx.tuiRect,flags,*rp} ; yes, this is correct! (there is no direct string struct)
          *cell\pixWidth = !tuiRectWidth{tx}
        Else
          *cell\pixWidth = 0
        End If
         If *cell\img Then *cell\pixWidth + ntui_GetTBImageWidth{*cell\img}
         If *cell\pixWidth>0 Then *cell\pixWidth + leftPadding + *listView\cellPadding\right
      End If

      maxWidth + *cell\pixWidth

      ;If *listView\title\colN=1 Then *cell\pixWidth=!tuiRectWidth{*listView\obj\cbox}
      cx2.l = cx1+*cell\pixWidth-1
      cy2.l = cy1+*listView\titleHeight-1-2
   ;   If col=*listView\title\colN-1 Then cx2=*listView\obj\pos\x-*listView\offset+*listView\innerSize\x-1
      ncx2.l = cx2

      If *engine\fillStyle=1 AND bgTuiPen><#TUIPEN_TRANSPARENT
        ibox.tuiRect\bottom = cy2
        ibox\top    = cy1
        ibox\left   = cx1
        ibox\right  = cx2
        _ntui_DrawGradientBox{*engine,*rp,ibox,bgTuiPen,#TUIORIENT_INVHORIZONTAL}
        bgTuiPen = #TUIPEN_TRANSPARENT
      End If

      If *cell\img ; draw the image
        icx2.l=cx1+ntui_GetTBImageWidth{ *cell\img}-1 + leftPadding
        ibox.tuiRect\left = cx1,cy1,icx2,cy2
        cbox.tuiRect\left = cx1+leftPadding,cy1,icx2,cy2
        ntui_DrawTBImage{*cell\img,*rp,ibox,cbox,0,bgTuiPen}
        leftPadding=0
        cx1=icx2+1
      End If

      If *listView\secondSortCol=col
        If *listView\secondSortDir=0
          *img.tuiTBImage = *listView\secondSortImgUp
        Else
          *img.tuiTBImage = *listView\secondSortImgDown
        End If
        icx1.l=cx2-ntui_GetTBImageWidth{ *img}
        ibox.tuiRect\left = icx1,cy1,cx2,cy2
        ntui_DrawTBImage{*img,*rp,ibox,ibox,0,bgTuiPen}
        cx2=icx1-1
      End If

      If *listView\primeSortCol=col
        If *listView\primeSortDir=0
          *img.tuiTBImage = *listView\primeSortImgUp
        Else
          *img.tuiTBImage = *listView\primeSortImgDown
        End If
        icx1=cx2-ntui_GetTBImageWidth{ *img}
        ibox.tuiRect\left = icx1,cy1,cx2,cy2
        ntui_DrawTBImage{*img,*rp,ibox,ibox,0,bgTuiPen}
        cx2=icx1-1
      End If

      ibox.tuiRect\left = cx1,cy1,cx2,cy2
      !tuiRemBorder{cbox.tuiRect,ibox,*listView\obj\padding}
      cbox.tuiRect\left = cx1+leftPadding,cy1+*listView\obj\padding\top,cx2- *listView\cellPadding\right,cy2-*listView\cellPadding\bottom

      _ntui_Print{*engine,(.str)&*cell\textLen,ibox,cbox,flags,*rp,fgTuiPen,bgTuiPen}

      If (flags&#TUIF_GONE)=0 AND col<*listView\title\colN-1
        SetAPen_ *rp,*engine\pen[#TUIPEN_SHADOW]
        Move_ *rp,ncx2+1,cy1 : Draw_ *rp,ncx2+1,cy2
        SetAPen_ *rp,*engine\pen[#TUIPEN_HALFSHINE]
        Move_ *rp,ncx2+2,cy1 : Draw_ *rp,ncx2+2,cy2+1
        cx1=ncx2+3
        maxWidth+2
      Else
        cx1=ncx2+1
      End If
      nextP.l = *cell + SizeOf.tuiListCell + *cell\textLen +1
      If nextP&1 Then nextP+1   ; 16bit align pointer
      *cell = nextP
      leftPadding = *listView\cellPadding\left
    Next

    If cx1<x2

      If *engine\fillStyle=1
        ibox.tuiRect\bottom = cy2
        ibox\top    = cy1
        ibox\left   = cx1
        ibox\right  = x2
        _ntui_DrawGradientBox{*engine,*rp,ibox,#TUIPEN_HALFSHADOW,#TUIORIENT_INVHORIZONTAL}
      Else
        If bgTuiPen><#TUIPEN_TRANSPARENT
          SetAPen_ *rp,*engine\pen[bgTuiPen]
          RectFill_ *rp,cx1,cy1,x2,cy2
        End If
      End If

    End If
    cy1 = cy2+3
    End If
  End If


  startItem.l = *listView\topItem
  endItem.l   = *listView\visibleItems + startItem
  If endItem>=*listView\totalItems Then endItem=*listView\totalItems-1
  cy1.l = *listView\obj\cbox\top + *listView\titleHeight
  maxX.l = maxWidth

  For itemX.l = startItem To endItem
    cy2.l = cy1+*listView\itemHeight-1

    If (cy2>=cclip\top AND cy1<=cclip\bottom)

    *titleCell.tuiListCell = *listView\title\cellA
    If *listView\sortA Then itemY.l = Peek.l(*listView\sortA+itemX*SizeOf.l) : Else itemY = itemX
    *listItem.tuiListItem = *listView\listP + (SizeOf.tuiListItem*itemY)
    If (*listItem\addFlags&#TUIF_DIRTY) Then _ntui_ParseListItem{*listView,*listItem,*listItem\rawLabel}

    *cell.tuiListCell   = *listItem\cellA
    If *cell
    cx1.l = *listView\obj\cbox\left - *listView\leftOffset
    leftPadding.l = *listView\obj\padding\left

    If *titleCell
      colN.l =  *listView\title\colN
      If *listItem\colN<colN Then colN = *listItem\colN
    Else
      colN=1
    End If

    For col.l=0 To colN-1
      If *titleCell
        flags.l = (*cell\addFlags|((*listView\obj\flags|*titleCell\addFlags|#TUIF_ACTIVE)-#TUIF_ACTIVE)|*listItem\addFlags)
      Else
        flags.l = (*cell\addFlags|((*listView\obj\flags|#TUIF_ACTIVE)-#TUIF_ACTIVE)|*listItem\addFlags)
      End If

      If (flags&#TUIF_ACTIVE)
        fgTuiPen.l = #TUIPEN_ACTIVETEXT
        bgTuiPen.l = #TUIPEN_HALFMARKER
      Else
        If (flags&#TUIF_HIGHLIGHT) Then fgTuiPen.l = #TUIPEN_ACTIVETEXT : Else fgTuiPen.l = #TUIPEN_TEXT
        bgTuiPen.l = #TUIPEN_HALFHALFSHINE
      End If

      If itemX=*listView\obj\value Then If (flags&#TUIF_ACTIVE) Then bgTuiPen.l = #TUIPEN_MARKER : Else bgTuiPen=#TUIPEN_HALFSHADOW

      CNIF #NTUI_DEBUG
        bgTuiPen.l =  RNDPen{}
      CEND

      If *cell\pixWidth<=0
        If *cell\textLen>0
          _ntui_GetTextRect{*engine,(.str)&*cell\textLen,tx.tuiRect,flags,*rp}
          *cell\pixWidth=!tuiRectWidth{tx}
        Else
          *cell\pixWidth
        End If
         If *cell\img Then *cell\pixWidth + ntui_GetTBImageWidth{*cell\img}
         *cell\pixWidth + !tuiBorderWidth{*listView\obj\padding}
         If *titleCell
           If *cell\pixWidth>*titleCell\pixWidth Then *titleCell\pixWidth = *cell\pixWidth : rd=True
         End If
      End If

      If *titleCell><Null ;AND colN>1
        cx2.l = cx1+*titleCell\pixWidth-1
        ;If col=*listView\title\colN Then cx2=x2
      Else
        cx2 = cx1+*cell\pixWidth
      End If


      If *cell\img
        icx2.l=cx1+ntui_GetTBImageWidth{ *cell\img}-1+leftPadding
        ibox.tuiRect\left = cx1,cy1,icx2,cy2
        cbox.tuiRect\left = cx1+leftPadding,cy1,icx2,cy2
        ntui_DrawTBImage{*cell\img,*rp,ibox,ibox,0,bgTuiPen}
        cx1=icx2+1
        leftPadding=0
      End If

      ibox.tuiRect\left = cx1,cy1,cx2,cy2
      cbox.tuiRect\left = cx1+leftPadding,cy1+*listView\cellPadding\top,cx2-*listView\cellPadding\right,cy2-*listView\cellPadding\bottom
      _ntui_Print{*engine,(.str)&*cell\textLen,ibox,cbox,flags,*rp,fgTuiPen,bgTuiPen}

      If (flags&#TUIF_GONE)=0 AND col<colN-1
        SetAPen_ *rp,*engine\pen[#TUIPEN_HALFSHADOW]
        Move_ *rp,cx2+1,cy1 : Draw_ *rp,cx2+1,cy2
        SetAPen_ *rp,*engine\pen[#TUIPEN_SHINE]
        Move_ *rp,cx2+2,cy1 : Draw_ *rp,cx2+2,cy2
        cx1=cx2+3
      Else
        cx1=cx2+1
      End If

      nextP.l = *cell   + SizeOf.tuiListCell + *cell\textLen +1
      If nextP&1 Then nextP+1 ; 16bit aligned pointer
      *cell = nextP

      If *titleCell
        nextP.l = *titleCell + SizeOf.tuiListCell + *titleCell\textLen +1
        If nextP&1 Then nextP+1
        *titleCell = nextP
      End If
      leftPadding = *listView\cellPadding\left
     End If
    Next

    If (cx1>maxX) Then maxX=cx1
    If cx1<x2
      SetAPen_ *rp,*engine\pen[bgTuiPen]
      RectFill_ *rp,cx1,cy1,x2,cy2
    End If

    If itemX=*listView\ankerX
      cx1.l = *listView\obj\cbox\left - *listView\leftOffset
      cx2.l = cx1 + *listView\totalWidth-1
      If cx2<*listView\obj\cbox\right Then cx2 = *listView\obj\cbox\right
      dbox.tuiRect\left = cx1,cy1,cx2,cy2
      _ntui_DrawDottedBorder{*engine,*rp,dbox,*listItem\addFlags}
    End If
    End If
    cy1 = cy2+1
  Next

  If (maxWidth< maxX-*listView\obj\cbox\left + *listView\leftOffset) maxWidth = maxX-*listView\obj\cbox\left + *listView\leftOffset

  If cy1<y2                                              ; clear unused bottom area
    SetAPen_ *rp,*engine\pen[#TUIPEN_HALFHALFSHINE]
    RectFill_ *rp,x1,cy1,x2,y2
  End If
  ntui_RemClip{*rp,*oldRegion}
  If rd Then Goto redrawTuiListView   ; redraw, in case layout changed


  If maxWidth>*listView\totalWidth
    *listView\totalWidth = maxWidth
    _ntui_PropagateBind{*listView,#TUIEV_BIND_HTOTAL      ,*listView\totalWidth      ,Null}

    If *listView\visibleWidth<*listView\totalWidth
      If (*listView\hScroller\obj\flags&#TUIF_ONSCREEN)=0
        _ntui_Layout{*listView,*rp,Null}
        ntui_Refresh{*listView,Null}
      End If
    Else
      If (*listView\hScroller\obj\flags&#TUIF_ONSCREEN)
        _ntui_Layout{*listView,*rp,Null}
        ntui_Refresh{*listView,Null}
      End If
    End If


    ;*listView\visibleWidth = !tuiRectWidth{*listView\obj\cbox}
    ;_ntui_PropagateBind{*listView,#TUIEV_BIND_HVISIBLE    ,*listView\visibleWidth    ,null}
  End If


  ;If (*listView\totalWidth-*listView\leftOffset < *listView\visibleWidth)
  ;   *listView\leftOffset = *listView\totalWidth - *listView\visibleWidth
  ;   If *listView\leftOffset<0 Then *listView\leftOffset=0
  ;   _ntui_PropagateBind{*listView,#TUIEV_BIND_HVALUE     ,*listView\leftOffset          ,null}
  ;End If

End Statement
!_MakeGlobalFuncPointer{_ntui_DrawListView,{Null,Null,Null}}


Statement _ntui_ScrollListView{*listView.tuiListView,dx.l,dy.l,*rp.RastPort}
!_ASSERT{*listView}
!_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}

If *rp  Then *win.Window  = *rp\Layer\Window : Else *win   = Null

If dy><0
  oldtop.l = *listView\topItem
  *listView\topItem + dy
  If *listView\topItem>(*listView\totalItems - *listView\visibleItems) Then *listView\topItem=(*listView\totalItems - *listView\visibleItems)
  If *listView\topItem<0 Then *listView\topItem=0

  dypix.l = (*listView\topItem-oldtop) * *listView\itemHeight
  If dypix><0 AND *rp><Null
    !tuiCopyRect{rpclip.tuiRect,*listView\obj\cbox}
    rpclip\top + *listView\titleHeight
    If (Abs(dypix)<!tuiRectWidth{rpclip}) ;AND (*listView\edflags&#TUITBF_REDRAWONSCROLL=0)
      If *win
        ScrollWindowRaster_ *win,0,dypix,rpclip\left,rpclip\top,rpclip\right,rpclip\bottom
      Else
        If *rp Then ScrollRasterBF_ *rp,0,dypix,rpclip\left,rpclip\top,rpclip\right,rpclip\bottom
      End If

      If dypix<0
        rpclip\bottom = rpclip\top-dypix
        _ntui_DrawListView{*listView,*rp,rpclip}
      Else
        rpclip\top = rpclip\bottom+1-dypix
        _ntui_DrawListView{*listView,*rp,rpclip}
      End If
    Else
      _ntui_DrawListView{*listView,*rp,rpclip}
    End If
  End If
End If

If dx><0
  oldx.l = *listView\leftOffset
  *listView\leftOffset + dx
  If (*listView\leftOffset<0) Then *listView\leftOffset=0
  If (*listView\leftOffset>*listView\totalWidth-*listView\visibleWidth) Then *listView\leftOffset =*listView\totalWidth -*listView\visibleWidth
  dxpix.l = (*listView\leftOffset-oldx)
  If (dxpix><0 AND *rp><Null)
    !tuiCopyRect{rpclip.tuiRect,*listView\obj\cbox}
    If (Abs(dxpix)<!tuiRectWidth{rpclip}) ;AND (*listView\edflags&#TUITBF_REDRAWONSCROLL=0)
      If *win
        ScrollWindowRaster_ *win,dxpix,0,rpclip\left,rpclip\top,rpclip\right,rpclip\bottom
      Else
        If *rp Then ScrollRasterBF_ *rp,dxpix,0,rpclip\left,rpclip\top,rpclip\right,rpclip\bottom
      End If
      If dxpix<0
        rpclip\right = rpclip\left-dxpix
        _ntui_DrawListView{*listView,*rp,rpclip}
      Else
        rpclip\left = rpclip\right-dxpix+1
        _ntui_DrawListView{*listView,*rp,rpclip}
      End If
    Else
      _ntui_DrawListView{*listView,*rp,rpclip}
    End If
  End If
End If
End Statement


Statement _ntui_DrawListViewItem{*listView.tuiListView,*rp.RastPort,fromX.l,toX.l}

  cbox.tuiRect\left = *listView\obj\cbox\left
  cbox\right = *listView\obj\cbox\right
  
  If fromX>=0
    cbox\top   = (fromX-*listView\topItem) * *listView\itemHeight
    If cbox\top<0 Then cbox\top=0
    cbox\top = cbox\top + *listView\obj\cbox\top + *listView\titleHeight
  Else
    cbox\top = *listView\obj\cbox\top
  End If
  If toX>=0
    cbox\bottom = (toX-*listView\topItem+1) * *listView\itemHeight  -1
    If cbox\bottom<0 Then Statement Return
    cbox\bottom = cbox\bottom + *listView\obj\cbox\top + *listView\titleHeight
  Else
    cbox\bottom = *listView\obj\cbox\top + *listView\titleHeight -1
  End If
  !tuiAndRect{cbox,cbox,*listView\obj\cbox}
  If !tuiValidRect{cbox}=False Then Statement Return
  _ntui_DrawListView{*listView,*rp,cbox}

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_ParseListViewLabel {*listView.tuiListView,*tu::    /
;/ iListItem.tuiListItem,label.s}                                                /
;/                                                                             /
;/ Description:                                                                /
;/ Label formating rules:                                                /
; | seperator of columns
; \x escape code:                                                                            /
;   l left align
;   r right align
;   b bold
;   i italic
;   s small
;   u underlined
;   f fixed font width
;   d disabled
;   h highlighted
;   ~ gone
;   | insert | sign
;   \ inster \ sign
;   t continue with text
;   p picture name follows...must be ended with | or \
;
;/ Inputs:                                                                     /
;/ - *listView.tuiListView    : ???                                            /
;/ - *listItem.tuiListItem    : ???                                              /
;/ - label.s    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ntui_EscapeListViewString{*listView.tuiListView,string.s}

  string=Replace$(string,"\","\"+"\")
  string=Replace$(string,"|","\|")
  Function Return string
  
End Function



_ntui_SetListViewAttr:
Function.l _ntui_SetListViewAttr{*listView.tuiListView,ti_Tag.l,ti_Data.l}
  !_ASSERT{*listView}
  !_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}

  done.l = True

  Select ti_Tag
    Case #TUILVA_MULTISELECT  : *listView\multiSelect  = ti_Data : done=True
    Case #TUILVA_SCROLLERMODE : *listView\scrollerMode = ti_Data : done=True

    ;Case #TUILVA_TOTALITEMS    : *listView\totalItems   = ti_Data : done=True
    ;Case #TUILVA_TOTALWIDTH    : *listView\totalWidth   = ti_Data : done=True
    ;Case #TUILVA_VISIBLEITEMS  : *listView\visibleItems = ti_Data : done=True
    ;Case #TUILVA_VISIBLEWIDTH  : *listView\visibleWidth = ti_Data : done=True
    Case #TUILVA_TOPITEM       :
      *rp.RastPort = ntui_ObtainRastPort{*listView}
      _ntui_ScrollListView{*listView,0,ti_Data-*listView\topItem   ,*rp}
      If *rp Then ntui_ReleaseRastPort{*listView}
      _ntui_PropagateBind{*listView,#TUIEV_BIND_VVALUE,*listView\topItem,Null}
      
    Case #TUILVA_LEFTOFFSET
      *rp.RastPort = ntui_ObtainRastPort{*listView}
      _ntui_ScrollListView{*listView,ti_Data-*listView\leftOffset,0,*rp}
      If *rp Then ntui_ReleaseRastPort{*listView}
      _ntui_PropagateBind{*listView,#TUIEV_BIND_HVALUE,*listView\leftOffset,Null}
    ;Case #TUILVA_ITEMHEIGHT    : *listView\itemHeight   = ti_Data : done=True
    ;Case #TUILVA_TITLEHEIGHT   : *listView\titleHeight  = ti_Data : done=True

    Case #TUILVA_TITLE        :
      For n.l=0 To #TUILV_MAXSORTFUNCS-1
        *listView\sortFunc[n]=Null
      Next
    
      If (ti_Data)
        str_WritePtr{&*listView\title\rawLabel,ti_Data}
        *listView\titleHeight = *listView\obj\engine\defSize[#TUISIZE_INLINE] + 2 + *listView\obj\padding\top + *listView\cellPadding\bottom
      Else
        str_Free{&*listView\title\rawLabel}
        *listView\titleHeight = 0
      End If
      *listView\title\addFlags|#TUIF_DIRTY

      ntui_Refresh{*listView,Null}

    Case #TUILVA_ONSELECT   : str_WritePtr{&*listView\onSelect\notifyID ,ti_Data}
    Case #TUILVA_ONSELECTCB : *listView\onSelect\callback = ti_Data
    Case #TUILVA_ONTOUCH    : str_WritePtr{&*listView\onTouch\notifyID ,ti_Data}
    Case #TUILVA_ONTOUCHCB  : *listView\onTouch\callback = ti_Data
    Case #TUILVA_ONFILELISTENERCLOSE   : str_WritePtr{&*listView\onFileListenerClose\notifyID ,ti_Data}
    Case #TUILVA_ONFILELISTENERCLOSECB : *listView\onFileListenerClose\callback = ti_Data

    Case #TUILVA_CELLCONTENT   : done = False; readonly!
    Case #TUILVA_TOTALITEMS    : done = False; readonly
    Case #TUILVA_TOTALWIDTH    : done = False; readonly
    Case #TUILVA_VISIBLEITEMS  : done = False; readonly
    Case #TUILVA_VISIBLEWIDTH  : done = False; readonly
    Case #TUILVA_ITEMHEIGHT    : done = False; readonly
    Case #TUILVA_TITLEHEIGHT   : done = False; readonly

    Default
      done = False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_SetListViewAttr,{Null,0,0}}


_ntui_GetListViewAttr:
Function.l _ntui_GetListViewAttr{*listView.tuiListView,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*listView}
  !_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}

  done.l=True
  Select ti_Tag
    Case #TUILVA_MULTISELECT   : *ti_Data\l = *listView\multiSelect
    Case #TUILVA_SCROLLERMODE  : *ti_Data\l = *listView\scrollerMode
    Case #TUILVA_TOTALITEMS    : *ti_Data\l = *listView\totalItems
    Case #TUILVA_TOTALWIDTH    : *ti_Data\l = *listView\totalWidth
    Case #TUILVA_VISIBLEITEMS  : *ti_Data\l = *listView\visibleItems
    Case #TUILVA_VISIBLEWIDTH  : *ti_Data\l = *listView\visibleWidth
    Case #TUILVA_TOPITEM       : *ti_Data\l = *listView\topItem
    Case #TUILVA_LEFTOFFSET    : *ti_Data\l = *listView\leftOffset
    Case #TUILVA_ITEMHEIGHT    : *ti_Data\l = *listView\itemHeight
    Case #TUILVA_TITLEHEIGHT   : *ti_Data\l = *listView\titleHeight
    Case #TUILVA_ONSELECT      : *ti_Data\l = str_GetPtr{*listView\onSelect\notifyID}
    Case #TUILVA_ONSELECTCB    : *ti_Data\l = *listView\onSelect\callback
    Case #TUILVA_ONTOUCH       : *ti_Data\l = str_GetPtr{*listView\onTouch\notifyID}
    Case #TUILVA_ONTOUCHCB     : *ti_Data\l = *listView\onTouch\callback
    Case #TUILVA_ONFILELISTENERCLOSE   : *ti_Data\l = str_GetPtr{*listView\onFileListenerClose\notifyID}
    Case #TUILVA_ONFILELISTENERCLOSECB : *ti_Data\l = *listView\onFileListenerClose\callback
    ;Case #TUILVA_CELLCONTENT
      ;*cell.tuiListCell = _ntui_GetListCellP{*listView,*listItem,cellX}
    Default
      done=False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_GetListViewAttr,{Null,0,Null}}

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ntui_GetListItem {listview,item}                                /
;/                                                                             /
;/ Description:                                                                /
;/ Get the pointer to a listview item                                                                            /
;/ Inputs:                                                                     /
;/ - listview    : ???                                                         /
;/ - item    : ???                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ntui_GetListItemP ; {itemX}
  *listView\listP + ((`1) * SizeOf.tuiListItem)
End Macro


Function.tuiListItem _ntui_GetListItemP{*listView.tuiListView,itemX.l}

  If itemX<0 Then Function Return *listView\title
  If itemX<*listView\totalItems
    If *listView\sortA
      itemX.l = Peek.l(*listView\sortA+itemX*SizeOf.l)
    End If
    *listItem.tuiListItem = !ntui_GetListItemP{itemX}
    Function Return *listItem
  End If
  Function Return Null
  
End Function

Function.tuiListItem _ntui_GetListSortedItemP{*listView.tuiListView,itemX.l}

  If itemX<0 Then Function Return *listView\title
  If itemX<*listView\totalItems
    If *listView\sortA
      itemX.l = Peek.l(*listView\sortA+itemX*SizeOf.l)
    End If
    *listItem.tuiListItem = !ntui_GetListItemP{itemX}
    Function Return *listItem
  End If
  Function Return Null
  
End Function

Function.tuiListCell _ntui_GetListCellP{*listView.tuiListView,*listItem.tuiListItem,colX.l}

  If *listItem\addFlags&#TUIF_DIRTY Then _ntui_ParseListItem{*listView,*listItem,*listItem\rawLabel}
  *cell.tuiListCell = *listItem\cellA
  If colX>=*listItem\colN Then Function Return Null
  While colX>0
    nextP.l = *cell + SizeOf.tuiListCell + *cell\textLen +1
    If (nextP&1) Then nextP+1
    *cell = nextP
    colX-1
  Wend
  
  Function Return *cell
  
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_SetListViewSorting {*listView.tuiListView,col.l}               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *listView.tuiListView    : ???                                            /
;/ - col.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////



Statement _lv_SortMerge{*listView.tuiListView,*src.l, iLeft.l, iRight.l, iEnd.l, *dst.l,*ccmp.tuiFunc,cellX.l}

  i0.l = iLeft
  i1.l = iRight
  j.l  = iLeft
 
  ;/* While there are elements in the left OR right lists */
  While (j < iEnd) 
    
      ;/* If left List head Exists AND is <= existing right List head */
      idx0.l = Peek.l(*src+i0*SizeOf.l)
      idx1.l = Peek.l(*src+i1*SizeOf.l)
      *lv0.tuiListItem = _ntui_GetListItemP{*listView,idx0}
      *lv1.tuiListItem = _ntui_GetListItemP{*listView,idx1}
      *cell0.tuiListCell = _ntui_GetListCellP{*listView,*lv0,cellX}
      *cell1.tuiListCell = _ntui_GetListCellP{*listView,*lv1,cellX}
      !_CallFuncPointer{*ccmp,result.l,*cell0,*cell1}
      
      If (i0 < iRight AND (i1 >= iEnd OR result<=0))
          Poke.l *dst + j*SizeOf.l, Peek.l (*src + i0*SizeOf.l)
          i0 = i0 + 1
      Else        
          Poke.l *dst + j*SizeOf.l, Peek.l (*src + i1*SizeOf.l)
          i1 = i1 + 1
      End If
      j+1
  Wend
  
End Statement



; array A[] has the items To Sort; array B[] is a work array */
Statement _lv_Sort{*listView.tuiListView}

  cellX.l = *listView\primeSortCol
  n.l = *listView\totalItems
  If cellX<0 OR cellX>=#TUILV_MAXSORTFUNCS Then Statement Return
  *ccmp.tuiFunc = *listView\sortFunc[cellX]
  If *ccmp=Null Then Statement Return

  If *listView\sortA = Null OR *listView\sortN<*listView\totalItems
    *listView\sortA = AllocVec_(*listView\totalItems*SizeOf.l,#MEMF_ANY)
    *listView\sortN = *listView\totalItems
  End If
  *tmp.l = AllocVec_(*listView\totalItems*SizeOf.l,#MEMF_ANY)
  *src.l = *listView\sortA
  *dst.l = *tmp
  
  width.l = 1
  
  ;/* Each 1-element run in A is already "sorted". */
 
  ;/* Make successively longer sorted runs of Length 2, 4, 8, 16... Until whole array is sorted. */
  While  (width < n)

      ;/* Array A is full of runs of Length width. */
      i.l = 0
      While (i < n)
          ;/* Merge two runs: A[i:i+width-1] AND A[i+width:i+2*width-1] To B[] */
          ;/* OR copy A[i:n-1] To B[] ( If(i+width >= n) ) */
          _lv_SortMerge{*listView,*src, i, Min(i+width, n), Min(i+2*width, n), *dst, *ccmp, cellX}
          i = i + 2 * width
      Wend
 
      ;/* Now work array B is full of runs of Length 2*width. */
      ;/* Copy array B To array A For Next iteration. */
      ;/* A more efficient implementation would SWAP the roles of A AND B */
      ;CopyArray(A, B, n);
      Exchange *src,*dst
      width = 2 * width
      ;/* Now array A is full of runs of Length 2*width. */
  Wend
  
  If *listView\sortA><*src
    FreeVec_ *tmp
    *listView\sortA = *src
    *listView\sortN = *listView\totalItems
  End If
  
End Statement



Function.l _ntui_SortListView{*listView.tuiListView}

End Function

Statement _ntui_SetListViewSorting{*listView.tuiListView,colX.l}
  !_ASSERT{*listView}
  !_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}

  If *listView\sortFunc[colX] = Null Then Statement Return

  If colX=*listView\primeSortCol
    *listView\primeSortDir=1-*listView\primeSortDir
  Else
    *listView\secondSortDir=*listView\primeSortDir
    If *listView\secondSortDir=colX Then *listView\primeSortDir=1-*listView\secondSortDir
    *listView\secondSortCol=*listView\primeSortCol
    *listView\primeSortCol =colX
  End If
  If (*listView\secondSortCol=*listView\primeSortCol) Then *listView\secondSortCol=-1
  *listView\sortingDirty = 1
  ntui_Refresh{*listView,Null}
  
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_AddListItem {*listView.tuiListView,item.l,l:: /
;/ abel.s,@itemID.l,@userData.l,@flags.l,@string.s}                            /
;/                                                                             /
;/ Description:                                                                /
;/ parse the label...                                                          /
;/           ;error {"Loadimage: "+imagefile+"!"}                              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *listView.tuiListView    : ???                                         /
;/ - item.l    : ???                                                            /
;/ - label.s    : ???                                                          /
;/ - itemID.l    : ???                                                         /
;/ - userData.l    : ???                                                       /
;/ - flags.l    : ???                                                          /
;/ - string.s    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_AddListItem{*listView.tuiListView,itemX.l,label.s,@itemID.l,@userData.l,@flags.l}
  !_ASSERT{*listView}
  !_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}

  succ.l = False
  If itemX<0 Then itemX=*listView\totalItems
  If (flags=#TUI_NOFLAGS) Then flags=0

  If *listView\totalItems>=*listView\allocN ; re-alloc table
    *listP.tuiListItem = AllocVec_((*listView\totalItems+*listView\incN)*SizeOf.tuiListItem,#MEMF_ANY)
    If *listP
      If *listView\listP
        CopyMem_ *listView\listP,*listP,*listView\totalItems*SizeOf.tuiListItem
        FreeVec_ *listView\listP
      End If
      *listView\listP  = *listP
      *listView\allocN = *listView\totalItems+*listView\incN
    End If
  End If

  If *listView\totalItems<*listView\allocN
    If *listView\obj\value>=itemX Then *listView\obj\value+1
    If *listView\ankerX   >=itemX Then *listView\ankerX+1
    If (itemX<*listView\totalItems)
      *listItem.tuiListItem = !ntui_GetListItemP{*listView\totalItems-1}
      For i.l=itemX To *listView\totalItems-1
        CopyMem_ *listItem,*listItem+SizeOf.tuiListItem,SizeOf.tuiListItem
        *listItem - SizeOf.tuiListItem
      Next
    End If
    *listItem.tuiListItem = !ntui_GetListItemP{itemX}
    *listItem\itemID   = itemID
    *listItem\addFlags = flags|#TUIF_DIRTY
    *listItem\cellA    = Null
    *listItem\cellSize = 0
    *listItem\colN     = 0
    *listItem\userData = userData
    *listItem\rawLabel = Null
    If label Then str_WritePtr{&*listItem\rawLabel,&label} ;: _ntui_ParseListItem{*listView,*listItem,*labelS}
    *listView\totalItems+1
    succ = True
    ;error{"added item "+label+" of "+Str$(*listView\totalItems)}
    If *listView\vScroller Then _ntui_UpdateScroller{*listView\vScroller,*listView\topItem,*listView\visibleItems,*listView\totalItems,1,False}

    ntui_Refresh{*listView,Null}
  End If

  Function Return succ

End Function


Function.l ntui_ChangeListItem{*listView.tuiListView,itemX.l,label.s,@itemID.l,@userData.l,@flags.l}
  !_ASSERT{*listView}
  !_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}

  If itemX<0 OR itemX>=*listView\totalItems Then Function Return False
  *listItem.tuiListItem = !ntui_GetListItemP{itemX}
  If itemID><-1           Then *listItem\itemID   = itemID
  If flags ><#TUI_NOFLAGS Then *listItem\addFlags = flags
  If userData><-1         Then *listItem\userData = userData


      ; TODO: free the images

  str_WritePtr{&*listItem\rawLabel,&label}
  *listItem\addFlags|#TUIF_DIRTY
  succ.l = True
  ntui_Refresh{*listView,Null}

  Function Return succ

End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_GetListItemID {*listView.tuiListView,itemX.l}  /
;/                                                                             /
;/ Description:                                                                /
;/ Get the itemID from a listview row.          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *listView.tuiListView    : listview to search                                         /
;/ - itemX.l                       : itemX to find                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l                    : itemID of row or -1 if not found                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_GetListItemID{*listView.tuiListView,itemX.l}

  !_ASSERT{*listView}
  !_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}

  If itemX>=0 AND itemX<*listView\totalItems
    *listItem.tuiListItem = !ntui_GetListItemP{itemX}
    Function Return *listItem\itemID
  End If

Function Return -1

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_GetListItemUserData {*listView.tuiListView:: /
;/ ,itemX.l}                                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *listView.tuiListView    : ???                                         /
;/ - itemX.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_GetListItemUserData{*listView.tuiListView,itemX.l}

  !_ASSERT{*listView}
  !_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}

  If itemX>=0 AND itemX<*listView\totalItems
    *listItem.tuiListItem = !ntui_GetListItemP{itemX}
    Function Return *listItem\userData
  End If

  Function Return -1

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_GetSelectedListItem {*listView.tuiListView}  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *listView.tuiListView    : ???                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_GetNextSelectedListItem{*listView.tuiListView}
!_ASSERT{*listView}
!_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}

  *listView\seekPos+1
  While *listView\seekPos<*listView\totalItems
    *listItem.tuiListItem = *listView\listP + (*listView\seekPos * SizeOf.tuiListItem)
    If (*listItem\addFlags&#TUIF_ACTIVE) Then Function Return *listView\seekPos
    *listView\seekPos+1
  Wend
  *listView\seekPos=-1
  Function Return *listView\seekPos
  
End Function


Function.l ntui_GetFirstSelectedListItem{*listView.tuiListView}
!_ASSERT{*listView}
!_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}

  *listView\seekPos=-1
  Function Return ntui_GetNextSelectedListItem{*listView}
  
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.s = ntui_GetListItemLabel {*listView.tuiListView,ro:: /
;/ w.l,col.l}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Get the label text of a cell, given by itemX and column.                                               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *listView.tuiListView    : ???                                         /
;/ - itemX.l    : ???                                                            /
;/ - col.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ntui_GetListItemText{*listView.tuiListView,itemX.l,colX.l}

  If itemX<0
    *listItem.tuiListItem = *listView\title
  Else
    If itemX<*listView\totalItems
      *listItem.tuiListItem = !ntui_GetListItemP{itemX}
    Else
      Function Return ""
    End If
  End If
  If colX<0 OR colX>=*listView\title\colN Then Function Return ""

  If *listItem\addFlags&#TUIF_DIRTY Then _ntui_ParseListItem{*listView,*listItem,*listItem\rawLabel}

  *cell.tuiListCell = *listItem\cellA
  *str.str = Null
  If *cell=Null Then Function Return ""
  
  For col.l=0 To colX
    If *cell\textLen>0
      *str.str = (.str)&*cell\textLen
    End If
    nextP.l = *cell + SizeOf.tuiListCell + *cell\textLen +1
    If nextP&1 Then nextP+1   ; 16bit align pointer
    *cell = nextP
  Next

  text.s = str_Read{&*str}
  Function Return text

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_GetListItemItem {*listView.tuiListView,item:: /
;/ ID.l}                                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Get the itemX of a listview item given by itemID.                               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *listView.tuiListView    : ???                                         /
;/ - itemID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_GetListItemIndexByID{*listView.tuiListView,itemID.l}
!_ASSERT{*listView}
!_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}

itemX.l=0
*listItem.tuiListItem = *listView\listP
While itemX<*listView\totalItems
  If *listItem\itemID=itemID Then Function Return itemX
  itemX+1
  *listItem + SizeOf.tuiListItem
Wend
Function Return -1
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_RemListItem {*listView.tuiListView,itemX.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *listView.tuiListView    : ???                                         /
;/ - itemX.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_RemListItem{*listView.tuiListView,itemX.l}
  !_ASSERT{*listView}
  !_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}

  succ.l = False
  If itemX<0 Then itemX=*listView\totalItems-1
  If itemX>=0 AND itemX<*listView\totalItems
    *listItem.tuiListItem = !ntui_GetListItemP{itemX}

    If *listItem\cellA
      FreePooled_ *listView\memPool,*listItem\cellA,*listItem\cellSize
      *listItem\cellA    = Null
      *listItem\cellSize = 0
      ; TODO: free the images
    End If
    str_Free{&*listItem\rawLabel}
    If *listView\obj\value=itemX Then *listView\obj\value=-1
    If *listView\obj\value>itemX Then *listView\obj\value-1
    If *listView\ankerX   =itemX Then *listView\ankerX=-1
    If *listView\ankerX   >itemX Then *listView\ankerX-1

    For i.l=itemX To *listView\totalItems-2
      CopyMem_ *listItem+SizeOf.tuiListItem,*listItem,SizeOf.tuiListItem
      *listItem + SizeOf.tuiListItem
    Next
    *listView\totalItems-1
    ;ntui_PropagateBind{*listView}
    ;If *listView\vScroller Then _ntui_UpdateScroller{*listView\vScroller,*listView\topItem,*listView\visibleItems,*listView\totalItems,1,False}
    ntui_Refresh{*listView,Null}
    succ=True
  End If
  Function Return succ

End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_RemListItemByID {*listView.tuiListView,ite:: /
;/ mID.l}                                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *listView.tuiListView    : ???                                         /
;/ - itemID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_RemListItemByID{*listView.tuiListView,itemID.l}

  itemX.l = ntui_GetListItemIndexByID{*listView,itemID}
  If itemX>=0 Then Function Return ntui_RemListItem{*listView,itemX}
  Function Return False
  
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_ClearListView {*listView.tuiListView}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *listView.tuiListView    : ???                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_ClearListView{*listView.tuiListView}

  While ntui_RemListItem{*listView,-1} : Wend

  If *listView\title\cellA
    *cell.tuiListCell = *listView\title\cellA
    For col.l=0 To *listView\title\colN-1
      *cell\pixWidth=0 ; not estimated yet
      nextP.l = *cell + SizeOf.tuiListCell + *cell\textLen +1
      If nextP&1 Then nextP+1   ; 16bit align pointer
      *cell = nextP
    Next
  End If
  *listView\totalWidth = 0
  *listView\totalItems = 0
  ;DeletePool_ *listView\memPool
  ;*listView\memPool = CreatePool_(0,32768,32768)
  ;ntui_SetAttr{*listView,#TUILVA_TOTALWIDTH,0}

End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_HandleListView {*listView.tuiListView,*ev:: /
;/ .tuiEvent}                                                                /
;/                                                                             /
;/ Description:                                                                /
;/ * do what happens if the user operates the ListView */                      /
;/ 1...N Cell number
;/ 0 no cell
;/ -1...-N CellBorder
;/ Inputs:                                                                     /
;/ - *listView.tuiListView    : ???                                         /
;/ - *ev.tuiEvent    : ???                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_GetListViewColumnFromXPos{*listView.tuiListView,cx.l}
  ;If *listView\title\cellA Then cy-*listView\titleHeight
  hitCellX.l = -1
  cx1.l  = 0
  *hitCell.tuiListCell=Null
  If *listView\title\cellA
    *cell.tuiListCell = *listView\title\cellA
    For cellX.l=0 To *listView\title\colN-1
      cx2.l = cx1+*cell\pixWidth
      If cx>=cx1 AND cx<cx2 Then hitCellX=cellX:*hitCell = *cell

      If (*cell\addFlags&#TUIF_GONE)=0 AND cellX<*listView\title\colN-1
        If cx>=cx2-1 AND cx<=cx2+3 Then Function Return -cellX-2 ; hit a seperator
        cx1=cx2+2
      Else
        cx1=cx2
      End If

      nextP.l = *cell + SizeOf.tuiListCell + *cell\textLen +1
      If (nextP&1) Then nextP+1
      *cell = nextP
    Next
  Else
    If cx>=0 AND cx<!tuiRectWidth{*listView\obj\cbox} Then hitCellX=0
  End If
  
  Function Return hitCellX
  
End Function


Function.l _ntui_GetListItemFromYPos{*listView.tuiListView,cy.l}

  itemX.l = -1
  If (cy>=*listView\titleHeight)
    itemX.l = (cy-*listView\titleHeight)/*listView\itemHeight + *listView\topItem
  End If
  
  Function Return itemX
  
End Function


_ntui_LayoutListView:
Statement _ntui_LayoutListView{*listView.tuiListView,*rp.RastPort,*bbox.tuiRect}

  !_ASSERT{*listView}
  !_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}
  !_ASSERT{*rp}
  *engine.tuiEngine = *listView\obj\engine
  !_ASSERT{*engine}

  *obj.tuiObject = *listView

  If *bbox
    !tuiCopyRect{*obj\bbox,*bbox}
  End If

  !tuiRemBorder{*obj\ibox,*obj\bbox,*obj\border}
  !tuiCopyRect{*obj\cbox,*obj\ibox}
  ;*listView\obj\cbox\left + *listView\obj\padding\left
  ;*listView\obj\cbox\top  + *listView\obj\padding\top

  If *listView\vScroller
    If *listView\visibleItems<*listView\totalItems AND *listView\scrollerMode><#TUISCROLLER_NEVER OR *listView\scrollerMode=#TUISCROLLER_ALWAYS
      xs.l = *listView\vScroller\obj\minsize\x
      !tuiCopyRect{sbox.tuiRect,*obj\ibox}
      *obj\ibox\right - xs
      *obj\cbox\right = *obj\ibox\right
      sbox\left  = *obj\cbox\right +1
      _ntui_Layout{*listView\vScroller,*rp,sbox}
    Else
      *listView\vScroller\obj\flags|#TUIF_ONSCREEN - #TUIF_ONSCREEN
    End If
  End If

  *listView\visibleWidth =  !tuiRectWidth{*listView\obj\cbox}

  If *listView\hScroller
    If *listView\visibleWidth<*listView\totalWidth  AND *listView\scrollerMode><#TUISCROLLER_NEVER OR *listView\scrollerMode=#TUISCROLLER_ALWAYS
      ys.l = *listView\hScroller\obj\minsize\y
      !tuiCopyRect{sbox.tuiRect,*listView\obj\ibox}
      *listView\obj\ibox\bottom - ys
      *listView\obj\cbox\bottom = *obj\ibox\bottom
      sbox\top  = *listView\obj\cbox\bottom +1
      _ntui_Layout{*listView\hScroller,*rp,sbox}
    Else
      *listView\hScroller\obj\flags|#TUIF_ONSCREEN - #TUIF_ONSCREEN
    End If
  End If

  If *listView\title\cellA
    *listView\visibleItems  = (!tuiRectHeight{*listView\obj\cbox}-2) / *listView\itemHeight -1
  Else
    *listView\visibleItems  = (!tuiRectHeight{*listView\obj\cbox}) / *listView\itemHeight
  End If

  If (*listView\totalItems-*listView\topItem < *listView\visibleItems)
    *listView\topItem = *listView\totalItems - *listView\visibleItems
    If *listView\topItem<0 Then *listView\topItem=0
    _ntui_PropagateBind{*listView,#TUIEV_BIND_VVALUE     ,*listView\topItem          ,Null}
  End If

  If (*listView\totalWidth-*listView\leftOffset < *listView\visibleWidth)
    *listView\leftOffset = *listView\totalWidth - *listView\visibleWidth
    If *listView\leftOffset<0 Then *listView\leftOffset=0
    _ntui_PropagateBind{*listView,#TUIEV_BIND_HVALUE     ,*listView\leftOffset          ,Null}
  End If

  _ntui_PropagateBind{*listView,#TUIEV_BIND_VVISIBLE    ,*listView\visibleItems    ,Null}
  _ntui_PropagateBind{*listView,#TUIEV_BIND_HVISIBLE    ,*listView\visibleWidth    ,Null}

End Statement
!_MakeGlobalFuncPointer{_ntui_LayoutListView,{Null,Null,Null}}


Statement _ntui_ListViewDeselectAll{*listView.tuiListView,*rp.RastPort}
  !_ASSERT{*listView}
  !_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}

  *listItem.tuiListItem = *listView\listP
  fromX.l = -1
  toX.l   = -1
  For itemX.l=0 To *listView\totalItems-1
    If (*listItem\addFlags&#TUIF_ACTIVE) Then *listItem\addFlags-#TUIF_ACTIVE : toX=itemX: If fromX<0 Then fromX=itemX
    *listItem + SizeOf.tuiListItem
  Next

  If *rp
    If fromX>=0 Then _ntui_DrawListViewItem{*listView,*rp,fromX,toX}
  End If
  
End Statement

Statement ntui_SelectListItem{*listView.tuiListView, pos.l, @exclusive.l}
!_ASSERT{*listView}
!_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}
  If exclusive Then _ntui_ListViewDeselectAll{*listView, Null}
  If pos >=0 AND pos<*listView\totalItems
    *listItem.tuiListItem = *listView\listP + (pos * SizeOf.tuiListItem)
    *listItem\addFlags|#TUIF_ACTIVE
  End If
  ntui_Refresh{*listView, Null}
  
End Statement


_ntui_DispatchListViewEvent:
Function.l _ntui_DispatchListViewEvent{*listView.tuiListView,*ev.tuiEvent}
  !_ASSERT{*listView}
  !_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}
  *engine.tuiEngine = *listView\obj\engine
  !_ASSERT{*engine}

  done.l = False
  Select *ev\id
    Case #TUILVEV_APPEND:
      ntui_AddListItem{*listView,-1,str_Read{&*ev\string},*ev\value,Null,#TUI_NOFLAGS}
      _ntui_SetListViewAttr{*listView,#TUILVA_TOPITEM,*listView\totalItems-*listView\visibleItems}

    Case #TUILVEV_FLCLOSE:
      !tuiHandleNotify{done.l,*listView,onFileListenerClose,*ev}
      done=True

    Case #TUIEV_LOSEFOCUS
      done=True

    Case #TUIEV_FOCUS
      done=True

    Case #TUIEV_LOSEMOVER
      done=True

    Case #TUIEV_MOVER
      done=True

    Case #TUIEV_MOUSEDOWN
      If *ev\value = 0 ; we want mb 0
        If (!tuiRectHit{*listView\obj\cbox,*ev\pos\x,*ev\pos\y});ntui_HitObject{*listView,*ev\pos\x,*ev\pos\y}
          ntui_SetFocus{*listView}
          done      = True
          *listView\obj\flags | #TUIF_ACTIVE

          cellX.l = _ntui_GetListViewColumnFromXPos{*listView,*ev\pos\x-*listView\obj\cbox\left}
          itemX.l = _ntui_GetListItemFromYPos{*listView,*ev\pos\y-*listView\obj\cbox\top}

          If itemX=-1 ; we hit the title
          
            If cellX>=0 ; it a label
              *cell.tuiListCell =_ntui_GetListCellP{*listView,*listView\title,cellX}
              If *cell
                *cell\addFlags| #TUIF_ACTIVE
              *rp.RastPort = ntui_ObtainRastPort{*listView}
              If *rp
                _ntui_DrawListViewItem{*listView,*rp,-1,-1}
                ntui_ReleaseRastPort{*listView}
              End If                
                
              End If
            End If

          Else
            ntui_GetEventAttr{*ev,#TUIEVA_QUALIFIER,&quali.l}

            If itemX>=0 AND itemX<*listView\totalItems
              *listItem.tuiListItem = !ntui_GetListItemP{itemX}

              If ((*listItem\addFlags&#TUIF_ACTIVE)=#TUIF_ACTIVE) AND (*listView\multiSelect><0)  ; it is already active, to go to deselect mode
                *listView\slideMode = 0
              Else
                *listView\slideMode = #TUIF_ACTIVE  ; it is not active, go to select mode
                If (quali&(#TUIQUAL_ALT|#TUIQUAL_SHIFT))=0

                  ;*listView\ankerX = -1
                  *rp.RastPort = ntui_ObtainRastPort{*listView}
                  _ntui_ListViewDeselectAll{*listView,*rp}
                  If *rp Then ntui_ReleaseRastPort{*listView}
                End If
              End If

              *listItem\addFlags = ((*listItem\addFlags|#TUIF_ACTIVE)-#TUIF_ACTIVE) | *listView\slideMode
              fromX.l = -1 : toX.l = -1

              If (quali&#TUIQUAL_SHIFT)><0 AND *listView\multiSelect><0 AND *listView\ankerX>=0 AND *listView\ankerX<*listView\totalItems

                If *listView\ankerX<itemX Then dx.l=1:Else dx=-1

                For itemY.l=*listView\ankerX To itemX-dx Step dx
                  *listItem.tuiListItem = !ntui_GetListItemP{itemY}
                  of.l = *listItem\addFlags
                  *listItem\addFlags = ((*listItem\addFlags|#TUIF_ACTIVE)-#TUIF_ACTIVE) | *listView\slideMode
                  If of><*listItem\addFlags Then toX = itemY : If fromX<0 Then fromX=itemY
                Next

                If (*listView\ankerX<fromX OR fromX<0) Then fromX=*listView\ankerX
                If (*listView\ankerX>toX  OR toX<0) Then toX  =*listView\ankerX

              Else
                fromX = *listView\ankerX : toX = *listView\ankerX
              End If
              *listView\ankerX = itemX

              *rp.RastPort = ntui_ObtainRastPort{*listView}
              If *rp
                If (fromX>=0) Then _ntui_DrawListViewItem{*listView,*rp,fromX,toX}
                If (itemX<toX OR itemX>fromX) Then _ntui_DrawListViewItem{*listView,*rp,itemX,itemX}
                ntui_ReleaseRastPort{*listView}
              End If

            End If
          End If
        End If
      End If

    Case #TUIEV_MOUSEUP
      If *ev\value = 0 ; we want mb 0
        If *listView\obj\flags&#TUIF_ACTIVE
          If (!tuiRectHit{*listView\obj\cbox,*ev\pos\x,*ev\pos\y})
            done    = True
            cellX.l = _ntui_GetListViewColumnFromXPos{*listView,*ev\pos\x-*listView\obj\cbox\left}
            itemX.l = _ntui_GetListItemFromYPos{*listView,*ev\pos\y-*listView\obj\cbox\top}
            If cellX>=0 AND itemX>=0 AND itemX<*listView\totalItems  ; totalitems check added to prevent a Nullpointer access if clicked in a empty listview with the ntuixmltester
              *listItem.tuiListItem = !ntui_GetListItemP{itemX}

              If ((*listItem\addFlags&#TUIF_ACTIVE)=#TUIF_ACTIVE)
                If *ev\qualifier_ & #TUIQUAL_DOUBLECLICK
                  !tuiHandleNotify{done,*listView,onSelect,*ev}
                Else
                  !tuiHandleNotify{done,*listView,onTouch,*ev}
                End If
              End If
            Else
              If itemX=-1 ; title
                If cellX>=0
                  ;If *clickCol Then *clickCol\addFlags|#TUIF_ACTIVE - #TUIF_ACTIVE
                  *cell.tuiListCell = _ntui_GetListCellP{*listView,*listView\title,cellX}
                  If *cell
                    If *cell\addFlags & #TUIF_ACTIVE
                        _ntui_SetListViewSorting{*listView,cellX}
                        *cell\addFlags| #TUIF_ACTIVE - #TUIF_ACTIVE
                    End If
                  End If
                End If
              End If
            End If
          Else
            ; nothing happens
          End If

          *listView\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
        End If

      End If

    Case #TUIEV_MOUSEMOVE
      pointerID.l = #TUIPOINTER_DEFAULT
      If *listView\obj\flags&#TUIF_ACTIVE
        done=True

        cellX.l = _ntui_GetListViewColumnFromXPos{*listView,*ev\pos\x-*listView\obj\cbox\left}
        itemX.l = _ntui_GetListItemFromYPos{*listView,*ev\pos\y-*listView\obj\cbox\top}

        ntui_GetEventAttr{*ev,#TUIEVA_QUALIFIER,&quali.l}
        If *listView\ankerX><itemX
          If itemX>=0 AND itemX<*listView\totalItems
            *listItem.tuiListItem = !ntui_GetListItemP{itemX}

            If *listView\multiSelect
              If *listView\ankerX>itemX Then dx.l=-1:Else dx=1
              fromX.l = -1 : toX.l = -1
              For itemY.l=*listView\ankerX To itemX Step dx
                *listItem.tuiListItem = !ntui_GetListItemP{itemY}
                of.l = *listItem\addFlags
                *listItem\addFlags = ((*listItem\addFlags|#TUIF_ACTIVE)-#TUIF_ACTIVE) | *listView\slideMode
                If of><*listItem\addFlags Then toX = itemY : If fromX<0 Then fromX=itemY
              Next

              itemY.l = *listView\ankerX
              *listView\ankerX = itemX

              If (itemY<fromX OR itemY>toX)
                *rp.RastPort = ntui_ObtainRastPort{*listView}
                If *rp
                  _ntui_DrawListViewItem{*listView,*rp,itemY,itemY}
                  ntui_ReleaseRastPort{*listView}
                End If
              End If
            Else
              *listView\ankerX = itemX
              *rp.RastPort = ntui_ObtainRastPort{*listView}
              _ntui_ListViewDeselectAll{*listView,*rp}
              If *rp Then ntui_ReleaseRastPort{*listView}
              *listItem\addFlags|#TUIF_ACTIVE
              fromX.l = itemX : toX.l = itemX
              *listItem.tuiListItem = !ntui_GetListItemP{itemX}
            End If

            If fromX<0 Then fromX=*listView\ankerX : toX=*listView\ankerX
            *rp.RastPort = ntui_ObtainRastPort{*listView}
            If *rp
              _ntui_DrawListViewItem{*listView,*rp,fromX,toX}
              ntui_ReleaseRastPort{*listView}
            End If
          End If
        End If
      Else
        If (!tuiRectHit{*listView\obj\cbox,*ev\pos\x,*ev\pos\y});ntui_HitObject{*listView,*ev\pos\x,*ev\pos\y}

          cellX.l = _ntui_GetListViewColumnFromXPos{*listView,*ev\pos\x-*listView\obj\cbox\left}
          itemX.l = _ntui_GetListItemFromYPos{*listView,*ev\pos\y-*listView\obj\cbox\top}

          If itemX=-1 ; we hit the title
            If cellX=-1 ; we didnt hit anything
              pointerID.l = #TUIPOINTER_TEXT
            Else
              If cellX<-1 ; we hit seperator
                pointerID.l = #TUIPOINTER_HDRAG
                done=True
              End If
            End If
          End If

          ntui_SetPointer{*listView,pointerID}
        End If
      End If

    Case #TUIEV_KEYDOWN
      ntui_GetEventAttr{*ev,#TUIEVA_RAWKEY,&rkey.l}
      Select rkey
        Case #RAWKEY_UP
          toX.l = *listView\ankerX
          *listView\ankerX-1
          If (*listView\ankerX<0) Then *listView\ankerX = 0
          If (*listView\ankerX>=*listView\totalItems) Then *listView\ankerX = *listView\totalItems-1
          fromX.l = *listView\ankerX
          If toX<0 OR fromX>*listView\totalItems Then toX=fromX
          *rp.RastPort = ntui_ObtainRastPort{*listView}
          dy.l = 0
          If *listView\ankerX<*listView\topItem Then dy = *listView\ankerX-*listView\topItem
          If *listView\ankerX>=*listView\topItem+*listView\visibleItems Then dy = *listView\ankerX-(*listView\topItem+*listView\visibleItems-1)         
          _ntui_ScrollListView{*listView,0,dy,*rp}
          If *rp
            _ntui_DrawListViewItem{*listView,*rp,fromX,toX}
            ntui_ReleaseRastPort{*listView}
          End If

          done=True

        Case #RAWKEY_DOWN
          fromX.l = *listView\ankerX
          *listView\ankerX+1
          If (*listView\ankerX<0) Then *listView\ankerX = 0
          If (*listView\ankerX>=*listView\totalItems) Then *listView\ankerX = *listView\totalItems-1
          toX.l = *listView\ankerX
          If fromX<0 OR fromX>*listView\totalItems Then fromX=toX
          *rp.RastPort = ntui_ObtainRastPort{*listView}
          dy.l = 0
          If *listView\ankerX<*listView\topItem Then dy = *listView\ankerX-*listView\topItem
          If *listView\ankerX>=*listView\topItem+*listView\visibleItems Then dy = *listView\ankerX-(*listView\topItem+*listView\visibleItems-1)         
          _ntui_ScrollListView{*listView,0,dy,*rp}
          If *rp
            _ntui_DrawListViewItem{*listView,*rp,fromX,toX}
            ntui_ReleaseRastPort{*listView}
          End If

          done=True

      End Select


      ntui_GetEventAttr{*ev,#TUIEVA_VANILLAKEY,&vkey.l}
      Select vkey
        Case 13 ; return
          ntui_SetFocus{*listView}
          done      = True
          itemX.l = *listView\ankerX
          If (itemX>=0 AND itemX<*listView\totalItems)
            *listItem.tuiListItem = !ntui_GetListItemP{itemX}
            wasActive.l = (*listItem\addFlags&#TUIF_ACTIVE)
            *rp.RastPort = ntui_ObtainRastPort{*listView}
            _ntui_ListViewDeselectAll{*listView,*rp}
            *listItem\addFlags|#TUIF_ACTIVE
            If (*rp)
              _ntui_DrawListViewItem{*listView,*rp,itemX,itemX}
              ntui_ReleaseRastPort{*listView}
            End If
            
            If wasActive
              !tuiHandleNotify{done,*listView,onSelect,*ev}
            Else
              !tuiHandleNotify{done,*listView,onTouch,*ev}
            End If
            
          End If
      End Select

    Case #TUIEV_HSCROLL
      _ntui_SetListViewAttr{*listView,#TUILVA_LEFTOFFSET,*listView\leftOffset + *listView\step_\x * *ev\value }
      done = True

    Case #TUIEV_VSCROLL
      _ntui_SetListViewAttr{*listView,#TUILVA_TOPITEM,*listView\topItem + *listView\step_\y * *ev\value }
      done = True

    Case #TUIEV_BIND_HDELTA
      *rp.RastPort = ntui_ObtainRastPort{*listView}
      _ntui_ScrollListView{*listView,*listView\step_\x * *ev\value, 0, *rp}
      If *rp Then ntui_ReleaseRastPort{*listView}
      done = True

    Case #TUIEV_BIND_VDELTA
      *rp.RastPort = ntui_ObtainRastPort{*listView}
      _ntui_ScrollListView{*listView,0,*listView\step_\y * *ev\value,*rp}
      If *rp Then ntui_ReleaseRastPort{*listView}
      done = True

    Case #TUIEV_BIND_HVALUE
      *rp.RastPort = ntui_ObtainRastPort{*listView}
      _ntui_ScrollListView{*listView,*ev\value-*listView\leftOffset,0,*rp}
      If *rp Then ntui_ReleaseRastPort{*listView}
      done = True

    Case #TUIEV_BIND_VVALUE
      *rp.RastPort = ntui_ObtainRastPort{*listView}
      _ntui_ScrollListView{*listView,0,*ev\value-*listView\topItem,*rp}
      If *rp Then ntui_ReleaseRastPort{*listView}
      done = True

    Case #TUIEV_PROPAGATE
      _ntui_PropagateBind{*listView,#TUIEV_BIND_VTOTAL  ,*listView\totalItems   ,Null}
      _ntui_PropagateBind{*listView,#TUIEV_BIND_VVALUE  ,*listView\topItem      ,Null}
      _ntui_PropagateBind{*listView,#TUIEV_BIND_VVISIBLE,*listView\visibleItems ,Null}
      _ntui_PropagateBind{*listView,#TUIEV_BIND_VSTEP   ,*listView\step_\y      ,Null}
      _ntui_PropagateBind{*listView,#TUIEV_BIND_HTOTAL  ,*listView\totalWidth   ,Null}
      _ntui_PropagateBind{*listView,#TUIEV_BIND_HVALUE  ,*listView\leftOffset   ,Null}
      _ntui_PropagateBind{*listView,#TUIEV_BIND_HVISIBLE,*listView\visibleWidth ,Null}
      _ntui_PropagateBind{*listView,#TUIEV_BIND_HSTEP   ,*listView\step_\x      ,Null}
      done=True

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_DispatchListViewEvent,{Null,Null}}

;Function.l _ntui_DispatchListViewEvent_old{*listView.tuiListView,*ev.tuiEvent}
;click.l = False : release.l = False  : press.l = False : done.l = False
;maus.l = False
;newvalue.l = *listView\obj\value
;
;Select *ev\msg\Class
;  Case #IDCMP_MOUSEBUTTONS
;    click=!tuiev_MouseClick : release=!tuiev_MouseRelease : press = !ntui_MouseButtonStatus{1} : done = True
;    maus.l = True
;  Case #IDCMP_MOUSEMOVE
;    click=False                        : release=False                          : press = !ntui_MouseButtonStatus{1}  : done=True
;    maus.l=True
;  Case #IDCMP_RAWKEY
;    If !tuiev_KeyDown
;      Select !tuiev_RawKey
;        Case #RAWKEY_LEFT
;        Case #RAWKEY_RIGHT
;        Case #RAWKEY_UP
;          newvalue = *listView\obj\value-1
;          If newvalue<0 Then newvalue=0
;          If newvalue>=*listView\totalItems Then newvalue=*listView\totalItems-1
;          done=True
;          If !tuiev_Shift=False
;            *listItem.tuiListItem = *listView\listP
;            For n.l=0 To *listView\totalItems-1
;              *listItem\addFlags|(#TUIF_ACTIVE)-(#TUIF_ACTIVE)
;              *listItem + SizeOf.tuiListItem
;            Next
;          End If
;
;        Case #RAWKEY_DOWN
;          newvalue = *listView\obj\value+1
;          If newvalue<0 Then newvalue=0
;          If newvalue>=*listView\totalItems Then newvalue=*listView\totalItems-1
;          done=True
;          If !tuiev_Shift=False
;            *listItem.tuiListItem = *listView\listP
;            For n.l=0 To *listView\totalItems-1
;              *listItem\addFlags|(#TUIF_ACTIVE)-(#TUIF_ACTIVE)
;              *listItem + SizeOf.tuiListItem
;            Next
;          End If
;;
;      End Select
;      Select !tuiev_VanillaKey
;        Case 13
;          item.l = *listView\obj\value
;          If item>=0 AND item<*listView\totalItems
;            *listItem.tuiListItem = !ntui_GetListItem{item}
;            If *listItem
;               *listItem\addFlags|#TUIF_ACTIVE
;               newvalue = item
;               ntui_Refresh{*listView}
;               *ev\notify = *listView\obj\notify
;            End If
;          End If
;      End Select
;    EndIf
;
;  Default
;    Function Return False
;End Select
;
;If maus
;  pointerID.l = #TUIPOINTER_DEFAULT
;  If click   Then _ntui_SetActive{*listView\obj\tuiWindow,*listView}
;  If release Then _ntui_SetActive{*listView\obj\tuiWindow,null}
;
;  ;If click Then error{"Click!"}
;  If cy<0 OR *listView\colPressN>=0
;    ;error {"Click: head, col:"+Str$(ccol)}
;    If click
;      If *clickCol Then *clickCol\addFlags|#TUIF_ACTIVE
;      *listView\colPressN    = ccol
;      *listView\colPressItem = *clickCol
;    End If
;    ccol      = *listView\colPressN
;    *clickCol = *listView\colPressItem
;    If release
;      If *clickCol Then *clickCol\addFlags|#TUIF_ACTIVE - #TUIF_ACTIVE
;      ntui_SetListViewSorting{*listView,ccol}
;      *listView\colPressN    = -1
;      *listView\colPressItem = null
;    End If
;    ntui_Refresh{*listView}
;  Else
;    item.l = cy/*listView\itemHeight + *listView\topItem
;    If *listView\multiSelect
;      If release=False
;        If (click><False AND !tuiev_Alt=False  AND !tuiev_Shift=False) ;OR (*listView\multiSelect=False and)
;          *listItem.tuiListItem = *listView\listP
;          For n.l=0 To *listView\totalItems-1
;            *listItem\addFlags|(#TUIF_ACTIVE)-(#TUIF_ACTIVE)
;            *listItem + SizeOf.tuiListItem
;          Next
;        End If
;      End If
;    End If
;
;    If click
;      If (*listView\obj\flags&#TUIF_IMMIDIATE) OR (!tuiev_DoubleClick><False)
;        *ev\notify = *listView\obj\notify
;      End If
;    End If
;
;    If item>=0 AND item<*listView\totalItems
;      *listItem.tuiListItem = !ntui_GetListItem{item}
;      If *listItem
;        If press
;          *listItem\addFlags|#TUIF_ACTIVE
;          newvalue = item
;        End If
;      End If
;    Else
;  ;    error {"Click: item:"+Str$(item)}
;      If click Then newvalue=-1
;    End If
;  End If
;  ntui_SetPointer{*listView,pointerID}
;End If ; maus
;done=True
;If newvalue><*listView\obj\value
;
;  If *listView\multiSelect=False
;    If *listView\obj\value>=0 AND *listView\obj\value<*listView\totalItems
;      *listItem = *listView\listP + (*listView\obj\value * SizeOf.tuiListItem)
;      *listItem\addFlags|#TUIF_ACTIVE - #TUIF_ACTIVE
;    End If
;  End If
;  *listView\obj\value=newvalue
;  If *listView\obj\value>=0 AND *listView\obj\value<*listView\totalItems
;    *listItem = *listView\listP + (*listView\obj\value * SizeOf.tuiListItem)
;    *listItem\addFlags|#TUIF_ACTIVE
;  End If
;  ntui_Refresh{*listView}
;End If
;Function Return done
;End Function




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetListViewMinSize {*listView.tuiListView,*rp:: /
;/ .RastPort}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/   ; parse the title...                                                      /
;/   ;*listView\HScroller    = ntui_HScroller{*listView\offset,*tuiLis:: /
;/ tView\totalWidth,*listView\visibleWidth}                                 /
;/ * calculate the minimum size for the ListView */                              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *listView.tuiListView    : ???                                         /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_CalculateListViewMinSize:
Statement _ntui_CalculateListViewMinSize{*listView.tuiListView,*rp.RastPort}
!_ASSERT{*listView}
!_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}
!_ASSERT{*rp}
*engine.tuiEngine = *listView\obj\engine
!_ASSERT{*engine}

*listView\itemHeight   = *engine\defSize[#TUISIZE_INLINE] + !tuiBorderHeight{*listView\cellPadding}
If str_Len{*listView\title\rawLabel}
  *listView\titleHeight = *engine\defSize[#TUISIZE_INLINE] + 2 + *listView\obj\padding\top + *listView\cellPadding\bottom
Else
  *listView\titleHeight = 0
End If
*listView\obj\minsize\x = *listView\itemHeight,*listView\itemHeight
*listView\obj\minsize\y + *listView\titleHeight

If *listView\vScroller Then _ntui_CalculateScrollerMinSize{*listView\vScroller,*rp} : *listView\obj\minsize\x + *listView\vScroller\obj\minsize\x
If *listView\hScroller Then _ntui_CalculateScrollerMinSize{*listView\hScroller,*rp} : *listView\obj\minsize\y + *listView\hScroller\obj\minsize\y

_ntui_GetBorderSize{*engine,*listView\obj\borderType,*listView\obj\flags,*listView\obj\border}

*listView\obj\minsize\x + !tuiBorderWidth {*listView\obj\border} ;+ !tuiBorderWidth {*listView\obj\padding}
*listView\obj\minsize\y + !tuiBorderHeight{*listView\obj\border} ;+ !tuiBorderHeight{*listView\obj\padding}

End Statement
!_MakeGlobalFuncPointer{_ntui_CalculateListViewMinSize,{Null,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeListView {*listView.tuiListView}                       /
;/                                                                             /
;/ Description:                                                                /
;/ *listView\itemHeight = *engine\font[#TUIFONT_NORMAL]\tf_YSize+1;+*tu:: /
;/ iEngine\defPad\y*2                                                          /
;/ * free everything special that we allocated for the ListView */               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *listView.tuiListView    : ???                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitListView:
Statement _ntui_DeinitListView{*listView.tuiListView}
  !_ASSERT{*listView}
  !_ASSERT{*listView\obj\classID=#TUICLASS_LISTVIEW}

  ntui_ClearListView{*listView}

  *listView\vScroller = Null
  *listView\hScroller = Null
  
  If *listView\memPool Then DeletePool_ *listView\memPool : *listView\memPool = Null

  If *listView\primeSortImgUp    Then ntui_FreeTBImage{*listView\primeSortImgUp}
  If *listView\primeSortImgDown  Then ntui_FreeTBImage{*listView\primeSortImgDown}
  If *listView\secondSortImgUp   Then ntui_FreeTBImage{*listView\secondSortImgUp}
  If *listView\secondSortImgDown Then ntui_FreeTBImage{*listView\secondSortImgDown}

  !tuiFreeNotifyHandler{*listView\onSelect}
  !tuiFreeNotifyHandler{*listView\onTouch}
  !tuiFreeNotifyHandler{*listView\onFileListenerClose}

  If *listView\listP Then FreeVec_ *listView\listP : *listView\listP = Null ; free this alloc too tomsmart1

End Statement
!_MakeGlobalFuncPointer{_ntui_DeinitListView,{Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_ListView {title.s,@multiSelect.l,@notify.l,@help.:: /
;/ s,@flags.l,@userID.l}                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Create function for tui ListView.                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - title.s        : title text                                                          /
;/ - multiSelect.l  : allow multiselect                                                    /
;/ - notify.l       : notify value                                                         /
;/ - help.s         : help text                                                           /
;/ - flags.l        : TUIF_... flags                                                         /
;/ - userID.l       : user ID                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l       : pointer to ListView or NULL if failed                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_ListView:
Function.tuiListView ntui_ListView{*tagList.TagItem}

  flags.l = #TUIF_WANTTAB|#TUIF_WANTMOVER
  *listView.tuiListView = (.tuiListView)_ntui_CreateObject{#TUICLASS_LISTVIEW,SizeOf.tuiListView,flags}

  If *listView

    *listView\itemHeight           = 8
    *listView\titleHeight          = 8
    *listView\scrollerMode         = #TUISCROLLER_AUTO
    *listView\slideMode            = 0
    *listView\sortingDirty         = True

    *listView\obj\borderType       = #TUIBORDER_RECESSED
    *listView\totalItems           = 0
    *listView\totalWidth           = 0
    *listView\visibleItems         = 0
    *listView\visibleWidth         = 0
    *listView\topItem              = 0
    *listView\leftOffset           = 0
    *listView\listP                = Null
    *listView\allocN               = 0
    *listView\incN                 = 64
    *listView\title\addFlags       = #TUIF_DIRTY
    *listView\title\cellA          = Null
    *listView\title\itemID         = -1
    *listView\title\colN           = 0
    *listView\title\rawLabel       = Null
    *listView\title\cellSize       = 0
    *listView\hScroller            = Null
    *listView\vScroller            = Null
    *listView\pressedColN          = -1
    *listView\pressedCell          = Null
    *listView\multiSelect          = False
    *listView\seekPos              = -1
    *listView\step_\x              = *listView\obj\engine\defStep\x
    *listView\step_\y              = 1
    *listView\ankerX               = -1
    *listView\cellPadding\left     = *listView\obj\padding\left
    *listView\cellPadding\top      = 0
    *listView\cellPadding\right    = *listView\obj\padding\right
    *listView\cellPadding\bottom   = 0

    *listView\primeSortImgUp       = ntui_CreateTBImage{*listView\obj\engine,"ARROWUP"    ,#TUISIZE_HALFINLINE,#TUISIZE_HALFINLINE}
    *listView\primeSortImgDown     = ntui_CreateTBImage{*listView\obj\engine,"ARROWDOWN"  ,#TUISIZE_HALFINLINE,#TUISIZE_HALFINLINE}
    *listView\secondSortImgUp      = ntui_CreateTBImage{*listView\obj\engine,"OLARROWUP"  ,#TUISIZE_HALFINLINE,#TUISIZE_HALFINLINE}
    *listView\secondSortImgDown    = ntui_CreateTBImage{*listView\obj\engine,"OLARROWDOWN",#TUISIZE_HALFINLINE,#TUISIZE_HALFINLINE}
    *listView\secondSortCol        = -1
    *listView\primeSortCol         = -1
    *listView\secondSortDir        = 0
    *listView\primeSortDir         = 0
    For n.l=0 To #TUILV_MAXSORTFUNCS-1
      *listView\sortFunc[n]=Null
    Next

    *listView\obj\Draw             = *_ntui_DrawListView
    *listView\obj\Layout           = *_ntui_LayoutListView
    *listView\obj\DispatchEvent    = *_ntui_DispatchListViewEvent
    *listView\obj\CalculateMinSize = *_ntui_CalculateListViewMinSize
    *listView\obj\Deinit           = *_ntui_DeinitListView
    *listView\obj\SetAttr          = *_ntui_SetListViewAttr
    *listView\obj\GetAttr          = *_ntui_GetListViewAttr

    !tuiInitNotifyHandler{*listView\onSelect}
    !tuiInitNotifyHandler{*listView\onTouch}
    !tuiInitNotifyHandler{*listView\onFileListenerClose}

    If *tagList Then ntui_SetAttrs{*listView,*tagList}

    _ntui_BeginChildren{*listView}

    *listView\vScroller    = ntui_VScroller{Null}
    If *listView\vScroller
      ntui_SetAttr{*listView\vScroller,#TUISCA_HASARROWS,True}
      ntui_SetAttr{*listView\vScroller,#TUIA_BORDERTYPE,#TUIBORDER_NONE}
    End If

    *listView\hScroller    = ntui_HScroller{Null}
    If *listView\hScroller
      ntui_SetAttr{*listView\hScroller,#TUISCA_HASARROWS,True}
      ntui_SetAttr{*listView\hScroller,#TUIA_BORDERTYPE,#TUIBORDER_NONE}
    End If

    _ntui_EndChildren{#TUICLASS_LISTVIEW}

    If (*listView\vScroller) Then ntui_Bind{*listView,*listView\vScroller}
    If (*listView\hScroller) Then ntui_Bind{*listView,*listView\hScroller}
    
    *listView\memPool = Null
    *listView\memPool = CreatePool_(0,32768,32768)

  End If

  Function Return *listView

End Function
!_MakeGlobalFuncPointer{ntui_ListView,{Null}}


Statement ntui_InitListViewClass{}

  classID.l = ntui_RegisterClass{"listview",(.tuiFunc)*ntui_ListView,Null}

  ntui_RegisterAttr{classID,"multiselect"     ,#TUILVA_MULTISELECT      ,#TUIAT_BOOL   ,0,0}
  ntui_RegisterAttr{classID,"cellcontent"     ,#TUILVA_CELLCONTENT      ,#TUIAT_STRING ,0,0}
  ntui_RegisterAttr{classID,"title"           ,#TUILVA_TITLE            ,#TUIAT_STRING ,0,0}
  ntui_RegisterAttr{classID,"topitem"         ,#TUILVA_TOPITEM          ,#TUIAT_INT    ,0,0}
  ntui_RegisterAttr{classID,"scrollermode"    ,#TUILVA_SCROLLERMODE     ,#TUIAT_INT    ,0,0}
  ntui_RegisterAttr{classID,"leftoffset"      ,#TUILVA_LEFTOFFSET       ,#TUIAT_INT    ,0,0}
  ntui_RegisterAttr{classID,"totalitems"      ,#TUILVA_TOTALITEMS       ,#TUIAT_INT    ,0,0}
  ntui_RegisterAttr{classID,"totalwidth"      ,#TUILVA_TOTALWIDTH       ,#TUIAT_INT    ,0,0}
  ntui_RegisterAttr{classID,"visibleitems"    ,#TUILVA_VISIBLEITEMS     ,#TUIAT_INT    ,0,0}
  ntui_RegisterAttr{classID,"visiblewidth"    ,#TUILVA_VISIBLEWIDTH     ,#TUIAT_INT    ,0,0}
  ntui_RegisterAttr{classID,"itemheight"      ,#TUILVA_ITEMHEIGHT       ,#TUIAT_INT    ,0,0}
  ntui_RegisterAttr{classID,"titleheight"     ,#TUILVA_TITLEHEIGHT      ,#TUIAT_INT    ,0,0}
  ntui_RegisterAttr{classID,"onselect"        ,#TUILVA_ONSELECT         ,#TUIAT_STRING ,0,0}
  ntui_RegisterAttr{classID,"onselectcb"      ,#TUILVA_ONSELECTCB       ,#TUIAT_PTR    ,0,0}
  ntui_RegisterAttr{classID,"ontouch"         ,#TUILVA_ONTOUCH          ,#TUIAT_STRING ,0,0}
  ntui_RegisterAttr{classID,"ontouchcb"       ,#TUILVA_ONTOUCHCB        ,#TUIAT_PTR    ,0,0}
  ntui_RegisterAttr{classID,"onfilelistenerclose"         ,#TUILVA_ONFILELISTENERCLOSE   ,#TUIAT_STRING ,0,0}
  ntui_RegisterAttr{classID,"onfilelistenerclosecb"       ,#TUILVA_ONFILELISTENERCLOSECB ,#TUIAT_PTR    ,0,0}

End Statement

ntui_InitListViewClass{}
