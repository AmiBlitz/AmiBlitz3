; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 80000
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 816
; CursorColumn    = 36
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_listview.include                                                 /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#TUI_HAS_LISTVIEW = 1

;/* ntui Listview Attributes */
#TUILVA_BASE              =  #TUIA_USER
#TUILVA_MULTISELECT       =  1 + #TUILVA_BASE  ; lv
#TUILVA_CELLCONTENT       =  2 + #TUILVA_BASE

NEWTYPE.tuiColItem
addFlags.l                ; additional flags For column
pixWidth.l                ; real pixel width
*img.tuiTBImage           ; image, if any
textSize.l                ; text width cache
End NEWTYPE

NEWTYPE.tuiListViewItem
colN.l                    ; number of columns
*label.tuiColItem ; [...] ; array of col items
*hidden.str               ; item data string
itemID.l                  ; item Id
userData.l                ; user data
addFlags.l                ; additional flags for row
End NEWTYPE

NEWTYPE.tuiListView
obj.tuiObject            ; tui object header
;lbox.tuiRect             ; box of actual list
totalRows.l              ; height in rows
totalWidth.l             ; width in pixels
visibleRows.l            ; visible in rows
visibleWidth.l           ; visible in pixels
topRow.l                 ; offset in rows
offset.l                 ; offset in pixels
*listP.tuiListViewItem   ; linked list of items
allocN.l                 ; allocated items
incN.l                   ; buffer increase
title.tuiListViewItem    ; title item
rowHeight.l              ; height of one row
titleHeight.l            ; height of title row
*hScroller.tuiScroller   ; we have horizontal scroller
*vScroller.tuiScroller   ; we have vertical scroller
multiSelect.w            ; multiselect activated
seekPos.l                ; last queries item

colPressN.l
*colPressItem.tuiColItem

primeSortCol.l
primeSortDir.l
*primeSortImgUp.tuiTBImage
*primeSortImgDown.tuiTBImage
secondSortCol.l
secondSortDir.l
*secondSortImgUp.tuiTBImage
*secondSortImgDown.tuiTBImage
End NEWTYPE

_ntui_SetListViewAttr:
Function.l _ntui_SetListViewAttr{*tui.tuiListView,ti_Tag.l,ti_Data.l}
succ.l = False
Select ti_Tag
  Case #TUILVA_MULTISELECT
    *tui\multiSelect = ti_Data : succ=True
End Select
Function Return succ
End Function

_ntui_GetListViewAttr:
Function.l _ntui_GetListViewAttr{*tui.tuiListView,ti_Tag.l,@ti_Data.l}
ret.l = 0
Select ti_Tag
  Case #TUILVA_MULTISELECT
    ret.l = *tui\multiSelect
  Default
End Select
Function Return ret
End Function
 

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ntui_GetListViewItem {listview,row}                                /
;/                                                                             /
;/ Description:                                                                /
;/ Get the pointer to a listview item                                                                            /
;/ Inputs:                                                                     /
;/ - listview    : ???                                                         /
;/ - row    : ???                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ntui_GetListViewItem ; {row}
  *tuiListView\listP + ((`1) * SizeOf.tuiListViewItem)
End Macro

Function.l _ntui_GetListViewItem{*tuiListView.tuiListView,row.l}
  If row<0 Then Function Return *tuiListView\title
  If row<*tuiListView\totalRows
    *tuiListViewItem.tuiListViewItem = !ntui_GetListViewItem{row}
    Function Return *tuiListViewItem
  End If
  Function Return #NULL
End Function

Function.l _ntui_GetColItem{*tuiListViewItem.tuiListViewItem,col.l}
  *tuiColItem.tuiColItem = *tuiListViewItem\label
  If col>=*tuiListViewItem\colN Then Function Return #NULL
  While col>0
    nextP.l = *tuiColItem + SizeOf.tuiColItem + *tuiColItem\textSize +1
    If nextP&1 Then nextP+1
    *tuiColItem = nextP
    col-1
  Wend
  Function Return *tuiColItem
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_SetListViewSorting {*tuiListView.tuiListView,col.l}            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiListView.tuiListView    : ???                                         /
;/ - col.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_SetListViewSorting{*tuiListView.tuiListView,col.l}
If col=*tuiListView\primeSortCol
  *tuiListView\primeSortDir=1-*tuiListView\primeSortDir
Else
  If *tuiListView\secondSortDir=col Then *tuiListView\primeSortDir=1-*tuiListView\secondSortDir
  *tuiListView\secondSortDir=*tuiListView\primeSortDir
  *tuiListView\secondSortCol=*tuiListView\primeSortCol
  *tuiListView\primeSortCol =col
End If
If (*tuiListView\secondSortCol=*tuiListView\primeSortCol) Then *tuiListView\secondSortCol=-1
ntui_Refresh{*tuiListView,#NULL}
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_ParseListViewLabel {*tuiListView.tuiListView,*tu:: /
;/ iListViewItem.tuiListViewItem,label.s}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiListView.tuiListView    : ???                                         /
;/ - *tuiListViewItem.tuiListViewItem    : ???                                 /
;/ - label.s    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_ParseListViewLabel{*tuiListView.tuiListView,*tuiListViewItem.tuiListViewItem,label.s}
If *tuiListView=#NULL Then Function Return #NULL
If *tuiListViewItem=#NULL Then Function Return #NULL
*tuiEngine.tuiEngine = *tuiListView\obj\tuiEngine
If *tuiEngine=#NULL Then Function Return #NULL

; parse the label...
stringP.l  = &label
l.l        = FLen(label)
i.l        = 0
If (*tuiListViewItem\label) Then FreeVec_ *tuiListViewItem\label : *tuiListViewItem\label=#NULL

baseP.l = _ntui_ObtainTempBuffer{(l+1) * SizeOf.tuiColItem}
*tuiListViewItem\colN = 0
labelP.l = baseP
*tuiColItem.tuiColItem = labelP
*tuiColItem\textSize = 0
*tuiColItem\img      = #NULL
*tuiColItem\addFlags = 0
*tuiColItem\pixWidth = 0
labelP + SizeOf.tuiColItem

While i<=l ; fill the columns e.g.
  Select Peek.b(stringP+i)
    Case @"|"
      Poke.b labelP,0 : labelP+1
      If (labelP&1) Then Poke.b labelP,0 : labelP+1
      *tuiListViewItem\colN+1 : *tuiColItem = labelP  : labelP+SizeOf.tuiColItem
      *tuiColItem\textSize = 0
      *tuiColItem\img      = #NULL
      *tuiColItem\addFlags = 0
      *tuiColItem\pixWidth = 0
    Case @"\"
      Select  Peek.b(stringP+i+1)
        Case @"l" : *tuiColItem\addFlags|#TUIF_LEFT
        Case @"r" : *tuiColItem\addFlags|#TUIF_RIGHT
        Case @"b" : *tuiColItem\addFlags|#TUIF_BOLD
        Case @"i" : *tuiColItem\addFlags|#TUIF_ITALIC
        Case @"s" : *tuiColItem\addFlags|#TUIF_SMALL
        Case @"u" : *tuiColItem\addFlags|#TUIF_UNDERLINED
        Case @"f" : *tuiColItem\addFlags|#TUIF_FIX
        Case @"d" : *tuiColItem\addFlags|#TUIF_DISABLED
        Case @"h" : *tuiColItem\addFlags|#TUIF_HIGHLIGHT
        Case @"~" : *tuiColItem\addFlags|#TUIF_UNDERLINED
        Case @"|" : Poke.b labelP,@"|" : labelP+1
        Case @"\" : Poke.b labelP,@"\" : labelP+1
        Case @"t" : ;just continue with text
        Case @"p" : ;picture
          i+2
          j.l = i
          While i<l AND Peek.b(stringP+i)><@"|" AND Peek.b(stringP+i)><@"\"
            i+1
          Wend
          imagefile.s = Peeks$(stringP+j,i-j)
          ;error {"Loadimage: "+imagefile+"!"}
          *tuiColItem\img = ntui_CreateTBImage{*tuiEngine,imagefile,#TUISIZE_INLINE,#TUISIZE_INLINE}
          i-2
      End Select
      i+1
    Case 0
      Poke.b labelP,0 : labelP+1
      If (labelP&1) Then Poke.b labelP,0 : labelP+1
      *tuiListViewItem\colN+1
      i=l
    Default
      Poke.b labelP,Peek.b(stringP+i) : labelP+1
      *tuiColItem\textSize+1
  End Select
  i+1
Wend

byteSize.l = labelP-baseP
*tuiListViewItem\label = AllocVec_(byteSize,#MEMF_ANY)
If *tuiListViewItem\label=#NULL Then Function Return #NULL
CopyMem_ baseP,*tuiListViewItem\label,byteSize
_ntui_ReleaseTempBuffer{}
Function Return *tuiListViewItem\label
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = ntui_AddListViewItem {*tuiListView.tuiListView,row.l,l:: /
;/ abel.s,@itemID.l,@userData.l,@flags.l,@string.s}                            /
;/                                                                             /
;/ Description:                                                                /
;/ parse the label...                                                          /
;/           ;error {"Loadimage: "+imagefile+"!"}                              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiListView.tuiListView    : ???                                         /
;/ - row.l    : ???                                                            /
;/ - label.s    : ???                                                          /
;/ - itemID.l    : ???                                                         /
;/ - userData.l    : ???                                                       /
;/ - flags.l    : ???                                                          /
;/ - string.s    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ntui_AddListViewItem{*tuiListView.tuiListView,row.l,label.s,@itemID.l,@userData.l,@flags.l,@string.s}
succ.l = False
If row<0 Then row=*tuiListView\totalRows
If (flags=#TUI_NOFLAGS) Then flags=0
If *tuiListView\totalRows>=*tuiListView\allocN ; re-alloc table
  *listP.tuiListViewItem = AllocVec_((*tuiListView\totalRows+*tuiListView\incN)*SizeOf.tuiListViewItem,#MEMF_ANY)
  If *listP
    If *tuiListView\listP
      CopyMem_ *tuiListView\listP,*listP,*tuiListView\totalRows*SizeOf.tuiListViewItem
      FreeVec_ *tuiListView\listP
    End If
    *tuiListView\listP  = *listP
    *tuiListView\allocN = *tuiListView\totalRows+*tuiListView\incN
  End If
End If

If *tuiListView\totalRows<*tuiListView\allocN
  If *tuiListView\obj\value>=row Then *tuiListView\obj\value+1
  If (row<*tuiListView\totalRows)
    *tuiListViewItem.tuiListViewItem = !ntui_GetListViewItem{*tuiListView\totalRows-1}
    For i.l=row To *tuiListView\totalRows-1
      CopyMem_ *tuiListViewItem,*tuiListViewItem+SizeOf.tuiListViewItem,SizeOf.tuiListViewItem
      *tuiListViewItem - SizeOf.tuiListViewItem
    Next
  End If
  *tuiListViewItem.tuiListViewItem = !ntui_GetListViewItem{row}
  *tuiListViewItem\itemID   = itemID
  *tuiListViewItem\addFlags = flags
  *tuiListViewItem\label    = #NULL
  *tuiListViewItem\hidden   = #NULL
  *tuiListViewItem\userData = userData

  If label Then _ntui_ParseListViewLabel{*tuiListView,*tuiListViewItem,label}
  If string Then str_Write{&*tuiListViewItem\hidden,string}
  *tuiListView\totalRows+1
  succ = True
  ;error{"added item "+label+" of "+Str$(*tuiListView\totalRows)}
  If *tuiListView\vScroller Then _ntui_UpdateScroller{*tuiListView\vScroller,*tuiListView\topRow,*tuiListView\visibleRows,*tuiListView\totalRows,1,False}

  ntui_Refresh{*tuiListView,#NULL}
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_GetListViewItemID {*tuiListView.tuiListView,row.l}  /
;/                                                                             /
;/ Description:                                                                /
;/ Get the itemID from a listview row.          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiListView.tuiListView    : listview to search                                         /
;/ - row.l                       : row to find                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l                    : itemID of row or -1 if not found                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_GetListViewItemID{*tuiListView.tuiListView,row.l}
*tuiListViewItem.tuiListViewItem = !ntui_GetListViewItem{row}
itemID.l= *tuiListViewItem\itemID
Function Return itemID
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_GetListViewItemUserData {*tuiListView.tuiListView:: /
;/ ,row.l}                                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiListView.tuiListView    : ???                                         /
;/ - row.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_GetListViewItemUserData{*tuiListView.tuiListView,row.l}
*tuiListViewItem.tuiListViewItem = !ntui_GetListViewItem{row}
Function Return *tuiListViewItem\userData
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_GetSelectedListViewItem {*tuiListView.tuiListView}  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiListView.tuiListView    : ???                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_GetNextSelectedListViewItem{*tuiListView.tuiListView}
  *tuiListView\seekPos+1
  While *tuiListView\seekPos<*tuiListView\totalRows
    *tuiListViewItem.tuiListViewItem = *tuiListView\listP + (*tuiListView\seekPos * SizeOf.tuiListViewItem)
    If (*tuiListViewItem\addFlags&#TUIF_ACTIVE) Then Function Return *tuiListView\seekPos
    *tuiListView\seekPos+1
  Wend
  *tuiListView\seekPos=-1
  Function Return *tuiListView\seekPos
End Function


Function.l ntui_GetFirstSelectedListViewItem{*tuiListView.tuiListView}
*tuiListView\seekPos=-1
Function Return ntui_GetNextSelectedListViewItem{*tuiListView}
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.s = ntui_GetListViewItemString {*tuiListView.tuiListView,r:: /
;/ ow.l}                                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiListView.tuiListView    : ???                                         /
;/ - row.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ntui_GetListViewItemString{*tuiListView.tuiListView,row.l}
*tuiListViewItem.tuiListViewItem = !ntui_GetListViewItem{row}
hidden.s = str_Read{&*tuiListViewItem\hidden}
Function Return hidden
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.s = ntui_GetListViewItemLabel {*tuiListView.tuiListView,ro:: /
;/ w.l,col.l}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Get the label text of a cell, given by row and column.                                               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiListView.tuiListView    : ???                                         /
;/ - row.l    : ???                                                            /
;/ - col.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ntui_GetListViewItemLabel{*tuiListView.tuiListView,row.l,col.l}
*tuiListViewItem.tuiListViewItem = !ntui_GetListViewItem{row}
;label.s = str_Read{&*tuiListViewItem\label}
text.s = ""
Function Return text
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_GetListViewItemRow {*tuiListView.tuiListView,item:: /
;/ ID.l}                                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Get the row of a listview item given by itemID.                               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiListView.tuiListView    : ???                                         /
;/ - itemID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_GetListViewItemRow{*tuiListView.tuiListView,itemID.l}
row.l=0
*tuiListViewItem.tuiListViewItem = *tuiListView\listP
While row<*tuiListView\totalRows
  If *tuiListViewItem\itemID=itemID Then Function Return row
  row+1
  *tuiListViewItem + SizeOf.tuiListViewItem
Wend
Function Return -1
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_RemListViewItem {*tuiListView.tuiListView,row.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiListView.tuiListView    : ???                                         /
;/ - row.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_RemListViewItem{*tuiListView.tuiListView,row.l}
succ.l = False
If row<0 Then row=*tuiListView\totalRows-1
If row>=0 AND row<*tuiListView\totalRows
  *tuiListViewItem.tuiListViewItem = !ntui_GetListViewItem{row}

  If *tuiListViewItem\label Then FreeVec_ *tuiListViewItem\label    : *tuiListViewItem\label=#NULL
  str_Free{&*tuiListViewItem\hidden}

  If *tuiListView\obj\value=row Then *tuiListView\obj\value=-1
  If *tuiListView\obj\value>row Then *tuiListView\obj\value-1

  For i.l=row To *tuiListView\totalRows-2
    CopyMem_ *tuiListViewItem+SizeOf.tuiListViewItem,*tuiListViewItem,SizeOf.tuiListViewItem
    *tuiListViewItem + SizeOf.tuiListViewItem
  Next
  *tuiListView\totalRows-1
  ;ntui_PropagateBind{*tuiListView}
  If *tuiListView\vScroller Then _ntui_UpdateScroller{*tuiListView\vScroller,*tuiListView\topRow,*tuiListView\visibleRows,*tuiListView\totalRows,1,False}
  ntui_Refresh{*tuiListView,#NULL}
  succ=True
End If
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_RemListViewItemByID {*tuiListView.tuiListView,ite:: /
;/ mID.l}                                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiListView.tuiListView    : ???                                         /
;/ - itemID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_RemListViewItemByID{*tuiListView.tuiListView,itemID.l}
row.l = ntui_GetListViewItemRow{*tuiListView,itemID}
If row>=0 Then Function Return ntui_RemListViewItem{*tuiListView,row}
Function Return False
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_ClearListView {*tuiListView.tuiListView}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiListView.tuiListView    : ???                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_ClearListView{*tuiListView.tuiListView}
While ntui_RemListViewItem{*tuiListView,-1} : Wend
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = _ntui_HandleListView {*tuiListView.tuiListView,*tuiEve:: /
;/ nt.tuiEvent}                                                                /
;/                                                                             /
;/ Description:                                                                /
;/ * do what happens if the user operates the ListView */                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiListView.tuiListView    : ???                                         /
;/ - *tuiEvent.tuiEvent    : ???                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_GetListViewColumnFromXPos{*tuiListView.tuiListView,cx.l}
  ;If *tuiListView\title\label Then cy-*tuiListView\titleHeight
  ccol.l = -1
  cx1.l  = 0
  *clickCol.tuiColItem=#NULL
  If *tuiListView\title\label
    *tuiColItem.tuiColItem = *tuiListView\title\label
    For col.l=0 To *tuiListView\title\colN-1
      cx2.l = cx1+*tuiColItem\pixWidth-1
      If cx1<=cx AND cx<=cx2 Then ccol=col:*clickCol.tuiColItem = *tuiColItem
      If (*tuiColItem\addFlags&#TUIF_UNDERLINED)=0 AND col<*tuiListView\title\colN-1
        If cx>=cx2 AND cx<=cx2+3 Then ccol = -ccol ; hit a seperator
        cx1=cx2+3
      Else
        cx1=cx2+1
      End If

      nextP.l = *tuiColItem + SizeOf.tuiColItem + *tuiColItem\textSize +1
      If nextP&1 Then nextP+1
      *tuiColItem = nextP
    Next
  Else
    If cx>=0 AND cx<!tuiRectWidth{*tuiListView\obj\cbox} Then ccol=0
  End If
Function Return ccol
End Function


Function.l _ntui_GetListViewRowFromYPos{*tuiListView.tuiListView,cy.l}
  row.l = -1
  If *tuiListView\title\label
    If (cy<=*tuiListView\titleHeight)
      row = -1
    Else
      row.l = (cy-*tuiListView\titleHeight)/*tuiListView\rowHeight + *tuiListView\topRow
    End If
  Else
    row.l = cy/*tuiListView\rowHeight + *tuiListView\topRow
  End If

  Function Return row
End Function


_ntui_LayoutListView:
Statement _ntui_LayoutListView{*tuiListView.tuiListView,*rp.RastPort,*bbox.tuiRect}

  !_ASSERT{*tuiListView}
  !_ASSERT{*tuiListView\obj\classID=#TUICLASS_LISTVIEW}
  !_ASSERT{*rp}
  *tuiEngine.tuiEngine = *tuiListView\obj\tuiEngine
  !_ASSERT{*tuiEngine}

  *tui.tuiObject = *tuiListView

  If *bbox
    !tuiCopyRect{*tui\bbox,*bbox}
  End If

  !tuiRemBorder{*tui\ibox,*tui\bbox,*tui\border}
  !tuiCopyRect{*tui\cbox,*tui\ibox}

  If *tuiListView\vScroller
    xs.l = *tuiListView\vScroller\obj\minsize\x
    !tuiCopyRect{sbox.tuiRect,*tui\ibox}
    *tui\ibox\right - xs
    *tui\cbox\right = *tui\ibox\right
    sbox\left  = *tui\cbox\right +1
    _ntui_Layout{*tuiListView\vScroller,*rp,sbox}
  End If

  If *tuiListView\hScroller
    ys.l = *tuiListView\hScroller\obj\minsize\y
    !tuiCopyRect{sbox.tuiRect,*tui\ibox}
    *tui\ibox\bottom - ys
    *tui\cbox\bottom = *tui\ibox\bottom
    sbox\top  = *tui\cbox\bottom +1
    _ntui_Layout{*tuiListView\hScroller,*rp,sbox}
  End If

  If *tuiListView\title\label
    *tuiListView\visibleRows  = (!tuiRectHeight{*tuiListView\obj\cbox}-2) / *tuiListView\rowHeight -1
  Else
    *tuiListView\visibleRows  = (!tuiRectHeight{*tuiListView\obj\cbox}) / *tuiListView\rowHeight
  End If
  *tuiListView\visibleWidth =  !tuiRectWidth{*tuiListView\obj\cbox}
  If *tuiListView\vScroller Then _ntui_UpdateScroller{*tuiListView\vScroller,*tuiListView\topRow,*tuiListView\visibleRows,*tuiListView\totalRows,1,False}
  If *tuiListView\hScroller Then _ntui_UpdateScroller{*tuiListView\hScroller,*tuiListView\offset,*tuiListView\visibleWidth,*tuiListView\totalWidth,1,False}
End Statement


_ntui_DispatchListViewEvent:
Function.w _ntui_DispatchListViewEvent{*tuiListView.tuiListView,*tuiEvent.tuiEvent}
!_ASSERT{*tuiListView}
!_ASSERT{*tuiListView\obj\classID=#TUICLASS_LISTVIEW}
!_ASSERT{*rp}
*tuiEngine.tuiEngine = *tuiListView\obj\tuiEngine
!_ASSERT{*tuiEngine}

  done.l = False
  Select *tuiEvent\evID
    Case #TUIEV_MOUSEDOWN
      If *tuiEvent\value = 0 ; we want ListView 0
        If ntui_HitObject{*tuiListView,*tuiEvent\pos\x,*tuiEvent\pos\y}
          ntui_SetFocus{*tuiListView}
          done      = True
          *tuiListView\obj\flags | #TUIF_ACTIVE
          ;If (*tuiListView\obj\flags&#TUIF_IMMIDIATE) Then *tuiEvent\notify = *tuiListView\obj\notify
          ntui_Refresh{*tuiListView,#NULL}

          ccol.l = _ntui_GetListViewColumnFromXPos{*tuiListView,*tuiEvent\pos\x}
          crow.l = _ntui_GetListViewRowFromYPos{*tuiListView,*tuiEvent\pos\y}

          If crow=-1 ; we hit the title

          Else

          End If

        End If
      End If

    Case #TUIEV_MOUSEUP
      If *tuiEvent\value = 0 ; we want ListView 0
        If *tuiListView\obj\flags&#TUIF_ACTIVE
          If ntui_HitObject{*tuiListView,*tuiEvent\pos\x,*tuiEvent\pos\y}
            done    = True
            If *tuiListView\obj\flags &#TUIF_TOGGLE
              *tuiListView\obj\value = 1-*tuiListView\obj\value
              ;*tuiListView\state = *tuiListView\obj\value
            Else
              ;*tuiListView\state = 0 ; pressed
            End If

            ;If (*tuiListView\obj\flags&#TUIF_IMMIDIATE)=0
            ;  *tuiEvent\notify = *tuiListView\obj\notify
            ;  doFunc = True
            ;End If
          Else
            ; nothing happens
          End If
          *tuiListView\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
          ntui_Refresh{*tuiListView,#NULL}
        End If
      End If

    Case #TUIEV_MOUSEMOVE
      If *tuiListView\obj\flags&#TUIF_ACTIVE
        ;oldstate.l = *tuiListView\state
        If ntui_HitObject{*tuiListView,*tuiEvent\pos\x,*tuiEvent\pos\y}
          ;*tuiListView\state = 1
          If *tuiListView\obj\flags &#TUIF_TOGGLE
           ; *tuiListView\state = 1-*tuiListView\obj\value
          Else
           ; *tuiListView\state = 1 ; pressed
          End If
        Else
          If *tuiListView\obj\flags &#TUIF_TOGGLE
           ; *tuiListView\state = *tuiListView\obj\value
          Else
           ; *tuiListView\state = 0 ; pressed
          End If
        End If
        ;If oldstate><*tuiListView\state
          ntui_Refresh{*tuiListView,#NULL}
        ;End If
        done=True
      End If
   End Select

Function Return done
End Function

;Function.w _ntui_DispatchListViewEvent_old{*tuiListView.tuiListView,*tuiEvent.tuiEvent}
;click.l = False : release.l = False  : press.l = False : done.w = False
;maus.l = False
;newvalue.l = *tuiListView\obj\value
;
;Select *tuiEvent\msg\Class
;  Case #IDCMP_MOUSEBUTTONS
;    click=!tuiev_MouseClick : release=!tuiev_MouseRelease : press = !ntui_MouseButtonStatus{1} : done = True
;    maus.l = True
;  Case #IDCMP_MOUSEMOVE
;    click=False                        : release=False                          : press = !ntui_MouseButtonStatus{1}  : done=True
;    maus.l=True
;  Case #IDCMP_RAWKEY
;    If !tuiev_KeyDown
;      Select !tuiev_RawKey
;        Case #RAWKEY_LEFT
;        Case #RAWKEY_RIGHT
;        Case #RAWKEY_UP
;          newvalue = *tuiListView\obj\value-1
;          If newvalue<0 Then newvalue=0
;          If newvalue>=*tuiListView\totalRows Then newvalue=*tuiListView\totalRows-1
;          done=True
;          If !tuiev_Shift=False
;            *tuiListViewItem.tuiListViewItem = *tuiListView\listP
;            For n.l=0 To *tuiListView\totalRows-1
;              *tuiListViewItem\addFlags|(#TUIF_ACTIVE)-(#TUIF_ACTIVE)
;              *tuiListViewItem + SizeOf.tuiListViewItem
;            Next
;          End If
;
;        Case #RAWKEY_DOWN
;          newvalue = *tuiListView\obj\value+1
;          If newvalue<0 Then newvalue=0
;          If newvalue>=*tuiListView\totalRows Then newvalue=*tuiListView\totalRows-1
;          done=True
;          If !tuiev_Shift=False
;            *tuiListViewItem.tuiListViewItem = *tuiListView\listP
;            For n.l=0 To *tuiListView\totalRows-1
;              *tuiListViewItem\addFlags|(#TUIF_ACTIVE)-(#TUIF_ACTIVE)
;              *tuiListViewItem + SizeOf.tuiListViewItem
;            Next
;          End If
;;
;      End Select
;      Select !tuiev_VanillaKey
;        Case 13
;          row.l = *tuiListView\obj\value
;          If row>=0 AND row<*tuiListView\totalRows
;            *tuiListViewItem.tuiListViewItem = !ntui_GetListViewItem{row}
;            If *tuiListViewItem
;               *tuiListViewItem\addFlags|#TUIF_ACTIVE
;               newvalue = row
;               ntui_Refresh{*tuiListView}
;               *tuiEvent\notify = *tuiListView\obj\notify
;            End If
;          End If
;      End Select
;    EndIf
;
;  Default
;    Function Return False
;End Select
;
;If maus
;  pointerID.l = #TUIPOINTER_DEFAULT
;  If click   Then _ntui_SetActive{*tuiListView\obj\tuiWindow,*tuiListView}
;  If release Then _ntui_SetActive{*tuiListView\obj\tuiWindow,#NULL}
;
;  ;If click Then error{"Click!"}
;  If cy<0 OR *tuiListView\colPressN>=0
;    ;error {"Click: head, col:"+Str$(ccol)}
;    If click
;      If *clickCol Then *clickCol\addFlags|#TUIF_ACTIVE
;      *tuiListView\colPressN    = ccol
;      *tuiListView\colPressItem = *clickCol
;    End If
;    ccol      = *tuiListView\colPressN
;    *clickCol = *tuiListView\colPressItem
;    If release
;      If *clickCol Then *clickCol\addFlags|#TUIF_ACTIVE - #TUIF_ACTIVE
;      ntui_SetListViewSorting{*tuiListView,ccol}
;      *tuiListView\colPressN    = -1
;      *tuiListView\colPressItem = #NULL
;    End If
;    ntui_Refresh{*tuiListView}
;  Else
;    row.l = cy/*tuiListView\rowHeight + *tuiListView\topRow
;    If *tuiListView\multiSelect
;      If release=False
;        If (click><False AND !tuiev_Alt=False  AND !tuiev_Shift=False) ;OR (*tuiListView\multiSelect=False and)
;          *tuiListViewItem.tuiListViewItem = *tuiListView\listP
;          For n.l=0 To *tuiListView\totalRows-1
;            *tuiListViewItem\addFlags|(#TUIF_ACTIVE)-(#TUIF_ACTIVE)
;            *tuiListViewItem + SizeOf.tuiListViewItem
;          Next
;        End If
;      End If
;    End If
;
;    If click
;      If (*tuiListView\obj\flags&#TUIF_IMMIDIATE) OR (!tuiev_DoubleClick><False)
;        *tuiEvent\notify = *tuiListView\obj\notify
;      End If
;    End If
;
;    If row>=0 AND row<*tuiListView\totalRows
;      *tuiListViewItem.tuiListViewItem = !ntui_GetListViewItem{row}
;      If *tuiListViewItem
;        If press
;          *tuiListViewItem\addFlags|#TUIF_ACTIVE
;          newvalue = row
;        End If
;      End If
;    Else
;  ;    error {"Click: row:"+Str$(row)}
;      If click Then newvalue=-1
;    End If
;  End If
;  ntui_SetPointer{*tuiListView,pointerID}
;End If ; maus
;done=True
;If newvalue><*tuiListView\obj\value
;
;  If *tuiListView\multiSelect=False
;    If *tuiListView\obj\value>=0 AND *tuiListView\obj\value<*tuiListView\totalRows
;      *tuiListViewItem = *tuiListView\listP + (*tuiListView\obj\value * SizeOf.tuiListViewItem)
;      *tuiListViewItem\addFlags|#TUIF_ACTIVE - #TUIF_ACTIVE
;    End If
;  End If
;  *tuiListView\obj\value=newvalue
;  If *tuiListView\obj\value>=0 AND *tuiListView\obj\value<*tuiListView\totalRows
;    *tuiListViewItem = *tuiListView\listP + (*tuiListView\obj\value * SizeOf.tuiListViewItem)
;    *tuiListViewItem\addFlags|#TUIF_ACTIVE
;  End If
;  ntui_Refresh{*tuiListView}
;End If
;Function Return done
;End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawListView {*tuiListView.tuiListView,*rp.RastPort}           /
;/                                                                             /
;/ Description:                                                                /
;/   ;If click Then error{"Click!"}                                            /
;/     ;error {"Click: head, col:"+Str$(ccol)}                                 /
;/   ;    error {"Click: row:"+Str$(row)}                                      /
;/ * draw the ListView in all its beauty */                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiListView.tuiListView    : ???                                         /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawListView:
Statement _ntui_DrawListView{*tuiListView.tuiListView,*rp.RastPort,*rpclip.tuiRect}
!_ASSERT{*tuiListView}
!_ASSERT{*tuiListView\obj\classID=#TUICLASS_LISTVIEW}
!_ASSERT{*rp}
*tuiEngine.tuiEngine = *tuiListView\obj\tuiEngine
!_ASSERT{*tuiEngine}

  !tuiAndRect{bclip.tuiRect,*tuiListView\obj\bbox,*rpclip}
  If !tuiValidRect{bclip}=False Then Statement Return

  If (*tuiListView\obj\borderType><#TUIBORDER_NONE)
    bgDone.l = ntui_DrawBorder{*tuiEngine,*rp,*tuiListView\obj\bbox,*tuiListView\obj\borderType,*tuiListView\obj\flags}
  Else
    bgDone = False
  End If

    If *tuiListView\hScroller
      If (*tuiListView\hScroller\obj\flags&#TUIF_ONSCREEN) Then _ntui_Draw{*tuiListView\hScroller,*rp,*rpclip}
    End If
    If *tuiListView\vScroller
      If (*tuiListView\vScroller\obj\flags&#TUIF_ONSCREEN) Then _ntui_Draw{*tuiListView\vScroller,*rp,*rpclip}
    End If


  !tuiAndRect{iclip.tuiRect,*rpclip,*tuiListView\obj\ibox}
  If !tuiValidRect{iclip}=False Then Statement Return

  !tuiAndRect{cclip.tuiRect,*rpclip,*tuiListView\obj\cbox}
  If !tuiValidRect{cclip}=False Then Statement Return


redrawTuiListView:
rd.l = False
x1.l = *tuiListView\obj\cbox\left
x2.l = *tuiListView\obj\cbox\right
y1.l = *tuiListView\obj\cbox\top
y2.l = *tuiListView\obj\cbox\bottom

SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW] ; seperating line to hslider
Move_ *rp,x2+1,y1 : Draw_ *rp,x2+1,y2


ntui_SetClip{*rp,*tuiListView\obj\cbox}
cx1.l = *tuiListView\obj\cbox\left - *tuiListView\offset
cy1.l = *tuiListView\obj\cbox\top

If *tuiListView\title\label
  *tuiColItem.tuiColItem = *tuiListView\title\label

  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
  Move_ *rp,x1,y1+*tuiListView\titleHeight-2 : Draw_ *rp,x2,y1+*tuiListView\titleHeight-2
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
  Move_ *rp,x1,y1+*tuiListView\titleHeight-1 : Draw_ *rp,x2,y1+*tuiListView\titleHeight-1

  For col.l=0 To *tuiListView\title\colN-1
    flags.l = (*tuiColItem\addFlags|((*tuiListView\obj\flags|#TUIF_ACTIVE)-#TUIF_ACTIVE) |*tuiListView\title\addFlags)
    If (flags&#TUIF_ACTIVE)
      fgpen.l = #TUIPEN_ACTIVETEXT
      bgpen.l = #TUIPEN_MARKER
    Else
      fgpen.l = #TUIPEN_TEXT
      bgpen.l = #TUIPEN_HALFSHADOW
    End If

    If *tuiColItem\pixWidth<=0
      If *tuiColItem\textSize>0
        _ntui_GetTextRect{*tuiEngine,&*tuiColItem\textSize,tx.tuiRect,flags,*rp}      ; this is correct!
        *tuiColItem\pixWidth=!tuiRectWidth{tx} + !tuiBorderWidth{*tuiListView\obj\padding}
      Else
        *tuiColItem\pixWidth = 0
      End If
       If *tuiColItem\img Then *tuiColItem\pixWidth + ntui_GetTBImageWidth{*tuiColItem\img}
     ;    If *tuiColItem\pixWidth>*tuiListView\title\pixWidth Then *tuiListView\title\pixWidth = *tuiColItem\pixWidth : ntui_Refresh{*tuiListView}
    End If

    If *tuiListView\title\colN =1 Then *tuiColItem\pixWidth=!tuiRectWidth{*tuiListView\obj\cbox}
    cx2.l = cx1+*tuiColItem\pixWidth-1
    cy2.l = cy1+*tuiListView\titleHeight-1-2
 ;   If col=*tuiListView\title\colN-1 Then cx2=*tuiListView\obj\pos\x-*tuiListView\offset+*tuiListView\innerSize\x-1
    ncx2.l = cx2

    If *tuiColItem\img
      icx2.l=cx1+ntui_GetTBImageWidth{ *tuiColItem\img}-1
      ibox.tuiRect\left = cx1,cy1,icx2,cy2
      ntui_DrawTBImage{*tuiColItem\img,*rp,ibox,ibox,0,bgpen}
      cx1=icx2+1
    End If

    If *tuiListView\secondSortCol=col
      If *tuiListView\secondSortDir=0
        *img.tuiTBImage = *tuiListView\secondSortImgUp
      Else
        *img.tuiTBImage = *tuiListView\secondSortImgDown
      End If
      icx1.l=cx2-ntui_GetTBImageWidth{ *img}
      ibox.tuiRect\left = icx1,cy1,cx2,cy2
      ntui_DrawTBImage{*img,*rp,ibox,ibox,0,bgpen}
      cx2=icx1-1
    End If

    If *tuiListView\primeSortCol=col
      If *tuiListView\primeSortDir=0
        *img.tuiTBImage = *tuiListView\primeSortImgUp
      Else
        *img.tuiTBImage = *tuiListView\primeSortImgDown
      End If
      icx1=cx2-ntui_GetTBImageWidth{ *img}
      ibox.tuiRect\left = icx1,cy1,cx2,cy2
      ntui_DrawTBImage{*img,*rp,ibox,ibox,0,bgpen}
      cx2=icx1-1
    End If

    ibox.tuiRect\left = cx1,cy1,cx2,cy2
    _ntui_Print{*tuiEngine,&*tuiColItem\textSize,ibox,ibox,flags,*rp,fgpen,bgpen}

    If (flags&#TUIF_UNDERLINED)=0 AND col<*tuiListView\title\colN-1
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
      Move_ *rp,ncx2+1,cy1 : Draw_ *rp,ncx2+1,cy2
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
      Move_ *rp,ncx2+2,cy1 : Draw_ *rp,ncx2+2,cy2+1
      cx1=ncx2+3
    Else
      cx1=ncx2+1
    End If
    nextP.l = *tuiColItem + SizeOf.tuiColItem + *tuiColItem\textSize +1
    If nextP&1 Then nextP+1   ; 16bit align pointer
    *tuiColItem = nextP
  Next

  If cx1<x2
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
    RectFill_ *rp,cx1,cy1,x2,cy2
  End If
  cy1 = cy2+3
End If

startRow.l = *tuiListView\topRow
endRow.l   = *tuiListView\visibleRows + startRow
If endRow>=*tuiListView\totalRows Then endRow=*tuiListView\totalRows-1
;error{"Draw: "+Str$(startRow)+" to "+Str$(endRow)}
For row.l = startRow To endRow
  *tuiTitelItem.tuiColItem = *tuiListView\title\label
  *tuiListViewItem.tuiListViewItem = *tuiListView\listP + (SizeOf.tuiListViewItem*row)
  *tuiColItem.tuiColItem   = *tuiListViewItem\label
  cx1.l = *tuiListView\obj\cbox\left - *tuiListView\offset
  If *tuiTitelItem
    colN.l =  *tuiListView\title\colN
    If *tuiListViewItem\colN<colN Then colN = *tuiListViewItem\colN
  Else
    colN=1
  End If
  For col.l=0 To colN-1
    If *tuiTitelItem
      flags.l = (*tuiColItem\addFlags|((*tuiListView\obj\flags|*tuiTitelItem\addFlags|#TUIF_ACTIVE)-#TUIF_ACTIVE)|*tuiListViewItem\addFlags)
    Else
      flags.l = (*tuiColItem\addFlags|((*tuiListView\obj\flags|#TUIF_ACTIVE)-#TUIF_ACTIVE)|*tuiListViewItem\addFlags)
    End If
    If (flags&#TUIF_ACTIVE)
      fgpen.l = #TUIPEN_ACTIVETEXT
      bgpen.l = #TUIPEN_HALFMARKER
    Else
      If (flags&#TUIF_HIGHLIGHT) Then fgpen.l = #TUIPEN_ACTIVETEXT : Else fgpen.l = #TUIPEN_TEXT
      bgpen.l = #TUIPEN_HALFHALFSHINE
    End If
    If row=*tuiListView\obj\value Then If (flags&#TUIF_ACTIVE) Then bgpen.l = #TUIPEN_MARKER : Else bgpen=#TUIPEN_HALFSHADOW
    If *tuiColItem\pixWidth<=0
      If *tuiColItem\textSize>0
        _ntui_GetTextRect{*tuiEngine,&*tuiColItem\textSize,tx.tuiRect,flags,*rp}
        *tuiColItem\pixWidth=!tuiRectWidth{tx} + !tuiBorderWidth{*tuiListView\obj\padding}
      Else
        *tuiColItem\pixWidth
      End If
       If *tuiColItem\img Then *tuiColItem\pixWidth + ntui_GetTBImageWidth{*tuiColItem\img}
       If *tuiTitelItem
         If *tuiColItem\pixWidth>*tuiTitelItem\pixWidth Then *tuiTitelItem\pixWidth = *tuiColItem\pixWidth : rd=True
       End If
    End If
    If *tuiTitelItem><#NULL AND colN>1
      cx2.l = cx1+*tuiTitelItem\pixWidth-1
      ;If col=*tuiListView\title\colN Then cx2=x2
    Else
      cx2 = x2
    End If

    cy2.l = cy1+*tuiListView\rowHeight-1
    If *tuiColItem\img
      icx2.l=cx1+ntui_GetTBImageWidth{ *tuiColItem\img}-1
      ibox.tuiRect\left = cx1,cy1,icx2,cy2
      ntui_DrawTBImage{*tuiColItem\img,*rp,ibox,ibox,0,bgpen}
      cx1=icx2+1
    End If

    ibox.tuiRect\left = cx1,cy1,cx2,cy2
    _ntui_Print{*tuiEngine,&*tuiColItem\textSize,ibox,ibox,flags,*rp,fgpen,bgpen}

    If (flags&#TUIF_UNDERLINED)=0 AND col<colN-1
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
      Move_ *rp,cx2+1,cy1 : Draw_ *rp,cx2+1,cy2
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
      Move_ *rp,cx2+2,cy1 : Draw_ *rp,cx2+2,cy2
      cx1=cx2+3
    Else
      cx1=cx2+1
    End If

    nextP.l = *tuiColItem   + SizeOf.tuiColItem + *tuiColItem\textSize +1
    If nextP&1 Then nextP+1 ; 16bit aligned pointer
    *tuiColItem = nextP

    If *tuiTitelItem
      nextP.l = *tuiTitelItem + SizeOf.tuiColItem + *tuiTitelItem\textSize +1
      If nextP&1 Then nextP+1
      *tuiTitelItem = nextP
    End If

  Next
  If cx1<x2
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFHALFSHINE]
    RectFill_ *rp,cx1,cy1,x2,cy2
  End If
  cy1 = cy2+1
Next

If cy1<y2                                              ; clear unused bottom area
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFHALFSHINE]
  RectFill_ *rp,x1,cy1,x2,y2
End If
ntui_RemClip{*rp}
If rd Then Goto redrawTuiListView   ; redraw, in case layout changed
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetListViewMinSize {*tuiListView.tuiListView,*rp:: /
;/ .RastPort}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/   ; parse the title...                                                      /
;/   ;*tuiListView\HScroller    = ntui_HScroller{*tuiListView\offset,*tuiLis:: /
;/ tView\totalWidth,*tuiListView\visibleWidth}                                 /
;/ * calculate the minimum size for the ListView */                              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiListView.tuiListView    : ???                                         /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_CalculateListViewMinSize:
Function.l _ntui_CalculateListViewMinSize{*tuiListView.tuiListView,*rp.RastPort}
!_ASSERT{*tuiListView}
!_ASSERT{*tuiListView\obj\classID=#TUICLASS_LISTVIEW}
!_ASSERT{*rp}
*tuiEngine.tuiEngine = *tuiListView\obj\tuiEngine
!_ASSERT{*tuiEngine}

*tuiListView\rowHeight   = *tuiEngine\defSize[#TUISIZE_INLINE]
If *tuiListView\title\label
  *tuiListView\titleHeight = *tuiEngine\defSize[#TUISIZE_INLINE] + 2
Else
  *tuiListView\titleHeight = 0
End If
*tuiListView\obj\minsize\x = *tuiListView\rowHeight,*tuiListView\rowHeight
*tuiListView\obj\minsize\y + *tuiListView\titleHeight

If *tuiListView\vScroller Then *size.tuiPixel = _ntui_CalculateScrollerMinSize{*tuiListView\vScroller,*rp} : *tuiListView\obj\minsize\x + *size\x
If *tuiListView\hScroller Then *size.tuiPixel = _ntui_CalculateScrollerMinSize{*tuiListView\hScroller,*rp} : *tuiListView\obj\minsize\y + *size\y

_ntui_GetBorderSize{*tuiEngine,*tuiListView\obj\borderType,*tuiListView\obj\flags,*tuiListView\obj\border}

*tuiListView\obj\minsize\x + !tuiBorderWidth {*tuiListView\obj\border} + !tuiBorderWidth {*tuiListView\obj\padding}
*tuiListView\obj\minsize\y + !tuiBorderHeight{*tuiListView\obj\border} + !tuiBorderHeight{*tuiListView\obj\padding}

Function Return *tuiListView\obj\minsize
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeListView {*tuiListView.tuiListView}                       /
;/                                                                             /
;/ Description:                                                                /
;/ *tuiListView\rowHeight = *tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize+1;+*tu:: /
;/ iEngine\defPad\y*2                                                          /
;/ * free everything special that we allocated for the ListView */               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiListView.tuiListView    : ???                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitListView:
Statement _ntui_DeinitListView{*tuiListView.tuiListView}

!_ASSERT{*tuiListView}
!_ASSERT{*tuiListView\obj\classID=#TUICLASS_LISTVIEW}

ntui_ClearListView{*tuiListView}
If *tuiListView\primeSortImgUp    Then ntui_FreeTBImage{*tuiListView\primeSortImgUp}
If *tuiListView\primeSortImgDown  Then ntui_FreeTBImage{*tuiListView\primeSortImgDown}
If *tuiListView\secondSortImgUp   Then ntui_FreeTBImage{*tuiListView\secondSortImgUp}
If *tuiListView\secondSortImgDown Then ntui_FreeTBImage{*tuiListView\secondSortImgDown}

End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_ListView {title.s,@multiSelect.l,@notify.l,@help.:: /
;/ s,@flags.l,@userID.l}                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Create function for tui ListView.                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - title.s        : title text                                                          /
;/ - multiSelect.l  : allow multiselect                                                    /
;/ - notify.l       : notify value                                                         /
;/ - help.s         : help text                                                           /
;/ - flags.l        : TUIF_... flags                                                         /
;/ - userID.l       : user ID                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l       : pointer to ListView or NULL if failed                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_ListView{title.s,@multiSelect.w,@onClick.s,@help.s,@flags.l,@nameID.s}
If (flags=#TUI_NOFLAGS) Then flags=0
flags|#TUIF_WANTTAB|#TUIF_WANTMOVER
*tuiListView.tuiListView = _ntui_CreateObject{#TUICLASS_LISTVIEW,SizeOf.tuiListView,help,flags,nameID}
If *tuiListView
  *tuiListView\obj\borderType = #TUIBORDER_RECESSED
  *tuiListView\totalRows      = 0
  *tuiListView\totalWidth     = 0
  *tuiListView\visibleRows    = 0
  *tuiListView\visibleWidth   = 0
  *tuiListView\topRow         = 0
  *tuiListView\offset         = 0
  *tuiListView\listP          = #NULL
  *tuiListView\allocN         = 0
  *tuiListView\incN           = 64
  *tuiListView\title\addFlags = 0
  *tuiListView\title\hidden   = #NULL
  *tuiListView\title\label    = #NULL
  *tuiListView\title\itemID   = -1
  *tuiListView\title\colN     = 0
  *tuiListView\hScroller      = #NULL
  *tuiListView\vScroller      = #NULL
  *tuiListView\colPressN      = -1
  *tuiListView\colPressItem   = #NULL
  *tuiListView\multiSelect    = multiSelect
  *tuiListView\seekPos        = -1

  ; parse the title...
  If title Then _ntui_ParseListViewLabel{*tuiListView,*tuiListView\title,title}

  _ntui_BeginChildren{*tuiListView}

  *tuiListView\vScroller    = ntui_VScroller{*tuiListView\topRow,*tuiListView\totalRows,*tuiListView\visibleRows}
  If *tuiListView\vScroller
    ntui_AddArrows{#NULL}
    *tuiListView\vScroller\obj\borderType=#TUIBORDER_NONE
  End If

  *tuiListView\hScroller    = ntui_HScroller{*tuiListView\offset,*tuiListView\totalWidth,*tuiListView\visibleWidth}
  If *tuiListView\hScroller
    ntui_AddArrows{#NULL}
    *tuiListView\hScroller\obj\borderType=#TUIBORDER_NONE
  End If

  _ntui_EndChildren{#TUICLASS_LISTVIEW}

  If (*tuiListView\vScroller) Then ntui_Bind{*tuiListView,*tuiListView\vScroller}
  If (*tuiListView\hScroller) Then ntui_Bind{*tuiListView,*tuiListView\hScroller}

  *tuiListView\primeSortImgUp    = ntui_CreateTBImage{*tuiListView\obj\tuiEngine,"ARROWUP"    ,#TUISIZE_HALFINLINE,#TUISIZE_HALFINLINE}
  *tuiListView\primeSortImgDown  = ntui_CreateTBImage{*tuiListView\obj\tuiEngine,"ARROWDOWN"  ,#TUISIZE_HALFINLINE,#TUISIZE_HALFINLINE}
  *tuiListView\secondSortImgUp   = ntui_CreateTBImage{*tuiListView\obj\tuiEngine,"OLARROWUP"  ,#TUISIZE_HALFINLINE,#TUISIZE_HALFINLINE}
  *tuiListView\secondSortImgDown = ntui_CreateTBImage{*tuiListView\obj\tuiEngine,"OLARROWDOWN",#TUISIZE_HALFINLINE,#TUISIZE_HALFINLINE}
  *tuiListView\secondSortCol     = -1
  *tuiListView\primeSortCol      = -1
  *tuiListView\secondSortDir     = 0
  *tuiListView\primeSortDir      = 0

  !_GetFuncPointer{*tuiListView\obj\Draw            ,_ntui_DrawListView,{0,0,0}}
  !_GetFuncPointer{*tuiListView\obj\Layout          ,_ntui_LayoutListView,{0,0,0}}
  !_GetFuncPointer{*tuiListView\obj\DispatchEvent   ,_ntui_DispatchListViewEvent,{0,0}}
  !_GetFuncPointer{*tuiListView\obj\CalculateMinSize,_ntui_CalculateListViewMinSize,{0,0}}
  !_GetFuncPointer{*tuiListView\obj\Deinit          ,_ntui_DeinitListView,{0}}
  !_GetFuncPointer{*tuiListView\obj\SetAttr         ,_ntui_SetListViewAttr,{0,0,0}}
  !_GetFuncPointer{*tuiListView\obj\GetAttr         ,_ntui_GetListViewAttr,{0,0,0}}

End If
Function Return *tuiListView
End Function




