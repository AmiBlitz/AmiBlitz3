; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 3
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 391
; CursorColumn    = 33
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_ScrollView.include                                                     /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#TUI_HAS_SCROLLVIEW = 1

CNIF #__include=0
optimize 7
Syntax 2
CEND

#TUISVMODE_AUTO   = 0
#TUISVMODE_ALWAYS = 1
#TUISVMODE_NEVER  = 2

#TUISVA_BASE        = #TUIA_USER
#TUISVA_SCROLLMODE  = #TUISVA_BASE + 0
#TUISVA_VOFFSET     = #TUISVA_BASE + 1
#TUISVA_VVISIBLE    = #TUISVA_BASE + 2 ; visible logic units
#TUISVA_VTOTAL      = #TUISVA_BASE + 3 ; total logic units
#TUISVA_VSTEP       = #TUISVA_BASE + 4 ; units to scroll
#TUISVA_HOFFSET     = #TUISVA_BASE + 5
#TUISVA_HVISIBLE    = #TUISVA_BASE + 6 ; visible logic units
#TUISVA_HTOTAL      = #TUISVA_BASE + 7 ; total logic units
#TUISVA_HSTEP       = #TUISVA_BASE + 8 ; units to scroll

NEWTYPE.tuiScrollView
obj.tuiObject            ; tui object header
total.tuiPixel
visible.tuiPixel
offset.tuiPixel
lastOffset.tuiPixel
step_.tuiPixel
*hScroller.tuiScroller
*vScroller.tuiScroller
*content.tuiObject
scrollMode.l             ; one of #TUISVMODE_...
End NEWTYPE



Statement _ntui_ScrollOffset{*tui.tuiObject,dx.l,dy.l}
  !_ASSERT{*tui}

  If (*tui\flags&#TUIF_ONSCREEN=0) Then Statement Return

  *tui\bbox\left   - dx
  *tui\bbox\top    - dy
  *tui\bbox\right  - dx
  *tui\bbox\bottom - dy

  *tui\cbox\left   - dx
  *tui\cbox\top    - dy
  *tui\cbox\right  - dx
  *tui\cbox\bottom - dy

  *tui\ibox\left   - dx
  *tui\ibox\top    - dy
  *tui\ibox\right  - dx
  *tui\ibox\bottom - dy

  *tui = *tui\child
  While (*tui><#NULL)
    If (*tui\flags&#TUIF_ONSCREEN) Then _ntui_ScrollOffset{*tui,dx,dy}
    *tui = *tui\next_
  Wend

End Statement

Statement _ntui_UpdateScrollView{*tuiScrollView.tuiScrollView,hoffset.l,hvisible.l,htotal.l,voffset.l,vvisible.l,vtotal.l}
If hoffset+hvisible>htotal Then hoffset=htotal-hvisible
If voffset+vvisible>vtotal Then voffset=vtotal-vvisible
If hoffset<0 Then hoffset=0
If voffset<0 Then voffset=0

*tuiScrollView\total\x   = htotal,vtotal
*tuiScrollView\visible\x = hvisible,vvisible

If *tuiScrollView\offset\x><hoffset
  _ntui_ScrollOffset{*tuiScrollView\content,hoffset-*tuiScrollView\offset\x,0}
  *tuiScrollView\offset\x  = hoffset
  ntui_Refresh{*tuiScrollView}
End If

If *tuiScrollView\offset\y><voffset
  _ntui_ScrollOffset{*tuiScrollView\content,0,voffset-*tuiScrollView\offset\y}
  *tuiScrollView\offset\y  = voffset
  ntui_Refresh{*tuiScrollView}
End If


End Statement

_ntui_LayoutScrollView:
Statement _ntui_LayoutScrollView{*tuiScrollView.tuiScrollView,*rp.RastPort,*bbox.tuiRect}
  !_ASSERT{*tuiScrollView}
  !_ASSERT{*tuiScrollView\obj\classID=#TUICLASS_SCROLLVIEW}

  *tui.tuiObject = *tuiScrollView
  *tuiEngine.tuiEngine = *tuiScrollView\obj\tuiEngine
  !_ASSERT{*tuiEngine}
  !_ASSERT{*rp}

  If *bbox
    !tuiCopyRect{*tui\bbox,*bbox}
  End If
  _ntui_GetBorderSize{*tui\tuiEngine,*tui\borderType,*tui\flags,*tui\border}
  !tuiRemBorder{*tui\ibox,*tui\bbox,*tui\border}
  !tuiRemBorder{*tui\cbox,*tui\ibox,*tui\padding}

  ; calculate total
  If *tuiScrollView\content
    cbox.tuiRect\left = 0,0,*tuiScrollView\content\minsize\x,*tuiScrollView\content\minsize\y
    cbox.tuiRect\left   + *tui\bbox\left   - *tuiScrollView\offset\x
    cbox.tuiRect\top    + *tui\bbox\top    - *tuiScrollView\offset\y
    cbox.tuiRect\right  + *tui\bbox\left   - *tuiScrollView\offset\x
    cbox.tuiRect\bottom + *tui\bbox\top    - *tuiScrollView\offset\y

    _ntui_Layout{*tuiScrollView\content,*rp,cbox}
    *tuiScrollView\total\x = !tuiRectWidth{*tuiScrollView\content\bbox}
    *tuiScrollView\total\y = !tuiRectHeight{*tuiScrollView\content\bbox}
  Else
    *tuiScrollView\total\x = !tuiRectWidth{*tuiScrollView\obj\bbox}
    *tuiScrollView\total\y = !tuiRectHeight{*tuiScrollView\obj\bbox}
  End If

  ; layout scrollers
  If *tuiScrollView\vScroller
    If !tuiRectHeight{*tui\cbox}<*tuiScrollView\total\y
      xs.l = *tuiScrollView\vScroller\obj\minsize\x
      !tuiCopyRect{sbox.tuiRect,*tui\ibox}
      *tui\ibox\right - xs
      *tui\cbox\right = *tui\ibox\right
      sbox\left  = *tui\cbox\right +1
      _ntui_Layout{*tuiScrollView\vScroller,*rp,sbox}
    Else
      *tuiScrollView\vScroller\obj\flags|#TUIF_ONSCREEN - #TUIF_ONSCREEN
    End If
  End If

  If *tuiScrollView\hScroller
    If !tuiRectWidth{*tui\cbox}<*tuiScrollView\total\x
      ys.l = *tuiScrollView\hScroller\obj\minsize\y
      !tuiCopyRect{sbox.tuiRect,*tui\ibox}
      *tui\ibox\bottom - ys
      *tui\cbox\bottom = *tui\ibox\bottom
      sbox\top  = *tui\cbox\bottom +1
      _ntui_Layout{*tuiScrollView\hScroller,*rp,sbox}
    Else
      *tuiScrollView\hScroller\obj\flags|#TUIF_ONSCREEN - #TUIF_ONSCREEN
    End If
  End If

  If *tuiScrollView\vScroller
    If (*tuiScrollView\vScroller\obj\flags&#TUIF_ONSCREEN)=0
    If !tuiRectHeight{*tui\cbox}<*tuiScrollView\total\y
      xs.l = *tuiScrollView\vScroller\obj\minsize\x
      !tuiCopyRect{sbox.tuiRect,*tui\ibox}
      *tui\cbox\right = *tui\ibox\right - xs
      sbox\left  = *tui\cbox\right +1
      _ntui_Layout{*tuiScrollView\vScroller,*rp,sbox}
    Else
      *tuiScrollView\vScroller\obj\flags|#TUIF_ONSCREEN - #TUIF_ONSCREEN
    End If
    End If
  End If


  ; calculate visible
  *tuiScrollView\visible\x = !tuiRectWidth{*tui\cbox}
  *tuiScrollView\visible\y = !tuiRectHeight{*tui\cbox}

  If *tuiScrollView\vScroller Then _ntui_UpdateScroller{*tuiScrollView\vScroller,*tuiScrollView\offset\y,*tuiScrollView\visible\y,*tuiScrollView\total\y,*tuiScrollView\step_\y,False}
  If *tuiScrollView\hScroller Then _ntui_UpdateScroller{*tuiScrollView\hScroller,*tuiScrollView\offset\x,*tuiScrollView\visible\x,*tuiScrollView\total\x,*tuiScrollView\step_\x,False}

End Statement



_ntui_SetScrollViewAttr:
Function.w _ntui_SetScrollViewAttr{*tuiScrollView.tuiScrollView,ti_Tag.l,ti_Data.l}
!_ASSERT{*tuiScrollView}
!_ASSERT{*tuiScrollView\obj\classID=#TUICLASS_SCROLLVIEW}

done.w = True
Select ti_Tag
  Case #TUISVA_HOFFSET    : _ntui_UpdateScrollView{*tuiScrollView,ti_Data                ,*tuiScrollView\visible\x,*tuiScrollView\total\x,*tuiScrollView\offset\y,*tuiScrollView\visible\y,*tuiScrollView\total\y}
  Case #TUISVA_HVISIBLE   : _ntui_UpdateScrollView{*tuiScrollView,*tuiScrollView\offset\x,ti_Data                 ,*tuiScrollView\total\x,*tuiScrollView\offset\y,*tuiScrollView\visible\y,*tuiScrollView\total\y}
  Case #TUISVA_HTOTAL     : _ntui_UpdateScrollView{*tuiScrollView,*tuiScrollView\offset\x,*tuiScrollView\visible\x,ti_Data               ,*tuiScrollView\offset\y,*tuiScrollView\visible\y,*tuiScrollView\total\y}
  Case #TUISVA_HSTEP      : *tuiScrollView\step_\x = ti_Data
  Case #TUISVA_VOFFSET    : _ntui_UpdateScrollView{*tuiScrollView,*tuiScrollView\offset\x,*tuiScrollView\visible\x,*tuiScrollView\total\x,ti_Data                ,*tuiScrollView\visible\y,*tuiScrollView\total\y}
  Case #TUISVA_VVISIBLE   : _ntui_UpdateScrollView{*tuiScrollView,*tuiScrollView\offset\x,*tuiScrollView\visible\x,*tuiScrollView\total\x,*tuiScrollView\offset\y,ti_Data                 ,*tuiScrollView\total\y}
  Case #TUISVA_VTOTAL     : _ntui_UpdateScrollView{*tuiScrollView,*tuiScrollView\offset\x,*tuiScrollView\visible\x,*tuiScrollView\total\x,*tuiScrollView\offset\y,*tuiScrollView\visible\y,ti_Data               }
  Case #TUISVA_VSTEP      : *tuiScrollView\step_\y = ti_Data
  Case #TUISVA_SCROLLMODE : *tuiScrollView\scrollMode = ti_Data
  Default
    done=False

End Select
Function Return done
End Function


_ntui_GetScrollViewAttr:
Function.w _ntui_GetScrollViewAttr{*tuiScrollView.tuiScrollView,ti_Tag.l,*ti_Data.longP}
!_ASSERT{*tuiScrollView}
!_ASSERT{*tuiScrollView\obj\classID=#TUICLASS_SCROLLVIEW}

done.w = True
Select ti_Tag
  Case #TUISVA_HOFFSET    : *ti_Data\l = *tuiScrollView\offset\x
  Case #TUISVA_HVISIBLE   : *ti_Data\l = *tuiScrollView\visible\x
  Case #TUISVA_HTOTAL     : *ti_Data\l = *tuiScrollView\total\x
  Case #TUISVA_HSTEP      : *ti_Data\l = *tuiScrollView\step_\x
  Case #TUISVA_VOFFSET    : *ti_Data\l = *tuiScrollView\offset\y
  Case #TUISVA_VVISIBLE   : *ti_Data\l = *tuiScrollView\visible\y
  Case #TUISVA_VTOTAL     : *ti_Data\l = *tuiScrollView\total\y
  Case #TUISVA_VSTEP      : *ti_Data\l = *tuiScrollView\step_\y
  Case #TUISVA_SCROLLMODE : *ti_Data\l = *tuiScrollView\scrollMode
  Default
    done=False

End Select
Function Return done
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = _ntui_DispatchScrollView {*tuiScrollView.tuiScrollView,*tuiEvent.tuiEvent}   /
;/                                                                             /
;/ Description:                                                                /
;/ * tui ScrollView newtype */                                                       /
;/ obj.tuiObject            ; tui object header                                /
;/ * do what happens if the user operates the ScrollView */                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiScrollView.tuiScrollView    : ???                                                 /
;/ - *tuiEvent.tuiEvent    : ???                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DispatchScrollViewEvent:
Function.w _ntui_DispatchScrollViewEvent{*tuiScrollView.tuiScrollView,*tuiEvent.tuiEvent}
  !_ASSERT{*tuiScrollView}
  !_ASSERT{*tuiScrollView\obj\classID=#TUICLASS_SCROLLVIEW}

  *tuiEngine.tuiEngine = *tuiScrollView\obj\tuiEngine
  !_ASSERT{*tuiEngine}

  done.w = False

  Select *tuiEvent\evID
    Case #TUIEV_HSCROLL
      nv.l = *tuiScrollView\offset\x + *tuiScrollView\step_\x * *tuiEvent\value
      _ntui_UpdateScrollView{*tuiScrollView,nv,*tuiScrollView\visible\x,*tuiScrollView\total\x,*tuiScrollView\offset\y,*tuiScrollView\visible\y,*tuiScrollView\total\y}
      done = True

    Case #TUIEV_VSCROLL
      nv.l = *tuiScrollView\offset\y + *tuiScrollView\step_\y * *tuiEvent\value
      _ntui_UpdateScrollView{*tuiScrollView,*tuiScrollView\offset\x,*tuiScrollView\visible\x,*tuiScrollView\total\x,nv,*tuiScrollView\visible\y,*tuiScrollView\total\y}
      done = True

    Case #TUIEV_BIND_HDELTA
      nv.l = *tuiScrollView\offset\x + *tuiScrollView\step_\x * *tuiEvent\value
      _ntui_UpdateScrollView{*tuiScrollView,nv,*tuiScrollView\visible\x,*tuiScrollView\total\x,*tuiScrollView\offset\y,*tuiScrollView\visible\y,*tuiScrollView\total\y}
      done = True

    Case #TUIEV_BIND_VDELTA
      nv.l = *tuiScrollView\offset\y + *tuiScrollView\step_\y * *tuiEvent\value
      _ntui_UpdateScrollView{*tuiScrollView,*tuiScrollView\offset\x,*tuiScrollView\visible\x,*tuiScrollView\total\x,nv,*tuiScrollView\visible\y,*tuiScrollView\total\y}
      done = True

    Case #TUIEV_BIND_HVALUE
      nv.l = *tuiEvent\value
      _ntui_UpdateScrollView{*tuiScrollView,nv,*tuiScrollView\visible\x,*tuiScrollView\total\x,*tuiScrollView\offset\y,*tuiScrollView\visible\y,*tuiScrollView\total\y}
      done = True

    Case #TUIEV_BIND_VVALUE
      nv.l = *tuiEvent\value
      _ntui_UpdateScrollView{*tuiScrollView,*tuiScrollView\offset\x,*tuiScrollView\visible\x,*tuiScrollView\total\x,nv,*tuiScrollView\visible\y,*tuiScrollView\total\y}
      done = True

    Case #TUIEV_PROPAGATE
      _ntui_PropagateBind{*tuiScrollView,#TUIEV_BIND_VTOTAL  ,*tuiScrollView\total\y   ,#NULL}
      _ntui_PropagateBind{*tuiScrollView,#TUIEV_BIND_VVALUE  ,*tuiScrollView\offset\y  ,#NULL}
      _ntui_PropagateBind{*tuiScrollView,#TUIEV_BIND_VVISIBLE,*tuiScrollView\visible\y ,#NULL}
      _ntui_PropagateBind{*tuiScrollView,#TUIEV_BIND_VSTEP   ,*tuiScrollView\step_\y   ,#NULL}
      _ntui_PropagateBind{*tuiScrollView,#TUIEV_BIND_HTOTAL  ,*tuiScrollView\total\x   ,#NULL}
      _ntui_PropagateBind{*tuiScrollView,#TUIEV_BIND_HVALUE  ,*tuiScrollView\offset\x  ,#NULL}
      _ntui_PropagateBind{*tuiScrollView,#TUIEV_BIND_HVISIBLE,*tuiScrollView\visible\x ,#NULL}
      _ntui_PropagateBind{*tuiScrollView,#TUIEV_BIND_HSTEP   ,*tuiScrollView\step_\x   ,#NULL}
      done=True

  End Select

  If (*tuiEvent\notifyID)
    *tuiEvent\tuiObject = *tuiScrollView
    _ntui_QueueEvent{*tuiEngine\outQ,*tuiEvent}
    done=True
  EndIf

Function Return done
End Function
 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawScrollView {*tuiScrollView.tuiScrollView,*rp.RastPort}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * draw the ScrollView in all its beauty */                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiScrollView.tuiScrollView    : ???                                                 /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawScrollView:
Statement _ntui_DrawScrollView{*tuiScrollView.tuiScrollView,*rp.RastPort}
  !_ASSERT{*tuiScrollView}
  !_ASSERT{*tuiScrollView\obj\classID=#TUICLASS_SCROLLVIEW}

  *tuiEngine.tuiEngine = *tuiScrollView\obj\tuiEngine
  !_ASSERT{*tuiEngine}
  !_ASSERT{*rp}

  If (*tuiScrollView\obj\borderType><#TUIBORDER_NONE)
    ntui_DrawBorder{*tuiEngine,*rp,*tuiScrollView\obj\bbox,*tuiScrollView\obj\borderType,*tuiScrollView\obj\flags}
  End If
  If *tuiScrollView\content
  ;ntui_SetClip{*rp,*tuiScrollView\obj\cbox}
  ;_ntui_Draw{*tuiScrollView\content,*rp}
 ; ntui_RemClip{*rp}
  Else
    *tui.tuiObject = *tuiScrollView
    SetAPen_ *rp,1
    RectFill_ *rp,*tui\cbox\left,*tui\cbox\top,*tui\cbox\right,*tui\cbox\bottom
  End If
  *tuiScrollView\lastOffset\x = *tuiScrollView\offset\x,*tuiScrollView\offset\y

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetScrollViewMinSize {*tuiScrollView.tuiScrollView,*rp.RastPort}     /
;/                                                                             /
;/ Description:                                                                /
;/ * calculate the minimum size for the button */                              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiScrollView.tuiScrollView    : ???                                                 /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_CalculateScrollViewMinSize:
Function.l _ntui_CalculateScrollViewMinSize{*tuiScrollView.tuiScrollView,*rp.RastPort}
*tuiEngine.tuiEngine = *tuiScrollView\obj\tuiEngine : If *tuiEngine=#NULL OR *rp=#NULL Then Function Return *tuiScrollView\obj\minsize

*tuiScrollView\obj\minsize\x  + !tuiBorderWidth{*tuiScrollView\obj\padding}
*tuiScrollView\obj\minsize\y  + !tuiBorderHeight{*tuiScrollView\obj\padding}

_ntui_GetBorderSize{*tuiEngine,*tuiScrollView\obj\borderType,*tuiScrollView\obj\flags,*tuiScrollView\obj\border}
*tuiScrollView\obj\minsize\x + !tuiBorderWidth{*tuiScrollView\obj\border}
*tuiScrollView\obj\minsize\y + !tuiBorderHeight{*tuiScrollView\obj\border}

If *tuiScrollView\obj\borderType><#TUIBORDER_NONE
  ntui_SetAttr{*tuiScrollView\hScroller,#TUIA_BORDERTYPE,#TUIBORDER_NONE}
  ntui_SetAttr{*tuiScrollView\vScroller,#TUIA_BORDERTYPE,#TUIBORDER_NONE}
End If


*child.tuiObject = *tuiScrollView\obj\child
While *child
  _ntui_CalculateMinSize{*child,*rp}
  *child=*child\next_
Wend

If *tuiScrollView\hScroller Then *tuiScrollView\obj\minsize\y + *tuiScrollView\hScroller\obj\minsize\y
If *tuiScrollView\vScroller Then *tuiScrollView\obj\minsize\x + *tuiScrollView\hScroller\obj\minsize\x

Function Return *tuiScrollView\obj\minsize
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeScrollView {*tuiScrollView.tuiScrollView}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * free everything special that we allocated for the button */               /
;/ If *tuiScrollView\img Then ntui_FreeImage{*tuiScrollView\img}  : *tuiScrollView\img = !_NULL  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiScrollView.tuiScrollView    : ???                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitScrollView:
Statement _ntui_DeinitScrollView{*tuiScrollView.tuiScrollView}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_ScrollView {width.l,height.l,@notify.l,@help.s,@flags.l:: /
;/ ,@userID.l}                                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * create function for tui ScrollView */                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - width.l    : ???                                                          /
;/ - height.l    : ???                                                         /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_BeginScrollView{width.l,height.l,@help.s,@flags.l,@nameID.s}
If (flags=#TUI_NOFLAGS) Then flags=0
flags | #TUIF_CENTER|#TUIF_MIDDLE|#TUIF_WANTTAB
*tuiScrollView.tuiScrollView = _ntui_CreateObject{#TUICLASS_SCROLLVIEW,SizeOf.tuiScrollView,help,flags,nameID}
If *tuiScrollView
  *tuiScrollView\step_\x        = *tuiScrollView\obj\tuiEngine\defStep\x,*tuiScrollView\obj\tuiEngine\defStep\y
  ;*tuiScrollView\obj\bindFlags  = #TUIBIND_HDELTA|#TUIBIND_VDELTA|#TUIBIND_HSCROLL|#TUIBIND_VSCROLL|#TUIBIND_ABLE
  *tuiScrollView\obj\borderType = #TUIBORDER_RECESSED
  *tuiScrollView\obj\minsize\x  = width,height
  *tuiScrollView\scrollMode     = #TUISVMODE_AUTO

  tuiGlobal\buildHelper\tuiParent              = *tuiScrollView
  tuiGlobal\buildHelper\tuiPrev                = #NULL


  *tuiScrollView\vScroller = ntui_VScroller{*tuiScrollView\offset\y,*tuiScrollView\total\y,*tuiScrollView\visible\y}
  If *tuiScrollView\vScroller
    ntui_AddArrows{#NULL}
    ;*tuiScrollView\vScroller\obj\borderType=#TUIBORDER_NONE
    ntui_Bind{*tuiScrollView,*tuiScrollView\vScroller}
  End If

  *tuiScrollView\hScroller = ntui_HScroller{*tuiScrollView\offset\x,*tuiScrollView\total\x,*tuiScrollView\visible\x}
  If *tuiScrollView\hScroller
    ntui_AddArrows{#NULL}
    ;*tuiScrollView\hScroller\obj\borderType=#TUIBORDER_NONE
    ntui_Bind{*tuiScrollView,*tuiScrollView\hScroller}
  End If

  *tuiScrollView\lastOffset\x = -1,-1

  !_GetFuncPointer{*tuiScrollView\obj\Draw            ,_ntui_DrawScrollView,{0,0}}
  !_GetFuncPointer{*tuiScrollView\obj\Layout          ,_ntui_LayoutScrollView,{0,0,0}}
  !_GetFuncPointer{*tuiScrollView\obj\DispatchEvent   ,_ntui_DispatchScrollViewEvent,{0,0}}
  !_GetFuncPointer{*tuiScrollView\obj\CalculateMinSize,_ntui_CalculateScrollViewMinSize,{0,0}}
  !_GetFuncPointer{*tuiScrollView\obj\Deinit          ,_ntui_DeinitScrollView,{0}}
  !_GetFuncPointer{*tuiScrollView\obj\SetAttr         ,_ntui_SetScrollViewAttr,{0,0,0}}
  !_GetFuncPointer{*tuiScrollView\obj\GetAttr         ,_ntui_GetScrollViewAttr,{0,0,0}}



End If
Function Return *tuiScrollView
End Function

Function.l ntui_EndScrollView{}
*tuiContent.tuiObject = tuiGlobal\buildHelper\tuiCurrent

tuiGlobal\buildHelper\tuiPrev    = tuiGlobal\buildHelper\tuiParent
tuiGlobal\buildHelper\tuiCurrent = tuiGlobal\buildHelper\tuiParent
If tuiGlobal\buildHelper\tuiParent Then tuiGlobal\buildHelper\tuiParent = tuiGlobal\buildHelper\tuiParent\parent : Else tuiGlobal\buildHelper\tuiParent = #NULL
If tuiGlobal\buildHelper\tuiCurrent\classID><#TUICLASS_SCROLLVIEW Then error{"\\__THIS_FUNCTION: EndScrollView does not match a BeginScrollView!"}

*tuiScrollView.tuiScrollView = tuiGlobal\buildHelper\tuiCurrent
*tuiScrollView\content = *tuiContent

Function Return tuiGlobal\buildHelper\tuiCurrent
End Function




