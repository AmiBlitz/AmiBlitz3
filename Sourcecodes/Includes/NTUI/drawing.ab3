; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 4
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 170
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_RemClip {*rp.RastPort}                                         /
;/                                                                             /
;/ Description:                                                                /
;/* remove a clip region from a rastport previously set with ntui_SetClip.
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : rastport                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_RemClip{*rp.RastPort}
*old_region.Region =#NULL
*new_region.Region = InstallClipRegion_(*rp\Layer, *old_region)
DisposeRegion_ *new_region
*old_region = -1
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_SetClip {*rp.RastPort,x1.l,y1.l,x2.l,y2.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ Set a rectangle clip region to the rastport. Remember to always call ntui_RemClip once you are done.
;/ Note: This is a low-level helper function if you are drawing into a tuiView.
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort : rastport to manipulate                                                     /
;/ - x1.l         : coordinates of the rectangle                                                             /
;/ - y1.l         :                                                              /
;/ - x2.l         :                                                             /
;/ - y2.l         :                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_SetClip{*rp.RastPort,*cbox.tuiRect}
cliprect.Rectangle\MinX = Max(*cbox\left,0)
cliprect.Rectangle\MinY = Max(*cbox\top ,0)
cliprect.Rectangle\MaxX = Min(*cbox\right ,*rp\Layer\Width-1)
cliprect.Rectangle\MaxY = Min(*cbox\bottom,*rp\Layer\Height-1)
*new_region.Region = NewRegion_
If *new_region
  If OrRectRegion_(*new_region, &cliprect)
    *old_region.Region = InstallClipRegion_(*rp\Layer, *new_region)
  End If
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_SetFont {*tuiEngine.tuiEngine,flags.l,@*rp.RastP:: /
;/ ort}                                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ private: select a font from the given flags and optionally attach it to:: /
;/  the rastport                                                             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine : tuiEngine                                             /
;/ - flags.l              : tuiFlags                                                          /
;/ - *rp.RastPort         : a RastPort                                                    /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l             : tuiFont index                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_SetFont{*tuiEngine.tuiEngine,flags.l,@*rp.RastPort}
tuifont.l = #TUIFONT_NORMAL
If (flags&#TUIF_BOLD)
  If (flags&#TUIF_ITALIC)
    tuifont = #TUIFONT_NORMALIB
  Else
    tuifont = #TUIFONT_NORMALBOLD
  End If
Else
  If (flags&#TUIF_ITALIC)
    tuifont = #TUIFONT_NORMALITALIC
  Else
    tuifont = #TUIFONT_NORMAL
  End If
End If
If (flags&#TUIF_SMALL)
  tuifont+4
Else
  If (flags&#TUIF_FIX)
    tuifont+8
  Else
    If (flags&#TUIF_SERIF)
      tuifont+12
    End If
  EndIf
End If

If *rp><#NULL AND *rp><-1
  If (*tuiEngine\font[tuifont]) Then SetFont_ *rp,*tuiEngine\font[tuifont]
  If flags&#TUIF_BOLD   Then SetSoftStyle_ *rp,#FSF_BOLD,#FSF_BOLD
  If flags&#TUIF_ITALIC Then SetSoftStyle_ *rp,#FSF_ITALIC,#FSF_ITALIC
End If
Function Return tuifont
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetTuiPen {*tuiEngine.tuiEngine,argb.l,@tuipen.l}  /
;/                                                                             /
;/ Description:                                                                /
;/ private
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : ???                                             /
;/ - argb.l    : ???                                                           /
;/ - tuipen.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_ObtainTuiPen{*tuiEngine.tuiEngine,argb.l,@tuipen.l}
If tuipen<0 ; we want a new pen
  For n.l=0 To *tuiEngine\pensUsed-1 ; check if it is already there...
    If argb=*tuiEngine\penInfo[n]\ARGB Then tuipen=n : n=*tuiEngine\pensUsed
  Next
  If tuipen<0 Then tuipen=*tuiEngine\pensUsed
End If
If tuipen>=#TUIMAX_PENS Then Function Return #TUIPEN_TEXT
If *tuiEngine\penInfo[tuipen]\locked Then Function Return tuipen
If tuipen>=*tuiEngine\pensUsed Then *tuiEngine\pensUsed=tuipen+1
*tuiEngine\penInfo[tuipen]\ARGB = argb
If *tuiEngine\scr=#NULL Then Function Return tuipen
R.l = (argb & $00FF0000) LSL  8
G.l = (argb & $0000FF00) LSL 16
B.l = (argb & $000000FF) LSL 24
*tuiEngine\pen[tuipen] = ObtainBestPenA_(*tuiEngine\scr\ViewPort\ColorMap,R,G,B,#NULL)
*tuiEngine\penInfo[tuipen]\locked = True
Function Return tuipen
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetTextLength {*tuiEngine.tuiEngine,*text.str,fl:: /
;/ ags.l,*rp.RastPort}                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine : ???                                             /
;/ - *text.str            : ???                                                        /
;/ - flags.l              : ???                                                          /
;/ - *rp.RastPort         : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_GetTextWidth{*tuiEngine.tuiEngine,*text.str,flags.l,*rp.RastPort}
If *text=#NULL OR *rp=#NULL Then Function Return 0
_ntui_SetFont{*tuiEngine,flags,*rp}
TextExtent_ *rp,&*text\str,*text\size,tx.TextExtent
Function Return tx\te_Extent\MaxX-tx\te_Extent\MinX+1
End Function


Function.l _ntui_GetTextSkip{*tuiEngine.tuiEngine,*text.str,flags.l,*rp.RastPort}
If *text=#NULL OR *rp=#NULL Then Function Return 0
_ntui_SetFont{*tuiEngine,flags,*rp}
Function Return TextLength_(*rp,&*text\str,*text\size)
End Function



Function.l _ntui_GetFontHeight{*tuiEngine.tuiEngine,flags.l}
!_ASSERT{*tuiEngine}
tuifont.l = _ntui_SetFont{*tuiEngine,flags}
Function Return *tuiEngine\font[tuifont]\tf_YSize
End Function


Statement _ntui_DrawEmptyBox{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,tuiPen.l}
  SetAPen_ *rp,*tuiEngine\pen[tuiPen]
  x1.l = *bbox\left
  x2.l = *bbox\right
  y1.l = *bbox\top
  y2.l = *bbox\bottom
  w.l = x2-x1+1
  h.l = y2-y1+1
  For x.l = x1 To x2+h-1 Step 4
    dx.l = x
    dy.l = y1
    If dx>=w+x1 Then dy- (w+x1)+dx+1 : dx = x2
    Move_ *rp,dx,dy
    dx.l = x-h+1
    dy.l = y2
    If dx<x1 Then dy+dx-x1 : dx=x1
    Draw_ *rp,dx,dy
  Next
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_GetTextLengthEx {*tuiEngine.tuiEngine,*text.str,*tx.TextExt:: /
;/ ent,flags.l,*rp.RastPort}                                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine : ???                                             /
;/ - *text.str            : ???                                                        /
;/ - *tx.TextExtent       : ???                                                   /
;/ - flags.l              : ???                                                          /
;/ - *rp.RastPort         : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_GetTextRect{*tuiEngine.tuiEngine,*text.str,*tbox.tuiRect,flags.l,*rp.RastPort}
If *text=#NULL OR *tbox=#NULL OR *rp=#NULL
  *tbox\left = 0,0,0,0
  Statement Return
End If
_ntui_SetFont{*tuiEngine,flags,*rp}
TextExtent_ *rp,&*text\str,*text\size,tx.TextExtent
*tbox\left   = tx\te_Extent\MinX
*tbox\top    = tx\te_Extent\MinY
*tbox\right  = tx\te_Extent\MaxX
*tbox\bottom = tx\te_Extent\MaxY
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_Print {*tuiEngine.tuiEngine,*text.str,x1.l,y1.l,x2.l,y2.l,f:: /
;/ lags.l,*rp.RastPort,fgTuiPen.l,bgTuiPen.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : ???                                             /
;/ - *text.str    : ???                                                        /
;/ - x1.l    : ???                                                             /
;/ - y1.l    : ???                                                             /
;/ - x2.l    : ???                                                             /
;/ - y2.l    : ???                                                             /
;/ - flags.l    : ???                                                          /
;/ - *rp.RastPort    : ???                                                     /
;/ - fgTuiPen.l    : ???                                                       /
;/ - bgTuiPen.l    : ???                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_Print{*tuiEngine.tuiEngine,*text.str,*bbox.tuiRect,*tbox.tuiRect,flags.l,*rp.RastPort,fgTuiPen.l,bgTuiPen.l}
If *text.str=#NULL
  If bgTuiPen>=0
    bgpen.l = *tuiEngine\pen[bgTuiPen]
    SetAPen_ *rp,bgpen
    RectFill_ *rp,*bbox\left,*bbox\top,*bbox\right,*bbox\bottom
  End If
  Statement Return
End If
osize.l = *text\size
If osize>4096 Then error{"Lengthy string! :"+Str$(osize)+" chars!!!"} : Statement Return
xs.l = !tuiRectWidth{*tbox}
Repeat
  _ntui_GetTextRect{*tuiEngine,*text,tx.tuiRect,flags,*rp}
  lx.l = !tuiRectWidth{tx}
  If xs<lx Then *text\size-1
Until xs>=lx OR *text\size<=0

ly.l = !tuiRectHeight{tx}

If (flags&#TUIF_LEFT)
  px.l = *tbox\left-tx\left
Else
  If (flags&#TUIF_RIGHT)
    px = *tbox\right-lx-tx\left +1
  Else
    px = (*tbox\left+*tbox\right-lx+1)/2-tx\left
  End If
End If

If (flags&#TUIF_TOP)
  py.l = *tbox\top-tx\top
Else
  If (flags&#TUIF_BOTTOM)
    py = *tbox\bottom-ly-tx\top +1
  Else
    py = (*tbox\top+*tbox\bottom-ly+1)/2-tx\top
  End If
End If

If bgTuiPen>=0 Then bgpen.l = *tuiEngine\pen[bgTuiPen] : Else bgpen=-1
fgpen.l = *tuiEngine\pen[fgTuiPen]
CNIF #TUI_DEBUG
fgpen =  RRnd(1,255)
bgpen = RRnd(1,255)
CEND

If bgTuiPen>=0
  If *tuiEngine\redrawMethod=#TUIRM_SMART
    xa.l = px + tx\left   -1
    xb.l = px + tx\right  +1
    ya.l = py + tx\top    -1
    yb.l = py + tx\bottom +1
    SetAPen_ *rp,bgpen
    If ya>=*bbox\top    Then RectFill_ *rp,*bbox\left,*bbox\top,*bbox\right,ya
    If yb<=*bbox\bottom Then RectFill_ *rp,*bbox\left,       yb,*bbox\right,*bbox\bottom
    If xa>=*bbox\left   Then RectFill_ *rp,*bbox\left,     ya+1,         xa,yb-1
    If xb<=*bbox\right  Then RectFill_ *rp,        xb,     ya+1,*bbox\right,yb-1
  Else
    CNIF #TUI_DEBUG
      SetAPen_ *rp,9
    CELSE
      SetAPen_ *rp,bgpen
    CEND
    RectFill_ *rp,*bbox\left,*bbox\top,*bbox\right,*bbox\bottom
  End If
End If

    CNIF #TUI_DEBUG
      SetAPen_ *rp,4
      RectFill_ *rp,*tbox\left,*tbox\top,*tbox\right,*tbox\bottom
    CEND


If (flags&#TUIF_DISABLED)
  If *tuiEngine\redrawMethod=#TUIRM_SMART
    If bgpen>=0
      Move_ *rp,xa+1,ya+1 : Draw_ *rp,xb-1,ya+1
      Move_ *rp,xa+1,ya+1 : Draw_ *rp,xa+1,yb-1
    End If
  End If
  fgpen=*tuiEngine\pen[#TUIPEN_WHITE]
  If fgpen>=0 Then SetAPen_ *rp,fgpen
  If bgpen>=0 Then SetBPen_ *rp,bgpen : SetDrMd_ *rp,#JAM2: Else SetDrMd_ *rp,#JAM1
  yb.l = py + tx\bottom +1
  If yb<=*bbox\bottom
    Move_    *rp,px+1,py+1
  Else
    Move_    *rp,px+1,py
  End If
  Text_    *rp,&*text\str,*text\size
  fgpen=*tuiEngine\pen[#TUIPEN_SHADOW]
  SetAPen_ *rp,fgpen
  SetDrMd_ *rp,#JAM1
  Move_    *rp,px,py
  Text_    *rp,&*text\str,*text\size
Else
  If fgpen>=0 Then SetAPen_ *rp,fgpen
  If bgpen>=0 Then SetBPen_ *rp,bgpen : SetDrMd_ *rp,#JAM2: Else SetDrMd_ *rp,#JAM1
  Move_    *rp,px,py
  Text_    *rp,&*text\str,*text\size
End If

If (flags&#TUIF_UNDERLINED)
  yb.l = py + tx\bottom +1
  If yb<*bbox\bottom
    Move_ *rp,px,py+2
    Draw_ *rp,px+lx-1,py+2
  Else
    Move_ *rp,px,py+1
    Draw_ *rp,px+lx-1,py+1
  End If
End If

SetDrMd_ *rp,#JAM2
If *text\size<osize
  ya.l = py + tx\top-1  +2
  yb.l = py + tx\bottom+1  -2
  s.l = 2;(yb-ya+1)/5 : If s<2 Then s=2

  For y.l=ya To yb Step s
    WritePixel_ *rp,*tbox\right,y
  Next
  *text\size=osize
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_OpenFont {fontname.s,size.l,style.l,*scr.Screen}   /
;/                                                                             /
;/ Description:                                                                /
;/ private: open a font for later use in NTUI
;/                                                                            /
;/ Inputs:                                                                     /
;/ - fontname.s   : name of the font (e.g. "topaz.font")                                                       /
;/ - size.l       : size of the font (e.g. 8)                                                           /
;/ - style.l      : style flags of the font (e.g. #FSF_BOLD)                                                           /
;/ - *scr.Screen  : optional screen from were to get the default if this fails                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - *font.TextFont : font handle                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_OpenFont{fontname.s,size.l,flags.l,*scr.Screen}
DEFTYPE.TextAttr ta

*font.TextFont=#NULL

style.l = 0
If flags&#TUIF_BOLD    Then style | #FSF_BOLD
If flags&#TUIF_ITALIC  Then style | #FSF_ITALIC
If size<6 Then size=6

If fontname
  If (LCase$(Right$(fontname,5))><".font") Then fontname = fontname+".font"
  ta\ta_Name  = &fontname
  ta\ta_YSize = size          ;/* height of the font */
  ta\ta_Style = style         ;/* intrinsic font style */
  ta\ta_Flags = #FPF_DISKFONT ;|#FPF_PROPORTIONAL      ;/* font preferences and flags */
  *font = OpenDiskFont_(ta)
End If

If (*font=#NULL) AND ((flags&#TUIF_FIX)=0) ;/* if font cannot be opened, try the screen font */
  If *scr><#NULL
    size = *scr\Font\ta_YSize
    If (flags&#TUIF_SMALL) Then size*2/3 : If size<6 Then size=6
    ta\ta_Name  = *scr\Font\ta_Name
    ta\ta_YSize = size
    ta\ta_Style = style
    ta\ta_Flags = *scr\Font\ta_Flags
    *font = OpenDiskFont_(ta)
  End If
End If

If (*font=#NULL) AND ((flags&#TUIF_FIX)=0);/* if font cannot be opened, try the screen font wihtout styles*/
  If *scr><#NULL
    *font = OpenDiskFont_(*scr\Font)
  End If
End If

;If *font=#NULL ;/* if font still cannot be opened, try the default gfx font */
;  *gfxbase.GfxBase = OpenLibrary_ ("graphics.library",0)
;  If *gfxbase
;    *font = *gfxbase\DefaultFont
;  End If
;  CloseLibrary_ *gfxbase
;End If

If (*font=#NULL) ;/* if font still cannot be opened, try the default gfx font */
  InitRastPort_ rp.RastPort
  AskFont_ rp,ta ; might be better
  ta\ta_Style = style
  *font = OpenDiskFont_(ta)
End If

If (*font=#NULL) ;/* if font still cannot be opened, try the default gfx font wihtout styles*/
  InitRastPort_ rp.RastPort
  AskFont_ rp,ta ; might be better
  *font = OpenDiskFont_(ta)
End If

Function Return *font
End Function




