; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "///"
; ExeFile         = "test"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; Version         = 0.1.0
; NumberOfBuilds  = 92
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 409
; CursorColumn    = 16
; LabelSearch     = "even"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_event.include                                                    /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////

Dim tuiRawKeyMap.l     (#TUIMAX_RAWKEYS)
Dim tuiMouseButtonMap.l(#TUIMAX_MOUSEBUTTONS)

SHARED tuiRawKeyMap()
SHARED tuiMouseButtonMap()

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_FlushRawKey {}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/                                                                             /
;/ Reset all rawkeys to be unpressed.                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_FlushRawKeys{}
For n.l=0 To #TUIMAX_RAWKEYS-1
  tuiRawKeyMap(n)=0
Next
For n.l=0 To #TUIMAX_MOUSEBUTTONS-1
  tuiMouseButtonMap(n)=0
Next
End Statement



#TUIEVA_NOTIFY        =  1 ; (string) notify id string

#TUIEVA_VALUE         =  2 ; (int) event integer value
#TUIEVA_MOUSEBUTTON   =  2 ; (int) mouse button number (maps to value)
#TUIEVA_RAWKEY        =  2 ; (int) raw key code (maps to value)
#TUIEVA_VANILLAKEY    =  3 ; (int) vanilla key code
#TUIEVA_QUALIFIER     =  4 ; (int) qualifiers

#TUIEVA_STRING        =  5 ; (string) event data string
#TUIEVA_MESSAGE       =  5 ; (string) arexx message (maps to string)

#TUIEVA_TUIOBJECT     =  6 ; (int) event tuiObject
#TUIEVA_TUIWINDOW     =  7 ; (int) event tuiWindow

#TUIEVA_XPOS          =  8 ; (int) x pixel position
#TUIEVA_YPOS          =  9 ; (int) y pixel position
#TUIEVA_WIDTH         = 10 ; (int) width in pixels
#TUIEVA_HEIGHT        = 11 ; (int) height in pixels

;#TUIEVA_WINID         = 12 ; (string)
;#TUIEVA_NAMEID        = 13 ; (string)
#TUIEVA_MOVER         = 14 ; (bool) event position is currently over tuiObject

#TUIQUAL_LSHIFT       = $0001                                    ; left shift key
#TUIQUAL_RSHIFT       = $0002                                    ; right shift key
#TUIQUAL_SHIFT        = #TUIQUAL_LSHIFT|#TUIQUAL_RSHIFT          ; any sift key
#TUIQUAL_LALT         = $0010                                    ; left alt key
#TUIQUAL_RALT         = $0020                                    ; right alt key
#TUIQUAL_ALT          = #TUIQUAL_LALT|#TUIQUAL_RALT              ; any alt key
#TUIQUAL_CTRL         = $0008                                    ; control key
#TUIQUAL_LCOM         = $0040                                    ; left command key (=left AMIGA key)
#TUIQUAL_RCOM         = $0080                                    ; right command key (=right AMIGA key)
#TUIQUAL_COM          = #TUIQUAL_LCOM|#TUIQUAL_RCOM              ; any command key
#TUIQUAL_RMB          = $2000                                    ; right mouse button
#TUIQUAL_LMB          = $4000                                    ; left mouse button
#TUIQUAL_MMB          = $1000                                    ; middle mouse button
#TUIQUAL_MB           = #TUIQUAL_LMB|#TUIQUAL_RMB|#TUIQUAL_MMB   ; any mouse button
#TUIQUAL_CAPSLOCK     = $0004                                    ; capslock key
#TUIQUAL_NUMPAD       = $0100                                    ; numpad key
#TUIQUAL_REPEAT       = $0200                                    ; is a key repeat event
#TUIQUAL_DOUBLECLICK  = $10000                                   ; is a double click event
#TUIQUAL_TRIPLECLICK  = $20000                                   ; is a tripple click event

Function.l ntui_GetEventAttr{*tuiEvent.tuiEvent,evAttr.l}
  If *tuiEvent=#NULL Then Function Return 0
  Select evAttr
    Case #TUIEVA_NOTIFY
      If *tuiEvent
        If *tuiEvent\notifyID
          Function Return &*tuiEvent\notifyID\str
        End If
      End If
      Function Return #NULL

    Case #TUIEVA_VALUE
      If *tuiEvent Then Function Return *tuiEvent\value : Else Function Return 0

    Case #TUIEVA_STRING
      If *tuiEvent
        If *tuiEvent\string
          Function Return &*tuiEvent\string\str
        End If
      End If
      Function Return #NULL

    Case #TUIEVA_VANILLAKEY
      If *tuiEvent
        If *tuiEvent\string
          Function Return (Peek.b(&*tuiEvent\string\str) & $FF)
        End If
      End If
      Function Return 0

    Case #TUIEVA_TUIOBJECT
      If *tuiEvent Then Function Return *tuiEvent\tuiObject : Else Function Return #NULL

    Case #TUIEVA_QUALIFIER
      If *tuiEvent Then Function Return *tuiEvent\qualifier_ : Else Function Return 0

    Case #TUIEVA_TUIWINDOW
      If *tuiEvent Then Function Return ntui_GetObjectWindow{*tuiEvent\tuiObject} : Else Function Return #NULL

    Case #TUIEVA_MOVER
      If ((*tuiEvent\pos\y>=*tuiEvent\tuiObject\bbox\top) AND (*tuiEvent\pos\y<*tuiEvent\tuiObject\bbox\bottom))
        If ((*tuiEvent\pos\x>=*tuiEvent\tuiObject\bbox\left) AND (*tuiEvent\pos\x<*tuiEvent\tuiObject\bbox\right))
          Function Return True
        End If
      End If
      Function Return False

  End Select
  Function Return 0
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_GetSigFlag {*tuiEngine.tuiEngine}                   /
;/                                                                             /
;/ Description:                                                                /
;/ Get the signal flag mask of the event message port(s) for use with Wait_().      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine : tuiEngine from which to retrieve the signal flags                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l             : signal flag mask                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_GetSigFlag{*tuiEngine.tuiEngine}
  !_ASSERT{*tuiEngine}
  sigFlag.l=*tuiEngine\outQ\sigFlag
  If *tuiEngine\inputTask=#NULL
    If *tuiEngine\winPort Then sigFlag | (1 LSL *tuiEngine\winPort\mp_SigBit)
    If *tuiEngine\rxPort  Then sigFlag | (1 LSL *tuiEngine\rxPort\mp_SigBit )
    If *tuiEngine\appPort Then sigFlag | (1 LSL *tuiEngine\appPort\mp_SigBit)
    sigFlag = sigFlag | *tuiEngine\inQ\sigFlag
  End If
  Function Return sigFlag
End Function


Function.l _ntui_UnqueueEvent{*tuiEventQ.tuiEventQ}
  !_ASSERT{*tuiEventQ}
  If *tuiEventQ\head
    *tuiEvent.tuiEvent = *tuiEventQ\head
    *tuiEventQ\head    = *tuiEventQ\head\next_
    If (*tuiEventQ\head=#NULL)
      *tuiEventQ\tail = #NULL
    End If
    Function Return *tuiEvent
  End If
  Function Return #NULL
End Function


Statement _ntui_QueueEvent{*tuiEventQ.tuiEventQ,*tuiEvent.tuiEvent}
  !_ASSERT{*tuiEventQ}
  !_ASSERT{*tuiEvent}
  *tuiObject.tuiObject = *tuiEvent\tuiObject
  !_ASSERT{*tuiObject}
  *tuiEngine.tuiEngine = *tuiObject\tuiEngine
  !_ASSERT{*tuiEngine}

  If *tuiEventQ\tail
    *tuiEventQ\tail\next_ = *tuiEvent
  Else
    *tuiEventQ\head = *tuiEvent
  End If
  *tuiEventQ\tail = *tuiEvent
  Signal_ *tuiEventQ\sigTask,*tuiEventQ\sigFlag
End Statement


Function.l _ntui_CreateEvent{*tui.tuiObject,evID.l}
  !_ASSERT{*tui}
  *tuiEngine.tuiEngine = *tui\tuiEngine
  !_ASSERT{*tuiEngine}

  *tuiEvent.tuiEvent = AllocPooled_(*tuiEngine\eventPool,SizeOf.tuiEvent)
  If *tuiEvent
    *tuiEvent\next_      = #NULL
    *tuiEvent\tuiObject  = *tui
    *tuiEvent\notifyID   = #NULL
    *tuiEvent\value      = 0
    *tuiEvent\string     = #NULL
    *tuiEvent\pos\x      = 0,0
    *tuiEvent\size\x     = 0,0
    *tuiEvent\qualifier_ = 0
    *tuiEvent\evID       = evID
    *tuiEvent\seconds    = 0
    *tuiEvent\micros     = 0
  End If

  Function Return *tuiEvent
End Function


Statement _ntui_DestroyEvent{*tuiEvent.tuiEvent}
  !_ASSERT{*tuiEvent}
  *tuiObject.tuiObject = *tuiEvent\tuiObject
  !_ASSERT{*tuiObject}
  *tuiEngine.tuiEngine = *tuiObject\tuiEngine
  !_ASSERT{*tuiEngine}
  If (*tuiEvent\string)   Then str_Free{&*tuiEvent\string}
  If (*tuiEvent\notifyID) Then str_Free{&*tuiEvent\notifyID}
  FreePooled_ *tuiEngine\eventPool,*tuiEvent,SizeOf.tuiEvent
End Statement





;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_CauseEvent {notify.l,*tuiWindow.tuiWindow,@*tuiOb:: /
;/ ject.tuiObject,@x.l,@y.l,@width.l,@height.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ Cause an event to happen manually. The event will be passed to the tuiEngines input queue.                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - notify.l               : notify value                                                         /
;/ - *tuiWindow.tuiWindow   : tuiWindow of the event                                             /
;/ - *tuiObject.tuiObject   : tuiObject of the event (if any)                                             /
;/ - x/y.l                  : x/y position of event                                                    /
;/ - width.l                : ???                                                          /
;/ - height.l               : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l               : pointer to created tuiEvent struture                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_PostNotify{*tui.tuiObject,notifyID.s,@value.l,@string.s,@x.l,@y.l,@width.l,@height.l}
  !_ASSERT{*tui}
  *tuiEngine.tuiEngine = *tui\tuiEngine
  !_ASSERT{*tuiEngine}
  *tuiEvent.tuiEvent = _ntui_CreateEvent{*tui,#TUIEV_USER}
  If *tuiEvent
    If (notifyID) Then str_Write{&*tuiEvent\notifyID,notifyID}
    If (string)   Then str_Write{&*tuiEvent\string,string}
    *tuiEvent\value  = value
    *tuiEvent\pos\x  = x,y
    *tuiEvent\size\x = width,height
    _ntui_QueueEvent{*tuiEngine\outQ,*tuiEvent}
  End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_CauseEvent {notify.l,*tuiWindow.tuiWindow,@*tuiOb:: /
;/ ject.tuiObject,@x.l,@y.l,@width.l,@height.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ Cause an event to happen manually. The event will be passed to the tuiEngines input queue.                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - notify.l               : notify value                                                         /
;/ - *tuiWindow.tuiWindow   : tuiWindow of the event                                             /
;/ - *tuiObject.tuiObject   : tuiObject of the event (if any)                                             /
;/ - x/y.l                  : x/y position of event                                                    /
;/ - width.l                : ???                                                          /
;/ - height.l               : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l               : pointer to created tuiEvent struture                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_PostEvent{*tui.tuiObject,evID.l,@value.l,@string.s,@x.l,@y.l,@width.l,@height.l}
  !_ASSERT{*tui}
  *tuiEngine.tuiEngine = *tui\tuiEngine
  !_ASSERT{*tuiEngine}
  *tuiEvent.tuiEvent = _ntui_CreateEvent{*tui,evID}
  If *tuiEvent
    If (string) Then str_Write{&*tuiEvent\string,string}
    *tuiEvent\value  = value
    *tuiEvent\pos\x  = x,y
    *tuiEvent\size\x = width,height
    _ntui_QueueEvent{*tuiEngine\inQ,*tuiEvent}
  End If
End Statement




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_FlushEvents {*tuiEngine.tuiEngine,@*tuiWindow.tuiWindow}       /
;/                                                                             /
;/ Description:                                                                /
;/ Flush events that are waiting in the tasks event queue.                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : tuiEngine to flush                                             /
;/ - *tuiWindow.tuiWindow    : optional window, otherwise flush all window events                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_FlushEvents{*tuiWindow.tuiWindow}
  !_ASSERT{*tuiWindow}
  *tuiEngine.tuiEngine = *tuiWindow\obj\tuiEngine
  !_ASSERT{*tuiEngine}

  *tuiEvent.tuiEvent = *tuiEngine\outQ\head
  *tuiPrev.tuiEvent  = #NULL
  *tuiNext.tuiEvent  = #NULL
  *tuiEngine\outQ\head = #NULL
  *tuiEngine\outQ\tail = #NULL

  While *tuiEvent
    *tuiNext.tuiEvent = *tuiEvent\next_
    If ntui_GetObjectWindow{*tuiEvent\tuiObject} = *tuiWindow
      _ntui_DestroyEvent{*tuiEvent}
      If *tuiPrev Then *tuiPrev\next_ = *tuiNext
    Else
      If *tuiEngine\outQ\head=#NULL Then *tuiEngine\outQ\head = *tuiEvent
      *tuiEngine\outQ\tail = *tuiEvent
      *tuiPrev = *tuiEvent
    End If
    *tuiEvent = *tuiNext
  Wend


  *tuiEvent.tuiEvent = *tuiEngine\inQ\head
  *tuiPrev.tuiEvent  = #NULL
  *tuiNext.tuiEvent  = #NULL
  *tuiEngine\inQ\head = #NULL
  *tuiEngine\inQ\tail = #NULL


  While *tuiEvent
    *tuiNext.tuiEvent = *tuiEvent\next_
    If ntui_GetObjectWindow{*tuiEvent\tuiObject} = *tuiWindow
      _ntui_DestroyEvent{*tuiEvent}
      If *tuiPrev Then *tuiPrev\next_ = *tuiNext
    Else
      If *tuiEngine\inQ\head=#NULL Then *tuiEngine\inQ\head = *tuiEvent
      *tuiEngine\inQ\tail = *tuiEvent
      *tuiPrev = *tuiEvent
    End If
    *tuiEvent = *tuiNext
  Wend

  ntui_FlushRawKeys{}
End Statement


Statement ntui_FlushEventsx{*tuiWindow.tuiWindow}
  !_ASSERT{*tuiWindow}
  *tuiEngine.tuiEngine = *tuiWindow\obj\tuiEngine
  !_ASSERT{*tuiEngine}

  *tuiEvent.tuiEvent = *tuiEngine\outQ\head
  *prev.l = &*tuiEngine\outQ\head
  *tuiEngine\outQ\tail = #NULL

  While *tuiEvent
    *tuiNextEvent.tuiEvent = *tuiEvent\next_
    If ntui_GetObjectWindow{*tuiEvent\tuiObject} = *tuiWindow
      *prev = *tuiNextEvent
      _ntui_DestroyEvent{*tuiEvent}
    Else
      *tuiEngine\outQ\tail = *tuiEvent
    End If
    *tuiEvent = *tuiNextEvent
  Wend

  ;Repeat
  ;  *tuiEvent.tuiEvent = _ntui_UnqueueEvent{*tuiEngine\outQ}
  ;  If *tuiEvent Then _ntui_DestroyEvent{*tuiEvent}
  ;Until *tuiEvent=#NULL

  *tuiEvent.tuiEvent = *tuiEngine\inQ\head
  *prev.l = &*tuiEngine\inQ\head
  *tuiEngine\inQ\tail = #NULL

  While *tuiEvent
    *tuiNextEvent.tuiEvent = *tuiEvent\next_
    If ntui_GetObjectWindow{*tuiEvent\tuiObject} = *tuiWindow
      *prev = *tuiNextEvent
      _ntui_DestroyEvent{*tuiEvent}
    Else
      *tuiEngine\inQ\tail = *tuiEvent
    End If
    *tuiEvent = *tuiNextEvent
  Wend

  ;Repeat
  ;  *tuiEvent.tuiEvent = _ntui_UnqueueEvent{*tuiEngine\inQ}
  ;  If *tuiEvent Then _ntui_DestroyEvent{*tuiEvent}
  ;Until *tuiEvent=#NULL

  ntui_FlushRawKeys{}
End Statement



