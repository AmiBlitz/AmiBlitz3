; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "///"
; ExeFile         = "test"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.1.0
; NumberOfBuilds  = 92
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 498
; CursorColumn    = 75
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_event.include                                                    /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Dim tuiRawKeyMap.l     (#TUIMAX_RAWKEYS)
Dim tuiMouseButtonMap.l(#TUIMAX_MOUSEBUTTONS)

SHARED tuiRawKeyMap()
SHARED tuiMouseButtonMap()

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_FlushRawKey {}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/                                                                             /
;/ Reset all rawkeys to be unpressed.                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_FlushRawKeys{}
For n.l=0 To #TUIMAX_RAWKEYS-1
  tuiRawKeyMap(n)=0
Next
For n.l=0 To #TUIMAX_MOUSEBUTTONS-1
  tuiMouseButtonMap(n)=0
Next
End Statement

;/* TUI Event Types */
#TUIEV_UNDEFINED      =  0  ; for multi purpose
#TUIEV_MOUSEMOVE      =  1  ; mouse movement
#TUIEV_MOUSEDOWN      =  2  ; mouse button press
#TUIEV_MOUSEUP        =  3  ; mouse button release
#TUIEV_HSCROLL        =  4  ; scroll horizontal
#TUIEV_VSCROLL        =  5  ; scroll vertical
#TUIEV_KEYUP          = 10  ; key release
#TUIEV_KEYDOWN        = 11  ; key press or repeat
#TUIEV_MESSAGE        = 20  ; message, e.g. via AREXX
#TUIEV_POPUP          = 30  ; application popup
#TUIEV_ICONIFY        = 31  ; application iconify
#TUIEV_PREFSCHANGE    = 32  ; preferences have changed
#TUIEV_QUIT           = 33  ; quit application
#TUIEV_ICONDROP       = 34  ; file dropped to app icon
#TUIEV_WINDOWDROP     = 35  ; file dropped to window
#TUIEV_TICK           = 36
#TUIEV_CLOSE          = 40 ; close window
#TUIEV_RESIZE         = 41 ; resize tuiobj
#TUIEV_REFRESH        = 50 ; refresh object
#TUIEV_RELAYOUT       = 52 ; re-layout
#TUIEV_PROPAGATE      = 57 ; send out all bind values
#TUIEV_FOCUS          = 58
#TUIEV_LOSEFOCUS      = 59

#TUIEV_MOVER          = 60
#TUIEV_LOSEMOVER      = 61

#TUIEV_HOTKEYUP       = 62
#TUIEV_HOTKEYDOWN     = 63

#TUIEV_TOOLTIP        = 67 ; show the tooltip

#TUIEV_BIND_VALUE     = 70 ; share numeric value
#TUIEV_BIND_MAXVALUE  = 71 ; maximum value
#TUIEV_BIND_MINVALUE  = 72 ; minimum value
#TUIEV_BIND_DELTA     = 86 ; increase or descrese numeric value
#TUIEV_BIND_STEP      = 87 ; steo size of one delta

#TUIEV_BIND_STRING    = 73 ; share string value

#TUIEV_BIND_ABLE      = 74 ; share enabled/disabled
#TUIEV_BIND_CHECK     = 83 ; enable/disable BIND with checkbox

#TUIEV_BIND_HVALUE    = 75 ; share horizontal scrolling
#TUIEV_BIND_HTOTAL    = 76
#TUIEV_BIND_HVISIBLE  = 77
#TUIEV_BIND_HDELTA    = 84 ; one step horizontal (scroller arrow)
#TUIEV_BIND_HSTEP     = 78

#TUIEV_BIND_VVALUE    = 79 ; share vertical scrolling
#TUIEV_BIND_VTOTAL    = 80
#TUIEV_BIND_VVISIBLE  = 81
#TUIEV_BIND_VDELTA    = 85 ; one step vertical   (scroller arrow)
#TUIEV_BIND_VSTEP     = 82

#TUIEV_USER           = 128  ; user event


; Event Attributes
#TUIEVA_VALUE          =  2 ; (int) event integer value
#TUIEVA_MOUSEBUTTON    =  2 ; (int) mouse button number (maps to value)
#TUIEVA_RAWKEY         =  2 ; (int) raw key code (maps to value)
#TUIEVA_VANILLAKEY     =  3 ; (int) vanilla key code (first character of vanilla key, use TUIEV_STRING for full key input)
#TUIEVA_QUALIFIER      =  4 ; (int) qualifiers like CTRL, SHIFT, ALT etc. (#TUIQUAL_...)
#TUIEVA_STRING         =  5 ; (string) event data string
#TUIEVA_MESSAGE        =  5 ; (string) arexx message (maps to string)
#TUIEVA_XPOS           =  8 ; (int) x pixel position relative to window
#TUIEVA_YPOS           =  9 ; (int) y pixel position relative to window
#TUIEVA_WIDTH          = 16 ; (int) width in pixels
#TUIEVA_HEIGHT         = 17 ; (int) height in pixels
#TUIEVA_ID             = 18 ; (int) height in pixels

; Notify Attributes
#TUINA_NOTIFY         =  1 ; (string) notify string

#TUINA_VALUE          =  2 ; (int) event integer value
#TUINA_MOUSEBUTTON    =  2 ; (int) mouse button number (maps to value)
#TUINA_RAWKEY         =  2 ; (int) raw key code (maps to value)
#TUINA_VANILLAKEY     =  3 ; (int) vanilla key code (first character of vanilla key, use TUIEV_STRING for full key input)
#TUINA_QUALIFIER      =  4 ; (int) qualifiers like CTRL, SHIFT, ALT etc. (#TUIQUAL_...)

#TUINA_STRING         =  5 ; (string) event data string
#TUINA_MESSAGE        =  5 ; (string) arexx message (maps to string)

#TUINA_OBJECT         =  6 ; (int) event tuiObject
#TUINA_WINDOW         =  7 ; (int) event tuiWindow

#TUINA_WINXPOS        =  8 ; (int) x pixel position relative to window
#TUINA_WINYPOS        =  9 ; (int) y pixel position relative to window
#TUINA_SCREENXPOS     = 10 ; (int) x pixel position absolute on screen
#TUINA_SCREENYPOS     = 11 ; (int) y pixel position absolute on screen
#TUINA_OBJXPOS        = 12 ; (int) x pixel position relative to object bounding box
#TUINA_OBJYPOS        = 13 ; (int) y pixel position realtive to object bounding box
#TUINA_CXPOS          = 14 ; (int) x pixel position relative to object content box
#TUINA_CYPOS          = 15 ; (int) y pixel position relative to object content box

#TUINA_WIDTH          = 16 ; (int) width in pixels
#TUINA_HEIGHT         = 17 ; (int) height in pixels

#TUINA_WINDOWID       = 18 ; (string) id of object window
#TUINA_OBJECTID       = 19 ; (string) id of object
#TUINA_WININSTANCEID  = 20 ; (int) instance id of object window

#TUINA_MOVER          = 21 ; (bool) event position is currently over tuiObject
#TUINA_EVENTID        = 22 ; (bool) event position is currently over tuiObject

; Qualifiers
#TUIQUAL_LSHIFT       = $0001                                    ; left shift key
#TUIQUAL_RSHIFT       = $0002                                    ; right shift key
#TUIQUAL_SHIFT        = #TUIQUAL_LSHIFT|#TUIQUAL_RSHIFT          ; any sift key
#TUIQUAL_LALT         = $0010                                    ; left alt key
#TUIQUAL_RALT         = $0020                                    ; right alt key
#TUIQUAL_ALT          = #TUIQUAL_LALT|#TUIQUAL_RALT              ; any alt key
#TUIQUAL_CTRL         = $0008                                    ; control key
#TUIQUAL_LCOM         = $0040                                    ; left command key (=left AMIGA key)
#TUIQUAL_RCOM         = $0080                                    ; right command key (=right AMIGA key)
#TUIQUAL_COM          = #TUIQUAL_LCOM|#TUIQUAL_RCOM              ; any command key
#TUIQUAL_RMB          = $2000                                    ; right mouse button
#TUIQUAL_LMB          = $4000                                    ; left mouse button
#TUIQUAL_MMB          = $1000                                    ; middle mouse button
#TUIQUAL_MB           = #TUIQUAL_LMB|#TUIQUAL_RMB|#TUIQUAL_MMB   ; any mouse button
#TUIQUAL_CAPSLOCK     = $0004                                    ; capslock key
#TUIQUAL_NUMPAD       = $0100                                    ; numpad key
#TUIQUAL_REPEAT       = $0200                                    ; is a key repeat event

#TUIQUAL_DOUBLECLICK  = $10000                                   ; is a double click event
#TUIQUAL_TRIPLECLICK  = $20000                                   ; is a tripple click event

; Event Flags
#TUIEVF_QUEUED        = $0001 ; event is currently in queue
#TUIEVF_VALID         = $0002 ; event is valid (debugging)
#TUIEVF_ASYNC         = $0004 ; event was created asynchroneous (AllocMem vs. AllocPooled)
#TUIEVF_STOLEN        = $0008 ; event is stolen
#TUIEVF_STR_STOLEN    = $0010 ; string is stolen

; Notify Flags
#TUINF_QUEUED         = $0001 ; notify is currently in queue
#TUINF_VALID          = $0002 ; notify is valid
#TUINF_ASYNC          = $0004 ; notify was created async
#TUINF_STOLEN         = $0008 ; notify is stolen
#TUINF_ID_STOLEN      = $0010 ; id string is stolen

Function.l ntui_GetEventAttr{*ev.tuiEvent,ti_Tag.l,*ti_Data_.l}

  If *ev=Null Then Function Return False
  done.l = True
  *ti_Data.longP = (.longP)*ti_Data_

  Select ti_Tag
    Case #TUIEVA_ID         : *ti_Data\l = *ev\id
    Case #TUIEVA_VALUE      : *ti_Data\l = *ev\value
    Case #TUIEVA_STRING     : *ti_Data\l = str_GetPtr{*ev\string}
    Case #TUIEVA_VANILLAKEY
        If *ev\string
          *ti_Data\l = (Peek.b(&*ev\string\str) & $FF)
        Else
          *ti_Data\l = 0
        End If
    Case #TUIEVA_QUALIFIER  : *ti_Data\l = *ev\qualifier_
    Case #TUIEVA_XPOS       : *ti_Data\l = *ev\pos\x
    Case #TUIEVA_YPOS       : *ti_Data\l = *ev\pos\y
    Case #TUIEVA_WIDTH      : *ti_Data\l = *ev\size\x
    Case #TUIEVA_HEIGHT     : *ti_Data\l = *ev\size\y
    Default
      done = False
  End Select

  Function Return done

End Function

Function.l ntui_GetNotifyAttr{*notify.tuiNotify,ti_Tag.l,*ti_Data_.l}

  If *notify=Null Then Function Return False
  done.l = True
  *ti_Data.longP = (.longP)*ti_Data_

  Select ti_Tag
    Case #TUINA_NOTIFY    : *ti_Data\l = str_GetPtr{*notify\id}
    Case #TUINA_VALUE     : *ti_Data\l = *notify\ev\value
    Case #TUINA_EVENTID   : *ti_Data\l = *notify\ev\id
    Case #TUINA_STRING    : *ti_Data\l = str_GetPtr{*notify\ev\string}
    Case #TUINA_VANILLAKEY
        If *notify\ev\string
          *ti_Data\l = (Peek.b(&*notify\ev\string\str) & $FF)
        Else
          *ti_Data\l = 0
        End If
    Case #TUINA_OBJECT    : *ti_Data\l = *notify\obj
    Case #TUINA_QUALIFIER : *ti_Data\l = *notify\ev\qualifier_
    Case #TUINA_WINDOW    : *ti_Data\l = ntui_GetWindow{*notify\obj}
    Case #TUINA_WINDOWID  : *win.tuiWindow = ntui_GetWindow{*notify\obj} : If *win Then *ti_Data\l = str_GetPtr{*win\obj\nameID} : Else done=False
    Case #TUINA_WININSTANCEID : *win.tuiWindow = ntui_GetWindow{*notify\obj} : If *win Then *ti_Data\l = *win\instanceID : Else done = False
    Case #TUINA_OBJECTID  : *ti_Data\l = str_GetPtr{*notify\obj\nameID}
    Case #TUINA_MOVER
      *ti_Data\l = 0
      If ((*notify\ev\pos\y>=*notify\obj\bbox\top) AND (*notify\ev\pos\y<*notify\obj\bbox\bottom))
        If ((*notify\ev\pos\x>=*notify\obj\bbox\left) AND (*notify\ev\pos\x<*notify\obj\bbox\right))
          *ti_Data\l = 1
        End If
      End If

    Case #TUINA_WINXPOS    : *ti_Data\l = *notify\ev\pos\x
    Case #TUINA_WINYPOS    : *ti_Data\l = *notify\ev\pos\y
    Case #TUINA_SCREENXPOS : *ti_Data\l = *notify\ev\pos\x : *win.tuiWindow = ntui_GetWindow{*notify\obj} : If *win Then If *win\oswin Then *ti_Data\l + *win\oswin\LeftEdge
    Case #TUINA_SCREENYPOS : *ti_Data\l = *notify\ev\pos\y : *win.tuiWindow = ntui_GetWindow{*notify\obj} : If *win Then If *win\oswin Then *ti_Data\l + *win\oswin\TopEdge
    Case #TUINA_OBJXPOS    : *ti_Data\l = *notify\ev\pos\x - *notify\obj\bbox\left
    Case #TUINA_OBJYPOS    : *ti_Data\l = *notify\ev\pos\y - *notify\obj\bbox\top
    Case #TUINA_CXPOS      : *ti_Data\l = *notify\ev\pos\x - *notify\obj\cbox\left
    Case #TUINA_CYPOS      : *ti_Data\l = *notify\ev\pos\y - *notify\obj\cbox\top
    Case #TUINA_WIDTH      : *ti_Data\l = *notify\ev\size\x
    Case #TUINA_HEIGHT     : *ti_Data\l = *notify\ev\size\y
    Default
      done = False
  End Select

  Function Return done

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_GetSigFlag {*engine.tuiEngine}                   /
;/                                                                             /
;/ Description:                                                                /
;/ Get the signal flag mask of the event message port(s) for use with Wait_().      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *engine.tuiEngine : tuiEngine from which to retrieve the signal flags                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l             : signal flag mask                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_GetSigFlag{*engine.tuiEngine}
  !_ASSERT{*engine}

  sigFlag.l=*engine\notifyQ\sigFlag
  If *engine\winPort Then sigFlag | (1 LSL *engine\winPort\mp_SigBit)
  If *engine\rxPort  Then sigFlag | (1 LSL *engine\rxPort\mp_SigBit )
  If *engine\appPort Then sigFlag | (1 LSL *engine\appPort\mp_SigBit)
  sigFlag = sigFlag | *engine\eventQ\sigFlag

  Function Return sigFlag

End Function


Function.tuiEvent _ntui_UnqueueEvent{*eventQ.tuiEventQ}

  !_ASSERT{*eventQ}

  If *eventQ\head
    ObtainSemaphore_ *eventQ\lock
    *ev.tuiEvent = *eventQ\head
    *eventQ\head = *eventQ\head\next_
    If (*eventQ\head=Null)
      *eventQ\tail = Null
    End If
    *ev\flags = (*ev\flags | #TUIEVF_QUEUED) - #TUIEVF_QUEUED
    ReleaseSemaphore_ *eventQ\lock
    Function Return *ev
  End If

  Function Return Null

End Function


Function.tuiNotify _ntui_UnqueueNotify{*notifyQ.tuiNotifyQ}

  !_ASSERT{*notifyQ}

  If *notifyQ\head
    ObtainSemaphore_ *notifyQ\lock
    *notify.tuiNotify = *notifyQ\head
    *notifyQ\head     = *notifyQ\head\next_
    If (*notifyQ\head=Null)
      *notifyQ\tail = Null
    End If
    *notify\flags = (*notify\flags | #TUINF_QUEUED) - #TUINF_QUEUED
    ReleaseSemaphore_ *notifyQ\lock
    Function Return *notify
  End If

  Function Return Null

End Function


RunErrsOff ; debugger must be switched off for file listener
Statement _ntui_QueueEvent{*obj.tuiObject,*ev.tuiEvent,*eventQ.tuiEventQ}

  !_ASSERT{*eventQ}
  !_ASSERT{*ev}
  !_ASSERT{*obj}

  If (*ev=$DEADBEEF) Then error{"Event is DEADBEEF!!!"} :Statement Return
  If (*ev\flags&#TUIEVF_QUEUED) Then error{"Tried to queue event twice!"} : Statement Return

  *ev\target_ = *obj
  ObtainSemaphore_ *eventQ\lock
  *ev\flags | #TUIEVF_QUEUED
  If *eventQ\tail
    *eventQ\tail\next_ = *ev
  Else
    *eventQ\head = *ev
  End If
  *eventQ\tail = *ev
  ReleaseSemaphore_ *eventQ\lock

  Signal_ *eventQ\sigTask,*eventQ\sigFlag

End Statement


Statement _ntui_QueueEventAsync{*obj.tuiObject,*ev.tuiEvent,*eventQ.tuiEventQ}
  _ntui_QueueEvent{*obj,*ev,*eventQ}
End Statement


Statement _ntui_QueueNotify{*notifyQ.tuiNotifyQ,*notify.tuiNotify}

  !_ASSERT{*notifyQ}
  !_ASSERT{*notify\obj}

  If (*notify=$DEADBEEF) Then error{"Event is DEADBEEF!!!"} :Statement Return
  If (*notify\flags&#TUIEVF_QUEUED) Then error{"Tried to queue event twice!"} : Statement Return

  ObtainSemaphore_ *notifyQ\lock
  *notify\flags | #TUIEVF_QUEUED
  If *notifyQ\tail
    *notifyQ\tail\next_ = *notify
  Else
    *notifyQ\head = *notify
  End If
  *notifyQ\tail = *notify
  ReleaseSemaphore_ *notifyQ\lock

  Signal_ *notifyQ\sigTask,*notifyQ\sigFlag

End Statement


Statement _ntui_QueueNotifyAsync{*notifyQ.tuiNotifyQ,*notify.tuiNotify}
  _ntui_QueueNotify{*notifyQ,*notify}
End Statement


Function.tuiEvent _ntui_CreateEventAsync{*engine.tuiEngine,evID.l}

  *ev.tuiEvent = AllocMem_(SizeOf.tuiEvent,#MEMF_ANY)
  If *ev
    *ev\next_      = Null
    *ev\target_    = Null
    *ev\value      = 0
    *ev\string     = Null
    *ev\pos\x      = 0,0
    *ev\size\x     = 0,0
    *ev\qualifier_ = 0
    *ev\id         = evID
    *ev\seconds    = 0
    *ev\micros     = 0
    *ev\flags      = #TUIEVF_VALID|#TUIEVF_ASYNC
  End If

  Function Return *ev

End Function

Function.tuiNotify _ntui_CreateNotifyAsync{*obj.tuiObject,*ev.tuiEvent,*idP.b}

  !_ASSERT{*obj}

  *notify.tuiNotify = AllocMem_(SizeOf.tuiNotify,#MEMF_ANY)
  If *notify
    *notify\next_         = Null
    *notify\obj           = *obj
    *notify\id            = Null
    *notify\flags         = #TUINF_VALID|#TUINF_ASYNC
    *notify\ev\string     = Null
    *notify\ev\next_      = Null
    If *ev
      *notify\ev\target_    = *ev\target_
      *notify\ev\value      = *ev\value
      *notify\ev\pos\x      = *ev\pos\x,*ev\pos\y
      *notify\ev\size\x     = *ev\size\x,*ev\size\y
      *notify\ev\qualifier_ = *ev\qualifier_
      *notify\ev\id         = *ev\id
      *notify\ev\seconds    = *ev\seconds
      *notify\ev\micros     = *ev\micros
      *notify\ev\flags      = *ev\flags | #TUIEVF_STOLEN | #TUIEVF_ASYNC
      If str_Len{*ev\string}>0 Then str_WritePtrAsync{&*notify\ev\string,str_GetPtr{*ev\string},str_Len{*ev\string}}
    Else
      *notify\ev\target_  = Null
      *notify\ev\id       = #TUIEV_UNDEFINED
      *notify\ev\flags    = #TUIEVF_STOLEN | #TUIEVF_ASYNC | #TUIEVF_VALID
    EndIf
    If *idP Then str_WritePtrAsync{&*notify\id,*idP}

  End If

  Function Return *notify

End Function


Statement ntui_PostEvent{*target.tuiObject,evID.l,@value.l,@*stringP.b,@x.l,@y.l,@width.l,@height.l}

  !_ASSERT{*target}
  *engine.tuiEngine = *target\engine
  !_ASSERT{*engine}
  *ev.tuiEvent = _ntui_CreateEventAsync{*target\engine,evID}
  If *ev
    If (*stringP><-1) Then str_WritePtrAsync{&*ev\string,*stringP}
    *ev\value  = value
    *ev\pos\x  = x,y
    *ev\size\x = width,height
    _ntui_QueueEvent{*target,*ev,*engine\eventQ}
  End If

End Statement


Statement ntui_PostNotify{*obj.tuiObject,*idP.b,@*ev.tuiEvent}
  !_ASSERT{*obj}

  If *ev=-1 Then *ev=Null
  *notify.tuiNotify = _ntui_CreateNotifyAsync{*obj,*ev,*idP}
  If *notify
    _ntui_QueueNotify{*obj\engine\notifyQ,*notify}
  End If

End Statement


Statement ntui_PostNotifyWithData{*obj.tuiObject,*idP.b,evID.l,@value.l,@*stringP.b,@x.l,@y.l,@width.l,@height.l}
  !_ASSERT{*obj}

  *notify.tuiNotify = _ntui_CreateNotifyAsync{*obj,Null,*idP}
  If *notify
    *notify\ev\target_    = *obj
    *notify\ev\value      = value
    *notify\ev\pos\x      = x,y
    *notify\ev\size\x     = width,height
    *notify\ev\qualifier_ = 0
    *notify\ev\id         = evID
    *notify\ev\seconds    = 0
    *notify\ev\micros     = 0
    *notify\ev\flags      = #TUIEVF_STOLEN | #TUIEVF_ASYNC | #TUIEVF_VALID
    *notify\ev\string     = Null
    If (*stringP><-1 AND *stringP><Null) Then str_WritePtrAsync{&*notify\ev\string,*stringP}
    _ntui_QueueNotify{*obj\engine\notifyQ,*notify}
  End If

End Statement




LastRunErrsMode


Function.tuiNotify _ntui_CreateNotify{*obj.tuiObject,*ev.tuiEvent,*idP.b}

  *notify.tuiNotify = _ntui_CreateNotifyAsync{*obj,*ev,*idP}
  Function Return *notify

End Function


Function.tuiEvent _ntui_CreateEvent{*engine.tuiEngine,evID.l}

  !_ASSERT{*engine}

  *ev.tuiEvent = AllocPooled_(*engine\eventPool,SizeOf.tuiEvent)
  If *ev
    *ev\next_      = Null
    *ev\target_    = Null
    *ev\value      = 0
    *ev\string     = Null
    *ev\pos\x      = 0,0
    *ev\size\x     = 0,0
    *ev\qualifier_ = 0
    *ev\id         = evID
    *ev\seconds    = 0
    *ev\micros     = 0
    *ev\flags      = #TUIEVF_VALID
  End If

  Function Return *ev

End Function


Statement _ntui_DestroyEvent{*engine.tuiEngine,*ev.tuiEvent}

  !_ASSERT{*ev}
  !_ASSERT{*engine}

  If (*ev=$DEADBEEF) Then error{"Event is DEADBEEF!!!"} :Statement Return

  If ((*ev\flags&#TUIEVF_VALID ) = 0) Then error{"Tried to free an invalid event!"}:Statement Return
  If ((*ev\flags&#TUIEVF_QUEUED)    ) Then error{"Tired to free an queued event!"}:Statement Return

  *ev\flags   = (*ev\flags | #TUIEVF_VALID) - #TUIEVF_VALID
  *ev\target_ = Null
  *ev\next_   = Null

  If (*ev\flags&#TUIEVF_ASYNC)
    If (*ev\string)
      If (*ev\flags&#TUIEVF_STR_STOLEN)=0 Then str_FreeAsync{&*ev\string}
    End If
    If (*ev\flags&#TUIEVF_STOLEN)=0 Then FreeMem_ *ev,SizeOf.tuiEvent
  Else
    If (*ev\string)
      If (*ev\flags&#TUIEVF_STR_STOLEN)=0 Then str_Free{&*ev\string}
    End If
    If (*ev\flags&#TUIEVF_STOLEN)=0 Then FreePooled_ *engine\eventPool,*ev,SizeOf.tuiEvent
  End If

End Statement


Statement _ntui_DestroyNotify{*notify.tuiNotify}

  !_ASSERT{*notify}
  *obj.tuiObject = *notify\obj
  !_ASSERT{*obj}
  *engine.tuiEngine = *obj\engine
  !_ASSERT{*engine}

  If (*notify=$DEADBEEF) Then error{"Event is DEADBEEF!!!"} :Statement Return

  If ((*notify\flags&#TUINF_VALID ) = 0) Then error{"Tried to free an invalid event!"}:Statement Return
  If ((*notify\flags&#TUINF_QUEUED)    ) Then error{"Tired to free an queued event!"}:Statement Return

  _ntui_DestroyEvent{*engine,*notify\ev}

  *notify\flags = (*notify\flags | #TUINF_VALID) - #TUINF_VALID
  *notify\next_ = Null
  *notify\obj   = Null

  If (*notify\flags&#TUINF_ASYNC)
    If (*notify\id)
      If (*notify\flags&#TUINF_ID_STOLEN)=0 Then str_FreeAsync{&*notify\id}
    End If
    If (*notify\flags&#TUINF_STOLEN)=0 Then FreeMem_ *notify,SizeOf.tuiNotify
  Else
    If (*notify\id)
      If (*notify\flags&#TUINF_ID_STOLEN)=0 Then str_Free{&*notify\id}
    End If
    If (*notify\flags&#TUINF_STOLEN)=0 Then FreePooled_ *engine\notifyPool,*notify,SizeOf.tuiNotify
  End If

End Statement



Statement ntui_FlushObjEvents{*obj.tuiObject}
  !_ASSERT{*obj}
  *engine.tuiEngine = *obj\engine
  !_ASSERT{*engine}

  ; notifyQ
  ObtainSemaphore_ *engine\notifyQ\lock
  *notify.tuiNotify     = *engine\notifyQ\head
  *prevNotify.tuiNotify = Null
  *nextNotify.tuiNotify = Null
  *engine\notifyQ\head  = Null
  *engine\notifyQ\tail  = Null

  While (*notify)
    *nextNotify.tuiNotify = *notify\next_
    If (*notify\obj = *obj)
      *notify\flags = (*notify\flags | #TUIEVF_QUEUED) - #TUIEVF_QUEUED
      _ntui_DestroyNotify{*notify}
      If *prevNotify Then *prevNotify\next_ = *nextNotify
    Else
      If *engine\notifyQ\head=Null Then *engine\notifyQ\head = *notify
      *engine\notifyQ\tail = *notify
      *prevNotify = *notify
    End If
    *notify = *nextNotify
  Wend
  ReleaseSemaphore_ *engine\notifyQ\lock

  ObtainSemaphore_ *engine\eventQ\lock
  *ev.tuiEvent        = *engine\eventQ\head
  *prevEv.tuiEvent    = Null
  *nextEv.tuiEvent    = Null
  *engine\eventQ\head = Null
  *engine\eventQ\tail = Null

  While (*ev)
    *nextEv.tuiEvent = *ev\next_
    If (*ev\target_ = *obj)
      *ev\flags = (*ev\flags | #TUIEVF_QUEUED) - #TUIEVF_QUEUED
      _ntui_DestroyEvent{*engine,*ev}
      If *prevEv Then *prevEv\next_ = *nextEv
    Else
      If *engine\eventQ\head=Null Then *engine\eventQ\head = *ev
      *engine\eventQ\tail = *ev
      *prevEv = *ev
    End If
    *ev = *nextEv
  Wend
  ReleaseSemaphore_ *engine\eventQ\lock

End Statement


_ntui_DefaultNotifyCallback:
Function.l _ntui_DefaultNotifyCallback{*obj.tuiObject,*ev.tuiEvent,*id.str}

  If *id ; if we have a notify value...
    *notify.tuiNotify = _ntui_CreateNotify{*obj,*ev,str_GetPtr{*id}}
    If *notify ; and for safety, the event must be valid
      _ntui_QueueNotify{*obj\engine\notifyQ,*notify} ; and queue it to the out queue
      ;Function Return True ; tell we have used this event up
      ; sending out an notify doesnt mean the event is eaten up, e.g. onKey
    End If
  End If

  Function Return False

End Function



