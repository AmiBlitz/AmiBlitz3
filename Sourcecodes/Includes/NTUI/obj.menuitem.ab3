; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 4
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 161
; CursorColumn    = 20
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_menu.include                                                     /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
optimize 7
Syntax 2
CEND

#TUI_HAS_MENUITEM = 1

;/* menu item subclassIDs */
#TUIMENU_ITEM      = 1
#TUIMENU_SUBMENU   = 2
#TUIMENU_POPUP     = 3
#TUIMENU_DROPDOWN  = 4
#TUIMENU_SEPERATOR = 5


#TUIMIA_BASE               =  #TUIA_USER
#TUIMIA_IMAGE              =  0 | #TUIMIA_BASE ; rw
#TUIMIA_TOGGLE             =  1 | #TUIMIA_BASE ; rw

NEWTYPE.tuiMenuItem
obj.tuiObject
subClassID.l

*tbi.tuiTBImage
*link_.tuiTBImage
*alt.tuiTBImage
*shift.tuiTBImage
*amiga_.tuiTBImage
*ctrl.tuiTBImage

*subTuiWin.tuiWindow
;*masterTuiWin.tuiWindow
subSize.tuiPixel
shortkey.l
shortqual.l
*shortcut.str
state.l           ; menuitem is pressed/open
sticky.l
tickCount.l
tickDelay.l
End NEWTYPE


_ntui_SetMenuItemAttr:
Function.w _ntui_SetMenuItemAttr{*tuiMenuItem.tuiMenuItem,ti_Tag.l,ti_Data.l}
  !_ASSERT{*tuiMenuItem}
  !_ASSERT{*tuiMenuItem\obj\classID=#TUICLASS_MENUITEM}

  done.w = True

  *rp.RastPort = ntui_ObtainRastPort{*tuiMenuItem}

  Select ti_Tag
    Case #TUIMIA_IMAGE : ;...
    Default
      done = False
  End Select

  If *rp Then ntui_ReleaseRastPort{*tuiMenuItem}

  Function Return done
End Function


_ntui_GetMenuItemAttr:
Function.w _ntui_GetMenuItemAttr{*tuiMenuItem.tuiMenuItem,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*tuiMenuItem}
  !_ASSERT{*tuiMenuItem\obj\classID=#TUICLASS_MENUITEM}

  done.w = True
  Select ti_Tag
    Case #TUIMIA_IMAGE          : *ti_Data\l = 0 ; todo
    Default
      done = False
  End Select

  Function Return done
End Function

Statement _ntui_CloseMenuWindow{*menuWindow.tuiWindow}
ntui_HideWindow{*menuWindow}
ntui_SetFocus{*menuWindow}
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_CloseMenuOptions {*tuiMenuItem.tuiMenuItem}                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiMenuItem.tuiMenuItem    : ???                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_CloseAllSubMenuOptions{*tui.tuiObject}

  !_ASSERT{*tui}

  If *tui\classID=#TUICLASS_MENUITEM
    *subMenuItem.tuiMenuItem = *tui
    If *subMenuItem\subTuiWin
      _ntui_CloseMenuWindow{*subMenuItem\subTuiWin}
      *subMenuItem\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
      *subMenuItem\state=0
      *subMenuItem\sticky=False
    End If
  End If

  *child.tuiObject = *tui\child
  While *child
    _ntui_CloseAllSubMenuOptions{*child}
    *child = *child\next_
  Wend

End Statement



Statement _ntui_CloseMenuOptions{*tuiMenuItem.tuiMenuItem,all.w}

  !_ASSERT{*tuiMenuItem}
  !_ASSERT{*tuiMenuItem\obj\classID=#TUICLASS_MENUITEM}

  *menuWin.tuiWindow = ntui_GetObjectWindow{*tuiMenuItem}

  _ntui_CloseAllSubMenuOptions{*menuWin}

  *tuiMenuItem\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
  *tuiMenuItem\state=0

  If all
    *tui.tuiObject = *menuWin\obj\parent
    While *tui><#NULL
      If *tui\classID=#TUICLASS_MENUITEM
        *tuiMenuItem = *tui
        If *tuiMenuItem\subTuiWin
          _ntui_CloseMenuWindow{*tuiMenuItem\subTuiWin}
        End If
        *tuiMenuItem\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
        *tuiMenuItem\state=0
        ntui_Refresh{*tuiMenuItem,#NULL}
      End If
      *tui = *tui\parent
    Wend
  End If

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_OpenMenuOptions {*tuiMenuItem.tuiMenuItem}                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiMenuItem.tuiMenuItem    : ???                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_OpenMenuOptions{*tuiMenuItem.tuiMenuItem,*rootWin.tuiWindow}

  !_ASSERT{*tuiMenuItem}
  !_ASSERT{*tuiMenuItem\obj\classID=#TUICLASS_MENUITEM}

  *tuiEngine.tuiEngine = *tuiMenuItem\obj\tuiEngine

  If *rootWin=#NULL Then Statement Return
  If *rootWin\oswin=#NULL Then Statement Return

  *menuWin.tuiWindow = ntui_GetObjectWindow{*tuiMenuItem}
  If *menuWin\oswin=#NULL Then Statement Return

  *subWin.tuiWindow = *tuiMenuItem\subTuiWin
  If *subWin=#NULL Then Statement Return
  If *subWin\oswin Then Statement Return

  xs.l = !tuiRectWidth{*subWin\obj\bbox}
  ys.l = !tuiRectHeight{*subWin\obj\bbox}

  Select *tuiMenuItem\subClassID
    Case #TUIMENU_DROPDOWN
      x.l = *tuiMenuItem\obj\bbox\left        + *menuWin\oswin\LeftEdge
      y.l = *tuiMenuItem\obj\bbox\bottom   +1 + *menuWin\oswin\TopEdge
    Case #TUIMENU_POPUP
      x.l = *tuiMenuItem\obj\bbox\left        + *menuWin\oswin\LeftEdge
      y.l = *tuiMenuItem\obj\bbox\top     -ys + *menuWin\oswin\TopEdge
    Case #TUIMENU_SUBMENU
      x.l = *tuiMenuItem\obj\bbox\right    +1 + *menuWin\oswin\LeftEdge
      y.l = *tuiMenuItem\obj\bbox\top         + *menuWin\oswin\TopEdge
    Default
      x.l = 0
      y.l = 0
  End Select

  ntui_ShowWindow{*subWin,x,y,*rootWin}
  ;*rootWin\oswin\Flags | #WFLG_MENUSTATE
  ntui_SetFocus{*tuiMenuItem}

End Statement


Statement _ntui_ActivateMenuItem{*tuiMenuItem.tuiMenuItem,*tuiEvent.tuiEvent}

  If *tuiMenuItem\subTuiWin
    *rootWin.tuiWindow = ntui_GetObjectWindow{*tuiEvent\tuiObject}
    _ntui_OpenMenuOptions{*tuiMenuItem,*rootWin}
  End If

  *tuiMenuItem\obj\flags | #TUIF_ACTIVE
  *tuiMenuItem\state = 1
  *tuiMenuItem\tickCount = 0
  ntui_Refresh{*tuiMenuItem,#NULL}

End Statement

Statement _ntui_DeactivateMenuItem{*tuiMenuItem.tuiMenuItem}
  *tuiMenuItem\obj\flags | #TUIF_ACTIVE - #TUIF_ACTIVE
  *tuiMenuItem\state = 0
  ntui_Refresh{*tuiMenuItem,#NULL}
  If *tuiMenuItem\subTuiWin
    _ntui_CloseMenuOptions{*tuiMenuItem,False}
  End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = _ntui_HandleMenuItemx {*tuiMenuItem.tuiMenuItem,*tuiEv:: /
;/ ent.tuiEvent}                                                               /
;/                                                                             /
;/ Description:                                                                /
;/     ; we are not interessted in any other events                            /
;/ * do what happens if the user operates a MenuItem */                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiMenuItem.tuiMenuItem    : ???                                         /
;/ - *tuiEvent.tuiEvent    : ???                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DispatchMenuItemEvent:
Function.w _ntui_DispatchMenuItemEvent{*tuiMenuItem.tuiMenuItem,*tuiEvent.tuiEvent}

  !_ASSERT{*tuiMenuItem}
  !_ASSERT{*tuiMenuItem\obj\classID=#TUICLASS_MENUITEM}

  *tuiEngine.tuiEngine = *tuiMenuItem\obj\tuiEngine
  !_ASSERT{*tuiEngine}
  *tui.tuiObject = *tuiMenuItem
  !_ASSERT{*tuiEvent}
  done.w = False

  If *tuiMenuItem\subTuiWin
    If *tuiMenuItem\subTuiWin\oswin
      *tuiWindow.tuiWindow = ntui_GetObjectWindow{*tuiMenuItem}
      If *tuiWindow
        If *tuiWindow\oswin
          x.l = *tuiEvent\pos\x + *tuiWindow\oswin\LeftEdge - *tuiMenuItem\subTuiWin\oswin\LeftEdge
          y.l = *tuiEvent\pos\y + *tuiWindow\oswin\TopEdge  - *tuiMenuItem\subTuiWin\oswin\TopEdge
          ox.l = *tuiEvent\pos\x
          oy.l = *tuiEvent\pos\y
          *tuiEvent\pos\x = x
          *tuiEvent\pos\y = y
          If _ntui_DispatchWindowEvent{*tuiMenuItem\subTuiWin,*tuiEvent}
            Function Return True
          End If
          *tuiEvent\pos\x = ox
          *tuiEvent\pos\y = oy
        End If
      End If
    End If
  End If

  Select *tuiEvent\evID
    Case #TUIEV_MOUSEDOWN:
      If *tuiEvent\value = 0 ; we want button 0
        If !tuiRectHit{*tuiMenuItem\obj\bbox,*tuiEvent\pos\x,*tuiEvent\pos\y}
          _ntui_ActivateMenuItem{*tuiMenuItem,*tuiEvent}
          str_Dup{&*tuiEvent\notifyID,*tuiMenuItem\obj\onTouch}
          done = True
        End If
      End If

    Case #TUIEV_MOUSEUP:
      If *tuiEvent\value = 0 ; we want button 0
        ;Select *tuiMenuItem\state
        ;  Case 1
            If !tuiRectHit{*tuiMenuItem\obj\bbox,*tuiEvent\pos\x,*tuiEvent\pos\y}
              str_Dup{&*tuiEvent\notifyID,*tuiMenuItem\obj\onClick}
              If *tuiMenuItem\subTuiWin=#NULL
                _ntui_CloseMenuOptions{*tuiMenuItem,True}
                _ntui_DeactivateMenuItem{*tuiMenuItem}
                str_Dup{&*tuiEvent\notifyID,*tuiMenuItem\obj\onClick}
                *tuiMenuItem\state = 0
                *tuiMenuItem\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
              Else
                *tuiMenuItem\sticky = True
              End If
              done    = True
            Else
              str_Dup{&*tuiEvent\notifyID,*tuiMenuItem\obj\onRelease}
              _ntui_CloseMenuOptions{*tuiMenuItem,True}
              *tuiMenuItem\state = 0
              *tuiMenuItem\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
            End If

            ntui_Refresh{*tuiMenuItem,#NULL}
        ;End Select
      End If

    Case #TUIEV_MOUSEMOVE:
      ;If *tuiMenuItem\obj\flags&#TUIF_DISABLED=0
      *menuWin.tuiWindow = ntui_GetObjectWindow{*tuiMenuItem}
      If *menuWin\oswin
        If !tuiRectHit{*menuWin\obj\bbox,*tuiEvent\pos\x,*tuiEvent\pos\y}

          If str_Read{&*tuiMenuItem\obj\nameID}="stop"
            ;Stop
          End If

          Select *tuiMenuItem\subClassID
             Case #TUIMENU_SUBMENU
               If !tuiRectHit{*tuiMenuItem\obj\bbox,*tuiEvent\pos\x,*tuiEvent\pos\y}
                 _ntui_ActivateMenuItem{*tuiMenuItem,*tuiEvent}
                 done=True
               Else
                 *mover.tuiObject = ntui_HitObject{*menuWin,*tuiEvent\pos\x,*tuiEvent\pos\y}
                 If *mover
                   If *mover\classID = #TUICLASS_MENUITEM
                     _ntui_DeactivateMenuItem{*tuiMenuItem}
                   End If
                 End If
               End If

             Default
               If !tuiRectHit{*tuiMenuItem\obj\bbox,*tuiEvent\pos\x,*tuiEvent\pos\y}
                 ;done=True
               End If
               If *tuiMenuItem\state Then done=True

          End Select
        End If
      End If
      ;End If

    Case #TUIEV_KEYDOWN:
      Select *tuiEvent\value
        Case #RAWKEY_RETURN
          If *tuiMenuItem\state=0
            _ntui_ActivateMenuItem{*tuiMenuItem,*tuiEvent}
          Else
            _ntui_DeactivateMenuItem{*tuiMenuItem}
            If *tuiMenuItem\subTuiWin=#NULL
              str_Dup{&*tuiEvent\notifyID,*tuiMenuItem\obj\onClick}
              _ntui_CloseMenuOptions{*tuiMenuItem,True}
            End If
          End If
          done=True

      End Select


    Case #TUIEV_LOSEFOCUS
      If *tuiMenuItem\subTuiWin
        _ntui_CloseMenuOptions{*tuiMenuItem,True}
        _ntui_DeactivateMenuItem{*tuiMenuItem}
      End If
      done=True

    Case #TUIEV_FOCUS
       ;_ntui_ActivateMenuItem{*tuiMenuItem,*tuiEvent}

  End Select

  If done
    If (*tuiEvent\notifyID)
      *tuiEvent\tuiObject = *tuiMenuItem
      _ntui_QueueEvent{*tuiMenuItem\obj\tuiEngine\outQ,*tuiEvent}
    Else
      _ntui_DestroyEvent{*tuiEvent}
    End If
  End If


Function Return done
End Function

;If *tuiMenuItem\subTuiWin
;  If (*tuiMenuItem\obj\flags&#TUIF_ACTIVE)
;    If *tuiMenuItem\subTuiWin\oswin = #NULL
;      _ntui_OpenMenuOptions{*tuiMenuItem}
;    End If
;  Else
;    If *tuiMenuItem\subTuiWin\oswin Then _ntui_CloseMenuOptions{*tuiMenuItem}
;  End If
;End If


;If *tuiMenuItem\subTuiWin ; are we in a subwindow?
;  inSubWin.l = False
;  *hit.tuiMenuItem=#NULL
;  If *tuiMenuItem\subTuiWin\oswin ; subwindow is open...
;    *active.tuiMenuItem = *tuiMenuItem\subTuiWin\active
;    If *active Then If *active\obj\typeID><#TUIOBJ_MENUITEM Then *active=#NULL
;    *focus.tuiMenuItem = *tuiMenuItem\subTuiWin\focus
;    If *focus Then If *focus\obj\typeID><#TUIOBJ_MENUITEM Then *focus=#NULL
;
;    x.l = !tuiev_ScreenX - *tuiMenuItem\subTuiWin\oswin\LeftEdge
;    y.l = !tuiev_ScreenY - *tuiMenuItem\subTuiWin\oswin\TopEdge
;
;    If x>=0 AND y>=0 AND x<*tuiMenuItem\subTuiWin\oswin\Width AND y<*tuiMenuItem\subTuiWin\oswin\Height ; our pointer is in the subwindow
;      *hit=ntui_HitObject{*tuiMenuItem\subTuiWin\obj\child,x,y} ; hit which object?
;      If *hit\obj\typeID><#TUIOBJ_MENUITEM Then *hit=#NULL
;      inSubWin=True
;    Else
;      If *focus
;        done.w = _ntui_HandleMenuItem{*focus,*tuiEvent}
;      End If
;    End If
;
;    If *hit=#NULL ;nothing hit?
;      ;*hit=*active
;    End If
;    If *hit
;      If *hit\obj\typeID = #TUIOBJ_MENUITEM ; it's a menu item!
;        done.w = _ntui_HandleMenuItem{*hit,*tuiEvent}
;      End If
;    End If
;  End If
;  If release=False Then If inSubWin OR done Then Function Return True
;End If
;
;x.l = !tuiev_ScreenX - *tuiMenuItem\obj\tuiWindow\oswin\LeftEdge
;y.l = !tuiev_ScreenY - *tuiMenuItem\obj\tuiWindow\oswin\TopEdge
;*mover.tuiMenuItem = ntui_HitObject{*tuiMenuItem\obj\tuiWindow,x,y}
;
;done=False
;Select *tuiMenuItem\subTypeID
;  Case #TUIMENU_ITEM
;    If release ; we release mousebutton over MenuItem => close
;      If *mover=*tuiMenuItem
;        *tuiEvent\notify = *tuiMenuItem\obj\notify
;      Else
;        *tuiEvent\notify = #NOTIFY_NOTHING
;      End If
;      done=False
;      ; we came from a submenu item, so tell it to close
;    End If
;
;    If press
;      If *mover=*tuiMenuItem
;        _ntui_SetFocus{*tuiMenuItem\obj\tuiWindow,*tuiMenuItem}
;        _ntui_SetActive{*tuiMenuItem\obj\tuiWindow,#NULL }
;        done=True ; activate and do nothing else
;      Else
;        If *tuiMenuItem\obj\tuiWindow\focus=*tuiMenuItem
;          _ntui_SetFocus{*tuiMenuItem\obj\tuiWindow,#NULL}
;          _ntui_SetActive{*tuiMenuItem\obj\tuiWindow,#NULL }
;        End If
;      End If
;    End If
;
;  Default ; submenu
;    If release
;      If *tuiMenuItem\sticky=False
;        _ntui_CloseMenuOptions{*tuiMenuItem}
;        done=False
;      Else
;        done=True  ; release over activated submenu
;        *tuiMenuItem\sticky=False
;      End If
;    End If
;
;    If click
;      If *mover=*tuiMenuItem
;        *tuiMenuItem\sticky=True ; active submenu to become sticky
;        _ntui_SetFocus{*tuiMenuItem\obj\tuiWindow,*tuiMenuItem}
;        _ntui_OpenMenuOptions{*tuiMenuItem}
;        done=True
;      End If
;    End If
;
;    If click=False AND release=False
;      If *mover=*tuiMenuItem
;        _ntui_SetFocus{*tuiMenuItem\obj\tuiWindow,*tuiMenuItem}
;        If press><0 OR True
;          _ntui_OpenMenuOptions{*tuiMenuItem}
;        End If
;      Else
;        If *mover
;          If *mover\obj\typeID=#TUIOBJ_MENUITEM
;            _ntui_CloseMenuOptions{*tuiMenuItem}
;            If *mover\subTypeID=#TUIMENU_ITEM
;              _ntui_SetFocus {*tuiMenuItem\obj\tuiWindow,*mover}
;            Else
;              _ntui_OpenMenuOptions{*mover}
;            End If
;          End If
;        End If
;      End If
;    End If
;End Select
;Function Return done
;End Function
;
;

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawMenuItem {*tuiMenuItem.tuiMenuItem,*rp.RastPort}           /
;/                                                                             /
;/ Description:                                                                /
;/     ; we are not interessted in any other events                            /
;/       *hit=ntui_HitObject{*tuiMenuItem\subTuiWin\obj\child,x,y} ; hit whi:: /
;/ ch object?                                                                  /
;/       ;*hit=*active                                                         /
;/       ; we came from a submenu item, so tell it to close                    /
;/ * draw the Menu in all its beauty */                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiMenuItem.tuiMenuItem    : ???                                         /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawMenuItem:
Statement _ntui_DrawMenuItem{*tuiMenuItem.tuiMenuItem,*rp.RastPort,*clip.tuiRect}

  !_ASSERT{*tuiMenuItem}
  !_ASSERT{*tuiMenuItem\obj\classID=#TUICLASS_MENUITEM}

  *tuiEngine.tuiEngine = *tuiMenuItem\obj\tuiEngine
  !_ASSERT{*tuiEngine}
  *tui.tuiObject = *tuiMenuItem

  If (*tui\borderType><#TUIBORDER_NONE)
    bgDone.l = ntui_DrawBorder{*tuiEngine,*rp,*tui\bbox,*tui\borderType,*tui\flags}
  End If

  If *tuiMenuItem\state=1 ;OR *tuiMenuItem\obj\flags&#TUIF_MOVER
    bgpen.l = #TUIPEN_MARKER
    fgpen.l = #TUIPEN_ACTIVETEXT
  Else
    If *tuiMenuItem\obj\borderType=#TUIBORDER_BUTTON AND bgDone=False
      bgpen=#TUIPEN_HALFSHINE
    Else
      bgpen.l = #TUIPEN_TRANSPARENT
    End If
    fgpen.l = #TUIPEN_TEXT
  End If

  !tuiCopyRect{cbox.tuiRect,*tui\cbox}
  !tuiCopyRect{ibox.tuiRect,*tui\ibox}

  x1.l = ibox\left
  x2.l = ibox\right

  If *tuiMenuItem\link_
    ibox\left  = x2-ntui_GetTBImageWidth{*tuiMenuItem\link_}+1 - !tuiBorderWidth{*tui\padding}
    ibox\right = x2
    ntui_DrawTBImage{*tuiMenuItem\link_,*rp,ibox,ibox,*tui\flags,bgpen}
    x2 = ibox\left-1
  End If

  If *tuiMenuItem\shortcut
    tuifont.l = _ntui_SetFont{*tuiEngine,*tui\flags}
    _ntui_GetTextRect{*tuiEngine,*tuiMenuItem\shortcut,tx.tuiRect,*tui\flags,*rp}
    xs.l = !tuiRectWidth{tx}
    ;If xs<*tuiEngine\font[tuifont]\tf_YSize Then xs=*tuiEngine\font[tuifont]\tf_YSize
    ibox\left  = x2-xs+1 - !tuiBorderWidth{*tui\padding}
    ibox\right = x2
    _ntui_Print{*tuiEngine,*tuiMenuItem\shortcut,ibox,ibox,(*tuiMenuItem\obj\flags|#TUIF_CENTER|#TUIF_LEFT)-#TUIF_LEFT,*rp,fgpen,bgpen}
    x2 = ibox\left-1
  End If

  If *tuiMenuItem\amiga_
    ibox\left  = x2-ntui_GetTBImageWidth{*tuiMenuItem\amiga_}+1
    ibox\right = x2
    ntui_DrawTBImage{*tuiMenuItem\amiga_,*rp,ibox,ibox,*tuiMenuItem\obj\flags,bgpen}
    x2 = ibox\left-1
  End If

  If *tuiMenuItem\alt
    ibox\left  = x2-ntui_GetTBImageWidth{*tuiMenuItem\alt}+1
    ibox\right = x2
    ntui_DrawTBImage{*tuiMenuItem\alt,*rp,ibox,ibox,*tuiMenuItem\obj\flags,bgpen}
    x2 = ibox\left-1
  End If

  If *tuiMenuItem\ctrl
    ibox\left  = x2-ntui_GetTBImageWidth{*tuiMenuItem\ctrl}+1
    ibox\right = x2
    ntui_DrawTBImage{*tuiMenuItem\ctrl,*rp,ibox,ibox,*tuiMenuItem\obj\flags,bgpen}
    x2 = ibox\left-1
  End If

  If *tuiMenuItem\shift
    ibox\left  = x2-ntui_GetTBImageWidth{*tuiMenuItem\shift}+1
    ibox\right = x2
    ntui_DrawTBImage{*tuiMenuItem\shift,*rp,ibox,ibox,*tuiMenuItem\obj\flags,bgpen}
    x2 = ibox\left-1
  End If

  If *tuiMenuItem\tbi
    ibox\left  = x1
    If *tuiMenuItem\obj\string
      ibox\right = x1+ntui_GetTBImageWidth{*tuiMenuItem\tbi}-1 + !tuiBorderWidth{*tui\padding}
    Else
      ibox\right = x2
    End If
    ntui_DrawTBImage{*tuiMenuItem\tbi,*rp,ibox,ibox,*tui\flags,bgpen}
    x1 = ibox\right+1
  End If

  If *tuiMenuItem\obj\string
    ibox\left  = x1
    ibox\right = x2
    cbox\left  = ibox\left + *tui\padding\left
    cbox\right = ibox\right - *tui\padding\right
    _ntui_Print{*tuiEngine,*tuiMenuItem\obj\string,ibox,cbox,*tuiMenuItem\obj\flags,*rp,fgpen,bgpen}
  End If

End Statement




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetMenuItemMinSize {*tuiMenuItem.tuiMenuItem,*rp:: /
;/ .RastPort}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * calculate the minimum size for the Menu */                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiMenuItem.tuiMenuItem    : ???                                         /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_CalculateMenuItemMinSize:
Function.l _ntui_CalculateMenuItemMinSize{*tuiMenuItem.tuiMenuItem,*rp.RastPort}

  !_ASSERT{*tuiMenuItem}
  !_ASSERT{*tuiMenuItem\obj\classID=#TUICLASS_MENUITEM}

  *tuiEngine.tuiEngine = *tuiMenuItem\obj\tuiEngine
  !_ASSERT{*tuiEngine}
  *tui.tuiObject = *tuiMenuItem

  _ntui_GetBorderSize{*tuiEngine,*tui\borderType,*tui\flags,*tui\border}

  *tui\minsize\x  = 0
  *tui\minsize\y  = 0


  If *tui\string
    _ntui_GetTextRect{*tuiEngine,*tui\string,tx.tuiRect,*tui\flags,*rp}
    *tui\minsize\x  = !tuiRectWidth{tx} + !tuiBorderWidth{*tui\padding}
    *tui\minsize\y  = !tuiRectHeight{tx}
  End If

  If *tuiMenuItem\shortcut
    _ntui_GetTextRect{*tuiEngine,*tuiMenuItem\shortcut,tx.tuiRect,*tui\flags,*rp}
    *tui\minsize\x  + !tuiRectWidth{tx} + !tuiBorderWidth{*tui\padding}
    If !tuiRectHeight{tx}>*tui\minsize\y Then *tui\minsize\y = !tuiRectHeight{tx}
  End If

  If *tuiMenuItem\tbi
    *tui\minsize\x + ntui_GetTBImageWidth{*tuiMenuItem\tbi} + !tuiBorderWidth{*tui\padding}
    If (ntui_GetTBImageHeight{*tuiMenuItem\tbi}>*tui\minsize\y) Then *tui\minsize\y =  ntui_GetTBImageHeight{*tuiMenuItem\tbi}
  End If

  If *tuiMenuItem\ctrl
    *tui\minsize\x + ntui_GetTBImageWidth{*tuiMenuItem\ctrl} + !tuiBorderWidth{*tui\padding}
    If (ntui_GetTBImageHeight{*tuiMenuItem\ctrl}>*tui\minsize\y) Then *tui\minsize\y =  ntui_GetTBImageHeight{*tuiMenuItem\ctrl}
  End If

  If *tuiMenuItem\shift
    *tui\minsize\x + ntui_GetTBImageWidth{*tuiMenuItem\shift} + !tuiBorderWidth{*tui\padding}
    If (ntui_GetTBImageHeight{*tuiMenuItem\shift}>*tui\minsize\y) Then *tui\minsize\y =  ntui_GetTBImageHeight{*tuiMenuItem\shift}
  End If

  If *tuiMenuItem\alt
    *tui\minsize\x + ntui_GetTBImageWidth{*tuiMenuItem\alt} + !tuiBorderWidth{*tui\padding}
    If (ntui_GetTBImageHeight{*tuiMenuItem\alt}>*tui\minsize\y) Then *tui\minsize\y =  ntui_GetTBImageHeight{*tuiMenuItem\alt}
  End If

  If *tuiMenuItem\amiga_
    *tui\minsize\x + ntui_GetTBImageWidth{*tuiMenuItem\amiga_} + !tuiBorderWidth{*tui\padding}
    If (ntui_GetTBImageHeight{*tuiMenuItem\amiga_}>*tui\minsize\y) Then *tui\minsize\y =  ntui_GetTBImageHeight{*tuiMenuItem\amiga_}
  End If

  If *tuiMenuItem\link_
    *tui\minsize\x + ntui_GetTBImageWidth{*tuiMenuItem\link_} + !tuiBorderWidth{*tui\padding}
    If (ntui_GetTBImageHeight{*tuiMenuItem\link_}>*tui\minsize\y) Then *tui\minsize\y =  ntui_GetTBImageHeight{*tuiMenuItem\link_}
  End If

  If *tuiMenuItem\subTuiWin
    _ntui_CalculateMinSize{*tuiMenuItem\subTuiWin,*rp}
  End If

  *tui\minsize\x + !tuiBorderWidth{*tui\border}
  *tui\minsize\y + !tuiBorderHeight{*tui\padding} + !tuiBorderHeight{*tui\border}

  Function Return *tuiMenuItem\obj\minsize

End Function


_ntui_LayoutMenuItem:
Statement _ntui_LayoutMenuItem{*tuiMenuItem.tuiMenuItem,*rp.RastPort,*bbox.tuiRect}

  !_ASSERT{*tuiMenuItem}
  !_ASSERT{*tuiMenuItem\obj\classID=#TUICLASS_MENUITEM}
  !_ASSERT{*rp}
  *tui.tuiObject = *tuiMenuItem

  If *bbox
    !tuiCopyRect{*tui\bbox,*bbox}
  End If
  !tuiRemBorder{*tui\ibox,*tui\bbox,*tui\border}
  !tuiRemBorder{*tui\cbox,*tui\ibox,*tui\padding}

  If *tuiMenuItem\subTuiWin
    *child.tuiObject=*tuiMenuItem\subTuiWin\obj\child
    sbox.tuiRect\left = 0,0,*child\minsize\x,*child\minsize\y
    _ntui_Layout{*tuiMenuItem\subTuiWin,*rp,sbox}
  End If

End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeMenuItem {*tuiMenuItem.tuiMenuItem}                       /
;/                                                                             /
;/ Description:                                                                /
;/  If *tuiMenuItem\img\height >*tuiMenuItem\obj\minsize\y Then *tuiMenuItem:: /
;/ \obj\minsize\y = *tuiMenuItem\img\height                                    /
;/  If *tuiMenuItem\linkimg\height >*tuiMenuItem\obj\minsize\y Then *tuiMenu:: /
;/ Item\obj\minsize\y = *tuiMenuItem\linkimg\height                            /
;/  If *tuiMenuItem\ami\height >*tuiMenuItem\obj\minsize\y Then *tuiMenuItem:: /
;/ \obj\minsize\y = *tuiMenuItem\ami\height                                    /
;/  If *tuiMenuItem\ctrl\height >*tuiMenuItem\obj\minsize\y Then *tuiMenuIte:: /
;/ m\obj\minsize\y = *tuiMenuItem\ctrl\height                                  /
;/  If *tuiMenuItem\shift\height >*tuiMenuItem\obj\minsize\y Then *tuiMenuIt:: /
;/ em\obj\minsize\y = *tuiMenuItem\shift\height                                /
;/  If *tuiMenuItem\alt\height >*tuiMenuItem\obj\minsize\y Then *tuiMenuItem:: /
;/ \obj\minsize\y = *tuiMenuItem\alt\height                                    /
;/ * free everything special that we allocated for the Menu */                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiMenuItem.tuiMenuItem    : ???                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitMenuItem:
Statement _ntui_DeinitMenuItem{*tuiMenuItem.tuiMenuItem}

  !_ASSERT{*tuiMenuItem}
  !_ASSERT{*tuiMenuItem\obj\classID=#TUICLASS_MENUITEM}

  If *tuiMenuItem\tbi    Then ntui_FreeTBImage{*tuiMenuItem\tbi   }  : *tuiMenuItem\tbi    = #NULL
  If *tuiMenuItem\amiga_ Then ntui_FreeTBImage{*tuiMenuItem\amiga_}  : *tuiMenuItem\amiga_ = #NULL
  If *tuiMenuItem\ctrl   Then ntui_FreeTBImage{*tuiMenuItem\ctrl  }  : *tuiMenuItem\ctrl   = #NULL
  If *tuiMenuItem\alt    Then ntui_FreeTBImage{*tuiMenuItem\alt   }  : *tuiMenuItem\alt    = #NULL
  If *tuiMenuItem\shift  Then ntui_FreeTBImage{*tuiMenuItem\shift }  : *tuiMenuItem\shift  = #NULL
  If *tuiMenuItem\link_  Then ntui_FreeTBImage{*tuiMenuItem\link_ }  : *tuiMenuItem\link_  = #NULL

  If *tuiMenuItem\subTuiWin
   ; _ntui_CloseMenuOptions{*tuiMenuItem,False}
    ;ntui_HideWindow{*tuiMenuItem\subTuiWin}
    ;*tuiMenuItem\obj\child = *tuiMenuItem\subTuiWin
    ;*tuiMenuItem\subTuiWin = #NULL
  End If

End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_MenuItem {name.s,@imagefile.s,@short.s,@notify.l,:: /
;/ @help.s,@flags.l,@itemID.l}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/   ix2.l = x2-xs+1;-1- *tuiEngine\defPad\x                                   /
;/ * create function for tui Menu */                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - name.s    : ???                                                           /
;/ - imagefile.s    : ???                                                      /
;/ - short.s    : ???                                                          /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - itemID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_MenuItem{text.s,@image.s,@shortcut.s,@onClick.s,@help.s,@flags.l,@nameID.s}
If flags=#TUI_NOFLAGS Then flags=0
flags | #TUIF_LEFT|#TUIF_MIDDLE|#TUIF_FIXHEIGHT|#TUIF_WANTMOVER|#TUIF_FIXWIDTH
*tuiMenuItem.tuiMenuItem = _ntui_CreateObject{#TUICLASS_MENUITEM,SizeOf.tuiMenuItem,help,flags,nameID}
If *tuiMenuItem
  *tuiEngine.tuiEngine        = *tuiMenuItem\obj\tuiEngine
  *tuiMenuItem\subTuiWin      = #NULL
  *tuiMenuItem\link_          = #NULL
  *tuiMenuItem\tbi            = #NULL
  *tuiMenuItem\amiga_         = #NULL
  *tuiMenuItem\alt            = #NULL
  *tuiMenuItem\ctrl           = #NULL
  *tuiMenuItem\shift          = #NULL
;  *tuiMenuItem\masterTuiWin   = tuiGlobal\buildHelper\tuiRootWin
  *tuiMenuItem\subClassID     = #TUIMENU_ITEM
  *tuiMenuItem\obj\borderType = #TUIBORDER_TOOL
  *tuiMenuItem\shortqual      = 0
  *tuiMenuItem\shortkey       = 0
  *tuiMenuItem\shortcut       = #NULL
  str_Write{&*tuiMenuItem\obj\onClick,onClick}
;  *tuiMenuItem\obj\margin\left = 0,0,0,0
  str_Write{&*tuiMenuItem\obj\string,text}
  If image Then *tuiMenuItem\tbi = ntui_CreateTBImage{*tuiMenuItem\obj\tuiEngine,image,#TUISIZE_INLINE,#TUISIZE_INLINE}
  If shortcut
    If Instr(shortcut,"RAMIGA+") Then *tuiMenuItem\shortqual|#TUIQUAL_RCOM    : shortcut=Replace$(shortcut,"RAMIGA+","")
    If Instr(shortcut,"LAMIGA+") Then *tuiMenuItem\shortqual|#TUIQUAL_LCOM    : shortcut=Replace$(shortcut,"LAMIGA+","")
    If Instr(shortcut,"AMIGA+")  Then *tuiMenuItem\shortqual|#TUIQUAL_COM     : shortcut=Replace$(shortcut,"AMIGA+" ,"")
    If Instr(shortcut,"CTRL+")   Then *tuiMenuItem\shortqual|#TUIQUAL_CTRL    : shortcut=Replace$(shortcut,"CTRL+"  ,"")
    If Instr(shortcut,"RALT+")   Then *tuiMenuItem\shortqual|#TUIQUAL_RALT    : shortcut=Replace$(shortcut,"RALT+"  ,"")
    If Instr(shortcut,"LALT+")   Then *tuiMenuItem\shortqual|#TUIQUAL_LALT    : shortcut=Replace$(shortcut,"LALT+"  ,"")
    If Instr(shortcut,"ALT+")    Then *tuiMenuItem\shortqual|#TUIQUAL_ALT     : shortcut=Replace$(shortcut,"ALT+"   ,"")
    If Instr(shortcut,"RSHIFT+") Then *tuiMenuItem\shortqual|#TUIQUAL_RSHIFT  : shortcut=Replace$(shortcut,"RSHIFT+","")
    If Instr(shortcut,"LSHIFT+") Then *tuiMenuItem\shortqual|#TUIQUAL_LSHIFT  : shortcut=Replace$(shortcut,"LSHIFT+","")
    If Instr(shortcut,"SHIFT+")  Then *tuiMenuItem\shortqual|#TUIQUAL_SHIFT   : shortcut=Replace$(shortcut,"SHIFT+" ,"")
    shortcut=Replace$(shortcut,"++","")
    Select shortcut
      Case "ENTER" : *tuiMenuItem\shortkey = 13
      Case "SPACE" : *tuiMenuItem\shortkey = 32
      Case "DEL"   : *tuiMenuItem\shortkey = #RAWKEY_DEL
      Case "ESC"   : *tuiMenuItem\shortkey = #RAWKEY_ESC
      Case "BS"    : *tuiMenuItem\shortkey = #RAWKEY_BACKSPACE
      Case "F1"    : *tuiMenuItem\shortkey = #RAWKEY_F1
      Case "F2"    : *tuiMenuItem\shortkey = #RAWKEY_F2
      Case "F3"    : *tuiMenuItem\shortkey = #RAWKEY_F3
      Case "F4"    : *tuiMenuItem\shortkey = #RAWKEY_F4
      Case "F5"    : *tuiMenuItem\shortkey = #RAWKEY_F5
      Case "F6"    : *tuiMenuItem\shortkey = #RAWKEY_F6
      Case "F7"    : *tuiMenuItem\shortkey = #RAWKEY_F7
      Case "F8"    : *tuiMenuItem\shortkey = #RAWKEY_F8
      Case "F9"    : *tuiMenuItem\shortkey = #RAWKEY_F9
      Default      : *tuiMenuItem\shortkey = Peek.b(&shortcut)
    End Select
    If (*tuiMenuItem\shortqual&(#TUIQUAL_COM))   = (#TUIQUAL_COM)   Then *tuiMenuItem\amiga_ = ntui_CreateTBImage{*tuiMenuItem\obj\tuiEngine,"AMIGA"  ,#TUISIZE_INLINE,#TUISIZE_INLINE}
    If (*tuiMenuItem\shortqual&(#TUIQUAL_ALT))   = (#TUIQUAL_ALT)   Then *tuiMenuItem\alt    = ntui_CreateTBImage{*tuiMenuItem\obj\tuiEngine,"ALT"    ,#TUISIZE_INLINE,#TUISIZE_INLINE}
    If (*tuiMenuItem\shortqual&(#TUIQUAL_SHIFT)) = (#TUIQUAL_SHIFT) Then *tuiMenuItem\shift  = ntui_CreateTBImage{*tuiMenuItem\obj\tuiEngine,"SHIFT"  ,#TUISIZE_INLINE,#TUISIZE_INLINE}
    If (*tuiMenuItem\shortqual&(#TUIQUAL_CTRL))  = (#TUIQUAL_CTRL)  Then *tuiMenuItem\ctrl   = ntui_CreateTBImage{*tuiMenuItem\obj\tuiEngine,"CTRL"   ,#TUISIZE_INLINE,#TUISIZE_INLINE}

    str_Write{&*tuiMenuItem\shortcut,shortcut}
  End If

  !_GetFuncPointer{*tuiMenuItem\obj\Draw            ,_ntui_DrawMenuItem,{0,0,0}}
  !_GetFuncPointer{*tuiMenuItem\obj\Layout          ,_ntui_LayoutMenuItem,{0,0,0}}
  !_GetFuncPointer{*tuiMenuItem\obj\DispatchEvent   ,_ntui_DispatchMenuItemEvent,{0,0}}
  !_GetFuncPointer{*tuiMenuItem\obj\CalculateMinSize,_ntui_CalculateMenuItemMinSize,{0,0}}
  !_GetFuncPointer{*tuiMenuItem\obj\Deinit          ,_ntui_DeinitMenuItem,{0}}
  !_GetFuncPointer{*tuiMenuItem\obj\SetAttr         ,_ntui_SetMenuItemAttr,{0,0,0}}
  !_GetFuncPointer{*tuiMenuItem\obj\GetAttr         ,_ntui_GetMenuItemAttr,{0,0,0}}

End If
Function Return *tuiMenuItem
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_BeginMenuTitle {name.s,@imagefile.s,@help.s,@flag:: /
;/ s.l,@itemID.l}                                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - name.s    : ???                                                           /
;/ - imagefile.s    : ???                                                      /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - itemID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
;#NTUI_MENUWFLGS = #WFLG_BORDERLESS|#WFLG_SIMPLE_REFRESH|#WFLG_NOCAREREFRESH
#NTUI_MENUWFLGS = #WFLG_BORDERLESS|#WFLG_SMART_REFRESH
Function.l ntui_BeginMenuTitle{text.s,@image.s,@help.s,@flags.l,@nameID.s}
*tuiMenuItem.tuiMenuItem = ntui_MenuItem{text,image,"","",help,flags,nameID}
If *tuiMenuItem
  *tuiMenuItem\subClassID          = #TUIMENU_DROPDOWN
  *tuiMenuItem\obj\borderType      = #TUIBORDER_TOOL
  *tuiMenuItem\link_               = #NULL

  _ntui_BeginChildren{*tuiMenuItem}
  *subWin.tuiWindow = ntui_BeginWindow{"","",0,#NTUI_MENUWFLGS, #TUIF_FIXSIZE}
  If *subWin
    *subWin\obj\padding\left = 0,0,0,0
    *group.tuiGroup = ntui_BeginVGroup{0,"","",#TUIF_FIXSIZE}
    If *group
      *group\obj\borderType = #TUIBORDER_RAISED
    End If
  End If
  *tuiMenuItem\subTuiWin   = *subWin

End If
Function Return *tuiMenuItem
End Function





;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_BeginDropDown {name.s,@imagefile.s,@help.s,@flags:: /
;/ .l,@itemID.l}                                                               /
;/                                                                             /
;/ Description:                                                                /
;/   *tuiMenuItem\linkimg             = #NULL;ntui_CreateTBImage{*tuiMenuIt:: /
;/ em\obj\tuiEngine,"ARROWDOWN",#TUISIZE_KNOB,#TUISIZE_KNOB}                   /
;/ * create function for tui Menu */                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - name.s    : ???                                                           /
;/ - imagefile.s    : ???                                                      /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - itemID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_BeginDropDown{text.s,@image.s,@help.s,@flags.l,@nameID.s}
*tuiMenuItem.tuiMenuItem = ntui_MenuItem{text,image,"","",help,flags,nameID}
If *tuiMenuItem
  *tuiMenuItem\subClassID   = #TUIMENU_DROPDOWN
  *tuiMenuItem\obj\borderType = #TUIBORDER_BUTTON
  *tuiMenuItem\link_    = ntui_CreateTBImage{*tuiMenuItem\obj\tuiEngine,"DROPDOWN",#TUISIZE_KNOB,#TUISIZE_KNOB}

  _ntui_BeginChildren{*tuiMenuItem}
  *subWin.tuiWindow = ntui_BeginWindow{"","",0,#NTUI_MENUWFLGS, #TUIF_FIXSIZE}
  If *subWin
    *subWin\obj\padding\left = 0,0,0,0
    *group.tuiGroup = ntui_BeginVGroup{0,"","",#TUIF_FIXSIZE}
    If *group
      *group\obj\borderType = #TUIBORDER_RAISED
    End If
  End If
  *tuiMenuItem\subTuiWin   = *subWin
End If
Function Return *tuiMenuItem
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_BeginPopUp {name.s,@imagefile.s,@help.s,@flags.l,:: /
;/ @itemID.l}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * create function for tui Menu */                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - name.s    : ???                                                           /
;/ - imagefile.s    : ???                                                      /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - itemID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_BeginPopUp{text.s,@image.s,@help.s,@flags.l,@nameID.s}
*tuiMenuItem.tuiMenuItem = ntui_MenuItem{text,image,"","",help,flags,nameID}
If *tuiMenuItem
  *tuiMenuItem\subClassID   = #TUIMENU_POPUP
  *tuiMenuItem\obj\borderType = #TUIBORDER_BUTTON
  *tuiMenuItem\link_ = ntui_CreateTBImage{*tuiMenuItem\obj\tuiEngine,"POPUP",#TUISIZE_KNOB,#TUISIZE_KNOB}

  _ntui_BeginChildren{*tuiMenuItem}
  *subWin.tuiWindow = ntui_BeginWindow{"","",0,#NTUI_MENUWFLGS, #TUIF_FIXSIZE}
  If *subWin
    *subWin\obj\padding\left = 0,0,0,0
    *group.tuiGroup = ntui_BeginVGroup{0,"","",#TUIF_FIXSIZE}
    If *group
      *group\obj\borderType = #TUIBORDER_RAISED
    End If
  End If
  *tuiMenuItem\subTuiWin   = *subWin

End If
Function Return *tuiMenuItem
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_BeginSubMenu {name.s,@imagefile.s,@help.s,@flags.:: /
;/ l,@itemID.l}                                                                /
;/                                                                             /
;/ Description:                                                                /
;/ * create function for tui Menu */                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - name.s    : ???                                                           /
;/ - imagefile.s    : ???                                                      /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - itemID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_BeginSubMenu{text.s,@image.s,@help.s,@flags.l,@nameID.s}
*tuiMenuItem.tuiMenuItem = ntui_MenuItem{text,image,"","",help,flags,nameID}
If *tuiMenuItem
  *tuiMenuItem\subClassID   = #TUIMENU_SUBMENU
  *tuiMenuItem\obj\borderType = #TUIBORDER_TOOL
  *tuiMenuItem\link_     = ntui_CreateTBImage{*tuiMenuItem\obj\tuiEngine,"RIGHT",#TUISIZE_KNOB,#TUISIZE_KNOB}

  _ntui_BeginChildren{*tuiMenuItem}
  *subWin.tuiWindow = ntui_BeginWindow{"","",0,#NTUI_MENUWFLGS, #TUIF_FIXSIZE}
  If *subWin
    *subWin\obj\padding\left = 0,0,0,0
    ;*subWin\obj\margin\left = 0,0,0,0
    *group.tuiGroup = ntui_BeginVGroup{0,"","",#TUIF_FIXSIZE}
    If *group
      *group\obj\borderType = #TUIBORDER_RAISED
    End If
  End If
  *tuiMenuItem\subTuiWin   = *subWin

End If
Function Return *tuiMenuItem
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_EndMenu {}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * end a group definition */                                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_EndMenu{}
ntui_EndGroup{}
ntui_EndWindow{}
*tuiMenuItem.tuiMenuItem = _ntui_EndChildren{#TUICLASS_MENUITEM}
Function Return *tuiMenuItem
End Function


