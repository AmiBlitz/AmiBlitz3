; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res,SDSTCP2.res,xpk.res,ttengine.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 4
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 908
; CursorColumn    = 23
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_menu.include                                                     /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#TUI_HAS_MENUITEM = 1

;/* menu item subclassIDs */
#TUIMENU_ITEM      = 1
#TUIMENU_SUBMENU   = 2
#TUIMENU_POPUP     = 3
#TUIMENU_DROPDOWN  = 4
;#TUIMENU_SEPERATOR = 5

#TUIMIA_BASE               = #TUIA_USER
#TUIMIA_IMAGE              = #TUIMIA_BASE + 0 ; rw
#TUIMIA_TOGGLE             = #TUIMIA_BASE + 1 ; rw
#TUIMIA_CHECKED            = #TUIA_VALUE      ; rw
#TUIMIA_SHORTCUT           = #TUIMIA_BASE + 2 ; rw
#TUIMIA_TEXT               = #TUIA_STRING
#TUIMIA_ONSELECT           = #TUIMIA_BASE + 3 ; rw
#TUIMIA_ONSELECTCB         = #TUIMIA_BASE + 4
#TUIMIA_SUBCLASSID         = #TUIMIA_BASE + 5

NEWTYPE.tuiMenuItem

  obj.tuiObject
  subClassID.l

  *tbi.tuiTBImage
  *link_.tuiTBImage
  *alt.tuiTBImage
  *shift.tuiTBImage
  *amiga_.tuiTBImage
  *ctrl.tuiTBImage

  *subTuiWin.tuiWindow
  ;*masterTuiWin.tuiWindow
  subSize.tuiPixel
  shortkey.l
  shortqual.l
  *shortcut.str
  state.l           ; menuitem is pressed/open
  sticky.l
  tickCount.l
  tickDelay.l

  onSelect.tuiNotifyHandler

End NEWTYPE


_ntui_SetMenuItemAttr:
Function.w _ntui_SetMenuItemAttr{*menuItem_.tuiMenuItem,ti_Tag.l,ti_Data.l}
  !_ASSERT{*menuItem_}
  !_ASSERT{*menuItem_\obj\classID=#TUICLASS_MENUITEM}

  done.w = True

  *rp.RastPort = ntui_ObtainRastPort{*menuItem_}

  Select ti_Tag
    Case #TUIMIA_TEXT   : str_WritePtr{&*menuItem_\obj\string,ti_Data}
    Case #TUIMIA_IMAGE
      If *menuItem_\tbi Then ntui_FreeTBImage{*menuItem_\tbi} : *menuItem_\tbi = Null
      If ti_Data Then *menuItem_\tbi = ntui_CreateTBImage{*menuItem_\obj\engine,Peek.s(ti_Data),#TUISIZE_INLINE,#TUISIZE_INLINE}

    Case #TUIMIA_SHORTCUT
      If ti_Data Then shortcut.s = Peek.s(ti_Data) : Else shortcut=""

      ; set the qualifiers
      *menuItem_\shortqual = 0
      If Instr(shortcut,"RAMIGA+") Then *menuItem_\shortqual|#TUIQUAL_RCOM    : shortcut=Replace$(shortcut,"RAMIGA+","")
      If Instr(shortcut,"LAMIGA+") Then *menuItem_\shortqual|#TUIQUAL_LCOM    : shortcut=Replace$(shortcut,"LAMIGA+","")
      If Instr(shortcut,"AMIGA+")  Then *menuItem_\shortqual|#TUIQUAL_COM     : shortcut=Replace$(shortcut,"AMIGA+" ,"")
      If Instr(shortcut,"CTRL+")   Then *menuItem_\shortqual|#TUIQUAL_CTRL    : shortcut=Replace$(shortcut,"CTRL+"  ,"")
      If Instr(shortcut,"RALT+")   Then *menuItem_\shortqual|#TUIQUAL_RALT    : shortcut=Replace$(shortcut,"RALT+"  ,"")
      If Instr(shortcut,"LALT+")   Then *menuItem_\shortqual|#TUIQUAL_LALT    : shortcut=Replace$(shortcut,"LALT+"  ,"")
      If Instr(shortcut,"ALT+")    Then *menuItem_\shortqual|#TUIQUAL_ALT     : shortcut=Replace$(shortcut,"ALT+"   ,"")
      If Instr(shortcut,"RSHIFT+") Then *menuItem_\shortqual|#TUIQUAL_RSHIFT  : shortcut=Replace$(shortcut,"RSHIFT+","")
      If Instr(shortcut,"LSHIFT+") Then *menuItem_\shortqual|#TUIQUAL_LSHIFT  : shortcut=Replace$(shortcut,"LSHIFT+","")
      If Instr(shortcut,"SHIFT+")  Then *menuItem_\shortqual|#TUIQUAL_SHIFT   : shortcut=Replace$(shortcut,"SHIFT+" ,"")
      shortcut=Replace$(shortcut,"++","")

      ; set the actual shortcut key
      Select shortcut
        Case "ENTER" : *menuItem_\shortkey = 13
        Case "SPACE" : *menuItem_\shortkey = 32
        Case "DEL"   : *menuItem_\shortkey = #RAWKEY_DEL
        Case "ESC"   : *menuItem_\shortkey = #RAWKEY_ESC
        Case "BS"    : *menuItem_\shortkey = #RAWKEY_BACKSPACE
        Case "F1"    : *menuItem_\shortkey = #RAWKEY_F1
        Case "F2"    : *menuItem_\shortkey = #RAWKEY_F2
        Case "F3"    : *menuItem_\shortkey = #RAWKEY_F3
        Case "F4"    : *menuItem_\shortkey = #RAWKEY_F4
        Case "F5"    : *menuItem_\shortkey = #RAWKEY_F5
        Case "F6"    : *menuItem_\shortkey = #RAWKEY_F6
        Case "F7"    : *menuItem_\shortkey = #RAWKEY_F7
        Case "F8"    : *menuItem_\shortkey = #RAWKEY_F8
        Case "F9"    : *menuItem_\shortkey = #RAWKEY_F9
        Default      : *menuItem_\shortkey = Peek.b(&shortcut)
      End Select

      ; free old images
      If (*menuItem_\amiga_) Then ntui_FreeTBImage{*menuItem_\amiga_} : *menuItem_\amiga_ = Null
      If (*menuItem_\alt   ) Then ntui_FreeTBImage{*menuItem_\alt   } : *menuItem_\alt    = Null
      If (*menuItem_\shift ) Then ntui_FreeTBImage{*menuItem_\shift } : *menuItem_\shift  = Null
      If (*menuItem_\ctrl  ) Then ntui_FreeTBImage{*menuItem_\ctrl  } : *menuItem_\ctrl   = Null

      ; set new images
      If (*menuItem_\shortqual&(#TUIQUAL_COM))   = (#TUIQUAL_COM)   Then *menuItem_\amiga_ = ntui_CreateTBImage{*menuItem_\obj\engine,"AMIGA"  ,#TUISIZE_INLINE,#TUISIZE_INLINE}
      If (*menuItem_\shortqual&(#TUIQUAL_ALT))   = (#TUIQUAL_ALT)   Then *menuItem_\alt    = ntui_CreateTBImage{*menuItem_\obj\engine,"ALT"    ,#TUISIZE_INLINE,#TUISIZE_INLINE}
      If (*menuItem_\shortqual&(#TUIQUAL_SHIFT)) = (#TUIQUAL_SHIFT) Then *menuItem_\shift  = ntui_CreateTBImage{*menuItem_\obj\engine,"SHIFT"  ,#TUISIZE_INLINE,#TUISIZE_INLINE}
      If (*menuItem_\shortqual&(#TUIQUAL_CTRL))  = (#TUIQUAL_CTRL)  Then *menuItem_\ctrl   = ntui_CreateTBImage{*menuItem_\obj\engine,"CTRL"   ,#TUISIZE_INLINE,#TUISIZE_INLINE}

      ; write shortcut string
      str_Write{&*menuItem_\shortcut,shortcut}

    Case #TUIMIA_ONSELECT   : str_WritePtr{&*menuItem_\onSelect\notifyID ,ti_Data}
    Case #TUIMIA_ONSELECTCB : *menuItem_\onSelect\callback = ti_Data
    Case #TUIMIA_SUBCLASSID : *menuItem_\subClassID = ti_Data
;    Case #TUIA_XMLATTR
;      *xmlA.tuiXmlAttr = ti_Data
;      Select Peek.s(*xmlA\nameP)
;        Case "checked"           : done=ntui_SetAttr{*menuItem_,#TUIMIA_CHECKED       ,*xmlA\value}
;        Case "image"             : done=ntui_SetAttr{*menuItem_,#TUIMIA_IMAGE         ,*xmlA\stringP}
;        Case "toggle"            : done=ntui_SetAttr{*menuItem_,#TUIMIA_TOGGLE        ,*xmlA\value}
;        Case "shortcut"          : done=ntui_SetAttr{*menuItem_,#TUIMIA_SHORTCUT      ,*xmlA\stringP}
;        Case "onselect"          : done=ntui_SetAttr{*menuItem_,#TUIMIA_ONSELECT      ,*xmlA\stringP}
;        Case "text"              : done=ntui_SetAttr{*menuItem_,#TUIMIA_TEXT          ,*xmlA\stringP}
;        Default
;          done = False
;       End Select
                                                                                                                                                                                                                                                         
    Default
      done = False
  End Select

  If *rp Then ntui_ReleaseRastPort{*menuItem_}

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_SetMenuItemAttr,{Null,0,0}}


_ntui_GetMenuItemAttr:
Function.w _ntui_GetMenuItemAttr{*menuItem_.tuiMenuItem,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*menuItem_}
  !_ASSERT{*menuItem_\obj\classID=#TUICLASS_MENUITEM}

  done.w = True
  Select ti_Tag
    Case #TUIMIA_IMAGE          : *ti_Data\l = 0 ; todo
    Case #TUIMIA_ONSELECT       : *ti_Data\l = str_GetPtr{*menuItem_\onSelect\notifyID}
    Case #TUIMIA_SUBCLASSID     : *ti_Data\l = *menuItem_\subClassID
    Case #TUIMIA_ONSELECTCB     : *ti_Data\l = *menuItem_\onSelect\callback
    Default
      done = False
  End Select

  Function Return done
End Function
!_MakeGlobalFuncPointer{_ntui_GetMenuItemAttr,{Null,0,Null}}


Statement _ntui_CloseMenuWindow{*menuWindow.tuiWindow}
ntui_HideWindow{*menuWindow}
ntui_SetFocus{*menuWindow}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_CloseMenuOptions {*menuItem_.tuiMenuItem}                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *menuItem_.tuiMenuItem    : ???                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_CloseAllSubMenuOptions{*obj.tuiObject}

  !_ASSERT{*obj}

  If *obj\classID=#TUICLASS_MENUITEM
    *subMenuItem.tuiMenuItem = (.tuiMenuItem)*obj
    If *subMenuItem\subTuiWin
      _ntui_CloseMenuWindow{*subMenuItem\subTuiWin}
      *subMenuItem\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
      *subMenuItem\state=0
      *subMenuItem\sticky=False
    End If
  End If

  *child.tuiObject = *obj\child
  While *child
    _ntui_CloseAllSubMenuOptions{*child}
    *child = *child\next_
  Wend

End Statement



Statement _ntui_CloseMenuOptions{*menuItem_.tuiMenuItem,all.w}

  !_ASSERT{*menuItem_}
  !_ASSERT{*menuItem_\obj\classID=#TUICLASS_MENUITEM}

  *menuWin.tuiWindow = ntui_GetObjectWindow{*menuItem_}

  _ntui_CloseAllSubMenuOptions{*menuWin}

  *menuItem_\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
  *menuItem_\state=0

  If all
    *obj.tuiObject = *menuWin\obj\parent
    While *obj><Null
      If *obj\classID=#TUICLASS_MENUITEM
        *menuItem_ = (.tuiMenuItem)*obj
        If *menuItem_\subTuiWin
          _ntui_CloseMenuWindow{*menuItem_\subTuiWin}
        End If
        *menuItem_\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
        *menuItem_\state=0
        ntui_Refresh{*menuItem_,Null}
      End If
      *obj = *obj\parent
    Wend
  End If

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_OpenMenuOptions {*menuItem_.tuiMenuItem}                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *menuItem_.tuiMenuItem    : ???                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_OpenMenuOptions{*menuItem_.tuiMenuItem,*rootWin.tuiWindow}

  !_ASSERT{*menuItem_}
  !_ASSERT{*menuItem_\obj\classID=#TUICLASS_MENUITEM}

  *engine.tuiEngine = *menuItem_\obj\engine

  If *rootWin=Null Then Statement Return
  If *rootWin\oswin=Null Then Statement Return

  *menuWin.tuiWindow = ntui_GetObjectWindow{*menuItem_}
  If *menuWin\oswin=Null Then Statement Return

  *subWin.tuiWindow = *menuItem_\subTuiWin
  If *subWin=Null Then Statement Return
  If *subWin\oswin Then Statement Return

  xs.l = !tuiRectWidth{*subWin\obj\bbox}
  ys.l = !tuiRectHeight{*subWin\obj\bbox}

  Select *menuItem_\subClassID
    Case #TUIMENU_DROPDOWN
      x.l = *menuItem_\obj\bbox\left        + *menuWin\oswin\LeftEdge
      y.l = *menuItem_\obj\bbox\bottom   +1 + *menuWin\oswin\TopEdge
    Case #TUIMENU_POPUP
      x.l = *menuItem_\obj\bbox\left        + *menuWin\oswin\LeftEdge
      y.l = *menuItem_\obj\bbox\top     -ys + *menuWin\oswin\TopEdge
    Case #TUIMENU_SUBMENU
      x.l = *menuItem_\obj\bbox\right    +1 + *menuWin\oswin\LeftEdge
      y.l = *menuItem_\obj\bbox\top         + *menuWin\oswin\TopEdge
    Default
      x.l = 0
      y.l = 0
  End Select

  ntui_ShowWindow{*subWin,x,y,*rootWin}
  ;*rootWin\oswin\Flags | #WFLG_MENUSTATE
  ntui_SetFocus{*menuItem_}

End Statement


Statement _ntui_ActivateMenuItem{*menuItem_.tuiMenuItem,*ev.tuiEvent}

  If *menuItem_\subTuiWin
    *rootWin.tuiWindow = ntui_GetObjectWindow{*ev\obj}
    _ntui_OpenMenuOptions{*menuItem_,*rootWin}
  End If

  *menuItem_\obj\flags | #TUIF_ACTIVE
  *menuItem_\state = 1
  *menuItem_\tickCount = 0
  ntui_Refresh{*menuItem_,Null}

End Statement


Statement _ntui_DeactivateMenuItem{*menuItem_.tuiMenuItem}
  *menuItem_\obj\flags | #TUIF_ACTIVE - #TUIF_ACTIVE
  *menuItem_\state = 0
  ntui_Refresh{*menuItem_,Null}
  If *menuItem_\subTuiWin
    _ntui_CloseMenuOptions{*menuItem_,False}
  End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = _ntui_HandleMenuItemx {*menuItem_.tuiMenuItem,*tuiEv:: /
;/ ent.tuiEvent}                                                               /
;/                                                                             /
;/ Description:                                                                /
;/     ; we are not interessted in any other events                            /
;/ * do what happens if the user operates a MenuItem */                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *menuItem_.tuiMenuItem    : ???                                         /
;/ - *ev.tuiEvent    : ???                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DispatchMenuItemEvent:
Function.w _ntui_DispatchMenuItemEvent{*menuItem_.tuiMenuItem,*ev.tuiEvent}
  !_ASSERT{*menuItem_}
  !_ASSERT{*menuItem_\obj\classID=#TUICLASS_MENUITEM}

  *engine.tuiEngine = *menuItem_\obj\engine
  !_ASSERT{*engine}
  *obj.tuiObject = *menuItem_
  !_ASSERT{*ev}
  done.w = False

  If *menuItem_\subTuiWin
    If *menuItem_\subTuiWin\oswin
      *win.tuiWindow = ntui_GetObjectWindow{*menuItem_}
      If *win
        If *win\oswin
          x.l = *ev\pos\x + *win\oswin\LeftEdge - *menuItem_\subTuiWin\oswin\LeftEdge
          y.l = *ev\pos\y + *win\oswin\TopEdge  - *menuItem_\subTuiWin\oswin\TopEdge
          ox.l = *ev\pos\x
          oy.l = *ev\pos\y
          *ev\pos\x = x
          *ev\pos\y = y
          If _ntui_DispatchWindowEvent{*menuItem_\subTuiWin,*ev}
            Function Return True
          End If
          *ev\pos\x = ox
          *ev\pos\y = oy
        End If
      End If
    End If
  End If

  Select *ev\evID
    Case #TUIEV_MOUSEDOWN:
      If *ev\value = 0 ; we want button 0
        If !tuiRectHit{*menuItem_\obj\bbox,*ev\pos\x,*ev\pos\y}
          _ntui_ActivateMenuItem{*menuItem_,*ev}
          ;str_Dup{&*ev\notifyID,*menuItem_\obj\onTouch}
          done = True
        End If
      End If

    Case #TUIEV_MOUSEUP:
      If *ev\value = 0 ; we want button 0
        ;Select *menuItem_\state
        ;  Case 1
            If !tuiRectHit{*menuItem_\obj\bbox,*ev\pos\x,*ev\pos\y}
              ;str_Dup{&*ev\notifyID,*menuItem_\obj\onClick}
              If *menuItem_\subTuiWin=Null
                _ntui_CloseMenuOptions{*menuItem_,True}
                _ntui_DeactivateMenuItem{*menuItem_}
                !tuiHandleNotify{done,*menuItem_,onSelect,*ev}
                *menuItem_\state = 0
                *menuItem_\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
              Else
                *menuItem_\sticky = True
              End If
              done    = True
            Else
              ;str_Dup{&*ev\notifyID,*menuItem_\obj\onRelease}
              _ntui_CloseMenuOptions{*menuItem_,True}
              *menuItem_\state = 0
              *menuItem_\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
            End If

            ntui_Refresh{*menuItem_,Null}
        ;End Select
      End If

    Case #TUIEV_MOUSEMOVE:
      ;If *menuItem_\obj\flags&#TUIF_DISABLED=0
      *menuWin.tuiWindow = ntui_GetObjectWindow{*menuItem_}
      If *menuWin\oswin
        If !tuiRectHit{*menuWin\obj\bbox,*ev\pos\x,*ev\pos\y}

          If str_Read{&*menuItem_\obj\nameID}="stop"
            ;Stop
          End If

          Select *menuItem_\subClassID
             Case #TUIMENU_SUBMENU
               If !tuiRectHit{*menuItem_\obj\bbox,*ev\pos\x,*ev\pos\y}
                 _ntui_ActivateMenuItem{*menuItem_,*ev}
                 done=True
               Else
                 *mover.tuiObject = ntui_HitObject{*menuWin,*ev\pos\x,*ev\pos\y}
                 If *mover
                   If *mover\classID = #TUICLASS_MENUITEM
                     _ntui_DeactivateMenuItem{*menuItem_}
                   End If
                 End If
               End If

             Default
               If !tuiRectHit{*menuItem_\obj\bbox,*ev\pos\x,*ev\pos\y}
                 ;done=True
               End If
               If *menuItem_\state Then done=True

          End Select
        End If
      End If
      ;End If

    Case #TUIEV_KEYDOWN:
      Select *ev\value
        Case #RAWKEY_RETURN
          If *menuItem_\state=0
            _ntui_ActivateMenuItem{*menuItem_,*ev}
          Else
            _ntui_DeactivateMenuItem{*menuItem_}
            If *menuItem_\subTuiWin=Null
              !tuiHandleNotify{done,*menuItem_,onSelect,*ev}
              _ntui_CloseMenuOptions{*menuItem_,True}
            End If
          End If
          done=True

      End Select


    Case #TUIEV_LOSEFOCUS
      If *menuItem_\subTuiWin
        _ntui_CloseMenuOptions{*menuItem_,True}
        _ntui_DeactivateMenuItem{*menuItem_}
      End If
      done=True

    Case #TUIEV_FOCUS
       ;_ntui_ActivateMenuItem{*menuItem_,*ev}

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_DispatchMenuItemEvent,{Null,Null}}

;If *menuItem_\subTuiWin
;  If (*menuItem_\obj\flags&#TUIF_ACTIVE)
;    If *menuItem_\subTuiWin\oswin = Null
;      _ntui_OpenMenuOptions{*menuItem_}
;    End If
;  Else
;    If *menuItem_\subTuiWin\oswin Then _ntui_CloseMenuOptions{*menuItem_}
;  End If
;End If


;If *menuItem_\subTuiWin ; are we in a subwindow?
;  inSubWin.l = False
;  *hit.tuiMenuItem=Null
;  If *menuItem_\subTuiWin\oswin ; subwindow is open...
;    *active.tuiMenuItem = *menuItem_\subTuiWin\active
;    If *active Then If *active\obj\typeID><#TUIOBJ_MENUITEM Then *active=Null
;    *focus.tuiMenuItem = *menuItem_\subTuiWin\focus
;    If *focus Then If *focus\obj\typeID><#TUIOBJ_MENUITEM Then *focus=Null
;
;    x.l = !tuiev_ScreenX - *menuItem_\subTuiWin\oswin\LeftEdge
;    y.l = !tuiev_ScreenY - *menuItem_\subTuiWin\oswin\TopEdge
;
;    If x>=0 AND y>=0 AND x<*menuItem_\subTuiWin\oswin\Width AND y<*menuItem_\subTuiWin\oswin\Height ; our pointer is in the subwindow
;      *hit=ntui_HitObject{*menuItem_\subTuiWin\obj\child,x,y} ; hit which object?
;      If *hit\obj\typeID><#TUIOBJ_MENUITEM Then *hit=Null
;      inSubWin=True
;    Else
;      If *focus
;        done.w = _ntui_HandleMenuItem{*focus,*ev}
;      End If
;    End If
;
;    If *hit=Null ;nothing hit?
;      ;*hit=*active
;    End If
;    If *hit
;      If *hit\obj\typeID = #TUIOBJ_MENUITEM ; it's a menu item!
;        done.w = _ntui_HandleMenuItem{*hit,*ev}
;      End If
;    End If
;  End If
;  If release=False Then If inSubWin OR done Then Function Return True
;End If
;
;x.l = !tuiev_ScreenX - *menuItem_\obj\tuiWindow\oswin\LeftEdge
;y.l = !tuiev_ScreenY - *menuItem_\obj\tuiWindow\oswin\TopEdge
;*mover.tuiMenuItem = ntui_HitObject{*menuItem_\obj\tuiWindow,x,y}
;
;done=False
;Select *menuItem_\subTypeID
;  Case #TUIMENU_ITEM
;    If release ; we release mousebutton over MenuItem => close
;      If *mover=*menuItem_
;        *ev\notify = *menuItem_\obj\notify
;      Else
;        *ev\notify = #NOTIFY_NOTHING
;      End If
;      done=False
;      ; we came from a submenu item, so tell it to close
;    End If
;
;    If press
;      If *mover=*menuItem_
;        _ntui_SetFocus{*menuItem_\obj\tuiWindow,*menuItem_}
;        _ntui_SetActive{*menuItem_\obj\tuiWindow,Null }
;        done=True ; activate and do nothing else
;      Else
;        If *menuItem_\obj\tuiWindow\focus=*menuItem_
;          _ntui_SetFocus{*menuItem_\obj\tuiWindow,Null}
;          _ntui_SetActive{*menuItem_\obj\tuiWindow,Null }
;        End If
;      End If
;    End If
;
;  Default ; submenu
;    If release
;      If *menuItem_\sticky=False
;        _ntui_CloseMenuOptions{*menuItem_}
;        done=False
;      Else
;        done=True  ; release over activated submenu
;        *menuItem_\sticky=False
;      End If
;    End If
;
;    If click
;      If *mover=*menuItem_
;        *menuItem_\sticky=True ; active submenu to become sticky
;        _ntui_SetFocus{*menuItem_\obj\tuiWindow,*menuItem_}
;        _ntui_OpenMenuOptions{*menuItem_}
;        done=True
;      End If
;    End If
;
;    If click=False AND release=False
;      If *mover=*menuItem_
;        _ntui_SetFocus{*menuItem_\obj\tuiWindow,*menuItem_}
;        If press><0 OR True
;          _ntui_OpenMenuOptions{*menuItem_}
;        End If
;      Else
;        If *mover
;          If *mover\obj\typeID=#TUIOBJ_MENUITEM
;            _ntui_CloseMenuOptions{*menuItem_}
;            If *mover\subTypeID=#TUIMENU_ITEM
;              _ntui_SetFocus {*menuItem_\obj\tuiWindow,*mover}
;            Else
;              _ntui_OpenMenuOptions{*mover}
;            End If
;          End If
;        End If
;      End If
;    End If
;End Select
;Function Return done
;End Function
;
;

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawMenuItem {*menuItem_.tuiMenuItem,*rp.RastPort}           /
;/                                                                             /
;/ Description:                                                                /
;/     ; we are not interessted in any other events                            /
;/       *hit=ntui_HitObject{*menuItem_\subTuiWin\obj\child,x,y} ; hit whi:: /
;/ ch object?                                                                  /
;/       ;*hit=*active                                                         /
;/       ; we came from a submenu item, so tell it to close                    /
;/ * draw the Menu in all its beauty */                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *menuItem_.tuiMenuItem    : ???                                         /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawMenuItem:
Statement _ntui_DrawMenuItem{*menuItem_.tuiMenuItem,*rp.RastPort,*clip.tuiRect}

  !_ASSERT{*menuItem_}
  !_ASSERT{*menuItem_\obj\classID=#TUICLASS_MENUITEM}

  *engine.tuiEngine = *menuItem_\obj\engine
  !_ASSERT{*engine}
  *obj.tuiObject = *menuItem_

  If (*obj\borderType><#TUIBORDER_NONE)
    bgDone.l = ntui_DrawBorder{*engine,*rp,*obj\bbox,*obj\borderType,*obj\flags}
  End If

  If *menuItem_\state=1 ;OR *menuItem_\obj\flags&#TUIF_MOVER
    bgpen.l = #TUIPEN_MARKER
    fgpen.l = #TUIPEN_ACTIVETEXT
  Else
    If *menuItem_\obj\borderType=#TUIBORDER_BUTTON AND bgDone=False
      bgpen=#TUIPEN_HALFSHINE
    Else
      bgpen.l = #TUIPEN_TRANSPARENT
    End If
    fgpen.l = #TUIPEN_TEXT
  End If

  !tuiCopyRect{cbox.tuiRect,*obj\cbox}
  !tuiCopyRect{ibox.tuiRect,*obj\ibox}

  x1.l = ibox\left
  x2.l = ibox\right

  If *menuItem_\link_
    ibox\left  = x2-ntui_GetTBImageWidth{*menuItem_\link_}+1 - !tuiBorderWidth{*obj\padding}
    ibox\right = x2
    ntui_DrawTBImage{*menuItem_\link_,*rp,ibox,ibox,*obj\flags,bgpen}
    x2 = ibox\left-1
  End If

  If *menuItem_\shortcut
    tuifont.l = _ntui_SetFont{*engine,*obj\flags}
    _ntui_GetTextRect{*engine,*menuItem_\shortcut,tx.tuiRect,*obj\flags,*rp}
    xs.l = !tuiRectWidth{tx}
    ;If xs<*engine\font[tuifont]\tf_YSize Then xs=*engine\font[tuifont]\tf_YSize
    ibox\left  = x2-xs+1 - !tuiBorderWidth{*obj\padding}
    ibox\right = x2
    _ntui_Print{*engine,*menuItem_\shortcut,ibox,ibox,(*menuItem_\obj\flags|#TUIF_CENTER|#TUIF_LEFT)-#TUIF_LEFT,*rp,fgpen,bgpen}
    x2 = ibox\left-1
  End If

  If *menuItem_\amiga_
    ibox\left  = x2-ntui_GetTBImageWidth{*menuItem_\amiga_}+1
    ibox\right = x2
    ntui_DrawTBImage{*menuItem_\amiga_,*rp,ibox,ibox,*menuItem_\obj\flags,bgpen}
    x2 = ibox\left-1
  End If

  If *menuItem_\alt
    ibox\left  = x2-ntui_GetTBImageWidth{*menuItem_\alt}+1
    ibox\right = x2
    ntui_DrawTBImage{*menuItem_\alt,*rp,ibox,ibox,*menuItem_\obj\flags,bgpen}
    x2 = ibox\left-1
  End If

  If *menuItem_\ctrl
    ibox\left  = x2-ntui_GetTBImageWidth{*menuItem_\ctrl}+1
    ibox\right = x2
    ntui_DrawTBImage{*menuItem_\ctrl,*rp,ibox,ibox,*menuItem_\obj\flags,bgpen}
    x2 = ibox\left-1
  End If

  If *menuItem_\shift
    ibox\left  = x2-ntui_GetTBImageWidth{*menuItem_\shift}+1
    ibox\right = x2
    ntui_DrawTBImage{*menuItem_\shift,*rp,ibox,ibox,*menuItem_\obj\flags,bgpen}
    x2 = ibox\left-1
  End If

  If *menuItem_\tbi
    ibox\left  = x1
    If *menuItem_\obj\string
      ibox\right = x1+ntui_GetTBImageWidth{*menuItem_\tbi}-1 + !tuiBorderWidth{*obj\padding}
    Else
      ibox\right = x2
    End If
    ntui_DrawTBImage{*menuItem_\tbi,*rp,ibox,ibox,*obj\flags,bgpen}
    x1 = ibox\right+1
  End If

  If *menuItem_\obj\string
    ibox\left  = x1
    ibox\right = x2
    cbox\left  = ibox\left + *obj\padding\left
    cbox\right = ibox\right - *obj\padding\right
    _ntui_Print{*engine,*menuItem_\obj\string,ibox,cbox,*menuItem_\obj\flags,*rp,fgpen,bgpen}
  End If

End Statement
!_MakeGlobalFuncPointer{_ntui_DrawMenuItem,{Null,Null,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetMenuItemMinSize {*menuItem_.tuiMenuItem,*rp:: /
;/ .RastPort}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * calculate the minimum size for the Menu */                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *menuItem_.tuiMenuItem    : ???                                         /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_CalculateMenuItemMinSize:
Statement _ntui_CalculateMenuItemMinSize{*menuItem_.tuiMenuItem,*rp.RastPort}
  !_ASSERT{*menuItem_}
  !_ASSERT{*menuItem_\obj\classID=#TUICLASS_MENUITEM}

  *engine.tuiEngine = *menuItem_\obj\engine
  !_ASSERT{*engine}
  *obj.tuiObject = *menuItem_

  _ntui_GetBorderSize{*engine,*obj\borderType,*obj\flags,*obj\border}

  *obj\minsize\x  = 0
  *obj\minsize\y  = 0


  If *obj\string
    _ntui_GetTextRect{*engine,*obj\string,tx.tuiRect,*obj\flags,*rp}
    *obj\minsize\x  = !tuiRectWidth{tx} + !tuiBorderWidth{*obj\padding}
    *obj\minsize\y  = !tuiRectHeight{tx}
  End If

  If *menuItem_\shortcut
    _ntui_GetTextRect{*engine,*menuItem_\shortcut,tx.tuiRect,*obj\flags,*rp}
    *obj\minsize\x  + !tuiRectWidth{tx} + !tuiBorderWidth{*obj\padding}
    If !tuiRectHeight{tx}>*obj\minsize\y Then *obj\minsize\y = !tuiRectHeight{tx}
  End If

  If *menuItem_\tbi
    *obj\minsize\x + ntui_GetTBImageWidth{*menuItem_\tbi} + !tuiBorderWidth{*obj\padding}
    If (ntui_GetTBImageHeight{*menuItem_\tbi}>*obj\minsize\y) Then *obj\minsize\y =  ntui_GetTBImageHeight{*menuItem_\tbi}
  End If

  If *menuItem_\ctrl
    *obj\minsize\x + ntui_GetTBImageWidth{*menuItem_\ctrl} + !tuiBorderWidth{*obj\padding}
    If (ntui_GetTBImageHeight{*menuItem_\ctrl}>*obj\minsize\y) Then *obj\minsize\y =  ntui_GetTBImageHeight{*menuItem_\ctrl}
  End If

  If *menuItem_\shift
    *obj\minsize\x + ntui_GetTBImageWidth{*menuItem_\shift} + !tuiBorderWidth{*obj\padding}
    If (ntui_GetTBImageHeight{*menuItem_\shift}>*obj\minsize\y) Then *obj\minsize\y =  ntui_GetTBImageHeight{*menuItem_\shift}
  End If

  If *menuItem_\alt
    *obj\minsize\x + ntui_GetTBImageWidth{*menuItem_\alt} + !tuiBorderWidth{*obj\padding}
    If (ntui_GetTBImageHeight{*menuItem_\alt}>*obj\minsize\y) Then *obj\minsize\y =  ntui_GetTBImageHeight{*menuItem_\alt}
  End If

  If *menuItem_\amiga_
    *obj\minsize\x + ntui_GetTBImageWidth{*menuItem_\amiga_} + !tuiBorderWidth{*obj\padding}
    If (ntui_GetTBImageHeight{*menuItem_\amiga_}>*obj\minsize\y) Then *obj\minsize\y =  ntui_GetTBImageHeight{*menuItem_\amiga_}
  End If

  If *menuItem_\link_
    *obj\minsize\x + ntui_GetTBImageWidth{*menuItem_\link_} + !tuiBorderWidth{*obj\padding}
    If (ntui_GetTBImageHeight{*menuItem_\link_}>*obj\minsize\y) Then *obj\minsize\y =  ntui_GetTBImageHeight{*menuItem_\link_}
  End If

  If *menuItem_\subTuiWin
    _ntui_CalculateMinSize{*menuItem_\subTuiWin,*rp}
  End If

  *obj\minsize\x + !tuiBorderWidth{*obj\border}
  *obj\minsize\y + !tuiBorderHeight{*obj\padding} + !tuiBorderHeight{*obj\border}

End Statement
!_MakeGlobalFuncPointer{_ntui_CalculateMenuItemMinSize,{Null,Null}}


_ntui_LayoutMenuItem:
Statement _ntui_LayoutMenuItem{*menuItem_.tuiMenuItem,*rp.RastPort,*bbox.tuiRect}
  !_ASSERT{*menuItem_}
  !_ASSERT{*menuItem_\obj\classID=#TUICLASS_MENUITEM}
  !_ASSERT{*rp}
  *obj.tuiObject = *menuItem_

  If *bbox
    !tuiCopyRect{*obj\bbox,*bbox}
  End If
  !tuiRemBorder{*obj\ibox,*obj\bbox,*obj\border}
  !tuiRemBorder{*obj\cbox,*obj\ibox,*obj\padding}

  If *menuItem_\subTuiWin
    *child.tuiObject=*menuItem_\subTuiWin\obj\child
    sbox.tuiRect\left = 0,0,*child\minsize\x,*child\minsize\y
    _ntui_Layout{*menuItem_\subTuiWin,*rp,sbox}
  End If

End Statement
!_MakeGlobalFuncPointer{_ntui_LayoutMenuItem,{Null,Null,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeMenuItem {*menuItem_.tuiMenuItem}                       /
;/                                                                             /
;/ Description:                                                                /
;/  If *menuItem_\img\height >*menuItem_\obj\minsize\y Then *menuItem_:: /
;/ \obj\minsize\y = *menuItem_\img\height                                    /
;/  If *menuItem_\linkimg\height >*menuItem_\obj\minsize\y Then *objMenu:: /
;/ Item\obj\minsize\y = *menuItem_\linkimg\height                            /
;/  If *menuItem_\ami\height >*menuItem_\obj\minsize\y Then *menuItem_:: /
;/ \obj\minsize\y = *menuItem_\ami\height                                    /
;/  If *menuItem_\ctrl\height >*menuItem_\obj\minsize\y Then *objMenuIte:: /
;/ m\obj\minsize\y = *menuItem_\ctrl\height                                  /
;/  If *menuItem_\shift\height >*menuItem_\obj\minsize\y Then *objMenuIt:: /
;/ em\obj\minsize\y = *menuItem_\shift\height                                /
;/  If *menuItem_\alt\height >*menuItem_\obj\minsize\y Then *menuItem_:: /
;/ \obj\minsize\y = *menuItem_\alt\height                                    /
;/ * free everything special that we allocated for the Menu */                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *menuItem_.tuiMenuItem    : ???                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitMenuItem:
Statement _ntui_DeinitMenuItem{*menuItem_.tuiMenuItem}
  !_ASSERT{*menuItem_}
  !_ASSERT{*menuItem_\obj\classID=#TUICLASS_MENUITEM}

  If *menuItem_\tbi    Then ntui_FreeTBImage{*menuItem_\tbi   }  : *menuItem_\tbi    = Null
  If *menuItem_\amiga_ Then ntui_FreeTBImage{*menuItem_\amiga_}  : *menuItem_\amiga_ = Null
  If *menuItem_\ctrl   Then ntui_FreeTBImage{*menuItem_\ctrl  }  : *menuItem_\ctrl   = Null
  If *menuItem_\alt    Then ntui_FreeTBImage{*menuItem_\alt   }  : *menuItem_\alt    = Null
  If *menuItem_\shift  Then ntui_FreeTBImage{*menuItem_\shift }  : *menuItem_\shift  = Null
  If *menuItem_\link_  Then ntui_FreeTBImage{*menuItem_\link_ }  : *menuItem_\link_  = Null

  If *menuItem_\subTuiWin
   ; _ntui_CloseMenuOptions{*menuItem_,False}
    ;ntui_HideWindow{*menuItem_\subTuiWin}
    ;*menuItem_\obj\child = *menuItem_\subTuiWin
    ;*menuItem_\subTuiWin = Null
  End If
  !tuiFreeNotifyHandler{*menuItem_\onSelect}

End Statement
!_MakeGlobalFuncPointer{_ntui_DeinitMenuItem,{Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_MenuItem {name.s,@imagefile.s,@short.s,@notify.l,:: /
;/ @help.s,@flags.l,@itemID.l}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/   ix2.l = x2-xs+1;-1- *engine\defPad\x                                   /
;/ * create function for tui Menu */                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - name.s    : ???                                                           /
;/ - imagefile.s    : ???                                                      /
;/ - short.s    : ???                                                          /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - itemID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_MenuItem:
Function.tuiMenuItem ntui_MenuItem{*tagList.TagItem}

  flags.l = #TUIF_LEFT|#TUIF_MIDDLE|#TUIF_FIXSIZE|#TUIF_WANTMOVER|#TUIF_WANTTAB
  *menuItem_.tuiMenuItem = (.tuiMenuItem)_ntui_CreateObject{#TUICLASS_MENUITEM,SizeOf.tuiMenuItem,flags}
  If *menuItem_
    *menuItem_\subTuiWin            = Null
    *menuItem_\link_                = Null
    *menuItem_\tbi                  = Null
    *menuItem_\amiga_               = Null
    *menuItem_\alt                  = Null
    *menuItem_\ctrl                 = Null
    *menuItem_\shift                = Null
;    *menuItem_\masterTuiWin         = tuiGlobal\buildHelper\tuiRootWin
    *menuItem_\subClassID           = #TUIMENU_ITEM
    *menuItem_\obj\borderType       = #TUIBORDER_TOOL
    *menuItem_\shortqual            = 0
    *menuItem_\shortkey             = 0
    *menuItem_\shortcut             = Null
;    *menuItem_\obj\margin\left      = 0,0,0,0

    *menuItem_\obj\Draw             = *_ntui_DrawMenuItem
    *menuItem_\obj\Layout           = Null ;*_ntui_LayoutMenuItem
    *menuItem_\obj\DispatchEvent    = *_ntui_DispatchMenuItemEvent
    *menuItem_\obj\CalculateMinSize = *_ntui_CalculateMenuItemMinSize
    *menuItem_\obj\Deinit           = *_ntui_DeinitMenuItem
    *menuItem_\obj\SetAttr          = *_ntui_SetMenuItemAttr
    *menuItem_\obj\GetAttr          = *_ntui_GetMenuItemAttr

    !tuiInitNotifyHandler{*menuItem_\onSelect}

    If *tagList Then ntui_SetAttrs{*menuItem_,*tagList}

  End If

  Function Return *menuItem_

End Function
!_MakeGlobalFuncPointer{ntui_MenuItem,{Null}}


Function.tuiMenuItem ntuib_MenuItem{text.s,@image.s,@shortcut.s,@onSelect.s,@help.s,@flags.l,@nameID.s}

  DEFTYPE.tagL10 tagList : n.l = 0
  If text     Then tagList\tag[n]\ti_Tag = #TUIMIA_TEXT     ,&text     : n=n+1
  If help     Then tagList\tag[n]\ti_Tag = #TUIA_HELP       ,&help     : n=n+1
  If nameID   Then tagList\tag[n]\ti_Tag = #TUIA_ID         ,&nameID   : n=n+1
  If onSelect Then tagList\tag[n]\ti_Tag = #TUIMIA_ONSELECT ,&onSelect : n=n+1
  If image    Then tagList\tag[n]\ti_Tag = #TUIMIA_IMAGE    ,&image    : n=n+1
  If shortcut Then tagList\tag[n]\ti_Tag = #TUIMIA_SHORTCUT ,&shortcut : n=n+1
  If flags><#TUI_NOFLAGS Then tagList\tag[n]\ti_Tag = #TUIA_SETFLAGS,flags : n=n+1
  tagList\tag[n]\ti_Tag = #TAG_DONE,0

  *menuItem_.tuiMenuItem = ntui_MenuItem{tagList}

  Function Return *menuItem_

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_BeginMenuTitle {name.s,@imagefile.s,@help.s,@flag:: /
;/ s.l,@itemID.l}                                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - name.s    : ???                                                           /
;/ - imagefile.s    : ???                                                      /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - itemID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
;#NTUI_MENUWFLGS = #WFLG_BORDERLESS|#WFLG_SIMPLE_REFRESH|#WFLG_NOCAREREFRESH
#NTUI_MENUWFLGS = #WFLG_BORDERLESS|#WFLG_SMART_REFRESH
ntui_BeginMenuTitle:
Function.tuiMenuItem ntui_BeginMenuTitle{*tagList.TagItem}

  DEFTYPE.tagL10 ltagList : n.l = 0
  ltagList\tag[n]\ti_Tag = #TUIA_BORDERTYPE   ,#TUIBORDER_TOOL     : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIMIA_SUBCLASSID ,#TUIMENU_DROPDOWN   : n=n+1
  ltagList\tag[n]\ti_Tag = #TAG_DONE          ,0
  *menuItem_.tuiMenuItem = ntui_MenuItem{ltagList}

  If *menuItem_

    _ntui_BeginChildren{*menuItem_}
    n=0
    ltagList\tag[n]\ti_Tag = #TUIWA_OSWINFLAGS  ,#NTUI_MENUWFLGS  : n=n+1
    ltagList\tag[n]\ti_Tag = #TUIA_SETFLAGS     ,#TUIF_FIXSIZE    : n=n+1
    ltagList\tag[n]\ti_Tag = #TAG_DONE          ,0

    *subWin.tuiWindow = ntui_BeginWindow{ltagList}
    If *subWin
      *subWin\obj\padding\left = 0,0,0,0
      *group.tuiGroup = ntui_BeginGroup{Null}
      If *group
        *group\obj\borderType = #TUIBORDER_RAISED
      End If
    End If
    *menuItem_\subTuiWin   = *subWin

    If *tagList Then ntui_SetAttrs{*menuItem_,*tagList}

  End If

  Function Return *menuItem_

End Function
!_MakeGlobalFuncPointer{ntui_BeginMenuTitle,{Null}}

Function.tuiMenuItem ntuib_BeginMenuTitle{text.s,@image.s,@help.s,@flags.l,@nameID.s}

  DEFTYPE.tagL10 tagList : n.l = 0
  If text    Then tagList\tag[n]\ti_Tag = #TUIMIA_TEXT   ,&text    : n=n+1
  If help    Then tagList\tag[n]\ti_Tag = #TUIA_HELP     ,&help    : n=n+1
  If nameID  Then tagList\tag[n]\ti_Tag = #TUIA_ID       ,&nameID  : n=n+1
  If image   Then tagList\tag[n]\ti_Tag = #TUIMIA_IMAGE  ,&image   : n=n+1
  If flags><#TUI_NOFLAGS Then tagList\tag[n]\ti_Tag = #TUIA_SETFLAGS,flags : n=n+1
  tagList\tag[n]\ti_Tag = #TAG_DONE,0

  *menuItem_.tuiMenuItem = ntui_BeginMenuTitle{tagList}

  Function Return *menuItem_

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_BeginDropDown {name.s,@imagefile.s,@help.s,@flags:: /
;/ .l,@itemID.l}                                                               /
;/                                                                             /
;/ Description:                                                                /
;/   *menuItem_\linkimg             = Null;ntui_CreateTBImage{*tuiMenuIt:: /
;/ em\obj\engine,"ARROWDOWN",#TUISIZE_KNOB,#TUISIZE_KNOB}                   /
;/ * create function for tui Menu */                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - name.s    : ???                                                           /
;/ - imagefile.s    : ???                                                      /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - itemID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_BeginDropDown:
Function.tuiMenuItem ntui_BeginDropDown{*tagList.TagItem}

  DEFTYPE.tagL10 ltagList : n.l = 0
  ltagList\tag[n]\ti_Tag = #TUIA_BORDERTYPE   ,#TUIBORDER_BUTTON   : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIMIA_SUBCLASSID ,#TUIMENU_DROPDOWN   : n=n+1
  ltagList\tag[n]\ti_Tag = #TAG_DONE          ,0
  *menuItem_.tuiMenuItem = ntui_BeginMenuTitle{ltagList}

  If *menuItem_
    *menuItem_\link_    = ntui_CreateTBImage{*menuItem_\obj\engine,"DROPDOWN",#TUISIZE_KNOB,#TUISIZE_KNOB}
    If *tagList Then ntui_SetAttrs{*menuItem_,*tagList}

  End If

  Function Return *menuItem_

End Function
!_MakeGlobalFuncPointer{ntui_BeginDropDown,{Null}}

Function.tuiMenuItem ntuib_BeginDropDown{text.s,@image.s,@help.s,@flags.l,@nameID.s}

  DEFTYPE.tagL10 tagList : n.l = 0
  If text    Then tagList\tag[n]\ti_Tag = #TUIMIA_TEXT   ,&text    : n=n+1
  If help    Then tagList\tag[n]\ti_Tag = #TUIA_HELP     ,&help    : n=n+1
  If nameID  Then tagList\tag[n]\ti_Tag = #TUIA_ID       ,&nameID  : n=n+1
  If image   Then tagList\tag[n]\ti_Tag = #TUIMIA_IMAGE  ,&image   : n=n+1
  If flags><#TUI_NOFLAGS Then tagList\tag[n]\ti_Tag = #TUIA_SETFLAGS,flags : n=n+1
  tagList\tag[n]\ti_Tag = #TAG_DONE,0

  *menuItem_.tuiMenuItem = ntui_BeginDropDown{tagList}

  Function Return *menuItem_

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_BeginPopUp {name.s,@imagefile.s,@help.s,@flags.l,:: /
;/ @itemID.l}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * create function for tui Menu */                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - name.s    : ???                                                           /
;/ - imagefile.s    : ???                                                      /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - itemID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_BeginPopUp:
Function.tuiMenuItem ntui_BeginPopUp{*tagList.TagItem}

  DEFTYPE.tagL10 ltagList : n.l = 0
  ltagList\tag[n]\ti_Tag = #TUIA_BORDERTYPE   ,#TUIBORDER_BUTTON   : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIMIA_SUBCLASSID ,#TUIMENU_POPUP      : n=n+1
  ltagList\tag[n]\ti_Tag = #TAG_DONE          ,0
  *menuItem_.tuiMenuItem = ntui_BeginMenuTitle{ltagList}

  If *menuItem_
    *menuItem_\link_    = ntui_CreateTBImage{*menuItem_\obj\engine,"POPUP",#TUISIZE_KNOB,#TUISIZE_KNOB}
    If *tagList Then ntui_SetAttrs{*menuItem_,*tagList}

  End If

  Function Return *menuItem_

End Function
!_MakeGlobalFuncPointer{ntui_BeginPopUp,{Null}}


Function.tuiMenuItem ntuib_BeginPopUp{text.s,@image.s,@help.s,@flags.l,@nameID.s}

  DEFTYPE.tagL10 tagList : n.l = 0
  If text    Then tagList\tag[n]\ti_Tag = #TUIMIA_TEXT   ,&text    : n=n+1
  If help    Then tagList\tag[n]\ti_Tag = #TUIA_HELP     ,&help    : n=n+1
  If nameID  Then tagList\tag[n]\ti_Tag = #TUIA_ID       ,&nameID  : n=n+1
  If image   Then tagList\tag[n]\ti_Tag = #TUIMIA_IMAGE  ,&image   : n=n+1
  If flags><#TUI_NOFLAGS Then tagList\tag[n]\ti_Tag = #TUIA_SETFLAGS,flags : n=n+1
  tagList\tag[n]\ti_Tag = #TAG_DONE,0

  *menuItem_.tuiMenuItem = ntui_BeginPopUp{tagList}

  Function Return *menuItem_

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_BeginSubMenu {name.s,@imagefile.s,@help.s,@flags.:: /
;/ l,@itemID.l}                                                                /
;/                                                                             /
;/ Description:                                                                /
;/ * create function for tui Menu */                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - name.s    : ???                                                           /
;/ - imagefile.s    : ???                                                      /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - itemID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_BeginSubMenu:
Function.tuiMenuItem ntui_BeginSubMenu{*tagList.TagItem}

  DEFTYPE.tagL10 ltagList : n.l = 0
  ltagList\tag[n]\ti_Tag = #TUIA_BORDERTYPE   ,#TUIBORDER_TOOL   : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIMIA_SUBCLASSID ,#TUIMENU_SUBMENU  : n=n+1
  ltagList\tag[n]\ti_Tag = #TAG_DONE          ,0
  *menuItem_.tuiMenuItem = ntui_BeginMenuTitle{ltagList}

  If *menuItem_
    *menuItem_\link_    = ntui_CreateTBImage{*menuItem_\obj\engine,"RIGHT",#TUISIZE_KNOB,#TUISIZE_KNOB}
    If *tagList Then ntui_SetAttrs{*menuItem_,*tagList}

  End If

  Function Return *menuItem_

End Function
!_MakeGlobalFuncPointer{ntui_BeginSubMenu,{Null}}


Function.tuiMenuItem ntuib_BeginSubMenu{text.s,@image.s,@help.s,@flags.l,@nameID.s}

  DEFTYPE.tagL10 tagList : n.l = 0
  If text    Then tagList\tag[n]\ti_Tag = #TUIMIA_TEXT   ,&text    : n=n+1
  If help    Then tagList\tag[n]\ti_Tag = #TUIA_HELP     ,&help    : n=n+1
  If nameID  Then tagList\tag[n]\ti_Tag = #TUIA_ID       ,&nameID  : n=n+1
  If image   Then tagList\tag[n]\ti_Tag = #TUIMIA_IMAGE  ,&image   : n=n+1
  If flags><#TUI_NOFLAGS Then tagList\tag[n]\ti_Tag = #TUIA_SETFLAGS,flags : n=n+1
  tagList\tag[n]\ti_Tag = #TAG_DONE,0

  *menuItem_.tuiMenuItem = ntui_BeginSubMenu{tagList}

  Function Return *menuItem_

End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_EndMenu {}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * end a group definition */                                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_EndMenu:
Function.tuiMenuItem ntui_EndMenu{}

  ntui_EndGroup{}
  ntui_EndWindow{}
  *menuItem_.tuiMenuItem = (.tuiMenuItem)_ntui_EndChildren{#TUICLASS_MENUITEM}
  Function Return *menuItem_

End Function
!_MakeGlobalFuncPointer{ntui_EndMenu,{}}


Statement ntui_InitMenuItemClass{}

  classID.l = ntui_RegisterClass{"menuitem",(.tuiFunc)*ntui_MenuItem,Null}

  ntui_RegisterAttr{classID,"image"         , #TUIMIA_IMAGE        ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"toggle"        , #TUIMIA_TOGGLE       ,#TUIAT_BOOL   , 0,0 }
  ntui_RegisterAttr{classID,"checked"       , #TUIMIA_CHECKED      ,#TUIAT_BOOL   , 0,0 }
  ntui_RegisterAttr{classID,"shortcut"      , #TUIMIA_SHORTCUT     ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"text"          , #TUIMIA_TEXT         ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"onselect"      , #TUIMIA_ONSELECT     ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"onselectcb"    , #TUIMIA_ONSELECTCB   ,#TUIAT_PTR    , 0,0 }

  classID.l = ntui_RegisterClass{"menutitle",(.tuiFunc)*ntui_BeginMenuTitle,(.tuiFunc)*ntui_EndMenu}

  ntui_RegisterAttr{classID,"image"         , #TUIMIA_IMAGE        ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"text"          , #TUIMIA_TEXT         ,#TUIAT_STRING , 0,0 }

  classID.l = ntui_RegisterClass{"submenu",(.tuiFunc)*ntui_BeginSubMenu,(.tuiFunc)*ntui_EndMenu}

  ntui_RegisterAttr{classID,"image"         , #TUIMIA_IMAGE        ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"text"          , #TUIMIA_TEXT         ,#TUIAT_STRING , 0,0 }

  classID.l = ntui_RegisterClass{"dropdown",(.tuiFunc)*ntui_BeginDropDown,(.tuiFunc)*ntui_EndMenu}

  ntui_RegisterAttr{classID,"image"         , #TUIMIA_IMAGE        ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"text"          , #TUIMIA_TEXT         ,#TUIAT_STRING , 0,0 }

  classID.l = ntui_RegisterClass{"popup",(.tuiFunc)*ntui_BeginPopUp,(.tuiFunc)*ntui_EndMenu}

  ntui_RegisterAttr{classID,"image"         , #TUIMIA_IMAGE        ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"text"          , #TUIMIA_TEXT         ,#TUIAT_STRING , 0,0 }

End Statement

ntui_InitMenuItemClass{}


