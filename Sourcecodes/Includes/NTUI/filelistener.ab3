; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 11
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8192
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 23
; CursorColumn    = 15
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA


NEWTYPE.tuiFileListener

  *obj.tuiObject
  *fileName.str
  *process.Process
  *onOpenCB.tuiFunc
  *onCloseCB.tuiFunc
  *onDataCB.tuiFunc
  *onFailCB.tuiFunc

  ; file handle
  fh.l
  err.l

  ; flags
  killme.l
  ready.l
  done.l

  ; user data
  *tempPtr.b
  tempOff.l

End NEWTYPE


SHARED *_ntui_FileListenerParam.tuiFileListener

; example callbacks
RunErrsOff ; debugger must be switched off
; return 0 if everything is fine, or error code
Function.l _ntui_OnDataCB{*fileListener.tuiFileListener,dataP.l,dataLen.l}

   If *fileListener\obj
     ; do something with the data and the object
     ; remember not to touch the object, only send events
     Function Return 0 ; ok
   End If

   Function Return -1 ; error

End Function

; return 0 if everything is fine, or error code
Function.l _ntui_OnCloseCB{*fileListener.tuiFileListener}

   If *fileListener\obj
     ; examine the error code
     Function Return 0
   End If

   Function Return -1

End Function

; return 0 if everything is fine, or error code
Function.l _ntui_OnOpenCB{*fileListener.tuiFileListener}

   If *fileListener\obj
     ; we may store the *listener in the *obj for later reference
     Function Return 0
   End If

   Function Return -1

End Function

; return 0 if everything is fine, or error code
Function.l _ntui_OnFailCB{*fileListener.tuiFileListener, err.l}

   Function Return err

End Function


LastRunErrsMode


#TUIFLE_USERERROR            =  1
#TUIFLE_OK                   =  0
#TUIFLE_UNABLETOOPENFILE     = -1
#TUIFLE_NOTENOUGHMEMORY      = -2
#TUIFLE_UNABLETOSTARTPROCESS = -3

RunErrsOff ; debugger must be switched off
_ntui_FileListenLooper
Function.l _ntui_FileListenLooper{}

  MOVE.l _ntui_filelistener_amiblitz_globalbase,A5
  *fileListener.tuiFileListener = *_ntui_FileListenerParam
  *fileListener\err = #TUIFLE_OK
  *fileListener\fh  = Open_ (str_GetPtrAsync{*fileListener\fileName},#MODE_OLDFILE)

  If *fileListener\fh
    If *fileListener\onOpenCB
      !_CallFuncPointer{*fileListener\onOpenCB,*fileListener\err,*fileListener}
    End If
    *fileListener\ready = True         ; filename must not be touched anymore
    *buff.b = AllocVec_(1024,#MEMF_ANY)
    If *buff=Null Then *fileListener\err=#TUIFLE_NOTENOUGHMEMORY

    If *fileListener\err=#TUIFLE_OK
      Repeat
        ;done.l = Read_ (*fileListener\fh,&dat.l,1)
        done.l = FGets_ (*fileListener\fh,*buff,80)
        If done
          length_.l = 0
          While Peek.b(*buff+length_): length_+1 : Wend
          If length_>0
            If *fileListener\onDataCB
              !_CallFuncPointer{*fileListener\onDataCB,  *fileListener\err,*fileListener,*buff,length_}
            End If
          End If
        End If
      Until done=0 OR *fileListener\err><#TUIFLE_OK

      If *fileListener\err = #TUIFLE_OK
        If *fileListener\onCloseCB
          !_CallFuncPointer{*fileListener\onCloseCB,*fileListener\err,*fileListener}
        End If
      End If
    End If
    If *buff Then FreeVec_ *buff
    Close_ *fileListener\fh
  Else
    *fileListener\err   = #TUIFLE_UNABLETOOPENFILE
    *fileListener\ready = True
  End If

  If *fileListener\err><#TUIFLE_OK
    If *fileListener\onFailCB
      !_CallFuncPointer{*fileListener\onFailCB,  *fileListener\err,*fileListener,*fileListener\err }
    End If
  End If

  *fileListener\done = True

  Function Return 0
  _ntui_filelistener_amiblitz_globalbase:
  Dc.l 0

End Function
!_MakeGlobalFuncPointer_RunErrsOff{_ntui_FileListenLooper,{}}
LastRunErrsMode


Function.tuiFileListener ntui_FileListener{*obj.tuiObject,*filenameP.b,*onOpenCB.tuiFunc,*onCloseCB.tuiFunc,*onFailCB.tuiFunc,*onDataCB.tuiFunc}
  !_ASSERT{*obj}
  !_ASSERT{*filenameP}

  *fileListener.tuiFileListener = AllocVec_(SizeOf.tuiFileListener,#MEMF_ANY)
  If *fileListener
    DEFTYPE.tag5 tagList
    MOVE.l a5,_ntui_filelistener_amiblitz_globalbase
    name.s = "NTUI FileListenLooper #"+Hex$(*obj)
    tagList\ti_Tag = #NP_Entry,*_ntui_FileListenLooper,#NP_Name,&name,#NP_Priority,0,#NP_StackSize,8192,#TAG_DONE,0

    *fileListener\fileName  = Null
    *fileListener\ready     = False
    *fileListener\done      = False
    *fileListener\killme    = False
    *fileListener\err       = 0
    *fileListener\obj       = *obj
    *fileListener\onOpenCB  = *onOpenCB
    *fileListener\onCloseCB = *onCloseCB
    *fileListener\onFailCB  = *onFailCB
    *fileListener\onDataCB  = *onDataCB
     str_WritePtr{&*fileListener\fileName,*filenameP}
    *_ntui_FileListenerParam = *fileListener
    *fileListener\process   = CreateNewProc_(tagList)
    If *fileListener\process
      While (*fileListener\ready = False) : Delay_ 1 : Wend
    Else
      *fileListener\err=#TUIFLE_UNABLETOSTARTPROCESS
    EndIf

    If *fileListener\err
      str_Free{&*fileListener\fileName}
      FreeVec_ *fileListener
      *fileListener = Null
    End If
  End If

  Function Return *fileListener

End Function

Statement ntui_FreeFileListener{*fileListener.tuiFileListener}

  If *fileListener\done=False
    *fileListener\killme = True

    If *fileListener\ready=True AND *fileListener\err=0
      fh.l = Open_ (str_GetPtr{*fileListener\fileName},#MODE_NEWFILE)
      If fh
        Close_ fh
      End If
    End If
    ; wait until fl returns..
    While (*fileListener\done=False) : Delay_ 1 : Wend
  End If

  str_Free{&*fileListener\fileName}
  FreeVec_ *fileListener

End Statement


