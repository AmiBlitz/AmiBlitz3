; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 12
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 129
; CursorColumn    = 75
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_ProgressBar.include                                                /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#TUI_HAS_PROGRESSBAR = 1

CNIF #__include=0
optimize 7
Syntax 2
CEND


NEWTYPE.tuiProgressBar
obj.tuiObject            ; tui object header
total.l
donePen.l
todoPen.l
End NEWTYPE


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawProgressBar {*tuiProgressBar.tuiProgressBar,*rp.RastPort}        /
;/                                                                             /
;/ Description:                                                                /
;/ * draw the ProgressBar */                                                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiProgressBar.tuiProgressBar    : ???                                       /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawProgressBar:
Statement _ntui_DrawProgressBar{*tuiProgressBar.tuiProgressBar,*rp.RastPort}
  !_ASSERT{*tuiProgressBar}
  !_ASSERT{*rp}
  !_ASSERT{*tuiProgressBar\obj\classID=#TUICLASS_PROGRESSBAR}

  *tuiEngine.tuiEngine = *tuiProgressBar\obj\tuiEngine
  *tui.tuiObject = *tuiProgressBar\obj
  !_ASSERT{*tuiEngine}

  ;/* draw the border */
  If (*tuiProgressBar\obj\borderType><#TUIBORDER_NONE)
    ntui_DrawBorder{*tuiEngine,*rp,*tui\bbox,*tui\borderType,*tui\flags}
  End If

  !tuiCopyRect{cbox.tuiRect,*tui\cbox}
  !tuiCopyRect{dbox.tuiRect,*tui\cbox}

  pixelSize.l = !tuiRectWidth{*tui\cbox}

  If *tuiProgressBar\total>0
    dbox\right = dbox\left + *tuiProgressBar\obj\value * pixelSize / *tuiProgressBar\total -1
    percent.l =*tuiProgressBar\obj\value * 100 / *tuiProgressBar\total
  Else
    percent=100
  End If
  cbox\left = dbox\right+1

  If dbox\right>=dbox\left                        ; draw the "done" area
    If (*tuiProgressBar\obj\flags&#TUIF_DISABLED)
      SetAPen_  *rp,*tuiEngine\pen[#TUIPEN_HALFMARKER]
    Else
      SetAPen_  *rp,*tuiEngine\pen[*tuiProgressBar\donePen]
    End If

    RectFill_ *rp,dbox\left,dbox\top,dbox\right,dbox\bottom
  End If

  If cbox\left<=cbox\right                       ; draw the "todo" area
    If (*tuiProgressBar\obj\flags&#TUIF_DISABLED)
      SetAPen_  *rp,*tuiEngine\pen[#TUIPEN_HALFHALFSHADOW]
    Else
      SetAPen_  *rp,*tuiEngine\pen[*tuiProgressBar\todoPen]
    End If

    RectFill_ *rp,cbox\left,cbox\top,cbox\right,cbox\bottom
  End If

  text.s = str_Read{&*tuiProgressBar\obj\string}
  text = Replace$(text,"%d",Str$(*tuiProgressBar\obj\value))
  text = Replace$(text,"%t",Str$(*tuiProgressBar\total))
  text = Replace$(text,"%p",Str$(percent))
  DEFTYPE.str *tmp
  *tmp=#NULL
  str_Write{&*tmp,text}
  _ntui_Print{*tuiEngine,*tmp,*tui\ibox,*tui\cbox,*tui\flags,*rp,#TUIPEN_TEXT,-1}
  str_Free{&*tmp}

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetProgressBarMinSize {*tuiProgressBar.tuiProgressBar,:: /
;/ *rp.RastPort}                                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * get the minimum size of the ProgressBar */                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiProgressBar.tuiProgressBar    : ???                                       /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_CalculateProgressBarMinSize:
Function.l _ntui_CalculateProgressBarMinSize{*tuiProgressBar.tuiProgressBar,*rp.RastPort}
  !_ASSERT{*tuiProgressBar}
  !_ASSERT{*rp}
  !_ASSERT{*tuiProgressBar\obj\classID=#TUICLASS_PROGRESSBAR}

  *tuiEngine.tuiEngine = *tuiProgressBar\obj\tuiEngine
  !_ASSERT{*tuiEngine}

  DEFTYPE.tuiRect tx
  If *tuiProgressBar\obj\string
    _ntui_GetTextRect{*tuiEngine,*tuiProgressBar\obj\string,tx,*tuiProgressBar\obj\flags,*rp}
  Else
    tx\left = 0,0,8,*tuiEngine\defSize[#TUISIZE_INLINE]
  End If
  *tuiProgressBar\obj\minsize\x  = !tuiRectWidth{tx}  + 1 + *tuiProgressBar\obj\padding\left + *tuiProgressBar\obj\padding\right ; (in case we draw recessed)
  *tuiProgressBar\obj\minsize\y  = !tuiRectHeight{tx} + 1 + *tuiProgressBar\obj\padding\top  + *tuiProgressBar\obj\padding\bottom; (in case we draw recessed)

  _ntui_GetBorderSize{*tuiEngine,*tuiProgressBar\obj\borderType,*tuiProgressBar\obj\flags,*tuiProgressBar\obj\border}
  *tuiProgressBar\obj\minsize\x + *tuiProgressBar\obj\border\left + *tuiProgressBar\obj\border\right
  *tuiProgressBar\obj\minsize\y + *tuiProgressBar\obj\border\top  + *tuiProgressBar\obj\border\bottom

  Function Return *tuiProgressBar\obj\minsize
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_ProgressBar {text.s,done.l,total.l,@help.s,@flags.l:: /
;/ ,@userID.l}                                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * tui ProgressBar newtype */                                                  /
;/ obj.tuiObject            ; tui object header                                /
;/ * create function for tui ProgressBar */                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - text.s    : ???                                                           /
;/ - done.l    : ???                                                           /
;/ - total.l    : ???                                                          /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_ProgressBar{text.s,done.l,total.l,@help.s,@flags.l,@nameID.s}
If flags=-1 Then flags=0
flags = flags | #TUIF_MIDDLE | #TUIF_CENTER |#TUIF_FIXHEIGHT
*tuiProgressBar.tuiProgressBar = _ntui_CreateObject{#TUICLASS_PROGRESSBAR,SizeOf.tuiProgressBar,help,flags,nameID}
If *tuiProgressBar
  *tuiProgressBar\obj\value       = done
  str_Write{&*tuiProgressBar\obj\string,text}
  *tuiProgressBar\obj\borderType = #TUIBORDER_RECESSED
  *tuiProgressBar\total          = total
;  *tuiProgressBar\obj\bindFlags  | #TUIBIND_VALUE
  *tuiProgressBar\donePen        = #TUIPEN_MARKER
  *tuiProgressBar\todoPen        = #TUIPEN_HALFSHADOW

  !_GetFuncPointer{*tuiProgressBar\obj\Draw            ,_ntui_DrawProgressBar,{0,0}}
;  !_GetFuncPointer{*tuiProgressBar\obj\Layout          ,_ntui_LayoutProgressBar,{0,0,0}}
;  !_GetFuncPointer{*tuiProgressBar\obj\DispatchEvent   ,_ntui_DispatchProgressBarEvent,{0,0}}
  !_GetFuncPointer{*tuiProgressBar\obj\CalculateMinSize,_ntui_CalculateProgressBarMinSize,{0,0}}
;  !_GetFuncPointer{*tuiProgressBar\obj\Deinit          ,_ntui_DeinitProgressBar,{0}}
;  !_GetFuncPointer{*tuiProgressBar\obj\SetAttr         ,_ntui_SetProgressBarAttr,{0,0,0}}
;  !_GetFuncPointer{*tuiProgressBar\obj\GetAttr         ,_ntui_GetProgressBarAttr,{0,0,0}}

End If
Function Return *tuiProgressBar
End Function


