; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 0
; Version         = 0.0.0
; NumberOfBuilds  = 7
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 412
; CursorColumn    = 6
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA
#TUI_HAS_GROUP = 1

;/* tuiGroup sub types */
#TUIGROUP_NORMAL      = 0
#TUIGROUP_MENUBAR     = 1

;/* tuiGroup attributes */
#TUIGA_BASE               = #TUIA_USER
#TUIGA_WRAP               = #TUIGA_BASE  + 0
#TUIGA_TITLE              = #TUIGA_BASE  + 1
#TUIGA_IMAGE              = #TUIGA_BASE  + 2
#TUIGA_ORIENTATION        = #TUIGA_BASE  + 3
#TUIGA_SUBCLASSID         = #TUIGA_BASE  + 4
#TUIGA_BORDERTYPE         = #TUIA_BORDERTYPE

#TUIGROUP_MAXWRAP = 32767

NEWTYPE.tuiCalcSize

  needed.w
  same.w
  sizeable.w
  pad.w
  weight.l

End NEWTYPE


NEWTYPE.tuiGroup

  obj.tuiObject            ; tui object header
  orientation.l            ; horizontal or vertical, #TUIORIENT_...
  wrap.l                   ; wrap x objects per line
  subClassID.l             ; subtype #TUIGROUP_...
  *tbi.tuiTBImage          ; optional image in title
  *tmpIn.tuiCalcSize
  tmpInAlloc.l
  *tmpOut.tuiCalcSize
  tmpOutAlloc.l

End NEWTYPE


_ntui_SetGroupAttr:
Function.l _ntui_SetGroupAttr{*group.tuiGroup,ti_Tag.l,ti_Data.l}
  !_ASSERT{*group}
  !_ASSERT{*group\obj\classID=#TUICLASS_GROUP}

  done.l = True
  Select ti_Tag

    Case #TUIGA_TITLE : str_WritePtr{&*group\obj\string,ti_Data}
      If ti_Data><Null AND *group\obj\borderType=#TUIBORDER_NONE Then _ntui_SetGroupAttr{*group,#TUIGA_BORDERTYPE, #TUIBORDER_TITLE}
    Case #TUIGA_IMAGE
      If *group\tbi Then ntui_FreeTBImage{*group\tbi}
      *group\tbi = ntui_CreateTBImage{*group\obj\engine,Peek.s(ti_Data),#TUISIZE_INLINE,#TUISIZE_INLINE}
    Case #TUIGA_WRAP       : *group\wrap       = ti_Data : If *group\wrap<=0 Then *group\wrap = #TUIGROUP_MAXWRAP
    Case #TUIGA_SUBCLASSID : *group\subClassID = ti_Data
    Case #TUIGA_ORIENTATION
      done=False
      If ti_Data = #TUIORIENT_HORIZONTAL Then *group\orientation = ti_Data : done=True
      If ti_Data = #TUIORIENT_VERTICAL   Then *group\orientation = ti_Data : done=True
    Case #TUIGA_BORDERTYPE
      If (ti_Data=#TUIBORDER_NONE)
        *group\obj\padding\left = 0,0,0,0
        *group\obj\margin\left  = 0,0,0,0
      Else
        !tuiCopyRect{*group\obj\padding,*group\obj\engine\defPadding}
        !tuiCopyRect{*group\obj\margin ,*group\obj\engine\defMargin }
      End If
      *group\obj\borderType = ti_Data
    Default
      done = False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_SetGroupAttr,{Null,0,0}}


_ntui_GetGroupAttr:
Function.l _ntui_GetGroupAttr{*group.tuiGroup,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*group}
  !_ASSERT{*group\obj\classID=#TUICLASS_GROUP}

  done.l = True
  Select ti_Tag
    Case #TUIGA_IMAGE       : *ti_Data\l = *group\tbi
    Case #TUIGA_WRAP        : *ti_Data\l = *group\wrap
    Case #TUIGA_SUBCLASSID  : *ti_Data\l = *group\subClassID
    Case #TUIGA_ORIENTATION : *ti_Data\l = *group\orientation
    Case #TUIGA_TITLE       : str_GetPtr{*group\obj\string}
    Default
      done = False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_GetGroupAttr,{Null,0,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawGroup {*group.tuiGroup,*rp.RastPort}                    /
;/                                                                             /
;/ Description:                                                                /
;/ private: Draw a tuiGroup object into the given rastport.
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *group.tuiGroup : tuiGroup                                              /
;/ - *rp.RastPort       : rastport                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawGroup:
Statement _ntui_DrawGroup{*group.tuiGroup,*rp.RastPort,*rpclip.tuiRect}
  !_ASSERT{*group}
  !_ASSERT{*group\obj\classID=#TUICLASS_GROUP}
  !_ASSERT{*rp}
  *engine.tuiEngine = *group\obj\engine
  !_ASSERT{*engine}

  If ((*group\obj\flags&#TUIF_ONSCREEN)=0) Then Statement Return

  !tuiAndRect{bclip.tuiRect,*group\obj\bbox,*rpclip}
  If !tuiValidRect{bclip}=False Then Statement Return

  CNIF #TUI_DEBUG
    !tuiAndRect{iclip.tuiRect,*group\obj\ibox,*rpclip}
    !tuiAndRect{cclip.tuiRect,*group\obj\cbox,*rpclip}
    SetAPen_ *rp,1
    RectFill_ *rp,bclip\left,bclip\top,bclip\right,bclip\bottom
    SetAPen_ *rp,3
    RectFill_ *rp,iclip\left,iclip\top,iclip\right,iclip\bottom
    SetAPen_ *rp,7
    RectFill_ *rp,cclip\left,cclip\top,cclip\right,cclip\bottom
  CEND

  bgTuiPen.l = _ntui_DrawBG{*engine,*rp,*group\obj\bbox,*group\obj\ibox,*rpclip,Null,*group\obj\bgTuiPen,*group\obj\borderType,*group\obj\flags,*group\obj\gradient}

  If (*group\obj\borderType><#TUIBORDER_NONE)
    If !tuiRectInside{*rpclip,*group\obj\cbox}=False

      ;bgDone.l = ntui_DrawBorder{*engine,*rp,*group\obj\bbox,*group\obj\borderType,*group\obj\flags}

      x1.l = *group\obj\bbox\left
      x2.l = *group\obj\bbox\right
      y1.l = *group\obj\bbox\top
      y2.l = *group\obj\bbox\bottom

      xt.l = (x1+x2) / 2
      yt2.l = y1 + *group\obj\border\top-1
      yt2   = y1 + *engine\font[#TUIFONT_NORMAL]\tf_YSize;+1
      If *group\obj\string
        ;_ntui_GetTextRect{*engine,*group\obj\string,tx.tuiRect,*group\obj\flags,*rp}
        tw.l = _ntui_GetTextWidth{*engine,*group\obj\string,*group\obj\flags,*rp}
        ;tw.l = !tuiRectWidth{tx}
        xt - tw/2
      End If

      ;bgTuiPen.l = #TUIPEN_HALFSHINE
      If *group\tbi
        iw.l = ntui_GetTBImageWidth{*group\tbi}
        ih.l = ntui_GetTBImageHeight{*group\tbi}
        xt-iw/2
        tbox.tuiRect\left = xt,y1,xt+iw-1,yt2
        ntui_DrawTBImage{*group\tbi,*rp,tbox,tbox,*group\obj\flags,#TUIPEN_TRANSPARENT};bgTuiPen}
        xt+iw
      End If

      If *group\obj\string
        If (*group\obj\flags&#TUIF_DISABLED)
          tbox.tuiRect\left = xt  ,y1  ,xt+tw,yt2
          _ntui_Print{*engine,*group\obj\string,tbox,tbox,*group\obj\flags,*rp,#TUIPEN_TEXT,#TUIPEN_TRANSPARENT};bgTuiPen}
        Else
          tbox.tuiRect\left =  xt+1,y1+1,xt+tw+1,yt2
          _ntui_Print{*engine,*group\obj\string,tbox,tbox,*group\obj\flags,*rp,#TUIPEN_SHADOW,#TUIPEN_TRANSPARENT};bgTuiPen}
          tbox.tuiRect\left =  xt,y1  ,xt+tw  ,yt2-1
          _ntui_Print{*engine,*group\obj\string,tbox,tbox,*group\obj\flags,*rp,#TUIPEN_WHITE,#TUIPEN_TRANSPARENT}
        End If
      End If
    End If
  End If

  If bgTuiPen><#TUIPEN_TRANSPARENT
    CNIF #TUI_DEBUG
    SetAPen_ *rp,*engine\pen[#TUIPEN_GREEN]
    CELSE
    SetAPen_ *rp,*engine\pen[*group\obj\bgTuiPen]
    CEND
    !tuiAndRect{iclip.tuiRect,*group\obj\ibox,*rpclip}
    If !tuiValidRect{iclip}
      RectFill_ *rp,iclip\left,iclip\top,iclip\right,iclip\bottom
    End If
  End If

  If *group\obj\child=Null
    !tuiRemBorder{ebox.tuiRect,*group\obj\cbox,*engine\defMargin}
    _ntui_DrawEmptyBox{*engine,*rp,ebox,#TUIPEN_SHADOW}
  Else
    *child.tuiObject = *group\obj\child
    While *child
      If !tuiRectOverlap{*child\bbox,*rpclip}
        !tuiAndRect{childclip.tuiRect,*child\bbox,*rpclip}
  ;    If !tuiValidRect{childclip}
        _ntui_Draw{*child,*rp,childclip}
      End If
      *child = *child\next_
    Wend
  End If

End Statement
!_MakeGlobalFuncPointer{_ntui_DrawGroup,{Null,Null,Null}}


_ntui_CalculateGroupMinSize:
Statement _ntui_CalculateGroupMinSize{*group.tuiGroup,*rp.RastPort}
  !_ASSERT{*group}
  !_ASSERT{*group\obj\classID=#TUICLASS_GROUP}
  !_ASSERT{*rp}

  maxmin.tuiPixel\x = 0,0
  same.tuiPixel\x   = 0,0

  _ntui_GetBorderSize{*group\obj\engine,*group\obj\borderType,*group\obj\flags,*group\obj\border}

  *group\obj\minsize\x    = 0,0
  numChildren.l     = 0
  *child.tuiObject = *group\obj\child
  While *child
    numChildren+1
    _ntui_CalculateMinSize{*child,*rp}
    If same\x<*child\minsize\x Then same\x=*child\minsize\x
    If same\y<*child\minsize\y Then same\y=*child\minsize\y
    *child=*child\next_
  Wend

  count.l = 0
  *child.tuiObject = *group\obj\child
  While *child

    count+1
    If (*group\obj\flags&#TUIF_SAMEWIDTH)  AND ((*child\flags&#TUIF_FIXWIDTH )=0) Then *child\minsize\x = same\x
    If (*group\obj\flags&#TUIF_SAMEHEIGHT) AND ((*child\flags&#TUIF_FIXHEIGHT)=0) Then *child\minsize\y = same\y

    inline.tuiPixel\x = 0,0
    *test.tuiObject = *group\obj\child
    testcount.l = 0

    While *test
      testcount+1
      If ((testcount MOD *group\wrap)=(count MOD *group\wrap))
        tmx.l = *test\minsize\x  + !tuiBorderWidth{*test\margin}
        tmy.l = *test\minsize\y  + !tuiBorderHeight{*test\margin}
        If inline\x<tmx Then inline\x=tmx
        If inline\y<tmy Then inline\y=tmy
      End If
      *test = *test\next_
    Wend

    If *group\orientation = #TUIORIENT_HORIZONTAL
        ;If ((*child\flags&#TUIF_FIXWIDTH )=0) Then *child\minsize\x = inline\x ; we want them to have all the same width

      minX.l = inline\x         ;+ *child\margin\left + *child\margin\right + *child\border\west  + *child\border\east
      minY.l = *child\minsize\y + *child\margin\top + *child\margin\bottom

      maxmin\x + minX
      If maxmin\y<minY Then maxmin\y=minY

      If ((count MOD *group\wrap)=0 OR count=numChildren)
        If maxmin\x>*group\obj\minsize\x Then *group\obj\minsize\x = maxmin\x
        *group\obj\minsize\y + maxmin\y
        maxmin\x = 0,0
      End If

    Else
      ;If ((*child\flags&#TUIF_FIXHEIGHT )=0) Then *child\minsize\y = inline\y ; we want all objects the same row to have the same height

      minX.l = *child\minsize\x + *child\margin\left + *child\margin\right
      minY.l = inline\y         ;+ *child\margin\top + *child\margin\bottom + *child\border\north + *child\border\south

      If maxmin\x<minX Then maxmin\x=minX
      maxmin\y + minY
      If ((count MOD *group\wrap)=0 OR count=numChildren)
        If maxmin\y>*group\obj\minsize\y Then *group\obj\minsize\y = maxmin\y
        *group\obj\minsize\x + maxmin\x
        maxmin\x = 0,0
      End If
    End If
    *child=*child\next_
  Wend

  *group\obj\minsize\x +  !tuiBorderWidth{*group\obj\padding}   +!tuiBorderWidth{*group\obj\border}
  *group\obj\minsize\y +  !tuiBorderHeight{*group\obj\padding}  +!tuiBorderHeight{*group\obj\border}

  If *group\obj\string
  ;   _ntui_GetTextLengthEx{*group\objEngine,*group\obj\string,*group\obj\stringTE,*group\obj\flags,*rp}
  ;   fw.l = *group\obj\stringTE\te_Extent\MaxX-*group\obj\stringTE\te_Extent\MinX+1
  ;   If fw>*group\obj\minsize\x Then *group\obj\minsize\x = fw
  ;   *group\obj\border\north = *group\obj\stringTE\te_Extent\MaxY-*group\obj\stringTE\te_Extent\MinY +1+1
  End If

End Statement
!_MakeGlobalFuncPointer{_ntui_CalculateGroupMinSize,{Null,Null}}


_ntui_LayoutGroup:
Statement _ntui_LayoutGroup{*group.tuiGroup,*rp.RastPort,*bbox.tuiRect}
  !_ASSERT{*group}
  !_ASSERT{*group\obj\classID=#TUICLASS_GROUP}
  *engine.tuiEngine = *group\obj\engine
  !_ASSERT{*engine}

  If *bbox                                                            ; update bounding box
    *group\obj\bbox\left = *bbox\left,*bbox\top,*bbox\right,*bbox\bottom
  Else
    ; -we are ok with bounds...
  End If
  !tuiRemBorder{*group\obj\ibox,*group\obj\bbox,*group\obj\border}
  !tuiRemBorder{*group\obj\cbox,*group\obj\ibox,*group\obj\padding}

  *group\obj\flags    = *group\obj\flags | (#TUIF_ONSCREEN|#TUIF_DIRTY)

  numChildren.l   = 0
  *test.tuiObject = *group\obj\child        ; get the number of children
  While *test : *test = *test\next_ : numChildren+1 : Wend

  If numChildren<=0 Then Statement Return

  numOut.l = (numChildren+*group\wrap-1) /  *group\wrap ; number of wrappings
  numIn.l = *group\wrap                 ; number of wrappings
  If numIn>numChildren Then numIn=numChildren

  If numIn>*group\tmpInAlloc OR *group\tmpIn=Null
    allocN.l = Max(16,numIn)
    If *group\tmpIn Then FreeVec_ *group\tmpIn
    *group\tmpIn  = AllocVec_(allocN * SizeOf.tuiCalcSize,#MEMF_ANY)
    *group\tmpInAlloc = allocN
  End If

  If numOut>*group\tmpOutAlloc OR *group\tmpOut=Null
    allocN.l = Max(16,numOut)
    If *group\tmpOut Then FreeVec_ *group\tmpOut
    *group\tmpOut = AllocVec_(allocN*SizeOf.tuiCalcSize,#MEMF_ANY)
    *group\tmpOutAlloc = allocN
  End If
  *tmpIn.tuiCalcSize  = *group\tmpIn
  *tmpOut.tuiCalcSize = *group\tmpOut

  For n.l=0 To (numOut*SizeOf.tuiCalcSize)/4-1 : Poke.l *tmpOut+n*4,0 : Next
  For n.l=0 To (numIn *SizeOf.tuiCalcSize)/4-1 : Poke.l *tmpIn +n*4,0 : Next

  *inA.tuiCalcSize  = Null
  *outA.tuiCalcSize = Null

  *test.tuiObject = *group\obj\child
  sizeableIn.l  = 0
  sizeableOut.l = 0
  weightIn.l    = 0
  weightOut.l   = 0
  count.l = 0

  While *test
    *inA  = *tmpIn  + (count MOD *group\wrap)*SizeOf.tuiCalcSize
    *outA = *tmpOut + (count  /  *group\wrap)*SizeOf.tuiCalcSize

    minX.l = *test\minsize\x + *test\margin\left + *test\margin\right
    minY.l = *test\minsize\y + *test\margin\top  + *test\margin\bottom
    *outA\weight + *test\weight
    ;*outA\weight + !tuiRectWidth{*test\bbox}

    If *group\orientation=#TUIORIENT_HORIZONTAL
      If minX>*inA\needed  Then *inA\needed  = minX
      If minY>*outA\needed Then *outA\needed = minY
      If minX>*outA\same   Then *outA\same   = minX
      If minY>*inA\same    Then *inA\same    = minY
      If (*test\flags&#TUIF_FIXWIDTH) =0 Then If *inA\sizeable =False Then *inA\sizeable =True : sizeableIn+1
      If (*test\flags&#TUIF_FIXHEIGHT)=0 Then If *outA\sizeable=False Then *outA\sizeable=True : sizeableOut+1
    Else
      If minX>*outA\needed Then *outA\needed = minX
      If minY>*inA\needed  Then *inA\needed  = minY
      If minX>*inA\same    Then *inA\same    = minX
      If minY>*outA\same   Then *outA\same   = minY
      If (*test\flags&#TUIF_FIXWIDTH) =0 Then If *outA\sizeable=False Then *outA\sizeable=True : sizeableOut+1
      If (*test\flags&#TUIF_FIXHEIGHT)=0 Then If *inA\sizeable =False Then *inA\sizeable =True : sizeableIn+1
    End If
    *test = *test\next_  : count+1
  Wend

  ; TODO: Disabled for testing
  If sizeableOut<=0 Then sizeableOut=numOut
  If sizeableIn <=0 Then sizeableIn=numIn

  ;If *group\obj\userID = @"TEST" Then error{"Groupsize: "+Str$(width)+" / "+Str$(*group\obj\minsize\x)}
  *child.tuiObject = *group\obj\child
  If *group\orientation=#TUIORIENT_HORIZONTAL ; horizontal orientation
    spaceIn.l  = !tuiRectWidth{*group\obj\cbox} ;width
    minIn.l    = *group\obj\minsize\x - !tuiBorderWidth{*group\obj\padding} - !tuiBorderWidth{*group\obj\border}
    inP.l      = *group\obj\cbox\left ; x
    spaceOut.l = !tuiRectHeight{*group\obj\cbox} ;height
    minOut.l   = *group\obj\minsize\y - !tuiBorderHeight{*group\obj\padding} - !tuiBorderHeight{*group\obj\border}
    outX.l     = *group\obj\cbox\top ; y
  Else
    spaceIn.l  = !tuiRectHeight{*group\obj\cbox}; height
    minIn.l    = *group\obj\minsize\y  - !tuiBorderHeight{*group\obj\padding} - !tuiBorderHeight{*group\obj\border}
    inP        = *group\obj\cbox\top ; y
    spaceOut.l = !tuiRectWidth{*group\obj\cbox} ;width
    minOut.l   = *group\obj\minsize\x  - !tuiBorderWidth{*group\obj\padding} - !tuiBorderWidth{*group\obj\border}
    outX       = *group\obj\cbox\left ; x
  End If

  ;SetAPen_ *rp,*engine\pen[#TUIPEN_BLUE]
  ;RectFill_ *rp,*group\obj\cbox\left,*group\obj\cbox\top,*group\obj\cbox\right,*group\obj\cbox\bottom
  morespaceOut.l = spaceOut - minOut

  nOut.l       = outX       ; start here
  count.l      = 0
  so.l         = sizeableOut
  While *child

    morespaceIn.l = spaceIn- minIn ; space we have left over
    totalspaceIn.l = morespaceIn
    si.l          = sizeableIn
    inX.l         = inP
    c.l           = *group\wrap
    addspaceOut.l = 0
    While *child AND c>0
      c-1
      *outA = *tmpOut + (count  /  *group\wrap)*SizeOf.tuiCalcSize
      *inA  = *tmpIn  + (count MOD *group\wrap)*SizeOf.tuiCalcSize
      count+1

      inS.l = *inA\needed
      If (*inA\sizeable OR sizeableIn=numIn)
        If *outA\weight<=0
          addspaceIn.l = morespaceIn/si
        Else
          addspaceIn.l = totalspaceIn * *child\weight/*outA\weight
          If addspaceIn>morespaceIn Then addspaceIn=morespaceIn
          If addspaceIn<0 Then addspaceIn=0
        End If
        inS + addspaceIn : si-1 : morespaceIn-addspaceIn
      End If

      outS.l = *outA\needed
      If (*outA\sizeable OR sizeableOut=numOut)
        addspaceOut.l = morespaceOut/so : outS + addspaceOut
      End If

      If (*child\flags&#TUIF_FIXWIDTH) AND False
        gap.l = nw.l-*child\minsize\x
        If (*child\flags&#TUIF_RIGHT)
          *child\margin\left = gap : *child\margin\right = 0
        Else
          If (*child\flags&#TUIF_LEFT)
            *child\margin\left = 0 : *child\margin\right = gap
          Else
            *child\margin\left = gap/2 : *child\margin\right = gap-*child\margin\left
          End If
        End If
      Else
        ;*child\gapNW\x = *child\margin\left : *child\gapSE\x = *child\margin\right
      End If

      If (*child\flags&#TUIF_FIXHEIGHT) AND False
        gap.l = nh.l-*child\minsize\y
        If (*child\flags&#TUIF_BOTTOM)
          *child\margin\top = gap : *child\margin\bottom = 0
        Else
          If (*child\flags&#TUIF_TOP)
             *child\margin\top = 0 : *child\margin\bottom = gap
          Else
            *child\margin\top = gap/2 : *child\margin\bottom = gap-*child\margin\top
          End If
        End If
      Else
        ;*child\gapNW\y = *child\margin\top : *child\gapSE\y = *child\margin\bottom
      End If

      If *group\orientation=#TUIORIENT_HORIZONTAL
        lbox.tuiRect\left   = inX           + *child\margin\left
        lbox\top            = outX          + *child\margin\top
        lbox\right          = inX  + inS -1 - *child\margin\right
        lbox\bottom         = outX + outS-1 - *child\margin\bottom
        _ntui_Layout{*child,*rp,lbox}
        ;inX + *child\margin\left + *child\margin\right
      Else
        lbox.tuiRect\left   = outX            + *child\margin\left
        lbox\top            = inX             + *child\margin\top
        lbox\right          = outX  + outS -1 - *child\margin\right
        lbox\bottom         = inX   + inS  -1 - *child\margin\bottom
        _ntui_Layout{*child,*rp,lbox}
        ;outX + *child\margin\top + *child\margin\bottom
      End If
      inX + inS
      *child=*child\next_
    Wend
    If (*outA\sizeable OR sizeableOut=numOut)
      morespaceOut - addspaceOut : so-1
    End If
    outX + outS
  Wend

End Statement
!_MakeGlobalFuncPointer{_ntui_LayoutGroup,{Null,Null,Null}}


_ntui_DeinitGroup:
Statement _ntui_DeinitGroup{*group.tuiGroup}
  !_ASSERT{*group}
  !_ASSERT{*group\obj\classID=#TUICLASS_GROUP}

  If *group\tmpIn  Then FreeVec_ *group\tmpIn  : *group\tmpIn  = Null
  If *group\tmpOut Then FreeVec_ *group\tmpOut : *group\tmpOut = Null
  If *group\tbi    Then ntui_FreeTBImage{*group\tbi} : *group\tbi  = Null

End Statement
!_MakeGlobalFuncPointer{_ntui_DeinitGroup,{Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_BeginVGroup {wrap.l,@title.s,@flags.l,@userID.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ Begin a new tuiGroup that arranges its sub-tuiObjects vertically. After all sub-tuiObjects are created, you must call ntui_EndGroup.                                           /
;/ Note: a suitable parent object must have been created before you can call this function, such as another tuiGroup or tuiWindow.
;/ Note: a value of 0 or a negativ number for wrapping will switch wrapping off. All sub-tuiObjects will be vertically in-line.
;/                                                                             /
;/ Inputs:                                                                     /
;/ - wrap.l    : maximum number of tuiObject in-line before wrapping occures                                                           /
;/ - title.s   : optional title of the group (group will get a frame then)                                                          /
;/ - flags.l   : flags to control the group                                                         /
;/ - userID.l  : userID of the group                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - *group.tuiGroup  : pointer to the created group                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_BeginGroup:
Function.tuiGroup ntui_BeginGroup{*tagList.TagItem}

  flags.l = #TUIF_CENTER|#TUIF_MIDDLE
  *group.tuiGroup = (.tuiGroup)_ntui_CreateObject{#TUICLASS_GROUP,SizeOf.tuiGroup,flags}
  If *group
    *group\obj\borderType       = #TUIBORDER_NONE
    *group\obj\padding\left     = 0,0,0,0
    *group\obj\margin\left      = 0,0,0,0

    *group\subClassID           = #TUIGROUP_NORMAL
    *group\orientation          = #TUIORIENT_VERTICAL
    *group\wrap                 = #TUIGROUP_MAXWRAP
    *group\obj\bgTuiPen         = #TUIPEN_TRANSPARENT
    *group\tmpIn                = Null
    *group\tmpInAlloc           = 0
    *group\tmpOut               = Null
    *group\tmpOutAlloc          = 0
    *group\tbi                  = Null

    *group\obj\Draw             = *_ntui_DrawGroup
    *group\obj\Layout           = *_ntui_LayoutGroup
    *group\obj\DispatchEvent    = Null ;*_ntui_DispatchGroupEvent
    *group\obj\CalculateMinSize = *_ntui_CalculateGroupMinSize
    *group\obj\Deinit           = *_ntui_DeinitGroup
    *group\obj\SetAttr          = *_ntui_SetGroupAttr
    *group\obj\GetAttr          = *_ntui_GetGroupAttr

    If *tagList Then ntui_SetAttrs{*group,*tagList}

    _ntui_BeginChildren{*group}
  End If

  Function Return *group

End Function
!_MakeGlobalFuncPointer{ntui_BeginGroup,{Null}}


ntui_BeginHGroup:
Function.tuiGroup ntui_BeginHGroup{*tagList.TagItem}

  *group.tuiGroup = ntui_BeginGroup{*tagList}
  If *group
    DEFTYPE.tagL10 ltagList : n.l = 0
    ltagList\tag[n]\ti_Tag = #TUIGA_ORIENTATION,#TUIORIENT_HORIZONTAL : n=n+1
    ;ltagList\tag[n]\ti_Tag = #TUIA_SETFLAGS    ,#TUIF_FIXHEIGHT       : n=n+1
    ltagList\tag[n]\ti_Tag = #TAG_DONE         ,0
    ntui_SetAttrs{*group,ltagList}
  End If

  Function Return *group

End Function
!_MakeGlobalFuncPointer{ntui_BeginHGroup,{Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_BeginMenuBar {}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Same as ntui_BeginHGroup, but the sub-tuiObjects will work as a menubar that might appear in the screen-titlebar.
;/* Typically, you will create ntui_MenuTitle objects within this group.                                               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - wrap.l    : maximum number of tuiObject in-line before wrapping occures                                                           /
;/ - title.s   : optional title of the group (group will get a frame then)                                                          /
;/ - flags.l   : flags to control the group                                                         /
;/ - userID.l  : userID of the group                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - *group.tuiGroup  : pointer to the created group                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_BeginMenuBar:
Function.tuiGroup ntui_BeginMenuBar{*tagList.TagItem}

  *group.tuiGroup = ntui_BeginGroup{*tagList}
  If *group
    *group\subClassID   = #TUIGROUP_MENUBAR
    DEFTYPE.tagL10 ltagList : n.l = 0
    ltagList\tag[n]\ti_Tag = #TUIGA_ORIENTATION,#TUIORIENT_HORIZONTAL : n=n+1
    ltagList\tag[n]\ti_Tag = #TUIA_SETFLAGS    ,#TUIF_FIXHEIGHT       : n=n+1
    ltagList\tag[n]\ti_Tag = #TUIA_BORDERTYPE  ,#TUIBORDER_MENUBAR    : n=n+1
    ltagList\tag[n]\ti_Tag = #TAG_DONE         ,0
    ntui_SetAttrs{*group,ltagList}

  End If

  Function Return *group

End Function
!_MakeGlobalFuncPointer{ntui_BeginMenuBar,{Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_EndGroup {}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ End a group definition.                                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : tuiGroup Object that was just terminated                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_EndGroup:
Function.tuiGroup ntui_EndGroup{}

  *group.tuiGroup = (.tuiGroup)_ntui_EndChildren{#TUICLASS_GROUP}
  Function Return *group

End Function
!_MakeGlobalFuncPointer{ntui_EndGroup,{}}


Statement ntui_InitGroupClass{}

  classID.l = ntui_RegisterClass{"group",(.tuiFunc)*ntui_BeginGroup,(.tuiFunc)*ntui_EndGroup}
  ntui_RegisterAttr{classID,"wrap"       , #TUIGA_WRAP        ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"title"      , #TUIGA_TITLE       ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"image"      , #TUIGA_IMAGE       ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"orientation", #TUIGA_ORIENTATION ,#TUIAT_INT    , #TUIORIENT_VERTICAL, #TUIORIENT_HORIZONTAL }
  ntui_RegisterAttr{classID,"subclassid" , #TUIGA_SUBCLASSID  ,#TUIAT_INT    , 0,0 }

  classID.l = ntui_RegisterClass{"vgroup",(.tuiFunc)*ntui_BeginGroup,(.tuiFunc)*ntui_EndGroup}
  ntui_RegisterAttr{classID,"wrap"       , #TUIGA_WRAP        ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"title"      , #TUIGA_TITLE       ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"image"      , #TUIGA_IMAGE       ,#TUIAT_STRING , 0,0 }

  classID.l = ntui_RegisterClass{"hgroup",(.tuiFunc)*ntui_BeginHGroup,(.tuiFunc)*ntui_EndGroup}
  ntui_RegisterAttr{classID,"wrap"       , #TUIGA_WRAP        ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"title"      , #TUIGA_TITLE       ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"image"      , #TUIGA_IMAGE       ,#TUIAT_STRING , 0,0 }

  classID.l = ntui_RegisterClass{"menubar",(.tuiFunc)*ntui_BeginMenuBar,(.tuiFunc)*ntui_EndGroup}
  ntui_RegisterAttr{classID,"wrap"       , #TUIGA_WRAP        ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"title"      , #TUIGA_TITLE       ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"image"      , #TUIGA_IMAGE       ,#TUIAT_STRING , 0,0 }

End Statement

ntui_InitGroupClass{}
