; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 4
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 203
; CursorColumn    = 95
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA
;//////////////////////////////////////////////////////////////////////////////
;/                                                                            /
;/ NTUI Global functions                                                      /
;/                                                                            /
;//////////////////////////////////////////////////////////////////////////////
Function.l ntui_RegisterClass{className.s,*beginTag.tuiFunc,*endTag.tuiFunc}

  classId.l = tuiGlobal\xmlClassN
  pft_SetString{tuiGlobal\xmlClassMap,LCase$(className),Str$(classId)}
  tuiGlobal\xmlClassA[classId]\attrMap  = pft_Create{}
  tuiGlobal\xmlClassA[classId]\valueMap = pft_Create{}
  tuiGlobal\xmlClassA[classId]\beginTag = *beginTag
  tuiGlobal\xmlClassA[classId]\endTag   = *endTag
  tuiGlobal\xmlClassN+1
  Function Return classId

End Function


Function.l ntui_RegisterAttr{classId.l,attrName.s,attr.l,typ.l,minValue.l,maxValue.l}

  If (tuiGlobal\xmlClassA[classId]\attrMap=Null) Function Return False
  DEFTYPE.tuiXmlAttrDef attrDef
  attrDef\attr     = attr
  attrDef\minValue = minValue
  attrDef\maxValue = maxValue
  attrDef\typ      = typ
  string.s = Hex$(attrDef\attr)+Hex$(attrDef\typ)+Hex$(attrDef\minValue)+Hex$(attrDef\maxValue)
  pft_SetString{tuiGlobal\xmlClassA[classId]\attrMap,LCase$(attrName),string}
  Function Return True

End Function


Function.l ntui_RegisterValue{classId.l,valueName.s,value.l}

  If (tuiGlobal\xmlClassA[classId]\valueMap=Null) Function Return False
  pft_SetString{tuiGlobal\xmlClassA[classId]\valueMap,LCase$(valueName),Str$(value)}
  Function Return True

End Function


Function.l ntui_FindClassID{className.s}

  classId.l = -1
  item.s = pft_GetString{tuiGlobal\xmlClassMap,LCase$(className)}
  If item
    classId = Vallong(item)
  End If
  Function Return classId

End Function


Function.l ntui_FindAttr{classId.l,attrName.s,*attr.tuiXmlAttrDef}

  item.s = pft_GetString{tuiGlobal\xmlClassA[classId]\attrMap,LCase$(attrName)}
  If (item="") item = pft_GetString{tuiGlobal\xmlClassA[0]\attrMap,LCase$(attrName)}
  If item
    *attr\attr     = Vallong("$"+Mid$(item, 1,8))
    *attr\typ      = Vallong("$"+Mid$(item, 9,8))
    *attr\minValue = Vallong("$"+Mid$(item,17,8))
    *attr\maxValue = Vallong("$"+Mid$(item,25,8))
    Function Return True
  End If
  Function Return False

End Function

Function.l ntui_FindValue{classId.l,valueName.s}

  value.l = 0
  item.s = pft_GetString{tuiGlobal\xmlClassA[classId]\valueMap,LCase$(valueName)}
  If (item="") item = pft_GetString{tuiGlobal\xmlClassA[0]\valueMap,LCase$(valueName)}
  If item
    value = Vallong(item)
  Else
    value = Vallong(valueName)
  End If
  Function Return value

End Function


NEWTYPE.ntuiScanHandle
  *iter.pftiterator
  lock.l
End NEWTYPE


Function.ntuiScanHandle ntui_BeginScanClasses{prefix.s}

  *sh.ntuiScanHandle = AllocVec_(SizeOf.ntuiScanHandle,#MEMF_CLEAR)
  *sh\lock = 0
  *sh\iter = pft_Iterate{tuiGlobal\xmlClassMap, prefix}

  Function Return *sh

End Function


Function.ntuiScanHandle ntui_BeginScanAttrs{className.s,prefix.s}

  *sh.ntuiScanHandle = AllocVec_(SizeOf.ntuiScanHandle,#MEMF_CLEAR)
  classId.l = ntui_FindClassID{className}
  If (classId < 0) Function Return Null
  *sh\lock = 0
  *sh\iter = pft_Iterate{tuiGlobal\xmlClassA[classId]\attrMap, prefix}

  Function Return *sh

End Function


Function.s ntui_GetNextScanName{*sh.ntuiScanHandle}

  If (*sh)
    If pft_HasNext{*sh\iter}
      Function Return pft_GetIteratorKey{*sh\iter}
    End If
  End If

  Function Return ""

End Function


Statement ntui_EndScan{*sh.ntuiScanHandle}

  If (*sh)
    pft_FreeIterator{*sh\iter}
    FreeVec_ *sh
  End If

End Statement


Function.l _ntui_Init{}
  !_ASSERT{tuiGlobal\cookie><#TUI_COOKIE}

  ;/ * Init CRC32 checksum Lookup table */                                       /
  CRC_c.l=0 : CRC_n.l=0 : CRC_k.l=0
  For CRC_n = 0 To 255
    CRC_c = CRC_n
    For CRC_k = 0 To 7
      If (CRC_c & 1) Then CRC_c = Xor($edb88320 , (CRC_c LSR 1)) : Else CRC_c = CRC_c LSR 1
      tuiGlobal\CRC32_LUT[CRC_n] = CRC_c
    Next
  Next

  ;/ * Init temp Buffer */                                                       /
  InitSemaphore_ tuiGlobal\tempBuffer\lock
  tuiGlobal\tempBuffer\tmpP         = Null
  tuiGlobal\tempBuffer\tmpByteSize  = 0

  ;/ * init build-helper */                                                      /
  InitSemaphore_ tuiGlobal\buildHelper\lock
  tuiGlobal\buildHelper\engine   = Null
  tuiGlobal\buildHelper\current  = Null
  tuiGlobal\buildHelper\parent   = Null
  tuiGlobal\buildHelper\prev     = Null
  tuiGlobal\buildHelper\rootWin  = Null
  tuiGlobal\buildHelper\windowDepth = 0

  ;/ * init bitmap cache */                                                      /
  InitSemaphore_ tuiGlobal\bitMapCache\lock
  tuiGlobal\bitMapCache\tuiBitMapsUsed  = 0
  tuiGlobal\bitMapCache\tuiBitMapsAlloc = 0
  tuiGlobal\bitMapCache\tuiBitMapA      = Null

  ;/* init mouse pointers */
  If _ntui_InitPointers{} = False Then Function Return False
  tuiGlobal\cookie = #TUI_COOKIE

  tuiGlobal\xmlClassMap = pft_Create{}
;  InitSemaphore_ tuiGlobal\resourceTracker\lock
;  tuiGlobal\resourceTracker\engineL = Null

  ;/* get default callbacks */
  !_GetFuncPointer{tuiGlobal\defaultNotifyCallback   ,_ntui_DefaultNotifyCallback,{Null,Null,Null}}

  Function Return True
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_Free {}                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ private: free ntui.library                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_Free{}

  !_ASSERT{tuiGlobal\cookie=#TUI_COOKIE}
  ; free all tuiengines, or do we trust the users?

  _ntui_FreeBitMapCache{} ; free all images in the bitmap cache
  _ntui_FreeTempBuffer{}  ; free the multi-purpose temporary buffer
  _ntui_FreePointers{}

  If tuiGlobal\xmlClassMap Then pft_Free{tuiGlobal\xmlClassMap} : tuiGlobal\xmlClassMap = Null ; free prefixtree alloced space  tomsmart1

  ObtainSemaphore_ tuiGlobal\tempBuffer\lock
  ObtainSemaphore_ tuiGlobal\buildHelper\lock
  ObtainSemaphore_ tuiGlobal\bitMapCache\lock

End Statement

!autoexit{_ntui_Free}
