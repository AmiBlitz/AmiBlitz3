; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 18
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 647
; CursorColumn    = 1
; LabelSearch     = "eventpo"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA
;TUI_HAS_ENGINE = 1
;#TUICLASS_ENGINE = 123

; .tuiEngine and #TUICLASS_ENGINE is defined in definitions.ab3

#TUIEA_BASE              = #TUIA_USER
#TUIEA_SKINPATH          = #TUIEA_BASE +  0
#TUIEA_USESKIN           = #TUIEA_BASE +  1
#TUIEA_USEAISS           = #TUIEA_BASE +  2
#TUIEA_BORDERSTYLE       = #TUIEA_BASE +  3
#TUIEA_DEFMARGIN         = #TUIEA_BASE +  4
#TUIEA_DEFLEFTMARGIN     = #TUIEA_BASE +  5
#TUIEA_DEFTOPMARGIN      = #TUIEA_BASE +  6
#TUIEA_DEFRIGHTMARGIN    = #TUIEA_BASE +  7
#TUIEA_DEFBOTTOMMARGIN   = #TUIEA_BASE +  8
#TUIEA_DEFPADDING        = #TUIEA_BASE +  9
#TUIEA_DEFLEFTPADDING    = #TUIEA_BASE + 10
#TUIEA_DEFTOPPADDING     = #TUIEA_BASE + 11
#TUIEA_DEFRIGHTPADDING   = #TUIEA_BASE + 12
#TUIEA_DEFBOTTOMPADDING  = #TUIEA_BASE + 13
#TUIEA_WINDOWREFRESH     = #TUIEA_BASE + 34
#TUIEA_AREXXPORT         = #TUIEA_BASE + 15
#TUIEA_APPNAME           = #TUIEA_BASE + 16
#TUIEA_APPMENUTEXT       = #TUIEA_BASE + 17
#TUIEA_APPICONFILE       = #TUIEA_BASE + 18
#TUIEA_APPICONTEXT       = #TUIEA_BASE + 19
#TUIEA_PUBSCREENNAME     = #TUIEA_BASE + 20
#TUIEA_NORMALFONTFACE    = #TUIEA_BASE + 21
#TUIEA_FIXFONTFACE       = #TUIEA_BASE + 22
#TUIEA_SERIFFONTFACE     = #TUIEA_BASE + 23
#TUIEA_SMALLFONTFACE     = #TUIEA_BASE + 24
#TUIEA_NORMALFONTSIZE    = #TUIEA_BASE + 25
#TUIEA_FIXFONTSIZE       = #TUIEA_BASE + 26
#TUIEA_SERIFFONTSIZE     = #TUIEA_BASE + 27
#TUIEA_SMALLFONTSIZE     = #TUIEA_BASE + 28
#TUIEA_ONMESSAGE         = #TUIEA_BASE + 29
#TUIEA_ONMESSAGECB       = #TUIEA_BASE + 30
#TUIEA_ONICONDROP        = #TUIEA_BASE + 31
#TUIEA_ONICONDROPCB      = #TUIEA_BASE + 32
#TUIEA_ONQUIT            = #TUIEA_BASE + 33
#TUIEA_ONQUITCB          = #TUIEA_BASE + 34
#TUIEA_ONICONIFY         = #TUIEA_BASE + 35
#TUIEA_ONICONIFYCB       = #TUIEA_BASE + 36
#TUIEA_ONPOPUP           = #TUIEA_BASE + 37
#TUIEA_ONPOPUPCB         = #TUIEA_BASE + 38
#TUIEA_FILLSTYLE         = #TUIEA_BASE + 39
#TUIEA_BUFFEREDDRAW      = #TUIEA_BASE + 40
#TUIEA_IMAGEPATH         = #TUIEA_BASE + 41
#TUIEA_AISSPATH          = #TUIEA_BASE + 42

Statement _ntui_SetEngineSkin_deprecated{*engine.tuiEngine}
  !_ASSERT{*engine}
  !_ASSERT{*engine\obj\classID=#TUICLASS_ENGINE}

For n.l=0 To #TUIMAX_SKIN-1
  If *engine\skinImage[n]
    ntui_FreeTBImage{*engine\skinImage[n]}
    *engine\skinImage[n]=Null
  End If

  If *engine\useSkin
    If *engine\skinImageName[n]
      *engine\skinImage[n] = ntui_CreateTBImage{*engine,str_Read{&*engine\skinImageName[n]},-1,-1}
      If *engine\skinImage[n]
        If *engine\skinImage[n]\tuiImage=#TUIIMAGE_UNKNOWN
          *engine\skinImageAvail[n]=False
          ntui_FreeTBImage{*engine\skinImage[n]}
          *engine\skinImage[n] = Null
        Else
          *engine\skinImageAvail[n]=True
        End If
      End If
    End If
  End If
Next

End Statement

RunErrsOff ; debugger must be switched off
Statement FAST ntui_Lock{*obj.tuiObject}

  ObtainSemaphore_ *obj\engine\lock
  
End Statement

Statement FAST ntui_Unlock{*obj.tuiObject}

  ReleaseSemaphore_ *obj\engine\lock
  
End Statement

Function.l FAST ntui_IsLocked{*obj.tuiObject}

  If AttemptSemaphore_ (*obj\engine\lock)
    ReleaseSemaphore_ *obj\engine\lock
    Function Return False
  End If
  
  Function Return True
  
End Function
LastRunErrsMode

Macro ntui_ChangeVariableDirty ; variable, value, flags
      If (`2)><(`1)
        `1 = `2
        `3 | #TUIF_DIRTY
      EndIf
End Macro

_ntui_SetEngineAttr:
Function.l _ntui_SetEngineAttr{*engine.tuiEngine,ti_Tag.l,ti_Data.l}
  !_ASSERT{*engine}
  !_ASSERT{*engine\obj\classID=#TUICLASS_ENGINE}

  done.l = True
  Select ti_Tag
    Case #TUIEA_SKINPATH
      str_WritePtr{&*engine\skinPath,ti_Data}
      ;_ntui_SetEngineSkin{*engine}
      *engine\obj\flags | #TUIF_DIRTY
    Case #TUIEA_USESKIN           : !ntui_ChangeVariableDirty{*engine\useSkin,ti_Data,*engine\obj\flags}
    Case #TUIEA_WINDOWREFRESH     : *engine\windowSmartRefresh = ti_Data
    Case #TUIEA_BUFFEREDDRAW      : *engine\bufferedDraw       = ti_Data : If *engine\bufferedDraw=False Then If *engine\bufferRP Then _ntui_FreeRastPort{*engine\bufferRP} :*engine\bufferRP=Null
    Case #TUIEA_BORDERSTYLE       : !ntui_ChangeVariableDirty{*engine\borderStyle,ti_Data,*engine\obj\flags}
    Case #TUIEA_FILLSTYLE         : !ntui_ChangeVariableDirty{*engine\fillStyle,ti_Data,*engine\obj\flags}
    Case #TUIEA_DEFLEFTMARGIN     : *engine\defMargin\left     = ti_Data
    Case #TUIEA_DEFTOPMARGIN      : *engine\defMargin\top      = ti_Data
    Case #TUIEA_DEFRIGHTMARGIN    : *engine\defMargin\right    = ti_Data
    Case #TUIEA_DEFBOTTOMMARGIN   : *engine\defMargin\bottom   = ti_Data
    Case #TUIEA_DEFLEFTPADDING    : *engine\defPadding\left    = ti_Data
    Case #TUIEA_DEFTOPPADDING     : *engine\defPadding\top     = ti_Data
    Case #TUIEA_DEFRIGHTPADDING   : *engine\defPadding\right   = ti_Data
    Case #TUIEA_DEFBOTTOMPADDING  : *engine\defPadding\bottom  = ti_Data
    Case #TUIEA_DEFPADDING        : *engine\defPadding\left    = ti_Data,ti_Data,ti_Data,ti_Data
    Case #TUIEA_DEFMARGIN         : *engine\defMargin\left     = ti_Data,ti_Data,ti_Data,ti_Data
    Case #TUIEA_USEAISS           : *engine\useAISS            = ti_Data
    Case #TUIEA_IMAGEPATH         : str_WritePtr{&*engine\imagePath ,ti_Data}
    Case #TUIEA_AISSPATH          : str_WritePtr{&*engine\aissPath  ,ti_Data}
    Case #TUIEA_AREXXPORT
      If ti_Data Then string.s = Peek.s(ti_Data):Else string.s=""
      If string
        _ntui_InitRexx{*engine,string}
      Else
        _ntui_FreeRexx{*engine}
      End If

    Case #TUIEA_APPNAME           : str_WritePtr{&*engine\appName      ,ti_Data}

    Case #TUIEA_APPMENUTEXT       :
      If ti_Data Then string.s = Peek.s(ti_Data):Else string.s=""
      If string
        _ntui_InitAppMenu{*engine,string}
      Else
        _ntui_FreeAppMenu{*engine}
      End If

    Case #TUIEA_APPICONFILE       :
      If *engine\appIcon Then reopen.l=True

      If ti_Data Then string.s = Peek.s(ti_Data):Else string.s=""
      If string
        _ntui_InitAppIcon{*engine,string}
        If reopen.l Then ntui_ShowAppIcon{*engine}
      Else
        _ntui_FreeAppIcon{*engine}
      End If

    Case #TUIEA_APPICONTEXT       :
      If *engine\appIcon Then reopen.l=True : ntui_HideAppIcon{*engine}
      If ti_Data Then string.s = Peek.s(ti_Data):Else string.s=""
      If reopen.l Then ntui_ShowAppIcon{*engine,string} : Else str_Write{&*engine\appIconText,string}

    Case #TUIEA_PUBSCREENNAME     :
      If str_Read{&*engine\pubScreenName}><Peek.s(ti_Data)
        str_WritePtr{&*engine\pubScreenName,ti_Data} ; shall we re-open GUI?
        *engine\obj\flags | #TUIF_DIRTY
      End If

    Case #TUIEA_NORMALFONTFACE    : str_WritePtr{&*engine\fontName[#TUIFONT_NORMAL]      ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_NORMALBOLD]  ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_NORMALITALIC],ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_NORMALIB]    ,ti_Data}
    Case #TUIEA_FIXFONTFACE       : str_WritePtr{&*engine\fontName[#TUIFONT_FIX]         ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_FIXBOLD]     ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_FIXITALIC]   ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_FIXIB]       ,ti_Data}
    Case #TUIEA_SERIFFONTFACE     : str_WritePtr{&*engine\fontName[#TUIFONT_SERIF]       ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_SERIFBOLD]   ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_SERIFITALIC] ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_SERIFIB]     ,ti_Data}
    Case #TUIEA_SMALLFONTFACE     : str_WritePtr{&*engine\fontName[#TUIFONT_SMALL]       ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_SMALLBOLD]   ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_SMALLITALIC] ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_SMALLIB]     ,ti_Data}
    Case #TUIEA_NORMALFONTSIZE    : *engine\fontSize[#TUIFONT_NORMAL]       = ti_Data
                                    *engine\fontSize[#TUIFONT_NORMALBOLD]   = ti_Data
                                    *engine\fontSize[#TUIFONT_NORMALITALIC] = ti_Data
                                    *engine\fontSize[#TUIFONT_NORMALIB]     = ti_Data
    Case #TUIEA_FIXFONTSIZE       : *engine\fontSize[#TUIFONT_FIX]          = ti_Data
                                    *engine\fontSize[#TUIFONT_FIXBOLD]      = ti_Data
                                    *engine\fontSize[#TUIFONT_FIXITALIC]    = ti_Data
                                    *engine\fontSize[#TUIFONT_FIXIB]        = ti_Data
    Case #TUIEA_SERIFFONTSIZE     : *engine\fontSize[#TUIFONT_SERIF]        = ti_Data
                                    *engine\fontSize[#TUIFONT_SERIFBOLD]    = ti_Data
                                    *engine\fontSize[#TUIFONT_SERIFITALIC]  = ti_Data
                                    *engine\fontSize[#TUIFONT_SERIFIB]      = ti_Data
    Case #TUIEA_SMALLFONTSIZE     : *engine\fontSize[#TUIFONT_SMALL]        = ti_Data
                                    *engine\fontSize[#TUIFONT_SMALLBOLD]    = ti_Data
                                    *engine\fontSize[#TUIFONT_SMALLITALIC]  = ti_Data
                                    *engine\fontSize[#TUIFONT_SMALLIB]      = ti_Data
    Case #TUIEA_ONMESSAGE         : str_WritePtr{&*engine\onMessage\notifyID  ,ti_Data}
    Case #TUIEA_ONICONDROP        : str_WritePtr{&*engine\onIconDrop\notifyID ,ti_Data}
    Case #TUIEA_ONQUIT            : str_WritePtr{&*engine\onQuit\notifyID     ,ti_Data}
    Case #TUIEA_ONICONIFY         : str_WritePtr{&*engine\onIconify\notifyID  ,ti_Data}
    Case #TUIEA_ONPOPUP           : str_WritePtr{&*engine\onPopup\notifyID    ,ti_Data}
    Case #TUIEA_ONMESSAGE         : *engine\onMessage\callback  = ti_Data
    Case #TUIEA_ONICONDROP        : *engine\onIconDrop\callback = ti_Data
    Case #TUIEA_ONQUIT            : *engine\onQuit\callback     = ti_Data
    Case #TUIEA_ONICONIFY         : *engine\onIconify\callback  = ti_Data
    Case #TUIEA_ONPOPUP           : *engine\onPopup\callback    = ti_Data

    Default
      done=False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_SetEngineAttr,{Null,0,0}}


_ntui_GetEngineAttr:
Function.l _ntui_GetEngineAttr{*engine.tuiEngine,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*engine}
  !_ASSERT{*engine\obj\classID=#TUICLASS_ENGINE}

  done.l = True
  Select ti_Tag
    Case #TUIEA_SKINPATH          : *ti_Data\l = str_GetPtr{*engine\skinPath}
    Case #TUIEA_IMAGEPATH         : *ti_Data\l = str_GetPtr{*engine\imagePath}
    Case #TUIEA_AISSPATH          : *ti_Data\l = str_GetPtr{*engine\aissPath}
    Case #TUIEA_USESKIN           : *ti_Data\l = *engine\useSkin
    Case #TUIEA_BORDERSTYLE       : *ti_Data\l = *engine\borderStyle
    Case #TUIEA_FILLSTYLE         : *ti_Data\l = *engine\fillStyle
    Case #TUIEA_BUFFEREDDRAW      : *ti_Data\l = *engine\bufferedDraw
    Case #TUIEA_DEFLEFTMARGIN     : *ti_Data\l = *engine\defMargin\left
    Case #TUIEA_DEFTOPMARGIN      : *ti_Data\l = *engine\defMargin\top
    Case #TUIEA_DEFRIGHTMARGIN    : *ti_Data\l = *engine\defMargin\right
    Case #TUIEA_DEFBOTTOMMARGIN   : *ti_Data\l = *engine\defMargin\bottom
    Case #TUIEA_DEFLEFTPADDING    : *ti_Data\l = *engine\defPadding\left
    Case #TUIEA_DEFTOPPADDING     : *ti_Data\l = *engine\defPadding\top
    Case #TUIEA_DEFRIGHTPADDING   : *ti_Data\l = *engine\defPadding\right
    Case #TUIEA_DEFBOTTOMPADDING  : *ti_Data\l = *engine\defPadding\bottom
    Case #TUIEA_USEAISS           : *ti_Data\l = *engine\useAISS
    Case #TUIEA_WINDOWREFRESH     : *ti_Data\l = *engine\windowSmartRefresh
    Case #TUIEA_AREXXPORT         : *ti_Data\l = str_GetPtr{*engine\rxPortName}
    Case #TUIEA_APPNAME           : *ti_Data\l = str_GetPtr{*engine\appName}
    Case #TUIEA_APPMENUTEXT       : *ti_Data\l = str_GetPtr{*engine\appMenuName}
    Case #TUIEA_APPICONFILE       : *ti_Data\l = str_GetPtr{*engine\appIconFile}
    Case #TUIEA_APPICONTEXT       : *ti_Data\l = str_GetPtr{*engine\appIconText}
    Case #TUIEA_PUBSCREENNAME     : *ti_Data\l = str_GetPtr{*engine\pubScreenName}
    Case #TUIEA_NORMALFONTFACE    : *ti_Data\l = str_GetPtr{*engine\fontName[#TUIFONT_NORMAL]}
    Case #TUIEA_FIXFONTFACE       : *ti_Data\l = str_GetPtr{*engine\fontName[#TUIFONT_FIX]}
    Case #TUIEA_SERIFFONTFACE     : *ti_Data\l = str_GetPtr{*engine\fontName[#TUIFONT_SERIF]}
    Case #TUIEA_SMALLFONTFACE     : *ti_Data\l = str_GetPtr{*engine\fontName[#TUIFONT_SMALL]}
    Case #TUIEA_NORMALFONTSIZE    : *ti_Data\l = *engine\fontSize[#TUIFONT_NORMAL]
    Case #TUIEA_FIXFONTSIZE       : *ti_Data\l = *engine\fontSize[#TUIFONT_FIX]
    Case #TUIEA_SERIFFONTSIZE     : *ti_Data\l = *engine\fontSize[#TUIFONT_SERIF]
    Case #TUIEA_SMALLFONTSIZE     : *ti_Data\l = *engine\fontSize[#TUIFONT_SMALL]
    Case #TUIEA_ONMESSAGE         : *ti_Data\l = str_GetPtr{*engine\onMessage\notifyID}
    Case #TUIEA_ONICONDROP        : *ti_Data\l = str_GetPtr{*engine\onIconDrop\notifyID}
    Case #TUIEA_ONQUIT            : *ti_Data\l = str_GetPtr{*engine\onQuit\notifyID}
    Case #TUIEA_ONICONIFY         : *ti_Data\l = str_GetPtr{*engine\onIconify\notifyID}
    Case #TUIEA_ONPOPUP           : *ti_Data\l = str_GetPtr{*engine\onPopup\notifyID}

    Default
      done=False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_GetEngineAttr,{Null,0,Null}}


_ntui_LayoutEngine:
Statement _ntui_LayoutEngine{*engine.tuiEngine,*rp.RastPort,*bbox.tuiRect}
  !_ASSERT{*engine}
  !_ASSERT{*engine\obj\classID=#TUICLASS_ENGINE}

  *child.tuiObject = *engine\obj\child
  While *child
    _ntui_Layout{*child,*rp,*engine\obj\bbox}
    *child=*child\next_
  Wend

End Statement
!_MakeGlobalFuncPointer{_ntui_LayoutEngine,{Null,Null,Null}}


_ntui_DispatchEngineEvent:
Function.l _ntui_DispatchEngineEvent{*engine.tuiEngine,*ev.tuiEvent}
  !_ASSERT{*engine}
  !_ASSERT{*engine\obj\classID=#TUICLASS_ENGINE}
  !_ASSERT{*ev}

  done.l = True
  Select *ev\id
    Case #TUIEV_MESSAGE
      !tuiHandleNotify{done,*engine,onMessage,*ev}
    Case #TUIEV_POPUP
      !tuiHandleNotify{done,*engine,onPopup,*ev}
    Case #TUIEV_ICONIFY
      !tuiHandleNotify{done,*engine,onIconify,*ev}
    Case #TUIEV_QUIT
      !tuiHandleNotify{done,*engine,onQuit,*ev}
    Case #TUIEV_ICONDROP
      !tuiHandleNotify{done,*engine,onIconDrop,*ev}
    Default
      done=False
  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_DispatchEngineEvent,{Null,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_Iconify {*engine.tuiEngine}                      /
;/                                                                             /
;/ Description:                                                                /
;/ * re-open all windows, if any... */                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *engine.tuiEngine    : ???                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_CloseScreen{*engine.tuiEngine}
  !_ASSERT{*engine}
  !_ASSERT{*engine\obj\classID=#TUICLASS_ENGINE}

  If *engine\screen_=Null Then Function Return True ; we are already iconified...

  *scr.Screen = *engine\screen_

  ;/* release all pens */
  For tuiPen.l=0 To *engine\pensUsed-1
    If *engine\penInfo[tuiPen]\useCount>0
      ReleasePen_ *scr\ViewPort\ColorMap,*engine\pen[tuiPen]
      *engine\pen[tuiPen]=0
    End If
  Next

  ;/* close all fonts */
  For font.l=0 To #TUIMAX_FONTS-1
    If *engine\font[font] Then CloseFont_ *engine\font[font] : *engine\font[font] = Null
  Next

  ; release images (maybe?)
  *engine\rememberScreen = *engine\screen_ ; currently unused
  *engine\screen_        = Null
  If *engine\pubScreenLocked Then UnlockPubScreen_ Null,*scr : *engine\pubScreenLocked=False

  If *engine\snScreenH
    screennotify_RemCloseScreenClient{*engine\snScreenH}
    *engine\snScreenH = 0
  End If

  If *engine\bufferRP Then _ntui_FreeRastPort{*engine\bufferRP} : *engine\bufferRP = Null

  If *engine\ownScreen Then CloseScreen_ *scr : *engine\ownScreen = False
  *engine\cModel         = #TUICM_UNDEFINED

  Function Return True

End Function


Function.l _ntui_ReadPrefs_deprecated{*engine.tuiEngine,prefsfile.s}
  !_ASSERT{*engine}
  !_ASSERT{*engine\obj\classID=#TUICLASS_ENGINE}

*tempP.b = _ntui_ObtainTempBuffer{4096}
If *tempP=Null Then Function Return False
fh.l = Open_ (&prefsfile,#MODE_OLDFILE)
If fh
  *buffP.b = *tempP
  Repeat
    *buffP.b = FGets_(fh,*tempP,4096)
    If *buffP
      l.l = 0
      name.s = ""
      string.s = ""
      value.l = 0
      doName.l = True
      doValue.l = False
      nb.l = 0
      ne.l = 0
      vb.l = 0
      ve.l = 0
      While (Peek.b(*buffP+l)><0)
        If doName=True AND Peek.b(*buffP+l)=@"=" Then doValue=True : doName=False:ne=l-1:vb=l+1
      Wend
      If doValue Then ve = l-1
      If doName  Then ne = l-1
      name     = LCase$(Peeks$(*buffP+nb,ne-nb+1))
      string.s = Peeks$(*buffP+vb,ve-vb+1)
      value.l  = Vallong(string)
      Select LCase$(string)
        Case "yes"   : value=1
        Case "no"    : value=0
        Case "on"    : value=1
        Case "off"   : value=0
        Case "true"  : value=1
        Case "false" : value=0
      End Select
      ; setting the engine attributes...
      ;xmlA.tuiXmlAttr\nameP = Null
      ;ntui_SetAttr{*engine,#TUIA_XMLATTR,xmlA}
    End If
  Until *buffP=Null
End If

Function Return True
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: succ.l = ntui_PopUp {*engine.tuiEngine,@pubname.s,@*scr.Scre:: /
;/ en}                                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ Pop the tui engine up on a screen.                                      /
;/ This reverses the effect of ntui_Iconify.
;/ In iconified mode (or if tui tuiEngine was just created), it is not allowed to open any window. The engine must first "popped" to a screen.
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *engine.tuiEngine : tuiEngine to pop up                                             /
;/ - pubname.s            : name of the PubScreen (e.g. "Workbench")                                                       /
;/ - *scr.Screen          : pointer to a custom screen                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.l               : True if popped up, False if failed                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_OpenScreen{*engine.tuiEngine,@*scr.Screen}
!_ASSERT{*engine}
!_ASSERT{*engine\obj\classID=#TUICLASS_ENGINE}

  If (*engine\screen_) Then Function Return True ; we are already popped-up
  If *scr=-1 OR *scr=Null ; no screen argument, so get public screen
;  *scr=Null
;  *defscr.Screen = Null
;  If pubname=""
;    MaxLen pubname=256
;    GetDefaultPubScreen_ &pubname
;    pubname = Peek.s(&pubname)
;  End If
;  *psl.List = LockPubScreenList_()
;  If *psl
;    *psn.PubScreenNode = (.PubScreenNode)*psl\lh_Head
;    While *psn\psn_Node\ln_Succ
;      If *defscr=Null Then *defscr=*psn\psn_Screen
;      If (*psn\psn_Node\ln_Name)
;      If (LCase$(pubname)=LCase$(Peek.s(*psn\psn_Node\ln_Name)))
;        *scr=*psn\psn_Screen
;        ;error {"Found screen "+pubname}
;      End If
;      End If
;      *psn = (.PubScreenNode)*psn\psn_Node\ln_Succ
;    Wend
;  End If
;  UnlockPubScreenList_
;  If *scr=Null Then *scr=*defscr
    *scr=LockPubScreen_ (str_GetPtr{*engine\pubScreenName})
    If *scr
      *engine\pubScreenLocked = True
    Else
      DEFTYPE.tagL10 tagList : n.l = 0
      tagList\tag[n]\ti_Tag = #SA_LikeWorkbench ,-1 : n+1
      tagList\tag[n]\ti_Tag = #SA_Title         ,str_GetPtr{*engine\appName}       : n+1
      tagList\tag[n]\ti_Tag = #SA_PubName       ,str_GetPtr{*engine\pubScreenName} : n+1
      ;If \scr_sysfont<>-1 Then staglist(n)\ti_Tag = #SA_SysFont      ,\scr_sysfont : n+1
      ;If \screenfont<>0   Then staglist(n)\ti_Tag = #SA_Font         ,&\scr_fontta : n+1
      tagList\tag[n]\ti_Tag = #TAG_DONE         ,0

      *scr = OpenScreenTagList_ (0,tagList)
      If *scr Then PubScreenStatus_ *scr,0 : *engine\ownScreen = True

    End If


  End If

  If (*scr = Null) Then Function Return False ; no screen provided and no pubscreen!
  succ.l = False
  *engine\screen_ = *scr
  *engine\cModel = #TUICM_4COLOR
  d.l = GetBitMapAttr_(*scr\BitMap,#BMA_DEPTH)
  If d>4 Then *engine\cModel = #TUICM_COLORMAPPED
  If d>8 Then *engine\cModel = #TUICM_TRUECOLOR
  If d<=0 Then *engine\cModel = #TUICM_TRUECOLOR

  *engine\obj\bbox\left = 0,0,*scr\Width-1,*scr\Height-1
  !tuiCopyRect{*engine\obj\ibox,*engine\obj\bbox}
  !tuiCopyRect{*engine\obj\cbox,*engine\obj\ibox}

  ; /* open the basic fonts */
  *engine\font[#TUIFONT_NORMAL]       = _ntui_OpenFont{*engine\fontName[#TUIFONT_NORMAL],*engine\fontSize[#TUIFONT_NORMAL],#TUIF_NORMAL,*scr}
  *engine\font[#TUIFONT_SMALL]        = _ntui_OpenFont{*engine\fontName[#TUIFONT_SMALL ],*engine\fontSize[#TUIFONT_SMALL ],#TUIF_SMALL ,*scr}
  *engine\font[#TUIFONT_FIX]          = _ntui_OpenFont{*engine\fontName[#TUIFONT_FIX   ],*engine\fontSize[#TUIFONT_FIX   ],#TUIF_FIX   ,*scr}
  *engine\font[#TUIFONT_SERIF]        = _ntui_OpenFont{*engine\fontName[#TUIFONT_SERIF ],*engine\fontSize[#TUIFONT_SERIF ],#TUIF_SERIF ,*scr}

  ;/* obtain the pens from system */
  For tuiPen.l=0 To *engine\pensUsed-1
    If *engine\penInfo[tuiPen]\useCount>0
      R.l = (*engine\penInfo[tuiPen]\rgb_ & $00FF0000) LSL  8
      G.l = (*engine\penInfo[tuiPen]\rgb_ & $0000FF00) LSL 16
      B.l = (*engine\penInfo[tuiPen]\rgb_ & $000000FF) LSL 24
      *engine\pen[tuiPen] = ObtainBestPenA_(*engine\screen_\ViewPort\ColorMap,R,G,B,Null)
    End If
  Next

  ;/*estimate the default sizes */
  *engine\defSize[#TUISIZE_MIN          ] = #TUI_MINPIXELSIZE ; minimum possible (usually equals to 8)
  *engine\defSize[#TUISIZE_SMALLFONT    ] = *engine\font[#TUIFONT_SMALL ]\tf_YSize     ; like small font
  *engine\defSize[#TUISIZE_FONT         ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize     ; like normal font
  *engine\defSize[#TUISIZE_SERIFFONT    ] = *engine\font[#TUIFONT_SERIF ]\tf_YSize     ; like serif font
  *engine\defSize[#TUISIZE_FIXFONT      ] = *engine\font[#TUIFONT_FIX   ]\tf_YSize     ; like fix font
  *engine\defSize[#TUISIZE_SMALLINLINE  ] = *engine\font[#TUIFONT_SMALL ]\tf_YSize     ; like small font  +2
  *engine\defSize[#TUISIZE_INLINE       ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize     ; like normal font +2
  *engine\defSize[#TUISIZE_HALFINLINE   ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize/2+1 ; like normal (font +2)/2
  *engine\defSize[#TUISIZE_DOUBLEINLINE ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize*2+1 ; like normal (font +2)/2
  *engine\defSize[#TUISIZE_ONEHALFINLINE] = *engine\font[#TUIFONT_NORMAL]\tf_YSize*3/2+1 ; like normal (font +2)/2
  *engine\defSize[#TUISIZE_SERIFINLINE  ] = *engine\font[#TUIFONT_SERIF ]\tf_YSize     ; like serif font    +2
  *engine\defSize[#TUISIZE_FIXINLINE    ] = *engine\font[#TUIFONT_FIX   ]\tf_YSize     ; like fix font    +2
  *engine\defSize[#TUISIZE_BUTTON       ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize   ; 2 + *engine\defPadding\top+*engine\defPadding\bottom ; like buttons (normal font +2 + pad\y*2)
  *engine\defSize[#TUISIZE_HALFBUTTON   ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize/2
  *engine\defSize[#TUISIZE_KNOB         ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize/2 + 6
  *engine\defSize[#TUISIZE_SCROLLER     ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize/2 + 6
  *engine\defSize[#TUISIZE_NATIVE       ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize*3/2 ; native image resolution
  *engine\defSize[#TUISIZE_EMBLEM       ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize/2 + 3
  *engine\defSize[#TUISIZE_MAX          ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize*2   ; maximum possible

  If ((*engine\defSize[#TUISIZE_SCROLLER]&1) = 0) Then *engine\defSize[#TUISIZE_SCROLLER]+1 ; make the scroller odd size for better arrows

  For n.l=0 To #TUISIZE_MAX
    If *engine\defSize[n]<*engine\defSize[#TUISIZE_MIN] Then *engine\defSize[n]=*engine\defSize[#TUISIZE_MIN]
  Next

  *engine\defStep\x = *engine\defSize[#TUISIZE_INLINE],*engine\defSize[#TUISIZE_INLINE]

  If *engine\snPort
    If *engine\snScreenH Then screennotify_RemCloseScreenClient{*engine\snScreenH}
    *engine\snScreenH = screennotify_AddCloseScreenClient{*engine\screen_,*engine\snPort}
  End If

  succ=True
  Function Return succ

End Function


Statement ntui_ToFront{*engine.tuiEngine}

  !_ASSERT{*engine}
  If *engine\screen_
    ScreenToFront_ *engine\screen_
  End If
  
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeEngine {*engine.tuiEngine}                             /
;/                                                                             /
;/ Description:                                                                /
;/ private: free the tuiEngine
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *engine.tuiEngine    : ???                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitEngine
Statement _ntui_DeinitEngine{*engine.tuiEngine}
  !_ASSERT{*engine}
  !_ASSERT{*engine\obj\classID=#TUICLASS_ENGINE}

  _ntui_CloseScreen{*engine}
  ; semaphore does not need to be freed
  ObtainSemaphore_ *engine\lock

  If *engine\rxPort       Then _ntui_FreeRexx{*engine}

  If *engine\winPort      Then DeleteMsgPort_     *engine\winPort     : *engine\winPort     = Null

  If *engine\snWorkbenchH Then screennotify_RemWorkbenchClient{*engine\snWorkbenchH} : *engine\snWorkbenchH = 0
  If *engine\snScreenH    Then screennotify_RemCloseScreenClient{*engine\snScreenH}  : *engine\snScreenH    = 0
  If *engine\snPort       Then DeleteMsgPort_     *engine\snPort      : *engine\snPort      = Null

  If *engine\notify Then _ntui_DestroyNotify{*engine\notify}
  If *engine\notifyQ\sigBit  Then FreeSignal_        *engine\notifyQ\sigBit : *engine\notifyQ\sigBit = 0
  If *engine\eventQ\sigBit   Then FreeSignal_        *engine\eventQ\sigBit  : *engine\eventQ\sigBit  = 0
  ; flush event Qs?

  If *engine\bufferRP Then _ntui_FreeRastPort{*engine\bufferRP} : *engine\bufferRP = Null
  _ntui_FreeApp{*engine}
  str_Free{&*engine\pubScreenName}
  str_Free{&*engine\appName}
  str_Free{&*engine\appMenuName}
  str_Free{&*engine\appIconFile}
  str_Free{&*engine\appIconText}

  !tuiFreeNotifyHandler{*engine\onPopup}       ; wb menu or icon double click
  !tuiFreeNotifyHandler{*engine\onQuit}        ; app is requested to quit
  !tuiFreeNotifyHandler{*engine\onIconDrop}    ; drop icon on appicon
  !tuiFreeNotifyHandler{*engine\onIconify}     ; iconify
  !tuiFreeNotifyHandler{*engine\onMessage}     ; arexx message

  ;*engine\inputTask = Null
  str_Free{&*engine\skinPath}
  str_Free{&*engine\imagePath}
  str_Free{&*engine\aissPath}

  For font.l=0 To #TUIMAX_FONTS-1
    str_Free{&*engine\fontName[font]}
  Next

  *engine\focus = Null
  *engine\mover = Null
  If *engine\toolTip Then ntui_FreeObject{*engine\toolTip} : *engine\toolTip = Null

  If *engine\undoEngine Then ntui_FreeUndoEngine{*engine\undoEngine} : *engine\undoEngine = Null

  If *engine\eventPool    Then DeletePool_ *engine\eventPool  : *engine\eventPool  = Null
  If *engine\objectPool   Then DeletePool_ *engine\objectPool : *engine\objectPool = Null
  If *engine\notifyPool   Then DeletePool_ *engine\notifyPool : *engine\notifyPool = Null ; remove this pool too tomsmart1

End Statement
!_MakeGlobalFuncPointer{_ntui_DeinitEngine,{Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_CreateEngine {appname.s,@menuname.s,@icon.s,@pubn:: /
;/ ame.s,@*scr.Screen}                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * create a new tui engine */                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - appname.s    : name of the application                                    /
;/ - menuname.s   : optional name for the Workbench App Menu                   /
;/ - icon.s       : optional icon that serves as an app icon                   /
;/ - pubname.s    : optional pubscreen name to popup on                        /
;/ - *scr.Screen  : optional screen pointer to popup on                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : tuiEngine                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_Engine:
Function.tuiEngine ntui_Engine{*tagList.TagItem}

  If tuiGlobal\buildHelper\engine
    *engine.tuiEngine = tuiGlobal\buildHelper\engine
    If *tagList Then ntui_SetAttrs{*engine,*tagList}
    Function Return *engine
  EndIf

  *engine.tuiEngine = (.tuiEngine)_ntui_CreateObject{#TUICLASS_ENGINE,SizeOf.tuiEngine,#TUI_NOFLAGS}

  If *engine
    tuiGlobal\buildHelper\engine = *engine
    *engine\obj\engine           = *engine

    *engine\undoEngine           = ntui_CreateUndoEngine{"T:",250000,250000*1024}

    *engine\defTickDelay         = 2
    *engine\defMargin\left       = 1,1,1,1
    *engine\defPadding\left      = 2,2,2,2
    *engine\defStep\x            = #TUI_MINPIXELSIZE,#TUI_MINPIXELSIZE
    *engine\aissPath             = Null
    *engine\imagePath            = Null
    *engine\skinPath             = Null
    *engine\useSkin              = False
    *engine\borderStyle          = 0
    *engine\windowSmartRefresh   = False
    ;*engine\inputTask            = Null
    *engine\useAISS              = False

    For n.l=0 To #TUIMAX_SIZES-1
      *engine\defSize[n]   = #TUI_MINPIXELSIZE  ; default size of fonts, arrows etc.
    Next

    For n.l=0 To #TUIMAX_FONTS-1
      *engine\font[n]     = Null
      *engine\fontName[n] = Null
      *engine\fontSize[n] = 0
    Next

    *engine\notifyQ\head      = Null
    *engine\notifyQ\tail      = Null
    *engine\notifyQ\sigBit    = AllocSignal_(-1)
    *engine\notifyQ\sigFlag   = 1 LSL *engine\notifyQ\sigBit
    *engine\notifyQ\sigTask   = FindTask_(Null)
    InitSemaphore_ *engine\notifyQ\lock

    *engine\eventQ\head       = Null
    *engine\eventQ\tail       = Null
    *engine\eventQ\sigBit     = AllocSignal_(-1)
    *engine\eventQ\sigFlag    = 1 LSL *engine\eventQ\sigBit
    *engine\eventQ\sigTask    = FindTask_(Null)
    InitSemaphore_ *engine\eventQ\lock

    *engine\notify         = Null
    *engine\eventPool      = CreatePool_(#MEMF_ANY,SizeOf.tuiEvent*64,SizeOf.tuiEvent*2)
    *engine\notifyPool     = CreatePool_(#MEMF_ANY,SizeOf.tuiNotify*64,SizeOf.tuiNotify*2)
    *engine\objectPool     = CreatePool_(#MEMF_ANY,$8000,$4000)

    *engine\pensUsed       = 0
    *engine\bufferedDraw   = False
    *engine\bufferRP       = Null

    *engine\toolTip        = Null
    *engine\lastMouse\x    = 0,0
    *engine\lastSeconds    = 0
    *engine\lastMicros     = 0
    *engine\clickCount     = 0

    *engine\redrawMethod   = #TUIRM_CLEAR;#TUIRD_SMART
    *engine\cModel         = #TUICM_UNDEFINED

    *engine\rxPort         = Null
    *engine\rxPortName     = Null
    *engine\rxMsg          = Null
    *engine\rxString       = Null

    *engine\winPort        = CreateMsgPort_()
    *engine\snPort         = CreateMsgPort_()
    *engine\snWorkbenchH   = screennotify_AddWorkbenchClient{*engine\snPort}
    *engine\snScreenH      = 0

    InitSemaphore_ *engine\lock

    *engine\mover          = Null
    ;*engine\active         = Null
    *engine\focus          = Null
    *engine\restingTime    = 0

    ;/* initialize App functionality (workbench.library) */
    *engine\appName        = Null
    *engine\appMenuName    = Null
    *engine\appIconFile    = Null
    *engine\appIconText    = Null
    *engine\appMenu        = Null
    *engine\appIcon        = Null
    *engine\appIconDO      = Null
    *engine\appPort        = Null
    _ntui_InitApp{*engine}

    !tuiInitNotifyHandler{*engine\onPopup    }    ; menu or icon doubleblick
    !tuiInitNotifyHandler{*engine\onIconDrop }            ; drop icon on icon
    !tuiInitNotifyHandler{*engine\onQuit     }
    !tuiInitNotifyHandler{*engine\onIconify  }
    !tuiInitNotifyHandler{*engine\onMessage  }

    *engine\obj\Draw             = Null
    *engine\obj\Layout           = *_ntui_LayoutEngine
    *engine\obj\DispatchEvent    = *_ntui_DispatchEngineEvent
    *engine\obj\CalculateMinSize = Null
    *engine\obj\Deinit           = *_ntui_DeinitEngine
    *engine\obj\SetAttr          = *_ntui_SetEngineAttr
    *engine\obj\GetAttr          = *_ntui_GetEngineAttr

    InitRastPort_ *engine\buildRP

    ;/* screen settings */
    *engine\pubScreenName   = Null
    *engine\pubScreenLocked = False
    *engine\ownScreen       = False
    *engine\screen_         = Null
    *engine\rememberScreen  = Null

    ntui_ObtainTuiPen{*engine,$C3C3C3,#TUIPEN_BACKGROUND}
    ntui_ObtainTuiPen{*engine,$000000,#TUIPEN_BLACK}
    ntui_ObtainTuiPen{*engine,$FFFFFF,#TUIPEN_WHITE}
    ntui_ObtainTuiPen{*engine,$EEEEEE,#TUIPEN_SHINE}
    ntui_ObtainTuiPen{*engine,$666666,#TUIPEN_SHADOW}
    ntui_ObtainTuiPen{*engine,$DDDDDD,#TUIPEN_HALFSHINE}
    ntui_ObtainTuiPen{*engine,$A0A0A0,#TUIPEN_HALFSHADOW}
    ntui_ObtainTuiPen{*engine,$D0D0D0,#TUIPEN_HALFHALFSHINE}
    ntui_ObtainTuiPen{*engine,$BBBBBB,#TUIPEN_HALFHALFSHADOW}
    ntui_ObtainTuiPen{*engine,(($8090D0&$FEFEFEFE) LSR 1)+(($C3C3C3&$FEFEFEFE) LSR 1),#TUIPEN_HALFMARKER}
    ntui_ObtainTuiPen{*engine,$8090D0,#TUIPEN_MARKER}
    ntui_ObtainTuiPen{*engine,$000000,#TUIPEN_TEXT}
    ntui_ObtainTuiPen{*engine,$EEEEFF,#TUIPEN_ACTIVETEXT}
    ntui_ObtainTuiPen{*engine,$FFF5D8,#TUIPEN_TOOLTIPBG}
    ntui_ObtainTuiPen{*engine,$FF0000,#TUIPEN_RED}
    ntui_ObtainTuiPen{*engine,$00FF00,#TUIPEN_GREEN}
    ntui_ObtainTuiPen{*engine,$0000FF,#TUIPEN_BLUE}
    ntui_ObtainTuiPen{*engine,$7F0000,#TUIPEN_DARKRED}
    ntui_ObtainTuiPen{*engine,$007F00,#TUIPEN_DARKGREEN}
    ntui_ObtainTuiPen{*engine,$00007F,#TUIPEN_DARKBLUE}
    ntui_ObtainTuiPen{*engine,$FFFF00,#TUIPEN_YELLOW}
    ntui_ObtainTuiPen{*engine,$00FFFF,#TUIPEN_CYAN}
    ntui_ObtainTuiPen{*engine,$FF00FF,#TUIPEN_MAGENTA}
    ntui_ObtainTuiPen{*engine,$7F7F00,#TUIPEN_DARKYELLOW}
    ntui_ObtainTuiPen{*engine,$007F7F,#TUIPEN_DARKCYAN}
    ntui_ObtainTuiPen{*engine,$7F007F,#TUIPEN_DARKMAGENTA}

    str_Write{&*engine\aissPath ,"TBImages:"}
    ;str_Write{&*engine\imagePath,""}
    str_Write{&*engine\skinPath ,"NTUI:"}

    For n.l=0 To #TUIMAX_SKIN-1
      *engine\skinImage[n]      = Null
      *engine\skinImageAvail[n] = True
      *engine\skinImageName[n]  = Null
    Next

    ;str_Write{&*engine\skinImageName[#TUISKIN_FLATBORDER        ],"NTUI:flatborder.9.png"    }; flat, 1 colored vorder
    ;str_Write{&*engine\skinImageName[#TUISKIN_RECESSEDBORDER    ],"NTUI:recessedborder.9.png"}; recessed border
    ;str_Write{&*engine\skinImageName[#TUISKIN_RAISEDBORDER      ],"NTUI:raisedborder.9.png"  }; raised border
    ;str_Write{&*engine\skinImageName[#TUISKIN_GROUPBORDER       ],"NTUI:groupborder.9.png"   }; group style border
    ;str_Write{&*engine\skinImageName[#TUISKIN_BUTTON            ],"NTUI:button.9.png"        }; button border
    ;str_Write{&*engine\skinImageName[#TUISKIN_STRING            ],"NTUI:string.9.png"        }; string border
    ;str_Write{&*engine\skinImageName[#TUISKIN_TITLEBORDER       ],"NTUI:titleborder.9.png"   }; group style border with title
    ;str_Write{&*engine\skinImageName[#TUISKIN_TOOL              ],"NTUI:tool.9.png"          }; tool button border
    ;str_Write{&*engine\skinImageName[#TUISKIN_MENUBAR           ],"NTUI:menubar.9.png"       }; menu bar border
    ;str_Write{&*engine\skinImageName[#TUISKIN_TOOLTIP           ],"NTUI:tooltip.9.png"       }; tooltip border
    ;str_Write{&*engine\skinImageName[#TUISKIN_MENUITEM          ],"NTUI:menuitem.9.png"      }; menuitem
    ;str_Write{&*engine\skinImageName[#TUISKIN_TEXTBOX           ],"NTUI:textbox.9.png"       }; textbox
    ;str_Write{&*engine\skinImageName[#TUISKIN_TAB_T             ],"NTUI:tab_t.9.png"     }; page
    ;str_Write{&*engine\skinImageName[#TUISKIN_TABVIEWBEGIN_T    ],"NTUI:tabviewbegin_t.9.png"   }; page
    ;str_Write{&*engine\skinImageName[#TUISKIN_TABVIEWEND_T      ],"NTUI:tabviewend_t.9.png"     }; page
    ;str_Write{&*engine\skinImageName[#TUISKIN_TABCONTENT_T      ],"NTUI:tabcontent_t.9.png" }; page
    ;str_Write{&*engine\skinImageName[#TUISKIN_HSCROLLERCONTAINER],"NTUI:hscrollercontainer.9.png" }; page
    ;str_Write{&*engine\skinImageName[#TUISKIN_VSCROLLERCONTAINER],"NTUI:vscrollercontainer.9.png" }; page

    If *tagList Then ntui_SetAttrs{*engine,*tagList}
  End If

  Function Return *engine

End Function
!_MakeGlobalFuncPointer{ntui_Engine,{Null}}


Statement ntui_InitEngineClass{}

  classID.l = ntui_RegisterClass{"engine",(.tuiFunc)*ntui_Engine,Null}

  ntui_RegisterAttr{classID,"skinpath"         , #TUIEA_SKINPATH           ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"imagepath"        , #TUIEA_IMAGEPATH          ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"aisspath"         , #TUIEA_AISSPATH           ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"useskin"          , #TUIEA_USESKIN            ,#TUIAT_BOOL   , 0,0 }
  ntui_RegisterAttr{classID,"borderstyle"      , #TUIEA_BORDERSTYLE        ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"fillstyle"        , #TUIEA_FILLSTYLE          ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"defleftmargin"    , #TUIEA_DEFLEFTMARGIN      ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"deftopmargin"     , #TUIEA_DEFTOPMARGIN       ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"defrightmargin"   , #TUIEA_DEFRIGHTMARGIN     ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"defbottommargin"  , #TUIEA_DEFBOTTOMMARGIN    ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"defleftpadding"   , #TUIEA_DEFLEFTPADDING     ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"deftoppadding"    , #TUIEA_DEFTOPPADDING      ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"defrightpadding"  , #TUIEA_DEFRIGHTPADDING    ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"defbottompadding" , #TUIEA_DEFBOTTOMPADDING   ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"useaiss"          , #TUIEA_USEAISS            ,#TUIAT_BOOL   , 0,0 }
  ntui_RegisterAttr{classID,"arexxport"        , #TUIEA_AREXXPORT          ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"appname"          , #TUIEA_APPNAME            ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"appmenutext"      , #TUIEA_APPMENUTEXT        ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"appiconfile"      , #TUIEA_APPICONFILE        ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"appicontext"      , #TUIEA_APPICONTEXT        ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"pubscreenname"    , #TUIEA_PUBSCREENNAME      ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"normalfontface"   , #TUIEA_NORMALFONTFACE     ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"fixfontface"      , #TUIEA_FIXFONTFACE        ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"seriffontface"    , #TUIEA_SERIFFONTFACE      ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"smallfontface"    , #TUIEA_SMALLFONTFACE      ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"normalfontsize"   , #TUIEA_NORMALFONTSIZE     ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"fixfontsize"      , #TUIEA_FIXFONTSIZE        ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"seriffontsize"    , #TUIEA_SERIFFONTSIZE      ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"smallfontsize"    , #TUIEA_SMALLFONTSIZE      ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"onmessage"        , #TUIEA_ONMESSAGE          ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"onicondrop"       , #TUIEA_ONICONDROP         ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"onquit"           , #TUIEA_ONQUIT             ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"oniconify"        , #TUIEA_ONICONIFY          ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"onpopup"          , #TUIEA_ONPOPUP            ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"defpadding"       , #TUIEA_DEFPADDING         ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"defmargin"        , #TUIEA_DEFMARGIN          ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"windowrefresh"    , #TUIEA_WINDOWREFRESH      ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"buffereddraw"     , #TUIEA_BUFFEREDDRAW       ,#TUIAT_BOOL   , 0,0 }

End Statement

ntui_InitEngineClass{}
