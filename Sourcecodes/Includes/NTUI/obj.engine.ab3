; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res,SDSTCP2.res,xpk.res,ttengine.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 15
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 330
; CursorColumn    = 2
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_Layout {*tui.tuiObject,*rp.RastPort,@x.l,@y.l,@width.l,@hei:: /
;/ ght.l}                                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ private: calculate the layout of the tui object given the dimensions.   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tui.tuiObject    : ???                                                   /
;/ - *rp.RastPort    : ???                                                     /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - width.l    : ???                                                          /
;/ - height.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#TUI_HAS_ENGINE = 1

#TUIEA_SKINPATH         = #TUIA_USER  + 1
#TUIEA_USESKIN          = #TUIA_USER  + 2
#TUIEA_BORDERSTYLE      = #TUIA_USER  + 3
#TUIEA_DEFLEFTMARGIN    = #TUIA_LEFTMARGIN
#TUIEA_DEFTOPMARGIN     = #TUIA_TOPMARGIN
#TUIEA_DEFRIGHTMARGIN   = #TUIA_RIGHTMARGIN
#TUIEA_DEFBOTTOMMARGIN  = #TUIA_BOTTOMMARGIN
#TUIEA_DEFLEFTPADDING   = #TUIA_LEFTPADDING
#TUIEA_DEFTOPPADDING    = #TUIA_TOPPADDING
#TUIEA_DEFRIGHTPADDING  = #TUIA_RIGHTPADDING
#TUIEA_DEFBOTTOMPADDING = #TUIA_BOTTOMPADDING
#TUIEA_USEAISS          = #TUIA_USER + 10
#TUIEA_AREXXPORT        = #TUIA_USER + 11
#TUIEA_APPNAME          = #TUIA_USER + 12
#TUIEA_MENUNAME         = #TUIA_USER + 13
#TUIEA_APPICONFILE      = #TUIA_USER + 14
#TUIEA_APPICONTEXT      = #TUIA_USER + 15
#TUIEA_PUBSCREENNAME    = #TUIA_USER + 16
#TUIEA_NORMALFONTNAME   = #TUIA_USER + 17
#TUIEA_FIXFONTNAME      = #TUIA_USER + 18
#TUIEA_SERIFFONTNAME    = #TUIA_USER + 19
#TUIEA_SMALLFONTNAME    = #TUIA_USER + 20
#TUIEA_NORMALFONTSIZE   = #TUIA_USER + 21
#TUIEA_FIXFONTSIZE      = #TUIA_USER + 22
#TUIEA_SERIFFONTSIZE    = #TUIA_USER + 23
#TUIEA_SMALLFONTSIZE    = #TUIA_USER + 24
#TUIEA_ONMESSAGE        = #TUIA_USER + 25
#TUIEA_ONICONDROP       = #TUIA_USER + 26
#TUIEA_ONQUIT           = #TUIA_USER + 27
#TUIEA_ONICONIFY        = #TUIA_USER + 28
#TUIEA_ONPOPUP          = #TUIA_USER + 29
#TUIEA_DEFPADDING       = #TUIA_PADDING
#TUIEA_DEFMARGIN        = #TUIA_MARGIN

Statement _ntui_SetEngineSkin{*engine.tuiEngine}

For n.l=0 To #TUIMAX_SKIN-1
  If *engine\skinImage[n]
    ntui_FreeTBImage{*engine\skinImage[n]}
    *engine\skinImage[n]=Null
  End If

  If *engine\useSkin
    If *engine\skinImageName[n]
      *engine\skinImage[n] = ntui_CreateTBImage{*engine,str_Read{&*engine\skinImageName[n]},-1,-1}
      If *engine\skinImage[n]
        If *engine\skinImage[n]\tuiImage=#TUIIMAGE_UNKNOWN
          *engine\skinImageAvail[n]=False
          ntui_FreeTBImage{*engine\skinImage[n]}
          *engine\skinImage[n] = Null
        Else
          *engine\skinImageAvail[n]=True
        End If
      End If
    End If
  End If
Next

End Statement


_ntui_SetEngineAttr:
Function.w _ntui_SetEngineAttr{*engine.tuiEngine,ti_Tag.l,ti_Data.l}
  !_ASSERT{*engine}
  !_ASSERT{*engine\obj\classID=#TUICLASS_ENGINE}

  done.w = True
  Select ti_Tag
    Case #TUIEA_SKINPATH
      str_WritePtr{&*engine\skinPath,ti_Data}
      _ntui_SetEngineSkin{*engine}
    Case #TUIEA_USESKIN
      *engine\useSkin = ti_Data
      _ntui_SetEngineSkin{*engine}
    Case #TUIEA_BORDERSTYLE       : *engine\borderStyle       = ti_Data
    Case #TUIEA_DEFLEFTMARGIN     : *engine\defMargin\left    = ti_Data
    Case #TUIEA_DEFTOPMARGIN      : *engine\defMargin\top     = ti_Data
    Case #TUIEA_DEFRIGHTMARGIN    : *engine\defMargin\right   = ti_Data
    Case #TUIEA_DEFBOTTOMMARGIN   : *engine\defMargin\bottom  = ti_Data
    Case #TUIEA_DEFLEFTPADDING    : *engine\defPadding\left   = ti_Data
    Case #TUIEA_DEFTOPPADDING     : *engine\defPadding\top    = ti_Data
    Case #TUIEA_DEFRIGHTPADDING   : *engine\defPadding\right  = ti_Data
    Case #TUIEA_DEFBOTTOMPADDING  : *engine\defPadding\bottom = ti_Data
    Case #TUIEA_DEFPADDING        : *engine\defPadding\left   = ti_Data,ti_Data,ti_Data,ti_Data
    Case #TUIEA_DEFMARGIN         : *engine\defMargin\left    = ti_Data,ti_Data,ti_Data,ti_Data
    Case #TUIEA_USEAISS           : *engine\useAISS           = ti_Data
    Case #TUIEA_AREXXPORT         : str_WritePtr{&*engine\rxPortName   ,ti_Data}
    Case #TUIEA_APPNAME           : str_WritePtr{&*engine\appName      ,ti_Data}
    Case #TUIEA_MENUNAME          : str_WritePtr{&*engine\appMenuName  ,ti_Data}
    Case #TUIEA_APPICONFILE       : str_WritePtr{&*engine\appIconFile  ,ti_Data}
    Case #TUIEA_APPICONTEXT       : str_WritePtr{&*engine\appIconText  ,ti_Data}
    Case #TUIEA_PUBSCREENNAME     : str_WritePtr{&*engine\pubScreenName,ti_Data}
                                    If ti_Data
                                      string.s = Peek.s(ti_Data)
                                      If *engine\scr=Null
                                        ;_ntui_OpenScreen{*engine,string,Null}
                                      End If
                                    End If
    Case #TUIEA_NORMALFONTNAME    : str_WritePtr{&*engine\fontName[#TUIFONT_NORMAL]      ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_NORMALBOLD]  ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_NORMALITALIC],ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_NORMALIB]    ,ti_Data}
    Case #TUIEA_FIXFONTNAME       : str_WritePtr{&*engine\fontName[#TUIFONT_FIX]         ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_FIXBOLD]     ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_FIXITALIC]   ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_FIXIB]       ,ti_Data}
    Case #TUIEA_SERIFFONTNAME     : str_WritePtr{&*engine\fontName[#TUIFONT_SERIF]       ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_SERIFBOLD]   ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_SERIFITALIC] ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_SERIFIB]     ,ti_Data}
    Case #TUIEA_SMALLFONTNAME     : str_WritePtr{&*engine\fontName[#TUIFONT_SMALL]       ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_SMALLBOLD]   ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_SMALLITALIC] ,ti_Data}
                                    str_WritePtr{&*engine\fontName[#TUIFONT_SMALLIB]     ,ti_Data}
    Case #TUIEA_NORMALFONTSIZE    : *engine\fontSize[#TUIFONT_NORMAL]       = ti_Data
                                    *engine\fontSize[#TUIFONT_NORMALBOLD]   = ti_Data
                                    *engine\fontSize[#TUIFONT_NORMALITALIC] = ti_Data
                                    *engine\fontSize[#TUIFONT_NORMALIB]     = ti_Data
    Case #TUIEA_FIXFONTSIZE       : *engine\fontSize[#TUIFONT_FIX]          = ti_Data
                                    *engine\fontSize[#TUIFONT_FIXBOLD]      = ti_Data
                                    *engine\fontSize[#TUIFONT_FIXITALIC]    = ti_Data
                                    *engine\fontSize[#TUIFONT_FIXIB]        = ti_Data
    Case #TUIEA_SERIFFONTSIZE     : *engine\fontSize[#TUIFONT_SERIF]        = ti_Data
                                    *engine\fontSize[#TUIFONT_SERIFBOLD]    = ti_Data
                                    *engine\fontSize[#TUIFONT_SERIFITALIC]  = ti_Data
                                    *engine\fontSize[#TUIFONT_SERIFIB]      = ti_Data
    Case #TUIEA_SMALLFONTSIZE     : *engine\fontSize[#TUIFONT_SMALL]        = ti_Data
                                    *engine\fontSize[#TUIFONT_SMALLBOLD]    = ti_Data
                                    *engine\fontSize[#TUIFONT_SMALLITALIC]  = ti_Data
                                    *engine\fontSize[#TUIFONT_SMALLIB]      = ti_Data
    Case #TUIEA_ONMESSAGE         : str_WritePtr{&*engine\onMessage  ,ti_Data}
    Case #TUIEA_ONICONDROP        : str_WritePtr{&*engine\onIconDrop ,ti_Data}
    Case #TUIEA_ONQUIT            : str_WritePtr{&*engine\onQuit     ,ti_Data}
    Case #TUIEA_ONICONIFY         : str_WritePtr{&*engine\onIconify  ,ti_Data}
    Case #TUIEA_ONPOPUP           : str_WritePtr{&*engine\onPopup    ,ti_Data}

    Case #TUIA_XMLATTR
      *xmlA.tuiXmlAttr = ti_Data
      Select Peek.s(*xmlA\nameP)
        Case "borderstyle"
          If *xmlA\stringP
            Select Peek.s(*xmlA\stringP)
              Case "thin"  : ntui_SetAttr{*engine,#TUIEA_BORDERSTYLE,0}
              Case "thick" : ntui_SetAttr{*engine,#TUIEA_BORDERSTYLE,1}
              Default
                ntui_SetAttr{*engine,#TUIEA_BORDERSTYLE,*xmlA\value}
            End Select
          End If
        Case "skinpath"          : done=ntui_SetAttr{*engine,#TUIEA_SKINPATH         ,*xmlA\stringP}
        Case "useskin"           : done=ntui_SetAttr{*engine,#TUIEA_USESKIN          ,*xmlA\value}
        Case "defleftmargin"     : done=ntui_SetAttr{*engine,#TUIEA_DEFLEFTMARGIN    ,*xmlA\value}
        Case "deftopmargin"      : done=ntui_SetAttr{*engine,#TUIEA_DEFTOPMARGIN     ,*xmlA\value}
        Case "defrightmargin"    : done=ntui_SetAttr{*engine,#TUIEA_DEFRIGHTMARGIN   ,*xmlA\value}
        Case "defbottommargin"   : done=ntui_SetAttr{*engine,#TUIEA_DEFBOTTOMMARGIN  ,*xmlA\value}
        Case "defleftpadding"    : done=ntui_SetAttr{*engine,#TUIEA_DEFLEFTPADDING   ,*xmlA\value}
        Case "deftoppadding"     : done=ntui_SetAttr{*engine,#TUIEA_DEFTOPPADDING    ,*xmlA\value}
        Case "defrightpadding"   : done=ntui_SetAttr{*engine,#TUIEA_DEFRIGHTPADDING  ,*xmlA\value}
        Case "defbottompadding"  : done=ntui_SetAttr{*engine,#TUIEA_DEFBOTTOMPADDING ,*xmlA\value}
        Case "defpadding"        : done=ntui_SetAttr{*engine,#TUIEA_DEFPADDING       ,*xmlA\value}
        Case "defmargin"         : done=ntui_SetAttr{*engine,#TUIEA_DEFMARGIN        ,*xmlA\value}
        Case "useaiss"           : done=ntui_SetAttr{*engine,#TUIEA_USEAISS          ,*xmlA\value}
        Case "arexxport"         : done=ntui_SetAttr{*engine,#TUIEA_AREXXPORT        ,*xmlA\stringP}
        Case "appname"           : done=ntui_SetAttr{*engine,#TUIEA_APPNAME          ,*xmlA\stringP}
        Case "menuname"          : done=ntui_SetAttr{*engine,#TUIEA_MENUNAME         ,*xmlA\stringP}
        Case "appiconfile"       : done=ntui_SetAttr{*engine,#TUIEA_APPICONFILE      ,*xmlA\stringP}
        Case "appicontext"       : done=ntui_SetAttr{*engine,#TUIEA_APPICONTEXT      ,*xmlA\stringP}
        Case "pubscreenname"     : done=ntui_SetAttr{*engine,#TUIEA_PUBSCREENNAME    ,*xmlA\stringP}
        Case "normalfontname"    : done=ntui_SetAttr{*engine,#TUIEA_NORMALFONTNAME   ,*xmlA\stringP}
        Case "fixfontname"       : done=ntui_SetAttr{*engine,#TUIEA_FIXFONTNAME      ,*xmlA\stringP}
        Case "seriffontname"     : done=ntui_SetAttr{*engine,#TUIEA_SERIFFONTNAME    ,*xmlA\stringP}
        Case "smallfontname"     : done=ntui_SetAttr{*engine,#TUIEA_SMALLFONTNAME    ,*xmlA\stringP}
        Case "normalfontsize"    : done=ntui_SetAttr{*engine,#TUIEA_NORMALFONTSIZE   ,*xmlA\value}
        Case "fixfontsize"       : done=ntui_SetAttr{*engine,#TUIEA_FIXFONTSIZE      ,*xmlA\value}
        Case "seriffontsize"     : done=ntui_SetAttr{*engine,#TUIEA_SERIFFONTSIZE    ,*xmlA\value}
        Case "smallfontsize"     : done=ntui_SetAttr{*engine,#TUIEA_SMALLFONTSIZE    ,*xmlA\value}
        Case "onmessage"         : done=ntui_SetAttr{*engine,#TUIEA_ONMESSAGE        ,*xmlA\stringP}
        Case "onquit"            : done=ntui_SetAttr{*engine,#TUIEA_ONQUIT           ,*xmlA\stringP}
        Case "onpopup"           : done=ntui_SetAttr{*engine,#TUIEA_ONPOPUP          ,*xmlA\stringP}
        Case "oniconify"         : done=ntui_SetAttr{*engine,#TUIEA_ONICONIFY        ,*xmlA\stringP}
        Case "onicondrop"        : done=ntui_SetAttr{*engine,#TUIEA_ONICONDROP       ,*xmlA\stringP}
        Default
          done=False
      End Select

    Default
      done=False

  End Select

  Function Return done
End Function


_ntui_GetEngineAttr:
Function.w _ntui_GetEngineAttr{*engine.tuiEngine,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*engine}
  !_ASSERT{*engine\obj\classID=#TUICLASS_ENGINE}

  done.w = True
  Select ti_Tag
    Case #TUIEA_SKINPATH          : *ti_Data\l = str_GetPtr{*engine\skinPath}
    Case #TUIEA_USESKIN           : *ti_Data\l = *engine\useSkin
    Case #TUIEA_BORDERSTYLE       : *ti_Data\l = *engine\borderStyle
    Case #TUIEA_DEFLEFTMARGIN     : *ti_Data\l = *engine\defMargin\left
    Case #TUIEA_DEFTOPMARGIN      : *ti_Data\l = *engine\defMargin\top
    Case #TUIEA_DEFRIGHTMARGIN    : *ti_Data\l = *engine\defMargin\right
    Case #TUIEA_DEFBOTTOMMARGIN   : *ti_Data\l = *engine\defMargin\bottom
    Case #TUIEA_DEFLEFTPADDING    : *ti_Data\l = *engine\defPadding\left
    Case #TUIEA_DEFTOPPADDING     : *ti_Data\l = *engine\defPadding\top
    Case #TUIEA_DEFRIGHTPADDING   : *ti_Data\l = *engine\defPadding\right
    Case #TUIEA_DEFBOTTOMPADDING  : *ti_Data\l = *engine\defPadding\bottom
    Case #TUIEA_USEAISS           : *ti_Data\l = *engine\useAISS
    Case #TUIEA_AREXXPORT         : *ti_Data\l = str_GetPtr{*engine\rxPortName}
    Case #TUIEA_APPNAME           : *ti_Data\l = str_GetPtr{*engine\appName}
    Case #TUIEA_MENUNAME          : *ti_Data\l = str_GetPtr{*engine\appMenuName}
    Case #TUIEA_APPICONFILE       : *ti_Data\l = str_GetPtr{*engine\appIconFile}
    Case #TUIEA_APPICONTEXT       : *ti_Data\l = str_GetPtr{*engine\appIconText}
    Case #TUIEA_PUBSCREENNAME     : *ti_Data\l = str_GetPtr{*engine\pubScreenName}
    Case #TUIEA_NORMALFONTNAME    : *ti_Data\l = str_GetPtr{*engine\fontName[#TUIFONT_NORMAL]}
    Case #TUIEA_FIXFONTNAME       : *ti_Data\l = str_GetPtr{*engine\fontName[#TUIFONT_FIX]}
    Case #TUIEA_SERIFFONTNAME     : *ti_Data\l = str_GetPtr{*engine\fontName[#TUIFONT_SERIF]}
    Case #TUIEA_SMALLFONTNAME     : *ti_Data\l = str_GetPtr{*engine\fontName[#TUIFONT_SMALL]}
    Case #TUIEA_NORMALFONTSIZE    : *ti_Data\l = *engine\fontSize[#TUIFONT_NORMAL]
    Case #TUIEA_FIXFONTSIZE       : *ti_Data\l = *engine\fontSize[#TUIFONT_FIX]
    Case #TUIEA_SERIFFONTSIZE     : *ti_Data\l = *engine\fontSize[#TUIFONT_SERIF]
    Case #TUIEA_SMALLFONTSIZE     : *ti_Data\l = *engine\fontSize[#TUIFONT_SMALL]
    Case #TUIEA_ONMESSAGE         : *ti_Data\l = str_GetPtr{*engine\onMessage}
    Case #TUIEA_ONICONDROP        : *ti_Data\l = str_GetPtr{*engine\onIconDrop}
    Case #TUIEA_ONQUIT            : *ti_Data\l = str_GetPtr{*engine\onQuit}
    Case #TUIEA_ONICONIFY         : *ti_Data\l = str_GetPtr{*engine\onIconify}
    Case #TUIEA_ONPOPUP           : *ti_Data\l = str_GetPtr{*engine\onPopup}

    Default
      done=False

  End Select

  Function Return done
End Function


_ntui_LayoutEngine:
Statement _ntui_LayoutEngine{*engine.tuiEngine,*rp.RastPort,*bbox.tuiRect}
  *child.tuiObject = *engine\obj\child
  While *child
    _ntui_Layout{*child,*rp,*engine\obj\bbox}
    *child=*child\next_
  Wend
End Statement


_ntui_DispatchEngineEvent:
Function.l _ntui_DispatchEngineEvent{*engine.tuiEngine,*tuiEvent.tuiEvent}
USEPATH *tuiEvent
!_ASSERT{*engine}
!_ASSERT{*tuiEvent}
done.l = True
Select \evID
  Case #TUIEV_MESSAGE  : str_Dup{&\notifyID,*engine\onMessage }
  Case #TUIEV_POPUP    : str_Dup{&\notifyID,*engine\onPopup   }
  Case #TUIEV_ICONIFY  : str_Dup{&\notifyID,*engine\onIconify }
  Case #TUIEV_QUIT     : str_Dup{&\notifyID,*engine\onQuit    }
  Case #TUIEV_ICONDROP : str_Dup{&\notifyID,*engine\onIconDrop}
  Default
    done=False
End Select

If done
  If (*tuiEvent\notifyID)
    *tuiEvent\tuiObject = *engine
    _ntui_QueueEvent{*engine\outQ,*tuiEvent}
  Else
    _ntui_DestroyEvent{*tuiEvent}
  End If
End If

Function Return done
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_ShowAppIcon {*engine.tuiEngine,@text.s}                     /
;/                                                                             /
;/ Description:                                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *engine.tuiEngine    : ???                                             /
;/ - text.s    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_ShowAppIcon{*engine.tuiEngine,@text.s}
If *engine=Null Then Statement Return
If *engine\appIcon=Null
  If *engine\appIconDO
    If text Then str_Write{&*engine\appIconText,text}
    textP.l = str_GetPtr{*engine\appIconText}
    appPortP.l = *engine\appPort
    appIconP.l = *engine\appIconDO
    ;MOVE.l d6,-(a7)
    ;MOVE.l d7,-(a7)
    RunErrsOff
    MOVE.l a4,-(a7)
    ;AddAppIconA_ #APP_ICON,Null,textP,appPortP,Null,appIconP,Null
    MOVE.l #0,d0
    ;MOVE.l d0,appIcon
    MOVE.l (a7)+,a4
    LastRunErrsMode
    ;MOVE.l (a7)+,d7
    ;MOVE.l (a7)+,d6
    *engine\appIcon = PutD0 ; Peek.l(?appIcon)
  End If
End If
;Statement Return
;appIcon:
;Dc.l 0
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_HideAppIcon {*engine.tuiEngine}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *engine.tuiEngine    : ???                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_HideAppIcon{*engine.tuiEngine}
If *engine=Null Then Statement Return
If *engine\appIcon Then RemoveAppIcon_ *engine\appIcon : *engine\appIcon = Null
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = ntui_Iconify {*engine.tuiEngine}                      /
;/                                                                             /
;/ Description:                                                                /
;/ * re-open all windows, if any... */                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *engine.tuiEngine    : ???                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w _ntui_CloseScreen{*engine.tuiEngine}
If *engine =Null Then Function Return False
If *engine\obj\classID><#TUICLASS_ENGINE Then Function Return False
If *engine\scr=Null Then Function Return True ; we are already iconified...

*scr.Screen = *engine\scr

;/* free all pens */
For tuipen.l=0 To #TUIMAX_PENS-1
  If *engine\penInfo[tuipen]\locked
    ReleasePen_ *scr\ViewPort\ColorMap,*engine\pen[tuipen]
    *engine\pen[tuipen]=0
    *engine\penInfo[tuipen]\locked=False
  End If
Next

For font.l=0 To #TUIMAX_FONTS-1
  If *engine\font[font] Then CloseFont_ *engine\font[font] : *engine\font[font] = Null
Next

; release images (maybe?)

*engine\rememberScreen = *engine\scr
*engine\scr            = Null

If *engine\snScreenH
  screennotify_RemCloseScreenClient{*engine\snScreenH}
  *engine\snScreenH = 0
End If

Function Return True
End Function

Function.w _ntui_ReadPrefs{*engine.tuiEngine,prefsfile.s}
*tempP.b = _ntui_ObtainTempBuffer{4096}
If *tempP=Null Then Function Return False
fh.l = Open_ (&prefsfile,#MODE_OLDFILE)
If fh
  *buffP.b = *tempP
  Repeat
    *buffP.b = FGets_(fh,*tempP,4096)
    If *buffP
      l.l = 0
      name.s = ""
      string.s = ""
      value.l = 0
      doName.l = True
      doValue.l = False
      nb.l = 0
      ne.l = 0
      vb.l = 0
      ve.l = 0
      While (Peek.b(*buffP+l)><0)
        If doName=True AND Peek.b(*buffP+l)=@"=" Then doValue=True : doName=False:ne=l-1:vb=l+1
      Wend
      If doValue Then ve = l-1
      If doName  Then ne = l-1
      name     = LCase$(Peeks$(*buffP+nb,ne-nb+1))
      string.s = Peeks$(*buffP+vb,ve-vb+1)
      value.l  = Vallong(string)
      Select LCase$(string)
        Case "yes"   : value=1
        Case "no"    : value=0
        Case "on"    : value=1
        Case "off"   : value=0
        Case "true"  : value=1
        Case "false" : value=0
      End Select

      ;xmlA.tuiXmlAttr\nameP = Null
      ;ntui_SetAttr{*engine,#TUIA_XMLATTR,xmlA}
    End If
  Until *buffP=Null
End If

Function Return True
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: succ.w = ntui_PopUp {*engine.tuiEngine,@pubname.s,@*scr.Scre:: /
;/ en}                                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ Pop the tui engine up on a screen.                                      /
;/ This reverses the effect of ntui_Iconify.
;/ In iconified mode (or if tui tuiEngine was just created), it is not allowed to open any window. The engine must first "popped" to a screen.
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *engine.tuiEngine : tuiEngine to pop up                                             /
;/ - pubname.s            : name of the PubScreen (e.g. "Workbench")                                                       /
;/ - *scr.Screen          : pointer to a custom screen                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.w               : True if popped up, False if failed                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w _ntui_OpenScreen{*engine.tuiEngine,@pubname.s,@*scr.Screen}
!_ASSERT{*engine}
If (*engine\obj\classID><#TUICLASS_ENGINE) Then Function Return False
If (*engine\scr) Then Function Return True ; we are already popped-up
If *scr=-1 OR *scr=Null
  *scr=Null
  *defscr.Screen = Null
  If pubname=""
    MaxLen pubname=256
    GetDefaultPubScreen_ &pubname
    pubname = Peek.s(&pubname)
  End If
  *psl.List = LockPubScreenList_()
  If *psl
    *psn.PubScreenNode = *psl\lh_Head
    While *psn\psn_Node\ln_Succ
      If *defscr=Null Then *defscr=*psn\psn_Screen
      If (*psn\psn_Node\ln_Name)
      If (LCase$(pubname)=LCase$(Peek.s(*psn\psn_Node\ln_Name)))
        *scr=*psn\psn_Screen
        ;error {"Found screen "+pubname}
      End If
      End If
      *psn = *psn\psn_Node\ln_Succ
    Wend
  End If
  UnlockPubScreenList_
  If *scr=Null Then *scr=*defscr
End If


If (*scr      =Null) Then Function Return False
succ.w = False
*engine\scr = *scr
*engine\obj\bbox\left = 0,0,*scr\Width-1,*scr\Height-1
!tuiCopyRect{*engine\obj\ibox,*engine\obj\bbox}
!tuiCopyRect{*engine\obj\cbox,*engine\obj\ibox}

*engine\font[#TUIFONT_NORMAL]       = _ntui_OpenFont{*engine\fontName[#TUIFONT_NORMAL],*engine\fontSize[#TUIFONT_NORMAL],#TUIF_NORMAL,*scr}
*engine\font[#TUIFONT_SMALL]        = _ntui_OpenFont{*engine\fontName[#TUIFONT_SMALL ],*engine\fontSize[#TUIFONT_SMALL ],#TUIF_SMALL ,*scr}
*engine\font[#TUIFONT_FIX]          = _ntui_OpenFont{*engine\fontName[#TUIFONT_FIX   ],*engine\fontSize[#TUIFONT_FIX   ],#TUIF_FIX   ,*scr}
*engine\font[#TUIFONT_SERIF]        = _ntui_OpenFont{*engine\fontName[#TUIFONT_SERIF ],*engine\fontSize[#TUIFONT_SERIF ],#TUIF_SERIF ,*scr}

_ntui_ObtainTuiPen{*engine,$C3C3C3,#TUIPEN_BACKGROUND}
_ntui_ObtainTuiPen{*engine,$000000,#TUIPEN_BLACK}
_ntui_ObtainTuiPen{*engine,$FFFFFF,#TUIPEN_WHITE}
_ntui_ObtainTuiPen{*engine,$EEEEEE,#TUIPEN_SHINE}
_ntui_ObtainTuiPen{*engine,$666666,#TUIPEN_SHADOW}
_ntui_ObtainTuiPen{*engine,$DDDDDD,#TUIPEN_HALFSHINE}
_ntui_ObtainTuiPen{*engine,$AAAAAA,#TUIPEN_HALFSHADOW}
_ntui_ObtainTuiPen{*engine,$D0D0D0,#TUIPEN_HALFHALFSHINE}
_ntui_ObtainTuiPen{*engine,$BBBBBB,#TUIPEN_HALFHALFSHADOW}
_ntui_ObtainTuiPen{*engine,(($8090D0&$FEFEFEFE) LSR 1)+(($C3C3C3&$FEFEFEFE) LSR 1),#TUIPEN_HALFMARKER}
_ntui_ObtainTuiPen{*engine,$8090D0,#TUIPEN_MARKER}
_ntui_ObtainTuiPen{*engine,$000000,#TUIPEN_TEXT}
_ntui_ObtainTuiPen{*engine,$EEEEFF,#TUIPEN_ACTIVETEXT}
_ntui_ObtainTuiPen{*engine,$FFF5D8,#TUIPEN_TOOLTIPBG}
_ntui_ObtainTuiPen{*engine,$FF0000,#TUIPEN_RED}
_ntui_ObtainTuiPen{*engine,$00FF00,#TUIPEN_GREEN}
_ntui_ObtainTuiPen{*engine,$0000FF,#TUIPEN_BLUE}

*engine\defSize[#TUISIZE_MIN          ] = #TUI_MINPIXELSIZE ; minimum possible (usually equals to 8)
*engine\defSize[#TUISIZE_SMALLFONT    ] = *engine\font[#TUIFONT_SMALL ]\tf_YSize     ; like small font
*engine\defSize[#TUISIZE_FONT         ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize     ; like normal font
*engine\defSize[#TUISIZE_SERIFFONT    ] = *engine\font[#TUIFONT_SERIF ]\tf_YSize     ; like serif font
*engine\defSize[#TUISIZE_FIXFONT      ] = *engine\font[#TUIFONT_FIX   ]\tf_YSize     ; like fix font
*engine\defSize[#TUISIZE_SMALLINLINE  ] = *engine\font[#TUIFONT_SMALL ]\tf_YSize     ; like small font  +2
*engine\defSize[#TUISIZE_INLINE       ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize     ; like normal font +2
*engine\defSize[#TUISIZE_HALFINLINE   ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize/2+1 ; like normal (font +2)/2
*engine\defSize[#TUISIZE_DOUBLEINLINE ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize*2+1 ; like normal (font +2)/2
*engine\defSize[#TUISIZE_ONEHALFINLINE] = *engine\font[#TUIFONT_NORMAL]\tf_YSize*3/2+1 ; like normal (font +2)/2
*engine\defSize[#TUISIZE_SERIFINLINE  ] = *engine\font[#TUIFONT_SERIF ]\tf_YSize     ; like serif font    +2
*engine\defSize[#TUISIZE_FIXINLINE    ] = *engine\font[#TUIFONT_FIX   ]\tf_YSize     ; like fix font    +2
*engine\defSize[#TUISIZE_BUTTON       ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize   ; 2 + *engine\defPadding\top+*engine\defPadding\bottom ; like buttons (normal font +2 + pad\y*2)
*engine\defSize[#TUISIZE_HALFBUTTON   ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize/2
*engine\defSize[#TUISIZE_KNOB         ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize/2 + 6
*engine\defSize[#TUISIZE_SCROLLER     ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize/2 + 6
*engine\defSize[#TUISIZE_NATIVE       ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize*3/2 ; native image resolution
*engine\defSize[#TUISIZE_MAX          ] = *engine\font[#TUIFONT_NORMAL]\tf_YSize*2   ; maximum possible

If ((*engine\defSize[#TUISIZE_SCROLLER]&1) = 0) Then *engine\defSize[#TUISIZE_SCROLLER]+1

For n.l=0 To #TUISIZE_MAX
  If *engine\defSize[n]<*engine\defSize[#TUISIZE_MIN] Then *engine\defSize[n]=*engine\defSize[#TUISIZE_MIN]
Next

*engine\defStep\x = *engine\defSize[#TUISIZE_INLINE],*engine\defSize[#TUISIZE_INLINE]

If *engine\snPort
  If *engine\snScreenH Then screennotify_RemCloseScreenClient{*engine\snScreenH}
  *engine\snScreenH = screennotify_AddCloseScreenClient{*engine\scr,*engine\snPort}
End If

succ=True
Function Return succ
End Function




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeEngine {*engine.tuiEngine}                             /
;/                                                                             /
;/ Description:                                                                /
;/ private: free the tuiEngine
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *engine.tuiEngine    : ???                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitEngine
Statement _ntui_DeinitEngine{*engine.tuiEngine}
_ntui_CloseScreen{*engine}
If *engine\rxPort       Then _ntui_FreeRexx{*engine}

If *engine\winPort      Then DeleteMsgPort_     *engine\winPort     : *engine\winPort     = Null

If *engine\snWorkbenchH Then screennotify_RemWorkbenchClient{*engine\snWorkbenchH} : *engine\snWorkbenchH = 0
If *engine\snScreenH    Then screennotify_RemCloseScreenClient{*engine\snScreenH}  : *engine\snScreenH    = 0
If *engine\snPort       Then DeleteMsgPort_     *engine\snPort      : *engine\snPort      = Null

If *engine\appIcon      Then RemoveAppIcon_     *engine\appIcon     : *engine\appIcon     = Null
If *engine\appIconDO    Then FreeDiskObject_    *engine\appIconDO   : *engine\appIconDO   = Null
If *engine\appMenu      Then RemoveAppMenuItem_ *engine\appMenu     : *engine\appMenu     = Null
If *engine\appPort      Then DeleteMsgPort_     *engine\appPort     : *engine\appPort     = Null

If *engine\outQ\sigBit  Then FreeSignal_        *engine\outQ\sigBit : *engine\outQ\sigBit = 0
If *engine\inQ\sigBit   Then FreeSignal_        *engine\inQ\sigBit  : *engine\inQ\sigBit  = 0

If *engine\aslfo        Then FreeAslRequest_ *engine\aslfo : *engine\aslfo = Null
If *engine\aslfr        Then FreeAslRequest_ *engine\aslfr : *engine\aslfr = Null
If *engine\aslsm        Then FreeAslRequest_ *engine\aslsm : *engine\aslsm = Null

str_Free{&*engine\appName}
str_Free{&*engine\appMenuName}
str_Free{&*engine\appIconFile}
str_Free{&*engine\appIconText}

If *engine\eventPool    Then DeletePool_ *engine\eventPool  : *engine\eventPool  = Null
If *engine\objectPool   Then DeletePool_ *engine\objectPool : *engine\objectPool = Null

str_Free{&*engine\onPopup}       ; wb menu or icon double click
str_Free{&*engine\onQuit}        ; app is requested to quit
str_Free{&*engine\onIconDrop}    ; drop icon on appicon
str_Free{&*engine\onIconify}     ; iconify
str_Free{&*engine\onMessage}     ; arexx message

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_CreateEngine {appname.s,@menuname.s,@icon.s,@pubn:: /
;/ ame.s,@*scr.Screen}                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * create a new tui engine */                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - appname.s    : name of the application                                                        /
;/ - menuname.s   : optional name for the Workbench App Menu                                                       /
;/ - icon.s       : optional icon that serves as an app icon                                                           /
;/ - pubname.s    : optional pubscreen name to popup on                                                        /
;/ - *scr.Screen  : optional screen pointer to popup on                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : tuiEngine                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////

Function.l ntui_CreateEngine{appName.s,@arexxPort.s,@appMenu.s,@appIcon.s,@pubname.s,@*scr.Screen}
;ntui_BeginBuild{Null}
*engine.tuiEngine = _ntui_CreateObject{#TUICLASS_ENGINE,SizeOf.tuiEngine,"",0,""}

If *engine
  tuiGlobal\buildHelper\tuiEngine = *engine

  *engine\defTickDelay         = 2
  *engine\defMargin\left       = 1,1,1,1
  *engine\defPadding\left      = 2,2,2,2
  *engine\defStep\x            = #TUI_MINPIXELSIZE,#TUI_MINPIXELSIZE
  For n.l=0 To #TUIMAX_SIZES-1
    *engine\defSize[n]   = #TUI_MINPIXELSIZE  ; default size of fonts, arrows etc.
  Next

  For n.l=0 To #TUIMAX_FONTS-1
    *engine\font[n]     = Null
    *engine\fontName[n] = Null
    *engine\fontSize[n] = 0
  Next

  *engine\skinPath       = Null
  *engine\useSkin        = False
  *engine\borderStyle    = 0

  *engine\inputTask      = Null
  *engine\useAISS        = False

  *engine\outQ\head      = Null
  *engine\outQ\tail      = Null
  *engine\outQ\sigBit    = AllocSignal_(-1)
  *engine\outQ\sigFlag   = 1 LSL *engine\outQ\sigBit
  *engine\outQ\sigTask   = FindTask_(Null)
  *engine\inQ\head       = Null
  *engine\inQ\tail       = Null
  *engine\inQ\sigBit     = AllocSignal_(-1)
  *engine\inQ\sigFlag    = 1 LSL *engine\inQ\sigBit
  *engine\inQ\sigTask    = FindTask_(Null)

  *engine\tuiEvent       = Null
  *engine\eventPool      = CreatePool_(#MEMF_ANY,SizeOf.tuiEvent*64,SizeOf.tuiEvent*2)
  *engine\objectPool     = CreatePool_(#MEMF_ANY,$8000,$4000)

  *engine\redrawMethod   = #TUIRM_CLEAR;#TUIRD_SMART
  *engine\obj\tuiEngine  = *engine

  *engine\rxPort         = Null
  *engine\rxPortName     = Null
  *engine\rxMsg          = Null
  *engine\rxString       = Null
  If arexxPort Then _ntui_InitRexx{*engine,arexxPort}

  *engine\winPort        = CreateMsgPort_()
  *engine\snPort         = CreateMsgPort_()
  *engine\snWorkbenchH   = screennotify_AddWorkbenchClient{*engine\snPort}
  *engine\snScreenH      = 0

  InitSemaphore_ *engine\lock

  *engine\mover          = Null
  ;*engine\active         = Null
  *engine\focus          = Null
  *engine\restingTime    = 0

  ;/* initialize App functionality (workbench.library) */
  *engine\appName        = Null
  *engine\appMenuName    = Null
  *engine\appIconFile    = Null
  *engine\appIconText    = Null
  *engine\appMenu        = Null
  *engine\appIcon        = Null
  *engine\appIconDO      = Null

  str_Write{&*engine\onPopup    ,!NOTIFYID_POPUP}               ; menu or icon doubleblick
  str_Write{&*engine\onIconDrop ,!NOTIFYID_ICONDROP}            ; drop icon on icon
  str_Write{&*engine\onQuit     ,!NOTIFYID_QUIT}
  str_Write{&*engine\onIconify  ,!NOTIFYID_ICONIFY}
  str_Write{&*engine\onMessage  ,!NOTIFYID_MESSAGE}
  ;If icon="" Then icon=dos_GetProgIcon{"Blitz3:Amiblitz3"}

  If appIcon Then str_Write{&*engine\appIconFile,appIcon}
  If appMenu Then str_Write{&*engine\appMenuName,appMenu}
  If appName Then str_Write{&*engine\appIconText,appName}
  If appName Then str_Write{&*engine\appName,appName}

  *engine\appPort = CreateMsgPort_()
  If *engine\appPort
    If *engine\appIconFile
      *engine\appIconDO = GetDiskObjectNew_(&*engine\appIconFile\str)
      If *engine\appIconDO=Null
        error{"\\__THIS_FUNCTION: Unable to get diskobject: \\22"+str_Read{&*engine\appIconFile}+"\\22!"}
      Else
        *engine\appIconDO\do_Magic       = 0
     ;   *engine\appIconDO\do_Version     = 0 ; if we do this, PNG Icons dont work anymore...
        *engine\appIconDO\do_Type        = 0
        *engine\appIconDO\do_DefaultTool = Null
        *engine\appIconDO\do_ToolTypes   = Null
        *engine\appIconDO\do_CurrentX    = #NO_ICON_POSITION
        *engine\appIconDO\do_CurrentY    = #NO_ICON_POSITION
        ;*engine\appIconDO\do_DrawerData  = Null ; this is not a pointer!
        *engine\appIconDO\do_ToolWindow  = Null
        *engine\appIconDO\do_StackSize   = Null
      End If
    End  If
    If *engine\appMenuName
      *engine\appMenu = AddAppMenuItemA_(#APP_MENUHIT,Null,&*engine\appMenuName\str,*engine\appPort,Null)
    End If
  End If

  *engine\obj\Draw          = Null
  !_GetFuncPointer{*engine\obj\Layout       ,_ntui_LayoutEngine,{0,0,0}}
  !_GetFuncPointer{*engine\obj\DispatchEvent,_ntui_DispatchEngineEvent,{0,0}}
  *engine\obj\CalculateMinSize = Null
  !_GetFuncPointer{*engine\obj\Deinit       ,_ntui_DeinitEngine,{0}}
  !_GetFuncPointer{*engine\obj\SetAttr      ,_ntui_SetEngineAttr,{0,0,0}}
  !_GetFuncPointer{*engine\obj\GetAttr      ,_ntui_GetEngineAttr,{0,0,0}}
  InitRastPort_ *engine\buildRP

  For n.l=0 To #TUIMAX_SKIN-1
    *engine\skinImage[n]      = Null
    *engine\skinImageAvail[n] = True
    *engine\skinImageName[n]  = Null
  Next

  str_Write{&*engine\skinImageName[#TUISKIN_FLATBORDER        ],"NTUI:flatborder.9.png"    }; flat, 1 colored vorder
  str_Write{&*engine\skinImageName[#TUISKIN_RECESSEDBORDER    ],"NTUI:recessedborder.9.png"}; recessed border
  str_Write{&*engine\skinImageName[#TUISKIN_RAISEDBORDER      ],"NTUI:raisedborder.9.png"  }; raised border
  str_Write{&*engine\skinImageName[#TUISKIN_GROUPBORDER       ],"NTUI:groupborder.9.png"   }; group style border
  str_Write{&*engine\skinImageName[#TUISKIN_BUTTON            ],"NTUI:button.9.png"        }; button border
  str_Write{&*engine\skinImageName[#TUISKIN_STRING            ],"NTUI:string.9.png"        }; string border
  str_Write{&*engine\skinImageName[#TUISKIN_TITLEBORDER       ],"NTUI:titleborder.9.png"   }; group style border with title
  str_Write{&*engine\skinImageName[#TUISKIN_TOOL              ],"NTUI:tool.9.png"          }; tool button border
  str_Write{&*engine\skinImageName[#TUISKIN_MENUBAR           ],"NTUI:menubar.9.png"       }; menu bar border
  str_Write{&*engine\skinImageName[#TUISKIN_TOOLTIP           ],"NTUI:tooltip.9.png"       }; tooltip border
  str_Write{&*engine\skinImageName[#TUISKIN_MENUITEM          ],"NTUI:menuitem.9.png"      }; menuitem
  str_Write{&*engine\skinImageName[#TUISKIN_TEXTBOX           ],"NTUI:textbox.9.png"       }; textbox
  str_Write{&*engine\skinImageName[#TUISKIN_TAB_T             ],"NTUI:tab_t.9.png"     }; page
  str_Write{&*engine\skinImageName[#TUISKIN_TABVIEWBEGIN_T    ],"NTUI:tabviewbegin_t.9.png"   }; page
  str_Write{&*engine\skinImageName[#TUISKIN_TABVIEWEND_T      ],"NTUI:tabviewend_t.9.png"     }; page
  str_Write{&*engine\skinImageName[#TUISKIN_TABCONTENT_T      ],"NTUI:tabcontent_t.9.png" }; page
  str_Write{&*engine\skinImageName[#TUISKIN_HSCROLLERCONTAINER],"NTUI:hscrollercontainer.9.png" }; page
  str_Write{&*engine\skinImageName[#TUISKIN_VSCROLLERCONTAINER],"NTUI:vscrollercontainer.9.png" }; page

  If *scr=-1 Then *scr=Null
  If ((pubname><"") OR (*scr><Null))
    _ntui_OpenScreen{*engine,pubname,*scr}
  End If
End If
;ntui_EndBuild{}
Function Return *engine
End Function



