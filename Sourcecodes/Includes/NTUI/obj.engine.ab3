; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 14
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 324
; CursorColumn    = 89
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_Layout {*tui.tuiObject,*rp.RastPort,@x.l,@y.l,@width.l,@hei:: /
;/ ght.l}                                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ private: calculate the layout of the tui object given the dimensions.   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tui.tuiObject    : ???                                                   /
;/ - *rp.RastPort    : ???                                                     /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - width.l    : ???                                                          /
;/ - height.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#TUI_HAS_ENGINE = 1

#TUIEA_SKINPATH = 1
#TUIEA_USESKIN  = 2

_ntui_SetEngineAttr:
Function.w _ntui_SetEngineAttr{*tuiEngine.tuiEngine,ti_Tag.l,ti_Data.l}
  !_ASSERT{*tuiEngine}
  !_ASSERT{*tuiEngine\obj\typeID=#TUIOBJ_ENGINE}

  done.w = True
  Select ti_Tag
    Case #TUIEA_SKINPATH
      str_WritePtr{&*tuiEngine\skinPath,ti_Data}
    Case #TUIEA_USESKIN
      *tuiEngine\useSkin = ti_Data
    Default
      done=False

  End Select

  Function Return done
End Function


_ntui_GetEngineAttr:
Function.w _ntui_GetEngineAttr{*tuiEngine.tuiEngine,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*tuiEngine}
  !_ASSERT{*tuiEngine\obj\typeID=#TUIOBJ_ENGINE}

  done.w = True
  Select ti_Tag
    Case #TUIEA_SKINPATH
      *ti_Data\l = str_GetPtr{*tuiEngine\skinPath}
    Case #TUIEA_USESKIN
      *ti_Data\l = *tuiEngine\useSkin
    Default
      done=False

  End Select

  Function Return done
End Function


_ntui_LayoutEngine:
Statement _ntui_LayoutEngine{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect}
  *child.tuiObject = *tuiEngine\obj\child
  While *child
    _ntui_Layout{*child,*tuiEngine,*rp}
    *child=*child\next_
  Wend
End Statement


_ntui_DispatchEngineEvent:
Function.l _ntui_DispatchEngineEvent{*tuiEngine.tuiEngine,*tuiEvent.tuiEvent}
USEPATH *tuiEvent
!_ASSERT{*tuiEngine}
!_ASSERT{*tuiEvent}
done.l = False
Select \evID
  Case #TUIEV_MESSAGE  : str_Dup{&\notifyID,*tuiEngine\onMessage } : done = True
  Case #TUIEV_POPUP    : str_Dup{&\notifyID,*tuiEngine\onPopup   } : done = True
  Case #TUIEV_ICONIFY  : str_Dup{&\notifyID,*tuiEngine\onIconify } : done = True
  Case #TUIEV_QUIT     : str_Dup{&\notifyID,*tuiEngine\onQuit    } : done = True
  Case #TUIEV_ICONDROP : str_Dup{&\notifyID,*tuiEngine\onIconDrop} : done = True

End Select

If done
  If (*tuiEvent\notifyID)
    *tuiEvent\tuiObject = *tuiEngine
    _ntui_QueueEvent{*tuiEngine\outQ,*tuiEvent}
  Else
    _ntui_DestroyEvent{*tuiEvent}
  End If
End If

Function Return done
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_ShowAppIcon {*tuiEngine.tuiEngine,@text.s}                     /
;/                                                                             /
;/ Description:                                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : ???                                             /
;/ - text.s    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_ShowAppIcon{*tuiEngine.tuiEngine,@text.s}
If *tuiEngine=#NULL Then Statement Return
If *tuiEngine\appIcon=#NULL
  If *tuiEngine\appIconDO
    If text Then str_Write{&*tuiEngine\appIconText,text}
    ;MOVE.l d6,-(a7)
    ;MOVE.l d7,-(a7)
    MOVE.l a4,-(a7)
    AddAppIconA_ #APP_ICON,#NULL,&*tuiEngine\appIconText\str,*tuiEngine\appPort,#NULL,*tuiEngine\appIconDO,#NULL
    MOVE.l d0,appIcon
    MOVE.l (a7)+,a4
    ;MOVE.l (a7)+,d7
    ;MOVE.l (a7)+,d6
    *tuiEngine\appIcon = Peek.l(?appIcon)
  End If
End If
Statement Return
appIcon:
Dc.l 0
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_HideAppIcon {*tuiEngine.tuiEngine}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : ???                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_HideAppIcon{*tuiEngine.tuiEngine}
If *tuiEngine=#NULL Then Statement Return
If *tuiEngine\appIcon Then RemoveAppIcon_ *tuiEngine\appIcon : *tuiEngine\appIcon = #NULL
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = ntui_Iconify {*tuiEngine.tuiEngine}                      /
;/                                                                             /
;/ Description:                                                                /
;/ * re-open all windows, if any... */                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : ???                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w _ntui_CloseScreen{*tuiEngine.tuiEngine}
If *tuiEngine =#NULL Then Function Return False
If *tuiEngine\obj\typeID><#TUIOBJ_ENGINE Then Function Return False
If *tuiEngine\scr=#NULL Then Function Return True ; we are already iconified...

*scr.Screen = *tuiEngine\scr

;/* free all pens */
For tuipen.l=0 To #TUIMAX_PENS-1
  If *tuiEngine\penInfo[tuipen]\locked
    ReleasePen_ *scr\ViewPort\ColorMap,*tuiEngine\pen[tuipen]
    *tuiEngine\pen[tuipen]=0
    *tuiEngine\penInfo[tuipen]\locked=False
  End If
Next

For font.l=0 To #TUIMAX_FONTS-1
  If *tuiEngine\font[font] Then CloseFont_ *tuiEngine\font[font] : *tuiEngine\font[font] = #NULL
Next

; release images (maybe?)

*tuiEngine\rememberScreen = *tuiEngine\scr
*tuiEngine\scr            = #NULL

If *tuiEngine\snScreenH
  screennotify_RemCloseScreenClient{*tuiEngine\snScreenH}
  *tuiEngine\snScreenH = 0
End If

Function Return True
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: succ.w = ntui_PopUp {*tuiEngine.tuiEngine,@pubname.s,@*scr.Scre:: /
;/ en}                                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ Pop the tui engine up on a screen.                                      /
;/ This reverses the effect of ntui_Iconify.
;/ In iconified mode (or if tui tuiEngine was just created), it is not allowed to open any window. The engine must first "popped" to a screen.
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine : tuiEngine to pop up                                             /
;/ - pubname.s            : name of the PubScreen (e.g. "Workbench")                                                       /
;/ - *scr.Screen          : pointer to a custom screen                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.w               : True if popped up, False if failed                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w _ntui_OpenScreen{*tuiEngine.tuiEngine,@pubname.s,@*scr.Screen}
!_ASSERT{*tuiEngine}
If (*tuiEngine\obj\typeID><#TUIOBJ_ENGINE) Then Function Return False
If (*tuiEngine\scr) Then Function Return True ; we are already popped-up
If *scr=-1 OR *scr=#NULL
  *scr=#NULL
  *defscr.Screen = #NULL
  If pubname=""
    MaxLen pubname=256
    GetDefaultPubScreen_ &pubname
    pubname = Peek.s(&pubname)
  End If
  *psl.List = LockPubScreenList_()
  If *psl
    *psn.PubScreenNode = *psl\lh_Head
    While *psn\psn_Node\ln_Succ
      If *defscr=#NULL Then *defscr=*psn\psn_Screen
      If (*psn\psn_Node\ln_Name)
      If (LCase$(pubname)=LCase$(Peek.s(*psn\psn_Node\ln_Name)))
        *scr=*psn\psn_Screen
        ;error {"Found screen "+pubname}
      End If
      End If
      *psn = *psn\psn_Node\ln_Succ
    Wend
  End If
  UnlockPubScreenList_
  If *scr=#NULL Then *scr=*defscr
End If


If (*scr      =#NULL) Then Function Return False
succ.w = False
*tuiEngine\scr = *scr

fontnormal.s = ""   : fontnormalsize.l = 16
fontsmall.s  = ""   : fontsmallsize.l  = 12
fontbig.s    = ""   : fontbigsize.l    = 24
fontfix.s    = ""   : fontfixsize.l    = 16

;fontnormal.s = "Vera Sans"   : fontnormalsize.l = 32
;fontsmall.s  = "Vera Sans"   : fontsmallsize.l  = 11
;fontbig.s    = "Vera Sans"   : fontbigsize.l    = 32
;fontfix.s    = "Vera Mono"   : fontfixsize.l    = 16

fontnormal.s = "thinpaz_small"   : fontnormalsize.l = 8
fontsmall.s  = "thinpaz_small"   : fontsmallsize.l  = 8
;fontbig.s    = "Vera Sans"   : fontbigsize.l    = 24
;fontfix.s    = "thinpaz"   : fontfixsize.l    = 8

;fontnormal.s = "Helvetica"   : fontnormalsize.l = 13
*tuiEngine\font[#TUIFONT_NORMAL]       = _ntui_OpenFont{fontnormal,fontnormalsize ,#TUIF_NORMAL,*scr}
*tuiEngine\font[#TUIFONT_SMALL]        = _ntui_OpenFont{fontsmall ,fontsmallsize  ,#TUIF_SMALL ,*scr}
*tuiEngine\font[#TUIFONT_FIX]          = _ntui_OpenFont{fontfix   ,fontfixsize    ,#TUIF_FIX   ,*scr}
*tuiEngine\font[#TUIFONT_BIG]          = _ntui_OpenFont{fontbig   ,fontbigsize    ,#TUIF_BIG   ,*scr}

*tuiEngine\font[#TUIFONT_NORMALBOLD]   = _ntui_OpenFont{fontnormal,fontnormalsize ,#TUIF_NORMAL|#TUIF_BOLD  ,*scr}
*tuiEngine\font[#TUIFONT_SMALLBOLD]    = _ntui_OpenFont{fontsmall ,fontsmallsize  ,#TUIF_SMALL |#TUIF_BOLD  ,*scr}
*tuiEngine\font[#TUIFONT_FIXBOLD]      = _ntui_OpenFont{fontfix   ,fontfixsize    ,#TUIF_FIX   |#TUIF_BOLD  ,*scr}
*tuiEngine\font[#TUIFONT_BIGBOLD]      = _ntui_OpenFont{fontbig   ,fontbigsize    ,#TUIF_BIG   |#TUIF_BOLD  ,*scr}

*tuiEngine\font[#TUIFONT_NORMALITALIC] = _ntui_OpenFont{fontnormal,fontnormalsize ,#TUIF_NORMAL|#TUIF_ITALIC,*scr}
*tuiEngine\font[#TUIFONT_SMALLITALIC]  = _ntui_OpenFont{fontsmall ,fontsmallsize  ,#TUIF_SMALL |#TUIF_ITALIC,*scr}
*tuiEngine\font[#TUIFONT_FIXITALIC]    = _ntui_OpenFont{fontfix   ,fontfixsize    ,#TUIF_FIX   |#TUIF_ITALIC,*scr}
*tuiEngine\font[#TUIFONT_BIGITALIC]    = _ntui_OpenFont{fontbig   ,fontbigsize    ,#TUIF_BIG   |#TUIF_ITALIC,*scr}

*tuiEngine\font[#TUIFONT_NORMALIB]     = _ntui_OpenFont{fontnormal,fontnormalsize ,#TUIF_NORMAL|#TUIF_BOLD|#TUIF_ITALIC,*scr}
*tuiEngine\font[#TUIFONT_SMALLIB]      = _ntui_OpenFont{fontsmall ,fontsmallsize  ,#TUIF_SMALL |#TUIF_BOLD|#TUIF_ITALIC,*scr}
*tuiEngine\font[#TUIFONT_FIXIB]        = _ntui_OpenFont{fontfix   ,fontfixsize    ,#TUIF_FIX   |#TUIF_BOLD|#TUIF_ITALIC,*scr}
*tuiEngine\font[#TUIFONT_BIGIB]        = _ntui_OpenFont{fontbig   ,fontbigsize    ,#TUIF_BIG   |#TUIF_BOLD|#TUIF_ITALIC,*scr}

_ntui_ObtainTuiPen{*tuiEngine,$C3C3C3,#TUIPEN_BACKGROUND}
_ntui_ObtainTuiPen{*tuiEngine,$000000,#TUIPEN_BLACK}
_ntui_ObtainTuiPen{*tuiEngine,$FFFFFF,#TUIPEN_WHITE}
_ntui_ObtainTuiPen{*tuiEngine,$EEEEEE,#TUIPEN_SHINE}
_ntui_ObtainTuiPen{*tuiEngine,$666666,#TUIPEN_SHADOW}
_ntui_ObtainTuiPen{*tuiEngine,$DDDDDD,#TUIPEN_HALFSHINE}
_ntui_ObtainTuiPen{*tuiEngine,$AAAAAA,#TUIPEN_HALFSHADOW}
_ntui_ObtainTuiPen{*tuiEngine,$D0D0D0,#TUIPEN_HALFHALFSHINE}
_ntui_ObtainTuiPen{*tuiEngine,$BBBBBB,#TUIPEN_HALFHALFSHADOW}
_ntui_ObtainTuiPen{*tuiEngine,(($8090D0&$FEFEFEFE) LSR 1)+(($C3C3C3&$FEFEFEFE) LSR 1),#TUIPEN_HALFMARKER}
_ntui_ObtainTuiPen{*tuiEngine,$8090D0,#TUIPEN_MARKER}
_ntui_ObtainTuiPen{*tuiEngine,$000000,#TUIPEN_TEXT}
_ntui_ObtainTuiPen{*tuiEngine,$EEEEFF,#TUIPEN_ACTIVETEXT}
_ntui_ObtainTuiPen{*tuiEngine,$FFF5D8,#TUIPEN_BUBBLEBG}
_ntui_ObtainTuiPen{*tuiEngine,$FF0000,#TUIPEN_RED}
_ntui_ObtainTuiPen{*tuiEngine,$00FF00,#TUIPEN_GREEN}
_ntui_ObtainTuiPen{*tuiEngine,$0000FF,#TUIPEN_BLUE}

*tuiEngine\defSize[#TUISIZE_MIN          ] = #TUI_MINPIXELSIZE ; minimum possible (usually equals to 8)
*tuiEngine\defSize[#TUISIZE_SMALLFONT    ] = *tuiEngine\font[#TUIFONT_SMALL ]\tf_YSize     ; like small font
*tuiEngine\defSize[#TUISIZE_FONT         ] = *tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize    ; like normal font
*tuiEngine\defSize[#TUISIZE_BIGFONT      ] = *tuiEngine\font[#TUIFONT_BIG   ]\tf_YSize       ; like big font
*tuiEngine\defSize[#TUISIZE_FIXFONT      ] = *tuiEngine\font[#TUIFONT_FIX   ]\tf_YSize       ; like fix font
*tuiEngine\defSize[#TUISIZE_SMALLINLINE  ] = *tuiEngine\font[#TUIFONT_SMALL ]\tf_YSize ; like small font  +2
*tuiEngine\defSize[#TUISIZE_INLINE       ] = *tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize ; like normal font +2
*tuiEngine\defSize[#TUISIZE_HALFINLINE   ] = *tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize/2+1 ; like normal (font +2)/2
*tuiEngine\defSize[#TUISIZE_DOUBLEINLINE ] = *tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize*2+1 ; like normal (font +2)/2
*tuiEngine\defSize[#TUISIZE_ONEHALFINLINE] = *tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize*3/2+1 ; like normal (font +2)/2
*tuiEngine\defSize[#TUISIZE_BIGINLINE    ] = *tuiEngine\font[#TUIFONT_BIG   ]\tf_YSize ; like big font    +2
*tuiEngine\defSize[#TUISIZE_FIXINLINE    ] = *tuiEngine\font[#TUIFONT_FIX   ]\tf_YSize ; like fix font    +2
*tuiEngine\defSize[#TUISIZE_BUTTON       ] = *tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize ;2 + *tuiEngine\defPadding\top+*tuiEngine\defPadding\bottom ; like buttons (normal font +2 + pad\y*2)
*tuiEngine\defSize[#TUISIZE_KNOB         ] = *tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize-3
*tuiEngine\defSize[#TUISIZE_SCROLLER     ] = *tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize-1
*tuiEngine\defSize[#TUISIZE_NATIVE       ] = *tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize*2 ; native image resolution
*tuiEngine\defSize[#TUISIZE_MAX          ] = *tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize*4 ; maximum possible

For n.l=0 To #TUISIZE_MAX
  If *tuiEngine\defSize[n]<*tuiEngine\defSize[#TUISIZE_MIN] Then *tuiEngine\defSize[n]=*tuiEngine\defSize[#TUISIZE_MIN]
Next

If *tuiEngine\snPort
  If *tuiEngine\snScreenH Then screennotify_RemCloseScreenClient{*tuiEngine\snScreenH}
  *tuiEngine\snScreenH = screennotify_AddCloseScreenClient{*tuiEngine\scr,*tuiEngine\snPort}
End If

succ=True
Function Return succ
End Function




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeEngine {*tuiEngine.tuiEngine}                             /
;/                                                                             /
;/ Description:                                                                /
;/ private: free the tuiEngine
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : ???                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitEngine
Statement _ntui_DeinitEngine{*tuiEngine.tuiEngine}
_ntui_CloseScreen{*tuiEngine}
If *tuiEngine\rxPort       Then _ntui_FreeRexx{*tuiEngine}

If *tuiEngine\winPort      Then DeleteMsgPort_     *tuiEngine\winPort     : *tuiEngine\winPort     = #NULL

If *tuiEngine\snWorkbenchH Then screennotify_RemWorkbenchClient{*tuiEngine\snWorkbenchH} : *tuiEngine\snWorkbenchH = 0
If *tuiEngine\snScreenH    Then screennotify_RemCloseScreenClient{*tuiEngine\snScreenH}  : *tuiEngine\snScreenH    = 0
If *tuiEngine\snPort       Then DeleteMsgPort_     *tuiEngine\snPort      : *tuiEngine\snPort      = #NULL

If *tuiEngine\appIcon      Then RemoveAppIcon_     *tuiEngine\appIcon     : *tuiEngine\appIcon     = #NULL
If *tuiEngine\appIconDO    Then FreeDiskObject_    *tuiEngine\appIconDO   : *tuiEngine\appIconDO   = #NULL
If *tuiEngine\appMenu      Then RemoveAppMenuItem_ *tuiEngine\appMenu     : *tuiEngine\appMenu     = #NULL
If *tuiEngine\appPort      Then DeleteMsgPort_     *tuiEngine\appPort     : *tuiEngine\appPort     = #NULL

If *tuiEngine\outQ\sigBit  Then FreeSignal_        *tuiEngine\outQ\sigBit : *tuiEngine\outQ\sigBit = 0
If *tuiEngine\inQ\sigBit   Then FreeSignal_        *tuiEngine\inQ\sigBit  : *tuiEngine\inQ\sigBit  = 0

If *tuiEngine\aslfo        Then FreeAslRequest_ *tuiEngine\aslfo : *tuiEngine\aslfo = #NULL
If *tuiEngine\aslfr        Then FreeAslRequest_ *tuiEngine\aslfr : *tuiEngine\aslfr = #NULL
If *tuiEngine\aslsm        Then FreeAslRequest_ *tuiEngine\aslsm : *tuiEngine\aslsm = #NULL

str_Free{&*tuiEngine\appName}
str_Free{&*tuiEngine\appMenuName}
str_Free{&*tuiEngine\appIconFile}
str_Free{&*tuiEngine\appIconText}

If *tuiEngine\eventPool    Then DeletePool_ *tuiEngine\eventPool  : *tuiEngine\eventPool  = #NULL
If *tuiEngine\objectPool   Then DeletePool_ *tuiEngine\objectPool : *tuiEngine\objectPool = #NULL

str_Free{&*tuiEngine\onPopup}       ; wb menu or icon double click
str_Free{&*tuiEngine\onQuit}        ; app is requested to quit
str_Free{&*tuiEngine\onIconDrop}    ; drop icon on appicon
str_Free{&*tuiEngine\onIconify}     ; iconify
str_Free{&*tuiEngine\onMessage}     ; arexx message

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_CreateEngine {appname.s,@menuname.s,@icon.s,@pubn:: /
;/ ame.s,@*scr.Screen}                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * create a new tui engine */                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - appname.s    : name of the application                                                        /
;/ - menuname.s   : optional name for the Workbench App Menu                                                       /
;/ - icon.s       : optional icon that serves as an app icon                                                           /
;/ - pubname.s    : optional pubscreen name to popup on                                                        /
;/ - *scr.Screen  : optional screen pointer to popup on                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : tuiEngine                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////

Function.l ntui_CreateEngine{appName.s,@arexxPort.s,@appMenu.s,@appIcon.s,@pubname.s,@*scr.Screen}
ntui_BeginBuild{tuiGlobal}
*tuiEngine.tuiEngine = _ntui_CreateObject{#TUIOBJ_ENGINE,SizeOf.tuiEngine,"",0,""}

If *tuiEngine
  tuiGlobal\buildHelper\tuiEngine = *tuiEngine

  *tuiEngine\defMargin\left       = 1,1,1,1
  *tuiEngine\defPadding\left      = 1,0,1,0;2,2,2
  For n.l=0 To #TUIMAX_SIZES-1
    *tuiEngine\defSize[n]   = #TUI_MINPIXELSIZE  ; default size of fonts, arrows etc.
  Next
  *tuiEngine\skinPath       = #NULL

  *tuiEngine\inputTask      = #NULL
  *tuiEngine\useAISS        = False

  *tuiEngine\outQ\head      = #NULL
  *tuiEngine\outQ\tail      = #NULL
  *tuiEngine\outQ\sigBit    = AllocSignal_(-1)
  *tuiEngine\outQ\sigFlag   = 1 LSL *tuiEngine\outQ\sigBit
  *tuiEngine\outQ\sigTask   = FindTask_(#NULL)
  *tuiEngine\inQ\head       = #NULL
  *tuiEngine\inQ\tail       = #NULL
  *tuiEngine\inQ\sigBit     = AllocSignal_(-1)
  *tuiEngine\inQ\sigFlag    = 1 LSL *tuiEngine\inQ\sigBit
  *tuiEngine\inQ\sigTask    = FindTask_(#NULL)

  *tuiEngine\tuiEvent       = #NULL
  *tuiEngine\eventPool      = CreatePool_(#MEMF_ANY,SizeOf.tuiEvent*64,SizeOf.tuiEvent*2)
  *tuiEngine\objectPool     = CreatePool_(#MEMF_ANY,$8000,$4000)

  *tuiEngine\redrawMethod   = #TUIRM_CLEAR;#TUIRD_SMART
  *tuiEngine\obj\tuiEngine  = *tuiEngine

  *tuiEngine\rxPort         = #NULL
  *tuiEngine\rxPortName     = #NULL
  *tuiEngine\rxMsg          = #NULL
  *tuiEngine\rxString       = #NULL
  If arexxPort Then _ntui_InitRexx{*tuiEngine,arexxPort}

  *tuiEngine\winPort        = CreateMsgPort_()
  *tuiEngine\snPort         = CreateMsgPort_()
  *tuiEngine\snWorkbenchH   = screennotify_AddWorkbenchClient{*tuiEngine\snPort}
  *tuiEngine\snScreenH      = 0

  InitSemaphore_ *tuiEngine\lock

  *tuiEngine\mover          = #NULL
  ;*tuiEngine\active         = #NULL
  *tuiEngine\focus          = #NULL
  *tuiEngine\restingTime    = 0

  ;/* initialize App functionality (workbench.library) */
  *tuiEngine\appName        = #NULL
  *tuiEngine\appMenuName    = #NULL
  *tuiEngine\appIconFile    = #NULL
  *tuiEngine\appIconText    = #NULL
  *tuiEngine\appMenu        = #NULL
  *tuiEngine\appIcon        = #NULL
  *tuiEngine\appIconDO      = #NULL

  str_Write{&*tuiEngine\onPopup    ,!NOTIFYID_POPUP}               ; menu or icon doubleblick
  str_Write{&*tuiEngine\onIconDrop ,!NOTIFYID_ICONDROP}            ; drop icon on icon
  str_Write{&*tuiEngine\onQuit     ,!NOTIFYID_QUIT}
  str_Write{&*tuiEngine\onIconify  ,!NOTIFYID_ICONIFY}
  str_Write{&*tuiEngine\onMessage  ,!NOTIFYID_MESSAGE}
  ;If icon="" Then icon=dos_GetProgIcon{"Blitz3:Amiblitz3"}

  If appIcon Then str_Write{&*tuiEngine\appIconFile,appIcon}
  If appMenu Then str_Write{&*tuiEngine\appMenuName,appMenu}
  If appName Then str_Write{&*tuiEngine\appIconText,appName}
  If appName Then str_Write{&*tuiEngine\appName,appName}

  *tuiEngine\appPort = CreateMsgPort_()
  If *tuiEngine\appPort
    If *tuiEngine\appIconFile
      *tuiEngine\appIconDO = GetDiskObjectNew_(&*tuiEngine\appIconFile\str)
      If *tuiEngine\appIconDO=#NULL
        error{"\\__THIS_FUNCTION: Unable to get diskobject: \\22"+str_Read{&*tuiEngine\appIconFile}+"\\22!"}
      Else
        *tuiEngine\appIconDO\do_Magic       = 0
     ;   *tuiEngine\appIconDO\do_Version     = 0 ; if we do this, PNG Icons dont work anymore...
        *tuiEngine\appIconDO\do_Type        = 0
        *tuiEngine\appIconDO\do_DefaultTool = #NULL
        *tuiEngine\appIconDO\do_ToolTypes   = #NULL
        *tuiEngine\appIconDO\do_CurrentX    = #NO_ICON_POSITION
        *tuiEngine\appIconDO\do_CurrentY    = #NO_ICON_POSITION
        *tuiEngine\appIconDO\do_DrawerData  = #NULL
        *tuiEngine\appIconDO\do_ToolWindow  = #NULL
        *tuiEngine\appIconDO\do_StackSize   = #NULL
      End If
    End  If
    If *tuiEngine\appMenuName
      *tuiEngine\appMenu = AddAppMenuItemA_(#APP_MENUHIT,#NULL,&*tuiEngine\appMenuName\str,*tuiEngine\appPort,#NULL)
    End If
  End If

  *tuiEngine\obj\Draw          = #NULL
  !_GetFuncPointer{*tuiEngine\obj\Layout       ,_ntui_LayoutEngine,{0,0,0}}
  !_GetFuncPointer{*tuiEngine\obj\DispatchEvent,_ntui_DispatchEngineEvent,{0,0}}
  *tuiEngine\obj\CalculateMinSize = #NULL
  !_GetFuncPointer{*tuiEngine\obj\Deinit       ,_ntui_DeinitEngine,{0}}
  !_GetFuncPointer{*tuiEngine\obj\SetAttr      ,_ntui_SetEngineAttr,{0,0,0}}
  !_GetFuncPointer{*tuiEngine\obj\GetAttr      ,_ntui_GetEngineAttr,{0,0,0}}
  InitRastPort_ *tuiEngine\buildRP

  For n.l=0 To #TUIMAX_BORDER-1
    *tuiEngine\skinImage[n] = #NULL
    *tuiEngine\skinImageAvail[n] = True
  Next

  str_Write{&*tuiEngine\skinImageName[#TUIBORDER_NONE     ] , "NTUI:none.9.png"    }; no border
  str_Write{&*tuiEngine\skinImageName[#TUIBORDER_FLAT     ] , "NTUI:flat.9.png"    }; flat, 1 colored vorder
  str_Write{&*tuiEngine\skinImageName[#TUIBORDER_RECESSED ] , "NTUI:string.9.png"}; recessed border
  str_Write{&*tuiEngine\skinImageName[#TUIBORDER_RAISED   ] , "NTUI:raised.9.png"  }; raised border
  str_Write{&*tuiEngine\skinImageName[#TUIBORDER_GROUP    ] , "NTUI:group.9.png"   }; group style border
  str_Write{&*tuiEngine\skinImageName[#TUIBORDER_BUTTON   ] , "NTUI:button.9.png"  }; button border
  str_Write{&*tuiEngine\skinImageName[#TUIBORDER_STRING   ] , "NTUI:string.9.png"  }; string border
  str_Write{&*tuiEngine\skinImageName[#TUIBORDER_TITLE    ] , "NTUI:progressbar.9.png"   }; group style border with title
  str_Write{&*tuiEngine\skinImageName[#TUIBORDER_TOOL     ] , "NTUI:tool.9.png"    }; tool button border
  str_Write{&*tuiEngine\skinImageName[#TUIBORDER_MENUBAR  ] , "NTUI:menubar.9.png" }; menu bar border
  str_Write{&*tuiEngine\skinImageName[#TUIBORDER_BUBBLE   ] , "NTUI:bubble.9.png"  }; menu bar border
  str_Write{&*tuiEngine\skinImageName[#TUIBORDER_MENU     ] , "NTUI:menu.9.png"    }; menu bar border
  str_Write{&*tuiEngine\skinImageName[#TUIBORDER_WINDOW   ] , "NTUI:window.9.png"  }; window border

  If *scr=-1 Then *scr=#NULL
  If ((pubname><"") OR (*scr><#NULL))
    _ntui_OpenScreen{*tuiEngine,pubname,*scr}
  End If
End If
ntui_EndBuild{}
Function Return *tuiEngine
End Function



