; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 4
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 54
; CursorColumn    = 100
; LabelSearch     = "cre"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_ObtainTempBuffer {byteSize.l}                      /
;/                                                                             /
;/ Description:                                                                /
;/ Get some temporary memory from NTUI. Call _ntui_ReleaseTempBuffer if you are done.
;/ Don't hold this memory for long time. The memory is shared among all NTUI programs running, and holding this memory will block other programs.                                                                            /
;/
;/ Inputs:                                                                     /
;/ - byteSize.l    : size in bytes required                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l      : memory buffer of at least byteSize size                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_ObtainTempBuffer{byteSize.l}
  !_ASSERT{(tuiGlobal\cookie=#TUI_COOKIE)}
  ObtainSemaphore_ tuiGlobal\tempBuffer\lock
  If byteSize>tuiGlobal\tempBuffer\tmpByteSize
    If tuiGlobal\tempBuffer\tmpP Then FreeVec_ tuiGlobal\tempBuffer\tmpP : tuiGlobal\tempBuffer\tmpP=Null
    tuiGlobal\tempBuffer\tmpP = AllocVec_(byteSize,#MEMF_ANY)
    If tuiGlobal\tempBuffer\tmpP Then tuiGlobal\tempBuffer\tmpByteSize=byteSize : Else tuiGlobal\tempBuffer\tmpByteSize=0
  End If
  If tuiGlobal\tempBuffer\tmpP=Null Then ReleaseSemaphore_ tuiGlobal\tempBuffer\lock
  Function Return tuiGlobal\tempBuffer\tmpP
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_ReleaseTempBuffer {}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ private: Release the temporary buffer obtained by _ntui_ObtainTempBuffer.                                               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_ReleaseTempBuffer{}
  !_ASSERT{tuiGlobal\cookie=#TUI_COOKIE}
  ReleaseSemaphore_ tuiGlobal\tempBuffer\lock
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeTempBuffer {}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ private: Strictly private function. Called automatically on _ntui_Free.                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_FreeTempBuffer{}
  !_ASSERT{tuiGlobal\cookie=#TUI_COOKIE}
  ObtainSemaphore_ tuiGlobal\tempBuffer\lock
  If tuiGlobal\tempBuffer\tmpP Then FreeVec_ tuiGlobal\tempBuffer\tmpP : tuiGlobal\tempBuffer\tmpP=Null
  tuiGlobal\tempBuffer\tmpByteSize=0
  ReleaseSemaphore_ tuiGlobal\tempBuffer\lock
End Statement


