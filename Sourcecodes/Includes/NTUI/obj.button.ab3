; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res,SDSTCP2.res,xpk.res,ttengine.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 13
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 683
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_button.include                                                   /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#TUI_HAS_BUTTON = 1

#TUIBA_BASE        = #TUIA_USER
#TUIBA_CHECKED     = #TUIA_VALUE
#TUIBA_LABEL       = #TUIA_STRING
#TUIBA_IMAGE       = #TUIBA_BASE +  1
#TUIBA_IMAGE2      = #TUIBA_BASE +  2
#TUIBA_TICKDELAY   = #TUIBA_BASE +  3
#TUIBA_ONCLICK     = #TUIBA_BASE +  4
#TUIBA_ONCLICKCB   = #TUIBA_BASE +  5
#TUIBA_ONTOUCH     = #TUIBA_BASE +  6
#TUIBA_ONTOUCHCB   = #TUIBA_BASE +  7
#TUIBA_ONRELEASE   = #TUIBA_BASE +  8
#TUIBA_ONRELEASECB = #TUIBA_BASE +  9
#TUIBA_ONREPEAT    = #TUIBA_BASE + 10
#TUIBA_ONREPEATCB  = #TUIBA_BASE + 11
#TUIBA_ONDISMISS   = #TUIBA_BASE + 12
#TUIBA_ONDISMISSCB = #TUIBA_BASE + 13
#TUIBA_SUBCLASSID  = #TUIBA_BASE + 14
#TUIBA_IMAGESIZE   = #TUIBA_BASE + 15
#TUIBA_IMAGE2SIZE  = #TUIBA_BASE + 16
#TUIBA_FUNCTION    = #TUIBA_BASE + 17
#TUIBA_CONTENT     = #TUIBA_BASE + 18

;/* tuiButton subtypes */
#TUIBUTTON_NORMAL       = 0
#TUIBUTTON_CHECKBOX     = 1
#TUIBUTTON_TOOL         = 2
#TUIBUTTON_IMAGE        = 3
#TUIBUTTON_RADIO        = 4
;#TUIBUTTON_FUNCTION     = 5
#TUIMAX_BUTTON          = 6

;X Are Varnames short? *tuiEvent => *ev
;X Is everything "Null" (NOT #NULL)
;X are all str_Read/Writes with &
;X Are onXZY events thrown?
;X Are onXZY event handlers initialized (constructor) and freed (Deinit)?
;X Are onXZY event handlers reachable via XML and SetAttr/GetAttr
;- remove *ev\tuiObject=... when notifyID is sent <======================== Why?
;X bool return values .w (get/setAttr/Dispatch are Bool!)
;X have all Pointer Return values? cast will be (.tuiType)
;X XML wrapper should Use SetObjectAttr instead of SetAttr For performance issues
;X is Syntax of getters AND setters OK (take pointers to fill, return value is bool)?
;X Every Setter should have a Getter AND v.v.
;X*ev shall be never never destroyed, Use tuiHandleNotify Macro !!!
;X if value or string is changed use parent TUIA values but treat them ::WAS: Double Definitions of TUIA_ NOT allowed! Make own AND wrapp
;X are ASSERTs Used where it makes sense? (also assert the Object class!!!)
;X set "b" Builder functions
;- are all string freed On deinit?
;- does it only draw If visible?
;X does dispatch Event correctly
;X make constructor with only taglist
;X Make punction pointers via global variable (MakeGlobalFunctionPointer)
;X do we read/write notifyIDs to \notifyID and not the NotifyHandler itself?
;X has #TUI_HAS_XZY ?
;X remove USEPATH
;X XML Register functions
;X Remove __include and optimize
;X add fg and bg Image drawing
;X are all bindings done?

NEWTYPE.tuiButton

  obj.tuiObject            ; tui object header
  subClassID.l
  state.l
  tickDelay.l
  tickCount.l
  funcID.l

  *tbi.tuiTBImage
  imageWidth.l
  imageHeight.l

  *tbi2.tuiTBImage
  image2Width.l
  image2Height.l

  *content.str

  onClick.tuiNotifyHandler
  onTouch.tuiNotifyHandler
  onRelease.tuiNotifyHandler
  onRepeat.tuiNotifyHandler
  onDismiss.tuiNotifyHandler

End NEWTYPE


_ntui_FunctionButtonCallback:
Function.w _ntui_FunctionButtonCallback{*notifyID.str,*ev.tuiEvent}
  If *ev\obj\classID=#TUICLASS_BUTTON
    *button.tuiButton = (.tuiButton)*ev\obj
    Select *button\funcID
      Case #TUIFUNC_LEFT   : _ntui_PropagateBind{*button,#TUIEV_BIND_HDELTA,-1,Null}
      Case #TUIFUNC_RIGHT  : _ntui_PropagateBind{*button,#TUIEV_BIND_HDELTA, 1,Null}
      Case #TUIFUNC_UP     : _ntui_PropagateBind{*button,#TUIEV_BIND_VDELTA,-1,Null}
      Case #TUIFUNC_DOWN   : _ntui_PropagateBind{*button,#TUIEV_BIND_VDELTA, 1,Null}
      Case #TUIFUNC_DEC    : _ntui_PropagateBind{*button,#TUIEV_BIND_DELTA ,-1,Null}
      Case #TUIFUNC_INC    : _ntui_PropagateBind{*button,#TUIEV_BIND_DELTA , 1,Null}

      Case #TUIFUNC_FONT
        fontname.s = str_Read{&*button\content}
        fontsize.l = *button\obj\value
        If ntui_ASLFontRequest{*button\obj\engine,fontname,fontsize}
          ntui_SetAttr{*button,#TUIBA_CONTENT,*button\obj\engine\aslfo\fo_TAttr\tta_Name}
          ntui_SetAttr{*button,#TUIA_VALUE   ,*button\obj\engine\aslfo\fo_TAttr\tta_YSize}
        End If

      Case #TUIFUNC_FILE
        filename.s = str_Read{&*button\content}
        path.s = _ntui_PathPart{filename}
        fil.s  = _ntui_FilePart{filename}
        patt.s = "#?"
        If ntui_ASLFileRequest{*button\obj\engine,path,fil,patt,False,False,False,True}
          fil  = Peek.s(*button\obj\engine\aslfr\fr_File)
          path = Peek.s(*button\obj\engine\aslfr\fr_Drawer)
          patt = Peek.s(*button\obj\engine\aslfr\fr_Pattern)
          filename = _ntui_AddPart{path,fil}
          ntui_SetAttr{*button,#TUIBA_CONTENT,&filename}
        End If

      Case #TUIFUNC_SAVE
        filename.s = str_Read{&*button\content}
        path.s = _ntui_PathPart{filename}
        fil.s  = _ntui_FilePart{filename}
        patt.s = "#?"
        If ntui_ASLFileRequest{*button\obj\engine,path,fil,patt,True,False,False,True}
          fil  = Peek.s(*button\obj\engine\aslfr\fr_File)
          path = Peek.s(*button\obj\engine\aslfr\fr_Drawer)
          patt = Peek.s(*button\obj\engine\aslfr\fr_Pattern)
          filename = _ntui_AddPart{path,fil}
          ntui_SetAttr{*button,#TUIBA_CONTENT,&filename}
        End If

      Case #TUIFUNC_PATH
        path.s = str_Read{&*button\content}
        If ntui_ASLFileRequest{*button\obj\engine,path,"","",False,False,True,True}
          ntui_SetAttr{*button,#TUIBA_CONTENT,*button\obj\engine\aslfr\fr_Drawer}
        End If

      Case #TUIFUNC_SCREEN
        name.s = str_Read{&*button\content}
        modeID.l = *button\obj\value
        width.l  = 0
        height.l = 0
        depth_.l = 0
        If ntui_ASLScreenModeRequest{*button\obj\engine,modeID,width,height,depth_}
          modeID = *button\obj\engine\aslsm\sm_DisplayID
          depth_ = *button\obj\engine\aslsm\sm_DisplayDepth
          width  = *button\obj\engine\aslsm\sm_DisplayWidth
          height = *button\obj\engine\aslsm\sm_DisplayHeight
          mode_ptr.l = FindDisplayInfo_ (modeID)
          If mode_ptr
            count.l = GetDisplayInfoData_ (mode_ptr,&naminfo.NameInfo,SizeOf.NameInfo,#DTAG_NAME,modeID)
            If count Then modename.s = Peek.s(&naminfo\Name) : Else modename = "???"
          End If
          modename.s + " ("+Str$(width)+"x"+Str$(height)+"x"+Str$(depth_)+")"
          ntui_SetAttr{*button,#TUIBA_CONTENT,&modename}
          ntui_SetAttr{*button,#TUIA_VALUE   ,modeID}
        End If

    End Select
  End If

  Function Return True

End Function
!_MakeGlobalFuncPointer{_ntui_FunctionButtonCallback,{Null,Null}}


_ntui_SetButtonAttr:
Function.w _ntui_SetButtonAttr{*button.tuiButton,ti_Tag.l,ti_Data.l}
  !_ASSERT{*button}
  !_ASSERT{*button\obj\classID=#TUICLASS_BUTTON}

  done.w = True
  Select ti_Tag
    Case #TUIBA_IMAGE
      If *button\tbi Then ntui_FreeTBImage{*button\tbi} : *button\tbi = Null
      If ti_Data Then *button\tbi = ntui_CreateTBImage{*button\obj\engine,Peek.s(ti_Data),*button\imageWidth,*button\imageHeight}

    Case #TUIBA_IMAGE2
      If *button\tbi2 Then ntui_FreeTBImage{*button\tbi2} : *button\tbi2 = Null
      If ti_Data Then *button\tbi2 = ntui_CreateTBImage{*button\obj\engine,Peek.s(ti_Data),*button\image2Width,*button\image2Height}

    Case #TUIBA_IMAGESIZE   : *button\imageWidth  = ti_Data : *button\imageHeight  = ti_Data
    Case #TUIBA_IMAGE2SIZE  : *button\image2Width = ti_Data : *button\image2Height = ti_Data
    Case #TUIBA_TICKDELAY   : *button\tickDelay = ti_Data
    Case #TUIBA_ONCLICK     : str_WritePtr{&*button\onClick\notifyID  ,ti_Data}
    Case #TUIBA_ONRELEASE   : str_WritePtr{&*button\onRelease\notifyID,ti_Data}
    Case #TUIBA_ONTOUCH     : str_WritePtr{&*button\onTouch\notifyID  ,ti_Data}
    Case #TUIBA_ONREPEAT    : str_WritePtr{&*button\onRepeat\notifyID ,ti_Data}
    Case #TUIBA_ONDISMISS   : str_WritePtr{&*button\onDismiss\notifyID,ti_Data}
    Case #TUIBA_ONCLICKCB   : *button\onClick\callback    = ti_Data
    Case #TUIBA_ONRELEASECB : *button\onRelease\callback  = ti_Data
    Case #TUIBA_ONTOUCHCB   : *button\onTouch\callback    = ti_Data
    Case #TUIBA_ONREPEATCB  : *button\onRepeat\callback   = ti_Data
    Case #TUIBA_ONDISMISSCB : *button\onDismiss\callback  = ti_Data
    Case #TUIBA_LABEL       : str_WritePtr{&*button\obj\string,ti_Data}   ;: _ntui_PropagateBind{*button,#TUIEV_BIND_STRING,0,*button\obj\string}
    Case #TUIBA_CONTENT     : str_WritePtr{&*button\content,ti_Data   }   : _ntui_PropagateBind{*button,#TUIEV_BIND_STRING,0,*button\content}
    Case #TUIBA_CHECKED     : *button\obj\value  = ti_Data                : _ntui_PropagateBind{*button,#TUIEV_BIND_VALUE ,*button\obj\value,Null}
    Case #TUIBA_SUBCLASSID  : *button\subClassID = ti_Data
    Case #TUIBA_FUNCTION:
      *button\funcID = ti_Data

      Select *button\funcID
        Case #TUIFUNC_UP
          img.s = "ARROWUP" : _ntui_SetButtonAttr{*button,#TUIBA_IMAGE,&img}
          *button\tickDelay = *button\obj\engine\defTickDelay
          *button\onTouch\callback  = *_ntui_FunctionButtonCallback
          *button\onRepeat\callback = *_ntui_FunctionButtonCallback

        Case #TUIFUNC_DOWN
          img.s = "ARROWDOWN" : _ntui_SetButtonAttr{*button,#TUIBA_IMAGE,&img}
          *button\tickDelay = *button\obj\engine\defTickDelay
          *button\onTouch\callback  = *_ntui_FunctionButtonCallback
          *button\onRepeat\callback = *_ntui_FunctionButtonCallback

        Case #TUIFUNC_LEFT
          img.s = "ARROWLEFT" : _ntui_SetButtonAttr{*button,#TUIBA_IMAGE,&img}
          *button\tickDelay = *button\obj\engine\defTickDelay
          *button\onTouch\callback  = *_ntui_FunctionButtonCallback
          *button\onRepeat\callback = *_ntui_FunctionButtonCallback

        Case #TUIFUNC_RIGHT
          img.s = "ARROWRIGHT" : _ntui_SetButtonAttr{*button,#TUIBA_IMAGE,&img}
          *button\tickDelay = *button\obj\engine\defTickDelay
          *button\onTouch\callback  = *_ntui_FunctionButtonCallback
          *button\onRepeat\callback = *_ntui_FunctionButtonCallback

        Case #TUIFUNC_INC
          img.s = "INC" : _ntui_SetButtonAttr{*button,#TUIBA_IMAGE,&img}
          *button\tickDelay = *button\obj\engine\defTickDelay
          *button\onTouch\callback  = *_ntui_FunctionButtonCallback
          *button\onRepeat\callback = *_ntui_FunctionButtonCallback

        Case #TUIFUNC_DEC
          img.s = "DEC" : _ntui_SetButtonAttr{*button,#TUIBA_IMAGE,&img}
          *button\tickDelay = *button\obj\engine\defTickDelay
          *button\onTouch\callback  = *_ntui_FunctionButtonCallback
          *button\onRepeat\callback = *_ntui_FunctionButtonCallback

        Case #TUIFUNC_PATH
          img.s = "PATH" : _ntui_SetButtonAttr{*button,#TUIBA_IMAGE,&img}
          *button\onClick\callback  = *_ntui_FunctionButtonCallback

        Case #TUIFUNC_FILE
          img.s = "FILE" : _ntui_SetButtonAttr{*button,#TUIBA_IMAGE,&img}
          *button\onClick\callback  = *_ntui_FunctionButtonCallback

        Case #TUIFUNC_SAVE
          img.s = "SAVE" : _ntui_SetButtonAttr{*button,#TUIBA_IMAGE,&img}
          *button\onClick\callback  = *_ntui_FunctionButtonCallback

        Case #TUIFUNC_SCREEN
          img.s = "SCREEN" : _ntui_SetButtonAttr{*button,#TUIBA_IMAGE,&img}
          *button\onClick\callback  = *_ntui_FunctionButtonCallback

        Case #TUIFUNC_FONT
          img.s = "FONT" : _ntui_SetButtonAttr{*button,#TUIBA_IMAGE,&img}
          *button\onClick\callback  = *_ntui_FunctionButtonCallback

        Case #TUIFUNC_SPIN
          *button\imageWidth  = #TUISIZE_HALFBUTTON : *button\imageHeight  = #TUISIZE_HALFBUTTON
          *button\image2Width = #TUISIZE_HALFBUTTON : *button\image2Height = #TUISIZE_HALFBUTTON
          img.s = "INC" : _ntui_SetButtonAttr{*button,#TUIBA_IMAGE,&img}
          img.s = "DEC" : _ntui_SetButtonAttr{*button,#TUIBA_IMAGE2,&img}
          *button\tickDelay = *button\obj\engine\defTickDelay

        Default
          img.s = "UNDEFINED" : _ntui_SetButtonAttr{*button,#TUIBA_IMAGE,&img}

      End Select

    Default
      done = False

  End Select

  If done Then If (*button\obj\flags&#TUIF_ONSCREEN) Then ntui_Refresh{*button,Null}

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_SetButtonAttr,{Null,0,0}}


_ntui_GetButtonAttr:
Function.w _ntui_GetButtonAttr{*button.tuiButton,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*button}
  !_ASSERT{*button\obj\classID=#TUICLASS_BUTTON}

  done.w = True
  Select ti_Tag
    Case #TUIBA_IMAGE       : *ti_Data\l = *button\tbi
    Case #TUIBA_IMAGE2      : *ti_Data\l = *button\tbi2
    Case #TUIBA_IMAGESIZE   : *ti_Data\l = *button\imageHeight
    Case #TUIBA_IMAGE2SIZE  : *ti_Data\l = *button\image2Height
    Case #TUIBA_TICKDELAY   : *ti_Data\l = *button\tickDelay
    Case #TUIBA_ONCLICK     : *ti_Data\l = str_GetPtr{*button\onClick\notifyID}
    Case #TUIBA_ONRELEASE   : *ti_Data\l = str_GetPtr{*button\onRelease\notifyID}
    Case #TUIBA_ONTOUCH     : *ti_Data\l = str_GetPtr{*button\onTouch\notifyID}
    Case #TUIBA_ONREPEAT    : *ti_Data\l = str_GetPtr{*button\onRepeat\notifyID}
    Case #TUIBA_ONDISMISS   : *ti_Data\l = str_GetPtr{*button\onDismiss\notifyID}
    Case #TUIBA_ONCLICKCB   : *ti_Data\l = *button\onClick\callback
    Case #TUIBA_ONRELEASECB : *ti_Data\l = *button\onRelease\callback
    Case #TUIBA_ONTOUCHCB   : *ti_Data\l = *button\onTouch\callback
    Case #TUIBA_ONREPEATCB  : *ti_Data\l = *button\onRepeat\callback
    Case #TUIBA_ONDISMISSCB : *ti_Data\l = *button\onDismiss\callback
    Case #TUIBA_LABEL       : *ti_Data\l = str_GetPtr{*button\obj\string}
    Case #TUIBA_CONTENT     : *ti_Data\l = str_GetPtr{*button\content}
    Case #TUIBA_CHECKED     : *ti_Data\l = *button\obj\value

    Default
      done = False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_GetButtonAttr,{Null,0,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawButton {*button.tuiButton,*rp.RastPort}                 /
;/                                                                             /
;/ DescriptiOn:                                                                /
;/         ;Case *button\hotkey                                             /
;/ * draw the button in all its beauty */                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *button.tuiButton    : ???                                             /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawButton:
Statement _ntui_DrawButton{*button.tuiButton,*rp.RastPort,*rpclip.tuiRect}
  !_ASSERT{*button}
  !_ASSERT{*button\obj\classID=#TUICLASS_BUTTON}
  *engine.tuiEngine = *button\obj\engine
  !_ASSERT{*engine}
  !_ASSERT{*rp}

  bgDone.l   = False
  bgTuiPen.l = *button\obj\bgTuiPen ; #TUIPEN_HALFSHINE
  fgTuiPen.l = *button\obj\fgTuiPen ; #TUIPEN_ACTIVELABEL

  Select *button\subClassID
;    Case #TUIBUTTON_CHECKBOX
;      If bgTuiPen><#TUIPEN_TRANSPARENT
;        If *button\obj\flags&#TUIF_ACTIVE
;          bgTuiPen.l = #TUIPEN_HALFSHINE
;          fgTuiPen.l = #TUIPEN_ACTIVETEXT
;        Else
;        ;  bgTuiPen = #TUIPEN_HALFSHINE
;        ;  fgTuiPen = #TUIPEN_TEXT
;        End If
;      End If
;
;    Case #TUIBUTTON_TOOL
;      If *button\obj\flags&#TUIF_ACTIVE
;        bgTuiPen = #TUIPEN_HALFSHINE
;        fgTuiPen = #TUIPEN_TEXT
;      Else
;      ;  bgTuiPen = #TUIPEN_TRANSPARENT;BACKGROUND ; ntui_GetBGTuiPen{*button\obj\parent}
;      ;  fgTuiPen = #TUIPEN_TEXT
;      End If
;
;    Case #TUIBUTTON_RADIO
;
    Default
      If bgTuiPen><#TUIPEN_TRANSPARENT
        If *button\state
          bgTuiPen = #TUIPEN_MARKER
          fgTuiPen = #TUIPEN_ACTIVETEXT
        Else
        ;  bgTuiPen = #TUIPEN_HALFSHINE
        ;  fgTuiPen = #TUIPEN_TEXT
        End If
      End If
  End Select

  If (*button\obj\bgImage)
    ntui_DrawTBImage{*button\obj\bgImage,*rp,&*button\obj\bbox,&*button\obj\bbox,*button\obj\flags,#TUIPEN_TRANSPARENT}
    bgTuiPen = #TUIPEN_TRANSPARENT
  Else
    If (*button\obj\borderType><#TUIBORDER_NONE)
      If ntui_DrawBorder{*engine,*rp,*button\obj\bbox,*button\obj\borderType,*button\obj\flags} Then bgTuiPen = #TUIPEN_TRANSPARENT
    End If
    If *engine\fillStyle=1 AND bgTuiPen><#TUIPEN_TRANSPARENT
      _ntui_DrawGradientBox{*engine,*rp,*button\obj\ibox,bgTuiPen,#TUIORIENT_HORIZONTAL, *button\state}
      bgTuiPen = #TUIPEN_TRANSPARENT
    End If
  EndIf

  If bgTuiPen><#TUIPEN_TRANSPARENT
    CNIF #TUI_DEBUG
      SetAPen_ *rp,RNDPen{}
    CELSE
      SetAPen_ *rp,*engine\pen[bgTuiPen]
    CEND
  EndIf

  !tuiCopyRect{txbox.tuiRect,*button\obj\cbox}
  !tuiCopyRect{tobox.tuiRect,*button\obj\ibox}
  txflags.l          = (*button\obj\flags|#TUIF_BOTTOM|#TUIF_TOP)-(#TUIF_BOTTOM|#TUIF_TOP)

  If (*button\tbi)
    !tuiCopyRect{imbox.tuiRect,*button\obj\cbox}
    !tuiCopyRect{iobox.tuiRect,*button\obj\ibox}
    imflags.l          = txflags

    If (*button\obj\flags&#TUIF_BOTTOM) ; label at bottom of button
      If *button\obj\string
        tuifont.l    = _ntui_SetFont{*engine,*button\obj\flags}
        imbox\bottom = txbox\bottom-*engine\font[tuifont]\tf_YSize
        txbox\top    = imbox\bottom+1
        iobox\bottom = imbox\bottom
        tobox\top    = txbox\top
        imflags | #TUIF_BOTTOM
        txflags | (#TUIF_TOP|#TUIF_LEFT|#TUIF_RIGHT) - (#TUIF_LEFT|#TUIF_RIGHT)
      End If
    Else                                   ; label left of button
      If *button\obj\string
        imbox\right = imbox\left+ntui_GetTBImageWidth{*button\tbi}-1
        iobox\right = imbox\right + *button\obj\padding\right
        txbox\left  = iobox\right+1
        tobox\left  = txbox\left
      End If
    End If
  End If

  If *button\funcID=#TUIFUNC_SPIN
    !tuiCopyRect{imbox.tuiRect,*button\obj\cbox}
    imbox\right  = (imbox\left + imbox\right)/2
    imbox\bottom = (imbox\top + imbox\bottom)/2
    ntui_DrawTBImage{*button\tbi,*rp,tobox,imbox,txflags,bgTuiPen}

    !tuiCopyRect{imbox.tuiRect,*button\obj\cbox}
    imbox\left  = (imbox\left + imbox\right)/2
    imbox\top = (imbox\top + imbox\bottom)/2
    ntui_DrawTBImage{*button\tbi2,*rp,tobox,imbox,txflags,#TUIPEN_TRANSPARENT}
    !tuiCopyRect{imbox.tuiRect,*button\obj\ibox}
    If ((*button\obj\flags&#TUIF_DISABLED)=0) Then SetAPen_ *rp,*engine\pen[#TUIPEN_SHADOW] : Else SetAPen_ *rp,*engine\pen[#TUIPEN_HALFSHADOW]
    Move_ *rp,imbox\left,imbox\bottom-1
    Draw_ *rp,imbox\right-1,imbox\top

    SetAPen_ *rp,*engine\pen[#TUIPEN_HALFSHADOW]
    Move_ *rp,imbox\left,imbox\bottom
    Draw_ *rp,imbox\right,imbox\top

    If ((*button\obj\flags&#TUIF_DISABLED)=0) Then SetAPen_ *rp,*engine\pen[#TUIPEN_WHITE] : Else SetAPen_ *rp,*engine\pen[#TUIPEN_HALFSHINE]
    Move_ *rp,imbox\left+1,imbox\bottom
    Draw_ *rp,imbox\right,imbox\top+1

  Else
    If (*button\tbi)
      If *button\obj\value
        ntui_DrawTBImage{*button\tbi,*rp,iobox,imbox,imflags,bgTuiPen}
      Else
        If *button\tbi2
          ntui_DrawTBImage{*button\tbi2,*rp,iobox,imbox,imflags,bgTuiPen}
        Else
          ntui_DrawTBImage{*button\tbi,*rp,iobox,imbox,imflags,bgTuiPen}
        End If
      End If
    End If
  End If


  If *button\obj\string
    ;If *button\subClassID><#TUIBUTTON_FUNCTION
      _ntui_Print{*engine,*button\obj\string,tobox,txbox,txflags,*rp,fgTuiPen,bgTuiPen}
    ;End If
;    Select *button\subClassID
;      Case #TUIBUTTON_NORMAL
;        _ntui_Print{*engine,*button\obj\string,tobox,txbox,txflags,*rp,fgTuiPen,bgTuiPen}
;      Case #TUIBUTTON_TOOL
;        _ntui_Print{*engine,*button\obj\string,tobox,txbox,txflags,*rp,fgTuiPen,bgTuiPen}
;      Case #TUIBUTTON_RADIO
;        _ntui_Print{*engine,*button\obj\string,tobox,txbox,txflags,*rp,fgTuiPen,bgTuiPen}
;      Case #TUIBUTTON_CHECKBOX
;        _ntui_Print{*engine,*button\obj\string,tobox,txbox,txflags,*rp,fgTuiPen,bgTuiPen}
;      Case #TUIBUTTON_IMAGE
;        _ntui_Print{*engine,*button\obj\string,tobox,txbox,txflags,*rp,fgTuiPen,bgTuiPen}
;    End Select
  End If


  If (*button\obj\flags&#TUIF_FOCUS)
    If ((*button\obj\flags&#TUIF_ACTIVE)=0)
      _ntui_DrawDottedBorder{*engine,*rp,*button\obj\cbox,*button\obj\flags}
    End If
  End If

  ;If *button\obj\borderType><#TUIBORDER_NONE Then _ntui_DrawGlossBox{*button\obj\engine,*rp,*button\obj\ibox}

End Statement
!_MakeGlobalFuncPointer{_ntui_DrawButton,{Null,Null,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = _ntui_DispatchButton {*button.tuiButton,*ev.tui:: /
;/ Event}                                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * tui button newtype */                                                     /
;/ obj.tuiObject            ; tui object header                                /
;/ * do what happens if the user operates the button */                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *button.tuiButton    : ???                                             /
;/ - *ev.tuiEvent    : ???                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DispatchButtonEvent:
Function.w _ntui_DispatchButtonEvent{*button.tuiButton,*ev.tuiEvent}
  !_ASSERT{*button}
  !_ASSERT{*button\obj\classID=#TUICLASS_BUTTON}
  !_ASSERT{*ev}

  done.w   = False
  doFunc.w = False

  Select *ev\evID
    Case #TUIEV_BIND_VALUE
      If *button\subClassID=#TUIBUTTON_RADIO
        If *ev\value
          *button\obj\value = 0
        Else
          *button\obj\value = 1
        End If
      Else
        *button\obj\value = *ev\value
      End If
      ntui_Refresh{*button,Null}
      done=True

    Case #TUIEV_BIND_STRING
      str_Dup{&*button\content,*ev\string}
      ;ntui_Refresh{*button,Null}
      done=True

    Case #TUIEV_PROPAGATE
      _ntui_PropagateBind{*button,#TUIEV_BIND_VALUE ,*button\obj\value,Null}
      _ntui_PropagateBind{*button,#TUIEV_BIND_STRING,0,*button\content}

    Case #TUIEV_MOUSEDOWN
      If *ev\value = 0 ; we want button 0
        If ntui_HitObject{*button,*ev\pos\x,*ev\pos\y}

          ntui_SetFocus{*button}
          *button\obj\flags | #TUIF_ACTIVE
          *button\tickCount = 0
          If *button\obj\flags &#TUIF_TOGGLE
            *button\state = 1-*button\obj\value
          Else
            *button\state = 1 ; pressed
          End If

          !tuiHandleNotify{done,*button,onTouch,*ev}
          ntui_Refresh{*button,Null}
          done=True
        End If
      End If

    Case #TUIEV_MOUSEUP
      If *ev\value = 0 ; we want button 0
        If *button\obj\flags&#TUIF_ACTIVE
          If ntui_HitObject{*button,*ev\pos\x,*ev\pos\y}

            If *button\obj\flags &#TUIF_TOGGLE
              If *button\subClassID=#TUIBUTTON_RADIO
                *button\obj\value = 1
              Else
                *button\obj\value = 1-*button\obj\value
              End If
              *button\state = *button\obj\value
              _ntui_PropagateBind{*button,#TUIEV_BIND_VALUE,*button\obj\value,Null}
            Else
              *button\state = 0 ; pressed
            End If
            *button\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
            !tuiHandleNotify{done,*button,onClick,*ev}
          Else
            *button\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
            !tuiHandleNotify{done,*button,onDismiss,*ev}
          End If

          If done=False
            !tuiHandleNotify{done,*button,onRelease,*ev}
          End If
          ntui_Refresh{*button,Null}
          done=True
        End If
      End If

    Case #TUIEV_MOUSEMOVE
      If *button\obj\flags&#TUIF_ACTIVE
        oldstate.l = *button\state
        If ntui_HitObject{*button,*ev\pos\x,*ev\pos\y}
          *button\state = 1
          If *button\obj\flags &#TUIF_TOGGLE
            *button\state = 1-*button\obj\value
          Else
            *button\state = 1 ; pressed
          End If
        Else
          If *button\obj\flags &#TUIF_TOGGLE
            *button\state = *button\obj\value
          Else
            *button\state = 0 ; pressed
          End If
        End If
        If oldstate><*button\state
          ntui_Refresh{*button,Null}
        End If
        done=True
      End If

    Case #TUIEV_TICK
      If *button\tickDelay>0
        If *button\tickCount>*button\tickDelay
          If *button\obj\flags&#TUIF_ACTIVE
            !tuiHandleNotify{done,*button,onRepeat,*ev}
          End If
        Else
          *button\tickCount+1
        End If
        ; not set to done, so others may use the tick as well...
      End If

    Case #TUIEV_KEYDOWN
      ntui_GetEventAttr{*ev,#TUIEVA_VANILLAKEY,&vkey.l}
      Select vkey
        Case 13 ; return
          ntui_SetFocus{*button}
          *button\obj\flags | #TUIF_ACTIVE
          *button\tickCount = 0
          If *button\obj\flags &#TUIF_TOGGLE
            *button\state = 1-*button\obj\value
          Else
            *button\state = 1 ; pressed
          End If
          !tuiHandleNotify{done,*button,onTouch,*ev}
          ntui_Refresh{*button,Null}
          done=True

      End Select

    Case #TUIEV_KEYUP
      If *button\obj\flags&#TUIF_ACTIVE
        ntui_GetEventAttr{*ev,#TUIEVA_VANILLAKEY,&vkey.l}
        Select vkey
          Case 13
            If *button\obj\flags &#TUIF_TOGGLE
              If *button\subClassID=#TUIBUTTON_RADIO
                *button\obj\value = 1
              Else
                *button\obj\value = 1-*button\obj\value
              End If
              *button\state = *button\obj\value
              _ntui_PropagateBind{*button,#TUIEV_BIND_VALUE,*button\obj\value,Null}
            Else
              *button\state = 0 ; pressed
            End If
            *button\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
            !tuiHandleNotify{done,*button,onClick,*ev}
            If done=False
              !tuiHandleNotify{done,*button,onRelease,*ev}
            End If
            ntui_Refresh{*button,Null}
            done=True

        End Select
      End If

    Default
      Function Return False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_DispatchButtonEvent,{Null,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeButton {*button.tuiButton}                             /
;/                                                                             /
;/ Description:                                                                /
;/  Case #TUIBUTTON_TOOL                                                       /
;/    *button\obj\minsize\x = iwidth                                        /
;/    *button\obj\minsize\y = iheight                                       /
;/ * free everything special that we allocated for the button */               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *button.tuiButton    : ???                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitButton:
Statement _ntui_DeinitButton{*button.tuiButton}
  !_ASSERT{*button}
  !_ASSERT{*button\obj\classID=#TUICLASS_BUTTON}

  If *button\tbi  Then ntui_FreeTBImage{*button\tbi}   : *button\tbi  = Null
  If *button\tbi2 Then ntui_FreeTBImage{*button\tbi2}  : *button\tbi2 = Null

  !tuiFreeNotifyHandler{*button\onClick}
  !tuiFreeNotifyHandler{*button\onTouch}
  !tuiFreeNotifyHandler{*button\onRelease}
  !tuiFreeNotifyHandler{*button\onRepeat}
  !tuiFreeNotifyHandler{*button\onDismiss}

End Statement
!_MakeGlobalFuncPointer{_ntui_DeinitButton,{Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetButtonMinSize {*button.tuiButton,*rp.RastP:: /
;/ ort}                                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * calculate the minimum size for the button */                              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *button.tuiButton    : ???                                             /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_CalculateButtonMinSize:
Statement _ntui_CalculateButtonMinSize{*button.tuiButton,*rp.RastPort}
  !_ASSERT{*button}
  !_ASSERT{*button\obj\classID=#TUICLASS_BUTTON}

  *engine.tuiEngine = *button\obj\engine : If *engine=Null OR *rp=Null Then Statement Return

  If *button\tbi
    iwidth.l  = ntui_GetTBImageWidth {*button\tbi}
    iheight.l = ntui_GetTBImageHeight{*button\tbi}
  End If

  If *button\funcID=#TUIFUNC_SPIN
    iwidth.l  = ntui_GetTBImageWidth {*button\tbi} + ntui_GetTBImageWidth {*button\tbi2}
    iheight.l = ntui_GetTBImageHeight{*button\tbi} + ntui_GetTBImageHeight {*button\tbi2}
    If iwidth <*engine\defSize[#TUISIZE_BUTTON] Then iwidth  = *engine\defSize[#TUISIZE_BUTTON]
    If iheight<*engine\defSize[#TUISIZE_BUTTON] Then iheight = *engine\defSize[#TUISIZE_BUTTON]
    If iwidth<iheight Then iwidth=iheight : Else iheight=iwidth
  End If

  *button\obj\minsize\x  = !tuiBorderWidth{*button\obj\padding}
  *button\obj\minsize\y  = !tuiBorderHeight{*button\obj\padding}

  If *button\obj\string;><Null AND *button\subClassID><#TUIBUTTON_FUNCTION
    DEFTYPE.tuiRect tx
    _ntui_GetTextRect{*engine,*button\obj\string,tx,*button\obj\flags,*rp}
    *button\obj\minsize\x + !tuiRectWidth{tx}
    *button\obj\minsize\y + !tuiRectHeight{tx}
  End If

  If *button\tbi
    If (*button\obj\flags&(#TUIF_BOTTOM|#TUIF_TOP))
      *button\obj\minsize\y + iheight
      iwidth  + !tuiBorderWidth{*button\obj\padding}
      If iwidth>*button\obj\minsize\x Then *button\obj\minsize\x = iwidth
    Else
      *button\obj\minsize\x + iwidth
      If *button\obj\string Then *button\obj\minsize\x + *button\obj\padding\right
      iheight + !tuiBorderHeight{*button\obj\padding}
      If iheight>*button\obj\minsize\y Then *button\obj\minsize\y = iheight
    End If
  End If

  _ntui_GetBorderSize{*engine,*button\obj\borderType,*button\obj\flags,*button\obj\border}

  *button\obj\minsize\x + !tuiBorderWidth {*button\obj\border}
  *button\obj\minsize\y + !tuiBorderHeight{*button\obj\border}

End Statement
!_MakeGlobalFuncPointer{_ntui_CalculateButtonMinSize,{Null,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_Button {label.s,image.s,@notify.l,@help.s,@flags.l:: /
;/ ,@userID.l}                                                                 /
;/                                                                             /
;/ Description:                                                                /
;/    iy2.l = y1+*button\tbi\height-1                                       /
;/    If *button\obj\string Then iy2+ *engine\defPad\y                   /
;/ * create function for tui button */                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - label.s    : ???                                                           /
;/ - image.s    : ???                                                          /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_Button:
Function.tuiButton ntui_Button{*tagList.TagItem}

  flags.l = #TUIF_CENTER|#TUIF_MIDDLE|#TUIF_FIXHEIGHT|#TUIF_WANTMOVER|#TUIF_WANTTAB
  *button.tuiButton = (.tuiButton)_ntui_CreateObject{#TUICLASS_BUTTON,SizeOf.tuiButton,flags}
  If *button

    *button\subClassID           = #TUIBUTTON_NORMAL
    *button\obj\borderType       = #TUIBORDER_BUTTON
    *button\obj\bgTuiPen         = #TUIPEN_HALFSHINE
    *button\state                = 0
    *button\tbi                  = Null
    *button\tbi2                 = Null
    *button\imageWidth           = #TUISIZE_BUTTON
    *button\imageHeight          = #TUISIZE_BUTTON
    *button\image2Width          = #TUISIZE_BUTTON
    *button\image2Height         = #TUISIZE_BUTTON
    *button\tickDelay            = -1
    *button\tickCount            = 0
    *button\funcID               = #TUIFUNC_NONE

    *button\obj\Draw             = *_ntui_DrawButton
    *button\obj\Layout           = Null ;*_ntui_LayoutButton
    *button\obj\DispatchEvent    = *_ntui_DispatchButtonEvent
    *button\obj\CalculateMinSize = *_ntui_CalculateButtonMinSize
    *button\obj\Deinit           = *_ntui_DeinitButton
    *button\obj\SetAttr          = *_ntui_SetButtonAttr
    *button\obj\GetAttr          = *_ntui_GetButtonAttr

    !tuiInitNotifyHandler{*button\onClick}
    !tuiInitNotifyHandler{*button\onTouch}
    !tuiInitNotifyHandler{*button\onRelease}
    !tuiInitNotifyHandler{*button\onRepeat}
    !tuiInitNotifyHandler{*button\onDismiss}

    If *tagList Then ntui_SetAttrs{*button,*tagList}

  End If

  Function Return *button

End Function
!_MakeGlobalFuncPointer{ntui_Button,{Null}}


Function.tuiButton ntuib_Button{label.s,image.s,@onClick.s,@help.s,@flags.l,@nameID.s}

  DEFTYPE.tagL10 tagList : n.l = 0
  If label   Then tagList\tag[n]\ti_Tag = #TUIBA_LABEL  ,&label   : n=n+1
  If help    Then tagList\tag[n]\ti_Tag = #TUIA_HELP    ,&help    : n=n+1
  If nameID  Then tagList\tag[n]\ti_Tag = #TUIA_ID      ,&nameID  : n=n+1
  If onClick Then tagList\tag[n]\ti_Tag = #TUIBA_ONCLICK,&onClick : n=n+1
  If image   Then tagList\tag[n]\ti_Tag = #TUIBA_IMAGE  ,&image   : n=n+1
  If flags><#TUI_NOFLAGS Then tagList\tag[n]\ti_Tag = #TUIA_SETFLAGS,flags : n=n+1
  tagList\tag[n]\ti_Tag = #TAG_DONE,0

  *button.tuiButton = ntui_Button{tagList}

  Function Return *button

End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_CheckBox {checked.l,@notify.l,@help.s,@flags.l,@u:: /
;/ serID.l}                                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * create function for tui button */                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - checked.l    : ???                                                        /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_CheckBox:
Function.tuiButton ntui_CheckBox{*tagList.TagItem}

  DEFTYPE.tagL10 ltagList : n.l = 0 : img1.s = "CHECKMARK":img2.s = "UNCHECKMARK"
  ltagList\tag[n]\ti_Tag = #TUIBA_SUBCLASSID , #TUIBUTTON_CHECKBOX           : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIA_SETFLAGS    , #TUIF_TOGGLE|#TUIF_FIXSIZE    : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_IMAGE      , &img1                         : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_IMAGE2     , &img2                         : n=n+1
  ltagList\tag[n]\ti_Tag = #TAG_DONE,0

  *button.tuiButton = ntui_Button{ltagList}
  If *button
    If *tagList Then ntui_SetAttrs{*button,*tagList}
  End If

  Function Return *button

End Function
!_MakeGlobalFuncPointer{ntui_CheckBox,{Null}}


Function.tuiButton ntuib_CheckBox{checked.l,@onClick.s,@help.s,@flags.l,@nameID.s}

  DEFTYPE.tagL10 ltagList : n.l = 0
  If help    Then ltagList\tag[n]\ti_Tag = #TUIA_HELP    ,&help    : n=n+1
  If nameID  Then ltagList\tag[n]\ti_Tag = #TUIA_ID      ,&nameID  : n=n+1
  If onClick Then ltagList\tag[n]\ti_Tag = #TUIBA_ONCLICK,&onClick : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_CHECKED ,checked   : n=n+1
  If flags><#TUI_NOFLAGS Then ltagList\tag[n]\ti_Tag = #TUIA_SETFLAGS,flags : n=n+1
  ltagList\tag[n]\ti_Tag = #TAG_DONE,0

  *button.tuiButton = ntui_CheckBox{ltagList}

  Function Return *button

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_FunctionButton {funcID.l,@notify.l,@help.s,@flags:: /
;/ .l,@userID.l}                                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * create function for tui button */                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - funcID.l    : ???                                                         /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_FunctionButton:
Function.tuiButton ntui_FunctionButton{*tagList.TagItem}

  DEFTYPE.tagL10 ltagList : n.l = 0
  ltagList\tag[n]\ti_Tag = #TUIBA_SUBCLASSID , #TUIBUTTON_NORMAL             : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIA_SETFLAGS    , #TUIF_FIXSIZE                 : n=n+1
  ltagList\tag[n]\ti_Tag = #TAG_DONE,0

  *button.tuiButton = ntui_Button{ltagList}
  If *button
    If *tagList Then ntui_SetAttrs{*button,*tagList}
  End If

  Function Return *button

End Function
!_MakeGlobalFuncPointer{ntui_FunctionButton,{Null}}


Function.tuiButton ntuib_FunctionButton{funcID.l,@help.s,@flags.l,@nameID.s}

  DEFTYPE.tagL10 tagList : n.l = 0
  tagList\tag[n]\ti_Tag = #TUIBA_FUNCTION    ,funcID : n=n+1
  If help    Then tagList\tag[n]\ti_Tag = #TUIA_HELP    ,&help    : n=n+1
  If nameID  Then tagList\tag[n]\ti_Tag = #TUIA_ID      ,&nameID  : n=n+1
  If flags><#TUI_NOFLAGS Then tagList\tag[n]\ti_Tag = #TUIA_SETFLAGS,flags : n=n+1
  tagList\tag[n]\ti_Tag = #TAG_DONE,0

  *button.tuiButton = ntui_FunctionButton{tagList}

  Function Return *button

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_ImageButton {label.s,image.s,@notify.l,@help.s,@fl:: /
;/ ags.l,@userID.l}                                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * create an image tui button */                                             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - label.s    : ???                                                           /
;/ - image.s    : ???                                                          /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_ImageButton:
Function.tuiButton ntui_ImageButton{*tagList.TagItem}

  DEFTYPE.tagL10 ltagList : n.l = 0
  ltagList\tag[n]\ti_Tag = #TUIBA_SUBCLASSID , #TUIBUTTON_IMAGE              : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIA_SETFLAGS    , #TUIF_FIXSIZE|#TUIF_BOTTOM    : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_IMAGESIZE  , #TUISIZE_NATIVE               : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_IMAGE2SIZE , #TUISIZE_NATIVE               : n=n+1
  ltagList\tag[n]\ti_Tag = #TAG_DONE,0

  *button.tuiButton = ntui_Button{ltagList}
  If *button
    If *tagList Then ntui_SetAttrs{*button,*tagList}
  End If

  Function Return *button

End Function
!_MakeGlobalFuncPointer{ntui_ImageButton,{Null}}



Function.tuiButton ntuib_ImageButton{label.s,image.s,@onClick.s,@help.s,@flags.l,@nameID.s}

  DEFTYPE.tagL10 ltagList : n.l = 0
  If help    Then ltagList\tag[n]\ti_Tag = #TUIA_HELP    ,&help    : n=n+1
  If nameID  Then ltagList\tag[n]\ti_Tag = #TUIA_ID      ,&nameID  : n=n+1
  If onClick Then ltagList\tag[n]\ti_Tag = #TUIBA_ONCLICK,&onClick : n=n+1
  If image   Then ltagList\tag[n]\ti_Tag = #TUIBA_IMAGE  ,&image   : n=n+1
  If label   Then ltagList\tag[n]\ti_Tag = #TUIBA_LABEL  ,&label   : n=n+1
  If flags><#TUI_NOFLAGS Then ltagList\tag[n]\ti_Tag = #TUIA_SETFLAGS,flags : n=n+1
  ltagList\tag[n]\ti_Tag = #TAG_DONE,0

  *button.tuiButton = ntui_ImageButton{ltagList}

  Function Return *button

End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_ToolButton {label.s,image.s,@notify.l,@help.s,@fla:: /
;/ gs.l,@userID.l}                                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * create an image tui button */                                             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - label.s    : ???                                                           /
;/ - image.s    : ???                                                          /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_ToolButton:
Function.tuiButton ntui_ToolButton{*tagList.TagItem}

  DEFTYPE.tagL10 ltagList : n.l = 0
  ltagList\tag[n]\ti_Tag = #TUIA_PADDING     , 0                             : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIA_MARGIN      , 0                             : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIA_BORDERTYPE  , #TUIBORDER_TOOL               : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_SUBCLASSID , #TUIBUTTON_TOOL               : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIA_BGPEN       , #TUIPEN_TRANSPARENT           : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIA_SETFLAGS    , #TUIF_FIXSIZE|#TUIF_BOTTOM    : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_IMAGESIZE  , #TUISIZE_NATIVE               : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_IMAGE2SIZE , #TUISIZE_NATIVE               : n=n+1
  ltagList\tag[n]\ti_Tag = #TAG_DONE,0

  *button.tuiButton = ntui_Button{ltagList}
  If *button
    If *tagList Then ntui_SetAttrs{*button,*tagList}
  End If

  Function Return *button

End Function
!_MakeGlobalFuncPointer{ntui_ToolButton,{Null}}


Function.tuiButton ntuib_ToolButton{label.s,image.s,@tuiSize.l,@onClick.s,@help.s,@flags.l,@nameID.s}

  DEFTYPE.tagL10 ltagList : n.l = 0
  If help       Then ltagList\tag[n]\ti_Tag = #TUIA_HELP       ,&help    : n=n+1
  If nameID     Then ltagList\tag[n]\ti_Tag = #TUIA_ID         ,&nameID  : n=n+1
  If onClick    Then ltagList\tag[n]\ti_Tag = #TUIBA_ONCLICK   ,&onClick : n=n+1
  If tuiSize>=0 Then ltagList\tag[n]\ti_Tag = #TUIBA_IMAGESIZE ,tuiSize  : n=n+1
  If image      Then ltagList\tag[n]\ti_Tag = #TUIBA_IMAGE     ,&image   : n=n+1
  If label      Then ltagList\tag[n]\ti_Tag = #TUIBA_LABEL     ,&label   : n=n+1
  If flags><#TUI_NOFLAGS Then ltagList\tag[n]\ti_Tag = #TUIA_SETFLAGS,flags : n=n+1
  ltagList\tag[n]\ti_Tag = #TAG_DONE,0

  *button.tuiButton = ntui_ToolButton{ltagList}

  Function Return *button

End Function


ntui_RadioButton:
Function.tuiButton ntui_RadioButton{*tagList.TagItem}

  DEFTYPE.tagL10 ltagList : n.l = 0 : img1.s = "RADIOON" : img2.s = "RADIOOFF"
  ltagList\tag[n]\ti_Tag = #TUIA_BORDERTYPE  , #TUIBORDER_NONE               : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_SUBCLASSID , #TUIBUTTON_RADIO              : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIA_BGPEN       , #TUIPEN_TRANSPARENT           : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIA_SETFLAGS    , #TUIF_FIXSIZE|#TUIF_TOGGLE|#TUIF_LEFT    : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_IMAGESIZE  , #TUISIZE_INLINE               : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_IMAGE2SIZE , #TUISIZE_INLINE               : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_IMAGE      , &img1                         : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_IMAGE2     , &img2                         : n=n+1
  ltagList\tag[n]\ti_Tag = #TAG_DONE,0

  *button.tuiButton = ntui_Button{ltagList}
  If *button
    If *tagList Then ntui_SetAttrs{*button,*tagList}
  End If

  Function Return *button

End Function
!_MakeGlobalFuncPointer{ntui_RadioButton,{Null}}


Function.tuiButton ntuib_RadioButton{label.s,checked.l,@onClick.s,@help.s,@flags.l,@nameID.s}

  DEFTYPE.tagL10 ltagList : n.l = 0
  ltagList\tag[n]\ti_Tag = #TUIBA_CHECKED      ,checked         : n=n+1
  If help       Then ltagList\tag[n]\ti_Tag = #TUIA_HELP       ,&help    : n=n+1
  If nameID     Then ltagList\tag[n]\ti_Tag = #TUIA_ID         ,&nameID  : n=n+1
  If onClick    Then ltagList\tag[n]\ti_Tag = #TUIBA_ONCLICK   ,&onClick : n=n+1
  If label      Then ltagList\tag[n]\ti_Tag = #TUIBA_LABEL     ,&label   : n=n+1
  If flags><#TUI_NOFLAGS Then ltagList\tag[n]\ti_Tag = #TUIA_SETFLAGS,flags : n=n+1
  ltagList\tag[n]\ti_Tag = #TAG_DONE,0

  *button.tuiButton = ntui_RadioButton{ltagList}

  Function Return *button

End Function


ntui_CheckButton:
Function.tuiButton ntui_CheckButton{*tagList.TagItem}

  DEFTYPE.tagL10 ltagList : n.l = 0 : img1.s = "CHECKON" : img2.s = "CHECKOFF"
  ltagList\tag[n]\ti_Tag = #TUIA_BORDERTYPE  , #TUIBORDER_NONE               : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_SUBCLASSID , #TUIBUTTON_CHECKBOX           : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIA_BGPEN       , #TUIPEN_TRANSPARENT           : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIA_SETFLAGS    , #TUIF_FIXSIZE|#TUIF_TOGGLE|#TUIF_LEFT    : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_IMAGESIZE  , #TUISIZE_INLINE               : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_IMAGE2SIZE , #TUISIZE_INLINE               : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_IMAGE      , &img1                         : n=n+1
  ltagList\tag[n]\ti_Tag = #TUIBA_IMAGE2     , &img2                         : n=n+1
  ltagList\tag[n]\ti_Tag = #TAG_DONE,0

  *button.tuiButton = ntui_Button{ltagList}
  If *button
    If *tagList Then ntui_SetAttrs{*button,*tagList}
  End If

  Function Return *button

End Function
!_MakeGlobalFuncPointer{ntui_CheckButton,{Null}}


Function.tuiButton ntuib_CheckButton{label.s,checked.l,@onClick.s,@help.s,@flags.l,@nameID.s}

  DEFTYPE.tagL10 ltagList : n.l = 0
  ltagList\tag[n]\ti_Tag = #TUIBA_CHECKED      ,checked         : n=n+1
  If help       Then ltagList\tag[n]\ti_Tag = #TUIA_HELP       ,&help    : n=n+1
  If nameID     Then ltagList\tag[n]\ti_Tag = #TUIA_ID         ,&nameID  : n=n+1
  If onClick    Then ltagList\tag[n]\ti_Tag = #TUIBA_ONCLICK   ,&onClick : n=n+1
  If label      Then ltagList\tag[n]\ti_Tag = #TUIBA_LABEL     ,&label   : n=n+1
  If flags><#TUI_NOFLAGS Then ltagList\tag[n]\ti_Tag = #TUIA_SETFLAGS,flags : n=n+1
  ltagList\tag[n]\ti_Tag = #TAG_DONE,0

  *button.tuiButton = ntui_CheckButton{ltagList}

  Function Return *button

End Function


Statement ntui_InitButtonClass{}

  classID.l = ntui_RegisterClass{"button",(.tuiFunc)*ntui_Button,Null}
  ntui_RegisterAttr{classID,"text"      ,#TUIBA_LABEL     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"label"     ,#TUIBA_LABEL     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"image"     ,#TUIBA_IMAGE     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"image2"    ,#TUIBA_IMAGE2    ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"tickdelay" ,#TUIBA_TICKDELAY ,#TUIAT_INT   , 0,0 }
  ntui_RegisterAttr{classID,"checked"   ,#TUIBA_CHECKED   ,#TUIAT_BOOL  , 0,0 }
  ntui_RegisterAttr{classID,"onclick"   ,#TUIBA_ONCLICK   ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"ontouch"   ,#TUIBA_ONTOUCH   ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"onrelease" ,#TUIBA_ONRELEASE ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"onrepeat"  ,#TUIBA_ONREPEAT  ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"ondismiss" ,#TUIBA_ONDISMISS ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"subclassid",#TUIBA_SUBCLASSID,#TUIAT_INT   , #TUIBUTTON_NORMAL,#TUIMAX_BUTTON-1}
  ntui_RegisterAttr{classID,"function"  ,#TUIBA_FUNCTION  ,#TUIAT_INT   , #TUIFUNC_NONE,#TUIMAX_FUNC-1}

  classID.l = ntui_RegisterClass{"checkbox",(.tuiFunc)*ntui_CheckBox,Null}
  ntui_RegisterAttr{classID,"image"     ,#TUIBA_IMAGE     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"image2"    ,#TUIBA_IMAGE2    ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"checked"   ,#TUIBA_CHECKED   ,#TUIAT_BOOL  , 0,0 }
  ntui_RegisterAttr{classID,"onclick"   ,#TUIBA_ONCLICK   ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"ontouch"   ,#TUIBA_ONTOUCH   ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"onrelease" ,#TUIBA_ONRELEASE ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"onrepeat"  ,#TUIBA_ONREPEAT  ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"ondismiss" ,#TUIBA_ONDISMISS ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"function"  ,#TUIBA_FUNCTION  ,#TUIAT_INT   , #TUIFUNC_NONE,#TUIMAX_FUNC-1}

  classID.l = ntui_RegisterClass{"radiobutton",(.tuiFunc)*ntui_RadioButton,Null}
  ntui_RegisterAttr{classID,"text"      ,#TUIBA_LABEL     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"label"     ,#TUIBA_LABEL     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"image"     ,#TUIBA_IMAGE     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"image2"    ,#TUIBA_IMAGE2    ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"checked"   ,#TUIBA_CHECKED   ,#TUIAT_BOOL  , 0,0 }
  ntui_RegisterAttr{classID,"onclick"   ,#TUIBA_ONCLICK   ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"ontouch"   ,#TUIBA_ONTOUCH   ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"onrelease" ,#TUIBA_ONRELEASE ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"onrepeat"  ,#TUIBA_ONREPEAT  ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"ondismiss" ,#TUIBA_ONDISMISS ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"function"  ,#TUIBA_FUNCTION  ,#TUIAT_INT   , #TUIFUNC_NONE,#TUIMAX_FUNC-1}

  classID.l = ntui_RegisterClass{"checkbutton",(.tuiFunc)*ntui_CheckButton,Null}
  ntui_RegisterAttr{classID,"text"      ,#TUIBA_LABEL     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"label"     ,#TUIBA_LABEL     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"image"     ,#TUIBA_IMAGE     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"image2"    ,#TUIBA_IMAGE2    ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"checked"   ,#TUIBA_CHECKED   ,#TUIAT_BOOL  , 0,0 }
  ntui_RegisterAttr{classID,"onclick"   ,#TUIBA_ONCLICK   ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"ontouch"   ,#TUIBA_ONTOUCH   ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"onrelease" ,#TUIBA_ONRELEASE ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"onrepeat"  ,#TUIBA_ONREPEAT  ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"ondismiss" ,#TUIBA_ONDISMISS ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"function"  ,#TUIBA_FUNCTION  ,#TUIAT_INT   , #TUIFUNC_NONE,#TUIMAX_FUNC-1}

  classID.l = ntui_RegisterClass{"imagebutton",(.tuiFunc)*ntui_ImageButton,Null}
  ntui_RegisterAttr{classID,"text"      ,#TUIBA_LABEL     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"label"     ,#TUIBA_LABEL     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"image"     ,#TUIBA_IMAGE     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"checked"   ,#TUIBA_CHECKED   ,#TUIAT_BOOL  , 0,0 }
  ntui_RegisterAttr{classID,"onclick"   ,#TUIBA_ONCLICK   ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"ontouch"   ,#TUIBA_ONTOUCH   ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"onrelease" ,#TUIBA_ONRELEASE ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"onrepeat"  ,#TUIBA_ONREPEAT  ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"ondismiss" ,#TUIBA_ONDISMISS ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"function"  ,#TUIBA_FUNCTION  ,#TUIAT_INT   , #TUIFUNC_NONE,#TUIMAX_FUNC-1}

  classID.l = ntui_RegisterClass{"toolbutton",(.tuiFunc)*ntui_ToolButton,Null}
  ntui_RegisterAttr{classID,"text"      ,#TUIBA_LABEL     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"label"     ,#TUIBA_LABEL     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"image"     ,#TUIBA_IMAGE     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"checked"   ,#TUIBA_CHECKED   ,#TUIAT_BOOL  , 0,0 }
  ntui_RegisterAttr{classID,"onclick"   ,#TUIBA_ONCLICK   ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"ontouch"   ,#TUIBA_ONTOUCH   ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"onrelease" ,#TUIBA_ONRELEASE ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"onrepeat"  ,#TUIBA_ONREPEAT  ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"ondismiss" ,#TUIBA_ONDISMISS ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"function"  ,#TUIBA_FUNCTION  ,#TUIAT_INT   , #TUIFUNC_NONE,#TUIMAX_FUNC-1}

  classID.l = ntui_RegisterClass{"functionbutton",(.tuiFunc)*ntui_FunctionButton,Null}
  ntui_RegisterAttr{classID,"text"      ,#TUIBA_LABEL     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"label"     ,#TUIBA_LABEL     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"image"     ,#TUIBA_IMAGE     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"image2"    ,#TUIBA_IMAGE2    ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"checked"   ,#TUIBA_CHECKED   ,#TUIAT_BOOL  , 0,0 }
  ntui_RegisterAttr{classID,"onclick"   ,#TUIBA_ONCLICK   ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"ontouch"   ,#TUIBA_ONTOUCH   ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"onrelease" ,#TUIBA_ONRELEASE ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"onrepeat"  ,#TUIBA_ONREPEAT  ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"ondismiss" ,#TUIBA_ONDISMISS ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"function"  ,#TUIBA_FUNCTION  ,#TUIAT_INT   , #TUIFUNC_NONE,#TUIMAX_FUNC-1}

End Statement

ntui_InitButtonClass{}

