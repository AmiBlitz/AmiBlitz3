; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res,SDSTCP2.res,xpk.res,ttengine.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 6
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 40
; CursorColumn    = 33
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_button.include                                                   /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#TUI_HAS_BUTTON = 1
CNIF #__include=0
optimize 7
Syntax 2
CEND

#TUIBA_BASE      = #TUIA_USER
#TUIBA_CHECKED   = #TUIBA_BASE | 0
#TUIBA_TEXT      = #TUIBA_BASE | 1
#TUIBA_IMAGE     = #TUIBA_BASE | 2
#TUIBA_IMAGE2    = #TUIBA_BASE | 3
#TUIBA_TICKDELAY = #TUIBA_BASE | 4
#TUIBA_ONCLICK   = #TUIBA_BASE | 5
#TUIBA_ONTOUCH   = #TUIBA_BASE | 6
#TUIBA_ONRELEASE = #TUIBA_BASE | 7
#TUIBA_ONREPEAT  = #TUIBA_BASE | 8

;/* tuiButton subtypes */
#TUIBUTTON_NORMAL       = 0
#TUIBUTTON_CHECKBOX     = 1
#TUIBUTTON_ARROWUP      = 2
#TUIBUTTON_ARROWDOWN    = 3
#TUIBUTTON_ARROWLEFT    = 4
#TUIBUTTON_ARROWRIGHT   = 5
#TUIBUTTON_PLUSMINUS    = 6
#TUIBUTTON_PATH         = 7
#TUIBUTTON_FILE         = 8
#TUIBUTTON_SAVE         = 9
#TUIBUTTON_SCREEN       = 10
#TUIBUTTON_FONT         = 11
#TUIBUTTON_INC          = 12
#TUIBUTTON_DEC          = 13
#TUIBUTTON_TOOL         = 14
#TUIBUTTON_IMAGE        = 15
#TUIBUTTON_OLARROWUP    = 16
#TUIBUTTON_OLARROWDOWN  = 17
#TUIBUTTON_OLARROWLEFT  = 18
#TUIBUTTON_OLARROWRIGHT = 19
#TUIBUTTON_POPUP        = 20
#TUIBUTTON_DROPDOWN     = 21
#TUIBUTTON_LEFT         = 22
#TUIBUTTON_RIGHT        = 23
#TUIBUTTON_RADIO        = 24
#TUIBUTTON_SPINNER      = 25

NEWTYPE.tuiButton
obj.tuiObject            ; tui object header
state.l
*tbi.tuiTBImage
tickDelay.l
tickCount.l
subClassID.l
*tbi2.tuiTBImage
onClick.tuiEventHandler
onTouch.tuiEventHandler
onRelease.tuiEventHandler
onRepeat.tuiEventHandler
End NEWTYPE

_ntui_SetButtonAttr:
Function.w _ntui_SetButtonAttr{*button.tuiButton,ti_Tag.l,ti_Data.l}
  !_ASSERT{*button}
  !_ASSERT{*button\obj\classID=#TUICLASS_BUTTON}

  done.w = True
  Select ti_Tag
    Case #TUIBA_IMAGE
      If *button\tbi Then ntui_FreeTBImage{*button\tbi}
      imgsize.l = #TUISIZE_BUTTON
      Select *button\subClassID
        Case #TUIBUTTON_TOOL  : imgsize = #TUISIZE_NATIVE
        Case #TUIBUTTON_IMAGE : imgsize = #TUISIZE_NATIVE
        Default : imgsize = #TUISIZE_BUTTON
      End Select
      *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,Peek.s(ti_Data),imgsize,imgsize}

    Case #TUIBA_IMAGE2
      If *button\tbi2 Then ntui_FreeTBImage{*button\tbi2}
      imgsize.l = #TUISIZE_BUTTON
      Select *button\subClassID
        Case #TUIBUTTON_TOOL  : imgsize = #TUISIZE_NATIVE
        Case #TUIBUTTON_IMAGE : imgsize = #TUISIZE_NATIVE
        Default : imgsize = #TUISIZE_BUTTON
      End Select

      *button\tbi2 = ntui_CreateTBImage{*button\obj\tuiEngine,Peek.s(ti_Data),imgsize,imgsize}
    Case #TUIBA_TICKDELAY  : *button\tickDelay = ti_Data

    Case #TUIBA_ONCLICK   : str_WritePtr{&*button\onClick\notifyID  ,ti_Data}
    Case #TUIBA_ONRELEASE : str_WritePtr{&*button\onRelease\notifyID,ti_Data}
    Case #TUIBA_ONTOUCH   : str_WritePtr{&*button\onTouch\notifyID  ,ti_Data}
    Case #TUIBA_ONREPEAT  : str_WritePtr{&*button\onRepeat\notifyID ,ti_Data}

    Case #TUIBA_TEXT      : done=ntui_SetAttr{*button,#TUIA_STRING   ,ti_Data}
    Case #TUIBA_CHECKED   : done=ntui_SetAttr{*button,#TUIA_VALUE    ,ti_Data}

    Case #TUIA_XMLATTR
      *xmlA.tuiXmlAttr = ti_Data
      Select Peek.s(*xmlA\nameP)
        Case "checked"           : done=_ntui_SetButtonAttr{*button,#TUIBA_CHECKED       ,*xmlA\value}
        Case "image"             : done=_ntui_SetButtonAttr{*button,#TUIBA_IMAGE         ,*xmlA\stringP}
        Case "image2"            : done=_ntui_SetButtonAttr{*button,#TUIBA_IMAGE2        ,*xmlA\stringP}
        Case "text"              : done=_ntui_SetButtonAttr{*button,#TUIBA_TEXT          ,*xmlA\stringP}
        Case "tickdelay"         : done=_ntui_SetButtonAttr{*button,#TUIBA_TICKDELAY     ,*xmlA\value}
        Case "ontouch"           : done=_ntui_SetButtonAttr{*button,#TUIBA_ONTOUCH       ,*xmlA\stringP}
        Case "onrelease"         : done=_ntui_SetButtonAttr{*button,#TUIBA_ONRELEASE     ,*xmlA\stringP}
        Case "onclick"           : done=_ntui_SetButtonAttr{*button,#TUIBA_ONCLICK       ,*xmlA\stringP}
        Case "onrepeat"          : done=_ntui_SetButtonAttr{*button,#TUIBA_ONREPEAT      ,*xmlA\stringP}
        Default
          done = False
       End Select
    Default
      done = False

  End Select
  Function Return done
End Function


_ntui_GetButtonAttr:
Function.w _ntui_GetButtonAttr{*button.tuiButton,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*button}
  !_ASSERT{*button\obj\classID=#TUICLASS_BUTTON}

  done.w = True
  Select ti_Tag
    Case #TUIBA_IMAGE      : *ti_Data\l = *button\tbi
    Case #TUIBA_IMAGE2     : *ti_Data\l = *button\tbi2
    Case #TUIBA_TICKDELAY  : *ti_Data\l = *button\tickDelay
    Case #TUIBA_ONCLICK    : *ti_Data\l = str_GetPtr{*button\onClick\notifyID}
    Default
      done = False

  End Select
  Function Return done
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawButton {*button.tuiButton,*rp.RastPort}                 /
;/                                                                             /
;/ Description:                                                                /
;/         ;Case *button\hotkey                                             /
;/ * draw the button in all its beauty */                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *button.tuiButton    : ???                                             /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawButton:
Statement _ntui_DrawButton{*button.tuiButton,*rp.RastPort,*rpclip.tuiRect}
!_ASSERT{*button}
!_ASSERT{*button\obj\classID=#TUICLASS_BUTTON}

*tuiEngine.tuiEngine = *button\obj\tuiEngine
!_ASSERT{*tuiEngine}
!_ASSERT{*rp}

bgDone.l   = False
bgTuiPen.l = *button\obj\bgTuiPen ; #TUIPEN_HALFSHINE
fgTuiPen.l = *button\obj\fgTuiPen ; #TUIPEN_ACTIVETEXT

Select *button\subClassID
  Case #TUIBUTTON_CHECKBOX
    If bgTuiPen><#TUIPEN_TRANSPARENT
      If *button\obj\flags&#TUIF_ACTIVE
        bgTuiPen.l = #TUIPEN_HALFSHINE
        fgTuiPen.l = #TUIPEN_ACTIVETEXT
      Else
      ;  bgTuiPen = #TUIPEN_HALFSHINE
      ;  fgTuiPen = #TUIPEN_TEXT
      End If
    End If
  Case #TUIBUTTON_TOOL
    If *button\obj\flags&#TUIF_ACTIVE
      bgTuiPen = #TUIPEN_HALFSHINE
      fgTuiPen = #TUIPEN_TEXT
    Else
    ;  bgTuiPen = #TUIPEN_TRANSPARENT;BACKGROUND ; ntui_GetBGTuiPen{*button\obj\parent}
    ;  fgTuiPen = #TUIPEN_TEXT
    End If
  Case #TUIBUTTON_RADIO

  Default
    If bgTuiPen><#TUIPEN_TRANSPARENT
    If *button\state
      bgTuiPen = #TUIPEN_MARKER
      fgTuiPen = #TUIPEN_ACTIVETEXT
    Else
    ;  bgTuiPen = #TUIPEN_HALFSHINE
    ;  fgTuiPen = #TUIPEN_TEXT
    End If
    End If
End Select


If (*button\obj\bgImage)
  ntui_DrawTBImage{*button\obj\bgImage,*rp,&*button\obj\ibox,&*button\obj\ibox,*button\obj\flags,*button\obj\bgTuiPen}
  bgDone = True
End If


If (*button\obj\borderType><#TUIBORDER_NONE)
  bgDone.l = ntui_DrawBorder{*tuiEngine,*rp,*button\obj\bbox,*button\obj\borderType,*button\obj\flags}
End If

If bgDone Then bgTuiPen = #TUIPEN_TRANSPARENT
If bgTuiPen><#TUIPEN_TRANSPARENT

CNIF #TUI_DEBUG
SetAPen_ *rp,*tuiEngine\pen[bgTuiPen] + RRnd(1,20)
CELSE
SetAPen_ *rp,*tuiEngine\pen[bgTuiPen]
CEND
EndIf

!tuiCopyRect{txbox.tuiRect,*button\obj\cbox}
!tuiCopyRect{tobox.tuiRect,*button\obj\ibox}
txflags.l          = (*button\obj\flags|#TUIF_BOTTOM|#TUIF_TOP)-(#TUIF_BOTTOM|#TUIF_TOP)

Select *button\subClassID
Case #TUIBUTTON_SPINNER
  !tuiCopyRect{imbox.tuiRect,*button\obj\cbox}
  imbox\right  = (imbox\left + imbox\right)/2
  imbox\bottom = (imbox\top + imbox\bottom)/2
  ntui_DrawTBImage{*button\tbi,*rp,tobox,imbox,txflags,bgTuiPen}

  !tuiCopyRect{imbox.tuiRect,*button\obj\cbox}
  imbox\left  = (imbox\left + imbox\right)/2
  imbox\top = (imbox\top + imbox\bottom)/2
  ntui_DrawTBImage{*button\tbi2,*rp,tobox,imbox,txflags,#TUIPEN_TRANSPARENT}
  !tuiCopyRect{imbox.tuiRect,*button\obj\ibox}
  If ((*button\obj\flags&#TUIF_DISABLED)=0) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW] : Else SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
  Move_ *rp,imbox\left,imbox\bottom-1
  Draw_ *rp,imbox\right-1,imbox\top

  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
  Move_ *rp,imbox\left,imbox\bottom
  Draw_ *rp,imbox\right,imbox\top

  If ((*button\obj\flags&#TUIF_DISABLED)=0) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE] : Else SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
  Move_ *rp,imbox\left+1,imbox\bottom
  Draw_ *rp,imbox\right,imbox\top+1
Default
If (*button\tbi)
  !tuiCopyRect{imbox.tuiRect,*button\obj\cbox}
  !tuiCopyRect{iobox.tuiRect,*button\obj\ibox}
  imflags.l          = txflags

  If (*button\obj\flags&#TUIF_BOTTOM) ; text at bottom of button
    If *button\obj\string
      tuifont.l    = _ntui_SetFont{*tuiEngine,*button\obj\flags}
      imbox\bottom = txbox\bottom-*tuiEngine\font[tuifont]\tf_YSize
      txbox\top    = imbox\bottom+1
      iobox\bottom = imbox\bottom
      tobox\top    = txbox\top
      imflags | #TUIF_BOTTOM
      txflags | (#TUIF_TOP|#TUIF_LEFT|#TUIF_RIGHT) - (#TUIF_LEFT|#TUIF_RIGHT)
    End If
  Else                                   ; text left of button
    If *button\obj\string
      imbox\right = imbox\left+ntui_GetTBImageWidth{*button\tbi}-1
      iobox\right = imbox\right + *button\obj\padding\right
      txbox\left  = iobox\right+1
      tobox\left  = txbox\left
    End If
  End If
End If

If (*button\tbi)
  If *button\obj\value
    ntui_DrawTBImage{*button\tbi,*rp,iobox,imbox,imflags,bgTuiPen}
  Else
    If *button\tbi2
      ntui_DrawTBImage{*button\tbi2,*rp,iobox,imbox,imflags,bgTuiPen}
    Else
      ntui_DrawTBImage{*button\tbi,*rp,iobox,imbox,imflags,bgTuiPen}
    End If
  End If
End If
End Select

If *button\obj\string
  Select *button\subClassID
    Case #TUIBUTTON_NORMAL
      _ntui_Print{*tuiEngine,*button\obj\string,tobox,txbox,txflags,*rp,fgTuiPen,bgTuiPen}
    Case #TUIBUTTON_TOOL
      _ntui_Print{*tuiEngine,*button\obj\string,tobox,txbox,txflags,*rp,fgTuiPen,bgTuiPen}
    Case #TUIBUTTON_RADIO
      _ntui_Print{*tuiEngine,*button\obj\string,tobox,txbox,txflags,*rp,fgTuiPen,bgTuiPen}
    Case #TUIBUTTON_CHECKBOX
      _ntui_Print{*tuiEngine,*button\obj\string,tobox,txbox,txflags,*rp,fgTuiPen,bgTuiPen}
    Case #TUIBUTTON_IMAGE
      _ntui_Print{*tuiEngine,*button\obj\string,tobox,txbox,txflags,*rp,fgTuiPen,bgTuiPen}
  End Select
End If

If (*button\obj\flags&#TUIF_FOCUS)
  If ((*button\obj\flags&#TUIF_ACTIVE)=0)
;  If *button\subClassID><#TUIBUTTON_TOOL
    _ntui_DrawDottedBorder{*tuiEngine,*rp,*button\obj\cbox,*button\obj\flags}
;  End If
  End If
End If

End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = _ntui_DispatchButton {*button.tuiButton,*ev.tui:: /
;/ Event}                                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * tui button newtype */                                                     /
;/ obj.tuiObject            ; tui object header                                /
;/ * do what happens if the user operates the button */                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *button.tuiButton    : ???                                             /
;/ - *ev.tuiEvent    : ???                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DispatchButtonEvent:
Function.w _ntui_DispatchButtonEvent{*button.tuiButton,*ev.tuiEvent}
  !_ASSERT{*button}
  !_ASSERT{*button\obj\classID=#TUICLASS_BUTTON}

  done.w = False
  doFunc.w = False
  Select *ev\evID
    Case #TUIEV_BIND_VALUE
      If *button\subClassID=#TUIBUTTON_RADIO
        If *ev\value
          *button\obj\value = 0
        Else
          *button\obj\value = 1
        End If
      Else
        *button\obj\value = *ev\value
      End If
      ntui_Refresh{*button,Null}

    Case #TUIEV_MOUSEDOWN
      If *ev\value = 0 ; we want button 0
        If ntui_HitObject{*button,*ev\pos\x,*ev\pos\y}

          ;If done=False
            ntui_SetFocus{*button}
            done      = True
            *button\obj\flags | #TUIF_ACTIVE
            *button\tickCount = 0
            If *button\obj\flags &#TUIF_TOGGLE
              *button\state = 1-*button\obj\value
            Else
              *button\state = 1 ; pressed
            End If

            ntui_Refresh{*button,Null}
          ;End If

          If *button\onTouch\callback Then !_CallFuncPointer{*button\onTouch\callback,done,*button,*ev,*button\onTouch\notifyID}

        End If
      End If

    Case #TUIEV_MOUSEUP
      If *ev\value = 0 ; we want button 0
        If *button\obj\flags&#TUIF_ACTIVE
          If ntui_HitObject{*button,*ev\pos\x,*ev\pos\y}

            ;If done=False
              done    = True
              If *button\obj\flags &#TUIF_TOGGLE
                If *button\subClassID=#TUIBUTTON_RADIO
                  *button\obj\value = 1
                Else
                  *button\obj\value = 1-*button\obj\value
                End If
                *button\state = *button\obj\value
                _ntui_PropagateBind{*button,#TUIEV_BIND_VALUE,*button\obj\value,Null}
              Else
                *button\state = 0 ; pressed
              End If
              *button\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
              ntui_Refresh{*button,Null}
            ;End If
            If *button\onClick\callback Then !_CallFuncPointer{*button\onClick\callback,done,*button,*ev,*button\onClick\notifyID}

          Else
            ;If done=False
              done=True
              *button\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
              ntui_Refresh{*button,Null}
            ;End If
            If *button\onRelease\callback Then !_CallFuncPointer{*button\onRelease\callback,done,*button,*ev,*button\onRelease\notifyID}
          End If
        End If
      End If

    Case #TUIEV_MOUSEMOVE
      If *button\obj\flags&#TUIF_ACTIVE
        oldstate.l = *button\state
        If ntui_HitObject{*button,*ev\pos\x,*ev\pos\y}
          *button\state = 1
          If *button\obj\flags &#TUIF_TOGGLE
            *button\state = 1-*button\obj\value
          Else
            *button\state = 1 ; pressed
          End If
        Else
          If *button\obj\flags &#TUIF_TOGGLE
            *button\state = *button\obj\value
          Else
            *button\state = 0 ; pressed
          End If
        End If
        If oldstate><*button\state
          ntui_Refresh{*button,Null}
        End If
        done=True
      End If

;    Case #TUIEV_REFRESH
;      If *ev\tuiObject = *button
;        If *button\obj\flags&#TUIF_VISIBLE
;          If *button\obj\tuiWindow
;            If *button\obj\tuiWindow\win
;              _ntui_DrawButton{*button,*button\obj\tuiWindow\win\RPort}
;            End If
;          End If
;        End If
;        *button\obj\flags = (*button\obj\flags|#TUIF_DIRTY)-(#TUIF_DIRTY)
;        done = True
;      End If

    Case #TUIEV_TICK
      If *button\tickDelay>0
        If *button\tickCount>*button\tickDelay
          If *button\obj\flags&#TUIF_ACTIVE
            If *button\onRepeat\callback Then !_CallFuncPointer{*button\onRepeat\callback,done,*button,*ev,*button\onRepeat\notifyID}
          End If
        Else
          *button\tickCount+1
        End If
        done = True
      End If

    Case #TUIEV_KEYDOWN
      Select ntui_GetEventAttr{*ev,#TUIEVA_VANILLAKEY,0}
        Case 13 ; return
          ;If done=False
            ntui_SetFocus{*button}
            done      = True
            *button\obj\flags | #TUIF_ACTIVE
            *button\tickCount = 0
            If *button\obj\flags &#TUIF_TOGGLE
              *button\state = 1-*button\obj\value
            Else
              *button\state = 1 ; pressed
            End If
            ntui_Refresh{*button,Null}
          ;End If
          If *button\onTouch\callback Then !_CallFuncPointer{*button\onTouch\callback,done,*button,*ev,*button\onTouch\notifyID}
      End Select

    Case #TUIEV_KEYUP
        If *button\obj\flags&#TUIF_ACTIVE
          ;If done=False
            If *button\obj\flags &#TUIF_TOGGLE
                If *button\subClassID=#TUIBUTTON_RADIO
                  *button\obj\value = 1
                Else
                  *button\obj\value = 1-*button\obj\value
                End If
              *button\state = *button\obj\value
              _ntui_PropagateBind{*button,#TUIEV_BIND_VALUE,*button\obj\value,Null}
            Else
              *button\state = 0 ; pressed
            End If
            *button\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
            ntui_Refresh{*button,Null}
          ;End If
          If *button\onClick\callback Then !_CallFuncPointer{*button\onClick\callback,done,*button,*ev,*button\onClick\notifyID}
        End If

    Default
      Function Return False
  End Select

  If done
    Select str_Read{&*ev\notifyID}
      Case !NOTIFYID_ASLPATH   : ntui_SendEvent{*button,#TUIEV_ASLPATH} : str_Dup{&*ev\string,*button\obj\string}
      Case !NOTIFYID_ASLFILE   : ntui_SendEvent{*button,#TUIEV_ASLFILE} : str_Dup{&*ev\string,*button\obj\string}
      Case !NOTIFYID_ASLSAVE   : ntui_SendEvent{*button,#TUIEV_ASLSAVE} : str_Dup{&*ev\string,*button\obj\string}
      Case !NOTIFYID_ASLSCREEN : ntui_SendEvent{*button,#TUIEV_ASLSCREEN}
        str_Dup{&*ev\string,*button\obj\string}
        *ev\value = *button\obj\value
      Case !NOTIFYID_ASLFONT   : ntui_SendEvent{*button,#TUIEV_ASLFONT}
        str_Dup{&*ev\string,*button\obj\string}
        *ev\value = *button\obj\value
      Case !NOTIFYID_DELTALEFT : _ntui_PropagateBind{*button,#TUIEV_BIND_HDELTA,-1,Null}
      Case !NOTIFYID_DELTARIGHT: _ntui_PropagateBind{*button,#TUIEV_BIND_HDELTA, 1,Null}
      Case !NOTIFYID_DELTAUP   : _ntui_PropagateBind{*button,#TUIEV_BIND_VDELTA,-1,Null}
      Case !NOTIFYID_DELTADOWN : _ntui_PropagateBind{*button,#TUIEV_BIND_VDELTA, 1,Null}
      Case !NOTIFYID_DELTAINC  : _ntui_PropagateBind{*button,#TUIEV_BIND_DELTA, 1,Null}
      Case !NOTIFYID_DELTADEC  : _ntui_PropagateBind{*button,#TUIEV_BIND_DELTA,-1,Null}
    End Select

    If (*ev\notifyID)
      _ntui_QueueEvent{*button\obj\tuiEngine\outQ,*ev}
    Else
      _ntui_DestroyEvent{*ev}
    End If
  End If

Function Return done
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeButton {*button.tuiButton}                             /
;/                                                                             /
;/ Description:                                                                /
;/  Case #TUIBUTTON_TOOL                                                       /
;/    *button\obj\minsize\x = iwidth                                        /
;/    *button\obj\minsize\y = iheight                                       /
;/ * free everything special that we allocated for the button */               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *button.tuiButton    : ???                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitButton:
Statement _ntui_DeinitButton{*button.tuiButton}
!_ASSERT{*button}
!_ASSERT{*button\obj\classID=#TUICLASS_BUTTON}

If *button\tbi Then ntui_FreeTBImage{*button\tbi}  : *button\tbi = Null
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetButtonMinSize {*button.tuiButton,*rp.RastP:: /
;/ ort}                                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * calculate the minimum size for the button */                              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *button.tuiButton    : ???                                             /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_CalculateButtonMinSize:
Statement _ntui_CalculateButtonMinSize{*button.tuiButton,*rp.RastPort}
!_ASSERT{*button}
!_ASSERT{*button\obj\classID=#TUICLASS_BUTTON}

*tuiEngine.tuiEngine = *button\obj\tuiEngine : If *tuiEngine=Null OR *rp=Null Then Statement Return

If *button\tbi
  iwidth.l  = ntui_GetTBImageWidth {*button\tbi}
  iheight.l = ntui_GetTBImageHeight{*button\tbi}
End If

If *button\subClassID=#TUIBUTTON_SPINNER
  iwidth.l  = ntui_GetTBImageWidth {*button\tbi} + ntui_GetTBImageWidth {*button\tbi2}
  iheight.l = ntui_GetTBImageHeight{*button\tbi} + ntui_GetTBImageHeight {*button\tbi2}
  If iwidth <*tuiEngine\defSize[#TUISIZE_BUTTON] Then iwidth  = *tuiEngine\defSize[#TUISIZE_BUTTON]
  If iheight<*tuiEngine\defSize[#TUISIZE_BUTTON] Then iheight = *tuiEngine\defSize[#TUISIZE_BUTTON]
  If iwidth<iheight Then iwidth=iheight : Else iheight=iwidth
End If

*button\obj\minsize\x  = !tuiBorderWidth{*button\obj\padding}
*button\obj\minsize\y  = !tuiBorderHeight{*button\obj\padding}

If *button\obj\string
  DEFTYPE.tuiRect tx
  _ntui_GetTextRect{*tuiEngine,*button\obj\string,tx,*button\obj\flags,*rp}
  *button\obj\minsize\x + !tuiRectWidth{tx}
  *button\obj\minsize\y + !tuiRectHeight{tx}
End If

If *button\tbi
  If (*button\obj\flags&(#TUIF_BOTTOM|#TUIF_TOP))
    *button\obj\minsize\y + iheight
    iwidth  + !tuiBorderWidth{*button\obj\padding}
    If iwidth>*button\obj\minsize\x Then *button\obj\minsize\x = iwidth
  Else
    *button\obj\minsize\x + iwidth
    If *button\obj\string Then *button\obj\minsize\x + *button\obj\padding\right
    iheight + !tuiBorderHeight{*button\obj\padding}
    If iheight>*button\obj\minsize\y Then *button\obj\minsize\y = iheight
  End If
End If

_ntui_GetBorderSize{*tuiEngine,*button\obj\borderType,*button\obj\flags,*button\obj\border}

*button\obj\minsize\x + !tuiBorderWidth {*button\obj\border}
*button\obj\minsize\y + !tuiBorderHeight{*button\obj\border}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_Button {text.s,image.s,@notify.l,@help.s,@flags.l:: /
;/ ,@userID.l}                                                                 /
;/                                                                             /
;/ Description:                                                                /
;/    iy2.l = y1+*button\tbi\height-1                                       /
;/    If *button\obj\string Then iy2+ *tuiEngine\defPad\y                   /
;/ * create function for tui button */                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - text.s    : ???                                                           /
;/ - image.s    : ???                                                          /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.tuiButton ntui_Button{text.s,image.s,@onClick.s,@help.s,@flags.l,@nameID.s}
If (flags=#TUI_NOFLAGS) Then flags=0
flags | #TUIF_CENTER|#TUIF_MIDDLE|#TUIF_FIXHEIGHT|#TUIF_WANTMOVER|#TUIF_WANTTAB
*button.tuiButton = (.tuiButton)_ntui_CreateObject{#TUICLASS_BUTTON,SizeOf.tuiButton,help,flags,nameID}
If *button
  *button\subClassID     = #TUIBUTTON_NORMAL
  *button\obj\borderType = #TUIBORDER_BUTTON
  *button\obj\value      = 0
  *button\obj\bgTuiPen   = #TUIPEN_HALFSHINE
;  *button\obj\bgImage    = ntui_CreateTBImage{*button\obj\tuiEngine,"NTUI:button.9.png",#TUISIZE_NATIVE,#TUISIZE_NATIVE}
  *button\state          = 0
  *button\tbi            = Null
  str_Write{&*button\obj\string,text}

  If (image)
    *button\tbi          = ntui_CreateTBImage{*button\obj\tuiEngine,image,#TUISIZE_INLINE,#TUISIZE_INLINE}
  End If
  *button\tickDelay      = -1

  !_GetFuncPointer{*button\obj\Draw            ,_ntui_DrawButton,{0,0,0}}
;  !_GetFuncPointer{*button\obj\Layout          ,_ntui_LayoutButton,{0,0,0}}
  !_GetFuncPointer{*button\obj\DispatchEvent   ,_ntui_DispatchButtonEvent,{0,0}}
  !_GetFuncPointer{*button\obj\CalculateMinSize,_ntui_CalculateButtonMinSize,{0,0}}
  !_GetFuncPointer{*button\obj\Deinit          ,_ntui_DeinitButton,{0}}
  !_GetFuncPointer{*button\obj\SetAttr         ,_ntui_SetButtonAttr,{0,0,0}}
  !_GetFuncPointer{*button\obj\GetAttr         ,_ntui_GetButtonAttr,{0,0,0}}
  str_Write{&*button\onClick\notifyID,onClick}
  *button\onClick\callback   = *button\obj\tuiEngine\defaultNotifyCallback
  *button\onTouch\callback   = *button\obj\tuiEngine\defaultNotifyCallback
  *button\onRelease\callback = *button\obj\tuiEngine\defaultNotifyCallback
  *button\onRepeat\callback  = *button\obj\tuiEngine\defaultNotifyCallback
End If
Function Return *button
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_CheckBox {checked.l,@notify.l,@help.s,@flags.l,@u:: /
;/ serID.l}                                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * create function for tui button */                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - checked.l    : ???                                                        /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.tuiButton ntui_CheckBox{checked.l,@onClick.s,@help.s,@flags.l,@nameID.s}
If (flags=#TUI_NOFLAGS) Then flags=0
flags | #TUIF_CENTER|#TUIF_MIDDLE |#TUIF_TOGGLE|#TUIF_FIXSIZE|#TUIF_WANTMOVER|#TUIF_WANTTAB
*button.tuiButton = ntui_Button{"","",onClick,help,flags,nameID}
If *button
  *button\subClassID      = #TUIBUTTON_CHECKBOX
  *button\tbi            = ntui_CreateTBImage{*button\obj\tuiEngine,"CHECKMARK",#TUISIZE_BUTTON,#TUISIZE_BUTTON}
  *button\tbi2           = ntui_CreateTBImage{*button\obj\tuiEngine,"UNCHECKMARK",#TUISIZE_BUTTON,#TUISIZE_BUTTON}
  *button\obj\borderType = #TUIBORDER_BUTTON
  *button\state          = 0
  *button\obj\value      = checked
  *button\tickDelay      = -1
End If
Function Return *button
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_FunctionButton {funcID.l,@notify.l,@help.s,@flags:: /
;/ .l,@userID.l}                                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * create function for tui button */                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - funcID.l    : ???                                                         /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.tuiButton ntui_FunctionButton{funcID.l,@help.s,@flags.l,@nameID.s}
If (flags=#TUI_NOFLAGS) Then flags=0
flags | #TUIF_CENTER|#TUIF_MIDDLE|#TUIF_WANTMOVER|#TUIF_FIXSIZE|#TUIF_WANTTAB

*button.tuiButton = ntui_Button{"","","",help,flags,nameID}

If *button

  *tuiEngine.tuiEngine = *button\obj\tuiEngine
  *button\subClassID = funcID
  *button\state          = 0
  *button\tickDelay      = -1
  Select funcID
    Case #TUIBUTTON_ARROWUP     : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"ARROWUP",#TUISIZE_KNOB,#TUISIZE_KNOB}
                                  *button\tickDelay=*tuiEngine\defTickDelay
                                  str_Write{&*button\onTouch\notifyID ,!NOTIFYID_DELTAUP}
                                  str_Write{&*button\onRepeat\notifyID,!NOTIFYID_DELTAUP}
    Case #TUIBUTTON_ARROWDOWN   : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"ARROWDOWN",#TUISIZE_KNOB,#TUISIZE_KNOB}
                                  *button\tickDelay=*tuiEngine\defTickDelay
                                  str_Write{&*button\onTouch\notifyID ,!NOTIFYID_DELTADOWN}
                                  str_Write{&*button\onRepeat\notifyID,!NOTIFYID_DELTADOWN}
    Case #TUIBUTTON_ARROWLEFT   : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"ARROWLEFT",#TUISIZE_KNOB,#TUISIZE_KNOB}
                                  *button\tickDelay=*tuiEngine\defTickDelay
                                  str_Write{&*button\onTouch\notifyID ,!NOTIFYID_DELTALEFT}
                                  str_Write{&*button\onRepeat\notifyID,!NOTIFYID_DELTALEFT}
    Case #TUIBUTTON_ARROWRIGHT  : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"ARROWRIGHT",#TUISIZE_KNOB,#TUISIZE_KNOB}
                                  *button\tickDelay=*tuiEngine\defTickDelay
                                  str_Write{&*button\onTouch\notifyID ,!NOTIFYID_DELTARIGHT}
                                  str_Write{&*button\onRepeat\notifyID,!NOTIFYID_DELTARIGHT}
    Case #TUIBUTTON_OLARROWUP   : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"OLARROWUP",#TUISIZE_KNOB,#TUISIZE_KNOB}
                                  *button\tickDelay=*tuiEngine\defTickDelay
                                  str_Write{&*button\onTouch\notifyID ,!NOTIFYID_DELTAUP}
                                  str_Write{&*button\onRepeat\notifyID,!NOTIFYID_DELTAUP}
    Case #TUIBUTTON_OLARROWDOWN : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"OLARROWDOWN",#TUISIZE_KNOB,#TUISIZE_KNOB}
                                  *button\tickDelay=*tuiEngine\defTickDelay
                                  str_Write{&*button\onTouch\notifyID ,!NOTIFYID_DELTADOWN}
                                  str_Write{&*button\onRepeat\notifyID,!NOTIFYID_DELTADOWN}
    Case #TUIBUTTON_OLARROWLEFT : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"OLARROWLEFT",#TUISIZE_KNOB,#TUISIZE_KNOB}
                                  *button\tickDelay=*tuiEngine\defTickDelay
                                  str_Write{&*button\onTouch\notifyID ,!NOTIFYID_DELTALEFT}
                                  str_Write{&*button\onRepeat\notifyID,!NOTIFYID_DELTALEFT}
    Case #TUIBUTTON_OLARROWRIGHT: *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"OLARROWRIGHT",#TUISIZE_KNOB,#TUISIZE_KNOB}
                                  *button\tickDelay=*tuiEngine\defTickDelay
                                  str_Write{&*button\onTouch\notifyID ,!NOTIFYID_DELTARIGHT}
                                  str_Write{&*button\onRepeat\notifyID,!NOTIFYID_DELTARIGHT}
    Case #TUIBUTTON_LEFT        : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"LEFT",#TUISIZE_KNOB,#TUISIZE_KNOB}
    Case #TUIBUTTON_RIGHT       : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"RIGHT",#TUISIZE_KNOB,#TUISIZE_KNOB}
    Case #TUIBUTTON_POPUP       : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"POPUP",#TUISIZE_KNOB,#TUISIZE_KNOB}
    Case #TUIBUTTON_DROPDOWN    : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"DROPDOWN",#TUISIZE_KNOB,#TUISIZE_KNOB}
    Case #TUIBUTTON_PATH        : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"PATH",#TUISIZE_BUTTON,#TUISIZE_BUTTON}
                                  str_Write{&*button\onClick\notifyID,!NOTIFYID_ASLPATH}
    Case #TUIBUTTON_FILE        : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"FILE",#TUISIZE_BUTTON,#TUISIZE_BUTTON}
                                  str_Write{&*button\onClick\notifyID,!NOTIFYID_ASLFILE}
    Case #TUIBUTTON_SAVE        : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"SAVE",#TUISIZE_BUTTON,#TUISIZE_BUTTON}
                                  str_Write{&*button\onClick\notifyID,!NOTIFYID_ASLSAVE}
    Case #TUIBUTTON_SCREEN      : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"SCREEN",#TUISIZE_BUTTON,#TUISIZE_BUTTON}
                                  str_Write{&*button\onClick\notifyID,!NOTIFYID_ASLSCREEN}
    Case #TUIBUTTON_FONT        : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"FONT",#TUISIZE_BUTTON,#TUISIZE_BUTTON}
                                  str_Write{&*button\onClick\notifyID,!NOTIFYID_ASLFONT}
    Case #TUIBUTTON_INC         : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"DEC",#TUISIZE_BUTTON,#TUISIZE_BUTTON}
                                  *button\tickDelay=*tuiEngine\defTickDelay
                                  str_Write{&*button\onTouch\notifyID ,!NOTIFYID_DELTAINC}
                                  str_Write{&*button\onRepeat\notifyID,!NOTIFYID_DELTAINC}
    Case #TUIBUTTON_DEC         : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"INC",#TUISIZE_BUTTON,#TUISIZE_BUTTON}
                                  *button\tickDelay=*tuiEngine\defTickDelay
                                  str_Write{&*button\onTouch\notifyID ,!NOTIFYID_DELTADEC}
                                  str_Write{&*button\onRepeat\notifyID,!NOTIFYID_DELTADEC}
    Case #TUIBUTTON_SPINNER     : *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"INC",#TUISIZE_HALFBUTTON,#TUISIZE_HALFBUTTON}
                                  *button\tickDelay=*tuiEngine\defTickDelay
                                  str_Write{&*button\onTouch\notifyID ,""}
                                  str_Write{&*button\onRepeat\notifyID,""}
                                  *button\tbi2 = ntui_CreateTBImage{*button\obj\tuiEngine,"DEC",#TUISIZE_HALFBUTTON,#TUISIZE_HALFBUTTON}
    Default
       *button\subClassID      = #TUIBUTTON_NORMAL
       *button\tbi = ntui_CreateTBImage{*button\obj\tuiEngine,"",#TUISIZE_BUTTON,#TUISIZE_BUTTON}
  End Select

  *button\obj\borderType = #TUIBORDER_BUTTON
End If
Function Return *button
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_ImageButton {text.s,image.s,@notify.l,@help.s,@fl:: /
;/ ags.l,@userID.l}                                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * create an image tui button */                                             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - text.s    : ???                                                           /
;/ - image.s    : ???                                                          /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.tuiButton ntui_ImageButton{text.s,image.s,@onClick.s,@help.s,@flags.l,@nameID.s}
If (flags=#TUI_NOFLAGS) Then flags=0
flags | #TUIF_CENTER|#TUIF_BOTTOM|#TUIF_WANTMOVER|#TUIF_FIXSIZE|#TUIF_WANTTAB
*button.tuiButton = ntui_Button{text,"",onClick,help,flags,nameID}

If *button
  *tuiEngine.tuiEngine       = *button\obj\tuiEngine
  *button\subClassID       = #TUIBUTTON_IMAGE
  *button\tickDelay       = -1
  *button\state           = 0
  *button\tbi             = ntui_CreateTBImage{*button\obj\tuiEngine,image,#TUISIZE_NATIVE,#TUISIZE_NATIVE}
  *button\obj\borderType  = #TUIBORDER_BUTTON
;  *button\obj\bgTuiPen    = #TUIPEN_HALFSHINE
End If
Function Return *button
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_ToolButton {text.s,image.s,@notify.l,@help.s,@fla:: /
;/ gs.l,@userID.l}                                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * create an image tui button */                                             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - text.s    : ???                                                           /
;/ - image.s    : ???                                                          /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.tuiButton ntui_ToolButton{text.s,image.s,@tuiSize.l,@onClick.s,@help.s,@flags.l,@nameID.s}
If (flags=#TUI_NOFLAGS) Then flags=0
flags | #TUIF_CENTER|#TUIF_BOTTOM|#TUIF_WANTMOVER|#TUIF_FIXSIZE|#TUIF_WANTTAB
;*button.tuiButton = _ntui_CreateObject{#TUICLASS_BUTTON,SizeOf.tuiButton,notify,help,flags,userID}
*button.tuiButton = ntui_Button{text,"",onClick,help,flags,nameID}
If *button
  *button\subClassID        = #TUIBUTTON_TOOL
  If tuiSize=-1 Then tuiSize  = #TUISIZE_NATIVE
  *button\tbi              = ntui_CreateTBImage{*button\obj\tuiEngine,image,tuiSize,tuiSize}
  *button\state            = 0
  *button\obj\padding\left = 0,0,0,0
  *button\obj\margin\left  = 0,0,0,0
  *button\obj\borderType   = #TUIBORDER_TOOL
  *button\tickDelay        = -1
  *button\obj\bgTuiPen     = #TUIPEN_TRANSPARENT
  *button\obj\bgImage      = Null
End If
Function Return *button
End Function

Function.tuiButton ntui_CheckButton{text.s,checked.l,@onClick.s,@help.s,@flags.l,@nameID.s}
If (flags=#TUI_NOFLAGS) Then flags=#TUIF_LEFT
flags | #TUIF_WANTMOVER|#TUIF_FIXSIZE|#TUIF_WANTTAB|#TUIF_TOGGLE
*button.tuiButton = ntui_Button{text,"",onClick,help,flags,nameID}
If *button
  *button\subClassID        = #TUIBUTTON_CHECKBOX
  *button\obj\value        = checked
  *button\tbi              = ntui_CreateTBImage{*button\obj\tuiEngine,"CHECKON" ,#TUISIZE_INLINE,#TUISIZE_INLINE}
  *button\tbi2             = ntui_CreateTBImage{*button\obj\tuiEngine,"CHECKOFF",#TUISIZE_INLINE,#TUISIZE_INLINE}
  *button\state            = 0
  *button\obj\borderType   = #TUIBORDER_NONE
  *button\tickDelay        = -1
  *button\obj\bgTuiPen     = #TUIPEN_TRANSPARENT
  *button\obj\bgImage      = Null
End If
Function Return *button
End Function


Function.tuiButton ntui_RadioButton{text.s,checked.l,@onClick.s,@help.s,@flags.l,@nameID.s}
If (flags=#TUI_NOFLAGS) Then flags=#TUIF_LEFT
flags | #TUIF_WANTMOVER|#TUIF_FIXSIZE|#TUIF_WANTTAB|#TUIF_TOGGLE
*button.tuiButton = ntui_Button{text,"",onClick,help,flags,nameID}
If *button
  *button\subClassID       = #TUIBUTTON_RADIO
  *button\obj\value        = checked
  *button\tbi              = ntui_CreateTBImage{*button\obj\tuiEngine,"RADIOON" ,#TUISIZE_INLINE,#TUISIZE_INLINE}
  *button\tbi2             = ntui_CreateTBImage{*button\obj\tuiEngine,"RADIOOFF",#TUISIZE_INLINE,#TUISIZE_INLINE}
  *button\state            = 0
  *button\obj\borderType   = #TUIBORDER_NONE
  *button\tickDelay        = -1
  *button\obj\bgTuiPen     = #TUIPEN_TRANSPARENT
  *button\obj\bgImage      = Null
End If
Function Return *button
End Function



