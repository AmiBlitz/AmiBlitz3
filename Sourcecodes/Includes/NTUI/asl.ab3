CNIF #__include=0
Syntax 2
optimize 7
CEND
;XINCLUDE "error.include.bb2"



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslfo_Request{@allowpropfont.l,@*scr.Screen}           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - allowpropfont.l    : ???                                                  /
;/ - *scr.Screen    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_ASLFontRequest{*tuiEngine.tuiEngine,initFontName.s,initFontSize.l,@allowPropFont.l}
Dim tagList.TagItem(32)
succ.l = False

; Set up all the requester Tags ...
If *tuiEngine\aslfo = !_NULL
  n.l = 0
  tagList(n)\ti_Tag = #TAG_DONE,0
  ; allocate the requester structure ...
  *tuiEngine\aslfo = AllocAslRequest_ (#ASL_FontRequest,&tagList(0)\ti_Tag)
End If
 
If *tuiEngine\aslfo
  n.l = 0
  tagList(n)\ti_Tag = #ASLFO_Screen           ,*tuiEngine\scr              : n+1
  tagList(n)\ti_Tag = #ASLFO_InitialLeftEdge  ,20                          : n+1
  tagList(n)\ti_Tag = #ASLFO_InitialTopEdge   ,20                          : n+1
  tagList(n)\ti_Tag = #ASLFO_InitialWidth     ,*tuiEngine\scr\Width / 4    : n+1
  tagList(n)\ti_Tag = #ASLFO_InitialHeight    ,*tuiEngine\scr\Height / 2   : n+1

  If allowPropFont=False Then tagList(n)\ti_Tag = #ASLFO_FixedWidthOnly,-1            : n+1
  If initFontName        Then tagList(n)\ti_Tag = #ASLFO_InitialName   ,&initFontName : n+1
  If initFontSize>0      Then tagList(n)\ti_Tag = #ASLFO_InitialSize   ,initFontSize  : n+1
  tagList(n)\ti_Tag = #TAG_DONE,0

  ; do the ASL requester
  If AslRequest_ (*tuiEngine\aslfo,&tagList(0))
    succ = True
  End If
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslfr_Request{id.l,savemode.l,multiselect.l,drawerso:: /
;/ nly.l,@*scr.Screen,@noIcons.l}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * Do an ASL FileRequester.                                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - id.l             : id slot                                                /
;/ - savemode.l       : -1 = ASL behaviour is for "save file", otherwise "lo:: /
;/ ad file"                                                                    /
;/ - multiselect.l    : -1 = allow multiselect                                 /
;/ - drawersonly.l    : -1 = show only drawers                                 /
;/ - *scr.Screen      : pointer to a screen to open the requester on           /
;/ - noIcons.l        : -1 = hide icon files                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w         : -1 if the requester was answered by the user, 0 if c:: /
;/ ancelled                                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_ASLFileRequest{*tuiEngine.tuiEngine,initPath.s,initFile.s,initPattern.s,saveMode.l,multiSelect.l,drawersOnly.l,noIcons.l}
Dim tagList.TagItem(32)
succ.l = False

; Set up all the requester Tags ...
If *tuiEngine\aslfr = !_NULL
  n.l = 0
  tagList(n)\ti_Tag = #TAG_DONE,0
  ; allocate the requester structure ...
  *tuiEngine\aslfr = AllocAslRequest_ (#ASL_FileRequest,&tagList(0)\ti_Tag)
End If

If *tuiEngine\aslfr
  n.l = 0
  tagList(n)\ti_Tag = #ASLFR_Screen           ,*tuiEngine\scr              : n+1
  tagList(n)\ti_Tag = #ASLFR_InitialLeftEdge  ,20                          : n+1
  tagList(n)\ti_Tag = #ASLFR_InitialTopEdge   ,20                          : n+1
  tagList(n)\ti_Tag = #ASLFR_InitialWidth     ,*tuiEngine\scr\Width / 4    : n+1
  tagList(n)\ti_Tag = #ASLFR_InitialHeight    ,*tuiEngine\scr\Height / 2   : n+1

  tagList(n)\ti_Tag = #ASLFR_DoSaveMode       ,saveMode                    : n+1
  tagList(n)\ti_Tag = #ASLFR_DoMultiSelect    ,multiSelect                 : n+1
  tagList(n)\ti_Tag = #ASLFR_DrawersOnly      ,drawersOnly                 : n+1
  tagList(n)\ti_Tag = #ASLFR_RejectIcons      ,noIcons                     : n+1

  If initFile><"" AND drawersOnly=False Then tagList(n)\ti_Tag = #ASLFR_InitialFile,&initFile  : n+1
  If initPath                           Then tagList(n)\ti_Tag = #ASLFR_InitialDrawer,&initPath: n+1

  If initPattern
    tagList(n)\ti_Tag = #ASLFR_InitialPattern,&initPattern           : n+1
    tagList(n)\ti_Tag = #ASLFR_DoPatterns,True                       : n+1
  Else
    tagList(n)\ti_Tag = #ASLFR_DoPatterns,False                      : n+1
  End If
  tagList(n)\ti_Tag = #TAG_DONE,0

  If AslRequest_ (*tuiEngine\aslfr,&tagList(0))
    succ = True
  End If
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslsm_Request{@doDims.l,@doDepth.l,@doOverscan.l,@do:: /
;/ Autoscroll.l,@*scr.Screen}                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Open an ASL screen requester and let the user choose a screenmode.          /
;/ To reduce the number of screenmodes to the ones matching your specs, use :: /
;/ screen_ASL_setmin, screen_aslsetmax and screen_aslsetinitial.               /
;/ This is a bit more lowlevel than screen_ask. You have to compose your bit:: /
;/  mask out of the following values:                                          /
;/                                                                             /
;/ #asl_scr_width      =  1 ; ask for width                                    /
;/ #asl_scr_height     =  2 ; ask for height                                   /
;/ #asl_scr_depth      =  4 ; ask for depth                                    /
;/ #asl_scr_overscan   =  8 ; ask for overscan                                 /
;/ #asl_scr_ascroll    = 16 ; ask for auto scroll                              /
;/                                                                             /
;/ After calling the requester, you can read out the screen information by s:: /
;/ creen_ASL_width, screen_ASL_height, screen_ASL_depth, screen_ASL_id, scre:: /
;/ en_ASL_autoscroll and screen_ask_overscan.                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - title.s    : title of the ASL requester                                   /
;/ - mask.l    : bit mask of things you want the ASL requester to ask          /
;/ - doDims.l    : ???                                                         /
;/ - doDepth.l    : ???                                                        /
;/ - doOverscan.l    : ???                                                     /
;/ - doAutoscroll.l    : ???                                                   /
;/ - *scr.Screen    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : -1 if the requester was answered, 0 if aborted             /
;/                                                                             /
;/ See also:                                                                   /
;/ screen_ASL_setmin, screen_aslsetmax, screen_aslsetinitial                   /
;/ screen_ASL_width, screen_ASL_height, screen_ASL_depth, screen_ASL_id, scr:: /
;/ een_ASL_autoscroll, screen_ask_overscan                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ntui_ASLScreenModeRequest{*tuiEngine.tuiEngine,initMode.l,initWidth.l,initHeight.l,initDepth.l}
Dim tagList.TagItem(32)
succ.w = False

If *tuiEngine\aslsm=!_NULL
  n.l = 0
  tagList(n)\ti_Tag = #TAG_DONE,0
  ; allocate the requester structure ...
  *tuiEngine\aslsm = AllocAslRequest_ (#ASL_ScreenModeRequest,&tagList(0)\ti_Tag)
End If

If *tuiEngine\aslsm
  n.l = 0
  ; Set up all the requester Tags ...
  tagList(n)\ti_Tag = #ASLSM_Screen           ,*tuiEngine\scr              : n+1
  tagList(n)\ti_Tag = #ASLSM_InitialLeftEdge  ,20                          : n+1
  tagList(n)\ti_Tag = #ASLSM_InitialTopEdge   ,20                          : n+1
  tagList(n)\ti_Tag = #ASLSM_InitialWidth     ,*tuiEngine\scr\Width / 4    : n+1
  tagList(n)\ti_Tag = #ASLSM_InitialHeight    ,*tuiEngine\scr\Height / 2   : n+1

  doDims.l = 0 : doDepth.l = 0
  If initMode   >0 Then tagList(n)\ti_Tag = #ASLSM_InitialDisplayID      ,initMode      : n+1
  If initDepth  >0 Then tagList(n)\ti_Tag = #ASLSM_InitialDisplayDepth   ,initDepth     : n+1 : doDims=1
  If initWidth  >0 Then tagList(n)\ti_Tag = #ASLSM_InitialDisplayWidth   ,initWidth     : n+1 : doDims=1
  If initHeight >0 Then tagList(n)\ti_Tag = #ASLSM_InitialDisplayHeight  ,initHeight    : n+1 : doDepth=1

  tagList(n)\ti_Tag = #ASLSM_DoWidth         , doDims  : n+1
  tagList(n)\ti_Tag = #ASLSM_DoHeight        , doDims  : n+1
  tagList(n)\ti_Tag = #ASLSM_DoDepth         , doDepth : n+1
  ;tagList(n)\ti_Tag = #ASLSM_DoOverscanType  , doOverscan  : n+1
  ;tagList(n)\ti_Tag = #ASLSM_DoAutoScroll    , doAutoscroll  : n+1
  tagList(n)\ti_Tag = #TAG_DONE,0

  If AslRequest_ (*tuiEngine\aslsm,&tagList(0))
    succ = True
  End If
Else
  error{"\\__THIS_FUNCTION: Unable to allocate ASL screenmode requester!"}
End If
Function Return succ
End Function




