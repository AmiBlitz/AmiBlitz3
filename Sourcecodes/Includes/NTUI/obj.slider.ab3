; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; FuncOptimize    = 0
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 292
; CursorColumn    = 77
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
#TUI_HAS_SLIDER=1

#TUISLA_BASE        = #TUIA_USER
#TUISLA_VALUE       = #TUIA_VALUE      ; top value of Slider
#TUISLA_MINVALUE    = #TUISLA_BASE +1  ; visible logic units
#TUISLA_MAXVALUE    = #TUISLA_BASE +2  ; total logic units
#TUISLA_STEP        = #TUISLA_BASE +3
#TUISLA_LABEL       = #TUIA_STRING
#TUISLA_ONCHANGE    = #TUISLA_BASE +4
#TUISLA_ONCHANGECB  = #TUISLA_BASE +5
#TUISLA_ORIENTATION = #TUISLA_BASE +6

NEWTYPE.tuiSlider

  obj.tuiObject            ; tui object header
  minValue.l               ; minimum value of slider
  maxValue.l               ; maximum value of slider
  step_.l                  ; step
  orientation.l
  grab.tuiPixel
  grabValue.l
  grabbed.l
  knobSize.tuiPixel
  labelSize.tuiPixel
  onChange.tuiNotifyHandler

End NEWTYPE


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !_ntui_VSlider_Value2Pixel                                          /
;/                                                                             /
;/ Description:                                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _ntui_VSlider_Value2Pixel ; {value, size}
If *slider\maxValue>*slider\minValue
  `1 = (*slider\maxValue -(`2)-*slider\minValue) * (!tuiRectHeight{*slider\obj\cbox} - *slider\labelSize\y - *slider\knobSize\y)  / (*slider\maxValue - *slider\minValue)
Else
  `1 = *slider\obj\cbox\bottom
End If
End Macro

Macro _ntui_HSlider_Value2Pixel ; {value, size}
If  *slider\maxValue>*slider\minValue
  `1 = (((`2)-*slider\minValue) * (!tuiRectWidth{*slider\obj\cbox} - *slider\labelSize\x - *slider\knobSize\x) )/ (*slider\maxValue - *slider\minValue)
Else
   `1 = *slider\obj\cbox\left
End If
End Macro
 

Macro _ntui_VSlider_Pixel2Value ; {pixel, size}
If ((!tuiRectHeight{*slider\obj\cbox}- *slider\labelSize\y - *slider\knobSize\y)>0)
  `1 = ((`2)) * (*slider\maxValue - *slider\minValue+1) / (!tuiRectHeight{*slider\obj\cbox}- *slider\labelSize\y - *slider\knobSize\y) + *slider\minValue
Else
  `1 = *slider\minValue
End If
End Macro

Macro _ntui_HSlider_Pixel2Value ; {pixel, size}
If ((!tuiRectWidth{*slider\obj\cbox} - *slider\labelSize\x - *slider\knobSize\x)>0)
  `1 = ((`2)) * (*slider\maxValue - *slider\minValue+1) / (!tuiRectWidth{*slider\obj\cbox} - *slider\labelSize\x - *slider\knobSize\x) + *slider\minValue
Else
  `1 = *slider\minValue
End If
End Macro
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_UpdateSlider {*slider.tuiSlider,value.l,minvalue.l,maxva:: /
;/ lue.l}                                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ Update the slider values.                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *slider.tuiSlider    : ???                                             /
;/ - value.l       : ???                                                          /
;/ - minvalue.l    : ???                                                       /
;/ - maxvalue.l    : ???                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_UpdateSlider{*slider.tuiSlider,value.l,minvalue.l,maxvalue.l,*ev.tuiEvent}
  !_ASSERT{*slider}
  !_ASSERT{*slider\obj\classID=#TUICLASS_SLIDER}

  If value><*slider\obj\value OR minvalue><*slider\minValue OR maxvalue><*slider\maxValue
    If maxvalue<minvalue Then x.l=minvalue:minvalue=maxvalue:maxvalue=x
    If value>maxvalue Then value=maxvalue
    If value<minvalue Then value=minvalue

    *slider\minValue  = minvalue
    *slider\maxValue  = maxvalue

    If *slider\obj\value><value
      *slider\obj\value=value
      If *ev
        !tuiHandleNotify{done.l,*slider,onChange,*ev}
      End If
    End If
    ntui_Refresh{*slider,*slider\obj\cbox}

  End If

End Statement


_ntui_SetSliderAttr:
Function.l _ntui_SetSliderAttr{*slider.tuiSlider,ti_Tag.l,ti_Data.l}
  !_ASSERT{*slider}
  !_ASSERT{*slider\obj\classID=#TUICLASS_SLIDER}

  done.l = True
  Select ti_Tag
    Case #TUISLA_VALUE      : _ntui_UpdateSlider{*slider,ti_Data,*slider\minValue,*slider\maxValue ,Null}
    Case #TUISLA_MINVALUE   : 
      If ti_Data>*slider\maxValue Then *slider\maxValue=ti_Data
      _ntui_UpdateSlider{*slider,*slider\obj\value,ti_Data,*slider\maxValue,Null}
    Case #TUISLA_MAXVALUE   : 
      If ti_Data<*slider\minValue Then *slider\minValue=ti_Data
      _ntui_UpdateSlider{*slider,*slider\obj\value,*slider\minValue,ti_Data,Null}
    Case #TUISLA_STEP       : *slider\step_ = ti_Data
    Case #TUISLA_ONCHANGE   : str_WritePtr{&*slider\onChange\notifyID ,ti_Data}
    Case #TUISLA_ONCHANGECB : *slider\onChange\callback = ti_Data
    Case #TUISLA_ORIENTATION:
      Select ti_Data
        Case #TUIORIENT_HORIZONTAL
          *slider\orientation = #TUIORIENT_HORIZONTAL
          *slider\obj\flags   = (*slider\obj\flags| #TUIF_FIXSIZE) - #TUIF_FIXWIDTH
        Case #TUIORIENT_VERTICAL
          *slider\orientation = #TUIORIENT_VERTICAL
          *slider\obj\flags   = (*slider\obj\flags| #TUIF_FIXSIZE) - #TUIF_FIXHEIGHT
        Default
          done=False
      End Select
    Case #TUISLA_LABEL    : str_WritePtr{&*slider\obj\string ,ti_Data}

    Default
      done=False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_SetSliderAttr,{Null,0,0}}


_ntui_GetSliderAttr:
Function.l _ntui_GetSliderAttr{*slider.tuiSlider,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*slider}
  !_ASSERT{*slider\obj\classID=#TUICLASS_SLIDER}

  done.l = True
  Select ti_Tag
    Case #TUISLA_VALUE       : *ti_Data\l = *slider\obj\value
    Case #TUISLA_MINVALUE    : *ti_Data\l = *slider\minValue
    Case #TUISLA_MAXVALUE    : *ti_Data\l = *slider\maxValue
    Case #TUISLA_STEP        : *ti_Data\l = *slider\step_
    Case #TUISLA_ONCHANGE    : *ti_Data\l = str_GetPtr{*slider\onChange\notifyID}
    Case #TUISLA_ONCHANGECB  : *ti_Data\l = *slider\onChange\callback
    Case #TUISLA_LABEL       : *ti_Data\l = str_GetPtr{*slider\obj\string}
    Case #TUISLA_ORIENTATION : *ti_Data\l = *slider\orientation
    Default
      done=False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_GetSliderAttr,{Null,0,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !_ntui_Slider_Clip                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _ntui_Slider_Clip ;
If ((`1)>*slider\maxValue) Then `1 = *slider\maxValue
If ((`1)<*slider\minValue) Then `1 = *slider\minValue
End Macro

Function.s _ntui_CreateSliderLabel{*slider.tuiSlider,value.l}
  !_ASSERT{*slider}
  !_ASSERT{*slider\obj\classID=#TUICLASS_SLIDER}

  If *slider\obj\string
    text.s = str_Read{&*slider\obj\string}
    text = Replace$(text,"%d",Str$(value))
    text = Replace$(text,"%m",Str$(*slider\minValue))
    text = Replace$(text,"%M",Str$(*slider\maxValue))
  Else
    text = ""
  End If

Function Return text
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_DispatchSlider {*slider.tuiSlider,*ev.tui:: /
;/ Event}                                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * do what happens if the user operates the Slider */                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *slider.tuiSlider    : ???                                             /
;/ - *ev.tuiEvent    : ???                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DispatchSliderEvent:
Function.l _ntui_DispatchSliderEvent{*slider.tuiSlider,*ev.tuiEvent}
  !_ASSERT{*slider}
  !_ASSERT{*slider\obj\classID=#TUICLASS_SLIDER}
  !_ASSERT{*ev}
  done.l = False

  Select *ev\id
    Case #TUIEV_MOUSEDOWN:
      If *ev\value=0
;        If !tuiRectHit{*tui\cbox,*ev\pos\x,*ev\pos\y}
        If ntui_HitObject{*slider,*ev\pos\x,*ev\pos\y}
          done=True
          ntui_SetFocus{*slider}
          *slider\obj\flags | #TUIF_ACTIVE
          ;str_Dup{&*ev\notifyID,*slider\obj\onTouch}
          *slider\grab\x = *ev\pos\x - *slider\obj\cbox\left
          *slider\grab\y = *ev\pos\y - *slider\obj\cbox\top
          *slider\grabValue = *slider\obj\value
          *slider\grabbed = True

          Select *slider\orientation
            Case #TUIORIENT_HORIZONTAL
              !_ntui_HSlider_Value2Pixel{kx1.l,*slider\grabValue}
              kx2.l = kx1 + *slider\knobSize\x-1
              If *slider\grab\x<kx1
                _ntui_UpdateSlider{*slider,*slider\obj\value-*slider\step_,*slider\minValue,*slider\maxValue,*ev}
                *slider\grabbed = False
              End If
              If *slider\grab\x>kx2
                _ntui_UpdateSlider{*slider,*slider\obj\value+*slider\step_,*slider\minValue,*slider\maxValue,*ev}
                *slider\grabbed = False
              End If

            Case #TUIORIENT_VERTICAL
              !_ntui_VSlider_Value2Pixel{ky1.l,*slider\grabValue}
              ky2.l = ky1 + *slider\knobSize\y-1
              If *slider\grab\y<ky1
                _ntui_UpdateSlider{*slider,*slider\obj\value+*slider\step_,*slider\minValue,*slider\maxValue,*ev}
                *slider\grabbed = False
              End If
              If *slider\grab\y>ky2
                _ntui_UpdateSlider{*slider,*slider\obj\value-*slider\step_,*slider\minValue,*slider\maxValue,*ev}
                *slider\grabbed = False
              End If
          End Select
          ntui_Refresh{*slider,Null}
        End If
      End If

    Case #TUIEV_MOUSEUP
      If *ev\value=0
        ;str_Dup{&*ev\notifyID,*slider\obj\onRelease}
        *slider\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
        *slider\grabbed=False
        done=True
        ntui_Refresh{*slider,Null}
      End If

    Case #TUIEV_VSCROLL
      _ntui_UpdateSlider{*slider,*slider\obj\value-*slider\step_* *ev\value,*slider\minValue,*slider\maxValue,*ev}
      done=True

    Case #TUIEV_HSCROLL
      _ntui_UpdateSlider{*slider,*slider\obj\value-*slider\step_* *ev\value,*slider\minValue,*slider\maxValue,*ev}
      done=True

    Case #TUIEV_KEYDOWN
      Select *ev\value
        Case #RAWKEY_LEFT      : _ntui_UpdateSlider{*slider,*slider\obj\value-*slider\step_,*slider\minValue,*slider\maxValue,*ev} : done=True
        Case #RAWKEY_UP        : _ntui_UpdateSlider{*slider,*slider\obj\value+*slider\step_,*slider\minValue,*slider\maxValue,*ev} : done=True
        Case #RAWKEY_RIGHT     : _ntui_UpdateSlider{*slider,*slider\obj\value+*slider\step_,*slider\minValue,*slider\maxValue,*ev} : done=True
        Case #RAWKEY_DOWN      : _ntui_UpdateSlider{*slider,*slider\obj\value-*slider\step_,*slider\minValue,*slider\maxValue,*ev} : done=True
        Case #RAWKEY_WHEELUP   : _ntui_UpdateSlider{*slider,*slider\obj\value+*slider\step_,*slider\minValue,*slider\maxValue,*ev} : done=True
        Case #RAWKEY_WHEELDOWN : _ntui_UpdateSlider{*slider,*slider\obj\value-*slider\step_,*slider\minValue,*slider\maxValue,*ev} : done=True
      End Select

    Case #TUIEV_MOUSEMOVE
      If *slider\obj\flags&#TUIF_ACTIVE
        If *slider\grabbed
          Select *slider\orientation
            Case #TUIORIENT_HORIZONTAL
              newPos.l   = *ev\pos\x - *slider\obj\cbox\left - *slider\grab\x
              !_ntui_HSlider_Pixel2Value{newValue.l,newPos}
              newValue + (*slider\grabValue-*slider\minValue)
            Case #TUIORIENT_VERTICAL
              newPos.l   = *ev\pos\y - *slider\obj\cbox\top - *slider\grab\y
              !_ntui_VSlider_Pixel2Value{newValue,-newPos}
              newValue + (*slider\grabValue-*slider\minValue)

          End Select
          _ntui_UpdateSlider{*slider,newValue,*slider\minValue,*slider\maxValue,*ev}
        End If
        done=True
      End If

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_DispatchSliderEvent,{Null,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetSliderMinSize {*slider.tuiSlider,*rp.RastP:: /
;/ ort}                                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * calculate the minimum size for the Slider */                              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *slider.tuiSlider    : ???                                             /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_CalculateSliderMinSize:
Statement _ntui_CalculateSliderMinSize{*slider.tuiSlider,*rp.RastPort}
  !_ASSERT{*slider}
  !_ASSERT{*rp}
  !_ASSERT{*slider\obj\classID=#TUICLASS_SLIDER}
  *engine.tuiEngine = *slider\obj\engine
  !_ASSERT{*engine}

;  *slider\obj\minsize\x = *slider\obj\padding\left + *slider\obj\padding\right
;  *slider\obj\minsize\y = *slider\obj\padding\top  + *slider\obj\padding\bottom

  *slider\knobSize\x = *engine\defSize[#TUISIZE_KNOB]
  *slider\knobSize\y = *engine\defSize[#TUISIZE_KNOB]

  Select *slider\orientation
    Case #TUIORIENT_HORIZONTAL
      *slider\obj\minsize\x  = *slider\knobSize\x
      *slider\obj\minsize\y  = *engine\defSize[#TUISIZE_KNOB]
    Case #TUIORIENT_VERTICAL
      *slider\obj\minsize\x  = *engine\defSize[#TUISIZE_KNOB]
      *slider\obj\minsize\y  = *slider\knobSize\y
  End Select

  If *slider\obj\string
    text.s = _ntui_CreateSliderLabel{*slider,*slider\minValue}
    *tmp.str=Null
    str_Write{&*tmp,text}
    DEFTYPE.tuiRect tx
    _ntui_GetTextRect{*engine,*tmp,tx,*slider\obj\flags,*rp}
    xsmin.l = !tuiRectWidth{tx} + 1

    text.s = _ntui_CreateSliderLabel{*slider,*slider\maxValue}
    str_Write{&*tmp,text}
    _ntui_GetTextRect{*engine,*tmp,tx,*slider\obj\flags,*rp}
    xsmax.l = !tuiRectWidth{tx} + 1
    str_Free{&*tmp}
    If xsmin>xsmax Then xsmax=xsmin

    *slider\labelSize\x  = xsmax
    *slider\labelSize\y  = *engine\defSize[#TUISIZE_INLINE]

    Select *slider\orientation
      Case #TUIORIENT_HORIZONTAL
        *slider\obj\minsize\x + *slider\labelSize\x
        If (*slider\obj\minsize\y< *slider\labelSize\y) Then  *slider\obj\minsize\y =  *slider\labelSize\y

      Case #TUIORIENT_VERTICAL
        *slider\obj\minsize\y + *slider\labelSize\y
        If (*slider\obj\minsize\x< *slider\labelSize\x) Then  *slider\obj\minsize\x =  *slider\labelSize\x
    End Select

    If *slider\obj\flags&#TUIF_UNDERLINED
      _ntui_GetBorderSize{*engine,#TUIBORDER_BUTTON,*slider\obj\flags,bs.tuiRect}
      *slider\knobSize\x     = *slider\labelSize\x+ !tuiBorderWidth{bs},*slider\labelSize\y+ !tuiBorderHeight{bs}
      *slider\labelSize\x    = 0,0
      *slider\obj\minsize\x  = *slider\knobSize\x
      *slider\obj\minsize\y  = *slider\knobSize\y
    End If
  Else
    *slider\labelSize\x = 0
    *slider\labelSize\y = 0
  End If

  _ntui_GetBorderSize{*engine,*slider\obj\borderType,*slider\obj\flags,*slider\obj\border}
  *slider\obj\minsize\x + !tuiBorderWidth{*slider\obj\border}  +  !tuiBorderWidth{*slider\obj\padding}
  *slider\obj\minsize\y + !tuiBorderHeight{*slider\obj\border} +  !tuiBorderHeight{*slider\obj\padding}

End Statement
!_MakeGlobalFuncPointer{_ntui_CalculateSliderMinSize,{Null,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawSlider {*slider.tuiSlider,*rp.RastPort}                 /
;/                                                                             /
;/ Description:                                                                /
;/ Draw the slider in all its beauty                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *slider.tuiSlider    : ???                                             /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawSlider:
Statement _ntui_DrawSlider{*slider.tuiSlider,*rp.RastPort,*rpclip.tuiRect}
  !_ASSERT{*slider}
  !_ASSERT{*slider\obj\classID=#TUICLASS_SLIDER}
  *engine.tuiEngine = *slider\obj\engine
  *tui.tuiObject = *slider\obj
  !_ASSERT{*engine}

  If (*slider\obj\borderType=#TUIBORDER_NONE)
    containerPen.l = #TUIPEN_TRANSPARENT;_ntui_GetBGTuiPen{*slider}
  Else
    If (*slider\obj\flags&#TUIF_DISABLED)
      containerPen = #TUIPEN_BACKGROUND
    Else
      containerPen = #TUIPEN_HALFSHADOW
    End If
  End If


  ;/* draw the border */
  If (*slider\obj\borderType><#TUIBORDER_NONE)
    If ntui_DrawBorder{*engine,*rp,*tui\bbox,*tui\borderType,*tui\flags} Then containerPen=#TUIPEN_TRANSPARENT
  End If

  flags.l = (*slider\obj\flags&(#TUIF_DISABLED|#TUIF_MOVER|#TUIF_FOCUS))

  ;/* get the colors */
  If *slider\grabbed;*slider\obj\flags&#TUIF_ACTIVE ;AND False
    bgTuiPen.l = #TUIPEN_MARKER
    fgTuiPen.l = #TUIPEN_ACTIVETEXT
    flags.l | #TUIF_ACTIVE
  Else
    bgTuiPen.l = #TUIPEN_HALFSHINE
    fgTuiPen.l = #TUIPEN_TEXT
  End If

  If (*slider\obj\flags&#TUIF_DISABLED)
    sliceBright.l = #TUIPEN_HALFSHINE
    sliceDark.l   = #TUIPEN_HALFSHADOW
  Else
    sliceBright.l = #TUIPEN_HALFSHINE
    sliceDark.l   = #TUIPEN_SHADOW
  End If

  ;/* calculate layout */
  cbox.tuiRect\left = *tui\cbox\left,*tui\cbox\top,*tui\cbox\right,*tui\cbox\bottom
  kbox.tuiRect\left = *tui\cbox\left,*tui\cbox\top,*tui\cbox\right,*tui\cbox\bottom
  lbox.tuiRect\left = *tui\cbox\left,*tui\cbox\top,*tui\cbox\right,*tui\cbox\bottom

  Select *slider\orientation
    Case #TUIORIENT_HORIZONTAL
      lbox\left    = lbox\right - *slider\labelSize\x +1
      cbox\right   = lbox\left - 1
      ;sliderSize.l = !tuiRectWidth{cbox} - *slider\knobSize\x
      ;kbox\left    =
      !_ntui_HSlider_Value2Pixel{kbox\left,*tui\value} ;,sliderSize}
      kbox\left + cbox\left
      kbox\right   = kbox\left+*slider\knobSize\x-1

    Case #TUIORIENT_VERTICAL
      lbox\top     = lbox\bottom - *slider\labelSize\y +1
      cbox\bottom  = lbox\top - 1
;      sliderSize.l = !tuiRectHeight{cbox} - *slider\knobSize\y
      ;kbox\top     =
      !_ntui_VSlider_Value2Pixel{kbox\top,*tui\value} ;,sliderSize}
      kbox\top + cbox\top
      kbox\bottom  = kbox\top+*slider\knobSize\y-1

  End Select

  ;/* draw the container */
  If kbox\left  <*tui\cbox\left   Then kbox\left   = *tui\cbox\left
  If kbox\top   <*tui\cbox\top    Then kbox\top    = *tui\cbox\top
  If kbox\right >*tui\cbox\right  Then kbox\right  = *tui\cbox\right
  If kbox\bottom>*tui\cbox\bottom Then kbox\bottom = *tui\cbox\bottom

  If containerPen>=0
    SetAPen_ *rp,*engine\pen[containerPen]
    If kbox\left  >cbox\left   Then RectFill_ *rp,cbox\left   ,cbox\top     ,kbox\left-1 ,cbox\bottom
    If kbox\top   >cbox\top    Then RectFill_ *rp,cbox\left   ,cbox\top     ,cbox\right  ,kbox\top-1
    If kbox\right <cbox\right  Then RectFill_ *rp,kbox\right+1,cbox\top     ,cbox\right  ,cbox\bottom
    If kbox\bottom<cbox\bottom Then RectFill_ *rp,cbox\left   ,kbox\bottom+1,cbox\right  ,cbox\bottom
  End If

  xm.l = (cbox\left+cbox\right )/2
  ym.l = (cbox\top +cbox\bottom)/2

  Select *slider\orientation
    Case #TUIORIENT_HORIZONTAL

      SetAPen_ *rp,*engine\pen[sliceBright]
      Move_ *rp,cbox\left +*slider\knobSize\x/2+1,ym-1
      Draw_ *rp,cbox\left +*slider\knobSize\x/2+1,ym+2

      Move_ *rp,cbox\left +*slider\knobSize\x/2,ym+1
      Draw_ *rp,cbox\right-*slider\knobSize\x/2,ym+1

      Move_ *rp,cbox\right-*slider\knobSize\x/2+1,ym-1
      Draw_ *rp,cbox\right-*slider\knobSize\x/2+1,ym+2

      ;WritePixel_ *rp,x1+*slider\knobSize/2,ym+2
      ;WritePixel_ *rp,x2-*slider\knobSize/2,ym+2

      SetAPen_ *rp,*engine\pen[sliceDark]
      Move_ *rp,cbox\left +*slider\knobSize\x/2,ym
      Draw_ *rp,cbox\right-*slider\knobSize\x/2,ym

      Move_ *rp,cbox\right-*slider\knobSize\x/2,ym-1
      Draw_ *rp,cbox\right-*slider\knobSize\x/2,ym+1

      Move_ *rp,cbox\left+*slider\knobSize\x/2,ym-1
      Draw_ *rp,cbox\left+*slider\knobSize\x/2,ym+1

    Case #TUIORIENT_VERTICAL

      SetAPen_ *rp,*engine\pen[sliceBright]
      Move_ *rp,xm-1,cbox\top+*slider\knobSize\y/2+1
      Draw_ *rp,xm+2,cbox\top+*slider\knobSize\y/2+1

      Move_ *rp,xm+1,cbox\top+*slider\knobSize\y/2
      Draw_ *rp,xm+1,cbox\bottom-*slider\knobSize\y/2

      Move_ *rp,xm-1,cbox\bottom-*slider\knobSize\y/2+1
      Draw_ *rp,xm+2,cbox\bottom-*slider\knobSize\y/2+1

      ;WritePixel_ *rp,xm+2,cbox\top+*slider\knobSize/2
      ;WritePixel_ *rp,xm+2,cbox\bottom-*slider\knobSize/2

      SetAPen_ *rp,*engine\pen[sliceDark]
      Move_ *rp,xm,cbox\top+*slider\knobSize\y/2
      Draw_ *rp,xm,cbox\bottom-*slider\knobSize\y/2

      Move_ *rp,xm-1,cbox\bottom-*slider\knobSize\y/2
      Draw_ *rp,xm+1,cbox\bottom-*slider\knobSize\y/2

      Move_ *rp,xm-1,cbox\top+*slider\knobSize\y/2
      Draw_ *rp,xm+1,cbox\top+*slider\knobSize\y/2

  End Select

  ;/* draw the knob */

  _ntui_GetBorderSize{*engine,#TUIBORDER_BUTTON,*slider\obj\flags,bs.tuiRect}
  !tuiRemBorder{ibox.tuiRect,kbox.tuiRect,bs}
  bgTuiPen = _ntui_DrawBG{*engine,*rp,kbox,ibox,*rpclip,Null,bgTuiPen,#TUIBORDER_BUTTON,flags,#TUIORIENT_HORIZONTAL}

  If (*slider\obj\flags&#TUIF_UNDERLINED><0) AND (*slider\obj\string><Null)
    text.s = _ntui_CreateSliderLabel{*slider,*slider\obj\value}
    *tmp.str = Null
    str_Write{&*tmp,text}
    _ntui_Print{*engine,*tmp,kbox,kbox,*slider\obj\flags-#TUIF_UNDERLINED,*rp,fgTuiPen,bgTuiPen}
    str_Free{&*tmp}
  Else
    If bgTuiPen>=0
      If *slider\obj\engine\fillStyle=0
        SetAPen_ *rp,*engine\pen[bgTuiPen]
        RectFill_ *rp,kbox\left,kbox\top,kbox\right,kbox\bottom
      Else
        _ntui_DrawGradientBox{*slider\obj\engine,*rp,kbox,bgTuiPen,*slider\orientation}
      End If
    End If

    Select *slider\orientation
      Case #TUIORIENT_HORIZONTAL
        kx.l = (kbox\left+kbox\right)/2
        ky1.l = kbox\top  + 4
        ky2.l = kbox\bottom - 4

        If (!tuiRectWidth{kbox}>8)
          SetAPen_ *rp,*engine\pen[#TUIPEN_HALFSHADOW]
          Move_ *rp,kx    , ky1
          Draw_ *rp,kx    , ky2

          SetAPen_ *rp,*engine\pen[#TUIPEN_WHITE]
          Move_ *rp,kx +1 , ky1
          Draw_ *rp,kx +1 , ky2
        End If

      Case #TUIORIENT_VERTICAL
        kx1.l = kbox\left  + 4
        kx2.l = kbox\right - 4
        ky.l = (kbox\top+kbox\bottom)/2

        If (!tuiRectHeight{kbox}>8)
          SetAPen_ *rp,*engine\pen[#TUIPEN_HALFSHADOW]
          Move_ *rp,kx1 , ky
          Draw_ *rp,kx2 , ky

          SetAPen_ *rp,*engine\pen[#TUIPEN_WHITE]
          Move_ *rp,kx1 , ky +1
          Draw_ *rp,kx2 , ky +1
        End If

    End Select
  End If

  ;/* draw the label */
  If *slider\obj\string><Null AND *slider\labelSize\x>0
    text.s = _ntui_CreateSliderLabel{*slider,*slider\obj\value}
    *tmp.str = Null
    str_Write{&*tmp,text}
    _ntui_Print{*engine,*tmp,lbox,lbox,*slider\obj\flags,*rp,#TUIPEN_TEXT,#TUIPEN_HALFSHINE}
    str_Free{&*tmp}
  End If

End Statement
!_MakeGlobalFuncPointer{_ntui_DrawSlider,{Null,Null,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeSlider {*slider.tuiSlider}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * free everything special that we allocated for the Slider */               /
;/ If *slider\img Then ntui_FreeImage{*slider\img}  : *slider\img =:: /
;/  Null                                                                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *slider.tuiSlider    : ???                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitSlider:
Statement _ntui_DeinitSlider{*slider.tuiSlider}
  !_ASSERT{*slider}
  !_ASSERT{*slider\obj\classID=#TUICLASS_SLIDER}
  ;If *slider\img Then ntui_FreeImage{*slider\img}  : *slider\img = Null
End Statement
!_MakeGlobalFuncPointer{_ntui_DeinitSlider,{Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_VSlider {value.l,minValue.l,maxValue.l,@notify.l,:: /
;/ @help.s,@flags.l,@userID.l}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ Create function for tuiSlider.                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - value.l    : ???                                                          /
;/ - minValue.l    : ???                                                       /
;/ - maxValue.l    : ???                                                       /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_VSlider:
Function.tuiSlider ntui_VSlider{*tagList.TagItem}

  flags.l = #TUIF_CENTER|#TUIF_MIDDLE|#TUIF_FIXWIDTH|#TUIF_WANTTAB
  *slider.tuiSlider = (.tuiSlider)_ntui_CreateObject{#TUICLASS_SLIDER,SizeOf.tuiSlider,flags}
  If *slider

    *slider\obj\borderType       = #TUIBORDER_NONE
    *slider\obj\padding\left     = 0,0,0,0
    *slider\obj\gradient         = #TUIORIENT_VERTICAL

    *slider\minValue             = 0               ; minimum value of slider
    *slider\maxValue             = 0               ; maximum value of slider
    *slider\step_                = 1                  ; step
    *slider\orientation          = #TUIORIENT_VERTICAL
    *slider\grab\x               = 0,0
    *slider\grabValue            = 0
    *slider\grabbed              = False
    *slider\knobSize\x           = 0,0
    *slider\labelSize\x          = 0,0

    *slider\obj\Draw             = *_ntui_DrawSlider
    *slider\obj\Layout           = Null;*_ntui_LayoutSlider
    *slider\obj\DispatchEvent    = *_ntui_DispatchSliderEvent
    *slider\obj\CalculateMinSize = *_ntui_CalculateSliderMinSize
    *slider\obj\Deinit           = *_ntui_DeinitSlider
    *slider\obj\SetAttr          = *_ntui_SetSliderAttr
    *slider\obj\GetAttr          = *_ntui_GetSliderAttr

    !tuiInitNotifyHandler{*slider\onChange}

    If *tagList Then ntui_SetAttrs{*slider,*tagList}

  End If

  Function Return *slider

End Function
!_MakeGlobalFuncPointer{ntui_VSlider,{Null}}


ntui_HSlider:
Function.tuiSlider ntui_HSlider{*tagList.TagItem}

  *slider.tuiSlider = ntui_VSlider{*tagList}
  If *slider
    *slider\obj\gradient         = #TUIORIENT_HORIZONTAL
    _ntui_SetSliderAttr{*slider,#TUISLA_ORIENTATION ,#TUIORIENT_HORIZONTAL}
  End If

  Function Return *slider

End Function
!_MakeGlobalFuncPointer{ntui_HSlider,{Null}}


Statement ntui_InitSliderClass{}

  classID.l = ntui_RegisterClass{"vslider",(.tuiFunc)*ntui_VSlider,Null}
  ntui_RegisterAttr{classID,"orientation",#TUISLA_ORIENTATION,#TUIAT_INT,#TUIORIENT_VERTICAL,#TUIORIENT_HORIZONTAL}
  ntui_RegisterAttr{classID,"value"      ,#TUISLA_VALUE       ,#TUIAT_INT   ,0,0}
  ntui_RegisterAttr{classID,"minvalue"   ,#TUISLA_MINVALUE    ,#TUIAT_INT   ,0,0}
  ntui_RegisterAttr{classID,"maxvalue"   ,#TUISLA_MAXVALUE    ,#TUIAT_INT   ,0,0}
  ntui_RegisterAttr{classID,"step"       ,#TUISLA_STEP        ,#TUIAT_INT   ,0,0}
  ntui_RegisterAttr{classID,"label"      ,#TUISLA_LABEL       ,#TUIAT_STRING,0,0}
  ntui_RegisterAttr{classID,"onchange"   ,#TUISLA_ONCHANGE    ,#TUIAT_STRING,0,0}
  ntui_RegisterAttr{classID,"onchangecb" ,#TUISLA_ONCHANGECB  ,#TUIAT_PTR   ,0,0}

  classID.l = ntui_RegisterClass{"hslider",(.tuiFunc)*ntui_HSlider,Null}
  ntui_RegisterAttr{classID,"value"      ,#TUISLA_VALUE       ,#TUIAT_INT   ,0,0}
  ntui_RegisterAttr{classID,"minvalue"   ,#TUISLA_MINVALUE    ,#TUIAT_INT   ,0,0}
  ntui_RegisterAttr{classID,"maxvalue"   ,#TUISLA_MAXVALUE    ,#TUIAT_INT   ,0,0}
  ntui_RegisterAttr{classID,"step"       ,#TUISLA_STEP        ,#TUIAT_INT   ,0,0}
  ntui_RegisterAttr{classID,"label"      ,#TUISLA_LABEL       ,#TUIAT_STRING,0,0}
  ntui_RegisterAttr{classID,"onchange"   ,#TUISLA_ONCHANGE    ,#TUIAT_STRING,0,0}
  ntui_RegisterAttr{classID,"onchangecb" ,#TUISLA_ONCHANGECB  ,#TUIAT_PTR   ,0,0}
  ntui_RegisterAttr{classID,"orientation",#TUISLA_ORIENTATION,#TUIAT_INT,#TUIORIENT_VERTICAL,#TUIORIENT_HORIZONTAL}

End Statement

ntui_InitSliderClass{}
