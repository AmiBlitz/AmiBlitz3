; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 571
; CursorColumn    = 49
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_slider.include                                                   /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
NEWTYPE.tuiSlider
obj.tuiObject            ; tui object header
minValue.l               ; minimum value of slider
maxValue.l               ; maximum value of slider
step_.l                  ; step
orientation.l
grab.tuiPixel
grabValue.l
grabbed.l
knobSize.tuiPixel
labelSize.tuiPixel
subTypeID.l
End NEWTYPE

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !_ntui_VSlider_Value2Pixel                                          /
;/                                                                             /
;/ Description:                                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _ntui_VSlider_Value2Pixel ; {value, size}
(*tuiSlider\maxValue -(`1)-*tuiSlider\minValue) * (!tuiRectHeight{*tuiSlider\obj\cbox} - *tuiSlider\labelSize\y - *tuiSlider\knobSize\y)  / (*tuiSlider\maxValue - *tuiSlider\minValue)
End Macro

Macro _ntui_HSlider_Value2Pixel ; {value, size}
(((`1)-*tuiSlider\minValue) * (!tuiRectWidth{*tuiSlider\obj\cbox} - *tuiSlider\labelSize\x - *tuiSlider\knobSize\x) )/ (*tuiSlider\maxValue - *tuiSlider\minValue)
End Macro
 

Macro _ntui_VSlider_Pixel2Value ; {pixel, size}
((`1)) * (*tuiSlider\maxValue - *tuiSlider\minValue+1) / (!tuiRectHeight{*tuiSlider\obj\cbox}- *tuiSlider\labelSize\y - *tuiSlider\knobSize\y) + *tuiSlider\minValue
End Macro

Macro _ntui_HSlider_Pixel2Value ; {pixel, size}
((`1)) * (*tuiSlider\maxValue - *tuiSlider\minValue+1) / (!tuiRectWidth{*tuiSlider\obj\cbox} - *tuiSlider\labelSize\x - *tuiSlider\knobSize\x) + *tuiSlider\minValue
End Macro
 

#TUISLA_BASE       = #TUIA_USER
#TUISLA_VALUE      = #TUIA_VALUE       ; top value of Slider
#TUISLA_MINVALUE   = 0 | #TUISLA_BASE   ; visible logic units
#TUISLA_MAXVALUE   = 1 | #TUISLA_BASE   ; total logic units
#TUISLA_STEPSIZE   = 2 | #TUISLA_BASE

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_UpdateSlider {*tuiSlider.tuiSlider,value.l,minvalue.l,maxva:: /
;/ lue.l}                                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ Update the slider values.                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiSlider.tuiSlider    : ???                                             /
;/ - value.l       : ???                                                          /
;/ - minvalue.l    : ???                                                       /
;/ - maxvalue.l    : ???                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_UpdateSlider{*tuiSlider.tuiSlider,value.l,minvalue.l,maxvalue.l}
  !_ASSERT{*tuiSlider}
  !_ASSERT{*tuiSlider\obj\typeID=#TUIOBJ_SLIDER}

  If value><*tuiSlider\obj\value OR minvalue><*tuiSlider\minValue OR maxvalue><*tuiSlider\maxValue
    If maxvalue<minvalue Then x.l=minvalue:minvalue=maxvalue:maxvalue=x
    If value>maxvalue Then value=maxvalue
    If value<minvalue Then value=minvalue
    *tuiSlider\obj\value = value
    *tuiSlider\minValue  = minvalue
    *tuiSlider\maxValue  = maxvalue
    ntui_Refresh{*tuiSlider}
  End If

End Statement


_ntui_SetSliderAttr:
Function.w _ntui_SetSliderAttr{*tuiSlider.tuiSlider,ti_Tag.l,ti_Data.l}
  !_ASSERT{*tuiSlider}
  !_ASSERT{*tuiSlider\obj\typeID=#TUIOBJ_SLIDER}

  done.w = True
  Select ti_Tag
    Case #TUISLA_VALUE
      _ntui_UpdateSlider{*tuiSlider,ti_Data,*tuiSlider\minValue,*tuiSlider\maxValue}

    Case #TUISLA_MINVALUE
      _ntui_UpdateSlider{*tuiSlider,*tuiSlider\obj\value,ti_Data,*tuiSlider\maxValue}

    Case #TUISLA_MAXVALUE
      _ntui_UpdateSlider{*tuiSlider,*tuiSlider\obj\value,*tuiSlider\minValue,ti_Data}

    Default
      done=False

  End Select

  Function Return done
End Function


_ntui_GetSliderAttr:
Function.w _ntui_GetSliderAttr{*tuiSlider.tuiSlider,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*tuiSlider}
  !_ASSERT{*tuiSlider\obj\typeID=#TUIOBJ_SLIDER}

  done.w = True
  Select ti_Tag
    Case #TUISLA_VALUE
      *ti_Data\l = *tuiSlider\obj\value

    Case #TUISLA_MINVALUE
      *ti_Data\l = *tuiSlider\minValue

    Case #TUISLA_MAXVALUE
      *ti_Data\l = *tuiSlider\maxValue

    Default
      done=False

  End Select

  Function Return done
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !_ntui_Slider_Clip                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _ntui_Slider_Clip ;
If ((`1)>*tuiSlider\maxValue) Then `1 = *tuiSlider\maxValue
If ((`1)<*tuiSlider\minValue) Then `1 = *tuiSlider\minValue
End Macro

Function.s _ntui_CreateSliderLabel{*tuiSlider.tuiSlider,value.l}
  !_ASSERT{*tuiSlider}
  !_ASSERT{*tuiSlider\obj\typeID=#TUIOBJ_SLIDER}

  If *tuiSlider\obj\string
    text.s = str_Read{&*tuiSlider\obj\string}
    text = Replace$(text,"%d",Str$(value))
    text = Replace$(text,"%m",Str$(*tuiSlider\minValue))
    text = Replace$(text,"%M",Str$(*tuiSlider\maxValue))
  Else
    text = ""
  End If

Function Return text
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = _ntui_DispatchSlider {*tuiSlider.tuiSlider,*tuiEvent.tui:: /
;/ Event}                                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * do what happens if the user operates the Slider */                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiSlider.tuiSlider    : ???                                             /
;/ - *tuiEvent.tuiEvent    : ???                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DispatchSliderEvent:
Function.w _ntui_DispatchSliderEvent{*tuiSlider.tuiSlider,*tuiEvent.tuiEvent}
  !_ASSERT{*tuiSlider}
  !_ASSERT{*tuiSlider\obj\typeID=#TUIOBJ_SLIDER}
  !_ASSERT{*tuiEvent}
  done.w = False

  Select *tuiEvent\evID
    Case #TUIEV_MOUSEDOWN:
      If *tuiEvent\value=0
;        If !tuiRectHit{*tui\cbox,*tuiEvent\pos\x,*tuiEvent\pos\y}
        If ntui_HitObject{*tuiSlider,*tuiEvent\pos\x,*tuiEvent\pos\y}
          done=True
          ntui_SetFocus{*tuiSlider\obj\tuiEngine,*tuiSlider}
          *tuiSlider\obj\flags | #TUIF_ACTIVE
          If (*tuiSlider\obj\flags&#TUIF_IMMIDIATE)
            *tuiEvent\notify = *tuiSlider\obj\notify
          End If

          *tuiSlider\grab\x = *tuiEvent\pos\x - *tuiSlider\obj\cbox\left
          *tuiSlider\grab\y = *tuiEvent\pos\y - *tuiSlider\obj\cbox\top
          *tuiSlider\grabValue = *tuiSlider\obj\value
          *tuiSlider\grabbed = True

          Select *tuiSlider\orientation
            Case #TUIORIENT_HORIZONTAL
              kx1.l = !_ntui_HSlider_Value2Pixel{*tuiSlider\grabValue}
              kx2.l = kx1 + *tuiSlider\knobSize\x-1
              If *tuiSlider\grab\x<kx1
                _ntui_SetSliderAttr{*tuiSlider,#TUISLA_VALUE,*tuiSlider\obj\value-*tuiSlider\step_}
                *tuiSlider\grabbed = False
              End If
              If *tuiSlider\grab\x>kx2
                _ntui_SetSliderAttr{*tuiSlider,#TUISLA_VALUE,*tuiSlider\obj\value+*tuiSlider\step_}
                *tuiSlider\grabbed = False
              End If

            Case #TUIORIENT_VERTICAL
              ky1.l = !_ntui_VSlider_Value2Pixel{*tuiSlider\grabValue}
              ky2.l = ky1 + *tuiSlider\knobSize\y-1
              If *tuiSlider\grab\y<ky1
                _ntui_SetSliderAttr{*tuiSlider,#TUISLA_VALUE,*tuiSlider\obj\value+*tuiSlider\step_}
                *tuiSlider\grabbed = False
              End If
              If *tuiSlider\grab\y>ky2
                _ntui_SetSliderAttr{*tuiSlider,#TUISLA_VALUE,*tuiSlider\obj\value-*tuiSlider\step_}
                *tuiSlider\grabbed = False
              End If
          End Select
          ntui_Refresh{*tuiSlider}
        End If
      End If

    Case #TUIEV_MOUSEUP
      If *tuiEvent\value=0
        If (*tuiSlider\obj\flags&#TUIF_IMMIDIATE)=0
          *tuiEvent\notify = *tuiSlider\obj\notify
        End If
        *tuiSlider\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
        *tuiSlider\grabbed=False
        done=True
        ntui_Refresh{*tuiSlider}
      End If

    Case #TUIEV_VSCROLL
      _ntui_SetSliderAttr{*tuiSlider,#TUISLA_VALUE,*tuiSlider\obj\value - *tuiSlider\step_* *tuiEvent\value}
      done=True

    Case #TUIEV_HSCROLL
      _ntui_SetSliderAttr{*tuiSlider,#TUISLA_VALUE,*tuiSlider\obj\value - *tuiSlider\step_* *tuiEvent\value}
      done=True

    Case #TUIEV_KEYDOWN
      Select *tuiEvent\value
        Case #RAWKEY_LEFT      : _ntui_SetSliderAttr{*tuiSlider,#TUISLA_VALUE,*tuiSlider\obj\value - *tuiSlider\step_} : done=True
        Case #RAWKEY_UP        : _ntui_SetSliderAttr{*tuiSlider,#TUISLA_VALUE,*tuiSlider\obj\value + *tuiSlider\step_} : done=True
        Case #RAWKEY_RIGHT     : _ntui_SetSliderAttr{*tuiSlider,#TUISLA_VALUE,*tuiSlider\obj\value + *tuiSlider\step_} : done=True
        Case #RAWKEY_DOWN      : _ntui_SetSliderAttr{*tuiSlider,#TUISLA_VALUE,*tuiSlider\obj\value - *tuiSlider\step_} : done=True
        Case #RAWKEY_WHEELUP   : _ntui_SetSliderAttr{*tuiSlider,#TUISLA_VALUE,*tuiSlider\obj\value + *tuiSlider\step_} : done=True
        Case #RAWKEY_WHEELDOWN : _ntui_SetSliderAttr{*tuiSlider,#TUISLA_VALUE,*tuiSlider\obj\value - *tuiSlider\step_} : done=True
      End Select

    Case #TUIEV_MOUSEMOVE
      If *tuiSlider\obj\flags&#TUIF_ACTIVE
        If *tuiSlider\grabbed
          Select *tuiSlider\orientation
            Case #TUIORIENT_HORIZONTAL
              newPos.l   = *tuiEvent\pos\x - *tuiSlider\obj\cbox\left - *tuiSlider\grab\x
              newValue.l = !_ntui_HSlider_Pixel2Value{newPos} + (*tuiSlider\grabValue-*tuiSlider\minValue)
            Case #TUIORIENT_VERTICAL
              newPos.l   = *tuiEvent\pos\y - *tuiSlider\obj\cbox\top - *tuiSlider\grab\y
              newValue.l = !_ntui_VSlider_Pixel2Value{-newPos} + (*tuiSlider\grabValue-*tuiSlider\minValue)

          End Select

          If (*tuiSlider\obj\flags&#TUIF_IMMIDIATE) Then *tuiEvent\notify = *tuiSlider\obj\notify
          _ntui_SetSliderAttr{*tuiSlider,#TUISLA_VALUE,newValue}
        End If
        done=True
      End If

  End Select

  If done
    If (*tuiEvent\notify><#NOTIFY_NOTHING)
      *tuiEvent\tuiObject = *tuiSlider
      _ntui_QueueEvent{*tuiSlider\obj\tuiEngine\outQ,*tuiEvent}
    Else
      _ntui_DestroyEvent{*tuiEvent}
    End If
  End If


  Function Return done
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetSliderMinSize {*tuiSlider.tuiSlider,*rp.RastP:: /
;/ ort}                                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * calculate the minimum size for the Slider */                              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiSlider.tuiSlider    : ???                                             /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_CalculateSliderMinSize:
Function.l _ntui_CalculateSliderMinSize{*tuiSlider.tuiSlider,*rp.RastPort}
  !_ASSERT{*tuiSlider}
  !_ASSERT{*rp}
  !_ASSERT{*tuiSlider\obj\typeID=#TUIOBJ_SLIDER}
  *tuiEngine.tuiEngine = *tuiSlider\obj\tuiEngine
  !_ASSERT{*tuiEngine}

;  *tuiSlider\obj\minsize\x = *tuiSlider\obj\padding\left + *tuiSlider\obj\padding\right
;  *tuiSlider\obj\minsize\y = *tuiSlider\obj\padding\top  + *tuiSlider\obj\padding\bottom

  *tuiSlider\knobSize\x = *tuiEngine\defSize[#TUISIZE_KNOB]
  *tuiSlider\knobSize\y = *tuiEngine\defSize[#TUISIZE_KNOB]

  Select *tuiSlider\orientation
    Case #TUIORIENT_HORIZONTAL
      *tuiSlider\obj\minsize\x  = *tuiSlider\knobSize\x
      *tuiSlider\obj\minsize\y  = *tuiEngine\defSize[#TUISIZE_KNOB]
    Case #TUIORIENT_VERTICAL
      *tuiSlider\obj\minsize\x  = *tuiEngine\defSize[#TUISIZE_KNOB]
      *tuiSlider\obj\minsize\y  = *tuiSlider\knobSize\y
  End Select

  If *tuiSlider\obj\string
    text.s = _ntui_CreateSliderLabel{*tuiSlider,*tuiSlider\minValue}
    *tmp.str=!_NULL
    str_Write{&*tmp,text}
    DEFTYPE.tuiRect tx
    _ntui_GetTextRect{*tuiEngine,*tmp,tx,*tuiSlider\obj\flags,*rp}
    xsmin.l = !tuiRectWidth{tx} + 1

    text.s = _ntui_CreateSliderLabel{*tuiSlider,*tuiSlider\maxValue}
    str_Write{&*tmp,text}
    _ntui_GetTextRect{*tuiEngine,*tmp,tx,*tuiSlider\obj\flags,*rp}
    xsmax.l = !tuiRectWidth{tx} + 1
    str_Free{&*tmp}
    If xsmin>xsmax Then xsmax=xsmin

    *tuiSlider\labelSize\x  = xsmax
    *tuiSlider\labelSize\y  = *tuiEngine\defSize[#TUISIZE_INLINE]

    Select *tuiSlider\orientation
      Case #TUIORIENT_HORIZONTAL
        *tuiSlider\obj\minsize\x + *tuiSlider\labelSize\x
        If (*tuiSlider\obj\minsize\y< *tuiSlider\labelSize\y) Then  *tuiSlider\obj\minsize\y =  *tuiSlider\labelSize\y

      Case #TUIORIENT_VERTICAL
        *tuiSlider\obj\minsize\y + *tuiSlider\labelSize\y
        If (*tuiSlider\obj\minsize\x< *tuiSlider\labelSize\x) Then  *tuiSlider\obj\minsize\x =  *tuiSlider\labelSize\x
    End Select

    If *tuiSlider\obj\flags&#TUIF_UNDERLINED
      ntui_GetBorderSize{*tuiEngine,#TUIBORDER_BUTTON,bs.tuiRect}
      *tuiSlider\knobSize\x     = *tuiSlider\labelSize\x+bs\left+bs\right,*tuiSlider\labelSize\y+bs\top+bs\bottom
      *tuiSlider\labelSize\x    = 0,0
      *tuiSlider\obj\minsize\x  = *tuiSlider\knobSize\x
      *tuiSlider\obj\minsize\y  = *tuiSlider\knobSize\y
    End If
  Else
    *tuiSlider\labelSize\x = 0
    *tuiSlider\labelSize\y = 0
  End If

  ntui_GetBorderSize{*tuiEngine,*tuiSlider\obj\borderType,*tuiSlider\obj\border}
  *tuiSlider\obj\minsize\x + *tuiSlider\obj\border\left + *tuiSlider\obj\border\right
  *tuiSlider\obj\minsize\y + *tuiSlider\obj\border\top  + *tuiSlider\obj\border\bottom

  Function Return *tuiSlider\obj\minsize
End Function




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawSlider {*tuiSlider.tuiSlider,*rp.RastPort}                 /
;/                                                                             /
;/ Description:                                                                /
;/ Draw the slider in all its beauty                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiSlider.tuiSlider    : ???                                             /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawSlider:
Statement _ntui_DrawSlider{*tuiSlider.tuiSlider,*rp.RastPort}
  !_ASSERT{*tuiSlider}
  !_ASSERT{*tuiSlider\obj\typeID=#TUIOBJ_SLIDER}
  *tuiEngine.tuiEngine = *tuiSlider\obj\tuiEngine
  *tui.tuiObject = *tuiSlider\obj
  !_ASSERT{*tuiEngine}

  ;/* draw the border */
  If (*tuiSlider\obj\borderType><#TUIBORDER_NONE)
    ntui_DrawBorder{*tuiEngine,*rp,*tui\bbox,*tui\borderType,*tui\flags}
  End If

  flags.l = (*tuiSlider\obj\flags&(#TUIF_DISABLED|#TUIF_MOVER|#TUIF_FOCUS))

  ;/* get the colors */
  If *tuiSlider\grabbed;*tuiSlider\obj\flags&#TUIF_ACTIVE ;AND False
    bgTuiPen.l = #TUIPEN_MARKER
    fgTuiPen.l = #TUIPEN_ACTIVETEXT
    flags.l | #TUIF_ACTIVE
  Else
    bgTuiPen.l = #TUIPEN_HALFSHINE
    fgTuiPen.l = #TUIPEN_TEXT
  End If

  If (*tuiSlider\obj\borderType=#TUIBORDER_NONE)
    containerPen.l = #TUIPEN_BACKGROUND;_ntui_GetBGTuiPen{*tuiSlider}
  Else
    If (*tuiSlider\obj\flags&#TUIF_DISABLED)
      containerPen = #TUIPEN_BACKGROUND
    Else
      containerPen = #TUIPEN_HALFSHADOW
    End If
  End If

  If (*tuiSlider\obj\flags&#TUIF_DISABLED)
    sliceBright.l = #TUIPEN_HALFSHINE
    sliceDark.l   = #TUIPEN_HALFSHADOW
  Else
    sliceBright.l = #TUIPEN_HALFSHINE
    sliceDark.l   = #TUIPEN_SHADOW
  End If

  ;/* calculate layout */
  cbox.tuiRect\left = *tui\cbox\left,*tui\cbox\top,*tui\cbox\right,*tui\cbox\bottom
  kbox.tuiRect\left = *tui\cbox\left,*tui\cbox\top,*tui\cbox\right,*tui\cbox\bottom
  lbox.tuiRect\left = *tui\cbox\left,*tui\cbox\top,*tui\cbox\right,*tui\cbox\bottom

  Select *tuiSlider\orientation
    Case #TUIORIENT_HORIZONTAL
      lbox\left    = lbox\right - *tuiSlider\labelSize\x +1
      cbox\right   = lbox\left - 1
      sliderSize.l = !tuiRectWidth{cbox} - *tuiSlider\knobSize\x
      kbox\left    = !_ntui_HSlider_Value2Pixel{*tui\value,sliderSize} + cbox\left
      kbox\right   = kbox\left+*tuiSlider\knobSize\x-1

    Case #TUIORIENT_VERTICAL
      lbox\top     = lbox\bottom - *tuiSlider\labelSize\y +1
      cbox\bottom  = lbox\top - 1
      sliderSize.l = !tuiRectHeight{cbox} - *tuiSlider\knobSize\y
      kbox\top     = !_ntui_VSlider_Value2Pixel{*tui\value,sliderSize}+ cbox\top
      kbox\bottom  = kbox\top+*tuiSlider\knobSize\y-1

  End Select

  ;/* draw the container */
  If kbox\left  <*tui\cbox\left   Then kbox\left   = *tui\cbox\left
  If kbox\top   <*tui\cbox\top    Then kbox\top    = *tui\cbox\top
  If kbox\right >*tui\cbox\right  Then kbox\right  = *tui\cbox\right
  If kbox\bottom>*tui\cbox\bottom Then kbox\bottom = *tui\cbox\bottom

  SetAPen_ *rp,*tuiEngine\pen[containerPen]
  If kbox\left  >cbox\left   Then RectFill_ *rp,cbox\left   ,cbox\top     ,kbox\left-1 ,cbox\bottom
  If kbox\top   >cbox\top    Then RectFill_ *rp,cbox\left   ,cbox\top     ,cbox\right  ,kbox\top-1
  If kbox\right <cbox\right  Then RectFill_ *rp,kbox\right+1,cbox\top     ,cbox\right  ,cbox\bottom
  If kbox\bottom<cbox\bottom Then RectFill_ *rp,cbox\left   ,kbox\bottom+1,cbox\right  ,cbox\bottom

  xm.l = (cbox\left+cbox\right )/2
  ym.l = (cbox\top +cbox\bottom)/2

  Select *tuiSlider\orientation
    Case #TUIORIENT_HORIZONTAL

      SetAPen_ *rp,*tuiEngine\pen[sliceBright]
      Move_ *rp,cbox\left +*tuiSlider\knobSize\x/2+1,ym-1
      Draw_ *rp,cbox\left +*tuiSlider\knobSize\x/2+1,ym+2

      Move_ *rp,cbox\left +*tuiSlider\knobSize\x/2,ym+1
      Draw_ *rp,cbox\right-*tuiSlider\knobSize\x/2,ym+1

      Move_ *rp,cbox\right-*tuiSlider\knobSize\x/2+1,ym-1
      Draw_ *rp,cbox\right-*tuiSlider\knobSize\x/2+1,ym+2

      ;WritePixel_ *rp,x1+*tuiSlider\knobSize/2,ym+2
      ;WritePixel_ *rp,x2-*tuiSlider\knobSize/2,ym+2

      SetAPen_ *rp,*tuiEngine\pen[sliceDark]
      Move_ *rp,cbox\left +*tuiSlider\knobSize\x/2,ym
      Draw_ *rp,cbox\right-*tuiSlider\knobSize\x/2,ym

      Move_ *rp,cbox\right-*tuiSlider\knobSize\x/2,ym-1
      Draw_ *rp,cbox\right-*tuiSlider\knobSize\x/2,ym+1

      Move_ *rp,cbox\left+*tuiSlider\knobSize\x/2,ym-1
      Draw_ *rp,cbox\left+*tuiSlider\knobSize\x/2,ym+1

    Case #TUIORIENT_VERTICAL

      SetAPen_ *rp,*tuiEngine\pen[sliceBright]
      Move_ *rp,xm-1,cbox\top+*tuiSlider\knobSize\y/2+1
      Draw_ *rp,xm+2,cbox\top+*tuiSlider\knobSize\y/2+1

      Move_ *rp,xm+1,cbox\top+*tuiSlider\knobSize\y/2
      Draw_ *rp,xm+1,cbox\bottom-*tuiSlider\knobSize\y/2

      Move_ *rp,xm-1,cbox\bottom-*tuiSlider\knobSize\y/2+1
      Draw_ *rp,xm+2,cbox\bottom-*tuiSlider\knobSize\y/2+1

      ;WritePixel_ *rp,xm+2,cbox\top+*tuiSlider\knobSize/2
      ;WritePixel_ *rp,xm+2,cbox\bottom-*tuiSlider\knobSize/2

      SetAPen_ *rp,*tuiEngine\pen[sliceDark]
      Move_ *rp,xm,cbox\top+*tuiSlider\knobSize\y/2
      Draw_ *rp,xm,cbox\bottom-*tuiSlider\knobSize\y/2

      Move_ *rp,xm-1,cbox\bottom-*tuiSlider\knobSize\y/2
      Draw_ *rp,xm+1,cbox\bottom-*tuiSlider\knobSize\y/2

      Move_ *rp,xm-1,cbox\top+*tuiSlider\knobSize\y/2
      Draw_ *rp,xm+1,cbox\top+*tuiSlider\knobSize\y/2

  End Select


  ;/* draw the knob */
  ntui_GetBorderSize{*tuiEngine,#TUIBORDER_BUTTON,bs.tuiRect}
  ntui_DrawButtonBorder{*tuiEngine,*rp,kbox,flags}
  !tuiRemBorder{kbox,kbox,bs}

  If (*tuiSlider\obj\flags&#TUIF_UNDERLINED><0) AND (*tuiSlider\obj\string><!_NULL)
    text.s = _ntui_CreateSliderLabel{*tuiSlider,*tuiSlider\obj\value}
    *tmp.str = !_NULL
    str_Write{&*tmp,text}
    _ntui_Print{*tuiEngine,*tmp,kbox,*tuiSlider\obj\flags-#TUIF_UNDERLINED,*rp,fgTuiPen,bgTuiPen}
    str_Free{&*tmp}
  Else
    SetAPen_ *rp,*tuiEngine\pen[bgTuiPen]
    RectFill_ *rp,kbox\left,kbox\top,kbox\right,kbox\bottom
  End If

  ;/* draw the label */
  If *tuiSlider\obj\string><!_NULL AND *tuiSlider\labelSize\x>0
    text.s = _ntui_CreateSliderLabel{*tuiSlider,*tuiSlider\obj\value}
    *tmp.str = !_NULL
    str_Write{&*tmp,text}
    _ntui_Print{*tuiEngine,*tmp,lbox,*tuiSlider\obj\flags,*rp,#TUIPEN_TEXT,#TUIPEN_HALFSHINE}
    str_Free{&*tmp}
  End If

End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeSlider {*tuiSlider.tuiSlider}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * free everything special that we allocated for the Slider */               /
;/ If *tuiSlider\img Then ntui_FreeImage{*tuiSlider\img}  : *tuiSlider\img =:: /
;/  !_NULL                                                                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiSlider.tuiSlider    : ???                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitSlider:
Statement _ntui_DeinitSlider{*tuiSlider.tuiSlider}
  !_ASSERT{*tuiSlider}
  !_ASSERT{*tuiSlider\obj\typeID=#TUIOBJ_SLIDER}
  ;If *tuiSlider\img Then ntui_FreeImage{*tuiSlider\img}  : *tuiSlider\img = !_NULL
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_VSlider {value.l,minValue.l,maxValue.l,@notify.l,:: /
;/ @help.s,@flags.l,@userID.l}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ Create function for tuiSlider.                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - value.l    : ???                                                          /
;/ - minValue.l    : ???                                                       /
;/ - maxValue.l    : ???                                                       /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_VSlider{value.l,minValue.l,maxValue.l,label.s,@notify.l,@help.s,@flags.l,@userID.l}
If (flags&#TUIF_NOFLAGS) Then flags=0
flags | #TUIF_CENTER|#TUIF_MIDDLE |#TUIF_FIXWIDTH|#TUIF_WANTTAB
If notify=-1 Then notify=#NOTIFY_NOTHING
*tuiSlider.tuiSlider = _ntui_CreateObject{#TUIOBJ_SLIDER,SizeOf.tuiSlider,notify,help,flags,userID}
If *tuiSlider
  If minValue>maxValue Then x.l=minValue:minValue=maxValue:maxValue=x
  _ntui_UpdateSlider{*tuiSlider,value,minValue,maxValue}
  *tuiSlider\step_          = 1
  *tuiSlider\knobSize\x     = 8,8
  If label Then str_Write{&*tuiSlider\obj\string,label}
  *tuiSlider\orientation    = #TUIORIENT_VERTICAL
  *tuiSlider\obj\bindFlags  = #TUIBIND_DELTA|#TUIBIND_VALUE|#TUIBIND_ABLE
  *tuiSlider\obj\borderType = #TUIBORDER_NONE

  !_GetFuncPointer{*tuiSlider\obj\Draw            ,_ntui_DrawSlider,{0,0}}
;  !_GetFuncPointer{*tuiSlider\obj\Layout          ,_ntui_LayoutSlider,{0,0,0}}
  !_GetFuncPointer{*tuiSlider\obj\DispatchEvent   ,_ntui_DispatchSliderEvent,{0,0}}
  !_GetFuncPointer{*tuiSlider\obj\CalculateMinSize,_ntui_CalculateSliderMinSize,{0,0}}
  !_GetFuncPointer{*tuiSlider\obj\Deinit          ,_ntui_DeinitSlider,{0}}
  !_GetFuncPointer{*tuiSlider\obj\SetAttr         ,_ntui_SetSliderAttr,{0,0,0}}
  !_GetFuncPointer{*tuiSlider\obj\GetAttr         ,_ntui_GetSliderAttr,{0,0,0}}

End If
Function Return *tuiSlider
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_HSlider {value.l,minValue.l,maxValue.l,@notify.l,:: /
;/ @help.s,@flags.l,@userID.l}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * create function for tui Slider */                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - value.l    : ???                                                          /
;/ - minValue.l    : ???                                                       /
;/ - maxValue.l    : ???                                                       /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_HSlider{value.l,minValue.l,maxValue.l,label.s,@notify.l,@help.s,@flags.l,@userID.l}
*tuiSlider.tuiSlider = ntui_VSlider{value,minValue,maxValue,label,notify,help,flags,userID}
If *tuiSlider
  *tuiSlider\orientation = #TUIORIENT_HORIZONTAL
  *tuiSlider\obj\flags   = (*tuiSlider\obj\flags| #TUIF_FIXSIZE) - #TUIF_FIXWIDTH
End If
Function Return *tuiSlider
End Function




