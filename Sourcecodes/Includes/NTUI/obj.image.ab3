; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 54
; CursorColumn    = 21
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_image.include                                                    /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#TUI_HAS_IMAGE = 1

CNIF #__include=0
optimize 7
Syntax 2
CEND

#TUIIA_BASE = #TUIA_USER

#TUIIA_IMAGE = #TUIIA_BASE + 0

NEWTYPE.tuiImage
obj.tuiObject
*tbi.tuiTBImage
End NEWTYPE


_ntui_SetImageAttr:
Function.w _ntui_SetImageAttr{*tuiImage.tuiImage,ti_Tag.l,ti_Data.l}
  !_ASSERT{*tuiImage}
  !_ASSERT{*tuiImage\obj\classID=#TUICLASS_IMAGE}

  done.w = True
  Select ti_Tag
    Case #TUIIA_IMAGE
      If *tuiImage\tbi Then ntui_FreeTBImage{*tuiImage\tbi}
      *tuiImage\tbi = ntui_CreateTBImage{*tuiImage\obj\tuiEngine,Peek.s(ti_Data),#TUISIZE_NATIVE,#TUISIZE_NATIVE}
    Case #TUIA_XMLATTR
      *xmlA.tuiXmlAttr = ti_Data
      Select Peek.s(*xmlA\nameP)
        Case "src"             : done=ntui_SetAttr{*tuiImage,#TUIIA_IMAGE         ,*xmlA\stringP}
        Default
          done = False
       End Select
    Default
      done=False

  End Select
  Function Return done
End Function


_ntui_GetImageAttr:
Function.w _ntui_GetImageAttr{*tuiImage.tuiImage,ti_Tag.l,*ti_Data.longP}
!_ASSERT{*tuiImage}
!_ASSERT{*tuiImage\obj\classID=#TUICLASS_IMAGE}

done.w = True
Select ti_Tag
  Case #TUIBA_IMAGE      : *ti_Data\l = *tuiImage\tbi
  Default
    done=False

End Select
Function Return done
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = _ntui_HandleImage {*tuiImage.tuiImage,*tuiEvent.tuiEve:: /
;/ nt}                                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * do what happens if the user operates the Image */                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiImage.tuiImage    : ???                                               /
;/ - *tuiEvent.tuiEvent    : ???                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DispatchImageEvent:
Function.w _ntui_DispatchImageEvent{*tuiImage.tuiImage,*tuiEvent.tuiEvent}

  done.w = True
  Select *tuiEvent\evID
    Case #TUIEV_TICK
      done = False
    Default
      done = False
  End Select

  Function Return done
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawImage {*tuiImage.tuiImage,*rp.RastPort}                    /
;/                                                                             /
;/ Description:                                                                /
;/ ntui_Refresh{*tuiImage}                                                     /
;/ * draw the Image in all its beauty */                                       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiImage.tuiImage    : ???                                               /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawImage:
Statement _ntui_DrawImage{*tuiImage.tuiImage,*rp.RastPort}
 !_ASSERT{*tuiImage}
 !_ASSERT{*rp}
 !_ASSERT{*tuiImage\obj\classID=#TUICLASS_IMAGE}

 *tuiEngine.tuiEngine = *tuiImage\obj\tuiEngine
 *tui.tuiObject = *tuiImage\obj
 !_ASSERT{*tuiEngine}

 ;/* draw the border */
 If (*tuiImage\obj\borderType><#TUIBORDER_NONE)
   ntui_DrawBorder{*tuiEngine,*rp,*tui\bbox,*tui\borderType,*tui\flags}
 End If

  If (*tuiImage\tbi)
    bgTuiPen.l = *tuiImage\obj\bgTuiPen;#TUIPEN_BACKGROUND;_ntui_GetBGTuiPen{*tuiImage}
  ;  ntui_DrawTBImage{*tuiImage\img,*rp,x1,y1,x2,y2,*tuiImage\obj\flags&(#TUIF_LEFT|#TUIF_RIGHT|#TUIF_CENTER|#TUIF_TOP|#TUIF_BOTTOM|#TUIF_MIDDLE),bgTuiPen}
    ntui_DrawTBImage{*tuiImage\tbi,*rp,*tuiImage\obj\ibox,*tuiImage\obj\cbox,*tuiImage\obj\flags,bgTuiPen}
  End If

End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetImageMinSize {*tuiImage.tuiImage,*rp.RastPort}  /
;/                                                                             /
;/ Description:                                                                /
;/ * calculate the minimum size for the Image */                               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiImage.tuiImage    : ???                                               /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_CalculateImageMinSize:
Function.l _ntui_CalculateImageMinSize{*tuiImage.tuiImage,*rp.RastPort}
  !_ASSERT{*tuiImage}
  !_ASSERT{*rp}
  !_ASSERT{*tuiImage\obj\classID=#TUICLASS_IMAGE}

  *tuiEngine.tuiEngine = *tuiImage\obj\tuiEngine
  *tui.tuiObject = *tuiImage\obj
  !_ASSERT{*tuiEngine}

  *tuiImage\obj\minsize\x = *tuiImage\obj\padding\left + *tuiImage\obj\padding\right
  *tuiImage\obj\minsize\y = *tuiImage\obj\padding\top  + *tuiImage\obj\padding\bottom

  If *tuiImage\tbi
    *tuiImage\obj\minsize\x + ntui_GetTBImageWidth {*tuiImage\tbi}
    *tuiImage\obj\minsize\y + ntui_GetTBImageHeight{*tuiImage\tbi}
  End If

  _ntui_GetBorderSize{*tuiEngine,*tuiImage\obj\borderType,*tuiImage\obj\flags,*tuiImage\obj\border}
  *tuiImage\obj\minsize\x + *tuiImage\obj\border\left + *tuiImage\obj\border\right
  *tuiImage\obj\minsize\y + *tuiImage\obj\border\top  + *tuiImage\obj\border\bottom

  Function Return *tuiImage\obj\minsize
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeImage {*tuiImage.tuiImage}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * free everything special that we allocated for the Image */                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiImage.tuiImage    : ???                                               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitImage:
Statement _ntui_DeinitImage{*tuiImage.tuiImage}
;If *tuiImage\img Then ntui_FreeTBImage{*tuiImage\img}  : *tuiImage\img = !_NULL
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_Image {imagefile.s,@help.s,@flags.l,userID.l}       /
;/                                                                             /
;/ Description:                                                                /
;/ * create an image tui Image */                                              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - imagefile.s    : ???                                                      /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_Image{imagefile.s,@tuiWidth.l,@tuiHeight.l,@help.s,@flags.l,@nameID.s}
If (flags=#TUI_NOFLAGS) Then flags=0
flags | #TUIF_CENTER|#TUIF_MIDDLE|#TUIF_FIXSIZE
*tuiImage.tuiImage = _ntui_CreateObject{#TUICLASS_IMAGE,SizeOf.tuiImage,help,flags,nameID}
If *tuiImage
;  *tuiImage\obj\bindFlags  = #TUIBIND_ABLE
  *tuiImage\tbi            = ntui_CreateTBImage{*tuiImage\obj\tuiEngine,imagefile,tuiWidth,tuiHeight}
  *tuiImage\obj\borderType = #TUIBORDER_NONE

  !_GetFuncPointer{*tuiImage\obj\Draw            ,_ntui_DrawImage,{0,0}}
;  !_GetFuncPointer{*tuiImage\obj\Layout          ,_ntui_LayoutImage,{0,0,0}}
  !_GetFuncPointer{*tuiImage\obj\DispatchEvent   ,_ntui_DispatchImageEvent,{0,0}}
  !_GetFuncPointer{*tuiImage\obj\CalculateMinSize,_ntui_CalculateImageMinSize,{0,0}}
  !_GetFuncPointer{*tuiImage\obj\Deinit          ,_ntui_DeinitImage,{0}}
  !_GetFuncPointer{*tuiImage\obj\SetAttr         ,_ntui_SetImageAttr,{0,0,0}}
  !_GetFuncPointer{*tuiImage\obj\GetAttr         ,_ntui_GetImageAttr,{0,0,0}}

End If
Function Return *tuiImage
End Function


