; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "MLDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 9
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 171
; CursorColumn    = 25
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 15
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 15
; Max BlitzFont   = 4
; Max GTList      = 15
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Name: multilist.include                                                     /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements:  Amiblitz2.4                                                  /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Provide multi-list functionality.                                           /
;/ The "multi-list" is actually very similar to a "tree".                      /
;/                                                                             /
;/ Abstract:                                                                   /
;/ A multi-list is a "normal" list, but each item can have another multi-lis:: /
;/ t atached.                                                                  /
;/ This is the most common way to represent a file directory structure. This:: /
;/  is why this include has some special functions for file handling and a f:: /
;/ unction to draw the multi list, which is used in tui.include.               /
;/ Each node can have a label string and a user string, and a user value.      /
;/ The user value could be used to store ID numbers or a pointer to more dat:: /
;/ a belonging to the node. The structure is not very flexible, but ideal fo:: /
;/ r tree-views on data like file systems.                                     /
;/                                                                             /
;/ User Constants:  none                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#TUINODE_UNDEFINED = 0
#TUINODE_LEAF      = 1
#TUINODE_BRANCH    = 2
#TUINODE_ROOT      = 3

CNIF #__include=0
SYNTAX 2
OPTIMIZE 7
CEND

XINCLUDE "definitions.ab3"
;XINCLUDE "mousepointer.ab3"
;XINCLUDE "global.ab3"
XINCLUDE "strptr.include.ab3"
;XINCLUDE "tempbuffer.ab3"
;XINCLUDE "file.ab3"

NEWTYPE.tuiTreeNode
*next_node.tuiTreeNode
*prev_node.tuiTreeNode
*parent_node.tuiTreeNode
*child_node.tuiTreeNode
expanded.w
typ.w
active.w
*label.str
*userStr.str
*tbi.tuiTBImage
userValue.l
End NEWTYPE


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ml_AddNodeSorted {*next_node.tuiTreeNode,typ.b,label_text:: /
;/ .s,user_text.s,user_data.l}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ Add a new node to the list refered by next_node, but insert it sorted acc:: /
;/ ording the label_text.                                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *next_node.tuiTreeNode : ???                                                  /
;/ - typ.b              : ???                                                  /
;/ - label_text.s       : ???                                                  /
;/ - user_text.s        : ???                                                  /
;/ - user_data.l        : ???                                                  /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#TUIINSERT_AFTER          = 1
#TUIINSERT_BEFORE         = 2
#TUIINSERT_HEAD           = 3
#TUIINSERT_TAIL           = 4
#TUIINSERT_SORTLABEL      = 5

Function.l ntui_CreateNode{*entry.tuiTreeNode,typ.w,label.s,userStr.s,userValue.l,insert.w,child.w}
  *node.tuiTreeNode = AllocMem_ (SizeOf.tuiTreeNode,#MEMF_ANY) ; create a new node
  If *node
    *prev.tuiTreeNode   = Null
    *next_.tuiTreeNode  = Null
    *parent.tuiTreeNode = Null

    If *entry
      If child
        *parent.tuiTreeNode = *entry
        *entry  = *entry\child_node
      Else
        *parent = *entry\parent_node
      End If

      Select insert
        Case #TUIINSERT_AFTER
          *prev = *entry
          If *entry Then *next_  = *entry\next_node

        Case #TUIINSERT_BEFORE
          *next_ = *entry
          If *entry Then *prev  = *entry\prev_node

        Case #TUIINSERT_HEAD
          If *entry Then While *entry\prev_node:*entry=*entry\prev_node:Wend
          *next_ = *entry

        Case #TUIINSERT_TAIL
          If *entry Then While *entry\next_node:*entry=*entry\next_node:Wend
          *prev   = *entry

        Case #TUIINSERT_SORTLABEL
          If *entry
            While *entry\prev_node:*entry = *entry\prev_node:Wend ; go to the first child
            *prev.tuiTreeNode = Null
            *next_.tuiTreeNode = *entry
            b.s = UCase$(label)
            If typ><#TUINODE_BRANCH
              breakme.l=False
              While *next_><Null AND breakme=False
                If *next_\typ=#TUINODE_BRANCH
                  *prev  = *next_
                  *next_ = *next_\next_node
                Else
                  breakme=True
                End If
              Wend
            End If

            breakme.l = False
            While *next_><Null AND breakme=False
              a.s = UCase$(str_Read{&*next_\label})
              If a.s<b.s AND typ=*next_\typ
                *prev   = *next_
                *next_  = *next_\next_node
              Else
                breakme=True
              End If
            Wend
          End If

        Default
          ; error
      End Select
    End If

    If *next_ Then *next_\prev_node = *node
    If *prev  Then *prev\next_node  = *node
    If *prev=Null AND *parent><Null Then *parent\child_node = *node ; we are the head
    ;If *parent Then *parent\typ = #TUINODE_BRANCH ; force a branch for the upper node

    *node\tbi         = Null
    *node\prev_node   = *prev
    *node\next_node   = *next_
    *node\child_node  = Null
    *node\parent_node = *parent
    *node\typ         = typ
    *node\userValue   = userValue
    *node\expanded    = False
    *node\active      = False
    *node\label       = Null
    *node\userStr     = Null

    str_Write{&*node\label,label}
    str_Write{&*node\userStr,userStr}

  End If
Function Return *node
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  *head.l = ml_GetFirstNode {*node.tuiTreeNode}                          /
;/                                                                             /
;/ Description:                                                                /
;/ Get the first node of the list referred by node.                            /
;/ NOTE: This is useful if you plan to scan all items from this list.          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *node.tuiTreeNode    : node                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - *head.tuiTreeNode    : first node in list                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_GetHeadNode {*node.tuiTreeNode}
If *node Then While *node\prev_node:*node=*node\prev_node:Wend
Function Return *node
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ml_RemoveNode {*node.tuiTreeNode}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Remove a node (and all its children).                                       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *node.tuiTreeNode    : node to remove                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_DestroyNode {*node.tuiTreeNode}
If *node
  If *node\prev_node Then *node\prev_node\next_node = *node\next_node
  If *node\next_node Then *node\next_node\prev_node = *node\prev_node
  If *node\parent_node
    If *node\parent_node\child_node = *node
      *node\parent_node\child_node = *node\next_node
    End If
  End If
  While *node\child_node
    ntui_DestroyNode {*node\child_node}
  Wend
  str_Free {&*node\label}
  str_Free {&*node\userStr}
  FreeMem_ *node,SizeOf.tuiTreeNode
End If
End Statement


#TUINA_BASE       = #TUIA_USER
#TUINA_LABEL      = #TUINA_BASE + 1
#TUINA_USERSTRING = #TUINA_BASE + 2
#TUINA_USERVALUE  = #TUINA_BASE + 3
#TUINA_PREVNODE   = #TUINA_BASE + 4
#TUINA_NEXTNODE   = #TUINA_BASE + 5
#TUINA_CHILDNODE  = #TUINA_BASE + 6
#TUINA_PARENTNODE = #TUINA_BASE + 7
#TUINA_NODETYPE   = #TUINA_BASE + 8
#TUINA_EXPANDED   = #TUINA_BASE + 9
#TUINA_ACTIVE     = #TUINA_BASE + 10
#TUINA_IMAGE      = #TUINA_BASE + 11

Function.l ntui_GetNodeAttr{*node.tuiTreeNode,attr.l,ti_Data.l}
!_ASSERT{*node}
Select attr
  Case #TUINA_LABEL      : ret.l = str_GetPtr{*node\label}
  Case #TUINA_USERSTRING : ret.l = str_GetPtr{*node\userStr}
  Case #TUINA_USERVALUE  : ret.l = *node\userValue
  Case #TUINA_PREVNODE   : ret.l = *node\prev_node
  Case #TUINA_NEXTNODE   : ret.l = *node\next_node
  Case #TUINA_CHILDNODE  : ret.l = *node\child_node
  Case #TUINA_NODETYPE   : ret.l = *node\typ
  Case #TUINA_PARENTNODE : ret.l = *node\parent_node
  Case #TUINA_EXPANDED   : ret.l = *node\expanded
  Case #TUINA_ACTIVE     : ret.l = *node\active
End Select
Function Return ret
End Function


Function.l ntui_SetNodeAttr{*node.tuiTreeNode,attr.l,ti_Data.l}
!_ASSERT{*node}
Select attr
  Case #TUINA_LABEL      : str_WritePtr{&*node\label,ti_Data}
  Case #TUINA_USERSTRING : str_WritePtr{&*node\userStr,ti_Data}
  Case #TUINA_USERVALUE  : *node\userValue = ti_Data
  Case #TUINA_NODETYPE   : *node\typ       = ti_Data
  Case #TUINA_EXPANDED   : *node\expanded  = ti_Data
  Case #TUINA_ACTIVE     : *node\active    = ti_Data
  Case #TUINA_IMAGE      : If *node\tbi Then ntui_FreeTBImage{*node\tbi}
                           *node\tbi       = ti_Data
  Default
    Function Return 0
End Select
Function Return 1
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ml_RemoveAllNodes {*node.tuiTreeNode}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ Remove the complete list (and all child lists) referred by node. The node:: /
;/  does not need to be the head of the list.                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *node.tuiTreeNode    : node                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_DestroyAllNodes {*node.tuiTreeNode}
If *node Then While *node\prev_node:*node=*node\prev_node:Wend

While *node
  *next_node.tuiTreeNode=*node\next_node
  If *node\prev_node Then *node\prev_node\next_node = *node\next_node
  If *node\next_node Then *node\next_node\prev_node = *node\prev_node
  If *node\parent_node
    If *node\parent_node\child_node = *node
      *node\parent_node\child_node = *node\next_node
    End If
  End If
  While *node\child_node
    ntui_DestroyNode {*node\child_node}
  Wend
  str_Free {&*node\label}
  str_Free {&*node\userStr}
  FreeMem_ *node,SizeOf.tuiTreeNode
  *node = *next_node
Wend
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ml_RemoveAllChildren {*node.tuiTreeNode}                                /
;/                                                                             /
;/ Description:                                                                /
;/ Remove all children of the node.                                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *node.tuiTreeNode    : node                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_DestroyAllChildren {*node.tuiTreeNode}
If *node
  While *node\child_node
    ntui_DestroyNode {*node\child_node}
  Wend
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  rows.l = ml_GetRowHeight {*node.tuiTreeNode}                           /
;/                                                                             /
;/ Description:                                                                /
;/ Calculate the number of rows the list would need to be shown, respecting :: /
;/ which node is expanded and which is collapsed.                              /
;/ NOTE: This is useful to set the dimensions of a scroller bar if you plan :: /
;/ to make the list visible.                                                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *node.tuiTreeNode   : node                                                    /
;/                                                                             /
;/ Result:                                                                     /
;/ - rows.l          : number of rows                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_GetVisibleRows {*node.tuiTreeNode}
lpos.l = 0
While *node
  If *node\typ = #TUINODE_BRANCH
    If *node\expanded
      lpos + ntui_GetVisibleRows{*node\child_node}
    End If
  End If
  lpos + 1
  *node=*node\next_node
Wend
Function Return lpos
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ml_GetNode {*node.tuiTreeNode,spos.l}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *node.tuiTreeNode    : ???                                                    /
;/ - spos.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_GetNode {*node.tuiTreeNode,spos.l}
lpos.l = 0
While *node
  If lpos=spos Then Poke.l ?ntui_getnode_res,*node
  If *node\typ = #TUINODE_BRANCH
    If *node\expanded
      lpos + ntui_GetNode{*node\child_node,spos-lpos-1}
    End If
  End If
  lpos + 1
  *node=*node\next_node
Wend
Function Return lpos
ntui_getnode_res:
Dc.l 0
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ml_FindNode {*node.tuiTreeNode,spos.l}                      /
;/                                                                             /
;/ Description:                                                                /
;/ Find a node at the position spos.                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *node.tuiTreeNode : ???                                                       /
;/ - spos.l        : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_FindNode {*node.tuiTreeNode,spos.l}
MOVE.l #0,ntui_getnode_res
dummy.l = ntui_GetNode {*node.tuiTreeNode,spos.l}
MOVE.l ntui_getnode_res,d0
*hitnode.tuiTreeNode = PutRegD0
Function Return *hitnode
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ml_DeactivateAll {*node.tuiTreeNode}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Deactivate recursively all nodes and their children.                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *node.tuiTreeNode    : ???                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_DeactivateAll {*node.tuiTreeNode}
While *node
  *node\active = False
  If *node\typ = #TUINODE_BRANCH
    ntui_DeactivateAll{*node\child_node}
  End If
  *node=*node\next_node
Wend
End Statement


