; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 129
; CursorColumn    = 60
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_CustomView.include                                                     /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#TUI_HAS_CUSTOMVIEW = 1

CNIF #__include=0
optimize 7
Syntax 2
CEND

#TUICVA_BASE          =  #TAG_USER
#TUICVA_ONMOUSEMOVE   =  1 | #TUICVA_BASE  ; w
#TUICVA_ONTICK        =  2 | #TUICVA_BASE  ; w

NEWTYPE.tuiCustomView
obj.tuiObject            ; tui object header
totalH.l
totalV.l
visibleH.l
visibleV.l
offsetH.l
offsetV.l
stepH.l
stepV.l
*onMouseMove.str
*onTick.str
;grab.tuiPixel
;grabValue.l
;grabbed.l
;reportIDCMP.l
End NEWTYPE


_ntui_SetCustomViewAttr:
Function.w _ntui_SetCustomViewAttr{*customView.tuiCustomView,ti_Tag.l,ti_Data.l}
  !_ASSERT{*customView}
  !_ASSERT{*customView\obj\classID=#TUICLASS_CUSTOMVIEW}

  done.w = True

  Select ti_Tag
    Case #TUICVA_ONMOUSEMOVE  : str_WritePtr{&*customView\onMouseMove    ,ti_Data}
    Case #TUICVA_ONTICK       : str_WritePtr{&*customView\onTick         ,ti_Data}
    Case #TUIA_XMLATTR
      *xmlA.tuiXmlAttr = ti_Data
      Select Peek.s(*xmlA\nameP)
        Case "onmousemove"       : done=ntui_SetAttr{*customView,#TUICVA_ONMOUSEMOVE  ,*xmlA\stringP}
        Case "ontick"            : done=ntui_SetAttr{*customView,#TUICVA_ONTICK       ,*xmlA\stringP}
        Default
          done = False
       End Select

    Default
      done = False
  End Select
  Function Return done
End Function


_ntui_GetCustomViewAttr:
Function.w _ntui_GetCustomViewAttr{*customView.tuiCustomView,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*customView}
  !_ASSERT{*customView\obj\classID=#TUICLASS_CUSTOMVIEW}

  done.w = True
  Select ti_Tag
    Case #TUICVA_ONMOUSEMOVE  : *ti_Data\l = str_GetPtr{*customView\onMouseMove}
    Case #TUICVA_ONTICK       : *ti_Data\l = str_GetPtr{*customView\onTick}
    Default
      done = False
  End Select
  Function Return done
End Function




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = _ntui_DispatchCustomView { *customView.tuiCustomView,*tuiEvent.tuiEvent}   /
;/                                                                             /
;/ Description:                                                                /
;/ * tui CustomView newtype */                                                       /
;/ obj.tuiObject            ; tui object header                                /
;/ * do what happens if the user operates the CustomView */                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ -  *customView.tuiCustomView    : ???                                                 /
;/ - *tuiEvent.tuiEvent    : ???                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DispatchCustomViewEvent:
Function.w _ntui_DispatchCustomViewEvent{ *customView.tuiCustomView,*ev.tuiEvent}
  !_ASSERT{*customView}
  !_ASSERT{*customView\obj\classID=#TUICLASS_CUSTOMVIEW}

  *tuiEngine.tuiEngine = *customView\obj\tuiEngine
  !_ASSERT{*tuiEngine}

  done.w = False

  Select  *ev\evID
    Case #TUIEV_MOUSEDOWN
      If  (!tuiRectHit{*customView\obj\bbox,*ev\pos\x,*ev\pos\y}) OR ((*customView\obj\flags&#TUIF_ACTIVE)=#TUIF_ACTIVE)
        str_Dup{&*ev\notifyID,*customView\obj\onTouch}
      End If
    Case #TUIEV_MOUSEUP
      If (*customView\obj\flags&#TUIF_ACTIVE)
        str_Dup{&*ev\notifyID,*customView\obj\onRelease}
      End If
    Case #TUIEV_MOUSEMOVE

      If ((*customView\obj\flags&#TUIF_ACTIVE)=#TUIF_ACTIVE) OR (!tuiRectHit{*customView\obj\bbox,*ev\pos\x,*ev\pos\y})
        str_Dup{&*ev\notifyID,*customView\onMouseMove}
      End If
    Case #TUIEV_KEYDOWN   : str_Dup{&*ev\notifyID,*customView\obj\onKeyDown}
    Case #TUIEV_KEYUP     : str_Dup{&*ev\notifyID,*customView\obj\onKeyUp}
    Case #TUIEV_TICK      : str_Dup{&*ev\notifyID,*customView\onTick}
  End Select

  If ( *ev\notifyID)
    *ev\tuiObject = *customView
    _ntui_QueueEvent{*tuiEngine\outQ,*ev}
    done=True
  EndIf

Function Return done
End Function
 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawCustomView {*customView.tuiCustomView,*rp.RastPort}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * draw the CustomView in all its beauty */                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *customView.tuiCustomView    : ???                                                 /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawCustomView:
Statement _ntui_DrawCustomView{*customView.tuiCustomView,*rp.RastPort,*rpclip.tuiRect}
  !_ASSERT{*customView}
  !_ASSERT{*customView\obj\classID=#TUICLASS_CUSTOMVIEW}

  *tuiEngine.tuiEngine = *customView\obj\tuiEngine
  !_ASSERT{*tuiEngine}
  !_ASSERT{*rp}

  If (*customView\obj\borderType><#TUIBORDER_NONE)
    ntui_DrawBorder{*tuiEngine,*rp,*customView\obj\bbox,*customView\obj\borderType,*customView\obj\flags}
  End If

  ntui_PostNotify{*customView,!NOTIFYID_REFRESH}

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetCustomViewMinSize {*customView.tuiCustomView,*rp.RastPort}     /
;/                                                                             /
;/ Description:                                                                /
;/ * calculate the minimum size for the button */                              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *customView.tuiCustomView    : ???                                                 /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_CalculateCustomViewMinSize:
Function.l _ntui_CalculateCustomViewMinSize{*customView.tuiCustomView,*rp.RastPort}
*tuiEngine.tuiEngine = *customView\obj\tuiEngine : If *tuiEngine=#NULL OR *rp=#NULL Then Function Return *customView\obj\minsize

*customView\obj\minsize\x  + !tuiBorderWidth{*customView\obj\padding}
*customView\obj\minsize\y  + !tuiBorderHeight{*customView\obj\padding}

_ntui_GetBorderSize{*tuiEngine,*customView\obj\borderType,*customView\obj\flags,*customView\obj\border}
*customView\obj\minsize\x + !tuiBorderWidth{*customView\obj\border}
*customView\obj\minsize\y + !tuiBorderHeight{*customView\obj\border}

Function Return *customView\obj\minsize
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeCustomView {*customView.tuiCustomView}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * free everything special that we allocated for the button */               /
;/ If *customView\img Then ntui_FreeImage{*customView\img}  : *customView\img = !_NULL  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *customView.tuiCustomView    : ???                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitCustomView:
Statement _ntui_DeinitCustomView{*customView.tuiCustomView}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_CustomView {width.l,height.l,@notify.l,@help.s,@flags.l:: /
;/ ,@userID.l}                                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * create function for tui CustomView */                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - width.l    : ???                                                          /
;/ - height.l    : ???                                                         /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_CustomView{width.l,height.l,@help.s,@flags.l,@nameID.s}
If (flags=#TUI_NOFLAGS) Then flags=0
flags | #TUIF_CENTER|#TUIF_MIDDLE|#TUIF_WANTTAB
*customView.tuiCustomView = _ntui_CreateObject{#TUICLASS_CUSTOMVIEW,SizeOf.tuiCustomView,help,flags,nameID}
If *customView
  *customView\stepH          = 1
  *customView\stepV          = 1
  ;*customView\reportIDCMP    = reportIDCMP
;  *customView\obj\bindFlags  = #TUIBIND_HDELTA|#TUIBIND_VDELTA|#TUIBIND_HSCROLL|#TUIBIND_VSCROLL|#TUIBIND_ABLE
  *customView\obj\borderType = #TUIBORDER_RECESSED
  *customView\obj\minsize\x  = width,height

  !_GetFuncPointer{*customView\obj\Draw            ,_ntui_DrawCustomView,{0,0,0}}
;  !_GetFuncPointer{*customView\obj\Layout          ,_ntui_LayoutCustomView,{0,0,0}}
  !_GetFuncPointer{*customView\obj\DispatchEvent   ,_ntui_DispatchCustomViewEvent,{0,0}}
  !_GetFuncPointer{*customView\obj\CalculateMinSize,_ntui_CalculateCustomViewMinSize,{0,0}}
  !_GetFuncPointer{*customView\obj\Deinit          ,_ntui_DeinitCustomView,{0}}
  !_GetFuncPointer{*customView\obj\SetAttr         ,_ntui_SetCustomViewAttr,{0,0,0}}
  !_GetFuncPointer{*customView\obj\GetAttr         ,_ntui_GetCustomViewAttr,{0,0,0}}

End If
Function Return *customView
End Function



