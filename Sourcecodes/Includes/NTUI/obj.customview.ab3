; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 80
; CursorColumn    = 5
; LabelSearch     = ""
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_CustomView.include                                                     /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
NEWTYPE.tuiCustomView
obj.tuiObject            ; tui object header
totalH.l
totalV.l
visibleH.l
visibleV.l
offsetH.l
offsetV.l
stepH.l
stepV.l
grab.tuiPixel
grabValue.l
grabbed.l
reportIDCMP.l
End NEWTYPE

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = _ntui_DispatchCustomView {*tuiCustomView.tuiCustomView,*tuiEvent.tuiEvent}   /
;/                                                                             /
;/ Description:                                                                /
;/ * tui CustomView newtype */                                                       /
;/ obj.tuiObject            ; tui object header                                /
;/ * do what happens if the user operates the CustomView */                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiCustomView.tuiCustomView    : ???                                                 /
;/ - *tuiEvent.tuiEvent    : ???                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DispatchCustomViewEvent:
Function.w _ntui_DispatchCustomViewEvent{*tuiCustomView.tuiCustomView,*tuiEvent.tuiEvent}
  !_ASSERT{*tuiCustomView}
  !_ASSERT{*tuiCustomView\obj\typeID=#TUIOBJ_CUSTOMVIEW}

  *tuiEngine.tuiEngine = *tuiCustomView\obj\tuiEngine
  !_ASSERT{*tuiEngine}

  done.w = False

  Select *tuiEvent\evID
    Case #TUIEV_MOUSEDOWN : *tuiEvent\notify = *tuiCustomView\obj\notify
    Case #TUIEV_MOUSEUP   : *tuiEvent\notify = *tuiCustomView\obj\notify
    Case #TUIEV_MOUSEMOVE : *tuiEvent\notify = *tuiCustomView\obj\notify
    Case #TUIEV_KEYDOWN   : *tuiEvent\notify = *tuiCustomView\obj\notify
    Case #TUIEV_KEYUP     : *tuiEvent\notify = *tuiCustomView\obj\notify
    Case #TUIEV_TICK      : *tuiEvent\notify = *tuiCustomView\obj\notify
  End Select

  If (*tuiEvent\notify><#NOTIFY_NOTHING)
    *tuiEvent\tuiObject = *tuiCustomView
    _ntui_QueueEvent{*tuiEngine\outQ,*tuiEvent}
    done=True
  EndIf

Function Return done
End Function
 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawCustomView {*tuiCustomView.tuiCustomView,*rp.RastPort}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * draw the CustomView in all its beauty */                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiCustomView.tuiCustomView    : ???                                                 /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawCustomView:
Statement _ntui_DrawCustomView{*tuiCustomView.tuiCustomView,*rp.RastPort}
  !_ASSERT{*tuiCustomView}
  !_ASSERT{*tuiCustomView\obj\typeID=#TUIOBJ_CUSTOMVIEW}

  *tuiEngine.tuiEngine = *tuiCustomView\obj\tuiEngine
  !_ASSERT{*tuiEngine}
  !_ASSERT{*rp}

  If (*tuiCustomView\obj\borderType><#TUIBORDER_NONE)
    ntui_DrawBorder{*tuiEngine,*rp,*tuiCustomView\obj\bbox,*tuiCustomView\obj\borderType,*tuiCustomView\obj\flags}
  End If

  ntui_PostNotify{*tuiCustomView,#NOTIFY_REFRESH}

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetCustomViewMinSize {*tuiCustomView.tuiCustomView,*rp.RastPort}     /
;/                                                                             /
;/ Description:                                                                /
;/ * calculate the minimum size for the button */                              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiCustomView.tuiCustomView    : ???                                                 /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_CalculateCustomViewMinSize:
Function.l _ntui_CalculateCustomViewMinSize{*tuiCustomView.tuiCustomView,*rp.RastPort}
*tuiEngine.tuiEngine = *tuiCustomView\obj\tuiEngine : If *tuiEngine=!_NULL OR *rp=!_NULL Then Function Return *tuiCustomView\obj\minsize

  *tuiCustomView\obj\minsize\x  + *tuiCustomView\obj\padding\left + *tuiCustomView\obj\padding\right ; (in case we draw recessed)
  *tuiCustomView\obj\minsize\y  + *tuiCustomView\obj\padding\top  + *tuiCustomView\obj\padding\bottom; (in case we draw recessed)

  ntui_GetBorderSize{*tuiEngine,*tuiCustomView\obj\borderType,*tuiCustomView\obj\border}
  *tuiCustomView\obj\minsize\x + *tuiCustomView\obj\border\left + *tuiCustomView\obj\border\right
  *tuiCustomView\obj\minsize\y + *tuiCustomView\obj\border\top  + *tuiCustomView\obj\border\bottom


Function Return *tuiCustomView\obj\minsize
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeCustomView {*tuiCustomView.tuiCustomView}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * free everything special that we allocated for the button */               /
;/ If *tuiCustomView\img Then ntui_FreeImage{*tuiCustomView\img}  : *tuiCustomView\img = !_NULL  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiCustomView.tuiCustomView    : ???                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitCustomView:
Statement _ntui_DeinitCustomView{*tuiCustomView.tuiCustomView}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_CustomView {width.l,height.l,@notify.l,@help.s,@flags.l:: /
;/ ,@userID.l}                                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * create function for tui CustomView */                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - width.l    : ???                                                          /
;/ - height.l    : ???                                                         /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_CustomView{width.l,height.l,reportIDCMP.l,@notify.l,@help.s,@flags.l,@userID.l}
If (flags&#TUIF_NOFLAGS) Then flags=0
flags | #TUIF_CENTER|#TUIF_MIDDLE|#TUIF_WANTTAB
*tuiCustomView.tuiCustomView = _ntui_CreateObject{#TUIOBJ_CUSTOMVIEW,SizeOf.tuiCustomView,notify,help,flags,userID}
If *tuiCustomView
  *tuiCustomView\stepH          = 1
  *tuiCustomView\stepV          = 1
  *tuiCustomView\reportIDCMP    = reportIDCMP
  *tuiCustomView\obj\bindFlags  = #TUIBIND_HDELTA|#TUIBIND_VDELTA|#TUIBIND_HSCROLL|#TUIBIND_VSCROLL|#TUIBIND_ABLE
  *tuiCustomView\obj\borderType = #TUIBORDER_RECESSED
  *tuiCustomView\obj\minsize\x  = width,height

  !_GetFuncPointer{*tuiCustomView\obj\Draw            ,_ntui_DrawCustomView,{0,0}}
;  !_GetFuncPointer{*tuiCustomView\obj\Layout          ,_ntui_LayoutCustomView,{0,0,0}}
  !_GetFuncPointer{*tuiCustomView\obj\DispatchEvent   ,_ntui_DispatchCustomViewEvent,{0,0}}
  !_GetFuncPointer{*tuiCustomView\obj\CalculateMinSize,_ntui_CalculateCustomViewMinSize,{0,0}}
  !_GetFuncPointer{*tuiCustomView\obj\Deinit          ,_ntui_DeinitCustomView,{0}}
;  !_GetFuncPointer{*tuiCustomView\obj\SetAttr         ,_ntui_SetCustomViewAttr,{0,0,0}}
;  !_GetFuncPointer{*tuiCustomView\obj\GetAttr         ,_ntui_GetCustomViewAttr,{0,0,0}}


End If
Function Return *tuiCustomView
End Function



