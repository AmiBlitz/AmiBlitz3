; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 16
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8193
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 850
; CursorColumn    = 56
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA
#NTUI_HAS_WINDOW = 1

CNIF #__include=0
optimize 7
Syntax 2
CEND

;/* tuiWindow attributes */
#TUIWA_BASE          =  #TAG_USER
#TUIWA_WINFLAGS      =  1 | #TUIWA_BASE  ; w
#TUIWA_ONWINDROP     =  2 | #TUIWA_BASE  ; rw
#TUIWA_ONCLOSE       =  3 | #TUIWA_BASE  ; rw
#TUIWA_ONACTIVE      =  4 | #TUIWA_BASE  ; rw
#TUIWA_ONINACTIVE    =  5 | #TUIWA_BASE  ; rw
#TUIWA_ONTICK        =  6 | #TUIWA_BASE  ; rw
#TUIWA_TITLE         =  #TUIA_STRING

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_GetWindowByID {*tui.tuiObject,@winID.l,@instanceI:: /
;/ D.l}                                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ Find a tuiWindow by winID, optionally add instanceID for more restrict search. */    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tui.tuiObject  : tuiObject from were to start the search (this is typically a tuiEngine)                                                   /
;/ - winID.l         : winID of the tuiWindow                                                          /
;/ - instanceID.l    : instanceID of the tuiWindow (if any)                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l        : pointer to the tuiWindow or NULL if not found                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_GetWindowByID{*tui.tuiObject,nameID.s,@instanceID.l}
If *tui=#NULL Then Function Return #NULL
If (*tui\classID=#TUICLASS_WINDOW)
  If ((str_Comp{*tui\nameID,&nameID-4}=0) OR (nameID=""))
    *tuiWindow.tuiWindow = *tui
    If ((*tuiWindow\instanceID=instanceID) OR (instanceID=-1))
      Function Return *tuiWindow
    End If
  End If
End If

*tui.tuiObject = *tui\child
While *tui><#NULL
  *tuifind.tuiObject = ntui_GetWindowByID{*tui,nameID,instanceID}
  If *tuifind Then Function Return *tuifind
  *tui=*tui\next_
Wend
Function Return #NULL
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = ntui_HideWindow {*tuiWindow.tuiWindow}                   /
;/                                                                             /
;/ Description:                                                                /
;/ Hide a tuiWindow.                                                                            /
;/* note: The window is not present on the screen anymore. But the whole tuiWindow object still exists and can be manipulated as if it was open.
;/* A call of ntui_ShowWindow will make it visible again. Use ntui_FreeWindow to aktually destroy the window object.
;/*
;/ Inputs:                                                                     /
;/ - *tuiWindow.tuiWindow : pointer to the tuiWindow                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : true if the window was hidden, false otherwise                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_AmigaStripIntuiMessages{*win.Window}
  ; flush the IDCMP Events...
  If *win
    If *win\UserPort
      *mp.MsgPort = *win\UserPort
      If *mp\mp_MsgList
        *msg.IntuiMessage = *mp\mp_MsgList\lh_Head
        If *msg><#NULL
          While (*msg\ExecMessage\mn_Node\ln_Succ)
            *succ.Node = *msg\ExecMessage\mn_Node\ln_Succ
            If( *msg\IDCMPWindow=*win)
              Remove_ *msg
              ReplyMsg_ *msg
            End If
            *msg = *succ
            If *msg=-1 Then error{"Messgae succ is -1!!!!"}
          Wend
        End If
      End If
    End If
  End If
End Statement


Function.w ntui_HideWindow{*tuiWindow.tuiWindow}
  !_ASSERT{*tuiWindow}
  !_ASSERT{*tuiWindow\obj\classID=#TUICLASS_WINDOW}

  If *tuiWindow\appWin
    RemoveAppWindow_ *tuiWindow\appWin
    *tuiWindow\appWin=#NULL
  End If

  *win.Window = *tuiWindow\win

  If *win

    Forbid_
      _ntui_AmigaStripIntuiMessages{*win}
      *win\UserPort = #NULL
      ModifyIDCMP_ *win, 0
    Permit_

    *tuiWindow\obj\bbox\left = *win\LeftEdge,*win\TopEdge,*win\LeftEdge+*win\Width-1,*win\TopEdge+*win\Height-1
    *tuiWindow\obj\border\left = *win\BorderLeft, *win\BorderTop, *win\BorderRight , *win\BorderBottom
    CloseWindow_  *win
    *tuiWindow\win = #NULL
    *tuiWindow\state = #TUISTATE_CLOSED
  End If

  ntui_FlushEvents{*tuiWindow}

  ntui_ClearFlags{#TUIF_ONSCREEN,False,*tuiWindow}
  Function Return True
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawWindow {*tuiWindow.tuiWindow,*rp.RastPort}                 /
;/                                                                             /
;/ Description:
;/ private: Draw the content of a tuiWindow into the given RastPort.
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiWindow.tuiWindow : tuiWindow                                             /
;/ - *rp.RastPort         : rastport                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawWindow:
Statement _ntui_DrawWindow{*tuiWindow.tuiWindow,*rp.RastPort,*rpclip.tuiRect}

  !_ASSERT{*tuiWindow}
  !_ASSERT{*tuiWindow\obj\classID=#TUICLASS_WINDOW}
  *tuiEngine.tuiEngine = *tuiWindow\obj\tuiEngine
  !_ASSERT{*tuiEngine}
  *tui.tuiObject = *tuiWindow
  If ((*tui\flags&#TUIF_ONSCREEN)=0) Then Statement Return

  !tuiAndRect{clip.tuiRect,*tui\ibox,*rpclip}
  If !tuiValidRect{clip}=False Then Statement Return

  If *tuiWindow\obj\bgTuiPen>=0
    SetAPen_ *rp,*tuiEngine\pen[*tuiWindow\obj\bgTuiPen]
    RectFill_ *rp,clip\left,clip\top,clip\right,clip\bottom
  EndIf

  If *tuiWindow\obj\bgImage
    ; draw the background image
  End If

  *child.tuiObject = *tuiWindow\obj\child
  While *child
    _ntui_Draw{*child,*rp,clip}
    *child = *child\next_
  Wend

  ;If *tuiWindow\win Then RefreshWindowFrame_ *tuiWindow\win ; intuition is doing this for us

End Statement


_ntui_CalculateWindowMinSize:
Function.l _ntui_CalculateWindowMinSize{*tuiWindow.tuiWindow,*rp.RastPort}
  !_ASSERT{*tuiWindow}
  *tui.tuiObject = *tuiWindow\obj
  !_ASSERT{*rp}
  *tuiEngine.tuiEngine = *tui\tuiEngine
  !_ASSERT{*tuiEngine}
  initsize.tuiPixel\x = *tui\minsize\x,*tui\minsize\y
  ;ntui_GetBorderSize{*tuiEngine,*tui\borderType,bs.tuiBorderSize}
  ;*tui\border\west = bs\west,bs\north,bs\east,bs\south

  *tui\minsize\x = 0,0
  *child.tuiObject = *tui\child
  While *child
    _ntui_CalculateMinSize{*child,*rp}

    minX.l = *child\minsize\x + !tuiBorderWidth{*child\margin}
    minY.l = *child\minsize\y + !tuiBorderHeight{*child\margin}
    If False
      *tui\minsize\x  + minX
      If *tui\minsize\y<minY Then *tui\minsize\y=minY
    Else
      If *tui\minsize\x<minX Then *tui\minsize\x=minX
      *tui\minsize\y + minY
    End If
    *child=*child\next_
  Wend

  *tui\minsize\x + !tuiBorderWidth{*tui\padding}
  *tui\minsize\y + !tuiBorderHeight{*tui\padding}

  ; actually, we shall add the borderize too, but we dont know it yet (window is closed at this stage)
;  *tui\minsize\x + *tui\border\left  + *tui\border\right
;  *tui\minsize\y + *tui\border\top   + *tui\border\bottom

  Function Return *tui\minsize
End Function


_ntui_SetWindowAttr:
Function.w _ntui_SetWindowAttr{*tuiWindow.tuiWindow,ti_Tag.l,ti_Data.l}
  !_ASSERT{*tuiWindow}
  !_ASSERT{*tuiWindow\obj\classID=#TUICLASS_WINDOW}

  done.w = True
  Select ti_Tag
    Case #TUIWA_WINFLAGS   : *tuiWindow\winFlags    = ti_Data
    Case #TUIWA_ONCLOSE    : str_WritePtr{*tuiWindow\onClose    ,ti_Data}
    Case #TUIWA_ONWINDROP  : str_WritePtr{*tuiWindow\onWinDrop  ,ti_Data}
    Case #TUIWA_ONACTIVE   : str_WritePtr{*tuiWindow\onActive   ,ti_Data}
    Case #TUIWA_ONINACTIVE : str_WritePtr{*tuiWindow\onInactive ,ti_Data}
    Case #TUIWA_ONTICK     : str_WritePtr{*tuiWindow\onTick     ,ti_Data}

    Case #TUIA_XMLATTR
      *xmlA.tuiXmlAttr = ti_Data
      Select Peek.s(*xmlA\nameP)
        Case "title"             : done=ntui_SetAttr{*tuiWindow,#TUIWA_TITLE         ,*xmlA\stringP}

        Case "onclose"           : done=ntui_SetAttr{*tuiWindow,#TUIWA_ONCLOSE       ,*xmlA\stringP}
        Case "onwindrop"         : done=ntui_SetAttr{*tuiWindow,#TUIWA_ONWINDROP     ,*xmlA\stringP}
        Case "ontick"            : done=ntui_SetAttr{*tuiWindow,#TUIWA_ONTICK        ,*xmlA\stringP}
        Case "onactive"          : done=ntui_SetAttr{*tuiWindow,#TUIWA_ONACTIVE      ,*xmlA\stringP}
        Case "oninactive"        : done=ntui_SetAttr{*tuiWindow,#TUIWA_ONINACTIVE    ,*xmlA\stringP}
        Case "winflags"          : done=ntui_SetAttr{*tuiWindow,#TUIWA_WINFLAGS      ,*xmlA\value}
        Case "borderless"        : wflgs.l = *tuiWindow\winFlags|#WFLG_BORDERLESS  : If *xmlA\value=0 Then wflgs-#WFLG_BORDERLESS
                                   done=ntui_SetAttr{*tuiWindow,#TUIWA_WINFLAGS      ,wflgs}
        Case "backdrop"          : wflgs.l = *tuiWindow\winFlags|#WFLG_BACKDROP    : If *xmlA\value=0 Then wflgs-#WFLG_BACKDROP
                                   done=ntui_SetAttr{*tuiWindow,#TUIWA_WINFLAGS      ,wflgs}
        Case "activate"          : wflgs.l = *tuiWindow\winFlags|#WFLG_ACTIVATE    : If *xmlA\value=0 Then wflgs-#WFLG_ACTIVATE
                                   done=ntui_SetAttr{*tuiWindow,#TUIWA_WINFLAGS      ,wflgs}
        Case "closegadget"       : wflgs.l = *tuiWindow\winFlags|#WFLG_CLOSEGADGET : If *xmlA\value=0 Then wflgs-#WFLG_CLOSEGADGET
                                   done=ntui_SetAttr{*tuiWindow,#TUIWA_WINFLAGS      ,wflgs}
        Case "dragbar"           : wflgs.l = *tuiWindow\winFlags|#WFLG_DRAGBAR     : If *xmlA\value=0 Then wflgs-#WFLG_DRAGBAR
                                   done=ntui_SetAttr{*tuiWindow,#TUIWA_WINFLAGS      ,wflgs}
        Case "depthgadget"       : wflgs.l = *tuiWindow\winFlags|#WFLG_DEPTHGADGET : If *xmlA\value=0 Then wflgs-#WFLG_DEPTHGADGET
                                   done=ntui_SetAttr{*tuiWindow,#TUIWA_WINFLAGS      ,wflgs}
        Case "haszoom"           : wflgs.l = *tuiWindow\winFlags|#WFLG_HASZOOM     : If *xmlA\value=0 Then wflgs-#WFLG_HASZOOM
                                   done=ntui_SetAttr{*tuiWindow,#TUIWA_WINFLAGS      ,wflgs}
        Case "sizebbottom"       : wflgs.l = *tuiWindow\winFlags|#WFLG_SIZEBBOTTOM : If *xmlA\value=0 Then wflgs-#WFLG_SIZEBBOTTOM
                                   done=ntui_SetAttr{*tuiWindow,#TUIWA_WINFLAGS      ,wflgs}
        Case "sizebright"        : wflgs.l = *tuiWindow\winFlags|#WFLG_SIZEBRIGHT  : If *xmlA\value=0 Then wflgs-#WFLG_SIZEBRIGHT
                                   done=ntui_SetAttr{*tuiWindow,#TUIWA_WINFLAGS      ,wflgs}
        Case "sizegadget"        : wflgs.l = *tuiWindow\winFlags|#WFLG_SIZEGADGET  : If *xmlA\value=0 Then wflgs-#WFLG_SIZEGADGET
                                   done=ntui_SetAttr{*tuiWindow,#TUIWA_WINFLAGS      ,wflgs}
        Default
          done = False
       End Select

    Default
      done = False
  End Select
  Function Return done
End Function


_ntui_GetWindowAttr:
Function.w _ntui_GetWindowAttr{*tuiWindow.tuiWindow,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*tuiWindow}
  !_ASSERT{*tuiWindow\obj\classID=#TUICLASS_WINDOW}

  done.w = True
  Select ti_Tag
    Case #TUIWA_WINFLAGS   : *ti_Data\l = *tuiWindow\winFlags
    Case #TUIWA_ONCLOSE    : *ti_Data\l = str_GetPtr{*tuiWindow\onClose    }
    Case #TUIWA_ONWINDROP  : *ti_Data\l = str_GetPtr{*tuiWindow\onWinDrop  }
    Case #TUIWA_ONACTIVE   : *ti_Data\l = str_GetPtr{*tuiWindow\onActive   }
    Case #TUIWA_ONINACTIVE : *ti_Data\l = str_GetPtr{*tuiWindow\onInactive }
    Case #TUIWA_ONTICK     : *ti_Data\l = str_GetPtr{*tuiWindow\onTick     }
    Default
      done = False
  End Select
  Function Return done
End Function


_ntui_DispatchWindowEvent
Function.w _ntui_DispatchWindowEvent{*tuiWindow.tuiWindow,*tuiEvent.tuiEvent}
  !_ASSERT{*tuiWindow}
  !_ASSERT{*tuiWindow\obj\classID=#TUICLASS_WINDOW}

  !_ASSERT{*tuiEvent}
  *tuiObject.tuiObject = *tuiEvent\tuiObject
  !_ASSERT{*tuiObject}
  *tuiEngine.tuiEngine = *tuiObject\tuiEngine
  !_ASSERT{*tuiEngine}

  closeToolTip.l = False
  done.w = False

  Select *tuiEvent\evID
    Case #TUIEV_CLOSE
      If (*tuiWindow\onClose)
        str_Dup{&*tuiEvent\notifyID,*tuiWindow\onClose}
        _ntui_QueueEvent{*tuiEngine\outQ,*tuiEvent} : done = True
      EndIf
      closeToolTip=True

    Case #TUIEV_FOCUS
      ntui_SetFocus{*tuiWindow\lastFocus}

      If *tuiWindow\obj\child
        *mover.tuiObject = ntui_HitObject{*tuiWindow\obj\child,*tuiEvent\pos\x,*tuiEvent\pos\y}
        If *mover Then _ntui_SetMover{*mover}
      End If

      If (*tuiWindow\onActive)
        str_Dup{&*tuiEvent\notifyID,*tuiWindow\onActive}
        _ntui_QueueEvent{*tuiEngine\outQ,*tuiEvent}
      Else
        _ntui_DestroyEvent{*tuiEvent}
      EndIf

      closeToolTip=True
      done=True

    Case #TUIEV_LOSEFOCUS
      ntui_FlushRawKeys{}
      ntui_SetFocus{*tuiWindow\obj\tuiEngine}

      If (*tuiWindow\onInactive)
        str_Dup{&*tuiEvent\notifyID,*tuiWindow\onInactive}
        _ntui_QueueEvent{*tuiEngine\outQ,*tuiEvent}
      Else
        _ntui_DestroyEvent{*tuiEvent}
      EndIf

      closeToolTip=True
      done=True

    Case #TUIEV_MOUSEDOWN
      If ((*tuiEngine\focus><#NULL) AND (*tuiEngine\focus><*tuiWindow))
        If (*tuiEngine\focus\flags&#TUIF_DISABLED)=0
          If *tuiEngine\focus\DispatchEvent Then !_CallFuncPointer{*tuiEngine\focus\DispatchEvent,done.w,*tuiEngine\focus,*tuiEvent}
        End If
      End If

      If done=False
        If *tuiWindow\obj\child
          *mover.tuiObject = ntui_HitObject{*tuiWindow\obj\child,*tuiEvent\pos\x,*tuiEvent\pos\y}
        Else
          *mover=#NULL
        End If

        If *mover
          If (*mover\flags&#TUIF_DISABLED)=0
            If *mover\DispatchEvent Then !_CallFuncPointer{*mover\DispatchEvent,done.w,*mover,*tuiEvent}
            *tuiEngine\restingTime = -1000
          End If
        End If
      End If
      closeToolTip=True

    Case #TUIEV_MOUSEUP
      If ((*tuiEngine\focus><#NULL) AND (*tuiEngine\focus><*tuiWindow))
        If (*tuiEngine\focus\flags&#TUIF_DISABLED)=0
          If *tuiEngine\focus\DispatchEvent Then !_CallFuncPointer{*tuiEngine\focus\DispatchEvent,done.w,*tuiEngine\focus,*tuiEvent}
        End If
      End If

      If done=False
        If *tuiWindow\obj\child
          *mover.tuiObject = ntui_HitObject{*tuiWindow\obj\child,*tuiEvent\pos\x,*tuiEvent\pos\y}
        Else
          *mover=#NULL
        End If

        If *mover
          If (*mover\flags&#TUIF_DISABLED)=0
            If *mover\DispatchEvent Then !_CallFuncPointer{*mover\DispatchEvent,done.w,*mover,*tuiEvent}
          End If
        End If
      End If

    Case #TUIEV_MOUSEMOVE
      If ((*tuiEngine\focus><#NULL) AND (*tuiEngine\focus><*tuiWindow))
        If (*tuiEngine\focus\flags&#TUIF_DISABLED)=0
          If *tuiEngine\focus\DispatchEvent Then !_CallFuncPointer{*tuiEngine\focus\DispatchEvent,done.w,*tuiEngine\focus,*tuiEvent}
        End If
      End If

      If done=False
        If *tuiWindow\obj\child
          *mover.tuiObject = ntui_HitObject{*tuiWindow\obj\child,*tuiEvent\pos\x,*tuiEvent\pos\y}
        Else
          *mover=#NULL
        End If

        If *mover >< *tuiEngine\mover
          _ntui_SetMover{*mover}
          *tuiEngine\restingTime = 0
          closeToolTip=True
        End If

        If *mover
          If (*mover\flags&#TUIF_DISABLED)=0
            If *mover\DispatchEvent Then !_CallFuncPointer{*mover\DispatchEvent,done.w,*mover,*tuiEvent}
          End If
        End If
      End If

    Case #TUIEV_KEYUP
      If ((*tuiEngine\focus><#NULL) AND (*tuiEngine\focus><*tuiWindow))
        If (*tuiEngine\focus\flags&#TUIF_DISABLED)=0
          If *tuiEngine\focus\DispatchEvent Then !_CallFuncPointer{*tuiEngine\focus\DispatchEvent,done.w,*tuiEngine\focus,*tuiEvent}
        End If
      End If

    Case #TUIEV_KEYDOWN
      If ((*tuiEngine\focus><#NULL) AND (*tuiEngine\focus><*tuiWindow))
        If (*tuiEngine\focus\flags&#TUIF_DISABLED)=0
          If *tuiEngine\focus\DispatchEvent Then !_CallFuncPointer{*tuiEngine\focus\DispatchEvent,done.w,*tuiEngine\focus,*tuiEvent}
        End If
      End If

      If done=False
        If (*tuiEvent\value=#RAWKEY_TAB AND (*tuiEvent\qualifier_&#TUIQUAL_SHIFT)=0) OR *tuiEvent\value=#RAWKEY_RIGHT OR *tuiEvent\value=#RAWKEY_DOWN
          If *tuiEngine\focus=#NULL Then ntui_SetFocus{*tuiWindow}
          If *tuiEngine\focus
            *current.tuiObject = *tuiEngine\focus
            found.l = False
            While *current><#NULL AND NOT(found)
              If *current\child            ; descend
                *current = *current\child
                If ((*current\flags&#TUIF_WANTTAB)><0) AND ((*current\flags&#TUIF_DISABLED)=0)
                  ntui_SetFocus{*current} : found=True
                End If
              Else
                If *current\next_
                  *current = *current\next_  ; go side
                  If ((*current\flags&#TUIF_WANTTAB)><0) AND ((*current\flags&#TUIF_DISABLED)=0)
                    ntui_SetFocus{*current} : found=True
                  End If
                Else
                  found2.l = False
                  While *current\parent><#NULL AND NOT(found2)      ; go up
                    *current = *current\parent
                    If *current\next_
                      *current = *current\next_  ; go side
                      If ((*current\flags&#TUIF_WANTTAB)><0) AND ((*current\flags&#TUIF_DISABLED)=0)
                        ntui_SetFocus{*current} : found=True
                      End If
                      found2=True
                    End If
                  Wend
                  If found2=False
                    found=True
                    ntui_SetFocus{*tuiWindow}
                  End If
                End If
              End If
            Wend
          End If
        End If

        If (*tuiEvent\value=#RAWKEY_TAB AND (*tuiEvent\qualifier_&#TUIQUAL_SHIFT)><0) OR *tuiEvent\value=#RAWKEY_LEFT OR *tuiEvent\value=#RAWKEY_UP
          If *tuiEngine\focus=#NULL Then ntui_SetFocus{*tuiWindow}
          If *tuiEngine\focus
            *current.tuiObject = *tuiEngine\focus
            found.l = False
            While *current><#NULL AND NOT(found)
              If *current\child            ; descend
                *current = *current\child
                While *current\next_ : *current=*current\next_ : Wend ; go to the last child
                If ((*current\flags&#TUIF_WANTTAB)><0) AND ((*current\flags&#TUIF_DISABLED)=0)
                  ntui_SetFocus{*current} : found=True
                End If
              Else
                If *current\prev
                  *current = *current\prev  ; go side
                  If ((*current\flags&#TUIF_WANTTAB)><0) AND ((*current\flags&#TUIF_DISABLED)=0)
                    ntui_SetFocus{*current} : found=True
                  End If
                Else
                  found2.l = False
                  While *current\parent><#NULL AND NOT(found2)      ; go up
                    *current = *current\parent
                    If *current\prev
                      *current = *current\prev  ; go side
                      If ((*current\flags&#TUIF_WANTTAB)><0) AND ((*current\flags&#TUIF_DISABLED)=0)
                        ntui_SetFocus{*current} : found=True
                      End If
                      found2=True
                    End If
                  Wend
                  If found2=False
                    found=True
                    ntui_SetFocus{*tuiWindow}
                  End If
                End If
              End If
            Wend
          End If
        End If
      End If
      closeToolTip=True

    Case #TUIEV_RESIZE
      If (*tuiWindow\obj\flags&#TUIF_ONSCREEN><0) AND *tuiWindow\win><#NULL
        *rp.RastPort = ntui_ObtainRastPort{*tuiWindow}
        If *rp
          _ntui_Layout{*tuiWindow,*rp,#NULL}
          _ntui_Draw{*tuiWindow,*rp,*tuiWindow\obj\bbox}
          ntui_ReleaseRastPort{*tuiWindow}
        End If
      End If
      closeToolTip=True

    Case #TUIEV_TICK
      If ((*tuiEngine\focus><#NULL) AND (*tuiEngine\focus><*tuiWindow))
        If (*tuiEngine\focus\flags&#TUIF_DISABLED)=0
          If *tuiEngine\focus\DispatchEvent Then !_CallFuncPointer{*tuiEngine\focus\DispatchEvent,done.w,*tuiEngine\focus,*tuiEvent}
        End If
      End If

      If done=False
        If *tuiEngine\mover
          If (*tuiEngine\mover\flags&#TUIF_ACTIVE = 0)
            If *tuiEngine\mover\help
              If *tuiEngine\toolTip = #NULL
                *tuiEngine\restingTime+1
                If *tuiEngine\restingTime=12
                  ntui_PostEvent{*tuiEngine\mover,#TUIEV_TOOLTIP,*tuiEngine\restingTime}
                End If
              End If
            End If
          End If
        End If

        If (*tuiWindow\onTick)
          str_Dup{&*tuiEvent\notifyID,*tuiWindow\onTick}
          _ntui_QueueEvent{*tuiEngine\outQ,*tuiEvent} : done = True
        EndIf
      End If

    Case #TUIEV_WINDOWDROP
      If ((*tuiEngine\focus><#NULL) AND (*tuiEngine\focus><*tuiWindow))
        If (*tuiEngine\focus\flags&#TUIF_DISABLED)=0
          If *tuiEngine\focus\DispatchEvent Then !_CallFuncPointer{*tuiEngine\focus\DispatchEvent,done.w,*tuiEngine\focus,*tuiEvent}
        End If
      End If

      If done=False
        If *tuiWindow\obj\child
          *mover.tuiObject = ntui_HitObject{*tuiWindow\obj\child,*tuiEvent\pos\x,*tuiEvent\pos\y}
        Else
          *mover=#NULL
        End If

        If *mover
          If (*mover\flags&#TUIF_DISABLED)=0
            If *mover\DispatchEvent Then !_CallFuncPointer{*mover\DispatchEvent,done.w,*mover,*tuiEvent}
            *tuiEngine\restingTime = -1000
          End If
        End If
      End If

      If done=False
        If *mover
          *tuiEvent\tuiObject = *mover
        Else
          *tuiEvent\tuiObject = *tuiWindow
        End If
        If (*tuiWindow\onWinDrop)
          str_Dup{&*tuiEvent\notifyID,*tuiWindow\onWinDrop}
          _ntui_QueueEvent{*tuiEngine\outQ,*tuiEvent} : done = True
        EndIf
      End If
      closeToolTip=True

    Case #TUIEV_HSCROLL
      If *tuiWindow\obj\child
        *mover.tuiObject = ntui_HitObject{*tuiWindow\obj\child,*tuiEvent\pos\x,*tuiEvent\pos\y}
      Else
        *mover=#NULL
      End If

      If *mover
        If (*mover\flags&#TUIF_DISABLED)=0
          If *mover\DispatchEvent Then !_CallFuncPointer{*mover\DispatchEvent,done.w,*mover,*tuiEvent}
        End If
      End If

    Case #TUIEV_VSCROLL
      If *tuiWindow\obj\child
        *mover.tuiObject = ntui_HitObject{*tuiWindow\obj\child,*tuiEvent\pos\x,*tuiEvent\pos\y}
      Else
        *mover=#NULL
      End If

      If *mover
        If (*mover\flags&#TUIF_DISABLED)=0
          If *mover\DispatchEvent Then !_CallFuncPointer{*mover\DispatchEvent,done.w,*mover,*tuiEvent}
        End If
      End If

    Default ; no events left to send to focus/mover object...
      ;If ((*tuiEngine\focus><#NULL) AND (*tuiEngine\focus><*tuiWindow))
      ;  If (*tuiEngine\focus\flags&#TUIF_DISABLED)=0
      ;    If *tuiEngine\focus\DispatchEvent Then !_CallFuncPointer{*tuiEngine\focus\DispatchEvent,done.w,*tuiEngine\focus,*tuiEvent}
      ;  End If
      ;End If

  End Select

  If closeToolTip Then If *tuiEngine\toolTip Then ntui_FreeObject{*tuiEngine\toolTip} : *tuiEngine\toolTip=#NULL

  Function Return done
End Function




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeWindow {*tuiWindow.tuiWindow}                             /
;/                                                                             /
;/ Description:                                                                /
;/ private: free a tuiWindow
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiWindow.tuiWindow    : ???                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitWindow:
Statement _ntui_DeinitWindow{*tuiWindow.tuiWindow}
  !_ASSERT{*tuiWindow}
  !_ASSERT{*tuiWindow\obj\classID=#TUICLASS_WINDOW}
  ntui_HideWindow{*tuiWindow}
  ; free additional stuff, if any
  str_Free{&*tuiWindow\onClose}
  str_Free{&*tuiWindow\onWinDrop}
  str_Free{&*tuiWindow\onActive}
  str_Free{&*tuiWindow\onInactive}
  str_Free{&*tuiWindow\onTick}
End Statement



_ntui_LayoutWindow:
Statement _ntui_LayoutWindow{*tuiWindow.tuiWindow,*rp.RastPort,*bbox.tuiRect}
  !_ASSERT{*tuiWindow}
  !_ASSERT{*tuiWindow\obj\classID=#TUICLASS_WINDOW}

  *tui.tuiObject = *tuiWindow\obj
  !_ASSERT{*rp}
  *tuiEngine.tuiEngine = *tui\tuiEngine
  !_ASSERT{*tuiEngine}

  If *bbox  ; set new boundig box
    *tui\bbox\left      = *bbox\left
    *tui\bbox\top       = *bbox\top
    *tui\bbox\right     = *bbox\right
    *tui\bbox\bottom    = *bbox\bottom

    If *tuiWindow\win
      nx.l = *tuiWindow\win\LeftEdge
      ny.l = *tuiWindow\win\TopEdge
      nw.l = !tuiRectWidth {*bbox}
      nh.l = !tuiRectHeight{*bbox}
      If nw><*tuiWindow\win\Width OR nh><*tuiWindow\win\Height
        ;ChangeWindowBox_ *tuiWindow\win,nx,ny,nw,nh
        SizeWindow_ *tuiWindow\win,nw-*tuiWindow\win\Width,nh-*tuiWindow\win\Height
      End If
    End If
  End If

  If *tuiWindow\win ; update border end content box
    *tui\bbox\left      = 0
    *tui\bbox\top       = 0
    *tui\bbox\right     = *tuiWindow\win\Width-1
    *tui\bbox\bottom    = *tuiWindow\win\Height-1
    *tui\border\left    = *tuiWindow\win\BorderLeft
    *tui\border\top     = *tuiWindow\win\BorderTop
    *tui\border\right   = *tuiWindow\win\BorderRight
    *tui\border\bottom  = *tuiWindow\win\BorderBottom
  End If

  !tuiRemBorder{*tui\ibox,*tui\bbox,*tui\border}
  !tuiRemBorder{*tui\cbox,*tui\ibox,*tui\padding}

  *tui\flags      = *tui\flags | (#TUIF_ONSCREEN|#TUIF_DIRTY)

  !tuiCopyRect{cbox.tuiRect,*tui\cbox}

  menuBarHeight.l = 0
  *child.tuiObject = *tui\child
  If *child
    If *child\classID=#TUICLASS_GROUP
      *tuiGroup.tuiGroup=*child
      If *tuiGroup\subClassID=#TUIGROUP_MENUBAR
        cbox\bottom = *child\minsize\y + !tuiBorderHeight{*child\margin}
        _ntui_Layout{*child,*rp,cbox}
        cbox\top=cbox\bottom+1
        cbox\bottom = *tui\cbox\bottom
        *child=*child\next_
      End If
    End If

    If *child
      _ntui_Layout{*child,*rp,cbox}
    End If
  End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = ntui_ShowWindow {*tuiWindow.tuiWindow,@xpos.l,@ypos.l,:: /
;/ @*masterWindow.tuiWindow}                                                   /
;/                                                                             /
;/ Description:                                                                /
;/ Make a tuiWindow visible on the screen.
;/ Note: this function has no effect if the tuiEngine, to which the tuiWindow belongs too, is not popped up on a screen (=iconified)
;/ Note: if the window is aready visible on the screen, it will be activated and put to front.
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiWindow.tuiWindow    : tuiWindow                                             /
;/ - xpos.l                  : initial x position                                                          /
;/ - ypos.l                  : initial y position                                                           /
;/ - *masterWindow.tuiWindow : masterwindow, if any (for internal menu use only)                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ntui_ShowWindow{*tuiWindow.tuiWindow,@xpos.l,@ypos.l,@*masterWindow.tuiWindow}
!_ASSERT{*tuiWindow}
!_ASSERT{*tuiWindow\obj\classID=#TUICLASS_WINDOW}

  *tui.tuiObject = *tuiWindow
  *tuiEngine.tuiEngine = *tui\tuiEngine
If (*tuiEngine\scr = #NULL) Then _ntui_OpenScreen{*tuiEngine,str_Read{&*tuiEngine\pubScreenName},#NULL}
If (*tuiEngine\scr = #NULL) Then Function Return False ; no screen

succ.w = False
If *tuiWindow\win
  WindowToFront_ *tuiWindow\win
  If (*tuiWindow\winFlags&#WFLG_ACTIVATE) Then ActivateWindow_ *tuiWindow\win
  succ=True
Else
;  Forbid_
;  *oldFont.TextFont = *tuiEngine\scr\RastPort\Font
  *minsize.tuiPixel = _ntui_CalculateMinSize{*tuiWindow,*tuiEngine\buildRP}
;  SetFont_ *tuiEngine\scr\RastPort,*oldFont
;  Permit_
  ;/* set sizes ... */
  iww.l = Max(*minsize\x,*tui\bbox\right -*tui\bbox\left+1 - *tui\border\left-*tui\border\right )
  iwh.l = Max(*minsize\y,*tui\bbox\bottom-*tui\bbox\top +1 - *tui\border\top -*tui\border\bottom)

  DEFTYPE.NewWindow nw
  nw\LeftEdge    = xpos
  nw\TopEdge     = ypos

  If nw\LeftEdge =-1 Then nw\LeftEdge = *tui\bbox\left
  If nw\TopEdge  =-1 Then nw\TopEdge  = *tui\bbox\top

  If nw\LeftEdge =-1 Then nw\LeftEdge = (*tuiEngine\scr\Width  - iww)/2
  If nw\TopEdge  =-1 Then nw\TopEdge  = (*tuiEngine\scr\Height - iwh)/2
  nw\Width       = iww
  nw\Height      = iwh
  nw\DetailPen   = -1 ; use intuitions default
  nw\BlockPen    = -1
  nw\IDCMPFlags  = 0
  IDCMPFlags.l   = #IDCMP_CLOSEWINDOW|#IDCMP_ACTIVEWINDOW|#IDCMP_INACTIVEWINDOW|#IDCMP_REFRESHWINDOW
  IDCMPFlags     = IDCMPFlags|#IDCMP_MOUSEBUTTONS|#IDCMP_MOUSEMOVE|#IDCMP_INTUITICKS|#IDCMP_RAWKEY
  nw\Flags       = *tuiWindow\winFlags

  If (*tuiWindow\obj\flags&#TUIF_FIXWIDTH)=0 OR (*tuiWindow\obj\flags&#TUIF_FIXHEIGHT)=0 ; we need a size gadget
    If (nw\Flags&#WFLG_BORDERLESS) = 0 ; unless it is borderless...
      nw\Flags | #WFLG_SIZEGADGET|#WFLG_HASZOOM|#WFLG_SIZEBBOTTOM
    End If
  End If

  nw\FirstGadget = #NULL
  nw\CheckMark   = #NULL
  If *tuiWindow\obj\string
    nw\Title       = &*tuiWindow\obj\string\str
  Else
    nw\Title  = #NULL
  End If
  nw\Screen      = *tuiEngine\scr
  nw\BitMap      = #NULL
  nw\MinWidth    = 0
  nw\MinHeight   = 0
  nw\MaxWidth    = 0
  nw\MaxHeight   = 0
  nw\Type        = #CUSTOMSCREEN

  DEFTYPE.tag5 wtags
  wtags\ti_Tag =#WA_AutoAdjust,1,#WA_InnerWidth,iww,#WA_InnerHeight,iwh,#WA_BackFill,#LAYERS_NOBACKFILL,#TAG_DONE,0
  *tuiWindow\win = OpenWindowTagList_(nw,wtags)
  If *tuiWindow\win
    *tuiWindow\win\UserData = *tuiWindow
    *tuiWindow\state = #TUISTATE_OPEN
    succ=True
    ;Make layout
    *rp.RastPort = ntui_ObtainRastPort{*tuiWindow}

    wx.l  = *tuiWindow\win\BorderLeft
    wy.l  = *tuiWindow\win\BorderTop
    ww.l  = *tuiWindow\win\Width
    wh.l  = *tuiWindow\win\Height
    iww.l = *tuiWindow\win\Width     -*tuiWindow\win\BorderRight -*tuiWindow\win\BorderLeft
    iwh.l = *tuiWindow\win\Height    -*tuiWindow\win\BorderBottom-*tuiWindow\win\BorderTop

    If (*tuiWindow\obj\flags&#TUIF_FIXWIDTH)
      *tuiWindow\obj\maxsize\x = *tuiWindow\obj\minsize\x
    Else
      *tuiWindow\obj\maxsize\x = 32767
    End If
    If (*tuiWindow\obj\flags&#TUIF_FIXHEIGHT)
      *tuiWindow\obj\maxsize\y = *tuiWindow\obj\minsize\y
    Else
      *tuiWindow\obj\maxsize\y = 32767
    End If

    minW.l = *tuiWindow\obj\minsize\x + *tuiWindow\win\BorderLeft + *tuiWindow\win\BorderRight
    minH.l = *tuiWindow\obj\minsize\y + *tuiWindow\win\BorderTop  + *tuiWindow\win\BorderBottom
    maxW.l = *tuiWindow\obj\maxsize\x + *tuiWindow\win\BorderLeft + *tuiWindow\win\BorderRight
    maxH.l = *tuiWindow\obj\maxsize\y + *tuiWindow\win\BorderTop  + *tuiWindow\win\BorderBottom

    WindowLimits_ *tuiWindow\win, minW,minH,maxW,maxH
    *tuiWindow\win\UserPort = *tuiEngine\winPort
    ModifyIDCMP_ *tuiWindow\win,IDCMPFlags

    If *tuiEngine\appPort
      tag5.tag5\ti_Tag = #TAG_DONE,0
      *tuiWindow\appWin = AddAppWindowA_(#APP_WINDOWDROP,*tuiWindow,*tuiWindow\win,*tuiEngine\appPort,tag5)
    End If
    If *masterWindow><#NULL AND *masterWindow><-1
      *tuiWindow\win\WLayer\Window = *masterWindow\win
    End If

    If *rp
      _ntui_Layout{*tuiWindow\obj,*rp,#NULL}
      _ntui_Draw{*tuiWindow\obj,*rp,*tuiWindow\obj\bbox}
      ntui_ReleaseRastPort{*tuiWindow}
    End If

  End If
End If
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_CreateWindow {*tuiEngine.tuiEngine,title.s,winID.:: /
;/ l,@instanceID.l,@WFlags.l,@notify.l,@help.s,@flags.l,@userID.l}             /
;/                                                                             /
;/ Description:                                                                /
;/ Create a tuiWindow. This function will lock the tui.library until you call ntui_EndWidow. The tuiWindow will work as a suitable parent object for all sub-tuiObjects.                                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine : tuiEngine to which the tuiWindow belongs to                                             /
;/ - title.s      : Window Title                                                          /
;/ - winID.l      : winID                                                          /
;/ - instanceID.l : instanceID                                                    /
;/ - WFlags.l     : AmigaOS Window Flags (#WFLG_...)                                                         /
;/ - notify.l     : notify value if Close-Gadget is hit                                                         /
;/ - help.s       : short help text                                                           /
;/ - flags.l      : tuiFlags (#TUIF...)/
;/ - userID.l     : userID                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : tuiWindow of NULL if failed or window with winID/instanceID is already created                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_BeginWindow{title.s,nameID.s,@instanceID.l,@WFlags.l,@flags.l}
;*tuiWindow.tuiWindow = #NULL
;If ntui_GetWindowByID{tuiGlobal\buildHelper\tuiEngine,nameID,instanceID}=#NULL ; does not exist yet!
  If (flags=#TUI_NOFLAGS)
    flags.l = #TUIF_FIXSIZE
  End If

  *tuiWindow.tuiWindow = _ntui_CreateObject{#TUICLASS_WINDOW,SizeOf.tuiWindow,"",flags,nameID}
  If *tuiWindow
    If title Then str_Write{&*tuiWindow\obj\string,title}
    *tuiWindow\win            = #NULL
    *tuiWindow\instanceID     = instanceID
    *tuiWindow\obj\bgTuiPen   = #TUIPEN_BACKGROUND
    If WFlags=-1
      *tuiWindow\winFlags         = #WFLG_ACTIVATE|#WFLG_CLOSEGADGET|#WFLG_DRAGBAR|#WFLG_DEPTHGADGET|#WFLG_NEWLOOKMENUS
      *tuiWindow\winFlags         | #WFLG_REPORTMOUSE|#WFLG_RMBTRAP;|#WFLG_SIMPLE_REFRESH;|#WFLG_SMART_REFRESH ;| #WFLG_SMART_REFRESH
    Else
      *tuiWindow\winFlags       = WFlags
    End If
    str_Write{&*tuiWindow\onWinDrop,!NOTIFYID_WINDROP}
    str_Write{&*tuiWindow\onClose  ,!NOTIFYID_CLOSE}

    *tuiWindow\state          = #TUISTATE_CLOSED

    InitSemaphore_ *tuiWindow\lock

    !_GetFuncPointer{*tuiWindow\obj\Draw            ,_ntui_DrawWindow,{0,0,0}}
    !_GetFuncPointer{*tuiWindow\obj\Layout          ,_ntui_LayoutWindow,{0,0,0}}
    !_GetFuncPointer{*tuiWindow\obj\DispatchEvent   ,_ntui_DispatchWindowEvent,{0,0}}
    !_GetFuncPointer{*tuiWindow\obj\CalculateMinSize,_ntui_CalculateWindowMinSize,{0,0}}
    !_GetFuncPointer{*tuiWindow\obj\Deinit          ,_ntui_DeinitWindow,{0}}
    !_GetFuncPointer{*tuiWindow\obj\SetAttr         ,_ntui_SetWindowAttr,{0,0,0}}
    !_GetFuncPointer{*tuiWindow\obj\GetAttr         ,_ntui_GetWindowAttr,{0,0,0}}

;    tuiGlobal\buildHelper\tuiWindow               = *tuiWindow
    tuiGlobal\buildHelper\tuiParent               = *tuiWindow
    tuiGlobal\buildHelper\tuiPrev                 = #NULL
    If tuiGlobal\buildHelper\windowDepth=0
      tuiGlobal\buildHelper\tuiRootWin            = *tuiWindow
    End If
    tuiGlobal\buildHelper\windowDepth+1
  End If
;End If
Function Return *tuiWindow
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_EndWindow {}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ End a window definition,                                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : tuiWindow that was just terminated.                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_EndWindow{}
tuiGlobal\buildHelper\tuiRootWin = #NULL
tuiGlobal\buildHelper\windowDepth -1

tuiGlobal\buildHelper\tuiPrev    = tuiGlobal\buildHelper\tuiParent
tuiGlobal\buildHelper\tuiCurrent = tuiGlobal\buildHelper\tuiParent
If tuiGlobal\buildHelper\tuiParent
  tuiGlobal\buildHelper\tuiParent = tuiGlobal\buildHelper\tuiParent\parent
Else
  tuiGlobal\buildHelper\tuiParent = #NULL
End If
If tuiGlobal\buildHelper\tuiCurrent
  If tuiGlobal\buildHelper\tuiCurrent\classID><#TUICLASS_WINDOW
    error{"\\__THIS_FUNCTION: EndWindow does not match a BeginWindow!"}
  Else
    *tuiWindow.tuiWindow = tuiGlobal\buildHelper\tuiCurrent
    If *tuiWindow\obj\child
      addflags.l = *tuiWindow\obj\child\flags&#TUIF_FIXSIZE
      *tuiWindow\obj\flags | addflags
    End If
  End If
Else
  error{"\\__THIS_FUNCTION: EndWindow without BeginWindow!"}
End If
Function Return *tuiWindow
End Function






