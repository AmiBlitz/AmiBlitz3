; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "MLDemo"
; CreateIcon      = 0
; Residents       = "all.res,SDSTCP2.res,xpk.res,ttengine.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 10
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 197
; CursorColumn    = 102
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 15
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 15
; Max BlitzFont   = 4
; Max GTList      = 15
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Name: multilist.include                                                     /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements:  Amiblitz2.4                                                  /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Provide multi-list functionality.                                           /
;/ The "multi-list" is actually very similar to a "tree".                      /
;/                                                                             /
;/ Abstract:                                                                   /
;/ A multi-list is a "normal" list, but each item can have another multi-lis:: /
;/ t atached.                                                                  /
;/ This is the most common way to represent a file directory structure. This:: /
;/  is why this include has some special functions for file handling and a f:: /
;/ unction to draw the multi list, which is used in tui.include.               /
;/ Each node can have a label string and a user string, and a user value.      /
;/ The user value could be used to store ID numbers or a pointer to more dat:: /
;/ a belonging to the node. The structure is not very flexible, but ideal fo:: /
;/ r tree-views on data like file systems.                                     /
;/                                                                             /
;/ User Constants:  none                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////

CNIF #__include=0
Syntax 2
optimize 7
CEND
#TUI_HAS_TREEVIEW = 1

;/* ntui TreeView Sub-Types */
#TUITV_SIMPLE           = 0
#TUITV_FILESYSTEM       = 1

#TUITVA_BASE               =  #TUIA_USER
#TUITVA_ONEXPAND           =  0 | #TUITVA_BASE ; rw
#TUITVA_ONCOLLAPSE         =  1 | #TUITVA_BASE ; rw
#TUITVA_ROWHEIGHT          =  2 | #TUITVA_BASE ; r
#TUITVA_VISIBLELINES       =  3 | #TUITVA_BASE ; r
#TUITVA_TOTALLINES         =  4 | #TUITVA_BASE ; r
#TUITVA_TOPLINE            =  5 | #TUITVA_BASE ; rw
#TUITVA_VISIBLEWIDTH       =  6 | #TUITVA_BASE ; r
#TUITVA_TOTALWIDTH         =  7 | #TUITVA_BASE ; r
#TUITVA_LEFTOFFSET         =  8 | #TUITVA_BASE ; rw
#TUITVA_SELECTED           =  9 | #TUITVA_BASE ; rw
#TUITVA_ONEXPANDHOOK       = 10 | #TUITVA_BASE ; rw
#TUITVA_ONCOLLAPSEHOOK     = 11 | #TUITVA_BASE ; rw
#TUITVA_DOSPATTERN         = 12 | #TUITVA_BASE ; rw

NEWTYPE.tuiTreeView
obj.tuiObject        ; tui object header
subClassID.l
;*hScroller.tuiScroller
;*vScroller.tuiScroller
visibleLines.l
topLine.l
totalWidth.l
visibleWidth.l
leftOffset.l
totalLines.l         ;  Number of used lines in Ted
step_.tuiPixel
rowheight.l
*onExpand.str
*onCollapse.str
*expandHook.tuiFunc
*collapseHook.tuiFunc
*collapseImg.tuiTBImage
*expandImg.tuiTBImage
*root.tuiTreeNode
*pattern.str
*patternP.b ; match pattern
*scrollView.tuiScrollView
End NEWTYPE


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  pixels.l = ml_GetPixelWidth {*rp.RastPort,*node.tuiTreeNode,sdepth.l}  /
;/                                                                             /
;/ Description:                                                                /
;/ Calculate the width in pixels needed to draw the list in the current state. /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort   : rastport to draw into                                    /
;/ - *node.tuiTreeNode  : node to start                                            /
;/ - sdepth.l       : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - pixels.l     : number of pixels                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_GetPixelWidth {*rp.RastPort,*node.tuiTreeNode,sdepth.l}
pixwidth.l=1
xs.l = sdepth * *rp\TxWidth*2
While *node
  If *node\typ = #TUINODE_BRANCH
    If *node\expanded
     b.s = "[-] "+str_Read{&*node\label}
     tstwidth.l = TextLength_ (*rp,&b.s,Peek.l(&b.s-4)) +xs
     pixwidth.l = Max(tstwidth,pixwidth)
     tstwidth.l = _ntui_GetPixelWidth{*rp,*node\child_node,sdepth+1}
    Else
     b.s = "[+] "+str_Read{&*node\label}
     tstwidth.l = TextLength_ (*rp,&b.s,Peek.l(&b.s-4)) + xs
    End If
  Else
    b.s = str_Read{&*node\label}
    tstwidth.l = TextLength_ (*rp,&b.s,Peek.l(&b.s-4)) + xs
  End If
  pixwidth.l = Max(tstwidth,pixwidth)
  *node=*node\next_node
Wend
Function Return pixwidth
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ml_ExpandPath {*node.tuiTreeNode,@pattern.s}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *node.tuiTreeNode  : ???                                                      /
;/ - pattern.s      : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_TreeViewExpandPathHook:
Statement _ntui_TreeViewExpandPathHook {*tuiTreeView.tuiTreeView,*node.tuiTreeNode}
If *node
  If *node\typ=#TUINODE_BRANCH
    ntui_DestroyAllChildren {*node}
    path.s = str_Read{&*node\userStr}
    *fib.FileInfoBlock = AllocDosObject_ (#DOS_FIB,#TAG_DONE)
    If *fib
      lock.l = Lock_(&path.s,#ACCESS_READ)
      If lock
        oldlock.l = CurrentDir_(lock)
        If oldlock
          If Examine_(lock,*fib)
            While ExNext_(lock,*fib)
              file_.s = Peek.s(&*fib\fib_FileName)
              filename.s = _ntui_AddPart{path,file_}
              *newnode.tuiTreeNode=#NULL
              If *fib\fib_DirEntryType<0
                If *tuiTreeView\patternP Then accept.l=MatchPatternNoCase_ (*tuiTreeView\patternP,&file_):Else accept=True
                If accept
                  *newnode.tuiTreeNode = ntui_CreateNode{*node,#TUINODE_LEAF,file_,filename,0,#TUIINSERT_SORTLABEL,True}
                  If *newnode
                    *tbi.tuiTBImage = ntui_CreateTBImage{*tuiTreeView\obj\tuiEngine,"FILE",#TUISIZE_INLINE,#TUISIZE_INLINE}
                    ;*tbi.tuiTBImage = ntui_CreateTBImage{*tuiTreeView\obj\tuiEngine,filename,#TUISIZE_INLINE,#TUISIZE_INLINE}
                    If *tbi
                      ntui_SetNodeAttr{*newnode,#TUINA_IMAGE,*tbi}
                    End If
                  End If
                End If
              Else
                *newnode.tuiTreeNode = ntui_CreateNode {*node,#TUINODE_BRANCH,file_,filename,1,#TUIINSERT_SORTLABEL,True}
                If *newnode
                  *tbi.tuiTBImage = ntui_CreateTBImage{*tuiTreeView\obj\tuiEngine,"PATH",#TUISIZE_INLINE,#TUISIZE_INLINE}
                  ;*tbi.tuiTBImage = ntui_CreateTBImage{*tuiTreeView\obj\tuiEngine,filename,#TUISIZE_INLINE,#TUISIZE_INLINE}
                  If *tbi
                    ntui_SetNodeAttr{*newnode,#TUINA_IMAGE,*tbi}
                  End If
                End If
              End If
            Wend
          End If

          oldlock = CurrentDir_ (oldlock)
        End If
        UnLock_ lock
        FreeDosObject_ #DOS_FIB,*fib
      End If
    End If
    ntui_SetNodeAttr{*node,#TUINA_EXPANDED,True}
  End If
End If
End Statement



_ntui_CalculateTreeViewMinSize:
Statement _ntui_CalculateTreeViewMinSize{*tuiTreeView.tuiTreeView,*rp.RastPort}
  !_ASSERT{*tuiTreeView}
  !_ASSERT{*tuiTreeView\obj\classID=#TUICLASS_TREEVIEW}

  *tuiEngine.tuiEngine = *tuiTreeView\obj\tuiEngine : If *tuiEngine=#NULL OR *rp=#NULL Then Statement Return
  *tuiTreeView\obj\minsize\x  = !tuiBorderWidth{*tuiTreeView\obj\padding}
  *tuiTreeView\obj\minsize\y  = !tuiBorderHeight{*tuiTreeView\obj\padding}

  _ntui_GetBorderSize{*tuiEngine,*tuiTreeView\obj\borderType,*tuiTreeView\obj\flags,*tuiTreeView\obj\border}

  *tuiTreeView\obj\minsize\x + !tuiBorderWidth{*tuiTreeView\obj\border}
  *tuiTreeView\obj\minsize\y + !tuiBorderHeight{*tuiTreeView\obj\border}

  If *tuiTreeView\obj\borderType><#TUIBORDER_NONE
  ;  If *tuiTreeView\hScroller Then ntui_SetAttr{*tuiTreeView\hScroller,#TUIA_BORDERTYPE,#TUIBORDER_NONE}
  ;  If *tuiTreeView\vScroller Then ntui_SetAttr{*tuiTreeView\vScroller,#TUIA_BORDERTYPE,#TUIBORDER_NONE}
  End If

  *tuiTreeView\rowheight = *tuiEngine\defSize[#TUISIZE_INLINE]

  *child.tuiObject = *tuiTreeView\obj\child
  While *child
    _ntui_CalculateMinSize{*child,*rp}
    *child=*child\next_
  Wend

;  If *tuiTreeView\hScroller Then *tuiTreeView\obj\minsize\y + *tuiTreeView\hScroller\obj\minsize\y
;  If *tuiTreeView\vScroller Then *tuiTreeView\obj\minsize\x + *tuiTreeView\vScroller\obj\minsize\x

  h.l = ntui_GetVisibleRows {*tuiTreeView\root}
  *tuiTreeView\obj\minsize\y + h * *tuiTreeView\rowheight
  w.l = _ntui_GetPixelWidth {*rp,*tuiTreeView\root,0}
  *tuiTreeView\obj\minsize\x + w

End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ml_CollapsePath {*node.tuiTreeNode}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *node.tuiTreeNode    : ???                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_TreeViewCollapsePathHook:
Statement _ntui_TreeViewCollapsePathHook{*tuiTreeView.tuiTreeView,*node.tuiTreeNode}
If *node
  If *node\typ=#TUINODE_BRANCH
    ntui_DestroyAllChildren {*node}
    ntui_SetNodeAttr{*node,#TUINA_EXPANDED,False}
  End If
End If
End Statement


_ntui_DrawTreeView:
Statement _ntui_DrawTreeView{*tuiTreeView.tuiTreeView,*rp.RastPort,*rpclip.tuiRect}
  !_ASSERT{*tuiTreeView}
  !_ASSERT{*tuiTreeView\obj\classID=#TUICLASS_TREEVIEW}

  *tuiEngine.tuiEngine = *tuiTreeView\obj\tuiEngine
  !_ASSERT{*tuiEngine}
  !_ASSERT{*rp}

  !tuiAndRect{bclip.tuiRect,*tuiTreeView\obj\bbox,*rpclip}
  If !tuiValidRect{bclip}=False Then Statement Return

  If (*tuiTreeView\obj\borderType><#TUIBORDER_NONE)
    bgDone.l = ntui_DrawBorder{*tuiEngine,*rp,*tuiTreeView\obj\bbox,*tuiTreeView\obj\borderType,*tuiTreeView\obj\flags}
  Else
    bgDone = False
  End If

;    If *tuiTreeView\hScroller
;      If (*tuiTreeView\hScroller\obj\flags&#TUIF_ONSCREEN) Then _ntui_Draw{*tuiTreeView\hScroller,*rp,*rpclip}
;    End If
;    If *tuiTreeView\vScroller
;      If (*tuiTreeView\vScroller\obj\flags&#TUIF_ONSCREEN) Then _ntui_Draw{*tuiTreeView\vScroller,*rp,*rpclip}
;    End If

  !tuiAndRect{iclip.tuiRect,*rpclip,*tuiTreeView\obj\ibox}
  If !tuiValidRect{iclip}=False Then Statement Return

  If *tuiTreeView\obj\bgTuiPen><#TUIPEN_TRANSPARENT AND bgDone=False
    CNIF #TUI_DEBUG
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_GREEN]
    CELSE
    SetAPen_ *rp,*tuiEngine\pen[*tuiTreeView\obj\bgTuiPen]
    CEND
    !tuiAndRect{iclip.tuiRect,*tuiTreeView\obj\ibox,*rpclip}
    If !tuiValidRect{iclip}
      RectFill_ *rp,iclip\left,iclip\top,iclip\right,iclip\bottom
    End If
  End If


  !tuiAndRect{cclip.tuiRect,*rpclip,*tuiTreeView\obj\cbox}
  If !tuiValidRect{cclip}=False Then Statement Return


  depth_.l = 0
  y1.l = *tuiTreeView\obj\cbox\top
  x1.l = *tuiTreeView\obj\cbox\left
  iw.l = ntui_GetTBImageWidth{*tuiTreeView\expandImg}
  dxs.l = iw*2/3
  *node.tuiTreeNode = *tuiTreeView\root
  *next_.tuiTreeNode = #NULL
  hasprev.l = False
  hasnext.l = False
  While *node><#NULL AND y1<=cclip\bottom
    If *node\active
      SetBPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
      SetDrMd_ *rp,1
    Else
      If *tuiTreeView\obj\bgTuiPen><#TUIPEN_TRANSPARENT
        SetBPen_ *rp,*tuiEngine\pen[*tuiTreeView\obj\bgTuiPen]
        SetDrMd_ *rp,1
      Else
        SetDrMd_ *rp,0
      End If
    End If
    y2.l = y1 + *tuiTreeView\rowheight-1
    yt.l = y1 + *rp\TxBaseline
    xoff.l = x1+depth_*dxs

    If *node\typ = #TUINODE_BRANCH
      bbox.tuiRect\left = xoff,y1,xoff+iw-1,y2
      If *node\expanded
        If y2>=cclip\top
          ntui_DrawTBImage{*tuiTreeView\collapseImg,*rp,bbox,bbox,0,#TUIPEN_TRANSPARENT}
          If *node\tbi
            bbox\left=bbox\right+1
            bbox\right=bbox\left+iw-1
            ntui_DrawTBImage{*node\tbi,*rp,bbox,bbox,0,#TUIPEN_TRANSPARENT}
            Move_ *rp,xoff+iw+iw,yt
          Else
            Move_ *rp,xoff+iw,yt
          End If

          If *node\label
            SetAPen_ *rp,2
            Text_ *rp,&*node\label\str,*node\label\size
          End If
        End If
        *next_ = ntui_GetHeadNode{*node\child_node}
        If *next_
          depth_+1
        Else
          *next_ = *node\next_node
        End If
      Else
        If y2>=cclip\top
          ntui_DrawTBImage{*tuiTreeView\expandImg,*rp,bbox,bbox,0,#TUIPEN_TRANSPARENT}
          If *node\tbi
            bbox\left=bbox\right+1
            bbox\right=bbox\left+iw-1
            ntui_DrawTBImage{*node\tbi,*rp,bbox,bbox,0,#TUIPEN_TRANSPARENT}
            Move_ *rp,xoff+iw+iw,yt
          Else
            Move_ *rp,xoff+iw,yt
          End If
          If *node\label
            SetAPen_ *rp,2
            Text_ *rp,&*node\label\str,*node\label\size
          End If
        End If
        *next_ = *node\next_node
      End If
    Else
      If y2>=cclip\top
        If *node\tbi
          bbox.tuiRect\left = xoff,y1,xoff+iw-1,y2
          ntui_DrawTBImage{*node\tbi,*rp,bbox,bbox,0,#TUIPEN_TRANSPARENT}
          Move_ *rp,xoff+iw,yt
        Else
          Move_ *rp,xoff,yt
        End If

        If *node\label
          SetAPen_ *rp,1
          Text_ *rp,&*node\label\str,*node\label\size
        End If
      End If
      *next_ = *node\next_node
    End If

    If *node\next_node Then hasnext=True : Else hasnext=False
    If *node\prev_node Then hasprev=True : Else hasprev=False

    *snode.tuiTreeNode=*node

    While *next_=#NULL AND depth_>0
      depth_-1
      *next_ = *node\parent_node
      If *next_ Then *node=*next_:*next_=*next_\next_node
    Wend

    If xoff>x1 AND y2>=cclip\top
      xm.l = xoff-dxs/2-1
      If hasnext
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
        Move_ *rp,xm,y1  : Draw_ *rp,xm,y2
        Move_ *rp,xm,(y1+y2+1)/2 : Draw_ *rp,xoff-2,(y1+y2+1)/2
      Else
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
        Move_ *rp,xm,y1  : Draw_ *rp,xm,(y2+y1)/2
        Move_ *rp,xm,(y1+y2+1)/2  : Draw_ *rp,xoff-2,(y1+y2+1)/2
      End If

      While xoff>x1
        xoff-dxs
        If *snode
          *snode = *snode\parent_node
          If *snode\next_node
            Move_ *rp,xoff-dxs/2-1,y1 : Draw_ *rp,xoff-dxs/2-1,y2
          End If
        End If
      Wend
    End If
    y1 + *tuiTreeView\rowheight
    *node=*next_

  Wend

End Statement

_ntui_LayoutTreeView:
Statement _ntui_LayoutTreeView{*tuiTreeView.tuiTreeView,*rp.RastPort,*bbox.tuiRect}
  !_ASSERT{*tuiTreeView}
  !_ASSERT{*tuiTreeView\obj\classID=#TUICLASS_TREEVIEW}

  *tui.tuiObject = *tuiTreeView
  *tuiEngine.tuiEngine = *tuiTreeView\obj\tuiEngine
  !_ASSERT{*tuiEngine}
  !_ASSERT{*rp}

  If *bbox
    !tuiCopyRect{*tui\bbox,*bbox}
  End If
  _ntui_GetBorderSize{*tui\tuiEngine,*tui\borderType,*tui\flags,*tui\border}
  !tuiRemBorder{*tui\ibox,*tui\bbox,*tui\border}
  !tuiRemBorder{*tui\cbox,*tui\ibox,*tui\padding}
;
;  If *tuiTreeView\vScroller
;    xs.l = *tuiTreeView\vScroller\obj\minsize\x
;    !tuiCopyRect{sbox.tuiRect,*tui\ibox}
;    *tui\ibox\right - xs
;    *tui\cbox\right = *tui\ibox\right
;    sbox\left  = *tui\cbox\right +1
;    _ntui_Layout{*tuiTreeView\vScroller,*rp,sbox}
;  End If
;
;  If *tuiTreeView\hScroller
;    ys.l = *tuiTreeView\hScroller\obj\minsize\y
;    !tuiCopyRect{sbox.tuiRect,*tui\ibox}
;    *tui\ibox\bottom - ys
;    *tui\cbox\bottom = *tui\ibox\bottom
;    sbox\top  = *tui\cbox\bottom +1
;    _ntui_Layout{*tuiTreeView\hScroller,*rp,sbox}
;  End If

  *tuiTreeView\visibleLines = !tuiRectHeight{*tui\cbox} /*tuiTreeView\rowheight
  *tuiTreeView\visibleWidth = !tuiRectWidth{*tui\cbox}

  ;If *tuiTreeView\vScroller Then _ntui_UpdateScroller{*tuiTreeView\vScroller,*tuiTreeView\topLine,*tuiTreeView\visibleLines,*tuiTreeView\totalLines,1,False}
  ;If *tuiTreeView\hScroller Then _ntui_UpdateScroller{*tuiTreeView\hScroller,*tuiTreeView\leftOffset,*tuiTreeView\visibleWidth,*tuiTreeView\totalWidth,1,False}
End Statement


_ntui_SetTreeViewAttr:
Function.w _ntui_SetTreeViewAttr{*tuiTreeView.tuiTreeView,ti_Tag.l,ti_Data.l}
  !_ASSERT{*tuiTreeView}
  !_ASSERT{*tuiTreeView\obj\classID=#TUICLASS_TREEVIEW}

  done.w = True

  *rp.RastPort = ntui_ObtainRastPort{*tuiTreeView}

  Select ti_Tag
    Case #TUITVA_TOPLINE
    ;: _ntui_ScrollTreeView{*tuiTreeView,0,ti_Data-*tuiTreeView\topLine,*rp}  : _ntui_PropagateBind{*tuiTreeView,#TUIEV_BIND_VVALUE,*tuiTreeView\topLine,#NULL}
    Case #TUITVA_LEFTOFFSET
    ;: _ntui_ScrollTreeView{*tuiTreeView,ti_Data-*tuiTreeView\leftOffset,0,*rp} : _ntui_PropagateBind{*tuiTreeView,#TUIEV_BIND_HVALUE,*tuiTreeView\leftOffset,#NULL}
    Case #TUITVA_ONCOLLAPSE         : str_WritePtr{&*tuiTreeView\onCollapse,ti_Data}
    Case #TUITVA_ONEXPAND           : str_WritePtr{&*tuiTreeView\onExpand,ti_Data}
    Case #TUITVA_ONCOLLAPSEHOOK     : *tuiTreeView\collapseHook = ti_Data
    Case #TUITVA_ONEXPANDHOOK       : *tuiTreeView\expandHook =ti_Data
    Case #TUITVA_DOSPATTERN
      str_WritePtr{&*tuiTreeView\pattern,ti_Data}
      If *tuiTreeView\patternP Then FreeVec_ *tuiTreeView\patternP
      If *tuiTreeView\pattern
        *tuiTreeView\patternP = AllocVec_(str_Len{*tuiTreeView\pattern}*3+4,#MEMF_ANY)
        ParsePatternNoCase_ &*tuiTreeView\pattern\str,*tuiTreeView\patternP,str_Len{*tuiTreeView\pattern}*3+4
      End If
    Case #TUITVA_SELECTED           : ; todo
    Default
      done = False
  End Select

  If *rp Then ntui_ReleaseRastPort{*tuiTreeView}

  Function Return done
End Function


_ntui_GetTreeViewAttr:
Function.w _ntui_GetTreeViewAttr{*tuiTreeView.tuiTreeView,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*tuiTreeView}
  !_ASSERT{*tuiTreeView\obj\classID=#TUICLASS_TREEVIEW}

  done.w = True
  Select ti_Tag
    Case #TUITVA_ROWHEIGHT          : *ti_Data\l = *tuiTreeView\rowheight
    Case #TUITVA_VISIBLELINES       : *ti_Data\l = *tuiTreeView\visibleLines
    Case #TUITVA_TOTALLINES         : *ti_Data\l = *tuiTreeView\totalLines
    Case #TUITVA_TOPLINE            : *ti_Data\l = *tuiTreeView\topLine
    Case #TUITVA_VISIBLEWIDTH       : *ti_Data\l = *tuiTreeView\visibleWidth
    Case #TUITVA_TOTALWIDTH         : *ti_Data\l = *tuiTreeView\totalWidth
    Case #TUITVA_LEFTOFFSET         : *ti_Data\l = *tuiTreeView\leftOffset
    Case #TUITVA_ONCOLLAPSE         : *ti_Data\l = str_GetPtr{*tuiTreeView\onCollapse}
    Case #TUITVA_ONEXPAND           : *ti_Data\l = str_GetPtr{*tuiTreeView\onExpand}
    Case #TUITVA_ONCOLLAPSEHOOK     : *ti_Data\l = *tuiTreeView\collapseHook
    Case #TUITVA_ONEXPANDHOOK       : *ti_Data\l = *tuiTreeView\expandHook
    Case #TUITVA_DOSPATTERN         : *ti_Data\l = str_GetPtr{*tuiTreeView\pattern}
    Case #TUITVA_SELECTED           : *ti_Data\l = 0 ; todo
    Default
      done = False
  End Select

  Function Return done
End Function


_ntui_DeinitTreeView:
Statement _ntui_DeinitTreeView{*tuiTreeView.tuiTreeView}
  !_ASSERT{*tuiTreeView}
  !_ASSERT{*tuiTreeView\obj\classID=#TUICLASS_TREEVIEW}

  If *tuiTreeView\root
    ntui_DestroyAllNodes{*tuiTreeView\root}
    *tuiTreeView\root = #NULL
  End If

  If *tuiTreeView\patternP Then FreeVec_ *tuiTreeView\patternP
  str_Free{&*tuiTreeView\pattern}

End Statement


_ntui_DispatchTreeViewEvent:
Function.w _ntui_DispatchTreeViewEvent{*tuiTreeView.tuiTreeView,*tuiEvent.tuiEvent}
  !_ASSERT{*tuiTreeView}
  !_ASSERT{*tuiTreeView\obj\classID=#TUICLASS_TREEVIEW}

  done.l = False
  Select *tuiEvent\evID
    Case #TUIEV_MOUSEDOWN
      If *tuiEvent\value = 0 ; we want TreeView 0
        If ntui_HitObject{*tuiTreeView,*tuiEvent\pos\x,*tuiEvent\pos\y}
          ntui_SetFocus{*tuiTreeView}
          done      = True
          *tuiTreeView\obj\flags | #TUIF_ACTIVE
          str_Dup{&*tuiEvent\notifyID,*tuiTreeView\obj\onTouch}
          ntui_Refresh{*tuiTreeView,#NULL}
          hitl.l = (*tuiEvent\pos\y - *tuiTreeView\obj\cbox\top) / *tuiTreeView\rowheight
          hito.l = (*tuiEvent\pos\x - *tuiTreeView\obj\cbox\left)

          *node.tuiTreeNode = ntui_FindNode{*tuiTreeView\root,hitl}
          If *node
            If *node\typ=#TUINODE_BRANCH
              ntui_DeactivateAll{*tuiTreeView\root}
              If *node\expanded=False
                If *tuiTreeView\expandHook Then !_CallFuncPointer{*tuiTreeView\expandHook,res.l,*tuiTreeView,*node}
                ntui_SetNodeAttr{*node,#TUINA_ACTIVE,True}
                ntui_SetNodeAttr{*node,#TUINA_EXPANDED,True}
              Else
                If *tuiTreeView\collapseHook Then !_CallFuncPointer{*tuiTreeView\collapseHook,res.l,*tuiTreeView,*node}
                ntui_SetNodeAttr{*node,#TUINA_ACTIVE,False}
                ntui_SetNodeAttr{*node,#TUINA_EXPANDED,False}
              End If
            End If

            *rp.RastPort = ntui_ObtainRastPort{*tuiTreeView\obj\parent}
            If *rp
              _ntui_CalculateTreeViewMinSize{*tuiTreeView,*rp}
              _ntui_Layout{*tuiTreeView\obj\parent,*rp,#NULL}
              ntui_ReleaseRastPort{*tuiTreeView\obj\parent}
            End If
          End If
        End If
      End If

    Case #TUIEV_MOUSEUP
      If *tuiEvent\value = 0 ; we want TreeView 0
        If *tuiTreeView\obj\flags&#TUIF_ACTIVE
          If ntui_HitObject{*tuiTreeView,*tuiEvent\pos\x,*tuiEvent\pos\y}
          done    = True
          *tuiTreeView\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
          ;ntui_Refresh{*tuiTreeView,#NULL}
          End If
        End If
      End If

    Case #TUIEV_MOUSEMOVE
  End Select

  If done
    If (*tuiEvent\notifyID)
      *tuiEvent\tuiObject = *tuiTreeView
      _ntui_QueueEvent{*tuiTreeView\obj\tuiEngine\outQ,*tuiEvent}
    Else
      _ntui_DestroyEvent{*tuiEvent}
    End If
  End If

Function Return done
End Function


Function.tuiTreeView ntui_TreeView{width.l,height.l,@help.s,@flags.l,@nameID.s}
*scrollView.tuiScrollView = ntui_BeginScrollView{width,height}
If (flags=#TUI_NOFLAGS) Then flags=0
*tuiTreeView.tuiTreeView = (.tuiTreeView)_ntui_CreateObject{#TUICLASS_TREEVIEW,SizeOf.tuiTreeView,help,flags,nameID}
If *tuiTreeView

  *tuiTreeView\step_\x = *tuiTreeView\obj\tuiEngine\defStep\x
  *tuiTreeView\step_\y = 1
  *tuiTreeView\subClassID = #TUITV_SIMPLE

  *tuiTreeView\rowheight                    = 8
  *tuiTreeView\obj\borderType               = #TUIBORDER_NONE;RECESSED
  *tuiTreeView\leftOffset                   = 0
  *tuiTreeView\topLine                      = 0
  *tuiTreeView\pattern                      = #NULL
  *tuiTreeView\patternP                     = #NULL

  *tuiTreeView\obj\bgTuiPen                 = #TUIPEN_HALFSHADOW
  *tuiTreeView\obj\margin\left = 0,0,0,0
  *tuiTreeView\scrollView = *scrollView
  *tuiTreeView\root =  ntui_CreateNode{#NULL,#TUINODE_BRANCH,"root","",0,#TUIINSERT_HEAD,False}

  !_GetFuncPointer{*tuiTreeView\obj\Draw            ,_ntui_DrawTreeView,{0,0,0}}
  !_GetFuncPointer{*tuiTreeView\obj\Layout          ,_ntui_LayoutTreeView,{0,0,0}}
  !_GetFuncPointer{*tuiTreeView\obj\DispatchEvent   ,_ntui_DispatchTreeViewEvent,{0,0}}
  !_GetFuncPointer{*tuiTreeView\obj\CalculateMinSize,_ntui_CalculateTreeViewMinSize,{0,0}}
  !_GetFuncPointer{*tuiTreeView\obj\Deinit          ,_ntui_DeinitTreeView,{0}}
  !_GetFuncPointer{*tuiTreeView\obj\SetAttr         ,_ntui_SetTreeViewAttr,{0,0,0}}
  !_GetFuncPointer{*tuiTreeView\obj\GetAttr         ,_ntui_GetTreeViewAttr,{0,0,0}}

  *tuiTreeView\expandHook   = #NULL
  *tuiTreeView\collapseHook = #NULL

  *tuiTreeView\collapseImg = ntui_CreateTBImage{*tuiTreeView\obj\tuiEngine,"NODECOLLAPSE",#TUISIZE_INLINE,#TUISIZE_INLINE}
  *tuiTreeView\expandImg   = ntui_CreateTBImage{*tuiTreeView\obj\tuiEngine,"NODEEXPAND",#TUISIZE_INLINE,#TUISIZE_INLINE}

  ntui_SetAttr{*scrollView,#TUIA_PADDING,0}
  ntui_SetAttr{*scrollView,#TUIA_BGPEN,*tuiTreeView\obj\bgTuiPen}

End If
ntui_EndScrollView{}
Function Return *tuiTreeView
End Function


Function.tuiTreeView ntui_DirView{width.l,height.l,pattern.s,@help.s,@flags.l,@nameID.s}
*tuiTreeView.tuiTreeView =  ntui_TreeView{width,height,help,flags,nameID}
If *tuiTreeView
  !_GetFuncPointer{*tuiTreeView\expandHook        ,_ntui_TreeViewExpandPathHook,{0,0}}
  !_GetFuncPointer{*tuiTreeView\collapseHook      ,_ntui_TreeViewCollapsePathHook,{0,0}}
  _ntui_SetTreeViewAttr{*tuiTreeView,#TUITVA_DOSPATTERN,&pattern}
  *tuiTreeView\subClassID = #TUITV_FILESYSTEM
  ntui_DestroyAllNodes{*tuiTreeView\root}
  *tuiTreeView\root =  ntui_CreateNode{#NULL,#TUINODE_BRANCH,"Sys:","Sys:",0,#TUIINSERT_HEAD,False}
End If
Function Return *tuiTreeView
End Function




