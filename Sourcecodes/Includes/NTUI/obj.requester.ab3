; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; FuncOptimize    = 0
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 405
; CursorColumn    = 18
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
#TUI_HAS_REQUESTER = 1

; Requester Types
#TUIRT_FILE    = 0 ; ask for file
#TUIRT_SCREEN  = 1 ; ask for screen
#TUIRT_FONT    = 2 ; ask for font
#TUIRT_INFO    = 3 ; message with several options
#TUIRT_MAX     = 4

#TUIRA_BASE           = #TUIA_USER

; general
#TUIRA_TYPE           = #TUIRA_BASE + 0
#TUIRA_ONOK           = #TUIRA_BASE + 1
#TUIRA_ONOKCB         = #TUIRA_BASE + 2
#TUIRA_ONCANCEL       = #TUIRA_BASE + 3
#TUIRA_ONCANCELCB     = #TUIRA_BASE + 4
#TUIRA_MODAL          = #TUIRA_BASE + 5
#TUIRA_OK             = #TUIRA_BASE + 6
#TUIRA_CANCEL         = #TUIRA_BASE + 7
#TUIRA_TITLE          = #TUIRA_BASE + 8

; file
#TUIRA_PATH           = #TUIRA_BASE + 10
#TUIRA_FILE           = #TUIRA_BASE + 11
#TUIRA_PATTERN        = #TUIRA_BASE + 12
#TUIRA_SAVEMODE       = #TUIRA_BASE + 13
#TUIRA_MULTISELECT    = #TUIRA_BASE + 14
#TUIRA_DRAWERSONLY    = #TUIRA_BASE + 15
#TUIRA_NOICONS        = #TUIRA_BASE + 16

#TUIRA_FIRSTFILENAME  = #TUIRA_BASE + 17
#TUIRA_NEXTFILENAME   = #TUIRA_BASE + 18
#TUIRA_NUMFILES       = #TUIRA_BASE + 19

; screen
#TUIRA_SCREENMODEID   = #TUIRA_BASE + 30
#TUIRA_SCREENWIDTH    = #TUIRA_BASE + 31
#TUIRA_SCREENHEIGHT   = #TUIRA_BASE + 32
#TUIRA_SCREENDEPTH    = #TUIRA_BASE + 33

; font
#TUIRA_FONTNAME       = #TUIRA_BASE + 50
#TUIRA_FONTSIZE       = #TUIRA_BASE + 51
#TUIRA_FIXFONTSONLY   = #TUIRA_BASE + 52

; info
#TUIRA_INFOTEXT       = #TUIRA_BASE + 70
#TUIRA_INFOIMAGE      = #TUIRA_BASE + 71


NEWTYPE.tuiRequester

  obj.tuiObject
  type_.l
  *title.str
  modal.l

  *aslfo.FontRequester       ; ASL font requester
  *fontName.str
  *fontSize.str
  fixFontsOnly.l

  *aslfr.FileRequester_fixed ; ASL file requester
  *path.str
  *file_.str
  *pattern.str
  saveMode.l
  multiSelect.l
  drawersOnly.l
  noIcons.l
  *fileA.l
  fileN.l
  fileIterator.l

  *aslsm.ScreenModeRequester ; ASL screenmode requester
  screenModeID.l
  screenWidth_.l
  screenHeight_.l
  screenDepth.l
  *screenModeName.str

  inforeq.EasyStruct            ; regular rquester
  *infoText.str
  *infoImage.str
  infoResult.l

  *ok.str
  *cancel.str

  onOk.tuiNotifyHandler
  onCancel.tuiNotifyHandler

End NEWTYPE


_ntui_SetRequesterAttr:
Function.l _ntui_SetRequesterAttr{*requester.tuiRequester,ti_Tag.l,ti_Data.l}
  !_ASSERT{*requester}
  !_ASSERT{*requester\obj\classID=#TUICLASS_REQUESTER}

  done.l = True
  Select ti_Tag
    ; general
    Case #TUIRA_TYPE         : *requester\type_ = ti_Data
    Case #TUIRA_ONOK         : str_WritePtr{&*requester\onOk\notifyID  ,ti_Data}
    Case #TUIRA_ONCANCEL     : str_WritePtr{&*requester\onCancel\notifyID,ti_Data}
    Case #TUIRA_ONOKCB       : *requester\onOk\callback      = ti_Data
    Case #TUIRA_ONCANCELCB   : *requester\onCancel\callback  = ti_Data
    Case #TUIRA_MODAL        : *requester\modal         = ti_Data
    Case #TUIRA_OK           : str_WritePtr{&*requester\ok,ti_Data}
    Case #TUIRA_CANCEL       : str_WritePtr{&*requester\cancel,ti_Data}
    Case #TUIRA_TITLE        : str_WritePtr{&*requester\title,ti_Data}

    ; file
    Case #TUIRA_PATH         : str_WritePtr{&*requester\path,ti_Data}
    Case #TUIRA_FILE         : str_WritePtr{&*requester\file_,ti_Data}
    Case #TUIRA_PATTERN      : str_WritePtr{&*requester\pattern,ti_Data}
    Case #TUIRA_SAVEMODE     : *requester\saveMode      = ti_Data
    Case #TUIRA_MULTISELECT  : *requester\multiSelect   = ti_Data
    Case #TUIRA_DRAWERSONLY  : *requester\drawersOnly   = ti_Data
    Case #TUIRA_NOICONS      : *requester\noIcons       = ti_Data
    
    ; screen
    Case #TUIRA_SCREENMODEID : *requester\screenModeID  = ti_Data
    Case #TUIRA_SCREENWIDTH  : *requester\screenWidth_  = ti_Data
    Case #TUIRA_SCREENHEIGHT : *requester\screenHeight_ = ti_Data
    Case #TUIRA_SCREENDEPTH  : *requester\screenDepth   = ti_Data

    ; font
    Case #TUIRA_FONTNAME     : str_WritePtr{&*requester\fontName,ti_Data}
    Case #TUIRA_FONTSIZE     : *requester\fontSize      = ti_Data
    Case #TUIRA_FIXFONTSONLY : *requester\fixFontsOnly  = ti_Data

    ; message
    Case #TUIRA_INFOTEXT     : str_WritePtr{&*requester\infoText,ti_Data}
    Case #TUIRA_INFOIMAGE    : str_WritePtr{&*requester\infoImage,ti_Data}

    Default
      done = False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_SetRequesterAttr,{Null,0,0}}


_ntui_GetRequesterAttr:
Function.l _ntui_GetRequesterAttr{*requester.tuiRequester,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*requester}
  !_ASSERT{*requester\obj\classID=#TUICLASS_REQUESTER}

  done.l = True
  Select ti_Tag
    ; general
    Case #TUIRA_TYPE         : *ti_Data\l = *requester\type_
    Case #TUIRA_ONOK         : *ti_Data\l = str_GetPtr{*requester\onOk\notifyID}
    Case #TUIRA_ONCANCEL     : *ti_Data\l = str_GetPtr{*requester\onCancel\notifyID}
    Case #TUIRA_ONOKCB       : *ti_Data\l = *requester\onOk\callback
    Case #TUIRA_ONCANCELCB   : *ti_Data\l = *requester\onCancel\callback
    Case #TUIRA_MODAL        : *ti_Data\l = *requester\modal
    Case #TUIRA_OK           : *ti_Data\l = str_GetPtr{*requester\ok}
    Case #TUIRA_CANCEL       : *ti_Data\l = str_GetPtr{*requester\cancel}
    Case #TUIRA_TITLE        : *ti_Data\l = str_GetPtr{*requester\title}

    ; file
    Case #TUIRA_PATH         : *ti_Data\l = str_GetPtr{*requester\path}
    Case #TUIRA_FILE         : *ti_Data\l = str_GetPtr{*requester\file_}
    Case #TUIRA_PATTERN      : *ti_Data\l = str_GetPtr{*requester\pattern}
    Case #TUIRA_SAVEMODE     : *ti_Data\l = *requester\saveMode
    Case #TUIRA_MULTISELECT  : *ti_Data\l = *requester\multiSelect
    Case #TUIRA_DRAWERSONLY  : *ti_Data\l = *requester\drawersOnly
    Case #TUIRA_NOICONS      : *ti_Data\l = *requester\noIcons
    Case #TUIRA_NUMFILES      : *ti_Data\l = *requester\fileN
    Case #TUIRA_FIRSTFILENAME :
      If *requester\fileN>0 AND *requester\fileA><Null
        *ti_Data\l = str_GetPtr{Peek.l(*requester\fileA)}  : *requester\fileIterator = 1
      Else
        *ti_Data\l = Null
      End If
    Case #TUIRA_NEXTFILENAME  :
      If *requester\fileIterator<*requester\fileN AND *requester\fileA><Null
        *ti_Data\l = str_GetPtr{Peek.l(*requester\fileA + 4 * *requester\fileIterator)}  : *requester\fileIterator + 1
      Else
        *ti_Data\l = Null
      End If

    ; screen
    Case #TUIRA_SCREENMODEID : *ti_Data\l = *requester\screenModeID
    Case #TUIRA_SCREENWIDTH  : *ti_Data\l = *requester\screenWidth_
    Case #TUIRA_SCREENHEIGHT : *ti_Data\l = *requester\screenHeight_
    Case #TUIRA_SCREENDEPTH  : *ti_Data\l = *requester\screenDepth

    ; font
    Case #TUIRA_FONTNAME     : *ti_Data\l = str_GetPtr{*requester\fontName}
    Case #TUIRA_FONTSIZE     : *ti_Data\l = *requester\fontSize
    Case #TUIRA_FIXFONTSONLY : *ti_Data\l = *requester\fixFontsOnly

    ; message
    Case #TUIRA_INFOTEXT     : *ti_Data\l = str_GetPtr{*requester\infoText}
    Case #TUIRA_INFOIMAGE    : *ti_Data\l = str_GetPtr{*requester\infoImage}

    Default
      done = False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_GetRequesterAttr,{Null,0,Null}}


_ntui_DispatchRequesterEvent:
Function.l _ntui_DispatchRequesterEvent{*requester.tuiRequester,*ev.tuiEvent}
  !_ASSERT{*requester}
  !_ASSERT{*requester\obj\classID=#TUICLASS_REQUESTER}
  !_ASSERT{*ev}
  *obj.tuiObject = *requester\obj
  done.l = False

  Select *ev\id
    Case #TUIEV_MOUSEDOWN:

    Default
      done = False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_DispatchRequesterEvent,{Null,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetRequesterMinSize {*requester.tuiRequester,:: /
;/ *rp.RastPort}                                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * calculate the minimum size for the Requester */                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *requester.tuiRequester    : ???                                       /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
 _ntui_CalculateRequesterMinSize:
Statement _ntui_CalculateRequesterMinSize{*requester.tuiRequester,*rp.RastPort}
  !_ASSERT{*requester}
  !_ASSERT{*requester\obj\classID=#TUICLASS_REQUESTER}

  *requester\obj\minsize\x  = 128
  *requester\obj\minsize\y  = 128

End Statement
!_MakeGlobalFuncPointer{_ntui_CalculateRequesterMinSize,{Null,Null}}


_ntui_DeinitRequester:
Statement _ntui_DeinitRequester{*requester.tuiRequester}
  !_ASSERT{*requester}
  !_ASSERT{*requester\obj\classID=#TUICLASS_REQUESTER}

  !tuiFreeNotifyHandler{*requester\onOk}
  !tuiFreeNotifyHandler{*requester\onCancel}

  If *requester\aslfo Then FreeAslRequest_ *requester\aslfo : *requester\aslfo = Null
  If *requester\aslfr Then FreeAslRequest_ *requester\aslfr : *requester\aslfr = Null
  If *requester\aslsm Then FreeAslRequest_ *requester\aslsm : *requester\aslsm = Null

  str_Free{&*requester\title}
  str_Free{&*requester\fontName}
  str_Free{&*requester\fontSize}
  str_Free{&*requester\path}
  str_Free{&*requester\file_}
  str_Free{&*requester\pattern}
  str_Free{&*requester\screenModeName}
  str_Free{&*requester\infoText}
  str_Free{&*requester\infoImage}
  str_Free{&*requester\ok}
  str_Free{&*requester\cancel}

  If *requester\fileA
    For n.l=0 To *requester\fileN-1
      str_Free{*requester\fileA+4*n}
    Next
    FreeVec_ *requester\fileA
    *requester\fileA = Null
  End If

End Statement
!_MakeGlobalFuncPointer{_ntui_DeinitRequester,{Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawRequester {*requester.tuiRequester,*rp.RastPort}        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *requester.tuiRequester    : ???                                       /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawRequester:
Statement _ntui_DrawRequester{*requester.tuiRequester,*rp.RastPort,*rpclip.tuiRect}
  !_ASSERT{*requester}
  !_ASSERT{*requester\obj\classID=#TUICLASS_REQUESTER}

End Statement
!_MakeGlobalFuncPointer{_ntui_DrawRequester,{Null,Null,Null}}


ntui_Requester:
Function.tuiRequester ntui_Requester{*tagList.TagItem}

  flags.l = #TUIF_FIXSIZE|#TUIF_WANTMOVER
  *requester.tuiRequester = (.tuiRequester)_ntui_CreateObject{#TUICLASS_REQUESTER,SizeOf.tuiRequester,flags}

  If *requester
    *requester\type_                = #TUIRT_INFO
    *requester\obj\borderType       = #TUIBORDER_NONE
    *requester\obj\flags            - #TUIF_FIXHEIGHT
    *requester\obj\Draw             = Null ; *_ntui_DrawRequester
    *requester\obj\Layout           = Null ;*_ntui_LayoutRequester
    *requester\obj\DispatchEvent    = Null ; *_ntui_DispatchRequesterEvent
    *requester\obj\CalculateMinSize = *_ntui_CalculateRequesterMinSize
    *requester\obj\Deinit           = *_ntui_DeinitRequester
    *requester\obj\SetAttr          = *_ntui_SetRequesterAttr
    *requester\obj\GetAttr          = *_ntui_GetRequesterAttr

    *requester\title                = Null
    *requester\modal                = True

    *requester\aslfo                = Null
    *requester\fontName             = Null
    *requester\fontSize             = 0
    *requester\fixFontsOnly         = False

    *requester\aslfr                = Null
    *requester\path                 = Null
    *requester\file_                = Null
    *requester\pattern              = Null
    *requester\saveMode             = False
    *requester\multiSelect          = False
    *requester\drawersOnly          = False
    *requester\noIcons              = True

    *requester\aslsm                = Null
    *requester\screenModeID         = 0
    *requester\screenWidth_         = 0
    *requester\screenHeight_        = 0
    *requester\screenDepth          = 0

    ;*requester\inforeq     ; regular rquester
    *requester\infoText             = Null
    *requester\infoImage            = Null
    *requester\infoResult           = 0

    *requester\ok                   = Null
    *requester\cancel               = Null

    !tuiInitNotifyHandler{*requester\onOk}
    !tuiInitNotifyHandler{*requester\onCancel}

    If *tagList Then ntui_SetAttrs{*requester,*tagList}

  End If

  Function Return *requester

End Function
!_MakeGlobalFuncPointer{ntui_Requester,{Null}}


Function.l _ntui_InfoRequest {*requester.tuiRequester}

  *win.Window = Null
  *requester\inforeq\es_StructSize   = SizeOf.EasyStruct
  *requester\inforeq\es_Flags        = 0;-1
  *requester\inforeq\es_Title        = str_GetPtr{*requester\title}
  *requester\inforeq\es_TextFormat   = str_GetPtr{*requester\infoText}
  gadget.s=""
  If str_Len{*requester\ok    }>0 Then gadget = str_Read{&*requester\ok}
  If str_Len{*requester\cancel}>0
    If gadget Then gadget + "|"
    gadget +str_Read{&*requester\cancel}
  End If

  If gadget Then *requester\inforeq\es_GadgetFormat = &gadget
  idcmpflags.l = 0;#IDCMP_RAWKEY
  result.l = EasyRequestArgs_ (*win,*requester\inforeq,&idcmpflags,0) ; 1,2,...,N,0

  Function Return result

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslfo_Request{@allowpropfont.l,@*scr.Screen}           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - allowpropfont.l    : ???                                                  /
;/ - *scr.Screen    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_FontRequest{*requester.tuiRequester}

  Dim tagList.TagItem(32)
  succ.l = False

  If *requester\aslfo = Null
    tagList(0)\ti_Tag = #TAG_DONE,0
    *requester\aslfo = AllocAslRequest_ (#ASL_FontRequest,&tagList(0)\ti_Tag)
  End If

  If *requester\aslfo=Null Then Function Return False

  *scr.Screen = *requester\obj\engine\screen_
  If *scr=Null Then Function Return False

  n.l = 0
  tagList(n)\ti_Tag = #ASLFO_Screen           ,*scr   : n+1
  If str_Len{*requester\ok    }>0 Then tagList(n)\ti_Tag = #ASLFO_PositiveText,str_GetPtr{*requester\ok    }   : n+1
  If str_Len{*requester\cancel}>0 Then tagList(n)\ti_Tag = #ASLFO_NegativeText,str_GetPtr{*requester\cancel}   : n+1
  If str_Len{*requester\title }>0 Then tagList(n)\ti_Tag = #ASLFO_TitleText   ,str_GetPtr{*requester\title }   : n+1

  If !tuiRectWidth{*requester\obj\bbox}>0 AND !tuiRectHeight{*requester\obj\bbox}>0
    tagList(n)\ti_Tag = #ASLFO_InitialLeftEdge  ,*requester\obj\bbox\left               : n+1
    tagList(n)\ti_Tag = #ASLFO_InitialTopEdge   ,*requester\obj\bbox\top                : n+1
    tagList(n)\ti_Tag = #ASLFO_InitialWidth     ,!tuiRectWidth{*requester\obj\bbox}     : n+1
    tagList(n)\ti_Tag = #ASLFO_InitialHeight    ,!tuiRectHeight{*requester\obj\bbox}    : n+1
  End If

  If *requester\fixFontsOnly        Then tagList(n)\ti_Tag = #ASLFO_FixedWidthOnly,#TRUE         : n+1
  If str_Len{*requester\fontName}>0 Then tagList(n)\ti_Tag = #ASLFO_InitialName   ,str_GetPtr{*requester\fontName} : n+1
  If *requester\fontSize>0          Then tagList(n)\ti_Tag = #ASLFO_InitialSize   ,*requester\fontSize  : n+1
  tagList(n)\ti_Tag = #TAG_DONE,0

  If AslRequest_ (*requester\aslfo,&tagList(0))
    succ = True
  End If

  Function Return succ

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslfr_Request{id.l,savemode.l,multiselect.l,drawerso:: /
;/ nly.l,@*scr.Screen,@noIcons.l}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * Do an ASL FileRequester.                                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - id.l             : id slot                                                /
;/ - savemode.l       : -1 = ASL behaviour is for "save file", otherwise "lo:: /
;/ ad file"                                                                    /
;/ - multiselect.l    : -1 = allow multiselect                                 /
;/ - drawersonly.l    : -1 = show only drawers                                 /
;/ - *scr.Screen      : pointer to a screen to open the requester on           /
;/ - noIcons.l        : -1 = hide icon files                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l         : -1 if the requester was answered by the user, 0 if c:: /
;/ ancelled                                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_FileRequest{*requester.tuiRequester}

  Dim tagList.TagItem(32)
  succ.l = False

  If *requester\aslfr
    FreeAslRequest_ *requester\aslfr
    *requester\aslfr=Null
  End If

  If *requester\fileA
    For n.l=0 To *requester\fileN-1
      str_Free{*requester\fileA+4*n}
    Next
    FreeVec_ *requester\fileA
    *requester\fileA = Null
  EndIf

  *requester\fileN=0

  *scr.Screen = *requester\obj\engine\screen_ : If *scr=Null Then Function Return False

  n.l = 0
  tagList(n)\ti_Tag = #ASLFR_Screen           ,*scr : n+1
  If str_Len{*requester\ok    }>0 Then tagList(n)\ti_Tag = #ASLFR_PositiveText,str_GetPtr{*requester\ok    }   : n+1
  If str_Len{*requester\cancel}>0 Then tagList(n)\ti_Tag = #ASLFR_NegativeText,str_GetPtr{*requester\cancel}   : n+1
  If str_Len{*requester\title }>0 Then tagList(n)\ti_Tag = #ASLFR_TitleText   ,str_GetPtr{*requester\title }   : n+1

  If !tuiRectWidth{*requester\obj\bbox}>0 AND !tuiRectHeight{*requester\obj\bbox}>0
    tagList(n)\ti_Tag = #ASLFR_InitialLeftEdge  ,*requester\obj\bbox\left               : n+1
    tagList(n)\ti_Tag = #ASLFR_InitialTopEdge   ,*requester\obj\bbox\top                : n+1
    tagList(n)\ti_Tag = #ASLFR_InitialWidth     ,!tuiRectWidth{*requester\obj\bbox}     : n+1
    tagList(n)\ti_Tag = #ASLFR_InitialHeight    ,!tuiRectHeight{*requester\obj\bbox}    : n+1
  End If

  tagList(n)\ti_Tag = #ASLFR_DoSaveMode       ,*requester\saveMode                    : n+1
  tagList(n)\ti_Tag = #ASLFR_DoMultiSelect    ,*requester\multiSelect                 : n+1
  tagList(n)\ti_Tag = #ASLFR_DrawersOnly      ,*requester\drawersOnly                 : n+1
  tagList(n)\ti_Tag = #ASLFR_RejectIcons      ,*requester\noIcons                     : n+1

  If str_Len{*requester\file_}>0 AND *requester\drawersOnly=False Then tagList(n)\ti_Tag = #ASLFR_InitialFile,str_GetPtr{*requester\file_}  : n+1
  If str_Len{*requester\path }>0                                  Then tagList(n)\ti_Tag = #ASLFR_InitialDrawer,str_GetPtr{*requester\path} : n+1

  If str_Len{*requester\pattern}>0
    tagList(n)\ti_Tag = #ASLFR_InitialPattern,str_GetPtr{*requester\pattern}          : n+1
    tagList(n)\ti_Tag = #ASLFR_DoPatterns,#TRUE                                       : n+1
  Else
    tagList(n)\ti_Tag = #ASLFR_DoPatterns,#FALSE                                      : n+1
  End If
  tagList(n)\ti_Tag = #TAG_DONE,0

  If *requester\aslfr = Null
    *requester\aslfr = AllocAslRequest_ (#ASL_FileRequest,&tagList(0)\ti_Tag)
  End If

  If *requester\aslfr=Null Then Function Return False

  tagList(0)\ti_Tag = #TAG_DONE,0

  If AslRequest_ (*requester\aslfr,Null)
    str_WritePtr{&*requester\file_  ,*requester\aslfr\fr_File}
    str_WritePtr{&*requester\path   ,*requester\aslfr\fr_Drawer}
    str_WritePtr{&*requester\pattern,*requester\aslfr\fr_Pattern}
    *requester\fileN = *requester\aslfr\fr_NumArgs

    path.s = str_Read{&*requester\path}

    If *requester\fileN<1
      *requester\fileA = AllocVec_(4,#MEMF_ANY)
      If str_Len{*requester\file_}>0
        filename.s = _ntui_AddPart {path,str_Read{&*requester\file_}}
      Else
        filename = path
      End If
      Poke.l*requester\fileA,Null
      str_Write{*requester\fileA,filename}
      *requester\fileN=1
    Else
      *requester\fileA = AllocVec_(4 * *requester\fileN,#MEMF_ANY)
      For n.l=0 To *requester\fileN-1
        *file_.b=Peek.l(*requester\aslfr\fr_ArgList+(8*n)+4)
        If *file_
          filename.s = _ntui_AddPart {path,Peek.s(*file_)}
          Poke.l *requester\fileA+4*n,Null
          str_Write{*requester\fileA+4*n,filename}
        End If
      Next
    End If

    succ = True
  End If

  Function Return succ

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslsm_Request{@doDims.l,@doDepth.l,@doOverscan.l,@do:: /
;/ Autoscroll.l,@*scr.Screen}                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Open an ASL screen requester and let the user choose a screenmode.          /
;/ To reduce the number of screenmodes to the ones matching your specs, use :: /
;/ screen_ASL_setmin, screen_aslsetmax and screen_aslsetinitial.               /
;/ This is a bit more lowlevel than screen_ask. You have to compose your bit:: /
;/  mask out of the following values:                                          /
;/                                                                             /
;/ #asl_scr_width      =  1 ; ask for width                                    /
;/ #asl_scr_height     =  2 ; ask for height                                   /
;/ #asl_scr_depth      =  4 ; ask for depth                                    /
;/ #asl_scr_overscan   =  8 ; ask for overscan                                 /
;/ #asl_scr_ascroll    = 16 ; ask for auto scroll                              /
;/                                                                             /
;/ After calling the requester, you can read out the screen information by s:: /
;/ creen_ASL_width, screen_ASL_height, screen_ASL_depth, screen_ASL_id, scre:: /
;/ en_ASL_autoscroll and screen_ask_overscan.                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - title.s    : title of the ASL requester                                   /
;/ - mask.l    : bit mask of things you want the ASL requester to ask          /
;/ - doDims.l    : ???                                                         /
;/ - doDepth.l    : ???                                                        /
;/ - doOverscan.l    : ???                                                     /
;/ - doAutoscroll.l    : ???                                                   /
;/ - *scr.Screen    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : -1 if the requester was answered, 0 if aborted             /
;/                                                                             /
;/ See also:                                                                   /
;/ screen_ASL_setmin, screen_aslsetmax, screen_aslsetinitial                   /
;/ screen_ASL_width, screen_ASL_height, screen_ASL_depth, screen_ASL_id, scr:: /
;/ een_ASL_autoscroll, screen_ask_overscan                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_ScreenModeRequest{*requester.tuiRequester}

  Dim tagList.TagItem(32)
  succ.l = False

  If *requester\aslsm=Null
    tagList(0)\ti_Tag = #TAG_DONE,0
    *requester\aslsm = AllocAslRequest_ (#ASL_ScreenModeRequest,&tagList(0)\ti_Tag)
  End If

  If *requester\aslsm=Null Then Function Return False

  *scr.Screen = *requester\obj\engine\screen_
  If *scr=Null Then Function Return False

  n.l = 0
  tagList(n)\ti_Tag = #ASLSM_Screen           ,*scr  : n+1
  If str_Len{*requester\ok    }>0 Then tagList(n)\ti_Tag = #ASLSM_PositiveText,str_GetPtr{*requester\ok    }   : n+1
  If str_Len{*requester\cancel}>0 Then tagList(n)\ti_Tag = #ASLSM_NegativeText,str_GetPtr{*requester\cancel}   : n+1
  If str_Len{*requester\title }>0 Then tagList(n)\ti_Tag = #ASLSM_TitleText   ,str_GetPtr{*requester\title }   : n+1

  If !tuiRectWidth{*requester\obj\bbox}>0 AND !tuiRectHeight{*requester\obj\bbox}>0
    tagList(n)\ti_Tag = #ASLSM_InitialLeftEdge  ,*requester\obj\bbox\left               : n+1
    tagList(n)\ti_Tag = #ASLSM_InitialTopEdge   ,*requester\obj\bbox\top                : n+1
    tagList(n)\ti_Tag = #ASLSM_InitialWidth     ,!tuiRectWidth{*requester\obj\bbox}     : n+1
    tagList(n)\ti_Tag = #ASLSM_InitialHeight    ,!tuiRectHeight{*requester\obj\bbox}    : n+1
  End If

  doDims.l = 0 : doDepth.l = 0
  If *requester\screenModeID   >0 Then tagList(n)\ti_Tag = #ASLSM_InitialDisplayID      ,*requester\screenModeID     : n+1
  If *requester\screenDepth    >0 Then tagList(n)\ti_Tag = #ASLSM_InitialDisplayDepth   ,*requester\screenDepth      : n+1 : doDims=1
  If *requester\screenWidth_   >0 Then tagList(n)\ti_Tag = #ASLSM_InitialDisplayWidth   ,*requester\screenWidth_     : n+1 : doDims=1
  If *requester\screenHeight_  >0 Then tagList(n)\ti_Tag = #ASLSM_InitialDisplayHeight  ,*requester\screenHeight_    : n+1 : doDepth=1

  tagList(n)\ti_Tag = #ASLSM_DoWidth         , doDims  : n+1
  tagList(n)\ti_Tag = #ASLSM_DoHeight        , doDims  : n+1
  tagList(n)\ti_Tag = #ASLSM_DoDepth         , doDepth : n+1
  ;tagList(n)\ti_Tag = #ASLSM_DoOverscanType  , doOverscan  : n+1
  ;tagList(n)\ti_Tag = #ASLSM_DoAutoScroll    , doAutoscroll  : n+1
  tagList(n)\ti_Tag = #TAG_DONE,0

  If AslRequest_ (*requester\aslsm,&tagList(0))
    succ = True
  End If

  Function Return succ

End Function


Function.l ntui_ShowRequester{*requester.tuiRequester}

  !_ASSERT{*requester}
  !_ASSERT{*requester\obj\classID=#TUICLASS_REQUESTER}

  succ.l = False

  *scr.Screen = *requester\obj\engine\screen_
  If *scr=Null Then Function Return False

  If True
    *requester\obj\bbox\left   = 20
    *requester\obj\bbox\top    = 20
    *requester\obj\bbox\right  = *scr\Width   / 4
    *requester\obj\bbox\bottom = *scr\Height  / 2
  Else
    *requester\obj\bbox\left   = 0
    *requester\obj\bbox\top    = 0
    *requester\obj\bbox\right  = 0
    *requester\obj\bbox\bottom = 0
  End If

  *ev.tuiEvent = _ntui_CreateEvent{*requester\obj\engine,#TUIEV_USER}

  Select *requester\type_
    Case #TUIRT_FILE
      succ = _ntui_FileRequest{*requester}
      If succ
        If *requester\fileN>0 AND *requester\fileA><Null
          str_Dup{&*ev\string,Peek.l(*requester\fileA)}
          *ev\value = *requester\fileN
        End If
      End If

    Case #TUIRT_SCREEN
      succ = _ntui_ScreenModeRequest{*requester}
      If succ
        *requester\screenModeID  = *requester\aslsm\sm_DisplayID
        *requester\screenDepth   = *requester\aslsm\sm_DisplayDepth
        *requester\screenWidth_  = *requester\aslsm\sm_DisplayWidth
        *requester\screenHeight_ = *requester\aslsm\sm_DisplayHeight
        mode_ptr.l = FindDisplayInfo_ (*requester\screenModeID)
        If mode_ptr
          count.l = GetDisplayInfoData_ (mode_ptr,&naminfo.NameInfo,SizeOf.NameInfo,#DTAG_NAME,*requester\screenModeID)
          If count
            str_WritePtr{&*requester\screenModeName,&naminfo\Name}
          End If
        End If
        str_Dup{&*ev\string,*requester\screenModeName}
        *ev\value = *requester\screenModeID

      End If

    Case #TUIRT_FONT
      succ = _ntui_FontRequest{*requester}
      If succ
        str_WritePtr{&*requester\fontName,*requester\aslfo\fo_TAttr\tta_Name}
        *requester\fontSize = *requester\aslfo\fo_TAttr\tta_YSize
        str_Dup{&*ev\string,*requester\fontName}
        *ev\value = *requester\fontSize
      End If

    Case #TUIRT_INFO
      *requester\infoResult = _ntui_InfoRequest{*requester}
      If *requester\infoResult Then succ=True
      *ev\value = *requester\infoResult

    Default
      *requester\infoResult = _ntui_InfoRequest{*requester}
      If *requester\infoResult Then succ=True
      *ev\value = *requester\infoResult

  End Select

  If succ
    !tuiHandleNotify{done.l,*requester,onOk,*ev}
  Else
    !tuiHandleNotify{done.l,*requester,onCancel,*ev}
  End If
  _ntui_DestroyEvent{*requester\obj\engine,*ev}

  Function Return True

End Function


Function.l ntui_ShowRequesterByID{*parent.tuiObject,id.s}

  *obj.tuiObject = ntui_GetObjectByID{*parent,id}
  If *obj
    If *obj\classID=#TUICLASS_REQUESTER
      *requester.tuiRequester = (.tuiRequester)*obj
      Function Return ntui_ShowRequester{*requester}
    End If
  End If

  Function Return False

End Function


Statement ntui_InitRequesterClass{}

  classID.l = ntui_RegisterClass{"requester",(.tuiFunc)*ntui_Requester,Null}
  
  ntui_RegisterAttr{classID,"type"         ,#TUIRA_TYPE      ,#TUIAT_INT   ,0,#TUIRT_MAX}
  ntui_RegisterValue{classID,"file"        ,#TUIRT_FILE      }
  ntui_RegisterValue{classID,"screen"      ,#TUIRT_SCREEN    }
  ntui_RegisterValue{classID,"font"        ,#TUIRT_FONT      }
  ntui_RegisterValue{classID,"info"        ,#TUIRT_INFO      }

  ntui_RegisterAttr{classID,"onok"         ,#TUIRA_ONOK      ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"oncancel"     ,#TUIRA_ONCANCEL  ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"title"        ,#TUIRA_TITLE     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"ok"           ,#TUIRA_OK        ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"cancel"       ,#TUIRA_CANCEL    ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"modal"        ,#TUIRA_MODAL     ,#TUIAT_BOOL  , 0,0 }

  ntui_RegisterAttr{classID,"path"         ,#TUIRA_PATH        ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"file"         ,#TUIRA_FILE        ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"pattern"      ,#TUIRA_PATTERN     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"savemode"     ,#TUIRA_SAVEMODE    ,#TUIAT_BOOL  , 0,0 }
  ntui_RegisterAttr{classID,"multiselect"  ,#TUIRA_MULTISELECT ,#TUIAT_BOOL  , 0,0 }
  ntui_RegisterAttr{classID,"drawersonly"  ,#TUIRA_DRAWERSONLY ,#TUIAT_BOOL  , 0,0 }
  ntui_RegisterAttr{classID,"noicons"      ,#TUIRA_NOICONS     ,#TUIAT_BOOL  , 0,0 }

  ntui_RegisterAttr{classID,"screenmodeid" ,#TUIRA_SCREENMODEID ,#TUIAT_INT   ,0,0}
  ntui_RegisterAttr{classID,"screenwidth"  ,#TUIRA_SCREENWIDTH  ,#TUIAT_INT   ,0,32768}
  ntui_RegisterAttr{classID,"screenheight" ,#TUIRA_SCREENHEIGHT ,#TUIAT_INT   ,0,32768}
  ntui_RegisterAttr{classID,"screendepth"  ,#TUIRA_SCREENDEPTH  ,#TUIAT_INT   ,0,32}

  ntui_RegisterAttr{classID,"fontname"     ,#TUIRA_FONTNAME     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"fontsize"     ,#TUIRA_FONTSIZE     ,#TUIAT_INT   , 0,0 }
  ntui_RegisterAttr{classID,"fixfontsonly" ,#TUIRA_FIXFONTSONLY ,#TUIAT_BOOL  , 0,0 }

  ntui_RegisterAttr{classID,"text"         ,#TUIRA_INFOTEXT     ,#TUIAT_STRING, 0,0 }
  ntui_RegisterAttr{classID,"image"        ,#TUIRA_INFOIMAGE    ,#TUIAT_STRING, 0,0 }

End Statement

ntui_InitRequesterClass{}
