; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res,SDSTCP2.res,xpk.res,ttengine.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 290
; CursorColumn    = 2
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_balancer.include                                                /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#TUI_HAS_BALANCER = 1

CNIF #__include=0
optimize 7
Syntax 2
CEND

#TUIBCA_BASE      = #TUIA_USER
#TUIBCA_ORIENT    = #TUIBCA_BASE + 0

NEWTYPE.tuiBalancer
obj.tuiObject
orient.l
grab.tuiPixel
grabPrevWeight.l
grabNextWeight.l
grabbed.l
End NEWTYPE


_ntui_SetBalancerAttr:
Function.w _ntui_SetBalancerAttr{*tuiBalancer.tuiBalancer,ti_Tag.l,ti_Data.l}
  !_ASSERT{*tuiBalancer}
  !_ASSERT{*tuiBalancer\obj\classID=#TUICLASS_BALANCER}

  done.w = True
  Select ti_Tag
    Case #TUIBCA_ORIENT   : *tuiBalancer\orient = ti_Data
      If *tuiBalancer\orient=#TUIORIENT_HORIZONTAL
        *tuiBalancer\obj\flags | #TUIF_FIXSIZE - #TUIF_FIXWIDTH
        *tuiBalancer\obj\pointerID = #TUIPOINTER_VDRAG
      Else
        *tuiBalancer\obj\flags | #TUIF_FIXSIZE - #TUIF_FIXHEIGHT
        *tuiBalancer\obj\pointerID = #TUIPOINTER_HDRAG
      End If
      ntui_Refresh{*tuiBalancer,#NULL}

    Case #TUIA_XMLATTR
      *xmlA.tuiXmlAttr = ti_Data
      Select Peek.s(*xmlA\nameP)
        Case "orient" : done=False
          If *xmlA\stringP
            string.s = Peek.s(*xmlA\stringP)
            If string="horizontal" Then done=ntui_SetAttr{*tuiBalancer,#TUIBCA_ORIENT,#TUIORIENT_HORIZONTAL}
            If string="vertical"   Then done=ntui_SetAttr{*tuiBalancer,#TUIBCA_ORIENT,#TUIORIENT_VERTICAL}
          End If
        Default
          done = False
       End Select
    Default
      done = False

  End Select
  Function Return done
End Function


_ntui_GetBalancerAttr:
Function.w _ntui_GetBalancerAttr{*tuiBalancer.tuiBalancer,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*tuiBalancer}
  !_ASSERT{*tuiBalancer\obj\classID=#TUICLASS_BALANCER}

  done.w = True
  Select ti_Tag
    Case #TUIBCA_ORIENT      : *ti_Data\l = *tuiBalancer\orient
    Default
      done = False

  End Select
  Function Return done
End Function


_ntui_DispatchBalancerEvent:
Function.w _ntui_DispatchBalancerEvent{*tuiBalancer.tuiBalancer,*tuiEvent.tuiEvent}
  !_ASSERT{*tuiBalancer}
  !_ASSERT{*tuiBalancer\obj\classID=#TUICLASS_BALANCER}
  !_ASSERT{*tuiEvent}
  *tui.tuiObject = *tuiBalancer\obj
  done.w = False

  Select *tuiEvent\evID
    Case #TUIEV_MOUSEDOWN:
      If *tuiEvent\value=0
        If !tuiRectHit{*tui\bbox,*tuiEvent\pos\x,*tuiEvent\pos\y}
          done=True
          ntui_SetFocus{*tuiBalancer}
          *tuiBalancer\obj\flags | #TUIF_ACTIVE
          str_Dup{&*tuiEvent\notifyID,*tuiBalancer\obj\onTouch}
          ntui_Refresh{*tuiBalancer,#NULL}

          *tuiBalancer\grab\x    = *tuiEvent\pos\x ;- *tuiBalancer\obj\bbox\left
          *tuiBalancer\grab\y    = *tuiEvent\pos\y ;- *tuiBalancer\obj\bbox\top
          If (*tuiBalancer\obj\next_><#NULL AND *tuiBalancer\obj\prev><#NULL)
            Select *tuiBalancer\orient
              Case #TUIORIENT_VERTICAL
                *tuiBalancer\grabNextWeight = !tuiRectWidth{*tuiBalancer\obj\next_\bbox} - *tuiBalancer\obj\next_\minsize\x
                *tuiBalancer\grabPrevWeight = !tuiRectWidth{*tuiBalancer\obj\prev\bbox}  - *tuiBalancer\obj\prev\minsize\x
                *tuiBalancer\obj\next_\flags | #TUIF_FIXWIDTH - #TUIF_FIXWIDTH
                *tuiBalancer\obj\prev\flags  | #TUIF_FIXWIDTH - #TUIF_FIXWIDTH

              Case #TUIORIENT_HORIZONTAL
                *tuiBalancer\grabNextWeight = !tuiRectHeight{*tuiBalancer\obj\next_\bbox} - *tuiBalancer\obj\next_\minsize\y
                *tuiBalancer\grabPrevWeight = !tuiRectHeight{*tuiBalancer\obj\prev\bbox}  - *tuiBalancer\obj\prev\minsize\y
                *tuiBalancer\obj\next_\flags | #TUIF_FIXHEIGHT - #TUIF_FIXHEIGHT
                *tuiBalancer\obj\prev\flags  | #TUIF_FIXHEIGHT - #TUIF_FIXHEIGHT

            End Select

          End If
          *tuiBalancer\grabbed   = True
        End If
      End If

    Case #TUIEV_MOUSEUP
      If *tuiEvent\value=0
        str_Dup{&*tuiEvent\notifyID,*tuiBalancer\obj\onRelease}
        *tuiBalancer\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
        ntui_Refresh{*tuiBalancer,#NULL}
        *tuiBalancer\grabbed=False
        done=True
      End If

    Case #TUIEV_KEYDOWN
      Select *tuiEvent\value
        Case #RAWKEY_LEFT      ;: _ntui_SetBalancerAttr{*tuiBalancer,#TUISCA_TOP,*tuiBalancer\obj\value - *tuiBalancer\step_} : done=True
        Case #RAWKEY_UP        ;: _ntui_SetBalancerAttr{*tuiBalancer,#TUISCA_TOP,*tuiBalancer\obj\value - *tuiBalancer\step_} : done=True
        Case #RAWKEY_RIGHT     ;: _ntui_SetBalancerAttr{*tuiBalancer,#TUISCA_TOP,*tuiBalancer\obj\value + *tuiBalancer\step_} : done=True
        Case #RAWKEY_DOWN      ;: _ntui_SetBalancerAttr{*tuiBalancer,#TUISCA_TOP,*tuiBalancer\obj\value + *tuiBalancer\step_} : done=True
      End Select

    Case #TUIEV_MOUSEMOVE
      If *tuiBalancer\obj\flags&#TUIF_ACTIVE
        If *tuiBalancer\grabbed
          *prev.tuiObject   = *tuiBalancer\obj\prev
          *next_.tuiObject  = *tuiBalancer\obj\next_
          If *next_><#NULL AND *prev><#NULL
            *parent.tuiObject = *tuiBalancer\obj\parent
            Select *tuiBalancer\orient
              Case #TUIORIENT_VERTICAL
                newPos.l   = *tuiEvent\pos\x - *tuiBalancer\grab\x
              Case #TUIORIENT_HORIZONTAL
                newPos.l   = *tuiEvent\pos\y - *tuiBalancer\grab\y
            End Select

            pw.l  = *tuiBalancer\grabPrevWeight + newPos
            nw.l = *tuiBalancer\grabNextWeight - newPos
            If pw<0 Then nw+pw:pw=0
            If nw<0 Then pw+nw:nw=0
            If pw><*prev\weight OR nw><*next_\weight
              *prev\weight  = pw
              *next_\weight = nw
              _ntui_Layout{*parent,*tuiBalancer\obj\tuiEngine\buildRP,#NULL}
              ntui_Refresh{*parent,#NULL}
              str_Dup{&*tuiEvent\notifyID,*tuiBalancer\obj\onClick}
            End If
          End If
        End If
        done=True
      End If

    Default
      done = False

  End Select

  If done
    If (*tuiEvent\notifyID)
      *tuiEvent\tuiObject = *tuiBalancer
      _ntui_QueueEvent{*tuiBalancer\obj\tuiEngine\outQ,*tuiEvent}
    Else
      _ntui_DestroyEvent{*tuiEvent}
    End If
  End If

Function Return done
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetBalancerMinSize {*tuiBalancer.tuiBalancer,:: /
;/ *rp.RastPort}                                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * calculate the minimum size for the Balancer */                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiBalancer.tuiBalancer    : ???                                       /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
 _ntui_CalculateBalancerMinSize:
Statement _ntui_CalculateBalancerMinSize{*tuiBalancer.tuiBalancer,*rp.RastPort}
!_ASSERT{*tuiBalancer}
!_ASSERT{*tuiBalancer\obj\classID=#TUICLASS_BALANCER}

*tuiBalancer\obj\minsize\x  = 1
*tuiBalancer\obj\minsize\y  = 1

_ntui_GetBorderSize{*tuiBalancer\obj\tuiEngine,*tuiBalancer\obj\borderType,*tuiBalancer\obj\flags,*tuiBalancer\obj\border}
*tuiBalancer\obj\minsize\x + !tuiBorderWidth{*tuiBalancer\obj\border}
*tuiBalancer\obj\minsize\y + !tuiBorderHeight{*tuiBalancer\obj\border}
*tuiBalancer\obj\minsize\x + !tuiBorderWidth{*tuiBalancer\obj\padding}/2
*tuiBalancer\obj\minsize\y + !tuiBorderHeight{*tuiBalancer\obj\padding}/2

If (*tuiBalancer\obj\next_><#NULL AND *tuiBalancer\obj\prev><#NULL)
  Select *tuiBalancer\orient
    Case #TUIORIENT_VERTICAL
      *tuiBalancer\obj\next_\flags | #TUIF_FIXWIDTH - #TUIF_FIXWIDTH
      *tuiBalancer\obj\prev\flags  | #TUIF_FIXWIDTH - #TUIF_FIXWIDTH
    Case #TUIORIENT_HORIZONTAL
      *tuiBalancer\obj\next_\flags | #TUIF_FIXHEIGHT - #TUIF_FIXHEIGHT
      *tuiBalancer\obj\prev\flags  | #TUIF_FIXHEIGHT - #TUIF_FIXHEIGHT
  End Select
End If

End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawBalancer {*tuiBalancer.tuiBalancer,*rp.RastPort}        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiBalancer.tuiBalancer    : ???                                       /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawBalancer:
Statement _ntui_DrawBalancer{*tuiBalancer.tuiBalancer,*rp.RastPort,*rpclip.tuiRect}
  !_ASSERT{*tuiBalancer}
  !_ASSERT{*tuiBalancer\obj\classID=#TUICLASS_BALANCER}
  *tuiEngine.tuiEngine = *tuiBalancer\obj\tuiEngine
  !_ASSERT{*tuiEngine}
  *tui.tuiObject = *tuiBalancer\obj

  If (*tui\borderType><#TUIBORDER_NONE)
    bgDone.l = ntui_DrawBorder{*tuiEngine,*rp,*tui\bbox,*tui\borderType,*tui\flags}
  End If

  If (*tuiBalancer\obj\flags&#TUIF_DISABLED)
    knobPen.l      = #TUIPEN_HALFHALFSHINE
  Else
    If *tuiBalancer\obj\flags&#TUIF_ACTIVE
      knobPen        = #TUIPEN_MARKER
    Else
      If *tuiBalancer\obj\flags&#TUIF_FOCUS
        knobPen        = #TUIPEN_HALFHALFSHINE
      Else
        knobPen        = #TUIPEN_HALFHALFSHINE
      End If
    End If
  End If
  If bgDone Then knobPen=-1

  If knobPen>=0
    SetAPen_ *rp,*tuiEngine\pen[knobPen]
    RectFill_ *rp,*tui\ibox\left,*tui\ibox\top,*tui\ibox\right,*tui\ibox\bottom
  End If
;Statement Return
  If *tuiBalancer\orient = #TUIORIENT_VERTICAL
    For n.l=0 To !tuiRectHeight{*tuiBalancer\obj\cbox}/24
      xm.l = (*tuiBalancer\obj\cbox\left+*tuiBalancer\obj\cbox\right )/2
      ym.l = (*tuiBalancer\obj\cbox\top +*tuiBalancer\obj\cbox\bottom)/2
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
      WritePixel_ *rp,xm+1,ym+n*6
      WritePixel_ *rp,xm+1,ym-n*6
      WritePixel_ *rp,xm-1,ym+n*6 +3
      WritePixel_ *rp,xm-1,ym-n*6 +3

      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
      WritePixel_ *rp,xm+1,ym+n*6+1
      WritePixel_ *rp,xm+1,ym-n*6+1
      WritePixel_ *rp,xm-1,ym+n*6+1 +3
      WritePixel_ *rp,xm-1,ym-n*6+1 +3

    Next
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
    Move_ *rp,xm+1,*tuiBalancer\obj\cbox\top
    Draw_ *rp,xm+1,*tuiBalancer\obj\cbox\bottom

    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    Move_ *rp,xm-1,*tuiBalancer\obj\cbox\top
    Draw_ *rp,xm-1,*tuiBalancer\obj\cbox\bottom



  End If

  If *tuiBalancer\orient = #TUIORIENT_HORIZONTAL
    For n.l=0 To  !tuiRectWidth{*tuiBalancer\obj\cbox}/24
      xm.l = (*tuiBalancer\obj\cbox\left+*tuiBalancer\obj\cbox\right )/2
      ym.l = (*tuiBalancer\obj\cbox\top +*tuiBalancer\obj\cbox\bottom)/2
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
      WritePixel_ *rp,xm+n*6,ym   +1
      WritePixel_ *rp,xm-n*6,ym   +1
      WritePixel_ *rp,xm+n*6+3,ym -1
      WritePixel_ *rp,xm-n*6+3,ym -1

      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
      WritePixel_ *rp,xm+n*6+1,ym   +1
      WritePixel_ *rp,xm-n*6+1,ym   +1
      WritePixel_ *rp,xm+n*6+3+1,ym -1
      WritePixel_ *rp,xm-n*6+3+1,ym -1

    Next

    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
    Move_ *rp,*tuiBalancer\obj\cbox\left,ym   +1
    Draw_ *rp,*tuiBalancer\obj\cbox\right,ym+1

    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    Move_ *rp,*tuiBalancer\obj\cbox\left,ym   -1
    Draw_ *rp,*tuiBalancer\obj\cbox\right,ym-1


  End If

End Statement


Function.tuiBalancer ntui_Balancer{orient.l,@flags.l,@nameID.s}
If flags=#TUI_NOFLAGS Then flags=0
flags | #TUIF_FIXSIZE
*tuiBalancer.tuiBalancer = (.tuiBalancer)_ntui_CreateObject{#TUICLASS_BALANCER,SizeOf.tuiBalancer,"",flags,nameID}
If *tuiBalancer
  If orient=-1 Then orient=#TUIORIENT_HORIZONTAL
  *tuiBalancer\orient    = orient
  *tuiBalancer\obj\borderType = #TUIBORDER_RAISED

  If orient=#TUIORIENT_HORIZONTAL
    *tuiBalancer\obj\flags - #TUIF_FIXWIDTH
    *tuiBalancer\obj\pointerID = #TUIPOINTER_VDRAG
  Else
    *tuiBalancer\obj\flags - #TUIF_FIXHEIGHT
    *tuiBalancer\obj\pointerID = #TUIPOINTER_HDRAG
  End If

  *tuiBalancer\obj\padding\left = 0,0,0,0

  !_GetFuncPointer{*tuiBalancer\obj\Draw            ,_ntui_DrawBalancer,{0,0,0}}
;  !_GetFuncPointer{*tuiBalancer\obj\Layout          ,_ntui_LayoutBalancer,{0,0,0}}
  !_GetFuncPointer{*tuiBalancer\obj\DispatchEvent   ,_ntui_DispatchBalancerEvent,{0,0}}
  !_GetFuncPointer{*tuiBalancer\obj\CalculateMinSize,_ntui_CalculateBalancerMinSize,{0,0}}
;  !_GetFuncPointer{*tuiBalancer\obj\Deinit          ,_ntui_DeinitBalancer,{0}}
  !_GetFuncPointer{*tuiBalancer\obj\SetAttr         ,_ntui_SetBalancerAttr,{0,0,0}}
  !_GetFuncPointer{*tuiBalancer\obj\GetAttr         ,_ntui_GetBalancerAttr,{0,0,0}}

End If
Function Return *tuiBalancer
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_VBalancer {}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * create function for tui Balancer */                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.tuiBalancer ntui_VBalancer{}
*balancer.tuiBalancer = ntui_Balancer{#TUIORIENT_VERTICAL}
Function Return *balancer
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_HBalancer {}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * create function for tui Balancer */                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.tuiBalancer ntui_HBalancer{}
*balancer.tuiBalancer = ntui_Balancer{#TUIORIENT_HORIZONTAL}
Function Return *balancer
End Function



