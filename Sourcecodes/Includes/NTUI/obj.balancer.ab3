; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; FuncOptimize    = 0
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 337
; CursorColumn    = 50
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
#TUI_HAS_BALANCER = 1

#TUIBCA_BASE         = #TUIA_USER
#TUIBCA_ORIENTATION  = #TUIBCA_BASE + 0

NEWTYPE.tuiBalancer

  obj.tuiObject
  orient.l
  grab.tuiPixel
  grabPrevWeight.l
  grabNextWeight.l
  grabbed.l

End NEWTYPE


_ntui_SetBalancerAttr:
Function.l _ntui_SetBalancerAttr{*balancer.tuiBalancer,ti_Tag.l,ti_Data.l}
  !_ASSERT{*balancer}
  !_ASSERT{*balancer\obj\classID=#TUICLASS_BALANCER}

  done.l = True
  Select ti_Tag
    Case #TUIBCA_ORIENTATION : *balancer\orient = ti_Data
      If *balancer\orient=#TUIORIENT_HORIZONTAL
        *balancer\obj\flags | #TUIF_FIXSIZE - #TUIF_FIXWIDTH
        *balancer\obj\pointerID = #TUIPOINTER_VDRAG
      Else
        *balancer\obj\flags | #TUIF_FIXSIZE - #TUIF_FIXHEIGHT
        *balancer\obj\pointerID = #TUIPOINTER_HDRAG
      End If
      ntui_Refresh{*balancer,Null}

    Default
      done = False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_SetBalancerAttr,{Null,0,0}}


_ntui_GetBalancerAttr:
Function.l _ntui_GetBalancerAttr{*balancer.tuiBalancer,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*balancer}
  !_ASSERT{*balancer\obj\classID=#TUICLASS_BALANCER}

  done.l = True
  Select ti_Tag
    Case #TUIBCA_ORIENTATION    : *ti_Data\l = *balancer\orient
    Default
      done = False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_GetBalancerAttr,{Null,0,Null}}


_ntui_DispatchBalancerEvent:
Function.l _ntui_DispatchBalancerEvent{*balancer.tuiBalancer,*ev.tuiEvent}
  !_ASSERT{*balancer}
  !_ASSERT{*balancer\obj\classID=#TUICLASS_BALANCER}
  !_ASSERT{*ev}
  *obj.tuiObject = *balancer\obj
  done.l = False

  Select *ev\id
    Case #TUIEV_MOUSEDOWN:
      If *ev\value=0
        If !tuiRectHit{*obj\bbox,*ev\pos\x,*ev\pos\y}
          done=True
          ntui_SetFocus{*balancer}
          *balancer\obj\flags | #TUIF_ACTIVE
          ;str_Dup{&*ev\notifyID,*balancer\obj\onTouch}
          ntui_Refresh{*balancer,Null}

          *balancer\grab\x    = *ev\pos\x ;- *balancer\obj\bbox\left
          *balancer\grab\y    = *ev\pos\y ;- *balancer\obj\bbox\top
          If (*balancer\obj\next_><Null AND *balancer\obj\prev><Null)
            _ntui_CalculateMinSize{*balancer\obj\parent,*balancer\obj\engine\buildRP}

            Select *balancer\orient
              Case #TUIORIENT_VERTICAL
                *balancer\grabNextWeight = !tuiRectWidth{*balancer\obj\next_\bbox} - *balancer\obj\next_\minsize\x
                *balancer\grabPrevWeight = !tuiRectWidth{*balancer\obj\prev\bbox}  - *balancer\obj\prev\minsize\x
                *balancer\obj\next_\flags | #TUIF_FIXWIDTH - #TUIF_FIXWIDTH
                *balancer\obj\prev\flags  | #TUIF_FIXWIDTH - #TUIF_FIXWIDTH
                *parent.tuiObject = *balancer\obj\parent
                *child.tuiObject  = *parent\child
                While *child
                  *child\weight  = !tuiRectWidth{*child\bbox}  - *child\minsize\x ;+ !tuiBorderWidth{*child\margin}
                  *child = *child\next_
                Wend

              Case #TUIORIENT_HORIZONTAL
                *balancer\grabNextWeight = !tuiRectHeight{*balancer\obj\next_\bbox} - *balancer\obj\next_\minsize\y
                *balancer\grabPrevWeight = !tuiRectHeight{*balancer\obj\prev\bbox}  - *balancer\obj\prev\minsize\y
                *balancer\obj\next_\flags | #TUIF_FIXHEIGHT - #TUIF_FIXHEIGHT
                *balancer\obj\prev\flags  | #TUIF_FIXHEIGHT - #TUIF_FIXHEIGHT
                While *child
                  *child\weight  = !tuiRectHeight{*child\bbox}  - *child\minsize\y ;+ !tuiBorderHeight{*child\margin}
                  *child = *child\next_
                Wend

            End Select

          End If
          *balancer\grabbed   = True
        End If
      End If

    Case #TUIEV_MOUSEUP
      If *ev\value=0
        ;str_Dup{&*ev\notifyID,*balancer\obj\onRelease}
        *balancer\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
        ntui_Refresh{*balancer,Null}
        *balancer\grabbed=False
        done=True
      End If

    Case #TUIEV_KEYDOWN
      Select *ev\value
        Case #RAWKEY_LEFT      ;: _ntui_SetBalancerAttr{*balancer,#TUISCA_TOP,*balancer\obj\value - *balancer\step_} : done=True
        Case #RAWKEY_UP        ;: _ntui_SetBalancerAttr{*balancer,#TUISCA_TOP,*balancer\obj\value - *balancer\step_} : done=True
        Case #RAWKEY_RIGHT     ;: _ntui_SetBalancerAttr{*balancer,#TUISCA_TOP,*balancer\obj\value + *balancer\step_} : done=True
        Case #RAWKEY_DOWN      ;: _ntui_SetBalancerAttr{*balancer,#TUISCA_TOP,*balancer\obj\value + *balancer\step_} : done=True
      End Select

    Case #TUIEV_MOUSEMOVE
      If *balancer\obj\flags&#TUIF_ACTIVE
        If *balancer\grabbed
          *prev.tuiObject   = *balancer\obj\prev
          *next_.tuiObject  = *balancer\obj\next_
          If *next_><Null AND *prev><Null

            *parent.tuiObject = *balancer\obj\parent
            Select *balancer\orient
              Case #TUIORIENT_VERTICAL
                newPos.l   = *ev\pos\x - *balancer\grab\x
              Case #TUIORIENT_HORIZONTAL
                newPos.l   = *ev\pos\y - *balancer\grab\y
            End Select

            pw.l = *balancer\grabPrevWeight + newPos
            nw.l = *balancer\grabNextWeight - newPos
            If pw<0 Then nw+pw:pw=0
            If nw<0 Then pw+nw:nw=0
            If pw><*prev\weight OR nw><*next_\weight
              *prev\weight  = pw
              *next_\weight = nw
              _ntui_Layout{*parent,*balancer\obj\engine\buildRP,*parent\bbox}
              ntui_Refresh{*parent,*parent\bbox}
              ;str_Dup{&*ev\notifyID,*balancer\obj\onClick}
            End If
          End If
        End If
        done=True
      End If

    Default
      done = False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_DispatchBalancerEvent,{Null,Null}}


_ntui_CalculateBalancerMinSize:
Statement _ntui_CalculateBalancerMinSize{*balancer.tuiBalancer,*rp.RastPort}
  !_ASSERT{*balancer}
  !_ASSERT{*balancer\obj\classID=#TUICLASS_BALANCER}

  *balancer\obj\minsize\x  = 3
  *balancer\obj\minsize\y  = 3

  _ntui_GetBorderSize{*balancer\obj\engine,*balancer\obj\borderType,*balancer\obj\flags,*balancer\obj\border}
  *balancer\obj\minsize\x + !tuiBorderWidth{*balancer\obj\border}
  *balancer\obj\minsize\y + !tuiBorderHeight{*balancer\obj\border}
  *balancer\obj\minsize\x + !tuiBorderWidth{*balancer\obj\padding}
  *balancer\obj\minsize\y + !tuiBorderHeight{*balancer\obj\padding}

  If (*balancer\obj\next_><Null AND *balancer\obj\prev><Null)
    Select *balancer\orient
      Case #TUIORIENT_VERTICAL
        *balancer\obj\next_\flags | #TUIF_FIXWIDTH - #TUIF_FIXWIDTH
        *balancer\obj\prev\flags  | #TUIF_FIXWIDTH - #TUIF_FIXWIDTH
      Case #TUIORIENT_HORIZONTAL
        *balancer\obj\next_\flags | #TUIF_FIXHEIGHT - #TUIF_FIXHEIGHT
        *balancer\obj\prev\flags  | #TUIF_FIXHEIGHT - #TUIF_FIXHEIGHT
    End Select
  End If

End Statement
!_MakeGlobalFuncPointer{_ntui_CalculateBalancerMinSize,{Null,Null}}


_ntui_DrawBalancer:
Statement _ntui_DrawBalancer{*balancer.tuiBalancer,*rp.RastPort,*rpclip.tuiRect}
  !_ASSERT{*balancer}
  !_ASSERT{*balancer\obj\classID=#TUICLASS_BALANCER}
  *engine.tuiEngine = *balancer\obj\engine
  !_ASSERT{*engine}
  *obj.tuiObject = *balancer\obj

  If (*obj\borderType><#TUIBORDER_NONE)
    bgDone.l = ntui_DrawBorder{*engine,*rp,*obj\bbox,*obj\borderType,*obj\flags}
  End If

  knobPen.l = *obj\fgTuiPen

  If (*balancer\obj\flags&#TUIF_DISABLED)
    knobPen.l      = #TUIPEN_HALFHALFSHINE
  Else
    If *balancer\obj\flags&#TUIF_ACTIVE
      knobPen        = #TUIPEN_MARKER
  ;  Else
  ;    If *balancer\obj\flags&#TUIF_FOCUS
  ;      knobPen        = #TUIPEN_HALFHALFSHINE
  ;    Else
  ;      knobPen        = #TUIPEN_HALFHALFSHINE
  ;    End If
    End If
  End If
  If bgDone Then knobPen=-1

  If knobPen>=0
    SetAPen_ *rp,*engine\pen[knobPen]
    RectFill_ *rp,*obj\ibox\left,*obj\ibox\top,*obj\ibox\right,*obj\ibox\bottom
  End If
;Statement Return
  If *balancer\orient = #TUIORIENT_VERTICAL
    nits.l = (!tuiRectHeight{*balancer\obj\cbox}-6)/12
    If nits>4 Then nits=4
    For n.l=0 To nits
      xm.l = (*balancer\obj\cbox\left+*balancer\obj\cbox\right )/2
      ym.l = (*balancer\obj\cbox\top +*balancer\obj\cbox\bottom)/2 -2
      SetAPen_ *rp,*engine\pen[#TUIPEN_WHITE]
      WritePixel_ *rp,xm+1,ym+n*6
      WritePixel_ *rp,xm+1,ym-n*6
      WritePixel_ *rp,xm-1,ym+n*6 +3
      WritePixel_ *rp,xm-1,ym-n*6 +3

      SetAPen_ *rp,*engine\pen[#TUIPEN_SHADOW]
      WritePixel_ *rp,xm+1,ym+n*6+1
      WritePixel_ *rp,xm+1,ym-n*6+1
      WritePixel_ *rp,xm-1,ym+n*6+1 +3
      WritePixel_ *rp,xm-1,ym-n*6+1 +3

    Next
    SetAPen_ *rp,*engine\pen[#TUIPEN_WHITE]
    Move_ *rp,xm+1,*balancer\obj\cbox\top
 ;   Draw_ *rp,xm+1,*balancer\obj\cbox\bottom

    SetAPen_ *rp,*engine\pen[#TUIPEN_SHADOW]
    Move_ *rp,xm-1,*balancer\obj\cbox\top
;    Draw_ *rp,xm-1,*balancer\obj\cbox\bottom
  End If

  If *balancer\orient = #TUIORIENT_HORIZONTAL
    nits.l = (!tuiRectWidth{*balancer\obj\cbox}-6)/12
    If nits>4 Then nits=4

    For n.l=0 To nits
      xm.l = (*balancer\obj\cbox\left+*balancer\obj\cbox\right )/2
      ym.l = (*balancer\obj\cbox\top +*balancer\obj\cbox\bottom)/2
      SetAPen_ *rp,*engine\pen[#TUIPEN_WHITE]
      WritePixel_ *rp,xm+n*6,ym   +1
      WritePixel_ *rp,xm-n*6,ym   +1
      WritePixel_ *rp,xm+n*6+3,ym -1
      WritePixel_ *rp,xm-n*6+3,ym -1

      SetAPen_ *rp,*engine\pen[#TUIPEN_SHADOW]
      WritePixel_ *rp,xm+n*6+1,ym   +1
      WritePixel_ *rp,xm-n*6+1,ym   +1
      WritePixel_ *rp,xm+n*6+3+1,ym -1
      WritePixel_ *rp,xm-n*6+3+1,ym -1

    Next

    SetAPen_ *rp,*engine\pen[#TUIPEN_WHITE]
    Move_ *rp,*balancer\obj\cbox\left,ym   +1
;    Draw_ *rp,*balancer\obj\cbox\right,ym+1

    SetAPen_ *rp,*engine\pen[#TUIPEN_SHADOW]
    Move_ *rp,*balancer\obj\cbox\left,ym   -1
;    Draw_ *rp,*balancer\obj\cbox\right,ym-1

  End If

End Statement
!_MakeGlobalFuncPointer{_ntui_DrawBalancer,{Null,Null,Null}}


ntui_Balancer:
Function.tuiBalancer ntui_Balancer{*tagList.TagItem}

  flags.l = #TUIF_FIXSIZE|#TUIF_WANTMOVER
  *balancer.tuiBalancer = (.tuiBalancer)_ntui_CreateObject{#TUICLASS_BALANCER,SizeOf.tuiBalancer,flags}

  If *balancer
    *balancer\orient               = #TUIORIENT_VERTICAL
    *balancer\obj\borderType       = #TUIBORDER_TOOL
    *balancer\obj\flags            - #TUIF_FIXHEIGHT
    *balancer\obj\pointerID        = #TUIPOINTER_HDRAG
    *balancer\obj\padding\left     = 0,0,0,0
    *balancer\obj\margin\left      = 0,0,0,0
    *balancer\obj\fgTuiPen         = #TUIPEN_TRANSPARENT;HALFSHINE
    *balancer\obj\Draw             = *_ntui_DrawBalancer
    *balancer\obj\Layout           = Null ;*_ntui_LayoutBalancer
    *balancer\obj\DispatchEvent    = *_ntui_DispatchBalancerEvent
    *balancer\obj\CalculateMinSize = *_ntui_CalculateBalancerMinSize
    *balancer\obj\Deinit           = Null ;*_ntui_DeinitBalancer
    *balancer\obj\SetAttr          = *_ntui_SetBalancerAttr
    *balancer\obj\GetAttr          = *_ntui_GetBalancerAttr

    If *tagList Then ntui_SetAttrs{*balancer,*tagList}

  End If

  Function Return *balancer

End Function
!_MakeGlobalFuncPointer{ntui_Balancer,{Null}}


ntui_HBalancer:
Function.tuiBalancer ntui_HBalancer{*tagList.TagItem}

  DEFTYPE.tagL10 tagListL : n.l = 0
  tagListL\tag[n]\ti_Tag = #TUIBCA_ORIENTATION, #TUIORIENT_HORIZONTAL : n=n+1
  tagListL\tag[n]\ti_Tag = #TAG_DONE,0

  *balancer.tuiBalancer = ntui_Balancer{tagListL}
  If *balancer
    If *tagList Then ntui_SetAttrs{*balancer,*tagList}
  End If

  Function Return *balancer

End Function
!_MakeGlobalFuncPointer{ntui_HBalancer,{Null}}


Statement ntui_InitBalancerClass{}

  classID.l = ntui_RegisterClass{"balancer",(.tuiFunc)*ntui_Balancer,Null}
  ntui_RegisterAttr{classID,"orientation",#TUIBCA_ORIENTATION,#TUIAT_INT,#TUIORIENT_VERTICAL,#TUIORIENT_HORIZONTAL}
  classID.l = ntui_RegisterClass{"vbalancer",(.tuiFunc)*ntui_Balancer,Null}
  classID.l = ntui_RegisterClass{"hbalancer",(.tuiFunc)*ntui_HBalancer,Null}

End Statement

ntui_InitBalancerClass{}
