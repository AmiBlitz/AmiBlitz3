; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 5
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 80000
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 427
; CursorColumn    = 11
; LabelSearch     = "get"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_CRC32 {sourceaddr.l,blength.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ private: calculate the CRC32 hash-value out of a memory block.              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : address of memory block                                 /
;/ - blength.l       : byte length of memory block                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l        : CRC32 hash value                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_CRC32{sourceaddr.l, blength.l}
  c.l = $FFFFFFFF
  For n.l = 0 To blength-1
    byte.l = Peek.b(sourceaddr+n)
    c = Xor(tuiGlobal\CRC32_LUT[Xor(c , byte) & $ff] , (c LSR 8))
  Next
  c = Xor(c,$FFFFFFFF)
  Function Return c
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_GetUserIDFromString {userIDString.s}                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - userIDString.s    : ???                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_String2UserID{userIDString.s}
userID.l = _ntui_CRC32{&userIDString,FLen(userIDString)}
Function Return userID
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_SetUserID {userID.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ Usage only during buildhelper.                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_SetID{id.s}
Function Return ntui_SetAttr{tuiGlobal\buildHelper\tuiCurrent,#TUIA_ID,&id}
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_SetAttrs {*tui.tuiObject,*taglist.TagItem}          /
;/                                                                             /
;/ Description:                                                                /
;/ Same like ntui_SetAttr, but set multiple attributes at once.                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tui.tuiObject    : tuiObject                                                   /
;/ - *taglist.TagItem  : list of tagItems                                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : count of attributes that have been successfully changed                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_SetAttrs{*tui.tuiObject,*taglist.TagItem}
count.l = 0
If *taglist=0 Then Function Return count
While *taglist\ti_Tag><#TAG_DONE
  If ntui_SetAttr{*tui,*taglist\ti_Tag,*taglist\ti_Data} Then count+1
  *taglist + SizeOf.TagItem
Wend
Function Return count
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_SetMinSize {width.l,height.l}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - width.l    : ???                                                          /
;/ - height.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_SetMinSize{width.l,height.l}
tag5.tag5\ti_Tag = #TUIA_MINWIDTH,width,#TUIA_MINHEIGHT,height,#TAG_DONE,0
Function Return ntui_SetAttrs{tuiGlobal\buildHelper\tuiCurrent,tag5}
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_SetMaxSize {width.l,height.l}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - width.l    : ???                                                          /
;/ - height.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_SetMaxSize{width.l,height.l}
tag5.tag5\ti_Tag = #TUIA_MAXWIDTH,width,#TUIA_MAXHEIGHT,height,#TAG_DONE,0
Function Return ntui_SetAttrs{tuiGlobal\buildHelper\tuiCurrent,tag5}
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_SetBorder {borderType.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - borderType.l    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_SetBorder{borderType.l}
Function Return ntui_SetAttr{tuiGlobal\buildHelper\tuiCurrent,#TUIA_BORDERTYPE,borderType}
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = ntui_FreeWindow {*tuiWindow.tuiWindow}                   /
;/                                                                             /
;/ Description:                                                                /
;/ * close and free a window (completely) */                                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiWindow.tuiWindow    : ???                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_FreeWindow{*tuiWindow.tuiWindow}
ntui_FreeObject{*tuiWindow}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_FreeEngine {*tuiEngine.tuiEngine}                              /
;/                                                                             /
;/ Description:                                                                /
;/ Free a tuiEngine and all sub-tuiObjects
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : tuiEngine Object to free                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_FreeEngine{*tuiEngine.tuiEngine}
ntui_FreeObject{*tuiEngine}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_Enable {*tui.tuiObject,onoff.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tui.tuiObject    : ???                                                   /
;/ - onoff.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_Enable{*tui.tuiObject,onoff.l}
If onoff
  ntui_SetAttr{*tui,#TUIA_CLEARFLAGS,#TUIF_DISABLED}
Else
  ntui_SetAttr{*tui,#TUIA_SETFLAGS  ,#TUIF_DISABLED}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = ntui_HideWindowByID {*tuiEngine.tuiEngine,winID.l,@ins:: /
;/ tanceID.l}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : ???                                             /
;/ - winID.l    : ???                                                          /
;/ - instanceID.l    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ntui_HideWindowByID{*tuiEngine.tuiEngine,nameID.s,@instanceID.l}
!_ASSERT{*tuiEngine}
*tuiWindow.tuiWindow = ntui_GetWindowByID{*tuiEngine,nameID,instanceID}
Function Return ntui_HideWindow{*tuiWindow}
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = ntui_FreeWindowByID {*tuiEngine.tuiEngine,winID.l,@ins:: /
;/ tanceID.l}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : ???                                             /
;/ - winID.l    : ???                                                          /
;/ - instanceID.l    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ntui_FreeWindowByID{*tuiEngine.tuiEngine,nameID.s,@instanceID.l}

  !_ASSERT{*tuiEngine}
  *tuiWindow.tuiWindow = ntui_GetWindowByID{*tuiEngine,nameID,instanceID}
  If *tuiWindow
    ntui_FreeWindow{*tuiWindow}
    Function Return True
  End If
  Function Return False

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = ntui_ShowWindowByID {*tuiEngine.tuiEngine,winID.l,@ins:: /
;/ tanceID.l}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : ???                                             /
;/ - winID.l    : ???                                                          /
;/ - instanceID.l    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ntui_ShowWindowByID{*tuiEngine.tuiEngine,nameID.s,@instanceID.l}
!_ASSERT{*tuiEngine}
*tuiWindow.tuiWindow = ntui_GetWindowByID{*tuiEngine,nameID,instanceID}
If *tuiWindow=#NULL Then Function Return False
Function Return ntui_ShowWindow{*tuiWindow}
End Function


Function.w ntui_GetAttrByID{*tui.tuiObject,nameID.s,ti_Tag.l,*ti_Data.longP}
!_ASSERT{*tui}
*tui.tuiObject = ntui_GetObjectByID{*tui,nameID}
If *tui=#NULL Then Function Return 0
Function Return ntui_GetAttr{*tui,ti_Tag,*ti_Data}
End Function


Statement ntui_SetAttrByID{*tui.tuiObject,nameID.s,ti_Tag.l,*ti_Data.l}
!_ASSERT{*tui}
*tui.tuiObject = ntui_GetObjectByID{*tui,nameID}
If *tui=#NULL Then Statement Return
ntui_SetAttr{*tui,ti_Tag,*ti_Data}
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_SetString {*tui.tuiObject,string.s}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tui.tuiObject    : ???                                                   /
;/ - string.s    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_SetString{*tui.tuiObject,string.s}
!_ASSERT{*tui}
ntui_SetAttr{*tui,#TUIA_STRING,&string}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_SetValue {*tui.tuiObject,value.l}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tui.tuiObject    : ???                                                   /
;/ - value.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_SetValue{*tui.tuiObject,value.l}
!_ASSERT{*tui}
ntui_SetAttr{*tui,#TUIA_VALUE,value}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_SetStringByID {*tui.tuiObject,string.s,userID.l}               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tui.tuiObject    : ???                                                   /
;/ - string.s    : ???                                                         /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_SetStringByID{*tui.tuiObject,string.s,nameID.s}
ntui_SetAttrByID{*tui,nameID,#TUIA_STRING,&string}
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_GetStringByID {*tui.tuiObject,string.s,userID.l}               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tui.tuiObject    : ???                                                   /
;/ - string.s    : ???                                                         /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ntui_GetStringByID{*tui.tuiObject,nameID.s}
*strP.b = #NULL
ntui_GetAttrByID{*tui,nameID,#TUIA_STRING,&*strP}
If (*strP) Then string.s = Peek.s(*strP)
Function Return string
End Function


Function.l ntui_GetValueByID{*tui.tuiObject,nameID.s}
value.l = 0
ntui_GetAttrByID{*tui,nameID,#TUIA_VALUE,&value}
Function Return value
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_SetValueByID {*tui.tuiObject,value.l,userID.l}                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tui.tuiObject    : ???                                                   /
;/ - value.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_SetValueByID{*tui.tuiObject,value.l,nameID.s}
ntui_SetAttrByID{*tui,nameID,#TUIA_VALUE,value}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_BindByID {*tui.tuiObject,masterUserID.l,slaveUserID.l}         /
;/                                                                             /
;/ Description:                                                                /
;/ Same like ntui_Bind, but takes the UserID for input.                                             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tui.tuiObject : parent tuiObject, usually the tuiWindow                                                   /
;/ - masterUserID.l : UserID of the first tuiObject                                                   /
;/ - slaveUserID.l  : UserID of the second tuiObject                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ntui_BindByID{*tui.tuiObject,masterID.s,slaveID.s}
*tuiMaster.tuiObject = ntui_GetObjectByID{*tui,masterID}
*tuiSlave.tuiObject  = ntui_GetObjectByID{*tui,slaveID}
If (*tuiMaster><#NULL AND *tuiSlave><#NULL)
  ntui_Bind{*tuiMaster,*tuiSlave}
  Function Return True
End If
Function Return False
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetBGTuiPen {*tui.tuiObject}                       /
;/                                                                             /
;/ Description:                                                                /
;/ private: get the background pen for this ntui object */                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tui.tuiObject : tuiObject                                                  /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l       : tuiPen of the background (note: not an AmigaOS pen!)                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_GetBGTuiPen{*tui.tuiObject}
bgpen.l = #TUIPEN_BACKGROUND
  If (*tui\classID><#TUICLASS_GROUP) Then *tui = *tui\parent
  If *tui
      bgpen = *tui\bgTuiPen
  End If
Function Return bgpen
End Function

CNIF @#TUI_HAS_PAGE
Statement ntui_SetPage{*tuiPage.tuiPage,pageNum.l}
  ntui_SetAttr{*tuiPage,#TUIA_VALUE,pageNum}
End Statement
CEND


Function.s ntui_GetEventNotify{*tuiEvent.tuiEvent}
  If *tuiEvent Then Function Return str_Read{&*tuiEvent\notifyID}
  Function Return !NOTIFYID_NOTHING
End Function

Function.l ntui_GetEventValue{*tuiEvent.tuiEvent}
  If *tuiEvent Then Function Return *tuiEvent\value
  Function Return 0
End Function

Function.s ntui_GetEventString{*tuiEvent.tuiEvent}
  If *tuiEvent Then Function Return str_Read{&*tuiEvent\string}
  Function Return ""
End Function

Function.l ntui_GetEventObject{*tuiEvent.tuiEvent}
  If *tuiEvent Then Function Return *tuiEvent\tuiObject
  Function Return #NULL
End Function



