; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 5
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 80000
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 578
; CursorColumn    = 41
; LabelSearch     = "get"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA

; get the child object
Function.tuiEngine ntui_GetEngine{*obj.tuiObject}
  If *obj=Null Then Function Return Null
  Function Return *obj\engine
End Function

; get the child object
Function.tuiObject ntui_GetChildObject{*obj.tuiObject}
  If *obj=Null Then Function Return Null
  Function Return *obj\child
End Function


; get the next object in the tab-cycle chain
Function.tuiObject ntui_GetParentObject{*obj.tuiObject}
  If *obj=Null Then Function Return Null
  Function Return *obj\parent
End Function


; get the previous object
Function.tuiObject ntui_GetPrevObject{*obj.tuiObject}
  If *obj=Null Then Function Return Null
  Function Return *obj\prev
End Function


; get the next object
Function.tuiObject ntui_GetNextObject{*obj.tuiObject}
  If *obj=Null Then Function Return Null
  Function Return *obj\next_
End Function


Statement FAST ntui_Rethink{*obj.tuiObject}
  *win.tuiWindow    = ntui_GetWindow{*obj}
  If  *win = Null Then Statement Return
  *win\focus = Null
  *win\obj\engine\mover = Null
  *win\obj\engine\focus = Null
  
  *parent.tuiObject = ntui_GetParentObject{*obj}
  If *parent = *obj\engine OR *parent=Null Then *parent=*obj
  If *parent\flags&#TUIF_ONSCREEN
    If *win
      *rp.RastPort = ntui_ObtainRastPort{*win}
      If *rp
        _ntui_CalculateMinSize{*obj,*rp}
        _ntui_Layout{*obj,*rp,*obj\bbox}
        ntui_ReleaseRastPort{*win}
      End If
      ntui_Refresh{*obj,Null}
    End If
  End If

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_CRC32 {sourceaddr.l,blength.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ private: calculate the CRC32 hash-value out of a memory block.              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : address of memory block                                 /
;/ - blength.l       : byte length of memory block                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l        : CRC32 hash value                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l __ntui_CRC32_dep{sourceaddr.l, blength.l}
  c.l = $FFFFFFFF
  For n.l = 0 To blength-1
    byte.l = Peek.b(sourceaddr+n)
    c = Xor(tuiGlobal\CRC32_LUT[Xor(c , byte) & $ff] , (c LSR 8))
  Next
  c = Xor(c,$FFFFFFFF)
  Function Return c
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_FreeWindow {*win.tuiWindow}                   /
;/                                                                             /
;/ Description:                                                                /
;/ * close and free a window (completely) */                                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *win.tuiWindow    : ???                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_FreeWindow{*win.tuiWindow}

  ntui_FreeObject{*win}

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_FreeEngine {*engine.tuiEngine}                              /
;/                                                                             /
;/ Description:                                                                /
;/ Free a tuiEngine and all sub-tuiObjects
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *engine.tuiEngine    : tuiEngine Object to free                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_FreeEngine{*engine.tuiEngine}

  ntui_FreeObject{*engine}

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_Enable {*obj.tuiObject,onoff.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *obj.tuiObject    : ???                                                   /
;/ - onoff.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_Enable{*obj.tuiObject,onoff.l}
  !_ASSERT{*obj}

  If onoff
    ntui_SetAttr{*obj,#TUIA_CLEARFLAGS,#TUIF_DISABLED}
  Else
    ntui_SetAttr{*obj,#TUIA_SETFLAGS  ,#TUIF_DISABLED}
  End If

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_HideWindowByID {*engine.tuiEngine,winID.l,@ins:: /
;/ tanceID.l}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *engine.tuiEngine    : ???                                             /
;/ - winID.l    : ???                                                          /
;/ - instanceID.l    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_HideWindowByID{*engine.tuiEngine,nameID.s,@instanceID.l}
  !_ASSERT{*engine}

  *win.tuiWindow = ntui_GetWindowByID{*engine,nameID,instanceID}
  If *win Then Function Return ntui_HideWindow{*win}
  Function Return False

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_FreeWindowByID {*engine.tuiEngine,winID.l,@ins:: /
;/ tanceID.l}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *engine.tuiEngine    : ???                                             /
;/ - winID.l    : ???                                                          /
;/ - instanceID.l    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_FreeWindowByID{*engine.tuiEngine,nameID.s,@instanceID.l}
  !_ASSERT{*engine}

  *win.tuiWindow = ntui_GetWindowByID{*engine,nameID,instanceID}
  If *win
    ntui_FreeWindow{*win}
    Function Return True
  End If
  Function Return False

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_ShowWindowByID {*engine.tuiEngine,winID.l,@ins:: /
;/ tanceID.l}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *engine.tuiEngine    : ???                                             /
;/ - winID.l    : ???                                                          /
;/ - instanceID.l    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_ShowWindowByID{*engine.tuiEngine,nameID.s,@instanceID.l}

  !_ASSERT{*engine}
  *win.tuiWindow = ntui_GetWindowByID{*engine,nameID,instanceID}
  If *win Then Function Return ntui_ShowWindow{*win}
  Function Return False

End Function


Function.l ntui_GetAttrByID{*parent.tuiObject,nameID.s,ti_Tag.l,*ti_Data.l}
  !_ASSERT{*parent}

  *obj.tuiObject = ntui_GetObjectByID{*parent,nameID}
  !_ASSERT{*obj}
  If *obj Then Function Return ntui_GetAttr{*obj,ti_Tag,*ti_Data}
  Function Return False

End Function


Function.l ntui_SetAttrByID{*parent.tuiObject,nameID.s,ti_Tag.l,ti_Data.l}
  !_ASSERT{*parent}

  *obj.tuiObject = ntui_GetObjectByID{*parent,nameID}
  !_ASSERT{*obj}
  If *obj Then Function Return ntui_SetAttr{*obj,ti_Tag,ti_Data}  
  Function Return False

End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_SetString {*obj.tuiObject,string.s}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *obj.tuiObject    : ???                                                   /
;/ - string.s    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_SetString{*obj.tuiObject,string.s}
  !_ASSERT{*obj}

  Function Return ntui_SetAttr{*obj,#TUIA_STRING,&string}

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_SetValue {*obj.tuiObject,value.l}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *obj.tuiObject    : ???                                                   /
;/ - value.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_SetValue{*obj.tuiObject,value.l}
  !_ASSERT{*obj}

  Function Return ntui_SetAttr{*obj,#TUIA_VALUE,value}

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_SetStringByID {*parent.tuiObject,string.s,userID.l}               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *obj.tuiObject    : ???                                                   /
;/ - string.s    : ???                                                         /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_SetStringByID{*parent.tuiObject,nameID.s,string.s}
  !_ASSERT{*parent}

  succ.l = ntui_SetAttrByID{*parent,nameID,#TUIA_STRING,&string}
  Function Return succ

End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_GetStringByID {*parent.tuiObject,string.s,userID.l}               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tui.tuiObject    : ???                                                   /
;/ - string.s    : ???                                                         /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ntui_GetStringByID{*parent.tuiObject,nameID.s}
  !_ASSERT{*parent}

  ntui_GetAttrByID{*parent,nameID,#TUIA_STRING,&strP.l}
  If (strP) Then string.s = Peek.s(strP)
  Function Return string

End Function


Function.l ntui_GetValueByID{*parent.tuiObject,nameID.s}
  !_ASSERT{*parent}

  ntui_GetAttrByID{*parent,nameID,#TUIA_VALUE,&ret.l}
  Function Return ret

End Function


Function.s ntui_GetID{*obj.tuiObject}
  !_ASSERT{*obj}

  ntui_GetAttr{*obj,#TUIA_ID,&strP.l}
  If (strP) Then id.s = Peek.s(strP)
  Function Return id

End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_SetValueByID {*tui.tuiObject,value.l,userID.l}                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tui.tuiObject    : ???                                                   /
;/ - value.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_SetValueByID{*parent.tuiObject,nameID.s,value.l}
  !_ASSERT{*parent}

  Function Return ntui_SetAttrByID{*parent,nameID,#TUIA_VALUE,value}

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_BindByID {*parent.tuiObject,masterUserID.l,slaveUserID.l}         /
;/                                                                             /
;/ Description:                                                                /
;/ Same like ntui_Bind, but takes the UserID for input.                                             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *parent.tuiObject : parent tuiObject, usually the tuiWindow                                                   /
;/ - masterID.l : UserID of the first tuiObject                                                   /
;/ - slaveID.l  : UserID of the second tuiObject                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_BindByID{*parent.tuiObject,masterID.s,slaveID.s}
  !_ASSERT{*parent}

  *master.tuiObject = ntui_GetObjectByID{*parent,masterID}
  *slave.tuiObject  = ntui_GetObjectByID{*parent,slaveID}
  If (*master><Null AND *slave><Null)
    ntui_Bind{*master,*slave}
    Function Return True
  End If
  Function Return False

End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetBGTuiPen {*obj.tuiObject}                       /
;/                                                                             /
;/ Description:                                                                /
;/ private: get the background pen for this ntui object */                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *obj.tuiObject : tuiObject                                                  /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l       : tuiPen of the background (note: not an AmigaOS pen!)                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l __ntui_GetBGTuiPen_dep{*obj.tuiObject}

  bgpen.l = #TUIPEN_BACKGROUND
  If (*obj\classID><#TUICLASS_GROUP) Then *obj = *obj\parent
  If *obj
    bgpen = *obj\bgTuiPen
  End If
  Function Return bgpen

End Function


Function.s ntui_GetNotifyID{*notify.tuiNotify}

  If *notify Then Function Return str_Read{&*notify\id}
  Function Return !NOTIFYID_NOTHING

End Function

Function.l ntui_GetNotifyValue{*notify.tuiNotify}

  If *notify Then Function Return *notify\ev\value
  Function Return 0

End Function

Function.s ntui_GetNotifyString{*notify.tuiNotify}

  If *notify Then Function Return str_Read{&*notify\ev\string}
  Function Return ""

End Function

Function.tuiObject ntui_GetNotifyObject{*notify.tuiNotify}

  If *notify Then Function Return *notify\obj
  Function Return Null

End Function

Function.tuiWindow ntui_GetNotifyWindow{*notify.tuiNotify}

  If *notify
    *win.tuiWindow = ntui_GetWindow{*notify\obj}
    Function Return *win
  End If
  Function Return Null

End Function

Statement ntui_PostNotifyWithEvent_dep{*engine.tuiEngine,notify.s,value.l,string.s}

  *ev.tuiEvent = _ntui_CreateEvent{*engine,#TUIEV_USER}
  If *ev
    If string Then str_Write{&*ev\string,string}
    *ev\value = value
    ntui_PostNotify{*engine,&notify,*ev}
  End If

End Statement
