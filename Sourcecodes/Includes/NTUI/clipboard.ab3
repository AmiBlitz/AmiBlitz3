; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "ClipboardDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 0
; Version         = 0.0.0
; NumberOfBuilds  = 167
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 198
; CursorColumn    = 5
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: clipboard.include                                                     /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 08/01/2008                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Easy Clipboard I/O                                            /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
OPTIMIZE 7
SYNTAX 6
XINCLUDE "strptr.include.ab3"
CEND

#CLIPBOARD_MODE_UNDEFINED = 0
#CLIPBOARD_MODE_WRITE     = 1
#CLIPBOARD_MODE_READ      = 2
#CLIPBOARD_BUFFERSIZE     = 256

NEWTYPE.clipboardHandle
*iffH.IFFHandle
mode.l
chunkDepth.l
;*cn.ContextNode
;done.l ; bytes read from buffer
todo.l ; bytes remaining in buffer
eod.l  ; end of data
eoc.l  ; end of chunk
temp.b[#CLIPBOARD_BUFFERSIZE]  ; temporary buffer for reading from clipboard
End NEWTYPE


Statement clipboard_Close{*cH.clipboardHandle}

  If *cH=Null Then Statement Return

  If *cH\iffH
    If *cH\mode=#CLIPBOARD_MODE_WRITE
       While (*cH\chunkDepth>0) : PopChunk_ *cH\iffH : *cH\chunkDepth-1 : Wend
    End If

    CloseIFF_ *cH\iffH
    If *cH\iffH\iff_Stream Then CloseClipboard_ *cH\iffH\iff_Stream : *cH\iffH\iff_Stream = Null
    FreeIFF_ *cH\iffH
    *cH\iffH = Null
  End If

End Statement


Statement clipboard_Free{*cH.clipboardHandle}

  If *cH=Null Then Statement Return

  clipboard_Close{*cH}
  FreeVec_ *cH
  *cH = Null

End Statement


Function.l clipboard_WriteLine{*cH.clipboardHandle,*textP.b,@blen.l}

  succ.l = False
  If blen<0
    blen = 0
    While Peek.b(*textP+blen) : blen+1 : Wend
  End If

  If (WriteChunkBytes_ (*cH\iffH, *textP, blen) = blen) Then succ=True

  Function Return succ

End Function


Function.clipboardHandle clipboard_OpenWrite{@unit.l}

  *cH.clipboardHandle = AllocVec_(SizeOf.clipboardHandle,#MEMF_ANY)
  If *cH=Null Then Function Return Null

  If unit<0 Then unit = 0

  *cH\mode       = #CLIPBOARD_MODE_UNDEFINED
  *cH\chunkDepth = 0

  *cH\iffH=AllocIFF_()
  If *cH\iffH
    *cH\iffH\iff_Stream = OpenClipboard_ (unit)
    If *cH\iffH\iff_Stream
      InitIFFasClip_ *cH\iffH

      If (OpenIFF_ (*cH\iffH, #IFFF_WRITE)=0)
        If (PushChunk_ (*cH\iffH, #ID_FTXT, #ID_FORM, #IFFSIZE_UNKNOWN)=0)
          *cH\chunkDepth+1
          If (PushChunk_ (*cH\iffH, 0, #ID_CHRS, #IFFSIZE_UNKNOWN)=0)
            *cH\chunkDepth+1
            *cH\mode=#CLIPBOARD_MODE_WRITE
            Function Return *cH
          End If
        End If
      End If
    End If
  End If

  clipboard_Free{*cH}
  *cH = Null

  Function Return Null

End Function


Function.clipboardHandle clipboard_OpenRead{@unit.l}

  *cH.clipboardHandle = AllocVec_(SizeOf.clipboardHandle,#MEMF_ANY)
  If *cH=Null Then Function Return Null

  If unit<0 Then unit = 0

  *cH\mode=#CLIPBOARD_MODE_UNDEFINED
  *cH\chunkDepth = 0

  *cH\iffH=AllocIFF_()
  If *cH\iffH
    *cH\iffH\iff_Stream = OpenClipboard_ (unit)
    If *cH\iffH\iff_Stream
      InitIFFasClip_ *cH\iffH
      If (OpenIFF_ (*cH\iffH, #IFFF_READ)=0)
        If (StopChunk_ (*cH\iffH, #ID_FTXT, #ID_CHRS)=0)
          *cH\eoc  = True
          *cH\eod  = False
          *cH\todo = 0
          *cH\mode=#CLIPBOARD_MODE_READ
          Function Return *cH
        End If
      End If
    End If
  End If
  clipboard_Free{*cH}
  *cH = Null

  Function Return Null

End Function


Function.l clipboard_ReadLine{*cH.clipboardHandle, *strPtr.l}

  If *cH\eod Then Poke.l *strPtr,Null : Function Return Null

  Repeat
    If *cH\eoc
      err.l = ParseIFF_ (*cH\iffH,#IFFPARSE_SCAN)
      Select err
        Case #IFFERR_EOC : *cH\eoc = True
        Case #IFFERR_EOF : *cH\eod = True
        Case 0           : ; ok
          *cn.ContextNode = CurrentChunk_(*cH\iffH)

          If (*cn)
            If ((*cn\cn_Type = #ID_FTXT) AND (*cn\cn_ID = #ID_CHRS))
              *cH\todo = ReadChunkBytes_ (*cH\iffH,&*cH\temp[0],#CLIPBOARD_BUFFERSIZE-2)
              If *cH\todo = 0 OR *cH\temp[0]=0 Then *cH\eoc = True : Else *cH\eoc=False
            End If
          End If

        Default : *cH\eod = True
      End Select

    End If
  Until *cH\eoc=False OR *cH\eod=True

  If *cH\eod
    clipboard_Close{*cH}
    Poke.l *strPtr , Null
    Function Return Null
  End If

  text.s = ""
  pos.l  = 0
  eol.l  = False
  rc.l   = False

  While eol=False

    While pos<*cH\todo AND eol=False
      Select *cH\temp[pos]
        Case $0A : eol = True : rc = True
        Case 0   : eol = True : *cH\eoc=True
        Default  : pos+1
      End Select
    Wend

    *cH\temp[pos] = 0
    text.s + Peek.s(&*cH\temp[0])
    If rc Then text+"\\n"
    *cH\temp[0]=0

    For n.l=pos+1 To *cH\todo-1 : *cH\temp[n-pos-1] = *cH\temp[n] : Next
    *cH\todo = *cH\todo-pos-1
    pos = 0

    If *cH\todo<=0
      *cH\todo = ReadChunkBytes_ (*cH\iffH,&*cH\temp[0],#CLIPBOARD_BUFFERSIZE-2)
    End If
    If *cH\temp[0]=0 Then *cH\eoc = True : eol=True ;: NPrint "no more data...1"

  Wend

  str_Write{*strPtr,text}

  Function Return Peek.l(*strPtr)

End Function


CNIF #__include=0
; demo
*cH.clipboardHandle = clipboard_OpenRead{0}
If *cH
  count.l = 0
  *text.str = Null
  While clipboard_ReadLine{*cH,&*text}><Null
    parsedtext.s = ""
    For n.l=0 To str_Len{*text}-1
      c.b = Peek.b(&*text\str+n)
      a.s = "0x"+Right$(Hex$(c&$FF),2)
      If c.b>31 Then a.s = Chr$(c)
      If c=-96 Then a = ""
      If c=10 Then a ="\n"
      parsedtext.s + a.s
    Next

    NPrint parsedtext,"|",count,"+",str_Len{*text}
    count + str_Len{*text}
  Wend
  clipboard_Free{*cH}
  str_Free{*text}
Else
  NPrint "error!"
End If
NPrint "done."
End
CEND
