; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 15
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1243
; CursorColumn    = 36
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA
XINCLUDE "useful.include.ab3"
XINCLUDE "zlib.include.ab3"
XINCLUDE "prefixtree.include.ab3"
XINCLUDE "strptr.include.ab3"
XINCLUDE "v43+.definitions.ab3"
XINCLUDE "error.include.ab3"
XINCLUDE "screennotify.include.ab3"

;/* General TUI Constants */
CNIF @#TUIMAX_INQUEUE=0
#TUIMAX_INQUEUE           = 160 ;/* size of the input queue for event messages */
CEND
CNIF @#TUI_DEBUG=0
#TUI_DEBUG                = 0  ;/* in debug mode, backgrounds will have random colors to see refreshes */
CEND
#TUI_MINPIXELSIZE         = 8  ;/* this shall be the smallest item in the gui in pixels */

#TUI_COOKIE               = $44332211 ;/* magic cookie to identify the global tui object */

#TUIMAX_RAWKEYS           = 256 ;/* number of raw keys in rawkey map          */
#TUIMAX_MOUSEBUTTONS      = 8   ;/* number of mouse buttonsin mousebutton map */
#TUIMAX_XMLCLASSES        = 100

;/* TUI Refresh Modes */
#TUIRM_CLEAR              = 0  ;/* fast but flickering */
#TUIRM_SMART              = 1  ;/* slow but stable */
#TUIRM_DBLBUFF            = 2  ;/* double buffering, fast but need more memory */

;/* TUI Object Types */
#TUICLASS_INVALID           = 0  ;/* no object shall have 0 as ID => probably uninitialized */
#TUICLASS_GLOBAL            = 1  ;/* the one root object that is on top of all engines  */
#TUICLASS_ENGINE            = 2  ;/* an engine with ports, windows etc, usually one per app */
#TUICLASS_WINDOW            = 3  ;/* a window, acts as a container for all objects  */
#TUICLASS_GROUP             = 4  ;/* a group, contains other objects (incl. groups) */
#TUICLASS_BUTTON            = 5  ;/* a button that contains text, border and image  */
#TUICLASS_LABEL             = 6  ;/* simple text label                              */
#TUICLASS_SLIDER            = 7  ;/* multi purpose slider                           */
#TUICLASS_SCROLLER          = 8  ;/* horizontal and vertical scroller               */
#TUICLASS_TABVIEW           = 9  ;/* page container                                   */
#TUICLASS_CUSTOMVIEW        = 10 ;/* user drawable view                             */
#TUICLASS_SPACE             = 11 ;/* simple spacer for layout help                  */
#TUICLASS_LISTVIEW          = 12 ;/* listview, multicolumn and multiselect possible */
#TUICLASS_TREE              = 13 ;/* view of a tree structure                       */
#TUICLASS_CYCLE             = 14 ;/* traditional cycle gadget                       */
#TUICLASS_TEXTBOX           = 15 ;/* textbox, also string gadget and text display (read only) */
#TUICLASS_PROGRESSBAR       = 17 ;/* progress bar, suitable for progress display      */
#TUICLASS_ADSR              = 18 ;/* attack, decay, sustain, release gadge for musical applications */
#TUICLASS_LEVELMETER        = 19 ;/* levelmeter with LEDs for musical applications  */
#TUICLASS_DOCK              = 20 ;/* dock/undock windows                            */
#TUICLASS_IMAGEVIEW         = 21 ;/* image or anim widget                           */
#TUICLASS_SEPERATOR         = 22 ;/* a seperator bar, e.g. for menu or toolbars      */
#TUICLASS_MENUITEM          = 24 ;/* menu item in various flavours : MENUITEM, POPUP, DROPDOWN, SUBMENU */
#TUICLASS_SCROLLVIEW        = 25
#TUICLASS_BALANCER          = 26
#TUICLASS_TREEVIEW          = 27
#TUICLASS_REQUESTER         = 28
#TUIMAX_CLASSES             = 29

;/* TUI Orientation Flags */
#TUIORIENT_VERTICAL       =  1
#TUIORIENT_HORIZONTAL     =  2
#TUIORIENT_INVVERTICAL    = -1
#TUIORIENT_INVHORIZONTAL  = -2
#TUIORIENT_NONE           =  0

#TUICM_UNDEFINED   = 0
#TUICM_COLORMAPPED = 1
#TUICM_TRUECOLOR   = 2
#TUICM_4COLOR      = 3

#TUIFUNC_NONE      = 0
#TUIFUNC_UP        = 1
#TUIFUNC_DOWN      = 2
#TUIFUNC_LEFT      = 3
#TUIFUNC_RIGHT     = 4
#TUIFUNC_INC       = 5
#TUIFUNC_DEC       = 6
#TUIFUNC_SPIN      = 7
#TUIMAX_FUNC       = 8

#TUI_READ  = 1
#TUI_WRITE = 2
#TUI_RAND  = #TUI_READ|#TUI_WRITE

;/* tuiObject Attributes */
#TUIA_NONE                =  0 ; invalid attribute
#TUIA_STRING              =  1 ; rw (string) general string value
#TUIA_VALUE               =  2 ; rw (int) general integer value
#TUIA_HELP                =  3 ; rw (string) tooltip text
#TUIA_FLAGS               = 35 ; rw (int) #TUIF_... flags
#TUIA_WIDTH               = 36 ; r  (int) width in pixels
#TUIA_HEIGHT              = 37 ; r  (int) height in pixels
#TUIA_MINWIDTH            = 38 ; rw (int) minimum width in pixels
#TUIA_MINHEIGHT           = 39 ; rw (int) minimum height in pixels
#TUIA_MAXWIDTH            = 40 ; rw (int) maximum width in pixels
#TUIA_MAXHEIGHT           = 41 ; rw (int) maximum height in pixels
#TUIA_XPOS                = 42 ; r  (int) x position, left edge in pixels relative to window
#TUIA_YPOS                = 43 ; r  (int) y position, top edge in pixels relative to window
#TUIA_BORDERTYPE          = 44 ; rw (int) #TUIBORDER_... type of border
#TUIA_FOCUS               = 45 ; rw (bool) if object has focus
#TUIA_CLASSID             = 46 ; r  (int) TUICLASS_... objects type ID
#TUIA_ID                  = 47 ; rw (string) name id
#TUIA_BGPEN               = 48 ; rw (int) #TUIPEN_... background pen
#TUIA_FGPEN               = 49 ; rw (int) #TUIPEN_... foreground pen
#TUIA_BGRGB               = 50 ; rw (int) $rrggbb background color
#TUIA_FGRGB               = 51 ; rw (int) $rrggbb foreground color
#TUIA_BGIMAGE             = 52 ; rw (string) background image (name or file)
#TUIA_FGIMAGE             = 53 ; rw (string) foreground image (name or file)
#TUIA_SETFLAGS            = 54 ;  w (int) set the given flags
#TUIA_CLEARFLAGS          = 55 ;  w (int) clear the given flags
#TUIA_INVISIBLE           = 56 ; rw (bool) object is hidden
#TUIA_ENABLED             = 57 ; rw (bool) object is enabled
#TUIA_ONSCREEN            = 58 ; r  (bool) object is visible
#TUIA_ACTIVE              = 59 ; r  (bool) object is active
#TUIA_MOVER               = 60 ; r  (bool) object is mouse over
#TUIA_DISABLED            = 61 ; rw (bool) object is in disabled state
#TUIA_LEFTMARGIN          = 62 ; rw (int) left margin in pixels
#TUIA_TOPMARGIN           = 63 ; rw (int) top margin in pixels
#TUIA_RIGHTMARGIN         = 64 ; rw (int) right margin in pixels
#TUIA_BOTTOMMARGIN        = 65 ; rw (int) bottom margin in pixels
#TUIA_LEFTPADDING         = 66 ; rw (int) left padding in pixels
#TUIA_TOPPADDING          = 67 ; rw (int) top padding in pixels
#TUIA_RIGHTPADDING        = 68 ; rw (int) right padding in pixels
#TUIA_BOTTOMPADDING       = 69 ; rw (int) bottom padding in pixels
#TUIA_CBOX                = 71 ; r  (*tuiRect) content box
#TUIA_IBOX                = 72 ; r  (*tuiRect) innerbox box
#TUIA_BBOX                = 73 ; r  (*tuiRect) bounding box
#TUIA_USERDATA            = 74 ; rw (*) user data
#TUIA_PADDING             = 76 ;  w (int) all four padding directions at once
#TUIA_MARGIN              = 77 ;  w (int) all four margins at once
#TUIA_MD_CALCULATEMINSIZE = 80 ; rw (*func) function pointer to ntui_CalculateMinSize method
#TUIA_MD_DISPATCHEVENT    = 81 ; rw (*func) function pointer to ntui_DispatchEvent method
#TUIA_MD_DRAW             = 82 ; rw (*func) function pointer to ntui_Draw method
#TUIA_MD_DEINIT           = 83 ; rw (*func) function pointer to ntui_Deinit method
#TUIA_MD_INIT             = 84 ; rw (*func) function pointer to ntui_Init method
#TUIA_MD_GETATTR          = 85 ; rw (*func) function pointer to ntui_GetAttr method
#TUIA_MD_SETATTR          = 86 ; rw (*func) function pointer to ntui_SetAttr method
#TUIA_MD_LAYOUT           = 87 ; rw (*func) function pointer to ntui_Layout method
#TUIA_NEXTOBJECT          = 90 ; r  (*obj) pointer to next object in hirarchie
#TUIA_PREVOBJECT          = 91 ; r  (*obj) pointer to previous object in hirarchie
#TUIA_PARENTOBJECT        = 92 ; r  (*obj) pointer to parent object in hirarchie
#TUIA_CHILDOBJECT         = 93 ; r  (*obj) pointer to child object in hirarchie
#TUIA_NEXTTABOBJECT       = 94 ; r  (*obj) pointer to next object in tab chain
#TUIA_PREVTABOBJECT       = 95 ; r  (*obj) pointer to prevouis object in tab chain
#TUIA_MOUSEPOINTER        = 96
#TUIA_SAMEWIDTH           = 97
#TUIA_SAMEHEIGHT          = 98
#TUIA_SAMESIZE            = 99
#TUIA_FIXWIDTH            = 100
#TUIA_FIXHEIGHT           = 101
#TUIA_FIXSIZE             = 102
#TUIA_ALIGN               = 103
#TUIA_ENGINE              = 104
#TUIA_GRADIENT            = 105
#TUIA_FIX                 = 106
#TUIA_BOLD                = 107
#TUIA_ITALIC              = 108
#TUIA_UNDERLINED          = 109
#TUIA_SMALL               = 110
#TUIA_TOGGLE              = 111
#TUIA_ONFOCUS             = 112
#TUIA_ONFOCUSCB           = 113
#TUIA_ONLOSEFOCUS         = 114
#TUIA_ONLOSEFOCUSCB       = 115
#TUIA_ONMOVER             = 116
#TUIA_ONMOVERCB           = 117
#TUIA_ONLOSEMOVER         = 118
#TUIA_ONLOSEMOVERCB       = 119
#TUIA_ONFREE              = 120
#TUIA_ONFREECB            = 121
#TUIA_DIRTY               = 122 ; rw  (bool) object is dirty

#TUIA_USER                = $80000000

#TUIALIGN_NONE   = 0
#TUIALIGN_LEFT   = 1
#TUIALIGN_TOP    = 2
#TUIALIGN_RIGHT  = 3
#TUIALIGN_BOTTOM = 4
#TUIALIGN_MIDDLE = 5
#TUIALIGN_CENTER = 6

;/* Logical TUI Sizes */
#TUISIZE_MIN              = 0  ; minimum possible (usually equals to 8)
#TUISIZE_SMALLFONT        = 1  ; like small font
#TUISIZE_FONT             = 2  ; like normal font
#TUISIZE_SERIFFONT        = 3  ; like serif font
#TUISIZE_FIXFONT          = 4  ; like fix font
#TUISIZE_SMALLINLINE      = 5  ; like small font  +2
#TUISIZE_INLINE           = 6  ; like normal font +2
#TUISIZE_HALFINLINE       = 7  ; like normal (font +2)/2
#TUISIZE_DOUBLEINLINE     = 8  ; like normal (font +2)/2
#TUISIZE_ONEHALFINLINE    = 9  ; like normal (font +2)/2
#TUISIZE_SERIFINLINE      = 10 ; like serif font    +2
#TUISIZE_FIXINLINE        = 11 ; like fix font    +2
#TUISIZE_BUTTON           = 12 ; like buttons (normal font +2 + pad\y*2)
#TUISIZE_HALFBUTTON       = 13
#TUISIZE_KNOB             = 14 ; knob size like in scroller
#TUISIZE_SCROLLER         = 15 ; knob size like in scroller+2
#TUISIZE_EMBLEM           = 16
#TUISIZE_NATIVE           = 17 ; native image resolution
#TUISIZE_MAX              = 18 ; maximum possible
#TUIMAX_SIZES             = 19

;/* TUI Flags */
#TUIF_NONE                = 0
#TUIF_INVISIBLE           = 1 LSL 1 ; object exists, but is hidden
#TUIF_GONE                = 1 LSL 2
#TUIF_TOGGLE              = 1 LSL 3 ; button toggle or press
#TUIF_WANTTAB             = 1 LSL 4
#TUIF_WANTMOVER           = 1 LSL 5
#TUIF_WANTBACKGROUND      = 1 LSL 6

;/* alignment */
#TUIF_TOP                 = 1 LSL 7 ; vertical alignment
#TUIF_MIDDLE              = 1 LSL 8
#TUIF_BOTTOM              = 1 LSL 9
#TUIF_LEFT                = 1 LSL 10 ; horizontal alignment
#TUIF_CENTER              = 1 LSL 11
#TUIF_RIGHT               = 1 LSL 12

;/* resizing */
#TUIF_FIXWIDTH            = 1 LSL 13 ; fix or sizable
#TUIF_FIXHEIGHT           = 1 LSL 14
#TUIF_FIXSIZE             = #TUIF_FIXWIDTH|#TUIF_FIXHEIGHT
#TUIF_SAMEWIDTH           = 1 LSL 15 ; force objects to have the same size
#TUIF_SAMEHEIGHT          = 1 LSL 16
#TUIF_SAMESIZE            = #TUIF_SAMEWIDTH|#TUIF_SAMEHEIGHT

;/* size */
#TUIF_SMALL               = 1 LSL 17 ; small version
#TUIF_SERIF               = 1 LSL 18

;/* style */
#TUIF_FIX                 = 1 LSL 19 ; fix version
#TUIF_BOLD                = 1 LSL 20 ; bold text
#TUIF_ITALIC              = 1 LSL 21 ; italic
#TUIF_UNDERLINED          = 1 LSL 22 ; underlined
#TUIF_HIGHLIGHT           = 1 LSL 23

;/* internal */
#TUIF_ONSCREEN            = 1 LSL 24 ; object is visible
#TUIF_CONTENTDIRTY        = 1 LSL 25 ; object content is dirty and needs a re-draw
#TUIF_BGDIRTY             = 1 LSL 26 ; object background is dirty and needs a re-draw
#TUIF_FRAMEDIRTY          = 1 LSL 27 ; object frame is dirty and needs a re-draw
#TUIF_DIRTY               = #TUIF_CONTENTDIRTY | #TUIF_BGDIRTY | #TUIF_FRAMEDIRTY

;/* state */
#TUIF_DISABLED            = 1 LSL 28 ; object is in disabled state
#TUIF_ACTIVE              = 1 LSL 29 ; object is active (e.g. button is pressed)
#TUIF_MOVER               = 1 LSL 30 ; object is mover
#TUIF_FOCUS               = 1 LSL 31 ; object has focus
#TUIF_NORMAL              = $00000000

#TUI_NOFLAGS              = $FFFFFFFF
;#TUIF_MASK                = $FF000000

;/* TUI Logical Pens */
#TUIPEN_TRANSPARENT       = -1
#TUIPEN_BACKGROUND        = 0
#TUIPEN_BG                = 0
#TUIPEN_BLACK             = 1
#TUIPEN_WHITE             = 2
#TUIPEN_SHINE             = 3
#TUIPEN_SHADOW            = 4
#TUIPEN_HALFSHINE         = 5
#TUIPEN_HALFSHADOW        = 6
#TUIPEN_MARKER            = 7
#TUIPEN_HALFMARKER        = 8
#TUIPEN_TEXT              = 9
#TUIPEN_ACTIVETEXT        = 10
#TUIPEN_TOOLTIPBG         = 11
#TUIPEN_HALFHALFSHINE     = 12
#TUIPEN_RED               = 13
#TUIPEN_GREEN             = 14
#TUIPEN_BLUE              = 15
#TUIPEN_DARKRED           = 16
#TUIPEN_DARKGREEN         = 17
#TUIPEN_DARKBLUE          = 18
#TUIPEN_YELLOW            = 19
#TUIPEN_MAGENTA           = 20
#TUIPEN_CYAN              = 21
#TUIPEN_DARKYELLOW        = 22
#TUIPEN_DARKMAGENTA       = 23
#TUIPEN_DARKCYAN          = 24
#TUIPEN_HALFHALFSHADOW    = 25
#TUIPEN_USER              = 32 ; here start the user pens...
#TUIMAX_PENS              = 256

;/* TUI Fonts */
#TUIFONT_NORMAL           = 0
#TUIFONT_NORMALBOLD       = 1
#TUIFONT_NORMALITALIC     = 2
#TUIFONT_NORMALIB         = 3
#TUIFONT_SMALL            = 4
#TUIFONT_SMALLBOLD        = 5
#TUIFONT_SMALLITALIC      = 6
#TUIFONT_SMALLIB          = 7
#TUIFONT_FIX              = 8
#TUIFONT_FIXBOLD          = 9
#TUIFONT_FIXITALIC        = 10
#TUIFONT_FIXIB            = 11
#TUIFONT_SERIF            = 12
#TUIFONT_SERIFBOLD        = 13
#TUIFONT_SERIFITALIC      = 14
#TUIFONT_SERIFIB          = 15
#TUIMAX_FONTS             = 16

;/* TUI Border Types */
#TUIBORDER_NONE            =  0  ; no border
#TUIBORDER_FLAT            =  1  ; flat, 1 colored vorder
#TUIBORDER_RECESSED        =  2  ; recessed border
#TUIBORDER_RAISED          =  3  ; raised border
#TUIBORDER_GROUP           =  4  ; group style border
#TUIBORDER_BUTTON          =  5  ; button border
#TUIBORDER_STRING          =  6  ; string border
#TUIBORDER_TITLE           =  7  ; group style border with title
#TUIBORDER_TOOL            =  8  ; tool button border
#TUIBORDER_MENUBAR         =  9  ; menu bar border
#TUIBORDER_TOOLTIP         = 10  ; border for tooltip
#TUIBORDER_MENU            = 11  ; menu bar border
#TUIBORDER_WINDOW          = 12  ; window border
#TUIBORDER_TABCONTENT      = 13  ; page content border
#TUIBORDER_TAB             = 14  ; page tab item border
#TUIBORDER_TABVIEWEND      = 15
#TUIBORDER_TABVIEWBEGIN    = 16
#TUIBORDER_HSCROLLERCONTAINER = 17
#TUIBORDER_VSCROLLERCONTAINER = 18
#TUIMAX_BORDER             = 19

;/* tui Skin GFX */
#TUISKIN_FLATBORDER        = 1
#TUISKIN_RECESSEDBORDER    = 2
#TUISKIN_RAISEDBORDER      = 3
#TUISKIN_GROUPBORDER       = 4
#TUISKIN_TITLEBORDER       = 5
#TUISKIN_BUTTON            = 6
#TUISKIN_CHECKBOX          = 7
#TUISKIN_TOOL              = 8
#TUISKIN_TEXTBOX           = 9
#TUISKIN_STRING            = 10
#TUISKIN_MENUBAR           = 11
#TUISKIN_MENUITEM          = 12
#TUISKIN_TOOLTIP           = 13
#TUISKIN_TABCONTENT_L      = 14
#TUISKIN_TABCONTENT_T      = 15
#TUISKIN_TABCONTENT_R      = 16
#TUISKIN_TABCONTENT_B      = 17
#TUISKIN_TAB_L             = 18
#TUISKIN_TAB_T             = 19
#TUISKIN_TAB_R             = 20
#TUISKIN_TAB_B             = 21
#TUISKIN_TABVIEWEND_L      = 22
#TUISKIN_TABVIEWEND_T      = 23
#TUISKIN_TABVIEWEND_R      = 24
#TUISKIN_TABVIEWEND_B      = 25
#TUISKIN_TABVIEWBEGIN_L    = 26
#TUISKIN_TABVIEWBEGIN_T    = 27
#TUISKIN_TABVIEWBEGIN_R    = 28
#TUISKIN_TABVIEWBEGIN_B    = 29
#TUISKIN_HSLIDERCONTAINER  = 30
#TUISKIN_VSLIDERCONTAINER  = 31
#TUISKIN_HSLIDERKNOB       = 32
#TUISKIN_VSLIDERKNOB       = 33
#TUISKIN_HSCROLLERCONTAINER= 34
#TUISKIN_VSCROLLERCONTAINER= 35
#TUISKIN_HSCROLLERKNOB     = 36
#TUISKIN_VSCROLLERKNOB     = 37
#TUISKIN_SCROLLERARROWLEFT = 38
#TUISKIN_SCROLLERARROWRIGHT= 39
#TUISKIN_SCROLLERARROWUP   = 40
#TUISKIN_SCROLLERARROWDOWN = 41
#TUISKIN_PROGRESSCONTAINER = 42
#TUISKIN_PROGRESSBAR       = 43
#TUISKIN_RADIOON           = 44
#TUISKIN_RADIOOFF          = 45
#TUIMAX_SKIN               = 46

;/* TUI Window States */
#TUISTATE_UNDEFINED       = 0
#TUISTATE_CLOSED          = 1
#TUISTATE_OPEN            = 2
#TUISTATE_ICONIFIED       = 3

;/* Pre-Defined Notify Values */
Macro NOTIFYID_NOTHING   ; nothing happend
""
End Macro
Macro NOTIFYID_QUIT      ; application should quit
"QUIT"
End Macro
Macro NOTIFYID_CLOSE     ; close the window
"CLOSE"
End Macro
Macro NOTIFYID_POPUP     ; popup application
"POPUP"
End Macro
Macro NOTIFYID_ICONIFY   ; iconify application
"ICONIFY"
End Macro
Macro NOTIFYID_ICONDROP  ; icon dropped on app-icon
"ICONDROP"
End Macro
Macro NOTIFYID_WINDROP   ; icon dropped on window
"WINDROP"
End Macro
Macro NOTIFYID_MESSAGE   ; received (arexx) message
"MESSAGE"
End Macro
Macro NOTIFYID_REFRESH   ; refresh an external tui object (custom view)
"REFRESH"
End Macro
Macro NOTIFYID_GAINFOCUS ; when object gains focus
"GAINFOCUS"
End Macro
Macro NOTIFYID_LOSEFOCUS ; when object loses focus
"LOSEFOCUS"
End Macro
Macro NOTIFYID_ASLPATH   ; ASL Path requester
"ASLPATH"
End Macro
Macro NOTIFYID_ASLFILE   ; ASL File requester
"ASLFILE"
End Macro
Macro NOTIFYID_ASLFONT   ; ASL Font requester
"ASLFONT"
End Macro
Macro NOTIFYID_ASLSAVE   ; ASL Save requester
"ASLSAVE"
End Macro
Macro NOTIFYID_ASLSCREEN ; ASL Screen requester
"ASLSCREEN"
End Macro
Macro NOTIFYID_DELTAUP   ; Delta tick up
"DELTAUP"
End Macro
Macro NOTIFYID_DELTADOWN   ; Delta tick down
"DELTADOWN"
End Macro
Macro NOTIFYID_DELTALEFT   ; Delta tick left
"DELTALEFT"
End Macro
Macro NOTIFYID_DELTARIGHT   ; Delta tick right
"DELTARIGHT"
End Macro
Macro NOTIFYID_DELTAINC    ; Delta tick plus
"DELTAINC"
End Macro
Macro NOTIFYID_DELTADEC   ; Delta tick minus
"DELTADEC"
End Macro


;;/* Pre-Defined Window IDs */
Macro WINID_TOOLTIP
"TOOLTIP"
End Macro
Macro WINID_MENUBAR
"MENUBAR"
End Macro

;/* Internal App Events */
#APP_WINDOWDROP           = 1 ; icon drop into window
#APP_MENUHIT              = 2 ; WB menu hit
#APP_ICON                 = 3 ; doubleclick or icon drop
#APP_BUFFERSIZE           = 4096 ; temporary buffer for reading out strings

#MTYPE_PSTD               = 1 ; a "standard Potion" message */
#MTYPE_TOOLEXIT           = 2 ; exit message from our tools */
#MTYPE_DISKCHANGE         = 3 ; dos telling us of a disk change */
#MTYPE_TIMER              = 4 ; we got a Timer tick */
#MTYPE_CLOSEDOWN          = 5 ; <unimplemented> */
#MTYPE_IOPROC             = 6 ; <unimplemented> */
#MTYPE_APPWINDOW          = 7 ; msg from an App Window */
#MTYPE_APPICON            = 8 ; msg from an App icon */
#MTYPE_APPMENUITEM        = 9 ; msg from an App MenuItem */
#MTYPE_COPYEXIT           = 10 ; exit msg from copy process */
#MTYPE_ICONPUT            = 11 ; msg from PutDiskObject in icon.library */

;/* TUI Pointer Types */
#TUIPOINTER_BUSY          = -2 ; busy pointer
#TUIPOINTER_DEFAULT       = -1 ; default pointer
#TUIPOINTER_TEXT          =  0 ; text edit pointer
#TUIPOINTER_HDRAG         =  1 ; horizontal draggable pointer
#TUIPOINTER_VDRAG         =  2 ; vertical draggable pointer
#TUIPOINTER_TARGET        =  3
#TUIMAX_POINTERS          =  4 ; max pointers

#TUIREMAP_CBIT            = 3                   ; 3 bit per component
#TUIREMAP_BIT             = 3*#TUIREMAP_CBIT    ; per color
#TUIREMAP_ARRAYSIZE       = 1 LSL #TUIREMAP_BIT ; size of remap table

#TUIIMAGE_UNKNOWN         = 0  ; default image
#TUIIMAGE_CHECKMARK       = 1  ; checkbox
#TUIIMAGE_CHECKMARK2      = 2  ; checkbox
#TUIIMAGE_PATH            = 3  ; for ASLFR
#TUIIMAGE_FILE            = 4  ; for ASLFR
#TUIIMAGE_FONT            = 5  ; for ASLFO
#TUIIMAGE_SCREEN          = 6  ; for ASLSR
#TUIIMAGE_ARROWUP         = 7  ; scroller arrows
#TUIIMAGE_ARROWLEFT       = 8
#TUIIMAGE_ARROWRIGHT      = 9
#TUIIMAGE_ARROWDOWN       = 10
#TUIIMAGE_PLUSMINUS       = 11
#TUIIMAGE_INC             = 12
#TUIIMAGE_DEC             = 13
#TUIIMAGE_SAVE            = 14
#TUIIMAGE_POPUP           = 15
#TUIIMAGE_OLARROWUP       = 16  ; scroller arrows
#TUIIMAGE_OLARROWLEFT     = 17
#TUIIMAGE_OLARROWRIGHT    = 18
#TUIIMAGE_OLARROWDOWN     = 19
#TUIIMAGE_DROPDOWN        = 21
#TUIIMAGE_LEFT            = 22
#TUIIMAGE_RIGHT           = 23
#TUIIMAGE_AMIGA           = 24
#TUIIMAGE_SHIFT           = 25
#TUIIMAGE_CTRL            = 26
#TUIIMAGE_ALT             = 27
#TUIIMAGE_CYCLE           = 28  ; cycle gadget
#TUIIMAGE_RADIOON         = 29
#TUIIMAGE_RADIOOFF        = 30
#TUIIMAGE_CLOSE           = 31
#TUIIMAGE_DELETE          = 32
#TUIIMAGE_EDIT            = 33
#TUIIMAGE_NEW             = 34
#TUIIMAGE_CHECKON         = 35
#TUIIMAGE_CHECKOFF        = 36
#TUIIMAGE_NODEEXPAND      = 37
#TUIIMAGE_NODECOLLAPSE    = 38
#TUIIMAGE_BITMAP          = 39 ; ...
#TUIMAX_IMAGES            = 40

;/* TUI Image States (for WritePixelArray) */
#TUIIM_NORMAL             = 0
#TUIIM_ACTIVE             = 1
#TUIIM_DISABLED           = 2
#TUIIM_MOVER              = 3
#TUIIM_FOCUS              = 4

;/* TUI Images Blit Modes */
#TUIIBM_OPAQUE            = 0 ; just blit as is
#TUIIBM_MASK              = 1 ; blit with mask or alpha
#TUIIBM_PATTERN           = 2 ; repeat like pattern
#TUIIBM_9PATCH            = 3 ; stretch as nine-patch
#TUIIBM_SCALE             = 4 ; just scale

;/* TUI Attribute Types */
#TUIAT_INVALID = 0
#TUIAT_INT     = 1
#TUIAT_STRING  = 2
#TUIAT_FLOAT   = 3
#TUIAT_BOOL    = 4
#TUIAT_PTR     = 5
#TUIAT_BIND    = 6

;/* TUI Scoller Behaviour */
#TUISCROLLER_AUTO   = 0
#TUISCROLLER_ALWAYS = 1
#TUISCROLLER_NEVER  = 2

;/* RAWKEY Codes */
#RAWKEY_APOSTROPH = $00 ;   '   ~
#RAWKEY_1         = $01 ;   1   !
#RAWKEY_2         = $02 ;   2   @
#RAWKEY_3         = $03 ;   3   #
#RAWKEY_4         = $04 ;   4   $
#RAWKEY_5         = $05 ;   5   %
#RAWKEY_6         = $06 ;   6   ^
#RAWKEY_7         = $07 ;   7   &
#RAWKEY_8         = $08 ;   8   *
#RAWKEY_9         = $09 ;   9   (
#RAWKEY_0         = $0A ;   0   )
#RAWKEY_MINUS     = $0B ;   -   _
#RAWKEY_PLUS      = $0C ;   =   +
#RAWKEY_BACKSLASH = $0D ;   \   |
#RAWKEY_UNDEF1    = $0E ;   (undefined)   (undefined)
#RAWKEY_NUMPAD0   = $0F ;   0   0 (numeric pad)
#RAWKEY_Q         = $10 ;   q   Q
#RAWKEY_W         = $11 ;   w   W
#RAWKEY_E         = $12 ;   e   E
#RAWKEY_R         = $13 ;   r   R
#RAWKEY_T         = $14 ;   t   T
#RAWKEY_Y         = $15 ;   y   Y
#RAWKEY_U         = $16 ;   u   U
#RAWKEY_I         = $17 ;   i   I
#RAWKEY_O         = $18 ;   o   O
#RAWKEY_P         = $19 ;   p   P
#RAWKEY_SBO       = $1A ;   [   {
#RAWKEY_SBC       = $1B ;   ]   }
#RAWKEY_UNDEF2    = $1C ;   (undefined)   (undefined)
#RAWKEY_NUMPAD1   = $1D ;   1   1 (numeric pad)
#RAWKEY_NUMPAD2   = $1E ;   2   2 (numeric pad)
#RAWKEY_NUMPAD3   = $1F ;   3   3 (numeric pad)
#RAWKEY_A         = $20 ;   a   A
#RAWKEY_S         = $21 ;   s   S
#RAWKEY_D         = $22 ;   d   D
#RAWKEY_F         = $23 ;   f   F
#RAWKEY_G         = $24 ;   g   G
#RAWKEY_H         = $25 ;   h   H
#RAWKEY_J         = $26 ;   j   J
#RAWKEY_K         = $27 ;   k   K
#RAWKEY_L         = $28 ;   l   L
#RAWKEY_SEMI      = $29 ;   ;   :
#RAWKEY_QUOTE     = $2A ;   '   "
#RAWKEY_RESERVED1 = $2B ;   (reserved)  (reserved)
#RAWKEY_UNDEF3    = $2C ;   (undefined)   (undefined)
#RAWKEY_NUMPAD4   = $2D ;   4   4 (numeric pad)
#RAWKEY_NUMPAD5   = $2E ;   5   5 (numeric pad)
#RAWKEY_NUMPAD6   = $2F ;   6   6 (numeric pad)
#RAWKEY_RESERVED2 = $30 ;   (reserved)  (reserved)
#RAWKEY_Z         = $31 ;   z   Z
#RAWKEY_X         = $32 ;   x   X
#RAWKEY_C         = $33 ;   c   C
#RAWKEY_V         = $34 ;   v   V
#RAWKEY_B         = $35 ;   b   B
#RAWKEY_N         = $36 ;   n   N
#RAWKEY_M         = $37 ;   m   M
#RAWKEY_COMMA     = $38 ;   ,   <
#RAWKEY_DOT       = $39 ;   .   >
#RAWKEY_SLASH     = $3A ;   /   ?
#RAWKEY_UNDEF4    = $3B ;   (undefined)   (undefined)
#RAWKEY_NUMPADDOT = $3C ;   .   . (numeric pad)
#RAWKEY_NUMPAD7   = $3D ;   7   7 (numeric pad)
#RAWKEY_NUMPAD8   = $3E ;   8   8 (numeric pad)
#RAWKEY_NUMPAD9   = $3F ;   9   9 (numeric pad)
#RAWKEY_SPACE     = $40 ;   SPACE (20)  SPACE (20)
#RAWKEY_BACKSPACE = $41 ;   BACK SPACE (08)   BACK SPACE (08)
#RAWKEY_TAB       = $42 ;   TAB (09)  TAB (09)
#RAWKEY_ENTER     = $43 ;   ENTER (0D) (numeric pad)  ENTER (0D) (numeric pad)
#RAWKEY_RETURN    = $44 ;   Return (0D)   Return (0D)
#RAWKEY_ESC       = $45 ;   ESC (1B)  ESC (1B)
#RAWKEY_DEL       = $46 ;   DEL (7F)  DEL (7F)
#RAWKEY_UNDEF5    = $47 ;   (undefined)   (undefined)
#RAWKEY_PAGEUP    = $48 ;   (undefined)   (undefined)
#RAWKEY_PAGEDOWN  = $49 ;   (undefined)   (undefined)
#RAWKEY_NUMPADMINUS=$4A ;   -   - (numeric pad)
#RAWKEY_F11       = $4B ;   (undefined)   (undefined)
#RAWKEY_ARROWUP   = $4C ;   UP ARROW A  UP ARROW T
#RAWKEY_ARROWDOWN = $4D ;   DOWN ARROW B  DOWN ARROW S
#RAWKEY_ARROWRIGHT= $4E ;   RIGHT ARROW C   RIGHT ARROW A
#RAWKEY_ARROWLEFT = $4F ;   LEFT ARROW D  LEFT ARROW @
#RAWKEY_UP        = $4C ;   UP ARROW A  UP ARROW T
#RAWKEY_DOWN      = $4D ;   DOWN ARROW B  DOWN ARROW S
#RAWKEY_RIGHT     = $4E ;   RIGHT ARROW C   RIGHT ARROW A
#RAWKEY_LEFT      = $4F ;   LEFT ARROW D  LEFT ARROW @
#RAWKEY_F1        = $50 ;   F1 0~   F1 10~
#RAWKEY_F2        = $51 ;   F2 1~   F2 11~
#RAWKEY_F3        = $52 ;   F3 2~   F3 12~
#RAWKEY_F4        = $53 ;   F4 3~   F4 13~
#RAWKEY_F5        = $54 ;   F5 4~   F5 14~
#RAWKEY_F6        = $55 ;   F6 5~   F6 15~
#RAWKEY_F7        = $56 ;   F7 6~   F7 16~
#RAWKEY_F8        = $57 ;   F8 7~   F8 17~
#RAWKEY_F9        = $58 ;   F9 8~   F9 18~
#RAWKEY_F10       = $59 ;   F10 9~  F10 19~
#RAWKEY_UNDEF9    = $5A ;   (undefined)   (undefined)
#RAWKEY_UNDEF10   = $5B ;   (undefined)   (undefined)
#RAWKEY_UNDEF11   = $5C ;   (undefined)   (undefined)
#RAWKEY_UNDEF12   = $5D ;   (undefined)   (undefined)
#RAWKEY_UNDEF13   = $5E ;   (undefined)   (undefined)
#RAWKEY_HELP      = $5F ;   HELP ?~   HELP ?~
#RAWKEY_LSHIFT    = $60 ;   LEFT SHIFT  LEFT SHIFT
#RAWKEY_RSHIFT    = $61 ;   RIGHT SHIFT   RIGHT SHIFT
#RAWKEY_CAPSLOCK  = $62 ;   CAPS LOCK   CAPS LOCK
#RAWKEY_CTRL      = $63 ;   CTRL  CTRL
#RAWKEY_LALT      = $64 ;   LEFT ALT  LEFT ALT
#RAWKEY_RALT      = $65 ;   RIGHT ALT   RIGHT ALT
#RAWKEY_LAMIGA    = $66 ;   LEFT AMIGA  CLOSE AMIGA
#RAWKEY_RAMIGA    = $67 ;   RIGHT AMIGA   OPEN AMIGA
#RAWKEY_LMB       = $68 ;   LEFT Mouse BUTTON   LEFT Mouse BUTTON
#RAWKEY_RMB       = $69 ;   RIGHT Mouse BUTTON  RIGHT Mouse BUTTON
#RAWKEY_MMB       = $6A ;   MIDDLE Mouse BUTTON   MIDDLE Mouse BUTTON
#RAWKEY_UNDEF14   = $6B ;   (undefined)               (undefined)
#RAWKEY_UNDEF15   = $6C ;   (undefined)               (undefined)
#RAWKEY_UNDEF16   = $6D ;   (undefined)               (undefined)
#RAWKEY_UNDEF17   = $6E ;   (undefined)               (undefined)
#RAWKEY_UNDEF18   = $6F ;   (undefined)               (undefined)
#RAWKEY_HOME      = $70
#RAWKEY_END       = $71
#RAWKEY_WHEELUP   = $7A
#RAWKEY_WHEELDOWN = $7B
CNIF @#NM_WHEEL_UP=0
#NM_WHEEL_UP      = $7A
#NM_WHEEL_DOWN    = $7B
CEND
;#RAWKEY_UNDEF     = $70 - 7F ; (undefined)   (undefined)
;#RAWKEY_TRANS     = $80-F8 ; UP TRANSITION   UP TRANSITION
;#RAWKEY_          = $(80 For 00, 81 For 01 ... F8 For 7F)
#RAWKEY_BADKEY    = $F9 ;   LAST KEYKODE BAD
#RAWKEY_OVERFLOW  = $FA ;   KEYBOARD Buffer OVERFLOW
#RAWKEY_UNDEF19   = $FB ;   (undefined)   (undefined)
#RAWKEY_FAILED    = $FC ;   KEYBOARD SELFTEST FAILED
#RAWKEY_STARTKS   = $FD ;   POWER-UP KEY STREAM Start
#RAWKEY_ENDKS     = $FE ;   POWER-UP KEY STREAM End
#RAWKEY_MOUSE     = $FF ;   Mouse Event (Mouse moved only, no button changed)



NEWTYPE.tuiPointerSprite ; Definition of Amiga Sprite
width.l
height.l
handleX.l         ; the handle point
handleY.l
colors.l          ; ?
dat.l[24]         ; bit field of 2 bitplanes
End NEWTYPE

NEWTYPE.tuiPixel  ; pixel position
x.l
y.l
End NEWTYPE

NEWTYPE.tuiRect   ; pixel rectangle or border
left.l
top.l
right.l
bottom.l
End NEWTYPE

Macro tuiInitNotifyHandler
  `1\notifyID = Null : `1\callback = tuiGlobal\defaultNotifyCallback
End Macro

Macro tuiFreeNotifyHandler
  str_Free{&`1\notifyID} : `1\callback = Null
End Macro

Macro tuiHandleNotify ; done, *obj, tuiNotifyHandler, *tuiEvent
  If (`2\`3\callback)
    !_CallFuncPointer{`2\`3\callback,`1,`2,`4,`2\`3\notifyID}
  End If
End Macro

Macro tuiRectWidth
(`1\right-`1\left+1)
End Macro

Macro tuiRectHeight
(`1\bottom-`1\top+1)
End Macro

Macro tuiBorderWidth
(`1\right+`1\left)
End Macro

Macro tuiBorderHeight
(`1\top+`1\bottom)
End Macro

Macro tuiRemBorder ; cbox, bbox, border
`1\left   = `2\left   + `3\left
`1\top    = `2\top    + `3\top
`1\right  = `2\right  - `3\right
`1\bottom = `2\bottom - `3\bottom
End Macro

Macro tuiAddBorder ; cbox, bbox, border
`1\left   = `2\left   - `3\left
`1\top    = `2\top    - `3\top
`1\right  = `2\right  + `3\right
`1\bottom = `2\bottom + `3\bottom
End Macro

Macro tuiCopyRect ; tbox, sbox
`1\left = `2\left,`2\top,`2\right,`2\bottom
End Macro

Macro tuiRectHit ; Box, x,y
(`1\left<=`2 AND `1\top<=`3 AND `1\right>=`2 AND `1\bottom>=`3)
End Macro

Macro tuiRectOverlap ; ibox obox
(`1\right>=`2\left AND `1\bottom>=`2\top AND `1\left<=`2\right AND `1\top<=`2\bottom)
End Macro

Macro tuiRectInside ; ibox obox
(`1\left>=`2\left AND `1\top>=`2\top AND `1\right<=`2\right AND `1\bottom<=`2\bottom)
End Macro

Macro tuiAndRect ; dbox = box1 AND box2
If (`2\left   > `3\left  ) Then `1\left  = `2\left   : Else `1\left   = `3\left
If (`2\top    > `3\top   ) Then `1\top   = `2\top    : Else `1\top    = `3\top
If (`2\right  < `3\right ) Then `1\right = `2\right  : Else `1\right  = `3\right
If (`2\bottom < `3\bottom) Then `1\bottom= `2\bottom : Else `1\bottom = `3\bottom
End Macro

Macro tuiRect2RPClip ; rpbox = bbox AND clip + rppos
If (`2\left  + `4\x > `3\left  ) Then `1\left  = `2\left   + `4\x: Else `1\left   = `3\left
If (`2\top   + `4\y > `3\top   ) Then `1\top   = `2\top    + `4\y: Else `1\top    = `3\top
If (`2\right + `4\x < `3\right ) Then `1\right = `2\right  + `4\x: Else `1\right  = `3\right
If (`2\bottom+ `4\y < `3\bottom) Then `1\bottom= `2\bottom + `4\y: Else `1\bottom = `3\bottom
End Macro

Macro tuiRect2RP ; rpbox, bbox + rppos
`1\left   = `2\left   + `3\x
`1\top    = `2\top    + `3\y
`1\right  = `2\right  + `3\x
`1\bottom = `2\bottom + `3\y
End Macro

Macro tuiAddRectOffset ; abox, bbox , x,y
`1\left   = `2\left   + `3
`1\top    = `2\top    + `4
`1\right  = `2\right  + `3
`1\bottom = `2\bottom + `4
End Macro

Macro tuiRemRectOffset ; abox, bbox , x,y
`1\left   = `2\left   - `3
`1\top    = `2\top    - `4
`1\right  = `2\right  - `3
`1\bottom = `2\bottom - `4
End Macro

Macro tuiValidRect ; box
((`1\right>=`1\left) AND (`1\bottom>=`1\top))
End Macro

Macro tuiRectFill ; *rp, pos, box
RectFill_ `1,`2\x + `3\left, `2\y + `3\top, `2\x + `3\right, `2\y + `3\bottom
End Macro

Macro tuiLine ; *rp, pos, x1,y1,x2,y2
Move_ *rp, `1\x + `2, `1\y + `3
Draw_ *rp, `1\x + `4, `1\y + `5
End Macro


NEWTYPE.tuiHotKey

  *target.tuiObject
  keyCode_.l
  qualifier_
  isRaw.l

End NEWTYPE


NEWTYPE.tuiXmlAttr

  *nameP.b
  *stringP.b    ;/* pointer to character array */
  value.l       ;/* integer value */

End NEWTYPE


NEWTYPE.tuiFunc

  dummy.l

End NEWTYPE


NEWTYPE.tuiNotifyHandler

  *notifyID.str
  *callback.tuiFunc

End NEWTYPE


NEWTYPE.tuiObject

  ;/* ============== General Header ================ */
  classID.l                ; #TUICLASS_...
  *nameID.str              ; string identifier for reference by ID
  *userData.b              ; some data that is left to the user
  flags.l                  ; #TUIF_...
  value.l                  ; multipurpose value, e.g. slider level
  *string.str              ; multipurpose string, e.g. button text
  *help.str                ; help text for mouse-over tooltip help

  ;/* ================== Linkage  ================== */
  *engine.tuiEngine        ; every tui object MUST have a tuiEngine
  *parent.tuiObject        ; parent Object (usually a group or page)
  *next_.tuiObject         ; next object
  *prev.tuiObject          ; previous object
  *child.tuiObject         ; child object, if any
  *bind.tuiObject          ; forward binding in a ring

  ;/* =============== Layout Data ================== */
  pointerID.l              ; special mousepointer
  bbox.tuiRect             ; outer bounding box
  ibox.tuiRect             ; inner bounding box (after border)
  cbox.tuiRect             ; content bounding box
  minsize.tuiPixel         ; minimum content size
  maxsize.tuiPixel         ; maximum content size
  margin.tuiRect           ; margin wanted
  border.tuiRect           ; border set (cache)
  padding.tuiRect          ; padding wanted
  borderType.l             ; one of #TUIBORDER_...
  *bgImage.tuiTBImage      ; background image
  *fgImage.tuiTBImage      ; foreground image
  bgTuiPen.l               ; background tuiPen
  fgTuiPen.l               ; foreground tuiPen
  bgRGB.l                  ; background RGB
  fgRGB.l                  ; forgeground RGB
  weight.l                 ; layout weight when stretching
  gradient.l               ; gradient orientation

  ;/* =========== OOP Method Pointers ============== */
  *DispatchEvent.tuiFunc   ; evaluate an event and consume or pass alng
  *CalculateMinSize.tuiFunc; calculate the minimum size given the layout data
  *Layout.tuiFunc          ; calculate the layout given the real space
  *Draw.tuiFunc            ; draw the tuiobject
  *Deinit.tuiFunc          ; cleanup all allocations
  *SetAttr.tuiFunc         ; set an attrbiute (general and specific)
  *GetAttr.tuiFunc         ; get an attrbiute (general and specific)

  ;/* ============= OnEvent Handlers */
  onFocus.tuiNotifyHandler
  onLoseFocus.tuiNotifyHandler
  onMover.tuiNotifyHandler
  onLoseMover.tuiNotifyHandler
  onFree.tuiNotifyHandler

End NEWTYPE


NEWTYPE.tuiWindow

  obj.tuiObject            ; tui object header
  ;rp.RastPort             ; copy of the window rastport (fix for AFA)
  instanceID.l             ; Instance of the window
  pointerID.l              ; current mouse pointer
  state.l                  ; #TUISTATE_... - remember state of window when iconified
  *focus.tuiObject         ; this object has the focus of attention when it comes to key presses etc.
  screenPos.tuiPixel       ; (last) Position on Screen

  onWinDrop.tuiNotifyHandler  ; when icon drop on window
  onClose.tuiNotifyHandler    ; when close gadget
  onActive.tuiNotifyHandler   ; when window becomes active
  onInactive.tuiNotifyHandler ; when window becomes inactive
  onTick.tuiNotifyHandler     ; when window gets IntuiTick
  onHotKey.tuiNotifyHandler   ; when window gets hotkey

  lock.SignalSemaphore     ; lock for the window/rastport

  ; os specific
  *oswin.Window            ; pointer to AmigaOS window
  oswinFlags.l             ; window flags (AmigaOS specific)
  osrefreshing.l           ; currently in os refresh mode
  *appWin.l                ; AppWindow handle

  ; hotkeys
  *hotKeyA.tuiHotKey       ; Array of hotkeys
  hotKeyX.l                ; current used hotkeys
  hotKeyN.l                ; current allocated hotkeys in array

  backdrop.l               ; window properties
  closeable.l
  sizeable.l
  dragable.l
  borderless.l

End NEWTYPE


NEWTYPE.tuiARGB          ; a 32bit pixel

  A.b                      ; 0...255 alpha
  R.b                      ; 0...255 red
  G.b                      ; 0...255 green
  B.b                      ; 0...255 blue

End NEWTYPE


NEWTYPE.tuiPixelArray    ; a raw-data pixel array

  width.l                  ; pixel width
  height.l                 ; pixel height
  hfix.l
  hscale.l
  vfix.l
  vscale.l
  border.tuiRect           ; border size (inner is content area)
  trans.tuiRect            ; tranparent border (inner is blocky area)
  *normal.tuiARGB          ; pointer to normal variant
  *active.tuiARGB          ; pointer to active variant
  *disabled.tuiARGB        ; pointer to disabled variant
  *focus.tuiARGB           ; pointer to focus variant
  *mover.tuiARGB           ; pointer to mover variant

End NEWTYPE

NEWTYPE.tuiBitMap        ; bitmap, that contains various sizes of tuiPixelArrays

  *name.str                ; name for identification
  *pixelArrayA.tuiPixelArray ; array of tuiPixelArrays at various pixel sizes
  pixelArraysUsed.l        ; number of tuiPixelArrays actually used
  pixelArraysAlloc.l       ; number of tuiPixelArrays allocated
  bmode.l                  ; bitmap blit mode #TUIIBM_...
  useCount.l               ; number of referenced hold to this bitmap (may be flushed if 0)

End NEWTYPE


NEWTYPE.tuiTBImage       ; header that is hold by an tuiObject that points to a built-in image or bitmap

  tuiImage.l               ; #TUIIMAGE_... type image
  tuiWidth.l               ; #TUISIZE_... logical size
  tuiHeight.l
  *tuiBitMap.tuiBitMap       ; pointer to bitmap
  *engine.tuiEngine        ; tui engine
  *emblem.tuiTBImage       ; optional emblem image of 1/4th the size

End NEWTYPE


NEWTYPE.tuiBitMapCache   ; cache that holds the pool of tuiBitMaps

  lock.SignalSemaphore     ; semaphore for multithreaded access
  *tuiBitMapA.tuiBitMap    ; pointer to array of tuiBitmaps
  tuiBitMapsUsed.l         ; number of used bitmaps in the array
  tuiBitMapsAlloc.l        ; number of allocated bitmaps in the array

End NEWTYPE


NEWTYPE.tuiPenInfo       ; ???

  useCount.l
  rgb_.l

End NEWTYPE


NEWTYPE.tuiEvent          ; event that is created in a tuiObject and passed around

  ;/* =============== Queueing Information ===============*/
  *next_.tuiEvent           ; pointer to the next tuiEvent in the queue
  *target_.tuiObject         ; event target object

  ;/* ============== High Level Information ==============*/
  value.l                   ; if event contains an integer value
  *string.str               ; if event contains a string
  pos.tuiPixel              ; position of the event relative to the object
  size.tuiPixel             ; if the event has a 2dim size

  ;/* ============== Low Level Information ===============*/
  id.w                      ; event id
  flags.w                   ; event info
  qualifier_.l              ; qualifier bit mask
  seconds.l                 ; timestamp seconds
  micros.l                  ; timestamp micoseconds

End NEWTYPE


NEWTYPE.tuiNotify

  *next_.tuiNotify
  *obj.tuiObject
  *id.str
  ev.tuiEvent
  flags.w

End NEWTYPE


NEWTYPE.tuiEventQ         ; event queue header

  *head.tuiEvent            ; first event
  *tail.tuiEvent            ; last event
  sigBit.l                  ; sigBit
  sigFlag.l                 ; 1 << sigBit
  *sigTask.Task             ; pointer to task
  lock.SignalSemaphore

End NEWTYPE

NEWTYPE.tuiNotifyQ        ; event queue header

  *head.tuiNotify           ; first event
  *tail.tuiNotify           ; last event
  sigBit.l                  ; sigBit
  sigFlag.l                 ; 1 << sigBit
  *sigTask.Task             ; pointer to task
  lock.SignalSemaphore

End NEWTYPE


NEWTYPE.tuiEngine

  obj.tuiObject            ; tuiObject header

  ;/* ================= Multithreading ===================*/
  lock.SignalSemaphore     ; semaphore for multithreading
  ;*inputTask.Task          ; pointer to input task

  ;/* ================== Preferences =====================*/
  bufferedDraw.l           ; redraw buffered
  *bufferRP.RastPort
  bufferWidth.l
  bufferHeight.l
  redrawMethod.l           ; simple, smart, doublebuffered etc.
  useAISS.l                ; prefer AISS images over build-in ones
  *aissPath.str
  defMargin.tuiRect        ; default layout parameters
  defPadding.tuiRect
  borderStyle.l            ; 0 = thin, 1 = thick
  fillStyle.l              ; 0 = solid, 1 = gradient
  useSkin.l                ; use skin images
  windowSmartRefresh.l     ; simple/smart
  *skinPath.str            ; disk path to skin graphics
  *skinImage.tuiTBImage[#TUIMAX_SKIN] ; image replacements for borders
  skinImageAvail.l[#TUIMAX_SKIN]
  *skinImageName.str[#TUIMAX_SKIN]
  *imagePath.str            ; default path to images

  ;/* =============== Pen / Color mapping ================*/
  pensUsed.l               ; number of pens used in the array
  pen.l[#TUIMAX_PENS]      ; array of pens
  penInfo.tuiPenInfo[#TUIMAX_PENS]
  remapA.b[#TUIREMAP_ARRAYSIZE] ; RGB => pen mapping
  cModel.l                 ; color model, see #TUICM_...

  ;/* ================= Sizes and Fonts ==================*/
  defSize.w[#TUIMAX_SIZES]      ; array of logic default sizes
  *font.TextFont[#TUIMAX_FONTS] ; array of the standard fonts
  *fontName.str[#TUIMAX_FONTS]  ; name of the font
  fontSize.l[#TUIMAX_FONTS]     ; size of the font
  defStep.tuiPixel              ; default stepping width/height
  defTickDelay.l                ; default delay until ticking events are sent (scroller arrows)

  ;/* =============== Screen Information =================*/
  *screen_.Screen              ; screen we are living on...
  *rememberScreen.Screen   ; the last screen we were open on
  pubScreenLocked.l        ; boolean to indicate that we hold a lock on a pubscreen
  *pubScreenName.str       ; pubscreen name
  *winPort.MsgPort         ; one window message port for all windows
  buildRP.RastPort         ; helper RastPort used during layout
  ownScreen.l              ; true if we are the owner of the screen

  ;/* ============== WB App Functionality ================*/
  *appPort.MsgPort         ; for app functionality
  *appName.str             ; app name
  *appMenuName.str         ; name in the workbench app menu
  *appIconFile.str         ; name of the app icon
  *appIconText.str         ; text below the app icon
  *appIconDO.DiskObject    ; disk object of the app icon
  *appMenu.l               ; AppMenuItem
  *appIcon.l               ; AppIcon

  ;/* =================== NotifyIDs =====================*/
  onPopup.tuiNotifyHandler    ; when wb menu or icon double click
  onQuit.tuiNotifyHandler     ; when app is requested to quit
  onIconDrop.tuiNotifyHandler ; when drop icon on appicon
  onIconify.tuiNotifyHandler  ; when iconify
  onMessage.tuiNotifyHandler  ; when arexx message

  ;/* =================== AREXX Port =====================*/
  *rxPort.MsgPort          ; rexx message port
  *rxPortName.str          ; port name
  *rxMsg.RexxMsg           ; current processed rexx message
  *rxString.str            ; string in message

  ;/* ================= Operating State ==================*/
  ;*active.tuiObject        ; currently operated tuiObject (depricated)
  *focus.tuiObject         ; pointer to tuiObject that has the focus
  *mover.tuiObject         ; pointer to tuiObject the mouse is over
  *toolTip.tuiWindow       ; tooltip help window
  lastMouse.tuiPixel       ; position of the last mouse event (used to determine true double click)
  lastSeconds.l            ; last click seconds
  lastMicros.l             ; last click micos
  clickCount.l             ; mouse click count in a sequence of double clicks
  restingTime.l            ; time the mouse has rested (for bubble help)

  ;/* ================== Screen Notify ===================*/
  *snPort.MsgPort          ; screen notify Messages
  *snScreenH.b             ; handle to screen
  *snWorkbenchH.b          ; handle to workbench

  ;/* ================== Event Handling ==================*/
  *eventPool.b             ; pointer to memory pool for events
  *notifyPool.b            ; pointer to memory pool for events
  *objectPool.b            ; pointer to memory pool for tuiObjects
  notifyQ.tuiNotifyQ       ; queue of output events (notify)
  eventQ.tuiEventQ         ; queue of input events
  *notify.tuiNotify        ; pointer to current notify outside the event loop

  ;/* ================== Undo Engine ==================*/
  *undoEngine.tuiUndoEngine

End NEWTYPE

NEWTYPE.tuiTempBuffer    ; library global temp buffer

  *tmpP.b                  ; pointer to data
  tmpByteSize.l            ; size of allocated memory
  lock.SignalSemaphore     ; lock for multithreading

End NEWTYPE

NEWTYPE.tuiBuildHelper   ; helper to keep track during tuiObject building

  *engine.tuiEngine        ; engine we are building for
  *rootWin.tuiWindow       ; root window if we build sub windows (menu)
  *parent.tuiObject        ; the parent object
  *current.tuiObject       ; the current object
  *prev.tuiObject          ; the prevous object
  windowDepth.l            ; depth of sub windows
  lock.SignalSemaphore     ; multitasking protection

End NEWTYPE

NEWTYPE.tuiXmlAttrDef

  attr.l
  typ.l
  minValue.l
  maxValue.l

End NEWTYPE

;XINCLUDE "prefixtree.include.ab3"
NEWTYPE.tuiXmlClass

  *attrMap.prefixtree
  *valueMap.prefixtree
  *beginTag.tuiFunc
  *endTag.tuiFunc

End NEWTYPE


NEWTYPE.tuiGlobal            ; the library global data

  cookie.l                   ; cookie to identify
  bitMapCache.tuiBitMapCache ; pointer to the global bitmap cache
  tempBuffer.tuiTempBuffer   ; pointer to the global temp buffer
  buildHelper.tuiBuildHelper ; pointer to the global build helper
  CRC32_LUT.l[256]           ; CRC32 lookup table (for string has calculation)
  *pointerSprite.tuiPointerSprite[#TUIMAX_POINTERS] ; mouse pointer sprites
  *showToolTip.tuiFunc
  *defaultNotifyCallback.tuiFunc

  ; /* XML Builder */
  *xmlClassMap.prefixtree
  xmlClassA.tuiXmlClass[#TUIMAX_XMLCLASSES]
  xmlClassN.l

End NEWTYPE


SHARED tuiGlobal.tuiGlobal ; the one and only global variale in the whole ntui system



