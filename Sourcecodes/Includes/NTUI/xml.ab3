; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 0
; Version         = 0.0.0
; NumberOfBuilds  = 5
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 347
; CursorColumn    = 3
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: xml.include                                                           /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 08/01/2008                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
XINCLUDE "NTUI/definitions.ab3"

NEWTYPE.tuiFile

  *name.str
  fh.l
  memp.l
  memsize.l
  mempos.l
  memstolen.l
  pos.l
  bsize.l
  accessmode.l

End NEWTYPE


Statement _ntui_CloseFile{*tf.tuiFile}

  If *tf
    If *tf\fh Then Close_ *tf\fh : *tf\fh = Null
    If *tf\memp
      If *tf\memstolen=False Then FreeVec_ *tf\memp
      *tf\memp = Null
    End If
    str_Free{&*tf\name}
    FreeVec_ *tf
    *tf = Null
  End If

End Statement


Function.tuiFile _ntui_ReadFile{filename.s}

  *tf.tuiFile = AllocVec_(SizeOf.tuiFile,#MEMF_CLEAR)
  If *tf=Null Then Function Return Null

  *tf\fh = Open_ (&filename.s,#MODE_OLDFILE)
  If *tf\fh=Null Then Function Return Null

  *fib.FileInfoBlock = AllocDosObject_ (#DOS_FIB,#TAG_DONE)
  If *fib=Null Then _ntui_CloseFile{*tf}:Function Return Null

  ExamineFH_ *tf\fh,*fib
  *tf\bsize = *fib\fib_Size
  FreeDosObject_ #DOS_FIB,*fib

  *tf\pos         = 0
  *tf\mempos      = 0
  *tf\memstolen   = False
  str_Write{&*tf\name,filename}
  *tf\memsize     = *tf\bsize
  *tf\memp        = AllocVec_(*tf\memsize+1,#MEMF_ANY)
  If *tf\memp = Null Then _ntui_CloseFile{*tf} : Function Return Null

  Read_ *tf\fh,*tf\memp,*tf\memsize
  Poke.b *tf\memp+*tf\memsize,0

  Function Return *tf

End Function


Function.tuiFile _ntui_ReadMemFile{memptr.l}

  *tf.tuiFile = AllocVec_(SizeOf.tuiFile,#MEMF_CLEAR)
  If *tf=Null Then Function Return Null

  *tf\fh = Null

  n.l = 0
  While Peek.b(memptr+n)><0 : n+1 : Wend
  *tf\bsize     = n
  *tf\memsize   = n
  *tf\pos       = 0
  *tf\mempos    = 0
  *tf\memp      = memptr
  *tf\memstolen = True
  str_Write{&*tf\name,""}

  Function Return *tf

End Function

Function.b FAST _ntui_ReadByte{*tf.tuiFile}

  If *tf\pos<*tf\bsize Then *tf\pos+1:Function Return Peek.b(*tf\memp+*tf\pos-1)
  Function Return 0

End Function


Function.l FAST _ntui_EOF{*tf.tuiFile}

  Function Return *tf\pos>=*tf\bsize

End Function


Statement FAST _ntui_SeekEnd{*tf.tuiFile}

  *tf\pos=*tf\bsize

End Statement


Function.l FAST _ntui_SeekRel{*tf.tuiFile,dpos.l}
*tf\pos+dpos
If *tf\pos<0 Then *tf\pos=0:Function Return False
If *tf\pos>*tf\bsize Then *tf\pos=*tf\bsize : Function Return False
Function Return True
End Function


Function.s _ntui_NextXMLTag{*tf.tuiFile}
ntuixmlreadtagtryagain:
tagname.s = ""

Repeat
  c.b = _ntui_ReadByte{*tf}
Until c=@"<" OR _ntui_EOF{*tf}=True

breakme.l = False
Repeat
  c.b = _ntui_ReadByte{*tf}
  Select c.b
   Case @" "
     If tagname.s><"" Then breakme = True
   Case 10
     If tagname.s><"" Then breakme = True
   Case @"="
     If tagname.s><"" Then breakme = True
   Case @">"
     breakme = True : _ntui_SeekRel{*tf,-1}
   Case @"/"
     If tagname.s><"" Then breakme = True : Else tagname.s = "/"
   Default
     If c.b>32 OR c.b<-1 Then tagname.s + Chr$(c)
  End Select
Until breakme=True OR _ntui_EOF{*tf} = True

If tagname.s = "!--" Then Goto ntuixmlreadtagtryagain
If tagname.s = "" AND _ntui_EOF{*tf} = False Then Goto ntuixmlreadtagtryagain
Function Return tagname.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = xml_ReadParamName {*tf.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ Read till the next parameter name of the previous found tag.                /
;/ Note: This function returns an empry string, if the tag contains no more :: /
;/ parameters.                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tf.l    : file id                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s : parameter name                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s _ntui_NextXMLAttr{*tf.tuiFile}
breakme.l = False
paramname.s = ""
space.l = False
Repeat
c.b = _ntui_ReadByte{*tf}
Select c.b
 Case @" " : If paramname.s><"" Then space = True
 Case 10   : If paramname.s><"" Then breakme = True
 Case @"=" : If paramname.s><"" Then breakme = True
 Case @">" : breakme = True  : _ntui_SeekRel{*tf,-1}
 Case @"/" : breakme = True
 Default
   If space=False
     If c.b>32 OR c.b<-1 Then paramname.s + Chr$(c)
   Else
     _ntui_SeekRel{*tf,-1}
     breakme = True
   End If
End Select
Until breakme=True OR _ntui_EOF{*tf} = True
Function Return paramname.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = xml_ReadParamString {*tf.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ Get the parameter value as a string from the previous found parameter.      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tf.l    : file id                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s : string value                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s _ntui_GetXMLAttrString{*tf.tuiFile}
quoted.l = 0
quoted2.l = 0
breakme.l = False
string.s = ""
Repeat
c.b = _ntui_ReadByte{*tf}
Select c.b
 Case $22
   If quoted2=0
     quoted=1-quoted
     If quoted=0 Then breakme=True
   Else
     string.s + Chr$(c)
   End If
 Case @"'"
   If quoted=0
     quoted2=1-quoted2
     If quoted2=0 Then breakme=True
   Else
     string.s + Chr$(c)
   End If
 Case @" "
   If quoted=False AND quoted2=False
     If string.s><"" Then breakme = True
   Else
     string.s + " "
   End If
 Case 10   : If quoted=False AND quoted2=False Then breakme = True : Else string.s + " "
 Case @"/" : If quoted=False AND quoted2=False Then breakme = True : Else string.s + "/"
 Case @">" : If quoted=False AND quoted2=False Then breakme = True : _ntui_SeekRel{*tf,-1} : Else string.s + ">"
 Default
   If c><0 Then string.s + Chr$(c)
End Select
Until breakme=True OR _ntui_EOF{*tf} = True
Function Return string.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = xml_ReadParamValue {*tf.l,@minVal.l,@maxVal.l}          /
;/                                                                             /
;/ Description:                                                                /
;/ Get the parameter value as 32bit integer from the previous found parameter. /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tf.l    : file id                                                        /
;/ - minVal.l    : ???                                                         /
;/ - maxVal.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l : parameter value                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _ntui_String2Integer{string.s,@minVal.l,@maxVal.l}
If Peek.b(&string) = @"@" Then long.l = Cvl(Right$(string,4)) : Else long = Vallong(string)
If LCase$(string) = "on"    Then long = True
If LCase$(string) = "yes"   Then long = True
If LCase$(string) = "true"  Then long = True
If LCase$(string) = "off"   Then long = False
If LCase$(string) = "no"    Then long = False
If LCase$(string) = "false" Then long = False
If minVal><-1 Then If long<minVal Then long=minVal
If maxVal><-1 Then If long>maxVal Then long=maxVal
Function Return long
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.f = xml_ReadParamFloat {*tf.l,@minVal.f,@maxVal.f}          /
;/                                                                             /
;/ Description:                                                                /
;/ Get the parameter value as 32bit float from the previous found parameter.   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tf.l    : file id                                                        /
;/ - minVal.f    : ???                                                         /
;/ - maxVal.f    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.f : parameter float                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.f _ntui_String2Float{string.s,@minVal.f,@maxVal.f}

  float.f = Val(string)
  If minVal><-1 Then If float<minVal Then float=minVal
  If maxVal><-1 Then If float>maxVal Then float=maxVal
  Function Return float
  
End Function


Function.l _ntui_ReadXMLAttrs{className.s,classID.l,*obj.tuiObject,*tf.tuiFile}
  DEFTYPE.tuiXmlAttrDef attr
  succ.l = True

  Repeat
    attrName.s   = _ntui_NextXMLAttr{*tf}
    If attrName><""
      string.s = _ntui_GetXMLAttrString{*tf}
      If ntui_FindAttr{classID,attrName,attr}
        Select attr\typ
          Case #TUIAT_STRING : ntui_SetAttr{*obj,attr\attr,&string}
          Case #TUIAT_INT    : value.l = ntui_FindValue{classID,string} : ntui_SetAttr{*obj,attr\attr,value}
          Case #TUIAT_BOOL   : value.l = ntui_FindValue{classID,string} : If value Then ntui_SetAttr{*obj,attr\attr,True} : Else ntui_SetAttr{*obj,attr\attr,False}
          Case #TUIAT_FLOAT
          Case #TUIAT_INVALID
          Case #TUIAT_PTR    :
            error{"NTUI XML Builder: Cannot set pointer attribute in XML: \\22"+className+"/"+attrName+"="+string+"\\22!"}
            _ntui_SeekEnd{*tf}
          Case #TUIAT_BIND
            *slave.tuiObject = ntui_GetObjectByID{*obj\engine,string}
            If *slave
              If *obj Then ntui_Bind{*obj,*slave}
            End If

        End Select
      Else
        error{"NTUI XML Builder: Unknown attribute \\22"+className+"/"+attrName+"\\22!"}
        _ntui_SeekEnd{*tf}
      End If
    End If
  Until attrName=""

  Function Return succ

End Function


Function.tuiObject _ntui_BuildFromXMLR{*parent.tuiObject,*tf.tuiFile}
  *obj.tuiObject= Null

  Repeat
    className.s =  _ntui_NextXMLTag{*tf}
    If Peek.b(&className)=@"/" Then Function Return *parent

    If className
      classID.l = ntui_FindClassID{className}
      If classID>=0
        If tuiGlobal\xmlClassA[classID]\beginTag><Null
          !_CallFuncPointer{tuiGlobal\xmlClassA[classID]\beginTag,*obj,Null}
          If *obj
            _ntui_ReadXMLAttrs{className,classID,*obj,*tf}
            If tuiGlobal\xmlClassA[classID]\endTag
              _ntui_BuildFromXMLR{*obj,*tf}
              !_CallFuncPointer{tuiGlobal\xmlClassA[classID]\endTag,*obj}
            End If
          Else
            error{"NTUI XML Builder: Unable to create object of class \\22",className,"\\22!"}
            _ntui_SeekEnd{*tf}
          End If
        End If
      Else
        If className="!--" 
          ;_ntui_ReadXMLComment{*tf}
        Else
          error{"NTUI XML Builder: Unknown class \\22"+className+"\\22!"}
          _ntui_SeekEnd{*tf}
        End If
      End If
    End If
  Until _ntui_EOF{*tf}

  Function Return *obj

End Function



Function.tuiObject _ntui_BuildFromXML{*parent.tuiObject,*tf.tuiFile}

  DEFTYPE.tag10 tagList
  !_ASSERT{*tf}
  *engine.tuiEngine = Null

  If *parent=Null
    *engine = ntui_Engine{Null}
    *parent = *engine
  Else
    *engine = *parent\engine
  End If

  If *engine=Null Then Function Return Null

  ntui_BeginBuild{*parent}
  *obj.tuiObject = _ntui_BuildFromXMLR{*parent,*tf}
  ntui_EndBuild{}

  Function Return *obj

End Function


Function.tuiObject ntui_BuildFromXMLFile{*parent.tuiObject,filename.s}

  *tf.tuiFile= _ntui_ReadFile{filename}
  If *tf=Null Then Function Return Null
  *obj.tuiObject = _ntui_BuildFromXML{*parent,*tf}
  _ntui_CloseFile{*tf}
  Function Return *obj

End Function


Function.tuiObject ntui_BuildFromXMLMem{*parent.tuiObject,*xmldata.b}

  *tf.tuiFile = _ntui_ReadMemFile{*xmldata}
  If *tf=Null Then Function Return Null
  *obj.tuiObject = _ntui_BuildFromXML{*parent,*tf}
  _ntui_CloseFile{*tf}
  Function Return *obj

End Function



