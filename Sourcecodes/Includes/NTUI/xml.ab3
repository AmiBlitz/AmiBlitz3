; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res,SDSTCP2.res,xpk.res,ttengine.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 4
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 343
; CursorColumn    = 16
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: xml.include                                                           /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 08/01/2008                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
XINCLUDE "NTUI/definitions.ab3"

NEWTYPE.tuiFile
*name.str
fh.l
memp.l
memsize.l
mempos.l
memstolen.l
pos.l
bsize.l
accessmode.l
End NEWTYPE


Statement ntui_CloseFile{*tuiFile.tuiFile}
If *tuiFile
  If *tuiFile\fh Then Close_ *tuiFile\fh : *tuiFile\fh = Null
  If *tuiFile\memp
    If *tuiFile\memstolen=False Then FreeVec_ *tuiFile\memp
    *tuiFile\memp = Null
  End If
  str_Free{&*tuiFile\name}
End If
End Statement



Function.l ntui_ReadFile{filename.s}
*tf.tuiFile = AllocVec_(SizeOf.tuiFile,#MEMF_CLEAR)
If *tf=Null Then Function Return Null

*tf\fh = Open_ (&filename.s,#MODE_OLDFILE)
If *tf\fh=Null Then Function Return Null

*fib.FileInfoBlock = AllocDosObject_ (#DOS_FIB,#TAG_DONE)
If *fib=Null Then ntui_CloseFile{*tf}:Function Return Null

ExamineFH_ *tf\fh,*fib
*tf\bsize = *fib\fib_Size
FreeDosObject_ #DOS_FIB,*fib

*tf\pos         = 0
*tf\mempos      = 0
*tf\memstolen   = False
str_Write{&*tf\name,filename}
*tf\memsize     = *tf\bsize
*tf\memp        = AllocVec_(*tf\memsize+1,#MEMF_ANY)
If *tf\memp = Null Then ntui_CloseFile{*tf} : Function Return Null

Read_ *tf\fh,*tf\memp,*tf\memsize
Poke.b *tf\memp+*tf\memsize,0

Function Return *tf
End Function

Function.l ntui_ReadMemFile{memptr.l}
*tf.tuiFile = AllocVec_(SizeOf.tuiFile,#MEMF_CLEAR)
If *tf=Null Then Function Return Null

*tf\fh = Null

n.l = 0
While Peek.b(memptr+n)><0 : n+1 : Wend
*tf\bsize     = n
*tf\memsize   = n
*tf\pos       = 0
*tf\mempos    = 0
*tf\memp      = memptr
*tf\memstolen = True
str_Write{&*tf\name,""}

Function Return *tf
End Function

Function.b FAST ntui_ReadByte{*tf.tuiFile}
If *tf\pos<*tf\bsize Then *tf\pos+1:Function Return Peek.b(*tf\memp+*tf\pos-1)
Function Return 0
End Function


Function.w FAST ntui_EOF{*tf.tuiFile}
Function Return *tf\pos>=*tf\bsize
End Function


Function.w FAST ntui_SeekRel{*tf.tuiFile,dpos.l}
*tf\pos+dpos
If *tf\pos<0 Then *tf\pos=0:Function Return False
If *tf\pos>*tf\bsize Then *tf\pos=*tf\bsize : Function Return False
Function Return True
End Function


Function.s ntui_NextXMLTag{*tf.tuiFile}
xmlreadtagtryagain:
tagname.s = ""

Repeat
  c.b = ntui_ReadByte{*tf}
Until c=@"<" OR ntui_EOF{*tf}=True

breakme.l = False
Repeat
  c.b = ntui_ReadByte{*tf}
  Select c.b
   Case @" "
     If tagname.s><"" Then breakme = True
   Case 10
     If tagname.s><"" Then breakme = True
   Case @"="
     If tagname.s><"" Then breakme = True
   Case @">"
     breakme = True : ntui_SeekRel{*tf,-1}
   Case @"/"
     If tagname.s><"" Then breakme = True : Else tagname.s = "/"
   Default
     If c.b>32 OR c.b<-1 Then tagname.s + Chr$(c)
  End Select
Until breakme=True OR ntui_EOF{*tf} = True

;If tagname.s = "!--" Then Goto xmlreadtagtryagain
If tagname.s = "" AND ntui_EOF{*tf} = False Then Goto xmlreadtagtryagain
Function Return LCase$(tagname.s)
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = xml_ReadParamName {*tf.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ Read till the next parameter name of the previous found tag.                /
;/ Note: This function returns an empry string, if the tag contains no more :: /
;/ parameters.                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tf.l    : file id                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s : parameter name                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ntui_NextXMLAttr{*tf.tuiFile}
breakme.l = False
paramname.s = ""
space.l = False
Repeat
c.b = ntui_ReadByte{*tf}
Select c.b
 Case @" "
   If paramname.s><"" Then space = True
 Case 10
   If paramname.s><"" Then breakme = True
 Case @"="
   If paramname.s><"" Then breakme = True
 Case @">"
   breakme = True  : ntui_SeekRel{*tf,-1}
 Case @"/"
   breakme = True
 Default
   If space=False
     If c.b>32 OR c.b<-1 Then paramname.s + Chr$(c)
   Else
     ntui_SeekRel{*tf,-1}
     breakme = True
   End If
End Select
Until breakme=True OR ntui_EOF{*tf} = True
Function Return LCase$(paramname.s)
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = xml_ReadParamString {*tf.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ Get the parameter value as a string from the previous found parameter.      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tf.l    : file id                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s : string value                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ntui_GetXMLAttrString{*tf.tuiFile}
quoted.l = 0
quoted2.l = 0
breakme.l = False
string.s = ""
Repeat
c.b = ntui_ReadByte{*tf}
Select c.b
 Case $22
   If quoted2=0
     quoted=1-quoted
     If quoted=0 Then breakme=True
   Else
     string.s + Chr$(c)
   End If
 Case @"'"
   If quoted=0
     quoted2=1-quoted2
     If quoted2=0 Then breakme=True
   Else
     string.s + Chr$(c)
   End If
 Case @" "
   If quoted=False AND quoted2=False
     If string.s><"" Then breakme = True
   Else
     string.s + " "
   End If
 Case 10
   If quoted=False AND quoted2=False Then breakme = True : Else string.s + " "
 Case @"/"
   If quoted=False AND quoted2=False Then breakme = True : Else string.s + "/"
 Case @">"
   If quoted=False AND quoted2=False Then breakme = True : ntui_SeekRel{*tf,-1} : Else string.s + ">"
 Default
   If c><0 Then string.s + Chr$(c)
End Select
Until breakme=True OR ntui_EOF{*tf} = True
Function Return string.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = xml_ReadParamValue {*tf.l,@minVal.l,@maxVal.l}          /
;/                                                                             /
;/ Description:                                                                /
;/ Get the parameter value as 32bit integer from the previous found parameter. /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tf.l    : file id                                                        /
;/ - minVal.l    : ???                                                         /
;/ - maxVal.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l : parameter value                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_String2Integer{string.s,@minVal.l,@maxVal.l}
If Peek.b(&string) = @"@" Then long.l = Cvl(Right$(string,4)) : Else long = Vallong(string)
If LCase$(string) = "on"    Then long = True
If LCase$(string) = "yes"   Then long = True
If LCase$(string) = "true"  Then long = True
If LCase$(string) = "off"   Then long = False
If LCase$(string) = "no"    Then long = False
If LCase$(string) = "false" Then long = False
If minVal><-1 Then If long<minVal Then long=minVal
If maxVal><-1 Then If long>maxVal Then long=maxVal
Function Return long
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.f = xml_ReadParamFloat {*tf.l,@minVal.f,@maxVal.f}          /
;/                                                                             /
;/ Description:                                                                /
;/ Get the parameter value as 32bit float from the previous found parameter.   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tf.l    : file id                                                        /
;/ - minVal.f    : ???                                                         /
;/ - maxVal.f    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.f : parameter float                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.f ntui_String2Float{string.s,@minVal.f,@maxVal.f}
float.f = Val(string)
If minVal><-1 Then If float<minVal Then float=minVal
If maxVal><-1 Then If float>maxVal Then float=maxVal
Function Return float
End Function


Function.l ntui_ReadXMLAttrs{*obj.tuiObject,*tf.tuiFile}
  DEFTYPE.tuiXmlAttr xmlA
  xmlA\nameP   = Null
  xmlA\stringP = Null
  succ.w = True

  Repeat
    attr.s   = ntui_NextXMLAttr{*tf}
    If attr><""
      ;Print attr+"=... "
      Select attr
        Case "bind"
          string.s = ntui_GetXMLAttrString{*tf}
          *slave.tuiObject = ntui_GetObjectByID{*obj\tuiEngine,string}
          If *slave
            If *obj Then ntui_Bind{*obj,*slave}
          End If

        Default
          string.s = ntui_GetXMLAttrString{*tf}
          ;str_Write{&xmlA\name,attr}
          ;str_Write{&xmlA\string,string}
          xmlA\value   = ntui_String2Integer{string}
          xmlA\stringP = &string
          xmlA\nameP   = &attr
          If *obj Then ntui_SetAttr{*obj,#TUIA_XMLATTR,xmlA}
      End Select
    End If
  Until attr=""
  ;NPrint ">"
  Function Return succ
End Function



Function.l ntui_BuildFromXML{*engine.tuiEngine,*tf.tuiFile}
*parent.tuiObject = Null
If *tf=Null Then Function Return Null
If *engine=Null
  *engine=ntui_Engine{""}
  *parent = *engine
End If
If *engine=Null Then Function Return Null

ntui_BeginBuild{*engine}
*obj.tuiObject = Null
Repeat
  name.s =  ntui_NextXMLTag{*tf}
  ;Print "<"+name+" "
  Select name
    Case "engine"       : *obj = *engine   : ntui_ReadXMLAttrs{*obj,*tf}
    Case "/engine"      : *obj = *engine   : ntui_ReadXMLAttrs{*obj,*tf}
    Case "window"       : *obj = ntui_BeginWindow{"",""} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "/window"      : *obj = ntui_EndWindow  {}      : ntui_ReadXMLAttrs{*obj,*tf}

CNIF @#TUI_HAS_GROUP
    Case "group"        : *obj = ntui_BeginVGroup{-1,"","",#TUI_NOFLAGS,""}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "/group"       : *obj = ntui_EndGroup   {}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "vgroup"       : *obj = ntui_BeginVGroup{-1,"","",#TUI_NOFLAGS,""}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "/vgroup"      : *obj = ntui_EndGroup   {}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "hgroup"       : *obj = ntui_BeginHGroup{-1,"","",#TUI_NOFLAGS,""}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "/hgroup"      : *obj = ntui_EndGroup   {}  : ntui_ReadXMLAttrs{*obj,*tf}
CEND
CNIF @#TUI_HAS_BUTTON
    Case "button"       : *obj = ntui_Button{"","","","",#TUI_NOFLAGS,""}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "checkbox"     : *obj = ntui_CheckBox{False} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "radiobutton"  : *obj = ntui_RadioButton{"",False}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "checkbutton"  : *obj = ntui_CheckButton{"",False} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "imagebutton"  : *obj = ntui_ImageButton{"",""} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "toolbutton"   : *obj = ntui_ToolButton{"",""} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "arrowup"      : *obj = ntui_FunctionButton{#TUIBUTTON_ARROWUP} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "arrowdown"    : *obj = ntui_FunctionButton{#TUIBUTTON_ARROWDOWN} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "arrowleft"    : *obj = ntui_FunctionButton{#TUIBUTTON_ARROWLEFT} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "arrowright"   : *obj = ntui_FunctionButton{#TUIBUTTON_ARROWRIGHT} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "aslpath"      : *obj = ntui_FunctionButton{#TUIBUTTON_PATH} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "aslfile"      : *obj = ntui_FunctionButton{#TUIBUTTON_FILE} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "aslsave"      : *obj = ntui_FunctionButton{#TUIBUTTON_SAVE} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "aslscreen"    : *obj = ntui_FunctionButton{#TUIBUTTON_SCREEN} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "aslfont"      : *obj = ntui_FunctionButton{#TUIBUTTON_FONT} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "inc"          : *obj = ntui_FunctionButton{#TUIBUTTON_INC} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "dec"          : *obj = ntui_FunctionButton{#TUIBUTTON_DEC} : ntui_ReadXMLAttrs{*obj,*tf}
    ;Case "popup"        : *obj = ntui_FunctionButton{#TUIBUTTON_POPUP} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "spinner"      : *obj = ntui_FunctionButton{#TUIBUTTON_SPINNER} : ntui_ReadXMLAttrs{*obj,*tf}
    ;Case "dropdown"     : *obj = ntui_FunctionButton{#TUIBUTTON_DROPDOWN} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "left"         : *obj = ntui_FunctionButton{#TUIBUTTON_LEFT} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "right"        : *obj = ntui_FunctionButton{#TUIBUTTON_RIGHT} : ntui_ReadXMLAttrs{*obj,*tf}
CEND
CNIF @#TUI_HAS_LABEL
    Case "label"        : *obj = ntui_Label{"",#TUI_NOFLAGS,""}            : ntui_ReadXMLAttrs{*obj,*tf}
CEND
CNIF @#TUI_HAS_SPACE
    Case "space"        : *obj = ntui_Space{0,0}     : ntui_ReadXMLAttrs{*obj,*tf}
CEND
CNIF @#TUI_HAS_SEPERATOR
    Case "seperator"    : *obj = ntui_Seperator{""} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "hseperator"   : *obj = ntui_HSeperator{}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "vseperator"   : *obj = ntui_VSeperator{}  : ntui_ReadXMLAttrs{*obj,*tf}
CEND
CNIF @#TUI_HAS_BALANCER
    Case "balancer"     : *obj = ntui_Balancer{#TUIORIENT_VERTICAL}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "hbalancer"    : *obj = ntui_HBalancer{}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "vbalancer"    : *obj = ntui_VBalancer{}  : ntui_ReadXMLAttrs{*obj,*tf}
CEND
CNIF @#TUI_HAS_IMAGE
    Case "image"        : *obj = ntui_Image{""} : ntui_ReadXMLAttrs{*obj,*tf}
CEND
CNIF @#TUI_HAS_TABVIEW
    Case "tabview"      : *obj = ntui_BeginTabView{0}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "/tabview"     : *obj = ntui_EndTabView{}  : ntui_ReadXMLAttrs{*obj,*tf}
CEND
CNIF @#TUI_HAS_SCROLLER
    Case "hscroller"    : *obj = ntui_HScroller{0,0,0}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "vscroller"    : *obj = ntui_VScroller{0,0,0}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "scroller"     : *obj = ntui_VScroller{0,0,0}  : ntui_ReadXMLAttrs{*obj,*tf}
CEND
CNIF @#TUI_HAS_SLIDER
    Case "hslider"      : *obj = ntui_HSlider{0,0,0} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "vslider"      : *obj = ntui_VSlider{0,0,0} : ntui_ReadXMLAttrs{*obj,*tf}
    Case "slider"       : *obj = ntui_VSlider{0,0,0} : ntui_ReadXMLAttrs{*obj,*tf}
CEND
CNIF @#TUI_HAS_CUSTOMVIEW
    Case "customview"   : *obj = ntui_CustomView{0,0}  : ntui_ReadXMLAttrs{*obj,*tf}
CEND
CNIF @#TUI_HAS_PROGRESSBAR
    Case "progressbar"  : *obj = ntui_ProgressBar{"",0,0}  : ntui_ReadXMLAttrs{*obj,*tf}
CEND
CNIF @#TUI_HAS_LISTVIEW
    Case "listview"     : *obj = ntui_ListView{""}  : ntui_ReadXMLAttrs{*obj,*tf}
CEND

CNIF @#TUI_HAS_TEXTBOX
    Case "textbox"      : *obj = ntui_TextBox{"",1}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "string"       : *obj = ntui_String{"",1}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "stringlabel"  : *obj = ntui_EditLabel{"",1,#TUIPEN_HALFSHINE}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "console"      : *obj = ntui_Console{"",1024}  : ntui_ReadXMLAttrs{*obj,*tf}
CEND

CNIF @#TUI_HAS_MENUITEM
    Case "menutitle" : *obj = ntui_BeginMenuTitle{""}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "/menutitle": *obj = ntui_EndMenu       {}    : ntui_ReadXMLAttrs{*obj,*tf}
    Case "menuitem"  : *obj = ntui_MenuItem      {""}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "submenu"   : *obj = ntui_BeginSubMenu  {""}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "/submenu"  : *obj = ntui_EndMenu       {}    : ntui_ReadXMLAttrs{*obj,*tf}
    Case "popup"     : *obj = ntui_BeginPopUp    {""}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "/popup"    : *obj = ntui_EndMenu       {}    : ntui_ReadXMLAttrs{*obj,*tf}
    Case "dropdown"  : *obj = ntui_BeginDropDown {""}  : ntui_ReadXMLAttrs{*obj,*tf}
    Case "/dropdown" : *obj = ntui_EndMenu       {}    : ntui_ReadXMLAttrs{*obj,*tf}
CEND

    Case "" : done.l=True
    Default
      error{"ERROR: Unknown tag: "+name+"!"} :done=True
  End Select
  If *obj=Null Then NPrint "ERROR: Unable to create ",name,"!" : done=True
  If *parent=Null Then *parent=*obj
Until done
ntui_EndBuild{}
ntui_CloseFile{*tf}
Function Return *parent
End Function


Function.l ntui_BuildFromXMLFile{*engine.tuiEngine,filename.s}
*tf.tuiFile= ntui_ReadFile{filename}
If *tf=Null Then Function Return Null
Function Return ntui_BuildFromXML{*engine.tuiEngine,*tf}
End Function


Function.l ntui_BuildFromXMLMem{*engine.tuiEngine,*xmldata.b}
*tf.tuiFile= ntui_ReadMemFile{*xmldata}
If *tf=Null Then Function Return Null
Function Return ntui_BuildFromXML{*engine.tuiEngine,*tf}
End Function



