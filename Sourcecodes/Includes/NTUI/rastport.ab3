; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "///Debug"
; ExeFile         = "REDDebugger"
; CreateIcon      = 0
; Residents       = ",all.res,asmmacs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; Version         = 2.70.0
; NumberOfBuilds  = 26
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 0
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 85
; CursorColumn    = 14
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 50
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 50
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 50
; Max BlitzFont   = 4
; Max GTList      = 50
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: rastport.include                                                      /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 08/05/2008                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !rp_GetClipBounds {*rp.RastPort,minx.l,miny.l,maxx.l,maxy.l}        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/ - minx.l    : ???                                                           /
;/ - miny.l    : ???                                                           /
;/ - maxx.l    : ???                                                           /
;/ - maxy.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _ntui_GetRPClipBounds ; {*rp.RastPort,minx.l,miny.l,maxx.l,maxy.l}
    If `1\Layer
      If `1\Layer\ClipRegion
        *cliprec.Rectangle = `1\Layer\ClipRegion\bounds
        `2 = *cliprec\MinX
        `3 = *cliprec\MinY
        `4 = *cliprec\MaxX
        `5 = *cliprec\MaxY
      Else
        *cliprec = `1\Layer\bounds
        `2 = 0;*cliprec\MinX
        `3 = 0;*cliprec\MinY
        `4 = *cliprec\MaxX - *cliprec\MinX
        `5 = *cliprec\MaxY - *cliprec\MinY
      End If
    Else
      `2 = 0
      `3 = 0
      If `1\BitMap
        `4 = GetBitMapAttr_(`1\BitMap,#BMA_WIDTH)
        `5 = GetBitMapAttr_(`1\BitMap,#BMA_HEIGHT)
      Else
        `4 = 0
        `5 = 0
      End If
    End If
End Macro
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = rp_Create {width.l,height.l,@*friendlybitmap.BitMap}     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - width.l    : ???                                                          /
;/ - height.l    : ???                                                         /
;/ - *friendlybitmap.BitMap    : ???                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.RastPort _ntui_CreateRastPort{width.l,height.l,@*friendlybitmap.BitMap}
  ;error{"Create RP :"+Str$(width)+"x"+Str$(height)}
  If *friendlybitmap ; create with same specs like friend bitmap
    flags.l = 0
    bdepth.l = GetBitMapAttr_(*friendlybitmap,#BMA_DEPTH)
  Else               ; create a custom ARGB bitmap
    flags.l = #BMF_MINPLANES|#BMF_SPECIALFMT|(#PIXFMT_ARGB32 LSL 24)
    bdepth.l = 24
  End If

  *bmap.BitMap = AllocBitMap_(width,height,bdepth,flags,*friendlybitmap)

  If *bmap
    *layerinfo.Layer_Info = NewLayerInfo_
    If *layerinfo
      *layer.Layer    =  CreateUpfrontHookLayer_ (*layerinfo,*bmap,0,0,width-1,height-1,0,#LAYERS_NOBACKFILL,0)
      If *layer
        *rp.RastPort = *layer\rp
      End If
    End If
  End If

  Function Return *rp

End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: rp_Free {*rp.RastPort}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_FreeRastPort{*rp.RastPort}

  *bmap.BitMap          = *rp\BitMap
  *layerinfo.Layer_Info = *rp\Layer\LayerInfo
  *layer.Layer          = *rp\Layer
  If *layer     Then DeleteLayer_ 0,*layer
  If *layerinfo Then DisposeLayerInfo_ *layerinfo
  If *bmap Then FreeBitMap_ *bmap

End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: rp_Blit {*rp_from.RastPort,*rp_to.RastPort,x.l,y.l}                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp_from.RastPort    : ???                                                /
;/ - *rp_to.RastPort    : ???                                                  /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_BlitRastPort{*rp_from.RastPort,*rp_to.RastPort,x.l,y.l,w.l,h.l}

  BltBitMapRastPort_ *rp_from\BitMap,x,y,*rp_to,x,y,w,h,$C0

End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = rp_GetWidth {*rp.RastPort}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l __ntui_GetRastPortWidth{*rp.RastPort}
RunErrsOff
bmaplock.l = LockBitMapTagList_(*rp\BitMap,Tags(#LBMI_WIDTH,&width.l))
If bmaplock Then UnLockBitMap_ bmaplock
LastRunErrsMode
Function Return width
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = rp_GetHeight {*rp.RastPort}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l __ntui_GetRastPortHeight{*rp.RastPort}
RunErrsOff
bmaplock.l = LockBitMapTagList_(*rp\BitMap,Tags(#LBMI_HEIGHT,&height.l))
If bmaplock Then UnLockBitMap_ bmaplock
LastRunErrsMode
Function Return height
End Function
 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = rp_GetBytesPerRow {*rp.RastPort}                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l __ntui_GetRastPortBytesPerRow{*rp.RastPort}
RunErrsOff
bmaplock.l = LockBitMapTagList_(*rp\BitMap,Tags(#LBMI_BYTESPERROW,&bpr.l))
If bmaplock Then UnLockBitMap_ bmaplock
LastRunErrsMode
Function Return bpr
End Function
 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = rp_GetPixelFormat {*rp.RastPort}                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l __ntui_GetRastPortPixelFormat{*rp.RastPort}
RunErrsOff
bmaplock.l = LockBitMapTagList_(*rp\BitMap,Tags(#LBMI_PIXFMT,&pfmt.l))
If bmaplock Then UnLockBitMap_ bmaplock
LastRunErrsMode
Function Return pfmt
End Function
 

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = rp_GetDepth {*rp.RastPort}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l __ntui_GetRastPortDepth{*rp.RastPort}
RunErrsOff
bmaplock.l = LockBitMapTagList_(*rp\BitMap,Tags(#LBMI_DEPTH,&bdepth.l))
If bmaplock Then UnLockBitMap_ bmaplock
LastRunErrsMode
Function Return bdepth
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = rp_GetBytesPerPixel {*rp.RastPort}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l __ntui_GetRastPortBytesPerPixel{*rp.RastPort}
RunErrsOff
bmaplock.l = LockBitMapTagList_(*rp\BitMap,Tags(#LBMI_BYTESPERPIX,&bpp.l))
If bmaplock Then UnLockBitMap_ bmaplock
LastRunErrsMode
Function Return bpp
End Function




