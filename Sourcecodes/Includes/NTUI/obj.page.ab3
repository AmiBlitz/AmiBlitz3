; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 3
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 500
; CursorColumn    = 7
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_page.include                                                     /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#TUI_HAS_PAGE = 1

CNIF #__include=0
optimize 7
Syntax 2
CEND

#TUITABSTYLE_TOP    = 0 ; top tabs
#TUITABSTYLE_BOTTOM = 1 ; bottom tabs
#TUITABSTYLE_LEFT   = 2 ; left tabs
#TUITABSTYLE_RIGHT  = 3 ; left tabs
#TUITABSTYLE_NONE   = 4 ; no tabs

#TUIPA_PAGE     = #TUIA_VALUE
#TUIPA_TABSTYLE = #TUIA_USER   + 0

NEWTYPE.tuiPage
obj.tuiObject            ; tui object header
tabbing.l                ; horizontal or vertical
tbox.tuiRect             ; tab box
pbox.tuiRect             ; page box
tabBarSize.tuiPixel      ; total width/height of the tab bar
*tabPos.tuiPixel         ; position of the tabs
*tabSize.tuiPixel        ; size of the tabs
tabPadding.tuiRect
tabBorder.tuiRect
numTabs.l
allocTabs.l              ; number of allocated tab slots
tabStyle.l
*onSwitch.str
End NEWTYPE

USEPATH *tuiPage

_ntui_SetPageAttr:
Function.w _ntui_SetPageAttr{*tuiPage.tuiPage,ti_Tag.l,ti_Data.l}
done.w = True
Select ti_Tag
  Case #TUIPA_PAGE
    If (ti_Data><*tuiPage\obj\value)
      *tuiPage\obj\value = ti_Data
      ntui_SendEvent{*tuiPage,#TUIEV_LAYOUT}
      ntui_Refresh{*tuiPage}
      If (*tuiPage\onSwitch) Then ntui_PostNotify{*tuiPage,str_Read{&*tuiPage\onSwitch},*tuiPage\obj\value}
    End If

  Case #TUIPA_TABSTYLE
    *tuiPage\tabStyle = ti_Data
    ntui_SendEvent{*tuiPage,#TUIEV_LAYOUT}
    ntui_Refresh{*tuiPage}

  Default
    done=False
End Select
Function Return done
End Function


_ntui_GetPageAttr:
Function.w _ntui_GetPageAttr{*tuiPage.tuiPage,ti_Tag.l,*ti_Data.longP}
done.w = True
Select ti_Tag
  Case #TUIPA_PAGE
    *ti_Data\l = *tuiPage\obj\value

  Case #TUIPA_TABSTYLE
    *ti_Data\l = *tuiPage\tabStyle

  Default
    done=False
End Select
Function Return done
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = _ntui_DispatchPage {*tuiPage.tuiPage,*tuiEvent.tuiEvent}   /
;/                                                                             /
;/ Description:                                                                /
;/ obj.tuiObject            ; tui object header                                /
;/ tabbing.l                ; horizontal or vertical                           /
;/ tabBarSize.tuiPixel      ; total height of the tab bar                      /
;/ *tabPos.tuiPixel         ; position of the tabs                             /
;/ *tabSize.tuiPixel        ; size of the tabs                                 /
;/ allocTabs.l              ; number of allocated tab slots                    /
;/ padNW.tuiPixel           ; inner padding                                    /
;/ * do what happens if the user operates the button */                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiPage.tuiPage    : ???                                                 /
;/ - *tuiEvent.tuiEvent    : ???                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DispatchPageEvent:
Function.w _ntui_DispatchPageEvent{*tuiPage.tuiPage,*tuiEvent.tuiEvent}

  done.l = False
  Select *tuiEvent\evID
    Case #TUIEV_MOUSEDOWN
      If *tuiEvent\value = 0 ; we want button 0
        mx.l = *tuiEvent\pos\x
        my.l = *tuiEvent\pos\y
        *child.tuiObject = *tuiPage\obj\child
        n.l = 0
        newvalue.l=-1
        While *child
          If ((*child\flags&#TUIF_DISABLED)=0)
            *pos.tuiPixel  = \tabPos  + SizeOf.tuiPixel * n
            *size.tuiPixel = \tabSize + SizeOf.tuiPixel * n
            If (mx>=*pos\x) AND (mx<*pos\x+*size\x) AND (my>=*pos\y) AND (my<*pos\y+*size\y) Then newvalue=n : *child=#NULL
          End If
          If *child Then *child=*child\next_
          n+1
        Wend
        If newvalue>=0
          *tuiPage\obj\flags | #TUIF_ACTIVE
          ntui_SetFocus{*tuiPage\obj\tuiEngine,*tuiPage}
          _ntui_SetPageAttr{*tuiPage,#TUIA_VALUE,newvalue}
          done = True
        End If
      End If

    Case #TUIEV_MOUSEUP
      If *tuiEvent\value = 0 ; we want button 0
        If *tuiPage\obj\flags&#TUIF_ACTIVE
          done    = True
          *tuiPage\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
        End If
      End If

    Case #TUIEV_KEYDOWN
      Select ntui_GetEventAttr{*tuiEvent,#TUIEVA_VANILLAKEY}
        Case 13 ; return
          ntui_SetFocus{*tuiPage\obj\tuiEngine,*tuiPage}
          done      = True
          *tuiPage\obj\flags | #TUIF_ACTIVE
          newvalue = *tuiPage\obj\value+1
          numChildren.l=0
          *child.tuiObject = *tuiPage\obj\child
          While *child : numChildren+1 : *child=*child\next_ : Wend ; count number of children
          If newvalue>=numChildren Then newvalue=0
          _ntui_SetPageAttr{*tuiPage,#TUIA_VALUE,newvalue}
      End Select

    Case #TUIEV_KEYUP
        If *tuiPage\obj\flags&#TUIF_ACTIVE
           done    = True
           *tuiPage\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
        End If

    Default
      Function Return False
  End Select

  If done
    If (*tuiEvent\notifyID)
      *tuiEvent\tuiObject = *tuiPage
      _ntui_QueueEvent{*tuiPage\obj\tuiEngine\outQ,*tuiEvent}
    Else
      _ntui_DestroyEvent{*tuiEvent}
    End If
  End If

Function Return done
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawPage {*tuiPage.tuiPage,*rp.RastPort}                       /
;/                                                                             /
;/ Description:                                                                /
;/       ;case hotkey                                                          /
;/ * draw the button in all its beauty */                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiPage.tuiPage    : ???                                                 /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawPage:
Statement _ntui_DrawPage{*tuiPage.tuiPage,*rp.RastPort}
*tuiEngine.tuiEngine = *tuiPage\obj\tuiEngine : If *tuiEngine=#NULL OR *rp=#NULL Then Statement Return
*tui.tuiObject = *tuiPage\obj
addFlags.l = \obj\flags & (#TUIF_BOLD|#TUIF_SMALL|#TUIF_NORMAL|#TUIF_FIX|#TUIF_ITALIC|#TUIF_SERIF|#TUIF_UNDERLINED)
tuifont.l = _ntui_SetFont{*tuiEngine,*tuiPage\obj\flags}

bgDone.l = ntui_DrawBorder{*tuiEngine,*rp,*tuiPage\pbox,\obj\borderType,*tuiPage\obj\flags} ; draw the page border

If *tuiPage\obj\bgTuiPen>=0 AND bgDone=False ; background color, if any
  SetAPen_ *rp,*tuiEngine\pen[*tuiPage\obj\bgTuiPen]
  RectFill_ *rp,*tui\ibox\left, *tui\ibox\top, *tui\ibox\right,*tui\ibox\bottom
EndIf

;SetAPen_ *rp,2
;  RectFill_ *rp,*tuiPage\obj\ibox\left,*tuiPage\obj\ibox\top,*tuiPage\obj\ibox\right,*tuiPage\obj\ibox\bottom
;SetAPen_ *rp,1
;  RectFill_ *rp,*tuiPage\obj\cbox\left,*tuiPage\obj\cbox\top,*tuiPage\obj\cbox\right,*tuiPage\obj\cbox\bottom

If \numTabs<=0 OR \obj\value<0 OR \obj\value>=\numTabs; empty page
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
  x1.l = *tuiPage\obj\cbox\left    + *tuiEngine\defMargin\left
  x2.l = *tuiPage\obj\cbox\right   - *tuiEngine\defMargin\right
  y1.l = *tuiPage\obj\cbox\top     + *tuiEngine\defMargin\top
  y2.l = *tuiPage\obj\cbox\bottom  - *tuiEngine\defMargin\bottom
  w.l = x2-x1+1
  h.l = y2-y1+1
  For x.l = x1 To x2+h-1 Step 4
    dx.l = x
    dy.l = y1
    If dx>=w+x1 Then dy- (w+x1)+dx+1 : dx = x2
    Move_ *rp,dx,dy
    dx.l = x-h+1
    dy.l = y2
    If dx<x1 Then dy+dx-x1 : dx=x1
    Draw_ *rp,dx,dy
  Next

End If

If \allocTabs<\numTabs                                   ; (re)allocate tab array
  If \tabPos Then FreeVec_ \tabPos : \tabPos = #NULL
  \tabPos = AllocVec_ (\numTabs*SizeOf.tuiPixel,#MEMF_ANY)

  If \tabSize Then FreeVec_ \tabSize : \tabSize = #NULL
  \tabSize = AllocVec_ (\numTabs*SizeOf.tuiPixel,#MEMF_ANY)
  \allocTabs = \numTabs
End If

xall.l  = 0 ; calculate the tab sizes
xkeep.l = 0
xrest.l = 0
xmax.l  = 1
*child.tuiObject = \obj\child
For n.l = 0 To \numTabs-1
  xs.l =  _ntui_GetTextWidth{*tuiEngine,*child\string,addFlags,*rp} + \tabPadding\left+\tabPadding\right+\tabBorder\left+\tabBorder\right
  If *child\typeID=#TUIOBJ_GROUP    ; get the image, if any
    *tuiGroup.tuiGroup = *child
    If *tuiGroup\tbi Then xs + ntui_GetTBImageWidth{*tuiGroup\tbi} + \tabPadding\right
  End If
  *size.tuiPixel = \tabSize+(n*SizeOf.tuiPixel)
  If ((\tabStyle=#TUITABSTYLE_TOP) OR (\tabStyle=#TUITABSTYLE_BOTTOM))
    *size\x = xs,\tabBarSize\y
    If n=\obj\value
      xkeep.l = xs
    Else
      xall.l + xs
    End If
  End If
  If (\tabStyle=#TUITABSTYLE_LEFT) OR (\tabStyle=#TUITABSTYLE_RIGHT)
    *size\x = \tabBarSize\x,\tabBarSize\y;*tuiEngine\font[tuifont]\tf_YSize +\tabBorder\top+\tabBorder\bottom + \tabPadding\top+\tabPadding\bottom
  End If

  If xs>xmax Then xmax=xs
  *child = *child\next_
Next
_ntui_GetBorderSize{*tuiEngine,#TUIBORDER_PAGEEND,\obj\flags,peb.tuiRect}
_ntui_GetBorderSize{*tuiEngine,#TUIBORDER_PAGEBEGIN,\obj\flags,pbb.tuiRect}
tabwidth.l = !tuiRectWidth{\tbox} - peb\left-peb\right   - pbb\left-pbb\right
If \numTabs>1
  xrest.l = (tabwidth - xkeep) / (\numTabs-1)
  If xmax<xrest Then xrest=xmax
End If

If xrest>xkeep
  xkeep=xrest
  If \numTabs>1
    xrest.l = (tabwidth -xkeep) / (\numTabs-1)
    If xmax<xrest Then xrest=xmax
  End If
End If

x.l = \tbox\left
y.l = \tbox\top
If ((\tabStyle=#TUITABSTYLE_TOP)  OR (\tabStyle=#TUITABSTYLE_BOTTOM)) Then x = x + pbb\left  +pbb\right
If ((\tabStyle=#TUITABSTYLE_LEFT) OR (\tabStyle=#TUITABSTYLE_RIGHT )) Then y = y + pbb\top   +pbb\bottom

bx.l = x
by.l = y


For n.l=0 To \numTabs-1
  *pos.tuiPixel  = \tabPos+n*SizeOf.tuiPixel
  *size.tuiPixel = \tabSize+n*SizeOf.tuiPixel

  *pos\x  = x,y
  If ((\tabStyle=#TUITABSTYLE_TOP) OR (\tabStyle=#TUITABSTYLE_BOTTOM))
    If n=\obj\value
      *size\x = xkeep
    Else
      *size\x = xrest
    End If
    x + *size\x
  End If
  If (\tabStyle=#TUITABSTYLE_LEFT) OR (\tabStyle=#TUITABSTYLE_RIGHT)
    y + *size\y
  End If
Next

If (\tabStyle=#TUITABSTYLE_NONE) Then Statement Return


ex.l = x
ey.l = y
*child.tuiObject = \obj\child
For n.l = 0 To \numTabs-1
  *pos.tuiPixel  = \tabPos  + SizeOf.tuiPixel*n
  *size.tuiPixel = \tabSize + SizeOf.tuiPixel*n
  tbox.tuiRect\left = *pos\x, *pos\y, *pos\x+*size\x-1, *pos\y+*size\y-1
  bflags.l = *tuiPage\obj\flags
  If n=\obj\value
    flags.l = #TUIF_CENTER|#TUIF_MIDDLE;| #TUIF_BOLD
    bflags.l | #TUIF_ACTIVE
    flags | addFlags
    fgpen.l = #TUIPEN_ACTIVETEXT
    bgpen.l = #TUIPEN_MARKER
  Else
    flags.l = #TUIF_CENTER|#TUIF_MIDDLE
    bflags | #TUIF_ACTIVE - #TUIF_ACTIVE
    flags | addFlags
    fgpen.l = #TUIPEN_TEXT
    bgpen.l = #TUIPEN_HALFSHINE
  End If
  bgDone.l = ntui_DrawBorder{*tuiEngine,*rp,tbox,#TUIBORDER_PAGETAB,bflags}
  ex = tbox\right+1
  ey = tbox\bottom+1

  !tuiRemBorder{tbox,tbox,\tabBorder}
  !tuiRemBorder{tcbox.tuiRect,tbox,\tabPadding}
  If bgDone Then bgpen=#TUIPEN_TRANSPARENT

  If *child\typeID=#TUIOBJ_GROUP
    *tuiGroup.tuiGroup = *child
    If *tuiGroup\tbi
      xs = ntui_GetTBImageWidth{*tuiGroup\tbi} ;+ \tabPadding\right
      pbox.tuiRect\left  = tbox\left,tbox\top,tcbox\left+xs-1,tbox\bottom
      pcbox.tuiRect\left = tcbox\left,tcbox\top,tcbox\left+xs-1,tcbox\bottom
      ntui_DrawTBImage{*tuiGroup\tbi,*rp,pbox,pcbox,(*child\flags&#TUIF_DISABLED),bgpen}

      tcbox\left+xs
      tbox\left = tcbox\left
    End If
  End If

  _ntui_Print{*tuiEngine,*child\string,tbox,tcbox,(*child\flags&#TUIF_DISABLED)|flags,*rp,fgpen,bgpen}
  *child = *child\next_
Next



If (\tabStyle=#TUITABSTYLE_TOP) OR (\tabStyle=#TUITABSTYLE_BOTTOM)
  If ex<=\tbox\right
    !tuiCopyRect{xbox.tuiRect, *tuiPage\tbox}
    xbox\left = ex
    ntui_DrawBorder{*tuiEngine,*rp,xbox,#TUIBORDER_PAGEEND,*tuiPage\obj\flags}
  End If

    !tuiCopyRect{xbox.tuiRect, *tuiPage\tbox}
    xbox\right = bx-1
    ntui_DrawBorder{*tuiEngine,*rp,xbox,#TUIBORDER_PAGEBEGIN,*tuiPage\obj\flags}

End If

If (\tabStyle=#TUITABSTYLE_LEFT) OR (\tabStyle=#TUITABSTYLE_RIGHT)
  If ey<=\tbox\bottom
    !tuiCopyRect{xbox.tuiRect, *tuiPage\tbox}
    xbox\top = ey
    ntui_DrawBorder{*tuiEngine,*rp,xbox,#TUIBORDER_PAGEEND,*tuiPage\obj\flags}
  End If
    !tuiCopyRect{xbox.tuiRect, *tuiPage\tbox}
    xbox\bottom = by-1
    ntui_DrawBorder{*tuiEngine,*rp,xbox,#TUIBORDER_PAGEBEGIN,*tuiPage\obj\flags}
End If
End Statement


_ntui_CalculatePageMinSize:
Function.l _ntui_CalculatePageMinSize{*tuiPage.tuiPage,*rp.RastPort}
  *tuiEngine.tuiEngine = *tuiPage\obj\tuiEngine

  tuifont.l = _ntui_SetFont{*tuiEngine,*tuiPage\obj\flags}
  *tuiPage\tabStyle = #TUITABSTYLE_NONE
  If (*tuiPage\obj\flags&#TUIF_BOTTOM) Then *tuiPage\tabStyle = #TUITABSTYLE_BOTTOM
  If (*tuiPage\obj\flags&#TUIF_LEFT)   Then *tuiPage\tabStyle = #TUITABSTYLE_LEFT
  If (*tuiPage\obj\flags&#TUIF_TOP)    Then *tuiPage\tabStyle = #TUITABSTYLE_TOP
  If (*tuiPage\obj\flags&#TUIF_RIGHT)  Then *tuiPage\tabStyle = #TUITABSTYLE_RIGHT
  _ntui_GetBorderSize{*tuiEngine,#TUIBORDER_PAGETAB,*tuiPage\obj\flags,*tuiPage\tabBorder}
  _ntui_GetBorderSize{*tuiEngine,*tuiPage\obj\borderType,*tuiPage\obj\flags,*tuiPage\obj\border}

  Select *tuiPage\tabStyle
    Case #TUITABSTYLE_BOTTOM
      *tuiPage\tabBarSize\x =   0,*tuiEngine\font[tuifont]\tf_YSize + !tuiBorderHeight{*tuiPage\tabPadding} + !tuiBorderHeight{*tuiPage\tabBorder}
    Case #TUITABSTYLE_TOP
      *tuiPage\tabBarSize\x =   0,*tuiEngine\font[tuifont]\tf_YSize + !tuiBorderHeight{*tuiPage\tabPadding} + !tuiBorderHeight{*tuiPage\tabBorder}
    Case #TUITABSTYLE_LEFT
      *tuiPage\tabBarSize\x = 120,*tuiEngine\font[tuifont]\tf_YSize + !tuiBorderHeight{*tuiPage\tabPadding} + !tuiBorderHeight{*tuiPage\tabBorder}
    Case #TUITABSTYLE_RIGHT
      *tuiPage\tabBarSize\x = 120,*tuiEngine\font[tuifont]\tf_YSize + !tuiBorderHeight{*tuiPage\tabPadding} + !tuiBorderHeight{*tuiPage\tabBorder}
    Default
      *tuiPage\tabBarSize\x = 0,0
  End Select

  *child.tuiObject = *tuiPage\obj\child
  While *child

    If *child\typeID=#TUIOBJ_GROUP
      *tuiGroup.tuiGroup = *child
      If *tuiGroup\tbi
        ys.l = ntui_GetTBImageHeight{*tuiGroup\tbi}+ !tuiBorderHeight{*tuiPage\tabBorder}
        If ys>*tuiPage\tabBarSize\y
          *tuiPage\tabBarSize\y = ys
        End If
      End If
    End If

    *minsize.tuiPixel = _ntui_CalculateMinSize{*child,*rp}
    tmx.l = *child\minsize\x  + *child\margin\left + *child\margin\right
    tmy.l = *child\minsize\y  + *child\margin\top  + *child\margin\bottom

    If *tuiPage\obj\minsize\x<tmx Then *tuiPage\obj\minsize\x=tmx
    If *tuiPage\obj\minsize\y<tmy Then *tuiPage\obj\minsize\y=tmy
    ;If *tuiPage\obj\minsize\x<*minsize\x Then *tuiPage\obj\minsize\x=*minsize\x
    ;If *tuiPage\obj\minsize\y<*minsize\y Then *tuiPage\obj\minsize\y=*minsize\y
    *child=*child\next_
  Wend
  *tuiPage\obj\minsize\x + *tuiPage\tabBarSize\x + !tuiBorderWidth{*tuiPage\obj\padding} + !tuiBorderWidth{*tuiPage\obj\border}
  *tuiPage\obj\minsize\y + *tuiPage\tabBarSize\y + !tuiBorderHeight{*tuiPage\obj\padding}+ !tuiBorderHeight{*tuiPage\obj\border}
  Function Return *tuiPage\obj\minsize
End Function


_ntui_LayoutPage:
Statement _ntui_LayoutPage{*tuiPage.tuiPage,*rp.RastPort,*bbox.tuiRect}

  *tuiEngine.tuiEngine = *tuiPage\obj\tuiEngine
  *tui.tuiObject = *tuiPage
  If *bbox
    !tuiCopyRect{*tui\bbox,*bbox}
  End If

  \numTabs = 0
  *child.tuiObject = *tuiPage\obj\child
  While *child : \numTabs+1 : *child=*child\next_ : Wend ; count number of children

  !tuiCopyRect{\tbox,*tui\bbox}   ; tab box
  !tuiCopyRect{\pbox,*tui\bbox}   ; page box

  Select *tuiPage\tabStyle
    Case #TUITABSTYLE_BOTTOM
      \tbox\top    = \obj\bbox\bottom - \tabBarSize\y +1
      \pbox\bottom = \tbox\top-1
    Case #TUITABSTYLE_LEFT
      \tbox\right  = \obj\bbox\left + \tabBarSize\x-1
      \pbox\left   = \tbox\right+1
    Case #TUITABSTYLE_RIGHT
      \tbox\left   = \obj\bbox\right - \tabBarSize\x+1
      \pbox\right  = \tbox\left-1
    Case #TUITABSTYLE_TOP
      \tbox\bottom = \obj\bbox\top + \tabBarSize\y-1
      \pbox\top    = \tbox\bottom+1
    Default
  End Select

  !tuiRemBorder{*tui\ibox,*tuiPage\pbox,*tui\border}
  !tuiRemBorder{*tui\cbox,*tui\ibox,*tui\padding}

  *child.tuiObject = *tuiPage\obj\child
  counter.l = 0
  While *child

    If counter=*tuiPage\obj\value
      _ntui_Layout{*child,*rp,*tui\cbox}
    Else
      ntui_ClearFlags{#TUIF_ONSCREEN|#TUIF_DIRTY,False,*child}
    End If
    counter+1
    *child = *child\next_
  Wend

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreePage {*tuiPage.tuiPage}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * free everything special that we allocated for the button */               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiPage.tuiPage    : ???                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitPage:
Statement _ntui_DeinitPage{*tuiPage.tuiPage}
If *tuiPage\tabPos  Then FreeVec_ *tuiPage\tabPos  : *tuiPage\tabPos =#NULL
If *tuiPage\tabSize Then FreeVec_ *tuiPage\tabSize : *tuiPage\tabSize=#NULL
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_BeginPage {active.l,@notify.l,@help.s,@flags.l,@u:: /
;/ serID.l}                                                                    /
;/                                                                             /
;/ Description:                                                                /
;/   ;*bs.tuiBorderSize = ntui_GetBorderSize{*tuiEngine,#TUIBORDER_RAISED}     /
;/  *bs.tuiBorderSize = ntui_GetBorderSize{*tuiEngine,#TUIBORDER_RAISED}       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - active.l    : ???                                                         /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_BeginPage{initialPage.l,@help.s,@flags.l,@nameID.s}
If (flags=#TUI_NOFLAGS)
  flags = #TUIF_TOP
End If
flags|#TUIF_FIXSIZE
*tuiPage.tuiPage = _ntui_CreateObject{#TUIOBJ_PAGE,SizeOf.tuiPage,help,flags,nameID}
If *tuiPage
  *tuiPage\obj\borderType         = #TUIBORDER_PAGECONTENT
  *tuiPage\obj\bgTuiPen           = #TUIPEN_TRANSPARENT
  *tuiPage\obj\bindFlags          = #TUIBIND_ABLE|#TUIBIND_VALUE|#TUIBIND_DELTA
  *tuiPage\obj\value              = initialPage

  !tuiCopyRect{*tuiPage\tabPadding,*tuiPage\obj\tuiEngine\defPadding}

  !_GetFuncPointer{*tuiPage\obj\Draw            ,_ntui_DrawPage,{0,0}}
  !_GetFuncPointer{*tuiPage\obj\Layout          ,_ntui_LayoutPage,{0,0,0}}
  !_GetFuncPointer{*tuiPage\obj\DispatchEvent   ,_ntui_DispatchPageEvent,{0,0}}
  !_GetFuncPointer{*tuiPage\obj\CalculateMinSize,_ntui_CalculatePageMinSize,{0,0}}
  !_GetFuncPointer{*tuiPage\obj\Deinit          ,_ntui_DeinitPage,{0}}
  !_GetFuncPointer{*tuiPage\obj\SetAttr         ,_ntui_SetPageAttr,{0,0,0}}
  !_GetFuncPointer{*tuiPage\obj\GetAttr         ,_ntui_GetPageAttr,{0,0,0}}

  tuiGlobal\buildHelper\tuiParent = *tuiPage
  tuiGlobal\buildHelper\tuiPrev   = #NULL
End If
Function Return *tuiPage
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_EndPage {}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * end a group definition */                                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_EndPage{}
tuiGlobal\buildHelper\tuiPrev     = tuiGlobal\buildHelper\tuiParent
tuiGlobal\buildHelper\tuiCurrent  = tuiGlobal\buildHelper\tuiParent
If tuiGlobal\buildHelper\tuiParent Then tuiGlobal\buildHelper\tuiParent = tuiGlobal\buildHelper\tuiParent\parent

*child.tuiObject = tuiGlobal\buildHelper\tuiCurrent\child
While *child
  *child\borderType=#TUIBORDER_NONE
  *child=*child\next_
Wend
Function Return tuiGlobal\buildHelper\tuiCurrent
End Function



