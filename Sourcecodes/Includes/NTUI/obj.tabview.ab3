; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; FuncOptimize    = 0
; Version         = 0.0.0
; NumberOfBuilds  = 8
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 462
; CursorColumn    = 112
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
#TUI_HAS_TABVIEW = 1

#TUITABSTYLE_NONE   = 0 ; no tabs
#TUITABSTYLE_LEFT   = 1 ; left tabs
#TUITABSTYLE_TOP    = 2 ; top tabs
#TUITABSTYLE_RIGHT  = 3 ; left tabs
#TUITABSTYLE_BOTTOM = 4 ; bottom tabs

#TUITVA_BASE         = #TUIA_USER
#TUITVA_ACTIVETAB    = #TUIA_VALUE
#TUITVA_TABSTYLE     = #TUITVA_BASE + 1
#TUITVA_ONSWITCH     = #TUITVA_BASE + 2
#TUITVA_ONSWITCHCB   = #TUITVA_BASE + 3
#TUITVA_ACTIVETABOBJ = #TUITVA_BASE + 4
#TUITVA_NUMTABS      = #TUITVA_BASE + 5

; TODO: TUIF_TOP vs. TABSTYLE

NEWTYPE.tuiTabView

  obj.tuiObject            ; tui object header
  tbox.tuiRect             ; tab box
  pbox.tuiRect             ; tab box
  tabBarSize.tuiPixel      ; total width/height of the tab bar
  *tabPos.tuiPixel         ; position of the tabs
  *tabSize.tuiPixel        ; size of the tabs
  tabPadding.tuiRect
  tabBorder.tuiRect
  tabBorderA.tuiRect
  numTabs.l
  allocTabs.l              ; number of allocated tab slots
  tabStyle.l
  onSwitch.tuiNotifyHandler

End NEWTYPE


_ntui_SetTabViewAttr:
Function.l _ntui_SetTabViewAttr{*tabView.tuiTabView,ti_Tag.l,ti_Data.l}
  !_ASSERT{*tabView}
  !_ASSERT{*tabView\obj\classID=#TUICLASS_TABVIEW}

  done.l = True
  Select ti_Tag
    Case #TUITVA_ACTIVETAB
      If (ti_Data><*tabView\obj\value)
        *tabView\obj\value = ti_Data
        ntui_SendEvent{*tabView,#TUIEV_RELAYOUT}
        ;ntui_Refresh{*tabView,Null}
        _ntui_PropagateBind{*tabView,#TUIEV_BIND_VALUE,*tabView\obj\value,Null}
      End If

    Case #TUITVA_TABSTYLE
      *tabView\tabStyle = ti_Data
      ntui_SendEvent{*tabView,#TUIEV_RELAYOUT}
      ;ntui_Refresh{*tabView,Null}

    Case #TUITVA_ONSWITCH     : str_WritePtr{&*tabView\onSwitch\notifyID  ,ti_Data}
    Case #TUITVA_ONSWITCHCB   : *tabView\onSwitch\callback = ti_Data
    Case #TUITVA_ACTIVETABOBJ
      *child.tuiObject = *tabView\obj\child
      tabX.l = 0
      While *child
        If *child=ti_Data
          _ntui_SetTabViewAttr{*tabView,#TUITVA_ACTIVETAB,tabX}
          *child = Null
        Else
          tabX+1
          *child = *child\next_
        End If
      Wend

    Default
      done=False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_SetTabViewAttr,{Null,0,0}}


_ntui_GetTabViewAttr:
Function.l _ntui_GetTabViewAttr{*tabView.tuiTabView,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*tabView}
  !_ASSERT{*tabView\obj\classID=#TUICLASS_TABVIEW}

  done.l = True
  Select ti_Tag
    Case #TUITVA_ACTIVETAB  : *ti_Data\l = *tabView\obj\value
    Case #TUITVA_NUMTABS    : *ti_Data\l = *tabView\numTabs
    Case #TUITVA_ACTIVETABOBJ : *ti_Data\l = Null
      *child.tuiObject = *tabView\obj\child
      tabX.l = 0
      While *child
        If tabX=*tabView\obj\value
          *ti_Data\l =  (.longP)*child
          *child = Null
        Else
          tabX+1
          *child = *child\next_
        End If
      Wend

    Case #TUITVA_TABSTYLE   : *ti_Data\l = *tabView\tabStyle
    Case #TUITVA_ONSWITCH   : *ti_Data\l = str_GetPtr{*tabView\onSwitch\notifyID}
    Case #TUITVA_ONSWITCHCB : *ti_Data\l = *tabView\onSwitch\callback
    Default
      done=False
  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_GetTabViewAttr,{Null,0,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_DispatchTabView {*tabView.tuiTabView,*ev.tuiEvent}   /
;/                                                                             /
;/ Description:                                                                /
;/ obj.tuiObject            ; tui object header                                /
;/ tabBarSize.tuiPixel      ; total height of the tab bar                      /
;/ *tabPos.tuiPixel         ; position of the tabs                             /
;/ *tabSize.tuiPixel        ; size of the tabs                                 /
;/ allocTabs.l              ; number of allocated tab slots                    /
;/ padNW.tuiPixel           ; inner padding                                    /
;/ * do what happens if the user operates the tabView */                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tabView.tuiTabView    : ???                                                 /
;/ - *ev.tuiEvent    : ???                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DispatchTabViewEvent:
Function.l _ntui_DispatchTabViewEvent{*tabView.tuiTabView,*ev.tuiEvent}
  !_ASSERT{*tabView}
  !_ASSERT{*tabView\obj\classID=#TUICLASS_TABVIEW}

  done.l = False
  Select *ev\id
    Case #TUIEV_LOSEFOCUS
      !tuiAddRectOffset{tbox.tuiRect,*tabView\tbox,*tabView\obj\bbox\left,*tabView\obj\bbox\top}
      ;ntui_Refresh{*tabView,tbox}
      done=True

    Case #TUIEV_FOCUS
      !tuiAddRectOffset{tbox.tuiRect,*tabView\tbox,*tabView\obj\bbox\left,*tabView\obj\bbox\top}
      ;ntui_Refresh{*tabView,tbox}
      done=True

    Case #TUIEV_MOUSEDOWN
      If *ev\value = 0 ; we want tabView 0
        mx.l = *ev\pos\x - *tabView\obj\bbox\left
        my.l = *ev\pos\y - *tabView\obj\bbox\top
        *child.tuiObject = *tabView\obj\child
        If *tabView\tabPos=Null OR *tabView\tabSize=Null Then Function Return True
        n.l = 0
        newvalue.l=-1
        While *child
          If ((*child\flags&#TUIF_DISABLED)=0)
            *pos.tuiPixel  = *tabView\tabPos  + SizeOf.tuiPixel * n
            *size.tuiPixel = *tabView\tabSize + SizeOf.tuiPixel * n
            If (mx>=*pos\x) AND (mx<*pos\x+*size\x) AND (my>=*pos\y) AND (my<*pos\y+*size\y) Then newvalue=n : *child=Null
          End If
          If *child Then *child=*child\next_
          n+1
        Wend
        If newvalue>=0
          *tabView\obj\flags | #TUIF_ACTIVE
          ntui_SetFocus{*tabView}
          _ntui_SetTabViewAttr{*tabView,#TUITVA_ACTIVETAB,newvalue}
          !tuiHandleNotify{done,*tabView,onSwitch,*ev}
          done = True
        End If
      End If

    Case #TUIEV_MOUSEUP
      If *ev\value = 0 ; we want tabView 0
        If *tabView\obj\flags&#TUIF_ACTIVE
          *tabView\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
          done = True
        End If
      End If

    Case #TUIEV_KEYDOWN
      ntui_GetEventAttr{*ev,#TUIEVA_VANILLAKEY,&vkey.l}
      Select vkey
        Case 13 ; return
          ntui_SetFocus{*tabView}
          *tabView\obj\flags | #TUIF_ACTIVE
          newvalue = *tabView\obj\value+1
          numChildren.l=0
          *child.tuiObject = *tabView\obj\child
          While *child : numChildren+1 : *child=*child\next_ : Wend ; count number of children
          If newvalue>=numChildren Then newvalue=0
          If newvalue<0 Then newvalue=numChildren-1
          _ntui_SetTabViewAttr{*tabView,#TUIA_VALUE,newvalue}
          !tuiHandleNotify{done,*tabView,onSwitch,*ev}
          done = True
      End Select

    Case #TUIEV_KEYUP
      If *tabView\obj\flags&#TUIF_ACTIVE
        *tabView\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
        done    = True
      End If

    Case #TUIEV_BIND_VALUE
      *tabView\obj\value = *ev\value
      ntui_SendEvent{*tabView,#TUIEV_RELAYOUT}
      ;ntui_Refresh{*tabView,Null}
      done=True

    Case #TUIEV_BIND_DELTA
      *tabView\obj\value + *ev\value
      ntui_SendEvent{*tabView,#TUIEV_RELAYOUT}
      ;ntui_Refresh{*tabView,Null}
      done=True

    Case #TUIEV_PROPAGATE
      _ntui_PropagateBind{*tabView,#TUIEV_BIND_MINVALUE  ,0   ,Null}
      _ntui_PropagateBind{*tabView,#TUIEV_BIND_MAXVALUE  ,*tabView\numTabs  ,Null}
      _ntui_PropagateBind{*tabView,#TUIEV_BIND_VALUE     ,*tabView\obj\value,Null}
      done=True

    Default
      Function Return False
  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_DispatchTabViewEvent,{Null,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawTabView {*tabView.tuiTabView,*rp.RastPort}                       /
;/                                                                             /
;/ Description:                                                                /
;/       ;case hotkey                                                          /
;/ * draw the tabView in all its beauty */                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tabView.tuiTabView    : ???                                                 /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawTabView:
Statement _ntui_DrawTabView{*tabView.tuiTabView,*rp.RastPort,*rpclip.tuiRect}
  !_ASSERT{*tabView}
  !_ASSERT{*tabView\obj\classID=#TUICLASS_TABVIEW}
  !_ASSERT{*rp}
  *obj.tuiObject = *tabView\obj
  *engine.tuiEngine = *obj\engine
  !_ASSERT{*engine}

  If ((*obj\flags&#TUIF_ONSCREEN)=0) Then Statement Return

  !tuiAndRect{bclip.tuiRect,*obj\bbox,*rpclip}
  If !tuiValidRect{bclip}=False Then Statement Return
  !tuiAndRect{iclip.tuiRect,*obj\ibox,*rpclip}
  !tuiAndRect{cclip.tuiRect,*obj\cbox,*rpclip}

  borderflags.l = 0
  Select (*tabView\tabStyle)
    Case #TUITABSTYLE_BOTTOM : borderflags = #TUIF_BOTTOM
    Case #TUITABSTYLE_LEFT   : borderflags = #TUIF_LEFT
    Case #TUITABSTYLE_TOP    : borderflags = #TUIF_TOP
    Case #TUITABSTYLE_RIGHT  : borderflags = #TUIF_RIGHT
  End Select

  !tuiAddRectOffset{pbox.tuiRect,*tabView\pbox,*obj\bbox\left,*obj\bbox\top}

  _ntui_DrawBG{*tabView\obj\engine,*rp,pbox,*tabView\obj\ibox,*rpclip,*obj\bgImage,*obj\bgTuiPen,*obj\borderType,borderflags,#TUIORIENT_HORIZONTAL}

  ;bgDone.l = ntui_DrawBorder{*engine,*rp,pbox,*tabView\obj\borderType,borderflags} ; draw the TabView border

  ;If !tuiRectOverlap{*obj\ibox,*rpclip}
  ;  If bgTuiPen><#TUIPEN_TRANSPARENT  ; background color, if any
  ;    !tuiAndRect{iclip.tuiRect,*obj\ibox,*rpclip}
  ;    SetAPen_ *rp,*engine\pen[bgTuiPen]
  ;    RectFill_ *rp,iclip\left,iclip\top,iclip\right,iclip\bottom
  ;  EndIf
  ;End If

  If *tabView\numTabs<=0 OR *tabView\obj\value<0 OR *tabView\obj\value>=*tabView\numTabs; empty tab
    !tuiRemBorder{ebox.tuiRect,*tabView\obj\cbox,*engine\defMargin}
    If !tuiRectOverlap{ebox,*rpclip}
      _ntui_DrawEmptyBox{*engine,*rp,ebox,#TUIPEN_SHADOW}
    End If
  End If

  If (*tabView\tabStyle=#TUITABSTYLE_NONE) Then Goto _ntui_skiptabs

  If !tuiRectInside{*rpclip,*obj\cbox}=False ; not only content area

    addFlags.l = *tabView\obj\flags & (#TUIF_BOLD|#TUIF_SMALL|#TUIF_NORMAL|#TUIF_FIX|#TUIF_ITALIC|#TUIF_SERIF|#TUIF_UNDERLINED)
    ;tuifont.l = _ntui_SetFont{*engine,*tabView\obj\flags}

    If *tabView\allocTabs<*tabView\numTabs                                   ; (re)allocate tab array
      If *tabView\tabPos Then FreeVec_ *tabView\tabPos : *tabView\tabPos = Null
      *tabView\tabPos = AllocVec_ (*tabView\numTabs*SizeOf.tuiPixel,#MEMF_ANY)

      If *tabView\tabSize Then FreeVec_ *tabView\tabSize : *tabView\tabSize = Null
      *tabView\tabSize = AllocVec_ (*tabView\numTabs*SizeOf.tuiPixel,#MEMF_ANY)
      *tabView\allocTabs = *tabView\numTabs
    End If

    xall.l  = 0 ; calculate the tab sizes
    xkeep.l = 0
    xrest.l = 0
    xmax.l  = 1
    *child.tuiObject = *tabView\obj\child
    For n.l = 0 To *tabView\numTabs-1
      xs.l =  _ntui_GetTextWidth{*engine,*child\string,addFlags,*rp}
      xs + *tabView\tabPadding\left+*tabView\tabPadding\right+*tabView\tabBorder\left+*tabView\tabBorder\right
      If *child\classID=#TUICLASS_GROUP    ; get the image, if any
        *group.tuiGroup = (.tuiGroup)*child
        If *group\tbi Then xs + ntui_GetTBImageWidth{*group\tbi} + *tabView\tabPadding\right
      End If
      *size.tuiPixel = *tabView\tabSize+(n*SizeOf.tuiPixel)
      If ((*tabView\tabStyle=#TUITABSTYLE_TOP) OR (*tabView\tabStyle=#TUITABSTYLE_BOTTOM))
        *size\x = xs,*tabView\tabBarSize\y
        If n=*tabView\obj\value
          xkeep.l = xs
        Else
          xall.l + xs
        End If
      End If
      If (*tabView\tabStyle=#TUITABSTYLE_LEFT) OR (*tabView\tabStyle=#TUITABSTYLE_RIGHT)
        *size\x = *tabView\tabBarSize\x,*tabView\tabBarSize\y;*engine\font[tuifont]\tf_YSize +\tabBorder\top+\tabBorder\bottom + \tabPadding\top+\tabPadding\bottom
      End If

      If xs>xmax Then xmax=xs
      *child = *child\next_
    Next

    _ntui_GetBorderSize{*engine,#TUIBORDER_TABVIEWEND  ,borderflags,peb.tuiRect}
    _ntui_GetBorderSize{*engine,#TUIBORDER_TABVIEWBEGIN,borderflags,pbb.tuiRect}

    tabwidth.l = !tuiRectWidth{*tabView\tbox} - peb\left-peb\right   - pbb\left-pbb\right
    If *tabView\numTabs>1
      xrest.l = (tabwidth - xkeep) / (*tabView\numTabs-1)
    Else
      xrest.l = tabwidth
    End If
    If xrest>xmax Then xrest=xmax

    If xrest>xkeep
      xkeep=xrest
      If *tabView\numTabs>1
        xrest.l = (tabwidth -xkeep) / (*tabView\numTabs-1)
        If xmax<xrest Then xrest=xmax
      End If
    End If

    x.l = *tabView\tbox\left +*obj\bbox\left
    y.l = *tabView\tbox\top  +*obj\bbox\top
    If ((*tabView\tabStyle=#TUITABSTYLE_TOP)  OR (*tabView\tabStyle=#TUITABSTYLE_BOTTOM)) Then x = x + pbb\left  +pbb\right
    If ((*tabView\tabStyle=#TUITABSTYLE_LEFT) OR (*tabView\tabStyle=#TUITABSTYLE_RIGHT )) Then y = y + pbb\top   +pbb\bottom

    bx.l = x
    by.l = y

    For n.l=0 To *tabView\numTabs-1
      *pos.tuiPixel  = *tabView\tabPos+n*SizeOf.tuiPixel
      *size.tuiPixel = *tabView\tabSize+n*SizeOf.tuiPixel

      *pos\x  = x,y
      If ((*tabView\tabStyle=#TUITABSTYLE_TOP) OR (*tabView\tabStyle=#TUITABSTYLE_BOTTOM))
        If n=*tabView\obj\value
          *size\x = xkeep
        Else
          *size\x = xrest
        End If
        x + *size\x
      End If
      If (*tabView\tabStyle=#TUITABSTYLE_LEFT) OR (*tabView\tabStyle=#TUITABSTYLE_RIGHT)
        y + *size\y
      End If
    Next


    ex.l = x
    ey.l = y
    *child.tuiObject = *tabView\obj\child
    For n.l = 0 To *tabView\numTabs-1
      *pos.tuiPixel  = *tabView\tabPos  + SizeOf.tuiPixel*n
      *size.tuiPixel = *tabView\tabSize + SizeOf.tuiPixel*n
      tbox.tuiRect\left = *pos\x, *pos\y, *pos\x+*size\x-1, *pos\y+*size\y-1

      !tuiRemBorder{tibox.tuiRect,tbox,*tabView\tabBorder}
      !tuiRemBorder{tcbox.tuiRect,tibox,*tabView\tabPadding}
      bflags.l = borderflags;*tabView\obj\flags
      If n=*tabView\obj\value
        flags.l = #TUIF_CENTER|#TUIF_MIDDLE;| #TUIF_BOLD
        bflags.l | #TUIF_ACTIVE
        flags | addFlags
        fgpen.l = #TUIPEN_ACTIVETEXT
        bgpen.l = #TUIPEN_MARKER
        !tuiRemBorder{tibox.tuiRect,tbox,*tabView\tabBorderA}
      Else
        flags.l = #TUIF_CENTER|#TUIF_MIDDLE
        bflags | #TUIF_ACTIVE - #TUIF_ACTIVE
        flags | addFlags
        fgpen.l = #TUIPEN_TEXT
        bgpen.l = #TUIPEN_HALFSHINE

      End If



     ; If ntui_DrawBorder{*engine,*rp,tbox,#TUIBORDER_TAB,bflags} Then bgpen=#TUIPEN_TRANSPARENT

      ex = tbox\right+1
      ey = tbox\bottom+1

      bgpen = _ntui_DrawBG{*tabView\obj\engine,*rp,tbox,tibox,*rpclip,Null,bgpen,#TUIBORDER_TAB,bflags,#TUIORIENT_HORIZONTAL}

      If *child\classID=#TUICLASS_GROUP
        *group.tuiGroup = (.tuiGroup)*child
        If *group\tbi
          xs = ntui_GetTBImageWidth{*group\tbi} ;+ \tabPadding\right
          pbox.tuiRect\left  = tibox\left,tibox\top,tcbox\left+xs-1,tibox\bottom
          pcbox.tuiRect\left = tcbox\left,tcbox\top,tcbox\left+xs-1,tcbox\bottom
          ntui_DrawTBImage{*group\tbi,*rp,pbox,pcbox,(*child\flags&#TUIF_DISABLED),bgpen}

          tcbox\left+xs
          tibox\left = tcbox\left
        End If
      End If

      _ntui_Print{*engine,*child\string,tibox,tcbox,(*child\flags&(#TUIF_DISABLED|#TUIF_ITALIC|#TUIF_BOLD|#TUIF_SMALL|#TUIF_UNDERLINED|#TUIF_FIX))|flags,*rp,fgpen,bgpen}
      *child = *child\next_
    Next

    If (*tabView\tabStyle=#TUITABSTYLE_TOP) OR (*tabView\tabStyle=#TUITABSTYLE_BOTTOM)
      If ex<=*tabView\tbox\right+*obj\bbox\left
        !tuiAddRectOffset{xbox.tuiRect, *tabView\tbox,*obj\bbox\left,*obj\bbox\top}
        xbox\left = ex
        ntui_DrawBorder{*engine,*rp,xbox,#TUIBORDER_TABVIEWEND,borderflags}
      End If
      !tuiAddRectOffset{xbox.tuiRect, *tabView\tbox,*obj\bbox\left,*obj\bbox\top}
      xbox\right = bx-1
      ntui_DrawBorder{*engine,*rp,xbox,#TUIBORDER_TABVIEWBEGIN,borderflags}
    End If

    If (*tabView\tabStyle=#TUITABSTYLE_LEFT) OR (*tabView\tabStyle=#TUITABSTYLE_RIGHT)
      If ey<=*tabView\tbox\bottom +*obj\bbox\top
        !tuiAddRectOffset{xbox.tuiRect, *tabView\tbox,*obj\bbox\left,*obj\bbox\top}
        xbox\top = ey
        ntui_DrawBorder{*engine,*rp,xbox,#TUIBORDER_TABVIEWEND,borderflags}
      End If
      !tuiAddRectOffset{xbox.tuiRect, *tabView\tbox,*obj\bbox\left,*obj\bbox\top}
      xbox\bottom = by-1
      ntui_DrawBorder{*engine,*rp,xbox,#TUIBORDER_TABVIEWBEGIN,borderflags}
    End If

    For n.l=0 To *tabView\numTabs-1
      *pos.tuiPixel  = *tabView\tabPos+n*SizeOf.tuiPixel
      *pos\x - *obj\bbox\left
      *pos\y - *obj\bbox\top
    Next

  End If

  _ntui_skiptabs:
  If !tuiValidRect{cclip}
    *child.tuiObject = *obj\child
    For n.l = 0 To *tabView\numTabs-1
      If n=*tabView\obj\value
        _ntui_Draw{*child,*rp,cclip}
      End If
      *child = *child\next_
    Next
  End If

End Statement
!_MakeGlobalFuncPointer{_ntui_DrawTabView,{Null,Null,Null}}


_ntui_CalculateTabViewMinSize:
Statement _ntui_CalculateTabViewMinSize{*tabView.tuiTabView,*rp.RastPort}
  !_ASSERT{*tabView}
  !_ASSERT{*tabView\obj\classID=#TUICLASS_TABVIEW}

  *engine.tuiEngine = *tabView\obj\engine

  tuifont.l = _ntui_SetFont{*engine,*tabView\obj\flags}
  borderflags.l = (*tabView\obj\flags|(#TUIF_BOTTOM|#TUIF_LEFT|#TUIF_TOP|#TUIF_RIGHT))-(#TUIF_BOTTOM|#TUIF_LEFT|#TUIF_TOP|#TUIF_RIGHT)
  Select (*tabView\tabStyle)
    Case #TUITABSTYLE_BOTTOM : borderflags = #TUIF_BOTTOM
    Case #TUITABSTYLE_LEFT   : borderflags = #TUIF_LEFT
    Case #TUITABSTYLE_TOP    : borderflags = #TUIF_TOP
    Case #TUITABSTYLE_RIGHT  : borderflags = #TUIF_RIGHT
  End Select
  ;*tabView\tabStyle = #TUITABSTYLE_NONE
  ;If (*tabView\obj\flags&#TUIF_BOTTOM) Then *tabView\tabStyle = #TUITABSTYLE_BOTTOM
  ;If (*tabView\obj\flags&#TUIF_LEFT)   Then *tabView\tabStyle = #TUITABSTYLE_LEFT
  ;If (*tabView\obj\flags&#TUIF_TOP)    Then *tabView\tabStyle = #TUITABSTYLE_TOP
  ;If (*tabView\obj\flags&#TUIF_RIGHT)  Then *tabView\tabStyle = #TUITABSTYLE_RIGHT
  _ntui_GetBorderSize{*engine,#TUIBORDER_TAB,borderflags,*tabView\tabBorder}
  _ntui_GetBorderSize{*engine,#TUIBORDER_TAB,borderflags|#TUIF_ACTIVE,*tabView\tabBorderA}
  _ntui_GetBorderSize{*engine,*tabView\obj\borderType,borderflags,*tabView\obj\border}

  *tabView\tabBarSize\x = 0
  *tabView\tabBarSize\y = _ntui_GetFontHeight{*engine,*tabView\obj\flags}
  *tabView\obj\minsize\x = 0
  *tabView\obj\minsize\y = 0

  *child.tuiObject = *tabView\obj\child
  While *child

    minTabWidth.l  = 0
    minTabHeight.l = 0
    If *child\classID=#TUICLASS_GROUP
      *group.tuiGroup = (.tuiGroup)*child
      If *group\tbi
        minTabWidth  = ntui_GetTBImageWidth{*group\tbi}
        minTabHeight = ntui_GetTBImageHeight{*group\tbi} - !tuiBorderHeight{*tabView\tabPadding}
      End If
    End If

    If *child\string
      _ntui_GetTextRect{*engine,*child\string,tx.tuiRect,*tabView\obj\flags,*rp}
      minTabWidth  + !tuiRectWidth{tx}
      If !tuiRectHeight{tx}>minTabHeight Then minTabHeight = !tuiRectHeight{tx}
    End If
    If minTabWidth >*tabView\tabBarSize\x Then *tabView\tabBarSize\x = minTabWidth
    If minTabHeight>*tabView\tabBarSize\y Then *tabView\tabBarSize\y = minTabHeight

    _ntui_CalculateMinSize{*child,*rp}
    tmx.l = *child\minsize\x  + *child\margin\left + *child\margin\right
    tmy.l = *child\minsize\y  + *child\margin\top  + *child\margin\bottom

    If *tabView\obj\minsize\x<tmx Then *tabView\obj\minsize\x=tmx
    If *tabView\obj\minsize\y<tmy Then *tabView\obj\minsize\y=tmy
    ;If *tabView\obj\minsize\x<*minsize\x Then *tabView\obj\minsize\x=*minsize\x
    ;If *tabView\obj\minsize\y<*minsize\y Then *tabView\obj\minsize\y=*minsize\y
    *child=*child\next_
  Wend

  Select *tabView\tabStyle
    Case #TUITABSTYLE_BOTTOM
      *tabView\tabBarSize\y + !tuiBorderHeight{*tabView\tabPadding} + !tuiBorderHeight{*tabView\tabBorder}
      *tabView\tabBarSize\x + !tuiBorderWidth{*tabView\tabPadding} + !tuiBorderWidth{*tabView\tabBorder}
      *tabView\obj\minsize\y + *tabView\tabBarSize\y
    Case #TUITABSTYLE_TOP
      *tabView\tabBarSize\y + !tuiBorderHeight{*tabView\tabPadding} + !tuiBorderHeight{*tabView\tabBorder}
      *tabView\tabBarSize\x + !tuiBorderWidth{*tabView\tabPadding} + !tuiBorderWidth{*tabView\tabBorder}
      *tabView\obj\minsize\y + *tabView\tabBarSize\y
    Case #TUITABSTYLE_LEFT
      *tabView\tabBarSize\y + !tuiBorderHeight{*tabView\tabPadding} + !tuiBorderHeight{*tabView\tabBorder}
      *tabView\tabBarSize\x + !tuiBorderWidth{*tabView\tabPadding} + !tuiBorderWidth{*tabView\tabBorder}
      *tabView\obj\minsize\x + *tabView\tabBarSize\x
    Case #TUITABSTYLE_RIGHT
      *tabView\tabBarSize\y + !tuiBorderHeight{*tabView\tabPadding} + !tuiBorderHeight{*tabView\tabBorder}
      *tabView\tabBarSize\x + !tuiBorderWidth{*tabView\tabPadding} + !tuiBorderWidth{*tabView\tabBorder}
      *tabView\obj\minsize\x + *tabView\tabBarSize\x
    Default
      *tabView\tabBarSize\x = 0,0
  End Select

  *tabView\obj\minsize\x + !tuiBorderWidth{*tabView\obj\padding} + !tuiBorderWidth{*tabView\obj\border}
  *tabView\obj\minsize\y + !tuiBorderHeight{*tabView\obj\padding}+ !tuiBorderHeight{*tabView\obj\border}
End Statement
!_MakeGlobalFuncPointer{_ntui_CalculateTabViewMinSize,{Null,Null}}


_ntui_LayoutTabView:
Statement _ntui_LayoutTabView{*tabView.tuiTabView,*rp.RastPort,*bbox.tuiRect}
  !_ASSERT{*tabView}
  !_ASSERT{*tabView\obj\classID=#TUICLASS_TABVIEW}

  *engine.tuiEngine = *tabView\obj\engine
  *obj.tuiObject = *tabView
  If *bbox
    !tuiCopyRect{*obj\bbox,*bbox}
  End If

  *tabView\numTabs = 0
  *child.tuiObject = *tabView\obj\child
  While *child : *tabView\numTabs+1 : *child=*child\next_ : Wend ; count number of children

  !tuiCopyRect{*tabView\tbox,*obj\bbox}   ; tab box
  !tuiCopyRect{*tabView\pbox,*obj\bbox}   ; tab box

  Select *tabView\tabStyle
    Case #TUITABSTYLE_BOTTOM
      *tabView\tbox\top    = *tabView\obj\bbox\bottom - *tabView\tabBarSize\y +1
      *tabView\pbox\bottom = *tabView\tbox\top-1
    Case #TUITABSTYLE_LEFT
      *tabView\tbox\right  = *tabView\obj\bbox\left + *tabView\tabBarSize\x-1
      *tabView\pbox\left   = *tabView\tbox\right+1
    Case #TUITABSTYLE_RIGHT
      *tabView\tbox\left   = *tabView\obj\bbox\right - *tabView\tabBarSize\x+1
      *tabView\pbox\right  = *tabView\tbox\left-1
    Case #TUITABSTYLE_TOP
      *tabView\tbox\bottom = *tabView\obj\bbox\top + *tabView\tabBarSize\y-1
      *tabView\pbox\top    = *tabView\tbox\bottom+1
    Default
  End Select

  !tuiRemBorder{*obj\ibox,*tabView\pbox,*obj\border}
  !tuiRemBorder{*obj\cbox,*obj\ibox,*obj\padding}

  !tuiRemRectOffset{*tabView\tbox,*tabView\tbox,*obj\bbox\left,*obj\bbox\top}
  !tuiRemRectOffset{*tabView\pbox,*tabView\pbox,*obj\bbox\left,*obj\bbox\top}

  *child.tuiObject = *tabView\obj\child
  counter.l = 0
  While *child

    If counter=*tabView\obj\value
      _ntui_Layout{*child,*rp,*obj\cbox}
    Else
      ntui_ClearFlags{*child,#TUIF_ONSCREEN|#TUIF_DIRTY,False}
    End If
    counter+1
    *child = *child\next_
  Wend

End Statement
!_MakeGlobalFuncPointer{_ntui_LayoutTabView,{Null,Null,Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeTabView {*tabView.tuiTabView}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * free everything special that we allocated for the tabView */               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tabView.tuiTabView    : ???                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitTabView:
Statement _ntui_DeinitTabView{*tabView.tuiTabView}
  !_ASSERT{*tabView}
  !_ASSERT{*tabView\obj\classID=#TUICLASS_TABVIEW}

  If *tabView\tabPos  Then FreeVec_ *tabView\tabPos  : *tabView\tabPos =Null
  If *tabView\tabSize Then FreeVec_ *tabView\tabSize : *tabView\tabSize=Null
  !tuiFreeNotifyHandler{*tabView\onSwitch}

End Statement
!_MakeGlobalFuncPointer{_ntui_DeinitTabView,{Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_BeginTabView {active.l,@notify.l,@help.s,@flags.l,@u:: /
;/ serID.l}                                                                    /
;/                                                                             /
;/ Description:                                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - active.l    : ???                                                         /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_BeginTabView:
Function.tuiTabView ntui_BeginTabView{*tagList.TagItem}

  *tabView.tuiTabView = (.tuiTabView)_ntui_CreateObject{#TUICLASS_TABVIEW,SizeOf.tuiTabView,#TUI_NOFLAGS}
  If *tabView
    *tabView\obj\borderType       = #TUIBORDER_TABCONTENT
    *tabView\obj\bgTuiPen         = #TUIPEN_TRANSPARENT
    *tabView\obj\value            = -1

    *tabView\tbox\left            = 0,0,0,0             ; tab box
    *tabView\pbox\left            = 0,0,0,0    ; tab box
    *tabView\tabBarSize\x         = 0,0        ; total width/height of the tab bar
    *tabView\tabPos               = Null       ; position of the tabs
    *tabView\tabSize              = Null       ; size of the tabs
    *tabView\tabBorder\left       = 0,0,0,0
    *tabView\numTabs              = 0
    *tabView\allocTabs            = 0              ; number of allocated tab slots
    *tabView\tabStyle             = #TUITABSTYLE_TOP

    *tabView\obj\Draw             = *_ntui_DrawTabView
    *tabView\obj\Layout           = *_ntui_LayoutTabView
    *tabView\obj\DispatchEvent    = *_ntui_DispatchTabViewEvent
    *tabView\obj\CalculateMinSize = *_ntui_CalculateTabViewMinSize
    *tabView\obj\Deinit           = *_ntui_DeinitTabView
    *tabView\obj\SetAttr          = *_ntui_SetTabViewAttr
    *tabView\obj\GetAttr          = *_ntui_GetTabViewAttr

    !tuiCopyRect{*tabView\tabPadding,*tabView\obj\engine\defPadding}
    !tuiInitNotifyHandler{*tabView\onSwitch}

    If *tagList Then ntui_SetAttrs{*tabView,*tagList}

    _ntui_BeginChildren{*tabView}

  End If

  Function Return *tabView

End Function
!_MakeGlobalFuncPointer{ntui_BeginTabView,{Null}}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_EndTabView {}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * end a group definition */                                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
ntui_EndTabView:
Function.tuiTabView ntui_EndTabView{}

  *tabView.tuiTabView = (.tuiTabView)_ntui_EndChildren{#TUICLASS_TABVIEW}
  If *tabView
    *child.tuiObject = *tabView\obj\child
    While *child
      *child\borderType=#TUIBORDER_NONE
      *child=*child\next_
    Wend
  End If
  Function Return *tabView

End Function
!_MakeGlobalFuncPointer{ntui_EndTabView,{}}


Statement ntui_InitTabViewClass{}

  classID.l = ntui_RegisterClass{"tabview",(.tuiFunc)*ntui_BeginTabView,(.tuiFunc)*ntui_EndTabView}

  ntui_RegisterAttr{classID,"activetab"     ,#TUITVA_ACTIVETAB   ,#TUIAT_INT      , 0,0 }
  ntui_RegisterAttr{classID,"tabstyle"      ,#TUITVA_TABSTYLE    ,#TUIAT_INT      , 0,0 }
  ntui_RegisterAttr{classID,"onswitch"      ,#TUITVA_ONSWITCH    ,#TUIAT_STRING   , 0,0 }
  ntui_RegisterAttr{classID,"onswitchcb"    ,#TUITVA_ONSWITCHCB  ,#TUIAT_PTR      , 0,0 }

  ntui_RegisterValue{classID,"left"         ,#TUITABSTYLE_LEFT}
  ntui_RegisterValue{classID,"right"        ,#TUITABSTYLE_RIGHT}
  ntui_RegisterValue{classID,"top"          ,#TUITABSTYLE_TOP}
  ntui_RegisterValue{classID,"bottom"       ,#TUITABSTYLE_BOTTOM}
  ntui_RegisterValue{classID,"notab"        ,#TUITABSTYLE_NONE}

End Statement

ntui_InitTabViewClass{}
