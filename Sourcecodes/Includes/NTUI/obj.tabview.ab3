; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 3
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 270
; CursorColumn    = 54
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_tab.include                                                     /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#TUI_HAS_TABVIEW = 1

CNIF #__include=0
optimize 7
Syntax 2
CEND

#TUITABSTYLE_TOP    = 0 ; top tabs
#TUITABSTYLE_BOTTOM = 1 ; bottom tabs
#TUITABSTYLE_LEFT   = 2 ; left tabs
#TUITABSTYLE_RIGHT  = 3 ; left tabs
#TUITABSTYLE_NONE   = 4 ; no tabs

#TUITVA_BASE      = #TUIA_USER
#TUITVA_ACTIVETAB = #TUIA_VALUE
#TUITVA_TABSTYLE  = #TUITVA_BASE   + 0

NEWTYPE.tuiTabView
obj.tuiObject            ; tui object header
tabbing.l                ; horizontal or vertical
tbox.tuiRect             ; tab box
pbox.tuiRect             ; tab box
tabBarSize.tuiPixel      ; total width/height of the tab bar
*tabPos.tuiPixel         ; position of the tabs
*tabSize.tuiPixel        ; size of the tabs
tabPadding.tuiRect
tabBorder.tuiRect
numTabs.l
allocTabs.l              ; number of allocated tab slots
tabStyle.l
*onSwitch.str
End NEWTYPE

USEPATH *tuiTabView

_ntui_SetTabViewAttr:
Function.w _ntui_SetTabViewAttr{*tuiTabView.tuiTabView,ti_Tag.l,ti_Data.l}
done.w = True
Select ti_Tag
  Case #TUITVA_ACTIVETAB
    If (ti_Data><*tuiTabView\obj\value)
      *tuiTabView\obj\value = ti_Data
      ntui_SendEvent{*tuiTabView,#TUIEV_LAYOUT}
      ;!tuiAddRectOffset{tbox.tuiRect,*tuiTabView\tbox,*tuiTabView\obj\bbox\left,*tuiTabView\obj\bbox\top}
      ntui_Refresh{*tuiTabView,#NULL}
      If (*tuiTabView\onSwitch) Then ntui_PostNotify{*tuiTabView,str_Read{&*tuiTabView\onSwitch},*tuiTabView\obj\value}
    End If

  Case #TUITVA_TABSTYLE
    *tuiTabView\tabStyle = ti_Data
    ntui_SendEvent{*tuiTabView,#TUIEV_LAYOUT}
    ntui_Refresh{*tuiTabView,#NULL}

  Default
    done=False
End Select
Function Return done
End Function


_ntui_GetTabViewAttr:
Function.w _ntui_GetTabViewAttr{*tuiTabView.tuiTabView,ti_Tag.l,*ti_Data.longP}
done.w = True
Select ti_Tag
  Case #TUITVA_ACTIVETAB
    *ti_Data\l = *tuiTabView\obj\value

  Case #TUITVA_TABSTYLE
    *ti_Data\l = *tuiTabView\tabStyle

  Default
    done=False
End Select
Function Return done
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = _ntui_DispatchTabView {*tuiTabView.tuiTabView,*tuiEvent.tuiEvent}   /
;/                                                                             /
;/ Description:                                                                /
;/ obj.tuiObject            ; tui object header                                /
;/ tabbing.l                ; horizontal or vertical                           /
;/ tabBarSize.tuiPixel      ; total height of the tab bar                      /
;/ *tabPos.tuiPixel         ; position of the tabs                             /
;/ *tabSize.tuiPixel        ; size of the tabs                                 /
;/ allocTabs.l              ; number of allocated tab slots                    /
;/ padNW.tuiPixel           ; inner padding                                    /
;/ * do what happens if the user operates the button */                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiTabView.tuiTabView    : ???                                                 /
;/ - *tuiEvent.tuiEvent    : ???                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DispatchTabViewEvent:
Function.w _ntui_DispatchTabViewEvent{*tuiTabView.tuiTabView,*tuiEvent.tuiEvent}

  done.w = False
  Select *tuiEvent\evID
    Case #TUIEV_LOSEFOCUS
      !tuiAddRectOffset{tbox.tuiRect,*tuiTabView\tbox,*tuiTabView\obj\bbox\left,*tuiTabView\obj\bbox\top}
      ntui_Refresh{*tuiTabView,tbox}
      done=True

    Case #TUIEV_FOCUS
      !tuiAddRectOffset{tbox.tuiRect,*tuiTabView\tbox,*tuiTabView\obj\bbox\left,*tuiTabView\obj\bbox\top}
      ntui_Refresh{*tuiTabView,tbox}
      done=True

    Case #TUIEV_MOUSEDOWN
      If *tuiEvent\value = 0 ; we want button 0
        mx.l = *tuiEvent\pos\x - *tuiTabView\obj\bbox\left
        my.l = *tuiEvent\pos\y - *tuiTabView\obj\bbox\top
        *child.tuiObject = *tuiTabView\obj\child
        n.l = 0
        newvalue.l=-1
        While *child
          If ((*child\flags&#TUIF_DISABLED)=0)
            *pos.tuiPixel  = \tabPos  + SizeOf.tuiPixel * n
            *size.tuiPixel = \tabSize + SizeOf.tuiPixel * n
            If (mx>=*pos\x) AND (mx<*pos\x+*size\x) AND (my>=*pos\y) AND (my<*pos\y+*size\y) Then newvalue=n : *child=#NULL
          End If
          If *child Then *child=*child\next_
          n+1
        Wend
        If newvalue>=0
          *tuiTabView\obj\flags | #TUIF_ACTIVE
          ntui_SetFocus{*tuiTabView}
          _ntui_SetTabViewAttr{*tuiTabView,#TUIA_VALUE,newvalue}
          done = True
        End If
      End If

    Case #TUIEV_MOUSEUP
      If *tuiEvent\value = 0 ; we want button 0
        If *tuiTabView\obj\flags&#TUIF_ACTIVE
          done    = True
          *tuiTabView\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
        End If
      End If

    Case #TUIEV_KEYDOWN
      Select ntui_GetEventAttr{*tuiEvent,#TUIEVA_VANILLAKEY}
        Case 13 ; return
          ntui_SetFocus{*tuiTabView}
          done      = True
          *tuiTabView\obj\flags | #TUIF_ACTIVE
          newvalue = *tuiTabView\obj\value+1
          numChildren.l=0
          *child.tuiObject = *tuiTabView\obj\child
          While *child : numChildren+1 : *child=*child\next_ : Wend ; count number of children
          If newvalue>=numChildren Then newvalue=0
          _ntui_SetTabViewAttr{*tuiTabView,#TUIA_VALUE,newvalue}
      End Select

    Case #TUIEV_KEYUP
        If *tuiTabView\obj\flags&#TUIF_ACTIVE
           done    = True
           *tuiTabView\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
        End If

    Case #TUIEV_BIND_VALUE
      *tuiTabView\obj\value = *tuiEvent\value
      ntui_SendEvent{*tuiTabView,#TUIEV_LAYOUT}
      ntui_Refresh{*tuiTabView,#NULL}
      done=True

    Case #TUIEV_BIND_DELTA
      *tuiTabView\obj\value + *tuiEvent\value
      ntui_SendEvent{*tuiTabView,#TUIEV_LAYOUT}
      ntui_Refresh{*tuiTabView,#NULL}
      done=True

    Case #TUIEV_PROPAGATE
      _ntui_PropagateBind{*tuiTabView,#TUIEV_BIND_MINVALUE  ,0   ,#NULL}
      _ntui_PropagateBind{*tuiTabView,#TUIEV_BIND_MAXVALUE  ,*tuiTabView\numTabs  ,#NULL}
      _ntui_PropagateBind{*tuiTabView,#TUIEV_BIND_VALUE     ,*tuiTabView\obj\value,#NULL}
      done=True

    Default
      Function Return False
  End Select

  If done
    If (*tuiEvent\notifyID)
      *tuiEvent\tuiObject = *tuiTabView
      _ntui_QueueEvent{*tuiTabView\obj\tuiEngine\outQ,*tuiEvent}
    Else
      _ntui_DestroyEvent{*tuiEvent}
    End If
  End If

Function Return done
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawTabView {*tuiTabView.tuiTabView,*rp.RastPort}                       /
;/                                                                             /
;/ Description:                                                                /
;/       ;case hotkey                                                          /
;/ * draw the button in all its beauty */                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiTabView.tuiTabView    : ???                                                 /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawTabView:
Statement _ntui_DrawTabView{*tuiTabView.tuiTabView,*rp.RastPort,*rpclip.tuiRect}

  !_ASSERT{*tuiTabView}
  !_ASSERT{*tuiTabView\obj\classID=#TUICLASS_TABVIEW}
  !_ASSERT{*rp}
  *tui.tuiObject = *tuiTabView\obj
  *tuiEngine.tuiEngine = *tui\tuiEngine
  !_ASSERT{*tuiEngine}
  If ((*tui\flags&#TUIF_ONSCREEN)=0) Then Statement Return

  !tuiAndRect{bclip.tuiRect,*tui\bbox,*rpclip}
  If !tuiValidRect{bclip}=False Then Statement Return
  !tuiAndRect{iclip.tuiRect,*tui\ibox,*rpclip}
  !tuiAndRect{cclip.tuiRect,*tui\cbox,*rpclip}

  !tuiAddRectOffset{pbox.tuiRect,*tuiTabView\pbox,*tui\bbox\left,*tui\bbox\top}
  bgDone.l = ntui_DrawBorder{*tuiEngine,*rp,pbox,\obj\borderType,*tuiTabView\obj\flags} ; draw the TabView border

  If !tuiRectOverlap{*tui\ibox,*rpclip}
    If *tuiTabView\obj\bgTuiPen>=0 AND bgDone=False ; background color, if any
      !tuiAndRect{iclip.tuiRect,*tui\ibox,*rpclip}
      SetAPen_ *rp,*tuiEngine\pen[*tuiTabView\obj\bgTuiPen]
      RectFill_ *rp,iclip\left,iclip\top,iclip\right,iclip\bottom
    EndIf
  End If

  If \numTabs<=0 OR \obj\value<0 OR \obj\value>=\numTabs; empty tab
    !tuiRemBorder{ebox.tuiRect,*tuiTabView\obj\cbox,*tuiEngine\defMargin}
    If !tuiRectOverlap{ebox,*rpclip}
      _ntui_DrawEmptyBox{*tuiEngine,*rp,ebox,#TUIPEN_SHADOW}
    End If
  End If

  If (\tabStyle=#TUITABSTYLE_NONE) Then Goto _ntui_skiptabs

  If !tuiRectInside{*rpclip,*tui\cbox}=False ; not only content area

    addFlags.l = \obj\flags & (#TUIF_BOLD|#TUIF_SMALL|#TUIF_NORMAL|#TUIF_FIX|#TUIF_ITALIC|#TUIF_SERIF|#TUIF_UNDERLINED)
    ;tuifont.l = _ntui_SetFont{*tuiEngine,*tuiTabView\obj\flags}

    If \allocTabs<\numTabs                                   ; (re)allocate tab array
      If \tabPos Then FreeVec_ \tabPos : \tabPos = #NULL
      \tabPos = AllocVec_ (\numTabs*SizeOf.tuiPixel,#MEMF_ANY)

      If \tabSize Then FreeVec_ \tabSize : \tabSize = #NULL
      \tabSize = AllocVec_ (\numTabs*SizeOf.tuiPixel,#MEMF_ANY)
      \allocTabs = \numTabs
    End If

    xall.l  = 0 ; calculate the tab sizes
    xkeep.l = 0
    xrest.l = 0
    xmax.l  = 1
    *child.tuiObject = \obj\child
    For n.l = 0 To \numTabs-1
      xs.l =  _ntui_GetTextWidth{*tuiEngine,*child\string,addFlags,*rp} + \tabPadding\left+\tabPadding\right+\tabBorder\left+\tabBorder\right
      If *child\classID=#TUICLASS_GROUP    ; get the image, if any
        *tuiGroup.tuiGroup = *child
        If *tuiGroup\tbi Then xs + ntui_GetTBImageWidth{*tuiGroup\tbi} + \tabPadding\right
      End If
      *size.tuiPixel = \tabSize+(n*SizeOf.tuiPixel)
      If ((\tabStyle=#TUITABSTYLE_TOP) OR (\tabStyle=#TUITABSTYLE_BOTTOM))
        *size\x = xs,\tabBarSize\y
        If n=\obj\value
          xkeep.l = xs
        Else
          xall.l + xs
        End If
      End If
      If (\tabStyle=#TUITABSTYLE_LEFT) OR (\tabStyle=#TUITABSTYLE_RIGHT)
        *size\x = \tabBarSize\x,\tabBarSize\y;*tuiEngine\font[tuifont]\tf_YSize +\tabBorder\top+\tabBorder\bottom + \tabPadding\top+\tabPadding\bottom
      End If

      If xs>xmax Then xmax=xs
      *child = *child\next_
    Next

    _ntui_GetBorderSize{*tuiEngine,#TUIBORDER_TABVIEWEND  ,\obj\flags,peb.tuiRect}
    _ntui_GetBorderSize{*tuiEngine,#TUIBORDER_TABVIEWBEGIN,\obj\flags,pbb.tuiRect}

    tabwidth.l = !tuiRectWidth{\tbox} - peb\left-peb\right   - pbb\left-pbb\right
    If \numTabs>1
      xrest.l = (tabwidth - xkeep) / (\numTabs-1)
      If xmax<xrest Then xrest=xmax
    End If

    If xrest>xkeep
      xkeep=xrest
      If \numTabs>1
        xrest.l = (tabwidth -xkeep) / (\numTabs-1)
        If xmax<xrest Then xrest=xmax
      End If
    End If

    x.l = \tbox\left +*tui\bbox\left
    y.l = \tbox\top  +*tui\bbox\top
    If ((\tabStyle=#TUITABSTYLE_TOP)  OR (\tabStyle=#TUITABSTYLE_BOTTOM)) Then x = x + pbb\left  +pbb\right
    If ((\tabStyle=#TUITABSTYLE_LEFT) OR (\tabStyle=#TUITABSTYLE_RIGHT )) Then y = y + pbb\top   +pbb\bottom

    bx.l = x
    by.l = y

    For n.l=0 To \numTabs-1
      *pos.tuiPixel  = \tabPos+n*SizeOf.tuiPixel
      *size.tuiPixel = \tabSize+n*SizeOf.tuiPixel

      *pos\x  = x,y
      If ((\tabStyle=#TUITABSTYLE_TOP) OR (\tabStyle=#TUITABSTYLE_BOTTOM))
        If n=\obj\value
          *size\x = xkeep
        Else
          *size\x = xrest
        End If
        x + *size\x
      End If
      If (\tabStyle=#TUITABSTYLE_LEFT) OR (\tabStyle=#TUITABSTYLE_RIGHT)
        y + *size\y
      End If
    Next


    ex.l = x
    ey.l = y
    *child.tuiObject = \obj\child
    For n.l = 0 To \numTabs-1
      *pos.tuiPixel  = \tabPos  + SizeOf.tuiPixel*n
      *size.tuiPixel = \tabSize + SizeOf.tuiPixel*n
      tbox.tuiRect\left = *pos\x, *pos\y, *pos\x+*size\x-1, *pos\y+*size\y-1
      bflags.l = *tuiTabView\obj\flags
      If n=\obj\value
        flags.l = #TUIF_CENTER|#TUIF_MIDDLE;| #TUIF_BOLD
        bflags.l | #TUIF_ACTIVE
        flags | addFlags
        fgpen.l = #TUIPEN_ACTIVETEXT
        bgpen.l = #TUIPEN_MARKER
      Else
        flags.l = #TUIF_CENTER|#TUIF_MIDDLE
        bflags | #TUIF_ACTIVE - #TUIF_ACTIVE
        flags | addFlags
        fgpen.l = #TUIPEN_TEXT
        bgpen.l = #TUIPEN_HALFSHINE
      End If
      bgDone.l = ntui_DrawBorder{*tuiEngine,*rp,tbox,#TUIBORDER_TAB,bflags}
      ex = tbox\right+1
      ey = tbox\bottom+1

      !tuiRemBorder{tbox,tbox,\tabBorder}
      !tuiRemBorder{tcbox.tuiRect,tbox,\tabPadding}
      If bgDone Then bgpen=#TUIPEN_TRANSPARENT

      If *child\classID=#TUICLASS_GROUP
        *tuiGroup.tuiGroup = *child
        If *tuiGroup\tbi
          xs = ntui_GetTBImageWidth{*tuiGroup\tbi} ;+ \tabPadding\right
          pbox.tuiRect\left  = tbox\left,tbox\top,tcbox\left+xs-1,tbox\bottom
          pcbox.tuiRect\left = tcbox\left,tcbox\top,tcbox\left+xs-1,tcbox\bottom
          ntui_DrawTBImage{*tuiGroup\tbi,*rp,pbox,pcbox,(*child\flags&#TUIF_DISABLED),bgpen}

          tcbox\left+xs
          tbox\left = tcbox\left
        End If
      End If

      _ntui_Print{*tuiEngine,*child\string,tbox,tcbox,(*child\flags&#TUIF_DISABLED)|flags,*rp,fgpen,bgpen}
      *child = *child\next_
    Next

    If (\tabStyle=#TUITABSTYLE_TOP) OR (\tabStyle=#TUITABSTYLE_BOTTOM)
      If ex<=\tbox\right+*tui\bbox\left
        !tuiAddRectOffset{xbox.tuiRect, *tuiTabView\tbox,*tui\bbox\left,*tui\bbox\top}
        xbox\left = ex
        ntui_DrawBorder{*tuiEngine,*rp,xbox,#TUIBORDER_TABVIEWEND,*tuiTabView\obj\flags}
      End If
      !tuiAddRectOffset{xbox.tuiRect, *tuiTabView\tbox,*tui\bbox\left,*tui\bbox\top}
      xbox\right = bx-1
      ntui_DrawBorder{*tuiEngine,*rp,xbox,#TUIBORDER_TABVIEWBEGIN,*tuiTabView\obj\flags}
    End If

    If (\tabStyle=#TUITABSTYLE_LEFT) OR (\tabStyle=#TUITABSTYLE_RIGHT)
      If ey<=\tbox\bottom +*tui\bbox\top
        !tuiAddRectOffset{xbox.tuiRect, *tuiTabView\tbox,*tui\bbox\left,*tui\bbox\top}
        xbox\top = ey
        ntui_DrawBorder{*tuiEngine,*rp,xbox,#TUIBORDER_TABVIEWEND,*tuiTabView\obj\flags}
      End If
      !tuiAddRectOffset{xbox.tuiRect, *tuiTabView\tbox,*tui\bbox\left,*tui\bbox\top}
      xbox\bottom = by-1
      ntui_DrawBorder{*tuiEngine,*rp,xbox,#TUIBORDER_TABVIEWBEGIN,*tuiTabView\obj\flags}
    End If

    For n.l=0 To \numTabs-1
      *pos.tuiPixel  = \tabPos+n*SizeOf.tuiPixel
      *pos\x - *tui\bbox\left
      *pos\y - *tui\bbox\top
    Next

  End If

  _ntui_skiptabs:
  If !tuiValidRect{cclip}
    *child.tuiObject = *tui\child
    For n.l = 0 To \numTabs-1
      If n=\obj\value
        _ntui_Draw{*child,*rp,cclip}
      End If
      *child = *child\next_
    Next
  End If

End Statement


_ntui_CalculateTabViewMinSize:
Function.l _ntui_CalculateTabViewMinSize{*tuiTabView.tuiTabView,*rp.RastPort}
  *tuiEngine.tuiEngine = *tuiTabView\obj\tuiEngine

  tuifont.l = _ntui_SetFont{*tuiEngine,*tuiTabView\obj\flags}
  *tuiTabView\tabStyle = #TUITABSTYLE_NONE
  If (*tuiTabView\obj\flags&#TUIF_BOTTOM) Then *tuiTabView\tabStyle = #TUITABSTYLE_BOTTOM
  If (*tuiTabView\obj\flags&#TUIF_LEFT)   Then *tuiTabView\tabStyle = #TUITABSTYLE_LEFT
  If (*tuiTabView\obj\flags&#TUIF_TOP)    Then *tuiTabView\tabStyle = #TUITABSTYLE_TOP
  If (*tuiTabView\obj\flags&#TUIF_RIGHT)  Then *tuiTabView\tabStyle = #TUITABSTYLE_RIGHT
  _ntui_GetBorderSize{*tuiEngine,#TUIBORDER_TAB,*tuiTabView\obj\flags,*tuiTabView\tabBorder}
  _ntui_GetBorderSize{*tuiEngine,*tuiTabView\obj\borderType,*tuiTabView\obj\flags,*tuiTabView\obj\border}

  *tuiTabView\tabBarSize\x = 0
  *tuiTabView\tabBarSize\y = 0

  *child.tuiObject = *tuiTabView\obj\child
  While *child

    minTabWidth.l  = 0
    minTabHeight.l = 0
    If *child\classID=#TUICLASS_GROUP
      *tuiGroup.tuiGroup = *child
      If *tuiGroup\tbi
        minTabWidth  = ntui_GetTBImageWidth{*tuiGroup\tbi}
        minTabHeight = ntui_GetTBImageHeight{*tuiGroup\tbi} - !tuiBorderHeight{*tuiTabView\tabPadding}
      End If
    End If

    If *child\string
      _ntui_GetTextRect{*tuiEngine,*child\string,tx.tuiRect,*tuiTabView\obj\flags,*rp}
      minTabWidth  + !tuiRectWidth{tx}
      If !tuiRectHeight{tx}>minTabHeight Then minTabHeight = !tuiRectHeight{tx}
    End If
    If minTabWidth >*tuiTabView\tabBarSize\x Then *tuiTabView\tabBarSize\x = minTabWidth
    If minTabHeight>*tuiTabView\tabBarSize\y Then *tuiTabView\tabBarSize\y = minTabHeight

    *minsize.tuiPixel = _ntui_CalculateMinSize{*child,*rp}
    tmx.l = *child\minsize\x  + *child\margin\left + *child\margin\right
    tmy.l = *child\minsize\y  + *child\margin\top  + *child\margin\bottom

    If *tuiTabView\obj\minsize\x<tmx Then *tuiTabView\obj\minsize\x=tmx
    If *tuiTabView\obj\minsize\y<tmy Then *tuiTabView\obj\minsize\y=tmy
    ;If *tuiTabView\obj\minsize\x<*minsize\x Then *tuiTabView\obj\minsize\x=*minsize\x
    ;If *tuiTabView\obj\minsize\y<*minsize\y Then *tuiTabView\obj\minsize\y=*minsize\y
    *child=*child\next_
  Wend

  Select *tuiTabView\tabStyle
    Case #TUITABSTYLE_BOTTOM
      *tuiTabView\tabBarSize\y + !tuiBorderHeight{*tuiTabView\tabPadding} + !tuiBorderHeight{*tuiTabView\tabBorder}
      *tuiTabView\tabBarSize\x + !tuiBorderWidth{*tuiTabView\tabPadding} + !tuiBorderWidth{*tuiTabView\tabBorder}
    Case #TUITABSTYLE_TOP
      *tuiTabView\tabBarSize\y + !tuiBorderHeight{*tuiTabView\tabPadding} + !tuiBorderHeight{*tuiTabView\tabBorder}
      *tuiTabView\tabBarSize\x + !tuiBorderWidth{*tuiTabView\tabPadding} + !tuiBorderWidth{*tuiTabView\tabBorder}
    Case #TUITABSTYLE_LEFT
      *tuiTabView\tabBarSize\y + !tuiBorderHeight{*tuiTabView\tabPadding} + !tuiBorderHeight{*tuiTabView\tabBorder}
      *tuiTabView\tabBarSize\x + !tuiBorderWidth{*tuiTabView\tabPadding} + !tuiBorderWidth{*tuiTabView\tabBorder}
    Case #TUITABSTYLE_RIGHT
      *tuiTabView\tabBarSize\y + !tuiBorderHeight{*tuiTabView\tabPadding} + !tuiBorderHeight{*tuiTabView\tabBorder}
      *tuiTabView\tabBarSize\x + !tuiBorderWidth{*tuiTabView\tabPadding} + !tuiBorderWidth{*tuiTabView\tabBorder}
    Default
      *tuiTabView\tabBarSize\x = 0,0
  End Select

  *tuiTabView\obj\minsize\x + *tuiTabView\tabBarSize\x + !tuiBorderWidth{*tuiTabView\obj\padding} + !tuiBorderWidth{*tuiTabView\obj\border}
  *tuiTabView\obj\minsize\y + *tuiTabView\tabBarSize\y + !tuiBorderHeight{*tuiTabView\obj\padding}+ !tuiBorderHeight{*tuiTabView\obj\border}
  Function Return *tuiTabView\obj\minsize
End Function


_ntui_LayoutTabView:
Statement _ntui_LayoutTabView{*tuiTabView.tuiTabView,*rp.RastPort,*bbox.tuiRect}

  *tuiEngine.tuiEngine = *tuiTabView\obj\tuiEngine
  *tui.tuiObject = *tuiTabView
  If *bbox
    !tuiCopyRect{*tui\bbox,*bbox}
  End If

  \numTabs = 0
  *child.tuiObject = *tuiTabView\obj\child
  While *child : \numTabs+1 : *child=*child\next_ : Wend ; count number of children

  !tuiCopyRect{\tbox,*tui\bbox}   ; tab box
  !tuiCopyRect{\pbox,*tui\bbox}   ; tab box

  Select *tuiTabView\tabStyle
    Case #TUITABSTYLE_BOTTOM
      \tbox\top    = \obj\bbox\bottom - \tabBarSize\y +1
      \pbox\bottom = \tbox\top-1
    Case #TUITABSTYLE_LEFT
      \tbox\right  = \obj\bbox\left + \tabBarSize\x-1
      \pbox\left   = \tbox\right+1
    Case #TUITABSTYLE_RIGHT
      \tbox\left   = \obj\bbox\right - \tabBarSize\x+1
      \pbox\right  = \tbox\left-1
    Case #TUITABSTYLE_TOP
      \tbox\bottom = \obj\bbox\top + \tabBarSize\y-1
      \pbox\top    = \tbox\bottom+1
    Default
  End Select

  !tuiRemBorder{*tui\ibox,*tuiTabView\pbox,*tui\border}
  !tuiRemBorder{*tui\cbox,*tui\ibox,*tui\padding}

  !tuiRemRectOffset{*tuiTabView\tbox,*tuiTabView\tbox,*tui\bbox\left,*tui\bbox\top}
  !tuiRemRectOffset{*tuiTabView\pbox,*tuiTabView\pbox,*tui\bbox\left,*tui\bbox\top}

  *child.tuiObject = *tuiTabView\obj\child
  counter.l = 0
  While *child

    If counter=*tuiTabView\obj\value
      _ntui_Layout{*child,*rp,*tui\cbox}
    Else
      ntui_ClearFlags{#TUIF_ONSCREEN|#TUIF_DIRTY,False,*child}
    End If
    counter+1
    *child = *child\next_
  Wend

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeTabView {*tuiTabView.tuiTabView}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * free everything special that we allocated for the button */               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiTabView.tuiTabView    : ???                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitTabView:
Statement _ntui_DeinitTabView{*tuiTabView.tuiTabView}
If *tuiTabView\tabPos  Then FreeVec_ *tuiTabView\tabPos  : *tuiTabView\tabPos =#NULL
If *tuiTabView\tabSize Then FreeVec_ *tuiTabView\tabSize : *tuiTabView\tabSize=#NULL
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_BeginTabView {active.l,@notify.l,@help.s,@flags.l,@u:: /
;/ serID.l}                                                                    /
;/                                                                             /
;/ Description:                                                                /
;/   ;*bs.tuiBorderSize = ntui_GetBorderSize{*tuiEngine,#TUIBORDER_RAISED}     /
;/  *bs.tuiBorderSize = ntui_GetBorderSize{*tuiEngine,#TUIBORDER_RAISED}       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - active.l    : ???                                                         /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - userID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_BeginTabView{initialTabView.l,@help.s,@flags.l,@nameID.s}
If (flags=#TUI_NOFLAGS)
  flags = #TUIF_TOP
End If
flags|#TUIF_FIXSIZE
*tuiTabView.tuiTabView = _ntui_CreateObject{#TUICLASS_TABVIEW,SizeOf.tuiTabView,help,flags,nameID}
If *tuiTabView
  *tuiTabView\obj\borderType         = #TUIBORDER_TABCONTENT
  *tuiTabView\obj\bgTuiPen           = #TUIPEN_TRANSPARENT;HALFHALFSHINE;TRANSPARENT
  *tuiTabView\obj\value              = initialTabView

  !tuiCopyRect{*tuiTabView\tabPadding,*tuiTabView\obj\tuiEngine\defPadding}

  !_GetFuncPointer{*tuiTabView\obj\Draw            ,_ntui_DrawTabView,{0,0,0}}
  !_GetFuncPointer{*tuiTabView\obj\Layout          ,_ntui_LayoutTabView,{0,0,0}}
  !_GetFuncPointer{*tuiTabView\obj\DispatchEvent   ,_ntui_DispatchTabViewEvent,{0,0}}
  !_GetFuncPointer{*tuiTabView\obj\CalculateMinSize,_ntui_CalculateTabViewMinSize,{0,0}}
  !_GetFuncPointer{*tuiTabView\obj\Deinit          ,_ntui_DeinitTabView,{0}}
  !_GetFuncPointer{*tuiTabView\obj\SetAttr         ,_ntui_SetTabViewAttr,{0,0,0}}
  !_GetFuncPointer{*tuiTabView\obj\GetAttr         ,_ntui_GetTabViewAttr,{0,0,0}}

  tuiGlobal\buildHelper\tuiParent = *tuiTabView
  tuiGlobal\buildHelper\tuiPrev   = #NULL
End If
Function Return *tuiTabView
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_EndTabView {}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * end a group definition */                                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_EndTabView{}
tuiGlobal\buildHelper\tuiPrev     = tuiGlobal\buildHelper\tuiParent
tuiGlobal\buildHelper\tuiCurrent  = tuiGlobal\buildHelper\tuiParent
If tuiGlobal\buildHelper\tuiParent Then tuiGlobal\buildHelper\tuiParent = tuiGlobal\buildHelper\tuiParent\parent

*child.tuiObject = tuiGlobal\buildHelper\tuiCurrent\child
While *child
  *child\borderType=#TUIBORDER_NONE
  *child=*child\next_
Wend
Function Return tuiGlobal\buildHelper\tuiCurrent
End Function



