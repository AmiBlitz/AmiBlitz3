; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; FuncOptimize    = 0
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 297
; CursorColumn    = 66
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
#TUI_HAS_CYCLE = 1

#TUICYA_BASE      = #TUIA_USER
#TUICYA_SELECTED  = #TUIA_VALUE
#TUICYA_OPTIONS   = #TUICYA_BASE + 0
#TUICYA_ONCHANGE  = #TUICYA_BASE + 1

NEWTYPE.tuiCycle

  obj.tuiObject            ; tui object header
  state.l
  *optionS.str
  *tbi.tuiTBImage
  *optionW.Window
  optionHeight.l
  numOptions.l
  lastOption.l
  tmpOption.l
  onChange.tuiNotifyHandler

End NEWTYPE


Function.s ntui_GetCycleOption{*cycle_.tuiCycle,option.l}
If option<0 OR option>=*cycle_\numOptions Then Function Return ""
res.s = ""
If *cycle_\optionS
  ptr.l = &*cycle_\optionS\str
  While Peek.b(ptr)><0 AND option>=0
    If Peek.b(ptr)=@"|"
      option-1
    Else
      If option=0 Then res + Chr$(Peek.b(ptr))
    End If
    ptr+1
  Wend
End If
Function Return res
End Function


Statement _ntui_CloseCycleOptions{*cycle_.tuiCycle}
  If *cycle_\optionW
    Forbid_
    *msg.IntuiMessage = (.IntuiMessage)*cycle_\optionW\UserPort\mp_MsgList\lh_Head
    While (*msg\ExecMessage\mn_Node\ln_Succ)
      *succ.Node = *msg\ExecMessage\mn_Node\ln_Succ
      If( *msg\IDCMPWindow=*cycle_\optionW)
        Remove_ *msg : ReplyMsg_ *msg
      End If
      *msg = (.IntuiMessage)*succ
    Wend
    *cycle_\optionW\UserPort = Null
    ModifyIDCMP_ *cycle_\optionW,0
    Permit_
    CloseWindow_ *cycle_\optionW
    *cycle_\optionW = Null
  End If
End Statement


Statement _ntui_OpenCycleOptions{*cycle_.tuiCycle}
If *cycle_\optionW=Null
  *win.tuiWindow = ntui_GetWindow{*cycle_}
  *engine.tuiEngine = *cycle_\obj\engine
  If *win
    DEFTYPE.NewWindow nw
    _ntui_GetBorderSize{*engine,#TUIBORDER_FLAT,0,bs.tuiRect}

   If *cycle_\tbi
     iw.l = ntui_GetTBImageWidth{*cycle_\tbi}
     px.l = iw+*cycle_\obj\padding\left+*cycle_\obj\padding\right + 2-1
   Else
     px.l = 0
   End If
    *cycle_\tmpOption = *cycle_\obj\value

    nw\LeftEdge    = px +*cycle_\obj\cbox\left + *win\oswin\LeftEdge  - bs\left
    ; below:
    ;nw\TopEdge     = *cycle_\obj\pos\y+*cycle_\obj\size\y + *win\win\TopEdge + 1
    option.l = *cycle_\obj\value
    If option<-1 OR option>=*cycle_\numOptions Then option=-1

    nw\TopEdge     = *cycle_\obj\cbox\top-(*cycle_\optionHeight * option) + *win\oswin\TopEdge - bs\top ;+ *cycle_\obj\padding\top

    nw\Width       = !tuiRectWidth{*cycle_\obj\cbox} - px + bs\left + bs\right
    nw\Height      = *cycle_\optionHeight * *cycle_\numOptions + bs\top+bs\bottom
    nw\DetailPen   = -1 ; use intuitions default
    nw\BlockPen    = -1
    nw\IDCMPFlags  = 0
    IDCMPFlags.l   = #IDCMP_REFRESHWINDOW|#IDCMP_MOUSEBUTTONS|#IDCMP_MOUSEMOVE|#IDCMP_INTUITICKS|#IDCMP_MENUVERIFY|#IDCMP_RAWKEY
    nw\Flags       = #WFLG_BORDERLESS|#WFLG_SIMPLE_REFRESH|#WFLG_NOCAREREFRESH
    nw\FirstGadget = Null
    nw\CheckMark   = Null
    nw\Title       = Null
    nw\Screen      = *engine\screen_
    nw\BitMap      = Null
    nw\MinWidth    = 0
    nw\MinHeight   = 0
    nw\MaxWidth    = 0
    nw\MaxHeight   = 0
    nw\Type        = #CUSTOMSCREEN
    DEFTYPE.tag5 wtags
    wtags\ti_Tag =#WA_AutoAdjust,1,#WA_BackFill,Null,#TAG_DONE,0
    *cycle_\optionW = OpenWindowTagList_(nw,wtags)
    If *cycle_\optionW
      *cycle_\optionW\UserData = *win
      *cycle_\optionW\UserPort = *engine\winPort
      ModifyIDCMP_ *cycle_\optionW,IDCMPFlags
    End If
  End If
End If
End Statement


Statement _ntui_UpdateCycleString{*cycle_.tuiCycle,option.l,bind.l}
  *cycle_\obj\value = option
  text.s = ntui_GetCycleOption{*cycle_,*cycle_\obj\value}
  str_Write{&*cycle_\obj\string,text}
  If bind
    _ntui_PropagateBind{*cycle_,#TUIEV_BIND_VALUE,*cycle_\obj\value,Null}
    _ntui_PropagateBind{*cycle_,#TUIEV_BIND_STRING,0,*cycle_\obj\string}
  End If
End Statement


_ntui_SetCycleAttr:
Function.l _ntui_SetCycleAttr{*cycle_.tuiCycle,ti_Tag.l,ti_Data.l}
  !_ASSERT{*cycle_}
  !_ASSERT{*cycle_\obj\classID=#TUICLASS_CYCLE}

  done.l = True
  Select ti_Tag
    Case #TUICYA_OPTIONS
      _ntui_CloseCycleOptions{*cycle_}
      str_WritePtr{&*cycle_\optionS,ti_Data}

      If *cycle_\optionS
        *cycle_\numOptions=1
        ptr.l = &*cycle_\optionS\str
        While Peek.b(ptr)><0
          If Peek.b(ptr)=@"|" Then *cycle_\numOptions+1
          ptr+1
        Wend
      Else
        *cycle_\numOptions=0
      End If
      _ntui_UpdateCycleString{*cycle_,ti_Data,False}
      ntui_Refresh{*cycle_,Null}

    Case #TUICYA_SELECTED
      If *cycle_\obj\value><ti_Data
        _ntui_UpdateCycleString{*cycle_,ti_Data,True}
        ntui_Refresh{*cycle_,Null}
      End If

    Case #TUICYA_ONCHANGE  : str_WritePtr{&*cycle_\onChange\notifyID ,ti_Data}

    Default
      done = False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_SetCycleAttr,{Null,0,0}}


_ntui_GetCycleAttr:
Function.l _ntui_GetCycleAttr{*cycle_.tuiCycle,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*cycle_}
  !_ASSERT{*cycle_\obj\classID=#TUICLASS_CYCLE}

  done.l = True
  Select ti_Tag
    Case #TUICYA_SELECTED     : *ti_Data\l = *cycle_\obj\value
    Case #TUICYA_OPTIONS      : *ti_Data\l = str_GetPtr{*cycle_\optionS}
    Case #TUICYA_ONCHANGE     : *ti_Data\l = str_GetPtr{*cycle_\onChange\notifyID}
    Default
      done = False

  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_GetCycleAttr,{Null,0,Null}}


_ntui_DispatchCycleEvent:
Function.l _ntui_DispatchCycleEvent{*cycle_.tuiCycle,*ev.tuiEvent}
  !_ASSERT{*cycle_}
  !_ASSERT{*cycle_\obj\classID=#TUICLASS_CYCLE}

  done.l = False
  If *cycle_\optionW
    option.l = *ev\pos\y
    *win.tuiWindow = ntui_GetWindow{*cycle_}
    If *win
      If *win\oswin
        option.l = (*ev\pos\y + *win\oswin\TopEdge - *cycle_\optionW\TopEdge)
      End If
    End If
    If option>0 Then option / *cycle_\optionHeight
  Else
    option = -1;*cycle_\obj\value
  End If

  Select *ev\id
    Case #TUIEV_MOUSEDOWN
      If *ev\value = 0 ; we want button 0
        If ntui_HitObject{*cycle_,*ev\pos\x,*ev\pos\y}
          ntui_SetFocus{*cycle_}
          done      = True
          *cycle_\obj\flags | #TUIF_ACTIVE
          ;str_Dup{&*ev\notifyID,*cycle_\obj\onTouch}
          If *cycle_\tbi Then iw.l = ntui_GetTBImageWidth{*cycle_\tbi}
          If (*ev\pos\x-*cycle_\obj\cbox\left) > iw + *cycle_\obj\padding\left + *cycle_\obj\padding\right+3
            _ntui_OpenCycleOptions{*cycle_}
            *cycle_\state = 2
          Else
            *cycle_\state = 1
          End If
          ntui_Refresh{*cycle_,Null}
        End If
      End If

    Case #TUIEV_MOUSEUP
      If *ev\value = 0 ; we want Cycle 0
        If *cycle_\obj\flags&#TUIF_ACTIVE
          done=True
          If *cycle_\optionW
            _ntui_CloseCycleOptions{*cycle_}
          Else
            If ntui_HitObject{*cycle_,*ev\pos\x,*ev\pos\y}
              If (*ev\qualifier_&#TUIQUAL_SHIFT)=0
               option = *cycle_\obj\value+1
               If option>=*cycle_\numOptions OR option<0 Then option=0
              Else
                option = *cycle_\obj\value-1
                If option>=*cycle_\numOptions OR option<0 Then option=*cycle_\numOptions-1
              End If
            Else
              option=-1
            End If
          End If
          If option>=0 AND option<*cycle_\numOptions
            _ntui_UpdateCycleString{*cycle_,option,True}
          End If
          *cycle_\state = 0
          *cycle_\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
          !tuiHandleNotify{done,*cycle_,onChange,*ev}
          ntui_Refresh{*cycle_,Null}
        End If
      End If

    Case #TUIEV_MOUSEMOVE
      If *cycle_\obj\flags&#TUIF_ACTIVE
        If *cycle_\optionW
          ooption.l = *cycle_\tmpOption
          *cycle_\tmpOption = option
          If ooption><option
            ntui_Refresh{*cycle_,Null}
          End If
        Else
          oldstate.l = *cycle_\state
          If ntui_HitObject{*cycle_,*ev\pos\x,*ev\pos\y}
            *cycle_\state = 1 ; pressed
          Else
            *cycle_\state = 0 ; pressed
          End If
          If oldstate><*cycle_\state
            ntui_Refresh{*cycle_,Null}
          End If
        End If
        done=True
      End If

    Case #TUIEV_KEYDOWN
      ntui_GetEventAttr{*ev,#TUIEVA_VANILLAKEY,&vkey.l}
      Select vkey
        Case 13 ; return
          ntui_SetFocus{*cycle_}
          done      = True
          *cycle_\obj\flags | #TUIF_ACTIVE
          *cycle_\state = 1 ; pressed
          ;str_Dup{&*ev\notifyID,*cycle_\obj\onTouch}
          ntui_Refresh{*cycle_,Null}
      End Select

    Case #TUIEV_KEYUP
      If *cycle_\obj\flags&#TUIF_ACTIVE
        done = True
        *cycle_\state = 0 ; pressed
        *cycle_\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
        If (*ev\qualifier_&#TUIQUAL_SHIFT)=0
          option = *cycle_\obj\value+1
          If option>=*cycle_\numOptions OR option<0 Then option=0
        Else
          option = *cycle_\obj\value-1
          If option>=*cycle_\numOptions OR option<0 Then option=*cycle_\numOptions-1
        End If
        _ntui_UpdateCycleString{*cycle_,option,True}
        !tuiHandleNotify{done,*cycle_,onChange,*ev}
        ntui_Refresh{*cycle_,Null}
      End If

    Case #TUIEV_BIND_VALUE
      done=True
      If *cycle_\obj\value><*ev\value
        _ntui_UpdateCycleString{*cycle_,*ev\value,False}
        ;While *cycle_\obj\value>=*cycle_\numOptions Then *cycle_\obj\value-*cycle_\numOptions
        ;While *cycle_\obj\value<0 Then *cycle_\obj\value+*cycle_\numOptions
        ntui_Refresh{*cycle_,Null}
        ;If *cycle_\onChange\callback Then !_CallFuncPointer{*cycle_\onChange\callback,done,*cycle_,*ev,*cycle_\onChange\notifyID}
      End If


    Case #TUIEV_BIND_DELTA
      done=True
      *cycle_\obj\value + *ev\value
      While *cycle_\obj\value>=*cycle_\numOptions Then *cycle_\obj\value-*cycle_\numOptions
      While *cycle_\obj\value<0 Then *cycle_\obj\value+*cycle_\numOptions
      _ntui_UpdateCycleString{*cycle_,*ev\value,False}
      ntui_Refresh{*cycle_,Null}
      ;If *cycle_\onChange\callback Then !_CallFuncPointer{*cycle_\onChange\callback,done,*cycle_,*ev,*cycle_\onChange\notifyID}

    Case #TUIEV_PROPAGATE
      _ntui_PropagateBind{*cycle_,#TUIEV_BIND_MINVALUE  ,0   ,Null}
      _ntui_PropagateBind{*cycle_,#TUIEV_BIND_MAXVALUE  ,*cycle_\numOptions  ,Null}
      _ntui_PropagateBind{*cycle_,#TUIEV_BIND_VALUE     ,*cycle_\obj\value,Null}
      _ntui_PropagateBind{*cycle_,#TUIEV_BIND_STRING    ,0,*cycle_\obj\string}
      done=True

    Default
      Function Return False
  End Select

  Function Return done

End Function
!_MakeGlobalFuncPointer{_ntui_DispatchCycleEvent,{Null,Null}}


_ntui_DrawCycle:
Statement _ntui_DrawCycle{*cycle_.tuiCycle,*rp.RastPort,*rpclip.tuiRect}
  !_ASSERT{*cycle_}
  !_ASSERT{*cycle_\obj\classID=#TUICLASS_CYCLE}

  *engine.tuiEngine = *cycle_\obj\engine : If *engine=Null OR *rp=Null Then Statement Return
  *obj.tuiObject = *cycle_\obj

  If *cycle_\state=1
    bgTuiPen.l = #TUIPEN_MARKER
    fgTuiPen.l = #TUIPEN_ACTIVETEXT
  Else
    bgTuiPen.l = #TUIPEN_HALFSHINE
    fgTuiPen.l = #TUIPEN_TEXT
  End If

  bgTuiPen.l = _ntui_DrawBG{*engine,*rp,*cycle_\obj\bbox,*cycle_\obj\ibox,*rpclip,*cycle_\obj\bgImage,bgTuiPen,*cycle_\obj\borderType,*cycle_\obj\flags,*cycle_\obj\gradient}

;;  If (*cycle_\obj\bgImage)
;    ntui_DrawTBImage{*cycle_\obj\bgImage,*rp,&*cycle_\obj\bbox,&*cycle_\obj\bbox,*cycle_\obj\flags,#TUIPEN_TRANSPARENT}
;    bgTuiPen = #TUIPEN_TRANSPARENT
;  Else
;    If (*cycle_\obj\borderType><#TUIBORDER_NONE)
;      If ntui_DrawBorder{*engine,*rp,*cycle_\obj\bbox,*cycle_\obj\borderType,*cycle_\obj\flags} Then bgTuiPen = #TUIPEN_TRANSPARENT
;    End If
;    If *engine\fillStyle=1 AND bgTuiPen><#TUIPEN_TRANSPARENT
;      _ntui_DrawGradientBox{*engine,*rp,*cycle_\obj\ibox,bgTuiPen,#TUIORIENT_HORIZONTAL, *cycle_\state}
;      bgTuiPen = #TUIPEN_TRANSPARENT
;    End If
;  EndIf

  !tuiCopyRect{ibox.tuiRect,*obj\ibox}
  !tuiCopyRect{cbox.tuiRect,*obj\cbox}

  If *cycle_\tbi

    iw.l = ntui_GetTBImageWidth{*cycle_\tbi}

    ibox\right = ibox\left + iw + *obj\padding\left + *obj\padding\right -1
    cbox\right = cbox\left + iw -1
    If cbox\right>*obj\cbox\right Then cbox\right=*obj\cbox\right
    If ibox\right>*obj\ibox\right Then ibox\right=*obj\ibox\right

    ntui_DrawTBImage{*cycle_\tbi,*rp,ibox,cbox,*cycle_\obj\flags,bgTuiPen}

    ;If *obj\string
      SetAPen_ *rp,*engine\pen[#TUIPEN_HALFSHADOW]  ; seperator
      Move_ *rp,ibox\right+1,ibox\top
      Draw_ *rp,ibox\right+1,ibox\bottom

      SetAPen_ *rp,*engine\pen[#TUIPEN_SHINE]
      Move_ *rp,ibox\right+2,ibox\top
      Draw_ *rp,ibox\right+2,ibox\bottom
    ;End If

    cbox\left  = ibox\right+3 + *obj\padding\left
    ibox\left  = ibox\right+3

    cbox\right = *obj\cbox\right
    ibox\right = *obj\ibox\right
  End If

  If *cycle_\state=2
    If bgTuiPen><#TUIPEN_TRANSPARENT Then bgTuiPen = #TUIPEN_MARKER
    fgTuiPen = #TUIPEN_ACTIVETEXT
  Else
    If bgTuiPen><#TUIPEN_TRANSPARENT Then bgTuiPen = #TUIPEN_HALFSHINE
    fgTuiPen = #TUIPEN_TEXT
  End If

  If *cycle_\obj\string
    _ntui_Print{*engine,*obj\string,ibox,cbox,*obj\flags,*rp,fgTuiPen,bgTuiPen}
  Else
    If bgTuiPen><#TUIPEN_TRANSPARENT
      SetAPen_ *rp,*engine\pen[bgTuiPen]
      RectFill_ *rp,ibox\left,ibox\top,ibox\right,ibox\bottom
    End If
    _ntui_DrawEmptyBox{*engine,*rp,cbox,#TUIPEN_HALFSHADOW}
  End If

  If *cycle_\optionW
    *rpo.RastPort = *cycle_\optionW\RPort

    bbox.tuiRect\left = 0
    bbox\top          = 0
    bbox\right        = *cycle_\optionW\Width-1
    bbox\bottom       = *cycle_\optionW\Height-1

    ntui_DrawBorder{*engine,*rpo,bbox,#TUIBORDER_FLAT,*cycle_\obj\flags}
    _ntui_GetBorderSize{*engine,#TUIBORDER_FLAT,*obj\flags,bs.tuiRect}

    bbox\left         + bs\left
    bbox\top          + bs\top
    bbox\right        - bs\right
    bbox\bottom       = *cycle_\optionHeight + bs\top -1

    *textP.str = Null

    ; draw the options ...
    For n.l=0 To *cycle_\numOptions-1
      text.s = ntui_GetCycleOption{*cycle_,n}
      If n><*cycle_\tmpOption
        If n><*cycle_\obj\value
          bgTuiPen.l = #TUIPEN_HALFSHINE
          fgTuiPen.l = #TUIPEN_TEXT
        Else
          bgTuiPen.l = #TUIPEN_BACKGROUND
          fgTuiPen.l = #TUIPEN_TEXT
        End If
      Else
        bgTuiPen.l = #TUIPEN_MARKER
        fgTuiPen.l = #TUIPEN_ACTIVETEXT
      End If


      str_Write{&*textP,text}
      _ntui_Print{*engine,*textP,bbox,bbox,*cycle_\obj\flags,*rpo,fgTuiPen,bgTuiPen}

      bbox\top    + *cycle_\optionHeight
      bbox\bottom + *cycle_\optionHeight
    Next
    str_Free{&*textP}
  End If
End Statement
!_MakeGlobalFuncPointer{_ntui_DrawCycle,{Null,Null,Null}}


_ntui_CalculateCycleMinSize:
Statement _ntui_CalculateCycleMinSize{*cycle_.tuiCycle,*rp.RastPort}
  !_ASSERT{*cycle_}
  !_ASSERT{*cycle_\obj\classID=#TUICLASS_CYCLE}

  *engine.tuiEngine = *cycle_\obj\engine : If *engine=Null OR *rp=Null Then Statement Return
  *cycle_\optionHeight   = *engine\defSize[#TUISIZE_BUTTON] + !tuiBorderHeight{*engine\defPadding}

  *cycle_\obj\minsize\x  = !tuiBorderWidth{*cycle_\obj\padding}
  *cycle_\obj\minsize\y  = !tuiBorderHeight{*cycle_\obj\padding}

  DEFTYPE.tuiRect tx
  If *cycle_\obj\string
    _ntui_GetTextRect{*engine,*cycle_\obj\string,tx,*cycle_\obj\flags,*rp}
    *cycle_\obj\minsize\x  + !tuiRectWidth {tx}
    *cycle_\obj\minsize\y  + !tuiRectHeight{tx}
  Else
    *cycle_\obj\minsize\y  + *engine\defSize[#TUISIZE_INLINE]
  End If

  If *cycle_\tbi
    iw.l = ntui_GetTBImageWidth{*cycle_\tbi}
    *cycle_\obj\minsize\x + iw + *cycle_\obj\padding\left + *cycle_\obj\padding\right + 2
  End If

  _ntui_GetBorderSize{*engine,*cycle_\obj\borderType,*cycle_\obj\flags,*cycle_\obj\border}
  *cycle_\obj\minsize\x + !tuiBorderWidth{*cycle_\obj\border}
  *cycle_\obj\minsize\y + !tuiBorderHeight{*cycle_\obj\border}

End Statement
!_MakeGlobalFuncPointer{_ntui_CalculateCycleMinSize,{Null,Null}}


_ntui_DeinitCycle:
Statement _ntui_DeinitCycle{*cycle_.tuiCycle}
  !_ASSERT{*cycle_}
  !_ASSERT{*cycle_\obj\classID=#TUICLASS_CYCLE}

  If *cycle_\tbi     Then ntui_FreeTBImage{*cycle_\tbi}  : *cycle_\tbi = Null
  If *cycle_\optionW Then _ntui_CloseCycleOptions{*cycle_} : *cycle_\optionW = Null
  str_Free{&*cycle_\optionS}
  !tuiFreeNotifyHandler{*cycle_\onChange}

End Statement
!_MakeGlobalFuncPointer{_ntui_DeinitCycle,{Null}}


ntui_Cycle:
Function.tuiCycle ntui_Cycle{*tagList.TagItem}

  flags.l = #TUIF_CENTER|#TUIF_MIDDLE|#TUIF_FIXHEIGHT|#TUIF_WANTMOVER|#TUIF_WANTTAB
  *cycle_.tuiCycle = (.tuiCycle)_ntui_CreateObject{#TUICLASS_CYCLE,SizeOf.tuiCycle,flags}
  If *cycle_

    *cycle_\obj\borderType       = #TUIBORDER_BUTTON
    *cycle_\obj\bgTuiPen         = #TUIPEN_HALFSHINE
    *cycle_\obj\gradient         = #TUIORIENT_HORIZONTAL

    *cycle_\optionW              = Null
    *cycle_\optionS              = Null
    *cycle_\optionHeight         = 8 ;*engine\defSize+*engine\defPad\y
    *cycle_\tbi                  = ntui_CreateTBImage{*cycle_\obj\engine,"CYCLE",#TUISIZE_BUTTON,#TUISIZE_BUTTON}
    *cycle_\state                = 0
    *cycle_\numOptions           = 0
    *cycle_\lastOption           = -1
    *cycle_\tmpOption            = -1

    *cycle_\obj\Draw             = *_ntui_DrawCycle
    *cycle_\obj\Layout           = Null ;*_ntui_LayoutCycle
    *cycle_\obj\DispatchEvent    = *_ntui_DispatchCycleEvent
    *cycle_\obj\CalculateMinSize = *_ntui_CalculateCycleMinSize
    *cycle_\obj\Deinit           = *_ntui_DeinitCycle
    *cycle_\obj\SetAttr          = *_ntui_SetCycleAttr
    *cycle_\obj\GetAttr          = *_ntui_GetCycleAttr

    !tuiInitNotifyHandler{*cycle_\onChange}

    If *tagList Then ntui_SetAttrs{*cycle_,*tagList}

  End If

  Function Return *cycle_

End Function
!_MakeGlobalFuncPointer{ntui_Cycle,{Null}}


Function.tuiCycle ntuib_Cycle{options.s,initial.l,@help.s,@flags.l,@nameID.s}

  DEFTYPE.tagL10 tagList : n.l = 0
  If options Then tagList\tag[n]\ti_Tag = #TUICYA_OPTIONS,&options : n=n+1
  If help    Then tagList\tag[n]\ti_Tag = #TUIA_HELP     ,&help    : n=n+1
  If nameID  Then tagList\tag[n]\ti_Tag = #TUIA_ID       ,&nameID  : n=n+1
  If flags><#TUI_NOFLAGS Then tagList\tag[n]\ti_Tag = #TUIA_SETFLAGS,flags : n=n+1
  tagList\tag[n]\ti_Tag = #TUICYA_SELECTED,initial : n=n+1
  tagList\tag[n]\ti_Tag = #TAG_DONE,0

  *cycle_.tuiCycle = ntui_Cycle{tagList}

  Function Return *cycle_

End Function


Statement ntui_InitCycleClass{}

  classID.l = ntui_RegisterClass{"cycle",(.tuiFunc)*ntui_Cycle,Null}

  ntui_RegisterAttr{classID,"selected"      , #TUICYA_SELECTED     ,#TUIAT_INT    , 0,0 }
  ntui_RegisterAttr{classID,"options"       , #TUICYA_OPTIONS      ,#TUIAT_STRING , 0,0 }
  ntui_RegisterAttr{classID,"onchange"      , #TUICYA_ONCHANGE     ,#TUIAT_STRING , 0,0 }

End Statement

ntui_InitCycleClass{}
