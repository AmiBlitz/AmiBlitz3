; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 321
; CursorColumn    = 17
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_cycle.include                                                    /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#TUI_HAS_CYCLE = 1
CNIF #__include=0
optimize 7
Syntax 2
CEND

#TUICYA_BASE      = #TUIA_USER
#TUICYA_SELECTED  = #TUIA_VALUE
#TUICYA_OPTIONSTR = #TUICYA_BASE + 0

NEWTYPE.tuiCycle
obj.tuiObject            ; tui object header
state.l
*optionS.str
*tbi.tuiTBImage
*optionW.Window
optionHeight.l
numOptions.l
lastOption.l
tmpOption.l
End NEWTYPE


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.s = _ntui_GetCycleOption {*tuiCycle.tuiCycle,option.l}       /
;/                                                                             /
;/ Description:                                                                /
;/ * tui Cycle newtype */                                                      /
;/ obj.tuiObject            ; tui object header                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiCycle.tuiCycle    : ???                                               /
;/ - option.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s _ntui_GetCycleOption{*tuiCycle.tuiCycle,option.l}
If option<0 OR option>=*tuiCycle\numOptions Then Function Return ""
res.s = ""
If *tuiCycle\optionS
  ptr.l = &*tuiCycle\optionS\str
  While Peek.b(ptr)><0 AND option>=0
    If Peek.b(ptr)=@"|"
      option-1
    Else
      If option=0 Then res + Chr$(Peek.b(ptr))
    End If
    ptr+1
  Wend
End If
Function Return res
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_CloseCycleOptions {*tuiCycle.tuiCycle}                        /
;/                                                                             /
;/ Description:                                                                /
;/       ;case hotkey                                                          /
;/   option = -1;*tuiCycle\obj\value                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiCycle.tuiCycle    : ???                                               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_CloseCycleOptions{*tuiCycle.tuiCycle}
  If *tuiCycle\optionW
    Forbid_
    *msg.IntuiMessage = *tuiCycle\optionW\UserPort\mp_MsgList\lh_Head
    While (*msg\ExecMessage\mn_Node\ln_Succ)
      *succ.Node = *msg\ExecMessage\mn_Node\ln_Succ
      If( *msg\IDCMPWindow=*tuiCycle\optionW)
        Remove_ *msg : ReplyMsg_ *msg
      End If
      *msg = *succ
    Wend
    *tuiCycle\optionW\UserPort = #NULL;
    ModifyIDCMP_ *tuiCycle\optionW,0
    Permit_
    CloseWindow_ *tuiCycle\optionW
    *tuiCycle\optionW = #NULL
  End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_OpenCycleOptions {*tuiCycle.tuiCycle}                         /
;/                                                                             /
;/ Description:                                                                /
;/   *tuiCycle\optionW\UserPort = #NULL;                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiCycle.tuiCycle    : ???                                               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_OpenCycleOptions{*tuiCycle.tuiCycle}
If *tuiCycle\optionW=#NULL
  *tuiWindow.tuiWindow = ntui_FindObjectWindow{*tuiCycle}
  *tuiEngine.tuiEngine = *tuiCycle\obj\tuiEngine
  If *tuiWindow
    DEFTYPE.NewWindow nw
    _ntui_GetBorderSize{*tuiEngine,#TUIBORDER_FLAT,0,bs.tuiRect}

   If *tuiCycle\tbi
     iw.l = ntui_GetTBImageWidth{*tuiCycle\tbi}
     px.l = iw+*tuiCycle\obj\padding\left+*tuiCycle\obj\padding\right + 2-1
   Else
     px.l = 0
   End If
    *tuiCycle\tmpOption = *tuiCycle\obj\value

    nw\LeftEdge    = px +*tuiCycle\obj\cbox\left + *tuiWindow\win\LeftEdge  - bs\left
    ; below:
    ;nw\TopEdge     = *tuiCycle\obj\pos\y+*tuiCycle\obj\size\y + *tuiWindow\win\TopEdge + 1
    option.l = *tuiCycle\obj\value
    If option<-1 OR option>=*tuiCycle\numOptions Then option=-1

    nw\TopEdge     = *tuiCycle\obj\cbox\top-(*tuiCycle\optionHeight * option) + *tuiWindow\win\TopEdge - bs\top ;+ *tuiCycle\obj\padding\top

    nw\Width       = !tuiRectWidth{*tuiCycle\obj\cbox} - px + bs\left + bs\right
    nw\Height      = *tuiCycle\optionHeight * *tuiCycle\numOptions + bs\top+bs\bottom
    nw\DetailPen   = -1 ; use intuitions default
    nw\BlockPen    = -1
    nw\IDCMPFlags  = 0
    IDCMPFlags.l   = #IDCMP_REFRESHWINDOW|#IDCMP_MOUSEBUTTONS|#IDCMP_MOUSEMOVE|#IDCMP_INTUITICKS|#IDCMP_MENUVERIFY|#IDCMP_RAWKEY
    nw\Flags       = #WFLG_BORDERLESS|#WFLG_SIMPLE_REFRESH|#WFLG_NOCAREREFRESH
    nw\FirstGadget = #NULL
    nw\CheckMark   = #NULL
    nw\Title       = #NULL
    nw\Screen      = *tuiEngine\scr
    nw\BitMap      = #NULL
    nw\MinWidth    = 0
    nw\MinHeight   = 0
    nw\MaxWidth    = 0
    nw\MaxHeight   = 0
    nw\Type        = #CUSTOMSCREEN
    DEFTYPE.tag5 wtags
    wtags\ti_Tag =#WA_AutoAdjust,1,#WA_BackFill,#NULL,#TAG_DONE,0
    *tuiCycle\optionW = OpenWindowTagList_(nw,wtags)
    If *tuiCycle\optionW
      *tuiCycle\optionW\UserData = *tuiWindow
      *tuiCycle\optionW\UserPort = *tuiEngine\winPort
      ModifyIDCMP_ *tuiCycle\optionW,IDCMPFlags
    End If
  End If
End If
End Statement



Statement _ntui_UpdateCycleString{*tuiCycle.tuiCycle,option.l,bind.w}
  *tuiCycle\obj\value = option
  text.s = _ntui_GetCycleOption{*tuiCycle,*tuiCycle\obj\value}
  str_Write{&*tuiCycle\obj\string,text}
  If bind
    _ntui_PropagateBind{*tuiCycle,#TUIEV_BIND_VALUE,*tuiCycle\obj\value,#NULL}
    _ntui_PropagateBind{*tuiCycle,#TUIEV_BIND_STRING,0,*tuiCycle\obj\string}
  End If
End Statement

_ntui_SetCycleAttr:
Function.w _ntui_SetCycleAttr{*tuiCycle.tuiCycle,ti_Tag.l,ti_Data.l}
  !_ASSERT{*tuiCycle}
  !_ASSERT{*tuiCycle\obj\classID=#TUICLASS_CYCLE}

  done.w = True
  Select ti_Tag
    Case #TUICYA_OPTIONSTR
      _ntui_CloseCycleOptions{*tuiCycle}
      str_WritePtr{&*tuiCycle\optionS,ti_Data}

      If *tuiCycle\optionS
        *tuiCycle\numOptions=1
        ptr.l = &*tuiCycle\optionS\str
        While Peek.b(ptr)><0
          If Peek.b(ptr)=@"|" Then *tuiCycle\numOptions+1
          ptr+1
        Wend
      Else
        *tuiCycle\numOptions=0
      End If
      _ntui_UpdateCycleString{*tuiCycle,ti_Data,False}
      ntui_Refresh{*tuiCycle,#NULL}

    Case #TUICYA_SELECTED
      If *tuiCycle\obj\value><ti_Data
        _ntui_UpdateCycleString{*tuiCycle,ti_Data,True}
        ntui_Refresh{*tuiCycle,#NULL}
      End If

    Case #TUIA_XMLATTR
      *xmlA.tuiXmlAttr = ti_Data
      Select Peek.s(*xmlA\nameP)
        Case "options"           : done=ntui_SetAttr{*tuiCycle,#TUICYA_OPTIONSTR      ,*xmlA\stringP}
        Case "selected"          : done=ntui_SetAttr{*tuiCycle,#TUICYA_SELECTED       ,*xmlA\value}
        Default
          done = False
       End Select
    Default
      done = False

  End Select
  Function Return done
End Function


_ntui_GetCycleAttr:
Function.w _ntui_GetCycleAttr{*tuiCycle.tuiCycle,ti_Tag.l,*ti_Data.longP}
  !_ASSERT{*tuiCycle}
  !_ASSERT{*tuiCycle\obj\classID=#TUICLASS_CYCLE}

  done.w = True
  Select ti_Tag
    Case #TUICYA_OPTIONSTR    : *ti_Data\l = str_GetPtr{*tuiCycle\optionS}
    Default
      done = False

  End Select
  Function Return done
End Function






;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.w = _ntui_DispatchCycle {*tuiCycle.tuiCycle,*tuiEvent.tuiEve:: /
;/ nt}                                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * do what happens if the user operates the Cycle */                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiCycle.tuiCycle    : ???                                               /
;/ - *tuiEvent.tuiEvent    : ???                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DispatchCycleEvent:
Function.w _ntui_DispatchCycleEvent{*tuiCycle.tuiCycle,*tuiEvent.tuiEvent}

  done.l = False
  If *tuiCycle\optionW
    option.l = *tuiEvent\pos\y
    *tuiWindow.tuiWindow = ntui_FindObjectWindow{*tuiCycle}
    If *tuiWindow
      If *tuiWindow\win
        option.l = (*tuiEvent\pos\y + *tuiWindow\win\TopEdge - *tuiCycle\optionW\TopEdge)
      End If
    End If
    If option>0 Then option / *tuiCycle\optionHeight
  Else
    option = -1;*tuiCycle\obj\value
  End If

  Select *tuiEvent\evID
    Case #TUIEV_MOUSEDOWN
      If *tuiEvent\value = 0 ; we want button 0
        If ntui_HitObject{*tuiCycle,*tuiEvent\pos\x,*tuiEvent\pos\y}
          ntui_SetFocus{*tuiCycle}
          done      = True
          *tuiCycle\obj\flags | #TUIF_ACTIVE
          str_Dup{*tuiEvent\notifyID,*tuiCycle\obj\onTouch}
          If *tuiCycle\tbi Then iw.l = ntui_GetTBImageWidth{*tuiCycle\tbi}
          If (*tuiEvent\pos\x-*tuiCycle\obj\cbox\left) > iw + *tuiCycle\obj\padding\left + *tuiCycle\obj\padding\right+3
            _ntui_OpenCycleOptions{*tuiCycle}
            *tuiCycle\state = 2
          Else
            *tuiCycle\state = 1
          End If
          ntui_Refresh{*tuiCycle,#NULL}
        End If
      End If

    Case #TUIEV_MOUSEUP
      If *tuiEvent\value = 0 ; we want Cycle 0
        If *tuiCycle\obj\flags&#TUIF_ACTIVE
          done = True
          If *tuiCycle\optionW
            _ntui_CloseCycleOptions{*tuiCycle}
          Else
            If ntui_HitObject{*tuiCycle,*tuiEvent\pos\x,*tuiEvent\pos\y}
              If (*tuiEvent\qualifier_&#TUIQUAL_SHIFT)=0
               option = *tuiCycle\obj\value+1
               If option>=*tuiCycle\numOptions OR option<0 Then option=0
              Else
                option = *tuiCycle\obj\value-1
                If option>=*tuiCycle\numOptions OR option<0 Then option=*tuiCycle\numOptions-1
              End If
            Else
              option=-1
            End If
          End If
          If option>=0 AND option<*tuiCycle\numOptions
            _ntui_UpdateCycleString{*tuiCycle,option,True}
          End If
          *tuiCycle\state = 0
          str_Dup{*tuiEvent\notifyID,*tuiCycle\obj\onClick}
          *tuiCycle\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
          ntui_Refresh{*tuiCycle,#NULL}
        End If
      End If

    Case #TUIEV_MOUSEMOVE
      If *tuiCycle\obj\flags&#TUIF_ACTIVE
        If *tuiCycle\optionW
          ooption.l = *tuiCycle\tmpOption
          *tuiCycle\tmpOption = option
          If ooption><option
            ntui_Refresh{*tuiCycle,#NULL}
          End If
        Else
          oldstate.l = *tuiCycle\state
          If ntui_HitObject{*tuiCycle,*tuiEvent\pos\x,*tuiEvent\pos\y}
            *tuiCycle\state = 1 ; pressed
          Else
            *tuiCycle\state = 0 ; pressed
          End If
          If oldstate><*tuiCycle\state
            ntui_Refresh{*tuiCycle,#NULL}
          End If
        End If
        done=True
      End If

    Case #TUIEV_KEYDOWN
      Select ntui_GetEventAttr{*tuiEvent,#TUIEVA_VANILLAKEY}
        Case 13 ; return
          ntui_SetFocus{*tuiCycle}
          done      = True
          *tuiCycle\obj\flags | #TUIF_ACTIVE
          *tuiCycle\state = 1 ; pressed
          str_Dup{*tuiEvent\notifyID,*tuiCycle\obj\onTouch}
          ntui_Refresh{*tuiCycle,#NULL}
      End Select

    Case #TUIEV_KEYUP
      If *tuiCycle\obj\flags&#TUIF_ACTIVE
        done = True
        *tuiCycle\state = 0 ; pressed
        str_Dup{*tuiEvent\notifyID,*tuiCycle\obj\onClick}
        *tuiCycle\obj\flags|#TUIF_ACTIVE - #TUIF_ACTIVE
        If (*tuiEvent\qualifier_&#TUIQUAL_SHIFT)=0
          option = *tuiCycle\obj\value+1
          If option>=*tuiCycle\numOptions OR option<0 Then option=0
        Else
          option = *tuiCycle\obj\value-1
          If option>=*tuiCycle\numOptions OR option<0 Then option=*tuiCycle\numOptions-1
        End If
        _ntui_UpdateCycleString{*tuiCycle,option,True}
        ntui_Refresh{*tuiCycle,#NULL}
      End If

    Case #TUIEV_BIND_VALUE
      If *tuiCycle\obj\value><*tuiEvent\value
        _ntui_UpdateCycleString{*tuiCycle,*tuiEvent\value,False}
        ;While *tuiCycle\obj\value>=*tuiCycle\numOptions Then *tuiCycle\obj\value-*tuiCycle\numOptions
        ;While *tuiCycle\obj\value<0 Then *tuiCycle\obj\value+*tuiCycle\numOptions
        ntui_Refresh{*tuiCycle,#NULL}
      End If
      done=True

    Case #TUIEV_BIND_DELTA
      *tuiCycle\obj\value + *tuiEvent\value
      While *tuiCycle\obj\value>=*tuiCycle\numOptions Then *tuiCycle\obj\value-*tuiCycle\numOptions
      While *tuiCycle\obj\value<0 Then *tuiCycle\obj\value+*tuiCycle\numOptions
      _ntui_UpdateCycleString{*tuiCycle,*tuiEvent\value,False}
      ntui_Refresh{*tuiCycle,#NULL}
      done=True

    Case #TUIEV_PROPAGATE
      _ntui_PropagateBind{*tuiCycle,#TUIEV_BIND_MINVALUE  ,0   ,#NULL}
      _ntui_PropagateBind{*tuiCycle,#TUIEV_BIND_MAXVALUE  ,*tuiCycle\numOptions  ,#NULL}
      _ntui_PropagateBind{*tuiCycle,#TUIEV_BIND_VALUE     ,*tuiCycle\obj\value,#NULL}
      _ntui_PropagateBind{*tuiCycle,#TUIEV_BIND_STRING    ,0,*tuiCycle\obj\string}
      done=True

    Default
      Function Return False
  End Select

  If done
    If (*tuiEvent\notifyID)
      *tuiEvent\tuiObject = *tuiCycle
      _ntui_QueueEvent{*tuiCycle\obj\tuiEngine\outQ,*tuiEvent}
    Else
      _ntui_DestroyEvent{*tuiEvent}
    End If
  End If

Function Return done
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawCycle {*tuiCycle.tuiCycle,*rp.RastPort}                    /
;/                                                                             /
;/ Description:                                                                /
;/     nw\DetailPen   = -1 ; use intuitions default                            /
;/ * draw the Cycle in all its beauty */                                       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiCycle.tuiCycle    : ???                                               /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DrawCycle:
Statement _ntui_DrawCycle{*tuiCycle.tuiCycle,*rp.RastPort,*rpclip.tuiRect}
*tuiEngine.tuiEngine = *tuiCycle\obj\tuiEngine : If *tuiEngine=#NULL OR *rp=#NULL Then Statement Return
*tui.tuiObject = *tuiCycle\obj

If (*tuiCycle\obj\borderType><#TUIBORDER_NONE)
  bgDone.l = ntui_DrawBorder{*tuiEngine,*rp,*tui\bbox,*tui\borderType,*tui\flags}
End If


If *tuiCycle\state=1
  bgTuiPen.l = #TUIPEN_MARKER
  fgTuiPen.l = #TUIPEN_ACTIVETEXT
Else
  bgTuiPen.l = #TUIPEN_HALFSHINE
  fgTuiPen.l = #TUIPEN_TEXT
End If

If bgDone Then bgTuiPen = #TUIPEN_TRANSPARENT

!tuiCopyRect{ibox.tuiRect,*tui\ibox}
!tuiCopyRect{cbox.tuiRect,*tui\cbox}

If *tuiCycle\tbi

  iw.l = ntui_GetTBImageWidth{*tuiCycle\tbi}

  ibox\right = ibox\left + iw + *tui\padding\left + *tui\padding\right -1
  cbox\right = cbox\left + iw -1
  If cbox\right>*tui\cbox\right Then cbox\right=*tui\cbox\right
  If ibox\right>*tui\ibox\right Then ibox\right=*tui\ibox\right

  ntui_DrawTBImage{*tuiCycle\tbi,*rp,ibox,cbox,*tuiCycle\obj\flags,bgTuiPen}

  ;If *tui\string
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]  ; seperator
    Move_ *rp,ibox\right+1,ibox\top
    Draw_ *rp,ibox\right+1,ibox\bottom

    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    Move_ *rp,ibox\right+2,ibox\top
    Draw_ *rp,ibox\right+2,ibox\bottom
  ;End If

  cbox\left  = ibox\right+3 + *tui\padding\left
  ibox\left  = ibox\right+3

  cbox\right = *tui\cbox\right
  ibox\right = *tui\ibox\right
End If

If *tuiCycle\state=2
  bgTuiPen.l = #TUIPEN_MARKER
  fgTuiPen.l = #TUIPEN_ACTIVETEXT
Else
  bgTuiPen.l = #TUIPEN_HALFSHINE
  fgTuiPen.l = #TUIPEN_TEXT
End If
  If bgDone Then bgTuiPen = #TUIPEN_TRANSPARENT

  If *tuiCycle\obj\string
    _ntui_Print{*tuiEngine,*tui\string,ibox,cbox,*tui\flags,*rp,fgTuiPen,bgTuiPen}
  Else
    If bgTuiPen><#TUIPEN_TRANSPARENT
      SetAPen_ *rp,*tuiEngine\pen[bgTuiPen]
      RectFill_ *rp,ibox\left,ibox\top,ibox\right,ibox\bottom
    End If
    _ntui_DrawEmptyBox{*tuiEngine,*rp,cbox,#TUIPEN_HALFSHADOW}
  End If

  If *tuiCycle\optionW
    *rpo.RastPort = *tuiCycle\optionW\RPort

    bbox.tuiRect\left = 0
    bbox\top          = 0
    bbox\right        = *tuiCycle\optionW\Width-1
    bbox\bottom       = *tuiCycle\optionW\Height-1

    ntui_DrawBorder{*tuiEngine,*rpo,bbox,#TUIBORDER_FLAT,*tuiCycle\obj\flags}
    _ntui_GetBorderSize{*tuiEngine,#TUIBORDER_FLAT,*tui\flags,bs.tuiRect}

    bbox\left         + bs\left
    bbox\top          + bs\top
    bbox\right        - bs\right
    bbox\bottom       = *tuiCycle\optionHeight + bs\top -1

    ; draw the options ...
    For n.l=0 To *tuiCycle\numOptions-1
      text.s = _ntui_GetCycleOption{*tuiCycle,n}
      If n><*tuiCycle\tmpOption
        If n><*tuiCycle\obj\value
          bgTuiPen.l = #TUIPEN_HALFSHINE
          fgTuiPen.l = #TUIPEN_TEXT
        Else
          bgTuiPen.l = #TUIPEN_BACKGROUND
          fgTuiPen.l = #TUIPEN_TEXT
        End If
      Else
        bgTuiPen.l = #TUIPEN_MARKER
        fgTuiPen.l = #TUIPEN_ACTIVETEXT
      End If
      _ntui_Print{*tuiEngine,&text.s-4,bbox,bbox,*tuiCycle\obj\flags,*rpo,fgTuiPen,bgTuiPen}
      bbox\top    + *tuiCycle\optionHeight
      bbox\bottom + *tuiCycle\optionHeight
    Next
  End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = _ntui_GetCycleMinSize {*tuiCycle.tuiCycle,*rp.RastPort}  /
;/                                                                             /
;/ Description:                                                                /
;/   *tuiCycle\optionHeight   = 8 ;*tuiEngine\defSize+*tuiEngine\defPad\y      /
;/ * calculate the minimum size for the Cycle */                               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiCycle.tuiCycle    : ???                                               /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_CalculateCycleMinSize:
Function.l _ntui_CalculateCycleMinSize{*tuiCycle.tuiCycle,*rp.RastPort}
*tuiEngine.tuiEngine = *tuiCycle\obj\tuiEngine : If *tuiEngine=#NULL OR *rp=#NULL Then Function Return *tuiCycle\obj\minsize
*tuiCycle\optionHeight   = *tuiEngine\defSize[#TUISIZE_INLINE]

*tuiCycle\obj\minsize\x  = !tuiBorderWidth{*tuiCycle\obj\padding}
*tuiCycle\obj\minsize\y  = !tuiBorderHeight{*tuiCycle\obj\padding}

DEFTYPE.tuiRect tx
If *tuiCycle\obj\string
  _ntui_GetTextRect{*tuiEngine,*tuiCycle\obj\string,tx,*tuiCycle\obj\flags,*rp}
  *tuiCycle\obj\minsize\x  + !tuiRectWidth {tx}
  *tuiCycle\obj\minsize\y  + !tuiRectHeight{tx}
End If

If *tuiCycle\tbi
  iw.l = ntui_GetTBImageWidth{*tuiCycle\tbi}
  *tuiCycle\obj\minsize\x + iw + *tuiCycle\obj\padding\left + *tuiCycle\obj\padding\right + 2
End If

_ntui_GetBorderSize{*tuiEngine,*tuiCycle\obj\borderType,*tuiCycle\obj\flags,*tuiCycle\obj\border}
*tuiCycle\obj\minsize\x + !tuiBorderWidth{*tuiCycle\obj\border}
*tuiCycle\obj\minsize\y + !tuiBorderHeight{*tuiCycle\obj\border}

Function Return *tuiCycle\obj\minsize
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _ntui_FreeCycle {*tuiCycle.tuiCycle}                                /
;/                                                                             /
;/ Description:                                                                /
;/ *tuiCycle\optionHeight   = *tuiEngine\defSize[#TUISIZE_INLINE];+*tuiEngin:: /
;/ e\defPad\y                                                                  /
;/   *tuiCycle\obj\minsize\x + *tuiEngine\defSize[#TUISIZE_BUTTON]  + 2;<=sp:: /
;/ acer                                                                        /
;/ * free everything special that we allocated for the Cycle */                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiCycle.tuiCycle    : ???                                               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
_ntui_DeinitCycle:
Statement _ntui_DeinitCycle{*tuiCycle.tuiCycle}
If *tuiCycle\tbi     Then ntui_FreeTBImage{*tuiCycle\tbi}  : *tuiCycle\tbi = #NULL
If *tuiCycle\optionW Then _ntui_CloseCycleOptions{*tuiCycle} : *tuiCycle\optionW = #NULL
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = ntui_Cycle {option.s,initial.l,@notify.l,@help.s,@flag:: /
;/ s.l,@itemID.l}                                                              /
;/                                                                             /
;/ Description:                                                                /
;/     ; draw the options ...                                                  /
;/ * create function for tui Cycle */                                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - option.s    : ???                                                         /
;/ - initial.l    : ???                                                        /
;/ - notify.l    : ???                                                         /
;/ - help.s    : ???                                                           /
;/ - flags.l    : ???                                                          /
;/ - itemID.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_Cycle{options.s,initial.l,@help.s,@flags.l,@nameID.s}
If (flags=#TUI_NOFLAGS) Then flags=0
flags | #TUIF_CENTER|#TUIF_MIDDLE|#TUIF_FIXHEIGHT|#TUIF_WANTMOVER|#TUIF_WANTTAB
*tuiCycle.tuiCycle = _ntui_CreateObject{#TUICLASS_CYCLE,SizeOf.tuiCycle,help,flags,nameID}
If *tuiCycle
  *tuiEngine.tuiEngine = *tuiCycle\obj\tuiEngine
  *tuiCycle\optionW = #NULL
  *tuiCycle\optionS = #NULL
  _ntui_SetCycleAttr{*tuiCycle,#TUICYA_OPTIONSTR,&options}
  *tuiCycle\optionHeight   = 8 ;*tuiEngine\defSize+*tuiEngine\defPad\y
  *tuiCycle\tbi            = ntui_CreateTBImage{*tuiCycle\obj\tuiEngine,"CYCLE",#TUISIZE_BUTTON,#TUISIZE_BUTTON}
  *tuiCycle\obj\borderType = #TUIBORDER_BUTTON
  _ntui_UpdateCycleString{*tuiCycle,initial,False}

  !_GetFuncPointer{*tuiCycle\obj\Draw            ,_ntui_DrawCycle,{0,0,0}}
;  !_GetFuncPointer{*tuiCycle\obj\Layout          ,_ntui_LayoutCycle,{0,0,0}}
  !_GetFuncPointer{*tuiCycle\obj\DispatchEvent   ,_ntui_DispatchCycleEvent,{0,0}}
  !_GetFuncPointer{*tuiCycle\obj\CalculateMinSize,_ntui_CalculateCycleMinSize,{0,0}}
  !_GetFuncPointer{*tuiCycle\obj\Deinit          ,_ntui_DeinitCycle,{0}}
  !_GetFuncPointer{*tuiCycle\obj\SetAttr         ,_ntui_SetCycleAttr,{0,0,0}}
  !_GetFuncPointer{*tuiCycle\obj\GetAttr         ,_ntui_GetCycleAttr,{0,0,0}}

End If
Function Return *tuiCycle
End Function



