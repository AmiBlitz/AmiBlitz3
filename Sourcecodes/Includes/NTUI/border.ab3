; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 528
; CursorColumn    = 59
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_border.include                                                   /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_GetBorderSize {*tuiEngine.tuiEngine,bt.l,*bs.tuiBorderSize}    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : ???                                             /
;/ - bt.l    : ???                                                             /
;/ - *bs.tuiBorderSize    : ???                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_GetBorderSize{*tuiEngine.tuiEngine,borderType.l,flags.l,*bs.tuiRect}
If *tuiEngine\useSkin
  If *tuiEngine\skinImageAvail[borderType]
    If *tuiEngine\skinImage[borderType]=#NULL
      *tuiEngine\skinImageAvail[borderType] = False
      *tuiEngine\skinImage[borderType] = ntui_CreateTBImage{*tuiEngine,str_Read{&*tuiEngine\skinImageName[borderType]},-1,-1}
      If *tuiEngine\skinImage[borderType]
        If *tuiEngine\skinImage[borderType]\tuiImage=#TUIIMAGE_UNKNOWN
          *tuiEngine\skinImageAvail[borderType]=False
          ntui_FreeTBImage{*tuiEngine\skinImage[borderType]}
          *tuiEngine\skinImage[borderType] = #NULL
        Else
          *tuiEngine\skinImageAvail[borderType]=True
        End If
      End If
    End If
    If *tuiEngine\skinImage[borderType]
      _ntui_GetImageBorderSize{*tuiEngine\skinImage[borderType],*bs}
      Statement Return
    End If
  End If
End If
Select borderType
  Case #TUIBORDER_FLAT     : *bs\left = 1,1,1,1
  Case #TUIBORDER_RAISED   : *bs\left = 1,1,1,1
  Case #TUIBORDER_TOOL     : *bs\left = 1,1,1,1
  Case #TUIBORDER_RECESSED : *bs\left = 1,1,1,1
  Case #TUIBORDER_GROUP    : *bs\left = 2,2,2,2
  Case #TUIBORDER_BUTTON   : *bs\left = 2,2,2,2
  Case #TUIBORDER_STRING   : *bs\left = 2,2,2,2
  Case #TUIBORDER_TITLE    : *bs\left = 2,2,2,2 : *bs\top = *tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize+1
  Case #TUIBORDER_MENUBAR  : *bs\left = 0,0,0,4
  Case #TUIBORDER_WINDOW   : *bs\left = 0,0,0,0 ; we dont know the window border size!
  Case #TUIBORDER_NONE     : *bs\left = 0,0,0,0
  Case #TUIBORDER_PAGETAB
    *bs\left = 1,1,1,1
    If (flags&#TUIF_LEFT)   Then *bs\left = 2,1,4,1
    If (flags&#TUIF_TOP)    Then *bs\left = 1,2,1,4
    If (flags&#TUIF_RIGHT)  Then *bs\left = 4,1,2,1
    If (flags&#TUIF_BOTTOM) Then *bs\left = 1,4,1,2

  Case #TUIBORDER_PAGECONTENT
    *bs\left = 1,1,1,1
    If (flags&#TUIF_LEFT)   Then *bs\left = 0,1,1,1
    If (flags&#TUIF_TOP)    Then *bs\left = 1,0,1,1
    If (flags&#TUIF_RIGHT)  Then *bs\left = 1,1,0,1
    If (flags&#TUIF_BOTTOM) Then *bs\left = 1,1,1,0

  Case #TUIBORDER_PAGEBEGIN  : *bs\left = 3,3,3,3
  Case #TUIBORDER_PAGEEND  : *bs\left = 3,3,3,3

  Default                  : *bs\left = 1,1,1,1
End Select
End Statement


#FAT=0
CNIF #FAT=0
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawButtonBorder {*tuiEngine.tuiEngine,*rp.RastPort,x1.l,y1.:: /
;/ l,x2.l,y2.l,flags.l}                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : ???                                             /
;/ - *rp.RastPort    : ???                                                     /
;/ - x1.l    : ???                                                             /
;/ - y1.l    : ???                                                             /
;/ - x2.l    : ???                                                             /
;/ - y2.l    : ???                                                             /
;/ - flags.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_DrawButtonBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,flags.l}
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom

If (flags&#TUIF_DISABLED)
  Move_    *rp,x2  ,y1
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
  Draw_    *rp,x2  ,y2
  Draw_    *rp,x1  ,y2

  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
  Draw_    *rp,x1  ,y1
  Draw_    *rp,x2  ,y1

  Move_    *rp,x2-1,y1+1
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
  Draw_    *rp,x2-1,y2-1
  Draw_    *rp,x1+1,y2-1

  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
  Draw_    *rp,x1+1,y1+1
  Draw_    *rp,x2-2,y1+1

  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BACKGROUND]
  WritePixel_ *rp,x2,y1
  WritePixel_ *rp,x1,y2
Else
  If (flags&#TUIF_ACTIVE)
    Move_    *rp,x1  ,y1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BLACK]
    Draw_    *rp,x2  ,y1
    Draw_    *rp,x2  ,y2
    Draw_    *rp,x1  ,y2
    Draw_    *rp,x1  ,y1

    Move_    *rp,x2-1,y1+1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    Draw_    *rp,x2-1,y2-1
    Draw_    *rp,x1+1,y2-1

    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    Draw_    *rp,x1+1,y1+1
    Draw_    *rp,x2-2,y1+1
  Else
    If flags&#TUIF_MOVER
      Move_    *rp,x2  ,y1
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
      Draw_    *rp,x2  ,y2
      Draw_    *rp,x1  ,y2

      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
      Draw_    *rp,x1  ,y1
      Draw_    *rp,x2  ,y1

      Move_    *rp,x2-1,y1+1
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
      Draw_    *rp,x2-1,y2-1
      Draw_    *rp,x1+1,y2-1

      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
      Draw_    *rp,x1+1,y1+1
      Draw_    *rp,x2-2,y1+1

      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
      WritePixel_ *rp,x2-1,y1+1
      WritePixel_ *rp,x1+1,y2-1

    Else
      If flags&#TUIF_FOCUS
        Move_    *rp,x1  ,y1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
        Draw_    *rp,x2  ,y1
        Draw_    *rp,x2  ,y2
        Draw_    *rp,x1  ,y2
        Draw_    *rp,x1  ,y1

        Move_    *rp,x2-1,y1+1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
        Draw_    *rp,x2-1,y2-1
        Draw_    *rp,x1+1,y2-1

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
        Draw_    *rp,x1+1,y1+1
        Draw_    *rp,x2-2,y1+1

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
        WritePixel_ *rp,x2-1,y1+1
        WritePixel_ *rp,x1+1,y2-1

      Else
        Move_    *rp,x2  ,y1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
        Draw_    *rp,x2  ,y2
        Draw_    *rp,x1  ,y2

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
        Draw_    *rp,x1  ,y1
        Draw_    *rp,x2  ,y1

        Move_    *rp,x2-1,y1+1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
        Draw_    *rp,x2-1,y2-1
        Draw_    *rp,x1+1,y2-1

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
        Draw_    *rp,x1+1,y1+1
        Draw_    *rp,x2-2,y1+1

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
        WritePixel_ *rp,x2,y1
        WritePixel_ *rp,x1,y2

      End If
    EndIf
  End If
End If
End Statement


CELSE
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawButtonBorder {*tuiEngine.tuiEngine,*rp.RastPort,x1.l,y1.:: /
;/ l,x2.l,y2.l,flags.l}}                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ntui_DrawButtonBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,flags.l}
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom


If (flags&#TUIF_DISABLED)
  Move_    *rp,x2  ,y1
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
  Draw_    *rp,x2  ,y2
  Draw_    *rp,x1  ,y2

  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
  Draw_    *rp,x1  ,y1
  Draw_    *rp,x2  ,y1


  Move_    *rp,x2-1,y1+1
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFHALFSHADOW]
  Draw_    *rp,x2-1,y2-1
  Draw_    *rp,x1+1,y2-1

  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
  Draw_    *rp,x1+1,y1+1
  Draw_    *rp,x2-2,y1+1
Else
  If (flags&#TUIF_ACTIVE)
    Move_    *rp,x1  ,y1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BLACK]
    Draw_    *rp,x2  ,y1
    Draw_    *rp,x2  ,y2
    Draw_    *rp,x1  ,y2
    Draw_    *rp,x1  ,y1

    Move_    *rp,x2-1,y1+1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
    Draw_    *rp,x2-1,y2-1
    Draw_    *rp,x1+1,y2-1

    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
    Draw_    *rp,x1+1,y1+1
    Draw_    *rp,x2-2,y1+1
  Else
    If flags&#TUIF_FOCUS
      Move_    *rp,x1  ,y1
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BLACK]
      Draw_    *rp,x2  ,y1
      Draw_    *rp,x2  ,y2
      Draw_    *rp,x1  ,y2
      Draw_    *rp,x1  ,y1

      Move_    *rp,x2-1,y1+1
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
      Draw_    *rp,x2-1,y2-1
      Draw_    *rp,x1+1,y2-1

      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
      Draw_    *rp,x1+1,y1+1
      Draw_    *rp,x2-2,y1+1
    Else
      If flags&#TUIF_MOVER
        Move_    *rp,x2  ,y1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
        Draw_    *rp,x2  ,y2
        Draw_    *rp,x1  ,y2

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
        Draw_    *rp,x1  ,y1
        Draw_    *rp,x2  ,y1

        Move_    *rp,x2-1,y1+1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
        Draw_    *rp,x2-1,y2-1
        Draw_    *rp,x1+1,y2-1

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
        Draw_    *rp,x1+1,y1+1
        Draw_    *rp,x2-2,y1+1
      Else
        Move_    *rp,x2  ,y1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
        Draw_    *rp,x2  ,y2
        Draw_    *rp,x1  ,y2

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
        Draw_    *rp,x1  ,y1
        Draw_    *rp,x2  ,y1

        Move_    *rp,x2-1,y1+1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
        Draw_    *rp,x2-1,y2-1
        Draw_    *rp,x1+1,y2-1

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
        Draw_    *rp,x1+1,y1+1
        Draw_    *rp,x2-2,y1+1
      End If
    EndIf
  End If
End If

;SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BACKGROUND]
;WritePixel_ *rp,x1,y1
;WritePixel_ *rp,x2,y1
;WritePixel_ *rp,x1,y2
;WritePixel_ *rp,x2,y2

End Statement
 

CEND


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawBorder {*tuiEngine.tuiEngine,*rp.RastPort,x1.l,y1.l,x2.l:: /
;/ ,y2.l,bt.l,flags.l}                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : ???                                             /
;/ - *rp.RastPort    : ???                                                     /
;/ - x1.l    : ???                                                             /
;/ - y1.l    : ???                                                             /
;/ - x2.l    : ???                                                             /
;/ - y2.l    : ???                                                             /
;/ - bt.l    : ???                                                             /
;/ - flags.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_DrawBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,borderType.l,flags.l};,*text.str}
If *tuiEngine\useSkin
  If borderType>0 AND borderType<#TUIMAX_BORDER
    If *tuiEngine\skinImage[borderType]
      ntui_DrawTBImage{*tuiEngine\skinImage[borderType],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If
  End If
End If
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom

Select borderType
  Case #TUIBORDER_FLAT
    Move_    *rp,x1    ,y1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BLACK]
    Draw_    *rp,x2    ,y1
    Draw_    *rp,x2    ,y2
    Draw_    *rp,x1    ,y2
    Draw_    *rp,x1    ,y1

  Case #TUIBORDER_MENUBAR
    Move_    *rp,x1    ,y2-3
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    Draw_    *rp,x2    ,y2-3
    Move_    *rp,x1    ,y2-2
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    Draw_    *rp,x2    ,y2-2
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BACKGROUND]
    Move_    *rp,x1    ,y2-1
    Draw_    *rp,x2    ,y2-1
    Move_    *rp,x1    ,y2
    Draw_    *rp,x2    ,y2

  Case #TUIBORDER_RAISED
    Move_    *rp,x1    ,y2
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    Draw_    *rp,x1    ,y1
    Draw_    *rp,x2    ,y1
    If (flags&#TUIF_DISABLED)
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
    Else
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    End If
    Draw_    *rp,x2    ,y2
    Draw_    *rp,x1    ,y2

  Case #TUIBORDER_PAGEEND
    If (flags&(#TUIF_LEFT |#TUIF_TOP   )) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    If (flags&(#TUIF_RIGHT|#TUIF_BOTTOM)) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]

    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+2    ,y1 :  Draw_    *rp,x1+2    ,y2
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-2 :  Draw_    *rp,x2    ,y2-2
    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-2    ,y1 :  Draw_    *rp,x2-2    ,y2
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+2 :  Draw_    *rp,x2    ,y1+2

    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BACKGROUND]
    If (flags&(#TUIF_TOP   )) Then WritePixel_ *rp,x2,y2-2
    If (flags&(#TUIF_LEFT  )) Then WritePixel_ *rp,x2-2,y2

    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+1    ,y1 :  Draw_    *rp,x1+1    ,y2-1
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-1 :  Draw_    *rp,x2-1    ,y2-1
    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-1    ,y1 :  Draw_    *rp,x2-1    ,y2-1
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+1 :  Draw_    *rp,x2-1    ,y1+1

    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x1    ,y2-1
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2 :  Draw_    *rp,x2-1    ,y2
    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2    ,y1 :  Draw_    *rp,x2    ,y2-1
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x2-1    ,y1

    If (flags&(#TUIF_BOTTOM )) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    If (flags&(#TUIF_RIGHT  |#TUIF_LEFT)|#TUIF_TOP ) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]

    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2      ,y2 :  Draw_    *rp,x2-1    ,y2
    If (flags&#TUIF_TOP)    Then Move_    *rp,x2      ,y2 :  Draw_    *rp,x2    ,y2-1
    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1      ,y2 :  Draw_    *rp,x1+1    ,y2
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x2      ,y1 :  Draw_    *rp,x2    ,y1+1

  Case #TUIBORDER_PAGEBEGIN
    If (flags&(#TUIF_LEFT |#TUIF_TOP  )) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    If (flags&(#TUIF_BOTTOM|#TUIF_RIGHT )) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]

    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+2    ,y1 :  Draw_    *rp,x1+2    ,y2
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-2 :  Draw_    *rp,x2    ,y2-2
    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-2    ,y1 :  Draw_    *rp,x2-2    ,y2
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+2 :  Draw_    *rp,x2    ,y1+2

    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BACKGROUND]
    If (flags&(#TUIF_BOTTOM )) Then WritePixel_ *rp,x1,y1+2
    If (flags&(#TUIF_RIGHT  )) Then WritePixel_ *rp,x1+2,y1


    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+1    ,y1 :  Draw_    *rp,x1+1    ,y2
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-1 :  Draw_    *rp,x2    ,y2-1
    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-1    ,y1 :  Draw_    *rp,x2-1    ,y2
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+1 :  Draw_    *rp,x2    ,y1+1

    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x1    ,y2
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2 :  Draw_    *rp,x2    ,y2
    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2    ,y1 :  Draw_    *rp,x2    ,y2
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x2    ,y1

    If (flags&(#TUIF_BOTTOM |#TUIF_TOP|#TUIF_LEFT|#TUIF_RIGHT)) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
;    If (flags&(#TUIF_RIGHT)) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]

    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2      ,y1 :  Draw_    *rp,x2-1    ,y1
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1      ,y2 :  Draw_    *rp,x1    ,y2-1
    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1      ,y1 :  Draw_    *rp,x1+1    ,y1
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1      ,y1 :  Draw_    *rp,x1    ,y1+1


  Case #TUIBORDER_PAGECONTENT
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    If (flags&#TUIF_LEFT  )=0 Then Move_    *rp,x1    ,y2 : Draw_    *rp,x1    ,y1
    If (flags&#TUIF_TOP   )=0 Then Move_    *rp,x1    ,y1 : Draw_    *rp,x2    ,y1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    If (flags&#TUIF_RIGHT )=0 Then Move_    *rp,x2    ,y1 : Draw_    *rp,x2    ,y2
    If (flags&#TUIF_BOTTOM)=0 Then Move_    *rp,x2    ,y2 : Draw_    *rp,x1    ,y2

    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BACKGROUND]
    If (flags&(#TUIF_RIGHT|#TUIF_TOP   ))=0 Then WritePixel_ *rp,x2,y1
    If (flags&(#TUIF_LEFT |#TUIF_BOTTOM))=0 Then WritePixel_ *rp,x1,y2

  Case #TUIBORDER_PAGETAB
    If (flags&#TUIF_ACTIVE)=0
      If (flags&#TUIF_RIGHT)  Then x2-1
      If (flags&#TUIF_TOP)    Then y1+1
      If (flags&#TUIF_LEFT)   Then x1+1
      If (flags&#TUIF_BOTTOM) Then y2-1
    End If
    Move_    *rp,x1    ,y2
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    Draw_    *rp,x1    ,y1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    Draw_    *rp,x2    ,y1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    Draw_    *rp,x2    ,y2
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    Draw_    *rp,x1    ,y2

    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BACKGROUND]
    If (flags&(#TUIF_RIGHT|#TUIF_TOP   )) Then WritePixel_ *rp,x2,y1
    If (flags&(#TUIF_LEFT |#TUIF_BOTTOM)) Then WritePixel_ *rp,x1,y2

    If (flags&(#TUIF_TOP   )) Then WritePixel_ *rp,x2,y2-2
    If (flags&(#TUIF_BOTTOM)) Then WritePixel_ *rp,x1,y1+2
    If (flags&(#TUIF_LEFT  )) Then WritePixel_ *rp,x2-2,y2
    If (flags&(#TUIF_RIGHT )) Then WritePixel_ *rp,x1+2,y1


    If (flags&#TUIF_ACTIVE)=0  ; shadow
      If (flags&(#TUIF_TOP|#TUIF_LEFT))
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
      Else
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
      End If
    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+3    ,y1+0 :  Draw_    *rp,x1+3    ,y2-1
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1+0    ,y2-3 :  Draw_    *rp,x2-1    ,y2-3
    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-3    ,y1+0 :  Draw_    *rp,x2-3    ,y2-1
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1+0    ,y1+3 :  Draw_    *rp,x2-1    ,y1+3

    Else
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
      If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+3    ,y1+1 :  Draw_    *rp,x1+3    ,y2-1
      If (flags&#TUIF_TOP)    Then Move_    *rp,x1+1    ,y2-3 :  Draw_    *rp,x2-1    ,y2-3
      If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-3    ,y1+1 :  Draw_    *rp,x2-3    ,y2-1
      If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1+1    ,y1+3 :  Draw_    *rp,x2-1    ,y1+3

      If (flags&#TUIF_RIGHT)  Then Move_    *rp,x2-1    ,y1+1 :  Draw_    *rp,x2-1    ,y2-1
      If (flags&#TUIF_TOP)    Then Move_    *rp,x1+1    ,y1+1 :  Draw_    *rp,x2-1    ,y1+1
      If (flags&#TUIF_LEFT)   Then Move_    *rp,x1+1    ,y1+1 :  Draw_    *rp,x1+1    ,y2-1
      If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1+1    ,y2-1 :  Draw_    *rp,x2-1    ,y2-1


    End If


    If (flags&#TUIF_ACTIVE)=0  ; shine
      If (flags&(#TUIF_TOP|#TUIF_LEFT))
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
      Else
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
      End If
      If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+2    ,y1 :  Draw_    *rp,x1+2    ,y2
      If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-2 :  Draw_    *rp,x2    ,y2-2
      If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-2    ,y1 :  Draw_    *rp,x2-2    ,y2
      If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+2 :  Draw_    *rp,x2    ,y1+2

    Else
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
      If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+2    ,y1+1 :  Draw_    *rp,x1+2    ,y2-1
      If (flags&#TUIF_TOP)    Then Move_    *rp,x1+1   ,y2-2 :  Draw_    *rp,x2-1    ,y2-2
      If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-2    ,y1+1 :  Draw_    *rp,x2-2    ,y2-1
      If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1+1    ,y1+2 :  Draw_    *rp,x2-1    ,y1+2

    End If


    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+1    ,y1 :  Draw_    *rp,x1+1    ,y2
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-1 :  Draw_    *rp,x2    ,y2-1
    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-1    ,y1 :  Draw_    *rp,x2-1    ,y2
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+1 :  Draw_    *rp,x2    ,y1+1

    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x1    ,y2
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2 :  Draw_    *rp,x2    ,y2
    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2    ,y1 :  Draw_    *rp,x2    ,y2
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x2    ,y1

  Case #TUIBORDER_RECESSED
    Move_    *rp,x1    ,y2
    If (flags&#TUIF_DISABLED)
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
    Else
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    End If
    Draw_    *rp,x1    ,y1
    Draw_    *rp,x2    ,y1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    Draw_    *rp,x2    ,y2
    Draw_    *rp,x1    ,y2

  Case #TUIBORDER_STRING
    If (flags&(#TUIF_DISABLED))
    Move_    *rp,x1    ,y2
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    Draw_    *rp,x1    ,y1
    Draw_    *rp,x2    ,y1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    Draw_    *rp,x2    ,y2
    Draw_    *rp,x1    ,y2

    Move_    *rp,x1+1    ,y2-1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    Draw_    *rp,x1+1    ,y1+1
    Draw_    *rp,x2-1    ,y1+1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    Draw_    *rp,x2-1    ,y2-1
    Draw_    *rp,x1+1    ,y2-1

    Else
    Move_    *rp,x1    ,y2
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    Draw_    *rp,x1    ,y1
    Draw_    *rp,x2    ,y1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    Draw_    *rp,x2    ,y2
    Draw_    *rp,x1    ,y2

    Move_    *rp,x1+1    ,y2-1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    Draw_    *rp,x1+1    ,y1+1
    Draw_    *rp,x2-1    ,y1+1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE ]
    Draw_    *rp,x2-1    ,y2-1
    Draw_    *rp,x1+1    ,y2-1
    End If

  Case #TUIBORDER_GROUP
    Move_    *rp,x1    ,y1
    If (flags&#TUIF_DISABLED)
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
    Else
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    End If
    Draw_    *rp,x2-1  ,y1
    Draw_    *rp,x2-1  ,y2-1
    Draw_    *rp,x1    ,y2-1
    Draw_    *rp,x1    ,y1+1

    Move_    *rp,x1+1  ,y1+1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    Draw_    *rp,x2    ,y1+1
    Draw_    *rp,x2    ,y2
    Draw_    *rp,x1+1  ,y2
    Draw_    *rp,x1+1  ,y1+1

  Case #TUIBORDER_TITLE
    ;SetFont_ *rp,*tuiEngine\font[#TUIFONT_NORMAL]
    yt1.l = y1
    yt2.l = y1+(*tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize+1)
    y1=y1+(*tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize+1)/2
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BACKGROUND]
    RectFill_ *rp,x1,yt1,x2,yt2

    Move_    *rp,x1    ,y1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    Draw_    *rp,x2-1  ,y1
    Draw_    *rp,x2-1  ,y2-1
    Draw_    *rp,x1    ,y2-1
    Draw_    *rp,x1    ,y1+1

    Move_    *rp,x1+1  ,y1+1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    Draw_    *rp,x2    ,y1+1
    Draw_    *rp,x2    ,y2
    Draw_    *rp,x1+1  ,y2
    Draw_    *rp,x1+1  ,y1+1


  Case #TUIBORDER_TOOL
    If (flags&(#TUIF_ACTIVE|#TUIF_FOCUS))
      Move_    *rp,x1    ,y2
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
      Draw_    *rp,x1    ,y1
      Draw_    *rp,x2    ,y1
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
      Draw_    *rp,x2    ,y2
      Draw_    *rp,x1    ,y2
    Else
    If ( (flags&#TUIF_MOVER><0) AND (flags&#TUIF_DISABLED=0))
      Move_    *rp,x1    ,y2
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
      Draw_    *rp,x1    ,y1
      Draw_    *rp,x2    ,y1
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
      Draw_    *rp,x2    ,y2
      Draw_    *rp,x1    ,y2
    Else
      ;Move_    *rp,x1    ,y2
      ;SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BACKGROUND]
      ;Draw_    *rp,x1    ,y1
      ;Draw_    *rp,x2    ,y1
      ;Draw_    *rp,x2    ,y2
      ;Draw_    *rp,x1    ,y2
    End If
    End If

  Case #TUIBORDER_BUTTON
    ntui_DrawButtonBorder{*tuiEngine,*rp,*bbox,flags}

  Case #TUIBORDER_NONE

  Default
    Move_    *rp,x1    ,y1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
    Draw_    *rp,x2    ,y1
    Draw_    *rp,x2    ,y2
    Draw_    *rp,x1    ,y2
    Draw_    *rp,x1    ,y1

End Select
;SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BACKGROUND]
;WritePixel_ *rp,x1,y1
;WritePixel_ *rp,x2,y1
;WritePixel_ *rp,x1,y2
;WritePixel_ *rp,x2,y2
Function Return 0
End Function



