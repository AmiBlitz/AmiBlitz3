; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1497
; CursorColumn    = 24
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: ntui_border.include                                                   /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 06/01/2009                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_GetBorderSize {*tuiEngine.tuiEngine,bt.l,*bs.tuiBorderSize}    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : ???                                             /
;/ - bt.l    : ???                                                             /
;/ - *bs.tuiBorderSize    : ???                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_GetBorderSize{*tuiEngine.tuiEngine,borderType.l,flags.l,*bs.tuiRect}
Select borderType
  Case #TUIBORDER_FLAT
    If *tuiEngine\skinImage[#TUISKIN_FLATBORDER]
      _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_FLATBORDER],*bs}
    Else
      *bs\left = 1,1,1,1
    End If
  Case #TUIBORDER_RAISED
    If *tuiEngine\skinImage[#TUISKIN_RAISEDBORDER]
      _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_RAISEDBORDER],*bs}
    Else
      If *tuiEngine\borderStyle=0
        *bs\left = 1,1,1,1
      Else
        *bs\left = 2,2,2,2
      End If
    End If

  Case #TUIBORDER_TOOL
    If *tuiEngine\skinImage[#TUISKIN_TOOL]
      _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_TOOL],*bs}
    Else
      *bs\left = 1,1,1,1
    End If

  Case #TUIBORDER_RECESSED
    If *tuiEngine\skinImage[#TUISKIN_RECESSEDBORDER]
      _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_RECESSEDBORDER],*bs}
    Else
      If *tuiEngine\borderStyle=0
        *bs\left = 1,1,1,1
      Else
        *bs\left = 2,2,2,2
      End If
    End If

  Case #TUIBORDER_GROUP
    If *tuiEngine\skinImage[#TUISKIN_GROUPBORDER]
      _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_GROUPBORDER],*bs}
    Else
      If *tuiEngine\borderStyle=0
        *bs\left = 1,1,1,1
      Else
        *bs\left = 2,2,2,2
      End If
    End If

  Case #TUIBORDER_BUTTON
    If *tuiEngine\skinImage[#TUISKIN_BUTTON]
      _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_BUTTON],*bs}
    Else
      If *tuiEngine\borderStyle=0
        *bs\left = 1,1,1,1
      Else
        *bs\left = 2,2,2,2
      End If
    End If

  Case #TUIBORDER_STRING
    If *tuiEngine\skinImage[#TUISKIN_STRING]
      _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_STRING],*bs}
    Else
      If *tuiEngine\borderStyle=0
        *bs\left = 1,1,1,1
      Else
        *bs\left = 2,2,2,2
      End If
    End If

  Case #TUIBORDER_TITLE
    If *tuiEngine\skinImage[#TUISKIN_TITLEBORDER]
      _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_TITLEBORDER],*bs}
    Else
      If *tuiEngine\borderStyle=0
        *bs\left = 1,1,1,1
      Else
        *bs\left = 2,2,2,2
      End If
      *bs\top = *tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize+1
    End If

  Case #TUIBORDER_MENUBAR
    If *tuiEngine\skinImage[#TUISKIN_MENUBAR]
      _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_MENUBAR],*bs}
    Else
      *bs\left = 0,0,0,4
    End If

  Case #TUIBORDER_WINDOW   : *bs\left = 0,0,0,0 ; we dont know the window border size!

  Case #TUIBORDER_NONE     : *bs\left = 0,0,0,0

  Case #TUIBORDER_PAGETAB
    If (flags&#TUIF_LEFT)
      If *tuiEngine\skinImage[#TUISKIN_PAGETAB_L]
        _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_PAGETAB_L],*bs}
        Statement Return
      End If
    End If
    If (flags&#TUIF_TOP)
      If *tuiEngine\skinImage[#TUISKIN_PAGETAB_T]
        _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_PAGETAB_T],*bs}
        Statement Return
      End If
    End If
    If (flags&#TUIF_RIGHT)
      If *tuiEngine\skinImage[#TUISKIN_PAGETAB_R]
        _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_PAGETAB_R],*bs}
        Statement Return
      End If
    End If
    If (flags&#TUIF_BOTTOM)
      If *tuiEngine\skinImage[#TUISKIN_PAGETAB_B]
        _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_PAGETAB_B],*bs}
        Statement Return
      End If
    End If
    If *tuiEngine\borderStyle=0
      *bs\left = 1,1,1,1
      If (flags&#TUIF_LEFT)   Then *bs\left = 2,1,4,1
      If (flags&#TUIF_TOP)    Then *bs\left = 1,2,1,4
      If (flags&#TUIF_RIGHT)  Then *bs\left = 4,1,2,1
      If (flags&#TUIF_BOTTOM) Then *bs\left = 1,4,1,2
    Else
      *bs\left = 2,2,2,2
      If (flags&#TUIF_LEFT)   Then *bs\left = 3,2,5,2
      If (flags&#TUIF_TOP)    Then *bs\left = 2,3,2,5
      If (flags&#TUIF_RIGHT)  Then *bs\left = 5,2,3,2
      If (flags&#TUIF_BOTTOM) Then *bs\left = 2,5,2,3
    End If

  Case #TUIBORDER_PAGECONTENT
    If (flags&#TUIF_LEFT)
      If *tuiEngine\skinImage[#TUISKIN_PAGECONTENT_L]
        _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_PAGECONTENT_L],*bs}
        Statement Return
      End If
    End If
    If (flags&#TUIF_TOP)
      If *tuiEngine\skinImage[#TUISKIN_PAGECONTENT_T]
        _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_PAGECONTENT_T],*bs}
        Statement Return
      End If
    End If
    If (flags&#TUIF_RIGHT)
      If *tuiEngine\skinImage[#TUISKIN_PAGECONTENT_R]
        _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_PAGECONTENT_R],*bs}
        Statement Return
      End If
    End If
    If (flags&#TUIF_BOTTOM)
      If *tuiEngine\skinImage[#TUISKIN_PAGECONTENT_B]
        _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_PAGECONTENT_B],*bs}
        Statement Return
      End If
    End If
    If *tuiEngine\borderStyle=0
      *bs\left = 1,1,1,1
      If (flags&#TUIF_LEFT)   Then *bs\left = 0,1,1,1
      If (flags&#TUIF_TOP)    Then *bs\left = 1,0,1,1
      If (flags&#TUIF_RIGHT)  Then *bs\left = 1,1,0,1
      If (flags&#TUIF_BOTTOM) Then *bs\left = 1,1,1,0
    Else
      *bs\left = 2,2,2,2
      If (flags&#TUIF_LEFT)   Then *bs\left = 0,2,2,2
      If (flags&#TUIF_TOP)    Then *bs\left = 2,0,2,2
      If (flags&#TUIF_RIGHT)  Then *bs\left = 2,2,0,2
      If (flags&#TUIF_BOTTOM) Then *bs\left = 2,2,2,0
    End If

  Case #TUIBORDER_PAGEBEGIN  : *bs\left = 1,1,1,1
    If (flags&#TUIF_LEFT)
      If *tuiEngine\skinImage[#TUISKIN_PAGEBEGIN_L]
        _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_PAGEBEGIN_L],*bs}
      End If
    End If
    If (flags&#TUIF_TOP)
      If *tuiEngine\skinImage[#TUISKIN_PAGEBEGIN_T]
        _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_PAGEBEGIN_T],*bs}
      End If
    End If
    If (flags&#TUIF_RIGHT)
      If *tuiEngine\skinImage[#TUISKIN_PAGEBEGIN_R]
        _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_PAGEBEGIN_R],*bs}
      End If
    End If
    If (flags&#TUIF_BOTTOM)
      If *tuiEngine\skinImage[#TUISKIN_PAGEBEGIN_B]
        _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_PAGEBEGIN_B],*bs}
      End If
    End If
    If *tuiEngine\borderStyle=0
      *bs\left = 1,1,1,1
      If (flags&#TUIF_LEFT)   Then *bs\left = 2,1,4,1
      If (flags&#TUIF_TOP)    Then *bs\left = 1,2,1,4
      If (flags&#TUIF_RIGHT)  Then *bs\left = 4,1,2,1
      If (flags&#TUIF_BOTTOM) Then *bs\left = 1,4,1,2
    Else
      *bs\left = 2,2,2,2
      If (flags&#TUIF_LEFT)   Then *bs\left = 3,20,5,2
      If (flags&#TUIF_TOP)    Then *bs\left = 20,3,2,5
      If (flags&#TUIF_RIGHT)  Then *bs\left = 5,20,3,2
      If (flags&#TUIF_BOTTOM) Then *bs\left = 2,5,20,3
    End If


  Case #TUIBORDER_PAGEEND
    If (flags&#TUIF_LEFT)
      If *tuiEngine\skinImage[#TUISKIN_PAGEEND_L]
        _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_PAGEEND_L],*bs}
      End If
    End If
    If (flags&#TUIF_TOP)
      If *tuiEngine\skinImage[#TUISKIN_PAGEEND_T]
        _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_PAGEEND_T],*bs}
      End If
    End If
    If (flags&#TUIF_RIGHT)
      If *tuiEngine\skinImage[#TUISKIN_PAGEEND_R]
        _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_PAGEEND_R],*bs}
      End If
    End If
    If (flags&#TUIF_BOTTOM)
      If *tuiEngine\skinImage[#TUISKIN_PAGEEND_B]
        _ntui_GetImageBorderSize{*tuiEngine\skinImage[#TUISKIN_PAGEEND_B],*bs}
      End If
    End If
    If *tuiEngine\borderStyle=0
      *bs\left = 1,1,1,1
      If (flags&#TUIF_LEFT)   Then *bs\left = 2,1,4,1
      If (flags&#TUIF_TOP)    Then *bs\left = 1,2,1,4
      If (flags&#TUIF_RIGHT)  Then *bs\left = 4,1,2,1
      If (flags&#TUIF_BOTTOM) Then *bs\left = 1,4,1,2
    Else
      *bs\left = 2,2,2,2
      If (flags&#TUIF_LEFT)   Then *bs\left = 3,20,5,2
      If (flags&#TUIF_TOP)    Then *bs\left = 20,3,2,5
      If (flags&#TUIF_RIGHT)  Then *bs\left = 5,20,3,2
      If (flags&#TUIF_BOTTOM) Then *bs\left = 2,5,20,3
    End If

  Default                  : *bs\left = 1,1,1,1
End Select
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawButtonBorder {*tuiEngine.tuiEngine,*rp.RastPort,x1.l,y1.:: /
;/ l,x2.l,y2.l,flags.l}                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : ???                                             /
;/ - *rp.RastPort    : ???                                                     /
;/ - x1.l    : ???                                                             /
;/ - y1.l    : ???                                                             /
;/ - x2.l    : ???                                                             /
;/ - y2.l    : ???                                                             /
;/ - flags.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _ntui_DrawThinButtonBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,flags.l}
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom

If (flags&#TUIF_DISABLED)
  Move_    *rp,x2  ,y1
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
  Draw_    *rp,x2  ,y2
  Draw_    *rp,x1  ,y2

  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
  Draw_    *rp,x1  ,y1
  Draw_    *rp,x2  ,y1

;  Move_    *rp,x2-1,y1+1
;  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
;  Draw_    *rp,x2-1,y2-1
;  Draw_    *rp,x1+1,y2-1

;  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
;  Draw_    *rp,x1+1,y1+1
;  Draw_    *rp,x2-2,y1+1

  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
  WritePixel_ *rp,x2,y1
  WritePixel_ *rp,x1,y2
Else
  If (flags&#TUIF_ACTIVE)
    Move_    *rp,x1  ,y1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BLACK]
    Draw_    *rp,x2  ,y1
    Draw_    *rp,x2  ,y2
    Draw_    *rp,x1  ,y2
    Draw_    *rp,x1  ,y1

;    Move_    *rp,x2-1,y1+1
;    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
;    Draw_    *rp,x2-1,y2-1
;    Draw_    *rp,x1+1,y2-1

;    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
;    Draw_    *rp,x1+1,y1+1
;    Draw_    *rp,x2-2,y1+1
  Else
    If flags&#TUIF_MOVER
      Move_    *rp,x2  ,y1
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
      Draw_    *rp,x2  ,y2
      Draw_    *rp,x1  ,y2

      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
      Draw_    *rp,x1  ,y1
      Draw_    *rp,x2  ,y1

;      Move_    *rp,x2-1,y1+1
;      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
;      Draw_    *rp,x2-1,y2-1
;      Draw_    *rp,x1+1,y2-1

;      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
;      Draw_    *rp,x1+1,y1+1
;      Draw_    *rp,x2-2,y1+1

;      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
;      WritePixel_ *rp,x2-1,y1+1
;      WritePixel_ *rp,x1+1,y2-1

;    Else
;      If flags&#TUIF_FOCUS
;        Move_    *rp,x1  ,y1
;        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
;        Draw_    *rp,x2  ,y1
;        Draw_    *rp,x2  ,y2
;        Draw_    *rp,x1  ,y2
;        Draw_    *rp,x1  ,y1

;        Move_    *rp,x2-1,y1+1
 ;       SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
;        Draw_    *rp,x2-1,y2-1
;        Draw_    *rp,x1+1,y2-1

;        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
;        Draw_    *rp,x1+1,y1+1
;        Draw_    *rp,x2-2,y1+1

;        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
;        WritePixel_ *rp,x2-1,y1+1
;        WritePixel_ *rp,x1+1,y2-1

      Else
        Move_    *rp,x2  ,y1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
        Draw_    *rp,x2  ,y2
        Draw_    *rp,x1  ,y2

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
        Draw_    *rp,x1  ,y1
        Draw_    *rp,x2  ,y1

;        Move_    *rp,x2-1,y1+1
;        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
;        Draw_    *rp,x2-1,y2-1
;        Draw_    *rp,x1+1,y2-1

;        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
;        Draw_    *rp,x1+1,y1+1
;        Draw_    *rp,x2-2,y1+1

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
        WritePixel_ *rp,x2,y1
        WritePixel_ *rp,x1,y2

      ;End If
    EndIf
  End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawButtonBorder {*tuiEngine.tuiEngine,*rp.RastPort,x1.l,y1.:: /
;/ l,x2.l,y2.l,flags.l}}                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////

Statement _ntui_DrawThinRaisedBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,flags.l}
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom

Move_    *rp,x1    ,y2
If (flags&#TUIF_DISABLED)
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
Else
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
End If
Draw_    *rp,x1    ,y1
Draw_    *rp,x2    ,y1
SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
Draw_    *rp,x2    ,y2
Draw_    *rp,x1    ,y2

SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
WritePixel_ *rp,x2,y1
WritePixel_ *rp,x1,y2
End Statement



Statement _ntui_DrawDottedBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,flags.l}
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom

SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
For x.l=x1+1 To x2-1 Step 2
  WritePixel_ *rp,x,y1
  WritePixel_ *rp,x,y2
Next

For y.l=y1+1 To y2-1 Step 2
  WritePixel_ *rp,x1,y
  WritePixel_ *rp,x2,y
Next

End Statement

Statement _ntui_DrawRoundBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,flags.l}

x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom

End Statement

Statement _ntui_DrawThinRecessedBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,flags.l}
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom

Move_    *rp,x1    ,y2
If (flags&#TUIF_DISABLED)
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
Else
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
End If
Draw_    *rp,x1    ,y1
Draw_    *rp,x2    ,y1
SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
Draw_    *rp,x2    ,y2
Draw_    *rp,x1    ,y2

SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
WritePixel_ *rp,x2,y1
WritePixel_ *rp,x1,y2
End Statement

Statement _ntui_DrawThickRaisedBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,flags.l}
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom

If (flags&#TUIF_DISABLED)
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
Else
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
End If

Move_    *rp,x2  ,y1
Draw_    *rp,x2  ,y2
Draw_    *rp,x1  ,y2
If (flags&#TUIF_DISABLED)
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
Else
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
End If

Draw_    *rp,x1  ,y1
Draw_    *rp,x2  ,y1

Move_    *rp,x2-1,y1+1
SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
Draw_    *rp,x2-1,y2-1
Draw_    *rp,x1+1,y2-1

SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
Draw_    *rp,x1+1,y1+1
Draw_    *rp,x2-2,y1+1

SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFHALFSHADOW]
WritePixel_ *rp,x2-1,y1+1
WritePixel_ *rp,x1+1,y2-1
SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
WritePixel_ *rp,x2,y1
WritePixel_ *rp,x1,y2

End Statement

Statement _ntui_DrawThickPageTabBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,flags.l}
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom

If (flags&#TUIF_ACTIVE)=0
  If (flags&#TUIF_RIGHT)  Then x2-1
  If (flags&#TUIF_TOP)    Then y1+1
  If (flags&#TUIF_LEFT)   Then x1+1
  If (flags&#TUIF_BOTTOM) Then y2-1
End If

If (flags&(#TUIF_TOP|#TUIF_LEFT|#TUIF_BOTTOM))
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
  Move_    *rp,x1    ,y2   : Draw_    *rp,x1    ,y1
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
  Move_    *rp,x1+1  ,y2-1 : Draw_    *rp,x1+1    ,y1+1
End If

If (flags&(#TUIF_RIGHT|#TUIF_LEFT|#TUIF_TOP))
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
  Move_ *rp,x1    ,y1 : Draw_    *rp,x2    ,y1
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
  Move_ *rp,x1+1    ,y1+1 : Draw_    *rp,x2-1    ,y1+1
End If

If (flags&(#TUIF_BOTTOM|#TUIF_RIGHT|#TUIF_TOP))
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
  Move_ *rp,x2    ,y1 : Draw_    *rp,x2    ,y2
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
  Move_  *rp,x2-1    ,y1+1 : Draw_    *rp,x2-1    ,y2-1
EndIf

If (flags&(#TUIF_RIGHT|#TUIF_LEFT|#TUIF_BOTTOM))
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
  Move_  *rp,x2    ,y2 : Draw_    *rp,x1    ,y2
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
  Move_  *rp,x2-1  ,y2-1 : Draw_    *rp,x1+1    ,y2-1
End If



If (flags&#TUIF_ACTIVE)=0  ; shadow
  If (flags&(#TUIF_TOP|#TUIF_LEFT))
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
  Else
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
  End If
  If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+4    ,y1+1 :  Draw_    *rp,x1+4    ,y2-1
  If (flags&#TUIF_TOP)    Then Move_    *rp,x1+1    ,y2-4 :  Draw_    *rp,x2-1    ,y2-4
  If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-4    ,y1+1 :  Draw_    *rp,x2-4    ,y2-1
  If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1+1    ,y1+4 :  Draw_    *rp,x2-1    ,y1+4

Else
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
  If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+4    ,y1+2 :  Draw_    *rp,x1+4    ,y2-2
  If (flags&#TUIF_TOP)    Then Move_    *rp,x1+2    ,y2-4 :  Draw_    *rp,x2-2    ,y2-4
  If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-4    ,y1+2 :  Draw_    *rp,x2-4    ,y2-2
  If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1+2    ,y1+4 :  Draw_    *rp,x2-2    ,y1+4

  If (flags&#TUIF_RIGHT)  Then Move_    *rp,x2-2    ,y1+2 :  Draw_    *rp,x2-2    ,y2-2 ; top border
  If (flags&#TUIF_TOP)    Then Move_    *rp,x1+2    ,y1+2 :  Draw_    *rp,x2-2    ,y1+2
  If (flags&#TUIF_LEFT)   Then Move_    *rp,x1+2    ,y1+2 :  Draw_    *rp,x1+2    ,y2-2
  If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1+2    ,y2-2 :  Draw_    *rp,x2-2    ,y2-2
End If

If (flags&#TUIF_ACTIVE)=0  ; shine
  If (flags&(#TUIF_TOP|#TUIF_LEFT))
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
  Else
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
  End If
Else
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
End If

If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+3    ,y1+0 :  Draw_    *rp,x1+3    ,y2-0
If (flags&#TUIF_TOP)    Then Move_    *rp,x1+0    ,y2-3 :  Draw_    *rp,x2-0    ,y2-3
If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-3    ,y1+0 :  Draw_    *rp,x2-3    ,y2-0
If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1+0    ,y1+3 :  Draw_    *rp,x2-0    ,y1+3

SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+2    ,y1 :  Draw_    *rp,x1+2    ,y2
If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-2 :  Draw_    *rp,x2    ,y2-2
If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-2    ,y1 :  Draw_    *rp,x2-2    ,y2
If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+2 :  Draw_    *rp,x2    ,y1+2

SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+1    ,y1 :  Draw_    *rp,x1+1    ,y2
If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-1 :  Draw_    *rp,x2    ,y2-1
If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-1    ,y1 :  Draw_    *rp,x2-1    ,y2
If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+1 :  Draw_    *rp,x2    ,y1+1


If (flags&(#TUIF_TOP|#TUIF_LEFT))
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
Else
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
End If

If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x1    ,y2
If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2 :  Draw_    *rp,x2    ,y2
If (flags&#TUIF_LEFT)   Then Move_    *rp,x2    ,y1 :  Draw_    *rp,x2    ,y2
If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x2    ,y1

;SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
;If (flags&(#TUIF_RIGHT|#TUIF_TOP   )) Then WritePixel_ *rp,x2-1,y1+1
;If (flags&(#TUIF_LEFT |#TUIF_BOTTOM)) Then WritePixel_ *rp,x1+1,y2-1
;
;If (flags&(#TUIF_TOP   )) Then WritePixel_ *rp,x2,y2-2
;If (flags&(#TUIF_BOTTOM)) Then WritePixel_ *rp,x1,y1+2
;If (flags&(#TUIF_LEFT  )) Then WritePixel_ *rp,x2-2,y2
;If (flags&(#TUIF_RIGHT )) Then WritePixel_ *rp,x1+2,y1
;

End Statement

Statement _ntui_DrawThickPageEndBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,flags.l}
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom

If (flags&(#TUIF_LEFT |#TUIF_TOP   )) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]   ; top line
If (flags&(#TUIF_RIGHT|#TUIF_BOTTOM)) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]

If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+3    ,y1 :  Draw_    *rp,x1+3    ,y2
If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-3 :  Draw_    *rp,x2    ,y2-3
If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-3    ,y1 :  Draw_    *rp,x2-3    ,y2
If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+3 :  Draw_    *rp,x2    ,y1+3

SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]                                             ; fill
If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+1    ,y1 :  Draw_    *rp,x1+1    ,y2-1
If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-1 :  Draw_    *rp,x2-1    ,y2-1
If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-1    ,y1 :  Draw_    *rp,x2-1    ,y2-1
If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+1 :  Draw_    *rp,x2-1    ,y1+1

If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+2    ,y1 :  Draw_    *rp,x1+2    ,y2-1
If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-2 :  Draw_    *rp,x2-1    ,y2-2
If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-2    ,y1 :  Draw_    *rp,x2-2    ,y2-1
If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+2 :  Draw_    *rp,x2-1    ,y1+2


If (flags&(#TUIF_LEFT |#TUIF_TOP   )) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]   ; bottom line
If (flags&(#TUIF_RIGHT|#TUIF_BOTTOM)) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]

If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x1    ,y2
If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2 :  Draw_    *rp,x2    ,y2
If (flags&#TUIF_LEFT)   Then Move_    *rp,x2    ,y1 :  Draw_    *rp,x2    ,y2
If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x2    ,y1


 ;     SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
 ;     If (flags&(#TUIF_TOP   )) Then WritePixel_ *rp,x2,y2-2
 ;     If (flags&(#TUIF_LEFT  )) Then WritePixel_ *rp,x2-2,y2

      If (flags&(#TUIF_BOTTOM )) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]  ; side line
      If (flags&(#TUIF_RIGHT  |#TUIF_LEFT)|#TUIF_TOP ) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]

      If (flags&#TUIF_LEFT)   Then Move_    *rp,x2      ,y2 :  Draw_    *rp,x2-2    ,y2
      If (flags&#TUIF_TOP)    Then Move_    *rp,x2      ,y2 :  Draw_    *rp,x2    ,y2-2
      If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1      ,y2 :  Draw_    *rp,x1+2    ,y2
      If (flags&#TUIF_BOTTOM) Then Move_    *rp,x2      ,y1 :  Draw_    *rp,x2    ,y1+2

End Statement

Statement _ntui_DrawThickPageBeginBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,flags.l}
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom

If (flags&(#TUIF_LEFT |#TUIF_TOP   )) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]   ; top line
If (flags&(#TUIF_RIGHT|#TUIF_BOTTOM)) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]

If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+3    ,y1 :  Draw_    *rp,x1+3    ,y2
If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-3 :  Draw_    *rp,x2    ,y2-3
If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-3    ,y1 :  Draw_    *rp,x2-3    ,y2
If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+3 :  Draw_    *rp,x2    ,y1+3

SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]                                             ; fill
If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+1    ,y1 :  Draw_    *rp,x1+1    ,y2-0
If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-1 :  Draw_    *rp,x2-0    ,y2-1
If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-1    ,y1 :  Draw_    *rp,x2-1    ,y2-0
If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+1 :  Draw_    *rp,x2-0    ,y1+1

If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+2    ,y1 :  Draw_    *rp,x1+2    ,y2-0
If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-2 :  Draw_    *rp,x2-0    ,y2-2
If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-2    ,y1 :  Draw_    *rp,x2-2    ,y2-0
If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+2 :  Draw_    *rp,x2-0    ,y1+2


If (flags&(#TUIF_LEFT |#TUIF_TOP   )) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]   ; bottom line
If (flags&(#TUIF_RIGHT|#TUIF_BOTTOM)) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]

If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x1    ,y2
If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2 :  Draw_    *rp,x2    ,y2
If (flags&#TUIF_LEFT)   Then Move_    *rp,x2    ,y1 :  Draw_    *rp,x2    ,y2
If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x2    ,y1


    If (flags&(#TUIF_BOTTOM |#TUIF_TOP|#TUIF_LEFT|#TUIF_RIGHT)) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
;    If (flags&(#TUIF_RIGHT)) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]

    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2      ,y1 :  Draw_    *rp,x2-2    ,y1
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1      ,y2 :  Draw_    *rp,x1    ,y2-2
    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1      ,y1 :  Draw_    *rp,x1+2    ,y1
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1      ,y1 :  Draw_    *rp,x1    ,y1+2

End Statement




Statement _ntui_DrawThickPageContentBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,flags.l}
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom

If (flags&#TUIF_DISABLED)
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
Else
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
End If

If (flags&(#TUIF_TOP|#TUIF_LEFT|#TUIF_BOTTOM))   Then Move_    *rp,x2  ,y1 : Draw_    *rp,x2  ,y2
If (flags&(#TUIF_TOP|#TUIF_LEFT|#TUIF_RIGHT))    Then Move_    *rp,x2,  y2 : Draw_    *rp,x1  ,y2

If (flags&#TUIF_DISABLED)
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
Else
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
End If

If (flags&(#TUIF_TOP|#TUIF_RIGHT|#TUIF_BOTTOM))  Then Move_    *rp,x1,y2 : Draw_    *rp,x1  ,y1
If (flags&(#TUIF_RIGHT|#TUIF_LEFT|#TUIF_BOTTOM)) Then Move_    *rp,x1,y1 : Draw_    *rp,x2  ,y1

SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
If (flags&(#TUIF_TOP|#TUIF_LEFT|#TUIF_BOTTOM))   Then Move_    *rp,x2-1,y1+1 : Draw_    *rp,x2-1,y2-1
If (flags&(#TUIF_TOP|#TUIF_LEFT|#TUIF_RIGHT))    Then Move_    *rp,x2-1,y2-1 : Draw_    *rp,x1+1,y2-1

SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
If (flags&(#TUIF_TOP|#TUIF_RIGHT|#TUIF_BOTTOM))  Then Move_    *rp,x1+1,y2-1: Draw_    *rp,x1+1,y1+1
If (flags&(#TUIF_RIGHT|#TUIF_LEFT|#TUIF_BOTTOM)) Then Move_    *rp,x1+1,y1+1: Draw_    *rp,x2-2,y1+1

SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFHALFSHADOW]
If (flags&(#TUIF_LEFT|#TUIF_BOTTOM))
;  WritePixel_ *rp,x2-1,y1+1
;  WritePixel_ *rp,x1+1,y2-1
End If
SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
If (flags&(#TUIF_RIGHT|#TUIF_TOP))
;  WritePixel_ *rp,x2,y1
;  WritePixel_ *rp,x1,y2
End If
End Statement


Statement _ntui_DrawThickRecessedBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,flags.l}
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom

Move_    *rp,x1    ,y2
If (flags&#TUIF_DISABLED)
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHINE]
Else
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
End If

Move_    *rp,x2  ,y1
Draw_    *rp,x2  ,y2
Draw_    *rp,x1  ,y2
If (flags&#TUIF_DISABLED)
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
Else
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
End If

Draw_    *rp,x1  ,y1
Draw_    *rp,x2  ,y1

Move_    *rp,x2-1,y1+1
SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
Draw_    *rp,x2-1,y2-1
Draw_    *rp,x1+1,y2-1

SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
Draw_    *rp,x1+1,y1+1
Draw_    *rp,x2-2,y1+1

SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFHALFSHADOW]
WritePixel_ *rp,x2-1,y1+1
WritePixel_ *rp,x1+1,y2-1
SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
WritePixel_ *rp,x2,y1
WritePixel_ *rp,x1,y2

End Statement

Statement _ntui_DrawThinGroupBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,flags.l}
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom
Move_    *rp,x1    ,y2
If (flags&#TUIF_DISABLED)
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
Else
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
End If
Draw_    *rp,x1    ,y1
Draw_    *rp,x2    ,y1
Draw_    *rp,x2    ,y2
Draw_    *rp,x1    ,y2
End Statement

Statement _ntui_DrawThickGroupBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,flags.l}
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom

Move_    *rp,x1    ,y1
If (flags&#TUIF_DISABLED)
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
Else
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
End If
Draw_    *rp,x2-1  ,y1
Draw_    *rp,x2-1  ,y2-1
Draw_    *rp,x1    ,y2-1
Draw_    *rp,x1    ,y1+1

Move_    *rp,x1+1  ,y1+1
SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
Draw_    *rp,x2    ,y1+1
Draw_    *rp,x2    ,y2
Draw_    *rp,x1+1  ,y2
Draw_    *rp,x1+1  ,y1+1

SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
WritePixel_ *rp,x2,y1
WritePixel_ *rp,x1,y2
WritePixel_ *rp,x2-1,y1+1
WritePixel_ *rp,x1+1,y2-1

End Statement


Statement _ntui_DrawThickButtonBorder{*tuiEngine.tuiEngine,*rp.RastPort,*bbox.tuiRect,flags.l}
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom

If (flags&#TUIF_DISABLED)
  Move_    *rp,x2  ,y1
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
  Draw_    *rp,x2  ,y2
  Draw_    *rp,x1  ,y2

  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
  Draw_    *rp,x1  ,y1
  Draw_    *rp,x2  ,y1


  Move_    *rp,x2-1,y1+1
  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFHALFSHADOW]
  Draw_    *rp,x2-1,y2-1
  Draw_    *rp,x1+1,y2-1

  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
  Draw_    *rp,x1+1,y1+1
  Draw_    *rp,x2-2,y1+1

  SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BACKGROUND]
  WritePixel_ *rp,x2-1,y1+1
  WritePixel_ *rp,x1+1,y2-1

Else
  If (flags&#TUIF_ACTIVE)
    Move_    *rp,x1  ,y1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BLACK]
    Draw_    *rp,x2  ,y1
    Draw_    *rp,x2  ,y2
    Draw_    *rp,x1  ,y2
    Draw_    *rp,x1  ,y1

    Move_    *rp,x2-1,y1+1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
    Draw_    *rp,x2-1,y2-1
    Draw_    *rp,x1+1,y2-1

    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
    Draw_    *rp,x1+1,y1+1
    Draw_    *rp,x2-2,y1+1

  Else
    If flags&#TUIF_FOCUS
      Move_    *rp,x1  ,y1
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BLACK]
      Draw_    *rp,x2  ,y1
      Draw_    *rp,x2  ,y2
      Draw_    *rp,x1  ,y2
      Draw_    *rp,x1  ,y1

      Move_    *rp,x2-1,y1+1
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
      Draw_    *rp,x2-1,y2-1
      Draw_    *rp,x1+1,y2-1

      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
      Draw_    *rp,x1+1,y1+1
      Draw_    *rp,x2-2,y1+1

      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFHALFSHADOW]
      WritePixel_ *rp,x2-1,y1+1
      WritePixel_ *rp,x1+1,y2-1

    Else
      If flags&#TUIF_MOVER
        Move_    *rp,x2  ,y1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
        Draw_    *rp,x2  ,y2
        Draw_    *rp,x1  ,y2

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
        Draw_    *rp,x1  ,y1
        Draw_    *rp,x2  ,y1

        Move_    *rp,x2-1,y1+1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
        Draw_    *rp,x2-1,y2-1
        Draw_    *rp,x1+1,y2-1

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
        Draw_    *rp,x1+1,y1+1
        Draw_    *rp,x2-2,y1+1

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFHALFSHADOW]
        WritePixel_ *rp,x2-1,y1+1
        WritePixel_ *rp,x1+1,y2-1

      Else
        Move_    *rp,x2  ,y1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
        Draw_    *rp,x2  ,y2
        Draw_    *rp,x1  ,y2

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
        Draw_    *rp,x1  ,y1
        Draw_    *rp,x2  ,y1

        Move_    *rp,x2-1,y1+1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
        Draw_    *rp,x2-1,y2-1
        Draw_    *rp,x1+1,y2-1

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
        Draw_    *rp,x1+1,y1+1
        Draw_    *rp,x2-2,y1+1

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFHALFSHADOW]
        WritePixel_ *rp,x2-1,y1+1
        WritePixel_ *rp,x1+1,y2-1

      End If
    EndIf
  End If
End If
End Statement
 

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ntui_DrawBorder {*tuiEngine.tuiEngine,*rp.RastPort,x1.l,y1.l,x2.l:: /
;/ ,y2.l,bt.l,flags.l}                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *tuiEngine.tuiEngine    : ???                                             /
;/ - *rp.RastPort    : ???                                                     /
;/ - x1.l    : ???                                                             /
;/ - y1.l    : ???                                                             /
;/ - x2.l    : ???                                                             /
;/ - y2.l    : ???                                                             /
;/ - bt.l    : ???                                                             /
;/ - flags.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ntui_DrawBorder{*tui.tuiObject,*rp.RastPort,*bbox.tuiRect,borderType.l,flags.l}
x1.l = *bbox\left
x2.l = *bbox\right
y1.l = *bbox\top
y2.l = *bbox\bottom
*tuiEngine.tuiEngine=*tui\tuiEngine

Select borderType
  Case #TUIBORDER_FLAT
    If *tuiEngine\skinImage[#TUISKIN_FLATBORDER]
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_FLATBORDER],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    Else
      Move_    *rp,x1    ,y1
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BLACK]
      Draw_    *rp,x2    ,y1
      Draw_    *rp,x2    ,y2
      Draw_    *rp,x1    ,y2
      Draw_    *rp,x1    ,y1
    End If

  Case #TUIBORDER_MENUBAR
    If *tuiEngine\skinImage[#TUISKIN_MENUBAR]
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_MENUBAR],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    Else
      Move_    *rp,x1    ,y2-3
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
      Draw_    *rp,x2    ,y2-3
      Move_    *rp,x1    ,y2-2
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
      Draw_    *rp,x2    ,y2-2
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BACKGROUND]
      Move_    *rp,x1    ,y2-1
      Draw_    *rp,x2    ,y2-1
      Move_    *rp,x1    ,y2
      Draw_    *rp,x2    ,y2
    End If

  Case #TUIBORDER_RAISED
    If *tuiEngine\skinImage[#TUISKIN_RAISEDBORDER]
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_RAISEDBORDER],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    Else
      If *tuiEngine\borderStyle=0
        _ntui_DrawThinRaisedBorder{*tuiEngine,*rp,*bbox,flags}
      Else
        _ntui_DrawThickRaisedBorder{*tuiEngine,*rp,*bbox,flags}
      End If
    End If

  Case #TUIBORDER_PAGEEND
    If (flags&(#TUIF_LEFT)><0 AND *tuiEngine\skinImage[#TUISKIN_PAGEEND_L]><#NULL)
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_PAGEEND_L],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If
    If (flags&(#TUIF_TOP)><0 AND *tuiEngine\skinImage[#TUISKIN_PAGEEND_T]><#NULL)
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_PAGEEND_T],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If
    If (flags&(#TUIF_RIGHT)><0 AND *tuiEngine\skinImage[#TUISKIN_PAGEEND_R]><#NULL)
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_PAGEEND_R],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If
    If (flags&(#TUIF_BOTTOM)><0 AND *tuiEngine\skinImage[#TUISKIN_PAGEEND_B]><#NULL)
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_PAGEEND_B],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If

    If (*tuiEngine\borderStyle=0)
      If (flags&(#TUIF_LEFT |#TUIF_TOP   )) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
      If (flags&(#TUIF_RIGHT|#TUIF_BOTTOM)) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]

      If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+2    ,y1 :  Draw_    *rp,x1+2    ,y2
      If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-2 :  Draw_    *rp,x2    ,y2-2
      If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-2    ,y1 :  Draw_    *rp,x2-2    ,y2
      If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+2 :  Draw_    *rp,x2    ,y1+2

      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
      If (flags&(#TUIF_TOP   )) Then WritePixel_ *rp,x2,y2-2
      If (flags&(#TUIF_LEFT  )) Then WritePixel_ *rp,x2-2,y2

      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
      If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+1    ,y1 :  Draw_    *rp,x1+1    ,y2-1
      If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-1 :  Draw_    *rp,x2-1    ,y2-1
      If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-1    ,y1 :  Draw_    *rp,x2-1    ,y2-1
      If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+1 :  Draw_    *rp,x2-1    ,y1+1

      If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x1    ,y2-1
      If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2 :  Draw_    *rp,x2-1    ,y2
      If (flags&#TUIF_LEFT)   Then Move_    *rp,x2    ,y1 :  Draw_    *rp,x2    ,y2-1
      If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x2-1    ,y1

      If (flags&(#TUIF_BOTTOM )) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
      If (flags&(#TUIF_RIGHT  |#TUIF_LEFT)|#TUIF_TOP ) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]

      If (flags&#TUIF_LEFT)   Then Move_    *rp,x2      ,y2 :  Draw_    *rp,x2-1    ,y2
      If (flags&#TUIF_TOP)    Then Move_    *rp,x2      ,y2 :  Draw_    *rp,x2    ,y2-1
      If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1      ,y2 :  Draw_    *rp,x1+1    ,y2
      If (flags&#TUIF_BOTTOM) Then Move_    *rp,x2      ,y1 :  Draw_    *rp,x2    ,y1+1
    Else
      _ntui_DrawThickPageEndBorder{*tuiEngine,*rp,*bbox,flags}
    End If

  Case #TUIBORDER_PAGEBEGIN
    If (flags&(#TUIF_LEFT)><0 AND *tuiEngine\skinImage[#TUISKIN_PAGEBEGIN_L]><#NULL)
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_PAGEBEGIN_L],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If
    If (flags&(#TUIF_TOP)><0 AND *tuiEngine\skinImage[#TUISKIN_PAGEBEGIN_T]><#NULL)
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_PAGEBEGIN_T],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If
    If (flags&(#TUIF_RIGHT)><0 AND *tuiEngine\skinImage[#TUISKIN_PAGEBEGIN_R]><#NULL)
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_PAGEBEGIN_R],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If
    If (flags&(#TUIF_BOTTOM)><0 AND *tuiEngine\skinImage[#TUISKIN_PAGEBEGIN_B]><#NULL)
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_PAGEBEGIN_B],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If
    If (*tuiEngine\borderStyle=0)

    If (flags&(#TUIF_LEFT |#TUIF_TOP  )) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    If (flags&(#TUIF_BOTTOM|#TUIF_RIGHT )) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]

    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+2    ,y1 :  Draw_    *rp,x1+2    ,y2
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-2 :  Draw_    *rp,x2    ,y2-2
    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-2    ,y1 :  Draw_    *rp,x2-2    ,y2
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+2 :  Draw_    *rp,x2    ,y1+2

    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
    If (flags&(#TUIF_BOTTOM )) Then WritePixel_ *rp,x1,y1+2
    If (flags&(#TUIF_RIGHT  )) Then WritePixel_ *rp,x1+2,y1

    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+1    ,y1 :  Draw_    *rp,x1+1    ,y2
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-1 :  Draw_    *rp,x2    ,y2-1
    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-1    ,y1 :  Draw_    *rp,x2-1    ,y2
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+1 :  Draw_    *rp,x2    ,y1+1

    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x1    ,y2
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2 :  Draw_    *rp,x2    ,y2
    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2    ,y1 :  Draw_    *rp,x2    ,y2
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x2    ,y1

    If (flags&(#TUIF_BOTTOM |#TUIF_TOP|#TUIF_LEFT|#TUIF_RIGHT)) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
;    If (flags&(#TUIF_RIGHT)) Then SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]

    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2      ,y1 :  Draw_    *rp,x2-1    ,y1
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1      ,y2 :  Draw_    *rp,x1    ,y2-1
    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1      ,y1 :  Draw_    *rp,x1+1    ,y1
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1      ,y1 :  Draw_    *rp,x1    ,y1+1
    Else
      _ntui_DrawThickPageBeginBorder{*tuiEngine,*rp,*bbox,flags}
    End If

  Case #TUIBORDER_PAGECONTENT
    If (flags&(#TUIF_LEFT)><0 AND *tuiEngine\skinImage[#TUISKIN_PAGECONTENT_L]><#NULL)
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_PAGECONTENT_L],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If
    If (flags&(#TUIF_TOP)><0 AND *tuiEngine\skinImage[#TUISKIN_PAGECONTENT_T]><#NULL)
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_PAGECONTENT_T],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If
    If (flags&(#TUIF_RIGHT)><0 AND *tuiEngine\skinImage[#TUISKIN_PAGECONTENT_R]><#NULL)
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_PAGECONTENT_R],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If
    If (flags&(#TUIF_BOTTOM)><0 AND *tuiEngine\skinImage[#TUISKIN_PAGECONTENT_B]><#NULL)
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_PAGECONTENT_B],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If

    If *tuiEngine\borderStyle=0
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
      If (flags&#TUIF_LEFT  )=0 Then Move_    *rp,x1    ,y2 : Draw_    *rp,x1    ,y1
      If (flags&#TUIF_TOP   )=0 Then Move_    *rp,x1    ,y1 : Draw_    *rp,x2    ,y1
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
      If (flags&#TUIF_RIGHT )=0 Then Move_    *rp,x2    ,y1 : Draw_    *rp,x2    ,y2
      If (flags&#TUIF_BOTTOM)=0 Then Move_    *rp,x2    ,y2 : Draw_    *rp,x1    ,y2

      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
      If (flags&(#TUIF_RIGHT|#TUIF_TOP   ))=0 Then WritePixel_ *rp,x2,y1
      If (flags&(#TUIF_LEFT |#TUIF_BOTTOM))=0 Then WritePixel_ *rp,x1,y2
    Else
      _ntui_DrawThickPageContentBorder{*tuiEngine,*rp,*bbox,flags}
    End If

  Case #TUIBORDER_PAGETAB
    If (flags&(#TUIF_LEFT)><0 AND *tuiEngine\skinImage[#TUISKIN_PAGETAB_L]><#NULL)
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_PAGETAB_L],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If
    If (flags&(#TUIF_TOP)><0 AND *tuiEngine\skinImage[#TUISKIN_PAGETAB_T]><#NULL)
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_PAGETAB_T],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If
    If (flags&(#TUIF_RIGHT)><0 AND *tuiEngine\skinImage[#TUISKIN_PAGETAB_R]><#NULL)
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_PAGETAB_R],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If
    If (flags&(#TUIF_BOTTOM)><0 AND *tuiEngine\skinImage[#TUISKIN_PAGETAB_B]><#NULL)
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_PAGETAB_B],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    End If
    If *tuiEngine\borderStyle=0
    If (flags&#TUIF_ACTIVE)=0
      If (flags&#TUIF_RIGHT)  Then x2-1
      If (flags&#TUIF_TOP)    Then y1+1
      If (flags&#TUIF_LEFT)   Then x1+1
      If (flags&#TUIF_BOTTOM) Then y2-1
    End If
    Move_    *rp,x1    ,y2
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    Draw_    *rp,x1    ,y1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
    Draw_    *rp,x2    ,y1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    Draw_    *rp,x2    ,y2
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
    Draw_    *rp,x1    ,y2

    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
    If (flags&(#TUIF_RIGHT|#TUIF_TOP   )) Then WritePixel_ *rp,x2,y1
    If (flags&(#TUIF_LEFT |#TUIF_BOTTOM)) Then WritePixel_ *rp,x1,y2

    If (flags&(#TUIF_TOP   )) Then WritePixel_ *rp,x2,y2-2
    If (flags&(#TUIF_BOTTOM)) Then WritePixel_ *rp,x1,y1+2
    If (flags&(#TUIF_LEFT  )) Then WritePixel_ *rp,x2-2,y2
    If (flags&(#TUIF_RIGHT )) Then WritePixel_ *rp,x1+2,y1

    If (flags&#TUIF_ACTIVE)=0  ; shadow
      If (flags&(#TUIF_TOP|#TUIF_LEFT))
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
      Else
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
      End If
    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+3    ,y1+0 :  Draw_    *rp,x1+3    ,y2-1
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1+0    ,y2-3 :  Draw_    *rp,x2-1    ,y2-3
    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-3    ,y1+0 :  Draw_    *rp,x2-3    ,y2-1
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1+0    ,y1+3 :  Draw_    *rp,x2-1    ,y1+3

    Else
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
      If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+3    ,y1+1 :  Draw_    *rp,x1+3    ,y2-1
      If (flags&#TUIF_TOP)    Then Move_    *rp,x1+1    ,y2-3 :  Draw_    *rp,x2-1    ,y2-3
      If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-3    ,y1+1 :  Draw_    *rp,x2-3    ,y2-1
      If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1+1    ,y1+3 :  Draw_    *rp,x2-1    ,y1+3

      If (flags&#TUIF_RIGHT)  Then Move_    *rp,x2-1    ,y1+1 :  Draw_    *rp,x2-1    ,y2-1
      If (flags&#TUIF_TOP)    Then Move_    *rp,x1+1    ,y1+1 :  Draw_    *rp,x2-1    ,y1+1
      If (flags&#TUIF_LEFT)   Then Move_    *rp,x1+1    ,y1+1 :  Draw_    *rp,x1+1    ,y2-1
      If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1+1    ,y2-1 :  Draw_    *rp,x2-1    ,y2-1
    End If

    If (flags&#TUIF_ACTIVE)=0  ; shine
      If (flags&(#TUIF_TOP|#TUIF_LEFT))
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
      Else
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
      End If
      If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+2    ,y1 :  Draw_    *rp,x1+2    ,y2
      If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-2 :  Draw_    *rp,x2    ,y2-2
      If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-2    ,y1 :  Draw_    *rp,x2-2    ,y2
      If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+2 :  Draw_    *rp,x2    ,y1+2
    Else
      SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
      If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+2    ,y1+1 :  Draw_    *rp,x1+2    ,y2-1
      If (flags&#TUIF_TOP)    Then Move_    *rp,x1+1   ,y2-2 :  Draw_    *rp,x2-1    ,y2-2
      If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-2    ,y1+1 :  Draw_    *rp,x2-2    ,y2-1
      If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1+1    ,y1+2 :  Draw_    *rp,x2-1    ,y1+2
    End If

    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1+1    ,y1 :  Draw_    *rp,x1+1    ,y2
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2-1 :  Draw_    *rp,x2    ,y2-1
    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2-1    ,y1 :  Draw_    *rp,x2-1    ,y2
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1+1 :  Draw_    *rp,x2    ,y1+1

    If (flags&#TUIF_RIGHT)  Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x1    ,y2
    If (flags&#TUIF_TOP)    Then Move_    *rp,x1    ,y2 :  Draw_    *rp,x2    ,y2
    If (flags&#TUIF_LEFT)   Then Move_    *rp,x2    ,y1 :  Draw_    *rp,x2    ,y2
    If (flags&#TUIF_BOTTOM) Then Move_    *rp,x1    ,y1 :  Draw_    *rp,x2    ,y1
    Else
      _ntui_DrawThickPageTabBorder{*tuiEngine,*rp,*bbox,flags}
    End If

  Case #TUIBORDER_RECESSED
    If *tuiEngine\skinImage[#TUISKIN_RECESSEDBORDER]
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_RECESSEDBORDER],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    Else
      If *tuiEngine\borderStyle=0
        _ntui_DrawThinRecessedBorder{*tuiEngine,*rp,*bbox,flags}
      Else
        _ntui_DrawThickRecessedBorder{*tuiEngine,*rp,*bbox,flags}
      End If
    End If

  Case #TUIBORDER_STRING
    If *tuiEngine\skinImage[#TUISKIN_STRING]
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_FLATBORDER],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    Else
      If *tuiEngine\borderStyle=0
        _ntui_DrawThinRecessedBorder{*tuiEngine,*rp,*bbox,flags}
      Else

        If (flags&(#TUIF_DISABLED))
        Move_    *rp,x1    ,y2
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
        Draw_    *rp,x1    ,y1
        Draw_    *rp,x2    ,y1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
        Draw_    *rp,x2    ,y2
        Draw_    *rp,x1    ,y2

        Move_    *rp,x1+1    ,y2-1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
        Draw_    *rp,x1+1    ,y1+1
        Draw_    *rp,x2-1    ,y1+1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
        Draw_    *rp,x2-1    ,y2-1
        Draw_    *rp,x1+1    ,y2-1

        Else
        Move_    *rp,x1    ,y2
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
        Draw_    *rp,x1    ,y1
        Draw_    *rp,x2    ,y1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
        Draw_    *rp,x2    ,y2
        Draw_    *rp,x1    ,y2

        Move_    *rp,x1+1    ,y2-1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
        Draw_    *rp,x1+1    ,y1+1
        Draw_    *rp,x2-1    ,y1+1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE ]
        Draw_    *rp,x2-1    ,y2-1
        Draw_    *rp,x1+1    ,y2-1
        End If

        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
        WritePixel_ *rp,x2,y1
        WritePixel_ *rp,x1,y2
      End If
    End If

  Case #TUIBORDER_GROUP
    If *tuiEngine\skinImage[#TUISKIN_GROUPBORDER]
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_GROUPBORDER],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    Else
      If *tuiEngine\borderStyle=0
        _ntui_DrawThinGroupBorder{*tuiEngine,*rp,*bbox,flags}
      Else
        _ntui_DrawThickGroupBorder{*tuiEngine,*rp,*bbox,flags}
      End If
    End If

  Case #TUIBORDER_TITLE
    If *tuiEngine\skinImage[#TUISKIN_TITLEBORDER]
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_TITLEBORDER],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    Else
      yt1.l = y1
      yt2.l = y1+(*tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize+1)
      y1=y1+(*tuiEngine\font[#TUIFONT_NORMAL]\tf_YSize+1)/2
      ;SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BACKGROUND]
      ;RectFill_ *rp,x1,yt1,x2,yt2

      !tuiCopyRect{fbox.tuiRect,*bbox}
      fbox\top = yt2
      If *tuiEngine\borderStyle=0
        _ntui_DrawThinGroupBorder{*tuiEngine,*rp,fbox,flags}
      Else
        _ntui_DrawThickGroupBorder{*tuiEngine,*rp,fbox,flags}
      End If

    End If

  Case #TUIBORDER_TOOL
    If *tuiEngine\skinImage[#TUISKIN_TOOL]
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_TOOL],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    Else
      If (flags&(#TUIF_ACTIVE))
        Move_    *rp,x1    ,y2
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
        Draw_    *rp,x1    ,y1
        Draw_    *rp,x2    ,y1
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
        Draw_    *rp,x2    ,y2
        Draw_    *rp,x1    ,y2
        SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
        WritePixel_ *rp,x2,y1
        WritePixel_ *rp,x1,y2
      Else
        If (flags&#TUIF_DISABLED)
          ;...
        Else
          If (flags&#TUIF_MOVER)
            Move_    *rp,x1    ,y2
            SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_MARKER]
            Draw_    *rp,x1    ,y1
            Draw_    *rp,x2    ,y1
            Draw_    *rp,x2    ,y2
            Draw_    *rp,x1    ,y2
          Else
            If ( (flags&#TUIF_FOCUS><0) )
              Move_    *rp,x1    ,y2
              SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHINE]
              Draw_    *rp,x1    ,y1
              Draw_    *rp,x2    ,y1
              SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_SHADOW]
              Draw_    *rp,x2    ,y2
              Draw_    *rp,x1    ,y2
              SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_HALFSHADOW]
              WritePixel_ *rp,x2,y1
              WritePixel_ *rp,x1,y2
            Else
              ;Move_    *rp,x1    ,y2
              ;SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_BACKGROUND]
              ;Draw_    *rp,x1    ,y1
              ;Draw_    *rp,x2    ,y1
              ;Draw_    *rp,x2    ,y2
              ;Draw_    *rp,x1    ,y2
            End If
          End If
        End If
      End If
    End If

  Case #TUIBORDER_BUTTON
    If *tuiEngine\skinImage[#TUISKIN_BUTTON]
      ntui_DrawTBImage{*tuiEngine\skinImage[#TUISKIN_BUTTON],*rp,*bbox,*bbox,flags,-1}
      Function Return 1
    Else
      If *tuiEngine\borderStyle=0
        _ntui_DrawThinButtonBorder{*tuiEngine,*rp,*bbox,flags}
      Else
        _ntui_DrawThickButtonBorder{*tuiEngine,*rp,*bbox,flags}
      End If
    End If

  Case #TUIBORDER_NONE

  Default
    Move_    *rp,x1    ,y1
    SetAPen_ *rp,*tuiEngine\pen[#TUIPEN_WHITE]
    Draw_    *rp,x2    ,y1
    Draw_    *rp,x2    ,y2
    Draw_    *rp,x1    ,y2
    Draw_    *rp,x1    ,y1

End Select
Function Return 0
End Function



