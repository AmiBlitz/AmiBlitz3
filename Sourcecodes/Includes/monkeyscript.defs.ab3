; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = "test"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 16
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 27
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
XINCLUDE "file.include.ab3"

#max_msfuncs = 200+256

#msfunctype_user           =  0 LSL 8
#msfunctype_basic          =  1 LSL 8
#msfunctype_logic          =  2 LSL 8
#msfunctype_arithmetic     =  3 LSL 8
#msfunctype_string         =  4 LSL 8
#msfunctype_trigonometric  =  5 LSL 8
#msfunctype_time           =  6 LSL 8
#msfunctype_cast           =  7 LSL 8
#msfunctype_compare        =  8 LSL 8
#msfunctype_numeric        =  9 LSL 8
#msfunctype_file           = 10 LSL 8

#msfunc_call            = #msfunctype_basic         |  0 ; call a script
#msfunc_kill            = #msfunctype_basic         |  1
#msfunc_exit            = #msfunctype_basic         |  2 ; exit a script
#msfunc_wait            = #msfunctype_basic         |  3 ; wait for x frames
#msfunc_activate        = #msfunctype_basic         |  4 ; acticate scriot
#msfunc_alert           = #msfunctype_basic         |  5 ; make an alert requester
#msfunc_print           = #msfunctype_basic         |  6 ; print to console
#msfunc_nprint          = #msfunctype_basic         |  7 ; print to console
#msfunc_isrunning       = #msfunctype_basic         |  8
#msfunc_extern          = #msfunctype_basic         |  9
#msfunc_getexres        = #msfunctype_basic         | 10
#msfunc_let             = #msfunctype_basic         | 11

#msfunc_eq              = #msfunctype_compare       |  0
#msfunc_gt              = #msfunctype_compare       |  1
#msfunc_lt              = #msfunctype_compare       |  2
#msfunc_ge              = #msfunctype_compare       |  3
#msfunc_le              = #msfunctype_compare       |  4
#msfunc_ne              = #msfunctype_compare       |  5

#msfunc_add             = #msfunctype_arithmetic    |  0
#msfunc_sub             = #msfunctype_arithmetic    |  1
#msfunc_mul             = #msfunctype_arithmetic    |  2
#msfunc_div             = #msfunctype_arithmetic    |  3
#msfunc_mod             = #msfunctype_arithmetic    |  4
#msfunc_inc             = #msfunctype_arithmetic    |  5
#msfunc_log             = #msfunctype_arithmetic    |  6
#msfunc_ld              = #msfunctype_arithmetic    |  7
#msfunc_ln              = #msfunctype_arithmetic    |  8
#msfunc_exp             = #msfunctype_arithmetic    |  9
#msfunc_pow             = #msfunctype_arithmetic    | 10
#msfunc_sqr             = #msfunctype_arithmetic    | 11
#msfunc_neg             = #msfunctype_arithmetic    | 12

#msfunc_sin             = #msfunctype_trigonometric |  0
#msfunc_cos             = #msfunctype_trigonometric |  1
#msfunc_tan             = #msfunctype_trigonometric |  2
#msfunc_asin            = #msfunctype_trigonometric |  3
#msfunc_acos            = #msfunctype_trigonometric |  4
#msfunc_atan            = #msfunctype_trigonometric |  5

#msfunc_not             = #msfunctype_logic         |  0
#msfunc_and             = #msfunctype_logic         |  1
#msfunc_or              = #msfunctype_logic         |  2
#msfunc_xor             = #msfunctype_logic         |  3

#msfunc_rnd             = #msfunctype_numeric       |  0
#msfunc_sgn             = #msfunctype_numeric       |  1
#msfunc_abs             = #msfunctype_numeric       |  2
#msfunc_max             = #msfunctype_numeric       |  3
#msfunc_min             = #msfunctype_numeric       |  4
#msfunc_limit           = #msfunctype_numeric       |  5
#msfunc_wrap            = #msfunctype_numeric       |  6

#msfunc_left            = #msfunctype_string        |  0
#msfunc_right           = #msfunctype_string        |  1
#msfunc_mid             = #msfunctype_string        |  2
#msfunc_len             = #msfunctype_string        |  3
#msfunc_replace         = #msfunctype_string        |  4
#msfunc_instr           = #msfunctype_string        |  5
#msfunc_croparg         = #msfunctype_string        |  6
#msfunc_numargs         = #msfunctype_string        |  7

#msfunc_str             = #msfunctype_cast          |  0
#msfunc_val             = #msfunctype_cast          |  1
#msfunc_int             = #msfunctype_cast          |  2
#msfunc_float           = #msfunctype_cast          |  3
#msfunc_xtype           = #msfunctype_cast          |  4

#msfunc_timestamp       = #msfunctype_time          |  0
#msfunc_msecs           = #msfunctype_time          |  1
#msfunc_secs            = #msfunctype_time          |  2
#msfunc_mins            = #msfunctype_time          |  3
#msfunc_hours           = #msfunctype_time          |  4
#msfunc_day             = #msfunctype_time          |  5
#msfunc_month           = #msfunctype_time          |  6
#msfunc_year            = #msfunctype_time          |  7
#msfunc_date            = #msfunctype_time          |  8
#msfunc_eclock          = #msfunctype_time          |  9

#msfunc_open            = #msfunctype_file          |  0
#msfunc_close           = #msfunctype_file          |  1
#msfunc_seek            = #msfunctype_file          |  2
#msfunc_filepos         = #msfunctype_file          |  3
#msfunc_readbyte        = #msfunctype_file          | 10
#msfunc_readword        = #msfunctype_file          | 11
#msfunc_readlong        = #msfunctype_file          | 12
#msfunc_readfloat       = #msfunctype_file          | 13
#msfunc_readline        = #msfunctype_file          | 14
#msfunc_writebyte       = #msfunctype_file          | 15
#msfunc_writeword       = #msfunctype_file          | 16
#msfunc_writelong       = #msfunctype_file          | 17
#msfunc_writefloat      = #msfunctype_file          | 18
#msfunc_writeline       = #msfunctype_file          | 19

 

#mstype_int              =  0
#mstype_float            =  1
#mstype_bool             =  2
#mstype_string           =  3
#mstype_pointer          =  4
#mstype_any              =  5
#mstype_undefined        =  6
#mstype_none             =  7
#mstype_intvar           =  8
#mstype_floatvar         =  9
#mstype_boolvar          = 10
#mstype_stringvar        = 11
#mstype_var              = 12

Macro ret_string
USEPATH msfunc(msengine\numFuncs) : \typ[0] = #mstype_string : \minargs = 0 : \maxargs = 0
End Macro
Macro ret_float
USEPATH msfunc(msengine\numFuncs) : \typ[0] = #mstype_float  : \minargs = 0 : \maxargs = 0
End Macro
Macro ret_int
USEPATH msfunc(msengine\numFuncs) : \typ[0] = #mstype_int    : \minargs = 0 : \maxargs = 0
End Macro
Macro ret_bool
USEPATH msfunc(msengine\numFuncs) : \typ[0] = #mstype_bool   : \minargs = 0 : \maxargs = 0
End Macro
Macro ret_none
USEPATH msfunc(msengine\numFuncs) : \typ[0] = #mstype_none   : \minargs = 0 : \maxargs = 0
End Macro

Macro param_string
USEPATH msfunc(msengine\numFuncs) : \minargs+1 : \maxargs+1 : \typ[\maxargs] = #mstype_string
End Macro
Macro param_float
USEPATH msfunc(msengine\numFuncs) : \minargs+1 : \maxargs+1 : \typ[\maxargs] = #mstype_float
End Macro
Macro param_int
USEPATH msfunc(msengine\numFuncs) : \minargs+1 : \maxargs+1 : \typ[\maxargs] = #mstype_int
End Macro
Macro param_bool
USEPATH msfunc(msengine\numFuncs) : \minargs+1 : \maxargs+1 : \typ[\maxargs] = #mstype_bool
End Macro
Macro param_any
USEPATH msfunc(msengine\numFuncs) : \minargs+1 : \maxargs+1 : \typ[\maxargs] = #mstype_any
End Macro
Macro param_intvar
USEPATH msfunc(msengine\numFuncs) : \minargs+1 : \maxargs+1 : \typ[\maxargs] = #mstype_intvar
End Macro
Macro param_floatvar
USEPATH msfunc(msengine\numFuncs) : \minargs+1 : \maxargs+1 : \typ[\maxargs] = #mstype_floatvar
End Macro
Macro param_boolvar
USEPATH msfunc(msengine\numFuncs) : \minargs+1 : \maxargs+1 : \typ[\maxargs] = #mstype_boolvar
End Macro
Macro param_stringvar
USEPATH msfunc(msengine\numFuncs) : \minargs+1 : \maxargs+1 : \typ[\maxargs] = #mstype_stringvar
End Macro
Macro param_var
USEPATH msfunc(msengine\numFuncs) : \minargs+1 : \maxargs+1 : \typ[\maxargs] = #mstype_var
End Macro
 

 


Macro opt_string
USEPATH msfunc(msengine\numFuncs) : \maxargs+1 : \typ[\maxargs] = #mstype_string
End Macro
Macro opt_float
USEPATH msfunc(msengine\numFuncs) : \maxargs+1 : \typ[\maxargs] = #mstype_float
End Macro
Macro opt_int
USEPATH msfunc(msengine\numFuncs) : \maxargs+1 : \typ[\maxargs] = #mstype_int
End Macro
Macro opt_bool
USEPATH msfunc(msengine\numFuncs) : \maxargs+1 : \typ[\maxargs] = #mstype_bool
End Macro
Macro opt_any
USEPATH msfunc(msengine\numFuncs) : \maxargs+1 : \typ[\maxargs] = #mstype_any
End Macro

Macro ms_def
msengine\numFuncs + 1
msfunc(msengine\numFuncs)\name       = `1
msfunc(msengine\numFuncs)\id         = `2
msfunc(msengine\numFuncs)\precedence = `3
msfunc(msengine\numFuncs)\help       = `4
End Macro

NEWTYPE.msengine  ; Runtime Base
numFuncs.l
End NEWTYPE

NEWTYPE.msBinary
MSVB.l
csizeMSVB.l
INFO.l
csizeINFO.l
numLocals_l.l
numLocals_f.l
numLocals_b.l
numLocals_s.l
numLocals_p.l
CODE.l
csizeCODE.l
End NEWTYPE

NEWTYPE.msfunc  ; monkeyscript function
name.s
help.s
id.w
precedence.w
minargs.w
maxargs.w
typ.b[16]    ; typ[0] = return value
End NEWTYPE

SHARED msengine.msengine
Dim msfunc.msfunc(#max_msfuncs)

msengine\numFuncs = -1

#msprec_none      = -1
#msprec_grouping  = 0 ;()   []   ->   .   :: Grouping, scope, array/member access
#msprec_unary     = 1 ; !   ~   -   +   *   &   SizeOf   Type cast (most) unary operations, SizeOf AND Type casts
#msprec_power     = 2 ; ^
#msprec_mul       = 3 ;*   /   % Multiplication, division, modulus
#msprec_add       = 4 ;+   - Addition AND subtraction
#msprec_shift     = 5 ;<<   >> Bitwise shift left AND right
#msprec_less      = 6 ;<   <=   >   >= Comparisons: less-than, ...
#msprec_equal     = 7 ;==   != Comparisons: equal AND NOT equal
#msprec_bitand    = 8 ;& Bitwise AND
#msprec_bitxor    = 9 ;^ Bitwise exclusive OR
#msprec_bitor     = 10 ;| Bitwise inclusive (normal) OR
#msprec_logicand  = 11 ;&& Logical AND
#msprec_logicor   = 12 ;|| Logical OR
#msprec_ternary   = 13 ; ?: Ternary operator
#msprec_assign    = 14 ;=   +=   -=   *=   /=   %=   &=   |=   ^=   <<=   >>= Assignment operators

;_________________________________________ statements
!ms_def{"Call"    ,#msfunc_call    ,#msprec_none," script.s[,args.s[,waitfinish.b]] // call a script" }
!ret_none:!param_string:!opt_string:!opt_bool
!ms_def{"Exit"    ,#msfunc_exit    ,#msprec_none," [result.s] // terminate the script and return result.s"}
!ret_none:!opt_string
!ms_def{"Kill"    ,#msfunc_kill    ,#msprec_none," [script.s] // terminate an external script"}
!ret_none:!opt_string
!ms_def{"Wait"    ,#msfunc_wait    ,#msprec_none," [count.l [, script.s]] // wait count.l frames or -1 for undetermined time"}
!ret_none:!opt_int:!opt_string
!ms_def{"Activate",#msfunc_activate,#msprec_none," script.s // wake up another script that is waiting"}
!ret_none:!param_string
!ms_def{"Alert"   ,#msfunc_alert   ,#msprec_none," text.s // show a requester with text.s"}
!ret_none:!param_string
!ms_def{"Print"   ,#msfunc_print   ,#msprec_none," text.s // output a text.s"}
!ret_none:!param_any
!ms_def{"NPrint"   ,#msfunc_nprint ,#msprec_none," text.s // output a text.s and add a return"}
!ret_none:!param_any
!ms_def{"Extern"   ,#msfunc_extern  ,#msprec_none,"(funcname.s[,args.s]) // call external function"}
!ret_string:!param_string:!opt_string
!ms_def{"Extern"   ,#msfunc_extern  ,#msprec_none,"(funcname.s[,args.s]) // call external function"}
!ret_none:!param_string:!opt_string
!ms_def{"IsRunning" ,#msfunc_isrunning ,#msprec_none," script.s // test if script.s is running"}
!ret_bool:!param_string
!ms_def{"GetExternResult",#msfunc_getexres ,#msprec_none," // get the result from the last external function call"}
!ret_string:!param_int

!ms_def{"Let",#msfunc_let,#msprec_none,"(a.l,value.l) // set variable a.l to value.l"}
!ret_none:!param_intvar:!param_int
!ms_def{"Let",#msfunc_let,#msprec_none,"(a.l,value.l) // set variable a.l to value.l "}
!ret_int:!param_intvar:!param_int

!ms_def{"Let",#msfunc_let,#msprec_none,"(a.s,string.s) // set variable a.s to string.s"}
!ret_none:!param_stringvar:!param_string
!ms_def{"Let",#msfunc_let,#msprec_none,"(a.s,string.s)  // set variable a.s to string.s"}
!ret_string:!param_stringvar:!param_string

!ms_def{"=",#msfunc_let,#msprec_assign," // set variable to int"}
!ret_none:!param_intvar:!param_int
!ms_def{"=",#msfunc_let,#msprec_assign," // set variable to int"}
!ret_int:!param_intvar:!param_int

!ms_def{"=",#msfunc_let,#msprec_assign," // set variable to string"}
!ret_none:!param_stringvar:!param_string
!ms_def{"=",#msfunc_let,#msprec_assign," // set variable to string"}
!ret_string:!param_stringvar:!param_string

!ms_def{"Let",#msfunc_let,#msprec_none,"(a.b,value.b) // set variable a.b to value.b"}
!ret_none:!param_boolvar:!param_bool
!ms_def{"Let",#msfunc_let,#msprec_none,"(a.b,value.b) // set variable a.b to value.b"}
!ret_bool:!param_boolvar:!param_bool

!ms_def{"Let",#msfunc_let,#msprec_none,"(a.f,value.f) // set variable a.f to value.f"}
!ret_none:!param_floatvar:!param_float
!ms_def{"Let",#msfunc_let,#msprec_none,"(a.f,value.f) // set variable a.f to value.f"}
!ret_float:!param_floatvar:!param_float

!ms_def{"=",#msfunc_let,#msprec_assign," // set variable to bool"}
!ret_none:!param_boolvar:!param_bool
!ms_def{"=",#msfunc_let,#msprec_assign," // set variable to bool"}
!ret_bool:!param_boolvar:!param_bool

!ms_def{"=",#msfunc_let,#msprec_assign," // set variable to float"}
!ret_none:!param_floatvar:!param_float
!ms_def{"=",#msfunc_let,#msprec_assign," // set variable to float"}
!ret_float:!param_floatvar:!param_float
 

;____________________________________________ compare
!ms_def{"==",#msfunc_eq,#msprec_equal ," // equal (int)"}
!ret_bool:!param_int:!param_int
!ms_def{"==",#msfunc_eq,#msprec_equal ," // equal (float)"}
!ret_bool:!param_float:!param_float
!ms_def{"==",#msfunc_eq,#msprec_equal ," // equal (string)"}
!ret_bool:!param_string:!param_string
!ms_def{"==",#msfunc_eq,#msprec_equal ," // equal (bool)"}
!ret_bool:!param_bool:!param_bool
!ms_def{">" ,#msfunc_gt,#msprec_less  ," // greater than (int)"}
!ret_bool:!param_int:!param_int
!ms_def{">" ,#msfunc_gt,#msprec_less  ," // greater than (float)"}
!ret_bool:!param_float:!param_float
!ms_def{">" ,#msfunc_gt,#msprec_less  ," // greater than (string) "}
!ret_bool:!param_string:!param_string
!ms_def{">" ,#msfunc_gt,#msprec_less  ," // greater than (bool) "}
!ret_bool:!param_bool:!param_bool
!ms_def{"<" ,#msfunc_lt,#msprec_less  ," // lower than (int)"}
!ret_bool:!param_int:!param_int
!ms_def{"<" ,#msfunc_lt,#msprec_less  ," // lower than (float)"}
!ret_bool:!param_float:!param_float
!ms_def{"<" ,#msfunc_lt,#msprec_less  ," // lower than (string) "}
!ret_bool:!param_string:!param_string
!ms_def{"<" ,#msfunc_lt,#msprec_less  ," // lower than (bool) "}
!ret_bool:!param_bool:!param_bool
!ms_def{">=",#msfunc_ge,#msprec_less  ," // greater or equal (int)"}
!ret_bool:!param_int:!param_int
!ms_def{">=",#msfunc_ge,#msprec_less  ," // greater or equal (float)"}
!ret_bool:!param_float:!param_float
!ms_def{">=",#msfunc_ge,#msprec_less  ," // greater or equal (string) "}
!ret_bool:!param_string:!param_string
!ms_def{">=",#msfunc_ge,#msprec_less  ," // greater or equal (bool) "}
!ret_bool:!param_bool:!param_bool
!ms_def{"<=",#msfunc_le,#msprec_less  ," // lower or equal (int)"}
!ret_bool:!param_int:!param_int
!ms_def{"<=",#msfunc_le,#msprec_less  ," // lower or equal (float)"}
!ret_bool:!param_float:!param_float
!ms_def{"<=",#msfunc_le,#msprec_less  ," // lower or equal (string) "}
!ret_bool:!param_string:!param_string
!ms_def{"<=",#msfunc_le,#msprec_less  ," // lower or equal (bool) "}
!ret_bool:!param_bool:!param_bool
!ms_def{"!=",#msfunc_ne,#msprec_equal ," // not equal (int)"}
!ret_bool:!param_int:!param_int
!ms_def{"!=",#msfunc_ne,#msprec_equal ," // not equal (float)"}
!ret_bool:!param_float:!param_float
!ms_def{"!=",#msfunc_ne,#msprec_equal ," // not equal (string) "}
!ret_bool:!param_string:!param_string
!ms_def{"!=",#msfunc_ne,#msprec_equal ," // not equal (bool) "}
!ret_bool:!param_bool:!param_bool
;____________________________________________ arithmetic
!ms_def{"Neg",#msfunc_neg,#msprec_none,"(int.l) // negation"}
!ret_int:!param_int
!ms_def{"Neg",#msfunc_neg,#msprec_none,"(float.f) // negation"}
!ret_float:!param_float
!ms_def{"Neg",#msfunc_not,#msprec_none,"(bool.b) // negation"}
!ret_bool:!param_bool
!ms_def{"-" ,#msfunc_neg,#msprec_unary,"(int.l) // negation"}
!ret_int:!param_int
!ms_def{"-" ,#msfunc_neg,#msprec_unary,"(float.f) // negation"}
!ret_float:!param_float
!ms_def{"-" ,#msfunc_not,#msprec_unary,"(bool.b) // negation"}
!ret_bool:!param_bool
!ms_def{"+",#msfunc_add,#msprec_add   ," // add (int)"}
!ret_int:!param_int:!param_int
!ms_def{"+",#msfunc_add,#msprec_add   ," // add (bool,=XOR)"}
!ret_bool:!param_bool:!param_bool
!ms_def{"+",#msfunc_add,#msprec_add   ," // add (float)"}
!ret_float:!param_float:!param_float
!ms_def{"+",#msfunc_add,#msprec_add   ," // string concatenation"}
!ret_string:!param_string:!param_string
!ms_def{"-",#msfunc_sub,#msprec_add   ," // subtraction (int)"}
!ret_int:!param_int:!param_int
!ms_def{"-",#msfunc_sub,#msprec_add   ," // subtraction (float)"}
!ret_float:!param_float:!param_float
!ms_def{"*",#msfunc_mul,#msprec_mul   ," // multiplication (int)"}
!ret_int:!param_int:!param_int
!ms_def{"*",#msfunc_mul,#msprec_mul   ," // multiplication (float)"}
!ret_float:!param_float:!param_float
!ms_def{"/",#msfunc_div,#msprec_mul   ," // division (int)"}
!ret_int:!param_int:!param_int
!ms_def{"/",#msfunc_div,#msprec_mul   ," // division (float)"}
!ret_float:!param_float:!param_float
!ms_def{"%",#msfunc_mod,#msprec_mul   ," // modulo value of integer"}
!ret_int:!param_int:!param_int
!ms_def{"Log",#msfunc_log,#msprec_none,"(float.f) // log_10 of float.f"}
!ret_float:!param_float
!ms_def{"Ln",#msfunc_ln  ,#msprec_none,"(float.f) // logarithmus naturalis of float.f"}
!ret_float:!param_float
!ms_def{"Ld",#msfunc_ld  ,#msprec_none,"(float.f) // logarithmus dualis of float.f"}
!ret_float:!param_float
!ms_def{"Exp",#msfunc_exp,#msprec_none,"(float.f) // exponential of float.f (=e^float.f)"}
!ret_float:!param_float
!ms_def{"Pow",#msfunc_pow,#msprec_none,"(a.f,b.f) // a.f power of b.f"}
!ret_float:!param_float
!ms_def{"^",#msfunc_pow  ,#msprec_power," // power of"}
!ret_float:!param_float
!ms_def{"Sqr",#msfunc_sqr,#msprec_none,"(a.f) // square root of a.f"}
!ret_float:!param_float
;____________________________________________ logic
!ms_def{"Not" ,#msfunc_not,#msprec_none    ,"(bool.b) // bool negation"}
!ret_bool:!param_bool
!ms_def{"!"   ,#msfunc_not,#msprec_unary   ,"(bool.b) // bool negation"}
!ret_bool:!param_bool
!ms_def{"Not" ,#msfunc_not,#msprec_none    ,"(int.l) // integer bitwise negation"}
!ret_int:!param_int
!ms_def{"!"   ,#msfunc_not,#msprec_unary   ,"(int.l) // integer bitwise negation"}
!ret_int:!param_int
!ms_def{"&&"  ,#msfunc_and,#msprec_logicand," // bool logical AND"}
!ret_bool:!param_bool:!param_bool
!ms_def{"&"   ,#msfunc_and,#msprec_bitand  ," // integer bitwise AND"}
!ret_int:!param_int:!param_int
!ms_def{"||"  ,#msfunc_or ,#msprec_logicor ," // bool logical OR"}
!ret_bool:!param_bool:!param_bool
!ms_def{"|"   ,#msfunc_or ,#msprec_bitor   ," // integer bitwise OR"}
!ret_int:!param_int:!param_int
!ms_def{"Xor" ,#msfunc_xor ,#msprec_none   ,"(int.l) // integer bitwise XOR"}
!ret_int:!param_int:!param_int
!ms_def{"Xor" ,#msfunc_add ,#msprec_none   ,"(bool.b) // bool logical XOR"}
!ret_bool:!param_bool:!param_bool
;_________________________________________ numeric
!ms_def{"Rnd",#msfunc_rnd,#msprec_none,"(low.l,high.l) // integer random number"}
!ret_int:!param_int:!param_int
!ms_def{"Rnd",#msfunc_rnd,#msprec_none,"(low.f,high.f) // float random number"}
!ret_float:!param_float:!param_float
!ms_def{"Sgn",#msfunc_sgn,#msprec_none,"(int.l) // signum of integer"}
!ret_int:!param_int
!ms_def{"Sgn",#msfunc_sgn,#msprec_none,"(float.f) // signum of float"}
!ret_float:!param_float
!ms_def{"Abs",#msfunc_abs,#msprec_none,"(int.l) // return the absolute value of the given integer"}
!ret_int:!param_int
!ms_def{"Abs",#msfunc_abs,#msprec_none,"(float.f) // return the absolute value of the given float"}
!ret_float:!param_float
!ms_def{"Min",#msfunc_min,#msprec_none,"(a.l,b.l) // return the minimum of a and b"}
!ret_int:!param_int:!param_int
!ms_def{"Min",#msfunc_min,#msprec_none,"(a.f,b.f) // return the minimum of a and b"}
!ret_float:!param_float:!param_float
!ms_def{"Min",#msfunc_min,#msprec_none,"(a.b,b.b) // return the minimum of a and b"}
!ret_bool:!param_bool:!param_bool
!ms_def{"Min",#msfunc_min,#msprec_none,"(a.s,b.s) // return the minimum of a and b"}
!ret_string:!param_string:!param_string
!ms_def{"Max",#msfunc_max,#msprec_none,"(a.l,b.l) // return the maximum of a and b"}
!ret_int:!param_int:!param_int
!ms_def{"Max",#msfunc_max,#msprec_none,"(a.f,b.f) // return the maximum of a and b"}
!ret_float:!param_float:!param_float
!ms_def{"Max",#msfunc_max,#msprec_none,"(a.b,b.b) // return the maximum of a and b"}
!ret_bool:!param_bool:!param_bool
!ms_def{"Max",#msfunc_max,#msprec_none,"(a.s,b.s) // return the maximum of a and b"}
!ret_string:!param_string:!param_string
!ms_def{"Lim",#msfunc_limit,#msprec_none,"(a.l,min.l,max.l) // limit a between min and max"}
!ret_int:!param_int:!param_int:!param_int
!ms_def{"Wrap",#msfunc_wrap,#msprec_none,"(a.l,min.l,max.l) // wrap a between min and max"}
!ret_int:!param_int:!param_int:!param_int
!ms_def{"Lim",#msfunc_limit,#msprec_none,"(a.f,min.f,max.f) // limit a between min and max"}
!ret_float:!param_float:!param_float:!param_float
!ms_def{"Wrap",#msfunc_wrap,#msprec_none,"(a.f,min.f,max.f) // wrap a between min and max"}
!ret_float:!param_float:!param_float:!param_float
!ms_def{"Inc",#msfunc_inc,#msprec_none,"(int.l) // add 1 to int.l"}
!ret_int:!param_int
!ms_def{"Inc",#msfunc_inc,#msprec_none,"(float.f) // add 1.0 to float.f"}
!ret_float:!param_float
!ms_def{"++",#msfunc_inc,#msprec_unary," // add 1 (int)"}
!ret_int:!param_int
!ms_def{"++",#msfunc_inc,#msprec_unary," // add 1.0 (float)"}
!ret_float:!param_float
;_____________________________________________ trigonometric
!ms_def{"Sin",#msfunc_sin,#msprec_none,"(alpha.f) // sinus of alpha.f"}
!ret_float:!param_float
!ms_def{"Cos",#msfunc_cos,#msprec_none,"(alpha.f) // cosinus of alpha.f"}
!ret_float:!param_float
!ms_def{"Tan",#msfunc_tan,#msprec_none,"(alpha.f) // tangens of alpha.f"}
!ret_float:!param_float
!ms_def{"ASin",#msfunc_asin,#msprec_none,"(x.f) // invers sinus of x.f"}
!ret_float:!param_float
!ms_def{"ACos",#msfunc_acos,#msprec_none,"(x.f) // invers cosinus of x.f"}
!ret_float:!param_float
!ms_def{"ATan",#msfunc_atan,#msprec_none,"(x.f) // invers tangens of x.f"}
!ret_float:!param_float
;________________________________________ string
!ms_def{"Left$",#msfunc_left  ,#msprec_none,"(string.s,length.l) // cut length.l characters from left"}
!ret_string:!param_string:!param_int
!ms_def{"Right$",#msfunc_right,#msprec_none,"(string.s,length.l) // cut length.l characters from right"}
!ret_string:!param_string:!param_int
!ms_def{"Mid$",#msfunc_mid    ,#msprec_none,"(string.s,pos.l,length.l) // cut length.l characters from pos.l"}
!ret_string:!param_string:!param_int:!param_int
!ms_def{"Len",#msfunc_len     ,#msprec_none,"(string.s) // get length of string.s"}
!ret_int:!param_string
!ms_def{"Replace$",#msfunc_replace ,#msprec_none,"(string.s,what.s,this.s) // replace all occurences of what.s with this.s"}
!ret_string:!param_string:!param_string:!param_string
!ms_def{"Instr",#msfunc_instr ,#msprec_none,"(string.s,what.s[,pos.l]) // find what.s in string.s and return position, starting from pos.l"}
!ret_int:!param_string:!param_string:!opt_int
!ms_def{"CropArg$",#msfunc_croparg  ,#msprec_none,"(string.s,index.l) // crop the index.l argument out of an argument string"}
!ret_string:!param_string:!param_int
!ms_def{"NumArgs",#msfunc_numargs  ,#msprec_none,"(string.s) // return the number of arguments in an argument string"}
!ret_int:!param_string
;________________________________________ convert
!ms_def{"Str$" ,#msfunc_str  ,#msprec_none,"(...) // convert any type to string"}
!ret_string:!param_any
!ms_def{"Val"  ,#msfunc_val  ,#msprec_none,"(...) // convert string to integer"}
!ret_int:!param_string
!ms_def{"Val"  ,#msfunc_val  ,#msprec_none,"(...) // convert string to float"}
!ret_float:!param_string
!ms_def{"Int"  ,#msfunc_int  ,#msprec_none,"(float.f) // convert float to integer"}
!ret_int:!param_float
!ms_def{"Float",#msfunc_float,#msprec_none,"(int.l) // convert integer to float"}
!ret_float:!param_int
!ms_def{"Bool" ,#msfunc_xtype,#msprec_none,"(...) // convert any type to bool"}
!ret_bool:!param_any
!ms_def{"XType",#msfunc_xtype,#msprec_none,"(...) // convert any type to int"}
!ret_int:!param_any
!ms_def{"XType",#msfunc_xtype,#msprec_none,"(...) // convert any type to float"}
!ret_float:!param_any
!ms_def{"XType",#msfunc_xtype,#msprec_none,"(...) // convert any type to bool"}
!ret_bool:!param_any
!ms_def{"XType",#msfunc_xtype,#msprec_none,"(...) // convert any type to string"}
!ret_string:!param_any
;________________________________________ time & date
!ms_def{"TimeStamp",#msfunc_timestamp,#msprec_none," // return the current time stamp"}
!ret_string
!ms_def{"MSecs",#msfunc_msecs ,#msprec_none,"([timestamp.s]) // return milli seconds of current time or timestamp.s"}
!ret_int:!opt_string
!ms_def{"Secs" ,#msfunc_secs  ,#msprec_none,"([timestamp.s]) // return seconds of current time or timestamp.s "}
!ret_int:!opt_string
!ms_def{"Mins" ,#msfunc_mins  ,#msprec_none,"([timestamp.s]) // return minutess of current time or timestamp.s "}
!ret_int:!opt_string
!ms_def{"Hours",#msfunc_hours ,#msprec_none,"([timestamp.s]) // return hours of current time or timestamp.s "}
!ret_int:!opt_string
!ms_def{"Day"  ,#msfunc_day   ,#msprec_none,"([timestamp.s]) // return the day of the current date or timestamp.s "}
!ret_int:!opt_string
!ms_def{"Month",#msfunc_month ,#msprec_none,"([timestamp.s]) // return the month of the current date or timestamp.s "}
!ret_int:!opt_string
!ms_def{"Year" ,#msfunc_year  ,#msprec_none,"([timestamp.s]) // return the year of the current date or timestamp.s "}
!ret_int:!opt_string
!ms_def{"Date$",#msfunc_date  ,#msprec_none,"([timestamp.s]) // return the date string of the current date or timestamp.s "}
!ret_string:!opt_string
!ms_def{"EClock",#msfunc_eclock,#msprec_none,"([Hz.l]) // return the system ticks in Hz.l resolution (default is 1000Hz)"}
!ret_int:!opt_int

msengine\numFuncs+1


Function.l ms_WriteBinary{fid.l,*binP.msBinary}
succ.l = file_WriteMem{fid,*binP,*binP\csizeMSVB+8}
Function Return succ
End Function

Function.l ms_SaveBinary{filename.s,*binP.msBinary}
succ.l = False
fid.l = file_Open{filename,#file_forcewrite}
If fid>=0
  succ=ms_WriteBinary{fid,*binP}
End If
Function Return succ
End Function

Statement ms_FreeBinary{*binP.msBinary}
If *binP Then FreeVec_ *binP
End Statement

Function.l ms_ReadBinary{fid.l}
DEFTYPE.msBinary header
*binP.msBinary = Null
succ.l = file_ReadMem{fid,header,SizeOf.msBinary}
If succ AND header\MSVB = @"MSVB"
  *binP.msBinary = AllocVec_(header\csizeMSVB + 8,#MEMF_ANY)
  CopyMem_ header,*binP,SizeOf.msBinary
  If file_ReadMem{fid,&*binP\CODE+8,*binP\csizeCODE}
    succ=True
  End If
End If
If succ=False
  FreeVec_ *binP : *binP = Null
End If
Function Return *binP
End Function

Function.l ms_LoadBinary{filename.s}
*binP.msBinary = Null
fid.l = file_Open{filename,#file_read}
If fid>=0
  *binP=ms_ReadBinary{fid}
End If
Function Return *binP
End Function



    

