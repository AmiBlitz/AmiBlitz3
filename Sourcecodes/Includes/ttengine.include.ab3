; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Bin"
; ExeFile         = "TTDemo"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 35
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 10
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max ChunkyBuffer= 2
; /XTRA
; ttengine.include.bb2 automatically generated by FD2Include (Thilo Koehler)

CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
WBStartup
XINCLUDE "error.include.ab3"
CEND

#TTENGINEVERSION     = 7
#TTENGINEMINVERSION  = 6

; Library offsets:
#_LVO_TTENGINEBASE_TT_OpenFontA         = -30
#_LVO_TTENGINEBASE_TT_SetFont           = -36
#_LVO_TTENGINEBASE_TT_CloseFont         = -42
#_LVO_TTENGINEBASE_TT_Text              = -48
#_LVO_TTENGINEBASE_TT_SetAttrsA         = -54
#_LVO_TTENGINEBASE_TT_GetAttrsA         = -60
#_LVO_TTENGINEBASE_TT_TextLength        = -66
#_LVO_TTENGINEBASE_TT_TextExtent        = -72
#_LVO_TTENGINEBASE_TT_TextFit           = -78
#_LVO_TTENGINEBASE_TT_GetPixmapA        = -84
#_LVO_TTENGINEBASE_TT_FreePixmap        = -90
#_LVO_TTENGINEBASE_TT_DoneRastPort      = -96
#_LVO_TTENGINEBASE_TT_AllocRequest      = -102
#_LVO_TTENGINEBASE_TT_RequestA          = -108
#_LVO_TTENGINEBASE_TT_FreeRequest       = -114
#_LVO_TTENGINEBASE_TT_ObtainFamilyListA = -120
#_LVO_TTENGINEBASE_TT_FreeFamilyList    = -126

;/* Tags */

;/* Tags applicability legend: */
;/* O - TT_OpenFont() */
;/* G - TT_GetAttrs() */
;/* S - TT_SetAttrs() */
;/* P - TT_GetPixmap() */

;/* ---- name -------------------- value ----- applicability */
#TT_FontFile             = $6EDA0000    ; OG.. */
#TT_FontStyle            = $6EDA0001    ; OG.. */
#TT_FontStyle_Regular    = 0
#TT_FontStyle_Italic     = 1
#TT_FamilyTable          = $6EDA0002    ; O... */
#TT_FontSize             = $6EDA0003    ; OG.. */
#TT_FontWeight           = $6EDA0004    ; OG.. */
#TT_FontWeight_Normal    = 400
#TT_FontWeight_Bold      = 700
#TT_ColorMap             = $6EDA0005    ; O... */
#TT_Screen               = $6EDA0006    ; O... */
#TT_Window               = $6EDA0007    ; O... */
#TT_FontAscender         = $6EDA0008    ; .G.. */
#TT_FontDescender        = $6EDA0009    ; .G.. */
#TT_Antialias            = $6EDA000F    ; .GSP */
#TT_Antialias_Auto       = 0
#TT_Antialias_Off        = 1
#TT_Antialias_On         = 2
#TT_Encoding             = $6EDA0010    ; .GSP */

; All encoding numbers (excluding TT_Encoding_Default) are equal To IANA */
; registered encoding numbers                                            */
#TT_Encoding_Default     = 0             ; Use ENV:ttfcodepage OR ISO-8859-1 If NOT found */
#TT_Encoding_ISO8859_1   = 4             ; Western Europe AND US */
#TT_Encoding_ISO8859_2   = 5             ; Eastern Europe */
#TT_Encoding_ISO8859_3   = 6
#TT_Encoding_ISO8859_4   = 7
#TT_Encoding_ISO8859_5   = 8
#TT_Encoding_ISO8859_6   = 9
#TT_Encoding_ISO8859_7   = 10
#TT_Encoding_ISO8859_8   = 11
#TT_Encoding_ISO8859_9   = 12
#TT_Encoding_ISO8859_10  = 13
#TT_Encoding_ISO8859_11  = 14
#TT_Encoding_ISO8859_13  = 109
#TT_Encoding_ISO8859_14  = 110
#TT_Encoding_ISO8859_15  = 111
#TT_Encoding_ISO8859_16  = 112
#TT_Encoding_UTF16_BE    = 1013
#TT_Encoding_UTF32_BE    = 1018
#TT_Encoding_UTF8        = 106
#TT_Encoding_UTF16_LE    = 1014
#TT_Encoding_UTF32_LE    = 1019
#TT_Encoding_UTF16       = 1015
#TT_Encoding_UTF32       = 1017

#TT_FontName             = $6EDA0011    ; .G.. */
#TT_FamilyName           = $6EDA0012    ; .G.. */
#TT_SubfamilyName        = $6EDA0013    ; .G.. */
#TT_Transparency         = $6EDA0014    ; .GS.  from 0 To 255 */
#TT_ScaleX               = $6EDA0015    ; O.SP  single precision floating Point +- 0.01 To 100 */
#TT_ScaleY               = $6EDA0016    ; O.SP  single precision floating Point +- 0.01 To 100 */
#TT_SoftStyle            = $6EDA0017    ; ..SP (V5) */
#TT_SoftStyle_None           = $0000
#TT_SoftStyle_Underlined     = $0001
#TT_SoftStyle_DblUnderlined  = $0002
#TT_SoftStyle_Overstriked    = $0004
#TT_SoftStyle_DblOverstriked = $0008
#TT_Foreground           = $6EDA0018    ; ..S.  foreground RGB value*/
#TT_Foreground_UseRastPort  = $FFFFFFFF
#TT_Background           = $6EDA0019    ; ..S.  background RGB value*/
#TT_Background_UseRastPort  = $FFFFFFFF
#TT_FontMaxTop           = $6EDA001E    ; .G.. */
#TT_FontMaxBottom        = $6EDA001F    ; .G.. */
#TT_FontDesignHeight     = $6EDA0020    ; .G.. */
#TT_FontRealAscender     = $6EDA0021    ; .G.. */
#TT_FontRealDescender    = $6EDA0022    ; .G.. */
#TT_FontAccentedAscender = $6EDA0023    ; .G.. */
#TT_CustomEncoding       = $6EDA0024    ; ..SP */
#TT_Gamma                = $6EDA0025    ; ..S. */
#TT_FontBaseline         = #TT_FontMaxTop ;            /* V6.7 */
#TT_FontFixedWidth       = $6EDA0026    ;/* OG.. */  /* V6.7 */
#TT_FontHeight           = $6EDA0027    ;/* .G.. */  /* V6.7 */
#TT_FontWidth            = $6EDA0028    ;/* .G.. */  /* V6.7 */
#TT_DiskFontMetrics      = $6EDA0029    ;/* ..SP */  /* V6.7 */
#TT_ForceFixedWidth      = $6EDA0030    ;/* ..SP */  /* V7.2 */

; Structure returned by TT_GetPixmap() (V5)*/

NEWTYPE.TT_Pixmap
   ttp_Size.l;       ; size of the structure inculdung this field */
   ttp_Width.l;      ; also equal to bytes per row */
   ttp_Height.l;     ; number of rows */
   *ttp_Data.b;       ; grayscale pixmap data */
End NEWTYPE

; font requester attributes (V6) */
#TTRQ_Window             = $6EDA2000  ; struct Window*,   Null              */
#TTRQ_PubScreenName      = $6EDA2001  ; STRPTR,           Null [Workbench]  */
#TTRQ_Screen             = $6EDA2002  ; struct Screen*,   Null              */
#TTRQ_SleepWindow        = $6EDA2003  ; BOOL,             False             */
#TTRQ_TitleText          = $6EDA2004  ; STRPTR,           "Select TrueType font" OR localized */
#TTRQ_PositiveText       = $6EDA2005  ; STRPTR,           "OK" OR localized */
#TTRQ_NegativeText       = $6EDA2006  ; STRPTR,           "Cancel" OR localized */
#TTRQ_InitialLeftEdge    = $6EDA2007  ; Word,             centered On Screen */
#TTRQ_InitialTopEdge     = $6EDA2008  ; Word,             centered On Screen */
#TTRQ_InitialWidth       = $6EDA2009  ; Word,             Max(200, 25% of sceeen width) */
#TTRQ_InitialHeight      = $6EDA200A  ; Word,             Max(200, 50% of Screen height) */
#TTRQ_DoSizes            = $6EDA200B  ; BOOL,             True              */
#TTRQ_DoWeight           = $6EDA200C  ; BOOL,             False             */
#TTRQ_DoStyle            = $6EDA200D  ; BOOL,             False             */


SHARED *_TTEngineBase.Library

; Helper Macros:
Macro __TTEngineBase_SaveRegs
MOVE.l a5,-(a7) : MOVE.l a6,-(a7) : MOVE.l d7,-(a7)
End Macro

Macro __TTEngineBase_RestoreRegs
MOVE.l (a7)+,d7 : MOVE.l (a7)+,a6 : MOVE.l (a7)+,a5
End Macro


; Wrapper Macros:
Macro TT_OpenFontA;{ret.l,taglist}
GetReg a0,`2
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_OpenFontA(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro TT_SetFont;{ret.l,rp,font}
GetReg a1,`2
GetReg a0,`3
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_SetFont(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro TT_CloseFont;{ret.l,font}
GetReg a0,`2
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_CloseFont(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro TT_Text;{ret.l,rp,string,count}
GetReg a1,`2
GetReg a0,`3
GetReg d0,`4
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_Text(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro TT_SetAttrsA;{ret.l,rp,taglist}
GetReg a1,`2
GetReg a0,`3
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_SetAttrsA(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro TT_GetAttrsA;{ret.l,rp,taglist}
GetReg a1,`2
GetReg a0,`3
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_GetAttrsA(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro TT_TextLength;{ret.l,rp,string,count}
GetReg a1,`2
GetReg a0,`3
GetReg d0,`4
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_TextLength(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro TT_TextExtent;{ret.l,rp,string,count,te}
GetReg a1,`2
GetReg a0,`3
GetReg d0,`4
GetReg a2,`5
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_TextExtent(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro TT_TextFit;{ret.l,rp,string,count,te,tec,dir,cwidth,cheight}
GetReg a1,`2
GetReg a0,`3
GetReg d0,`4
GetReg a2,`5
GetReg a3,`6
GetReg d1,`7
GetReg d2,`8
GetReg d3,`9
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_TextFit(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro TT_GetPixmapA;{ret.l,font,string,count,taglist}
GetReg a1,`2
GetReg a2,`3
GetReg d0,`4
GetReg a0,`5
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_GetPixmapA(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro TT_FreePixmap;{ret.l,pixmap}
GetReg a0,`2
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_FreePixmap(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro TT_DoneRastPort;{ret.l,rp}
GetReg a1,`2
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_DoneRastPort(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro TT_AllocRequest;{ret.l}
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_AllocRequest(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro TT_RequestA;{ret.l,request,taglist}
GetReg a0,`2
GetReg a1,`3
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_RequestA(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro TT_FreeRequest;{ret.l,APTRrequest}
GetReg a0,`2
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_FreeRequest(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro TT_ObtainFamilyListA;{ret.l,taglist}
GetReg a0,`2
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_ObtainFamilyListA(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro TT_FreeFamilyList;{ret.l,list}
GetReg a0,`2
!__TTEngineBase_SaveRegs
GetReg a6,*_TTEngineBase
JSR _LVO_TTENGINEBASE_TT_FreeFamilyList(a6)
!__TTEngineBase_RestoreRegs
`1 = PutRegD0
End Macro


; Open/Close Library:
Function.l TT_OpenLib{@minVersion.l}
If (*_TTEngineBase)
  If (minVersion<=*_TTEngineBase\lib_Version) Then Function Return *_TTEngineBase
  CloseLibrary_ *_TTEngineBase : *_TTEngineBase = 0
End If
If minVersion<0 Then minVersion = 0
*_TTEngineBase = OpenLibrary_ ("ttengine.library",minVersion)
If *_TTEngineBase
  ; (!) Do some other init stuff here...
Else
  If (minVersion>0)
    error{"Unable to open ttengine.library (v"+Str$(minVersion)+"+)!"}
  Else
    error{"Unable to open ttengine.library!"}
  End If
End If
Function Return *_TTEngineBase
End Function

Statement TT_CloseLib{}
If *_TTEngineBase
  ; (!) Do some freeing stuff here that you inited in _TTEngineBase_Init{}...
  CloseLibrary_ *_TTEngineBase : *_TTEngineBase = 0
End If
End Statement
!autoexit{TT_CloseLib}


; Wrapper Functions:
Function.l TT_OpenFontA{*taglist.TagItem}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_OpenFontA{result.l,*taglist}
End If
Function Return result
End Function

Function.l TT_SetFont{*rp.RastPort,_font.l}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_SetFont{result.l,*rp,_font}
End If
Function Return result
End Function

Function.l TT_CloseFont{_font.l}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_CloseFont{result.l,_font}
End If
Function Return result
End Function

Function.l TT_Text{*rp.RastPort,string.s}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_Text{result.l,*rp,&string,FLen(string)}
End If
Function Return result
End Function

Function.l TT_TextP{*rp.RastPort,mem.l,count.l}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_Text{result.l,*rp,mem,count}
End If
Function Return result
End Function

Function.l TT_SetAttrsA{*rp.RastPort,*taglist.TagItem}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_SetAttrsA{result.l,*rp,*taglist}
End If
Function Return result
End Function

Function.l TT_GetAttrsA{*rp.RastPort,*taglist.TagItem}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_GetAttrsA{result.l,*rp,*taglist}
End If
Function Return result
End Function

Function.l TT_TextLength{*rp.RastPort,_string.l,_count.l}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_TextLength{result.l,*rp,_string,_count}
End If
Function Return result
End Function

Function.l TT_TextExtent{*rp.RastPort,string.s,_count.l,_te.l}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_TextExtent{result.l,*rp,&string,_count,_te}
End If
Function Return result
End Function

Function.l TT_TextFit{*rp.RastPort,string.s,_count.l,_te.l,_tec.l,_dir.l,_cwidth.l,_cheight.l}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_TextFit{result.l,*rp,&string,_count,_te,_tec,_dir,_cwidth,_cheight}
End If
Function Return result
End Function

Function.l TT_GetPixmapA{_font.l,string.s,_count.l,*taglist.TagItem}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_GetPixmapA{result.l,_font,&string,_count,*taglist}
End If
Function Return result
End Function

Function.l TT_FreePixmap{_pixmap.l}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_FreePixmap{result.l,_pixmap}
End If
Function Return result
End Function

Function.l TT_DoneRastPort{*rp.RastPort}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_DoneRastPort{result.l,*rp}
End If
Function Return result
End Function

Function.l TT_AllocRequest{}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_AllocRequest{result.l}
End If
Function Return result
End Function

Function.l TT_RequestA{_request.l,*taglist.TagItem}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_RequestA{result.l,_request,*taglist}
End If
Function Return result
End Function

Function.l TT_FreeRequest{_APTRrequest.l}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_FreeRequest{result.l,_APTRrequest}
End If
Function Return result
End Function

Function.l TT_ObtainFamilyListA{*taglist.TagItem}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_ObtainFamilyListA{result.l,*taglist}
End If
Function Return result
End Function

Function.l TT_FreeFamilyList{_list.l}
If (TT_OpenLib{}) ; (!) put your min version here if needed!
  !TT_FreeFamilyList{result.l,_list}
End If
Function Return result
End Function



CNIF #__include=0

; (!) place your built-in demo here
Window 0,0,0,320,200,$E,"",1,0
*rp.RastPort = RastPort(0)
a.s = "Fonts:Unicode.ttf"
font.l = TT_OpenFontA{Tags(#TT_FontFile,&a,#TT_FontSize ,16)}
If font
  TT_SetFont{*rp,font}
  TT_SetAttrsA{*rp,Tags(#TT_Window,*rp\Layer\Window,#TT_Antialias,#TT_Antialias_On,#TT_Gamma,1500)}
  TT_SetAttrsA{*rp,Tags(#TT_Foreground,$000000,#TT_Background,$FFFFFF)}
  TT_SetAttrsA{*rp,Tags(#TT_Encoding,#TT_Encoding_UTF8,#TT_DiskFontMetrics,1)}
  Move_ *rp,40,60
  SetAPen_ *rp,1
  SetDrMd_ *rp,#JAM2
  a.s = "Erfolg [IIL/KfIlk]"+Chr$(13)
  TT_TextP{*rp,&a.s,17}
  TT_CloseFont{font}
Else
  error{"Unable to open font!"}
End If
While WaitEvent><#IDCMP_CLOSEWINDOW : Delay_ 1:Wend
End

CEND


