; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/bin"
; ExeFile         = "ClipboardDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 62
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: clipboard.include                                                     /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 08/01/2008                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Easy Clipboard I/O                                            /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
CEND


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = clipboard_Write {textP.l,@unit.l}                        /
;/                                                                             /
;/ Description:                                                                /
;/ Write a text from a memory buffer to the clipboard.                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - textP.l   : pointer to the text                                                        /
;/ - unit.l    : optional clipboard unit                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : -1 if everything went well, 0 otherwise                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l clipboard_SetText{textP.l,@blen.l,@unit.l}
If unit<0 Then unit=0
succ.l = False
*iff.IFFHandle=AllocIFF_()
If *iff
  *iff\iff_Stream = OpenClipboard_ (unit)
  If *iff\iff_Stream
    InitIFFasClip_ *iff
    If (OpenIFF_ (*iff, #IFFF_WRITE)=0)
      If (PushChunk_ (*iff, #ID_FTXT, #ID_FORM, #IFFSIZE_UNKNOWN)=0)
        If (PushChunk_ (*iff, 0, #ID_CHRS, #IFFSIZE_UNKNOWN)=0)
          If blen<0
            blen = 0
            While Peek.b(textP+blen) : blen+1 : Wend
          End If
          If (WriteChunkBytes_ (*iff, textP, blen) = blen)
            If (PopChunk_ (*iff)=0) Then succ=True
          End If
        End If
        If succ
          If (PopChunk_ (*iff)) Then succ = False
        End If
      End If
      CloseIFF_(*iff)
    End If
    CloseClipboard_ (*iff\iff_Stream)
  End If
  FreeIFF_ (*iff)
End If
Function Return succ
End Function


Function.l clipboard_SetTextStr{text.s,@unit.l}
succ.l = clipboard_SetText{&text,FLen(text),unit}
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = clipboard_Read {dataP.l,@maxByteLen.l,@unit.l}
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - unit.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l clipboard_GetText{textP.l,@maxByteLen.l,@unit.l}
If unit<0 Then unit=0
If maxByteLen<0 Then maxByteLen=$7fffffff
done.l = 0
*iff.IFFHandle=AllocIFF_()
If *iff
  *iff\iff_Stream = OpenClipboard_ (unit)
  If *iff\iff_Stream
    InitIFFasClip_ *iff
    If (OpenIFF_ (*iff, #IFFF_READ)=0)
      breakme.l = False
      If (StopChunk_ (*iff, #ID_FTXT, #ID_CHRS)=0)
        succ.l = True
        Repeat
          err.l = ParseIFF_ (*iff,#IFFPARSE_SCAN)
          If (err = #IFFERR_EOC) Then Goto clipbreak
          If (err = #IFFERR_EOF) Then breakme = True : Goto clipbreak
          succ = False
          If (err >< 0) Then breakme = True : Goto clipbreak

          *cn.ContextNode = CurrentChunk_(*iff)

          If ((*cn><0) AND (*cn\cn_Type = #ID_FTXT) AND (*cn\cn_ID = #ID_CHRS))

            todo.l = maxByteLen-1
            done.l = 0
            Repeat
              copysize.l = ReadChunkBytes_ (*iff,textP+done,todo)
              If copysize>0
                done + copysize
                todo - copysize
                succ = True
              EndIf
            Until copysize<=0 OR todo<=0

            realdone.l = 0
            While (realdone<done AND Peek.b(textP+realdone)><0) : realdone+1 : Wend
            done=realdone

          End If
          clipbreak:
        Until breakme
      End If
      CloseIFF_(*iff)
    End If
    CloseClipboard_ (*iff\iff_Stream)
  End If
  FreeIFF_ (*iff)
End If
If maxByteLen>0 Then Poke.b textP+done,0 ; terminate with 0
Function Return done
End Function


Function.l clipboard_GetTextLength{@unit.l}
If unit<0 Then unit=0
MaxLen text.s = 4096
done.l = 0
*iff.IFFHandle=AllocIFF_()
If *iff
  *iff\iff_Stream = OpenClipboard_ (unit)
  If *iff\iff_Stream
    InitIFFasClip_ *iff
    If (OpenIFF_ (*iff, #IFFF_READ)=0)
      breakme.l = False
      If (StopChunk_ (*iff, #ID_FTXT, #ID_CHRS)=0)
        succ.l = True
        Repeat
          err.l = ParseIFF_ (*iff,#IFFPARSE_SCAN)
          If (err = #IFFERR_EOC) Then Goto clipbreak_t
          If (err = #IFFERR_EOF) Then breakme = True : Goto clipbreak_t
          succ = False
          If (err >< 0) Then breakme = True : Goto clipbreak_t

          *cn.ContextNode = CurrentChunk_(*iff)

          If ((*cn><0) AND (*cn\cn_Type = #ID_FTXT) AND (*cn\cn_ID = #ID_CHRS))

            done.l = 0
            Repeat
              copysize.l = ReadChunkBytes_ (*iff,&text,4095)
              If copysize>0

                realdone.l = 0
                While (realdone<copysize AND Peek.b(&text+realdone)><0) : realdone+1 : Wend
                done + realdone

                If realdone<copysize
                  copysize=0
                End If

              EndIf
            Until copysize<=0

          End If
          clipbreak_t:
        Until breakme
      End If
      CloseIFF_(*iff)
    End If
    CloseClipboard_ (*iff\iff_Stream)
  End If
  FreeIFF_ (*iff)
End If
Function Return done
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = clipboard_Read {@unit.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ Read the clipboard text (if any) to a basic string.                                          /
;/ The length is limited to 4095 characters to prevent string buffer overflows.
;/                                                                             /
;/ Inputs:                                                                     /
;/ - unit.l    : optional clipboard unit to read from                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s  : text from clipboard                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s clipboard_GetTextStr{@unit.l}
If unit<0 Then unit=0
MaxLen text.s = 4096
clipboard_GetText{&text,4096,unit}
text.s = Peek.s(&text)
Function Return text
End Function


CNIF #__include=0
; demo
MaxLen membuff.s= 4096
memlen.l = clipboard_GetTextLength{}
NPrint "Length in Clipboard: ",memlen
memlen2.l = clipboard_GetText{&membuff,4096}
;If memlen2><memlen Then
NPrint "different sizes, estiamted ",memlen," but got ",memlen2
For n.l=0 To memlen+2
  c.b = Peek.b(&membuff+n)
  a.s = "0x"+Right$(Hex$(c&$FF),2)
  If c.b>32 Then a.s = Chr$(c)
  If n>=memlen Then a.s = ">>"+a
  NPrint n," ",a.s
Next
membuff=Peek.s(&membuff)
NPrint "Reading from clip: >|",membuff,"|< end of clip!"
;NPrint "Writing to clip..." : clipboard_SetTextStr{"Hello, this is a test!"}
NPrint "Reading from clip: ",clipboard_GetTextStr{}
End
CEND


