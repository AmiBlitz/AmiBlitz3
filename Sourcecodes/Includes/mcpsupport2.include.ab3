; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "MCPDemo"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.1.0
; NumberOfBuilds  = 236
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 50
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 50
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 50
; Max ChunkyBuffer= 2
; /XTRA
; mcpsupport2.include.bb2 generated by FD2Include (Thilo Koehler)

CNIF #__include=0
OPTIMIZE 5
SYNTAX 2
;WBStartup
CEND

XINCLUDE "error.include.ab3"

; Library offsets:
#_LVO_MCPBASE_mcpLoadFile          = -30
#_LVO_MCPBASE_mcpGetTaskName       = -36
#_LVO_MCPBASE_mcpMatchPattern      = -42
#_LVO_MCPBASE_mcpGetTaskNameNoCopy = -48
#_LVO_MCPBASE_mcpGetFilename       = -54
#_LVO_MCPBASE_mcpForceKeymap       = -60
#_LVO_MCPBASE_mcpTestScreenCorners = -66

SHARED *_MCPBase.Library

Macro __MCPBase_SaveRegs
MOVE.l a5,-(a7) : MOVE.l a6,-(a7) : MOVE.l d7,-(a7)
End Macro

Macro __MCPBase_RestoreRegs
MOVE.l (a7)+,d7 : MOVE.l (a7)+,a6 : MOVE.l (a7)+,a5
End Macro

; Wrapper Macros:

Macro mcpsupport2_mcpLoadFile ; {ret.l,MemBits,Filename,(a0,a1}
GetReg a0,`2
GetReg a1,`3
!__MCPBase_SaveRegs
GetReg a6,*_MCPBase
JSR _LVO_MCPBASE_mcpLoadFile(a6)
!__MCPBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro mcpsupport2_mcpGetTaskName ; {ret.l,Task,Buffer,Flags,Buffersize}
GetReg a0,`2
GetReg a1,`3
GetReg d0,`4
GetReg d1,`5
!__MCPBase_SaveRegs
GetReg a6,*_MCPBase
JSR _LVO_MCPBASE_mcpGetTaskName(a6)
!__MCPBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro mcpsupport2_mcpMatchPattern ; {ret.l,Pattern,String}
GetReg d0,`2
GetReg d1,`3
!__MCPBase_SaveRegs
GetReg a6,*_MCPBase
JSR _LVO_MCPBASE_mcpMatchPattern(a6)
!__MCPBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro mcpsupport2_mcpGetTaskNameNoCopy ; {ret.l,Task,Flags}
GetReg a0,`2
GetReg d0,`3
!__MCPBase_SaveRegs
GetReg a6,*_MCPBase
JSR _LVO_MCPBASE_mcpGetTaskNameNoCopy(a6)
!__MCPBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro mcpsupport2_mcpGetFilename ; {ret.l,Buffer,Tags}
GetReg a0,`2
GetReg a1,`3
!__MCPBase_SaveRegs
GetReg a6,*_MCPBase
JSR _LVO_MCPBASE_mcpGetFilename(a6)
!__MCPBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro mcpsupport2_mcpForceKeymap ; {ret.l,Keymapname}
GetReg a0,`2
!__MCPBase_SaveRegs
GetReg a6,*_MCPBase
JSR _LVO_MCPBASE_mcpForceKeymap(a6)
!__MCPBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro mcpsupport2_mcpTestScreenCorners ; {ret.l,Screen,CornerType,BorderSize}
GetReg a0,`2
GetReg d0,`3
GetReg d1,`4
!__MCPBase_SaveRegs
GetReg a6,*_MCPBase
JSR _LVO_MCPBASE_mcpTestScreenCorners(a6)
!__MCPBase_RestoreRegs
`1 = PutRegD0
End Macro

; init/free library
Function.l mcpsupport2_OpenLib{@minVersion.l}
If *_MCPBase
  If minVersion<*_MCPBase\lib_Version Then Function Return *_MCPBase
  CloseLibrary_ *_MCPBase
  *_MCPBase = 0
End If
If minVersion<0 Then minVersion = 0
*_MCPBase = OpenLibrary_ ("mcpsupport2.library",minVersion)
If *_MCPBase
  ; ** Do some other init stuff here...
Else
  If minVersion>0
    error {"Unable to open mcpsupport2.library (v"+Str$(minVersion)+"+)!"}
  Else
    error {"Unable to open mcpsupport2.library!"}
  End If
End If
Function Return *_MCPBase
End Function

Statement mcpsupport2_CloseLib{}
If *_MCPBase
  ; ** Do some freeing stuff here that you inited in _MCPBase_Init{}...
  CloseLibrary_ *_MCPBase : *_MCPBase = 0
End If
End Statement
!autoexit {mcpsupport2_CloseLib}

Function.l mcp_MatchPattern{Pattern.s,String.s}
If mcpsupport2_OpenLib{}
  !mcpsupport2_mcpMatchPattern{ret.l,&Pattern,&String}
End If
Function Return ret
End Function

Function.s mcp_GetTaskName{*Task.Task,Flags.l}
If mcpsupport2_OpenLib{}
  MaxLen Name.s = 1024
  !mcpsupport2_mcpGetTaskName {ret.l,*Task,&Name,Flags,1024}
  Name = Peek.s(&Name)
End If
Function Return Name
End Function

Function.s mcp_GetFilename{*Tags_.TagItem}
If mcpsupport2_OpenLib{}
  MaxLen Name.s = 1024
  !mcpsupport2_mcpGetFilename {ret.l,&Name,*Tags_}
End If
Function Return Name
End Function

Function.l mcp_LoadFile{MemBits.l,Filename.s}
If mcpsupport2_OpenLib{}
  !mcpsupport2_mcpLoadFile {ret.l,MemBits,&Filename}
End If
Function Return ret
End Function

Function.l mcp_GetTaskNameNoCopy{*Task.Task,Flags.l}
If mcpsupport2_OpenLib{}
  !mcpsupport2_mcpGetTaskNameNoCopy {nameP.l,*Task,Flags}
End If
Function Return nameP
End Function

Function.l mcp_ForceKeymap{Keymapname.s}
If mcpsupport2_OpenLib{}
  !mcpsupport2_mcpForceKeymap {ret.l,&Keymapname}
End If
Function Return ret
End Function

Function.l mcp_TestScreenCorners{*scr.Screen,CornerType.l,BorderSize.l}
If mcpsupport2_OpenLib{}
  !mcpsupport2_mcpTestScreenCorners {ret.l,*scr,CornerType,BorderSize}
End If
Function Return ret
End Function


CNIF #__include=0

; ** place your built-in demo here !

*Task.Task = FindTask_(0)
NPrint "Taskname is: ",mcp_GetTaskName{*Task,-1}

string.s = "The brown fox jumped over the lazy dog."
pattern.s = "#?brown#?"
NPrint "Match ",string," with ",pattern,": ",mcp_MatchPattern{pattern,string}
End

CEND
