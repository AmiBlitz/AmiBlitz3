; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "PopMailDemo"
; CreateIcon      = 0
; Residents       = "all.res,sdstcp.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 6
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = "593700"
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 26
; CursorColumn    = 26
; LabelSearch     = "upd"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 2
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: popmail.include                                                       /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ INCLUDE "error.include"                         /
;/ INCLUDE "tcp.include"                           /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
;INCLUDE "error.include"
XINCLUDE "tcp.include.ab3"

#mstatus_none  = 0
#mstatus_ready = 1
#mstatus_user  = 2
#mstatus_pass  = 3
#mstatus_stat  = 4
#mstatus_uidl  = 6
#mstatus_quit  = 5
#mstatus_end   = 7

#max_popmailports = #max_sockets

#popmail_timeout = 200

NEWTYPE.popmail
id.s
number.l
End NEWTYPE

NEWTYPE.popmailport
body.s
popmails.l
is_open.w
socket.w
popmail.popmail
End NEWTYPE

Dim List popmail.popmail(500)
Dim popmailport.popmailport (#max_popmailports-1)

USEPATH popmailport(socket)


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = popmail_number {socket.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l popmail_number {socket.l}
SHARED popmailport()
Function Return \popmail\number
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = popmail_id {socket.l}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s popmail_id {socket.l}
SHARED popmailport()
Function Return \popmail\id
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = popmail_crop {socket.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s popmail_crop {socket.l}
SHARED popmailport()
a.s = \body
While Asc(Left$(a.s,1))<33 AND Len(a.s)>0                       ; Spaces wegrotzen
  a.s = Right$(a.s,Len(a.s)-1)
Wend
finished=False
While finished=False
  c.s = Left$(a.s,1)
  If Asc(c.s)>32
    b.s =b.s + c.s
  Else
    finished = True
  End If
  a.s = Right$(a.s,Len(a.s)-1)
Wend
\body = a.s
Function Return b.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = popmail_ok {body.s}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - body.s    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w popmail_ok {body.s}
If UCase$(Left$(body.s,3))="+OK" Then succ.w = True:Else succ.w = False
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = popmail_open {socket.l,host.s,user.s,password.s}        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/ - host.s    : ???                                                           /
;/ - user.s    : ???                                                           /
;/ - password.s    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l popmail_open {socket.l,host.s,user.s,password.s}
SHARED popmail(),popmailport()
\popmails = 0
If tcp_Open{}
If tcp_Connect {socket,host.s,#port_popmail}
  status.l = #mstatus_ready
  While status >< #mstatus_end
    Delay_ 1
    If tcp_check {}
     If tcp_socket{} = socket
      If tcp_body{} = ""
        NPrint "Connection closed."
        status = #mstatus_end
      Else
        NPrint "Socket: ",tcp_socket {}
        NPrint "Data: ",tcp_body {}
        If popmail_ok {tcp_body{}}

          Select status
          Case #mstatus_ready
            NPrint "SERVER READY !"
            status = #mstatus_user
            tcp_sendn {socket,"USER "+user.s}

          Case #mstatus_user
            NPrint "user !"
            status = #mstatus_pass
            tcp_sendn {socket,"PASS "+password.s}

          Case #mstatus_pass
            NPrint "password !"
            status = #mstatus_stat
            tcp_sendn {socket,"STAT"}

          Case #mstatus_stat
            NPrint "statistics !"
            status = #mstatus_uidl
            \body = tcp_body{}
            \body = Right$(\body,Len(\body)-3)
            \popmails = value{popmail_crop{socket}}
            NPrint \popmails," popmails gefunden !"
            If \popmails
              status = #mstatus_uidl
              tcp_sendn {socket,"UIDL"}
            Else
              status = #mstatus_quit
              tcp_sendn {socket,"QUIT"}
            End If

          Case #mstatus_uidl
            NPrint "UDIL !"
            \body = tcp_body{}
            \body = Right$(\body,Len(\body)-5)
            n.l = 0
            While \body><"" AND n<\popmails
              n+1
              If AddItem (popmail())
                popmail()\number = value {popmail_crop{socket}}
                popmail()\id     = popmail_crop{socket}
                NPrint "popmail gefunden : ",popmail()\number," - ",popmail()\id
              Else
                \body = ""
                error {"Cannot download all popmails at once. Try again !"}
              End If
            Wend
            ;tcp_sendn {socket,"QUIT"}
            status = #mstatus_end

          Case #mstatus_quit
            status = #mstatus_end
            NPrint "GEQUITTED !"

          End Select

        Else
          NPrint "connection aborted !"
          If status><#mstatus_quit
            tcp_sendn {socket,"QUIT"}
            status = #mstatus_quit
          Else
            status = #mstatus_end
          End If

        End If
      End If
     Else
       error {"Wrong socket !"}
     End If
    End If
  Wend
End If
End If
Function Return \popmails
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = popmail_next {socket.l,filename.s}                      /
;/                                                                             /
;/ Description:                                                                /
;/             ;tcp_sendn {socket,"QUIT"}                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w popmail_next {socket.l,filename.s}
SHARED popmailport(),popmail()
succ.w = False
n.l = 0
ResetList popmail()
If NextItem(popmail())
  dos.l = file_open {filename.s,"popmail",#file_forcewrite}
  If dos>-1
    NPrint "empfange ...",popmail()\number
    tcp_sendn {socket,"RETR "+Str$(popmail()\number)}
    \popmail\id     = popmail()\id
    \popmail\number = popmail()\number
    KillItem popmail()
    octets.l=1
    break.w = False
    timeout.l = 0
    While break=False AND octets>0
      If tcp_check{}
        If tcp_socket{}=socket
          Print "packet ",n:n+1
          If n=1
            \body = tcp_body{}
            \body = Right$(\body,Len(\body)-3)
            a.s = popmail_crop {socket}
            octets.l = value {a.s}
            NPrint "epopmail found with ",octets," octets !"
            timeout = 0
            octets + 3
          Else
            body.s = tcp_body{}
            succ.w = file_write {dos,&body.s,Len(body.s)}
            octets - tcp_size {}
            If succ.w = False Then break = True
          End If
          NPrint " - ",octets," left"
        End If
      Else
        timeout+1
        Delay_ 1
        If timeout=#popmail_timeout Then error {"Message timed out ! "+Str$(octets)+" octets left !"}:break=True
      End If
    Wend
    If break = False Then succ.w = True:file_close {dos}:Else succ.w = False:file_erase {dos}
  End If
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: popmail_delete {socket.l,number.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/ - number.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement popmail_delete {socket.l,number.l}
tcp_sendn {socket,"DELE "+Str$(number)}
succ.w = False
timeout.l = 0
While succ.w = False
  If tcp_check {}
    If tcp_socket{}=socket
      succ = True
      If popmail_ok {tcp_body{}}
        NPrint "popmail DELD !"
      Else
        NPrint "popmail NOT DELD !"
      End If
    End If
  Else
    Delay_ 1
    timeout+1
    If timeout>#popmail_timeout Then error {"Message timed out !"}:succ.w=True
  End If
Wend
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: popmail_close {socket.l}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement popmail_close {socket.l}
tcp_sendn {socket,"QUIT"}
tcp_socket_shut {socket}
End Statement

