; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "StrPtrDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 15
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 15
; Max BlitzFont   = 4
; Max GTList      = 15
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: strptr.include                                                        /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
NEWTYPE.str
size.l
str.b
End NEWTYPE

CNIF @#STR_USEPOOLED=0
#STR_USEPOOLED    = 0
CEND
#STR_SIZEOFHEADER = 5
#STR_DATAOFFSET   = 4

XINCLUDE "useful.include.ab3"

CNIF #STR_USEPOOLED
SHARED str_MemPoolHeader.l
str_MemPoolHeader = CreatePool_(0,32768,32768)
CEND

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !str_Read                                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro str_Read
Peeks$(Peek.l(`1)+#STR_DATAOFFSET,Peek.l(Peek.l(`1)))
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !SLen                                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro str_Len
`1\size
End Macro

Macro SLen
FLen(`1)
End Macro

Macro str_Free
  *str.str = Peek.l(`1)
  !_ASSERTPTR{*str}
  If *str
    CNIF #STR_USEPOOLED
    FreePooled_ str_MemPoolHeader,*str,*str\size+#STR_SIZEOFHEADER
    CELSE
    FreeMem_ *str,*str\size+#STR_SIZEOFHEADER
    CEND
    Poke.l `1,0
  End If
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: str_Free {ntptr.l}                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - ntptr.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST str_Free {ntptr.l}
!_ASSERTPTR{ntptr}
If ntptr
  !str_Free{ntptr}
End If
End Statement

RunErrsOff
Statement FAST str_FreeAsync {ntptr.l}
!_ASSERTPTR{ntptr}
If ntptr
  *str.str = Peek.l(ntptr)
  !_ASSERTPTR{*str}
  If *str
    FreeMem_ *str,*str\size+#STR_SIZEOFHEADER
    Poke.l ntptr,0
  End If
End If
End Statement

Statement FAST str_WritePtrAsync{ntptr.l,textptr.l,@clength.l}
!_ASSERTPTR{ntptr}
If ntptr
  str_FreeAsync {ntptr}
  If textptr
    If clength<0
      clength.l=0
      While Peek.b(textptr+clength):clength+1:Wend
    End If
    If clength>0
      *str.str = AllocMem_ (clength+#STR_SIZEOFHEADER,#MEMF_ANY)
      If *str
        Poke.l ntptr,*str
        *str\size=clength
        CopyMem_ textptr,&*str\str,clength
        Poke.b &*str\str + clength,0
      End If
    End If
  End If
End If
End Statement

Function.l FAST str_LenAsync{*str.str}
  !_ASSERTPTR{*str}
  If *str Then Function Return *str\size
Function Return 0
End Function

Function.l FAST str_GetPtrAsync{*str.str}
  !_ASSERTPTR{*str}
  If *str Then Function Return &*str\str
Function Return 0
End Function

LastRunErrsMode


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: str_WritePtr {ntptr.l,textptr.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - ntptr.l    : ???                                                          /
;/ - textptr.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST str_WritePtr{ntptr.l,textptr.l,@clength.l}
!_ASSERTPTR{ntptr}
If ntptr
  !str_Free{ntptr}
  If textptr
    If clength<0
      clength.l=0
      While Peek.b(textptr+clength):clength+1:Wend
    End If
    If clength>0
      CNIF #STR_USEPOOLED
        *str.str = AllocPooled_ (str_MemPoolHeader,clength+#STR_SIZEOFHEADER)
      CELSE
        *str.str = AllocMem_ (clength+#STR_SIZEOFHEADER,#MEMF_ANY)
      CEND
      If *str
        Poke.l ntptr,*str
        *str\size=clength
        CopyMem_ textptr,&*str\str,clength
        Poke.b &*str\str + clength,0
      End If
    End If
  End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: str_Write {ntptr.l,text.s}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - ntptr.l    : ???                                                          /
;/ - text.s    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement str_Write{ntptr.l,text.s}
!_ASSERTPTR{ntptr}
If ntptr
  !str_Free{ntptr}
  clength.l = FLen(text.s)
  If clength>0
    CNIF #STR_USEPOOLED
      *str.str = AllocPooled_ (str_MemPoolHeader,clength+#STR_SIZEOFHEADER)
    CELSE
      *str.str = AllocMem_ (clength+#STR_SIZEOFHEADER,#MEMF_ANY)
    CEND

    If *str
      Poke.l ntptr,*str
      *str\size=clength
      CopyMem_ &text.s,&*str\str,clength
      Poke.b &*str\str + clength,0
    End If
  End If
End If
End Statement

Statement str_Alloc{ntptr.l,size.l}
If ntptr
  !str_Free{ntptr}
  clength.l = size
  If clength>0
    CNIF #STR_USEPOOLED
      *str.str = AllocPooled_ (str_MemPoolHeader,clength+#STR_SIZEOFHEADER)
    CELSE
      *str.str = AllocMem_ (clength+#STR_SIZEOFHEADER,#MEMF_ANY)
    CEND

    If *str
      Poke.l ntptr,*str
      *str\size=clength
      Poke.b &*str\str,0
      Poke.b &*str\str + clength,0
    End If
  End If
End If
End Statement

Statement FAST str_Dup{ntptr.l,*text.str}
If ntptr
  !str_Free{ntptr}
  If *text
    If *text\size>0
      CNIF #STR_USEPOOLED
        *str.str = AllocPooled_ (str_MemPoolHeader,*text\size+#STR_SIZEOFHEADER)
      CELSE
        *str.str = AllocMem_ (*text\size+#STR_SIZEOFHEADER,#MEMF_ANY)
      CEND
      If *str
        Poke.l ntptr,*str
        *str\size=*text\size
        CopyMem_ &*text\str,&*str\str,*text\size +1
      End If
    End If
  End If
End If
End Statement


Function.l FAST str_Len{*str.str}
  !_ASSERTPTR{*str}
  If *str Then Function Return *str\size
  Function Return 0

End Function

Function.l FAST str_GetPtr{*str.str}
  !_ASSERTPTR{*str}
  If *str Then Function Return &*str\str
  Function Return 0

End Function


Function.l FAST str_Comp{*strA.str,*strB.str}
If *strA=Null
  If *strB=Null Then Function Return 0 : Else Function Return -1
Else
  If *strB=Null Then Function Return -1
End If

If *strA\size><*strB\size Then Function Return -1
n.l = 0
While Peek.b(&*strA\str+n) = Peek.b(&*strB\str+n) AND n<*strA\size
  n+1
Wend
If Peek.b(&*strA\str+n) = Peek.b(&*strB\str+n) Then Function Return 0
Function Return -1
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = str_Read {ntptr.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - ntptr.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s str_Read {ntptr.l}
!_ASSERTPTR{ntptr}
If ntptr
  *str.str=Peek.l(ntptr)
   !_ASSERTPTR{*str}
   If *str Then Function Return Peeks$(&*str\str,*str\size)
End If
Function Return ""
End Function

CNIF #STR_USEPOOLED
Statement str_FreeMemPool{}
If str_MemPoolHeader
  DeletePool_ str_MemPoolHeader
  str_MemPoolHeader=0
End If
End Statement
!autoexit{str_FreeMemPool}
CEND


