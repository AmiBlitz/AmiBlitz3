; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "///System"
; ExeFile         = "PED_Beta"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 3.2.1
; NumberOfBuilds  = 72
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 355
; CursorColumn    = 1
; LabelSearch     = "openlocale"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; Max BitMap      = 10
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: phrasebook.include                                                       /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 08/05/2008                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
CEND

XINCLUDE "dos.include.ab3"  ; we will use functions from the dos.include
XINCLUDE "useful.include.ab3"
XINCLUDE "file.include.ab3"
XINCLUDE "prefixtree.include.ab3"

NEWTYPE.phrasebook
*pft.prefixtree
*appName.str
*langName.str
*langNameE.str
End NEWTYPE

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = pb_Create {doCaseSense.l,doPreFix.l,doPostFix.l}        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - doCaseSense.l    : ???                                                    /
;/ - doPreFix.l    : ???                                                       /
;/ - doPostFix.l    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l pb_Create{appName.s,langName.s,langNameE.s}
*pb.phrasebook = AllocVec_(SizeOf.phrasebook,#MEMF_ANY)
If *pb
  *pb\pft         = pft_Create{}
  *pb\appName     = #NULL : str_Write{&*pb\appName,appName}
  *pb\langName    = #NULL : str_Write{&*pb\langName,langName}
  *pb\langNameE   = #NULL : str_Write{&*pb\langNameE,langNameE}
End If
Function Return *pb
End Function


Function.s _pb_Normalize{text.s}
  text = Replace$(text,"."," . ")
  text = Replace$(text,","," , ")
  text = Replace$(text,":"," : ")
  text = Replace$(text,"!"," ! ")
  text = Replace$(text,"-"," - ")
  text = Replace$(text,"+"," + ")
  text = Replace$(text,"?"," ? ")
  text = Replace$(text,"&"," & ")
  text = Replace$(text,"|"," | ")
  text = Replace$(text,"\n"," \n ")
  text = Replace$(text,Chr$(10)," \n ")
  search.s = "" : wc.l = 0
  Repeat
    tmp.s = lindex{text,wc}
    If tmp
      If search Then search = search + " " + tmp : Else search = tmp
    End If
    wc+1
  Until tmp=""
  search = Replace$(search," \n ",Chr$(10))
  Function Return search
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: pb_Free {*pb.phrasebook}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *pb.phrasebook    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement pb_Free{*pb.phrasebook}
If *pb
  pft_Free{*pb\pft}
  str_Free{&*pb\appName}
  str_Free{&*pb\langName}
  str_Free{&*pb\langNameE}
  FreeVec_ *pb
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: pb_AddWord {*pb.phrasebook,written.s,pron.s}                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *pb.phrasebook    : ???                                                     /
;/ - written.s    : ???                                                        /
;/ - pron.s    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement pb_AddPhrase {*pb.phrasebook,template.s,native.s}
template.s = _pb_Normalize{template}
pft_SetString{*pb\pft,template,native}
If pft_GetString{*pb\pft,LCase$(template)}=""
  pft_SetString{*pb\pft,LCase$(template),native}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.s = pb_Text2Phonem {*pb.phrasebook,text.s}                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *pb.phrasebook    : ???                                                     /
;/ - text.s    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s _pb_LookUp{*pb.phrasebook,text.s}
  If *pb=#NULL Then Function Return text

  While (Left$(text,1) =" ") : text=Right$(text,FLen(text)-1) : Wend
  While (Right$(text,1)=" ") : text=Left$ (text,FLen(text)-1) : Wend

  textL.s = LCase$(text)
  textL.s = Replace$(textL,"'","")
  textL.s = Replace$(textL,"\\22","")

  trans.s = pft_GetString{*pb\pft,text}
  If trans="" Then trans = pft_GetString{*pb\pft,textL}

  If trans=""
    first.s = lindex{text,0}                          ; split up first word
    tail.s  = Right$(text,FLen(text)-FLen(first)-1)   ; ... from tail

    i.l = 0
    Repeat
      tmp.s = lindex{text,i} : i+1
      If tmp><"" Then last.s=tmp
    Until tmp=""
    head.s = Left$(text,FLen(text)-FLen(last)-1)

    ;If tail
    ;  ftrans.s = _pb_LookUp{*pb,first} : If ftrans="" Then ftrans=first
    ;  ttrans.s = _pb_LookUp{*pb,tail}
    ;  trans = ftrans + " " + ttrans
    ;Else
    ;  trans = first
    ;End If

    If head
      ttrans.s = _pb_LookUp{*pb,head}
      ltrans.s = _pb_LookUp{*pb,last} : If ltrans="" Then ltrans=last
      trans = ttrans + " " + ltrans
    Else
      trans = last
    End If
  End If

  While (Left$(trans,1) =" ") : trans=Right$(trans,FLen(trans)-1) : Wend
  While (Right$(trans,1)=" ") : trans=Left$ (trans,FLen(trans)-1) : Wend

  Function Return trans
End Function



Function.s pb_Translate{*pb.phrasebook,text.s}
  If *pb=#NULL Then Function Return text
  text.s = _pb_Normalize{text}+Chr$(10)
  apos.l = 1
  bpos.l = Instr(text,Chr$(10))
  trans.s=""
  While bpos>0
    trans + _pb_LookUp{*pb,Mid$(text,apos,bpos-apos)}
    apos.l = bpos+1
    bpos.l = Instr(text,Chr$(10),apos)
    If bpos>0 Then trans+Chr$(10)
  Wend
  trans = Replace$(trans," \n ",Chr$(10))
  trans = Replace$(trans," \n",Chr$(10))
  trans = Replace$(trans,"\n",Chr$(10))
  trans = Replace$(trans," !","!")
  trans = Replace$(trans," .",".")
  trans = Replace$(trans," :",":")
  trans = Replace$(trans," ,",",")
  trans = Replace$(trans," ;",";")
  trans = Replace$(trans," ?","?")
  trans = Replace$(trans," | ","|")
  Function Return trans
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = pb_LoadASCII {*pb.phrasebook,filename.s}                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *pb.phrasebook    : ???                                                     /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l pb_LoadText{*pb.phrasebook,filename.s}
fid.l = file_Open{filename,#file_read}
succ.l = False
If fid<0 Then Function Return False
While file_EOF{fid}=False
  dictline.s = file_ReadLine{fid}
  If FLen(dictline)>2
    If Peek.l(&dictline)&$FFFFFF00=$EFBBBF00 ; skip utf8 header
      dictline = Right$(dictline,FLen(dictline)-3)
    End If
  End If
  template.s = lindex{dictline,0}
  native.s   = lindex{dictline,1}
  If FLen(template)>0 AND FLen(native)>0
    pb_AddPhrase{*pb,template,native}
    succ=True
  End If
Wend
file_Close{fid}
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = pb_SaveBin {*pb.phrasebook,filename.s}                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *pb.phrasebook    : ???                                                     /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l pb_SaveBin{*pb.phrasebook,filename.s}
*pft.prefixtree = pft_Optimize{*pb\pft}
If *pft
  pft_Free{*pb\pft}
  *pb\pft = *pft
End If

succ.l = pft_Save{*pft,filename}
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = pb_LoadBin {filename.s}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l pb_LoadBin{filename.s}
fid.l = file_Open{filename,#file_read}
If fid<0 Then Function Return False
*pb.phrasebook = pb_Create{filename,"",""}
If *pb=#NULL Then Function Return False
*pb\pft = pft_Load{filename}
If *pb\pft = #NULL Then pb_Free{*pb} : *pb = #NULL
Function Return *pb
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = pb_SaveASCII {*pb.phrasebook,filename.s,@boundwritten.l}  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *pb.phrasebook    : ???                                                     /
;/ - filename.s    : ???                                                       /
;/ - boundwritten.l    : ???                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l pb_SaveText{*pb.phrasebook,filename.s}
fid.l = file_Open{filename,#file_forcewrite}
If fid<0 Then Function Return False
file_WriteLine{fid,"# PhraseBook created by phrasebook.include / Thilo Koehler"}
;file_WriteLine{fid,"# "+Str$(*pb\pft\pftN)+" entries"}
file_WriteLine{fid,"# Application Name: "+str_Read{&*pb\appName}}
file_WriteLine{fid,"# Target Language Name: "+str_Read{&*pb\langNameE}}
file_WriteLine{fid,"# Native Language Name: "+str_Read{&*pb\langName}}
file_WriteLine{fid,"# Phrasebook Items: "}
*iter.pftiterator = pft_Iterate{*pb\pft, ""}
While pft_HasNext{*iter}
   template.s  = pft_GetIteratorKey{*iter}
   native.s    = pft_GetIteratorString{*iter}
   file_WriteLine{fid, "{ "+template+" }"+Chr$($9)+"{ "+native+" }"}
Wend
pft_FreeIterator{*iter}
succ.l = True
file_Close{fid}
Function Return succ
End Function


Function.l pb_GetFromLocale{appName.s}
If dos_CheckLib{"locale.library",0} = False
  error{"Missing 'locale.library'."}
  Function Return 0
End If

*locale.Locale = OpenLocale_(#NULL)
If *locale
  lang.s = Replace$(Peek.s(*locale\loc_LanguageName),".language","")
  lang.s = Peek.s(*locale\loc_PrefLanguages[0])
  CloseLocale_ *locale
  buffPtr.l = AllocVec_(4096,#MEMF_ANY)
  *fibTex.FileInfoBlock = AllocDosObject_ (#DOS_FIB,#TAG_DONE)
  *fibBin.FileInfoBlock = AllocDosObject_ (#DOS_FIB,#TAG_DONE)
  If buffPtr><#NULL AND *fibTex><#NULL AND *fibBin><#NULL
    realfile.s = ""
    If realfile=""
      pbfile.s = appName+"."+lang
      lock.l = Lock_ (&pbfile,#ACCESS_READ)
      If lock Then NameFromLock_ lock,buffPtr,4096 : Examine_ lock,*fibTex : UnLock_ lock : realfile=Peek.s(buffPtr)
    End If

    If realfile=""
      pbfile.s = "Locale/PhraseBooks/"+appName+"."+lang
      lock.l = Lock_ (&pbfile,#ACCESS_READ)
      If lock Then NameFromLock_ lock,buffPtr,4096 : Examine_ lock,*fibTex : UnLock_ lock : realfile=Peek.s(buffPtr)
    End If

    If realfile=""
      pbfile.s = "Locale:PhraseBooks/"+appName+"."+lang
      lock.l = Lock_ (&pbfile,#ACCESS_READ)
      If lock Then NameFromLock_ lock,buffPtr,4096 : Examine_ lock,*fibTex : UnLock_ lock : realfile=Peek.s(buffPtr)
    End If

    If realfile
      *pb.phrasebook = #NULL
      binfile.s = realfile+".bin"
      lock.l = Lock_ (&binfile,#ACCESS_READ)
      If lock
        Examine_ lock,*fibBin
        UnLock_ lock
        If CompareDates_(*fibTex\fib_Date,*fibBin\fib_Date)>0 ; Bin is later than Text
          *pb = pb_LoadBin{binfile}
        End If
      End If
      If *pb = #NULL
        *pb = pb_Create{appName,lang,lang}
        If *pb
          pb_LoadText{*pb,realfile}
          pb_SaveBin{*pb,binfile}
        End If
      End If
    End If
  End If
  If *fibTex Then FreeDosObject_ #DOS_FIB,*fibTex : *fibTex = #NULL
  If *fibBin Then FreeDosObject_ #DOS_FIB,*fibBin : *fibBin = #NULL
  If buffPtr Then FreeVec_ buffPtr : buffPtr = #NULL
End If
Function Return *pb
End Function


CNIF #__include=0
Stop
*pb.phrasebook = pb_GetFromLocale{"AmiBlitz3"}

Dim List hist.s(0)

If *pb
  fidR.l = file_Open{"ram:Amiblitz3.text.txt",#file_read}
  fidW.l = file_Open{"ram:test.out.txt",#file_forcewrite}
  If fidR>=0 AND fidW>=0
    While file_EOF{fidR}=False
      a.s = file_ReadLine{fidR}
      b.s = pb_Translate{*pb,a.s}
      b.s = Replace$(b.s,"\\n","\n")
      a.s = _pb_Normalize{a.s}
      found.l = False
      ResetList hist()
      While NextItem(hist())
        If hist() = a.s Then found=True
      Wend
      If found=False
      If AddItem (hist())
        hist() = a.s
      End If
      file_WriteLine{fidW,"\\22"+a.s +"\\22 \\22"+ b.s+"\\22"}
      End If
    Wend
  End If
  If fidW>=0 Then file_Close{fidW}
  If fidR>=0 Then file_Close{fidR}
  pb_Free{*pb}
Else
  NPrint "Unable to load phrasebook!"
End If

End

CEND
