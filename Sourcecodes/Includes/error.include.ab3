; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "ErrorDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 9
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = "PATH=music:boehm_remote/sounds"
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = "deftype"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Screen      = 5
; Max Stencil     = 5
; Max Window      = 5
; Max Bank        = 5
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max BitMap      = 10
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name:  error.include                                                        /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 18.08.2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements: Amiblitz2.4                                                   /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Provide simple and encapsuled error output, also suitable for dialog requ:: /
;/ esters.                                                                     /
;/                                                                             /
;/ Abstract:                                                                   /
;/ This inlcude provide some simple commands to display error messages.        /
;/ Why use the error.include ?                                                 /
;/ Imagine you write a big program. You need a lot of error messages. If you:: /
;/  program them directly using a non-encapsuled command, you can not change:: /
;/  all messages in case you decide to use another type of requester or way :: /
;/ to display the messages.                                                    /
;/ If you use always e.g. error {"Something went wrong!"}, you have the outp:: /
;/ ut style under control and can change it application wide and quickly fro:: /
;/ m requester to CLI output or antoher type of requester or even mute it,     /
;/ dependent what the errror function is doing.                                /
;/                                                                             /
;/ The error include uses simple OS requesters by default, but can be config:: /
;/ ured differently by setting error flags.                                    /
;/                                                                             /
;/ This include is used by nearly all other includes, so the functions will :: /
;/ be available to you. I recommend that you use the functions for your debu:: /
;/ gging/error output to be consistant.                                        /
;/ You may change the error inlcude, if you are not satisfied with the style:: /
;/  of the requester or even may write your own "error.include".               /
;/                                                                             /
;/ User Constants:                                                             /
;/                                                                             /
;/ Example:                                                                    /
;/ . XInclude "error.inlcude"                                                  /
;/ . error {"Wooohooo !"}                                                      /
;/ . End                                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
  SYNTAX 2
  OPTIMIZE 5
CEND

CNIF @#error_include=0
#error_include=1

NEWTYPE.errorengine
  err_code.l
  quest_code.l
  flags.l
  req.EasyStruct
End NEWTYPE

If ver.s=""
  error_title.s     = "ERROR:"
  message_title.s   = "Message:"
  question_title.s  = "Question:"
Else
  error_title.s     = ver.s
  message_title.s   = ver.s
  question_title.s  = ver.s
End If

DEFTYPE.errorengine errorengine
WbToScreen 0

#error_requester = 1  ; Pop up requester
#error_logfile   = 2  ; Write into logfile
#error_autoask   = 4  ; auto "ok" ask
#error_stdout    = 16

USEPATH errorengine
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: error_SetFlags {flags.l}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ Set the error flags, means the way that your error is outputted:            /
;/                                                                             /
;/ #error_requester = 1  ; pop up requester                                    /
;/ #error_logfile   = 2  ; write into logfile, can be also "CON:" for consol:: /
;/ e output                                                                    /
;/ #error_auto  = 4  ; auto "ok" ask                                           /
;/                                                                             /
;/ You may combine the flags with OR.                                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - flags.l    : error flags                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement error_SetFlags {flags.l}
  SHARED errorengine
  \flags = flags
End Statement

errorengine\flags = #error_requester

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: error {text.s,@errorcode.l,@onlyonce.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ Display a simple requester that shows your text.                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - text.s    : error text to display                                         /
;/ - errorcode.l    : optionally an error code, that can be asked later in t:: /
;/ he program                                                                  /
;/ - onlyonce.l    : in combination with the error code parameter the same e:: /
;/ rror with the same errorcode will be displayed only once, avoiding that t:: /
;/ he user has to click 1000x "error wile reading file!" or something similar. /
;/                                                                             /
;/ See also:    error_Clear                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement error {text.s,@errorcode.l,@onlyonce.l,@titletext.s}
  SHARED error_title.s,errorengine
  text.s = Replace$(text.s,Chr$(0),"\\n")
  If titletext<>"" Then error_title = titletext

  If (\flags&#error_requester)
    If onlyonce=False OR \err_code><errorcode OR errorcode=-1
      If Used Window<0 Then *win.Window=0:Else *win.Window=Peek.l(Addr Window(Used Window))

      \req\es_StructSize   = SizeOf.EasyStruct
      \req\es_Flags        = 0;-1
      \req\es_Title        = &error_title.s
      \req\es_TextFormat   = &text.s
      gadget.s             = "OK"
      \req\es_GadgetFormat = &gadget.s
      flags.l              = #IDCMP_RAWKEY
      ;If *win Then SetWindowPointerA_ *win,Tags(#WA_BusyPointer,-1)
      EasyRequestArgs_ *win,\req,&flags,0
      ;If *win Then SetWindowPointerA_ *win,Tags(#TAG_DONE,0)
    End If
  End If

  If (\flags&#error_stdout)
    If onlyonce=False OR \err_code><errorcode OR errorcode=-1
      DefaultOutput
      NPrint text.s
      If (Used Window>=0) Then WindowOutput Used Window
    End If
  End If

  \err_code = errorcode

End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ask {text.s,buttons.s}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Ask the user for a decision.                                                /
;/ The label text of each button has to be seperated by "|".                   /
;/ The buttons are counted from left to right, starting with 0.                /
;/ Usually, you place your "cancel" option as the most left button.            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - text.s    : Info text for the user                                        /
;/ - buttons.s    : Button text seperated by "|" if you want several buttons   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : number of button that was hit                              /
;/                                                                             /
;/ Example:                                                                    /
;/ If ask{"Are you really sure ?","Yes|Ooops!"}                                /
;/   NPrint "Formatting volume "Sys:" ..."                                     /
;/ End If                                                                      /
;/                                                                             /
;/ or                                                                          /
;/                                                                             /
;/ choice.l = ask{"Save picture as ...","IFF-ILBM|PNG|JPEG"}                   /
;/ Select choice                                                               /
;/   case 0                                                                    /
;/     ; save as JPEG                                                          /
;/   case 1                                                                    /
;/     ; save as PNG                                                           /
;/   case 2                                                                    /
;/     ; save as IFF-ILBM                                                      /
;/ End Select                                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ask {text.s,buttons.s,@titletext.s}
  SHARED question_title.s,errorengine
  n.l = 0
  If titletext<>"" Then question_title = titletext
  If ((\flags&#error_autoask)=False)
    If Used Window<0 Then *win.Window=0:Else *win.Window=Peek.l(Addr Window(Used Window))

    \req\es_StructSize   = SizeOf.EasyStruct
    \req\es_Flags        = 0
    \req\es_Title        = &question_title
    \req\es_TextFormat   = &text
    If buttons ="" Then buttons = "OK"
    \req\es_GadgetFormat = &buttons
    ;flags.l = #IDCMP_RAWKEY
    ;If *win Then SetWindowPointerA_ *win,Tags(#WA_BusyPointer,-1)
    n.l=EasyRequestArgs_ (*win,\req,0,0)
    ;If *win Then SetWindowPointerA_ *win,Tags(#TAG_DONE,0)
  End If

  Function Return n
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: message {text.s}                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ The same like error, but displays another requester title indication that:: /
;/  this is a message, not an error.                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - text.s    : text of the message                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement message {text.s,@titletext.s}
  SHARED message_title.s,errorengine

  If titletext<>"" Then message_title = titletext
  If \flags&#error_requester
    If Used Window<0 Then *win.Window=0:Else *win.Window=Peek.l(Addr Window(Used Window))
    \req\es_StructSize   = SizeOf.EasyStruct
    \req\es_Flags        = 0;-1
    \req\es_Title        = &message_title.s
    \req\es_TextFormat   = &text.s
    gadget.s             = "OK"
    \req\es_GadgetFormat = &gadget.s
    flags.l = #IDCMP_RAWKEY
    ;If *win Then SetWindowPointerA_ *win,Tags(#WA_BusyPointer,-1)
    EasyRequestArgs_ *win,\req,&flags,0
    ;If *win Then SetWindowPointerA_ *win,Tags(#TAG_DONE,0)
  End If

  If \flags&#error_stdout
    NPrint text.s
  End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: serror {text.s}                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ "Serious error". Same like error, but your program will be terminated wit:: /
;/ hin this function.                                                          /
;/ Use this if an error occures where you can not continue running your prog:: /
;/ ram.                                                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - text.s    : error text                                                    /
;/                                                                             /
;/ See also:    error                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement serror {text.s}
error {text.s}
End
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: error_Clear {}                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ Clear the last error code, so no error will be reported and the next mess:: /
;/ age will be displayed in any case.                                          /
;/                                                                             /
;/ Example:                                                                    /
;/ error {"This is an error message with code 666 !",666}                      /
;/ error {"This is an error as well, but it will be not displayed because it:: /
;/  has the same error code than the previous error, and the onlyonce parame:: /
;/ ter set to -1 (default)!",666}                                              /
;/ Nprint "The last error code was: ",error_GetCode{}                          /
;/ error_Clear{}                                                               /
;/ error {"This error will be displayed, because we called error_clear!",666}  /
;/ error {"This error will be displayed, because we set onlyonce to false!",:: /
;/ 666,false}                                                                  /
;/ error {"This error will be displayed, because we have another type of err:: /
;/ or !",667}                                                                  /
;/                                                                             /
;/ See also:    error, error_GetCode                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement error_Clear {}
  SHARED errorengine
  \err_code = False
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = error_GetCode {}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ Return the error code from the last call of error.                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : error code, defined by the programmer when calling the e:: /
;/ rror function                                                               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l error_GetCode {}
  SHARED errorengine
  errorcode.l = \err_code
  error_Clear {}
  Function Return errorcode
End Function

CEND

CNIF #__include=0
error_SetFlags {#error_requester}
error {"Ups! something went wrong (not really of course!)"}
message {"Just wanted to give you a message !"}
If ask {"How do you like this include ?","Yeah cool!|Ehm, honestly? It's crap!"}
  message {"Great!"}
Else
  message {"Hm, then make suggestions!"}
End If
End
CEND


