; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "FileMODDemo"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: file_mod.include                                                      /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////

CNIF #__include=0
SYNTAX 2
OPTIMIZE 7
CEND


XINCLUDE "error.include.ab3"
XINCLUDE "dos.include.ab3"
XINCLUDE "file.include.ab3"

#ECOM_APPREGIO         = $0 ; Semi1: $0-$F/Semi2: $0-$F
#ECOM_PORTAMENTO_UP    = $1 ; Speed: $00-$FF
#ECOM_PORTAMENTO_DOWN  = $2 ; Speed: $00-$FF
#ECOM_TONE_PORTAMENTO  = $3 ; Speed: $00-$FF
#ECOM_VIBRATO          = $4 ; Rate: $0-F/Depth: $0-$F/Keep: $00
#ECOM_TONEP_VOLSLIDE   = $5
#ECOM_VIBRA_VOLSLIDE   = $6
#ECOM_TREMOLO          = $7
#ECOM_UNUSED           = $8
#ECOM_SAMPLEOFFSET     = $9
#ECOM_VOLUMESLIDE      = $A
#ECOM_POSITIONJUMP     = $B ; Jump to $00-$7F in song pos
#ECOM_SETVOLUME        = $C ; Gain: $00-$40
#ECOM_PATTERN_BREAK    = $D ; Jump to next song pos and play from 00-63 (decimal)
#ECOM_MISC             = $E
#ECOM_SETSPEED         = $F ; Speed: $00-$FF

#ECOM_MISC_FILTER          = $0 ; Filter: $0-$1
#ECOM_MISC_FINESLIDE_UP    = $1
#ECOM_MISC_FINESLIDE_DOWN  = $2
#ECOM_MISC_GLISSANDO_CTRL  = $3
#ECOM_MISC_VIBRATO_CTRL    = $4
#ECOM_MISC_SETFINETUNE     = $5
#ECOM_MISC_PATTERNLOOP     = $6 ; $0-$F $0=Set loop start / >$0: jump n times
#ECOM_MISC_TREMOLO_CTRL    = $7
#ECOM_MISC_UNUSED          = $8
#ECOM_MISC_RESTRIG_NOTE    = $9
#ECOM_MISC_FINEVOL_UP      = $A
#ECOM_MISC_FINEVOL_DOWN    = $B
#ECOM_MISC_NOTECUT         = $C
#ECOM_MISC_NOTEDELAY       = $D
#ECOM_MISC_PATTERNDELAY    = $E
#ECOM_MISC_INVERTLOOP      = $F

#patternsize = 64

NEWTYPE.mod_sample
samplename.b[22]
wlength.w       ; in words
finetune.b      ; 0-16
gain.b          ; 0-64                    1
looppoint.w     ; in words
looplength.w    ; in words
End NEWTYPE

NEWTYPE.mod_step
ch.l[4]         ; sssspppp pppppppp sssseeee eeeeeeee
                ; s = sample number
                ; p = period
                ; e = effect
End NEWTYPE

NEWTYPE.mod_pattern
dat.mod_step[#patternsize]
End NEWTYPE

NEWTYPE.modheader
songname.b[20]
sample.mod_sample[31]
songlength.b              ; 1-128
dummy.b                   ; = 127
songpattern.b [128]       ; 0-63
id.l                      ; Should be eq "M.K."
;pattern.mod_pattern[0]    ; Patterns (max 64) start at 1084
End NEWTYPE

NEWTYPE.channelinfo
gain.l
vibrato.l
konto.l
lsamp.l
sampleID.l
End NEWTYPE

NEWTYPE.modsynth
seekfpos.l
seekpattern.l
seeksongpos.l
seekdivision.l
channelinfo.channelinfo[4];
innerlooppos.l
innerloopcount.l
speed.l
samplerate.l
bits.l
channels.l
sample_ptr.l[31]
sample_length.l[31]
End NEWTYPE
 
NEWTYPE.moddat
modheader.modheader
dos.l
pattern_length.l
pattern_ptr.l
sample_length.l
sample_data.l
pattern.l
lastsample.b[4]
*pdat.mod_pattern
notestep.l
synth.modsynth
End NEWTYPE

NEWTYPE.modengine
modheader.modheader
periods.w[12*5]
End NEWTYPE

DEFTYPE.modengine modengine


;mod_periods:

;Data.w 1712,1616,1525,1440,1357,1281,1209,1141,1077,1017, 961, 907
;Data.w  856, 808, 762, 720, 678, 640, 604, 570, 538, 508, 480, 453 ; C1...B1
;Data.w  428, 404, 381, 360, 339, 320, 302, 285, 269, 254, 240, 226 ; C2...B2
;Data.w  214, 202, 190, 180, 170, 160, 151, 143, 135, 127, 120, 113 ; C3...B3
;Data.w  107, 101,  95,  90,  85,  80,  76,  71,  67,  64,  60,  57

;For n.l = 0 To 12*5-1
  ;Read moddat\periods[n]
;Next

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: mod_Init {}                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement mod_Init{}
SHARED modengine
semistep.d = 1.05946309;43592952645618252949463
For n.l=0 To 12*5-1
  d.d = 1712.0 / (semistep^n)
  modengine\periods[n] = Int(d+0.5)
Next
End Statement

mod_Init{}

USEPATH *moddat
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = mod_Note2SampleID {note_ptr.l}                          /
;/                                                                             /
;/ Description:                                                                /
;/ Get the sample number from a tracker note (long word).                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - note_ptr.l    : pointer to a tracker note                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : sample ID                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w mod_Note2SampleID {note_ptr.l}
hi_b.w = Peek.b(note_ptr) & %11110000
lo_b.w = (Peek.b (note_ptr+2) & %11110000) LSR 4
sample.w = (hi_b + lo_b)
Function Return sample
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = mod_Note2Period {note_ptr.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ Get the period (=frequency) from a tracker note (long word).                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - note_ptr.l    : pointer to a tracker note                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : period                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w mod_Note2Period {note_ptr.l}
period.w = Peek.w(note_ptr) & %0000111111111111
Function Return period
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = mod_Note2MidiNote {note_ptr.l}                          /
;/                                                                             /
;/ Description:                                                                /
;/ Get the midi note from a tracker note.                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - note_ptr.l    : pointer to a tracker note                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : MIDI note number                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w mod_Note2MidiNote {note_ptr.l}
SHARED modengine
period.w = Peek.w(note_ptr) & %0000111111111111
;f.f = 127 - Log(period / 15) / Log (1.0594631) - 12 -12 + 4
;note.l = Int(f)
If period
n.l =0
note.l = -1
min_dist.l = 10000
For n.l = 0 To 12*5-1
  dist.l = Abs(period-modengine\periods[n])
  If dist<min_dist Then min_dist=dist:note = n
Next

  note + 24 +4
Else
  note=0
End If

Function Return note
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = mod_Note2FXID {note_ptr.l}                              /
;/                                                                             /
;/ Description:                                                                /
;/ Get the tracker "effect" froma trakcer note.                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - note_ptr.l    : pointer to a tracker note                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : effect id                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w mod_Note2FXID {note_ptr.l}
fx.b = Peek.b(note_ptr+2) & %00001111
Function Return fx
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = mod_Note2FXValue {note_ptr.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/ Get the FX value from a tracker note.                                       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - note_ptr.l    : pointer to a tracker note                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w mod_Note2FXValue {note_ptr.l}
fx.b = Peek.b(note_ptr+3)
Function Return fx
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: mod_Close {*moddat.moddat}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ Close a mod file.                                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *moddat.moddat    : ???                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement mod_Close {*moddat.moddat}
If *moddat
  If \dos>=0
    file_Close {\dos}
    \dos=-1
  End If
  If \pattern_ptr
    FreeMem_ \pattern_ptr,\pattern_length
    \pattern_ptr    = False
    \pattern_length = False
  End If
  If \sample_data
    FreeMem_ \sample_data,\sample_length
    \sample_data    = False
    \sample_length = False
  End If
  FreeMem_ *moddat,SizeOf.moddat
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = mod_Open {filename.s}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ Open a mod file.                                                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l mod_Open {filename.s}
succ.l = False
*moddat.moddat = AllocMem_(SizeOf.moddat,#MEMF_ANY|#MEMF_CLEAR)
If *moddat
  dos.l = file_Open {filename.s,#file_read}
  If dos>=0
    \dos = dos
    *modheader.modheader = \modheader
    If file_ReadMem {dos,*modheader,SizeOf.modheader}
      If *modheader\id = @"M.K."
        \pattern_length = file_GetLength{dos}-SizeOf.modheader
        maxpatt.l = 0
        For n.l= 0 To 127
          If *modheader\songpattern[n]>maxpatt Then maxpatt = *modheader\songpattern[n]
        Next
        If maxpatt>63 Then maxpatt=63
        maxlength.l = maxpatt * #patternsize*4*4

        \sample_data = 0
        \sample_length =  \pattern_length-maxlength
        slength.l = 0
        For n.l=0 To 30
          slength.l + \modheader\sample[n]\wlength*2
          \synth\sample_ptr[n] = 0
        Next

        Format ""
        If slength><\sample_length Then error {"MOD: File length is not correct: "+Str$(slength)+"><"+Str$(\sample_length)}

        If \pattern_length>maxlength Then \pattern_length=maxlength
        \pattern_ptr = AllocMem_(\pattern_length,#MEMF_ANY)
        If \pattern_ptr
          If file_ReadMem {dos,\pattern_ptr,\pattern_length}
            succ = True
            \pattern = -1
           ; error {"MOD Open !"}
          End If
        Else
          error {"Not enough memory to load MOD file !"}
        End If
      Else
        error {"Unsupported MOD format: "+Mkl$(*modheader\id)+" !"}
      End If
    Else
      error {"Unable to read MOD file header !"}
    End If
  End If
  If succ = False Then mod_Close {*moddat} : *moddat=0
End If
Function Return *moddat
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = mod_Examine {filename.s}                                /
;/                                                                             /
;/ Description:                                                                /
;/ Check if a file is a mod file.                                              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l mod_Examine {filename.s}
SHARED modengine
succ.l = False
dos.l = file_Open {filename.s,#file_read}
If dos>=0
  If file_ReadMem {dos,&modengine\modheader\songname[0],SizeOf.modheader}
    If modengine\modheader\id = @"M.K."
      succ.l = True
    End If
  End If
  file_Close{dos}
End If
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = mod_GetSongName {*moddat.moddat}                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *moddat.moddat    : ???                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s mod_GetSongName {*moddat.moddat}
a.s = ""
While n.l<20
  If \modheader\songname[n]>0 Then a.s + Chr$(\modheader\songname[n])
  n+1
Wend
If a.s = "" Then a.s = "unknown"
Function Return a.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = mod_GetSampleName {*moddat.moddat,sampleID.l}           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - s.l    : ???                                                              /
;/ - *moddat.moddat    : ???                                                   /
;/ - sampleID.l    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s mod_GetSampleName {*moddat.moddat,sampleID.l}
a.s = ""
s.l = sampleID
If s>=0 AND s<=30
  n.l = 0
  While n.l<20
    If \modheader\sample[s]\samplename[n]>31 OR \modheader\sample[s]\samplename[n]<0
      a.s + Chr$(\modheader\sample[s]\samplename[n])
    End If
    n+1
  Wend
End If
If a.s = "" Then a.s = "unknown"
Function Return a.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = mod_FindPattern {*moddat.moddat,@patternID.l}           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *moddat.moddat    : ???                                                   /
;/ - patternID.l    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l mod_FindPattern {*moddat.moddat,@patternID.l}
If patternID=-1
  \pattern+1
Else
  \pattern=patternID
End If
succ.l = False
If \pattern*#patternsize*4*4<\pattern_length
  succ.l = True
  \pdat = \pattern*#patternsize*4*4 + \pattern_ptr
  \notestep=-1
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = mod_FindStep {*moddat.moddat}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *moddat.moddat    : ???                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l mod_FindStep {*moddat.moddat}
\notestep+1
If \notestep<#patternsize Then succ.l=True:Else succ=False
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = mod_GetNextSampleID {*moddat.moddat,channel.l}          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - channel.l    : ???                                                        /
;/ - *moddat.moddat    : ???                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l mod_GetNextSampleID {*moddat.moddat,channel.l}
sample.l = mod_Note2SampleID{&\pdat\dat[\notestep]\ch[channel]}
If sample=0 Then sample=\lastsample[channel]
\lastsample[channel] = sample
Function Return sample
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = mod_GetNextMidiNote {*moddat.moddat,channel.l}          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - channel.l    : ???                                                        /
;/ - *moddat.moddat    : ???                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l mod_GetNextMidiNote {*moddat.moddat,channel.l}  ; note = 0 : no note!
note.l = mod_Note2MidiNote{&\pdat\dat[\notestep]\ch[channel]}
Function Return note
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = mod_GetNextFXID {*moddat.moddat,channel.l}              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - channel.l    : ???                                                        /
;/ - *moddat.moddat    : ???                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l mod_GetNextFXID {*moddat.moddat,channel.l}
fxid.l = mod_Note2FXID{&\pdat\dat[\notestep]\ch[channel]}
Function Return fxid
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = mod_GetNextFXValue {*moddat.moddat,channel.l}           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *moddat.moddat    : ???                                                   /
;/ - channel.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l mod_GetNextFXValue {*moddat.moddat,channel.l}
fxvalue.l = mod_Note2FXValue{&\pdat\dat[\notestep]\ch[channel]}
Function Return fxvalue
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = mod_SeekAudio {*moddat.moddat,foffset.l}                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *moddat.moddat    : ???                                                   /
;/ - foffset.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l mod_SeekAudio {*moddat.moddat,foffset.l}
If foffset><\synth\seekfpos
  ; here comes something difficult
  \synth\seekfpos = foffset
End If
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = mod_ConfigureAudio {*moddat.moddat,samplerate.l,chann:: /
;/ els.l,bits.l}                                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *moddat.moddat    : ???                                                   /
;/ - samplerate.l    : ???                                                     /
;/ - channels.l    : ???                                                       /
;/ - bits.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l mod_ConfigureAudio {*moddat.moddat,samplerate.l,channels.l,bits.l}
succ.l = True
If bits><8 AND bits><16 Then bits = 16 : succ=False
If samplerate < 4096 OR samplerate>96000 Then samplerate = 44100 : succ=False
If channels><1 AND channels><2 Then channels = 2 : succ=False
\synth\samplerate = samplerate
\synth\channels    = channels
\synth\bits        = bits
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = mod_RenderAudio {*moddat.moddat,destbuffer.l,blength.l} /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *moddat.moddat    : ???                                                   /
;/ - destbuffer.l    : ???                                                     /
;/ - blength.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l mod_RenderAudio{*moddat.moddat,destbuffer.l,blength.l}
SHARED modseed.l
If *moddat =0 Then Function Return 0
flength.l = blength / 4

If \sample_data = 0
  \sample_data = AllocMem_(\sample_length,#MEMF_ANY)
  If \sample_data
    file_ReadMem {\dos,\sample_data,\sample_length}
    offset.l = 0
    For n.l=0 To 30
      \synth\sample_ptr[n] = \sample_data + offset
      \synth\sample_length[n] = \modheader\sample[n]\wlength*2
      offset + \modheader\sample[n]\wlength * 2
    Next
  End If
End If

If \sample_data = 0 Then Function Return 0

For n.l=0 To flength-1
  Poke.l destbuffer,modseed & $1FFF1FFF  : destbuffer+4
  modseed=(modseed+1)*7
Next

Function Return -1
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = mod_GetByteLength {*moddat.moddat}                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *moddat.moddat    : ???                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l mod_GetByteLength{*moddat.moddat}
; well, thats hard, we have to go through the whole mod
Function Return 44100*20 *4
End Function

CNIF #__include=0
ASL_path.s = "Work:MOD"
*moddat.moddat = mod_Open {""}
If *moddat
  NPrint mod_GetSongName {*moddat}
  NPrint "Length ",*moddat\pattern_length
  If mod_FindPattern{*moddat}
    NPrint "pattern found ..."
    If mod_FindStep{*moddat}
      NPrint "step found..."
      For channel.l = 0 To 3
        NPrint channel,": Note: ",mod_GetNextMidiNote {*moddat,channel}
        NPrint " Sample: ",mod_GetSampleName{*moddat,mod_GetNextSampleID {*moddat,channel}}
      Next
    End If
  End If
  mod_Close {*moddat}
End If
End
CEND

