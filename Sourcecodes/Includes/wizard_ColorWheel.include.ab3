; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "cw"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 38
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 65535
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 160
; CursorColumn    = 117
; LabelSearch     = "could not"
; LabelRemark     = 0
; LabelAll        = 1
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 15
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 30
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
; wizard_ColorWheel.include
;
; This include gives you a function called WZ_Popup_ColorWheel()
;
; fixed size of for next loop  tomsmart1  2013 02
; made it SYNTAX 6 compatible  tomsmart1
; replace reqtools commands with error.include function calls  tomsmart1  2013 03

;OPTIMIZE 5       ; added for testing only and deactived it because else it override the mainsource OPTIMIZE stettings  tomsmart1
;SYNTAX 6         ; changed to 6 and deactived it because else it override the mainsource SYNTAX stettings  tomsmart1
;

XINCLUDE "screen.include.ab3"
XINCLUDE "error.include.ab3"   ; added to replace Request command  tomsmart1

NEWTYPE.rgbvalues
  R.l
  G.l
  B.l
End NEWTYPE

DEFTYPE.Library *lib_colorwheel,*lib_gradientslider
SHARED cw_x.w,cw_y.w,cw_w.w,cw_h.w
SHARED *cw_dri.DrawInfo
SHARED *cw_scr.Screen
SHARED *cw_win.Window
SHARED *cw_gadget.Gadget
SHARED *gs_gadget.Gadget

#MAXGRADPENS = 2
Dim pens.w(#MAXGRADPENS)
For i_pens.w = 0 To (#MAXGRADPENS-1)     ; added ( -1) because the array begins with index 0 to 1 = 2 entrys  tomsmart1
  pens(i_pens)=-1
Next i_pens



Statement ConvertRGBtoHSB{ptr_rgb.l,ptr_hsb.l}
;takes 24 bit rgb color, returns (global) hue(0 to 360), saturation(0 to 1.0) and luminance(0 to 1.0)
  DEFTYPE.ColorWheelRGB *my_rgb
  DEFTYPE.ColorWheelHSB *my_hsb
  *my_rgb = ptr_rgb
  *my_hsb = ptr_hsb

  r.f = *my_rgb\cw_Red
  g.f = *my_rgb\cw_Green
  b.f = *my_rgb\cw_Blue
  my_min.f = Min(r,g)
  my_max.f = Max(r,g)
  my_min.f = Min(my_min,b)
  my_max.f = Max(my_max,b)
  delta.f  = (my_max - my_min)
  If my_max<>0
    sat.f = delta / my_max
    lumin.f = my_max / 255.0
    If delta<>0
      If r=my_max
        hue.f=(g-b)/delta                             ; set type to .f to make it syntax 6 compatible  tomsmart1
        Goto okii
      EndIf
      If g=my_max
        hue=2+((b-r)/delta)
        Goto okii
      EndIf
      hue=4+((r-g)/delta)
      .okii
    EndIf
  EndIf
  hue=hue*60.0
  If hue<0 Then hue=hue+360.0

  *my_hsb\cw_Hue        = Int((hue /360) * 255.0)
  *my_hsb\cw_Saturation = Int(sat * 255.0)
  *my_hsb\cw_Brightness = Int(lumin * 255.0)
End Statement



Function.l ConvertHSBtoRGB{ptr_hsb.l} ; takes hue(0 to 360), saturation (0 to 1.0) and luminance (0 to 1.0) and return RGB
  DEFTYPE.ColorWheelHSB *hsb
  DEFTYPE.f h,s,l
  DEFTYPE.f i,f,p,q,t   ; achtung: wichtige zwischenvariablen, 1-Buchstabenkennung war dumm
  DEFTYPE.f r,g,b
  DEFTYPE.l _Red,_Green,_Blue

  *hsb = ptr_hsb
  Hue.l        = *hsb\cw_Hue ;LSR 24
  Saturation.l = *hsb\cw_Saturation ;LSR 24
  Brightness.l = *hsb\cw_Brightness ;LSR 24

  h = (Hue / 256.0) * 360.0
  s = Saturation / 256.0
  l = Brightness / 256.0
  If s=0
    _Red   = l * 255.0
    _Green = l * 255.0
    _Blue  = l * 255.0
  Else
    h = h / 60.0
    i = Int(h)
    f = h - i
    p = l*(1.0-s)
    q = l*(1.0-s*f)
    t = l*(1.0-s*(1.0-f))
    Select i
      Case 0 : r = l : g = t : b = p
      Case 1 : r = q : g = l : b = p
      Case 2 : r = p : g = l : b = t
      Case 3 : r = p : b = l : g = q
      Case 4 : r = t : b = l : g = p
     Default
       r = l : g = p : b = q
    End Select
    _Red   = r * 255.0
    _Green = g * 255.0
    _Blue  = b * 255.0
  EndIf
  If _Red  <0   Then _Red=0
  If _Red  >255 Then _Red=255
  If _Green<0   Then _Green=0
  If _Green>255 Then _Green=255
  If _Blue <0   Then _Blue=0
  If _Blue >255 Then _Blue=255
  _RGB.l = (_Red LSL 16) + (_Green LSL 8) + (_Blue)

 Function Return _RGB
End Function



Statement WZ_SetColorGradientSlider{_RGB.l}
  SHARED pens()

  If *gs_gadget<>0
    DEFTYPE.ColorWheelRGB act_rgb
    DEFTYPE.ColorWheelHSB act_hsb
    GetAttr_ #WHEEL_HSB,*cw_gadget,&act_hsb
    act_hsb\cw_Hue        = act_hsb\cw_Hue        LSR 24
    act_hsb\cw_Saturation = act_hsb\cw_Saturation LSR 24
    act_hsb\cw_Brightness = 255

    temp_RGB.l = ConvertHSBtoRGB{act_hsb}
    act_rgb\cw_Red   = ((temp_RGB LSR 16))       LSL 24
    act_rgb\cw_Green = ((temp_RGB LSR 8) AND $ff)LSL 24
    act_rgb\cw_Blue  = (temp_RGB AND $FF)        LSL 24
    RefreshGList_ *gs_gadget,*cw_win,0,1

    ; print select RGB value
    baseline.w = *cw_win\IFont\tf_YSize-*cw_win\IFont\tf_Baseline       ; added to calculate correct postion for Uppercase Letters  tomsmart1
    SetAPen_ *cw_win\RPort,#TEXTPEN
    Move_ *cw_win\RPort,cw_x+1,cw_y+cw_h-baseline                       ; replaced '+*cw_win\BorderTop-*cw_win\IFont\tf_YSize-7' with the correct baseline  tomsmart1
    Text_ *cw_win\RPort,Right$(Hex$(_RGB),6)+" ",7

    If pens(0)<>-1
      If ExecVersion >= 39
        SetRGB32_ *cw_scr\ViewPort,pens(0),act_rgb\cw_Red,act_rgb\cw_Green,act_rgb\cw_Blue
      Else
        SetRGB4_ *cw_scr\ViewPort,pens(0),act_rgb\cw_Red LSR 20,act_rgb\cw_Green LSR 20,act_rgb\cw_Blue LSR 20
      EndIf
;    Else
;      !cout{"no color available."}
    EndIf
  Else
    error{"error accessing gradientslider gadget"} ;replace by a error.include function call  tomsmart1
  EndIf
End Statement




Statement WZ_SetColorWheelRGB{_RGB.l}
  SHARED pens()

  DEFTYPE.ColorWheelRGB my_rgb
  DEFTYPE.ColorWheelHSB my_hsb
  my_rgb\cw_Red   = (_RGB LSR 16)
  my_rgb\cw_Green = ((_RGB LSR 8) AND $ff)
  my_rgb\cw_Blue  = (_RGB AND $FF)
  ConvertRGBtoHSB{my_rgb,my_hsb}

  ; convert to 24bit left justified values for os-functions
  my_rgb\cw_Red   = my_rgb\cw_Red LSL 24
  my_rgb\cw_Green = my_rgb\cw_Green LSL 24
  my_rgb\cw_Blue  = my_rgb\cw_Blue LSL 24

  If *gs_gadget<>0
    SetAttrsA_ *gs_gadget,Tags(#GRAD_CurVal,my_hsb\cw_Brightness*255)
    SetAttrsA_ *cw_gadget,Tags(#WHEEL_RGB,&my_rgb)
    RefreshGList_ *cw_gadget,*cw_win,0,1            ; moved it to show the update  tomsmart1

    WZ_SetColorGradientSlider{_RGB}

    ; removed the print ofthe select RGB value because the function 'WZ_SetColorGradientSlider{_RGB}' print it  tomsmart1
  Else
    error{"error accessing gadgets."} ;replace by a error.include function call  tomsmart1
  EndIf
End Statement


Function.l WZ_GetColorWheelRGB{}
  SHARED *cw_gadget

  DEFTYPE.ColorWheelRGB my_rgb
  GetAttr_ #WHEEL_RGB,*cw_gadget,&my_rgb
  _RGB.l = (my_rgb\cw_Red   LSR 24) LSL 16
  _RGB   + (my_rgb\cw_Green LSR 24) LSL 8
  _RGB   + (my_rgb\cw_Blue  LSR 24)

 Function Return _RGB
End Function
 


Function.b WZ_DrawColorWheel{cx.w,cy.w,cw.w,ch.w,@errormsg.b}    ; set the Type to .w to make it Synatax 6 compatible  tomsmart1
 SHARED *lib_colorwheel
 SHARED *lib_gradientslider
 SHARED pens()

  cw_x = cx
  cw_y = cy
  cw_w = cw
  cw_h = ch
  *lib_colorwheel.Library       = OpenLibrary_("Libs:gadgets/colorwheel.gadget",0)           ; changed to assign path to support MorphOs  tomsmart1
  If (*lib_colorwheel=0)
    *lib_colorwheel.Library     = OpenLibrary_("SYS:Classes/Gadgets/colorwheel.gadget",0)    ; added to make it work under AOS 4.1 FE
  EndIf
  *lib_gradientslider.Library   = OpenLibrary_("Libs:gadgets/gradientslider.gadget",0)       ; changed to assign path to support MorphOs  tomsmart1
  If (*lib_gradientslider=0)
    *lib_gradientslider.Library = OpenLibrary_("SYS:Classes/Gadgets/gradientslider.gadget",0); added to make it work under AOS 4.1 FE
  EndIf

  If (*lib_colorwheel=0) OR (*lib_gradientslider=0)               ; added a () to make better readable  tomsmart1
    If errormsg= True
      error{"Colorwheel.Gadget or Gradientslider.Gadget not found !"} ;replace by a error.include function call  tomsmart1
    EndIf
    Function Return 0
  Else
;    If win_pointer>0 Then *cw_win = win_pointer
    *cw_scr.Screen   = ActiveScreen
    *cw_dri.DrawInfo = GetScreenDrawInfo_(*cw_scr)
    If *cw_win = 0 Then *cw_win = ActiveWindow

    If *cw_win
      DEFTYPE.ColorWheelRGB a
      DEFTYPE.ColorWheelHSB b
      DEFTYPE.rgbvalues my_table

      If ExecVersion >= 39
        ; Get the RGB components of color 0
        GetRGB32_ *cw_scr\ViewPort\ColorMap,0,1,&my_table
        a\cw_Red   = $FF ;my_table\R LSR 24
        a\cw_Green = $FF ;my_table\G LSR 24
        a\cw_Blue  = $FF ;my_table\B LSR 24

        ; get one color for the gradientslider
        *cmap.ColorMap = *cw_scr\ViewPort\ColorMap
        If *cmap<>0
          pens(0) = ObtainPen_(*cmap,-1,$FF LSL 24,$FF LSL 24,$FF LSL 24,#PEN_EXCLUSIVE)
          pens(1) = ObtainPen_(*cmap,-1,0,0,0,#PEN_EXCLUSIVE)
          pens(2) = -1
        EndIf
      EndIf

      sliderwidth.w = 16                                 ;set Type to .w to make it SYNTAX 6 compatible  tomsmart1
      sx.w = cx+cw-sliderwidth                           ;set Type to .w to make it SYNTAX 6 compatible  tomsmart1
      sy.w = cy                                          ;set Type to .w to make it SYNTAX 6 compatible  tomsmart1
      sw.w = sliderwidth                                 ;set Type to .w to make it SYNTAX 6 compatible  tomsmart1
      sh.w = ch                                          ;set Type to .w to make it SYNTAX 6 compatible  tomsmart1
      my_tags.l = Tags(#GA_Left,sx,#GA_Top,sy,#GA_Width,sw,#GA_Height,sh,#GA_FollowMouse,True,#PGA_Freedom,#LORIENT_VERT,#GRAD_PenArray,&pens(0),#GRAD_CurVal,b\cw_Brightness*255,#GRAD_KnobPixels,8)
      *gs_gadget.Gadget = NewObjectA_(0,"gradientslider.gadget",my_tags)

      _sw.l = sliderwidth
      as.l = *cw_scr
      ir.l = a\cw_Red LSL 24
      ig.l = a\cw_Green LSL 24
      ib.l = a\cw_Blue LSL 24
      my_tags = Tags(#GA_Left,cx,#GA_Top,cy,#GA_Width,cw-_sw,#GA_Height,ch,#GA_RelVerify,1,#GA_DrawInfo,*cw_dri,#GA_Previous,*gs_gadget,#GA_FollowMouse,-1,#WHEEL_Screen,as,#WHEEL_GradientSlider,*gs_gadget,#WHEEL_Red,ir,#WHEEL_Green,ig,#WHEEL_Blue,ib)
      *cw_gadget.Gadget = NewObjectA_(0,"colorwheel.gadget",my_tags)

      If (*cw_gadget<>0) AND (*gs_gadget<>0)
        AddGList_ *cw_win,*gs_gadget,-1,-1,0
        Function Return True
      Else
        error{"Could not initiate ColorWheel."} ;replace by a error.include function call  tomsmart1
      EndIf
    Else
      error{"unable to access window."}   ;replace by a error.include function call  tomsmart1
    EndIf
  EndIf
End Function


Statement WZ_KillColorWheel{}
  SHARED pens()
  SHARED *lib_colorwheel
  SHARED *lib_gradientslider

  *cmap.ColorMap = *cw_scr\ViewPort\ColorMap
  For i_pens.w = 0 To (#MAXGRADPENS-1)                          ; added ( -1) because the array begins with index 0 to 1 = 2 entrys  tomsmart1
    If pens(i_pens)>-1 Then ReleasePen_ *cmap, pens(i_pens)
     pens(i_pens)=-1 ; WB color trash fix?
  Next i_pens

  RemoveGadget_ *cw_win,*cw_gadget
  RemoveGadget_ *cw_win,*gs_gadget
  DisposeObject_ *gs_gadget : *cw_gadget = 0
  DisposeObject_ *cw_gadget : *gs_gadget = 0

  CloseLibrary_ *lib_colorwheel     : *lib_colorwheel     = 0
  CloseLibrary_ *lib_gradientslider : *lib_gradientslider = 0
  ; clear window pointer, will be updated when creating new gadget
  *cw_win = 0
End Statement



Function.l WZ_Popup_ColorWheel{wx.w,wy.w,ww.w,wh.w,def_rgb.l}
  SHARED pens()
  SHARED *lib_colorwheel
  SHARED *lib_gradientslider
  SHARED WinTitleColorWheel$               ; added to replace the hardcoded only temporaly vaild string in 'wintags.l'  tomsmart1

  If ww<10 OR wh<10
    error{"improper size for colorwheel."} ;replace by a error.include function call  tomsmart1
    Function Return False
  EndIf
  WinTitleColorWheel$ = "Select Color"    ; set the new Sting variable the orignal text  tomsmart1
  winflags.l = #WFLG_ACTIVATE|#WFLG_CLOSEGADGET|#WFLG_DRAGBAR|#WFLG_DEPTHGADGET|#WFLG_SIZEGADGET|#WFLG_SIZEBBOTTOM
  winidcmp.l = #IDCMP_CLOSEWINDOW|#IDCMP_MOUSEMOVE|#IDCMP_NEWSIZE
  wintags.l  = Tags(#WA_Title,WinTitleColorWheel$,#WA_Left,wx,#WA_Top,wy,#WA_Height,wh,#WA_Width,ww,#WA_MinWidth,96,#WA_MaxWidth,192,#WA_MinHeight,96,#WA_MaxHeight,192,#WA_Flags,winflags,#WA_IDCMP,winidcmp,#WA_PubScreen,*cw_scr)

  *cw_win.Window = OpenWindowTagList_(0,wintags)
  If *cw_win
    If WZ_DrawColorWheel{*cw_win\BorderLeft,*cw_win\BorderTop,*cw_win\Width-*cw_win\BorderLeft-*cw_win\BorderRight,*cw_win\Height-*cw_win\BorderBottom-*cw_win\BorderTop}
      WZ_SetColorWheelRGB{def_rgb} : _RGB.l = def_rgb : old_RGB.l = _RGB   ; added old_RGB because it was unset bevor  tomsmart1

      loop.l = True              ; set type to .l to make it Synatax 6 compatible  tomsmart1
      While loop
        ; get message and confirm reception
        WaitPort_ *cw_win\UserPort
        *imsg.IntuiMessage = GetMsg_(*cw_win\UserPort)
        ev.l = *imsg\Class
        ReplyMsg_ *imsg

        Select ev

          Case #IDCMP_NEWSIZE
            ;wlock.l = rtLockWindow_(*cw_win)             ;deactived because i find no replacement and it worked without locking  tomsmart1
            WZ_KillColorWheel{}                           ;moved order because it makes more sens for me  tomsmart1
            *cw_win = ActiveWindow
            EraseRect_ *cw_win\RPort,*cw_win\BorderLeft,*cw_win\BorderTop,*cw_win\BorderLeft+*cw_win\Width-1,*cw_win\BorderTop+*cw_win\Height-1
            RefreshWindowFrame_ *cw_win
            If WZ_DrawColorWheel{*cw_win\BorderLeft,*cw_win\BorderTop,*cw_win\Width-*cw_win\BorderLeft-*cw_win\BorderRight,*cw_win\Height-*cw_win\BorderBottom-*cw_win\BorderTop}
              WZ_SetColorWheelRGB{_RGB}
            EndIf
            ;rtUnlockWindow_ *cw_win,wlock               ;deactived because i find no replacement and it worked without locking  tomsmart1

          Case #IDCMP_CLOSEWINDOW
            loop = False

          Case #IDCMP_MOUSEMOVE
            ; Get current RGB-Value in relation to the Gradient-slider
            _RGB = WZ_GetColorWheelRGB{}
            If _RGB <> old_RGB
              ; Convert current RGB-Value to HSB and calculate gradient
              WZ_SetColorGradientSlider{_RGB}
;                DEFTYPE.ColorWheelRGB act_rgb
;                DEFTYPE.ColorWheelHSB act_hsb
;                GetAttr_ #WHEEL_HSB,*cw_gadget,&act_hsb
;                act_hsb\cw_Hue = act_hsb\cw_Hue LSR 24
;                act_hsb\cw_Saturation = act_hsb\cw_Saturation LSR 24
;                act_hsb\cw_Brightness = 255
;                temp_RGB.l = ConvertHSBtoRGB{act_hsb}
;                act_rgb\cw_Red   = ((temp_RGB LSR 16))       LSL 24
;                act_rgb\cw_Green = ((temp_RGB LSR 8) AND $ff)LSL 24
;                act_rgb\cw_Blue  = (temp_RGB AND $FF)        LSL 24
;                SetRGB32_ *cw_scr\ViewPort,pens(0),act_rgb\cw_Red,act_rgb\cw_Green,act_rgb\cw_Blue
;                RefreshGList_ *gs_gadget,*cw_win,0,1
              old_RGB = _RGB
            EndIf

        End Select
      Wend

      WZ_KillColorWheel{}
      *cw_win = ActiveWindow
    Else
      error{"Could not open ColorWheel."} ;replace by a error.include function call  tomsmart1
    EndIf
    CloseWindow_ *cw_win
    FreeScreenDrawInfo_ *cw_scr,*cw_dri
  Else
    error{"Could not open window for ColorWheel."} ;replace by a error.include function call  tomsmart1
  EndIf

 Function Return _RGB
End Function



CNIF #__include =0
  OPTIMIZE 5                 ; added  for testing tomsmart1
  SYNTAX 6                   ; added  for testing tomsmart1

  WBStartup : NoCli
  WbToScreen 0 : WBenchToFront_
  _rgb.l = WZ_Popup_ColorWheel{ScreenWidth/8,ScreenHeight/8,ScreenWidth/4,ScreenHeight/4,$FFFFFF}
  !coutclose
End
CEND
