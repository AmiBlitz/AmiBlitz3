; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 32000
; MakeSmallest    = 0
; FuncOptimize    = 0
; Version         = 2.50.0
; NumberOfBuilds  = 264
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 1
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 206
; CursorColumn    = 32
; LabelSearch     = "dt_months"
; LabelRemark     = 0
; LabelAll        = 1
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 25
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 25
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 50
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name:  datetime.include                                                     /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 18.08.2006                                                            /
;/                                                                             /
;/ Author: Sven DrÃ¶ge                                                          /
;/                                                                             /
;/ Requirements: Amiblitz3.0                                                   /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Provide easy DateTime conversions                                           /
;/                                                                             /
;/ Abstract:                                                                   /
;/ The include is a collection of functions for converting datetimes into      /
;/ different numeric representations                                           /
;/                                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////

; ----- Constants for different representations
#DATUM_MDY      = 4
#DATUM_DMY      = 5
#DATUM_YYMMDD   = 0
#DATUM_DDMMYY   = 1
#DATUM_DDMMYYYY = 2
#DATUM_DDMM     = 3
#DATUM_DAYS     = 6
#DATUM_MONTHS   = 7
#DATUM_YEARS    = 8

Dim dt_monthNames.s(12)
dt_monthNamesStr.s = ""
Restore dt_monthNames
For kal.b = 1 To 12
  Read dt_monthNames(kal)
  dt_monthNamesStr + dt_monthNames(kal) + "\\0a"
Next kal
dt_monthNamesStr = StripTrail$(dt_monthNamesStr,10)

Dim dt_weekdayNames.s(7)
Restore dt_weekdayNames
For kal.b = 1 To 7
  Read dt_weekdayNames(kal)
Next kal

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = date_Years{}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : get the current year as a string                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s date_Years{}
  DateFormat 0 ; dd/mm/yyyy
  mydate.s = Date$(SystemDate)
  Function Return Mid$(mydate.s,7,4)
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = date_Month{}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : get the current month as a string                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s date_Months{}
  DateFormat 0 ; dd/mm/yyyy
  mydate.s = Date$(SystemDate)
  Function Return Mid$(mydate.s,4,2)
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = date_Days{}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : get the current day as a string                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s date_Days{}
  DateFormat 0 ; dd/mm/yyyy
  mydate.s = Date$(SystemDate)
  Function Return Left$(mydate.s,2)
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = date_Today{}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : get the current date as a string                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s date_Today{}
  DateFormat 0 ; dd/mm/yyyy
  Function Return Date$(SystemDate)
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = date_GetAsDay{longDate.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ - Returns the day of the week.                                              /
;/ - day, month & year are integers i.e. 15 04 2004                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : day name as string                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s date_GetAsDay{datum.l}
SHARED dt_weekdayNames()

  d$ = Str$(datum)
  j$  = Left$(d$,4)  : year.l = Val(j$)
  m$  = Mid$(d$,5,2) : month.l = Val(m$)
  t$  = Right$(d$,2) : day.l = Val(t$)

  a.l = (14 - month)/12
  y.l = year - a
  m.l = month + (12 * a) - 2
  d.l = (day + y + (y/4) - (y/100) + (y/400) + ((31*m)/12))MOD 7  ;Ooouch!

  If d >= 0 AND d < 8 Then Function Return dt_weekdayNames(d)
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = date_GetAsString{longDate.l, @mode}                     /
;/                                                                             /
;/ Description:                                                                /
;/ - returns the longDate as string representation                             /
;/ - day, month & year are integers i.e. 15 04 2004                            /
;/ 1.  value : das datum als longwert                                          /
;/ 2.  mode  : format des datumstrings [ttmm,jjmmtt,ttmmjj]                    /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : e.g. "15.04.2004"                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s date_GetAsString{value.l,@mode.b}
  Format ""
  d$  = Str$(value)
  j$  = Left$(d$,4)
  m$  = Mid$(d$,5,2)
  t$  = Right$(d$,2)

  Select mode
  Case #DATUM_DDMM
    datum$ = t$ + "." + m$ + "."
  Case #DATUM_YYMMDD
    datum$ = j$ + "." + m$ + "."  + t$
  Case #DATUM_DDMMYY
    datum$ = t$ + "." + m$ + "."  + Right$(j$,2)
  Case #DATUM_DDMMYYYY
    datum$ = t$ + "." + m$ + "."  + j$
  Default
    datum$ = t$ + "." + m$ + "."  + j$
  End Select
  Function Return datum$
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = date_GetAsLong{dateStr.s, @mode}                        /
;/                                                                             /
;/ Description:                                                                /
;/ - returns the date string as long representation                            /
;/ - the optional mode parameter sets the format                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : e.g. "20040415"                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l date_GetAsLong{d$,@mode.l}
SHARED dt_monthNames()

  ; -- check if format YYYY-MM-DD and convert to normal one DD.MM.YYYY
  If Vallong(d$) > 1000
    d$ = Right$(d$,2)+"."+Mid$(d$,6,2)+"."+Left$(d$,4)
  EndIf

  ;-- search for monthnames in string
  Dim zlong.l(2)
  Format "" : found.l = 0
  CaseSense Off
  For i.l = 1 To 12
    If Instr(d$, Left$(dt_monthNames(i),3)) > 0
      found = i
    EndIf
  Next i

  Select found
  Case 0 ; split numbers into seperate values
    l.l  = Len(d$) : quit.b = False
    i.l = 0 : y.l = 0
    While quit = False
      a$ = Mid$(d$,Len(d$)-i,1) : i + 1
      If ( (a$ = ".") OR (a$="-") OR (a$="/")) AND (y < 2)
        zlong(y) = Vallong(Right$(d$,i-1))
        d$ = Left$(d$,Len(d$)-i)
        i = 0 : y + 1
      Else
        If (y = 2)
          zlong(y) = Vallong(d$)
          quit = True
        Else
          If (i > 20) Then Function Return 0
        EndIf
      EndIf
    Wend

    If mode = #DATUM_MDY
      swap_.l= zlong(1)
      zlong(1) = zlong(2)
      zlong(2) = swap_
    EndIf

    If (zlong(0) > 70) AND (zlong(0) < 100)
      zlong(0) = 1900 + zlong(0)
    Else
      If zlong(0) < 70 Then zlong(0) = 2000 + zlong(0)
    EndIf

    If (zlong(0)<1900) OR (zlong(0)>2200) OR (zlong(1)=0) OR (zlong(1)>12) OR (zlong(2)=0) OR (zlong(2)>32) Then Function Return 0

  Default

    zlong(1) = found
    If Val(Right$(StripTrail$(d$,32),4)) > 1000
      zlong(0) = Val(Right$(d$,4))
    Else
      zlong(0) = Val(Right$(d$,2))
      If zlong(0)<70 Then zlong(0)+2000 Else zlong(0)+1900
    EndIf
    zlong(2) = Val(Left$(d$,2))
  End Select

  Select mode
  Case #DATUM_DAYS
    Function Return zlong(2)

  Case #DATUM_MONTHS
    Function Return zlong(1)

  Case #DATUM_YEARS
    Function Return zlong(0)

  Default
    datum.l = zlong(0)
    datum = datum * 10000
    datum = datum + zlong(1) * 100 + zlong(2)
    Function Return datum

  End Select

End Function


dt_monthNames:
Data.s "January","February","March","April","May","June","July","August","September","October","November","December"

dt_weekdayNames:
Data.s "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"


CNIF #__include = 0
  SYNTAX 4
  OPTIMIZE 6
  WbToScreen 0

  DateFormat 0
  Format ""
  currentDate.s = Date$(SystemDate)
  currentDate2.s = Replace$(currentDate,"/",".")
  NPrint "GetAsLong = ", date_GetAsLong{currentDate2}
  NPrint date_GetAsDay{date_GetAsLong{currentDate}}
  NPrint date_GetAsLong{currentDate2}

  DateFormat 0
  Format ""
  da$ = Date$(SystemDate)
  da2$ = Replace$(da$,"/",".")
  dummy.l = EZRequest(da2$,"OK")
  dummy.l = EZRequest(Str$(date_GetAsLong{da2$}),"OK")
CEND
