; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "TCPDemo"
; CreateIcon      = 0
; Residents       = "sdstcp.res,all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 3
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = "593700"
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 31
; CursorColumn    = 16
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: tcp.include                                                           /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
XINCLUDE "error.include.ab3"
XINCLUDE "strptr.include.ab3"

CNIF @#max_sockets=0
  #max_sockets     = 64
CEND

#port_http = 80
#port_mail = 110
#port_ftp  = 21
#port_gnutella = 6346



#socket_stat_unused      = 0
#socket_stat_created     = 1
#socket_stat_waiting     = 2
#socket_stat_connected   = 3
#socket_stat_loading     = 4
#socket_stat_done        = 5
#socket_stat_error       = 6

#packet_stat_invalid     = 0
#packet_stat_data        = 1
#packet_stat_done        = 2
#packet_stat_connected   = 3
#packet_stat_error       = 4

#TCP_SOCK_Read = 1
#TCP_SOCK_Write = 2
#TCP_SOCK_Ok = $FFFFFFFF

NEWTYPE.socket
status.l
host.s
packet.s
blocking.l
port.l
lastpacket.DateStamp
age.l
datarate_in.l   ; data transfere rate in bytes / sec
datarate_out.l
End NEWTYPE


NEWTYPE.tcpevents
socket.l
state.l
body.s
size.l
End NEWTYPE


NEWTYPE.tcp
is_open.l
socket.socket[#max_sockets]
packet_socket.l
packet_body.s
packet_size.l
packet_state.l
bequiet.l
End NEWTYPE


DEFTYPE.tcp tcp
Dim List tcpevents.tcpevents(0)

USEPATH tcp

\is_open       = False
\packet_socket = -1
\packet_body   = ""
\packet_state  = #packet_stat_invalid
\bequiet       = False


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _tcp_error {text.s}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ datarate_in.l   ; data transfere rate in bytes / sec                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - text.s    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _tcp_error {text.s}
SHARED tcp
If tcp\bequiet=False
  error {text.s}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tcp_GetCPSIn {}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tcp_GetCPSIn {}
SHARED tcp
dr.l = 0
For socket.l=0 To #max_sockets-1
  dr + \socket[socket]\datarate_in
Next
Function Return dr
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tcp_GetCPSOut {}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tcp_GetCPSOut{}
SHARED tcp
dr.l = 0
For socket.l=0 To #max_sockets-1
  dr + \socket[socket]\datarate_out
Next
Function Return dr
End Function

;_______________________ experimental
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: socket_Listen {socket.l}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement socket_Listen {socket.l}
SHARED tcp
;If \socket[socket]\connected
;  TCPListenSocket socket,1
;  \socket[socket]\connected = False
;End If
End Statement
;____________________________________


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: socket_Shut {socket.l}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ If \socket[socket]\connected                                                /
;/  TCPListenSocket socket,1                                                   /
;/  \socket[socket]\connected = False                                          /
;/ End If                                                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement socket_Shut {socket.l}
SHARED tcp
If \socket[socket]\status>=#socket_stat_waiting
  TCPShutSocket socket,2 ; #TCP_DISC_HOW_ShutDown
  \socket[socket]\status = #socket_stat_created
  \socket[socket]\datarate_in  = 0
  \socket[socket]\datarate_out = 0
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: socket_Free {socket.l}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement socket_Free {socket.l}
SHARED tcp,tcpevents()
If \socket[socket]\status>=#socket_stat_created
  socket_Shut {socket}
  TCPRemoveSocket socket
  \socket[socket]\status     = #socket_stat_unused
  \socket[socket]\packet     = ""
  \socket[socket]\host       = ""
End If
ResetList tcpevents()
While NextItemFast(tcpevents())
  If tcpevents()\socket = socket Then KillItem tcpevents()
Wend
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tcp_SetQuiet {onoff.l}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - onoff.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tcp_SetQuiet {onoff.l}
SHARED tcp
tcp\bequiet = onoff
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tcp_Close {}                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tcp_Close {}
SHARED tcp
If \is_open
  For n.l = 0 To #max_sockets-1
    socket_Free {n}
  Next
  TCPClose
  \is_open = False
End If
End Statement

!autoexit{tcp_Close}

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tcp_Open {}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tcp_Open {}
SHARED tcp
If \is_open = False
  If TCPOpen
    \is_open = True
  Else
    _tcp_error {"Unable to open bsdsocket.library !"}
  End If
End If
Function Return \is_open
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: socket_SetPacketErr {socket.l,errtext.s}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/ - errtext.s    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement socket_SetPacketErr {socket.l,errtext.s}
SHARED tcp,tcpevents()
If socket>=0
If AddLast (tcpevents())
  tcpevents()\socket = socket
  tcpevents()\state  = #packet_stat_error
  tcpevents()\body   = errtext.s
  tcpevents()\size   = -1
End If
socket_Shut{socket}
\socket[socket]\status = #socket_stat_error
;error {"Socket error !"}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = socket_Create {socket.l,blocking.l,timeout.l}           /
;/                                                                             /
;/ Description:                                                                /
;/ error {"Socket error !"}                                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/ - blocking.l    : ???                                                       /
;/ - timeout.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l socket_Create {socket.l,blocking.l,timeout.l}
SHARED tcp
succ.l = False
If \is_open = False Then succ.l = tcp_Open {}
If \is_open
  If \socket[socket]\status><#socket_stat_unused Then socket_Free {socket}
  err.l=TCPCreateSocket(socket,blocking,#TCP_SOCK_Read|#TCP_SOCK_Write,timeout,0)
  If err.l = #TCP_SOCK_Ok
    \socket[socket]\status     = #socket_stat_created
    \socket[socket]\packet     = ""
    \socket[socket]\host       = ""
    \socket[socket]\blocking   = blocking
    DateStamp_ \socket[socket]\lastpacket
    \socket[socket]\datarate_in  = 0
    \socket[socket]\datarate_out = 0
    succ.l = True
  Else
    Select err
      Case #TCP_SOCK_FailTimeout
        _tcp_error {"Could not set timeout !"}
      Case #TCP_SOCK_FailAsync
        _tcp_error {"Could not set async !"}
      Case #TCP_SOCK_FailNoSock
        _tcp_error {"Could not create sock !"}
      Default
        _tcp_error {"Unknown error during socket creation !"}
    End Select
  End If
  If succ=False Then socket_Free {socket}
End If
Function Return succ
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = socket_Connect {socket.l,host.s,port.l,timeout.l}       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/ - host.s    : ???                                                           /
;/ - port.l    : ???                                                           /
;/ - timeout.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l socket_Connect {socket.l,host.s,port.l,timeout.l}
SHARED tcp
succ.l = False
If host.s><""
If \socket[socket]\status><#socket_stat_created Then succ.l = socket_Create {socket,False,timeout}
If \socket[socket]\status=#socket_stat_created
  err.l = TCPConnectSocket(socket,host.s,port)
  If err = #TCP_CONN_CONNECTING
    If \socket[socket]\blocking = True
      \socket[socket]\status = #socket_stat_connected
    Else
      \socket[socket]\status = #socket_stat_waiting
    End If
    \socket[socket]\host = host.s
    \socket[socket]\port = port
    succ.l = True
    DateStamp_ \socket[socket]\lastpacket
  Else
    succ = False
    Select err
      Case #TCP_CONN_FailHostResolve
        errtext.s = "Unable to resolve hostname ! ("+host.s+")"
      Case #TCP_CONN_FailNoConnect
        errtext.s = "Error: Not connected !"
      Case #TCP_CONN_FailError
        errtext.s = "Fatal error !"
      Default
        errtext.s = "Unknown error occured !"
    End Select
    _tcp_error {errtext.s}
  EndIf
  If succ=False Then socket_SetPacketErr {socket,errtext.s}
End If
End If
Function Return succ
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = socket_GetHost {socket.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s socket_GetHost {socket.l}
SHARED tcp
Function Return \socket[socket]\host
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = socket_GetPort {socket.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l socket_GetPort {socket.l}
SHARED tcp
Function Return \socket[socket]\port
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = socket_GetStatus {socket.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l socket_GetStatus {socket.l}
SHARED tcp
Function Return \socket[socket]\status
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = socket_IsConnected {socket.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l socket_IsConnected {socket.l}
SHARED tcp
If \socket[socket]\status >= #socket_stat_connected Then succ.l = True:Else succ.l = False
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = socket_IsUsed {socket.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l socket_IsUsed {socket.l}
SHARED tcp
If \socket[socket]\status >= #socket_stat_created Then succ.l = True:Else succ.l = False
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = socket_IsDone {socket.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l socket_IsDone {socket.l}
SHARED tcp
If \socket[socket]\status >= #socket_stat_done Then succ.l = True:Else succ.l = False
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: socket_CreatePacket {socket.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement socket_CreatePacket {socket.l}
SHARED tcp
\socket[socket]\packet = ""
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: socket_AddPacketString {socket.l,dat.s}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/ - dat.s    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement socket_AddPacketString {socket.l,dat.s}
SHARED tcp
\socket[socket]\packet + dat.s
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: socket_AddPacketStringN {socket.l,dat.s}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/ - dat.s    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement socket_AddPacketStringN {socket.l,dat.s}
SHARED tcp
\socket[socket]\packet + dat.s +Chr$($0D)+Chr$($0A)
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: socket_AddPacketStringNN {socket.l,dat.s}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/ - dat.s    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement socket_AddPacketStringNN {socket.l,dat.s}
SHARED tcp
\socket[socket]\packet + dat.s +Chr$($00)+Chr$($00)
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: socket_SendPacket {socket.l}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement socket_SendPacket {socket.l}
SHARED tcp
If \socket[socket]\status >= #socket_stat_connected
  TCPPrint socket,\socket[socket]\packet
Else
  error {"Tried to send packet but socket is not connected yet!"}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: socket_SendMem {socket.l,ptr.l,blength.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/ - ptr.l    : ???                                                            /
;/ - blength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement socket_SendMem {socket.l,ptr.l,blength.l}
SHARED tcp
If \socket[socket]\status >= #socket_stat_connected
  TCPWrite socket,ptr,blength
Else
  error {"Tried to send packet but socket is not connected yet!"}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: socket_SendLine {socket.l,dat.s}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/ - dat.s    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement socket_SendLine {socket.l,dat.s}
SHARED tcp
socket_CreatePacket {socket}
socket_AddPacketStringN {socket,dat.s}
socket_SendPacket {socket}
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _socket_UpdateAge {socket.l,*now.DateStamp}                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/ - *now.DateStamp    : ???                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _socket_UpdateAge {socket.l,*now.DateStamp}
SHARED tcp
tick.l = *now\ds_Tick    - tcp\socket[socket]\lastpacket\ds_Tick
minu.l = *now\ds_Minute  - tcp\socket[socket]\lastpacket\ds_Minute
day.l  = *now\ds_Days    - tcp\socket[socket]\lastpacket\ds_Days
tim.l = ( tick + ( (minu + (day * 24*60)) * 60*50) ) * 20 ;/ 50
tcp\socket[socket]\age = tim
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tcp_Check {@getdata.l,@timeout.l}                       /
;/                                                                             /
;/ Description:                                                                /
;/ tim.l = ( tick + ( (minu + (day * 24*60)) * 60*50) ) * 20  50               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - getdata.l    : ???                                                        /
;/ - timeout.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tcp_Check {@getdata.l,@timeout.l}
SHARED tcp,tcpevents()
succ.l = False
DEFTYPE.DateStamp now

If timeout>0
  DateStamp_ &now
  ;minutes.l = timeout / 60
  ;tick.l    = (timeout MOD 60) * 50
  ;now\ds_Tick-tick
  ;If now\ds_Tick<0 Then now\ds_Tick+(50*60) : minutes+1
  ;now\ds_Minute-minutes
  ;If now\ds_Minute<0 Then now\ds_Minute + 24*60:now\ds_Days-1
End If

tcp_ev.l = TCPEvent
While tcp_ev>0
  For socket.l = 0 To #max_sockets-1
          \socket[socket]\datarate_in  = 0
        \socket[socket]\datarate_out = 0

    If \socket[socket]\status>=#socket_stat_waiting AND \socket[socket]\status<#socket_stat_done
      revent.l = TCPIsReadEvent(socket)
      wevent.l = TCPIsWriteEvent(socket)
      err.l    = TCPSocketError(socket)
      If err = False AND (revent><False OR wevent><False)
        \socket[socket]\datarate_in  = 0
        \socket[socket]\datarate_out = 0
        If revent
          If AddLast (tcpevents())
            tcpevents()\body   = TCPReadSocket$(socket)
            tcpevents()\size   = FLen(tcpevents()\body)
            tcpevents()\socket = socket

            If tcpevents()\size>0
              \socket[socket]\status = #socket_stat_loading
              tcpevents()\state  = #packet_stat_data
              _socket_UpdateAge{socket,&now}
              DateStamp_ \socket[socket]\lastpacket
              \socket[socket]\datarate_in = tcpevents()\size * 1000 / (\socket[socket]\age+1)

            Else
              tcpevents()\state  = #packet_stat_done
              tcpevents()\body   = ""
              tcpevents()\size   = 0
              socket_Shut{socket}
              \socket[socket]\status = #socket_stat_done
            End If
          Else
            error {"Too much TCP events pending ! - Data lost !"}
          End If
        Else
          If wevent
            \socket[socket]\status = #socket_stat_connected
            TCPSetStates socket,#TCP_SOCK_Read
            If AddLast (tcpevents())
              tcpevents()\socket = socket
              tcpevents()\state  = #packet_stat_connected
              tcpevents()\body   = ""
              tcpevents()\size   = 0
              DateStamp_ \socket[socket]\lastpacket
            End If
          End If
        End If
      Else
        If err><False
          _tcp_error {"TCP: "+TCPErrorString$}
          socket_SetPacketErr {socket,TCPErrorString$}
        Else
          \socket[socket]\datarate_in = 0;/ 2
          If timeout>0
            _socket_UpdateAge{socket,&now}
            If tcp\socket[socket]\age>timeout*1000 OR tcp\socket[socket]\age<-4000

              socket_SetPacketErr {socket,"Time out (no packet for "+Str$(tcp\socket[socket]\age)+" msecs !"}
;                socket_Shut{socket} ; timeout !

;                \socket[socket]\status = #socket_stat_error
;                If AddLast (tcpevents())
;                  tcpevents()\body   = ""
;                  tcpevents()\size   = 0
;                  tcpevents()\socket = socket
;                  tcpevents()\state  = #packet_stat_error
;error_SetFlags{#error_requester}
 ;                 error {"TCP timeout on socket "+Str$(socket)+" - age: "+Str$(tcp\socket[socket]\age)+" ms"}
;                End If
            End If
          End If
        End If
      End If
    End If

  Next
  tcp_ev.l = TCPEvent
Wend
If getdata
  If FirstItem (tcpevents())
    \packet_socket = tcpevents()\socket
    \packet_body   = tcpevents()\body
    \packet_size   = tcpevents()\size
    \packet_state  = tcpevents()\state
;    \socket[tcpevents()\socket]\datarate_in = tcpevents()\size * 1000 / (\socket[tcpevents()\socket]\age+1)
    KillItem tcpevents()
    succ.l = True
    ;If \packet_state = #packet_stat_error Then error {"Sendin error packet !"}
  End If
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tcp_GetReceivedSocket {}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tcp_GetReceivedSocket {}
SHARED tcp
Function Return \packet_socket
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = tcp_GetReceivedBody {}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s tcp_GetReceivedBody {}
SHARED tcp
Function Return \packet_body
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tcp_GetReceivedSize {}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tcp_GetReceivedSize {}
SHARED tcp
Function Return \packet_size
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tcp_GetReceivedState {}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tcp_GetReceivedState {}
SHARED tcp
Function Return \packet_state
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = _socket_connectx {socket.l,host.s,port.l}               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - socket.l    : ???                                                         /
;/ - host.s    : ???                                                           /
;/ - port.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _socket_connectx {socket.l,host.s,port.l}
SHARED tcp
succ.l = False
If socket_Create {socket,False,5}
  If socket_Connect {socket.l,host.s,port.l,5}
    breakme.l = False
    timeout.l = 50 * 4
    While socket_IsConnected {socket}=False AND socket_IsUsed {socket}=True AND timeout>0 AND breakme=False
    timeout-1

    While tcp_Check {False}
      size.l = tcp_GetReceivedSize {}
      If size<=0
        breakme=True
      Else
        error {"Received: "+tcp_GetReceivedBody {}+ " - Should be copied to queue !"}
      End If
    Wend
    Delay_ 1
  Wend
  TCPSetStates socket,#TCP_SOCK_Read
  ;If timeout<=0 Then error {"Connection timed out !"}
    If timeout=0 Then _tcp_error {"Connection timed out !"}
    If breakme Then _tcp_error {"Unable to connect !"}
  If socket_IsConnected {socket} Then succ = True
End If
End If
Function Return succ
End Function

CNIF #__include=0
End
CEND

