; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 83
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 65535
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 104
; CursorColumn    = 71
; LabelSearch     = "log_"
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 100
; Max GadgetList  = 100
; Max Shape       = 200
; Max Bank        = 1
; Max MenuList    = 100
; Max GTList      = 100
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 10
; Max BlitzFont   = 1
; Max Window      = 100
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: logging.include                                                       /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: Sven Droege                                                         /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ A set of functions to log messages and date to a console window             /
;/ or into a text file.                                                        /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////

CNIF #__include = 0
  OPTIMIZE 4
  SYNTAX 6
CEND

XINCLUDE "file.include.ab3"

; -- logging level: what to be logged
#log_nothing      = 5
#log_maintainance = 4
#log_error        = 3
#log_warning      = 2
#log_information  = 1
#log_debug        = 0

; -- output format
#log_normal   = 0
#log_short    = 1
#log_nodate   = 2
#log_function = 3

; -- output destination
#log_toconsole = 0
#log_tofile    = 1
#log_toboth    = 2

NEWTYPE.logconfig
  level.b
  columns.b
  _format.b
  destination.b
  _fileid.l
  _file.s
End NEWTYPE

Dim levelstr$(4)
levelstr$(0) = "DEBUG"
levelstr$(1) = "INFO"
levelstr$(2) = "WARN"
levelstr$(3) = "ERROR"
levelstr$(4) = "MAINT"


; -- pointer to logwindow
DEFTYPE.l __ptr_consolelog

; -- set default values
DEFTYPE.logconfig logconfig
logconfig\destination = #log_toconsole
logconfig\level = #log_nothing
logconfig\columns = 80
logconfig\_format = #log_normal
logconfig\_fileid = -1
logconfig\_file = dos_GetProgDir{"ram:"} + dos_GetProgFile{"unknown"} + ".log"

Function.l FAST log_GetFileHandle{}
SHARED __ptr_consolelog

  Function Return __ptr_consolelog
End Function

Function.s CharStream{stream.s}
  out.s = ""
  For i.w = 1 To FLen(stream)
    char.w  = Asc( Mid$(stream,i,1) )
    If char > 30 AND char < 128
      out + Chr$(char)
    Else
      out + "."
    EndIf
  Next i
  Function Return out
End Function

Statement log_Close{}
SHARED __ptr_consolelog
  If __ptr_consolelog <> 0 Then Close_ __ptr_consolelog : __ptr_consolelog = 0
End Statement

Function.b log_Init{consolestr.s}
SHARED __ptr_consolelog
  If __ptr_consolelog Then log_Close{}
  If consolestr = "" Then consolestr = "CON:/18/640/200/AB3 Log/CLOSE"
   __ptr_consolelog = Open_(&consolestr,1006)
End Function
                                                                                                                                                                                                                

!autoexit{log_Close}

Function.b log_out{ls1.s,@ls2.s}
SHARED __ptr_consolelog
SHARED logconfig

  If __ptr_consolelog = 0
    log_Init{""}
  Else

    If (logconfig\destination = #log_toconsole) OR (logconfig\destination = #log_toboth)
      If ls2 <> ""
        __cout$ = UStr$(ls1) + " " + UStr$(ls2) + Chr$($a)
      Else
        __cout$ = UStr$(ls1) + Chr$($a)
      EndIf
      Write_ __ptr_consolelog ,__cout$,FLen(__cout$)
    EndIf

    If (logconfig\destination = #log_tofile) OR (logconfig\destination = #log_toboth)
      ;If logconfig\_fileid = -1
      logconfig\_fileid = file_Open{logconfig\_file,#file_open}

      ;EndIf
      If logconfig\_fileid <> -1
        file_SeekRel{logconfig\_fileid,file_GetLength{logconfig\_fileid}}
        file_WriteLine{logconfig\_fileid,ls1 + " " + ls2}
        file_Close{logconfig\_fileid}
      EndIf
    EndIf
  EndIf
End Statement


Macro log_l
  log_out{"long:",`1}
End Macro

Macro log_w
  log_out{"word:",`1}
End Macro

Macro log_s
  log_out{"string:",`1}
End Macro

Macro log_PeekW
  log_out{Peek.w(`1)}
End Macro

Macro log_PeekL
  log_out{Peek.l(`1)}
End Macro

Macro log_PeekS
  log_out{Peek$(`1)}
End Macro


Macro log_GetColumns
  logconfig\columns
End Macro

Macro log_SetColumns
  logconfig\columns = `1
End Macro


; ////////////////////////////////
; / Par1: Memoryaddress          /
; / Par2: Bytes to output        /
; ////////////////////////////////
Macro log_HexDump
    For imh.l = 0 To `2 Step 8
      memaddr.l = `1 + imh
      memdata.l = Peek.l(memaddr)
      memdata2.l= Peek.l(memaddr+4)

      logtxt$ = Hex$(memaddr-`1)+" ("+LSet$(Str$(imh),4)+") # "
      logtxt$ + Hex$(memaddr)+": "+ Hex$(memdata)+" "+Hex$(memdata2)+"  "+CharStream{Peeks$(memaddr,8)}+" "
      logtxt$ + Str$(memdata) + "  " + Str$(memdata2)
      log_Print{logtxt$}
   Next
End Macro

; /////////////////////////////////////
; / Simple output of available memory /
; /////////////////////////////////////

Macro log_AvailMem
  If __begint.l = 0 Then __begint = AvailMem_(0)
  __availc.l = AvailMem_(#MEMF_CHIP)
  __availf.l = AvailMem_(#MEMF_FAST)
  __availt.l = AvailMem_(0)

  Format "########0"
   __old.s = " [used " + Str$(__begint - __availt) + " bytes]"
  Format ""

  __memstr.s = "C:"+Str$(__availc) + "/F:" + Str$(__availf) + __old + " : " + `1
  log_Print{__memstr,#log_debug}
End Macro

Statement log_Reset{}
SHARED logconfig
  If logconfig\destination = #log_tofile
    DeleteFile_ logconfig\_file
  EndIf
End Statement

Statement log_SetFile{fname$}
SHARED logconfig
  logconfig\_file = fname$
End Statement

Statement log_SetDestination{dest.b,@fname$}
SHARED logconfig
  logconfig\destination = dest
  If fname$<>""
    logconfig\_file = fname$
  EndIf
End Statement

Statement log_SetFormat{lf.b}
SHARED logconfig
  logconfig\_format = lf
End Statement

Function log_GetLevel{}
SHARED logconfig
  Function Return logconfig\level
End Function

Statement log_SetLevel{newlevel.b}
SHARED logconfig
  logconfig\level = newlevel
End Statement

Function.s log_GetTimeStamp{}
SHARED logconfig

  DateFormat 0 ; DD/MM/YYYY
  _date$ = Replace$(Date$(SystemDate),"/",".")
  Format "00"
  _time$ = Str$(Hours) + ":" + Str$(Mins) + ":" + Str$(Secs)
  Format ""
  Select logconfig\_format
  Case #log_short
    Function Return ""
  Case #log_nodate
    Function Return "[" + _time$ + "]"
  Default
    Function Return "[" + _date$ + " " + _time$ + "]"
  End Select
End Function


; -- intern
Statement log_Output{text$,@header$}
SHARED logconfig
  message_len.w = FLen(text$)
  If message_len > logconfig\columns
    For i.w = 1 To message_len Step logconfig\columns
      log_out{header$,Mid$(text$,i,logconfig\columns)}
    Next i
  Else
    log_out{header$,text$}
  EndIf
End Statement

; -- intern
Statement log_PrintN{text$,header$}
  ret.w = Instr(text$,Chr$(10))
  If ret = 0
    log_Output{text$,header$}
  Else
    log_Output{Left$(text$,ret-1),header$}
    log_PrintN{UnRight$(text$,ret),header$}
  EndIf
End Statement

Statement log_Print{text$,@level.b}
SHARED logconfig,levelstr$()
; Escape Sequences
; -- ESC [ "Pm" m
; -- Pm=0 : normal / reset
; -- Pm=1 : bold
; -- Pm=2 : faint
; -- Pm=3 : italic
; -- Pm=4 : underscore
; -- Pm=5 : blink
; -- Pm=7 : inverse
; -- Pm=30-37 : set foreground color
; -- Pm=38 : set foreground color, next arguments "5;n" or "2;r;g;b"
; -- Pm=39 : default foreground color
; -- Pm=40-47 : set background color
; -- Pm=48 : set background color, next arguments "5;n" or "2;r;g;b"
; -- Pm=49 : default background color

  If level = -1 Then level = logconfig\level
  If (logconfig\level <= level) AND (logconfig\level<>#log_nothing)
    header$ = "\\1B[2m" + log_GetTimeStamp{} + "\\1B[22m "
    header$ + "\\1B[1m" + Left$(levelstr$(level),5) + "\\1B[0m "
    text$ =   text$
    log_PrintN{text$,header$}
  EndIf
End Statement




CNIF #__include = 0
NoCli
log_SetDestination{#log_toboth}
log_SetFile{"ram:logging.log"}
log_SetLevel{#log_warning}
log_SetFormat{#log_short}

log_Print{"this is a debug message",#log_debug}
log_Print{"this is an info",#log_information}
log_Print{"this is a warning",#log_warning}

log_SetFormat{#log_short}

message$ = "ERROR\\naborting..."

log_Print{message$,#log_error}
MouseWait
CEND
