; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "EclockDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 107
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 0
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 5
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 4
; Max GTList      = 100
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name:  eclock.include                                                       /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 18.08.2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements: Amiblitz2.4                                                   /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Provide accurate time messurement to Amiblitz2.                             /
;/                                                                             /
;/ Abstract:                                                                   /
;/ This include can be used to read out the exact system time, but the main :: /
;/ purpose is to use it like a "stop clock" to messure time intervalls e.g. :: /
;/ for benchmark purposes.                                                     /
;/                                                                             /
;/ from every function that read the eclock there are two versions, the hire:: /
;/ s one (default) and the low-res one.                                        /
;/ - hires (EClock, CIA)                                                       /
;/ - lowres (GetSysTime,VBlank)                                                /
;/ hires : This is very accurate, better than milliseconds                     /
;/ lowres: This is less precise, e.g. on WinUAE only 50Hz, but it has less o:: /
;/ verhead and it can be considered as more compatible, since it does not us:: /
;/ e the FPU and only OS functions calls to determine the time.                /
;/ Use the lowres version, if you messure longer time intervalls that dont h:: /
;/ ave to be very accurate.                                                    /
;/                                                                             /
;/ User Constants: none                                                        /
;/                                                                             /
;/ Example:                                                                    /
;/ XInclude "eclock.inlcude"                                                   /
;/                                                                             /
;/ eclock_Start{}                                                              /
;/                                                                             /
;/ ... do something ...                                                        /
;/                                                                             /
;/ time.l = eclock_Stop{}                                                      /
;/ NPrint "What we just did, needed ",time," ms to compute!"                   /
;/ End                                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#eclock_use_longlong = 0
XINCLUDE "error.include.ab3"
CNIF #eclock_use_longlong
XINCLUDE "longlong.include.ab3"
CEND
CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
#MAX_ECLOCKUNITS = 16
CEND

CNIF @#MAX_ECLOCKUNITS=0
  #MAX_ECLOCKUNITS = 16
CEND

#eclock_default = 0


NEWTYPE.eclock_timeval
tv.timeval   ; time value
ev.EClockVal ; eclock value
End NEWTYPE

NEWTYPE.eclock
is_open.l
msgport.l
msg.l
timer_base.l
sigflag.l
is_used.l[#MAX_ECLOCKUNITS]
scaler.l[#MAX_ECLOCKUNITS]
a.eclock_timeval[#MAX_ECLOCKUNITS]
r.eclock_timeval
quantum.l
efreq_err.l
efreq.l
End NEWTYPE


#LVO_AddTime    = -42 ; (dest,src)(a0/a1)
#LVO_SubTime    = -48 ; (dest,src)(a0/a1)
#LVO_CmpTime    = -54 ; (dest,src)(a0/a1)
#LVO_ReadEClock = -60 ; (dest)(a0)
#LVO_GetSysTime = -66 ; (dest)(a0)

DEFTYPE.eclock eclock
USEPATH eclock

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !_eclock_ReadEClock {ll timeval,long efreq}                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - ll timeval    : ???                                                       /
;/ - long efreq    : ???                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _eclock_ReadEClock ; {ll timeval, long efreq}
GetRegD0 `1
MOVE.l d0,a0
GetRegD0 \timer_base
MOVEM.l a0/a6,-(a7)
MOVE.l d0,a6
JSR LVO_ReadEClock(a6)
MOVEM.l (a7)+,a6/a0
`2 = PutRegD0
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !_eclock_GetSysTime {ll timeval,                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _eclock_GetSysTime ; {ll timeval,
GetRegD0 `1    ;GetSysTime()
MOVE.l d0,a0
GetRegD0 \timer_base
MOVEM.l a0/a6,-(a7)
MOVE.l d0,a6
JSR LVO_GetSysTime(a6)
MOVEM.l (a7)+,a6/a0
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !_eclock_Subtime {dest timeval,source timeval) dest-source          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _eclock_Subtime   ; {dest timeval, source timeval) dest-source
GetRegD0 `1
MOVE.l d0,a0
GetRegD0 `2
MOVE.l d0,a1
GetRegD0 \timer_base
MOVEM.l a0/a6,-(a7)
MOVE.l d0,a6
JSR LVO_SubTime(a6)
MOVEM.l (a7)+,a6/a0
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l =  _eclock_Div64 {ia.l,ib.l,ic.l}                         /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - ia.l    : ???                                                             /
;/ - ib.l    : ???                                                             /
;/ - ic.l    : ???                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST _eclock_Div64{ia.l,ib.l,ic.l}  ; a * b / c
x.l = ia
a.l = ib
b.l = ic
r1.l = x MOD b
q1.l = x / b
r2.l = a MOD b
q2.l = a / b
y.l = b*q1*q2 + q2*r1+q1*r2 + r1*r2/b
Function Return y
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: eclock_Close {}                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Close the timer.device and all resources the eclock.include allocated.      /
;/ This is called on autoexit.                                                 /
;/                                                                             /
;/ See also:    eclock_Open                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement eclock_Close {}
SHARED eclock
If \timer_base Then CloseDevice_ (\msg)       :\timer_base = False
If \msg        Then DeleteIORequest_ (\msg)   :\msg        = False
If \msgport    Then DeleteMsgPort_ (\msgport) :\msgport    = False
\is_open = False
End Statement
!autoexit{eclock_Close}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = eclock_Open {@scaler.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ Open the timer.device. This is called automatically on the first use of e:: /
;/ clock_Start.                                                                /
;/ But if you want to program disciplined, use it to check if the timer.devi:: /
;/ ce was opened correctly,                                                    /
;/ and you can already set the resulution.                                     /
;/ The scaler parameter will be multiplied by the messured time in seconds.    /
;/ E.g. a scaler of ...                                                        /
;/ * 1 will give you seconds.                                                  /
;/ * 50 will give you 50Hz ticks                                               /
;/ *1000 will give you milliseconds,                                           /
;/ *1000000 will give you micro seconds                                        /
;/                                                                             /
;/ Adjust it according your required accuracy.                                 /
;/                                                                             /
;/ Note: If the used timer has lower accuracy than you request, the values w:: /
;/ ill be quantized.                                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - scaler.l    : scaler value                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : -1 if everything went well, 0 otherwise                    /
;/                                                                             /
;/ See also:    eclock_Close                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l eclock_Open {@scaler.l}
SHARED eclock
succ.l = False
\msgport = CreateMsgPort_()
If  \msgport
  \msg = CreateIORequest_(\msgport,SizeOf.timerequest)
  If \msg
    If OpenDevice_ ("timer.device",#UNIT_WAITECLOCK,\msg,0) = False
      *TimerIO.timerequest = \msg
      *TimerIO\tr_node\io_Command = #TR_ADDREQUEST
      succ = True
      \is_open    = True

      *mp.MsgPort = \msgport
      \sigflag    = 1 LSL *mp\mp_SigBit
      \timer_base = *TimerIO\tr_node\io_Device

      \efreq_err  = 0
      !_eclock_ReadEClock{\a\ev,\efreq}

      For unit.l=0 To #MAX_ECLOCKUNITS-1
        If scaler<=0 Then \scaler[unit]=1000:Else \scaler[unit]=scaler ; milliseconds per default
        \is_used[unit] = False
      Next
      \is_used[0] = True

    Else
      error {"Unable to open timer.device !"}
    End If
  Else
    error {"Failed to create timerequest !"}
  End If
Else
  error {"Failed to create msgport !"}
End If
If succ = False Then eclock_Close {}
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = eclock_ObtainUnit {}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l eclock_ObtainUnit{}
SHARED eclock
unit.l = 1
While \is_used[unit] = True AND unit<#MAX_ECLOCKUNITS-1:unit+1:Wend
If \is_used[unit] = False Then resunit.l = unit:Else resunit = -1
Function Return resunit
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: eclock_ReleaseUnit {unit.l}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - unit.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement eclock_ReleaseUnit{unit.l}
SHARED eclock
If unit>0 AND unit<#MAX_ECLOCKUNITS
  \is_used[unit] = False
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.d = eclock_ReadDouble {@scaler.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - scaler.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.d eclock_ReadDouble {@scaler.l,@unit.l}
SHARED eclock
If unit.l<0 Then unit = 0
If \is_open=0 Then ret.l=eclock_Open{scaler}
dtime.d = 0
If \is_open
  !_eclock_ReadEClock{\r\ev,\efreq}
  If scaler=-1 Then scaler=\scaler[unit]
  d.d= \r\ev\ev_hi * 65536.0
  d  = d * 65536.0 + \r\ev\ev_lo
  If \r\ev\ev_lo <0 Then d + (65536*65536)
  dtime.d = d*scaler/\efreq
End If
Function Return dtime
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = eclock_Read {@scaler.l,@unit.l}                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - scaler.l    : ???                                                         /
;/ - unit.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.d     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l eclock_Read {@scaler.l,@unit.l}
SHARED eclock
If unit.l<0 Then unit = 0
If \is_open=0 Then ret.l=eclock_Open{scaler}
time.l = 0
If \is_open
  !_eclock_ReadEClock{\r\ev,\efreq}
  If scaler=-1 Then scaler=\scaler[unit]
  CNIF #eclock_use_longlong
    !ll_SetLong{lscaler.ll,scaler}
    !ll_SetLongLong{ltime.ll,\r\ev\ev_hi,\r\ev\ev_lo}
    !ll_Mulu{ltime,ltime,lscaler}
    !ll_Divu6432{ltime,ltime,\efreq}
    time.l = ltime\lo
  CELSE
    time.l    = Int(eclock_ReadDouble{scaler,unit})
  CEND
End If
Function Return time
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: eclock_Start {@scaler.l,@unit.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Start to messure the time.                                                  /
;/ Imagine to have a stopclock in your hands. This is the equivalent to pres:: /
;/ sing the "start" button.                                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - scaler.l    : optionally, a scaler value if different from eclock_open    /
;/ - unit.l    : ???                                                           /
;/                                                                             /
;/ See also:    eclock_Open, eclock_Stop                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST eclock_Start {@scaler.l,@unit.l} ;the ticks per second default 1000
SHARED eclock
If \is_open=0 Then ret.l=eclock_Open{scaler}
If \is_open
  If unit<0 Then unit=0
  If scaler<>-1 Then \scaler[unit]=scaler
  !_eclock_ReadEClock{\a[unit]\ev,\efreq}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: eclock_StartLR {@scaler.l,@unit.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - scaler.l    : ???                                                         /
;/ - unit.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST eclock_StartLR {@scaler.l,@unit.l} ;the ticks per second default 1000
SHARED eclock
If \is_open=0 Then ret.l=eclock_Open{scaler}
If \is_open
  If unit<0 Then unit=0
  If scaler<>-1 Then \scaler[unit]=scaler
  !_eclock_GetSysTime{\a[unit]\tv}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = eclock_Stop {@unit.l}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ Return the time that has passed since the last call of eclock_Start.        /
;/ This is the equivalent to pressing the stop button and reading the time t:: /
;/ hat has passed, except that the timer keeps on running.                     /
;/ You can call this functions as often as you want after eclock_Start.        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - unit.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : time in seconds that has passed since the last call of e:: /
;/ clock_start, scaled by the last scaler value that was set.                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l eclock_Stop {@unit.l}
SHARED eclock
If unit<0 Then unit=0
timediff.l = 0
If \is_open
  !_eclock_ReadEClock{\r\ev,\efreq}
  CNIF #eclock_use_longlong
    !ll_SetLongLong{ltime1.ll,\a[unit]\ev\ev_hi,\a[unit]\ev\ev_lo}
    !ll_SetLongLong{ltime2.ll,\r\ev\ev_hi,\r\ev\ev_lo}
    !ll_Sub{ltimediff.ll,ltime2,ltime1}
    ;!ll_Set{ltimediff.ll,ltime2}
    !ll_SetLong{lscaler.ll,\scaler[unit]}
    !ll_Mulu{ltimediff,ltimediff,lscaler}
    !ll_Divu6432{ltimediff,ltimediff,\efreq}

    timediff.l = ltimediff\lo
  CELSE
    time2.d=\r\ev\ev_hi       * (65536.0*65536.0) + \r\ev\ev_lo
    If \r\ev\ev_lo       <0 Then time2=time2 + (65536.0*65536.0)

    time1.d=\a[unit]\ev\ev_hi * (65536.0*65536.0) + \a[unit]\ev\ev_lo
    If \a[unit]\ev\ev_lo <0 Then time1=time1 + (65536.0*65536.0)

    defreq.d    = \efreq
    dscaler.d   = \scaler[unit]
    dtimediff.d = (time2-time1)*dscaler/defreq
    timediff.l  = Int(dtimediff)
  CEND
End If
Function Return timediff
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l =  eclock_StopLR {@unit.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - unit.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST eclock_StopLR {@unit.l}
SHARED eclock
If unit<0 Then unit=0
timediff.l=0
If \is_open
  !_eclock_GetSysTime{\r\tv}
  !_eclock_Subtime{\r\tv,\a[unit]\tv}
  timediff.l = \r\tv\tv_secs * \scaler[unit] + _eclock_Div64{\r\tv\tv_micro,\scaler[unit],1000000}
End If
Function Return timediff
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: eclock_SetStartTime {starttime.d,@scaler.l,@unit.l}                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - starttime.d : ???                                                         /
;/ - scaler.l    : ???                                                         /
;/ - unit.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement eclock_SetStartTime {starttime.d,@scaler.l,@unit.l}
SHARED eclock
If unit<0 Then unit=0
eclock_Start{scaler,unit}
CNIF #eclock_use_longlong
  !ll_SetLong{ltime.ll  ,starttime}
  !ll_SetLong{lscaler.ll,\scaler[unit]}
  !ll_SetLong{lefreq.ll ,\efreq}
  !ll_Mulu{ecv.ll,ltime,lefreq}
  !ll_Divu{ecv.ll,ecv,lscaler}
  \a[unit]\ev\ev_hi = ecv\hi
  \a[unit]\ev\ev_lo = ecv\lo
  !ll_Divu{tv.ll,ltime,lscaler}
  \a[unit]\tv\tv_secs = tv\lo
  !ll_Mod{tv.ll,ltime,lscaler}
  !ll_SetLong{micro.ll,1000000}
  !ll_Mulu{tv.ll,tv.ll,micro}
  !ll_Divu{tv.ll,ltime,lscaler}
  \a[unit]\tv\tv_micro = tv\lo
CELSE
  dtime.d    = starttime
  dscaler.d  = \scaler[unit]
  defreq.d   = \efreq
  decv.d     = dtime * defreq/dscaler
  dtimeHi.d  = dtime / 65536.0 / 65536.0
  \a[unit]\ev\ev_hi = Int(dtimeHi)
  dtimeHi.d   = \a[unit]\ev\ev_hi
  dtimeLo.d  = dtime - dtimeHi
  \a[unit]\ev\ev_hi = Int(dtimeLo)
  dtime.d     = starttime / dscaler
CEND
End Statement



CNIF #__include=0
NPrint "press and hold CTRL+c to end"
eclock_Start{1000}
Repeat:
  Delay_ 50
  time.l = eclock_Stop{}
  Print "Needed ",time,"ms ... should be ~1000. "
  Print "current time: ",eclock_Read{1000}," d=",eclock_ReadDouble{1000}
  NPrint " - 64 bit eclock:",Hex$(\a[0]\ev\ev_hi),Hex$(\a[0]\ev\ev_lo)
Until SetSignal_(0,#SIGBREAKF_CTRL_C)&#SIGBREAKF_CTRL_C
End
CEND

