; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Libs:"
; ExeFile         = "test.library"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 109
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 28
; LabelSearch     = ""
; LabelRemark     = 60
; LabelAll        = 5
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !INITBYTE2                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ ; !INITBYTE{offset,value}                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _lib_INITBYTE ; offset,value}
    CNIF `1<=255
    Dc.b    $A0,`1
    Dc.b    `2,0
    CELSE
    Dc.b    $E0,0
    Dc.w    `1
    Dc.b    `2,0
    CEND
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !INITWORD2                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ ; !INITWORD{offset, value}                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _lib_INITWORD ;{offset, value}
    CNIF `1<=255
    Dc.b    $90,`1
    Dc.w    `2
    CELSE
    Dc.b    $D0,0
    Dc.w    `1
    Dc.w    `2
    CEND
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !INITLONG2                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ ; !INITLONG{offset,value}                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _lib_INITLONG ;{offset, value}
    CNIF `1<=255
    Dc.b    $80,`1
    Dc.l    `2
    CELSE
    Dc.b    $C0,0
    Dc.w    `1
    Dc.l    `2
    CEND
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !fxlib_init                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro lib_Init ; { name, version, revision }

#lib_VERSION  = `2
#lib_REVISION = `3
;#lib_VERSION  = 1
;#lib_REVISION = 0


#_LVOFreeMem = -210
#_LVORemove  = -252

NEWTYPE.LibraryBase
  libb_Library.Library  ; the library structure
  libb_Flags.b          ; (unsigned) kirjaston liput
  libb_pad.b            ; (unsigned) alignment
  libb_SysLib.l         ; (unsigned) ExecBase
  libb_SegList.l        ; (unsigned) SegList-osoitin
End NEWTYPE

;#RTC_MATCHWORD  = $4AFC

;#RTB_AUTOINIT   = 7
;#RTF_AUTOINIT   = (1 LSL #RTB_AUTOINIT)

#LIBB_SUMMING   = 0
#LIBB_CHANGED   = 1
#LIBB_SUMUSED   = 2
#LIBB_DELEXP    = 3
#LIBB_EXP0CNT   = 4

;#LIBF_SUMMING   = (1 LSL #LIBB_SUMMING)
;#LIBF_CHANGED   = (1 LSL #LIBB_CHANGED)
;#LIBF_SUMUSED   = (1 LSL #LIBB_SUMUSED)
;#LIBF_DELEXP    = (1 LSL #LIBB_DELEXP)
;#LIBF_EXP0CNT   = (1 LSL #LIBB_EXP0CNT)


_lib_Begin:
  MOVEQ.l #-1,d0
  RTS

_lib_ROMTag:
  Dc.w  #RTC_MATCHWORD  ; UWORD RT_MATCHWORD
  Dc.l  _lib_ROMTag     ; APTR  RT_MATCHTAG
  Dc.l  _lib_EndOfLib   ; APTR  RT_ENDSKIP
  Dc.b  #RTF_AUTOINIT   ; UBYTE RT_FLAGS
  Dc.b  #lib_VERSION    ; UBYTE RT_VERSION
  Dc.b  #NT_LIBRARY     ; UBYTE RT_TYPE
  Dc.b  0               ; BYTE  RT_PRI
  Dc.l  _lib_Name       ; APTR  RT_NAME
  Dc.l  _lib_Id         ; APTR  RT_IDSTRING
  Dc.l  _lib_InitStuff  ; APTR  RT_INIT

_lib_Name:
  Dc.b  `1,0
  Even

_lib_Id:
  Dc.b  `1,"`2.`3",0
  Even

_lib_InitStuff:
  Dc.l  SizeOf.LibraryBase  ; Structure size
  Dc.l  _lib_JumpTable      ; Jump table address
  Dc.l  _lib_BaseData       ; Information for the initialization
  Dc.l  _lib_InitRoutine    ; Own initialization routine

_lib_BaseData:
  !_lib_INITBYTE{SizeOf.Node\ln_Type,#NT_LIBRARY}
  !_lib_INITLONG{SizeOf.Node\ln_Name,_lib_Name}
  !_lib_INITBYTE{SizeOf.Library\lib_Flags,#LIBF_SUMUSED|#LIBF_CHANGED}
  !_lib_INITWORD{SizeOf.Library\lib_Version,#lib_VERSION}
  !_lib_INITWORD{SizeOf.Library\lib_Revision,#lib_REVISION}
  !_lib_INITLONG{SizeOf.Library\lib_IdString,_lib_Id}
  Dc.l        0

_lib_InitRoutine:
  MOVE.l  a5,-(a7)                                          ; Save A5
  MOVE.l  d0,a5                                             ; Library Base address
  MOVE.l  d0,_lib_Base

  initbasic

  _lib_FuncCounter.l = 0
  _lib_FuncPointer.l = 0
  _lib_FuncOffset.l  = 0
  *_lib_Base.LibraryBase = Peek.l(?_lib_Base)

  SHARED _lib_sema.SignalSemaphore
  InitSemaphore_ _lib_sema
  Gosub _lib_CustomInit

  !initasm  ;switch to asm and init it
  MOVE.l  a6,SizeOf.LibraryBase\libb_SysLib(a5)             ; Store ExecBase to library data
  MOVE.l  a0,SizeOf.LibraryBase\libb_SegList(a5)            ; Store SegList to library d ta

  ; If any other initialization operations are required put them here

  MOVE.l  a5,d0                                             ; Return the Base addres in  0
  MOVE.l  (a7)+,a5                                          ; Restore A5
  RTS

._lib_r_Open:
  ADDQ.w  #1,SizeOf.Library\lib_OpenCnt(a6)                 ; New user for this library so increase open count
  BCLR    #LIBB_DELEXP,SizeOf.LibraryBase\libb_Flags(a6)    ; ...Expunge is forbid
  MOVE.l  a6,d0                                             ; Return BASE address in D0
  RTS

._lib_r_Close:
  MOVEQ   #0,d0                                             ; Return value
  SUBQ.w  #1,SizeOf.Library\lib_OpenCnt(a6)                 ; Decrease open count
  BNE     'nousers                                          ; Is there any users?
  BTST    #LIBB_DELEXP,SizeOf.LibraryBase\libb_Flags(a6)    ; No, so we test if there are delayed Expunge request?
  BEQ     'nousers
  BSR     _lib_r_Expunge                                    ; Yes! so we jump to expunge
'nousers:
  RTS                                                       ; Return where ever we were called from.

._lib_r_Expunge:
  MOVEM.l d2/a5-a6,-(a7)                                    ; Save registers
  MOVE.l  a6,a5                                             ; Library base address
  MOVE.l  SizeOf.LibraryBase\libb_SysLib(a5),a6             ; ExecBase
  TST.w   SizeOf.Library\lib_OpenCnt(a5)                    ; Library still having users?
  BEQ     'nousers
  BSET    #LIBB_DELEXP,SizeOf.LibraryBase\libb_Flags(a5)    ; Yes! -> Delayed expunge
  MOVEQ   #0,d0                                             ; We ret rn NULL
  MOVEM.l (a7)+,d2/a5-a6
  RTS

'nousers:
  MOVEM.l d0-d7/a0-a6,-(a7)
  !basica7
  ObtainSemaphore_ _lib_sema
  Gosub _lib_CustomFree
  !asma7
  MOVEM.l (a7)+,d0-d7/a0-a6

  MOVE.l  SizeOf.LibraryBase\libb_SegList(a5),d2            ; Save SegList-address to D2
  MOVE.l  a5,a1
  JSR     _LVORemove(a6)                                    ; ... from the system list

  ; Any other clean up's needed? If so then do those here

  MOVEQ   #0,d0                                             ; clear D0
  MOVE.l  a5,a1                                             ; Library base
  MOVE.w  SizeOf.Library\lib_NegSize(a5),d0                 ; Library negative size
  SUB.l   d0,a1                                             ; Points at the start of memory block
  ADD.w   SizeOf.Library\lib_PosSize(a5),d0                 ; Add library positive size
  JSR     _LVOFreeMem(a6)                                   ; ... free the memory
  MOVE.l  d2,d0                                             ; Restore SegList
  MOVEM.l (a7)+,d2/a5-a6
  !exitasm
  End noa7

._lib_r_Null:
  MOVEQ #0,d0                                               ; Reserved routine HAVE TO RETURN NULL IN D0
  RTS

_lib_Base:
  Dc.l 0

_lib_DummyFunc:
  MOVE.l #12345,D0
  RTS

_lib_DummyFunc2:
  MOVE.l #54321,D0
  RTS

_lib_FuncPointerTest:
  MOVE.l #666,d0
  RTS

_lib_JumpTable:
  Dc.l _lib_r_Open      ; Open routine address    ; 00
  Dc.l _lib_r_Close     ; Close routine address   ; 06
  Dc.l _lib_r_Expunge   ; Expunge routine address ; 12
  Dc.l _lib_r_Null      ; ** Reserved **          ; 18
_lib_UserJumpTable:
  Dc.l _lib_DummyFunc   ; 256 user functions
  Dc.l _lib_DummyFunc2
  Ds.l 256
  Dc.l -1

_lib_CustomInit:

End Macro



Macro lib_Function
  _lib_OldFuncPointer.l = SetFunction_ (*_lib_Base,-30 - _lib_FuncCounter*6, ?_lib_CallStub_`1)
  _lib_FuncCounter+1

  BRA _lib_Func_`1

  _lib_CallStub_`1:
  MOVE.l basicvars,a5
  LEA _lib_Func_`1,A0
  CNIF #__debug
  JMP 16(A0)
  CELSE
  JMP 6(A0)
  CEND

  _lib_Func_`1:
  Function.l `1

End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !lib_Lock                                                            /
;/                                                                             /
;/ Description:                                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro lib_Lock
;!basica7
;MOVEM.l d0-d2/a0-a4,-(a7)
ObtainSemaphore_ _lib_sema
;MOVEM.l (a7)+,d0-d2/a0-a4
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !fx_unlock                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro lib_Unlock
;MOVEM.l d0-d2/a0-a4,-(a7)
ReleaseSemaphore_ _lib_sema
;MOVEM.l (a7)+,d0-d2/a0-a4
;!asma7
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !fxlib_exit                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro lib_Free
  Return

_lib_CustomFree:

End Macro

Macro lib_End
  Return

_lib_EndOfLib:
Even
End Macro



CNIF #__include=0
SYNTAX 2
OPTIMIZE 7
!lib_Init{"test.library",1,0}
firstlabel:
XINCLUDE "error.include.ab3"
globalvar.l = 0

!lib_Function {addInt} {a.l,b.l}
Function Return a+b
End Function

!lib_Function {subInt} {a.l,b.l}
Function Return a-b
End Function

!lib_Free

!lib_End

addInt{0,0}
subInt{0,0}
CEND


