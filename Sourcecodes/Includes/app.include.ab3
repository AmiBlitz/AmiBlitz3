; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "AppDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 2024
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 479
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 2
; Max GadgetList  = 5
; Max Queue       = 1
; Max Screen      = 2
; Max Shape       = 2
; Max CopList     = 1
; Max Sprite      = 1
; Max Stencil     = 1
; Max Module      = 1
; Max Window      = 2
; Max Anim        = 1
; Max Sound       = 1
; Max Bank        = 1
; Max Buffer      = 1
; Max BitMap      = 1
; Max Slice       = 1
; Max Page        = 4
; Max Tape        = 1
; Max IntuiFont   = 1
; Max MedModule   = 1
; Max Palette     = 1
; Max MenuList    = 1
; Max BlitzFont   = 1
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: app.include                                                           /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 11.03.2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements: Amiblitz2.4                                                   /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Provide App functionality for Amiblitz programs.                            /
;/                                                                             /
;/ Abstract:                                                                   /
;/ This include adds 3 features to your program:                               /
;/ - create an menu entry in the Workbench menu under "tools"                  /
;/ - show/hide an app icon to the Workbench desktop                            /
;/ - drag&drop of icons to your windows or app icon                            /
;/                                                                             /
;/ User Constants:    none                                                     /
;/                                                                             /
;/ Example:                                                                    /
;/ __________________________________________________________________ snip!    /
;/ . XINCLUDE "app.include.ab3"                                                /
;/ .                                                                           /
;/ . #notify_win   = 1                                                         /
;/ . #notify_popup = 2                                                         /
;/ . #notify_icon  = 3                                                         /
;/ .                                                                           /
;/ . Window 0,0,0,320,200,$E,"AppTest",1,0                                     /
;/ . If app_Init {"MyApp","Blitz2:Amiblitz2","MyApp Menuitem",#notify_popup,:: /
;/ #n. otify_icon}                                                             /
;/ .   app_AddWin {0,#notify_win}                                              /
;/ .   app_ShowIcon{}                                                          /
;/ .   While breakme.l=False                                                   /
;/ .     Wait_($FFFFFFFF)                                                      /
;/ .     If app_GetEvent {}                                                    /
;/ .       Select app_GetEventNotify {}                                        /
;/ .         Case #notify_icon                                                 /
;/ .           message {"File drop on Icon ! \\22"+app_GetEventString {}+"\\:: /
;/ 22"}                                                                        /
;/ .         Case #notify_win                                                  /
;/ .           message {"File drop in Window ! \\22"+app_GetEventString {}+":: /
;/ \\22"}                                                                      /
;/ .         Case #notify_popup                                                /
;/ .           message {"PopUp !"}                                             /
;/ .       End Select                                                          /
;/ .     End If                                                                /
;/ .     If Event=#IDCMP_CLOSEWINDOW Then breakme = True                       /
;/ .   Wend                                                                    /
;/ . End If                                                                    /
;/ . End                                                                       /
;/ __________________________________________________________________ snip!    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
CEND

XINCLUDE "error.include.ab3"
XINCLUDE "dos.include.ab3"

#APP_BUFFERSIZE = 4096

NEWTYPE.appengine
app_name.s
app_icon.l
menu_name.s
app_menu.l
icon_file.s
app_buffer.l

*icon_do.DiskObject
*msgport.MsgPort
sigflag.l

event_x.l
event_y.l
event_id.l
event_string.s
event_win.l
event_notify.l

popup_notify.l
icon_notify.l

app_init.l
End NEWTYPE

#APP_WINDOWDROP = 1 ; icon drop into window
#APP_MENUHIT    = 2 ; WB menu hit
#APP_ICON       = 3 ; doubleclick or icon drop

#MTYPE_PSTD         = 1 ; a "standard Potion" message */
#MTYPE_TOOLEXIT     = 2 ; exit message from our tools */
#MTYPE_DISKCHANGE   = 3 ; dos telling us of a disk change */
#MTYPE_TIMER        = 4 ; we got a Timer tick */
#MTYPE_CLOSEDOWN    = 5 ; <unimplemented> */
#MTYPE_IOPROC       = 6 ; <unimplemented> */
#MTYPE_APPWINDOW    = 7 ; msg from an App Window */
#MTYPE_APPICON      = 8  ; msg from an App icon */
#MTYPE_APPMENUITEM  = 9  ; msg from an App MenuItem */
#MTYPE_COPYEXIT     = 10  ; exit msg from copy process */
#MTYPE_ICONPUT      = 11  ; msg from PutDiskObject in icon.library */


NEWTYPE.appwin
appwin.l
notify.l
End NEWTYPE

;Dim appwin.appwin(#max_windows-1)
Dim appwin.appwin(Maximum Window)
DEFTYPE.appengine appengine
;SHARED appengine.appengine

USEPATH appengine


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: app_AddWin {win.l,notify.l}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ Add the app functionality to a Window blitzobject, after the window was o:: /
;/ pened.                                                                      /
;/ The notify value will be retruned by app_GetEventNotify, when the user drop:: /
;/ s an icons over this window. Using the app_GetEventX and app_GetEventY functi:: /
;/ ons, you can check if the file was dropped in the desired area, e.g. a fi:: /
;/ le lister.                                                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l     : Window blitzobject number                                      /
;/ - notify.l  : notify value associated with the window                     /
;/                                                                             /
;/ See also:    app_RemWin                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement app_AddWin {win.l,notify.l}
SHARED windat(),appwin(),appengine
If win>=0 AND \msgport><0
  *win_ptr.Window = Peek.l(Addr Window(win))
  If *win_ptr
    appwin(win)\appwin = AddAppWindowA_ (#APP_WINDOWDROP,win,*win_ptr,\msgport,Tags(0,0))
    appwin(win)\notify = notify
  End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: app_RemWin {win.l}                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Remove the resources associated with the Window blitzobject, on which app:: /
;/ _AddWin was applied.                                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : Window blitzobject number                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement app_RemWin {win.l}
SHARED windat(),appwin()
If win>=0
  If appwin(win)\appwin
    RemoveAppWindow_ appwin(win)\appwin
    appwin(win)\appwin = 0
    appwin(win)\notify = 0
  End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: app_ShowIcon {}                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Show the app icon on the Workench desktop. It it save to call this functi:: /
;/ on if the icon is already visible or if no icon was defined.                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement app_ShowIcon {}
SHARED appengine
If \app_icon=0
  If \icon_do
    MOVE.l a4,-(a7)
    AddAppIconA_ #APP_ICON,-1,&\app_name,\msgport,0,\icon_do,0
    MOVE.l d0,appIcon
    MOVE.l (a7)+,a4
    \app_icon=Peek.l(?appIcon)
  Else
    ;error {"No DiskObject for Appicon !"+}
    error {"\\__THIS_FUNCTION: Unable to get diskobject: \\22"+\icon_file+"\\22!"}
  End If
End If
Statement Return
.appIcon
Dc.l 0
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: app_HideIcon {}                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Hide the app icon. It is save to clall this function if the icon is alrea:: /
;/ dy hidden or there is no icon defined.                                      /
;/                                                                             /
;/ See also:    app_ShowIcon, app_Init                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement app_HideIcon {}
SHARED appengine
If \app_icon Then RemoveAppIcon_ \app_icon : \app_icon  = 0
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: app_Free {}                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ Free all resources allocated by app_Init and later usage of the app.inclu:: /
;/ de.                                                                         /
;/ This function will be automatically called on autoexit.                     /
;/                                                                             /
;/ See also:    app_Init                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement app_Free {}
SHARED appengine,appwin()
;error {"App free !"}
;For n.l = 0 To #max_windows-1
For n.l=0 To (Maximum Window-1)
  If appwin(n)\appwin Then app_RemWin {n} : appwin(n)\appwin = 0
Next

If \app_icon Then RemoveAppIcon_ \app_icon     : \app_icon  = 0
If \icon_do  Then FreeDiskObject_ \icon_do     : \icon_do   = 0
If \app_menu Then RemoveAppMenuItem_ \app_menu : \app_menu  = 0
If \msgport  Then DeleteMsgPort_ \msgport      : \msgport = 0
If \app_buffer Then FreeMem_ \app_buffer,#APP_BUFFERSIZE   : \app_buffer=0
End Statement
!autoexit{app_Free}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.l = app_Init {name.s,iconfile.s,menuname.s,popup_notify.l,i:: /
;/ con_notify.l}                                                               /
;/                                                                             /
;/ Description:                                                                /
;/ Init the app functionality for your application.                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - name.s    : name of your application                                      /
;/ - iconfile.s    : dos path to an .info file that is used as an app icon     /
;/ - menuname.s    : name of the menu entry that will be create in Workbench:: /
;/ s tool menu                                                                 /
;/ - popup_notify.l    : notify value if the user wants to pop up your appli:: /
;/ cation (menu entry or click on app icon)                                    /
;/ - icon_notify.l    : notify value if the user drops a file icon on the icon /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.l     : -1 if everything went well, 0 if it failed                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l app_Init {name.s,iconfile.s,menuname.s,popup_notify.l,icon_notify.l}
SHARED appengine
If \msgport=0
  \app_name   = name.s
  \menu_name  = menuname.s
  If iconfile.s="" Then iconfile.s=dos_GetProgIcon{""}
  \icon_file  = iconfile.s
  \app_icon   = 0
  \icon_do    = 0

  \app_buffer = AllocMem_ (#APP_BUFFERSIZE,#MEMF_ANY)
  \popup_notify = popup_notify
  \icon_notify  = icon_notify
  \msgport = CreateMsgPort_()
  If \msgport><0 AND \app_buffer><0
    \sigflag = 1 LSL \msgport\mp_SigBit
    If \icon_file><""
      \icon_do = GetDiskObjectNew_ (&\icon_file)
      If \icon_do=0
        error {"Unable to get diskobject: \\22"+\icon_file+"\\22!"}
      End If
    End  If

    If \menu_name><""
      \app_menu = AddAppMenuItemA_ (#APP_MENUHIT,-1,&\menu_name,\msgport,Tags(0,0))
    End If
    succ.l = True
  Else
    error {"\\__THIS_FUNCTION: Unable to init app functionality!"}
    app_Free{}
  End If
Else
  succ = True
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.l = app_GetEvent {}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ Check for app events and return success if there was an event.              /
;/ See app_GetEventID for possbile events.                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.l     : -1 if there was an event, 0 otherwise                        /
;/                                                                             /
;/ See also:    app_GetEventID                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l app_GetEvent {}
SHARED appengine,appwin()
succ.l = False
If \msgport
  *msg.AppMessage = GetMsg_ (\msgport)
  If *msg
    \event_win = *msg\am_UserData
    \event_id  = *msg\am_ID
    \event_x   = *msg\am_MouseX
    \event_y   = *msg\am_MouseY
    \event_notify = False

    Select \event_id
      Case #APP_WINDOWDROP
        If *msg\am_ArgList
          If *msg\am_ArgList\wa_Name><0 AND *msg\am_ArgList\wa_Lock><0
            If NameFromLock_ (*msg\am_ArgList\wa_Lock,\app_buffer,#APP_BUFFERSIZE)
              \event_string   = Peek.s(*msg\am_ArgList\wa_Name)
              If AddPart_ (\app_buffer,&\event_string,#APP_BUFFERSIZE)
                \event_string = Peek.s (\app_buffer)
              End If
            End If
          Else
            \event_string = ""
          End If
        Else
          \event_string=""
        End If

        If \event_win>=0 AND \event_win<Maximum Window
          \event_notify = appwin(\event_win)\notify
        Else
          \event_notify = \icon_notify
        End If

      Case #APP_MENUHIT
        \event_notify = \popup_notify

      Case #APP_ICON  ; drop or click ?
        If *msg\am_ArgList
          If *msg\am_ArgList\wa_Name><0 AND *msg\am_ArgList\wa_Lock><0
            If NameFromLock_ (*msg\am_ArgList\wa_Lock,\app_buffer,#APP_BUFFERSIZE)
              \event_string   = Peek.s(*msg\am_ArgList\wa_Name)
              If AddPart_ (\app_buffer,&\event_string,#APP_BUFFERSIZE)
                \event_string = Peek.s (\app_buffer)
              End If
            End If
            \event_notify = \icon_notify
          Else
            \event_string = ""
          End If
        Else
          \event_string = ""
        End If
        If FLen(\event_string) = 0 Then \event_notify = \popup_notify
    End Select
    ReplyMsg_ *msg
    succ.l = True
  End If
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  eventID.l = app_GetEventID {}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ The event ID can be one of:                                                 /
;/   #app_menu      : someone picked the Workbench menu entry                  /
;/   #app_icon      : someone doulbeclicked the app icon                       /
;/   #app_icon_drop : someone dropped an icon on our app icon                  /
;/   #app_window    : someone dropped an icon on our window                    /
;/                                                                             /
;/ Result:                                                                     /
;/ - eventID.l     : ID value of the event type that happend                   /
;/                                                                             /
;/ See also:    app_GetEvent                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l app_GetEventID {}
SHARED appengine
Function Return \event_id
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = app_GetEventString {}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ Return a string that is associated with the last event. E.g., if someone :: /
;/ drops an file icon on your app icon or window, this is the complete dos f:: /
;/ ilename.                                                                    /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : string that is associated with the last event              /
;/                                                                             /
;/ See also:    app_GetEvent                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s app_GetEventString{}
SHARED appengine
Function Return \event_string
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  x.l = app_GetEventX {}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ Return the X coordinate of the last event, usually relative to the event :: /
;/ windows top left edge.                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - x.l     : X coordinate                                                    /
;/                                                                             /
;/ See also:    app_GetEvent, app_GetEventY                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l app_GetEventX {}
SHARED appengine
Function Return \event_x
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  win.l = app_GetEventWin {}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ Return the Window Blitzobject that belongs to the last event.               /
;/                                                                             /
;/ Result:                                                                     /
;/ - win.l     : Window Blitzobject                                            /
;/                                                                             /
;/ See also:    app_GetEvent                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l app_GetEventWin {}
SHARED appengine
Function Return \event_win
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  y.l = app_GetEventY {}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ Return the Y coordinate of the last event, usually relative to the event :: /
;/ windows top left edge.                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - y.l     : Y coordinate                                                    /
;/                                                                             /
;/ See also:    app_GetEvent, app_GetEventX                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l app_GetEventY {}
SHARED appengine
Function Return \event_y
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  notify.l = app_GetEventNotify {}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ Return the notify value that can be defined by the user and is associated:: /
;/  with the last event.                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - notify.l     : user defined notify value                                  /
;/                                                                             /
;/ See also:    app_GetEvent                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l app_GetEventNotify {}
SHARED appengine
Function Return \event_notify
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  sigf.l = app_GetSigFlag {}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ Return the signal flag of the app event message port. You can use this in:: /
;/  your event loop within Wait_().                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - sigf.l     : signal flag of the app event messageport                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l app_GetSigFlag {}
SHARED appengine
Function Return \sigflag
End Function


; demo
CNIF #__include=0
#notify_windrop   = 1
#notify_popup     = 2
#notify_icondrop  = 3

Window 0,0,0,320,200,$e,"AppTest",1,0
NPrint "Throw an icon into me!"
NPrint "...and check out the WB Menu..."
NPrint "...and the App Icon (that looks like Amiblitz)!"

If app_Init {"MyApp","Blitz3:Amiblitz3","MyApp Menuitem",#notify_popup,#notify_icondrop}
  app_AddWin {0,#notify_windrop}
  app_ShowIcon{}
  breakme.l = False
  While breakme=False
    Wait_($FFFFFFFF) ; wait for all signals...
    If app_GetEvent {}
      Select app_GetEventNotify {}
        Case #notify_icondrop
          message {"File drop onto Icon ! \\22"+app_GetEventString {}+"\\22"}

        Case #notify_windrop
          message {"File drop into Window ! \\22"+app_GetEventString {}+"\\22 at pixel "+Str$(app_GetEventX{})+" / "+Str$(app_GetEventY{})}

        Case #notify_popup
          message {"App Icon Doubleclick!"}

      End Select
    End If

    If Event=#IDCMP_CLOSEWINDOW Then breakme = True
  Wend
End If

End
CEND



