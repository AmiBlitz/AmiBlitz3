; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "TempBufferDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 24
; CursorColumn    = 28
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: tempbuffer.include                                                    /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 24/05/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
XINCLUDE "error.include.ab3"

NEWTYPE.tempbufferengine
tmpbuffer_size.l
tmpbuffer
End NEWTYPE

DEFTYPE.tempbufferengine tempbufferengine
USEPATH tempbufferengine


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tempbuffer_Free {}                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tempbuffer_Free {}
SHARED tempbufferengine
If \tmpbuffer Then FreeVec_ \tmpbuffer : \tmpbuffer = 0: \tmpbuffer_size =0
End Statement

!autoexit{tempbuffer_Free}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tempbuffer_Get {bytesize.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - bytesize.l    : needed byte size                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : pointer to temporary memory                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tempbuffer_Get {bytesize.l}
SHARED tempbufferengine
If \tmpbuffer_size<bytesize
  tempbuffer_Free{}
  \tmpbuffer = AllocVec_(bytesize,#MEMF_ANY)
  If \tmpbuffer
    \tmpbuffer_size = bytesize
  Else
    error {"tempbuffer_Get: Not enough memory for temp buffer !"}
  End If
End If
Function Return \tmpbuffer
End Function
 

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tempbuffer_Resize {bytesize.l}                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - bytesize.l    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tempbuffer_Resize {bytesize.l}
SHARED tempbufferengine
If \tmpbuffer_size<bytesize
  oldtmpbuffer.l    = \tmpbuffer
  oldtmpbuffer_size.l = Min(\tmpbuffer_size,bytesize)
  \tmpbuffer = AllocVec_(bytesize,#MEMF_ANY)
  If \tmpbuffer
    \tmpbuffer_size = bytesize
    If oldtmpbuffer Then CopyMem_ oldtmpbuffer,\tmpbuffer,oldtmpbuffer_size
  Else
    error {"tempbuffer_Resize: Not enough memory for temp buffer !"}
  End If
  If oldtmpbuffer Then FreeVec_ oldtmpbuffer
End If
Function Return \tmpbuffer
End Function

