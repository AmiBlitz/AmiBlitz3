; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "IDCMPDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 14
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 31
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 10
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 5
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 4
; Max GTList      = 100
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: intuition.include                                                     /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 27/12/2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Replace the event related Blitz commands, fix some bugs and add some extr:: /
;/ a functionality.                                                            /
;/                                                                             /
;/ Abstract:                                                                   /
;/ Why should I use the intuition.include ?                                    /
;/                                                                             /
;/ The Blitz commands for retrieving IDCMP events are system friendly and wo:: /
;/ rk on all platforms - theoretically.                                        /
;/ But they were written without the knowledge of MOS and OS4. that have a s:: /
;/ lightly different behaviour when it comes to IDCMP events, especially whe:: /
;/ n it                                                                        /
;/ comes to scroller/slider gadgets and their immediate values. This include:: /
;/  fixes those problems and behaves the same on all systems. It also does s:: /
;/ ome workarounds and pre-processing, so that you always receive the values   /
;/ you would expect.                                                           /
;/ E.g. following a slider gadget, you get an IDCMP_GADGETDOWN, then many ID:: /
;/ CMP_MOUSEMOVE and then one IDCMP_GADGETUP. During the mouse moves, the Bl:: /
;/ itz command GadGetHit will return -1 or even crash.                         /
;/ This means, you have to keep track by yourself which slider is moving, wh:: /
;/ ich can be quite difficult if the window gets deactivated without user in:: /
;/ teraction and you are missing the IDCMP_GADGETUP.                           /
;/                                                                             /
;/ The intuition include using !event_gadgethit will always return you the g:: /
;/ adget ID of the slider, as you would expect.                                /
;/ A lot of affort has been taken into making it work nicely under all circu:: /
;/ mstances and all platforms.                                                 /
;/                                                                             /
;/ Any bugs or problems ? No problem, you have the source code and can chang:: /
;/ e it!                                                                       /
;/                                                                             /
;/ The include contains "intui_xxx" type functions, that can be called any t:: /
;/ ime. The "event_xxx" type functions, mainly macros for speed reasons, are:: /
;/  always related to the latest event you have received. It makes only sens:: /
;/ e to call them after you received an event you are interested in using in:: /
;/ tui_event or intui_WaitEvent.                                               /
;/                                                                             /
;/ User Constants:  none                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
; intuition include from thilo koehler
CNIF #__include=0
SYNTAX 2
OPTIMIZE 7
XINCLUDE "xlog.include.ab3"
CEND

XINCLUDE "error.include.ab3"


#RAWKEY_APOSTROPH = $00 ;   '   ~
#RAWKEY_1         = $01 ;   1   !
#RAWKEY_2         = $02 ;   2   @
#RAWKEY_3         = $03 ;   3   #
#RAWKEY_4         = $04 ;   4   $
#RAWKEY_5         = $05 ;   5   %
#RAWKEY_6         = $06 ;   6   ^
#RAWKEY_7         = $07 ;   7   &
#RAWKEY_8         = $08 ;   8   *
#RAWKEY_9         = $09 ;   9   (
#RAWKEY_0         = $0A ;   0   )
#RAWKEY_MINUS     = $0B ;   -   _
#RAWKEY_PLUS      = $0C ;   =   +
#RAWKEY_BACKSLASH = $0D ;   \   |
#RAWKEY_UNDEF1    = $0E ;   (undefined)   (undefined)
#RAWKEY_NUMPAD0   = $0F ;   0   0 (numeric pad)
#RAWKEY_Q         = $10 ;   q   Q
#RAWKEY_W         = $11 ;   w   W
#RAWKEY_E         = $12 ;   e   E
#RAWKEY_R         = $13 ;   r   R
#RAWKEY_T         = $14 ;   t   T
#RAWKEY_Y         = $15 ;   y   Y
#RAWKEY_U         = $16 ;   u   U
#RAWKEY_I         = $17 ;   i   I
#RAWKEY_O         = $18 ;   o   O
#RAWKEY_P         = $19 ;   p   P
#RAWKEY_SBO       = $1A ;   [   {
#RAWKEY_SBC       = $1B ;   ]   }
#RAWKEY_UNDEF2    = $1C ;   (undefined)   (undefined)
#RAWKEY_NUMPAD1   = $1D ;   1   1 (numeric pad)
#RAWKEY_NUMPAD2   = $1E ;   2   2 (numeric pad)
#RAWKEY_NUMPAD3   = $1F ;   3   3 (numeric pad)
#RAWKEY_A         = $20 ;   a   A
#RAWKEY_S         = $21 ;   s   S
#RAWKEY_D         = $22 ;   d   D
#RAWKEY_F         = $23 ;   f   F
#RAWKEY_G         = $24 ;   g   G
#RAWKEY_H         = $25 ;   h   H
#RAWKEY_J         = $26 ;   j   J
#RAWKEY_K         = $27 ;   k   K
#RAWKEY_L         = $28 ;   l   L
#RAWKEY_SEMI      = $29 ;   ;   :
#RAWKEY_QUOTE     = $2A ;   '   "
#RAWKEY_RESERVED1 = $2B ;   (reserved)  (reserved)
#RAWKEY_UNDEF3    = $2C ;   (undefined)   (undefined)
#RAWKEY_NUMPAD4   = $2D ;   4   4 (numeric pad)
#RAWKEY_NUMPAD5   = $2E ;   5   5 (numeric pad)
#RAWKEY_NUMPAD6   = $2F ;   6   6 (numeric pad)
#RAWKEY_RESERVED2 = $30 ;   (reserved)  (reserved)
#RAWKEY_Z         = $31 ;   z   Z
#RAWKEY_X         = $32 ;   x   X
#RAWKEY_C         = $33 ;   c   C
#RAWKEY_V         = $34 ;   v   V
#RAWKEY_B         = $35 ;   b   B
#RAWKEY_N         = $36 ;   n   N
#RAWKEY_M         = $37 ;   m   M
#RAWKEY_COMMA     = $38 ;   ,   <
#RAWKEY_DOT       = $39 ;   .   >
#RAWKEY_SLASH     = $3A ;   /   ?
#RAWKEY_UNDEF4    = $3B ;   (undefined)   (undefined)
#RAWKEY_NUMPADDOT = $3C ;   .   . (numeric pad)
#RAWKEY_NUMPAD7   = $3D ;   7   7 (numeric pad)
#RAWKEY_NUMPAD8   = $3E ;   8   8 (numeric pad)
#RAWKEY_NUMPAD9   = $3F ;   9   9 (numeric pad)
#RAWKEY_SPACE     = $40 ;   SPACE (20)  SPACE (20)
#RAWKEY_BACKSPACE = $41 ;   BACK SPACE (08)   BACK SPACE (08)
#RAWKEY_TAB       = $42 ;   TAB (09)  TAB (09)
#RAWKEY_ENTER     = $43 ;   ENTER (0D) (numeric pad)  ENTER (0D) (numeric pad)
#RAWKEY_RETURN    = $44 ;   Return (0D)   Return (0D)
#RAWKEY_ESC       = $45 ;   ESC (1B)  ESC (1B)
#RAWKEY_DEL       = $46 ;   DEL (7F)  DEL (7F)
#RAWKEY_UNDEF5    = $47 ;   (undefined)   (undefined)
#RAWKEY_PAGEUP    = $48 ;   (undefined)   (undefined)
#RAWKEY_PAGEDOWN  = $49 ;   (undefined)   (undefined)
#RAWKEY_NUMPADMINUS=$4A ;   -   - (numeric pad)
#RAWKEY_F11       = $4B ;   (undefined)   (undefined)
#RAWKEY_ARROWUP   = $4C ;   UP ARROW A  UP ARROW T
#RAWKEY_ARROWDOWN = $4D ;   DOWN ARROW B  DOWN ARROW S
#RAWKEY_ARROWRIGHT= $4E ;   RIGHT ARROW C   RIGHT ARROW A
#RAWKEY_ARROWLEFT = $4F ;   LEFT ARROW D  LEFT ARROW @
#RAWKEY_UP        = $4C ;   UP ARROW A  UP ARROW T
#RAWKEY_DOWN      = $4D ;   DOWN ARROW B  DOWN ARROW S
#RAWKEY_RIGHT     = $4E ;   RIGHT ARROW C   RIGHT ARROW A
#RAWKEY_LEFT      = $4F ;   LEFT ARROW D  LEFT ARROW @
#RAWKEY_F1        = $50 ;   F1 0~   F1 10~
#RAWKEY_F2        = $51 ;   F2 1~   F2 11~
#RAWKEY_F3        = $52 ;   F3 2~   F3 12~
#RAWKEY_F4        = $53 ;   F4 3~   F4 13~
#RAWKEY_F5        = $54 ;   F5 4~   F5 14~
#RAWKEY_F6        = $55 ;   F6 5~   F6 15~
#RAWKEY_F7        = $56 ;   F7 6~   F7 16~
#RAWKEY_F8        = $57 ;   F8 7~   F8 17~
#RAWKEY_F9        = $58 ;   F9 8~   F9 18~
#RAWKEY_F10       = $59 ;   F10 9~  F10 19~
#RAWKEY_UNDEF9    = $5A ;   (undefined)   (undefined)
#RAWKEY_UNDEF10   = $5B ;   (undefined)   (undefined)
#RAWKEY_UNDEF11   = $5C ;   (undefined)   (undefined)
#RAWKEY_UNDEF12   = $5D ;   (undefined)   (undefined)
#RAWKEY_UNDEF13   = $5E ;   (undefined)   (undefined)
#RAWKEY_HELP      = $5F ;   HELP ?~   HELP ?~
#RAWKEY_LSHIFT    = $60 ;   LEFT SHIFT  LEFT SHIFT
#RAWKEY_RSHIFT    = $61 ;   RIGHT SHIFT   RIGHT SHIFT
#RAWKEY_CAPSLOCK  = $62 ;   CAPS LOCK   CAPS LOCK
#RAWKEY_CTRL      = $63 ;   CTRL  CTRL
#RAWKEY_LALT      = $64 ;   LEFT ALT  LEFT ALT
#RAWKEY_RALT      = $65 ;   RIGHT ALT   RIGHT ALT
#RAWKEY_LAMIGA    = $66 ;   LEFT AMIGA  CLOSE AMIGA
#RAWKEY_RAMIGA    = $67 ;   RIGHT AMIGA   OPEN AMIGA
#RAWKEY_LMB       = $68 ;   LEFT Mouse BUTTON   LEFT Mouse BUTTON
#RAWKEY_RMB       = $69 ;   RIGHT Mouse BUTTON  RIGHT Mouse BUTTON
#RAWKEY_MMB       = $6A ;   MIDDLE Mouse BUTTON   MIDDLE Mouse BUTTON
#RAWKEY_UNDEF14   = $6B ;   (undefined)               (undefined)
#RAWKEY_UNDEF15   = $6C ;   (undefined)               (undefined)
#RAWKEY_UNDEF16   = $6D ;   (undefined)               (undefined)
#RAWKEY_UNDEF17   = $6E ;   (undefined)               (undefined)
#RAWKEY_UNDEF18   = $6F ;   (undefined)               (undefined)
#RAWKEY_HOME      = $70
#RAWKEY_END       = $71
#RAWKEY_WHEELUP   = $7A
#RAWKEY_WHEELDOWN = $7B
#RAWKEY_WHEELLEFT = $7C
#RAWKEY_WHEELRIGHT= $7D
;#RAWKEY_UNDEF     = $70 - 7F ; (undefined)   (undefined)
;#RAWKEY_TRANS     = $80-F8 ; UP TRANSITION   UP TRANSITION
;#RAWKEY_          = $(80 For 00, 81 For 01 ... F8 For 7F)
#RAWKEY_BADKEY    = $F9 ;   LAST KEYKODE BAD
#RAWKEY_OVERFLOW  = $FA ;   KEYBOARD Buffer OVERFLOW
#RAWKEY_UNDEF19   = $FB ;   (undefined)   (undefined)
#RAWKEY_FAILED    = $FC ;   KEYBOARD SELFTEST FAILED
#RAWKEY_START     = $FD ;   POWER-UP KEY STREAM Start
;#RAWKEY_END       = $FE ;   POWER-UP KEY STREAM End
#RAWKEY_MOUSE     = $FF ;   Mouse Event (Mouse moved only, no button changed)


NEWTYPE.intuiengine
gadid.l
winid.l
last_gadid.l
last_seconds.l
last_micros.l
last2_seconds.l
last2_micros.l
c_seconds.l
c_micros.l
*last_winptr.Window
code.w
rawkey_.b
vanillakey_.b
qual.l
idcmp.l
timestamp.l
mx.l
my.l
mb.l
mdx.l
mdy.l
smx.l
smy.l
mpress.l
mpress_id.l[8]
iaddr.l
*winptr.Window
seconds.l
micros.l
signal.l
menu_title.l
menu_item.l
menu_sub.l
menu_open.l
string.s
*mp.MsgPort
End NEWTYPE

Dim List intui_eq.ExtIntuiMessage(1024)

Dim intui_rawkey.w(128)
SHARED intui_rawkey()
DEFTYPE.ExtIntuiMessage *intui_msg
DEFTYPE.Gadget *intui_gad
DEFTYPE.MsgPort *intui_mp
USEPATH intuiengine
DEFTYPE.InputEvent intuievent
SHARED intuiengine.intuiengine
\last_gadid = -1

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: intui_FlushRawKey {}                                                /
;/                                                                             /
;/ Description:                                                                /
;/ Reset all rawkeys to be unpressed.                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement intui_FlushRawKey{}
SHARED intui_rawkey()
For n.l=0 To 127
  intui_rawkey(n)=0
Next
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: intui_Free {}                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Free all resources associated with the intuition include. You can not use:: /
;/  the intuition.include functions anymore after this.                        /
;/ NOTE: This function is called on autoexit. You dont need to call it manua:: /
;/ lly.                                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement intui_Free {}
SHARED intuiengine,*intui_mp
*intui_mp = 0
End Statement
!autoexit{intui_Free}

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = intui_GetEvent {}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Return the IDCMP code of the last event or 0 if there was no event in the:: /
;/  queue.                                                                     /
;/ NOTE: Replaces Blitz command "Event".                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : IDCMP code or 0                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l intui_GetEvent {} ; replaces Event
SHARED intuiengine,*intui_msg,*intui_gad,*intui_mp,intui_rawkey(),intuievent,intui_eq()
\idcmp = 0
If *intui_mp=0 Then *intui_mp = BlitzMsgPort
If *intui_mp

  If FirstItem(intui_eq())
   *intui_msg = intui_eq() : fromqueue.l = True
  Else
   *intui_msg = GT_GetIMsg_(*intui_mp) : fromqueue = False
  End If

  If *intui_msg

    \idcmp   = *intui_msg\eim_IntuiMessage\Class
    \code    = *intui_msg\eim_IntuiMessage\Code &$FFFF

    If \idcmp&(#IDCMP_MOUSEBUTTONS|#IDCMP_GADGETDOWN)
      \menu_open  = False
      If (\idcmp&#IDCMP_MOUSEBUTTONS)
        \mb = \code & $3 +1
        If \code&#IECODE_UP_PREFIX
          \mpress=False
          \mpress_id[\mb-1] = False
        Else
          \mpress=True
          \mpress_id[\mb-1] = True
        End If
      End If
      If \mpress><0 OR (\idcmp=#IDCMP_GADGETDOWN)
      \last2_seconds = \last_seconds
      \last2_micros  = \last_micros
      \last_seconds  = \c_seconds
      \last_micros   = \c_micros
      \c_seconds = *intui_msg\eim_IntuiMessage\Seconds
      \c_micros  = *intui_msg\eim_IntuiMessage\Micros

      End If

    End If

    \qual    = *intui_msg\eim_IntuiMessage\Qualifier
    \mdx     = *intui_msg\eim_IntuiMessage\MouseX - \mx
    \mdy     = *intui_msg\eim_IntuiMessage\MouseY - \my
    \mx      = *intui_msg\eim_IntuiMessage\MouseX
    \my      = *intui_msg\eim_IntuiMessage\MouseY

    \iaddr   = *intui_msg\eim_IntuiMessage\IAddress
    \seconds = *intui_msg\eim_IntuiMessage\Seconds
    \micros  = *intui_msg\eim_IntuiMessage\Micros
    \winptr  = *intui_msg\eim_IntuiMessage\IDCMPWindow
    \smx      = *intui_msg\eim_IntuiMessage\MouseX + \winptr\LeftEdge
    \smy      = *intui_msg\eim_IntuiMessage\MouseY + \winptr\TopEdge

    If \idcmp=#IDCMP_MENUPICK
      If \code=-1
        \idcmp=0
        \menu_title = -1
        \menu_item  = -1
        \menu_sub   = -1
      Else
        \menu_title = \code & $1F
        \menu_item  = (\code LSR 5) & $3F
        \menu_sub   = (\code LSR 11) & $1F : If \menu_sub = $1f Then \menu_sub=-1
        If \menu_sub>=0
          ;\code = GTMenuChecked(\menu_title,\menu_item,\menu_sub)
        Else
          ;\code = GTMenuChecked(\menu_title,\menu_item)
        End If
      End If
      \menu_open  = False
    End If

    If \idcmp=#IDCMP_RAWKEY
      If \code&#IECODE_UP_PREFIX
        intui_rawkey(\code&$7F) = False
      Else
        intui_rawkey(\code&$7F) = True
      End If
      \rawkey_     = \code&$7F
      \vanillakey_ = 0
      intuievent\ie_NextEvent = 0
      intuievent\ie_Class     = #IECLASS_RAWKEY
      intuievent\ie_SubClass  = 0
      intuievent\ie_Code      = \code
      intuievent\ie_Qualifier = \qual
      MapRawKey_ intuievent,&\vanillakey_,1,False
    End If

    If \idcmp=#IDCMP_MENUVERIFY Then \menu_open = True

    If \idcmp=#IDCMP_GADGETDOWN OR \idcmp=#IDCMP_GADGETUP
      \menu_open  = False
      If \iaddr
        *intui_gad.Gadget = \iaddr
        \last_gadid = *intui_gad\GadgetID
        ;If (*intui_gad\GadgetType&#GTYP_STRGADGET) ; does not work under MOS, so call it always, doesnt hurt!
          GT_GetGadgetAttrsA_ *intui_gad,0,0,Tags(#GTST_String,&strptr.l,#GTIN_Number,&\code)
          If strptr Then \string = Peek.s(strptr):Else \string=""
        ;End If
      End If
    End If

    \gadid = \last_gadid
    If fromqueue
      KillItem intui_eq()
    Else
      GT_ReplyIMsg_  *intui_msg
    End If

    If \code=255 AND \idcmp=#IDCMP_MOUSEMOVE  Then \gadid=-1 ;: \idcmp=0 ; 255 fix!
    If \code=0   AND \idcmp=#IDCMP_INTUITICKS Then \gadid=-1 ; \idcmp=0 ; Ticks fix
    ;If \idcmp = #IDCMP_REFRESHWINDOW Then error {"Refresh !"}

    If \idcmp=#IDCMP_GADGETUP
      \last_gadid = -1
    End If
  End If
End If
Function Return \idcmp
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: intui_FlushEvents {@idcmp.l,@win.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ Flush events that are waiting in the tasks event queue.                     /
;/ You can specify a IDCMP mask to select only special event types to be flu:: /
;/ shed or -1 for all events.                                                  /
;/ Additionally, you can specify the Blitz Window Object ID of the window, w:: /
;/ hose events should be flushed.                                              /
;/ Otherwise the events of all windows are flushed.                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - idcmp.l    : IDCMP mask to match the events to be flushed                 /
;/ - win.l    : Blitz Window Object ID of the window whose events should be :: /
;/ flushed                                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement intui_FlushEvents{@idcmp.l,@win.l}
SHARED intui_eq(),*intui_mp,*intui_msg
If win>=0 AND (win<Maximum Window)
  winptr.l = Peek.l(Addr Window(win))
  ; error{"Winflush: "+Str$(win)}
Else
  winptr=0
End If
If *intui_mp=0 Then *intui_mp = BlitzMsgPort
If *intui_mp
   Repeat
     *intui_msg = GT_GetIMsg_(*intui_mp)
     If *intui_msg
       If ((*intui_msg\eim_IntuiMessage\Class & idcmp) = 0) OR (winptr><*intui_msg\eim_IntuiMessage\IDCMPWindow)
         If AddLast(intui_eq())
           CopyMem_ *intui_msg,intui_eq(),SizeOf.ExtIntuiMessage
           ;error {"Event queued !"}
         End If
       End If
       GT_ReplyIMsg_  *intui_msg
     End If
   Until *intui_msg = 0
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = intui_WaitEvent {}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ Freeze the task until an event occures and return IDCMP code.               /
;/ This is only useful, if the event message port is the only thing your tas:: /
;/ k is waiting for.                                                           /
;/ If you are waiting for other signals, like AHI, TCP/IP, I/O devices, AREX:: /
;/ X etc., you might want to use Wait_() with the signal flag added from int:: /
;/ ui_sigflag. Then, use intui_event to find out if there is a new event wai:: /
;/ ting.                                                                       /
;/ NOTE: This function replaces the Blitz command "WaitEvent".                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : IDCMP code                                                 /
;/                                                                             /
;/ See also:    intui_event                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l intui_WaitEvent {}
SHARED intuiengine
If intui_GetEvent{}=0
  Wait_ -1
  idcmp.l = intui_GetEvent {}
End If
Function Return \idcmp
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = intui_GetSigFlag {}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Return the signal flag of the event message port for use with Wait_().      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : signal flag                                                /
;/                                                                             /
;/ See also:    intui_event                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l intui_GetSigFlag {}
SHARED intuiengine,*intui_mp
If *intui_mp=0 Then *intui_mp = BlitzMsgPort
If *intui_mp
  intuiengine\signal = 1 LSL *intui_mp\mp_SigBit
End If
Function Return intuiengine\signal
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_code                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ Get the raw, untouched event code that is associated with the last event.   /
;/ NOTE: This macro replaces the Blitz Function EventCode.                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - code.l     : event code of the last event                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_code
intuiengine\code
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_gadgethit                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Return ID of last hit gadget or -1, if no gadget was hit.                   /
;/                                                                             /
;/ Result:                                                                     /
;/ gadID.l    : ID number of last gadget hit                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_gadgethit
intuiengine\gadid
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_qualifier                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Get the whole, untouched qualifier value of the last event.                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_qualifier
intuiengine\qual
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_shift                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_shift
(intuiengine\qual&(#IEQUALIFIER_LSHIFT|#IEQUALIFIER_RSHIFT))
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_alt                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_alt
(intuiengine\qual&(#IEQUALIFIER_LALT|#IEQUALIFIER_RALT))
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_ctrl                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_ctrl
(intuiengine\qual&(#IEQUALIFIER_CONTROL))
End Macro
 

Macro event_iaddr
(intuiengine\iaddr)
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_idcmp                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ Return the IDCMP code of the last event.                                    /
;/ See RKM/intuition or inlcudes/intuition.h for possible IDCMP codes.         /
;/                                                                             /
;/ Result:                                                                     /
;/ idcmp.l    : IDCMP code                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_idcmp
intuiengine\idcmp
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_mousex                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Return the x position of the mouse pointer relative to the events windows:: /
;/  left/top edge.                                                             /
;/ NOTE: x can be negative.                                                    /
;/                                                                             /
;/ See also:    !event_mousey                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_mousex
intuiengine\mx
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_mousey                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Return the y position of the mouse pointer relative to the events windows:: /
;/  left/top edge.                                                             /
;/ NOTE: y can be negative.                                                    /
;/                                                                             /
;/ See also:    !event_mousex                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_mousey
intuiengine\my
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_mx                                                           /
;/                                                                             /
;/ Description:                                                                /
;/ Identical to !event_mousex.                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_mx
intuiengine\mx
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_my                                                           /
;/                                                                             /
;/ Description:                                                                /
;/ Identical to !event_mousey.                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_my
intuiengine\my
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_smx                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ Return the mouse x coordinate relative to the screen.                       /
;/                                                                             /
;/ See also:    !event_smy                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_smx
intuiengine\smx
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_smy                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ Return the mouse y coordinate relative to the screen.                       /
;/                                                                             /
;/ See also:    !event_smx                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_smy
intuiengine\smy
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_mdx                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ Return the mouse delta-x from the last mouse pointer positon.               /
;/ NOTE: Makes sense only after #IDCMP_MOUSEMOVE.                              /
;/                                                                             /
;/ - mdx.l   : mouse pointer delta x in pixel                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_mdx
intuiengine\mdx
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_mdy                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ Return the mouse delta-y from the last mouse pointer positon.               /
;/ NOTE: Makes sense only after #IDCMP_MOUSEMOVE.                              /
;/                                                                             /
;/ - mdy.l   : mouse pointer delta y in pixel                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_mdy
intuiengine\mdy
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_seconds                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ Return the seconds of the absolute system time when the event occured.      /
;/                                                                             /
;/ See also:    !event_micros                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_seconds
intuiengine\seconds
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_micros                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Return the micro seconds of absolute system time when the last event occu:: /
;/ red.                                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ micros.l    : micro seconds                                                 /
;/                                                                             /
;/ See also:    !event_seconds                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_micros
intuiengine\micros
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_string                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Return the string that is associated with the last event.                   /
;/ This make only sense for IDCMP_GADGETUP, if the gadget was a string gadget. /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_string
intuiengine\string
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_dblclick                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Check if the last mouse button event matches the doubleclick time (as set:: /
;/  in AmigaOS preferences).                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.l    : -1 if the last click was a double click, 0 otherwise          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_dblclick
(DoubleClick_(intuiengine\last_seconds,intuiengine\last_micros,intuiengine\seconds,intuiengine\micros)><0)
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_trplclick                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Check for tripple click of the mouse button.                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_trplclick
((DoubleClick_(intuiengine\last_seconds,intuiengine\last_micros,intuiengine\seconds,intuiengine\micros) & DoubleClick_(intuiengine\last2_seconds,intuiengine\last2_micros,intuiengine\last_seconds,intuiengine\last_micros))><0)
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_signal                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_signal
intuiengine\signal
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_menuhit                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ Return the menu titel that was hit after the last #IDCMP_MENUPICK event.    /
;/                                                                             /
;/ Result:                                                                     /
;/ - mtitle.l   : menu title number                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_menuhit
intuiengine\menu_title
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_itemhit                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ Return the menu item that is associated with the last #IDCMP_MENUPICK eve:: /
;/ nt.                                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ mitem.l    : menu item number                                               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_itemhit
intuiengine\menu_item
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_subhit                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Return the sub menu item (if there is any) hit after the last IDCMP_MENUP:: /
;/ ICK event.                                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_subhit
intuiengine\menu_sub
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !intui_menuopen                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Check if the menu is currently open.                                        /
;/ NOTE: This is not an !event_xxx type macro, because it is not called afte:: /
;/ r you received an event. You can check any time if the menu is open.        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro intui_menuopen
intuiengine\menu_open
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_mb                                                           /
;/                                                                             /
;/ Description:                                                                /
;/ Get the mouse button number of the last event associated with the mouse.    /
;/ This can be                                                                 /
;/ 0: no mouse button                                                          /
;/ 1: left mouse button                                                        /
;/ 2: right mouse button                                                       /
;/ 3: middle mouse button                                                      /
;/ ...                                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ mb.l    : number of mouse button                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_mb
intuiengine\mb
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_release                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ The event is "release", e.g. mouse button or key.                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_release
(intuiengine\code&#IECODE_UP_PREFIX><0)
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_click                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ Check if the last event did "click", such as a mousebutton.                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ    : -1 if a click occured, 0 otherwise                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_click
(intuiengine\code&#IECODE_UP_PREFIX =0)
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_mclick                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_mclick
(intuiengine\code&#IECODE_UP_PREFIX =0)
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_keydown                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ Check if a key was hold down while the event occured.                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.l    : -1, if key was hold down, 0 otherwise                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_keydown
(intuiengine\code&#IECODE_UP_PREFIX =0)
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_mbdown                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Check if a mouse button was hold down while the last event occured.         /
;/                                                                             /
;/ Result:                                                                     /
;/ succ.l    : -1 if a mouse button is hold, 0 otherwise                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_mbdown
intuiengine\mpress
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !intui_mpress                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Check if any mouse button is currently pressed.                             /
;/ NOTE: This is not an !event_xxx type macro, because it is not called afte:: /
;/ r you received an event. You can check if a mouse button is pressed any t:: /
;/ ime. This is ideal for games.                                               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro intui_mpress
intuiengine\mpress
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !intui_joyb                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ Return the currently pressed mouse button(s).                               /
;/ NOTE: This is not an !event_xxx type macro, because it is not called afte:: /
;/ r you received an event. You can check if a mouse button is pressed any t:: /
;/ ime. This is ideal for games.                                               /
;/ NOTE: This replaces te Blitz function Joyb()                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro intui_joyb
intuiengine\mpress_id[((`1)-1)&$3]
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !intui_rawstatus                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Return the status of any raw key.                                           /
;/ NOTE: This is not an !event_xxx type macro, because it is not called afte:: /
;/ r you received an event. You can check if a certain key is pressed any ti:: /
;/ me. This is ideal for games.                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro intui_rawstatus
intui_rawkey((`1)&$7F)
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_rawkey                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Get the raw key number associated with the event.                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_rawkey
intuiengine\rawkey_
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_vanillakey                                                   /
;/                                                                             /
;/ Description:                                                                /
;/ Get the vanilla key code (after raw key is mapped through you keyboard se:: /
;/ ttings).                                                                    /
;/ NOTE: This works also if you received a raw key message. There is no need:: /
;/  to receive IDCMP_VANILLAKEY messages.                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_vanillakey
intuiengine\vanillakey_
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = intui_GetEventWin {}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Return the Blitz Window Object ID of the events window.                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : Window Object ID                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l intui_GetEventWin{}
SHARED intuiengine
If \last_winptr >< \winptr
  \winid = -1
  succ.l = False
  n.l = 0
  While succ=False AND n<Maximum Window
    If \winptr = Peek.l(Addr Window(n)) Then \winid = n:\last_winptr = \winptr:succ=True
    n+1
  Wend
  If succ=False Then error {"No event window found !"}
End If
Function Return \winid
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !event_winptr                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Get the pointer to the window structure of the last event.                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro event_winptr
intuiengine\win
End Macro


CNIF #__include=0
XINCLUDE "v43+.definitions.ab3"
;#NG_HIGHLABEL     = $0020              ; Highlight the label
;#NG_DISABLE       = $0040              ; Disable gadget
#NG_IMMEDIATE     = $0080              ; Activate on gadget down
;#NG_BOOLVALUE     = $0100              ; Checkbox on
#NG_SCALED        = $0200              ; Scale arrows for slider
;#NG_VERTICAL      = $0400              ; Make slider/scroller vertical
#NG_ARROWS        = $0800              ; Give slider/scroller arrows
;#NG_TTOGGLE       = $2000              ; toggle it !


;#IDCMP_SIZEVERIFY     = $00000001

;#IDCMP_NEWSIZE        = $00000002
;#IDCMP_REFRESHWINDOW  = $00000004
;#IDCMP_MOUSEBUTTONS   = $00000008
;#IDCMP_MOUSEMOVE      = $00000010
;#IDCMP_GADGETDOWN     = $00000020
;#IDCMP_GADGETUP       = $00000040
;#IDCMP_REQSET         = $00000080
;#IDCMP_MENUPICK       = $00000100
;#IDCMP_CLOSEWINDOW    = $00000200
;#IDCMP_RAWKEY         = $00000400
;#IDCMP_REQVERIFY      = $00000800
;#IDCMP_REQCLEAR       = $00001000
;#IDCMP_MENUVERIFY     = $00002000
;#IDCMP_NEWPREFS       = $00004000
;#IDCMP_DISKINSERTED   = $00008000
;#IDCMP_DISKREMOVED    = $00010000
;#IDCMP_WBENCHMESSAGE  = $00020000     ; ** RESERVED **
;#IDCMP_ACTIVEWINDOW   = $00040000
;#IDCMP_INACTIVEWINDOW = $00080000
;#IDCMP_DELTAMOVE      = $00100000
;#IDCMP_VANILLAKEY     = $00200000
;#IDCMP_INTUITICKS     = $00400000
;#IDCMP_IDCMPUPDATE    = $00800000     ; V36
;#IDCMP_MENUHELP       = $01000000     ; V36
;#IDCMP_CHANGEWINDOW   = $02000000     ; V36
;#IDCMP_GADGETHELP     = $04000000     ; V39
;#IDCMP_LONELYMESSAGE  = $80000000     ; ** RESERVED **

#ID_SIZEVERIFY     = 1
#ID_NEWSIZE        = 2
#ID_REFRESHWINDOW  = 3
#ID_MOUSEBUTTONS   = 4
#ID_MOUSEMOVE      = 5
#ID_GADGETDOWN     = 6
#ID_GADGETUP       = 7
#ID_REQSET         = 8
#ID_MENUPICK       = 9
#ID_CLOSEWINDOW    = 10
#ID_RAWKEY         = 11
#ID_REQVERIFY      = 12
#ID_REQCLEAR       = 13
#ID_MENUVERIFY     = 14
#ID_NEWPREFS       = 15
#ID_DISKINSERTED   = 16
#ID_DISKREMOVED    = 17
#ID_WBENCHMESSAGE  = 18     ; ** RESERVED **
#ID_ACTIVEWINDOW   = 19
#ID_INACTIVEWINDOW = 20
#ID_DELTAMOVE      = 21
#ID_VANILLAKEY     = 22
#ID_INTUITICKS     = 23
#ID_IDCMPUPDATE    = 24     ; V36
#ID_MENUHELP       = 25     ; V36
#ID_CHANGEWINDOW   = 26     ; V36
#ID_GADGETHELP     = 27     ; V39
#ID_LONELYMESSAGE  = 28     ; ** RESERVED **
#ID_EXTENDEDMOUSE  = 29
Dim name.s(32)
Dim idcmp.l(32)
name.s(0)           = "???"
name.s(#ID_SIZEVERIFY )           = "SIZEVERIFY"
name.s(#ID_NEWSIZE )              = "NEWSIZE"
name.s(#ID_REFRESHWINDOW)         = "REFRESHWINDOW"
name.s(#ID_MOUSEBUTTONS)          = "MOUSEBUTTONS"
name.s(#ID_MOUSEMOVE  )           = "MOUSEMOVE"
name.s(#ID_GADGETDOWN   )         = "GADGETDOWN"
name.s(#ID_GADGETUP  )            = "GADGETUP"
name.s(#ID_REQSET    )            = "REQSET"
name.s(#ID_MENUPICK     )         = "MENUPICK"
name.s(#ID_CLOSEWINDOW   )        = "CLOSEWIN"
name.s(#ID_RAWKEY   )             = "RAWKEY   "
name.s(#ID_REQVERIFY)             = "REQVERIFY"
name.s(#ID_REQCLEAR )             = "REQCLEAR "
name.s(#ID_MENUVERIFY)            = "MENUVERIFY"
name.s(#ID_NEWPREFS)              = "NEWPREFS"
name.s(#ID_DISKINSERTED  )        = "DISKINSERTED  "
name.s(#ID_DISKREMOVED)           = "DISKREMOVED"
name.s(#ID_WBENCHMESSAGE)         = "WBENCHMESSAGE"
name.s(#ID_ACTIVEWINDOW)          = "ACTIVEWINDOW"
name.s(#ID_INACTIVEWINDOW)        = "INACTIVEWINDOW"
name.s(#ID_DELTAMOVE)             = "DELTAMOVE"
name.s(#ID_VANILLAKEY )           = "VANILLAKEY "
name.s(#ID_INTUITICKS)            = "INTUITICKS"
name.s(#ID_IDCMPUPDATE)           = "IDCMPUPDATE"
name.s(#ID_MENUHELP)              = "MENUHELP"
name.s(#ID_CHANGEWINDOW)          = "CHANGEWINDOW"
name.s(#ID_GADGETHELP   )         = "GADGETHELP   "
name.s(#ID_LONELYMESSAGE)         = "LONELYMESSAGE"
name.s(#ID_EXTENDEDMOUSE)         = "EXTENDEDMOUSE"

idcmp.l(#ID_SIZEVERIFY )          = #IDCMP_SIZEVERIFY
idcmp.l(#ID_NEWSIZE )             = #IDCMP_NEWSIZE
idcmp.l(#ID_REFRESHWINDOW)        = #IDCMP_REFRESHWINDOW
idcmp.l(#ID_MOUSEBUTTONS)         = #IDCMP_MOUSEBUTTONS
idcmp.l(#ID_MOUSEMOVE  )          = #IDCMP_MOUSEMOVE
idcmp.l(#ID_GADGETDOWN   )        = #IDCMP_GADGETDOWN
idcmp.l(#ID_GADGETUP  )           = #IDCMP_GADGETUP
idcmp.l(#ID_REQSET    )           = #IDCMP_REQSET
idcmp.l(#ID_MENUPICK     )        = #IDCMP_MENUPICK
idcmp.l(#ID_CLOSEWINDOW   )       = #IDCMP_CLOSEWINDOW
idcmp.l(#ID_RAWKEY   )            = #IDCMP_RAWKEY
idcmp.l(#ID_REQVERIFY)            = #IDCMP_REQVERIFY
idcmp.l(#ID_REQCLEAR )            = #IDCMP_REQCLEAR
idcmp.l(#ID_MENUVERIFY)           = #IDCMP_MENUVERIFY
idcmp.l(#ID_NEWPREFS)             = #IDCMP_NEWPREFS
idcmp.l(#ID_DISKINSERTED  )       = #IDCMP_DISKINSERTED
idcmp.l(#ID_DISKREMOVED)          = #IDCMP_DISKREMOVED
idcmp.l(#ID_WBENCHMESSAGE)        = #IDCMP_WBENCHMESSAGE
idcmp.l(#ID_ACTIVEWINDOW)         = #IDCMP_ACTIVEWINDOW
idcmp.l(#ID_INACTIVEWINDOW)       = #IDCMP_INACTIVEWINDOW
idcmp.l(#ID_DELTAMOVE)            = #IDCMP_DELTAMOVE
idcmp.l(#ID_VANILLAKEY )          = #IDCMP_VANILLAKEY
idcmp.l(#ID_INTUITICKS)           = #IDCMP_INTUITICKS
idcmp.l(#ID_IDCMPUPDATE)          = #IDCMP_IDCMPUPDATE
idcmp.l(#ID_MENUHELP)             = #IDCMP_MENUHELP
idcmp.l(#ID_CHANGEWINDOW)         = #IDCMP_CHANGEWINDOW
idcmp.l(#ID_GADGETHELP   )        = #IDCMP_GADGETHELP
idcmp.l(#ID_LONELYMESSAGE)        = #IDCMP_LONELYMESSAGE
idcmp.l(#ID_EXTENDEDMOUSE)        = #IDCMP_EXTENDEDMOUSE
NEWTYPE.lvitem
flags.w
text.s
End NEWTYPE

Dim List testlist.lvitem(20)
For n.l=0 To 20
If AddItem (testlist()) Then testlist()\text="TestItem "+Str$(n)
Next

WbToScreen 0
DefaultIDCMP $FFFFFFFF  - #IDCMP_VANILLAKEY  - #IDCMP_INTUITICKS ;- #IDCMP_MOUSEMOVE

GTButton   0,0,10,160,200,20,"TEST",#GFLG_EXTENDED|#NG_IMMEDIATE
GTListView 0,1,10,10,200,100,"",0,testlist()
GTSlider   0,2,10,200,200,20,"",#NG_IMMEDIATE,1,60,50
GTScroller 0,3,10,220,200,20,"",#NG_IMMEDIATE|#NG_ARROWS|#NG_SCALED,50,100,1
GTString   0,4,10,240,200,20,"",$0,50,"Test"
GTInteger  0,5,10,260,200,20,"",$0,123

Window 0,0,0,320,340,$FF|#HC_GADGETHELP|#WFLG_SIMPLE_REFRESH,"IDCMP Test",1,0
WJam 1
AttachGTList 0,0
GTMenuTitle 0,0,"Title 0"
GTMenuItem  0,0,0,0,"Item 0","q"
GTMenuItem  0,0,0,1,"Item 1"
GTMenuTitle 0,1,"Title 1"
GTMenuItem  0,0,1,0,"Item 0"
GTMenuItem  0,0,1,1,"Item 1"
GTSubItem   0,0,1,1,0,"SubItem 0"
GTSubItem   0,0,1,1,1,"SubItem 1"
GTSubItem   0,0,1,1,2,"SubItem 2"

GTSetMenu 0
intui_FlushEvents{}
xlog_SetFile{"CON:"}
xlog {"Output:"}
evsignal.l = intui_GetSigFlag {}
breakme.l = False
While breakme=False
  signals.l = Wait_(-1)
  If (signals & evsignal)
    While intui_GetEvent{}><0
      Select !event_idcmp
        Case #IDCMP_CLOSEWINDOW
          breakme = True

        Case #IDCMP_MENUPICK
          xlog {"IDCMP_MENUPICK: menuhit="+Str$(!event_menuhit)+" itemhit="+Str$(!event_itemhit)+" subhit="+Str$(!event_subhit)+" code="+Str$(!event_code)}
          m.l+1

        Case #IDCMP_GADGETUP
          xlog {"IDCMP_GADGETUP: gadgethit="+Str$(!event_gadgethit)+" code="+Str$(!event_code)+" string="+!event_string}
          m+1

        Case #IDCMP_MOUSEMOVE
          If !event_gadgethit>=0
            xlog {"IDCMP_MOUSEMOVE: gadgethit="+Str$(!event_gadgethit)+" code="+Str$(!event_code)}
            m+1
          End If

        Case #IDCMP_MOUSEBUTTONS
          xlog {"IDCMP_MOUSEUBUTTONS: mb="+Str$(!event_mb)+" mpress="+Str$(!intui_mpress)+" dblclick="+Str$(!event_dblclick)}
          m+1

        Case #IDCMP_RAWKEY
          xlog {"IDCMP_RAWKEY: rawkey="+Str$(!event_rawkey)+" vanillakey="+Str$(!event_vanillakey)+" keydown="+Str$(!event_keydown)}
          m+1

        Case #IDCMP_EXTENDEDMOUSE
          If (!event_code = #IMSGCODE_INTUIWHEELDATA)
            *wd.IntuiWheelData  = !event_iaddr
            xlog { "IDCMP_EXTENDEDMOUSE: Wheel Code, dx="+Str$(*wd\WheelX)+" dy="+Str$(*wd\WheelY)+" code="+Str$(!event_code)+" qualifier="+Hex$(!event_qualifier)}
          Else
            xlog { "IDCMP_EXTENDEDMOUSE: Unknown Code, code="+Str$(!event_code)+" qualifier="+Hex$(!event_qualifier)}
          End If

        Default
          id.l = 0
          For n.l = 0 To 31
            If (idcmp(n) = !event_idcmp) Then id.l = n
          Next
          xlog { "IDCMP_"+name.s(id)+": gadgethit="+Str$(!event_gadgethit)+" code="+Str$(!event_code)+" qualifier="+Hex$(!event_qualifier)}

      End Select
    Wend
  EndIf
Wend
End

CEND

