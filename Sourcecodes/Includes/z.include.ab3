; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 8192
; MakeSmallest    = 0
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 426
; CursorColumn    = 74
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
; z.include.ab2 automatically generated by FD2Include (Thilo Koehler)

CNIF #__include=0
optimize 7
Syntax 2
WBStartup
CEND

XINCLUDE "error.include.bb2"

; Library offsets:
#_LVO_Z_LIBBASE_ZlibVersion          = -30
#_LVO_Z_LIBBASE_DeflateInit          = -36
#_LVO_Z_LIBBASE_Deflate              = -42
#_LVO_Z_LIBBASE_DeflateEnd           = -48
#_LVO_Z_LIBBASE_InflateInit          = -54
#_LVO_Z_LIBBASE_Inflate              = -60
#_LVO_Z_LIBBASE_InflateEnd           = -66
#_LVO_Z_LIBBASE_DeflateInit2         = -72
#_LVO_Z_LIBBASE_DeflateSetDictionary = -78
#_LVO_Z_LIBBASE_DeflateCopy          = -84
#_LVO_Z_LIBBASE_DeflateReset         = -90
#_LVO_Z_LIBBASE_DeflateParams        = -96
#_LVO_Z_LIBBASE_InflateInit2         = -102
#_LVO_Z_LIBBASE_InflateSetDictionary = -108
#_LVO_Z_LIBBASE_InflateReset         = -114
#_LVO_Z_LIBBASE_Compress             = -120
#_LVO_Z_LIBBASE_Uncompress           = -126
#_LVO_Z_LIBBASE_UAdler32             = -132
#_LVO_Z_LIBBASE_UCRC32               = -138
#_LVO_Z_LIBBASE_InflateSync          = -144

SHARED *_z_libBase.Library

; Helper Macros:
Macro __z_libBase_SaveRegs
MOVE.l a4,-(a7) : MOVE.l a5,-(a7) : MOVE.l a6,-(a7) : MOVE.l d7,-(a7)
End Macro

Macro __z_libBase_RestoreRegs
MOVE.l (a7)+,d7 : MOVE.l (a7)+,a6 : MOVE.l (a7)+,a5 : MOVE.l (a7)+,a4
End Macro


; Wrapper Macros:
Macro ZlibVersion;{ret.l}
Peek.s (*_z_libBase + #_LVO_Z_LIBBASE_ZlibVersion)
End Macro

Macro z_DeflateInit;{ret.l,strm,level}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_DeflateInit(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_Deflate;{ret.l,strm,flush}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_Deflate(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_DeflateEnd;{ret.l,strm}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_DeflateEnd(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_InflateInit;{ret.l,strm}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_InflateInit(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_Inflate;{ret.l,strm,flush}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_Inflate(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_InflateEnd;{ret.l,strm}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_InflateEnd(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_DeflateInit2;{ret.l,strm,level,method,windowBits,memLevel,strategy}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg d1,`4
GetReg d2,`5
GetReg d3,`6
GetReg d4,`7
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_DeflateInit2(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_DeflateSetDictionary;{ret.l,strm,dictionary,dictLength}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg d0,`4
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_DeflateSetDictionary(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_DeflateCopy;{ret.l,dest,source}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_DeflateCopy(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_DeflateReset;{ret.l,strm}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_DeflateReset(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_DeflateParams;{ret.l,strm,level,strategy}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg d1,`4
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_DeflateParams(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_InflateInit2;{ret.l,strm,windowBits}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_InflateInit2(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_InflateSetDictionary;{ret.l,strm,dictionary,dictLength}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg d0,`4
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_InflateSetDictionary(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_InflateReset;{ret.l,strm}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_InflateReset(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_Compress;{ret.l,dest,destLen,source,sourceLen}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg a2,`4
GetReg d0,`5
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_Compress(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_Uncompress;{ret.l,dest,destLen,source,sourceLen}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg a2,`4
GetReg d0,`5
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_Uncompress(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_UAdler32;{ret.l,adler,buf,len}
!__z_libBase_SaveRegs
GetReg d0,`2
GetReg a0,`3
GetReg d1,`4
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_UAdler32(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_UCRC32;{ret.l,crc,buf,len}
!__z_libBase_SaveRegs
GetReg d0,`2
GetReg a0,`3
GetReg d1,`4
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_UCRC32(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro

Macro z_InflateSync;{ret.l,strm}
!__z_libBase_SaveRegs
GetReg a0,`2
GetReg a6,*_z_libBase
JSR _LVO_Z_LIBBASE_InflateSync(a6)
!__z_libBase_RestoreRegs
`1 = PutD0
End Macro


; Open/Close Library:
Function.l z_OpenLib{@minVersion.l}
If (*_z_libBase)
  If (minVersion<=*_z_libBase\lib_Version) Then Function Return *_z_libBase
  CloseLibrary_ *_z_libBase : *_z_libBase = 0
End If
If minVersion<0 Then minVersion = 0
*_z_libBase = OpenLibrary_ ("z.library",minVersion)
If *_z_libBase
  ; (!) Do some other init stuff here...
Else
  If (minVersion>0)
    error{"Unable to open z.library (v"+Str$(minVersion)+"+)!"}
  Else
    error{"Unable to open z.library!"}
  End If
End If
Function Return *_z_libBase
End Function

Statement z_CloseLib{}
If *_z_libBase
  ; (!) Do some freeing stuff here that you inited in _z_libBase_Init{}...
  CloseLibrary_ *_z_libBase : *_z_libBase = 0
End If
End Statement
!autoexit{z_CloseLib}


; Wrapper Functions:
Function.s ZlibVersion{}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  Function Return !ZlibVersion
End If
Function Return "0"
End Function

Function.l z_DeflateInit{_strm.l,_level.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_DeflateInit{result.l,_strm,_level}
End If
Function Return result
End Function

Function.l z_Deflate{_strm.l,_flush.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_Deflate{result.l,_strm,_flush}
End If
Function Return result
End Function

Function.l z_DeflateEnd{_strm.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_DeflateEnd{result.l,_strm}
End If
Function Return result
End Function

Function.l z_InflateInit{_strm.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_InflateInit{result.l,_strm}
End If
Function Return result
End Function

Function.l z_Inflate{_strm.l,_flush.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_Inflate{result.l,_strm,_flush}
End If
Function Return result
End Function

Function.l z_InflateEnd{_strm.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_InflateEnd{result.l,_strm}
End If
Function Return result
End Function

Function.l z_DeflateInit2{_strm.l,_level.l,_method.l,_windowBits.l,_memLevel.l,_strategy.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_DeflateInit2{result.l,_strm,_level,_method,_windowBits,_memLevel,_strategy}
End If
Function Return result
End Function

Function.l z_DeflateSetDictionary{_strm.l,_dictionary.l,_dictLength.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_DeflateSetDictionary{result.l,_strm,_dictionary,_dictLength}
End If
Function Return result
End Function

Function.l z_DeflateCopy{_dest.l,_source.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_DeflateCopy{result.l,_dest,_source}
End If
Function Return result
End Function

Function.l z_DeflateReset{_strm.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_DeflateReset{result.l,_strm}
End If
Function Return result
End Function

Function.l z_DeflateParams{_strm.l,_level.l,_strategy.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_DeflateParams{result.l,_strm,_level,_strategy}
End If
Function Return result
End Function

Function.l z_InflateInit2{_strm.l,_windowBits.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_InflateInit2{result.l,_strm,_windowBits}
End If
Function Return result
End Function

Function.l z_InflateSetDictionary{_strm.l,_dictionary.l,_dictLength.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_InflateSetDictionary{result.l,_strm,_dictionary,_dictLength}
End If
Function Return result
End Function

Function.l z_InflateReset{_strm.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_InflateReset{result.l,_strm}
End If
Function Return result
End Function

Function.l z_Compress{_dest.l,_destLen.l,_source.l,_sourceLen.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_Compress{result.l,_dest,_destLen,_source,_sourceLen}
End If
Function Return result
End Function

Function.l z_Uncompress{_dest.l,_destLen.l,_source.l,_sourceLen.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_Uncompress{result.l,_dest,_destLen,_source,_sourceLen}
End If
Function Return result
End Function

Function.l z_UAdler32{_adler.l,_buf.l,_len.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_UAdler32{result.l,_adler,_buf,_len}
End If
Function Return result
End Function

Function.l z_UCRC32{_crc.l,_buf.l,_len.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_UCRC32{result.l,_crc,_buf,_len}
End If
Function Return result
End Function

Function.l z_InflateSync{_strm.l}
If (z_OpenLib{}) ; (!) put your min version here if needed!
  !z_InflateSync{result.l,_strm}
End If
Function Return result
End Function


CNIF #__include=0

test.l = 1234
uncompressedP.l = AllocMem(1024,#MEMF_ANY)
compressedP.l   = AllocMem(1024,#MEMF_ANY)
uncompressed_size.l = 4
compressed_size.l   = 1024

err.l = z_Compress{compressedP,&compressed_size.l,&test,uncompressed_size}
NPrint "Compressed data err=",err," compressed: ",compressed_size
If err=0
  err.l = z_Uncompress{uncompressedP,&uncompressed_size.l,compressedP,compressed_size}
  NPrint "Uncompressed data err=",err
  NPrint "Recovered data: ",Peek.l(uncompressedP)
Else
  NPrint "Error while compressing..."
End If
Delay_ 1
NPrint "done."


End

CEND


