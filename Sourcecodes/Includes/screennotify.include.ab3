; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "TuiDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 3699
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; Max ChunkyBuffer= 2
; /XTRA
; screennotify.include.bb2 generated by FD2Include (Thilo Koehler)

CNIF #__include=0
OPTIMIZE 5
SYNTAX 2
CEND

XINCLUDE "error.include.ab3"

;/* Message sent To clients */
NEWTYPE.ScreenNotifyMessage
 snm_Message.Message ;  Message head
 snm_Type.l          ;   /* READ ONLY!! */
 snm_Value.l         ;   /* READ ONLY!! */
End NEWTYPE


#SCREENNOTIFY_TYPE_CLOSESCREEN   =0 ;/* CloseScreen() called, snm_Value contains */
                                    ;      /* pointer to Screen structure              */
#SCREENNOTIFY_TYPE_PUBLICSCREEN  =1 ;/* PubScreenStatus() called to make screen  */
                                    ;      /* public, snm_Value contains pointer to    */
                                    ;      /* PubScreenNode structure                  */
#SCREENNOTIFY_TYPE_PRIVATESCREEN =2 ;/* PubScreenStatus() called to make screen  */
                                    ;      /* private, snm_Value contains pointer to   */
                                    ;      /* PubScreenNode structure                  */
#SCREENNOTIFY_TYPE_WORKBENCH     =3 ;/* snm_Value == FALSE (0): CloseWorkBench() */
                                    ;      /* called, please close windows on WB       */
                                    ;      /* snm_Value == TRUE  (1): OpenWorkBench()  */
                                    ;      /* called, windows can be opened again      */


; Library offsets:
#_LVO_SCREENNOTIFYBASE_AddCloseScreenClient = -30
#_LVO_SCREENNOTIFYBASE_RemCloseScreenClient = -36
#_LVO_SCREENNOTIFYBASE_AddPubScreenClient   = -42
#_LVO_SCREENNOTIFYBASE_RemPubScreenClient   = -48
#_LVO_SCREENNOTIFYBASE_AddWorkbenchClient   = -54
#_LVO_SCREENNOTIFYBASE_RemWorkbenchClient   = -60

SHARED *_ScreenNotifyBase.Library

; Wrapper Macros:
Macro screennotify_AddCloseScreenClient ; {ret.l,screen,port,pri}
GetReg a0,`2
GetReg a1,`3
GetReg d0,`4
MOVE.l a6,-(a7)
GetReg a6,*_ScreenNotifyBase
JSR _LVO_SCREENNOTIFYBASE_AddCloseScreenClient(a6)
MOVE.l (a7)+,a6
`1 = PutRegD0
End Macro

Macro screennotify_RemCloseScreenClient ; {ret.l,handle}
GetReg a0,`2
MOVE.l a6,-(a7)
GetReg a6,*_ScreenNotifyBase
JSR _LVO_SCREENNOTIFYBASE_RemCloseScreenClient(a6)
MOVE.l (a7)+,a6
`1 = PutRegD0
End Macro

Macro screennotify_AddPubScreenClient ; {ret.l,port,pri}
GetReg a0,`2
GetReg d0,`3
MOVE.l a6,-(a7)
GetReg a6,*_ScreenNotifyBase
JSR _LVO_SCREENNOTIFYBASE_AddPubScreenClient(a6)
MOVE.l (a7)+,a6
`1 = PutRegD0
End Macro

Macro screennotify_RemPubScreenClient ; {ret.l,handle}
GetReg a0,`2
MOVE.l a6,-(a7)
GetReg a6,*_ScreenNotifyBase
JSR _LVO_SCREENNOTIFYBASE_RemPubScreenClient(a6)
MOVE.l (a7)+,a6
`1 = PutRegD0
End Macro

Macro screennotify_AddWorkbenchClient ; {ret.l,port,pri}
GetReg a0,`2
GetReg d0,`3
MOVE.l a6,-(a7)
GetReg a6,*_ScreenNotifyBase
JSR _LVO_SCREENNOTIFYBASE_AddWorkbenchClient(a6)
MOVE.l (a7)+,a6
`1 = PutRegD0
End Macro

Macro screennotify_RemWorkbenchClient ; {ret.l,handle}
GetReg a0,`2
MOVE.l a6,-(a7)
GetReg a6,*_ScreenNotifyBase
JSR _LVO_SCREENNOTIFYBASE_RemWorkbenchClient(a6)
MOVE.l (a7)+,a6
`1 = PutRegD0
End Macro


Function.l _screennotify_InitLib {@minVersion.l}
If *_ScreenNotifyBase Then Function Return *_ScreenNotifyBase
If minVersion<0 Then minVersion = 0
*_ScreenNotifyBase = OpenLibrary_ ("screennotify.library",minVersion)
If *_ScreenNotifyBase
  ; ** Do some other init stuff here...
Else
  error {"Unable to open screennotify.library (v"+Str$(minVersion)+".0+)!"}
End If
Function Return *_ScreenNotifyBase
End Function


Statement _screennotify_FreeLib {}
If *_ScreenNotifyBase
  ; ** Do some freeing stuff here that you inited in _ScreenNotifyBase_Init{}...
  CloseLibrary_ *_ScreenNotifyBase : *_ScreenNotifyBase = 0
End If
End Statement
!autoexit {_screennotify_FreeLib}


Function.l screennotify_AddCloseScreenClient{*scr.Screen,*port.MsgPort}
If _screennotify_InitLib{}
  !screennotify_AddCloseScreenClient {snhandle.l,*scr,*port,1}
End If
Function Return snhandle
End Function


Function.l screennotify_RemCloseScreenClient{snhandle.l}
If _screennotify_InitLib{}
  !screennotify_RemCloseScreenClient {succ.l,snhandle.l}
End If
Function Return succ
End Function


Function.l screennotify_AddPubScreenClient{*port.MsgPort}
If _screennotify_InitLib{}
  !screennotify_AddPubScreenClient {snhandle.l,*port,1}
End If
Function Return snhandle
End Function


Function.l screennotify_RemPubScreenClient{snhandle.l}
If _screennotify_InitLib{}
  !screennotify_RemPubScreenClient {succ.l,snhandle.l}
End If
Function Return succ
End Function



Function.l screennotify_AddWorkbenchClient{*port.MsgPort}
If _screennotify_InitLib{}
  !screennotify_AddWorkbenchClient {snhandle.l,*port,1}
End If
Function Return snhandle
End Function


Function.l screennotify_RemWorkbenchClient{snhandle.l}
If _screennotify_InitLib{}
  !screennotify_RemWorkbenchClient {succ.l,snhandle.l}
End If
Function Return succ
End Function


CNIF #__include=0

; ** place your built-in demo here !

End

CEND
