; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "test"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 4096
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 188
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 1
; Max GadgetList  = 1
; Max Queue       = 1
; Max Screen      = 2
; Max Shape       = 1
; Max CopList     = 1
; Max Sprite      = 1
; Max Stencil     = 1
; Max Module      = 1
; Max Window      = 30
; Max Anim        = 1
; Max Sound       = 1
; Max Bank        = 1
; Max Buffer      = 1
; Max BitMap      = 1
; Max Slice       = 1
; Max Page        = 1
; Max Tape        = 1
; Max IntuiFont   = 12
; Max MedModule   = 1
; Max Palette     = 1
; Max MenuList    = 1
; Max BlitzFont   = 1
; Max GTList      = 30
; /XTRA
CNIF #__include=0
 OPTIMIZE 7
 SYNTAX 6
 WBStartup
CEND
XINCLUDE "error.include.ab3"

; Library offsets:
#AB3PFTLIB_VERSION = 1
#AB3PFTLIB_REVISION = 0
#_LVO_MOD = -6
#_LVO_BIAS = -30

#_LVO_AB3PFTLIB_pft_Create                 = #_LVO_BIAS + (#_LVO_MOD *  0)
#_LVO_AB3PFTLIB_pft_Free                   = #_LVO_BIAS + (#_LVO_MOD *  1)
#_LVO_AB3PFTLIB_pft_Clear                  = #_LVO_BIAS + (#_LVO_MOD *  2)
#_LVO_AB3PFTLIB_pft_GetNumItems            = #_LVO_BIAS + (#_LVO_MOD *  3)
#_LVO_AB3PFTLIB_pft_Expand                 = #_LVO_BIAS + (#_LVO_MOD *  4)
#_LVO_AB3PFTLIB_pft_GetLongestMatch        = #_LVO_BIAS + (#_LVO_MOD *  5)
#_LVO_AB3PFTLIB_pft_GetBinFromLongestMatch = #_LVO_BIAS + (#_LVO_MOD *  6)
#_LVO_AB3PFTLIB_pft_SetBin                 = #_LVO_BIAS + (#_LVO_MOD *  7)
#_LVO_AB3PFTLIB_pft_AppendBin              = #_LVO_BIAS + (#_LVO_MOD *  8)
#_LVO_AB3PFTLIB_pft_SetString              = #_LVO_BIAS + (#_LVO_MOD *  9)
#_LVO_AB3PFTLIB_pft_SetInt32               = #_LVO_BIAS + (#_LVO_MOD * 10)
#_LVO_AB3PFTLIB_pft_SetFloat32             = #_LVO_BIAS + (#_LVO_MOD * 11)
#_LVO_AB3PFTLIB_pft_Optimize               = #_LVO_BIAS + (#_LVO_MOD * 12)
#_LVO_AB3PFTLIB_pft_GetBin                 = #_LVO_BIAS + (#_LVO_MOD * 13)
#_LVO_AB3PFTLIB_pft_GetString              = #_LVO_BIAS + (#_LVO_MOD * 14)
#_LVO_AB3PFTLIB_pft_GetInt32               = #_LVO_BIAS + (#_LVO_MOD * 15)
#_LVO_AB3PFTLIB_pft_GetFloat32             = #_LVO_BIAS + (#_LVO_MOD * 16)
#_LVO_AB3PFTLIB_pft_Iterate                = #_LVO_BIAS + (#_LVO_MOD * 17)
#_LVO_AB3PFTLIB_pft_HasNext                = #_LVO_BIAS + (#_LVO_MOD * 18)
#_LVO_AB3PFTLIB_pft_GetIteratorKey         = #_LVO_BIAS + (#_LVO_MOD * 19)
#_LVO_AB3PFTLIB_pft_GetIteratorBin         = #_LVO_BIAS + (#_LVO_MOD * 20)
#_LVO_AB3PFTLIB_pft_RemItem                = #_LVO_BIAS + (#_LVO_MOD * 21)
#_LVO_AB3PFTLIB_pft_Save                   = #_LVO_BIAS + (#_LVO_MOD * 22)
#_LVO_AB3PFTLIB_pft_ExportASCII            = #_LVO_BIAS + (#_LVO_MOD * 23)
#_LVO_AB3PFTLIB_pft_Load                   = #_LVO_BIAS + (#_LVO_MOD * 24)
#_LVO_AB3PFTLIB_pft_FreeIterator           = #_LVO_BIAS + (#_LVO_MOD * 25)
#_LVO_AB3PFTLIB_pft_Sort                   = #_LVO_BIAS + (#_LVO_MOD * 26)
#_LVO_AB3PFTLIB_pft_Prefixes               = #_LVO_BIAS + (#_LVO_MOD * 27)
#_LVO_AB3PFTLIB_pft_CloneIterator          = #_LVO_BIAS + (#_LVO_MOD * 28)
#_LVO_AB3PFTLIB_pft_reserved               = #_LVO_BIAS + (#_LVO_MOD * 29)

SHARED *_AB3PftLibBase.Library
SHARED __AB3PftLibName.s
*_AB3PftLibBase = Null
__AB3PftLibName = "ab3pft.library"
__AB3PftLibBase.l = 0

; Helper Macros:
Macro __AB3PftLib_SaveRegs
MOVE.l a4,-(a7) : MOVE.l a5,-(a7) : MOVE.l a6,-(a7) : MOVE.l d7,-(a7)
End Macro

Macro __AB3PftLib_RestoreRegs
MOVE.l (a7)+,d7 : MOVE.l (a7)+,a6 : MOVE.l (a7)+,a5 : MOVE.l (a7)+,a4
End Macro

Macro __AB3PftLib_CallDirect
  !__AB3PftLib_SaveRegs
  MOVE.l __AB3PftLibBase@(A5),A6
  JSR _LVO_AB3PFTLIB_`1(A6)
  !__AB3PftLib_RestoreRegs
  AsmExit
End Macro

; Open/Close Library:
Function.l InitAB3PftLib{}
  SHARED __AB3PftLibBase

  If (*_AB3PftLibBase >< Null)
    If (#AB3PFTLIB_VERSION <= *_AB3PftLibBase\lib_Version) Then Function Return True
    CloseLibrary_ *_AB3PftLibBase
    *_AB3PftLibBase = Null
  End If

  *_AB3PftLibBase = OpenLibrary_ (&__AB3PftLibName, #AB3PFTLIB_VERSION)
  __AB3PftLibBase = *_AB3PftLibBase
  Function Return *_AB3PftLibBase >< Null

End Function

Macro InitAB3PftLib
If InitAB3PftLib{} = False
  __LibVersion.s = __AB3PftLibName + " V"+Str$(#AB3PFTLIB_VERSION) + "." + Str$(#AB3PFTLIB_REVISION)
  error{"\\__THIS_INCLUDE: Please install " +__LibVersion + " or higher!"}
  End
End If
End Macro

RunErrsOff

Statement DeinitAB3PftLib{}
  SHARED __AB3PftLibBase

  If *_AB3PftLibBase
    CloseLibrary_ *_AB3PftLibBase
    *_AB3PftLibBase = Null
    __AB3PftLibBase = 0
  End If

End Statement
!autoexit{DeinitAB3PftLib}
LastRunErrsMode

NEWTYPE.prefixtree
  _private_.l
End NEWTYPE

NEWTYPE.pftiterator
  _private_.l
End NEWTYPE

RunErrsOff
Function.prefixtree FAST pft_Create{} : !__AB3PftLib_CallDirect{pft_Create} : End Function
Statement FAST pft_Free{*pft.prefixtree} : !__AB3PftLib_CallDirect{pft_Free} : End Statement
Statement FAST pft_Clear{*pft.prefixtree} : !__AB3PftLib_CallDirect{pft_Clear} : End Statement
Function.l FAST pft_GetNumItems{*pft.prefixtree} : !__AB3PftLib_CallDirect{pft_GetNumItems} : End Function
Function.l FAST pft_Expand{*pft.prefixtree, minFree.l} : !__AB3PftLib_CallDirect{pft_Expand} : End Function
Function.l FAST pft_GetLongestMatch{*pft.prefixtree, *key.b, keyLen.l, *foundLen.l} : !__AB3PftLib_CallDirect{pft_GetLongestMatch} : End Function
Function.l FAST pft_GetBinFromLongestMatch{*pft.prefixtree, *key.b, *dataLen.l} : !__AB3PftLib_CallDirect{pft_GetBinFromLongestMatch} : End Function
Function.l FAST pft_SetBin{*pft.prefixtree, *key.b, keyLen.l, *dataP.b, dataLen.l} : !__AB3PftLib_CallDirect{pft_SetBin} : End Function
Function.l FAST pft_AppendBin{*pft.prefixtree, *key.b, keyLen.l, *dataP.b, dataLen.l} : !__AB3PftLib_CallDirect{pft_AppendBin} : End Function
Function.l FAST pftlib_SetString{*pft.prefixtree, *key.b, *string.b} : !__AB3PftLib_CallDirect{pft_SetString} : End Function
Function.l pft_SetString{*pft.prefixtree, key.s, string.s} : Function Return pftlib_SetString{*pft, &key, &string} : End Function
Function.l FAST pftlib_SetInt32{*pft.prefixtree, *key.b, value.l} : !__AB3PftLib_CallDirect{pft_SetInt32} : End Function
Function.l pft_SetInt32{*pft.prefixtree, key.s, value.l} : Function Return pftlib_SetInt32{*pft,  &key, value} : End Function
Function.l FAST pftlib_SetFloat32{*pft.prefixtree, *key.b, value.f} : !__AB3PftLib_CallDirect{pft_SetFloat32} : End Function
Function.l pft_SetFloat32{*pft.prefixtree, key.s, value.f} : Function Return pftlib_SetFloat32{*pft,  &key, value} : End Function
Function.prefixtree FAST pft_Optimize{*pft.prefixtree} : !__AB3PftLib_CallDirect{pft_Optimize} : End Function
Function.l FAST pft_GetBin{*pft.prefixtree, *key.b, keyLen.l, *dataLenP.l} : !__AB3PftLib_CallDirect{pft_GetBin} : End Function
Function.l FAST pftlib_GetString{*pft.prefixtree, *key.b} : !__AB3PftLib_CallDirect{pft_GetString} : End Function
Function.s pft_GetString{*pft.prefixtree, key.s}
  *strptr.b = pftlib_GetString{*pft, &key}
  If (*strptr) Then Function Return Peek.s(*strptr)
  Function Return ""
End Function
Function.l FAST pftlib_GetInt32{*pft.prefixtree, *key.b, default_.l} : !__AB3PftLib_CallDirect{pft_GetInt32} : End Function
Function.l pft_GetInt32{*pft.prefixtree, key.s, default_.l} : Function Return pftlib_GetInt32{*pft, &key, default_} : End Function
Function.f FAST pftlib_GetFloat32{*pft.prefixtree, *key.b, default_.f} : !__AB3PftLib_CallDirect{pft_GetFloat32} : End Function
Function.f pft_GetFloat32{*pft.prefixtree, key.s, default_.f} : Function Return pftlib_GetFloat32{*pft, &key, default_} : End Function
Function.pftiterator FAST pftlib_Iterate{*pft.prefixtree, *key.b, keyLen.l} : !__AB3PftLib_CallDirect{pft_Iterate} : End Function
Function.pftiterator pft_Iterate{*pft.prefixtree, @key.s} :
  *iter.pftiterator = pftlib_Iterate{*pft, &key, FLen(key)}
  Function Return *iter
End Function
Function.pftiterator FAST pftlib_Prefixes{*pft.prefixtree, *key.b, keyLen.l} : !__AB3PftLib_CallDirect{pft_Prefixes} : End Function
Function.pftiterator pft_Prefixes{*pft.prefixtree, key.s} :
  *iter.pftiterator = pftlib_Prefixes{*pft, &key, FLen(key)}
  Function Return *iter
End Function
Function.pftiterator FAST pft_CloneIterator{*iter.pftiterator} : !__AB3PftLib_CallDirect{pft_CloneIterator} : End Function
Function.l FAST pft_HasNext{*iter.pftiterator} : !__AB3PftLib_CallDirect{pft_HasNext} : End Function
Function.l FAST pftlib_GetIteratorKey{*iter.pftiterator, *keyLen.l} : !__AB3PftLib_CallDirect{pft_GetIteratorKey} : End Function
Function.s FAST pft_GetIteratorKey{*iter.pftiterator}
  keyLen.l = 0
  keyPtr.l = pftlib_GetIteratorKey{*iter, &keyLen}
  If keyPtr = Null Then Function Return ""
  Function Return Peeks$(keyPtr,keyLen)
End Function
Function.l FAST pftlib_GetIteratorBin{*iter.pftiterator, *dataLen.l} : !__AB3PftLib_CallDirect{pft_GetIteratorBin} : End Function
Function.s FAST pft_GetIteratorString{*iter.pftiterator}
  dataLen.l  = 0
  dataPtr.l  = pftlib_GetIteratorBin{*iter, &dataLen}
  If dataPtr = Null Then Function Return ""
  Function Return Peek.s(dataPtr)
End Function
Statement FAST pftlib_RemItem{*pft.prefixtree, *key.b, keyLen.l} : !__AB3PftLib_CallDirect{pft_RemItem} : End Statement
Statement pft_RemItem{*pft.prefixtree, key.s} : pftlib_RemItem{*pft, &key, FLen(key)} : End Statement
Function.l FAST pftlib_Save{*pft.prefixtree, *filename.b} : !__AB3PftLib_CallDirect{pft_Save} : End Function
Function.l pft_Save{*pft.prefixtree, filename.s} : Function Return pftlib_Save{*pft, &filename} : End Function
Function.l FAST pftlib_ExportASCII{*pft.prefixtree, *filename.b, *prefix.b} : !__AB3PftLib_CallDirect{pft_ExportASCII} : End Function
Function.l pft_ExportASCII{*pft.prefixtree, filename.s, prefix.s} : Function Return pftlib_ExportASCII{*pft, &filename,  &prefix} : End Function
Function.prefixtree  pftlib_Load{*filename.b} : !__AB3PftLib_CallDirect{pft_Load} : End Function
Function.prefixtree  pft_Load{filename.s} :
  *pft.prefixtree = pftlib_Load{&filename}
  Function Return *pft
End Function
Statement FAST pft_FreeIterator{*iter.pftiterator} : !__AB3PftLib_CallDirect{pft_FreeIterator} : End Statement
Statement FAST pft_Sort{*pft.prefixtree} : !__AB3PftLib_CallDirect{pft_Sort} : End Statement
Function.l pft_Exist{*pft.prefixtree, key.s}
  *data_.b = pft_GetBin{*pft, &key, FLen(key), &dataLen.l}
  Function Return (dataLen > 0)
End Function

LastRunErrsMode

!InitAB3PftLib

CNIF #__include=0
NPrint __AB3PftLibName, " is open! base = ", Hex$(__AB3PftLibBase)
NPrint "Create pft..."
*pft.prefixtree = pft_Create{}
NPrint "Allocated pft:",Hex$(*pft)
If *pft
  pft_SetString{*pft,"hello","world"}
  pft_SetString{*pft,"hi","thilo"}
  NPrint "Tree has ", pft_GetNumItems{*pft}, " items."
  NPrint "Got back: hello... ", pft_GetString{*pft,"hello"}
  NPrint "Got back: hi...", pft_GetString{*pft,"hi"}
  filename.s = "RAM:testpft.txt" : prefix.s = "h"
  pftlib_ExportASCII{*pft,filename,prefix}
  filename.s = "RAM:testpft.pft"
  pft_Save{*pft,filename}
End If
If *pft Then pft_Free{*pft}
End
CEND
