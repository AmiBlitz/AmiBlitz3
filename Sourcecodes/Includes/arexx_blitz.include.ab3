; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "c:"
; ExeFile         = "AREXXDemoS"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 72
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = "PATH=music:boehm_remote/sounds"
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: arexx.include                                                         /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 11.03.2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements: ARexx, Amiblitz2.4                                            /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Provide an AREXX port for your program.                                     /
;/                                                                             /
;/ Abstract:                                                                   /
;/ This include enables your program easily to use AREXX.                      /
;/ This inlcude uses some blitzlibs!                                           /
;/                                                                             /
;/ User Constants:                                                             /
;/ How many ARexx messages can be in queue at a time                           /
;/ #max_rexxmessages = 200                                                     /
;/                                                                             /
;/ Timeout in ticks (1/50 sec) for a reply                                     /
;/ #rexx_timeout      = 500                                                    /
;/                                                                             /
;/ Example:                                                                    /
;/ Send an AREXX message:                                                      /
;/ __________________________________________________________________ snip!    /
;/ XINCLUDE "arexx.include.ab3"                                                /
;/                                                                             /
;/ If arexx_OpenPort {"MyAREXXPort"}                                           /
;/   arexx_CreateMsg {"AMIGAAMP"} ; send to AmigaAmp AREXX port                /
;/   arexx_AddString {"PLAY"}                                                  /
;/   succ.l = arexx_SendMsg {}                                                 /
;/ End if                                                                      /
;/ End                                                                         /
;/ __________________________________________________________________ snip!    /
;/                                                                             /
;/ Open an AREXX port and wait for QUIT message:                               /
;/ __________________________________________________________________ snip!    /
;/ XINCLUDE "arexx.include.ab3"                                                /
;/                                                                             /
;/ If arexx_OpenPort {"MyAREXXPort"}                                           /
;/   While breakme.l=False                                                     /
;/     signals.l = Wait_(-1)                                                   /
;/     If arexx_GetMsg{}                                                       /
;/       NPrint "Got message from: ",arexx_GetSender {}                        /
;/       message.s = arexx_GetNextString {}                                    /
;/       Select UCase$(message.s)                                              /
;/         Case "QUIT"                                                         /
;/           breakme=True                                                      /
;/           Default                                                           /
;/             NPrint "Message: ",message.s                                    /
;/       End Select                                                            /
;/     End If                                                                  /
;/   Wend                                                                      /
;/ End If                                                                      /
;/ End                                                                         /
;/ __________________________________________________________________ snip!    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
SYNTAX 2
OPTIMIZE 7
CEND

CNIF @#max_rexxmessages=0     ; How many ARexx messages can be in queue
#max_rexxmessages = 200
CEND
CNIF @#rexx_timeout=0         ; Timeout in ticks for reply
#rexx_timeout      = 500
CEND

XINCLUDE "error.include.ab3"

NEWTYPE.rxoutmessage
ptr.l
port.s
timeout.l
End NEWTYPE

NEWTYPE.AREXX
is_open.w
*out_port.MsgPort
out_port_name.s
out_msg_body.s
out_msg_port.s
*out_msg.RexxMsg
out_retcode.l
out_retstring.s
*in_port.MsgPort
in_port_name.s
in_msg_body.s
in_msg_port.s
*in_msg.RexxMsg
End NEWTYPE

Dim List rxoutgoing.rxoutmessage(#max_rexxmessages-1)

DEFTYPE.AREXX AREXX
USEPATH AREXX

.AREXX
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = _arexx_Quoted {a.s}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - a.s    : ???                                                              /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;/ See also:    arexx_addargquot                                               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s _arexx_Quoted {a.s}
For n.l = 1 To FLen(a.s)
  b.s + Mid$(a.s,n,1)
  If Mid$(a.s,n,1) = "<" Then b.s + "<"
Next
a.s = ">"+b.s+"<"
Function Return a.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = arexx_GetLine {}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s arexx_GetLine {}
SHARED AREXX
Function Return \in_msg_body
End Function
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = arexx_GetNextString {}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Return the next argument of the message, or the empty string if there are:: /
;/  no more arguments.                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : argument string                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s arexx_GetNextString {}
SHARED AREXX
a.s = \in_msg_body
While Left$(a.s,1)=" "                        ; remove spaces
  a.s = Right$(a.s,FLen(a.s)-1)
Wend
finished.w = False
quoted.w = False
;c.s = Left$(a.s,1)
;If c.s = "\\22" Then quoted = True:Else quoted = False

While finished=False
  c.s = Left$(a.s,1)
  Select c.s
    Case ""
      finished = True
    Case " "
      If quoted = False Then finished = True:c.s = ""

    Case "\\22"
      If quoted = True
        c.s = ""
        quoted = False
        finished = True
      Else
        quoted=True
        c.s = ""
      End If

  End Select
  b.s = b.s + c.s
  a.s = Right$(a.s,FLen(a.s)-1)
Wend
\in_msg_body = a.s
Function Return b.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = arexx_GetNextValue {}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_GetNextValue {}
Function Return Vallong(arexx_GetNextString{} )
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.f = arexx_GetNextFloat {}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.f     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.f arexx_GetNextFloat {}
Function Return Val(arexx_GetNextString{} )
End Function
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = arexx_GetSender {}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ Return the name of the AREXX port of the sender of the last received mess:: /
;/ age.                                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : name of the AREXX port                                     /
;/                                                                             /
;/ See also:    arexx_check                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s arexx_GetSender {}
SHARED AREXX
Function Return \in_msg_port
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: arexx_CreateMsg {port.s,@message.s}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ Create a new message to send to a specific AREXX port.                      /
;/ You can immediately add a message string, or add strings or integers usin:: /
;/ g arexx_AddString and arexx_AddValue.                                       /
;/ After you built your message, send it using arexx_SendMsg.                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - port.s    : AREXX port to snd the message to                              /
;/ - message.s    : message string                                             /
;/                                                                             /
;/ See also:    arexx_SendMsg                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement arexx_CreateMsg {port.s,@message.s}
SHARED AREXX
\out_msg_port = port
If message.s><"" Then \out_msg_body = " '"+message.s+"'" : Else \out_msg_body = ""
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: arexx_AddString {arg.s}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ Add a new string argument to the current message.                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - arg.s    : argument string                                                /
;/                                                                             /
;/ See also:    arexx_CreateMsg, arexx_SendMsg                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement arexx_AddString {arg.s}
SHARED AREXX
\out_msg_body = \out_msg_body+" '"+arg.s+"'"
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: _arexx_AddArgQuot {arg.s}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ Add an string argument 'quoted' to the current message.                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - arg.s    : argument string                                                /
;/                                                                             /
;/ See also:    arexx_CreateMsg, arexx_SendMsg                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement _arexx_AddArgQuot {arg.s}
SHARED AREXX
arg.s = _arexx_Quoted{arg.s}
\out_msg_body = \out_msg_body+" '"+arg.s+"'"
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: arexx_AddValue {value.l}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ Add an integer value to the argument string. This is blitz specific, and :: /
;/ not suitable to use with other apps. Better dont use this at all!           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - value.l    : integer argument                                             /
;/                                                                             /
;/ See also:    arexx_CreateMsg, arexx_SendMsg                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement arexx_AddValue {value.l}
SHARED AREXX
\out_msg_body = \out_msg_body+" "+Str$(value)
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = arexx_ReplyMsg { result.l,@string.s}                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - result.l    : ???                                                         /
;/ - string.s    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_ReplyMsg {result.l,@string.s}
SHARED AREXX
succ.l = False
If \in_msg Then ReplyRexxMsg \in_msg, result, 0, string : \in_msg = 0 : succ=True
Function Return succ
End Function
 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = arexx_HandleOutQueue {}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_HandleOutQueue{}
SHARED AREXX,rxoutgoing()
If \out_port
  Repeat
    *msg.RexxMsg = RexxEvent(\out_port)
    If *msg
      If IsRexxMsg(*msg)
        done.l = False
        ResetList rxoutgoing()
        While NextItemFast(rxoutgoing())
          If rxoutgoing()\ptr = *msg
            If *msg\rm_Result1 = 0 AND *msg\rm_Result2=0
              ; - )
            Else
              error {Str$(*msg\rm_Result2)+" - "+RexxError(*msg\rm_Result2)}
            End If
            DeleteRexxMsg *msg
            KillItem rxoutgoing()
            done = True
          Else
            rxoutgoing()\timeout-1
            If rxoutgoing()\timeout=False
              If ask {"AREXX timeout! - "+rxoutgoing()\port+" does not respond!","Try again|Cancel"}=False
                KillItem rxoutgoing()
              Else
                rxoutgoing()\timeout = #rexx_timeout
              End If
            End If
          End If
        Wend
        If done=False Then ReplyRexxMsg *msg,0,0,"" ; hu!? was none of ours...
      Else
        ReplyMsg_ *msg
      End If
    End If
  Until *msg = 0
End If
Function Return done
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.l = arexx_GetMsg {@blocking.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ Check for new AREXX messages. If it returns success, the message and its :: /
;/ arguments can be received by calling arexx_nextarg, till this function re:: /
;/ turns an empty string.                                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - blocking.l    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.w     : -1 if there is a new message, 0 otherwise                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_GetMsg {@blocking.l}
SHARED AREXX
succ.l = False
If \in_port=0 Then Function Return False
If \in_msg Then arexx_ReplyMsg{0,""}
*msg.RexxMsg = RexxEvent(\in_port)
If *msg
  If IsRexxMsg(*msg)
    If *msg\rm_PassPort\mp_Node
      *mp_Node.Node = *msg\rm_PassPort\mp_Node
      If *mp_Node\ln_Name
        \in_msg_port = Peek.s(*mp_Node\ln_Name)
      Else
        \in_msg_port = ""
      End If
    End If
    \in_msg_body  = GetRexxCommand(*msg,1)
    \in_msg       = *msg
    succ = True
    If blocking=False Then arexx_ReplyMsg{0,""}
  Else
    ReplyMsg_ *msg
    error {"Received a non-AREXX message on AREXX port!"}
  End If
End If
arexx_HandleOutQueue{}
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = arexx_Execute {port.s,arexxline.s,@blocking.l}          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - port.s    : ???                                                           /
;/ - arexxline.s    : ???                                                      /
;/ - blocking.l    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w arexx_Execute {port.s,arexxline.s,@blocking.l}
SHARED AREXX,rxoutgoing()
succ.w = False
If \out_port = 0 Then Function Return False
*msg.RexxMsg = CreateRexxMsg (\out_port,"",\out_port_name)
If *msg
  If port><""
    SendRexxCommand *msg,"ADDRESS "+port+" "+arexxline,#RXCOMM|#RXFF_STRING|#RXFF_NOIO|#RXFF_RESULT
  Else
    SendRexxCommand *msg,arexxline.s,#RXCOMM|#RXFF_STRING|#RXFF_NOIO|#RXFF_RESULT
    port.s = "REXX"
  End If

  If blocking
    replied.l = False
    While replied=False
      WaitPort_ (\out_port)
      *inmsg.RexxMsg = RexxEvent(\out_port)
      If *inmsg
        If IsRexxMsg(*inmsg)
          If *inmsg = *msg
            \out_retcode   = GetRexxResult(*inmsg,1)
            \out_retstring = ""
            If \out_retcode = 0
              If GetRexxResult(*inmsg,2) Then \out_retstring = GetResultString(*inmsg)
            End If
            replied = True
          Else
            ReplyRexxMsg  *inmsg,0,0,""
          End If
        Else
          ReplyMsg_ *inmsg
        End If
      End If
    Wend
  Else
    If AddLast(rxoutgoing())
      rxoutgoing()\port    = port
      rxoutgoing()\timeout = #rexx_timeout
      rxoutgoing()\ptr     = *msg
    End If
  End If
End If

Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.l = arexx_SendMsg {@blocking.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ Send the AREXX message that was prepared by arexx_newmessage and optional:: /
;/  calls of arexx_addarg.                                                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - blocking.l    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.w     : -1 if the message was send, 0 if it failed                   /
;/                                                                             /
;/ See also:    arexx_CreateMsg, arexx_AddString, arexx_AddValue               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_SendMsg {@blocking.l}
SHARED AREXX,rxoutgoing()
arexx_HandleOutQueue{}
succ.l = arexx_Execute {\out_msg_port,\out_msg_body,blocking}
Function Return succ
End Function


 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: arexx_Free {}                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Close the AREXX port created using arexx_open. Pending messages will be l:: /
;/ ost.                                                                        /
;/                                                                             /
;/ See also:    arexx_OpenPort                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement arexx_Free {}
SHARED AREXX,rxoutgoing()
If \is_open
  If \in_msg Then arexx_ReplyMsg{0,""}
  ResetList rxoutgoing()
  While NextItemFast (rxoutgoing())
    arexx_HandleOutQueue{}
    ResetList rxoutgoing()
  Wend
  \is_open = False
End If
If \in_port = \out_port Then \out_port = 0
If \in_port  Then DeleteMsgPort \in_port :\in_port = 0
If \out_port Then DeleteMsgPort \out_port:\out_port = 0
\out_port_name = ""
\in_port_name  = ""
End Statement
!autoexit{arexx_Free}

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.l = arexx_Init {inportname.s,@outportname.s}                  /
;/                                                                             /
;/ Description:                                                                /
;/ Open an AREXX port for your program. This is needed in order to be able t:: /
;/ o receive AREXX commands from other programs.                               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - port_name.s    : name of your AREXX port                                  /
;/ - inportname.s    : ???                                                     /
;/ - outportname.s    : ???                                                    /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.w     : -1 if the port was opened, 0 if it failed                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_Init{inportname.s,@outportname.s}
SHARED AREXX
err.l = 0
If \is_open Then arexx_Free{}
If inportname
  \in_port_name = inportname
  \in_port      = CreateMsgPort (\in_port_name)
  If \in_port
    \in_msg      = 0
    \in_msg_port = ""
    \in_msg_body = ""
  Else
    err = -1
  End If
End If
If outportname="" Then outportname = inportname
If outportname
  \out_port_name = outportname
  If outportname=inportname
    \out_port = \in_port
  Else
    \out_port = CreateMsgPort (\in_port_name)
  End If

  If \out_port
    \out_msg      = 0
    \out_msg_port = ""
    \out_msg_body = ""
  Else
    err = -1
  End If
End If

If err = 0
  \is_open = True
Else
  arexx_Free{}
End If
Function Return \is_open
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  port.l = arexx_FindPort {port.s}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ Find an AREXX port by name (usually of another application) and return it:: /
;/ s address pointer.                                                          /
;/ The function returns 0, if the port can not be found. This way you can ch:: /
;/ eck for the existence of an AREXX port.                                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - port.s    : name of the AREXX port to find                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - port.l     : AREXX port address                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_FindPort {port.s}
*msgport.MsgPort = FindPort_ (&port.s)
Function Return *msgport
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = arexx_GetInSigFlag {}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_GetInSigFlag {}
SHARED AREXX
sigflag.l = 0
If \in_port Then sigflag.l = 1 LSL \in_port\mp_SigBit
Function Return sigflag
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = arexx_GetOutSigFlag {}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_GetOutSigFlag {}
SHARED AREXX
sigflag.l = 0
If \out_port Then sigflag.l = 1 LSL \out_port\mp_SigBit
Function Return sigflag
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = arexx_GetSigFlag {}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_GetSigFlag {}
SHARED AREXX
sigflag.l = 0
If \in_port  Then sigflag.l | (1 LSL \in_port\mp_SigBit   )
If \out_port Then sigflag.l | (1 LSL \out_port\mp_SigBit  )
Function Return sigflag
End Function


CNIF #__include=0

#arexxdemo_send=1 ; 1 = sender, 0 = receiver



CNIF #arexxdemo_send

NPrint "Test Program that will send something to an AREXX Port."
If arexx_Init {"","TEST_SEND"}
  NPrint "AREXX Port 'TEST_SEND' open..."
  succ.l = arexx_Execute {"TEST","'DO'",False}
  NPrint "Sent!"
CELSE

NPrint "Test Program that listens to AREXX Port 'TEST'"
NPrint "Start a shell and type something like"
NPrint "1>rx 'ADDRESS TEST \\22This is a test!\\22'"
NPrint "to see how it works. If you send CTRL+C or quit,"
NPrint "the program will end."
NPrint "..."
If arexx_Init {"TEST"}
  NPrint "AREXX Port 'TEST' open..."

  breakme.l = False
  While breakme=False
    signals.l = Wait_(-1)
    If signals & #SIGBREAKF_CTRL_C Then breakme=True
    n.l = 0
    While arexx_GetMsg{False}
      NPrint "\\n*** Got New AREXX Message ***"
      NPrint "Sender Port  : ",arexx_GetSender {}
      NPrint "Received Body: ",arexx_GetLine {}
      Repeat
        a.s = arexx_GetNextString {}
        Select UCase$(a.s)
          Case "QUIT"
            breakme=True
          Case "DO"
            Print "wait"
            For x.l = 0 To 10:Delay_ 50 : Print ".":Next
            NPrint "done!"
        End Select
        If a.s >< "" Then NPrint "Argument[",n,"]: ",a.s
        n+1
      Until a.s = ""
    Wend
  Wend
CEND

  arexx_Free {}
  NPrint "AREXX Port 'TEST' closed."
Else
  NPrint "Unable to open AREXX port!"
End If
NPrint "done."
End

CEND




