; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 4
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 478
; CursorColumn    = 2
; LabelSearch     = "pre"
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 100
; Max GadgetList  = 100
; Max Shape       = 200
; Max Bank        = 1
; Max MenuList    = 100
; Max GTList      = 100
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 10
; Max BlitzFont   = 1
; Max Window      = 100
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
CNIF @#LAYERS_NOBACKFILL=0  ; declare layer contants if not done already
  #LAYERS_NOBACKFILL = 1
CEND
CNIF @#LAYERS_BACKFILL=0
  #LAYERS_BACKFILL   = 0
CEND
CNIF @#IDS_NORMAL=0
#IDS_NORMAL = 0
#IDS_SELECTED = 1
CEND

CNIF @#PDTA_SparseTable=0
;/****************************************************************************/
#PDTA_SparseTable  =(#DTA_Dummy + 218)
;/* Index number of the picture To load (ULONG). (V44) */
CEND
CNIF  @#PDTA_WhichPicture=0
#PDTA_WhichPicture =(#DTA_Dummy + 219)
;/* Get the number of pictures stored in the File (ULONG *). (V44) */
#PDTA_GetNumPictures =(#DTA_Dummy + 220)
;/* Maximum number of colours To Use For dithering (ULONG). (V44) */
#PDTA_MaxDitherPens  =(#DTA_Dummy + 221)
;/* Quality of the dithering algorithm To be Used during Colour
; * quantization (ULONG). (V44)
; */
#PDTA_DitherQuality  =(#DTA_Dummy + 222)
;/* Pointer To the allocated pen table (UBYTE *). (V44) */
#PDTA_AllocatedPens  =(#DTA_Dummy + 223)
;/* Quality For scaling. (V45) */
#PDTA_ScaleQuality =(#DTA_Dummy + 224)
;/*****************************************************************************/
;/* When querying the number of pictures stored in a File, the
; * following value denotes "the number of pictures is unknown".
; */
#PDTANUMPICTURES_Unknown = (0)
CEND

; Rastport Tags for use with SetRPAttr()
CNIF @#RPTAG_Font=0
#RPTAG_Font       = $80000000
#RPTAG_APen       = $80000002
#RPTAG_BPen       = $80000003
#RPTAG_DrMd       = $80000004
#RPTAG_OutlinePen = $80000005
#RPTAG_WriteMask  = $80000006
#RPTAG_MaxPen     = $80000007
#RPTAG_DrawBounds = $80000008

#RPTAG_PenMode  = $80000080
#RPTAG_FgColor  = $80000081
#RPTAG_BgColor  = $80000082

#RPTAG_APenColor = $80000009 ;/* Get/set apen color 0xaarrggbb */
#RPTAG_BPenColor = $8000000A ;/* Get/set bpen color 0xaarrggbb */

#RPTAG_PatternOriginX      = $800000C0 ;/* Word */
#RPTAG_PatternOriginY      = $800000C1 ;/* Word */
#RPTAG_ClipRectangle       = $800000C2 ;/* struct Rectangle *. Clones *rectangle. */
#RPTAG_ClipRectangleFlags  = $800000C3 ;/* ULONG */
#RPTAG_RemapColorFonts     = $800000C4 ;/* BOOL */

#RPCRF_RELRIGHT            = $01       ;/* ClipRectangle.MaxX is relative To right of layer/BitMap */
#RPCRF_RELBOTTOM           = $02       ;/* ClipRectangle.MaxY is relative To bottom of layer/BitMap */
#RPCRF_VALID               = $04       ;/* private */
CEND

#PDTA_SourceMode      = (#DTA_Dummy + 250)
#PDTA_DestMode        = (#DTA_Dummy + 251)
#PDTA_UseFriendBitMap = (#DTA_Dummy + 255)
#PDTA_MaskPlane       = (#DTA_Dummy + 258)
#PMODE_V42 = (0)  ;/* Compatibility mode */
#PMODE_V43 = (1)  ;/* Extended mode */
#PDTM_Dummy = (#DTM_Dummy + $60)
#PDTM_WRITEPIXELARRAY  = (#PDTM_Dummy + 0)
#PDTM_READPIXELARRAY   = (#PDTM_Dummy + 1)

NEWTYPE.pdtBlitPixelArray
  MethodID.l;
  pbpa_PixelData.l      ;/* The pixel data to transfer to/from */
  pbpa_PixelFormat.l    ;/* Format of the pixel data (see "Pixel Formats" below) */
  pbpa_PixelArrayMod.l  ;/* Number of bytes per row */
  pbpa_Left.l           ;/* Left edge of the rectangle to transfer pixels to/from */
  pbpa_Top.l            ;/* Top edge of the rectangle to transfer pixels to/from */
  pbpa_Width.l          ;/* Width of the rectangle to transfer pixels to/from */
  pbpa_Height.l         ;/* Height of the rectangle to transfer pixels to/from */
  dummy.l
End NEWTYPE

#PBPAFMT_RGB    = 0 ;/* 3 bytes per pixel (Red, Green, Blue) */
#PBPAFMT_RGBA   = 1 ;/* 4 bytes per pixel (Red, Green, Blue, alpha channel) */
#PBPAFMT_ARGB   = 2 ;/* 4 bytes per pixel (alpha channel, Red, Green, Blue) */
#PBPAFMT_LUT8   = 3 ;/* 1 byte per pixel (using a separate Colour map) */
#PBPAFMT_GREY8  = 4 ;/* 1 byte per pixel (0==black, 255==white) */

#PDTM_SCALE = (#PDTM_Dummy + 2)

#BMB_PIXFMT_SHIFTUP = 24
#BMF_PIXFMT_SHIFTUP = 1 LSL #BMB_PIXFMT_SHIFTUP

NEWTYPE.pdtScale
  MethodID.l
  ps_NewWidth.l   ;/* The new width the pixel data should have */
  ps_NewHeight.l  ;/* The new height the pixel data should have */
  ps_Flags.l      ;/* should be 0 for now */
End NEWTYPE

CNIF @#mskNone=0
#mskNone                = 0
#mskHasMask             = 1
#mskHasTransparentColor = 2
#mskLasso               = 3
#mskHasAlpha            = 4

#cmpNone     =  0
#cmpByteRun1 =  1
#cmpByteRun2 =  2 ;/* NOTE: unused (V44) */
CEND

 ;  BitMap attributes
#BMAPATTR_Width        = 0+#TAG_USER
#BMAPATTR_Height       = 1+#TAG_USER
#BMAPATTR_Depth        = 2+#TAG_USER
#BMAPATTR_CyberGFX     = 3+#TAG_USER
#BMAPATTR_BitMapFormat = 4+#TAG_USER
#BMAPATTR_PixelFormat  = 5+#TAG_USER
#BMAPATTR_Flags        = 6+#TAG_USER

#COLORMODE_CLUT     =   0           ;     /* normal Palette lookup */
#COLORMODE_HAM8     =   1           ;     /* HAM8 mode */
#COLORMODE_HAM6     =   2           ;     /* HAM6 mode */

#RND_TAGBASE   = (#TAG_USER+$1000)

#RND_PixelFormat   = (#RND_TAGBASE+25)   ;     /* pixel Format, see below */

#PIXFMTB_CHUNKY    =    3
#PIXFMTB_BITMAP    =    4
#PIXFMTB_RGB       =    5

#PIXFMT_CHUNKY_CLUT  =  ((1 LSL #PIXFMTB_CHUNKY) + #COLORMODE_CLUT)
#PIXFMT_0RGB_32      =  ((1 LSL #PIXFMTB_RGB) + 0)
#PIXFMT_BITMAP_RGB   =  ((1 LSL #PIXFMTB_BITMAP) + (1 LSL #PIXFMTB_RGB))

NEWTYPE.FileRequester_fixed
fr_Reserved0.b[4]
fr_File.l
fr_Drawer.l
fr_Reserved1.b[10]
fr_LeftEdge.w
fr_TopEdge.w
fr_Width.w
fr_Height.w
fr_Reserved2.b[2]
fr_NumArgs.l
fr_ArgList.l
fr_UserData.l
fr_Reserved3.b[8]
fr_Pattern.l
End NEWTYPE

;/****************************************************************************/

; #ICONNAME = "icon.library"

;/****************************************************************************/

#ICONA_Dummy =(#TAG_USER+$9000)

;/****************************************************************************/

;/* Error reporting (LONG; *); */
#ICONA_ErrorCode  =(#ICONA_Dummy+1)

;/* Points to the tag item that caused the error (struct TagItem; **).; */
#ICONA_ErrorTagItem =(#ICONA_Dummy+75)

;/****************************************************************************/

;/* Global options for IconControlA(); */

;/* Screen to use for remapping Workbench icons to (struct Screen; *); */
#ICONCTRLA_SetGlobalScreen    =(#ICONA_Dummy+2)
#ICONCTRLA_GetGlobalScreen    =(#ICONA_Dummy+3)

;/* Icon color remapping precision; defaults to PRECISION_ICON (LONG); */
#ICONCTRLA_SetGlobalPrecision   =(#ICONA_Dummy+4)
#ICONCTRLA_GetGlobalPrecision   =(#ICONA_Dummy+5)

;/* Icon frame size dimensions (struct Rectangle; *); */
#ICONCTRLA_SetGlobalEmbossRect    =(#ICONA_Dummy+6)
#ICONCTRLA_GetGlobalEmbossRect    =(#ICONA_Dummy+7)

;/* Render image without frame (BOOL); */
#ICONCTRLA_SetGlobalFrameless   =(#ICONA_Dummy+8)
#ICONCTRLA_GetGlobalFrameless   =(#ICONA_Dummy+9)

;/* Enable NewIcons support (BOOL); */
#ICONCTRLA_SetGlobalNewIconsSupport =(#ICONA_Dummy+10)
#ICONCTRLA_GetGlobalNewIconsSupport =(#ICONA_Dummy+11)

;/* Enable color icon support (BOOL); */
#ICONCTRLA_SetGlobalColorIconSupport  =(#ICONA_Dummy+77)
#ICONCTRLA_GetGlobalColorIconSupport  =(#ICONA_Dummy+78)

;/* Set/Get the hook to be called when identifying a file (struct Hook; *); */
#ICONCTRLA_SetGlobalIdentifyHook    =(#ICONA_Dummy+12)
#ICONCTRLA_GetGlobalIdentifyHook    =(#ICONA_Dummy+13)

;/* Set/get the maximum length of a file/drawer name supported
;; * by icon.library (LONG).
;; */
#ICONCTRLA_SetGlobalMaxNameLength =(#ICONA_Dummy+67)
#ICONCTRLA_GetGlobalMaxNameLength =(#ICONA_Dummy+68)

;/****************************************************************************/

;/* Per icon local options for IconControlA(); */

;/* Get the icon rendering masks (PLANEPTR); */
#ICONCTRLA_GetImageMask1    =(#ICONA_Dummy+14)
#ICONCTRLA_GetImageMask2    =(#ICONA_Dummy+15)

;/* Transparent image color; set to -1 if opaque; */
#ICONCTRLA_SetTransparentColor1 =(#ICONA_Dummy+16)
#ICONCTRLA_GetTransparentColor1 =(#ICONA_Dummy+17)
#ICONCTRLA_SetTransparentColor2 =(#ICONA_Dummy+18)
#ICONCTRLA_GetTransparentColor2 =(#ICONA_Dummy+19)

;/* Image color palette (struct ColorRegister; *); */
#ICONCTRLA_SetPalette1    =(#ICONA_Dummy+20)
#ICONCTRLA_GetPalette1    =(#ICONA_Dummy+21)
#ICONCTRLA_SetPalette2    =(#ICONA_Dummy+22)
#ICONCTRLA_GetPalette2    =(#ICONA_Dummy+23)

;/* Size of image color palette (LONG); */
#ICONCTRLA_SetPaletteSize1  =(#ICONA_Dummy+24)
#ICONCTRLA_GetPaletteSize1  =(#ICONA_Dummy+25)
#ICONCTRLA_SetPaletteSize2  =(#ICONA_Dummy+26)
#ICONCTRLA_GetPaletteSize2  =(#ICONA_Dummy+27)

;/* Image data; one by per pixel (UBYTE; *); */
#ICONCTRLA_SetImageData1    =(#ICONA_Dummy+28)
#ICONCTRLA_GetImageData1    =(#ICONA_Dummy+29)
#ICONCTRLA_SetImageData2    =(#ICONA_Dummy+30)
#ICONCTRLA_GetImageData2    =(#ICONA_Dummy+31)

;/* Render image without frame (BOOL); */
#ICONCTRLA_SetFrameless   =(#ICONA_Dummy+32)
#ICONCTRLA_GetFrameless   =(#ICONA_Dummy+33)

;/* Enable NewIcons support (BOOL); */
#ICONCTRLA_SetNewIconsSupport =(#ICONA_Dummy+34)
#ICONCTRLA_GetNewIconsSupport =(#ICONA_Dummy+35)

;/* Icon aspect ratio (UBYTE; *); */
#ICONCTRLA_SetAspectRatio =(#ICONA_Dummy+36)
#ICONCTRLA_GetAspectRatio =(#ICONA_Dummy+37)

;/* Icon dimensions; valid only for palette mapped icon images (LONG); */
#ICONCTRLA_SetWidth   =(#ICONA_Dummy+38)
#ICONCTRLA_GetWidth   =(#ICONA_Dummy+39)
#ICONCTRLA_SetHeight    =(#ICONA_Dummy+40)
#ICONCTRLA_GetHeight    =(#ICONA_Dummy+41)

;/* Check whether the icon is palette mapped (LONG; *).; */
#ICONCTRLA_IsPaletteMapped  =(#ICONA_Dummy+42)

;/* Get the screen the icon is attached to (struct Screen; **).; */
#ICONCTRLA_GetScreen    =(#ICONA_Dummy+43)

;/* Check whether the icon.has a real select image (LONG; *).; */
#ICONCTRLA_HasRealImage2    =(#ICONA_Dummy+44)

;/* Check whether the icon is of the NewIcon type (LONG; *).; */
#ICONCTRLA_IsNewIcon    =(#ICONA_Dummy+79)

;/* Check whether this icon was allocated by icon.library
; * or if consists solely of a statically allocated
; * struct DiskObject. (LONG; *).
; */
#ICONCTRLA_IsNativeIcon   =(#ICONA_Dummy+80)

;/****************************************************************************/

;/* Icon aspect ratio is not known.; */
#ICON_ASPECT_RATIO_UNKNOWN = (0)

;/* Pack the aspect ratio into a single byte.; */
;#PACK_ICON_ASPECT_RATIO(num,den) (((num)
;/* Unpack the aspect ratio stored in a single byte.; */
;#UNPACK_ICON_ASPECT_RATIO(v,num,den) \
; do          \
; {         \
;   num = (((v) >> 4) & 15);  \
;   den = ( (v)       & 15);  \
; }         \
; while(0)

;/****************************************************************************/

;/* Tags for use with GetIconTagList(); */

;/* Default icon type to retrieve (LONG); */
#ICONGETA_GetDefaultType    =(#ICONA_Dummy+45)

;/* Retrieve default icon for the given name (STRPTR); */
#ICONGETA_GetDefaultName    =(#ICONA_Dummy+46)

;/* Return a default icon if the requested icon
; * file cannot be found (BOOL).
; */
#ICONGETA_FailIfUnavailable =(#ICONA_Dummy+47)

;/* If possible, retrieve a palette mapped icon (BOOL).; */
#ICONGETA_GetPaletteMappedIcon  =(#ICONA_Dummy+48)

;/* Set if the icon returned is a default icon (BOOL; *).; */
#ICONGETA_IsDefaultIcon   =(#ICONA_Dummy+49)

;/* Remap the icon to the default screen, if possible (BOOL).; */
#ICONGETA_RemapIcon   =(#ICONA_Dummy+50)

;/* Generate icon image masks (BOOL).; */
#ICONGETA_GenerateImageMasks  =(#ICONA_Dummy+51)

;/* Label text to be assigned to the icon (STRPTR).; */
#ICONGETA_Label     =(#ICONA_Dummy+52)

;/* Screen to remap the icon to (struct Screen; *).; */
#ICONGETA_Screen      =(#ICONA_Dummy+69)

;/****************************************************************************/

;/* Tags for use with PutIconTagList(); */

;/* Notify Workbench of the icon being written (BOOL); */
#ICONPUTA_NotifyWorkbench =(#ICONA_Dummy+53)

;/* Store icon as the default for this type (LONG); */
#ICONPUTA_PutDefaultType    =(#ICONA_Dummy+54)

;/* Store icon as a default for the given name (STRPTR); */
#ICONPUTA_PutDefaultName    =(#ICONA_Dummy+55)

;/* When storing a palette mapped icon, don't save the
; * the original planar icon image with the file. Replace
; * it with a tiny replacement image.
; */
#ICONPUTA_DropPlanarIconImage =(#ICONA_Dummy+56)

;/* Don't write the chunky icon image data to disk.; */
#ICONPUTA_DropChunkyIconImage =(#ICONA_Dummy+57)

;/* Don't write the NewIcons tool types to disk.; */
#ICONPUTA_DropNewIconToolTypes  =(#ICONA_Dummy+58)

;/* If this tag is enabled, the writer will examine the
; * icon image data to find out whether it can compress
; * it more efficiently. This may take extra time and
; * is not generally recommended.
; */
#ICONPUTA_OptimizeImageSpace  =(#ICONA_Dummy+59)

;/* Don't write the entire icon file back to disk,
; * only change the do->do_CurrentX/do->do_CurrentY
; * members.
; */
#ICONPUTA_OnlyUpdatePosition  =(#ICONA_Dummy+72)

;/* Before writing a palette mapped icon back to disk,
; * icon.library will make sure that the original
; * planar image data is stored in the file. If you
; * don't want that to happen, set this option to
; * FALSE. This will allow you to change the planar icon
; * image data written back to disk.
; */
#ICONPUTA_PreserveOldIconImages =(#ICONA_Dummy+84)

;/****************************************************************************/

;/* For use with the file identification hook.; */

NEWTYPE.IconIdentifyMsg

  ;/* Libraries that are already opened for your use.; */
  *iim_SysBase.Library;
  *iim_DOSBase.Library;
  *iim_UtilityBase.Library;
  *iim_IconBase.Library;
  ;/* File context information.; */
  iim_FileLock.l; ;/* Lock on the object to return an icon for.; */
  iim_ParentLock.l; ;/* Lock on the object's parent directory, if available.

  *iim_FIB.FileInfoBlock; ;/* Already initialized for you.; */
  iim_FileHandle.l; ;/* If non-NULL, pointer to the file to examine,
            ; * positioned right at the first byte, ready
            ; * for you to use.
            ; */
  *iim_Tags.TagItem;  ;/* Tags passed to GetIconTagList().; */
End NEWTYPE

;/****************************************************************************/

;/* Tags for use with DupDiskObjectA(); */

;/* Duplicate do_DrawerData; */
#ICONDUPA_DuplicateDrawerData =(#ICONA_Dummy+60)

;/* Duplicate the Image structures.; */
#ICONDUPA_DuplicateImages =(#ICONA_Dummy+61)

;/* Duplicate the image data (Image->ImageData) itself.; */
#ICONDUPA_DuplicateImageData  =(#ICONA_Dummy+62)

;/* Duplicate the default tool.; */
#ICONDUPA_DuplicateDefaultTool  =(#ICONA_Dummy+63)

;/* Duplicate the tool types list.; */
#ICONDUPA_DuplicateToolTypes  =(#ICONA_Dummy+64)

;/* Duplicate the tool window.; */
#ICONDUPA_DuplicateToolWindow =(#ICONA_Dummy+65)

;/* If the icon to be duplicated is in fact a palette mapped
; * icon which has never been set up to be displayed on the
; * screen, turn the duplicate into that palette mapped icon.
; */
#ICONDUPA_ActivateImageData =(#ICONA_Dummy+82)

;/****************************************************************************/

;/* Tags for use with DrawIconStateA() and GetIconRectangleA().; */

;/* Drawing information to use (struct DrawInfo; *).; */
#ICONDRAWA_DrawInfo   =(#ICONA_Dummy+66)

;/* Draw the icon without the surrounding frame (BOOL).; */
#ICONDRAWA_Frameless    =(#ICONA_Dummy+70)

;/* Erase the background before drawing a frameless icon (BOOL).; */
#ICONDRAWA_EraseBackground  =(#ICONA_Dummy+71)

;/* Draw the icon without the surrounding border and frame (BOOL).; */
#ICONDRAWA_Borderless   =(#ICONA_Dummy+83)

;/* The icon to be drawn refers to a linked object (BOOL).; */
#ICONDRAWA_IsLink   =(#ICONA_Dummy+89)

;/****************************************************************************/

;/* Reserved tags; don't use!; */
#ICONA_Reserved1  =(#ICONA_Dummy+73)
#ICONA_Reserved2  =(#ICONA_Dummy+74)
#ICONA_Reserved3 =(#ICONA_Dummy+76)
#ICONA_Reserved4 =(#ICONA_Dummy+81)
#ICONA_Reserved5 =(#ICONA_Dummy+85)
#ICONA_Reserved6 =(#ICONA_Dummy+86)
#ICONA_Reserved7 =(#ICONA_Dummy+87)
#ICONA_Reserved8 =(#ICONA_Dummy+88)

;/****************************************************************************/

#ICONA_LAST_TAG =(#ICONA_Dummy+89)

;/****************************************************************************/

;/* OS4 Mouse Wheel data
;  /* For 68k programs running On OS 4.x */
#IDCMP_EXTENDEDMOUSE = $08000000

;-- removed as it is defined in resident part "v47+extentions.ab3"
NEWTYPE.IntuiWheelData
     Version.w;
     Reserved.w;
     WheelX.w;
     WheelY.w;
End NEWTYPE

#IMSGCODE_INTUIWHEELDATA = (1 LSL 15)


#NEWMOUSE_VERSION = 1

#IECLASS_NEWMOUSE = ($16) ; /* IECLASS_MAX + 1 as of V40 */

;/* These are issued both under IECLASS_NEWMOUSE AND IECLASS_RAWKEY  */
;/* by the NewMouse driver                     */

#NM_WHEEL_UP     =($7A)
#NM_WHEEL_DOWN   =($7B)
#NM_WHEEL_LEFT   =($7C)
#NM_WHEEL_RIGHT  =($7D)

#NM_BUTTON_FOURTH = ($7E)




