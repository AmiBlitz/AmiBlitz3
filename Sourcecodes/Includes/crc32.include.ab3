; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "CRC32Demo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 4
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name:  CRC32.include                                                        /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 18.08.2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements: Amiblitz2.4                                                   /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Provide CRC-32 checksum calculation to Amiblitz2.                           /
;/                                                                             /
;/ Abstract:                                                                   /
;/ This include contains functions to calculate the CRC-32 checksum, that is:: /
;/  needed in various file formats, e.g. the .png file format for bitmap gra:: /
;/ phics.                                                                      /
;/ It calculates a fairly unique checksum that can be used to detect transmi:: /
;/ ssion errors. A change in the message will cause very likely a different :: /
;/ checksum.                                                                   /
;/                                                                             /
;/ User Constants:    none                                                     /
;/                                                                             /
;/ Example:                                                 none               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
CEND
XINCLUDE "file.include.ab3"

Dim CRC_table.l(256)
CRC_c.l=0
CRC_n.l=0
CRC_k.l=0
For CRC_n = 0 To 255
  CRC_c = CRC_n
  For CRC_k = 0 To 7
    If (CRC_c & 1)
      CRC_c = Xor($edb88320 , (CRC_c LSR 1))
    Else
      CRC_c = CRC_c LSR 1
    End If
    CRC_table(CRC_n) = CRC_c
  Next
Next


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  CRC.l = CRC32_Add {CRC.l,sourceaddr.l,blength.l}                   /
;/                                                                             /
;/ Description:                                                                /
;/ Calculate the CRC32 value of a part of a message.                           /
;/ You need this function, if you dont have the whole message in one memory :: /
;/ block.                                                                      /
;/ Call this function with an initial value of $FFFFFFFF for each memory blo:: /
;/ ck, and pass the result always to the next call.                            /
;/ After all memory blocks are done, call CRC32_Finalize{} to get the real C:: /
;/ RC32 checksum value.                                                        /
;/ The return value of this function is only an intermediate value, not a va:: /
;/ lid CRC32 checksum.                                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - CRC.l    : set this to $FFFFFFFF for the first call or the return value:: /
;/ of the last call                                                            /
;/ -  sourceaddr.l    : memory pointer to the data                             /
;/ -  blength.l    : byte length of this memory block                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - CRC.l     : intermediate value that should be passed to the next call o:: /
;/ f CRC32_Add{} or to CRC32_Finalize{}                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l CRC32_Add {CRC.l, sourceaddr.l, blength.l}
SHARED CRC_table()
c.l = CRC
For n.l = 0 To blength-1
  byte.l = Peek.b(sourceaddr+n)
  c = Xor(CRC_table(Xor(c , byte) & $ff) , (c LSR 8))
Next
Function Return c
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  CRC.l = CRC32_Finalize {CRC.l}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Turn the value return by CRC32_Add into the actual CRC32 checksum.          /
;/ Note: This function is only necessary, if you use the CRC32_Add function.   /
;/ Note: This function is called only once, after all calls to CRC32_Add are:: /
;/  done.                                                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - CRC.l    : The value returned by the last call of CRC32_add               /
;/                                                                             /
;/ Result:                                                                     /
;/ - CRC.l     : The real CRC32 value                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l CRC32_Finalize {CRC.l}
Function Return Xor(CRC , $ffffffff)
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  CRC.l = CRC32_FromMem {sourceaddr.l,blength.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ Calculate the  CRC32 checksum out of a memory block.                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory pointer to the data to calculate the checksum of /
;/ - blength.l    : byte length of the data, can be anything from 0 - 2^31-1   /
;/                                                                             /
;/ Result:                                                                     /
;/ - CRC.l     : 32bit value that represents the CRC32 checksum                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l CRC32_FromMem {sourceaddr.l, blength.l}
Function Return Xor(CRC32_Add {$ffffffff, sourceaddr, blength} , $ffffffff)
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  CRC.l = CRC32_FromString {string.s}                                /
;/                                                                             /
;/ Description:                                                                /
;/ Calculate the CRC checksum out of a AB2 string.                             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - string.s    : string to calculate the CRC32 checksum from                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - CRC.l     : 32bit value that represents the CRC32 checksum                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l CRC32_FromString {string.s}
Function Return Xor(CRC32_Add {$ffffffff, &string.s, FLen(string.s)} , $ffffffff)
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  CRC.l = CRC32_FromFile {filename.s}                                /
;/                                                                             /
;/ Description:                                                                /
;/ Calculate the CRC checksum out of a file.                                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : file name                                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - CRC.l     : 32bit value that represents the CRC32 checksum                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l CRC32_FromFile {filename.s}
err.l = False
dos.l = file_Open {filename.s,#file_read}
CRC.l = $ffffffff
If dos>=0
  bytelength.l = file_GetLength {dos}
  membuff.l = AllocVec_(Min($8000,bytelength),#MEMF_ANY)
  If membuff
    Repeat
      chunk.l = Min(bytelength,$8000)
      If file_ReadMem {dos,membuff,chunk}
        bytelength - chunk
        CRC = CRC32_Add {CRC,membuff,chunk}
      Else
        bytelength = 0
        err=True
      End If
    Until bytelength = 0

    CRC.l = CRC32_Finalize {CRC}
    FreeVec_ membuff : membuff=0
  End If
  file_Close {dos}
End If
Function Return CRC
End Function
 


CNIF #__include=0

NPrint "Message and CRC code calculated in different ways:"
message.s ="The quick brown fox jumps over what-so-ever."
NPrint "Message: ",message.s
NPrint "CRC32 (from string)         : $",Hex$(CRC32_FromString {message.s})
NPrint "CRC32 (from memory)         : $",Hex$(CRC32_FromMem {&message.s,Len(message.s)})

partA.l = Len(message.s)/2
partB.l = Len(message.s)-partA
CRC.l = CRC32_Add {$ffffffff, &message +     0, partA}
CRC.l = CRC32_Add {      CRC, &message + partA, partB}
CRC.l = CRC32_Finalize {CRC}

NPrint "CRC32 (via multiple buffers): $",Hex$(CRC)

Delay_ 200
End

CEND
