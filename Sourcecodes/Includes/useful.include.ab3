; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 4096
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 9
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 361
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 50
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 50
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 50
; /XTRA
CNIF #__include=0
  SYNTAX 2
  OPTIMIZE 5
CEND

CNIF #__debug
  XINCLUDE "error.include.ab3"   ; is needed for the _ASSERT Macro  tomsmart1
CEND
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !mul48 {x.l,a.l,b.l,y.l}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ This handy macro performes y = x*a/b, whereas x*a can use up to 48 bit, o:: /
;/ nly the result must fit in 32 bit.                                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - x.l    : 32bit value                                                      /
;/ - a.l    : 32bit multiplier                                                 /
;/ - b.l    : 32bit divisor                                                    /
;/ - y.l    : 32bit result                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro mul48 ;{x.l,a.l,b.l,y.l} ; perform y = x*a/b, whereas x*a can use up to 48 bit
  s48x.l = `1
  s48a.l = `2
  s48b.l = `3
  s48q.l = s48x / s48b
  s48r.l = s48x - (s48q * s48b)
  `4 =  (s48a * s48q) + ((s48r * s48a) / s48b)
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !BADDR {string,ptr}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - string    : ???                                                           /
;/ - ptr    : ???                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro BADDR ; {string,ptr}
BADDR_ptr.l = (`2) LSL 2
BADDR_len.l = Peek.b(BADDR_ptr) & $FF
`1          = LSet$("",BADDR_len)
CopyMem_ BADDR_ptr+1,&`1,BADDR_len
End Macro

Macro _ASSERT ; {condition}
  CNIF #__debug
    If ((`1)=0) Then error{"\\__THIS_INCLUDE/\\__THIS_FUNCTION(\\__CODELINE):  Assert failed: \\22`1\\22!"} ;: End
  CEND
End Macro

Macro _ASSERTPTR ; {pointer}
  CNIF #__debug
    If ((`1)>0 AND (`1)<4096) Then error{"\\__THIS_INCLUDE/\\__THIS_FUNCTION(\\__CODELINE):  Bad Pointer Assert: \\22`1 = "+Hex$(`1)+"\\22!"} ;: End
  CEND
End Macro


Macro _EXPAND ; {varstem}
If (`1A)<=(`1N)
  __oldL.l = `1L
  `1L = AllocVec_((`1N + 16) * 4,#MEMF_CLEAR)
  If oldL
    CopyMem_ __oldL,`1L,(`1N) * 4
    FreeVec_ __oldL
  End If
  `1A = `1N + 16
End If
End Macro

Macro _ALLOC ; {Newtype}
AllocVec_(SizeOf.`1,#MEMF_CLEAR)
End Macro

Macro _FREE ; {dataP}
If (`1)
  FreeVec_ `1
  `1 = 0
End If
End Macro

NEWTYPE.wordP
w.w
End NEWTYPE

NEWTYPE.longP
l.l
End NEWTYPE

NEWTYPE.byteP
b.b
End NEWTYPE

NEWTYPE.floatP
f.f
End NEWTYPE

Macro _GetFuncPointer ;{var,funcname,params}
  LEA `2,A0
  MOVE.l A0,D0
CNIF #__debug
  ADD.l #16,D0
CELSE
  ADD.l #6,D0
CEND
  `1 = PutRegD0
  BRA '__skip_`2
  `2 `3     ; make a reference call to avoid dead-code elemination
  '__skip_`2:
End Macro


Macro _MakeGlobalFuncPointer_RunErrsOff ;{funcname,params}
LEA `1,A0
MOVE.l A0,D0
ADD.l #6,D0
SHARED *`1.l
*`1 = PutRegD0
BRA '__skip_`1
`1 `2     ; make a reference call to avoid dead-code elemination
'__skip_`1:
End Macro


Macro _MakeGlobalFuncPointer ;{funcname,params}
LEA `1,A0
MOVE.l A0,D0
CNIF #__debug
ADD.l #16,D0
CELSE
ADD.l #6,D0
CEND
SHARED *`1.l
*`1 = PutRegD0
BRA '__skip_`1
`1 `2     ; make a reference call to avoid dead-code elemination
'__skip_`1:
End Macro


Macro _MakeGlobalFuncPointer_NoRef ;{funcname,params}
LEA `1,A0
MOVE.l A0,D0
CNIF #__debug
ADD.l #16,D0
CELSE
ADD.l #6,D0
CEND
SHARED *`1.l
*`1 = PutRegD0
End Macro

Macro _ReferenceFunction ;{funcname,params}
BRA '__skip_`1
`1 `2     ; make a reference call to avoid dead-code elemination
'__skip_`1:
End Macro


Macro _CallFuncPointer ;{funcP, [ result.l,  param1, param2, ... ]}

CNIF `0 > 8     ; param7
GetRegD0 `9
MOVE.l d0,d6
CEND

CNIF `0 > 7     ; param6
GetRegD0 `8
MOVE.l d0,d5
CEND

CNIF `0 > 6     ; param5
GetRegD0 `7
MOVE.l d0,d4
CEND

CNIF `0 > 5     ; param4
GetRegD0 `6
MOVE.l d0,d3
CEND

CNIF `0 > 4     ; param3
GetRegD0 `5
MOVE.l d0,d2
CEND

CNIF `0 > 3     ; param2
GetRegD0 `4
MOVE.l d0,d1
CEND

GetRegD0 `1        ; get the function pointer address in a0
MOVE.l d0,a0

CNIF `0 > 2     ; get param1
GetRegD0 `3
CEND

JSR (a0)

CNIF `0 > 1     ; get result
`2=PutRegD0
CEND
End Macro


#NULL  = 0   ; as in C
#TRUE  = 1
#FALSE = 2

NEWTYPE.tags5
  tag.TagItem
  tag2.TagItem
  tag3.TagItem
  tag4.TagItem
  tag5.TagItem
  tagDone.TagItem
End NEWTYPE

NEWTYPE.tag5
ti_Tag.l
ti_Data.l
ti2_Tag.l
ti2_Data.l
ti3_Tag.l
ti3_Data.l
ti4_Tag.l
ti4_Data.l
ti5_Tag.l
ti5_Data.l
tiD_Tag.l
tiD_Data.l
End NEWTYPE

NEWTYPE.tag10
  ti_Tag.l
  ti_Data.l
  ti2_Tag.l
  ti2_Data.l
  ti3_Tag.l
  ti3_Data.l
  ti4_Tag.l
  ti4_Data.l
  ti5_Tag.l
  ti5_Data.l
  ti6_Tag.l
  ti6_Data.l
  ti7_Tag.l
  ti7_Data.l
  ti8_Tag.l
  ti8_Data.l
  ti9_Tag.l
  ti9_Data.l
  ti10_Tag.l
  ti10_Data.l
  tiD_Tag.l
  tiD_Data.l
End NEWTYPE

NEWTYPE.tagL10
  tag.TagItem[12]
End NEWTYPE


NEWTYPE.tagL20
  tag.TagItem[22]
End NEWTYPE


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.s = lindex {string.s,ind.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - string.s    : ???                                                         /
;/ - ind.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s lindex {string.s,ind.l}
ptr.l = &string
l.l   = FLen(string)
pos.l = 0
ret.s = ""
While ind>=0 AND pos<l

  Repeat ; consume spaces, returns and tabs
    c.l = Peek.b(ptr+pos) &$FF
    pos+1
  Until c>32 OR pos>=l

  curly.l  = 0
  quoted.l = 0
  Select c
    Case @"{" : curly+1
    Case $22  : quoted=1-quoted
    Case 0
    Default
      If ind=0 AND c>32 Then ret.s = Chr$(c)
  End Select

  If pos<l
    Repeat ; skip token
       c = Peek.b(ptr+pos) &$FF
       If ind=0 Then ret.s + Chr$(c)
       Select c
         Case @"{"
           If quoted=False
             If curly>0
               curly+1
             Else
               c=-1
             End If
           End If
         Case @"}"
           If quoted=False
             If curly>0
               curly-1
               If curly=0 Then c=-1
             Else
               ; unmatched bracked!
             End If
           End If
         Case $22
           If quoted
             quoted=0
             If curly=0 Then c=-1
           Else
             If curly=0 Then c=-1 : Else quoted=1
           End If
         Default
           If c<=32
             If curly  Then c + 256
             If quoted Then c + 256
             If c<=32 Then c=-1
           End If
       End Select
       pos+1
    Until c<=32 OR pos>=l
    If ind=0 AND c=-1 Then ret.s = Left$(ret.s,FLen(ret.s)-1)
  End If
  ind-1
Wend
Function Return ret.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.s = lindex {string.s,ind.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - string.s    : ???                                                         /
;/ - ind.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l llength{string.s}
ptr.l = &string
l.l   = FLen(string)
pos.l = 0
ret.s = ""
llength.l = 0
While pos<l

  Repeat ; consume spaces, returns and tabs
    c.l = Peek.b(ptr+pos) &$FF
    pos+1
  Until c>32 OR pos>=l

  curly.l  = 0
  quoted.l = 0
  Select c
    Case @"{" : curly+1
    Case $22  : quoted=1-quoted
    Case 0
    Default
  End Select

  If pos<l
    Repeat ; skip token
       c = Peek.b(ptr+pos) &$FF
       Select c
         Case @"{"
           If quoted=False
             If curly>0
               curly+1
             Else
               c=-1
             End If
           End If
         Case @"}"
           If quoted=False
             If curly>0
               curly-1
               If curly=0 Then c=-1
             Else
               ; unmatched bracked!
             End If
           End If
         Case $22
           If quoted
             quoted=0
             If curly=0 Then c=-1
           Else
             If curly=0 Then c=-1 : Else quoted=1
           End If
         Default
           If c<=32
             If curly  Then c + 256
             If quoted Then c + 256
             If c<=32 Then c=-1
           End If
       End Select
       pos+1
    Until c<=32 OR pos>=l
  End If
  llength+1
Wend
Function Return llength
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.s = lindex {string.s,ind.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - string.s    : ???                                                         /
;/ - ind.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ltail {string.s,ind.l}
ptr.l = &string
l.l   = FLen(string)
pos.l = 0
ret.s = ""
While ind>0 AND pos<l

  Repeat ; consume spaces, returns and tabs
    c.l = Peek.b(ptr+pos) &$FF
    pos+1
  Until c>32 OR pos>=l

  curly.l  = 0
  quoted.l = 0
  Select c
    Case @"{" : curly+1
    Case $22  : quoted=1-quoted
    Case 0
    Default
  End Select

  If pos<l
    Repeat ; skip token
       c = Peek.b(ptr+pos) &$FF
       Select c
         Case @"{"
           If quoted=False
             If curly>0
               curly+1
             Else
               c=-1
             End If
           End If
         Case @"}"
           If quoted=False
             If curly>0
               curly-1
               If curly=0 Then c=-1
             Else
               ; unmatched bracked!
             End If
           End If
         Case $22
           If quoted
             quoted=0
             If curly=0 Then c=-1
           Else
             If curly=0 Then c=-1 : Else quoted=1
           End If
         Default
           If c<=32
             If curly  Then c + 256
             If quoted Then c + 256
             If c<=32 Then c=-1
           End If
       End Select
       pos+1
    Until c<=32 OR pos>=l
  End If
  ind-1
Wend
ret = Right$(string,FLen(string)-pos)
Function Return ret
End Function



Function.s float2str{f.f}

  If f<-0.000001 Then a.s = "-" : f=-f + 0.000005 : Else a.s = "" : f + 0.000005
  l.l = Int(f)
  f-l
  If l=0
    a.s + "0"
  Else
    it.s = ""
    While (l>0) : nl.l = l/10 : n.l = l-nl*10 : l = nl : it=Chr$(n+@"0")+it : Wend
    a + it
  End If
  f * 100000.0
  c.l = Int(f) MOD 100000
  ;If c>0
    a.s + "."
    For i.l=0 To 4
      nc.l = c/10 : n = c-nc*10 : c=nc
      fr.s = Chr$(n+@"0") +fr
    Next
    a + fr
  ;End If
  Function Return a
End  Function

Function.s double2str{f.d}

  If f<-0.0000001 Then a.s = "-" : f=-f + 0.0000001 : Else a.s = "" : f + 0.0000001
  l.l = Int(f)
  f-l
  If l=0
    a.s + "0"
  Else
    it.s = ""
    While (l>0) : nl.l = l/10 : n.l = l-nl*10 : l = nl : it=Chr$(n+@"0")+it : Wend
    a + it
  End If
  f*100000.0
  c.l = Int(f)
  c.l = c MOD 100000
  ;If c>0
    a.s + "."
    For i.l=0 To 4
      nc.l = c/10 : n = c-nc*10 : c=nc
      fr.s = Chr$(n+@"0") +fr
    Next
    a + fr
  ;End If
  Function Return a
End  Function


CNIF #__include=0
XINCLUDE "convert.include.ab3"
x.l = 100000
a.l = 200000
b.l = 400000
y.l = 0
!mul48{x,a,b,y}
NPrint y, "q=",s48q," r=",s48r," y=",(s48a * s48q) + ((s48r * s48a) / s48b)
y = con_Mul48{x,a,b}

NPrint y
For f.f=-2 To 2 Step 0.005
NPrint float2str{f}
Next
End
CEND

