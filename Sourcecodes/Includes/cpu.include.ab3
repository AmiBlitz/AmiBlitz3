; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "CPUDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 5
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = "pre"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: cpu.include                                                           /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, AmigaOS4, MOS                         /
;/                                                                             /
;/ Date: 11.03.2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements: Amiblitz2.4                                                   /
;/                                                                             /
;/ Purpose:                                                                    /
;/ This include has some functions to determine the system CPU/FPU and to se:: /
;/ t some FPU flags.                                                           /
;/                                                                             /
;/ Abstract:                                                                   /
;/ Under emulated 68K, it will report the 68K CPU, not the host CPU.           /
;/                                                                             /
;/ User Constants:    none                                                     /
;/                                                                             /
;/ Example:                                                 none               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#emu_none     = 0
#emu_uae      = 1
#emu_amithlon = 2
#emu_amigaxl  = 3

CNIF @#AFF_68060=0
  #AFF_68060=(1 LSL 7) ; flag for 060 CPU, if not in all.res
CEND


CNIF #__include=0
CEND

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !getfpcr_x                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ This macro reads the FPU flag. It is already compiled in all.res, this is:: /
;/  why it has _x at the end to avoid name clashing.                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro getfpcr_x
Dc.l $f200b000
`1=PutRegD0
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !setfpcr_x                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ This macro sets the FPU flag. It is already compiled in all.res, this is :: /
;/ why it has _x at the end to avoid name clashing.                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro setfpcr_x
GetRegD0 `1
Dc.l $f2009000
End Macro





;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.b = GetEmu {}                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.b     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.b GetEmu {}
emu.b = #emu_none
  If FindConfigDev_ (0,2011,1)  Then emu = #emu_uae ; UAE RAM Expansion
  If FindConfigDev_ (0,2011,96) Then emu = #emu_uae ; UAE Graphics Expansion
  If FindConfigDev_ (0,2011,2)  Then emu = #emu_uae ; UAE HD Controller
  If FindConfigDev_ (0,2011,3)  Then emu = #emu_uae ; UAE RAM Expansion
  If FindConfigDev_ (0,5001,200)   Then emu = #emu_amithlon ; UAE RAM Expansion

Function Return emu
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  cou.b = GetCPU {}                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Check for 68k CPU.                                                          /
;/ NOTE: The peek on address 4 might cause a enforcer hit !                    /
;/ The result is:                                                              /
;/ 6 : 68060                                                                   /
;/ 4 : 68040                                                                   /
;/ 3 : 68030                                                                   /
;/ 2 : 68020                                                                   /
;/ 1 : 68010                                                                   /
;/ 0 : 68000                                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - cou.b     : cpu id                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.b GetCPU {}
  cpu.b=0
  *e.ExecBase = execbase ; Peek.l(4)
  If *e
  If *e\AttnFlags & #AFF_68010          ; gotta do it like this,
    If *e\AttnFlags & #AFF_68020        ; cos each processor has the
      If *e\AttnFlags & #AFF_68030      ; flags of the previous processor
        If *e\AttnFlags & #AFF_68040    ; set, too...
          If *e\AttnFlags & #AFF_68060
            cpu=6
          Else cpu=4
          EndIf
        Else cpu=3
        EndIf
      Else cpu=2
      EndIf
    Else cpu=1
    EndIf
  Else cpu=0
  EndIf
  EndIf
Function Return cpu
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  fpu.b = GetFPU {}                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ 0 = No FPU                                                                  /
;/ 1 = 68881 FPU                                                               /
;/ 2 = 68882 FPU                                                               /
;/ 3 = 68040 FPU (no math emulation) ; 040.library not loaded                  /
;/ 4 = 68040 FPU (math emulation)                                              /
;/ 5 = 68060 FPU (no math emulation) ; 060.library not loaded                  /
;/ 6 = 68060 FPU (math emulation)                                              /
;/                                                                             /
;/ Result:                                                                     /
;/ - fpu.b     : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.b GetFPU {}
  fpu.b=0
  *e.ExecBase = execbase; Peek.l(4)
  If *e
  If *e\AttnFlags & #AFF_68881
    If *e\AttnFlags & #AFF_68882
      fpu=2
    Else fpu=1
    EndIf
    If *e\AttnFlags & #AFF_FPU40
      fpu=4                         ; 68040 FPU (math emulation)
      If *e\AttnFlags & #AFF_68060  ; check for 060...
        fpu=6                       ; 68060 FPU (math emulation)
      EndIf
    EndIf
  Else fpu=0                        ; No 68881 or 68882
    If *e\AttnFlags & #AFF_FPU40    ; check if it's an 040 without 6888x
      fpu=3                         ; 68040 FPU (no math emulation)
      If *e\AttnFlags & #AFF_68060  ; check for 060...
        fpu=5                       ; 68060 FPU (no math emulation)
      EndIf
    EndIf
  EndIf
  EndIf
Function Return fpu
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = GetCPUText {cpu.b}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ fpu=4                       ; 68040 FPU (math emulation)                    /
;/ fpu=6                       ; 68060 FPU (math emulation)                    /
;/ fpu=3                       ; 68040 FPU (no math emulation)                 /
;/ fpu=5                       ; 68060 FPU (no math emulation)                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - cpu.b    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s GetCPUText {cpu.b}
Select cpu
  Case 0
    a.s = "MC68000"
  Case 1
    a.s = "MC68010"
  Case 2
    a.s = "MC68020"
  Case 3
    a.s = "MC68030"
  Case 4
    a.s = "MC68040"
  Case 5
    a.s = "MC68050 (?)"
  Case 6
    a.s = "MC68060"
  Default
    a.s = "Unknown CPU"
End Select
Function Return a.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = GetFPUText {fpu.b}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fpu.b    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s GetFPUText {fpu.b}
Select fpu
  Case 0
    a.s = "no FPU"
  Case 1
    a.s = "68881 FPU"
  Case 2
    a.s = "68882 FPU"
  Case 3
    a.s = "FPU build-in"
  Case 4
    a.s = "FPU build-in"
  Case 5
    a.s = "FPU build-in"
  Case 6
    a.s = "FPU build-in"
  Default
    a.s = "Unknown FPU"
End Select
Function Return a.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = GetEmuText {emu.b}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - emu.b    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s GetEmuText {emu.b}
Select emu
  Case #emu_none
    a.s = "real"
  Case #emu_uae
    a.s = "UAE"
  Case #emu_amithlon
    a.s = "Amithlon"
  Case #emu_amigaxl
    a.s = "AmigaXL"
  Default
    a.s = "unknown"
End Select
Function Return a.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = GetFPUFlags {}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l GetFPUFlags {}
flags.l = 0
!getfpcr_x {flags}
Function Return flags
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: SetFPUFlags {@flags.l}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - flags.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement SetFPUFlags {@flags.l}
If flags=-1 Then flags = 0
!setfpcr_x {flags}
End Statement

CNIF #__include=0
cpu.b = GetCPU {}
fpu.b = GetFPU {}
emu.b = GetEmu {}
NPrint "You are running ",GetEmuText{emu}," on a ",GetCPUText{cpu}," with ",GetFPUText{fpu}
Delay_ 200
End
CEND


