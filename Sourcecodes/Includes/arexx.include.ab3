; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "c:"
; ExeFile         = "AREXXDemor"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 229
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = "PATH=music:boehm_remote/sounds"
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 696
; CursorColumn    = 5
; LabelSearch     = "rexxdemo_send"
; LabelRemark     = 0
; LabelAll        = 1
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 5
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 5
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 100
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: arexx.include                                                         /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 11.03.2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements: ARexx, Amiblitz2.4                                            /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Provide an AREXX port to your program.                                      /
;/                                                                             /
;/ Abstract:                                                                   /
;/ This include enables your program easily to use AREXX.                      /
;/ This include does not use blitzlibs anymore!                                /
;/                                                                             /
;/ User Constants:                                                             /
;/ How many ARexx messages can be in queue at a time                           /
;/ #max_rexxmessages = 200                                                     /
;/                                                                             /
;/ Timeout in ticks (1/50 sec) for a reply                                     /
;/ #rexx_timeout      = 500                                                    /
;/                                                                             /
;/ Example:                                                                    /
;/ Send an AREXX message:                                                      /
;/ __________________________________________________________________ snip!    /
;/ XINCLUDE "arexx.include.ab3"                                                /
;/                                                                             /
;/ If arexx_Init{"MyAREXXPort"}                                                /
;/   succ.l = arexx_SendMessage{"AMIGAAMP","PLAY"}                             /
;/ End if                                                                      /
;/ End                                                                         /
;/ __________________________________________________________________ snip!    /
;/                                                                             /
;/ Open an AREXX port and wait for QUIT message:                               /
;/ __________________________________________________________________ snip!    /
;/ XINCLUDE "arexx.include.ab3"                                                /
;/                                                                             /
;/ If arexx_Init{"MyAREXXPort"}                                                /
;/   While breakme.l=False                                                     /
;/     signals.l = Wait_(-1)                                                   /
;/     If arexx_GetMsg{}                                                       /
;/       NPrint "Got message from: ",arexx_GetSenderName{}                     /
;/       message.s = arexx_GetNextString{}                                     /
;/       Select UCase$(message.s)                                              /
;/         Case "QUIT"                                                         /
;/           breakme=True                                                      /
;/           Default                                                           /
;/             NPrint "Message: ",message.s                                    /
;/       End Select                                                            /
;/     End If                                                                  /
;/   Wend                                                                      /
;/ End If                                                                      /
;/ End                                                                         /
;/ __________________________________________________________________ snip!    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
SYNTAX 2
OPTIMIZE 7
CEND

CNIF @#MAX_AREXXMESSAGES=0     ; How many ARexx messages can be in queue
#MAX_AREXXMESSAGES = 200
CEND
CNIF @#AREXX_TIMEOUT=0         ; Timeout in ticks for reply
#AREXX_TIMEOUT = 10*50
CEND

XINCLUDE "error.include.ab3"
XINCLUDE "useful.include.ab3"

NEWTYPE.outRexxMsg
*msg.RexxMsg
id.l
timeout.l
End NEWTYPE

NEWTYPE.AREXX
*port.MsgPort
portName.s

result1.l
result2.l
resultString.s

*inMsg.RexxMsg
inString.s
inPortName.s
inAction.l
End NEWTYPE

Dim List arexxOutMsg.outRexxMsg(#MAX_AREXXMESSAGES-1)

#AREXX_RETURNMSG  = -2
#AREXX_NEWMSG     = -1
#AREXX_ERROR      = -3
#AREXX_NOMSG      = 0

SHARED AREXX.AREXX
SHARED arexxOutMsg()
USEPATH AREXX

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = arexx_GetLine{}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s arexx_GetCommandString{}
Function Return \inString
End Function
 

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = arexx_GetNextString{}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Return the next argument of the message, or the empty string if there are:: /
;/  no more arguments.                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : argument string                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s arexx_GetNextString{}
a.s = \inString
While Left$(a.s,1)=" "                        ; remove spaces
  a.s = Right$(a.s,FLen(a.s)-1)
Wend
finished.w = False
quoted.w   = False
quoted2.w  = False

While finished=False
  c.s = Left$(a.s,1)
  Select c.s
    Case ""
      finished = True

    Case " "
      If quoted = False AND quoted2 = False Then finished = True:c.s = ""

    Case "\\22"
      If quoted = True
        quoted = False
        If quoted2=False
          finished = True
          c.s = ""
        End If
      Else
        quoted=True
        If quoted2=False Then c.s = ""
      End If

    Case "'"
      If quoted2 = True
        quoted2 = False
        If quoted=False
          c.s = ""
          finished = True
        End If
      Else
        quoted2=True
        If quoted=False Then c.s = ""
      End If

  End Select
  b.s = b.s + c.s
  a.s = Right$(a.s,FLen(a.s)-1)
Wend
\inString = a.s
Function Return b.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = arexx_GetNextValue{}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_GetNextValue{}
Function Return Vallong(arexx_GetNextString{})
End Function

Function.l arexx_GetResult1{}
Function Return \result1
End Function

Function.l arexx_GetResult2{}
Function Return \result2
End Function

Function.s arexx_GetResultString{}
Function Return \resultString
End Function
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.f = arexx_GetNextFloat{}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.f     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.f arexx_GetNextFloat{}
Function Return Val(arexx_GetNextString{})
End Function
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = arexx_GetSender{}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ Return the name of the AREXX port of the sender of the last received mess:: /
;/ age.                                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : name of the AREXX port                                     /
;/                                                                             /
;/ See also:    arexx_check                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s arexx_GetSenderName{}
Function Return \inPortName
End Function

Function.l arexx_GetAction{}
Function Return \inAction
End Function

Function.s arexx_GetError{result1.l,result2.l}
Select result2
  Case 0 : error.s = "ok"
  Case 1 : error.s = "program not found"
  Case 2 : error.s = "execution halted"
  Case 3 : error.s = "no memory available"
          ; unassigned
  Case 5 : error.s = "unmatched quote"
  Case 6 : error.s = "unterminated comment"
            ; unassigned
  Case 8 : error.s = "unrecognized token"
  Case 9 : error.s = "symbol or string too long"
  Case 10 : error.s = "invalid message packet"
  Case 11 : error.s = "command string error"
  Case 12 : error.s = "error return from function"
  Case 13 : error.s = "host environment not found"
  Case 14 : error.s = "required library not available"
  Case 15 : error.s = "function not found"
  Case 16 : error.s = "function did not return value"
  Case 17 : error.s = "wrong number of arguments"
  Case 18 : error.s = "invalid argument to function"
  Case 19 : error.s = "invalid PROCEDURE instruction"
  Case 20 : error.s = "unexpected THEN/ELSE"
  Case 21 : error.s = "unexpected WHEN/OTHERWISE"
  Case 22 : error.s = "unexpected BREAK, LEAVE or ITERATE"
  Case 23 : error.s = "invalid statement in SELECT"
  Case 24 : error.s = "missing or multiple THEN clauses"
  Case 25 : error.s = "missing OTHERWISE"
  Case 26 : error.s = "missing or unexpected END"
  Case 27 : error.s = "symbol mismatch on END/LEAVE/ITERATE"
  Case 28 : error.s = "invalid 'DO' syntax"
  Case 29 : error.s = "incomplete DO/IF/SELECT"
  Case 30 : error.s = "label not found"
  Case 31 : error.s = "symbol expected"
  Case 32 : error.s = "string or symbol expected"
  Case 33 : error.s = "invalid sub-keyword"
  Case 34 : error.s = "required keyword missing"
  Case 35 : error.s = "extraneous characters in clause"
  Case 36 : error.s = "sub-keyword conflict"
  Case 37 : error.s = "invalid template"
            ; unassigned
  Case 39 : error.s = "uninitialized variable"
  Case 40 : error.s = "invalid variable name"
  Case 41 : error.s = "invalid expression"
  Case 42 : error.s = "unbalanced parentheses"
  Case 43 : error.s = "nesting level exceeded"
  Case 44 : error.s = "invalid expression result"
  Case 45 : error.s = "expression required"
  Case 46 : error.s = "boolean value not 0 or 1"
  Case 47 : error.s = "arithmetic conversion error"
  Case 48 : error.s = "invalid operand"
  Default : error.s = "Unknown AREXX error code"
End Select

;/* Return Codes For general Use ...   */
Select result1
  Case  -1 : gen.s = "ERROR"       ; something's wrong
  Case   0 : gen.s = "Success"     ; success
  Case   5 : gen.s = "WARNING"     ; A warning only
  Case  10 : gen.s = "ERROR"       ; Something wrong
  Case  20 : gen.s = "FATAL"       ; Complete or severe failure
  Default  : gen.s = "???"
End Select

Function Return "("+Str$(result1)+"/"+Str$(result2)+") - "+gen+": "+error
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = arexx_ReplyMsg{ result.l,@string.s}                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - result.l    : ???                                                         /
;/ - string.s    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_ReplyMsg{result.l}
succ.l = False
If \inMsg
  \inMsg\rm_Result1 = result,0
  ReplyMsg_ \inMsg : \inMsg = #NULL : succ=True
End If
Function Return succ
End Function


Function.l arexx_ReplyMsgString{string.s}
succ.l = False
If \inMsg
  \inMsg\rm_Result1 = 0,0
  If (\inMsg\rm_Action & #RXFF_RESULT)
    argstring.l = CreateArgstring_(&string,FLen(string))
    \inMsg\rm_Result1 = 0,argstring
  End If
  ReplyMsg_ \inMsg : \inMsg = #NULL : succ=True
End If
Function Return succ
End Function


Function.l arexx_FailMsg{errcode.l}
succ.l = False
If \inMsg
  \inMsg\rm_Result1 = 10,errcode
  ReplyMsg_ \inMsg : \inMsg = #NULL : succ=True
End If
Function Return succ
End Function
 



Statement _arexx_FreeCommand{*rexxMsg.RexxMsg}
If (*rexxMsg\rm_Result1=0 AND *rexxMsg\rm_Result2><0) Then DeleteArgstring_ *rexxMsg\rm_Result2 : *rexxMsg\rm_Result2=0
;If (*rexxMsg\rm_Stdin)  Then ; may close it?
;If (*rexxMsg\rm_Stdout) Then ; may close it?
If *rexxMsg\rm_Args[0] Then DeleteArgstring_ *rexxMsg\rm_Args[0] : *rexxMsg\rm_Args[0]=#NULL
DeleteRexxMsg_ *rexxMsg
End Statement


Function.l _arexx_CreateCommand{message.s}
*rexxMsg.RexxMsg = CreateRexxMsg_(AREXX\port,#NULL,AREXX\port\mp_Node\ln_Name)
If *rexxMsg=#NULL Then Function Return #NULL
*rexxMsg\rm_Args[0] = CreateArgstring_ (&message,FLen(message))
If *rexxMsg\rm_Args[0]=#NULL
  DeleteRexxMsg_ *rexxMsg
  Function Return #NULL
End If

*rexxMsg\rm_Action = #RXCOMM | #RXFF_RESULT
*rexxMsg\rm_Stdin  = #NULL
*rexxMsg\rm_Stdout = #NULL

Function Return *rexxMsg
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.l = arexx_GetMsg{@blocking.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ Check for new AREXX messages. If it returns success, the message and its :: /
;/ arguments can be received by calling arexx_nextarg, till this function re:: /
;/ turns an empty string.                                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - blocking.l  : do not reply message immidiately - wait for arexx_ReplyMsg or next call of arexx_Getsg{}                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.w     : -1 if there is a new message, 1 if a message was answered and 0 otherwise                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_GetMsg{lateReply.l}
succ.l = #AREXX_NOMSG
If \port=#NULL Then Function Return False
If \inMsg Then arexx_ReplyMsg{0}
*msg.RexxMsg = GetMsg_(\port)
If *msg
  ResetList arexxOutMsg()
  While NextItemFast(arexxOutMsg())
    If arexxOutMsg()\msg = *msg
      \result1   = *msg\rm_Result1
      \result2   = *msg\rm_Result2
      \resultString = ""
      If *msg\rm_Result1  = 0
        If *msg\rm_Result2 Then \resultString = Peek.s(*msg\rm_Result2)
      End If

      If *msg\rm_Result1><0
        l.l = LengthArgstring_ (*msg\rm_Args[0])
        If l>0
          s.s = Peeks$(*msg\rm_Args[0],l)
        Else
          s.s = ""
        End If
        error{"AREXX Error:\\n"+arexx_GetError{*msg\rm_Result1,*msg\rm_Result2}+"\\nWhile Executing:\\n"+s+"\\nResult = \\22"+\resultString+"\\22"}
      End If
      _arexx_FreeCommand{*msg} : *msg=#NULL
      succ = arexxOutMsg()\id
      KillItem arexxOutMsg()
    Else
      arexxOutMsg()\timeout-1
      If arexxOutMsg()\timeout=0
        name.s = "..."
        If ask{"AREXX timeout! - "+name+" does not respond!","Try again|Cancel"}=False
          If arexxOutMsg()\id=#AREXX_RETURNMSG Then succ=#AREXX_ERROR
          ;KillItem arexxOutMsg()
        Else
          arexxOutMsg()\timeout = #AREXX_TIMEOUT
        End If
      End If
    End If
  Wend

  If *msg
    If IsRexxMsg_(*msg)
      l.l = LengthArgstring_ (*msg\rm_Args[0])
      If l > 0
        \inString = Peeks$(*msg\rm_Args[0],l)
      Else
        \inString = ""
      End If
      \inAction = *msg\rm_Action
      \inMsg = *msg
      \inPortName="Unknown"
      If *msg\rm_PassPort
        If *msg\rm_PassPort\mp_Node
          If *msg\rm_PassPort\mp_Node\ln_Name
            \inPortName = Peek.s(*msg\rm_PassPort\mp_Node\ln_Name)
          End If
        End If
      Else
        \inPortName = Peek.s(*msg\rm_Node\mn_Node\ln_Name)
      End If
      succ = #AREXX_NEWMSG
      If lateReply=False Then arexx_ReplyMsg{0}
    Else
      error {"Got message that is not a rexx message!"}
      ReplyMsg_ *msg
    End If
  End If
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = arexx_Execute{port.s,arexxline.s,@blocking.l}           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - arexxline.s    : ???                                                      /
;/ - blocking.l    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w arexx_Execute{arexxline.s,@id.l}
succ.w = False
If id=-1 Then id=#AREXX_RETURNMSG
If \port = #NULL Then Function Return False ;/* no outport defined !*/
If port.s="" Then port="REXX"
*rxport.MsgPort=FindPort_ (&port)
If *rxport=#NULL Then Function Return False

*msg.RexxMsg = _arexx_CreateCommand{arexxline}
If *msg
  PutMsg_ *rxport,*msg

  If AddLast(arexxOutMsg())
    arexxOutMsg()\timeout = #AREXX_TIMEOUT
    arexxOutMsg()\msg     = *msg
    arexxOutMsg()\id      = id
    succ=True
  End If

  If succ
    If id=#AREXX_RETURNMSG
      nid.l = #AREXX_NOMSG
      Repeat
        nid.l = arexx_GetMsg{0} : Delay_ 1
      Until nid=#AREXX_RETURNMSG OR nid=#AREXX_ERROR
      If nid=#AREXX_ERROR Then succ=False:Else succ=True
    End If
  End If

End If
Function Return succ
End Function


Function.w arexx_SendMessageX{port.s,message.s,@id.l}
succ.w = False
If id=-1 Then id=#AREXX_RETURNMSG
If \port = #NULL Then Function Return False ;/* no outport defined !*/
If port.s="" Then port="REXX"
*rxport.MsgPort=FindPort_ (&port)
If *rxport=#NULL Then Function Return False

*msg.RexxMsg = _arexx_CreateCommand{message}
If *msg
  PutMsg_ *rxport,*msg

  If AddLast(arexxOutMsg())
    arexxOutMsg()\timeout = #AREXX_TIMEOUT
    arexxOutMsg()\msg     = *msg
    arexxOutMsg()\id      = id
    succ=True
  End If

  If succ
    If id=#AREXX_RETURNMSG
      nid.l = #AREXX_NOMSG
      Repeat
        nid.l = arexx_GetMsg{0} : Delay_ 1
      Until nid=#AREXX_RETURNMSG OR nid=#AREXX_ERROR
      If nid=#AREXX_ERROR Then succ=False:Else succ=True
    End If
  End If

End If
Function Return succ
End Function
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.l = arexx_SendMsg{@blocking.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ Send the AREXX message that was prepared by arexx_newmessage and optional:: /
;/  calls of arexx_addarg.                                                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - blocking.l    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.w     : -1 if the message was send, 0 if it failed                   /
;/                                                                             /
;/ See also:    arexx_CreateMsg, arexx_AddString, arexx_AddValue               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_SendMessage{port.s,message.s,@id.l}
arexxline.s = "'ADDRESS "+port+" "+message+"'"
succ.l = arexx_Execute{arexxline,id}
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: arexx_Free{}                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Close the AREXX port created using arexx_open. Pending messages will be l:: /
;/ ost.                                                                        /
;/                                                                             /
;/ See also:    arexx_OpenPort                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement arexx_Free{}
If \port
  If \inMsg Then arexx_ReplyMsg{0}
  ResetList arexxOutMsg()
  While NextItemFast (arexxOutMsg())
    arexx_GetMsg{False}
    ResetList arexxOutMsg()
  Wend
  RemPort_ \port  : DeleteMsgPort_ \port
  \port  = #NULL
End If
End Statement
!autoexit{arexx_Free}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.l = arexx_Init{inportname.s,@outportname.s}                  /
;/                                                                             /
;/ Description:                                                                /
;/ Open an AREXX port for your program. This is needed in order to be able t:: /
;/ o receive AREXX commands from other programs.                               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - port_name.s    : name of your AREXX port                                  /
;/ - inportname.s    : ???                                                     /
;/ - outportname.s    : ???                                                    /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.w     : -1 if the port was opened, 0 if it failed                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_Init{portName.s}
SHARED AREXX
If \port Then arexx_Free{}
\port  = CreateMsgPort_()
If \port
  \portName = portName
  \port\mp_Node\ln_Name = &\portName
  \port\mp_Node\ln_Pri  = 0
  AddPort_ \port

  \inMsg     = #NULL
  \inString  = ""
End If
Function Return \port
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  port.l = arexx_FindPort{port.s}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ Find an AREXX port by name (usually of another application) and return it:: /
;/ s address pointer.                                                          /
;/ The function returns 0, if the port can not be found. This way you can ch:: /
;/ eck for the existence of an AREXX port.                                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - port.s    : name of the AREXX port to find                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - port.l     : AREXX port address                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_FindPort{port.s}
*msgport.MsgPort = FindPort_ (&port.s)
Function Return *msgport
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = arexx_GetInSigFlag{}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l arexx_GetSigFlag{}
SHARED AREXX
sigflag.l = 0
If \port Then sigflag.l = 1 LSL \port\mp_SigBit
Function Return sigflag
End Function

CNIF #__include=0

  #arexxdemo_send=0 ; 1 = sender, 0 = receiver

CNIF #arexxdemo_send
NPrint "Test Program that will send something to an AREXX Port."
If arexx_Init{"TEST_SEND"}
  NPrint "AREXX Port 'TEST_SEND' open..."
  ;succ.l = arexx_Execute{"'ADDRESS TEST \\22hallo!\\22'",False}
  succ.l = arexx_SendMessageX{"TEST","testXXX"}
  If succ Then NPrint "Sent!":Else NPrint "Unable to resolve host name!"
CELSE

NPrint "Test Program that listens to AREXX Port 'TEST'"
NPrint "Start a shell and type something like"
NPrint "1>rx 'ADDRESS TEST \\22This is a test!\\22'"
NPrint "to see how it works. If you send CTRL+C or quit,"
NPrint "the program will end."
NPrint "..."
If arexx_Init{"TEST"}
  NPrint "AREXX Port 'TEST' open..."

  breakme.l = False
  While breakme=False
    Delay_ 1
    signals.l = SetSignal_(0,-1)
    If (signals & #SIGBREAKF_CTRL_C) Then breakme=True
    n.l = 0
    While arexx_GetMsg{True}
      NPrint "\\n*** Got New AREXX Message ***"
      NPrint "Sender Port  : ",arexx_GetSenderName{}
      NPrint "Received Body: ",arexx_GetCommandString{}
      NPrint "Action-bits  : ",Bin$(arexx_GetAction{})
      Repeat
        a.s = arexx_GetNextString{}
        Select UCase$(a.s)
          Case "QUIT"
            breakme=True
          Case "DO"
            Print "wait"
            For x.l = 0 To 10:Delay_ 50 : Print ".":Next
            NPrint "done!"
        End Select
        If a.s >< "" Then NPrint "Argument[",n,"]: ",a.s
        n+1
      Until a.s = ""
      arexx_ReplyMsgString{"Hallo zur�ck!"}
    Wend
  Wend
CEND

  arexx_Free{}
  NPrint "AREXX Port 'TEST' closed."
Else
  NPrint "Unable to open AREXX port!"
End If
NPrint "done."
End

CEND




