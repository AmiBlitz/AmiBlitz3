; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "ConvertAudioDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 31
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 1
; Max GadgetList  = 1
; Max Queue       = 1
; Max Screen      = 2
; Max Shape       = 1
; Max CopList     = 1
; Max Sprite      = 1
; Max Stencil     = 1
; Max Module      = 1
; Max Window      = 30
; Max Anim        = 1
; Max Sound       = 1
; Max Bank        = 1
; Max Buffer      = 1
; Max BitMap      = 1
; Max Slice       = 1
; Max Page        = 1
; Max Tape        = 1
; Max IntuiFont   = 12
; Max MedModule   = 1
; Max Palette     = 1
; Max MenuList    = 1
; Max BlitzFont   = 1
; Max GTList      = 30
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: convert_audio.include                                                 /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, AmigaOS4, MOS                         /
;/                                                                             /
;/ Date: 11.03.2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements: Amiblitz2.4                                                   /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Provide some convertion functions for audio processing, mainly to convert:: /
;/  between 8, 16 and 24 bit.                                                  /
;/                                                                             /
;/ Abstract:                                                                   /
;/ Here you find some useful functions, that convert between different audio:: /
;/  data formats, and a resampling and big-endian vs. little-endian function.  /
;/                                                                             /
;/ User Constants:    none                                                     /
;/                                                                             /
;/ Example:                                                 none               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
CEND
XINCLUDE "convert.include.ab3"

RunErrsOff

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_8m_8m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}     /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 8bit mono to 8bit mono.                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_8m_8m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c8m8mloop:
MOVE.b (a0)+,(a1)+
SUB.l #1,d2
BGT c8m8mloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_24m_24m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 24bit mono to 24bit mono.                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_24m_24m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c24m24mloop:
MOVE.w (a0)+,(a1)+
MOVE.b (a0)+,(a1)+
SUB.l #1,d2
BGT c24m24mloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_24s_24s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 24bit stereo to 24bit stereo.                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_24s_24s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c24s24sloop:
MOVE.l (a0)+,(a1)+
MOVE.w (a0)+,(a1)+
SUB.l #1,d2
BGT c24s24sloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_24m_16m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 24bit mono to 16bit mono.                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_24m_16m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c24m16mloop:
MOVE.w (a0)+,(a1)+ : ADD.l #1,a0
SUB.l #1,d2
BGT c24m16mloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_24m_16m_im {sourceaddr.l,destaddr.l,flength.l,mode.l,quality:: /
;/ .l}                                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 24bit mono to 16bit mono.                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_24m_16m_im {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c24m16mloop_im:
MOVE.b 2(a0),d0
ASL.l #8,d0
MOVE.b 1(a0),d0
ASL.l #8,d0
MOVE.b 0(a0),d0
ASR.l #8,d0
MOVE.w d0,(a1)+ : ADD.l #3,a0
SUB.l #1,d2
BGT c24m16mloop_im
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_24s_16s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 24bit stereo to 16bit stereo.                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_24s_16s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c24s16sloop:
MOVE.w (a0)+,(a1)+ : ADD.l #1,a0
MOVE.w (a0)+,(a1)+ : ADD.l #1,a0
SUB.l #1,d2
BGT c24s16sloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_24s_16s_im {sourceaddr.l,destaddr.l,flength.l,mode.l,quality:: /
;/ .l}                                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 24bit stereo to 16bit stereo.                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_24s_16s_im {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c24s16sloop_im:
MOVE.b 2(a0),d0
ASL.l #8,d0
MOVE.b 1(a0),d0
ASL.l #8,d0
MOVE.b 0(a0),d0
ASR.l #8,d0
MOVE.w d0,(a1)+ : ADD.l #3,a0
MOVE.b 2(a0),d0
ASL.l #8,d0
MOVE.b 1(a0),d0
ASL.l #8,d0
MOVE.b 0(a0),d0
ASR.l #8,d0
MOVE.w d0,(a1)+ : ADD.l #3,a0
SUB.l #1,d2
BGT c24s16sloop_im
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_24m_8m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 24bit mono to 8bit mono.                                       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_24m_8m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c24m8mloop:
MOVE.b (a0)+,(a1)+ : ADD.l #2,a0
SUB.l #1,d2
BGT c24m8mloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_24s_8s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 24bit stereo to 8bit stereo.                                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_24s_8s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c24s8sloop:
MOVE.b (a0)+,(a1)+ : ADD.l #2,a0
MOVE.b (a0)+,(a1)+ : ADD.l #2,a0
SUB.l #1,d2
BGT c24s8sloop
RTS
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16m_24m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 16bit mono to 24bit mono.                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16m_24m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c16m24mloop:
MOVE.w (a0)+,(a1)+ : MOVE.b #0,(a1)+
SUB.l #1,d2
BGT c16m24mloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16s_24s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 16bit stereo to 24bit stereo.                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16s_24s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c16s24sloop:
MOVE.w (a0)+,(a1)+ : MOVE.b #0,(a1)+
MOVE.w (a0)+,(a1)+ : MOVE.b #0,(a1)+
SUB.l #1,d2
BGT c16s24sloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_8m_24m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 8bit mono to 24bit mono.                                       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_8m_24m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c8m24mloop:
MOVE.b (a0)+,(a1)+ : MOVE.w #0,(a1)+
SUB.l #1,d2
BGT c8m24mloop
RTS
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_8m_24s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_8m_24s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c8m24sloop:
MOVE.b (a0),(a1)+ : MOVE.w #0,(a1)+
MOVE.b (a0)+,(a1)+ : MOVE.w #0,(a1)+
SUB.l #1,d2
BGT c8m24sloop
RTS
End Statement
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_8s_24s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 8bit stereo to 24bit stereo.                                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_8s_24s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c8s24sloop:
MOVE.b (a0)+,(a1)+ : MOVE.w #0,(a1)+
MOVE.b (a0)+,(a1)+ : MOVE.w #0,(a1)+
SUB.l #1,d2
BGT c8s24sloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_8m_8s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}     /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 8bit mono to 8bit stereo.                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_8m_8s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
ADD.l d2,a0
LSL.l #1,d2
ADD.l d2,a1
m2s8loop:
MOVE.b -(a0),-(a1)
MOVE.b  (a0),-(a1)
SUB.l #2,d2
BGT m2s8loop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_8m_16m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 8bit mono to 16bit mono.                                       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_8m_16m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
ADD.l d2,a0
LSL.l #1,d2
ADD.l d2,a1
c816loop:
MOVE.b -(a0),d0
LSL.w #8,d0
MOVE.w d0,-(a1)
SUB.l #2,d2
BGT c816loop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_8m_16s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 8bit mono to 16bit stereo.                                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_8m_16s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
ADD.l d2,a0
LSL.l #2,d2
ADD.l d2,a1
c816sloop:
MOVE.b -(a0),d0
LSL.w #8,d0
MOVE.w d0,-(a1)
MOVE.w d0,-(a1)
SUB.l #4,d2
BGT c816sloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_8s_8m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}     /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 8bit stereo to 8bit mono.                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_8s_8m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l} ; mode: -1=right, 0=both, 1=left quality: 0=fast
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
TST.l d3
BGT s2m8leftl
BLT s2m8rightl
TST.l d4
BNE s2m8qloop

s2m8loop:
MOVE.b (a0)+,d0  : ASR.b #1,d0
MOVE.b (a0)+,d1  : ASR.b #1,d1
ADD.b d0,d1
MOVE.b d1,(a1)+
SUB.l #1,d2
BGT s2m8loop
RTS

s2m8qloop:
MOVE.b (a0)+,d0  : EXT.w d0
MOVE.b (a0)+,d1  : EXT.w d1
ADD.w d0,d1
ASR.w #1,d1
MOVE.b d1,(a1)+
SUB.l #1,d2
BGT s2m8qloop
RTS

s2m8leftl:
MOVE.b (a0),(a1)+
ADD.l #2,a0
SUB.l #1,d2
BGT s2m8leftl
RTS

s2m8rightl:
ADD.l #1,a0
MOVE.b (a0)+,(a1)+
SUB.l #1,d2
BGT s2m8rightl
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_8s_8s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}     /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 8bit stereo to 8bit stereo.                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_8s_8s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c8s8sloop:
MOVE.w (a0)+,(a1)+
SUB.l #1,d2
BGT c8s8sloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_8s_16m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 8bit stereo to 16bit mono.                                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_8s_16m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l} ; quality not used
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
TST.l d3
BGT s82m16leftl
BLT s82m16rightl

s82m16loop:
MOVE.b (a0)+,d0 : EXT.w d0
MOVE.b (a0)+,d1 : EXT.w d1
ADD.w d0,d1
LSL.w #7,d1
MOVE.w d1,(a1)+
SUB.l #1,d2
BGT s82m16loop
RTS

s82m16leftl:
MOVE.w (a0)+,d0
AND.w #%1111111100000000,d0
MOVE.w d0,(a1)+
SUB.l #1,d2
BGT s82m16leftl
RTS

s82m16rightl:
MOVE.w (a0)+,d0
LSL.w #8,d0
MOVE.w d0,(a1)+
SUB.l #1,d2
BGT s82m16rightl
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_8s_16s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 8bit stereo to 16bit stereo.                                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_8s_16s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
LSL.l #1,d2
ADD.l d2,a0
LSL.l #1,d2
ADD.l d2,a1
c8s16sloop:
MOVE.b -(a0),d0  : LSL.w #8,d0
MOVE.w d0,-(a1)
MOVE.b -(a0),d0  : LSL.w #8,d0
MOVE.w d0,-(a1)
SUB.l #4,d2
BGT c8s16sloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16m_8m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 16bit mono to 8bit mono.                                       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16m_8m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
TST.l d4
BNE c16m8mqloop

c16m8mloop:
MOVE.w (a0)+,d0
LSR.w #8,d0
MOVE.b d0,(a1)+
SUB.l #1,d2
BGT c16m8mloop
RTS

c16m8mqloop:
MOVE.w (a0)+,d0
ASR.w #7,d0
ADD.w #1,d0
ASR.w #1,d0
MOVE.b d0,(a1)+
SUB.l #1,d2
BGT c16m8mqloop
RTS
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_32m_8m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_32m_8m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1

c32m8mqloop:
MOVE.l (a0)+,d0
ASR.l #8,d0
ASR.l #8,d0
ASR.w #7,d0
ADD.w #1,d0
ASR.w #1,d0
MOVE.b d0,(a1)+
SUB.l #1,d2
BGT c32m8mqloop
RTS
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_32m_16m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_32m_16m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
TST.l d4

c32m16mqloop:
MOVE.l (a0)+,d0
ASR.l #8,d0
ASR.l #7,d0
ADD.l #1,d0
ASR.l #1,d0
MOVE.w d0,(a1)+
SUB.l #1,d2
BGT c32m16mqloop
RTS
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_32m_24m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_32m_24m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1

c32m24mqloop:
MOVE.l (a0)+,d0
ASR.l #7,d0
ADD.l #1,d0
ASR.l #1,d0
MOVE.b d0,2(a1)
LSR.l #8,d0
MOVE.b d0,1(a1)
LSR.l #8,d0
MOVE.b d0,(a1)
ADD.l #3,a1
SUB.l #1,d2
BGT c32m24mqloop
RTS
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_32s_24s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_32s_24s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
conv_32m_24m {sourceaddr,destaddr,flength*2,mode,quality}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_32s_24m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_32s_24m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
TST.l d4

c32s24mqloop:
MOVE.l (a0)+,d0  : ASR.l #1,d0
MOVE.l (a0)+,d1  : ASR.l #1,d1
ADD.l d1,d0
ASR.l #7,d0
ADD.l #1,d0
ASR.l #1,d0
MOVE.b d0,2(a1)
LSR.l #8,d0
MOVE.b d0,1(a1)
LSR.l #8,d0
MOVE.b d0,(a1)
ADD.l #3,a1
SUB.l #1,d2
BGT c32s24mqloop
RTS
End Statement
 

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_32m_8s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_32m_8s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1

c32m8sqloop:
MOVE.l (a0)+,d0
ASR.l #8,d0
ASR.l #8,d0
ASR.w #7,d0
ADD.w #1,d0
ASR.w #1,d0
MOVE.b d0,(a1)+
MOVE.b d0,(a1)+
SUB.l #1,d2
BGT c32m8sqloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_32s_8s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_32s_8s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
conv_32m_8m {sourceaddr,destaddr,flength*2,mode,quality}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16m_8s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 16bit mono to 8bit stereo.                                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16m_8s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
TST.l d4
BNE c16m8sqloop

c16m8sloop:
MOVE.w (a0)+,d0
LSR.w #8,d0
MOVE.b d0,(a1)+
MOVE.b d0,(a1)+
SUB.l #1,d2
BGT c16m8sloop
RTS

c16m8sqloop:
MOVE.w (a0)+,d0
ASR.w #7,d0
ADD.w #1,d0
ASR.w #1,d0
MOVE.b d0,(a1)+
MOVE.b d0,(a1)+
SUB.l #1,d2
BGT c16m8sqloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16m_16m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 16bit mono to 16bit mono.                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16m_16m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
;UNLK a4
;MOVE.l d0,a0
;MOVE.l d1,a1
;c16m16mloop:
;MOVE.w (a0)+,(a1)+
;SUB.l #1,d2
;BGT c16m16mloop
;RTS
If sourceaddr><destaddr
  CopyMem_ sourceaddr,destaddr,flength*2
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16m_16s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 16bit mono to 16bit stereo.                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16m_16s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
LSL.l #1,d2
ADD.l d2,a0
LSL.l #1,d2
ADD.l d2,a1
m2s16loop:
MOVE.w -(a0),-(a1)
MOVE.w  (a0),-(a1)
SUB.l #4,d2
BGT m2s16loop
RTS
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_32m_32s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_32m_32s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
LSL.l #2,d2
ADD.l d2,a0
LSL.l #1,d2
ADD.l d2,a1
m2s32loop:
MOVE.l -(a0),-(a1)
MOVE.l  (a0),-(a1)
SUB.l #8,d2
BGT m2s32loop
RTS
End Statement
 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_32m_24s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_32m_24s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
LSL.l #2,d2
ADD.l d2,a0
LSR.l #1,d2
ADD.l d2,a1
ADD.l d2,a1
ADD.l d2,a1
m32m24sloop:
MOVE.l -(a0),d0
ASR.l #8,d0
MOVE.l d0,d1

SUB.l #3,a1
MOVE.b d0,2(a1)
LSR.l #8,d0
MOVE.b d0,1(a1)
LSR.l #8,d0
MOVE.b d0,(a1)

SUB.l #3,a1
MOVE.b d1,2(a1)
LSR.l #8,d1
MOVE.b d1,1(a1)
LSR.l #8,d1
MOVE.b d1,(a1)

SUB.l #2,d2
BGT m32m24sloop
RTS
End Statement
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_24m_32m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_24m_32m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
ADD.l d2,a0   ; 3x
ADD.l d2,a0
ADD.l d2,a0
LSL.l #2,d2
ADD.l d2,a1
m24m32loop:
SUB.l #3,a0
MOVE.b  (a0),d0 : LSL.l #8,d0
MOVE.b 1(a0),d0 : LSL.l #8,d0
MOVE.b 2(a0),d0 : LSL.l #8,d0
MOVE.l d0,-(a1)
SUB.l #4,d2
BGT m24m32loop
RTS
End Statement
 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_24s_32s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_24s_32s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
conv_24m_32m {sourceaddr,destaddr,flength*2,mode,quality}
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16m_32s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 16bit mono to 32bit stereo.                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16m_32s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
LSL.l #1,d2
ADD.l d2,a0
LSL.l #2,d2
ADD.l d2,a1
m2s32sloop:
MOVE.w -(a0),d0 : LSL.l #8,d0 : LSL.l #8,d0 : MOVE.l d0,-(a1)
MOVE.l  d0,-(a1)
SUB.l #8,d2
BGT m2s32sloop
RTS
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16m_32s_extent {sourceaddr.l,destaddr.l,flength.l,mode.l,qua:: /
;/ lity.l}                                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16m_32s_extent16 {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
LSL.l #1,d2
ADD.l d2,a0
LSL.l #2,d2
ADD.l d2,a1
m2s32sloope:
MOVE.w -(a0),d0 : EXT.l d0 : MOVE.l d0,-(a1)
MOVE.l  d0,-(a1)
SUB.l #8,d2
BGT m2s32sloope
RTS
End Statement


Statement conv_16m_32s_extent24 {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
LSL.l #1,d2
ADD.l d2,a0
LSL.l #2,d2
ADD.l d2,a1
m2s32s24loope:
MOVE.w -(a0),d0 : EXT.l d0 : LSL.l #8,d0 : MOVE.l d0,-(a1)
MOVE.l  d0,-(a1)
SUB.l #8,d2
BGT m2s32s24loope
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16m_32m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16m_32m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
LSL.l #1,d2
ADD.l d2,a0
LSL.l #1,d2
ADD.l d2,a1
m2m32loop:
MOVE.w -(a0),d0 : LSL.l #8,d0 : LSL.l #8,d0 : MOVE.l d0,-(a1)
SUB.l #4,d2
BGT m2m32loop
RTS
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16m_32m_extent {sourceaddr.l,destaddr.l,flength.l,mode.l,qua:: /
;/ lity.l}                                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16m_32m_extent16 {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
LSL.l #1,d2
ADD.l d2,a0
LSL.l #1,d2
ADD.l d2,a1
m2m32loope:
MOVE.w -(a0),d0 :EXT.l d0 : MOVE.l d0,-(a1)
SUB.l #4,d2
BGT m2m32loope
RTS
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16m_32m_extent {sourceaddr.l,destaddr.l,flength.l,mode.l,qua:: /
;/ lity.l}                                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16m_32m_extent24 {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
LSL.l #1,d2
ADD.l d2,a0
LSL.l #1,d2
ADD.l d2,a1
m2m3224loope:
MOVE.w -(a0),d0 :EXT.l d0 : LSL.l #8,d0 : MOVE.l d0,-(a1)
SUB.l #4,d2
BGT m2m3224loope
RTS
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16s_32s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 16bit mono to 32bit stereo.                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16s_32s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
LSL.l #2,d2
ADD.l d2,a0
LSL.l #1,d2
ADD.l d2,a1
s2s32loop:
MOVE.w -(a0),d0 : LSL.l #8,d0 : LSL.l #8,d0 : MOVE.l d0,-(a1)
MOVE.w -(a0),d1 : LSL.l #8,d1 : LSL.l #8,d1 : MOVE.l d1,-(a1)
SUB.l #8,d2
BGT s2s32loop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16s_32s_extent {sourceaddr.l,destaddr.l,flength.l,mode.l,qua:: /
;/ lity.l}                                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16s_32s_extent16 {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
LSL.l #2,d2
ADD.l d2,a0
LSL.l #1,d2
ADD.l d2,a1
s2s32loope:
MOVE.w -(a0),d0 : EXT.l d0 : MOVE.l d0,-(a1)
MOVE.w -(a0),d1 : EXT.l d1 : MOVE.l d1,-(a1)
SUB.l #8,d2
BGT s2s32loope
RTS
End Statement

Statement conv_16s_32s_extent24 {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
LSL.l #2,d2
ADD.l d2,a0
LSL.l #1,d2
ADD.l d2,a1
s2s3224loope:
MOVE.w -(a0),d0 : EXT.l d0 : LSL.l #8,d0 : MOVE.l d0,-(a1)
MOVE.w -(a0),d0 : EXT.l d0 : LSL.l #8,d0 : MOVE.l d0,-(a1)
SUB.l #8,d2
BGT s2s3224loope
RTS
End Statement


Statement conv_16s_32m_extent24 {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c16s32mex24loop:
MOVE.w (a0)+,d0
MOVE.w (a0)+,d1
EXT.l d0 : EXT.l d1 : ADD.l d1,d0 : ASL.l #7,d0
MOVE.l d0,(a1)+
SUB.l #1,d2
BGT c16s32mex24loop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16s_8m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 16bit stereo to 8bit mono.                                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16s_8m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
TST.l d4
BNE c16s8mq

TST.l d3
BGT s2m168leftl
BLT s2m168rightl

s2m168loop:
MOVE.w (a0)+,d0
ASR.w #1,d0
MOVE.w (a0)+,d1
ASR.w #1,d1
ADD.w d0,d1
ASR.w #8,d1
MOVE.b d1,(a1)+
SUB.l #1,d2
BGT s2m168loop
RTS

s2m168leftl:
MOVE.b (a0),(a1)+
ADD.l #4,a0
SUB.l #1,d2
BGT s2m168leftl
RTS

s2m168rightl:
MOVE.b 3(a0),(a1)+
ADD.l #4,a0
SUB.l #1,d2
BGT s2m168rightl
RTS


c16s8mq:
TST.l d3
BGT s2m168qleftl
BLT s2m168qrightl

s2m168qloop:
MOVE.w (a0)+,d0
ASR.w #8,d0
MOVE.w (a0)+,d1
ASR.w #8,d1
ADD.w d0,d1
ADD.w #1,d1
ASR.w #1,d1
MOVE.b d1,(a1)+
SUB.l #1,d2
BGT s2m168qloop
RTS

s2m168qleftl:
MOVE.w (a0),d0
ASR.w #7,d0
ADD.w #1,d0
ASR.w #1,d0
MOVE.b d0,(a1)+
ADD.l #4,a0
SUB.l #1,d2
BGT s2m168qleftl
RTS

s2m168qrightl:
MOVE.w 2(a0),d0
ASR.w #7,d0
ADD.w #1,d0
ASR.w #1,d0
MOVE.b d0,(a1)+
ADD.l #4,a0
SUB.l #1,d2
BGT s2m168qrightl
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16s_8s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 16bit stereo to 8bit stereo.                                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16s_8s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
TST.l d4
BNE c16s8sqloop

c16s8sloop:
MOVE.b (a0),(a1)+
MOVE.b 2(a0),(a1)+
ADD.l #4,a0
SUB.l #1,d2
BGT c16s8sloop
RTS

c16s8sqloop:
MOVE.l (a0)+,d0
ASR.w #7,d0
ADD.w #1,d0
ASR.w #1,d0
MOVE.b d0,(a1)+
SWAP d0
ASR.w #7,d0
ADD.w #1,d0
ASR.w #1,d0
MOVE.b d0,(a1)+
SUB.l #1,d2
BGT c16s8sqloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16s_16m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 16bit stereo to 16bit mono.                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16s_16m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
TST.l d3
BGT s2m16leftl
BLT s2m16rightl

TST.l d4
BNE s2m16qloop

s2m16loop:
MOVE.w (a0)+,d0 : ASR.w #1,d0
MOVE.w (a0)+,d1 : ASR.w #1,d1
ADD.w d0,d1
MOVE.w d1,(a1)+
SUB.l #1,d2
BGT s2m16loop
RTS

s2m16qloop:
MOVE.w (a0)+,d0 : EXT.l d0
MOVE.w (a0)+,d1 : EXT.l d1
ADD.l #1,d1
ADD.l d0,d1
ASR.l #1,d1
MOVE.w d1,(a1)+
SUB.l #1,d2
BGT s2m16qloop
RTS

s2m16leftl:
MOVE.w (a0),(a1)+
ADD.l #4,a0
SUB.l #1,d2
BGT s2m16leftl
RTS

s2m16rightl:
ADD.l #2,a0
MOVE.w (a0)+,(a1)+
SUB.l #1,d2
BGT s2m16rightl
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_32s_16m_clip {sourceaddr.l,destaddr.l,flength.l,mode.l,quali:: /
;/ ty.l}                                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 32bit stereo to 16bit mono.                                    /
;/ NOTE: This function assumes 16bit dynamic range in the 32bit data and wil:: /
;/ l clip values out of [-32768...32767]!                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_32s_16m_clip16 {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
TST.l d3
BGT s32m16leftl_c
BLT s32m16rightl_c

s32m16loop_c:
MOVE.l (a0)+,d1
ADD.l (a0)+,d1
ASR.l #1,d1

CMP.l #32767,d1
BLE c32s16m_skipclip1_c
MOVE.l #32767,d1
BRA  c32s16m_skipclip2_c

c32s16m_skipclip1_c:
CMP.l #-32768,d1
BGE c32s16m_skipclip2_c
MOVE.l #-32768,d1
c32s16m_skipclip2_c:

MOVE.w d1,(a1)+
SUB.l #1,d2
BGT s32m16loop_c
RTS

s32m16leftl_c:
MOVE.w 2(a0),(a1)+
ADD.l #8,a0
SUB.l #1,d2
BGT s32m16leftl_c
RTS

s32m16rightl_c:
ADD.l #6,a0
MOVE.w (a0)+,(a1)+
SUB.l #1,d2
BGT s32m16rightl_c
RTS
End Statement

Statement conv_32s_16m_clip24 {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
TST.l d3
BGT s32m1624leftl_c
BLT s32m1624rightl_c

s32m1624loop_c:
MOVE.l (a0)+,d1
ADD.l (a0)+,d1
ASR.l #1,d1
ASR.l #8,d1
CMP.l #32767,d1
BLE c32s16m24_skipclip1_c
MOVE.l #32767,d1
BRA  c32s16m24_skipclip2_c

c32s16m24_skipclip1_c:
CMP.l #-32768,d1
BGE c32s16m24_skipclip2_c
MOVE.l #-32768,d1
c32s16m24_skipclip2_c:

MOVE.w d1,(a1)+
SUB.l #1,d2
BGT s32m1624loop_c
RTS

s32m1624leftl_c:
MOVE.w 2(a0),(a1)+
ADD.l #8,a0
SUB.l #1,d2
BGT s32m1624leftl_c
RTS

s32m1624rightl_c:
ADD.l #6,a0
MOVE.w (a0)+,(a1)+
SUB.l #1,d2
BGT s32m1624rightl_c
RTS
End Statement


Statement conv_32m_16m_clip24 {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1

m32m1624loop_c:
MOVE.l (a0)+,d1
ASR.l #8,d1
CMP.l #32767,d1
BLE c32m16m24_skipclip1_c
MOVE.l #32767,d1
BRA  c32m16m24_skipclip2_c

c32m16m24_skipclip1_c:
CMP.l #-32768,d1
BGE c32m16m24_skipclip2_c
MOVE.l #-32768,d1
c32m16m24_skipclip2_c:

MOVE.w d1,(a1)+
SUB.l #1,d2
BGT m32m1624loop_c
RTS

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_32s_16m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_32s_16m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
TST.l d3
BGT s32m16leftl

BLT s32m16rightl

s32m16loop:
MOVE.l (a0)+,d0 : ASR.l #1,d0
MOVE.l (a0)+,d1 : ASR.l #1,d1
ADD.l d1,d0

LSR.l #8,d0
LSR.l #8,d0

MOVE.w d0,(a1)+
SUB.l #1,d2
BGT s32m16loop
RTS

s32m16leftl:
MOVE.w (a0),(a1)+
ADD.l #8,a0
SUB.l #1,d2
BGT s32m16leftl
RTS

s32m16rightl:
ADD.l #4,a0
s32m16rightlx
MOVE.w (a0),(a1)+
ADD.l #8,a0
SUB.l #1,d2
BGT s32m16rightlx
RTS
End Statement
 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_32s_8m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_32s_8m {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
TST.l d3
BGT s32m8leftl
BLT s32m8rightl

s32m8loop:
MOVE.l (a0)+,d0 : ASR.l #1,d0
MOVE.l (a0)+,d1 : ASR.l #1,d1
ADD.l d1,d0

LSR.l #8,d0
LSR.l #8,d0
LSR.l #8,d0

MOVE.b d0,(a1)+
SUB.l #1,d2
BGT s32m8loop
RTS

s32m8leftl:
MOVE.b (a0),(a1)+
ADD.l #8,a0
SUB.l #1,d2
BGT s32m8leftl
RTS

s32m8rightl:
ADD.l #4,a0
s32m8rightlx:
MOVE.b (a0),(a1)+
ADD.l #8,a0
SUB.l #1,d2
BGT s32m8rightlx
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_x_x {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l,sbit:: /
;/ .l,schannels.l,dbit.l,dchannels.l}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/ - sbit.l    : ???                                                           /
;/ - schannels.l    : ???                                                      /
;/ - dbit.l    : ???                                                           /
;/ - dchannels.l    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_x_x {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l,sbit.l,schannels.l,dbit.l,dchannels.l}
d_framesize.l = dchannels*dbit/8
s_framesize.l = schannels*sbit/8

If d_framesize>s_framesize
  sourceaddr + (flength-1) * s_framesize
  destaddr + (flength-1) * d_framesize
  d_framesize = - d_framesize
  s_framesize = - s_framesize
End If
;NPrint "d_framesize: ",d_framesize
;NPrint "s_framesize: ",s_framesize
For n.l=0 To flength-1
  If schannels=2
  Select sbit
     Case 8
       sampleL.l = Peek.b(sourceaddr) LSL 24
       sampleR.l = Peek.b(sourceaddr+1) LSL 24
     Case 16
       sampleL.l = Peek.w(sourceaddr) LSL 16
       sampleR.l = Peek.w(sourceaddr+2) LSL 16
     Case 24
       sampleL.l = (Peek.w(sourceaddr) LSL 16) & $FFFF0000
       sampleL.l | ((Peek.b(sourceaddr+2) LSL 8) & $0000FF00)

       sampleR.l = (Peek.w(sourceaddr+3) LSL 16) & $FFFF0000
       sampleR.l | ((Peek.b(sourceaddr+5) LSL 8)  & $0000FF00)
     Case 32
       sampleL.l = Peek.l(sourceaddr)
       sampleR.l = Peek.l(sourceaddr+4)
   End Select
  Else
  Select sbit
     Case 8
       sampleL.l = Peek.b(sourceaddr) LSL 24
     Case 16
       sampleL.l = Peek.w(sourceaddr) LSL 16
     Case 24
       sampleL.l = (Peek.w(sourceaddr) LSL 16) & $FFFF0000
       sampleL.l | ((Peek.b(sourceaddr+2) LSL 8) & $0000FF00)
     Case 32
       sampleL.l = Peek.l(sourceaddr)
  End Select
  sampleR.l = sampleL
  End If

  If dchannels=2
  Select dbit
     Case 8
       Poke.b (destaddr), sampleL LSR 24
       Poke.b (destaddr+1), sampleR LSR 24
     Case 16
       Poke.w (destaddr), sampleL LSR 16
       Poke.w (destaddr+2), sampleR LSR 16
     Case 24
       sampleL LSR 8
       Poke.w (destaddr), sampleL LSR 8
       Poke.b (destaddr+2), sampleL & $FF
       sampleR LSR 8
       Poke.w (destaddr+3), sampleR LSR 8
       Poke.b (destaddr+5), sampleR & $FF
     Case 32
       Poke.l (destaddr), sampleL
       Poke.l (destaddr+4), sampleR
  End Select
  Else
  Select mode
    Case 1
      sampleM.l = sampleR
    Case -1
      sampleM.l = sampleL
    Default
      sampleM.l = (sampleR ASR 1) + (sampleL ASR 1)
  End Select
  Select dbit
     Case 8
       Poke.b (destaddr), sampleM LSR 24
     Case 16
       Poke.w (destaddr), sampleM LSR 16
     Case 24
       sampleM LSR 8
       Poke.w (destaddr), sampleM LSR 8
       Poke.b (destaddr+2), sampleM & $FF
     Case 32
       Poke.l (destaddr), sampleM
  End Select
  End If
  destaddr + d_framesize
  sourceaddr + s_framesize
Next
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_32s_16s_clip {sourceaddr.l,destaddr.l,flength.l,mode.l,quali:: /
;/ ty.l}                                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 32bit stereo to 16bit stereo.                                  /
;/ NOTE: This function assumes 16bit dynamic range in the 32bit data and wil:: /
;/ l clip values out of [-32768...32767]!                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_32s_16s_clip16 {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c32s16sloop_c:
MOVE.l (a0)+,d0

CMP.l #32767,d0
BLE c32s16s_skipclip1l_c
MOVE.l #32767,d0
BRA  c32s16s_skipclip2l_c

c32s16s_skipclip1l_c:
CMP.l #-32768,d0
BGE c32s16s_skipclip2l_c
MOVE.l #-32768,d0
c32s16s_skipclip2l_c:
MOVE.w d0,(a1)+

MOVE.l (a0)+,d0

CMP.l #32767,d0
BLE c32s16s_skipclip1r_c
MOVE.l #32767,d0
BRA  c32s16s_skipclip2r_c

c32s16s_skipclip1r_c:
CMP.l #-32768,d0
BGE c32s16s_skipclip2r_c
MOVE.l #-32768,d0
c32s16s_skipclip2r_c:

MOVE.w d0,(a1)+
SUB.l #1,d2
BGT c32s16sloop_c
RTS
End Statement

Statement conv_32s_16s_clip24 {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c32s16s24loop_c:
MOVE.l (a0)+,d0
ASR.l #8,d0
CMP.l #32767,d0
BLE c32s16s24_skipclip1l_c
MOVE.l #32767,d0
BRA  c32s16s24_skipclip2l_c

c32s16s24_skipclip1l_c:
CMP.l #-32768,d0
BGE c32s16s24_skipclip2l_c
MOVE.l #-32768,d0
c32s16s24_skipclip2l_c:
MOVE.w d0,(a1)+

MOVE.l (a0)+,d0
ASR.l #8,d0
CMP.l #32767,d0
BLE c32s16s24_skipclip1r_c
MOVE.l #32767,d0
BRA  c32s16s24_skipclip2r_c

c32s16s24_skipclip1r_c:
CMP.l #-32768,d0
BGE c32s16s24_skipclip2r_c
MOVE.l #-32768,d0
c32s16s24_skipclip2r_c:

MOVE.w d0,(a1)+
SUB.l #1,d2
BGT c32s16s24loop_c
RTS
End Statement

Statement conv_32m_16s_clip24 {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c32m16s24loop_c:
MOVE.l (a0)+,d0
ASR.l #8,d0
CMP.l #32767,d0
BLE c32m16s24_skipclip1l_c
MOVE.l #32767,d0
BRA  c32m16s24_skipclip2l_c

c32m16s24_skipclip1l_c:
CMP.l #-32768,d0
BGE c32m16s24_skipclip2l_c
MOVE.l #-32768,d0
c32m16s24_skipclip2l_c:
MOVE.w d0,(a1)+
MOVE.w d0,(a1)+
SUB.l #1,d2
BGT c32m16s24loop_c
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_32s_16s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_32s_16s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c32s16sloop:
MOVE.w (a0),(a1)+  : ADD.l #4,a0
MOVE.w (a0),(a1)+  : ADD.l #4,a0
SUB.l #1,d2
BGT c32s16sloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_32m_16s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_32m_16s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c32m16sloop:
MOVE.w (a0),(a1)+
MOVE.w (a0),(a1)+
ADD.l #4,a0
SUB.l #1,d2
BGT c32m16sloop
RTS
End Statement
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_Float_16 {sourceaddr.l,destaddr.l,flength.l,norm.f}            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - norm.f    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_Float_16 {sourceaddr.l,destaddr.l,flength.l,norm.f}
scaler.f = $7FFF/norm
For n.l=0 To flength-1
  f.f = Peek.f(sourceaddr) * scaler   : sourceaddr+4
  Poke.w destaddr,f  : destaddr +2
Next
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16_Float {sourceaddr.l,destaddr.l,flength.l,norm.f}            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - norm.f    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16_Float {sourceaddr.l,destaddr.l,flength.l,norm.f}
scaler.f = norm/$8000
sourceaddr + flength*2
destaddr   + flength*4
For n.l=0 To flength-1
  s.w = Peek.w(sourceaddr) : sourceaddr-2
  f.f = s * scaler
  Poke.f destaddr,f        : destaddr -4
Next
End Statement
 

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_Float_32 {sourceaddr.l,destaddr.l,flength.l,norm.f}            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - norm.f    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_Float_32 {sourceaddr.l,destaddr.l,flength.l,norm.f}
scaler.f = $7FFFFFFF/norm
For n.l=0 To flength-1
  f.f = Peek.f(sourceaddr) * scaler   : sourceaddr+4
  Poke.l destaddr,f                   : destaddr +4
Next
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_32_Float {sourceaddr.l,destaddr.l,flength.l,norm.f}            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - norm.f    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_32_Float {sourceaddr.l,destaddr.l,flength.l,norm.f}
scaler.f = norm/$7FFFFFFF
For n.l=0 To flength-1
  s.l = Peek.l(sourceaddr) : sourceaddr+4
  f.f = s * scaler
  Poke.f destaddr,f        : destaddr +4
Next
End Statement
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_16s_16s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ Convert from 16bit stereo to 16bit stereo.                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/ - mode.l    : 1 = left channel, -1 = right channel, 0 = mix (if from ster:: /
;/ eo=>mono)                                                                   /
;/ - quality.l    : 0 = fast, -1 = quality mode (if available)                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_16s_16s {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
c16sloop:
MOVE.l (a0)+,(a1)+
SUB.l #1,d2
BGT c16sloop
RTS
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: FlipEndian16 {sourceaddr.l,destaddr.l,flength.l}                    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert to intel to motorola byte order (little endian <=> big endian).     /
;/ The function is symetric, it converts also from motorola to intel.          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in 16bit words (byte length / 2)                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FlipEndian16 {sourceaddr.l,destaddr.l,flength.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
flip16loop:
MOVE.w (a0)+,d0
MOVE.w d0,d1
LSL.w #8,d0
LSR.w #8,d1
ADD.w d1,d0
MOVE.w d0,(a1)+
SUB.l #1,d2
BGT flip16loop
RTS
End Statement


Statement Invert16 {sourceaddr.l,destaddr.l,flength.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
invert16loop:
MOVE.w (a0)+,d0
MOVE.w #0,d1
SUB.w d0,d1
SUB.w #1,d1
MOVE.w d1,(a1)+
SUB.l #1,d2
BGT invert16loop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: FlipEndian24 {sourceaddr.l,destaddr.l,flength.l}                    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert to intel to motorola byte order (little endian <=> big endian).     /
;/ The function is symetric, it converts also from motorola to intel.          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in sample frames                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FlipEndian24 {sourceaddr.l,destaddr.l,flength.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
i2m_24:
CLR.l d0
MOVE.b 0(a0),d0 : ASL.l #8,d0
MOVE.b 1(a0),d0 : ASL.l #8,d0
MOVE.b 2(a0),d0

MOVE.b d0,0(a1) : ASR.l #8,d0
MOVE.b d0,1(a1) : ASR.l #8,d0
MOVE.b d0,2(a1)

ADD.l #3,a0
ADD.l #3,a1
SUB.l #1,d2
BGT i2m_24
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: FlipEndian32 {sourceaddr.l,destaddr.l,flength.l}                    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert to intel to motorola byte order (little endian <=> big endian).     /
;/ The function is symetric, it converts also from motorola to intel.          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - flength.l    : length in 32bit longwords (byte length / 4)                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FlipEndian32 {sourceaddr.l,destaddr.l,flength.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
flip32loop:
MOVE.l (a0)+,d0
MOVE.b d0,(a1)
LSR.l #8,d0
MOVE.b d0,1(a1)
LSR.l #8,d0
MOVE.b d0,2(a1)
LSR.l #8,d0
MOVE.b d0,3(a1)
ADD.l #4,a1
SUB.l #1,d2
BGT flip32loop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: Unsigned2Signed8 {sourceaddr.l,destaddr.l,blength.l}                /
;/                                                                             /
;/ Description:                                                                /
;/ Convert 8bit signed audio signal to 8bit unsigned. This function can conv:: /
;/ ert mono or stereo data.                                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - blength.l    : byte length                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement Unsigned2Signed8 {sourceaddr.l,destaddr.l,blength.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
scambleloop8:
MOVE.b (a0)+,d0
SUB.b #128,d0
MOVE.b d0,(a1)+
SUB.l #1,d2
BGT scambleloop8
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: Unsigned2Signed16 {sourceaddr.l,destaddr.l,wlength.l}               /
;/                                                                             /
;/ Description:                                                                /
;/ Convert 16bit signed audio signal to 16bit unsigned. This function can co:: /
;/ nvert mono or stereo data.                                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - wlength.l    : length in 16bit words (byte length / 2)                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement Unsigned2Signed16 {sourceaddr.l,destaddr.l,wlength.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
scambleloop:
MOVE.w (a0)+,d0
SUB.w #32768,d0
MOVE.w d0,(a1)+
SUB.l #1,d2
BGT scambleloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: Unsigned2Signed24 {sourceaddr.l,destaddr.l,slength.l}               /
;/                                                                             /
;/ Description:                                                                /
;/ Convert 24bit signed audio signal to 24bit unsigned. This function can co:: /
;/ nvert mono or stereo data.                                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - slength.l    : length in samples                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement Unsigned2Signed24 {sourceaddr.l,destaddr.l,slength.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
scambleloop24:
CLR.l d0 : MOVE.w (a0)+,d0 : EXT.l d0 : LSL.l #8,d0 : MOVE.b (a0)+,d0
SUB.l #8388608,d0
SWAP d0
MOVE.b d0,(a1)+
SWAP d0
MOVE.w d0,(a1)+
SUB.l #1,d2
BGT scambleloop24
RTS
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: Unsigned2Signed32 {sourceaddr.l,destaddr.l,slength.l}               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - slength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement Unsigned2Signed32 {sourceaddr.l,destaddr.l,slength.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
scambleloop32:
MOVE.l (a0)+,d0
SUB.l #$80000000,d0
MOVE.l d0,(a1)+
SUB.l #1,d2
BGT scambleloop32
RTS
End Statement
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ResampleASM {sourceaddr.l,destaddr.l,sourcelength.l,ratio.l,base.:: /
;/ l,stack.l}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Convert the sourcebuffer to a different sample rate.                        /
;/ The sample rate change will be newsr = oldsr * a / b.                       /
;/ It converts 16bit stereo.                                                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l    : memory address of the destination buffer                  /
;/ - sourcelength.l    : length of the source buffer in sampleframes (byte l:: /
;/ ength / 2)                                                                  /
;/ - ratio.l    : a                                                            /
;/ - base.l    : b                                                             /
;/ - stack.l    : memory pointer to 12 bytes of memory                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ResampleASM {sourceaddr.l,destaddr.l,sourcelength.l,ratio.l,base.l,stack.l}
UNLK a4
MOVE.l d0,a0 : MOVE.l d1,a1
; d0 = work sample left
; d1 = konto
; d2 = length counter
; d3 = destsample 2
; d4 = destsample 1
; d5 = samplewertigkeit
; d6 = sampleretter
; d7 = worksample right
; a0 = Source
; a1 = Dest
; a2 = brain
; a3 = ratio ???

MOVE.w      d3,a3     ; ratio in a3
MOVE.w      d4,d0
MOVE.l      d5,a2     ; stack nach a2

MOVE.w    (a2),d1     ; hohle konto
MOVE.l   4(a2),d3     ; hohle destsample 2
MOVE.l   8(a2),d4     ; hohle destsample 1

resample2loop:
MOVE.w a3,d5        ; Sample ist ratio wert
resample_retry:
CMP.w d1,d5         ; laeuft konto ueber ?

BLE resample_allinc          ; Konto laeuft ueber:

; LEFT
MOVE.w (a0),d6        ; sample retten nach d6
MULS d1,d6          ; Sample mal kontorest ...
ADD.l d6,d4         ; und zum sample dazu
DIVS d0,d4          ; sample normalisieren und
MOVE.w d4,(a1)+     ; zurueckschreiben ...
CLR.l d4            ; und wieder 0 !

; Right
MOVE.w 2(a0),d6        ; sample retten nach d6
MULS d1,d6          ; Sample mal kontorest ...
ADD.l d6,d3         ; und zum sample dazu
DIVS d0,d3 ; sample normalisieren und
MOVE.w d3,(a1)+     ; zurueckschreiben ...
CLR.l d3            ; und wieder 0 !

SUB.w d1,d5         ; ziehe kontorest von sampewert ab ...
MOVE.w d0,d1        ; konto fuellen

BRA resample_retry           ; und weiter


resample_allinc:             ; Konto laueft nicht ueber
MOVE.w (a0)+,d7     ; hohle left  Sample

MULS d5,d7          ; Sample mal Wertigkeit
ADD.l d7,d4         ; und zur Summe dazu

MOVE.w (a0)+,d7     ; hohle left  Sample
MULS d5,d7          ; Sample mal Wertigkeit
ADD.l d7,d3         ; und zur Summe dazu

SUB.w d5,d1         ; Konto erniedrigen um Wert

SUB.l #1,d2
BGT resample2loop      ; naechstes sourcesample ...

MOVE.w d1,  (a2)    ; konto retten
MOVE.l d3, 4(a2)
MOVE.l d4, 8(a2)
MOVE.l a1,12(a2)    ; Destination Stand ...
RTS
End Statement



NEWTYPE.resample_brain
konto.l
dsampL.l
dsampR.l
End NEWTYPE
#CE_TUNERES = 8192
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  written.l = Resample {sourceaddr.l,destaddr.l,sourcelength.l,sou:: /
;/ rcerate.l,destrate.l,channels.l,*brain.resample_brain}                      /
;/                                                                             /
;/ Description:                                                                /
;/ Change the sampling rate of the given audio signal (16bit, stereo, signed:: /
;/ ) up or down. If the sampling rate is lowered, the algorithm performs an :: /
;/ implicit lowpass filtering to avoid aliasing.                               /
;/ This algorithm is far from being perfect, but it is much better than ream:: /
;/ pling by dropping or doubling samples.                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : memory address of the source buffer                     /
;/ - destaddr.l      : memory address of the destination buffer                /
;/ - sourcelength.l  : length of the source signal in sample frames (=bytele:: /
;/ ngth/4)                                                                     /
;/ - ratio.l        : ratio of the sampling rate change                        /
;/ - *brain.resample_brain   : pointer to some memory to store history data :: /
;/ for the next call of this function                                          /
;/ - sourcerate.l    : ???                                                     /
;/ - destrate.l    : ???                                                       /
;/ - channels.l    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - written.l      : number of sampelframes written                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l Resample {sourceaddr.l,destaddr.l,sourcelength.l,sourcerate.l,destrate.l,channels.l,*brain.resample_brain}
If *brain=0 Then *brain=?ce_emergencybrain
konto.l  = *brain\konto
dsampL.l = *brain\dsampL
dsampR.l = *brain\dsampR
worth.l = 0
tmp.l   = 0
wsampL.l = 0
wsampR.l = 0
written.l = 0
!mul48{#CE_TUNERES,destrate,sourcerate,ratio.l}
If channels=1
    For i.l=0 To sourcelength-1
        wsampL = Peek.w(sourceaddr) : sourceaddr+2
        worth = ratio ;// Sample ist erstmal "ratio" wert

        While (worth-konto>0)
            tmp = wsampL
            tmp = tmp*konto
            dsampL = dsampL + tmp;
            dsampL = dsampL / #CE_TUNERES
            Poke.w destaddr,dsampL   : destaddr+2
            written+1
            dsampL = 0
            worth = worth-konto
            konto = #CE_TUNERES
        Wend

        wsampL = wsampL * worth
        dsampL = dsampL + wsampL
        konto = konto - worth
    Next
Else
    For i.l=0 To sourcelength-1
        wsampL = Peek.w(sourceaddr) : sourceaddr+2
        wsampR = Peek.w(sourceaddr) : sourceaddr+2
        worth = ratio ;// Sample ist erstmal "ratio" wert

        While (worth-konto>0)
            tmp = wsampL
            tmp = tmp*konto
            dsampL = dsampL + tmp;
            dsampL = dsampL / #CE_TUNERES
            Poke.w destaddr,dsampL   : destaddr+2
            tmp = wsampR
            tmp = tmp*konto
            dsampR = dsampR + tmp;
            dsampR = dsampR / #CE_TUNERES
            Poke.w destaddr,dsampR   : destaddr+2
            written+1
            dsampL = 0 : dsampR = 0
            worth = worth-konto
            konto = #CE_TUNERES
        Wend

        wsampL = wsampL * worth
        dsampL = dsampL + wsampL

        wsampR = wsampR * worth
        dsampR = dsampR + wsampR

        konto = konto - worth
    Next
End If
*brain\konto = konto
*brain\dsampL = dsampL
*brain\dsampR = dsampR
Function Return written
ce_emergencybrain:
Dc.l 0
Dc.l 0
Dc.l 0
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: conv_any {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l,sbit:: /
;/ s.l,schannels.l,dbits.l,dchannels.l}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/ - quality.l    : ???                                                        /
;/ - sbits.l    : ???                                                          /
;/ - schannels.l    : ???                                                      /
;/ - dbits.l    : ???                                                          /
;/ - dchannels.l    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement conv_any {sourceaddr.l,destaddr.l,flength.l,mode.l,quality.l,sbits.l,schannels.l,dbits.l,dchannels.l}
If sbits=dbits AND schannels=dchannels
  If sourceaddr><destaddr
    framesize.l = sbits*schannels/8
    CopyMem_ sourceaddr,destaddr,flength*framesize
  End If
  Statement Return
End If

Select dbits
  Case 8
    If dchannels=1
      Select sbits
        Case 8
          If schannels=1
            ;error {"We should have done this with copymem()!"}
          Else
            conv_8s_8m {sourceaddr,destaddr,flength,mode,quality}
          End If
       Case 16
         If schannels=1
           conv_16m_8m {sourceaddr,destaddr,flength,mode,quality}
         Else
           conv_16s_8m {sourceaddr,destaddr,flength,mode,quality}
         End If
       Case 24
         If schannels=1
           conv_24m_8m {sourceaddr,destaddr,flength,mode,quality}
         Else
           conv_x_x {sourceaddr,destaddr,flength,mode,quality,24,2,8,1}
         End If
       Case 32
         If schannels=1
           conv_32m_8m {sourceaddr,destaddr,flength,mode,quality}
         Else
           conv_32s_8m {sourceaddr,destaddr,flength,mode,quality}
         End If

      End Select
    Else
      Select sbits
        Case 8
          If schannels=1
            conv_8m_8s {sourceaddr,destaddr,flength,mode,quality}
          Else
            ;error {"We should have done this with copymem()!"}
          End If
        Case 16
          If schannels=1
            conv_16m_8s {sourceaddr,destaddr,flength,mode,quality}
          Else
            conv_16s_8s {sourceaddr,destaddr,flength,mode,quality}
          End If
        Case 24
          If schannels=1
            conv_x_x {sourceaddr,destaddr,flength,mode,quality,24,1,8,2}
          Else
            conv_24s_8s {sourceaddr,destaddr,flength,mode,quality}
          End If
        Case 32
          If schannels=1
            conv_32m_8s {sourceaddr,destaddr,flength,mode,quality}
          Else
            conv_32s_8s {sourceaddr,destaddr,flength,mode,quality}
          End If

      End Select
    End If

  Case 16
    If dchannels=1
      Select sbits
        Case 8
          If schannels=1
            conv_8m_16m {sourceaddr,destaddr,flength,mode,quality}
          Else
            conv_8s_16m {sourceaddr,destaddr,flength,mode,quality}
          End If
       Case 16
         If schannels=1
           ;error {"We should have done this with copymem()!"}
         Else
           conv_16s_16m {sourceaddr,destaddr,flength,mode,quality}
         End If
       Case 24
         If schannels=1
           conv_24m_16m {sourceaddr,destaddr,flength,mode,quality}
         Else
           conv_x_x {sourceaddr,destaddr,flength,mode,quality,24,2,16,1}
         End If
       Case 32
         If schannels=1
           conv_32m_16m {sourceaddr,destaddr,flength,mode,quality}
         Else
           conv_32s_16m {sourceaddr,destaddr,flength,mode,quality}
         End If

      End Select
    Else
      Select sbits
        Case 8
          If schannels=1
            conv_8m_16s {sourceaddr,destaddr,flength,mode,quality}
          Else
            conv_8s_16s {sourceaddr,destaddr,flength,mode,quality}
          End If
        Case 16
          If schannels=1
            conv_16m_16s {sourceaddr,destaddr,flength,mode,quality}
          Else
            ;error {"We should have done this with copymem()!"}
          End If
        Case 24
          If schannels=1
            conv_x_x {sourceaddr,destaddr,flength,mode,quality,24,1,16,2}
          Else
            conv_24s_16s {sourceaddr,destaddr,flength,mode,quality}
          End If
        Case 32
          If schannels=1
            conv_32m_16s {sourceaddr,destaddr,flength,mode,quality}
          Else
            conv_32s_16s {sourceaddr,destaddr,flength,mode,quality}
          End If

      End Select
    End If

  Case 24
    If dchannels=1
      Select sbits
        Case 8
          If schannels=1
            conv_8m_24m {sourceaddr,destaddr,flength,mode,quality}
          Else
            conv_x_x {sourceaddr,destaddr,flength,mode,quality,8,2,24,1}
          End If
       Case 16
         If schannels=1
           conv_16m_24m {sourceaddr,destaddr,flength,mode,quality}
         Else
           conv_x_x {sourceaddr,destaddr,flength,mode,quality,16,2,24,1}
         End If
       Case 24
         If schannels=1
           ;error {"We should have done this with copymem()!"}
         Else
           conv_x_x {sourceaddr,destaddr,flength,mode,quality,24,2,24,1}
         End If
       Case 32
         If schannels=1
           conv_32m_24m {sourceaddr,destaddr,flength,mode,quality}
         Else
           conv_32s_24m {sourceaddr,destaddr,flength,mode,quality}
         End If

      End Select
    Else
      Select sbits
        Case 8
          If schannels=1
            conv_8m_24s {sourceaddr,destaddr,flength,mode,quality}
          Else
            conv_8s_24s {sourceaddr,destaddr,flength,mode,quality}
          End If
        Case 16
          If schannels=1
            conv_x_x {sourceaddr,destaddr,flength,mode,quality,16,1,24,2}
          Else
            conv_16s_24s {sourceaddr,destaddr,flength,mode,quality}
          End If
        Case 24
          If schannels=1
            conv_x_x {sourceaddr,destaddr,flength,mode,quality,24,1,24,2}
          Else
            ;error {"We should have done this with copymem()!"}
          End If
        Case 32
          If schannels=1
            conv_32m_24s {sourceaddr,destaddr,flength,mode,quality}
          Else
            conv_32s_24s {sourceaddr,destaddr,flength,mode,quality}
          End If

      End Select
    End If

  Case 32
    If dchannels=1
      Select sbits
        Case 8
          If schannels=1
            conv_x_x{sourceaddr,destaddr,flength,mode,quality,8,1,32,1}
          Else
            conv_x_x{sourceaddr,destaddr,flength,mode,quality,8,2,32,1}
          End If
       Case 16
         If schannels=1
           conv_16m_32m {sourceaddr,destaddr,flength,mode,quality}
         Else
           conv_x_x{sourceaddr,destaddr,flength,mode,quality,16,2,32,1}
         End If
       Case 24
         If schannels=1
           conv_24m_32m {sourceaddr,destaddr,flength,mode,quality}
         Else
           conv_x_x{sourceaddr,destaddr,flength,mode,quality,24,2,32,1}
         End If
       Case 32
         If schannels=1
           ;error {"We should have done this with copymem()!"}
         Else
           conv_x_x{sourceaddr,destaddr,flength,mode,quality,32,2,32,1}
         End If

      End Select
    Else
      Select sbits
        Case 8
          If schannels=1
            conv_x_x{sourceaddr,destaddr,flength,mode,quality,8,1,32,2}
          Else
            conv_x_x{sourceaddr,destaddr,flength,mode,quality,8,2,32,2}
          End If
        Case 16
          If schannels=1
            conv_16m_32s {sourceaddr,destaddr,flength,mode,quality}
          Else
            conv_16s_32s {sourceaddr,destaddr,flength,mode,quality}
          End If
        Case 24
          If schannels=1
            conv_x_x{sourceaddr,destaddr,flength,mode,quality,24,1,32,2}
          Else
            conv_24s_32s {sourceaddr,destaddr,flength,mode,quality}
          End If
        Case 32
          If schannels=1
            conv_32m_32s {sourceaddr,destaddr,flength,mode,quality}
          Else
            ;error {"We should have done this with copymem()!"}
          End If

      End Select
    End If

End Select
End Statement



LastRunErrsMode

CNIF #__include=0
NPrint "Sorry, no real demo, just some tests!"
Dim test32.l (8)
Dim testx.l(8)
Dim test32y.l (8)
Dim testy.l(8)

For sbit.l = 8 To 32 Step 8
  For schannel.l = 1 To 2
    For dbit.l = 8 To 32 Step 8
      For dchannel.l = 1 To 2
         NPrint "checking ",sbit,"bit/",schannel,"channels => ",dbit,"bit/",dchannel,"channels..."
         test32(0) = $0A0B0C0D
         test32(1) = $A0B0C0D0
         test32(2) = $deadbeef
         test32(3) = $baadbaad
         For n.l=0 To 7
         test32y(n) = 0
         testy(n) = 0
         testx(n) = 0
         Next
         conv_x_x{&test32(0),&testx(0),2,0,0,32,2,sbit,schannel}
         conv_any{&testx(0),&testy(0),2,0,0,sbit,schannel,dbit,dchannel}
         conv_x_x{&testy(0),&test32y(0),2,0,0,dbit,dchannel,32,2}

         For n.l=0 To 3
           NPrint Hex$(test32(n))," => ",Hex$(test32y(n))
           NPrint Hex$(testx(n))," => ",Hex$(testy(n))
         Next
         Delay_ 2
      Next
    Next
  Next
Next

End
CEND


