; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 33
; CursorColumn    = 15
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max IconInfo    = 1
; Max NChunky     = 16
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
;
; NewIcons via the newicon.library in Blitz V1.10
; (C) By Robert Hutchinson 17/08/1999
;
; Feel free to use this program in anyway you wish.
; Email me with any bugs or changes please:
;
;   loki@sds.in2home.co.uk
;

  ;--- This is the maximum number of Icons you are allowed...
  ;
  #NIB_MAXIMUM=10

  ; o--> NewIcon base!
  ;/
  NEWTYPE .NewIconBase
    nib_Lib.Library

    *nib_SegList
    nib_Precision.l
    nib_Flags.l
    nib_DPMode.l
    nib_FOMod.l
    nib_Reserved.l
  End NEWTYPE

  ;  o--> This mask can be used to isolate the user
  ; /     preferences part of the flags
  ;/
  #NIFLG_PUBMASK      = $0FFFF

  ; o--> Library base flags
  ;/
  #NIFLG_DO_DITHER    = $00001
  #NIFLG_RESERVED     = $00002
  #NIFLG_RTGMODE      = $00004
  #NIFLG_NOBORDER     = $00008
  #NIFLG_TRANSPARENT  = $00010
  #NIFLG_TRANSDRAG    = $00020

  ; o--> System flags (0xFFFF0000) - These are READ-ONLY!
  ;/
  #NIFLG_IS_DISABLED  = $10000
  #NIFLG_LIBRTG       = $20000
  #NIFLG_LIBDIT       = $40000

  #NIDPM_NEVER        = 0
  #NIDPM_WBONLY       = 1
  #NIDPM_ALL          = 2

  #NIFOM_NONE         = 0
  #NIFOM_OUTLINE      = 1
  #NIFOM_SHADOW       = 2

  NEWTYPE .ChunkyImage
    Width.w
    Height.w
    NumColors.w
    Flags.w
    *Palettez.b
    *ChunkyData.b
  End NEWTYPE

  #CIF_COLOR_0_TRANSP = 0
  #CIF_DEFAULT        = 1

  NEWTYPE .NewDiskObject
    *ndo_StdObject.DiskObject
    *ndo_NormalImage.ChunkyImage
    *ndo_SelectedImage.ChunkyImage
  End NEWTYPE

  NEWTYPE .NewIconsPrefs
    version.w
    flags.l
    precision.l
    dpmode.l
    fomode.l
  End NEWTYPE

  #NIB_NORMAL   = 0
  #NIB_SELECTED = 1
  #NIB_BOTH     = 2

;########################################################################

Dim *NIBStruct.NewDiskObject(#NIB_MAXIMUM)
Dim *NIBImage.Image(#NIB_MAXIMUM*2)
Dim *STDImage.Image(#NIB_MAXIMUM*2)

Function.b NIBCheckLibs{}
  CKLib.l=OpenLibrary_("newicon.library",40)
  If CKLib=0
    Result=False
  Else
    CloseLibrary_(CKLib)
    CKLib.l=OpenLibrary_("icon.library",39)
    If CKLib=0
      Result=False
    Else
      CloseLibrary_(CKLib)
      Result=True
    EndIf
  EndIf
  Function Return Result
End Function

Function.b NIBOpenIcon{NNum,NPath$}
  SHARED *NIBStruct(),XPath$
  If Right$(NPath$,5)=".info"
    XPath$=UnLeft$(NPath$,5)
  Else
    XPath$=NPath$
  EndIf

  *NIBStruct(NNum)=GetNewDiskObject_(&XPath$)
  If *NIBStruct(NNum)
    Function Return True
  Else
    Function Return False
  EndIf
End Function

Function.b NIBCheckStruct{NNum}
  SHARED *NIBStruct()
  AvaiL=0
  If *NIBStruct(NNum)\ndo_NormalImage
    AvaiL+1
  EndIf
  If *NIBStruct(NNum)\ndo_SelectedImage
    AvaiL+1
  EndIf
  Function Return AvaiL
End Function

Function.b STDCheckStruct{NNum}
  SHARED *NIBStruct()
  AvaiL=0
  If *NIBStruct(NNum)\ndo_StdObject
    If *NIBStruct(NNum)\ndo_StdObject\do_Gadget\GadgetRender
      AvaiL+1
    EndIf
    If *NIBStruct(NNum)\ndo_StdObject\do_Gadget\SelectRender
      AvaiL+1
    EndIf
    Function Return AvaiL
  Else
    Function Return 0
  EndIf
End Function

Function.w STDFindWidth{NNum}
  SHARED *NIBStruct()
  If *NIBStruct(NNum)\ndo_StdObject
    Function Return *NIBStruct(NNum)\ndo_StdObject\do_Gadget\Width
  Else
    Function Return 0
  EndIf
End Function

Function.w STDFindHeight{NNum}
  SHARED *NIBStruct()
  If *NIBStruct(NNum)\ndo_StdObject
    Function Return *NIBStruct(NNum)\ndo_StdObject\do_Gadget\Height
  Else
    Function Return 0
  EndIf
End Function

Statement STDToImages{NNum}
  SHARED *NIBStruct(),*STDImage()
  If *NIBStruct(NNum)\ndo_StdObject
    If *NIBStruct(NNum)\ndo_StdObject\do_Gadget\GadgetRender
      *STDImage((NNum*2))=*NIBStruct(NNum)\ndo_StdObject\do_Gadget\GadgetRender
    EndIf
    If *NIBStruct(NNum)\ndo_StdObject\do_Gadget\SelectRender
      *STDImage((NNum*2)+1)=*NIBStruct(NNum)\ndo_StdObject\do_Gadget\SelectRender
    EndIf
  EndIf
End Statement

Function.b STDDrawImage{NNum,STType,BLWindow,WX,WY}
  SHARED *NIBStruct(),*STDImage()
  If *STDImage((NNum*2)+STType)
    DrawImage_ RastPort(BLWindow),*STDImage((NNum*2)+STType),WX,WY
    Function Return True
  Else
    Function Return False
  EndIf
End Function

Statement NIBRemapChunkyData{NNum,NIType,BLScreen}
  SHARED *NIBStruct(),*NIBImage()
  If NIType=0 OR NIType=2
    *NIBImage((NNum*2))=RemapChunkyImage_(*NIBStruct(NNum)\ndo_NormalImage,Peek.l(Addr Screen(BLScreen)))
  EndIf

  If NIType=1 OR NIType=2
    *NIBImage((NNum*2)+1)=RemapChunkyImage_(*NIBStruct(NNum)\ndo_SelectedImage,Peek.l(Addr Screen(BLScreen)))
  EndIf
End Statement

Function.b NIBDrawImage{NNum,NIType,BLWindow,WX,WY}
  SHARED *NIBStruct(),*NIBImage()
  If *NIBImage((NNum*2)+NIType)
    DrawImage_ RastPort(BLWindow),*NIBImage((NNum*2)+NIType),WX,WY
    Function Return True
  Else
    Function Return False
  EndIf
End Function

Statement NIBFreeImages{NNum,NIType,BLScreen}
  SHARED *NIBStruct(),*NIBImage()
  If NIType=0 OR NIType=2
    If *NIBImage((NNum*2))
      FreeRemappedImage_ *NIBImage((NNum*2)),Peek.l(Addr Screen(BLScreen))
      *NIBImage((NNum*2))=0
    EndIf
  EndIf
  If NIType=1 OR NIType=2
    If *NIBImage((NNum*2)+1)
      FreeRemappedImage_ *NIBImage((NNum*2)+1),Peek.l(Addr Screen(BLScreen))
      *NIBImage((NNum*2)+1)=0
    EndIf
  EndIf
End Statement

Statement NIBFreeIcon{NNum}
  SHARED *NIBStruct(),*NIBImage()
  If *NIBStruct(NNum)
    FreeNewDiskObject_ *NIBStruct(NNum)
    *NIBStruct(NNum)=0
  Else
  EndIf
End Statement

Function.w NIBFindWidth{NNum}
  SHARED *NIBStruct(),*NIBImage()
  If *NIBStruct(NNum)
    Function Return *NIBStruct(NNum)\ndo_NormalImage\Width
  Else
    Function Return False
  EndIf
End Function

Function.w NIBFindHeight{NNum}
  SHARED *NIBStruct(),*NIBImage()
  If *NIBStruct(NNum)
    Function Return *NIBStruct(NNum)\ndo_NormalImage\Height
  Else
    Function Return False
  EndIf
End Function

Function.b NIBSaveIcon{NNum,OPTPath$}
  SHARED *NIBStruct(),*NIBImage()
  If Right$(OPTPath$,5)=".info"
    XPath$=UnLeft$(OPTPath$,5)
  Else
    XPath$=OPTPath$
  EndIf

  res=PutNewDiskObject_(&XPath$,*NIBStruct(NNum))
  If res
    Function Return False
  Else
    Function Return True
  EndIf
End Function

;#####################################################################






