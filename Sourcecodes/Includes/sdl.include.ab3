; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "SDLDemo"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 90
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = "in"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max ChunkyBuffer= 2
; /XTRA
; SDL.include.bb2 automatically generated by FD2Include (Thilo Koehler)

CNIF #__include=0
OPTIMIZE 5
SYNTAX 2
WBStartup
CEND

XINCLUDE "error.include.ab3"
XINCLUDE "sdl.res.ab3"

; Library offsets:
#_LVO_SDLBASE_SDL_Init                  = -30
#_LVO_SDLBASE_SDL_Quit                  = -36
#_LVO_SDLBASE_SDL_InitSubSystem         = -42
#_LVO_SDLBASE_SDL_QuitSubSystem         = -48
#_LVO_SDLBASE_SDL_WasInit               = -54
#_LVO_SDLBASE_SDL_RWFromFile            = -60
#_LVO_SDLBASE_SDL_RWFromFP              = -66
#_LVO_SDLBASE_SDL_RWFromMem             = -72
#_LVO_SDLBASE_SDL_AllocRW               = -78
#_LVO_SDLBASE_SDL_FreeRW                = -84
#_LVO_SDLBASE_SDL_LoadBMP_RW            = -90
#_LVO_SDLBASE_SDL_DisplayFormat         = -96
#_LVO_SDLBASE_SDL_FreeSurface           = -102
#_LVO_SDLBASE_SDL_FillRect              = -108
#_LVO_SDLBASE_SDL_UpperBlit             = -114
#_LVO_SDLBASE_SDL_Flip                  = -120
#_LVO_SDLBASE_SDL_UpdateRects           = -126
#_LVO_SDLBASE_SDL_UpdateRect            = -132
#_LVO_SDLBASE_SDL_GetVideoInfo          = -138
#_LVO_SDLBASE_SDL_SetVideoMode          = -144
#_LVO_SDLBASE_SDL_MapRGB                = -150
#_LVO_SDLBASE_SDL_MapRGBA               = -156
#_LVO_SDLBASE_SDL_VideoDriverName       = -162
#_LVO_SDLBASE_SDL_GetVideoSurface       = -168
#_LVO_SDLBASE_SDL_VideoModeOK           = -174
#_LVO_SDLBASE_SDL_ListModes             = -180
#_LVO_SDLBASE_SDL_SetGamma              = -186
#_LVO_SDLBASE_SDL_SetGammaRamp          = -192
#_LVO_SDLBASE_SDL_GetGammaRamp          = -198
#_LVO_SDLBASE_SDL_SetColors             = -204
#_LVO_SDLBASE_SDL_SetPalette            = -210
#_LVO_SDLBASE_SDL_GetRGB                = -216
#_LVO_SDLBASE_SDL_GetRGBA               = -222
#_LVO_SDLBASE_SDL_CreateRGBSurface      = -228
#_LVO_SDLBASE_SDL_CreateRGBSurfaceFrom  = -234
#_LVO_SDLBASE_SDL_LockSurface           = -240
#_LVO_SDLBASE_SDL_UnlockSurface         = -246
#_LVO_SDLBASE_SDL_SaveBMP_RW            = -252
#_LVO_SDLBASE_SDL_SetColorKey           = -258
#_LVO_SDLBASE_SDL_SetAlpha              = -264
#_LVO_SDLBASE_SDL_SetClipRect           = -270
#_LVO_SDLBASE_SDL_GetClipRect           = -276
#_LVO_SDLBASE_SDL_ConvertSurface        = -282
#_LVO_SDLBASE_SDL_DisplayFormatAlpha    = -288
#_LVO_SDLBASE_SDL_CreateYUVOverlay      = -294
#_LVO_SDLBASE_SDL_LockYUVOverlay        = -300
#_LVO_SDLBASE_SDL_UnlockYUVOverlay      = -306
#_LVO_SDLBASE_SDL_DisplayYUVOverlay     = -312
#_LVO_SDLBASE_SDL_FreeYUVOverlay        = -318
#_LVO_SDLBASE_SDL_GL_LoadLibrary        = -324
#_LVO_SDLBASE_SDL_GL_GetProcAddress     = -330
#_LVO_SDLBASE_SDL_GL_SetAttribute       = -336
#_LVO_SDLBASE_SDL_GL_GetAttribute       = -342
#_LVO_SDLBASE_SDL_GL_SwapBuffers        = -348
#_LVO_SDLBASE_SDL_GL_UpdateRects        = -354
#_LVO_SDLBASE_SDL_GL_Lock               = -360
#_LVO_SDLBASE_SDL_GL_Unlock             = -366
#_LVO_SDLBASE_SDL_WM_SetCaption         = -372
#_LVO_SDLBASE_SDL_WM_GetCaption         = -378
#_LVO_SDLBASE_SDL_WM_SetIcon            = -384
#_LVO_SDLBASE_SDL_WM_IconifyWindow      = -390
#_LVO_SDLBASE_SDL_WM_ToggleFullScreen   = -396
#_LVO_SDLBASE_SDL_WM_GrabInput          = -402
#_LVO_SDLBASE_SDL_GetTicks              = -408
#_LVO_SDLBASE_SDL_Delay                 = -414
#_LVO_SDLBASE_SDL_SetTimer              = -420
#_LVO_SDLBASE_SDL_AddTimer              = -426
#_LVO_SDLBASE_SDL_RemoveTimer           = -432
#_LVO_SDLBASE_SDL_PumpEvents            = -438
#_LVO_SDLBASE_SDL_PollEvent             = -444
#_LVO_SDLBASE_SDL_WaitEvent             = -450
#_LVO_SDLBASE_SDL_PeepEvents            = -456
#_LVO_SDLBASE_SDL_PushEvent             = -462
#_LVO_SDLBASE_SDL_SetEventFilter        = -468
#_LVO_SDLBASE_SDL_GetEventFilter        = -474
#_LVO_SDLBASE_SDL_EventState            = -480
#_LVO_SDLBASE_SDL_NumJoysticks          = -486
#_LVO_SDLBASE_SDL_JoystickName          = -492
#_LVO_SDLBASE_SDL_JoystickOpen          = -498
#_LVO_SDLBASE_SDL_JoystickOpened        = -504
#_LVO_SDLBASE_SDL_JoystickIndex         = -510
#_LVO_SDLBASE_SDL_JoystickNumAxes       = -516
#_LVO_SDLBASE_SDL_JoystickNumBalls      = -522
#_LVO_SDLBASE_SDL_JoystickNumHats       = -528
#_LVO_SDLBASE_SDL_JoystickNumButtons    = -534
#_LVO_SDLBASE_SDL_JoystickUpdate        = -540
#_LVO_SDLBASE_SDL_JoystickEventState    = -546
#_LVO_SDLBASE_SDL_JoystickGetAxis       = -552
#_LVO_SDLBASE_SDL_JoystickGetHat        = -558
#_LVO_SDLBASE_SDL_JoystickGetBall       = -564
#_LVO_SDLBASE_SDL_JoystickGetButton     = -570
#_LVO_SDLBASE_SDL_JoystickClose         = -576
#_LVO_SDLBASE_SDL_EnableUNICODE         = -582
#_LVO_SDLBASE_SDL_EnableKeyRepeat       = -588
#_LVO_SDLBASE_SDL_GetKeyState           = -594
#_LVO_SDLBASE_SDL_GetModState           = -600
#_LVO_SDLBASE_SDL_SetModState           = -606
#_LVO_SDLBASE_SDL_GetKeyName            = -612
#_LVO_SDLBASE_SDL_GetMouseState         = -618
#_LVO_SDLBASE_SDL_GetRelativeMouseState = -624
#_LVO_SDLBASE_SDL_WarpMouse             = -630
#_LVO_SDLBASE_SDL_CreateCursor          = -636
#_LVO_SDLBASE_SDL_SetCursor             = -642
#_LVO_SDLBASE_SDL_GetCursor             = -648
#_LVO_SDLBASE_SDL_FreeCursor            = -654
#_LVO_SDLBASE_SDL_ShowCursor            = -660
#_LVO_SDLBASE_SDL_GetAppState           = -666
#_LVO_SDLBASE_SDL_SetErrorA             = -672
#_LVO_SDLBASE_SDL_GetError              = -678
#_LVO_SDLBASE_SDL_ClearError            = -684
#_LVO_SDLBASE_SDL_AudioInit             = -690
#_LVO_SDLBASE_SDL_AudioQuit             = -696
#_LVO_SDLBASE_SDL_AudioDriverName       = -702
#_LVO_SDLBASE_SDL_OpenAudio             = -708
#_LVO_SDLBASE_SDL_GetAudioStatus        = -714
#_LVO_SDLBASE_SDL_PauseAudio            = -720
#_LVO_SDLBASE_SDL_LoadWAV_RW            = -726
#_LVO_SDLBASE_SDL_FreeWAV               = -732
#_LVO_SDLBASE_SDL_BuildAudioCVT         = -738
#_LVO_SDLBASE_SDL_ConvertAudio          = -744
#_LVO_SDLBASE_SDL_MixAudio              = -750
#_LVO_SDLBASE_SDL_LockAudio             = -756
#_LVO_SDLBASE_SDL_UnlockAudio           = -762
#_LVO_SDLBASE_SDL_CloseAudio            = -768
#_LVO_SDLBASE_SDL_CreateThread          = -774
#_LVO_SDLBASE_SDL_ThreadID              = -780
#_LVO_SDLBASE_SDL_GetThreadID           = -786
#_LVO_SDLBASE_SDL_WaitThread            = -792
#_LVO_SDLBASE_SDL_KillThread            = -798
#_LVO_SDLBASE_SDL_Linked_Version        = -804
#_LVO_SDLBASE_SDL_SoftStretch           = -810

SHARED *_SDLBase.Library


; Helper Macros:
Macro __SDLBase_SaveRegs
MOVE.l a5,-(a7) : MOVE.l a6,-(a7) : MOVE.l d7,-(a7)
End Macro

Macro __SDLBase_RestoreRegs
MOVE.l (a7)+,d7 : MOVE.l (a7)+,a6 : MOVE.l (a7)+,a5
End Macro


; Wrapper Macros:
Macro SDL_Init;{ret.l,flags}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_Init(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_Quit;{}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_Quit(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_InitSubSystem;{ret.l,flags}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_InitSubSystem(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_QuitSubSystem;{flags}
!__SDLBase_SaveRegs
GetReg d0,`1
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_QuitSubSystem(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_WasInit;{ret.l,flags}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_WasInit(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_RWFromFile;{ret.l,file,mode}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_RWFromFile(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_RWFromFP;{ret.l,fp,autoclose}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_RWFromFP(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_RWFromMem;{ret.l,mem,size}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_RWFromMem(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_AllocRW;{ret.l}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_AllocRW(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_FreeRW;{,area}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_FreeRW(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_LoadBMP_RW;{ret.l,src,freesrc}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_LoadBMP_RW(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_DisplayFormat;{ret.l,surface}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_DisplayFormat(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_FreeSurface;{ret.l,surface}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_FreeSurface(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_FillRect;{ret.l,dst,dstrect,color}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg d0,`4
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_FillRect(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_UpperBlit;{ret.l,src,srcrect,dst,dstrect}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a1,`4
GetReg d1,`5
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_UpperBlit(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_Flip;{ret.l,screen}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_Flip(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_UpdateRects;{screen,numrects,rects}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg d0,`2
GetReg a1,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_UpdateRects(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_UpdateRect;{screen,x,y,w,h}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg d0,`2
GetReg d1,`3
GetReg d2,`4
GetReg d3,`5
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_UpdateRect(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_GetVideoInfo;{ret.l}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetVideoInfo(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_SetVideoMode;{ret.l,width,height,bpp,flags}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg d1,`3
GetReg d2,`4
GetReg d3,`5
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_SetVideoMode(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_MapRGB;{ret.l,format,r,g,b}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg d1,`4
GetReg d2,`5
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_MapRGB(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_MapRGBA;{ret.l,format,r,g,b,a}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg d1,`4
GetReg d2,`5
GetReg d3,`6
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_MapRGBA(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_VideoDriverName;{ret.l,namebuf,maxlen}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_VideoDriverName(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GetVideoSurface;{ret.l}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetVideoSurface(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_VideoModeOK;{ret.l,width,height,bpp,flags}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg d1,`3
GetReg d2,`4
GetReg d3,`5
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_VideoModeOK(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_ListModes;{ret.l,format,flags}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_ListModes(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_SetGamma;{ret.l,red,green,blue}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg d1,`3
GetReg d2,`4
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_SetGamma(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_SetGammaRamp;{ret.l,red,green,blue}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg d1,`3
GetReg d2,`4
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_SetGammaRamp(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GetGammaRamp;{ret.l,red,green,blue}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg d1,`3
GetReg d2,`4
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetGammaRamp(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_SetColors;{ret.l,surface,colors,firstcolor,ncolors}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg d0,`4
GetReg d1,`5
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_SetColors(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_SetPalette;{ret.l,surface,flags,colors,firstcolor,ncolors}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a1,`4
GetReg d1,`5
GetReg d2,`6
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_SetPalette(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GetRGB;{pixel,format,r,g,b}
!__SDLBase_SaveRegs
GetReg d0,`1
GetReg a0,`2
GetReg d1,`3
GetReg d2,`4
GetReg d3,`5
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetRGB(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_GetRGBA;{pixel,format,r,g,b,a}
!__SDLBase_SaveRegs
GetReg d0,`1
GetReg a0,`2
GetReg d1,`3
GetReg d2,`4
GetReg d3,`5
GetReg d4,`6
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetRGBA(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_CreateRGBSurface;{ret.l,flags,width,height,depth,Rmask,Gmask,Bmask,Amask}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg d1,`3
GetReg d2,`4
GetReg d3,`5
GetReg d4,`6
GetReg d5,`7
GetReg d6,`8
GetReg d7,`9
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_CreateRGBSurface(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

;Macro SDL_CreateRGBSurfaceFrom;{ret.l,pixels,width,height,depth,pitch,Rmask,Gmask,Bmask,Amask}
;!__SDLBase_SaveRegs
;GetReg a0,`2
;GetReg d0,`3
;GetReg d1,`4
;GetReg d2,`5
;GetReg d3,`6
;GetReg d4,`7
;GetReg d5,`8
;GetReg d6,`9
;GetReg d7,`10
;GetReg a6,*_SDLBase
;JSR _LVO_SDLBASE_SDL_CreateRGBSurfaceFrom(a6)
;!__SDLBase_RestoreRegs
;`1 = PutRegD0
;End Macro

Macro SDL_LockSurface;{ret.l,surface}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_LockSurface(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_UnlockSurface;{surface}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_UnlockSurface(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_SaveBMP_RW;{ret.l,surface,dst,freedst}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg d0,`4
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_SaveBMP_RW(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_SetColorKey;{ret.l,surface,flag,key}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg d1,`4
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_SetColorKey(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_SetAlpha;{ret.l,surface,flag,alpha}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg d1,`4
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_SetAlpha(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_SetClipRect;{ret.l,surface,rect}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_SetClipRect(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GetClipRect;{surface,rect}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg a1,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetClipRect(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_ConvertSurface;{ret.l,src,fmt,flags}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg d0,`4
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_ConvertSurface(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_DisplayFormatAlpha;{ret.l,surface}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_DisplayFormatAlpha(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_CreateYUVOverlay;{ret.l,width,height,format,display}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg d1,`3
GetReg d2,`4
GetReg a0,`5
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_CreateYUVOverlay(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_LockYUVOverlay;{ret.l,overlay}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_LockYUVOverlay(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_UnlockYUVOverlay;{overlay}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_UnlockYUVOverlay(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_DisplayYUVOverlay;{ret.l,overlay,dstrect}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_DisplayYUVOverlay(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_FreeYUVOverlay;{overlay}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_FreeYUVOverlay(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_GL_LoadLibrary;{ret.l,path}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GL_LoadLibrary(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GL_GetProcAddress;{ret.l,proc}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GL_GetProcAddress(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GL_SetAttribute;{ret.l,attr,value}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg d1,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GL_SetAttribute(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GL_GetAttribute;{ret.l,attr,value}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a0,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GL_GetAttribute(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GL_SwapBuffers
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GL_SwapBuffers(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_GL_UpdateRects;{numrects,rects}
!__SDLBase_SaveRegs
GetReg d0,`1
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GL_UpdateRects(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_GL_Lock
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GL_Lock(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_GL_Unlock
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GL_Unlock(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_WM_SetCaption;{title,icon}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg a1,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_WM_SetCaption(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_WM_GetCaption;{title,icon}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg a1,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_WM_GetCaption(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_WM_SetIcon;{icon,mask}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg a1,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_WM_SetIcon(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_WM_IconifyWindow;{ret.l}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_WM_IconifyWindow(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_WM_ToggleFullScreen;{ret.l,surface}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_WM_ToggleFullScreen(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_WM_GrabInput;{ret.l,mode}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_WM_GrabInput(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GetTicks;{ret.l}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetTicks(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_Delay;{ms}
!__SDLBase_SaveRegs
GetReg d0,`1
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_Delay(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_SetTimer;{ret.l,interval,callback}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a0,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_SetTimer(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_AddTimer;{ret.l,interval,callback,param}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a0,`3
GetReg a1,`4
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_AddTimer(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_RemoveTimer;{ret.l,t}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_RemoveTimer(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_PumpEvents;{}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_PumpEvents(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_PollEvent;{ret.l,event}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_PollEvent(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_WaitEvent;{ret.l,event}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_WaitEvent(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_PeepEvents;{ret.l,events,numevents,action,mask}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg d1,`4
GetReg d2,`5
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_PeepEvents(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_PushEvent;{ret.l,event}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_PushEvent(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_SetEventFilter;{ret.l,filter}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_SetEventFilter(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GetEventFilter;{ret.l}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetEventFilter(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_EventState;{ret.l,type,state}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg d1,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_EventState(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_NumJoysticks;{ret.l}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_NumJoysticks(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_JoystickName;{ret.l,device_index}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_JoystickName(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_JoystickOpen;{ret.l,device_index}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_JoystickOpen(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_JoystickOpened;{ret.l,device_index}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_JoystickOpened(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_JoystickIndex;{ret.l,joystick}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_JoystickIndex(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_JoystickNumAxes;{ret.l,joystick}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_JoystickNumAxes(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_JoystickNumBalls;{ret.l,joystick}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_JoystickNumBalls(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_JoystickNumHats;{ret.l,joystick}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_JoystickNumHats(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_JoystickNumButtons;{ret.l,joystick}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_JoystickNumButtons(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_JoystickUpdate;{}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_JoystickUpdate(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_JoystickEventState;{ret.l,state}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_JoystickEventState(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_JoystickGetAxis;{ret.l,joystick,axis}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_JoystickGetAxis(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_JoystickGetHat;{ret.l,joystick,hat}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_JoystickGetHat(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_JoystickGetBall;{ret.l,joystick,ball,dx,dy}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a1,`4
GetReg a2,`5
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_JoystickGetBall(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_JoystickGetButton;{ret.l,joystick,button}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_JoystickGetButton(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_JoystickClose;{joystick}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_JoystickClose(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_EnableUNICODE;{ret.l,enable}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_EnableUNICODE(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_EnableKeyRepeat;{ret.l,delay,interval}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg d1,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_EnableKeyRepeat(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GetKeyState;{ret.l,numkeys}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetKeyState(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GetModState;{ret.l}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetModState(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_SetModState;{ret.l,modstate}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_SetModState(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GetKeyName;{ret.l,key}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetKeyName(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GetMouseState;{ret.l,x,y}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetMouseState(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GetRelativeMouseState;{ret.l,x,y}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetRelativeMouseState(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_WarpMouse;{x,y}
!__SDLBase_SaveRegs
GetReg d0,`1
GetReg d1,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_WarpMouse(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_CreateCursor;{ret.l,data,mask,w,h,hot_x,hot_y}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg d0,`4
GetReg d1,`5
GetReg d2,`6
GetReg d3,`7
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_CreateCursor(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_SetCursor;{ret.l,cursor}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_SetCursor(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GetCursor;{ret.l}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetCursor(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_FreeCursor;{cursor}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_FreeCursor(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_ShowCursor;{ret.l,toggle}
!__SDLBase_SaveRegs
GetReg d0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_ShowCursor(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GetAppState;{ret.l}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetAppState(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_SetErrorA;{fmt,arglist}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg a1,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_SetErrorA(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_GetError;{ret.l}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetError(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_ClearError;{}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_ClearError(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_AudioInit;{ret.l,driver_name}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_AudioInit(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_AudioQuit;{}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_AudioQuit(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_AudioDriverName;{ret.l,namebuf,maxlen}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_AudioDriverName(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_OpenAudio;{ret.l,desired,obtained}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_OpenAudio(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GetAudioStatus;{ret.l}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetAudioStatus(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_PauseAudio;{pause_on}
!__SDLBase_SaveRegs
GetReg d0,`1
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_PauseAudio(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_LoadWAV_RW;{ret.l,src,freesrc,spec,audio_buf,audio_len}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg a1,`4
GetReg a2,`5
GetReg a3,`6
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_LoadWAV_RW(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_FreeWAV;{audio_buf}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_FreeWAV(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_BuildAudioCVT;{ret.l,cvt,src_format,src_channels,src_rate,dst_format,dst_channels,dst_rate}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg d0,`3
GetReg d1,`4
GetReg d2,`5
GetReg d3,`6
GetReg d4,`7
GetReg d5,`8
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_BuildAudioCVT(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_ConvertAudio;{ret.l,cvt}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_ConvertAudio(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_MixAudio;{dst,src,len,volume}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg a1,`2
GetReg d0,`3
GetReg d1,`4
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_MixAudio(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_LockAudio;{}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_LockAudio(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_UnlockAudio;{}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_UnlockAudio(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_CloseAudio;{}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_CloseAudio(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_CreateThread;{ret.l,fn,data}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_CreateThread(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_ThreadID;{ret.l}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_ThreadID(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_GetThreadID;{ret.l,thread}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_GetThreadID(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_WaitThread;{ret.l,thread,status}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_WaitThread(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_KillThread;{thread}
!__SDLBase_SaveRegs
GetReg a0,`1
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_KillThread(a6)
!__SDLBase_RestoreRegs
End Macro

Macro SDL_Linked_Version;{ret.l}
!__SDLBase_SaveRegs
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_Linked_Version(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro SDL_SoftStretch;{ret.l,src,srcrect,dest,dstrect}
!__SDLBase_SaveRegs
GetReg a0,`2
GetReg a1,`3
GetReg a2,`4
GetReg a3,`5
GetReg a6,*_SDLBase
JSR _LVO_SDLBASE_SDL_SoftStretch(a6)
!__SDLBase_RestoreRegs
`1 = PutRegD0
End Macro


; Open/Close Library:
Function.l SDL_OpenLib{@minVersion.l}
If (*_SDLBase)
  If (minVersion<=*_SDLBase\lib_Version) Then Function Return *_SDLBase
  CloseLibrary_ *_SDLBase : *_SDLBase = 0
End If
If minVersion<0 Then minVersion = 0
*_SDLBase = OpenLibrary_ ("SDL.library",minVersion)
If *_SDLBase
  ; (!) Do some other init stuff here...
Else
  If (minVersion>0)
    error{"Unable to open SDL.library (v"+Str$(minVersion)+"+)!"}
  Else
    error{"Unable to open SDL.library!"}
  End If
End If
Function Return *_SDLBase
End Function


Statement SDL_CloseLib{}
If *_SDLBase
  !SDL_Quit
  CloseLibrary_ *_SDLBase : *_SDLBase = 0
End If
End Statement
!autoexit{SDL_CloseLib}


; Wrapper Functions:
;/* General */
;Int SDL_Init(Uint32 flags);
Function.l SDL_Init{flags.l}
If (SDL_OpenLib{}) 
  !SDL_Init{result.l,flags}
End If
Function Return result
End Function

;void SDL_Quit(void);
Statement SDL_Quit{}
If (SDL_OpenLib{})
  !SDL_Quit
End If
End Statement

;Int SDL_InitSubSystem(Uint32 flags);
Function.l SDL_InitSubSystem{flags.l}
If (SDL_OpenLib{})
  !SDL_InitSubSystem{result.l,flags}
End If
Function Return result
End Function

;void SDL_QuitSubSystem(Uint32 flags);
Statement SDL_QuitSubSystem{flags.l}
If (SDL_OpenLib{})
  !SDL_QuitSubSystem{flags}
End If
End Statement

;Uint32 SDL_WasInit(Uint32 flags);
Function.l SDL_WasInit{flags.l}
If (SDL_OpenLib{})
  !SDL_WasInit{result.l,flags}
End If
Function Return result
End Function

;/* RWOps */
;SDL_RWops * SDL_RWFromFile(const char *File, const char *mode);
Function.l SDL_RWFromFile{filename.s,mode.s}
If (SDL_OpenLib{})
  !SDL_RWFromFile{*result.SDL_RWops,&filename,&mode}
End If
Function Return *result
End Function

;SDL_RWops * SDL_RWFromFP(File *fp, Int autoclose);
Function.l SDL_RWFromFP{fp.l,autoclose.l}
If (SDL_OpenLib{})
  !SDL_RWFromFP{*result.SDL_RWops,fp,autoclose}
End If
Function Return *result
End Function

;SDL_RWops * SDL_RWFromMem(void *mem, Int size);
Function.l SDL_RWFromMem{mem.l,size.l}
If (SDL_OpenLib{})
  !SDL_RWFromMem{*result.SDL_RWops,mem,size}
End If
Function Return *result
End Function

;SDL_RWops * SDL_AllocRW(void);
Function.l SDL_AllocRW{}
If (SDL_OpenLib{})
  !SDL_AllocRW{*result.SDL_RWops}
End If
Function Return *result
End Function

;void SDL_FreeRW(SDL_RWops *area);
Statement SDL_FreeRW{*area.SDL_RWops}
If (SDL_OpenLib{})
  !SDL_FreeRW{*area}
End If
End Statement

;/* GFX */
;SDL_Surface * SDL_LoadBMP_RW(SDL_RWops *src, Int freesrc);
Function.l SDL_LoadBMP_RW{*src.SDL_RWops,freesrc.l}
If (SDL_OpenLib{})
  !SDL_LoadBMP_RW{*result.SDL_Surface,*src,freesrc}
End If
Function Return *result
End Function

Function.l SDL_LoadBMP{filename.s}
Function Return SDL_LoadBMP_RW{SDL_RWFromFile{filename, "rb"}, 1}
End Function

;SDL_Surface * SDL_DisplayFormat(SDL_Surface *surface);
Function.l SDL_DisplayFormat{*surface.SDL_Surface}
If (SDL_OpenLib{})
  !SDL_DisplayFormat{*result.SDL_Surface,*surface}
End If
Function Return *result
End Function

;void SDL_FreeSurface(SDL_Surface *surface);
Statement SDL_FreeSurface{*surface.SDL_Surface}
If (SDL_OpenLib{})
  !SDL_FreeSurface{*surface}
End If
End Statement

;Int SDL_FillRect(SDL_Surface *dst, SDL_Rect *dstrect, Uint32 color);
Function.l SDL_FillRect{*dst.SDL_Surface,*dstrect.SDL_Rect,color.l}
If (SDL_OpenLib{})
  !SDL_FillRect{result.l,*dst,*dstrect,color}
End If
Function Return result
End Function

;Int SDL_UpperBlit(SDL_Surface *src, SDL_Rect *srcrect,SDL_Surface *dst, SDL_Rect *dstrect);
Function.l SDL_UpperBlit{*src.SDL_Surface,*srcrect.SDL_Rect,*dst.SDL_Surface,*dstrect.SDL_Rect}
If (SDL_OpenLib{})
  !SDL_UpperBlit{result.l,*src,*srcrect,*dst,*dstrect}
End If
Function Return result
End Function

;/* alias */
Function.l SDL_BlitSurface{*src.SDL_Surface,*srcrect.SDL_Rect,*dst.SDL_Surface,*dstrect.SDL_Rect}
If (SDL_OpenLib{})
  !SDL_UpperBlit{result.l,*src,*srcrect,*dst,*dstrect}
End If
Function Return result
End Function

;Int SDL_Flip(SDL_Surface *Screen);
Function.l SDL_Flip{*screen.SDL_Surface}
If (SDL_OpenLib{})
  !SDL_Flip{result.l,*screen}
End If
Function Return result
End Function

;void SDL_UpdateRects(SDL_Surface *Screen, Int numrects, SDL_Rect *rects);
Statement SDL_UpdateRects{*_screen.SDL_Surface,numrects.l,*rects.SDL_Rect}
If (SDL_OpenLib{})
  !SDL_UpdateRects{*_screen,numrects,*rects}
End If
End Statement

;void SDL_UpdateRect(SDL_Surface *Screen, Sint32 x, Sint32 y, Uint32 w, Uint32 h);
Statement SDL_UpdateRect{*_screen.SDL_Surface,x.l,y.l,w.l,h.l}
If (SDL_OpenLib{})
  !SDL_UpdateRect{*_screen,x,y,w,h}
End If
End Statement

;const SDL_VideoInfo * SDL_GetVideoInfo(void);
Function.l SDL_GetVideoInfo{}
If (SDL_OpenLib{})
  !SDL_GetVideoInfo{*result.SDL_VideoInfo}
End If
Function Return *result
End Function

;SDL_Surface *SDL_SetVideoMode(Int width, Int height, Int bpp, Uint32 flags);
Function.l SDL_SetVideoMode{width.l,height.l,bpp.l,flags.l}
If (SDL_OpenLib{})
  !SDL_SetVideoMode{*result.SDL_Surface,width,height,bpp,flags}
End If
Function Return *result
End Function

;Uint32 SDL_MapRGB(SDL_PixelFormat *Format, Uint8 r, Uint8 g, Uint8 b);
Function.l SDL_MapRGB{*form.SDL_PixelFormat,r.l,g.l,b.l}
If (SDL_OpenLib{})
  !SDL_MapRGB{result.l,*form,r,g,b}
End If
Function Return result
End Function

;Uint32 SDL_MapRGBA(SDL_PixelFormat *Format,Uint8 r, Uint8 g, Uint8 b, Uint8 a);
Function.l SDL_MapRGBA{*form.SDL_PixelFormat,r.l,g.l,b.l,a.l}
If (SDL_OpenLib{})
  !SDL_MapRGBA{result.l,*form,r,g,b,a}
End If
Function Return result
End Function

;char *SDL_VideoDriverName(char *namebuf, Int MaxLen);
Function.s SDL_VideoDriverName{}
If (SDL_OpenLib{})
  MaxLen name.s=256
  !SDL_VideoDriverName{result.l,&name,256}
  name = Peek.s(&name)
End If
Function Return name
End Function

;SDL_Surface * SDL_GetVideoSurface(void);
Function.l SDL_GetVideoSurface{}
If (SDL_OpenLib{})
  !SDL_GetVideoSurface{*result.SDL_Surface}
End If
Function Return *result
End Function

;Int SDL_VideoModeOK(Int width, Int height, Int bpp, Uint32 flags);
Function.l SDL_VideoModeOK{width.l,height.l,bpp.l,flags.l}
If (SDL_OpenLib{})
  !SDL_VideoModeOK{result.l,width,height,bpp,flags}
End If
Function Return result
End Function

;SDL_Rect ** SDL_ListModes(SDL_PixelFormat *Format, Uint32 flags);
Function.l SDL_ListModes{*_format.SDL_PixelFormat,flags.l}
If (SDL_OpenLib{})
  !SDL_ListModes{result.l,*_format,flags}
End If
Function Return result
End Function

;Int SDL_SetGamma(float Red, float Green, float Blue);
Function.l SDL_SetGamma{_red.f,_green.f,_blue.f}
If (SDL_OpenLib{})
  !SDL_SetGamma{result.l,Peek.l(&_red),Peek.l(&_green),Peek.l(&_blue)}
End If
Function Return result
End Function

;Int SDL_SetGammaRamp(Uint16 *Red, Uint16 *Green, Uint16 *Blue);
Function.l SDL_SetGammaRamp{*_red.w,*_green.w,*_blue.w}
If (SDL_OpenLib{})
  !SDL_SetGammaRamp{result.l,*_red,*_green,*_blue}
End If
Function Return result
End Function

;Int SDL_GetGammaRamp(Uint16 *Red, Uint16 *Green, Uint16 *Blue);
Function.l SDL_GetGammaRamp{*_red.w,*_green.w,*_blue.w}
If (SDL_OpenLib{})
  !SDL_GetGammaRamp{result.l,*_red,*_green,*_blue}
End If
Function Return result
End Function

;Int SDL_SetColors(SDL_Surface *surface,SDL_Color *colors, Int firstcolor, Int ncolors);
Function.l SDL_SetColors{*surface.SDL_Surface,*colors.SDL_Color,firstcolor.l,ncolors.l}
If (SDL_OpenLib{})
  !SDL_SetColors{result.l,*surface,*colors,firstcolor,ncolors}
End If
Function Return result
End Function

;Int SDL_SetPalette(SDL_Surface *surface, Int flags,SDL_Color *colors, Int firstcolor,Int ncolors);
Function.l SDL_SetPalette{*surface.SDL_Surface,flags.l,*colors.SDL_Color,firstcolor.l,ncolors.l}
If (SDL_OpenLib{})
  !SDL_SetPalette{result.l,*surface,flags,*colors,firstcolor,ncolors}
End If
Function Return result
End Function

;void SDL_GetRGB(Uint32 pixel, SDL_PixelFormat *fmt,Uint8 *r, Uint8 *g, Uint8 *b);
Statement SDL_GetRGB{pixel.l,*_format.SDL_PixelFormat,*r.b,*g.b,*b.b}
If (SDL_OpenLib{})
  !SDL_GetRGB{pixel,*_format,*r,*g,*b}
End If
End Statement

;void SDL_GetRGBA(Uint32 pixel, SDL_PixelFormat *fmt,Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);
Statement SDL_GetRGBA{pixel.l,*_format.SDL_PixelFormat,*r.b,*g.b,*b.b,*a.b}
If (SDL_OpenLib{})
  !SDL_GetRGBA{pixel,*_format,*r,*g,*b,*a}
End If
End Statement

;SDL_Surface *SDL_CreateRGBSurface(Uint32 flags, Int width, Int height, Int Depth,Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
Function.l SDL_CreateRGBSurface{flags.l,width.l,height.l,depth_.l,Rmask.l,Gmask.l,Bmask.l,Amask.l}
If (SDL_OpenLib{})
  !SDL_CreateRGBSurface{*result.SDL_Surface,flags,width,height,depth_,Rmask,Gmask,Bmask,Amask}
End If
Function Return *result
End Function

;SDL_Surface *SDL_CreateRGBSurfaceFrom(void *pixels,Int width, Int height, Int Depth, Int pitch,Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
Function.l SDL_CreateRGBSurfaceFrom{*pixels.l,width.l,height.l,_depth.l,pitch.l,Rmask.l,Gmask.l,Bmask.l,Amask.l}
If (SDL_OpenLib{})
  *result.SDL_Surface = 0
  ;!SDL_CreateRGBSurfaceFrom{*result.l,*pixels.l,width.l,height.l,_depth.l,pitch.l,Rmask.l,Gmask.l,Bmask.l,Amask.l}
  !__SDLBase_SaveRegs
  GetReg a0,*pixels
  GetReg d0,width
  GetReg d1,height
  GetReg d2,_depth
  GetReg d3,pitch
  GetReg d4,Rmask
  GetReg d5,Gmask
  GetReg d6,Bmask
  GetReg d7,Amask
  GetReg a6,*_SDLBase
  JSR _LVO_SDLBASE_SDL_CreateRGBSurfaceFrom(a6)
  !__SDLBase_RestoreRegs
  *result = PutRegD0
End If
Function Return *result
End Function

;Int SDL_LockSurface(SDL_Surface *surface);
Function.l SDL_LockSurface{*surface.SDL_Surface}
If (SDL_OpenLib{})
  !SDL_LockSurface{result.l,*surface}
End If
Function Return result
End Function

;void SDL_UnlockSurface(SDL_Surface *surface);
Statement SDL_UnlockSurface{*surface.SDL_Surface}
If (SDL_OpenLib{})
  !SDL_UnlockSurface{*surface}
End If
End Statement

;Int SDL_SaveBMP_RW(SDL_Surface *surface, SDL_RWops *dst, Int freedst);
Function.l SDL_SaveBMP_RW{*surface.SDL_Surface,*dst.SDL_RWops,freedst.l}
If (SDL_OpenLib{})
  !SDL_SaveBMP_RW{result.l,*surface,*dst,freedst}
End If
Function Return result
End Function

;Int SDL_SetColorKey(SDL_Surface *surface, Uint32 flag, Uint32 key);
Function.l SDL_SetColorKey{*surface.SDL_Surface,flag.l,key.l}
If (SDL_OpenLib{})
  !SDL_SetColorKey{result.l,*surface,flag,key}
End If
Function Return result
End Function

;Int SDL_SetAlpha(SDL_Surface *surface, Uint32 flag, Uint8 alpha);
Function.l SDL_SetAlpha{*surface.SDL_Surface,flag.l,alpha.b}
If (SDL_OpenLib{})
  !SDL_SetAlpha{result.l,*surface,flag,alpha}
End If
Function Return result
End Function

;SDL_bool SDL_SetClipRect(SDL_Surface *surface, const SDL_Rect *rect);
Function.l SDL_SetClipRect{*surface.SDL_Surface,*rect.SDL_Rect}
If (SDL_OpenLib{})
  !SDL_SetClipRect{result.l,*surface,*rect}
End If
Function Return result
End Function

;void SDL_GetClipRect(SDL_Surface *surface, SDL_Rect *rect);
Statement SDL_GetClipRect{*surface.SDL_Surface,*rect.SDL_Rect}
If (SDL_OpenLib{})
  !SDL_GetClipRect{*surface,*rect}
End If
End Statement

;SDL_Surface *SDL_ConvertSurface(SDL_Surface *src, SDL_PixelFormat *fmt, Uint32 flags);
Function.l SDL_ConvertSurface{*src.SDL_Surface ,*fmt.SDL_PixelFormat,flags.l}
If (SDL_OpenLib{})
  !SDL_ConvertSurface{*result.SDL_Surface,*src,*fmt,flags}
End If
Function Return *result
End Function

;SDL_Surface * SDL_DisplayFormatAlpha(SDL_Surface *surface);
Function.l SDL_DisplayFormatAlpha{*surface.SDL_Surface}
If (SDL_OpenLib{})
  !SDL_DisplayFormatAlpha{*result.SDL_Surface ,*surface}
End If
Function Return *result
End Function

;/* Overlay */
;SDL_Overlay *SDL_CreateYUVOverlay(Int width, Int height,Uint32 Format, SDL_Surface *display);
Function.l SDL_CreateYUVOverlay{width.l,height.l,form.l,*display.SDL_Surface}
If (SDL_OpenLib{})
  !SDL_CreateYUVOverlay{*result.SDL_Overlay,width,height,form,*display}
End If
Function Return *result
End Function

;Int SDL_LockYUVOverlay(SDL_Overlay *overlay);
Function.l SDL_LockYUVOverlay{*overlay.SDL_Overlay}
If (SDL_OpenLib{})
  !SDL_LockYUVOverlay{result.l,*overlay}
End If
Function Return result
End Function

;void SDL_UnlockYUVOverlay(SDL_Overlay *overlay);
Statement SDL_UnlockYUVOverlay{*overlay.SDL_Overlay}
If (SDL_OpenLib{})
  !SDL_UnlockYUVOverlay{*overlay}
End If
End Statement

;Int SDL_DisplayYUVOverlay(SDL_Overlay *overlay, SDL_Rect *dstrect);
Function.l SDL_DisplayYUVOverlay{*overlay.SDL_Overlay,*dstrect.SDL_Rect}
If (SDL_OpenLib{})
  !SDL_DisplayYUVOverlay{result.l,*overlay,*dstrect}
End If
Function Return result
End Function

;void SDL_FreeYUVOverlay(SDL_Overlay *overlay);
Statement SDL_FreeYUVOverlay{*overlay.SDL_Overlay}
If (SDL_OpenLib{})
  !SDL_FreeYUVOverlay{*overlay}
End If
End Statement

;/* GL */
;Int SDL_GL_LoadLibrary(const char *path);
Function.l SDL_GL_LoadLibrary{path.s}
If (SDL_OpenLib{})
  !SDL_GL_LoadLibrary{result.l,&path}
End If
Function Return result
End Function

;void *SDL_GL_GetProcAddress(const char* proc);
Function.l SDL_GL_GetProcAddress{proc.s}
If (SDL_OpenLib{})
  !SDL_GL_GetProcAddress{result.l,&proc}
End If
Function Return result
End Function

;Int SDL_GL_SetAttribute(SDL_GLattr attr, Int value);
Function.l SDL_GL_SetAttribute{attr.l,value.l}
If (SDL_OpenLib{})
  !SDL_GL_SetAttribute{result.l,attr,value}
End If
Function Return result
End Function

;Int SDL_GL_GetAttribute(SDL_GLattr attr, Int* value);
Function.l SDL_GL_GetAttribute{attr.l,*value.l}
If (SDL_OpenLib{})
  !SDL_GL_GetAttribute{result.l,attr,*value}
End If
Function Return result
End Function

;void SDL_GL_SwapBuffers(void);
Statement SDL_GL_SwapBuffers{}
If (SDL_OpenLib{})
  !SDL_GL_SwapBuffers
End If
End Statement

;void SDL_GL_UpdateRects(Int numrects, SDL_Rect* rects);
Statement SDL_GL_UpdateRects{numrects.l,*rects.SDL_Rect}
If (SDL_OpenLib{})
  !SDL_GL_UpdateRects{numrects,*rects}
End If
End Statement

;void SDL_GL_Lock(void);
Statement SDL_GL_Lock{}
If (SDL_OpenLib{})
  !SDL_GL_Lock
End If
End Statement

;void SDL_GL_Unlock(void);
Statement SDL_GL_Unlock{}
If (SDL_OpenLib{})
  !SDL_GL_Unlock
End If
End Statement

;/* WM */
;void SDL_WM_SetCaption(const char *title, const char *icon);
Statement SDL_WM_SetCaption{title.s,icon.s}
If (SDL_OpenLib{})
  !SDL_WM_SetCaption{&title,&icon}
End If
End Statement

;void SDL_WM_GetCaption(char **title, char **icon);
Statement SDL_WM_GetCaption{_title.l,_icon.l}
If (SDL_OpenLib{})
  !SDL_WM_GetCaption{_title,_icon}
End If
End Statement

;void SDL_WM_SetIcon(SDL_Surface *icon, Uint8 *mask);
Statement SDL_WM_SetIcon{*icon.SDL_Surface,*mask.b}
If (SDL_OpenLib{})
  !SDL_WM_SetIcon{*icon,*mask}
End If
End Statement

;Int SDL_WM_IconifyWindow(void);
Function.l SDL_WM_IconifyWindow{}
If (SDL_OpenLib{})
  !SDL_WM_IconifyWindow{result.l}
End If
Function Return result
End Function

;Int SDL_WM_ToggleFullScreen(SDL_Surface *surface);
Function.l SDL_WM_ToggleFullScreen{*surface.SDL_Surface}
If (SDL_OpenLib{})
  !SDL_WM_ToggleFullScreen{result.l,*surface}
End If
Function Return result
End Function

;SDL_GrabMode SDL_WM_GrabInput(SDL_GrabMode mode);
Function.l SDL_WM_GrabInput{mode.l}
If (SDL_OpenLib{})
  !SDL_WM_GrabInput{result.l,mode}
End If
Function Return result
End Function

;/* Timer */
;Uint32 SDL_GetTicks(void);
Function.l SDL_GetTicks{}
If (SDL_OpenLib{})
  !SDL_GetTicks{result.l}
End If
Function Return result
End Function

;void SDL_Delay(Uint32 ms);
Statement SDL_Delay{ms.l}
If (SDL_OpenLib{})
  !SDL_Delay{ms}
End If
End Statement

;Int SDL_SetTimer(Uint32 interval, SDL_TimerCallback callback);
Function.l SDL_SetTimer{interval.l,callback.l}
If (SDL_OpenLib{})
  !SDL_SetTimer{result.l,interval,callback}
End If
Function Return result
End Function

;SDL_TimerID SDL_AddTimer(Uint32 interval, SDL_NewTimerCallback callback, void *param);
Function.l SDL_AddTimer{interval.l,callback.l,*param.l}
If (SDL_OpenLib{})
  !SDL_AddTimer{result.l,interval,callback,*param}
End If
Function Return result
End Function

;SDL_bool SDL_RemoveTimer(SDL_TimerID t);
Function.l SDL_RemoveTimer{t.l}
If (SDL_OpenLib{})
  !SDL_RemoveTimer{result.l,t}
End If
Function Return result
End Function

;/* events */
;void SDL_PumpEvents(void);
Statement SDL_PumpEvents{}
If (SDL_OpenLib{})
  !SDL_PumpEvents
End If
End Statement

;Int SDL_PollEvent(SDL_Event *Event);
Function.l SDL_PollEvent{*_event.SDL_Event}
If (SDL_OpenLib{})
  !SDL_PollEvent{result.l,*_event}
End If
Function Return result
End Function

;Int SDL_WaitEvent(SDL_Event *Event);
Function.l SDL_WaitEvent{*_event.SDL_Event}
If (SDL_OpenLib{})
  !SDL_WaitEvent{result.l,*_event}
End If
Function Return result
End Function

;Int SDL_PeepEvents(SDL_Event *events, Int numevents,SDL_eventaction action, Uint32 mask);
Function.l SDL_PeepEvents{*_events.SDL_Event,numevents.l,action.l,mask.l}
If (SDL_OpenLib{})
  !SDL_PeepEvents{result.l,*_events,numevents,action,mask}
End If
Function Return result
End Function

;Int SDL_PushEvent(SDL_Event *Event);
Function.l SDL_PushEvent{*_event.SDL_Event}
If (SDL_OpenLib{})
  !SDL_PushEvent{result.l,*_event}
End If
Function Return result
End Function

;void SDL_SetEventFilter(SDL_EventFilter Filter);
Statement SDL_SetEventFilter{_filter.l}
If (SDL_OpenLib{})
  !SDL_SetEventFilter{result.l,_filter}
End If
End Statement

;SDL_EventFilter SDL_GetEventFilter(void);
Function.l SDL_GetEventFilter{}
If (SDL_OpenLib{})
  !SDL_GetEventFilter{result.l}
End If
Function Return result
End Function

;Uint8 SDL_EventState(Uint8 Type, Int state);
Function.b SDL_EventState{_type.b,state.l}
If (SDL_OpenLib{})
  !SDL_EventState{result.l,_type,state}
End If
Function Return result
End Function

;/* joystick */
;Int SDL_NumJoysticks(void);
Function.l SDL_NumJoysticks{}
If (SDL_OpenLib{})
  !SDL_NumJoysticks{result.l}
End If
Function Return result
End Function

;const char *SDL_JoystickName(Int device_index);
Function.s SDL_JoystickName{device_index.l}
If (SDL_OpenLib{})
  !SDL_JoystickName{result.l,device_index}
End If
If result Then name.s = Peek.s(result)
Function Return name
End Function

;SDL_Joystick *SDL_JoystickOpen(Int device_index);
Function.l SDL_JoystickOpen{device_index.l}
If (SDL_OpenLib{})
  !SDL_JoystickOpen{result.l,device_index}
End If
Function Return result
End Function

;Int SDL_JoystickOpened(Int device_index);
Function.l SDL_JoystickOpened{device_index.l}
If (SDL_OpenLib{})
  !SDL_JoystickOpened{result.l,device_index}
End If
Function Return result
End Function

;Int SDL_JoystickIndex(SDL_Joystick *joystick);
Function.l SDL_JoystickIndex{*joystick.SDL_Joystick}
If (SDL_OpenLib{})
  !SDL_JoystickIndex{result.l,*joystick}
End If
Function Return result
End Function

;Int SDL_JoystickNumAxes(SDL_Joystick *joystick);
Function.l SDL_JoystickNumAxes{*joystick.SDL_Joystick}
If (SDL_OpenLib{})
  !SDL_JoystickNumAxes{result.l,*joystick}
End If
Function Return result
End Function

;Int SDL_JoystickNumBalls(SDL_Joystick *joystick);
Function.l SDL_JoystickNumBalls{*joystick.SDL_Joystick}
If (SDL_OpenLib{})
  !SDL_JoystickNumBalls{result.l,*joystick}
End If
Function Return result
End Function

;Int SDL_JoystickNumHats(SDL_Joystick *joystick);
Function.l SDL_JoystickNumHats{*joystick.SDL_Joystick}
If (SDL_OpenLib{})
  !SDL_JoystickNumHats{result.l,*joystick}
End If
Function Return result
End Function

;Int SDL_JoystickNumButtons(SDL_Joystick *joystick);
Function.l SDL_JoystickNumButtons{*joystick.SDL_Joystick}
If (SDL_OpenLib{})
  !SDL_JoystickNumButtons{result.l,*joystick}
End If
Function Return result
End Function

;void SDL_JoystickUpdate(void);
Statement SDL_JoystickUpdate{}
If (SDL_OpenLib{})
  !SDL_JoystickUpdate
End If
End Statement

;Int SDL_JoystickEventState(Int state);
Function.l SDL_JoystickEventState{state.l}
If (SDL_OpenLib{})
  !SDL_JoystickEventState{result.l,state}
End If
Function Return result
End Function

;Sint16 SDL_JoystickGetAxis(SDL_Joystick *joystick, Int axis);
Function.w SDL_JoystickGetAxis{*joystick.SDL_Joystick,axis.l}
If (SDL_OpenLib{})
  !SDL_JoystickGetAxis{result.l,*joystick,axis}
End If
Function Return result
End Function

;Uint8 SDL_JoystickGetHat(SDL_Joystick *joystick, Int hat);
Function.b SDL_JoystickGetHat{*joystick.SDL_Joystick,hat.l}
If (SDL_OpenLib{})
  !SDL_JoystickGetHat{result.l,*joystick,hat}
End If
Function Return result
End Function

;Int SDL_JoystickGetBall(SDL_Joystick *joystick, Int ball, Int *dx, Int *dy);
Function.l SDL_JoystickGetBall{*joystick.SDL_Joystick,ball.l,dx.l,dy.l}
If (SDL_OpenLib{})
  !SDL_JoystickGetBall{result.l,*joystick,ball,dx,dy}
End If
Function Return result
End Function

;Uint8 SDL_JoystickGetButton(SDL_Joystick *joystick, Int button);
Function.b SDL_JoystickGetButton{*joystick.SDL_Joystick,button.l}
If (SDL_OpenLib{})
  !SDL_JoystickGetButton{result.l,*joystick,button}
End If
Function Return result
End Function

;void SDL_JoystickClose(SDL_Joystick *joystick);
Statement SDL_JoystickClose{*joystick.SDL_Joystick}
If (SDL_OpenLib{})
  !SDL_JoystickClose{*joystick}
End If
End Statement

;/* keyboard */
;Int SDL_EnableUNICODE(Int Enable);
Function.l SDL_EnableUNICODE{_enable.l}
If (SDL_OpenLib{})
  !SDL_EnableUNICODE{result.l,_enable}
End If
Function Return result
End Function

 ;Int SDL_EnableKeyRepeat(Int delay, Int interval);
Function.l SDL_EnableKeyRepeat{_delay.l,_interval.l}
If (SDL_OpenLib{})
  !SDL_EnableKeyRepeat{result.l,_delay,_interval}
End If
Function Return result
End Function

;Uint8 * SDL_GetKeyState(Int *numkeys);
Function.l SDL_GetKeyState{*numkeys.l}
If (SDL_OpenLib{})
  !SDL_GetKeyState{result.l,*numkeys}
End If
Function Return result
End Function

;SDLMod SDL_GetModState(void);
Function.l SDL_GetModState{}
If (SDL_OpenLib{})
  !SDL_GetModState{result.l}
End If
Function Return result
End Function

;void SDL_SetModState(SDLMod modstate);
Statement SDL_SetModState{modstate.l}
If (SDL_OpenLib{})
  !SDL_SetModState{result.l,modstate}
End If
End Statement

;char * SDL_GetKeyName(SDLKey key);
Function.s SDL_GetKeyName{key.l}
If (SDL_OpenLib{})
  !SDL_GetKeyName{result.l,key}
  If result Then name.s = Peek.s(result)
End If
Function Return name
End Function

;/* Mouse */
;Uint8 SDL_GetMouseState(Int *x, Int *y);
Function.b SDL_GetMouseState{*x.l,*y.l}
If (SDL_OpenLib{})
  !SDL_GetMouseState{result.l,*x,*y}
End If
Function Return result
End Function

;Uint8 SDL_GetRelativeMouseState(Int *x, Int *y);
Function.b SDL_GetRelativeMouseState{*x.l,*y.l}
If (SDL_OpenLib{})
  !SDL_GetRelativeMouseState{result.l,*x,*y}
End If
Function Return result
End Function

;void SDL_WarpMouse(Uint16 x, Uint16 y);
Statement SDL_WarpMouse{x.w,y.w}
If (SDL_OpenLib{})
  !SDL_WarpMouse{x,y}
End If
End Statement

;SDL_Cursor *SDL_CreateCursor(Uint8 *Data, Uint8 *mask, Int w, Int h, Int hot_x, Int hot_y);
Function.l SDL_CreateCursor{*dataP.b,*mask.b,w.l,h.l,hot_x.l,hot_y.l}
If (SDL_OpenLib{})
  !SDL_CreateCursor{result.l,*dataP,*mask,w,h,hot_x,hot_y}
End If
Function Return result
End Function

;void SDL_SetCursor(SDL_Cursor *Cursor);
Statement SDL_SetCursor{*_cursor.SDL_Cursor}
If (SDL_OpenLib{})
  !SDL_SetCursor{result.l,*_cursor}
End If
End Statement

;SDL_Cursor * SDL_GetCursor(void);
Function.l SDL_GetCursor{}
If (SDL_OpenLib{})
  !SDL_GetCursor{result.l}
End If
Function Return result
End Function

;void SDL_FreeCursor(SDL_Cursor *Cursor);
Statement SDL_FreeCursor{*_cursor.SDL_Cursor}
If (SDL_OpenLib{})
  !SDL_FreeCursor{*_cursor}
End If
End Statement

;Int SDL_ShowCursor(Int Toggle);
Function.l SDL_ShowCursor{_toggle.l}
If (SDL_OpenLib{})
  !SDL_ShowCursor{result.l,_toggle}
End If
Function Return result
End Function

;/* application */
;Uint8 SDL_GetAppState(void);
Function.b SDL_GetAppState{}
If (SDL_OpenLib{})
  !SDL_GetAppState{result.l}
End If
Function Return result
End Function

;/* error */
;void SDL_SetError(const char *fmt,args...);
;void SDL_SetErrorA(const char *fmt,unsigned long *arglist);
Statement SDL_SetErrorA{fmt.s,*_arglist.l}
If (SDL_OpenLib{})
  !SDL_SetErrorA{&fmt,*_arglist}
End If
End Statement

;char *SDL_GetError(void);
Function.s SDL_GetError{}
If (SDL_OpenLib{})
  !SDL_GetError{result.l}
  If result Then error.s = Peek.s(result)
End If
Function Return error
End Function

;void SDL_ClearError(void);
Statement SDL_ClearError{}
If (SDL_OpenLib{})
  !SDL_ClearError
End If
End Statement

;/* audio */
;Int SDL_AudioInit(const char *driver_name);
Function.l SDL_AudioInit{driver_name.s}
If (SDL_OpenLib{})
  !SDL_AudioInit{result.l,&driver_name}
End If
Function Return result
End Function

;void SDL_AudioQuit(void);
Statement SDL_AudioQuit{}
If (SDL_OpenLib{})
  !SDL_AudioQuit
End If
End Statement

;char *SDL_AudioDriverName(char *namebuf, Int MaxLen);
Function.l SDL_AudioDriverNameA{_namebuf.l,_maxlen.l}
If (SDL_OpenLib{})
  !SDL_AudioDriverName{result.l,_namebuf,_maxlen}
End If
Function Return result
End Function

;char *SDL_AudioDriverName(char *namebuf, Int MaxLen);
Function.s SDL_AudioDriverName{}
If (SDL_OpenLib{})
  MaxLen name.s = 256
  !SDL_AudioDriverName{result.l,&name,256}
  name.s = Peek.s(&name)
End If
Function Return name
End Function

;Int SDL_OpenAudio(SDL_AudioSpec *desired, SDL_AudioSpec *obtained);
Function.l SDL_OpenAudio{*desired.SDL_AudioSpec,*obtained.SDL_AudioSpec}
If (SDL_OpenLib{})
  !SDL_OpenAudio{result.l,*desired,*obtained}
End If
Function Return result
End Function

;SDL_audiostatus SDL_GetAudioStatus(void);
Function.l SDL_GetAudioStatus{}
If (SDL_OpenLib{})
  !SDL_GetAudioStatus{result.l}
End If
Function Return result
End Function

;void SDL_PauseAudio(Int pause_on);
Statement SDL_PauseAudio{pause_on.l}
If (SDL_OpenLib{})
  !SDL_PauseAudio{pause_on}
End If
End Statement

;SDL_AudioSpec *SDL_LoadWAV_RW(SDL_RWops *src, Int freesrc,SDL_AudioSpec *spec, Uint8 **audio_buf, Uint32 *audio_len);
Function.l SDL_LoadWAV_RW{*src.SDL_RWops,freesrc.l,*spec.SDL_AudioSpec,*audio_buf.l,*audio_len.l}
If (SDL_OpenLib{})
  !SDL_LoadWAV_RW{result.l,*src,freesrc,*spec,*audio_buf,*audio_len}
End If
Function Return result
End Function

;void SDL_FreeWAV(Uint8 *audio_buf);
Statement SDL_FreeWAV{*audio_buf.l}
If (SDL_OpenLib{})
  !SDL_FreeWAV{*audio_buf}
End If
End Statement

;Int SDL_BuildAudioCVT(SDL_AudioCVT *cvt,Uint16 src_format, Uint8 src_channels, Int src_rate,Uint16 dst_format, Uint8 dst_channels, Int dst_rate);
Function.l SDL_BuildAudioCVT{*cvt.SDL_AudioCVT,src_format.w,src_channels.b,src_rate.l,dst_format.w,dst_channels.b,dst_rate.l}
If (SDL_OpenLib{})
  !SDL_BuildAudioCVT{result.l,*cvt,src_format,src_channels,src_rate,dst_format,dst_channels,dst_rate}
End If
Function Return result
End Function

;Int SDL_ConvertAudio(SDL_AudioCVT *cvt);
Function.l SDL_ConvertAudio{*cvt.SDL_AudioCVT}
If (SDL_OpenLib{})
  !SDL_ConvertAudio{result.l,*cvt}
End If
Function Return result
End Function

;void SDL_MixAudio(Uint8 *dst, const Uint8 *src, Uint32 Len, Int Volum
Statement SDL_MixAudio{*dst.b,*src.b,_len.l,_volume.l}
If (SDL_OpenLib{})
  !SDL_MixAudio{*dst,*src,_len,_volume}
End If
End Statement

;void SDL_LockAudio(void);
Statement SDL_LockAudio{}
If (SDL_OpenLib{})
  !SDL_LockAudio
End If
End Statement

;void SDL_UnlockAudio(void);
Statement SDL_UnlockAudio{}
If (SDL_OpenLib{})
  !SDL_UnlockAudio
End If
End Statement

;void SDL_CloseAudio(void);
Statement SDL_CloseAudio{}
If (SDL_OpenLib{})
  !SDL_CloseAudio
End If
End Statement

;/* thread */
;SDL_Thread * SDL_CreateThread(Int (*fn)(void *), void *Data);
Function.l SDL_CreateThread{_fn.l,*dataP.l}
If (SDL_OpenLib{})
  !SDL_CreateThread{*result.SDL_Thread,_fn,*dataP}
End If
Function Return *result
End Function

;Uint32 SDL_ThreadID(void);
Function.l SDL_ThreadID{}
If (SDL_OpenLib{})
  !SDL_ThreadID{result.l}
End If
Function Return result
End Function

;Uint32 SDL_GetThreadID(SDL_Thread *thread);
Function.l SDL_GetThreadID{*thread.SDL_Thread}
If (SDL_OpenLib{})
  !SDL_GetThreadID{result.l,*thread}
End If
Function Return result
End Function

;void SDL_WaitThread(SDL_Thread *thread, Int *status);
Statement SDL_WaitThread{*thread.SDL_Thread,_status.l}
If (SDL_OpenLib{})
  !SDL_WaitThread{result.l,*thread,_status}
End If
End Statement

;void SDL_KillThread(SDL_Thread *thread);
Statement SDL_KillThread{*thread.SDL_Thread}
If (SDL_OpenLib{})
  !SDL_KillThread{*thread}
End If
End Statement

;/* version */
;const SDL_version * SDL_Linked_Version(void);
Function.l SDL_Linked_Version{}
If (SDL_OpenLib{})
  !SDL_Linked_Version{*result.SDL_version}
End If
Function Return *result
End Function

;/* extensions */
;Int SDL_SoftStretch(SDL_Surface *, SDL_Rect *, SDL_Surface *, SDL_Rect *);
Function.l SDL_SoftStretch{*src.SDL_Surface,*srcrect.SDL_Rect,*dest.SDL_Surface,*dstrect.SDL_Rect}
If (SDL_OpenLib{})
  !SDL_SoftStretch{result.l,*src,*srcrect,*dest,*dstrect}
End If
Function Return result
End Function


; build in demo
CNIF #__include=0
If SDL_Init{0}

  SDL_Quit{}
End If
End

CEND


