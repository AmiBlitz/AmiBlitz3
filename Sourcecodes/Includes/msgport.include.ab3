; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "comm_sender"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = "PATH=music:boehm_remote/sounds"
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: msgport.include                                                       /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
XINCLUDE "error.include.ab3"
XINCLUDE "convert.include.ab3"

#max_messages = 200
#timeout      = 500

NEWTYPE.inmessage
body.s
port.s
End NEWTYPE


NEWTYPE.outmessage
ptr.l
port.s
body.s
timeout.l
End NEWTYPE


NEWTYPE.comm
is_open.w
port_ptr.l
port_name.s
in_body.s
in_port.s
out_body.s
out_port.s
binarymode.w
sigflag.l
End NEWTYPE

Dim List incomming.inmessage(#max_messages-1)
Dim List outgoing.outmessage(#max_messages-1)

DEFTYPE.comm comm
USEPATH comm

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = msgport_SetQuoted {a.s}                                 /
;/                                                                             /
;/ Description:                                                                /
;/  arg.s = msgport_SetQuoted {arg.s}                                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - a.s    : ???                                                              /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s msgport_SetQuoted {a.s}
For n.l = 1 To FLen(a.s)
  b.s + Mid$(a.s,n,1)
  If Mid$(a.s,n,1) = Chr$(34) Then b.s + Chr$(34)
Next
a.s = Chr$(34)+b.s+Chr$(34)
Function Return a.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = msgport_GetSigFlag {}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l msgport_GetSigFlag {}
SHARED comm
Function Return \sigflag
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: msgport_SetBinaryMode {mode.w}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mode.w    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement msgport_SetBinaryMode {mode.w}  ; True = Binary, False = no 0 (default)
SHARED comm
\binarymode = mode
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = msgport_GetNextArg {}                                   /
;/                                                                             /
;/ Description:                                                                /
;/  arg.s = msgport_GetNextArg {}                                              /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s msgport_GetNextArg {}
SHARED comm
a.s = \in_body
While Left$(a.s,1)=" "
  a.s = Right$(a.s,FLen(a.s)-1)
Wend
finished.w = False
c.s = Left$(a.s,1)
If c.s = Chr$(34) Then quoted.w = True:a.s = Right$(a.s,FLen(a.s)-1):Else quoted = False

While finished=False
  c.s = Left$(a.s,1)
  Select c.s
    Case ""
      finished = True
    Case " "
      If quoted = False Then finished = True:c.s = ""

    Case Chr$(34)
      If quoted = True AND Mid$(a.s,2,1) >< Chr$(34) Then finished = True:c.s = "":Else a.s = Right$(a.s,FLen(a.s)-1)

  End Select
  b.s = b.s + c.s
  a.s = Right$(a.s,FLen(a.s)-1)
Wend
\in_body = a.s
Function Return b.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = msgport_GetBody {}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s msgport_GetBody {}
SHARED comm
Function Return \in_body
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = msgport_GetSenderPort {}                                /
;/                                                                             /
;/ Description:                                                                /
;/  portname.s = msgport_sender {}                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s msgport_GetSenderPort {}
SHARED comm
Function Return \in_port
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: msgport_CreateMsg {port.s}                                          /
;/                                                                             /
;/ Description:                                                                /
;/  msgport_newmessgae {port.s}                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - port.s    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement msgport_CreateMsg {port.s}
SHARED comm
\out_port = port
\out_body = ""
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: msgport_AddString {arg.s}                                           /
;/                                                                             /
;/ Description:                                                                /
;/  msgport_AddString {arg.s}                                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - arg.s    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement msgport_AddString {arg.s}
SHARED comm
If \out_body><"" Then \out_body + " "
\out_body + arg.s
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: msgport_AddStringQuoted {arg.s}                                     /
;/                                                                             /
;/ Description:                                                                /
;/  msgport_AddStringQuoted {arg.s}                                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - arg.s    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement msgport_AddStringQuoted {arg.s}
SHARED comm
arg.s = msgport_SetQuoted{arg.s}
If \out_body><"" Then \out_body + " "
\out_body + arg.s
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: msgport_AddValue {value.l}                                          /
;/                                                                             /
;/ Description:                                                                /
;/  msgport_AddValue {value.l}                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - value.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement msgport_AddValue {value.l}
SHARED comm
If \out_body><"" Then \out_body + " "
\out_body + "$"+Hex$(value)
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: msgport_AddBin {ptr.l,blength.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/  msgport_AddBin {ptr.l,blength.l}                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - ptr.l    : ???                                                            /
;/ - blength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement msgport_AddBin {ptr.l,blength.l}
SHARED comm
dummy.s = LSet$ ("",blength)
CopyMem_ ptr.l,&dummy.s,blength
\out_body + dummy.s
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = msgport_GetMsg {}                                       /
;/                                                                             /
;/ Description:                                                                /
;/  succ.w = msgport_GetMsg {}                                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w msgport_GetMsg {}
SHARED comm,outgoing(),incomming()
    ;  n.l=0
    ;  ResetList incomming()
    ;  While NextItem(incomming()):n+1:Wend
    ;  If n>3 Then error {"too much messages !!! -> "+Str$(n)}

*msg.Message = GetMsg_(\port_ptr)
succ.w = False
While *msg
  ownmsg.w = False
  ResetList outgoing()
  While NextItemFast(outgoing())
    If outgoing()\ptr = *msg
      ;Delay_ 1
      port.s = Peek.s(*msg\mn_ReplyPort\mp_Node\ln_Name)
      ;port2.s = Peek.s(*msg\mn_ReplyPort\mp_Node\ln_Name)
      ;port3.s = Peek.s(*msg\mn_ReplyPort\mp_Node\ln_Name)
      ;For n.l = 0 To 31
      ; port.s = Replace$(port.s,Chr$(n),"["+Str$(n)+"]")
      ; port2.s = Replace$(port2.s,Chr$(n),"["+Str$(n)+"]")
      ; port3.s = Replace$(port3.s,Chr$(n),"["+Str$(n)+"]")
      ;Next
      If port.s=\port_name
        If *msg\mn_Length>0 Then FreeMem_ *msg,*msg\mn_Length:Else error {"Got message with length="+Str$(*msg\mn_Length)+"!"}
      Else
        error {"Internal Error: Message has wrong portname ! \\22"+port.s+"\\22 should be \\22"+\port_name+"\\22 !"+port2.s+port3.s}
      End If
      KillItem outgoing()
      ownmsg.w = True
    Else
      outgoing()\timeout-1
      If outgoing()\timeout=False
        If ask{"Message timeout ! - "+outgoing()\port+" does not respond !","Try again|Cancel"}=False
          ; KillItem outgoing() ; bleibt im queue aber ist dead !
        Else
          outgoing()\timeout = #timeout
        End If
      End If
    End If
  Wend
  If ownmsg=False
    If AddLast(incomming())
      If \binarymode
        incomming()\body = LSet$ ("",*msg\mn_Length-SizeOf.Message)
        CopyMem_ *msg+SizeOf.Message,&incomming()\body,*msg\mn_Length-SizeOf.Message
      Else
        Poke.b *msg + *msg\mn_Length -1,0 ; Sicherheitsmassnahme !
        incomming()\body = Peek.s(*msg+SizeOf.Message)
      End If
      incomming()\port = Peek.s(*msg\mn_ReplyPort\mp_Node\ln_Name)
    Else
      n.l=0
      ResetList incomming()
      While NextItemFast(incomming()):n+1:Wend
      error {"Too much incomming messages ! System overload. ("+Str$(n)+" messages)"}
    End If
    ReplyMsg_ *msg
  End If
  *msg.Message = GetMsg_(\port_ptr)
Wend

ResetList incomming()
If NextItemFast(incomming()) Then succ.w = True:\in_body = incomming()\body:\in_port = incomming()\port:KillItem incomming()
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: msgport_FakeMsg {port.s,body.s}                                     /
;/                                                                             /
;/ Description:                                                                /
;/     ;  n.l=0                                                                /
;/     ;  ResetList incomming()                                                /
;/     ;  While NextItem(incomming()):n+1:Wend                                 /
;/     ;  If n>3 Then error {"too much messages !!! -> "+Str$(n)}              /
;/       ;Delay_ 1                                                             /
;/       ;port2.s = Peek.s(*msg\mn_ReplyPort\mp_Node\ln_Name)                  /
;/       ;port3.s = Peek.s(*msg\mn_ReplyPort\mp_Node\ln_Name)                  /
;/       ;For n.l = 0 To 31                                                    /
;/       ; port.s = Replace$(port.s,Chr$(n),"["+Str$(n)+"]")                   /
;/       ; port2.s = Replace$(port2.s,Chr$(n),"["+Str$(n)+"]")                 /
;/       ; port3.s = Replace$(port3.s,Chr$(n),"["+Str$(n)+"]")                 /
;/       ;Next                                                                 /
;/           ; KillItem outgoing() ; bleibt im queue aber ist dead !           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - port.s    : ???                                                           /
;/ - body.s    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement msgport_FakeMsg {port.s,body.s}
SHARED incomming(),comm
If AddLast(incomming())
  incomming()\body = body.s
  incomming()\port = port.s
End If
task.l = FindTask_(0)
If task Then Signal_ task,comm\sigflag
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = msgport_WaitForMsg {command.s,@timeout.l}               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - command.s    : ???                                                        /
;/ - timeout.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w msgport_WaitForMsg {command.s,@timeout.l}
SHARED comm
If timeout<0 Then timeout.l=2500
succ.w = False
While timeout>0
  While msgport_GetMsg{}=False AND timeout>0:timeout-1:Delay_ 1:Wend
  If UCase$(Left$(comm\in_body,FLen(command.s))) = UCase$(command.s)
    timeout=-2
  Else
    msgport_FakeMsg {comm\in_port,comm\in_body}
    timeout-1
    Delay_ 1
  End If
Wend
If timeout>-2 Then error {"Waiting for "+command.s+" timed out !"}
If UCase$(Left$(comm\in_body,FLen(command.s))) = UCase$(command.s) Then succ=True
Function Return succ
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: msgport_Wait {}                                                     /
;/                                                                             /
;/ Description:                                                                /
;/  msgport_Wait {}                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement msgport_Wait {}
SHARED comm
While msgport_GetMsg{}=False
  WaitPort_ \port_ptr
Wend
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = msgport_SendMsg {}                                      /
;/                                                                             /
;/ Description:                                                                /
;/  succ.w = msgport_SendMsg {}                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w msgport_SendMsg {}
SHARED comm,outgoing()
succ.w = False
If \out_port >< "" AND \out_body><""
  If AddItem(outgoing())
    *msg.Message = AllocMem_ (SizeOf.Message+FLen(\out_body)+1,0)
    If *msg
      *msg\mn_Length = SizeOf.Message+FLen(\out_body)+1
      *msg\mn_ReplyPort  = \port_ptr
      outgoing()\port    = \out_port
      outgoing()\body    = \out_body
      outgoing()\timeout = #timeout
      outgoing()\ptr     = *msg
      Poke.s *msg + SizeOf.Message,\out_body
      Forbid_
      destport.l = FindPort_ (\out_port)
      If destport Then PutMsg_ destport,*msg
      Permit_
      If destport
        succ.w = True
      Else
        error {"Can`t find "+\out_port+" !"}
        FreeMem_ *msg,SizeOf.Message+FLen(\out_body)+1
        KillItem outgoing()
      End If
      \out_port = ""
      \out_body = ""
    Else
     KillItem outgoing()
      error {"Unable to init message !"}
    End If
  Else
    error {"Unable to add message to output queue !"}
  End If
Else
  error {"SEND: Message not completely specified !"}
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: msgport_ClosePort {@timeout.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/  msgport_ClosePort {}                                                       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - timeout.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement msgport_ClosePort {@timeout.l}
SHARED comm,outgoing(),incomming()
If\is_open
  dummy.l = msgport_GetMsg{}
  ResetList outgoing()
  If timeout<0 Then timeout=50*10

  While NextItemFast(outgoing())=True AND timeout><0
    ;error {"Message pending ! "+outgoing()\body+" /Time: " +Str$(timeout)}
    dummy.l = msgport_GetMsg{}
    Delay_ 1
    timeout -1
    ResetList outgoing()
  Wend

  ClearList incomming()
End If
If \port_ptr Then RemPort_ \port_ptr:DeleteMsgPort_ \port_ptr:\port_ptr = False
\port_name = ""
\is_open   = False
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = msgport_OpenPort {port_name.s}                          /
;/                                                                             /
;/ Description:                                                                /
;/     ;error {"Message pending ! "+outgoing()\body+" /Time: " +Str$(timeout)} /
;/                                                                             /
;/  succ.w = msgport_OpenPort {}                                               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - port_name.s    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w msgport_OpenPort {port_name.s}
SHARED comm
If \is_open Then msgport_ClosePort{0}
\port_name = port_name.s
\port_ptr  = CreateMsgPort_
\in_body  = ""
\out_body = ""
\out_port = ""
If \port_ptr
  *mp.MsgPort = \port_ptr
  *mp\mp_Node\ln_Name = &\port_name
  *mp\mp_Node\ln_Pri  = 0
  AddPort_ \port_ptr
  \is_open = True
  \binarymode = False
  \sigflag = 1 LSL *mp\mp_SigBit
Else
  msgport_ClosePort {0}
End If
Function Return \is_open
End Function


!autoexit{msgport_ClosePort}

CNIF #__include=0
End
CEND


