; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "FontDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: font.include                                                          /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
CEND

XINCLUDE "error.include.ab3"


DEFTYPE.TextAttr fonta

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = font_Exist {f$}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - f$    : ???                                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l font_Exist {f$}
lock.l=Lock_(&f$,#ACCESS_READ)
If lock
DEFTYPE .FileInfoBlock fib
If Examine_(lock, fib) <> 0
  If fib\fib_DirEntryType < 0
    size.l=Peek.l(&fib\fib_Size)  ; file
  Else size=-1                  ; drawer
  EndIf
  Else size=-2 ; failed to examine file! rare occurence!
EndIf
UnLock_ lock
Else size=0 ; failed to lock file (doesn't exist basically)...
EndIf
Function Return size
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = font_Open {fontname.s,ysize.l}                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fontname.s    : ???                                                       /
;/ - ysize.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l font_Open {fontname.s,ysize.l}
SHARED fonta
succ.l = False
If fontname.s><"" AND ysize>1
  If FLen(fontname.s)>5
    If UCase$(Right$(fontname.s,5))=".FONT" Then fontname.s=Left$(fontname.s,FLen(fontname.s)-5)
  End If
  filename.s="FONTS:"+fontname.s+".font"
  succ = font_Exist {filename.s}
End If

If succ=False AND Used Screen>=0
;  error {"Unable to load "+fontname.s+"/"+Str$(ysize)+": fall back to screenfont !"}
  *scr._Screen=Peek.l(Addr Screen(Used Screen))
  If *scr
    *scfont.TextAttr=*scr\Font
    If *scfont
      fontname.s = Peek.s(*scfont.TextAttr\ta_Name)
      ysize      = *scfont.TextAttr\ta_YSize
      If UCase$(Right$(fontname.s,5))=".FONT" Then fontname.s=Left$(fontname.s,FLen(fontname.s)-5)
      filename.s="FONTS:"+fontname.s+".font"
      succ = font_Exist {filename.s}
    Else
      error {"Cant find screens font !"}
    End If
  Else
    error {"Cant find used screen !"}
  End If
Else
  If succ=False
    error {"No used screen !"}
  End If
End If

If succ=False
  fontname.s = "topaz"
  ysize      = 8
  succ = True
  error {"Font >"+fontname.s+"< is missing - fallback to topaz/8 !"}
End If

If succ
  fontname.s = "Fonts:"+fontname.s+".font"
  fonta\ta_Name  = &fontname.s
  fonta\ta_YSize = ysize  ; /* height of the font */
  fonta\ta_Style = 0      ; /* intrinsic font style */
  fonta\ta_Flags = #FPF_DISKFONT;|#FPF_PROPORTIONAL      ; /* font preferences and flags */
  *font.TextFont = OpenDiskFont_ (fonta)
  If *font=0 Then error {"Font "+fontname.s+"/"+Str$(ysize)+" not found !"}
End If
Function Return *font
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: font_Use {rp.l,font.l}                                              /
;/                                                                             /
;/ Description:                                                                /
;/  error {"Unable to load "+fontname.s+"/"+Str$(ysize)+": fall back to scre:: /
;/ enfont !"}                                                                  /
;/   fonta\ta_YSize = ysize  ; /* height of the font */                        /
;/   fonta\ta_Style = 0      ; /* intrinsic font style */                      /
;/   fonta\ta_Flags = #FPF_DISKFONT;|#FPF_PROPORTIONAL      ; /* font prefer:: /
;/ ences and flags */                                                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - rp.l    : ???                                                             /
;/ - font.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement font_Use {rp.l,font.l}
SetFont_ rp,font
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: font_PrintRP {rp.l,str_ptr.l}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - rp.l    : ???                                                             /
;/ - str_ptr.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement font_PrintRP {rp.l,str_ptr.l}
Text_ rp,str_ptr,Peek.l(str_ptr-4)
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = font_GetTextLength {rp.l,str_ptr.l,@count.l,@font.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - rp.l    : ???                                                             /
;/ - str_ptr.l    : ???                                                        /
;/ - count.l    : ???                                                          /
;/ - font.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l font_GetTextLength {rp.l,str_ptr.l,@count.l,@font.l}
If count<1 Then count = Peek.l(str_ptr-4)
If font><-1 AND font><0 Then *rprt.RastPort=rp:oldfont.l = *rprt\Font:SetFont_ rp,font:Else oldfont=0
tlen.l = TextLength_ (rp,str_ptr,count)
If oldfont><0 Then SetFont_ rp,oldfont
Function Return tlen
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = font_GetFromBB2 {bb2font.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - bb2font.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l font_GetFromBB2 {bb2font.l}
Function Return Peek.l(Addr IntuiFont(bb2font)+8)
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = font_GetSize {*font.TextFont}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *font.TextFont    : ???                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l font_GetSize {*font.TextFont}
Function Return *font\tf_YSize
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: font_Close {*font.TextFont}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *font.TextFont    : ???                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement font_Close {*font.TextFont}
If *font
  CloseFont_ *font
End If
End Statement



CNIF #__include=0
WbToScreen 0
*scr.Screen = Peek.l(Addr Screen(0))
End
CEND
