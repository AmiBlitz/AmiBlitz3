; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "DynArrayDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 20
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 38
; CursorColumn    = 27
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: dynamicarray.include                                                  /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 08/01/2008                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
NEWTYPE.dynArray
useN.l
allocN.l
incN.l
itemSize.l
*array.l
End NEWTYPE

#DA_DEFAULTINCITEMS = 32
CNIF @#DA_NOFILIO=0
#DA_NOFILEIO = 0
CEND

CNIF #DA_NOFILEIO=0
XINCLUDE "file.include.ab3"
CEND

Dim List *da_TrackList.dynArray(0)

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: da_Clear {*da.dynArray}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *da.dynArray    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement da_Clear{*da.dynArray}
If *da
  If *da\array
    FreeVec_ *da\array : *da\array = 0
  End If
  *da\allocN = 0
  *da\useN   = 0
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: da_Unuse {*da.dynArray}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *da.dynArray    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement da_Unuse{*da.dynArray}
If *da
  *da\useN   = 0
End If
End Statement
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = da_Create {itemSize.l,@incItems.l}                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - itemSize.l    : ???                                                       /
;/ - incItems.l    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l da_Create{itemSize.l,@incItems.l}
SHARED *da_TrackList()
If incItems<1 incItems = #DA_DEFAULTINCITEMS
*da.dynArray = AllocVec_(SizeOf.dynArray,#MEMF_ANY)
If *da
  *da\allocN   = 0
  *da\useN     = 0
  *da\array    = 0
  *da\itemSize = itemSize
  *da\incN     = incItems
  If AddItem(*da_TrackList())
    *da_TrackList() = *da
  End If
End If
Function Return *da
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = da_Pointer2Index {*da.dynArray,ptr.l}                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *da.dynArray    : ???                                                     /
;/ - ptr.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l da_Pointer2Index{*da.dynArray,ptr.l}
i.l = -1
If *da\array
  i.l = (ptr-*da\array) / *da\itemSize
  If i<0 Then i=-1
  If i>=*da\allocN Then i=-1
End If
Function Return i
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = da_Expand {*da.dynArray,itemMax.l}                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *da.dynArray    : ???                                                     /
;/ - itemMax.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l da_Expand{*da.dynArray,itemMax.l}
If *da
  If *da\allocN>itemMax Then Function Return -1
  oldAllocN.l = *da\allocN
  *da\allocN = Max(itemMax,*da\allocN + *da\incN)
  tmp.l = AllocVec_ (*da\allocN * *da\itemSize,#MEMF_CLEAR)
  If tmp
    If *da\array
      CopyMem_ *da\array,tmp,oldAllocN * *da\itemSize
      FreeVec_ *da\array
    End If
    *da\array = tmp
    Function Return -1
  End If
End If
Function Return 0
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l =  da_GetUseN {*da.dynArray}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *da.dynArray    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST da_GetUseN{*da.dynArray}
Function Return *da\useN
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l =  da_GetItemFast {*da.dynArray,itemX.l}                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *da.dynArray    : ???                                                     /
;/ - itemN.l    : ???                                                          /
;/ - itemX.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST da_GetItemFast{*da.dynArray,itemX.l}
Function Return *da\array + itemX * *da\itemSize
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l =  da_GetItem {*da.dynArray,itemX.l}                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *da.dynArray    : ???                                                     /
;/ - itemN.l    : ???                                                          /
;/ - itemX.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST da_GetItem{*da.dynArray,itemX.l}
;If *da\array = 0 Then Function Return 0
If da_Expand{*da,itemX}
  If itemX>=*da\useN Then *da\useN = itemX+1
  Function Return *da\array + itemX * *da\itemSize
End If
Function Return 0
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: da_ExchangeItems {*da.dynArray,itemA.l,itemB.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *da.dynArray    : ???                                                     /
;/ - itemA.l    : ???                                                          /
;/ - itemB.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST da_ExchangeItems{*da.dynArray,itemA.l,itemB.l}
If itemA=itemB OR itemA<0 OR itemB<0 Then Statement Return
itemX.l = *da\useN
If da_Expand{*da,itemX}
  CopyMem_ *da\array + *da\itemSize*itemA,*da\array + *da\itemSize*itemX, *da\itemSize
  CopyMem_ *da\array + *da\itemSize*itemB,*da\array + *da\itemSize*itemA, *da\itemSize
  CopyMem_ *da\array + *da\itemSize*itemX,*da\array + *da\itemSize*itemB, *da\itemSize
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  newitemPtr.l =  da_SetItem {*da.dynArray,itemX.l,@itemPtr.l}       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *da.dynArray : pointer to dynamic array                                   /
;/ - itemN.l      : index of item                                              /
;/ - itemPtr.l    : optional pointer to existing item that will be copied      /
;/ - itemX.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - newitemPtr.l : Pointer to new array item or 0 if failed                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST da_SetItem{*da.dynArray,itemX.l,@itemPtr.l}
If *da
  If *da\allocN<=itemX Then da_Expand{*da,itemX}
  If *da\array
    If itemX>=*da\useN Then *da\useN = itemX+1
    newitemPtr.l = *da\array + itemX * *da\itemSize
    If itemPtr><-1 AND itemPtr><0
      CopyMem_ itemPtr,newitemPtr,*da\itemSize
    End If
    Function Return newitemPtr
  End If
End If
Function Return 0
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l =  da_AddItem {*da.dynArray,@itemPtr.l}                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *da.dynArray    : ???                                                     /
;/ - itemPtr.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST da_AddItem{*da.dynArray,@itemPtr.l}
If *da
  Function Return da_SetItem{*da,*da\useN,itemPtr}
End If
Function Return 0
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l =  da_InsertItem {*da.dynArray,itemX.l,@itemPtr.l}         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *da.dynArray    : ???                                                     /
;/ - itemX.l    : ???                                                          /
;/ - itemPtr.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST da_InsertItem{*da.dynArray,itemX.l,@itemPtr.l}
If *da
  If itemX>=0 AND itemX<*da\useN
    If da_Expand{*da.dynArray,*da\useN}
      For itemY.l = *da\useN-1 To itemX Step -1
        CopyMem_ *da\array + (itemY) * *da\itemSize, *da\array + (itemY+1) * *da\itemSize, *da\itemSize
      Next
      *da\useN+1
    End If
  End If
  Function Return da_SetItem{*da,itemX,itemPtr}
End If
Function Return 0
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l =  da_InsertItemSortedByLong {*da.dynArray,structoffset.:: /
;/ l,long.l,@itemPtr.l,@ascending.l}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *da.dynArray    : ???                                                     /
;/ - structoffset.l    : ???                                                   /
;/ - long.l    : ???                                                           /
;/ - itemPtr.l    : ???                                                        /
;/ - ascending.l    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST da_InsertItemSortedByLong{*da.dynArray,structoffset.l,long.l,@itemPtr.l,@ascending.l}
If *da
  If *da\array
    If ascending
      For itemX.l = 0 To *da\useN-1
        along.l = Peek.l(*da\array + (itemX * *da\itemSize) + structoffset)
        If long<along Then Function Return da_InsertItem{*da,itemX,itemPtr}
      Next
    Else
      For itemX.l = 0 To *da\useN-1
        along.l = Peek.l(*da\array + (itemX * *da\itemSize) + structoffset)
        If long>along Then Function Return da_InsertItem{*da,itemX,itemPtr}
      Next
    End If
  End If
  Function Return da_InsertItem{*da,*da\useN,itemPtr}
End If
Function Return 0
End Function
 

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: da_RemoveItem {*da.dynArray,itemX.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *da.dynArray    : ???                                                     /
;/ - itemX.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST da_RemoveItem{*da.dynArray,itemX.l}
If *da
  If itemX>=0 AND itemX<*da\allocN-1
    For itemY.l = itemX To *da\useN-2
      CopyMem_ *da\array + (itemY+1) * *da\itemSize,*da\array + itemY * *da\itemSize, *da\itemSize
    Next
  End If
  If itemX<*da\useN Then *da\useN-1
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: da_Free {*da.dynArray}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *da.dynArray    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement da_Free{*da.dynArray}
SHARED *da_TrackList()
If *da
  da_Clear{*da}
  FreeVec_ *da
  ResetList *da_TrackList()
  While NextItemFast(*da_TrackList())
    If *da_TrackList()=*da
      KillItem *da_TrackList()
    End If
  Wend
End If
End Statement

CNIF #DA_NOFILEIO=0
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = da_Write {*da.dynArray,fid.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *da.dynArray    : ???                                                     /
;/ - fid.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l da_Write{*da.dynArray,fid.l}
succ.l = False
If *da
  If file_WriteChunk{fid,@"ABDA"}
    file_WriteTag{fid,@"ITMS",*da\itemSize}
    file_WriteTag{fid,@"ITMN",*da\useN}
    file_WriteTag{fid,@"INCN",*da\incN}
    If *da\array
      file_WriteTag{fid,@"DATA",*da\useN**da\itemSize }
      file_WriteMem{fid,*da\array,*da\useN**da\itemSize}
    End If
  End If
  file_CloseChunk{fid,@"ABDA"}
  succ.l = True
End If
Function Return succ
End Function
CEND


CNIF #DA_NOFILEIO=0
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = da_Read {*da.dynArray,fid.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *da.dynArray    : ???                                                     /
;/ - fid.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l da_Read{*da.dynArray,fid.l}
If *da
  itemSize.l = 1
  itemN.l    = 0
  incN.l     = 1
  If file_ReadLong{fid}=@"ABDA"
    bsize.l = file_ReadLong{fid}
    While bsize>0
      Select file_ReadTag{fid}
        Case @"ITMS" : itemSize = file_GetTagValue{}
        Case @"ITMN" : itemN    = file_GetTagValue{}
        Case @"INCN" : incN     = file_GetTagValue{}
        Case @"DATA" : datSize.l = file_GetTagValue{}
          If itemSize><*da\itemSize
            error {"\\__THIS_FUNCTION: Failed to load dynamic array (wrong item size)!"}
            Function Return False
          End If
          If da_Expand{*da,itemN}
            file_ReadMem{fid,*da\array,datSize}
            succ.l = True
          End If
          *da\useN = itemN
        Default
          ; unknown tag
      End Select
    Wend
  End If
End If
End Function
CEND


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: da_AutoExit {}                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement da_AutoExit{}
SHARED *da_TrackList()
done.l = False
Repeat
  ResetList *da_TrackList()
  If NextItemFast(*da_TrackList()) Then da_Free{*da_TrackList()} : Else done=-1
Until done
End Statement
!autoexit{da_AutoExit}


CNIF #__include=0
NEWTYPE.myType
x.l
y.l
z.l
End NEWTYPE

*myArray.dynArray = da_Create{SizeOf.myType}
item.myType\x = 1,2,3
da_SetItem{*myArray,2,item}

*item2.myType = da_GetItem{*myArray,2}

NPrint "x=",*item2\x," y=",*item2\y," z=",*item2\z
End
CEND

