; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "GUSDemo"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 14
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: gus.include                                                           /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
SYNTAX 2
OPTIMIZE 7
CEND

XINCLUDE "error.include.ab3"
XINCLUDE "dos.include.ab3"
XINCLUDE "convert.include.ab3"
XINCLUDE "convert_audio.include.ab3"
XINCLUDE "file.include.ab3"

NEWTYPE.gusheader
header.b[22]       ; "GF1PATCH110\0ID#0000/jk02\0" OR
description.b[60]  ; Discription (in ASCII)
numinstr.b         ; Number of instruments (To some patch makers, 0 means 1)
voices.b           ; Voices (Always 14?)
channels.b         ; Channels
waveforms_l.b      ; Waveforms
waveforms_h.b
mastervolume_l.b   ; Master Volume [0..127]
mastervolume_h.b
data_size.b[4]     ; Data size
reserved.b[36]     ; Reserved
instr_id_l.b       ; 129      2 bytes  Instrument ID [0..0xFFFF]
instr_id_h.b
instr_name.b[16]   ; 131     16 bytes  Instrument name (in ASCII)
instr_size.b[4]    ; 147      4 bytes  Instrument size
instr_layers.b     ; 151      1 byte   Layers
reserved2.b[40]    ; 152     40 bytes  Reserved
layer_dupl.b       ; 192      1 byte   Layer duplicate
layer.b            ; 193      1 byte   Layer
layer_size.l       ; 194      4 bytes  Layer size
numsamples.b         ; 198      1 byte   Number of samples
reserved3.b [40]   ; 199     40 bytes  Reserved
End NEWTYPE


NEWTYPE.gussample
name.b[7]     ;         7 bytes  Wave name (in ASCII)
fractions.b   ;         1 byte   Fractions
              ;        bit 0..3: Loop offset Start fractions [0/16 .. 15/16]
              ;        bit 4..7: Loop offset End fractions [0/16 .. 15/16]
sample_size.l ;         4 bytes  Sample Data size (s)
loop_start.l  ;         4 bytes  Loop Start
loop_end.l    ;         4 bytes  Loop End
samplerate.w  ;         2 bytes  Sample rate
freq_low.l    ;         4 bytes  Low frequency
freq_high.l   ;         4 bytes  High frequency
freq_root.l   ;         4 bytes  Root frequency
tune_unused.w ;         2 bytes  Tune (Always 1, NOT Used anymore)
pan.b         ; 1 byte   Panning [0:left .. 15:right]
env_rate_on.b[3]   ;      3 bytes  Envelope rates (On)   (stage 0,1,2)
env_rate_off.b[3]  ;       3 bytes  Envelope rates (Off)  (stage 3,4,5)
env_offset_on.b[3] ;         3 bytes  Envelope offsets (On) (stage 0,1,2)
env_offset_off.b[3] ;         3 bytes  Envelope offsets (Off)(stage 3,4,5)
                    ;  stage 0: Attack
                    ;        1: Decay
                    ;        2: Sustain
                    ;        3,4,5: Release
trem_sweep.b ;         1 byte   Tremolo sweep
trem_rate.b  ;         1 byte   Tremolo rate
trem_depth.b ;         1 byte   Tremolo Depth
vibra_sweep.b ;         1 byte   Vibrato sweep
vibra_rate.b ;         1 byte   Vibrato rate
vibra_depth.b ;         1 byte   Vibrato Depth
sampletyp.b   ;         1 byte   Sampling modes
              ;        bit 0: 16-bit (versus 8-bit)
              ;        bit 1: Unsigned (versus signed)
              ;        bit 2: Looping
              ;        bit 3: Pingpong
              ;        bit 4: Reverse
              ;        bit 5: Sustein
              ;        bit 6: Envelope
              ;        bit 7: Clamped release (6th Point of envelope)
scale_freq.b[2]  ;         2 bytes  Scale frequency
scale_factor.b[2];        2 bytes  Scale factor [0..2048] (1024 is normal)
reserved.b[36];        36 bytes  Reserved
;        (s)bytes  Sample data
End NEWTYPE

NEWTYPE.sample_add
count.l
filepos.l
bit.l
blength.l
flength.l
samplerate.l
unsigned.l
rootkey.l
highkey.l
lowkey.l
fine.l
loop_start.l
loop_start_frac.l
loop_end.l
loop_end_frac.l
loop.l
gain.l
pan.l
channels.b
End NEWTYPE

NEWTYPE.gusengine
dos.l
is_open.l
header.gusheader
sample.gussample
sample_add.sample_add
End NEWTYPE




DEFTYPE.gusengine gusengine
USEPATH gusengine


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: gus_close {}                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ header.b[22]       ; "GF1PATCH110\0ID#000002\0" OR                          /
;/ description.b[60]  ; Discription (in ASCII)                                 /
;/ numinstr.b         ; Number of instruments (To some patch makers, 0 means:: /
;/  1)                                                                         /
;/ voices.b           ; Voices (Always 14?)                                    /
;/ channels.b         ; Channels                                               /
;/ waveforms_l.b      ; Waveforms                                              /
;/ mastervolume_l.b   ; Master Volume [0..127]                                 /
;/ data_size.b[4]     ; Data size                                              /
;/ reserved.b[36]     ; Reserved                                               /
;/ instr_id_l.b       ; 129      2 bytes  Instrument ID [0..0xFFFF]            /
;/ instr_name.b[16]   ; 131     16 bytes  Instrument name (in ASCII)           /
;/ instr_size.b[4]    ; 147      4 bytes  Instrument size                      /
;/ instr_layers.b     ; 151      1 byte   Layers                               /
;/ reserved2.b[40]    ; 152     40 bytes  Reserved                             /
;/ layer_dupl.b       ; 192      1 byte   Layer duplicate                      /
;/ layer.b            ; 193      1 byte   Layer                                /
;/ layer_size.l       ; 194      4 bytes  Layer size                           /
;/ numsamples.b         ; 198      1 byte   Number of samples                  /
;/ reserved3.b [40]   ; 199     40 bytes  Reserved                             /
;/ name.b[7]     ;         7 bytes  Wave name (in ASCII)                       /
;/ fractions.b   ;         1 byte   Fractions                                  /
;/               ;        bit 0..3: Loop offset Start fractions [0/16 .. 15/:: /
;/ 16]                                                                         /
;/               ;        bit 4..7: Loop offset End fractions [0/16 .. 15/16]  /
;/ sample_size.l ;         4 bytes  Sample Data size (s)                       /
;/ loop_start.l  ;         4 bytes  Loop Start                                 /
;/ loop_end.l    ;         4 bytes  Loop End                                   /
;/ samplerate.w  ;         2 bytes  Sample rate                                /
;/ freq_low.l    ;         4 bytes  Low frequency                              /
;/ freq_high.l   ;         4 bytes  High frequency                             /
;/ freq_root.l   ;         4 bytes  Root frequency                             /
;/ tune_unused.w ;         2 bytes  Tune (Always 1, NOT Used anymore)          /
;/ pan.b         ; 1 byte   Panning [0:left .. 15:right]                       /
;/ env_rate_on.b[3]   ;      3 bytes  Envelope rates (On)   (stage 0,1,2)      /
;/ env_rate_off.b[3]  ;       3 bytes  Envelope rates (Off)  (stage 3,4,5)     /
;/ env_offset_on.b[3] ;         3 bytes  Envelope offsets (On) (stage 0,1,2)   /
;/ env_offset_off.b[3] ;         3 bytes  Envelope offsets (Off)(stage 3,4,5)  /
;/                     ;  stage 0: Attack                                      /
;/                     ;        1: Decay                                       /
;/                     ;        2: Sustain                                     /
;/                     ;        3,4,5: Release                                 /
;/ trem_sweep.b ;         1 byte   Tremolo sweep                               /
;/ trem_rate.b  ;         1 byte   Tremolo rate                                /
;/ trem_depth.b ;         1 byte   Tremolo Depth                               /
;/ vibra_sweep.b ;         1 byte   Vibrato sweep                              /
;/ vibra_rate.b ;         1 byte   Vibrato rate                                /
;/ vibra_depth.b ;         1 byte   Vibrato Depth                              /
;/ sampletyp.b   ;         1 byte   Sampling modes                             /
;/               ;        bit 0: 16-bit (versus 8-bit)                         /
;/               ;        bit 1: Unsigned (versus signed)                      /
;/               ;        bit 2: Looping                                       /
;/               ;        bit 3: Pingpong                                      /
;/               ;        bit 4: Reverse                                       /
;/               ;        bit 5: Sustein                                       /
;/               ;        bit 6: Envelope                                      /
;/               ;        bit 7: Clamped release (6th Point of envelope)       /
;/ scale_freq.b[2]  ;         2 bytes  Scale frequency                         /
;/ scale_factor.b[2];        2 bytes  Scale factor [0..2048] (1024 is normal)  /
;/ reserved.b[36];        36 bytes  Reserved                                   /
;/        (s)bytes  Sample data                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement gus_close {}
SHARED gusengine
If \is_open
  file_Close{\dos}
  \is_open = False
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_open {filename.s}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_open {filename.s}
SHARED gusengine
succ.l = False
If \is_open Then gus_close{}
\dos=file_Open {filename.s,#file_read}
If \dos>=0
  If file_ReadMem {\dos,\header,239}
    a.s = "12345678"
    CopyMem_ &\header\header[0],&a.s,8
    If a.s = "GF1PATCH"
      \is_open = True
      succ=True
      \sample_add\count   = 0
      \sample_add\filepos = 239 ; sizeof.gusheader
    Else
      error {"File is not a GUS patch !"}
    End If
  End If
End If
If succ=False Then gus_close{}
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_tst {filename.s}                                    /
;/                                                                             /
;/ Description:                                                                /
;/       \sample_add\filepos = 239 ; sizeof.gusheader                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_tst {filename.s}
SHARED gusengine
succ.l = False
dos.l=file_Open {filename.s,#file_read}
If dos>=0
  If file_ReadMem {dos,\header,239}
    a.s = "12345678"
    CopyMem_ &\header\header[0],&a.s,8
    If a.s = "GF1PATCH"
      succ=True
    End If
  End If
  file_Close{dos}
End If
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = gus_getname {ptr.l,maxlength.l}                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - ptr.l    : ???                                                            /
;/ - maxlength.l    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s gus_getname {ptr.l,maxlength.l}
SHARED gusengine
name.s =""
While maxlength>0
  If Peek.b(ptr)>31 Then name.s = name.s+Chr$(Peek.b(ptr))
  ptr+1
  maxlength-1
Wend
If name.s ="" Then name.s="unknown"
Function Return name.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = gus_name {}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s gus_name {}
SHARED gusengine
name.s = gus_getname {&\header\instr_name[0],16}
If name.s = "unknown" Then name.s = dos_RemExt{file_GetName {\dos}}
Function Return name.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_numsamps {}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_numsamps {}
SHARED gusengine
Function Return \header\numsamples
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_nextsample {}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_nextsample {}
SHARED gusengine
succ.l = False
If \sample_add\count<\header\numsamples
  If file_Seek {\dos,\sample_add\filepos}
    \sample_add\filepos + SizeOf.gussample
    \sample_add\count+1
    If file_ReadMem {\dos,\sample,96} ; SizeOf.gussample}
      succ=True
      \sample_add\blength = con_LFlip{\sample\sample_size}
      \sample_add\filepos + \sample_add\blength
      \sample_add\samplerate  = 0
      Poke.w &\sample_add\samplerate+2,con_WFlip{\sample\samplerate}
      If \sample_add\samplerate<4410 Then \sample_add\samplerate  = 4410
      If \sample_add\samplerate>96000 Then \sample_add\samplerate  = 96000

      \sample_add\loop_start = con_LFlip{\sample\loop_start}
      \sample_add\loop_end   = con_LFlip{\sample\loop_end}

      If \sample\sampletyp & %00000001
        \sample_add\bit = 16
        \sample_add\flength = \sample_add\blength/2
        \sample_add\loop_start / 2
        \sample_add\loop_end / 2
      Else
        \sample_add\bit =  8
        \sample_add\flength = \sample_add\blength
      End If

      fr.l = \sample\fractions & %00001111
      fr * 100 / 16
      \sample_add\loop_start_frac = fr

      fr.l = (\sample\fractions & %11110000) LSR 4
      fr * 100 / 16
      \sample_add\loop_end_frac   = fr

      If \sample\sampletyp & %00000010
        \sample_add\unsigned = True
      Else
        \sample_add\unsigned = False
      End If

      If \sample\sampletyp & %00000100
        \sample_add\loop = True
      Else
        \sample_add\loop = False
      End If

;      pitch.f = 440 * (2 ^ ((note-64+7)/12))

      root.f = 12 / Log(2) * (Log(con_LFlip{\sample\freq_root} /1000) - Log(220)) + 64 -7
      rootkey.f = Int(root+.5)

      fine.f =  (rootkey-root) * 100
    ;  error {"Freq: "+Str$(root)+" Key: "+Str$(rootkey)+" / fine: "+Str$(fine)}
      key_low.f  = 12 / Log(2) * (Log(con_LFlip{\sample\freq_low}  /1000) - Log(220)) + 64 -7
      key_high.f = 12 / Log(2) * (Log(con_LFlip{\sample\freq_high} /1000) - Log(220)) + 64 -7


      \sample_add\rootkey = rootkey
      \sample_add\channels = \header\channels
      \sample_add\fine    = fine
      \sample_add\lowkey  = Int(key_low +.5)
      \sample_add\highkey = Int(key_high+.5)
      Poke.b &\sample_add\gain+3,\header\mastervolume_l
      \sample_add\gain * 100 / 127
      \sample_add\pan     = (\sample\pan-7)*100/7
    End If
  End If
End If
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = gus_sample_name {}                                      /
;/                                                                             /
;/ Description:                                                                /
;/      pitch.f = 440 * (2 ^ ((note-64+7)/12))                                 /
;/     ;  error {"Freq: "+Str$(root)+" Key: "+Str$(rootkey)+" / fine: "+Str$:: /
;/ (fine)}                                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s gus_sample_name {}
SHARED gusengine
name.s = gus_getname {&\sample\name[0],7}
Function Return name.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_blength {}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_blength {}
SHARED gusengine
Function Return \sample_add\blength
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_flength {}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_flength {}
SHARED gusengine
Function Return \sample_add\flength
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_bit {}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_bit {}
SHARED gusengine
Function Return \sample_add\bit
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_unsigned {}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_unsigned {}
SHARED gusengine
Function Return \sample_add\unsigned
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_loop_start {}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_loop_start {}
SHARED gusengine
Function Return \sample_add\loop_start
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_loop_start_frac {}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_loop_start_frac {}
SHARED gusengine
Function Return \sample_add\loop_start_frac
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_loop {}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_loop {}
SHARED gusengine
Function Return \sample_add\loop
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_loop_end {}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_loop_end {}
SHARED gusengine
Function Return \sample_add\loop_end
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_loop_end_frac {}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_loop_end_frac {}
SHARED gusengine
Function Return \sample_add\loop_end_frac
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_rootkey {}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_rootkey {}
SHARED gusengine
Function Return \sample_add\rootkey
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_lowkey {}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_lowkey {}
SHARED gusengine
Function Return \sample_add\lowkey
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_highkey {}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_highkey {}
SHARED gusengine
Function Return \sample_add\highkey
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_fine {}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_fine {}
SHARED gusengine
Function Return \sample_add\fine
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_rate {}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_rate {}
SHARED gusengine
Function Return \sample_add\samplerate
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_gain {}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_gain {}
SHARED gusengine
Function Return \sample_add\gain
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_pan {}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_pan {}
SHARED gusengine
Function Return \sample_add\pan
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_channels {}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_channels {}
SHARED gusengine
Function Return \sample_add\channels
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = gus_sample_readdata {ptr.l,maxbytes.l}                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - ptr.l    : ???                                                            /
;/ - maxbytes.l    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l gus_sample_readdata {ptr.l,maxbytes.l}
SHARED gusengine
succ.l = False
If ptr
  blength.l = con_LFlip{\sample\sample_size}
  If maxbytes<=0 Then maxbytes=blength
  maxbytes.l = Min(maxbytes,blength)
  If file_ReadMem {\dos,ptr,maxbytes}
    If \sample_add\bit=16
      FlipEndian16 {ptr,ptr,maxbytes/2}
    End If
    If \sample_add\unsigned
      If \sample_add\bit=8
        Unsigned2Signed8{ptr,ptr,maxbytes}
      Else
        Unsigned2Signed16{ptr,ptr,maxbytes/2}
      End If
    End If
    If \sample_add\bit=8
      conv_8m_16m {ptr,ptr,maxbytes,False,False}
    End If
  End If
End If
Function Return succ
End Function



CNIF #__include=0
If gus_open {"timidity:patch/britepno.pat"}
  NPrint gus_name{}
  NPrint "# samples: ",gus_numsamps{}
  While gus_nextsample{}
    NPrint "Sample: ",gus_sample_name {}," rootkey: ",con_Note2String{gus_sample_rootkey{}}," fine: ",gus_sample_fine{}

  Wend
  gus_close{}
End If
Delay_ 400
End
CEND
