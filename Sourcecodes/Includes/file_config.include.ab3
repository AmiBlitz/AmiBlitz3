; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "ConfigDemo"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 5
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: file_config.include                                                   /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 27/12/2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements:  Amiblitz2.4                                                  /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Provide human-editable text-config file I/O functions.                      /
;/                                                                             /
;/ Abstract:                                                                   /
;/ This include provides easy-to-use config file I/O, similar to tooltypes b:: /
;/ ut into a file.                                                             /
;/                                                                             /
;/ User Constants: none                                                        /
;/                                                                             /
;/ Example:                                                                    /
;/ A config file is a pure text file and looks like this (similar to tooltyp:: /
;/ es):                                                                        /
;/                                                                             /
;/ ___________________________ snip!                                           /
;/                                                                             /
;/ MyEntry1 = "myvalue"                                                        /
;/ MyEntry2 = 12345                                                            /
;/ ...                                                                         /
;/ ___________________________ snip!                                           /
;/                                                                             /
;/ Read some entries from the config file:                                     /
;/ _______________________________________ snip!                               /
;/ XINCLUDE "file.include.ab3"                                                 /
;/                                                                             /
;/ fid.l = file_Open {"DH0:MyConfigFile.txt",#file_read}                       /
;/ If fid>=0                                                                   /
;/   While file_EOF {fid} = False                                              /
;/     Select config_ReadName {fid}                                            /
;/       Case "MyEntry1"                                                       /
;/         entry1_string.s = config_ReadString {} ; would result in "myvalue"  /
;/       Case "MyEntry2"                                                       /
;/         entry2_value.l = config_ReadValue {} ; would result in 12345        /
;/       Default:                                                              /
;/         NPrint "Unknown config entry!"                                      /
;/      End Select                                                             /
;/    Wend                                                                     /
;/ End If                                                                      /
;/ End                                                                         /
;/ _______________________________________ snip!                               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
SYNTAX 2
OPTIMIZE 7
CEND

XINCLUDE "error.include.ab3"
XINCLUDE "file.include.ab3"


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = config_ReadLine {fid.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ Same like file_ReadLine, but removes all space characters that are not wi:: /
;/ thin quotes. This function is used within config_ReadName.                  /
;/                                                                             /
;/ e.g.                                                                        /
;/ my value      = "This is a test"                                            /
;/                                                                             /
;/ would be read as                                                            /
;/                                                                             /
;/ myvalue="This is a test".                                                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : file object ID                                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : one line of a text file                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s config_ReadLine {fid.l}
quoted.w = 0
breakme.w = False
While breakme.w = False

  If file_EOF{fid}
    breakme=1
    dummy.b=0
  Else
    If file_ReadMem {fid,&dummy.b,1} = False Then dummy=0
    If dummy=0 Then breakme = 1
    If dummy=10 Then breakme = True
  End If

  If dummy>31 OR dummy<0
    If dummy = 34
      quoted = 1-quoted
      ;If quoted=0 Then breakme=True
    Else
      If quoted=0 AND dummy=@";"
        breakme=True
      Else
        If quoted = 1 OR dummy > 32 OR dummy<0
          a.s = a.s + Chr$(dummy)
        End If
      End If
    End If
  End If
Wend
If a.s = "" AND breakme=1 Then a.s = "-"
Function Return a.s
End Function




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = config_WriteValue {fid.l,name.s,value.l}                /
;/                                                                             /
;/ Description:                                                                /
;/       ;If quoted=0 Then breakme=True                                        /
;/                                                                             /
;/ Write an integer value into a config file.                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : file object ID                                                 /
;/ - name.s    : name of the entry                                             /
;/ - value.l    : integer value                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l config_WriteValue {fid.l,name.s,value.l}
string.s = name.s+"="+Str$(value)+Chr$(10)
succ.w = file_WriteMem {fid,&string.s,FLen(string.s)}
Function Return succ
End Function
 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = config_WriteInt {fid.l,name.s,value.l}                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : ???                                                            /
;/ - name.s    : ???                                                           /
;/ - value.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l config_WriteInt {fid.l,name.s,value.l}
Function Return config_WriteValue{fid,name.s,value}
End Function
 

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = config_WriteHex {fid.l,name.s,value.l}                  /
;/                                                                             /
;/ Description:                                                                /
;/ Write a integer value into a config file in hex representation.             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : file object ID                                                 /
;/ - name.s    : name if the entry                                             /
;/ - value.l    : integer value                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l config_WriteHex {fid.l,name.s,value.l}
string.s = name.s+"=$"+Hex$(value)+Chr$(10)
succ.w = file_WriteMem {fid,&string.s,FLen(string.s)}
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = config_WriteFloat {fid.l,name.s,float.f}                /
;/                                                                             /
;/ Description:                                                                /
;/ Write a float into a config file.                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : file object ID                                                 /
;/ - name.s    : name of the entry                                             /
;/ - float.f    : float value                                                  /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l config_WriteFloat {fid.l,name.s,float.f}
Format "0.000000"
string.s = name.s+"="+Str$(float)+Chr$(10)
succ.w = file_WriteMem {fid,&string.s,FLen(string.s)}
Format ""
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = config_WriteString {fid.l,name.s,string.s}              /
;/                                                                             /
;/ Description:                                                                /
;/ Write a string into a config file.                                          /
;/ The string will be automatically quoted.                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : file object ID                                                 /
;/ - name.s    : name of the entry.                                            /
;/ - string.s    : string                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l config_WriteString {fid.l,name.s,string.s}
string.s = name.s+"="+Chr$(34)+string.s+Chr$(34)+Chr$(10)
succ.w = file_WriteMem {fid,&string.s,FLen(string.s)}
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = config_ReadName {fid.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ Read a new entry name from a config file.                                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l     : file object ID                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s  : name of the next entry in a config file                       /
;/                                                                             /
;/ See also:    config_ReadString, config_ReadValue, config_ReadFloat          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s config_ReadName {fid.l}
SHARED bufferstring.s
bufferstring.s = config_ReadLine {fid}
If bufferstring="-" Then name.s = "":Else name.s = Left$(bufferstring.s,Instr(bufferstring,"=",1)-1)
Function Return name.s
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = config_ReadString {}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Get the entry data from an entry read with config_ReadName as a string.     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : entry string                                               /
;/                                                                             /
;/ See also:    config_ReadName                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s config_ReadString {}
SHARED bufferstring.s
Function Return Right$(bufferstring.s,FLen(bufferstring.s)-Instr(bufferstring,"=",1))
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = config_ReadValue {}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Get the entry data from an entry read with config_ReadName as a value.      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : entry value                                                /
;/                                                                             /
;/ See also:    config_ReadName                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l config_ReadValue {}
SHARED bufferstring.s
Function Return Vallong(Right$(bufferstring.s,FLen(bufferstring.s)-Instr(bufferstring,"=",1)))
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.f = config_ReadFloat {}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.f     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.f config_ReadFloat {}
SHARED bufferstring.s
Function Return Val(Right$(bufferstring.s,FLen(bufferstring.s)-Instr(bufferstring,"=",1)))
End Function
 


CNIF #__include=0

; write an example human-readable config text file
fid.l = file_Open{"RAM:myconfig.txt",#file_write}
If fid>=0
  config_WriteString {fid,"String","This is a string..."}
  config_WriteValue  {fid,"Value",12345}
  config_WriteHex    {fid,"HexValue",12345}
  config_WriteFloat  {fid,"FloatValue",1.2345}
  file_Close{fid}
End If

; read the config file again...
fid.l = file_Open{"RAM:myconfig.txt",#file_read}
If fid>=0
  Repeat
    name.s = config_ReadName{fid}
    Select LCase$(name)
      Case "string"
        NPrint "Found String : ",config_ReadString{}
      Case "value"
        NPrint "Found Value  : ",config_ReadValue{}
      Case "hexvalue"
        NPrint "Found Hex    : ",config_ReadValue{}
      Case "floatvalue"
        NPrint "Found Float  : ",config_ReadFloat{}
      Default:
        If name><"" Then NPrint "Unknown entry found: ",name
    End Select
  Until name = ""
  file_Close{fid}
End If
Delay_ 200

End
CEND
