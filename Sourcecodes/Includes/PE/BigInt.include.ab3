; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 47
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 32
; LabelSearch     = "bigint_asstr"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max ChunkyBuffer= 2
; /XTRA
CNIF #__include=0
  OPTIMIZE 7
CEND

XINCLUDE "PE/PE_Tools.include.ab3"
XINCLUDE "error.include.ab3"
XINCLUDE "eclock.include.ab3"
XINCLUDE "file.include.ab3"

; ANZAHL DER DIGITS MUSS EIN VIELFACHES VON 8 SEIN
; OPTIMIERUNG FUER UAE
#PREC_DIGITS = 96

#bigint_Dec = 0
#bigint_Hex = -1
#bigint_Bin = 1

NEWTYPE.bigint
  zahl.l[#PREC_DIGITS]
End NEWTYPE

; Diese Arrays werden von den Funktionen
; Mul
; Square
; Div
; Mod
; genutzt
Dim zahlm.l(2*#PREC_DIGITS)
Dim zahldm.l(3*#PREC_DIGITS)
Dim zahld1.l(3*#PREC_DIGITS)
Dim zahld2.l(3*#PREC_DIGITS)
Dim zahld3.l(3*#PREC_DIGITS)
SHARED zahlm(), zahldm(),zahld1(),zahld2(),zahld3()

SHARED BN_0.bigint,BN_1.bigint,BN_2.bigint,BN_10.bigint
SHARED BN_4.bigint,BN_6.bigint,BN_8.bigint,BN_16.bigint
SHARED BN_256.bigint

SHARED debug_mod.l
SHARED debug_div.l
SHARED debug_mul.l
SHARED debug_add.l
SHARED debug_sub.l
DEFTYPE.l

Statement bigint_Int2Big{x.l,*a.bigint}
  DEFTYPE.l ul
  DEFTYPE.l i
  DEFTYPE.l

  If *a=0
    error{"bigint_Int2Big: The passed variable was not initialized."}
    Statement Return
  EndIf
  ul = x
  *a\zahl[#PREC_DIGITS-1] = ul & $0000FFFF
  *a\zahl[#PREC_DIGITS-2] = (ul & $FFFF0000) LSR 16
  If x < 0
    ul = $0000FFFF
  Else
    ul = $00000000
  EndIf
  For i = 0 To #PREC_DIGITS - 3
    *a\zahl[i] = ul
  Next i
End Statement


Statement bigint_SetBig{*a.bigint,*b.bigint}
;  deftype.l i
;  for i.w = 0 To #PREC_DIGITS-1
;    *a\zahl[i] = *b\zahl[i]
;  Next i
  CopyType *b,*a
End Statement

Function.b bigint_IsNegative{*a.bigint}
 If (*a\zahl[0] & $00008000) > 0 Then Function Return True
End Function
 


Function.b bigint_IsEqual{*a.bigint,*b.bigint}
  DEFTYPE.l i
  For i = 0 To #PREC_DIGITS-1
    If *a\zahl[i] <> *b\zahl[i] Then Function Return False
  Next i
  Function Return True
End Function

Function.b bigint_IsGreater{*a.bigint,*b.bigint}
  DEFTYPE.bigint ergebnis
  DEFTYPE.l ul
  DEFTYPE.l i,vz1,vz2

  If (*a\zahl[0] & $00008000) > 0 Then vz1 = 1 Else vz1 = 0
  If (*b\zahl[0] & $00008000) > 0 Then vz2 = 1 Else vz2 = 0

  If (vz1 = 0) AND (vz2 = 1)
    Function Return True
  Else
    If (vz1 = 1) AND (vz2 = 0)
      Function Return False
    Else
      ul = 1
      For i = #PREC_DIGITS-1 To 0 Step -1
        ul = ul + Xor(*a\zahl[i] , $0000FFFF) + *b\zahl[i]
        ergebnis\zahl[i] = ul & $0000FFFF
        ul = ul LSR 16
      Next i
      If (ergebnis\zahl[0] & $00008000) > 0 Then Function Return True Else Function Return False
    EndIf
  EndIf
End Function

Function.b bigint_IsLower{*a.bigint,*b.bigint}
  DEFTYPE.bigint ergebnis
  DEFTYPE.l ul
  DEFTYPE.l i,vz1,vz2

  If (*a\zahl[0] & $00008000) > 0 Then vz1 = 1 Else vz1 = 0
  If (*b\zahl[0] & $00008000) > 0 Then vz2 = 1 Else vz2 = 0

  If (vz1 = 1) AND (vz2 = 0)
    Function Return True
  Else
    If (vz1 = 0) AND (vz2 = 1)
      Function Return False
    Else
      ul = 1
      For i = #PREC_DIGITS-1 To 0 Step -1
        ul = ul + Xor(*b\zahl[i] , $0000FFFF) + *a\zahl[i]
        ergebnis\zahl[i] = ul & $0000FFFF
        ul = ul LSR 16
      Next i
      If (ergebnis\zahl[0] & $00008000) > 0 Then Function Return True Else Function Return False
    EndIf
  EndIf
End Function
 



Statement bigint_Abs{*n.bigint}
;  If *n\zahl[0] & $000080000 Then *n\zahl[0] = (*n\zahl[0] NOT $00008000)
End Statement

Function.b bigint_Cmp{*a.bigint, *b.bigint}
  If bigint_IsEqual{*a,*b} Then Function Return 0
  If bigint_IsGreater{*a,*b} Then Function Return 1
  If bigint_IsLower{*a,*b} Then Function Return -1
End Statement


Function.b bigint_IsNull{*a.bigint}
DEFTYPE.l
  For i.w = 0 To #PREC_DIGITS-1
    If *a\zahl[i] <> 0 Then Function Return False
  Next i
  Function Return True
End Function


Statement bigint_Sub{*a.bigint,*b.bigint,*wert.bigint}
DEFTYPE.bigint ergebnis
DEFTYPE.l ul
DEFTYPE.l i
  ul = 1
  For i = #PREC_DIGITS-1 To 1 Step -1
    ul + ( Xor(*b\zahl[i],$0000FFFF) + *a\zahl[i] )
    *wert\zahl[i] = ul & $0000FFFF
    ul = ul LSR 16
  Next i
  ul + ( Xor(*b\zahl[i],$0000FFFF) + *a\zahl[i] )
  *wert\zahl[i] = ul & $0000FFFF
End Statement


Statement bigint_ChangeSign{*a.bigint}
DEFTYPE.bigint nil,b
  bigint_Int2Big{0,nil}
  bigint_Sub{nil,*a,*a}
End Statement





Statement bigint_Add{*a.bigint,*b.bigint,*wert.bigint}
;DEFTYPE.bigint ergebnis
DEFTYPE.l ul
DEFTYPE.l i
  ul = 0
  For i = #PREC_DIGITS-1 To 1 Step -1
    ul = ul + *a\zahl[i] + *b\zahl[i]
    *wert\zahl[i] = ul & $0000FFFF
    ul = ul LSR 16
  Next i
  ul = ul + *a\zahl[i] + *b\zahl[i]
  *wert\zahl[i] = ul & $0000FFFF

  debug_add + 1
End Statement

Statement bigint_Add2{*a.bigint,*b.bigint,*wert.bigint}
;DEFTYPE.bigint ergebnis
DEFTYPE.l ul
DEFTYPE.l i,i2
  ul = 0
  For i = #PREC_DIGITS-1 To 1 Step -8
    i2 = i
    ul = ul + *a\zahl[i2] + *b\zahl[i2] : *wert\zahl[i2] = ul & $0000FFFF : ul = ul LSR 16
    i2 - 1
    ul = ul + *a\zahl[i2] + *b\zahl[i2] : *wert\zahl[i2] = ul & $0000FFFF : ul = ul LSR 16
    i2 - 1
    ul = ul + *a\zahl[i2] + *b\zahl[i2] : *wert\zahl[i2] = ul & $0000FFFF : ul = ul LSR 16
    i2 - 1
    ul = ul + *a\zahl[i2] + *b\zahl[i2] : *wert\zahl[i2] = ul & $0000FFFF : ul = ul LSR 16
    i2 - 1
    ul = ul + *a\zahl[i2] + *b\zahl[i2] : *wert\zahl[i2] = ul & $0000FFFF : ul = ul LSR 16
    i2 - 1
    ul = ul + *a\zahl[i2] + *b\zahl[i2] : *wert\zahl[i2] = ul & $0000FFFF : ul = ul LSR 16
    i2 - 1
    ul = ul + *a\zahl[i2] + *b\zahl[i2] : *wert\zahl[i2] = ul & $0000FFFF : ul = ul LSR 16
    i2 - 1
    ul = ul + *a\zahl[i2] + *b\zahl[i2] : *wert\zahl[i2] = ul & $0000FFFF : ul = ul LSR 16
  Next i
  ul = ul + *a\zahl[i] + *b\zahl[i]
  *wert\zahl[i] = ul & $0000FFFF

  debug_add + 1
End Statement


Statement bigint_Add3{*a.bigint,*b.bigint,*wert.bigint}
;DEFTYPE.bigint ergebnis
DEFTYPE.l ul
DEFTYPE.l i,i2
  ul = 0

;  a_pointer = *a\zahl[i2]
  For i = #PREC_DIGITS-1 To 1 Step -8
    i2 = i
    ul = ul + *a\zahl[i2] + *b\zahl[i2] : *wert\zahl[i2] = ul & $0000FFFF : ul = ul LSR 16
    i2 - 1
    ul = ul + *a\zahl[i2] + *b\zahl[i2] : *wert\zahl[i2] = ul & $0000FFFF : ul = ul LSR 16
    i2 - 1
    ul = ul + *a\zahl[i2] + *b\zahl[i2] : *wert\zahl[i2] = ul & $0000FFFF : ul = ul LSR 16
    i2 - 1
    ul = ul + *a\zahl[i2] + *b\zahl[i2] : *wert\zahl[i2] = ul & $0000FFFF : ul = ul LSR 16
    i2 - 1
    ul = ul + *a\zahl[i2] + *b\zahl[i2] : *wert\zahl[i2] = ul & $0000FFFF : ul = ul LSR 16
    i2 - 1
    ul = ul + *a\zahl[i2] + *b\zahl[i2] : *wert\zahl[i2] = ul & $0000FFFF : ul = ul LSR 16
    i2 - 1
    ul = ul + *a\zahl[i2] + *b\zahl[i2] : *wert\zahl[i2] = ul & $0000FFFF : ul = ul LSR 16
    i2 - 1
    ul = ul + *a\zahl[i2] + *b\zahl[i2] : *wert\zahl[i2] = ul & $0000FFFF : ul = ul LSR 16
  Next i
  ul = ul + *a\zahl[i] + *b\zahl[i]
  *wert\zahl[i] = ul & $0000FFFF

  debug_add + 1
End Statement
 



Statement bigint_ShiftLeft{*n.bigint,@d.w}
DEFTYPE.l ul
DEFTYPE.l i,anzshift

  If d<>-1 Then anzshift = d Else anzshift = 1
  ul = 0
  For i = #PREC_DIGITS - 1 To 0 Step -1
    ul = (*n\zahl[i] LSL anzshift) | ul
    *n\zahl[i] = ul & $0000FFFF
    ul = ul LSR 16
  Next i
End Statement

Statement bigint_ShiftRight{*n.bigint}
DEFTYPE.l ul,ur
DEFTYPE.l i,anzshift

  ul = 0
  For i = 0 To #PREC_DIGITS-1
    ur = *n\zahl[i] & $00000001
    *n\zahl[i] = (*n\zahl[i] LSR 1) | ul
    If ur=1 Then ul = $8000 Else ul =0
  Next i
End Statement
 




Statement bigint_Mul{*a.bigint,*b.bigint,*ergebnis.bigint}
DEFTYPE.l ul
DEFTYPE.l i,k
DEFTYPE.l


  ul = 0
  For i = 0 To 2*#PREC_DIGITS Step 1
    zahlm(i) = 0
  Next i

  If (*a\zahl[0] & $00008000) = 0
    For i = #PREC_DIGITS-1 To 0 Step -1
      For k = #PREC_DIGITS-1 To 0 Step -1
        ul = *a\zahl[k] * *b\zahl[i]
        zahlm(i+k+1) + (ul & $0000FFFF)
        zahlm(i+k)   + (ul LSR 16)
      Next k
    Next i
  Else
    For i = #PREC_DIGITS-1 To 0 Step -1
      For k = #PREC_DIGITS-1 To 0 Step -1
        ul = *a\zahl[k] * *b\zahl[i]
        zahlm(i+k+1) + (ul & $0000FFFF)
        zahlm(i+k)   + (ul LSR 16)
      Next k
      For k = 1 To i Step 1
        ul = $0000FFFF * *b\zahl[i]
        zahlm(i-k+1) + (ul & $0000FFFF)
        zahlm(i-k)   + (ul LSR 16)
      Next k
    Next i
  EndIf

  If (*b\zahl[0] & $00008000) > 0
    For i = 1 To #PREC_DIGITS-1
      For k = #PREC_DIGITS-1 To i Step -1
        ul = *a\zahl[k] * $0000FFFF
        zahlm(k-i+1) + (ul & $0000FFFF)
        zahlm(k-i)   + (ul LSR 16)
      Next k
    Next i
  EndIf

  For i = #PREC_DIGITS*2-1 To #PREC_DIGITS Step -1
    zahlm(i-1) + (zahlm(i) LSR 16)
    If i < (2 * #PREC_DIGITS)
      *ergebnis\zahl[i-#PREC_DIGITS] = zahlm(i) & $0000FFFF
    EndIf
  Next i
  debug_mul + 1
End Statement


Statement bigint_Mul2{*a.bigint,*b.bigint,*ergebnis.bigint}
DEFTYPE.l ul
DEFTYPE.l i,k,i2,k2
DEFTYPE.l


  ul = 0
  For i = 0 To 2*#PREC_DIGITS Step 1
    zahlm(i) = 0
  Next i

  If (*a\zahl[0] & $00008000) = 0
    For i = #PREC_DIGITS-1 To 0 Step -1
      For k = #PREC_DIGITS-1 To 0 Step -8
        k2 = k
        ul = *a\zahl[k2] * *b\zahl[i] : zahlm(i+k2+1) + (ul & $0000FFFF) :zahlm(i+k2)   + (ul LSR 16)
        k2 - 1
        ul = *a\zahl[k2] * *b\zahl[i] : zahlm(i+k2+1) + (ul & $0000FFFF) :zahlm(i+k2)   + (ul LSR 16)
        k2 - 1
        ul = *a\zahl[k2] * *b\zahl[i] : zahlm(i+k2+1) + (ul & $0000FFFF) :zahlm(i+k2)   + (ul LSR 16)
        k2 - 1
        ul = *a\zahl[k2] * *b\zahl[i] : zahlm(i+k2+1) + (ul & $0000FFFF) :zahlm(i+k2)   + (ul LSR 16)
        k2 - 1
        ul = *a\zahl[k2] * *b\zahl[i] : zahlm(i+k2+1) + (ul & $0000FFFF) :zahlm(i+k2)   + (ul LSR 16)
        k2 - 1
        ul = *a\zahl[k2] * *b\zahl[i] : zahlm(i+k2+1) + (ul & $0000FFFF) :zahlm(i+k2)   + (ul LSR 16)
        k2 - 1
        ul = *a\zahl[k2] * *b\zahl[i] : zahlm(i+k2+1) + (ul & $0000FFFF) :zahlm(i+k2)   + (ul LSR 16)
        k2 - 1
        ul = *a\zahl[k2] * *b\zahl[i] : zahlm(i+k2+1) + (ul & $0000FFFF) :zahlm(i+k2)   + (ul LSR 16)
      Next k
    Next i
  Else
    For i = #PREC_DIGITS-1 To 0 Step -1
      For k = #PREC_DIGITS-1 To 0 Step -8
        k2 = k
        ul = *a\zahl[k2] * *b\zahl[i] : zahlm(i+k2+1) + (ul & $0000FFFF) :zahlm(i+k2)   + (ul LSR 16)
        k2 - 1
        ul = *a\zahl[k2] * *b\zahl[i] : zahlm(i+k2+1) + (ul & $0000FFFF) :zahlm(i+k2)   + (ul LSR 16)
        k2 - 1
        ul = *a\zahl[k2] * *b\zahl[i] : zahlm(i+k2+1) + (ul & $0000FFFF) :zahlm(i+k2)   + (ul LSR 16)
        k2 - 1
        ul = *a\zahl[k2] * *b\zahl[i] : zahlm(i+k2+1) + (ul & $0000FFFF) :zahlm(i+k2)   + (ul LSR 16)
        k2 - 1
        ul = *a\zahl[k2] * *b\zahl[i] : zahlm(i+k2+1) + (ul & $0000FFFF) :zahlm(i+k2)   + (ul LSR 16)
        k2 - 1
        ul = *a\zahl[k2] * *b\zahl[i] : zahlm(i+k2+1) + (ul & $0000FFFF) :zahlm(i+k2)   + (ul LSR 16)
        k2 - 1
        ul = *a\zahl[k2] * *b\zahl[i] : zahlm(i+k2+1) + (ul & $0000FFFF) :zahlm(i+k2)   + (ul LSR 16)
        k2 - 1
        ul = *a\zahl[k2] * *b\zahl[i] : zahlm(i+k2+1) + (ul & $0000FFFF) :zahlm(i+k2)   + (ul LSR 16)
      Next k
      For k = 1 To i Step 1
        ul = $0000FFFF * *b\zahl[i]
        zahlm(i-k+1) + (ul & $0000FFFF)
        zahlm(i-k)   + (ul LSR 16)
      Next k
    Next i
  EndIf

  If (*b\zahl[0] & $00008000) > 0
    For i = 1 To #PREC_DIGITS-1
      For k = #PREC_DIGITS-1 To i Step -1
        ul = *a\zahl[k] * $0000FFFF
        zahlm(k-i+1) + (ul & $0000FFFF)
        zahlm(k-i)   + (ul LSR 16)
      Next k
    Next i
  EndIf

  For i = #PREC_DIGITS*2-1 To #PREC_DIGITS Step -1
    zahlm(i-1) + (zahlm(i) LSR 16)
    If i < (2 * #PREC_DIGITS)
      *ergebnis\zahl[i-#PREC_DIGITS] = zahlm(i) & $0000FFFF
    EndIf
  Next i
  debug_mul + 1

End Statement
 




Statement bigint_Square{*a.bigint}
DEFTYPE.bigint ergebnis
DEFTYPE.l ul
DEFTYPE.l i,k,vz1
DEFTYPE.l

  If (*a\zahl[0] & $00008000)>0 Then vz1 = 1 Else vz1 = 0
  For i = 0 To 2*#PREC_DIGITS-1 Step 1
    zahlm(i) = 0
  Next i

  For i = #PREC_DIGITS-1 To 0 Step -1
    For k = #PREC_DIGITS-1 To 0 Step -1
      ul = *a\zahl[k] * *a\zahl[i]
      zahlm(i+k+1) + (ul & $0000FFFF)
      zahlm(i+k)   + (ul LSR 16)
    Next k
    If vz1<>0
      For k = 1 To i
        ul = $0000FFFF * *a\zahl[i]
        zahlm(i-k+1) + (ul & $0000FFFF)
        zahlm(i-k)   + (ul LSR 16)
      Next k
    EndIf
  Next i

  If vz1<>0
    For i = 1 To #PREC_DIGITS-1
      For k = #PREC_DIGITS-1 To i Step -1
        ul = *a\zahl[k] * $0000FFFF
        zahlm(k-i+1) + (ul & $0000FFFF)
        zahlm(k-i)   + (ul LSR 16)
      Next k
    Next i
  EndIf

  For i = 2*#PREC_DIGITS-1 To 1 Step -1
    zahlm(i-1) + (zahlm(i) LSR 16)
    If (i<(2 * #PREC_DIGITS)) AND (i>=#PREC_DIGITS)
      *a\zahl[i-#PREC_DIGITS] = zahlm(i) & $0000FFFF
    EndIf
  Next i
End Statement
 



Statement bigint_Div{*a.bigint,*b.bigint,*ergebnis.bigint}
DEFTYPE.l ul
DEFTYPE.l i,km,k,l,vz1,vz2
DEFTYPE.l mask

  For i = 0 To #PREC_DIGITS*3-1
    zahldm(i) = 0
    zahld1(i) = 0
    zahld2(i) = 0
    zahld3(i) = 0
  Next i

  If (*a\zahl[0] & $00008000) > 0 Then vz1 = 1 Else vz1 =0
  If (*b\zahl[0] & $00008000) > 0 Then vz2 = 1 Else vz2 =0

  If vz1 = 1
    ul = 1
    For i = #PREC_DIGITS-1 To 0 Step -1
      ul = ul + Xor(*a\zahl[i],$0000FFFF)
      zahld1(i+#PREC_DIGITS) = ul & $0000FFFF
      ul = ul LSR 16
    Next i
  Else
    For i = #PREC_DIGITS-1 To 0 Step -1
      zahld1(i+#PREC_DIGITS) = *a\zahl[i]
    Next i
  EndIf

  If vz2 = 0
    ul = 1
    For i = #PREC_DIGITS-1 To 0 Step -1
      ul = ul + Xor(*b\zahl[i],$0000FFFF)
      zahld2(i) = ul & $0000FFFF
      ul = ul LSR 16
    Next i
  Else
    For i = #PREC_DIGITS-1 To 0 Step -1
      zahld2(i) = *b\zahl[i]
    Next i
  EndIf

  mask = 1 : km = -1
  For l = 0 To 2*#PREC_DIGITS-1
    For k =0 To 15
      If mask = $00000001
        mask = $00008000
        km + 1
      Else
        mask = mask LSR 1
      EndIf
      For i = 3*#PREC_DIGITS-1 To 1 Step -1
        If (zahld2(i-1) & $00000001) = 1 Then ul = $00010000 Else ul = 0
        zahld2(i) = (zahld2(i) | ul) LSR 1
      Next i
      zahld2(i) = (zahld2(i) | $00010000) LSR 1

      ul = 0
      For i = 3*#PREC_DIGITS-1 To 0 Step -1
        ul = ul + ( zahld1(i) + zahld2(i) )
        zahld3(i) = ul & $0000FFFF
        ul = ul LSR 16
      Next i

      If NOT ( (zahld3(0) & $00008000) > 0)
        zahldm(km) = zahldm(km) | mask
        For i = 0 To 3*#PREC_DIGITS-1
          zahld1(i) = zahld3(i)
        Next i
      EndIf
    Next k
  Next l

  If vz2<>vz1
    ul = 1
    For i = #PREC_DIGITS-1 To 0 Step -1
      ul = ul + Xor(zahldm(i), $0000FFFF)
      *ergebnis\zahl[i] = ul & $0000FFFF
      ul = ul LSR 16
    Next i
  Else
    For i = 0 To #PREC_DIGITS-1
      *ergebnis\zahl[i] = zahldm(i)
    Next i
  EndIf
  debug_div + 1
End Statement



Statement bigint_Mod_old{*Num.bigint,*Divisor.bigint,*wert.bigint}
  DEFTYPE.bigint temp,q
  Stop
  bigint_Div{*Num,*Divisor,q}
  bigint_Mul{*Divisor,q,temp}
  bigint_Sub{*Num,temp,*wert}
  debug_mod + 1
End Function


Statement bigint_Mod{*a.bigint,*b.bigint,*ergebnis.bigint}
DEFTYPE.l ul
DEFTYPE.l i,k,l,m
DEFTYPE.l

  For i = #PREC_DIGITS To 2*#PREC_DIGITS-1
    zahld2(i) = 0
  Next i

  m = 2 * #PREC_DIGITS
  For i = #PREC_DIGITS-1 To 0 Step -1
    m - 1
    zahld1(m) = *a\zahl[i]
  Next i

  ul = 1
  For i = #PREC_DIGITS-1 To 0 Step -1
    ul = ul + Xor(*b\zahl[i],$0000FFFF)
    zahld2(i) = ul & $0000FFFF
    ul = ul LSR 16
  Next i

  For l = 0 To #PREC_DIGITS-1
    For k = 0 To 15

      For i = #PREC_DIGITS*2-1 To 1 Step -1
        ul = (zahld2(i-1) & $00000001) LSL 16
        zahld2(i) = (zahld2(i) | ul) LSR 1
      Next i
      zahld2(i) = (zahld2(i) | $00010000) LSR 1

      ul = 0
      For i = 2*#PREC_DIGITS-1 To #PREC_DIGITS Step -1
        ul + zahld1(i) + zahld2(i)
        zahld3(i) = ul & $0000FFFF
        ul = ul LSR 16
      Next i

      For i = #PREC_DIGITS-1 To 0 Step -1
        ul + zahld2(i)
        zahld3(i) = ul & $0000FFFF
        ul = ul LSR 16
      Next i

      If NOT ((zahld3(0) & $00008000)>0)
        For i = #PREC_DIGITS To 2*#PREC_DIGITS-1
          zahld1(i) = zahld3(i)
        Next i
      EndIf

    Next k
  Next l

  m = #PREC_DIGITS
  For i = 0 To #PREC_DIGITS - 1
    *ergebnis\zahl[i] = zahld1(m)
    m + 1
  Next i

  debug_mod + 1
End Statement



Statement bigint_Mod2{*a.bigint,*b.bigint,*ergebnis.bigint}
DEFTYPE.l ul
DEFTYPE.l i,i2,k,l,m
DEFTYPE.l

  For i = #PREC_DIGITS To 2*#PREC_DIGITS-1
    zahld2(i) = 0
  Next i

  m = 2 * #PREC_DIGITS
  For i = #PREC_DIGITS-1 To 0 Step -1
    m - 1
    zahld1(m) = *a\zahl[i]
  Next i

  ul = 1
  For i = #PREC_DIGITS-1 To 0 Step -1
    ul = ul + Xor(*b\zahl[i],$0000FFFF)
    zahld2(i) = ul & $0000FFFF
    ul = ul LSR 16
  Next i

  For l = 0 To #PREC_DIGITS-1
    For k = 0 To 15
      For i = #PREC_DIGITS*2-1 To 1 Step -1                 ; ... nicht durch 8 teilbar ...
        ul = (zahld2(i-1) & $00000001) LSL 16 : zahld2(i) = (zahld2(i) | ul) LSR 1
      Next i
      zahld2(i) = (zahld2(i) | $00010000) LSR 1

      ul = 0
      For i = 2*#PREC_DIGITS-1 To #PREC_DIGITS Step -1
        ul + zahld1(i) + zahld2(i)
        zahld3(i) = ul & $0000FFFF
        ul = ul LSR 16
      Next i

      For i = #PREC_DIGITS-1 To 0 Step -8
        i2 = i
        ul + zahld2(i2) : zahld3(i2) = ul & $0000FFFF : ul = ul LSR 16
        i2 - 1
        ul + zahld2(i2) : zahld3(i2) = ul & $0000FFFF : ul = ul LSR 16
        i2 - 1
        ul + zahld2(i2) : zahld3(i2) = ul & $0000FFFF : ul = ul LSR 16
        i2 - 1
        ul + zahld2(i2) : zahld3(i2) = ul & $0000FFFF : ul = ul LSR 16
        i2 - 1
        ul + zahld2(i2) : zahld3(i2) = ul & $0000FFFF : ul = ul LSR 16
        i2 - 1
        ul + zahld2(i2) : zahld3(i2) = ul & $0000FFFF : ul = ul LSR 16
        i2 - 1
        ul + zahld2(i2) : zahld3(i2) = ul & $0000FFFF : ul = ul LSR 16
        i2 - 1
        ul + zahld2(i2) : zahld3(i2) = ul & $0000FFFF : ul = ul LSR 16
      Next i

      If NOT ((zahld3(0) & $00008000)>0)
        For i = #PREC_DIGITS To 2*#PREC_DIGITS-1
          zahld1(i) = zahld3(i)
        Next i
      EndIf

    Next k
  Next l

  m = #PREC_DIGITS
  For i = 0 To #PREC_DIGITS - 1
    *ergebnis\zahl[i] = zahld1(m)
    m + 1
  Next i

  debug_mod + 1
End Statement
 






Function.l ExpMod{basis.l, expo.l, modulo.l}
  DEFTYPE.l zwei, eins, b, e, wert

  zwei = 2
  eins = 1
  b = basis
  e = expo
  wert = 1

  While e<>0
    If (Vallong( Right$(Str$(e),1) ) MOD 2) = 0
      b = b * b              ;b.Mult(b);
      b = b MOD modulo       ;b.Modulo(modul);
      e = e / 2              ;e.DivBy(zwei);
    Else
      e = e - 1              ;e.Subtr(eins);
      wert = wert * b        ;wert.Mult(b);
      wert = wert MOD modulo ;wert.Modulo(modul);
    EndIf
  Wend
  Function Return wert
End Function
 


Function.l bigint_Big2Long{*n.bigint}
DEFTYPE.l rc
DEFTYPE.l
  rc = *n\zahl[#PREC_DIGITS-1]
  rc + *n\zahl[#PREC_DIGITS-2] LSL 16
  If *n\zahl[0] & $00008000 Then rc = -rc
  Function Return rc
End Function

Function.s bigint_AsString{*n.bigint,@darstellung.b}
DEFTYPE.b ch
DEFTYPE.l i,k
DEFTYPE.l y
DEFTYPE.l

  RunErrsOff

  k=0 : out$ = ""
  Select darstellung
  Case #bigint_Bin ; Michaels formatierte Darstellung
    For i = 0 To #PREC_DIGITS-1
      y = *n\zahl[i]
      ch = (y LSR 12) & $0F
      If ch<10 Then out$ + Chr$(ch + 48) Else out$ + Chr$(ch + 55)
      y = *n\zahl[i]
      ch = (y LSR 8) & $0F
      If ch<10 Then out$ + Chr$(ch + 48) Else out$ + Chr$(ch + 55)
      y = *n\zahl[i]
      ch = (y LSR 4) & $0F
      If ch<10 Then out$ + Chr$(ch + 48) Else out$ + Chr$(ch + 55)
      y = *n\zahl[i]
      ch = y & $0F
      If ch<10 Then out$ + Chr$(ch + 48) Else out$ + Chr$(ch + 55)
      If i = #PREC_DIGITS-1
        out$ + "|"
      Else
        out$ + "."
      EndIf
    Next i
  Case #bigint_Hex ; Hex-Ausgabe
    If *n\zahl[0] & $00008000 Then out$ = "-"
    For i = 0 To #PREC_DIGITS-1
;      If i < =#PREC_DIGITS-1
        y = *n\zahl[i]
        ch = (y LSR 12) & $0F
        If ch<10 Then out$ + Chr$(ch + 48) Else out$ + Chr$(ch + 55)
        y = *n\zahl[i]
        ch = (y LSR 8) & $0F
        If ch<10 Then out$ + Chr$(ch + 48) Else out$ + Chr$(ch + 55)
        y = *n\zahl[i]
        ch = (y LSR 4) & $0F
        If ch<10 Then out$ + Chr$(ch + 48) Else out$ + Chr$(ch + 55)
        y = *n\zahl[i]
        ch = y & $0F
        If ch<10 Then out$ + Chr$(ch + 48) Else out$ + Chr$(ch + 55)
;      EndIf
    Next i
    While Left$(out$,1) = "0"
      out$ = Right$(out$, Len(out$)-1 )
    Wend
    If (Len(out$)MOD 2)<>0 Then out$ = "0" + out$
    If out$="" Then out$="0"
    out$ = "$" + out$

  Case #bigint_Dec ; Dezimalausgabe
    DEFTYPE.bigint z,x,p,ziffer,dummy
    CopyType *n,x
    If bigint_IsNull{x}
      out$ = "0"
    Else
      If (x\zahl[0] & $00008000) > 0
        minus.b = True
        bigint_ChangeSign{x}
      EndIf
      bigint_Int2Big{10,p}
      While NOT bigint_IsNull{x}
        bigint_Div{x,p,z}
        bigint_Mul{z,p,dummy} : bigint_Sub{x,dummy,ziffer}
        out$ = Str$(ziffer\zahl[#PREC_DIGITS-1]) + out$
        bigint_SetBig{x,z}
      Wend
      If minus Then out$ = "-" + out$
    EndIf
  End Select

  RunErrsOn
  Function Return out$
End Function




Statement bigint_ExpMod{*basis.bigint, *expo.bigint, *modulo.bigint, *wert.bigint}
  DEFTYPE.bigint b, e, ergebnis
  DEFTYPE.l

  CopyType *basis,b
  CopyType *expo,e
  bigint_Int2Big{1,ergebnis}

  While NOT bigint_IsNull{e}
    If (e\zahl[#PREC_DIGITS-1] AND $00000001) = 0
      bigint_Square{b}
      bigint_Mod2{b,*modulo,b}          ;b.Modulo(modul);
      bigint_ShiftRight{e}
    Else
      bigint_Sub{e,BN_1,e}                      ;e.Subtr(eins);
      bigint_Mul2{ergebnis,b,ergebnis}           ;wert.Mult(b);
      bigint_Mod2{ergebnis,*modulo,ergebnis}  ;wert.Modulo(modul);
    EndIf
  Wend
  CopyType ergebnis,*wert
End Function







Statement bigint_Phi{*p.bigint,*q.bigint,*phi.bigint}
DEFTYPE.bigint pm1,qm1

  bigint_Sub{*p,BN_1,pm1}
  bigint_Sub{*q,BN_1,qm1}
  bigint_Mul2{pm1,qm1,*phi}
End Statement



Statement bigint_Random{bits.l,*a.bigint}
DEFTYPE.l x,y,z,restbits,anzwords
DEFTYPE.l rand,rest

  anzwords = bits / 16
  For z = 1 To anzwords + 1
    rand = Int(Rnd(32767)) + Int(Rnd(32767))
    *a\zahl[#PREC_DIGITS - z] = rand
  Next z
  restbits = bits - (anzwords * 16)
  rest = 1
  For y = 1 To restbits
    rest = rest LSL 1
  Next y
  *a\zahl[#PREC_DIGITS - (anzwords + 1)] = *a\zahl[#PREC_DIGITS - (anzwords + 1)] & (rest-1)
End Statement

 



; konvertiert einen Bitstring in eine bigint
; Im string sind die datenbytes von hoch nach niederwertig abgelegt
Statement bigint_Str2Big{s.s, *n.bigint}
DEFTYPE.bigint p,zehn,bigstelle,zielstelle,dummy
DEFTYPE.l lge,byte,pos
DEFTYPE.w stelle1,stelle2
DEFTYPE.l wert
  bigint_Int2Big{0,*n}
  lge = Len(s)
  If lge > 1
    For byte = lge-1 To 0 Step -2
      stelle1 = Asc(Mid$(s,byte + 1,1))  ; letztes Byte
      stelle2 = Asc(Mid$(s,byte    ,1))  ; vorletztes Byte
      If byte = 0 Then stelle2 = 0
      wert = (stelle2 LSL 8 + stelle1) & $FFFF
      pos = (lge-(byte+1))/2
;      If byte>lge-32 Then NPrint byte,"#",pos," ",Hexb$(stelle1)," ",Hexb$(stelle2)," ",Hex$(wert)
      *n\zahl[#PREC_DIGITS-1-pos] = wert
    Next byte
  EndIf
End Statement


; konvertiert eine bigint in einen Bitstring
Function.s bigint_Big2Str{*n.bigint}
DEFTYPE.bigint
DEFTYPE.l i

  For digit.w = 1 To #PREC_DIGITS
    stelle1.l = *n\zahl[#PREC_DIGITS-digit] & $000000FF
    stelle2.l = (*n\zahl[#PREC_DIGITS-digit] LSR 8) & $000000FF
    bitstring$ = Chr$(stelle2) + Chr$(stelle1) + bitstring$
  Next digit

  i = 1
  While Mid$(bitstring$,i,1)=Chr$(0)
    i+1
  Wend
  a$= Mid$(bitstring$,i,Len(bitstring$))
  If a$ = "" Then a$ = Chr$(0)
  Function Return a$
End Function




Statement bigint_Hex2Big{s.s, *n.bigint}
DEFTYPE.l l,ziffer,stelle
DEFTYPE.bigint p,bigstelle,zielstelle,dummy

  bigint_Int2Big{0,*n}
  bigint_Int2Big{1,p}

  ; evtl. $ entfernen
  If Left$(s,1)="$" Then s = UnRight$(s,1)
  ; auf gerade zeichenfolge bringen
  If (Len(s) MOD 2)<>0 Then s = "0" + s
  ; konvertieren
  l = Len(s)
  For ziffer = l-1 To 0 Step -2
    stelle = Vallong("$"+Mid$(s,ziffer,2))
    bigint_Int2Big{stelle,bigstelle}
    bigint_Mul{bigstelle,p,zielstelle} : bigint_Add{*n,zielstelle,*n}
    bigint_ShiftLeft{p,8}
  Next ziffer
End Statement





Statement bigint_Dec2Big{s.s, *n.bigint}
DEFTYPE.l l,ziffer,stelle
DEFTYPE.bigint p,bigstelle,zielstelle,dummy

  bigint_Int2Big{0,*n}
  bigint_Int2Big{1,p}

  l = Len(s)
  For ziffer = 0 To l-1
    stelle = Vallong(Mid$(s,l-ziffer,1))
;    Print StrRight(Str$(ziffer),2,Asc(" ")),"   "
    bigint_Int2Big{stelle,bigstelle}
    bigint_Mul{bigstelle,p,zielstelle} : bigint_Add{*n,zielstelle,*n}
    bigint_Mul{p,BN_10,p}
;    Print stelle," ",StrRight(bigint_AsString{*n},l,Asc(" "))
;    NPrint bigint_AsString{p}
  Next ziffer
End Statement
 

Function.l bigint_euklid{*b.bigint,*n.bigint,*erg.bigint}
DEFTYPE.bigint b0,n0,t0,t,q,r,temp,mytemp

  CopyType  *b, b0
  CopyType  *n, n0
  bigint_Int2Big{0,t0}
  bigint_Int2Big{1,t}
  bigint_Div{n0,b0,q}
  bigint_Mul2{q,b0,temp}
  bigint_Sub{n0,temp,r}
  ;r = n0 - q * b0
  While bigint_IsGreater{r,BN_0}
    bigint_Mul2{q,t,mytemp}
    bigint_Sub{t0,mytemp,temp}

    If bigint_IsLower{temp,BN_0}
;      temp = n - (( -temp) MOD n)
      bigint_ChangeSign{temp}
      bigint_Mod2{temp,*n,mytemp}
      bigint_Sub{*n,mytemp,temp}
    Else
      bigint_Mod2{temp,*n,temp}
    EndIf

    CopyType t, t0
    CopyType temp,t
    CopyType b0, n0
    CopyType r, b0
    bigint_Div{n0,b0,q}
    ;r = n0 - q * b0
    bigint_Mul2{q,b0,mytemp}
    bigint_Sub{n0,mytemp,r}

    CNIF @#wizard<>0
      win_use.l = Used Window
      Use Window WZID("WIN_PROGRESS")
      t$ = ""
      For zz.w = 1 To 24
        t$ + Str$(Int(Rnd(1024))) ;+ Right$(Hex$(Rnd(16)),2)
      Next zz
      WZPrint WZID("GAUGE"),0,1,&t$
      Use Window win_use
    CEND
  Wend

  If bigint_IsEqual{b0,BN_1}
    CopyType t, *erg
  Else
    CopyType BN_0, *erg
  EndIf
End Function

Function.l bigint_euklid_old{*b.bigint,*n.bigint,*erg.bigint}
  DEFTYPE.bigint p,q,d,e,phi,kphi1,kphi2

  CopyType *n,phi
  CopyType *b,e
  bigint_Int2Big{1,kphi1}
  bigint_Int2Big{0,kphi2}
  bigint_Int2Big{0,d}
  Repeat
    bigint_Add{kphi1,phi,kphi1}
    CopyType kphi1, kphi2
    bigint_Mod{kphi2,e,kphi2}
  Until bigint_IsNull{kphi2}
  CopyType kphi1, d : bigint_Div{d,e,d}

  CopyType d,*erg
End Function




Statement bigint_ggT{*z1.bigint, *z2.bigint,*wert.bigint}
  ; "CoPrime" ist der englische Fachausdruck fuer "teilerfremd".
  ; Die Funktion liefert genau dann "True", wenn gilt:
  ; ggT(z1, z2) = 1
  DEFTYPE.bigint a, b, r

  bigint_Int2Big{0,r}
  CopyType *z1,a
  CopyType *z2,b

  If bigint_IsNegative{a} Then bigint_ChangeSign{a}
  If bigint_IsNegative{b} Then bigint_ChangeSign{b}

  If bigint_IsGreater{a,b}
    CopyType b,r
    CopyType a,b
    CopyType r,a
  EndIf
  ; Jetzt ist a >= b >= 0
  ; Die folgende While-Schleife implementiert
  ; den "Euklidischen Algorithmus"
  While bigint_IsGreater{b,BN_1} OR bigint_IsEqual{b,BN_1}
    CopyType a,r      ; r.Assign(a)
    bigint_Mod2{r,b,r} ; r.Modulo(b)
    CopyType b,a      ; a.Assign(b)
    CopyType r,b      ; b.Assign(r)
  Wend
  ; Jetzt enthaelt a den ggT von z1 und z2.
  CopyType a,*wert
End Statement


.INITIALIZE_STANDARD_bigints
bigint_Int2Big{0,BN_0}
bigint_Int2Big{1,BN_1}
bigint_Int2Big{2,BN_2}
bigint_Int2Big{4,BN_4}
bigint_Int2Big{6,BN_6}
bigint_Int2Big{8,BN_8}
bigint_Int2Big{10,BN_10}
bigint_Int2Big{16,BN_16}
bigint_Int2Big{256,BN_256}


CNIF #__include = 0
XINCLUDE "intuition.include.ab3"
WBStartup: WbToScreen 0 : ScreenToFront_ Peek.l(Addr Screen(0))
;nocli
DEFTYPE.bigint b,n,e,m,d,key
DEFTYPE.l i,lauf

  For i= 1 To 96*2
    ttt$ + Chr$(i)
  Next i
  !cout{Hexstream{ttt$}}
  MouseWait
  bigint_Str2Big{ttt$,d}
  !cout{bigint_AsString{d}}
;  Repeat
;  Until !intui_rawstatus{$45} OR !intui_rawstatus{$44}
MouseWait
FlushEvents
Delay_ 50
MouseWait
FlushEvents
Delay_ 50
MouseWait
  End


  bigint_Int2Big{65537,b}
  !cout{ bigint_Big2Long{b}}
  !cout{"Ready."}
  MouseWait
  End
 


  !cout{"Lade Schl�ssel..."}
  DEFTYPE.bigint N

  fid.l = file_Open{"ISO9796Part1_demokeys.txt",#file_read}
  If fid<>-1
    ld.l = file_GetLength{fid}
    While file_GetSeekPos{fid} < ld
      z$ = file_ReadLine{fid}
      Select z$
      Case "N"
        n$ = file_ReadLine{fid}
      Case "d"
        d$ = file_ReadLine{fid}
      End Select
    Wend
    file_Close{fid}
  Else
    !cout{"error"}
    MouseWait
    End
  EndIf

  !cout{"erzeuge bigints."}
;  DEFTYPE.bigint N,e,d
  bigint_Int2Big{65537,e} : !cout{"e: ",bigint_AsString{e}}
  bigint_Dec2Big{n$,N}    : !cout{"N: ",bigint_AsString{N}}
  bigint_Dec2Big{d$,d}    : !cout{"d: ",bigint_AsString{d}}

  !cout{"berechne produkt..."}
  bigint_Mul{N,d,e}
  !cout{"ergebnis:"}
  !cout{bigint_AsString{e,-1}}

;bigint_Dec2Big{"112701229324418031719726089652496739315",e}
;!cout{"converted e=",bigint_AsString{e}}
;bigint_Dec2Big{"121225471632712802102633306307977801947",d}
;!cout{"converted d=",bigint_AsString{d}}
;bigint_Dec2Big{"139821750983862435107062499783379336149",m}
;!cout{"converted m=",bigint_AsString{m}}
;!cout{"calc expmod..."}
;bigint_ExpMod{d,e,m,key}
;!cout{"converted = "}
;!cout{bigint_AsString{key}}
!cout{"ready."}
MouseWait
End


lauf = 5000
bigint_Int2Big{75,b}
bigint_Int2Big{28,n}
bigint_Int2Big{0,e}
eclock_Start{50}
For i = 1 To lauf
  bigint_Mul{b,n,e}
;  bigint_Add{b,n,e}
Next i
ta.f = eclock_Stop{}/50.0
!cout{bigint_AsString{e},"  ",ta}

bigint_Int2Big{75,b}
bigint_Int2Big{28,n}
bigint_Int2Big{0,e}
eclock_Start {50}

For i = 1 To lauf
  bigint_Mul2{b,n,e}
;  bigint_Add2{b,n,e}
Next i
tb.f = eclock_Stop{}/50.0
!cout{bigint_AsString{e},"  ",tb}
!cout{"Beschleunigung: ",Int((ta/tb*100)-100),"%"}
MouseWait
End


DEFTYPE.bigint a,b,c,d,N,e,d,m,n
  zufall1$ = "211" ;"893295673251199281192221"
  zufall2$ = "167" ;"994293573939227878293907"

For i = 1 To 10
  a$ = "" : b$ = ""
  For j.w = 1 To 100
    a$ + Str$(Int(Rnd(10)))
    If j MOD 2 = 0 Then b$ + Str$(Int(Rnd(10)))
  Next j
  Print a$,"  ",b$, "      "
  bigint_Dec2Big{a$,m} ;"99887766554433221122334455667788998877665544332211",m}
  bigint_Dec2Big{"65537",e}
  bigint_Dec2Big{b$,n} ;"12345678987654321234567898765432123456789876543212345678987654321",n}
  bigint_ExpMod{m,e,n,c}
  NPrint bigint_AsString{c}
Next i
  MouseWait
CEND
