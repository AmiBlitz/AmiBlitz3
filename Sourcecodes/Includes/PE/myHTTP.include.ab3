; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = ""
; CreateIcon      = 0
; Residents       = "all.res,sdstcp.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 32768
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 35
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 0
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 619
; CursorColumn    = 36
; LabelSearch     = "base"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 15
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 200
; /XTRA
;
; HTTP Include V1.0
; (c) 2005 Sven Droege - eMail: honitos2001@yahoo.de
;
; diese Include wrapped die Standard-TCP-Funktionen der sdstcp.lib.
; es bietet simple Funktionen zum herunterladen von Dateien aus dem Web:
;
;
; TCP_Get{} : holt eine Datei von einer Site
; methode: GET oder POST, daten: die URL der Seite, datei: Zieldatei auf dem Rechner
; liefert eigene Fehlercodes zurueck
;
; TCP_ErrorString{}: wertet die Fehlercodes von TCP_Get aus
;
; HTTP_Get{} : holt mit TCP_Get eine Datei und liefert HTTP-Codes zurueck
; HTTP_ErrorString{} : wertet die HTTP-Fehlercodes von HTTP_Get aus
; HTTP_UseProxy{} : aktiviert die PRoxyunterst|tzung fuer SOCKS5-Proxies mit Password
; HTTP_NoProxy{} : deaktivert die Proxy-Unterst|tzung
;
; die anderen Funktionen sind nicht so wichtig zu dokumentieren, ich bin faul...
; sind aber glaube ich leicht zu verstehen...
;
;
CNIF #__include=0
  OPTIMIZE 4
CEND

#USE_HTTP = 1
XINCLUDE "PE/PE_Tools.include.ab3"
XINCLUDE "PE/base64.include.ab3"
XINCLUDE "file.include.ab3"


NEWTYPE.http
  proxy_name_http.s
  proxy_port_http.l
  proxy_username.s
  proxy_password.s
  proxy_base64.s
  use_proxy.b
  user_agent.s
End NEWTYPE
SHARED http.http

NEWTYPE.response
  server.s
  content_length.l
  content_type.s
  statuscode.l
  messagestring.s
End NEWTYPE
SHARED http_response.response

NEWTYPE.parameter
  name$
End NEWTYPE

Dim List http_parameter.parameter(0)
SHARED http_parameter()

Restore parameter : hpc.w = 0
Repeat
  Read hp$
  If AddLast(http_parameter())
    If hp$<>""
      http_parameter()\name = hp$
    EndIf
  EndIf
Until hp$ = ""

parameter:
Data$ "Content-Length","Content-Type","Pragma","Server","Proxy-Authenticate",""
#HTTP_PARA_CONTENT_LENGTH = 1
#HTTP_PARA_CONTENT_TYPE   = 2
#HTTP_PARA_PRAGMA = 3
#HTTP_PARA_SERVER = 4
#HTTP_PARA_PROXY_AUTHENTICATE = 5


Function.b TCP_Get{methode$,daten$,datei$}
  If Left$(daten$,7) = "http://"
    daten$ = StrChg(daten$,"http://","")
  EndIf
  pos.w = Instr(daten$,"/")
  host$ = Left$(daten$,pos-1)

  port.l = 80
  daten$ = Right$(daten$,Len(daten$)-pos+1)
  daten$ = StrChg(daten$," ","%20")

  If http\use_proxy
    tcp_host$ = http\proxy_name_http
    tcp_port.l  = http\proxy_port_http
    host$ = "http://" + host$
  Else
    tcp_host$ = host$
    tcp_port  = port
    host$ = ""
  EndIf

  send$ = methode$ + " " + host$ + daten$ + " HTTP/1.0" + Chr$(13)+ Chr$(10)
  If http\user_agent>""
    send$ + "User-Agent: " + http\user_agent + Chr$(13)+ Chr$(10)
  Else
    ; viele Server geben nur den HTTP-Header zurueck, wenn kein UserAgent
    ; angegeben wurde...
    send$ + "User-Agent: Mozilla" + Chr$(13)+ Chr$(10)
  EndIf

  send$ + "Accept: */*;q=1"   + Chr$(13)+ Chr$(10)
  send$ + "Host: "+ tcp_host$     + Chr$(13)+ Chr$(10)
  send$ + "Pragma: no-cache"  + Chr$(13)+ Chr$(10)

  If http\use_proxy
;      http\proxy_base64 = "c3ZlbmRyb2VnZTprOXZtYzR4MQ=="
;    send$ + "Proxy-Connection: keep-alive" + Chr$(13)+Chr$(10)
    send$ + "Proxy-Authorization: BASIC " + http\proxy_base64 + Chr$(13) + Chr$(10)
  EndIf
;  !cout{send$}
  ;
  ; nur notwendig, wenn bilder uebertragen werden sollen
  ;  send$ + "Referer: " + doc$  + Chr$(10)
  ;
  send$ + Chr$(13) + Chr$(10)
  DeleteFile_ datei$
  If OpenFile(10,datei$)
    FileSeek 10,Lof(10)
    FileOutput 10
    Format ""
    If TCPOpen
      If TCPCreateSocket(0,Off,#TCP_SOCK_Read|#TCP_SOCK_Write,5,0) = #TCP_SOCK_Ok
        CNIF @#USE_WIZARD <> 0
          Use Window WZID("WIN_PROGRESS")
        CEND
        TCPStatus.l = TCPConnectSocket(0,tcp_host$,tcp_port)
        Select TCPStatus
        Case #TCP_CONN_CONNECTING
          quitit.b = 0 : success.l = 0 : count.l = 0 : TimerReset
          Repeat
            Delay_ 1
            TCPev.b = TCPEvent : Iev.l = Event : key.w = RawKey
            If TCPev
              TCPError.l = TCPSocketError(0)
              TCPRead.b = TCPIsReadEvent(0)
              TCPWrit.b = TCPIsWriteEvent(0)

              If TCPError<>0
                msg$ = TCPErrorString$
                dummy.b = RTEZRequest("","�bertragungsfehler: "+ msg$,"_Ok")
                quitit = 1
              Else
                Select TCPStatus
                Case #TCP_CONN_CONNECTING
                  If TCPWrit<>0
                    TCPPrint 0,send$
                    TCPSetStates 0,#TCP_SOCK_Read
                    TCPStatus = #TCP_CONN_CONNECTED

                  EndIf
                Case #TCP_CONN_CONNECTED
                  If TCPRead<>0
                    in$ = TCPReadSocket$(0)
                    If TCPLastReadSize = 0
                      quitit = 1
                      success= 0
                    Else
                      TCPSetReceiveBuffer 2048
                      ; patch ! pruefen ob nullbytes am block sind
                      ; und anschliessend entfernen dieser nullbytes
                      ; dies ist bei meinem Proxyserver notwendig,
                      ; ob das immer so ist, weiss ich nicht
                      blocklen.l = Len(in$)
                      If blocklen > 1
                        count.l = 0
                        While Mid$(in$,blocklen-count,1) = Chr$(0)
                          count + 1
                        Wend
                        If count > 32
                          in$ = Left$(in$,blocklen-count)
                        EndIf
                      EndIf
                      ;
                      FileOutput 10 : Print in$
                    EndIf
                    in$ = ""
                  Else
                    If TCPWrit<>0
                      TCPSetStates 0,#TCP_SOCK_Read
                    EndIf
                  EndIf
                Default
                  dummy = RTEZRequest("unknown Status: ",Hex$(TCPStatus),"_Ok")
                End Select
              EndIf
;            Else
;              If Timer > 1000
;                quitit = 1
;                success =-5
;              EndIf
            EndIf

            CNIF @#USE_WIZARD <> 0
            If Iev > 0
              If Iev = #IDCMP_RAWKEY
                If EventWindow = WZID("WIN_PROGRESS")
                  If key = $45 Then quitit = 1 : success = -6 : CloseFile 10
                EndIf
              EndIf
            EndIf
            CEND
          Until quitit = 1
        Default
          If TCPStatus <> #TCP_CONN_NOTHING
            Select TCPStatus
            Case #TCP_CONN_FailError : tcp_err$ = "allgemeiner Fehler"
            Case #TCP_CONN_FailHostResolve : tcp_err$ = "Konnte Hostnamen nicht aufl�sen:" + Chr$(10) + tcp_host$ + ", Port: " + Str$(tcp_port)
            Case #TCP_CONN_FailNoConnect : tcp_err$ = "Kein Verbindung m�glich."
            Case #TCP_CONN_FailNoLibrary : tcp_err$ = "Konnte bsdsocket.library nicht �ffnen."
            Case #TCP_CONN_FailNoSocket : tcp_err$ = "Kein Socket vorhanden,"
            End Select
            dummy = RTEZRequest("","Socketverbindungsfehler:"+Chr$(10) + tcp_err$,"_Ok")
            success = -3
          Else
            !cout{"nothing."}
          EndIf
        End Select
      Else
        success = -3
      EndIf
    Else
      success = -1
    EndIf
    CloseFile 10
    TCPRemoveSocket 0
    TCPClose
  Else
    success = -4
    DeleteFile_ datei$
  EndIf
  Function Return success
End Function

Function.s TCP_ErrorString{error.l}
  Select error
  Case -1
    msg$ = "Bitte starten Sie zun�chst einen TCP-Stack !"
  Case 0
    msg$ = ""
  Case -2
    msg$ = "Konnte Serververbindung nicht herstellen!"+Chr$(10)
    msg$ + "Entweder Sie haben noch keine TCP-Verbindung zu Ihrem Provider"+Chr$(10)
    msg$ + "aufgebaut, oder der Server ist im Moment offline."+Chr$(10)
    msg$ + "Versuchen Sie es bitte ggf. zu einem sp�teren Zeitpunkt noch einmal."
  Case -3
    msg$ = "Konnte kein Interface(Socket) initialisieren."+Chr$(10)
    msg$ + "bitte �berpr�fen Sie Ihre TCP-Software."
  Case -4
    msg$ = "Konnte Auslagerungsdatei nicht anlegen."+Chr$(10)
    msg$ + "Bitte sorgen sie f�r mehr freien Speicherplatz."
  Case -5
    msg$ + "Der Server antwortet nicht."
  Case -6
    msg$ = "Benutzerabbruch\\n"
    msg$ + "Verbindung beendet."
  Default
    msg$ = "Unbekannter Fehler: "+Str$(error)
  End Select
  Function Return msg$
End Function

Function.s HTTP_ErrorString{code.l}
;  ResetList http_statuscodes()
;  While NextItem(http_statuscodes())
;    If http_statuscodes()\code = code
;      Function Return http_statuscodes()\description
;    EndIf
;  Wend
  Function Return http_response\messagestring
End Function


Function.l HTTP_Analyse{datei$}
  If OpenFile(10,datei$)
    FileInput 10
    ClearType http_response
    lf.l = Lof(10) : quit.b = False
    in$ = Edit$(300)
    If Instr(in$,"HTTP/1.") > 0
      num.l = ParsNums{in$}
      http_response\statuscode = Vallong(ParsLine{in$,2})
      For num2.l = 3 To num
        http_response\messagestring + ParsLine{in$,num2}+" "
      Next num2
      counter.l = 0 : fpos.l = 0
      Repeat
        in$ = Edit$(300)
        If (in$<>"") AND (fpos = 0)
          counter = 0
          ResetList http_parameter() : quit.b = False : CaseSense On
          Repeat
            If NextItem(http_parameter())
              pos.w =  Instr(in$,http_parameter()\name)
              If pos > 0
                Select Index(http_parameter())-1
                Case #HTTP_PARA_CONTENT_LENGTH : http_response\content_length = Vallong(ParsLine{in$,2})
                Case #HTTP_PARA_CONTENT_TYPE   : http_response\content_type = StrChg(in$,http_parameter()\name+": ","")
                Case #HTTP_PARA_SERVER         : http_response\server = StrChg(in$,http_parameter()\name+": ","")
                End Select
              EndIf
            Else
              quit = True
            EndIf
          Until quit = True
        Else
          If (counter = 2) AND (fpos =  0)
            fpos.l = Loc(10)
          Else
            counter + 1
          EndIf
        EndIf
      Until (aquit.b = True) OR (Loc(10)=lf)
    EndIf
    CloseFile 10 : DefaultInput
;    fpos = 0 ; nichtausfuehren des schneidens i.A.
    If (fpos > 0); OR (http_response\content_length > 0)
      If OpenFile(11,datei$)
        *mem.l = AllocMem(Lof(11),0)
        lf.l = Lof(11)
        If *mem > 0
          ReadMem 11,*mem,lf
          CloseFile 11
          If OpenFile(11,datei$+".new")
            WriteMem 11,*mem + fpos,lf - fpos
            CloseFile 11
            DeleteFile_ datei$
            Rename_ datei$+".new",datei$
            FreeMem *mem,lf
            http_response\content_length = lf - fpos
          EndIf
        EndIf
      EndIf
    EndIf
    Function Return http_response\statuscode
  EndIf
End Function

Function.l HTTP_Get{send$,datei$}
  suc.l = TCP_Get{"GET",send$,datei$}
  If suc = 0
    code.l = HTTP_Analyse{datei$}
  Else
    dummy.b = RTEZRequest("",TCP_ErrorString{suc},"_Ok")
    code = 0
  EndIf
  Function Return code
End Function

Function.b HTTP_Put{}
End Function

Function.b HTTP_Head{}
  suc.b = TCP_Get{"HEAD",send$,datei$}
  Function Return suc
End Function

Statement HTTP_NoProxy{}
  http\use_proxy = False
End Statement

Statement HTTP_UseProxy{proxy_name$,proxy_port.l,@username$,@passwort$}
  http\proxy_name_http = proxy_name$
  http\proxy_port_http = proxy_port
  http\use_proxy = True
  http\proxy_username = username$
  http\proxy_password = passwort$
  http\proxy_base64 = base64_Encode{username$+":"+passwort$}
;  !cout{http\proxy_base64,username$+":"+passwort$,BASE64_encode{username$+":"+passwort$}}
End Statement

Statement HTTP_SetUserAgent{t$}
  http\user_agent = t$
End Statement


Macro Read_Until_Char ;`1: zielstring$; `2: memorystart und counter; `3: endchar
  Repeat
    byte.w = Peek.b(`2) : mempos + 1
    If byte < 1 Then byte = 256 + byte
    b$ = Chr$(byte)
    `1 + b$
  Until (b$ = `3) OR (mempos=>lf_)
End Macro

#HTML_SCRIPT = 3
#HTML_TAG = 1
#HTML_ENTITY = 2
#HTML_TEXT = 0
Function HTML_RemoveTags{datei$,datei2$}
If dos_Check{datei$}
  dos_Delete{datei2$}
  reading.b = file_Open{datei$,#file_read}
  writing.b = file_Open{datei2$,#file_write}
  If reading<>-1 AND writing<>-1
    lf_.l = file_GetLength{reading}

    Repeat
      kode$ = file_ReadLine{reading} : char$ = "" : sentence$ =""
      !cout{"#",kode$}
      mode.b = #HTML_TEXT
      For i.w = 1 To Len(kode$)
        kode$ = Mid$(kode$,i,1)
        Select kode$
        Case "<"
          If mode = #HTML_TEXT
            mode = #HTML_TAG : tag$ ="" : kode$ =""
          EndIf
        Case "&"
          If mode = #HTML_TEXT
            mode = #HTML_ENTITY : entity$ ="" : entity_len.l = 0
          EndIf
        End Select

        Select mode
        Case #HTML_TAG
          If kode$ <> ">"
            tag$ + kode$
          Else
            mode = #HTML_TEXT
            tag_start$ = StrUpper( Left$(tag$,32) )
            If FindStrg("SCRIPT",tag_start$) = 2
              mode = #HTML_TAG : tag$ = ""
            Else
              If FindStrg("/SCRIPT",tag_start$) = 2 Then mode = #HTML_TEXT
            EndIf
          EndIf
        Case #HTML_ENTITY
          entity$ + kode$
          If kode$ <> ";"
            entity_len + 1
            If (entity_len = 14) OR ((entity_len = 2) AND (kode$=" ")); "&nbsp&middot;"
              mode = #HTML_TEXT
              char$ = entity$
            EndIf
          Else
            Select entity$
              Case "&nbsp&middot;" : char$ = " *"
              Case "&copy;" : char$ = "@"
              Case "&amp;"  : char$ = "&"
              Case "&deg;"  : char$ = "�"
              Case "&lt;"   : char$ = "<"
              Case "&gt;"   : char$ = ">"
              Case "&nbsp;" : char$ = " "
              Case "&auml;" : char$ = "�"
              Case "&Auml;" : char$ = "�"
              Case "&ouml;" : char$ = "�"
              Case "&Ouml;" : char$ = "�"
              Case "&uuml;" : char$ = "�"
              Case "&Uuml;" : char$ = "�"
              Case "&quot;" : char$ = Chr$(34)
              Case "&middot;":char$ = Chr$(10) + "*"
              Case "&szlig;" :char$ = "ss"
              Default
                If Left$(entity$,2) = "&#"
                  code.l = Vallong(StrPack(entity$,"&#;"))
                  char$ = Chr$(code)
                  mode = #HTML_TEXT
                Else
                  char$="?????"
              EndIf
            End Select
            mode  = #HTML_TEXT
          EndIf
        Case #HTML_TEXT
          char$ = kode$
        End Select

        If mode = #HTML_TEXT
          sentence$ + char$
        EndIf
      Next i

      !cout{":",sentence$}
      sentence$ = StripLead$(sentence$,32)
      If sentence$<>"" Then file_WriteLine{writing,sentence$}
    Until lf_ = file_GetSeekPos{reading}
    file_Close{reading}
    file_Clone{writing}
    Function Return True
  EndIf
Else
  Function Return False
EndIf
End Statement


Function HTML_RemoveTags2{datei$,datei2$}
If Exists(datei$)>0
  DeleteFile_ datei2$
  If OpenFile(2,datei$) AND OpenFile(3,datei2$)
    lf_.l = Lof(2)
    FileOutput 3 : FileInput 2
    mode.w = #HTML_TEXT : mempos.l = 0
    Repeat
      kode$ = Edit$(1) : char$ = ""

      Select mode
      Case #HTML_TEXT
        Select kode$
        Case "<" : mode = #HTML_TAG : tag$ = "<"
        Case "&" : mode = #HTML_ENTITY : entity$ = "&" : entity_len.l = 0
        Default
          char$ = kode$
        End Select

      Case #HTML_TAG
        tag$ + kode$
        tag_end = False
        Repeat
          char$ = Edit$(1)
          tag$ + char$
          ;
          If Left$(tag$,7)="<style "
            endtag$ = "</style>"
            Gosub skip_until
            tag_end = True
          EndIf
          If Left$(tag$,8)="<script "
            endtag$ = "</script>"
            Gosub skip_until
            tag_end = True
          EndIf
          If Left$(tag$,4)="<!--"
            endtag$ = "-->"
            Gosub skip_until
            tag_end = True
          EndIf
          If char$ = ">" Then tag_end = True
        Until tag_end
        kode$ = "" : char$ = ""
        mode = #HTML_TEXT

      Case #HTML_ENTITY
        entity$ + kode$
        If kode$ <> ";"
          entity_len + 1
          If (entity_len = 14) OR ((entity_len = 2) AND (kode$=" ")); "&nbsp&middot;"
            mode = #HTML_TEXT
            char$ = entity$
          EndIf
        Else
          Select entity$
            Case "&nbsp&middot;" : char$ = " *"
            Case "&copy;" : char$ = "@"
            Case "&amp;"  : char$ = "&"
            Case "&deg;"  : char$ = "�"
            Case "&lt;"   : char$ = "<"
            Case "&gt;"   : char$ = ">"
            Case "&nbsp;" : char$ = " "
            Case "&auml;" : char$ = "�"
            Case "&Auml;" : char$ = "�"
            Case "&ouml;" : char$ = "�"
            Case "&Ouml;" : char$ = "�"
            Case "&uuml;" : char$ = "�"
            Case "&Uuml;" : char$ = "�"
            Case "&quot;" : char$ = Chr$(34)
            Case "&middot;":char$ = Chr$(10) + "*"
            Case "&szlig;" :char$ = "ss"
            Case "&euro;" : char$ = "EUR"
            Default
              If Left$(entity$,2) = "&#"
                code.l = Vallong(StrPack(entity$,"&#;"))
                char$ = Chr$(code)
                mode = #HTML_TEXT
              Else
                char$="?????"
              EndIf
          End Select
          mode  = #HTML_TEXT
        EndIf
      End Select

      If mode = #HTML_TEXT
        If (Asc(char$) > 31)
          sentence$ + char$
        Else
          sentence$ = StripLead$(sentence$,32)
          If sentence$ <> ""
            NPrint sentence$
            sentence$ = ""
          EndIf
        EndIf
      EndIf
    Until Loc(2) = lf_
    If mode = #HTML_TEXT Then NPrint sentence$
    CloseFile 2
    CloseFile 3
    DefaultOutput
    DefaultInput
    Function Return True
  EndIf
Else
  Function Return False
EndIf

  skip_until:
;    !cout{"script_on"}
    f_lgth.b = Len(endtag$)
    f_str$ = endtag$
    script$ = ""
    Repeat
      script$ + Edit$(1)
    Until Right$(script$,f_lgth) = f_str$
;    !cout{script$}
;    !cout{"script_off"}
  Return
End Statement


CNIF #__include = 0
  WbToScreen 0 : ScreenToFront_ 0 : NoCli

  HTTP_SetUserAgent{"Mozilla"}
  ;HTTP_UseProxy{"192.168.0.200",8080,"username","password"}

  datei$ = "ram:t/test2"
  DeleteFile_ datei$
  !cout{"Hole Seite von amiga-news"}

  host$ = "http://www.google.de"
  HTTP_Get{host$, datei$}

;  If (http_response\statuscode)
    dummy.l = HTML_RemoveTags{datei$,"ram:test_removed_tags2.txt"}
;  Else
    msg$ = "Dateigroesse: "+Str$(http_response\content_length)+"\\n"
    msg$ + "Typ: "+http_response\content_type + "\\n"
    msg$ + "Status: "+ Str$(http_response\statuscode)+"\\n"
    msg$ + "Text: " + HTTP_ErrorString{http_response\statuscode} + "\\n"
    msg$ + "Server: "+ http_response\server
    !cout{msg$}
;  EndIf
  MouseWait
  End

wzgui:
wzguiend
CEND
