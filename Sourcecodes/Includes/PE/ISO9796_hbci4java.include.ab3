; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 94
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = "iso"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max ChunkyBuffer= 2
; /XTRA
; /**
;  * ISO9796-1 Message Encoding/Decoding with RSA-Encryption.
;  *
;  * <p>This implementation is fully ISO9796-1 compatible.
CNIF #__include=0
  OPTIMIZE 7
CEND

XINCLUDE "PE/PE_Tools.include.ab3"
#log_Width = 100
XINCLUDE "PE/logging.include.ab3"
XINCLUDE "PE/BigInt.include.ab3"
XINCLUDE "PE/RIPEMD160.include.ab3"
;XINCLUDE "PE/RSA.include.ab3"
DEFTYPE.w


Macro ArrayCopy ; {src, src_position, dst, dst_position, length}
For ArrayCopyN.l=0 To `5-1
 CopyMem_ &`1(ArrayCopyN+`2),&`3(ArrayCopyN+`4),1
Next
End Macro


; --
; -- copies a String to a dimed Array
;
; ConvertStringtoArray{ME(i),t,MEStr}
Macro ConvertStringtoArray
  For i.w = 0 To `2 - 1
    `1 = Asc( Mid$(`3,i+1,1) )
  Next i
End Macro

; --
; -- copies an array to a string
;
; ConvertStringtoArray{_MR(i),t,MRStr}
Macro ConvertArraytoString
  `3 = ""
  For i.w = 0 To `2 - 1
    `3 + Chr$(!UBYTE{`1})
  Next i
End Macro


Function.w GetBitLength{a$}
  If Len(a$)<1 Then Function Return 0

  bits.w = Len(a$) * 8 - 8
  byte.b = Asc(Left$(a$,1))
  For i.b = 7 To 0 Step -1
;    !cout{Bin$(byte)+" AND "+ Bin$(1 LSL i)+" = "+Bin$(byte AND (1 LSL i))}
    If (byte AND (1 LSL i)) = (1 LSL i)
;      !cout{"bit gesetzt."}
      add_bits.b = (i+1) : Pop For : Goto exit_for
    EndIf
  Next i
  exit_for:
  Function Return bits + add_bits
End Function


;/**
; * The Shadow Function S according To ISO9796-1:1991.
; *
; * <p>The shadow Function S that will be Used in the encoding AND decoding
; * operations according To ISO9796-1:1991/5.3 AND 6.2
; *
; * <pre>
; * Definition of Permutation Pi:
; *
; * 5     0123456789abcdef
; * Pi(5) e358942f0db67ac1
; * </pre>
; *
; * If nibble 5 consists of the bits a4 a3 a2 a1, Then under the
; * permutation Pi, its image denoted by Pi(5) consists of the bits:
; *
; * <pre>
; * a4^a2^a1^1 : a4^a3^a1^1 : a4^a3^a2^1 : a3^a2^a1
; * </pre>
; *
; * If the byte m consists of the nibble 52 51, Then under shadow S,
; * its image denoted by S(m) consists of the nibbles Pi(52) Pi(51).
; */
Dim SHADOW.b(257)
SHARED SHADOW()
DEFTYPE.w i : i = 0
Restore shadow
Repeat
  Read permut.w
  SHADOW(i) = permut
  i + 1
;  NPrint SHADOW(i-1)
Until permut = -1

shadow:
Data.b  $ee,  $e3,  $e5,  $e8, $e9,  $e4,  $e2,  $ef, $e0,  $ed,  $eb,  $e6, $e7,  $ea,  $ec,  $e1
Data.b  $3e,  $33,  $35,  $38, $39,  $34,  $32,  $3f, $30,  $3d,  $3b,  $36, $37,  $3a,  $3c,  $31
Data.b  $5e,  $53,  $55,  $58, $59,  $54,  $52,  $5f, $50,  $5d,  $5b,  $56, $57,  $5a,  $5c,  $51
Data.b  $8e,  $83,  $85,  $88, $89,  $84,  $82,  $8f, $80,  $8d,  $8b,  $86, $87,  $8a,  $8c,  $81
Data.b  $9e,  $93,  $95,  $98, $99,  $94,  $92,  $9f, $90,  $9d,  $9b,  $96, $97,  $9a,  $9c,  $91
Data.b  $4e,  $43,  $45,  $48, $49,  $44,  $42,  $4f, $40,  $4d,  $4b,  $46, $47,  $4a,  $4c,  $41
Data.b  $2e,  $23,  $25,  $28, $29,  $24,  $22,  $2f, $20,  $2d,  $2b,  $26, $27,  $2a,  $2c,  $21
Data.b  $fe,  $f3,  $f5,  $f8, $f9,  $f4,  $f2,  $ff, $f0,  $fd,  $fb,  $f6, $f7,  $fa,  $fc,  $f1
Data.b  $0e,  $03,  $05,  $08, $09,  $04,  $02,  $0f, $00,  $0d,  $0b,  $06, $07,  $0a,  $0c,  $01
Data.b  $de,  $d3,  $d5,  $d8, $d9,  $d4,  $d2,  $df, $d0,  $dd,  $db,  $d6, $d7,  $da,  $dc,  $d1
Data.b  $be,  $b3,  $b5,  $b8, $b9,  $b4,  $b2,  $bf, $b0,  $bd,  $bb,  $b6, $b7,  $ba,  $bc,  $b1
Data.b  $6e,  $63,  $65,  $68, $69,  $64,  $62,  $6f, $60,  $6d,  $6b,  $66, $67,  $6a,  $6c,  $61
Data.b  $7e,  $73,  $75,  $78, $79,  $74,  $72,  $7f, $70,  $7d,  $7b,  $76, $77,  $7a,  $7c,  $71
Data.b  $ae,  $a3,  $a5,  $a8, $a9,  $a4,  $a2,  $af, $a0,  $ad,  $ab,  $a6, $a7,  $aa,  $ac,  $a1
Data.b  $ce,  $c3,  $c5,  $c8, $c9,  $c4,  $c2,  $cf, $c0,  $cd,  $cb,  $c6, $c7,  $ca,  $cc,  $c1
Data.b  $1e,  $13,  $15,  $18, $19,  $14,  $12,  $1f, $10,  $1d,  $1b,  $16, $17,  $1a,  $1c,  $11
Data.b -1

; -- The inverse Pi Function according To ISO9796-1:1991.
; -- See also the Shadow Function S.
Dim PI_INV.b(16)
SHARED PI_INV()
PI_INV(0) =  $08, $0f, $06, $01, $05, $02, $0b, $0c, $03, $04, $0d, $0a, $0e, $09, $00, $07


Dim Perm.b(15)
Perm(0) = $0E,$03,$05,$08,$09,$04,$02,$0F,$00,$0D,$0B,$06,$07,$0A,$0C,$01

Function.b S{x.b}
SHARED Perm()
  Function Return (Perm((x ASR 4) & $0F) ASL 4) | Perm( x & $0F)
End Function


; /**
;  * ISO9796-1 Message Encoding with RSA-Encryption.
;  *
;  * <p>This implementation is fully ISO9796-1 compatible.
;  *
;  * @param bitStringMessage the bit string that should be formated according
;  * To ISO9796-1 with usage of RSA For the sigma Function.
;  * @param publicExponentEven should be True If the 'publicExponent' of the
;  * RSAPublicKey is a Even number OR False If the 'publicExponent' of the
;  * RSAPublicKey is odd.
;  * @Return the with RSA signed ISO9796-1 formated representation of
;  * the message.
;  * @throws NullPointerException If bitStringMessage is Null.
;  * @throws IllegalArgumentException If the 'messageBitLength' isn't be at
;  * most 8 times the Largest integer less than OR equal To (ks+3)/16.
;  * This means 'z' should less than OR equal To (ks+3)/16. Where 'ks' is the
;  * modulus bit Length aubtract by one.
;  * @throws IllegalStateException If this Codec Object isn't initialized
;  * For encoding.
;  */
;ISO9796Part1BitString  encodeMessage(
;ISO9796Part1BitString  bitStringMessage, boolean publicExponentEven) {
Function.s ISO9796_encodeSign{_buffer$,*key_privateExponent.bigint,*key_modulus.bigint}
  If _buffer$ = ""
    log_Print{"inputbuffer is empty."}
    Function Return ""
  EndIf

  ; -- prepareForSig
  DEFTYPE.bigint modulus : CopyType *key_modulus,modulus
  str_mod$ = bigint_Big2Str{modulus}

  ; -- as the buffer is already byte-aligned, no padding is necessary here !
  mp_length.w = Len(_buffer$)
  Dim mp.b(mp_length)
  For i.w = 0 To mp_length - 1
    mp(i) = Asc( Mid$(_buffer$,i+1,1) )
  Next i

  k.w = GetBitLength{str_mod$} - 1
  ks.w = k - 1
  z.w = mp_length
  r.w = 1
  log_Print{"bitlength of modulus k="+Str$(ks+1)+", ks ="+Str$(ks)+", z = "+Str$(z)}

  If NOT ((z ASL 4)<=(k + 3))
    log_Print{"reject: 16*z is greater than k."}
    Function Return ""
  EndIf
 
  ; -- extension (concatenate MP multiple times)
  t.w = (k-1) ASR 4
  If ((k-1) & $0F) <> 0
    t + 1
  EndIf
  log_Print{"<t = "+Str$(t)+">"}
  ; --
  ; -- byte[] = me=getMEfromMP(mp, t)
  ; --
  me_length.w = t : Dim me.b(t)
  sum.w = 0
  While (sum<t)
    If (sum+mp_length<=t)
      ;system.arraycopy(mp,0,ret,ret.length-sum-mp.length,mp.length);
      !ArrayCopy{mp,0,me,me_length-sum-mp_length,mp_length}
      sum + mp_length
    Else
      diff.w = t - sum
      ;system.arraycopy(mp, mp.length-diff,ret, 0 ,diff);
      !ArrayCopy{mp,mp_length-diff,me,0,diff}
      sum + diff
    EndIf
  Wend
  ;NPrint "me ",me_length
  ;For i = 0 To me_length-1
  ;  Print Hexb$(me(i)),"."
  ;Next i
  ;NPrint ""

  ; -- creating redundancy by interleaving the extended message bytes
  ; -- with redundancy bytes
  ; --
  ; -- byte [] mr=getMRfromME(me,t,z,r)
  ; --
  mr_length.w = 2 * t : Dim _mr.b( mr_length )
  For i = 0 To t-1
    _mr( 2*t-1 - (2*i))   = me(t-1-i)
    _mr( 2*t-1 - (2*i+1)) = S{me(t-1-i)}
  Next i
  _mr( (t-z) ASL 1 ) | r
  ;NPrint "mr ",mr_length
  ;For i = 0 To mr_length-1
  ;  Print Hexb$(_mr(i)),"."
  ;Next i
  ;NPrint ""


  ; -- get intermediate integer
  ; --
  ; -- byte [] ir=getIRfromMR(mr,k)
  ; -- System.arraycopy(mr,0,ir,0,len);
  ir_length.w = mr_length : Dim ir.b( ir_length )
  !ArrayCopy{_mr,0,ir,0,ir_length}

  _len.w = ir_length
  ir(0) & (1 ASL (7-((_len ASL 3)-k)))-1
  ir(0) | (1 ASL (7-((_len ASL 3)-k)))
  ir(_len-1) = (((ir(_len-1) & $0F) ASL 4) | $06)
;  NPrint "ir ",_len
;  For i = 0 To ir_length-1
;    Print Hexb$(ir(i)),"."
;  Next i
;  NPrint ""


  ; -- calculate signature
  ; --
  !ConvertArraytoString{ir(i),ir_length,irString$}
  DEFTYPE.bigint irAsNumber
  bigint_Str2Big{irString$,irAsNumber}
;  NPrint "irAsString$ "
;  For i = 1 To ir_length
;    Print Hexb$(Asc(Mid$(irString$,i))),"."
;  Next i




  ; -- The representative Element of 'ir' with respect To modulus
  ; -- is denoted by 'rr'.
  DEFTYPE.bigint rr
  DEFTYPE.bigint privateExponent
  CopyType *key_privateExponent,privateExponent
  ; -- der Exponent wurde auf 65537 festgelegt
  publicExponentEven.b = False
  If publicExponentEven
    log_Print{"Sollte nicht passieren, der Exponent ist auf 65537 festgelegt."}
    ; -- jacobiSymbol errechnen
  Else
    ; -- public exponent is odd
    ; -- Convert 'ir' To the BigInteger representation of 'rr'.
    CopyType irAsNumber,rr
    log_Print{"publicExponent is odd."}
    log_Print{"<rr> was set to <irAsNumber="+bigint_AsString{irAsNumber}+">"}
  EndIf
  log_Print{"using modulus="+bigint_AsString{modulus}}
  log_Print{"using privateExponent="+bigint_AsString{privateExponent}}

  ; -- Calc Signature
  ;cipherText = rr.modPow(privateExponent, modulus);
  DEFTYPE.bigint cipherText
  bigint_ExpMod{rr,privateExponent,modulus,cipherText}

  ; --
  ; -- byte[] sig=getSigFromIS(is, modulus)
  ; --
  DEFTYPE.bigint sigmaAsNumber,tempmin
  bigint_Sub{modulus,cipherText,tempmin}
  If bigint_IsGreater{cipherText,tempmin}
    CopyType tempmin,sigmaAsNumber
  Else
    CopyType cipherText,sigmaAsNumber
  EndIf
  log_Print{"Have done sigmaAsNumber = cipherText.min(modulus.subtract(cipherText))"}
  log_Print{"and created final sigma = "+bigint_AsString{sigmaAsNumber}}

  ; -- Convert sigmaAsNumber To an unsigned byte array.
  ;final byte[] sigma = BigIntegerUtil.toUnsignedByteArray(sigmaAsNumber);
  sigma$ = bigint_Big2Str{sigmaAsNumber}

  ; -- Create 'bitStringSignature' from 'sigma' AND its Length in bits 'ks'
  ; -- as ISO9796Part1BitString.
  ;ISO9796Part1BitString  bitStringSignature = new ISO9796Part1BitString (sigma, ks);
  bitStringSignature$ = sigma$
  ; -- Return the bitStringSignature.
  Function Return bitStringSignature$
End Function



;
; ISO9796-1 RSA-Signature Decoding with Message Recovery.
;
; <p> This is the inverse operation of
; encodeMessage(ISO97696Part1RSACodec, boolean)
;
; @param bitStringSignature the Signature as ISO9796Part1BitString with a
; bitLength of k-1 bits. Where k is the bitLength of the public key
; modulus.
; @Return the recoverd message as ISO9796Part1Message OR Null If the
; signature is rejected.
; throws NullPointerException If bitStringSignature is Null.
; @throws IllegalStateException If this Codec Object isn't initialized
; For decoding.
;
Function.s ISO9796_verifySign{bitStringSignature$,*key_publicExponent.bigint,*key_modulus.bigint}
  ; -- Debugging info ...
  log_Print{"Entering decodeMessage with <bitStringMessage="+Hexstream{bitStringSignature$}+">"}

  ; --
  ; --
  ; -- Pre-Conditions check
  ; --
  ; --
  If bitStringSignature$ = ""
    log_Print{"Parameter <bitStringSignature> is null."}
    Function Return ""
  EndIf

  ;
  ; --
  ; --
  ; -- RSA Verification Function (A.5) AND Signature opening(6.1)
  ; --
  ; --

  ; -- Get 'modulus'
  DEFTYPE.bigint modulus
  CopyType *key_modulus,modulus
  log_Print{"decoded <Modulus="+bigint_AsString{modulus}+">"}

  ; -- Get 'sigma'.
  Dim sigma.b( Len(bitStringSignature$) )
  !ConvertStringtoArray{sigma(i),Len(bitStringSignature$),bitStringSignature$}
  log_Print{"Recovered result of sigma()"}

  ; -- Convert the signature 'sigma' To the BigInteger representation of the
  ; -- signature 'sigma' - denoted as 'sigmaAsNumber'.
  DEFTYPE.bigint sigmaAsNumber
  bigint_Str2Big{bitStringSignature$,sigmaAsNumber}
  log_Print{"Have created from sigma() <sigmaAsNumber="+bigint_AsString{sigmaAsNumber}+">"}

  ; If (sigmaAsNumber >= n/2)
  DEFTYPE.bigint n_halbe
  bigint_Div{modulus,BN_2,n_halbe}
  If bigint_IsGreater{sigmaAsNumber, n_halbe}
    log_Print{"Return from decodeSignature(...)."}
    log_Print{"Reject Signature! \\nSignature is not a positive integer less than modulus/2."}
    ; -- reject signature.
    Function Return ""
  EndIf

  ; -- Setup RSA public exponent.
  DEFTYPE.bigint publicExponent
  CopyType *key_publicExponent, publicExponent
  log_Print{"Have set <publicExponent = "+bigint_AsString{publicExponent}+">"}

  ; -- Do RSA encryption operation, according To Rivest, Shamir AND Adelmann.
  ; -- Here it will be Used To _decrypt_ the the signature 'sigma' with
  ; -- help of the signers public key. The result will be the resulting
  ; -- integer 'is'

  ;final BigInteger is = (sigmaAsNumber.modPow(publicExponent, modulus));
  DEFTYPE.bigint is
  bigint_ExpMod{sigmaAsNumber,publicExponent,modulus,is}

  ; -- Debug info
  log_Print{"Have decrypted <is="+bigint_AsString{is}+">"}

  ; --
  ; -- In the following code section, we do recover the intermediate
  ; -- integer ir, first as a number an Then we will it convert To a
  ; -- byte array.
  ; --

  ; -- The recovered intermediate integer 'ir'
  DEFTYPE.bigint irAsNumber

  ; -- check exponent of oddness; with hbci it is always odd
  DEFTYPE.bigint tempBN
  bigint_Mod{publicExponent,BN_2,tempBN}
  If bigint_IsNull{tempBN}
    log_Print{"Public exponent is even."}
    log_Print{"This should not happen !"}

  Else ; -- public exponent is odd
    log_Print{"Public exponent is odd."}

    ; If (is % 16 == 6)
    bigint_Mod{is,BN_16,tempBN}
    If bigint_IsEqual{tempBN,BN_6}
      log_Print{"<is> mod 16 is congruent to 6."}

      ; -- ir = is
      CopyType is,irAsNumber
      log_Print{"Have set <irAsNumber=> = <is=>."}

      ; -- If ((modulus - is) % 16 == 6)
    Else
;   Else If (modulus.subtract(is).mod(SIXTEEN).equals(SIX)) {
      DEFTYPE.bigint mod_is
      bigint_Sub{modulus,is,mod_is}
      bigint_Mod{mod_is,BN_16,tempBN}
      If bigint_IsEqual{tempBN,BN_6}
        log_Print{"(modulus - is) mod 16 is congruent to 6."}

        ; -- ir = modulus - is
        CopyType mod_is,irAsNumber

        log_Print{"Have calculated <irAsNumber> = <modulus> - <is>."}

      ; -- <is> or modulus-is is not congruent To 6 MOD 16
      Else
        log_Print{"Return from decodeSignature(...). "}
        log_Print{"Reject Signature!"}
        log_Print{"<is> or <modulus - is> is not congruent to 6 mod 16."}

        ; -- reject signature.
        Function Return ""
      EndIf
    EndIf
  EndIf

  ; -- 'k' is the Length of the 'modulus' in bits.
  ;final Int k = modulus.bitLength();
  k.w = GetBitLength{bigint_Big2Str{modulus}}
  ;k.w = 760 ; 768

  log_Print{"Have set <k="+Str$(k)+">: modulus.bitLength()"}

  ; -- The lower bound for 'ir'
  ;final BigInteger lowerBound = TWO.pow(k - 2)
  DEFTYPE.bigint lowerBound
  bigint_Int2Big{2,lowerBound}
  For i.w = 1 To (k - 2) - 1
    bigint_ShiftLeft{lowerBound}
  Next i

  ; -- The upper bound for 'ir'
  ;final BigInteger upperBound = TWO.pow(k - 1).subtract(ONE);
  DEFTYPE.bigint upperBound
  bigint_Int2Big{2,upperBound}
  For i.w = 1 To (k - 1) - 1
    bigint_ShiftLeft{upperBound}
  Next i
  bigint_Sub{upperBound,BN_1,upperBound}

  ; -- If (ir < lowerBound)                                ************** ERROR ************
  If bigint_Cmp{irAsNumber,lowerBound} < 0
    log_Print{"Return from decodeSignature(...). "}
    log_Print{"Reject Signature! \\n<irAsNumber> is less than of 2^(k-2)."}

    ; -- reject signature.
    Function Return ""
  EndIf

  ; -- If (import > upperBound)
  If bigint_Cmp{irAsNumber,upperBound} > 0
    ; -- Debug Info
    log_Print{"Return from decodeSignature(...). "}
    log_Print{"Reject Signature! \\n<irAsNumber> is greater than 2^(k-1)-1."}

    ; -- reject signature.
    Function Return ""
  EndIf

  ; -- Convert the BigInteger representation of 'ir', denoted as
  ; -- 'irAsNumber', to the byte array representation of 'ir', denoted
  ; -- as 'ir'.
  ;byte[] ir = BigIntegerUtil.toUnsignedByteArray(irAsNumber);
  irAsString$ = bigint_Big2Str{irAsNumber}
  Dim ir.w( Len(irAsString$) )  : ir_length.w = Len(irAsString$)
  !ConvertStringtoArray{ir(i),Len(irAsString$),irAsString$}

  ; -- Debug Info
  log_Print{"Have converted ir() = "+bigint_AsString{irAsNumber}}

  ; -- We dont have To check If 'ir' is a bit string of 'ks' bits, because
  ; -- we do this with the BigInteger bound checkeing, where we check above
  ; -- If irAsNumber is in the range between 2^(k-2) To 2^(k-1)-1
  ; -- inclusively.
  ;
  ; -- Check If the least significant nibble is valued To 6
  ;If ((ir[ir.length - 1] & $0f) != $06) {
  If (ir( ir_length - 1 ) & $0F) <> $06
    ; -- LSN isn't 6
    log_Print{"Return from decodeSignature(...). "}
    log_Print{"Reject Signature! "}
    log_Print{"Least significant nibble of ir isn't 6"}
    ; "<(ir[<ir.length=ir.length+"> - 1] & $0f)="+(ir[ir.length - 1] & $0f)+">."

    ; -- reject signature.
    Function Return ""
  EndIf

  ; -- Debug 'ir'.
  log_Print{"Recovered result of <ir>."}

  ;  -----
  ;  --
  ;  -- Message recovery
  ;  --
  ;  -----

  ; -- 'ks' the Length of the signature 'sigma' in bits.
  ;final Int ks = k - 1;
  ks.w = k - 1

  log_Print{"Have calculated <ks="+Str$(ks)+"> = <k"+Str$(k)+"> - 1."}

  ; -- 't' is the least integer, such that a string of '2t bytes' includes at
  ; -- least 'ks-1 bits'.
  ;final Int t = (ks + 14) / 16 ;
  t.w = (ks + 14) / 16

  log_Print{"Have calculated <t="+Str$(t)+"> = (<ks="+Str$(ks)+"> + 14) / 16."}

  ; -- Create 'mr' with a Length of '2t bytes'
  ;final byte[] mr = New byte[2 * t];
  Dim mr_.w(2 * t) : mr_length.w  = 2 * t

  log_Print{"Have created <mr> = new byte[2 * <t="+Str$(t)+">]"}

  ; -- Copy 'ir' into 'mr'. We have To distinguish between two cases:
  ; -- 1. The number of bytes in ir is greater than OR equal To the
  ; --    number of bytes in mr.
  ; -- 2. The number of bytes in ir is less than the number of bytes in mr.
  ; -- This differentiation is necessary, because the number of bytes in mr
  ; -- is a multiple of 16 AND the number of bytes in ir is multiple of 8.

  If (ir_length >= mr_length)
    ;System.arraycopy(ir, ir.length - mr.length, mr, 0, mr.length);
    ir_pos.w = ir_length - mr_length
    For i = 0 To mr_length
      mr_(i) = ir(ir_pos)
      ir_pos + 1
    Next i
  Else ; --(ir.length < mr.length)
    ;System.arraycopy(ir, 0, mr, mr.length - ir.length, ir.length);
    ir_pos.w = 0
    For i = mr_length - ir_length To ir_length
      mr_(i) = ir(ir_pos)
      ir_pos + 1
    Next i
    ;!cout{ "********"}
  EndIf

  log_Print{"Have copied <ir> into <mr> aligned to the right."}

  ; -- Mask out (pad) all 16t - (ks - 1) bits To the left as padding bits.
  ; -- This is the reverse operation To the truncation operation.
  If ((ks - 1) MOD 16) < 8
    If ((ks - 1) MOD 8) = 0
      mr_(0) = mr_(0) & $FF
      log_Print{"Have set <mr[0]> &= $ff."}
    Else
      mr_(0) = mr_(0) & $00
      log_Print{"Have set <mr[0]> &= $00."}
    EndIf
    mr_(1) = mr_(1) & $FF LSR ((8 - (ks - 1) MOD 8) MOD 8)

  Else
    ; -- ((ks - 1) % 16 >= 8)
    mr_(0) = mr_(0) & $FF LSR (8 - (ks - 1) MOD 8)
  EndIf

  ; -- This is the reverse operation To the forcing operation.
  mr_(mr_length - 1) = ((PI_INV( (mr_(mr_length - 2) LSR 4) & $0F) ASL 4) | ((mr_(mr_length - 1) LSR 4) & $0F))

  log_Print{"Do reverse operation of forcing to <mr[<mr.length="+Str$(mr_length)+"> - 1]="}
  log_Print{"Recovered result of <mr>."}

  ; -- Declare AND initialize the flag tSumsAreNull, the number z AND
  ; -- the Index r.
  tSumsAreNull.b = True
  z.w = 0
  r.w = 0

  ; -- Search For z AND r in mr, While looking For the first non Null sum.
  For i = 1 To t
    ; -- Debug m_2i AND S(m_2i-1)
    sumA.w = mr_(mr_length - (2 * i))
    sumB.w = SHADOW( mr_(mr_length - ((2 * i) - 1) ) & $FF)
    ; -- Compute the 't'-th 'sum'.
    sum.w = Xor( mr_( mr_length - (2 * i)) , SHADOW( mr_(mr_length - ((2 * i) - 1) ) & $FF))

    ;log_Print{"Look For first Non Null sum."}
    ; -- We found the first NOn Null 'sum'.
    If sum<>0
      ;log_Print{"Found first non null sum!"}
      ; -- Tell the flag that we have found the first NOn Null sum.
      tSumsAreNull = False
      ; -- Number 'z' is recovered as the position  of the first
      ; -- Non Null 'sum'.
      z = i
      ;log_Print{"Have set <z="+Str$(z)+"> = <i="+Str$(i)+">."}
      ; -- Index 'r' is recovered as the value  of the least significant
      ; -- nibble of the first NOn Null 'sum'.
      r = sum & $0F
      log_Print{"Have calculated <r="+Str$(r)+"> = <sum="+Str$(sum)+"> & $0f."}
      Pop For: Goto fexit
    EndIf
  Next i
  fexit:

  ; -- The signature sigma shall be rejected If  the t sums are Null.
  If tSumsAreNull
    ; -- reject signature
    log_Print{"Return from decodeSignature(...). "+Chr$(10)+"Reject Signature! "+Chr$(10)+"All <t="+Str$(t)+"> sums are null."}
    ; -- reject signature.
    Function Return ""
  EndIf

  ; -- The signature sigma shall be rejected If  If Index r is NOT
  ; -- valued from 1 To 8.
  If ( r < 1 ) OR (r > 8)
    log_Print{"Return from decodeSignature(...). "+Chr$(10)+"Reject Signature! "+Chr$(10)+"<r="+Str$(r)+"> is out of range. r have to be (1 <= r <= 8)."}
    ; -- reject signature.
    Function Return ""
  EndIf

  ; -- Create 'mp' with a Length of 'z' bytes.
  Dim mp.w(z) : mp_length.w = z
  ;log_Print{"Have created <mp> = new byte[<z="+Str$(z)+">]"}

  ; -- The recovered padded message 'mp' is the string of the 'z' least
  ; -- significant bytes in odd position in 'mr'
  For i = 1 To z
    mp( mp_length - i) = mr_(mr_length - ((2 * i) - 1))
  Next i

  ; -- Check the padded zero bits in 'mp'.
  If ((mp(0) & ($FF LSL (9 - r))) & $FF)<>0
    ; -- The 'r' - 1  most significant bits of 'mp' are NOT zero.
    log_Print{"Return from decodeSignature(...). "+Chr$(10)+"Reject Signature! "}
    ; -- reject signature.
    Function Return ""
  EndIf

  ; -- Debug 'ir'.
  ;log_Print{"Recovered result of <mp=>."}
  temp$ = ""
  For i = 0 To mp_length - 1
    temp$ + Right$(Hex$(mp(i)),2)+"'"
  Next i
  ;!cout{temp$}


  ;  -----
  ;  --
  ;  -- Redundancy checking
  ;  --
  ;  -----
  ;
  ; --The signature 'sigma' shall only be accepted If AND only If the
  ; --'ks'-1 least significant bits of 'mr' are equal To the 'ks'-1 least
  ; --significant bits of another extended message with redundancy
  ; --'anotherMr' computed from the recovered padded message 'mp'.
  ;
  ; --The another extended message with redundancy have to be created in
  ; --two steps:
  ; --1. Create another extended message 'anotherMe' by repeating the
  ; --   'z' bytes of 'mp', as many times as necessary, in order AND
  ; --   concatenated To the left, Until forming a string of t bytes.
  ; --2. Create another extende message with redundancy 'anotherMr' by
  ; --   interleaving the 't' bytes of 'anotherMe' in odd positions AND
  ; --   't' bytes of redundancy in Even positions. Altered by Index 'r',
  ; --   the least significant nibble of the '2z-th byte' of 'anotherMr'
  ; --   codes the message Length by its value in its position.
  ; --For performance AND memory reasons we haven't an extra 'anotherMe'.
  ; --So we create 'anotherMp' with all 'anotherMe'-like operations defined
  ; --in ISO9796-1:1991.
  ;
  ; --Create anotherMr with a Length of '2t bytes'
  Dim anotherMr.b(2 * t) : anotherMr_length.w = 2 * t
  log_Print{"Have created <anotherMr> = new byte[2 * <t="+Str$(t)+">]"}

  ; -- Extend AND interleave the padded message mp.
  For i = 1 To t
    ; -- odd position in 'anotherMr' -> (2i-1) -> 't' byte of 'me'
    anotherMr( 2*t - (2*i-1) ) = mp( z-(((i-1) MOD z) + 1))
    ; -- Even -> (2i)   -> 't' byte of redundancy with the help of SHADOW.
    anotherMr( 2*t - (2*i) ) = SHADOW( mp( z-(((i-1) MOD z) + 1) ) & $ff)
  Next i

  log_Print{"Have extended and interleaved <anotherMr=>."}

  ; -- The '2z-th byte' of 'anotherMr' equals the exclusive-or of index 'r'
  ; -- with the shadow of the 'z-th byte' of 'anotherMe'.
  anotherMr( 2*t - (2*z)) = Xor(anotherMr( 2*t - (2*z)) , r)

  log_Print{"Have xored <r> to the 2*z-th byte of anothermr: "}

  ; -- Mask out (pad) all 16t - (ks - 1) bits To the left as padding bits.
  ; -- This is the reverse operation To the truncation operation.
  If ((ks - 1) MOD 16) < 8
    If ((ks - 1) MOD 8) = 0
      anotherMr(0) & $FF
      log_Print{"Have set <anotherMr[0]=> &= $ff."}
    Else
      anotherMr(0) & $00
      log_Print{"Have set <anotherMr[0]=> &= $00."}
    EndIf
    anotherMr(1) = (anotherMr(1) & $ff) ASR ((8 - (ks - 1) MOD 8) MOD 8)
    log_Print{"Have set <anotherMr[1]=> &= <$ff >>> ((8 - (<ks="+Str$(ks)+"> - 1) % 8) % 8)"}

  Else ; -- ((ks - 1) % 16 >= 8)
    anotherMr(0) = anotherMr(0) & $ff ASR (8 - (ks - 1) MOD 8)
    log_Print{"Have set <anotherMr[0]=> &= <$ff >>> (8 - (<ks="+Str$(ks)+"> - 1) % 8)"}
  EndIf

  ; -- Debug anotherMr.
  log_Print{"Final result of <anotherMr="}
  temp$ =""
  For i = 0 To anotherMr_length - 1
    temp$ + Right$(Hex$(anotherMr(i)),2)+"."
  Next i
  ;!cout{temp$}

  log_Print{"mr: "}
  temp$ = ""
  For i = 0 To mr_length - 1
    temp$ + Right$(Hex$(mr_(i)),2)+"."
  Next i
  ;!cout{temp$}

  ; -- Verify if 'mr' and 'anotherMr' are the same. One Step further we
  ; -- masked the 16t - (ks - 1) padding bits so we compare now only the
  ; -- ks - 1 least significant bits in 'mr' with the ks - 1 least
  ; -- significant bits in 'anotherMr'.
  !ConvertArraytoString{mr_(i),mr_length,mr_string$}
  !ConvertArraytoString{anotherMr(i),anotherMr_length,anotherMr_string$}
  If anotherMr_string$ <> mr_string$
    ; -- ks - 1 least significant bits in 'mr' are different To the ks - 1
    ; -- least significant bits in 'anotherMr'.
    log_Print{"Return from decodeSignature(...). "+Chr$(10)+"Reject Signature! "+Chr$(10)+"<ks="+Str$(ks)+"> - 1 least significant bits in <mr=> are different �� the <ks="+Str$(ks)+" - 1 least significant bits in <anotherMr=>."}
    ; -- reject signature.
    Function Return ""
  EndIf

  log_Print{"<mr=> is equal to <anotherMr=>."}

  ; -- Calculate the 'message' bit string Length 'messageBitLength'.
  messageBitLength.w = (z * 8) - (r - 1)

  log_Print{"Have calculated <messageBitLength="+Str$(messageBitLength)+"> = (<z="+Str$(z)+"> * 8) - (<r"+Str$(r)+"> - 1)."}

  ; -- Create the bitStringMessage Object.
  ;  ISO9796Part1BitString bitStringMessage =
  ;  New ISO9796Part1BitString (mp, messageBitLength);
  !ConvertArraytoString{mp(i),mp_length,bitStringMessage$}
  log_Print{"ok."}
  ; -- We are right so we Return the recovered message.
  Function Return bitStringMessage$
End Function



CNIF #__include = 0
;NoCli
WbToScreen 0 : WBenchToFront_ ;Peek.l(Addr Screen(0))
;  ; --------------------------------------------------------------------
;  ; -  Signieren der Cryp-Tool Demodatei                               -
;  ; --------------------------------------------------------------------
;  ;
;;;  datei$ = "windh_c:programme/Cryptool/examples/startbeispiel-de.txt"
;;datei$ = "windh_c:install.log"
;;  NPrint "- lese Datei "+datei$
;;  If OpenFile(1,datei$)
;;    lf.l = Lof(1) : input$ = ""
;;    *mem.l = AllocMem( lf,0)
;;    ReadMem 1,*mem,lf
;;    CloseFile 1
;;  Else
;;    Print "datei nicht lesbar."
;;    MouseWait
;;    End
;;  EndIf
;;  input$ = PeekS(*mem,lf)
;;
;;  hash$ = RIPEMD160{input$}
;;  NPrint "*** RIPEMD160-Hashwert: "+hash$ + " ***"
;;  NPrint ""
;;  bitStream$ = ""
;;  For i = 1 To Len(hash$) Step 2
;;    bitStream$ + Chr$( Val( "$"+Mid$(hash$,i,2) ) )
;;  Next i
;;
;;  NPrint "lade schluessel..."
;;  DEFTYPE.bigint N
;;
;;  If ReadFile(1,"ISO9796Part1_demokeys.txt")
;;    FileInput 1
;;    ld.l = Lof(1)
;;    While Loc(1)<ld
;;      z$ = Edit$(400) ;: NPrint "*"+z$
;;      Select z$
;;      Case "N"
;;        n$ = Edit$(400)
;;      Case "d"
;;        d$ = Edit$(400)
;;      End Select
;;    Wend
;;    CloseFile 1
;;  Else
;;    NPrint "error"
;;    MouseWait
;;    End
;;  EndIf
;;  ;!cout{"N="+n$}
;;  ;!cout{"d="+d$}
;;
;;  NPrint "erzeuge bigints."
;;  DEFTYPE.bigint N,e,d
;;  Print "exponent, "
;;  bigint_Int2Big{65537,e}
;;  NPrint "e: ",bigint_AsString{e}
;;  Print "N,"
;;  bigint_Dec2Big{n$,N}
;;  ;NPrint "N: ",bigint_AsString{N}
;;  NPrint "d"
;;  bigint_Dec2Big{d$,d}
;;  ;NPrint "d: ",bigint_AsString{d}
;;  NPrint "ok."
;;  NPrint ""
;;  NPrint "erzeuge signatur..."
;;  sign$ = ISO9796_encodeSign{bitStream$,e,d}
;;  NPrint "Ergebnis:"
;;  NPrint Hexstream{sign$}
;;MouseWait
;;End
;;
;
;  ; ---------------------------------------------------------------------
;  ; - Dekodierung einer HBCI-Signatur aus einem Beispieldiaglog         -
;  ; ---------------------------------------------------------------------
;  datei$ = "ISO9796Part1_log13.txt"
;  NPrint "- lese Datei "+datei$
;  If OpenFile(1,datei$)
;    lf.l = Lof(1) : input$ = ""
;    *mem.l = AllocMem( lf,0)
;    ReadMem 1,*mem,lf
;    CloseFile 1
;  Else
;    NPrint "datei nicht lesbar..."
;    MouseWait
;    End
;  EndIf
;
;  ; optionale anzeige als Hex
;    For i.w = 0 To lf - 1 Step 16
;      c$ = ""
;      For j.w = 0 To 15
;        b$ = PeekS(*mem+i+j,1) : If (Asc(b$)>30) AND (Asc(b$)<128) Then c$ + b$ Else c$+"."
;;        Print Right$(Hex$(Asc(b$)),2)," "
;      Next j
;;      Print i+j
;;      NPrint "  :  "+c$+" "
;    Next i
;
;  ; holen des oeffentlichen exponenten
;    sexponent$ = PeekS(*mem+628,3) ; 628 fuer log13
;    Print "oeffentl. Signierexponent: ",Len(sexponent$),"    "
;
;  ; holen des oeffentlichen Modulus
;    smodulus$ = PeekS(*mem+525,96) ; 525 fuer log13
;    NPrint "oeffentl. Modulus: ",Len(smodulus$)
;    NPrint Bitstream{smodulus$},"<<<"
;
;  ; holen der nutzdaten in message$
;;    message$ = PeekS(*mem+167,653) ; 167 fuer log13
;    NPrint "nutzdatenlaenge: ",Len(message$),"   ",Left$(message$,4),"...",Right$(message$,2)
;  ; holen der signatur in signatur$
;    signatur$ = PeekS(*mem+849,96) ; 849 fuer log13
;    NPrint "signaturlaenge : ",Len(signatur$)
;
;  For i.w = 1 To 96
;    b = i MOD 10
;    If b = 1 Then Print b Else Print "."
;  Next i
;  NPrint ""
;
;  NPrint Bitstream{signatur$},"<<<"
;  ;  For i = 1 To 96
;  ;    a$=Mid$(signatur$,i,1)
;  ;    If (Asc(a$)>30)AND(Asc(a$)<127) Then Print a$ Else Print "."
;  ;  Next i
;  FreeMem *mem,lf
;
;  bigint_Str2Big{smodulus$,modulus.bigint}
;  bigint_Str2Big{sexponent$,exponent.bigint}
;  NPrint "los gehts..."
;  test$ = ISO9796_verifySign{signatur$,exponent,modulus}
;  Print "decodierte Signatur: ",Hexstream{test$}
;  VWait 50
;MouseWait
;End
;

  log_SetDestination{#log_toboth,"ram:iso_test.log"}
  log_Reset{}
  log_SetFormat{#log_function}
  log_Print{"Lade Schl�ssel..."}

  fid.l = file_Open{"ISO9796Part1_keyset2.txt",#file_read}
  If fid<>-1
    ld.l = file_GetLength{fid}
    While file_GetSeekPos{fid} < ld
      z$ = file_ReadLine{fid}
      Select z$
      Case "N"
        n$ = file_ReadLine{fid}
      Case "d"
        d$ = file_ReadLine{fid}
      End Select
    Wend
    file_Close{fid}
  Else
    !cout{"Konnte Datei nicht oeffnen..."}
    MouseWait
    End
  EndIf

  log_Print{"Erzeuge bigints..."}
  RunErrsOff
  DEFTYPE.bigint N,e,d
  bigint_Int2Big{65537,e} : log_Print{"e: "+bigint_AsString{e}}
  bigint_Dec2Big{n$,N}    : log_Print{"N: "+bigint_AsString{N}}
  bigint_Dec2Big{d$,d}    : log_Print{"d: "+bigint_AsString{d}}
  RunErrsOn
  If d$="" Then End

  ; -- Hashwert bekommen
  datei$ = "system:programme/Cryptool/examples/startbeispiel-de.txt"
  log_Print{"- lese Datei "+datei$}
  If OpenFile(1,datei$)
    lf.l = Lof(1) : input$ = ""
    *mem.l = AllocMem( lf,0)
    ReadMem 1,*mem,lf
    CloseFile 1
  EndIf
  input$ = PeekX(*mem,lf)
  hash$ = RIPEMD160{input$}
  log_Print{"RIPEMD160-Hashwert:"+hash$}
  bitStream$ = ""
  For i = 1 To Len(hash$) Step 2
    bitStream$ + Chr$( Val( "$"+Mid$(hash$,i,2) ) )
  Next i

  ; -- signieren des Hashwertes
  log_Print{"Erzeuge Signatur f�r bitstream <"+Bitstream{bitStream$}+">"}
  signatur$ = ISO9796_encodeSign{bitStream$,e,d}

  ; -- pruefen der Sigantur
  bitStream$ = signatur$
  log_Print{"\\nPr�fe Signatur..."}
  sign$ = ISO9796_verifySign{bitStream$,e,N}
  log_Print{"Pruefergebnis: <"+Hexstream{sign$}+">"}
  !cout{"Ready"}
  MouseWait
  Delay_ 25
  MouseWait
  !coutclose
  WBenchToBack_
End

CEND


