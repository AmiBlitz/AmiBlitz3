; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 0
; Residents       = "bb2objtypes.res,all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 1
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max ChunkyBuffer= 2
; /XTRA

Function.l rotleft{wert.l,bits.l}
  ROL.l D1,D0
  Function Return PutRegD0
End Function

Function.l addulong{a.l,b.l}
  ADD.l D1,D0
  Function Return PutRegD0
End Function

Function.l long_to_lendian{x.l}
DEFTYPE.l lengs

  lengs = rotleft{x AND $FF,24} OR rotleft{ rotleft{x,24} AND $FF, 16} OR rotleft{ rotleft{x,16} AND $FF ,8} OR (rotleft{x,8} AND $FF)
  Function Return lengs
End Function

Function.s hexx{a.l}
DEFTYPE.s s
DEFTYPE.w l

    s = Hex$(a)
    l = Len(s)
    While l < 8
        s = "0" + s
        l = Len(s)
    Wend

    Function Return s
End Function


Function.f trunc{a.f}
DEFTYPE.s s
DEFTYPE.w i,k,l
DEFTYPE.f o
DEFTYPE.b flag

    s = Str$(a)
    l = Len(s)
    i = 0
    flag = True
    While (i < l) AND flag
        i = i + 1
        If Mid$(s, i, 1) = "." Then flag = False
    Wend
    If i = l
      o = Val(s)
    Else
        If a < 1
            o = 0
        Else
            o = Val(Left$(s, i - 1))
        End If
    End If

    Function Return o
End Function


Function.l f{j.l, X.l, y.l, z.l}
DEFTYPE.l out
  out = 0
  If (j=>0) AND (j<=15) Then out = Xor(X, Xor(y,z))
  If (j=>16) AND (j<=31) Then out = (X AND y) OR ( (NOT X) AND z)
  If (j=>32) AND (j<=47) Then out = Xor( X OR (NOT y) ,z)
  If (j=>48) AND (j<=63) Then out = (X AND z) OR (y AND (NOT z))
  If (j=>64) AND (j<=79) Then out = Xor(X, y OR (NOT z))

  Function Return out
End Function

Function.s RIPEMD160{daten$}
  DEFTYPE.l i,j
  Dim X.l(1000, 16)
  DEFTYPE.w rcx,rcy, rcc
  DEFTYPE.l rcl, rcg, rcf

  DEFTYPE.l h0,h1,h2,h3,h4
  DEFTYPE.l a,b,c,d,e,t
  DEFTYPE.l ax,bx,cx,dx,ex,lx,tx
  DEFTYPE.l


  ;added constants:
  Dim k.l(100)
  Dim ks.l(100)

  For i = 0 To 15
    k(i + 0) = $0
    k(i + 16) = $5A827999
    k(i + 32) = $6ED9EBA1
    k(i + 48) = $8F1BBCDC
    k(i + 64) = $A953FD4E
    ks(i + 0) = $50A28BE6
    ks(i + 16) = $5C4DD124
    ks(i + 32) = $6D703EF3
    ks(i + 48) = $7A6D76E9
    ks(i + 64) = $0
  Next

  ;selection of message word
  Dim r.l(100)
  Dim rs.l(100)
  Dim s.w(100)
  Dim ss.w(100)
  r(0) = 0:   r(1) = 1:   r(2) = 2:   r(3) = 3:   r(4) = 4:   r(5) = 5:   r(6) = 6:   r(7) = 7
  r(8) = 8:   r(9) = 9:   r(10) = 10: r(11) = 11: r(12) = 12: r(13) = 13: r(14) = 14: r(15) = 15
  r(16) = 7:  r(17) = 4:  r(18) = 13: r(19) = 1:  r(20) = 10: r(21) = 6:  r(22) = 15: r(23) = 3
  r(24) = 12: r(25) = 0:  r(26) = 9:  r(27) = 5:  r(28) = 2:  r(29) = 14: r(30) = 11: r(31) = 8
  r(32) = 3:  r(33) = 10: r(34) = 14: r(35) = 4:  r(36) = 9:  r(37) = 15: r(38) = 8:  r(39) = 1
  r(40) = 2:  r(41) = 7:  r(42) = 0:  r(43) = 6:  r(44) = 13:  r(45) = 11:  r(46) = 5:  r(47) = 12
  r(48) = 1:  r(49) = 9:  r(50) = 11:  r(51) = 10:  r(52) = 0:  r(53) = 8:  r(54) = 12:  r(55) = 4
  r(56) = 13:  r(57) = 3:  r(58) = 7:  r(59) = 15:  r(60) = 14:  r(61) = 5:  r(62) = 6:  r(63) = 2
  r(64) = 4:  r(65) = 0:  r(66) = 5:  r(67) = 9:  r(68) = 7:  r(69) = 12:  r(70) = 2:  r(71) = 10
  r(72) = 14:  r(73) = 1:  r(74) = 3:  r(75) = 8:  r(76) = 11:  r(77) = 6:  r(78) = 15:  r(79) = 13
  rs(0) = 5: rs(1) = 14: rs(2) = 7: rs(3) = 0: rs(4) = 9: rs(5) = 2: rs(6) = 11: rs(7) = 4
  rs(8) = 13: rs(9) = 6: rs(10) = 15: rs(11) = 8: rs(12) = 1: rs(13) = 10: rs(14) = 3: rs(15) = 12
  rs(16) = 6: rs(17) = 11: rs(18) = 3: rs(19) = 7: rs(20) = 0: rs(21) = 13: rs(22) = 5: rs(23) = 10
  rs(24) = 14: rs(25) = 15: rs(26) = 8: rs(27) = 12: rs(28) = 4: rs(29) = 9: rs(30) = 1: rs(31) = 2
  rs(32) = 15: rs(33) = 5: rs(34) = 1: rs(35) = 3: rs(36) = 7: rs(37) = 14: rs(38) = 6: rs(39) = 9
  rs(40) = 11: rs(41) = 8: rs(42) = 12: rs(43) = 2: rs(44) = 10: rs(45) = 0: rs(46) = 4: rs(47) = 13
  rs(48) = 8: rs(49) = 6: rs(50) = 4: rs(51) = 1: rs(52) = 3: rs(53) = 11: rs(54) = 15: rs(55) = 0
  rs(56) = 5: rs(57) = 12: rs(58) = 2: rs(59) = 13: rs(60) = 9: rs(61) = 7: rs(62) = 10: rs(63) = 14
  rs(64) = 12: rs(65) = 15: rs(66) = 10: rs(67) = 4: rs(68) = 1: rs(69) = 5: rs(70) = 8: rs(71) = 7
  rs(72) = 6: rs(73) = 2: rs(74) = 13: rs(75) = 14: rs(76) = 0: rs(77) = 3: rs(78) = 9: rs(79) = 11

  ;Amount For Rotate Left (rol)
  s(0) = 11: s(1) = 14: s(2) = 15: s(3) = 12: s(4) = 5: s(5) = 8: s(6) = 7: s(7) = 9
  s(8) = 11: s(9) = 13: s(10) = 14: s(11) = 15: s(12) = 6: s(13) = 7: s(14) = 9: s(15) = 8
  s(16) = 7: s(17) = 6: s(18) = 8: s(19) = 13: s(20) = 11: s(21) = 9: s(22) = 7: s(23) = 15
  s(24) = 7: s(25) = 12: s(26) = 15: s(27) = 9: s(28) = 11: s(29) = 7: s(30) = 13: s(31) = 12
  s(32) = 11: s(33) = 13: s(34) = 6: s(35) = 7: s(36) = 14: s(37) = 9: s(38) = 13: s(39) = 15
  s(40) = 14: s(41) = 8: s(42) = 13: s(43) = 6: s(44) = 5: s(45) = 12: s(46) = 7: s(47) = 5
  s(48) = 11: s(49) = 12: s(50) = 14: s(51) = 15: s(52) = 14: s(53) = 15: s(54) = 9: s(55) = 8
  s(56) = 9: s(57) = 14: s(58) = 5: s(59) = 6: s(60) = 8: s(61) = 6: s(62) = 5: s(63) = 12
  s(64) = 9: s(65) = 15: s(66) = 5: s(67) = 11: s(68) = 6: s(69) = 8: s(70) = 13: s(71) = 12
  s(72) = 5: s(73) = 12: s(74) = 13: s(75) = 14: s(76) = 11: s(77) = 8: s(78) = 5: s(79) = 6
  ss(0) = 8: ss(1) = 9: ss(2) = 9: ss(3) = 11: ss(4) = 13: ss(5) = 15: ss(6) = 15: ss(7) = 5
  ss(8) = 7: ss(9) = 7: ss(10) = 8: ss(11) = 11: ss(12) = 14: ss(13) = 14: ss(14) = 12: ss(15) = 6
  ss(16) = 9: ss(17) = 13: ss(18) = 15: ss(19) = 7: ss(20) = 12: ss(21) = 8: ss(22) = 9: ss(23) = 11
  ss(24) = 7: ss(25) = 7: ss(26) = 12: ss(27) = 7: ss(28) = 6: ss(29) = 15: ss(30) = 13: ss(31) = 11
  ss(32) = 9: ss(33) = 7: ss(34) = 15: ss(35) = 11: ss(36) = 8: ss(37) = 6: ss(38) = 6: ss(39) = 14
  ss(40) = 12: ss(41) = 13: ss(42) = 5: ss(43) = 14: ss(44) = 13: ss(45) = 13: ss(46) = 7: ss(47) = 5
  ss(48) = 15: ss(49) = 5: ss(50) = 8: ss(51) = 11: ss(52) = 14: ss(53) = 14: ss(54) = 6: ss(55) = 14
  ss(56) = 6: ss(57) = 9: ss(58) = 12: ss(59) = 9: ss(60) = 12: ss(61) = 5: ss(62) = 15: ss(63) = 8
  ss(64) = 8: ss(65) = 5: ss(66) = 12: ss(67) = 9: ss(68) = 12: ss(69) = 5: ss(70) = 14: ss(71) = 6
  ss(72) = 8: ss(73) = 13: ss(74) = 6: ss(75) = 5: ss(76) = 15: ss(77) = 13: ss(78) = 11: ss(79) = 11

 ;Padding fr Byte-Strings...
  DEFTYPE.l lengs
  DEFTYPE.f rcd
  rcl = Len(daten$)
  rcd = rcl / 64
  rcx = trunc{rcd}
  rcy = rcl - rcx * 64

  ;switch Bytes of length
  lengs = rcl * 8 ;Laenge in Bit

  daten$ = daten$ + Chr$($80)
  rcx = rcx + 1
  If rcy > 55
      rcx = rcx + 1
      For i = 1 To 119 - rcy
          daten$ = daten$ + Chr$(0)
      Next
  Else
      For i = 1 To 55 - rcy
          daten$ = daten$ + Chr$(0)
      Next
  End If
  daten$ = daten$ + "12345678"  ;8x Dummy-Byte
  t = Len(daten$) ;<-- zum Debuggen
  t = rcx

  rcc = 0
  For i = 0 To rcx - 1
      For j = 0 To 15
          rcg = 0
          rcc = rcc + 1
          rcf = Asc(Mid$(daten$, rcc, 1))
          rcg = rotleft{rcg,8} OR rcf
          rcc = rcc + 1
          rcf = Asc(Mid$(daten$, rcc, 1))
          rcg = rotleft{rcg,8} OR rcf
          rcc = rcc + 1
          rcf = Asc(Mid$(daten$, rcc, 1))
          rcg = rotleft{rcg,8} OR rcf
          rcc = rcc + 1
          rcf = Asc(Mid$(daten$, rcc, 1))
          rcg = rotleft{rcg,8} OR rcf
          X(i, j) = long_to_lendian{rcg}
          ;x(i, j) = rcg
      Next
  Next
;  x(rcx - 1, 14) = long_to_lendian{lengs}
;  x(rcx - 1, 15) = 0
    X(rcx - 1, 15) = 0
    X(rcx - 1, 14) = lengs


  ;Hauptschleife
  ;Initial Values:
  h0 = $67452301: h1 = $EFCDAB89: h2 = $98BADCFE: h3 = $10325476: h4 = $C3D2E1F0

  For i = 0 To t - 1

    a = h0: b = h1: c = h2: d = h3: e = h4
    ax = h0: bx = h1: cx = h2: dx = h3: ex = h4

    For j = 0 To 79

      lx = addulong{k(j), X(i, r(j))} :
      lx = addulong{lx, a}
      lx = addulong{lx, f{j, b, c, d} }
      t = addulong{rotleft{lx, s(j)}, e}
      a = e: e = d: d = rotleft{c,10} : c = b: b = t

      lx = addulong{ks(j), X(i, rs(j))}
      lx = addulong{lx, ax}
      lx = addulong{lx, f{79 - j, bx, cx, dx}}
      t = addulong{rotleft{lx,ss(j)}, ex}
      ax = ex: ex = dx: dx = rotleft{cx,10} : cx = bx: bx = t

    Next

    lx = addulong{c, dx}: t = addulong{h1, lx}
    lx = addulong{d, ex}: h1 = addulong{h2, lx}
    lx = addulong{e, ax}: h2 = addulong{h3, lx}
    lx = addulong{a, bx}: h3 = addulong{h4, lx}
    lx = addulong{b, cx}: h4 = addulong{h0, lx}
    h0 = t
  Next


  h1 = long_to_lendian{h1}
  h2 = long_to_lendian{h2}
  h3 = long_to_lendian{h3}
  h4 = long_to_lendian{h4}
  h0 = long_to_lendian{h0}

  Format "00000000"
  hs$ = Hex$(h0) + Hex$(h1) + Hex$(h2) + Hex$(h3) + Hex$(h4)
  Format ""
  Function Return hs$

End Function
