; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 32000
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 67
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = "rsa_"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max ChunkyBuffer= 2
; /XTRA
CNIF #__include=0
  OPTIMIZE 4
CEND

XINCLUDE "eclock.include.ab3"
XINCLUDE "file.include.ab3"
CNIF @#PE_TOOLS =0
  XINCLUDE "PE/PE_Tools.include.ab3"
CEND
XINCLUDE "PE/BigInt.include.ab3"

#DEFAULT_KEY_LENGTH = 768
#DEFAULT_EXPONENT = 65537

#USE_PRECALCULATED_PRIMES = 1

; -- definitions for small primelist
#maxPrimIndex = 1228
Dim primes.l(#maxPrimIndex)
SHARED primes()
Restore primelist
For rsa_i.w = 0 To #maxPrimIndex
  Read primes(rsa_i)
Next rsa_i
NEWTYPE.PList
  value.s
  counter.l
End NEWTYPE
Dim List PList.PList(0)
SHARED PList()






Statement Calculate_Primes_until{BisZahl.l}
  DEFTYPE.b keinePrim
  DEFTYPE.l m,n,t

  ; -- Herausfiltern der Primzahlen
  ; -- Alle ungeraden Zahlen durchzdhlen

  For n = 3 To BisZahl Step 2
    keinePrim = False
    m = Sqr(n)
    ; -- Testen ob die Zahl einen Teiler hat.
    For t = 3 To m Step 2
      If n MOD t = 0
        ; -- Zahl hat einen Teiler, also keine Primzahl
        keinePrim = True
        t = m
      End If
    Next t
    m = n + 1
    If NOT keinePrim
      If AddLast(PList())
        PList()\value = Str$(n)
      EndIf
    EndIf
  Next n
End Statement
 


Function.b HasSmallPrimFactor{*z.bigint}
  DEFTYPE.b Result
  DEFTYPE.w i
  DEFTYPE.bigint bz,t

  Result = False
  bigint_SetBig{bz,*z}
  bigint_Int2Big{1,t}

  i = 0
  While (NOT Result) AND (i < #maxPrimIndex)
    bigint_Int2Big{primes(i),t}
    bigint_Mod{*z,t,bz}
    If bigint_IsNull{bz}
      Result = True
    Else
      i = i + 1
    EndIf
  Wend
  Function Return Result
End Function


Function.b CoPrime{*z1.bigint, *z2.bigint}
  ;-- "CoPrime" ist der englische Fachausdruck fuer "teilerfremd".
  ;-- Die Funktion liefert genau dann "True", wenn gilt:
  ;--      ggT(z1, z2) = 1
  DEFTYPE.bigint a, b, r, dummy

  bigint_Int2Big{0,r}
  CopyType *z1,a
  CopyType *z2,b

;  If bigint_IsNegativ{a} Then bigint_ChangeSign{a}
;  If bigint_IsNegativ{b} Then bigint_ChangeSign{b}

  If bigint_IsGreater{a,b}
    CopyType b,r
    CopyType a,b
    CopyType r,a
;    r.Assign(b)
;    b.Assign(a)
;    a.Assign(r)
  EndIf
  ;-- Jetzt ist a >= b >= 0.
  ;-- Die folgende While-Schleife implementiert
  ;-- den "Euklidischen Algorithmus":
;  While b.IsGreaterOrEqualThan(eins) do begin
  While bigint_IsGreater{b,BN_1} OR bigint_IsEqual{b,BN_1}
    CopyType a,r ;r.Assign(a)
    bigint_Mod{r,b,dummy} : CopyType dummy,r ; r.Modulo(b)
    CopyType b,a                                ; a.Assign(b)
    CopyType r,b                                ; b.Assign(r)
  Wend
  ; -- Jetzt enthaelt a den ggT von z1 und z2.
  Function Return bigint_IsEqual{a,BN_1}
End Function


Function.b IsMillerRabinPrime{*zahl.bigint,t.w}
  DEFTYPE.bigint n, m, r, a, y, erg, nm1,p
  DEFTYPE.w b, i, j

  bigint_Sub{*zahl,BN_1,m}
  CopyType m,r
  CopyType m,nm1

  b = 0 ; p = 1 + (2^b) * m
  While (r\zahl[#PREC_DIGITS-1] & $00000001) = 0
    b = b + 1
    bigint_ShiftRight{r}                   ; r = r / 2
  Wend
  If b = 0 Then Function Return False

  bigint_Int2Big{0,a}
  bigint_Int2Big{0,y}
  bigint_Int2Big{0,erg}
  For i = 1 To t
    bigint_Int2Big{primes(i-1),a}          ; nehmen einer Primzahl
;    Print bigint_AsString{a}," ^ "
;    Print bigint_AsString{r}," % "
;    Print bigint_AsString{p}," = "
    bigint_ExpMod{a, r, *zahl, y}            ; berechne y = a ^ r % n
;    NPrint bigint_AsString{y}

    If bigint_IsEqual{y,BN_1} Then Function Return True

    j = 0
    While (j < b) AND (NOT bigint_IsEqual{y,nm1})
      bigint_ExpMod{y,BN_2, p, erg} : CopyType erg,y
      If bigint_IsEqual{y,BN_1} Then Function Return False
      j = j + 1

      ; Fortschrittsdarstellung im PROGRESS_WINDOW
      CNIF @#wizard<>0
        win_use.l = Used Window
        Use Window WZID("WIN_PROGRESS")
        t$ = ""
        For zz.w = 1 To 8
          t$ + Str$(Int(Rnd(1024)))
        Next zz
        WZPrint WZID("GAUGE"),0,1,&t$
        Use Window win_use
      CEND

    Wend
    If NOT bigint_IsEqual{y,nm1} Then Function Return False
  Next i
  Function Return True ; a ist Zeuge fuer "p ist prim"
End Function


Statement RSA_MillerRabinPrim{iw.d, *c.bigint,*wert.bigint}
  DEFTYPE.w tiw
  DEFTYPE.bigint dummy

  If (*c\zahl[#PREC_DIGITS-1] MOD 2) = 0  ;not Odd(c.Digit[0])
    bigint_Add{*c,BN_1,dummy} : CopyType dummy,*c
  EndIf
  tiw = Int(Log(iw) / Log(0.25)) ; Ceil(Ln(iw)/Ln(0.25));

  Repeat
    bigint_Add{*c,BN_2,dummy} : CopyType dummy,*c
    While HasSmallPrimFactor{*c}
      bigint_Add{*c,BN_2,dummy} : CopyType dummy,*c
;    !cout{bigint_AsString{*c}}
    Wend
  Until IsMillerRabinPrime{*c, tiw}
  CopyType *c,*wert
End Statement

Function.b Fermat_Test{*p.bigint,durchlaeufe.w}
DEFTYPE.w i
DEFTYPE.bigint primzahl,ergebnis,pm1

  For i = 0 To durchlaeufe-1
    bigint_Int2Big{primes(i),primzahl}
    bigint_Sub{*p,BN_1,pm1}
    bigint_ExpMod{primzahl,pm1,*p,ergebnis}
    If NOT bigint_IsEqual{ergebnis,BN_1} Function Return False

      ; Fortschrittsdarstellung im PROGRESS_WINDOW
      CNIF @#wizard<>0
        t$ = ""
        For zz.w = 1 To 24
          t$ + Str$(Int(Rnd(1024)))
        Next zz
        !WZ_GaugeInfo{&t$}
      CEND

  Next i
  Function Return True
End Function


Statement RSA_GeneratePrime{bits.w,*p.bigint}
DEFTYPE.bigint prime
  ; -- 1.Methode: solange Zufallszahlen erzeugen, bis eine Prim ist
  ; -- Repeat
  ; --   bigint_Random{bits,prime}
  ; -- Until IsMillerRabinPrime{prime,1}
  ;
  ; -- 2.Methode: einige Fermat-Tests mit kleinen Primzahlen als Basis durchfuehren
  ; -- einfacher Fermat-Test : a^(p-1) % p = 1 -> p=Primzahl
  Repeat
    bigint_Random{bits,prime}
    ; -- sicherstellen, das die Zufallszahl im oberen zahlenbereich liegt
    erstes_bit.w = #PREC_DIGITS - 1 - (bits/16)
    prime\zahl[erstes_bit] = (prime\zahl[erstes_bit] OR %00001000)
    ; -- testen ob ungerade, wenn nicht: ungerade machen
    If NOT (prime\zahl[#PREC_DIGITS-1] & $00000001) Then prime\zahl[#PREC_DIGITS-1] = (prime\zahl[#PREC_DIGITS-1] | $00000001)
    ; -- testen ob durch 5 teilbar, wenn ja: um zwei erhoehen
    If (prime\zahl[#PREC_DIGITS-1] & $00000005) Then prime\zahl[#PREC_DIGITS-1] = (prime\zahl[#PREC_DIGITS-1] | $00000007)
    !cout{"trying",bigint_AsString{prime}}
  Until Fermat_Test{prime,1}

  ; -- 3.Methode: eine Zufallszahl erzeugen, auf kleine PZ testen und anschliessend um 2 erhoehen,
  ; -- bis sie Prim ist
  ; -- bigint_Random{bits,prime}
  ; -- RSA_MillerRabinPrim{0.07, prime,*p.bigint}
  CopyType prime,*p
End Statement


Statement RSA_GetRandomPrime{bits.w,*p.bigint}
DEFTYPE.l zeilen,zufall

  If #USE_PRECALCULATED_PRIMES<>0
    fid.l = file_Open{"blitz3:sourcecodes/includes/PE/RSA_primelist_384.txt",#file_read}
    If fid<>-1
      file_Cache{fid}
      ; -- Ermitteln der Anzahl von Primzahlen
      zeilen = 0 : _lof.l = file_GetLength{fid}
      Repeat
        a$ = file_ReadLine{fid}
        If a$<>"" Then zeilen + 1
      Until file_GetSeekPos{fid} = _lof
      ; -- zufaellige auswahl zweier Zahlen
      zufall = Int(Rnd(zeilen-1))
      file_Seek{fid,0} : zeilen = 0
      Repeat
        a$ = file_ReadLine{fid}
        If a$<>""
          If zeilen = zufall Then p$ = a$ : file_Seek{fid,_lof}
          zeilen + 1
        EndIf
      Until file_GetSeekPos{fid} = _lof
      file_Close{fid}
      !cout{zufall,"   ",p$," erzeuge bigint"}
      bigint_Dec2Big{p$,*p}
      !cout{bigint_AsString{*p}}
    Else
      !Dialog{"Primzahlenliste nicht verfï¿½gbar."}
    EndIf
  Else
    RSA_GeneratePrime{bits,*p}
  EndIf
End Statement



Statement RSA_GenerateKeys{bits.w}
DEFTYPE.bigint p,q,N,e,d,phi,kphi1,kphi2,encrypted

  ; -- get long primes from precalculated file ...
  If #USE_PRECALCULATED_PRIMES<>0
    !cout{"\\__THIS_FUNCTION: ignoring <bits="+Str$(bits)+">, as #USE_PRECALCULATED_PRIMES is set."}
    fid.l = file_Open {"blitz3:sourcecodes/includes/PE/RSA_primelist_384.txt",#file_read}
    If fid<>-1 ; -- ermitteln der Anzahl von Primzahlen
      p1$ = file_ReadLine{fid} ;: t$ = file_readline{fid}
      q1$ = file_ReadLine{fid}
      file_Close{fid}
      bigint_Dec2Big{p1$,p}
      bigint_Dec2Big{q1$,q}
    Else ; -- or generate them by own
      RSA_GeneratePrime{bits,p}
      RSA_GeneratePrime{bits,q}
    EndIf
  Else
    RSA_GeneratePrime{bits,p}
;  !cout{"MOD:   MUL:    DIV:   SUB:   ADD: "}
;  !cout{debug_mod,debug_mul,debug_div,debug_sub,debug_add}
    RSA_GeneratePrime{bits,q}
;  debug_mod = 0 : debug_div = 0 : debug_mul = 0 : debug_sub = 0 : debug_add = 0
;  !cout{"MOD:   MUL:    DIV:   SUB:   ADD: "}
;  !cout{debug_mod,debug_mul,debug_div,debug_sub,debug_add}
  EndIf
  ; -- Primes found ---------------------------

  ; -- calculate Keys
  !cout{"\\__THIS_FUNCTION: - p [2^"+Str$(bits)+"]   = ",bigint_AsString{p,#bigint_Dec}};,"is prime",Fermat_Test{p,1}}
  !cout{"\\__THIS_FUNCTION: - q [2^"+Str$(bits)+"]   = ",bigint_AsString{q,#bigint_Dec}};,"is prime",Fermat_Test{q,1}}
  bigint_Mul{p,q,N}       : !cout{"\\__THIS_FUNCTION: - Modulus  N = ",bigint_AsString{N,#bigint_Dec}}
  bigint_Phi{p,q,phi}     : !cout{"\\__THIS_FUNCTION: - phi(N)     = ",bigint_AsString{phi,#bigint_Dec}}
  bigint_Int2Big{65537,e} : !cout{"\\__THIS_FUNCTION: - oeffentl.E = ",bigint_AsString{e,#bigint_Dec}}

  !cout{"\\__THIS_FUNCTION: berechne multiplikative Inverse"}
  debug_mod = 0 : debug_div = 0 : debug_mul = 0 : debug_sub = 0 : debug_add = 0
  bigint_euklid{e,phi,d}
  !cout{"\\__THIS_FUNCTION: - d          = ",bigint_AsString{d,#bigint_Dec}}
  !cout{"\\__THIS_FUNCTION: MOD:   MUL:    DIV:   SUB:   ADD: "}
  !cout{"\\__THIS_FUNCTION: ",debug_mod,debug_mul,debug_div,debug_sub,debug_add}
  !cout{"\\n\\__THIS_FUNCTION: Ready."}
End Statement
 







Function.s RSA_EncryptText{message$,*e.bigint,*N.bigint}
DEFTYPE.w i,teil
DEFTYPE.bigint wert,cipher,expo,modulus

  CopyType *e, expo
  CopyType *N, modulus

  cip$ = ""
  For i = 1 To Len(message$)
    teil = Asc(Mid$(message$,i,1))
    bigint_Int2Big{teil,wert}
    bigint_ExpMod{wert,expo,modulus,cipher}
    cip$ + Str$(bigint_Big2Long {cipher})+ "#"
    ;!cout{"encoding ",teil," -> ",bigint_Big2Long{cipher}}
  Next i
  Function Return cip$
End Function

CNIF #__include =0
Function.s RSA_DecryptText{ciphertext$,*e.bigint,*N.bigint}
DEFTYPE.w i
DEFTYPE.bigint wert,cipher,expo,modulus

  ; c hoch d mod N
  CopyType *e, expo
  CopyType *N, modulus

  For i = 1 To Len(ciphertext$)
    char$ = Mid$(ciphertext$,i,1)

    If char$ <> "#"
      cblock$ + char$
    Else
      bigint_Int2Big{Vallong(cblock$),cipher}
      bigint_ExpMod{cipher,expo,modulus,wert}
      cip$ + Chr$(bigint_Big2Long{wert})
      ;!cout{"decoding ",cblock$," -> ",bigint_Big2Long{wert}}
      cblock$ = ""
    EndIf
  Next i
  Function Return cip$
End Function
CEND


CNIF #__include =0
  WBStartup: WbToScreen 0 : NoCli : ScreenToFront_ Peek.l(Addr Screen(0))
  OPTIMIZE 7

; -- RSA-Schluesselgenerierung mit bits Bits
  bits.w = 384
  RSA_GenerateKeys{bits}
MouseWait
ScreenToBack_ Peek.l(Addr Screen(0))
End
 



; -- RSA-Demo. es werden mit vorbelegten Keys e,d,N Texte verschluesselt und entschluesselt
  DEFTYPE.bigint e,m,d,N
  code$ ="   "
  bigint_Int2Big{23449,N} : !cout{"converted to BigInt N = ",bigint_Big2Long{N}}
  bigint_Int2Big{4833,d}  : !cout{"converted to BigInt d = ",bigint_Big2Long{d}}
  bigint_Int2Big{65537,e} : !cout{"converted to BigInt e = ",bigint_Big2Long{e}}

  message$ = "Vasili"
  !cout{"Encrypting String:",message$,"..."}
  eclock_Start{1000}
  code$ = RSA_EncryptText{message$,e,N} : time.q = eclock_Stop{} / 1000.0
  !cout{"encrypted by RSA to:",code$,"; encryption time",time,"secs"}
  !cout{"Decrypting Cipher:",code$,"..."}
  klartext$ = RSA_DecryptText{code$,d,N} : time.q = eclock_Stop{} / 1000.0
  !cout{"decrypted from RSA to:",klartext$,"; decryption time",time,"secs"}
  !cout{"\\nReady"}
MouseWait
ScreenToBack_ Peek.l(Addr Screen(0))
End

; -- Erzeugung von 10 Primazahlenpaaren mit bits- Bits
  DEFTYPE.l bits
  bits = 32
  !cout{"Es werden 10 Primzahlenpaare mit einer Lï¿½nge von jeweils "+Str$(bits)+" bit gesucht..."}
  DEFTYPE.bigint prime
  For j.w = 1 To 10
    eclock_Start{1}
    For i.w = 1 To 2
      RSA_GeneratePrime{bits,p.bigint}
    Next i
    otime.q = eclock_Stop{}
    !cout{j,"tes Primzahlenpaar gefunden, Zeit: ",Int(otime)," sek"}
    time.q + otime
  Next j
  durchs.q = time / j
  !cout{"\\ndurchschnittliche Zeit pro Paar: ",Int(durchs)," sek"}
  MouseWait
  ScreenToBack_ Peek.l(Addr Screen(0))
End
 


CEND

primelist:
Data.l         2,   3,   5,   7,  11,  13,  17,  19,  23,  29
Data.l        31,  37,  41,  43,  47,  53,  59,  61,  67,  71
Data.l        73,  79,  83,  89,  97, 101, 103, 107, 109, 113
Data.l       127, 131, 137, 139, 149, 151, 157, 163, 167, 173
Data.l       179, 181, 191, 193, 197, 199, 211, 223, 227, 229
Data.l       233, 239, 241, 251, 257, 263, 269, 271, 277, 281
Data.l       283, 293, 307, 311, 313, 317, 331, 337, 347, 349
Data.l       353, 359, 367, 373, 379, 383, 389, 397, 401, 409
Data.l       419, 421, 431, 433, 439, 443, 449, 457, 461, 463
Data.l       467, 479, 487, 491, 499, 503, 509, 521, 523, 541
Data.l       547, 557, 563, 569, 571, 577, 587, 593, 599, 601
Data.l       607, 613, 617, 619, 631, 641, 643, 647, 653, 659
Data.l       661, 673, 677, 683, 691, 701, 709, 719, 727, 733
Data.l       739, 743, 751, 757, 761, 769, 773, 787, 797, 809
Data.l       811, 821, 823, 827, 829, 839, 853, 857, 859, 863
Data.l       877, 881, 883, 887, 907, 911, 919, 929, 937, 941
Data.l       947, 953, 967, 971, 977, 983, 991, 997,1009,1013
Data.l      1019,1021,1031,1033,1039,1049,1051,1061,1063,1069
Data.l      1087,1091,1093,1097,1103,1109,1117,1123,1129,1151
Data.l      1153,1163,1171,1181,1187,1193,1201,1213,1217,1223
Data.l      1229,1231,1237,1249,1259,1277,1279,1283,1289,1291
Data.l      1297,1301,1303,1307,1319,1321,1327,1361,1367,1373
Data.l      1381,1399,1409,1423,1427,1429,1433,1439,1447,1451
Data.l      1453,1459,1471,1481,1483,1487,1489,1493,1499,1511
Data.l      1523,1531,1543,1549,1553,1559,1567,1571,1579,1583
Data.l      1597,1601,1607,1609,1613,1619,1621,1627,1637,1657
Data.l      1663,1667,1669,1693,1697,1699,1709,1721,1723,1733
Data.l      1741,1747,1753,1759,1777,1783,1787,1789,1801,1811
Data.l      1823,1831,1847,1861,1867,1871,1873,1877,1879,1889
Data.l      1901,1907,1913,1931,1933,1949,1951,1973,1979,1987
Data.l      1993,1997,1999,2003,2011,2017,2027,2029,2039,2053
Data.l      2063,2069,2081,2083,2087,2089,2099,2111,2113,2129
Data.l      2131,2137,2141,2143,2153,2161,2179,2203,2207,2213
Data.l      2221,2237,2239,2243,2251,2267,2269,2273,2281,2287
Data.l      2293,2297,2309,2311,2333,2339,2341,2347,2351,2357
Data.l      2371,2377,2381,2383,2389,2393,2399,2411,2417,2423
Data.l      2437,2441,2447,2459,2467,2473,2477,2503,2521,2531
Data.l      2539,2543,2549,2551,2557,2579,2591,2593,2609,2617
Data.l      2621,2633,2647,2657,2659,2663,2671,2677,2683,2687
Data.l      2689,2693,2699,2707,2711,2713,2719,2729,2731,2741
Data.l      2749,2753,2767,2777,2789,2791,2797,2801,2803,2819
Data.l      2833,2837,2843,2851,2857,2861,2879,2887,2897,2903
Data.l      2909,2917,2927,2939,2953,2957,2963,2969,2971,2999
Data.l      3001,3011,3019,3023,3037,3041,3049,3061,3067,3079
Data.l      3083,3089,3109,3119,3121,3137,3163,3167,3169,3181
Data.l      3187,3191,3203,3209,3217,3221,3229,3251,3253,3257
Data.l      3259,3271,3299,3301,3307,3313,3319,3323,3329,3331
Data.l      3343,3347,3359,3361,3371,3373,3389,3391,3407,3413
Data.l      3433,3449,3457,3461,3463,3467,3469,3491,3499,3511
Data.l      3517,3527,3529,3533,3539,3541,3547,3557,3559,3571
Data.l      3581,3583,3593,3607,3613,3617,3623,3631,3637,3643
Data.l      3659,3671,3673,3677,3691,3697,3701,3709,3719,3727
Data.l      3733,3739,3761,3767,3769,3779,3793,3797,3803,3821
Data.l      3823,3833,3847,3851,3853,3863,3877,3881,3889,3907
Data.l      3911,3917,3919,3923,3929,3931,3943,3947,3967,3989
Data.l      4001,4003,4007,4013,4019,4021,4027,4049,4051,4057
Data.l      4073,4079,4091,4093,4099,4111,4127,4129,4133,4139
Data.l      4153,4157,4159,4177,4201,4211,4217,4219,4229,4231
Data.l      4241,4243,4253,4259,4261,4271,4273,4283,4289,4297
Data.l      4327,4337,4339,4349,4357,4363,4373,4391,4397,4409
Data.l      4421,4423,4441,4447,4451,4457,4463,4481,4483,4493
Data.l      4507,4513,4517,4519,4523,4547,4549,4561,4567,4583
Data.l      4591,4597,4603,4621,4637,4639,4643,4649,4651,4657
Data.l      4663,4673,4679,4691,4703,4721,4723,4729,4733,4751
Data.l      4759,4783,4787,4789,4793,4799,4801,4813,4817,4831
Data.l      4861,4871,4877,4889,4903,4909,4919,4931,4933,4937
Data.l      4943,4951,4957,4967,4969,4973,4987,4993,4999,5003
Data.l      5009,5011,5021,5023,5039,5051,5059,5077,5081,5087
Data.l      5099,5101,5107,5113,5119,5147,5153,5167,5171,5179
Data.l      5189,5197,5209,5227,5231,5233,5237,5261,5273,5279
Data.l      5281,5297,5303,5309,5323,5333,5347,5351,5381,5387
Data.l      5393,5399,5407,5413,5417,5419,5431,5437,5441,5443
Data.l      5449,5471,5477,5479,5483,5501,5503,5507,5519,5521
Data.l      5527,5531,5557,5563,5569,5573,5581,5591,5623,5639
Data.l      5641,5647,5651,5653,5657,5659,5669,5683,5689,5693
Data.l      5701,5711,5717,5737,5741,5743,5749,5779,5783,5791
Data.l      5801,5807,5813,5821,5827,5839,5843,5849,5851,5857
Data.l      5861,5867,5869,5879,5881,5897,5903,5923,5927,5939
Data.l      5953,5981,5987,6007,6011,6029,6037,6043,6047,6053
Data.l      6067,6073,6079,6089,6091,6101,6113,6121,6131,6133
Data.l      6143,6151,6163,6173,6197,6199,6203,6211,6217,6221
Data.l      6229,6247,6257,6263,6269,6271,6277,6287,6299,6301
Data.l      6311,6317,6323,6329,6337,6343,6353,6359,6361,6367
Data.l      6373,6379,6389,6397,6421,6427,6449,6451,6469,6473
Data.l      6481,6491,6521,6529,6547,6551,6553,6563,6569,6571
Data.l      6577,6581,6599,6607,6619,6637,6653,6659,6661,6673
Data.l      6679,6689,6691,6701,6703,6709,6719,6733,6737,6761
Data.l      6763,6779,6781,6791,6793,6803,6823,6827,6829,6833
Data.l      6841,6857,6863,6869,6871,6883,6899,6907,6911,6917
Data.l      6947,6949,6959,6961,6967,6971,6977,6983,6991,6997
Data.l      7001,7013,7019,7027,7039,7043,7057,7069,7079,7103
Data.l      7109,7121,7127,7129,7151,7159,7177,7187,7193,7207
Data.l      7211,7213,7219,7229,7237,7243,7247,7253,7283,7297
Data.l      7307,7309,7321,7331,7333,7349,7351,7369,7393,7411
Data.l      7417,7433,7451,7457,7459,7477,7481,7487,7489,7499
Data.l      7507,7517,7523,7529,7537,7541,7547,7549,7559,7561
Data.l      7573,7577,7583,7589,7591,7603,7607,7621,7639,7643
Data.l      7649,7669,7673,7681,7687,7691,7699,7703,7717,7723
Data.l      7727,7741,7753,7757,7759,7789,7793,7817,7823,7829
Data.l      7841,7853,7867,7873,7877,7879,7883,7901,7907,7919
Data.l      7927,7933,7937,7949,7951,7963,7993,8009,8011,8017
Data.l      8039,8053,8059,8069,8081,8087,8089,8093,8101,8111
Data.l      8117,8123,8147,8161,8167,8171,8179,8191,8209,8219
Data.l      8221,8231,8233,8237,8243,8263,8269,8273,8287,8291
Data.l      8293,8297,8311,8317,8329,8353,8363,8369,8377,8387
Data.l      8389,8419,8423,8429,8431,8443,8447,8461,8467,8501
Data.l      8513,8521,8527,8537,8539,8543,8563,8573,8581,8597
Data.l      8599,8609,8623,8627,8629,8641,8647,8663,8669,8677
Data.l      8681,8689,8693,8699,8707,8713,8719,8731,8737,8741
Data.l      8747,8753,8761,8779,8783,8803,8807,8819,8821,8831
Data.l      8837,8839,8849,8861,8863,8867,8887,8893,8923,8929
Data.l      8933,8941,8951,8963,8969,8971,8999,9001,9007,9011
Data.l      9013,9029,9041,9043,9049,9059,9067,9091,9103,9109
Data.l      9127,9133,9137,9151,9157,9161,9173,9181,9187,9199
Data.l      9203,9209,9221,9227,9239,9241,9257,9277,9281,9283
Data.l      9293,9311,9319,9323,9337,9341,9343,9349,9371,9377
Data.l      9391,9397,9403,9413,9419,9421,9431,9433,9437,9439
Data.l      9461,9463,9467,9473,9479,9491,9497,9511,9521,9533
Data.l      9539,9547,9551,9587,9601,9613,9619,9623,9629,9631
Data.l      9643,9649,9661,9677,9679,9689,9697,9719,9721,9733
Data.l      9739,9743,9749,9767,9769,9781,9787,9791,9803,9811
Data.l      9817,9829,9833,9839,9851,9857,9859,9871,9883,9887
Data.l      9901,9907,9923,9929,9931,9941,9949,9967,9973
 

