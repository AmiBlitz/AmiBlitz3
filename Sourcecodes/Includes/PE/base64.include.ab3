; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "HTTPGet"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 102400
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 31
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 3
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: base64.include                                                        /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 03/06/2010                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
  SYNTAX 2
  OPTIMIZE 5
  XINCLUDE "file.include.ab3"
CEND


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = base64_Decode {a$}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ decode BASE64 string to plain text                                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - a$    : ???                                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s base64_Decode{a$}
  b64$="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
  m$=""
  f$=""

  a$ = Replace$(a$,Chr$(13)+Chr$(10),"")
  l.l = Len(a$)

  cx$ = ""
  If Right$(a$,1) = "=" Then l = l - 2: flag.l = 1

  For decode.l = 1 To l
    x$ = Mid$(a$,decode,1)
    pos.l = Instr(b64$,x$)-1
    b$ = Bin$(pos)
    b$ = Right$(b$,6)
    cx$ = cx$ + b$
  Next

  If flag = 1
    numBits.l = 6 * (Len(a$)-2)
    rmdr.l = ( Int(numBits/8)+1 ) * 8 - numBits
    oddChar$ = Mid$(a$,Len(a$)-1,1)
    pos =Instr(b64$, oddChar$)-1
    b$ = Right$(Bin$(pos),6)
    b$ = Left$(b$,rmdr)
    cx$ = cx$ + b$
  End If

  l = Len(cx$)

  For decode = 1 To l Step 8
    b$ = Mid$(cx$,decode,8)
    res.l = 0
    For y.l = 0 To 7
      bit.l =Asc( Mid$(b$,8-y,1)) - 48
      If bit <> 0
        res2. l = (2^y * bit)
        res = res OR res2
      End If
    Next
    m$ = m$ + Chr$(res)
  Next
  Function Return m$
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = base64_Encode {a$}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ encode plain text to BASE64 string                                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - a$    : ???                                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s base64_Encode{a$}
  b64$ = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
  m$ = ""
  f$ = ""

  largo.l = Len(a$) : cx$ = ""
  For decode.l = 1 To largo
    x$ = Mid$(a$,decode,1)
    Tx.b = Asc(x$)
    b$ = Bin$(Tx)
    b$ = Right$(b$,8)
    cx$ = cx$ + b$
  Next

  largo = Len(cx$)
  For decode.l = 1 To largo Step 6
    x$ = Mid$(cx$,decode,6)
    bbb.l = Len(x$)
    bbbx.l = 6 - bbb
    If bbbx > 0 Then f$ = "="
    x$ = x$ + Left$("00000000",bbbx)
    res.l = 0

    For y.b = 1 To 6
      by$ = Mid$(x$,7-y,1)
      res = res + (2^(y-1) * Vallong(by$))
    Next
    m$ = m$ + Mid$(b64$,res+1,1) + f$
  Next decode

  Function Return m$
End Function


;
;Function.s EncodeBase64{strInput.s}
;
;   cstrBase64$ = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
;
;   Dim arrByte.w(3)
;   Dim arrChar.w(4)
;   DEFTYPE.w intLen
;   DEFTYPE.w intDelta
;   DEFTYPE.l i,j
;
;
;   ;Zeichentabelle in Byte-Array ablegen
;   Dim arrChars64.w(Len(cstrBase64$))
;   For i = 0 To Len(cstrBase64$)-1
;     arrChars64(i) = Mid$(cstrBase64$,i,1)
;   Next i
;
;   ;Ldnge ermitteln und pr|fen
;   intLen = Len(strInput)
;   If intLen = 0 Then Function Return ""
;
;   ;Input in Byte-Array ablegen
;   Dim arrInput.w(intLen)
;   For i = 0 To intLen - 1
;     arrInput(i) = Mid$(strInput,i,1)
;   Next i
;
;   ;Wenn Input nicht glatt durch 3 teilbar...
;   intDelta = intLen MOD 3
;   If intDelta > 0 Then
;      ;...Input-Array auf die ndchste durch 3 teilbare Zahl erweitern
;      intLen = ((intLen / 3) + 1) * 3
;      Dim keep arrInput (intLen - 1)
;   End If
;
;   ;Ergebnis-Array ist im 1/3 laenger als das Input-Array
;   arrOutput_lgth = (4 * (intLen / 3)) - 1
;   Dim keep arrOutput(arrOutput_lgth)
;
;   ;Schleife |ber Input-Array in 3er-Schrittweite...
;   For i = 0 To intLen - 1 Step 3
;
;      ;3 Byte lesen
;      arrByte(1) = arrInput(i)
;      arrByte(2) = arrInput(i + 1)
;      arrByte(3) = arrInput(i + 2)
;
;      ;6 Bit extrahieren
;      arrChar(1) = Int(arrByte(1) / 4)
;      arrChar(2) = (arrByte(1) AND 3) * 16 + Int(arrByte(2) / 16)
;      arrChar(3) = (arrByte(2) AND 15) * 4 + Int(arrByte(3) / 64)
;      arrChar(4) = arrByte(3) AND 63
;
;      ;Laufvariable um 1/3 erhvhen
;      j = (i / 3) * 4
;
;      ;6-Bit-Wert im Output-Array durch Base64-Array-Wert ersetzen
;      arrOutput(j) = arrChars64(arrChar(1))
;      arrOutput(j + 1) = arrChars64(arrChar(2))
;      arrOutput(j + 2) = arrChars64(arrChar(3))
;      arrOutput(j + 3) = arrChars64(arrChar(4))
;   Next
;
;   ;\berzdhlige Bytes im Output mit F|ll-Byte "=" belegen
;   Select intDelta
;      Case 1 ;2 Bit
;         arrOutput(arrOutput_lgth) = 61
;         arrOutput(arrOutput_lgth - 1) = 61
;      Case 2 ;4 Bit
;         arrOutput(arrOutput_lgth) = 61
;   End Select
;
;   ;Output-Array in String umwandeln
;   For i = 0 To in arrOutput_lgth
;    EncodeBase64$ + Str$(arrOutput(i))
;   Next i
;   Function Return EncodeBase64$
;End Function
;
;





; build in demo:
CNIF #__include=0
outputfile.s = "ram:test.dat"
MaxLen filedata.s = 4096
If NumPars>0 Then filename.s = Par$(1)
If filename = ""
  filename.s = RTEZLoadFile("Bitte Datei auswaehlen","sys:base64_code.txt")
EndIf

fid.l = file_Open{filename.s,#file_read}
filedata.s = SPACE$(file_GetLength{fid})

If fid<>-1
  file_ReadMem{fid,&filedata,file_GetLength{fid}}
  dec_data.s = base64_Decode{filedata}
  enc_data.s = base64_Encode{dec_data}
  NPrint "loaded data ("+Str$(Len(filedata))+","+Str$(file_GetLength{fid})+" bytes):"
  NPrint filedata+"<<"
  NPrint ""
  NPrint "base64-Decoded data:"
  NPrint dec_data+"<<"
  NPrint ""
  NPrint "base64-Encoded data:"
  NPrint enc_data+"<<"
  NPrint ""

End If
End
CEND

