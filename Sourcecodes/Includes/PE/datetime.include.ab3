; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Workbench:Programme/proBonds"
; ExeFile         = ""
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 32000
; MakeSmallest    = 0
; FuncOptimize    = 0
; Version         = 2.50.0
; NumberOfBuilds  = 257
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 1
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 15
; CursorColumn    = 1
; LabelSearch     = "wz_add"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 25
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 50
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 25
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
; DateAsDay     : liefert aus einem LongWert der Form yyyymmtt den Wochentag als String
; DateAsLong    : macht aus einem Datumstring "30.12.2005" einen Longwert 20051230
; DateAsString  : macht aus einem Longwert einen Datumstring
;

; ----- fuer Datumsroutinene
#DATUM_MTJ      = 4
#DATUM_TMJ      = 5
#DATUM_JJMMTT   = 0
#DATUM_TTMMJJ   = 1
#DATUM_TTMMJJJJ = 2
#DATUM_TTMM     = 3
#DATUM_DAYS     = 6
#DATUM_MONTHS   = 7
#DATUM_YEARS    = 8


Dim dt_monate$(12)
Restore dt_monate
For kal.b = 1 To 12
  Read dt_monate$(kal)
  dt_monatestr$ + dt_monate$(kal) + "\\0a"
Next kal
dt_monatestr$ = StripTrail$(dt_monatestr$,10)


Function.s Date_Years{}
  DateFormat 0 ; dd/mm/yyyy
  mydate$ = Date$(SystemDate)
  Function Return Mid$(mydate$,7,4)
End Function

Function.s Date_Months{}
  DateFormat 0 ; dd/mm/yyyy
  mydate$ = Date$(SystemDate)
  Function Return Mid$(mydate$,4,2)
End Function

Function.s Date_Days{}
  DateFormat 0 ; dd/mm/yyyy
  mydate$ = Date$(SystemDate)
  Function Return Left$(mydate$,2)
End Function

Function.s Date_Today{}
  DateFormat 0 ; dd/mm/yyyy
  mydate$ = Date$(SystemDate)
  Function Return mydate$
End Function




Function.s Date_GetAsDay{datum.l}
 ; Returns the day of the week.
 ; day, month & year are integers i.e. 15 04 2004
  j$  = Left$(d$,4)  : year.l = Val(j$)
  m$  = Mid$(d$,5,2) : month.l = Val(m$)
  t$  = Right$(d$,2) : day.l = Val(t$)

  a.l = (14 - month)/12
  y.l = year - a
  m.l = month + (12 * a) - 2
  d.l = (day + y + (y/4) - (y/100) + (y/400) + ((31*m)/12))MOD 7  ;Ooouch!
  Select d
    Case 0 : Wd$="Sunday"
    Case 1 : Wd$="Monday"
    Case 2 : Wd$="Tuesday"
    Case 3 : Wd$="Wednesday"
    Case 4 : Wd$="Thursday"
    Case 5 : Wd$="Friday"
    Case 6 : Wd$="Saturday"
    Default
      Wd$ = ""
  End Select
  Function Return Wd$
End Function



;
; ------------------------------------------------------------
; DateSTRING - wandelt ein longdatum in einen string um
; Par Info
; 1.  value : das datum als longwert
; 2.  mode  : format des datumstrings [ttmm,jjmmtt,ttmmjj]
; ------------------------------------------------------------
;
Function.s Date_GetAsString{value.l,@mode.b}

  Format ""
  d$  = Str$(value)
  j$  = Left$(d$,4)
  m$  = Mid$(d$,5,2)
  t$  = Right$(d$,2)

  Select mode
  Case #DATUM_TTMM
    datum$ = t$ + "." + m$ + "."
  Case #DATUM_JJMMTT
    datum$ = j$ + "." + m$ + "."  + t$
  Case #DATUM_TTMMJJ
    datum$ = t$ + "." + m$ + "."  + Right$(j$,2)
  Case #DATUM_TTMMJJJJ
    datum$ = t$ + "." + m$ + "."  + j$
  Default
    datum$ = t$ + "." + m$ + "."  + j$
  End Select
  Function Return datum$
End Function


; ------------------------------------------------------------
; DateLONG - gibt das datum als longwert zurueck
; Par Info
; 1.  d$ : datum als string mit/ohne punkt
; ------------------------------------------------------------
;
Function.l Date_GetAsLong{d$,@mode.l}
SHARED dt_monate$()

  ; -- check if format YYYY-MM-DD and convert to normal one DD.MM.YYYY
  If Vallong(d$) > 1000
    d$ = Right$(d$,2)+"."+Mid$(d$,6,2)+"."+Left$(d$,4)
  EndIf

  ;-- nach Monatsbezeichnung im String suchen
  Dim zlong.l(2)
  Format "" : found.l = 0
  CaseSense Off
  For i.l = 1 To 12
    If Instr(d$, Left$(dt_monate$(i),3)) > 0
    ;  !cout{"d$ = ",d$," !>",Left$(dt_monate$(i),3),"<"}
      found = i
    EndIf
  Next i

  Select found
  Case 0 ; aufsplitten der Zahlen in einzelne Werte
    l.l  = Len(d$) : quit.b = False
    i.l = 0 : y.l = 0
    While quit = False
      a$ = Mid$(d$,Len(d$)-i,1) : i + 1
      If ( (a$ = ".") OR (a$="-") OR (a$="/")) AND (y < 2)
        zlong(y) = Vallong(Right$(d$,i-1))
        d$ = Left$(d$,Len(d$)-i)
        i = 0 : y + 1
      Else
        If (y = 2)
          zlong(y) = Vallong(d$)
          quit = True
        Else
          If (i > 20) Then Function Return 0
        EndIf
      EndIf
    Wend

    If mode = #DATUM_MTJ
      swap_.l= zlong(1)
      zlong(1) = zlong(2)
      zlong(2) = swap_
    EndIf

    If (zlong(0) > 70) AND (zlong(0) < 100)
      zlong(0) = 1900 + zlong(0)
    Else
      If zlong(0) < 70 Then zlong(0) = 2000 + zlong(0)
    EndIf

    If (zlong(0)<1900) OR (zlong(0)>2200) OR (zlong(1)=0) OR (zlong(1)>12) OR (zlong(2)=0) OR (zlong(2)>32) Then Function Return 0

  Default

    zlong(1) = found
    If Val(StrRight(StripTrail$(d$,32),4)) > 1000
      zlong(0) = Val(StrRight(d$,4))
    Else
      zlong(0) = Val(StrRight(d$,2))
      If zlong(0)<70 Then zlong(0)+2000 Else zlong(0)+1900
    EndIf
    zlong(2) = Val(StrLeft(d$,2))
  End Select

  Select mode
  Case #DATUM_DAYS
    Function Return zlong(2)

  Case #DATUM_MONTHS
    Function Return zlong(1)

  Case #DATUM_YEARS
    Function Return zlong(0)

  Default
    datum.l = zlong(0)
    datum = datum * 10000
    datum = datum + zlong(1) * 100 + zlong(2)
    Function Return datum

  End Select

End Function


dt_monate:
Data$ "Januar","February","March","April","May","June","July","August","September","October","November","December"




CNIF #__include = 0
  Syntax 4
  optimize 6
  #USE_WIZARD = 0
  WbToScreen 0

  DateFormat 0
  Format ""
  da$ = Date$(SystemDate)
  da2$ = StrChg(da$,"/",".")
  NPrint "GetAsLong = ", Date_GetAsLong{da2$}
  NPrint Date_GetAsDay{Date_GetAsLong{da$}}
  NPrint Date_GetAsLong{da$}

  DateFormat 0
  Format ""
  da$ = Date$(SystemDate)
  da2$ = StrChg(da$,"/",".")
  dummy.l = EZRequest(da2$,"OK")
  dummy.l = EZRequest(Str$(Date_GetAsLong{da2$}),"OK")
CEND
