; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Jessica:Programme/proBonds"
; ExeFile         = ""
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 1
; Max MUIObject   = 1
; Max PTModule    = 1
; Max AsyncReq    = 1
; Max Req-Lib     = 1
; Max GTMenuList  = 24
; Max Console     = 1
; Max TCPSock     = 1
; Max XBSound     = 1
; Max Chunky      = 1
; Max File        = 24
; Max GadgetList  = 1
; Max Queue       = 1
; Max Screen      = 5
; Max Shape       = 1
; Max CopList     = 1
; Max Sprite      = 1
; Max Stencil     = 1
; Max Module      = 1
; Max Window      = 50
; Max Anim        = 1
; Max Sound       = 1
; Max Bank        = 1
; Max Buffer      = 1
; Max BitMap      = 1
; Max Slice       = 1
; Max Page        = 1
; Max Tape        = 1
; Max IntuiFont   = 24
; Max MedModule   = 1
; Max Palette     = 1
; Max MenuList    = 1
; Max BlitzFont   = 1
; Max GTList      = 24
; Max ChunkyBuffer= 2
; /XTRA

;
; The main procedures for Prefs2000, (C) Robert Hutchinson 1999!
; This is the guts of the program,.. Check the docs!
;

NEWTYPE .prefs
  Info.s
End NEWTYPE

Dim List Prefs.prefs(300)  ; make as big as you like, wont use the mem until you allocate entries

BasePointer.w=0            ; Position in the list
BaseCount.w=0            ; Entries in the list

;--- Function definitions
;
;

Function.b NewPrefs{TextLine$,value$}
  SHARED Prefs()

  dummy.b = LastItem(Prefs())
  If AddItem(Prefs())       ; If there is space in our list (IE if not over 300), then add the entry
    Prefs()\Info=TextLine$+" = "+value$         ; Insert value
;    BaseCount+1
    Function Return True
  Else Function Return False
  EndIf

End Function



Function.b ReadPrefs{PrefsFileLoc$}
  SHARED Prefs()

  If Exists(PrefsFileLoc$)>0
    If ReadFile(3,PrefsFileLoc$)  ; Attempt read lock on specified file
      FileInput 3 : lf_.l = Lof(3)

      ClearList Prefs()           ; Prepare linked list.
      ResetList Prefs()

      Repeat
        If AddItem(Prefs())       ; If there is space in our list (IE if not over 300), then add the entry
          Prefs()\Info=Edit$(500)        ; Grab values
          BaseCount.w + 1
        Else
          Nuked$=Edit$(500)       ; Just dump entries over the amount specifed in: DIM Prefs.prefs(300)
        EndIf
      Until Loc(3) >= lf_
      CloseFile 3
      Function Return True
    Else
      CloseFile 3
      Function Return False
    EndIf
  Else
    Function Return False
  EndIf

End Function



Function.s SearchPrefs{SearchString$}
  SHARED Prefs()
  SHARED BasePointer
  BasePointer.w=0

  ;--- Prepare list
  ;
  ResetList Prefs()

    ;--- Our search algorithm
    ;
    While NextItem(Prefs())
      BasePointer+1
      If NoCont.w<>1                  ; If we havent found a match already
        If Left$(Prefs()\Info,1)<>Chr$(59) ; If not a semicolon (commented line)
          If Instr(Prefs()\Info,SearchString$)>0 ; Do we have a match??
            For TMP.w=0 To Len(Prefs()\Info)
              If GotMatch.w<>1
                If Mid$(Prefs()\Info,TMP,1)=Chr$(61) ; Do we have an equals symbol
                  Match$=Mid$(Prefs()\Info,TMP+2,500) ; get our value
                  GotMatch=1
                  NoCont=1
                EndIf
              EndIf
            Next
            GotMatch=0
          EndIf
        EndIf
      EndIf
    Wend
    NoCont=0

  Function Return Match$

End Function

Statement ReplaceEntry{SearchString$,Value$}
  SHARED Prefs()
  SHARED BasePointer
  BasePointer.w=0

  ;--- Prepare list for parsing!
  ;
  ResetList Prefs()

    ;--- Our search algorithm
    ;
    While NextItem(Prefs())
      BasePointer+1
      If NoCont.w<>1                  ; If we havent found a match already
        If Left$(Prefs()\Info,1)<>Chr$(35) ; If not a # (commented line)
          If Instr(Prefs()\Info,SearchString$+" ")>0 ; Do we have a match??
            For TMP.w=0 To Len(Prefs()\Info)
              If GotMatch.w<>1
                If Mid$(Prefs()\Info,TMP,1)=Chr$(61) ; Do we have an equals symbol

                   Front$=Left$(Prefs()\Info,TMP)
                  NFront$=Front$+Chr$(32)+Value$

                    Prefs()\Info=NFront$

                  GotMatch=1
                  NoCont=1

                EndIf
              EndIf
            Next
            GotMatch=0
          EndIf
        EndIf
      EndIf
    Wend
    If NoCont = 0
      dummy.b = NewPrefs{SearchString$,Value$}
    Else
      NoCont=0
    EndIf

End Statement


Function.b SavePrefs{PrefsFileLoc$}
  SHARED Prefs()

  If WriteFile(3,PrefsFileLoc$)  ; Attempt write lock on specified file
    FileOutput 3

    ResetList Prefs()

    While NextItem(Prefs())
      NPrint Prefs()\Info
    Wend

    CloseFile 3
    DefaultOutput
    Function Return True
  Else
    CloseFile 3
    DefaultOutput
    Function Return False
  EndIf

End Function


Statement NukePrefs{}
  SHARED Prefs()
  ClearList Prefs()
End Statement

