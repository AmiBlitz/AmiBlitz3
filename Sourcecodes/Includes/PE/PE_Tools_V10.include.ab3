; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "test"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 9
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 65535
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 31
; CursorColumn    = 28
; LabelSearch     = "dial"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max ChunkyBuffer= 2
; /XTRA
;
; INCLUDE: PE_TOOLS (c) 2006 Sven Droege
; ## prolence-Tools ##
;
; ## Version 1.00
;
; Hier sind zahlreiche nuetzliche Funktionen enthalten, die meine Projekte regelmaessig verwenden:
;
; Copy_WBPalette    : kopiert die Palette der WB auf einen eigenen Screen
; GetBestPen        : gibt die Farbnummer des Farbregisters zurueck das am besten zu den genannten RGB-Werten passt
; GetPen            : gibt die optimale Farbnummer fuer einige vordefinierte Farben zurueck
; DateAsDay     : liefert aus einem LongWert der Form yyyymmtt den Wochentag als String
; DateAsLong    : macht aus einem Datumstring "30.12.2005" einen Longwert 20051230
; DateAsString  : macht aus einem Longwert einen Datumstring
; GetDec            : gibt die 10er-Potenz eines Wertes zurueck: 1000 ergibt 3
; ParsLine          : gibt den gewuenschten Parameter eines Strings zurueck
; ParsNums          : gibt die Anzahl an Parametern eines Strings zurueck
;
;
;
; fixed Array dimension  tomsmart1 2013 02
; replaced reqtools commands with error.include functions  tomsmart1 2013 03
;
;
;CNIF @#WZ_TOOLS_VERSION = 0
;  INCDIR "BLITZ2:includes/prolence/"
;  XINCLUDE "WZ_Tools.ab3"
;CEND
;OPTIMIZE 4      ; only for testing  tomsmart1
;SYNTAX 6        ; only for testing  tomsmart1
XINCLUDE "error.include.ab3"     ; added to replace the reqtools commands  tomsmart1


#PE_TOOLS_VERSION = 1


; --- Fuer Dateiroutinen
#WORK = 8

; ----- fuer DAtumsroutinene
#DATUM_MTJ      = 4
#DATUM_TMJ      = 5
#DATUM_JJMMTT   = 0
#DATUM_TTMMJJ   = 1
#DATUM_TTMMJJJJ = 2
#DATUM_TTMM     = 3
#DATUM_DAYS     = 6
#DATUM_MONTHS   = 7
#DATUM_YEARS    = 8

; ---- Konstanten f|r Farben
#COLOR_WHITE      =  0
#COLOR_BLACK      =  1
#COLOR_GREEN      =  2
#COLOR_RED        =  3
#COLOR_BLUE       =  4
#COLOR_YELLOW     =  5
#COLOR_DARKYELLOW = 11
#COLOR_DARKGRAY   = 12
#COLOR_LIGHTGRAY  =  6
#COLOR_GRAY       =  7
#COLOR_LIGHTBLUE  =  8
#COLOR_LIGHTRED   =  9
#COLOR_LIGHTGREEN = 10


NEWTYPE.fontinfo
  name.s
  ysize.w
  style.b:flags
  pen1.b:pen2:drawmode:pad
End NEWTYPE

Dim monate$(13)               ; replaced 12 with 13 because we need 1 to 12 and not 0 to 11  tomsmart1

NEWTYPE.rgbval
  R.l
  G.l
  B.l
End NEWTYPE


Restore monate
For kal.b = 1 To 12
  Read monate$(kal.b)
  monatestr$ + monate$(kal) + "\\0a"
Next kal
monatestr$ = StripTrail$(monatestr$,10)

monate:
Data$ "Januar","February","March","April","May","June","July","August","September","October","November","December"

Macro Dialog
  ;dummy.l = RTEZRequest("",`1,"_Ok")
  dummy.l = ask{`1,"Ok"," "}
End Macro



Function.s Date_Years{}
  DateFormat 0 ; dd/mm/yyyy
  mydate$ = Date$(SystemDate)
  Function Return Mid$(mydate$,7,4)
End Function

Function.s Date_Months{}
  DateFormat 0 ; dd/mm/yyyy
  mydate$ = Date$(SystemDate)
  Function Return Mid$(mydate$,4,2)
End Function

Function.s Date_Days{}
  DateFormat 0 ; dd/mm/yyyy
  mydate$ = Date$(SystemDate)
  Function Return Left$(mydate$,2)
End Function

 





; setzen der entsprechenden DrawModi fr Line Befehle
;
;
Macro SetLinePattern
  CNIF `0 = 2
      `1\LinePtrn = `2
      `1\Flags | #FRST_DOT
      `1\linpatcnt = 15
  CELSE
  CERR "Wrong number of parameters"
  CEND
End Macro



; testen ob ein Bit in \arith_mode gesetzt ist
;
;
Macro CheckArith
  (\arith_mode AND (`1)) = (`1)
End Macro

; testen ob ein Bit in \chart_mode gesetzt ist
;
;
Macro CheckMode
  (\chart_mode AND (`1)) = (`1)
End Macro


; setzt ein Bit in \chart_mode
;
;
Macro AddMode
  \chart_mode = (\chart_mode + (`1))
End Macro

Macro AddArith
  \arith_mode = (\arith_mode + (`1))
End Macro

; loescht ein Bit in \chart_mode
;
;
Macro SubMode
  \chart_mode = (\chart_mode - (`1))
End Macro

Macro SubArith
  \arith_mode = (\arith_mode - (`1))
End Macro

; *AB*-runden auf eine bestimmte Anzahl von *VOR*kommastellen
; Par  Info
; 1.   Abzurundende Zahl
Function.f Math_Round{t.f}
    Function Return ( t.f / 10.0 ) * 10.0
End Function


; Kaufmaennisches Runden auf best. Anzahl von *NACH*kommastellen
; Par  Info
; 1.   zurundende Zahl
Macro MathRoundCommercial
  Int((`1) * 100.0 + 0.5) / 100.0
End Macro

; maximieren von zwei uebergebenen werten
;
;
Macro MathMax
  If (`1)>(`2) Then `3=(`1) Else `3=(`2)
End Macro


; minimieren von zwei uebergebenen variablen
;
;
Macro MathMin
  If (`1)<(`2) Then `3=(`1) Else `3=(`2)
End Macro


;; -----------------------------------------------------------
;Function.l LVal{a$}
;   retval.l = 0
;   power.l = 1
;
;   For i.w = Len(a$) To 1 Step -1
;      char = Asc(Mid$(a$,i,1))
;      retval = retval + (char - 48) * power
;      power = power * 10
;   Next
;
;   Function Return retval
;End Function


Function.l MulDiv_{a.l,b.l,c.l}
  Function Return (a*b)/c
End Function


Function Math_Powerof2{p.l}
  If p=0 Then Function Return 1
  erg.l = 1
  For i.l = 1 To p
    erg.l = erg * 2
  Next i
  Function Return erg
End Function

Function.l Math_Power{a.l,b.l}
  If b = 0 Then Function Return 1
  If b = 1 Then Function Return a
  If b > 1
     For i.l = 2 To (b-1)
       a = a * a
     Next i
  Else
    For i.l = -1 To (b-1)
      a = a / a
    Next i
  EndIf
  Function Return a
End Function

Function.l Math_Ordnung{basis.l,wert.f}
  ordnung.b = 0

  While (wert > basis) AND (basis > 0)
    If (basis<>0) Then wert = wert / basis
    ordnung = ordnung + 1
  Wend
  Function Return ordnung
End Function


Function.f Maxf{a.f,b.f}
  If a > b
    Function Return a
  Else
    Function Return b
  EndIf
End Function

Function.f Minf{a.f,b.f}
  If b > a
    Function Return a
  Else
    Function Return b
  EndIf
End Function


Function.s Kodiere{a$}
  l.l = Len(a$)
  For i.l = 1 To l
    b$ + Chr$( Asc( Mid$(a$,i,1) ) + i )
  Next i

  Function Return b$
End Function

Function.s Dekodiere{a$}

  l.l = Len(a$)
  For i.l = 1 To l
    b$ + Chr$( Asc( Mid$(a$,i,1) ) - i )
  Next i

  Function Return b$
End Function


Function.s GetValue{datei$,s$}

  CaseSense Off
  If Exists(datei$)
    If OpenFile(0,datei$)
      FileInput 0
      Repeat
        a$ = Edit$(300)
      Until (Loc(0)=Lof(0)) OR Instr(a$,s$)

      If NOT (Loc(0)=Lof(0))
        a$ = StripLead$(StrChg(Edit$(300),",","."),32)
      Else
        a$ = "0"
      EndIf

      DefaultInput
      CloseFile 0
      Function Return a$

    Else
      Function Return "0"
    EndIf
  Else
    Function Return "0"
  EndIf
End Function

Function.l GetDec{n.l}
  q.b = True : m.l = 1
  While q
    n = n / 10
    If n > 0 Then m + 1 Else q = False
  Wend
  Function Return m
End Function


; -----------------------------------------------------------
Function.l LVal{a$}
   retval.l = 0
   power.l = 1

   For i.w = Len(a$) To 1 Step -1
      char.b = Asc(Mid$(a$,i,1))
      retval = retval + (char - 48) * power
      power = power * 10
   Next

   Function Return retval
End Function


Function.s DateAsDay{datum.l}
 ; Returns the day of the week.
 ; day, month & year are integers i.e. 15 04 2004
  j$  = Left$(d$,4)  : year.l = Vallong(j$)
  m$  = Mid$(d$,5,2) : month.l = Vallong(m$)
  t$  = Right$(d$,2) : day.l = Vallong(t$)

  a.l = (14 - month)/12
  y.l = year - a
  m.l = month + (12 * a) - 2
  d.l = (day + y + (y/4) - (y/100) + (y/400) + ((31*m)/12))MOD 7  ;Ooouch!
  Select d
    Case 0 : Wd$="Sunday"
    Case 1 : Wd$="Monday"
    Case 2 : Wd$="Tuesday"
    Case 3 : Wd$="Wednesday"
    Case 4 : Wd$="Thursday"
    Case 5 : Wd$="Friday"
    Case 6 : Wd$="Saturday"
    Default
      Wd$ = ""
  End Select
  Function Return Wd$
End Function



;
; ------------------------------------------------------------
; DateSTRING - wandelt ein longdatum in einen string um
; Par Info
; 1.  value : das datum als longwert
; 2.  mode  : format des datumstrings [ttmm,jjmmtt,ttmmjj]
; ------------------------------------------------------------
;
Function.s DateAsString{value.l,@mode.b}

  Format ""
  d$  = Str$(value)
  j$  = Left$(d$,4)
  m$  = Mid$(d$,5,2)
  t$  = Right$(d$,2)

  Select mode
  Case #DATUM_TTMM
    datum$ = t$ + "." + m$ + "."
  Case #DATUM_JJMMTT
    datum$ = j$ + "." + m$ + "."  + t$
  Case #DATUM_TTMMJJ
    datum$ = t$ + "." + m$ + "."  + Right$(j$,2)
  Case #DATUM_TTMMJJJJ
    datum$ = t$ + "." + m$ + "."  + j$
  Default
    datum$ = t$ + "." + m$ + "."  + j$
  End Select
  Function Return datum$
End Function


; ------------------------------------------------------------
; DateLONG - gibt das datum als longwert zurueck
; Par Info
; 1.  d$ : datum als string mit/ohne punkt
; ------------------------------------------------------------
;
Function.l DateAsLong{d$,@mode.l}
SHARED monate$()

  ; -- check if format YYYY-MM-DD and convert to normal one DD.MM.YYYY
  If Vallong(d$)>1000
    d$ = Right$(d$,2)+"."+Mid$(d$,6,2)+"."+Left$(d$,4)
  EndIf

  Dim zlong.l(2)
  Format "" : found.l = 0
  CaseSense Off
  For i.l = 1 To 12
    If Instr(d$, Left$(monate$(i),3)) > 0
      found = i
    EndIf
  Next i

  Select found
  Case 0
    l.l  = Len(d$) : quit.b= False
    i.l = 0 : y.l = 0
    While quit = False
      a$ = Mid$(d$,Len(d$)-i,1) : i + 1
      If ( (a$ = ".") OR (a$="-") OR (a$="/")) AND (y < 2)
        zlong(y) = Vallong(Right$(d$,i-1))
        d$ = Left$(d$,Len(d$)-i)
        i = 0 : y + 1
      Else
        If (y = 2)
          zlong(y) = Vallong(d$)
          quit = True
        Else
          If (i>20) Then Function Return 0
        EndIf
      EndIf
    Wend

    If mode = #DATUM_MTJ
      swap_.l= zlong(1)
      zlong(1) = zlong(2)
      zlong(2) = swap_
    EndIf

    If (zlong(0)>70) AND (zlong(0)<100)
      zlong(0)=1900 + zlong(0)
    Else
      If zlong(0)<70 Then zlong(0)=2000 + zlong(0)
    EndIf

    If (zlong(0)<1900) OR (zlong(0)>2200) OR (zlong(1)=0) OR (zlong(1)>12) OR (zlong(2)=0) OR (zlong(2)>32) Then Function Return 0

  Default

    zlong(1) = found
    If Vallong(Right$(StripTrail$(d$,32),4)) > 1000
      zlong(0) = Vallong(Right$(d$,4))
    Else
      zlong(0) = Vallong(Right$(d$,2))
      If zlong(0)<70 Then zlong(0)+2000 Else zlong(0)+1900
    EndIf
    zlong(2) = Vallong(Lef$t(d$,2))
  End Select

  Select mode
  Case #DATUM_DAYS
    Function Return zlong(2)
  Case #DATUM_MONTHS
    Function Return zlong(1)
  Case #DATUM_YEARS
    Function Return zlong(0)
  Default
    datum.l = zlong(0)
    datum = datum * 10000
    datum = datum + zlong(1) * 100 + zlong(2)
    Function Return datum
  End Select
End Function


; -----------------
; - Gibt einen Longwert als String mit zwei nachkommastellen zurueck
; -----------------
Function.s GetValueAsString{wert.l}
  Format "-######0.00"
  s$ = StrChg(Str$(wert/100.0)," ","")
  Format ""
  Function Return s$
End Function


Function.d Str2Value{strvalue$}

  If Instr(strvalue$,",") AND Instr(strvalue$,".")
    strvalue$ = StrChg(strvalue$,",","")
  Else
    strvalue$ = StrChg(strvalue$,",",".")
  EndIf
  Function Return Vallong(strvalue$)
End Function


; -----------------
; - Gibt einen String als Ganzzahl - also ohne Kommas oder Punkte ! - zurueck
; -----------------
Function.l GetStringAsValue{s$}
  s$ = StrChg(s$,"+","")
;  If (????Lib 125/2(",",s$)>0) OR (????Lib 125/2(".",s$)>0)
  If (Instr(s$,",")>0) OR (Instr(s$,".")>0)
    s$ = StrChg(s$,".","")
    s$ = StrChg(s$,",","")
  Else
    s$ + "00"
  EndIf
  Function Return Vallong(s$)
End Function






; ----------------------------------------------------------------
; PARNUMS : gibt die Anzahl der Parameter in einem String zurck
; Par.  Info
; 1.    li_$ : ASCII-String
; ----------------------------------------------------------------
Function.w ParsNums{li_$}
    DEFTYPE.l pos,objekt

    li_$ = StripTrail$(li_$,Asc(" "))
    li_$ =  StripLead$(li_$,Asc(" "))

    If Len(li_$) > 0
      pos = 0
      objekt = 1
      While (pos=<Len(li_$))
        pos + 1

        If Mid$(li_$,pos,1) = " "
          objekt + 1
          While Mid$(li_$,pos,1) = " " : pos + 1 : Wend
        EndIf
      Wend

      Function Return objekt

    EndIf
End Function


; ----------------------------------------------------------------
; REPLACESTR : ersetzt von POS an ANZAHL Zeichen durch ERSATZ$
;
; ----------------------------------------------------------------
Function.s ReplaceStr{mainstring$,pos.w,anzahl.w,ersatz$}
  If pos>1 Then dummy$ = Left$(mainstring$, pos-1)
  If anzahl>0 Then dummy$ + Left$(ersatz$,anzahl)
  dummy$ + Right$(mainstring$,Len(mainstring$)-pos-anzahl+1)
  Function Return dummy$
End Function






; ----------------------------------------------------------------
; PARLINE : gibt den ausgewaehlten Parameter als String zurck
; Par.  Info
; 1.    li_$ : ASCII-String
; 2.    obj : Nummer des Parameters
; ----------------------------------------------------------------
Function.s ParsLine{li_$,obj.w}
    DEFTYPE.l s,pos,pos2,objekt

    li_$ = StripTrail$(li_$,Asc(" "))
    li_$ =  StripLead$(li_$,Asc(" "))

    s = Len(li_$)

    If s > 0

      pos = 0 : objekt = 1

      While (pos =< s)
        pos + 1

        If Mid$(li_$,pos,1) = " "
          objekt + 1
          While Mid$(li_$,pos,1) = " " : pos + 1 : Wend
        EndIf

        If obj = objekt
          While (Mid$(li_$,pos,1)<>" ") AND (pos <= s)
            te$ + Mid$(li_$,pos,1)
            pos+1
          Wend
          Function Return te$
        EndIf

      Wend

    EndIf
End Function



Statement Copy_WBPalette{scr.l}
;    WbToScreen 2 : Use Screen 2
;    WBcolors.w = 2^WBDepth          ;convert this to number of colours
;    aga.b = CheckAGA                ;see if system is AGA
;
;    ;------------- Store the WB palette as palette #0 -------------------------
;    InitPalette scr,WBcolors        ;set up palette 0 to WB depth
;    If aga = True
;      For ci = 0 To WBcolors - 1
;        AGAPalRGB scr,ci,AGARed(ci),AGAGreen(ci),AGABlue(ci)
;       Next
;    Else                            ;if not AGA, use OCS colour commands
;      For ci = 0 To WBcolors - 1
;        PalRGB scr,ci,Red(ci),Green(ci),Blue(ci)
;      Next
;    EndIf
;    CloseScreen 2
;    Use Screen scr
;    Use Palette scr

  Dim cmap.rgbval(256)

  WbToScreen 2 : Use Screen 2
  *wbscr.Screen = Peek.l(Addr Screen(2))
  ; get palette
  GetRGB32_ *wbscr\ViewPort\ColorMap,0,256,&cmap(0)
  For  n.l = 0 To 255
    cmap(n)\R = cmap(n)\R LSL 8
    cmap(n)\G = cmap(n)\G LSL 8
    cmap(n)\B = cmap(n)\B LSL 8
  Next
  CloseScreen 2
  *scr.Screen = Peek.l(Addr Screen(scr))
  ; set palette
  If *scr > 0
    For n.l = 2 To 255
      SetRGB32_ *scr\ViewPort,n,cmap(n)\R,cmap(n)\G,cmap(n)\B
    Next
    Use Screen scr
  EndIf
End Statement



Function.l GetRGBValue{color.l}

  r.l=AGARed(color) LSL 16
  g.l=AGAGreen(color) LSL 8; adjust to "32-bit left justified long value"
  b.l=AGABlue(color)
  Function Return (r+g+b)
End Function



Function.l GetBestPenRGB{r.l,g.l,b.l}
  If r < 0 Then r=0
  If r > 255 Then r=255
  If g < 0 Then g=0
  If g > 255 Then g=255
  If b < 0 Then b=0
  If b > 255 Then b=255

  r = r LSL 24 ;
  g = g LSL 24 ; adjust to "32-bit left justified long value"
  b = b LSL 24 ;
  *scrn.Screen = ActiveScreen ;Peek.l(Addr Screen (Used Screen))
  *view.ViewPort = *scrn\ViewPort
  *cmap.ColorMap = *view\ColorMap
  pen.l = ObtainBestPenA_(*cmap,r,g,b,Tags(#OBP_Precision,#PRECISION_GUI))
  ;If pen>=0 AND pen<=255 Then penlock(pen)+1
  ;If pen=-1 Then error {"Unable to alloc pen !"}:Function Return 1 ; check for failure
  Function Return pen
End Function


Function.l GetBestPen{_rgb.l}
  r.l = _rgb LSR 16
  g.l = (_rgb LSL 16) LSR 24
  b.l = (_rgb LSL 24) LSR 24

  Function Return GetBestPenRGB{r,g,b}
End Function



Function.l GetPen{color.l}
  Select color
  Case #COLOR_WHITE : Function Return GetBestPen{$FFFFFF}
  Case #COLOR_BLACK : Function Return GetBestPen{$000000}
  Case #COLOR_RED   : Function Return GetBestPen{$FF0000}
  Case #COLOR_GREEN : Function Return GetBestPen{$00CC00}
  Case #COLOR_BLUE  : Function Return GetBestPen{$0000FF}
  Case #COLOR_YELLOW: Function Return GetBestPen{$FFFF00}
  Case #COLOR_DARKYELLOW : Function Return GetBestPen{808000}
  Case #COLOR_DARKGRAY: Function Return GetBestPen{$404040}
  Case #COLOR_GRAY: Function Return GetBestPen{$808080}
  Case #COLOR_LIGHTBLUE: Function Return GetBestPen{$000080}
  Case #COLOR_LIGHTRED: Function Return GetBestPen{$800000}
  Case #COLOR_LIGHTGREEN: Function Return GetBestPen{$008000}
  End Select
End Function

Statement DrawGradient{rp.l,x1.l,y1.l,x2.l,y2.l,FirstColor.l,LastColor.l,Colors.l,Direction.l}
;* rp, FirstColor.l,LastColor.l,Colors.l,Direction.l
;*
;* This function draws a gradient colortable to the given rastport
;*
;*
DEFTYPE.l r,g,b,x,y,h,w,i,rt,gt,bt,ih
DEFTYPE.l RedDif,GreenDif,BlueDif,BackColor
    If Colors < 8 Then  Colors = 8

    rt = AGARed(FirstColor)
    gt = AGAGreen(FirstColor)
    bt = AGABlue(FirstColor)

    RedDif   = AGARed(LastColor) - rt
    GreenDif = AGAGreen(LastColor) - gt
    BlueDif  = AGABlue(LastColor) - bt

    While i < Colors
        r = rt +  (i * RedDif) / Colors
        g = gt +  (i * GreenDif) / Colors
        b = bt +  (i * BlueDif) / Colors
        BackColor = GetBestPenRGB{r,g,b}
;        !cout{FirstColor,LastColor,BackColor}
        SetAPen_ rp,BackColor
        Select Direction
        Case 0:  RectFill_ rp,MulDiv_{i,x2,Colors},y1,MulDiv_{i+2,x2,Colors},y2
        Case 1:  RectFill_ rp,x1,y1 + MulDiv_{i,y2,Colors},x2,y1 + MulDiv_{i+2,y2,Colors}
        Case 2:  RectFill_ rp,x1,y1,x2,y2
        End Select
        i + 1
    Wend
End Statement







Function.s PaddStr{s$,laenge.w,@paddvalue.w}
  If paddvalue =-1 Then paddvalue = 0
  If laenge>Len(s$)
    s$ = StrClone(Chr$(paddvalue),laenge-Len(s$))+ s$
    Function Return s$
  Else
    Function Return s$
  EndIf
End Function

;
; Returns Stringrepresentation of bitString with
; controlcodes stripped out
;
Function.s Bitstream{s.s}
  For i.w = 1 To Len(s)
    a$ = Mid$(s,i,1)
    If (Asc(a$)<30)OR(Asc(a$)>127) Then out$ + "." Else out$ + a$
  Next i
  Function Return out$
End Function

Function.s Hexstream{stream$}
  out$ = ""
  For i.w = 1 To Len(stream$)
    char.w  = Asc( Mid$(stream$,i,1) )
    out$ + Right$( Hex$(char) ,2)+"."
  Next i
  Function Return out$
End Function

Function.s CharStream{stream$}
  out$ = ""
  For i.w = 1 To Len(stream$)
    char.w  = Asc( Mid$(stream$,i,1) )
    If char>30 AND char<128
      out$ + Chr$(char)
    Else
      out$ + "."
    EndIf
  Next i
  Function Return out$
End Function
 





CNIF #__include = 0
  SYNTAX 4
  OPTIMIZE 6
  #USE_WIZARD = 0
  WbToScreen 0
  NPrint DateAsDay{20050720}
  NPrint DateAsLong{"2007-11-02"}

CEND
