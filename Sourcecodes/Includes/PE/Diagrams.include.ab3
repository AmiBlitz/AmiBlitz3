; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 1
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max ChunkyBuffer= 2
; /XTRA

CNIF #__include = 0
  XINCLUDE "PE/pe_tools.include.ab3"
CEND
; ****  Pie Chart - Diagram  ****
; Created: 1st/2nd May 2003 by Andre Beer / PureBasic-Team (www.purebasic.com)
; Many thanks to David "Tinman" McMinn for fixing the filling routine :-)

NEWTYPE.Diagram
  Value.l      ; Value
  Text.s       ; Description of the individual charts sectors
  Color.l      ; Color for filling the area of this sector
End NEWTYPE

NEWTYPE.Style
  Front1.l   ; 1st foreground color  (main)
  Front2.l   ; 2nd foreground color  (lighter)
  Front3.l   ; 3rd foreground color  (darker)
  Back1.l    ; 1st background color  (lighter)
  Back2.l    ; 2nd background color  (darker)
  Bottom.l   ; Color of the bottom bar
  Title.l    ; Title color
  Text.l     ; Text color (axis descriptions)
End NEWTYPE


; Init array  (item 0 is used for general settings, item 1 until Graphs+1 contains the diagram data
Dim Diagramm.Diagram(32)
SHARED Diagramm()



Statement DrawPie{win.l, Count.l, x.l, y.l, Width.l, Height.l}
  ; ID     = Output-ID for drawing operations (e.g. WindowOutput, ImageOutput, etc.)
  ; Count  = Value-/Bars-number
  ; x, y   = top-left corner of the diagram in pixel
  ; Width  = Width of diagram in pixel
  ; Height = Height of diagram in pixel, including title line and text line
  ; Color  = number of color-style
  ; Title  = String with the text, which should be printed as title line

  ; Initial values
  #Resolution = 60     ; Resolution is the part used for the pie-chart in percent, the other part is used for the description on the right side
  #Border = 5            ; Border (in pixel) on left and right side of the pie-chart
  AngleStart.f = -Pi    ; needed later for calculating the circle-parts
  AngleEnd.f = 0         ; defines where the drawing starts: 0 = right, #Pi = left, #Pi/2 = bottom, -#Pi/2 = top

  ; Calculate initial chart values
  LeftWidth.l = Width * #Resolution / 100
  LeftHeight.l = Height*#Resolution / 100
  temp1.l = (LeftWidth - #Border - 5) / 2
  temp2.l = (Height - #Border - 5 ) / 2
  Radius.l = Min(temp1,temp2)

  MX.l = x + #Border + ((LeftWidth-#Border) / 2) + 1
  MY.l = y + #Border + ((Height - #Border ) / 2) + 1 - 5

  ; Count the sum of all graphs value (=100%)
  For a.l = 1 To Count
    Sum.l + Diagramm(a)\Value
  Next

  Use Window win
  *win.Window = Peek.l(Addr Window(win))
  DrPort *win\RPort
  DrBoxf x,y,x+Width,y+Height,0

  *tmpbuf.l = AllocMem_(WindowHeight * WindowWidth,#MEMF_FAST|#MEMF_CLEAR)
  If *tmpbuf
    InitTmpRas_ TmpRP.TmpRas,*tmpbuf,WindowHeight * WindowWidth
    *win\RPort\TmpRas = TmpRP
  EndIf

  tortenfarbe.w = GetBestPen{$ffffff}
;  SetAPen_ *win\RPort,1
;  DrawEllipse_ *win\RPort,MX,MY,Radius,Radius
;  If *tmpbuf Then Flood_ *win\RPort,1,MX,MY
;  DrawEllipse_ *win\RPort,MX,MY+10,Radius,Radius
;  If *tmpbuf Then Flood_ *win\RPort,1,MX,MY
  SetAPen_ *win\RPort,tortenfarbe
  DrawEllipse_ *win\RPort,MX,MY,Radius,Radius
  DrPlot MX,MY

  For id.l = 1 To Count
    AngleStart = AngleEnd
    AngleEnd = AngleStart + (Diagramm(id)\Value * 2 * Pi / Sum)
    ; Draw the lines from inside the circle to the border

    DrLine MX,MY,Cos(AngleStart)*(Radius)+MX,Sin(AngleStart)*(Radius)+MY,tortenfarbe    ; note: Radius must be increases by 1 here,
    DrLine MX,MY,Cos(AngleEnd)*(Radius)+MX,Sin(AngleEnd)*(Radius)+MY,tortenfarbe        ; because otherwise sometimes misses a pixel

    ; Calc the coordinates for filling point and finally fill the selected area
    px.f = Cos((AngleEnd + AngleStart) / 2)*(Radius / 2) + MX
    py.f = Sin((AngleEnd + AngleStart) / 2)*(Radius / 2) + MY

    If *tmpbuf
      SetAPen_ *win\RPort,Diagramm(id)\Color
      SetOutlinePen_ *win\RPort,tortenfarbe
      Flood_ *win\RPort,1,px,py
    EndIf
;    If (Sin(AngleEnd)*(Radius) > 0) AND (Sin(AngleEnd)*(Radius)>0)
;      zx.l = MX + Cos(AngleEnd)*(Radius)
;      zy.l = MY + Sin(AngleEnd)*(Radius) + 1
;      DrLine zx,zy+1,zx,zy + 9,1
;      SetAPen_ *win\RPort,Diagramm(id)\Color
;      SetOutlinePen_ *win\RPort,tortenfarbe
;      Flood_ *win\RPort,1,zx + 1,zy + 8
;    EndIf
  Next

;  ; Now draw the descriptions on the right side
  LineHeight.w = WZYFontsize + 4
  LineSpace.w = 5

  temp1.l = (LeftWidth  - #Border) / 2
  temp2.l = (LeftHeight - #Border) / 2
  Radius.l = Max(temp1,temp2)

  breite.l = 0
  ; Find the widthest string
  For id = 1 To Count
    breite = Max(DrTextLen(Diagramm(id)\Text),breite)
  Next
  breite + LineHeight * 2
;  Stop
;  If breite > (Width-LeftWidth) Then breite = (Width-LeftWidth)
  px = x + (Radius + #Border) * 2 + #Border ;+ temp2
  hoehe.w = (LineHeight * Count) + (LineSpace * (Count-1))
  py = y + ((Height - hoehe) / 2)  ; Image height decreased by needed height for the text descriptions

  ; paint white background box with black borders
  DrMode 1
  DrBox  px-5,py-5,px-5 + breite+2,py-5 + (LineHeight+LineSpace)*Count+2+4,GetPen{#COLOR_BLACK}
  DrBoxf px-4,py-4,px-4 + breite,  py-4 + (LineHeight+LineSpace)*Count+4,GetPen{#COLOR_GRAY}
  ; paint the color boxes with relating description
  For id = 1 To Count
    DrBox  px  ,py  ,px + LineHeight,py + LineHeight,0
    DrBoxf px+1,py+1,px+1+LineHeight-2,py+1+LineHeight-2,Diagramm(id)\Color
    DrMode 0
;    FrontColor(Red(),Green(Colors(Color)\Text),Blue(Colors(Color)\Text))
    DrText Diagramm(id)\Text, px + LineHeight + 4, py + (LineHeight+LineSpace)/4-2, 2; Diagramm(id)\Color; )Colors(Color)\Text
;    DrawText(Diagramm(id)\Text)
    py + LineHeight + LineSpace
  Next

  If *tmpbuf
    FreeMem_ *tmpbuf,WindowHeight*WindowWidth*1
  EndIf
End Statement



CNIF #__include = 0
WBStartup
WbToScreen 0


ImW.l = 500       ; Width of diagram in pixel   \ in this case also the (inner) window
ImH.l = 350       ; Height of diagram in pixel  / dimensions....

Graphs.l = 5
MaxValue.w = 1000 ; Maximum individual value stored in the diagramm values
Values.l = 1      ; Decide, if the relating sector values will be printed inside the descriptions box
                  ; 0 = print only the sector name (in this example: Part 1, Part 2, etc.)
                  ; 1 = print the sector name as well the relating value (in this example: Part 1 (Value1), Part 2 (Value2), etc.)


; Store some general values
Diagramm(0)\Value = MaxValue  ; value is relating to 100% diagram height, must correspond to (at least) the greatest individual value!!!
 

; Fill data array
For a.w = 1 To Graphs
  ; Fill value
  Value.w = Int(Rnd(MaxValue-1)) + 1       ; the values should be at least 2
  Diagramm(a)\Value = Value
  ; Fill x-Axis
  If Values = 0
    Diagramm(a)\Text = "Part "+Str$(a)
  Else
    Diagramm(a)\Text = "Part "+Str$(a)+" ("+Str$(Value)+")"
  EndIf
  ; Fill color
  R.l = 128 + a*5
  G.l = 128 + a*15
  B.l = 128 + a*5
  _rgb.l = (R LSL 16) + (G LSL 8) + B

  Diagramm(a)\Color = GetBestPen{_rgb}      ; currently here are used random colors, feel free to set your own's ;-)
Next a


;-Main Programm
If Window(0,100,200,ImW,ImH,#WFLG_NOCAREREFRESH |#WFLG_DRAGBAR|#WFLG_CLOSEGADGET|#WFLG_DEPTHGADGET|#WFLG_SIZEGADGET|#WFLG_GIMMEZEROZERO|#WFLG_SIZEBBOTTOM ,"Diagrams... ;-)    <written May 2003 by Andre Beer>",0,1) > 0
  *win.Window  = Peek.l(Addr Window(0))
  DrawPie{0, Graphs, 0, 0, InnerWidth, InnerHeight}

  ;- Main loop
  Repeat
     ev.l = WaitEvent
     Select ev
        Case #IDCMP_CLOSEWINDOW
          Quit.q = -1
        Case #IDCMP_NEWSIZE
          ImW = *win\Width - *win\BorderLeft - *win\BorderRight
          ImH = *win\Height - *win\BorderTop - *win\BorderBottom
          DrawPie{0, Graphs, 0, 0, ImW,ImH}
     End Select
  Until Quit
  CloseWindow 0
EndIf
End
CEND
