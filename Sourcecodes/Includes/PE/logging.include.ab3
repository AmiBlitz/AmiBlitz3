; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 27
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 65535
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 25
; CursorColumn    = 17
; LabelSearch     = "stream"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; Max BitMap      = 10
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
; -- logging.include.ab3
; --
; - converted to .ab3 format nad made it Syntax 6 compatible  tomsmart1 2013 03


;optimize 4        ; deactivaed because it's overwrite the optimzelevel of the main program  tomsmart1
;Syntax 6          ; used it only for testing  because else it overwrite the syntaxlevel of the main program tomsmart1

XINCLUDE "PE/PE_Tools.include.ab3"
XINCLUDE "dos.include.ab3"
XINCLUDE "file.include.ab3"

; -- logging level: what to be logged
#log_maintainance = 4
#log_error        = 3
#log_warning      = 2
#log_information  = 1
#log_all          = 0
#log_debug        = 0
#log_nothing      = -10

; -- output format
#log_normal   = 0
#log_short    = 1
#log_nodate   = 2
#log_function = 3

; -- output destination
#log_toconsole = 0
#log_tofile    = 1
#log_toboth    = 2
DEFTYPE.w log_level,log_format

log_file$ = dos_GetProgDir{"ram:"}+dos_GetProgFile{"unknown"}+".log"
log_destination.w = #log_toconsole
log_level.w = #log_all
log_format.w = #log_normal

CNIF @#log_Width = 0
  #log_Width = 80
CEND


Macro log_out
  If (log_destination = #log_toconsole) OR (log_destination = #log_toboth)
    !cout{`1,`2}
  EndIf
  If (log_destination = #log_tofile) OR (log_destination = #log_toboth)
    lfid.l = file_Open{log_file$,#file_open}
    If lfid<>-1
      file_SeekRel{lfid,file_GetLength{lfid}}
      file_WriteLine{lfid,`1+" "+`2}
      file_Close{lfid}
    EndIf
  EndIf
End Macro



; ////////////////////////////////
; / Par1: Memoryaddress          /
; / Par2: Bytes to output        /
; ////////////////////////////////
Macro log_memhex
    For imh.l = 0 To `2 Step 8
      memaddr.l = `1 + imh
      memdata.l = Peek.l(memaddr)
      memdata2.l= Peek.l(memaddr+4)

      logtxt$ = Hex$(memaddr-`1)+" ("+LSet$(Str$(imh),4)+") # "
      logtxt$ + Hex$(memaddr)+": "+ Hex$(memdata)+" "+Hex$(memdata2)+"  "+CharStream{Peeks$(memaddr,8)}+" "
      logtxt$ + Str$(memdata) + "  " + Str$(memdata2)
      log_Print{logtxt$}
   Next
End Macro
 



Statement log_Reset{}
SHARED log_destination,log_file$
  If log_destination = #log_tofile
    DeleteFile_ log_file$
  EndIf
End Statement

Statement log_SetFile{fname$}
SHARED log_file$
  log_file$ = fname$
End Statement

Statement log_SetDestination{dest.w,@fname$}
SHARED log_destination,log_file$
  log_destination = dest
  If fname$<>""
    log_file$ = fname$
  EndIf
End Statement

Statement log_SetFormat{lf.w}
SHARED log_format
  log_format = lf
End Statement

Statement log_SetLevel{newlevel.w}
SHARED log_level
  log_level = newlevel
;  !log_out{"","Loglevel set to " +Str$(log_level)}
End Statement

Function.s log_GetTimeStamp{}
SHARED log_format

  DateFormat 0 ; DD/MM/YYYY
  _date$ = StrChg(Date$(SystemDate),"/",".")
  Format "00"
  _time$ = Str$(Hours)+":"+Str$(Mins)+":"+Str$(Secs)
  Format ""
  Select log_format
  Case #log_short  : Function Return ""
  Case #log_nodate : Function Return "["+_time$+"]"
  Default : Function Return "["+_date$+" "+_time$+"]"
  End Select
End Function


; -- intern
Statement log_Output{text$,@header$}
SHARED log_destination,log_file$
  message_len.w = Len(text$)
  If message_len > #log_Width
    For i.w = 1 To message_len Step #log_Width
      !log_out{header$,Mid$(text$,i,#log_Width)}
    Next i
  Else
    !log_out{header$,text$}
  EndIf
End Statement

; -- intern
Statement log_PrintN{text$,header$}
  ret.w = Instr(text$,Chr$(10))
  If ret = 0
    log_Output{text$,header$}
  Else
    log_Output{Left$(text$,ret-1),header$}
    log_PrintN{UnRight$(text$,ret),header$}
  EndIf
End Statement

Statement log_Print{text$,@level.b}
SHARED log_level,log_format
  If level = -1 Then level = 0
  If level <= log_level
    header$ = log_GetTimeStamp{}
    log_PrintN{text$,header$}
  EndIf
End Statement

Statement log_l{lo.l}
  !cout{lo}
End Statement
Statement log_w{lo.w}
  !cout{"word: ",lo}
End Statement
Statement log_s{s$}
  !cout{s$}
End Statement
Statement log_PeekW{a.l}
  !cout{Peek.w(a)}
End Statement
Statement log_PeekL{a.l}
  !cout{Peek.l(a)}
End Statement
Statement log_PeekS{a.l}
  !cout{Peek$(a)}
End Statement



CNIF #__include = 0
NoCli
log_SetDestination{#log_toconsole}
log_SetFile{"ram:logging.log"}
For i.w = 1 To 25
  message$ =""
  For j.w = 1 To 160
    message$ + StrRange(65+Rnd(10),90-Rnd(15))
  Next j
  log_Print{message$+" ###"}
Next i

  log_SetFormat{#log_nodate}

  message$ = "ERROR\\naborting..."
  log_Print{message$}
 

  !cout{"Ready"}
MouseWait
End
CEND
