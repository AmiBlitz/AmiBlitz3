; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "AISSDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 426
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; Max ChunkyBuffer= 2
; /XTRA
CNIF #__include=0
  SYNTAX 2
  OPTIMIZE 7
CEND

XINCLUDE "useful.include.ab3"
XINCLUDE "image_ext.include.ab3"

#TBSTYLE_PLAIN     = 0
#TBSTYLE_DEFAULT   = 0
#TBSTYLE_GLOW      = 1
#TBSTYLE_AQUA      = 2
#TBSTYLE_CONTRAST  = 3

#TBSTATE_NORMAL    = 0
#TBSTATE_SELECTED  = 1
#TBSTATE_GHOSTED   = 2
#TBSTATE_ALL       = -1

#TBTAG_BASE        = #TAG_USER

#TBM_CONTRAST      = (#TBTAG_BASE + 100); /* -255..+255 contrast change                    */
#TBM_ADDSHADDOW    = (#TBTAG_BASE + 101); /* 0...255 shadow strength                       */
#TBM_ADDGLOW       = (#TBTAG_BASE + 102); /* RGB Glow Color                                */
#TBM_TINT          = (#TBTAG_BASE + 103); /* RGB Tint Color                                */
#TBM_EMBROSS       = (#TBTAG_BASE + 104); /* 0...255 Embros effect                         */
#TBM_SATURATION    = (#TBTAG_BASE + 105); /* -255...255 saturation                         */
#TBM_SHARPEN       = (#TBTAG_BASE + 106); /* -255...255 sharpen or blurr the image         */
#TBM_RESIZE        = (#TBTAG_BASE + 107); /* resize image to (long)(width | (height<<16))  */
#TBM_RESCALE       = (#TBTAG_BASE + 108); /* rescale image to (long)(width | (height<<16)) */
#TBM_ADDBACKGROUND = (#TBTAG_BASE + 110); /* mix with other tb image                       */
#TBM_ADDFOREGROUND = (#TBTAG_BASE + 111); /* mix with other tb image                       */
#TBM_OPACITY       = (#TBTAG_BASE + 112); /* increase transparency                         */
#TBM_GAMMA         = (#TBTAG_BASE + 113); /* change gamma brighness                        */

#TBA_ARGBBITMAP    = (#TBTAG_BASE + 200); /* get the ARGB BitMap
#TBA_MASK          = (#TBTAG_BASE + 201); /* get the 1-bit mask for blitting <256 colors   */
#TBA_IMAGE         = (#TBTAG_BASE + 202); /* get the internal image object ID              */
#TBA_WIDTH         = (#TBTAG_BASE + 203); /* get the width in pixels                       */
#TBA_HEIGHT        = (#TBTAG_BASE + 204); /* get the height in pixels                      */
#TBA_NAME          = (#TBTAG_BASE + 205); /* get the name as string                        */

NEWTYPE.ToolBarImage
name.l
width.l
height.l
img.l[3]
End NEWTYPE

NEWTYPE.ToolBarEngine
is_init.l
*aqbg.ToolBarImage
*aqfg.ToolBarImage
*aqbg_o.ToolBarImage
*aqfg_o.ToolBarImage
End NEWTYPE

SHARED toolbarengine.ToolBarEngine

Dim List *tbitrackerL.ToolBarImage(0)

Statement tb_UpdateDims{*tbi.ToolBarImage}
*tbi\width=0
*tbi\height=0
For n.l=0 To 2
  width.l = image_GetWidth{*tbi\img[n]}
  If width>*tbi\width Then *tbi\width=width
  height.l = image_GetHeight{*tbi\img[n]}
  If height>*tbi\height Then *tbi\height=height
Next
End Statement


Statement tb_FreeImage{*tbi.ToolBarImage}
SHARED *tbitrackerL()
ResetList *tbitrackerL()
While NextItem(*tbitrackerL())
  If (*tbitrackerL()=*tbi)
    For state.l=0 To 2
      If (*tbi\img[state]>=0)   image_Free{*tbi\img[state]}   : *tbi\img[state]   = -1
    Next
    str_Free{&*tbi\name}
    FreeVec_ *tbi : *tbi=0
    KillItem *tbitrackerL()
    Statement Return
  End If
Wend
End Statement

 


Function.l tb_CloneImage{*otbi.ToolBarImage,@width.l,@height.l}
If *otbi=#NULL Then Function Return #NULL
*tbi.ToolBarImage = AllocVec_(SizeOf.ToolBarImage,#MEMF_ANY)
If *tbi
  *tbi\name = #NULL
  name.s = str_Read{&*otbi\name}
  str_Write{&*tbi\name,name}
  err.l = False
  For state.l=0 To 2
    img.l   = image_GetFree{}
    If img>=0
      If width<1 OR height<1
        *tbi\img[state] = img
        image_Cut{img,*otbi\img[state]}
      Else
        *tbi\img[state] = img
        image_Resize{img,*otbi\img[state],width,height,#image_interpol_window,0}
      End If
    Else
      *tbi\img[state] = *tbi\img[0]
    End If
  Next
  tb_UpdateDims{*tbi}
End If
Function Return *tbi
End Function


Function.l tb_DoMethod{*tbi.ToolBarImage,state.l,*taglist.TagItem}
count.l = 0
If *taglist=#NULL OR *tbi=#NULL Then Function Return count

Select state
   Case #TBSTATE_NORMAL   : state = 0
   Case #TBSTATE_SELECTED : state = 1
   Case #TBSTATE_GHOSTED  : state = 2
   Default
     state = 0
End Select
Dim tbtags.TagItem(3)


While *taglist\ti_Tag><#TAG_DONE
  If image_IsUsed{*tbi\img[state]}
    Select *taglist\ti_Tag
      ; queries
      Case #TBA_ARGBBITMAP  : Poke.l *taglist\ti_Data,image_GetARGBBitmapPtr{*tbi\img[state] }   : count+1
  ;    Case #TBA_MASK        : Poke.l *taglist\ti_Data,image_GetMaskPtr{img}        : count+1
      Case #TBA_WIDTH       : Poke.l *taglist\ti_Data,image_GetWidth{*tbi\img[state] }           : count+1
      Case #TBA_HEIGHT      : Poke.l *taglist\ti_Data,image_GetHeight{*tbi\img[state] }          : count+1
      Case #TBA_IMAGE       : Poke.l *taglist\ti_Data,*tbi\img[state]                            : count+1
      Case #TBA_NAME        : Poke.l *taglist\ti_Data,*tbi\name+4                  : count+1

      ; methods
      Case #TBM_GAMMA       : amount.l = *taglist\ti_Data : image_Filter{*tbi\img[state] ,#image_filter_gamma     ,amount,#NULL}  : count+1
      Case #TBM_CONTRAST    : amount.l = *taglist\ti_Data : image_Filter{*tbi\img[state] ,#image_filter_contrast  ,amount,#NULL}  : count+1
      Case #TBM_SATURATION  : amount.l = *taglist\ti_Data : image_Filter{*tbi\img[state] ,#image_filter_saturation,amount,#NULL}  : count+1
      Case #TBM_EMBROSS     : amount.l = *taglist\ti_Data : image_Filter{*tbi\img[state] ,#image_filter_embross   ,amount,#NULL}  : count+1
      Case #TBM_SHARPEN     : amount.l = *taglist\ti_Data : image_Filter{*tbi\img[state] ,#image_filter_sharpen   ,amount,#NULL}  : count+1
      Case #TBM_TINT        : argb.l   = *taglist\ti_Data : tbtags(0)\ti_Tag = #IMFA_ARGB,argb : tbtags(1)\ti_Tag = #TAG_DONE,0
                              image_Filter{*tbi\img[state] ,#image_filter_mul       ,   256,&tbtags(0)}: count+1
  ;    Case #TBM_ADDSHADOW   : amount.l = *taglist\ti_Data : image_Filter{img,#image_filter_addshadow,amount,#NULL}              : count+1
      Case #TBM_OPACITY     : amount.l = *taglist\ti_Data : image_Filter{*tbi\img[state] ,#image_filter_opacity,amount,#NULL}  : count+1
      Case #TBM_ADDGLOW     : argb.l   = *taglist\ti_Data
                              img2.l   = image_GetFree{}
                              tbtags(0)\ti_Tag = #IMFA_ARGB,argb : tbtags(1)\ti_Tag = #TAG_DONE,0
                              image_Filter{*tbi\img[state] ,#image_filter_glow  ,   256,&tbtags(0),img2}
                              image_Free{*tbi\img[state] }
                              *tbi\img[state]  = img2
                              count+1

      Case #TBM_RESCALE     : nxs.l = *taglist\ti_Data & $FFFF : nys.l = (*taglist\ti_Data LSR 16)& $FFFF
                              If image_GetWidth{*tbi\img[state]} ><nxs OR image_GetHeight{*tbi\img[state]} ><nys
                              img2.l   = image_GetFree{}
                              yfac.l = image_GetWidth{*tbi\img[state]} /nxs
                              If yfac>=4
                                image_Resize{img2,*tbi\img[state] ,nxs,nys,#image_interpol_window,0.2}
                              Else
                                image_Resize{img2,*tbi\img[state] ,nxs,nys,#image_interpol_gui,1}
                              End If
                              image_Free{*tbi\img[state] }
                              *tbi\img[state]  = img2
                              tb_UpdateDims{*tbi}
                              End If
                              count+1

      Case #TBM_RESIZE      : nxs.l = *taglist\ti_Data & $FFFF : nys.l = (*taglist\ti_Data LSR 16)& $FFFF
                              If image_GetWidth{*tbi\img[state]}><nxs OR image_GetHeight{*tbi\img[state]}  ><nys
                              img2.l   = image_GetFree{}
                              image_Create{img2,nxs,nys,False,$00000000}
                              image_MidHandle{*tbi\img[state] }
                              image_Draw{*tbi\img[state] ,nxs/2,nys/2,image_GetRPPtr{img2}}
                              imagedat(img2)\alpha_isused = imagedat(*tbi\img[state] )\alpha_isused
                              image_Free{*tbi\img[state] }
                              *tbi\img[state]  = img2
                              tb_UpdateDims{*tbi}
                              End If
                              count+1
      Case #TBM_ADDBACKGROUND:
                              *bg.ToolBarImage = *taglist\ti_Data
                              If *bg
                              nxs.l = Max(*bg\width,*tbi\width)
                              nys.l = Max(*bg\height,*tbi\height)
                              img2.l = image_GetFree{}
                              image_Create{img2,nxs,nys,False,$00000000}
                              image_Filter{*bg\img[state] ,#image_filter_mix,256,#NULL,img2}
                              image_Filter{*tbi\img[state],#image_filter_mix,256,#NULL,img2}
                              image_Free{*tbi\img[state]}
                              *tbi\img[state]  = img2
                              tb_UpdateDims{*tbi}
                              count+1
                              End If
      Case #TBM_ADDFOREGROUND:
                              *fg.ToolBarImage = *taglist\ti_Data
                              If *fg
                              nxs.l = Max(*fg\width,*tbi\width)
                              nys.l = Max(*fg\height,*tbi\height)
                              img2.l = image_GetFree{}
                              image_Create{img2,nxs,nys,False,$00000000}
                              image_Filter{*tbi\img[state],#image_filter_mix,256,#NULL,img2}
                              image_Filter{*fg\img[state] ,#image_filter_mix,256,#NULL,img2}
                              image_Free{*tbi\img[state]}
                              *tbi\img[state]  = img2
                              tb_UpdateDims{*tbi}
                              count+1
                              End If
      Default
        ; unknown Tag
    End Select
  End If
  *taglist + SizeOf.TagItem
Wend
Function Return count
End Function


 


Statement tb_SetStyle{*tbi.ToolBarImage,style.l}
Select style
  Case #TBSTYLE_AQUA
    width.l  = *tbi\width*Pi/2+0
    height.l = *tbi\height*Pi/2+0
    nh.l = width | (height LSL 16)

    clone.l=False
    If toolbarengine\aqbg
      If width><toolbarengine\aqbg\width OR height><toolbarengine\aqbg\height Then clone=True : tb_FreeImage{toolbarengine\aqbg}
    Else
      clone.l = True
    End If
    If toolbarengine\aqfg
      If width><toolbarengine\aqfg\width OR height><toolbarengine\aqfg\height Then clone=True : tb_FreeImage{toolbarengine\aqfg}
    Else
      clone.l = True
    End If

    If clone
      toolbarengine\aqbg = tb_CloneImage{toolbarengine\aqbg_o,width,height}
      toolbarengine\aqfg = tb_CloneImage{toolbarengine\aqfg_o,width,height}
    End If

    tbtags.tag5\ti_Tag = #TBM_RESIZE,nh,#TBM_ADDBACKGROUND,toolbarengine\aqbg,#TBM_ADDFOREGROUND,toolbarengine\aqfg,#TAG_DONE,0
    tb_DoMethod{*tbi.ToolBarImage,#TBSTATE_NORMAL    ,tbtags}
    tbtags.tag5\ti_Tag = #TBM_TINT,$8888aa,#TBM_ADDGLOW,$FFFFFF,#TBM_RESIZE,nh,#TBM_ADDBACKGROUND,toolbarengine\aqbg,#TBM_ADDFOREGROUND,toolbarengine\aqfg,#TAG_DONE,0
    tb_DoMethod{*tbi.ToolBarImage,#TBSTATE_SELECTED  ,tbtags}
    tbtags.tag5\ti_Tag = #TBM_SHARPEN,-128,#TBM_OPACITY,196,#TBM_SATURATION,-256,#TBM_GAMMA,128,#TAG_DONE,0
    tb_DoMethod{*tbi.ToolBarImage,#TBSTATE_GHOSTED   ,tbtags}
    tbtags.tag5\ti_Tag =  #TBM_RESIZE,nh,#TBM_ADDBACKGROUND,toolbarengine\aqbg,#TBM_ADDFOREGROUND,toolbarengine\aqfg,#TAG_DONE,0
    tb_DoMethod{*tbi.ToolBarImage,#TBSTATE_GHOSTED   ,tbtags}

  Case #TBSTYLE_CONTRAST ;contrast
    width.l  = *tbi\width  +3+3
    height.l = *tbi\height +3+3
    nh.l = width | (height LSL 16)
    tbtags.tag5\ti_Tag = #TBM_RESIZE,nh,#TBM_CONTRAST,128,#TAG_DONE,0
    tb_DoMethod{*tbi.ToolBarImage,#TBSTATE_NORMAL  ,&tbtags}

    tbtags.tag5\ti_Tag = #TBM_RESIZE,nh,#TBM_CONTRAST,128,#TBM_TINT,$888888,#TBM_ADDGLOW,$FFFFFF,#TAG_DONE,0
    tb_DoMethod{*tbi.ToolBarImage,#TBSTATE_SELECTED  ,&tbtags}

    tbtags.tag5\ti_Tag = #TBM_OPACITY,512,#TBM_RESIZE,nh,#TBM_EMBROSS,128,#TAG_DONE,0
    tb_DoMethod{*tbi.ToolBarImage,#TBSTATE_GHOSTED  ,&tbtags}

  Case #TBSTYLE_GLOW
    width.l  = *tbi\width  +2+2
    height.l = *tbi\height +2+2
    nh.l = width | (height LSL 16)
    tbtags.tag5\ti_Tag = #TBM_RESIZE,nh,#TAG_DONE,0
    tb_DoMethod{*tbi.ToolBarImage,#TBSTATE_NORMAL  ,&tbtags}

    tbtags.tag5\ti_Tag = #TBM_RESIZE,nh,#TBM_TINT,$aaaabb,#TBM_ADDGLOW,$FFFF99,#TAG_DONE,0
    tb_DoMethod{*tbi.ToolBarImage,#TBSTATE_SELECTED  ,&tbtags}

    tbtagsx.tag10\ti_Tag = #TBM_OPACITY,512,#TBM_RESIZE,nh,#TBM_EMBROSS,196,#TBM_CONTRAST,32,#TBM_GAMMA,0,#TAG_DONE,0
    tb_DoMethod{*tbi.ToolBarImage,#TBSTATE_GHOSTED  ,&tbtagsx}

  Default
    ; no style
End Select
End Statement



Function.l tb_LoadImage{name.s,@style.l,@width.l,@height.l}
SHARED *tbitrackerL()
succ.l = False
*tbi.ToolBarImage = AllocVec_(SizeOf.ToolBarImage,#MEMF_ANY)
If *tbi
  *tbi\name = #NULL
  str_Write{&*tbi\name,name}
  err.l = False
  For state.l=0 To 2
    img.l   = image_GetFree{}
    If img>=0
      Select state
        Case 0
          succ = image_Load{img,name}
          If succ
            rwidth.l  = image_GetWidth {img}
            rheight.l = image_GetHeight{img}

            If width>0 AND height<=0
              height = rheight*width/rwidth
            Else
              If width<=0 AND height>0
                width  = rwidth*height/rheight
              Else
                If width<=0 AND height<=0
                  width = rwidth : height=rheight
                Else
                  If width <rwidth  OR True Then rw.l = (width*rheight)  ; : Else rw =(rwidth*rheight)
                  If height<rheight OR True Then rh.l = (rwidth*height)  ; : Else rh =(rwidth*rheight)
                  If rw>rh Then r.l=rh:Else r=rw
                  rw.l  = r / rheight
                  rh.l  = r / rwidth
                  width = rw
                  height= rh
                End If
              End If
            End If
            If width<2  Then width=2
            If height<2 Then height=2
            ;If width >rwidth Then width =rwidth
            ;If height>rheight Then height=rheight

            *tbi\width        = width
            *tbi\height       = height
            If AddItem(*tbitrackerL())
              *tbitrackerL() = *tbi
            End If
          Else
            err=True
            state=3
          End If
        Case 1
          If dos_Exist{name+"_s"}
            succ = image_Load{img,name+"_s"}
          Else
            succ = image_Load{img,name,-1,-1,-1,-1,1}
            ;succ = False
          End If
          If succ=False Then succ=image_Cut{img,*tbi\img[0]}
        Case 2
          If dos_Exist{name+"_g"}
            succ = image_Load{img,name+"_g"}
          Else
            succ=False
          End If
          If succ=False Then succ=image_Cut{img,*tbi\img[0]}
      End Select

      If succ
        *tbi\img[state] = img
        If *tbi\width><image_GetWidth{img} OR *tbi\height><image_GetHeight{img}
          img2.l = image_GetFree{}

          yfac.l = image_GetHeight{img} / *tbi\height
          If yfac>=8
            image_Resize{img2,img,*tbi\width,*tbi\height,#image_interpol_window,0.2}
          Else
            image_Resize{img2,img,*tbi\width,*tbi\height,#image_interpol_gui,1}
          End If
          image_Free{img}
          *tbi\img[state] = img2
        End If
      Else
        err=True
        state=3
      End If
    Else
      error{"\\__THIS_FUNCTION: Unable to open image \\22"+name+"\\22 !"}
    End If
  Next

  If err=False
    tb_SetStyle{*tbi,style}
    tb_UpdateDims{*tbi}
  Else
    If *tbi Then FreeVec_ *tbi
    *tbi=#NULL
  End If
Else
  error{"\\__THIS_FUNCTION: Unable to init toolbar image!"}
End If
Function Return *tbi
End Function



Statement tb_BlitImage{*tbi.ToolBarImage,state.l,x.l,y.l,*rp.RastPort}
If *tbi=#NULL Then Statement Return
Select state
  Case #TBSTATE_NORMAL   : state = 0
  Case #TBSTATE_SELECTED : state = 1
  Case #TBSTATE_GHOSTED  : state = 2
  Default
    state = 0
End Select

If *tbi\img[state]>=0
  If image_IsUsed{*tbi\img[state]}
    If image_AlphaIsUsed{*tbi\img[state]}
      image_FancyBlit{*tbi\img[state],x,y,-1,-1,*rp,#image_blitmode_alpha}
    Else
      image_Blit{*tbi\img[state],x,y,*rp}
    End If
  End If
End If
End Statement


Function.l tb_GetBitMap{*tbi.ToolBarImage,state.l}
If *tbi=#NULL Then Function Return #NULL

Select state
   Case #TBSTATE_NORMAL   : state = 0
   Case #TBSTATE_SELECTED : state = 1
   Case #TBSTATE_GHOSTED  : state = 2
   Default
     state = 0
 End Select

Function Return image_GetARGBBitmapPtr{*tbi\img[state]}
End Function

Function.l tb_Init{}
If toolbarengine\is_init=False
 ; toolbarengine\aqbg_o = tb_LoadImage{"Desktop:ScalingIcons/aqua_bgl2"}

;  tag5.tag5\ti_Tag = #IMFA_ARGB,$FF00FF,#TAG_DONE,0
;  image_Filter{toolbarengine\aqbg_o\img[0],#image_filter_mul,256,tag5,toolbarengine\aqbg_o\img[1]}
 ; image_Filter{toolbarengine\aqbg_o\img[0],#image_filter_gamma,128}
;  tag5.tag5\ti_Tag = #IMFA_ARGB,$ADD0FF,#TAG_DONE,0
;  image_Filter{toolbarengine\aqbg_o\img[0],#image_filter_mul,256,tag5,toolbarengine\aqbg_o\img[2]}
;  image_Filter{toolbarengine\aqbg_o\img[2],#image_filter_gamma,256}
;  tag5.tag5\ti_Tag = #IMFA_ARGB,$00FFFF,#TAG_DONE,0
;  image_Filter{toolbarengine\aqbg_o\img[0],#image_filter_mul,256,tag5}
;  image_Filter{toolbarengine\aqbg_o\img[0],#image_filter_gamma,256}

 ; toolbarengine\aqfg_o = tb_LoadImage{"Desktop:ScalingIcons/aqua_fgl2"}
  toolbarengine\aqbg = #NULL
  toolbarengine\aqfg = #NULL
  toolbarengine\is_init=True
EndIf
Function Return toolbarengine\is_init
End Function
 


Statement tb_FreeAll{}
SHARED *tbitrackerL()
Repeat
  ResetList *tbitrackerL()
  If NextItem(*tbitrackerL())
    tb_FreeImage{*tbitrackerL()}
  End If
  ResetList *tbitrackerL()
Until NextItem(*tbitrackerL())=False
End Statement
!autoexit{tb_FreeAll}

CNIF #__include=0
WbToScreen 0
screen_Open{"test",#scr_mode_wb_use}
Window 0,0,0,800,780,$E,"ToolBar Test",1,0
;Stop
#icons=14
Dim icon.s(#icons)
icon(0) = "envarc:sys/def_kickstart.info"
icon(1) = "sys:prefs/pvs.info"
icon(2) = "sys:prefs/IControl.info"
icon(3) = "sys:system.info"
icon(4) = "workbench:programme/Mediacenter/mediacenter.info"
icon(5) = "sys:tools/tuited/tuited.info"
icon(6) = "TBImages:question"
icon(7) = "TBImages:add"
icon(8) = "TBImages:mail"
icon(9) = "TBImages:list"
icon(10) = "TBImages:junk"

icon(11) = "TBImages:form"
icon(12) = "TBImages:save"
icon(13) = "TBImages:rss"

icon(14) = "TBImages:zoom"

#boxs=21
  apen.l = screen_GetPenRGB{$AAAAAA}
  bpen.l = screen_GetPenRGB{$888888}
  For x.l=0 To InnerWidth/#boxs-1
    For y.l = 0 To InnerHeight/#boxs-1
      If (x+y) MOD 2 Then pen.l = apen:Else pen=bpen
      WBox x*#boxs+WLeftOff,y*#boxs+WTopOff,x*#boxs+#boxs+WLeftOff,y*#boxs+#boxs+WTopOff,pen
    Next
  Next
 

tb_Init{}
*rp.RastPort = RastPort(0)
w.l = 0
h.l = 50

Goto skiptest1
;icon(0) = "desktop:/Downloads/images/_printer.png"
;icon(1) = "desktop:/Downloads/images/_recycle.png"
;icon(2) = "desktop:/Downloads/images/_folder.png"
;icon(3) = "desktop:/Downloads/images/_screen.png"
icon(0) = "TBImages:undo"
icon(1) = "TBImages:save"
icon(2) = "sys:storage/icons/ken/format.info"
icon(2) = "sys:storage/icons/ken/def_icons/def_amigaguide.info"
icon(3) = "sys:storage/icons/ken/def_icons/def_wav.info"
icon(4) = "sys:storage/icons/ken/keyshow.info"
For n.l=0 To 1
w.l = 0
#ys = 96
#rows = 1
For size.l=0 To 9 Step 1

  rsize.l = size
  If size>=25 Then rsize = (size-25) * 2 + 25


  If size=0 Then rsize = 12
  If size=1 Then rsize = 16
  If size=2 Then rsize = 21
  If size=3 Then rsize = 24
  If size=4 Then rsize = 36
  If size=5 Then rsize = 48
  If size=6 Then rsize = 60
  If size=7 Then rsize = 72
  If size=8 Then rsize = 96
  If size=9 Then rsize=-1
  *tbi.ToolBarImage = tb_LoadImage{icon(n),#TBSTYLE_GLOW,rsize,rsize}
  If *tbi

    h.l = *tbi\height+2
    If n=0 Then yoff.l = #ys - h : Else yoff=0
    tb_BlitImage{*tbi,#TBSTATE_NORMAL  , 14+w ,30+(#ys-4)*0+#ys*#rows*n+yoff,*rp}
    image_Save{*tbi\img[0],"ram:"+dos_FilePart{icon(n)}+"."+Str$(*tbi\height)+".png",@"PNG"}
    ;tb_BlitImage{*tbi,#TBSTATE_SELECTED, 8+w ,30+(#ys-4)*1+#ys*#rows*n,*rp}
    ;tb_BlitImage{*tbi,#TBSTATE_GHOSTED , 8+w ,30+(#ys-4)*2+#ys*3*n,*rp}
    w + *tbi\width-2
    tb_FreeImage{*tbi}

  End If
Next
Next

;Goto skip
skiptest1:
; normal style
WLocate 10,5:NPrint "plain 24x24"
For n.l=0 To #icons
  *tbi.ToolBarImage = tb_LoadImage{icon(n),#TBSTYLE_PLAIN,24,24}
  If *tbi
    w.l = *tbi\width+2
    h.l = *tbi\height+2
    tb_BlitImage{*tbi,#TBSTATE_NORMAL  , 10+w*0 ,50+h*n,*rp}
    tb_BlitImage{*tbi,#TBSTATE_SELECTED, 10+w*1 ,50+h*n,*rp}
    tb_BlitImage{*tbi,#TBSTATE_GHOSTED , 10+w*2 ,50+h*n,*rp}
    tb_FreeImage{*tbi}
  End If
Next

; glow style
WLocate 110,5:NPrint "glow"
For n.l=0 To #icons
  *tbi.ToolBarImage = tb_LoadImage{icon(n),#TBSTYLE_GLOW,24,24}
  If *tbi
    tb_BlitImage{*tbi,#TBSTATE_NORMAL  , 110+w*0 ,50+h*n-2,*rp}
    tb_BlitImage{*tbi,#TBSTATE_SELECTED, 110+w*1 ,50+h*n-2,*rp}
    tb_BlitImage{*tbi,#TBSTATE_GHOSTED , 110+w*2 ,50+h*n-2,*rp}
    tb_FreeImage{*tbi}
  End If
Next

; intensiv style
WLocate 210,5:NPrint "plain 20x20"
For n.l=0 To #icons
  *tbi.ToolBarImage = tb_LoadImage{icon(n),#TBSTYLE_PLAIN,20,20}
  If *tbi
    tb_BlitImage{*tbi,#TBSTATE_NORMAL  , 210+w*0 ,50+h*n+2,*rp}
    tb_BlitImage{*tbi,#TBSTATE_SELECTED, 210+w*1 ,50+h*n+2,*rp}
    tb_BlitImage{*tbi,#TBSTATE_GHOSTED , 210+w*2 ,50+h*n+2,*rp}
    tb_FreeImage{*tbi}
  End If
Next


; intensiv style
WLocate 310,5:NPrint "plain 14x14"
For n.l=0 To #icons
  *tbi.ToolBarImage = tb_LoadImage{icon(n),#TBSTYLE_PLAIN,14,14}
  If *tbi
    tb_BlitImage{*tbi,#TBSTATE_NORMAL  , 310+w*0 ,50+h*n+2,*rp}
    tb_BlitImage{*tbi,#TBSTATE_SELECTED, 310+w*1 ,50+h*n+2,*rp}
    tb_BlitImage{*tbi,#TBSTATE_GHOSTED , 310+w*2 ,50+h*n+2,*rp}
    tb_FreeImage{*tbi}
  End If
Next
 


; aqua style
WLocate 410,5:NPrint "aqua bubble"
xs.l = 46
y.l = 40
For n.l=0 To 12
  *tbi.ToolBarImage = tb_LoadImage{icon(n),#TBSTYLE_AQUA,xs,xs}
  If *tbi
    If n=0 Then xs=38
    If n=1 Then xs=32
    If n=2 Then xs=28
    If n=3 Then xs=24
    If n=4 Then xs=20
    If n=5 Then xs=18
    If n=6 Then xs=16
    If n=7 Then xs=14
    If n=8 Then xs=12
    If n=9 Then xs=11
    If n=10 Then xs=10
    If n=11 Then xs=9
    If n=12 Then xs=8
    If n=13 Then xs=7
    tb_BlitImage{*tbi,#TBSTATE_NORMAL  , 410+*tbi\width*0 ,y,*rp}
    tb_BlitImage{*tbi,#TBSTATE_SELECTED, 410+*tbi\width*1 ,y,*rp}
    tb_BlitImage{*tbi,#TBSTATE_GHOSTED , 410+*tbi\width*2 ,y,*rp}
    y + *tbi\height
    tb_FreeImage{*tbi}
  End If
Next

skip:


While WaitEvent><#IDCMP_CLOSEWINDOW::Wend
End
CEND



