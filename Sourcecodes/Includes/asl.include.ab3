; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "ASLDemo"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 55
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 65535
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 906
; CursorColumn    = 1
; LabelSearch     = "#aslsm_"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 500
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 50
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 50
; Max BitMap      = 10
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: asl.include                                                      /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants: none                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
  OPTIMIZE 5
  SYNTAX 6
CEND

XINCLUDE "error.include.ab3"

NEWTYPE.FileRequester_TK
fr_Reserved0.b[4]
fr_File.l
fr_Drawer.l
fr_Reserved1.b[10]
fr_LeftEdge.w
fr_TopEdge.w
fr_Width.w
fr_Height.w
fr_Reserved2.b[2]
fr_NumArgs.l
fr_ArgList.l
fr_UserData.l
fr_Reserved3.b[8]
fr_Pattern.l
End NEWTYPE

NEWTYPE.aslfiledat
title.s
ok.s
cancel.s
fil.s
path.s
patt.s
filecount.l
End NEWTYPE

NEWTYPE.aslfontdat
title.s
ok.s
cancel.s
fontname.s
fontsize.l
End NEWTYPE

NEWTYPE.aslscreendat
title.s
ok.s
cancel.s
scr_id.l
scr_width.l
scr_height.l
scr_depth.w
scr_overscan.w
scr_ascroll.w
bmapwidth.l
bmapheight.l
dummy.l[64]
mind.l
maxd.l
minw.l
maxw.l
minh.l
maxh.l
End NEWTYPE

NEWTYPE.mfiles
pathname.s
End NEWTYPE

CNIF @#MAX_ASLFR_IDs=0
#MAX_ASLFR_IDs=32
CEND
Dim aslfiledat.aslfiledat(#MAX_ASLFR_IDs-1)
Dim List file_requ_items.mfiles(0)
Dim asltag.TagItem (64)
SHARED aslfontdat.aslfontdat
SHARED aslscreendat.aslscreendat

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !_ASL_Init                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ Open a Font ASL Requester and ask the user to select a font.                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - initfontname.s    : initial font name, e.g. "helvetica.font"              /
;/ - initfontsize.l    : initial font Y size, e.g. 13                          /
;/ - allowpropfont.l   : True if propotional fonts should be allowed, False :: /
;/ for fix fonts only (default: True)                                          /
;/ - *scr.Screen       : pointer to a screen where to open the requester, or:: /
;/ currently used screen if omitted.                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : True, if a font was selected, False if cancelled           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _ASL_Init
SHARED asltag(),ASL_x.l,ASL_y.l,ASL_xs.l,ASL_ys.l
succ.l = False
; Get a currently used screen if not provided
If *scr=-1 OR *scr=0
  scrnum.l = Used Screen
  If scrnum<0 Then WbToScreen 0:scrnum=0
  *scr.Screen = Peek.l(Addr Screen(scrnum))
End If
n.l=0
; adapt out ASL dimensions to the screen
If ASL_xs<10 OR ASL_ys<10
  ASL_xs = QLimit(*scr\Width /2,0,400)
  ASL_ys = *scr\Height*2/3
  ASL_x = 10
  ASL_y = 10
End If
If ASL_xs>*scr\Width Then ASL_xs = *scr\Width
If ASL_x+ASL_xs>*scr\Width Then ASL_x = *scr\Width-ASL_xs-1
If ASL_x<0 Then ASL_x = 0
If ASL_ys>*scr\Height Then ASL_ys = *scr\Height
If ASL_y+ASL_ys>*scr\Height Then ASL_y = *scr\Height-ASL_ys-1
If ASL_y<0 Then ASL_y = 0

End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: aslfo_SetInitialFont{initfontname.s,initfontsize.l}                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - initfontname.s    : ???                                                   /
;/ - initfontsize.l    : ???                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement aslfo_SetInitialFont{initfontname.s,initfontsize.l}
If initfontname><"" Then aslfontdat\fontname = initfontname
If initfontsize>1   Then aslfontdat\fontsize = initfontsize
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslfo_Request{@allowpropfont.l,@*scr.Screen}           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - allowpropfont.l    : ???                                                  /
;/ - *scr.Screen    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l aslfo_Request{@allowpropfont.l,@*scr.Screen}
!_ASL_Init

; Set up all the requester Tags ...
asltag(n)\ti_Tag = #ASLFO_Screen           ,*scr                          : n+1
asltag(n)\ti_Tag = #ASLFO_TitleText        ,&aslfontdat\title             : n+1
asltag(n)\ti_Tag = #ASLFO_InitialLeftEdge  ,ASL_x                         : n+1
asltag(n)\ti_Tag = #ASLFO_InitialTopEdge   ,ASL_y                         : n+1
asltag(n)\ti_Tag = #ASLFO_InitialWidth     ,ASL_xs                        : n+1
asltag(n)\ti_Tag = #ASLFO_InitialHeight    ,ASL_ys                        : n+1
If allowpropfont=False Then  asltag(n)\ti_Tag = #ASLFO_FixedWidthOnly,-1 : n+1

If aslfontdat\ok><""        Then asltag(n)\ti_Tag = #ASLFO_PositiveText,&aslfontdat\ok       : n+1
If aslfontdat\cancel><""    Then asltag(n)\ti_Tag = #ASLFO_NegativeText,&aslfontdat\cancel   : n+1
If aslfontdat\fontname><""  Then asltag(n)\ti_Tag = #ASLFO_InitialName ,&aslfontdat\fontname : n+1
If aslfontdat\fontsize><0   Then asltag(n)\ti_Tag = #ASLFO_InitialSize ,aslfontdat\fontsize  : n+1
asltag(n)\ti_Tag = #TAG_DONE,False
; allocate the requester structure ...
*font_requ.FontRequester = AllocAslRequest_ (#ASL_FontRequest,&asltag(0)\ti_Tag)
If *font_requ
  asltag(0)\ti_Tag = #TAG_DONE,False
  ; do the ASL requester
  If AslRequest_ (*font_requ,0)
    ; read out the results
    a.s=Peek.s(*font_requ\fo_Attr\ta_Name)
    aslfontdat\fontname = a.s
    aslfontdat\fontsize = *font_requ\fo_Attr\ta_YSize
    succ = True
    ; store the user's requester dimensions
    ASL_x   = *font_requ\fo_LeftEdge
    ASL_y   = *font_requ\fo_TopEdge
    ASL_xs  = *font_requ\fo_Width
    ASL_ys  = *font_requ\fo_Height
  End If
  ; free the requester
  FreeAslRequest_ *font_requ
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = aslfo_GetFontName{}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Get the font name of the last requester.                                    /
;/ NOTE: This returns your initial font if the requester was cancelled.        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : font name                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s aslfo_GetFontName{}
Function Return aslfontdat\fontname
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslfo_GetFontSize{}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Get the font y size of the last requester.                                  /
;/ NOTE: This returns your intianl font size If the requester was cancelled.   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : font y size                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l aslfo_GetFontSize{}
Function Return aslfontdat\fontsize
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: aslfo_SetRequesterTitle{title.s,ok.s,cancel.s}                     /
;/                                                                             /
;/ Description:                                                                /
;/ Set the requesters window title, ok-text and cancel-text.                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - title.s    : window title, e.g. "Please choose a font"                    /
;/ - ok.s       : text for ok button, e.g. "Okeydokey!"                        /
;/ - cancel.s   : text for cancel button, e.g."Eeeek!"                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement aslfo_SetRequesterTitle{title.s,ok.s,cancel.s}
aslfontdat\title  = title
aslfontdat\ok     = ok
aslfontdat\cancel = cancel
End Statement





;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslfr_Request{id.l,savemode.l,multiselect.l,drawerso:: /
;/ nly.l,@*scr.Screen,@noIcons.l}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * Do an ASL FileRequester.                                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - id.l             : id slot                                                /
;/ - savemode.l       : -1 = ASL behaviour is for "save file", otherwise "lo:: /
;/ ad file"                                                                    /
;/ - multiselect.l    : -1 = allow multiselect                                 /
;/ - drawersonly.l    : -1 = show only drawers                                 /
;/ - *scr.Screen      : pointer to a screen to open the requester on           /
;/ - noIcons.l        : -1 = hide icon files                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w         : -1 if the requester was answered by the user, 0 if c:: /
;/ ancelled                                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l aslfr_Request{id.l,savemode.l,multiselect.l,drawersonly.l,@*scr.Screen,@noIcons.l}
SHARED aslfiledat(),file_requ_items()
!_ASL_Init

If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0

asltag(n)\ti_Tag = #ASLFR_Screen           ,*scr                          : n+1
asltag(n)\ti_Tag = #ASLFR_TitleText        ,&aslfiledat(id)\title         : n+1
asltag(n)\ti_Tag = #ASLFR_InitialLeftEdge  ,ASL_x                         : n+1
asltag(n)\ti_Tag = #ASLFR_InitialTopEdge   ,ASL_y                         : n+1
asltag(n)\ti_Tag = #ASLFR_InitialWidth     ,ASL_xs                        : n+1
asltag(n)\ti_Tag = #ASLFR_InitialHeight    ,ASL_ys                        : n+1
asltag(n)\ti_Tag = #ASLFR_DoSaveMode       ,savemode                      : n+1
asltag(n)\ti_Tag = #ASLFR_DoMultiSelect    ,multiselect                   : n+1
asltag(n)\ti_Tag = #ASLFR_DrawersOnly      ,drawersonly                   : n+1
asltag(n)\ti_Tag = #ASLFR_RejectIcons      ,noIcons                       : n+1

If aslfiledat(id)\ok     ><"" Then asltag(n)\ti_Tag = #ASLFR_PositiveText,&aslfiledat(id)\ok          : n+1
If aslfiledat(id)\cancel ><"" Then asltag(n)\ti_Tag = #ASLFR_NegativeText,&aslfiledat(id)\cancel      : n+1
If aslfiledat(id)\fil    ><"" AND drawersonly=False Then asltag(n)\ti_Tag = #ASLFR_InitialFile,&aslfiledat(id)\fil : n+1
If aslfiledat(id)\path   ><""
  asltag(n)\ti_Tag = #ASLFR_InitialDrawer,&aslfiledat(id)\path        : n+1
Else
  ;asltag(n)\ti_Tag = #ASLFR_InitialShowVolumes,True               : n+1
End If
If aslfiledat(id)\patt><""
  asltag(n)\ti_Tag = #ASLFR_InitialPattern,&aslfiledat(id)\patt       : n+1
  asltag(n)\ti_Tag = #ASLFR_DoPatterns,True                       : n+1
Else
  asltag(n)\ti_Tag = #ASLFR_DoPatterns,False                      : n+1
End If
asltag(n)\ti_Tag = #TAG_DONE,False                                        : n+1

*file_requ.FileRequester_TK = AllocAslRequest_ (#ASL_FileRequest,&asltag(0)\ti_Tag)
If *file_requ
  asltag(0)\ti_Tag = #TAG_DONE,False
  If AslRequest_ (*file_requ,0)
    d$=Peek.s(*file_requ\fr_Drawer) ;,256)
    f$=Peek.s(*file_requ\fr_File); ,256)
    p$=Peek.s(*file_requ\fr_Pattern);
    ;d$=Left$(d$,Instr(d$,Chr$(0))-1)
    ;f$=Left$(f$,Instr(f$,Chr$(0))-1)
    aslfiledat(id)\fil     = f$
    aslfiledat(id)\path    = d$
    aslfiledat(id)\patt    = p$

    If d$<>""
      If Right$(d$,1)<>":" AND Right$(d$,1)<>"/" Then d$=d$+"/"
    EndIf
    aslfiledat(id)\filecount = 0

    ClearList file_requ_items()
    If multiselect Then selected.l= *file_requ\fr_NumArgs :Else selected = 0

    If selected>1                     ;multiple files were selected
      For i.l = 0 To selected -1
        *nextarg.l=Peek.l(*file_requ\fr_ArgList+(8*i)+4)
        If AddItem(file_requ_items())
          file_requ_items()\pathname=d$+Peek.s(*nextarg)
          aslfiledat(id)\filecount + 1
        EndIf
      Next
    Else                              ;one or less selected
      If AddItem(file_requ_items())
        If drawersonly
          file_requ_items()\pathname=d$
        Else
          file_requ_items()\pathname=d$+f$
        End If
        aslfiledat(id)\filecount = 1
      EndIf
    EndIf
    succ = True
  End If

  ASL_x   = *file_requ\fr_LeftEdge
  ASL_y   = *file_requ\fr_TopEdge
  ASL_xs  = *file_requ\fr_Width
  ASL_ys  = *file_requ\fr_Height

  FreeAslRequest_ *file_requ
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = aslfr_GetNextFile{}                                    /
;/                                                                             /
;/ Description:                                                                /
;/   ;asltag(n)\ti_Tag = #aslfr_InitialShowVolumes,True               : n+1    /
;/     ;d$=Left$(d$,Instr(d$,Chr$(0))-1)                                       /
;/     ;f$=Left$(f$,Instr(f$,Chr$(0))-1)                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s aslfr_GetNextFile{}
SHARED file_requ_items()
a.s = ""
ResetList file_requ_items()
If NextItem(file_requ_items())
  a.s = file_requ_items()\pathname
  KillItem file_requ_items()
End If
Function Return a.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ASLFR_GetNumFilesChosen{id.l}                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - id.l    : ???                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l aslfr_GetNumFilesChosen{id.l}
SHARED aslfiledat()
Function Return aslfiledat(id)\filecount
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ASLFR_SetPath{id.l,path.s,@fil.s,@patt.s,@optional.l}              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - id.l    : ???                                                             /
;/ - path.s    : ???                                                           /
;/ - fil.s    : ???                                                            /
;/ - patt.s    : ???                                                           /
;/ - optional.l    : ???                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement aslfr_SetPath{id.l,path.s,@fil.s,@patt.s,@optional.l}
SHARED aslfiledat()
If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0
If fil ><"" OR optional=False Then aslfiledat(id)\fil   = fil.s
aslfiledat(id)\path  = path.s
If patt><"" OR optional=False Then aslfiledat(id)\patt  = patt.s
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: aslfr_SetFile{id.l,fil.s}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - id.l    : ???                                                             /
;/ - fil.s    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement aslfr_SetFile{id.l,fil.s}
SHARED aslfiledat()
If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0
aslfiledat(id)\fil = fil
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: aslfr_SetPattern{id.l,pattern.s}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - id.l    : ???                                                             /
;/ - pattern.s    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement aslfr_SetPattern{id.l,pattern.s}
SHARED aslfiledat()
If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0
aslfiledat(id)\patt = pattern
End Statement
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: aslfr_SetRequesterTitle{id.l,title.s,ok.s,cancel.s}                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - id.l    : ???                                                             /
;/ - title.s    : ???                                                          /
;/ - ok.s    : ???                                                             /
;/ - cancel.s    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement aslfr_SetRequesterTitle{id.l,title.s,ok.s,cancel.s}
SHARED aslfiledat()
If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0
aslfiledat(id)\title  = title.s
aslfiledat(id)\ok     = ok.s
aslfiledat(id)\cancel = cancel.s
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = ASLFR_GetFile{id.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - id.l    : ???                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s aslfr_GetFile{id.l}
SHARED aslfiledat()
If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0
Function Return aslfiledat(id)\fil
End Function

 

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = aslfr_GetPath{id.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - id.l    : ???                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s aslfr_GetPath{id.l}
SHARED aslfiledat()
If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0
Function Return aslfiledat(id)\path
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = aslfr_GetPattern{id.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - id.l    : ???                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s aslfr_GetPattern{id.l}
SHARED aslfiledat()
If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0
Function Return aslfiledat(id)\patt
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ASL_SetRequesterDims{x.l,y.l,xs.l,ys.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement asl_SetRequesterDims{x.l,y.l,xs.l,ys.l}
SHARED ASL_x.l,ASL_y.l,ASL_xs.l,ASL_ys.l
ASL_x = x
ASL_y = y
ASL_xs = xs
ASL_ys = ys
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = aslfr_EasyRequest{id.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - id.l    : ???                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s aslfr_EasyRequest{id.l}
filename.s = ""
If aslfr_Request{id.l,False,False,False}
  filename.s =  aslfr_GetNextFile{}
End If
Function Return filename.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: aslsm_SetRequesterTitle{title.s,ok.s,cancel.s}                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - title.s    : ???                                                          /
;/ - ok.s    : ???                                                             /
;/ - cancel.s    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement aslsm_SetRequesterTitle{title.s,ok.s,cancel.s}
aslscreendat\title  = title
aslscreendat\ok     = ok
aslscreendat\cancel = cancel
End Statement
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslsm_Request{@doDims.l,@doDepth.l,@doOverscan.l,@do:: /
;/ Autoscroll.l,@*scr.Screen}                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Open an ASL screen requester and let the user choose a screenmode.          /
;/ To reduce the number of screenmodes to the ones matching your specs, use :: /
;/ screen_ASL_setmin, screen_aslsetmax and screen_aslsetinitial.               /
;/ This is a bit more lowlevel than screen_ask. You have to compose your bit:: /
;/  mask out of the following values:                                          /
;/                                                                             /
;/ #asl_scr_width      =  1 ; ask for width                                    /
;/ #asl_scr_height     =  2 ; ask for height                                   /
;/ #asl_scr_depth      =  4 ; ask for depth                                    /
;/ #asl_scr_overscan   =  8 ; ask for overscan                                 /
;/ #asl_scr_ascroll    = 16 ; ask for auto scroll                              /
;/                                                                             /
;/ After calling the requester, you can read out the screen information by s:: /
;/ creen_ASL_width, screen_ASL_height, screen_ASL_depth, screen_ASL_id, scre:: /
;/ en_ASL_autoscroll and screen_ask_overscan.                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - title.s    : title of the ASL requester                                   /
;/ - mask.l    : bit mask of things you want the ASL requester to ask          /
;/ - doDims.l    : ???                                                         /
;/ - doDepth.l    : ???                                                        /
;/ - doOverscan.l    : ???                                                     /
;/ - doAutoscroll.l    : ???                                                   /
;/ - *scr.Screen    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : -1 if the requester was answered, 0 if aborted             /
;/                                                                             /
;/ See also:                                                                   /
;/ screen_ASL_setmin, screen_aslsetmax, screen_aslsetinitial                   /
;/ screen_ASL_width, screen_ASL_height, screen_ASL_depth, screen_ASL_id, scr:: /
;/ een_ASL_autoscroll, screen_ask_overscan                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l aslsm_Request{@doDims.l,@doDepth.l,@doOverscan.l,@doAutoscroll.l,@*scr.Screen}
!_ASL_Init

asltag(n)\ti_Tag = #ASLSM_Screen           ,*scr                         : n+1

If aslscreendat\title><""  Then asltag(n)\ti_Tag = #ASLSM_TitleText   ,&aslscreendat\title    : n+1
If aslscreendat\ok><""     Then asltag(n)\ti_Tag = #ASLSM_PositiveText,&aslscreendat\ok       : n+1
If aslscreendat\cancel><"" Then asltag(n)\ti_Tag = #ASLSM_NegativeText,&aslscreendat\cancel   : n+1

asltag(n)\ti_Tag = #ASLSM_InitialLeftEdge  ,ASL_x                        : n+1
asltag(n)\ti_Tag = #ASLSM_InitialTopEdge   ,ASL_y                        : n+1
asltag(n)\ti_Tag = #ASLSM_InitialWidth     ,ASL_xs                       : n+1
asltag(n)\ti_Tag = #ASLSM_InitialHeight    ,ASL_ys                       : n+1

If aslscreendat\mind>0 Then asltag(n)\ti_Tag = #ASLSM_MinDepth  , aslscreendat\mind  : n+1
If aslscreendat\maxd>0 Then asltag(n)\ti_Tag = #ASLSM_MaxDepth  , aslscreendat\maxd  : n+1
If aslscreendat\minw>0 Then asltag(n)\ti_Tag = #ASLSM_MinWidth  , aslscreendat\minw  : n+1
If aslscreendat\minh>0 Then asltag(n)\ti_Tag = #ASLSM_MinHeight , aslscreendat\minh  : n+1
If aslscreendat\maxw>0 Then asltag(n)\ti_Tag = #ASLSM_MaxWidth  , aslscreendat\maxw  : n+1
If aslscreendat\maxh>0 Then asltag(n)\ti_Tag = #ASLSM_MaxHeight , aslscreendat\maxh  : n+1

If aslscreendat\scr_id    >0 Then asltag(n)\ti_Tag = #ASLSM_InitialDisplayID      ,aslscreendat\scr_id        : n+1
If aslscreendat\scr_depth >0 Then asltag(n)\ti_Tag = #ASLSM_InitialDisplayDepth   ,aslscreendat\scr_depth     : n+1
If aslscreendat\scr_width >0 Then asltag(n)\ti_Tag = #ASLSM_InitialDisplayWidth   ,aslscreendat\scr_width     : n+1
If aslscreendat\scr_height>0 Then asltag(n)\ti_Tag = #ASLSM_InitialDisplayHeight  ,aslscreendat\scr_height    : n+1

asltag(n)\ti_Tag = #ASLSM_DoWidth         , doDims  : n+1
asltag(n)\ti_Tag = #ASLSM_DoHeight        , doDims  : n+1
asltag(n)\ti_Tag = #ASLSM_DoDepth         , doDepth : n+1
asltag(n)\ti_Tag = #ASLSM_DoOverscanType  , doOverscan  : n+1
asltag(n)\ti_Tag = #ASLSM_DoAutoScroll    , doAutoscroll  : n+1
asltag(n)\ti_Tag = #TAG_DONE,False

*screen_requ.ScreenModeRequester = AllocAslRequest_ (#ASL_ScreenModeRequest,&asltag(0)\ti_Tag)
If *screen_requ
  asltag(0)\ti_Tag = #TAG_DONE,False
  If AslRequest_ (*screen_requ,0)
    aslscreendat\scr_width     = *screen_requ\sm_DisplayWidth
    aslscreendat\scr_height    = *screen_requ\sm_DisplayHeight
    aslscreendat\scr_depth     = *screen_requ\sm_DisplayDepth
    aslscreendat\scr_overscan  = *screen_requ\sm_OverscanType
    aslscreendat\scr_id        = *screen_requ\sm_DisplayID
    aslscreendat\scr_ascroll   = *screen_requ\sm_AutoScroll
    succ = *screen_requ\sm_DisplayID
  End If
  ASL_x   = *screen_requ\sm_LeftEdge
  ASL_y   = *screen_requ\sm_TopEdge
  ASL_xs  = *screen_requ\sm_Width
  ASL_ys  = *screen_requ\sm_Height

  FreeAslRequest_ *screen_requ
Else
  error{"\\__THIS_FUNCTION: Unable to allocate ASL screen requester!"}
End If
Function Return succ.l
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = aslsm_GetModeName{@modeid.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - modeid.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s aslsm_GetModeName{@modeid.l}
DEFTYPE.NameInfo naminfo
name.s = "unknown"
If modeid =-1 Then modeid = aslscreendat\scr_id
If modeid=-1 OR modeid = 0
  *scr.Screen = Peek.l(Addr Screen(Used Screen))
  If *scr
    modeid.l = GetVPModeID_(*scr\ViewPort)
  End If
End If
If modeid><-1 AND modeid><0
  mode_ptr.l = FindDisplayInfo_ (modeid)
  If mode_ptr
    count.l = GetDisplayInfoData_ (mode_ptr,&naminfo,SizeOf.NameInfo,#DTAG_NAME,modeid)
    name.s = Peek.s(&naminfo\Name)
  End If
End If
Function Return name
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslsm_GetWidth{}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Return the screen width that was selected by the last call of screen_asl :: /
;/ or screen_ask.                                                              /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : screen width                                               /
;/                                                                             /
;/ See also:    screen_asl                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l aslsm_GetWidth{}
SHARED aslscreendat
Function Return aslscreendat\scr_width
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslsm_GetHeight{}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ Return the screen height selected by the last call of screen_asl.           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : screen height                                              /
;/                                                                             /
;/ See also:    screen_asl                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l aslsm_GetHeight{}
SHARED aslscreendat
Function Return aslscreendat\scr_height
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslsm_GetDepth{}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Return the screen depth (2^depth = number of colours) selected by the las:: /
;/ t call of screen_asl.                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : screen depth                                               /
;/                                                                             /
;/ See also:    screen_asl                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l aslsm_GetDepth{}
SHARED aslscreendat
Function Return aslscreendat\scr_depth
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslsm_GetModeID{}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ Return the screen mode ID selected by the last call of screen_asl.          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : screen mode ID                                             /
;/                                                                             /
;/ See also:    screen_asl                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l aslsm_GetModeID{}
SHARED aslscreendat
Function Return aslscreendat\scr_id
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslsm_GetOverscan{}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Return the overscan value selected by the last call of screen_asl.          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : overscan value                                             /
;/                                                                             /
;/ See also:    screen_asl                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l aslsm_GetOverscan{}
SHARED aslscreendat
Function Return aslscreendat\scr_overscan
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslsm_GetAutoscroll{}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l aslsm_GetAutoscroll{}
SHARED aslscreendat
Function Return aslscreendat\scr_ascroll
End Function
 

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = aslsm_GetBestModeID{scr_width.l,scr_height.l,scr_dep:: /
;/ th.l}                                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Return the best screenmode ID for the given screen dimensions.              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - scr_width.l    : ???                                                      /
;/ - scr_height.l    : ???                                                     /
;/ - scr_depth.l    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l aslsm_GetBestModeID{scr_width.l,scr_height.l,scr_depth.l}
;modeID.l= BestCModeIDTagList_ (Tags(#CYBRBIDTG_NominalWidth,scr_width,#CYBRBIDTG_NominalHeight,scr_height,#CYBRBIDTG_Depth,scr_depth))
; replaced cybergraphics-function with standard os function
modeID.l= BestModeIDA_(Tags(#BIDTAG_NominalWidth,scr_width,#BIDTAG_NominalHeight,scr_height,#BIDTAG_Depth,scr_depth))

Function Return modeID
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: aslsm_SetMinDims{min_width.l,min_height.l,min_depth.l}             /
;/                                                                             /
;/ Description:                                                                /
;/ Set the minimum dimensions of the screen you which to be selectable in th:: /
;/ e ASL requester.                                                            /
;/ Screenmodes that can not handle your dimensions will be filtered out from:: /
;/  the list.                                                                  /
;/ Hint: To force hi/true color screen modes, depth min_depth to 16.           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - min_width.l    : screen width                                             /
;/ - min_height.l    : screen height                                           /
;/ - min_depth.l    : screen depth                                             /
;/                                                                             /
;/ See also:    screen_asl, screen_ASL_setmax                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement aslsm_SetMinDims{min_width.l,min_height.l,min_depth.l}
aslscreendat\minw = min_width
aslscreendat\minh = min_height
aslscreendat\mind = min_depth
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: aslsm_SetMaxDims{max_width.l,max_height.l,max_depth.l}             /
;/                                                                             /
;/ Description:                                                                /
;/ Set the maximum dimensions of the screen you which to be selectable in th:: /
;/ e ASL requester.                                                            /
;/ Screenmodes that can not handle your dimensions will be filtered out from:: /
;/  the list.                                                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - max_width.l    : screen width                                             /
;/ - max_height.l    : screen height                                           /
;/ - max_depth.l    : screen depth                                             /
;/                                                                             /
;/ See also:    screen_asl, screen_ASL_setmin                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement aslsm_SetMaxDims{max_width.l,max_height.l,max_depth.l}
aslscreendat\maxw = max_width
aslscreendat\maxh = max_height
aslscreendat\maxd = max_depth
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: aslsm_SetInitialDims{init_width.l,init_height.l,init_depth.l}      /
;/                                                                             /
;/ Description:                                                                /
;/ Set the initial values of the ASL screen mode requester.                    /
;/ Note: Usually, you set this to the values of the current screen.            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - init_id.l    : screen mode id                                             /
;/ - init_width.l    : screen width                                            /
;/ - init_height.l    : screen height                                          /
;/ - init_depth.l    : screen depth                                            /
;/                                                                             /
;/ See also:    screen_asl                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement aslsm_SetInitialDims{init_width.l,init_height.l,init_depth.l}
aslscreendat\scr_depth  = init_depth
aslscreendat\scr_width  = init_width
aslscreendat\scr_height = init_height
End Statement

 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: aslsm_SetInitialModeID{init_id.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - init_id.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement aslsm_SetInitialModeID{init_id.l}
DEFTYPE.DimensionInfo diminfo
aslscreendat\scr_id     = init_id
If init_id><0 AND init_id><-1
  mode_ptr.l = FindDisplayInfo_ (init_id)
  If mode_ptr
  GetDisplayInfoData_ mode_ptr,&diminfo,SizeOf.DimensionInfo,#DTAG_DIMS,init_id
  ;aslscreendat\scr_depth  = diminfo\MaxDepth
  aslscreendat\scr_width  = diminfo\Nominal\MaxX-diminfo\Nominal\MinX+1
  aslscreendat\scr_height = diminfo\Nominal\MaxY-diminfo\Nominal\MinY+1
  End If
End If
End Statement
 



CNIF #__include=0

; Easy file Demo
;============================================
message{"Selected : "+aslfr_EasyRequest{0}}


; Experienced demo: (+multiselect)
;============================================
aslfr_SetRequesterTitle{2,"Select file(s)!","Okeydokey!","Ooops!"}
aslfr_SetPath {2,"SYS:","noidea.mp3","#?"}
If aslfr_Request{2,False,True,False}
  message{"Selected path: \\22"+aslfr_GetPath{2}+"\\22"}
  Repeat
    a.s = aslfr_GetNextFile{}
    If a.s><"" Then message{"Selected file: \\22"+a.s+"\\22"}
  Until a.s = ""
Else
  message{"Cancelled!"}
End If


; Font select demo
;============================================
aslfo_SetRequesterTitle{"Choose a font","Okeydokey!","Ooops!"}
aslfo_SetInitialFont{"helvetica.font",13 }
If aslfo_Request{True}
  message{"Font selected: "+aslfo_GetFontName{}+" / "+Str$(aslfo_GetFontSize{})}
Else
  message{"Cancelled!"}
End If


; Screenmode demo
;============================================
WbToScreen 0
*scr.Screen = Peek.l(Addr Screen(0))
WBmodeID.l = GetVPModeID_(*scr\ViewPort)
aslsm_SetInitialModeID{WBmodeID}
modeID.l = aslsm_Request{True,True,False,False}
If modeID
  a.s = "Selected screenmodeID is 0x"
  a.s + Hex$(aslsm_GetModeID{})+",\\nnamed \\22"+aslsm_GetModeName{}+"\\22,\\nand the dims: "
  a.s + Str$(aslsm_GetWidth{})+"x"+Str$(aslsm_GetHeight{})+"x"
  a.s + Str$(aslsm_GetDepth{})
  message{a.s}
Else
  message{"Cancelled!"}
End If
End
CEND

