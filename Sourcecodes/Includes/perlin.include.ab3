; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "perlin2d"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 35
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 21
; CursorColumn    = 14
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: perlin.include                                                        /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
  OPTIMIZE 7
  SYNTAX 6
  WBStartup
CEND

XINCLUDE "tempbuffer.include.ab3"
XINCLUDE "random.include.ab3"

#perlin_ip_linear  = 0
#perlin_ip_cos     = 1
#perlin_ip_none    = 2
#perlin_ip_default = #perlin_ip_cos

NEWTYPE.perlin
  posx.f
  posy.f
  lposxI.l
  lposyI.l
  seedyA.l
  seedyB.l
  seedxA.l
  seedxB.l
  initseedy.l
  initx.l
  initx2.l
  mposx.l
  mposy.l
  dx.f
  dy.f
  frcy.f
  ifrcy.f
  ax.l
  bx.l
  ax2.l
  bx2.l
  pers.f
End NEWTYPE

Dim perlinA.perlin(32)

NEWTYPE.perlinPars
  persistence.f
  frequ.f
  squeeze.f
  gamma.f
  threshold.l
  maxoctaves.l
  seed.l
  FGRGB.l
  BGRGB.l
End NEWTYPE

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !perlin_nrnd {seed}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - seed    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro perlin_nrnd ; {seed}
  `1 * 196314165 + 907633515
End Macro
 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !perlin_rnd8 {seed}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - seed    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro perlin_rnd8 ; {seed}
  ((`1 LSR 7) & $FF)
End Macro
 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !perlin_rnd24 {seed}                                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - seed    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro perlin_rnd24 ; {seed}
  ((`1 LSR 4) & $FFFFFF)
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: perlin_RenderNoise2d {*rp.RastPort,*rec.Rectangle,*perlinPars.per:: /
;/ linPars,@*rpi.RastPort}                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/ - *rec.Rectangle    : ???                                                  /
;/ - *perlinPars.perlinPars    : ???                                           /
;/ - *rpi.RastPort    : ???                                                    /
;/ - *rec.Rectangle    : ???                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement perlin_RenderNoise2d{*rp.RastPort,*rec.Rectangle,*perlinPars.perlinPars,@*rpi.RastPort}
 SHARED perlinA()
  USEPATH perlinengine
  If *rp=-1  Then *rp=0
  If *rpi=-1 Then *rpi=0
  blitwidth.l = (*rec\MaxX-*rec\MinX+1)
  tmp_buff.l = tempbuffer_Get{blitwidth*4}
  If tmp_buff=0 Then Statement Return

  USEPATH perlinA(octaves)

  pers.f = 1
  norm.f = 0
  If *perlinPars\gamma  < 0.001 Then gamma.f   = 1.0 : Else gamma   = 1/*perlinPars\gamma
  If *perlinPars\squeeze< 0.001 Then squeeze.f = 1.0 : Else squeeze = *perlinPars\squeeze
  brgb.l = *perlinPars\BGRGB
  frgb.l = *perlinPars\FGRGB

  d.f = *perlinPars\frequ

  dx.f = d * squeeze
  dy.f = d / squeeze

  width.f  = *rec\MaxX - *rec\MinX +1
  height.f = *rec\MaxY - *rec\MinY +1

  dx = Int(dx * width+1)  /  width
  dy = Int(dy * height+1) / height
  If dx>1 Then dx=1
  If dy>1 Then dy=1
  threshold.f = *perlinPars\threshold
  seed.l = *perlinPars\seed
  octaves.l=-1

  Repeat ;/* estimate the amount of octaves that are max needed */
    octaves    + 1
    \posx      = 0
    \posy      = 0
    posxI.l    = 0
    posyI.l    = 0
    \lposxI    = 0
    \lposyI    = 0
    f.f        = dx * width-1
    \mposx     = Int(f)
    f.f        = dy * height-1
    \mposy     = Int(f)

    seed       = !perlin_nrnd{seed}
    \seedyA    = seed
    \initseedy = \seedyA
    \seedyB    = !perlin_nrnd{\seedyA}

    seed       = !perlin_nrnd{seed}
    \seedxB    = seed

    seed       = !perlin_nrnd{seed}
    \seedyB    = seed + $DEADBEEF

    \dx        = dx
    \dy        = dy
  ;  If \dx>1 Then \dx=1
  ;  If \dy>1 Then \dy=1

    dx         * 2
    dy         * 2
    \pers      = pers
    norm.f     + pers
    pers       * *perlinPars\persistence
  Until (dx>=2 AND dy>=2) OR octaves>=*perlinPars\maxoctaves-1 OR pers<0.005

  ;If octaves>0 Then octaves-1
  boost.f = 256.0/(256.0-threshold)
  norm = (1/norm)
  !setfpcr {($10)}

  r.l = frgb        & $FF
  g.l = frgb LSR 8  & $FF
  b.l = frgb LSR 16 & $FF

  br.l = brgb        & $FF
  bg.l = brgb LSR 8  & $FF
  bb.l = brgb LSR 16 & $FF

  tmpb.l = tmp_buff


  USEPATH perlinA(o)
  For y.l = *rec\MinY To *rec\MaxY
    For o.l = 0 To octaves
      \posy  + \dy
      posyI  = \posy
      CNIF #perlin_ip_default = #perlin_ip_linear
        \frcy  = (\posy - posyI)
      CEND
      CNIF #perlin_ip_default = #perlin_ip_cos
        \frcy  = (1-Cos((\posy - posyI)*Pi))*0.5
      CEND
      \ifrcy = 1- \frcy

      If posyI>\lposyI
        \lposyI = posyI
        \seedyA = \seedyB
        \seedyB = !perlin_nrnd{\seedxB }
        If posyI >= \mposy Then \seedyB = \initseedy
      End If

      \seedxA = \seedyA
      \seedxB = \seedyB
      \posx   = 0

      \ax     = !perlin_rnd24{\seedxA} : !perlin_nrnd {\seedxA}
      \bx     = !perlin_rnd24{\seedxA} : !perlin_nrnd {\seedxA}
      \ax2    = !perlin_rnd24{\seedxB} : !perlin_nrnd {\seedxB}
      \bx2    = !perlin_rnd24{\seedxB} : !perlin_nrnd {\seedxB}

      \initx  = \ax
      \initx2 = \ax2

      \lposxI = 0
    Next


    posy.f = \posy
    dy.f   = \dy
    posx.f = \posx

    For x.l = 0 To blitwidth-1

      col.f = 0
      For o.l=0 To octaves
        posx.f = \posx

        posx + \dx
        posxI = posx
        CNIF #perlin_ip_default = #perlin_ip_linear
        frcx.f = (posx - posxI)
        CEND
        CNIF #perlin_ip_default = #perlin_ip_cos
        frcx.f  = (1-Cos((posx - posxI)*Pi))*0.5
        CEND
        CNIF #perlin_ip_default = #perlin_ip_none
        frcx.f = 0
        CEND
        \posx=posx

        ifrcx.f = 1 - frcx

        If posxI>\lposxI
          \lposxI = posxI
          !perlin_nrnd {\seedxA}
          \ax = \bx
          \bx = !perlin_rnd24{\seedxA}

          !perlin_nrnd {\seedxB}
          \ax2 = \bx2
          \bx2 = !perlin_rnd24{\seedxB}
          If posxI>=\mposx Then \bx = \initx : \bx2 = \initx2
        End If
        col.f + (\ax * (ifrcx*\ifrcy)  + \bx * (frcx*\ifrcy)  + \ax2 * (ifrcx*\frcy)  + \bx2 * (frcx*\frcy))*\pers
      Next
      bright.f = (((col/256/256 * norm) - threshold ) * boost) /256

      If bright>0
        bright.f = bright ^ gamma
        If brgb><-1
          pen.l = bright * 255.0
          If pen>$FF Then pen = $FF
          bpen.l = $FF-pen
          pen.l = ((pen*r + bpen*br) LSR 8 )  | ((pen*g + bpen*bg) & $FF00)  | ((pen*b + bpen*bb) & $FF00 ) LSL 8
          ;pen.l = ((pen*r + bpen*br) LSR 8 )  | ((pen*g + bpen*bg) LSR 8) LSL 8 + ((pen*b + bpen*bb) LSR 8) LSL 16
        Else
          pen.l = bright * 65535.0
          If pen>$FFFF Then pen = $FFFF
          frc.l = pen & $FF
          pen   = pen LSR 8
          pen   = pen | pen LSL 8 | pen LSL 16 | frc LSL 24
        EndIf
      Else
         If brgb><-1
           pen=brgb
         Else
           pen = 0
         End If
      End If
      Poke.l tmpb+x*4,pen
    Next

    If *rp
      WritePixelArray_ tmpb,0,0,blitwidth,*rp,*rec\MinX,y,blitwidth,1,#RECTFMT_ARGB
    End If
    If *rpi
      WritePixelArray_ tmpb,0,0,blitwidth,*rpi,0,y-*rec\MinY,blitwidth,1,#RECTFMT_ARGB
      ;ptr.l = *rpi\BitMap\Planes
      ;CopyMem_ tmpb,ptr,blitwidth*4
    End If
  Next
  !setfpcr {0}
End Statement


CNIF #__include=0
  WbToScreen 0
  ShowScreen 0
  Window 0,0,0,640,480,$E,"Perlin Noise Examples",1,0

  XINCLUDE "eclock.include.ab3"

  eclock_Start{1000}
  ; Clouds
  rec.Rectangle\MinX = 20,26,620,466
  par.perlinPars\persistence = 0.5,.009,0.6,1.3,80,6,123456
  par\FGRGB = $FFFFFF,$224477
  perlin_RenderNoise2d{RastPort,rec,par}
  y.l = eclock_Stop{}
  NPrint "Time: ",y


  ; Clouds
  rec.Rectangle\MinX = 20,226,620,466
  par.perlinPars\persistence = 1.0,1,1.0,1.0,0,1,1
  par\FGRGB = $FFFFFF,$000000
  perlin_RenderNoise2d{RastPort,rec,par}
  y.l = eclock_Stop{}
  NPrint "Time: ",y


  ; Plasma
  rec.Rectangle\MinX = 320,26,620,826
  par.perlinPars\persistence = 0.2,.009,0.3,1.3,100,6,123456
  par\FGRGB = $FFFFAA,$551122
  perlin_RenderNoise2d{RastPort,rec,par}

  ;; Jungle
  ;rec.Rectangle\MinX = 20,226,620,826
  ;perlin_RenderNoise2d{RastPort,rec,0.9,.02,$99AA55,84,1}
  ;
  ;; Wood
  ;rec.Rectangle\MinX = 320,226,620,826
  ;perlin_RenderNoise2d{RastPort,rec,0.99,.1,$885522,34,5,$332200}
  ;
  ;; Lawn
  ;rec.Rectangle\MinX = 20,426,320,826
  ;perlin_RenderNoise2d{RastPort,rec,1.1,.121,$44AA33,-44,1}
  ;
  ;; Water
  ;rec.Rectangle\MinX = 320,426,620,826
  ;perlin_RenderNoise2d{RastPort,rec,0.7,.029,$566BB,-14,.4,$222233}
  ;
  ;; Brushed Metal
  ;rec.Rectangle\MinX = 20,626,320,826
  ;perlin_RenderNoise2d{RastPort,rec,0.8,.1,$9099AA,-144,0.1}
  ;
  ;; Sand
  ;rec.Rectangle\MinX = 320,626,620,826
  ;perlin_RenderNoise2d{RastPort,rec,1.5,1/25,$DDBB99,64,.9,$221111}
  ;
  While WaitEvent><#IDCMP_CLOSEWINDOW:Wend

  End
CEND
