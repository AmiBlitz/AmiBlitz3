; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "IFFILBMDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 5
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: bmp.include                                                      /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 29/12/2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements:  Amiblitz2.4                                                  /
;/                                                                             /
;/ Purpose:                                                                    /
;/ This is an include to support the image.include with bmp save f:: /
;/ unctionality.                                                               /
;/                                                                             /
;/ Abstract:                                                                   /
;/ This include is of not much use stand alone, as you can load and save ima:: /
;/ ges through the image.include, but you might want to have a look at the s:: /
;/ ource code for educational reasons.                                         /
;/                                                                             /
;/ User Constants:     none                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
XINCLUDE "tempbuffer.include.ab3"
CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
CEND

#BI_RGB       = 0;  An uncompressed Format.
#BI_RLE8      = 1 ;A run-length encoded (RLE) format for bitmaps with 8 bpp.
#BI_RLE4      = 2 ; An RLE Format For bitmaps with 4 bpp.
#BI_BITFIELDS = 3 ; Specifies that the BitMap is NOT compressed AND that the color table consists of three DWORD color masks
#BI_JPEG      = 4 ;Specifies that the image is compressed using the JPEG File Interchange Format. JPEG compression trades Off compression against loss; it can achieve a compression ratio of 20:1 with little noticeable loss.
#BI_PNG       = 5

XINCLUDE "file.include.ab3"

NEWTYPE.BMPF_Header
bfType.w
bfSize.l
bfReserved.l
bfOffBits.l ; offset in File
End NEWTYPE

NEWTYPE.BMP3_Header
biSize.l    ; 40
biWidth.l
biHeight.l
biPlanes.w   ; 1
biBitCount.w  ; 1,4,8,15,24,32
biCompression.l ; 0=none, 1=RLE8, 2=RLE4,3=Bitfield
biSizeImage.l ; 0
biXPelsPerMeter.l ; 0
biYPelsPerMeter.l ; 0
biClrUsed.l  ; 0
biClrlImportant.l ; 0
End NEWTYPE

NEWTYPE.BMP5_Header
  bV5Size.l;           0
  bV5Width.l;          4
  bV5Height.l;         8
  bV5Planes.w         ; 12
  bV5BitCount.w;       14
  bV5Compression.l;    16
  bV5SizeImage.l;      20
  bV5XPelsPerMeter.l;  24
  bV5YPelsPerMeter.l;  28
  bV5ClrUsed.l;        32
  bV5ClrImportant.l;   36
  bV5RedMask.l;        40
  bV5GreenMask.l;      44
  bV5BlueMask.l;       48
  bV5AlphaMask.l;      52
  bV5CSType.l;         56
  bV5Endpoints.l[9];   60 + 9*4
  bV5GammaRed.l;       96
  bV5GammaGreen.l;     100
  bV5GammaBlue.l;      104
  bV5Intent.l;         108
  bV5ProfileData.l;    112
  bV5ProfileSize.l;    116
  bV5Reserved.l;       120
End NEWTYPE


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ilbm_WriteARGBBitMap {dos.l,ARGBptr.l,img_width.l,img:: /
;/ _height.l,bpr.l,@compress.l,@pixfmt.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - dos.l    : ???                                                            /
;/ - ARGBptr.l    : ???                                                        /
;/ - img_width.l    : ???                                                      /
;/ - img_height.l    : ???                                                     /
;/ - bpr.l    : ???                                                            /
;/ - compress.l    : ???                                                       /
;/ - usealpha.l    : ???                                                       /
;/ - pixfmt.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l bmp_WriteARGBBitMap24 {fid.l,ARGBptr.l,img_width.l,img_height.l,bpr.l}
succ.l = False
DEFTYPE.BMPF_Header bmph
DEFTYPE.BMP3_Header bmp3
If fid>=0
  linesize.l = (img_width*3 +3) & %11111111111111111111111111111100
  datsize.l = (linesize) * img_height
  bmph\bfType          = con_WFlip{19778}
  bmph\bfSize          = con_LFlip{datsize + SizeOf.BMP3_Header + SizeOf.BMPF_Header}
  bmph\bfReserved      = 0
  bmph\bfOffBits       = con_LFlip{SizeOf.BMPF_Header+SizeOf.BMP3_Header} ; offset in File
  bmp3\biSize          = con_LFlip{SizeOf.BMP3_Header }   ; 40
  bmp3\biWidth         = con_LFlip{img_width}
  bmp3\biHeight        = con_LFlip{img_height}
  bmp3\biPlanes        = con_WFlip{1 }  ; 1
  bmp3\biBitCount      = con_WFlip{24} ; 1,4,8,15,24,32
  bmp3\biCompression   = #BI_RGB  ; 0=none, 1=RLE8, 2=RLE4,3=Bitfield
  bmp3\biSizeImage     = con_LFlip{datsize} ; 0
  bmp3\biXPelsPerMeter = 0 ; 0
  bmp3\biYPelsPerMeter = 0 ; 0
  bmp3\biClrUsed       = 0 ; 0
  bmp3\biClrlImportant = 0 ; 0

  file_WriteMem{fid,bmph,SizeOf.BMPF_Header}
  file_WriteMem{fid,bmp3,SizeOf.BMP3_Header}

  tmp.l = tempbuffer_Get{linesize}
  If tmp
    For y.l=0 To img_height-1
      ptr.l = tmp
      sptr.l = ARGBptr + (img_height-y-1)*bpr
      For x.l=0 To img_width-1
        ARGB.l = Peek.l(sptr) : sptr+4
        Poke.b ptr,(ARGB & $000000FF)        : ptr+1
        Poke.b ptr,(ARGB & $0000FF00) LSR 8  : ptr+1
        Poke.b ptr,(ARGB & $00FF0000) LSR 16 : ptr+1
      Next
      file_WriteMem {fid,tmp,linesize}
    Next
    succ=True
  End If
End If
Function Return succ
End Function

Function.l bmp_WriteARGBBitMap32 {fid.l,ARGBptr.l,img_width.l,img_height.l,bpr.l}
succ.l = False
DEFTYPE.BMPF_Header bmph
DEFTYPE.BMP5_Header bmp5
If fid>=0
  linesize.l = (img_width*4)
  datsize.l = (linesize) * img_height
  bmph\bfType          = con_WFlip{19778}
  bmph\bfSize          = con_LFlip{datsize + SizeOf.BMP5_Header + SizeOf.BMPF_Header}
  bmph\bfReserved      = 0
  bmph\bfOffBits       = con_LFlip{SizeOf.BMPF_Header+SizeOf.BMP5_Header} ; offset in File

  bmp5\bV5Size          = con_LFlip{SizeOf.BMP3_Header }   ; 40
  bmp5\bV5Width         = con_LFlip{img_width}
  bmp5\bV5Height        = con_LFlip{img_height}
  bmp5\bV5Planes        = con_WFlip{1 }  ; 1
  bmp5\bV5BitCount      = con_WFlip{32} ; 1,4,8,15,24,32
  bmp5\bV5Compression   = con_LFlip{#BI_BITFIELDS} ; 0=none, 1=RLE8, 2=RLE4,3=Bitfield
  bmp5\bV5SizeImage     = con_LFlip{datsize} ; 0
  bmp5\bV5XPelsPerMeter = 0 ; 0
  bmp5\bV5YPelsPerMeter = 0 ; 0
  bmp5\bV5ClrUsed       = 0 ; 0
  bmp5\bV5ClrImportant  = 0 ; 0
  bmp5\bV5RedMask       = $00FF0000
  bmp5\bV5GreenMask     = $0000FF00
  bmp5\bV5BlueMask      = $000000FF
  bmp5\bV5AlphaMask     = $FF000000
  bmp5\bV5CSType        = con_LFlip{@"sRGB"}
  bmp5\bV5Endpoints[0]  = 0
  bmp5\bV5Endpoints[1]  = 0
  bmp5\bV5Endpoints[2]  = 0
  bmp5\bV5Endpoints[3]  = 0
  bmp5\bV5Endpoints[4]  = 0
  bmp5\bV5Endpoints[5]  = 0
  bmp5\bV5Endpoints[6]  = 0
  bmp5\bV5Endpoints[7]  = 0
  bmp5\bV5Endpoints[8]  = 0
  bmp5\bV5GammaRed      = 0
  bmp5\bV5GammaGreen    = 0
  bmp5\bV5GammaBlue     = 0
  bmp5\bV5Intent        = 0
  bmp5\bV5ProfileData   = 0
  bmp5\bV5ProfileSize   = 0
  bmp5\bV5Reserved      = 0

  file_WriteMem{fid,bmph,SizeOf.BMPF_Header}
  file_WriteMem{fid,bmp5,SizeOf.BMP5_Header}

  tmp.l = tempbuffer_Get{linesize}
  If tmp
    For y.l=0 To img_height-1
      ptr.l = tmp
      sptr.l = ARGBptr + (img_height-y-1)*bpr
      CopyMem_ sptr,ptr,linesize
      file_WriteMem {fid,tmp,linesize}
    Next
    succ=True
  End If
End If
Function Return succ
End Function
 




CNIF #__include=0
NPrint "Sorry, no demo!"

CEND
