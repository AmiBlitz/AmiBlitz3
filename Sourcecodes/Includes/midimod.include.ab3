; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 43
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 3
; CursorColumn    = 33
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; Max ChunkyBuffer= 2
; /XTRA
CNIF #__include=0
  OPTIMIZE 4
CEND

XINCLUDE "useful.include.ab3"
XINCLUDE "file_audio.include.ab3"
#MAX_MIDIMODVOICES  = 32
#MAX_MIDIMODSAMPLES = 256

#MMLOOP_NONE          = 0
#MMLOOP_FORWARD       = 1
#MMLOOP_BIDIRECTIONAL = 2

NEWTYPE.mm_Sample
prg.l           ; /* the midi program it listens to..*/
dataP.l         ; /* pointer to sampledata */
flength.l       ; /* length of sampledata in samples */
samplingrate.l  ; /* samplingrate */
rootKey.l       ; /* rootkey */
loopPoint.l     ; /* loop point, or -1 if no loop */
loopType.l      ; /* none or repeart */
*name.str       ; /* pointer to a name string  */
End NEWTYPE

NEWTYPE.mm_Channel
prg.l
gain.l
pan.l
pitch.l
End NEWTYPE

NEWTYPE.mm_Voice
sampleX.l
pitch.l      ; pitch ratio
base.l       ; base
playOffset.l
waitOffset.l
endpos.l
gain.l
note.l
channel.l
konto.l
End NEWTYPE

NEWTYPE.midimod
sample.mm_Sample  [#MAX_MIDIMODSAMPLES] ; 128 voice and 128 drum IDs
channel.mm_Channel[16]                  ; 16 MIDI Channels
voice.mm_Voice    [#MAX_MIDIMODVOICES]  ; polyphony
maxVoices.l
End NEWTYPE

Statement mm_AllNotesOff{*midimod.midimod}
If *midimod=Null Then Statement Return
For voiceX.l=0 To #MAX_MIDIMODVOICES-1 ; all voices off
  *midimod\voice[voiceX]\sampleX=-1
Next
End Statement

Function.l mm_CreateSynth{}
*midimod.midimod = AllocVec_(SizeOf.midimod,#MEMF_ANY)
If *midimod=Null Then Function Return Null
*midimod\maxVoices = #MAX_MIDIMODVOICES

For voiceX.l=0 To #MAX_MIDIMODVOICES-1 ; all voices off
  *midimod\voice[voiceX]\sampleX=-1
Next

For sampleX.l=0 To #MAX_MIDIMODSAMPLES-1 ; clear all samples
  *midimod\sample[sampleX]\dataP = Null
  *midimod\sample[sampleX]\name  = Null
  *midimod\sample[sampleX]\prg   = 0
Next

For channelX.l=0 To 15 ; reset all samples to 0 (piano)
  *midimod\channel[channelX]\prg   = 0
  *midimod\channel[channelX]\gain  = 127
  *midimod\channel[channelX]\pan   = 0
  *midimod\channel[channelX]\pitch = 0
Next
Function Return *midimod
End Function


Statement mm_PressKey{*midimod.midimod,channel.l,note.l,vel.l,offset.l}
If *midimod=Null Then Statement Return
voiceX.l = 0
While(*midimod\voice[voiceX]\sampleX><-1 AND voiceX<*midimod\maxVoices-1)
  voiceX+1
Wend
If (*midimod\voice[voiceX]\sampleX><-1)
  ; force to free a voice
End If
*voice.mm_Voice   = *midimod\voice[voiceX]
*voice\waitOffset = offset
*voice\playOffset = 0
*voice\base       = 256
If channel=9
  prg.l  = 128+note
  p.f = 2^((note-note)/12) * *voice\base
Else
  prg.l = *midimod\channel[channel]\prg
  p.f = 2^((note-60)/12) * *voice\base
End If
*voice\pitch      = Int(p)

For sampleX.l=0 To #MAX_MIDIMODSAMPLES-1
  If prg=*midimod\sample[sampleX]\prg Then *voice\sampleX=sampleX : sampleX=#MAX_MIDIMODSAMPLES-1
Next

*voice\channel    = channel
*voice\endpos     = -1
*voice\gain       = vel * *midimod\channel[channel]\gain / 64
*voice\note       = note
*voice\konto      = 0
End Statement


Statement mm_ReleaseKey{*midimod.midimod,channel.l,note.l,offset.l}
If *midimod=Null Then Statement Return
voiceX.l=0
While(voiceX<*midimod\maxVoices-1)
  If (*midimod\voice[voiceX]\note=note)
    If (*midimod\voice[voiceX]\channel=channel)
      If (*midimod\voice[voiceX]\sampleX>=0)
        *midimod\voice[voiceX]\endpos  = offset
        *midimod\voice[voiceX]\sampleX = -1   ; hack to make it quiet till offset works
        Statement Return
      End If
    End If
  End If
  voiceX+1
Wend
End Statement


Function.l mm_GetFreeSample{*midimod.midimod}
sampleX.l = 0
While sampleX<#MAX_MIDIMODSAMPLES
  If *midimod\sample[sampleX]\dataP=Null Then Function Return sampleX
  sampleX+1
Wend
Function Return -1
End Function


Statement mm_FreeSample{*midimod.midimod,sampleX.l}
If *midimod=Null Then Statement Return
If *midimod\sample[sampleX]\dataP
  FreeVec_ *midimod\sample[sampleX]\dataP
  *midimod\sample[sampleX]\dataP = Null
  *midimod\sample[sampleX]\prg   = 0
End If
str_Free{&*midimod\sample[sampleX]\name}
End Statement

Statement mm_FreeAllSamples{*midimod.midimod}
For sampleX.l=0 To #MAX_MIDIMODSAMPLES-1
  mm_FreeSample{*midimod,sampleX}
Next
End Statement

Statement mm_FreeSynth{*midimod.midimod}
If *midimod=Null Then Statement Return
; /* free all samples */
mm_FreeAllSamples{*midimod}
 
; /* free midimod synthesizer */
FreeVec_ *midimod : *midimod=Null
End Statement

Function.l mm_WriteSample{*midimod.midimod,fid.l,sampleX.l}
file_WriteChunk{fid,@"SMPL"}
  file_WriteTag{fid,@"MPRG",*midimod\sample[sampleX]\prg}
  file_WriteTag{fid,@"FREQ",*midimod\sample[sampleX]\samplingrate}
  file_WriteTag{fid,@"LOOP",*midimod\sample[sampleX]\loopType}
  file_WriteTag{fid,@"LPPO",*midimod\sample[sampleX]\loopPoint}
  file_WriteTag{fid,@"ROOT",*midimod\sample[sampleX]\rootKey}
  file_WriteTagString{fid,@"NAM$",str_Read{&*midimod\sample[sampleX]\name} }
  file_WriteChunk{fid,@"DATA"}
    file_WriteMem{fid,*midimod\sample[sampleX]\dataP,*midimod\sample[sampleX]\flength*2}
  file_CloseChunk{fid,@"DATA"}
file_CloseChunk{fid,@"SMPL"}
Function Return True
End Function

Statement mm_InitSample{*midimod.midimod,sampleX.l}
*midimod\sample[sampleX]\prg          = 0
*midimod\sample[sampleX]\rootKey      = 60
*midimod\sample[sampleX]\loopPoint    = 0
*midimod\sample[sampleX]\loopType     = #MMLOOP_NONE
*midimod\sample[sampleX]\name         = Null
*midimod\sample[sampleX]\samplingrate = 11025
*midimod\sample[sampleX]\flength      = 0
*midimod\sample[sampleX]\dataP        = Null
End Statement
 


Function.l mm_ReadSample{*midimod.midimod,fid.l}
succ.l=False
If file_ReadTag{fid} = @"SMPL"
  size.l = file_GetTagValue{}
  sampleX.l=mm_GetFreeSample{*midimod}
  If sampleX<0 Then Function Return False
  epos.l = file_GetSeekPos{fid} + size
  succ.l=True
  mm_InitSample{*midimod,sampleX}
 While file_GetSeekPos{fid}<epos AND succ=True AND file_EOF{fid}=False
    Select file_ReadTag{fid}
      Case @"MPRG" : *midimod\sample[sampleX]\prg          = file_GetTagValue{}
      Case @"FREQ" : *midimod\sample[sampleX]\samplingrate = file_GetTagValue{}
      Case @"LOOP" : *midimod\sample[sampleX]\loopType     = file_GetTagValue{}
      Case @"LPPO" : *midimod\sample[sampleX]\loopPoint    = file_GetTagValue{}
      Case @"ROOT" : *midimod\sample[sampleX]\rootKey      = file_GetTagValue{}
      Case @"NAM$" : str_Write{&*midimod\sample[sampleX]\name,file_GetTagString{}}
      Case @"DATA"
        *midimod\sample[sampleX]\flength = file_GetTagValue{}/2
        *midimod\sample[sampleX]\dataP = AllocVec_(*midimod\sample[sampleX]\flength*2,#MEMF_ANY)
        If (*midimod\sample[sampleX]\dataP)
          succ=file_ReadMem{fid,*midimod\sample[sampleX]\dataP,*midimod\sample[sampleX]\flength*2}
        End If
      Default
        ; ignore unknown tags...
        succ=False
    End Select
  Wend
  ;error{"Sample read: "+str_Read{&*midimod\sample[sampleX]\name}}
Else
  error {"\\__THIS_FUNCTION: Exspected SMPL chunk but got "+Mkl$(file_GetTagID{})+"!"}
End If
Function Return succ
End Function



Function.l mm_WriteBank{*midimod.midimod,fid.l}
file_WriteChunk{fid,@"MMOD"}
For sampleX.l=0 To #MAX_MIDIMODSAMPLES-1
  If *midimod\sample[sampleX]\dataP
    mm_WriteSample{*midimod,fid,sampleX}
  End If
Next
file_CloseChunk{fid,@"MMOD"}
Function Return True
End Function

Function.l mm_ReadBank{*midimod.midimod,fid.l}
If file_ReadTag{fid} = @"MMOD"
  size.l = file_GetTagValue{}
  epos.l = file_GetSeekPos{fid} + size
  succ.l=True
  While file_GetSeekPos{fid}<epos AND file_EOF{fid}=False AND succ=True
    Select file_ReadTag{fid}
      Case @"SMPL" : file_SeekRel{fid,-8} : succ=mm_ReadSample{*midimod,fid}
      Default
        succ=False
    End Select
  Wend
Else
  error {"\\__THIS_FUNCTION: Exspected MMOD chunk but got "+Mkl$(file_GetTagID{})+"!"}
End If
Function Return succ
End Function

Function.l mm_LoadBank{*midimod.midimod,bankfile.s,replace.l}
succ.l=False
fid.l = file_Open{bankfile,#file_read}
If fid>=0
  If replace Then mm_FreeAllSamples{*midimod}
  succ.l = mm_ReadBank{*midimod,fid}
  file_Close{fid}
End If
Function Return succ
End Function


Function.l mm_SaveBank{*midimod.midimod,bankfile.s,force.l}
succ.l=False
If force
  fid.l = file_Open{bankfile,#file_forcewrite}
Else
  fid.l = file_Open{bankfile,#file_write}
End If
If fid>=0
  succ.l = mm_WriteBank{*midimod,fid}
  file_Close{fid}
End If
Function Return succ
End Function


Function.l mm_ExportBank{}
End Function

Function.l mm_ImportBank{}
End Function


Function.l mm_ImportSample{*midimod.midimod,samplefile.s,sampleX.l}
If *midimod=Null Then Function Return Null
mm_FreeSample{*midimod,sampleX}
*sample.mm_Sample = *midimod\sample[sampleX]
fid.l = ffa_ReadHeader{samplefile}
If fid>=0
  mm_InitSample{*midimod,sampleX}
  *sample\flength      = ffa_GetFrameLength{fid}
  *sample\prg          = sampleX
  *sample\samplingrate = ffa_GetSamplerate{fid}
  *sample\dataP        = AllocVec_(*sample\flength*SizeOf.w,#MEMF_ANY)
  *sample\name         = Null
  str_Write{&*sample\name,dos_RemExt{dos_FilePart{samplefile}}}
  If *sample\dataP
    ffa_ReadData{fid,*sample\dataP,*sample\flength*SizeOf.w,1,16}
  End If
  ffa_Close{fid}
End If
Function Return *sample\dataP
End Function


Function.l mm_OpenMIDIFile{*midimod.midimod,midifile.s}
If *midimod=Null Then Function Return False
 

End Function


Statement mm_GetEventsFromMIDIFile{*midimod.midimod,slength.l}
If *midimod=Null Then Statement Return
 

End Statement


Statement mm_FeedMIDIData{*midimod.midimod,status.l,dat1.l,dat2.l,offset.l}
channel.l = status & %00001111
status.l  = status & %11110000
Select status
  Case $80 ; Note Off          ; note released
    mm_ReleaseKey{*midimod,channel,dat1,-offset}

  Case $90 ; Note On/Off        ; note pressed
    If offset<0 Then offset = 0
    If dat2=0
      mm_ReleaseKey{*midimod,channel,dat1,-offset}
    Else
      mm_PressKey{*midimod,channel,dat1,dat2,-offset}
    End If

  Case $A0 ; aftertouch

  Case $D0 ; poly aftertouch

  Case $C0 ; prg change
    *midimod\channel[channel]\prg = dat1

  Case $B0 ; ctrl
    Select dat1 ; controller #
      Case 7 ; volume
        *midimod\channel[channel]\gain = dat2
      Case  8 ; pan
        *midimod\channel[channel]\pan = dat2 - 64
      Case 120 ; ALL SOUND OF
        mm_AllNotesOff{*midimod}
      Case 123 ; ALL NOTES OFF
        mm_AllNotesOff{*midimod}
    End Select

  Case $E0 ; pitch
    *midimod\channel[channel]\pitch = (dat1*128+dat2)- (64*128)
End Select
End Statement

RunErrsOff
Statement mm_Render{*midimod.midimod,ptr.l,blength.l,sr.l}
If *midimod=Null Then Statement Return
fs.l = 2 ; 4 byte per sample
slength.l = blength/fs

For n.l=0 To slength-1 ; zero the buffer
  Poke.w ptr+n*fs,0
Next

For voiceX.l=0 To *midimod\maxVoices-1 ; for each voice
  *voice.mm_Voice =  *midimod\voice[voiceX]
  If *voice\sampleX>=0 ; is playing...
    *sample.mm_Sample = *midimod\sample[*voice\sampleX]
    If *sample\dataP
      written.l = 0
      toWrite.l = slength
      If *voice\waitOffset<0
        *voice\waitOffset + toWrite
        If *voice\waitOffset>=0
          *voice\playOffset=0
          written = toWrite-*voice\waitOffset
        End If
      End If

      If *voice\waitOffset>=0
        base.l  = *voice\base
        pitch.l = *voice\pitch * sr / *sample\samplingrate
        konto.l  = *voice\konto
        offset.l = *voice\playOffset
        gain.l   = *voice\gain

        Repeat
          toRead.l = (toWrite-written) * pitch/base
          If offset+toRead>=*sample\flength
            toRead = *sample\flength-offset
            toWrite = written + toRead * base/pitch
          End If

          For n.l=written To toWrite-1
            Poke.w ptr+n*fs,((Peek.w(*sample\dataP+offset*2) * gain) ASR 8)+Peek.w(ptr+n*fs)
            konto + pitch
            While konto>=base:konto-base:offset+1:Wend
          Next
          written = toWrite

          If written<slength
            Select *sample\loopType
              Case #MMLOOP_NONE
                *voice\sampleX=-1
              Case #MMLOOP_FORWARD
                If *sample\loopPoint>=0 AND *sample\loopPoint<*sample\flength
                  offset  = *sample\loopPoint
                  toWrite = slength
                Else
                  *voice\sampleX=-1
                End If
            End Select
          End If

        Until *voice\sampleX<0 OR written=slength

        *voice\konto  = konto
        *voice\playOffset = offset
      End If
    Else
      *voice\sampleX=-1
    End If
  End If
Next
End Statement
LastRunErrsMode

