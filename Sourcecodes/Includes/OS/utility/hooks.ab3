; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
CNIF @#UTILITY_HOOKS_H=0
#UTILITY_HOOKS_H = 1
;
; $VER: hooks.ab3 40.0 (28.02.94)
;

CNIF @#EXEC_TYPES_H=0
XINCLUDE "OS/exec/types.ab3"
CEND ;EXEC_TYPES_H

CNIF @#EXEC_NODES_H=0
XINCLUDE "OS/exec/nodes.ab3"
CEND ;EXEC_NODES_H

;/*****************************************************************************/

NEWTYPE.Hook
h_MinNode.MinNode
*h_Entry.l ;/* assembler entry point */
*h_SubEntry.l ;/* often HLL entry point */
*h_Data.b ;/* owner specific  */
End NEWTYPE

;/* Hook calling conventions.
; *
; * The function pointed to by Hook.h_Entry is called with the following
; * parameters:
; *
; * A0 - pointer to hook data structure itself
; * A1 - pointer to parameter structure ("message")
; * A2 - Hook specific address data ("object")
; *
; * Control will be passed to the routine h_Entry.  For many
; * High-Level Languages (HLL), this will be an assembly language
; * stub which pushes registers on the stack, does other setup,
; * and then calls the function at h_SubEntry.
; *
; * The standard C receiving code is:
; *
; *    HookFunc(struct Hook *hook, APTR object, APTR message)
; *
; * Note that register natural order differs from this convention for C
; * parameter order, which is A0,A2,A1.
; *
; * The assembly language stub for "vanilla" C parameter conventions
; * could be:
; *
; * _hookEntry:
; * move.l  a1,-(sp)    ; push message packet pointer
; * move.l  a2,-(sp)    ; push object pointer
; * move.l  a0,-(sp)    ; push hook pointer
; * move.l  h_SubEntry(a0),a0 ; fetch C entry point ...
; * jsr (a0)      ; ... and call it
; * lea 12(sp),sp   ; fix stack
; * rts
; *
; * With this function as your interface stub, you can write a Hook setup
; * function as:
; *
; * InitHook(struct Hook *hook, ULONG (*c_function)(), APTR userdata)
; * {
; * ULONG (*hookEntry)();
; *
; *     hook->h_Entry = hookEntry;
; *     hook->h_SubEntry = c_function;
; *     hook->h_Data  = userdata;
; * }
; *
; * With a compiler capable of registerized parameters, such as SAS C, you
; * can put the C function in the h_Entry field directly. For example, for
; * SAS C:
; *
; *   ULONG __saveds __asm HookFunc(register __a0 struct Hook *hook,
; *          register __a2 APTR       object,
; *          register __a1 APTR       message);
; *
; */

;/*****************************************************************************/

CEND
