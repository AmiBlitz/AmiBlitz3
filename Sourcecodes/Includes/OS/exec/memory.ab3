; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
CNIF @#EXEC_MEMORY_H=0 
#EXEC_MEMORY_H = 1
;
; $VER: memory.ab3 40.0 (28.02.94)
;

CNIF @#EXEC_NODES_H=0 
XINCLUDE "OS/exec/nodes.ab3" 
CEND ;/* EXEC_NODES_H */

;/****** MemChunk ****************************************************/

NEWTYPE.MemChunk
*mc_Next.MemChunk;/* pointer to next chunk */
mc_Bytes.l ;/* chunk byte size */
End NEWTYPE


;/****** MemHeader ***************************************************/

NEWTYPE.MemHeader
mh_Node.Node
mh_Attributes.w ;/* characteristics of this region */
*mh_First.MemChunk;/* first free region  */
*mh_Lower.b ;/* lower memory bound  */
*mh_Upper.b ;/* upper memory bound+1 */
mh_Free.l ;/* total number of free bytes */
End NEWTYPE


;/****** MemEntry ****************************************************/

NEWTYPE.MemEntry
; UNION meu_Reqs.l ;/* the AllocMem requirements */
*meu_Addr.b ;/* the address of this memory region */
;} me_Un;
me_Length.l ;/* the length of this memory region */
End NEWTYPE

;#me_un=#me_Un;/* compatibility - do not use*/
;#me_Reqs=#me_Un.meu_Reqs
;#me_Addr=#me_Un.meu_Addr


;/****** MemList *****************************************************/

;/* Note: SizeOf.MemList includes the size of the first MemEntry! */
NEWTYPE.MemList
ml_Node.Node
ml_NumEntries.w ;/* number of entries in this struct */
ml_ME.MemEntry[1];/* the first entry */
End NEWTYPE

;#ml_me=#ml_ME;/* compatability - do not use */


;/*----- Memory Requirement Types ---------------------------*/
;/*----- See the AllocMem() documentation for details--------*/

#MEMF_ANY=(0);/* Any type of memory will do */
#MEMF_PUBLIC=(1 LSL 0)
#MEMF_CHIP=(1 LSL 1)
#MEMF_FAST=(1 LSL 2)
#MEMF_LOCAL=(1 LSL 8);/* Memory that does not go away at RESET */
#MEMF_24BITDMA=(1 LSL 9);/* DMAable memory within 24 bits of address */
#MEMF_KICK=(1 LSL 10);/* Memory that can be used for KickTags */

#MEMF_CLEAR=(1 LSL 16);/* AllocMem: NULL out area before return */
#MEMF_LARGEST=(1 LSL 17);/* AvailMem: return the largest chunk size */
#MEMF_REVERSE=(1 LSL 18);/* AllocMem: allocate from the top down */
#MEMF_TOTAL=(1 LSL 19);/* AvailMem: return total size of memory */

#MEMF_NO_EXPUNGE=(1 LSL 31);/*AllocMem: Do not cause expunge on failure */

;/*----- Current alignment rules for memory blocks (may increase) -----*/
#MEM_BLOCKSIZE=8
#MEM_BLOCKMASK=(#MEM_BLOCKSIZE-1)


;/****** MemHandlerData **********************************************/
;/* Note:  This structure is *READ ONLY* and only EXEC can create it!*/
NEWTYPE.MemHandlerData
memh_RequestSize.l ;/* Requested allocation size */
memh_RequestFlags.l ;/* Requested allocation flags */
memh_Flags.l ;/* Flags (see below) */
End NEWTYPE

#MEMHF_RECYCLE=(1 LSL 0);/* 0==First time, 1==recycle */

;/****** Low Memory handler return values ***************************/
#MEM_DID_NOTHING=(0);/* Nothing we could do... */
#MEM_ALL_DONE=(-1);/* We did all we could do */
#MEM_TRY_AGAIN=(1);/* We did some, try the allocation again */

CEND ;/* EXEC_MEMORY_H */
