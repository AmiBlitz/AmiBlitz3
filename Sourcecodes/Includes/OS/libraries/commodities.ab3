; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
CNIF @#LIBRARIES_COMMODITIES_H=0
#LIBRARIES_COMMODITIES_H = 1
;
; $VER: commodities.ab3 40.0 (02.03.94)
;


CNIF @#EXEC_TYPES_H=0
XINCLUDE"exec/types.ab3"
CEND ;EXEC_TYPES_H

CNIF @#EXEC_PORTS_H=0
XINCLUDE"exec/ports.ab3"
CEND ;EXEC_PORTS_H


;/*****************************************************************************/


;/* object creation macros */
Macro CxFilter:CreateCxObj_(#CX_FILTER,`1,0):End Macro
Macro CxSender:CreateCxObj_(#CX_SEND,`1,`2):End Macro
Macro CxSignal:CreateCxObj_(#CX_SIGNAL,`1,`2):End Macro
Macro CxTranslate:CreateCxObj_(#CX_TRANSLATE,`1,0):End Macro
Macro CxDebug:CreateCxObj_(#CX_DEBUG,`1,0):End Macro
Macro CxCustom:CreateCxObj_(#CX_CUSTOM,`1,`2):End Macro


;/*****************************************************************************/


NEWTYPE.NewBroker
nb_Version.b ;/* Must be set to NB_VERSION */
pad1.b
*nb_Name.b
*nb_Title.b
*nb_Descr.b
nb_Unique.w
nb_Flags.w
nb_Pri.b
pad2.b
*nb_Port.MsgPort
nb_ReservedChannel.w
End NEWTYPE

;/* constant for NewBroker.nb_Version */
#NB_VERSION=5;/* Version of NewBroker structure */

;/* Sizes for various buffers */
#CBD_NAMELEN=24
#CBD_TITLELEN=40
#CBD_DESCRLEN=40

;/* Flags for NewBroker.nb_Unique */
#NBU_DUPLICATE=0
#NBU_UNIQUE=1;/* will not allow duplicates       */
#NBU_NOTIFY=2;/* sends CXM_UNIQUE to existing broker */

;/* Flags for NewBroker.nb_Flags */
#COF_SHOW_HIDE=4


;/*****************************************************************************/


;/* Fake data types for system private objects */
;typedef LONG CxObj;
;typedef LONG CxMsg;

;/* Pointer to a function returning a LONG */
;typedef LONG (*PFL)();


;/*****************************************************************************/


;/* Commodities object types */
#CX_INVALID=0;/* not a valid object (probably null) */
#CX_FILTER=1;/* input event messages only     */
#CX_TYPEFILTER=2;/* obsolete, do not use      */
#CX_SEND=3;/* sends a message      */
#CX_SIGNAL=4;/* sends a signal      */
#CX_TRANSLATE=5;/* translates input event into chain  */
#CX_BROKER=6;/* application representative     */
#CX_DEBUG=7;/* dumps info to serial port     */
#CX_CUSTOM=8;/* application provides function     */
#CX_ZERO=9;/* system terminator node     */


;/*****************************************************************************/


;/* Commodities message types */
#CXM_IEVENT=(1 LSL 5)
#CXM_COMMAND=(1 LSL 6)

;/* Only CXM_IEVENT messages are passed through the input network. Other types
; * of messages are sent to an optional port in your broker. This means that
; * you must test the message type in your message handling, if input messages
; * and command messages come to the same port.
; *
; * CXM_IEVENT: Messages of this type rattle around the Commodities input
; *        network. They are sent to you by a Sender object, and passed
; *        to you as a synchronous function call by a Custom object.
; *
; *        The message port or function entry point is stored in the
; *        object, and the ID field of the message will be set to what
; *        you arrange issuing object.
; *
; *        The data section of the message will point to the input event
; *        triggering the message.
; *
; * CXM_COMMAND: These messages are sent to a port attached to your Broker.
; *   They are sent to you when the controller program wants your
; *   program to do something. The ID value identifies the command.
; */

;/* ID values associated with a message of type CXM_COMMAND */
#CXCMD_DISABLE=(15);/* please disable yourself  */
#CXCMD_ENABLE=(17);/* please enable yourself  */
#CXCMD_APPEAR=(19);/* open your window, if you can  */
#CXCMD_DISAPPEAR=(21);/* go dormant    */
#CXCMD_KILL=(23);/* go away for good   */
#CXCMD_LIST_CHG=(27);/* Someone changed the broker list */
#CXCMD_UNIQUE=(25);/* someone tried to create a broker
;            * with your name. Suggest you appear.
;            */


;/*****************************************************************************/


NEWTYPE.InputXpression
ix_Version.b ;/* must be set to IX_VERSION */
ix_Class.b ;/* class must match exactly  */

ix_Code.w ;/* Bits that we want */
ix_CodeMask.w ;/* Set bits here to indicate which bits in ix_Code
;        * are don't care bits.
;        */
ix_Qualifier.w ;/* Bits that we want */
ix_QualMask.w ;/* Set bits here to indicate which bits in
;        * ix_Qualifier are don't care bits
;        */
ix_QualSame.w ;/* synonyms in qualifier */
End NEWTYPE
;typedef struct InputXpression IX;

;/* constant for InputXpression.ix_Version */
#IX_VERSION=2

;/* constants for InputXpression.ix_QualSame */
#IXSYM_SHIFT=1;/* left- and right- shift are equivalent     */
#IXSYM_CAPS=2;/* either shift or caps lock are equivalent  */
#IXSYM_ALT=4;/* left- and right- alt are equivalent      */

#IXSYM_SHIFTMASK=(#IEQUALIFIER_LSHIFT|#IEQUALIFIER_RSHIFT)
#IXSYM_CAPSMASK=(#IXSYM_SHIFTMASK|#IEQUALIFIER_CAPSLOCK)
#IXSYM_ALTMASK=(#IEQUALIFIER_LALT|#IEQUALIFIER_RALT)

;/* constant for InputXpression.ix_QualMask */
#IX_NORMALQUALS=$7FFF;/* avoid RELATIVEMOUSE */

;/* matches nothing */
Macro NULL_IX:`1\ix_Class=#IECLASS_NULL):End Macro


;/*****************************************************************************/


;/* Error returns from CxBroker() */
#CBERR_OK=0;/* No error       */
#CBERR_SYSERR=1;/* System error, no memory, etc    */
#CBERR_DUP=2;/* uniqueness violation     */
#CBERR_VERSION=3;/* didn't understand NewBroker.nb_Version */


;/*****************************************************************************/


;/* Return values from CxObjError() */
#COERR_ISNULL=1;/* you called CxObjError(NULL)    */
#COERR_NULLATTACH=2;/* someone attached NULL to my list   */
#COERR_BADFILTER=4;/* a bad filter description was given */
#COERR_BADTYPE=8;/* unmatched type-specific operation  */


;/*****************************************************************************/

CEND
