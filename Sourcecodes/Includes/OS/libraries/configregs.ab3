; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
CNIF @#LIBRARIES_CONFIGREGS_H=0
#LIBRARIES_CONFIGREGS_H = 1
;
; $VER: configregs.ab3 (03.03.94)
;


CNIF @#EXEC_TYPES_H=0
XINCLUDE"exec/types.ab3"
CEND ;EXEC_TYPES_H

;/*
;** AutoConfig (tm) boards each contain a 32 byte "ExpansionRom" area that is
;** read by the system software at configuration time.  Configuration of each
;** board starts when the ConfigIn* signal is passed from the previous board
;** (or from the system for the first board).  Each board will present it's
;** ExpansionRom structure at location $00E80000 to be read by the system.
;** This file defines the appearance of the ExpansionRom area.
;**
;** Expansion boards are actually organized such that only one nybble per
;** 16 bit word contains valid information.  The low nybbles of each
;** word are combined to fill the structure below. (This table is structured
;** as LOGICAL information.  This means that it never corresponds exactly
;** with a physical implementation.)
;**
;** The ExpansionRom space is further split into two regions:  The first 16
;** bytes are read-only.  Except for the er_type field, this area is inverted
;** by the system software when read in.  The second 16 bytes contain the
;** control portion, where all read/write registers are located.
;**
;** The system builds one "ConfigDev" structure for each board found.  The
;** list of boards can be examined using the expansion.library/FindConfigDev
;** function.
;**
;** A special "hacker" Manufacturer ID number is reserved for test use:
;** 2011 ($7DB).  When inverted this will look like $F824.
;*/

NEWTYPE.ExpansionRom;/* -First 16 bytes of the expansion ROM */
er_Type.b ;/* Board type, size and flags */
er_Product.b ;/* Product number, assigned by manufacturer */
er_Flags.b ;/* Flags */
er_Reserved03.b ;/* Must be zero ($ff inverted) */
er_Manufacturer.w ;/* Unique ID,ASSIGNED BY COMMODORE-AMIGA! */
er_SerialNumber.l ;/* Available for use by manufacturer */
er_InitDiagVec.w ;/* Offset to optional "DiagArea" structure */
er_Reserved0c.b
er_Reserved0d.b
er_Reserved0e.b
er_Reserved0f.b
End NEWTYPE


;/*
;** Note that use of the ec_BaseAddress register is tricky.  The system
;** will actually write twice.  First the low order nybble is written
;** to the ec_BaseAddress register+2 (D15-D12). Then the entire byte is
;** written to ec_BaseAddress (D15-D8). This allows writing of a byte-wide
;** address to nybble size registers.
;*/

NEWTYPE.ExpansionControl;/* -Second 16 bytes of the expansion ROM */
ec_Interrupt.b ;/* Optional interrupt control register */
ec_Z3_HighBase.b ;/* Zorro III   : Config address bits 24-31 */
ec_BaseAddress.b ;/* Zorro II/III: Config address bits 16-23 */
ec_Shutup.b ;/* The system writes here to shut up a board */
ec_Reserved14.b
ec_Reserved15.b
ec_Reserved16.b
ec_Reserved17.b
ec_Reserved18.b
ec_Reserved19.b
ec_Reserved1a.b
ec_Reserved1b.b
ec_Reserved1c.b
ec_Reserved1d.b
ec_Reserved1e.b
ec_Reserved1f.b
End NEWTYPE

;/*
;** many of the constants below consist of a triplet of equivalent
;** definitions: xxMASK is a bit mask of those bits that matter.
;** xxBIT is the starting bit number of the field.  xxSIZE is the
;** number of bits that make up the definition. This method is
;** used when the field is larger than one bit.
;**
;** If the field is only one bit wide then the xxB_xx and xxF_xx convention
;** is used (xxB_xx is the bit number, and xxF_xx is mask of the bit).
;*/

;/* manifest constants */
#E_SLOTSIZE=$10000
#E_SLOTMASK=$ffff
#E_SLOTSHIFT=16

;/* these define the free regions of Zorro memory space.
;** THESE MAY WELL CHANGE FOR FUTURE PRODUCTS!
;*/
#E_EXPANSIONBASE=$00e80000;/* Zorro II  config address */
#EZ3_EXPANSIONBASE=$ff000000;/* Zorro III config address */

#E_EXPANSIONSIZE=$00080000;/* Zorro II  I/O � cards */
#E_EXPANSIONSLOTS=8

#E_MEMORYBASE=$00200000;/* Zorro II  8MB space */
#E_MEMORYSIZE=$00800000
#E_MEMORYSLOTS=128

#EZ3_CONFIGAREA=$40000000;/* Zorro III space */
#EZ3_CONFIGAREAEND=$7FFFFFFF;/* Zorro III space */
#EZ3_SIZEGRANULARITY=$00080000;/* 512K increments */



;/**** er_Type definitions (ttldcmmm) ***************************************/

;/* er_Type board type bits -- the OS ignores "old style" boards */
#ERT_TYPEMASK=$c0;/* Bits 7-6 */
#ERT_TYPEBIT=6
#ERT_TYPESIZE=2
#ERT_NEWBOARD=$c0
#ERT_ZORROII=#ERT_NEWBOARD
#ERT_ZORROIII=$80

;/* other bits defined in er_Type */
#ERTB_MEMLIST=5;/* Link RAM into free memory list */
#ERTB_DIAGVALID=4;/* ROM vector is valid */
#ERTB_CHAINEDCONFIG=3;/* Next config is part of the same card */

#ERTF_MEMLIST=(1 LSL 5)
#ERTF_DIAGVALID=(1 LSL 4)
#ERTF_CHAINEDCONFIG=(1 LSL 3)

;/* er_Type field memory size bits */
#ERT_MEMMASK=$07;/* Bits 2-0 */
#ERT_MEMBIT=0
#ERT_MEMSIZE=3



;/**** er_Flags byte -- for those things that didn't fit into the type byte ****/
;/**** the hardware stores this byte in inverted form      ****/
#ERFF_MEMSPACE=(1 LSL 7);/* Wants to be in 8 meg space. */
#ERFB_MEMSPACE=7;/* (NOT IMPLEMENTED) */

#ERFF_NOSHUTUP=(1 LSL 6);/* Board can't be shut up */
#ERFB_NOSHUTUP=6

#ERFF_EXTENDED=(1 LSL 5);/* Zorro III: Use extended size table */
#ERFB_EXTENDED=5;/*       for bits 0-2 of er_Type */
;/* Zorro II : Must be 0 */

#ERFF_ZORRO_III=(1 LSL 4);/* Zorro III: must be 1 */
#ERFB_ZORRO_III=4;/* Zorro II : must be 0 */

#ERT_Z3_SSMASK=$0F;/* Bits 3-0.  Zorro III ��-Size.  How */
#ERT_Z3_SSBIT=0;/* much space the card actually uses   */
#ERT_Z3_SSSIZE=4;/* (regardless of config granularity)  */
;/* Zorro II : must be 0        */


;/* ec_Interrupt register (unused) ********************************************/
#ECIB_INTENA=1
#ECIB_RESET=3
#ECIB_INT2PEND=4
#ECIB_INT6PEND=5
#ECIB_INT7PEND=6
#ECIB_INTERRUPTING=7

#ECIF_INTENA=(1 LSL 1)
#ECIF_RESET=(1 LSL 3)
#ECIF_INT2PEND=(1 LSL 4)
#ECIF_INT6PEND=(1 LSL 5)
#ECIF_INT7PEND=(1 LSL 6)
#ECIF_INTERRUPTING=(1 LSL 7)



;/* figure out amount of memory needed by this box/board */
;Macro ERT_MEMNEEDED:(((`1)&#ERT_MEMMASK)? $10000 LSL (((`1)&ERT_MEMMASK) -1) / $800000 )
; What does the ? mean

;/* same as ERT_MEMNEEDED, but return number of slots */
;Macro ERT_SLOTSNEEDED:(((`1)&ERT_MEMMASK)? 1 lsl (((`1)&ERT_MEMMASK)-1) : $80 ):End Macro
; What does the ? mean


;/* convert a expansion slot number into a memory address */
Macro EC_MEMADDR:((`1)LSL(#E_SLOTSHIFT)):End Macro

;/* a kludge to get the byte offset of a structure */
;No idea to convert here...


;/***************************************************************************
;**
;** these are the specifications for the diagnostic area.  If the Diagnostic
;** Address Valid bit is set in the Board Type byte (the first byte in
;** expansion space) then the Diag Init vector contains a valid offset.
;**
;** The Diag Init vector is actually a word offset from the base of the
;** board.  The resulting address points to the base of the DiagArea
;** structure.  The structure may be physically implemented either four,
;** eight, or sixteen bits wide.  The code will be copied out into
;** ram first before being called.
;**
;** The da_Size field, and both code offsets (da_DiagPoint and da_BootPoint)
;** are offsets from the diag area AFTER it has been copied into ram, and
;** "de-nibbleized" (if needed).  (In other words, the size is the size of
;** the actual information, not how much address space is required to
;** store it.)
;**
;** All bits are encoded with uninverted logic (e.g. 5 volts on the bus
;** is a logic one).
;**
;** If your board is to make use of the boot facility then it must leave
;** its config area available even after it has been configured.  Your
;** boot vector will be called AFTER your board's final address has been
;** set.
;**
;****************************************************************************/

NEWTYPE.DiagArea
da_Config.b ;/* see below for definitions */
da_Flags.b ;/* see below for definitions */
da_Size.w ;/* the size (in bytes) of the total diag area */
da_DiagPoint.w ;/* where to start for diagnostics, or zero */
da_BootPoint.w ;/* where to start for booting */
da_Name.w ;/* offset in diag area where a string */
;/*   identifier can be found (or zero if no */
;/*   identifier is present). */

da_Reserved01.w ;/* two words of reserved data. must be zero. */
da_Reserved02.w
End NEWTYPE

;/* da_Config definitions */
;/*
;** DAC_BYTEWIDE can be simulated using DAC_NIBBLEWIDE.
;*/
#DAC_BUSWIDTH=$C0;/* two bits � bus width */
#DAC_NIBBLEWIDE=$00
#DAC_BYTEWIDE=$40;/* BUG: Will �� work under V34 Kickstart! */
#DAC_WORDWIDE=$80

#DAC_BOOTTIME=$30;/* two bits � when � boot */
#DAC_NEVER=$00;/* obvious */
#DAC_CONFIGTIME=$10;/* � da_BootPoint when first configing */
;/*   the device */
#DAC_BINDTIME=$20;/* run when binding drivers � boards */

;/*
;**
;** These are the calling conventions for the diagnostic callback
;** (from da_DiagPoint):
;**
;** A7 -- points to at least 2K of stack
;** A6 -- ExecBase
;** A5 -- ExpansionBase
;** A3 -- your board's ConfigDev structure
;** A2 -- Base of diag/init area that was copied
;** A0 -- Base of your board
;**
;** Your board must return a value in D0.  If this value is NULL, then
;** the diag/init area that was copied in will be returned to the free
;** memory pool.
;*/

CEND
