; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
CNIF @#LIBRARIES_REALTIME_H=0
#LIBRARIES_REALTIME_H = 1
;
; $VER: realtime.ab3 40.0 (02.03.94)
;

;/*****************************************************************************/


CNIF @#EXEC_TYPES_H=0
XINCLUDE"exec/types.ab3"
CEND ;EXEC_TYPES_H

CNIF @#EXEC_LISTS_H=0
XINCLUDE"exec/lists.ab3"
CEND ;EXEC_LISTS_H

CNIF @#EXEC_LIBRARIES_H=0
XINCLUDE"exec/libraries.ab3"
CEND ;EXEC_LIBRARIES_H

CNIF @#UTILITY_TAGITEM_H=0
XINCLUDE"utility/tagitem.ab3"
CEND ;UTILITY_TAGITEM_H

CNIF @#UTILITY_HOOKS_H=0
XINCLUDE"utility/hooks.ab3"
CEND ;UTILITY_HOOKS_H


;/*****************************************************************************/


;/* realtime.library's idea of time is based on a clock which emits a pulse
; * 1200 times a second (1.2kHz). All time values maintained by realtime.library
; * are based on this number. For example, the field RealTimeBase->rtb_Time
; * expresses an amount of time equivalent to (RealTimeBase->rtb_Time/TICK_FREQ)
; * seconds.
; */
#TICK_FREQ=1200


;/*****************************************************************************/


;/* Each Conductor represents a group of applications which wish to remain
; * synchronized together.
; *
; * This structure must only be allocated by realtime.library and is
; * READ-ONLY!
; */
NEWTYPE.Conductor
cdt_Link.Node
cdt_Reserved0.w
cdt_Players.MinList;/* this conductor's players   */
cdt_ClockTime.l ;/* current time of this sequence */
cdt_StartTime.l ;/* start time of this sequence   */
cdt_ExternalTime.l ;/* time from external unit   */
cdt_MaxExternalTime.l ;/* upper limit on sync'd time   */
cdt_Metronome.l ;/* MetricTime highest pri node   */
cdt_Reserved1.w
cdt_Flags.w ;/* conductor flags    */
cdt_State.b ;/* playing or stopped    */
End NEWTYPE

;/* Flag bits for Conductor.cdt_Flags */
#CONDUCTF_EXTERNAL=(1 LSL 0);/* clock is externally driven */
#CONDUCTF_GOTTICK=(1 LSL 1);/* received 1st external tick */
#CONDUCTF_METROSET=(1 LSL 2);/* cdt_Metronome filled in  */
#CONDUCTF_PRIVATE=(1 LSL 3);/* conductor is private  */

#CONDUCTB_EXTERNAL=0
#CONDUCTB_GOTTICK=1
#CONDUCTB_METROSET=2
#CONDUCTB_PRIVATE=3

;/* constants for Conductor.cdt_State and SetConductorState() */
#CONDSTATE_STOPPED=0;/* clock is stopped     */
#CONDSTATE_PAUSED=1;/* clock is paused     */
#CONDSTATE_LOCATE=2;/* go to 'running' when ready    */
#CONDSTATE_RUNNING=3;/* run clock NOW     */

;/* These do not actually exist as Conductor states, but are used as additional
; * arguments to SetConductorState()
; */
#CONDSTATE_METRIC=-1;/* ask high node to locate    */
#CONDSTATE_SHUTTLE=-2;/* time changing but not running */
#CONDSTATE_LOCATE_SET=-3;/* maestro done locating    */


;/*****************************************************************************/


;/* The Player is the connection between a Conductor and an application.
; *
; * This structure must only be allocated by realtime.library and is
; * READ-ONLY!
; */
NEWTYPE.Player
pl_Link.Node
pl_Reserved0.b
pl_Reserved1.b
*pl_Hook.Hook;/* player's hook function  */
*pl_Source.Conductor;/* pointer to parent context  */
*pl_Task.Task;/* task to signal for alarm  */
pl_MetricTime.l ;/* current time in app's metric */
pl_AlarmTime.l ;/* time to wake up   */
*pl_UserData.w ;/* for application use  */
pl_PlayerID.w ;/* for application use  */
pl_Flags.w ;/* general Player flags  */
End NEWTYPE

;/* Flag bits for Player.pl_Flags */
#PLAYERF_READY=(1 LSL 0);/* player is ready to go!     */
#PLAYERF_ALARMSET=(1 LSL 1);/* alarm is set      */
#PLAYERF_QUIET=(1 LSL 2);/* a dummy player, used for sync */
#PLAYERF_CONDUCTED=(1 LSL 3);/* give me metered time     */
#PLAYERF_EXTSYNC=(1 LSL 4);/* granted external sync     */

#PLAYERB_READY=0
#PLAYERB_ALARMSET=1
#PLAYERB_QUIET=2
#PLAYERB_CONDUCTED=3
#PLAYERB_EXTSYNC=4


;/*****************************************************************************/


;/* Tags for CreatePlayer(), SetPlayerAttrs(), and GetPlayerAttrs() */
#PLAYER_Base=(#TAG_USER+64)
#PLAYER_Hook=(#PLAYER_Base+1);/* set address of hook function */
#PLAYER_Name=(#PLAYER_Base+2);/* name of player       */
#PLAYER_Priority=(#PLAYER_Base+3);/* priority of player       */
#PLAYER_Conductor=(#PLAYER_Base+4);/* set conductor for player     */
#PLAYER_Ready=(#PLAYER_Base+5);/* the "ready" flag       */
#PLAYER_AlarmTime=(#PLAYER_Base+12);/* alarm time (sets PLAYERF_ALARMSET) */
#PLAYER_Alarm=(#PLAYER_Base+13);/* sets/clears PLAYERF_ALARMSET flag  */
#PLAYER_AlarmSigTask=(#PLAYER_Base+6);/* task to signal for alarm/notify    */
#PLAYER_AlarmSigBit=(#PLAYER_Base+8);/* signal bit for alarm (or -1) */
#PLAYER_Conducted=(#PLAYER_Base+7);/* sets/clears PLAYERF_CONDUCTED flag   */
#PLAYER_Quiet=(#PLAYER_Base+9);/* don't process time thru this */
#PLAYER_UserData=(#PLAYER_Base+10)
#PLAYER_ID=(#PLAYER_Base+11)
#PLAYER_ExtSync=(#PLAYER_Base+14);/* attempt/release to ext sync  */
#PLAYER_ErrorCode=(#PLAYER_Base+15);/* error return value       */


;/*****************************************************************************/


;/* Method types for messages sent via a Player's hook */
#PM_TICK=0
#PM_STATE=1
#PM_POSITION=2
#PM_SHUTTLE=3

;/* used for PM_TICK, PM_POSITION and PM_SHUTTLE methods */
NEWTYPE.pmTime
pmt_Method.l ;/* PM_TICK, PM_POSITION, or PM_SHUTTLE */
pmt_Time.l
End NEWTYPE

;/* used for the PM_STATE method */
NEWTYPE.pmState
pms_Method.l ;/* PM_STATE */
pms_OldState.l
End NEWTYPE


;/*****************************************************************************/


;/* Possible lock types for LockRealTime() */
#RT_CONDUCTORS=0;/* conductor list */


;/*****************************************************************************/


;/* realtime.library error codes */
#RTE_NOMEMORY=801;/* memory allocation failed      */
#RTE_NOCONDUCTOR=802;/* player needs a conductor      */
#RTE_NOTIMER=803;/* timer (CIA) allocation failed */
#RTE_PLAYING=804;/* can't shuttle while playing   */


;/*****************************************************************************/


;/* OpenLibrary("realtime.library",0) returns a pointer to this structure.
; * All fields are READ-ONLY.
; */
NEWTYPE.RealTimeBase
rtb_LibNode.Library
rtb_Reserved0.b[2]

rtb_Time.l ;/* current time        */
rtb_TimeFrac.l ;/* fixed-point fraction part of time    */
rtb_Reserved1.w
rtb_TickErr.w ;/* nanosecond error from ideal Tick     */
End NEWTYPE
;/* length to real tick length      */

;/* Actual tick length is: 1/TICK_FREQ + rtb_TickErr/1e9 */

#RealTime_TickErr_Min=-705
#RealTime_TickErr_Max=705


;/*****************************************************************************/

CEND
