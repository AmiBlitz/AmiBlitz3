; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
CNIF @#DOS_DOSEXTENS_H=0 
#DOS_DOSEXTENS_H = 1

;
; $VER: dosextens.ab3 40.0 (28.02.94)
;

CNIF @#EXEC_TASKS_H=0 
XINCLUDE "OS/exec/tasks.ab3" 
CEND 

CNIF @#EXEC_PORTS_H=0 
XINCLUDE "OS/exec/ports.ab3" 
CEND 

CNIF @#EXEC_LIBRARIES_H=0 
XINCLUDE "OS/exec/libraries.ab3" 
CEND 

CNIF @#EXEC_SEMAPHORES_H=0 
XINCLUDE "OS/exec/semaphores.ab3" 
CEND 

CNIF @#DEVICES_TIMER_H=0 
XINCLUDE "OS/devices/timer.ab3" 
CEND 

CNIF @#DOS_DOS_H=0 
XINCLUDE "OS/dos/dos.ab3" 
CEND 


;/* All DOS processes have this structure */
;/* Create and Device Proc returns pointer to the MsgPort in this structure */
;/* dev_proc = (struct Process *) (DeviceProc(..) - sizeof(struct Task)); */

NEWTYPE.Process
pr_Task.Task
pr_MsgPort.MsgPort;/* This is BPTR address from DOS functions  */
pr_Pad.w ;/* Remaining variables on 4 byte boundaries */
*pr_SegList.b ;/* Array of seg lists used by this process  */
pr_StackSize.l ;/* Size of process stack in bytes     */
*pr_GlobVec.b ;/* Global vector for this process (BCPL)    */
pr_TaskNum.l ;/* CLI task number of zero if not a CLI     */
*pr_StackBase.b ;/* Ptr to high memory end of process stack  */
pr_Result2.l ;/* Value of secondary result from last call */
*pr_CurrentDir.b ;/* Lock associated with current directory   */
*pr_CIS.b ;/* Current CLI Input Stream      */
*pr_COS.b ;/* Current CLI Output Stream      */
*pr_ConsoleTask.b ;/* Console handler process for current window*/
*pr_FileSystemTask.b ;/* File handler process for current drive   */
*pr_CLI.b ;/* pointer to CommandLineInterface     */
*pr_ReturnAddr.b ;/* pointer to previous stack frame     */
*pr_PktWait.b ;/* Function to be called when awaiting msg  */
*pr_WindowPtr.b ;/* Window for error printing      */

;/* following definitions are new with 2.0 */
*pr_HomeDir.b ;/* Home directory of executing program     */
pr_Flags.l ;/* flags telling dos about process     */
*pr_ExitCode.w ;/* code to call on exit of program or NULL  */
pr_ExitData.l ;/* Passed as an argument to pr_ExitCode.    */
*pr_Arguments.b ;/* Arguments passed to the process at start */
pr_LocalVars.MinList;/* Local environment variables      */
pr_ShellPrivate.l ;/* for the use of the current shell     */
*pr_CES.b ;/* Error stream - if NULL, use pr_COS     */

End NEWTYPE
;/* Process */

;/*
; * Flags for pr_Flags
; */
#PRB_FREESEGLIST=0
#PRF_FREESEGLIST=1
#PRB_FREECURRDIR=1
#PRF_FREECURRDIR=2
#PRB_FREECLI=2
#PRF_FREECLI=4
#PRB_CLOSEINPUT=3
#PRF_CLOSEINPUT=8
#PRB_CLOSEOUTPUT=4
#PRF_CLOSEOUTPUT=16
#PRB_FREEARGS=5
#PRF_FREEARGS=32

;/* The long word address (BPTR) of this structure is returned by
; * Open() and other routines that return a file.  You need only worry
; * about this struct to do async io's via PutMsg() instead of
; * standard file system calls */

NEWTYPE.FileHandle
*fh_Link.Message;/* EXEC message       */
*fh_Port.MsgPort;/* Reply port for the packet */
*fh_Type.MsgPort;/* Port to do PutMsg() to
;         * Address is negative if a plain file */
fh_Buf.l
fh_Pos.l
fh_End.l
fh_Funcs.l
;#fh_Func1=#fh_Funcs
fh_Func2.l
fh_Func3.l
fh_Args.l
;#fh_Arg1=#fh_Args
fh_Arg2.l

End NEWTYPE
;/* FileHandle */

;/* This is the extension to EXEC Messages used by DOS */

NEWTYPE.DosPacket
*dp_Link.Message;/* EXEC message       */
*dp_Port.MsgPort;/* Reply port for the packet */
;/* Must be filled in each send. */
dp_Type.l ;/* See ACTION_... below and
;         * 'R' means Read, 'W' means Write to the
;         * file system */
dp_Res1.l ;/* For file system calls this is the result
;         * that would have been returned by the
;         * function, e.g. Write ('W') returns actual
;         * length written */
dp_Res2.l ;/* For file system calls this is what would
;         * have been returned by IoErr() */
;/*  Device packets common equivalents */
;#dp_Action=#dp_Type
;#dp_Status=#dp_Res1
;#dp_Status2=#dp_Res2
;#dp_BufAddr=#dp_Arg1
dp_Arg1.l
dp_Arg2.l
dp_Arg3.l
dp_Arg4.l
dp_Arg5.l
dp_Arg6.l
dp_Arg7.l

End NEWTYPE
;/* DosPacket */

;/* A Packet does not require the Message to be before it in memory, but
; * for convenience it is useful to associate the two.
; * Also see the function init_std_pkt for initializing this structure */

NEWTYPE.StandardPacket
sp_Msg.Message
sp_Pkt.DosPacket

End NEWTYPE
;/* StandardPacket */

;/* Packet types */
#ACTION_NIL=0
#ACTION_STARTUP=0
#ACTION_GET_BLOCK=2;/* OBSOLETE */
#ACTION_SET_MAP=4
#ACTION_DIE=5
#ACTION_EVENT=6
#ACTION_CURRENT_VOLUME=7
#ACTION_LOCATE_OBJECT=8
#ACTION_RENAME_DISK=9
#ACTION_WRITE=87 ;"W"
#ACTION_READ=82 ;"R"
#ACTION_FREE_LOCK=15
#ACTION_DELETE_OBJECT=16
#ACTION_RENAME_OBJECT=17
#ACTION_MORE_CACHE=18
#ACTION_COPY_DIR=19
#ACTION_WAIT_CHAR=20
#ACTION_SET_PROTECT=21
#ACTION_CREATE_DIR=22
#ACTION_EXAMINE_OBJECT=23
#ACTION_EXAMINE_NEXT=24
#ACTION_DISK_INFO=25
#ACTION_INFO=26
#ACTION_FLUSH=27
#ACTION_SET_COMMENT=28
#ACTION_PARENT=29
#ACTION_TIMER=30
#ACTION_INHIBIT=31
#ACTION_DISK_TYPE=32
#ACTION_DISK_CHANGE=33
#ACTION_SET_DATE=34

#ACTION_SCREEN_MODE=994

#ACTION_READ_RETURN=1001
#ACTION_WRITE_RETURN=1002
#ACTION_SEEK=1008
#ACTION_FINDUPDATE=1004
#ACTION_FINDINPUT=1005
#ACTION_FINDOUTPUT=1006
#ACTION_END=1007
#ACTION_SET_FILE_SIZE=1022;/* fast file system only in 1.3 */
#ACTION_WRITE_PROTECT=1023;/* fast file system only in 1.3 */

;/* new 2.0 packets */
#ACTION_SAME_LOCK=40
#ACTION_CHANGE_SIGNAL=995
#ACTION_FORMAT=1020
#ACTION_MAKE_LINK=1021
;/**/
;/**/
#ACTION_READ_LINK=1024
#ACTION_FH_FROM_LOCK=1026
#ACTION_IS_FILESYSTEM=1027
#ACTION_CHANGE_MODE=1028
;/**/
#ACTION_COPY_DIR_FH=1030
#ACTION_PARENT_FH=1031
#ACTION_EXAMINE_ALL=1033
#ACTION_EXAMINE_FH=1034

#ACTION_LOCK_RECORD=2008
#ACTION_FREE_RECORD=2009

#ACTION_ADD_NOTIFY=4097
#ACTION_REMOVE_NOTIFY=4098

;/* Added in V39: */
#ACTION_EXAMINE_ALL_END=1035
#ACTION_SET_OWNER=1036

;/* Tell a file system to serialize the current volume. This is typically
; * done by changing the creation date of the disk. This packet does not take
; * any arguments.  NOTE: be prepared to handle failure of this packet for
; * V37 ROM filesystems.
; */
#ACTION_SERIALIZE_DISK=4200

;/*
; * A structure for holding error messages - stored as array with error == 0
; * for the last entry.
; */
NEWTYPE.ErrorString
*estr_Nums.l
*estr_Strings.b

End NEWTYPE

;/* DOS library node structure.
; * This is the data at positive offsets from the library node.
; * Negative offsets from the node is the jump table to DOS functions
; * node = (struct DosLibrary *) OpenLibrary( "dos.library" .. )       */

NEWTYPE.DosLibrary
dl_lib.Library
*dl_Root.RootNode;/* Pointer to RootNode, described below */
*dl_GV.b ;/* Pointer to BCPL global vector       */
dl_A2.l ;/* BCPL standard register values       */
dl_A5.l
dl_A6.l
*dl_Errors.ErrorString;/* PRIVATE pointer to array of error msgs */
*dl_TimeReq.l ;timerequest;/* PRIVATE pointer to timer request */
*dl_UtilityBase.Library;/* PRIVATE ptr to utility library */
*dl_IntuitionBase.Library;/* PRIVATE ptr to intuition library */
End NEWTYPE
;/* DosLibrary */

;/*          */

NEWTYPE.RootNode
rn_TaskArray.b ;/* [0] is max number of CLI's
;             * [1] is APTR to process id of CLI 1
;             * [n] is APTR to process id of CLI n */
*rn_ConsoleSegment.b ;/* SegList for the CLI      */
rn_Time.DateStamp;/* Current time       */
rn_RestartSeg.l ;/* SegList for the disk validator process   */
*rn_Info.b ;/* Pointer to the Info structure     */
*rn_FileHandlerSegment.b ;/* segment for a file handler    */
rn_CliList.MinList;/* new list of all CLI processes */
;/* the first cpl_Array is also rn_TaskArray */
*rn_BootProc.MsgPort;/* private ptr to msgport of boot fs    */
*rn_ShellSegment.b ;/* seglist for Shell (for NewShell)    */
rn_Flags.l ;/* dos flags */
End NEWTYPE
;/* RootNode */

#RNB_WILDSTAR=24
#RNF_WILDSTAR=(1 LSL 24)
#RNB_PRIVATE1=1;/* private for dos */
#RNF_PRIVATE1=2

; A little trick... In the structur CliPorcList is a pointer
; to an other pointer (**cpl_Array.MsgPort)...
; BlitzBasic don' t support, so we have to make a new NewType
; and pont to it...

NEWTYPE.cpl_Array
  *cpl_Array.MsgPort
End NEWTYPE

;/* ONLY to be allocated by DOS! */
NEWTYPE.CliProcList
cpl_Node.MinNode
cpl_First.l ;/* number of first entry in array */
*cpl_Array.cpl_Array ; hm, but it works...
;/* [0] is max number of CLI's in this entry (n)
;           * [1] is CPTR to process id of CLI cpl_First
;           * [n] is CPTR to process id of CLI cpl_First+n-1
;           */

End NEWTYPE

NEWTYPE.DosInfo
*di_McName.b ;/* PRIVATE: system resident module list     */
;#di_ResList=#di_McName
*di_DevInfo.b ;/* Device List        */
*di_Devices.b ;/* Currently zero       */
*di_Handlers.b ;/* Currently zero       */
*di_NetHand.b ;/* Network handler processid; currently zero */
di_DevLock.SignalSemaphore;/* do NOT access directly! */
di_EntryLock.SignalSemaphore;/* do NOT access directly! */
di_DeleteLock.SignalSemaphore;/* do NOT access directly! */
End NEWTYPE
;/* DosInfo */

;/* structure for the Dos resident list.  Do NOT allocate these, use   */
;/* AddSegment(), and heed the warnings in the autodocs!     */

NEWTYPE.Segment
*seg_Next.b
seg_UC.l
*seg_Seg.b
seg_Name.b[4] ; /* actually the first 4 chars of BSTR name */
End NEWTYPE

#CMD_SYSTEM=-1
#CMD_INTERNAL=-2
#CMD_DISABLED=-999


;/* DOS Processes started from the CLI via RUN or NEWCLI have this additional
; * set to data associated with them */

NEWTYPE.CommandLineInterface
cli_Result2.l ;/* Value of IoErr from last command   */
*cli_SetName.b ;/* Name of current directory    */
*cli_CommandDir.b ;/* Head of the path locklist    */
cli_ReturnCode.l ;/* Return code from last command    */
*cli_CommandName.b ;/* Name of current command    */
cli_FailLevel.l ;/* Fail level (set by FAILAT)    */
*cli_Prompt.b ;/* Current prompt (set by PROMPT)   */
*cli_StandardInput.b ;/* Default (terminal) CLI input    */
*cli_CurrentInput.b ;/* Current CLI input     */
*cli_CommandFile.b ;/* Name of EXECUTE command file    */
cli_Interactive.l ;/* Boolean; True if prompts required   */
cli_Background.l ;/* Boolean; True if CLI created by RUN   */
*cli_CurrentOutput.b ;/* Current CLI output     */
cli_DefaultStack.l ;/* Stack size to be obtained in long words */
*cli_StandardOutput.b ;/* Default (terminal) CLI output    */
*cli_Module.b ;/* SegList of currently loaded command   */
End NEWTYPE
;/* CommandLineInterface */

;/* This structure can take on different values depending on whether it is
; * a device, an assigned directory, or a volume.  Below is the structure
; * reflecting volumes only.  Following that is the structure representing
; * only devices. Following that is the unioned structure representing all
; * the values
; */

;/* structure representing a volume */

NEWTYPE.DeviceList
*dl_Next.b ;/* bptr to next device list */
dl_Type.l ;/* see DLT below */
*dl_Task.MsgPort;/* ptr to handler task */
*dl_Lock.b ;/* not for volumes */
dl_VolumeDate.DateStamp;/* creation date */
*dl_LockList.b ;/* outstanding locks */
dl_DiskType.l ;/* 'DOS', etc */
dl_unused.l
*dl_Name.b ;/* bptr to bcpl name */
End NEWTYPE

;/* device structure (same as the DeviceNode structure in filehandler.h) */

NEWTYPE.DevInfo
*dvi_Next.b
dvi_Type.l
*dvi_Task.b
*dvi_Lock.b
*dvi_Handler.b
dvi_StackSize.l
dvi_Priority.l
dvi_Startup.l
*dvi_SegList.b
*dvi_GlobVec.b
*dvi_Name.b
End NEWTYPE

;/* combined structure for devices, assigned directories, volumes */

NEWTYPE.dol_Handler_Union
  *dol_Handler.b ;/* file name to load if seglist is null */
  dol_StackSize.l ;/* stacksize to use when starting process */
  dol_Priority.l ;/* task priority when starting process */
  dol_Startup.l ;/* startup msg: FileSysStartupMsg for disks */
  *dol_SegList.b ;/* already loaded code for new task */
  *dol_GlobVec.b ;/* BCPL global vector to use when starting
End NEWTYPE

NEWTYPE.AssignList
*al_Next.AssignList
*al_Lock.b
End NEWTYPE

NEWTYPE.dol_Volume_Union
  dol_VolumeDate.DateStamp;/* creation date */
  *dol_LockList.b ;/* outstanding locks */
  dol_DiskType.l ;/* 'DOS', etc */
End NEWTYPE

NEWTYPE.dol_Assign_Union
   *dol_AssignName.b ;     /* name for non-or-late-binding assign */
   *dol_List.AssignList ; /* for multi-directory assigns (regular) */
End NEWTYPE

NEWTYPE.DosListUnion
  dol_Handler.dol_Handler_Union
  dol_Volume.dol_Volume_Union
  dol_Assign.dol_Assign_Union
End NEWTYPE

NEWTYPE.DosList
  *dol_Next.b ;/* bptr to next device on list */
  dol_Type.l ;/* see DLT below */
  *dol_Task.MsgPort;/* ptr to handler task */
  *dol_Lock.b
  DosListUnion.DosListUnion
  *dol_Name.b
End NEWTYPE

;/* definitions for dl_Type */
#DLT_DEVICE=0
#DLT_DIRECTORY=1;/* assign */
#DLT_VOLUME=2
#DLT_LATE=3;/* late-binding assign */
#DLT_NONBINDING=4;/* non-binding assign */
#DLT_PRIVATE=-1;/* for internal use only */

;/* structure return by GetDeviceProc() */
NEWTYPE.DevProc
*dvp_Port.MsgPort
*dvp_Lock.b
dvp_Flags.l
*dvp_DevNode.DosList;/* DON'T TOUCH OR USE! */
End NEWTYPE

;/* definitions for dvp_Flags */
#DVPB_UNLOCK=0
#DVPF_UNLOCK=(1 LSL #DVPB_UNLOCK)
#DVPB_ASSIGN=1
#DVPF_ASSIGN=(1 LSL #DVPB_ASSIGN)

;/* Flags to be passed to LockDosList(), etc */
#LDB_DEVICES=2
#LDF_DEVICES=(1 LSL #LDB_DEVICES)
#LDB_VOLUMES=3
#LDF_VOLUMES=(1 LSL #LDB_VOLUMES)
#LDB_ASSIGNS=4
#LDF_ASSIGNS=(1 LSL #LDB_ASSIGNS)
#LDB_ENTRY=5
#LDF_ENTRY=(1 LSL #LDB_ENTRY)
#LDB_DELETE=6
#LDF_DELETE=(1 LSL #LDB_DELETE)

;/* you MUST specify one of LDF_READ or LDF_WRITE */
#LDB_READ=0
#LDF_READ=(1 LSL #LDB_READ)
#LDB_WRITE=1
#LDF_WRITE=(1 LSL #LDB_WRITE)

;/* actually all but LDF_ENTRY (which is used for internal locking) */
#LDF_ALL=(#LDF_DEVICES|#LDF_VOLUMES|#LDF_ASSIGNS)

;/* a lock structure, as returned by Lock() or DupLock() */
NEWTYPE.FileLock
*fl_Link.b ;/* bcpl pointer to next lock */
fl_Key.l ;/* disk block number */
fl_Access.l ;/* exclusive or shared */
*fl_Task.MsgPort;/* handler task's port */
*fl_Volume.b ;/* bptr to DLT_VOLUME DosList entry */
End NEWTYPE

;/* error report types for ErrorReport() */
#REPORT_STREAM=0;/* a stream */
#REPORT_TASK=1;/* a process - unused */
#REPORT_LOCK=2;/* a lock */
#REPORT_VOLUME=3;/* a volume node */
#REPORT_INSERT=4;/* please insert volume */

;/* Special error codes for ErrorReport() */
#ABORT_DISK_ERROR=296;/* Read/write error */
#ABORT_BUSY=288;/* You MUST replace... */

;/* types for initial packets to shells from run/newcli/execute/system. */
;/* For shell-writers only */
#RUN_EXECUTE=-1
#RUN_SYSTEM=-2
#RUN_SYSTEM_ASYNCH=-3

;/* Types for fib_DirEntryType. NOTE that both USERDIR and ROOT are  */
;/* directories, and that directory/file checks should use <0 and >=0.  */
;/* This is not necessarily exhaustive! Some handlers may use other  */
;/* values as needed, though <0 and >=0 should remain as supported as  */
;/* possible.         */
#ST_ROOT=1
#ST_USERDIR=2
#ST_SOFTLINK=3;/* looks like dir, but may point to a file! */
#ST_LINKDIR=4;/* hard link to dir */
#ST_FILE=-3;/* must be negative for FIB! */
#ST_LINKFILE=-4;/* hard link to file */
#ST_PIPEFILE=-5;/* for pipes that support ExamineFH */

CEND