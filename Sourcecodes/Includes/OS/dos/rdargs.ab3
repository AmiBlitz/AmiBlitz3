; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
CNIF @#DOS_RDARGS_H=0 
#DOS_RDARGS_H = 1
;
; $VER: rdargs.ab3 40.0 (28.02.94)
;
CNIF @#EXEC_TYPES_H=0 
XINCLUDE "OS/exec/types.ab3"
CEND

CNIF @#EXEC_NODES_H=0 
XINCLUDE "OS/exec/nodes.ab3" 
CEND 

;/**********************************************************************
; *
; * The CSource data structure defines the input source for "ReadItem()"
; * as well as the ReadArgs call.  It is a publicly defined structure
; * which may be used by applications which use code that follows the
; * conventions defined for access.
; *
; * When passed to the dos.library functions, the value passed as
; * struct *CSource is defined as follows:
; * if ( CSource == 0)  Use buffered IO "ReadChar()" as data source
; * else      Use CSource for input character stream
; *
; * The following two pseudo-code routines define how the CSource structure
; * is used:
; *
; * long CS_ReadChar( struct CSource *CSource )
; * {
; * if ( CSource == 0 ) return ReadChar();
; * if ( CSource->CurChr >= CSource->Length ) return ENDSTREAMCHAR;
; * return CSource->Buffer[ CSource->CurChr++ ];
; * }
; *
; * BOOL CS_UnReadChar( struct CSource *CSource )
; * {
; * if ( CSource == 0 ) return UnReadChar();
; * if ( CSource->CurChr <= 0 ) return FALSE;
; * CSource->CurChr--;
; * return TRUE;
; * }
; *
; * To initialize a struct CSource, you set CSource->CS_Buffer to
; * a string which is used as the data source, and set CS_Length to
; * the number of characters in the string.  Normally CS_CurChr should
; * be initialized to ZERO, or left as it was from prior use as
; * a CSource.
; *
; **********************************************************************/

NEWTYPE.CSource
*CS_Buffer.b
CS_Length.l
CS_CurChr.l
End NEWTYPE

;/**********************************************************************
; *
; * The RDArgs data structure is the input parameter passed to the DOS
; * ReadArgs() function call.
; *
; * The RDA_Source structure is a CSource as defined above;
; * if RDA_Source.CS_Buffer is non-null, RDA_Source is used as the input
; * character stream to parse, else the input comes from the buffered STDIN
; * calls ReadChar/UnReadChar.
; *
; * RDA_DAList is a private address which is used internally to track
; * allocations which are freed by FreeArgs().  This MUST be initialized
; * to NULL prior to the first call to ReadArgs().
; *
; * The RDA_Buffer and RDA_BufSiz fields allow the application to supply
; * a fixed-size buffer in which to store the parsed data.  This allows
; * the application to pre-allocate a buffer rather than requiring buffer
; * space to be allocated.  If either RDA_Buffer or RDA_BufSiz is NULL,
; * the application has not supplied a buffer.
; *
; * RDA_ExtHelp is a text string which will be displayed instead of the
; * template string, if the user is prompted for input.
; *
; * RDA_Flags bits control how ReadArgs() works.  The flag bits are
; * defined below.  Defaults are initialized to ZERO.
; *
; **********************************************************************/

NEWTYPE.RDArgs
RDA_Source.CSource;/* Select input source */
RDA_DAList.l ;/* PRIVATE. */
*RDA_Buffer.b ;/* Optional string parsing space. */
RDA_BufSiz.l ;/* Size of RDA_Buffer (0..n) */
*RDA_ExtHelp.b ;/* Optional extended help */
RDA_Flags.l ;/* Flags for any required control */
End NEWTYPE

#RDAB_STDIN=0;/* Use "STDIN" rather than "COMMAND LINE" */
#RDAF_STDIN=1
#RDAB_NOALLOC=1;/* If set, do not allocate extra string space.*/
#RDAF_NOALLOC=2
#RDAB_NOPROMPT=2;/* Disable reprompting for string input. */
#RDAF_NOPROMPT=4

;/**********************************************************************
; * Maximum number of template keywords which can be in a template passed
; * to ReadArgs(). IMPLEMENTOR NOTE - must be a multiple of 4.
; **********************************************************************/
#MAX_TEMPLATE_ITEMS=100

;/**********************************************************************
; * Maximum number of MULTIARG items returned by ReadArgs(), before
; * an ERROR_LINE_TOO_LONG.  These two limitations are due to stack
; * usage.  Applications should allow "a lot" of stack to use ReadArgs().
; **********************************************************************/
#MAX_MULTIARGS=128

CEND