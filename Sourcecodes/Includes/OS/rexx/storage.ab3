; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
CNIF @#REXX_STORAGE_H=0
#REXX_STORAGE_H = 1
;
; $VER: storage.ab3 40.0 (03.03.94)
;

CNIF @#EXEC_TYPES_H=0
XINCLUDE"exec/types.ab3"
CEND ;EXEC_TYPES_H

CNIF @#EXEC_NODES_H=0
XINCLUDE"exec/nodes.ab3"
CEND ;EXEC_NODES_H

CNIF @#EXEC_LISTS_H=0
XINCLUDE"exec/lists.ab3"
CEND ;EXEC_LISTS_H

CNIF @#EXEC_PORTS_H=0
XINCLUDE"exec/ports.ab3"
CEND ;EXEC_PORTS_H

CNIF @#EXEC_LIBRARIES_H=0
XINCLUDE"exec/libraries.ab3"
CEND ;EXEC_LIBRARIES_H

;/* The NexxStr structure is used to maintain the internal strings in REXX.
; * It includes the buffer area for the string and associated attributes.
; * This is actually a variable-length structure; it is allocated for a
; * specific length string, and the length is never modified thereafter
; * (since it's used for recycling).
; */

NEWTYPE.NexxStr
ns_Ivalue.l ;/* integer value  */
ns_Length.w ;/* length in bytes (excl null) */
ns_Flags.b ;/* attribute flags  */
ns_Hash.b ;/* hash code   */
ns_Buff.b[8] ;/* buffer area for strings */
End NEWTYPE
;/* size: 16 bytes (minimum) */

#NXADDLEN=9;/* offset plus null byte */
Macro IVALUE:(`1\ns_Ivalue):End Macro

;/* String attribute flag bit definitions    */
#NSB_KEEP=0;/* permanent string?  */
#NSB_STRING=1;/* string form valid?  */
#NSB_NOTNUM=2;/* non-numeric?   */
#NSB_NUMBER=3;/* a valid number?  */
#NSB_BINARY=4;/* integer value saved?  */
#NSB_FLOAT=5;/* floating point format? */
#NSB_EXT=6;/* an external string?  */
#NSB_SOURCE=7;/* part of the program source? */

;/* The flag form of the string attributes    */
#NSF_KEEP=(1 LSL #NSB_KEEP)
#NSF_STRING=(1 LSL #NSB_STRING)
#NSF_NOTNUM=(1 LSL #NSB_NOTNUM)
#NSF_NUMBER=(1 LSL #NSB_NUMBER)
#NSF_BINARY=(1 LSL #NSB_BINARY)
#NSF_FLOAT=(1 LSL #NSB_FLOAT)
#NSF_EXT=(1 LSL #NSB_EXT)
#NSF_SOURCE=(1 LSL #NSB_SOURCE)

;/* Combinations of flags      */
#NSF_INTNUM=(#NSF_NUMBER|#NSF_BINARY|#NSF_STRING)
#NSF_DPNUM=(#NSF_NUMBER|#NSF_FLOAT)
#NSF_ALPHA=(#NSF_NOTNUM|#NSF_STRING)
#NSF_OWNED=(#NSF_SOURCE|#NSF_EXT|#NSF_KEEP)
#KEEPSTR=(#NSF_STRING|#NSF_SOURCE|#NSF_NOTNUM)
#KEEPNUM=(#NSF_STRING|#NSF_SOURCE|#NSF_NUMBER|#NSF_BINARY)

;/* The RexxArg structure is identical to the NexxStr structure, but
; * is allocated from system memory rather than from internal storage.
; * This structure is used for passing arguments to external programs.
; * It is usually passed as an "argstring", a pointer to the string buffer.
; */

NEWTYPE.RexxArg
ra_Size.l ;/* total allocated length */
ra_Length.w ;/* length of string  */
ra_Flags.b ;/* attribute flags  */
ra_Hash.b ;/* hash code   */
ra_Buff.b[8] ;/* buffer area   */
End NEWTYPE
;/* size: 16 bytes (minimum) */

;/* The RexxMsg structure is used for all communications with REXX
; * programs.  It is an EXEC message with a parameter block appended.
; */

NEWTYPE.RexxMsg
rm_Node.Message;/* EXEC message structure */
*rm_TaskBlock.b ;/* global structure (private) */
*rm_LibBase.b ;/* library base (private) */
rm_Action.l ;/* command (action) code */
rm_Result1.l ;/* primary result (return code) */
rm_Result2.l ;/* secondary result  */
rm_Args.b[16] ; /* argument block (ARG0-ARG15) */
*rm_PassPort.MsgPort;/* forwarding port  */
*rm_CommAddr.b ;/* host address (port name) */
*rm_FileExt.b ;/* file extension  */
rm_Stdin.l ;/* input stream (filehandle) */
rm_Stdout.l ;/* output stream (filehandle) */
rm_avail.l ;/* future expansion  */

End NEWTYPE
;/* size: 128 bytes  */

;/* Field definitions       */
Macro ARG0`1:(#`1->rm_Args[0]):End Macro;/* start of argblock  */
Macro ARG1`1:(#`1->rm_Args[1]):End Macro;/* first argument  */
Macro ARG2`1:(#`1->rm_Args[2]):End Macro;/* second argument  */

#MAXRMARG=15;/* maximum arguments  */

;/* Command (action) codes for message packets    */
#RXCOMM=$01000000;/* a command-level invocation */
#RXFUNC=$02000000;/* a �	 �  */
#RXCLOSE=$03000000;/* close the REXX server */
#RXQUERY=$04000000;/* query � information */
#RXADDFH=$07000000;/* �= a �	 host  */
#RXADDLIB=$08000000;/* �= a �	 library */
#RXREMLIB=$09000000;/* remove a �	 library */
#RXADDCON=$0A000000;/* �=/update a ClipList string */
#RXREMCON=$0B000000;/* remove a ClipList string */
#RXTCOPN=$0C000000;/* open the trace � */
#RXTCCLS=$0D000000;/* close the trace � */

;/* Command modifier flag bits      */
#RXFB_NOIO=16;/* suppress I/O inheritance? */
#RXFB_RESULT=17;/* result string expected? */
#RXFB_STRING=18;/* program is a "string file"? */
#RXFB_TOKEN=19;/* tokenize the command line? */
#RXFB_NONRET=20;/* a "no-return" message? */

;/* The flag form of the command modifiers    */
#RXFF_NOIO=(1 LSL #RXFB_NOIO)
#RXFF_RESULT=(1 LSL #RXFB_RESULT)
#RXFF_STRING=(1 LSL #RXFB_STRING)
#RXFF_TOKEN=(1 LSL #RXFB_TOKEN)
#RXFF_NONRET=(1 LSL #RXFB_NONRET)

#RXCODEMASK=$FF000000
#RXARGMASK=$0000000F

;/* The RexxRsrc structure is used to manage global resources.  Each node
; * has a name string created as a RexxArg structure, and the total size
; * of the node is saved in the "rr_Size" field.  The REXX systems library
; * provides functions to allocate and release resource nodes.  If special
; * deletion operations are required, an offset and base can be provided in
; * "rr_Func" and "rr_Base", respectively.  This "autodelete" function will
; * be called with the base in register A6 and the node in A0.
; */

NEWTYPE.RexxRsrc
rr_Node.Node
rr_Func.w ;/* "auto-delete" offset  */
*rr_Base.b ;/* "auto-delete" base  */
rr_Size.l ;/* total size of node  */
rr_Arg1.l ;/* available ...  */
rr_Arg2.l ;/* available ...  */
End NEWTYPE
;/* size: 32 bytes  */

;/* Resource node types       */
#RRT_ANY=0;/* any node type ...  */
#RRT_LIB=1;/* a function library  */
#RRT_PORT=2;/* a public port  */
#RRT_FILE=3;/* a file IoBuff  */
#RRT_HOST=4;/* a function host  */
#RRT_CLIP=5;/* a Clip List node  */

;/* The RexxTask structure holds the fields used by REXX to communicate with
; * external processes, including the client task.  It includes the global
; * data structure (and the base environment).  The structure is passed to
; * the newly-created task in its "wake-up" message.
; */

#GLOBALSZ=200;/* total size of GlobalData */

NEWTYPE.RexxTask
rt_Global.b[#GLOBALSZ] ;/* global data structure */
rt_MsgPort.MsgPort;/* global message port  */
rt_Flags.b ;/* task flag bits  */
rt_SigBit.b ;/* signal bit   */

*rt_ClientID.b ;/* the client's task ID  */
*rt_MsgPkt.b ;/* the packet being processed */
*rt_TaskID.b ;/* our task ID   */
*rt_RexxPort.b ;/* the REXX public port  */

*rt_ErrTrap.b ;/* Error trap address  */
*rt_StackPtr.b ;/* stack pointer for traps */

rt_Header1.List;/* Environment list  */
rt_Header2.List;/* Memory freelist  */
rt_Header3.List;/* Memory allocation list */
rt_Header4.List;/* Files list   */
rt_Header5.List;/* Message Ports List  */
End NEWTYPE

;/* Definitions for RexxTask flag bits     */
#RTFB_TRACE=0;/* external trace flag  */
#RTFB_HALT=1;/* external halt flag  */
#RTFB_SUSP=2;/* suspend task?  */
#RTFB_TCUSE=3;/* trace console in use? */
#RTFB_WAIT=6;/* waiting for reply?  */
#RTFB_CLOSE=7;/* task completed?  */

;/* Definitions for memory allocation constants    */
#MEMQUANT=16;/* quantum of memory space */
#MEMMASK=$FFFFFFF0;/* mask � rounding the size */

#MEMQUICK=(1 LSL 0);/* EXEC flags: MEMF_PUBLIC */
#MEMCLEAR=(1 LSL 16);/* EXEC flags: MEMF_CLEAR */

;/* The SrcNode is a temporary structure used to hold values destined for
; * a segment array.  It is also used to maintain the memory freelist.
; */

NEWTYPE.SrcNode
*sn_Succ.SrcNode;/* next node   */
*sn_Pred.SrcNode;/* previous node  */
*sn_Ptr.b ;/* pointer value  */
sn_Size.l ;/* size of object  */
End NEWTYPE
;/* size: 16 bytes  */

CEND
