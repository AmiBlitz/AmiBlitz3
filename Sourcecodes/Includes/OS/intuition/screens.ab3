; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
CNIF @#INTUITION_SCREENS_H=0
#INTUITION_SCREENS_H = 1
;
;  $VER: screens.ab3 40.0 (03.02.94)
;

CNIF @#EXEC_TYPES_H=0
XINCLUDE"exec/types.ab3"
CEND ;EXEC_TYPES_H

CNIF @#GRAPHICS_GFX_H=0
XINCLUDE"graphics/gfx.ab3"
CEND ;GRAPHICS_GFX_H

CNIF @#GRAPHICS_CLIP_H=0
XINCLUDE"graphics/clip.ab3"
CEND ;GRAPHICS_CLIP_H

CNIF @#GRAPHICS_VIEW_H=0
XINCLUDE"graphics/view.ab3"
CEND ;GRAPHICS_VIEW_H

CNIF @#GRAPHICS_RASTPORT_H=0
XINCLUDE"graphics/rastport.ab3"
CEND ;GRAPHICS_RASTPORT_H

CNIF @#GRAPHICS_LAYERS_H=0
XINCLUDE"graphics/layers.ab3"
CEND ;GRAPHICS_LAYERS_H

CNIF @#UTILITY_TAGITEM_H=0
XINCLUDE"utility/tagitem.ab3"
CEND ;UTILITY_TAGITEM_H

;/*
; * NOTE:  intuition/iobsolete.h is included at the END of this file!
; */

;/* ======================================================================== */
;/* === DrawInfo ========================================================= */
;/* ======================================================================== */

;/* This is a packet of information for graphics rendering.  It originates
; * with a Screen, and is gotten using GetScreenDrawInfo( screen );
; */

;/* You can use the Intuition version number to tell which fields are
; * present in this structure.
; *
; * DRI_VERSION of 1 corresponds to V37 release.
; * DRI_VERSION of 2 corresponds to V39, and includes three new pens
; * and the dri_CheckMark and dri_AmigaKey fields.
; *
; * Note that sometimes applications need to create their own DrawInfo
; * structures, in which case the DRI_VERSION won't correspond exactly
; * to the OS version!!!
; */
#DRI_VERSION=(2)

NEWTYPE.DrawInfo
dri_Version.w ;/* will be  DRI_VERSION   */
dri_NumPens.w ;/* guaranteed to be >= 9  */
*dri_Pens.w ;/* pointer to pen array   */

*dri_Font.TextFont;/* screen default font  */
dri_Depth.w ;/* (initial) depth of screen bitmap */

X.w
Y.w

dri_Flags.l ;/* defined below  */
;/* New for V39: dri_CheckMark, dri_AmigaKey. */
*dri_CheckMark.Image;/* pointer to scaled checkmark image
;          * Will be NULL if DRI_VERSION < 2
;          */
*dri_AmigaKey.Image;/* pointer to scaled Amiga-key image
;          * Will be NULL if DRI_VERSION < 2
;          */
dri_Reserved.l[5] ; /* avoid recompilation

End NEWTYPE

#DRIF_NEWLOOK=$00000001;/* specified SA_Pens, full treatment */

;/* rendering pen number indexes into DrawInfo.dri_Pens[] */
#DETAILPEN=($0000);/* compatible Intuition rendering pens */
#BLOCKPEN=($0001);/* compatible Intuition rendering pens */
#TEXTPEN=($0002);/* text on background   */
#SHINEPEN=($0003);/* bright edge on 3D objects  */
#SHADOWPEN=($0004);/* dark edge on 3D objects  */
#FILLPEN=($0005);/* active-window/selected-gadget fill */
#FILLTEXTPEN=($0006);/* text over FILLPEN   */
#BACKGROUNDPEN=($0007);/* always color 0   */
#HIGHLIGHTTEXTPEN=($0008);/* special color text, on background */
;/* New for V39, only present if DRI_VERSION >= 2: */
#BARDETAILPEN=($0009);/* text/detail in screen-bar/menus */
#BARBLOCKPEN=($000A);/* screen-bar/menus fill */
#BARTRIMPEN=($000B);/* trim under screen-bar */

#NUMDRIPENS=($000C)


;/* New for V39:  It is sometimes useful to specify that a pen value
; * is to be the complement of color zero to three.  The "magic" numbers
; * serve that purpose:
; */
#PEN_C3=$FEFC;/* Complement of color 3 */
#PEN_C2=$FEFD;/* Complement of color 2 */
#PEN_C1=$FEFE;/* Complement of color 1 */
#PEN_C0=$FEFF;/* Complement of color 0 */

;/* ======================================================================== */
;/* === Screen ============================================================= */
;/* ======================================================================== */

;/* VERY IMPORTANT NOTE ABOUT Screen->BitMap.  In the future, bitmaps
; * will need to grow.  The embedded instance of a bitmap in the screen
; * will no longer be large enough to hold the whole description of
; * the bitmap.
; *
; * YOU ARE STRONGLY URGED to use Screen->RastPort.BitMap in place of
; * &Screen->BitMap whenever and whereever possible.
; */

NEWTYPE.Screen
*NextScreen.Screen;/* linked list of screens */
*FirstWindow.Window;/* linked list Screen's Windows */

LeftEdge.w: TopEdge.w ;/* parameters of the screen */
Width.w: Height.w ;/* parameters of the screen */

_MouseY.w: _MouseX.w ;/* position relative to upper-left */

Flags.w ;/* see definitions below */

*Title.b ;/* null-terminated Title text */
*DefaultTitle.b ;/* for Windows without ScreenTitle */

;/* Bar sizes for this Screen and all Window's in this Screen */
;/* Note that BarHeight is one less than the actual menu bar
;     * height. We're going to keep this in V36 for compatibility,
;     * although V36 artwork might use that extra pixel
;     *
;     * Also, the title bar height of a window is calculated from the
;     * screen's WBorTop field, plus the font height, plus one.
;     */
BarHeight.b: BarVBorder.b: BarHBorder.b: MenuVBorder.b: MenuHBorder.b
WBorTop.b: WBorLeft.b: WBorRight.b: WBorBottom.b

*Font.TextAttr;/* this screen's default font    */

;/* the display data structures for this Screen */
_ViewPort.ViewPort;/* describing the Screen's display */
_RastPort.RastPort;/* describing Screen rendering    */
_BitMap.BitMap;/* SEE WARNING ABOVE!     */
LayerInfo.Layer_Info;/* each screen gets a LayerInfo    */

;/* Only system gadgets may be attached to a screen.
;     * You get the standard system Screen Gadgets automatically
;     */
*FirstGadget.Gadget

DetailPen.b: BlockPen.b ;/* for bar/border/gadget rendering */

;/* the following variable(s) are maintained by Intuition to support the
;     * DisplayBeep() color flashing technique
;     */
SaveColor0.w

;/* This layer is for the Screen and Menu bars */
*BarLayer.Layer

*ExtData.b

*UserData.b ;/* general-purpose pointer to User data extension */

;/**** Data below this point are SYSTEM PRIVATE ****/

End NEWTYPE


;/* --- FLAGS SET BY INTUITION --------------------------------------------- */
;/* The SCREENTYPE bits are reserved for describing various Screen types
; * available under Intuition.
; */
#SCREENTYPE=$000F;/* all the screens types available */
;/* --- the definitions for the Screen Type ------------------------------- */
#WBENCHSCREEN=$0001;/* identifies the Workbench ï¿½ */
#PUBLICSCREEN=$0002;/* public ï¿½ (custom) ï¿½ */
#CUSTOMSCREEN=$000F;/* original custom screens  */

#SHOWTITLE=$0010;/* this gets set by a ï¿½ ï¿½ ShowTitle() */

#BEEPING=$0020;/* set when ï¿½ is beeping (private) */

#CUSTOMBITMAP=$0040;/* ï¿½ you are supplying your own ï¿½ */

#SCREENBEHIND=$0080;/* ï¿½ you want your ï¿½ ï¿½ open behind
;        * already open screens
;        */
#SCREENQUIET=$0100;/* ï¿½ you do ï¿½ï¿½ want Intuition ï¿½ render
;        * into your screen (gadgets, title)
;        */
#SCREENHIRES=$0200;/* do ï¿½ï¿½ ï¿½, lowres gadgets  (private) */

#NS_EXTENDED=$1000;/* ExtNewScreen.Extension is valid */
;/* V36 applications can use OpenScreenTagList() instead of NS_EXTENDED */

#AUTOSCROLL=$4000;/* ï¿½ is ï¿½ autoscoll  */

;/* New for V39: */
#PENSHARED=$0400;/* ï¿½ opener set {SA_SharePens,ï¿½} */




#STDSCREENHEIGHT=-1;/* supply in NewScreen.Height  */
#STDSCREENWIDTH=-1;/* supply in NewScreen.Width  */

;/*
; * Screen attribute tag ID's.  These are used in the ti_Tag field of
; * TagItem arrays passed to OpenScreenTagList() (or in the
; * ExtNewScreen.Extension field).
; */

;/* Screen attribute tags.  Please use these versions, not those in
; * iobsolete.h.
; */

#SA_Dummy=(#TAG_USER+32)
;/*
; * these items specify items equivalent to fields in NewScreen
; */
#SA_Left=(#SA_Dummy+$0001)
#SA_Top=(#SA_Dummy+$0002)
#SA_Width=(#SA_Dummy+$0003)
#SA_Height=(#SA_Dummy+$0004)
;/* traditional screen positions and dimensions */
#SA_Depth=(#SA_Dummy+$0005)
;/* screen bitmap depth    */
#SA_DetailPen=(#SA_Dummy+$0006)
;/* serves as default for windows, too  */
#SA_BlockPen=(#SA_Dummy+$0007)
#SA_Title=(#SA_Dummy+$0008)
;/* default screen title    */
#SA_Colors=(#SA_Dummy+$0009)
;/* ti_Data is an array of struct ColorSpec,
;      * terminated by ColorIndex = -1.  Specifies
;      * initial screen palette colors.
;      * Also see SA_Colors32 for use under V39.
;      */
#SA_ErrorCode=(#SA_Dummy+$000A)
;/* ti_Data points to LONG error code (values below)*/
#SA_Font=(#SA_Dummy+$000B)
;/* equiv. to NewScreen.Font   */
#SA_SysFont=(#SA_Dummy+$000C)
;/* Selects one of the preferences system fonts:
;      *  0 - old DefaultFont, fixed-width
;      *  1 - WB Screen preferred font
;      */
#SA_Type=(#SA_Dummy+$000D)
;/* ti_Data is PUBLICSCREEN or CUSTOMSCREEN.  For other
;      * fields of NewScreen.Type, see individual tags,
;      * eg. SA_Behind, SA_Quiet.
;      */
#SA_BitMap=(#SA_Dummy+$000E)
;/* ti_Data is pointer to custom BitMap.  This
;      * implies type of CUSTOMBITMAP
;      */
#SA_PubName=(#SA_Dummy+$000F)
;/* presence of this tag means that the screen
;      * is to be a public screen.  Please specify
;      * BEFORE the two tags below
;      */
#SA_PubSig=(#SA_Dummy+$0010)
#SA_PubTask=(#SA_Dummy+$0011)
;/* Task ID and signal for being notified that
;      * the last window has closed on a public screen.
;      */
#SA_DisplayID=(#SA_Dummy+$0012)
;/* ti_Data is new extended display ID from
;      * <graphics/displayinfo.h> (V37) or from
;      * <graphics/modeid.h> (V39 and up)
;      */
#SA_DClip=(#SA_Dummy+$0013)
;/* ti_Data points to a rectangle which defines
;      * screen display clip region
;      */
#SA_Overscan=(#SA_Dummy+$0014)
;/* Set to one of the OSCAN_
;      * specifiers below to get a system standard
;      * overscan region for your display clip,
;      * screen dimensions (unless otherwise specified),
;      * and automatically centered position (partial
;      * support only so far).
;      * If you use this, you shouldn't specify
;      * SA_DClip.  SA_Overscan is for "standard"
;      * overscan dimensions, SA_DClip is for
;      * your custom numeric specifications.
;      */
#SA_Obsolete1=(#SA_Dummy+$0015)
;/* obsolete S_MONITORNAME   */

;/** booleans **/
#SA_ShowTitle=(#SA_Dummy+$0016)
;/* boolean equivalent to flag SHOWTITLE  */
#SA_Behind=(#SA_Dummy+$0017)
;/* boolean equivalent to flag SCREENBEHIND */
#SA_Quiet=(#SA_Dummy+$0018)
;/* boolean equivalent to flag SCREENQUIET */
#SA_AutoScroll=(#SA_Dummy+$0019)
;/* boolean equivalent to flag AUTOSCROLL */
#SA_Pens=(#SA_Dummy+$001A)
;/* pointer to ~0 terminated UWORD array, as
;      * found in struct DrawInfo
;      */
#SA_FullPalette=(#SA_Dummy+$001B)
;/* boolean: initialize color table to entire
;      *  preferences palette (32 for V36), rather
;      * than compatible pens 0-3, 17-19, with
;      * remaining palette as returned by GetColorMap()
;      */

#SA_ColorMapEntries=(#SA_Dummy+$001C)
;/* New for V39:
;      * Allows you to override the number of entries
;      * in the ColorMap for your screen.  Intuition
;      * normally allocates (1<<depth) or 32, whichever
;      * is more, but you may require even more if you
;      * use certain V39 graphics.library features
;      * (eg. palette-banking).
;      */

#SA_Parent=(#SA_Dummy+$001D)
;/* New for V39:
;      * ti_Data is a pointer to a "parent" screen to
;      * attach this one to.  Attached screens slide
;      * and depth-arrange together.
;      */

#SA_Draggable=(#SA_Dummy+$001E)
;/* New for V39:
;      * Boolean tag allowing non-draggable screens.
;      * Do not use without good reason!
;      * (Defaults to TRUE).
;      */

#SA_Exclusive=(#SA_Dummy+$001F)
;/* New for V39:
;      * Boolean tag allowing screens that won't share
;      * the display.  Use sparingly!  Starting with 3.01,
;      * attached screens may be SA_Exclusive.  Setting
;      * SA_Exclusive for each screen will produce an
;      * exclusive family.   (Defaults to FALSE).
;      */

#SA_SharePens=(#SA_Dummy+$0020)
;/* New for V39:
;      * For those pens in the screen's DrawInfo->dri_Pens,
;      * Intuition obtains them in shared mode (see
;      * graphics.library/ObtainPen()).  For compatibility,
;      * Intuition obtains the other pens of a public
;      * screen as PEN_EXCLUSIVE.  Screens that wish to
;      * manage the pens themselves should generally set
;      * this tag to TRUE.  This instructs Intuition to
;      * leave the other pens unallocated.
;      */

#SA_BackFill=(#SA_Dummy+$0021)
;/* New for V39:
;      * provides a "backfill hook" for your screen's
;      * Layer_Info.
;      * See layers.library/InstallLayerInfoHook()
;      */

#SA_Interleaved=(#SA_Dummy+$0022)
;/* New for V39:
;      * Boolean tag requesting that the bitmap
;      * allocated for you be interleaved.
;      * (Defaults to FALSE).
;      */

#SA_Colors32=(#SA_Dummy+$0023)
;/* New for V39:
;      * Tag to set the screen's initial palette colors
;      * at 32 bits-per-gun.  ti_Data is a pointer
;      * to a table to be passed to the
;      * graphics.library/LoadRGB32() function.
;      * This format supports both runs of color
;      * registers and sparse registers.  See the
;      * autodoc for that function for full details.
;      * Any color set here has precedence over
;      * the same register set by SA_Colors.
;      */

#SA_VideoControl=(#SA_Dummy+$0024)
;/* New for V39:
;      * ti_Data is a pointer to a taglist that Intuition
;      * will pass to graphics.library/VideoControl(),
;      * upon opening the screen.
;      */

#SA_FrontChild=(#SA_Dummy+$0025)
;/* New for V39:
;      * ti_Data is a pointer to an already open screen
;      * that is to be the child of the screen being
;      * opened.  The child screen will be moved to the
;      * front of its family.
;      */

#SA_BackChild=(#SA_Dummy+$0026)
;/* New for V39:
;      * ti_Data is a pointer to an already open screen
;      * that is to be the child of the screen being
;      * opened.  The child screen will be moved to the
;      * back of its family.
;      */

#SA_LikeWorkbench=(#SA_Dummy+$0027)
;/* New for V39:
;      * Set ti_Data to 1 to request a screen which
;      * is just like the Workbench.  This gives
;      * you the same screen mode, depth, size,
;      * colors, etc., as the Workbench screen.
;      */

#SA_Reserved=(#SA_Dummy+$0028)
;/* Reserved for private Intuition use */

#SA_MinimizeISG=(#SA_Dummy+$0029)
;/* New for V40:
;      * For compatibility, Intuition always ensures
;      * that the inter-screen gap is at least three
;      * non-interlaced lines.  If your application
;      * would look best with the smallest possible
;      * inter-screen gap, set ti_Data to TRUE.
;      * If you use the new graphics VideoControl()
;      * VC_NoColorPaletteLoad tag for your screen's
;      * ViewPort, you should also set this tag.
;      */

;/* this is an obsolete tag included only for compatibility with V35
; * interim release for the A2024 and Viking monitors
; */
;#ifndef NSTAG_EXT_VPMODE
#NSTAG_EXT_VPMODE=(#TAG_USER|1)
;#endif


;/* OpenScreen error codes, which are returned in the (optional) LONG
; * pointed to by ti_Data for the SA_ErrorCode tag item
; */
#OSERR_NOMONITOR=(1);/* named monitor spec not available */
#OSERR_NOCHIPS=(2);/* you need newer custom chips  */
#OSERR_NOMEM=(3);/* couldn't get normal memory  */
#OSERR_NOCHIPMEM=(4);/* couldn't get chipmem   */
#OSERR_PUBNOTUNIQUE=(5);/* public screen name already used */
#OSERR_UNKNOWNMODE=(6);/* don't recognize mode asked for */
#OSERR_TOODEEP=(7);/* Screen deeper than HW supports */
#OSERR_ATTACHFAIL=(8);/* Failed to attach screens  */
#OSERR_NOTAVAILABLE=(9);/* Mode not available for other reason */

;/* ======================================================================== */
;/* === NewScreen ========================================================== */
;/* ======================================================================== */
;/* note: to use the Extended field, you must use the
; * new ExtNewScreen structure, below
; */
NEWTYPE.NewScreen
LeftEdge.w: TopEdge.w: Width.w: Height.w: Depth.w ;/* screen dimensions */

DetailPen.b: BlockPen.b ;/* for bar/border/gadget rendering */

ViewModes.w ;/* the Modes for the ViewPort (and View) */

_Type.w ;/* the Screen type (see defines above) */

*Font.TextAttr;/* this Screen's default text attributes */

*DefaultTitle.b ;/* the default title for this Screen */

*Gadgets.Gadget;/* UNUSED:  Leave this NULL  */

;/* if you are opening a CUSTOMSCREEN and already have a BitMap
;     * that you want used for your Screen, you set the flags CUSTOMBITMAP in
;     * the Type field and you set this variable to point to your BitMap
;     * structure.  The structure will be copied into your Screen structure,
;     * after which you may discard your own BitMap if you want
;     */
*CustomBitMap.BitMap

End NEWTYPE

;/*
; * For compatibility reasons, we need a new structure for extending
; * NewScreen.  Use this structure is you need to use the new Extension
; * field.
; *
; * NOTE: V36-specific applications should use the
; * OpenScreenTagList( newscreen, tags ) version of OpenScreen().
; * Applications that want to be V34-compatible as well may safely use the
; * ExtNewScreen structure.  Its tags will be ignored by V34 Intuition.
; *
; */
NEWTYPE.ExtNewScreen
LeftEdge.w: TopEdge.w: Width.w: Height.w: Depth.w
DetailPen.b: BlockPen.b
ViewModes.w
_Type.w
*Font.TextAttr
*DefaultTitle.b
*Gadgets.Gadget
*CustomBitMap.BitMap

*Extension.TagItem
;/* more specification data, scanned if
;        * NS_EXTENDED is set in NewScreen.Type
;        */

End NEWTYPE

;/* === Overscan Types === */
#OSCAN_TEXT=(1);/* entirely visible */
#OSCAN_STANDARD=(2);/* just past edges */
#OSCAN_MAX=(3);/* as much as possible */
#OSCAN_VIDEO=(4);/* even more than is possible */


;/* === Public Shared Screen Node === */

;/* This is the representative of a public shared screen.
; * This is an internal data structure, but some functions may
; * present a copy of it to the calling application.  In that case,
; * be aware that the screen pointer of the structure can NOT be
; * used safely, since there is no guarantee that the referenced
; * screen will remain open and a valid data structure.
; *
; * Never change one of these.
; */

NEWTYPE.PubScreenNode
psn_Node.Node;/* ln_Name is screen name */
*psn_Screen.Screen
psn_Flags.w ;/* below  */
psn_Size.w ;/* includes name buffer */
psn_VisitorCount.w ;/* how many visitor windows */
*psn_SigTask.Task;/* who to signal when visitors gone */
psn_SigBit.b ;/* which signal */

End NEWTYPE

#PSNF_PRIVATE=($0001)

;/* NOTE: Due to a bug in NextPubScreen(), make sure your buffer
; * actually has MAXPUBSCREENNAME+1 characters in it!
; */
#MAXPUBSCREENNAME=(139);/* names no longer, please */

;/* pub screen modes */
#SHANGHAI=$0001;/* ï¿½ workbench windows ï¿½ï¿½ pub ï¿½ */
#POPPUBSCREEN=$0002;/* ï¿½ï¿½ pub ï¿½ ï¿½ front when visitor opens */

;/* New for V39:  Intuition has new screen depth-arrangement and movement
; * functions called ScreenDepth() and ScreenPosition() respectively.
; * These functions permit the old behavior of ScreenToFront(),
; * ScreenToBack(), and MoveScreen().  ScreenDepth() also allows
; * independent depth control of attached screens.  ScreenPosition()
; * optionally allows positioning screens even though they were opened
; * {SA_Draggable,FALSE}.
; */

;/* For ScreenDepth(), specify one of SDEPTH_TOFRONT or SDEPTH_TOBACK,
; * and optionally also SDEPTH_INFAMILY.
; *
; * NOTE: ONLY THE OWNER OF THE SCREEN should ever specify
; * SDEPTH_INFAMILY.  Commodities, "input helper" programs,
; * or any other program that did not open a screen should never
; * use that flag.  (Note that this is a style-behavior
; * requirement;  there is no technical requirement that the
; * task calling this function need be the task which opened
; * the screen).
; */

#SDEPTH_TOFRONT=(0);/* Bring screen to front */
#SDEPTH_TOBACK=(1);/* Send screen to back */
#SDEPTH_INFAMILY=(2);/* Move an attached screen with
;          * respect to other screens of
;          * its family
;          */

;/* Here's an obsolete name equivalent to SDEPTH_INFAMILY: */
#SDEPTH_CHILDONLY=#SDEPTH_INFAMILY


;/* For ScreenPosition(), specify one of SPOS_RELATIVE, SPOS_ABSOLUTE,
; * or SPOS_MAKEVISIBLE to describe the kind of screen positioning you
; * wish to perform:
; *
; * SPOS_RELATIVE: The x1 and y1 parameters to ScreenPosition() describe
; * the offset in coordinates you wish to move the screen by.
; * SPOS_ABSOLUTE: The x1 and y1 parameters to ScreenPosition() describe
; * the absolute coordinates you wish to move the screen to.
; * SPOS_MAKEVISIBLE: (x1,y1)-(x2,y2) describes a rectangle on the
; * screen which you would like autoscrolled into view.
; *
; * You may additionally set SPOS_FORCEDRAG along with any of the
; * above.  Set this if you wish to reposition an {SA_Draggable,FALSE}
; * screen that you opened.
; *
; * NOTE: ONLY THE OWNER OF THE SCREEN should ever specify
; * SPOS_FORCEDRAG.  Commodities, "input helper" programs,
; * or any other program that did not open a screen should never
; * use that flag.
; */

#SPOS_RELATIVE=(0);/* Coordinates are relative */

#SPOS_ABSOLUTE=(1);/* Coordinates are expressed as
;          * absolutes, not relatives.
;          */

#SPOS_MAKEVISIBLE=(2);/* Coordinates describe a box on
;          * the screen you wish to be
;          * made visible by autoscrolling
;          */

#SPOS_FORCEDRAG=(4);/* Move non-draggable screen */

;/* New for V39: Intuition supports double-buffering in screens,
; * with friendly interaction with menus and certain gadgets.
; * For each buffer, you need to get one of these structures
; * from the AllocScreenBuffer() call.  Never allocate your
; * own ScreenBuffer structures!
; *
; * The sb_DBufInfo field is for your use.  See the graphics.library
; * AllocDBufInfo() autodoc for details.
; */
NEWTYPE.ScreenBuffer
*sb_BitMap.BitMap;/* BitMap of this buffer */
*sb_DBufInfo.DBufInfo;/* DBufInfo for this buffer */

End NEWTYPE

;/* These are the flags that may be passed to AllocScreenBuffer().
; */
#SB_SCREEN_BITMAP=1
#SB_COPY_BITMAP=2

;/* Include obsolete identifiers: */
CNIF @#INTUITION_IOBSOLETE_H=0
XINCLUDE"intuition/iobsolete.ab3"
CEND ;INTUITION_IOBSOLETE_H

CEND
