; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
CNIF @#INTUITION_POINTERCLASS_H=0
#INTUITION_POINTERCLASS_H = 1
;
;  $VER: pointerclass.ab3 40.0 (03.03.94)
;

CNIF @#EXEC_TYPES_H=0
XINCLUDE"exec/types.ab3"
CEND ;EXEC_TYPES_H

CNIF @#INTUITION_INTUITION_H=0
XINCLUDE"intuition/intuition.ab3"
CEND ;INTUITION_INTUITION_H

CNIF @#UTILITY_TAGITEM_H=0
XINCLUDE"utility/tagitem.ab3"
CEND ;UTILITY_TAGITEM_H

;/* The following tags are recognized at NewObject() time by
; * pointerclass:
; *
; * POINTERA_BitMap (struct BitMap *) - Pointer to bitmap to
; * get pointer imagery from.  Bitplane data need not be
; * in chip RAM.
; * POINTERA_XOffset (LONG) - X-offset of the pointer hotspot.
; * POINTERA_YOffset (LONG) - Y-offset of the pointer hotspot.
; * POINTERA_WordWidth (ULONG) - designed width of the pointer in words
; * POINTERA_XResolution (ULONG) - one of the POINTERXRESN_ flags below
; * POINTERA_YResolution (ULONG) - one of the POINTERYRESN_ flags below
; *
; */

#POINTERA_Dummy=(#TAG_USER+$39000)

#POINTERA_BitMap=(#POINTERA_Dummy+$01)
#POINTERA_XOffset=(#POINTERA_Dummy+$02)
#POINTERA_YOffset=(#POINTERA_Dummy+$03)
#POINTERA_WordWidth=(#POINTERA_Dummy+$04)
#POINTERA_XResolution=(#POINTERA_Dummy+$05)
#POINTERA_YResolution=(#POINTERA_Dummy+$06)

;/* These are the choices for the POINTERA_XResolution attribute which
; * will determine what resolution pixels are used for this pointer.
; *
; * POINTERXRESN_DEFAULT (ECS-compatible pointer width)
; * = 70 ns if SUPERHIRES-type mode, 140 ns if not
; *
; * POINTERXRESN_SCREENRES
; * = Same as pixel speed of screen
; *
; * POINTERXRESN_LORES (pointer always in lores-like pixels)
; * = 140 ns in 15kHz modes, 70 ns in 31kHz modes
; *
; * POINTERXRESN_HIRES (pointer always in hires-like pixels)
; * = 70 ns in 15kHz modes, 35 ns in 31kHz modes
; *
; * POINTERXRESN_140NS (pointer always in 140 ns pixels)
; * = 140 ns always
; *
; * POINTERXRESN_70NS (pointer always in 70 ns pixels)
; * = 70 ns always
; *
; * POINTERXRESN_35NS (pointer always in 35 ns pixels)
; * = 35 ns always
; */

#POINTERXRESN_DEFAULT=0
#POINTERXRESN_140NS=1
#POINTERXRESN_70NS=2
#POINTERXRESN_35NS=3

#POINTERXRESN_SCREENRES=4
#POINTERXRESN_LORES=5
#POINTERXRESN_HIRES=6

;/* These are the choices for the POINTERA_YResolution attribute which
; * will determine what vertical resolution is used for this pointer.
; *
; * POINTERYRESN_DEFAULT
; * = In 15 kHz modes, the pointer resolution will be the same
; *   as a non-interlaced screen.  In 31 kHz modes, the pointer
; *   will be doubled vertically.  This means there will be about
; *   200-256 pointer lines per screen.
; *
; * POINTERYRESN_HIGH
; * POINTERYRESN_HIGHASPECT
; * = Where the hardware/software supports it, the pointer resolution
; *   will be high.  This means there will be about 400-480 pointer
; *   lines per screen.  POINTERYRESN_HIGHASPECT also means that
; *   when the pointer comes out double-height due to hardware/software
; *   restrictions, its width would be doubled as well, if possible
; *   (to preserve aspect).
; *
; * POINTERYRESN_SCREENRES
; * POINTERYRESN_SCREENRESASPECT
; * = Will attempt to match the vertical resolution of the pointer
; *   to the screen's vertical resolution.  POINTERYRESN_SCREENASPECT also
; *   means that when the pointer comes out double-height due to
; *   hardware/software restrictions, its width would be doubled as well,
; *   if possible (to preserve aspect).
; *
; */

#POINTERYRESN_DEFAULT=0
#POINTERYRESN_HIGH=2
#POINTERYRESN_HIGHASPECT=3
#POINTERYRESN_SCREENRES=4
#POINTERYRESN_SCREENRESASPECT=5

;/* Compatibility note:
; *
; * The AA chipset supports variable sprite width and resolution, but
; * the setting of width and resolution is global for all sprites.
; * When no other sprites are in use, Intuition controls the sprite
; * width and sprite resolution for correctness based on pointerclass
; * attributes specified by the creator of the pointer. Intuition
; * controls sprite resolution with the VTAG_DEFSPRITERESN_SET tag
; * to VideoControl().  Applications can override this on a per-viewport
; * basis with the VTAG_SPRITERESN_SET tag to VideoControl().
; *
; * If an application uses a sprite other than the pointer sprite,
; * Intuition will automatically regenerate the pointer sprite's image in
; * a compatible width. This might involve BitMap scaling of the imagery
; * you supply.
; *
; * If any sprites other than the pointer sprite were obtained with the
; * old GetSprite() call, Intuition assumes that the owner of those
; * sprites is unaware of sprite resolution, hence Intuition will set the
; * default sprite resolution (VTAG_DEFSPRITERESN_SET) to ECS-compatible,
; * instead of as requested by the various pointerclass attributes.
; *
; * No resolution fallback occurs when applications use ExtSprites.
; * Such applications are expected to use VTAG_SPRITERESN_SET tag if
; * necessary.
; *
; * NB: Under release V39, only sprite width compatibility is implemented.
; * Sprite resolution compatibility was added for V40.
; */

CEND
