; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
CNIF @#INTUITION_CLASSES_H=0
#INTUITION_CLASSES_H = 1
;
;  $VER: classes.ab3 40.0 (03.03.94)
;

CNIF @#UTILITY_HOOKS_H=0
XINCLUDE"utility/hooks.ab3"
CEND ;UTILITY_HOOKS_H

CNIF @#INTUITION_CLASSUSR_H=0
XINCLUDE"intuition/classusr.ab3"
CEND ;INTUITION_CLASSUSR_H

;/*******************************************/
;/*** "White box" access to struct IClass ***/
;/*******************************************/

;/* This structure is READ-ONLY, and allocated only by Intuition */
NEWTYPE.IClass
cl_Dispatcher.Hook
cl_Reserved.l ;/* must be 0  */
*cl_Super.IClass
cl_ID.b ;ClassID (ClassID = typedef UBYTE)

;/* where within an object is the instance data for this class? */
cl_InstOffset.w
cl_InstSize.w

cl_UserData.l ;/* per-class data of your choice */
cl_SubclassCount.l
;/* how many direct subclasses? */
cl_ObjectCount.l
;/* how many objects created of this class? */
cl_Flags.l
End NEWTYPE

#CLF_INLIST=$00000001;/* class is in public class �� */

;/* add offset for instance data to an object handle */
;#INST_DATA(=#cl,#o#)((#VOID*#)(((#UBYTE*#)o)+cl->cl_InstOffset))

;/* sizeof the instance data for a given class */
;#SIZEOF_INSTANCE(=#cl#)((#cl)->cl_InstOffset+#(#cl)->cl_InstSize#\
;+ sizeof (struct _Object ))

;/**************************************************/
;/*** "White box" access to struct _Object ***/
;/**************************************************/

;/*
; * We have this, the instance data of the root class, PRECEDING
; * the "object".  This is so that Gadget objects are Gadget pointers,
; * and so on.  If this structure grows, it will always have o_Class
; * at the end, so the macro OCLASS(o) will always have the same
; * offset back from the pointer returned from NewObject().
; *
; * This data structure is subject to change.  Do not use the o_Node
; * embedded structure.
; */

NEWTYPE._Object
o_Node.MinNode
*o_Class.IClass
End NEWTYPE

;/* convenient typecast */
;#_OBJ(=#o#)((#struct#_Object*#)(o))

;/* get "public" handle on baseclass instance from real beginning of obj data */
;#BASEOBJECT(=#_obj#)(#(#Object*#)(#_OBJ(_obj)+1)#)

;/* get back to object data struct from public handle */
;#_OBJECT(=#o#)(#_OBJ(o)-#1)

;/* get class pointer from an object handle */
;#OCLASS(=#o#)(#(#_OBJECT(o))->o_Class#)

CEND
