; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
CNIF @#INTUITION_CLASSUSR_H=0
#INTUITION_CLASSUSR_H = 1
;
;  $VER: classusr.ab3 40.0 (03.03.94)
;

CNIF @#UTILITY_HOOKS_H=0
XINCLUDE"utility/hooks.ab3"
CEND ;UTILITY_HOOKS_H

;/*** User visible handles on objects, classes, messages ***/
;typedef ULONG Object;  /* abstract handle */
;/* abstract handle */

;typedef UBYTE *ClassID;

;/* you can use this type to point to a "generic" message,
; * in the object-oriented programming parlance.  Based on
; * the value of 'MethodID', you dispatch to processing
; * for the various message types.  The meaningful parameter
; * packet structure definitions are defined below.
; */

;typedef struct {
NEWTYPE .Msg
MethodID.l
;/* method-specific data follows, some examples below */
End NEWTYPE
;;}  *Msg;

;/*
; * Class id strings for Intuition classes.
; * There's no real reason to use the uppercase constants
; * over the lowercase strings, but this makes a good place
; * to list the names of the built-in classes.
; */
Macro ROOTCLASS:"rootclass":End Macro ;/* classusr.h   */
Macro IMAGECLASS:"imageclass":End Macro ;/* imageclass.h   */
Macro FRAMEICLASS:"frameiclass":End Macro
Macro SYSICLASS:"sysiclass":End Macro
Macro FILLRECTCLASS:"fillrectclass":End Macro
Macro GADGETCLASS:"gadgetclass":End Macro ;/* gadgetclass.h  */
Macro PROPGCLASS:"propgclass":End Macro
Macro STRGCLASS:"strgclass":End Macro
Macro BUTTONGCLASS:"buttongclass":End Macro
Macro FRBUTTONCLASS:"frbuttonclass":End Macro
Macro GROUPGCLASS:"groupgclass":End Macro
Macro ICCLASS:"icclass":End Macro ;/* icclass.h   */
Macro MODELCLASS:"modelclass":End Macro
Macro ITEXTICLASS:"itexticlass":End Macro
Macro POINTERCLASS:"pointerclass":End Macro ;/* pointerclass.h */

;/* Dispatched method ID's
; * NOTE: Applications should use Intuition entry points, not direct
; * DoMethod() calls, for NewObject, DisposeObject, SetAttrs,
; * SetGadgetAttrs, and GetAttr.
; */

#OM_Dummy=($100)
#OM_NEW=($101);/* 'object' parameter is "true class" */
#OM_DISPOSE=($102);/* delete self (no parameters)  */
#OM_SET=($103);/* set attributes (in tag list)  */
#OM_GET=($104);/* return single attribute value */
#OM_ADDTAIL=($105);/* add self to a List (let root do it) */
#OM_REMOVE=($106);/* remove self from list  */
#OM_NOTIFY=($107);/* send to self: notify dependents */
#OM_UPDATE=($108);/* notification message from somebody */
#OM_ADDMEMBER=($109);/* used by various classes with lists */
#OM_REMMEMBER=($10A);/* used by various classes with lists */

;/* Parameter "Messages" passed to methods */

;/* OM_NEW and OM_SET */
NEWTYPE.opSet
MethodID.l
*ops_AttrList.TagItem;/* new attributes */
*ops_GInfo.GadgetInfo;/* always there for gadgets,
;          * when SetGadgetAttrs() is used,
;          * but will be NULL for OM_NEW
;          */
End NEWTYPE

;/* OM_NOTIFY, and OM_UPDATE */
NEWTYPE.opUpdate
MethodID.l
*opu_AttrList.TagItem;/* new attributes */
*opu_GInfo.GadgetInfo;/* non-NULL when SetGadgetAttrs or
;          * notification resulting from gadget
;          * input occurs.
;          */
opu_Flags.l ;/* defined below */
End NEWTYPE

;/* this flag means that the update message is being issued from
; * something like an active gadget, a la GACT_FOLLOWMOUSE.  When
; * the gadget goes inactive, it will issue a final update
; * message with this bit cleared.  Examples of use are for
; * GACT_FOLLOWMOUSE equivalents for propgadclass, and repeat strobes
; * for buttons.
; */
#OPUF_INTERIM=(1 LSL 0)

;/* OM_GET */
NEWTYPE.opGet
MethodID.l
opg_AttrID.l
*opg_Storage.l ;/* may be other types, but "int"
;          * types are all ULONG
;          */
End NEWTYPE

;/* OM_ADDTAIL */
NEWTYPE.opAddTail
MethodID.l
*opat_List.List
End NEWTYPE

;/* OM_ADDMEMBER, OM_REMMEMBER */
;#opAddMember=#opMember
NEWTYPE.opMember
MethodID.l
*opam_Object._Object
End NEWTYPE

CEND
