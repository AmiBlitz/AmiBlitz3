; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "WindowDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 800
; Max GadgetList  = 50
; Max Queue       = 1
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 1
; Max Sprite      = 2
; Max Stencil     = 1
; Max Module      = 1
; Max Window      = 50
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 1
; Max IntuiFont   = 7
; Max MedModule   = 1
; Max Palette     = 4
; Max MenuList    = 50
; Max BlitzFont   = 1
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: window.include                                                        /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF @#max_windows=0
  #max_windows = 20  ; Intuiwindows
CEND

CNIF @#max_wincacheentries=0
  #max_wincacheentries= #max_windows+1
CEND


CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
CEND


XINCLUDE "error.include.ab3"
XINCLUDE "screen.include.ab3"
XINCLUDE "file.include.ab3"


NEWTYPE.windat
is_open.w
wintyp.l
wincacheid.l
id_data.l
user_data.l            ; Fuer spezielle Botschaften
user_data2.l
gadgets.w
exclusive.w           ; Alle anderen werden gedisabled ...
locked.l              ; = 0 falls nicht gelocked, ansonsten lockpointer
x.l
y.l
xs.l
ys.l
ixs.l
iys.l
minimumxs.w
minimumys.w
maximumxs.w
maximumys.w
menu.l
title.s
flags.l
End NEWTYPE


NEWTYPE.wincacheentry
wintyp.l
id_data.l
x.l
y.l
xs.l
ys.l
End NEWTYPE


NEWTYPE.winengine
max_window.l
wincache_new.l
def_wbottomoff.w
def_wbottomoff_nosize.w
def_wtopoff.w
def_wtopoff_notitle.w
def_wleftoff.w
def_wrightoff.w
def_wrightoff_size.w
lastfocuswin.l
End NEWTYPE


If Maximum Window     < #max_windows Then serror {"Please set maximum windows at least to "+Str$(#max_windows)+" !"}
If Maximum GTList     < #max_windows Then serror {"Please set maximum gtlist at least to "+Str$(#max_windows)+" !"}
If Maximum GTMenuList < #max_windows Then serror {"Please set maximum gtMenus at least to "+Str$(#max_windows)+" !"}


Dim windat.windat          (#max_windows-1)
Dim wincache.wincacheentry (#max_wincacheentries-1)
;Dim wintag.TagItem         (10)


DEFTYPE.winengine winengine
winengine\lastfocuswin=-1


DEFTYPE.Rectangle win_cliprect
DEFTYPE.Region    *win_region

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_SetClip {win.l,clip_x1.l,clip_y1.l,clip_x2.l,clip_y2.l}         /
;/                                                                             /
;/ Description:                                                                /
;/   #max_windows = 20  ; Intuiwindows                                         /
;/ user_data.l            ; Fuer spezielle Botschaften                         /
;/ exclusive.w           ; Alle anderen werden gedisabled ...                  /
;/ locked.l              ; = 0 falls nicht gelocked, ansonsten lockpointer     /
;/ Dim wintag.TagItem         (10)                                             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - clip_x1.l    : ???                                                        /
;/ - clip_y1.l    : ???                                                        /
;/ - clip_x2.l    : ???                                                        /
;/ - clip_y2.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_SetClip {win.l,clip_x1.l,clip_y1.l,clip_x2.l,clip_y2.l}
SHARED win_cliprect,*win_region
*win.Window = Peek.l(Addr Window (win))
win_cliprect\MinX = clip_x1
win_cliprect\MinY = clip_y1
win_cliprect\MaxX = clip_x2
win_cliprect\MaxY = clip_y2
LockLayer_ 0,*win\WLayer
*new_region.Region = NewRegion_
If *new_region
  If OrRectRegion_(*new_region, &win_cliprect)
    *win_region.Region = InstallClipRegion_(*win\WLayer, *new_region)
  End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_RemoveClip {win.l}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_RemoveClip {win.l}
SHARED *win_region
*win.Window = Peek.l(Addr Window (win))
*new_region.Region = InstallClipRegion_(*win\WLayer, *win_region)
If *new_region Then DisposeRegion_ *new_region
UnlockLayer_ *win\WLayer
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = win_WriteCache {dos.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - dos.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l win_WriteCache {dos.l}
SHARED wincache(),winengine
succ.l = file_WriteMem{dos,&winengine\wincache_new,4}
succ.l = file_WriteMem{dos,&wincache(0)\wintyp,SizeOf.wincacheentry * #max_wincacheentries}
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = win_ReadCache {dos.l,maxlength.l}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - dos.l    : ???                                                            /
;/ - maxlength.l    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l win_ReadCache {dos.l,maxlength.l}
SHARED wincache(),winengine
blength.l = Min(SizeOf.wincacheentry * #max_wincacheentries,maxlength-4)
succ.l = file_ReadMem{dos,&winengine\wincache_new,4}
succ.l = file_ReadMem{dos,&wincache(0)\wintyp,blength}
Function Return succ
End Function


USEPATH windat(win.l)
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_Lock {win.l}                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_Lock {win.l}
SHARED wintag(),windat()
If win>=0
If windat(win)\locked = 0
  windat(win)\locked=AllocMem_(SizeOf.Requester,1)
  If windat(win)\locked
    winptr.l=Peek.l(Addr Window(win))
    InitRequester_(windat(win)\locked)
    If Request_(windat(win)\locked,winptr)
;      *xec.Library=Peek.l(4)
;      If *xec\lib_Version=>39
;        wintag(0)\ti_Tag=#WA_BusyPointer,-1
;        wintag(1)\ti_Tag=#TAG_END
        SetWindowPointerA_ winptr,Tags(#WA_BusyPointer,-1)
;      EndIf
    Else
      FreeMem_ windat(win)\locked,SizeOf.Requester
      windat(win)\locked = 0
    EndIf
  EndIf
End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_Unlock {win.l}                                                  /
;/                                                                             /
;/ Description:                                                                /
;/      *xec.Library=Peek.l(4)                                                 /
;/      If *xec\lib_Version=>39                                                /
;/        wintag(0)\ti_Tag=#WA_BusyPointer,-1                                  /
;/        wintag(1)\ti_Tag=#TAG_END                                            /
;/      EndIf                                                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_Unlock {win.l}
SHARED wintag(),windat()
If win>=0
If windat(win)\locked >< 0
  winptr.l=Peek.l(Addr Window(win))
;  *xec.Library=Peek.l(4)
;  If *xec\lib_Version=>39
;    Delay_ 5
;    wintag(0)\ti_Tag=#TAG_END
    SetWindowPointerA_ winptr,Tags(#TAG_END,0)
;  EndIf
  EndRequest_ windat(win)\locked,winptr
  FreeMem_ windat(win)\locked,SizeOf.Requester
  windat(win)\locked = 0
End If
EndIf
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_LockAll {@exceptwin.l}                                          /
;/                                                                             /
;/ Description:                                                                /
;/  *xec.Library=Peek.l(4)                                                     /
;/  If *xec\lib_Version=>39                                                    /
;/    Delay_ 5                                                                 /
;/    wintag(0)\ti_Tag=#TAG_END                                                /
;/  EndIf                                                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - exceptwin.l    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_LockAll {@exceptwin.l}
SHARED windat(),winengine
For n.l = 0 To winengine\max_window
  If n><exceptwin
    If windat(n)\is_open Then win_Lock {n}
  End If
Next
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_UnlockAll {}                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_UnlockAll {}
SHARED windat(),winengine
For n.l = 0 To winengine\max_window
  If windat(n)\is_open Then win_Unlock {n}
Next
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l =  win_SmartIsOpen {wintyp.l,id_data.l}                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - wintyp.l    : ???                                                         /
;/ - id_data.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST win_SmartIsOpen {wintyp.l,id_data.l}
SHARED windat(),winengine
wopen.l = -1
For n.l = 0 To winengine\max_window
  If windat(n)\is_open
    If windat(n)\wintyp = wintyp AND windat(n)\id_data = id_data Then wopen = n
  End If
Next
Function Return wopen
End Function

Statement win_SetTitle{win.l,title.s}
SHARED windat(),winengine
If windat(win)\is_open
  windat(win)\title = title
  Use Window win
  WTitle windat(win)\title
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = win_GetActiveWin {}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l win_GetActiveWin {}
SHARED windat()
win.l =-1
winadr.l = ActiveWindow
For n.l = 0 To #max_windows-1
  If windat(n)\is_open
    If Peek.l(Addr Window(n)) = ActiveWindow Then win=n : n=#max_windows
  End If
Next
Function Return win
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = win_GetLastFocusWin {}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l win_GetLastFocusWin {}
SHARED winengine
Function Return winengine\lastfocuswin
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = win_IsOpen {win.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w win_IsOpen {win.l}
SHARED windat()
If win>=0 AND win<#max_windows Then succ.w = windat(win)\is_open:Else succ.w = False
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_Close {win.l}                                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_Close {win.l}
SHARED windat(),wincache(),winengine
If \is_open
  If Peek.l(Addr Window(win))
  If \exclusive Then win_UnlockAll {}
  If \locked   Then win_Unlock {win}
  Use Window win
  If \wincacheid=-1 Then \wincacheid = winengine\wincache_new:winengine\wincache_new+1
  If winengine\wincache_new>=#max_wincacheentries Then winengine\wincache_new = 0

  If \wincacheid>=0
    wincache(\wincacheid)\x       = WindowX
    wincache(\wincacheid)\y       = WindowY
    wincache(\wincacheid)\xs      = InnerWidth  ; WindowWidth
    wincache(\wincacheid)\ys      = InnerHeight ; WindowHeight
    wincache(\wincacheid)\wintyp  = \wintyp
    wincache(\wincacheid)\id_data = \id_data
  End If

  If \gadgets>=0
    If Peek.l(Addr GTList(\gadgets)) Then DetachGTList \gadgets : Free GTList \gadgets:\gadgets=-1
  End If
  If \menu>=0
    GTUnSetMenu : Free GTMenuList \menu:\menu =-1
  End If
  CloseWindow win
  \is_open   = False
  \user_data = False
  If win=winengine\lastfocuswin Then winengine\lastfocuswin=-1
  End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_SmartClose {wintyp.l,id_data.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - wintyp.l    : ???                                                         /
;/ - id_data.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_SmartClose {wintyp.l,id_data.l}
win.l =  win_SmartIsOpen {wintyp,id_data}
If win>-1
  win_Close{win}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_CloseAll {}                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_CloseAll {}
SHARED windat()
For n.l = 0 To #max_windows-1
  win_Close {n}
Next
End Statement
!autoexit{win_CloseAll}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = win_FindWinInCache {wintyp.l,id_data.l}                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - wintyp.l    : ???                                                         /
;/ - id_data.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l win_FindWinInCache {wintyp.l,id_data.l}
SHARED wincache(),winengine
m.l=0
id.l = -1
While m<winengine\wincache_new
  If wintyp=wincache(m)\wintyp
    If id_data = wincache(m)\id_data
      id = m:m = winengine\wincache_new
    End If
  EndIf
  m+1
Wend
Function Return id.l
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_ClearCache {}                                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_ClearCache {}
SHARED wincache(),winengine
For n.l=0 To #max_wincacheentries-1
  wincache(n)\wintyp  = 0
  wincache(n)\id_data = 0
  wincache(n)\xs = 0
  wincache(n)\ys = 0
  wincache(n)\x = 0
  wincache(n)\y = 0
Next
winengine\wincache_new = 0
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_FlushCacheWin {wintyp.l,@id_data.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - wintyp.l    : ???                                                         /
;/ - id_data.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_FlushCacheWin {wintyp.l,@id_data.l}
SHARED wincache(),winengine
For n.l=0 To #max_wincacheentries-1
  If wincache(n)\wintyp=wintyp
    If wincache(n)\id_data=id_data OR id_data=-1
      wincache(n)\xs = -1
      wincache(n)\ys = -1
      wincache(n)\x = -1
      wincache(n)\y = -1
    End If
  End If
Next
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = win_Init {wintyp.l,id_data.l,title.s,@nocache.l}        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - wintyp.l    : ???                                                         /
;/ - id_data.l    : ???                                                        /
;/ - title.s    : ???                                                          /
;/ - nocache.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l win_Init {wintyp.l,id_data.l,title.s,@nocache.l}
SHARED windat(),wincache(),winengine
win.l = win_SmartIsOpen {wintyp,id_data}
If win=-1
  win = 0
  While \is_open AND win<#max_windows-1
    win.l+1
  Wend
  If \is_open = False
    If win>winengine\max_window Then winengine\max_window = win
    If nocache=False
      \wincacheid = win_FindWinInCache {wintyp,id_data}
    Else
      \wincacheid = -2
    End If
    \wintyp  = wintyp
    \id_data = id_data
    \exclusive = False
    \gadgets   = -1
    \menu      = -1
    \flags     = #WFLG_SIZEGADGET|#WFLG_DRAGBAR|#WFLG_DEPTHGADGET|#WFLG_CLOSEGADGET|#WFLG_SIZEBBOTTOM|$200000
    \title     = title.s
    \maximumxs = 3200
    \maximumys = 2048
    If \wincacheid<0
      \x=-1:\y=-1:\ixs=-1:\iys=-1 : \xs =-1:\ys = -1
    Else
      \x  = wincache(\wincacheid)\x
      \y  = wincache(\wincacheid)\y
      \ixs = wincache(\wincacheid)\xs
      \iys = wincache(\wincacheid)\ys
      \xs = -1
      \ys = -1
    End If
  Else
    error {"win_Init: too many windows open! (maximum: "+Str$(#max_windows)+")"}
    win = -1
  End If
Else
  WindowToFront_ Peek.l(Addr Window(win))
  ActivateWindow_ Peek.l(Addr Window(win))
  win=-1
End If
Function Return win
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_SetInnerSize {win.l,x.l,y.l,xs.l,ys.l}                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_SetInnerSize {win.l,x.l,y.l,xs.l,ys.l}
SHARED windat(),wincache(),winengine
\x  = x
\y  = y
\ixs = xs
\iys = ys
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_SetSize {win.l,x.l,y.l,xs.l,ys.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_SetSize {win.l,x.l,y.l,xs.l,ys.l}
SHARED windat(),wincache(),winengine
\x  = x
\y  = y
\xs = xs
\ys = ys
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_AttachDragBar {win.l,x.l,y.l,xs.l,ys.l}                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_AttachDragBar {win.l,x.l,y.l,xs.l,ys.l}
DEFTYPE.Gadget      *gad
DEFTYPE.NewGadget   ng
*WinAddr._Window = Peek.l(Addr Window(win))
*scr._Screen = Peek.l(Addr Screen(0))
*VisInfo.l = GetVisualInfoA_(*scr,0)
*GadList.l = Peek.l(Addr GadgetList(win))
*gad = CreateContext_(&*GadList)

ng\ng_LeftEdge  = x
ng\ng_TopEdge   = y
ng\ng_Width     = xs
ng\ng_Height    = ys
ng\ng_GadgetText= 0
ng\ng_TextAttr  = 0
ng\ng_GadgetID  = -1
ng\ng_Flags     = 0
ng\ng_VisualInfo= *VisInfo
ng\ng_UserData  = 0

*gad = CreateGadgetA_(#GENERIC_KIND, *gad, &ng, 0)
*gad\Activation = *gad\Activation | #GACT_IMMEDIATE | #GACT_RELVERIFY
*gad\GadgetType = #GTYP_WDRAGGING | #GTYP_BOOLGADGET
*gad\Flags = *gad\Flags | #GFLG_GADGHNONE
AddGList_ *WinAddr,*GadList,-1,-1,0
RefreshGList_ *GadList,*WinAddr,0,-1
GT_RefreshWindow_ *WinAddr,0
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_AttachSizeButton {win.l,xs.l,ys.l}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_AttachSizeButton {win.l,xs.l,ys.l}
DEFTYPE.Gadget      *gad
DEFTYPE.NewGadget   ng
*WinAddr._Window = Peek.l(Addr Window(win))
*scr._Screen = Peek.l(Addr Screen(0))
*VisInfo.l = GetVisualInfoA_(*scr,0)
*GadList.l = Peek.l(Addr GadgetList(win))
*gad = CreateContext_(&*GadList)

  ng\ng_LeftEdge  = -xs
  ng\ng_TopEdge   = -ys
  ng\ng_Width     = xs
  ng\ng_Height    = ys
  ng\ng_GadgetText= 0
  ng\ng_TextAttr  = 0
  ng\ng_GadgetID  = -1
  ng\ng_Flags     = 0
  ng\ng_VisualInfo= *VisInfo
  ng\ng_UserData  = 0

*gad = CreateGadgetA_(#GENERIC_KIND, *gad, &ng, 0)
*gad\Activation = *gad\Activation | #GACT_IMMEDIATE | #GACT_RELVERIFY
*gad\GadgetType = #GTYP_SIZING | #GTYP_BOOLGADGET
*gad\Flags = *gad\Flags | #GFLG_GADGHNONE |#GFLG_RELBOTTOM|#GFLG_RELRIGHT
AddGList_ *WinAddr,*GadList,-1,-1,0
RefreshGList_ *GadList,*WinAddr,0,-1
GT_RefreshWindow_ *WinAddr,0
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_SetInnerSizeSoft {win.l,x.l,y.l,xs.l,ys.l}                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_SetInnerSizeSoft {win.l,x.l,y.l,xs.l,ys.l}
SHARED windat(),wincache(),winengine
If \x<0 Then \x  = x
If \y<0 Then \y  = y
If \ixs<xs Then \ixs = xs
If \iys<ys Then \iys = ys
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_SetMinDims {win.l,xs.l,ys.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_SetMinDims {win.l,xs.l,ys.l}
SHARED windat(),wincache(),winengine
\minimumxs = xs
\minimumys = ys
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_SetMaxDims {win.l,xs.l,ys.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_SetMaxDims {win.l,xs.l,ys.l}
SHARED windat(),wincache(),winengine
\maximumxs = xs
\maximumys = ys
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_SetExclusive {win.l,exclusive.w}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - exclusive.w    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_SetExclusive {win.l,exclusive.w}
SHARED windat(),wincache(),winengine
\exclusive = exclusive
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_SetFlag {win.l,flag.l}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - flag.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_SetFlag {win.l,flag.l}
SHARED windat()
\flags = \flags | flag
  If \flags&#WFLG_BACKDROP
    *scr._Screen = Peek.l(Addr Screen (0))
    \xs = screen_GetWidth{}
    \ys = screen_GetHeight{} - *scr\BarHeight - 1
    \x = 0
    \y = screen_GetHeight{} - \ys
    \title = ""
  End If
  If \flags&#WFLG_BORDERLESS
    \ixs = \xs
    \iys = \ys
  End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_ResetFlag {win.l,flag.l}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - flag.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_ResetFlag {win.l,flag.l}
SHARED windat()
\flags = (\flags | flag) - flag
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_SetMenu {win.l,menu.l}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - menu.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_SetMenu {win.l,menu.l}
SHARED windat()
\menu = menu
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_SetGadgets {win.l,gadgets.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - gadgets.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_SetGadgets {win.l,gadgets.l}
SHARED windat()
\gadgets = gadgets
End Statement




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_Test {win.l}                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_Test {win.l}
SHARED windat(),wincache(),winengine
  If \maximumxs=\minimumxs AND \maximumys=\minimumys Then \flags=\flags AND (NOT #WFLG_SIZEGADGET)
  If \flags&#WFLG_BORDERLESS = False
    If \xs<=0
    \xs = \ixs + winengine\def_wleftoff + winengine\def_wrightoff
    End If
    \minimumxs + winengine\def_wleftoff + winengine\def_wrightoff
   ; \maximumxs + winengine\def_wleftoff + winengine\def_wrightoff
    If \flags&#WFLG_SIZEGADGET
    If \title><"" OR \flags&#WFLG_DEPTHGADGET><0
      If \ys<=0
      \ys = \iys + winengine\def_wtopoff  + winengine\def_wbottomoff
      End If
      \minimumys + winengine\def_wtopoff  + winengine\def_wbottomoff
  ;    \maximumys + winengine\def_wtopoff  + winengine\def_wbottomoff
    Else
      If \ys<=0
      \ys = \iys + winengine\def_wtopoff_notitle  + winengine\def_wbottomoff
      End If
      \minimumys + winengine\def_wtopoff_notitle  + winengine\def_wbottomoff
   ;   \maximumys + winengine\def_wtopoff_notitle  + winengine\def_wbottomoff
    End If
    Else
    If \title><"" OR \flags&#WFLG_DEPTHGADGET><0
      If \ys<=0
      \ys = \iys + winengine\def_wtopoff  + winengine\def_wbottomoff_nosize
      End If
      \minimumys + winengine\def_wtopoff  + winengine\def_wbottomoff_nosize
   ;   \maximumys + winengine\def_wtopoff  + winengine\def_wbottomoff_nosize
    Else
      If \ys<=0
      \ys = \iys + winengine\def_wtopoff_notitle  + winengine\def_wbottomoff_nosize
      End If
      \minimumys + winengine\def_wtopoff_notitle  + winengine\def_wbottomoff_nosize
   ;   \maximumys + winengine\def_wtopoff_notitle  + winengine\def_wbottomoff_nosize
    End If
    End If
  Else

    If \xs<=0 Then \xs = \ixs
    If \ys<=0 Then \ys = \iys
  End If

  If \xs <= 0 Then \xs = 20
  If \ys <= 0 Then \ys = 20

  If \x<0 Then \x = 0
  If \y<0 Then \y = 0

  If \xs      >= screen_GetWidth{}  Then \xs = screen_GetWidth{}
  If \x + \xs >= screen_GetWidth{}  Then \x  = screen_GetWidth{} - \xs
  If \ys      >= screen_GetHeight{} Then \ys = screen_GetHeight{}
  If \y + \ys >= screen_GetHeight{} Then \y  = screen_GetHeight{} - \ys

  If \flags&#WFLG_BORDERLESS = False ; was backdrop !
    \ixs = \xs - winengine\def_wleftoff  - winengine\def_wrightoff
    \iys = \ys
    If \title><"" OR \flags&#WFLG_DEPTHGADGET><0
      \iys - winengine\def_wtopoff
    Else
      \iys - winengine\def_wtopoff_notitle
    End If

    If \flags&#WFLG_SIZEGADGET
      \iys - winengine\def_wbottomoff
    Else
      \iys - winengine\def_wbottomoff_nosize
    End If

  End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_Open {win.l,@active.l}                                          /
;/                                                                             /
;/ Description:                                                                /
;/    ; \maximumxs + winengine\def_wleftoff + winengine\def_wrightoff          /
;/   ;    \maximumys + winengine\def_wtopoff  + winengine\def_wbottomoff       /
;/    ;   \maximumys + winengine\def_wtopoff_notitle  + winengine\def_wbotto:: /
;/ moff                                                                        /
;/    ;   \maximumys + winengine\def_wtopoff  + winengine\def_wbottomoff_nos:: /
;/ ize                                                                         /
;/    ;   \maximumys + winengine\def_wtopoff_notitle  + winengine\def_wbotto:: /
;/ moff_nosize                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - active.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_Open {win.l,@active.l}
SHARED windat(),wincache(),winengine
If windat(win)\is_open = False
  \is_open = True

  If \exclusive Then win_LockAll {}

  win_Test{win}

  SizeLimits \minimumxs,\minimumys,\maximumxs,\maximumys

  If active><False Then \flags = \flags|#WFLG_ACTIVATE : winengine\lastfocuswin = win

;  If \flags&#WFLG_BACKDROP Then \ixs = \xs : \iys = \ys ;: \flags - #WFLG_BACKDROP

  Window win,\x,\y,\xs,\ys,\flags,\title,1,2

 ; If \gadgets>=0
 ;   If Peek.l(Addr GTList(\gadgets)) Then AttachGTList \gadgets,win
 ; End If

  If \menu>=0
    GTSetMenu \menu
  End If

  If \flags&#WFLG_BORDERLESS = False ; was backdrop !
    winengine\def_wleftoff   = WLeftOff
    winengine\def_wrightoff  = WindowWidth-InnerWidth-winengine\def_wleftoff

    If \title><"" OR \flags&#WFLG_DEPTHGADGET><0
      winengine\def_wtopoff    = WTopOff
    Else
      winengine\def_wtopoff_notitle    = WTopOff
    End If

    If \flags&#WFLG_SIZEGADGET
      winengine\def_wbottomoff = WindowHeight-InnerHeight-WTopOff
    Else
      winengine\def_wbottomoff_nosize = WindowHeight-InnerHeight-WTopOff
    End If

  End If
Else
  WindowToFront_ Peek.l(Addr Window(win))
  If active><False
    ActivateWindow_ Peek.l(Addr Window(win))
    winengine\lastfocuswin = win
  End If
End If

;If win><-1 Then Activate win
End Statement




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_ToFront {win.l}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/  If \flags&#WFLG_BACKDROP Then \ixs = \xs : \iys = \ys ;: \flags - #WFLG_:: /
;/ BACKDROP                                                                    /
;/  ; If \gadgets>=0                                                           /
;/  ;   If Peek.l(Addr GTList(\gadgets)) Then AttachGTList \gadgets,win        /
;/  ; End If                                                                   /
;/  If \flags&#WFLG_BORDERLESS = False ; was backdrop !                        /
;/    winengine\def_wleftoff   = WLeftOff                                      /
;/    winengine\def_wrightoff  = WindowWidth-InnerWidth-winengine\def_wleftoff /
;/    If \title><"" OR \flags&#WFLG_DEPTHGADGET><0                             /
;/      winengine\def_wtopoff    = WTopOff                                     /
;/    Else                                                                     /
;/      winengine\def_wtopoff_notitle    = WTopOff                             /
;/    End If                                                                   /
;/    If \flags&#WFLG_SIZEGADGET                                               /
;/      winengine\def_wbottomoff = WindowHeight-InnerHeight-WTopOff            /
;/    Else                                                                     /
;/      winengine\def_wbottomoff_nosize = WindowHeight-InnerHeight-WTopOff     /
;/    End If                                                                   /
;/  End If                                                                     /
;/ If win><-1 Then Activate win                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_ToFront {win.l}
If win>=0 AND win<#max_windows
  If Peek.l(Addr Window(win))
  WindowToFront_ Peek.l(Addr Window(win))
  ActivateWindow_ Peek.l(Addr Window(win))
  End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_AttachGTList {win.l}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_AttachGTList{win.l}
SHARED windat()
If \gadgets>=0
  If Peek.l(Addr GTList(\gadgets)) Then AttachGTList \gadgets,win
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_InitDefaults {}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_InitDefaults {}
SHARED winengine
DEFTYPE.Screen      *scr    ; Pointer to a screen
DEFTYPE.DrawInfo    *dri    ; The drawing information of that screen
DEFTYPE.Image       *img    ; An image which represents the size gadget
Dim                 GTags.TagItem(4) ; Tags for getting the size gadget image
If Used Screen<0 Then WbToScreen 0
*scr = Peek.l(Addr Screen(Used Screen))
*dri = GetScreenDrawInfo_(*scr)
winengine\def_wbottomoff        = 10
winengine\def_wbottomoff_nosize = *scr\WBorBottom
winengine\def_wtopoff           = *scr\WBorTop + *scr\Font\ta_YSize + 1
winengine\def_wtopoff_notitle   = *scr\WBorTop
winengine\def_wleftoff          = *scr\WBorLeft
winengine\def_wrightoff         = *scr\WBorRight
winengine\def_wrightoff_size    = 18

If *dri
  If (*scr\Flags & #SCREENHIRES) Then sis.l=#SYSISIZE_MEDRES Else sis=#SYSISIZE_LOWRES
  GTags(0)\ti_Tag = #SYSIA_DrawInfo,*dri
  GTags(1)\ti_Tag = #SYSIA_Which,#SIZEIMAGE
  GTags(2)\ti_Tag = #SYSIA_Size,sis
  GTags(3)\ti_Tag = #TAG_DONE
  *img = NewObjectA_(0,"sysiclass",&GTags(0))
  If *img
    winengine\def_wrightoff_size = *img\Width
    winengine\def_wbottomoff     = *img\Height
    DisposeObject_ *img
  End If
  FreeScreenDrawInfo_ *scr,*dri
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_SetUserData {win.l,user_data.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - user_data.l    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_SetUserData{win.l,user_data.l}
SHARED winengine,windat()
\user_data = user_data
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = win_GetUserData {win.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l win_GetUserData{win.l}
SHARED winengine,windat()
Function Return \user_data
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = win_GetIDData {win.l}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l win_GetIDData {win.l}
SHARED winengine,windat()
Function Return \id_data
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = win_GetHeight {win.l}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l win_GetHeight {win.l}
SHARED windat()
If windat(win)\is_open=False Then Function Return  windat(win)\ys
*win.Window = Peek.l(Addr Window(win))
Function Return *win\Height
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = win_GetWidth {win.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l win_GetWidth {win.l}
SHARED windat()
If windat(win)\is_open=False Then Function Return  windat(win)\xs
*win.Window = Peek.l(Addr Window(win))
Function Return *win\Width
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = win_GetInnerHeight {win.l}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l win_GetInnerHeight {win.l}
SHARED windat()
If windat(win)\is_open=False Then Function Return windat(win)\iys
*win.Window = Peek.l(Addr Window(win))
Function Return *win\Height - *win\BorderTop - *win\BorderBottom
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = win_GetInnerWidth {win.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l win_GetInnerWidth {win.l}
SHARED windat()
If windat(win)\is_open=False Then Function Return  windat(win)\ixs
*win.Window = Peek.l(Addr Window(win))
Function Return *win\Width - *win\BorderLeft - *win\BorderRight
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = win_GetXPos {win.l}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l win_GetXPos {win.l}
SHARED windat()
If windat(win)\is_open=False Then Function Return windat(win)\x
*win.Window = Peek.l(Addr Window(win))
Function Return *win\LeftEdge
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = win_GetYPos {win.l}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l win_GetYPos {win.l}
SHARED windat()
If windat(win)\is_open=False Then Function Return  windat(win)\y
*win.Window = Peek.l(Addr Window(win))
Function Return *win\TopEdge
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = win_GetTyp {win.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l win_GetTyp {win.l}
SHARED winengine,windat()
Function Return \wintyp
End Function


CNIF #__include=0
  ; no demo
  End
CEND
