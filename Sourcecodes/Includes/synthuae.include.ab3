; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "test"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 4096
; MakeSmallest    = 0
; FuncOptimize    = 0
; Version         = 0.0.0
; NumberOfBuilds  = 18
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 164
; CursorColumn    = 23
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; /XTRA
CNIF #__include=0
  OPTIMIZE 7
  SYNTAX 2
CEND

XINCLUDE "windll.include.ab3"
XINCLUDE "synth.definitions.ab3"
XINCLUDE "error.include.ab3"

#SIZEOF_SYNTH       = 4
#SIZEOF_FILTER      = 92
#SIZEOF_OSC         = 92
#SIZEOF_ENV         = 60
#SIZEOF_ENSEMBLE    = 32864
#SIZEOF_TAPDELAY    = 32878
#SIZEOF_STRING      = 33200
#SIZEOF_FLUTE       = 33132
#SIZEOF_DELAYMATRIX = 33132
#SIZEOF_AMPLIFIER   = 128

#MAX_SYNTH_FUNCTIONS = 128

NEWTYPE.synthFuncTable_T

  symbol.s[#MAX_SYNTH_FUNCTIONS]
  *funcP.l[#MAX_SYNTH_FUNCTIONS]

End NEWTYPE

SHARED sft.synthFuncTable_T
SHARED *synthdll.l

#_autoconstantnum = 0

sft\symbol[#@synth_Deinit]              = "synth_Deinit"
sft\symbol[#@synth_Init]                = "synth_Init"
sft\symbol[#@synth_GetAttr]             = "synth_GetAttr"
sft\symbol[#@synth_SetAttr]             = "synth_SetAttr"
sft\symbol[#@synth_GetSizeOfSample]     = "synth_GetSizeOfSample"
sft\symbol[#@synth_ConvertSampleFormat] = "synth_ConvertSampleFormat"
sft\symbol[#@synth_ToLittleEndian]      = "synth_ToLittleEndian"
sft\symbol[#@synth_ToBigEndian]         = "synth_ToBigEndian"
sft\symbol[#@synth_RenderMix]           = "synth_RenderMix"
sft\symbol[#@synth_RenderScale]         = "synth_RenderScale"
sft\symbol[#@synth_RenderStereoAmp]     = "synth_RenderStereoAmp"
sft\symbol[#@synth_RenderWaveShape]     = "synth_RenderWaveShape"
sft\symbol[#@synth_RenderDistorsion]    = "synth_RenderDistorsion"
sft\symbol[#@synth_RenderAM]            = "synth_RenderAM"
sft\symbol[#@synth_RESERVED]            = "synth_RESERVED"
; Filter ##bias 156
sft\symbol[#@synth_InitFilter]          = "synth_InitFilter"
sft\symbol[#@synth_GetFilterAttr]       = "synth_GetFilterAttr"
sft\symbol[#@synth_SetFilterAttr]       = "synth_SetFilterAttr"
sft\symbol[#@synth_UpdateFilter]        = "synth_UpdateFilter"
sft\symbol[#@synth_RenderFilter]        = "synth_RenderFilter"
; Oscillator ##bias 216
sft\symbol[#@synth_InitOsc]             = "synth_InitOsc"
sft\symbol[#@synth_GetOscAttr]          = "synth_GetOscAttr"
sft\symbol[#@synth_SetOscAttr]          = "synth_SetOscAttr"
sft\symbol[#@synth_UpdateOsc]           = "synth_UpdateOsc"
sft\symbol[#@synth_RenderOsc]           = "synth_RenderOsc"
; Envelope ##bias 276
sft\symbol[#@synth_InitEnv]             = "synth_InitEnv"
sft\symbol[#@synth_GetEnvAttr]          = "synth_GetEnvAttr"
sft\symbol[#@synth_SetEnvAttr]          = "synth_SetEnvAttr"
sft\symbol[#@synth_InitEnvLevel]        = "synth_InitEnvLevel"
sft\symbol[#@synth_InitEnvDuration]     = "synth_InitEnvDuration"
sft\symbol[#@synth_StepEnv]             = "synth_StepEnv"
sft\symbol[#@synth_ReleaseEnv]          = "synth_ReleaseEnv"
sft\symbol[#@synth_ResetEnv]            = "synth_ResetEnv"
; Ensemble ##bias 336
sft\symbol[#@synth_InitEnsemble]        = "synth_InitEnsemble"
sft\symbol[#@synth_GetEnsembleAttr]     = "synth_GetEnsembleAttr"
sft\symbol[#@synth_SetEnsembleAttr]     = "synth_SetEnsembleAttr"
sft\symbol[#@synth_UpdateEnsemble]      = "synth_UpdateEnsemble"
sft\symbol[#@synth_RenderEnsemble]      = "synth_RenderEnsemble"
; TapDelay ##bias 396
sft\symbol[#@synth_InitTapDelay]        = "synth_InitTapDelay"
sft\symbol[#@synth_GetTapDelayAttr]     = "synth_GetTapDelayAttr"
sft\symbol[#@synth_SetTapDelayAttr]     = "synth_SetTapDelayAttr"
sft\symbol[#@synth_UpdateTapDelay]      = "synth_UpdateTapDelay"
sft\symbol[#@synth_RenderTapDelay]      = "synth_RenderTapDelay"
; String ##bias 456
sft\symbol[#@synth_InitString]          = "synth_InitString"
sft\symbol[#@synth_GetStringAttr]       = "synth_GetStringAttr"
sft\symbol[#@synth_SetStringAttr]       = "synth_SetStringAttr"
sft\symbol[#@synth_UpdateString]        = "synth_UpdateString"
sft\symbol[#@synth_RenderString]        = "synth_RenderString"
; Flute ##bias 516
sft\symbol[#@synth_InitFlute]           = "synth_InitFlute"
sft\symbol[#@synth_GetFluteAttr]        = "synth_GetFluteAttr"
sft\symbol[#@synth_SetFluteAttr]        = "synth_SetFluteAttr"
sft\symbol[#@synth_UpdateFlute]         = "synth_UpdateFlute"
sft\symbol[#@synth_RenderFlute]         = "synth_RenderFlute"
; Delay Matrix ##bias 576
sft\symbol[#@synth_InitDelayMatrix]     = "synth_InitDelayMatrix"
sft\symbol[#@synth_GetDelayMatrixAttr]  = "synth_GetDelayMatrixAttr"
sft\symbol[#@synth_SetDelayMatrixAttr]  = "synth_SetDelayMatrixAttr"
sft\symbol[#@synth_UpdateDelayMatrix]   = "synth_UpdateDelayMatrix"
sft\symbol[#@synth_RenderDelayMatrix]   = "synth_RenderDelayMatrix"
; Amplifier ##bias 636
sft\symbol[#@synth_InitAmp]             = "synth_InitAmp"
sft\symbol[#@synth_GetAmpAttr]          = "synth_GetAmpAttr"
sft\symbol[#@synth_SetAmpAttr]          = "synth_SetAmpAttr"
sft\symbol[#@synth_UpdateAmp]           = "synth_UpdateAmp"
sft\symbol[#@synth_RenderAmp]           = "synth_RenderAmp"


; ======================== SYNTH ==========================
NEWTYPE.synth_T
_private_.b[4]
End NEWTYPE

Statement FAST synth_ConvertSampleFormat{*out.l,*in.l,sampleN.l,_format.l}
  dll_Call4{sft\funcP[#synth_ConvertSampleFormat],!_x86P{*out},!_x86P{*in},sampleN,_format}

  If _format=#FORMAT_Intern OR _format=#FORMAT_Float32 OR _format=#FORMAT_Int32
    For n.l=0 To sampleN-1
      s.l = Peek.l(*out+n*SizeOf.l)
      Poke.l *out+n*SizeOf.l,!xendian32{s}
    Next
  End If

  If _format=#FORMAT_Int16
    For n.l=0 To sampleN-1
      s.l = Peek.w(*out+n*SizeOf.w)
      Poke.w *out+n*SizeOf.w,!xendian16{s}
    Next
  End If

End Statement

Function.l FAST synth_GetSizeOfSample{_format.l}
  Function Return dll_Call1{sft\funcP[#synth_GetSizeOfSample],_format}
End Function

Function.l FAST synth_RESERVED{a.l,b.l}
  Function Return dll_Call2{sft\funcP[#synth_RESERVED],a,b}
End Function

Statement FAST synth_RenderStereoAmp{*out.l,*in.l,sampleN.l,gain.f,panorama.f}
  dll_Call5{sft\funcP[#synth_RenderStereoAmp],!_x86P{*out},!_x86P{*in},sampleN,!_x86Float{gain},!_x86Float{panorama}}
End Statement

Statement FAST synth_RenderWaveShape{*table.l,*out.l,*in.l,sampleN.l,drive.f}
  dll_Call5{sft\funcP[#synth_RenderWaveShape],!_x86P{*table},!_x86P{*out},!_x86P{*in},sampleN,!_x86Float{drive}}
End Statement

Statement FAST synth_RenderDistorsion{*table.l,*out.l,*in.l,sampleN.l,drive.f}
  dll_Call5{sft\funcP[#synth_RenderDistorsion],!_x86P{*table},!_x86P{*out},!_x86P{*in},sampleN,!_x86Float{drive}}
End Statement

Statement FAST synth_RenderScale{*out.l,*in.l,sampleN.l,gain.f,offset.f}
  dll_Call5{sft\funcP[#synth_RenderScale],!_x86P{*out},!_x86P{*in},sampleN,!_x86Float{gain},!_x86Float{offset}}
End Statement

Statement FAST synth_RenderMix{*out.l,*in1.l,*in2.l,sampleN.l,gain1.f,gain2.f}
  dll_Call6{sft\funcP[#synth_RenderMix],!_x86P{*out},!_x86P{*in1},!_x86P{*in2},sampleN,!_x86Float{gain1},!_x86Float{gain2}}
End Statement

Statement FAST synth_RenderAM{*out.l,*carrier.l,*modulator.l,sampleN.l,depth_.f}
  dll_Call5{sft\funcP[#synth_RenderAM],!_x86P{*out},!_x86P{*carrier},!_x86P{*modulator},sampleN,!_x86Float{depth_}}
End Statement

Function.l FAST synth_GetAttr{*synth.synth_T,attr.l,*valueP.l}
  result.l = dll_Call3{sft\funcP[#synth_GetAttr],!_x86P{*synth},attr,!_x86P{&value.l}}
  Poke.l *valueP,!xendian32{value}
  Function Return result
End Function

Function.l FAST synth_SetAttr{*synth.synth_T,attr.l,value.l}
  Function Return dll_Call3{sft\funcP[#synth_SetAttr],!_x86P{*synth},attr,value}
End Function

Function.l FAST synth_SetAttrF{*synth.synth_T,attr.l,value.f}
  Function Return dll_Call3{sft\funcP[#synth_SetAttr],!_x86P{*synth},attr,!_x86Float{value}}
End Function

; ======================== FILTER ==========================
NEWTYPE.filter_T
_private_.b[#SIZEOF_FILTER]
End NEWTYPE

Statement FAST synth_InitFilter{*filter_.filter_T,type_.l,samplerate.f,frequency.f,q.f}
  dll_Call5{sft\funcP[#synth_InitFilter],!_x86P{*filter_},type_,!_x86Float{samplerate},!_x86Float{frequency},!_x86Float{q}}
End Statement

Statement FAST synth_UpdateFilter{*filter_.filter_T,detune.f}
  dll_Call2{sft\funcP[#synth_UpdateFilter],!_x86P{*filter_},!_x86Float{detune}}
End Statement

Statement FAST synth_RenderFilter{*filter_.filter_T,*out.l,*in.l,sampleN.l}
  dll_Call4{sft\funcP[#synth_RenderFilter],!_x86P{*filter_},!_x86P{*out},!_x86P{*in},sampleN}
End Statement

Function.l FAST synth_GetFilterAttr{*filter_.filter_T,attr.l,*valueP.l}
  result.l = dll_Call3{sft\funcP[#synth_GetFilterAttr],!_x86P{*filter_},attr,!_x86P{&value.l}}
  Poke.l *valueP,!xendian32{value}
  Function Return result
End Function

Function.l FAST synth_SetFilterAttr{*filter_.filter_T,attr.l,value.l}
  Function Return dll_Call3{sft\funcP[#synth_SetFilterAttr],!_x86P{*filter_},attr,value}
End Function

Function.l FAST synth_SetFilterAttrF{*filter_.filter_T,attr.l,value.f}
  Function Return dll_Call3{sft\funcP[#synth_SetFilterAttr],!_x86P{*filter_},attr,!_x86Float{value}}
End Function

; ======================== OSCILLATOR ==========================
NEWTYPE.osc_T
_private_.b[#SIZEOF_OSC]
End NEWTYPE

Statement FAST synth_InitOsc{*osc.osc_T,wave.l,samplerate.f,frequency.f,phase.f,gain.f,modtype.l,moddepth.f}
  ;dll_Call8{sft\funcP[#synth_InitOsc],!_x86P{*osc},wave,!_x86Float{samplerate},!_x86Float{frequency},!_x86Float{phase},!_x86Float{gain},modtype,!_x86Float{moddepth}}
  _p0.l = sft\funcP[#synth_InitOsc]
  _p1.l = !_x86P{*osc}
  _p2.l = wave
  _p3.l = !_x86Float{samplerate}
  _p4.l = !_x86Float{frequency}
  _p5.l = !_x86Float{phase}
  _p6.l = !_x86Float{gain}
  _p7.l = modtype
  _p8.l = !_x86Float{moddepth}
  dll_Call8{_p0,_p1,_p2,_p3,_p4,_p5,_p6,_p7,_p8}

End Statement

Statement FAST synth_UpdateOsc{*osc.osc_T,fmod.f,amod.f,mmod.f}
  dll_Call4{sft\funcP[#synth_UpdateOsc],!_x86P{*osc},!_x86Float{fmod},!_x86Float{amod},!_x86Float{mmod}}
End Statement

Statement FAST synth_RenderOsc{*osc.osc_T,*out.l,*in.l,sampleN.l}
  dll_Call4{sft\funcP[#synth_RenderOsc],!_x86P{*osc},!_x86P{*out},!_x86P{*in},sampleN}
End Statement

Function.l FAST synth_GetOscAttr{*osc.osc_T,attr.l,*valueP.l}
  result.l = dll_Call3{sft\funcP[#synth_GetOscAttr],!_x86P{*osc},attr,!_x86P{&value.l}}
  Poke.l *valueP,!xendian32{value}
  Function Return result
End Function

Function.l FAST synth_SetOscAttr{*osc.osc_T,attr.l,value.l}
  Function Return dll_Call3{sft\funcP[#synth_SetOscAttr],!_x86P{*osc},attr,value}
End Function

Function.l FAST synth_SetOscAttrF{*osc.osc_T,attr.l,value.f}
  Function Return dll_Call3{sft\funcP[#synth_SetOscAttr],!_x86P{*osc},attr,!_x86Float{value}}
End Function

; ======================== ENVELOPE ==========================
NEWTYPE.env_T
  _private_.b[#SIZEOF_ENV]
End NEWTYPE

Statement FAST synth_InitEnvDuration{*env.env_T,d_attack.f,d_decay.f,d_sustain.f,d_release.f}
  dll_Call5{sft\funcP[#synth_InitEnvDuration],!_x86P{*env},!_x86Float{d_attack},!_x86Float{d_decay},!_x86Float{d_sustain},!_x86Float{d_release}}
End Statement

Statement FAST synth_InitEnvLevel{*env.env_T,l_attack.f,l_decay.f,l_sustain.f,l_release.f}
  dll_Call5{sft\funcP[#synth_InitEnvLevel],!_x86P{*env},!_x86Float{l_attack},!_x86Float{l_decay},!_x86Float{l_sustain},!_x86Float{l_release}}
End Statement

Statement FAST synth_ResetEnv{*env.env_T}
  dll_Call1{sft\funcP[#synth_ResetEnv],!_x86P{*env}}
End Statement

Statement FAST synth_ReleaseEnv{*env.env_T}
  dll_Call1{sft\funcP[#synth_ReleaseEnv],!_x86P{*env}}
End Statement

Function.f FAST synth_StepEnv{*env.env_T}
  Function Return dll_Call1{sft\funcP[#synth_StepEnv],!_x86P{*env}}
End Function

Function.l FAST synth_GetEnvAttr{*env.env_T,attr.l,*valueP.l}
  result.l = dll_Call3{sft\funcP[#synth_GetEnvAttr],!_x86P{*env},attr,!_x86P{&value.l}}
  Poke.l *valueP,!xendian32{value}
  Function Return result
End Function

Function.l FAST synth_SetEnvAttr{*env.env_T,attr.l,value.l}
  Function Return dll_Call3{sft\funcP[#synth_SetEnvAttr],!_x86P{*env},attr,value}
End Function

Function.l FAST synth_SetEnvAttrF{*env.env_T,attr.l,value.f}
  Function Return dll_Call3{sft\funcP[#synth_SetEnvAttr],!_x86P{*env},attr,!_x86Float{value}}
End Function

; ======================== STRING ==========================
NEWTYPE.string_T
_private_.b[#SIZEOF_STRING]
End NEWTYPE

Statement FAST synth_InitString{*string.string_T,samplerate.f,frequency.f,feedback.f,pass.f,lowpass.f,highpass.f,stiffness.f,stifffreq.f,pickup.f}
  _p0.l = sft\funcP[#synth_InitString]
  _p1.l = !_x86P{*string}
  _p2.l = !_x86Float{samplerate}
  _p3.l = !_x86Float{frequency}
  _p4.l = !_x86Float{feedback}
  _p5.l = !_x86Float{pass}
  _p6.l = !_x86Float{lowpass}
  _p7.l = !_x86Float{highpass}
  _p8.l = !_x86Float{stiffness}
  _p9.l = !_x86Float{stifffreq}
  _p10.l= !_x86Float{pickup}
  
  GetRegD0 _p1  : MOVE.l d0,d1
  GetRegD0 _p2  : MOVE.l d0,d2
  GetRegD0 _p3  : MOVE.l d0,d3
  GetRegD0 _p4  : MOVE.l d0,d4
  GetRegD0 _p5  : MOVE.l d0,d5
  GetRegD0 _p6  : MOVE.l d0,d6
  GetRegD0 _p7  : MOVE.l d0,d7
  GetRegD0 _p0  : MOVE.l d0,a0  ; DLL Pointer
  GetRegD0 _p8  : MOVE.l d0,a1
  GetRegD0 _p9  : MOVE.l d0,a2
  GetRegD0 _p10 : MOVE.l d0,a3

  MOVEQ ##WINUAE_CALLNATIVE,d0
  JSR $f0ffc0
  ;!WinUAE_Call{#WINUAE_CALLNATIVE}

End Statement

Statement FAST synth_UpdateString{*string.string_T,detune.f}
  dll_Call2{sft\funcP[#synth_UpdateString],!_x86P{*string},!_x86Float{detune}}
End Statement

Statement FAST synth_RenderString{*string.string_T,*out.l,*in.l,sampleN.l}
  dll_Call4{sft\funcP[#synth_RenderString],!_x86P{*string},!_x86P{*out},!_x86P{*in},sampleN}
End Statement

Function.l FAST synth_GetStringAttr{*string.string_T,attr.l,*valueP.l}
  result.l = dll_Call3{sft\funcP[#synth_GetStringAttr],!_x86P{*string},attr,!_x86P{&value.l}}
  Poke.l *valueP,!xendian32{value}
  Function Return result
End Function

Function.l FAST synth_SetStringAttr{*string.string_T,attr.l,value.l}
  Function Return dll_Call3{sft\funcP[#synth_SetStringAttr],!_x86P{*string},attr,value}
End Function

Function.l FAST synth_SetStringAttrF{*string.string_T,attr.l,value.f}
  Function Return dll_Call3{sft\funcP[#synth_SetStringAttr],!_x86P{*string},attr,!_x86Float{value}}
End Function

; ======================== ENSEMBLE ==========================
NEWTYPE.ensemble_T
_private_.b[#SIZEOF_ENSEMBLE]
End NEWTYPE

Statement FAST synth_InitEnsemble{*ensemble.ensemble_T,samplerate.f,mix.f,detune.f,shift.f,feedback.f}
  dll_Call6{sft\funcP[#synth_InitEnsemble],!_x86P{*ensemble},!_x86Float{samplerate},!_x86Float{mix},!_x86Float{detune},!_x86Float{shift},!_x86Float{feedback}}
End Statement

Statement FAST synth_UpdateEnsemble{*ensemble.ensemble_T}
  dll_Call1{sft\funcP[#synth_UpdateEnsemble],!_x86P{*ensemble}}
End Statement

Statement FAST synth_RenderEnsemble{*ensemble.ensemble_T,*out.l,*in.l,sampleN.l}
  dll_Call4{sft\funcP[#synth_RenderEnsemble],!_x86P{*ensemble},!_x86P{*out},!_x86P{*in},sampleN}
End Statement

Function.l FAST synth_GetEnsembleAttr{*ensemble.ensemble_T,attr.l,*valueP.l}
  result.l = dll_Call3{sft\funcP[#synth_GetEnsembleAttr],!_x86P{*ensemble},attr,!_x86P{&value.l}}
  Poke.l *valueP,!xendian32{value}
  Function Return result
End Function

Function.l FAST synth_SetEnsembleAttr{*ensemble.ensemble_T,attr.l,value.l}
  Function Return dll_Call3{sft\funcP[#synth_SetEnsembleAttr],!_x86P{*ensemble},attr,value}
End Function

Function.l FAST synth_SetEnsembleAttrF{*ensemble.ensemble_T,attr.l,value.f}
  Function Return dll_Call3{sft\funcP[#synth_SetEnsembleAttr],!_x86P{*ensemble},attr,!_x86Float{value}}
End Function

; ======================== TAPDELAY ==========================
NEWTYPE.tapdelay_T
_private_.b[#SIZEOF_TAPDELAY]
End NEWTYPE

Statement FAST synth_InitTapDelay{*tapdelay.tapdelay_T,samplerate.f,frequency.f,feedback.f,pass.f}
  dll_Call5{sft\funcP[#synth_InitTapDelay],!_x86P{*tapdelay},!_x86Float{samplerate},!_x86Float{frequency},!_x86Float{feedback},!_x86Float{pass}}
End Statement

Statement FAST synth_UpdateTapDelay{*tapdelay.tapdelay_T,detune.f}
  dll_Call2{sft\funcP[#synth_UpdateTapDelay],!_x86P{*tapdelay},!_x86Float{detune}}
End Statement

Statement FAST synth_RenderTapDelay{*tapdelay.tapdelay_T,*out.l,*in.l,sampleN.l}
  dll_Call4{sft\funcP[#synth_RenderTapDelay],!_x86P{*tapdelay},!_x86P{*out},!_x86P{*in},sampleN}
End Statement

Function.l FAST synth_GetTapDelayAttr{*tapdelay.tapdelay_T,attr.l,*valueP.l}
  result.l = dll_Call3{sft\funcP[#synth_GetTapDelayAttr],!_x86P{*tapdelay},attr,!_x86P{&value.l}}
  Poke.l *valueP,!xendian32{value}
  Function Return result
End Function

Function.l FAST synth_SetTapDelayAttr{*tapdelay.tapdelay_T,attr.l,value.l}
  Function Return dll_Call3{sft\funcP[#synth_SetTapDelayAttr],!_x86P{*tapdelay},attr,value}
End Function

Function.l FAST synth_SetTapDelayAttrF{*tapdelay.tapdelay_T,attr.l,value.f}
  Function Return dll_Call3{sft\funcP[#synth_SetTapDelayAttr],!_x86P{*tapdelay},attr,!_x86Float{value}}
End Function

; ======================== FLUTE ==========================
NEWTYPE.flute_T
_private_.b[#SIZEOF_FLUTE]
End NEWTYPE

Statement FAST synth_InitFlute{*flute.flute_T,samplerate.f,frequency.f,jet_feedback.f,jet_harmonic.f,bore_feedback.f,bore_harmonic.f,lowpass.f,hipass.f,gain.f}
  _p0.l = sft\funcP[#synth_InitFlute]
  _p1.l = !_x86P{*flute}
  _p2.l = !_x86Float{samplerate}
  _p3.l = !_x86Float{frequency}
  _p4.l = !_x86Float{jet_feedback}
  _p5.l = !_x86Float{jet_harmonic}
  _p6.l = !_x86Float{bore_feedback}
  _p7.l = !_x86Float{bore_harmonic}
  _p8.l = !_x86Float{lowpass}
  _p9.l = !_x86Float{hipass}
  _p10.l= !_x86Float{gain}
  GetRegD0 _p10
  MOVE.l d0,a3
  dll_Call9{_p0,_p1,_p2,_p3,_p4,_p5,_p6,_p7,_p8,_p9}

End Statement

Statement FAST synth_UpdateFlute{*flute.flute_T,detune.f}
  dll_Call2{sft\funcP[#synth_UpdateFlute],!_x86P{*flute},!_x86Float{detune}}
End Statement

Statement FAST synth_RenderFlute{*flute.flute_T,*out.l,*in.l,sampleN.l}
  dll_Call4{sft\funcP[#synth_RenderFlute],!_x86P{*flute},!_x86P{*out},!_x86P{*in},sampleN}
End Statement

Function.l FAST synth_GetFluteAttr{*flute.flute_T,attr.l,*valueP.l}
  result.l = dll_Call3{sft\funcP[#synth_GetFluteAttr],!_x86P{*flute},attr,!_x86P{&value.l}}
  Poke.l *valueP,!xendian32{value}
  Function Return result
End Function

Function.l FAST synth_SetFluteAttr{*flute.flute_T,attr.l,value.l}
  Function Return dll_Call3{sft\funcP[#synth_SetFluteAttr],!_x86P{*flute},attr,value}
End Function

Function.l FAST synth_SetFluteAttrF{*flute.flute_T,attr.l,value.f}
  Function Return dll_Call3{sft\funcP[#synth_SetFluteAttr],!_x86P{*flute},attr,!_x86Float{value}}
End Function

; ======================== DELAY MATRIX ==========================
NEWTYPE.delaymatrix_T
_private_.b[#SIZEOF_DELAYMATRIX]
End NEWTYPE

Statement FAST synth_InitDelayMatrix{*delaymatrix.delaymatrix_T,samplerate.f}
  dll_Call2{sft\funcP[#synth_InitDelayMatrix],!_x86P{*delaymatrix},!_x86Float{samplerate}}
End Statement

Statement FAST synth_UpdateDelayMatrix{*delaymatrix.delaymatrix_T,detune.f}
  dll_Call2{sft\funcP[#synth_UpdateDelayMatrix],!_x86P{*delaymatrix},!_x86Float{detune}}
End Statement

Statement FAST synth_RenderDelayMatrix{*delaymatrix.delaymatrix_T,*out.l,*in.l,sampleN.l}
  dll_Call4{sft\funcP[#synth_RenderDelayMatrix],!_x86P{*delaymatrix},!_x86P{*out},!_x86P{*in},sampleN}
End Statement

Function.l FAST synth_GetDelayMatrixAttr{*delaymatrix.delaymatrix_T,attr.l,*valueP.l}
  result.l = dll_Call3{sft\funcP[#synth_GetDelayMatrixAttr],!_x86P{*delaymatrix},attr,!_x86P{&value.l}}
  Poke.l *valueP,!xendian32{value}
  Function Return result
End Function

Function.l FAST synth_SetDelayMatrixAttr{*delaymatrix.delaymatrix_T,attr.l,value.l}
  Function Return dll_Call3{sft\funcP[#synth_SetDelayMatrixAttr],!_x86P{*delaymatrix},attr,value}
End Function

Function.l FAST synth_SetDelayMatrixAttrF{*delaymatrix.delaymatrix_T,attr.l,value.f}
  Function Return dll_Call3{sft\funcP[#synth_SetDelayMatrixAttr],!_x86P{*delaymatrix},attr,!_x86Float{value}}
End Function

; ======================== AMPLIFIER ==========================
NEWTYPE.amp_T
_private_.b[#SIZEOF_AMPLIFIER]
End NEWTYPE

Statement FAST synth_InitAmp{*amp.amp_T,gain.f,panorama.f,channels.l}
  dll_Call4{sft\funcP[#synth_InitAmp],!_x86P{*amp},!_x86Float{gain},!_x86Float{panorama},channels}
End Statement

Statement FAST synth_UpdateAmp{*amp.amp_T,gain.f,panorama.f}
  dll_Call3{sft\funcP[#synth_UpdateAmp],!_x86P{*amp},!_x86Float{gain},!_x86Float{panorama}}
End Statement

Statement FAST synth_RenderAmp{*amp.amp_T,*out.l,*in.l,sampleN.l}
  dll_Call4{sft\funcP[#synth_RenderAmp],!_x86P{*amp},!_x86P{*out},!_x86P{*in},sampleN}
End Statement

Function.l FAST synth_GetAmpAttr{*amp.amp_T,attr.l,*valueP.l}
  result.l = dll_Call3{sft\funcP[#synth_GetAmpAttr],!_x86P{*amp},attr,!_x86P{&value.l}}
  Poke.l *valueP,!xendian32{value}
  Function Return result
End Function

Function.l FAST synth_SetAmpAttr{*amp.amp_T,attr.l,value.l}
  Function Return dll_Call3{sft\funcP[#synth_SetAmpAttr],!_x86P{*amp},attr,value}
End Function

Function.l FAST synth_SetAmpAttrF{*amp.amp_T,attr.l,value.f}
  Function Return dll_Call3{sft\funcP[#synth_SetAmpAttr],!_x86P{*amp},attr,!_x86Float{value}}
End Function

; ======================== Library Open/Close ==========================
Function.l synthlib_Open{@minversion.l}

  If *synthdll Then Function Return *synthdll
  *synthdll = dll_Open{"synth.dll"}
  If *synthdll=Null Then Function Return Null

  For n.l=0 To #MAX_SYNTH_FUNCTIONS-1
    If sft\symbol[n]
      sft\funcP[n] = dll_GetSymbolAddr{*synthdll,sft\symbol[n]}
      If sft\funcP[n]=Null Then NPrint "Unable to find symbol "+sft\symbol[n]+"!" : dll_Close{*synthdll} : Function Return Null
    Else
      sft\funcP[n] = Null
    End If
  Next
  
  synth_GetAttr{Null,0,&size.l}
  If size>SizeOf.synth_T Then error{"synth Newtype too small: "+Str$(SizeOf.synth_T)+", but must be at least "+Str$(size)+" bytes!"}
  synth_GetFilterAttr{Null,0,&size.l}
  If size>SizeOf.filter_T Then error{"filter_T Newtype too small: "+Str$(SizeOf.filter_T)+", but must be at least "+Str$(size)+" bytes!"}
  synth_GetOscAttr{Null,0,&size.l}
  If size>SizeOf.osc_T Then error{"osc_T Newtype too small: "+Str$(SizeOf.osc_T)+", but must be at least "+Str$(size)+" bytes!"}
  synth_GetEnsembleAttr{Null,0,&size.l}
  If size>SizeOf.ensemble_T Then error{"ensemble_T Newtype too small: "+Str$(SizeOf.ensemble_T)+", but must be at least "+Str$(size)+" bytes!"}
  synth_GetEnvAttr{Null,0,&size.l}
  If size>SizeOf.env_T Then error{"env_T Newtype too small: "+Str$(SizeOf.env_T)+", but must be at least "+Str$(size)+" bytes!"}
  synth_GetTapDelayAttr{Null,0,&size.l}
  If size>SizeOf.tapdelay_T Then error{"tapdelay_T Newtype too small: "+Str$(SizeOf.tapdelay_T)+", but must be at least "+Str$(size)+" bytes!"}
  synth_GetStringAttr{Null,0,&size.l}
  If size>SizeOf.string_T Then error{"string_T Newtype too small: "+Str$(SizeOf.string_T)+", but must be at least "+Str$(size)+" bytes!"}
  synth_GetFluteAttr{Null,0,&size.l}
  If size>SizeOf.flute_T Then error{"flute_T Newtype too small: "+Str$(SizeOf.flute_T)+", but must be at least "+Str$(size)+" bytes!"}
  synth_GetDelayMatrixAttr{Null,0,&size.l}
  If size>SizeOf.delaymatrix_T Then error{"delaymatrix_T Newtype too small: "+Str$(SizeOf.delaymatrix_T)+", but must be at least "+Str$(size)+" bytes!"}
  synth_GetAmpAttr{Null,0,&size.l}
  If size>SizeOf.amp_T Then error{"amp_T Newtype too small: "+Str$(SizeOf.amp_T)+", but must be at least "+Str$(size)+" bytes!"}  

  Function Return *synthdll

End Function


Statement synthlib_Close{}

  If *synthdll
    dll_Close{*synthdll}
    *synthdll=Null
  End If

End Statement
!autoexit{synthlib_Close}

Function.synth_T synth_Init{}

  *synth.synth_T = Null
  If synthlib_Open{}
    !dll_Call{sft\funcP[#synth_Init],*synth}
  End If
  Function Return *synth
  
End Function


Statement synth_Deinit{*synth.synth_T}

  !dll_Call{sft\funcP[#synth_Deinit],*synth}
  
End Statement


CNIF #__include=0

*synth.synth_T = synth_Init{}
If *synth 

NPrint "Z3Offset    = ",Hex$(_winuae_memoffset)

synth_GetFilterAttr{Null,0,&fsiz.l}
NPrint "Filter size = ",fsiz

synth_GetOscAttr{Null,0,&osiz.l}
NPrint "Osc size    = ",osiz

test.f = 0
res.l = -1

synth_ConvertSampleFormat{&res,&test,1,4}
NPrint "Converted ",test,"=>",res

a.l = 1
b.l = 2
c.l = synth_RESERVED{a,b}
NPrint "a-b         = ",c

synth_InitString{string.string_T,48000,220,0.9,0.5,20000,20,0.4,211,0}
synth_GetStringAttr{string,#STRA_Samplerate  ,&value.f} : NPrint "D2/String: samplerate = ",value,"Hz"
synth_GetStringAttr{string,#STRA_Frequency   ,&value.f} : NPrint "D3/String: frequency  = ",value,"Hz"
synth_GetStringAttr{string,#STRA_Feedback    ,&value.f} : NPrint "D4/String: feedback   = ",value
synth_GetStringAttr{string,#STRA_Pass        ,&value.f} : NPrint "D5/String: pass       = ",value
synth_GetStringAttr{string,#STRA_LowPassFreq ,&value.f} : NPrint "D6/String: low pass   = ",value,"Hz"
synth_GetStringAttr{string,#STRA_HighPassFreq,&value.f} : NPrint "D7/String: high pass  = ",value,"Hz"
synth_GetStringAttr{string,#STRA_Stiffness   ,&value.f} : NPrint "A1/String: stiffness  = ",value
synth_GetStringAttr{string,#STRA_StiffFreq   ,&value.f} : NPrint "A2/String: stiff freq = ",value,"Hz"
synth_GetStringAttr{string,#STRA_PickUpPos   ,&value.f} : NPrint "A3/String: pickpos    = ",value

Else
  NPrint "Unable to open synth.dll!"
End If

End

CEND
