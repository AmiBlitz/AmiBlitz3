; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "LongLongDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 231
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = "ll_"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: longlong.include                                                      /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 24/05/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
NEWTYPE.ll  ; long long (64bit int)
hi.l
lo.l
End NEWTYPE

#USE_68KASM = 0

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_Set {res,a}                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Set a long long to a long long.                                             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - res    : ???                                                              /
;/ - a    : ???                                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_Set ; {res, a}
`1\hi = `2\hi
`1\lo = `2\lo
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_SetLong {res,long.l}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ Set a long long to a long.                                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - res    : ???                                                              /
;/ - long.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_SetLong ;{res, long.l}
`1\hi = 0
`1\lo = `2
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_SetLongLong {res,longhi.l,longlo.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - res    : ???                                                              /
;/ - longhi.l    : ???                                                         /
;/ - longlo.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_SetLongLong ;{res, longhi.l, longlo.l}
`1\hi = `2
`1\lo = `3
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_Add {res.ll,a.ll,b.ll}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ Add to 64 integer values:                                                   /
;/ res = a + b                                                                 /
;/ NOTE: There is a blitz version and an 68K ASM version.                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - res.ll   : result                                                         /
;/ - a.ll     : value to add                                                   /
;/ - b.ll     : value to add                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_Add ; {res.ll, a.ll, b.ll} ; does res= a+b
CNIF #USE_68KASM
  GetReg d3,(`2\hi)
  GetReg d2,(`3\hi)
  GetReg d1,(`2\lo)
  GetReg d0,(`3\lo)
  ADD.l d0,d1
  ADDX.l d2,d3
  MOVE.l d1,d0
  `1\lo = PutRegD0
  MOVE.l d3,d0
  `1\hi = PutRegD0
CELSE
  `1\lo = `2\lo + `3\lo
  `1\hi = `2\hi + `3\hi
  If `1\lo < `2\lo OR `1\lo < `3\lo Then `1\hi+1
CEND
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_Inc {res}                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Increase the value of res by 1.                                             /
;/ res = res + 1                                                               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - res    : value to increase                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_Inc ; {res} ; does res+1
  lo.l = `1\lo
  `1\lo + (`2)
  If `1\lo < lo Then `1\hi+1
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_Dec {res}                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Decrease the value of res by 1:                                             /
;/ res = res - 1                                                               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - res    : value to decrease                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_Dec ; {res} ; does res= a+b
  lo.l = `1\lo
  `1\lo -(`2)
  If `1\lo > lo Then `1\hi-1
End Macro
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_Sub {res.ll,a.ll,b.ll}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ Subtract a and b and store the result in res:                               /
;/ res = a-b                                                                   /
;/ NOTE: There is a blitz version and an 68K ASM version.                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - res.ll   : result                                                         /
;/ - a.ll     : value                                                          /
;/ - b.ll     : value to subtract                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_Sub ; {res.ll, a.ll, b.ll} ; does res = a-b
CNIF #USE_68KASM
  GetReg d3,(`2\hi)
  GetReg d2,(`3\hi)
  GetReg d1,(`2\lo)
  GetReg d0,(`3\lo)
  SUB.l d0,d1
  SUBX.l d2,d3
  MOVE.l d1,d0
  `1\lo = PutRegD0
  MOVE.l d3,d0
  `1\hi = PutRegD0
CELSE
  `1\lo = `2\lo - `3\lo
  `1\hi = `2\hi - `3\hi
  If `1\lo > `2\lo OR `1\lo > `3\lo Then `1\hi-1
CEND
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_Mulu3232 {res.ll,a.l,b.l}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Multiply two 32bit integers and store the result as 64bit integer.          /
;/ res = a * b                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - res.ll : result                                                           /
;/ - a.l    : value to multiply                                                /
;/ - b.l    : value to multiply                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_Mulu3232 ; {res.ll, a.l, b.l} ; does res = a*b
`1\lo = (((`2)&$FFFF) * ((`3)&$FFFF)) + (( ((`2) LSR 16) *((`3)&$FFFF) )  LSL 16) + (( ((`2)&$FFFF) *((`3) LSR 16) )  LSL 16)
`1\hi = (((`2) LSR 16) * ((`3) LSR 16)) + (( ((`2) LSR 16) *((`3)&$FFFF) )  LSR 16) + (( ((`2)&$FFFF) *((`3) LSR 16) )  LSR 16)
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_Mulu {res.ll,a.ll,b.ll}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ Multiply two 64bit integers and store the result as 64bit integer.          /
;/ res = a * b                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - res.ll  : result                                                          /
;/ - a.ll    : value to multiply                                               /
;/ - b.ll    : value to multiply                                               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_Mulu ; {res.ll, a.ll, b.ll} ; does res = a*b
!ll_Mulu3232{ll_Mulu_temp.ll,`2\lo ,`3\lo}
ll_Mulu_temp\hi + (`2\hi *`3\lo)  + (`2\lo *`3\hi)
!ll_Set{`1,ll_Mulu_temp}
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_UShift {res.ll,a.ll,shift.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Unsigned bitshift of a long long value.                                     /
;/ res = a LSL shift                                                           /
;/ Note: this function can perform left and right shift, depending on the si:: /
;/ gn of shift                                                                 /
;/ Negative shift will shift right, positive value will shift left             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - res.ll    : result                                                        /
;/ - a.ll      : long long value                                               /
;/ - shift.l   : amount of bits to shift [-32...+32]                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_UShift;{res.ll, a.ll, shift.l} ; does res = a LSL shift
If (`3)>0
  ishift.l = 32 - (`3)
  `1\hi = (`2\hi LSL `3) | (`2\lo LSR ishift)
  `1\lo = (`2\lo LSL `3)
Else
  If (`3)<0
    shift.l  = 0-(`3)
    ishift.l = 32 - shift
    `1\lo = (`2\lo LSR shift) | (`2\hi LSL ishift)
    `1\hi = (`2\hi LSR shift)
  Else
    `1\hi = `2\hi
    `1\lo = `2\lo
  End If
End If
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_Shift {res.ll,a.ll,shift.l}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Signed bitshift of a long long value.                                       /
;/ res = a ASL shift                                                           /
;/ Note: this function can perform left and right shift, depending on the si:: /
;/ gn of shift                                                                 /
;/ Negative shift will shift right, positive value will shift left             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - res.ll    : result                                                        /
;/ - a.ll      : long long value                                               /
;/ - shift.l   : amount of bits to shift [-32...+32]                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_Shift ;{res.ll, a.ll, shift.l} ; does res = a ASL shift
If (`3)>0
  ishift.l = 32 - (`3)
  `1\hi = (`2\hi ASL `3) | (`2\lo LSR ishift)
  `1\lo = (`2\lo ASL `3)
Else
  If (`3)<0
    shift.l  = 0-(`3)
    ishift.l = 32 - shift
    `1\lo = (`2\lo LSR shift) | (`2\hi LSL ishift)
    `1\hi = (`2\hi ASR shift)
  Else
    `1\hi = `2\hi
    `1\lo = `2\lo
  End If
End If
End Macro



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_Divu6432 {res,a,b}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ Unsigned division of a 64bit value through a 32bit value.                   /
;/ res = a / b                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - res.ll  : ???                                                             /
;/ - a.ll    : ???                                                             /
;/ - b.l     : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_Divu6432 ; {res,a,b}
If (`3)=0  ; div 0!!!
  `1\hi=0 : `1\lo=0
Else        ; 64 : 32

  ; split
  div.l = (`3)  : s.l = 0
  ;Print "             Divisor: ",Hex$(div)," =("
  While div.l>$8000 : div = (div) LSR 1 : s-1 : Wend
  ;NPrint s,")=> ",Hex$(div)
  !ll_UShift{ll_Divu6432_tmp.ll,`2,s}

  hihi.l = ll_Divu6432_tmp\hi LSR 16
  hilo.l = ll_Divu6432_tmp\hi & $FFFF
  lohi.l = ll_Divu6432_tmp\lo LSR 16
  lolo.l = ll_Divu6432_tmp\lo & $FFFF

  ; approx div
  res.l = (hihi MOD div)
  hihi.l = hihi / div
  hilo.l + (res LSL 16)

  res.l = hilo MOD div
  hilo.l = hilo / div
  lohi.l + res LSL 16
 
  res.l = lohi MOD div
  lohi.l = lohi / div
  lolo.l + res LSL 16
 
  lolo.l = lolo / div

  `1\hi = (hihi LSL 16) | hilo
  `1\lo = (lohi LSL 16) | lolo

;   If s AND False
;     ; error
;     div.l = (`3)
;     done.l = 0
;     count.l =0
;     !ll_SetLong {ll_Divu6432_B.ll,div}
;     Repeat
;       !ll_Mulu {ll_Divu6432_A.ll,`1,ll_Divu6432_B}
;       !ll_Sub {ll_Divu6432_D.ll,`2,ll_Divu6432_A}
;       err.l = (ll_Divu6432_D\lo)
;       If err<0 Then err LSR 1
;       x.l = err/div
;       If err>=div
;         !ll_Inc{`1,x}
;         count+1
;         NPrint "Iterations done: ",Hex$(count)," shift was: ",s
;       Else
;         done=-1
;       End If
;     Until done
;     If count>0 Then NPrint "Iterations done: ",Hex$(count)," shift was: ",s
;   End If
End If
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_Divu {res.ll,a.ll,b.ll}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ Unsigned division of a 64bit value through a 64bit value.                   /
;/ res = a / b                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - res.ll  : ???                                                             /
;/ - a.ll    : ???                                                             /
;/ - b.ll    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_Divu ; {res.ll, a.ll, b.ll}  ; does res = a/b
If `3\hi=0
  If `3\lo=0  ; div 0!!!
    `1\hi=0 : `1\lo=0
  Else        ; 64 : 32
    !ll_Divu6432{`1,`2,`3\lo}
  End If
Else   ; 64/64
  `1\hi = 0
  `1\lo = `2\hi / `3\hi
;     done.l = 0
;     count.l =0
;     !ll_Set {ll_Divu6432_B.ll,`3}
;     Repeat
;       !ll_Mulu {ll_Divu6432_A.ll,`1,ll_Divu6432_B}
;       !ll_Sub {ll_Divu6432_D.ll,`2,ll_Divu6432_A}
;       err.l = (ll_Divu6432_D\lo)
;       If err<0 Then err LSR 1
;       x.l =  1  ;err/div
;       If err>=div
;         !ll_Inc{`1,x}
;         count+1
;         ;NPrint "Iterations done: ",Hex$(count)," shift was: ",s
;       Else
;         done=-1
;       End If
;     Until done
;     If count>0 Then NPrint "Iterations done: ",Hex$(count)," shift was: ",s
End If
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_Mod {res.ll,a.ll,b.ll}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - res.ll    : ???                                                           /
;/ - a.ll    : ???                                                             /
;/ - b.ll    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_Mod ; {res.ll, a.ll, b.ll} ; does res = a mod b
!ll_Divu{ll_Mod_tmp.ll,`2,`3}
!ll_Mulu{ll_Mod_tmp2.ll,ll_Mod_tmp,`3}
!ll_Sub {`1,`2,ll_Mod_tmp2}
End Macro






;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_ToLong {long.l,a}                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - long.l    : ???                                                           /
;/ - a    : ???                                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_ToLong ;{long.l, a}
`1 = `2\lo
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_ToDouble {double.d,a.ll}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - double.d    : ???                                                         /
;/ - a.ll    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_ToDouble ;{double.d, a.ll}
ll_lo1_tmp.l = (`2\lo LSR 1)
ll_lo2_tmp.l = (`2\lo AND 1)
`1 = `2\hi * $10000 * $10000 + ll_lo1_tmp * 2 + ll_lo2_tmp
End Macro
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_ToStr {string.s,a}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - string.s    : ???                                                         /
;/ - a    : ???                                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_ToStr ; {string.s, a}
`1 = ""
!ll_Set {ll_ToStr_tmp.ll,`2}
!ll_SetLong {ll_ToStr_10.ll ,10}
While ll_ToStr_tmp\lo><0 OR ll_ToStr_tmp\hi><0
  !ll_Mod {ll_ToStr_digit.ll,ll_ToStr_tmp,ll_ToStr_10}
  !ll_Divu{ll_ToStr_tmp2.ll ,ll_ToStr_tmp,ll_ToStr_10}
  !ll_Set {ll_ToStr_tmp     ,ll_ToStr_tmp2 }
  `1 = Chr$(@"0"+ll_ToStr_digit\lo) + `1
Wend
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ll_ToHex {strings.s,a}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - strings.s    : ???                                                        /
;/ - a    : ???                                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ll_ToHex ; {strings.s, a}
`1 = Hex$(`2\hi) + Hex$(`2\lo)
End Macro

CNIF #__include=0
SYNTAX 2
OPTIMIZE 7

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !test_mulu {a,b}                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - a    : ???                                                                /
;/ - b    : ???                                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro test_mulu ; {a,b}
  !ll_SetLongLong{ia.ll,`1,`2}
  !ll_SetLongLong{ib.ll,`3,`4}

  !ll_Mulu{i.ll,ia,ib}

  !ll_ToDouble{da.d,ia}
  !ll_ToDouble{db.d,ib}

  d.d = da * db

  dstr.s = Str$(d.d)
  !ll_ToStr{istr.s,i}
  !ll_ToHex{ihex.s,i}

  astr.s = Str$(da.d)
  bstr.s = Str$(db.d)
  !ll_ToHex{ahstr.s, ia}
  !ll_ToHex{bhstr.s, ib}

  !ll_ToDouble{dt.d,i}

  If (dt-d)>2 OR (dt-d)<-2

  NPrint "ll_Mulu {",astr,",",bstr,"} = ll_Mulu�{",ahstr,",",bhstr,"} = ..."
  NPrint "double   : ",dstr
  NPrint "longlong : ",istr, "    hex: ",ihex
  NPrint "---------------------------------------------"
  End If
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !test_divu {a,b}                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - a    : ???                                                                /
;/ - b    : ???                                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro test_divu ; {a,b}
  !ll_SetLongLong{ia.ll,`1,`2}
  !ll_SetLongLong{ib.ll,`3,`4}

  !ll_Divu{i.ll,ia,ib}

  !ll_ToDouble{da.d,ia}
  !ll_ToDouble{db.d,ib}

  d.d = da / db

  dstr.s = Str$(d.d)
  !ll_ToStr{istr.s,i}
  !ll_ToHex{ihex.s,i}

  astr.s = Str$(da.d)
  bstr.s = Str$(db.d)
  !ll_ToHex{ahstr.s, ia}
  !ll_ToHex{bhstr.s, ib}

  !ll_ToDouble{dt.d,i}

  If (dt-d)>1 OR (dt-d)<-1 OR True
 ; istr.s = Str$(dt.d)

  NPrint "ll_Divu {",astr,",",bstr,"} = ll_Divu�{",ahstr,",",bhstr,"} = ..."
  NPrint "double   : ",dstr
  NPrint "longlong : ",istr, "    hex: ",ihex
  NPrint "---------------------------------------------"
  End If
End Macro


;!test_mulu{0,7,0,2}
;!test_mulu{1,1,0,2}
;!test_mulu{0,$10000,1,$20000}
;!test_mulu{1,0,1,0}
;!test_mulu{1,1,2,2}
;
;!test_divu{0,801,0,2}
;!test_divu{801,0,0,2}
;!test_divu{0,801,2,0}
;!test_divu{801,0,2,0}

For n.l=0 To 50
  a.l = RRnd(0,$7FFF)
  b.l = RRnd(0,$7FFF)
  aa.l = RRnd(0,$7FFF)
  bb.l = RRnd(0,$7FFF)
  If b=0 Then b=1
  b*$1
  a*$1
  aa*$1
  ;!test_mulu{aa,a,bb,b}
  !test_divu{aa,a,0,b}
Next

NPrint "Done."
CEND


