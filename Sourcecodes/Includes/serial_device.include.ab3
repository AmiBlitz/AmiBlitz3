; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "DialDemo"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: serial_device.include                                                 /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////

CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
CEND

XINCLUDE "error.include.ab3"

#max_serials = 16

NEWTYPE.serial
is_open.w
msgport.l
msg_in.l
msg_out.l
in_length.l
in_ptr.l
in_buffer.l
in_buffer_ptr.l[2]
in_buffer_length.l
devicename.s
unit.w
cache.l
blength.l
devicebase.l
End NEWTYPE

Dim serial.serial(#max_serials-1)

#SER_BUFFERSIZE = 4096

USEPATH serial(sport)

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: serial_Close {sport.w}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sport.w    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement serial_Close {sport.w}
SHARED serial()
If \msg_in   Then AbortIO_ \msg_in : WaitIO_ \msg_in
If \msg_out  Then WaitIO_ \msg_out
If \devicebase><False Then CloseDevice_ \msg_out:\devicebase=False
If \msg_in   Then DeleteIORequest_ \msg_in  : \msg_in  = False
If \msg_out  Then DeleteIORequest_ \msg_out : \msg_out = False
If \msgport><False Then DeleteMsgPort_ \msgport
If \cache>0 Then FreeMem_ \cache,\blength : \cache = 0:\blength = 0
\msgport = False
\is_open = False
\devicename = ""
\unit       = -2
If \in_buffer_ptr[0] Then FreeMem_ \in_buffer_ptr[0],\in_buffer_length   : \in_buffer_ptr[0] = False
If \in_buffer_ptr[1] Then FreeMem_ \in_buffer_ptr[1],\in_buffer_length   : \in_buffer_ptr[1] = False
\in_buffer = 0
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: serial_CloseAll {}                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement serial_CloseAll {}
SHARED serial()
For sport.w = 0 To #max_serials-1
  serial_Close{sport}
Next
End Statement

!autoexit{serial_CloseAll}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: serial_ReadMem {sport.w,ptr.l,blength.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sport.w    : ???                                                          /
;/ - ptr.l    : ???                                                            /
;/ - blength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement serial_ReadMem {sport.w,ptr.l,blength.l}
SHARED serial()
succ.l=0
If \is_open = True AND ptr><0
;  WaitIO_ \msg_in
  *serialIO.IOExtSer          = \msg_in
  *serialIO\IOSer\io_Length   = blength
  *serialIO\IOSer\io_Data     = ptr
  *serialIO\IOSer\io_Command  = #CMD_READ
  SendIO_ \msg_in

;  timeout.l=1000
  ;While CheckIO_(\msg_in)=False AND timeout>0:Delay_ 1:timeout-1:Wend
  ;If timeout>0 Then AbortIO_ \msg_in:Else succ=True
  ;WaitIO_ \msg_in
Else
  error {"Tried to read illegal data to (closed) serial !"}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = serial_Open {sport.w,devicename.s,unit.l,@baud.l}       /
;/                                                                             /
;/ Description:                                                                /
;/  WaitIO_ \msg_in                                                            /
;/  timeout.l=1000                                                             /
;/   ;While CheckIO_(\msg_in)=False AND timeout>0:Delay_ 1:timeout-1:Wend      /
;/   ;If timeout>0 Then AbortIO_ \msg_in:Else succ=True                        /
;/   ;WaitIO_ \msg_in                                                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sport.w    : ???                                                          /
;/ - devicename.s    : ???                                                     /
;/ - unit.l    : ???                                                           /
;/ - baud.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w serial_Open {sport.w,devicename.s,unit.l,@baud.l}
SHARED serial()
If \is_open Then serial_Close {sport}
If baud<1 Then baud=9600
\devicename = devicename.s
\unit       = unit
\cache      = 0
\blength    = 0
If \unit<0
Else
 For n.l=0 To #max_serials-1
  If serial(n)\devicename = \devicename AND serial(n)\unit=\unit AND sport><n
    \is_open = True
  End If
 Next
 If \is_open = False
  \msgport = CreateMsgPort_ ()
  If \msgport
    \msg_in  = CreateIORequest_ (\msgport,SizeOf.IOExtSer)
    \msg_out = CreateIORequest_ (\msgport,SizeOf.IOExtSer)
    If \msg_in><0 AND \msg_out><0
      If OpenDevice_ (\devicename,\unit,\msg_out,0) = 0
        \devicebase = True
        *serialIO.IOExtSer = \msg_out
        *serialIO\IOSer\io_Command  = #SDCMD_SETPARAMS       ; erstmal Parameter setzen
        *serialIO\io_Baud           = baud
        ;*serialIO\io_SerFlags       = #SERF_XDISABLED|#SERF_EOFMODE|#SERF_7WIRE
        *serialIO\io_SerFlags       = #SERF_XDISABLED|#SERF_EOFMODE|#SERF_7WIRE;|#SERF_PARTY_ODD|#SERF_PARTY_ON
        *serialIO\io_StopBits       = 1
;        *serialIO\io_RBufLen        = 64
        *serialIO\io_ReadLen        = 8
        *serialIO\io_WriteLen       = 8

        If DoIO_ (\msg_out) = 0                              ; ... und dem device mitteilen
          CopyMem_ \msg_out,\msg_in,SizeOf.IOExtSer
          \in_buffer_ptr[0]  = AllocMem_ (#SER_BUFFERSIZE,0)
          \in_buffer_ptr[1]  = AllocMem_ (#SER_BUFFERSIZE,0)
          \in_buffer         = 0
          \in_buffer_length  = #SER_BUFFERSIZE
          \in_ptr            = \in_buffer_ptr[0]
          If \in_buffer_ptr[0]><0 AND \in_buffer_ptr[0]><0
            \is_open        = True
            serial_ReadMem {sport,\in_buffer_ptr[\in_buffer],\in_buffer_length}
          End If
        Else
          error {"Device is not compatible with serial.device !"} ; Parameter setzen hat nicht geklappt !
        End If
      Else
        DeleteIORequest_ \msg_out : \msg_out = False  ; Weil sonst waitio_ !!!
        DeleteIORequest_ \msg_in  : \msg_in  = False
        error {"Unable to open "+devicename.s+" unit "+Str$(unit)+" !"}
      End If
    Else
      error {"Unable to create IORequest !"}
    End If
  Else
    error {"Unable to create messageport !"}
  End If
 End If
End If
If \is_open = False Then serial_Close {sport}
Function Return \is_open
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: serial_WriteMem {sport.w,ptr.l,blength.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/         *serialIO\IOSer\io_Command  = #SDCMD_SETPARAMS       ; erstmal Pa:: /
;/ rameter setzen                                                              /
;/         serialIO\io_SerFlags       = #SERF_XDISABLED|#SERF_EOFMODE|#SERF_:: /
;/ 7WIRE                                                                       /
;/         *serialIO\io_SerFlags       = #SERF_XDISABLED|#SERF_EOFMODE|#SERF:: /
;/ _7WIRE;|#SERF_PARTY_ODD|#SERF_PARTY_ON                                      /
;/        *serialIO\io_RBufLen        = 64                                     /
;/           error {"Device is not compatible with serial.device !"} ; Param:: /
;/ eter setzen hat nicht geklappt !                                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sport.w    : ???                                                          /
;/ - ptr.l    : ???                                                            /
;/ - blength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement serial_WriteMem {sport.w,ptr.l,blength.l}     ; just sends the given data, memory is not copied
SHARED serial()
If \is_open = True AND ptr><0
    WaitIO_ \msg_out
    *serialIO.IOExtSer          = \msg_out
    *serialIO\IOSer\io_Length   = blength
    *serialIO\IOSer\io_Data     = ptr
    *serialIO\IOSer\io_Command  = #CMD_WRITE
    SendIO_ \msg_out
Else
  error {"Tried to write illegal data to (closed) serial !"}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: serial_WriteMemCopy {sport.w,ptr.l,blength.l}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sport.w    : ???                                                          /
;/ - ptr.l    : ???                                                            /
;/ - blength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement serial_WriteMemCopy {sport.w,ptr.l,blength.l}    ; copies the given data and sends it after
SHARED serial()
If \is_open = True AND ptr><0
  WaitIO_ \msg_out
  If blength>\blength
    If \cache>0 Then FreeMem_ \cache,\blength
    \cache = AllocMem_ (blength.l,0)
    \blength=blength
  End If
  If \cache
    CopyMem_ ptr,\cache,blength
    *serialIO.IOExtSer          = \msg_out
    *serialIO\IOSer\io_Length   = blength
    *serialIO\IOSer\io_Data     = \cache
    *serialIO\IOSer\io_Command  = #CMD_WRITE
    SendIO_ \msg_out
 End If
Else
  error {"Tried to write illegal data to (closed) serial !"}
End If
End Statement




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = serial_GetData {sport.w}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sport.w    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w serial_GetData {sport.w}
SHARED serial()
succ.w = False
If \is_open
  If CheckIO_ (\msg_in)
    WaitIO_ \msg_in
    *serialIO.IOExtSer = \msg_in
    \in_length = *serialIO\io_ReadLen
    \in_ptr    = \in_buffer_ptr[\in_buffer]
    a.s = LSet$(" ",\in_length)
    CopyMem_ \in_ptr,&a.s,\in_length
    ;NPrint "MODEM: ",a.s
    succ.w = True
    \in_buffer = 1-\in_buffer
    serial_ReadMem {sport,\in_buffer_ptr[\in_buffer],\in_buffer_length}
  End If
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = serial_GetDataLength {sport.w}                          /
;/                                                                             /
;/ Description:                                                                /
;/     ;NPrint "MODEM: ",a.s                                                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sport.w    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l serial_GetDataLength {sport.w}
SHARED serial()
Function Return \in_length
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = serial_GetDataPtr {sport.w}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sport.w    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l serial_GetDataPtr {sport.w}
SHARED serial()
Function Return \in_ptr
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = serial_GetSigFlag {}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l serial_GetSigFlag {}
SHARED serial()
sigflag.l = 0
For sport.w=0 To #max_serials-1
  If \is_open
    *msgport.MsgPort = \msgport
    sigflag | (1 LSL *msgport\mp_SigBit)
  End If
Next
Function Return sigflag
End Function

; Hardware flow control (RTS/CTS) (&K3 On many Hayes modems)

; Other settings (in standard Hayes commands) you should investigate are:

;      E1 Command/usr/src/linux-2.0.27/INCLUDE/linux/serial.h Echo On (required For chat To operate)
;     Q0 Report result codes (required For chat To operate)
;     S0=0 Auto Answer Off (unless you want your modem To answer the phone)
;     &C1 Carrier Detect On only after connect
;     &S0 Data Set Ready (DSR) always On
;     (depends) Data Terminal Ready

; ask speed: AT&V

; factory settings: AT&F
CNIF #__include=0
device.s = "serial.device"
If serial_Open {0,device.s,0,9600}
  NPrint "serial open ..."
  While serial_GetData{0}:Wend

  init.s = "AT&F"+Chr$(13) : NPrint "reset: ",init.s
  serial_WriteMem {0,&init.s,Len(init.s)} : Delay_ 200 : While serial_GetData{0}:Wend

  Delay_ 200
  a.s = "ATDT01715228970"+Chr$(13) : NPrint "sending ...",a.s
  serial_WriteMem {0,&a.s,Len(a.s)}  : NPrint "waiting..."

  While serial_GetData{0}:Wend
  Delay_ 400
  While serial_GetData{0}:Wend
  Delay_ 400
  While serial_GetData{0}:Wend


  NPrint "Hangup ..."
  exit.s = "AT&F"+Chr$(13) : NPrint "exit: ",exit.s
  serial_WriteMem {0,&exit.s,Len(exit.s)} : Delay_ 200 : While serial_GetData{0}:Wend

  NPrint "close."
  serial_Close {0}
Else
  NPrint "ERROR: Unable to open ",device.s
End If
Delay_ 100
End
CEND

