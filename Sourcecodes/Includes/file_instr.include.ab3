; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "FileInstrDemo"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 48
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: file_instr.include                                                    /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
CEND

XINCLUDE "error.include.ab3"
XINCLUDE "dos.include.ab3"
XINCLUDE "convert.include.ab3"
XINCLUDE "convert_audio.include.ab3"
XINCLUDE "file.include.ab3"
XINCLUDE "sf2.include.ab3"
XINCLUDE "gus.include.ab3"

NEWTYPE.instrengine
typ.l
numsamps.l
name.s
s_name.s
s_samplerate.l
s_rootkey.l
s_fine.l
s_blength.l
s_flength.l
s_highkey.l
s_lowkey.l
s_start.l
s_end.l
s_l_start.l
s_l_end.l
s_l_start_frac.l
s_l_end_frac.l
s_l.l
s_pan.l
s_gain.l
s_sampletype.w
End NEWTYPE

#form_none = 0
#form_gus  = 1
#form_sf2  = 2

DEFTYPE.instrengine instrengine

USEPATH instrengine
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: instr_close {}                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement instr_close {}
SHARED instrengine
Select \typ
  Case #form_sf2
    sf_close{}
  Case #form_gus
    gus_close{}
End Select
\typ = #form_none
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_open {filename.s}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_open {filename.s}
SHARED instrengine
succ.l = False
instr_close{}
\numsamps = 0
\name     = "???"
If gus_tst {filename.s}
  succ.l=gus_open {filename.s} : \typ = #form_gus
  \numsamps = gus_numsamps{}
  \name     = gus_name {}
End If
If sf_tst  {filename.s}
  succ.l=sf_open {filename.s}  : \typ = #form_sf2
  \numsamps = sf_numsamps{}
  \name     = sf_name {}
End If

If succ=False Then instr_close{}
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_tst {filename.s}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_tst {filename.s}
SHARED instrengine
succ.l = sf_tst  {filename.s}
succ.l | gus_tst {filename.s}
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = instr_name {}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s instr_name {}
SHARED instrengine
Function Return \name
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_numsamps {}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_numsamps {}
SHARED instrengine
Function Return \numsamps
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_nextsample {}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_nextsample {}
SHARED instrengine
Select \typ
  Case #form_sf2
    succ.l = sf_nextsample{}
    If succ
      \s_name       = sf_sample_name {}
      \s_samplerate = sf_sample_rate {}
      \s_rootkey    = sf_sample_rootkey{}
      \s_fine       = sf_sample_fine{}
      \s_blength    = sf_sample_blength{}
      \s_flength    = sf_sample_flength{}
      \s_highkey    = sf_sample_highkey{}
      \s_lowkey     = sf_sample_lowkey{}
      \s_start      = 0
      \s_end        = sf_sample_flength{}
      \s_l_start    = sf_sample_loop_start{}
      \s_l_end      = sf_sample_loop_end{}
      \s_l_start_frac=sf_sample_loop_start_frac{}
      \s_l_end_frac = sf_sample_loop_end_frac{}
      \s_l          = sf_sample_loop{}
      \s_pan        = sf_sample_pan{}
      \s_gain       = sf_sample_gain{}
      \s_sampletype = sf_sample_sampletype {}
    End If
  Case #form_gus
    succ.l = gus_nextsample{}
    If succ
      \s_name       = gus_sample_name {}
      \s_samplerate = gus_sample_rate {}
      \s_rootkey    = gus_sample_rootkey{}
      \s_fine       = gus_sample_fine{}
      \s_blength    = gus_sample_blength{}
      \s_flength    = gus_sample_flength{}
      \s_highkey    = gus_sample_highkey{}
      \s_lowkey     = gus_sample_lowkey{}
      \s_start      = 0
      \s_end        = gus_sample_flength{}
      \s_l_start    = gus_sample_loop_start{}
      \s_l_end      = gus_sample_loop_end{}
      \s_l_start_frac=gus_sample_loop_start_frac{}
      \s_l_end_frac = gus_sample_loop_end_frac{}
      \s_l          = gus_sample_loop{}
      \s_pan        = gus_sample_pan{}
      \s_gain       = gus_sample_gain{}
      If gus_sample_channels {} = 1  Then \s_sampletype = 1 ;need testing
      If gus_sample_channels {} = 2   Then \s_sampletype = 8 ;need testing if GUS use for stereo l+r linked samples
    End If

  Default
    succ.l = False
End Select
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = instr_sample_name {}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s instr_sample_name {}
SHARED instrengine
Function Return \s_name
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_sample_blength {}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_sample_blength {}
SHARED instrengine
Function Return \s_blength
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_sample_flength {}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_sample_flength {}
SHARED instrengine
Function Return \s_flength
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_sample_loop_start {}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_sample_loop_start {}
SHARED instrengine
Function Return \s_l_start
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_sample_loop_start_frac {}                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_sample_loop_start_frac {}
SHARED instrengine
Function Return \s_l_start_frac
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_sample_loop {}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_sample_loop {}
SHARED instrengine
Function Return \s_l
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_sample_loop_end {}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_sample_loop_end {}
SHARED instrengine
Function Return \s_l_end
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_sample_loop_end_frac {}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_sample_loop_end_frac {}
SHARED instrengine
Function Return \s_l_end_frac
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_sample_rootkey {}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_sample_rootkey {}
SHARED instrengine
Function Return \s_rootkey
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_sample_lowkey {}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_sample_lowkey {}
SHARED instrengine
Function Return \s_lowkey
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_sample_highkey {}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_sample_highkey {}
SHARED instrengine
Function Return \s_highkey
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_sample_fine {}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_sample_fine {}
SHARED instrengine
Function Return \s_fine
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_sample_rate {}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_sample_rate {}
SHARED instrengine
Function Return \s_samplerate
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_sample_gain {}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_sample_gain {}
SHARED instrengine
Function Return \s_gain
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_sample_pan {}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_sample_pan {}
SHARED instrengine
Function Return \s_pan
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = instr_sample_sampletype {}                              /
;/                                                                             /
;/ Description:                                                                /
;/                                                                             /
;/                                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ mono = 1                                                                    /
;/ left = 4                                                                    /
;/ right = 2                                                                   /
;/ linked = 8                                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w instr_sample_sampletype {}
SHARED instrengine
Function Return \s_sampletype
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = instr_sample_readdata {ptr.l,maxbytes.l}                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - ptr.l    : ???                                                            /
;/ - maxbytes.l    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l instr_sample_readdata {ptr.l,maxbytes.l}
SHARED instrengine
Select \typ
  Case #form_sf2
    succ.l = sf_sample_readdata{ptr,maxbytes}
  Case #form_gus
    succ.l = gus_sample_readdata{ptr,maxbytes}
  Default
    succ.l = False
End Select
Function Return succ
End Function



CNIF #__include=0
;If instr_open {"h5:sounds/banjo.pat"}
If instr_open {"h5:sounds/rolandnicepiano.sf2"}
;If instr_open {""}
  ;NPrint instr_name{}
  ;NPrint "# samples: ",instr_numsamps{}
  While instr_nextsample{}

    Print "Sample: ",instr_sample_name {}," rootkey: ",con_Note2String{instr_sample_rootkey{}}," fine: ",instr_sample_fine{}," Loop start ", instr_sample_loop_start{}," loop end ",instr_sample_loop_end{}*2," Blength ", instr_sample_blength{}
    NPrint " Loopmode ", instr_sample_loop{}

  Wend
  instr_close{}
End If
Delay_ 200
End
CEND
