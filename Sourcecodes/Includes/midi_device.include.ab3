; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "MidiDeviceDemo"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 24
; CursorColumn    = 28
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: midi_device.include                                                   /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
XINCLUDE "error.include.ab3"

#max_midiports = 16

NEWTYPE.midiport
is_open.w
msgport.l
msg_in.l
msg_out.l
msg_query.l
in_length.l
in_ptr.l
in_buffer.l
in_buffer_ptr.l[2]
in_buffer_length.l
devicename.s
unit.w
mapport.w
cache.l
blength.l
devicebase.l
End NEWTYPE

Dim midiport.midiport(#max_midiports-1)

#SER_BUFFERSIZE = 4096

USEPATH midiport(mp)
For mp.w = 0 To #max_midiports-1
  \mapport = mp
Next

.mp_close
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: midiport_close {mp.w}                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mp.w    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement midiport_close {mp.w}
SHARED midiport()
If \msg_in   Then AbortIO_ \msg_in : WaitIO_ \msg_in
If \msg_out  Then WaitIO_ \msg_out
If \devicebase><False Then CloseDevice_ \msg_out:\devicebase=False
If \msg_in   Then DeleteIORequest_ \msg_in  : \msg_in  = False
If \msg_out  Then DeleteIORequest_ \msg_out : \msg_out = False
If \msgport><False Then DeleteMsgPort_ \msgport
If \cache>0 Then FreeMem_ \cache,\blength : \cache = 0:\blength = 0
\msgport = False
\is_open = False
\devicename = ""
\unit       = -2
\mapport    = mp
If \in_buffer_ptr[0] Then FreeMem_ \in_buffer_ptr[0],\in_buffer_length   : \in_buffer_ptr[0] = False
If \in_buffer_ptr[1] Then FreeMem_ \in_buffer_ptr[1],\in_buffer_length   : \in_buffer_ptr[1] = False
\in_buffer = 0
End Statement


.mp_close_all
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: midiport_close_all {}                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement midiport_close_all {}
SHARED midiport()
For mp.w = 0 To #max_midiports-1
  midiport_close{mp}
Next
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: midiport_read {mp.w,ptr.l,blength.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mp.w    : ???                                                             /
;/ - ptr.l    : ???                                                            /
;/ - blength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement midiport_read {mp.w,ptr.l,blength.l}
SHARED midiport()
If \is_open = True AND ptr><0
;  WaitIO_ \msg_in
  *serialIO.IOExtSer          = \msg_in
  *serialIO\IOSer\io_Length   = blength
  *serialIO\IOSer\io_Data     = ptr
  *serialIO\IOSer\io_Command  = #CMD_READ
  SendIO_ \msg_in
Else
  error {"Tried to read illegal data to (closed) midiport !"}
End If
End Statement




.mp_open
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = midiport_open {mp.w,devicename.s,unit.l,@baud.l}        /
;/                                                                             /
;/ Description:                                                                /
;/  WaitIO_ \msg_in                                                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mp.w    : ???                                                             /
;/ - devicename.s    : ???                                                     /
;/ - unit.l    : ???                                                           /
;/ - baud.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w midiport_open {mp.w,devicename.s,unit.l,@baud.l}
SHARED midiport()
If baud<1 Then baud=31250
If \is_open Then midiport_close {mp}
\devicename = devicename.s
\unit       = unit
\cache      = 0
\blength    = 0
If \unit<0

Else
  For n.l=0 To 15
    If midiport(n)\devicename = \devicename AND midiport(n)\unit=\unit AND mp><n
      \mapport = n
      \is_open = True
    End If
  Next
  If \is_open = False
    \msgport = CreateMsgPort_ ()
    If \msgport
      \msg_in    = CreateIORequest_ (\msgport,SizeOf.IOExtSer)
      \msg_out   = CreateIORequest_ (\msgport,SizeOf.IOExtSer)
      \msg_query = CreateIORequest_ (\msgport,SizeOf.IOExtSer)
      If \msg_in><0 AND \msg_out><0  AND \msg_query
        If OpenDevice_ (\devicename,\unit,\msg_out,0) = 0
          \devicebase = True
          *serialIO.IOExtSer = \msg_out
          *serialIO\IOSer\io_Command  = #SDCMD_SETPARAMS       ; erstmal Parameter setzen
          *serialIO\io_Baud           = baud     ; set the midi baud !
          *serialIO\io_SerFlags       = 0 ;#SERB_RAD_BOOGIE
          If DoIO_ (\msg_out) = 0                              ; ... und dem device mitteilen
            CopyMem_ \msg_out,\msg_in,SizeOf.IOExtSer
            CopyMem_ \msg_out,\msg_query,SizeOf.IOExtSer
            *serialIO.IOExtSer = \msg_query
            *serialIO\IOSer\io_Command  = #SDCMD_QUERY ; erstmal Parameter setzen
            \in_buffer_ptr[0]  = AllocMem_ (#SER_BUFFERSIZE,0)
            \in_buffer_ptr[1]  = AllocMem_ (#SER_BUFFERSIZE,0)
            \in_buffer         = 0
            \in_buffer_length  = #SER_BUFFERSIZE
            \in_ptr            = \in_buffer_ptr[0]
            \mapport = mp
            If \in_buffer_ptr[0]><0 AND \in_buffer_ptr[0]><0
              \is_open        = True
              midiport_read {mp,\in_buffer_ptr[\in_buffer],1}
            End If
          Else
            error {"Device is not compatible with serial.device !"} ; Parameter setzen hat nicht geklappt !
          End If
        Else
          DeleteIORequest_ \msg_out : \msg_out = False  ; Weil sonst waitio_ !!!
          DeleteIORequest_ \msg_in  : \msg_in  = False
          error {"Unable to open "+devicename.s+" unit "+Str$(unit)+" !"}
        End If
      Else
        error {"Unable to create IORequest !"}
      End If
    Else
      error {"Unable to create messageport !"}
    End If
  End If
End If
If \is_open = False Then midiport_close {mp}
Function Return \is_open
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: midiport_write {mp.w,ptr.l,blength.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/           *serialIO\IOSer\io_Command  = #SDCMD_SETPARAMS       ; erstmal :: /
;/ Parameter setzen                                                            /
;/           *serialIO\io_Baud           = baud     ; set the midi baud !      /
;/           *serialIO\io_SerFlags       = 0 SERB_RAD_BOOGIE                   /
;/             *serialIO\IOSer\io_Command  = #SDCMD_QUERY ; erstmal Paramete:: /
;/ r setzen                                                                    /
;/             error {"Device is not compatible with serial.device !"} ; Par:: /
;/ ameter setzen hat nicht geklappt !                                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mp.w    : ???                                                             /
;/ - ptr.l    : ???                                                            /
;/ - blength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement midiport_write {mp.w,ptr.l,blength.l}     ; just sends the given data, memory is not copied
SHARED midiport()
If \is_open = True AND ptr><0
  mp.w = \mapport
  WaitIO_ \msg_out
  *serialIO.IOExtSer          = \msg_out
  *serialIO\IOSer\io_Length   = blength
  *serialIO\IOSer\io_Data     = ptr
  *serialIO\IOSer\io_Command  = #CMD_WRITE
  SendIO_ \msg_out
Else
  error {"Tried to write illegal data to (closed) midiport !"}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: midiport_write_c {mp.w,ptr.l,blength.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mp.w    : ???                                                             /
;/ - ptr.l    : ???                                                            /
;/ - blength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement midiport_write_c {mp.w,ptr.l,blength.l}    ; copies the given data and sends it after
SHARED midiport()
If \is_open = True AND ptr><0
  mp.w = \mapport
  WaitIO_ \msg_out
  If blength>\blength
    If \cache>0 Then FreeMem_ \cache,\blength
    \cache = AllocMem_ (blength.l,0)
    \blength=blength
  End If
  If \cache
    CopyMem_ ptr,\cache,blength
    *serialIO.IOExtSer          = \msg_out
    *serialIO\IOSer\io_Length   = blength
    *serialIO\IOSer\io_Data     = \cache
    *serialIO\IOSer\io_Command  = #CMD_WRITE
    SendIO_ \msg_out
 End If
Else
  error {"Tried to write illegal data to (closed) midiport !"}
End If
End Statement





;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = midiport_receive {mp.w}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mp.w    : ???                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w midiport_receive {mp.w}
SHARED midiport()
succ.w = False
If \mapport=mp  AND \is_open=True
  If CheckIO_ (\msg_in)
    WaitIO_ \msg_in

    Delay_ 1
    ; Rest lesen
    DoIO_ \msg_query
    *serialIO.IOStdReq = \msg_query
    todo.l = *serialIO\io_Actual
    If todo>0
      midiport_read {mp,\in_buffer_ptr[\in_buffer]+1,todo}
      WaitIO_ \msg_in
      succ=True
      \in_length = todo+1
      \in_ptr    = \in_buffer_ptr[\in_buffer]
    End If
    \in_buffer=1-\in_buffer
    midiport_read {mp,\in_buffer_ptr[\in_buffer],1}
  End If
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = midiport_received_length {mp.w}                         /
;/                                                                             /
;/ Description:                                                                /
;/     ; Rest lesen                                                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mp.w    : ???                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l midiport_received_length {mp.w}
SHARED midiport()
Function Return \in_length
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = midiport_received_ptr {mp.w}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mp.w    : ???                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l midiport_received_ptr {mp.w}
SHARED midiport()
Function Return \in_ptr
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = midiport_sigflag {}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l midiport_sigflag {}
SHARED midiport()
sigflag.l = 0
For mp.w=0 To #max_midiports-1
  If \is_open
    *msgport.MsgPort = \msgport
    sigflag | (1 LSL *msgport\mp_SigBit)
  End If
Next
Function Return sigflag
End Function

!autoexit{midiport_close_all}


