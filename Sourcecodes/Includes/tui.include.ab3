; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "TuiDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 2024
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 512
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 61
; LabelSearch     = "listv"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 2
; Max GadgetList  = 5
; Max Queue       = 1
; Max Screen      = 2
; Max Shape       = 2
; Max CopList     = 1
; Max Sprite      = 1
; Max Stencil     = 1
; Max Module      = 1
; Max Window      = 2
; Max Anim        = 1
; Max Sound       = 1
; Max Bank        = 1
; Max Buffer      = 1
; Max BitMap      = 1
; Max Slice       = 1
; Max Page        = 4
; Max Tape        = 1
; Max IntuiFont   = 5
; Max MedModule   = 1
; Max Palette     = 1
; Max MenuList    = 1
; Max BlitzFont   = 1
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: tui.include                                                           /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF @#clever_refresh=0
  #clever_refresh  = 0 ; better looking refresh, but more CPU intensive
CEND
CNIF @#max_tuigads=0
  #max_tuigads = 150
CEND
CNIF @#max_menus=0
  #max_menus = 10
CEND
CNIF @#max_menuitems=0
  #max_menuitems = 24
CEND
CNIF @#max_menusubs=0
  #max_menusubs  = 16
CEND
CNIF @#tui_flag=0
  #tui_flag = 1|2|4|8|16|32|128|256|512|1024 ; All features on except BlitzShapes
CEND


CNIF @#tui_patternwrap=0
  #tui_patternwrap=1
CEND
#tui_use_texteditor = #tui_flag&1
#tui_use_primtives  = #tui_flag&2
#tui_use_multilist  = #tui_flag&4
#tui_use_complex    = #tui_flag&8
#tui_use_menu       = #tui_flag&16
#tui_use_app        = #tui_flag&32  ; use App library
#tui_use_shapes     = #tui_flag&64  ; use bbshapes
#tui_use_intui      = #tui_flag&128 ; use intui.include as replacmenet !
#tui_use_audio      = #tui_flag&256 ; use audio related stuff
#tui_use_listview   = #tui_flag&512 ; use Listview
#tui_use_image      = #tui_flag&1024
!initasm
!basic


CNIF #__include = 0
;#use_locklayer = 1
SYNTAX 2
OPTIMIZE 5
WBStartup
#max_windows = 2
XINCLUDE "eclock.include.ab3"
CEND
;Runerrsoff
XINCLUDE "error.include.ab3"
XINCLUDE "secureload_font.include.ab3"
XINCLUDE "convert.include.ab3"
XINCLUDE "dos.include.ab3"
XINCLUDE "screen.include.ab3"
XINCLUDE "file.include.ab3"
XINCLUDE "window.include.ab3"
CNIF #tui_use_image
RunErrsOff
XINCLUDE "image.include.ab3"
LastRunErrsMode
CEND
;XINCLUDE "locklayer.include.ab3"
CNIF #tui_use_texteditor
XINCLUDE "undo.include.ab3"
CEND
XINCLUDE "strptr.include.ab3"
CNIF #tui_use_multilist
XINCLUDE "multilist.include.ab3"
XINCLUDE "font.include.ab3"
CEND
XINCLUDE "mousepointer.include.ab3"

CNIF #tui_use_intui
XINCLUDE "intuition.include.ab3"
CELSE
#NM_WHEEL_UP      = 122
#NM_WHEEL_DOWN    = 123
#RAWKEY_PAGEUP    =  72
#RAWKEY_PAGEDOWN  =  73
#RAWKEY_HOME      = 112
#RAWKEY_END       = 113
#RAWKEY_UP        =  76
#RAWKEY_DOWN      =  77
#RAWKEY_LEFT      =  79
#RAWKEY_RIGHT     =  78
#RAWKEY_TAB       =  66
#RAWKEY_RETURN    =  68
#RAWKEY_ENTER     =  67
#RAWKEY_ESC       =  69
CEND

CNIF #tui_use_app
XINCLUDE "app.include.ab3"
CEND

#LAYERS_NOBACKFILL = 1

#max_childs  = 16
#gainexp = 1
#mixergain_res = 100
; ------------------------------------ TUI Objects

#tobj_hgroup     =  1
#tobj_vgroup     =  2
#tobj_button     =  3
#tobj_string     =  4
#tobj_numstring  =  5
#tobj_cycle      =  6
#tobj_mx         =  7   ; (buggy !)
#tobj_checkbox   =  8
CNIF #tui_use_shapes
#tobj_shapegad   =  9
#tobj_shape      = 17
CEND
#tobj_hslider    = 10
#tobj_vslider    = 11
#tobj_hscroller  = 12
#tobj_vscroller  = 13
CNIF #tui_use_listview
#tobj_listview   = 14
CEND
#tobj_label      = 15
#tobj_space      = 16
#tobj_view       = 18
#tobj_statusbar  = 19
CNIF #tui_use_audio
#tobj_levelmeter = 20
#tobj_envelope   = 28
CEND
#tobj_page       = 21
CNIF #tui_use_image
#tobj_image      = 22
#tobj_imagegad   = 23
CEND
#tobj_hidden     = 25
CNIF #tui_use_texteditor
#tobj_texteditor = 26
CEND
CNIF #tui_use_multilist
#tobj_multilist  = 27
CEND

; ------------------------------------ TUI TAGS
#tui_tag_left      =      $1
#tui_tag_right     =      $2
#tui_tag_centered  =      $4
#tui_tag_disabled  =      $8
#tui_tag_bold      =     $10
#tui_tag_highlight =     $20
#tui_tag_bright    =     $40
#tui_tag_small     =     $80
#tui_tag_big       =    $100
#tui_tag_nframe    =    $200
#tui_tag_bframe    =    $400
#tui_tag_iframe    =    $800
#tui_tag_gframe    =   $1000
#tui_tag_nospace   =   $2000
#tui_tag_top       =   $4000
#tui_tag_hstripe   =   $8000
#tui_tag_multi     =  $10000
#tui_tag_samexs    =  $20000
#tui_tag_sameys    =  $40000
#tui_tag_samesize  =  #tui_tag_samexs|#tui_tag_sameys
#tui_tag_incdec   =      $20
#tui_tag_fixedxs   =  $80000
#tui_tag_fixedys   = $100000
#tui_tag_fixedsize  =  #tui_tag_fixedxs|#tui_tag_fixedys
#tui_tag_below     = $200000
#tui_tag_alert     = $400000
#tui_tag_hl        = $800000
#tui_tag_ihl       =$1000000
#tui_tag_bhl       =$2000000
#tui_tag_hl_all    = #tui_tag_hl|#tui_tag_ihl|#tui_tag_bhl
#tui_tag_vstripe   =$4000000
#tui_tag_immidiate =$8000000

#tui_tag_diskbrowse=#tui_tag_below


; ------------------------------------- SLIDERS
#slider_none      = 0
#slider_linear    = 1
#slider_plusminus = 2
#slider_half      = 3
#slider_quarter   = 4
#slider_timefactor= 5 ; *
#slider_deci      = 6
#slider_centi     = 7
#slider_ctrl      = 8 ; *
#slider_note      = 9 ; *
#slider_pan       = 10
#slider_delay     = 11
#slider_gain      = 12
#slider_gmidi     = 13
#slider_gmidi_drums = 14
#slider_exp       = 15
#slider_000       = 16
#slider_mixergain = 17
#slider_mixerpan  = 18
#slider_freq      = 19
#slider_lowcustom = 20
#slider_highcustom= 21
#slider_q         = 22
#slider_bpm       = 23
#slider_milli     = 24

;#NG_HIGHLABEL     = $0020              ; Highlight the label
#NG_DISABLE       = $0040              ; Disable gadget
#NG_IMMEDIATE     = $0080              ; Activate on gadget down
#NG_BOOLVALUE     = $0100              ; Checkbox on
#NG_SCALED        = $0200              ; Scale arrows for slider
#NG_VERTICAL      = $0400              ; Make slider/scroller vertical
#NG_ARROWS        = $0800              ; Give slider/scroller arrows
#NG_TTOGGLE       = $2000              ; toggle it !

#tpen_white             = 0
#tpen_black             = 1
#tpen_shine             = 2
#tpen_shadow            = 3
#tpen_led_red           = 4
#tpen_led_yellow        = 5
#tpen_led_green         = 6
#tpen_led_red_dark      = 7
#tpen_led_yellow_dark   = 8
#tpen_led_green_dark    = 9
#tpen_led_blue_dark     = 13
#tpen_led_blue          = 14
#tpen_halfshine         = 10
#tpen_halfshadow        = 11
#tpen_bubbleback        = 12
#tpen_darkshadow        = 15
#tpen_bg                = 16
#tpen_highlight         = 17

#notify_tuirefresh_obj          = $40000000
#notify_internal_viewscroller_h = $80000001
#notify_internal_viewscroller_v = $80000002
#notify_internal_texteditor     = $80000003
#notify_internal_multilist      = $80000004
#notify_nothing                 = 0
#notify_dummy                   = $FFFFFFFF

;#qual_shiftr = 1
;#qual_shiftl = 2
;#qual_alt    = 8
;#qual_shift  = #qual_shiftr|#qual_shiftl

#qual_lshift   = %0000000000000001
#qual_rshift   = %0000000000000010
#qual_capslock = %0000000000000100
#qual_shift    = #qual_lshift|#qual_rshift
#qual_caps     = #qual_shift|#qual_capslock
#qual_lalt   = %0000000000010000
#qual_ralt   = %0000000000100000
#qual_alt    = #qual_ralt|#qual_lalt
#qual_lamiga = %0000000001000000
#qual_ramiga = %0000000010000000
#qual_amiga  = #qual_ramiga|#qual_lamiga
#qual_ctrl   = %0000000000001000
#qual_mb     = %0100000000000000

#tui_font_med   = 0
#tui_font_fix = 1
#tui_font_small = 1
#tui_font_big   = 2
#tui_font_vslider = 1
#tui_font_texteditor = 3
#tui_customfont = 4

NEWTYPE.tui_object
typ.l
x.l
y.l
xs.l
ys.l
ttags.l
chars.w
text.s
frametitle.s
value.l
modulo.l
minvalue.l
maxvalue.l
dat1.l
gtflags.l
notify.l
visible.w
help.s
view_xs.l
view_ys.l
view_xf.l
view_yf.l
view_xo.l
view_yo.l
moduloxs.w [#max_childs]
moduloys.w [#max_childs]
child.w    [#max_childs]
End NEWTYPE


NEWTYPE.tuiengine
is_open.w
space.w
font_big.w
font_med.w
font_small.w
font_fix.w
fontsize_big.w
fontsize_med.w
fontsize_small.w
fontsize_fix.w
fontname_fix.s
fontname_big.s
fontname_small.s
fontname_med.s
slider_delaymode.w
slider_gainmode.w
bpm.f
menu_title.l
menu_item.l
menu_sub.l
gadgethelp.w
bubbleopen.w
bubblewin.l
bubbleobj.l
bubbleobj_last.l
bubbleobj_count.l
bubble_plop.l
bubbletext.s
bubble_ishelp.l
bubble_basewin.l
msg_sec.l
msg_mic.l
msg_x.l
msg_y.l
wflgs.l
sigflag.l
wto.l
wlo.l
menu_isused.l
pattern.l
use_pattern.l
mouseover_obj.l
mouseover_win.l
deftags.l
lmx.l
lmy.l
listview_expanded.l
owntask.l
ownsigflag.l
button_increase.l
space_decrease.l
*bf.Hook
*bfbd.Hook
End NEWTYPE


NEWTYPE.tuievent
idcmp.l
win.l
id_data.l
notify.l      ; notify
mx.l          ; mouse x
my.l          ; mouse y
xs.l
ys.l
mb.w          ; mousebutton
mpress.w      ; true, falls mouse gedrueckt
mclick.w      ; true, falls mouse neu geclicked
dblclick.w
value.l       ;
tuiobj.l      ;
menu_title.l
menu_item.l
menu_sub.l
watch_click.w
watch_tuiobj.w
watch_win.w
CNIF #tui_use_intui=0
watch_scroller.w
CEND
qual.w
ranging.w
range_x.l
range_y.l
orx.l
ory.l
string.s
End NEWTYPE


NEWTYPE.tui_lvitem
lv_nextitem.l
li_user_data.l
li_tags.l
li_image.w
li_status.w
End NEWTYPE

NEWTYPE.winnotify
on_active.l
on_inactive.l
on_intuiticks.l
on_prefs.l
lastfocusobj.l
;app_notify.l
End NEWTYPE

Dim tuidat.tui_object(#max_windows-1,#max_tuigads-1)
Dim controllername.s (127)
Dim gmidi.s (127)
Dim gmidi_drums.s (127)

Dim tuipen.l (64)
Dim tuiparent.l (#max_windows-1)
Dim List tuievent_queue.tuievent (100)
Dim vkeynotify.l (#max_windows-1,255)
Dim rkeynotify.l (#max_windows-1,255)

Dim winnotify.winnotify (#max_windows-1)

Dim led_bright.l (16)
Dim led_dark.l (16)

DEFTYPE.tuievent tuievent
DEFTYPE.tuiengine tuiengine
USEPATH tuidat(win,tuiobj)


acwin.l = -1
GTNewLookProp On
GTGZZPosition On

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = textlen {a.s,@font.l,@win.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - a.s    : ???                                                              /
;/ - font.l    : ???                                                           /
;/ - win.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l textlen {a.s,@font.l,@win.l} ; ------------------------------------------------------------------
;If win<0 Then win=Used Window
;If font<0 Then font = Used IntuiFont
;If win_IsOpen {win} AND False
;  old.l = Used Window
;  If font>=0 Then Use Window win:WindowFont font
;  l.l = TextLength_(RastPort(win),&a.s,Peek.l(&a.s-4))
;  If win_IsOpen {old} Then Use Window old
;Else
  If Used Screen>=0
    *scr._Screen = Peek.l(Addr Screen(Used Screen))
    ;Forbid_
    oldfont.l = *scr\_RastPort\Font
    If font>=0 Then SetFont_ *scr\_RastPort,Peek.l(Addr IntuiFont(font)+8)
    l.l = TextLength_(*scr\_RastPort,&a.s,Peek.l(&a.s-4)) ;+ 2
    SetFont_ *scr\_RastPort,oldfont
    ;Permit_
  Else
    l = 8 * Peek.l(&a.s-4)
    ; error {"Must guess !"}
  End If
;End If
Function Return l
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = tui_loadfonts {@font_name.s,@font_size.l,@font_name_s:: /
;/ mall.s,@font_size_small.l,@font_big.s,@font_size_big.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - font_name.s    : ???                                                      /
;/ - font_size.l    : ???                                                      /
;/ - font_name_small.s    : ???                                                /
;/ - font_size_small.l    : ???                                                /
;/ - font_big.s    : ???                                                       /
;/ - font_size_big.l    : ???                                                  /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w tui_loadfonts {@font_name.s,@font_size.l,@font_name_small.s,@font_size_small.l,@font_big.s,@font_size_big.l}
SHARED tuiengine
succ.w = True

;If tuiengine\fontsize_big><font_size    Then tuiengine\fontsize_big   = load_font {#tui_font_big  ,font_name_big.s ,font_size_big}
;If tuiengine\fontsize_small><font_size2 Then tuiengine\fontsize_small = load_font {#tui_font_small,font_name_small.s,font_size_small}
;If tuiengine\fontsize_med><font_size    Then tuiengine\fontsize_med   = load_font {#tui_font_med  ,font_name.s ,font_size}

If font_name_big.s = "" OR font_size_big=0 Then font_name_big.s = font_name.s : font_size_big=font_size
If font_name_small.s = "" OR font_size_small=0 Then font_name_small.s = font_name.s : font_size_small=font_size

tuiengine\fontsize_big   = load_font {#tui_font_big  ,font_name_big.s ,font_size_big}
tuiengine\fontsize_small = load_font {#tui_font_small,font_name_small.s,font_size_small}
tuiengine\fontsize_med   = load_font {#tui_font_med  ,font_name.s ,font_size}
tuiengine\fontsize_fix   = load_font {#tui_font_fix  ,font_name_small.s ,font_size_small}

tuiengine\fontname_big   = font_name_big.s
tuiengine\fontname_med   = font_name_med.s
tuiengine\fontname_small = font_name_small.s
tuiengine\fontname_fix   = font_name_small.s

tuiengine\font_med       = #tui_font_med
tuiengine\font_small     = #tui_font_small
tuiengine\font_big       = #tui_font_big
tuiengine\font_fix       = #tui_font_fix
Use IntuiFont #tui_font_med

Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setspacetuning {button_increase.l,space_decrease.l}             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - button_increase.l    : ???                                                /
;/ - space_decrease.l    : ???                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setspacetuning{button_increase.l,space_decrease.l}
SHARED tuiengine
tuiengine\button_increase = button_increase
tuiengine\space_decrease = space_decrease
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setsmart {smart.w}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - smart.w    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setsmart {smart.w}
SHARED tuiengine
idcmp.l = #IDCMP_NEWSIZE|#IDCMP_GADGETDOWN|#IDCMP_MOUSEMOVE|#IDCMP_MOUSEBUTTONS|#IDCMP_GADGETUP|#IDCMP_INTUITICKS|#IDCMP_NEWPREFS
idcmp.l | #IDCMP_MENUPICK|#IDCMP_CLOSEWINDOW|#IDCMP_RAWKEY|#IDCMP_INACTIVEWINDOW|#IDCMP_ACTIVEWINDOW
CNIF #tui_use_intui
idcmp.l | #IDCMP_MENUVERIFY
CEND

If smart=False
  DefaultIDCMP idcmp|#IDCMP_REFRESHWINDOW
  tuiengine\wflgs = #WFLG_SIMPLE_REFRESH
Else
  DefaultIDCMP idcmp
  tuiengine\wflgs = #WFLG_SMART_REFRESH|#WFLG_NOCAREREFRESH
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setgadgethelp {stat.l}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - stat.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setgadgethelp{stat.l}
SHARED tuiengine
tuiengine\gadgethelp = stat.l
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = tui_init {@font_name.s,font_size.l,font_name_small.s,:: /
;/ font_size_small.l,font_big.s,font_size_big.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - font_name.s    : ???                                                      /
;/ - font_size.l    : ???                                                      /
;/ - font_name_small.s    : ???                                                /
;/ - font_size_small.l    : ???                                                /
;/ - font_big.s    : ???                                                       /
;/ - font_size_big.l    : ???                                                  /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w tui_init {@font_name.s,font_size.l,font_name_small.s,font_size_small.l,font_big.s,font_size_big.l}
SHARED tuipen(),tuiengine,led_bright(),led_dark()

tuipen(#tpen_white)           = screen_GetPen {255,255,255}
tuipen(#tpen_black)           = screen_GetPen {  0,  0,  0}
tuipen(#tpen_shine)           = screen_GetPen {230,230,230}
tuipen(#tpen_shadow)          = screen_GetPen {120,120,120}
tuipen(#tpen_darkshadow)      = screen_GetPen { 80, 80, 80}
tuipen(#tpen_bg)              = 0 ;screen_GetPen {180,180,180}
tuipen(#tpen_halfshine)       = screen_GetPen {210,210,210}
tuipen(#tpen_halfshadow)      = screen_GetPen {150,150,150}
CNIF #tui_use_audio
tuipen(#tpen_led_red)         = screen_GetPen {255,30,  0}
tuipen(#tpen_led_red_dark)    = screen_GetPen {100,  0,  0}
tuipen(#tpen_led_yellow)      = screen_GetPen {255,255,  0}
tuipen(#tpen_led_yellow_dark) = screen_GetPen { 87, 87,  0}
tuipen(#tpen_led_green)       = screen_GetPen {  0,255,  0}
tuipen(#tpen_led_green_dark)  = screen_GetPen {  0, 87,  0}
tuipen(#tpen_led_blue)        = screen_GetPen {  0,150,255}
tuipen(#tpen_led_blue_dark)   = screen_GetPen {  0, 50,110}
CEND
tuipen(#tpen_bubbleback)      = screen_GetPen {240,230,180}
tuipen(#tpen_highlight)       = screen_GetPen {180,100,120}


succ.w = tui_loadfonts {font_name.s,font_size.l,font_name_small.s,font_size_small.l,font_big.s,font_size_big.l}

tuiengine\bpm = 120
tuiengine\gadgethelp = True
tuiengine\space =  (tuiengine\fontsize_med -2) * 2 / 10
If tuiengine\space<2 Then tuiengine\space = 2
tuiengine\space = 2
tuiengine\bubbleobj_last = -1
tuiengine\bubbleobj      = -1
tuiengine\bubbleopen     = False
tuiengine\pattern        = -1
tuiengine\use_pattern    = False
tui_setsmart {False}

led_bright( 0) = tuipen(#tpen_led_blue)
led_bright( 1) = tuipen(#tpen_led_green)
led_bright( 2) = tuipen(#tpen_led_green)
led_bright( 3) = tuipen(#tpen_led_green)
led_bright( 4) = tuipen(#tpen_led_green)
led_bright( 5) = tuipen(#tpen_led_green)
led_bright( 6) = tuipen(#tpen_led_green)
led_bright( 7) = tuipen(#tpen_led_green)
led_bright( 8) = tuipen(#tpen_led_green)
led_bright( 9) = tuipen(#tpen_led_green)
led_bright(10) = tuipen(#tpen_led_green)
led_bright(11) = tuipen(#tpen_led_green)
led_bright(12) = tuipen(#tpen_led_yellow)
led_bright(13) = tuipen(#tpen_led_yellow)
led_bright(14) = tuipen(#tpen_led_yellow)
led_bright(15) = tuipen(#tpen_led_red)

led_dark( 0) = tuipen(#tpen_led_blue_dark)
led_dark( 1) = tuipen(#tpen_led_green_dark)
led_dark( 2) = tuipen(#tpen_led_green_dark)
led_dark( 3) = tuipen(#tpen_led_green_dark)
led_dark( 4) = tuipen(#tpen_led_green_dark)
led_dark( 5) = tuipen(#tpen_led_green_dark)
led_dark( 6) = tuipen(#tpen_led_green_dark)
led_dark( 7) = tuipen(#tpen_led_green_dark)
led_dark( 8) = tuipen(#tpen_led_green_dark)
led_dark( 9) = tuipen(#tpen_led_green_dark)
led_dark(10) = tuipen(#tpen_led_green_dark)
led_dark(11) = tuipen(#tpen_led_green_dark)
led_dark(12) = tuipen(#tpen_led_yellow_dark)
led_dark(13) = tuipen(#tpen_led_yellow_dark)
led_dark(14) = tuipen(#tpen_led_yellow_dark)
led_dark(15) = tuipen(#tpen_led_red_dark)
tuiengine\is_open = succ
tuiengine\owntask = FindTask_(0)
If succ Then win_InitDefaults{}
Function Return succ
End Function

NEWTYPE.penarray
pen.l[64]
End NEWTYPE

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = tui_clone_init {font_name.s,font_size.l,font_name_sma:: /
;/ ll.s,font_size_small.l,penarray_ptr.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - font_name.s    : ???                                                      /
;/ - font_size.l    : ???                                                      /
;/ - font_name_small.s    : ???                                                /
;/ - font_size_small.l    : ???                                                /
;/ - penarray_ptr.l    : ???                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w tui_clone_init {font_name.s,font_size.l,font_name_small.s,font_size_small.l,penarray_ptr.l}
SHARED tuipen(),tuiengine,led_bright(),led_dark()
If penarray_ptr
  *pens.penarray = penarray_ptr
  For n.l = 0 To 63
    tuipen(n)           = *pens\pen[n]
  Next
End If
font_name_big.s = font_name.s
font_size_big.l = font_size
succ.w = tui_loadfonts {font_name.s,font_size.l,font_name_small.s,font_size_small.l,font_big.s,font_size_big.l}

tuiengine\bpm = 120
tuiengine\gadgethelp = True
tuiengine\space =  (tuiengine\fontsize_med -2) * 2 / 10
If tuiengine\space<2 Then tuiengine\space = 2
tuiengine\space = 2
tuiengine\bubbleobj_last = -1
tuiengine\bubbleobj      = -1
tuiengine\bubbleopen     = False
tuiengine\pattern        = -1
tuiengine\use_pattern    = False
tui_setsmart {False}

led_bright( 0) = tuipen(#tpen_led_blue)
led_bright( 1) = tuipen(#tpen_led_green)
led_bright( 2) = tuipen(#tpen_led_green)
led_bright( 3) = tuipen(#tpen_led_green)
led_bright( 4) = tuipen(#tpen_led_green)
led_bright( 5) = tuipen(#tpen_led_green)
led_bright( 6) = tuipen(#tpen_led_green)
led_bright( 7) = tuipen(#tpen_led_green)
led_bright( 8) = tuipen(#tpen_led_green)
led_bright( 9) = tuipen(#tpen_led_green)
led_bright(10) = tuipen(#tpen_led_green)
led_bright(11) = tuipen(#tpen_led_green)
led_bright(12) = tuipen(#tpen_led_yellow)
led_bright(13) = tuipen(#tpen_led_yellow)
led_bright(14) = tuipen(#tpen_led_yellow)
led_bright(15) = tuipen(#tpen_led_red)

led_dark( 0) = tuipen(#tpen_led_blue_dark)
led_dark( 1) = tuipen(#tpen_led_green_dark)
led_dark( 2) = tuipen(#tpen_led_green_dark)
led_dark( 3) = tuipen(#tpen_led_green_dark)
led_dark( 4) = tuipen(#tpen_led_green_dark)
led_dark( 5) = tuipen(#tpen_led_green_dark)
led_dark( 6) = tuipen(#tpen_led_green_dark)
led_dark( 7) = tuipen(#tpen_led_green_dark)
led_dark( 8) = tuipen(#tpen_led_green_dark)
led_dark( 9) = tuipen(#tpen_led_green_dark)
led_dark(10) = tuipen(#tpen_led_green_dark)
led_dark(11) = tuipen(#tpen_led_green_dark)
led_dark(12) = tuipen(#tpen_led_yellow_dark)
led_dark(13) = tuipen(#tpen_led_yellow_dark)
led_dark(14) = tuipen(#tpen_led_yellow_dark)
led_dark(15) = tuipen(#tpen_led_red_dark)
tuiengine\is_open = succ
tuiengine\owntask = FindTask_(0)
If succ Then win_InitDefaults{}
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setspacing {value.l}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - value.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setspacing {value.l}
SHARED tuiengine
If value<1 Then value=1
tuiengine\space = value
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_sigflag_old {}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_sigflag_old {}
win.l = 0
sigflag.l = 0
While win_IsOpen {win}=False AND win<#max_windows:win+1:Wend
If win>=0 AND win<#max_windows
  *winx._Window = Peek.l(Addr Window(win))
  sigflag.l = 1 LSL *winx\UserPort\mp_SigBit
EndIf
Function Return sigflag
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_sigflag {}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST tui_sigflag {}
*blitzport.MsgPort=BlitzMsgPort
sigflag.l = 1 LSL *blitzport\mp_SigBit
Function Return sigflag
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_sigself {win.l}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST tui_sigself_old {win.l}
SHARED tuiengine
If win>=0 AND win<#max_windows
  *winx.Window = Peek.l(Addr Window(win))
  tuiengine\ownsigflag = 1 LSL *winx\UserPort\mp_SigBit
EndIf
Signal_ tuiengine\owntask,tuiengine\ownsigflag
End Statement

Statement FAST tui_sigself {}
SHARED tuiengine
*blitzport.MsgPort=BlitzMsgPort
tuiengine\ownsigflag = 1 LSL *blitzport\mp_SigBit
Signal_ tuiengine\owntask,tuiengine\ownsigflag
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setslidermode {delaymode.w,gainmode.w}                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - delaymode.w    : ???                                                      /
;/ - gainmode.w    : ???                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setslidermode {delaymode.w,gainmode.w}
SHARED tuidat(),tuiengine
tuiengine\slider_delaymode = delaymode
tuiengine\slider_gainmode  = gainmode
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setdeftags {deftags.l}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - deftags.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setdeftags {deftags.l}
SHARED tuidat(),tuiengine
tuiengine\deftags  = deftags
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: invbox {win.l,x1.l,y1.l,x2.l,y2.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - x1.l    : ???                                                             /
;/ - y1.l    : ???                                                             /
;/ - x2.l    : ???                                                             /
;/ - y2.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement invbox{win.l,x1.l,y1.l,x2.l,y2.l}
If x1><x2 AND y1><y2
;If x1>x2 Then Exchange x1,x2
;If y1>y2 Then Exchange y1,y2
rp.l = RastPort(win)
SetDrMd_ rp,-1
Move_ rp,x1,y1
Draw_ rp,x2,y1
Draw_ rp,x2,y2
Draw_ rp,x1,y2
Draw_ rp,x1,y1
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: drawgframe {x.l,y.l,xs.l,ys.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement drawgframe{x.l,y.l,xs.l,ys.l}
SHARED tuipen()
x2.l = x+xs-1
y2.l = y+ys-1
Wline x,y,x2,y,tuipen(#tpen_shadow)
Wline x,y,x,y2,tuipen(#tpen_shadow)
Wline x2,y,x2,y2,tuipen(#tpen_white)
Wline x,y2,x2,y2,tuipen(#tpen_white)
x+1
y+1
x2-1
y2-1
Wline x,y,x2,y,tuipen(#tpen_white)
Wline x,y,x,y2,tuipen(#tpen_white)
Wline x2,y,x2,y2,tuipen(#tpen_shadow)
Wline x,y2,x2,y2,tuipen(#tpen_shadow)
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: drawbframe {x.l,y.l,xs.l,ys.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement drawbframe{x.l,y.l,xs.l,ys.l}
SHARED tuipen()
x2.l = x+xs-1
y2.l = y+ys-1
Wline x,y,x2-1,y,tuipen(#tpen_white)
Wline x,y,x,y2-1,tuipen(#tpen_white)
Wline x2,y+1,x2,y2,tuipen(#tpen_black)
Wline x+1,y2,x2,y2,tuipen(#tpen_black)
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: drawiframe {x.l,y.l,xs.l,ys.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement drawiframe{x.l,y.l,xs.l,ys.l}
SHARED tuipen()
x2.l = x+xs-1
y2.l = y+ys-1
Wline x,y,x2-1,y,tuipen(#tpen_black)
Wline x,y,x,y2-1,tuipen(#tpen_black)
Wline x2,y+1,x2,y2,tuipen(#tpen_white)
Wline x+1,y2,x2,y2,tuipen(#tpen_white)
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: drawcolframe {x.l,y.l,xs.l,ys.l,col.l}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/ - col.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement drawcolframe{x.l,y.l,xs.l,ys.l,col.l}
SHARED tuipen()
x2.l = x+xs-1
y2.l = y+ys-1
Wline x,y,x2-1,y,col
Wline x,y,x,y2-1,col
Wline x2,y,x2,y2,col
Wline x,y2,x2,y2,col
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: drawhbox {win.l,tuiobj.l,col.l}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - col.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement drawhbox{win.l,tuiobj.l,col.l}
SHARED tuidat(),tuipen(),windat()
USEPATH tuidat(win,tuiobj)
If windat(win)\is_open
rp.l = RastPort(win)
SetAPen_ rp,col
SetDrMd_ rp,0
Move_ rp,\x-1,\y-1
Draw_ rp,\x+\xs,\y-1
Draw_ rp,\x+\xs,\ys+\y
Draw_ rp,\x-1  ,\ys+\y
Draw_ rp,\x-1  ,\y-1
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: drawbgbox {win.l,tuiobj.l}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement drawbgbox{win.l,tuiobj.l}
SHARED tuidat(),tuipen(),windat()
USEPATH tuidat(win,tuiobj)
If windat(win)\is_open
  rp.l = RastPort(win)
  EraseRect_ rp,\x-1  ,\y-1   ,\x+\xs,\y-1
  EraseRect_ rp,\x+\xs,\y-1   ,\x+\xs,\ys+\y
  EraseRect_ rp,\x-1  ,\ys+\y ,\x+\xs,\ys+\y
  EraseRect_ rp,\x-1  ,\y-1   ,\x-1  ,\ys+\y
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: drawibox {win.l,tuiobj.l}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement drawibox{win.l,tuiobj.l}
SHARED tuidat(),tuipen(),windat()
USEPATH tuidat(win,tuiobj)
If windat(win)\is_open
rp.l = RastPort(win)
SetDrMd_ rp,0
Move_ rp,\x-1,\y-1
SetAPen_ rp,tuipen(#tpen_shadow) :Draw_ rp,\x+\xs,\y-1
SetAPen_ rp,tuipen(#tpen_shine) :Draw_ rp,\x+\xs,\ys+\y
SetAPen_ rp,tuipen(#tpen_shine) :Draw_ rp,\x-1  ,\ys+\y
SetAPen_ rp,tuipen(#tpen_shadow) :Draw_ rp,\x-1  ,\y-1
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: drawbbox {win.l,tuiobj.l}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement drawbbox{win.l,tuiobj.l}
SHARED tuidat(),tuipen(),windat()
USEPATH tuidat(win,tuiobj)
If windat(win)\is_open
rp.l = RastPort(win)
Move_ rp,\x-1,\y-1
SetDrMd_ rp,0
SetAPen_ rp,tuipen(#tpen_shine) :Draw_ rp,\x+\xs,\y-1
SetAPen_ rp,tuipen(#tpen_shadow) :Draw_ rp,\x+\xs,\ys+\y
SetAPen_ rp,tuipen(#tpen_shadow) :Draw_ rp,\x-1  ,\ys+\y
SetAPen_ rp,tuipen(#tpen_shine) :Draw_ rp,\x-1  ,\y-1
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: drawhstripe {x.l,y.l,xs.l}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - xs.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement drawhstripe{x.l,y.l,xs.l}
SHARED tuipen()
If xs>=0
  x2.l = x+xs-1
  Wline x,y-1,x2,y-1,tuipen(#tpen_shadow)
  Wline x,y  ,x2,y  ,tuipen(#tpen_white)
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: drawvstripe {x.l,y.l,ys.l}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - ys.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement drawvstripe{x.l,y.l,ys.l}
SHARED tuipen()
If ys>=0
y2.l = y+ys-1
Wline x  ,y,x  ,y2,tuipen(#tpen_shadow)
Wline x+1,y,x+1,y2,tuipen(#tpen_white)
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: drawbox {x.l,y.l,xs.l,ys.l,col.l}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/ - col.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement drawbox {x.l,y.l,xs.l,ys.l,col.l}
If col>=0
  x2.l = x+xs-1
  y2.l = y+ys-1
  WBox x,y,x2,y2,col
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: drawbg {x.l,y.l,xs.l,ys.l}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement drawbg {x.l,y.l,xs.l,ys.l}
*win.Window = Peek.l (Addr Window (Used Window))
*rp.RastPort = RastPort(Used Window)
EraseRect_ *rp,x,y,x+xs-1,y+ys-1
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: drawbg2 {x1.l,y1.l,x2.l,y2.l}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - x1.l    : ???                                                             /
;/ - y1.l    : ???                                                             /
;/ - x2.l    : ???                                                             /
;/ - y2.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement drawbg2 {x1.l,y1.l,x2.l,y2.l}
*rp.RastPort = RastPort(Used Window)
EraseRect_ *rp,x1,y1,x2,y2
End Statement

CNIF #tui_use_image

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setpattern {image.l}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - image.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setpattern {image.l}
SHARED tuiengine
If image_IsUsed{image}
  tuiengine\pattern=image
  tuiengine\use_pattern=True
  tuiengine\bf   = ?tui_backfill
  tuiengine\bfbd = ?tui_backfill_borderless
Else
  tuiengine\bf   = 0
  tuiengine\bfbd = 0
  WindowBackFillHook 0
  tuiengine\use_pattern = False
End If
End Statement



RunErrsOff
CNIF #tui_patternwrap
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: image_blitbackfill {image.l,x.l,y.l,x2.l,y2.l,xoffset.l,yoffset.l:: /
;/ ,destbitmap_ptr.l}                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - image.l    : ???                                                          /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - x2.l    : ???                                                             /
;/ - y2.l    : ???                                                             /
;/ - xoffset.l    : ???                                                        /
;/ - yoffset.l    : ???                                                        /
;/ - destbitmap_ptr.l    : ???                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement image_blitbackfill {image.l,x.l,y.l,x2.l,y2.l,xoffset.l,yoffset.l,destbitmap_ptr.l}
SHARED imagedat()
USEPATH imagedat(image)
If \bitmap_ptr=False Then image_InitBitMap {image}
If \bitmap_ptr><False AND destbitmap_ptr
  dx.l  = x
  px.l  = xoffset MOD \img_width
  pxs.l = \img_width-px
  x2+1
  y2+1
  While dx<x2
    If dx+pxs>x2 Then pxs = x2-dx
    dy.l  = y
    py.l  = yoffset MOD \img_height
    pys.l = \img_height-py

    While dy<y2
      If dy+pys>y2 Then pys = y2-dy
      BltBitMap_ \bitmap_ptr,px,py,destbitmap_ptr,dx,dy,pxs,pys,$c0,$ff,0
      dy+pys
      pys = \img_height
      py = 0
    Wend
    dx+pxs
    pxs = \img_width
    px = 0
  Wend
End If
End Statement
CELSE
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: image_blitbackfill {image.l,x.l,y.l,x2.l,y2.l,xoffset.l,yoffset.l:: /
;/ ,destbitmap_ptr.l}                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement image_blitbackfill {image.l,x.l,y.l,x2.l,y2.l,xoffset.l,yoffset.l,destbitmap_ptr.l}
SHARED imagedat()
USEPATH imagedat(image)
If \bitmap_ptr=False Then image_InitBitMap {image}
If \bitmap_ptr><False AND destbitmap_ptr
  dx.l  = x
  px.l  = xoffset MOD \img_width
  pxs.l = \img_width-px
  x2+1
  y2+1

  ymax.l = y2-yoffset+\img_height
  If y2>ymax Then y2=ymax

  ;If yoffset>\img_height Then y2=y2+\img_height-yoffset
  If yoffset<\img_height
  While dx<x2
    If dx+pxs>x2 Then pxs = x2-dx
    dy.l  = y
    py.l  = yoffset MOD \img_height
    pys.l = \img_height-py

  ;  While dy<y2
    If dy<y2
      If dy+pys>y2 Then pys = y2-dy
      BltBitMap_ \bitmap_ptr,px,py,destbitmap_ptr,dx,dy,pxs,pys,$c0,$ff,0
    End If
  ;  Wend
    dx+pxs
    pxs = \img_width
    px = 0
  Wend
  End If
End If
End Statement
CEND

DEFTYPE.w _bf_x1,_bf_y1,_bf_x2,_bf_y2
DEFTYPE.l _bf_layer_ptr,_bf_rp_ptr,_bf_offx,_bf_offy
BRA tui_skipbf

.tui_backfill_borderless
!basica7
MOVE.l a2,_bf_rp_ptr@(a5)
MOVE.l  0(a1),_bf_layer_ptr@(a5)
MOVE.w  4(a1),_bf_x1@(a5)
MOVE.w  6(a1),_bf_y1@(a5)
MOVE.w  8(a1),_bf_x2@(a5)
MOVE.w 10(a1),_bf_y2@(a5)
MOVE.l 12(a1),_bf_offx@(a5)
MOVE.l 16(a1),_bf_offy@(a5)
*_bf_layer.Layer = _bf_layer_ptr.l
*_bf_rp.RastPort = _bf_rp_ptr.l
If image_IsUsed{tuiengine\pattern}
  image_blitbackfill {tuiengine\pattern,_bf_x1,_bf_y1,_bf_x2,_bf_y2,_bf_offx,_bf_offy,*_bf_rp\BitMap}
End If
!asma7
RTS

.tui_backfill
!basica7
MOVE.l a2,_bf_rp_ptr@(a5)
MOVE.l  0(a1),_bf_layer_ptr@(a5)
MOVE.w  4(a1),_bf_x1@(a5)
MOVE.w  6(a1),_bf_y1@(a5)
MOVE.w  8(a1),_bf_x2@(a5)
MOVE.w 10(a1),_bf_y2@(a5)
MOVE.l 12(a1),_bf_offx@(a5)
MOVE.l 16(a1),_bf_offy@(a5)
*_bf_layer.Layer = _bf_layer_ptr.l
*_bf_rp.RastPort = _bf_rp_ptr.l
If image_IsUsed{tuiengine\pattern}
  image_blitbackfill {tuiengine\pattern,_bf_x1,_bf_y1,_bf_x2,_bf_y2,_bf_offx,_bf_offy-winengine\def_wtopoff,*_bf_rp\BitMap}
End If
!asma7
RTS

tui_skipbf:
LastRunErrsMode

CEND


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setbfhook {*bf.Hook,*bfbd.Hook}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *bf.Hook    : ???                                                         /
;/ - *bfbd.Hook    : ???                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setbfhook {*bf.Hook,*bfbd.Hook}
SHARED tuiengine
tuiengine\bf   = *bf
tuiengine\bfbd = *bfbd
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_install_bfhook {win.l}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_install_bfhook {win.l}
SHARED tuiengine,windat()
If windat(win)\flags&#WFLG_BORDERLESS
  WindowBackFillHook  tuiengine\bfbd,0
Else
  WindowBackFillHook  tuiengine\bf,1
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = tui_stringcrop {win.l,string.s,pixlen.l}                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - string.s    : ???                                                         /
;/ - pixlen.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s tui_stringcrop {win.l,string.s,pixlen.l}
rp.l = RastPort(win)
clen.l = Peek.l(&string.s-4)
a.s = "."
If pixlen>1
  If TextLength_(rp,&string.s,clen)>pixlen
    pixlen - TextLength_(rp,&a.s,1)
    clen-1
    While TextLength_(rp,&string.s,clen)>pixlen AND clen>0
      clen-1
    Wend
    string.s = Left$(string.s,clen)+"."
  End If
Else
  string.s = ""
End If
Function Return string.s
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuidat_abs2rel_x {win.l,view.l,x.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - view.l    : ???                                                           /
;/ - x.l    : ???                                                              /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuidat_abs2rel_x {win.l,view.l,x.l}
SHARED tuidat(),tuiengine
If tuidat(win,view)\typ = #tobj_view
;  If tuidat(win,view)\view_xo><0 Then error {"XO ist nicht 0 !!!!"}
  x = (x - tuidat(win,view)\x + tuidat(win,view)\view_xo * tuidat(win,view)\view_xf) / tuidat(win,view)\view_xf
Else
  error {"INTERNAL: abs2rel() with no view object !"}
End If
Function Return x
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuidat_abs2rel_y {win.l,view.l,y.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - view.l    : ???                                                           /
;/ - y.l    : ???                                                              /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuidat_abs2rel_y {win.l,view.l,y.l}
SHARED tuidat(),tuiengine
If tuidat(win,view)\typ = #tobj_view
  y = (y - tuidat(win,view)\y + tuidat(win,view)\view_yo * tuidat(win,view)\view_yf) / tuidat(win,view)\view_yf
Else
  error {"INTERNAL: abs2rel() with no view object !"}
End If
Function Return y
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_vanillakey_notify {key.w,notify.l}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - key.w    : ???                                                            /
;/ - notify.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_vanillakey_notify {key.w,notify.l}
SHARED acwin.l,vkeynotify()
vkeynotify(acwin,key) = notify
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_rawkey_notify {key.w,notify.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - key.w    : ???                                                            /
;/ - notify.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_rawkey_notify {key.w,notify.l}
SHARED acwin.l,rkeynotify()
rkeynotify(acwin,key) = notify
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_intuiticknotify {notify.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - notify.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_intuiticknotify {notify.l}
SHARED acwin.l,winnotify()
winnotify(acwin)\on_intuiticks = notify
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_activenotify {notify.l}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - notify.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_activenotify {notify.l}
SHARED acwin.l,winnotify()
winnotify(acwin)\on_active = notify
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_inactivenotify {notify.l}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - notify.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_inactivenotify {notify.l}
SHARED acwin.l,winnotify()
winnotify(acwin)\on_inactive = notify
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_prefsnotify {notify.l}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - notify.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_prefsnotify {notify.l}
SHARED acwin.l,winnotify()
winnotify(acwin)\on_prefs = notify
End Statement


NEWTYPE.menudat
notify.l
copy_ptr.l
End NEWTYPE

CNIF #tui_use_menu
#menu_flag_checkmark =   $1
#menu_flag_toggle    =   $8
#menu_flag_checked   = $100
#menu_flag_enabled   =  $10

Dim menudat.menudat(#max_windows-1,#max_menus-1,#max_menuitems-1,#max_menusubs-1)


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_initmenu {}                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_initmenu {}
SHARED tuiengine
tuiengine\menu_title  = -1
tuiengine\menu_isused = True
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_menucheck {win.l,menu_title.l,menu_item.l}          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - menu_title.l    : ???                                                     /
;/ - menu_item.l    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_menucheck {win.l,menu_title.l,menu_item.l}
SHARED tuiengine,menudat()
value.l = GTMenuChecked (win,menu_title,menu_item)
Function Return value
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_menucheck_sub {win.l,menu_title.l,menu_item.l,men:: /
;/ u_sub.l}                                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - menu_title.l    : ???                                                     /
;/ - menu_item.l    : ???                                                      /
;/ - menu_sub.l    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_menucheck_sub {win.l,menu_title.l,menu_item.l,menu_sub.l}
SHARED tuiengine,menudat()
value.l = GTMenuChecked (win,menu_title,menu_item,menu_sub)
Function Return value
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_menuupdate_sub {win.l,menu_title.l,menu_item.l,menu_sub.l,@fl:: /
;/ ip.l}                                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - menu_title.l    : ???                                                     /
;/ - menu_item.l    : ???                                                      /
;/ - menu_sub.l    : ???                                                       /
;/ - flip.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_menuupdate_sub {win.l,menu_title.l,menu_item.l,menu_sub.l,@flip.l}
SHARED menudat()
If menudat(win,menu_title,menu_item,menu_sub)\copy_ptr
  value.b = Peek.b(menudat(win,menu_title,menu_item,menu_sub)\copy_ptr)
  If flip
    If value Then value=False:Else value=True
    Poke.b menudat(win,menu_title,menu_item,menu_sub)\copy_ptr,value
  End If
  GTSetMenuChecked win,menu_title,menu_item,menu_sub,value
End If

End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_menuupdate {win.l,menu_title.l,menu_item.l,@flip.l}             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - menu_title.l    : ???                                                     /
;/ - menu_item.l    : ???                                                      /
;/ - flip.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_menuupdate {win.l,menu_title.l,menu_item.l,@flip.l}
SHARED menudat()
If menudat(win,menu_title,menu_item,0)\copy_ptr
  value.b = Peek.b(menudat(win,menu_title,menu_item,0)\copy_ptr)
  If flip
    If value Then value=False:Else value=True
    Poke.b menudat(win,menu_title,menu_item,0)\copy_ptr,value
  End If
  GTSetMenuChecked win,menu_title,menu_item,value
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_menutitle {title.s}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - title.s    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_menutitle {title.s}
SHARED acwin.l,tuiengine
tuiengine\menu_item = -1
tuiengine\menu_title + 1
GTMenuTitle acwin,tuiengine\menu_title,title.s
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_menuitem {text.s,shortcut.s,flags.w,notify.l,exclude.l}         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - text.s    : ???                                                           /
;/ - shortcut.s    : ???                                                       /
;/ - flags.w    : ???                                                          /
;/ - notify.l    : ???                                                         /
;/ - exclude.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_menuitem {text.s,shortcut.s,flags.w,notify.l,exclude.l}
SHARED acwin,tuiengine,menudat()
tuiengine\menu_item + 1
tuiengine\menu_sub  = -1
;If shortcut.s><""
If exclude
  GTMenuItem acwin,flags,tuiengine\menu_title,tuiengine\menu_item,text.s,shortcut.s,On
Else
  GTMenuItem acwin,flags,tuiengine\menu_title,tuiengine\menu_item,text.s,shortcut.s
End If

If shortcut.s><""
  a.s = LCase$(shortcut.s)
  key.l = Peek.b(&a.s) - @"a" +1
  If key>=1 AND key<=26
    tui_vanillakey_notify {key,notify}
  End If
End If
;Else
;  GTMenuItem acwin,flags,tuiengine\menu_title,tuiengine\menu_item,text.s
;End If
menudat(acwin,tuiengine\menu_title,tuiengine\menu_item,0)\notify = notify
menudat(acwin,tuiengine\menu_title,tuiengine\menu_item,0)\copy_ptr = 0
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_menubar {}                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_menubar {}
SHARED acwin,tuiengine,menudat()
tuiengine\menu_item + 1
tuiengine\menu_sub  = -1
GTMenuItem acwin,0,tuiengine\menu_title,tuiengine\menu_item
menudat(acwin,tuiengine\menu_title,tuiengine\menu_item,0)\notify = -1
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_menusubitem {text.s,shortcut.s,flags.w,notify.l,exclude.l}      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - text.s    : ???                                                           /
;/ - shortcut.s    : ???                                                       /
;/ - flags.w    : ???                                                          /
;/ - notify.l    : ???                                                         /
;/ - exclude.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_menusubitem {text.s,shortcut.s,flags.w,notify.l,exclude.l}
SHARED acwin,tuiengine,menudat()
tuiengine\menu_sub  + 1
;If shortcut.s><""
If exclude
  GTSubItem acwin,flags,tuiengine\menu_title,tuiengine\menu_item,tuiengine\menu_sub,text.s,shortcut.s,On
Else
  GTSubItem acwin,flags,tuiengine\menu_title,tuiengine\menu_item,tuiengine\menu_sub,text.s,shortcut.s
End If
If shortcut.s><""
  a.s = LCase$(shortcut.s)
  key.l = Peek.b(&a.s) - @"a" +1
  If key>=1 AND key<=26
    tui_vanillakey_notify {key,notify}
  End If
End If
;Else
;  GTSubItem acwin,flags,tuiengine\menu_title,tuiengine\menu_item,tuiengine\menu_sub,text.s
;End If
menudat(acwin,tuiengine\menu_title,tuiengine\menu_item,tuiengine\menu_sub)\notify = notify
menudat(acwin,tuiengine\menu_title,tuiengine\menu_item,tuiengine\menu_sub)\copy_ptr    = 0
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_menusubbar {}                                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_menusubbar {}
SHARED acwin,tuiengine,menudat()
tuiengine\menu_sub  + 1
GTSubItem acwin,0,tuiengine\menu_title,tuiengine\menu_item,tuiengine\menu_sub
menudat(acwin,tuiengine\menu_title,tuiengine\menu_item,tuiengine\menu_sub)\notify = -1
End Statement




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_menutoggle_sub {win.l,menu_title.l,menu_item.l,menu_sub.l,boo:: /
;/ l.w}                                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - menu_title.l    : ???                                                     /
;/ - menu_item.l    : ???                                                      /
;/ - menu_sub.l    : ???                                                       /
;/ - bool.w    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_menutoggle_sub {win.l,menu_title.l,menu_item.l,menu_sub.l,bool.w}
SHARED acwin,tuiengine,menudat()
If menudat(acwin,tuiengine\menu_title,tuiengine\menu_item,menu_sub)\notify
  GTMenuState win,menu_title,menu_item,menu_sub,bool
Else
  error {"Menuitem is not initialisized ! - menudisable()"}
EndIf
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_menutoggle_item {win.l,menu_title.l,menu_item.l,bool.w}         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - menu_title.l    : ???                                                     /
;/ - menu_item.l    : ???                                                      /
;/ - bool.w    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_menutoggle_item {win.l,menu_title.l,menu_item.l,bool.w}
SHARED acwin,tuiengine,menudat()
If menudat(acwin,tuiengine\menu_title,tuiengine\menu_item,0)\notify
  GTMenuState win,menu_title,menu_item,bool
Else
  error {"Menuitem is not initialisized ! - menudisable()"}
EndIf
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_menutoggle_title {win.l,menu_title.l,bool.w}                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - menu_title.l    : ???                                                     /
;/ - bool.w    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_menutoggle_title {win.l,menu_title.l,bool.w}
SHARED acwin,tuiengine,menudat()
GTMenuState win,menu_title,bool
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_menutoggle {win.l,bool.w}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - bool.w    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_menutoggle {win.l,bool.w}
SHARED acwin,tuiengine,menudat()
GTMenuState win,bool
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_menusetcheck_sub {win.l,menu_title.l,menu_item.l,menu_sub.l,v:: /
;/ alue.l}                                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - menu_title.l    : ???                                                     /
;/ - menu_item.l    : ???                                                      /
;/ - menu_sub.l    : ???                                                       /
;/ - value.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_menusetcheck_sub {win.l,menu_title.l,menu_item.l,menu_sub.l,value.l}
SHARED tuiengine,menudat()
GTSetMenuChecked win,menu_title,menu_item,menu_sub,value
If menudat(win,menu_title,menu_item,menu_sub)\copy_ptr
  Poke.b menudat(win,menu_title,menu_item,menu_sub)\copy_ptr,value
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_menusetcheck {win.l,menu_title.l,menu_item.l,value.l}           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - menu_title.l    : ???                                                     /
;/ - menu_item.l    : ???                                                      /
;/ - value.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_menusetcheck {win.l,menu_title.l,menu_item.l,value.l}
SHARED tuiengine,menudat()
GTSetMenuChecked win,menu_title,menu_item,value
If menudat(win,menu_title,menu_item,0)\copy_ptr
  Poke.b menudat(win,menu_title,menu_item,0)\copy_ptr,value
End If
End Statement




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_menumirror {ptr.l}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - ptr.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_menumirror {ptr.l}
SHARED acwin,tuiengine,menudat()
If tuiengine\menu_sub<0
  menudat(acwin,tuiengine\menu_title,tuiengine\menu_item,0)\copy_ptr = ptr
  value.b = Peek.b(menudat(acwin,tuiengine\menu_title,tuiengine\menu_item,0)\copy_ptr)
 ; GTSetMenuChecked acwin,tuiengine\menu_title,tuiengine\menu_item,value
 ; GTSetMenuCheck doe not work until it is attached !
Else
  menudat(acwin,tuiengine\menu_title,tuiengine\menu_item,tuiengine\menu_sub)\copy_ptr = ptr
  value.b = Peek.b(menudat(acwin,tuiengine\menu_title,tuiengine\menu_item,tuiengine\menu_sub)\copy_ptr)
 ; GTSetMenuChecked acwin,tuiengine\menu_title,tuiengine\menu_item,tuiengine\menu_sub,value
End If
End Statement
CEND

USEPATH tuidat(win,tuiobj)


CNIF #tui_use_audio
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_levelmeter_refresh {win.l,tuiobj.l,left.l,right.l}              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - left.l    : ???                                                           /
;/ - right.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_levelmeter_refresh {win.l,tuiobj.l,left.l,right.l}
SHARED tuiengine,tuidat(),tuipen(),led_dark(),led_bright()
If \visible

;oldleft.l = left

left  = Sqr(Int((left +1)/2)) / 8 -1
right = Sqr(Int((right+1)/2)) / 8 -1

;If left<>-1 Then error {"Amithlon bug !!! "+Str$(oldleft)+"-1 != "+Str$(left)}

If left <\minvalue Then left  = \minvalue-1
If right<\maxvalue Then right = \maxvalue-1



;If left+right>=-2

Use Window win
leftx.l  = \x +  2 + tuiengine\space
y.l      = \y +  2 + tuiengine\space
rightx.l = leftx + 10 + 3

If left>\minvalue
  For n.l = \minvalue To left
    If n>=0
      yd.l = y + 15*5 - n*5
      WBox leftx,yd,leftx+9,yd+3,led_bright(n)
    End If
  Next
Else
  If left<\minvalue
    yd.l = y + 15*5 - \minvalue*5
    WBox leftx,yd,leftx+9,yd+3,led_dark(\minvalue)
  End If
End If

If right>\maxvalue
  For n.l = \maxvalue To right
    If n>=0
      yd.l = y + 15*5 - n*5
      WBox rightx,yd,rightx+9,yd+3,led_bright(n)
    End If
  Next
Else
  If right<\maxvalue
    yd.l = y + 15*5 - \maxvalue*5
    WBox rightx,yd,rightx+9,yd+3,led_dark(\maxvalue)
  End If
End If
\minvalue = left
\maxvalue = right
;End If
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_levelmeter_draw {win.l,tuiobj.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_levelmeter_draw {win.l,tuiobj.l}
SHARED tuiengine,tuidat(),tuipen(),led_dark(),led_bright()
If \visible
Use Window win
leftx.l  = \x +  2 + tuiengine\space
y.l      = \y +  2 + tuiengine\space
rightx.l = leftx + 10 + 3
drawbox {\x,\y,\xs,\ys,tuipen(#tpen_black)}
For n.l = 0 To 15
  yd.l = y + 15*5 - n*5
  If n>=\minvalue
    WBox leftx,yd,leftx+9,yd+3,led_dark(n)
  Else
    WBox leftx,yd,leftx+9,yd+3,led_bright(n)
  End If
  If n>=\maxvalue
    WBox rightx,yd,rightx+9,yd+3,led_dark(n)
  Else
    WBox rightx,yd,rightx+9,yd+3,led_bright(n)
  End If
Next
End If
End Statement
CEND


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_print {win.l,x.l,y.l,xs.l,text.s,tuitags.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - xs.l    : ???                                                             /
;/ - text.s    : ???                                                           /
;/ - tuitags.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_print {win.l,x.l,y.l,xs.l,text.s,tuitags.l}
SHARED tuiengine,tuipen()
Use Window win
x2.l = x-WLeftOff
font.l = #tui_font_med : fontheight.l = tuiengine\fontsize_med
If (tuitags AND #tui_tag_small) Then font=#tui_font_small : fontheight.l = tuiengine\fontsize_small
If (tuitags AND #tui_tag_big  ) Then font=#tui_font_big   : fontheight.l = tuiengine\fontsize_big

If (tuitags AND #tui_tag_right   ) Then x2 = Max(x2,x2+xs -textlen{text.s,font,win}    )
If (tuitags AND #tui_tag_centered) Then x2 = Max(x2,x2+(xs-textlen{text.s,font,win})/2 )
Use Window win

If tuitags & #tui_tag_nframe Then drawbg {x,y,xs,fontheight}


If tuitags AND #tui_tag_hstripe
  tl.l = textlen{text.s,font,win}
  If (tuitags AND #tui_tag_right)    Then drawhstripe {x,y+fontheight/2,xs-tl-2}
  If (tuitags AND #tui_tag_left )    Then drawhstripe {x+tl+2,y+fontheight/2,xs-tl-2}
  If (tuitags AND #tui_tag_centered)
    drawhstripe {x,y+fontheight/2,(xs-tl)/2-2}
    drawhstripe {x+(xs+tl)/2+2,y+fontheight/2,(xs-tl)/2-2}
  End If
End If


WJam 0
WindowFont font
If (tuitags AND #tui_tag_disabled) = 0
  If (tuitags AND #tui_tag_highlight) = 0
    If (tuitags AND #tui_tag_alert) = 0
      If (tuitags AND #tui_tag_bright) = 0
        color.l = tuipen(#tpen_black)
      Else
        color   = tuipen(#tpen_darkshadow)
      End If
    Else
      color.l = tuipen(#tpen_led_red)
    End If
  Else
    color.l = tuipen(#tpen_white)
  End If

  WColour color
  WLocate x2,y-WTopOff
  NPrint tui_stringcrop {win,text.s,xs}
  If (tuitags AND #tui_tag_bold)
    WLocate x2+1,y-WTopOff
    NPrint tui_stringcrop {win,text.s,xs}
  End If

Else
  WColour tuipen(#tpen_shine)
  WLocate x2+1,y+1-WTopOff
  NPrint tui_stringcrop {win,text.s,xs}
  WColour tuipen(#tpen_shadow)
  WLocate x2,y-WTopOff
  NPrint tui_stringcrop {win,text.s,xs}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_drawcolumn {win.l,tuiobj.l,a.s,x.l,y.l}                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - a.s    : ???                                                              /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_drawcolumn {win.l,tuiobj.l,a.s,x.l,y.l}
SHARED tuiengine,tuipen(),tuidat()
USEPATH tuidat(win,tuiobj)
row.l = 0
pos.l = 1
ypos.l = y + tuiengine\space
  While \child[row]>=0 AND row<#max_childs AND pos>0
    nextpos.l = Instr(a.s,">=",pos)
    If nextpos>0
      b.s = Mid$(a.s,pos,nextpos-pos)
      pos.l = nextpos+2
    Else
      b.s = Right$(a.s,Peek.l(&a.s-4)-pos+1)
      pos     = -1
      nextpos = -1
    End If

    If row=#max_childs-1
      rowlength.l = \xs - \child[row]
    Else
      If \child[row+1]=-1
        rowlength.l = \xs - \child[row]
      Else
        rowlength.l = Min(\xs - \child[row],\child[row+1]-\child[row]-tuiengine\space-2)
      End If
    End If
    rowlength-tuiengine\space
    If rowlength>0
      ttags.l = \ttags|\moduloxs[row]
      ttags | #tui_tag_small |#tui_tag_bright  - #tui_tag_small - #tui_tag_bright
      If ttags&#tui_tag_small Then yadd.l = (tuiengine\fontsize_med-tuiengine\fontsize_small+1)/2:Else yadd=0
      tui_print {win,\x+\child[row],ypos+yadd,rowlength,b.s,ttags}
    Else
      pos=-1
    End If
    row+1
  Wend

row.l = 1
While \child[row]>=0 AND row<#max_childs

  x.l = \x + \child[row]-2-tuiengine\space
  If x<\x+\xs
    If \moduloxs[row]&#tui_tag_nframe = False
      Wline x,\y,x,\y+tuiengine\space + tuiengine\fontsize_med + 2 ,tuipen(#tpen_darkshadow)
      Wline x+1,\y,x+1,\y+ tuiengine\space + tuiengine\fontsize_med + 2 ,tuipen(#tpen_white)
    End If
  End If
  row+1
Wend
End Statement

Function.l tui_listview_getcolwidth{win.l,tuiobj.l,column.l}
  SHARED tuidat(),tuiengine
  rowlength.l = 0
  If \visible
    If column=#max_childs-1
      rowlength.l = \xs - \child[column]
    Else
      If \child[column+1]=-1
        rowlength.l = \xs - \child[column]
      Else
        rowlength.l = Min(\xs - \child[column],\child[column+1]-\child[column]-tuiengine\space-2)
      End If
    End If
    rowlength-tuiengine\space
  End If
  Function Return rowlength
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_draw_content {win.l,tuiobj.l,pos1.l,pos2.l,@norefres:: /
;/ h.l}                                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - pos1.l    : ???                                                           /
;/ - pos2.l    : ???                                                           /
;/ - norefresh.l    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_draw_content {win.l,tuiobj.l,pos1.l,pos2.l,@norefresh.l}
SHARED tuidat(),tuiengine,tuipen()
If \visible
Use Window win
WJam 0
If pos1<\modulo Then pos1=\modulo
If pos2<0 OR pos2>\modulo+\minvalue-1 Then pos2=\modulo+\minvalue-1

vpos1.l = pos1-\modulo
vpos2.l = pos2-\modulo

stepsize.l = tuiengine\space + tuiengine\fontsize_med

If pos1<=pos2 AND vpos1>=0
If \frametitle><""
  ypos.l = tuiengine\space + \y + tuiengine\space + tuiengine\fontsize_med + 2
Else
  ypos.l = tuiengine\space + \y
End If

ypos + vpos1 * stepsize

If norefresh=False Then drawbox {\x,ypos-1,\xs,(vpos2-vpos1+1)*stepsize,tuipen(#tpen_halfshadow)} ;: error {"drawbox "}
row.l=1
While \child[row]>=0 AND row<#max_childs
  x.l = \x + \child[row]-2-tuiengine\space
  If x<\x+\xs
    If \moduloxs[row]&#tui_tag_nframe = False
      If \moduloxs[row]&#tui_tag_bframe
        Wline x+1,ypos-1,x+1,\y+\ys-1,tuipen(#tpen_darkshadow)
        Wline x,ypos-1,x,\y+\ys-1,tuipen(#tpen_halfshine)
      Else
        Wline x,ypos-1,x,\y+\ys-1,tuipen(#tpen_darkshadow)
        Wline x+1,ypos-1,x+1,\y+\ys-1,tuipen(#tpen_halfshine)
      End If
    End If
  End If
  row+1
Wend

*lvitem.tui_lvitem = \dat1
n.l   = 0
While *lvitem><0 AND n<pos1
  *lvitem = *lvitem\lv_nextitem : n+1
Wend

While *lvitem><0 AND n<=pos2
  a.s = Peek.s(*lvitem+SizeOf.tui_lvitem)
  row.l = 0
  pos.l = 1

  While \child[row]>=0 AND row<#max_childs AND pos>0
    nextpos.l = Instr(a.s,">=",pos)
    If nextpos>0
      b.s = Mid$(a.s,pos,nextpos-pos)
      pos.l = nextpos+2
    Else
      b.s = Right$(a.s,Peek.l(&a.s-4)-pos+1)
      pos     = -1
      nextpos = -1
    End If
    celltags.l = 0
    succ.l = True
    While Peek.b(&b.s) = @"%" AND succ=True
      tag.w = Peek.w(&b.s)
      Select tag
        Case @"%d"
          celltags.l | #tui_tag_disabled  : b.s = Right$(b.s,FLen(b.s)-2)
        Case @"%b"
          celltags.l | #tui_tag_bold      : b.s = Right$(b.s,FLen(b.s)-2)
        Case @"%g"
          celltags.l | #tui_tag_bright    : b.s = Right$(b.s,FLen(b.s)-2)
        Case @"%h"
          celltags.l | #tui_tag_highlight  : b.s = Right$(b.s,FLen(b.s)-2)
        Case @"%a"
          celltags.l | #tui_tag_alert     : b.s = Right$(b.s,FLen(b.s)-2)
        Case @"%s"
          celltags.l | #tui_tag_small     : b.s = Right$(b.s,FLen(b.s)-2)
        Default
          succ=False
      End Select
    Wend

    If row=#max_childs-1
      rowlength.l = \xs - \child[row]
    Else
      If \child[row+1]=-1
        rowlength.l = \xs - \child[row]
      Else
        rowlength.l = Min(\xs - \child[row],\child[row+1]-\child[row]-tuiengine\space-2)
      End If
    End If
    rowlength-tuiengine\space
    If rowlength>0
      If n=\value OR *lvitem\li_status = -1
        drawbox {\x+\child[row]-tuiengine\space,ypos-tuiengine\space/2,rowlength+tuiengine\space*2,tuiengine\space+tuiengine\fontsize_med,tuipen(#tpen_highlight)}
        ttags.l = \ttags|#tui_tag_highlight|*lvitem\li_tags|\moduloxs[row]
        If ttags&#tui_tag_small Then yadd.l = (tuiengine\fontsize_med-tuiengine\fontsize_small+1)/2:Else yadd=0
        tui_print {win,\x+\child[row],ypos+yadd,rowlength,b.s,ttags|celltags}

        ;If n=\value AND *lvitem\li_status = -1
        ;  tui_print {win,\x+\child[row]+1,ypos+yadd,rowlength,b.s,ttags|celltags}
        ;End If
      Else
       ; drawbox {\x+\child[row]-tuiengine\space,ypos-tuiengine\space/2,rowlength+tuiengine\space*2,tuiengine\space+tuiengine\fontsize_med,tuipen(#tpen_halfshadow)}

        ttags.l = \ttags|*lvitem\li_tags|\moduloxs[row]
        If ttags&#tui_tag_bright
          drawbox {\x+\child[row]-tuiengine\space,ypos-tuiengine\space/2,rowlength+tuiengine\space*2,tuiengine\space+tuiengine\fontsize_med,tuipen(#tpen_bg)}
        End If
        If ttags&#tui_tag_small Then yadd.l = (tuiengine\fontsize_med-tuiengine\fontsize_small)/2+1:Else yadd=0
        tui_print {win,\x+\child[row],ypos+yadd,rowlength,b.s,ttags|celltags}
      End If
    Else
      pos=-1
    End If
    row+1
  Wend
  *lvitem = *lvitem\lv_nextitem
  n+1
  ypos.l + stepsize
Wend
Else
  ;error {"Notinh to redraw: "+Str$(pos1)+" "+Str$(pos2)}
End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_draw {win.l,tuiobj.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_draw {win.l,tuiobj.l}
SHARED tuidat(),tuiengine,tuipen()
If \visible
Use Window win
WJam 0
If \frametitle><""
  yoff.l = tuiengine\space*2+tuiengine\fontsize_med+1
  drawbox {\x,\y+yoff,\xs,\ys-yoff,tuipen(#tpen_halfshadow)}
  drawbox {\x,\y,\xs,yoff-2,tuipen(#tpen_halfshine)}
  tui_listview_drawcolumn {win,tuiobj,\frametitle,\x,\y}
  Wline \x,\y+tuiengine\space+tuiengine\fontsize_med+1,\x+\xs-1,\y+tuiengine\space+tuiengine\fontsize_med+1,tuipen(#tpen_darkshadow)
  Wline \x,\y+tuiengine\space+tuiengine\fontsize_med+2,\x+\xs-1,\y+tuiengine\space+tuiengine\fontsize_med+2,tuipen(#tpen_halfshine)
Else
  drawbox {\x,\y,\xs,\ys,tuipen(#tpen_halfshadow)}
End If
tui_listview_draw_content {win,tuiobj,-1,-1}
End If
End Statement





;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_scrollto {win.l,tuiobj.l,newpos.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - newpos.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_scrollto {win.l,tuiobj.l,newpos.l}
SHARED tuidat(),tuiengine,tuipen()
If newpos>\maxvalue-\minvalue Then newpos = \maxvalue-\minvalue
If newpos<0 Then newpos=0
If \visible
  Use Window win
  diff.l = newpos - \modulo
  If diff><0
    stepsize.l = tuiengine\space + tuiengine\fontsize_med
    If diff>=\minvalue OR (0-diff)>=\minvalue
      \modulo = newpos
      tui_listview_draw_content {win,tuiobj,-1,-1,False}
    Else
      If \frametitle><""
        yoff.l = stepsize + tuiengine\space+1
      Else
        yoff=1
      End If

      *xwin.Window = Peek.l(Addr Window(win))
      If *xwin\WLayer
        oldhook.l = InstallLayerHook_(*xwin\WLayer,#LAYERS_NOBACKFILL)
        ScrollWindowRaster_ *xwin,0,stepsize*diff,\x,\y+yoff,\x+\xs-1,\y+stepsize*\minvalue-1+yoff
        InstallLayerHook_ *xwin\WLayer,oldhook
      Else
        SetBPen_ *xwin\RPort,tuipen(#tpen_halfshadow)
        ScrollRaster_ RastPort(win),0,stepsize*diff,\x,\y+yoff,\x+\xs-1,\y+stepsize*\minvalue-1+yoff
      End If

      \modulo = newpos
      If diff<0
        tui_listview_draw_content {win.l,tuiobj.l,\modulo,\modulo-diff-1,False}
      Else
        tui_listview_draw_content {win.l,tuiobj.l,\modulo+\minvalue-diff,\modulo+\minvalue-1,False}
      End If
    End If
  End If
Else
  \modulo = newpos
End If
End Statement




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_statusbar_draw {win.l,tuiobj.l,newv.l,oldv.l}                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - newv.l    : ???                                                           /
;/ - oldv.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_statusbar_draw {win.l,tuiobj.l,newv.l,oldv.l}
SHARED tuidat(),tuiengine,tuipen()
y2.l = \y+\ys-1
x2.l = \x+\xs-1
If newv>\xs Then newv = \xs
If newv<0   Then newv = 0
If oldv>\xs Then oldv = \xs
If oldv<0   Then oldv = 0

If newv<oldv
  WBox  \x+newv,\y,x2,y2,tuipen(#tpen_shadow)
  If newv Then Wline \x+newv,\y+1,\x+newv,y2,tuipen(#tpen_black)
Else
  If newv>oldv
    If newv>1

     drawbframe {\x    ,\y  ,newv  ,\ys}

     If newv>2
       drawbox    {\x+1  ,\y+1,newv-2,\ys-2,tuipen(#tpen_shine)}
     End If
    Else
      Wline \x,\y,\x,\ys+\y-2,tuipen(#tpen_white)
      WPlot \x,\y+\ys-1,tuipen(#tpen_black)
    End If
  End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setstatusbar {win.l,tuiobj.l,value.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - value.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setstatusbar {win.l,tuiobj.l,value.l} ; ---------------------------------------
SHARED tuidat(),tuiengine,tuipen()
Use Window win
oldv.f = \value * \xs / \maxvalue
newv.f =  (value * \xs +.99) / \maxvalue
\value = value
If Int(oldv)><Int(newv) AND \visible Then tui_statusbar_draw {win,tuiobj,Int(newv),Int(oldv)}
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_initstatusbar {win.l,tuiobj.l,resolution.l,initvalue.l}         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - resolution.l    : ???                                                     /
;/ - initvalue.l    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_initstatusbar {win.l,tuiobj.l,resolution.l,initvalue.l} ; ------------------
SHARED tuidat(),tuiengine,tuipen()
If \typ = #tobj_statusbar
  Use Window win
  \maxvalue = resolution
  \value    = 0
  If \visible Then drawbox {\x,\y,\xs,\ys,tuipen(#tpen_shadow)}
  tui_setstatusbar {win,tuiobj,initvalue}
Else
  error {"Object is not a statusbar ! (tui_inistatusbar{})"}
End If
End Statement




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_initscroller {win.l,tuiobj.l,visible.l,total.l,init.l}          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - visible.l    : ???                                                        /
;/ - total.l    : ???                                                          /
;/ - init.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_initscroller {win.l,tuiobj.l,visible.l,total.l,init.l}
SHARED tuidat()
If visible<=0 Then visible=1
old_value.l    = \value
old_minvalue.l = \minvalue
old_maxvalue.l = \maxvalue
old_view_yo.l  = \view_yo

\maxvalue = total
If visible>total Then visible=total
\value    = init
\minvalue = visible


;\view_yo = 1
;While total>32767:total/2:\view_yo * 2:Wend
\view_yo = total/32768+1


If \visible
  If old_value><\value OR old_minvalue><\minvalue OR old_maxvalue><\maxvalue OR old_view_yo><\view_yo
    scroller_value.l    = \value     / \view_yo
    scroller_minvalue.l = \minvalue  / \view_yo
    scroller_maxvalue.l = \maxvalue  / \view_yo
    GTSetAttrs win,tuiobj,#GTSC_Total,scroller_maxvalue ,#GTSC_Visible,scroller_minvalue,#GTSC_Top,scroller_value
  End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_refreshregion {win.l,tuiobj.l,notify.l}                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - notify.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_refreshregion {win.l,tuiobj.l,notify.l}
SHARED tuidat(),tuievent_queue()
*winP.Window = Peek.l(Addr Window(win))
*rp.RastPort = RastPort(win)
If *winP\WLayer
  ox1.l = *winP\WLayer\DamageList\bounds\MinX
  oy1.l = *winP\WLayer\DamageList\bounds\MinY
  ox2.l = *winP\WLayer\DamageList\bounds\MaxX
  oy2.l = *winP\WLayer\DamageList\bounds\MaxY

  ;error {"Bounds: "+Str$(bx1)+"/"+Str$(by1)+" - "+Str$(bx2)+"/"+Str$(by2)+" :::"+Hex$(recptr)}

  *rec.RegionRectangle = Peek.l(*winP\WLayer\DamageList + 8)

  While *rec
    bx1.l = *rec\bounds\MinX + ox1
    by1.l = *rec\bounds\MinY + oy1
    bx2.l = *rec\bounds\MaxX + ox1
    by2.l = *rec\bounds\MaxY + oy1

    *rec.RegionRectangle = *rec\Next

    If AddLast (tuievent_queue())
      tuievent_queue()\win      = win
      tuievent_queue()\tuiobj   = tuiobj
      tuievent_queue()\id_data  = win_GetIDData{win}
      tuievent_queue()\mx       = Max(\x,bx1)
      tuievent_queue()\xs       = Min(\xs+\x,bx2+1) - tuievent_queue()\mx
      tuievent_queue()\my       = Max(\y,by1)
      tuievent_queue()\ys       = Min(\ys+\y,by2+1) - tuievent_queue()\my
      tuievent_queue()\notify   = notify ; #notify_tuirefresh_obj
      If tuievent_queue()\xs<=0 OR tuievent_queue()\ys<=0 Then KillItem tuievent_queue()
    End If
  Wend
Else
  If AddLast (tuievent_queue())
    tuievent_queue()\win      = win
    tuievent_queue()\tuiobj   = tuiobj
    tuievent_queue()\id_data  = win_GetIDData{win}
    tuievent_queue()\mx       = \x
    tuievent_queue()\xs       = \xs
    tuievent_queue()\my       = \y
    tuievent_queue()\ys       = \ys
    tuievent_queue()\notify   = notify ; #notify_tuirefresh_obj
    If tuievent_queue()\xs<=0 OR tuievent_queue()\ys<=0 Then KillItem tuievent_queue()
  End If
End If

If \typ = #tobj_view
If \value>=0
  SetDrMd_ *rp,0
  SetAPen_ *rp,\value
  RectFill_ *rp,\x,\y,\x+\xs-1,\y+\ys-1
End If
End If

tui_sigself {}
End Statement






;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_scrollview {win.l,tuiobj.l,dx.l,dy.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - dx.l    : ???                                                             /
;/ - dy.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_scrollview {win.l,tuiobj.l,dx.l,dy.l}
SHARED tuidat(),tuievent_queue(),tuiengine
If \visible
If \typ = #tobj_view
  *winP.Window = Peek.l(Addr Window(win))
  *rp.RastPort = *winP\RPort

  dx * \view_xf
  dy * \view_yf
  If dx+dy><0
    If Abs(dx)>\xs OR Abs(dy)>\ys
      dx=0
      dy=0
      drawbox {\x,\y,\xs,\ys,\value}
    Else
      SetDrMd_ *rp,0
      SetBPen_ *rp,\value
      ;ys.l = \ys / \view_yf
      ;ys * \view_yf
      ys.l = \ys
      If *rp\Layer
        refreshalready.l = *rp\Layer\Flags AND #LAYERREFRESH
      End If

      If *winP\WLayer
        If \value>=0
          SetDrMd_ *rp,0
          SetBPen_ *rp,\value
          If ys>0 Then ScrollRaster_ *rp,-dx,-dy,\x,\y,\x+\xs-1,\y+ys-1
         ; If ys>0 Then ScrollWindowRaster_ *winP,-dx,-dy,\x,\y,\x+\xs-1,\y+ys-1
        Else
          oldhook.l = InstallLayerHook_(*winP\WLayer,#LAYERS_NOBACKFILL)
          ScrollWindowRaster_ *winP,-dx,-dy,\x,\y,\x+\xs-1,\y+ys-1
          InstallLayerHook_ *winP\WLayer,oldhook
        End If
      Else
        If \value>=0
          SetDrMd_ *rp,0
          SetBPen_ *rp,\value
        Else
          SetDrMd_ *rp,0
          SetBPen_ *rp,0
        End If
        If ys>0 Then ScrollRaster_ *rp,-dx,-dy,\x,\y,\x+\xs-1,\y+ys-1
      End If




      If *rp\Layer
       If (*rp\Layer\Flags AND #LAYERREFRESH) AND refreshalready=False
        If tuiengine\wflgs & #WFLG_SMART_REFRESH = False
          *winptr.Window = Peek.l(Addr Window(win))
          GT_BeginRefresh_ *winptr ; Peek.l(Addr Window(win))
          tui_refreshregion {win.l,tuiobj.l,#notify_tuirefresh_obj}
          GT_EndRefresh_ *winptr,True ; Peek.l(Addr Window(win)),True
        Else
          error {"Refreshlayer with smart refresh !"}
        End If
       End If
      End If

    End If

    If AddLast (tuievent_queue())
      tuievent_queue()\win      = win
      tuievent_queue()\tuiobj   = tuiobj
      tuievent_queue()\id_data  = win_GetIDData{win}
      If dx>0
        tuievent_queue()\mx       = \x
        tuievent_queue()\xs       = dx
      Else
        If dx<0
          tuievent_queue()\mx       = \x + \xs + dx
          tuievent_queue()\xs       = -dx
        Else
          tuievent_queue()\mx       = \x
          tuievent_queue()\xs       = \xs
        End If
      End If
      If dy>0
        tuievent_queue()\my       = \y
        tuievent_queue()\ys       = dy
      Else
        If dy<0
          tuievent_queue()\my       = \y + \ys + dy
          tuievent_queue()\ys       = -dy
        Else
          tuievent_queue()\my       = \y
          tuievent_queue()\ys       = \ys
        End If
      End If
      tuievent_queue()\notify   = #notify_tuirefresh_obj
      tui_sigself {}
    End If
  End If
Else
  error {"Tried to scroll a non-view object !"}
End If
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_view_scroll {win.l,tuiobj.l,xpos.l,ypos.l}                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - xpos.l    : ???                                                           /
;/ - ypos.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_view_scroll {win.l,tuiobj.l,xpos.l,ypos.l}
SHARED tuidat()
dx.l = xpos-\view_xo
dy.l = ypos-\view_yo
\view_xo = xpos
\view_yo = ypos
If win_IsOpen {win}
  If \child[0]><-1 Then tui_initscroller {win,\child[0],\xs/\view_xf,\view_xs,xpos}
  If \child[1]><-1 Then tui_initscroller {win,\child[1],\ys/\view_yf,\view_ys,ypos}
  tui_scrollview{win,tuiobj,-dx,-dy}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = tui_sliderlevel2string {win.l,tuiobj.l,value.l}         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - value.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s tui_sliderlevel2string {win.l,tuiobj.l,value.l}
SHARED tuidat(),tuiengine,controllername.s(),gmidi.s(),gmidi_drums.s()
;Stop
Select \dat1
  Case #slider_linear
    a.s = Str$(value)+\text

  Case #slider_q
    If value>0
      a.s = Str$(Int(value/10))+"."+Str$(value MOD 10)+\text
    Else
      a.s = "shelf"
    End If

  Case #slider_bpm
    value * 4
    l.l = value / 192
    frak.l = value MOD 192
    a.s = Str$(l)+":"
    Format "000"
    a.s + Str$(frak)
    Format ""

  Case #slider_000
    If value<10 Then a.s = "0":Else a.s = ""
    If value<100 Then a.s + "0"
    a.s + Str$(value)+\text

  Case #slider_exp
    x.l = 1
    For n.l=0 To value-1:x.l*2:Next
    a.s = Str$(x)+\text

  Case #slider_half
    f.f = value
    Format "+#0.00"
    a.s = Str$(f/2)+\text
    Format ""

  Case #slider_quarter
    f.f = value
    Format "+#0.00"
    a.s = Str$(f/4)+\text
    Format ""

  Case #slider_plusminus
    If value>0 Then a.s =  "+"+Str$(value)+\text:Else a.s = Str$(value)+\text

  Case #slider_centi
    f.f = value
    Format "+##0.00"
    a.s = Str$(f/100)+\text
    Format ""


  Case #slider_milli
    f.f = value
    Format "+##0.000"
    a.s = Str$(f/1000)+\text
    Format ""

  Case #slider_deci
    f.f = value
    Format "+##0.0"
    a.s = Str$(f/10)+\text
    Format ""

  Case #slider_ctrl
    value = QLimit(value,0,127)
    a.s = controllername.s(value)

  Case #slider_gmidi
    value = QLimit(value,0,127)
    a.s = gmidi.s(value)

  Case #slider_gmidi_drums
    value = QLimit(value,0,127)
    a.s = gmidi_drums.s(value)


  Case #slider_note
    value = QLimit(value,0,127)
    a.s = con_Note2String {value}

  Case #slider_pan
    If value<0 Then x.l=-value:Else x=value
    a.s = Str$(x)+"%"
    If value>0 Then a.s+" R":Else If value<0 Then a.s+" L":Else a.s="Center"

  Case #slider_delay
    Select tuiengine\slider_delaymode
      Case 0 ; ms
        a.s = Str$(value) + "ms"

      Case 1 ; bpm
        If value>60
            value = 600000 / value
            a.s = Str$(Int(value/10))+"."+Str$(value MOD 10)+"bpm"
        Else
          a.s = "* bpm     "
        End If

      Case 2 ; beats
        x.l = tuiengine\bpm * value / 5 / 120
        a.s = Str$(Int(x / 100)) +"." + Str$(x MOD 100) + "beats"

    End Select

  Case #slider_gain
    Select tuiengine\slider_gainmode
      Case 0 ; %
        If value>0
          a.s =  Str$(value)+"%"
        Else
          a.s = "mute"
        End If
      Case 1 ; db
        If value>0
          db.f = Log(value / 100) * 12   ; was ???
          Format "+##0.0"
          a.s + Str$(db) + "db"
          Format ""
        Else
          a.s = "mute"
        End If
      Default
        If value>0
          a.s =  Str$(value)
        Else
          a.s = "mute"
        End If
    End Select

  Case #slider_mixergain
    If value>0
      a.s =  Str$(value)+"%"
    Else
      a.s = "mute"
    End If

  Case #slider_mixerpan
    If value<0 Then x=-value:Else x=value
    a.s = Str$(x)+"%"
    If value>0 Then a.s+" R":Else If value<0 Then a.s+" L":Else a.s="Center"


  Case #slider_freq
    If value>999
      If value>9999
        a.s = Str$(Int(value/1000))+"kHz"
      Else
        a.s = Str$(Int(value/1000))+"."+Str$(Int((value/100) MOD 10))+"kHz"
      End If
    Else
      a.s = Str$(value)+"Hz"
    End If

  Case #slider_lowcustom
    If value>\minvalue
      a.s =  Str$(value)
    Else
      a.s = \text
    End If

  Case #slider_highcustom
    If value<\maxvalue
      a.s =  Str$(value)
    Else
      a.s = \text
    End If

  Default
    a.s = ""
End Select
Function Return a.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_getslidervaluemaxwidth {win.l,tuiobj.l,font.l}      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - font.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_getslidervaluemaxwidth{win.l,tuiobj.l,font.l}
SHARED tuidat()
USEPATH tuidat(win,tuiobj)
a.s = tui_sliderlevel2string{win,tuiobj,\minvalue}
maxwidth.l  = textlen{a.s,font,win}
a.s = tui_sliderlevel2string{win,tuiobj,\maxvalue}
maxwidth2.l = textlen{a.s,font,win}
maxwidth = Max(maxwidth,maxwidth2)

a.s = tui_sliderlevel2string{win,tuiobj,\minvalue+1}
maxwidth2.l = textlen{a.s,font,win}
maxwidth = Max(maxwidth,maxwidth2)

a.s = tui_sliderlevel2string{win,tuiobj,\maxvalue-1}
maxwidth2.l = textlen{a.s,font,win}
maxwidth = Max(maxwidth,maxwidth2)
Function Return maxwidth
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_page_click {win.l,tuiobj.l,mx.l,my.l}               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - mx.l    : ???                                                             /
;/ - my.l    : ???                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
  Function.l tui_page_click {win.l,tuiobj.l,mx.l,my.l}
SHARED tuidat(),tuiengine
value.l = -1
If \modulo>0
  If \ttags & #tui_tag_small Then font.l=tuiengine\font_small:fontsize.l=tuiengine\fontsize_small:Else font=tuiengine\font_med:fontsize.l=tuiengine\fontsize_med


  If \ttags & #tui_tag_below
    y1.l = \y+\ys-fontsize-tuiengine\space*2
    y2.l = \y+\ys
  Else
    y1.l = \y
    y2.l = \y + fontsize+tuiengine\space*2
  End If
  If my>=y1 AND my<=y2

    x2.l = \x-1
    For n.l = 0 To \modulo-1
      x1.l=x2+1
      x2=\moduloxs[n]

      If mx>=x1 AND mx<x2 Then value=n
    Next
  End If
Else
  value.l = -1
End If
Function Return value
End Function


CNIF #tui_use_texteditor
XINCLUDE "texteditor.include.ab3"
CEND

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_closebubble {}                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_closebubble {}
SHARED tuiengine,windat()
If tuiengine\bubbleopen
   tuiengine\bubbleopen = False
   CloseWindow tuiengine\bubblewin
   windat(tuiengine\bubblewin)\is_open = False
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setfocus {win.l,tuiobj.l}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setfocus {win.l,tuiobj.l}
SHARED winnotify(),tuidat()
If win>=0
  tui_closebubble{}
  If winnotify(win)\lastfocusobj>=0
    Select tuidat(win,winnotify(win)\lastfocusobj)\typ
      CNIF #tui_use_texteditor
      Case #tobj_texteditor
        ted_blink{tuidat(win,winnotify(win)\lastfocusobj)\modulo,Off}
      CEND

    End Select
  End If
  winnotify(win)\lastfocusobj = tuiobj
  If winnotify(win)\lastfocusobj>=0
    If tuidat(win,winnotify(win)\lastfocusobj)\visible
      Select tuidat(win,winnotify(win)\lastfocusobj)\typ
        CNIF #tui_use_texteditor
        Case #tobj_texteditor
          ted_blink{tuidat(win,winnotify(win)\lastfocusobj)\modulo,On}
        CEND
        Case #tobj_string
          GTActivateGadget win,tuiobj
      End Select
    End If
  End If

End If
End Statement


#env_knobsize = 4
#env_max      = 1000

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_envelope_drawknob {win.l,x.l,y.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_envelope_drawknob{win.l,x.l,y.l}
SHARED tuipen()
WBox x-#env_knobsize ,y-#env_knobsize ,x+#env_knobsize ,y+#env_knobsize ,tuipen(#tpen_led_green)
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !envelope_dat2coo                                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro envelope_dat2coo
  xs.l = \xs - #env_knobsize*2
  ys.l = \ys - #env_knobsize*2
  yt.l = \ys + \y - #env_knobsize-1

  attack.l    = yt - \moduloys[0] * ys / #env_max
  decay.l     = yt - \moduloys[1] * ys / #env_max
  sustain.l   = yt - \moduloys[2] * ys / #env_max
  release.l   = yt - \moduloys[3] * ys / #env_max
  end_v.l     = yt
  If \ttags& #tui_tag_centered
    end_v = yt - #env_max/2 * ys / #env_max
  End If


  attack_t.l  = \moduloxs[0] * xs / #env_max    + \x + #env_knobsize
  decay_t.l   = \moduloxs[1] * xs / #env_max    + \x + #env_knobsize
  sustain_t.l = \moduloxs[2] * xs / #env_max    + \x + #env_knobsize
  release_t.l = \moduloxs[3] * xs / #env_max    + \x + #env_knobsize
  end_t.l     = \xs+\x-1
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_envelope_draw {win.l,tuiobj.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_envelope_draw{win.l,tuiobj.l}
SHARED tuidat(),tuipen()
USEPATH tuidat(win,tuiobj)
If \visible

  !envelope_dat2coo

  drawbox {\x,\y,decay_t-\x+1,\ys,tuipen(#tpen_led_green_dark)}
  Wline     attack_t,    attack,    decay_t,    decay,tuipen(#tpen_led_green)

  drawbox {decay_t+1,\y,sustain_t-decay_t,\ys,tuipen(#tpen_led_green_dark)}
  Wline      decay_t,     decay,  sustain_t,  sustain,tuipen(#tpen_led_green)
  tui_envelope_drawknob {win,  attack_t,  attack}

  drawbox {sustain_t+1,\y,release_t-sustain_t,\ys,tuipen(#tpen_led_green_dark)}
  Wline    sustain_t,   sustain,  release_t,  release,tuipen(#tpen_led_green)
  tui_envelope_drawknob {win,   decay_t,   decay}

  drawbox {release_t+1,\y,end_t-release_t,\ys,tuipen(#tpen_led_green_dark)}
  Wline    release_t,   release,      end_t,    end_v,tuipen(#tpen_led_green)
  tui_envelope_drawknob {win, sustain_t, sustain}
  tui_envelope_drawknob {win, release_t, release}

  For y1.l = \y To \y+\ys-1 Step 4
    WPlot release_t,y1,tuipen(#tpen_led_green)
    WPlot sustain_t,y1,tuipen(#tpen_led_green)
  Next

If \ttags& #tui_tag_centered
  ym.l = \y+\ys/2
  For x1.l = \x To \x+\xs-1 Step 4
    WPlot x1,end_v,tuipen(#tpen_led_blue)
  Next

End If

End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_envelope_hit {win.l,tuiobj.l,mx.l,my.l}             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - mx.l    : ???                                                             /
;/ - my.l    : ???                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_envelope_hit{win.l,tuiobj.l,mx.l,my.l}
SHARED tuidat()
!envelope_dat2coo
knob.l = -1
If Abs(mx-release_t)<=#env_knobsize AND Abs(my-release)<=#env_knobsize Then knob.l = 3
If Abs(mx- attack_t)<=#env_knobsize AND Abs(my- attack)<=#env_knobsize Then knob.l = 0
If Abs(mx-  decay_t)<=#env_knobsize AND Abs(my-  decay)<=#env_knobsize Then knob.l = 1
If Abs(mx-sustain_t)<=#env_knobsize AND Abs(my-sustain)<=#env_knobsize Then knob.l = 2
Function Return knob
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_envelope_drag {win.l,tuiobj.l,mx.l,my.l}                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - mx.l    : ???                                                             /
;/ - my.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_envelope_drag{win.l,tuiobj.l,mx.l,my.l}
SHARED tuidat(),tuievent
knob.l = \value
If knob>=0 AND knob<4
  dat_t.l = (mx - \x-#env_knobsize) * #env_max / (\xs-#env_knobsize*2)
  dat_v.l = #env_max - ((my - \y-#env_knobsize) * #env_max / (\ys-#env_knobsize*2))

  If knob=0 Then dat_t = 0
  If dat_t<0 Then dat_t=0
  If dat_t>=#env_max Then dat_t=#env_max-1
  If dat_v<0 Then dat_v=0
  If dat_v>=#env_max Then dat_v=#env_max-1
  If knob=2 Then \moduloys[3]=dat_v
  If knob=3 Then \moduloys[2]=dat_v

  If knob=1 AND dat_t>\moduloxs[2] Then dat_t=\moduloxs[2]-1
  If knob=2 AND dat_t>\moduloxs[3] Then dat_t=\moduloxs[3]-1
  If knob=2 AND dat_t<\moduloxs[1] Then dat_t=\moduloxs[1]+1
  If knob=3 AND dat_t<\moduloxs[2] Then dat_t=\moduloxs[2]+1


  \moduloys[knob] = dat_v
  \moduloxs[knob] = dat_t
 ; error {"drag !"}

  tui_envelope_draw{win,tuiobj}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_draw {win.l,tuiobj.l,@mode.l}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - mode.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_draw {win.l,tuiobj.l,@mode.l} ; mode=1 value redraw , mode=-1 default; 0 = refresh
SHARED tuidat(),tuiengine,tuipen(),tuievent_queue(),imagedat(),tuiparent()
USEPATH tuidat(win,tuiobj)
If tuiobj<0 Then tuiobj=tuiparent(win)
If \visible
Use Window win
WindowFont tuiengine\font_med
WColour tuipen(#tpen_black),tuipen(#tpen_bg)
WJam 0

If \ttags AND #tui_tag_gframe
  If \frametitle=""
    drawgframe{\x-tuiengine\space,\y-tuiengine\space,\xs+tuiengine\space*2,\ys+tuiengine\space*2}
  Else
    x.l = \x-tuiengine\space
    y.l = \y-tuiengine\space - tuiengine\fontsize_med/2
    drawgframe{x,y,\xs+tuiengine\space*2,\ys+tuiengine\space*2+tuiengine\fontsize_med/2}
    pixsize.l = textlen{\frametitle,tuiengine\font_med}
    Use Window win
    drawbg {\x+\xs/2-pixsize/2-1,\y-tuiengine\fontsize_med-tuiengine\space+1,pixsize+2,tuiengine\fontsize_med}
    WindowFont tuiengine\font_med
    WLocate \x+\xs/2-pixsize/2+1-WLeftOff,\y-tuiengine\fontsize_med-tuiengine\space+1-WTopOff
    WJam 0
    WColour tuipen(#tpen_shadow)
    NPrint \frametitle
    WJam 0
    WColour tuipen(#tpen_white)
    WLocate \x+\xs/2-pixsize/2-WLeftOff  ,\y-tuiengine\fontsize_med-tuiengine\space -WTopOff
    NPrint \frametitle
  End If
End If

If (\ttags AND #tui_tag_nospace) = False

  If \ttags AND #tui_tag_bframe
    drawbframe{\x-tuiengine\space,\y-tuiengine\space,\xs+tuiengine\space*2,\ys+tuiengine\space*2}
  End If

  If \ttags AND #tui_tag_nframe
    drawcolframe{\x-tuiengine\space,\y-tuiengine\space,\xs+tuiengine\space*2,\ys+tuiengine\space*2,tuipen(#tpen_bg)}
  End If

  If \ttags AND #tui_tag_iframe
    drawiframe{\x-tuiengine\space,\y-tuiengine\space,\xs+tuiengine\space*2,\ys+tuiengine\space*2}
  End If
Else

  If \ttags AND #tui_tag_bframe
    drawbframe{\x-2,\y-2,\xs+4,\ys+4}
  End If

  If \ttags AND #tui_tag_iframe
    drawiframe{\x-2,\y-2,\xs+4,\ys+4}
  End If

;  If \ttags AND #tui_tag_nframe
;    drawcolframe{\x-2,\y-2,\xs+4,\ys+4,tuipen(#tpen_bg)}
;  End If

End If


Select \typ
  Case #tobj_page
    If \ttags & #tui_tag_small Then font.l=tuiengine\font_small:fontsize.l=tuiengine\fontsize_small:Else font=tuiengine\font_med:fontsize.l=tuiengine\fontsize_med
;    error {"Draw page..."}
    x1.l = \x
    x2.l = \x + \xs -1

    If \ttags & #tui_tag_below
      y1.l = \y
      y2.l = \y + \ys -1 -fontsize - tuiengine\space*2 - 2
      Wline x1,y1,x2,y1,tuipen(#tpen_white)   ; schwarz
      Wline x2,y2,x2,y1,tuipen(#tpen_black)   ; schwarz
      Wline x1,y1,x1,y2,tuipen(#tpen_white)   ; weiss
      drawbg2 {\x+1,y2,x2-1,\y+\ys-1}
    Else
      y1.l = \y + fontsize + tuiengine\space*2 + 2  +1
      y2.l = \y + \ys -1
      Wline x1,y2,x2,y2,tuipen(#tpen_black)   ; schwarz
      Wline x2,y2,x2,y1,tuipen(#tpen_black)   ; schwarz
      Wline x1,y1,x1,y2,tuipen(#tpen_white)   ; weiss
      drawbg2 {\x+1,\y,x2-1,y1-1}
    End If

    \chars = 0;12
    If \modulo>0

      xall.l  = 0
      xkeep.l = 0
      xrest.l = 0
      xmax.l  = 1
      For n.l = 0 To \modulo-1
        xs.l =  textlen{tuidat(win,\child[n])\frametitle ,font} + tuiengine\space*2+2
        \moduloxs[n]=xs
        If n=\value
          xkeep.l = xs
        Else
          xall.l + xs
        End If
        If xs>xmax Then xmax=xs
      Next


;      If \modulo>1
;        xrest.l = (\xs-2 - xkeep)
;        xcool.l = (\xs*2/3 - xkeep) / (\modulo-1)
;        If xcool>xmax Then xcool=xmax
;      End If
;
;      xs.l = 0
;      For n.l=0 To \modulo-1
;        If n=\value
;
;        Else
;          If \moduloxs[n]<xcool Then \moduloxs[n]=xcool
;          xs.l + \moduloxs[n]
;        End If
;
;      Next
;      If xs>0
;        ratio.f = xrest / xs
;      Else
;        ratio=1
;      End If
;      If ratio>1 Then ratio=1
;      f.f = xcool * ratio
;      xcool = f
;
;      For n.l=0 To \modulo-1
;        If n=\value
;          If \moduloxs[n]<xcool Then \moduloxs[n]=xcool
;        Else
;          f.f = \moduloxs[n] * ratio
;          \moduloxs[n] = f
;        End If
;      Next


      If \modulo>1
        xrest.l = (\xs - xkeep) / (\modulo-1)
        If xmax<xrest Then xrest=xmax
      End If

      If xrest>xkeep
        xkeep=xrest
        If \modulo>1
          xrest.l = (\xs -xkeep) / (\modulo-1)
          If xmax<xrest Then xrest=xmax
        End If
      End If

      For n.l=0 To \modulo-1
        If n=\value
          \moduloxs[n] = xkeep
        Else
          \moduloxs[n] = xrest
        End If
      Next


      If \ttags&#tui_tag_centered Then xp.l=x1-1+tuiengine\space:Else xp=x1+tuiengine\space

      If \ttags & #tui_tag_below=False
        y1.l = \y+2
        y2.l = \y+ fontsize + tuiengine\space*2 + 1 +2
        For n.l = 0 To \modulo-1
          text.s = tuidat(win,\child[n])\frametitle
          If n=\value
            xns.l  = \moduloxs[n] -tuiengine\space*2+1
            xn.l   = \moduloxs[n]
            xtags.l = \ttags|#tui_tag_bold
            tui_print {win,xp,y1+tuiengine\space,xns,text.s,xtags}
            Wline x1+xn-1,y1-1,x1+xn-1,y2,tuipen(#tpen_black)
            Wline x1,y1-1,x1+xn-1,y1-1,tuipen(#tpen_white)
            Wline x1,y1-1,x1,y2,tuipen(#tpen_white)
          Else
            xns.l = \moduloxs[n] -tuiengine\space*2+1
            xn.l = \moduloxs[n]
            xtags.l = \ttags
            Wline x1,y2-1,x1+xn-1,y2-1,tuipen(#tpen_shadow)
            Wline x1,y2  ,x1+xn-1,y2  ,tuipen(#tpen_white)
            tui_print {win,xp,y1+tuiengine\space+1,xns,text.s,xtags}
            Wline x1+xn-1,y1,x1+xn-1,y2-1,tuipen(#tpen_black)
            Wline x1,y1,x1+xn-1,y1,tuipen(#tpen_white)
            Wline x1,y1,x1,y2,tuipen(#tpen_white)
          End If
          x1 + xn
          xp + xn
          \moduloxs[n] = x1
        Next
        If x1<=\x+\xs-1
          Wline x1,y2,\x+\xs-1,y2,tuipen(#tpen_white)
        End If
      Else
        y2.l = \y+\ys-2
        y1.l = \y+\ys- fontsize - tuiengine\space*1 - 1 -2
        For n.l = 0 To \modulo-1
          text.s = tuidat(win,\child[n])\frametitle
          If n=\value
            xns  = \moduloxs[n] -tuiengine\space*2+1
            xn.l = \moduloxs[n]

            xtags.l = \ttags|#tui_tag_bold
            tui_print {win,xp,y1+tuiengine\space+1,xns,text.s,xtags}
            Wline x1+xn-1,y1-1,x1+xn-1,y2+1,tuipen(#tpen_black)
            Wline x1,y2+1,x1+xn-1,y2+1,tuipen(#tpen_black)
            Wline x1,y1-1,x1,y2,tuipen(#tpen_white)
          Else
            xns.l = \moduloxs[n]-tuiengine\space*2+1
            xn.l = \moduloxs[n]

            xtags.l = \ttags
            Wline x1,y1,x1+xn-1,y1,tuipen(#tpen_shadow)
            Wline x1,y1-1  ,x1+xn-1,y1-1  ,tuipen(#tpen_black)
            tui_print {win,xp,y1+tuiengine\space,xns,text.s,xtags}
            Wline x1+xn-1,y1,x1+xn-1,y2-1,tuipen(#tpen_black)
            Wline x1,y2,x1+xn-1,y2,tuipen(#tpen_black)
            Wline x1,y1+1,x1,y2-1,tuipen(#tpen_shadow)
          End If
          x1 + xn
          xp + xn
          \moduloxs[n] = x1
        Next
        If x1<=\x+\xs-1
          Wline x1,y1-1,\x+\xs-1,y1-1,tuipen(#tpen_black)
        End If

      End If
      ;error {"Done, will draw child..."}

      If \value>=0 AND \value<#max_childs
        If \child[\value]>=0
          ;error {"Draw child ..."+Str$(\child[\value])}
          tui_draw{win,\child[\value],mode}
          ;error {"Child dpne"}
        End If
      End If
    Else
      xn.l = \xs;-\chars
      xns.l = xn-tuiengine\space*2 -2
      y1.l = \y+1
      y2.l = \y+ fontsize + tuiengine\space*2 + 1
      y1.l = \y + tuiengine\fontsize_med + tuiengine\space*2 + 2
      y2.l = \y + \ys -1
      x1+tuiengine\space*2
      x2-tuiengine\space*2
      y1+tuiengine\space*2
      y2-tuiengine\space*2

      If \ttags & #tui_tag_below
        yn2.l = fontsize + tuiengine\space*2 +2
      Else
        yn1.l = fontsize + tuiengine\space*2 +2
      End If
      drawbframe {\x,\y,\xs,\ys}
      drawiframe {\x+tuiengine\space*2,\y+tuiengine\space*2+yn1,\xs-tuiengine\space*4,\ys-tuiengine\space*4-yn1-yn2}
      drawbox {\x+2+tuiengine\space*2,\y+2+tuiengine\space*2+yn1,\xs-4-tuiengine\space*4,\ys-4-tuiengine\space*4-yn1-yn2,tuipen(#tpen_halfshadow)}
    End If


  Case #tobj_hgroup
  ;  If \ttags AND #tui_tag_iframe Then WBox \x,\y,\x+\xs,\y+\ys,tuipen(#tpen_halfshadow)
  ;  If \ttags AND #tui_tag_bframe Then WBox \x,\y,\x+\xs,\y+\ys,tuipen(#tpen_halfshine)

    If \ttags AND #tui_tag_hstripe
      If \ttags AND #tui_tag_top
        drawhstripe {\x,\y,\xs}
      Else
        drawhstripe {\x,\y+\ys-1,\xs}
      End If
    End If
    If \ttags AND #tui_tag_vstripe
      If \ttags AND #tui_tag_right
        drawvstripe {\x+\xs-1,\y,\ys}
      Else
        drawvstripe {\x-1,\y,\ys-1}
      End If
    End If
    For n.l=0 To \value-1
      tui_draw{win,\child[n],mode}
    Next

  Case #tobj_vgroup
   ; If \ttags AND #tui_tag_iframe Then WBox \x,\y,\x+\xs,\y+\ys,tuipen(#tpen_halfshadow)
   ; If \ttags AND #tui_tag_bframe Then WBox \x,\y,\x+\xs,\y+\ys,tuipen(#tpen_halfshine)
    If \ttags AND #tui_tag_hstripe
      If \ttags AND #tui_tag_top
        drawhstripe {\x,\y,\xs}
      Else
        drawhstripe {\x,\y+\ys-1,\xs}
      End If
    End If
    If \ttags AND #tui_tag_vstripe
      If \ttags AND #tui_tag_right
        drawvstripe {\x+\xs-1,\y,\ys}
      Else
        drawvstripe {\x-1,\y,\ys-1}
      End If
    End If
    For n.l=0 To \value-1
      tui_draw{win,\child[n],mode}
    Next

  Case #tobj_label
  ;  If (\ttags AND #tui_tag_disabled) = 0 AND False
;      WBox \x,\y,\x+\xs-1,\y+\ys-1,tuipen(#tpen_bg)
      drawbg {\x,\y,\xs,\ys}
  ;  Else
  ;    WBox \x,\y,\x+\xs,\y+\ys,tuipen(#tpen_bg)
  ;  End If
    If \ttags & (#tui_tag_disabled|#tui_tag_bold) Then xs.l = \xs-1:Else xs=\xs ; (wegen disable!)

    tui_print {win,\x,\y,xs,\text,\ttags}

    If False
    tl.l = textlen{\text,\value}
    If tl>xs Then tl=xs

    x2.l = \x
    If (\ttags AND #tui_tag_right   ) Then x2.l = \x+xs  -tl ;- tuiengine\space
    If (\ttags AND #tui_tag_centered) Then x2.l = \x+(xs-tl)/2
    Use Window win


    If \ttags AND #tui_tag_hstripe
      If (\ttags AND #tui_tag_right)    Then drawhstripe {\x,\y+\ys/2-1,xs-tl-2}
      If (\ttags AND #tui_tag_left )    Then drawhstripe {\x+tl+2,\y+\ys/2-1,xs-tl-2}
      If (\ttags AND #tui_tag_centered)
        drawhstripe {\x,\y+\ys/2-1,(xs-tl)/2-2}
        drawhstripe {\x+(xs+tl)/2+2,\y+\ys/2-1,(xs-tl)/2-2}
      End If
    End If

    x2.l -WLeftOff

    WindowFont \value
    If (\ttags AND #tui_tag_disabled) = 0
      WLocate x2,\y-WTopOff
      NPrint tui_stringcrop {win,\text,xs}
      If (\ttags AND #tui_tag_bold)
        WLocate x2+1,\y-WTopOff
        NPrint tui_stringcrop {win,\text,xs}
      End If
    Else
      WColour tuipen(#tpen_shine)
      WLocate x2+1,\y+1-WTopOff
      NPrint tui_stringcrop {win,\text,xs}
      WColour tuipen(#tpen_shadow)
      WLocate x2,\y-WTopOff
      NPrint tui_stringcrop {win,\text,xs}
    End If
    End If


  Case #tobj_view
    If mode=-1
      If \value>=0
        drawbox {\x,\y,\xs,\ys,\value}
      End If
      If \child[0]><-1
        If tuidat(win,\child[0])\child[0] = tuiobj
          tui_initscroller {win,\child[0],\xs/\view_xf,\view_xs,\view_xo}
        End If
      End If
      If \child[1]><-1
        If tuidat(win,\child[1])\child[0] = tuiobj
          tui_initscroller {win,\child[1],\ys/\view_yf,\view_ys,\view_yo}
        End If
      End If

      If AddLast (tuievent_queue())
        tuievent_queue()\win      = win
        tuievent_queue()\tuiobj   = tuiobj
        tuievent_queue()\id_data  = win_GetIDData{win}
        tuievent_queue()\mx       = tuidat(win,tuiobj)\x
        tuievent_queue()\my       = tuidat(win,tuiobj)\y
        tuievent_queue()\xs       = tuidat(win,tuiobj)\xs
        tuievent_queue()\ys       = tuidat(win,tuiobj)\ys
        tuievent_queue()\notify   = #notify_tuirefresh_obj
      End If
      tui_sigself {}
    Else
      tui_refreshregion {win,tuiobj,#notify_tuirefresh_obj}
    End If
  CNIF #tui_use_texteditor
  Case #tobj_texteditor
    If mode=-1
      ted_draw_stat{\modulo,""}
      ted_draw {\modulo,\x,\y,\x+\xs-1,\y+\ys-1}
    Else
      ted_draw_stat{\modulo,""}
      tui_refreshregion {win,tuiobj,#notify_internal_texteditor}
;      If AddLast (tuievent_queue())
;        tuievent_queue()\win      = win
;        tuievent_queue()\tuiobj   = tuiobj
;        tuievent_queue()\id_data  = win_getid{win}
;        tuievent_queue()\mx       = tuidat(win,tuiobj)\x
;        tuievent_queue()\my       = tuidat(win,tuiobj)\y
;        tuievent_queue()\xs       = tuidat(win,tuiobj)\xs
;        tuievent_queue()\ys       = tuidat(win,tuiobj)\ys
;        tuievent_queue()\notify   = #notify_internal_texteditor
;        tui_sigself {win}
;      End If
    End If
  CEND


  Case #tobj_space
    If \ttags AND #tui_tag_hstripe
      drawhstripe {\x,\y+\ys/2,\xs}
    End If
    If \ttags AND #tui_tag_vstripe
      drawvstripe {\x+\xs/2,\y,\ys}
    End If
    If \value>=0
      drawbox {\x,\y,\xs,\ys,\value}
    End If


  CNIF #tui_use_shapes
  Case #tobj_shape
    WBlit \minvalue,\x,\y
  CEND

  CNIF #tui_use_image
  Case #tobj_imagegad
    s.l = (\xs-!image_GetWidth{\maxvalue})/2
    If \value
      drawbg {\x+s,\y,\xs,\ys}
      If image_AlphaIsUsed{\maxvalue}
        image_FancyBlit{\maxvalue,\x+s,\y,-1,-1,-1,#image_blitmode_alpha}
      Else
        image_BlitMask {\maxvalue,\x+s,\y} ; was blitmask !
      End If
    Else
      drawbg {\x,\y,\xs,\ys}
      If image_AlphaIsUsed{\minvalue}
        image_FancyBlit{\minvalue,\x+s,\y,-1,-1,-1,#image_blitmode_alpha}
      Else
        image_BlitMask {\minvalue,\x+s,\y}
      End If
    End If
    If \frametitle
      l.l = textlen{\frametitle,tuiengine\font_med}
      tui_print{win,\x,\y+\ys-tuiengine\fontsize_med-tuiengine\space,\xs,\frametitle,#tui_tag_centered}
    End If


  Case #tobj_image
    If \value>=0 AND \value<#max_childs
      image.l = \child[\value]
      If image_IsUsed{image}
        x.l = \x
        y.l = \y
        If \ttags&#tui_tag_centered
          x = \x + (\xs-image_GetWidth {image})/2
          y = \y + (\ys-image_GetHeight{image})/2
        End If
        If \ttags&#tui_tag_left
          x = \x
        End If
        If \ttags&#tui_tag_right
          x = \x + \xs-image_GetWidth{image}
        End If
        If \ttags&#tui_tag_below
          y = \y + \ys-image_GetHeight{image}
        End If
        If \ttags&#tui_tag_top
          y = \y
        End If
        If \ttags&#tui_tag_nframe
          drawbg {\x,\y,\xs,\ys}
        End If

        If image_AlphaIsUsed{image}
          image_FancyBlit{image,x,y,-1,-1,-1,#image_blitmode_alpha}
        Else
          image_BlitMask {image,x,y}
        End If

      End If
    End If
  CEND

  CNIF #tui_use_audio
  Case #tobj_levelmeter
    tui_levelmeter_draw {win,tuiobj}
  Case #tobj_envelope
    tui_envelope_draw {win,tuiobj}

  CEND
  CNIF #tui_use_listview
  Case #tobj_listview
    ;drawbox {\x,\y,\xs,\ys,tuipen(#tpen_halfshadow)}
    tui_listview_draw {win,tuiobj}
  CEND
  CNIF #tui_use_multilist
  Case #tobj_multilist
    If mode
      win_SetClip {win,\x,\y,\xs+\x-1,\ys+\y-1}
      *rp.RastPort = RastPort(win)
      SetFont_ *rp,Peek.l(Addr IntuiFont(tuiengine\font_med)+8)
      dummy.l=ml_Draw {*rp,\modulo,\view_yo,\view_yo+\view_yf,\x-\view_xo,\y,0,tuipen(#tpen_halfshadow),3  }
      y.l = (\view_ys - \view_yo) * tuiengine\fontsize_med
      If y<\ys
        SetAPen_ *rp,tuipen(#tpen_halfshadow)
        RectFill_ *rp,\x,y+\y,\xs+\x-1,\ys+\y-1
      End If
      win_RemoveClip{win}
    Else
      ;If AddLast (tuievent_queue())
      ;  tuievent_queue()\win      = win
      ;  tuievent_queue()\tuiobj   = tuiobj
      ;  tuievent_queue()\id_data  = win_getid{win}
      ;  tuievent_queue()\mx       = tuidat(win,tuiobj)\x
      ;  tuievent_queue()\my       = tuidat(win,tuiobj)\y
      ;  tuievent_queue()\xs       = tuidat(win,tuiobj)\xs
      ;  tuievent_queue()\ys       = tuidat(win,tuiobj)\ys
      ;  tuievent_queue()\notify   = #notify_internal_multilist
      ;  tui_sigself {win}
      ;End If
      tui_refreshregion {win,tuiobj,#notify_internal_multilist}
    End If
  CEND

  Case #tobj_statusbar
    drawiframe{\x-1,\y-1,\xs+2,\ys+2}
    tui_initstatusbar {win,tuiobj,\maxvalue,\value}

  Case #tobj_string
;    drawcolframe {\x,\y,\xs,\ys,tuipen(#tpen_black)}
    drawbox{\x,\y,\xs,\ys,tuipen(#tpen_bg)}
    drawiframe{\x,\y,\xs,\ys}
    ;drawcolframe {\x,\y,\xs,\ys,tuipen(#tpen_black)}
    RefreshGList_ GTGadPtr(win,tuiobj),Peek.l(Addr Window(win)),0,1

  Case #tobj_numstring
    If \ttags & #tui_tag_incdec
      xs.l = \ys*2
    Else
      xs = 0
    End If
    drawbox{\x,\y,\xs-xs,\ys,tuipen(#tpen_bg)}
    ;drawcolframe {\x,\y,\xs-xs,\ys,tuipen(#tpen_black)}
    drawiframe{\x,\y,\xs-xs,\ys}
    RefreshGList_ GTGadPtr(win,tuiobj),Peek.l(Addr Window(win)),0,1

End Select


If \typ= #tobj_hslider
  If \dat1><#slider_none
    x.l = \x+\xs-\modulo -WLeftOff
    a.s = tui_sliderlevel2string {win,tuiobj,\value}

   ; maxwidth.l = tui_getslidervaluemaxwidth{win,tuiobj,tuiengine\font_med}
   ; If tuiobj=33 Then WJam 1:WLocate 10,10:Print "Width=",Str$(maxwidth)," maxv=",\maxvalue," minv=",\minvalue," font=",tuiengine\font_med

    WLocate x,\y-WTopOff + (\ys-tuiengine\fontsize_med)/2


    If \ttags AND #tui_tag_disabled
      WBox x+WLeftOff,\y+(\ys-tuiengine\fontsize_med)/2-1 ,x+\modulo+WLeftOff-1,\y+(\ys+tuiengine\fontsize_med)/2,tuipen(#tpen_halfshine)
  ;    drawbg2 {x+WLeftOff,\y+(\ys-tuiengine\fontsize_med)/2,x+\modulo+WLeftOff-1,\y+\ys-1}
      WLocate x+1,\y+1-WTopOff+tuiengine\space
      WColour tuipen(#tpen_shine)
      Print a.s
      WLocate x,\y-WTopOff+tuiengine\space
      WColour tuipen(#tpen_shadow)
      Print a.s
    Else
      WBox x+WLeftOff,\y+(\ys-tuiengine\fontsize_med)/2-1 ,x+\modulo+WLeftOff-1,\y+(\ys+tuiengine\fontsize_med)/2,tuipen(#tpen_halfshine)
  ;    drawbg2 {x+WLeftOff,\y+(\ys-tuiengine\fontsize_med)/2  ,x+\modulo+WLeftOff-1,\y+\ys-1}
      Print a.s
    End If
  End If
End If

If \typ=#tobj_vslider
  If \dat1><#slider_none
    WindowFont #tui_font_vslider
    dy.l = tuiengine\space+tuiengine\fontsize_small
    WBox \x+1,\y+\ys-dy,\x+\xs-2,\y+\ys-1,tuipen(#tpen_halfshine)
;    drawbg2 {\x+1,\y+\ys-dy,\x+\xs-2,\y+\ys-1}
    a.s = tui_sliderlevel2string {win,tuiobj,\value}
    tui_print {win,\x,(\y+\ys-dy+\y+\ys-1)/2 -(tuiengine\fontsize_small-1)/2,\xs,a.s,\ttags|#tui_tag_centered|#tui_tag_small}
    If mode=-1 OR mode=0

    xs.l = \xs
    If xs>tuiengine\fontsize_med+tuiengine\space*4 Then xs=tuiengine\fontsize_med+tuiengine\space*4
    xof.l = (\xs+xs)/2+1

    xof2.l = xof-xs-2
    yof.l = \y+3
    ys.l  = \ys-dy-9


    Select \dat1
      Case #slider_mixergain
        CNIF #gainexp=1

        ypos0.f = (Log(200+0)*50) * ys / (Log(\maxvalue+1)*50)
        ypos1.f = (Log(100+0)*50) * ys / (Log(\maxvalue+1)*50)
        ypos2.f = (Log(50+0)*50) * ys / (Log(\maxvalue+1)*50)
        ypos3.f = (Log(25+0)*50) * ys / (Log(\maxvalue+1)*50)
        ypos4.f = (Log(12.5+0)*50) * ys / (Log(\maxvalue+1)*50)
        ypos5.f = (Log(6.25+0)*50) * ys / (Log(\maxvalue+1)*50)
        ypos6.f = (Log(3.125+0)*50) * ys / (Log(\maxvalue+1)*50)
        ypos7.f = (Log(3.125+0)*25) * ys / (Log(\maxvalue+1)*50)


        Wline \x+xof,yof+ys-ypos2,\x+2+xof,yof+ys-ypos2,tuipen(#tpen_shadow)
        Wline \x+xof,yof+ys-ypos3,\x+2+xof,yof+ys-ypos3,tuipen(#tpen_shadow)
        Wline \x+xof,yof+ys-ypos4,\x+2+xof,yof+ys-ypos4,tuipen(#tpen_shadow)
        Wline \x+xof,yof+ys-ypos5,\x+2+xof,yof+ys-ypos5,tuipen(#tpen_shadow)
        Wline \x+xof,yof+ys-ypos6,\x+2+xof,yof+ys-ypos6,tuipen(#tpen_shadow)
        Wline \x+xof,yof+ys-ypos7,\x+2+xof,yof+ys-ypos7,tuipen(#tpen_shadow)

        Wline \x+xof,yof   ,\x+  xof,yof+ys,tuipen(#tpen_black)

        Wline \x+xof+1,yof,\x+xof+1,yof+ys-ypos1,tuipen(#tpen_led_red)
        Wline \x+xof,yof,\x+xof,yof+ys-ypos1,tuipen(#tpen_led_red)

;        Wline \x+xof+1,yof,\x+xof+1,yof+ys-ypos0,tuipen(#tpen_led_red)
;        Wline \x+xof,yof,\x+xof,yof+ys-ypos0,tuipen(#tpen_led_red)


        Wline \x+xof,yof   ,\x+3+xof,yof   ,tuipen(#tpen_black)
        Wline \x+xof,yof+ys,\x+3+xof,yof+ys,tuipen(#tpen_black)

        Wline \x+xof,yof+ys-ypos1,\x+3+xof,yof+ys-ypos1,tuipen(#tpen_black)
        Wline \x+xof+1,yof+ys-ypos1+1,\x+3+xof,yof+ys-ypos1+1,tuipen(#tpen_shine)

        Wline \x+xof,yof+ys-ypos0,\x+2+xof,yof+ys-ypos0,tuipen(#tpen_black)

        Wline \x+xof2,yof+ys-ypos1+1,\x+xof2-2,yof+ys-ypos1+1,tuipen(#tpen_shine)
        Wline \x+xof2,yof+ys-ypos1,\x+xof2-2,yof+ys-ypos1,tuipen(#tpen_black)


        CELSE
        Wline \x+xof,yof   ,\x+  xof,yof+ys,tuipen(#tpen_black)
        Wline \x+xof,yof   ,\x+3+xof,yof   ,tuipen(#tpen_black)
        Wline \x+xof,yof+ys,\x+3+xof,yof+ys,tuipen(#tpen_black)

        Wline \x+xof,yof+ys-(ys*100/\maxvalue)-1,\x+2+xof,yof+ys-(ys*100/\maxvalue)-1,tuipen(#tpen_black)
        Wline \x+xof,yof+ys-(ys* 50/\maxvalue)-1,\x+1+xof,yof+ys-(ys* 50/\maxvalue)-1,tuipen(#tpen_black)
        Wline \x+xof,yof+ys-(ys* 25/\maxvalue)-1,\x+1+xof,yof+ys-(ys* 25/\maxvalue)-1,tuipen(#tpen_black)
        Wline \x+xof,yof+ys-(ys* 12/\maxvalue)-1,\x+1+xof,yof+ys-(ys* 12/\maxvalue)-1,tuipen(#tpen_black)
        CEND

      End Select
    End If
  End If
End If

End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_hide {win.l,tuiobj.l}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_hide{win.l,tuiobj.l}
SHARED tuidat()
\visible = False
Select \typ
  Case #tobj_page
    For n.l=0 To \modulo-1
      tui_hide{win,\child[n]}
    Next

  Case #tobj_hgroup
    For n.l=0 To \value-1
      tui_hide{win,\child[n]}
    Next

  Case #tobj_vgroup
    For n.l=0 To \value-1
      tui_hide{win,\child[n]}
    Next
  CNIF #tui_use_texteditor
  Case #tobj_texteditor
    ted_detach_tuiobj {\modulo}
  CEND

End Select
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_visible {win.l,tuiobj.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_visible{win.l,tuiobj.l}
SHARED tuidat()
Function Return \visible
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_show {win.l,tuiobj.l}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_show{win.l,tuiobj.l}
SHARED tuidat()
\visible = True
Select \typ
  Case #tobj_page
    For n.l=0 To \modulo-1
      tui_hide{win,\child[n]}
    Next

  Case #tobj_hgroup
    For n.l=0 To \value-1
      tui_hide{win,\child[n]}
    Next

  Case #tobj_vgroup
    For n.l=0 To \value-1
      tui_hide{win,\child[n]}
    Next
  CNIF #tui_use_listview
  Case #tobj_listview
    GTSetAttrs win,tuiobj,#GTSC_Total,\maxvalue
    GTSetAttrs win,tuiobj,#GTSC_Top,\modulo,#GTSC_Total,\maxvalue
  CEND

  CNIF #tui_use_texteditor
  Case #tobj_texteditor
    ted_attach_tuiobj {\modulo,win,tuiobj}
  CEND

End Select
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_gtdisable {win.l,tuiobj.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_gtdisable {win.l,tuiobj.l}
SHARED tuidat()
If \visible
Select \typ
  Case #tobj_button
    GTDisable win,tuiobj

  Case #tobj_string
    GTDisable win,tuiobj

  Case #tobj_numstring
    GTDisable win,tuiobj
    If \ttags & #tui_tag_incdec
      GTDisable win,tuiobj+$1000
      GTDisable win,tuiobj+$2000
    End If

  Case #tobj_cycle
    GTDisable win,tuiobj

  CNIF #tui_use_shapes
  Case #tobj_shapegad
    GTDisable win,tuiobj
  CEND

  Case #tobj_checkbox
    GTDisable win,tuiobj

  Case #tobj_hslider
    GTDisable win,tuiobj

  Case #tobj_vslider
    GTDisable win,tuiobj

  Case #tobj_hscroller
    GTDisable win,tuiobj

  Case #tobj_vscroller
    GTDisable win,tuiobj

  CNIF #tui_use_listview
  Case #tobj_listview
    GTDisable win,tuiobj
  CEND

  CNIF #tui_use_multilist
  Case #tobj_multilist
    If \ttags & #tui_tag_incdec
      GTDisable win,tuiobj+$1000
      GTDisable win,tuiobj+$2000

    End If
  CEND
End Select
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_disable {win.l,tuiobj.l}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_disable {win.l,tuiobj.l}
SHARED tuidat()
Select \typ
  Case #tobj_page
    For n.l=0 To \modulo-1
      tui_disable {win,\child[n]}
    Next

  Case #tobj_hgroup
    For n.l=0 To \value-1
      If \child[n]>=0 Then tui_disable {win,\child[n]}
    Next

  Case #tobj_vgroup
    For n.l=0 To \value-1
      If \child[n]>=0 Then tui_disable {win,\child[n]}
    Next
End Select

If (\ttags & #tui_tag_disabled) = False
 \ttags = \ttags | #tui_tag_disabled
 Select \typ
  Case #tobj_button
    If \visible Then GTDisable win,tuiobj

  Case #tobj_string
    If \visible Then GTDisable win,tuiobj

  Case #tobj_numstring
    If \visible
      GTDisable win,tuiobj
      If \ttags & #tui_tag_incdec
        GTDisable win,tuiobj+$1000
        GTDisable win,tuiobj+$2000
      End If
    End If

  CNIF #tui_use_multilist
  Case #tobj_multilist
    If \visible
      If \ttags & #tui_tag_incdec
        GTDisable win,tuiobj+$1000
        GTDisable win,tuiobj+$2000
      End If
    End If
  CEND
  Case #tobj_cycle
    If \visible Then GTDisable win,tuiobj
  CNIF #tui_use_shapes
  Case #tobj_shapegad
    If \visible Then GTDisable win,tuiobj
  CEND
  Case #tobj_checkbox
    If \visible Then GTDisable win,tuiobj
  Case #tobj_hslider
    If \visible Then GTDisable win,tuiobj
  Case #tobj_vslider
    If \visible Then GTDisable win,tuiobj
  Case #tobj_hscroller
    If \visible Then GTDisable win,tuiobj
  Case #tobj_vscroller
    If \visible Then GTDisable win,tuiobj
  CNIF #tui_use_listview
  Case #tobj_listview
    If \visible Then GTDisable win,tuiobj
  CEND
 End Select

 If win_IsOpen {win}
   tui_draw {win,tuiobj}
 End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_enable {win.l,tuiobj.l}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_enable {win.l,tuiobj.l}
SHARED tuidat()
Select \typ
  Case #tobj_page
    For n.l=0 To \modulo-1
      tui_enable {win,\child[n]}
    Next

  Case #tobj_hgroup
    For n.l=0 To \value-1
      tui_enable {win,\child[n]}
    Next

  Case #tobj_vgroup
    For n.l=0 To \value-1
      tui_enable {win,\child[n]}
    Next
End Select

If (\ttags & #tui_tag_disabled)
 \ttags = \ttags | #tui_tag_disabled - #tui_tag_disabled
 Select \typ
  Case #tobj_button
    If \visible Then GTEnable win,tuiobj

  Case #tobj_string
    If \visible Then GTEnable win,tuiobj

  Case #tobj_numstring
    If \visible
      GTEnable win,tuiobj
      If \ttags & #tui_tag_incdec
        GTEnable win,tuiobj+$1000
        GTEnable win,tuiobj+$2000
      End If
    End If
  CNIF #tui_use_multilist
  Case #tobj_multilist
    If \visible
      If \ttags & #tui_tag_incdec
        GTEnable win,tuiobj+$1000
        GTEnable win,tuiobj+$2000
      End If
    End If
  CEND
  Case #tobj_cycle
    If \visible Then GTEnable win,tuiobj
  CNIF #tui_use_shapes
  Case #tobj_shapegad
    If \visible Then GTEnable win,tuiobj
  CEND
  Case #tobj_checkbox
    If \visible Then GTEnable win,tuiobj
  Case #tobj_hslider
    If \visible Then GTEnable win,tuiobj
  Case #tobj_vslider
    If \visible Then GTEnable win,tuiobj
  Case #tobj_hscroller
    If \visible Then GTEnable win,tuiobj
  Case #tobj_vscroller
    If \visible Then GTEnable win,tuiobj
  CNIF #tui_use_listview
  Case #tobj_listview
    If \visible Then GTEnable win,tuiobj
  CEND
 End Select

 If win_IsOpen {win}
   tui_draw {win,tuiobj}
 End If
End If
End Statement

;Runerrsoff
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_dolayout {win.l,tuiobj.l,xoff.l,yoff.l,xs.l,ys.l}               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - xoff.l    : ???                                                           /
;/ - yoff.l    : ???                                                           /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_dolayout{win.l,tuiobj.l,xoff.l,yoff.l,xs.l,ys.l} ;--------------------------------------------
SHARED tuidat(),tuiengine,winengine,windat() ;,dolayout.l
;dolayout+1
;If dolayout>1000 Then error {"Deadlock in dolayout !"}
;error {"Do Layout: Obj # "+Str$(tuiobj)}

;If \typ=#tobj_hgroup OR \typ=#tobj_vgroup
;If \ttags AND #tui_tag_fixedxs
;  \x = xoff + (xs-\xs) / 2
;  xs = \xs
;  xoff = \x
;End If
;If \ttags AND #tui_tag_fixedys
;  \y = yoff + (ys-\ys) / 2
;  ys = \ys
;  yoff = \y
;End If
;End If

\x  = xoff
\y  = yoff
\xs = xs
\ys = ys
\visible = True

; debug
;Select \typ
;  Default
;    Use Screen 0
  ;  ShowScreen 0
  ;  error {"Init tui object #"+Str$(tuiobj)+", typ "+Str$(\typ)+", value="+Str$(\value)+", string="+Left$(\text,20)}
;End Select

If (\ttags AND #tui_tag_nospace) = False
  \x+tuiengine\space
  \y+tuiengine\space
  \xs-tuiengine\space*2
  \ys-tuiengine\space*2

  If (\ttags AND #tui_tag_gframe) OR (\ttags AND #tui_tag_iframe) OR (\ttags AND #tui_tag_bframe)
    \x+2+tuiengine\space:\y+2+tuiengine\space:\xs-tuiengine\space*2-4:\ys-tuiengine\space*2-4
    If \frametitle><"" AND (\typ=#tobj_hgroup OR \typ=#tobj_vgroup)
      \ys-tuiengine\fontsize_med:\y+tuiengine\fontsize_med
    End If

    ;\x -2
    ;\y-2
    ;\xs+4
    ;\ys+4
  End If

Else
  If (\ttags AND #tui_tag_gframe) OR (\ttags AND #tui_tag_iframe) OR (\ttags AND #tui_tag_bframe)
    \x+2+tuiengine\space:\y+2+tuiengine\space:\xs-tuiengine\space*2-4:\ys-tuiengine\space*2-4
    If \frametitle><"" AND (\typ=#tobj_hgroup OR \typ=#tobj_vgroup)
      \ys-tuiengine\fontsize_med:\y+tuiengine\fontsize_med
    End If
  End If

End If

; tuning
If \typ=#tobj_button OR \typ=#tobj_cycle OR \typ=#tobj_string OR \typ=#tobj_numstring OR \typ=#tobj_checkbox
  If (\ttags AND #tui_tag_nospace) = False Then \y-tuiengine\space_decrease/2:\ys+tuiengine\space_decrease
End If


Select \typ
  Case #tobj_page
    If \ttags & #tui_tag_small=False
      yn.l = tuiengine\fontsize_med + tuiengine\space * 3 + 2
    Else
      yn.l = tuiengine\fontsize_small + tuiengine\space * 3 + 2
    End If
    For m.l=0 To \modulo-1
      If \child[m]>=0
      If m = \value
        If \ttags&#tui_tag_below
          tui_dolayout {win,\child[m],\x+tuiengine\space,\y+tuiengine\space,\xs-tuiengine\space*2,\ys-yn-tuiengine\space-2}
        Else
          tui_dolayout {win,\child[m],\x+tuiengine\space,\y+yn+tuiengine\space,\xs-tuiengine\space*2,\ys-yn-tuiengine\space-2}
        End If
      Else
        tui_hide {win,\child[m]}
      End If
      End If
    Next

  Case #tobj_hgroup
    \x-tuiengine\space
    \y-tuiengine\space
    \xs+tuiengine\space*2
    \ys+tuiengine\space*2
    minxs.l = 0
    minys.l = 0
    modulo.l = (\value-1):If modulo>=\modulo Then modulo = \modulo-1
    div.l    = (\value-1)  /  \modulo
    For m.l = 0 To modulo
      minxs + \moduloxs[m]
    Next
    For m.l = 0 To div
      minys + \moduloys[m]
    Next
    s.l = 0
    For m=0 To modulo
      If (tuidat(win,\child[m])\ttags AND #tui_tag_fixedxs) = 0 Then s+1
    Next
    If s=0
     staticoffsetx.l = (\xs-minxs)/2
    Else
      staticoffsetx.l = 0
      dx.l = \xs -minxs:sx.l = dx/s
      For m=0 To modulo
        If (tuidat(win,\child[m])\ttags AND #tui_tag_fixedxs) = 0 Then \moduloxs[m] + sx:minxs+sx
      Next

  ;    m.l=0
  ;    While minxs<\xs
  ;      If (tuidat(win,\child[m])\ttags AND #tui_tag_fixedxs) = 0
  ;        \moduloxs[m] + 1:minxs+1
  ;      End If
  ;      m+1 : If m>modulo Then m=0
  ;    Wend

    End If
    s.l = 0
    For m=0 To div
      If (tuidat(win,\child[m])\ttags AND #tui_tag_fixedys) = 0 Then s+1
    Next
    If s=0
      staticoffsety.l = (\ys-minys)/2
    Else
      staticoffsety=0
      dy.l = \ys -minys:sy.l = dy/s
      For m=0 To div
        If (tuidat(win,\child[m])\ttags AND #tui_tag_fixedys) = 0 Then \moduloys[m] + sy:minys+sy
      Next
    End If

    For n.l=0 To \value-1
      modulo.l = n MOD \modulo
      div.l    = n  /  \modulo
      xoff=0:yoff=0
      For m.l=0 To modulo-1
        xoff + \moduloxs[m]
      Next
      For m=0 To div-1
        yoff + \moduloys[m]
      Next

      tui_dolayout{win,\child[n],\x+xoff+staticoffsetx,\y+yoff+staticoffsety,\moduloxs[modulo],\moduloys[div]}
    Next

  Case #tobj_vgroup
    \x-tuiengine\space
    \y-tuiengine\space
    \xs+tuiengine\space*2
    \ys+tuiengine\space*2

    minxs.l = 0
    minys.l = 0
    modulo.l = (\value-1):If modulo>=\modulo Then modulo = \modulo-1
    div.l    = (\value-1)  /  \modulo
    For m.l = 0 To div
      minxs + \moduloxs[m]
    Next
    For m.l = 0 To modulo
      minys + \moduloys[m]
    Next

    s.l = 0

    For m=0 To div
      If (tuidat(win,\child[m])\ttags AND #tui_tag_fixedxs) = 0 Then s+1
    Next
    If s=0
      staticoffsetx.l = (\xs-minxs)/2
    Else
      staticoffsetx=0
      dx.l = \xs -minxs:sx.l = dx/s
      For m=0 To div
        If (tuidat(win,\child[m])\ttags AND #tui_tag_fixedxs) = 0 Then \moduloxs[m] + sx:minxs+sx
      Next
    End If

    s.l = 0
    For m=0 To modulo
      If (tuidat(win,\child[m])\ttags AND #tui_tag_fixedys) = 0 Then s+1
    Next
    If s=0
      staticoffsety.l = (\ys-minys)/2
    Else
      staticoffsety=0
      dy.l = \ys -minys:sy.l = dy/s
      For m=0 To modulo
        If (tuidat(win,\child[m])\ttags AND #tui_tag_fixedys) = 0 Then \moduloys[m] + sy:minys+sy
      Next
    End If

    For n.l=0 To \value-1
      modulo.l = n MOD \modulo
      div.l    = n  /  \modulo
      xoff=0:yoff=0
      For m.l=0 To div-1
        xoff + \moduloxs[m]
      Next
      For m=0 To modulo-1
        yoff + \moduloys[m]
      Next
      tui_dolayout{win,\child[n],\x+xoff+staticoffsetx,\y+yoff+staticoffsety,\moduloxs[div],\moduloys[modulo]}
    Next

  Case #tobj_button
    If (\gtflags AND #NG_TTOGGLE)=#NG_TTOGGLE
      If \value Then \gtflags=\gtflags|#NG_BOOLVALUE:Else \gtflags=\gtflags|#NG_BOOLVALUE - #NG_BOOLVALUE
    End If
    If (\ttags & #tui_tag_nospace) Then \ys-1:\xs-1
    If (\ttags & #tui_tag_small) Then Use IntuiFont #tui_font_small
    If (\ttags & #tui_tag_big) Then Use IntuiFont #tui_font_big
    GTButton win,tuiobj,\x+tuiengine\wlo,\y+tuiengine\wto,\xs,\ys,\text,\gtflags
    Use IntuiFont #tui_font_med

  Case #tobj_string
    GTString win,tuiobj,\x+tuiengine\wlo,\y+tuiengine\wto,\xs,\ys,"",\gtflags,\chars,\text
    *gad.Gadget = GTGadPtr(win,tuiobj)
    If *gad
      \view_yo = *gad\GadgetRender
      *gad\GadgetRender=False
    End If

  Case #tobj_numstring
    x.l = \x+tuiengine\wlo
    y.l = \y+tuiengine\wto
    If \ttags & #tui_tag_incdec
      x2.l = x+\xs
      xs = \ys
      GTButton win,tuiobj+$1000,x2-xs*2 ,y,xs,\ys,"+",\gtflags;$0
      GTButton win,tuiobj+$2000,x2-xs   ,y,xs,\ys,"-",\gtflags;$0

    Else
      xs=0
    End If
    GTInteger win,tuiobj,x,y,\xs-xs*2,\ys,"",\gtflags,\value
    *gad.Gadget = GTGadPtr(win,tuiobj)
    If *gad
      *gad\GadgetRender=False
    End If


  Case #tobj_cycle
    GTCycle win,tuiobj,\x+tuiengine\wlo,\y+tuiengine\wto,\xs,\ys,"",\gtflags,\text,\value

  Case #tobj_label

    If \ttags AND #tui_tag_small
      \y+(\ys-tuiengine\fontsize_small)/2
      \ys = tuiengine\fontsize_small+1
    End If

    If \ttags AND #tui_tag_big
      \y+(\ys-tuiengine\fontsize_big)/2
      \ys = tuiengine\fontsize_big+1
    End If

    If (\ttags AND (#tui_tag_small|#tui_tag_big)) = False
      \y+(\ys-tuiengine\fontsize_med)/2
      \ys = tuiengine\fontsize_med+1
    End If

    If \ttags AND #tui_tag_nospace Then \x+tuiengine\space:\xs-tuiengine\space*2

  Case #tobj_view
    \x  + \child[2]
    \y  + \child[3]
    \xs + \child[4]
    \ys + \child[5]

  CNIF #tui_use_texteditor
  Case #tobj_texteditor
    xs.l = 8 + tuiengine\fontsize_med/2 + tuiengine\space*1
    If \ttags&#tui_tag_below
      \ys - tuiengine\fontsize_med - tuiengine\space
    End If
    If \ttags&#tui_tag_nframe=0
      \xs-xs
      \ys-xs
      ted_init_scroller {\modulo,win,tuiobj}
      *ted.tuited = \modulo
      scalerx.l = *ted\view_x/32768+1
      scalery.l = \view_ys/32768+1

      GTScroller win,tuiobj+$1000,\x+tuiengine\wlo-tuiengine\space      ,\y+\ys+tuiengine\wto+tuiengine\space+1,\xs+1+tuiengine\space*1,xs,"",#NG_SCALED|#NG_IMMEDIATE,\view_xf/scalerx,\view_xs/scalerx,\view_xo/scalerx
      GTScroller win,tuiobj+$2000,\x+\xs+tuiengine\wlo+tuiengine\space+1,\y+tuiengine\wto-tuiengine\space,xs,\ys+tuiengine\space*2+1+xs,"",#NG_VERTICAL|#NG_ARROWS|#NG_SCALED|#NG_IMMEDIATE,\view_yf/scalery,\view_ys/scalery,\view_yo/scalery
    End If
  CEND

  CNIF #tui_use_multilist
  Case #tobj_multilist
    xs.l = 8+tuiengine\fontsize_med/2 + tuiengine\space*1
    If \ttags&#tui_tag_nframe=0
      \xs-xs
      \ys-xs
      \view_ys = ml_GetRowHeight{\modulo}
      \view_yf = \ys/tuiengine\fontsize_med
      visible.l = \view_yf
      total.l   = \view_ys
      offset.l  = \view_yo
      GTScroller win,tuiobj+$2000,\x+\xs+tuiengine\wlo+tuiengine\space+1,\y+tuiengine\wto-tuiengine\space,xs,\ys+tuiengine\space*2+1+xs,"",#NG_IMMEDIATE|#NG_VERTICAL|#NG_ARROWS|#NG_SCALED,visible,total,offset
      \view_xf  = \xs
      visible.l = \view_xf
      total.l   = \view_xs
      offset.l  = \view_xo
      GTScroller win,tuiobj+$1000,\x+tuiengine\wlo-tuiengine\space       ,\y+\ys+tuiengine\wto+tuiengine\space+1,\xs+1+tuiengine\space*1,xs,"",#NG_IMMEDIATE|#NG_SCALED,visible,total,offset
    End If
  CEND

  Case #tobj_space

  CNIF #tui_use_shapes
  Case #tobj_shape
    If \ttags AND #tui_tag_centered
      \x + \xs/2 - ShapeWidth(\minvalue)/2
      \y + \ys/2 - ShapeHeight(\minvalue)/2
    Else
      \y + \ys/2 - ShapeHeight(\minvalue)/2
    End If
    If \ttags AND #tui_tag_right
      \x + \xs - ShapeWidth(\minvalue)
    End If
  CEND

  CNIF #tui_use_image
  Case #tobj_image
    xs.l=0
    ys.l=0
    For m=0 To #max_childs-1
      image.l = \child[m]
      If image_IsUsed {image}
        xs = Max(xs,image_GetWidth {image} )
        ys = Max(ys,image_GetHeight{image} )
      End If
    Next

    If \ttags AND #tui_tag_below
      \y + \ys - ys
      \ys = ys
    End If
    If \ttags AND #tui_tag_right
      \x + \xs - xs
      \xs=xs
    End If
    If \ttags AND #tui_tag_top
      \ys=ys
    End If
    If \ttags AND #tui_tag_right
      \xs=xs
    End If

    If \ttags AND #tui_tag_centered
      \x + (\xs-xs)/2
      \y + (\ys-ys)/2
    End If

    \xs = xs
    \ys = ys

  Case #tobj_imagegad
    xs = image_GetWidth {\minvalue}
    ys = image_GetHeight{\minvalue}
    If \frametitle><""
      ys + tuiengine\fontsize_med + tuiengine\space*2
      l.l = textlen{\frametitle,tuiengine\font_med}
      If l>xs Then xs=l
    End If

    If \ttags AND #tui_tag_below
      \y + \ys - ys
      \ys = ys
    End If
    If \ttags AND #tui_tag_right
      \x + \xs - xs
      \xs=xs
    End If
    If \ttags AND #tui_tag_top
      \ys=ys
    End If
    If \ttags AND #tui_tag_right
      \xs=xs
    End If

    If \ttags AND #tui_tag_centered
      \x + (\xs-xs)/2
      \y + (\ys-ys)/2
    End If


    \xs = xs
    \ys = ys
  CEND
  CNIF #tui_use_shapes
  Case #tobj_shapegad
    If (\gtflags AND #NG_TTOGGLE)=#NG_TTOGGLE
      If \value Then \gtflags=\gtflags|#NG_BOOLVALUE:Else \gtflags=\gtflags|#NG_BOOLVALUE - #NG_BOOLVALUE
    End If
    If \ttags AND #tui_tag_below Then \y = \y+\ys-ShapeHeight(\minvalue) ; -tuiengine\space

    If\maxvalue><-1
      GTShape win,tuiobj,\x+tuiengine\wlo,\y+tuiengine\wto,\gtflags,\minvalue,\maxvalue
    Else
      GTShape win,tuiobj,\x+tuiengine\wlo,\y+tuiengine\wto,\gtflags,\minvalue
    End If
  CEND

  Case #tobj_checkbox
    If \ttags AND #tui_tag_centered
      \x + (\xs - 26)/2
    End If
    If \ttags AND #tui_tag_right
      \x + \xs - 26
    End If
    \xs = 26
    If \ys>26 Then \y + (\ys - 26)/2:\ys = 26
    If \value Then \gtflags=\gtflags|#NG_BOOLVALUE:Else \gtflags=\gtflags|#NG_BOOLVALUE - #NG_BOOLVALUE
    GTCheckBox win,tuiobj,\x+tuiengine\wlo,\y+tuiengine\wto,26,\ys,"",\gtflags

  Case #tobj_hslider
    If (\ttags & #tui_tag_nospace) Then \ys-1:\xs-1

    Select \dat1
      Case #slider_freq
        minf.f = Log(\minvalue) * 20
        maxf.f = Log(\maxvalue) * 20
        valf.f = Log(\value)    * 20
        maxl.l = Int(maxf)
        minl.l = Int(minf)
        vall.l = Int(valf)
        If valf>maxf Then valf=maxf
        If valf<minf Then valf=minf
        GTSlider win,tuiobj,\x+tuiengine\wlo,\y+tuiengine\wto,\xs-\chars,\ys,"",\gtflags,minl,maxl,vall

      Default
        ; AmiBlitzBug

        ; Workaround:
        maxl.l = \maxvalue/\view_yo
        minl.l = \minvalue/\view_yo
        vall.l = \value/\view_yo
        GTSlider win,tuiobj,\x+tuiengine\wlo,\y+tuiengine\wto,\xs-\chars,\ys,"",\gtflags,minl,maxl,vall

        ; Verursacht Bug:
;        GTSlider win,tuiobj,\x+tuiengine\wlo,\y+tuiengine\wto,\xs-\chars,\ys,"",\gtflags,\minvalue/\view_yo,\maxvalue/\view_yo,\value/\view_yo


    End Select

;    \y = (\ys-tuiengine\fontsize_med)/2 + \y - tuiengine\space
   ; If (\ttags & #tui_tag_nospace) Then \ys-1
   ; \x = \x + \xs-\chars + tuiengine\space

  Case #tobj_vslider
    If \dat1><#slider_none
      dy.l = tuiengine\fontsize_small+tuiengine\space+1
    End If
    xs.l = \xs
    If xs>tuiengine\fontsize_med+tuiengine\space*4 Then xs=tuiengine\fontsize_med+tuiengine\space*4
   ; GTSlider win,tuiobj,\x+tuiengine\wlo+(\xs-xs)/2,\y+tuiengine\wto,xs,\ys-dy,"",\gtflags,\minvalue/\view_yo,\maxvalue/\view_yo,\value/\view_yo
    Select \dat1
      Case #slider_freq
        maxf.f = Int(Log(\minvalue) * 20)
        minf.f = Int(Log(\maxvalue) * 20)
        valf.f = Int(Log(\value)    * 20)
        If valf>maxf Then valf=maxf
        If valf<minf Then valf=minf
        GTSlider win,tuiobj,\x+tuiengine\wlo+(\xs-xs)/2,\y+tuiengine\wto,xs,\ys-dy,"",\gtflags,minf,maxf,valf

      Case #slider_mixergain
        CNIF #gainexp=1
        minf.f = Log(\minvalue+1) * #mixergain_res
        maxf.f = Log(\maxvalue+1) * #mixergain_res
        valf.f = Log(\value+1)    * #mixergain_res
        CELSE
        minf = Sqr(\minvalue) * 20
        maxf = Sqr(\maxvalue) * 20
        valf = Sqr(\value) * 20
        CEND
        maxl.l = Int(maxf) + 1
        minl.l = Int(minf)
        vall.l = Int(valf)
        GTSlider win,tuiobj,\x+tuiengine\wlo+(\xs-xs)/2,\y+tuiengine\wto,xs,\ys-dy,"",\gtflags,minl,maxl,vall

      Default
        GTSlider win,tuiobj,\x+tuiengine\wlo+(\xs-xs)/2,\y+tuiengine\wto,xs,\ys-dy,"",\gtflags,\minvalue/\view_yo,\maxvalue/\view_yo,\value/\view_yo

    End Select

  Case #tobj_vscroller
    scroller_value.l    = \value     / \view_yo
    scroller_minvalue.l = \minvalue  / \view_yo
    scroller_maxvalue.l = \maxvalue  / \view_yo
    GTScroller win,tuiobj,\x+tuiengine\wlo,\y+tuiengine\wto,\xs,\ys,"",\gtflags,scroller_minvalue,scroller_maxvalue,scroller_value

  Case #tobj_hscroller
    scroller_value.l    = \value     / \view_yo
    scroller_minvalue.l = \minvalue  / \view_yo
    scroller_maxvalue.l = \maxvalue  / \view_yo
    GTScroller win,tuiobj,\x+tuiengine\wlo,\y+tuiengine\wto,\xs,\ys,"",\gtflags,scroller_minvalue,scroller_maxvalue,scroller_value

  CNIF #tui_use_listview
  Case #tobj_listview
    \x-tuiengine\space:\xs+tuiengine\space*2
    \y-tuiengine\space:\ys+tuiengine\space*2
    \xs-tuiengine\fontsize_med-tuiengine\space
    \minvalue = (\ys-tuiengine\space-1) / (tuiengine\fontsize_med+tuiengine\space)
    If \frametitle><"" Then \minvalue-1
    If \modulo+\minvalue>\maxvalue Then \modulo = \maxvalue-\minvalue:If \modulo<0 Then \modulo=0
    xs.l = 8+tuiengine\fontsize_med/2 + tuiengine\space*1
    GTScroller win,tuiobj,\x+\xs+tuiengine\wlo,\y+tuiengine\wto-tuiengine\space,xs,\ys+tuiengine\space*2,"",\gtflags,\minvalue,\maxvalue,\modulo
    \xs - tuiengine\space-1
  CEND

  Case #tobj_statusbar
    \y+(\ys-tuiengine\fontsize_med+2)/2
    \ys = tuiengine\fontsize_med - 2

;  Case #tobj_mx
;    GTMX win,tuiobj,\x,\y,\xs,\ys,"",\gtflags,\text,\value
  CNIF #tui_use_audio
  Case #tobj_levelmeter
   ;\x+tuiengine\space +2
   ;\y+tuiengine\space +2

    If \ttags AND #tui_tag_centered
      \x + (\xs-30)/2
      \y + (\ys-87)/2
    Else
      \y + (\ys-87)/2
    End If
    If \ttags AND #tui_tag_right
      \x + \xs - 31
    End If
    \xs = 31
    \ys = 87
  Case #tobj_envelope

  CEND

  Default
    error {"Unknown Object Type ! - Typ:"+Str$(\typ)+" Number: "+Str$(tuiobj)}

End Select

If \ttags AND #tui_tag_disabled
  tui_gtdisable {win,tuiobj} ; was: gtdisable
End If
End Statement
;Runerrson

USEPATH tuidat(acwin,tuiobj)

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_addhgroup {tuiobj.l,modulo.l,@child1.l,@child2.l,@child3.l,@c:: /
;/ hild4.l}                                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - modulo.l    : ???                                                         /
;/ - child1.l    : ???                                                         /
;/ - child2.l    : ???                                                         /
;/ - child3.l    : ???                                                         /
;/ - child4.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_addhgroup {tuiobj.l,modulo.l,@child1.l,@child2.l,@child3.l,@child4.l}
SHARED tuidat(),acwin.l
If \typ><#tobj_hgroup
  \typ    = #tobj_hgroup
  \modulo = modulo
  \value  = 0
  \ttags   = 0
  \notify = 0
  For n.l=0 To #max_childs-1
    \child[n]=-1
  Next

End If
If child1><-1 Then \child[\value] = child1:\value+1
If child2><-1 Then \child[\value] = child2:\value+1
If child3><-1 Then \child[\value] = child3:\value+1
If child4><-1 Then \child[\value] = child4:\value+1
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setflag {tuiobj.l,flag.l}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - flag.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setflag{tuiobj.l,flag.l}
SHARED tuidat(),acwin
\gtflags = \gtflags OR flag
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_settag {tuiobj.l,tag.l}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - tag.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_settag {tuiobj.l,tag.l}
SHARED tuidat(),acwin
\ttags = \ttags OR tag
If tag AND #tui_tag_disabled
  maxobj.l = 0
  If \typ = #tobj_hgroup OR \typ = #tobj_vgroup Then maxobj = \value
  If \typ = #tobj_page Then maxobj = \modulo
  For n.l=0 To maxobj-1
    tui_settag{\child[n],#tui_tag_disabled}
  Next
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_resettag {tuiobj.l,tag.l}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - tag.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_resettag {tuiobj.l,tag.l}
SHARED tuidat(),acwin
\ttags = \ttags AND (NOT tag)
If tag AND #tui_tag_disabled
  maxobj.l = 0
  If \typ = #tobj_hgroup OR \typ = #tobj_vgroup Then maxobj = \value
  If \typ = #tobj_page Then maxobj = \modulo
  For n.l=0 To maxobj-1
    tui_resettag{\child[n],#tui_tag_disabled}
  Next
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setsize {tuiobj.l,xs.l,ys.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setsize {tuiobj.l,xs.l,ys.l}
SHARED tuidat(),acwin
If xs>=0 Then \xs = xs
If ys>=0 Then \ys = ys
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_frametitle {tuiobj.l,title.s}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - title.s    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_frametitle {tuiobj.l,title.s}
SHARED tuidat(),acwin,tuiengine
\frametitle = title.s
Select \typ
  Case #tobj_hgroup
    tui_settag{tuiobj,#tui_tag_gframe}
  Case #tobj_vgroup
    tui_settag{tuiobj,#tui_tag_gframe}
  CNIF #tui_use_listview
  Case #tobj_listview
    pos.l  = 1
    row.l  = 0
    \frametitle = ""
    ; "%c" = #tui_tag_centered
    ; "%r" = #tui_tag_right
    ; "%l" = #tui_tag_left
    ; "%b" = #tui_tag_bold
    ; "%h" = #tui_tag_highlight
    ; "%d" = #tui_tag_disabled
    useframetitle.l = False
    xpos.l = tuiengine\space
    While pos<Peek.l(&title.s-4)+4 AND row<#max_childs
      \moduloxs[row]=0
      While Peek.b(&title.s+pos-1)=@"%"
        ttag.l = 0
        Select Peek.b(&title.s+pos)
          Case @"c"
            ttag.l = #tui_tag_centered
          Case @"b"
            ttag.l = #tui_tag_bold
          Case @"d"
            ttag.l = #tui_tag_disabled
          Case @"r"
            ttag   = #tui_tag_right
          Case @"l"
            ttag   = #tui_tag_left
          Case @"h"
            ttag   = #tui_tag_highlight
          Case @"s"
            ttag   = #tui_tag_small
          Case @"a"
            ttag   = #tui_tag_alert
          Case @"i"
            ttag   = #tui_tag_nframe
          Case @"v"
            ttag   = #tui_tag_bframe
          Case @"g"
            ttag   = #tui_tag_bright
        End Select
        \moduloxs[row] | ttag
        pos+2
      Wend
      \child[row] = xpos
      row+1
      lpos.l = pos
      pos = Instr(title.s,">=",pos)
      If pos<1
        pos=Peek.l(&title.s-4)+5
      Else
        pos+2
        titletags.l = \moduloxs[row-1]|\ttags
        ;If ((titletags) AND #tui_tag_small) Then font.l=#tui_font_small:Else font=#tui_font_med
        font.l = #tui_font_med
        xpos + textlen{Mid$(title.s,lpos,pos-lpos-2),font} + tuiengine\space*2+2
      End If
      \frametitle + Mid$(title.s,lpos,pos-lpos)
    Wend
    If Replace$(Replace$(\frametitle,">=","")," ","")="" Then \frametitle=""
  CEND
End Select
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_view_trim {tuiobj.l,tx.w,ty.w,txs.w,tys.w}                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - tx.w    : ???                                                             /
;/ - ty.w    : ???                                                             /
;/ - txs.w    : ???                                                            /
;/ - tys.w    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_view_trim {tuiobj.l,tx.w,ty.w,txs.w,tys.w}
SHARED tuidat(),acwin
\child[2] = tx  ; trim x
\child[3] = ty  ;      y
\child[4] = txs ;      xs
\child[5] = tys ;      ys
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_view {tuiobj.l,ttags.l,color.l,@notify.l}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - ttags.l    : ???                                                          /
;/ - color.l    : ???                                                          /
;/ - notify.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_view {tuiobj.l,ttags.l,color.l,@notify.l}
SHARED tuidat(),acwin
\typ   = #tobj_view
\ttags  = ttags
\value = color
\child[0] = -1    ; hslider
\child[1] = -1    ; vlsider
\child[2] = 0 ; trim x
\child[3] = 0 ;      y
\child[4] = 0 ;      xs
\child[5] = 0 ;      ys
\child[7] = #mousepointer_normal
\view_xf = 1
\view_yf = 1
\view_xs = 1
\view_ys = 1
\view_xo = 0
\view_yo = 0
If notify=-1 Then \notify  = 0:Else \notify = notify
End Statement


CNIF #tui_use_texteditor
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_texteditor {tuiobj.l,ttags.l,ted_ptr.l,@ted_tags.l,@minwidth.:: /
;/ l,@minrows.l}                                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - ttags.l    : ???                                                          /
;/ - ted_ptr.l    : ???                                                        /
;/ - ted_tags.l    : ???                                                       /
;/ - minwidth.l    : ???                                                       /
;/ - minrows.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_texteditor {tuiobj.l,ttags.l,ted_ptr.l,@ted_tags.l,@minwidth.l,@minrows.l}
SHARED tuidat(),acwin,tuiengine,tuipen()
\typ    = #tobj_texteditor
\ttags  = ttags;|#tui_tag_iframe
\value  = tuipen(#tpen_bg)
If ted_ptr
  \modulo   = ted_ptr
  \minvalue = True    ; stolen
Else
  If ted_tags=-1 Then ted_tags = #tuited_notepad
  \modulo = ted_create {tuiengine\fontname_med,tuiengine\fontsize_med,ted_tags,3}
  ted_setfont{\modulo,tuiengine\fontname_med,tuiengine\fontsize_med}
  \minvalue = False
End If
\view_xs = 1
\view_xf = 1
\view_xo = 1

\view_ys = 1
\view_yf = 1
\view_yo = 1

If minwidth>0 Then \xs=minwidth
If minrows>0 Then *ted.tuited=\modulo : \ys = minrows**ted\rowheight
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_ted_ptr {win.l,tuiobj.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_ted_ptr{win.l,tuiobj.l}
SHARED tuidat()
Function Return tuidat(win,tuiobj)\modulo
End Function

CEND

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_addvgroup {tuiobj.l,modulo.l,@child1.l,@child2.l,@child3.l,@c:: /
;/ hild4.l}                                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - modulo.l    : ???                                                         /
;/ - child1.l    : ???                                                         /
;/ - child2.l    : ???                                                         /
;/ - child3.l    : ???                                                         /
;/ - child4.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_addvgroup {tuiobj.l,modulo.l,@child1.l,@child2.l,@child3.l,@child4.l}
SHARED tuidat(),acwin
If \typ><#tobj_vgroup
  \typ    = #tobj_vgroup
  \modulo = modulo
  \value  = 0
  \ttags   = 0
  \notify = 0
  For n.l=0 To #max_childs-1
    \child[n]=-1
  Next
End If
If child1><-1 Then \child[\value] = child1:\value+1
If child2><-1 Then \child[\value] = child2:\value+1
If child3><-1 Then \child[\value] = child3:\value+1
If child4><-1 Then \child[\value] = child4:\value+1
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_addpage {tuiobj.l,defaultchild.l,@child1.l,@child2.l,@child3.:: /
;/ l,@child4.l}                                                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - defaultchild.l    : ???                                                   /
;/ - child1.l    : ???                                                         /
;/ - child2.l    : ???                                                         /
;/ - child3.l    : ???                                                         /
;/ - child4.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_addpage {tuiobj.l,defaultchild.l,@child1.l,@child2.l,@child3.l,@child4.l}
SHARED tuidat(),acwin
If \typ><#tobj_page
  \typ    = #tobj_page
  \value  = defaultchild
  \modulo = 0
  \ttags   = #tui_tag_centered
  \notify = 0
  For n.l=0 To #max_childs-1
    \child[n]=-1
  Next

End If
If child1><-1
  If \modulo<#max_childs Then \child[\modulo]=child1 : \modulo+1
  tui_resettag {child1,#tui_tag_gframe}
End If
If child2><-1
  If \modulo<#max_childs Then \child[\modulo]=child2 : \modulo+1
  tui_resettag {child2,#tui_tag_gframe}
End If
If child3><-1
  If \modulo<#max_childs Then \child[\modulo]=child3 : \modulo+1
  tui_resettag {child3,#tui_tag_gframe}
End If
If child4><-1
  If \modulo<#max_childs Then \child[\modulo]=child4 : \modulo+1
  tui_resettag {child4,#tui_tag_gframe}
End If
If \modulo>#max_childs Then \modulo=#max_childs
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_addmore {win.l}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_addmore {win.l}
SHARED tuidat(),acwin
acwin = win
End Statement





;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setswitches {tuiobj.l,switch.w,@child1.w,@child2.w,@child3.w,:: /
;/ @child4.w}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - switch.w    : ???                                                         /
;/ - child1.w    : ???                                                         /
;/ - child2.w    : ???                                                         /
;/ - child3.w    : ???                                                         /
;/ - child4.w    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setswitches {tuiobj.l,switch.w,@child1.w,@child2.w,@child3.w,@child4.w}
SHARED acwin,tuidat()
If tuidat(acwin,tuiobj)\typ=#tobj_checkbox
  \minvalue = switch
  If child1><-1
    \child[\modulo]=child1:\modulo+1
   ; If Abs(\value)-Abs(switch)=0 Then tui_settag{child1,#tui_tag_disabled}:Else tui_resettag{child1,#tui_tag_disabled}
  End If
  If child2><-1
    \child[\modulo]=child2:\modulo+1
   ; If Abs(\value)-Abs(switch)=0 Then tui_settag{child2,#tui_tag_disabled}:Else tui_resettag{child2,#tui_tag_disabled}
  End If
  If child3><-1
    \child[\modulo]=child3:\modulo+1
   ; If Abs(\value)-Abs(switch)=0 Then tui_settag{child3,#tui_tag_disabled}:Else tui_resettag{child3,#tui_tag_disabled}
  End If
  If child4><-1
    \child[\modulo]=child4:\modulo+1
   ; If Abs(\value)-Abs(switch)=0 Then tui_settag{child4,#tui_tag_disabled}:Else tui_resettag{child4,#tui_tag_disabled}
  End If
Else
  error {"Tried to set a switch on a non-checkbox object!"}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_doswitches {win.l}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_doswitches {win.l}
SHARED acwin,tuidat()
For tuiobj.l=0 To #max_tuigads-1
  If tuidat(win,tuiobj)\typ=#tobj_checkbox
    m.l = 0
    While tuidat(win,tuiobj)\child><-1 AND m<tuidat(win,tuiobj)\modulo
      If Abs(tuidat(win,tuiobj)\value)-Abs(tuidat(win,tuiobj)\minvalue)=0
        tui_settag{tuidat(win,tuiobj)\child[m],#tui_tag_disabled}
      Else
        tui_resettag{tuidat(win,tuiobj)\child[m],#tui_tag_disabled}
      End If
      m+1
    Wend
  End If
Next
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_copyword {tuiobj.l,ptr.l}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - ptr.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_copyword{tuiobj.l,ptr.l}
SHARED acwin,tuidat()
\view_xf = ptr
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_copybyte {tuiobj.l,ptr.l}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - ptr.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_copybyte{tuiobj.l,ptr.l}
SHARED acwin,tuidat()
\view_yf = ptr
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_copylong {tuiobj.l,ptr.l}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - ptr.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_copylong{tuiobj.l,ptr.l}
SHARED acwin,tuidat()
\view_xo = ptr
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_copystring {tuiobj.l,ptr.l}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - ptr.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_copystring{tuiobj.l,ptr.l}
SHARED acwin,tuidat()
\view_xs = ptr
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_button {tuiobj.l,text.s,notify.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - text.s    : ???                                                           /
;/ - notify.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_button{tuiobj.l,text.s,notify.l}
SHARED tuidat(),acwin,tuiengine
\typ   = #tobj_button
\text  = text.s
\ttags  = #tui_tag_fixedys|tuiengine\deftags
\notify = notify
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_statusbar {tuiobj.l,resolution.l,value.l}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - resolution.l    : ???                                                     /
;/ - value.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_statusbar {tuiobj.l,resolution.l,value.l}
SHARED tuidat(),acwin,tuiengine
\typ      = #tobj_statusbar
\maxvalue = resolution
\value    = value
\ttags     = #tui_tag_fixedys;|tuiengine\deftags
\notify   = False
\xs       = 8
End Statement

CNIF #tui_use_audio
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_levelmeter {tuiobj.l,allleds.l,yellowleds.l,stereo.w}           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - allleds.l    : ???                                                        /
;/ - yellowleds.l    : ???                                                     /
;/ - stereo.w    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_levelmeter {tuiobj.l,allleds.l,yellowleds.l,stereo.w}
SHARED tuidat(),acwin,tuiengine
\typ      = #tobj_levelmeter
\maxvalue = -1
\minvalue = -1
\value    = 0
\chars    = stereo
\ttags    = #tui_tag_iframe|#tui_tag_fixedys|#tui_tag_fixedxs|tuiengine\deftags|#tui_tag_centered
\notify   = False
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_env_gain {win.l,tuiobj.l,pos.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - pos.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_env_gain{win.l,tuiobj.l,pos.l}
SHARED tuidat()
Function Return tuidat(win,tuiobj)\moduloys[pos]
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_env_time {win.l,tuiobj.l,pos.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - pos.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_env_time{win.l,tuiobj.l,pos.l}
SHARED tuidat()
Function Return tuidat(win,tuiobj)\moduloxs[pos]
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_envelope {tuiobj.l,flags.l}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - flags.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_envelope {tuiobj.l,flags.l}
SHARED tuidat(),acwin,tuiengine
\typ      = #tobj_envelope
\maxvalue = -1
\minvalue = -1
\value    = -1
\chars    = 0
\ttags    = #tui_tag_iframe|tuiengine\deftags|flags
\notify   = False

\moduloxs[0] = 0
\moduloys[0] = 0

\moduloxs[1] = #env_max*1/4
\moduloys[1] = #env_max-1

\moduloxs[2] = #env_max*2/4
\moduloys[2] = #env_max/2

\moduloxs[3] = #env_max*3/4
\moduloys[3] = #env_max/2

End Statement

CEND


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_mux {tuiobj.l,options.s,value.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - options.s    : ???                                                        /
;/ - value.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_mux {tuiobj.l,options.s,value.l}
SHARED tuidat(),acwin,tuiengine
\typ      = #tobj_mx
\text     = options.s
\value    = value
\ttags    = tuiengine\deftags
\notify   = False
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_label {tuiobj.l,text.s,ttags.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - text.s    : ???                                                           /
;/ - ttags.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_label{tuiobj.l,text.s,ttags.l}
SHARED tuidat(),acwin,tuiengine
\typ  = #tobj_label
\text = text.s
\ttags = ttags|#tui_tag_fixedxs|#tui_tag_fixedys|(tuiengine\deftags|#tui_tag_hl_all -#tui_tag_hl_all)
\gtflags = 0
\notify = 0
\value = tuiengine\font_med
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_cycle {tuiobj.l,text.s,value.l,@notify.l}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - text.s    : ???                                                           /
;/ - value.l    : ???                                                          /
;/ - notify.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_cycle{tuiobj.l,text.s,value.l,@notify.l}
SHARED tuidat(),acwin,tuiengine
\typ     = #tobj_cycle
\text    = text.s
\value   = value
\ttags    = #tui_tag_fixedys|tuiengine\deftags
\gtflags = 0
If notify=-1 Then \notify  = 0:Else \notify = notify
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_string {tuiobj.l,maxchars.l,text.s}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - maxchars.l    : ???                                                       /
;/ - text.s    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_string{tuiobj.l,maxchars.l,text.s}
SHARED tuidat(),acwin,tuiengine
\typ    = #tobj_string
\text   = text.s
\chars  = maxchars
\ttags   = #tui_tag_fixedys|tuiengine\deftags
\gtflags = 0
\notify = 0
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_numstring {tuiobj.l,minvalue.l,maxvalue.l,value.l}              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - minvalue.l    : ???                                                       /
;/ - maxvalue.l    : ???                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_numstring {tuiobj.l,minvalue.l,maxvalue.l,value.l}
SHARED tuidat(),acwin,tuiengine
\typ   = #tobj_numstring
\value = value
\minvalue = minvalue
\maxvalue  = maxvalue
\chars = Len(Str$(maxvalue))+2
\ttags  = #tui_tag_fixedys|tuiengine\deftags
\gtflags= 0
\notify = 0
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_space {tuiobj.l,xs.l,ys.l,@ttags.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/ - ttags.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_space{tuiobj.l,xs.l,ys.l,@ttags.l}
SHARED tuidat(),acwin,tuiengine
\typ = #tobj_space
If xs < 0 Then xs = 0
If ys < 0 Then ys = tuiengine\fontsize_med
\minvalue = xs
\maxvalue = ys
If ttags=-1 Then ttags=0
\ttags    = ttags
\gtflags  = 0
\notify   = 0
\value    = -1
\xs       = -tuiengine\space*2
\ys       = -tuiengine\space*2
End Statement

CNIF #tui_use_shapes
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_shape {tuiobj.l,bshape.l}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - bshape.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_shape {tuiobj.l,bshape.l}
SHARED tuidat(),acwin,tuiengine
\typ      = #tobj_shape
\ttags    = #tui_tag_fixedys|#tui_tag_fixedxs|#tui_tag_centered|tuiengine\deftags
\minvalue = bshape
\maxvalue = 0
\gtflags  = 0
\notify   = 0
End Statement
CEND

CNIF #tui_use_image
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_image {tuiobj.l,@visible.l,@image1.l,@image2.l,@image3.l,@ima:: /
;/ ge4.l}                                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - visible.l    : ???                                                        /
;/ - image1.l    : ???                                                         /
;/ - image2.l    : ???                                                         /
;/ - image3.l    : ???                                                         /
;/ - image4.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_image {tuiobj.l,@visible.l,@image1.l,@image2.l,@image3.l,@image4.l}
SHARED tuidat(),acwin,tuiengine
\typ      = #tobj_image
\ttags    = #tui_tag_fixedys|#tui_tag_fixedxs|tuiengine\deftags
\value    = visible
\maxvalue = 0
\gtflags  = 0
\notify   = 0
For m.l = 0 To #max_childs-1 : \child[m]=-1:Next
For m.l = 0 To #max_childs-1 : If \child[m] = -1 Then \child[m]=image1:m=#max_childs
Next
For m.l = 0 To #max_childs-1 : If \child[m] = -1 Then \child[m]=image2:m=#max_childs
Next
For m.l = 0 To #max_childs-1 : If \child[m] = -1 Then \child[m]=image3:m=#max_childs
Next
For m.l = 0 To #max_childs-1 : If \child[m] = -1 Then \child[m]=image4:m=#max_childs
Next
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_image_add {tuiobj.l,image1.l,@image2.l,@image3.l,@image4.l}     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - image1.l    : ???                                                         /
;/ - image2.l    : ???                                                         /
;/ - image3.l    : ???                                                         /
;/ - image4.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_image_add {tuiobj.l,image1.l,@image2.l,@image3.l,@image4.l}
SHARED tuidat(),acwin.l
For m.l = 0 To #max_childs-1 : If \child[m] = -1 Then \child[m]=image1:m=#max_childs
Next
For m.l = 0 To #max_childs-1 : If \child[m] = -1 Then \child[m]=image2:m=#max_childs
Next
For m.l = 0 To #max_childs-1 : If \child[m] = -1 Then \child[m]=image3:m=#max_childs
Next
For m.l = 0 To #max_childs-1 : If \child[m] = -1 Then \child[m]=image4:m=#max_childs
Next
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_image_addfile {tuiobj.l,filename.s}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_image_addfile {tuiobj.l,filename.s}
SHARED tuidat(),acwin.l
image.l = image_FindByName {filename.s}
If image<0
  image = image_GetFree {}
  If image>=0
    If image_Load {image,filename.s,$ff00ff} = False Then image=-1
  End If
End If

For m.l = 0 To #max_childs-1
  If \child[m] = -1 Then \child[m]=image:m=#max_childs
Next
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_imagegad {tuiobj.l,image1.l,image2.l,status.l,notify.l}         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - image1.l    : ???                                                         /
;/ - image2.l    : ???                                                         /
;/ - status.l    : ???                                                         /
;/ - notify.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_imagegad {tuiobj.l,image1.l,image2.l,status.l,notify.l}
SHARED tuidat(),acwin,tuiengine
\typ      = #tobj_imagegad
\value    = status
\minvalue = image1
\maxvalue = image2
\ttags     = #tui_tag_fixedys|#tui_tag_fixedxs|tuiengine\deftags
If \value><-1
  \gtflags = #NG_TTOGGLE : If \value Then \value = True
  ;error {"Imagegad: Togle set !"}
Else
  \gtflags = 0
  \value=0
End If
\notify   = notify
End Statement


CEND

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_hslider {tuiobj.l,minv.l,maxv.l,formatstring.s,init.l}          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - minv.l    : ???                                                           /
;/ - maxv.l    : ???                                                           /
;/ - formatstring.s    : ???                                                   /
;/ - init.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_hslider {tuiobj.l,minv.l,maxv.l,formatstring.s,init.l}
SHARED tuidat(),acwin,tuiengine
\typ      = #tobj_hslider
\text     = formatstring.s
\minvalue = minv
\maxvalue = maxv
\value    = init
\gtflags  = #NG_IMMEDIATE
\notify   = 0
\dat1     = #slider_linear
\ttags    = #tui_tag_fixedys|tuiengine\deftags
\view_yo  = 1
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_stepsize {tuiobj.l,stepsize.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - stepsize.l    : ???                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_stepsize {tuiobj.l,stepsize.l}
SHARED acwin,tuidat()
\view_yo  = stepsize
;\minvalue
;\maxvalue
;\value
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_hscroller {tuiobj.l,visible.l,total.l,init.l,arrows.l}          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - visible.l    : ???                                                        /
;/ - total.l    : ???                                                          /
;/ - init.l    : ???                                                           /
;/ - arrows.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_hscroller {tuiobj.l,visible.l,total.l,init.l,arrows.l}
SHARED tuidat(),acwin,tuiengine
\typ      = #tobj_hscroller
\visible  = False
tui_initscroller {acwin,tuiobj,visible,total,init}
\gtflags  = #NG_IMMEDIATE  : If arrows Then \gtflags = \gtflags | #NG_ARROWS|#NG_SCALED
\notify   = 0
\ttags     = #tui_tag_fixedys|tuiengine\deftags
For n.l = 0 To #max_childs-1
  \child[n] = -1
Next
\view_yo  = 1
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_vscroller {tuiobj.l,visible.l,total.l,init.l,arrows.l}          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - visible.l    : ???                                                        /
;/ - total.l    : ???                                                          /
;/ - init.l    : ???                                                           /
;/ - arrows.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_vscroller {tuiobj.l,visible.l,total.l,init.l,arrows.l}
SHARED tuidat(),acwin,tuiengine
\typ      = #tobj_vscroller
\visible  = False
tui_initscroller {acwin,tuiobj,visible,total,init}
\gtflags  = #NG_IMMEDIATE|#NG_VERTICAL  : If arrows Then \gtflags = \gtflags | #NG_ARROWS|#NG_SCALED
\notify   = 0
\ttags     = #tui_tag_fixedxs|tuiengine\deftags
For n.l = 0 To #max_childs-1
  \child[n] = -1
Next
\view_yo  = 1
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_sliderlevel {tuiobj.l,slidertyp.l}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - slidertyp.l    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_sliderlevel {tuiobj.l,slidertyp.l}
SHARED tuidat(),acwin,tuiengine
\dat1     = slidertyp
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_vslider {tuiobj.l,minv.l,maxv.l,formatstring.s,init.l}          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - minv.l    : ???                                                           /
;/ - maxv.l    : ???                                                           /
;/ - formatstring.s    : ???                                                   /
;/ - init.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_vslider {tuiobj.l,minv.l,maxv.l,formatstring.s,init.l}
SHARED tuidat(),acwin,tuiengine
\typ      = #tobj_vslider
\text     = formatstring.s
\minvalue = minv
\maxvalue = maxv
\value    = init
\gtflags  = #NG_IMMEDIATE|#NG_VERTICAL
\notify   = 0
\dat1     = #slider_linear
\ttags    = #tui_tag_fixedxs|tuiengine\deftags
\view_yo  = 1
End Statement

CNIF #tui_use_shapes
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_shapegad {tuiobj.l,shap1.l,shap2.l,status.l,notify.l}           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - shap1.l    : ???                                                          /
;/ - shap2.l    : ???                                                          /
;/ - status.l    : ???                                                         /
;/ - notify.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_shapegad {tuiobj.l,shap1.l,shap2.l,status.l,notify.l}
SHARED tuidat(),acwin,tuiengine
\typ      = #tobj_shapegad
\value    = status
\minvalue = shap1
\maxvalue = shap2
\ttags     = #tui_tag_fixedys|#tui_tag_fixedxs|tuiengine\deftags
If \value><-1
  \gtflags = #NG_TTOGGLE: If \value Then \value = -1
Else
  \value=0
End If
\notify   = notify
End Statement
CEND



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_checkbox {tuiobj.l,status.l,@notify.l}                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - status.l    : ???                                                         /
;/ - notify.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_checkbox{tuiobj.l,status.l,@notify.l}
SHARED tuidat(),acwin,tuiengine
\typ     = #tobj_checkbox
\value   = status
\gtflags = #NG_SCALED
If status Then \gtflags|#NG_BOOLVALUE
\ttags    = #tui_tag_fixedxs|#tui_tag_fixedys|tuiengine\deftags
If notify=-1
  \notify  = 0
Else
  \notify = notify
End If
\minvalue = 0
\modulo   = 0
End Statement

CNIF #tui_use_listview
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview {tuiobj.l,notify.l,@ttags.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - notify.l    : ???                                                         /
;/ - ttags.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview {tuiobj.l,notify.l,@ttags.l}
SHARED tuidat(),acwin,tuiengine
\typ      = #tobj_listview
\gtflags  = #NG_IMMEDIATE|#NG_VERTICAL|#NG_ARROWS|#NG_SCALED
\notify   = notify.l
If ttags=-1 Then ttags = 0
\ttags    = ttags|#tui_tag_iframe
\dat1     = 0   ; Pointer zum ersten Element
\maxvalue = 0   ; Anzahl der Elemente
\minvalue = 0   ; Sichtbare Elemente
\value    = -1  ; Active
\modulo   = 0   ; Start Offset
\frametitle = ""
For n.l = 0 To #max_childs-1
  \child   [n] = -1              ; X-Offsets der Spalten
  \moduloxs[n] = #tui_tag_left   ; Tags
  \moduloys[n] = 0               ; unused
Next
\child [0] = tuiengine\space
End Statement
CEND

CNIF #tui_use_multilist
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_multilist {tuiobj.l,notify.l,@node.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - notify.l    : ???                                                         /
;/ - node.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_multilist {tuiobj.l,notify.l,@node.l}
SHARED tuidat(),acwin,tuiengine
\typ      = #tobj_multilist
\gtflags  = #NG_IMMEDIATE|#NG_VERTICAL|#NG_ARROWS|#NG_SCALED
\notify   = notify.l
\ttags    = #tui_tag_iframe
\dat1     = 0
\maxvalue = 0
\minvalue = True ; stolen!
\value    = -1
If node=-1 OR node=0 Then node = ml_AddNode {0,#node_simple,"...","...",0}:\minvalue = False
\modulo   = node
\view_yo = 0
\view_ys = 1
\view_yf = 1
\view_xo = 0
\view_xs = 1
\view_xf = 1
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_multilist_path {tuiobj.l,notify.l,path.s,name.s,pattern.s,@ma:: /
;/ keroot.l}                                                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - notify.l    : ???                                                         /
;/ - path.s    : ???                                                           /
;/ - name.s    : ???                                                           /
;/ - pattern.s    : ???                                                        /
;/ - makeroot.l    : ???                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_multilist_path {tuiobj.l,notify.l,path.s,name.s,pattern.s,@makeroot.l}
SHARED tuidat(),acwin,tuiengine
\typ      = #tobj_multilist
\gtflags  = #NG_IMMEDIATE|#NG_VERTICAL|#NG_ARROWS|#NG_SCALED
\notify   = notify.l
\ttags    = #tui_tag_iframe|#tui_tag_diskbrowse
\dat1     = 0
\maxvalue = 0
\minvalue = False ; not stolen
\value    = -1
\text     = pattern.s
If makeroot
\modulo   = ml_CreatePathTreeRoot{path.s,name.s}
Else
\modulo   = ml_CreatePathTree{path.s,pattern.s}
End If
;ml_path_expand {\modulo}
\view_yo = 0
\view_ys = 1
\view_yf = 1
\view_xo = 0
\view_xs = 1
\view_xf = 1
End Statement

USEPATH tuidat(win,tuiobj)
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_multilist_updsliders {win.l,tuiobj.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_multilist_updsliders {win.l,tuiobj.l}
SHARED tuidat()
\view_yo = 0
\view_ys = 1
;\view_yf = 1
\view_xo = 0
\view_xs = 1
;\view_xf = 1

\view_ys = ml_GetRowHeight {\modulo}
\view_xs = ml_GetPixelWidth {RastPort(win),\modulo,0}
GTSetAttrs win,tuiobj+$1000,#GTSC_Total,\view_xs,#GTSC_Top,\view_xo
GTSetAttrs win,tuiobj+$2000,#GTSC_Total,\view_ys,#GTSC_Top,\view_yo

End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_multilist_setpath {win.l,tuiobj.l,newpath.s,name.s,pattern.s,:: /
;/ @makeroot.l}                                                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - newpath.s    : ???                                                        /
;/ - name.s    : ???                                                           /
;/ - pattern.s    : ???                                                        /
;/ - makeroot.l    : ???                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_multilist_setpath {win.l,tuiobj.l,newpath.s,name.s,pattern.s,@makeroot.l}
SHARED tuidat(),tuiengine
If win>=0 AND tuiobj>=0
  If tuidat(win,tuiobj)\modulo Then ml_RemoveAllNodes{ tuidat(win,tuiobj)\modulo}
  tuidat(win,tuiobj)\modulo=0
  ;\dat1     = 0
  ;\maxvalue = 0
  \minvalue = False ; not stolen
  \value    = -1
  \text     = pattern.s
  If makeroot
  \modulo   = ml_CreatePathTreeRoot{newpath.s,name.s}
  Else
  \modulo   = ml_CreatePathTree{newpath.s,pattern.s}
  End If
  tui_multilist_updsliders{win,tuiobj}
  tui_draw {win,tuiobj}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_multilist_replace {win.l,tuiobj.l,node.l,@destroy.l}            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - node.l    : ???                                                           /
;/ - destroy.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_multilist_replace {win.l,tuiobj.l,node.l,@destroy.l}
SHARED tuidat(),tuiengine
node.l = ml_GetFirstNode {node}
If destroy Then ml_RemoveAllNodes{ tuidat(win,tuiobj)\modulo}
tuidat(win,tuiobj)\modulo = node
tui_multilist_updsliders{win,tuiobj}
tui_draw {win,tuiobj}

End Statement
USEPATH tuidat(acwin,tuiobj)
CEND

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_notify {tuiobj.l,notifydata.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - notifydata.l    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_notify {tuiobj.l,notifydata.l}
SHARED tuidat(),acwin,tuiengine
\notify = notifydata
End Statement




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_connect {view.l,scroller.l}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - view.l    : ???                                                           /
;/ - scroller.l    : ???                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_connect {view.l,scroller.l}
SHARED tuidat(),acwin
If tuidat(acwin,view)\typ = #tobj_view
 If tuidat(acwin,scroller)\typ = #tobj_hscroller OR tuidat(acwin,scroller)\typ = #tobj_vscroller
  connector.l = 0
  While tuidat(acwin,scroller)\child[connector]><-1 AND connector<#max_childs-1
    connector+1
  Wend
  If tuidat(acwin,scroller)\child[connector]=-1
   tuidat(acwin,scroller)\child[connector] = view
   If tuidat(acwin,scroller)\typ = #tobj_hscroller
     tuidat(acwin,scroller)\notify   = #notify_internal_viewscroller_h
     tuidat(acwin,view)\child[0]     = scroller
     visible.l = tuidat(acwin,view)\xs/tuidat(acwin,view)\view_xf
     tui_initscroller {acwin,scroller,visible,tuidat(acwin,view)\view_xs,tuidat(acwin,view)\view_xo}
   Else
     tuidat(acwin,scroller)\notify   = #notify_internal_viewscroller_v
     tuidat(acwin,view)\child[1]     = scroller
     visible.l = tuidat(acwin,view)\ys/tuidat(acwin,view)\view_yf
     tui_initscroller {acwin,scroller,visible,tuidat(acwin,view)\view_ys,tuidat(acwin,view)\view_yo}
   End If
  Else
     error {"TUI: Tried to connect too much objects to scroller "+Str$(scroller)}
  End If
 Else
  error {"Tried to connect to a non-scroller object ! #"+Str$(scroller)}
 End If
Else
  error {"Tried to connect with a non-view object ! #"+Str$(view)}
End If
End Statement


USEPATH tuidat(win,tuiobj)


CNIF #tui_use_listview
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_show {win.l,tuiobj.l,pos.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - pos.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_show {win.l,tuiobj.l,pos.l}
SHARED tuidat(),tuiengine
If pos<0 Then pos=\value
If pos>\maxvalue Then pos=\maxvalue-1
If pos>=0
;If \minvalue>2
;  newmod.l = pos - \minvalue / 2
;Else
;  newmod   = pos - 2
;End If
;If newmod<0 Then newmod=0
;If newmod+\minvalue>\maxvalue Then newmod = \maxvalue-\minvalue


  newmod.l = \modulo
  If pos<\modulo Then newmod = pos
  If pos>\modulo + \minvalue-1 Then newmod = pos-\minvalue+1
  If newmod><\modulo
  tui_listview_scrollto {win,tuiobj,newmod}

  If win_IsOpen {win}
    If \visible
      GTSetAttrs win,tuiobj,#GTSC_Top,\modulo,#GTSC_Total,\maxvalue
    ;tui_draw {win,tuiobj}
    End If
  End If
  End If
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_update {win.l,tuiobj.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_update {win.l,tuiobj.l}
SHARED tuidat(),tuiengine
If win_IsOpen {win}
  If \visible
    GTSetAttrs win,tuiobj,#GTSC_Top,\modulo,#GTSC_Total,\maxvalue
    tui_draw {win,tuiobj}
  End If
End If
End Statement
CEND


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_update_strings {win.l}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_update_strings{win.l}
SHARED tuidat()
;message{"Werde alle Stirng retten..."}
For n.l = 0 To #max_tuigads-1
  If tuidat(win,n)\typ = #tobj_string AND tuidat(win,n)\visible=True
;    tuidat(win,n)\text = GTGetString (win,n)  ; Buggy under OS4
    strptr.l = 0
    *gad.Gadget = GTGadPtr(win,n)
    If *gad
      GT_GetGadgetAttrsA_ *gad,Peek.l(Addr Window(win)),0,Tags(#GTST_String,&strptr.l)
    Else
      ;error {"Huch, der String hatte gar kein Gadget Pointer !!!!"}
    End If
    If strptr Then tuidat(win,n)\text = Peek.s(strptr):Else tuidat(win,n)\text=""

  End If
  If tuidat(win,n)\typ = #tobj_numstring AND tuidat(win,n)\visible=True
    ;tuidat(win,n)\value = GTGetInteger (win,n) ; Buggy under OS4
    *gad.Gadget = GTGadPtr(win,n)
    If *gad
      GT_GetGadgetAttrsA_ *gad,Peek.l(Addr Window(win)),0,Tags(#GTIN_Number,&value.l)
      tuidat(win,n)\value = value
    End If
    If tuidat(win,n)\value>tuidat(win,n)\maxvalue Then tuidat(win,n)\value = tuidat(win,n)\maxvalue
    If tuidat(win,n)\value<tuidat(win,n)\minvalue Then tuidat(win,n)\value = tuidat(win,n)\minvalue
  End If
Next
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_addwoffsets {win.l}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_addwoffsets {win.l}
SHARED tuidat(),tuiengine,winengine,windat()
Use Window win
For n.l=0 To #max_tuigads-1
  If (windat(win)\flags & #WFLG_BORDERLESS)=False
    tuidat(win,n)\x+winengine\def_wleftoff;tuiengine\wlo ; WLeftOff
    tuidat(win,n)\y+winengine\def_wtopoff ;tuiengine\wto ; WTopOff
  End If
  CNIF #tui_use_texteditor
  If tuidat(win,n)\typ = #tobj_texteditor AND  tuidat(win,n)\visible Then ted_attach_tuiobj {tuidat(win,n)\modulo,win,n}
  CEND
Next
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_addwoffsets_pre {win.l}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_addwoffsets_pre {win.l}
SHARED tuidat(),winengine,windat()
If (windat(win)\flags & #WFLG_BORDERLESS)=False
  For n.l=0 To #max_tuigads-1
    tuidat(win,n)\x+winengine\def_wleftoff
    tuidat(win,n)\y+winengine\def_wtopoff
  Next
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_copyvalue {win.l,tuiobj.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_copyvalue {win.l,tuiobj.l}
SHARED tuidat()
succ.l = False
If \typ=#tobj_hslider  OR \typ=#tobj_vslider OR \typ=#tobj_vscroller OR \typ=#tobj_hscroller Then succ=True
If \typ=#tobj_checkbox OR \typ=#tobj_page    OR \typ=#tobj_numstring Then succ=True
CNIF #tui_use_listview
If \typ=#tobj_listview Then succ=True
CEND

If \typ=#tobj_cycle    OR \typ=#tobj_button Then succ=True
If succ
  If tuidat(win,tuiobj)\view_yf Then Poke.b tuidat(win,tuiobj)\view_yf,tuidat(win,tuiobj)\value
  If tuidat(win,tuiobj)\view_xf Then Poke.w tuidat(win,tuiobj)\view_xf,tuidat(win,tuiobj)\value
  If tuidat(win,tuiobj)\view_xo Then Poke.l tuidat(win,tuiobj)\view_xo,tuidat(win,tuiobj)\value
  If tuidat(win,tuiobj)\view_xs Then error {"Stringcopy !!!"}
End If
End Statement




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_freegtlist {win.l}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_freegtlist {win.l}
SHARED tuidat()
If Peek.l(Addr GTList(win))
  DetachGTList win
  For tuiobj.l = 0 To #max_tuigads-1
    Select tuidat(win,tuiobj)\typ
      Case #tobj_string
        If \visible
          *gad.Gadget = GTGadPtr(win,tuiobj)
          If *gad Then *gad\GadgetRender=\view_yo
        End If

      Case #tobj_numstring
        If \visible
          *gad.Gadget = GTGadPtr(win,tuiobj)
          If *gad Then *gad\GadgetRender=\view_yo
        End If

    End Select
  Next
  Free GTList win
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_makesize {win.l,tuiobj.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_makesize {win.l,tuiobj.l} ; ------------------------------------------------
SHARED tuidat(),tuiengine,makesize.l
;If \xs+\ys=0
;makesize+1:If makesize>1000 Then error {"Dealdlock in makesize !"}
ox.l = \xs
oy.l = \ys
;\visible = False



Select \typ
  Case #tobj_page
    \xs = 0
    \ys = 0
    For m.l=0 To \modulo-1
      size.l = tui_makesize {win,\child[m]}
      xs.l = size MOD 32768
      ys.l = size  /  32768
      If xs>\xs Then \xs = xs
      If ys>\ys Then \ys = ys
    Next
    \xs + tuiengine\space * 2 + 2
    \ys + tuiengine\space * 5 + 4 + tuiengine\fontsize_med

  Case #tobj_hgroup
    \xs = 0
    \ys = 0
    For m.l=0 To \value-1 ; #max_childs-1
      \moduloxs[m] = 0
      \moduloys[m] = 0
    Next
    fixtag.l = #tui_tag_fixedys|#tui_tag_fixedxs
    For n.l=0 To \value-1
      size.l    = tui_makesize{win,\child[n]}
      modulo.l  = n MOD \modulo
      div.l     = n  /  \modulo
      xs.l      = size MOD 32768
      ys.l      = size  /  32768
      If xs>\moduloxs[modulo] Then \moduloxs[modulo] = xs
      If ys>\moduloys[div   ] Then \moduloys[div   ] = ys
      fixtag.l = fixtag AND tuidat(win,\child[n])\ttags
    Next
    \ttags|fixtag
    n-1 ; ?
    If n>=\modulo Then n = \modulo-1
    If (\ttags AND #tui_tag_samexs) ;OR (\ttags AND #tui_tag_samesize)
      mxs.l = 0
      For m=0 To n
        If mxs<\moduloxs[m] Then mxs=\moduloxs[m]
      Next
      For m=0 To n
        \moduloxs[m] = mxs
      Next
    End If

    If (\ttags AND #tui_tag_sameys) ;OR (\ttags AND #tui_tag_samesize)
      mys.l = 0
      For m=0 To div
        If mys < \moduloys[m] Then mys = \moduloys[m]
      Next
      For m=0 To div
        \moduloys[m] = mys
      Next
    End If

    For m=0 To n
      \xs + \moduloxs[m]
    Next
    For m=0 To div
      \ys + \moduloys[m]
    Next

    \xs - tuiengine\space*2
    \ys - tuiengine\space*2

  Case #tobj_vgroup
    \xs = 0
    \ys = 0
    For m.l=0 To \value-1 ; #max_childs-1
      \moduloxs[m] = 0
      \moduloys[m] = 0
    Next
    fixtag.l = #tui_tag_fixedys|#tui_tag_fixedxs
    For n.l=0 To \value-1
      size.l    = tui_makesize{win,\child[n]}
      modulo.l  = n MOD \modulo
      div.l     = n  /  \modulo
      xs.l      = size MOD 32768
      ys.l      = size  /  32768
      If xs>\moduloxs[div   ] Then \moduloxs[div   ] = xs
      If ys>\moduloys[modulo] Then \moduloys[modulo] = ys
      fixtag = fixtag AND tuidat(win,\child[n])\ttags
    Next
    \ttags|fixtag

    n-1
    If n>=\modulo Then n = \modulo-1

    If (\ttags AND #tui_tag_samexs) ;OR (\ttags AND #tui_tag_samesize)
      mxs.l = 0
      For m=0 To div
        If mxs< \moduloxs[m] Then mxs=\moduloxs[m]
      Next
      For m=0 To div
        \moduloxs[m] = mxs
      Next
    End If

    If (\ttags AND #tui_tag_sameys) ;OR (\ttags AND #tui_tag_samesize)
      mys.l = 0
      For m=0 To n
        If mys< \moduloys[m] Then mys=\moduloys[m]
      Next
      For m=0 To n
        \moduloys[m] = mys
      Next
    End If
    For m=0 To div
      \xs + \moduloxs[m]
    Next
    For m=0 To n
      \ys + \moduloys[m]
    Next

    \xs - tuiengine\space*2
    \ys - tuiengine\space*2


  Case #tobj_button

    If (\ttags & #tui_tag_small)
      \xs = textlen{\text+"!!",tuiengine\font_small}  + tuiengine\space*2
      \ys = tuiengine\fontsize_small        + tuiengine\space*1    + 2
    End If

    If (\ttags & #tui_tag_big)
      \xs = textlen{\text+"!!",tuiengine\font_big}  + tuiengine\space*2
      \ys = tuiengine\fontsize_big        + tuiengine\space*1    + 2
    End If

    If (\ttags & (#tui_tag_small|#tui_tag_big)) = False
      \xs = textlen{\text+"!!",tuiengine\font_med}  + tuiengine\space*2
      \ys = tuiengine\fontsize_med        + tuiengine\space*1    + 2
    End If

  Case #tobj_string
    chars.w = QLimit(\chars,1,8) + QLimit(\chars/4,1,4)
    For n=0 To chars:a.s+"e":Next
    \xs = textlen{a.s+"!!",tuiengine\font_med}    + tuiengine\space*2
    \ys = tuiengine\fontsize_med        + tuiengine\space*1    + 2

  Case #tobj_numstring
    a.s=""
    For n=1 To \chars:a.s+"8":Next
    \xs = textlen{a.s+"!!",tuiengine\font_med}    + tuiengine\space*2
    \ys = tuiengine\fontsize_med        + tuiengine\space*1     + 2
    If \ttags & #tui_tag_incdec
      \xs + 20 + tuiengine\space*4
    End If

  Case #tobj_cycle
    a.s = \text
    \xs=0
    \minvalue=0
    \maxvalue=-1
    While a.s><""
      m.l = 1
      \maxvalue+1
      While Mid$(a.s,m,1)><"|" AND m<Len(a.s)
        m.l+1
      Wend

      If m<Len(a.s) Then b.s = Left$(a.s,m-1):Else b.s = a.s
      a.s =Right$(a.s,Len(a.s)-m)
      txs.l = textlen{b.s+"!!",tuiengine\font_med}
      If txs>\xs Then \xs=txs
    Wend

    \xs + tuiengine\space*2 +32
    \ys = tuiengine\fontsize_med + tuiengine\space *1 + 2
    If \value>\maxvalue Then \value=\maxvalue
    If \value<\minvalue Then \value=\minvalue

  Case #tobj_label
    If \ttags AND #tui_tag_small
      \value=tuiengine\font_small
      \xs = textlen{\text,\value} + tuiengine\space*2 + 2
      \ys = tuiengine\fontsize_small      + tuiengine\space*1 + 2
    End If

    If \ttags AND #tui_tag_big
      \value=tuiengine\font_big
      \xs = textlen{\text,\value} + tuiengine\space*2 + 2
      \ys = tuiengine\fontsize_big      + tuiengine\space*1 + 2
    End If

    If (\ttags AND (#tui_tag_small|#tui_tag_big))=False
      \value=tuiengine\font_med
      \xs = textlen{\text,\value} + tuiengine\space*2 + 2
      \ys = tuiengine\fontsize_med      + tuiengine\space*1 + 2
    End If

  Case #tobj_space
    \xs = \minvalue ;- tuiengine\space*2
    \ys = \maxvalue ;- tuiengine\space*2

  CNIF #tui_use_shapes
  Case #tobj_shape
    \xs = ShapeWidth (\minvalue)
    \ys = ShapeHeight(\minvalue)
  CEND
  CNIF #tui_use_image
  Case #tobj_image
    \xs=0
    \ys=0
    For m=0 To #max_childs-1
      image.l = \child[m]
      If image_IsUsed {image}
        \xs = Max(\xs,image_GetWidth {image} )
        \ys = Max(\ys,image_GetHeight{image} )
      End If
    Next

  Case #tobj_imagegad
    ;\xs = image_GetWidth {\minvalue}
    ;\ys = image_GetHeight{\minvalue}
    ;If \frametitle><""
    ;  \ys + tuiengine\fontsize_med + tuiengine\space*2
    ;End If
    \xs = image_GetWidth {\minvalue}
    \ys = image_GetHeight{\minvalue}
    If \frametitle><""
      \ys + tuiengine\fontsize_med + tuiengine\space*2
      l.l = textlen{\frametitle,tuiengine\font_med}
      If l>\xs Then \xs=l
    End If


  CEND

  CNIF #tui_use_shapes
  Case #tobj_shapegad
    \xs = ShapeWidth (\minvalue)
    \ys = ShapeHeight(\minvalue)
  CEND

  Case #tobj_checkbox
    \xs = 32
    \ys = tuiengine\fontsize_med + tuiengine\space*1    + 2

  CNIF #tui_use_listview
  Case #tobj_listview
    \xs = 32  + tuiengine\space * 2
    \ys = tuiengine\fontsize_med * 3 + tuiengine\space * 8 + 2
  CEND
  CNIF #tui_use_multilist
  Case #tobj_multilist
    \xs = 64  + tuiengine\space * 2
    \ys = tuiengine\fontsize_med * 3 + tuiengine\space * 8 + 2
  CEND

  Case #tobj_mx
    \xs = 50
    \ys = tuiengine\fontsize_med + tuiengine\space*1    + 2

  Case #tobj_statusbar
    \xs = 8
    \ys = tuiengine\fontsize_med + 2
  CNIF #tui_use_audio
  Case #tobj_levelmeter
    \xs = 31
    \ys = 87
  Case #tobj_envelope
    \xs = 20
    \ys = 20
  CEND

  Case #tobj_hslider
    maxchars.l = tui_getslidervaluemaxwidth{win,tuiobj,tuiengine\font_med}
    If \dat1><#slider_none
      \chars = maxchars + tuiengine\space*2
      \modulo = \chars  - tuiengine\space
    Else
      \chars = 0
    End If
    \xs = \chars + 20
    \ys = tuiengine\fontsize_med + 2

  Case #tobj_vslider
    maxchars.l = tui_getslidervaluemaxwidth{win,tuiobj,#tui_font_vslider}
    If \dat1><#slider_none
      \chars = maxchars + tuiengine\space*2
      \modulo = \chars  - tuiengine\space
    Else
      \chars = 0
    End If
    \ys = tuiengine\fontsize_med + tuiengine\space * 2 + 40
    \xs = \chars + tuiengine\space * 2

  Case #tobj_hscroller
    \xs = \chars*tuiengine\fontsize_med + 20
    \ys = 8+tuiengine\fontsize_med/2 + tuiengine\space*1

  Case #tobj_vscroller
    \ys = 32
    \xs = 8+tuiengine\fontsize_med/2 + tuiengine\space*1

  Case #tobj_view
    \ys = 2
    \xs = 2
  CNIF #tui_use_texteditor
  Case #tobj_texteditor
    *ted.tuited = modulo
    If *ted
      \ys = *ted\rowheight * 1
      \xs = 10
    End If
  CEND
  Default
    error {"Unknown Object Type ! - Typ:"+Str$(\typ)+" Number: "+Str$(tuiobj)}
    ;NPrint "ERROR: Unknown Object !!! - #",\typ
    \ys = 32
    \xs = 32

End Select

; tuning
If \typ=#tobj_button OR \typ=#tobj_cycle OR \typ=#tobj_string OR \typ=#tobj_numstring OR \typ=#tobj_checkbox
  \ys+tuiengine\button_increase
  If (\ttags AND #tui_tag_nospace) = False Then \ys-tuiengine\space_decrease
End If

If ox>\xs Then \xs = ox
If oy>\ys Then \ys = oy

If (\ttags AND #tui_tag_nospace) = False Then \xs+2*tuiengine\space : \ys + 2*tuiengine\space
If (\ttags AND #tui_tag_gframe) OR (\ttags AND #tui_tag_iframe) OR (\ttags AND #tui_tag_bframe)
  \xs + 4 + tuiengine\space*2
  \ys + 4 + tuiengine\space*2
  If \frametitle><"" Then \ys+tuiengine\fontsize_med
End If

Function Return \xs+\ys*32768
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_resetlayout {win.l}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_resetlayout {win.l}
SHARED tuidat(),tuiparent(),tuiengine,rkeynotify(),winnotify(),vkeynotify()
For n.l=0 To #max_tuigads-1
  tuidat(win,n)\xs         = 0
  tuidat(win,n)\ys         = 0
  tuidat(win,n)\visible    = False
  tuidat(win,n)\x          = 0
  tuidat(win,n)\y          = 0
Next
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_rethink {win.l,@tuiobj.l}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_rethink {win.l,@tuiobj.l}
SHARED tuiengine,tuidat(),windat(),tuiparent(),winnotify(),winengine
If windat(win)\is_open
  ;message{"tui rethink gui !"}
 ; message{"Rette den Inhalt der String Gadgets..."}
  tui_update_strings {win}
 ; message {"Fertig mit retten, hoffe da war jetzt kein Reaper ;-)"}
  Use Window win
  ;message{"Setze den Focus ins Nirvana..."}
  tui_setfocus {win,-1}
  ;message{"Flushe alle anstehenden IDCMP Events..."}
  CNIF #tui_use_intui
  intui_FlushEvents{#IDCMP_GADGETUP|#IDCMP_GADGETDOWN|#IDCMP_MOUSEMOVE|#IDCMP_MOUSEBUTTONS,win}
  CEND
  ;message{"Gebe die GTGadgetliste frei ..."}
  tui_freegtlist {win}
  If tuiobj<0 Then RefreshWindowFrame_ (Peek.l(Addr Window(win)))

  xs.l = InnerWidth  - tuiengine\space * 2
  ys.l = InnerHeight - tuiengine\space * 2
  Use IntuiFont tuiengine\font_med
  If (windat(win)\flags AND #WFLG_BORDERLESS)
    tuiengine\wlo = 0
    tuiengine\wto = 0
  Else
    tuiengine\wlo = winengine\def_wleftoff
    tuiengine\wto = winengine\def_wtopoff
  End If
;  tui_resetlayout {win.l}
;  tuidat(win,tuiparent(win))\xs = InnerWidth
;  tuidat(win,tuiparent(win))\ys = InnerHeight
;  tui_makesize {win,tuiparent(win)}
  tuiengine\mouseover_obj=-1
  ;message{"Berechne das Layout neu..."}
  tui_dolayout {win,tuiparent(win),tuiengine\space,tuiengine\space,xs,ys}
  ;message{"Addiere fixe offsets,..."}
  tui_addwoffsets {win}
  If tuiobj<0
    tuiobj.l = tuiparent(win)
    CNIF #clever_refresh=0
    drawbg {WLeftOff,WTopOff,InnerWidth,InnerHeight}
    CEND
  Else
    CNIF #clever_refresh=0
    drawbg {tuidat(win,tuiobj)\x,tuidat(win,tuiobj)\y,tuidat(win,tuiobj)\xs,tuidat(win,tuiobj)\ys}
    CEND
  End If
  ;message{"Attach GTList ..."}
  ;win_SetClip {win,\x,\y,\x+\xs-1,\y+\ys-1}
  If Peek.l(Addr GTList(win))
    AttachGTList win,win
  End If
  ;win_RemoveClip {win}
  ;error {"Draw..."}
  ;message{"Zeichne alle Custom Gadgets..."}
  tui_draw {win,tuiobj}
 ; win_RemoveClip {win}
 ;message{"Fertig !"}
 ;error {"Draw done..."}
End If
End Statement


CNIF #tui_use_listview

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_listview_setstatus {win.l,tuiobj.l,dpos.l,status.:: /
;/ l,@status2.l}                                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - dpos.l    : ???                                                           /
;/ - status.l    : ???                                                         /
;/ - status2.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_listview_setstatus {win.l,tuiobj.l,dpos.l,status.l,@status2.l}
SHARED tuidat(),tuiengine,tuipen()
*lvitem.tui_lvitem  = \dat1
pos.l      = 0
succ.l = 0


If dpos>=0
  While *lvitem><0
    If dpos=pos
      If *lvitem\li_status >< status Then *lvitem\li_status = status : Function Return True ;: Else *lvitem\li_active = status2
      Function Return False;
    End If
    *lvitem = *lvitem\lv_nextitem
    pos+1
  Wend
Else
  While *lvitem><0
    If *lvitem\li_status >< status Then *lvitem\li_status = status :succ=True ;: Else *lvitem\li_active = status2
    *lvitem = *lvitem\lv_nextitem
  Wend
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_listview_gettags {win.l,tuiobj.l,dpos.l}            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - dpos.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_listview_gettags {win.l,tuiobj.l,dpos.l}
SHARED tuidat(),tuiengine,tuipen()
*lvitem.tui_lvitem      = \dat1
pos.l      = 0
ttags.l   = 0
While *lvitem><0
  If dpos=pos Then Function Return *lvitem\li_tags
  *lvitem = *lvitem\lv_nextitem
  pos+1
Wend
Function Return ttags
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_listview_getstatus {win.l,tuiobj.l,dpos.l}          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - dpos.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_listview_getstatus {win.l,tuiobj.l,dpos.l}
SHARED tuidat(),tuiengine,tuipen()
*lvitem.tui_lvitem      = \dat1
pos.l      = 0
status.l   = 0
While *lvitem><0
  If dpos=pos Then Function Return *lvitem\li_status
  *lvitem = *lvitem\lv_nextitem
  pos+1
Wend
Function Return status
End Function

Function.l tui_listview_getitemptr {win.l,tuiobj.l,dpos.l}
SHARED tuidat(),tuiengine,tuipen()
*lvitem.tui_lvitem      = \dat1
pos.l      = 0
While *lvitem><0 AND pos<dpos
  *lvitem = *lvitem\lv_nextitem
  pos+1
Wend
Function Return *lvitem
End Function


CEND

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setvalue {win.l,tuiobj.l,value.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - value.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setvalue {win.l,tuiobj.l,value.l}
SHARED tuidat(),tuiengine,tuiparent(),tuipen();,dolayout
If \value><value
\value    = value
drawit.l = True
Select \typ
  Case #tobj_hslider
    If \visible
      Select \dat1
        Case #slider_freq
          If \value>\maxvalue Then \value=\maxvalue
          If \value<\minvalue Then \value=\minvalue
          valf.f = Log(\value) * 20
          vall.l = Int(valf)
          GTSetAttrs win,tuiobj,#GTSL_Level,vall

        Default
          value.l = \value / \view_yo
          GTSetAttrs win,tuiobj,#GTSL_Level,value ;/ \view_yo

      End Select
    End If

  Case #tobj_vslider
    If \visible
      Select \dat1
        Case #slider_freq
          valf.f = Log(\value) * 20
          vall.l = Int(valf)
          GTSetAttrs win,tuiobj,#GTSL_Level,vall

        Case #slider_mixergain
          CNIF #gainexp=1
          valf.f = Log(\value+1) * #mixergain_res
          CELSE
          valf = Sqr(\value) *20
          CEND
          vall.l = Int(valf)
          GTSetAttrs win,tuiobj,#GTSL_Level,vall

        Default
          GTSetAttrs win,tuiobj,#GTSL_Level,\value / \view_yo

      End Select
    End If

;  Case #tobj_vslider
;    If \visible Then GTSetAttrs win,tuiobj,#GTSL_Level,\value / \view_yo

  Case #tobj_checkbox
    If \visible Then GTToggle win,tuiobj,value
    For child.w=0 To \modulo-1
      If Abs(value)-Abs(\minvalue)=0 Then tui_disable{win,\child[child]}:Else tui_enable{win,\child[child]}
    Next

  CNIF #tui_use_shapes
  Case #tobj_shape
    \minvalue = \value
  CEND

  Case #tobj_statusbar
    tui_setstatusbar {win,tuiobj,value}

  CNIF #tui_use_shapes
  Case #tobj_shapegad
    If \gtflags AND #NG_TTOGGLE
      If \visible Then GTToggle win,tuiobj,value
    End If
  CEND
  CNIF #tui_use_image
  Case #tobj_imagegad
    If \gtflags AND #NG_TTOGGLE
      ;-)
      ;error {"Imagegad: Toggle set to "+Str$(value)}
    End If
  CEND

  Case #tobj_button
    If \gtflags AND #NG_TTOGGLE
      If \visible Then GTToggle win,tuiobj,value
    End If

  Case #tobj_numstring
    If \value>\maxvalue Then \value=\maxvalue
    If \value<\minvalue Then \value=\minvalue
    If \visible Then GTSetAttrs win,tuiobj,#GTIN_Number,\value ;: Redraw win,tuiobj

  Case #tobj_hscroller
    scroller_value.l = \value / \view_yo
    If \visible Then GTSetAttrs win,tuiobj,#GTSC_Top,scroller_value

  Case #tobj_vscroller
    scroller_value.l = \value / \view_yo
    If \visible Then GTSetAttrs win,tuiobj,#GTSC_Top,scroller_value

  Case #tobj_cycle
    If \value>\maxvalue Then \value=\maxvalue
    If \value<\minvalue Then \value=\minvalue

    If \visible Then GTSetAttrs win,tuiobj,#GTCY_Active,\value

  Case #tobj_mx
    If \visible Then GTSetAttrs win,tuiobj,#GTMX_Active,\value

  CNIF #tui_use_listview
  Case #tobj_listview
    If \value>=\maxvalue Then \value=\maxvalue-1
    If \value<0 Then \value = -1
    If \ttags&#tui_tag_multi
       ;redrawall.l = False
       ;tui_listview_setstatus{win,tuiobj,\value,0}

      ;For pos.l=0 To \maxvalue-1
        redrawall.l = tui_listview_setstatus{win,tuiobj,-1,0}   ; -1 was pos
          ;If pos><value Then
          ;:error {"Redraw "+Str$(pos)}
          ;redrawall=True;
        ;End If
      ;Next
      If value>=0
        If tui_listview_setstatus{win,tuiobj,value,-1}
          If redrawall=False Then tui_listview_draw_content {win,tuiobj,value ,value ,False}
        End If
      End If

      If redrawall Then tui_listview_draw_content{win,tuiobj,0 ,\maxvalue-1,False }
    End If
    If \value>=0
      tui_listview_show{win,tuiobj,\value}
    End If
  CEND
  CNIF #tui_use_multilist
  Case #tobj_multilist
    node.l = ml_FindNode{\modulo,\value}
    If node
      ml_ActivateNode {node}
      tui_draw {win,tuiobj}
    End If
  CEND
  CNIF #tui_use_audio
  Case #tobj_levelmeter
    \value=-1
    tui_levelmeter_refresh{win,tuiobj,(value LSR 16) & $7FFF,value & $7FFF}
    drawit=False
  CEND

  Case #tobj_page
    tui_rethink {win,tuiobj}
    tui_copyvalue {win,tuiobj}
    drawit=False

;      tui_update_strings {win}
;      If \value>=0 Then tui_hide {win,\child[\value]}
;      \value = tpage
;      If \visible
;        Use Window win
;        Use IntuiFont tuiengine\font_med
 ;       tui_freegtlist {win}
 ;       xs.l = InnerWidth  - tuiengine\space * 2
;        ys.l = InnerHeight - tuiengine\space * 2
;        ;dolayout=0
;        tui_dolayout {win,tuiparent(win),tuiengine\space,tuiengine\space,xs,ys}
;        tui_addwoffsets {win}
;        ;WBox \x,\y,\xs+\x-1,\ys+\y-1,tuipen(#tpen_bg)
;        drawbg {\x,\y,\xs,\ys}
;        If Peek.l(Addr GTList(win))
;          AttachGTList win,win
;        End If
;      End If
;      tui_copyvalue {win,tuiobj}
;    End If

End Select
If \visible AND drawit Then tui_draw {win,tuiobj,1}
End If

If \notify AND $80000000
  Select \notify
    Case #notify_internal_viewscroller_h
      connector.l=0
      newpos.l = \value ;* \view_yo
      While \child[connector]><-1
        view.l                   = \child[connector]
        oldpos.l                 = tuidat(win,view)\view_xo
        tuidat(win,view)\view_xo = newpos
        tui_scrollview {win,view,oldpos-newpos,0}
        connector+1
      Wend

    Case #notify_internal_viewscroller_v
      connector.l=0
      newpos.l = \value ;* \view_yo
      While \child[connector]><-1
        view.l                   = \child[connector]
        oldpos.l                 = tuidat(win,view)\view_yo
        tuidat(win,view)\view_yo = newpos
        tui_scrollview {win,view,0,oldpos-newpos}
        connector+1
      Wend
  End Select
End If
End Statement






;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setstring {win.l,tuiobj.l,string.s}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - string.s    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setstring {win.l,tuiobj.l,string.s}
SHARED tuidat(),tuiengine
\text = string.s
If \visible
  Select \typ
    Case #tobj_string
      GTSetString win,tuiobj,string.s

  End Select
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setstring_rd {win.l,tuiobj.l,string.s}                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - string.s    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setstring_rd {win.l,tuiobj.l,string.s}
SHARED tuidat(),tuiengine
If string.s><\text
\text = string.s
If \visible
  Select \typ
    Case #tobj_string
      GTSetString win,tuiobj,string.s
    Case #tobj_cycle
      tui_rethink{win}
    Case #tobj_button
      tui_rethink{win}
  End Select
  tui_draw {win,tuiobj}
End If
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_smartsetvalue {wintyp.l,id_data.l,tuiobj.l,value.l}             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - wintyp.l    : ???                                                         /
;/ - id_data.l    : ???                                                        /
;/ - tuiobj.l    : ???                                                         /
;/ - value.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_smartsetvalue {wintyp.l,id_data.l,tuiobj.l,value.l}
SHARED tuidat()
win.l = win_SmartIsOpen{wintyp,id_data}
If win>=0
  If value><\value
    tui_setvalue {win,tuiobj,value}
    tui_draw {win,tuiobj}
  End If
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_smartsetstring {wintyp.l,id_data.l,tuiobj.l,string.s}           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - wintyp.l    : ???                                                         /
;/ - id_data.l    : ???                                                        /
;/ - tuiobj.l    : ???                                                         /
;/ - string.s    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_smartsetstring {wintyp.l,id_data.l,tuiobj.l,string.s}
SHARED tuidat()
win.l = win_SmartIsOpen{wintyp,id_data}
If win>=0
  If string.s><\text
    tui_setstring {win,tuiobj,string.s}
    tui_draw {win,tuiobj}
  ;  tui_gtredraw {win,tuiobj}
  End If
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_smartrefresh {wintyp.l,id_data.l,tuiobj.l}                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - wintyp.l    : ???                                                         /
;/ - id_data.l    : ???                                                        /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_smartrefresh {wintyp.l,id_data.l,tuiobj.l}
SHARED tuidat()
win.l = win_SmartIsOpen{wintyp,id_data}
If win>=0
  tui_draw {win,tuiobj}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_view_setsize {win.l,tuiobj.l,vxs.l,vys.l,xfactor.l,yfactor.l}   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - vxs.l    : ???                                                            /
;/ - vys.l    : ???                                                            /
;/ - xfactor.l    : ???                                                        /
;/ - yfactor.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_view_setsize {win.l,tuiobj.l,vxs.l,vys.l,xfactor.l,yfactor.l}
SHARED tuidat()
If xfactor>0 AND yfactor>0
  \view_xs = vxs
  \view_ys = vys
  \view_xo * \view_xf / xfactor
  \view_yo * \view_yf / yfactor
  \view_xf = xfactor
  \view_yf = yfactor
  If win_IsOpen {win}
    If \child[0]><-1
      tui_initscroller {win.l,\child[0],\xs/xfactor,vxs,\view_xo}
    End If
    If \child[1]><-1
      tui_initscroller {win.l,\child[1],\ys/yfactor,vys,\view_yo}
    End If
  End If
Else
  error {"INTERNAL: Tried to set a view-ratio of "+Str$(xfactor)+" / "+Str$(yfactor)+" !"}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_view_setsize_nup {win.l,tuiobj.l,vxs.l,vys.l,xfactor.l,yfacto:: /
;/ r.l}                                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - vxs.l    : ???                                                            /
;/ - vys.l    : ???                                                            /
;/ - xfactor.l    : ???                                                        /
;/ - yfactor.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_view_setsize_nup {win.l,tuiobj.l,vxs.l,vys.l,xfactor.l,yfactor.l}
SHARED tuidat()
If xfactor>0 AND yfactor>0
  \view_xs = vxs
  \view_ys = vys
  \view_xo / xfactor * \view_xf
  \view_yo / yfactor * \view_yf
  \view_xf = xfactor
  \view_yf = yfactor
Else
  error {"INTERNAL: Tried to set a view-ratio of "+Str$(xfactor)+" / "+Str$(yfactor)+" !"}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_view_setsize_pos_nup {win.l,tuiobj.l,vxs.l,vys.l,xpos.l,ypos.l} /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - vxs.l    : ???                                                            /
;/ - vys.l    : ???                                                            /
;/ - xpos.l    : ???                                                           /
;/ - ypos.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_view_setsize_pos_nup {win.l,tuiobj.l,vxs.l,vys.l,xpos.l,ypos.l}
SHARED tuidat()
\view_xs = vxs
\view_ys = vys
\view_xo = xpos
\view_yo = ypos
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_view_setsize_pos {win.l,tuiobj.l,vxs.l,vys.l,xpos.l,ypos.l}     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - vxs.l    : ???                                                            /
;/ - vys.l    : ???                                                            /
;/ - xpos.l    : ???                                                           /
;/ - ypos.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_view_setsize_pos {win.l,tuiobj.l,vxs.l,vys.l,xpos.l,ypos.l}
SHARED tuidat()
\view_xs = vxs
\view_ys = vys
\view_xo = xpos
\view_yo = ypos
  If win_IsOpen {win}
    If \child[0]><-1
      tui_initscroller {win.l,\child[0],\xs,vxs,xpos}
    End If
    If \child[1]><-1
      tui_initscroller {win.l,\child[1],\ys,vys,ypos}
    End If
  End If
End Statement





CNIF #tui_use_listview


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_remove_quiet {win.l,tuiobj.l,pos.l}                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - pos.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_remove_quiet {win.l,tuiobj.l,pos.l}
SHARED tuidat(),tuiengine,tuipen()
If pos<0 Then pos = \value
If \value = pos Then \value=-1
If pos<\maxvalue AND pos>=0
  If \value>=0
    If \value>pos Then \value-1;:If \value<0 Then \value=0
  End If

  ptr.l     = \dat1
  lastptr.l = &\dat1
  n.l   = 0
  While ptr><0 AND n<pos
    lastptr = ptr
    ptr = Peek.l(ptr)
    n+1
  Wend
  If ptr><0
    nextptr.l = Peek.l(ptr)
    text.s = Peek.s (ptr+SizeOf.tui_lvitem)
    FreeMem_ ptr,Len(text.s)+1+SizeOf.tui_lvitem
    Poke.l lastptr,nextptr
    \maxvalue - 1
  End If
  If \value>=\maxvalue Then \value-1;=\maxvalue-1 : tui_listview_setstatus{win,tuiobj,\value,-1}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_remove {win.l,tuiobj.l,pos.l}                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - pos.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_remove {win.l,tuiobj.l,pos.l}
SHARED tuidat(),tuiengine,tuipen()
tui_listview_remove_quiet {win.l,tuiobj.l,pos.l}
If win_IsOpen {win}
  If \visible
    GTSetAttrs win,tuiobj,#GTSC_Total,\maxvalue
    ;tui_draw {win,tuiobj,1}
    tui_listview_draw_content {win,tuiobj,-1,-1,False}
  End If
End If
End Statement




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_clear {win.l,tuiobj.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_clear {win.l,tuiobj.l}
SHARED tuidat()
While tuidat(win,tuiobj)\maxvalue>0
  tui_listview_remove_quiet {win,tuiobj,0}
Wend

tuidat(win,tuiobj)\value=-1
tuidat(win,tuiobj)\maxvalue=0
tuidat(win,tuiobj)\modulo=0

If win_IsOpen {win}
  If \visible
    GTSetAttrs win,tuiobj,#GTSC_Top,\modulo,#GTSC_Total,\maxvalue
    tui_draw {win,tuiobj}
  End If
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_smartremove {win.l,tuiobj.l,user_data.l,@rd.l}         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - user_data.l    : ???                                                      /
;/ - rd.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_smartremove {win.l,tuiobj.l,user_data.l,@rd.l}
SHARED tuidat(),tuiengine,tuipen()
*lvitem.tui_lvitem = \dat1
lastptr.l  = &\dat1
pos.l      = 0
lastdata.l = -1
While *lvitem><0 AND user_data><lastdata
  lastdata = *lvitem\li_user_data
  *lvitem = *lvitem\lv_nextitem
  pos+1
Wend
If lastdata=user_data
  If rd
    tui_listview_remove {win,tuiobj,pos-1}
  Else
    tui_listview_remove_quiet {win,tuiobj,pos-1}
  End If
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_smartremovename {win.l,tuiobj.l,name.s}                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - name.s    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_smartremovename {win.l,tuiobj.l,name.s}
SHARED tuidat(),tuiengine,tuipen()
*lvitem.tui_lvitem = \dat1
lastptr.l  = &\dat1
pos.l      = 0
lastname.s =""
name.s = LCase$(name.s)
While *lvitem><0 AND name.s><lastname.s
  lastname.s = LCase$(Peek.s(*lvitem+SizeOf.tui_lvitem))
  *lvitem = *lvitem\lv_nextitem
  pos+1
Wend
If lastname.s=name.s
  tui_listview_remove {win,tuiobj,pos-1}
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_add_quiet {win.l,tuiobj.l,text.s,user_data.l,ttags.l:: /
;/ ,pos.l,@set.l}                                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - text.s    : ???                                                           /
;/ - user_data.l    : ???                                                      /
;/ - ttags.l    : ???                                                          /
;/ - pos.l    : ???                                                            /
;/ - set.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_add_quiet {win.l,tuiobj.l,text.s,user_data.l,ttags.l,pos.l,@set.l}
SHARED tuidat(),tuiengine,tuipen()
If pos<0 Then pos = \maxvalue
If \value>=pos Then \value+1
ptr.l     = \dat1
lastptr.l = &\dat1
n.l   = 0
While ptr><0 AND n<pos
  lastptr = ptr
  ptr = Peek.l(ptr)
  n+1
Wend
*lvitem.tui_lvitem = AllocMem_ (FLen(text.s)+1+SizeOf.tui_lvitem,0)
*lvitem\lv_nextitem = ptr
*lvitem\li_user_data = user_data
*lvitem\li_tags      = ttags
If set=False
  *lvitem\li_status    = 0
Else
  \value = pos
  If \ttags & #tui_tag_multi
  *lvitem\li_status    = -1
  Else
  *lvitem\li_status    = 0
  End If
End If
*lvitem\li_image     = -1
Poke.s *lvitem+SizeOf.tui_lvitem,text.s
Poke.l lastptr,*lvitem
\maxvalue + 1


pos.l  = 1
row.l  = 0
xpos.l = tuiengine\space
While pos<FLen(text.s)+4 AND row<#max_childs
  While Peek.b(&text.s+pos-1)=@"%"
    pos+2
  Wend
  If \child[row]<xpos
    diff.l = xpos-\child[row]
    For nrow.l=row To #max_childs-1
      If \child[nrow]>=0 Then \child[nrow]+diff
    Next
    tuiengine\listview_expanded = True
  Else
    xpos = \child[row]
  End If
  row+1
  lpos.l = pos
  pos = Instr(text.s,">=",pos)
  If pos<1
    pos=FLen(text.s)+5
  Else
    pos+2
    b.s = Mid$(text.s,lpos,pos-lpos-2)
    celltags.l = 0
    succ.l = True
    While Peek.b(&b.s) = @"%" AND succ=True
      tag.w = Peek.w(&b.s)
      Select tag
        Case @"%d"
          celltags.l | #tui_tag_disabled  : b.s = Right$(b.s,FLen(b.s)-2)
        Case @"%b"
          celltags.l | #tui_tag_bold      : b.s = Right$(b.s,FLen(b.s)-2)
        Case @"%s"
          celltags.l | #tui_tag_small     : b.s = Right$(b.s,FLen(b.s)-2)
        Case @"%g"
          celltags.l | #tui_tag_bright    : b.s = Right$(b.s,FLen(b.s)-2)
        Default
          succ=False
      End Select
    Wend

    If ((\moduloxs[row-1]|\ttags|celltags) AND #tui_tag_small) Then font.l=#tui_font_small:Else font=#tui_font_med
    If row<#max_childs-1
      If xpos+FLen(b.s)*tuiengine\fontsize_med>\child[row+1]
        xpos = xpos + textlen{b.s,font} + tuiengine\space*2 + 2
      End If
    End If
  End If
Wend
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_add {win.l,tuiobj.l,text.s,user_data.l,ttags.l,pos.l:: /
;/ ,@set.l}                                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - text.s    : ???                                                           /
;/ - user_data.l    : ???                                                      /
;/ - ttags.l    : ???                                                          /
;/ - pos.l    : ???                                                            /
;/ - set.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_add {win.l,tuiobj.l,text.s,user_data.l,ttags.l,pos.l,@set.l}
SHARED tuidat(),tuiengine,tuipen()
tui_listview_add_quiet {win.l,tuiobj.l,text.s,user_data.l,ttags.l,pos.l,set}
If win_IsOpen {win}
  If \visible Then GTSetAttrs win,tuiobj,#GTSC_Total,tuidat(win,tuiobj)\maxvalue
  If pos<0 Then pos = \maxvalue
  tui_listview_show {win.l,tuiobj.l,pos.l}
  tui_draw {win,tuiobj,1}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_add_sortstring {win.l,tuiobj.l,text.s,user_data.l,tt:: /
;/ ags.l}                                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - text.s    : ???                                                           /
;/ - user_data.l    : ???                                                      /
;/ - ttags.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_add_sortstring {win.l,tuiobj.l,text.s,user_data.l,ttags.l}
SHARED tuidat(),tuiengine,tuipen()
pos.l = 0
ltext.s = LCase$(text.s)
ptr.l     = \dat1
While ptr><0 AND pos<\maxvalue
  *lvitem.tui_lvitem = ptr
  If LCase$(Peek.s(*lvitem+SizeOf.tui_lvitem))<ltext.s
    ptr = *lvitem\lv_nextitem
    pos+1
  Else
    ptr=0
  End If
Wend
tui_listview_add {win.l,tuiobj.l,text.s,user_data.l,ttags.l,pos.l,False}
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_add_sortstring_quiet {win.l,tuiobj.l,text.s,user_dat:: /
;/ a.l,ttags.l}                                                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - text.s    : ???                                                           /
;/ - user_data.l    : ???                                                      /
;/ - ttags.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_add_sortstring_quiet {win.l,tuiobj.l,text.s,user_data.l,ttags.l}
SHARED tuidat(),tuiengine,tuipen()
pos.l = 0
fc.w = Peek.w(&text)
ptr.l     = \dat1
;textA.l = Peek.l(&text)
While ptr><0 AND pos<\maxvalue
  *lvitem.tui_lvitem = ptr
  If Peek.w(*lvitem+SizeOf.tui_lvitem)<fc
    ptr = *lvitem\lv_nextitem
    pos+1
  Else
    ;If Peek.l(*lvitem+SizeOf.tui_lvitem)<textA
    If Peek.s(*lvitem+SizeOf.tui_lvitem)<text
      ptr = *lvitem\lv_nextitem
      pos+1
    Else
      ptr=0
    End If
    ;Else
    ;ptr=0
    ;End If
  End If
Wend
tui_listview_add_quiet{win.l,tuiobj.l,text.s,user_data.l,ttags.l,pos.l,False}
End Statement
 


; \value     = aktives Element
; \modulo    = Visible
; \maxvalue  = Anzahl der Elemente
; \minvalue  = Oberstes Element
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_listview_numitems {win.l,tuiobj.l}                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_listview_numitems{win.l,tuiobj.l}
SHARED tuidat()
Function Return \maxvalue
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_listview_smartchange {win.l,tuiobj.l,user_data.l,:: /
;/ newtitle.s,@flags.l}                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - user_data.l    : ???                                                      /
;/ - newtitle.s    : ???                                                       /
;/ - flags.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_listview_smartchange {win.l,tuiobj.l,user_data.l,newtitle.s,@flags.l}
SHARED tuidat(),tuiengine,tuipen()
*lvitem.tui_lvitem      = \dat1
lastptr.l  = &\dat1
pos.l      = 0
lastdata.l = -1234
succ.l = False
While *lvitem><0 AND user_data><lastdata
  lastdata = *lvitem\li_user_data
  lastptr  = *lvitem
  *lvitem = *lvitem\lv_nextitem
  pos+1
Wend
If lastdata=user_data
  If lastptr
    *lvitem = lastptr
    ttags.l = *lvitem\li_tags
    If flags><-1 Then ttags = flags
  End If
  value.l = \value
  status.l = *lvitem\li_status
  tui_listview_remove_quiet {win,tuiobj,pos-1}
  tui_listview_add_quiet {win,tuiobj,newtitle.s,user_data,ttags,pos-1}
  tui_listview_setstatus{win,tuiobj,pos-1,status}
  \value = value
  If tuiengine\listview_expanded
    tuiengine\listview_expanded = False
    tui_listview_draw {win,tuiobj}
  Else
    tui_listview_draw_content {win,tuiobj,pos-1,pos-1,False}
  End If
  succ=True
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_smartset_tags {win.l,tuiobj.l,user_data.l,ttags.l}     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - user_data.l    : ???                                                      /
;/ - ttags.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_smartset_tags {win.l,tuiobj.l,user_data.l,ttags.l}
SHARED tuidat(),tuiengine,tuipen()
*lvitem.tui_lvitem      = \dat1
lastptr.l  = &\dat1
pos.l      = 0
lastdata.l = -1
While *lvitem><0 AND user_data><lastdata
  lastdata = *lvitem\li_user_data
  lastptr  = *lvitem
  *lvitem = *lvitem\lv_nextitem
  pos+1
Wend
If lastdata=user_data
  If lastptr
    *lvitem = lastptr
    *lvitem\li_tags = ttags
  End If
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_listview_smartset {win.l,tuiobj.l,user_data.l}                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - user_data.l    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_listview_smartset {win.l,tuiobj.l,user_data.l}
SHARED tuidat(),tuiengine,tuipen()
*lvitem.tui_lvitem      = \dat1
lastptr.l  = &\dat1
pos.l      = 0
lastdata.l = -1234
While *lvitem><0 AND user_data><lastdata
  lastdata = *lvitem\li_user_data
  lastptr  = *lvitem
  *lvitem = *lvitem\lv_nextitem
  pos+1
Wend
If lastdata=user_data
  tui_setvalue {win,tuiobj,pos-1}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_listview_get_user_data {win.l,tuiobj.l,@pos.l}      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - pos.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_listview_get_user_data {win.l,tuiobj.l,@pos.l}
SHARED tuidat(),tuiengine,tuipen()
If pos<0 Then pos = \value
If pos<\maxvalue AND pos>=0
  *lvitem.tui_lvitem     = \dat1
  n.l   = 0
  While *lvitem><0 AND n<pos
    *lvitem = *lvitem\lv_nextitem
    n+1
  Wend
  If *lvitem><0
    user_data.l = *lvitem\li_user_data
    ;text.s = Peek.s (*lvitem+SizeOf.tui_lvitem)
  End If
Else
  user_data = -1
End If
Function Return user_data
End Function


Statement tui_listview_set_user_data {win.l,tuiobj.l,pos.l,user_data.l}
SHARED tuidat(),tuiengine,tuipen()
If pos<0 Then pos = \value
If pos<\maxvalue AND pos>=0
  *lvitem.tui_lvitem = tui_listview_getitemptr{win,tuiobj,pos}
  If *lvitem
    *lvitem\li_user_data = user_data
  End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_listview_getpos {win.l,tuiobj.l,user_data.l}        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - user_data.l    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_listview_getpos {win.l,tuiobj.l,user_data.l}
SHARED tuidat(),tuiengine,tuipen()
pos.l = -1
*lvitem.tui_lvitem     = \dat1
n.l   = 0
While *lvitem><0 AND n<\maxvalue
  If user_data = *lvitem\li_user_data
    pos=n
    *lvitem = 0
  Else
    n+1
    *lvitem = *lvitem\lv_nextitem
  End If
Wend
Function Return pos
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = tui_listview_getstring {win.l,tuiobj.l,pos.l}           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - pos.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s tui_listview_getstring {win.l,tuiobj.l,pos.l}
SHARED tuidat(),tuiengine,tuipen()
If pos<0 Then pos = \value
If pos<\maxvalue AND pos>=0
  *lvitem.tui_lvitem     = \dat1
  n.l   = 0
  While *lvitem><0 AND n<pos
    *lvitem = *lvitem\lv_nextitem
    n+1
  Wend
  If *lvitem><0
    string.s = Peek.s (*lvitem+SizeOf.tui_lvitem)
  End If
Else
  string.s = ""
End If
Function Return string.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_listview_click {win.l,tuiobj.l,mx.l,my.l,qual.l,d:: /
;/ bl.l}                                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - mx.l    : ???                                                             /
;/ - my.l    : ???                                                             /
;/ - qual.l    : ???                                                           /
;/ - dbl.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_listview_click{win.l,tuiobj.l,mx.l,my.l,qual.l,dbl.l}
SHARED tuidat(),tuiengine
USEPATH tuidat(win,tuiobj)
If \frametitle=""
  value.l = (my-\y-1)/(tuiengine\space+tuiengine\fontsize_med) + \modulo
Else
  value = (my-\y-3)/(tuiengine\space+tuiengine\fontsize_med) + \modulo - 1
End If

If qual& #qual_shift=0
  If value<\modulo OR value>=\maxvalue Then value=-1 : dbl=False
Else
  If value<0 Then value=0
  If value>=\maxvalue Then value=\maxvalue-1
  dbl=False
End If

If value>=0 AND value<\maxvalue
  ; ok!
Else
  value=-1
End If

succ.l = False
redr.l = False
oldvalue.l = \value
\value = value
If \ttags & #tui_tag_multi
  If qual & #qual_shift
    If value>=0
      dpos.l = oldvalue
      If dpos=-1 Then dpos = value
      apos.l = Min(dpos,value)
      bpos.l = Max(dpos,value)
      For pos.l=apos To bpos
        If tui_listview_setstatus{win,tuiobj,pos,-1}
          tui_listview_draw_content {win,tuiobj,pos ,pos ,False}
        End If
      Next
    End If

  Else
    If qual & #qual_alt
      If value>=0
        If tui_listview_getstatus{win,tuiobj,value}
          \value=-1
          If tui_listview_setstatus{win,tuiobj,value,0}
            tui_listview_draw_content {win,tuiobj,value ,value ,False}
          End If
          value=-1
        Else
          If tui_listview_setstatus{win,tuiobj,value,-1}
          tui_listview_draw_content {win,tuiobj,value ,value ,False}
          End If
        End If

      End If
    Else
      apos = 0
      bpos = \maxvalue-1
      ;For pos.l=apos To bpos
        redrawall.l = tui_listview_setstatus{win,tuiobj,-1,0}
         ; If pos><value Then tui_listview_draw_content {win,tuiobj,pos ,pos,False };:error {"Redraw "+Str$(pos)}
      ;  End If
      ;Next
      If value>=0
        If tui_listview_setstatus{win,tuiobj,value,-1}
          If redrawall=False Then tui_listview_draw_content {win,tuiobj,value ,value ,False}
        End If
      End If
      If redrawall Then  tui_listview_draw_content {win,tuiobj,0,\maxvalue-1,False }
    End If
  End If
Else
  If (tuidat(win,tuiobj)\ttags & #tui_tag_immidiate)=#tui_tag_immidiate Then succ=True  ; single click = notify
  If value><oldvalue
    tui_listview_draw_content {win,tuiobj,oldvalue ,oldvalue,False}
    tui_listview_draw_content {win,tuiobj,value ,value ,False}
  End If
End If
If dbl><0 AND (value=oldvalue AND value><-1) Then succ=True   ; double click = notify

\value = value
tui_listview_show{win,tuiobj,value}
;If redr Then tui_draw {win,tuiobj}
tui_copyvalue {win,tuiobj}

Function Return succ
End Function


CEND





;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_setparent {parent_obj.l}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - parent_obj.l    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_setparent {parent_obj.l}
SHARED acwin,tuiparent()
tuiparent(acwin) = parent_obj
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_win_init {wintyp.l,id_data.l,title.s,@cacheit.l}    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - wintyp.l    : ???                                                         /
;/ - id_data.l    : ???                                                        /
;/ - title.s    : ???                                                          /
;/ - cacheit.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_win_init {wintyp.l,id_data.l,title.s,@cacheit.l}
SHARED acwin,tuiengine
tuiengine\menu_isused = False
If cacheit=False Then nocache.l=True:Else nocache=False
acwin.l = win_Init {wintyp.l,id_data.l,title.s,nocache}
If acwin><-1
  succ.l = True
Else
  succ.l = False
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_win_open {@active.l}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - active.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_win_open {@active.l}
SHARED acwin,tuiparent(),tuiengine,tuidat(),winengine,windat(),tuipen();,makesize.l;,dolayout.l
size.l = tui_makesize {acwin,tuiparent(acwin)}
xs.l   = size MOD 32768
ys.l   = size  /  32768

sxs.l = screen_GetWidth {}
sys.l = screen_GetHeight {}

x.l = (sxs-xs+ tuiengine\space * 2)/2
y.l = (sys-ys+ tuiengine\space * 2)/2

win_SetInnerSizeSoft {acwin,x,y,xs+ tuiengine\space * 2,ys+ tuiengine\space * 2}

;win_SetFlag {acwin,tuiengine\wflgs}
windat(acwin)\flags | tuiengine\wflgs

If (windat(acwin)\flags AND #WFLG_BORDERLESS)
  tuiengine\wlo = 0
  tuiengine\wto = 0
 ; GTGZZPosition On
Else
  tuiengine\wlo = winengine\def_wleftoff
  tuiengine\wto = winengine\def_wtopoff
 ; GTGZZPosition On
End If

win_SetMinDims {acwin,xs+ tuiengine\space * 2,ys+ tuiengine\space * 2}

If (tuidat(acwin,tuiparent(acwin))\ttags AND #tui_tag_fixedxs) Then sxs = xs+ tuiengine\space * 2
If (tuidat(acwin,tuiparent(acwin))\ttags AND #tui_tag_fixedys) Then sys = ys+ tuiengine\space * 2

win_SetMaxDims {acwin,sxs,sys}

win_Test{acwin}

If tuiengine\menu_isused
  win_SetMenu {acwin,acwin}
Else
  win_SetMenu {acwin,-1}
End If

tui_doswitches {acwin}

ixs.l = win_GetInnerWidth{acwin}  - tuiengine\space * 2
iys.l = win_GetInnerHeight{acwin} - tuiengine\space * 2
Use IntuiFont tuiengine\font_med

tui_dolayout {acwin,tuiparent(acwin),tuiengine\space,tuiengine\space,ixs,iys}

If Peek.l(Addr GTList(acwin))
  win_SetGadgets {acwin,acwin}
Else
  win_SetGadgets {acwin,-1}
End If

tui_install_bfhook{acwin}
win_Open {acwin,active}

;WBox tuiengine\wlo,tuiengine\wto,tuiengine\wlo+ixs-1,tuiengine\wto+iys-1,tuipen(#tpen_bg)
win_AttachGTList{acwin}
tuiengine\wlo = winengine\def_wleftoff
tuiengine\wto = winengine\def_wtopoff
; debug
;error {"Add offsets!"}

tui_addwoffsets {acwin}

; debug
;error {"And finally draw the own widgets!"}

tui_draw {acwin,tuiparent(acwin)}
If tuiengine\sigflag = False
  tuiengine\sigflag = tui_sigflag {}
Else
  If tuiengine\sigflag >< tui_sigflag {} Then error {"IDCMP SIGFLAG has changed !!!"}
End If

; debug
;error {"Pew, we are done so far!"}

End Statement




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_win_close {win.l}                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_win_close {win.l}
SHARED tuidat(),tuiparent(),tuiengine,rkeynotify(),winnotify(),vkeynotify()

For n.l=0 To #max_tuigads-1
  CNIF #tui_use_listview
  If tuidat(win,n)\typ = #tobj_listview Then tui_listview_clear {win,n}
  CEND
  CNIF #tui_use_texteditor
  If tuidat(win,n)\typ = #tobj_texteditor AND tuidat(win,n)\minvalue = False Then ted_remove {tuidat(win,n)\modulo}
  CEND
  CNIF #tui_use_multilist
  If tuidat(win,n)\typ = #tobj_multilist  AND tuidat(win,n)\minvalue = False Then ml_RemoveAllNodes {tuidat(win,n)\modulo}
  CEND

  tuidat(win,n)\typ        = False
  tuidat(win,n)\xs         = 0
  tuidat(win,n)\ys         = 0
  tuidat(win,n)\ttags      = 0
  tuidat(win,n)\gtflags    = 0
  tuidat(win,n)\visible    = False
  tuidat(win,n)\text       = ""
  tuidat(win,n)\frametitle = ""
  tuidat(win,n)\view_xs    = 0
  tuidat(win,n)\view_xo    = 0
  tuidat(win,n)\view_xf    = 0
  tuidat(win,n)\view_ys    = 0
  tuidat(win,n)\view_yo    = 0
  tuidat(win,n)\view_yf    = 0
  tuidat(win,n)\help       = ""
  tuidat(win,n)\value      = 0
  tuidat(win,n)\notify     = False

  tuidat(win,n)\x          = 0
  tuidat(win,n)\y          = 0
  tuidat(win,n)\chars      = 0
  tuidat(win,n)\modulo     = 0

  tuidat(win,n)\minvalue   = 0
  tuidat(win,n)\maxvalue   = 0
  tuidat(win,n)\dat1       = 0
  For m.l=0 To #max_childs-1
    tuidat(win,n)\moduloxs [m] = 0
    tuidat(win,n)\moduloys [m] = 0
    tuidat(win,n)\child    [m] = -1
  Next
Next
For n.l = 0 To 255
  rkeynotify(win,n) = 0
  vkeynotify(win,n) = 0
Next
winnotify(win)\on_intuiticks = 0
winnotify(win)\on_active   = 0
winnotify(win)\on_inactive = 0
winnotify(win)\lastfocusobj = -1
;winnotify(win)\app_notify = 0

CNIF #tui_use_app
app_RemWin{win}
CEND


win_Close{win}
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_win_smartclose {wintyp.l,id_data.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - wintyp.l    : ???                                                         /
;/ - id_data.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_win_smartclose {wintyp.l,id_data.l}
win.l = win_SmartIsOpen {wintyp,id_data}
If win>=0 Then tui_win_close {win}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_win_closeall {}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_win_closeall {}
SHARED tuidat(),tuiparent(),tuiengine
For win.l=0 To #max_windows-1
  If win_IsOpen {win}
    tui_win_close {win}
  End If
Next
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_resize {win.l}                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_resize {win.l}
SHARED tuidat(),tuiparent(),tuiengine,tuipen(),windat()
If win_IsOpen {win}
  Use Window win
  xs.l = InnerWidth  - tuiengine\space * 2
  ys.l = InnerHeight - tuiengine\space * 2

  xs2.l = WindowWidth
  ys2.l = WindowHeight

  If xs2=ScreenWidth AND ys2=ScreenHeight
    *win.Window = Peek.l(Addr Window(win))
    If *win
      ;*win\Flags|#WFLG_BORDERLESS|#WFLG_SIZEGADGET - #WFLG_SIZEGADGET
    End If
  End If

  If xs2><windat(win)\xs OR ys2><windat(win)\ys
    windat(win)\xs = xs2
    windat(win)\ys = ys2
    Use Window win
;    tui_update_strings {win}
;    tui_freegtlist{win}
;    RefreshWindowFrame_ (Peek.l(Addr Window(win)))
;    If (windat(acwin)\flags AND #WFLG_BORDERLESS)
;      tuiengine\wlo = 0
;      tuiengine\wto = 0
;    Else
;      tuiengine\wlo = winengine\def_wleftoff
;      tuiengine\wto = winengine\def_wtopoff
;    End If
;    tui_dolayout {win,tuiparent(win),tuiengine\space,tuiengine\space,xs,ys}
;    tui_addwoffsets {win}
;    CNIF #clever_refresh=0
;    drawbg {WLeftOff,WTopOff,InnerWidth,InnerHeight}
;    CEND
;    If Peek.l(Addr GTList(win))
;      AttachGTList win,win
;    End If
;    tui_draw {win,tuiparent(win)}
    tui_rethink {win}
  End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_free {}                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_free {}
SHARED tuiengine,tuievent
; Pens releasen ...
tui_win_closeall {}
CNIF #tui_use_app
;app_Free{}
CEND
Free IntuiFont #tui_font_big     : tuiengine\fontsize_big=0
Free IntuiFont #tui_font_small   : tuiengine\fontsize_small=0
Free IntuiFont #tui_font_med     : tuiengine\fontsize_med=0
USEPATH tuiengine
\is_open = False
\bubbleopen = False
\bubblewin = -1
\bubbleobj = -1
\bubbleobj_last = -1
\bubbleobj_count = 0
\bubble_plop = 0
\bubbletext = ""
\bubble_ishelp = 0
\bubble_basewin = -1
\menu_isused = False
\pattern = -1
\use_pattern = False
\mouseover_obj = -1
\mouseover_win = -1
\listview_expanded = False
USELASTPATH
USEPATH tuievent
\notify      = False ; notify
\mb           = 0; mousebutton
\mpress      =False; true, falls mouse gedrueckt
\mclick      = False; true, falls mouse neu geclicked
\dblclick    = False
\value       = 0 ;
\watch_click   = False
\watch_tuiobj  = -1
\watch_win     = -1
CNIF #tui_use_intui=0
\watch_scroller  = False
CEND
\ranging     = False
USELASTPATH
End Statement


!autoexit{tui_free}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_getgad {win.l,tuiobj.l,value.l,gadget.l}                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - value.l    : ???                                                          /
;/ - gadget.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_getgad {win.l,tuiobj.l,value.l,gadget.l}
SHARED tuidat(),tuievent
USEPATH tuidat(win,tuiobj)
;If \visible=False Then error {"Event from invisible tuigad !"+Str$(tuiobj)} : Statement Return
If \visible=False OR tuiobj>=#max_tuigads OR tuiobj<0 Then Statement Return

Select \typ
  Case #tobj_hslider
    ;If value<0
    ; Stop
    ;End If
    Select \dat1
      Case #slider_freq
        \value = Int(Exp(value/20))
        minf.f = Log(\minvalue) * 20
        maxf.f = Log(\maxvalue) * 20
        maxl.l = Int(maxf)
        minl.l = Int(minf)
        If value>=maxl Then \value = \maxvalue
        If value<=minl Then \value = \minvalue
      Default
        \value = value * \view_yo
    End Select
    If \value>\maxvalue Then \value=\maxvalue
    If \value<\minvalue Then \value=\minvalue
    tui_draw{win,tuiobj,1}

  Case #tobj_vslider
    Select \dat1
      Case #slider_freq
        \value = Int(Exp(value/20))

      Case #slider_mixergain
        CNIF #gainexp=1
        valf.f = Exp(value/#mixergain_res)-.0001
        vall.l = Int(valf)
        If \value>0
          oldvalf.f = Log(\value) * #mixergain_res
        Else
          oldvalf = 0
        End If
        If \value = vall AND tuievent\mpress=False AND False
          cmov.l = Int((oldvalf+.5)*100+.999)
          cmv.l = value * 100
          dif.l = cmov-cmv
          If dif>-89 Then vall-1 : tui_setvalue {win,tuiobj,vall}
          If dif<-99 Then vall+1 : tui_setvalue {win,tuiobj,vall}

        End If
        \value = vall
        CELSE
        \value = (value * value) / 400
        CEND
      Default
        \value = value * \view_yo
    End Select
    ;If \value>\maxvalue Then error {"Slider too high ! value="+Str$(\value)+" max="+Str$(\maxvalue)} : \value=\maxvalue
    If \value>\maxvalue Then \value=\maxvalue
    If \value<\minvalue Then \value=\minvalue
    tui_draw{win,tuiobj,1}

  Case #tobj_cycle
    \value = value
  Case #tobj_string

    *gad.Gadget = GTGadPtr(win,tuiobj)
    strptr.l = 0
    GT_GetGadgetAttrsA_ *gad,Peek.l(Addr Window(win)),0,Tags(#GTST_String,&strptr.l)
    If strptr Then \text = Peek.s(strptr):Else \text=""

 ;   \text  = GTGetString (win,tuiobj)
  Case #tobj_numstring
    \value = GTGetAttrs (win,tuiobj,#GTIN_Number)
    If gadget & $1000
      tui_setvalue {win,tuiobj,\value+1}
    End If
    If gadget & $2000
      tui_setvalue {win,tuiobj,\value-1}
    End If
    If gadget & $3000 = 0 Then tui_setvalue {win,tuiobj,\value}

  Case #tobj_checkbox
    \value = value
    For child.w=0 To \modulo-1
      If Abs(value)-Abs(\minvalue)=0 Then tui_disable{win,\child[child]}:Else tui_enable{win,\child[child]}
    Next

  CNIF #tui_use_listview
  Case #tobj_listview
    If value>=0 AND value<=\maxvalue-\minvalue
;      \modulo = value
      tui_listview_scrollto {win,tuiobj,value}
    End If
    tuievent\notify = False
  CEND


  Case #tobj_hscroller
    \value = value * \view_yo

  Case #tobj_vscroller
    \value = value * \view_yo

  Case #tobj_mx
    \value = value

  Case #tobj_button
    If \gtflags AND #NG_TTOGGLE
      \value = GTStatus(win,tuiobj)
    End If

  CNIF #tui_use_shapes
  Case #tobj_shapegad
    If \gtflags AND #NG_TTOGGLE
      \value = GTStatus(win,tuiobj)
    End If
  CEND
  CNIF #tui_use_texteditor
  Case #tobj_texteditor
    *ted.tuited = \modulo
    scalerx.l = *ted\view_x/32768+1
    scalery.l = \view_ys/32768+1
    If gadget & $1000 Then ted_scroll {\modulo,value*scalerx-\view_xo,0,False}
    If gadget & $2000 Then ted_scroll {\modulo,0,value*scalery-\view_yo,False}
    tuievent\notify = False
  CEND
  CNIF #tui_use_multilist
  Case #tobj_multilist
    If gadget & $1000 Then \view_xo = value : tui_draw {win,tuiobj}
    If gadget & $2000 Then \view_yo = value : tui_draw {win,tuiobj}
    tuievent\notify = False
  CEND
End Select

If \notify AND $80000000
  Select \notify
    Case #notify_internal_viewscroller_h
      If value>=0 ; AND value<=\maxvalue-\minvalue
      connector.l=0
      newpos.l = \value ;* \view_yo
      While \child[connector]><-1
        view.l                   = \child[connector]
        oldpos.l                 = tuidat(win,view)\view_xo
        tuidat(win,view)\view_xo = newpos
        tui_scrollview {win,view,oldpos-newpos,0}
        connector+1
      Wend
      End If

    Case #notify_internal_viewscroller_v
      If value>=0 ; AND value<=\maxvalue-\minvalue
      connector.l=0
      newpos.l = \value ;* \view_yo
      While \child[connector]><-1
        view.l                   = \child[connector]
        oldpos.l                 = tuidat(win,view)\view_yo
        tuidat(win,view)\view_yo = newpos
        tui_scrollview {win,view,0,oldpos-newpos}
        connector+1
      Wend
      End If
  End Select
  tuievent\notify = False
End If

tui_copyvalue {win,tuiobj}

End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_domouseranging {}                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_domouseranging {}
SHARED tuievent,tuidat()
USEPATH tuidat(tuievent\watch_win,tuievent\watch_tuiobj)
tuievent\ranging = True
tuievent\orx     = tuievent\range_x
tuievent\ory     = tuievent\range_y
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_getclick {n.l}                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - n.l    : ???                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_getclick {n.l}
SHARED tuievent,tuidat(),tuiengine,tuiparent(),tuipen(),winnotify()
USEPATH tuidat(tuievent\win,n)
;error {"Get click: "+Str$(n)}
If \visible
  If tuievent\mx>=\x AND tuievent\my>=\y AND tuievent\mx-\x<\xs AND tuievent\my-\y<\ys
    ;winnotify(tuievent\win)\lastfocusobj = n
    tui_setfocus {tuievent\win,n}
    Select \typ
      Case #tobj_hgroup
        For m.l = 0 To \value-1
          If tuievent\notify = False Then tui_getclick {\child[m]}
        Next

      Case #tobj_vgroup
        For m.l = 0 To \value-1
          If tuievent\notify = False Then tui_getclick {\child[m]}
        Next

      Case #tobj_view
        USEPATH tuievent
        \notify       = tuidat(\win,n)\notify
        \range_x      = \mx
        \range_y      = \my
        \mx           = tuidat_abs2rel_x {\win,n,\mx}
        \my           = tuidat_abs2rel_y {\win,n,\my}
        \mclick       = True
        \watch_click  = True
        \ranging      = False
        \tuiobj       = n
        \watch_win    = \win
        \watch_tuiobj = n ; \tuiobj
      CNIF #tui_use_texteditor
      Case #tobj_texteditor
        ted_mclick {tuidat(\win,n)\modulo,\mx-tuidat(\win,n)\x,\my-tuidat(\win,n)\y,\mb,\dblclick}
        \range_x      = \mx-tuidat(\win,n)\x
        \range_y      = \my-tuidat(\win,n)\y
        \mclick       = True
        \watch_click  = True
        \ranging      = False
        \tuiobj       = n
        \watch_win    = \win
        \watch_tuiobj = n ; \tuiobj
      CEND
      CNIF #tui_use_multilist
      Case #tobj_multilist
        hititem.l = (\my-tuidat(\win,n)\y) / tuiengine\fontsize_med + tuidat(\win,n)\view_yo
        *node.ml_node = ml_FindNode {tuidat(\win,n)\modulo,hititem}
        ml_DeactivateAll {tuidat(\win,n)\modulo}
        ml_ActivateNode {*node}
        If *node
          If *node\typ=#node_tree
            If tuidat(\win,n)\ttags & #tui_tag_diskbrowse
              If *node\expanded=False
                ml_ExpandPath {*node,tuidat(\win,n)\text}
              Else
                ml_CollapsePath {*node}
              End If
            Else
              If *node\expanded = False
                ml_SetExpanded {*node}
              Else
                ml_SetCollapsed{*node}
              End If
            End If
            tuidat(\win,n)\view_ys = ml_GetRowHeight {tuidat(\win,n)\modulo}
            tuidat(\win,n)\view_xs = ml_GetPixelWidth {RastPort(\win),tuidat(\win,n)\modulo,0}
            ; setscrollers !
            GTSetAttrs \win,n+$1000,#GTSC_Total,tuidat(\win,n)\view_xs
            GTSetAttrs \win,n+$2000,#GTSC_Total,tuidat(\win,n)\view_ys

          Else
            If \dblclick
              \notify = tuidat(\win,n)\notify
              \string = str_Read {&*node\user_text}
            End If
          End If

        End If
        tui_draw {\win,n}
      CEND
      Case #tobj_label
        \notify       = tuidat(tuievent\win,n)\notify
        \tuiobj       = n
        \ranging      = False
        \mclick       = True
      CNIF #tui_use_image
      Case #tobj_image
        \notify       = tuidat(tuievent\win,n)\notify
        \tuiobj       = n
        \ranging      = False
        \mclick       = True
      CEND
      CNIF #tui_use_audio
      Case #tobj_levelmeter
        If \dblclick=True
          \notify       = tuidat(tuievent\win,n)\notify
          \tuiobj       = n
          \ranging      = False
          \mclick       = True
        End If
      Case #tobj_envelope
        USEPATH tuievent
        tuidat(\win,n)\value = tui_envelope_hit{\win,n,\mx,\my}
        If tuidat(\win,n)\value>=0
          \notify       = tuidat(\win,n)\notify
          \range_x      = \mx
          \range_y      = \my
          \mx           = \mx
          \my           = \my
          \mclick       = True
          \watch_click  = True
          \ranging      = False
          \tuiobj       = n
          \watch_win    = \win
          \watch_tuiobj = n
        Else
          \notify = 0
        End If

      CEND

      CNIF #tui_use_listview
      Case #tobj_listview
       \notify = False
        If tui_listview_click{tuievent\win,n,\mx,\my,tuievent\qual,tuievent\dblclick}
          \notify = tuidat(tuievent\win,n)\notify
          \value  = tuidat(tuievent\win,n)\value
          \tuiobj = n
        End If
        If tuidat(tuievent\win,n)\value >=0
          \ranging      = False
          \mclick       = True
          \watch_win    = \win
          \watch_tuiobj = n
          \watch_click  = True
        End If

      CEND

      CNIF #tui_use_image
      Case #tobj_imagegad
        If  tuidat(tuievent\win,n)\gtflags AND #NG_TTOGGLE
          If tuidat(tuievent\win,n)\value
            tuidat(tuievent\win,n)\value = False
            ;error {"Imagegad set to false !"}
          Else
            tuidat(tuievent\win,n)\value = True
            ;error {"Imagegad set to True !"}
          End If
        Else
          tuidat(tuievent\win,n)\value=True
        End If
        \notify       = False
        \tuiobj       = n
        \watch_click  = True
        \ranging      = False
        \mclick       = True
        \watch_win    = \win
        \watch_tuiobj = n ;\tuiobj
        tui_draw {tuievent\win,n}
      CEND
      Case #tobj_page
        USEPATH tuidat(tuievent\win,n)
        ;If tuievent\mpress
        tpage.l = tui_page_click {tuievent\win,n,tuievent\mx,tuievent\my}
        If tpage>=0
          ;message {"Es wurde auf einen Reiter gelciked..."}
          If \value >< tpage AND tpage>=0 AND tpage<\modulo
            ;message{"Nun wird der Reiter umgestellt..."}
            tui_setvalue{tuievent\win,n,tpage}
            tuievent\notify = tuidat(tuievent\win,n)\notify
            tuievent\tuiobj = n
          End If
;          If \value >< tpage AND tpage>=0 AND tpage<\modulo
;            \value = tpage
;            tui_rethink {tuievent\win,n}
;            tuievent\notify = tuidat(tuievent\win,n)\notify
;            tuievent\tuiobj = n
;          End If
;          tui_copyvalue {tuievent\win,n}
          tuievent\value = tpage
        Else
          If \value>=0 AND \value<#max_childs Then tui_getclick {\child[\value]}
        End If

        ;End If
    End Select
  End If
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_sethelp {tuiobj.l,text.s}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tuiobj.l    : ???                                                         /
;/ - text.s    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_sethelp {tuiobj.l,text.s}
SHARED acwin.l,tuidat()
tuidat(acwin,tuiobj)\help = text.s
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_openbubble {text.s,x.l,y.l,ishelp.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - text.s    : ???                                                           /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - ishelp.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_openbubble {text.s,x.l,y.l,ishelp.l}
SHARED tuiobj(),windat(),tuiengine,tuipen()
CNIF #tui_use_intui
SHARED intuiengine
If !intui_menuopen=False
CEND
If tuiengine\bubbleopen=True AND text.s><tuiengine\bubbletext Then tui_closebubble {}
;If text.s = "" Then error {"Bubble with invalid text !"}
If tuiengine\bubbleopen OR text.s=""
 ; *winptr.Window = Peek.l(Addr Window(tuiengine\bubblewin))
 ; MoveWindow_ *winptr,x-*winptr\LeftEdge,x-*winptr\TopEdge
Else
  win.l=0
  While win.l<#max_windows-1 AND windat(win)\is_open=True
    win+1
  Wend
  If windat(win)\is_open=False
   ; !locklayer
      windat(win)\is_open=True
      windat(win)\id_data = -1
      windat(win)\wintyp  = -1
    ;  *winp.Window = Peek.l(Addr Window(0))
    ;  *scr.Screen = Peek.l(Addr Screen(0))
    ;  *rp.RastPort = *scr\RPort
      ;Use Window 0
      ;WindowFont #tui_font_med
     ; SetFont_ *winp\RPort,Peek.l(Addr IntuiFont(tuiengine\font_med)+8)

;      l.l = TextLength_ (*winp\RPort,&text.s,Peek.l(&text.s-4))
      l.l = textlen {text.s,tuiengine\font_med}
      lines.l = (l*3 / screen_GetWidth{}) +1
      letters.l = Peek.l(&text.s-4) / lines
      ppos.l = 1
      sxsl.l = screen_GetWidth{}
      sysl.l = screen_GetHeight{}
      maxwidth.l = 10
      maxheight.l = lines * (tuiengine\fontsize_med+2) + 5

      For n.l=1 To lines
        ltxt.s = Mid$(text.s,ppos,letters) : ppos+letters
        While Peek.b(&text.s+ppos-1)><@" " AND Peek.b(&text.s+ppos-1)><0:ltxt.s + Mid$(text.s,ppos,1):ppos+1:Wend
        ppos+1
        ;l.l = TextLength_ (*winp\RPort,&ltxt.s,Peek.l(&ltxt.s-4))
        l.l = textlen {ltxt.s,tuiengine\font_med}
        If l>maxwidth Then maxwidth = l
      Next



      xs.l = maxwidth + 8
      ys.l = maxheight

      x - xs/2
      y + 13
      tuiengine\bubble_plop=5

      sxs.l = screen_GetWidth{}
      sys.l = screen_GetHeight{}
      If x+xs>sxs Then x=sxs-xs
      If y+ys>sys Then y=y-13-ys-6
      If x<0 Then x=0
      If y<0 Then y=0
      If x+xs>sxs Then xs=sxs-1
      If y+ys>sys Then ys=sys-1
      Window win,x,y,xs,ys,#WFLG_BORDERLESS|#WFLG_SIMPLE_REFRESH|#WFLG_NOCAREREFRESH,"",1,tuipen(#tpen_bubbleback)
      *winp.Window = Peek.l(Addr Window(win))
      If *winp
        ;WindowFont #tui_font_med
        WBox 0,0,xs-1,ys-1,tuipen(#tpen_bubbleback)
        Wline    0,   0,xs-1,   0,tuipen(#tpen_black)
        Wline xs-1,   0,xs-1,ys-1,tuipen(#tpen_black)
        Wline xs-1,ys-1,   0,ys-1,tuipen(#tpen_black)
        Wline    0,ys-1,   0,   0,tuipen(#tpen_black)
        ;WColour tuipen(#tpen_black),tuipen(#tpen_bubbleback)

        SetAPen_ *winp\RPort,tuipen(#tpen_black)
        SetBPen_ *winp\RPort,tuipen(#tpen_bubbleback)
        SetDrMd_ *winp\RPort,1
        SetFont_ *winp\RPort,Peek.l(Addr IntuiFont(tuiengine\font_med)+8)
        ppos.l = 1
        For n.l=1 To lines
          ltxt.s = Mid$(text.s,ppos,letters) : ppos+letters
          While Peek.b(&text.s+ppos-1)><@" " AND Peek.b(&text.s+ppos-1)><0:ltxt.s + Mid$(text.s,ppos,1):ppos+1:Wend
          ppos+1
          l.l = TextLength_ (*winp\RPort,&ltxt.s,Peek.l(&ltxt.s-4))
          Move_ *winp\RPort, (xs+l) / 2-l,(n-1)*(tuiengine\fontsize_med+2) + 4 + *winp\RPort\TxBaseline
          Text_ *winp\RPort,&ltxt.s,Peek.l(&ltxt.s-4)
        Next

        tuiengine\bubbleopen = True
        tuiengine\bubblewin  = win
        tuiengine\bubbletext = text.s
        tuiengine\bubble_ishelp = ishelp

    ;  !unlocklayer
    End If
  End If
End If
CNIF #tui_use_intui
EndIf
CEND
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_gethelpx {win.l,tuiobj.l,mx.l,my.l}                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - mx.l    : ???                                                             /
;/ - my.l    : ???                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_gethelpx {win.l,tuiobj.l,mx.l,my.l}
SHARED tuievent,tuidat(),tuiengine,tuiparent()
USEPATH tuidat(win,tuiobj)
helpobj.l = -1
If \visible
  If mx>\x AND my>\y AND mx-\x<\xs AND my-\y<\ys
    Select \typ
      Case #tobj_hgroup
        If \help><""
          helpobj = tuiobj
        Else
          For m.l = 0 To \value-1
            helpobj2.l = tui_gethelpx {win,\child[m],mx,my}
            If helpobj2><-1 Then helpobj = helpobj2
          Next
        End If

      Case #tobj_vgroup
        If \help><""
          helpobj = tuiobj
        Else
          For m.l = 0 To \value-1
            helpobj2.l = tui_gethelpx {win,\child[m],mx,my}
            If helpobj2><-1 Then helpobj = helpobj2
          Next
        End If

      Case #tobj_page
        If \value>=0 AND \value<#max_childs Then helpobj.l = tui_gethelpx {win,\child[\value],mx,my}

      Default
        If \help><"" Then helpobj = tuiobj:Else helpobj = -1

    End Select
  End If
End If
Function Return helpobj
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_getobj {win.l,tuiobj.l,mx.l,my.l}                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - mx.l    : ???                                                             /
;/ - my.l    : ???                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_getobj {win.l,tuiobj.l,mx.l,my.l}
SHARED tuievent,tuidat(),tuiengine,tuiparent()
USEPATH tuidat(win,tuiobj)
helpobj.l = -1
If \visible
  If mx>=\x AND my>=\y AND mx-\x<=\xs AND my-\y<=\ys
    helpobj = tuiobj

    Select \typ
      Case #tobj_hgroup
        For m.l = 0 To \value-1
          helpobj2.l = tui_getobj {win,\child[m],mx,my}
          If helpobj2><-1 Then helpobj = helpobj2 : m=\value
        Next

      Case #tobj_vgroup
        For m.l = 0 To \value-1
          helpobj2.l = tui_getobj {win,\child[m],mx,my}
          If helpobj2><-1 Then helpobj = helpobj2 : m=\value
        Next

      Case #tobj_page
        If \value>=0 AND \value<#max_childs
          helpobj2.l = tui_getobj {win,\child[\value],mx,my}
          If helpobj2><-1 Then helpobj = helpobj2
        End If
    End Select
  End If
End If
Function Return helpobj
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_view_setmouse {win.l,tuiobj.l,mp.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - mp.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_view_setmouse {win.l,tuiobj.l,mp.l}
SHARED acwin.l,tuidat(),tuiengine,windat(),tuiparent()
If win<0 Then win=acwin
If win>=0
  tuidat(win,tuiobj)\child[7] = mp
  If windat(win)\is_open
    *winptr.Window = Peek.l(Addr Window(win))
    overobj.l = tui_getobj{win,tuiparent(win),*winptr\MouseX,*winptr\MouseY}
    If overobj=tuiobj
      mp_set{mp,win}
    End If
  End If
End If
End Statement


; Install a clip region covering the area of the view object.
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_SetViewClip {win.l,tuiobj.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_SetViewClip {win.l,tuiobj.l}
SHARED acwin.l,tuidat(),tuiengine,windat(),tuiparent()
USEPATH tuidat(win,tuiobj)
If win<0 Then win=acwin
If win>=0
  If windat(win)\is_open
    win_SetClip{win,\x,\y,\x+\xs-1,\y+\ys-1}
  End If
End If
End Statement

; Remove the clip region that was installed by tui_SetViewClip.
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_RemViewClip {win.l,tuiobj.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_RemViewClip {win.l,tuiobj.l}
SHARED windat()
If win>=0
  If windat(win)\is_open
    win_RemoveClip{win}
  End If
End If
End Statement


 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_forcenotify {win.l,notify.l,@id_data.l,@tuiobj.l,@value.l,@st:: /
;/ ring.s}                                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - notify.l    : ???                                                         /
;/ - id_data.l    : ???                                                        /
;/ - tuiobj.l    : ???                                                         /
;/ - value.l    : ???                                                          /
;/ - string.s    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_forcenotify {win.l,notify.l,@id_data.l,@tuiobj.l,@value.l,@string.s}
SHARED tuievent_queue()
If tuiobj=-1 Then tuiobj=0
If AddItem(tuievent_queue())
  tuievent_queue()\notify   = notify
  tuievent_queue()\tuiobj   = tuiobj
  tuievent_queue()\id_data  = id_data
  tuievent_queue()\win      = win
  tuievent_queue()\value    = value
  tuievent_queue()\string   = string.s
  tui_sigself {}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_forcenotify_fast {win.l,notify.l,@id_data.l,@tuiobj.l,@value.l} /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - notify.l    : ???                                                         /
;/ - id_data.l    : ???                                                        /
;/ - tuiobj.l    : ???                                                         /
;/ - value.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST tui_forcenotify_fast {win.l,notify.l,@id_data.l,@tuiobj.l,@value.l}
SHARED tuievent_queue()
If tuiobj=-1 Then tuiobj=0
If AddItem(tuievent_queue())
  tuievent_queue()\notify   = notify
  tuievent_queue()\tuiobj   = tuiobj
  tuievent_queue()\id_data  = id_data
  tuievent_queue()\win      = win
  tuievent_queue()\value    = value
  tui_sigself {}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuidat_value {win.l,tuiobj.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuidat_value {win.l,tuiobj.l}
SHARED tuidat(),tuiengine,winengine
value.l = \value
;If tuidat(win,tuiobj)\typ=#tobj_hscroller OR tuidat(win,tuiobj)\typ=#tobj_vscroller
;  value * \view_yo
;End If
Function Return value
End Function

;Function.l tui_findappwin {app_notify.l}
;SHARED windat(),winnotify()
;win.l =-1
;For n.l=0 To #max_windows-1
;  If windat(n)\is_open
;    If winnotify(n)\app_notify = app_notify Then win=n
;  End If
;Next
;Function Return win
;End Function


DEFTYPE.InputEvent ievent

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_getnotify {ev.l,dowait.w}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - ev.l    : ???                                                             /
;/ - dowait.w    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_getnotify {ev.l,dowait.w}
SHARED tuiengine,tuidat(),tuiparent(),tuievent,menudat(),tuievent_queue(),rkeynotify(),windat(),tuipen(),winnotify(),winengine,vkeynotify(),ievent
CNIF #tui_use_intui
SHARED intuiengine
CEND
USEPATH tuievent

;If ev Then notify.l=tui_evalevent{ev}
;If notify Then Function Return notify

tryagainnotify:

ResetList tuievent_queue()
If NextItemFast(tuievent_queue()) AND (ev=0)
  tuievent\notify  = tuievent_queue()\notify
  tuievent\tuiobj  = tuievent_queue()\tuiobj
  tuievent\id_data = tuievent_queue()\id_data
  tuievent\value   = tuievent_queue()\value
  tuievent\string  = tuievent_queue()\string
  tuievent\win     = tuievent_queue()\win
  tuievent\mx      = tuievent_queue()\mx
  tuievent\my      = tuievent_queue()\my
  tuievent\xs      = tuievent_queue()\xs
  tuievent\ys      = tuievent_queue()\ys
  tuievent\qual    = tuievent_queue()\qual
  KillItem tuievent_queue()
  If tuievent\notify = #notify_tuirefresh_obj
    If tuidat(tuievent\win,tuievent\tuiobj)\visible = False
      tuievent\notify = False
      Pop If
      Pop If
      Pop If
      Goto tryagainnotify:
    End If
  End If
Else
 \notify     = False

 CNIF #tui_use_app
   If app_GetEvent{}
     If AddItem(tuievent_queue())
       tuievent_queue()\notify  = app_GetEventNotify {}
       tuievent_queue()\win     = app_GetEventWin {}
       tuievent_queue()\id_data = app_GetEventID {}
       tuievent_queue()\string  = app_GetEventString {}
       tuievent_queue()\mx      = app_GetEventX {}
       tuievent_queue()\my      = app_GetEventY {}
       tuievent_queue()\xs      = 0
       tuievent_queue()\ys      = 0
       tuievent_queue()\qual    = 0
       If tuievent_queue()\win>=0
         tuievent_queue()\tuiobj = tui_getobj {\win,tuiparent(tuievent_queue()\win),tuievent_queue()\mx,tuievent_queue()\my}
         win_ToFront{tuievent_queue()\win}
       Else
         tuievent_queue()\tuiobj  = -1
       End If
     End If
   End If
 CEND

 CNIF #tui_use_intui
 If ev=False Then If dowait Then ev.l = intui_WaitEvent{}:Else ev.l=intui_GetEvent{}
 If ev
  \mx         = !event_mousex
  \my         = !event_mousey
  \qual       = !event_qualifier
  \win        = intui_GetEventWin{}
  If \win<0 Then error {"Eventwin is <0 !!!"}:\win=0

  \value      = !event_code
  gad.l       = !event_gadgethit

 CELSE
 If ev=False Then If dowait Then ev.l = WaitEvent:Else ev.l=Event
 If ev
  \mx         = EMouseX
  \my         = EMouseY
  \qual       = EventQualifier
  \win        = EventWindow
  \value      = EventCode
  gad.l       = GadgetHit
 CEND
  \idcmp      = ev
  Use Window \win
  \id_data  = win_GetIDData {\win}
;  If tuiengine\gadgethelp
    If (ev AND (#IDCMP_MOUSEMOVE|#IDCMP_GADGETUP|#IDCMP_GADGETDOWN|#IDCMP_MOUSEBUTTONS|#IDCMP_INACTIVEWINDOW))><0
      If tuiengine\bubbleopen
        If tuiengine\bubble_ishelp
          If (ev AND #IDCMP_MOUSEBUTTONS)=False OR \value<230
            If ev=#IDCMP_MOUSEMOVE Then tuiengine\bubble_plop-1:Else tuiengine\bubble_plop=0
            If tuiengine\bubble_plop<=0 Then tui_closebubble{}
          End If
        End If
        tuiengine\bubbleobj_count = 15
      End If
      If (ev AND (#IDCMP_GADGETUP|#IDCMP_MOUSEBUTTONS|#IDCMP_RAWKEY))><0
       tuiengine\bubbleobj_count = -300
      End If
    End If
;  End If


 Select ev
  Case #IDCMP_NEWSIZE
    tui_resize {\win}
    \notify = False
    \tuiobj = -1
    \string = ""

  Case #IDCMP_CLOSEWINDOW
    \notify = tuidat(\win,tuiparent(\win))\notify
    \string = ""

  Case #IDCMP_GADGETUP
    CNIF #tui_use_intui:If !event_gadgethit>=0
    CELSE
    \watch_scroller = False
    CEND
    \tuiobj   = gad & $0fff
    If \tuiobj>=0 AND \tuiobj<#max_tuigads
    ;\value    = EventCode
    \notify   = tuidat(\win,\tuiobj)\notify
    \mpress   = False
    \mclick   = False
    \string = ""
    ;tui_setfocus {\win,\tuiobj}
    tui_getgad {\win,\tuiobj,\value,gad}
    \value = tuidat_value{\win,\tuiobj}
    If tuiengine\mouseover_obj>=0
      If tuidat(tuiengine\mouseover_win,tuiengine\mouseover_obj)\ttags & #tui_tag_hl_all
        If tuidat(tuiengine\mouseover_win,tuiengine\mouseover_obj)\ttags & #tui_tag_hl
          drawhbox{tuiengine\mouseover_win,tuiengine\mouseover_obj,tuipen(#tpen_highlight)}
        End If
        If tuidat(tuiengine\mouseover_win,tuiengine\mouseover_obj)\ttags & #tui_tag_ihl
          drawibox{tuiengine\mouseover_win,tuiengine\mouseover_obj}
        End If
        If tuidat(tuiengine\mouseover_win,tuiengine\mouseover_obj)\ttags & #tui_tag_bhl
          drawbbox{tuiengine\mouseover_win,tuiengine\mouseover_obj}
        End If
      End If
    End If
    End If
    CNIF #tui_use_intui:EndIf:CEND


  Case #IDCMP_REFRESHWINDOW
    \string = ""
    If (tuiengine\wflgs & #WFLG_SMART_REFRESH) = False
;      Repeat
;        idcmp.l = EventTest
;        If EventWindow=\win
;          If idcmp = #IDCMP_REFRESHWINDOW
;            idcmp = Event
;          End If
;        Else
;          idcmp=0
;        End If
;      Until idcmp><#IDCMP_REFRESHWINDOW

      If windat(\win)\is_open
      *winptr.Window = Peek.l(Addr Window(\win))
      ;LockLayerInfo_ *winptr\WLayer\LayerInfo
      GT_BeginRefresh_ *winptr ; Peek.l(Addr Window(\win))
      tui_draw {\win,tuiparent(\win),0}
      ;UnlockLayerInfo_ *winptr\WLayer\LayerInfo

      If \win = tuiengine\mouseover_win
        If tuiengine\mouseover_obj>=0
          If tuidat(tuiengine\mouseover_win,tuiengine\mouseover_obj)\ttags & #tui_tag_hl_all
            If tuidat(tuiengine\mouseover_win,tuiengine\mouseover_obj)\ttags & #tui_tag_hl
              drawhbox{tuiengine\mouseover_win,tuiengine\mouseover_obj,tuipen(#tpen_highlight)}
            End If
            If tuidat(tuiengine\mouseover_win,tuiengine\mouseover_obj)\ttags & #tui_tag_ihl
              drawibox{tuiengine\mouseover_win,tuiengine\mouseover_obj}
            End If
            If tuidat(tuiengine\mouseover_win,tuiengine\mouseover_obj)\ttags & #tui_tag_bhl
              drawbbox{tuiengine\mouseover_win,tuiengine\mouseover_obj}
            End If
          End If
        End If
      End If
      GT_EndRefresh_ *winptr,True ; Peek.l(Addr Window(\win)),True
      Else
        error {"Win not open !"}
      End If
    Else
      error {"Refreshmessage with smart refresh !"}
    End If

  Case #IDCMP_GADGETDOWN
    CNIF #tui_use_intui:If !event_gadgethit>=0 :CEND
    \tuiobj   = gad & $0fff
    ;\value    = EventCode
    If \tuiobj>=0 AND \tuiobj<#max_tuigads

    \string = ""
    CNIF #tui_use_intui=0
    USEPATH tuidat(tuievent\win,tuievent\tuiobj)
    If \typ = #tobj_hslider OR \typ = #tobj_vslider OR \typ = #tobj_hscroller OR \typ = #tobj_vscroller
      tuievent\watch_scroller = True
    End If

    CNIF #tui_use_listview
      If \typ=#tobj_listview Then tuievent\watch_scroller = True
    CEND
    CNIF  #tui_use_texteditor
      If \typ=#tobj_texteditor  Then tuievent\watch_scroller = True
    CEND
    CNIF  #tui_use_multilist
      If \typ=#tobj_multilist  Then tuievent\watch_scroller = True
    CEND
     USEPATH tuievent

    CEND
    \mclick = True
    \mpress = True
    \notify   = tuidat(\win,\tuiobj)\notify
    tui_getgad {\win,\tuiobj,\value,gad}
    \value  = tuidat_value{\win,\tuiobj}
    tui_setfocus {\win,\tuiobj}
    End If
    CNIF #tui_use_intui:EndIf:CEND

  Case #IDCMP_MOUSEMOVE
    CNIF #tui_use_intui
    If !event_gadgethit>=0 AND !event_gadgethit & $0fff<#max_tuigads
    CELSE
    If \watch_scroller
    CEND
      ;If \value><255
    ;  \win      = \watch_win
    ;  \tuiobj   = \watch_tuiobj
    ;  If \win><\watch_win OR\tuiobj><\watch_tuiobj Then error {"Watchwin wrong !"}
      \tuiobj   = gad & $0fff
      ;\value    = EventCode
      \notify   = tuidat(\win,\tuiobj)\notify
      \mpress   = True
      \mclick   = False
      tui_getgad {\win,\tuiobj,\value,gad}
      \value  = tuidat_value{\win,\tuiobj}
      ;End If
    Else

      If \watch_click
        If \watch_win<0 OR \watch_tuiobj<0 Then error {"Invalid watch win !"+Str$(\watch_win)+"/"+Str$(\watch_tuiobj)}:\watch_win=0:\watch_tuiobj=0:Function Return 0
        \win    = \watch_win
        \tuiobj = \watch_tuiobj

        \mclick = False
        If \ranging =False
          Select tuidat(\watch_win,\watch_tuiobj)\typ
             CNIF #tui_use_image
             Case #tobj_imagegad
              ; out of area !?
              ; tuidat(\watch_win,\watch_tuiobj)\value = False ; Toggle
              ; tui_draw {\watch_win,\watch_tuiobj}
             CEND
             CNIF #tui_use_listview
             Case #tobj_listview
               \notify = False
               If tui_listview_click{\watch_win,\watch_tuiobj,\mx,\my,#qual_shift,False}
                 ;\notify = tuidat(tuievent\win,\watch_tuiobj)\notify
                 ;\tuiobj = \watch_tuiobj
               End If
             CEND

             Case #tobj_view
               \mx = tuidat_abs2rel_x {\watch_win,\watch_tuiobj,\mx}
               \my = tuidat_abs2rel_y {\watch_win,\watch_tuiobj,\my}
               \notify = tuidat(\watch_win,\watch_tuiobj)\notify

             CNIF #tui_use_texteditor
             Case  #tobj_texteditor
               ted_drag {tuidat(\watch_win,\watch_tuiobj)\modulo,\mx-tuidat(\watch_win,\watch_tuiobj)\x,\my-tuidat(\watch_win,\watch_tuiobj)\y}
             CEND

             CNIF #tui_use_audio
             Case #tobj_envelope
               tui_envelope_drag{\watch_win,\watch_tuiobj,\mx,\my}
             CEND

          End Select
        Else
          invbox {\watch_win,\range_x,\range_y,\orx,\ory}
          invbox {\watch_win,\range_x,\range_y,\mx ,\my}
          \orx = \mx
          \ory = \my
        End If
      Else
        ;If tuiengine\gadgethelp
        CNIF #tui_use_intui
        If !intui_menuopen=False
        CEND
          ; detect where we are over ...
          If windat(\win)\locked
            mouseover_obj.l = -1
          Else
            mouseover_obj.l = tui_getobj {\win,tuiparent(tuievent\win),\mx,\my}
          End If

          ; set bubble object
          If mouseover_obj>=0
            If tuidat(\win,mouseover_obj)\help><""
              tuiengine\bubbleobj      = mouseover_obj
              tuiengine\bubble_basewin = \win
            Else
              tuiengine\bubbleobj = -1
            End If
          Else
            tuiengine\bubbleobj = -1
          End If

          ; clear old mover object
          If tuiengine\mouseover_obj>=0 AND tuiengine\mouseover_obj><mouseover_obj
            If tuidat(tuiengine\mouseover_win,tuiengine\mouseover_obj)\ttags & #tui_tag_hl_all
              drawbgbox{tuiengine\mouseover_win,tuiengine\mouseover_obj}
            End If
          End If

          ; highlight mover object
          If tuiengine\mouseover_obj><mouseover_obj
            If mouseover_obj>=0
              If tuidat(\win,mouseover_obj)\ttags & #tui_tag_disabled = False
                If tuidat(\win,mouseover_obj)\ttags & #tui_tag_hl_all
                  If tuidat(\win,mouseover_obj)\ttags & #tui_tag_hl
                    drawhbox{\win,mouseover_obj,tuipen(#tpen_highlight)}
                  End If
                  If tuidat(\win,mouseover_obj)\ttags & #tui_tag_ihl
                    drawibox{\win,mouseover_obj}
                  End If
                  If tuidat(\win,mouseover_obj)\ttags & #tui_tag_bhl
                    drawbbox{\win,mouseover_obj}
                  End If
                End If

                Select tuidat(\win,mouseover_obj)\typ
                  Case #tobj_view
                    mp_set{tuidat(\win,mouseover_obj)\child[7],\win}
                  CNIF #tui_use_texteditor
                  Case #tobj_texteditor
                    mp_set{#mousepointer_text,\win}
                  CEND
                  Default
                    mp_set{#mousepointer_normal,\win}
                End Select

              Else
                mouseover_obj=-1
                mp_set{#mousepointer_normal,\win}
              End If
              ;mp_set{#mousepointer_normal,\win}
            Else

            End If
            tuiengine\mouseover_obj = mouseover_obj
            tuiengine\mouseover_win = \win
          End If

         CNIF #tui_use_intui
        End If
        CEND
      End If
    End If
    ;error {"MM end!"}

  Case #IDCMP_INTUITICKS
    If tuiengine\gadgethelp
      If \win=tuiengine\bubble_basewin
        If tuiengine\bubbleobj<0
          If tuiengine\bubbleobj_count>0 Then tuiengine\bubbleobj_count-1:Else tuiengine\bubbleobj_count=0
        Else
          If tuiengine\bubbleobj = tuiengine\bubbleobj_last
            If tuiengine\bubbleobj_count<15
              tuiengine\bubbleobj_count+1
              If tuiengine\bubbleobj_count=15
                If tuiengine\bubbleopen=False AND \watch_click = False
                  CNIF #tui_use_intui=0: If \watch_scroller = False :CEND
                    *win.Window = Peek.l(Addr Window (\win))
                    tui_openbubble {tuidat(\win,tuiengine\bubbleobj)\help,\mx+*win\LeftEdge,\my+*win\TopEdge,True}
                  CNIF #tui_use_intui=0: EndIf: CEND
                End If
              End If
            End If
          Else
            tuiengine\bubbleobj_last = tuiengine\bubbleobj
            ;tuiengine\bubbleobj_count - 2 ;=0 ;-2
            If tuiengine\bubbleobj_count>0 Then tuiengine\bubbleobj_count-1:Else tuiengine\bubbleobj_count=0
          End If
        End If
      End If
    End If
    \notify = winnotify(\win)\on_intuiticks
    If winnotify(\win)\lastfocusobj>=0
      CNIF #tui_use_texteditor
      If tuidat(\win,winnotify(\win)\lastfocusobj)\typ=#tobj_texteditor
        ted_blink{tuidat(\win,winnotify(\win)\lastfocusobj)\modulo}
      End If
      CEND
    End If

CNIF #tui_use_menu
  Case #IDCMP_MENUPICK
    \string = ""
    CNIF #tui_use_intui
    \menu_title = !event_menuhit
    \menu_item  = !event_itemhit
    \menu_sub   = !event_subhit
    \tuiobj     = !event_itemhit
    CELSE
    \menu_title = MenuHit
    \menu_item  = ItemHit
    \menu_sub   = SubHit
    \tuiobj     = ItemHit

    CEND
    If \menu_sub = -1
      tui_menuupdate    {\win,\menu_title,\menu_item}:\menu_sub = 0
      \value = GTMenuChecked (\win,\menu_title,\menu_item)
    Else
      tui_menuupdate_sub{\win,\menu_title,\menu_item,\menu_sub}
      \value = GTMenuChecked (\win,\menu_title,\menu_item,\menu_sub)
    End If
    \notify = menudat(\win,\menu_title,\menu_item,\menu_sub)\notify
    ;error {"Menuoick: "+Str$(\menu_title)+"/"+Str$(\menu_item)+"/"+Str$(\menu_sub)+" : "+Str$(\notify)}
CEND

  Case #IDCMP_MOUSEBUTTONS
    ;error {"Get Mousebutton ..."}
    ;\value    = EventCode
    CNIF #tui_use_intui
      \mb = !event_mb
      \mpress = !intui_mpress
      \dblclick = False
    CELSE
      \mb = \value-103
      \dblclick = False
     If \mb>127 Then \mb = \mb - 128:\mpress = False:Else \mpress = True
    CEND
    If \mpress
      CNIF #tui_use_intui
      If Abs(\mx-tuiengine\msg_x)<8 AND Abs(\my-tuiengine\msg_y)<8
        \dblclick = !event_dblclick
      Else
        \dblclick = 0
      End If
      CELSE
      *wind.Window = Peek.l(Addr Window(\win))
      \dblclick = False
      If DoubleClick_ (tuiengine\msg_sec,tuiengine\msg_mic,*wind\MessageKey\Seconds,*wind\MessageKey\Micros)
        If Abs(\mx-tuiengine\msg_x)<8 AND Abs(\my-tuiengine\msg_y)<8
          \dblclick = True
        End If
      End If
      tuiengine\msg_sec = *wind\MessageKey\Seconds
      tuiengine\msg_mic = *wind\MessageKey\Micros
      CEND

      tuiengine\msg_x   = \mx
      tuiengine\msg_y   = \my
      tui_getclick {tuiparent(tuievent\win)}
    Else
      If \watch_click
        \win    = \watch_win
        \tuiobj = \watch_tuiobj
        If \ranging
          invbox {\watch_win,\range_x,\range_y,\orx,\ory}
          If \mx>\range_x Then Exchange \mx,\range_x
          If \my>\range_y Then Exchange \my,\range_y
          \xs = (\range_x - \mx)/ tuidat(\watch_win,\watch_tuiobj)\view_xf
          \ys = (\range_y - \my)/ tuidat(\watch_win,\watch_tuiobj)\view_yf
        End If
        Select tuidat(\watch_win,\watch_tuiobj)\typ
           CNIF #tui_use_image
           Case #tobj_imagegad
             If  tuidat(\watch_win,\watch_tuiobj)\gtflags AND #NG_TTOGGLE
               \value = tuidat(\watch_win,\watch_tuiobj)\value
               \notify = tuidat(\watch_win,\watch_tuiobj)\notify
             Else
               tuidat(\watch_win,\watch_tuiobj)\value=False
               tui_draw {\watch_win,\watch_tuiobj}
               \notify = tuidat(\watch_win,\watch_tuiobj)\notify

             End If
           CEND
           CNIF #tui_use_listview
             \value = tuidat(\watch_win,\watch_tuiobj)\value
           CEND
           Case #tobj_view
             \mx = tuidat_abs2rel_x {\watch_win,\watch_tuiobj,\mx}
             \my = tuidat_abs2rel_y {\watch_win,\watch_tuiobj,\my}
             \notify = tuidat(\watch_win,\watch_tuiobj)\notify
           Default
             \notify = tuidat(\watch_win,\watch_tuiobj)\notify

        End Select
        \watch_click = False
      End If
      \mclick      = False
      ;tui_closebubble{}
    End If
;    tuiengine\lmx = \mx
;    tuiengine\lmy = \my
   ; If EventWindow=tuiengine\bubblewin Then error {"Bubble win!"}

  Case #IDCMP_INACTIVEWINDOW
      If \watch_click
        \win = \watch_win
        \tuiobj = \watch_tuiobj
        If \ranging
          invbox {\watch_win,\range_x,\range_y,\orx,\ory}
          If \mx>\range_x Then Exchange \mx,\range_x
          If \my>\range_y Then Exchange \my,\range_y
          \xs = (\range_x - \mx)/ tuidat(\watch_win,\watch_tuiobj)\view_xf
          \ys = (\range_y - \my)/ tuidat(\watch_win,\watch_tuiobj)\view_yf
        End If
        Select tuidat(\watch_win,\watch_tuiobj)\typ
           CNIF #tui_use_image
           Case #tobj_imagegad
             If  tuidat(\watch_win,\watch_tuiobj)\gtflags AND #NG_TTOGGLE
               ; -)
               \value = tuidat(\watch_win,\watch_tuiobj)\value
             Else
               ;error {"Imagegad: Toggle Invalid Inactive !"}
               tuidat(\watch_win,\watch_tuiobj)\value=False
               tui_draw {\watch_win,\watch_tuiobj}
             End If
           CEND
           Case #tobj_view
             \mx = tuidat_abs2rel_x {\watch_win,\watch_tuiobj,\mx}
             \my = tuidat_abs2rel_y {\watch_win,\watch_tuiobj,\my}
        End Select
        \notify = tuidat(\watch_win,\watch_tuiobj)\notify
        \mpress = False
        \watch_click = False
      End If
      \mclick  = False
      \notify  = winnotify(\win)\on_inactive

      If tuiengine\mouseover_obj>=0
        If tuidat(tuiengine\mouseover_win,tuiengine\mouseover_obj)\ttags & #tui_tag_hl_all
          drawbgbox{tuiengine\mouseover_win,tuiengine\mouseover_obj}
        End If
        tuiengine\mouseover_obj = -1
      End If
      tui_setfocus {\win,-1}

  Case #IDCMP_ACTIVEWINDOW
    \notify = winnotify(\win)\on_active
    winengine\lastfocuswin = \win

  Case #IDCMP_NEWPREFS
    ;error {"Newprefs!"}
    \notify = winnotify(\win)\on_prefs

  Case #IDCMP_RAWKEY
    rkey.w = \value ; EventCode
    vkey.w = 0

    ievent\ie_NextEvent = 0
    ievent\ie_Class     = #IECLASS_RAWKEY
    ievent\ie_SubClass  = 0
    ievent\ie_Code      = rkey
    ievent\ie_Qualifier = \qual

    succ.l = MapRawKey_ (ievent,&vkey+1,1,False)
    If rkey<255 AND rkey>=0
      \notify = rkeynotify (\win,rkey)
      \value  = rkey
      If vkey>=0 AND vkey<255
        If \notify=0
          \notify = vkeynotify (\win,vkey)
          \value  = vkey
          If vkey=27 AND \notify=False Then \notify = tuidat(\win,tuiparent(\win))\notify
        Else
          If vkeynotify (\win,vkey)
            tui_forcenotify {\win,vkeynotify (\win,vkey),\id_data,\tuiobj,vkey}
          End If
        End If
      End If
    End If

    If rkey=95 AND tuiengine\mouseover_obj>=0
      *win.Window = Peek.l(Addr Window (\win))
      tui_openbubble {tuidat(\win,tuiengine\mouseover_obj)\help,\mx+*win\LeftEdge,\my+*win\TopEdge,True}
      \notify = False
    End If

    If winnotify(\win)\lastfocusobj>=0
      CNIF #tui_use_texteditor
      If tuidat(\win,winnotify(\win)\lastfocusobj)\typ = #tobj_texteditor
        \string = LSet$(" ",80)
        clen.l = MapRawKey_ (ievent,&\string,80,False)
        If clen<=Peek.l(&\string-4) AND clen>=0 Then Poke.b &\string+clen,0:\string = Peek.s(&\string):Else \string = ""
        ted_raw_key {tuidat(\win,winnotify(\win)\lastfocusobj)\modulo,rkey,vkey,\string}
        Select rkey
          Case 66 ; TAB
          Case 80 ; F1-F10
          Case 81
          Case 82
          Case 83
          Case 84
          Case 85
          Case 86
          Case 87
          Case 88
          Case 89
          Default
            If (\qual&#qual_ctrl)=0
              \notify=False
            End If
        End Select

      End If
      CEND
    End If

  Case #IDCMP_MENUVERIFY
    ;-)

  Default
    error {"Unknown IDCMP-event !"}
    \string = ""
 End Select

 End If
End If

If \notify = False
  ResetList tuievent_queue()
  While NextItemFast(tuievent_queue()) AND \notify=False
    Select tuievent_queue()\notify
      CNIF #tui_use_texteditor
      Case #notify_internal_texteditor
        USEPATH tuievent_queue()
        ;x.l = tuidat(\win,\tuiobj)\x
        ;y.l = tuidat(\win,\tuiobj)\y
        ted_draw {tuidat(\win,\tuiobj)\modulo,\mx,\my,\xs+\mx-1,\ys+\my-1,-1}
      CEND
      CNIF #tui_use_multilist
      Case #notify_internal_multilist
        x.l = tuidat(\win,\tuiobj)\x
        y.l = tuidat(\win,\tuiobj)\y

        win_SetClip {\win,\mx,\my,\xs+\mx-1,\ys+\my-1}
        *rp.RastPort = RastPort(\win)
        SetFont_ *rp,Peek.l(Addr IntuiFont(tuiengine\font_med)+8)
        dummy.l=ml_Draw {*rp,tuidat(\win,\tuiobj)\modulo,tuidat(\win,\tuiobj)\view_yo,tuidat(\win,\tuiobj)\view_yo+tuidat(\win,\tuiobj)\view_yf,x-tuidat(\win,\tuiobj)\view_xo,y,0,tuipen(#tpen_halfshadow),3}
        y.l = (tuidat(\win,\tuiobj)\view_ys - tuidat(\win,\tuiobj)\view_yo) * tuiengine\fontsize_med
        If y<tuidat(\win,\tuiobj)\ys
          SetAPen_ *rp,tuipen(#tpen_halfshadow)
          RectFill_ *rp,\mx,y+tuidat(\win,\tuiobj)\y,\xs+\mx-1,\ys+\my-1
        End If
        win_RemoveClip{\win}

      CEND
      Default
        tuievent\notify  = tuievent_queue()\notify
        tuievent\tuiobj  = tuievent_queue()\tuiobj
        tuievent\id_data = tuievent_queue()\id_data
        tuievent\win     = tuievent_queue()\win
        tuievent\mx      = tuievent_queue()\mx
        tuievent\my      = tuievent_queue()\my
        tuievent\xs      = tuievent_queue()\xs
        tuievent\ys      = tuievent_queue()\ys
        tuievent\qual    = tuievent_queue()\qual
        tuievent\string  = tuievent_queue()\string
    End Select

    KillItem tuievent_queue()
  Wend

  If tuievent\notify = False
    CNIF #tui_use_intui
    ev.l=intui_GetEvent{}:If ev><0 Then Pop If:Pop If:Goto tryagainnotify
    CELSE
    ev.l=Event:If ev><0 Then Pop If:Pop If:Goto tryagainnotify
    CEND
  End If
End If

Function Return tuievent\notify
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_write_windef {filename.s}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_write_windef {filename.s}
succ.l = False
dos.l = file_Open {filename.s,#file_forcewrite}
If dos>=0
  header.l = @"WDEF"
  If file_WriteMem {dos,&header.l,4}
    If win_WriteCache{dos}
      succ.l = True
    End If
  End If
  file_Close{dos}
End If
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_read_windef {filename.s}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_read_windef {filename.s}
succ.l = False
If dos_Exist {filename.s}
  dos.l = file_Open {filename.s,#file_read}
  If dos>=0
    If file_ReadMem {dos,&header.l,4}
      If header=@"WDEF"
        If win_ReadCache{dos,file_GetLength{dos}-4}
          succ.l = True
        End If
      Else
        error {"File is not a window definiton file !"}
      End If
    End If
    file_Close{dos}
  End If
End If
Function Return succ
End Function

CNIF #tui_use_app
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_appnotify {win.l,notify.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - notify.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_appnotify {win.l,notify.l}
SHARED tuiengine,winnotify()
app_AddWin {win,notify}
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_initapp {appname.s,appico.s,appmenuname.s,popup_n:: /
;/ otify.l,icon_notify.l,showicon.l}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - appname.s    : ???                                                        /
;/ - appico.s    : ???                                                         /
;/ - appmenuname.s    : ???                                                    /
;/ - popup_notify.l    : ???                                                   /
;/ - icon_notify.l    : ???                                                    /
;/ - showicon.l    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_initapp {appname.s,appico.s,appmenuname.s,popup_notify.l,icon_notify.l,showicon.l}
SHARED tuiengine,winnotify()
If app_Init {appname.s,appico.s,appmenuname.s,popup_notify.l,icon_notify.l}
  If showicon Then app_ShowIcon{}
 succ.l = True
Else
  error {"Failed to init App !"}
End If
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_iconify {}                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_iconify {}
tui_win_closeall {}
app_ShowIcon{}
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_popup {}                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_popup {}
app_HideIcon{}
End Statement

CEND


USEPATH tuidat(win,tuiobj)
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_rempage {win.l,tuiobj.l,@child.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - child.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_rempage {win.l,tuiobj.l,@child.l}
SHARED tuidat(),acwin
tui_addmore{win}
If child<0 Then child=\value
If child>=0 AND child<#max_childs
 If \child[child]>=0 AND \modulo>0
  tui_hide {win,\child[child]}
  For m.l = child+1 To #max_childs-1
    \child[m-1] = \child[m]
  Next
  \child[#max_childs-1]=-1
  \modulo-1
  If \value>=\modulo Then \value=\modulo-1 : tui_copyvalue {win,tuiobj}
 End If
End If
If \modulo<0 Then \modulo=0:error{"REMPAGE: Modulo was <0"}
If \value>=\modulo Then \value=\modulo-1:error{"REMPAGE: Value was > Modulo"}
tui_rethink{win,tuiobj}
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tui_newpage {win.l,tuiobj.l,child.l}                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/ - child.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tui_newpage {win.l,tuiobj.l,child.l}
SHARED tuidat(),acwin
succ.l = False
tui_addmore{win}
If child><-1
  If \modulo<#max_childs
    \value = \modulo : tui_copyvalue {win,tuiobj}
    \child[\modulo]=child:\modulo+1
    tui_resettag {child,#tui_tag_gframe}
    succ.l = True
  End If
End If
tui_rethink{win,tuiobj}
Function Return succ
End Function

;________________________________________________________________ ABFRAGEN
USEPATH tuidat(win,tuiobj)
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = tuidat_string {win.l,tuiobj.l}                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s tuidat_string {win.l,tuiobj.l}
SHARED tuidat(),tuiengine
If \typ = #tobj_string AND \visible=True
    *gad.Gadget = GTGadPtr(win,tuiobj)
    strptr.l = 0
    GT_GetGadgetAttrsA_ *gad,Peek.l(Addr Window(win)),0,Tags(#GTST_String,&strptr.l)
    If strptr Then \text = Peek.s(strptr):Else \text=""
;  \text = GTGetString (win,tuiobj)
End If
Function Return \text
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuidat_x {win.l,tuiobj.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuidat_x {win.l,tuiobj.l}
SHARED tuidat(),tuiengine
Function Return \x
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuidat_y {win.l,tuiobj.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuidat_y {win.l,tuiobj.l}
SHARED tuidat(),tuiengine
Function Return \y
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuidat_xs {win.l,tuiobj.l}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuidat_xs {win.l,tuiobj.l}
SHARED tuidat(),tuiengine
Function Return \xs
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuidat_ys {win.l,tuiobj.l}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuidat_ys {win.l,tuiobj.l}
SHARED tuidat(),tuiengine
Function Return \ys
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = tuiev_mclick {}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w tuiev_mclick {}
SHARED tuievent
Function Return tuievent\mclick
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = tuiev_dblclick {}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w tuiev_dblclick {}
SHARED tuievent
Function Return tuievent\dblclick
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = tuiev_mpress {}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w tuiev_mpress {}
SHARED tuievent
Function Return tuievent\mpress
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = tuiev_ranging {}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w tuiev_ranging {}
SHARED tuievent
Function Return tuievent\ranging
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = tuiev_mbutton {}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w tuiev_mbutton {}
SHARED tuievent
Function Return tuievent\mb
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuiev_mx {}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuiev_mx {}
SHARED tuievent
Function Return tuievent\mx
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuiev_my {}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuiev_my {}
SHARED tuievent
Function Return tuievent\my
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuiev_xs {}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuiev_xs {}
SHARED tuievent
Function Return tuievent\xs
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuiev_ys {}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuiev_ys {}
SHARED tuievent
Function Return tuievent\ys
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuiev_id_data {}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuiev_id_data {}
SHARED tuievent
Function Return tuievent\id_data
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuiev_obj {}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuiev_obj {}
SHARED tuievent
Function Return tuievent\tuiobj
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuiev_win {}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuiev_win {}
SHARED tuievent
Function Return tuievent\win
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuiev_menu_title {}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuiev_menu_title {}
SHARED tuievent
Function Return tuievent\menu_title
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuiev_menu_item {}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuiev_menu_item {}
SHARED tuievent
Function Return tuievent\menu_item
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuiev_menu_sub {}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuiev_menu_sub {}
SHARED tuievent
Function Return tuievent\menu_sub
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = tuiev_string {}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s tuiev_string {}
SHARED tuievent
Function Return tuievent\string
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = tuiev_value {}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l tuiev_value {}
SHARED tuievent
Function Return tuievent\value
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = tui_controller {ctrl.w}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - ctrl.w    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s tui_controller {ctrl.w}
SHARED controllername.s()
If ctrl>=0 AND ctrl<=127 Then a.s = controllername.s(ctrl.w):Else a.s = "invalid"
Function Return a.s
End Function

; Set a clip region according the damaged area of the view object.
; NOTE: This function is only allowed to call after you received a #notify_tuirefresh_obj event.
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_SetViewRefreshClip {}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_SetViewRefreshClip{}
SHARED windat()
win.l    = tuiev_win{}
;tuiobj.l = tuiev_obj{}
x1.l = tuiev_mx {}    ;   + tuidat(win,tuiobj)\x
y1.l = tuiev_my {}    ;   + tuidat(win,tuiobj)\y
x2.l = tuiev_xs {} + x1 -1
y2.l = tuiev_ys {} + y1 -1
If win>=0
  If windat(win)\is_open
    win_SetClip{win,x1,y1,x2,y2}
  End If
End If
End Statement

; remove the clip region from the window that was created by tui_SetViewRefreshClip
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: tui_RemViewRefreshClip {}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement tui_RemViewRefreshClip {}
SHARED windat()
win.l    = tuiev_win{}
If win>=0
  If windat(win)\is_open
    win_RemoveClip{win}
  End If
End If
End Statement
 


For n.l = 0 To 127
  controllername.s(n) = "["+Str$(n)+"] undefined"
Next

Restore controller
Read ctrl.w
While ctrl><-1
  Read a.s
  controllername.s(ctrl) = "["+Str$(ctrl)+"] "+a.s
  Read ctrl
Wend


For n.l = 0 To 127
  gmidi.s(n) = "["+Str$(n+1)+"] -"
Next

Restore gmidi
Read gm.w
While gm><-1
  Read a.s
  gmidi.s(gm-1) = "["+Str$(gm)+"] "+a.s
  Read gm
Wend


For n.l = 0 To 127
  gmidi_drums.s(n) = "["+Str$(n+1)+"] -"
Next

Restore gmidi_drums
Read gm.w
While gm><-1
  Read a.s
  gmidi_drums.s(gm-1) = "["+Str$(gm)+"] "+a.s
  Read gm
Wend


Goto tui_skipdata
controller:
Data.w 0 : Data.s "Bank Select"
Data.w 1 : Data.s "Mod Wheel"
Data.w 2 : Data.s "Breath Control"
Data.w 4 : Data.s "Foot Control"
Data.w 5 : Data.s "Portamento Time"
Data.w 6 : Data.s "Data Entry"
Data.w 7 : Data.s "Volume"
Data.w 8 : Data.s "Balance"
Data.w 10 : Data.s "Panorama"
Data.w 11 : Data.s "Expression"
Data.w 12 : Data.s "Effect Type #1"
Data.w 13 : Data.s "Effect Type #2"
Data.w 16 : Data.s "User Ctrl.1"
Data.w 17 : Data.s "User Ctrl.2"
Data.w 18 : Data.s "User Ctrl.3"
Data.w 19 : Data.s "User Ctrl.4"
Data.w 32 : Data.s "Bank Select LSB"
Data.w 33 : Data.s "Mod Wheel  LSB"
Data.w 34 : Data.s "Breath Control LSB"
Data.w 36 : Data.s "Foot Control LSB"
Data.w 37 : Data.s "Portamento Time LSB"
Data.w 38 : Data.s "Data Entry LSB"
Data.w 39 : Data.s "Volume LSB"
Data.w 40 : Data.s "Balance LSB"
Data.w 42 : Data.s "Panorama LSB"
Data.w 43 : Data.s "Expression LSB"
Data.w 48 : Data.s "User Ctrl.1 LSB"
Data.w 49 : Data.s "User Ctrl.2 LSB"
Data.w 50 : Data.s "User Ctrl.3 LSB"
Data.w 51 : Data.s "User Ctrl.4 LSB"
Data.w 64 : Data.s "Sustain Pedal"
Data.w 65 : Data.s "Portamento"
Data.w 66 : Data.s "Sostenuto"
Data.w 67 : Data.s "Softpedal"
Data.w 69 : Data.s "Hold Pedal"
Data.w 80 : Data.s "User Ctrl. 5"
Data.w 81 : Data.s "User Ctrl. 6"
Data.w 82 : Data.s "User Ctrl. 7"
Data.w 83 : Data.s "User Ctrl. 8"
Data.w 91 : Data.s "Effect Depth"
Data.w 92 : Data.s "Tremolo Depth"
Data.w 93 : Data.s "Chorus Depth"
Data.w 94 : Data.s "Celeste Depth"
Data.w 95 : Data.s "Phaser Depth"
Data.w 96 : Data.s "Increment (Yes)"
Data.w 97 : Data.s "Decrement (No)"
Data.w 98 : Data.s "Non-Reg. LSB"
Data.w 99 : Data.s "Non-Reg. MSB"
Data.w 100 : Data.s "Registered LSB"
Data.w 101 : Data.s "Registered MSB"
Data.w 120 : Data.s "All Sounds Off"
Data.w 121 : Data.s "Controller Reset"
Data.w 122 : Data.s "Local On/Off"
Data.w 123 : Data.s "All Notes Off"
Data.w 124 : Data.s "Omni Off"
Data.w 125 : Data.s "Omni On"
Data.w 126 : Data.s "Mono On/Poly Off"
Data.w 127 : Data.s "Mono Off/Poly On    "
Data.w -1


gmidi:
Data.w 1 : Data.s "Acoustic Piano"
Data.w 2 : Data.s "Bright Piano"
Data.w 3 : Data.s "Electro Piano"
Data.w 4 : Data.s "Honky Tonk Piano"
Data.w 5 : Data.s "E Piano 1"
Data.w 6 : Data.s "E Piano 2"
Data.w 7 : Data.s "Harsichord"
Data.w 8 : Data.s "Clavichord"
Data.w 9 : Data.s "Celesta"
Data.w 10 : Data.s "Glockenspiel"
Data.w 11 : Data.s "Music Box"
Data.w 12 : Data.s "Vibraphone"
Data.w 13 : Data.s "Marimba"
Data.w 14 : Data.s "Xylophone"
Data.w 15 : Data.s "Bells"
Data.w 16 : Data.s "Dulcimer"
Data.w 17 : Data.s "Drawbar Organ"
Data.w 18 : Data.s "Perc. Organ"
Data.w 19 : Data.s "Rock Organ"
Data.w 20 : Data.s "Church Organ"
Data.w 21 : Data.s "Reed Organ"
Data.w 22 : Data.s "Accordian"
Data.w 23 : Data.s "Harmonica"
Data.w 24 : Data.s "Tango Accordian"
Data.w 25 : Data.s "Acoustic Guitar"
Data.w 26 : Data.s "Steel Guitar"
Data.w 27 : Data.s "E Jazz Guitar"
Data.w 28 : Data.s "Electric Guitar"
Data.w 29 : Data.s "E Muted Guitar"
Data.w 30 : Data.s "Overdriven Guitar"
Data.w 31 : Data.s "Distortion Guitar"
Data.w 32 : Data.s "Guitar Harmonic"
Data.w 33 : Data.s "Acoustic Bass"
Data.w 34 : Data.s "E Bass Finger"
Data.w 35 : Data.s "E Bass Pick"
Data.w 36 : Data.s "Fretless Bass"
Data.w 37 : Data.s "Slap Bass 1"
Data.w 38 : Data.s "Slap Bass 2"
Data.w 39 : Data.s "Synth Bass 1"
Data.w 40 : Data.s "Synth Bass 2"
Data.w 41 : Data.s "Violin"
Data.w 42 : Data.s "Viola"
Data.w 43 : Data.s "Cello"
Data.w 44 : Data.s "Contra Bass"
Data.w 45 : Data.s "Tremelo Strings"
Data.w 46 : Data.s "Pizzicato Strings"
Data.w 47 : Data.s "Orchestra Strings"
Data.w 48 : Data.s "Timpani"
Data.w 49 : Data.s "String Ens. 1"
Data.w 50 : Data.s "String Ens. 2"
Data.w 51 : Data.s "Synth Strings 1"
Data.w 52 : Data.s "Synth Strings 2"
Data.w 53 : Data.s "Choir Aahs"
Data.w 54 : Data.s "Voice Oohs"
Data.w 55 : Data.s "Synth Voice"
Data.w 56 : Data.s "Orchestra Hit"
Data.w 57 : Data.s "Trumpet"
Data.w 58 : Data.s "Trombone"
Data.w 59 : Data.s "Tuba"
Data.w 60 : Data.s "Muted Trumpet"
Data.w 61 : Data.s "French Horn"
Data.w 62 : Data.s "Brass Section"
Data.w 63 : Data.s "Synth Brass 1"
Data.w 64 : Data.s "Synth Brass 2"
Data.w 65 : Data.s "Soprano Sax"
Data.w 66 : Data.s "Alto Sax"
Data.w 67 : Data.s "Tenor Sax"
Data.w 68 : Data.s "Baritone Sax"
Data.w 69 : Data.s "Oboe"
Data.w 70 : Data.s "English Horn"
Data.w 71 : Data.s "Bassoon"
Data.w 72 : Data.s "Clarinet"
Data.w 73 : Data.s "Piccolo"
Data.w 74 : Data.s "Flute"
Data.w 75 : Data.s "Recorder"
Data.w 76 : Data.s "Pan Flute"
Data.w 77 : Data.s "Blown Bottle"
Data.w 78 : Data.s "Shakuhachi"
Data.w 79 : Data.s "Whistle"
Data.w 80 : Data.s "Ocarina"
Data.w 81 : Data.s "Lead1 Square"
Data.w 82 : Data.s "Lead2 Sawtooth"
Data.w 83 : Data.s "Lead3 Calliope"
Data.w 84 : Data.s "Lead4 Chiff"
Data.w 85 : Data.s "Lead5 Charang"
Data.w 86 : Data.s "Lead6 Voice"
Data.w 87 : Data.s "Lead7 Fifths"
Data.w 88 : Data.s "Lead8 Bass Ld"
Data.w 89 : Data.s "Pad1 New Age"
Data.w 90 : Data.s "Pad2 Warm"
Data.w 91 : Data.s "Pad3 Polysynth"
Data.w 92 : Data.s "Pad4 Choir"
Data.w 93 : Data.s "Pad5 Bowed"
Data.w 94 : Data.s "Pad6 Metallic"
Data.w 95 : Data.s "Pad7 Halo"
Data.w 96 : Data.s "Pad8 Sweep"
Data.w 97 : Data.s "FX1 Ice Rain"
Data.w 98 : Data.s "FX2 Soundtrack"
Data.w 99 : Data.s "FX3 Crystal"
Data.w 100 : Data.s "FX4 Atmosphere"
Data.w 101 : Data.s "FX5 Brightness"
Data.w 102 : Data.s "FX6 Goblins"
Data.w 103 : Data.s "FX7 Echoes"
Data.w 104 : Data.s "FX8 Sci-Fi"
Data.w 105 : Data.s "Sitar"
Data.w 106 : Data.s "Banjo"
Data.w 107 : Data.s "Shamisen"
Data.w 108 : Data.s "Koto"
Data.w 109 : Data.s "Kalimba"
Data.w 110 : Data.s "Bagpipe"
Data.w 111 : Data.s "Fiddle"
Data.w 112 : Data.s "Shanai"
Data.w 113 : Data.s "TinkerBell"
Data.w 114 : Data.s "Agogo"
Data.w 115 : Data.s "SteelDrums"
Data.w 116 : Data.s "Woodblock"
Data.w 117 : Data.s "TaikoDrum"
Data.w 118 : Data.s "Melodic Tom"
Data.w 119 : Data.s "SynthDrum"
Data.w 120 : Data.s "Reverse Cymbal"
Data.w 121 : Data.s "Guitar Fret Noise"
Data.w 122 : Data.s "Breath Noise"
Data.w 123 : Data.s "Seashore"
Data.w 124 : Data.s "BirdTweet"
Data.w 125 : Data.s "Telephone"
Data.w 126 : Data.s "Helicopter"
Data.w 127 : Data.s "Applause"
Data.w 128 : Data.s "Gunshot             "
Data.w -1

gmidi_drums:
Data.w 1 : Data.s "Standard Kit"
Data.w 13 : Data.s "Standard Kit"
Data.w 127 : Data.s "CM-64/32L Kit"
Data.w 57 : Data.s "SFX Kit"
Data.w 9 : Data.s "Room Kit"
Data.w 49 : Data.s "Orchestra Kit"
Data.w 41 : Data.s "Brush Kit"
Data.w 26 : Data.s "TR-808 Kit"
Data.w 25 : Data.s "Electronic Kit"
Data.w 17 : Data.s "Power Kit           "

Data.w -1

tui_skipdata:

CNIF #__include=0
; Notify values set by user
#notify_quit        =  1
#notify_popup       =  2
#notify_iconify     =  3
#notify_filedrop    =  4
#notify_cycle       =  5
#notify_button      =  6
#notify_listview    =  7
#notify_multilist   =  8
#noitfy_string      =  9
#notify_numstring   = 10
#notify_view        = 11
#notify_checkbox    = 12
#notify_levelmeter  = 13
#notify_label       = 14
#notify_menu        = 15


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: win_tuidemo {}                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement win_tuidemo {}
SHARED acwin,test.l
  If tui_win_init {0,0,"TUI Demo"}    ; start a new window of tyoe #wintyp_test and instance id=0

    ; Online-Info Button
    a.s = "This is the \\22periodic table\\22 of the TUI GUI System. Here are all types of gadgets shown that are possible."
    a.s + "The principle is simple: You generate all gadgets (called tui-objects) you want to use, and then group them with the tui_group object, which is a tui-object again and can be grouped further. "
    a.s + "At the end of the grouping, there has to be one final group object. This one is defined as the parent object. All layout stuff is done dynamically, but can be influenced like "
    a.s + "settings flags for each object to have fixed size, be right aligned etc. Every tui-object can have a bubble help as well, like this one, and most tui object can have this fancy mouseover effect. "
    tui_button {70,"Move the Mousepointer over me first!",#notify_button}: tui_sethelp {70,a.s}

    ; Texteditor
    tui_texteditor {1,#tui_tag_iframe,0,#tuited_notepad,150,5}
    tui_sethelp {1,"tui_texteditor: This is TUIs texteditor gadget. It can be highly configured to behave like EditPad or BlitzBasic PED. Different syntax highlightning styles (BlitzBasic, C, HTML and custom) are possible as well."}
    *ted.tuited = tui_ted_ptr{acwin,1}
    If *ted
      text.s = "Hello World!"
      ted_putstring {*ted,&text.s}
    End If

    ; Cycle Gadget
    tui_cycle      {2,"Human|Elbe|Dwarf|Orc",0,#notify_cycle} : tui_sethelp {2,"tui_cycle: Cycle Gadget - contains some choices in plain text, result will be the index number starting from 0"}

    ; Text Button
    tui_button     {3,"Hit me !",#notify_nothing}             : tui_sethelp {3,"tui_button: Simple Text Button - normally you specify a notify value that can be fetched with tui_getnoitfy{}"}

    image_Load{1,"TBImages:cut"}
    image_Load{2,"TBImages:cut_s"}
    tui_imagegad     {9,1,2,-1,#notify_nothing}

    ; String Gadget
    tui_string     {4,64,"Type something"}      : tui_sethelp {4,"tui_string: String Gadget - let the user type some one-line text"}

    ; Numeric String Gadget
    tui_numstring  {5,0,10000,1234} : tui_settag {5,#tui_tag_incdec}
    tui_sethelp {5,"tui_numstring: Numeric Sting - same like string gadget, but let the user only enter numeric values within the given bounds, the +/- are optional"}

    ; Label
    tui_label      {10,"I am just a text label",#tui_tag_centered}
    tui_sethelp {10,"tui_label: Text Label - normally used to display some label text or other info, it can have different text styles and can even return a notify value when clicked."}

    ; Page Container
    tui_label {6,"Here is page 1!",#tui_tag_centered} : tui_frametitle {6,"Page 1"}
    tui_label {7,"And here page 2!",#tui_tag_centered} : tui_frametitle {7,"Page 2"}
    tui_addpage    {8,0,6,7}
    tui_sethelp {8,"tui_page: This is an container object that can contain up to 16 pages, every page can contain every tuiobject, also groups or more pages are allowed."}

    ; Multi-Column Listview
;    tui_listview {11,0}         : tui_frametitle {11,"%bName>=Race>=Strength>=Intelligence"}
;    tui_notify{11,#notify_listview} ; we want to get notified by the listview
;    tui_settag{11,#tui_tag_multi}
;    tui_sethelp {11,"tui_listview: This tui object can handle simple listviews up to multi - colum listviews with titles. Every row and every column can get different tui_tag, e.g. one row can be bold, another with righter colour"}
;    tui_listview_add {acwin,11,"Frodo>=Hobbit>=30%>=76%",1,0,0,False}
;    tui_listview_add {acwin,11,"Aragorn>=Human>=78%>=65%",2,0,0,False}
;    tui_listview_add {acwin,11,"Gandalf>=Wizzard>=65%>=82%",3,#tui_tag_disabled,0,False}
;    tui_listview_add {acwin,11,"Smeagol>=Hobbit>=43%>=46%",4,0,0,False}
;    tui_listview_add {acwin,11,"Thilo>=Human>=89%>=99%",4,0,0,False}

    tui_listview {11,0}         : tui_frametitle {11,"%rName>=Message"}
    tui_notify{11,#notify_listview} ; we want to get notified by the listview
;    tui_settag{11,#tui_tag_multi|#tui_tag_bright}
    tui_sethelp {11,"tui_listview: This tui object can handle simple listviews up to multi - colum listviews with titles. Every row and every column can get different tui_tag, e.g. one row can be bold, another with righter colour"}
    tui_listview_add {acwin,11,"%bThilo>>=%bN'abend, wie geht's denn so?",1,0,-1,False}
;    tui_listview_add {acwin,11,"-------------->=--------------------------------------------------",4,#tui_tag_disabled,-1,False}
;    tui_listview_add {acwin,11,">=_______________________________________",4,#tui_tag_disabled,-1,False}

    tui_listview_add {acwin,11,"BruZard>>=Gut, danke, und dir?",2,0,-1,False}
;    tui_listview_add {acwin,11,">=_______________________________________",4,#tui_tag_disabled,-1,False}
;    tui_listview_add {acwin,11,"-------------->=--------------------------------------------------",4,#tui_tag_disabled,-1,False}

    tui_listview_add {acwin,11,"%bThilo>>=%bToll, denn ich fahre morgen in den",3,0,-1,False}
    tui_listview_add {acwin,11,">=%bUrlaub nach Zypern, und zwar f�r ganze",4,0,-1,False}
    tui_listview_add {acwin,11,">=%b2 Wochen. Toll, nicht?",4,0,-1,False}
;    tui_listview_add {acwin,11,"-------------->=--------------------------------------------------",4,#tui_tag_disabled,-1,False}
;      tui_listview_add {acwin,11,">=_______________________________________",4,#tui_tag_disabled,-1,False}

        tui_listview_add {acwin,11,"BruZard>>=Jau toll, dann w�nsche ich dir",4,0,-1,False}
    tui_listview_add {acwin,11,">=mal viel Spass!",4,0,-1,False}


    ; Status bar for progress indication
    tui_statusbar {12,100,50}
    tui_sethelp {12,"tui_statusbar: can be used to display the progress of some action. It can go foreward or backward."}

    ; Slider Gadget
    tui_hslider {13,-100,100,"%",50}
    tui_sethelp {13,"tui_hslider: Slider Gadget, can be either horizontal or varical. It can optionally display its value in many different styles, like linear, plusminus, centi, deci, gain etc."}

    ; Scroller Gadget
    tui_hscroller {14,50,100,50,True}
    tui_sethelp {14,"tui_hscroller: Scroller Gadget, can be either horizontal or vertical. Scrollers can also be \\22connected\\22 to tui_view, so scrolling and updating is done automatically"}

    ; Custom View
    tui_view  {15,#tui_tag_iframe,0,#notify_view}
    a.s = "tui_view: This is one of the most powerful tui objects - it can display any user defined stuff. Some scrollers can be attached and it can scroll automatically. You will bet back a notify value that tells you which region"
    a.s + " at which offset has to be redrawn."
    tui_sethelp {15,a.s}

    ; Checkbox
    tui_checkbox  {18,True}
    tui_sethelp {18,"tui_checkbox: A checkbox with on/off boolvalue, thats it!"}

    ; Levelmeter
    tui_levelmeter {16,2,2,2}
    tui_sethelp {16,"tui_levelmeter: special gadget, mainly developed for HD-Rec, can display values from 0-32767 in flashing LEDs style"}

    ; Mixer Gain Slider
    tui_vslider {17,0,400,"",100} : tui_sliderlevel {17,#slider_mixergain}
    tui_sethelp {17,"tui_vslider: special style of a vertical slider to display a gain control"}

    ; Multilist (=Tree)
    tui_multilist_path {19,#notify_multilist,"Sys:","Your Home Directory","#?"}
    tui_sethelp {19,"tui_multilist: This is a powerful way to display long list that are organizd in tree structures, like a file directory, but every other kind of data can be displayed here"}
    tui_setsize {19,150,200}

    ; Envelope
    tui_envelope  {20,#tui_tag_centered}
    tui_sethelp {20,"tui_envelope: A simple ADSR envelope!"}


    ; and now group all this tui objects to give them a title...
    tui_addvgroup {51,100, 1} : tui_frametitle {51,"TextEditor Gadget"}
    tui_addvgroup {52,100, 2} : tui_frametitle {52,"Cycle Gadget"}
    tui_addvgroup {53,100, 3} : tui_frametitle {53,"Text Button"}
    tui_addvgroup {54,100, 4} : tui_frametitle {54,"String Gadget"}
    tui_addvgroup {55,100, 5} : tui_frametitle {55,"Numeric String"}
    tui_addvgroup {58,100, 8} : tui_frametitle {58,"Page Container"}
    tui_addvgroup {59,100, 9} : tui_frametitle {59,"Image Button"}
    tui_addvgroup {60,100,10} : tui_frametitle {60,"Text Label"}
    tui_addvgroup {61,100,11} : tui_frametitle {61,"Multicolumn Lisview"}
    tui_addvgroup {62,100,12} : tui_frametitle {62,"Progress Bar"}
    tui_addvgroup {63,100,13} : tui_frametitle {63,"Horizontal Slider"}
    tui_addvgroup {64,100,14} : tui_frametitle {64,"Horizontal Scroller"}
    tui_addvgroup {65,100,15} : tui_frametitle {65,"Custom View"}
    tui_addvgroup {66,100,16} : tui_frametitle {66,"Levelmeter"}
    tui_addvgroup {67,100,17} : tui_frametitle {67,"Mixer Gain"}
    tui_addvgroup {68,100,18} : tui_frametitle {68,"Checkbox"}
    tui_addvgroup {69,100,19} : tui_frametitle {69,"Tree Browser"}
    tui_addvgroup {71,100,20} : tui_frametitle {71,"ADSR Envelope"}

    ; and now group them together
    tui_addvgroup {100,100,60,53,52,54} : tui_frametitle {100,"Simple Gadgets"}
    tui_addvgroup {100,100,55,63,64,68}
    tui_addvgroup {100,100,59}
    tui_addvgroup {106,100,58,61,65}
    tui_addvgroup {107,100,69,51}
    tui_addhgroup {101,100,107,106} : tui_frametitle {101,"Complex Gadgets"}
    tui_addvgroup {102,100,62,66,67,71} : tui_frametitle {102,"TUI Specials"}

    ; make them onto the page
    tui_addpage {0,0,100,101,102}

    ; the exit button ...
    tui_button {104,"Exit",#notify_quit} : tui_sethelp {104,"close this window"}
    tui_addvgroup {105,100,70,0,104}

    ; Define the parent group object
    tui_setparent {105}
    tui_setsize{105,400,300}
    tui_notify {105,#notify_iconify} ; this is notified when we press "ESC"

    ; Make a menu
    tui_initmenu{}
    tui_menutitle {"Example Menu"}
    tui_menuitem {"Normal Menuitem","n",0,#notify_menu,0}
    tui_menubar {}
    tui_menuitem {"More Items here...","",0,0,0}
    tui_menusubitem {"Subitem 1","1",0,#notify_menu,0}
    tui_menusubitem {"Subitem 2","2",0,#notify_menu,0}
    tui_menumirror {&test}
    tui_menubar {}
    tui_menuitem {"Iconify","i",0,#notify_iconify,0}
    tui_menuitem {"Quit","q",0,#notify_quit,0}
    tui_win_open {}
    tui_appnotify {acwin,#notify_filedrop}
    tui_view_setmouse {acwin,15,#mousepointer_ocular}
  End If
End Statement

If screen_Open{""}         ; gimme the WBScreen, see screen.include for details!
If tui_init{"",-1,"Helvetica",11,"",-1}  ; init TUI with Screens font and Helvetica,11 for small font
  tui_setdeftags {#tui_tag_ihl}        ; we want this fancy highlightning as default
  tui_setsmart {False}
  tui_initapp {"TUI Demo","Blitz3:Amiblitz3","TUI Demo Menu",#notify_popup,#notify_filedrop,0}

  eclock_Start{1000}
;  !cout{"start"}
;  !cout{eclock_Stop{},"ms to openconsole"}
  win_tuidemo {}
;  !cout{eclock_Stop{},"ms to open window"}
 

  While breakme.l = False
    Wait_ -1


    Repeat
    notify.l = tui_getnotify{0,False}
    win.l    = tuiev_win{}
    tuiobj.l = tuiev_obj{}
    Select notify

      Case #notify_tuirefresh_obj
        ys.l = tuidat(win,tuiobj)\ys/2
        y.l = tuidat(win,tuiobj)\y + ys
        For x.l = tuidat(win,tuiobj)\x To tuidat(win,tuiobj)\x+tuidat(win,tuiobj)\xs-1
          WPlot x,Sin(x/10)*ys + y,3
        Next

      Case #notify_cycle
        message {"Hit the cycle gadget, value is "+Str$(tuidat_value {win,tuiobj})}

      Case #notify_menu
        message {"Hit menu "+Str$(tuiev_menu_title{})+" Item "+Str$(tuiev_menu_item{})+" Sub: "+Str$(tuiev_menu_sub{})}

      Case #notify_view
        If tuiev_mpress {}
          tui_domouseranging{}
        Else
          message {"Custom view ranged: "+Str$(tuiev_mx{})+"/"+Str$(tuiev_my{})+", size "+Str$(tuiev_xs{})+"/"+Str$(tuiev_ys{})}
        End If

      Case #notify_multilist
        item.s = tuiev_string{}
        pos.l  = tuiev_value {}
        message {"Clicked the multilist item: "+item.s}

      Case #notify_listview
        If tuiev_mclick{}
          pos.l  = tuiev_value {}
          idata.l = tui_listview_get_user_data{win,tuiobj,pos}
          message {"Clicked the listview item #"+Str$(pos)}
        End If

      Case #notify_quit
        breakme = True

      Case #notify_iconify
        tui_iconify {}

      Case #notify_popup
        eclock_Start{1000}
        tui_popup{}
        win_tuidemo {}
        ; !cout{eclock_Stop{},"ms to notify popup"}

      Case #notify_filedrop
        message {"Droped the file \\22"+tuiev_string{}+"\\22 to the application !"}
        If tuiobj=1 AND win>=0
          message {"And we hit the texteditor !"}
          succ.l = ted_load_ascii {tuidat(win,1)\modulo,tuiev_string{}}
        End If

    End Select
    Until notify = 0
  Wend

End If
tui_free{}

screen_Close{}
End If
End
CEND

