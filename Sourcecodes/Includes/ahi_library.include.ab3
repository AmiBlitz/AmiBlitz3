; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "AHILibDemo"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 2
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name:  ahi_library.include                                                  /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 11.08.2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements: Amiblitz2.4, AHI 4.0+                                         /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Encapsule AHI library interface functions to access them easy from Amibli:: /
;/ tz2.                                                                        /
;/                                                                             /
;/ Abstract:                                                                   /
;/ This include was written espcially for HD-Rec. It contains many (if not a:: /
;/ ll) functions concerning the AHI library interface.                         /
;/ Because it contains also a lot of HD-Rec specific code, it is not usable :: /
;/ directly for other programs. If you are interessted in the AHI library in:: /
;/ terface, you can use this inlcude as a knowledge source of how to use thi:: /
;/ s library interface.                                                        /
;/ You might want then to write your own inlcude that doesnt contain program:: /
;/  specfic code.                                                              /
;/                                                                             /
;/ The functions are not explained in this guide, you have only a list of fu:: /
;/ nctions and parameters. If you want to know more about it, ask Thilo Koeh:: /
;/ ler for a detailed documentation.                                           /
;/                                                                             /
;/ User Constants:    none                                                     /
;/                                                                             /
;/ Example:                                                 none               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
SYNTAX 2
OPTIMIZE 7
XINCLUDE "error.include.ab3"
error {"This include has no internal demo!"}
End
CELSE

XINCLUDE "error.include.ab3"
XINCLUDE "libcall.include.ab3"
XINCLUDE "dos.include.ab3"
XINCLUDE "plugin_newtypes.include.ab3"
XINCLUDE "HDRec_MIDI.include.ab3"
XINCLUDE "asm_audio.include.ab3"


#mode_ahi = -1
#mode_uae = 0


;_______________________________________ AHI Library offsets
#AHI_AllocAudioA         =  42

#AHI_FreeAudio           =  48
#AHI_KillAudio           =  54
#AHI_ControlAudioA       =  60
#AHI_SetVol              =  66
#AHI_SetFreq             =  72
#AHI_SetSound            =  78
#AHI_SetEffect           =  84
#AHI_LoadSound           =  90
#AHI_UnloadSound         =  96
#AHI_NextAudioID         = 102
#AHI_GetAudioAttrsA      = 108
#AHI_BestAudioIDA        = 114
#AHI_AllocAudioRequestA  = 120
#AHI_AudioRequestA       = 126
#AHI_FreeAudioRequest    = 132
#AHI_PlayA               = 138
#AHI_SampleFrameSize     = 144
#AHI_AddAudioMode        = 150
#AHI_RemoveAudioMode     = 156
#AHI_LoadModeFile        = 162

;________________________________________ AHI sampleinfos
#AHIST_NOTYPE            = -1
#AHIST_SAMPLE            = 0
#AHIST_DYNAMICSAMPLE     = 1
#AHIST_INPUT             = $20000000
#AHIST_BW                = $40000000
#AHIST_M8S               = 0     ;  8 mono signed
#AHIST_M16S              = 1     ; 16 mono signed
#AHIST_S8S               = 2     ;
#AHIST_S16S              = 3
#AHIST_M32S              = 8
#AHIST_S32S              = 10
#AHIST_M8U               = 4

; ________________________________ Requester Tags
#AHIR_WINDOW             = $800000C8
#AHIR_SCREEN             = $800000C9
#AHIR_PUBSCREENNAME      = $800000CA
#AHIR_PRIVATEIDCMP       = $800000CB
#AHIR_INTUIMSGFUNC       = $800000CC
#AHIR_SLEEPWINDOW        = $800000CD
#AHIR_USERDATA           = $800000CE
#AHIR_TEXTATTR           = $800000DC
#AHIR_LOCALE             = $800000DD
#AHIR_TITLETEXT          = $800000DE
#AHIR_POSITIVETEXT       = $800000DF
#AHIR_NEGATIVETEXT       = $800000E0
#AHIR_INITIALLEFTEDGE    = $800000F0
#AHIR_INITIALTOPEDGE     = $800000F1
#AHIR_INITIALWIDTH       = $800000F2
#AHIR_INITIALHEIGHT      = $800000F3
#AHIR_INITIALAUDIOID     = $800000F4
#AHIR_INITIALMIXFREQ     = $800000F5
#AHIR_INITIALINFOOPENED  = $800000F6
#AHIR_INITIALINFOLEFTEDGE= $800000F7
#AHIR_INITIALINFOTOPEDGE = $800000F8
#AHIR_INITIALINFOWIDTH   = $800000F9
#AHIR_INITIALINFOHEIGHT  = $800000FA
#AHIR_DOMIXFREQ          = $80000104
#AHIR_DODEFAULTMODE      = $80000105
#AHIR_FILTERTAGS         = $8000010E
#AHIR_FILTERFUNC         = $8000010F

;_________________________________ AudioCtrl Tags
#AHIA_AUDIOID            = $80000001
#AHIA_MIXFREQ            = $80000002
#AHIA_CHANNELS           = $80000003
#AHIA_SOUNDS             = $80000004
#AHIA_SOUNDFUNC          = $80000005
#AHIA_PLAYERFUNC         = $80000006
#AHIA_PLAYERFREQ         = $80000007
#AHIA_MINPLAYERFREQ      = $80000008
#AHIA_MAXPLAYERFREQ      = $80000009
#AHIA_RECORDFUNC         = $8000000A
#AHIA_USERDATA           = $8000000B

;__________________________________ GetAttrs Tags
#AHIDB_AUDIOID           = $80000064
#AHIDB_DRIVER            = $80008065
#AHIDB_FLAGS             = $80000066
#AHIDB_VOLUME            = $80000067
#AHIDB_PANNING           = $80000068
#AHIDB_STEREO            = $80000069
#AHIDB_HIFI              = $8000006A
#AHIDB_PINGPONG          = $8000006B
#AHIDB_MULTTABLE         = $8000006C
#AHIDB_NAME              = $8000806D
#AHIDB_BITS              = $8000006E
#AHIDB_MAXCHANNELS       = $8000006F
#AHIDB_MINMIXFREQ        = $80000070
#AHIDB_MAXMIXFREQ        = $80000071
#AHIDB_RECORD            = $80000072
#AHIDB_FREQUENCIES       = $80000073
#AHIDB_FREQUENCYARG      = $80000074
#AHIDB_FREQUENCY         = $80000075
#AHIDB_AUTHOR            = $80000076
#AHIDB_COPYRIGHT         = $80000077
#AHIDB_VERSION           = $80000078
#AHIDB_ANNOTATION        = $80000079
#AHIDB_INDEXARG          = $8000007B
#AHIDB_BUFFERLEN         = $8000007A
#AHIDB_INDEX             = $8000007C
#AHIDB_REALTIME          = $8000007D
#AHIDB_MAXPLAYSAMPLES    = $8000007E
#AHIDB_MAXRECORDSAMPLES  = $8000007F
#AHIDB_MIXFREQ           = $80000080
#AHIDB_FULLDUPLEX        = $80000081
#AHIDB_MINMONITORVOLUME  = $80000082
#AHIDB_MAXMONITORVOLUME  = $80000083
#AHIDB_MININPUTGAIN      = $80000084
#AHIDB_MAXINPUTGAIN      = $80000085
#AHIDB_MINOUTPUTVOLUME   = $80000086
#AHIDB_MAXOUTPUTVOLUME   = $80000087
#AHIDB_INPUTS            = $80000088
#AHIDB_INPUTARG          = $80000089
#AHIDB_INPUT             = $8000008A
#AHIDB_OUTPUTS           = $8000008B
#AHIDB_OUTPUTARG         = $8000008C
#AHIDB_OUTPUT            = $8000008D
#AHIDB_DATA              = $8000808E

;_______________________________________ audio control
#AHIC_PLAY               = $80000050
#AHIC_RECORD             = $80000051
#AHIC_MONITORVOLUME      = $80000052
#AHIC_MONITORVOLUME_QUERY= $80000053
#AHIC_MIXFREQ_QUERY      = $80000054
#AHIC_INPUTGAIN          = $80000055
#AHIC_INPUTGAIN_QUERY    = $80000056
#AHIC_OUTPUTVOLUME       = $80000057
#AHIC_OUTPUTVOLUME_QUERY = $80000058
#AHIC_INPUT              = $80000059
#AHIC_INPUT_QUERY        = $8000005A
#AHIC_OUTPUT             = $8000005B
#AHIC_OUTPUT_QUERY       = $8000005C

;____________________________________ sonstiges
#AHI_INVALID_ID          = -1
#AHI_DEFAULT_ID          = 0
#AHI_LOOPBACK_ID         = 1
#AHI_DEFAULT_FREQ        = 0
#AHI_MIXFREQ             = -1
#AHI_NOSOUND             = -1
#AHI_DEFAULT_UNIT        = 0
#AHI_NO_UNIT             = $FF

;____________________________________ error codes
#AHIE_OK                 = 0
#AHIE_NOMEM              = 1
#AHIE_BADSOUNDTYPE       = 2
#AHIE_BADSAMPLETYPE      = 3
#AHIE_ABORTED            = 4
#AHIE_UNKNOWN            = 5
#AHIE_HALFDUPLEX         = 6

;____________________________________ RT fx
#AHIET_CANCEL            = $80000000
#AHIET_MASTERVOLUME      = 1
#AHIET_OUTPUTBUFFER      = 2
#AHIET_DSPMASK           = 3
#AHIET_DSPECHO           = 4
#AHIET_CHANNELINFO       = 5

#AHISF_IMM               = 1


NEWTYPE.AHISoundMessage
  ahismChannel.w  ; ? .w
End NEWTYPE

NEWTYPE.AHIRecordMessage
ahirmType.l
ahirmBuffer.l
ahirmLength.l
End NEWTYPE

NEWTYPE.AHISampleInfo
  type_.l
  address.l
  blength.l
End NEWTYPE

NEWTYPE.AHIAudiomodeRequester
  audioid.l
  mixfreq.l
  leftedge.w
  topedge.w
  width.w
  height.w
  infoopened.w
  infoleftedge.w
  infotopedge.w
  infowidth.w
  infoheight.w
  userdata.l
End NEWTYPE

NEWTYPE.AHIAudioCtrl
  userdata.l
End NEWTYPE

NEWTYPE.AHIeffoutputbuffer
  effect.l          ; 0
  func.l            ; 4
  type_.l           ; 8
  buffer_.l         ; 12
  blength.l         ; 16
End NEWTYPE

NEWTYPE.AHIIORequest
  StdIO.IOStdReq
  version.w
  pad1.w
  private1.l
  private2.l
  type_.l
  frequency.l
  volume_.l
  position.l
  link_.l
End NEWTYPE


NEWTYPE.AHI_unit
is_open.w
is_init.w
is_fake.w       ; is fake, if mode><#mode_ahi
mode.w          ; #mode_ahi or #mode_uae
;_______________________________________________ pointers
msgport.l
iorequest.l
modereq.l
;_______________________________________________ strings & allocs
requestertitle.s
pubscreenname.s
taglist_req.TagItem[256]
taglist_alloc.TagItem[256]
taglist_reqA.TagItem[256]
taglist_ctrl.TagItem[256]
taglist_get.TagItem[256]
;out_effect.AHIeffoutputbuffer

;_______________________________________________ audio info
modeid.l
channels.w
bits.w
framesize.l
samplerate.l
running.w
playing.w
recording.w
buffer_outsize.l
buffer_insize.l

;_______________________________________________ requester info
req_modeid.l
req_mixfreq.l

;_______________________________________________ AHI pointers
AHI_base.l
actrl.l

;_______________________________________________ hook pointer
func_sound.Hook
func_player.Hook
func_rec.Hook
rescue_rec.l
rescue_samplerate.l
grab_out.l
End NEWTYPE


NEWTYPE.AHI_winuae
int_installed.l
in_buffer.l
in_bsize.l
in_framesize.l
in_fsize.l
is_open.l
do_rec.l
End NEWTYPE

DEFTYPE.AHI_winuae AHI_winuae
DEFTYPE.AHI_unit AHI_unit
USEPATH AHI_unit


\requestertitle = "Select AHI mode ..."
\pubscreenname = "default"

\func_sound\h_Entry        = ?soundfunc
\func_sound\h_SubEntry     = 0
\func_sound\h_Data         = 0

\func_player\h_Entry       = ?playerfunc
\func_player\h_SubEntry    = 0
\func_player\h_Data        = 0

\func_rec\h_Entry          = ?recfunc
\func_rec\h_SubEntry       = 0
\func_rec\h_Data           = 0

\modeid = #AHI_DEFAULT_ID


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_setpubscreen {pubscreen.s}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - pubscreen.s    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_setpubscreen{pubscreen.s}
SHARED AHI_unit
\pubscreenname = pubscreen.s
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = ahilb_request_alloc {x.l,y.l,xs.l,ys.l}                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - xs.l    : ???                                                             /
;/ - ys.l    : ???                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ahilb_request_alloc{x.l,y.l,xs.l,ys.l}
SHARED AHI_unit
succ.w = False
n.l = 0
;\taglist_req[n]\ti_Tag = #AHIR_WINDOW,0                              : n+1
;\taglist_req[n]\ti_Tag = #AHIR_SCREEN,Peek.l(Addr Screen (0))                             : n+1
\taglist_req[n]\ti_Tag = #AHIR_PUBSCREENNAME,&\pubscreenname                       : n+1
;\taglist_req[n]\ti_Tag = #AHIR_PRIVATEIDCMP,False                    : n+1
;\taglist_req[n]\ti_Tag = #AHIR_INTUIMSGFUNC,False                    : n+1
;\taglist_req[n]\ti_Tag = #AHIR_SLEEPWINDOW,False                     : n+1
;\taglist_req[n]\ti_Tag = #AHIR_USERDATA,12345                            : n+1
;\taglist_req[n]\ti_Tag = #AHIR_TEXTATTR,0                            : n+1
;\taglist_req[n]\ti_Tag = #AHIR_LOCALE,0                              : n+1
\taglist_req[n]\ti_Tag = #AHIR_TITLETEXT,&\requestertitle  : n+1
;\taglist_req[n]\ti_Tag = #AHIR_POSITIVETEXT,False                    : n+1
;\taglist_req[n]\ti_Tag = #AHIR_NEGATIVETEXT,False                    : n+1
\taglist_req[n]\ti_Tag = #AHIR_INITIALLEFTEDGE,x                      : n+1
\taglist_req[n]\ti_Tag = #AHIR_INITIALTOPEDGE,y                       : n+1
\taglist_req[n]\ti_Tag = #AHIR_INITIALWIDTH,xs                        : n+1
\taglist_req[n]\ti_Tag = #AHIR_INITIALHEIGHT,ys                       : n+1
\taglist_req[n]\ti_Tag = #AHIR_INITIALAUDIOID,\modeid                 : n+1
\taglist_req[n]\ti_Tag = #AHIR_INITIALMIXFREQ,44100            : n+1
;\taglist_req[n]\ti_Tag = #AHIR_INITIALINFOOPENED,True                   : n+1
;\taglist_req[n]\ti_Tag = #AHIR_INITIALINFOLEFTEDGE,0                 : n+1
;\taglist_req[n]\ti_Tag = #AHIR_INITIALINFOTOPEDGE,0                  : n+1
;\taglist_req[n]\ti_Tag = #AHIR_INITIALINFOWIDTH,300                    : n+1
;\taglist_req[n]\ti_Tag = #AHIR_INITIALINFOHEIGHT,200                   : n+1
\taglist_req[n]\ti_Tag = #AHIR_DOMIXFREQ,True                         : n+1
\taglist_req[n]\ti_Tag = #AHIR_DODEFAULTMODE,True                     : n+1
\taglist_req[n]\ti_Tag = #AHIR_FILTERTAGS,&\taglist_req[n+2]                       : n+1
;\taglist_req[n]\ti_Tag = #AHIR_FILTERFUNC,0                           : n+1
\taglist_req[n]\ti_Tag = #TAG_DONE,0                                   :n+1
\taglist_req[n]\ti_Tag = #AHIDB_REALTIME,True                              :n+1
;\taglist_req[n]\ti_Tag = #AHIDB_FULLDUPLEX,True                              :n+1
\taglist_req[n]\ti_Tag = #TAG_DONE,0                                   :n+1
libcall_adr{&\taglist_req[0]\ti_Tag,0,0,0,0}
\modereq = libcall{\AHI_base,#AHI_AllocAudioRequestA}
If \modereq Then succ.w = True:Else error{"Unable to allocate audio requester !"}
Function Return succ
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_request_free {}                                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_request_free{}
SHARED AHI_unit
libcall_adr{\modereq,0,0,0,0}
dummy.l = libcall{\AHI_base,#AHI_FreeAudioRequest}
\modereq = False
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = ahilb_request {}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ahilb_request{}
SHARED AHI_unit
succ.w = False
n.l=0
\taglist_reqA[n]\ti_Tag = #AHIR_INITIALAUDIOID,\req_modeid          : n+1
\taglist_reqA[n]\ti_Tag = #AHIR_INITIALMIXFREQ,\req_mixfreq         : n+1
\taglist_reqA[n]\ti_Tag = #TAG_DONE,0
libcall_adr{\modereq,&\taglist_reqA[0]\ti_Tag,0,0,0}
If libcall{\AHI_base,#AHI_AudioRequestA}
  succ.w = True
  *req.AHIAudiomodeRequester = \modereq
  \req_modeid   = *req\audioid
  \req_mixfreq  = *req\mixfreq
EndIf
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ahilb_requester_modeid {}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ahilb_requester_modeid{}
SHARED AHI_unit
Function Return \req_modeid
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ahilb_requester_mixfreq {}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ahilb_requester_mixfreq{}
SHARED AHI_unit
Function Return \req_mixfreq
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_requester_setmodeid {modeid.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - modeid.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_requester_setmodeid{modeid.l}
SHARED AHI_unit
\req_modeid = modeid
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_requester_setmixfreq {mixfreq.l}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mixfreq.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_requester_setmixfreq{mixfreq.l}
SHARED AHI_unit
\req_mixfreq = mixfreq
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = ahilb_audio_control {tag.l,value.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tag.l    : ???                                                            /
;/ - value.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ahilb_audio_control{tag.l,value.l}
SHARED AHI_unit,AHI_winuae
succ.w = False
If \is_open
  Select \mode
    Case #mode_uae ; WinUAE

      RunErrsOff
      Select tag
        Case #AHIC_PLAY
          If value
            If AHI_winuae\int_installed=False
              ; open the WinUAE audio device
              GetReg d2,AHI_unit\samplerate    ;samplerate
              GetReg d3,\buffer_outsize
              MOVEQ #0,d0
              MOVEQ #0,d1              ;Mode= open sounddevice
              JSR $f0ffc0              ;call the uaelib    (d0 contain samplerate)

              ; install the audio interrupt
              MOVE.l a6,-(a7)
              MOVE.l $4,a6
              LEA uae_intstruct,a1
              MOVE.l a1,uae_lev7_Int
              MOVEQ #13,d0
              JSR -$A8(A6)             ;install the level 6 Interrupt
              MOVE.l (a7)+,a6
              AHI_winuae\int_installed=True
            End If
          Else
            If AHI_winuae\int_installed
              ; remove the audio interrupt
              MOVE.l a6,-(a7)
              MOVEQ #13,d0
              MOVE.l $4,a6
              LEA uae_intstruct ,a1
              JSR -174(A6)               ;remove the level 6 Interrupt

              ; close the WinUAE audio device
              MOVEQ #1,d0
              MOVEQ #0,d1
              JSR $f0ffc0           ;call the uaelib to close uae audio
              MOVE.l (a7)+,a6
              AHI_winuae\int_installed=False
            End If

          End If
          succ=True

        Case #AHIC_RECORD
          If value
            AHI_winuae\do_rec = True
          Else
            AHI_winuae\do_rec = False
          End If
          succ=True

      End Select
      LastRunErrsMode

    Case #mode_ahi
      \taglist_ctrl[0]\ti_Tag = tag,value
      \taglist_ctrl[1]\ti_Tag = #TAG_DONE,0
      libcall_adr{0,&\taglist_ctrl[0]\ti_Tag,\actrl,0,0}
      If libcall{\AHI_base,#AHI_ControlAudioA} = #AHIE_OK Then succ.w = True;:Else error{"Unable to set audio control !"}

  End Select
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_audio_free {}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_audio_free{}
SHARED AHI_unit,AHI_winuae
If \actrl
  libcall_adr{0,0,\actrl,0,0}
  dummy.l = libcall{\AHI_base,#AHI_FreeAudio}
  \actrl = False
End If
If AHI_winuae\is_open
  If AHI_winuae\int_installed
    error{"AHI_audio_free: WinUAE audio interrupt is still installed! (eeek!)"}
      ahilb_audio_control{#AHIC_PLAY,False}
  End If
  AHI_winuae\is_open = False
  ; WinUAE audio device is always closed in AHI_audio_control
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = ahilb_getattr {mode.l,attr.l, result.l,n.l}             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mode.l    : ???                                                           /
;/ - attr.l    : ???                                                           /
;/ - result.l    : ???                                                         /
;/ - n.l    : ???                                                              /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ahilb_getattr{mode.l,attr.l,result.l,n.l}
SHARED AHI_unit
succ.w = False
audioctrl.l = 0

If mode = #AHI_INVALID_ID
Select \mode
  Case #mode_uae
    Function Return False

  Case #mode_ahi
    audioctrl.l = \actrl
  Default
    Function Return False
End Select
End If
\taglist_get[n]\ti_Tag = attr,result : n+1
\taglist_get[n]\ti_Tag = #TAG_DONE,0
libcall_dat_low{mode,0,0,0}
libcall_adr{0,&\taglist_get[0]\ti_Tag,audioctrl,0,0}
If libcall{\AHI_base,#AHI_GetAudioAttrsA}
  succ.w = True
Else
  error{"Unable to get attribute !"}
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = ahilb_audio_alloc {latency.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - pf.q    : ???                                                             /
;/ - latency.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ahilb_audio_alloc{latency.l}
SHARED AHI_unit,AHI_winuae
succ.w = False

Select \mode
  Case #mode_uae ; WinUAE
    If \samplerate<=0 Then \samplerate = 44100 ; default
    If latency<1 Then latency = 32 ; default
    buffersize.l = \samplerate*latency/1000
    samplerate.l = \samplerate

    ; * THIS IS DONE IN AHI_audio_control NOW, JUST IN TIME
    ;RunErrsOff
    ;MOVEQ #0,d1              ;Mode= open sounddevice
    ;GetReg d2,samplerate    ;samplerate
    ;GetReg d3,buffersize
    ;MOVEQ #0,d0
    ;JSR $f0ffc0              ;call the uaelib    (d0 contain samplerate)
    ;LastRunErrsMode
    \actrl = 0
    \is_fake = -1
    AHI_winuae\is_open = True
    \buffer_outsize = buffersize
    \buffer_insize  = buffersize
    AHI_winuae\in_fsize = buffersize
    AHI_winuae\in_framesize = 4
    AHI_winuae\in_bsize = buffersize*AHI_winuae\in_framesize
    AHI_winuae\in_buffer = AllocMem_(AHI_winuae\in_bsize,#MEMF_CLEAR)


    succ = True


  Case #mode_ahi
    If \modeid><#AHI_INVALID_ID
      If \actrl Then ahilb_audio_free{}
      n.l = 0
      pf.q = 1000.0 / latency
      \taglist_alloc[n]\ti_Tag = #AHIA_AUDIOID,\modeid             : n+1
      \taglist_alloc[n]\ti_Tag = #AHIA_MIXFREQ,\samplerate         : n+1
      \taglist_alloc[n]\ti_Tag = #AHIA_CHANNELS,1                  : n+1
      \taglist_alloc[n]\ti_Tag = #AHIA_SOUNDS,2                    : n+1
      \taglist_alloc[n]\ti_Tag = #AHIA_SOUNDFUNC,&\func_sound      : n+1
      \taglist_alloc[n]\ti_Tag = #AHIA_RECORDFUNC,&\func_rec       : n+1
      \taglist_alloc[n]\ti_Tag = #AHIA_PLAYERFUNC,&\func_player    : n+1
      \taglist_alloc[n]\ti_Tag = #AHIA_PLAYERFREQ,pf       : n+1
      \taglist_alloc[n]\ti_Tag = #AHIA_MINPLAYERFREQ,pf    : n+1
      \taglist_alloc[n]\ti_Tag = #AHIA_MAXPLAYERFREQ,pf    : n+1
    ;  \taglist_alloc[n]\ti_Tag = #AHIA_USERDATA,0        : n+1
      \taglist_alloc[n]\ti_Tag = #TAG_DONE,0
      libcall_adr{0,&\taglist_alloc[0]\ti_Tag,0,0,0}
      \actrl = libcall{\AHI_base,#AHI_AllocAudioA}
      \is_fake = 0
      If \actrl
        succ.w = True
        ahilb_getattr{#AHI_INVALID_ID,#AHIDB_MAXPLAYSAMPLES,&\buffer_outsize,0}
        ahilb_getattr{#AHI_INVALID_ID,#AHIDB_MAXRECORDSAMPLES,&\buffer_insize,0}
      Else
        error{"Unable to allocate audio hardware !"}
      End If
    Else
      error{"Unable to open AHI !"}
    End If
End Select
Function Return succ.w
End Function





;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = ahilb_checkdriver {mode.l}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mode.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ahilb_checkdriver{mode.l}
SHARED AHI_unit
succ.w = False
n.l = 0
If mode><#AHI_INVALID_ID
  If mode = #AHI_INVALID_ID Then audioctrl.l = \actrl:Else audioctrl = 0
  \taglist_get[n]\ti_Tag = #AHIDB_MAXPLAYSAMPLES,&mps.l : n+1
  \taglist_get[n]\ti_Tag = #TAG_DONE,0
  libcall_dat_low{mode,0,0,0}
  libcall_adr{0,&\taglist_get[0]\ti_Tag,audioctrl,0,0}
  If libcall{\AHI_base,#AHI_GetAudioAttrsA}
    succ.w = True
  End If
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ahilb_outsize {mode.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mode.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ahilb_outsize{mode.l}
SHARED AHI_unit
If mode=#AHI_INVALID_ID
  Select \mode
    Case #mode_uae
      mps.l = \buffer_outsize
      succ.w = -1
    Case #mode_ahi
      succ.w = ahilb_getattr{mode,#AHIDB_MAXPLAYSAMPLES,&mps.l,0}
  End Select
Else
  succ.w = ahilb_getattr{mode,#AHIDB_MAXPLAYSAMPLES,&mps.l,0}
End If
If succ=False Then error{"ahilb_outsize{}: Something went wrong !"}
Function Return mps
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ahilb_insize {mode.l}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mode.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ahilb_insize{mode.l}
SHARED AHI_unit
If mode=#AHI_INVALID_ID
  Select \mode
    Case #mode_uae
      mrs.l = \buffer_insize
      succ.w = -1
    Case #mode_ahi
      succ.w = ahilb_getattr{mode,#AHIDB_MAXRECORDSAMPLES,&mrs.l,0}
  End Select
Else
  succ.w = ahilb_getattr{mode,#AHIDB_MAXRECORDSAMPLES,&mrs.l,0}
End If
Function Return mrs
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = ahilb_name_driver {mode.l}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mode.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ahilb_name_driver{mode.l}
SHARED AHI_unit
\taglist_get[0]\ti_Tag = #AHIDB_BUFFERLEN,39
name.s = "                                          "
succ.w = ahilb_getattr{mode,#AHIDB_NAME,&name.s,1}
Function Return Peek.s(&name.s)
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = ahilb_name_output {mode.l,output.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mode.l    : ???                                                           /
;/ - output.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ahilb_name_output{mode.l,output.l}
SHARED AHI_unit
\taglist_get[0]\ti_Tag = #AHIDB_BUFFERLEN,39
\taglist_get[1]\ti_Tag = #AHIDB_OUTPUTARG,output
name.s = "                                          "
succ.w = ahilb_getattr{mode,#AHIDB_OUTPUT,&name.s,2}
Function Return Peek.s(&name.s)
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = ahilb_name_input {mode.l,input.l}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mode.l    : ???                                                           /
;/ - input.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ahilb_name_input{mode.l,input.l}
SHARED AHI_unit
\taglist_get[0]\ti_Tag = #AHIDB_BUFFERLEN,39
\taglist_get[1]\ti_Tag = #AHIDB_INPUTARG,input
name.s = "                                          "
succ.w = ahilb_getattr{mode,#AHIDB_INPUT,&name.s,2}
Function Return Peek.s(&name.s)
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ahilb_inputs {mode.l}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mode.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ahilb_inputs{mode.l}
SHARED AHI_unit
succ.w = ahilb_getattr{mode,#AHIDB_INPUTS,&inputs.l,0}
Function Return inputs
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ahilb_outputs {mode.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mode.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ahilb_outputs{mode.l}
SHARED AHI_unit
succ.w = ahilb_getattr{mode,#AHIDB_OUTPUTS,&outputs.l,0}
Function Return outputs
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = ahilb_isduplex {mode.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mode.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ahilb_isduplex{mode.l}
succ.w = ahilb_getattr{mode,#AHIDB_FULLDUPLEX,&duplex.l,0}
If duplex Then succ.w = True:Else succ.w = False
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ahilb_minmixfreq {mode.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mode.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ahilb_minmixfreq{mode.l}
succ.w = ahilb_getattr{mode,#AHIDB_MINMIXFREQ,&srate.l,0}
Function Return srate
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ahilb_maxmixfreq {mode.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mode.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ahilb_maxmixfreq{mode.l}
succ.w = ahilb_getattr{mode,#AHIDB_MAXMIXFREQ,&srate.l,0}
Function Return srate
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ahilb_mix_freq {}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ahilb_mix_freq{}
SHARED AHI_unit
If \is_open
  If \actrl
    succ.w = ahilb_audio_control{#AHIC_MIXFREQ_QUERY,&mixfreq.l}
    If succ = False
      mixfreq = -1
    End If
  Else
     mixfreq = \samplerate
  End If
Else
  mixfreq = \samplerate ; -1
End If
Function Return mixfreq
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_setmonitorvol {vol.q}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - vol.q    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_setmonitorvol{vol.q}
SHARED AHI_unit
If \is_open
  succ.w = ahilb_audio_control{#AHIC_MONITORVOLUME,Peek.l(&vol)}
Else
  error{"Called set_monitorvol while AHI is closed !"}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_setinput {input.l}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - input.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_setinput{input.l}
SHARED AHI_unit
If \is_open
  succ.w = ahilb_audio_control{#AHIC_INPUT,input}
Else
  error{"Called set_input while AHI is closed !"}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_setoutput {output.l}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - output.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_setoutput{output.l}
SHARED AHI_unit
If \is_open
  succ.w = ahilb_audio_control{#AHIC_OUTPUT,output}
Else
  error{"Called set_output while AHI is closed !"}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = ahilb_loadsound {buff.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - buff.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ahilb_loadsound{buff.l}
SHARED AHI_unit,*_audiop
succ.w = False
Select \mode
  Case #mode_uae
    succ=True
  Case #mode_ahi
    libcall_dat_low{buff,#AHIST_DYNAMICSAMPLE,0,0}
    libcall_adr{&*_audiop\out_buffer[buff]\type_,0,\actrl,0,0}
    err.l = libcall{\AHI_base,#AHI_LoadSound}
    Select err
      Case #AHIE_OK
        succ.w = True
      Case #AHIE_NOMEM
        error{"Unable to load sound - not enough memory !"}
      Case #AHIE_BADSOUNDTYPE
        error{"Unable to load sound - bad soundtype !"}
      Case #AHIE_BADSAMPLETYPE
        error{"Unable to load sound - bad sampletype !"}
      Case #AHIE_ABORTED
        error{"Unable to load sound - aborted !"}
      Case #AHIE_UNKNOWN
        error{"Unable to load sound - undefined error !"}
    End Select
End Select
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_setfreq {channel.w,samplerate.l}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - channel.w    : ???                                                        /
;/ - samplerate.l    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_setfreq{channel.w,samplerate.l}
SHARED AHI_unit
If samplerate<4096 Then error{"Samplerate too low !"}:samplerate = 11025
If \actrl
  libcall_dat_low{channel,samplerate,#AHISF_IMM,0}
  libcall_adr{0,0,\actrl,0,0}
  err.l = libcall{\AHI_base,#AHI_SetFreq}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_setvol {channel.w,vol.q,pan.q}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - channel.w    : ???                                                        /
;/ - vol.q    : ???                                                            /
;/ - pan.q    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_setvol{channel.w,vol.q,pan.q}
SHARED AHI_unit
If \actrl
  libcall_dat_low{channel,Peek.l(&vol),Peek.l(&pan),#AHISF_IMM}
  libcall_adr{0,0,\actrl,0,0}
  err.l = libcall{\AHI_base,#AHI_SetVol}
End If
End Statement


NEWTYPE.ASM_wrapper
AHI_base.l
actrl.l
recbase.l
out_buffer_ptr1.l
out_buffer_ptr2.l
out_bsize.l
out_fsize.l
timeindex_audio_ptr.l
timeindex_midi_ptr.l
timeindex_rec_ptr.l
out_dbl_ptr.l
in_peak.l
audio_sync.w
ahidummy.w
ahiexecbase.l
in_seekpeak.l
rec_startticks.l
rec_flength.l
midi_running_ptr.l
mixer_task_ptr.l
mixer_sigflag_ptr.l
ahi_go_ptr.l
in_dbl_ptr.l
in_buffer_ptr1.l
in_buffer_ptr2.l
in_fsize.l
panikcounter.l
in_buffer_winuae.l
in_fsize_winuae.l
in_do_rec_winuae.l
End NEWTYPE

*asmdat.ASM_wrapper = ?AHI_base


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_update_ASM {}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ Variables                                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_update_ASM{}
SHARED AHI_unit,*_audiop,*asmdat,*_audio,*_midi,*_midip,*_amixerp,dummy.l,dummy2.l,*_amixer,*_gen,AHI_winuae

*asmdat\AHI_base          = \AHI_base
*asmdat\actrl             = \actrl
*asmdat\out_buffer_ptr1   = *_audiop\out_buffer[0]\ptr
*asmdat\out_buffer_ptr2   = *_audiop\out_buffer[1]\ptr
*asmdat\out_bsize         = *_audiop\out_buffer[0]\bsize
*asmdat\out_fsize         = *_audiop\out_buffer[0]\fsize

*asmdat\timeindex_audio_ptr   = &*_audio\timeindex_audio
*asmdat\timeindex_midi_ptr    = &*_midi\timeindex_midi
*asmdat\timeindex_rec_ptr    = &*_audio\timeindex_rec

*asmdat\recbase           = *_audiop\recport

*asmdat\out_dbl_ptr       = &*_audiop\out_dbl
*asmdat\mixer_task_ptr    = &*_amixerp\mixer_task
*asmdat\mixer_sigflag_ptr = &*_amixerp\ahi_sigflag
*asmdat\ahi_go_ptr        = &*_amixerp\ahi_go

*asmdat\in_peak           = &*_amixer\visual_inl
*asmdat\in_seekpeak       = &*_amixerp\peak_in

*asmdat\midi_running_ptr  = &*_midip\midi_running

*asmdat\audio_sync        = *_audio\audio_sync
a.s = "exec.library"
*asmdat\ahiexecbase       = OpenLibrary_ (a.s,0)
If *asmdat\ahiexecbase = 0 Then error{"Execbase = 0 !"}


*asmdat\in_dbl_ptr       = &*_audiop\in_dbl
*asmdat\in_buffer_ptr1   = &*_audiop\in_buffer[0]\dirty
*asmdat\in_buffer_ptr2   = &*_audiop\in_buffer[1]\dirty
*asmdat\in_fsize         = *_audiop\in_fsize

*asmdat\panikcounter     = &*_gen\panikcounter

*asmdat\in_buffer_winuae  = AHI_winuae\in_buffer
*asmdat\in_fsize_winuae   = AHI_winuae\in_fsize
*asmdat\in_do_rec_winuae    = AHI_winuae\do_rec

End Statement


;_________________________________________________________________________________________________ ON/OFFLINE
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_stopengine {}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ _________________________________________________________________________:: /
;/ ________________________ ON/OFFLINE                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_stopengine{}
SHARED AHI_unit
If \playing
  If \actrl
    libcall_dat_low{0,#AHI_NOSOUND,0,0}
    libcall_dat_hi {#AHISF_IMM,0,0,0}
    libcall_adr{0,0,\actrl,0,0}
    dummy.l = libcall{\AHI_base,#AHI_SetSound}
  End If
  \playing = False
End If

If \running
  succ.w = ahilb_audio_control{#AHIC_PLAY,False}
  succ.w & ahilb_audio_control{#AHIC_RECORD,False}
End If

\running=False
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_flush {}                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_flush{}
SHARED AHI_unit,*_audiop,*_audio

If \playing
 If \actrl
  libcall_dat_low{0,#AHI_NOSOUND,0,0}
  libcall_dat_hi {#AHISF_IMM,0,0,0}
  libcall_adr{0,0,\actrl,0,0}
  dummy.l = libcall{\AHI_base,#AHI_SetSound}
  succ.w = ahilb_audio_control{#AHIC_PLAY,False}
  asm_zero16s{*_audiop\out_buffer[0]\ptr,*_audiop\out_buffer[0]\fsize}
  asm_zero16s{*_audiop\out_buffer[1]\ptr,*_audiop\out_buffer[1]\fsize}
  succ.w = ahilb_audio_control{#AHIC_PLAY,True}
  libcall_dat_low{0,*_audiop\out_dbl,0,*_audiop\out_buffer[0]\fsize}
  libcall_dat_hi {#AHISF_IMM,0,0,0}
  libcall_adr{0,0,\actrl,0,0}
  \playing = libcall{\AHI_base,#AHI_SetSound}
 End If
 \playing = True
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_start {}                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_start{}
MOVE.l #0,buffersdone
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = ahilb_startengine {rec.w,samplerate.l}                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - rec.w    : ???                                                            /
;/ - samplerate.l    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ahilb_startengine{rec.w,samplerate.l}
SHARED AHI_unit,*_audiop,*_audio
If \running Then ahilb_stopengine{}
succ.w=ahilb_audio_control{#AHIC_PLAY,True} : recsucc.w = False
If rec
  recsucc.w = ahilb_audio_control{#AHIC_RECORD,True}
  succ = succ & recsucc
  *_audiop\in_dbl   = 0
End If

If succ
  \running = True
  *_audiop\out_dbl = 0
  ahilb_update_ASM{}
  ahilb_setfreq{0,samplerate}
  *_audio\samplerate = samplerate
  ahilb_setvol{0,1,.5}
  If \actrl
    libcall_dat_low{0,*_audiop\out_dbl,0,*_audiop\out_buffer[0]\fsize}
    libcall_dat_hi {#AHISF_IMM,0,0,0}
    libcall_adr{0,0,\actrl,0,0}
    \playing = libcall{\AHI_base,#AHI_SetSound}
  End If
  \playing = True
  \rescue_rec = rec
  \rescue_samplerate = *_audio\samplerate
Else
  ahilb_stopengine{}
  If recsucc = False AND rec=True
    error{"Unable to start recording !"}
  Else
    error{"Unable to start playback ! (maybe AHI is in use?)"}
  End If
End If

If \playing Then succ.w = True:Else succ=False;:error{"Sample is not playing !"}

Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ahilb_startgrab {samplerate.l}                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - samplerate.l    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ahilb_startgrab{samplerate.l}
SHARED AHI_unit,*_audiop,*_audio
If \is_open
  If \grab_out=False
    If \running Then ahilb_stopengine{}
  End If
  \running = True
  *_audiop\out_dbl = 0
  ahilb_update_ASM{}
  ahilb_setfreq{0,samplerate}
  *_audio\samplerate = samplerate
  \playing = True
  \grab_out= True
  succ.l = True
Else
  succ.l = False
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ahilb_grab {}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ahilb_grab{}
SHARED AHI_unit,*_audiop,*_audio
succ.l = False
If \grab_out
  Forbid_

  JSR soundfunc_fake
  TST.l d0
  BNE grab_wait

  MOVE.l out_dbl_ptr,a0
  TST.l (a0)
  BNE grab_1

  grab_0:
  ;JSR playerfunc
  MOVE.l out_buffer_ptr2,d0
  succ=PutRegD0
  BRA grab_exit

  grab_1:
  ;JSR playerfunc
  MOVE.l out_buffer_ptr1,d0
  succ=PutRegD0
  BRA grab_exit

  grab_wait:
  succ=False
  grab_exit:
  Permit_
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_stopgrab {}                                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_stopgrab{}
SHARED AHI_unit,*_audiop,*_audio
If \grab_out
  \running = False
  \playing = False
  \grab_out= False
  succ.l = ahilb_startengine{\rescue_rec,\rescue_samplerate}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_reset_recstart {}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_reset_recstart{}
SHARED *asmdat
*asmdat\rec_startticks = $7FFFFFFF
*asmdat\rec_flength    = $00000000
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ahilb_get_recstart {}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ahilb_get_recstart{}
SHARED *asmdat
Function Return *asmdat\rec_startticks
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ahilb_get_recflength {}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ahilb_get_recflength{}
SHARED *asmdat
Function Return *asmdat\rec_flength
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_close {}                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_close{}
SHARED AHI_unit,*_audiop
ahilb_stopengine{}
If \actrl Then ahilb_audio_free{}
For n.l = 0 To 1
  If *_audiop\out_buffer[n]\ptr
    FreeMem_ *_audiop\out_buffer[n]\ptr,*_audiop\out_buffer[n]\bsize
    *_audiop\out_buffer[n]\ptr = 0
  End If
Next
\is_open = False
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_free {}                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ahilb_free{}
SHARED AHI_unit,*asmdat
ahilb_close{}
If \modereq   Then ahilb_request_free{}
If \AHI_base  Then CloseDevice_ \iorequest     : \AHI_base  = False
If \iorequest Then DeleteIORequest_ \iorequest : \iorequest = False
If \msgport   Then DeleteMsgPort_ \msgport     : \msgport   = False
;If *asmdat\ahiexecbase Then CloseLibrary_ *asmdat\execbase:*asmdat\execbase = False
\is_init = False
End Statement
!autoexit{ahilb_free}


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = ahilb_init {}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ahilb_init{}
SHARED AHI_unit
If \is_init Then ahilb_free{}
\msgport  = CreateMsgPort_()
If \msgport
  \iorequest = CreateIORequest_(\msgport,SizeOf.AHIIORequest)
  If \iorequest
    *AHIIO.AHIIORequest = \iorequest
    *AHIIO\version = 4
    a.s = "ahi.device"
    If OpenDevice_ (&a.s,#AHI_NO_UNIT,\iorequest,0) = 0
      \AHI_base = *AHIIO\StdIO\io_Device
      If \AHI_base = False Then error{"AHI base is zero !"}
      \is_init = ahilb_request_alloc{10,10,300,250}
      \samplerate = -1
      \modeid     = -1
    Else
      error{"Unable to open ahi.device !"}
    End If
  Else
    error{"Unable to create AHI_IORequest !"}
  End If
Else
  error{"Unable to create MsgPort !"}
End If
If \is_init = False Then ahilb_free{}
Function Return \is_init
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = ahilb_open {modeid.l,buffersize.l,sampleformat.l,samp:: /
;/ lerate.l,latency.l,@mode.l}                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ succ.w =  ahilb_open {}                                                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - modeid.l    : ???                                                         /
;/ - buffersize.l    : ???                                                     /
;/ - sampleformat.l    : ???                                                   /
;/ - samplerate.l    : ???                                                     /
;/ - latency.l    : ???                                                        /
;/ - mode.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w ahilb_open{modeid.l,buffersize.l,sampleformat.l,samplerate.l,latency.l,@mode.l}
SHARED AHI_unit,*_audiop,*_audio
If \is_open Then error{"ahilb_open{}: AHI was still open !"}:ahilb_close{}

If \is_init
   \mode = mode

  If modeid=#AHI_INVALID_ID AND mode=#mode_ahi
    If ahilb_request{}
      \samplerate = \req_mixfreq
      \modeid     = \req_modeid
    End If
  Else
    \samplerate = samplerate
    \modeid     = modeid
  End If

  If \modeid = #AHI_DEFAULT_ID Then \samplerate = #AHI_DEFAULT_FREQ


  If ahilb_audio_alloc{latency}
    Select sampleformat
      Case #AHIST_M8S
        \framesize = 1 : \channels = 1 : \bits =  8
      Case #AHIST_M16S
        \framesize = 2 : \channels = 1 : \bits = 16
      Case #AHIST_S8S
        \framesize = 2 : \channels = 2 : \bits =  8
      Case #AHIST_S16S
        \framesize = 4 : \channels = 2 : \bits = 16
      Case #AHIST_M32S
        \framesize = 4 : \channels = 1 : \bits = 32
      Case #AHIST_S32S
        \framesize = 8 : \channels = 2 : \bits = 32
      Case #AHIST_M8U
        \framesize = 1 : \channels = 1 : \bits =  8
      Default
        \framesize = 1 : \channels = 1 : \bits =  8
        error{"Unknown sampleformat - continue can be dangerous !"}
    End Select

 ;   \samplerate = ahilb_mix_freq{}
 ;   \bufferunit = \samplerate / 1000
 ;   minbuffersize.l = ahilb_outsize{\modeid}
 ;   minbuffersize2.l = \bufferunit * latency
 ;   If buffersize/\framesize<minbuffersize2 Then buffersize = \framesize * minbuffersize2
 ;   If buffersize/\framesize<minbuffersize  Then buffersize = \framesize * minbuffersize

  ;  buffersize = Peek.l($34+\actrl) * 4
    buffersize   = ahilb_outsize{#AHI_INVALID_ID} * \framesize
    ;recordsize.l = ahilb_insize{#AHI_INVALID_ID}

    For n.l = 0 To 1
      *_audiop\out_buffer[n]\ptr = AllocMem_ (buffersize,#MEMF_PUBLIC|#MEMF_CLEAR)
      If *_audiop\out_buffer[n]\ptr
        *_audiop\out_buffer[n]\bsize = buffersize
        *_audiop\out_buffer[n]\type_ = sampleformat
        *_audiop\out_buffer[n]\fsize = buffersize / \framesize
        succ.w = ahilb_loadsound{n}
        If succ = False Then n=1:error{"Unable to do init playbackbuffer !"}
      Else
        error{"Not enough memory for AHI buffers (playback)!"}
        n=1:succ.w = False
      End If
    Next

    If succ
      \is_open = True
      \samplerate = ahilb_mix_freq{}
      *_audio\samplerate = \samplerate
      ;*_audio\out_size  = *_audiop\out_buffer[0]\bsize
      *_audio\out_fsize = *_audiop\out_buffer[0]\fsize
      *_audiop\in_fsize = ahilb_insize{#AHI_INVALID_ID}
      ;error{"Insize: "+Str$(*_audiop\in_fsize)}
      If \samplerate<4096
        \is_open = False
        error{"Samplerate is too low ! ("+Str$(\samplerate)+")"}
      Else
        ahilb_update_ASM{}
      End If
    Else
      error{"Unable to allocate buffers !"}
    End If
  End If
Else
  error{"INTERNAL: Tried to open AHI when not inited !"}
End If
If \is_open = False Then ahilb_close{}
Function Return \is_open
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ahilb_bytes2samps {bytes.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - bytes.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ahilb_bytes2samps{bytes.l}
SHARED AHI_unit
If \is_open
  samps.l = bytes/\framesize
Else
  error{"ahi.device is not open ! (ahilb_bytes2samps{})"}
End If
Function Return samps
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ahilb_sampleform {channels.w,bits.w,signed.w}           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - channels.w    : ???                                                       /
;/ - bits.w    : ???                                                           /
;/ - signed.w    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ahilb_sampleform{channels.w,bits.w,signed.w}
AHI_form.l = #AHIST_NOTYPE
If signed
  If channels=1
    If bits =  8 Then AHI_form=#AHIST_M8S
    If bits = 16 Then AHI_form=#AHIST_M16S
  End If
  If channels=2
    If bits =  8 Then AHI_form=#AHIST_S8S
    If bits = 16 Then AHI_form=#AHIST_S16S
  End If
Else
  If channels=1
    If bits = 8 Then AHI_form=#AHIST_M8U
  End If
End If
Function Return AHI_form
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l =  ahilb_timeindex {}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST ahilb_timeindex{}
SHARED AHI_unit,*_audio
If \is_open
  ;Forbid_
    timeindex.l = *_audio\timeindex_audio
  ;Permit_
End If
Function Return timeindex
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ahilb_settimeindex {timeindex.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - timeindex.l    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST ahilb_settimeindex{timeindex.l}
SHARED AHI_unit,*_audio
If \is_open
  GetRegD0 timeindex
  ;Forbid_
    MOVE.l d0,playstart
    *_audio\timeindex_audio = timeindex
  ;Permit_
End If
End Statement



JMP ahi_skipasm

Even
.soundfunc_fake
MOVEM.l a0-a6/d2-d4,-(a7)

MOVE.l ahi_go_ptr,a0
TST.l (a0)
BNE soundfunc_fakewait

JSR playerfunc  ; NEU!
MOVE.l midi_running_ptr,a0
MOVE.l #0,(a0) ; timer_sleep

MOVE.l out_dbl_ptr,a0
TST.l (a0)
BNE soundfunc_fake1

soundfunc_fake0:
MOVE.l out_dbl_ptr,a0
MOVE.l #1,(a0)
MOVE.l out_buffer_ptr1,a0



BRA soundfunc_getdata


soundfunc_fake1:
MOVE.l out_dbl_ptr,a0
MOVE.l #0,(a0)
MOVE.l out_buffer_ptr2,a0
BRA soundfunc_getdata



soundfunc_fakewait:
MOVEM.l (a7)+,a0-a6/d2-d4
MOVE.l #-1,d0
RTS

soundfunc_getdata_fake:
; signal   to HD-Rec main task
MOVEM.l a0-a6/d2-d4,-(a7)
MOVE.l sig_strobe@(a5),d0
MOVE.l owntask@(a5),a1
MOVE.l ahiexecbase,a6
JSR -324(a6)          ; signal
MOVEM.l (a7)+,a0-a6/d2-d4
BRA soundfunc_getdata

Even
.soundfunc
MOVEM.l a0-a6/d2-d4,-(a7)

MOVE.l out_dbl_ptr,a0
TST.l (a0)
BNE soundfunc_1

soundfunc_0:
MOVE.l #0,d0          ; channel.w
MOVE.l #1,d1          ; sound.w
MOVE.l #0,d2          ; offset.l
MOVE.l out_fsize,d3   ; flength.l
MOVE.l #0,d4          ; imm flag
MOVE.l actrl,a2       ; ACTRL
MOVE.l AHI_base,a6
JSR -78(a6)           ; SETSOUND
MOVE.l out_dbl_ptr,a0
MOVE.l #1,(a0)
MOVE.l out_buffer_ptr1,a0
BRA soundfunc_getdata


soundfunc_1:
MOVE.l #0,d0          ; channel.w
MOVE.l #0,d1          ; sound.w
MOVE.l #0,d2          ; offset.l
MOVE.l out_fsize,d3   ; flength.l
MOVE.l #0,d4          ; imm flag
MOVE.l actrl,a2       ; ACTRL
MOVE.l AHI_base,a6
JSR -78(a6)
MOVE.l out_dbl_ptr,a0
MOVE.l #0,(a0)
MOVE.l out_buffer_ptr2,a0


soundfunc_getdata:


MOVE.l mixer_sigflag_ptr,a1
MOVE.l (a1),d0      ; flag
MOVE.l mixer_task_ptr,a1
MOVE.l (a1),d1       ; task
MOVE.l d1,a1
TST.l d1
BEQ skipmixer
TST.l d0
BEQ skipmixer
MOVE.l ahiexecbase,a6
JSR -324(a6)          ; signal
skipmixer:
MOVE.l ahi_go_ptr,a0
TST.l (a0)
BNE nogo
MOVE.l #0,panik_done

MOVE.l panikcounter,a1
TST.l (a1)
BLE skip_panik
SUB.l #1,(a1)

skip_panik:

ADD.l #1,buffersdone
MOVE.l #-1,(a0)

nogo_back:

MOVEM.l (a7)+,a0-a6/d2-d4
MOVE.l #0,d0
RTS

nogo:
MOVE.l out_dbl_ptr,a0
TST.l (a0)
BEQ nogo_buff1
MOVE.l out_buffer_ptr1,a1
BRA nogo_buff0
nogo_buff1:
MOVE.l out_buffer_ptr2,a1
nogo_buff0:
MOVE.l out_fsize,d0

nogo_zero:
MOVE.l #0,(a1)+
SUB.l #1,d0
BGT nogo_zero
TST.l panik_done
BNE nogo_back
MOVE.l panikcounter,a1
ADD.l #10,(a1)
MOVE.l #-1,panik_done
BRA nogo_back

panik_done:
Dc.l 0

Even
.recfunc

MOVEM.l a0-a6/d2-d7,-(a7)
;BRA recfunc_exit  ; DEBUG


MOVE.l (a1),d1 ; Sampletype
CMP.w #3,d1  ; only S16S is supported yet
BNE recfunc_exit


; copy the incoming record buffer to the mixer input channel
MOVE.l in_dbl_ptr,a0   ; get dest in_ptr
TST.l (a0)
BNE in_dbl1
MOVE.l #1,(a0)
MOVE.l in_buffer_ptr1,a0
BRA in_dbl0
in_dbl1:
MOVE.l #0,(a0)
MOVE.l in_buffer_ptr2,a0
in_dbl0:

;CMPA.l #0,a0   ; kein buffer !
;BEQ skiprec

TST.l (a0) ; dirty ?
BNE skiprec

TST.l 4(a0)      ; buffer ptr ?
BEQ skiprec

MOVE.l 4(a0),a2  ; destptr

MOVE.l in_fsize,d1   ; flength
BEQ skiprec
MOVE.l 8(a1),d0 ; flength =? in_fsize

CMP.l d0,d1
BGE recfunc_insizeok
MOVE.l d1,d0

recfunc_insizeok:

MOVE.l 4(a1),a3 ; sourceptr

rec_copyloop:
MOVE.l (a3)+,(a2)+
SUB.l #1,d0
BGT rec_copyloop


MOVE.l #-1,(a0) ;  dirty = true
MOVE.l #0,8(a0) ;  offset = 0

skiprec:

; get the peak value for graphical display
MOVE.l 4(a1),a0 ; ptr
MOVE.l 8(a1),d0 ; flength
MOVE.l 8(a1),debug_data

MOVE.l in_seekpeak,a2
TST.l (a2)
BEQ recfunc_s16snolevel
MOVE.l in_peak,a2
CLR.l d1 : CLR.l d2

recfunc_s16sloop:
CMP.w (a0)+,d1
BGE recfunc_s16snopeakl
MOVE.w -2(a0),d1
recfunc_s16snopeakl:
CMP.w (a0)+,d2
BGE recfunc_s16snopeakr
MOVE.w -2(a0),d2
recfunc_s16snopeakr:
SUB.l #1,d0
BGT recfunc_s16sloop

MOVE.l d1, (a2)
MOVE.l d2,4(a2)


; copy the data to the wavesample segment, if any record wavesample!
recfunc_s16snolevel:
MOVE.l 4(a1),a0    ; ptr
MOVE.l 8(a1),d3    ; flength

MOVE.l recbase,a1

recfunc_test:
TST.w (a1)         ; typ
BEQ recfunc_exit   ; kein port !



recfunc_s16sfill:
MOVE.l 4(a1),a2    ; buffer present ?
TST.l 4(a1)
BEQ recfunc_exit

; hier wird miditimer copiert
MOVE.l timeindex_midi_ptr,a3
MOVE.l (a3),d0
CMP.l rec_startticks,d0
BGE recfunc_nonewstart
MOVE.l d0,rec_startticks
recfunc_nonewstart:
ADD.l d3,rec_flength


MOVE.l d3,d0
TST.w 6(a2)
BNE recfunc_mono
LSL.l #1,d0       ; flength * 2
recfunc_mono
LSL.l #1,d0


MOVE.l 20(a2),d1   ; buffer noch todo ?
BLE recfunc_s16snextbuffer


CMP.l d0,d1
BLE recfunc_s16sclip ; recbuffer>todo ?
MOVE.l d0,d1
recfunc_s16sclip:


MOVE.l 8(a2),a3    ; dest ptr
ADD.l 16(a2),a3    ; offset dazu ...
ADD.l d1,16(a2)    ; boffset erhoehen
SUB.l d1,20(a2)    ; btodo   erniedrigen


TST.w 6(a2)
BNE recfunc_mono2
LSR.l #1,d1       ; flength * 2
recfunc_mono2
LSR.l #1,d1

SUB.l d1,d3        ;was wir schreiben werden vom recbuf abziehen


MOVE.w 6(a2),d0

CMP.w #0,d0
BEQ recfunc_copy_stereo

CMP.w #1,d0
BEQ recfunc_copy_mono_l

CMP.w #2,d0
BEQ recfunc_copy_mono_r

CMP.w #3,d0
BEQ recfunc_copy_mono_mix
BRA recfunc_copy_end


recfunc_copy_stereo:
MOVE.l (a0)+,(a3)+
SUB.l #1,d1
BGT recfunc_copy_stereo
BRA recfunc_copy_end


recfunc_copy_mono_l:
MOVE.w (a0)+,(a3)+  : ADD.l #2,a0
SUB.l #1,d1
BGT recfunc_copy_mono_l
BRA recfunc_copy_end

recfunc_copy_mono_r:
ADD.l #2,a0 : MOVE.w (a0)+,(a3)+
SUB.l #1,d1
BGT recfunc_copy_mono_r
BRA recfunc_copy_end

recfunc_copy_mono_mix:
MOVE.w (a0)+,d2 : EXT.l d2
MOVE.w (a0)+,d0 : EXT.l d0
ADD.l d0,d2 : ASR.l #1,d2
MOVE.w d2,(a3)+
SUB.l #1,d1
BGT recfunc_copy_mono_mix
BRA recfunc_copy_end


recfunc_copy_end

TST.l d3
BGT recfunc_s16sfill

recfunc_exit:
MOVE.l #0,d0
MOVEM.l (a7)+,a0-a6/d2-d7
RTS

recfunc_s16snextbuffer:
MOVE.l (a2),4(a1)  ; nextbuffer = nextbuffer
MOVE.w #0,4(a2)    ; status = 0
MOVE.l 24(a2),a3  ; protected = False
MOVE.b #0,(a3)

TST.l 4(a1)        ; letzter Buffer ?
BNE recfunc_s16sfill

recfunc_s16soutofbuffer
MOVE.l 20(a1),a2   ;
MOVE.l a1,(a2)
ADD.l #4,(a2)
BRA recfunc_exit

Even
.playerfunc
MOVEM.l a0-a6/d2-d7,-(a7)
TST.w audio_sync
BEQ playerfunc_skipsync



MOVE.l timeindex_midi_ptr,a2
MOVE.l timeindex_audio_ptr, a1

; _____________________________________________________________ FPU
;Dc.l $F227BC00 ; =fmovem.l fpcr/fpsr/fpiar,-(a7)
;Dc.l $F227E003 ; =fmovem.x fp0-fp1,-(a7)

;fmove.l 0(a1),fp0            ; fp0 = timeinedx_audio.l
;fdiv.s #60,fp0               ; fp0 / 5
;fmul.l 4(a2),fp0             ; fp0 * tpm.l
;fdiv.l 4(a1),fp0             ; fp0 / samplerate.l
;fmove.l fp0,d0               ; d0 = fp0

;Dc.l $F21FD0C0 ; =fmovem.x (a7)+,fp0-fp1
;Dc.l $F21F9C00 ; =fmovem.l (a7)+,FPcr/fpsr/fpiar
;__________________________________________________________________


; _____________________________________________________________ CPU

MOVE.l (a1),d0
MOVE.l out_fsize,d2
SUB.l d2,d0

MOVE.l playstart,d1
CMP.l d1,d0 : BGE playerfunc_indexnozero
MOVE.l playstart,d0
BRA playerfunc_indexzero

playerfunc_indexnozero:
MOVE.l midi_running_ptr,a0
MOVE.l #-1,(a0) ; timer_go

playerfunc_indexzero

MOVE.l 4(a2),d1
MOVE.l 4(a1),d2







MOVE.l d0,d3
DIVU.l d2,d3  ; q = x / b    d3=q
MOVE.l d3,d4
MULU.l d2,d4
SUB.l d4,d0   ; r = x-q*b    d0=r

MOVE.l d3,d5
MULU.l d1,d5  ; a*q  d5=a*q

MOVE.l d1,d6
MULU.l d0,d6  ; r*a  d6=r*a

DIVU.l d2,d6

ADD.l d6,d5
MOVE.l #60,d3
DIVU.l d3,d5

MOVE.l d5,d0  ; Return d5



;_________________________________________________________________

MOVE.l (a2),d1
SUB.l d1,d0

BGT playerfunc_subindex
;ADD.l #1,d0
;ASR.l #1,d0
ADD.l d0,(a2)
BRA playerfunc_noindex

playerfunc_subindex:
ASR.l #1,d0
ADD.l d0,(a2)
playerfunc_noindex:


playerfunc_skipsync:


TST.l buffersdone
BLE playerfunc_skipinc

SUB.l #1,buffersdone

MOVE.l timeindex_audio_ptr, a2  ; timeindex + buffersize
MOVE.l out_fsize,d0
ADD.l d0,(a2)


playerfunc_skipinc
MOVEM.l (a7)+,a0-a6/d2-d7
RTS




;_______________________________________________________________ WinUAE support
.uae_soundfunc
RunErrsOff
!basica7
     MOVEQ #4,d0
     JSR $f0ffc0              ;check if our interrupt
     TST.l d0
     BGT uae_int
!asma7
     MOVEQ #0,d0
     RTS


uae_int:
Call ?playerfunc
MOVE.l #uae_retaddr,-(a7)       ; fake the register saving and return address
MOVEM.l a0-a6/d2-d4,-(a7)
JMP soundfunc_getdata       ; jump into the real soundfunc and skip the AHI_SETSOUND part


uae_retaddr:
MOVE.l out_buffer_ptr1,a0:MOVEQ #2,d0:JSR $f0ffc0 ;write to soundcard



TST.l in_do_rec_winuae
BEQ uae_skiprec

uae_recloop:
   MOVE.l in_buffer_winuae,a0
   MOVE.l in_fsize_winuae,d0

   TST.l in_buffer_winuae
   BEQ uae_skiprec

   MOVEQ #3,d0:JSR $f0ffc0  ;read a block
   rest.l=PutRegD0              ;number of remaining blocks -1=none

   recstruct.l = ?uae_recstruct
   MOVE.l recstruct@(a5),a1
   MOVE.l #3,uae_sampletype
   MOVE.l in_buffer_winuae,uae_recaddr
   MOVE.l in_fsize_winuae,uae_recsize

   Call ?recfunc
   If rest > 1 Goto uae_recloop      ;this sync to output but dont work on some cards

uae_skiprec:
   !asma7
MOVEQ #0,d0
RTS


LastRunErrsMode
Even

uae_recstruct:
uae_sampletype: Dc.l 3
uae_recaddr:    Dc.l 0
uae_recsize:    Dc.l 0


uae_lev7_Int: Dc.l 0

uae_intstruct: Dc.l 0,0
          Dc.b 2,0
          Dc.l 0,0,uae_soundfunc,0





Even
;sft: Dc.l 0
;ply: Dc.l 0
;rec: Dc.l 0
playstart:           Dc.l 0
buffersdone:         Dc.l 0


AHI_base:            Dc.l 0
actrl:               Dc.l 0
recbase:             Dc.l 0
out_buffer_ptr1:     Dc.l 0
out_buffer_ptr2:     Dc.l 0
out_bsize:           Dc.l 0
out_fsize:           Dc.l 0
timeindex_audio_ptr: Dc.l 0
timeindex_midi_ptr:  Dc.l 0
timeindex_rec_ptr:   Dc.l 0
out_dbl_ptr:         Dc.l 0
in_peak:             Dc.l 0
audio_sync:          Dc.w 0
ahixdummy:           Dc.w 0
ahiexecbase:         Dc.l 0
in_seekpeak:         Dc.l 0
rec_startticks:      Dc.l 0
rec_flength:         Dc.l 0
midi_running_ptr:    Dc.l 0
mixer_task_ptr:      Dc.l 0
mixer_sigflag_ptr:   Dc.l 0
ahi_go_ptr:          Dc.l 0
in_dbl_ptr:          Dc.l 0
in_buffer_ptr1:      Dc.l 0
in_buffer_ptr2:      Dc.l 0
in_fsize:            Dc.l 0
panikcounter:        Dc.l 0
in_buffer_winuae:    Dc.l 0
in_fsize_winuae:     Dc.l 0
in_do_rec_winuae:    Dc.l 0
debug_data:          Dc.l 0
ahi_skipasm:

CEND
