; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "ASMAudioDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 14
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 1
; Max GadgetList  = 1
; Max Queue       = 1
; Max Screen      = 2
; Max Shape       = 1
; Max CopList     = 1
; Max Sprite      = 1
; Max Stencil     = 1
; Max Module      = 1
; Max Window      = 30
; Max Anim        = 1
; Max Sound       = 1
; Max Bank        = 1
; Max Buffer      = 1
; Max BitMap      = 1
; Max Slice       = 1
; Max Page        = 1
; Max Tape        = 1
; Max IntuiFont   = 12
; Max MedModule   = 1
; Max Palette     = 1
; Max MenuList    = 1
; Max BlitzFont   = 1
; Max GTList      = 30
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name:  asm_audio.include                                                    /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 11.03.2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements: Amiblitz2.4                                                   /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Collection of 68K ASM routines for audio processing. Used in HD-Rec.        /
;/                                                                             /
;/ Abstract:                                                                   /
;/                                                                             /
;/ User Constants:    none                                                     /
;/                                                                             /
;/ Example:                                                 none               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
SYNTAX 2
OPTIMIZE 7
XINCLUDE "error.include.ab3"
error {"This include has no internal demo!"}
End
CELSE

RunErrsOff

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_merge {sourceaddr.l,destaddr.l,flength.l}                       /
;/                                                                             /
;/ Description:                                                                /
;/ Merge two audiostreams, both have to be 16bit stereo bigendian signed       /
;/ Uses clipping to avoid crackling if peak is to high.                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : length in sampleframes = bytelength / 4, must be > 0       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_merge {sourceaddr.l,destaddr.l,flength.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a2

asm_mergeloop:
MOVE.l (a0)+,d0
ADD.w d0,(a2)+
BVC asm_noclipleft
BLT asm_wasnegl
MOVE.w #32767,-2(a2)
BRA asm_noclipleft
asm_wasnegl:
MOVE.w #-32768,-2(a2)
asm_noclipleft:
SWAP d0
ADD.w d0,(a2)+
BVC asm_noclipright
BLT asm_wasnegr
MOVE.w #32767,-2(a2)
BRA asm_noclipright
asm_wasnegr:
MOVE.w #-32768,-2(a2)
asm_noclipright:
SUB.l #1,d2
BGT asm_mergeloop
RTS
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_merge_m {sourceaddr.l,destaddr.l,flength.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ Merge two audiostreams, both have to be 16bit mono bigendian signed         /
;/ Uses clipping to avoid crackling if peak is to high.                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : length in sampleframes = bytelength / 2, must be > 0       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_merge_m {sourceaddr.l,destaddr.l,flength.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a2

asm_mergeloop_m:
MOVE.w (a0)+,d0
ADD.w d0,(a2)+
BVC asm_noclipm
BLT asm_wasnegm
MOVE.w #32767,-2(a2)
BRA asm_noclipm
asm_wasnegm:
MOVE.w #-32768,-2(a2)
asm_noclipm:
SUB.l #1,d2
BGT asm_mergeloop_m
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_merge32 {sourceaddr.l,destaddr.l,flength.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ Merge two audiostreams, both have to be 32bit stereo bigendian signed       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    :  length in sampleframes = bytelength / 8, must be > 0      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_merge32 {sourceaddr.l,destaddr.l,flength.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a2

asm_mergeloop32:
MOVE.l (a0)+,d0
ADD.l d0,(a2)+
MOVE.l (a0)+,d0
ADD.l d0,(a2)+
SUB.l #1,d2
BGT asm_mergeloop32
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_merge32_LSR {sourceaddr.l,destaddr.l,flength.l,LSR_val.l}       /
;/                                                                             /
;/ Description:                                                                /
;/ ???                                                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - LSR_val.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_merge32_LSR {sourceaddr.l,destaddr.l,flength.l,LSR_val.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a2

asm_mergeloop32_LSR:
MOVE.l (a0)+,d0
ASR.l d3,d0
ADD.l d0,(a2)+
MOVE.l (a0)+,d0
ASR.l d3,d0
ADD.l d0,(a2)+
SUB.l #1,d2
BGT asm_mergeloop32_LSR
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_zerox {destaddr.l,blength.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Fills destaddr with zeros, blength is in bytes! It is optimized for speed:: /
;/  so there is no need for a 16bit stereo only version.                       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - blength.l    : ???                                                        /
;/                                                                             /
;/ Bugs:                                                                       /
;/ This function might be buggy. This is why it has the "x" at the end. Bett:: /
;/ er use asm_zero.                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_zerox {destaddr.l,blength.l}  ; BUGIE !
UNLK a4
TST.l d1
BLE asm_skipbz
MOVE.l d0,a0
MOVE.l d1,d2
LSR.l #3,d2
BEQ asm_skipuz

asm_zerouloop:
MOVE.l #0,(a0)+
MOVE.l #0,(a0)+
SUB.l #1,d2
BGT asm_zerouloop
asm_skipuz:
AND.l #%00000000000000000000000000000111,d1
BEQ asm_skipbz

asm_zerobloop:
MOVE.b #0,(a0)+
SUB.l #1,d1
BGT asm_zerobloop
asm_skipbz:
RTS
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_zero16s {destaddr.l,flength.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Zero (make absolute silence) the given memory area.                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : length in sample frames (=byte length/4)                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_zero16s {destaddr.l,flength.l}
UNLK a4
MOVE.l d0,a0
asm_zero16sloop:
MOVE.l #0,(a0)+
SUB.l #1,d1
BGT asm_zero16sloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_zero16m {destaddr.l,flength.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Zero (make absolute silence) the given memory area.                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : length in sample frames (=byte length/2)                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_zero16m {destaddr.l,flength.l}
UNLK a4
MOVE.l d0,a0
asm_zero16mloop:
MOVE.w #0,(a0)+
SUB.l #1,d1
BGT asm_zero16mloop
RTS
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_zero {destaddr.l,blength.l}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Zero (make absolute silence) the given memory area.                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - blength.l    : byte length                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_zero {destaddr.l,blength.l}
UNLK a4
MOVE.l d0,a0
asm_zerobyteloop:
MOVE.b #0,(a0)+
SUB.l #1,d1
BGT asm_zerobyteloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_swap {sourceaddr.l,destaddr.l,flength.l}                        /
;/                                                                             /
;/ Description:                                                                /
;/ Swap left and right channel in 16bit stereo data.                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : length in sample frames (=byte length/4)                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_swap {sourceaddr.l,destaddr.l,flength.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
asm_swaploop:
MOVE.l (a0)+,d0 : SWAP d0 : MOVE.l d0,(a1)+
SUB.l #1,d2
BGT asm_swaploop
RTS
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_l2r {sourceaddr.l,destaddr.l,flength.l}                         /
;/                                                                             /
;/ Description:                                                                /
;/ Copy the left channel to the right channel. It works on 16bit stereo data.  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : length in sampleframes (=byte length / 4)                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_l2r {sourceaddr.l,destaddr.l,flength.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
asm_l2rloop:
MOVE.w (a0),(a1)+
MOVE.w (a0),(a1)+
ADD.l #4,a0
SUB.l #1,d2
BGT asm_l2rloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_r2l {sourceaddr.l,destaddr.l,flength.l}                         /
;/                                                                             /
;/ Description:                                                                /
;/ Copy the right channel to the left channel on 16bit stereo data.            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : length in sample frames (=byte length/4)                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_r2l {sourceaddr.l,destaddr.l,flength.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
asm_r2lloop:
ADD.l #2,a0
MOVE.w (a0),(a1)+
MOVE.w (a0)+,(a1)+
SUB.l #1,d2
BGT asm_r2lloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_gain {sourceaddr.l,destaddr.l,wlength.l,gain.l}                 /
;/                                                                             /
;/ Description:                                                                /
;/ Change the volume gain.                                                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : source address                                          /
;/ - destaddr.l    : destination address                                       /
;/ - wlength.l    : size in words (16bit)                                      /
;/ - gain.l    : 0=mute, 256=same gain, 512=double volume                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_gain {sourceaddr.l,destaddr.l,wlength.l,gain.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
asm_gainloop:
MOVE.w (a0)+,d0
MULS d3,d0
ASR.l #8,d0
MOVE.w d0,(a1)+
SUB.l #1,d2
BGT asm_gainloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_gain_clip {sourceaddr.l,destaddr.l,wlength.l,gain.l}            /
;/                                                                             /
;/ Description:                                                                /
;/ Change the volume gain and clip if the value exceed the 16bit range.        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - wlength.l    : ???                                                        /
;/ - gain.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_gain_clip {sourceaddr.l,destaddr.l,wlength.l,gain.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
asm_gaincloop:
MOVE.w (a0)+,d0
MULS d3,d0
ASR.l #8,d0

CMP.l #32767,d0
BLE asm_gainc_nopos
MOVE.w #32767,(a1)+  : BRA asm_gainc_next

asm_gainc_nopos:
CMP.l #-32768,d0
BGE asm_gainc_noneg
MOVE.w #-32768,(a1)+ : BRA asm_gainc_next

asm_gainc_noneg:
MOVE.w d0,(a1)+

asm_gainc_next:
SUB.l #1,d2
BGT asm_gaincloop
RTS
End Statement


NEWTYPE.asm_fadeparams
int_start.l     ; fading start position in sampleframe, set by the user
int_end.l       ; fading end position in sampleframe, set by the user
int_current.l   ; * private *
int_onestep.l   ; * private *
int_stepsize.l  ; * private *
float_ratio.f   ; ??? set by user
method.l        ; ???
stepsave.l      ; * private *
End NEWTYPE


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_ffade_clip16sx {sourceaddr.l,destaddr.l,flength.l,*params.asm:: /
;/ _fadeparams}                                                                /
;/                                                                             /
;/ Description:                                                                /
;/ Do a volume fade on 16bit signed stereo wavesample. Values that exceed 16:: /
;/ bit range will be clipped.                                                  /
;/ The calculations are dont using floats for highest accuracy.                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - *params.asm_fadeparams    : ???                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement asm_ffade_clip16sx {sourceaddr.l,destaddr.l,flength.l,*params.asm_fadeparams}
gain.f = *params\int_current / 32768
r.f    = *params\float_ratio
For offset.l = 0 To flength-1
  left.f  = Peek.w(sourceaddr + offset*4)
  right.f = Peek.w(sourceaddr + offset*4 + 2)
  left * gain
  right * gain
  Poke.w destaddr + offset * 4,left
  Poke.w destaddr + offset * 4+ 2,right
  gain * r
Next
gain * 32768
*params\int_current = gain
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_ffade_clip16mx {sourceaddr.l,destaddr.l,flength.l,*params.asm:: /
;/ _fadeparams}                                                                /
;/                                                                             /
;/ Description:                                                                /
;/ Do a volume fade on 16bit signed mono wavesample. Values that exceed 16bi:: /
;/ t range will be clipped.                                                    /
;/ The calculations are dont using floats for highest accuracy.                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - *params.asm_fadeparams    : ???                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement asm_ffade_clip16mx {sourceaddr.l,destaddr.l,flength.l,*params.asm_fadeparams}
gain.f = *params\int_current / 32768
r.f    = *params\float_ratio
For offset.l = 0 To flength-1
  left.f  = Peek.w(sourceaddr + offset*2)
  left * gain
  Poke.w destaddr + offset * 2,left
  gain * r
Next
gain * 32768
*params\int_current = gain
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_fade_clip16s {sourceaddr.l,destaddr.l,flength.l,*params.asm_f:: /
;/ adeparams}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Do a volume fade on 16bit signed stereo wavesample. Values that exceed 16:: /
;/ bit range will be clipped.                                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - *params.asm_fadeparams    : ???                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement asm_fade_clip16s {sourceaddr.l,destaddr.l,flength.l,*params.asm_fadeparams}
gain.l = *params\int_current
gmax.l = Max(*params\int_start,*params\int_end)
gmin.l = Min(*params\int_start,*params\int_end)
steppos.l =  *params\stepsave

Select *params\method
  Case 1
    For offset.l = 0 To flength-1
      left.l  = Peek.w(sourceaddr + offset*4)
      right.l = Peek.w(sourceaddr + offset*4 + 2)
      qgain.l = gain * gain /32768
      left  * qgain / 32768
      right * qgain / 32768
      Poke.w destaddr + offset * 4,left
      Poke.w destaddr + offset * 4+ 2,right
      steppos-1
      If steppos<=0
        steppos = *params\int_stepsize
        gain    + *params\int_onestep
        If gain<gmin Then gain = gmin
        If gain>gmax Then gain = gmax
      End If
    Next

  Default
    For offset.l = 0 To flength-1
      left.l  = Peek.w(sourceaddr + offset*4)
      right.l = Peek.w(sourceaddr + offset*4 + 2)
      left  * gain / 32768
      right * gain / 32768
      Poke.w destaddr + offset * 4,left
      Poke.w destaddr + offset * 4+ 2,right
      steppos-1
      If steppos<=0
        steppos = *params\int_stepsize
        gain    + *params\int_onestep
        If gain<gmin Then gain = gmin
        If gain>gmax Then gain = gmax
      End If
    Next
End Select
*params\int_current = gain
*params\stepsave = steppos
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_fade_clip16m {sourceaddr.l,destaddr.l,flength.l,*params.asm_f:: /
;/ adeparams}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Do a volume fade on 16bit signed mono wavesample. Values that exceed 16bi:: /
;/ t range will be clipped.                                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : source address                                          /
;/ - destaddr.l    : destination address                                       /
;/ - flength.l    : length in sample frames                                    /
;/ - *params.asm_fadeparams    : asm_fadeparams structure                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement asm_fade_clip16m {sourceaddr.l,destaddr.l,flength.l,*params.asm_fadeparams}
gain.l = *params\int_current
steppos.l =  *params\stepsave
gmax.l = Max(*params\int_start,*params\int_end)
gmin.l = Min(*params\int_start,*params\int_end)
For offset.l = 0 To flength-1
  left.l  = Peek.w(sourceaddr + offset*2)
  left  * gain / 32768
  Poke.w destaddr + offset * 2,left
  steppos-1
  If steppos<=0
    steppos = *params\int_stepsize
    gain    + *params\int_onestep
    If gain<gmin Then gain = gmin
    If gain>gmax Then gain = gmax
  End If
Next
*params\int_current = gain
*params\stepsave = steppos
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  pos.l =  asm_seekpeak {sourceaddr.l,bytelength.l,peak.l,reverse.l} /
;/                                                                             /
;/ Description:                                                                /
;/ Find the position of the first value that exceed peak.l in 16bit mono or :: /
;/ stereo data.                                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - bytelength.l    : ???                                                     /
;/ - peak.l    : peak value that has to be exceeded                            /
;/ - reverse.l    : 0= seek from beginning, -1 seek backwards from end         /
;/                                                                             /
;/ Result:                                                                     /
;/ - pos.l     : Byte position where the first exceeding of peak.l happend     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST asm_seekpeak {sourceaddr.l,bytelength.l,peak.l,reverse.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d2,d4
MOVE.l d1,d5
NEG.l d4
TST.l d3
BNE seekpeakreverse

seekpeakloop:
MOVE.w (a0)+,d0
CMP.w d2,d0
BGT succseekpeak
CMP.w d4,d0
BLE succseekpeak
SUB.l #2,d1
BGT seekpeakloop
MOVE.l #-1,d1
BRA endseekpeak

seekpeakreverse:
ADD.l d1,a0

seekpeakloopr:
MOVE.w -(a0),d0
CMP.w d2,d0
BGT endseekpeak
CMP.w d4,d0
BLE endseekpeak
SUB.l #2,d1
BGT seekpeakloopr
MOVE.l #-1,d1
BRA endseekpeak

succseekpeak:
SUB.l d1,d5
MOVE.l d5,d1

endseekpeak:
MOVE.l d1,d0
RTS
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l =  asm_getpeak {sourceaddr.l,bytelength.l}                /
;/                                                                             /
;/ Description:                                                                /
;/ Find the highest (or loewest) 16bit peak value in the given memory area.    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - bytelength.l    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : peak value                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST asm_getpeak {sourceaddr.l,bytelength.l}
UNLK a4
MOVE.l d0,a0
CLR.l d2
CLR.l d3
getpeakloop:
  MOVE.w (a0)+,d0
  BGT getpeak_gt

  CMP.w d2,d0
  BGE getpeak_done
  MOVE.w d0,d2
  BRA getpeak_done

  getpeak_gt:
  CMP.w d3,d0
  BLE getpeak_done
  MOVE.w d0,d3
  getpeak_done:

  SUB.l #2,d1
BGT getpeakloop

NEG.w d2 : EXT.l d2 : EXT.l d3
CMP.l d2,d3
BGT getpeak_low
MOVE.l d2,d0
BRA getpeak_exit
getpeak_low:
MOVE.l d3,d0
getpeak_exit:
RTS
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_copymem {sourceaddr.l,destaddr.l,blength.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ Same as CopyMem_, but faster and memory areas can overlap!                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : source address                                          /
;/ - destaddr.l    : destination address                                       /
;/ - blength.l    : byte length                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_copymem {sourceaddr.l,destaddr.l,blength.l}
UNLK a4
TST.l d2
BLE asm_copy_exit
MOVE.l d0,a0
MOVE.l d1,a1
MOVE.l d2,d3
CMP.l d0,d1
BLT asm_copy_normal
BEQ asm_copy_exit
ADD.l d2,a0
ADD.l d2,a1
asm_copy_reverse: ; --------------------------------- REVERSE
LSR.l #5,d3
BEQ asm_copy_reverse_norow
asm_copy_reverse_row:
MOVE.l -(a0),-(a1) ;1
MOVE.l -(a0),-(a1) ;2
MOVE.l -(a0),-(a1) ;3
MOVE.l -(a0),-(a1) ;4
MOVE.l -(a0),-(a1) ;5
MOVE.l -(a0),-(a1) ;6
MOVE.l -(a0),-(a1) ;7
MOVE.l -(a0),-(a1) ;8
SUB.l #1,d3
BGT asm_copy_reverse_row
asm_copy_reverse_norow:
AND.l #31,d2
BEQ asm_copy_exit
asm_copy_reverse_byte:
MOVE.b -(a0),-(a1)
SUB.l #1,d2
BGT asm_copy_reverse_byte
asm_copy_exit:
RTS
asm_copy_normal: ; ------------------------------------ NORMAL
LSR.l #5,d3
BEQ asm_copy_normal_norow
asm_copy_normal_row:
MOVE.l (a0)+,(a1)+  ;1
MOVE.l (a0)+,(a1)+  ;2
MOVE.l (a0)+,(a1)+  ;3
MOVE.l (a0)+,(a1)+  ;4
MOVE.l (a0)+,(a1)+  ;5
MOVE.l (a0)+,(a1)+  ;6
MOVE.l (a0)+,(a1)+  ;7
MOVE.l (a0)+,(a1)+  ;8
SUB.l #1,d3
BGT asm_copy_normal_row
asm_copy_normal_norow:
AND.l #31,d2
BEQ asm_copy_exit
asm_copy_normal_byte:
MOVE.b (a0)+,(a1)+
SUB.l #1,d2
BGT asm_copy_normal_byte
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  newseed.l =  asm_saw16s {destaddr.l,flength.l,frequ.l,seed.l}      /
;/                                                                             /
;/ Description:                                                                /
;/ Generate a Saw waveform at the given frequency starting with seed (=phase). /
;/ Useful to fill buffers with a "buzz" instead of zeroing them for debuggin:: /
;/ g purposes.                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - flength.l    : ???                                                        /
;/ - frequ.l    : frequ = 32768 *  frequency[Hz] / samplerate                  /
;/ - seed.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - newseed.l     : seed value to feed in the next call auf this function t:: /
;/ o get a continous waveform                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST asm_saw16s {destaddr.l,flength.l,frequ.l,seed.l}
UNLK a4
MOVE.l d0,a0
asm_sawloop:
ADD.w d2,d3
MOVE.w d3,(a0)+
MOVE.w d3,(a0)+
SUB.l #1,d1
BGT asm_sawloop
MOVE.l d3,d0
RTS
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_makesubsample16m {sourceaddr.l,modulo.l,blength.l,density.l,b:: /
;/ rain.l}                                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Used by HD-Rec.                                                             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - modulo.l    : ???                                                         /
;/ - blength.l    : ???                                                        /
;/ - density.l    : ???                                                        /
;/ - brain.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_makesubsample16m {sourceaddr.l,modulo.l,blength.l,density.l,brain.l}
UNLK a4
MOVE.l d7,-(a7)
MOVE.l d4,a0     ; brain  in a0
MOVE.l d0,a1     ; Source in a1
MOVE.l 32(a0),a2 ; Hohle DESTaddresse aus Brain
MOVE.l d2,d0     ; Length in d0 (Todo)
MOVE.l d3,d7     ; Ratio retter in d7
MOVE.l 12(a0),d6  ; Noch ein uebertrag vorhanden ?
MOVE.l 16(a0),d2  ; Hohle werte heraus ...
MOVE.l 20(a0),d3

BGT makesubloopm
MOVE.l d7,d6   ; Density loopcounter laden
CLR.l d2       ; Lows und Highs clearen
CLR.l d3
makesubloopm:
SUB.l d6,d0
BGE makesubdensitym
ADD.l d6,d0
MOVE.l d0,d6
SUB.l d0,d7
MOVE.l #-1,d0

  makesubdensitym:
    MOVE.w (a1)+,d1
    BGE makesubhighm
    CMP.w d1,d2
    BLE noextremem
    MOVE.w d1,d2
    makesubhighm:
    CMP.w d1,d3
    BGE noextremem
    MOVE.w d1,d3
    noextremem:
  SUB.l #1,d6
  BGT makesubdensitym

  TST.l d0
  BLT finim

  MOVE.w d2,(a2)+            ; Werte schreiben ...
  MOVE.w d3,(a2)+

  CLR.l d2                   ; Neues Spiel, neues Glueck
  CLR.l d3

  MOVE.l d7,d6

  TST.l d0
  BGT makesubloopm

finim:
MOVE.l d7,12(a0)

MOVE.l d2,16(a0)            ; Werte schreiben ...
MOVE.l d3,20(a0)

MOVE.l a2,32(a0)

MOVE.l (a7)+,d7

RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_makesubsample16s {sourceaddr.l,modulo.l,blength.l,density.l,b:: /
;/ rain_ptr.l}                                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * private * Used by HD-Rec.                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - modulo.l    : ???                                                         /
;/ - blength.l    : ???                                                        /
;/ - density.l    : ???                                                        /
;/ - brain_ptr.l    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_makesubsample16s {sourceaddr.l,modulo.l,blength.l,density.l,brain_ptr.l}
UNLK a4

; a0 = Brain         !
; a1 = ^Source       !
; a2 = ^Leftlow      !

; d0 = Todo          !
; d1 = Work Sample
; d2 = Leftlow
; d3 = LeftHigh
; d4 = RightLow
; d5 = RightHigh
; d6 = Density Counter
; d7 = Ratio
MOVE.l d7,-(a7)

MOVE.l d4,a0     ; brain  in a0
MOVE.l d0,a1     ; Source in a1

MOVE.l 32(a0),a2 ; Hohle DESTaddresse aus Brain

MOVE.l d2,d0     ; Length in d0 (Todo)
MOVE.l d3,d7     ; Ratio retter in d7


MOVE.l 12(a0),d6  ; Noch ein uebertrag vorhanden ?
MOVE.l 16(a0),d2  ; Hohle werte heraus ...
MOVE.l 20(a0),d3
MOVE.l 24(a0),d4
MOVE.l 28(a0),d5

BGT makesubloop
MOVE.l d7,d6   ; Density loopcounter laden
CLR.l d2       ; Lows und Highs clearen
CLR.l d3
CLR.l d4
CLR.l d5
makesubloop:
SUB.l d6,d0
BGE makesubdensity
ADD.l d6,d0
MOVE.l d0,d6
SUB.l d0,d7
MOVE.l #-1,d0

  makesubdensity:
    MOVE.w (a1)+,d1
    BGE makesubhigh
    CMP.w d1,d2
    BLE noextreme
    MOVE.w d1,d2
    makesubhigh:
    CMP.w d1,d3
    BGE noextreme
    MOVE.w d1,d3
    noextreme:

    MOVE.w (a1)+,d1
    BGE makesubhighr
    CMP.w d1,d4
    BLE noextremer
    MOVE.w d1,d4
    makesubhighr:
    CMP.w d1,d5
    BGE noextremer
    MOVE.w d1,d5
    noextremer:
  SUB.l #1,d6
  BGT makesubdensity

  TST.l d0
  BLT fini

  MOVE.w d2,(a2)+            ; Werte schreiben ...
  MOVE.w d3,(a2)+
  MOVE.w d4,(a2)+
  MOVE.w d5,(a2)+

  CLR.l d2                   ; Neues Spiel, neues Glueck
  CLR.l d3
  CLR.l d4
  CLR.l d5

  MOVE.l d7,d6

  TST.l d0
  BGT makesubloop

fini:
MOVE.l d7,12(a0)

MOVE.l d2,16(a0)            ; Werte schreiben ...
MOVE.l d3,20(a0)
MOVE.l d4,24(a0)
MOVE.l d5,28(a0)

MOVE.l a2,32(a0)

MOVE.l (a7)+,d7

RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_findlowhigh_sub_m {sourceaddr.l,d_length.l,pixheight.l,viewra:: /
;/ tio.l,subratio.l,zoom.l}                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * private * Used in HD-Rec.                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - d_length.l    : ???                                                       /
;/ - pixheight.l    : ???                                                      /
;/ - viewratio.l    : ???                                                      /
;/ - subratio.l    : ???                                                       /
;/ - zoom.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_findlowhigh_sub_m {sourceaddr.l,d_length.l,pixheight.l,viewratio.l,subratio.l,zoom.l}
UNLK a4
MOVE.l a4,-(a7)
MOVE.l a5,-(a7)
MOVE.l a6,-(a7)
MOVE.l d7,-(a7)

MOVE.l #0,lowhighsubs_zoom8m
MOVE.l #0,lowhighsubs_zoom256m

CMP.l #1,d5
BNE lhss_nozoom8m
MOVE.l #-1,lowhighsubs_zoom8m

lhss_nozoom8m:
CMP.l #2,d5
BNE lhss_nozoom256m
MOVE.l #-1,lowhighsubs_zoom256m
MOVE.l #-1,lowhighsubs_zoom8m

lhss_nozoom256m:

MOVE.l d2,d5 : ASR.l #1,d5
MOVE.l d5,lhss_cliphim
NEG.l d5
MOVE.l d5,lhss_cliplom

MOVE.l d0,a0  ; a0 = sourceaddr
MOVE.l pixcache_l_low,a1
MOVE.l pixcache_l_high,a2
;MOVE.l pixcache_r_low,a3
;MOVE.l pixcache_r_high,a4

MOVE.l d4,d6  ; subrato d6
MOVE.l d2,d4  ; height
MOVE.l d1,d5  ; d_length
MOVE.l d3,a5  ; viewratio nach a5
MOVE.l d3,d7  ; viewratio ins konto

findlowhighsubloopm:
CLR.l d0
CLR.l d1
;CLR.l d2
;CLR.l d3

flhsdensityloopm:
CMP.w (a0)+,d0
BLE fsnonewlowm
MOVE.w -2(a0),d0
fsnonewlowm:

CMP.w (a0)+,d1
BGE fsnonewhighm
MOVE.w -2(a0),d1
fsnonewhighm:

;CMP.w (a0)+,d2
;BLE fsnonewlowr
;MOVE.w -2(a0),d2
;fsnonewlowr:

;CMP.w (a0)+,d3
;BGE fsnonewhighr
;MOVE.w -2(a0),d3
;fsnonewhighr:

SUB.l d6,d7
BGT flhsdensityloopm

lhss_zoom_1m:
TST.l lowhighsubs_zoom8m
BNE lhss_zoom_8m
MULS d4,d0 : ASR.l #8,d0 : ASR.l #8,d0
MULS d4,d1 : ASR.l #8,d1 : ASR.l #8,d1
;MULS d4,d2 : ASR.l #8,d2 : ASR.l #8,d2
;MULS d4,d3 : ASR.l #8,d3 : ASR.l #8,d3
BRA writeagainsubm

lhss_zoom_8m:
TST.l lowhighsubs_zoom256m
BNE lhss_zoom_256m
MULS d4,d0 : ASR.l #8,d0 : ASR.l #4,d0
MULS d4,d1 : ASR.l #8,d1 : ASR.l #4,d1
;MULS d4,d2 : ASR.l #8,d2 : ASR.l #4,d2
;MULS d4,d3 : ASR.l #8,d3 : ASR.l #4,d3
BRA lhss_clipm

lhss_zoom_256m:
MULS d4,d0 : ASR.l #8,d0
MULS d4,d1 : ASR.l #8,d1
;MULS d4,d2 : ASR.l #8,d2
;MULS d4,d3 : ASR.l #8,d3

lhss_clipm:
CMP.l lhss_cliphim,d0  : BLE lhss_noclipd0pm : MOVE.l lhss_cliphim,d0
lhss_noclipd0pm:
CMP.l lhss_cliplom,d0  : BGE lhss_noclipd0nm : MOVE.l lhss_cliplom,d0
lhss_noclipd0nm:

CMP.l lhss_cliphim,d1  : BLE lhss_noclipd1pm : MOVE.l lhss_cliphim,d1
lhss_noclipd1pm:
CMP.l lhss_cliplom,d1  : BGE lhss_noclipd1nm : MOVE.l lhss_cliplom,d1
lhss_noclipd1nm:

;CMP.l lhss_cliphi,d2  : BLE lhss_noclipd2p : MOVE.l lhss_cliphi,d2
;lhss_noclipd2p:
;CMP.l lhss_cliplo,d2  : BGE lhss_noclipd2n : MOVE.l lhss_cliplo,d2
;lhss_noclipd2n:

;CMP.l lhss_cliphi,d3  : BLE lhss_noclipd3p : MOVE.l lhss_cliphi,d3
;lhss_noclipd3p:
;CMP.l lhss_cliplo,d3  : BGE lhss_noclipd3n : MOVE.l lhss_cliplo,d3
;lhss_noclipd3n:

writeagainsubm:
MOVE.w d0,(a1)+
MOVE.w d1,(a2)+
;MOVE.w d2,(a3)+
;MOVE.w d3,(a4)+

SUB.l #1,d5
BLE subfinim

ADD.l a5,d7
BLE writeagainsubm
BRA findlowhighsubloopm

subfinim:
MOVE.l (a7)+,d7
MOVE.l (a7)+,a6
MOVE.l (a7)+,a5
MOVE.l (a7)+,a4                 ; A4 restoren
RTS

lowhighsubs_zoom8m:
Dc.l 0
lowhighsubs_zoom256m:
Dc.l 0
lhss_cliplom:
Dc.l 0
lhss_cliphim:
Dc.l 0
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_findlowhigh_sub_s {sourceaddr.l,d_length.l,pixheight.l,viewra:: /
;/ tio.l,subratio.l,zoom.l}                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * private * Used in HD-Rec.                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - d_length.l    : ???                                                       /
;/ - pixheight.l    : ???                                                      /
;/ - viewratio.l    : ???                                                      /
;/ - subratio.l    : ???                                                       /
;/ - zoom.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement asm_findlowhigh_sub_s {sourceaddr.l,d_length.l,pixheight.l,viewratio.l,subratio.l,zoom.l}
UNLK a4
MOVE.l a4,-(a7)
MOVE.l a5,-(a7)
MOVE.l a6,-(a7)
MOVE.l d7,-(a7)

MOVE.l #0,lowhighsubs_zoom8
MOVE.l #0,lowhighsubs_zoom256

CMP.l #1,d5
BNE lhss_nozoom8
MOVE.l #-1,lowhighsubs_zoom8

lhss_nozoom8:
CMP.l #2,d5
BNE lhss_nozoom256
MOVE.l #-1,lowhighsubs_zoom256
MOVE.l #-1,lowhighsubs_zoom8

lhss_nozoom256:

MOVE.l d2,d5 : ASR.l #1,d5
MOVE.l d5,lhss_cliphi
NEG.l d5
MOVE.l d5,lhss_cliplo

MOVE.l d0,a0  ; a0 = sourceaddr
MOVE.l pixcache_l_low,a1
MOVE.l pixcache_l_high,a2
MOVE.l pixcache_r_low,a3
MOVE.l pixcache_r_high,a4

MOVE.l d4,d6  ; subrato d6
MOVE.l d2,d4  ; height
MOVE.l d1,d5  ; d_length
MOVE.l d3,a5  ; viewratio nach a5
MOVE.l d3,d7  ; viewratio ins konto

findlowhighsubloop:
CLR.l d0
CLR.l d1
CLR.l d2
CLR.l d3

flhsdensityloop:
CMP.w (a0)+,d0
BLE fsnonewlow
MOVE.w -2(a0),d0
fsnonewlow:

CMP.w (a0)+,d1
BGE fsnonewhigh
MOVE.w -2(a0),d1
fsnonewhigh:

CMP.w (a0)+,d2
BLE fsnonewlowr
MOVE.w -2(a0),d2
fsnonewlowr:

CMP.w (a0)+,d3
BGE fsnonewhighr
MOVE.w -2(a0),d3
fsnonewhighr:

SUB.l d6,d7
BGT flhsdensityloop

lhss_zoom_1:
TST.l lowhighsubs_zoom8
BNE lhss_zoom_8
MULS d4,d0 : ASR.l #8,d0 : ASR.l #8,d0
MULS d4,d1 : ASR.l #8,d1 : ASR.l #8,d1
MULS d4,d2 : ASR.l #8,d2 : ASR.l #8,d2
MULS d4,d3 : ASR.l #8,d3 : ASR.l #8,d3
BRA writeagainsub

lhss_zoom_8:
TST.l lowhighsubs_zoom256
BNE lhss_zoom_256
MULS d4,d0 : ASR.l #8,d0 : ASR.l #4,d0
MULS d4,d1 : ASR.l #8,d1 : ASR.l #4,d1
MULS d4,d2 : ASR.l #8,d2 : ASR.l #4,d2
MULS d4,d3 : ASR.l #8,d3 : ASR.l #4,d3
BRA lhss_clip

lhss_zoom_256:
MULS d4,d0 : ASR.l #8,d0
MULS d4,d1 : ASR.l #8,d1
MULS d4,d2 : ASR.l #8,d2
MULS d4,d3 : ASR.l #8,d3

lhss_clip:
CMP.l lhss_cliphi,d0  : BLE lhss_noclipd0p : MOVE.l lhss_cliphi,d0
lhss_noclipd0p:
CMP.l lhss_cliplo,d0  : BGE lhss_noclipd0n : MOVE.l lhss_cliplo,d0
lhss_noclipd0n:

CMP.l lhss_cliphi,d1  : BLE lhss_noclipd1p : MOVE.l lhss_cliphi,d1
lhss_noclipd1p:
CMP.l lhss_cliplo,d1  : BGE lhss_noclipd1n : MOVE.l lhss_cliplo,d1
lhss_noclipd1n:

CMP.l lhss_cliphi,d2  : BLE lhss_noclipd2p : MOVE.l lhss_cliphi,d2
lhss_noclipd2p:
CMP.l lhss_cliplo,d2  : BGE lhss_noclipd2n : MOVE.l lhss_cliplo,d2
lhss_noclipd2n:

CMP.l lhss_cliphi,d3  : BLE lhss_noclipd3p : MOVE.l lhss_cliphi,d3
lhss_noclipd3p:
CMP.l lhss_cliplo,d3  : BGE lhss_noclipd3n : MOVE.l lhss_cliplo,d3
lhss_noclipd3n:

writeagainsub:
MOVE.w d0,(a1)+
MOVE.w d1,(a2)+
MOVE.w d2,(a3)+
MOVE.w d3,(a4)+

SUB.l #1,d5
BLE subfini

ADD.l a5,d7
BLE writeagainsub
BRA findlowhighsubloop

subfini:
MOVE.l (a7)+,d7
MOVE.l (a7)+,a6
MOVE.l (a7)+,a5
MOVE.l (a7)+,a4                 ; A4 restoren
RTS

lowhighsubs_zoom8:
Dc.l 0
lowhighsubs_zoom256:
Dc.l 0
lhss_cliplo:
Dc.l 0
lhss_cliphi:
Dc.l 0
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: asm_findlowhigh_reset {d_length.l,ratio.l}                          /
;/                                                                             /
;/ Description:                                                                /
;/ * private * Used in HD-REc.                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - d_length.l    : ???                                                       /
;/ - ratio.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST asm_findlowhigh_reset {d_length.l,ratio.l}
MOVE.l #32767,oldd0
MOVE.l #-32768,oldd1
MOVE.l #32767,oldd2
MOVE.l #-32768,oldd3
MOVE.l d1,oldkonto
MOVE.l d0,olddlength
MOVE.l d0,oldtodo
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = asm_findlowhigh_m {sourceaddr.l,dummy.l,pixheight.l,v:: /
;/ iewratio.l,s_length.l}                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * private * Used in HD-Rec.                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - dummy.l    : ???                                                          /
;/ - pixheight.l    : ???                                                      /
;/ - viewratio.l    : ???                                                      /
;/ - s_length.l    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l asm_findlowhigh_m {sourceaddr.l,dummy.l,pixheight.l,viewratio.l,s_length.l}
;UNLK a4
MOVE.l a4,-(a7)
MOVE.l a5,-(a7)
MOVE.l a6,-(a7)
MOVE.l d7,-(a7)

MOVE.l d0,a0  ; a0 = sourceaddr

SWAP d2

MOVE.l #0,lowhighs_zoom8m
MOVE.l #0,lowhighs_zoom256m

CMP.w #1,d2
BNE lhs_nozoom8m
MOVE.l #-1,lowhighs_zoom8m

lhs_nozoom8m:
CMP.w #2,d2
BNE lhs_nozoom256m
MOVE.l #-1,lowhighs_zoom256m
MOVE.l #-1,lowhighs_zoom8m

lhs_nozoom256m:

SWAP d2 : AND.l #$0000ffff,d2
MOVE.l d2,d0 : ASR.l #1,d0
MOVE.l d0,lhs_cliphim
NEG.l d0
MOVE.l d0,lhs_cliplom

MOVE.l olddlength,d5
SUB.l oldtodo,d5


MOVE.l pixcache_l_low,a1    : ADD.l d5,a1 : ADD.l d5,a1
MOVE.l pixcache_l_high,a2   : ADD.l d5,a2 : ADD.l d5,a2
;MOVE.l pixcache_r_low,a3    : ADD.l d5,a3 : ADD.l d5,a3
;MOVE.l pixcache_r_high,a4   : ADD.l d5,a4 : ADD.l d5,a4

MOVE.l d4,d6  ; subrato d6
MOVE.l d2,d4  ; height
;MOVE.l d1,d5  ; d_length
MOVE.l d3,a5  ; viewratio nach a5
MOVE.l d3,d7  ; viewratio ins konto

MOVE.l oldd0,d0
MOVE.l oldd1,d1
;MOVE.l oldd2,d2
;MOVE.l oldd3,d3
MOVE.l oldtodo,d5


MOVE.l oldkonto,d7

findlowhighloopm:

flhdensityloopm:
SUB.l #1,d6
BLT fini_m



CMP.w (a0),d0
BLE fnonewlowm
MOVE.w (a0),d0
fnonewlowm:

CMP.w (a0)+,d1
BGE fnonewhighm
MOVE.w -2(a0),d1
fnonewhighm:

;CMP.w (a0),d2
;BLE fnonewlowr
;MOVE.w (a0),d2
;fnonewlowr:

;CMP.w (a0)+,d3
;BGE fnonewhighr
;MOVE.w -2(a0),d3
;fnonewhighr:

SUB.l #1,d7
BGT flhdensityloopm

skipdensitym:

lhs_zoom_1m:
TST.l lowhighs_zoom8m
BNE lhs_zoom_8m
MULS d4,d0 : ASR.l #8,d0 : ASR.l #8,d0
MULS d4,d1 : ASR.l #8,d1 : ASR.l #8,d1
;MULS d4,d2 : ASR.l #8,d2 : ASR.l #8,d2
;MULS d4,d3 : ASR.l #8,d3 : ASR.l #8,d3
BRA writeagainm

lhs_zoom_8m:
TST.l lowhighs_zoom256m
BNE lhs_zoom_256m
MULS d4,d0 : ASR.l #8,d0 : ASR.l #4,d0
MULS d4,d1 : ASR.l #8,d1 : ASR.l #4,d1
;MULS d4,d2 : ASR.l #8,d2 : ASR.l #4,d2
;MULS d4,d3 : ASR.l #8,d3 : ASR.l #4,d3
BRA lhs_clipm

lhs_zoom_256m:
MULS d4,d0 : ASR.l #8,d0
MULS d4,d1 : ASR.l #8,d1
;MULS d4,d2 : ASR.l #8,d2
;MULS d4,d3 : ASR.l #8,d3

lhs_clipm:
CMP.l lhs_cliphim,d0  : BLE lhs_noclipd0pm : MOVE.l lhs_cliphim,d0
lhs_noclipd0pm:
CMP.l lhs_cliplom,d0  : BGE lhs_noclipd0nm : MOVE.l lhs_cliplom,d0
lhs_noclipd0nm:

CMP.l lhs_cliphim,d1  : BLE lhs_noclipd1pm : MOVE.l lhs_cliphim,d1
lhs_noclipd1pm:
CMP.l lhs_cliplom,d1  : BGE lhs_noclipd1nm : MOVE.l lhs_cliplom,d1
lhs_noclipd1nm:

;CMP.l lhs_cliphim,d2  : BLE lhs_noclipd2pm : MOVE.l lhs_cliphim,d2
;lhs_noclipd2pm:
;CMP.l lhs_cliplom,d2  : BGE lhs_noclipd2nm : MOVE.l lhs_cliplom,d2
;lhs_noclipd2nm:
;
;CMP.l lhs_cliphim,d3  : BLE lhs_noclipd3pm : MOVE.l lhs_cliphim,d3
;lhs_noclipd3pm:
;CMP.l lhs_cliplom,d3  : BGE lhs_noclipd3nm : MOVE.l lhs_cliplom,d3
;lhs_noclipd3nm:

writeagainm:
MOVE.w d0,(a1)+
MOVE.w d1,(a2)+
;MOVE.w d2,(a3)+
;MOVE.w d3,(a4)+

MOVE.l #32767,d0
MOVE.l #-32768,d1
;MOVE.l #32767,d2
;MOVE.l #-32768,d3

SUB.l #1,d5
BLE fini_m

ADD.l a5,d7
BLE writeagainm
BRA findlowhighloopm

fini_m:
MOVE.l d0,oldd0
MOVE.l d1,oldd1
;MOVE.l d2,oldd2
;MOVE.l d3,oldd3
MOVE.l d7,oldkonto
MOVE.l d5,oldtodo

MOVE.l (a7)+,d7
MOVE.l (a7)+,a6
MOVE.l (a7)+,a5
MOVE.l (a7)+,a4                 ; A4 restoren

MOVE.l d5,d0

AsmExit
RTS

lowhighs_zoom8m:
Dc.l 0
lowhighs_zoom256m:
Dc.l 0
lhs_cliplom:
Dc.l 0
lhs_cliphim:
Dc.l 0
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = asm_findlowhigh_s {sourceaddr.l,dummy.l,pixheight.l,v:: /
;/ iewratio.l,s_length.l}                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * private * Used in HD-Rec.                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - dummy.l    : ???                                                          /
;/ - pixheight.l    : ???                                                      /
;/ - viewratio.l    : ???                                                      /
;/ - s_length.l    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l asm_findlowhigh_s {sourceaddr.l,dummy.l,pixheight.l,viewratio.l,s_length.l}
;UNLK a4
MOVE.l a4,-(a7)
MOVE.l a5,-(a7)
MOVE.l a6,-(a7)
MOVE.l d7,-(a7)

MOVE.l d0,a0  ; a0 = sourceaddr

SWAP d2

MOVE.l #0,lowhighs_zoom8
MOVE.l #0,lowhighs_zoom256

CMP.w #1,d2
BNE lhs_nozoom8
MOVE.l #-1,lowhighs_zoom8

lhs_nozoom8:
CMP.w #2,d2
BNE lhs_nozoom256
MOVE.l #-1,lowhighs_zoom256
MOVE.l #-1,lowhighs_zoom8

lhs_nozoom256:

SWAP d2 : AND.l #$0000ffff,d2
MOVE.l d2,d0 : ASR.l #1,d0
MOVE.l d0,lhs_cliphi
NEG.l d0
MOVE.l d0,lhs_cliplo

MOVE.l olddlength,d5
SUB.l oldtodo,d5


MOVE.l pixcache_l_low,a1    : ADD.l d5,a1 : ADD.l d5,a1
MOVE.l pixcache_l_high,a2   : ADD.l d5,a2 : ADD.l d5,a2
MOVE.l pixcache_r_low,a3    : ADD.l d5,a3 : ADD.l d5,a3
MOVE.l pixcache_r_high,a4   : ADD.l d5,a4 : ADD.l d5,a4

MOVE.l d4,d6  ; subrato d6
MOVE.l d2,d4  ; height
;MOVE.l d1,d5  ; d_length
MOVE.l d3,a5  ; viewratio nach a5
MOVE.l d3,d7  ; viewratio ins konto

MOVE.l oldd0,d0
MOVE.l oldd1,d1
MOVE.l oldd2,d2
MOVE.l oldd3,d3
MOVE.l oldtodo,d5
MOVE.l oldkonto,d7


findlowhighloop:


flhdensityloop:
SUB.l #1,d6
BLT fini_s


CMP.w (a0),d0
BLE fnonewlow
MOVE.w (a0),d0
fnonewlow:

CMP.w (a0)+,d1
BGE fnonewhigh
MOVE.w -2(a0),d1
fnonewhigh:

CMP.w (a0),d2
BLE fnonewlowr
MOVE.w (a0),d2
fnonewlowr:

CMP.w (a0)+,d3
BGE fnonewhighr
MOVE.w -2(a0),d3
fnonewhighr:

SUB.l #1,d7
BGT flhdensityloop

skipdensity:

lhs_zoom_1:
TST.l lowhighs_zoom8
BNE lhs_zoom_8
MULS d4,d0 : ASR.l #8,d0 : ASR.l #8,d0
MULS d4,d1 : ASR.l #8,d1 : ASR.l #8,d1
MULS d4,d2 : ASR.l #8,d2 : ASR.l #8,d2
MULS d4,d3 : ASR.l #8,d3 : ASR.l #8,d3
BRA writeagain

lhs_zoom_8:
TST.l lowhighs_zoom256
BNE lhs_zoom_256
MULS d4,d0 : ASR.l #8,d0 : ASR.l #4,d0
MULS d4,d1 : ASR.l #8,d1 : ASR.l #4,d1
MULS d4,d2 : ASR.l #8,d2 : ASR.l #4,d2
MULS d4,d3 : ASR.l #8,d3 : ASR.l #4,d3
BRA lhs_clip

lhs_zoom_256:
MULS d4,d0 : ASR.l #8,d0
MULS d4,d1 : ASR.l #8,d1
MULS d4,d2 : ASR.l #8,d2
MULS d4,d3 : ASR.l #8,d3

lhs_clip:
CMP.l lhs_cliphi,d0  : BLE lhs_noclipd0p : MOVE.l lhs_cliphi,d0
lhs_noclipd0p:
CMP.l lhs_cliplo,d0  : BGE lhs_noclipd0n : MOVE.l lhs_cliplo,d0
lhs_noclipd0n:

CMP.l lhs_cliphi,d1  : BLE lhs_noclipd1p : MOVE.l lhs_cliphi,d1
lhs_noclipd1p:
CMP.l lhs_cliplo,d1  : BGE lhs_noclipd1n : MOVE.l lhs_cliplo,d1
lhs_noclipd1n:

CMP.l lhs_cliphi,d2  : BLE lhs_noclipd2p : MOVE.l lhs_cliphi,d2
lhs_noclipd2p:
CMP.l lhs_cliplo,d2  : BGE lhs_noclipd2n : MOVE.l lhs_cliplo,d2
lhs_noclipd2n:

CMP.l lhs_cliphi,d3  : BLE lhs_noclipd3p : MOVE.l lhs_cliphi,d3
lhs_noclipd3p:
CMP.l lhs_cliplo,d3  : BGE lhs_noclipd3n : MOVE.l lhs_cliplo,d3
lhs_noclipd3n:

writeagain:
MOVE.w d0,(a1)+
MOVE.w d1,(a2)+
MOVE.w d2,(a3)+
MOVE.w d3,(a4)+

MOVE.l #32767,d0
MOVE.l #-32768,d1
MOVE.l #32767,d2
MOVE.l #-32768,d3

SUB.l #1,d5
BLE fini_s

ADD.l a5,d7
TST.l d7
BLE writeagain
BRA findlowhighloop

fini_s:
MOVE.l d0,oldd0
MOVE.l d1,oldd1
MOVE.l d2,oldd2
MOVE.l d3,oldd3
MOVE.l d7,oldkonto
MOVE.l d5,oldtodo

MOVE.l (a7)+,d7
MOVE.l (a7)+,a6
MOVE.l (a7)+,a5
MOVE.l (a7)+,a4                 ; A4 restoren

MOVE.l d5,d0
AsmExit
RTS

lowhighs_zoom8:
Dc.l 0
lowhighs_zoom256:
Dc.l 0
lhs_cliplo:
Dc.l 0
lhs_cliphi:
Dc.l 0
End Function


BRA skipasmaudiodat
Even
pixcache_l_low:  Dc.l 0
pixcache_l_high: Dc.l 0
pixcache_r_low:  Dc.l 0
pixcache_r_high: Dc.l 0
oldd0:           Dc.l 0
oldd1:           Dc.l 0
oldd2:           Dc.l 0
oldd3:           Dc.l 0
oldkonto:        Dc.l 0
olddlength:      Dc.l 0
oldtodo:         Dc.l 0
skipasmaudiodat:
LastRunErrsMode

CEND

