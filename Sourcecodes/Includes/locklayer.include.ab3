; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "LocklayerDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 2
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: LockLayer.include                                                     /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////

CNIF #__include=0
SYNTAX 2
OPTIMIZE 7
#use_locklayer=1
CEND

CNIF @#use_locklayer=0
  #use_locklayer=0
CEND

XINCLUDE "error.include.ab3"


#_LVOLockLayer           = -$60 ; -13*6+30
#_LVOUnLockLayer         = -$66 ; -14*6+30

#_LVOLockLayerInfo       = -$78 ; -17*6+30
#_LVOUnLockLayerInfo     = -$8a ; -20*6+30

#_LVOLockLayers          = -$6c ; -15*6+30
#_LVOUnLockLayers        = -$72 ; -16*6+30

#_LVOLockLayerROM        = -$1b0 ;-68*6+30
#_LVOUnLockLayerROM      = -$1b6 ;-69*6+30

#_LVOAttemptLockLayerROM = -$28e ; -105*6+30

NEWTYPE.locklayerengine
patched_layer.l
*layerbase.Library
End NEWTYPE

DEFTYPE.locklayerengine locklayerengine

USEPATH locklayerengine
locklayer_locked.l = False
locklayer_sum.l    = 0
locklayer_count.l  = 0
locklayerengine\patched_layer = False
locklayerengine\layerbase     = 0




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: PatchLayer {}                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ #_LVOLockLayer           = -$60 ; -13*6+30                                  /
;/ #_LVOUnLockLayer         = -$66 ; -14*6+30                                  /
;/ #_LVOLockLayerInfo       = -$78 ; -17*6+30                                  /
;/ #_LVOUnLockLayerInfo     = -$8a ; -20*6+30                                  /
;/ #_LVOLockLayers          = -$6c ; -15*6+30                                  /
;/ #_LVOUnLockLayers        = -$72 ; -16*6+30                                  /
;/ #_LVOLockLayerROM        = -$1b0 68*6+30                                    /
;/ #_LVOUnLockLayerROM      = -$1b6 69*6+30                                    /
;/ #_LVOAttemptLockLayerROM = -$28e ; -105*6+30                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement PatchLayer {}
SHARED locklayerengine
CNIF #use_locklayer
\layerbase = OpenLibrary_("layers.library",0)
If \layerbase
  Forbid_
  old_locklayers.l          = SetFunction_ (\layerbase,#_LVOLockLayers   ,?new_locklayers         )
  old_unlocklayers.l        = SetFunction_ (\layerbase,#_LVOUnLockLayers ,?new_unlocklayers       )
  Poke.l ?old_locklayers    ,old_locklayers
  Poke.l ?old_unlocklayers  ,old_unlocklayers
  Permit_
  locklayerengine\patched_layer=True
Else
  error {"Unable to patch layers.library !"}
End If
CEND
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: UnpatchLayer {}                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement UnpatchLayer{}
SHARED locklayerengine
CNIF #use_locklayer
If locklayerengine\patched_layer
  If \layerbase
    dummy.l = SetFunction_ (\layerbase  ,#_LVOLockLayers         ,Peek.l(?old_locklayers         ))
    dummy.l = SetFunction_ (\layerbase  ,#_LVOUnLockLayers       ,Peek.l(?old_unlocklayers       ))
    CloseLibrary_ \layerbase : \layerbase = False
  End If
  locklayerengine\patched_layer=False
End If
CEND
End Statement

BRA skip_locklayer_asm
.new_locklayers
  MOVE.l a0,-(a7)
  MOVE.l locklayer_sum,a0
  ADD.l #1,(a0)
  MOVE.l locklayer_count,a0
  ADD.l #1,(a0)
  MOVE.l (a7)+,a0
  MOVE.l old_locklayers,-(a7)
RTS

.new_unlocklayers
  MOVE.l a0,-(a7)
  MOVE.l locklayer_sum,a0
  SUB.l #1,(a0)
  MOVE.l locklayer_count,a0
  ADD.l #1,(a0)
  MOVE.l (a7)+,a0
  MOVE.l old_unlocklayers,-(a7)
RTS
old_locklayers:          Dc.l 0
old_unlocklayers:        Dc.l 0
locklayer_sum:   Dc.l 0
locklayer_count: Dc.l 0
skip_locklayer_asm:
Poke.l ?locklayer_sum  ,&locklayer_sum
Poke.l ?locklayer_count,&locklayer_count




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !UnlockLayer                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro UnlockLayer
CNIF #use_locklayer
EndIf
CEND
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: UnlockLayer {}                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement UnlockLayer {}
SHARED locklayer_sum.l,locklayer_locked.l
If locklayer_locked
  locklayer_locked = False
Else
  error {"UnlockLayer() without LockLayer() !"}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !LockLayer                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro LockLayer
CNIF #use_locklayer
MOVE.l locklayer_sum,a0
MOVE.l (a0),d0
layercheck.l = PutRegD0
If layercheck=0
CEND
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = LockLayer {@win.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - win.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l LockLayer {@win.l}
SHARED locklayer_sum.l,locklayer_locked.l
If locklayer_locked
  error {"Called LockLayer() twice !"}
  UnlockLayer{}
End If

CNIF #use_locklayer
If locklayer_sum = 0
  locklayer_locked = True
  succ.l=True
Else
  succ=False
End If
CELSE
  succ.l=True
CEND

Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: FreeLayer {}                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FreeLayer {}
UnpatchLayer{}
End Statement

!autoexit{FreeLayer}

CNIF #__include=0
PatchLayer{}
  NPrint "Press F1 to quit !"
  NPrint "..."
  While RawStatus(80) = False
    Delay_ 10
    NPrint Chr$(11),"LockLayer(): called ",locklayer_count," times, lock count=",locklayer_sum
  Wend

UnpatchLayer{}

End
CEND

