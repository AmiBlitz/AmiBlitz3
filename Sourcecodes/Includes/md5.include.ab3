; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "md5Demo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 14
; LabelSearch     = "proj"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 1
; Max GadgetList  = 1
; Max Queue       = 1
; Max Screen      = 2
; Max Shape       = 1
; Max CopList     = 1
; Max Sprite      = 1
; Max Stencil     = 1
; Max Module      = 1
; Max Window      = 30
; Max Anim        = 1
; Max Sound       = 1
; Max Bank        = 1
; Max Buffer      = 1
; Max BitMap      = 1
; Max Slice       = 1
; Max Page        = 1
; Max Tape        = 1
; Max IntuiFont   = 12
; Max MedModule   = 1
; Max Palette     = 1
; Max MenuList    = 1
; Max BlitzFont   = 1
; Max GTList      = 30
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: md5.include                                                           /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 27/12/2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements:  Amiblitz2.4                                                  /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Provide md5 checksum functionality to AB2.                                  /
;/                                                                             /
;/ Abstract:                                                                   /
;/ With this include, you can easily calculate the md5 checksum of a file, a:: /
;/  string or memory block.                                                    /
;/ The data can be also distributed over several blocks.                       /
;/                                                                             /
;/ Background:                                                                 /
;/ The md5 checksum (or often called hash value) is a 128 bit value, that is:: /
;/  calculated out of any data block of any size.                              /
;/ The same data block will result in the same md5 code, but a (even slightl:: /
;/ y) different data block will result in a different md5 code.                /
;/ However, two different data blocks can result theoretically in the same m:: /
;/ d5 code, but this is considered as very very unlikely.                      /
;/                                                                             /
;/ The md5 checksum is often used as a finger print of a file (e.g. in file :: /
;/ sharing clients), or to check if two files are identical without comparin:: /
;/ g the whole data bytewise.                                                  /
;/ It can also be used for hash tables, as the value is considered to be ver:: /
;/ y unique.                                                                   /
;/ As the md5 checksum is a so called "one way function", it is extremely di:: /
;/ fficult to "fake" a file to result in a certain md5 code, which makes it :: /
;/ interesting for security/encryption applications.                           /
;/                                                                             /
;/ Compared to the CRC32 checksum, it is much more unique and harder to fake:: /
;/ . However, it is 4 times bigger and takes much more calculation time. The:: /
;/  implementation in this inlcude is also far from being optimized fro speed. /
;/                                                                             /
;/ User Constants:   none                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
SYNTAX 2
OPTIMIZE 7
CEND

XINCLUDE "error.include.ab3"
XINCLUDE "file.include.ab3"

NEWTYPE.md5engine
r.l[64]
k.l[64]
lb.l[32]
wb.l[16]
h.l[4]
md5.l[4]
bytelength.l
is_init.l
is_done.l
buffer_free.l
End NEWTYPE

DEFTYPE.md5engine md5engine
USEPATH md5engine

\r[ 0] =  7
\r[ 1] = 12
\r[ 2] = 17
\r[ 3] = 22
\r[ 4] =  7
\r[ 5] = 12
\r[ 6] = 17
\r[ 7] = 22
\r[ 8] =  7
\r[ 9] = 12
\r[10] = 17
\r[11] = 22
\r[12] =  7
\r[13] = 12
\r[14] = 17
\r[15] = 22
\r[16] =  5
\r[17] =  9
\r[18] = 14
\r[19] = 20
\r[20] =  5
\r[21] =  9
\r[22] = 14
\r[23] = 20
\r[24] =  5
\r[25] =  9
\r[26] = 14
\r[27] = 20
\r[28] =  5
\r[29] =  9
\r[30] = 14
\r[31] = 20
\r[32] =  4
\r[33] = 11
\r[34] = 16
\r[35] = 23
\r[36] =  4
\r[37] = 11
\r[38] = 16
\r[39] = 23
\r[40] =  4
\r[41] = 11
\r[42] = 16
\r[43] = 23
\r[44] =  4
\r[45] = 11
\r[46] = 16
\r[47] = 23
\r[48] =  6
\r[49] = 10
\r[50] = 15
\r[51] = 21
\r[52] =  6
\r[53] = 10
\r[54] = 15
\r[55] = 21
\r[56] =  6
\r[57] = 10
\r[58] = 15
\r[59] = 21
\r[60] =  6
\r[61] = 10
\r[62] = 15
\r[63] = 21

\k[ 0] = $d76aa478
\k[ 1] = $e8c7b756
\k[ 2] = $242070db
\k[ 3] = $c1bdceee
\k[ 4] = $f57c0faf
\k[ 5] = $4787c62a
\k[ 6] = $a8304613
\k[ 7] = $fd469501
\k[ 8] = $698098d8
\k[ 9] = $8b44f7af ; (T_MASK ^ 0x74bb0850)
\k[10] = $ffff5bb1 ; (T_MASK ^ 0x0000a44e)
\k[11] = $895cd7be ; (T_MASK ^ 0x76a32841)
\k[12] = $6b901122
\k[13] = $fd987193 ; (T_MASK ^ 0x02678e6c)
\k[14] = $a679438e ; (T_MASK ^ 0x5986bc71)
\k[15] = $49b40821
\k[16] = $f61e2562 ; (T_MASK ^ 0x09e1da9d)
\k[17] = $c040b340 ; (T_MASK ^ 0x3fbf4cbf)
\k[18] = $265e5a51
\k[19] = $e9b6c7aa ; (T_MASK ^ 0x16493855)
\k[20] = $d62f105d ; (T_MASK ^ 0x29d0efa2)
\k[21] = $02441453
\k[22] = $d8a1e681 ; (T_MASK ^ 0x275e197e)
\k[23] = $e7d3fbc8 ; (T_MASK ^ 0x182c0437)
\k[24] = $21e1cde6
\k[25] = $c33707d6 ; (T_MASK ^ 0x3cc8f829)
\k[26] = $f4d50d87 ; (T_MASK ^ 0x0b2af278)
\k[27] = $455a14ed
\k[28] = $a9e3e905 ; (T_MASK ^ 0x561c16fa)
\k[29] = $fcefa3f8 ; (T_MASK ^ 0x03105c07)
\k[30] = $676f02d9
\k[31] = $8d2a4c8a ; (T_MASK ^ 0x72d5b375)
\k[32] = $fffa3942 ; (T_MASK ^ 0x0005c6bd)
\k[33] = $8771f681 ; (T_MASK ^ 0x788e097e)
\k[34] = $6d9d6122
\k[35] = $fde5380c ; (T_MASK ^ 0x021ac7f3)
\k[36] = $a4beea44 ; (T_MASK ^ 0x5b4115bb)
\k[37] = $4bdecfa9
\k[38] = $f6bb4b60 ; (T_MASK ^ 0x0944b49f)
\k[39] = $bebfbc70 ; (T_MASK ^ 0x4140438f)
\k[40] = $289b7ec6
\k[41] = $eaa127fa ; (T_MASK ^ 0x155ed805)
\k[42] = $d4ef3085 ; (T_MASK ^ 0x2b10cf7a)
\k[43] = $04881d05
\k[44] = $d9d4d039 ; (T_MASK ^ 0x262b2fc6)
\k[45] = $e6db99e5 ; (T_MASK ^ 0x1924661a)
\k[46] = $1fa27cf8
\k[47] = $c4ac5665 ; (T_MASK ^ 0x3b53a99a)
\k[48] = $f4292244 ; (T_MASK ^ 0x0bd6ddbb)
\k[49] = $432aff97
\k[50] = $ab9423a7 ; (T_MASK ^ 0x546bdc58)
\k[51] = $fc93a039 ; (T_MASK ^ 0x036c5fc6)
\k[52] = $655b59c3
\k[53] = $8f0ccc92 ; (T_MASK ^ 0x70f3336d)
\k[54] = $ffeff47d ; (T_MASK ^ 0x00100b82)
\k[55] = $85845dd1 ; (T_MASK ^ 0x7a7ba22e)
\k[56] = $6fa87e4f
\k[57] = $fe2ce6e0 ; (T_MASK ^ 0x01d3191f)
\k[58] = $a3014314 ; (T_MASK ^ 0x5cfebceb)
\k[59] = $4e0811a1
\k[60] = $f7537e82 ; (T_MASK ^ 0x08ac817d)
\k[61] = $bd3af235 ; (T_MASK ^ 0x42c50dca)
\k[62] = $2ad7d2bb
\k[63] = $eb86d391 ; (T_MASK ^ 0x14792c6e)


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = _md5_rol {dat.l,value.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - dat.l    : ???                                                            /
;/ - value.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l _md5_rol {dat.l,value.l}
UNLK a4
ROL.l d1,d0
RTS
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !_md5_rol {dat.l,value.l}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - dat.l    : ???                                                            /
;/ - value.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _md5_rol ; {dat.l,value.l}
GetReg d1,value
GetReg d0,dat
ROL.l d1,d0
value = PutRegD0
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: md5_FlipEndian {sourceaddr.l,destaddr.l,llength.l}                  /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - llength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement md5_FlipEndian{sourceaddr.l,destaddr.l,llength.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
orderloop:
MOVE.l (a0)+,d0
MOVE.b d0,(a1)
LSR.l #8,d0
MOVE.b d0,1(a1)
LSR.l #8,d0
MOVE.b d0,2(a1)
LSR.l #8,d0
MOVE.b d0,3(a1)
ADD.l #4,a1
SUB.l #1,d2
BGT orderloop
RTS
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l =  md5_LFlip {value.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/ Convert a 32bit value big <-> little endian.                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - value.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST md5_LFlip {value.l}
md5_FlipEndian{&value,&value,1}
Function Return value
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: md5_Init {}                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/ Reset and prepare to calculate a new md5 code (is done automatically).      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement md5_Init{}
SHARED md5engine
\h[0] = $67452301
\h[1] = $EFCDAB89
\h[2] = $98BADCFE
\h[3] = $10325476
\is_init     = True
\is_done     = False
\bytelength  = 0
\buffer_free = 64
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: md5_Add {dataptr.l,bytelength.l,@nofinish.l}                        /
;/                                                                             /
;/ Description:                                                                /
;/ Collect data and add it to the unfinished md5 code. You can ignore the no:: /
;/ finish.l parameter.                                                         /
;/ NOTE: This can be any byte size from 0 to 2^31, does not have to be a mul:: /
;/ tiple of 64)                                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - dataptr.l     : pointer to a memory block                                 /
;/ - bytelength.l  : byte length of memory block                               /
;/ - nofinish.l    : 0 indicates that this is the last block to add            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement md5_Add {dataptr.l,bytelength.l,@nofinish.l}
SHARED md5engine
If \is_init = False Then md5_Init{}

Repeat
  cpylength.l = Min(bytelength,\buffer_free)

  If cpylength>0
    CopyMem_ dataptr,&\lb[0]+64-\buffer_free,cpylength
    \buffer_free - cpylength
    dataptr      + cpylength
    bytelength   - cpylength
    \bytelength  + cpylength
  End If

  If \buffer_free = 0
    rounds.l=1
    \buffer_free = 64
  Else
    If nofinish = False
      \is_done = True
      \is_init = False

      bitlengthLO.l = \bytelength LSL 3
      bitlengthHI.l = \bytelength LSR 29

      For n.l=64-\buffer_free+1 To 63 : Poke.b &\lb[0]+n,0 : Next

      Poke.b &\lb[0] + 64-\buffer_free,%10000000

      If \buffer_free>=9
        \lb[14] = md5_LFlip{bitlengthLO}
        \lb[15] = md5_LFlip{bitlengthHI}
        rounds.l    = 1
      Else
        \lb[30] = md5_LFlip{bitlengthLO}
        \lb[31] = md5_LFlip{bitlengthHI}
        rounds.l    = 2
      End If
    Else
      rounds = 0
      If bytelength><0 Then error{"Bytelength >< 0 but buffer not filled!"}
    End If
  End If

  blockptr.l = &\lb[0]
  For n.l = 1 To rounds
    md5_FlipEndian{blockptr,&\wb[0],16}

    a.l = \h[0]
    b.l = \h[1]
    c.l = \h[2]
    d.l = \h[3]

    For i.l = 0 To 63
      If (i<=15)
        f.l = (b & c) | ((NOT(b)) & d)
        g.l = i
      Else
        If (i<=31)
          f.l = (d & b) | ((NOT(d)) & c)
          g.l = (5*i + 1) MOD 16
        Else
          If (i<=47)
            f.l = Xor(Xor(b,c),d)
            g.l = (3*i + 5) MOD 16
          Else
            f.l = Xor(c, b | (NOT(d)) )
            g.l = (7*i) MOD 16
          End If
        End If
      End If

      temp.l = d
      d = c
      c = b
      b + _md5_rol { ( a + f + \k[i] + \wb[g] ) , \r[i] }
      a = temp
    Next

    \h[0] + a
    \h[1] + b
    \h[2] + c
    \h[3] + d

    blockptr.l + 64
  Next

Until bytelength = 0

If \is_done
  md5_FlipEndian{&\h[0],&\md5[0],4}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  md5.s = md5_Finalize {}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ Return the md5 checksum that has been calculated.                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - md5.s     : hex code of a 128 bit md5 value (12 digits)                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s md5_Finalize{}
SHARED md5engine
If \is_done=False Then md5_Add{0,0,False}
a.s = LCase$(Hex$(\md5[0])+Hex$(\md5[1])+Hex$(\md5[2])+Hex$(\md5[3]))
Function Return a.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  md5.s = md5_FromMem {message.l,bytelength.l}                       /
;/                                                                             /
;/ Description:                                                                /
;/ Calculate the md5 checksum of a memory buffer.                              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - message.l    : pointer to a memory block                                  /
;/ - bytelength.l    : byte length of memory block                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - md5.s     : hex code of a 128 bit md5 value (12 digits)                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s md5_FromMem{message.l,bytelength.l}
SHARED md5engine
md5_Init {}
md5_Add {message,bytelength,False}
Function Return md5_Finalize{}
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  md5.s = md5_FromString {string.s}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Calculate the md5 checksum of an AB2 string.                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - string.s    : AB2 string                                                  /
;/                                                                             /
;/ Result:                                                                     /
;/ - md5.s     : hex code of a 128 bit md5 value (12 digits)                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s md5_FromString{string.s}
SHARED md5engine
md5_Init {}
md5_Add {&string.s,FLen(string.s),False}
Function Return md5_Finalize{}
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  md5.s = md5_FromFile {filename.s}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Calculate the md5 checksum of a file.                                       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : file name                                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - md5.s     : hex code of a 128 bit md5 value (12 digits)                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s md5_FromFile{filename.s}
md5.s = ""
err.l = False
dos.l = file_Open{filename.s,#file_read}
md5_Init{}
If dos>=0
  bytelength.l = file_GetLength{dos}
  membuff.l = AllocVec_(Min($8000,bytelength),#MEMF_ANY)
  If membuff
    Repeat
      chunk.l = Min(bytelength,$8000)
      If file_ReadMem{dos,membuff,chunk}
        bytelength - chunk
        md5_Add{membuff,chunk}
      Else
        bytelength = 0
        err=True
      End If
    Until bytelength = 0

    FreeVec_ membuff : membuff = 0
    If err=False Then md5.s = md5_Finalize{}
  End If
  file_Close{dos}
End If
Function Return md5.s
End Function

; Example
CNIF #__include=0
message.s = "Franz jagt im komplett verwahrlosten Taxi quer durch Bayern"
NPrint "\\nmessage: ",message.s
NPrint "md5 code BB2 : ",md5_FromString{message.s}
NPrint "md5 code real: a3cca2b2aa1e3b5b3b5aad99a8529074"

message.s = "hallo"
NPrint "\\nmessage: ",message.s
NPrint "md5 code BB2 : ",md5_FromMem{&message.s,FLen(message)}
NPrint "md5 code real: 598d4c200461b81522a3328565c25f7c"

NPrint "\\nmessage: \\22\\22 (empty string)"
NPrint "md5 code BB2 : ",md5_FromMem{0,0}
NPrint "md5 code leer: d41d8cd98f00b204e9800998ecf8427e"

md5.s = md5_FromFile{""}

NPrint "\\nFile: ",ASL_file.s,": ",md5.s

Delay_ 200
End

CEND

