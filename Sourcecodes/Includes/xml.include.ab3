; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "Empty"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 4
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 24
; CursorColumn    = 27
; LabelSearch     = "pre"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: xml.include                                                           /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 08/01/2008                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
XINCLUDE "file.include.ab3"

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = xml_Read {filename.s}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l xml_Read{filename.s}
fid.l = file_Open{filename.s,#file_read,"xml"}
Function Return fid
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: xml_Close {fid.l}                                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement xml_Close{fid.l}
file_Close{fid}
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = xml_ReadTag {fid.l}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Read till the next tag is found and return the tag name.                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : file id                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s : tag name                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s xml_ReadTag{fid.l}
xmlreadtagtryagain:
tagname.s = ""

Repeat
  c.b = file_ReadByte{fid}
Until c=@"<" OR file_EOF{fid}=True

breakme.l = False
Repeat
  c.b = file_ReadByte{fid}
  Select c.b
   Case @" "
     If tagname.s><"" Then breakme = True
   Case 10
     If tagname.s><"" Then breakme = True
   Case @"="
     If tagname.s><"" Then breakme = True
   Case @">"
     breakme = True
   Case @"/"
     If tagname.s><"" Then breakme = True : Else tagname.s = "/"
   Default
     If c.b>32 OR c.b<-1 Then tagname.s + Chr$(c)
  End Select
Until breakme=True OR file_EOF{fid} = True

;If tagname.s = "!--" Then Goto xmlreadtagtryagain
If tagname.s = "" AND file_EOF{fid} = False Then Goto xmlreadtagtryagain
Function Return tagname.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = xml_ReadParamName {fid.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ Read till the next parameter name of the previous found tag.                /
;/ Note: This function returns an empry string, if the tag contains no more :: /
;/ parameters.                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : file id                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s : parameter name                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s xml_ReadParamName{fid.l}
breakme.l = False
paramname.s = ""
space.l = False
Repeat
c.b = file_ReadByte{fid}
Select c.b
 Case @" "
   If paramname.s><"" Then space = True
 Case 10
   If paramname.s><"" Then breakme = True
 Case @"="
   If paramname.s><"" Then breakme = True
 Case @">"
   breakme = True  : file_SeekRel{fid,-1}
; Case @"/"
   ;breakme = True
 Default
   If space=False
     If c.b>32 OR c.b<-1 Then paramname.s + Chr$(c)
   Else
     file_SeekRel{fid,-1}
     breakme = True
   End If
End Select
Until breakme=True OR file_EOF{fid} = True
Function Return paramname.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = xml_ReadParamString {fid.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ Get the parameter value as a string from the previous found parameter.      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : file id                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s : string value                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s xml_ReadParamString{fid.l}
quoted.l = 0
quoted2.l = 0
breakme.l = False
string.s = ""
Repeat
c.b = file_ReadByte{fid}
Select c.b
 Case $22
   If quoted2=0
     quoted=1-quoted
     If quoted=0 Then breakme=True
   Else
     string.s + Chr$(c)
   End If
 Case @"'"
   If quoted=0
     quoted2=1-quoted2
     If quoted2=0 Then breakme=True
   Else
     string.s + Chr$(c)
   End If
 Case @" "
   If quoted=False AND quoted2=False
     If string.s><"" Then breakme = True
   Else
     string.s + " "
   End If
 Case 10
   If quoted=False AND quoted2=False Then breakme = True : Else string.s + " "
 Case @"/"
   If quoted=False AND quoted2=False Then breakme = True : Else string.s + "/"
 Case @">"
   If quoted=False AND quoted2=False Then breakme = True : file_SeekRel{fid,-1} : Else string.s + ">"
 Default
   If c><0 Then string.s + Chr$(c)
End Select
Until breakme=True OR file_EOF{fid} = True
Function Return string.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = xml_ReadParamValue {fid.l,@minVal.l,@maxVal.l}          /
;/                                                                             /
;/ Description:                                                                /
;/ Get the parameter value as 32bit integer from the previous found parameter. /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : file id                                                        /
;/ - minVal.l    : ???                                                         /
;/ - maxVal.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l : parameter value                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l xml_ReadParamValue{fid.l,@minVal.l,@maxVal.l}
s.s = xml_ReadParamString{fid}
If Peek.b(&s.s) = @"@" Then long.l = Cvl(Right$(s.s,4)) : Else long = Vallong(s.s)
If LCase$(s.s) = "on"    Then long = True
If LCase$(s.s) = "yes"   Then long = True
If LCase$(s.s) = "true"  Then long = True
If LCase$(s.s) = "off"   Then long = False
If LCase$(s.s) = "no"    Then long = False
If LCase$(s.s) = "false" Then long = False
If minVal><-1 Then If long<minVal Then long=minVal
If maxVal><-1 Then If long>maxVal Then long=maxVal
Function Return long
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.f = xml_ReadParamFloat {fid.l,@minVal.f,@maxVal.f}          /
;/                                                                             /
;/ Description:                                                                /
;/ Get the parameter value as 32bit float from the previous found parameter.   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : file id                                                        /
;/ - minVal.f    : ???                                                         /
;/ - maxVal.f    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.f : parameter float                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.f xml_ReadParamFloat{fid.l,@minVal.f,@maxVal.f}
float.f=  Val(xml_ReadParamString{fid})
If minVal><-1 Then If float<minVal Then float=minVal
If maxVal><-1 Then If float>maxVal Then float=maxVal
Function Return float
End Function


