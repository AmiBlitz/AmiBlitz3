; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "AmiblitzDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 3
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 50
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 50
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 50
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: amiblitz.include                                                      /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 11.03.2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements: Amiblitz2.4, file.include, tui.include                        /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Scan through Blitzlibs and find tokens. * private *                         /
;/                                                                             /
;/ Abstract:                                                                   /
;/ This include can be used to search for tokens (Functions and Statements) :: /
;/ within Blitzlibs files (also Deflibs or Acidlibs).                          /
;/ It has some functions to add the found tokens to the texteditor gadget of:: /
;/  TUI (texteditor.include).                                                  /
;/ The include is very specialized and probably not very useful for you. How:: /
;/ ever, you can check out how I scan through the Blitzlibs, maybe this is i:: /
;/ nteresting for you.                                                         /
;/                                                                             /
;/ Note: The scanning of the Blitzlibs is not 100% perfect. It is not based :: /
;/ on original Blitzbasic source code.                                         /
;/ Note: This include is only used by TuiTED so far, when TuiTED does the sc:: /
;/ anning for blitzlibs.                                                       /
;/                                                                             /
;/ User Constants:    none                                                     /
;/                                                                             /
;/ Example:                                                 none               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
SYNTAX 2
OPTIMIZE 7
XINCLUDE "error.include.ab3"
error {"This include has no internal demo!"}
End
CELSE

XINCLUDE "file.include.ab3"
XINCLUDE "tui.include.ab3"


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.l = ab2_ReadSysLib {dos.l,libnum.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - dos.l    : file handle returned by file_open from file.include            /
;/ - libnum.l    : library id that has to be determined earlier, e.g. ab2_ge:: /
;/ tlib                                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.l     : -1 if everything went well, 0 if it failed                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ab2_ReadSysLib{dos.l,libnum.l}
succ.l = True
done.l = False
tokenid.l = 0
Repeat
  help.s = ""
  token.s = ""
  ;succ&file_ReadMem{dos,&dummyb.b,1}
  dummyb.b = file_ReadByte{dos}
  If dummyb=-1;!UBYTE{$ff}            ;now look for 6 or 7 0's
    ;succ&file_ReadMem{dos,&dummyb,1}
    dummyb = file_ReadByte{dos}
    If dummyb=-1;!UBYTE{$ff}            ;in system libs, $FFFF means end of command list
      ;succ&file_ReadMem{dos,&dummyb,1}
      dummyb = file_ReadByte{dos}
      If dummyb=0
        done=1
      EndIf
    Else
      If dummyb=0            ;OK, now check for at least 6 $00's
        gonext.b=0
        For i.l = 1 To 5
          ;succ&file_ReadMem{dos,&dummyb,1}
          dummyb = file_ReadByte{dos}
          If dummyb<>0 Then gonext.b=1
        Next
        If gonext=0
          gotall.b=0
          tokenid+1
          ;succ&file_ReadMem{dos,&dummyb,1}
          dummyb = file_ReadByte{dos}
          If dummyb = 0  ;sometimes there is one more $00
            succ&file_ReadMem{dos,&dummyb,1}
          EndIf
          token.s+Chr$(dummyb)         ;now we read the command string
          Repeat

            ;succ&file_ReadMem{dos,&dummyb,1}
            dummyb = file_ReadByte{dos}
            If dummyb>35 AND dummyb<126 ;alphabetic character?
              token.s+Chr$(dummyb)
            Else
              gotall=1
            EndIf
          Until gotall

          If (dummyb&$FF)>31 Then help.s + Chr$(dummyb&$FF)
          Repeat        ;chuck the "help" stuff
            ;succ&file_ReadMem{dos,&dummyb,1}
            dummyb = file_ReadByte{dos}
            If (dummyb&$FF)>31 Then help.s + Chr$(dummyb&$FF)
          Until dummyb=0 OR dummyb=-1;!UBYTE{$ff}
          succ&file_SeekRel{dos,-1}
          ;If token.s><"" Then error{"Token "+Str$(tokenid)+": "+token.s+" "+help.s}

          If token.s><"" Then ted_addtoken_ab2{token.s,libnum.l,tokenid,help.s}
        EndIf
      EndIf
    EndIf
  Else
    If dummyb=0 Then If file_EOF{dos} Then done=1 : error{"Read over EOF ! seekpos="+Str$(file_GetSeekPos{dos})+" / length="+Str$(file_GetLength{dos})}
  EndIf
Until done
Function Return tokenid
End Function


#ab2_okx = $000003F3
#ab2_ok1 = $000003E9
#ab2_ok2 = $004E7500


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.l = ab2_ReadAB2Lib {dos.l,libnum.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/ Read the next token out of a blitzlib and add the token to the texteditor:: /
;/  engine.                                                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - dos.l    : file handle returned by file_open from file.include            /
;/ - libnum.l    : library id that has to be determined earlier, e.g. ab2_ge:: /
;/ tlib                                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.l     : -1 if everything went well, 0 if it failed                   /
;/ Some blitzlibs are wired coded, and the last tokens can be not found.       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ab2_ReadAB2Lib{dos.l,libnum.l}
succ.l     = True
done.l     = 0
firstcmd.b = 0
tokenid.l   = 0
Repeat
  token.s = ""
  help.s = ""
  ;succ&file_ReadMem{dos,&dummyb.b,1}
  dummyb.b = file_ReadByte{dos}
  If dummyb=-1;!UBYTE{$ff} ; 255
    ;succ&file_ReadMem{dos,&dummyb,1}
    dummyb = file_ReadByte{dos}
    If dummyb=-1;!UBYTE{$ff}                 ;aha, two $FF's !
      For i.l = 1 To 6         ;now the 6 $00's ?
        ;succ&file_ReadMem{dos,&dummyb,1}
        dummyb = file_ReadByte{dos}
        If dummyb<>0 Then done=1;:error{"END of Lib 0!"}  ;nope, must be the end of the command list!

      Next

      If done = 0
        gotall.b=0
        ;succ.l = file_ReadMem{dos,&dummyb,1}
        dummyb = file_ReadByte{dos}
        If dummyb = 0 OR dummyb=@"3"   ;another $00?
          done=1
          ;error{"End of lib 1"}
        Else
          If firstcmd=0 Then firstcmd=1
          If dummyb>35 Then token.s+Chr$(dummyb)
        EndIf

        If done=0       ;here we read the actual command string
          tokenid+1
          Repeat
            ;succ&file_ReadMem{dos,&dummyb,1}
            dummyb = file_ReadByte{dos}
            ;If succ
              If dummyb>35 AND dummyb<126
                token.s+Chr$(dummyb)
              Else
                gotall=1
              EndIf
            ;Else
             ; gotall=1
            ;End If
          Until gotall
          ;If patchem
          ;  temp$=cmd$
          ;  Gosub patchcheck
          ;  cmd$=temp$
          ;EndIf
          ;Gosub printcmd
          If (dummyb&$FF)>31 Then help.s + Chr$(dummyb&$FF)
          Repeat        ;chuck the "help" stuff
            ;succ&file_ReadMem{dos,&dummyb,1}
            dummyb = file_ReadByte{dos}
            If (dummyb&$FF)>31 Then help.s + Chr$(dummyb&$FF)
            ;If succ Then help.s + Chr$(dummyb):Else dummyb=$ff
          Until dummyb=0 OR dummyb=-1;!UBYTE{$ff}
          If dummyb=-1;!UBYTE{$ff}
            succ&file_SeekRel{dos,-1}
            done.l = 1
           ; error{"End of lib 2!"}
          EndIf
        EndIf
      EndIf
    EndIf
  Else
    If (dummyb>64 AND dummyb<91)  ;first letter will be uppercase
      c.b=dummyb
      Repeat
        token.s+Chr$(c)
        ;succ&file_ReadMem{dos,&c,1}
        c = file_ReadByte{dos}
      Until c<32 OR c>122

      If c=0
        Repeat        ;chuck the "help" stuff
          ;succ&file_ReadMem{dos,&dummyb,1}
          dummyb = file_ReadByte{dos}
          If (dummyb&$FF)>31 Then help.s + Chr$(dummyb&$FF)
          ;help.s + Chr$(dummyb)
        Until (dummyb<32 OR dummyb>122) OR succ=False
        If dummyb=-1;!UBYTE{$ff}
          succ&file_SeekRel{dos,-1}
         ; done = 1
          ;error{"End of lib 3!"}
        EndIf
      EndIf

      If c<>0 OR Len(token.s)<3
        token.s=""
        If c=-1;!UBYTE{$ff}
          succ&file_SeekRel{dos,-1}
          ;done=1
          ;error{"End of lib 4!"}
        EndIf
      EndIf
    EndIf
    If token.s<>""  ;hidden token found!
      If firstcmd=0 Then firstcmd=1
      tokenid+1
    EndIf
    ;tokenid+1  ; allow empty tokens !
  EndIf
;  If token.s><"" Then error{"Libs: "+Str$(libnum)+file_GetName{dos}+" Token "+Str$(tokenid)+": "+token.s+" "+help.s}

  If token.s><"" Then ted_addtoken_ab2{token.s,libnum,tokenid,help.s}
Until (done=1) OR (succ=False) OR file_EOF{dos}
Function Return tokenid
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ab2_GetLib {filename.s}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ Open a Blitzlib file and add all found tokens to the texteditor engine (t:: /
;/ exteditor.include).                                                         /
;/ Texteditor objects will now be able to highlight and tokenize AB2 sourcec:: /
;/ odes.                                                                       /
;/ The function calls ab2_read_ab2lib or ab2_read_syslib to read the tokens.   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : filename of a blitzlibs (or deflib or acidlib)            /
;/                                                                             /
;/ Bugs:                                                                       /
;/ Some blitzlibs are wired coded, and the last tokens can be not found.       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ab2_GetLib{filename.s}
SHARED te_ab2,ta_ab2()
fil.s = LCase$(dos_FilePart{filename.s})
ex.s  = LCase$(dos_GetExt{filename.s})
If fil.s><"dhandlerlib.obj" AND (ex.s="obj" OR ex.s="library1" OR ex.s="library2" OR ex.s="resource1" OR ex.s="library")

dos.l = file_Open{filename.s,#file_read}
If dos>=0
  file_Cache{dos}
  succ.l=file_ReadMem{dos,&dummy1.l,4}
  If dummy1><#ab2_okx Then succ.l=file_ReadMem{dos,&dummy1.l,4}
  ;error{"Lib opended: "+filename.s}
  If dummy1=#ab2_okx
    succ=file_SeekRel{dos,20}
    succ=file_ReadMem{dos,&dummy1.l,4}
    If dummy1=#ab2_ok1
      succ=file_SeekRel{dos,4}
      ;succ.l=file_ReadMem{dos,&dummyb.b,1}
      dummyb.b = file_ReadByte{dos}
      If dummyb=@"p"    ; ab2lib
       ; error{"Found a ab2 lib !"}
        ;succ=file_Seek{dos,28}
        succ=file_SeekRel{dos,-1}
        While file_EOF{dos}=False AND succ=True
          ;succ.l = file_ReadMem{dos,&dummyb,1}
          dummyb = file_ReadByte{dos}
          If dummyb=$70 AND succ=True ; was !UBYTE{$70}
            succ&file_ReadMem{dos,&dummy1.l,4}
            If dummy1=#ab2_ok2
              ;succ&file_ReadMem{dos,&dummyb,1}
              dummyb = file_ReadByte{dos}

              If dummyb><0
                libnum.l = dummyb & $FF
                ;error{filename.s+"> BLITZLibnum "+Str$(dummyb)+" at:"+Hex$(file_GetSeekPos{dos})}
                If te_ab2\libname[libnum]><""
                  checklib.s = te_ab2\libname[libnum]
                Else
                  checklib.s = ""
                  ;error{"Libclash: "+dos_FilePart{filename.s}+" and "+te_ab2\libname[libnum]+" share the same libnum: "+Str$(libnum)+" !"}
                End If
                ;If ta_ab2(libnum,1)="" Then te_ab2\libname[libnum]=""
                If dos_FilePart{filename.s} >< te_ab2\libname[libnum]
                If ab2_ReadAB2Lib{dos,libnum}
                  If checklib.s><""
                    error{"Libclash warning: "+dos_FilePart{filename.s}+" and "+te_ab2\libname[libnum]+" share the same libnum: "+Str$(libnum)+" !"}
                  Else
                    te_ab2\libname[libnum]=dos_FilePart{filename.s}
                  End If
                End If
                End If
              End If
              ;Else
              ;  error{"Libnum ist 0 !"}
              ;  succ.l = False
              ;End If
            Else
              ;error{"Dummy is nicht ok !"}
              ;succ.l = False
            End If
          Else
            ;error{"Dummy ist nicht $70 !"+Hex$(dummyb)+" - "+Str$(file_GetSeekPos{dos})}
            ;succ.l = False
          End If
        Wend
      Else              ; Sys Lib
        ;error{"Found a sys lib !"}
        succ&file_Seek{dos,37}
        ;succ.l&file_ReadMem{dos,&dummyb,1}
        count.l = 0
        dummyb=0
        While dummyb=0 AND count<12
          dummyb = file_ReadByte{dos}
          count+1
        Wend
        libnum.l = dummyb & $FF
        ;error{filename.s+"> SYSLibnum "+Str$(dummyb)+" at:"+Hex$(file_GetSeekPos{dos})}

        ;error{"Libnum : "+Str$(libnum)}
        ;te_ab2\libname[libnum]=dos_FilePart{filename.s}
        If te_ab2\libname[libnum]><""
          checklib.s = te_ab2\libname[libnum]
        Else
          checklib.s = ""
        End If

        If dos_FilePart{filename.s} >< te_ab2\libname[libnum]
         If ab2_ReadSysLib{dos,libnum}
          If checklib.s><""
            error{"Libclash warning: "+dos_FilePart{filename.s}+" and "+te_ab2\libname[libnum]+" share the same libnum: "+Str$(libnum)+"!"}
          Else
            te_ab2\libname[libnum]=dos_FilePart{filename.s}
          End If
         End If
        End If
      End If
    Else
      error{"Not a blitz lib 2!"+Hex$(dummy1)}
    End If
  Else
    error{"Not a blitz lib !"}
  End If
  file_Close{dos}
End If
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_AddAB2GetEm {path.s,@*ted.tuited}                               /
;/                                                                             /
;/ Description:                                                                /
;/ Read all blitzlibs found at path.s, optionally refresh the texteditor obj:: /
;/ ect.                                                                        /
;/ Libclashes (token and lib ID are the same) will cause an error message.     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - path.s    : dos path to your blitzlibs                                    /
;/ - *ted.tuited    : texteditor object that should display the progress and:: /
;/ recalculated after the blitzlibs are loaded                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_AddAB2GetEm{path.s,@*ted.tuited}
lock.l = Lock_(&path.s,#ACCESS_READ)
DEFTYPE.FileInfoBlock fib
If lock
  If Examine_ (lock,&fib)
    While ExNext_(lock,&fib)
      filename.s = dos_AddPart{path.s,Peek.s(&fib\fib_FileName)}
      If fib\fib_DirEntryType<0
        If *ted><-1 AND *ted><0 Then ted_draw_stat{*ted,"Reading..."+filename.s}
        ;error{"STAT: "+Hex$(ted)}
        ab2_GetLib{filename.s}
      Else
        ted_AddAB2GetEm{filename.s,*ted}
      End If
    Wend
  End If
  UnLock_ lock
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_AddAB2 {path.s,@*ted.tuited}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Add all AB2 tokens found in blitzlibs found in path.s to the texteditor e:: /
;/ ngine.                                                                      /
;/ This function calls ted_addab2_getem.                                       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - path.s    : dos path to your blitzlibs                                    /
;/ - *ted.tuited    : texteditor object that should display the progress and:: /
;/ recalculated after the blitzlibs are loaded                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_AddAB2{path.s,@*ted.tuited}
SHARED te_ab2,tl_ab2()
If te_ab2\is_init=False
  te_ab2\libname[0]="Internal"
  te_ab2\libname[1]="Internal"

  INCLUDE "amiblitz_tokens.ab3"
  ;ted_AddAB2GetEm{path.s,*ted}

  te_ab2\is_init = True
;  If *ted Then ted_settokenizing{*ted,#tokenize_ab2}
 ; For n.l = 0 To te_ab2\max_tokens-1
   ; a.s = Str$(n)+": "+tl_ab2(n)\name
   ; ted_insert_line{*ted,-1,&a.s}
;  Next
End If
End Statement

CEND

