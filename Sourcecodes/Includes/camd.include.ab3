; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "CamdDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 3
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: camd.include                                                          /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 11.03.2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements: camd.library, Amiblitz2.4                                     /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Provide camd functionality.                                                 /
;/                                                                             /
;/ Abstract:                                                                   /
;/ This include provides a function set to do midi I/O via camd.library, whi:: /
;/ ch is currently the only real standard way to do this, like AHI for audio.  /
;/                                                                             /
;/ The concept of camd is to connect to clusters (meetings points), where ap:: /
;/ plications can make a link to, which can be a receiving or a sending link:: /
;/ . if an applications sends midi data to a cluster via a sending link, all:: /
;/  applications that are connected with a receiving link will be signalled :: /
;/ and collect the midi data.                                                  /
;/ The camd clusters are referenced by a string name, e.g. "out.0" or "EMU10:: /
;/ K.0". The first application that establishes a link to a cluster will cre:: /
;/ ate it.                                                                     /
;/ There are special clusters with the actual midi drivers behind them, but :: /
;/ they can also be totally virtual and exchange midi data only between appl:: /
;/ ications, without a connection to the outer world.                          /
;/ The camd.include can have several links to several clusters, each called :: /
;/ a midiport. Each midiport can have a sender and/or a receiver link to a c:: /
;/ luster (they dont have to be necessarily the same cluster).                 /
;/                                                                             /
;/ There are also functions to browse through the available camd clusters an:: /
;/ d their connected applications. This way you can make a camd cluster sele:: /
;/ ction dialog.                                                               /
;/                                                                             /
;/ For more details about the concept of camd, read the documentation of the:: /
;/  camd.library found in Aminet.                                              /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_camdlinks   = 32                                                       /
;/ Number of midiports that can be used. The name is a bit missleading and s:: /
;/ hould be more like #max_midiports, but this name was already occupied.      /
;/                                                                             /
;/ Example:                                                                    /
;/ Connet to a camd cluster and send a midi event.                             /
;/                                                                             /
;/ __________________________________________________________________ snip!    /
;/ . XINCLUDE "camd.include.ab3"                                               /
;/ .                                                                           /
;/ . If camd_Init {"CAMDTest",0}                                               /
;/ .   If camd_AddSender {0,"My.out.0"}                                        /
;/ .   msg.MidiMsg = $90,$40,$7F,0,0  ; note_on event on channel 0             /
;/ .   camd_SendMsg{0,msg}                                                     /
;/ .   Delay_ 50                                                               /
;/ .   msg.MidiMsg = $80,$40,$0,0,0  ; note_off event on channel 0             /
;/ .   camd_SendMsg{0,msg}                                                     /
;/ . EndIf                                                                     /
;/ . End                                                                       /
;/ __________________________________________________________________ snip!    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
#;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
SYNTAX 2
OPTIMIZE 4
CEND


XINCLUDE "error.include.ab3"

CNIF @#max_camdlinks=0
#max_camdlinks = 32
CEND

NEWTYPE.MidiMsg
mm_Status.b
mm_Data1.b
mm_Data2.b
mm_Port.b
mm_Time.l
End NEWTYPE

NEWTYPE.MidiCluster
*mcl_Node.Node
mcl_Pad.w
*mcl_Receivers.List ; struct
*mcl_Senders.List   ; struct
mcl_PublicParticipants.w
mcl_Flags.w
End NEWTYPE


NEWTYPE.MidiNode
*mi_Node.Node
mi_ClientType.w
*mi_Image.Image
*mi_OutLinks.MinList   ; struct
*mi_InLinks.MinList    ;,MLH_SIZE
*mi_SigTask.Task
*mi_ReceiveHook.Hook
*mi_ParticipantHook.Hook
mi_ReceiveSigBit.b
mi_ParticipantSigBit.b
mi_ErrFilter.b
mi_Alignment.b
mi_TimeReference.l
mi_MsgQueueSize.l
mi_SysExQueueSize.l
End NEWTYPE

NEWTYPE.MidiLink
*ml_Node.Node
ml_Pad.w
*ml_OwnerNode.MinNode ; struct
*ml_MidiNode.MidiNode
ml_Location.l
ml_ClusterComment.l
ml_Flags.b
ml_PortID.b
ml_ChannelMask.w
ml_EventTypeMask.l
ml_SysExFilter.l
ml_ParserData.l
ml_UserData.l
End NEWTYPE
#CD_Linkages = 0

#MLTYPE_Receiver   = 0
#MLTYPE_Sender     = 1
#MLTYPE_NTypes     = 2

#ML_SENDER      = 1
#ML_PARTCHANGE  = 2
#ML_PRIVATELINK = 4
#ML_DEVICELINK  = 8

#x= #TAG_USER+65

#MLINK_Location      = #x +0
#MLINK_ChannelMask   = #x +1
#MLINK_EventMask     = #x +2
#MLINK_UserData      = #x +3
#MLINK_Comment       = #x +4
#MLINK_PortID        = #x +5
#MLINK_Private       = #x +6
#MLINK_Priority      = #x +7
#MLINK_SysExFilter   = #x +8
#MLINK_SysExFilterX  = #x +9
#MLINK_Parse         = #x +10
#MLINK_DeviceLink    = #x +11
#MLINK_ErrorCode     = #x +12
#MLINK_Name          = #x +13



#CCType_Sequencer       =   1
#CCType_SampleEditor    =   2
#CCType_PatchEditor     =   4
#CCType_Notator         =   8
#CCType_EventProcessor  =  16
#CCType_EventFilter     =  32
#CCType_EventRouter     =  64
#CCType_ToneGenerator   = 128
#CCType_EventGenerator  = 256
#CCType_GraphicAnimator = 512

#MIDI_Name         = #x +0
#MIDI_SignalTask   = #x +1
#MIDI_RecvHook     = #x +2
#MIDI_PartHook     = #x +3
#MIDI_RecvSignal   = #x +4
#MIDI_PartSignal   = #x +5
#MIDI_BufferSize   = #x +6
#MIDI_SysExSize    = #x +7
#MIDI_TimeStamp    = #x +8
#MIDI_ErrFilter    = #x +9
#MIDI_ClientType   = #x +10
#MIDI_Image        = #x +11
#MIDI_ErrorCode    = #x +12

#CMF_Note           =    1
#CMF_Prog           =    2
#CMF_PitchBend      =    4
#CMF_CtrlMSB        =    8
#CMF_CtrlLSB        =   16
#CMF_CtrlSwitch     =   32
#CMF_CtrlByte       =   64
#CMF_CtrlParam      =  128
#CMF_CtrlUndef      =  256
#CMF_Mode           =  512
#CMF_ChanPress      = 1024
#CMF_PolyPress      = 2048
#CMF_RealTime       = 4096
#CMF_SysCom         = 8192
#CMF_SysEx          = 8192*2

#CMF_Ctrl    = #CMF_CtrlMSB|#CMF_CtrlLSB|#CMF_CtrlSwitch|#CMF_CtrlByte|#CMF_CtrlParam|#CMF_CtrlUndef
#CMF_Channel = #CMF_Note | #CMF_Prog | #CMF_PitchBend | #CMF_Ctrl|#CMF_Mode|#CMF_ChanPress|#CMF_PolyPress
#CMF_All     = #CMF_Channel|#CMF_RealTime|#CMF_SysCom | #CMF_SysEx

#SXF_ModeBits    = $04
#SXF_CountBits   = $03
#SXFM_Off        = $00
#SXFM_1Byte      = $00
#SXFM_3Byte      = $04

#CMEF_MsgErr       = 1
#CMEF_BufferFull   = 2
#CMEF_SysExFull    = 4
#CMEF_ParseMem     = 8
#CMEF_RecvErr      =16
#CMEF_RecvOverflow =32
#CMEF_SysExTooBig  =64

#CMEF_All = #CMEF_MsgErr|#CMEF_BufferFull|#CMEF_SysExFull|#CMEF_SysExTooBig|#CMEF_ParseMem|#CMEF_RecvErr|#CMEF_RecvOverflow

#CME_NoMem       = 801
#CME_NoSignals   = 802
#CME_NoTimer     = 803
#CME_BadPrefs    = 804
#CME_NoUnit      = 820

#CMSG_Recv        = 0
#CMSG_Link        = 1
#CMSG_StateChange = 2
#CMSG_Alarm       = 3

#mev_noteoff= $80
#mev_note   = $90 ; $80 is noteoff
#mev_patouch= $A0
#mev_ctrl   = $B0
#mev_prgch  = $C0
#mev_matouch= $D0
#mev_pitch  = $E0
#mev_sysex  = $F0 ; END: F7
#mev_clock  = $F8
#mev_sense  = $FE ;



NEWTYPE.ClusterNotifyNode
cnn_Task.l
cnn_SigBit.b
cnn_pad1.b
cnn_pad2.b
cnn_pad3.b
End NEWTYPE


Dim camdtags.TagItem(50)
Dim camd_msglength.l(16)

;SHARED camd_msglength()

For n.l =0 To 15:camd_msglength(n)=0:Next

camd_msglength (#mev_noteoff LSR 4) = 3
camd_msglength (#mev_note    LSR 4) = 3
camd_msglength (#mev_patouch LSR 4) = 3
camd_msglength (#mev_ctrl    LSR 4) = 3
camd_msglength (#mev_prgch   LSR 4) = 2
camd_msglength (#mev_matouch LSR 4) = 2
camd_msglength (#mev_pitch   LSR 4) = 3
camd_msglength (#mev_sysex   LSR 4) = 0

NEWTYPE.camd
is_open.w
appname.s
signal.l
sigflag.l
sigfree.l
node_ptr.l
receiver_ptr.l[#max_camdlinks]
receiver_name.s[#max_camdlinks]
receiver_linkname.s[#max_camdlinks]
sender_ptr.l[#max_camdlinks]
sender_name.s[#max_camdlinks]
sender_linkname.s[#max_camdlinks]
in_msg.MidiMsg
*this_cluster.MidiCluster
*this_midilink.MidiLink
*this_midi.MidiNode
lock.l
End NEWTYPE


;DEFTYPE.camd camd
SHARED camd.camd
USEPATH camd


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: camd_Free {}                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ Free all resources associated with this include. This function is called :: /
;/ on autoexit.                                                                /
;/                                                                             /
;/ See also:    camd_Init                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement camd_Free {}
SHARED camd
;If \is_open
  For n.l = 0 To #max_camdlinks-1
    If \sender_ptr[n]
      RemoveMidiLink_ \sender_ptr[n] : \sender_ptr[n] = False
    End If
    If \receiver_ptr[n]
      RemoveMidiLink_ \receiver_ptr[n] : \receiver_ptr[n] = False
    End If
  Next
  If \node_ptr Then DeleteMidi_ \node_ptr : \node_ptr = False
  \is_open = False
  If \sigfree Then FreeSignal_ \signal : \signal = 0 : \sigfree=False
;End If
End Statement

!autoexit{camd_Free}

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.w = camd_Init {appname.s,timecounter_ptr.l,@sigtask.l,@sign:: /
;/ al.l,@sysexbuffersize.l}                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Init the camd system for your application. You have to provide an appname:: /
;/ , a pointer to a counter that is updated elsewhere, e.g. within an interr:: /
;/ upt.                                                                        /
;/ Optional you can provide a pointer to a Task structure of a task that sho:: /
;/ uld be signaled everytime there is a new midi message waiting. The singal:: /
;/  send can be given or it will be allocated automaticaly. Then, it can be :: /
;/ retrieved by camd_GetSigFlag.                                               /
;/ Note: signal.l is a signal number, NOT a sigflag. E.g. is signal is 4 the:: /
;/  sigflag = 1 LSL 4 = 16.                                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - appname.s    : name of your application                                   /
;/ - timecounter_ptr.l    : pointer to a timestamp counter                     /
;/ - sigtask.l    : pointer to the to-be-signaled task                         /
;/ - signal.l    : signal, if you dont want this to be allocated automaticall  /
;/ - sysexbuffersize.l    : ???                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.w     : -1 if everyting went well, 0 otherwise                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w camd_Init{appname.s,timecounter_ptr.l,@sigtask.l,@signal.l,@sysexbuffersize.l}
SHARED camd
SHARED camdtags()
succ.w = False
If sysexbuffersize<4096 Then sysexbuffersize = 128000
midibuffersize.l = 32000
If \is_open Then camd_Free {}
a.s = "camd.library"
camdbase.l = OpenLibrary_ (&a.s,37)
If camdbase
  \appname = appname.s
  n.l=0
  If sigtask = -1
    sigtask = FindTask_(0)
  End If

  If signal = -1
    \signal  = AllocSignal_(-1)
    \sigflag = 1 LSL (\signal)
    \sigfree = True
  Else
    \signal  = signal
    \sigflag = 1 LSL (\signal)
    \sigfree = False
  End If
  camd\this_midi = 0
  camd\this_cluster=0
  camd\this_midilink = 0
  camdtags(n)\ti_Tag = #MIDI_Name         ,&\appname                     : n+1
  camdtags(n)\ti_Tag = #MIDI_RecvSignal   ,\signal                       : n+1
  camdtags(n)\ti_Tag = #MIDI_BufferSize   ,midibuffersize                          : n+1
  camdtags(n)\ti_Tag = #MIDI_SysExSize    ,sysexbuffersize                   : n+1
  If timecounter_ptr Then camdtags(n)\ti_Tag = #MIDI_TimeStamp,timecounter_ptr  : n+1
  camdtags(n)\ti_Tag = #MIDI_ClientType   ,#CCType_Sequencer             : n+1
  camdtags(n)\ti_Tag = #MIDI_SignalTask   ,sigtask                             : n+1 ; by default
;  camdtags(n)\ti_Tag = #MIDI_RecvHook     ,0                             : n+1
;  camdtags(n)\ti_Tag = #MIDI_PartHook     ,0                             : n+1
;  camdtags(n)\ti_Tag = #MIDI_ErrFilter    ,0                             : n+1
;  camdtags(n)\ti_Tag = #MIDI_PartSignal   ,0                             : n+1
;  camdtags(n)\ti_Tag = #MIDI_Image        ,0                             : n+1
;  camdtags(n)\ti_Tag = #MIDI_ErrorCode    ,0                             : n+1
  camdtags(n)\ti_Tag = #TAG_END,0                                        : n+1
  \node_ptr = CreateMidiA_ (&camdtags(0)\ti_Tag)
  If \node_ptr
    succ=True
    \is_open = True
    For n.l = 0 To #max_camdlinks-1
      \sender_ptr[n]=False
      \receiver_ptr[n]=False
    Next
  Else
    error {"Can`t init the camd system !"}
  End If
  CloseLibrary_ (camdbase)
Else
  error {"Please install camd.libray 37.14+ !"}
End If
If succ=False Then camd_Free{}
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: camd_RemSender {mp.l}                                               /
;/                                                                             /
;/ Description:                                                                /
;/ Remove a sender link to the given midiport that was created by camd_add_s:: /
;/ ender.                                                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mp.l    : midiport [0...max_camdlinks-1]                                  /
;/                                                                             /
;/ See also:    camd_add_sender                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement camd_RemSender {mp.l}
SHARED camd
If mp>=0 AND mp<#max_camdlinks AND \is_open=True
  If \sender_ptr[mp]
    RemoveMidiLink_ \sender_ptr[mp] : \sender_ptr[mp] = False
  End If
End If
counter.l = 0
For n.l = 0 To #max_camdlinks-1
  If \receiver_ptr[n] Then counter+1
  If \sender_ptr[n] Then counter+1
Next
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: camd_RemReceiver {mp.l}                                             /
;/                                                                             /
;/ Description:                                                                /
;/ Remove a receiver link to the given midiport that was created by camd_add:: /
;/ _sender.                                                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mp.l    : midiport [0...max_camdlinks-1]                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement camd_RemReceiver {mp.l}
SHARED camd
If mp>=0 AND mp<#max_camdlinks AND \is_open=True
  If \receiver_ptr[mp]
    RemoveMidiLink_ \receiver_ptr[mp] : \receiver_ptr[mp] = False
  End If
End If
counter.l = 0
For n.l = 0 To #max_camdlinks-1
  If \receiver_ptr[n] Then counter+1
  If \sender_ptr[n] Then counter+1
Next
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.w = camd_AddSender {mp.l,clustername.s}                       /
;/                                                                             /
;/ Description:                                                                /
;/ Add a new sender link from the midiport to a cluster. This has to be done:: /
;/  successfully in order to be able to send on this midiport.                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mp.l    : midiport [0...max_camdlinks-1]                                  /
;/ - clustername.s    : name of the cluster you want to connect to             /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.w     : -1 if everything went well, 0 otherwise                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w camd_AddSender {mp.l,clustername.s}
SHARED camd
SHARED camdtags(),errorapp.s
If mp>=0 AND mp<#max_camdlinks AND clustername.s><""
 If \is_open = False Then succ.w = camd_Init {errorapp.s,0}
 If \is_open
  If \sender_ptr[mp] Then camd_RemSender{mp}
  n.l = 0
  \sender_name[mp] = clustername.s
  camdtags(n)\ti_Tag =#MLINK_Location      ,&\sender_name[mp]          : n+1
;  camdtags(n)\ti_Tag =#MLINK_ChannelMask   ,$ff                      : n+1
;  camdtags(n)\ti_Tag =#MLINK_EventMask     ,$ff                : n+1
;  camdtags(n)\ti_Tag =#MLINK_UserData                              : n+1
;  camdtags(n)\ti_Tag =#MLINK_Comment       ,&comment.s : n+1
  camdtags(n)\ti_Tag =#MLINK_PortID        ,mp                      : n+1
;  camdtags(n)\ti_Tag =#MLINK_Private                               : n+1
  camdtags(n)\ti_Tag =#MLINK_Priority      ,0                       : n+1
;  camdtags(n)\ti_Tag =#MLINK_SysExFilter                           : n+1
;  camdtags(n)\ti_Tag =#MLINK_SysExFilterX                          : n+1
  camdtags(n)\ti_Tag =#MLINK_Parse         ,True                    : n+1
;  camdtags(n)\ti_Tag =#MLINK_DeviceLink                            : n+1
;  camdtags(n)\ti_Tag =#MLINK_ErrorCode                             : n+1
  \receiver_linkname[mp] = \appname+" sending to "+clustername.s
  camdtags(n)\ti_Tag =#MLINK_Name, &\sender_linkname[mp]                                  : n+1
  camdtags(n)\ti_Tag = #TAG_END,0                                   : n+1
  \sender_ptr[mp] = AddMidiLinkA_ (\node_ptr,#MLTYPE_Sender,&camdtags(0)\ti_Tag)
  If \sender_ptr[mp]
    succ.w =True
  Else
    error {"Unable to establish MIDI send link to CAMD cluster "+clustername.s+" !"}
  End If
 Else
   error {"Unable to init CAMD system!"}
 End If
Else
  error {"Tried to open MIDIlink with invalid parameters !"}
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.w = camd_AddReceiver {mp.l,clustername.s}                     /
;/                                                                             /
;/ Description:                                                                /
;/ Add a new receiver link from the midiport to a cluster. This has to be do:: /
;/ ne successfully in order to be able to receive on this midiport.            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mp.l    : midiport [0...max_camdlinks-1]                                  /
;/ - clustername.s    : name of the cluster you want to connect to             /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.w     : -1 if everything went well, 0 otherwise                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w camd_AddReceiver {mp.l,clustername.s}
SHARED camd
SHARED camdtags(),errorapp.s
If mp>=0 AND mp<#max_camdlinks AND clustername.s><""
 If \is_open = False Then succ.w = camd_Init {errorapp.s,0}
 If \is_open
  n.l = 0
  If \receiver_ptr[mp] Then camd_RemReceiver{mp}
  \receiver_name[mp] = clustername.s
  camdtags(n)\ti_Tag =#MLINK_Location      ,&\receiver_name[mp]         : n+1
;  camdtags(n)\ti_Tag =#MLINK_ChannelMask   ,$ff                      : n+1
  camdtags(n)\ti_Tag =#MLINK_EventMask     ,-1                : n+1
;  camdtags(n)\ti_Tag =#MLINK_UserData                              : n+1
;  camdtags(n)\ti_Tag =#MLINK_Comment       ,&comment.s : n+1
  camdtags(n)\ti_Tag =#MLINK_PortID        ,mp                      : n+1
;  camdtags(n)\ti_Tag =#MLINK_Private                               : n+1
  camdtags(n)\ti_Tag =#MLINK_Priority      ,0                       : n+1
;  camdtags(n)\ti_Tag =#MLINK_SysExFilter                           : n+1
;  camdtags(n)\ti_Tag =#MLINK_SysExFilterX                          : n+1
;  camdtags(n)\ti_Tag =#MLINK_Parse         ,True                    : n+1
;  camdtags(n)\ti_Tag =#MLINK_DeviceLink                            : n+1
;  camdtags(n)\ti_Tag =#MLINK_ErrorCode                             : n+1
  \receiver_linkname[mp] = errorapp.s+" receiving from "+clustername.s
  camdtags(n)\ti_Tag =#MLINK_Name,&\receiver_linkname[mp]                                    : n+1
  camdtags(n)\ti_Tag = #TAG_END,0                                   : n+1
  \receiver_ptr[mp] = AddMidiLinkA_ (\node_ptr,#MLTYPE_Receiver,&camdtags(0)\ti_Tag)
  If \receiver_ptr[mp]
    succ.w =True
  Else
    error {"Unable to establish MIDI receive link to CAMD cluster "+clustername.s+" !"}
    ;error {"No memory for MIDI Link!"}
  End If
 Else
  error {"Unable to init CAMD system!"}
 End If
Else
  error {"Tried to open MIDIlink with invalid parameters !"}
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: camd_SendMem {mp.l,ptr.l,blength.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ Send MIDI data to the midiport.                                             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mp.l    : midiport [0...max_camdlinks-1]                                  /
;/ - ptr.l    : pointer to memory buffer that holds the midi data              /
;/ - blength.l    : byte length of the midi data                               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST camd_SendMem {mp.l,ptr.l,blength.l}
SHARED camd
If  \sender_ptr[mp]
  ParseMidi_ \sender_ptr[mp],ptr,blength
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: camd_SendMsg {mp.l,*msg.MidiMsg}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Send a single midi message to the given midiport.                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mp.l    : midiport [0...max_camdlinks-1]                                  /
;/ - *msg.MidiMsg    : pointer to the MidiMsg to send                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST camd_SendMsg {mp.l,*msg.MidiMsg}
SHARED camd
If  \sender_ptr[mp]
  PutMidi_ \sender_ptr[mp],*msg
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.l =  camd_GetMsg {}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ Recevie the next waiting midi message in queue. It returns success, if th:: /
;/ ere was a message waiting, that can be read using the camd_received_??? f:: /
;/ unctions.                                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.l     : -1 if there was a message waiting, 0 otherwise               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST camd_GetMsg {}
SHARED camd
succ.l = False
If \node_ptr
  If GetMidi_ (\node_ptr,&\in_msg\mm_Status) Then succ = True :GetMidiErr_ \node_ptr
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.l =  camd_IsSysEx {}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ Check if the latest received message is a SysEx message.                    /
;/ Note: The function simply checks the status byte of the latest received m:: /
;/ essage to be equal 0xF0.                                                    /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.l     : -1 if the received message is a SysEx message, 0 otherwise   /
;/                                                                             /
;/ See also:    camd_receive                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST camd_IsSysEx {}
SHARED camd
If \in_msg\mm_Status=%11110000 Then succ.l = True:Else succ = False
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !camd_IsSysEx                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ See camd_IsSysEx.                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.l                                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro camd_IsSysEx
(camd\in_msg\mm_Status=%11110000)
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !camd_EchoMsg                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Optimized version of !camd_EchoMsgX, but can not change the midi channel :: /
;/ on the fly.                                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro camd_EchoMsg
If camd\sender_ptr[`1]><False AND camd\in_msg\mm_Status><%11110000 AND camd\in_msg\mm_Status><0
  If camd\in_msg\mm_Status=%11110000
    ; We can not echo SysEx Data for now, sorry
    ;ParseMidi_ camd\sender_ptr[`1],camd\tempbuffer,camd\tempbuffer
  Else
    PutMidi_ camd\sender_ptr[`1],Peek.l(&camd\in_msg\mm_Status)
  End If
End If
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !camd_EchoMsgX {mp,channel}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ See camd_EchoMsg.                                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mp    : ???                                                               /
;/ - channel    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro camd_EchoMsgX; {mp,channel}
If camd\sender_ptr[`1]><False AND camd\in_msg\mm_Status><%11110000 AND camd\in_msg\mm_Status><0
  If camd\in_msg\mm_Status=%11110000
    ; We can not echo SysEx Data for now, sorry
    ;ParseMidi_ camd\sender_ptr[`1],camd\tempbuffer,camd\tempbuffer
  Else
   camd\in_msg\mm_Status =  (camd\in_msg\mm_Status & %11110000) + (`2)
    PutMidi_ camd\sender_ptr[`1],Peek.l(&camd\in_msg\mm_Status)
  End If
End If
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: camd_EchoMsg {mp.l,@channel.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ "echo" the latest received midi message on the given midiport. Optionally:: /
;/ , the midi channel can be changed.                                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - mp.l    : midiport [0...max_camdlinks-1]                                  /
;/ - channel.l    : midi channel, if it should be changed                      /
;/                                                                             /
;/ See also:    camd_receive                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST camd_EchoMsg {mp.l,@channel.l}
SHARED camd
If channel<0 Then channel=camd\in_msg\mm_Status& %00001111
!camd_EchoMsgX {mp,channel}
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  blength.l =  camd_GetSysExLength {}                                /
;/                                                                             /
;/ Description:                                                                /
;/ Get the byte length of the waiting SysEx data in SysEx buffer.              /
;/                                                                             /
;/ Result:                                                                     /
;/ - blength.l     : byte length of the waiting SysEx data                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST camd_GetSysExLength {}
SHARED camd
If \node_ptr
  blength.l = QuerySysEx_ (\node_ptr)
Else
  blength = 0
End If
Function Return blength
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: camd_GetSysExData {ptr.l,maxlength.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ Receive SysEx data that is waiting in SysEx buffer. The data will be copi:: /
;/ ed to the given memory location, but maxlength will not be exceeded.        /
;/ SysEx data is waiting, if you received the SysEx status byte (0xF0) as a :: /
;/ midi message.                                                               /
;/ Make sure that your buffer is big enough!                                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - ptr.l    : memory pointer to copy the SysEx data to                       /
;/ - maxlength.l    : maximum byte length to copy                              /
;/                                                                             /
;/ See also:    camd_SkipSysEx, camd_GetSysExLength                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST camd_GetSysExData {ptr.l,maxlength.l}
SHARED camd
If \node_ptr
  blength.l = GetSysEx_  (\node_ptr,ptr.l,maxlength.l)
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: camd_SkipSysEx {}                                                   /
;/                                                                             /
;/ Description:                                                                /
;/ Skip SysEx data that is waiting in SysEx buffer.                            /
;/ SysEx data is waiting, if you received the SysEx status byte (0xF0) as a :: /
;/ midi message.                                                               /
;/                                                                             /
;/ See also:    camd_sysex_receive                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST camd_SkipSysEx {}
SHARED camd
If \node_ptr Then SkipSysEx_ \node_ptr
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  blength.l = camd_GetMsgLength {status.b}                           /
;/                                                                             /
;/ Description:                                                                /
;/ Get the midi message length in bytes of the given status byte (this can b:: /
;/ e either 1, 2 or 3).                                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - status.b    : status byte                                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - blength.l     : byte length of midi message                               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l camd_GetMsgLength {status.b}
SHARED camd_msglength()
Function Return camd_msglength((status LSR 4)&$0f)
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  status.b =  camd_GetMsgStatus {}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ Get the status byte of the latest received midi message.                    /
;/                                                                             /
;/ Result:                                                                     /
;/ - status.b     : status byte                                                /
;/                                                                             /
;/ See also:    camd_receive                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.b FAST camd_GetMsgStatus {}
SHARED camd
Function Return \in_msg\mm_Status
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  midiport.b =  camd_GetMsgMP {}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Get the midiport of the latest received midi message.                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - midiport.b     : midiport of the last reveiced message                    /
;/                                                                             /
;/ See also:    camd_receive                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.b FAST camd_GetMsgMP {}
SHARED camd
Function Return \in_msg\mm_Port
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  dat.b =  camd_GetMsgDat1 {}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ Get the first data byte of the latest received midi message.                /
;/                                                                             /
;/ Result:                                                                     /
;/ - dat.b     : data byte                                                     /
;/                                                                             /
;/ See also:    camd_receive                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.b FAST camd_GetMsgDat1 {}
SHARED camd
Function Return \in_msg\mm_Data1
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  dat.b =  camd_GetMsgDat2 {}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ Get the second data byte of the latest received midi message.               /
;/                                                                             /
;/ Result:                                                                     /
;/ - dat.b     : data byte                                                     /
;/                                                                             /
;/ See also:    camd_receive                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.b FAST camd_GetMsgDat2 {}
SHARED camd
Function Return \in_msg\mm_Data2
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  timestamp.l =  camd_GetMsgTime {}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Get the time stamp of the latest received midi message.                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - timestamp.l     : time stamp of the received midi message                 /
;/                                                                             /
;/ See also:    camd_receive                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST camd_GetMsgTime {}
SHARED camd
Function Return \in_msg\mm_Time
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  sigflag.l =  camd_GetSigFlag {}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Get the signal flag that can be used to Wait_() for camd events.            /
;/ Note: This function exists as a macro as well for faster performance.       /
;/                                                                             /
;/ Result:                                                                     /
;/ - sigflag.l     : sigflag                                                   /
;/                                                                             /
;/ See also:    !camd_GetSigFlag                                               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST camd_GetSigFlag {}
SHARED camd
Function Return \sigflag
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: camd_ClearMsg {}                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Clear the latest received midi message.                                     /
;/ This function is not very useful, it will just make all camd_received_???:: /
;/  functions return 0. It is mainly suitable for debugging purposes.          /
;/                                                                             /
;/ See also:    camd_receive                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST camd_ClearMsg {}
SHARED camd
\in_msg\mm_Status = 0
\in_msg\mm_Data1  = 0
\in_msg\mm_Data2  = 0
\in_msg\mm_Port   = 0
\in_msg\mm_Time   = 0
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !camd_GetMsgStatus                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ See camd_received_status.                                                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Example:                                                  -                 /
;/                                                                             /
;/ Bugs:        -                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro camd_GetMsgStatus
camd\in_msg\mm_Status
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !camd_GetMsgTyp                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Return (status byte & $F0), which means the pure message type without the:: /
;/  channel information.                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - evtyp.b    : = status.b & $F0                                             /
;/                                                                             /
;/ Example:                                                  -                 /
;/                                                                             /
;/ Bugs:        -                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro camd_GetMsgTyp
(camd\in_msg\mm_Status & $f0)
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !camd_GetMsgChannel                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ Return the midi channel of the last received midi message.                  /
;/                                                                             /
;/ Result:                                                                     /
;/ - channel    : midi channel [0...15], channel = (status.b & $0F)            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro camd_GetMsgChannel
(camd\in_msg\mm_Status & $0f)
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !camd_GetMsgMP                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ See camd_received_mp.                                                       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Example:                                                  -                 /
;/                                                                             /
;/ Bugs:        -                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro camd_GetMsgMP
camd\in_msg\mm_Port
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !camd_GetMsgDat1                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ See camd_received_dat1.                                                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Example:                                                  -                 /
;/                                                                             /
;/ Bugs:        -                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro camd_GetMsgDat1
camd\in_msg\mm_Data1
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !camd_GetMsgDat2                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ See camd_received_dat2.                                                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Example:                                                  -                 /
;/                                                                             /
;/ Bugs:        -                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro camd_GetMsgDat2
camd\in_msg\mm_Data2
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !camd_GetMsgTime                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ See camd_GetMsgTime.                                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Example:                                                  -                 /
;/                                                                             /
;/ Bugs:        -                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro camd_GetMsgTime
camd\in_msg\mm_Time
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !camd_GetSigFlag                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ See camd_GetSigFlag.                                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Example:                                                  -                 /
;/                                                                             /
;/ Bugs:        -                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro camd_GetSigFlag
camd\sigflag
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !camd_ClearMsg                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ See camd_ClearMsg.                                                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Example:                                                  -                 /
;/                                                                             /
;/ Bugs:        -                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro camd_ClearMsg
camd\in_msg\mm_Status = 0
camd\in_msg\mm_Data1  = 0
camd\in_msg\mm_Data2  = 0
camd\in_msg\mm_Port   = 0
camd\in_msg\mm_Time   = 0
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !camd_GetMsgLength {status.b}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ See camd_msglength.                                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ -                                                                           /
;/ - status.b    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Example:                                                  -                 /
;/                                                                             /
;/ Bugs:        -                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro camd_GetMsgLength ; {status.b}
camd_msglength(((`1) LSR 4)&$0f)
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !camd_SendMem {mp.l,ptr.l,blength.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ See camd_send.                                                              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ -                                                                           /
;/ - mp.l    : ???                                                             /
;/ - ptr.l    : ???                                                            /
;/ - blength.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Example:                                                  -                 /
;/                                                                             /
;/ Bugs:        -                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro camd_SendMem ; {mp.l,ptr.l,blength.l}
If camd\sender_ptr[`1]
  ParseMidi_ camd\sender_ptr[`1],`2,`3
End If
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !camd_SendMsg {mp.l,*msg.MidiMSg}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ See camd_SendMsg.                                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ -                                                                           /
;/ - mp.l    : ???                                                             /
;/ - *msg.MidiMSg    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Example:                                                  -                 /
;/                                                                             /
;/ Bugs:        -                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro camd_SendMsg ; {mp.l,*msg.MidiMSg}
If camd\sender_ptr[`1]
  PutMidi_ camd\sender_ptr[`1],`2
End If
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !camd_GetMsg                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ See camd_receive.                                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ -                                                                           /
;/                                                                             /
;/ Example:                                                  -                 /
;/                                                                             /
;/ Bugs:        -                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro camd_GetMsg
GetMidi_ (camd\node_ptr,&camd\in_msg\mm_Status)
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = camd_FindCluster {}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Scan through the list of system wide camd clusters.                         /
;/ If this function returns True, a cluster was found and information about :: /
;/ this cluster can be asked with the camd_nextCluster??? functions.           /
;/ Note: The search starts always with the first cluster and has to be scann:: /
;/ ed until this functions returns False. During the search, the camd system:: /
;/  is locked, so do not waste too much time within this loop.                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : True, if a camd cluster was found, otherwise False         /
;/                                                                             /
;/ Example:                                                                    /
;/ __________________________________________________________________ snip!    /
;/ .                                                                           /
;/ . While camd_NextCluster{}                                                  /
;/ .   NPrint "  Clustername: ",camd_NextClusterName{}                         /
;/ . Wend                                                                      /
;/ __________________________________________________________________ snip!    /
;/                                                                             /
;/ See also:    camd_NextClusterName{}                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l camd_FindCluster{}
SHARED camd
succ.l = False
If camd\lock = False
  camd\lock = LockCAMD_(#CD_Linkages)
  camd\this_cluster=0
End If
If camd\lock
  camd\this_cluster = NextCluster_(camd\this_cluster)
  If camd\this_cluster
    succ=True
  Else
    ;error {"Last cluster will now unock !"}
    UnlockCAMD_(camd\lock)
    camd\lock=0
  End If
End If
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = camd_GetClusterName {}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Return the name of the last found cluster.                                  /
;/ Note: This functions should be called after camd_FindCluster returned True. /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : name of the camd cluster                                   /
;/                                                                             /
;/ See also:    camd_FindCluster                                               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s camd_GetClusterName{}
SHARED camd
If camd\this_cluster
  *node.Node=camd\this_cluster\mcl_Node\ln_Pred
  If *node
    If *node\ln_Name
      a.s = Peek.s(*node\ln_Name)
      ;getclusterattrsa_
    Else
      a.s = "???"
    End If
  Else
    a.s = "?"
  End If
End If
Function Return a.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = camd_FindSenderMidiLink {*mi.Node}                      /
;/                                                                             /
;/ Description:                                                                /
;/ Check for the next midi link in the list of senders that are attached to :: /
;/ the specified midi node.                                                    /
;/ Note: the midi node of the last result from camd_nextmidi has to be retri:: /
;/ eved by camd\this_midi (sorry, thats a bit ugly, if someone wants to use :: /
;/ this include, I could improve this).                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *mi.Node    : Pointer to a midi node                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : True, if another midilink was found, otherwise False       /
;/                                                                             /
;/ See also:    camd_nextMidiLinkName                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l camd_FindSenderMidiLink{*mi.Node}
SHARED camd
succ.l = False
If camd\lock
  camd\this_midilink = NextMidiLink_(*mi,camd\this_midilink,#MLTYPE_Sender)
  If camd\this_midilink
    succ=True
  End If
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = camd_FindReceiverMidiLink {*mi.Node}                    /
;/                                                                             /
;/ Description:                                                                /
;/ Check for the next midi link in the list of receivers that are attached t:: /
;/ o the specified midi node.                                                  /
;/ Note: the midi node of the last result from camd_nextMidi has to be retri:: /
;/ eved by camd\this_midi (sorry, thats a bit ugly, if someone wants to use :: /
;/ this include, I could improve this).                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *mi.Node    : pointer to the last Node or 0 to start the search           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : True, if another midilink was found, otherwise False       /
;/                                                                             /
;/ See also:    camd_nextMidiLinkName                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l camd_FindReceiverMidiLink{*mi.Node}
SHARED camd
succ.l = False
If camd\lock = False
  camd\this_midilink=0
End If
If camd\lock
  camd\this_midilink = NextMidiLink_(*mi,camd\this_midilink,#MLTYPE_Receiver)
  If camd\this_midilink
    succ=True
  End If
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = camd_FindMidiApp {@lockit.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ Scan through the system wide list of midi nodes (=applications that creat:: /
;/ e a midi node).                                                             /
;/ Note: The search starts always with the first midi node and has to be sca:: /
;/ nned until this functions returns False. During the search, the camd syst:: /
;/ em is locked (if lockit.l is omitted or set to True), so do not waste too:: /
;/  much time within this loop.                                                /
;/ Note: The reason why you should set lockit.l to False is, when you use th:: /
;/ is function during you scann through camd clusters using camd_nextcluster:: /
;/ , because then the camd system is already locked.                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - lockit.l    : lock the camd system while scanning                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : True, if a midi node was found, otherwise False            /
;/                                                                             /
;/ Example:                                                                    /
;/ __________________________________________________________________ snip!    /
;/ .                                                                           /
;/ . While camd_NextMidi{}                                                     /
;/ .   NPrint "Found camd application: ",camd_NextMidiName{}                   /
;/ . Wend                                                                      /
;/ __________________________________________________________________ snip!    /
;/                                                                             /
;/ See also:    camd_nextMidiName                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l camd_FindMidiApp{@lockit.l}
SHARED camd
succ.l = False
If lockit
  If camd\lock = False
    camd\lock = LockCAMD_(#CD_Linkages)
    camd\this_midi=0
  End If
End If
If camd\lock
  camd\this_midi = NextMidi_(camd\this_midi)
  If camd\this_midi
    succ=True
  Else
    If lockit
      UnlockCAMD_(camd\lock)
      camd\lock=0
    End If
  End If
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = camd_GetMidiAppName {}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Get the name of the last found midi node.                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : name of the midi node                                      /
;/                                                                             /
;/ See also:    camd_nextMidi                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s camd_GetMidiAppName{}
SHARED camd
If camd\this_midi
  succ.l = GetMidiAttrsA_(camd\this_midi,Tags(#MIDI_Name,&ptr.l))
  If ptr Then a.s = Peek.s(ptr):Else a.s = "NULL"
Else
  a.s = "???"
End If
Function Return a.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  midilinkname.s = camd_GetMidiLinkName {}                           /
;/                                                                             /
;/ Description:                                                                /
;/ Get the name of the last found midilink.                                    /
;/ Note: This works for the last found senders and receivers.                  /
;/                                                                             /
;/ Result:                                                                     /
;/ - midilinkname.s     : name of the midi link                                /
;/                                                                             /
;/ See also:    camd_nextMidiLink                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s camd_GetMidiLinkName{}
SHARED camd
If camd\this_midilink
  succ.l = GetMidiLinkAttrsA_(camd\this_midilink,Tags(#MLINK_Location,&ptr.l))
  If ptr Then a.s = Peek.s(ptr.l):Else a.s = "NULL"
Else
  a.s = "???"
End If
Function Return a.s
End Function



CNIF #__include=0
breakme.l = False
NPrint "CAMD test:"
If camd_Init {"CAMDTest",0}
  NPrint "CAMD open..."
  If camd_AddReceiver {0,"My.in.0"}
    If camd_AddSender {0,"My.out.0"}


      NPrint "\\nscanning for all CAMD Clusters... (NextCluster())"
      While camd_FindCluster{}
        NPrint "  Clustername: ",camd_GetClusterName{}
      Wend
      NPrint "Done."
      Delay_ 50

      NPrint "\\nscanning for all MIDI Nodes: (NextMidi())"
      While camd_FindMidiApp{}
        Delay_ 50
        NPrint "\\n  found Application: ",camd_GetMidiAppName{}

        NPrint "    app owns following receivers: (NextMidiLink())"
        While camd_FindReceiverMidiLink{camd\this_midi}
          NPrint "      link name: ",camd_GetMidiLinkName{}
        Wend
        NPrint "Done."
        NPrint "    app owns following senders: (NextMIDILink()))"
        While camd_FindSenderMidiLink{camd\this_midi}
          NPrint "      link name : ",camd_GetMidiLinkName{}
        Wend
        NPrint "Done."

      Wend

      NPrint "\\nlistening... (press CTRL+C to quit)"
      While breakme.l = False
        signal.l = Wait_ (!camd_GetSigFlag|#SIGBREAKF_CTRL_C)
        While !camd_GetMsg
          NPrint "received MIDI data: ",!camd_GetMsgStatus
        Wend
        If signal&#SIGBREAKF_CTRL_C Then breakme=True
      Wend
    End If
  End If
  camd_Free{}
  NPrint "CAMD closed."
End If
End
CEND


