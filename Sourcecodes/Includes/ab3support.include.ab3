; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "ram:"
; ExeFile         = "test"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 4096
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 8
; CursorColumn    = 7
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 1
; Max GadgetList  = 1
; Max Queue       = 1
; Max Screen      = 2
; Max Shape       = 1
; Max CopList     = 1
; Max Sprite      = 1
; Max Stencil     = 1
; Max Module      = 1
; Max Window      = 30
; Max Anim        = 1
; Max Sound       = 1
; Max Bank        = 1
; Max Buffer      = 1
; Max BitMap      = 1
; Max Slice       = 1
; Max Page        = 1
; Max Tape        = 1
; Max IntuiFont   = 12
; Max MedModule   = 1
; Max Palette     = 1
; Max MenuList    = 1
; Max BlitzFont   = 1
; Max GTList      = 30
; /XTRA
CNIF #__include=0
 optimize 7
 Syntax 2
 WBStartup
CEND

CNIF @#NO_AB3SUPPORTPFT=1
 ; we don't use the library support for the prefixedtrees
  #USE_AB3SUPPORTPFT=0
CELSE
  #USE_AB3SUPPORTPFT=1
CEND
#HAS_AB3SUPPORT    = 1

; Library offsets:
#_LVO_AB3SUPPORTBASE_ab3support_Deinit              =  -30
#_LVO_AB3SUPPORTBASE_ab3support_Init                =  -36
#_LVO_AB3SUPPORTBASE_pft_Create                     =  -42
#_LVO_AB3SUPPORTBASE_pft_Free                       =  -48
#_LVO_AB3SUPPORTBASE_pft_Clear                      =  -54
#_LVO_AB3SUPPORTBASE_pft_GetNumItems                =  -60
#_LVO_AB3SUPPORTBASE_pft_Expand                     =  -66
#_LVO_AB3SUPPORTBASE_pft_GetLongestMatch            =  -72
#_LVO_AB3SUPPORTBASE_pft_ModifyBin                  =  -78
#_LVO_AB3SUPPORTBASE_pft_SetBin                     =  -84
#_LVO_AB3SUPPORTBASE_pft_AppendBin                  =  -90
#_LVO_AB3SUPPORTBASE_pft_SetString                  =  -96
#_LVO_AB3SUPPORTBASE_pft_SetInt32                   = -102
#_LVO_AB3SUPPORTBASE_pft_SetFloat32                 = -108
#_LVO_AB3SUPPORTBASE_pft_Optimize                   = -114
#_LVO_AB3SUPPORTBASE_pft_GetBin                     = -120
#_LVO_AB3SUPPORTBASE_pft_GetString                  = -126
#_LVO_AB3SUPPORTBASE_pft_GetInt32                   = -132
#_LVO_AB3SUPPORTBASE_pft_GetFloat32                 = -138
#_LVO_AB3SUPPORTBASE_pft_ResetSearch                = -144
#_LVO_AB3SUPPORTBASE_pft_FindNextItem               = -150
#_LVO_AB3SUPPORTBASE_pft_GetFoundKey                = -156
#_LVO_AB3SUPPORTBASE_pft_GetFoundBin                = -162
#_LVO_AB3SUPPORTBASE_pft_RemItem                    = -168
#_LVO_AB3SUPPORTBASE_pft_Save                       = -174
#_LVO_AB3SUPPORTBASE_pft_ExportASCII                = -180
#_LVO_AB3SUPPORTBASE_pft_Load                       = -186
#_LVO_AB3SUPPORTBASE_pft_SortNode                   = -192
#_LVO_AB3SUPPORTBASE_pft_Sort                       = -198
#_LVO_AB3SUPPORTBASE_zlib_Compress                  = -204
#_LVO_AB3SUPPORTBASE_zlib_Uncompress                = -210

SHARED *_AB3SupportBase.Library
__AB3SupportBase.l =0 

; Helper Macros:
Macro __AB3SupportBase_SaveRegs
MOVE.l a4,-(a7) : MOVE.l a5,-(a7) : MOVE.l a6,-(a7) : MOVE.l d7,-(a7)
End Macro

Macro __AB3SupportBase_RestoreRegs
MOVE.l (a7)+,d7 : MOVE.l (a7)+,a6 : MOVE.l (a7)+,a5 : MOVE.l (a7)+,a4
End Macro


; Open/Close Library:
Function.l AB3Support_OpenLib{@minVersion.l}
  SHARED __AB3SupportBase

  If (*_AB3SupportBase)
    If (minVersion<=*_AB3SupportBase\lib_Version) Then Function Return *_AB3SupportBase
    CloseLibrary_ *_AB3SupportBase : *_AB3SupportBase = Null
  End If
  If minVersion<0 Then minVersion = 0
  *_AB3SupportBase = OpenLibrary_ ("ab3support.library",minVersion)
  If *_AB3SupportBase
    __AB3SupportBase = *_AB3SupportBase
  Else
    ;If (minVersion>0)
    ;  error{"Unable to open ab3support.library v"+Str$(minVersion)+" or higher!"}
    ;Else
    ;  error{"Unable to open ab3support.library!"}
    ;End If
  End If
  Function Return *_AB3SupportBase

End Function


Statement AB3Support_CloseLib{}

  If *_AB3SupportBase
    ; (!) Do some freeing stuff here that you inited in _SynthBase_Init{}...
    CloseLibrary_ *_AB3SupportBase : *_AB3SupportBase = Null
  End If
  
End Statement
!autoexit{AB3Support_CloseLib}

;Wrapper Functions:
CNIF #USE_AB3SUPPORTPFT=1
  ; we use the defintion  of Ab3support.library for the warperfunctions of the prefixtree.include
  NEWTYPE.prefixtree
    allprivate.l
  End NEWTYPE
CEND


Macro calldirect 
 SHARED __AB3SupportBase
  UNLK a4
  MOVE.l __AB3SupportBase@(A5),A6
  JMP _LVO_AB3SUPPORTBASE_`1(A6)
End Macro


RunErrsOff
CNIF #USE_AB3SUPPORTPFT=1
  ; we use the warper functions of the prefixtree.include that call the library
  Function.prefixtree pftlib_Create          {blocksize.l,type_.l}                                            : !calldirect{pft_Create}          : End Function
  Statement           pftlib_Free            {*pft.prefixtree}                                                : !calldirect{pft_Free}            : End Statement
  Statement           pftlib_Clear           {*pft.prefixtree}                                                : !calldirect{pft_Clear}           : End Statement
  Function.l          pftlib_GetNumItems     {*pft.prefixtree}                                                : !calldirect{pft_GetNumItems}     : End Function
  Function.l          pftlib_Expand          {*pft.prefixtree, minFree.l}                                     : !calldirect{pft_Expand}          : End Function
  Function.l          pftlib_GetLongestMatch {*pft.prefixtree, *key.b, keyLen.l, *foundLen.l}                 : !calldirect{pft_GetLongestMatch} : End Function
  Function.l          pftlib_ModifyBin       {*pft.prefixtree, *key.b, keyLen.l, *dataP.b,dataLen.l,append.l} : !calldirect{pft_ModifyBin}       : End Function
  Function.l          pftlib_SetBin          {*pft.prefixtree, *key.b, keyLen.l, *dataP.b,dataLen.l}          : !calldirect{pft_SetBin}          : End Function
  Function.l          pftlib_AppendBin       {*pft.prefixtree, *key.b, keyLen.l, *dataP.b,dataLen.l}          : !calldirect{pft_AppendBin}       : End Function
  Function.l          pftlib_SetString       {*pft.prefixtree, *key.b, *string.b}                             : !calldirect{pft_SetString}       : End Function
  Function.l          pftlib_SetInt32        {*pft.prefixtree, *key.b, value.l}                               : !calldirect{pft_SetInt32}        : End Function
  Function.l          pftlib_SetFloat32      {*pft.prefixtree, *key.b, value.f}                               : !calldirect{pft_SetFloat32}      : End Function
  Function.prefixtree pftlib_Optimize        {*pft.prefixtree}                                                : !calldirect{pft_Optimize}        : End Function
  Function.l          pftlib_GetBin          {*pft.prefixtree, *key.b, keyLen.l, *dataLenP.l}                 : !calldirect{pft_GetBin}          : End Function
  Function.l          pftlib_GetString       {*pft.prefixtree, *key.b}                                        : !calldirect{pft_GetString}       : End Function
  Function.l          pftlib_GetInt32        {*pft.prefixtree, *key.b}                                        : !calldirect{pft_GetInt32}        : End Function
  Function.f          pftlib_GetFloat32      {*pft.prefixtree, *key.b}                                        : !calldirect{pft_GetFloat32}      : End Function
  Function.l          pftlib_ResetSearch     {*pft.prefixtree, *key.b, keyLen.l}                              : !calldirect{pft_ResetSearch}     : End Function
  Function.l          pftlib_FindNextItem    {*pft.prefixtree}                                                : !calldirect{pft_FindNextItem}    : End Function
  Function.l          pftlib_GetFoundKey     {*pft.prefixtree, *keyLen.l}                                     : !calldirect{pft_GetFoundKey}     : End Function
  Function.l          pftlib_GetFoundBin     {*pft.prefixtree, *dataLen.l}                                    : !calldirect{pft_GetFoundBin}     : End Function
  Statement           pftlib_RemItem         {*pft.prefixtree, *key.b, keyLen.l}                              : !calldirect{pft_RemItem}         : End Statement
  Function.l          pftlib_Save            {*pft.prefixtree, *filename.b}                                   : !calldirect{pft_Save}            : End Function
  Function.l          pftlib_ExportASCII     {*pft.prefixtree, *filename.b, *prefix.b}                        : !calldirect{pft_ExportASCII}     : End Function
  Function.prefixtree pftlib_Load            {*filename.b}                                                    : !calldirect{pft_Load}            : End Function
  Statement           pftlib_SortNode        {*pft.prefixtree, nodePos.l, recursive.l}                        : !calldirect{pft_SortNode}        : End Statement
  Statement           pftlib_Sort            {*pft.prefixtree}                                                : !calldirect{pft_Sort}            : End Statement
CEND

Function.l          zlib_Compress            {*dest.l,*destLen.l,*source.l, sourceLen.l, level.l}             : !calldirect{zlib_Compress}       : End Function
Function.l          zlib_Uncompress          {*dest.l,*destLen.l,*source.l, sourceLen.l}                      : !calldirect{zlib_Uncompress}     : End Function

LastRunErrsMode

CNIF #__include=0
;XINCLUDE "prefixtree.include.bb2"

If (AB3Support_OpenLib{}) ; (!) put your min version here if needed!
  ; (!) place your built-in demo here
  NPrint "AB3Support.library is open!"
  *pft.prefixtree = pftlib_Create{4096,0}
  NPrint "Allocated pft:",Hex$(*pft)
  key.s = "hallo" : string.s = "Welt"
  pftlib_SetString{*pft,&key,&string}
  key.s = "hi" : string.s = "Thilo"
  pftlib_SetString{*pft,&key,&string}
  
  ptr.l = pftlib_GetString{*pft,&key}
  If ptr Then string2.s = Peek.s(ptr)
  NPrint "Got back: ",string2
  filename.s = "RAM:testpft.txt" : prefix.s = "PF_"
  pftlib_ExportASCII{*pft,&filename,&prefix}
  filename.s = "RAM:testpft.pft"
  pftlib_Save{*pft,&filename}
  pftlib_Free{*pft}
Else
  NPrint "Unable to open lib!"
EndIf
End

CEND


