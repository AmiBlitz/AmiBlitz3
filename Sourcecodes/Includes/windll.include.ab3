; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 0
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 1024
; MakeSmallest    = 0
; FuncOptimize    = 0
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 4000
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = -1
; InterruptCheck  = -1
; AutoRun         = -1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 0
; CursorColumn    = 0
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; /XTRA

#WINUAE_OPENDLL          = 100
#WINUAE_GETNATIVEADDRESS = 101
#WINUAE_CALLNATIVE       = 102
#WINUAE_CLOSEDLL         = 103
#WINUAE_SCREENLOST       = 104
#WINUAE_MEMOFFSET        = 105

Macro WinUAE_Call
MOVEQ #`1,d0
JSR $f0ffc0
End Macro

Macro WinUAE_Test
TST.l $f0ffc0
End Macro

Macro dll_GetMemOffset
  !WinUAE_Call{#WINUAE_MEMOFFSET}
  `1=PutRegD0
End Macro

Function.l dll_GetMemOffset{}

  !dll_GetMemOffset{offset.l}
  Function Return offset

End Function

SHARED _winuae_memoffset.l
_winuae_memoffset = dll_GetMemOffset{}

Macro _68KP
((`1)-_winuae_memoffset)
End Macro

Macro _x86P
((`1)+_winuae_memoffset)
End Macro

Macro _x86Float
Peek.l(&`1)
End Macro

Macro _68KFloat
Peek.f(&`1)
End Macro

Macro dll_Close;{alib or dll pointer}
If (`1)
  GetReg d1,`1
  !WinUAE_Call{#WINUAE_CLOSEDLL}
End If
End Macro

Macro dll_CallDirect ;{alib or dll pointer,par1[,...,par8}
UNLK a4
MOVE.l d0,a0  ; DLL Pointer
MOVEQ ##WINUAE_CALLNATIVE,d0
JMP $f0ffc0
End Macro


Macro dll_Call ;{alib or dll pointer,par1[,...,par8}

CNIF `0 > 2 ; param1
GetRegD0 `3
MOVE.l d0,d1
CEND

CNIF `0 > 3 ; param2
GetRegD0 `4
MOVE.l d0,d2
CEND

CNIF `0 > 4 ; param3
GetRegD0 `5
MOVE.l d0,d3
CEND

CNIF `0 > 5 ; param4
GetRegD0 `6
MOVE.l d0,d4
CEND

CNIF `0 > 6 ; param5
GetRegD0 `7
MOVE.l d0,d5
CEND

CNIF `0 > 7 ; param6
GetRegD0 `8
MOVE.l d0,d6
CEND

CNIF `0 > 8 ; param7
GetRegD0 `9
MOVE.l d0,d7
CEND

GetRegD0 `1
MOVE.l d0,a0  ; DLL Pointer

!WinUAE_Call{#WINUAE_CALLNATIVE}
CNIF `0 > 1
`2=PutRegD0
CEND
End Macro

Macro dll_GetSymbolAddr ;{dll or alibbase,function or varname}
GetReg d1,`1
GetReg a0,`2
!WinUAE_Call{#WINUAE_GETNATIVEADDRESS}
`3=PutRegD0
End Macro

Macro dll_Open ;{return var for dll or alibbase,alibname}
MOVEQ #0,d0
!WinUAE_Test
;TST.l $f0ffc0
BEQ 'nowinuae
GetReg a0,`2
!WinUAE_Call{#WINUAE_OPENDLL}
`1=PutRegD0
'nowinuae
End Macro

Macro xendian32
( ( (`1 LSR 24) &$000000FF) | ( (`1 LSR 8) &$0000FF00)  | ( (`1 LSL 8) &$00FF0000) | ( (`1 LSL 24) &$FF000000) )
End Macro

Macro xendian16
( ( (`1 LSR 8) &$000000FF) | ( (`1 LSL 8) &$0000FF00) )
End Macro


Function.l dll_Open{dllname.s}
  opendll:
  !dll_Open{*dll.l,&dllname}
  Function Return *dll

End Function


Function.l dll_GetSymbolAddr{*dll.l,name.s}

  If (*dll)
    !dll_GetSymbolAddr{*dll,&name,*dlladdr.l}
  End If

  Function Return *dlladdr

End Function


Statement dll_Close{*dll.l}

  If *dll
    !dll_Close{*dll}
  End If

End Statement


Function.l FAST dll_Call0{*dlladdr.l}

  ;!dll_CallDirect
  !dll_Call{*dlladdr,ret.l}
  Function Return ret
End Function
 

Function.l FAST dll_Call1{*dlladdr.l,param1.l}

  ;!dll_CallDirect
  !dll_Call{*dlladdr,ret.l,param1}
  Function Return ret
End Function


Function.l FAST dll_Call2{*dlladdr.l,param1.l,param2.l}

  ;!dll_CallDirect
  !dll_Call{*dlladdr,ret.l,param1,param2}
  Function Return ret
End Function


Function.l FAST dll_Call3{*dlladdr.l,param1.l,param2.l,param3.l}
  ;!dll_CallDirect
  !dll_Call{*dlladdr,ret.l,param1,param2,param3}
  Function Return ret
End Function


Function.l FAST dll_Call4{*dlladdr.l,param1.l,param2.l,param3.l,param4.l}
  ;!dll_CallDirect
  !dll_Call{*dlladdr,ret.l,param1,param2,param3,param4}
  Function Return ret
End Function


Function.l FAST dll_Call5{*dlladdr.l,param1.l,param2.l,param3.l,param4.l,param5.l}
  ;!dll_CallDirect
  !dll_Call{*dlladdr,ret.l,param1,param2,param3,param4,param5}
  Function Return ret
End Function


Function.l dll_Call6{*dlladdr.l,param1.l,param2.l,param3.l,param4.l,param5.l,param6.l}
  ;!dll_CallDirect
  !dll_Call{*dlladdr,ret.l,param1,param2,param3,param4,param5,param6}
  Function Return ret
End Function


Function.l dll_Call7{*dlladdr.l,param1.l,param2.l,param3.l,param4.l,param5.l,param6.l,param7.l}
  ;!dll_CallDirect
  !dll_Call{*dlladdr,ret.l,param1,param2,param3,param4,param5,param6,param7}
  Function Return ret
End Function


Function.l dll_Call8{*dlladdr.l,param1.l,param2.l,param3.l,param4.l,param5.l,param6.l,param7.l,param8.l}

  GetRegD0 param8
  MOVE.l d0,a1

  !dll_Call{*dlladdr,ret.l,param1,param2,param3,param4,param5,param6,param7}
  Function Return ret
End Function


Function.l dll_Call9{*dlladdr.l,param1.l,param2.l,param3.l,param4.l,param5.l,param6.l,param7.l,param8.l,param9.l}

  GetRegD0 param8
  MOVE.l d0,a1
  
  GetRegD0 param9
  MOVE.l d0,a2
  
  !dll_Call{*dlladdr,ret.l,param1,param2,param3,param4,param5,param6,param7}
  Function Return ret
End Function


CNIF #__include=0
*myDLL.l = dll_Open{"my.dll"}
If *myDLL
  NPrint "Windows DLL opened!"
  dll_Close{*myDLL}
Else
  NPrint "Unable to open Windows DLL!"
End If
End

CEND

