; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 80000
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 9
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max ChunkyBuffer= 2
; /XTRA
; agle.include.bb2 automatically generated by FD2Include (Thilo Koehler)

CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
WBStartup
CEND

XINCLUDE "error.include.ab3"

; Library offsets:
#_LVO_GLEBASE_registerGLE       = -30
#_LVO_GLEBASE_gleGetJoinStyle   = -36
#_LVO_GLEBASE_gleSetJoinStyle   = -42
#_LVO_GLEBASE_gleGetNumSlices   = -48
#_LVO_GLEBASE_gleSetNumSlices   = -54
#_LVO_GLEBASE_glePolyCylinder   = -60
#_LVO_GLEBASE_glePolyCone       = -66
#_LVO_GLEBASE_gleExtrusion      = -72
#_LVO_GLEBASE_gleTwistExtrusion = -78
#_LVO_GLEBASE_gleSuperExtrusion = -84
#_LVO_GLEBASE_gleSpiral         = -90
#_LVO_GLEBASE_gleLathe          = -96
#_LVO_GLEBASE_gleHelicoid       = -102
#_LVO_GLEBASE_gleToroid         = -108
#_LVO_GLEBASE_gleScrew          = -114
#_LVO_GLEBASE_gleTextureMode    = -120

SHARED *_gleBase.Library

; Helper Macros:
Macro __gleBase_SaveRegs
MOVE.l a4,-(a7) : MOVE.l a5,-(a7) : MOVE.l a6,-(a7) : MOVE.l d7,-(a7)
End Macro

Macro __gleBase_RestoreRegs
MOVE.l (a7)+,d7 : MOVE.l (a7)+,a6 : MOVE.l (a7)+,a5 : MOVE.l (a7)+,a4
End Macro


; Wrapper Macros:
Macro agle_registerGLE;{ret.l,ptr}
!__gleBase_SaveRegs
GetReg a0,`2
GetReg a6,*_gleBase
JSR _LVO_GLEBASE_registerGLE(a6)
!__gleBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro agle_gleGetJoinStyle;{ret.l}
!__gleBase_SaveRegs
GetReg a6,*_gleBase
JSR _LVO_GLEBASE_gleGetJoinStyle(a6)
!__gleBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro agle_gleSetJoinStyle;{ret.l,int_style}
!__gleBase_SaveRegs
GetReg d0,`2
GetReg a6,*_gleBase
JSR _LVO_GLEBASE_gleSetJoinStyle(a6)
!__gleBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro agle_gleGetNumSlices;{ret.l}
!__gleBase_SaveRegs
GetReg a6,*_gleBase
JSR _LVO_GLEBASE_gleGetNumSlices(a6)
!__gleBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro agle_gleSetNumSlices;{ret.l,int_slices}
!__gleBase_SaveRegs
GetReg d0,`2
GetReg a6,*_gleBase
JSR _LVO_GLEBASE_gleSetNumSlices(a6)
!__gleBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro agle_glePolyCylinder;{ret.l,int_npoints,gleDouble_point_array,float_color_array,gleDouble_radius}
!__gleBase_SaveRegs
GetReg d0,`2
GetReg a0,`3
GetReg a1,`4
GetReg fp0,`5
GetReg a6,*_gleBase
JSR _LVO_GLEBASE_glePolyCylinder(a6)
!__gleBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro agle_glePolyCone;{ret.l,int_npoints,gleDouble_point_array,float_color_array,gleDouble_radius_array}
!__gleBase_SaveRegs
GetReg d0,`2
GetReg a0,`3
GetReg a1,`4
GetReg a2,`5
GetReg a6,*_gleBase
JSR _LVO_GLEBASE_glePolyCone(a6)
!__gleBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro agle_gleExtrusion;{ret.l,int_ncp,gleDouble_contour,gleDouble_cont_normal,gleDouble_up,int_npoints,gleDouble_point_array,float_color_array}
!__gleBase_SaveRegs
GetReg d0,`2
GetReg a0,`3
GetReg a1,`4
GetReg a2,`5
GetReg d1,`6
GetReg a3,`7
GetReg d2,`8
GetReg a6,*_gleBase
JSR _LVO_GLEBASE_gleExtrusion(a6)
!__gleBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro agle_gleTwistExtrusion;{ret.l,int_ncp,gleDouble_contour,gleDouble_cont_normal,gleDouble_up,int_npoints,gleDouble_point_array,float_color_array,gleDouble_twist_array}
!__gleBase_SaveRegs
GetReg d0,`2
GetReg a0,`3
GetReg a1,`4
GetReg a2,`5
GetReg d1,`6
GetReg a3,`7
GetReg d2,`8
GetReg d3,`9
GetReg a6,*_gleBase
JSR _LVO_GLEBASE_gleTwistExtrusion(a6)
!__gleBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro agle_gleSuperExtrusion;{ret.l,int_ncp,gleDouble_contour,gleDouble_cont_normal,gleDouble_up,int_npoints,gleDouble_point_array,float_color_array,gleDouble_xform_array}
!__gleBase_SaveRegs
GetReg d0,`2
GetReg a0,`3
GetReg a1,`4
GetReg a2,`5
GetReg d1,`6
GetReg a3,`7
GetReg d2,`8
GetReg d3,`9
GetReg a6,*_gleBase
JSR _LVO_GLEBASE_gleSuperExtrusion(a6)
!__gleBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro agle_gleSpiral;{ret.l,int_ncp,gleDouble_contour,gleDouble_cont_normal,gleDouble_up,gleDouble_startRadius,gleDouble_drdTheta,gleDouble_startZ,gleDouble_dzdTheta,gleDouble_startXform,gleDouble_dXformdTheta,gleDouble_startTheta,gleDouble_sweepTheta}


!__gleBase_SaveRegs
GetReg d0,`2
GetReg a0,`3
GetReg a1,`4
GetReg a2,`5
GetReg fp0,`6
GetReg fp1,`7
GetReg fp2,`8
GetReg fp3,`9
GetReg a3,`10
GetReg d1,`11
GetReg fp4,`12
GetReg fp5,`13
GetReg a6,*_gleBase
JSR _LVO_GLEBASE_gleSpiral(a6)
!__gleBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro agle_gleLathe;{ret.l,int_ncp,gleDouble_contour,gleDouble_cont_normal,gleDouble_up,gleDouble_startRadius,gleDouble_drdTheta,gleDouble_startZ,gleDouble_dzdTheta,gleDouble_startXform,gleDouble_dXformdTheta,gleDouble_startTheta,gleDouble_sweepTheta}
!__gleBase_SaveRegs
GetReg d0,`2
GetReg a0,`3
GetReg a1,`4
GetReg a2,`5
GetReg fp0,`6
GetReg fp1,`7
GetReg fp2,`8
GetReg fp3,`9
GetReg a3,`10
GetReg d1,`11
GetReg fp4,`12
GetReg fp5,`13
GetReg a6,*_gleBase
JSR _LVO_GLEBASE_gleLathe(a6)
!__gleBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro agle_gleHelicoid;{ret.l,gleDouble_rToroid,gleDouble_startRadius,gleDouble_drdTheta,gleDouble_startZ,gleDouble_dzdTheta,gleDouble_startXform,gleDouble_dXformdTheta,gleDouble_startTheta,gleDouble_sweepTheta}
!__gleBase_SaveRegs
GetReg fp0,`2
GetReg fp1,`3
GetReg fp2,`4
GetReg fp3,`5
GetReg fp4,`6
GetReg a0,`7
GetReg a1,`8
GetReg fp5,`9
GetReg fp6,`10
GetReg a6,*_gleBase
JSR _LVO_GLEBASE_gleHelicoid(a6)
!__gleBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro agle_gleToroid;{ret.l,gleDouble_rToroid,gleDouble_startRadius,gleDouble_drdTheta,gleDouble_startZ,gleDouble_dzdTheta,gleDouble_startXform,gleDouble_dXformdTheta,gleDouble_startTheta,gleDouble_sweepTheta}
!__gleBase_SaveRegs
GetReg fp0,`2
GetReg fp1,`3
GetReg fp2,`4
GetReg fp3,`5
GetReg fp4,`6
GetReg a0,`7
GetReg a1,`8
GetReg fp5,`9
GetReg fp6,`10
GetReg a6,*_gleBase
JSR _LVO_GLEBASE_gleToroid(a6)
!__gleBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro agle_gleScrew;{ret.l,int_ncp,gleDouble_contour,gleDouble_cont_normal,gleDouble_up,gleDouble_startz,gleDouble_endz,gleDouble_twist}
!__gleBase_SaveRegs
GetReg d0,`2
GetReg a0,`3
GetReg a1,`4
GetReg a2,`5
GetReg fp0,`6
GetReg fp1,`7
GetReg fp2,`8
GetReg a6,*_gleBase
JSR _LVO_GLEBASE_gleScrew(a6)
!__gleBase_RestoreRegs
`1 = PutRegD0
End Macro

Macro agle_gleTextureMode;{ret.l,int_mode}
!__gleBase_SaveRegs
GetReg d0,`2
GetReg a6,*_gleBase
JSR _LVO_GLEBASE_gleTextureMode(a6)
!__gleBase_RestoreRegs
`1 = PutRegD0
End Macro


; Open/Close Library:
Function.l agle_OpenLib{@minVersion.l}
If (*_gleBase)
  If (minVersion<=*_gleBase\lib_Version) Then Function Return *_gleBase
  CloseLibrary_ *_gleBase : *_gleBase = 0
End If
If minVersion<0 Then minVersion = 0
*_gleBase = OpenLibrary_ ("agle.library",minVersion)
If *_gleBase
  ; (!) Do some other init stuff here...
Else
  If (minVersion>0)
    error{"Unable to open agle.library (v"+Str$(minVersion)+"+)!"}
  Else
    error{"Unable to open agle.library!"}
  End If
End If
Function Return *_gleBase
End Function

Statement agle_CloseLib?{}
If *_gleBase
  ; (!) Do some freeing stuff here that you inited in _gleBase_Init{}...
  CloseLibrary_ *_gleBase : *_gleBase = 0
End If
End Statement
!autoexit{agle_CloseLib}


; Wrapper Functions:
Function.l agle_registerGLE{_ptr.l}
If (agle_OpenLib{}) ; (!) put your min version here if needed!
  !agle_registerGLE{result.l,_ptr}
End If
Function Return result
End Function

Function.l agle_gleGetJoinStyle{}
If (agle_OpenLib{}) ; (!) put your min version here if needed!
  !agle_gleGetJoinStyle{result.l}
End If
Function Return result
End Function

Function.l agle_gleSetJoinStyle{_int_style.l}
If (agle_OpenLib{}) ; (!) put your min version here if needed!
  !agle_gleSetJoinStyle{result.l,_int_style}
End If
Function Return result
End Function

Function.l agle_gleGetNumSlices{}
If (agle_OpenLib{}) ; (!) put your min version here if needed!
  !agle_gleGetNumSlices{result.l}
End If
Function Return result
End Function

Function.l agle_gleSetNumSlices{_int_slices.l}
If (agle_OpenLib{}) ; (!) put your min version here if needed!
  !agle_gleSetNumSlices{result.l,_int_slices}
End If
Function Return result
End Function

Function.l agle_glePolyCylinder{_int_npoints.l,_gleDouble_point_array.l,_float_color_array.l,_gleDouble_radius.l}
If (agle_OpenLib{}) ; (!) put your min version here if needed!
  !agle_glePolyCylinder{result.l,_int_npoints,_gleDouble_point_array,_float_color_array,_gleDouble_radius}
End If
Function Return result
End Function

Function.l agle_glePolyCone{_int_npoints.l,_gleDouble_point_array.l,_float_color_array.l,_gleDouble_radius_array.l}
If (agle_OpenLib{}) ; (!) put your min version here if needed!
  !agle_glePolyCone{result.l,_int_npoints,_gleDouble_point_array,_float_color_array,_gleDouble_radius_array}
End If
Function Return result
End Function

Function.l agle_gleExtrusion{_int_ncp.l,_gleDouble_contour.l,_gleDouble_cont_normal.l,_gleDouble_up.l,_int_npoints.l,_gleDouble_point_array.l,_float_color_array.l}
If (agle_OpenLib{}) ; (!) put your min version here if needed!
  !agle_gleExtrusion{result.l,_int_ncp,_gleDouble_contour,_gleDouble_cont_normal,_gleDouble_up,_int_npoints,_gleDouble_point_array,_float_color_array}
End If
Function Return result
End Function

Function.l agle_gleTwistExtrusion{_int_ncp.l,_gleDouble_contour.l,_gleDouble_cont_normal.l,_gleDouble_up.l,_int_npoints.l,_gleDouble_point_array.l,_float_color_array.l,_gleDouble_twist_array.l}
If (agle_OpenLib{}) ; (!) put your min version here if needed!
  !agle_gleTwistExtrusion{result.l,_int_ncp,_gleDouble_contour,_gleDouble_cont_normal,_gleDouble_up,_int_npoints,_gleDouble_point_array,_float_color_array,_gleDouble_twist_array}
End If
Function Return result
End Function

Function.l agle_gleSuperExtrusion{_int_ncp.l,_gleDouble_contour.l,_gleDouble_cont_normal.l,_gleDouble_up.l,_int_npoints.l,_gleDouble_point_array.l,_float_color_array.l,_gleDouble_xform_array.l}
If (agle_OpenLib{}) ; (!) put your min version here if needed!
  !agle_gleSuperExtrusion{result.l,_int_ncp,_gleDouble_contour,_gleDouble_cont_normal,_gleDouble_up,_int_npoints,_gleDouble_point_array,_float_color_array,_gleDouble_xform_array}
End If
Function Return result
End Function

Function.l agle_gleSpiral{_int_ncp.l,_gleDouble_contour.l,_gleDouble_cont_normal.l,_gleDouble_up.l,_gleDouble_startRadius.l,_gleDouble_drdTheta.l,_gleDouble_startZ.l,_gleDouble_dzdTheta.l,_gleDouble_startXform.l,_gleDouble_dXformdTheta.l,_gleDouble_startT

heta.l,_gleDouble_sweepTheta.l}
If (agle_OpenLib{}) ; (!) put your min version here if needed!
  !agle_gleSpiral{result.l,_int_ncp,_gleDouble_contour,_gleDouble_cont_normal,_gleDouble_up,_gleDouble_startRadius,_gleDouble_drdTheta,_gleDouble_startZ,_gleDouble_dzdTheta,_gleDouble_startXform,_gleDouble_dXformdTheta,_gleDouble_startTheta,_gleDoub

le_sweepTheta}
End If
Function Return result
End Function

Function.l agle_gleLathe{_int_ncp.l,_gleDouble_contour.l,_gleDouble_cont_normal.l,_gleDouble_up.l,_gleDouble_startRadius.l,_gleDouble_drdTheta.l,_gleDouble_startZ.l,_gleDouble_dzdTheta.l,_gleDouble_startXform.l,_gleDouble_dXformdTheta.l,_gleDouble_startTh

eta.l,_gleDouble_sweepTheta.l}
If (agle_OpenLib{}) ; (!) put your min version here if needed!
  !agle_gleLathe{result.l,_int_ncp,_gleDouble_contour,_gleDouble_cont_normal,_gleDouble_up,_gleDouble_startRadius,_gleDouble_drdTheta,_gleDouble_startZ,_gleDouble_dzdTheta,_gleDouble_startXform,_gleDouble_dXformdTheta,_gleDouble_startTheta,_gleDoubl

e_sweepTheta}
End If
Function Return result
End Function

Function.l agle_gleHelicoid{_gleDouble_rToroid.l,_gleDouble_startRadius.l,_gleDouble_drdTheta.l,_gleDouble_startZ.l,_gleDouble_dzdTheta.l,_gleDouble_startXform.l,_gleDouble_dXformdTheta.l,_gleDouble_startTheta.l,_gleDouble_sweepTheta.l}
If (agle_OpenLib{}) ; (!) put your min version here if needed!
  !agle_gleHelicoid{result.l,_gleDouble_rToroid,_gleDouble_startRadius,_gleDouble_drdTheta,_gleDouble_startZ,_gleDouble_dzdTheta,_gleDouble_startXform,_gleDouble_dXformdTheta,_gleDouble_startTheta,_gleDouble_sweepTheta}
End If
Function Return result
End Function

Function.l agle_gleToroid{_gleDouble_rToroid.l,_gleDouble_startRadius.l,_gleDouble_drdTheta.l,_gleDouble_startZ.l,_gleDouble_dzdTheta.l,_gleDouble_startXform.l,_gleDouble_dXformdTheta.l,_gleDouble_startTheta.l,_gleDouble_sweepTheta.l}
If (agle_OpenLib{}) ; (!) put your min version here if needed!
  !agle_gleToroid{result.l,_gleDouble_rToroid,_gleDouble_startRadius,_gleDouble_drdTheta,_gleDouble_startZ,_gleDouble_dzdTheta,_gleDouble_startXform,_gleDouble_dXformdTheta,_gleDouble_startTheta,_gleDouble_sweepTheta}
End If
Function Return result
End Function

Function.l agle_gleScrew{_int_ncp.l,_gleDouble_contour.l,_gleDouble_cont_normal.l,_gleDouble_up.l,_gleDouble_startz.l,_gleDouble_endz.l,_gleDouble_twist.l}
If (agle_OpenLib{}) ; (!) put your min version here if needed!
  !agle_gleScrew{result.l,_int_ncp,_gleDouble_contour,_gleDouble_cont_normal,_gleDouble_up,_gleDouble_startz,_gleDouble_endz,_gleDouble_twist}
End If
Function Return result
End Function

Function.l agle_gleTextureMode{_int_mode.l}
If (agle_OpenLib{}) ; (!) put your min version here if needed!
  !agle_gleTextureMode{result.l,_int_mode}
End If
Function Return result
End Function


; User Functions...
Function.l agle_MyFunction{myParam.l}
If agle_OpenLib{}
  ; (!) Do here your stuff for this function.
  ; (!) The OpenLib call makes sure that your library is open when you need it!
  ; (!) A library function is called via macro like this: 
  !agle_registerGLE{myResult.l,_ptr.l}
  ; (!) Note: The first macro parameter is always the return value of the lib function as a long word, followed by the lib function parameters.
  ; (!) Note: Not all functions will return something meaningful. Read always the librarie's autodocs!
  ; (!) Note: Strings have to be passed as a pointer (&myString$) to the macro, no expressions are allowed!
End If
Function Return myResult
End Function


CNIF #__include=0

; (!) place your built-in demo here

End

CEND


