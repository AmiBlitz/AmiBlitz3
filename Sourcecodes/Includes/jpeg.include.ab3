; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "JpegDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 47
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 38
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 20
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: jpeg.include                                                          /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 29/12/2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements:  Amiblitz2.4                                                  /
;/                                                                             /
;/ Purpose:                                                                    /
;/ This is a include to support the image.include with jpeg functionality.     /
;/                                                                             /
;/ Abstract:                                                                   /
;/ This include is of not much use stand alone, as you can load and save ima:: /
;/ ges through the image.include, but you might want to have a look at the s:: /
;/ ource code for educational reasons.                                         /
;/                                                                             /
;/ User Constants: none                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
SYNTAX 2
OPTIMIZE 7
CEND
XINCLUDE "error.include.ab3"
XINCLUDE "file.include.ab3"
XINCLUDE "tempbuffer.include.ab3"
#F_LUT8=0
#F_RGB24=9 LSL 24
#F_ARGB32=11 LSL 24
 

NEWTYPE.JPEGDecHandle
ptr.l ; // Private!
End NEWTYPE

NEWTYPE.JPEGComHandle
ptr.l ; // Private!
End NEWTYPE

#DCT_ISLOW = 0 ;// Slow but accurate integer algorithm (Default)
#DCT_IFAST = 1 ;// Faster, less accurate integer method
#DCT_FLOAT = 2 ;// Floating-Point: accurate, fast On fast hardware

#JPCS_UNKNOWN   = 0 ; // Error/unspecified
#JPCS_GRAYSCALE = 1 ; // Monochrome
#JPCS_RGB       = 2 ; // Red/Green/Blue
#JPCS_YCbCr     = 3 ; // Y/Cb/Cr (also known as YUV)
#JPCS_CMYK      = 4 ; // C/M/Y/K
#JPCS_YCCK      = 5 ; // Y/Cb/Cr/K

#M_ALL   = $ffff
#M_APP1  = $e1
#M_APP2  = $e2
#M_APP3  = $e3
#M_APP4  = $e4
#M_APP5  = $e5
#M_APP6  = $e6
#M_APP7  = $e7
#M_APP8  = $e8
#M_APP9  = $e9
#M_APP10 = $ea
#M_APP11 = $eb
#M_APP12 = $ec
#M_APP13 = $ed
#M_APP14 = $ee ;/* Adobe marker - access this via the density Tags */
#M_APP15 = $ef
#M_COM   = $fe ;/* Text comment */

NEWTYPE.JPEGMarker
mk_Node.MinNode
mk_ID.l
mk_Exists.b ; // TRUE if exists, FALSE if not
mk_Length.l ; // Length in bytes, can be 0
mk_Data.l   ; // NULL for no data
End NEWTYPE

; /*========================================================================*/
; /* Adobe density values */
#DENSITYUNITS_UNSPECIFIED = -1
#DENSITYUNITS_UNKNOWN     =  0
#DENSITYUNITS_DOTSINCH    =  1
#DENSITYUNITS_DOTSCM      =  2

; /*========================================================================*/
; /* Jpeg tagbase */
#JPG_TB = ( #TAG_USER + $80000 )

; /* Jpeg Tags requiring V1.0 */
#JPG_SrcMemStream           = #JPG_TB + 1 ; /* Pointer To stream Data in memory (UBYTE *) */
#JPG_SrcMemStreamSize       = #JPG_TB + 2 ; /* Length in bytes of Data stream (ULONG) */
#JPG_DestMemStream          = #JPG_TB + 3 ; /* Pointer To a Pointer To created Data in memory (UBYTE **) */
#JPG_DestMemStreamSize      = #JPG_TB + 4 ; /* Pointer To take size of created Data (ULONG *) */
#JPG_SrcFile                = #JPG_TB + 5 ; /* Pointer To an open File (BPTR) */
#JPG_DestFile               = #JPG_TB + 6 ; /* Pointer To an open File (BPTR) */
#JPG_DestRGBBuffer          = #JPG_TB + 7 ; /* Pointer To a memory Block (UBYTE *) */
#JPG_DecompressHook         = #JPG_TB + 8 ; /* Pointer To a Function To store scan lines */
#JPG_DecompressUserData     = #JPG_TB + 9 ; /* Pointer To user Data (void *) */
#JPG_SrcRGBBuffer           = #JPG_TB + 12 ; /* Pointer To a memory Block (UBYTE *) */
#JPG_CompressHook           = #JPG_TB + 13 ; /* Pointer To a Function To store scan lines */
#JPG_CompressUserData       = #JPG_TB + 14 ; /* Pointer To user Data (void *) */

; /* Jpeg Tags affecting image size AND quality */
#JPG_ScaleNum               = #JPG_TB + 10 ; /* Numerator For scaling (ULONG) */
#JPG_ScaleDenom             = #JPG_TB + 11 ; /* Denomenator For scaling (ULONG) */
#JPG_Width                  = #JPG_TB + 20 ; /* Width of image in pixels (ULONG *) */
#JPG_Height                 = #JPG_TB + 21 ; /* Height of image in pixels (ULONG *) */
#JPG_BytesPerPixel          = #JPG_TB + 22 ; /* Number of bytes per image pixel (ULONG *) */
#JPG_RowSize                = #JPG_TB + 23 ; /* Size of one row (ULONG *) [Get only] */
#JPG_ColourSpace            = #JPG_TB + 24 ; /* Type of image Data */
#JPG_Quality                = #JPG_TB + 25 ; /* Save quality of jpeg (1-100) () */
#JPG_Smoothing              = #JPG_TB + 26 ; /* Save smoothing amount (0-100) () */

; /* Jpeg Tags requiring V2.1 */
#JPG_ProgressHook           = #JPG_TB + 15 ; /* Pointer To a Function To display progress status */
#JPG_ProgressUserData       = #JPG_TB + 16 ; /* Pointer To user Data (void *) */

; /* Jpeg Tags requiring V3.0 */
#JPG_MemoryPool             = #JPG_TB + 17 ; /* All de/allocs are On this memory pool (void *) [U] */
#JPG_RenderHook             = #JPG_TB + 18 ; /* Pointer To a Function To render decoded scan lines */
#JPG_RenderUserData         = #JPG_TB + 19 ; /* Pointer To user Data (void *) */

; /* Jpeg Tags requiring V4.0 */
#JPG_DCTMethod              = #JPG_TB + 27 ; /* Use this DCT method [U] */

; /* Jpeg Tags requiring V5.0 */
#JPG_BlockSmoothing        = #JPG_TB + 28 ; /* If True, apply Block smoothing in the decoder (BOOL) [U] */
#JPG_Progressive           = #JPG_TB + 29 ; /* If True, jpeg streams are CREATED in progressive mode (BOOL) [U] */

; /* Jpeg Tags requiring V6.0 */
#JPG_ReadMarker            = #JPG_TB + 30 ; /* Set To M_? To capture a marker in the decompression Object (defined above) */
#JPG_WriteMarker           = #JPG_TB + 31 ; /* Pass in a Pointer To a struct JPEGMarker */
#JPG_MarkerList            = #JPG_TB + 32 ; /* Get/set a Pointer To the captured marker List (Read in from a decompression Object) (struct MinList *) */
#JPG_MarkerFirst           = #JPG_TB + 33 ; /* Get the first marker in the List with M_?, OR Null To retrieve the first available marker (Default) (NOTE the value supplied To this tag is a shortcut For JPG_MarkerType) (ULONG) */
#JPG_MarkerNext            = #JPG_TB + 34 ; /* Get the Next marker in the List, given the Pointer To an existing jpeg marker (retrieved from this Function) (struct JPEGMarker *) */
#JPG_MarkerType            = #JPG_TB + 35 ; /* When getting a marker from the List, Get this Type M_? OR Null For any marker (Default) (ULONG) */
#JPG_MarkerExists          = #JPG_TB + 36 ; /* When getting a marker from the List, True returns markers that actually exist, False returns every marker (Default) (BOOL) */
#JPG_DensityUnits          = #JPG_TB + 37 ; /* Adobe density units defined above, defaults To DENSITYUNITS_UNSPECIFIED [G|S] (BYTE) */
#JPG_XDensity              = #JPG_TB + 38 ; /* Adobe X density, defaults To 1 [G|S] (LONG) */
#JPG_YDensity              = #JPG_TB + 39 ; /* Adobe Y density, defaults To 1 [G|S] (LONG) */
#JPG_FancyUpsampling       = #JPG_TB + 40 ; /* Apply fancy upsampling To image decompression, defaults To True (BOOL) [U] */
#JPG_UseAsyncIO            = #JPG_TB + 41 ; /* Use asyncio.library For disk access, defaults To False (BOOL) [U] */
#JPG_SrcFilename           = #JPG_TB + 42 ; /* Char * To a filename To Use as the source stream (char *) [U] */
#JPG_SrcAsyncFile          = #JPG_TB + 43 ; /* Pointer To an open async File (struct AsyncFile *) [U] */
#JPG_ProcessLines          = #JPG_TB + 44 ; /* Process a number of scan lines before calling hooks, defaults To 1 (LONG) */

; /*========================================================================*/
; /* Defined error Return codes */
#JPGERR_NONE           = 0 ; /* No error */
#JPGERR_NOMEMORY       = 1 ; /* Insufficient memory */
#JPGERR_NOHANDLE       = 2 ; /* No jpeg Handle supplied */
#JPGERR_CREATEOBJECT   = 3 ; /* Failed To create JPEG Object */
#JPGERR_DECOMPFAILURE  = 4 ; /* Failed To decompress */
#JPGERR_NOSRCSTREAM    = 5 ; /* No source stream To decode */
#JPGERR_NODESTBUFFER   = 6 ; /* No destination RGB Buffer/hook */
#JPGERR_DECOMPABORTED  = 7 ; /* Decompression aborted by user hook */
#JPGERR_NODESTSTREAM   = 8 ; /* No destination stream pointers */
#JPGERR_COMPFAILURE    = 9 ; /* Failed To compress */
#JPGERR_COMPABORTED    = 10 ; /* Compression aborted by user hook */
#JPGERR_NOIMAGESIZE    = 11 ; /* No image size supplied */
#JPGERR_ALREADYDECOMP  = 12 ; /* Handle has already been decompressed */
#JPGERR_ALREADYCOMP    = 13 ; /* Handle has already been compressed */
#JPGERR_NOTJPEG        = 14 ; /* The stream is NOT jpeg Format */
#JPGERR_ARITHNOTSUPP   = 15 ; /* Arithmetic encoded jpeg streams are NOT supported */
#JPGERR_CORRUPTJPEG    = 16 ; /* The jpeg stream is corrupt */


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.l = jpeg_Write {fid.l,*rp.RastPort,img_width.l,img_height.l:: /
;/ ,@quality.l,@smoothing.l,@noprogressive.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Write a rastport as an jpeg encoded image to a file.                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : file object ID (file.include)                                  /
;/ - *rp.RastPort    : pointer to a rastport, must be high or true color       /
;/ - img_width.l    : image width                                              /
;/ - img_height.l    : image height                                            /
;/ - quality.l    : image quality [1...100], where 1 is very bad quality but:: /
;/ small file size, and 100 is best quality but big file size (default is 85)  /
;/ - smoothing.l    : apply smooting during encoding [0...100], where 0 is n:: /
;/ o smoothing, 100 is maximum smoothing (default is 0)                        /
;/ - noprogressive.l    : 0 = encode as progressive jpeg, -1 = normal jpeg (:: /
;/ default is -1)                                                              /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.l     : -1 if everything went well, 0 otherwise                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l jpeg_Write {fid.l,*rp.RastPort,img_width.l,img_height.l,@quality.l,@smoothing.l,@noprogressive.l}
succ.l = False
;bmaplock.l = LockBitMapTagList_(*bmap,Tags(#LBMI_BASEADDRESS,&raw_ptr.l,@@
;                                           #LBMI_BYTESPERROW,&bpr.l,@@
;                                           #LBMI_BYTESPERPIX,&bpp.l))
;img_width.l = GetBitMapAttr_(*bmap,#BMA_WIDTH)
;img_height.l = GetBitMapAttr_(*bmap,#BMA_HEIGHT)
d.l = GetBitMapAttr_(*rp\BitMap,#BMA_DEPTH)
;UnLockBitMap_ bmaplock

If d<16 Then error {"jpeg_write: RastPort has to be Hi/True color !"} : Function Return False

If quality<1 Then quality=85 ; default compression level
If quality>100 Then quality=100
If noprogressive Then progressive.l = False:Else progressive=True
If smoothing<0 Then smoothing=0
If smoothing>100 Then smoothing = 100

err.l = AllocJPEGCompressA_(&jph.l, Tags(#JPG_DestMemStream, &cstream.l,@@
                                         #JPG_DestMemStreamSize, &cstreamsize.l ))
If err=#JPGERR_NONE
  temp.l = tempbuffer_Get{img_width*img_height*3}
  If temp
    ; convert pixelarray to RGB
    dmod.l = img_width*3
    ReadPixelArray_ temp,0,0,dmod,*rp,0,0,img_width,img_height,#RECTFMT_RGB
    err = CompressJPEGA_ (jph, Tags(#JPG_SrcRGBBuffer,temp,@@
                                    #JPG_Width,img_width,@@
                                    #JPG_Height,img_height,@@
                                    #JPG_Progressive,progressive,@@
                                    #JPG_Smoothing,smoothing,@@
                                    #JPG_Quality,quality))
    If err=#JPGERR_NONE
      If cstream
        succ=file_WriteMem{fid,cstream,cstreamsize}
        FreeVec_ cstream
      End If
    Else
      error {"jpeg_write: Error while saving JPEG! (err #"+Str$(err)+")"}
    End If
  Else
    error {"jpeg_write: Not enough memory for temp buffer!"}
  End If
  FreeJPEGCompress_ jph
Else
  error {"jpeg_write: Error creating JPEG handle! (err #"+Str$(err)+")"}
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = jpeg_Read {fid.l}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l jpeg_Read {fid.l}
fh.l = file_GetFH{fid}
;fl.l = file_GetLock{dos}
err.l = AllocJPEGDecompressA_(&jph.l, Tags(#JPG_SrcFile,fh))
If err=#JPGERR_NONE

Else
  jph = 0
End If
Function Return jph
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = jpeg_GetWidth {jph.l}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - jph.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l jpeg_GetWidth{jph.l}
If jph Then count.l = GetJPEGInfoA_(jph,Tags(#JPG_Width,&img_width.l))
Function Return img_width
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = jpeg_GetHeight {jph.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - jph.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l jpeg_GetHeight{jph.l}
If jph Then count.l = GetJPEGInfoA_(jph,Tags(#JPG_Height,&img_height.l))
Function Return img_height
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = jpeg_Decode {jph.l,*rp.RastPort}                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - jph.l    : ???                                                            /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l jpeg_Decode {jph.l,*rp.RastPort}
succ.l = False
If jph
  count.l = GetJPEGInfoA_(jph,Tags(#JPG_Width,&img_width.l,#JPG_Height,&img_height.l))
  temp.l = tempbuffer_Get{img_width*img_height*3}
  dmod.l = img_width*3
  If temp
    err.l = DecompressJPEGA_ (jph, Tags(#JPG_DestRGBBuffer,temp))
    If err=#JPGERR_NONE
      WritePixelArray_ temp,0,0,dmod,*rp,0,0,img_width,img_height,#RECTFMT_RGB
      succ.l = True
    Else
      error {"jpeg_Decode: Error decoding JPEG! (err #"+Str$(err)+")"}
    End If
  Else
    error {"jpeg_Decode: Not enough memory for temp buffer!"}
  End If
  FreeJPEGDecompress_ jph
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = jpeg_Find {memP.l,memsize.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - memP.l    : ???                                                           /
;/ - memsize.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l jpeg_Find {memP.l,memsize.l}
err.l = AllocJPEGDecompressA_(&jph.l, Tags(#JPG_SrcMemStream,memP,#JPG_SrcMemStreamSize,memsize))
Function Return jph
End Function


