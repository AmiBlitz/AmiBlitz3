; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "textDemo"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 4
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 34
; CursorColumn    = 32
; LabelSearch     = "pas"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: texteditor.include                                                    /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
XINCLUDE "error.include.ab3"
error {"This include has no built-in demo!"}
End
CELSE
XINCLUDE "font.include.ab3"
XINCLUDE "window.include.ab3"
XINCLUDE "strptr.include.ab3"
XINCLUDE "clipboard.include.ab3"

#tuited_wrap_left         = $1
#tuited_wrap_right        = $2
#tuited_marker_loose      = $4
#tuited_del_wrap          = $8
#tuited_entf_wrap         = $10
#tuited_cursor_drag       = $20
#tuited_cursor_hidebymark = $40
#tuited_shiftmark         = $80
#tuited_drawstat          = $100
#tuited_breakreturn       = $200
#tuited_backup            = $400
#tuited_autoindent        = $800
#tuited_scrollredraw      = $2000
#tuited_cursorstyle       = $4000
#tuited_readonly          = $8000
#tuited_noxscroll         = $10000
#tuited_noyscroll         = $20000
#tuited_realtab           = $40000



#tuited_notepad           = #tuited_wrap_left|#tuited_wrap_right|#tuited_marker_loose|#tuited_del_wrap|#tuited_entf_wrap|#tuited_cursor_drag|#tuited_cursor_hidebymark|#tuited_shiftmark|#tuited_breakreturn|#tuited_realtab
#tuited_ped               = 0
#tuited_message           = #tuited_readonly|#tuited_cursor_hidebymark|#tuited_marker_loose|#tuited_cursorstyle|#tuited_wrap_left|#tuited_wrap_right|#tuited_shiftmark|#tuited_noxscroll|#tuited_noyscroll

CNIF @#support_c=0
  #support_c=0
CEND

CNIF @#support_ab2=0
  #support_ab2=0
CEND


CNIF @#support_monkey=0
  #support_monkey=0
CEND

CNIF @#c_nocasesense = 0
  #c_nocasesense = 0
CEND
 


#monkeylib_internal   = 0
#monkeylib_object     = 1
#monkeylib_location   = 2
#monkeylib_statement  = 3
#monkeylib_function   = 4
#monkeylib_constant   = 5
#monkeylib_global     = 6  ; 4
#monkeylib_global2    = 10 ; 4

#max_stringbuffer = 400000

#tflag_none    = 0
#tflag_comment = 1
#tflag_init    = 2
#tflag_detokenized = 4

NEWTYPE.tline  ; Line contains ASCII text and special tokenized version
clength.l
text.l      ; pointer to 0 terminated text string
blength.l

tclength.l
ttext.l     ; tokenized version of text
tblength.l

flags.l ; like #tflag_comment
;tuiflags.l  ; flags for the whole line of text like "#tui_tag_bold"
End NEWTYPE

;NEWTYPE.textarray
;End NEWTYPE
#return_win  = 1
#return_amiga = 2
#return_unix  = 3

NEWTYPE.tuited
doc.l;textarray     ; Zeiger auf Pointer array
max_lines.l   ; Maximum Numer of Textlines
max_width.l
lines_used.l  ; Number of used lines in Ted
top_line.l
cursor_lpos.l
cursor_cpos.l
cursor_pixpos.l
marker1_lpos.l
marker1_cpos.l
marker2_lpos.l
marker2_cpos.l
damage_begin.l
damage_end.l
bracket1_lpos.l
bracket1_cpos.l
bracket1_char.b
bracket2_char.b
bracket2_lpos.l
bracket2_cpos.l

last_flags.l
*font.l
fontstolen.l
fontheight.l
rowheight.l
spacing.l
is_open.l
win.l
*xwin.Window
space_width.l
tab_width.l
*rp.RastPort
tuiobj.l
editable.l
undo.l

view_x.l
cursor_show.l
cursor_count.l

stat_cursor_lpos.l
stat_cursor_cpos.l

pen_text.l
pen_back.l
pen_marker.l
rgb_marker.l
pen_textmarker.l
pen_cursor.l
pen_cursor_text.l

pen_highlight.b

range_lpos.l
range_cpos.l
search_lpos.l
search_cpos.l

filename.l
flags.l

; Prefs

path.l
fil.l
pattern.l
fontsize.l
fontname.l
wrap_left.l
wrap_right.l
del_wrap.l
entf_wrap.l
blink_speed.l
tabsize.l
realtab.l
cursor_drag.l
marker_loose.l
cursor_hidebymark.l
returncode.l
shiftmark.l
max_cpos.l
draw_stat.l
autoindent.l
tokenizing.l
forcetoken.l
breakreturn.l
scrollborder_x.l
scrollborder_y.l
scrollredraw.l
cursor_style.l
token_pen.l[128]
token_mark.l[128]
End NEWTYPE


NEWTYPE.token_list
tokenid.l
libnum.l
uname.s
End NEWTYPE

NEWTYPE.token_array
name.s
help.s
End NEWTYPE


NEWTYPE.tokenengine
max_tokens.l
is_init.l
last_tokenid.l
libname.s[256]
End NEWTYPE



#pen_ab2_token      =  1
#pen_ab2_number     =  2
#pen_ab2_newtype    =  3
#pen_ab2_constant   =  4
#pen_ab2_comment    =  5
#pen_ab2_macro      =  6
#pen_ab2_text       =  7
#pen_ab2_string     =  8
#pen_ab2_function   =  9

#pen_c_text         = 11
#pen_c_directive    = 12
#pen_c_keyword      = 13
#pen_c_string       = 14
#pen_c_comment      = 15
#pen_c_number       = 16

#pen_html_text      = 20
#pen_html_string    = 21
#pen_html_number    = 22
#pen_html_tag       = 23
#pen_html_tagattr   = 24
#pen_html_char      = 25

#pen_text           =  0

#pen_monkey_statement = 30
#pen_monkey_number  = 31
#pen_monkey_constant= 32
#pen_monkey_comment = 33
#pen_monkey_macro   = 34
#pen_monkey_text    = 35
#pen_monkey_string  = 36
#pen_monkey_function= 37
#pen_monkey_internal= 38
#pen_monkey_global  = 39
#pen_monkey_local   = 40
#pen_monkey_location= 41
#pen_monkey_object  = 42

#pen_hex_offset     = 43
#pen_hex_data       = 44
#pen_hex_ascii      = 45
#pen_hex_number     = 46
#pen_hex_other      = 47

#tokenize_unknown=-1
#tokenize_ascii  = 0
#tokenize_html   = 1
#tokenize_ab2    = 2
#tokenize_monkey = 3
#tokenize_bo     = 4
#tokenize_c      = 5
#tokenize_hex    = 6

#undoid_delete      = 1
#undoid_delete_line = 2
#undoid_insert      = 3
#undoid_insert_line = 4

USEPATH *ted

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !line_use {lpos}                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ #monkeylib_global     = 6  ; 4                                              /
;/ #monkeylib_global2    = 10 ; 4                                              /
;/ text.l      ; pointer to 0 terminated text string                           /
;/ ttext.l     ; tokenized version of text                                     /
;/ flags.l ; like #tflag_comment                                               /
;/ tuiflags.l  ; flags for the whole line of text like "#tui_tag_bold"         /
;/ NEWTYPE.textarray                                                           /
;/ base.tline[8191]                                                            /
;/ End NEWTYPE                                                                 /
;/ doc.l;textarray     ; Zeiger auf Pointer array                              /
;/ max_lines.l   ; Maximum Numer of Textlines                                  /
;/ lines_used.l  ; Number of used lines in Ted                                 /
;/ Prefs                                                                       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - lpos    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro line_use ; {lpos}
If (`1) < *ted\max_lines AND (`1)>=0
  *tline.tline = Peek.l(*ted\doc + ((`1) * 4))
Else
  *tline       = 0
End If
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !line2_use {lpos}                                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - lpos    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro line2_use ; {lpos}
*tline2.tline = Peek.l(*ted\doc + ((`1) * 4))
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !linex_use {linename,lpos}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - linename    : ???                                                         /
;/ - lpos    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro linex_use ; {linename, lpos}
*`1.tline = Peek.l(*ted\doc + ((`1) * 4))
End Macro


#init_maxlines = 256
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_copymem {sourceaddr.l,destaddr.l,blength.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ base.tline = Peek.l(*ted\doc) + Index * 4                                   /
;/ base\text ; ...                                                             /
;/                                                                             /
;/ *                                                                           /
;/  void asm_copymem {sourceaddr.l,destaddr.l,blength.l}                       /
;/                                                                             /
;/  Same as copymem_, but faster and memory areas can overlap!                 /
;/                                                                             /
;/ *                                                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - blength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_copymem {sourceaddr.l,destaddr.l,blength.l}
UNLK a4
TST.l d2
BLE copy_exit
MOVE.l d0,a0
MOVE.l d1,a1
MOVE.l d2,d3
CMP.l d0,d1
BLT copy_normal
BEQ copy_exit
ADD.l d2,a0
ADD.l d2,a1
copy_reverse: ; --------------------------------- REVERSE
LSR.l #5,d3
BEQ copy_reverse_norow
copy_reverse_row:
MOVE.l -(a0),-(a1) ;1
MOVE.l -(a0),-(a1) ;2
MOVE.l -(a0),-(a1) ;3
MOVE.l -(a0),-(a1) ;4
MOVE.l -(a0),-(a1) ;5
MOVE.l -(a0),-(a1) ;6
MOVE.l -(a0),-(a1) ;7
MOVE.l -(a0),-(a1) ;8
SUB.l #1,d3
BGT copy_reverse_row
copy_reverse_norow:
AND.l #31,d2
BEQ copy_exit
copy_reverse_byte:
MOVE.b -(a0),-(a1)
SUB.l #1,d2
BGT copy_reverse_byte
copy_exit:
RTS
copy_normal: ; ------------------------------------ NORMAL
LSR.l #5,d3
BEQ copy_normal_norow
copy_normal_row:
MOVE.l (a0)+,(a1)+  ;1
MOVE.l (a0)+,(a1)+  ;2
MOVE.l (a0)+,(a1)+  ;3
MOVE.l (a0)+,(a1)+  ;4
MOVE.l (a0)+,(a1)+  ;5
MOVE.l (a0)+,(a1)+  ;6
MOVE.l (a0)+,(a1)+  ;7
MOVE.l (a0)+,(a1)+  ;8
SUB.l #1,d3
BGT copy_normal_row
copy_normal_norow:
AND.l #31,d2
BEQ copy_exit
copy_normal_byte:
MOVE.b (a0)+,(a1)+
SUB.l #1,d2
BGT copy_normal_byte
RTS
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_lock {*ted.tuited}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ copy_reverse: ; --------------------------------- REVERSE                   /
;/ copy_normal: ; ------------------------------------ NORMAL                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_lock {*ted.tuited}
If *ted
  If \win>=0 Then win_Lock {\win}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_unlock {*ted.tuited}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_unlock {*ted.tuited}
If *ted
  If \win>=0 Then win_Unlock {\win}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_draw_stat {*ted.tuited,text.s,@force.l}                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - text.s    : ???                                                           /
;/ - force.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_draw_stat {*ted.tuited,text.s,@force.l}
SHARED tuidat(),tuiengine
If \draw_stat
If \win>=0
  If tuidat(\win,\tuiobj)\visible
    y1.l = tuidat(\win,\tuiobj)\y+tuidat(\win,\tuiobj)\ys+ tuiengine\space*3+2  +tuiengine\fontsize_med
    If text.s><""
      tui_print {\win,tuidat(\win,\tuiobj)\x,y1,tuidat(\win,\tuiobj)\xs,text.s,#tui_tag_nframe}
    Else
      If \cursor_cpos><\stat_cursor_cpos OR \stat_cursor_lpos >< \cursor_lpos OR force
      tui_print {\win,tuidat(\win,\tuiobj)\x,y1,tuidat(\win,\tuiobj)\xs,"Line: "+Str$(\cursor_lpos+1)+" Pos: "+Str$(\cursor_cpos+1),#tui_tag_nframe}
      \stat_cursor_lpos = \cursor_lpos
      \stat_cursor_cpos = \cursor_cpos
      End If
    End If
  End If
End If
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_changed {*ted.tuited}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_changed {*ted.tuited}
Function Return undo_GetNumChanges {\undo}
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !ted_tokenengine name,maxlibs,maxtokens                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro ted_tokenengine ; name, maxlibs, maxtokens
DEFTYPE.tokenengine te_`1
#max_libs_`1   = `2
#max_tokens_`1 = `3
Dim tl_`1.token_list(#max_libs_`1*#max_tokens_`1)
Dim ta_`1.token_array(#max_libs_`1,#max_tokens_`1)


; remove all tokens so far!
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_flushtokens_`1 {}                                               /
;/                                                                             /
;/ Description:                                                                /
;/ remove all tokens so far!                                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_flushtokens_`1 {}
SHARED tl_`1(),ta_`1(),te_`1

te_`1\max_tokens=0
For lib.l = 0 To #max_libs_`1 -1
  For tok.l = 0 To #max_tokens_`1-1
  n.l = lib*#max_tokens_`1 + tok
  tl_`1(n)\tokenid = 0
  tl_`1(n)\libnum  = 0
  tl_`1(n)\uname   = ""
  ta_`1(lib,tok)\name = ""
  ta_`1(lib,tok)\help = ""
  Next
Next
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_addtoken_`1 {tokenname.s,libnum.l,tokenid.l,help.s,@nocasesen:: /
;/ se.l}                                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - tokenname.s    : ???                                                      /
;/ - libnum.l    : ???                                                         /
;/ - tokenid.l    : ???                                                        /
;/ - help.s    : ???                                                           /
;/ - nocasesense.l    : ???                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_addtoken_`1 {tokenname.s,libnum.l,tokenid.l,help.s,@nocasesense.l}
SHARED tl_`1(),ta_`1(),te_`1

If tokenid>=#max_tokens_`1 AND "`1"="ab2"
  libnum  = libnum + tokenid / #max_tokens_`1
  tokenid = tokenid MOD #max_tokens_`1
End If

If libnum>=0 AND tokenid>=0 AND libnum<#max_libs_`1 AND tokenid<#max_tokens_`1
  If ta_`1(libnum,tokenid)\name=""
  ta_`1(libnum,tokenid)\name = tokenname.s
  ta_`1(libnum,tokenid)\help = help.s
  If nocasesense Then uname.s = UCase$(tokenname.s) : Else uname.s = tokenname.s
  n1.l      = 0
  n2.l      = te_`1\max_tokens-1
  n.l       = te_`1\max_tokens/2

  While n1<n2
    If uname.s>tl_`1(n)\uname
      n1=n+1
      n = (n+n2+1)/2
    Else
      If uname.s=tl_`1(n)\uname
        n1=n
        n2=n
        ; libclash!
      Else
        n2=n-1
        n=(n+n1)/2
      End If
    End If
  Wend

  If n<te_`1\max_tokens
    If uname.s>tl_`1(n)\uname Then n+1
  End If

  For m.l=te_`1\max_tokens-1 To n Step-1
    tl_`1(m+1)\tokenid = tl_`1(m)\tokenid
    tl_`1(m+1)\libnum  = tl_`1(m)\libnum
    tl_`1(m+1)\uname   = tl_`1(m)\uname
  Next
  tl_`1(n)\tokenid = tokenid
  tl_`1(n)\libnum  = libnum
  tl_`1(n)\uname   = uname.s
  te_`1\max_tokens+1
  End If
Else
  error {"Invalid tokenid/libnum: "+Str$(tokenid)+"/"+Str$(libnum)+": "+tokenname.s}
EndIf
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_findtoken_`1 {*ted.tuited,tokenname.s,@nocasesens:: /
;/ e.l}                                                                        /
;/                                                                             /
;/ Description:                                                                /
;/         ; libclash!                                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - tokenname.s    : ???                                                      /
;/ - nocasesense.l    : ???                                                    /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_findtoken_`1 {*ted.tuited,tokenname.s,@nocasesense.l}
SHARED te_`1,tl_`1()
If nocasesense Then tokenname.s = UCase$(tokenname.s)
tid.l = -1
If tokenname.s><""
  n1.l      = 0
  n2.l      = te_`1\max_tokens-1
  n.l       = te_`1\max_tokens/2

  While n1<n2
    If tokenname.s>tl_`1(n)\uname
      n1=n+1
      n = (n+n2+1)/2
    Else
      If tokenname.s=tl_`1(n)\uname
        n1=n
        n2=n
      Else
        n2=n-1
        n=(n+n1)/2
      End If
    End If
  Wend

  If tl_`1(n)\uname = tokenname.s
    tid.l = (tl_`1(n)\libnum LSL 16) +tl_`1(n)\tokenid
  End If

End If
Function Return tid
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = ted_tokenname_`1 {*ted.tuited,tid.l}                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - tid.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ted_tokenname_`1 {*ted.tuited,tid.l}
SHARED te_`1,ta_`1()
Function Return ta_`1((tid LSR 16),tid&$ffff)\name
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = ted_tokenhelp_`1 {*ted.tuited,tid.l}                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - tid.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ted_tokenhelp_`1 {*ted.tuited,tid.l}
SHARED te_`1,ta_`1()
Function Return ta_`1((tid LSR 16),tid&$ffff)\help
End Function

End Macro

CNIF #support_ab2
!ted_tokenengine {ab2,256,128}
CEND
CNIF #support_monkey
CNIF @#monkey_libs=0
  #monkey_libs = 15
CEND
CNIF @#monkey_tokens=0
  #monkey_tokens = 255
CEND

!ted_tokenengine {monkey,#monkey_libs,#monkey_tokens}
CEND
CNIF #support_c
!ted_tokenengine {c,3,200}
CEND


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_init_scroller {*ted.tuited,win.l,tuiobj.l}                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_init_scroller {*ted.tuited,win.l,tuiobj.l}
SHARED tuidat()
If *ted
tuidat(win,tuiobj)\view_ys = \lines_used : If tuidat(win,tuiobj)\view_ys<1 Then tuidat(win,tuiobj)\view_ys =1
If\rowheight<1 Then \rowheight=1
tuidat(win,tuiobj)\view_yf = tuidat(win,tuiobj)\ys / \rowheight : If tuidat(win,tuiobj)\view_yf<1 Then tuidat(win,tuiobj)\view_yf=1
tuidat(win,tuiobj)\view_yo = \top_line
tuidat(win,tuiobj)\view_xs = \max_width : If tuidat(win,tuiobj)\view_xs<1 Then tuidat(win,tuiobj)\view_xs=1
tuidat(win,tuiobj)\view_xf = tuidat(win,tuiobj)\xs : If tuidat(win,tuiobj)\view_xf<1 Then tuidat(win,tuiobj)\view_xf=1
tuidat(win,tuiobj)\view_xo = \view_x
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_update_scroller {*ted.tuited,@upd.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - upd.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_update_scroller {*ted.tuited,@upd.l}
SHARED tuidat()
If \win>=0
  ted_init_scroller {*ted,\win,\tuiobj}
  If tuidat(\win,\tuiobj)\visible
    win.l = \win
    tuiobj.l = \tuiobj
    If tuidat(\win,\tuiobj)\ttags&#tui_tag_nframe=0 AND upd=True

    scalerx.l = \view_x/32768+1
    scalery.l = tuidat(\win,\tuiobj)\view_ys/32768+1

    scroller_value.l    = tuidat(\win,\tuiobj)\view_yo  / scalery
    scroller_minvalue.l = tuidat(\win,\tuiobj)\view_yf  / scalery
    scroller_maxvalue.l = tuidat(\win,\tuiobj)\view_ys  / scalery

    GTSetAttrs win,tuiobj+$2000,#GTSC_Total,scroller_maxvalue ,#GTSC_Visible,scroller_minvalue,#GTSC_Top,scroller_value
   ;GTSetAttrs win,tuiobj+$2000,#GTSC_Total,tuidat(win,tuiobj)\view_ys,#GTSC_Visible,tuidat(win,tuiobj)\view_yf,#GTSC_Top,tuidat(win,tuiobj)\view_yo

    scroller_value.l    = tuidat(\win,\tuiobj)\view_xo  / scalerx
    scroller_minvalue.l = tuidat(\win,\tuiobj)\view_xf  / scalerx
    scroller_maxvalue.l = tuidat(\win,\tuiobj)\view_xs  / scalerx

    GTSetAttrs win,tuiobj+$1000,#GTSC_Total,scroller_maxvalue ,#GTSC_Visible,scroller_minvalue,#GTSC_Top,scroller_value

      ;GTSetAttrs win,tuiobj+$1000,#GTSC_Total,tuidat(win,tuiobj)\view_xs,#GTSC_Visible,tuidat(win,tuiobj)\view_xf,#GTSC_Top,tuidat(win,tuiobj)\view_xo
    End If
  End If
End If
End Statement




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_attach_tuiobj {*ted.tuited,win.l,tuiobj.l}                      /
;/                                                                             /
;/ Description:                                                                /
;/    ;GTSetAttrs win,tuiobj+$2000,#GTSC_Total,tuidat(win,tuiobj)\view_ys,#G:: /
;/ TSC_Visible,tuidat(win,tuiobj)\view_yf,#GTSC_Top,tuidat(win,tuiobj)\view_yo /
;/       ;GTSetAttrs win,tuiobj+$1000,#GTSC_Total,tuidat(win,tuiobj)\view_xs:: /
;/ ,#GTSC_Visible,tuidat(win,tuiobj)\view_xf,#GTSC_Top,tuidat(win,tuiobj)\vi:: /
;/ ew_xo                                                                       /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - win.l    : ???                                                            /
;/ - tuiobj.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_attach_tuiobj {*ted.tuited,win.l,tuiobj.l}
SHARED tuidat()
If *ted
\win    = win
\tuiobj = tuiobj
\xwin   = Peek.l(Addr Window(win))
\rp     = RastPort(\win)
If Used Screen>=0
  a.s = " "
  *scr.Screen = Peek.l(Addr Screen(Used Screen))
  \space_width = font_GetTextLength{*scr\RastPort,&a.s,1,\font}
  If \space_width<=0 Then \space_width=8
  \tab_width = \space_width*\tabsize
End If
If tuidat(\win,\tuiobj)\ttags & #tui_tag_below Then \draw_stat=True:Else \draw_stat=False
ted_update_scroller {*ted}
Else
   error {"Tried to attach a non-exisiting ted !"}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_instr {textptr.l,c.b,mlen.l,@pos.l}                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - textptr.l    : ???                                                        /
;/ - c.b    : ???                                                              /
;/ - mlen.l    : ???                                                           /
;/ - pos.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST ted_instr {textptr.l,c.b,mlen.l,@pos.l}
If pos<0 Then pos = 0
While Peek.b(textptr+pos)><c AND pos<mlen:pos+1:Wend
If pos=mlen Then pos=-1
Function Return pos
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_textlength {*rp.RastPort,textptr.l,mlen.l}          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/ - textptr.l    : ???                                                        /
;/ - mlen.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_textlength {*rp.RastPort,textptr.l,mlen.l}
pos.l = ted_instr{textptr,9,mlen}
If pos<0
  slen.l = TextLength_(*rp,textptr,mlen)
Else
  lpos.l=0
  While pos>=0
    If pos-lpos>0 Then slen.l + TextLength_(*rp,textptr+lpos,pos-lpos)
    lpos.l = pos+1
    pos.l = ted_instr{textptr,9,mlen,lpos}
    slen + 50
  Wend
  If mlen-lpos>0 Then slen.l + TextLength_(*rp,textptr+lpos,mlen-lpos)
End If
Function Return slen
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_text {*rp.RastPort,textptr.l,mlen.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/ - textptr.l    : ???                                                        /
;/ - mlen.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST ted_text {*rp.RastPort,textptr.l,mlen.l}
pos.l = ted_instr{textptr,9,mlen}
If pos<0
  slen.l = Text_(*rp,textptr,mlen)
Else
  lpos.l=0
  apen.l = *rp\FgPen
  bpen.l = *rp\BgPen
  While pos>=0
    If pos-lpos>0
      Text_ *rp,textptr+lpos,pos-lpos
    End If
    lpos.l = pos+1
    pos.l = ted_instr{textptr,9,mlen,lpos}
    SetAPen_ *rp,bpen
    RectFill_ *rp,*rp\cp_x,*rp\cp_y-*rp\TxBaseline,*rp\cp_x+50,*rp\cp_y-*rp\TxBaseline+*rp\TxHeight
    SetAPen_ *rp,apen
    Move_ *rp,*rp\cp_x+50,*rp\cp_y
  Wend
  If mlen-lpos>0 Then Text_ *rp,textptr+lpos,mlen-lpos
End If
End Statement
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_detach_tuiobj {*ted.tuited}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_detach_tuiobj {*ted.tuited}
SHARED tuidat()
\win    = -1
\tuiobj = -1
\xwin   = False
\rp     = False
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_setclip {*ted.tuited}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_setclip {*ted.tuited}
SHARED tuidat(),tuiengine
If \win>=0
  If tuidat(\win,\tuiobj)\visible
    win_SetClip {\win,tuidat(\win,\tuiobj)\x,tuidat(\win,\tuiobj)\y,tuidat(\win,\tuiobj)\x+tuidat(\win,\tuiobj)\xs-1,tuidat(\win,\tuiobj)\y+tuidat(\win,\tuiobj)\ys-1}
  End If
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_remclip {*ted.tuited}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_remclip {*ted.tuited}
SHARED tuidat(),tuiengine
If \win>=0
  If tuidat(\win,\tuiobj)\visible
    win_RemoveClip{\win}
  End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_y2line {*ted.tuited,y.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - y.l    : ???                                                              /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_y2line {*ted.tuited,y.l}
lpos.l = ((y) / \rowheight + \top_line)
If lpos>=\lines_used Then lpos=\lines_used-1
If lpos<0 Then lpos=0
Function Return lpos
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_x2pos_x {*ted.tuited,lpos.l,x.l}                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - x.l    : ???                                                              /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_x2pos_x {*ted.tuited,lpos.l,x.l}
If \rp
SetFont_ \rp,\font
cpos.l = 0
!line_use {lpos}
If *tline
  If *tline\text
    While x>0
      If cpos<*tline\clength
        x-ted_textlength {\rp,*tline\text + cpos,1}
      Else
        x-\space_width
      End If
      If x>=0 Then cpos+1
    Wend
    clength.l = *tline\clength
  Else
    cpos = x / \space_width  : clength = 0
  End If
Else
  cpos = x / \space_width  : clength = 0
End If
If \wrap_right AND cpos>clength Then cpos=clength
Else
  cpos=0
End If
Function Return cpos
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_line2y {*ted.tuited,lpos.l}                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_line2y {*ted.tuited,lpos.l}
Function Return (lpos-\top_line) * \rowheight
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = ted_detokenize {str_ptr.l,@clength.l}                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - str_ptr.l    : ???                                                        /
;/ - clength.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ted_detokenize {str_ptr.l,@clength.l}
string.s=""
;error {"Detokenize"}
If str_ptr
  If clength<0 Then clength = Peek.l(str_ptr-4)
  While clength>0
    a.s = Peek.s(str_ptr)
    If a.s><""
      string.s + a.s
    End If
    str_ptr+FLen(a.s)+1
    clength-FLen(a.s)-1
    If clength>0
     str_ptr+1
     clength-1
    End If
  Wend
End If
;error {"Detokenize done: "+string.s}
Function Return string.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_tokenlength {*ted.tuited,str_ptr.l,@clength.l}      /
;/                                                                             /
;/ Description:                                                                /
;/ error {"Detokenize"}                                                        /
;/ error {"Detokenize done: "+string.s}                                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - str_ptr.l    : ???                                                        /
;/ - clength.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_tokenlength {*ted.tuited,str_ptr.l,@clength.l}
x.l = 0
If str_ptr
  If clength<0 Then clength = Peek.l(str_ptr-4)
  While clength>0
    slen.l=0
    While Peek.b(str_ptr+slen)><0 AND slen<clength: slen+1:Wend
    If slen>0
      x.l + ted_textlength {\rp,str_ptr,slen}
    End If
    str_ptr+slen+1
    clength-slen-1
    If clength>0
     str_ptr+1
     clength-1
    End If
  Wend
End If
Function Return x
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_tokenlength2 {*ted.tuited,str_ptr.l,@clength.l}     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - str_ptr.l    : ???                                                        /
;/ - clength.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_tokenlength2 {*ted.tuited,str_ptr.l,@clength.l}
x.l = 0
If str_ptr
  If clength<0 Then clength = Peek.l(str_ptr-4)
  While clength>0
    slen.l=0
    While Peek.b(str_ptr+slen)><0 AND slen<clength: slen+1:Wend
    If slen>0
      x.l + ted_textlength {\rp,str_ptr,slen}
    End If
    str_ptr+slen+2
    clength-slen
  Wend
End If
Function Return x
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_pos2x {*ted.tuited,lpos.l,cpos.l}                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - cpos.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_pos2x {*ted.tuited,lpos.l,cpos.l}
x.l = 0
If \rp
  SetFont_ \rp,\font
  !line_use {lpos}
  If *tline
    If *tline\text
      If cpos>=*tline\clength
        If *tline\ttext AND *tline\tclength>0
          ;string.s = ted_detokenize {*tline\ttext,*tline\tclength}
          ;x.l = ted_textlength {\rp,&string.s,Flen(string.s}} + \space_width * (cpos-Flen(string.s})
          x.l = ted_tokenlength {*ted,*tline\ttext,*tline\tclength} + \space_width * (cpos-*tline\clength)
        Else
          x.l = ted_textlength {\rp,*tline\text,*tline\clength} + \space_width * (cpos-*tline\clength)
        End If
      Else
        If *tline\ttext AND *tline\tclength>0
          ;string.s = ted_detokenize {*tline\ttext,*tline\tclength}
          ;x.l = ted_textlength {\rp,&string.s,cpos}
          x.l = ted_tokenlength2{*ted,*tline\ttext,cpos}
        Else
          x.l = ted_textlength {\rp,*tline\text,cpos}
        End If
      End If
    Else
      x = \space_width * cpos
    End If
  Else
    x = \space_width * cpos
  End If
End If
Function Return x
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_pos2cw {*ted.tuited,lpos.l,cpos.l}                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - cpos.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_pos2cw {*ted.tuited,lpos.l,cpos.l}
cw.l = \space_width
If \rp
  SetFont_ \rp,\font
  !line_use {lpos}
  If *tline
    If *tline\text
      If cpos>=*tline\clength
        cw.l = \space_width
      Else
        If *tline\ttext
          string.s = ted_detokenize {*tline\ttext,*tline\tclength}
          cw.l = ted_textlength {\rp,&string.s+cpos,1}
          ;cw.l = ted_tokenlength {*ted,*tline\ttext+cpos,1}
        Else
          cw.l = ted_textlength {\rp,*tline\text+cpos,1}
        End If
      End If
    End If
  End If
End If
Function Return cw-1
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_x2pos {*ted.tuited,lpos.l,x.l}                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - x.l    : ???                                                              /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_x2pos {*ted.tuited,lpos.l,x.l}
If \rp
SetFont_ \rp,\font
cpos.l = 0
!line_use {lpos}
If *tline
  If *tline\text
    If *tline\ttext AND *tline\tclength>0
      string.s = ted_detokenize {*tline\ttext,*tline\tclength}
    Else
      string.s = Peek.s(*tline\text)
    End If

    slen.l = FLen(string.s)

    While x>0
      If cpos<slen
        x-ted_textlength {\rp,&string.s + cpos,1}
      Else
        x-\space_width
      End If
      If x>=0 Then cpos+1
    Wend
    clength.l = slen ; *tline\clength
  Else
    cpos = x / \space_width  : clength = 0
  End If
Else
  cpos = x / \space_width  : clength = 0
End If
If \wrap_right AND cpos>clength Then cpos=clength
Else
  cpos=0
End If
Function Return cpos
End Function




;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !parser_setpen color                                                /
;/                                                                             /
;/ Description:                                                                /
;/     clength.l = slen ; *tline\clength                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro parser_setpen ; color
If cbrain<127 Then cbrain +1
tui_cb(cbrain)=`1
Poke.b tokenline,0
Poke.b tokenline+1,tui_cb(cbrain)
tokenline+2
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !parser_rempen                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro parser_rempen
If cbrain>0 Then cbrain -1
Poke.b tokenline,0
Poke.b tokenline+1,tui_cb(cbrain)
tokenline+2
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !parser_changepen color                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro parser_changepen ; color
tui_cb(cbrain)=`1
Poke.b tokenline,0
Poke.b tokenline+1,tui_cb(cbrain)
tokenline+2
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !parser_put                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro parser_put
Poke.b tokenline,char
tokenline+1
End Macro



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_isnumber {name.s}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - name.s    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_isnumber {name.s}
succ.l = True
minlen.l = 1
c.b = Peek.b(&name.s)

n.l = 0
If c=@"$" OR c=@"#" Then hex.l=True:n=1:minlen=2:Else hex=False
If c=@"-" OR c=@"+" Then n=1 : minlen=2
While n.l<FLen(name.s)
  c.b = Peek.b(&name.s+n)
  If c>=@"0" AND c<=@"9" OR c=@"."
  Else
    If hex AND ((c>=@"a" AND c<=@"f") OR (c>=@"A" AND c<=@"F"))
    Else
      If c><@"x" OR n><1
        succ=False :n=FLen(name.s)-1
      Else
        hex=True
        minlen=3
      End If
    End If
  End If
  n+1
Wend
If FLen(name.s)<minlen Then succ=False
Function Return succ
End Function

Dim tui_cb.l(128)
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_do_html {*ted.tuited,*tline.tline}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - *tline.tline    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_do_html {*ted.tuited,*tline.tline}
SHARED tui_cb(),tuipen()
tblength.l = *tline\clength * 5 +8
If tblength>*tline\tblength OR *tline\ttext=0
  If *tline\ttext Then FreeMem_ *tline\ttext,*tline\tblength : *tline\ttext=0
  tokenline.l = AllocMem_(tblength,0)
Else
  tblength.l  = *tline\tblength
  tokenline.l = *tline\ttext
End If
If tokenline
  *tline\ttext = tokenline
  tui_cb(0) = #pen_html_text
  cbrain.l = 0
  !parser_setpen {#pen_html_text}
  tag.l = False
  quoted.l = False
  bquoted.l =False

  extra.l=False
  If *tline\text
    For n.l = 0 To *tline\clength-1
      char.b = Peek.b(*tline\text+n)
      Select char
        Case @"<"
          !parser_setpen {#pen_html_tag}
          !parser_put
          tag.l = True
        Case @">"
          !parser_changepen{#pen_html_tag}
          !parser_put
          !parser_rempen
          tag.l = False
        Case @" "
          If tag AND (quoted=False AND bquoted=False )
            !parser_changepen{#pen_html_tagattr}
            ;tag=False
          End If
          If extra Then !parser_rempen : extra=False
          !parser_put

        Case 34
          If bquoted=False
            quoted=1-quoted
            If quoted
              !parser_setpen {#pen_html_string }
              !parser_put
            Else
              !parser_put
              !parser_rempen
            End If
          Else
            !parser_put
          End If
        Case @"'"
          If quoted=False
            bquoted=1-bquoted
            If bquoted
              !parser_setpen {#pen_html_string }
              !parser_put
            Else
              !parser_put
              !parser_rempen
            End If
          Else
            !parser_put
          End If

        Case @"&"
          If quoted=False AND bquoted=False
            !parser_setpen{#pen_html_char}
            extra.l = True
          End If
          !parser_put

        Case @";"
          !parser_put
          If extra Then !parser_rempen:extra=False

        Default
          If tag
            If (char>=@"1" AND char<=@"9") OR char=@"0" OR char=@"$" OR char=@"#"
              !parser_setpen {#pen_html_number}
              !parser_put
              char.b = Peek.b(*tline\text+n+1)
              While ((char>=@"1" AND char<=@"9") OR char=@"0" OR char=@"$" OR char=@"." OR char=@"%" OR (char>=@"a" AND char<=@"f") OR (char>=@"A" AND char<=@"F")) AND n<*tline\clength
                !parser_put
                n+1
                char.b = Peek.b(*tline\text+n+1)
              Wend
              !parser_rempen
            Else
              !parser_put
            End If
          Else
            !parser_put
          End If

      End Select
    Next
    Poke.b tokenline,0
    *tline\tclength = tokenline-*tline\ttext
    *tline\tblength = tblength
  End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_do_hex {*ted.tuited,*tline.tline}                               /
;/                                                                             /
;/ Description:                                                                /
;/             ;tag=False                                                      /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - *tline.tline    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_do_hex {*ted.tuited,*tline.tline}
SHARED tui_cb(),tuipen()
tblength.l = *tline\clength * 5 +8
If tblength>*tline\tblength OR *tline\ttext=0
  If *tline\ttext Then FreeMem_ *tline\ttext,*tline\tblength : *tline\ttext=0
  tokenline.l = AllocMem_(tblength,0)
Else
  tblength.l  = *tline\tblength
  tokenline.l = *tline\ttext
End If
If tokenline
  *tline\ttext = tokenline
  tui_cb(0) = #pen_text
  cbrain.l = 0
  !parser_setpen {#pen_hex_offset}
  tag.l = False
  quoted.l = False

  extra.l=False
  invalid.l = False
  hex.l = 0
  If *tline\text
    For n.l = 0 To *tline\clength-1
      char.b = Peek.b(*tline\text+n)
      Select char
        Case @":"
          If hex=0
            !parser_put
            !parser_setpen {#pen_hex_data}
            hex.l = 1
          Else
            !parser_put
          End If
        Case @"|"
          If hex=1
            !parser_rempen
            hex.l = 2
            !parser_put
            !parser_setpen {#pen_hex_ascii}
          Else
            !parser_put
          End If

        Default
          If hex=2
            If (char>=@"1" AND char<=@"9") OR char=@"0"
              !parser_setpen {#pen_hex_number}
              !parser_put
              char.b = Peek.b(*tline\text+n+1)
              While ((char>=@"1" AND char<=@"9") OR char=@"." OR char=@"%" OR (char>=@"a" AND char<=@"f") OR (char>=@"A" AND char<=@"F")) AND n<*tline\clength
                !parser_put
                n+1
                char.b = Peek.b(*tline\text+n+1)
              Wend
              !parser_rempen
            Else
              If char>127 OR char<32
                If invalid=False
                  !parser_setpen{#pen_hex_other}
                  invalid=True
                End If
              Else
                If invalid
                  !parser_rempen
                  invalid=False
                End If
              End If
              !parser_put

            End If
          Else
            !parser_put
          End If

      End Select
    Next
    Poke.b tokenline,0
    *tline\tclength = tokenline-*tline\ttext
    *tline\tblength = tblength
  End If
End If
End Statement


CNIF #support_ab2


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_do_ab2 {*ted.tuited,*tline.tline}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - *tline.tline    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_do_ab2 {*ted.tuited,*tline.tline}
SHARED tui_cb(),tuipen(),te_ab2
tblength.l = *tline\clength * 5 +8
If tblength>*tline\tblength OR *tline\ttext=0
  If *tline\ttext Then FreeMem_ *tline\ttext,*tline\tblength : *tline\ttext=0
  tokenline.l = AllocMem_(tblength,0)
Else
  tblength.l  = *tline\tblength
  tokenline.l = *tline\ttext
End If
If tokenline
  *tline\ttext = tokenline
  tui_cb(0) = #pen_ab2_text
  quoted.l = False
  cbrain.l = 0
  !parser_setpen {#pen_ab2_text}
  eol.l = 0
  wasdata.l = 0
  lastundeftoken.l=0
  breakspace.l=False
  If *tline\text
    For n.l = 0 To *tline\clength-1
      char.b = Peek.b(*tline\text+n)
      If quoted=False
        c.b = char
        dotpos.l = -1
        m.l = n
        name.s = ""
        While ((c>=@"a" AND c<=@"z") OR (c>=@"A" AND c<=@"Z") OR c=@"_" OR (c>=@"0" AND c<=@"9") OR c=@"$" OR c=@"@" OR c=@".") AND m<*tline\clength
          name.s + Chr$(c)
          If c.b=@"." Then dotpos=m-n
          If c.b=@"$" Then dotpos=m-n
          m+1
          c.b = Peek.b(*tline\text+m)
        Wend
        If name.s><""

          tid.l = ted_findtoken_ab2 {*ted,name.s}

          If Peek.b(&name.s+dotpos)=@"$" AND dotpos><FLen(name.s)-1 Then dotpos=-1

          If tid<0 AND dotpos>0
            nodotname.s = Left$(name.s,dotpos)
            tid = ted_findtoken_ab2 {*ted,nodotname.s}
            If tid>=0 Then dotname.s = Right$(name.s,FLen(name.s)-dotpos) :  name.s = nodotname.s : m = n+dotpos
            wasdata=1
          End If

          If tid>=0
            wasdata=1
            te_ab2\last_tokenid = tid
            tname.s = ted_tokenname_ab2{*ted,tid.l}
            !parser_setpen {#pen_ab2_token}
            Poke.s tokenline,tname.s
            tokenline+FLen(tname.s)
            If \forcetoken Then CopyMem_ &tname.s,*tline\text+n,FLen(name.s)
            !parser_rempen
          Else
            If ted_isnumber{name.s}
              !parser_setpen {#pen_ab2_number}
              Poke.s tokenline,name.s
              tokenline+FLen(name.s)
              !parser_rempen
            Else

              If (dotpos=0 AND wasdata><0) OR dotpos>0
                Poke.s tokenline,Left$(name.s,dotpos)
                tokenline + dotpos
                !parser_setpen {#pen_ab2_constant}
                 Poke.s tokenline,Right$(name.s,FLen(name.s)-dotpos)
                 tokenline + FLen(name.s)-dotpos
                 !parser_rempen
              Else
                If tui_cb(cbrain)= #pen_ab2_text
                  !parser_setpen {#pen_ab2_text}
                  lastundeftoken=tokenline-1
                End If
                Poke.s tokenline,name.s
                tokenline+FLen(name.s)
              End If
            End If
            wasdata=1
          End If
          n=m-1
        Else
          If char>@" " Then wasdata=1
          Select char
            Case @"#"
              !parser_setpen {#pen_ab2_constant}
              !parser_put
              breakspace.l = True
            Case @"!"
              !parser_setpen {#pen_ab2_macro}
              !parser_put
              breakspace.l = True
            Case @"\"
              If tui_cb(cbrain)><#pen_ab2_newtype
                !parser_setpen {#pen_ab2_newtype}
              End If
              !parser_put
              breakspace.l = True
            Case @":"
              If breakspace Then !parser_rempen:breakspace=False
              !parser_put
              wasdata=0

            Case @" "
              If breakspace Then !parser_rempen:breakspace=False
              !parser_put

            Case 34
              quoted=True
              !parser_setpen {#pen_ab2_string}
              !parser_put

            Case @"{"
              If lastundeftoken
                Poke.b lastundeftoken,#pen_ab2_function
              End If
              !parser_changepen {#pen_ab2_text}
              !parser_put

            Case @";"
              !parser_setpen {#pen_ab2_comment}
              eol=True
              !parser_put

            Default
              If breakspace
                If (char>=@"a" AND char<=@"z") OR (char>=@"A" AND char<=@"Z") OR char=@"_" OR (char>=@"1" AND char<=@"9") OR char=@"0"
                Else
                  !parser_rempen
                  breakspace=False
                End If
              End If
              !parser_put
          End Select

        End If
      Else
        !parser_put
        If char=34 Then !parser_rempen : quoted=False
      End If

      If eol
        clength.l = *tline\clength-n
        If clength>0 Then Then CopyMem_ *tline\text+n+1,tokenline,clength
        tokenline+clength
        n=*tline\clength
      End If
    Next
    Poke.b tokenline,0
    *tline\tclength = tokenline-*tline\ttext
    *tline\tblength = tblength
  End If
End If
End Statement

CEND


CNIF #support_c

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_do_c {*ted.tuited,*tline.tline,flags.l}             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - *tline.tline    : ???                                                     /
;/ - flags.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_do_c {*ted.tuited,*tline.tline,flags.l}
SHARED tui_cb(),te_c
tblength.l = *tline\clength * 5 +8
If tblength>*tline\tblength OR *tline\ttext=0
  If *tline\ttext Then FreeMem_ *tline\ttext,*tline\tblength : *tline\ttext=0
  tokenline.l = AllocMem_(tblength,0)
Else
  tblength.l  = *tline\tblength
  tokenline.l = *tline\ttext
End If
If tokenline
  *tline\ttext = tokenline
  tui_cb(0) = #pen_c_text
  quoted.l = False
  cbrain.l = 0
  !parser_setpen {#pen_c_text}

  eol.l = 0
  breakspace.l = False


  If flags&#tflag_init
    flags=*tline\flags
  End If

  *tline\flags = flags

  If flags&#tflag_comment
    !parser_setpen {#pen_c_comment}
  End If

  If *tline\text
    For n.l = 0 To *tline\clength-1
      While (flags&#tflag_comment) AND n<*tline\clength
        Repeat
         char.b = Peek.b(*tline\text+n)
         !parser_put
          n+1
        Until char=@"*" OR n>=*tline\clength
        If Peek.b(*tline\text+n)=@"/"
          flags = (flags | #tflag_comment) - #tflag_comment
          char.b = Peek.b(*tline\text+n)
          !parser_put
          !parser_rempen
          n+1
        End If
      Wend
      If n<*tline\clength
      char.b = Peek.b(*tline\text+n)
      If quoted=False
      c.b = char
      m.l = n
      name.s = ""
      While ((c>=@"a" AND c<=@"z") OR (c>=@"A" AND c<=@"Z") OR c=@"_" OR (c>=@"1" AND c<=@"9") OR c=@"0" OR c=@"#" OR c=@"$" OR c=@"@") AND m<*tline\clength
        name.s + Chr$(c)
        m+1
        c.b = Peek.b(*tline\text+m)
      Wend
      If name.s><""
        tid.l = ted_findtoken_c {*ted,name.s,#c_nocasesense}
        If tid>=0
          te_c\last_tokenid = tid
          tname.s = ted_tokenname_c{*ted,tid.l}
          Select tid LSR 16
            Case 0 ; Statement
              !parser_setpen {#pen_c_keyword}
            Case 1 ; Function
              !parser_setpen {#pen_c_directive}
            Default ; Vars ...
              !parser_setpen {#pen_c_keyword}
          End Select

          Poke.s tokenline,tname.s
          tokenline+FLen(tname.s)
          If \forcetoken Then CopyMem_ &tname.s,*tline\text+n,FLen(name.s)
          !parser_rempen
        Else
          If ted_isnumber{name.s}
            !parser_setpen {#pen_c_number}
            Poke.s tokenline,name.s
            tokenline+FLen(name.s)
            !parser_rempen
          Else
            Poke.s tokenline,name.s
            tokenline+FLen(name.s)
          End If
        End If
        n=m-1
      Else

      Select char
        Case @" "
          If breakspace Then !parser_rempen:breakspace=False
          !parser_put

        Case @"'"
          quoted=True
          !parser_setpen {#pen_c_string}
          !parser_put

        Case 34
          quoted=True
          !parser_setpen {#pen_c_string}
          !parser_put
        Case @"/"
          If Peek.b(*tline\text+n+1)=@"/"
            !parser_setpen {#pen_c_comment}
            eol=True
          Else
           If Peek.b(*tline\text+n+1)=@"*"
            !parser_setpen {#pen_c_comment}
            ;eol=True
            flags = (flags | #tflag_comment)
            !parser_put
            n+1
            char.b = Peek.b(*tline\text+n)
           End If
          End If
          !parser_put
        Case @"*"
          If flags&#tflag_comment
            If Peek.b(*tline\text+n+1)=@"/"
              !parser_put
              !parser_rempen
              flags = (flags | #tflag_comment) - #tflag_comment
              n+1
            End If
          End If
          !parser_put

        Default
          If breakspace
            If (char>=@"a" AND char<=@"z") OR (char>=@"A" AND char<=@"Z") OR char=@"_" OR (char>=@"1" AND char<=@"9") OR char=@"0"
            Else
              !parser_rempen
              breakspace=False
            End If
          End If
          !parser_put
      End Select
      End If
      Else
        !parser_put
        If char=34 OR char=@"'" Then !parser_rempen : quoted=False
      End If
      If eol
        clength.l = *tline\clength-n-1
        If clength>0 Then Then CopyMem_ *tline\text+n+1,tokenline,clength
        tokenline+clength
        n=*tline\clength
      End If
      End If
    Next
    Poke.b tokenline,0
    *tline\tclength = tokenline-*tline\ttext
    *tline\tblength = tblength
  End If

  skip_c_tokenizing:

End If
Function Return flags
End Function

CEND


CNIF #support_monkey
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_do_monkey {*ted.tuited,*tline.tline}                            /
;/                                                                             /
;/ Description:                                                                /
;/        ; Case @"@"                                                          /
;/        ;   !parser_setpen {#pen_token}                                      /
;/           ;!parser_put                                                      /
;/        ;   Poke.s tokenline,tname.s                                         /
;/        ;   tokenline+Flen(name.s)                                          /
;/        ;   !parser_rempen                                                   /
;/           ;breakspace = True                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - *tline.tline    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_do_monkey {*ted.tuited,*tline.tline}
SHARED tui_cb(),te_monkey
tblength.l = *tline\clength * 5 +8
If tblength>*tline\tblength OR *tline\ttext=0
  If *tline\ttext Then FreeMem_ *tline\ttext,*tline\tblength : *tline\ttext=0
  tokenline.l = AllocMem_(tblength,0)
Else
  tblength.l  = *tline\tblength
  tokenline.l = *tline\ttext
End If
If tokenline
  *tline\ttext = tokenline
  tui_cb(0) = #pen_monkey_text
  quoted.l = False

  cbrain.l = 0

  !parser_setpen {#pen_monkey_text}
  eol.l = 0
  breakspace.l=False
  If *tline\text
    For n.l = 0 To *tline\clength-1
      char.b = Peek.b(*tline\text+n)
      If quoted=False
      c.b = char
      m.l = n
      name.s = ""
      While ((c>=@"a" AND c<=@"z") OR (c>=@"A" AND c<=@"Z") OR c=@"_" OR (c>=@"0" AND c<=@"9") OR c=@"#" OR c=@"$" OR c=@"@" OR c=@"" ) AND m<*tline\clength
        name.s + Chr$(c)
        m+1
        c.b = Peek.b(*tline\text+m)
      Wend
      If name.s><""
        tid.l = ted_findtoken_monkey {*ted,name.s}
        If tid>=0
          te_monkey\last_tokenid = tid
          tname.s = ted_tokenname_monkey{*ted,tid.l}
          Select tid LSR 16
            Case #monkeylib_statement ; Statement
              !parser_setpen {#pen_monkey_statement}
            Case #monkeylib_function ; Function
              !parser_setpen {#pen_monkey_function}
            Case #monkeylib_constant ; Const
              !parser_setpen {#pen_monkey_constant}
            Case #monkeylib_internal ; Buildin
              !parser_setpen {#pen_monkey_internal}
            Case #monkeylib_location ; Location
              !parser_setpen {#pen_monkey_location}
            Case #monkeylib_object ; Object
              !parser_setpen {#pen_monkey_object}
            Default ; Global Vars ...
              !parser_setpen {#pen_monkey_global}
          End Select

          Poke.s tokenline,tname.s
          tokenline+FLen(tname.s)
          If \forcetoken Then CopyMem_ &tname.s,*tline\text+n,FLen(name.s)
          !parser_rempen
        Else
          If ted_isnumber{name.s}
            !parser_setpen {#pen_monkey_number}
            Poke.s tokenline,name.s
            tokenline+FLen(name.s)
            !parser_rempen
          Else
            If char=@"@"
              !parser_setpen {#pen_monkey_macro}
            Else
              If char=@"."         ; label
                !parser_setpen {#pen_monkey_text}
              Else
                !parser_setpen {#pen_monkey_local}
              End If
            End If
            Poke.s tokenline,name.s
            tokenline+FLen(name.s)
            !parser_rempen


          End If
        End If
        n=m-1
      Else

      Select char
        Case @" "
          If breakspace Then !parser_rempen:breakspace=False
          !parser_put

        Case 34
          quoted=True
          !parser_setpen {#pen_monkey_string}
          !parser_put
       ; Case @"@"
       ;   !parser_setpen {#pen_token}
          ;!parser_put
       ;   Poke.s tokenline,tname.s
       ;   tokenline+Flen(name.s)
       ;   !parser_rempen
          ;breakspace = True
        Case @";"
          !parser_setpen {#pen_monkey_comment}
          eol=True
          !parser_put

        Default
          If breakspace
            If (char>=@"a" AND char<=@"z") OR (char>=@"A" AND char<=@"Z") OR char=@"_" OR (char>=@"1" AND char<=@"9") OR char=@"0" OR char=@"." OR char=@"/"
            Else
              !parser_rempen
              breakspace=False
            End If
          End If
          !parser_put
      End Select
      End If
      Else
        !parser_put
        If char=34 Then !parser_rempen : quoted=False
      End If
      If eol
        clength.l = *tline\clength-n-1
        If clength>0 Then Then CopyMem_ *tline\text+n+1,tokenline,clength
        tokenline+clength
        n=*tline\clength
      End If
    Next
    Poke.b tokenline,0
    *tline\tclength = tokenline-*tline\ttext
    *tline\tblength = tblength
  End If
End If
End Statement
CEND

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_line_settokencase {*ted.tuited}                                 /
;/                                                                             /
;/ Description:                                                                /
;/        ; Case @"@"                                                          /
;/        ;   !parser_setpen {#pen_token}                                      /
;/           ;!parser_put                                                      /
;/        ;   Poke.s tokenline,tname.s                                         /
;/        ;   tokenline+Flen(name.s)                                          /
;/        ;   !parser_rempen                                                   /
;/           ;breakspace = True                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_line_settokencase {*ted.tuited}
If *ted\tokenizing = #tokenize_monkey OR *ted\tokenizing = #tokenize_ab2
If \cursor_lpos>=0
!line_use {\cursor_lpos}
If *tline
  If *tline\clength
    If *tline\text
      If *tline\tclength
        If *tline\ttext
          tcpos.l = 0
          cpos.l  = 0
          While tcpos.l<*tline\tclength
            If Peek.b(*tline\ttext+tcpos)><0
              If cpos<*tline\tclength
                Poke.b *tline\text+cpos,Peek.b(*tline\ttext+tcpos)
              End If
              cpos+1
              tcpos+1
            Else
              tcpos+2
            End If
          Wend
        End If
      End If
    End If
  End If
End If
End If
EndIf
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_tokenize {*ted.tuited,lpos.l,@force.l}                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - force.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_tokenize {*ted.tuited,lpos.l,@force.l}
!line_use {lpos}
If *tline
  If *tline\text = 0 OR *tline\clength<=0 ; free tokenize text
    If *tline\ttext
      FreeMem_ *tline\ttext,*tline\tblength
      *tline\ttext=0
      *tline\tblength=0
      *tline\tclength=0
    End If
  Else
    Select \tokenizing

      Case #tokenize_html
        ted_do_html {*ted,*tline}
      Case #tokenize_hex
        ted_do_hex {*ted,*tline}

      CNIF #support_ab2
      Case #tokenize_ab2
        ted_do_ab2 {*ted,*tline}
      CEND
      CNIF #support_monkey
      Case #tokenize_monkey
        ted_do_monkey {*ted,*tline}
      CEND
      CNIF #support_c
      Case #tokenize_c
        flags.l = ted_do_c {*ted,*tline,*tline\flags}
        n.l = 1
        !line_use {lpos+n}
        If *tline Then nflags.l = *tline\flags
        \damage_begin = Min(\damage_begin,lpos)

        While *tline AND (nflags><flags)
          flags = ted_do_c {*ted,*tline,flags}
          n+1
          !line_use {lpos+n}
          If *tline Then nflags = *tline\flags
        Wend
        If *tline=0 Then \last_flags = flags
        \damage_end = Max(\damage_end,lpos+n)

        !line_use {lpos}
      CEND
    End Select

    If \rp
      If *tline\ttext
        SetFont_ \rp,\font
        pixlen.l = ted_tokenlength {*ted,*tline\ttext,*tline\tclength} +\scrollborder_x + 2
        If pixlen>\max_width Then \max_width=pixlen
      Else
        SetFont_ \rp,\font
        pixlen.l = ted_textlength {\rp,*tline\text,*tline\clength} +\scrollborder_x + 2
        If pixlen>\max_width Then \max_width=pixlen

      End If
    End If

  End If
  If force Then ted_line_settokencase {*ted}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_settokencol {*ted.tuited,token_pen.l,rgbcol.l}                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - token_pen.l    : ???                                                      /
;/ - rgbcol.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_settokencol {*ted.tuited,token_pen.l,rgbcol.l}
\token_pen[token_pen]  = screen_GetPenRGB {rgbcol}
\token_mark[token_pen] = screen_GetPenRGB {6*(rgbcol/8)&$1f1f1f+2*(\rgb_marker/4)&$1f1f1f}
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_blink {*ted.tuited,@blink.l,@clip.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - blink.l    : ???                                                          /
;/ - clip.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_blink {*ted.tuited,@blink.l,@clip.l}
SHARED tuidat(),tuiengine
If \win>=0
  If tuidat(\win,\tuiobj)\visible
    ;ted_draw_stat {*ted,""}
    If \cursor_hidebymark=False OR (\marker1_lpos=-1) OR (\marker2_cpos=\marker1_cpos AND \marker1_lpos=\marker2_lpos)
    If \cursor_count=\blink_speed OR blink=False
      \cursor_count=0
      If clip Then ted_setclip {*ted }
      *rp.RastPort = RastPort(\win)

     ; !line_use {\cursor_lpos}
     ; If *tline
   ;   error {"pos2x"}
        xs.l = ted_pos2x  {*ted,\cursor_lpos,\cursor_cpos}
        ;error {"get cw"}
      Select \cursor_style
        Case 0
          cw.l = ted_pos2cw {*ted,\cursor_lpos,\cursor_cpos}
        Default
          cw = 0
      End Select
     ; End If

    ;  error {"done"}
      x.l = tuidat(\win,\tuiobj)\x - \view_x  + xs
      y.l = tuidat(\win,\tuiobj)\y + (\cursor_lpos-\top_line) *\rowheight ;- \view_ypos
      If \cursor_show
        \cursor_show = False
         SetDrMd_ *rp,-1
         RectFill_ *rp,x,y,x+cw,y+\rowheight-1
         SetDrMd_ *rp,0
      Else
        If blink
          \cursor_show = True
           SetDrMd_ *rp,-1
           RectFill_ *rp,x,y,x+cw,y+\rowheight-1
           SetDrMd_ *rp,0
        End If
      End If
      If clip Then ted_remclip{*ted }
    End If
    End If
    If blink=False Then \cursor_count=\blink_speed:Else \cursor_count+1

  End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_tokentext {*ted.tuited,str_ptr.l,clength.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/     ;ted_draw_stat {*ted,""}                                                /
;/      ; !line_use {\cursor_lpos}                                             /
;/      ; If *tline                                                            /
;/    ;   error {"pos2x"}                                                      /
;/         ;error {"get cw"}                                                   /
;/      ; End If                                                               /
;/     ;  error {"done"}                                                       /
;/       y.l = tuidat(\win,\tuiobj)\y + (\cursor_lpos-\top_line) *\rowheight:: /
;/   \view_ypos                                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - str_ptr.l    : ???                                                        /
;/ - clength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement FAST ted_tokentext {*ted.tuited,str_ptr.l,clength.l}
If str_ptr
  While clength>0
    slen.l=0
    While Peek.b(str_ptr+slen)><0 AND slen<clength: slen+1:Wend
    If slen>0
      ted_text { \rp,str_ptr,Min(slen,clength) }
      clength-slen
    End If
    str_ptr+slen+1
    If clength>0
      pen.l = Peek.b(str_ptr) : str_ptr+1
      SetAPen_ \rp,\token_pen[pen&$7f]
    End If
  Wend
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_tokentext_boldx {*ted.tuited,str_ptr.l,clength.l}               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - str_ptr.l    : ???                                                        /
;/ - clength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_tokentext_boldx {*ted.tuited,str_ptr.l,clength.l}
If str_ptr
bold.l = 0
SetDrMd_ \rp,0
  While clength>0
    slen.l=0
    While Peek.b(str_ptr+slen)><0 AND slen<clength: slen+1:Wend
    If slen>0
      If bold
      Text_ \rp,str_ptr,slen
      Else
      *rp.RastPort = \rp
      *rp\cp_x + ted_textlength{\rp,str_ptr,slen}
      End If
      clength-slen
    End If
    str_ptr+slen+1
    If clength>0
      pen.l = Peek.b(str_ptr) : str_ptr+1
      SetAPen_ \rp,\token_pen[pen&$7f]
      bold=0
      If pen = #pen_ab2_function Then bold=1
      If pen = #pen_ab2_token Then bold=1
    End If
  Wend
End If
SetDrMd_ \rp,1
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_tokentext_clip {*ted.tuited,str_ptr.l,scpos.l,clength.l,marke:: /
;/ d.l}                                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - str_ptr.l    : ???                                                        /
;/ - scpos.l    : ???                                                          /
;/ - clength.l    : ???                                                        /
;/ - marked.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_tokentext_clip {*ted.tuited,str_ptr.l,scpos.l,clength.l,marked.l}
If str_ptr
  cpos.l = 0
  While clength>0
    slen.l=0
    While Peek.b(str_ptr+slen)><0 AND slen<clength: slen+1:Wend
    If slen>0
      If cpos+slen>scpos
        If cpos<scpos
          offs.l = scpos-cpos
          If offs>0 Then ted_text{ \rp,str_ptr+offs,Min(slen-offs,clength-offs)}
        Else
          ted_text {\rp,str_ptr,Min(slen,clength)}
        End If
      End If
      cpos + slen
      clength-slen
    End If
    str_ptr+slen+1

    If clength>0
      pen.l = Peek.b(str_ptr) : str_ptr+1
      If marked Then SetAPen_ \rp,\token_mark[pen&$7f]:Else SetAPen_ \rp,\token_pen[pen&$7f]
    End If
  Wend
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_tokentext_m {*ted.tuited,str_ptr.l,clength.l}                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - str_ptr.l    : ???                                                        /
;/ - clength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_tokentext_m {*ted.tuited,str_ptr.l,clength.l}
If str_ptr
  While clength>0
    slen.l=0
    While Peek.b(str_ptr+slen)><0 AND slen<clength: slen+1:Wend
    If slen>0
      ted_text { \rp,str_ptr,Min(slen,clength) }
      clength-slen
    End If
    str_ptr+slen+1
    If clength>0
      pen.l = Peek.b(str_ptr) : str_ptr+1
      SetAPen_ \rp,\token_mark[pen&$7f]
    End If
  Wend
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_draw_tokenline {*ted.tuited,lpos.l,x.l,y.l,x2.l}                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - x2.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_draw_tokenline {*ted.tuited,lpos.l,x.l,y.l,x2.l}
If \rp
!line_use {lpos}
*rp.RastPort = \rp
emptyline.l = False
If *tline
  If *tline\text
    If *tline\ttext=0 Then ted_tokenize{*ted,lpos}

    If \marker1_lpos=lpos OR \marker2_lpos=lpos
      If \marker1_lpos=lpos Then cpos1.l = \marker1_cpos: Else cpos1=0
      If \marker2_lpos=lpos Then cpos2.l = \marker2_cpos: Else cpos2=*tline\clength

      If cpos1>0
        SetBPen_ *rp,\pen_back
        SetAPen_ *rp,\pen_text
        Move_ *rp,x,y+*rp\TxBaseline
        ted_tokentext {*ted,*tline\ttext,cpos1}
      End If

      xadd.l = ted_pos2x{*ted,lpos,cpos1}
      SetBPen_ *rp,\pen_marker
      SetAPen_ *rp,\pen_textmarker
      Move_ *rp,x+xadd,y+*rp\TxBaseline
      ted_tokentext_clip {*ted,*tline\ttext,cpos1,cpos2,True}

      If cpos2<*tline\clength
        xadd.l = ted_pos2x{*ted,lpos,cpos2}
        SetBPen_ *rp,\pen_back
        SetAPen_ *rp,\pen_text
        Move_ *rp,x+xadd,y+*rp\TxBaseline
        ted_tokentext_clip {*ted,*tline\ttext,cpos2,*tline\clength,False}
      End If


      If \marker2_lpos><lpos
        xadd.l = x + ted_tokenlength {*ted,*tline\ttext,*tline\tclength}
        ;ted_textlength {\rp,*tline\text,*tline\clength)
        If xadd<=x2
          SetAPen_ *rp,\pen_marker
          RectFill_ \rp,xadd,y,x2,y+\rowheight-1
        End If
      Else
        ;xadd.l = x + ted_textlength {\rp,*tline\text,*tline\clength)
        xadd.l = x + ted_tokenlength {*ted,*tline\ttext,*tline\tclength}
        If xadd<=x2
          SetAPen_ *rp,\pen_back
          RectFill_ \rp,xadd,y,x2,y+\rowheight-1
        End If
      End If

    Else
      ;xadd.l = x + ted_textlength {\rp,*tline\text,*tline\clength)
      xadd.l = x + ted_tokenlength {*ted,*tline\ttext,*tline\tclength}
      If \marker1_lpos<lpos AND \marker2_lpos>lpos
        If xadd<=x2
          SetAPen_ *rp,\pen_marker
          RectFill_ \rp,xadd,y,x2,y+\rowheight-1
        End If
        SetAPen_ *rp,\pen_textmarker
        SetBPen_ *rp,\pen_marker
        Move_ *rp,x,y+*rp\TxBaseline
        ;Text_ *rp,*tline\text,*tline\clength
        ted_tokentext_m {*ted,*tline\ttext,*tline\clength}
      Else
        If xadd<=x2
          SetAPen_ *rp,\pen_back
          RectFill_ \rp,xadd,y,x2,y+\rowheight-1
        End If
        SetAPen_ *rp,\pen_text
        SetBPen_ *rp,\pen_back
        Move_ *rp,x,y+*rp\TxBaseline
        ted_tokentext {*ted,*tline\ttext,*tline\clength}
        ;Move_ *rp,x+1,y+*rp\TxBaseline
        ;ted_tokentext_bold {*ted,*tline\ttext,*tline\clength}
      End If

    End If
  Else
    emptyline.l = True
  End If
Else
  emptyline = True
End If

If emptyline
  If (\marker1_lpos<lpos AND \marker2_lpos>lpos) OR (\marker1_lpos=lpos AND \marker1_cpos=0 AND \marker2_lpos><lpos)
    SetAPen_ *rp,\pen_marker
    RectFill_ *rp,x,y,x2,y+\rowheight-1

    ;SetAPen_ *rp,\pen_text
    ;WritePixel_ *rp,x+1,y+1
    ;WritePixel_ *rp,x+2,y+2
  Else
    If (\marker1_lpos<=lpos AND \marker2_lpos>=lpos)
      SetAPen_ *rp,\pen_marker
      RectFill_ *rp,x,y,x+2,y+\rowheight-1

      SetAPen_ *rp,\pen_back
      RectFill_ *rp,x+2,y,x2,y+\rowheight-1
    Else
      SetAPen_ *rp,\pen_back
      RectFill_ *rp,x,y,x2,y+\rowheight-1
    End If
  End If
End If
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_draw_rawline {*ted.tuited,lpos.l,x.l,y.l,x2.l}                  /
;/                                                                             /
;/ Description:                                                                /
;/         ;ted_textlength {\rp,*tline\text,*tline\clength)                    /
;/         ;xadd.l = x + ted_textlength {\rp,*tline\text,*tline\clength)       /
;/       ;xadd.l = x + ted_textlength {\rp,*tline\text,*tline\clength)         /
;/         ;Text_ *rp,*tline\text,*tline\clength                               /
;/         ;Move_ *rp,x+1,y+*rp\TxBaseline                                     /
;/         ;ted_tokentext_bold {*ted,*tline\ttext,*tline\clength}              /
;/     ; Debug                                                                 /
;/    ; SetAPen_ *rp,\pen_text                                                 /
;/    ; WritePixel_ *rp,x+1,y+1                                                /
;/    ; WritePixel_ *rp,x+2,y+2                                                /
;/   ; Debug                                                                   /
;/  SetAPen_ *rp,\pen_text                                                     /
;/  WritePixel_ *rp,x+1,y+1                                                    /
;/  WritePixel_ *rp,x+1,y+\rowheight-2                                         /
;/ error {"Draw token ed!"}                                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/ - x2.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_draw_rawline {*ted.tuited,lpos.l,x.l,y.l,x2.l}
If \rp
!line_use {lpos}
*rp.RastPort = \rp
If *tline
  If *tline\text
    If \marker1_lpos=lpos OR \marker2_lpos=lpos
      If \marker1_lpos=lpos Then cpos1.l = \marker1_cpos: Else cpos1=0
      If \marker2_lpos=lpos Then cpos2.l = \marker2_cpos: Else cpos2=*tline\clength

      If cpos1>0
        SetBPen_ *rp,\pen_back
        SetAPen_ *rp,\pen_text
        Move_ *rp,x,y+*rp\TxBaseline
        ted_text { *rp,*tline\text,cpos1}
      End If

      xadd.l = ted_pos2x{*ted,lpos,cpos1}
      SetBPen_ *rp,\pen_marker
      SetAPen_ *rp,\pen_textmarker
      Move_ *rp,x+xadd,y+*rp\TxBaseline
      ted_text { *rp,*tline\text+cpos1,cpos2-cpos1}


      If cpos2<*tline\clength
        xadd.l = ted_pos2x{*ted,lpos,cpos2}
        SetBPen_ *rp,\pen_back
        SetAPen_ *rp,\pen_text
        Move_ *rp,x+xadd,y+*rp\TxBaseline
        ted_text { *rp,*tline\text+cpos2,*tline\clength-cpos2}
      End If


      If \marker2_lpos><lpos
        xadd.l = x + ted_textlength {\rp,*tline\text,*tline\clength}
        If xadd<=x2
          SetAPen_ *rp,\pen_marker
          RectFill_ \rp,xadd,y,x2,y+\rowheight-1
        End If
      Else
        xadd.l = x + ted_textlength {\rp,*tline\text,*tline\clength}
        If xadd<=x2
          SetAPen_ *rp,\pen_back
          RectFill_ \rp,xadd,y,x2,y+\rowheight-1
        End If
      End If

    Else
      xadd.l = x + ted_textlength {\rp,*tline\text,*tline\clength}
      If \marker1_lpos<lpos AND \marker2_lpos>lpos
        If xadd<=x2
          SetAPen_ *rp,\pen_marker
          RectFill_ \rp,xadd,y,x2,y+\rowheight-1
        End If
        SetAPen_ *rp,\pen_textmarker
        SetBPen_ *rp,\pen_marker
      Else
        If xadd<=x2
          SetAPen_ *rp,\pen_back
          RectFill_ \rp,xadd,y,x2,y+\rowheight-1
        End If
        SetAPen_ *rp,\pen_text
        SetBPen_ *rp,\pen_back
      End If
      Move_ *rp,x,y+*rp\TxBaseline
      ted_text { *rp,*tline\text,*tline\clength}
    End If
  Else
    If (\marker1_lpos<lpos AND \marker2_lpos>lpos) OR (\marker1_lpos=lpos AND \marker1_cpos=0 AND \marker2_lpos><lpos)
      SetAPen_ *rp,\pen_marker
    Else
      SetAPen_ *rp,\pen_back
    End If
    RectFill_ *rp,x,y,x2,y+\rowheight-1
    ; Debug
  ;  SetAPen_ *rp,\pen_text
  ;  WritePixel_ *rp,x+1,y+1
  ;  WritePixel_ *rp,x+2,y+2
  End If
Else                             ; empty line !
  SetAPen_ *rp,\pen_back
  RectFill_ *rp,x,y,x2,y+\rowheight-1
  ; Debug
;  SetAPen_ *rp,\pen_text
;  WritePixel_ *rp,x+1,y+1
;  WritePixel_ *rp,x+1,y+\rowheight-2
End If
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_showbrackets {*ted.tuited,@noclip.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/     ; Debug                                                                 /
;/   ;  SetAPen_ *rp,\pen_text                                                 /
;/   ;  WritePixel_ *rp,x+1,y+1                                                /
;/   ;  WritePixel_ *rp,x+2,y+2                                                /
;/   ; Debug                                                                   /
;/  SetAPen_ *rp,\pen_text                                                     /
;/  WritePixel_ *rp,x+1,y+1                                                    /
;/  WritePixel_ *rp,x+1,y+\rowheight-2                                         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - noclip.l    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_showbrackets{*ted.tuited,@noclip.l}
SHARED tuidat(),tuipen()
If \rp
  If \tuiobj>=0

    If noclip=0
      win_SetClip {\win,tuidat(\win,\tuiobj)\x,tuidat(\win,\tuiobj)\y,tuidat(\win,\tuiobj)\xs+tuidat(\win,\tuiobj)\x-1,tuidat(\win,\tuiobj)\ys+tuidat(\win,\tuiobj)\y-1}
    End If
    *rp.RastPort = \rp

    If \bracket1_lpos>=0 AND \bracket2_lpos>=0
      ;ted_draw_line{*ted,\bracket1_lpos}
      ;ted_draw_line{*ted,\bracket2_lpos}
      bx1.l = ted_pos2x {*ted,\bracket1_lpos,\bracket1_cpos}  + tuidat(\win,\tuiobj)\x  - \view_x
      bx2.l = ted_pos2x {*ted,\bracket2_lpos,\bracket2_cpos}  + tuidat(\win,\tuiobj)\x  - \view_x
      by1.l = ted_line2y {*ted,\bracket1_lpos}                + tuidat(\win,\tuiobj)\y  +*rp\TxBaseline
      by2.l = ted_line2y {*ted,\bracket2_lpos}                + tuidat(\win,\tuiobj)\y  +*rp\TxBaseline
      SetAPen_ \rp,1
      SetDrMd_ \rp,0
      Move_ \rp,bx1,by1
      Text_ \rp,&\bracket1_char,1

      Move_ \rp,bx1+1,by1
      Text_ \rp,&\bracket1_char,1


      Move_ \rp,bx2,by2
      Text_ \rp,&\bracket2_char,1

      Move_ \rp,bx2+1,by2
      Text_ \rp,&\bracket2_char,1

    End If

    If noclip=0 Then win_RemoveClip{\win}

  End If
End If
End Statement

; Call with window coordinates !
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_draw {*ted.tuited,@x1.l,@y1.l,@x2.l,@y2.l,@mode.l}              /
;/                                                                             /
;/ Description:                                                                /
;/       ;ted_draw_line{*ted,\bracket1_lpos}                                   /
;/       ;ted_draw_line{*ted,\bracket2_lpos}                                   /
;/ Call with window coordinates !                                              /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - x1.l    : ???                                                             /
;/ - y1.l    : ???                                                             /
;/ - x2.l    : ???                                                             /
;/ - y2.l    : ???                                                             /
;/ - mode.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_draw {*ted.tuited,@x1.l,@y1.l,@x2.l,@y2.l,@mode.l}
SHARED tuidat(),tuipen()
If *ted
If \win>=0
  If tuidat(\win,\tuiobj)\visible
    x1 = Max(x1,tuidat(\win,\tuiobj)\x)
    y1 = Max(y1,tuidat(\win,\tuiobj)\y)

    ;If x1<0 Then x1=tuidat(\win,\tuiobj)\x
    If x2<0 Then x2=tuidat(\win,\tuiobj)\x+ tuidat(\win,\tuiobj)\xs-1
    ;If y1<0 Then y1=tuidat(\win,\tuiobj)\y
    If y2<0 Then y2=tuidat(\win,\tuiobj)\y+ tuidat(\win,\tuiobj)\ys-1
    x2 = Min(x2,tuidat(\win,\tuiobj)\x+ tuidat(\win,\tuiobj)\xs-1 )
    y2 = Min(y2,tuidat(\win,\tuiobj)\y+ tuidat(\win,\tuiobj)\ys-1 )


    If mode
      win_SetClip {\win,x1,y1,x2,y2}
    End If
    If \cursor_show Then ted_blink {*ted,On,False}
    *rp.RastPort = \rp
    SetFont_ *rp,\font
    SetDrMd_ *rp,1
    SetAPen_ *rp,tuidat(\win,\tuiobj)\value
  ;  RectFill_ *rp,x1,y1,x2,y2
  ;  Delay_ 1

    lpos_a.l = (y1-tuidat(\win,\tuiobj)\y)/\rowheight

    y.l      = lpos_a * \rowheight + tuidat(\win,\tuiobj)\y
    lpos_a   + \top_line
    If lpos_a<0 Then lpos_a=0
    lpos_b.l = lpos_a + (y2-y1-1) / \rowheight +1
    If lpos_b>\lines_used-1 Then lpos_b = \lines_used-1
    x.l      = tuidat(\win,\tuiobj)\x - \view_x

    SetAPen_ *rp,\pen_text
    SetBPen_ *rp,\pen_back
    If \tokenizing=False
      For lpos.l = lpos_a To lpos_b
        ted_draw_rawline {*ted,lpos,x,y,x2}
        y + \rowheight
      Next
    Else
      For lpos.l = lpos_a To lpos_b
        ted_draw_tokenline {*ted,lpos,x,y,x2}
        y + \rowheight
      Next
    End If
    If y<=y2
      SetAPen_ *rp,\pen_back
      RectFill_ *rp,x1,y,x2,y2
    End If
;    ted_draw_stat {*ted,""}
    ted_showbrackets{*ted}
    If mode Then win_RemoveClip{\win}

  End If
End If
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_draw_line {*ted.tuited,lpos.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/     ;If x1<0 Then x1=tuidat(\win,\tuiobj)\x                                 /
;/     ;If y1<0 Then y1=tuidat(\win,\tuiobj)\y                                 /
;/   ;  RectFill_ *rp,x1,y1,x2,y2                                              /
;/   ;  Delay_ 1                                                               /
;/    ted_draw_stat {*ted,""}                                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_draw_line {*ted.tuited,lpos.l}
SHARED tuidat()
y1.l = ted_line2y {*ted,lpos}
If y1>-\rowheight AND y1<tuidat(\win,\tuiobj)\ys
  y1 + tuidat(\win,\tuiobj)\y
  ted_draw {*ted,-1,y1,-1,y1+\rowheight-1}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_hidebrackets {*ted.tuited}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_hidebrackets{*ted.tuited}
If \bracket1_lpos>=0
If \rp
  lpos1.l=\bracket1_lpos
  lpos2.l=\bracket2_lpos

  \bracket1_lpos=-1
  \bracket2_lpos=-1

  ted_draw_line{*ted,lpos1}
  ted_draw_line{*ted,lpos2}
End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_search_closebracket {*ted.tuited,lpos.l,cpos.l,bo:: /
;/ .b,bc.b}                                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - cpos.l    : ???                                                           /
;/ - bo.b    : ???                                                             /
;/ - bc.b    : ???                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_search_closebracket {*ted.tuited,lpos.l,cpos.l,bo.b,bc.b}
succ.l = False
count.l=0
stopline.l = Min(*ted\lines_used-1,lpos+1000)
\bracket1_lpos = -1
If *ted
  \bracket1_lpos = lpos
  \bracket1_cpos = cpos
  \bracket1_char = bo
  \bracket2_char = bc
  While succ=False AND lpos<=stopline
    !line_use {lpos}
    If *tline
      If *tline\text
        While succ=False AND cpos<*tline\clength
          c.b = Peek.b(*tline\text+cpos)

          Select c.b
            Case bc
              count-1
            Case bo
              count+1
          End Select

          If count<=0 Then succ=True : Else cpos+1
        Wend

        If succ=False
          lpos + 1
          cpos = 0
        End If
      Else
        lpos + 1
        cpos = 0
      End If
    Else
      lpos + 1
      cpos = 0
    End If
  Wend

  If succ
    \bracket2_lpos = lpos
    \bracket2_cpos = cpos
  Else
    \bracket1_lpos = -1
  End If
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_search_openbracket {*ted.tuited,lpos.l,cpos.l,bo.:: /
;/ b,bc.b}                                                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - cpos.l    : ???                                                           /
;/ - bo.b    : ???                                                             /
;/ - bc.b    : ???                                                             /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_search_openbracket {*ted.tuited,lpos.l,cpos.l,bo.b,bc.b}
succ.l = False
count.l=0
stopline.l = Max(0,lpos-1000)
\bracket1_lpos = -1
If *ted
  \bracket2_lpos = lpos
  \bracket2_cpos = cpos
  \bracket1_char = bo
  \bracket2_char = bc
  While succ=False AND lpos>=stopline
    !line_use {lpos}
    If *tline
      If cpos<0 Then cpos = *tline\clength-1
      If *tline\text
        While succ=False AND cpos>=0
          c.b = Peek.b(*tline\text+cpos)

          Select c.b
            Case bc
              count-1
            Case bo
             count+1
          End Select

          If count>=0 Then succ=True : Else cpos-1
        Wend

        If succ=False
          lpos - 1
          cpos = -1
        End If
      Else
        lpos - 1
        cpos = -1
      End If
    Else
      lpos - 1
      cpos = -1
    End If
  Wend

  If succ
    \bracket1_lpos = lpos
    \bracket1_cpos = cpos
  Else
    \bracket1_lpos = -1
  End If
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_checkbrackets {*ted.tuited}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_checkbrackets{*ted.tuited}
If \bracket1_lpos>=0 Then ted_hidebrackets{*ted}
!line_use{\cursor_lpos}
If *tline
  If *tline\text
    If \cursor_cpos>0 AND \cursor_cpos<=*tline\clength
      c.b = Peek.b(*tline\text+\cursor_cpos-1)
      dseek.l=0
      If c=@")" Then dseek = -1 : bo.b = @"(" : bc.b = @")"
      If c=@"(" Then dseek =  1 : bo.b = @"(" : bc.b = @")"

      If c=@"}" Then dseek = -1 : bo.b = @"{" : bc.b = @"}"
      If c=@"{" Then dseek =  1 : bo.b = @"{" : bc.b = @"}"

      If c=@"]" Then dseek = -1 : bo.b = @"[" : bc.b = @"]"
      If c=@"[" Then dseek =  1 : bo.b = @"[" : bc.b = @"]"

      If dseek
        If dseek=1
          ted_search_closebracket{*ted,\cursor_lpos,\cursor_cpos-1,bo,bc}
        Else
          ted_search_openbracket {*ted,\cursor_lpos,\cursor_cpos-1,bo,bc}
        End If
        ted_showbrackets{*ted,0}
      End If
    End If
  End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_scroll {*ted.tuited,dx.l,dy.l,@upd.l}                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - dx.l    : ???                                                             /
;/ - dy.l    : ???                                                             /
;/ - upd.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_scroll {*ted.tuited,dx.l,dy.l,@upd.l}
SHARED tuidat()
If \rp
  If dy><0 AND (*ted\flags&#tuited_noyscroll=0)
    oldtop.l = \top_line
    \top_line + dy
    If \top_line>(\lines_used - tuidat(\win,\tuiobj)\ys/\rowheight) Then \top_line=(\lines_used - tuidat(\win,\tuiobj)\ys/\rowheight)
    If \top_line<0 Then \top_line=0

    dypix.l = (\top_line-oldtop) * \rowheight
    If dypix><0
      If (Abs(dypix)<tuidat(\win,\tuiobj)\ys) AND \scrollredraw
        If \xwin\WLayer
          oldhook.l = InstallLayerHook_(\xwin\WLayer,#LAYERS_NOBACKFILL)
          ScrollWindowRaster_ \xwin,0,dypix,tuidat(\win,\tuiobj)\x,tuidat(\win,\tuiobj)\y,tuidat(\win,\tuiobj)\x+tuidat(\win,\tuiobj)\xs-1,tuidat(\win,\tuiobj)\y+tuidat(\win,\tuiobj)\ys-1
          InstallLayerHook_ \xwin\WLayer,oldhook
        Else
          SetBPen_ \rp,\pen_back
          SetAPen_ \rp,\pen_back
          ScrollRaster_ \rp,0,dypix,tuidat(\win,\tuiobj)\x,tuidat(\win,\tuiobj)\y,tuidat(\win,\tuiobj)\x+tuidat(\win,\tuiobj)\xs-1,tuidat(\win,\tuiobj)\y+tuidat(\win,\tuiobj)\ys-1
        End If

        If dypix<0
          ted_draw {*ted,-1,-1,-1,tuidat(\win,\tuiobj)\y-dypix}
        Else
          ted_draw {*ted,-1,tuidat(\win,\tuiobj)\y+tuidat(\win,\tuiobj)\ys-dypix,-1,-1}
        End If
      Else
        ted_draw {*ted}
      End If
    End If

  End If

  If dx><0 AND (*ted\flags&#tuited_noxscroll=0)
    oldx.l = \view_x
    \view_x + dx
    If \view_x<0 Then \view_x=0
    dxpix.l = (\view_x-oldx)
    If dxpix><0
      If (Abs(dxpix)<tuidat(\win,\tuiobj)\xs) AND \scrollredraw
        If \xwin\WLayer
          oldhook.l = InstallLayerHook_(\xwin\WLayer,#LAYERS_NOBACKFILL)
          ScrollWindowRaster_ \xwin,dxpix,0,tuidat(\win,\tuiobj)\x,tuidat(\win,\tuiobj)\y,tuidat(\win,\tuiobj)\x+tuidat(\win,\tuiobj)\xs-1,tuidat(\win,\tuiobj)\y+tuidat(\win,\tuiobj)\ys-1
          InstallLayerHook_ \xwin\WLayer,oldhook
        Else
          SetBPen_ \rp,\pen_back
          ScrollRaster_ \rp,dxpix,0,tuidat(\win,\tuiobj)\x,tuidat(\win,\tuiobj)\y,tuidat(\win,\tuiobj)\x+tuidat(\win,\tuiobj)\xs-1,tuidat(\win,\tuiobj)\y+tuidat(\win,\tuiobj)\ys-1
        End If

        If dxpix<0
          ted_draw {*ted,-1,-1,tuidat(\win,\tuiobj)\x-dxpix,-1}
        Else
          ted_draw {*ted,tuidat(\win,\tuiobj)\x+tuidat(\win,\tuiobj)\xs-dxpix,-1,-1,-1}
        End If
      Else
        ted_draw {*ted}
      End If
    End If
  End If

  ted_update_scroller {*ted,upd}
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_free_text {*ted.tuited}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_free_text {*ted.tuited}
For lpos.l = 0 To \lines_used-1
  !line_use {lpos}
  If *tline
    If *tline\text  Then FreeMem_ *tline\text  ,*tline\blength  : *tline\text=0
    If *tline\ttext Then FreeMem_ *tline\ttext ,*tline\tblength : *tline\ttext=0
;    ted_tokenize {*ted ,lpos}
    FreeMem_ *tline,SizeOf.tline
    Poke.l \doc+lpos*4,0

  End If
Next
\lines_used = 0
\max_width  = 1
undo_Flush{\undo}
undo_SetSaved{\undo}
;str_Free {&\filename}
ted_update_scroller {*ted}
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_flush {*ted.tuited}                                             /
;/                                                                             /
;/ Description:                                                                /
;/    ted_tokenize {*ted ,lpos}                                                /
;/ str_Free {&\filename}                                                       /
;/ ted_setcursor {*ted,0,0}                                                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_flush {*ted.tuited}
;ted_setcursor {*ted,0,0}
ted_free_text {*ted}
str_Free {&\filename}
\cursor_cpos = 0
\cursor_lpos = 0
\bracket1_lpos=-1
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_remove {*ted.tuited}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_remove {*ted.tuited}
If *ted
  If \doc
    ted_free_text{*ted}
    FreeMem_ \doc,\max_lines*4
    \max_lines=0
    \doc = 0
  End If
  str_Free {&\pattern}
  str_Free {&\fontname}
  str_Free {&\fil}
  str_Free {&\path}
  undo_Free {\undo} : \undo = 0
  If \fontstolen = False AND \font><False Then font_Close {\font}  : \font = False
  FreeMem_ *ted,SizeOf.tuited
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_setflags {*ted.tuited,flags.l}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - flags.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_setflags {*ted.tuited,flags.l}
If flags & #tuited_wrap_left    Then \wrap_left     =True:Else \wrap_left    =False
If flags & #tuited_wrap_right   Then \wrap_right    =True:Else \wrap_right   =False
If flags & #tuited_del_wrap     Then \del_wrap      =True:Else \del_wrap     =False
If flags & #tuited_entf_wrap    Then \entf_wrap     =True:Else \entf_wrap    =False
If flags & #tuited_marker_loose Then \marker_loose  =True:Else \marker_loose =False
If flags & #tuited_cursor_hidebymark   Then \cursor_hidebymark    =True:Else \cursor_hidebymark   =False
If flags & #tuited_cursor_drag  Then \cursor_drag   =True:Else \cursor_drag  =False
If flags & #tuited_shiftmark   Then \shiftmark      =True:Else \shiftmark    =False
If flags & #tuited_breakreturn  Then \breakreturn    =True:Else \breakreturn    =False
If flags & #tuited_autoindent    Then \autoindent     =True:Else \autoindent   =False
If flags & #tuited_cursorstyle  Then \cursor_style   =True:Else \cursor_style  =False
If flags & #tuited_readonly     Then \editable   = False:Else \editable  = True
If flags & #tuited_realtab      Then \realtab    = True:Else \realtab  = False

\scrollredraw = (flags & #tuited_scrollredraw)=0
\flags = flags
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_setfont {*ted.tuited,fontname.s,fontsize.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - fontname.s    : ???                                                       /
;/ - fontsize.l    : ???                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_setfont {*ted.tuited,fontname.s,fontsize.l}
SHARED tuiengine
If \font><False AND \fontstolen=False Then font_Close{\font}
\font        = False
\fontstolen  = False
\fontsize    = fontsize
str_Write {&\fontname,fontname.s}
\font        = font_Open {fontname.s,fontsize}
If \font =False Then error {"Unable to load font: "+fontname.s+"/"+Str$(fontsize)}
If tuiengine\is_open
  If \font=False Then \font = font_GetFromBB2{tuiengine\font_fix}: \fontstolen=True
EndIf
\fontheight  = font_GetSize {\font}
\rowheight   = \fontheight + \spacing
\cursor_pixpos = 0
If \win>=0 Then ted_draw{*ted}
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_cursorconfig {*ted.tuited,blinkspeed.l,scroll_lines.l,scroll_:: /
;/ xpix.l,tabsize.l}                                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - blinkspeed.l    : ???                                                     /
;/ - scroll_lines.l    : ???                                                   /
;/ - scroll_xpix.l    : ???                                                    /
;/ - tabsize.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_cursorconfig {*ted.tuited,blinkspeed.l,scroll_lines.l,scroll_xpix.l,tabsize.l}  ; 0 = off, 1 = fast, 3 = ok
If *ted
  \blink_speed = blinkspeed
  \scrollborder_x = scroll_xpix
  \scrollborder_y = scroll_lines
  \tabsize = tabsize
  \tab_width = \tabsize * \space_width
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_setpath {*ted.tuited,path.s,fil.s,pattern.s}                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - path.s    : ???                                                           /
;/ - fil.s    : ???                                                            /
;/ - pattern.s    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_setpath {*ted.tuited,path.s,fil.s,pattern.s}
If *ted
str_Write{&\fil     , fil.s    }
str_Write{&\path    , path.s   }
str_Write{&\pattern , pattern.s}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_setfile {*ted.tuited,filename.s}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_setfile {*ted.tuited,filename.s}
If *ted
  str_Write{&\filename  , filename.s    }
  str_Write{&\fil     , dos_FilePart{filename.s}    }
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = ted_file {*ted.tuited}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ted_file {*ted.tuited}
If *ted Then filename.s = str_Read{&\filename}
Function Return filename.s
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = ted_title {*ted.tuited}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ted_title {*ted.tuited}
If *ted Then filename.s = dos_FilePart{str_Read{&\filename}}
If filename.s = "" Then filename.s = "New Document"
Function Return filename.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_create {fontname.s,fontsize.l,flags.l,blinkspeed.:: /
;/ l,@undosteps.l}                                                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fontname.s    : ???                                                       /
;/ - fontsize.l    : ???                                                       /
;/ - flags.l    : ???                                                          /
;/ - blinkspeed.l    : ???                                                     /
;/ - undosteps.l    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_create {fontname.s,fontsize.l,flags.l,blinkspeed.l,@undosteps.l}
SHARED tuiengine,tuipen()
*ted.tuited = AllocMem_(SizeOf.tuited,#MEMF_CLEAR)
If *ted
  \doc    = AllocMem_(#init_maxlines*4,#MEMF_CLEAR)
  If \doc
    \top_line         = 0
    \cursor_lpos      = 0
    \cursor_cpos       = 0
    \fontstolen       = False

    \max_cpos = 8192
    \bracket1_lpos=-1
    \spacing          = 0
    \is_open          = True
    \win              = -2
    \tuiobj           = -3
    \xwin             = 0
    \rp               = 0
    \lines_used       = 0
    \rowheight        = 1
    \max_width        = 1
    \view_x           = 0
    \cursor_show      = False
    \max_lines        = #init_maxlines
    \space_width      = 8
    \tabsize          = 4
    \tab_width        = \space_width*\tabsize
    \marker1_lpos     = -1
    \marker2_lpos     = -1

    \damage_begin = 0
    \damage_end   = -1
    ; Prefs
    \scrollborder_x   = 20
    \scrollborder_y   = 2
    \pen_text         = tuipen(#tpen_black)
    \pen_textmarker   = tuipen(#tpen_white)
    \pen_back         = tuipen(#tpen_bg)
    \pen_marker       = tuipen(#tpen_led_blue)
    \pen_cursor       = 3
    \pen_cursor_text  = 2
    \pen_highlight    = tuipen(#tpen_led_red)

    For n.l = 0 To 15
      \token_pen [n] = tuipen(#tpen_halfshine)
      \token_mark[n] = tuipen(#tpen_white)
    Next
    \rgb_marker      = $ffffff

    \wrap_left        = True
    \wrap_right       = True
    \blink_speed      = blinkspeed
    \del_wrap         = True
    \entf_wrap        = True
    \marker_loose     = True
    \cursor_drag      = True
    \cursor_hidebymark= True
    \forcetoken       = False
    \draw_stat        = True
    \returncode       = #return_amiga


    ted_setpath {*ted,"Sys:","","#?"}

    \tokenizing       = #tokenize_ascii
    ted_setfont {*ted,fontname.s,fontsize}
    ted_setflags {*ted,flags}

    \lines_used=1
    If undosteps<0 Then undosteps=1000
    If undosteps>0
      \undo = undo_Create {undosteps}
    End If
  End If
  If \is_open=False Then ted_remove {*ted} : *ted=False
End If
Function Return *ted
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_show {*ted.tuited,lpos.l,cpos.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/     ; Prefs                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - cpos.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_show {*ted.tuited,lpos.l,cpos.l}
SHARED tuidat()
If *ted
If \win>=0
  If lpos<\top_line+\scrollborder_y Then ted_scroll {*ted,0,lpos-\top_line-\scrollborder_y}
  If lpos>\top_line+tuidat(\win,\tuiobj)\ys/\rowheight-1-\scrollborder_y Then ted_scroll {*ted,0,lpos-\top_line-tuidat(\win,\tuiobj)\ys/\rowheight+1+\scrollborder_y}

  pixpos.l = ted_pos2x {*ted,lpos,cpos} - \view_x
  If pixpos<\scrollborder_x Then ted_scroll {*ted,pixpos-\scrollborder_x,0}
  If pixpos>tuidat(\win,\tuiobj)\xs-\rowheight-\scrollborder_x Then ted_scroll {*ted,pixpos-tuidat(\win,\tuiobj)\xs+\rowheight+\scrollborder_x,0}
End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_setmarker {*ted.tuited,@lpos1.l,@cpos1.l,@lpos2.l,@cpos2.l,@u:: /
;/ pd.l}                                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos1.l    : ???                                                          /
;/ - cpos1.l    : ???                                                          /
;/ - lpos2.l    : ???                                                          /
;/ - cpos2.l    : ???                                                          /
;/ - upd.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_setmarker {*ted.tuited,@lpos1.l,@cpos1.l,@lpos2.l,@cpos2.l,@upd.l}
If lpos2<lpos1 Then Exchange lpos1,lpos2 : Exchange cpos1,cpos2
If lpos2=lpos1 AND cpos1>cpos2 Then Exchange cpos1,cpos2
If cpos1<0 Then cpos1=0
If cpos2<0 Then cpos2=0
!line_use {lpos1}
If *tline
  If cpos1>*tline\clength Then cpos1=*tline\clength
End If
!line_use {lpos2}
If *tline
  If cpos2>*tline\clength Then cpos2=*tline\clength
End If

If lpos1=-1
  minlpos.l = \marker1_lpos
  maxlpos.l = \marker2_lpos
Else
  If \marker1_lpos=-1
    minlpos = lpos1
    maxlpos = lpos2
  Else

succ.l = False
If lpos1><\marker1_lpos
  minlpos.l = Min(\marker1_lpos,lpos1)
  maxlpos.l = Max(\marker1_lpos,lpos1)
  If lpos2><\marker2_lpos
    ;minlpos.l = Min(\marker2_lpos,lpos2)
    maxlpos.l = Max(\marker2_lpos,lpos2)
  End If
Else
  If lpos2><\marker2_lpos
    minlpos.l = Min(\marker2_lpos,lpos2)
    maxlpos.l = Max(\marker2_lpos,lpos2)
  Else
    If \marker1_cpos><cpos1
      minlpos = lpos1
      maxlpos = lpos1
    End If
    If \marker2_cpos><cpos2
      minlpos = lpos2
      maxlpos = lpos2
    End If
  End If
End If
End If
End If

If \marker1_cpos><cpos1 Then \marker1_cpos = cpos1  :succ.l = True
If \marker2_cpos><cpos2 Then \marker2_cpos = cpos2  :succ.l = True
If \marker1_lpos><lpos1 Then \marker1_lpos = lpos1  :succ.l = True
If \marker2_lpos><lpos2 Then \marker2_lpos = lpos2  :succ.l = True


If succ AND upd
  ;ted_draw {*ted}
  ted_draw_stat {*ted,"",False}
  For l.l = minlpos To maxlpos
    ted_draw_line{*ted,l}
  Next

End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_marker_show {*ted.tuited}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_marker_show {*ted.tuited}
If *ted
If \marker1_lpos>=0 Then ted_show {*ted,\marker1_lpos,\marker1_cpos}
If \marker2_lpos>=0 Then ted_show {*ted,\marker2_lpos,\marker2_cpos}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_cursor_show {*ted.tuited}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_cursor_show {*ted.tuited}
If *ted
  ted_show {*ted,*ted\cursor_lpos,*ted\cursor_cpos} :  ted_draw_stat {*ted,"",False}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_setcursor {*ted.tuited,lpos.l,cpos.l,@pixupd.l,@loose.l,@upd.l} /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - cpos.l    : ???                                                           /
;/ - pixupd.l    : ???                                                         /
;/ - loose.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_setcursor {*ted.tuited,lpos.l,cpos.l,@pixupd.l,@loose.l,@upd.l}
ted_line_settokencase {*ted.tuited}
If lpos>=\lines_used Then lpos=\lines_used-1
If lpos<0 Then lpos=0
If cpos<0 Then cpos=0
If \wrap_right
  !line_use{lpos}
  If *tline
    If cpos>*tline\clength Then cpos = *tline\clength
  Else
    cpos=0
  End If
End If
\cursor_cpos     = cpos
\cursor_lpos     = lpos
If pixupd Then \cursor_pixpos = ted_pos2x {*ted ,lpos,cpos}
If \marker_loose AND loose Then ted_setmarker {*ted,-1,-1,-1,-1,upd}
If upd Then ted_show{*ted,\cursor_lpos,\cursor_cpos}
If upd Then ted_draw_stat{*ted,"",False}
ted_checkbrackets{*ted}
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_setrgb {*ted.tuited,fg.l,bg.l,mfg.l,mbg.l,cfg.l,cbg.l}          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - fg.l    : ???                                                             /
;/ - bg.l    : ???                                                             /
;/ - mfg.l    : ???                                                            /
;/ - mbg.l    : ???                                                            /
;/ - cfg.l    : ???                                                            /
;/ - cbg.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_setrgb {*ted.tuited,fg.l,bg.l,mfg.l,mbg.l,cfg.l,cbg.l}
If *ted
If fg><-1  Then \pen_text         = screen_GetPenRGB {fg}  : \token_pen[#pen_text] = \pen_text
If mfg><-1 Then \pen_textmarker   = screen_GetPenRGB {mfg} : \token_mark[#pen_text] = \pen_textmarker
If bg><-1  Then \pen_back         = screen_GetPenRGB {bg}
If mbg><-1 Then \pen_marker       = screen_GetPenRGB {mbg} : \rgb_marker = mbg
If cbg><-1 Then \pen_cursor       = screen_GetPenRGB {cbg}
If cfg><-1 Then \pen_cursor_text  = screen_GetPenRGB {cfg}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_drag {*ted.tuited,mx.l,my.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - mx.l    : ???                                                             /
;/ - my.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_drag {*ted.tuited,mx.l,my.l}
SHARED tuidat()
If *ted
;error {"Drag: "+Str$(\win)+"/"+Str$(\tuiobj)}
mx = \xwin\MouseX - tuidat(\win,\tuiobj)\x
my = \xwin\MouseY - tuidat(\win,\tuiobj)\y
mx +\view_x
;rx +\view_x

lpos1.l = \range_lpos ;ted_y2line {*ted,\ry}
cpos1.l = \range_cpos ;ted_x2pos  {*ted,lpos1,\rx}

lpos2.l = ted_y2line {*ted,my}
cpos2.l = ted_x2pos  {*ted,lpos2,mx}

If \cursor_drag Then ted_blink {*ted,Off} :ted_setcursor{*ted,lpos2,cpos2,True,False}

If lpos1><lpos2 OR cpos1><cpos2
  ted_setmarker {*ted,lpos1,cpos1,lpos2,cpos2}
End If

If lpos2<\top_line Then ted_scroll {*ted,0,-1}
If lpos2>=\top_line+tuidat(\win,\tuiobj)\ys/\rowheight Then ted_scroll {*ted,0,1}
If mx<\view_x Then ted_scroll {*ted,-\rowheight,0}
If mx>\view_x+tuidat(\win,\tuiobj)\xs Then ted_scroll {*ted,\rowheight,0}
End If
End Statement












;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_cursor_move {*ted.tuited,dx.l,dy.l,shift.l}                     /
;/                                                                             /
;/ Description:                                                                /
;/ error {"Drag: "+Str$(\win)+"/"+Str$(\tuiobj)}                               /
;/ rx +\view_x                                                                 /
;/ lpos1.l = \range_lpos ;ted_y2line {*ted,\ry}                                /
;/ cpos1.l = \range_cpos ;ted_x2pos  {*ted,lpos1,\rx}                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - dx.l    : ???                                                             /
;/ - dy.l    : ???                                                             /
;/ - shift.l    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_cursor_move {*ted.tuited,dx.l,dy.l,shift.l}
SHARED tuidat()
If shift AND \shiftmark
  If \marker1_lpos<0 OR \marker2_lpos<0
    \range_lpos = \cursor_lpos
    \range_cpos = \cursor_cpos
  End If
End If

If dx><0
  If shift AND (\shiftmark=False)
    If dx>0
      clength.l = 0
      !line_use {\cursor_lpos}
      If *tline
        clength = *tline\clength
      End If
      \cursor_cpos = clength
    Else
      \cursor_cpos = 0
    End If
  Else
    \cursor_cpos+dx
  End If

  If \wrap_left
    While \cursor_cpos<0
      If \cursor_lpos>0
        \cursor_lpos-1
        !line_use {\cursor_lpos}
        If *tline
          \cursor_cpos + *tline\clength +1
        Else
          \cursor_cpos + 1
        End If
      Else
        \cursor_cpos = 0
      End If
    Wend
  End If

  If \wrap_right
    !line_use {\cursor_lpos}
    If *tline
      clength.l=*tline\clength
    Else
      clength=0
    End If

    While \cursor_cpos>clength


      If \cursor_lpos<\lines_used-1
        \cursor_cpos-clength-1
        \cursor_lpos+1
        !line_use {\cursor_lpos}
        If *tline
          clength=*tline\clength
        Else
          clength=0
        End If
      Else
        If *tline Then \cursor_cpos = *tline\clength:Else \cursor_cpos=0
        clength = *tline\clength
      End If
    Wend
  End If
  \cursor_pixpos = ted_pos2x {*ted,\cursor_lpos,\cursor_cpos}
End If

If dy><0
  ted_line_settokencase{*ted}
  If shift AND (\shiftmark=False) Then dy.l = tuidat(\win,\tuiobj)\xs/\rowheight * Sgn(dy)

  \cursor_lpos + dy
  If \cursor_lpos>=\lines_used Then \cursor_lpos=\lines_used-1
  If \cursor_lpos<0 Then \cursor_lpos=0
  \cursor_cpos = ted_x2pos{*ted,\cursor_lpos,\cursor_pixpos}
End If

;If \cursor_lpos<\top_line Then ted_scroll {*ted,0,\cursor_lpos-\top_line}
;If \cursor_lpos>\top_line + tuidat(\win,\tuiobj)\ys/\rowheight-1 Then ted_scroll {*ted,0,\cursor_lpos-\top_line-tuidat(\win,\tuiobj)\ys/\rowheight+1}

;pixpos.l = ted_pos2x {*ted,\cursor_lpos,\cursor_cpos} - \view_x
;If pixpos<0 Then ted_scroll {*ted,pixpos,0}
;If pixpos>tuidat(\win,\tuiobj)\xs-\rowheight Then ted_scroll {*ted,pixpos-tuidat(\win,\tuiobj)\xs+\rowheight,0}
 ted_cursor_show {*ted}
If shift AND \shiftmark
  ted_setmarker {*ted,\range_lpos,\range_cpos,\cursor_lpos,\cursor_cpos}
;  ted_drag {*ted,\cursor_lpos,\cursor_cpos}
Else
  If \marker_loose Then ted_setmarker {*ted}
  ted_draw_stat{*ted,"",False}
End If
ted_checkbrackets{*ted}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_setcursor_xy {*ted.tuited,x.l,y.l}                              /
;/                                                                             /
;/ Description:                                                                /
;/ If \cursor_lpos<\top_line Then ted_scroll {*ted,0,\cursor_lpos-\top_line}   /
;/ If \cursor_lpos>\top_line + tuidat(\win,\tuiobj)\ys/\rowheight-1 Then ted:: /
;/ _scroll {*ted,0,\cursor_lpos-\top_line-tuidat(\win,\tuiobj)\ys/\rowheight:: /
;/ +1}                                                                         /
;/ pixpos.l = ted_pos2x {*ted,\cursor_lpos,\cursor_cpos} - \view_x             /
;/ If pixpos<0 Then ted_scroll {*ted,pixpos,0}                                 /
;/ If pixpos>tuidat(\win,\tuiobj)\xs-\rowheight Then ted_scroll {*ted,pixpos:: /
;/ -tuidat(\win,\tuiobj)\xs+\rowheight,0}                                      /
;/  ted_drag {*ted,\cursor_lpos,\cursor_cpos}                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_setcursor_xy {*ted.tuited,x.l,y.l}
lpos.l = ted_y2line{*ted,y}
cpos.l = ted_x2pos{*ted,lpos,x}
ted_setcursor {*ted,lpos,cpos}
End Statement



; "Insert" at line 5 moves line 5-end to position 6 and creates new line at position 5
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_insert_line {*ted.tuited,lpos.l,text.l,@clength.l}              /
;/                                                                             /
;/ Description:                                                                /
;/ "Insert" at line 5 moves line 5-end to position 6 and creates new line at:: /
;/  position 5                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - text.l    : ???                                                           /
;/ - clength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_insert_line {*ted.tuited,lpos.l,text.l,@clength.l}
If lpos<0 OR lpos>\lines_used Then lpos = \lines_used
\bracket1_lpos=-1  ; hide brackets
\lines_used+1
If \lines_used>=\max_lines
;  error {"Must extend LUT !"}; extend LUT
  newdoc.l = AllocMem_((\max_lines+#init_maxlines)*4,#MEMF_CLEAR)
  If \doc
    If newdoc
      CopyMem_ \doc,newdoc,\max_lines*4
    End If
    FreeMem_ \doc,\max_lines*4
  End If
  \doc = newdoc
  \max_lines+#init_maxlines
End If
If \doc
  undo_Store {\undo,#undoid_insert_line,0,0,lpos}
  !line_use {lpos}
  If *tline
    flags.l = *tline\flags
  Else
    flags.l = \last_flags
  End If
  If \lines_used-lpos-1>0 Then ted_copymem {\doc+(lpos*4),\doc+((lpos+1)*4),(\lines_used-lpos-1)*4};:error {"Lut shift !"} ; LUT shift
  !line_use {lpos}
  *tline = AllocMem_ (SizeOf.tline,#MEMF_CLEAR)  ; new entry
  Poke.l \doc+lpos*4,*tline
  If *tline
    *tline\flags = flags
    If clength<0 AND text><0 Then clength = Peek.l(text-4)
    If clength>0
      *tline\blength = clength+1+8
      *tline\text = AllocMem_ (*tline\blength,#MEMF_CLEAR)
      If *tline\text
        ted_copymem { text,*tline\text,clength} : Poke.b *tline\text+clength,0 ; Null terminated
        *tline\clength = clength


        ted_tokenize {*ted,lpos}

        ;error {"Line insterted at: "+Str$(lpos)+" = "+Peek.s(*tline\text)}
      Else
        *tline\clength = 0
      End If
    Else
      *tline\clength = 0
      *tline\text    = 0
    End If
  End If
End If
End Statement

; "Delete" at line 5 frees line 5 and moves line 6-end to position 5
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_delete_line {*ted.tuited,lpos.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/  error {"Must extend LUT !"}; extend LUT                                    /
;/         ;error {"Line insterted at: "+Str$(lpos)+" = "+Peek.s(*tline\text)} /
;/ "Delete" at line 5 frees line 5 and moves line 6-end to position 5          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_delete_line {*ted.tuited,lpos.l}
\bracket1_lpos=-1  ; hide brackets
If lpos<0 Then lpos=\cursor_lpos
If lpos<0 OR lpos>=\lines_used Then lpos=\lines_used-1
If lpos>=0

  !line_use {lpos}
  If *tline
    undo_Store {\undo,#undoid_delete_line,*tline\text,*tline\clength,lpos}
    If *tline\text Then FreeMem_ *tline\text ,*tline\blength : *tline\text=0
    ted_tokenize {*ted ,lpos}
    FreeMem_ *tline,SizeOf.tline
    *tline = 0
    Poke.l \doc+lpos*4,0
  End If
  If \lines_used-lpos-1>0 Then ted_copymem { \doc+((lpos+1)*4),\doc+(lpos*4),(\lines_used-lpos-1)*4} ;:error {"Lut shift !"}
  \lines_used-1
  If \cursor_lpos>=\lines_used Then \cursor_lpos=\lines_used-1
  If \cursor_lpos<0 Then \cursor_lpos=0

End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_do_delete_line {*ted.tuited}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_do_delete_line {*ted.tuited}
If *ted
  undo_Start{*ted\undo}
  ted_delete_line {*ted,-1}
  ted_draw {*ted}
  ted_update_scroller {*ted}
End If
End Statement


; insert at cpos 5 will move characters 5-end to cpos 6 and fill cpos with inerttext
; insert at higher cpos than clength will add some spaces between
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_insert {*ted.tuited,lpos.l,cpos.l,text.l,@ilength.l}            /
;/                                                                             /
;/ Description:                                                                /
;/ insert at cpos 5 will move characters 5-end to cpos 6 and fill cpos with :: /
;/ inerttext                                                                   /
;/ insert at higher cpos than clength will add some spaces between             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - cpos.l    : ???                                                           /
;/ - text.l    : ???                                                           /
;/ - ilength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_insert {*ted.tuited,lpos.l,cpos.l,text.l,@ilength.l}
\bracket1_lpos=-1  ; hide brackets
If lpos<0 OR lpos>=\lines_used Then lpos=\lines_used-1
If lpos<0
  ted_insert_line {*ted,0,text,ilength}
Else
  If ilength<1 AND text><0 Then ilength = Peek.l(text-4)
  If cpos<0 Then cpos=0
  !line_use {lpos}
  If *tline=0
    ted_insert_line{*ted,lpos,0,0}:\lines_used-1:!line_use{lpos}
   ;= AllocMem_ (SizeOf.tline,#MEMF_CLEAR):Poke.l \doc+lpos*4,*tline
  End If
  If *tline
    spacelength.l  = cpos - *tline\clength : If spacelength<0 Then spacelength=0
    clength.l      = *tline\clength + spacelength + ilength
    copylength.l   = *tline\clength - cpos : If copylength<0 Then copylength=0

    undo_Store {\undo,#undoid_insert,*tline\text,*tline\clength,lpos}
    If clength>*tline\blength-1 OR *tline\text=0 ; Zeile erneuern
      blength.l = clength+1+8
      newline.l = AllocMem_ (blength,#MEMF_CLEAR)
      If *tline\text
        ted_copymem { *tline\text,newline,*tline\clength+1}
        FreeMem_ *tline\text,*tline\blength
      End If
      *tline\blength = blength
      *tline\text    = newline
    End If

    If *tline\text
      a.s = LSet$(" ",clength)
      If cpos>0 Then CopyMem_ *tline\text,&a.s,Min(cpos,*tline\clength) ; left side
      If text Then CopyMem_ text,&a.s+cpos,ilength ; insert text
      If copylength>0 Then CopyMem_ *tline\text+cpos,&a.s+cpos+ilength,copylength
      CopyMem_ &a.s,*tline\text,clength+1 ; BB Strings are 0 terminated as well
      *tline\clength = clength
    End If
    If ilength<2 Then ted_tokenize {*ted,lpos,False}:Else ted_tokenize {*ted,lpos,True}
  End If
End If
End Statement


; "delete" at cpos -1 removes elength-1 characters and appends the rest to upper line
; "delete" at cpos 0 removes elength charakters including position 0
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_delete {*ted.tuited,lpos.l,cpos.l,elength.l}                    /
;/                                                                             /
;/ Description:                                                                /
;/     AllocMem_ (SizeOf.tline,#MEMF_CLEAR):Poke.l \doc+lpos*4,*tline          /
;/ "delete" at cpos -1 removes elength-1 characters and appends the rest to :: /
;/ upper line                                                                  /
;/ "delete" at cpos 0 removes elength charakters including position 0          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - cpos.l    : ???                                                           /
;/ - elength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_delete {*ted.tuited,lpos.l,cpos.l,elength.l}
\bracket1_lpos=-1  ; hide brackets
If lpos<0 OR lpos>=\lines_used Then lpos =\lines_used-1
If lpos>=0
  !line_use {lpos}
  If *tline
    If elength<2 Then force.l=False:Else force=True
    If elength>0
      If cpos<0
        If lpos>0 AND \del_wrap=True
          elength-1 ; join lines
          !line_use {lpos}
          !line2_use{lpos-1}
          If *tline2 ; \doc\base[lpos-1]
            clength.l= *tline2\clength ; \doc\base[lpos-1]\clength
            If clength>0 AND *tline\text><False
              ted_insert {*ted,lpos-1,clength,*tline\text,*tline\clength}
              ted_delete_line {*ted,lpos}
            Else
              If *tline\text=False
                ted_delete_line {*ted,lpos}
              Else
                ted_delete_line {*ted,lpos-1}
              End If
              clength=1
            End If
            lpos-1
            cpos+clength
          Else
            ted_delete_line{*ted,lpos-1}
            lpos-1
            cpos=0
          End If
        Else
          elength-1 : cpos=0
        End If
      End If
    End If

    If elength>0
      !line_use {lpos}
      If *tline
        If cpos>=*tline\clength AND \entf_wrap=True ; join lines from down
          If lpos<\lines_used-1
            !line_use {lpos}
            !line2_use{lpos+1}
            If *tline2 ; \doc\base[lpos+1]
              clength.l= *tline2\clength ; \doc\base[lpos+1]\clength
              If *tline2\text><0 AND clength>0
                ;cpos+*tline\clength
                ted_insert {*ted,lpos,*tline\clength,*tline2\text,clength}

              End If
              ted_delete_line {*ted,lpos+1}
            End If
          End If
          elength-1 ; ... ; drag from next line
        End If
      End If
    End If

    If elength>0
      !line_use {lpos}
      If *tline
        If *tline\text
          undo_Store {\undo,#undoid_delete,*tline\text,*tline\clength,lpos}
          If elength<0 Then elength = *tline\clength-cpos
          elength.l = Min(elength,*tline\clength-cpos)
          clength.l = *tline\clength-elength  ; new length of string
          If clength<0 Then clength=0
          copylength.l = *tline\clength-cpos-elength+1 ; length of strin on right side
          If clength>0
            If copylength>0 ; move left ...
              ted_copymem { *tline\text+cpos+elength,*tline\text+cpos,copylength}
            End If
          Else
            If *tline\text Then FreeMem_ *tline\text,*tline\blength : *tline\text=0
          End If
          *tline\clength = clength
        End If
      End If
    End If
    ted_tokenize {*ted,lpos,force}
  End If
End If
If \cursor_lpos>\lines_used-1 Then \cursor_lpos=\lines_used-1
If \top_line>\lines_used-1 Then \top_line=\lines_used-1
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_breakreturn {*ted.tuited,lpos.l,cpos.l,@indent.l}   /
;/                                                                             /
;/ Description:                                                                /
;/           elength-1 ; join lines                                            /
;/             clength.l= *tline2\clength ; \doc\base[lpos-1]\clength          /
;/               clength.l= *tline2\clength ; \doc\base[lpos+1]\clength        /
;/                 ;cpos+*tline\clength                                        /
;/           elength-1 ; ... ; drag from next line                             /
;/           clength.l = *tline\clength-elength  ; new length of string        /
;/           copylength.l = *tline\clength-cpos-elength+1 ; length of strin :: /
;/ on right side                                                               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - cpos.l    : ???                                                           /
;/ - indent.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_breakreturn {*ted.tuited,lpos.l,cpos.l,@indent.l}
n.l=0
!line_use {lpos}
If *tline
  If *tline\text
    If \autoindent AND indent
      n.l = 0
      While Peek.b(*tline\text+n)=32 AND n<*tline\clength
        n+1
      Wend
      If n>\cursor_cpos Then n=0
      a.s = LSet$(" ",n)
    Else
      a.s = ""
    End If

    If cpos<*tline\clength
      a.s = a.s + Peek.s(*tline\text+cpos)
      ted_insert_line {*ted,lpos+1,&a.s,FLen(a.s)}
      !line_use {lpos}
      ted_delete {*ted,lpos,cpos,*tline\clength-cpos}
    Else
      ted_insert_line {*ted,lpos+1,&a.s}
    End If
  Else
    ted_insert_line {*ted,lpos+1,&a.s}
  End If
Else
  ted_insert_line {*ted,lpos+1,&a.s}
End If
Function Return n
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_delete_marker {*ted.tuited,@upd.l}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - upd.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_delete_marker {*ted.tuited,@upd.l}
lpos_a.l = \marker1_lpos
lpos_b.l = \marker2_lpos
If lpos_a>=0
  For lpos.l = lpos_a+1 To lpos_b-1
    ted_delete_line {*ted,lpos_a+1}
  Next

  If lpos_a=lpos_b
    elength.l = \marker2_cpos-\marker1_cpos
    ted_delete {*ted,lpos_a,\marker1_cpos,elength}
  Else
    !line_use{lpos_a}
    If *tline
      elength = *tline\clength-\marker1_cpos
      If \marker1_cpos=0
        ted_delete_line {*ted,lpos_a} : lpos_a-1
      Else
        ted_delete {*ted,lpos_a,\marker1_cpos,elength}
      End If
    End If

    !line_use {lpos_a+1}
    If *tline
      elength = \marker2_cpos
      ;If elength = *tline\clength
      ;  ted_delete_line {*ted,lpos_a+1}
      ;Else
        ted_delete {*ted,lpos_a+1,0,elength}
      ;End If
    End If
  End If
  ted_setcursor {*ted,\marker1_lpos,\marker1_cpos,-1,-1,False}

ted_setmarker {*ted}
If upd Then ted_draw {*ted}
If upd Then ted_update_scroller {*ted}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_do_delete {*ted.tuited}                                         /
;/                                                                             /
;/ Description:                                                                /
;/       ;If elength = *tline\clength                                          /
;/       ;  ted_delete_line {*ted,lpos_a+1}                                    /
;/       ;Else                                                                 /
;/       ;End If                                                               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_do_delete {*ted.tuited}
If \marker1_lpos>=0 AND \marker2_lpos>=0
  undo_Start {*ted\undo}
  ted_delete_marker{*ted,False}
  ted_update_scroller {*ted}
  ted_draw {*ted}
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_do_selectall {*ted.tuited}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_do_selectall {*ted.tuited}
ted_setmarker{*ted,0,0,\lines_used-1,\max_cpos}
;ted_draw {*ted}
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = ted_getmarker {*ted.tuited}                             /
;/                                                                             /
;/ Description:                                                                /
;/ ted_draw {*ted}                                                             /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ted_getmarker {*ted.tuited}
lpos_a.l = \marker1_lpos
lpos_b.l = \marker2_lpos

string.s = ""

If lpos_a>=0

  For lpos.l = lpos_a+1 To lpos_b-1
    !line_use{lpos}
    If *tline
      If *tline\text
        string.s + Peek.s(*tline\text)
      End If
    End If
    string.s+Chr$(10)
    If FLen(string.s)>(#max_stringbuffer/2-8) Then Pop For:Pop If:error {"Not enough string buffer for clipboard!"}:string.s = "":Goto xskipcopy
  Next

  If lpos_a=lpos_b
    elength.l = \marker2_cpos-\marker1_cpos
    If elength>0
      !line_use{lpos_a}
      If *tline
        If *tline\text
          string.s = LSet$(" ",elength)+string.s
          CopyMem_ *tline\text+\marker1_cpos,&string.s,elength
        End If
      End If
    End If

  Else
    string_add.s = ""
    !line_use{lpos_a}
    If *tline
      If *tline\text
        elength = *tline\clength-\marker1_cpos
        If elength>0
          string_add.s = Peek.s(*tline\text+\marker1_cpos)
        End If
      End If
    End If
    string.s = string_add.s + Chr$(10) + string.s

    !line_use {lpos_b}
    If *tline
      elength = \marker2_cpos
      If *tline\text
        string.s = string.s + LSet$(" ",elength)
        CopyMem_ *tline\text,&string.s + FLen(string.s)-elength,elength
      End If
    End If
  End If

End If
xskipcopy:
Function Return string.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_copyclip {*ted.tuited,@delflag.l}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - delflag.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_copyclip {*ted.tuited,@delflag.l}
  lpos_a.l = \marker1_lpos
  lpos_b.l = \marker2_lpos

  string.s = ""

  If lpos_a>=0
    ted_lock{*ted}
    For lpos.l = lpos_a+1 To lpos_b-1
      !line_use{lpos}
      If *tline
        If *tline\text
          string.s + Peek.s(*tline\text)
        End If
      End If
      string.s+Chr$(10)
      If FLen(string.s)>(#max_stringbuffer/2-8) Then Pop For:Pop If:ted_unlock {*ted}:error {"Not enough string buffer for clipboard!"}:string.s = "":Goto skipcopy
    Next

    If lpos_a=lpos_b
      elength.l = \marker2_cpos-\marker1_cpos
      If elength>0
        !line_use{lpos_a}
        If *tline
          If *tline\text
            string.s = LSet$(" ",elength)+string.s
            CopyMem_ *tline\text+\marker1_cpos,&string.s,elength
          End If
        End If
      End If

    Else
      string_add.s = ""
      !line_use{lpos_a}
      If *tline
        If *tline\text
          elength = *tline\clength-\marker1_cpos
          If elength>0
            string_add.s = Peek.s(*tline\text+\marker1_cpos)
          End If
        End If
      End If
      string.s = string_add.s + Chr$(10) + string.s

      !line_use {lpos_b}
      If *tline
        elength = \marker2_cpos
        If *tline\text
          string.s = string.s + LSet$(" ",elength)
          CopyMem_ *tline\text,&string.s + FLen(string.s)-elength,elength
        End If
      End If
    End If
    ;NSetClipText string.s
    clipboard_SetText{&string.s,FLen(string)}

    If delflag
      ted_do_delete {*ted}
    Else
      If \marker_loose Then ted_setmarker {*ted}
    End If
    ted_unlock {*ted}
  End If
  skipcopy:
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_do_copy {*ted.tuited}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_do_copy {*ted.tuited}
ted_copyclip{*ted,False}
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_do_cut {*ted.tuited}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_do_cut {*ted.tuited}
ted_copyclip{*ted,True}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_search_set {*ted.tuited,@lpos.l,@cpos.l}                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - cpos.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_search_set {*ted.tuited,@lpos.l,@cpos.l}
If *ted
  If lpos<0 Then lpos = 0
  If cpos<0 Then cpos = -1
  *ted\search_lpos = lpos
  *ted\search_cpos = cpos
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_search_setcursor {*ted.tuited}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_search_setcursor {*ted.tuited}
If *ted
  lpos.l = *ted\cursor_lpos
  cpos.l = *ted\cursor_cpos-1
  If lpos<0 Then lpos = 0
  If cpos<0 Then cpos = -1
  *ted\search_lpos = lpos
  *ted\search_cpos = cpos
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_search {*ted.tuited,text.s,@docase.l,@upd.l}        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - text.s    : ???                                                           /
;/ - docase.l    : ???                                                         /
;/ - upd.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_search {*ted.tuited,text.s,@docase.l,@upd.l}
succ.l = False
If *ted AND text.s><""
  If docase=False Then text.s = LCase$(text.s)
  While succ=False AND *ted\search_lpos<*ted\lines_used
    !line_use {*ted\search_lpos}
    If *tline
      If *tline\text
        If docase=False
          a.s = LCase$(Peek.s(*tline\text)); + *ted\search_cpos))
        Else
          a.s = Peek.s(*tline\text); + *ted\search_cpos)
        End If
        *ted\search_cpos = Instr (a.s,text.s,*ted\search_cpos+2)-1
        If *ted\search_cpos<0
          *ted\search_lpos + 1
          *ted\search_cpos = -1
        Else
          succ = True
        End If
      Else
        *ted\search_lpos + 1
        *ted\search_cpos = -1
      End If
    Else
      *ted\search_lpos + 1
      *ted\search_cpos = -1
    End If
  Wend
  If succ
    ted_setcursor {*ted,*ted\search_lpos,*ted\search_cpos+FLen(text.s),False,-1,upd}
    ted_setmarker {*ted,*ted\search_lpos,*ted\search_cpos,*ted\search_lpos,*ted\search_cpos+FLen(text.s),upd}
    If upd Then ted_marker_show {*ted}
  End If
End If
Function Return succ
End Function

;
;Statement ted_do_cut {*ted.tuited}
;lpos_a.l = \marker1_lpos
;lpos_b.l = \marker2_lpos
;
;string.s = ""
;
;If lpos_a>=0
;  ted_lock{*ted}
;  For lpos.l = lpos_a+1 To lpos_b-1
;    !line_use{lpos}
;    If *tline
;      If *tline\text
;        string.s + Peek.s(*tline\text)
;      End If
;    End If
;    string.s+Chr$(10)
;    If Flen(string.s)>(#max_stringbuffer/2-8) Then Pop For:Pop If:ted_unlock {*ted} :error {"Not enough string buffer for clipboard!"}:string.s = "":Goto skipcut
;
;  Next
;
;  If lpos_a=lpos_b
;    elength.l = \marker2_cpos-\marker1_cpos
;    !line_use{lpos_a}
;    If *tline
;      If *tline\text
;        string.s = LSet$(" ",elength)+string.s
;        CopyMem_ *tline\text+\marker1_cpos,&string.s,elength
;      End If
;    End If
;
;  Else
;    !line_use{lpos_a}
;    If *tline
;      elength = *tline\clength-\marker1_cpos
;      string.s = Peek.s(*tline\text+\marker1_cpos) + Chr$(10)+ string.s
;    End If
;
;    !line_use {lpos_b}
;    If *tline
;      elength = \marker2_cpos
;      If *tline\text
;        string.s = string.s + LSet$(" ",elength)
;        CopyMem_ *tline\text,&string.s + Flen(string.s)-elength,elength
;      End If
;    End If
;  End If
;  NSetClipText string.s
;  ted_unlock {*ted}
;  ted_do_delete {*ted}
;End If
;skipcut:
;End Statement
;







;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_mclick {*ted.tuited,mx.l,my.l,mb.l,dbl.l}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - mx.l    : ???                                                             /
;/ - my.l    : ???                                                             /
;/ - mb.l    : ???                                                             /
;/ - dbl.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_mclick {*ted.tuited,mx.l,my.l,mb.l,dbl.l}
If *ted
If mb=1
  ;error {"ted click !"}
  ted_blink {*ted,Off}
  ted_setcursor_xy {*ted ,mx+\view_x,my}
  cpos.l = 0
  apos.l = 0
  If dbl
    !line_use {\cursor_lpos}
    If *tline
      If *tline\text
      cpos.l = ted_x2pos  {*ted,\range_lpos,mx+\view_x }
      breakme.l=False
      While cpos>=0 AND breakme=False
        c.b = Peek.b(*tline\text+cpos)
        If (c>=@"A" AND c<=@"Z") OR (c>=@"a" AND c<=@"z") OR (c>=@"0" AND c<=@"9") OR c=@"_" OR c<0
          cpos-1
        Else
          breakme.l = True
          cpos+1
        End If
      Wend
      If cpos<0 Then cpos=0
      apos.l = cpos
      cpos.l = ted_x2pos  {*ted,\range_lpos,mx+\view_x }
      breakme.l=False
      While cpos<*tline\clength AND breakme=False
        c.b = Peek.b(*tline\text+cpos)
        If (c>=@"A" AND c<=@"Z") OR (c>=@"a" AND c<=@"z") OR (c>=@"0" AND c<=@"9") OR c=@"_" OR c<0
          cpos+1
        Else
          breakme.l = True
        End If
      Wend
      If cpos>*tline\clength Then cpos=*tline\clength
      End If
      ted_setmarker {*ted,\cursor_lpos,apos,\cursor_lpos,cpos}
    End If
  Else
    ;ted_setmarker {*ted}
  End If
  \range_lpos = ted_y2line {*ted,my}
  \range_cpos = ted_x2pos  {*ted,\range_lpos,mx+\view_x }

End If
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_clonepath {*ted1.tuited,*ted2.tuited}                           /
;/                                                                             /
;/ Description:                                                                /
;/   ;error {"ted click !"}                                                    /
;/     ;ted_setmarker {*ted}                                                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted1.tuited    : ???                                                     /
;/ - *ted2.tuited    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_clonepath {*ted1.tuited,*ted2.tuited}
If *ted1 AND *ted2
str_Write{&*ted2\path,str_Read {&*ted1\path}}
str_Write{&*ted2\fil,str_Read {&*ted1\fil}}
str_Write{&*ted2\pattern,str_Read {&*ted1\pattern}}
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_save_ascii {*ted.tuited,filename.s,@upd.l,@ask.l,:: /
;/ @sleep.l,@ascii.l}                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - filename.s    : ???                                                       /
;/ - upd.l    : ???                                                            /
;/ - ask.l    : ???                                                            /
;/ - sleep.l    : ???                                                          /
;/ - ascii.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_save_ascii {*ted.tuited,filename.s,@upd.l,@ask.l,@sleep.l,@ascii.l}
SHARED ASL_path.s,ASL_file.s,ASL_pattern.s
succ.l = False
If *ted
If \win>=0 AND sleep Then win_Lock {\win}
ASL_file.s    = str_Read{&*ted\fil}
ASL_path.s    = str_Read{&*ted\path}
ASL_pattern.s = str_Read{&*ted\pattern}
ted_line_settokencase {*ted}
If ask=False Then mode.l = #file_forcewrite:Else mode = #file_write
If \flags&#tuited_backup Then dummy.l = dos_Delete {filename.s+".bak"}:dummy.l = dos_Rename {filename.s,filename.s+".bak"}
dos.l = file_Open {filename.s,mode}
If \flags&#tuited_backup AND dos<0 Then dummy.l = dos_Rename {filename.s+".bak",filename.s}
Select \returncode
  Case #return_win
    ret.s = Chr$(13)+Chr$(10)
  Case #return_amiga
    ret.s = Chr$(10)
  Case #return_unix
    ret.s = Chr$(13)
  Default
    ret.s = Chr$(10)
End Select
If dos>=0
  If upd
    ted_setpath {*ted,file_GetPath{dos},file_GetName{dos},str_Read{&*ted\pattern}}
    ted_setfile {*ted,file_GetFullName{dos}}
  End If
  succ.l = True
  For lpos.l = 0 To \lines_used-1
    !line_use {lpos}

    Select \tokenizing
      Case #tokenize_hex
        If *tline
          a.s = Peek.s(*tline\text)
          dot.l = Instr(a.s,": ",1)
          com.l = Instr(a.s,"|",dot)
          a.s = Replace$(Mid$(a.s,dot+1,com-dot+1)," ","")
          For n.l=0 To FLen(a.s)/2-1
            c.b = Vallong("$"+Mki$(Peek.w(&a.s+n*2)))
            succ&file_WriteMem{dos,&c,1}
          Next

        End If

      Default
        If *tline
          If *tline\text
            succ&file_WriteMem {dos,*tline\text,*tline\clength}
          End If
        End If
        If lpos<\lines_used-1 Then succ&file_WriteMem {dos,&ret.s,FLen(ret.s)}
    End Select
    If succ=False Then lpos=\lines_used
  Next
  file_Close{dos}
  If upd Then undo_SetSaved {\undo}
End If
If \win>=0 AND sleep Then Delay_ 1:win_Unlock {\win}
End If
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = ted_getstring {*ted.tuited}                             /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s ted_getstring {*ted.tuited}
string.s = ""
For lpos.l = 0 To \lines_used-1
  !line_use {lpos}
  If *tline
    If *tline\text
      string.s + Peek.s(*tline\text)
    End If
  End If
  string.s+Chr$(10)
Next
Function Return string.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_getlines {*ted.tuited}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_getlines {*ted.tuited}
Function Return \lines_used
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_isused {*ted.tuited}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_isused{*ted.tuited}
If \lines_used=0 Then Function Return 0
If \lines_used>1 Then Function Return -1
succ.l = 0
!line_use{0}
If *tline
  If *tline\clength>0 Then succ=-1
End If
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_insert_string {*ted.tuited,lpos.l,cpos.l,str_ptr.l,@blength.l:: /
;/ ,@upd.l}                                                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - lpos.l    : ???                                                           /
;/ - cpos.l    : ???                                                           /
;/ - str_ptr.l    : ???                                                        /
;/ - blength.l    : ???                                                        /
;/ - upd.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_insert_string {*ted.tuited,lpos.l,cpos.l,str_ptr.l,@blength.l,@upd.l}
If blength<=0 Then blength.l = Peek.l(str_ptr-4)
a.s = ""
first.l = True
epos.l = 0
While blength>0
  dummy.b = Peek.b(str_ptr) : str_ptr+1 : blength-1
  Select dummy
    Case 10
      If first
        ted_insert {*ted,lpos,cpos,&a.s}
        cpos.l = ted_breakreturn {*ted,lpos,cpos+FLen(a.s),False}
        cpos=0
        epos.l = cpos+FLen(a.s)
        first=False
      Else
        ted_insert_line{*ted,lpos,&a.s}
      End If
      a.s = ""
      lpos+1
    Case 13
      ; ....
    Default
      ;If dummy>31 OR dummy<0 Then
      a.s + Chr$(dummy)
  End Select

Wend
If a.s><""
  ted_insert {*ted,lpos,cpos,&a.s}
  epos.l = cpos+FLen(a.s)
End If

ted_setcursor{*ted,lpos,epos,-1,-1,upd}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_do_paste {*ted.tuited}                                          /
;/                                                                             /
;/ Description:                                                                /
;/       ; ....                                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_do_paste {*ted.tuited}
;string.s = NGetClipText(#max_stringbuffer/2-8)
string.s = clipboard_GetTextStr{}
If string.s><""
  ted_lock {*ted}
  undo_Start {*ted\undo}
  If \marker_loose Then ted_delete_marker {*ted}
  ted_insert_string {*ted,\cursor_lpos,\cursor_cpos,&string.s}
  ted_update_scroller {*ted}
  ted_draw {*ted}
  ted_unlock {*ted}
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_do_replace {*ted.tuited,string.s}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - string.s    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_do_replace {*ted.tuited,string.s}
If *ted
  If *ted\marker1_lpos>=0 AND \marker2_lpos>=0

    undo_Start {*ted\undo}
    ted_delete_marker {*ted}
    If string.s><""
      ted_insert_string {*ted,\cursor_lpos,\cursor_cpos,&string.s}
    End If
    ted_update_scroller {*ted}
    ted_draw {*ted}
  End If
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_do_replace_all {*ted.tuited,searchstring.s,replac:: /
;/ estring.s,@docase.l}                                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - searchstring.s    : ???                                                   /
;/ - replacestring.s    : ???                                                  /
;/ - docase.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_do_replace_all {*ted.tuited,searchstring.s,replacestring.s,@docase.l}
If *ted
  ted_lock {*ted}
  n.l = 0
  undo_Start {*ted\undo}
  rlen.l = FLen(replacestring.s)
  slen.l = FLen(searchstring.s)
  omp1_lpos.l = *ted\marker1_lpos
  omp1_cpos.l = *ted\marker1_cpos
  omp2_lpos.l = *ted\marker2_lpos
  omp2_cpos.l = *ted\marker2_cpos

  If (*ted\search_lpos = *ted\marker1_lpos AND *ted\search_cpos = *ted\marker1_cpos AND *ted\marker2_cpos-*ted\marker1_cpos=slen) OR *ted\marker1_lpos<0
    elpos.l = *ted\lines_used
    ecpos.l = 0
    slpos.l = 0
    scpos.l = 0
  Else
    If *ted\marker2_lpos=*ted\marker1_lpos
      elpos.l = *ted\marker2_lpos
      slpos.l = elpos

      ecpos.l = Max(*ted\marker2_cpos,*ted\marker1_cpos)
      scpos.l = Min(*ted\marker2_cpos,*ted\marker1_cpos)
    Else
      If *ted\marker2_lpos>*ted\marker1_lpos
        elpos.l = *ted\marker2_lpos
        ecpos.l = *ted\marker2_cpos
        slpos.l = *ted\marker1_lpos
        scpos.l = *ted\marker1_cpos
      Else
        elpos.l = *ted\marker1_lpos
        ecpos.l = *ted\marker1_cpos
        slpos.l = *ted\marker2_lpos
        scpos.l = *ted\marker2_cpos
      End If
    End If
  End If
  ted_search_set{*ted,slpos,scpos}
  *ted\marker1_lpos  =-1
  ted_setmarker{*ted,-1,-1,-1,-1,False}
  ted_setcursor{*ted,slpos,scpos,-1,-1,False}
  Repeat
   If *ted\marker1_lpos>=0 AND \marker2_lpos>=0
    ted_delete_marker {*ted,False}
    If replacestring.s><""
      ted_insert_string {*ted,\cursor_lpos,\cursor_cpos,&replacestring.s,rlen,False}
    End If
    n+1
   End If
   ted_search_setcursor {*ted}
  Until ted_search {*ted,searchstring.s,docase,False}=False OR *ted\search_lpos>elpos OR (*ted\search_lpos=elpos AND *ted\search_cpos>ecpos)

  ted_setmarker{*ted,omp1_lpos,omp1_cpos,omp2_lpos,omp2_cpos,False}
  ted_update_scroller {*ted}
  ted_draw {*ted}
  ted_unlock {*ted}
End If
Function Return n
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_do_undo {*ted.tuited}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_do_undo {*ted.tuited}
If *ted
  ted_lock {*ted}
  undo_Stop {\undo}
  cpos.l = \cursor_cpos
  lpos.l = \cursor_lpos
  While undo_GetContainer{\undo}
    succ.l = True
    Select undo_GetContainerID {\undo}
      Case #undoid_delete
        lpos.l    = undo_GetContainerUserData1{\undo}
        blength.l = undo_GetContainerDataSize{\undo}
        ptr.l     = undo_GetContainerDataPtr{\undo}
        ted_delete_line {*ted,lpos}
        ted_insert_line {*ted,lpos,ptr,blength}

      Case #undoid_insert
        lpos.l    = undo_GetContainerUserData1{\undo}
        blength.l = undo_GetContainerDataSize{\undo}
        ptr.l     = undo_GetContainerDataPtr{\undo}
        ted_delete_line {*ted,lpos}
        ted_insert_line {*ted,lpos,ptr,blength}

      Case #undoid_delete_line
        lpos.l    = undo_GetContainerUserData1{\undo}
        blength.l = undo_GetContainerDataSize{\undo}
        ptr.l     = undo_GetContainerDataPtr{\undo}
        ted_insert_line {*ted,lpos,ptr,blength}

      Case #undoid_insert_line
        lpos.l    = undo_GetContainerUserData1{\undo}
        ted_delete_line {*ted,lpos}
    End Select
  Wend
  If succ=False Then message {"No more undo steps available!"}
  ted_setcursor {*ted,lpos,cpos}
  ted_draw{*ted}
  ted_update_scroller {*ted}
  ted_unlock {*ted}
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_redraw_damaged {*ted.tuited}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_redraw_damaged{*ted.tuited}
If *ted
For n.l = *ted\damage_begin To *ted\damage_end
  ted_draw_line {*ted,n}
Next
*ted\damage_begin = 0
*ted\damage_end   = -1
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_vanilla_key {*ted.tuited,key.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - key.l    : ???                                                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_vanilla_key {*ted.tuited,key.l}
SHARED tuievent,tuidat()
ted_blink {*ted,Off}
Select key
  Case 13
    undo_Start {*ted\undo}
    ted_delete_marker {*ted}
    If (tuievent\qual & #qual_shift) OR \breakreturn
      If tuievent\qual & #qual_shift Then indent.l=False:Else indent=True
      npos.l = ted_breakreturn {*ted,\cursor_lpos,\cursor_cpos,indent}
      ted_setcursor {*ted,\cursor_lpos+1,npos}
    Else
      a.s = ""
      If \autoindent
        !line_use {\cursor_lpos}
        If *tline
          If *tline\text
            n.l = 0
            While Peek.b(*tline\text+n)=32 AND n<*tline\clength
              n+1
            Wend
            a.s = LSet$(" ",n)
          End If
        End If
      End If
      ted_insert_line {*ted,\cursor_lpos+1,&a.s,FLen(a.s)}
      ted_setcursor {*ted,\cursor_lpos+1,FLen(a.s)}
    End If

    ted_draw {*ted}
    ted_update_scroller {*ted}
    tuievent\notify=False

  Case 127   ; Entfernen
    If \marker1_lpos>=0 AND \marker2_lpos>=0
      ted_do_delete {*ted}
    Else
      undo_Start {*ted\undo}
      oldlines.l = \lines_used
      ted_delete {*ted,\cursor_lpos,\cursor_cpos,1}

      If \lines_used><oldlines
        ted_draw {*ted}
      Else
        ted_draw_line {*ted,\cursor_lpos}
      End If
      ted_update_scroller {*ted}
    End If
    tuievent\notify=False

  Case 8     ; Del
    If \marker1_lpos>=0 AND \marker2_lpos>=0
      ted_do_delete {*ted}
    Else
      undo_Start {*ted\undo}
      delpos.l = \cursor_cpos-1
      delline.l = \cursor_lpos
      oldlines.l = \lines_used
      ted_cursor_move {*ted,-1,0,False}
      ted_delete {*ted,delline,delpos,1}
      If \lines_used><oldlines
        ted_draw {*ted}
      Else
        ted_draw_line {*ted,\cursor_lpos}
      End If
      ted_update_scroller {*ted}
    End If
    tuievent\notify=False

  Default

    If tuievent\qual&(#qual_amiga)
      Select key
        Case @"d"                      :tuievent\notify=False
          If \marker_loose AND (\marker1_lpos>=0 AND \marker2_lpos>=0)
            ted_do_delete {*ted}
          Else
            ted_do_delete_line{*ted}
          End If
        Case @"v" : ted_do_paste {*ted}:tuievent\notify=False
        Case @"z" : ted_do_undo {*ted} :tuievent\notify=False
        Case @"x" : ted_do_cut {*ted}  :tuievent\notify=False
        Case @"c" : ted_do_copy {*ted} :tuievent\notify=False
      End Select
      key=0
    End If

    If tuievent\qual&(#qual_ctrl)
      Select key
        Case 4 ; D
          If \marker_loose AND (\marker1_lpos>=0 AND \marker2_lpos>=0)
            ted_do_delete {*ted}
          Else
            ted_do_delete_line{*ted}
          End If
          tuievent\notify=False
        Case 22 : ted_do_paste {*ted} :tuievent\notify=False; V
        Case 26 : ted_do_undo {*ted}  :tuievent\notify=False; Z
        Case 24 : ted_do_cut {*ted}   :tuievent\notify=False; X
        Case 3 : ted_do_copy {*ted}   :tuievent\notify=False; C
      End Select
      key=0
    End If

    If key>31 OR key<0 OR key=9
      undo_Start {*ted\undo}
      ted_delete_marker {*ted}
      a.s = Chr$(key)
      ted_insert {*ted,\cursor_lpos,\cursor_cpos,&a.s}
      ted_draw_line {*ted,\cursor_lpos}
      ted_cursor_move {*ted,1,0,False}
      ted_update_scroller {*ted}
      tuievent\notify=False
    End If

End Select
ted_blink{*ted}
ted_redraw_damaged{*ted}
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_raw_key {*ted.tuited,rkey.l,vkey.l,string.s}                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - rkey.l    : ???                                                           /
;/ - vkey.l    : ???                                                           /
;/ - string.s    : ???                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_raw_key {*ted.tuited,rkey.l,vkey.l,string.s}
SHARED tuievent,tuidat()
ted_blink {*ted,Off}
If (tuievent\qual & (#qual_shift|#qual_ctrl|#qual_amiga)) Then shift.l =True:Else shift=False
;If tuievent\qual&(#qual_amiga|#qual_ctrl) Then ami.l = True:Else ami=False
Select rkey
  Case 78 ; >
    ted_cursor_move {*ted,1,0,shift} :tuievent\notify=False

  Case 79 ; <
    ted_cursor_move {*ted,-1,0,shift}:tuievent\notify=False

  Case 76 ; up
    ted_cursor_move {*ted,0,-1,shift}:tuievent\notify=False

  Case 77
    ted_cursor_move {*ted,0,1,shift}:tuievent\notify=False

  Case 66 ; TAB
    If *ted\flags&#tuited_readonly=0
    If tuievent\qual & (#qual_shift|#qual_amiga|#qual_ctrl) = 0
      If *ted\realtab
        ted_vanilla_key {*ted,vkey}
      Else
      undo_Start {*ted\undo}
      ted_delete_marker {*ted}
      a.s = LSet$(" ",\tabsize)
      ted_insert {*ted,\cursor_lpos,\cursor_cpos,&a.s}
      ted_draw_line {*ted,\cursor_lpos}
      ted_cursor_move {*ted,\tabsize,0,False}
      ted_update_scroller {*ted}
      tuievent\notify=False
      End If
    End If
    End If

  Default
    If *ted\flags&#tuited_readonly=0
      ted_vanilla_key {*ted,vkey}
    Else
      If tuievent\qual&(#qual_amiga|#qual_ctrl)  ; ok, copy is supported !
        Select vkey
          Case @"c" : ted_do_copy {*ted} :tuievent\notify=False
          Case 3 : ted_do_copy {*ted}   :tuievent\notify=False; C
        End Select
      End If
    End If
End Select

ted_blink{*ted}
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_putstring {*ted.tuited,str_ptr.l,@blength.l}                    /
;/                                                                             /
;/ Description:                                                                /
;/ If tuievent\qual&(#qual_amiga|#qual_ctrl) Then ami.l = True:Else ami=False  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - str_ptr.l    : ???                                                        /
;/ - blength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_putstring {*ted.tuited,str_ptr.l,@blength.l}
If *ted
dummyline.l = AllocMem_(\max_cpos+8,0)
\returncode = #return_amiga
If dummyline
  ted_free_text {*ted}
  If blength<=0 Then blength.l = Peek.l(str_ptr-4)
  \max_width     = 1
  cpos.l = 0
  While blength>0
    If cpos>=\max_cpos
      dummy.b = 10
    Else
      dummy.b = Peek.b(str_ptr) : str_ptr+1 : blength-1
    End If

    Select dummy
      Case 10
        ted_insert_line{*ted,-1,dummyline,cpos}
        cpos=0
      Case 0
        If cpos>0
          ted_insert_line{*ted,-1,dummyline,cpos}
          cpos=0
        End If
      Case 13
        \returncode = #return_win
      ;  If cpos>0
      ;    ted_insert_line{*ted,-1,dummyline,cpos}
      ;    cpos=0
      ;  End If

      Default
        ;If dummy>31 OR dummy<0 Then
        Poke.b dummyline + cpos,dummy:cpos+1
    End Select

  Wend

  ;If cpos>0
    ted_insert_line {*ted,-1,dummyline,cpos}
  ;End If


  \cursor_lpos   = 0
  \cursor_cpos    = 0
  \top_line      = 0
  \cursor_pixpos = 0

  FreeMem_ dummyline,\max_cpos+8
  ted_update_scroller {*ted}
Else
  error {"Unable to create temporary buffer !"}
End If
End If
End Statement



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_putstring_bb2 {*ted.tuited,str_ptr.l,@blength.l}    /
;/                                                                             /
;/ Description:                                                                /
;/       ;  If cpos>0                                                          /
;/       ;    ted_insert_line{*ted,-1,dummyline,cpos}                          /
;/       ;    cpos=0                                                           /
;/       ;  End If                                                             /
;/         ;If dummy>31 OR dummy<0 Then                                        /
;/   ;If cpos>0                                                                /
;/   ;End If                                                                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - str_ptr.l    : ???                                                        /
;/ - blength.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_putstring_bb2 {*ted.tuited,str_ptr.l,@blength.l}
If *ted
quoted.w=False
succ.l =True
dummyline.l = AllocMem_(\max_cpos*10+64,0)
If dummyline
  ted_free_text {*ted}
  If blength<=0 Then blength.l = Peek.l(str_ptr-4)
  \max_width     = 1
  cpos.l = 0
  While blength>0
    If cpos>=\max_cpos
      dummy.b = 0
    Else
      dummy.b = Peek.b(str_ptr) : str_ptr+1 : blength-1
      If dummy.b=34 Then quoted=1-quoted
    End If

    Select dummy
      Case 0
        ted_insert_line{*ted,-1,dummyline,cpos}
        cpos=0
        quoted=False

      Default

        If dummy<0
          If quoted=False
            libnum.l  = dummy&$7f*2 + ((Peek.b(str_ptr)&$80) LSR 7)
            tokenid.l = Peek.b(str_ptr)&$7f ;-128;: str_ptr+1:blength-1
            CNIF #support_ab2
            name.s = ted_tokenname_ab2 {*ted,(libnum LSL 16)+tokenid}
            CEND
            ;name.s = ""
            If name.s="" Then name.s = "????"+Str$(libnum)+"/"+Str$(tokenid) : succ=False
            Poke.s dummyline+cpos,name.s : cpos+FLen(name.s)
            str_ptr+1 :blength-1

          Else
            Poke.b dummyline + cpos,dummy:cpos+1
          End If
        Else
          Poke.b dummyline + cpos,dummy:cpos+1
        End If
    End Select

  Wend
  ;If cpos>0
    ted_insert_line {*ted,-1,dummyline,cpos}
  ;End If


  \cursor_lpos   = 0
  \cursor_cpos   = 0
  \top_line      = 0
  \cursor_pixpos = 0

  FreeMem_ dummyline,\max_cpos*10+64
  ted_update_scroller {*ted}
Else
  error {"Unable to create temporary buffer !"}
End If
End If
Function Return succ
End Function






;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ted_settokenizing {*ted.tuited,tokenizing.l}                        /
;/                                                                             /
;/ Description:                                                                /
;/             ;name.s = ""                                                    /
;/   ;If cpos>0                                                                /
;/   ;End If                                                                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - tokenizing.l    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ted_settokenizing {*ted.tuited,tokenizing.l}
If *ted
  If \tokenizing><tokenizing
  \tokenizing = tokenizing
  Select \tokenizing
    Case #tokenize_html
      ;ted_addblitz{*ted}
    Case #tokenize_ab2
      ;ted_addblitz{*ted}
    Case #tokenize_monkey
      ;ted_addmonkey {}
    Case #tokenize_bo
      \tokenizing =#tokenize_monkey
  End Select
  For n.l = 0 To *ted\lines_used-1
    !line_use {n}
    If *tline
      If *tline\ttext
        FreeMem_ *tline\ttext,*tline\tblength
        *tline\ttext=0
        *tline\tblength=0
        *tline\tclength=0
      End If
    End If
    ;ted_tokenize {*ted,n}
  Next
;  If nrd=False Then ted_draw{*ted}
  End If
End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_load_ascii {*ted.tuited,filename.s,@setpath.l,@up:: /
;/ d.l}                                                                        /
;/                                                                             /
;/ Description:                                                                /
;/       ;ted_addblitz{*ted}                                                   /
;/       ;ted_addblitz{*ted}                                                   /
;/       ;ted_addmonkey {}                                                     /
;/  If nrd=False Then ted_draw{*ted}                                           /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - filename.s    : ???                                                       /
;/ - setpath.l    : ???                                                        /
;/ - upd.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_load_ascii {*ted.tuited,filename.s,@setpath.l,@upd.l}
SHARED ASL_path.s,ASL_file.s,ASL_pattern.s
succ.l = False
If *ted


ASL_file.s    = str_Read{&*ted\fil}
ASL_path.s    = str_Read{&*ted\path}
ASL_pattern.s = str_Read{&*ted\pattern}

dos.l = file_Open {filename.s,#file_read}
If dos>=0
  ;error {"Loaded: "+filename.s}
  undo_Flush {\undo}
  filename.s = file_GetName {dos}
  If setpath
    ted_setpath {*ted,file_GetPath{dos},file_GetName{dos},str_Read{&*ted\pattern}}
    ted_setfile {*ted,file_GetFullName{dos}}
  End If


  clength.l = file_GetLength{dos}
  blength.l = clength+8
  z.l = AllocMem_ (blength,#MEMF_CLEAR)
  If z
    succ.l = file_ReadMem {dos,z+4,clength}
    If succ
      Poke.l z,clength
      extent.s = dos_GetExt {filename.s}
      Select LCase$(extent.s)
        Case "bb2"
          ted_settokenizing {*ted,#tokenize_ab2}
          If ted_putstring_bb2 {*ted ,z+4,clength}

          Else
            error {"Warning: could not resolve all tokens !"}
          End If

        Default
          ted_putstring {*ted ,z+4,clength}

      End Select
    End If
    FreeMem_ z,blength
  End If
  file_Close{dos}
  ted_setmarker {*ted,-1,-1,-1,-1,upd}
  ted_setcursor {*ted,0,0,-1,-1,upd}
  undo_SetSaved {\undo}
End If
If upd Then ted_draw {*ted}
Else
  error {"Ted not allocated yet !"}
  succ.l = False
End If
Function Return succ
End Function










;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ted_load_hex {*ted.tuited,filename.s,@setpath.l,@upd.l} /
;/                                                                             /
;/ Description:                                                                /
;/   ;error {"Loaded: "+filename.s}                                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *ted.tuited    : ???                                                      /
;/ - filename.s    : ???                                                       /
;/ - setpath.l    : ???                                                        /
;/ - upd.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ted_load_hex {*ted.tuited,filename.s,@setpath.l,@upd.l}
SHARED ASL_path.s,ASL_file.s,ASL_pattern.s
succ.l = False
If *ted


ASL_file.s    = str_Read{&*ted\fil}
ASL_path.s    = str_Read{&*ted\path}
ASL_pattern.s = str_Read{&*ted\pattern}

dos.l = file_Open {filename.s,#file_read}
If dos>=0
  ;error {"Loaded: "+filename.s}
  undo_Flush {\undo}
  filename.s = file_GetName {dos}
  If setpath
    ted_setpath {*ted,file_GetPath{dos},file_GetName{dos},str_Read{&*ted\pattern}}
    ted_setfile {*ted,file_GetFullName{dos}}
  End If


  #linewidth=4*8
  offset.l = 0
  file_Cache{dos}
  While file_EOF{dos}=False
    rbytes.l = #linewidth
      space.l = 0
      a.s = ""
      b.s = ""
      While file_EOF{dos}=False AND rbytes>0
        rbytes-1
        byte.b = file_ReadByte{dos}
        a.s + Right$(Hex$(byte),2)
        space+1
        If space=4 Then space=0:a.s + " "
        If byte<32 AND byte>=-4
          b.s + "."
        Else
          b.s + Chr$(byte)
        End If
      Wend
      If rbytes>0
      For m.l = 0 To rbytes-1
        a.s + "  "
        space+1
        If space=4 Then space=0:a.s + " "

      Next

      End If
      c.s = Hex$(offset*#linewidth)+": "+a.s+"| "+b.s
      ted_insert_line{*ted,offset,&c.s,FLen(c.s)}
      offset + 1

  Wend
  ted_settokenizing {*ted,#tokenize_hex}
  file_Close{dos}
  ted_setmarker {*ted,-1,-1,-1,-1,upd}
  ted_setcursor {*ted,0,0,-1,-1,upd}
  undo_SetSaved {\undo}
End If
If upd Then ted_draw {*ted}
Else
  error {"Ted not allocated yet !"}
  succ.l = False
End If
Function Return succ
End Function

CEND

