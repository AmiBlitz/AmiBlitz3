; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 15
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 80000
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 65535
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 806
; CursorColumn    = 1
; LabelSearch     = "wzguiend"
; LabelRemark     = 0
; LabelAll        = 1
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA

; converted and activate untokenized and deactivated code to make PED Bubbel help work again  tomsmart1 2013 02
; make the code SYNTAX 6 compatible  tomsmart1 2013 02
; replaced reqtools commands with error.include functions tomsmart1 2013 03


#WZ_TOOLS_VERSION = 11
#WZ_HELP_BACKGROUND = $EEEEEE
#WZ_MAX_WINDOWS = 22

CNIF #__include=0
  OPTIMIZE 4
  SYNTAX 6
CEND

XINCLUDE "screen.include.ab3"
XINCLUDE "dos.include.ab3"
XINCLUDE "datetime.include.ab3"

; check if include was compiled with enough space for used objects
;If (Maximum Window) < 25
;  dummy.l = ask{"Object Maximums too small\\nIncrease Objectsize for Windows to >25","Exit","Error"}  ; replaced reqtools command with error.include function call  tomsmart1
;  End
;EndIf

NEWTYPE.popupdata
  entry.l
  selected_entry.l
End NEWTYPE

SHARED popupliste.List
SHARED popupdata.popupdata
SHARED _page.b,_oldpage.b, _maxvisibleentries.w              ; made it global because it use in more functions tomsmart1 , added _oldpage.b to identife a page change for popup window  tomsmart1
DEFTYPE.s NewWZWindowTitle

; Newtypes zur Verwendung der Hierarchy-Listviews
NEWTYPE.childstruct
  _handle.l
  name.s
  _list.List
  parent.childstruct
End NEWTYPE

NEWTYPE.parentstruct
  _handle.l
  name.s
  childlist.List
End NEWTYPE
Dim List parent.parentstruct(0)


Macro SetLinePattern
  CNIF `0 = 2
      `1\LinePtrn = `2
      `1\Flags | #FRST_DOT
      `1\linpatcnt = 15
  CELSE
  CERR "Wrong number of parameters"
  CEND
End Macro

Statement WZ_SetDrawMode{mode.w, @winptr.l}
  If winptr<>-1 Then *tablewin.Window = winptr : Else : *tablewin.Window = WZWindowAddr
  SetDrMd_ *tablewin\RPort,mode
End Statement

Statement WZ_ClearWindow{color.w, @winptr.l}
  If winptr<>-1 Then *tablewin.Window = winptr : Else : *tablewin.Window = WZWindowAddr
  SetRast_ *tablewin\RPort, color
End Statement

Statement WZ_DrawText{txt.s, x.w, y.w, @color.w, @winptr.l}
  If txt <> ""
    If winptr<>-1 Then *tablewin.Window = winptr : Else : *tablewin.Window = WZWindowAddr
    If color <> - 1 Then SetAPen_ *tablewin\RPort, color
    Move_    *tablewin\RPort, x, y + *tablewin\RPort\Font\tf_Baseline
    Text_    *tablewin\RPort, &txt, FLen(txt)
  EndIf
End Statement

Statement WZ_DrawLine{x1.w,y1.w,x2.w,y2.w, @color.w, @winptr.l}
  If winptr<>-1 Then *tablewin.Window = winptr : Else : *tablewin.Window = WZWindowAddr
  If color <> - 1 Then SetAPen_ *tablewin\RPort, color
  Move_    *tablewin\RPort, x1, y1
  Draw_    *tablewin\RPort, x2, y2
End Statement

Statement WZ_DrawLineEx{x1.w,y1.w,x2.w,y2.w, x3.w,y3.w, @color.w, @winptr.l}
  If winptr<>-1 Then *tablewin.Window = winptr : Else : *tablewin.Window = WZWindowAddr
  If color <> - 1 Then SetAPen_ *tablewin\RPort, color
  Move_    *tablewin\RPort, x1, y1
  Draw_    *tablewin\RPort, x2, y2
  Draw_    *tablewin\RPort, x3, y3
End Statement

Statement WZ_DrawRect{x1.w,y1.w,x2.w,y2.w, @color.w, @winptr.l}
  If winptr<>-1 Then *tablewin.Window = winptr : Else : *tablewin.Window = WZWindowAddr
  If color <> - 1 Then SetAPen_ *tablewin\RPort, color
  RectFill_ *tablewin\RPort, x1, y1, x2, y2
End Statement

Statement WZ_DrawBox{x1.w,y1.w,x2.w,y2.w, @color.w, @winptr.l}
  If winptr<>-1 Then *tablewin.Window = winptr : Else : *tablewin.Window = WZWindowAddr
  If color <> - 1 Then SetAPen_ *tablewin\RPort, color

  Poke.w ?polydata+0, x1
  Poke.w ?polydata+2, y1

  Poke.w ?polydata+4, x2
  Poke.w ?polydata+6, y1

  Poke.w ?polydata+8, x2
  Poke.w ?polydata+10,y2

  Poke.w ?polydata+12,x1
  Poke.w ?polydata+14,y2

  Move_ *tablewin\RPort,x1,y2
  PolyDraw_ *tablewin\RPort, 4,?polydata
End Statement

Function.w WZ_GetTextLength{txt.s, @winptr.l}
  If txt = ""
    Function Return 0
  Else
    If winptr<>-1 Then *tablewin.Window = winptr : Else : *tablewin.Window = WZWindowAddr
    Function Return TextLength_(*tablewin\RPort, &txt,FLen(txt))
  EndIf
End Function


Statement HIERARCHY_Clear{liste.l}
SHARED parent()
  ResetList parent()
  While LastItem(parent())
    WZListRemove parent()\childlist
    KillItem parent()
  Wend
  If LastItem(parent())
    ;Request "","List","Ok"
    message{"List"}  ; replaced reqtools command with error.include function call  tomsmart1
  EndIf
  WZListRemove liste
End Statement

Function.b HIERARCHY_AddParent{liste.l,p$,@gruppe.l}
SHARED parent()
  If AddLast(parent())
    WZListRemove parent()\childlist
    parent()\_handle = WZListAddTree(liste,p$,0,-1,parent()\childlist,gruppe)
    parent()\name = p$
  EndIf
End Function

Function.l HIERARCHY_GetParentID{main$}
SHARED parent()
  ResetList parent()
  While NextItem(parent())
    If parent()\name = main$ Then Function Return parent()\_handle
  Wend
End Function

Function.b HIERARCHY_AddChild{parenthandle.l,child$,@gruppe.l}
SHARED parent()
  ResetList parent()
  While NextItem(parent())
    If parent()\_handle = parenthandle Then WZListAddTree parent()\childlist,child$,parent()\_handle,-1,0,gruppe
  Wend
End Function




Macro WZ_CheckLibrary
  If dos_CheckLib{"wizard.library",42} = 0                    ; replaced it with a dos.include function call tomsmart1
    error{"wizard.library needed with version 42."}           ; replaced reqtools command with error.include function call  tomsmart1
    End
  EndIf
End Macro


; prueft, ob das angegebene Fenster bereits geoeffnet ist
Function.b WZ_IsOpen{w.s}
CNIF @#USE_WIZARD <> 0
  If Peek.l(Addr Window(WZID(w))) = 0
    Function Return False
  Else
    Function Return True
  EndIf
CEND
End Function


Statement WZ_ActivateGadget{ag.s}  ;ag = gadgetname
  ActivateGadget_ WZGadAddr(ag.s),WZWindowAddr,0
End Statement


Statement WZ_ChangeTitle{wzwinname.s,newtitle.s}
  SHARED NewWZWindowTitle.s
  *wzwin.Window = Peek.l(Addr Window(WZID(wzwinname) ) )
  NewWZWindowTitle = newtitle
  SetWindowTitles_ *wzwin,&NewWZWindowTitle,-1
End Statement


Statement WZ_LockAllOpenWindows{}
  usedwin.l = Used Window                     ; save the current active window

  For i.b = 1 To #WZ_MAX_WINDOWS              ; 0 = source win , 1 the first WZ win
    *w.Window = Peek.l(Addr Window(i))
    If *w                                     ; test if window is open
      Use Window i
      wname.s = Trim$(Peek.s(*w\Title))       ; only windows with a title should be handled
      If wname.s <> ""
        If WZHandle
          WZ_LockWindow_ WZHandle             ; lock the window
        EndIf
      EndIf
    EndIf
  Next i

  If (usedwin >< -1) Then Use Window usedwin  ; reactive the active window
End Statement

Statement WZ_UnlockAllOpenWindows{}
  usedwin.l = Used Window                     ; save the current active window

  For i.b = 1 To #WZ_MAX_WINDOWS              ; 0 = source win , 1 the first WZ win
    *w.Window = Peek.l(Addr Window(i))
    If *w                                     ; test if window is open
      Use Window i
      If WZHandle
        WZ_UnlockWindow_ WZHandle             ; unlock the window
      EndIf
    EndIf
  Next

  If (usedwin >< -1) Then Use Window usedwin  ; reactive the active window
End Statement



Statement WZ_SetFont{winid$,@Style.b}
  *win.Window = Peek.l(Addr Window( WZID(winid$) ) )
  If (*win <> 0)
    Use Window WZID(winid$)
    *han.WizardWindowHandle = WZHandlenocheck
    If (*han <> 0)
      foname.s = Peek.s(*han\DrawInfo\dri_Font\tf_Message\mn_Node\ln_Name)
      fosize.w = WZYFontsize
      ;*scr.Screen = Peek.l(Addr Screen(0))
      ;foname.s = Peek.s(*scr\Font\ta_Name)
      ;fosize.w = *scr\Font\ta_YSize
    Else
     *scr.Screen = Peek.l(Addr Screen(0))
     foname = Peek.s(*scr\Font\ta_Name)
     fosize = *scr\Font\ta_YSize
    EndIf

    If dos_Exist{dos_AddPart{"fonts:",foname} } ;replace with a dos.include function call  tomsmart1,  fixed fontname variable  tomsmart1
      LoadFont 0,foname,fosize
      If Style=-1 Then Style = 0
      WindowFont 0,Style
    EndIf
  EndIf
End Statement


Statement WZ_SetPopUpMenu{menuStr.s,@sorted.b}           ; replace $ strings with str.s  tomsmart1
 entries.l = 0
 WZListRemove popupliste
 While (menuStr<>"") AND (menuStr<>Chr$(10))
   z.l = 0 : quit.b = 0
   While quit = 0
     z + 1
     If (z=FLen(menuStr)) OR (Mid$(menuStr,z,1)=Chr$(10)) Then quit = 1
   Wend
   If z > 1
     entries + 1
     entryStr.s = Replace$(Left$(menuStr,z),Chr$(10),"")
     ;search.b = FindStrg("%%",entryStr)                  ; converted back from '????Lib 125/2("%%",entryStr)'  tomsmart1
     search.l = Instr(entryStr,"%%")
     If search > 0
       Select Mid$(entryStr,search + 2,1)                 ; changed +1 to +2 to fix the search tomsmart1
         Case "5"
           WZTags #WENTRYA_TextPen,screen_GetPen{$EE,$EE,$EE},#WENTRYA_TextStyle,#FSF_TAGGED
         Case "4" ; blue, bold
           WZTags #WENTRYA_TextPen,screen_GetPen{$00,$00,$AA},#WENTRYA_TextStyle,#FSF_BOLD
         Case "3" ; white, bold
           WZTags #WENTRYA_TextPen,screen_GetPen{$FF,$FF,$FF},#WENTRYA_TextStyle,#FSF_BOLD
         Case "2" ; red, bold
           WZTags #WENTRYA_TextPen,screen_GetPen{$AA,$00,$00},#WENTRYA_TextStyle,#FSF_BOLD
         Case "1" ; green, bold
           WZTags #WENTRYA_TextPen,screen_GetPen{$00,$AA,$00},#WENTRYA_TextStyle,#FSF_BOLD
        Default   ; black, bold
          WZTags #WENTRYA_TextPen,screen_GetPen{$00,$00,$00},#WENTRYA_TextStyle,#FSF_BOLD
       End Select
       entryStr = Right$(entryStr,FLen(entryStr)-3)              ; replaced Len() with FLen()  tomsmart1
     EndIf

     If sorted = -1
       WZListAdd popupliste, entryStr,-2
     Else
       WZListAdd popupliste, entryStr,-1
     EndIf
     menuStr= Right$(menuStr,FLen(menuStr)-z)                    ; replaced Len() with FLen()  tomsmart1
   EndIf
 Wend
End Statement


Function.b WZ_GetPopUpMenu{}
  Function Return popupdata\selected_entry
End Function


Function.s WZ_GetPopUpEntry{entry.l}
  If (entry > -1) AND (entry<=WZListItems(popupliste))
    Function Return WZListString(popupliste,entry - 1,1)  ; achtung mode beachten
  Else
    Function Return ""
  EndIf
End Function


Statement WZ_SetPopUpEntry{entry.l}
  win_used.l = Used Window                                                 ; added to get the used window  tomsmart1
  If WZ_IsOpen{"WIN_POPUP"}                                             ; added to be sure that the window is already open  tomsmart1
    Use Window WZID("WIN_POPUP")                                           ; added to switched to the POPUP-window, this fix some problems with PEd intellisens  tomsmart1
    entries.w = WZListItems(popupliste)
    If (entry > -1) AND (entry<entries)

      If _page <> _oldpage                                                 ; added check if the page has changed  tomsmart1
        WZPrint "POPUP_PAGE",_page
        _oldpage = _page
      EndIf

      If (_maxvisibleentries>0) AND (_page=0)                              ; added check of the maxentries of the popup win  tomsmart1
        fistvisibleentry.w = entry-(_maxvisibleentries-1)                  ; calculate the needed first visible entry to support scrolling lists bigger then visible  via cursor keys  tomsmart1
        If fistvisibleentry<0 Then fistvisibleentry=0
        WZPrint "POPUPMENU"+Str$(_page),entry,&popupliste,fistvisibleentry ; expand to set the first visible entry of the list  tomsmart1
      Else
        WZPrint "POPUPMENU"+Str$(_page),entry,&popupliste
      EndIf

      popupdata\selected_entry = entry
    EndIf
    Use Window win_used                                                    ; added to switch back to the window that was used befor  tomsmart1
  EndIf
End Statement


Statement WZ_PopUp_Nonmodal{x.w,y.w,@w.w,@h.w,@*rp.RastPort}            ; added *rp for a better calculation of the width  tomsmart1
  entries.w = WZListItems(popupliste)
  width.w   = 0
  If entries > 0                                                        ; update and fixed the calculation of the needed dimention of the window  tomsmart1
    UsedXFontsize.w = WZXFontsize
    UsedYFontsize.w = WZYFontsize + 1
    For i.w = 1 To entries
      entryStr.s = WZListString(popupliste,i-1,-1)
      If (*rp = 0) OR (*rp = -1)
        width = Max(width,UsedXFontsize * FLen(entryStr) )              ; calculate the min needed width for the used font (fixedwidth)  tomsmart1
      Else
        width = Max(width,TextLength_(*rp,entryStr,FLen(entryStr) ) )   ; calculate the min needed width for the used font (proportional)  tomsmart1
      EndIf
    Next i
    height.w = (UsedYFontsize * entries) + 2                            ; calculate the needed height to display all entries for the used font  tomsmart1
    If (w = -1) Then w = width + 16          ; was 8
    If (h = -1) OR (h > height) Then h = height

    screenw.w     = screen_GetWidth{}
    screenh.w     = screen_GetHeight{}
    mos_screenw.w = screenw / 1.5
    mos_screenh.w = screenh / 1.5

    If h > mos_screenh
      _maxvisibleentries = (mos_screenh - 2) / UsedYFontsize            ; set max visible enties of the list  tomsmart1
    Else
      _maxvisibleentries = (h - 2) / UsedYFontsize                      ; set max visible enties of the list  tomsmart1
    EndIf
    h = (_maxvisibleentries * UsedYFontsize) + 2                        ; calculate the needed win hight for the used font  tomsmart1

    If w > mos_screenw Then w = mos_screenw
    If w < 32 Then w = 32
    If (x + w) > screenw Then w = screenw - x
    If (y + h) > screenh Then h = screenh - y
    If x < 0 Then x = 0
    If y < 0 Then y = 0

    If height > h                                                       ; test if we need a scoller
      _page = 0                                                         ; YES, we use page 0
    Else
      _page = 1                                                         ; NO , we use page 1
    EndIf
    _oldpage = _page                                                    ; added to make a check of a page change possible  tomsmart1

    If WZ_IsOpen{"WIN_POPUP"}
      Use Window WZID("WIN_POPUP")
      If (h <> WindowHeight) OR (w <> WindowWidth)
        ChangeWindowBox_ WZWindowAddr,WindowX,WindowY,w,h
      EndIf
    Else
      WZWindow WZID("WIN_POPUP"),?wzgui,64,x,y,w,h,WZID("WIN_POPUP")
    EndIf
    ClearType popupdata
    WZPrint "POPUP_PAGE",_page
    WZPrint "POPUPMENU"+Str$(_page),0,&popupliste
  EndIf
End Statement


Statement WZ_PopUpCloseNonmodal{}                                    ; added Close Statemente for POP_Nonmodal moved form PED  tomsmart1
  win_used.l = Used Window                                           ; added to get the used window  tomsmart1
  If WZ_IsOpen{"WIN_POPUP"}
    Use Window WZID("WIN_POPUP")                                     ; added to switch to the POPUP-window, this fix some problems with PEd intellisens  tomsmart1
    WZListRemove popupliste
    WZCloseWindow WZID("WIN_POPUP")
    popupdata\selected_entry = 0                                     ; reset all used variables
    ClearType popupdata
    _page               = 0
    _oldpage            = 0
    _maxvisibleentries  = 0
    Use Window win_used                                              ; added to switch back to the window that was used befor  tomsmart1
  EndIf
End Statement


Function.l WZ_PopUp{x.w,y.w,@w.w,@h.w,@*rp.RastPort}                 ; added *rp for a better calculation of the width  tomsmart1
  entries.w = WZListItems(popupliste)
  width.w   = 0
  If entries > 0                                                     ; update and fixed the calculation of the needed dimention of the window  tomsmart1
    UsedXFontsize.w = WZXFontsize
    UsedYFontsize.w = WZYFontsize + 1
    For i.w = 1 To entries
      entryStr.s = WZListString(popupliste,i-1,-1)
      If (*rp = 0) OR (*rp = -1)
        width = Max(width,UsedXFontsize * FLen(entryStr) )
      Else
        width = Max(width,TextLength_(*rp,entryStr,FLen(entryStr) ) )
      EndIf
    Next i
    height.w = (UsedYFontsize * entries) + 2
    If (w = -1) Then w = width + 2
    If (h = -1) OR (h > height)
      h = height
    EndIf

    screenw.w     = screen_GetWidth{}
    screenh.w     = screen_GetHeight{}
    ;mos_screenw.w = screenw / 1.5
    ;mos_screenh.w = screenh / 1.5

    ;If h > mos_screenh
    ;  _maxvisibleentries = (mos_screenh - 2) / UsedYFontsize
    ;Else
      _maxvisibleentries = (h - 2) / UsedYFontsize
    ;EndIf
    h = (_maxvisibleentries * UsedYFontsize) + 2

    ;If w > mos_screenw Then w = mos_screenw
    If w < 32 Then w = 32
    If (x + w) > screenw Then x = screenw - w
    If (y + h) > screenh Then y = screenh - h
    If x < 0 Then x = 0
    If y < 0 Then y = 0

    If height > h
      _page = 0
    Else
      _page = 1
    EndIf
    _oldpage = _page
    ;
    win_use.l = Used Window

    WZWindow WZID("WIN_POPUP"),?wzgui,64,x,y,w,h,WZID("WIN_POPUP")
    WZPrint "POPUP_PAGE",_page
    WZPrint "POPUPMENU"+Str$(_page),-1,&popupliste

    exit.l = 0 : selected.l = -1 : FlushEvents
    Repeat
      popev.l = WaitEvent
      If EventWindow = WZID("WIN_POPUP")
        Select popev

          Case #IDCMP_IDCMPUPDATE
            If WZGadName = "POPUPMENU" + Str$(_page)
              selected = WZInput + 1
              exit = True
            EndIf

          Case #IDCMP_MOUSEBUTTONS
            mb.b = MButtons
            If (mb = 1) OR (mb=2)
              FlushEvents
              exit = True
            EndIf

        End Select
      Else
        exit = True
      EndIf
    Until exit

;    WZListRemove popupliste
    WZCloseWindow WZID("WIN_POPUP")
    If win_use<>-1 Then Use Window win_use
    popupdata\selected_entry = selected
    Function Return selected
  EndIf
End Function



Function.l WZ_Date{x.w,y.w,@_date.l}
  DateFormat 0
  da$ = Date$(SystemDate)
  da2$ = Replace$(da$,"/",".")
  heute.l = date_GetAsLong{da2$}
  If _date  < 20000000 Then _date = heute
  win_use.l = Used Window
  WZWindow WZID("WIN_DATE"),?wzgui,64,x,y,-1,-1,WZID("WIN_DATE")
  WZPrint "DATE_TODAY",date_GetAsString{heute,#DATUM_DDMMYYYY}
  WZPrint "DATE_DATESTRING",date_GetAsString{_date,#DATUM_DDMMYYYY}
  da2$ = date_GetAsString{_date,#DATUM_DDMMYYYY}
  tag.l = date_GetAsLong{da2$,#DATUM_DAYS}
  monat.l = date_GetAsLong{da2$,#DATUM_MONTHS}
  jahr.l = date_GetAsLong{da2$,#DATUM_YEARS}
  WZPrint "DATE_DATE",tag,monat,jahr
  exit.l = 0 : FlushEvents
  Repeat
    popev.l = WaitEvent
    If EventWindow = WZID("WIN_DATE")
      Select popev
      Case #IDCMP_IDCMPUPDATE
        Select WZGadName
        Case "DATE_DATE"
          tag = WZInput
          _date = date_GetAsLong{Str$(tag)+"."+Str$(monat)+"."+Str$(jahr)}
          WZPrint "DATE_DATESTRING",date_GetAsString{_date,#DATUM_DDMMYYYY}
          exit = True
        Case "DATE_LEFT"
          monat - 1
          If monat = 0 Then jahr-1 : monat = 12 : tag = 1
          WZPrint "DATE_DATE",tag,monat,jahr
          _date = date_GetAsLong{Str$(tag)+"."+Str$(monat)+"."+Str$(jahr)}
          WZPrint "DATE_DATESTRING",date_GetAsString{_date,#DATUM_DDMMYYYY}
        Case "DATE_RIGHT"
          monat + 1
          If monat = 13 Then jahr+1 : monat = 1: tag = 1
          WZPrint "DATE_DATE",tag,monat,jahr
          _date = date_GetAsLong{Str$(tag)+"."+Str$(monat)+"."+Str$(jahr)}
          WZPrint "DATE_DATESTRING",date_GetAsString{_date,#DATUM_DDMMYYYY}
        End Select

      Case #IDCMP_MOUSEBUTTONS
        mb.b = MButtons
        If (mb = 5)
          FlushEvents
          exit = True
        EndIf
      End Select
    Else
      exit = True
    EndIf
  Until exit

  WZCloseWindow WZID("WIN_DATE")
  If win_use<>-1 Then Use Window win_use
  Function Return date_GetAsLong{Str$(tag)+"."+Str$(monat)+"."+Str$(jahr)}
End Function


Statement WZ_ShowBubble{@helptext$, @posx.w, @posy.w}
  Dim hilfe$(7)

  ew.l = EventWindow : Use Window ew

  If helptext$ <> ""
    t$ = helptext$
  Else
    *g.Gadget = EventiAddress
    If *g
      If *g\GadgetID <> 0 Then t$ = WZGadHelp
    EndIf
  EndIf

  If t$ <> ""
    tlen.l = FLen(t$)
    If tlen > 0
      ;-- split string into separate lines, \\n is the line break indicator
      tl.l = tlen
      lines.b = -1
      Repeat
        lines + 1
        p.w = Instr(t$,Chr$(10))
        If p
          hilfe$(lines) = Left$(t$,p - 1)
          t$ = Right$(t$,tl - p)
          tl - p
        Else
          hilfe$(lines) = t$
        EndIf
      Until p = 0

      ;-- open or reuse the help window
      If WZ_IsOpen{"WIN_BUBBLEHELP"} = 0
        AddIDCMP #IDCMP_NEWSIZE|#IDCMP_INTUITICKS|#IDCMP_DELTAMOVE
        Window WZID("WIN_BUBBLEHELP"),0,0,1,1,#WFLG_BORDERLESS,"",0,1
        WZ_SetFont{"WIN_BUBBLEHELP"}
      EndIf
      *win.Window = Peek.l(Addr Window(WZID("WIN_BUBBLEHELP")))
      *scr.Screen = Peek.l(Addr Screen(0))

      ;-- calc the width of the window
      neededWidth.w = 0
      For i.b = 0 To lines
        If hilfe$(i) <> "" Then neededWidth = Max( WZ_GetTextLength{hilfe$(i),*win}, neededWidth)
      Next i

      If (neededWidth > 4)
        lgth.w = tlen
        _wzww.w = neededWidth + 12
        _wzwh.w = WZYFontsize * (lines+1) + 6

        If posx > 0 Then x.l = posx : Else : x.l = *scr\MouseX + 8
        If posy > 0 Then y.l = posy : Else : y.l = *scr\MouseY + 8
        If (x + _wzww) > *scr\Width  Then _wzwx.w = *scr\Width  - _wzww Else _wzwx = x
        If (y + _wzwh) > *scr\Height Then _wzwy.w = *scr\Height - _wzwh Else _wzwy = y
        If (_wzwy < 0) Then _wzwy = 0
        If (_wzwx < 0) Then _wzwx = 0
        If _wzww > *scr\Width  Then _wzww = *scr\Width
        If _wzwh > *scr\Height Then _wzwh = *scr\Height

        If wzbubblehelpbackground.l = 0
          wzbubblehelpbackground = screen_GetPenRGB{#WZ_HELP_BACKGROUND}
          If wzbubblehelpbackground = 1 Then wzbubblehelpbackground = 0
          If wzbubblehelpbackground = 0 Then wzbubblehelpbackground = 2
        EndIf

        Use Window WZID("WIN_BUBBLEHELP")
        MoveWindow_ *win,_wzwx,_wzwy : SizeWindow_ *win,_wzww,_wzwh
        Repeat : Delay_ 2 : Until Event = #IDCMP_NEWSIZE : FlushEvents

        WZ_ClearWindow{wzbubblehelpbackground,*win}
        WZ_SetDrawMode{0,*win}
        WZ_DrawBox{0,0,_wzww,_wzwh,1,*win}
        For i = 0 To lines
          WZ_DrawText{hilfe$(i), 6,3 + i * WZYFontsize,1,*win}
        Next i
        Use Window ew
      Else
         CloseWindow WZID("WIN_BUBBLEHELP")
      EndIf
    EndIf
  EndIf
End Statement

Statement WZ_HideBubble{}
  ew.l = EventWindow
  helpwin_addr.l = Addr Window( WZID("WIN_BUBBLEHELP") )
  If WZ_IsOpen{"WIN_BUBBLEHELP"}
     CloseWindow WZID("WIN_BUBBLEHELP")
     If ew <> WZID("WIN_BUBBLEHELP") Then Use Window ew
   EndIf
End Statement

Macro WZ_Update_Gauge
 CNIF @#USE_WIZARD <> 0
   If `2>0
     gzt.l = (`1 * 100) / `2
     ;If (gzt MOD 10) = 0
       If Peek.l(Addr Window( WZID("WIN_PROGRESS")) ) > 0
         ggt$ = Str$(gzt) + "%%"
         uw.l = Used Window
         Use Window WZID("WIN_PROGRESS")
         WZPrint "GAUGE",gzt,100,&ggt$
         Use Window uw
       EndIf
     ;EndIf
   EndIf
 CEND
End Macro


Macro WZ_GaugeInfo
 CNIF @#USE_WIZARD <> 0
   gaugewin_addr.l = Addr Window( WZID("WIN_PROGRESS"))
   If gaugewin_addr
     If Peek.l(gaugewin_addr ) > 0
       uw.l = Used Window
       Use Window WZID("WIN_PROGRESS")
       WZPrint WZID("GAUGE"),0,1,`1
       Use Window uw
     EndIf
   EndIf
 CEND
End Macro


Statement WZ_ShowMessage{smt$,@mode.l}
 CNIF @#USE_WIZARD <> 0
   win_use.l = Used Window                          ; set type to .l to make it SYNTAX 6 compatible  tomsmart1
   n$ = ""
   If mode = -1 Then mode = 1 Else mode = 0
   If NOT WZ_IsOpen{"WIN_PROGRESS"}
     WZWindow WZID("WIN_PROGRESS"),?wzgui,16,-2,-2,-2,-2,WZID("WIN_PROGRESS")  ; replace "gui with "wzgui"  tomsmart1
   EndIf
   Use Window WZID("WIN_PROGRESS")

   WZPrint "PROGRESS_PAGE",mode
 ;  WZTags #WA_TextStyle,#FSF_BOLD
   WZPrint "FORTSCHRITT"+Str$(mode),smt$
   WZPrint "GAUGE",0,100,&n$
   If win_use<>-1 Then Use Window win_use
 CEND
End Statement


Statement WZ_HideMessage{}
 CNIF @#USE_WIZARD <> 0
   win_use.l = Used Window                          ; set type to .l to make it SYNTAX 6 compatible  tomsmart1
   Use Window WZID("WIN_PROGRESS")
   If Peek.l(Addr Window(Used Window)) <> 0
     WZCloseWindow WZID("WIN_PROGRESS")
   EndIf
   If win_use<>-1 Then Use Window win_use
 CEND
End Statement


Function.l WZ_Request{id$,@addon$}
  usedwin.l = Used Window
  If usedwin>-1 Then WZ_LockWindow_ WZHandle

  DEFTYPE.EasyStruct es
  DEFTYPE.l erg
  easy.l = WZ_InitEasyStruct_ (WZSurface,&es,WZID(id$),SizeOf.EasyStruct)
  If easy
    ;flgs.l = es\es_Flags
    t$   = Peek$(es\es_Title)
    msg$ = Peek$(es\es_TextFormat) + addon$
    gad$ = Peek$(es\es_GadgetFormat)
    ;erg =  RTEZRequest(t$,msg$,gad$)
    erg = ask{msg$,gad$,t$}                ; replaced reqtools command with error.include function call  tomsmart1
  EndIf
  If usedwin>-1
    Use Window usedwin
    WZ_UnlockWindow_ WZHandle
  EndIf
  Function Return erg
End Function


Function.s WZ_GetLocaleString{id$}
  DEFTYPE.EasyStruct es
  DEFTYPE.l erg
  easy.l = WZ_InitEasyStruct_ (WZSurface,&es,WZID(id$),SizeOf.EasyStruct)
  If easy
    msg$ = Peek$(es\es_TextFormat)
    Function Return msg$
  EndIf
End Function


Function.s WZ_GetStringField{wzgadid$}
  straddr.l = WZInput(wzgadid$)
  If straddr<>0
    Function Return Peek$(straddr)
  Else
    Function Return ""
  EndIf
End Function


Statement WZ_LockWindow{id$}
  usedwin.l = Used Window
  Use Window WZID(id$)
  WZ_LockWindow_ WZHandle
  If usedwin<>-1 Then Use Window usedwin
End Statement


Statement WZ_UnlockWindow{id$}
  usedwin.l = Used Window
  Use Window WZID(id$)
  WZ_UnlockWindow_ WZHandle
  If usedwin<>-1 Then Use Window usedwin
End Statement


Function.s WZ_MenuName{}
  selmenu.l = 65536 - 32 + MenuHit
  selitem.l = 65536 - 2048 + (ItemHit*32)
  selsubi.l = 65536 - 65408 + (SubHit*32)
End Function

;Data for PolyDraw:
Goto polydataEnd:
polydata:
Dc.l $000000
Dc.l $000000
Dc.l $000000
Dc.l $000000
polydataEnd:
