; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "IFFILBMDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 5
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: iff-ilbm.include                                                      /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 29/12/2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements:  Amiblitz2.4                                                  /
;/                                                                             /
;/ Purpose:                                                                    /
;/ This is an include to support the image.include with iff-ilbm load/save f:: /
;/ unctionality.                                                               /
;/                                                                             /
;/ Abstract:                                                                   /
;/ This include is of not much use stand alone, as you can load and save ima:: /
;/ ges through the image.include, but you might want to have a look at the s:: /
;/ ource code for educational reasons.                                         /
;/                                                                             /
;/ This include loads the alpha channel of an IFF-ILBM file creatd with Arte:: /
;/ ffects 3+. Datatypes can not load the alpha channel of those files. It pr:: /
;/ ovides also iff-ilbm save functions that include the alpha channel.         /
;/                                                                             /
;/ User Constants:     none                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
CEND

XINCLUDE "tempbuffer.include.ab3"

#ilbm_old = 0

 ; mask modes
CNIF @#mskNone=0
#mskNone                = 0
#mskHasMask             = 1
#mskHasTransparentColor = 2
#mskLasso               = 3

; compression modes
#cmpNone     = 0
#cmpByteRun1 = 1
CEND

;Bitplanes bit masks
#BPMF_A1 = $01000000
#BPMF_A2 = $02000000
#BPMF_A3 = $04000000
#BPMF_A4 = $08000000
#BPMF_A5 = $10000000
#BPMF_A6 = $20000000
#BPMF_A7 = $40000000
#BPMF_A8 = $80000000

#BPMF_R1 = $00010000
#BPMF_R2 = $00020000
#BPMF_R3 = $00040000
#BPMF_R4 = $00080000
#BPMF_R5 = $00100000
#BPMF_R6 = $00200000
#BPMF_R7 = $00400000
#BPMF_R8 = $00800000

#BPMF_G1 = $00000100
#BPMF_G2 = $00000200
#BPMF_G3 = $00000400
#BPMF_G4 = $00000800
#BPMF_G5 = $00001000
#BPMF_G6 = $00002000
#BPMF_G7 = $00004000
#BPMF_G8 = $00008000

#BPMF_B1 = $00000001
#BPMF_B2 = $00000002
#BPMF_B3 = $00000004
#BPMF_B4 = $00000008
#BPMF_B5 = $00000010
#BPMF_B6 = $00000020
#BPMF_B7 = $00000040
#BPMF_B8 = $00000080
 

XINCLUDE "file.include.ab3"


NEWTYPE.IFF_ILBM
FORM.l
csize.l
ILBM.l
End NEWTYPE

NEWTYPE.IFF_DPI
DPI_.l
csize.l
x_dpi.w
y_dpi.w
End NEWTYPE

NEWTYPE.IFF_LAYER  ; 134 bytes
LAYR.l
csize.l
dummy1.w ; $007E  ; 8
dummy2.w ; $0003
dummy3.w ; 1
dummy4.w ; 0
dummy5.w ; 0
dummy6.w ; 0
dummy7.w ; 256
dummy8.w ; 1
name.b[64] ; 24
pad.b[46]  ; 88
End NEWTYPE

NEWTYPE.IFF_ALPHA
ALPHA.l
csize.l
dataoff.w
dummy.w
dummy2.w
dummy3.w
End NEWTYPE

NEWTYPE.ilbm_engine
is_open.l
contentpos.l
dos.l
alpha_data.l
alpha_size.l
layer_data.l
layer_size.l
width.l
height.l
End NEWTYPE

NEWTYPE.IFF_BMHD
BMHD.l
csize.l
bmh.BitMapHeader
End NEWTYPE

SHARED ilbm_engine.ilbm_engine
SHARED IFF_ILBM.IFF_ILBM
SHARED IFF_BMHD.IFF_BMHD
SHARED IFF_ALPHA.IFF_ALPHA
SHARED IFF_DPI.IFF_DPI
SHARED IFF_LAYER.IFF_LAYER

USEPATH ilbm_engine
\is_open = False
\dos     = -1
\alpha_data = 0

Function.l ilbm_GetWidth{}
Function Return \width
End Function

Function.l ilbm_GetHeight{}
Function Return \height
End Function
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ilbm_Close {}                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ilbm_Close{}
If \dos>=0 Then file_Close{\dos}
If \alpha_data Then FreeMem_ \alpha_data,\alpha_size
If \layer_data Then FreeMem_ \layer_data,\layer_size
\is_open = False
\alpha_data = 0
\layer_data = 0
\dos     = -1
End Statement
!autoexit {ilbm_Close}

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ilbm_Open {filename.s}                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : ???                                                       /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ilbm_Open{filename.s}
ilbm_Close{}
dos.l = file_Open{filename.s,#file_read}
If dos>=0
  \dos = dos
  If file_ReadMem{\dos,IFF_ILBM,12}
    If (IFF_ILBM\FORM = @"FORM") & (IFF_ILBM\ILBM = @"ILBM")
      If file_FindChunk{dos,@"BMHD"}
        \contentpos = file_GetSeekPos{\dos}
        If file_ReadMem{\dos,IFF_BMHD,SizeOf.BitMapHeader}
          \is_open = True
          \width  = IFF_BMHD\bmh\bmh_Width
          \height = IFF_BMHD\bmh\bmh_Height
        End If
      End If
    End If
  End If
End If
If \is_open = False Then ilbm_Close{}
Function Return \is_open
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  succ.l = ilbm_ReadAlpha {}                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * private                                                                   /
;/ Find and read the ALPH chunk.                                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - succ.l     : -1 if ALPH chunk was found and loaded, 0 otherwise           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ilbm_ReadAlpha {}
succ.l = 0
If \is_open
  If file_FindChunk{\dos,@"ALPH",\contentpos}
    If file_ReadMem{\dos,IFF_ALPHA,SizeOf.IFF_ALPHA}
      \alpha_size = IFF_ALPHA\csize
      \alpha_data = AllocMem_(\alpha_size,0)
      If file_SeekRel{\dos,IFF_ALPHA\dataoff-8}
        If file_ReadMem{\dos,\alpha_data,\alpha_size}
          succ = True
        End If
      End If
    End If
  End If
End If
Function Return succ
End Function


Function.l ilbm_ReadLayer{@layer.l}
If layer<0 Then layer=0
file_Seek{\dos,\contentpos}
allowfirst.l = True
If \is_open
  While file_FindChunk{\dos,@"LAYR",-1,-1,allowfirst}
    If layer<=0
      If file_ReadMem{\dos,IFF_LAYER,SizeOf.IFF_LAYER}
        \layer_size = IFF_LAYER\csize
        If IFF_LAYER\LAYR=@"LAYR"
          \layer_data = AllocMem_(\layer_size,0)
          If file_ReadMem{\dos,\layer_data,\layer_size}
            Function Return True
          End If
        Else
          error {"\\__THIS_FUNCTION: Invalid layer chunk found!"}
        End If
      End If
    Else
      layer-1
    End If
    allowfirst.l = False
  Wend
End If
Function Return False
End Function
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  encodelength.l = ilbm_RLEncode {srcbuff.l,dstbuff.l,slength.l,@d:: /
;/ length.l}                                                                   /
;/                                                                             /
;/ Description:                                                                /
;/ Perform run-length encoding.                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - srcbuff.l    : memory pointer to source data buffer                       /
;/ - dstbuff.l    : memory pointer to rl encoded buffer                        /
;/ - slength.l    : byte length of the source data                             /
;/ - dlength.l    : maximum byte length allowed for destination buffer         /
;/                                                                             /
;/ Result:                                                                     /
;/ - encodelength.l     : byte length of rl encoded buffer (compressed)        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ilbm_RLEncode{srcbuff.l,dstbuff.l,slength.l,@dlength.l}
soff.l = 0
doff.l = 0
While soff<slength ;AND (doff<dlength OR dlength<0)
  byte.b = Peek.b(srcbuff+soff) : soff+1
  rl.l = 0
  While (byte = Peek.b(srcbuff+soff)) AND (rl<127) AND (soff<slength):rl+1:soff+1:Wend

  If rl>0
    Poke.b dstbuff+doff  ,-rl
    Poke.b dstbuff+doff+1,byte
    doff+2
  Else
    While (byte><Peek.b(srcbuff+soff)) AND (rl<127) AND (soff<slength):rl+1:byte=Peek.b(srcbuff+soff):soff+1:Wend
    If rl<127 AND soff<slength
    rl-1:soff-1
    End If
    Poke.b dstbuff+doff,rl
    CopyMem_ srcbuff+soff-1-rl,dstbuff+doff+1,rl+1
    doff + rl + 2
  End If
Wend
Function Return doff
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  decodedlength.l = ilbm_RLDecode {srcbuff.l,dstbuff.l,slength.l,@:: /
;/ dlength.l}                                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ Perform run-length decoding.                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - srcbuff.l    : memory pointer to rl encoded buffer                        /
;/ - dstbuff.l    : memory pointer to decoded (raw) buffer                     /
;/ - slength.l    : byte length of the rl encoded data                         /
;/ - dlength.l    : maximum byte length of the decoded buffer                  /
;/                                                                             /
;/ Result:                                                                     /
;/ - decodedlength.l     : decoded byte length                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ilbm_RLDecode{srcbuff.l,dstbuff.l,slength.l,@dlength.l}
soff.l = 0
doff.l = 0
While soff<slength AND (doff<dlength OR dlength<0)
  byte.b = Peek.b(srcbuff+soff)
  soff+1
  If byte>=0
    If doff+byte+1<dlength OR dlength<0
      CopyMem_ srcbuff+soff,dstbuff+doff,byte+1
    End If
    doff+byte+1
    soff+byte+1
  End If
  If byte<0
    c.b = Peek.b(srcbuff+soff)
    For n.l = 0 To -byte
      If doff<dlength OR dlength<0
        Poke.b dstbuff+doff,c
      End If
      doff+1
    Next
    soff+1
  End If
Wend
Function Return doff
End Function


Function.l ilbm_RLDecodeARGB{srcbuff.l,dstbuff.l,slength.l,width.l,height.l,bpr.l}
soff.l = 0
x.l = 0
y.l = 0
ncolor.l = 0
dlength.l = width*height*4
Dim byteorder(4)
byteorder(0) = 1
byteorder(1) = 2
byteorder(2) = 3
byteorder(3) = 0
byteoffset.l = byteorder(ncolor)
While soff<slength
  byte.b = Peek.b(srcbuff+soff) : soff+1
  If byte>=0
    For n.l=0 To byte
      Poke.b dstbuff+(y*bpr)+(x*4)+byteoffset,Peek.b(srcbuff+soff)
      soff+1
      x+1
      If x>=width
        x=0:y+1
        If y>=height
          y=0:ncolor+1
          If ncolor<4
            byteoffset=byteorder(ncolor)
          Else
            Function Return True
          End If
        End If
      End If
    Next
  Else
    c.b = Peek.b(srcbuff+soff) : soff+1
    For n.l = 0 To -byte
      Poke.b dstbuff+(y*bpr)+(x*4)+byteoffset,c
      x+1
      If x>=width
        x=0:y+1
        If y>=height
          y=0:ncolor+1
          If ncolor<4
            byteoffset=byteorder(ncolor)
          Else
            Function Return True
          End If
        End If
      End If
    Next
  End If
Wend
Function Return True
End Function
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: ilbm_DecodeAlpha {destbuffer.l,awidth.l,aheight.l}                  /
;/                                                                             /
;/ Description:                                                                /
;/ Decode the allpha mask from an "ALPH" chunk, as found in Arteffects iff-i:: /
;/ lbm files.                                                                  /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - destbuffer.l    : memory pointer to awidth * aheight * 1 bytes            /
;/ - awidth.l    : width of alpha mask in bytes                                /
;/ - aheight.l    : height of alpha mask in bytes                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement ilbm_DecodeAlpha {destbuffer.l,awidth.l,aheight.l}
If \is_open
  If \alpha_data
    If destbuffer
      slength.l = \alpha_size
      dlength.l = awidth * aheight
      ilbm_RLDecode{\alpha_data,destbuffer,slength,dlength}
    End If
  End If
End If
End Statement

Statement ilbm_DecodeLayer {destbuffer.l,lwidth.l,lheight.l,bpr.l}
If \is_open
  If \layer_data
    If destbuffer
      ilbm_RLDecodeARGB{\layer_data,destbuffer,\layer_size,lwidth,lheight,bpr}
    End If
  End If
End If
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ilbm_WriteHeader {dos.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - dos.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ilbm_WriteHeader {dos.l}
SHARED IFF_BMHD
succ.l = False
bpp.l = 4
If dos>=0
  file_WriteChunk{dos,@"FORM"}
  file_WriteLong{dos,@"ILBM"}
  succ.l = True
End If
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ilbm_FixUp {dos.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - dos.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ilbm_FixUp{dos.l}
SHARED IFF_BMHD
succ.l = False
If dos>=0
  file_CloseChunk{dos,@"FORM"}
  succ=True
End If
Function Return succ
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ilbm_WriteGrabChunk {dos.l,img_grabx.l,img_graby.l}     /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/ Write the brush-grab chunk as found in Arteffects files.                    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - dos.l    : ???                                                            /
;/ - img_grabx.l    : ???                                                      /
;/ - img_graby.l    : ???                                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ilbm_WriteGrabChunk{dos.l,img_grabx.l,img_graby.l}
SHARED IFF_BMHD
succ.l = False
If dos>=0
  ; write GRAB chunk
  file_WriteChunk{dos,@"GRAB",-1,False}
  file_WriteWord{dos,img_grabx}
  file_WriteWord{dos,img_graby}
  file_CloseChunk{dos,@"GRAB"}
  succ=True
End If
Function Return succ
End Function

#IFFILBM_RGB        =  0 ; save only RGB
#IFFILBM_ARGB       = -1 ; save ARGB  (NewTek)
#IFFILBM_RGB_ALPHA  =  1 ; save RGB plus ALPHA chunk (Arteffects)
#IFFILBM_ARGB_ALPHA = -2 ; save ARGB plus ALPHA chunk (Arteffects)
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = ilbm_WriteARGBBitMap {dos.l,ARGBptr.l,img_width.l,img:: /
;/ _height.l,bpr.l,@compress.l,@pixfmt.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * private *                                                                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - dos.l    : ???                                                            /
;/ - ARGBptr.l    : ???                                                        /
;/ - img_width.l    : ???                                                      /
;/ - img_height.l    : ???                                                     /
;/ - bpr.l    : ???                                                            /
;/ - compress.l    : ???                                                       /
;/ - usealpha.l    : ???                                                       /
;/ - pixfmt.l    : ???                                                         /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l ilbm_WriteARGBBitMap {dos.l,ARGBptr.l,img_width.l,img_height.l,bpr.l,@compress.l,@pixfmt.l}
succ.l = False
bpp.l = 4
DEFTYPE.BitMapHeader bmh
If dos>=0
  ; write BMDH chunk
  file_WriteChunk{dos,@"BMHD",-1,False}
  bmh\bmh_Width      = img_width
  bmh\bmh_Height     = img_height
  bmh\bmh_Left       = 0
  bmh\bmh_Top        = 0
  Select pixfmt
    Case #IFFILBM_RGB
      bitdepth.l   = 24
      alphachunk.l = False
    Case #IFFILBM_ARGB
      bitdepth     = 32
      alphachunk   = False
    Case #IFFILBM_RGB_ALPHA
      bitdepth     = 24
      alphachunk   = True
    Case #IFFILBM_ARGB_ALPHA
      bitdepth     = 32
      alphachunk   = True
    Default
      bitdepth     = 24
      alphachunk   = False
  End Select
  bmh\bmh_Depth      = bitdepth
  bmh\bmh_Masking    = #mskNone
  If compress=0
    bmh\bmh_Compression= #cmpNone
  Else
    bmh\bmh_Compression= #cmpByteRun1
  End If
  bmh\bmh_Pad        = 0
  bmh\bmh_Transparent= 0
  bmh\bmh_XAspect    = 1
  bmh\bmh_YAspect    = 1
  bmh\bmh_PageWidth  = bmh\bmh_Width
  bmh\bmh_PageHeight = bmh\bmh_Height
  file_WriteMem{dos,bmh,SizeOf.BitMapHeader}
  file_CloseChunk{dos,@"BMHD"}


  tmpsize.l = (img_width+15)*8
  tmp.l = tempbuffer_Get{tmpsize}
  If tmp
    tmpC.l = tmp + (img_width+15)*4

    ; write ALPH chunk (readable by Arteffects)
    If alphachunk
      file_WriteChunk{dos,@"ALPH",-1,False}
      file_WriteWord{dos,8}
      file_WriteWord{dos,0}
      file_WriteWord{dos,0}
      file_WriteWord{dos,0}
      blen.l = img_width

      For y.l = 0 To img_height-1
        For x.l = 0 To img_width-1
          alpha.b = Peek.b(ARGBptr+(x*bpp+y*bpr))
          Poke.b tmp+x,alpha
        Next
        blenC.l = ilbm_RLEncode{tmp,tmpC,blen}
        If blenC>0
          file_WriteMem{dos,tmpC,blenC}
        End If
      Next
      file_CloseChunk{dos,@"ALPH"}
    End If

    ; write BODY chunk
    file_WriteChunk{dos,@"BODY",-1,False}
    blen.l = (img_width + 15) / 16 * 2 ; byte length for one bitplane line
    tmp01.l = tmp +  0 * blen
    tmp02.l = tmp +  1 * blen
    tmp03.l = tmp +  2 * blen
    tmp04.l = tmp +  3 * blen
    tmp05.l = tmp +  4 * blen
    tmp06.l = tmp +  5 * blen
    tmp07.l = tmp +  6 * blen
    tmp08.l = tmp +  7 * blen
    tmp09.l = tmp +  8 * blen
    tmp10.l = tmp +  9 * blen
    tmp11.l = tmp + 10 * blen
    tmp12.l = tmp + 11 * blen
    tmp13.l = tmp + 12 * blen
    tmp14.l = tmp + 13 * blen
    tmp15.l = tmp + 14 * blen
    tmp16.l = tmp + 15 * blen
    tmp17.l = tmp + 16 * blen
    tmp18.l = tmp + 17 * blen
    tmp19.l = tmp + 18 * blen
    tmp20.l = tmp + 19 * blen
    tmp21.l = tmp + 20 * blen
    tmp22.l = tmp + 21 * blen
    tmp23.l = tmp + 22 * blen
    tmp24.l = tmp + 23 * blen
    tmp25.l = tmp + 24 * blen
    tmp26.l = tmp + 25 * blen
    tmp27.l = tmp + 26 * blen
    tmp28.l = tmp + 27 * blen
    tmp29.l = tmp + 28 * blen
    tmp30.l = tmp + 29 * blen
    tmp31.l = tmp + 30 * blen
    tmp32.l = tmp + 31 * blen

    omax.l = (img_width-1) LSR 4

    For y.l = 0 To img_height-1  ; for each line
      For o.l = 0 To omax ; go for all 16 pixel
        flag.l = 1 LSL 15
        plane01.l = 0
        plane02.l = 0
        plane03.l = 0
        plane04.l = 0
        plane05.l = 0
        plane06.l = 0
        plane07.l = 0
        plane08.l = 0
        plane09.l = 0
        plane10.l = 0
        plane11.l = 0
        plane12.l = 0
        plane13.l = 0
        plane14.l = 0
        plane15.l = 0
        plane16.l = 0
        plane17.l = 0
        plane18.l = 0
        plane19.l = 0
        plane20.l = 0
        plane21.l = 0
        plane22.l = 0
        plane23.l = 0
        plane24.l = 0
        plane25.l = 0
        plane26.l = 0
        plane27.l = 0
        plane28.l = 0
        plane29.l = 0
        plane30.l = 0
        plane31.l = 0
        plane32.l = 0

        o4.l = o LSL 4
        oend.l = Min(o4+15,img_width-1)
        For x.l = o4 To oend
          dat.l = Peek.l( ARGBptr + (x*bpp+y*bpr) )
          ; red
          If dat&#BPMF_R1 Then plane01 | flag
          If dat&#BPMF_R2 Then plane02 | flag
          If dat&#BPMF_R3 Then plane03 | flag
          If dat&#BPMF_R4 Then plane04 | flag
          If dat&#BPMF_R5 Then plane05 | flag
          If dat&#BPMF_R6 Then plane06 | flag
          If dat&#BPMF_R7 Then plane07 | flag
          If dat&#BPMF_R8 Then plane08 | flag

          ; green
          If dat&#BPMF_G1 Then plane09 | flag
          If dat&#BPMF_G2 Then plane10 | flag
          If dat&#BPMF_G3 Then plane11 | flag
          If dat&#BPMF_G4 Then plane12 | flag
          If dat&#BPMF_G5 Then plane13 | flag
          If dat&#BPMF_G6 Then plane14 | flag
          If dat&#BPMF_G7 Then plane15 | flag
          If dat&#BPMF_G8 Then plane16 | flag

          ; blue
          If dat&#BPMF_B1 Then plane17 | flag
          If dat&#BPMF_B2 Then plane18 | flag
          If dat&#BPMF_B3 Then plane19 | flag
          If dat&#BPMF_B4 Then plane20 | flag
          If dat&#BPMF_B5 Then plane21 | flag
          If dat&#BPMF_B6 Then plane22 | flag
          If dat&#BPMF_B7 Then plane23 | flag
          If dat&#BPMF_B8 Then plane24 | flag

          ; alpha
          If dat&#BPMF_A1 Then plane25 | flag
          If dat&#BPMF_A2 Then plane26 | flag
          If dat&#BPMF_A3 Then plane27 | flag
          If dat&#BPMF_A4 Then plane28 | flag
          If dat&#BPMF_A5 Then plane29 | flag
          If dat&#BPMF_A6 Then plane30 | flag
          If dat&#BPMF_A7 Then plane31 | flag
          If dat&#BPMF_A8 Then plane32 | flag

          flag LSR 1
        Next
        o2.l=o LSL 1
        Poke.w tmp01+o2,plane01
        Poke.w tmp02+o2,plane02
        Poke.w tmp03+o2,plane03
        Poke.w tmp04+o2,plane04
        Poke.w tmp05+o2,plane05
        Poke.w tmp06+o2,plane06
        Poke.w tmp07+o2,plane07
        Poke.w tmp08+o2,plane08
        Poke.w tmp09+o2,plane09
        Poke.w tmp10+o2,plane10
        Poke.w tmp11+o2,plane11
        Poke.w tmp12+o2,plane12
        Poke.w tmp13+o2,plane13
        Poke.w tmp14+o2,plane14
        Poke.w tmp15+o2,plane15
        Poke.w tmp16+o2,plane16
        Poke.w tmp17+o2,plane17
        Poke.w tmp18+o2,plane18
        Poke.w tmp19+o2,plane19
        Poke.w tmp20+o2,plane20
        Poke.w tmp21+o2,plane21
        Poke.w tmp22+o2,plane22
        Poke.w tmp23+o2,plane23
        Poke.w tmp24+o2,plane24
        Poke.w tmp25+o2,plane25
        Poke.w tmp26+o2,plane26
        Poke.w tmp27+o2,plane27
        Poke.w tmp28+o2,plane28
        Poke.w tmp29+o2,plane29
        Poke.w tmp30+o2,plane30
        Poke.w tmp31+o2,plane31
        Poke.w tmp32+o2,plane32

      Next

      If compress
        For o.l = 0 To bitdepth-1
          blenC.l = ilbm_RLEncode{tmp+blen*o,tmpC,blen}
          If blenC>0
            file_WriteMem {dos,tmpC,blenC}
          End If
        Next
      Else
        file_WriteMem {dos,tmp,blen*bitdepth}
      End If
    Next
    file_CloseChunk{dos,@"BODY"}
  End If
  succ=True
End If
Function Return succ
End Function


CNIF #__include=0
a.s = "22133312313125555532"
b.s = "                              "
c.s = "                              "

eblen.l = ilbm_RLEncode{&a.s,&b.s,Len(a.s)}
dblen.l = ilbm_RLDecode{&b.s,&c.s,eblen}

NPrint a.s
For n.l=0 To Len(b.s)-1
  Print Peek.b(&b.s+n)," "
Next
NPrint "! (",eblen,")"
NPrint c.s," (",dblen,")"
End
;If ilbm_Open{"/Demos/gfx/WandererA.iff"}
;  NPrint "IFF-ILBM file open !"
;  If ilbm_alpha_read{}
;    NPrint "Alphachannel loaded !"
;  Else
;    NPrint "No Aplha infile !"
;  End If
;  ilbm_Close{}
;Else
;  NPrint "File is not an IFF-ILBM file !"
;End If

End





CEND
