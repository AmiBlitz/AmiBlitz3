; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "RawKeyDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 0
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 71
; LabelAll        = 5
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 2
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 1
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 5
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 4
; Max GTList      = 100
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: rawkey.include                                                        /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
CEND

XINCLUDE "error.include.ab3"


NEWTYPE.rawkeydat
msgport.l
msg.l
matrix.b[32]
device_base.l
End NEWTYPE


DEFTYPE.rawkeydat rawkeydat
DEFTYPE.IOStdReq *RawKeyIO
USEPATH rawkeydat

#rawkey_SPACE  = $40
#rawkey_RETURN = $44
#rawkey_LSHIFT = $60
#rawkey_RSHIFT = $61
#rawkey_LAMIGA = $66
#rawkey_RAMIGA = $67
#rawkey_STRG   = $63
#rawkey_LALT   = $64
#rawkey_RALT   = $65
#rawkey_UP     = $4C
#rawkey_DOWN   = $4D
#rawkey_LEFT   = $4F
#rawkey_RIGHT  = $4E
#rawkey_DEL    = $46
#rawkey_HELP   = $5F
#rawkey_ENTER  = $43
#rawkey_NUMZERO  = $0F
#rawkey_NUMKOMMA = $3C
#rawkey_y      = $31
#rawkey_x      = $32
#rawkey_c      = $33
#rawkey_a      = $20
#rawkey_s      = $21
#rawkey_d      = $22
#rawkey_f      = $23
#rawkey_e      = $12
#rawkey_dot    = $39
#rawkey_komma  = $38
#rawkey_minus  = $3A
#rawkey_#      = $2A



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: rawkey_free {}                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ *                                                                           /
;/                                                                             /
;/  rawkey.include                                                             /
;/                                                                             /
;/  This include can check any key on the keyboard OS friendly wether it is :: /
;/ pressed or not.                                                             /
;/  The program does not need to have an active window open.                   /
;/  It is an replacment for RawStatus(), which does not work on all systems.   /
;/                                                                             /
;/ *                                                                           /
;/                                                                             /
;/ *                                                                           /
;/                                                                             /
;/  rawkey_free {}                                                             /
;/                                                                             /
;/  Call this before you exit yourprogramm. Its save to call this when rawke:: /
;/ y is already free                                                           /
;/                                                                             /
;/ *                                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement rawkey_free {}
SHARED rawkeydat,*RawKeyIO
;If \device_base Then CloseDevice_ (\msg)       :\device_base = False
;If \msg         Then DeleteIORequest_ (\msg)   :\msg        = False
;If \msgport     Then DeleteMsgPort_ (\msgport) :\msgport    = False
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !rawkey_tst                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ If \device_base Then CloseDevice_ (\msg)       :\device_base = False        /
;/ If \msg         Then DeleteIORequest_ (\msg)   :\msg        = False         /
;/ If \msgport     Then DeleteMsgPort_ (\msgport) :\msgport    = False         /
;/                                                                             /
;/ *                                                                           /
;/                                                                             /
;/  !rawkey_tst {rawkeycode}                                                   /
;/                                                                             /
;/  Returns True, if the corresponding key was pressed down when you called :: /
;/ !rawkey_get, otherwise false                                                /
;/                                                                             /
;/ *                                                                           /
;/                                                                             /
;/ (rawkeydat\matrix[(`1) ASR 3] & (1 LSL ((`1) & 7)) ><0)                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro rawkey_tst
;(rawkeydat\matrix[(`1) ASR 3] & (1 LSL ((`1) & 7)) ><0)
RawKeyState(`1)
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !rawkey_get                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ *                                                                           /
;/                                                                             /
;/  !rawkey_get                                                                /
;/                                                                             /
;/  Get the information about pressed keys, that can be checked with !rawkey:: /
;/ _tst later                                                                  /
;/                                                                             /
;/ *                                                                           /
;/                                                                             /
;/ If rawkeydat\msg Then DoIO_ rawkeydat\msg                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro rawkey_get
;If rawkeydat\msg Then DoIO_ rawkeydat\msg
End Macro


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = rawkey_init {}                                          /
;/                                                                             /
;/ Description:                                                                /
;/ *                                                                           /
;/                                                                             /
;/  succ.w = rawkey_init {}                                                    /
;/                                                                             /
;/  Call this before any other function of this include                        /
;/                                                                             /
;/ *                                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l rawkey_init {}
SHARED rawkeydat,*RawKeyIO
succ.l = True
;succ.l = False
;\msgport = CreateMsgPort_()
;If  \msgport
;  \msg = CreateIORequest_(\msgport,SizeOf.IOStdReq)
;  If \msg
;    If OpenDevice_ ("keyboard.device",0,\msg,0) = False
;      *RawKeyIO = \msg
;      *RawKeyIO\io_Command = #KBD_READMATRIX
;      *RawKeyIO\io_Data    = &\matrix[0]
;      *RawKeyIO\io_Length  = 13
;      \device_base = True
;      succ        = True
;    Else
;      error {"Unable to open keyboard.device unit 0!"}
;    End If
;  Else
;    error {"Failed to create keyboard request !"}
;  End If
;Else
;  error {"Failed to create msgport !"}
;End If
;If succ = False Then rawkey_free {}
Function Return succ
End Function

!autoexit{rawkey_free}

; Demo
CNIF #__include=0
If rawkey_init {}
  NPrint "Deactivate this window first."
  NPrint "Then press any key to see its rawcode."
  NPrint "Press SPACE (=$40) to exit..."
  breakme.l = 0
  While breakme.l = False
    !rawkey_get
    For n.l=0 To 8*13-1
      If !rawkey_tst{n} Then NPrint "RawKey Code: ",n," / Hex: $"+Right$(Hex$(n),2) : If n=$40 Then breakme=True
    Next
    Delay_ 1
  Wend
  rawkey_free {}
End If
End
CEND



