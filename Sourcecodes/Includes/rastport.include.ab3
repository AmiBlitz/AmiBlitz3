; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "///Debug"
; ExeFile         = "REDDebugger"
; CreateIcon      = 0
; Residents       = ",all.res,asmmacs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 2.70.0
; NumberOfBuilds  = 26
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 0
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 130
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 50
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 50
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 50
; Max BlitzFont   = 4
; Max GTList      = 50
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: rastport.include                                                      /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 08/05/2008                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
XINCLUDE "error.include.ab3"

NEWTYPE.rp_resource
*rp.RastPort
*old_region.Region
End NEWTYPE

Dim List rp_resourcetracker.rp_resource(0)

CNIF @#LAYERS_NOBACKFILL=0
  #LAYERS_NOBACKFILL=1
CEND

SHARED *old_region_ext.Region
*old_region_ext=-1

Statement rp_SetClipExt{*rp.RastPort,x1.l,y1.l,x2.l,y2.l}
cliprect.Rectangle\MinX = Max(x1,0)
cliprect.Rectangle\MinY = Max(y1,0)
cliprect.Rectangle\MaxX = Min(x2,*rp\Layer\Width-1)
cliprect.Rectangle\MaxY = Min(y2,*rp\Layer\Height-1)
*new_region.Region = NewRegion_
If *new_region
  If OrRectRegion_(*new_region, &cliprect)
    *old_region_ext = InstallClipRegion_(*rp\Layer, *new_region)
  End If
End If
End Statement

Statement rp_RemClipExt{*rp.RastPort}
    If *old_region_ext><-1
      *new_region.Region = InstallClipRegion_(*rp\Layer, *old_region_ext)
      DisposeRegion_ *new_region
      *old_region_ext = -1
    End If
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !rp_GetClipBounds {*rp.RastPort,minx.l,miny.l,maxx.l,maxy.l}        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/ - minx.l    : ???                                                           /
;/ - miny.l    : ???                                                           /
;/ - maxx.l    : ???                                                           /
;/ - maxy.l    : ???                                                           /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro rp_GetClipBounds ; {*rp.RastPort,minx.l,miny.l,maxx.l,maxy.l}
    If `1\Layer
      If `1\Layer\ClipRegion
        *cliprec.Rectangle = `1\Layer\ClipRegion\bounds
        `2 = *cliprec\MinX
        `3 = *cliprec\MinY
        `4 = *cliprec\MaxX
        `5 = *cliprec\MaxY
      Else
        *cliprec = `1\Layer\bounds
        `2 = 0;*cliprec\MinX
        `3 = 0;*cliprec\MinY
        `4 = *cliprec\MaxX - *cliprec\MinX
        `5 = *cliprec\MaxY - *cliprec\MinY
      End If
    Else
      `2 = 0
      `3 = 0
      If `1\BitMap
        `4 = GetBitMapAttr_(`1\BitMap,#BMA_WIDTH)
        `5 = GetBitMapAttr_(`1\BitMap,#BMA_HEIGHT)
      Else
        `4 = 0
        `5 = 0
      End If
    End If
End Macro
 


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = rp_Create {width.l,height.l,@*friendlybitmap.BitMap}     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - width.l    : ???                                                          /
;/ - height.l    : ???                                                         /
;/ - *friendlybitmap.BitMap    : ???                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l rp_Create{width.l,height.l,@*friendlybitmap.BitMap}
SHARED rp_resourcetracker()

flags.l = #BMF_MINPLANES  ; use allways for Bitmaps this fix CGX display problems and HITS  tomsmart1

If *friendlybitmap ; create with same specs like friend bitmap
  bdepth.l = GetBitMapAttr_(*friendlybitmap,#BMA_DEPTH)
  flags    | GetBitMapAttr_(*friendlybitmap,#BMA_FLAGS) ; added to have the same flags as the source  tomsmart1
Else               ; create a custom ARGB bitmap
  flags | #BMF_SPECIALFMT|(#PIXFMT_ARGB32 LSL 24)
  bdepth = 32  ; change it because we need alpha and 24 are only RGB  tomsmart1
End If
*bmap.BitMap = AllocBitMap_(width,height,bdepth,flags,*friendlybitmap)
If *bmap
  *layerinfo.Layer_Info = NewLayerInfo_
  If *layerinfo
    *layer.Layer    =  CreateUpfrontHookLayer_ (*layerinfo,*bmap,0,0,width-1,height-1,0,#LAYERS_NOBACKFILL,0)
    If *layer
      *rp.RastPort = *layer\rp
      If AddItem (rp_resourcetracker())
        rp_resourcetracker()\rp = *rp
        rp_resourcetracker()\old_region = -1
      End If
    Else
      error {"\\__THIS_FUNCTION: Unable to create upfront layer!"}
    End If
  Else
    error {"\\__THIS_FUNCTION: Unable to allocate LayerInfo!"}
  End If
Else
  error {"\\__THIS_FUNCTION: Unable to init bitmap !"}
End If
Function Return *rp
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: rp_RemClip {*rp.RastPort}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement rp_RemClip{*rp.RastPort}
SHARED rp_resourcetracker()
ResetList rp_resourcetracker()
While NextItemFast(rp_resourcetracker())
  If rp_resourcetracker()\rp = *rp
    If rp_resourcetracker()\old_region><-1
      *new_region.Region = InstallClipRegion_(*rp\Layer, rp_resourcetracker()\old_region)
      DisposeRegion_ *new_region
      rp_resourcetracker()\old_region = -1
    End If
  End If
Wend
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: rp_SetClip {*rp.RastPort,x1.l,y1.l,x2.l,y2.l}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/ - x1.l    : ???                                                             /
;/ - y1.l    : ???                                                             /
;/ - x2.l    : ???                                                             /
;/ - y2.l    : ???                                                             /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement rp_SetClip{*rp.RastPort,x1.l,y1.l,x2.l,y2.l}
SHARED rp_resourcetracker()
ResetList rp_resourcetracker()
While NextItemFast(rp_resourcetracker())
  If rp_resourcetracker()\rp = *rp
    If rp_resourcetracker()\old_region><-1 Then rp_RemClip{*rp}
    cliprect.Rectangle\MinX = Max(x1,0)
    cliprect.Rectangle\MinY = Max(y1,0)
    cliprect.Rectangle\MaxX = Min(x2,*rp\Layer\Width-1)
    cliprect.Rectangle\MaxY = Min(y2,*rp\Layer\Height-1)
    *new_region.Region = NewRegion_
    If *new_region
      If OrRectRegion_(*new_region, &cliprect)
        rp_resourcetracker()\old_region = InstallClipRegion_(*rp\Layer, *new_region)
      End If
    End If
  End If
Wend
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: rp_Free {*rp.RastPort}                                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement rp_Free{*rp.RastPort}
SHARED rp_resourcetracker()
ResetList rp_resourcetracker()
While NextItemFast(rp_resourcetracker())
  If rp_resourcetracker()\rp = *rp
    rp_RemClip{*rp}
    *bmap.BitMap          = *rp\BitMap
    *layerinfo.Layer_Info = *rp\Layer\LayerInfo
    *layer.Layer          = *rp\Layer
    If *layer     Then DeleteLayer_ 0,*layer
    If *layerinfo Then DisposeLayerInfo_ *layerinfo
    If *bmap Then FreeBitMap_ *bmap
    KillItem rp_resourcetracker()
  End If
Wend
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: rp_Blit {*rp_from.RastPort,*rp_to.RastPort,x.l,y.l}                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp_from.RastPort    : ???                                                /
;/ - *rp_to.RastPort    : ???                                                  /
;/ - x.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement rp_Blit{*rp_from.RastPort,*rp_to.RastPort,x.l,y.l}
!rp_GetClipBounds {*rp_from,minx.l,miny.l,maxx.l,maxy.l}
BltBitMapRastPort_ *rp_from\BitMap,minx,miny,*rp_to,x,y,maxx-minx+1,maxy-miny+1,$C0
End Statement

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = rp_GetRawDataPtr {*rp.RastPort}                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l rp_GetRawDataPtr{*rp.RastPort}
RunErrsOff
bmaplock.l = LockBitMapTagList_(*rp\BitMap,Tags(#LBMI_BASEADDRESS,&rawptr.l))
UnLockBitMap_ bmaplock
LastRunErrsMode
Function Return rawptr
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = rp_GetWidth {*rp.RastPort}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l rp_GetWidth{*rp.RastPort}
RunErrsOff
bmaplock.l = LockBitMapTagList_(*rp\BitMap,Tags(#LBMI_WIDTH,&width.l))
UnLockBitMap_ bmaplock
LastRunErrsMode
Function Return width
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = rp_GetHeight {*rp.RastPort}                              /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l rp_GetHeight{*rp.RastPort}
RunErrsOff
bmaplock.l = LockBitMapTagList_(*rp\BitMap,Tags(#LBMI_HEIGHT,&height.l))
UnLockBitMap_ bmaplock
LastRunErrsMode
Function Return height
End Function
 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = rp_GetBytesPerRow {*rp.RastPort}                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l rp_GetBytesPerRow{*rp.RastPort}
RunErrsOff
bmaplock.l = LockBitMapTagList_(*rp\BitMap,Tags(#LBMI_BYTESPERROW,&bpr.l))
UnLockBitMap_ bmaplock
LastRunErrsMode
Function Return bpr
End Function
 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = rp_GetPixelFormat {*rp.RastPort}                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l rp_GetPixelFormat{*rp.RastPort}
RunErrsOff
bmaplock.l = LockBitMapTagList_(*rp\BitMap,Tags(#LBMI_PIXFMT,&pfmt.l))
UnLockBitMap_ bmaplock
LastRunErrsMode
Function Return pfmt
End Function
 

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = rp_GetDepth {*rp.RastPort}                               /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l rp_GetDepth{*rp.RastPort}
RunErrsOff
bmaplock.l = LockBitMapTagList_(*rp\BitMap,Tags(#LBMI_DEPTH,&bdepth.l))
UnLockBitMap_ bmaplock
LastRunErrsMode
Function Return bdepth
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: result.l = rp_GetBytesPerPixel {*rp.RastPort}                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - *rp.RastPort    : ???                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l rp_GetBytesPerPixel{*rp.RastPort}
RunErrsOff
bmaplock.l = LockBitMapTagList_(*rp\BitMap,Tags(#LBMI_BYTESPERPIX,&bpp.l))
UnLockBitMap_ bmaplock
LastRunErrsMode
Function Return bpp
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: rp_AutoExit {}                                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement rp_AutoExit{}
SHARED rp_resourcetracker()
ResetList rp_resourcetracker()
While NextItemFast(rp_resourcetracker())
  rp_Free{rp_resourcetracker()\rp}
  ResetList rp_resourcetracker()
Wend
End Statement
!autoexit{rp_AutoExit}



