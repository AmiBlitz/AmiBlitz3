; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "ConvertDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 1024
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 12
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 1
; Max GadgetList  = 1
; Max Queue       = 1
; Max Screen      = 1
; Max Shape       = 1
; Max CopList     = 1
; Max Sprite      = 1
; Max Stencil     = 1
; Max Module      = 1
; Max Window      = 2
; Max Anim        = 1
; Max Sound       = 1
; Max Bank        = 1
; Max Buffer      = 1
; Max BitMap      = 1
; Max Slice       = 1
; Max Page        = 1
; Max Tape        = 1
; Max IntuiFont   = 1
; Max MedModule   = 1
; Max Palette     = 1
; Max MenuList    = 1
; Max BlitzFont   = 1
; Max GTList      = 1
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: convert.include                                                       /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, AmigaOS4, MOS                         /
;/                                                                             /
;/ Date: 11.03.2006                                                            /
;/                                                                             /
;/ Author: Thilo Koehler                                                       /
;/                                                                             /
;/ Requirements: Amiblitz2.4                                                   /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Provide some convertion functions.                                          /
;/                                                                             /
;/ Abstract:                                                                   /
;/ Here you find some useful functions, that convert between different data :: /
;/ formats.                                                                    /
;/                                                                             /
;/ User Constants:    none                                                     /
;/                                                                             /
;/ Example:                                                 none               /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
NEWTYPE.extended
exponent.w
mantissa.l
mantissa2.w
End NEWTYPE


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.w = con_WFlip {value.w}                                     /
;/                                                                             /
;/ Description:                                                                /
;/ Convert word value little <=> big endian.                                   /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - value.w    : integer value big endian                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.w     : integer value little endian                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.w con_WFlip {value.w}
GetReg a0,&value
CLR.l d0
CLR.l d1
MOVE.b  (a0),d0
MOVE.b 1(a0),d1
LSL.w #8,D1
OR.w d0,d1
MOVE.w d1,(a0)
Function Return value
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = con_LFlipx {value.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * obsolete *  (and maybe buggy!)                                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - value.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l con_LFlipx {value.l}
GetReg a0,&value
CLR.l d0
CLR.l d1
CLR.l d2
CLR.l d3
MOVE.b  (a0),d0
MOVE.b 1(a0),d1
MOVE.b 2(a0),d2
MOVE.b 3(a0),d3
LSL.l #8,d1
LSL.l #8,d3
OR.l d0,d1
OR.l d2,d3
SWAP d3
OR.l d1,d3
MOVE.l d3,(a0)
Function Return value
End Function

; private
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: con_FlipEndian32 {sourceaddr.l,destaddr.l,llength.l}                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - sourceaddr.l    : ???                                                     /
;/ - destaddr.l    : ???                                                       /
;/ - llength.l    : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement con_FlipEndian32{sourceaddr.l,destaddr.l,llength.l}
UNLK a4
MOVE.l d0,a0
MOVE.l d1,a1
orderloop:
MOVE.l (a0)+,d0
MOVE.b d0,(a1)
LSR.l #8,d0
MOVE.b d0,1(a1)
LSR.l #8,d0
MOVE.b d0,2(a1)
LSR.l #8,d0
MOVE.b d0,3(a1)
ADD.l #4,a1
SUB.l #1,d2
BGT orderloop
RTS
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l =  con_LFlip {value.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert little <=> big endian of the given long int.                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - value.l    : long integer big endian                                      /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : long integer little endian                                 /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST con_LFlip {value.l}
con_FlipEndian32{&value,&value,1}
Function Return value
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = con_Extended2Long {exptr.l}                             /
;/                                                                             /
;/ Description:                                                                /
;/ Convert the MACs "extended" format to a normal long integer. The format i:: /
;/ s e.g. used in the AIFF file format to sepcify the samplerate (as if life:: /
;/  wasnt hard enough already).                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - exptr.l    : pointer to an extended value                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : integer value                                              /
;/                                                                             /
;/ Bugs:                                                                       /
;/ This will not work, if the extended value exceeds the 32bit integer range.  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l con_Extended2Long {exptr.l}
*ex.extended = exptr
If *ex\exponent & $8000
  sign.l = -1
Else
  sign.l =  1
End If
exponent.l = (*ex\exponent & $7FFF) - $3FFF;
GetReg a0,exptr
GetReg a1,&mantissa.l
CLR.l d0
MOVE.l 2(a0),d0
LSR.l #1,d0
MOVE.l d0,(a1)

If (exponent < 0)
  mantissa = 0
Else
  exponent - 30;

  If(exponent > 0)
    mantissa = $7FFFFFFF;
  Else
    If exponent>0
      For n.l = 1 To exponent
        mantissa * 2
      Next
    Else
      For n.l = 1 To 0-exponent
        mantissa / 2
      Next
    End If
  End If
End If
Function Return (sign * mantissa)
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: con_Long2Extended {in.l,exptr.l}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ Convert a long integer value to MACs extended value.                        /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - in.l    : integer value                                                   /
;/ - exptr.l    : pointer to an extended value to be filled                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement con_Long2Extended {in.l,exptr.l}
*ex.extended = exptr

*ex\exponent=31+16383;
*ex\mantissa2=0
If in
While (in & $80000000) = 0
  *ex\exponent-1
  GetReg a0,&in
  MOVE.l (a0),d0
  LSL.l #1,d0
  MOVE.l d0,(a0)
Wend
Else
*ex\mantissa = 0
*ex\exponent - 31
End If
*ex\mantissa=in;
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !mul48 {x.l,a.l,b.l,y.l}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ This handy macro performes y = x*a/b, whereas x*a can use up to 48 bit, o:: /
;/ nly the result must fit in 32 bit.                                          /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - x.l    : 32bit value                                                      /
;/ - a.l    : 32bit multiplier                                                 /
;/ - b.l    : 32bit divisor                                                    /
;/ - y.l    : 32bit result                                                     /
;/                                                                             /
;/ See also:    con_Mul48                                                      /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro c_mul48 ;{x.l,a.l,b.l,y.l}
s48x.l = `1
s48a.l = `2
s48b.l = `3
s48q.l = s48x / s48b
s48r.l = s48x - s48q * s48b
`4 = s48a * s48q + s48r * s48a / s48b
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !mul48_256 {x.l,a.l,y.l}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - x.l    : ???                                                              /
;/ - a.l    : ???                                                              /
;/ - y.l    : ???                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro mul48_256 ; {x.l,a.l,y.l}
s48q.l = (`1) ASR 8
s48r.l = (`1) - (s48q LSL 8)
`3 = (`2) * s48q + s48r * (`2 ASR 8)
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = con_Hex2Integer_ {hexa.s}                               /
;/                                                                             /
;/ Description:                                                                /
;/ Convert a hexadeciaml value given as a string into a long word.             /
;/ Obsolete, Vallong() can do this for us!                                     /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - hexa.s    : hex value                                                     /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : int value                                                  /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l con_Hex2Integer_ {hexa.s}
value.l = 0
hexa.s = UCase$(hexa.s)
;If (Left$(hexa.s,1)="$" OR Left$(hexa.s,1)="#") AND Len(hexa.s)<10
  pos.l = Len(hexa.s):q.l = 1
  For n.l = 0 To Len(hexa.s)-1
    Select Mid$(hexa.s,pos-n,1)
      Case "0"
        value + 0 * q
      Case "1"
        value + 1 * q
      Case "2"
        value + 2 * q
      Case "3"
        value + 3 * q
      Case "4"
        value + 4 * q
      Case "5"
        value + 5 * q
      Case "6"
        value + 6 * q
      Case "7"
        value + 7 * q
      Case "8"
        value + 8 * q
      Case "9"
        value + 9 * q
      Case "A"
        value + 10 * q
      Case "B"
        value + 11 * q
      Case "C"
        value + 12 * q
      Case "D"
        value + 13 * q
      Case "E"
        value + 14 * q
      Case "F"
        value + 15 * q
      Default
        n=8
    End Select
    q * 16
  Next
;End If
Function Return value
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l =  con_Midi2Fine {fine.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ Convert a midi pitch wheel value to fine tune value (cents).                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fine.l    : this is a 14bit value from 0...8191, that is send by the pi:: /
;/ tch wheel                                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : fine tune value in cents (semi tone/100)                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST con_Midi2Fine {fine.l}
Function Return ((fine-64)*201+126)/127
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l =  con_Fine2Midi {fine.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ Convert a fine tuning value to midi pitchwheel event value.                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fine.l    : fine tuning [-100...+100] cents                               /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : pitchwheel event value [0...127] ?                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST con_Fine2Midi {fine.l}
Function Return ((fine+100)*127+199)/200
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l =  con_Pan2Midi {pan.l}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - pan.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST con_Pan2Midi {pan.l}
Function Return ((pan+100)*127+199)/200     ; 0 =left 127=right
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l =  con_Midi2Pan {pan.l}                                   /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - pan.l    : ???                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST con_Midi2Pan {pan.l}
Function Return ((pan-64)*201+126)/127
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l =  con_Midi2Gain {gain.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - gain.l    : ???                                                           /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST con_Midi2Gain {gain.l}
Function Return gain*100/127
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l =  con_Gain2midi {gain.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ Convert a gain value to midi volume event value.                            /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - gain.l    : gain value [0...100]                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : midi volume value [0...127]                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l FAST con_Gain2midi {gain.l}
Function Return (gain*127+99)/100
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = con_Note2String {midinote.l}                            /
;/                                                                             /
;/ Description:                                                                /
;/ onvert a midi note number to a human readable string like "A4" or "C#3".    /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - midinote.l    : [0...127]                                                 /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : name of the musical note                                   /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s con_Note2String {midinote.l}
minnote.l = midinote MOD 12
Select minnote
  Case 0
    a.s = "C"
  Case 1
    a.s = "C#"
  Case 2
    a.s = "D"
  Case 3
    a.s = "D#"
  Case 4
    a.s = "E"
  Case 5
    a.s = "F"
  Case 6
    a.s = "F#"
  Case 7
    a.s = "G"
  Case 8
    a.s = "G#"
  Case 9
    a.s = "A"
  Case 10
    a.s = "A#"
  Case 11
    a.s = "B"
End Select
a.s + Str$(midinote / 12)
Function Return a.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = con_Mul48 {x.l,a.l,b.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ Computes x*a/b with possibility that x*a is bigger than a longword.         /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - x.l    : 32bit integer value                                              /
;/ - a.l    : 32bit integer value                                              /
;/ - b.l    : 32bit integer value                                              /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : x*a/b                                                      /
;/                                                                             /
;/ See also:    !mul48                                                         /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l con_Mul48{x.l,a.l,b.l}
UNLK a4
; d1=a
; d2=b
MOVE.l d0,d3
DIVU.l d2,d3  ; q = x / b    d3=q
MOVE.l d3,d4
MULU.l d2,d4
SUB.l d4,d0   ; r = x-q*b    d0=r

MOVE.l d3,d5
MULU.l d1,d5  ; a*q  d5=a*q

MOVE.l d1,d6
MULU.l d0,d6  ; r*a  d6=r*a

MOVE.l d2,d7
ASR.l #1,d7   ; d7=b/2
ADD.l d7,d6

DIVU.l d2,d6

ADD.l d6,d5
MOVE.l d5,d0  ; Return d5
RTS
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = Vallong_ {input$}                                       /
;/                                                                             /
;/ Description:                                                                /
;/ Convert the string to an intger value, same like Vallong().                 /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - input$    : string                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : integer                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l Vallong_ {input$}
value.l=0
chars.w=StrToLong_(&input$,&value)
Function Return value
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = SLen {a$}                                               /
;/                                                                             /
;/ Description:                                                                /
;/ Length of string, same like Len(), but faster. Much faster. But it works :: /
;/ only on strings, not on expressions.                                        /
;/ Note: Bernd impelemented a functions called FLen. This is equally fast, b:: /
;/ ut works only on strings as well.                                           /
;/ E.g.                                                                        /
;/ length.l = SLen{a$}  ; is allowed                                           /
;/ length.l = SLen{a$+" test "} ; is NOT allowed                               /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - a$    : string                                                            /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : length of the string                                       /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l SLen{a$}
stlen.l=Peek.l(&a$-4)
Function Return stlen
End Function

CNIF #__include=0
NPrint "Sorry, no real demo, just some tests!"

; test mul48 vs. double float
x.l = $1FFFFFFF
a.l = $FFFFFF
b.l = $FFFFFF
d.d = x
d.d * a
d.d / b
y1.l = con_Mul48{x,a,b}
!mul48{x,a,b,y2.l}
NPrint y1
NPrint y2
NPrint Int(d)


; test little endian
x.l = $11223344
NPrint Hex$(x)
NPrint Hex$(con_LFlip{x})
NPrint Hex$(con_LFlipx{x})

Delay_ 200
End
CEND

