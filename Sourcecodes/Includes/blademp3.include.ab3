; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "BladeMP3Demo"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 13
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 9
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: blademp3.include                                                      /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 24/05/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
CNIF #__include=0
OPTIMIZE 7
SYNTAX 2
CEND

XINCLUDE "dos.include.ab3"
XINCLUDE "file.include.ab3"
XINCLUDE "tempbuffer.include.ab3"
XINCLUDE "convert_audio.include.ab3"

; BLADE Ctrl struct
NEWTYPE.BLADEMP3_CTRL
BytesPerFrame.l;
inBuffer.l;
outBuffer.l;
End NEWTYPE

NEWTYPE.BladeH
*CTRL.BLADEMP3_CTRL
inOffset.l
samplerate_in.l
samplerate_out.l
brain.resample_brain
channels.l
framesize.l
BytesEncoded.l
End NEWTYPE

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !_BLADE_RescueRegs                                                  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _BLADE_RescueRegs
MOVE.l a5,-(a7) : MOVE.l a6,-(a7) : MOVE.l d7,-(a7)
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !_BLADE_RestoreRegs                                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro _BLADE_RestoreRegs
MOVE.l (a7)+,d7 : MOVE.l (a7)+,a6 : MOVE.l (a7)+,a5
End Macro


; BLADE_Open() option-Tags
; "*" means Default
#BLADELIB_DOWNMIX_MONO          = (#TAG_USER +  1)     ;   True  - *False*
#BLADELIB_LEFT_CHANNEL_MONO     = (#TAG_USER +  2)     ;   True  - *False*
#BLADELIB_RIGHT_CHANNEL_MONO    = (#TAG_USER +  3)     ;   True  - *False*
#BLADELIB_INVERSE_STEREO        = (#TAG_USER +  4)     ;   True  - *False*
#BLADELIB_STEREO                = (#TAG_USER +  5)     ;  *True* -  False
#BLADELIB_CRC                   = (#TAG_USER +  6)     ;   True  - *False*
#BLADELIB_RAW_CHANNELS          = (#TAG_USER +  7)     ;      1  - *2*
#BLADELIB_RAW_SIGNED            = (#TAG_USER +  8)     ;  *True* -  False
#BLADELIB_RAW_BITS              = (#TAG_USER +  9)     ;      8  - *16*
#BLADELIB_RAW_FREQUENCY         = (#TAG_USER + 10)     ;   32000 - *44100* - 48000
#BLADELIB_RAW_BYTEORDER         = (#TAG_USER + 11)     ;   LITTLE_ENDIAN - *BIG_ENDIAN*
#LITTLE_ENDIAN                  = 1234
#BIG_ENDIAN                     = 4321
#BLADELIB_BITRATE               = (#TAG_USER + 13)     ;    32 -   40  -  48 -  56 - *64* -  80 -  96
                               ;   112 - *128* - 160 - 192 - 224  - 256 - 320

; ErrorMessages - Get them with BLADE_GetError()
#BLADELIB_ERROR_NO_ERROR                          = (#TAG_USER + 100)
#BLADELIB_ERROR_NO_VALID_BITRATE_SET              = (#TAG_USER + 103)
#BLADELIB_ERROR_INPUTFILE_FREQUENCY_WRONG         = (#TAG_USER + 109)
#BLADELIB_ERROR_LIB_ALREADY_IN_USE                = (#TAG_USER + 111)

; ID3 V1.1 Tags
#BLADELIB_ID3_TITLE              = (#TAG_USER + 200)    ;  STRPTR
#BLADELIB_ID3_INTERPRETER        = (#TAG_USER + 201)    ;  STRPTR
#BLADELIB_ID3_ALBUM              = (#TAG_USER + 202)    ;  STRPTR
#BLADELIB_ID3_YEAROFPUBLICATION  = (#TAG_USER + 203)    ;  STRPTR
#BLADELIB_ID3_COMMENT            = (#TAG_USER + 204)    ;  STRPTR
#BLADELIB_ID3_TITLENUMBER        = (#TAG_USER + 205)    ;  Int
#BLADELIB_ID3_GENRE              = (#TAG_USER + 206)    ;  Int see List below
#SIZEOF_ID3_STRUCT               = 128

; ID3 Genre List
#BLADELIB_ID3_GENRE_BLUES          =  0
#BLADELIB_ID3_GENRE_CLASSIC_ROCK   =  1
#BLADELIB_ID3_GENRE_COUNTRY        =  2
#BLADELIB_ID3_GENRE_DANCE          =  3
#BLADELIB_ID3_GENRE_DISCO          =  4
#BLADELIB_ID3_GENRE_FUNK           =  5
#BLADELIB_ID3_GENRE_GRUNGE         =  6
#BLADELIB_ID3_GENRE_HIP_HOP        =  7
#BLADELIB_ID3_GENRE_JAZZ           =  8
#BLADELIB_ID3_GENRE_METAL          =  9
#BLADELIB_ID3_GENRE_NEW_AGE        = 10
#BLADELIB_ID3_GENRE_OLDIES         = 11
#BLADELIB_ID3_GENRE_OTHER          = 12
#BLADELIB_ID3_GENRE_UNKNOWN        = 12
#BLADELIB_ID3_GENRE_POP            = 13
#BLADELIB_ID3_GENRE_R_AND_B        = 14
#BLADELIB_ID3_GENRE_RAP            = 15
#BLADELIB_ID3_GENRE_REAGGAE        = 16
#BLADELIB_ID3_GENRE_ROCK           = 17
#BLADELIB_ID3_GENRE_TECHNO         = 18
#BLADELIB_ID3_GENRE_INDUSTRIAL     = 19
#BLADELIB_ID3_GENRE_ALTERNATIVE    = 20
#BLADELIB_ID3_GENRE_SKA            = 21
#BLADELIB_ID3_GENRE_DEATH_METAL    = 22
#BLADELIB_ID3_GENRE_PRANKS         = 23
#BLADELIB_ID3_GENRE_SOUNDTRACK     = 24
#BLADELIB_ID3_GENRE_EURO_TECHNO    = 25
#BLADELIB_ID3_GENRE_AMBIENT        = 26
#BLADELIB_ID3_GENRE_TRIP_HOP       = 27
#BLADELIB_ID3_GENRE_VOCAL          = 28
#BLADELIB_ID3_GENRE_JAZZ_AND_FUNK  = 29
#BLADELIB_ID3_GENRE_FUSION         = 30
#BLADELIB_ID3_GENRE_TRANCE         = 31
#BLADELIB_ID3_GENRE_CLASSICAL      = 32
#BLADELIB_ID3_GENRE_INSTRUMENTAL   = 33
#BLADELIB_ID3_GENRE_ACID           = 34
#BLADELIB_ID3_GENRE_HOUSE          = 35
#BLADELIB_ID3_GENRE_GAME           = 36
#BLADELIB_ID3_GENRE_SOUND_CLIP     = 37
#BLADELIB_ID3_GENRE_GOSPEL         = 38
#BLADELIB_ID3_GENRE_NOISE          = 39
#BLADELIB_ID3_GENRE_ALTERNATIVE_ROCK = 40
#BLADELIB_ID3_GENRE_BASS           = 41
#BLADELIB_ID3_GENRE_SOUL           = 42
#BLADELIB_ID3_GENRE_PUNK           = 43
#BLADELIB_ID3_GENRE_SPACE          = 44
#BLADELIB_ID3_GENRE_MEDITATIVE     = 45
#BLADELIB_ID3_GENRE_INSTRUMENTAL_POP = 46
#BLADELIB_ID3_GENRE_INSTRUMENTAL_ROCK= 47
#BLADELIB_ID3_GENRE_ETHNIC         = 48
#BLADELIB_ID3_GENRE_GOTHIC         = 49
#BLADELIB_ID3_GENRE_DARKWAVE       = 50
#BLADELIB_ID3_GENRE_TECHNO_INDUSTRIAL = 51
#BLADELIB_ID3_GENRE_ELECTRONIC     = 52
#BLADELIB_ID3_GENRE_POP_FOLK       = 53
#BLADELIB_ID3_GENRE_EURODANCE      = 54
#BLADELIB_ID3_GENRE_DREAM          = 55
#BLADELIB_ID3_GENRE_SOUTHERN_ROCK  = 56
#BLADELIB_ID3_GENRE_COMEDY         = 57
#BLADELIB_ID3_GENRE_CULT           = 58
#BLADELIB_ID3_GENRE_GANGSTA        = 59
#BLADELIB_ID3_GENRE_TOP_40         = 60
#BLADELIB_ID3_GENRE_CHRISTIAN_RAP  = 61
#BLADELIB_ID3_GENRE_POP_AND_FUNK   = 62
#BLADELIB_ID3_GENRE_JUNGLE         = 63
#BLADELIB_ID3_GENRE_NATIVE_US      = 64
#BLADELIB_ID3_GENRE_CABARET        = 65
#BLADELIB_ID3_GENRE_NEW_WAVE       = 66
#BLADELIB_ID3_GENRE_PSYCHEDELIC    = 67
#BLADELIB_ID3_GENRE_RAVE           = 68
#BLADELIB_ID3_GENRE_SHOWTUNES      = 69
#BLADELIB_ID3_GENRE_TRAILER        = 70
#BLADELIB_ID3_GENRE_LO_FI          = 71
#BLADELIB_ID3_GENRE_TRIBAL         = 72
#BLADELIB_ID3_GENRE_ACID_PUNK      = 73
#BLADELIB_ID3_GENRE_ACID_JAZZ      = 74
#BLADELIB_ID3_GENRE_POLKA          = 75
#BLADELIB_ID3_GENRE_RETRO          = 76
#BLADELIB_ID3_GENRE_MUSICAL        = 77
#BLADELIB_ID3_GENRE_ROCK_AND_ROLL  = 78
#BLADELIB_ID3_GENRE_HARD_ROCK      = 79
#BLADELIB_ID3_GENRE_FOLK           = 80
#BLADELIB_ID3_GENRE_FOLK_ROCK      = 81
#BLADELIB_ID3_GENRE_NATIONAL_FOLK  = 82
#BLADELIB_ID3_GENRE_SWING          = 83
#BLADELIB_ID3_GENRE_FAST_FUSION    = 84
#BLADELIB_ID3_GENRE_BEBOP          = 85
#BLADELIB_ID3_GENRE_LATIN          = 86
#BLADELIB_ID3_GENRE_REVIVAL        = 87
#BLADELIB_ID3_GENRE_CELTIC         = 88
#BLADELIB_ID3_GENRE_BLUEGRASS      = 89
#BLADELIB_ID3_GENRE_AVANTGARDE     = 90
#BLADELIB_ID3_GENRE_GOTHIC_ROCK    = 91
#BLADELIB_ID3_GENRE_PROGRESSIVE_ROCK = 92
#BLADELIB_ID3_GENRE_PSYCHEDELIC_ROCK = 93
#BLADELIB_ID3_GENRE_SYMPHONIC_ROCK   = 94
#BLADELIB_ID3_GENRE_SLOW_ROCK      =  95
#BLADELIB_ID3_GENRE_BIG_BAND       =  96
#BLADELIB_ID3_GENRE_CHORUS         =  97
#BLADELIB_ID3_GENRE_EASY_LISTENING =  98
#BLADELIB_ID3_GENRE_ACOUSTIC       =  99
#BLADELIB_ID3_GENRE_HUMOR          = 100
#BLADELIB_ID3_GENRE_SPEECH         = 101
#BLADELIB_ID3_GENRE_CHANSON        = 102
#BLADELIB_ID3_GENRE_OPERA          = 103
#BLADELIB_ID3_GENRE_CHAMBER_MUSIC  = 104
#BLADELIB_ID3_GENRE_SONATA         = 105
#BLADELIB_ID3_GENRE_SYMPHONY       = 106
#BLADELIB_ID3_GENRE_BOOTY_BASS     = 107
#BLADELIB_ID3_GENRE_PRIMUS         = 108
#BLADELIB_ID3_GENRE_PORN_GROOVE    = 109
#BLADELIB_ID3_GENRE_SATIRE         = 110
#BLADELIB_ID3_GENRE_SLOW_JAM       = 111
#BLADELIB_ID3_GENRE_CLUB           = 112
#BLADELIB_ID3_GENRE_TANGO          = 113
#BLADELIB_ID3_GENRE_SAMBA          = 114
#BLADELIB_ID3_GENRE_FOLKLORE       = 115
#BLADELIB_ID3_GENRE_BALLAD         = 116
#BLADELIB_ID3_GENRE_POWER_BALLAD   = 117
#BLADELIB_ID3_GENRE_RHYTMIC_SOUL   = 118
#BLADELIB_ID3_GENRE_FREESTYLE      = 119
#BLADELIB_ID3_GENRE_DUET           = 120
#BLADELIB_ID3_GENRE_PUNK_ROCK      = 121
#BLADELIB_ID3_GENRE_DRUM_SOLO      = 122
#BLADELIB_ID3_GENRE_ACAPELLA       = 123
#BLADELIB_ID3_GENRE_EURO_HOUSE     = 124
#BLADELIB_ID3_GENRE_DANCE_HALL     = 125
#BLADELIB_ID3_GENRE_GOA            = 126
#BLADELIB_ID3_GENRE_DRUM_AND_BASS  = 127
#BLADELIB_ID3_GENRE_CLUB_HOUSE     = 128
#BLADELIB_ID3_GENRE_HARDCORE       = 129
#BLADELIB_ID3_GENRE_TERROR         = 130
#BLADELIB_ID3_GENRE_INDIE          = 131
#BLADELIB_ID3_GENRE_BRITPOP        = 132
#BLADELIB_ID3_GENRE_NEGERPUNK      = 133
#BLADELIB_ID3_GENRE_POLSK_PUNK     = 134
#BLADELIB_ID3_GENRE_BEAT           = 135
#BLADELIB_ID3_GENRE_CHRISTIAN_GANGSTA = 136
#BLADELIB_ID3_GENRE_HEAVY_METAL    = 137
#BLADELIB_ID3_GENRE_BLACK_METAL    = 138
#BLADELIB_ID3_GENRE_CROSSOVER      = 139
#BLADELIB_ID3_GENRE_CONTEMPORARY_CHRISTIAN = 140
#BLADELIB_ID3_GENRE_CHRISTIAN_ROCK = 141
#BLADELIB_ID3_GENRE_MERENGUE       = 142
#BLADELIB_ID3_GENRE_SALSA          = 143
#BLADELIB_ID3_GENRE_THRASH_METAL   = 144
#BLADELIB_ID3_GENRE_ANIME          = 145
#BLADELIB_ID3_GENRE_JPOP           = 146
#BLADELIB_ID3_GENRE_SYNTHPOP       = 147

; Library vectors
#_LVOBLADE_Open                = -30
#_LVOBLADE_Close               = -36
#_LVOBLADE_EncodeFrame         = -42
#_LVOBLADE_EndEncoding         = -48
#_LVOBLADE_GetError            = -54

; function wrappers
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !BLADE_Open {taglist,blademp3_ctrl}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - taglist    : ???                                                          /
;/ - blademp3_ctrl    : ???                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro BLADE_Open ; {taglist,blademp3_ctrl}
;BLADE_Open(taglist)(a0)
GetReg a0,`1
GetReg a1,\libbase
!_BLADE_RescueRegs
MOVE.l a1,a6
JSR _LVOBLADE_Open(a6)
!_BLADE_RestoreRegs
`2 = PutRegD0
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !BLADE_Close {blademp3_ctrl}                                        /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - blademp3_ctrl    : ???                                                    /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro BLADE_Close ; {blademp3_ctrl}
;BLADE_Close(blademp3_ctrl)(a0)
GetReg a0,`1
GetReg a1,\libbase
!_BLADE_RescueRegs
MOVE.l a1,a6
JSR _LVOBLADE_Close(a6)
!_BLADE_RestoreRegs
End Macro
 
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !BLADE_EncodeFrame {blademp3_ctrl,BytesWritten}                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - blademp3_ctrl    : ???                                                    /
;/ - BytesWritten    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro BLADE_EncodeFrame ; {blademp3_ctrl,BytesWritten}
;BLADE_EncodeFrame(blademp3_ctrl)(a0)
GetReg a0,`1
GetReg a1,\libbase
!_BLADE_RescueRegs
MOVE.l a1,a6
JSR _LVOBLADE_EncodeFrame(a6)
!_BLADE_RestoreRegs
`2 = PutRegD0
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !BLADE_EndEncoding {blademp3_ctrl,BytesWritten}                     /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - blademp3_ctrl    : ???                                                    /
;/ - BytesWritten    : ???                                                     /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro BLADE_EndEncoding ; {blademp3_ctrl,BytesWritten}
;BLADE_EndEncoding(blademp3_ctrl)(a0)
GetReg a0,`1
GetReg a1,\libbase
!_BLADE_RescueRegs
MOVE.l a1,a6
JSR _LVOBLADE_EndEncoding(a6)
!_BLADE_RestoreRegs
`2 = PutRegD0
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !BLADE_GetError {errcode}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - errcode    : ???                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro BLADE_GetError ; {errcode}
;BLADE_GetError()()
GetReg a1,\libbase
!_BLADE_RescueRegs
MOVE.l a1,a6
JSR _LVOBLADE_GetError(a6)
!_BLADE_RestoreRegs
`1 = PutRegD0
End Macro


NEWTYPE.bladeengine
*libbase.Library
End NEWTYPE

DEFTYPE.bladeengine bladeengine
USEPATH bladeengine

USEPATH bladeengine
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = blade_CreateHeader {samplerate.l,channels.l,kbps.l,ti:: /
;/ tle.s,artist.s,album.s,year.s,comment.s}                                    /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - samplerate.l    : ???                                                     /
;/ - channels.l    : ???                                                       /
;/ - kbps.l    : ???                                                           /
;/ - title.s    : ???                                                          /
;/ - artist.s    : ???                                                         /
;/ - album.s    : ???                                                          /
;/ - year.s    : ???                                                           /
;/ - comment.s    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l blade_CreateHeader {samplerate.l,channels.l,kbps.l,title.s,artist.s,album.s,year.s,comment.s}
SHARED bladeengine
If dos_CheckStackSize{15000} = False
  error {"MP3 Encoding: blademp3.library needs a stack size of at least 15000 bytes!"}
  Function Return False
End If
If \libbase=0
  \libbase = OpenLibrary_("blademp3.library",0)
End If
If \libbase
  *BladeH.BladeH = AllocVec_(SizeOf.BladeH,#MEMF_CLEAR|#MEMF_ANY)
  If *BladeH
    *BladeH\CTRL = 0
    *BladeH\inOffset = 0
    *BladeH\BytesEncoded = 0
    *BladeH\brain\konto = 0
    *BladeH\brain\dsampL = 0
    *BladeH\brain\dsampR = 0
    If title.s   = "" Then title.s   = ""
    If artist.s  = "" Then artist.s  = ""
    If album.s   = "" Then album     = ""
    If year.s    = "" Then year      = ""
    If comment.s = "" Then comment.s = "Encoded with blademp3.library."
    If channels=1 Then ismono.l   = True:Else ismono=False
    If channels=2 Then isstereo.l = True:Else isstereo=False
    bits.l = 16
    *BladeH\samplerate_in = samplerate
    If samplerate<=32000 Then samplerate=32000
    If samplerate>32000 AND samplerate<48000 Then samplerate=44100
    If samplerate>=48000 Then samplerate=48000
    *BladeH\samplerate_out = samplerate
    *BladeH\channels = channels
    *BladeH\framesize = channels *2
    taglist.l = Tags (#BLADELIB_ID3_TITLE,title.s,@@
        #BLADELIB_DOWNMIX_MONO,ismono,@@
        #BLADELIB_STEREO,isstereo,@@
        #BLADELIB_RAW_CHANNELS,channels,@@
        #BLADELIB_RAW_SIGNED,True,@@
        #BLADELIB_RAW_BITS,bits,@@
        #BLADELIB_RAW_FREQUENCY,samplerate,@@
        #BLADELIB_RAW_BYTEORDER,#BIG_ENDIAN,@@
        #BLADELIB_BITRATE,kbps,@@
        #BLADELIB_ID3_INTERPRETER,artist.s,@@
        #BLADELIB_ID3_ALBUM,album.s,@@
        #BLADELIB_ID3_YEAROFPUBLICATION,year.s,@@
        #BLADELIB_ID3_TITLENUMBER,1,@@
        #BLADELIB_ID3_GENRE,#BLADELIB_ID3_GENRE_PSYCHEDELIC,@@
        #BLADELIB_ID3_COMMENT,comment.s)
    !BLADE_Open{taglist.l,*BladeH\CTRL}
    If *BladeH\CTRL=0
      !BLADE_GetError{errcode.l}
      Select errcode
        Case #BLADELIB_ERROR_NO_ERROR
          error {"Huh!? No error but no valid ctrl structure returned!"}
        Case #BLADELIB_ERROR_NO_VALID_BITRATE_SET
          error {"Invalid bitrate set for mp3 encoding!"}
        Case #BLADELIB_ERROR_INPUTFILE_FREQUENCY_WRONG
          error {"Invalid sampling rate for mp3 encoding!"}
        Case #BLADELIB_ERROR_LIB_ALREADY_IN_USE
          error {"blademp3.library is already in use!"}
        Default
          error {"Unknown error while creating header!"}
      End Select
      FreeVec_ *BladeH
      *BladeH=0
    End If
  Else
    error {"No enough memory for blade handle!"}
  End If
Else
  error {"Please install blademp3.library!"}
End If
Function Return *BladeH
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = blade_WriteHeader {fid.l,samplerate.l,channels.l,kbps:: /
;/ .l,@title.s,@artist.s,@album.s,@year.s,@comment.s}                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : ???                                                            /
;/ - samplerate.l    : ???                                                     /
;/ - channels.l    : ???                                                       /
;/ - kbps.l    : ???                                                           /
;/ - title.s    : ???                                                          /
;/ - artist.s    : ???                                                         /
;/ - album.s    : ???                                                          /
;/ - year.s    : ???                                                           /
;/ - comment.s    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l blade_WriteHeader {fid.l,samplerate.l,channels.l,kbps.l,@title.s,@artist.s,@album.s,@year.s,@comment.s}
SHARED bladeengine
If title.s = "" Then title.s = file_GetName{fid}
*BladeH.BladeH = blade_CreateHeader{samplerate,channels,kbps,title.s,artist.s,album.s,year.s,comment.s}
Function Return *BladeH
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = blade_WriteData {fid.l,*BladeH.BladeH,ptr.l,blength.l}  /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : ???                                                            /
;/ - *BladeH.BladeH    : ???                                                   /
;/ - ptr.l    : ???                                                            /
;/ - blength.l    : ???                                                        /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l blade_WriteData {fid.l,*BladeH.BladeH,ptr.l,blength.l}
SHARED bladeengine
count.l   = 0
succ.l    = True
offset.l  = 0
xoffset.l = 0

While blength>0 AND succ=True
  If *BladeH\samplerate_in = *BladeH\samplerate_out
    flength.l = blength
    tmp.l     = ptr
    blength   = 0
  Else
    xlength.l = Min(4096*4,blength) : blength-xlength
    !mul48{xlength,*BladeH\samplerate_out,*BladeH\samplerate_in,alength.l}
    If alength<0 Then error {"blademp3: Invalid length!"} : alength = xlength*8
    tmp.l = tempbuffer_Get{alength+16}
    If tmp
      flength = Resample {ptr+xoffset,tmp,xlength/*BladeH\framesize,*BladeH\samplerate_in,*BladeH\samplerate_out,*BladeH\channels,&*BladeH\brain}
      flength * *BladeH\framesize
      xoffset + xlength
    Else
      succ=False : flength = 0
    End If
  End If

  offset = 0
  While flength>0 AND succ=True
    chunksize.l = Min(*BladeH\CTRL\BytesPerFrame-*BladeH\inOffset,flength)
    If chunksize>0
      CopyMem_ tmp+offset,*BladeH\CTRL\inBuffer+*BladeH\inOffset,chunksize
      flength-chunksize
      offset+chunksize
      *BladeH\inOffset+chunksize
      count=0
    Else
      If count>100 Then succ=False:Else count+1
    End If

    If *BladeH\inOffset>=*BladeH\CTRL\BytesPerFrame
      *BladeH\inOffset=0
      *BladeH\BytesEncoded + *BladeH\CTRL\BytesPerFrame
      !BLADE_EncodeFrame{*BladeH\CTRL,BytesWritten.l}
      If BytesWritten>0
        succ.l & file_WriteMem{fid,*BladeH\CTRL\outBuffer,BytesWritten}
      End If
    End If
  Wend
Wend
Function Return succ
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = blade_FreeHeader {fid.l,*BladeH.BladeH}                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - fid.l    : ???                                                            /
;/ - *BladeH.BladeH    : ???                                                   /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l blade_FreeHeader {fid.l,*BladeH.BladeH}
SHARED bladeengine
succ.l = False
If *BladeH
  If *BladeH\inOffset>0
    For n.l=*BladeH\inOffset To *BladeH\CTRL\BytesPerFrame-2 Step 2
      Poke.w *BladeH\CTRL\inBuffer + n,0
    Next
    *BladeH\BytesEncoded + *BladeH\CTRL\BytesPerFrame
    !BLADE_EncodeFrame{*BladeH\CTRL,BytesWritten.l}
    If BytesWritten>0
      succ.l & file_WriteMem{fid,*BladeH\CTRL\outBuffer,BytesWritten}
    EndIf
  End If

  !BLADE_EndEncoding{*BladeH\CTRL,BytesWritten.l}
  If BytesWritten>0
    succ.l = file_WriteMem{fid,*BladeH\CTRL\outBuffer,BytesWritten}
  End If
  !BLADE_Close{*BladeH\CTRL}
  FreeVec_ *BladeH : *BladeH=0
End If
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: blade_Free {}                                                       /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement blade_Free{}
SHARED bladeengine
If \libbase Then CloseLibrary_(\libbase) : \libbase=0
End Statement
!autoexit{blade_Free}


CNIF #__include=0
fid.l = file_Open{"RAM:test.mp3",#file_forcewrite}
If fid<0 Then error {"Unable to write file!"} : End

bh.l = blade_WriteHeader{fid,8000,1,128}
If bh = False Then error {"Unable to init Blade Header !"} : End

fid2.l= file_Open{"/Data/DemoSong.aiff",#file_read}
If fid2<0 Then error {"Unable to read source file!"} : End

blength.l = Min(1024*1024,file_GetLength{fid2}-64)
ptr.l = AllocMem(blength,#MEMF_ANY)
If ptr=0 Then error {"Unable to allocate buffer!"} : End
file_Seek{fid2,64} ; skip header !
file_ReadMem{fid2,ptr,blength}
file_Close{fid2}

If blade_WriteData{fid,bh,ptr,blength} = False
  error {"Error while encoding!"}
End If

blade_FreeHeader{fid,bh}
file_Close{fid}
message {"File encoded as MP3! => check RAM Disk!"}
End
CEND

