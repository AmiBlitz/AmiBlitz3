; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 7
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 53
; LabelAll        = 5
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Name: keyread.include                                                       /
;/                                                                             /
;/ Platforms: Classic, WinUAE, Amithlon, MorphOS, AmigaOS4                     /
;/                                                                             /
;/ Date: 19/01/2007                                                            /
;/                                                                             /
;/ Author: <unknown>                                                           /
;/                                                                             /
;/ Requirements:  Amiblitz3                                                    /
;/                                                                             /
;/ Purpose:                                                                    /
;/ Extend AB3 functionality.                                                   /
;/ * no description available *                                                /
;/                                                                             /
;/ Abstract:                                                                   /
;/ * no abstract available *                                                   /
;/                                                                             /
;/ User Constants:                                                             /
;/ #max_objects   = n                                                          /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////

#keyflg_forever = %00000001
#keyflg_beta    = %00000010
#keyflg_full    = %00000100
#keyflg_demo    = %00001000

#keyflg_tester  = #keyflg_beta|#keyflg_full
#keyflg_master  = %10000000|#keyflg_tester


NEWTYPE.regkey
rand.l[4]
version.l
flags.l
gendate.DateStamp
expdate.DateStamp
strings.l
tmp_ptr.l
id.l
check.l
End NEWTYPE

NEWTYPE.regkeycore
a.l
b.l
c.l
End NEWTYPE

;SHARED *regkey.regkey
;SHARED regkeycore.regkeycore

DEFTYPE.regkeycore regkeycore

*regkey.regkey = AllocMem_(4096,#MEMF_CLEAR)
If *regkey
  *regkey\flags   = #keyflg_demo
  *regkey\strings = 0
End If

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: key_config {a.l,b.l,c.l}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ SHARED *regkey.regkey                                                       /
;/ SHARED regkeycore.regkeycore                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - a.l    : ???                                                              /
;/ - b.l    : ???                                                              /
;/ - c.l    : ???                                                              /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement key_config {a.l,b.l,c.l}
SHARED regkeycore
  regkeycore\a = a
  regkeycore\b = b
  regkeycore\c = c
End Statement


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = key_rolx {dat.l,value.l}                                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - dat.l    : ???                                                            /
;/ - value.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l key_rolx {dat.l,value.l}
ROL.l d1,d0
AsmExit
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = key_rol {dat.l,value.l}                                 /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - dat.l    : ???                                                            /
;/ - value.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l key_rol {dat.l,value.l}
UNLK a4
ROL.l d1,d0
RTS
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = key_checksum {l.l}                                      /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - l.l    : ???                                                              /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l key_checksum {l.l}
SHARED *regkey
check.l = 0
If *regkey
  l/4
  For n.l = 0 To l-1
    m.l = Peek.l (n*4 + *regkey)
    m.l = key_rol {m,n MOD 32}
    If *regkey+n*4 >< &*regkey\check
      check = check + m + n * 7
    End If
  Next
End If
Function Return check
End Function



;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = key_check {filename.s,version.l,flags.l}                /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Inputs:                                                                     /
;/ - filename.s    : ???                                                       /
;/ - version.l    : ???                                                        /
;/ - flags.l    : ???                                                          /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l key_check {filename.s,version.l,flags.l}
SHARED *regkey,regkeycore
succ.l = False
If *regkey
If dos_Exist {filename.s}
  dos.l = file_Open {filename.s,#file_read}
  If dos>=0
    If file_GetLength{dos}>SizeOf.regkey+4-12
      rl.l = file_GetLength {dos}
      If *regkey
        l.l  = file_GetLength {dos} +3
        If file_ReadMem {dos,*regkey,rl}
          l/4
          pass.l = regkeycore\a + regkeycore\b - regkeycore\c
          For n.l = 0 To l
            c.l = Peek.l (n*4 + *regkey)
            m2.l = Xor(c,pass)
            m.l = key_rol {m2, 32-3}
            Poke.l n*4 + *regkey,m
            pass+m
            pass = key_rol {pass , 1}
          Next
          If key_checksum{rl}=*regkey\check
            If *regkey\version>=version
              DateStamp_ (&*regkey\gendate)
              If *regkey\gendate\ds_Days<=*regkey\expdate\ds_Days OR (*regkey\flags & #keyflg_forever)=#keyflg_forever
                If (*regkey\flags & flags)=flags
                  succ=True
                  *regkey\tmp_ptr = &*regkey\check+4
                Else
                  error {"Keyfile has not the required rights!\\nKey: "+Hex$(*regkey\flags)+" Req: "+Hex$(flags)}
                End If
              Else
                error {"Your keyfile has expired !"}
              End If
            Else
              error {"This keyfile is only valid\\nfor older versions of HD-Rec !"}
            End If
          Else
            error {"Keyfile has wrong checksum !\\n(Don't try to be clever!) "+Hex$(*regkey\check)+"><"+Hex$(key_checksum{rl})}
          End If
        End If
      End If
    End If
    file_Close {dos}
  End If
End If
End If
If succ=False Then *regkey\flags = #keyflg_demo : *regkey\strings = 0
Function Return succ
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.l = key_flags {}                                            /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.l     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.l key_flags {}
SHARED *regkey
flags.l = #keyflg_demo
If *regkey Then flags.l = *regkey\flags
Function Return flags
End Function

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: !key_flags                                                          /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Macro key_flags
*regkey\flags
End Macro

;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax:  result.s = key_getstr {}                                           /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;/ Result:                                                                     /
;/ - result.s     : ???                                                        /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Function.s key_getstr {}
SHARED *regkey
If *regkey
If *regkey\flags & #keyflg_demo
  Select *regkey\strings
    Case 1
      string.s = "Demo Version"
    Case 2
      string.s = "====================="
    Case 3
      string.s = "Please register!"
    Case 0
      string.s = "====================="
    Case 4
      string.s = ""
    Default
      string.s = ""
  End Select
  *regkey\strings+1
Else
  l.l = Peek.l(*regkey\tmp_ptr) : If l>64 OR l<0 Then l=0
  If l>0
    string.s = LSet$(" ",l)
    CopyMem_ *regkey\tmp_ptr+4, &string.s,l
  End If
  *regkey\tmp_ptr + l + 4
End If
End If
Function Return string.s
End Function


;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ Syntax: key_free {}                                                         /
;/                                                                             /
;/ Description:                                                                /
;/ * no description available *                                                /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////
Statement key_free {}
SHARED *regkey
If *regkey Then FreeMem_ *regkey,4096 : *regkey=False
End Statement

!autoexit{key_free}


