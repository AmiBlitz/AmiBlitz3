; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "WorkbenchApp"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 100
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8192
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 234
; CursorColumn    = 41
; LabelSearch     = "windowfont"
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 50
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 50
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 50
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 100
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
; Window App Example

; control the compiler ...
; 1 : integer optimizer, exe will need 68020+ CPU
; 2 : floating point usage, exe will need 68881+ FPU
; 4 : allow AB3 compiler extentions
OPTIMIZE 5 ; = 1|4
NoCli
; do some more strct syntax (e.g. declare variables),
; which is very useful for larger projects
SYNTAX 2

; we need to include the WBStartup Code
WBStartup

XINCLUDE "error.include.ab3"


; use the WB screen as screen object 0
WbToScreen 0

  *myscreen.Screen = Peek.l(Addr Screen(Used Screen))

  DEFTYPE.Image       *sizeimage,*rarrowimage,*larrowimage,*darrowimage,*uarrowimage
  DEFTYPE.Gadget      *vertiprop,*horizprop,*rarrowbutton,*larrowbutton,*darrowbutton,*uarrowbutton,*stringgad
  DEFTYPE.l sizew,sizeh,w,h,barh,exit

  ; --
  ; -- get the image size of gadgets to fit into the windows borders
  ; --
  *drawinfo.l = GetScreenDrawInfo_(*myscreen)
  If (*myscreen\Flags & #SCREENHIRES)
    syssize.b = #SYSISIZE_MEDRES
  Else
    syssize = #SYSISIZE_LOWRES
  EndIf
  *sizeimage = NewObjectA_(0,"sysiclass",Tags(#SYSIA_Which,#SIZEIMAGE,@@
                                                #SYSIA_Size     ,syssize,@@
                                                #SYSIA_DrawInfo ,*drawinfo,@@
                                                #TAG_END        ,0))
  If (*sizeimage)
    GetAttr_ #IA_Width,*sizeimage ,&sizew
    GetAttr_ #IA_Height,*sizeimage,&sizeh
    DisposeObject_ *sizeimage
  Else
    sizew = 18
    sizeh = 10
  EndIf


  ; --
  ; -- create a linked object list for all gadgets
  ; --
  *darrowimage = NewObjectA_(0,"sysiclass",Tags(#SYSIA_Which,#DOWNIMAGE,@@
                                                   #SYSIA_Size     ,syssize,@@
                                                   #SYSIA_DrawInfo ,*drawinfo,@@
                                                   #TAG_END        ,0))
  If (*darrowimage)
    GetAttr_ #IA_Width ,*darrowimage,&w
    GetAttr_ #IA_Height,*darrowimage,&h
  EndIf

;#MAX_Columns = 250
#GID_LARROW =  800
#GID_RARROW = 801
#GID_DARROW = 900
#GID_UARROW = 901
#GID_YPROP = 902
#GID_XPROP = 903
#GID_STRING = 1000

  *darrowbutton = NewObjectA_(0,"buttongclass",Tags(#GA_ID,#GID_DARROW,@@
    #GA_RelRight    ,-w+1,@@
    #GA_RelBottom   ,-sizeh-h+1,@@
    #GA_Width       ,w,@@
    #GA_Height      ,h,@@
    #GA_Immediate   ,True,@@
    #GA_RelVerify   ,True,@@
    #GA_DrawInfo    ,*drawinfo,@@
    #GA_GZZGadget   ,True,@@
    #GA_RightBorder ,True,@@
    #GA_Image       ,*darrowimage,@@
    #TAG_END        ,0))

  *uarrowimage = NewObjectA_(0,"sysiclass",Tags(@@
    #SYSIA_Which    ,#UPIMAGE,@@
    #SYSIA_Size     ,syssize,@@
    #SYSIA_DrawInfo ,*drawinfo,@@
    #TAG_END        ,0))

  If (*uarrowimage)
    GetAttr_ #IA_Width ,*uarrowimage,&w
    GetAttr_ #IA_Height,*uarrowimage,&h
  EndIf

  *uarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
    #GA_Previous    ,*darrowbutton,@@
    #GA_ID          ,#GID_UARROW,@@
    #GA_RelRight    ,-w+1,@@
    #GA_RelBottom   ,-sizeh-h-h+1,@@
    #GA_Width       ,w,@@
    #GA_Height      ,h,@@
    #GA_Immediate   ,True,@@
    #GA_RelVerify   ,True,@@
    #GA_DrawInfo    ,*drawinfo,@@
    #GA_GZZGadget   ,True,@@
    #GA_RightBorder ,True,@@
    #GA_Image       ,*uarrowimage,@@
    #TAG_END        ,0))

  barh = *myscreen\WBorTop+*myscreen\RastPort\TxHeight+2

  *vertiprop = NewObjectA_(0,"propgclass",Tags(@@
    #GA_Previous    ,*uarrowbutton,@@
    #GA_ID          ,#GID_YPROP,@@
    #GA_RelRight    ,-sizew+4,@@
    #GA_Top         ,barh,@@
    #GA_Width       ,sizew-6,@@
    #GA_RelHeight   ,-sizeh-h-h-barh-1,@@
    #GA_Immediate   ,True,@@
    #GA_RelVerify   ,True,@@
    #GA_DrawInfo    ,*drawinfo,@@
    #GA_GZZGadget   ,True,@@
    #GA_RightBorder ,True,@@
    #PGA_Freedom    ,#FREEVERT,@@
    #PGA_Borderless ,True,@@
    #PGA_NewLook    ,True,@@
    #PGA_Total      ,1,@@
    #PGA_Visible    ,1,@@
    #TAG_END        ,0))

  *rarrowimage = NewObjectA_(0,"sysiclass",Tags(@@
    #SYSIA_Which    ,#RIGHTIMAGE,@@
    #SYSIA_Size     ,syssize,@@
    #SYSIA_DrawInfo ,*drawinfo,@@
    #TAG_END        ,0))

  If (*rarrowimage)
    GetAttr_ #IA_Width ,*rarrowimage,&w
    GetAttr_ #IA_Height,*rarrowimage,&h
  EndIf

  *rarrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
    #GA_Previous     ,*vertiprop,@@
    #GA_ID           ,#GID_RARROW,@@
    #GA_RelRight     ,-sizew-w+1,@@
    #GA_RelBottom    ,-h+1,@@
    #GA_Width        ,w,@@
    #GA_Height       ,h,@@
    #GA_Immediate    ,True,@@
    #GA_RelVerify    ,True,@@
    #GA_DrawInfo     ,*drawinfo,@@
    #GA_GZZGadget    ,True,@@
    #GA_BottomBorder ,True,@@
    #GA_Image        ,*rarrowimage,@@
    #TAG_END         ,0))

  *larrowimage = NewObjectA_(0,"sysiclass",Tags(@@
    #SYSIA_Which    ,#LEFTIMAGE,@@
    #SYSIA_Size     ,syssize,@@
    #SYSIA_DrawInfo ,*drawinfo,@@
    #TAG_END        ,0))

  If (*larrowimage)
    GetAttr_ #IA_Width ,*larrowimage,&w
    GetAttr_ #IA_Height,*larrowimage,&h
  EndIf

  *larrowbutton = NewObjectA_(0,"buttongclass",Tags(@@
    #GA_Previous     ,*rarrowbutton,@@
    #GA_ID           ,#GID_LARROW,@@
    #GA_RelRight     ,-sizew-w-w+1,@@
    #GA_RelBottom    ,-h+1,@@
    #GA_Width        ,w,@@
    #GA_Height       ,h,@@
    #GA_Immediate    ,True,@@
    #GA_RelVerify    ,True,@@
    #GA_DrawInfo     ,*drawinfo,@@
    #GA_GZZGadget    ,True,@@
    #GA_BottomBorder ,True,@@
    #GA_Image        ,*larrowimage,@@
    #TAG_END         ,0))

  *horizprop = NewObjectA_(0,"propgclass",Tags(@@
    #GA_Previous     ,*larrowbutton,@@
    #GA_ID           ,#GID_XPROP,@@
    #GA_Left         ,*myscreen\WBorLeft,@@
    #GA_RelBottom    ,-sizeh+3,@@
    #GA_RelWidth     ,-sizew-w-w-*myscreen\WBorLeft-1,@@
    #GA_Height       ,sizeh-4,@@
    #GA_Immediate    ,True,@@
    #GA_RelVerify    ,True,@@
    #GA_DrawInfo     ,*drawinfo,@@
    #GA_GZZGadget    ,True,@@
    #GA_BottomBorder ,True,@@
    #PGA_Freedom     ,#FREEHORIZ,@@
    #PGA_Borderless  ,True,@@
    #PGA_NewLook     ,True,@@
    #PGA_Total       ,255,@@
    #PGA_Visible     ,20,@@
    #TAG_END         ,0))


  *stringgad = NewObjectA_(0,"strgclass",Tags(@@
    #GA_Previous     ,*horizprop,@@
    #GA_ID           ,#GID_STRING,@@
    #GA_Left         ,8,@@
    #GA_Top          ,8,@@
    #GA_Width        ,100,@@
    #GA_DrawInfo     ,*drawinfo,@@
    #STRINGA_LongVal, 0,@@
    #TAG_END         ,0))





  SourceWindowIDCMPFlags.l = #IDCMP_INTUITICKS|#IDCMP_IDCMPUPDATE|#IDCMP_CLOSEWINDOW|#IDCMP_VANILLAKEY|#IDCMP_RAWKEY
  SourceWindowIDCMPFlags | #IDCMP_MENUPICK|#IDCMP_GADGETUP|#IDCMP_GADGETDOWN
  SourceWindowIDCMPFlags | #IDCMP_MOUSEMOVE|#IDCMP_MOUSEBUTTONS|#IDCMP_NEWSIZE|#IDCMP_REFRESHWINDOW
  SourceWindowIDCMPFlags | #IDCMP_ACTIVEWINDOW|#IDCMP_INACTIVEWINDOW

  SourceWindowWFlags.l = #WFLG_NEWLOOKMENUS|#WFLG_WBENCHWINDOW|#WFLG_ACTIVATE|#WFLG_GIMMEZEROZERO
  SourceWindowWFlags   | #WFLG_SIZEBBOTTOM|#WFLG_SIZEBRIGHT|#WFLG_SIZEGADGET|#WFLG_CLOSEGADGET|#WFLG_DEPTHGADGET
  SourceWindowWFlags   | #WFLG_DRAGBAR|#WFLG_REPORTMOUSE


  ; --- OPEN the WINDOW
  Use Screen 0
  DefaultIDCMP SourceWindowIDCMPFlags
  ;Window 0,10,10,320,200,SourceWindowWFlags,"Test",0,1
  WindowTags 0,SourceWindowWFlags,"Test",Tags(@@
                      #WA_Left       ,160,@@
                      #WA_Top        ,100,@@
                      #WA_Height     ,200,@@
                      #WA_Width      ,320,@@
                      #WA_MinWidth   ,320,@@
                      #WA_MaxWidth   ,-1,@@
                      #WA_MinHeight  ,120,@@
                      #WA_MaxHeight  ,-1,@@
                      #WA_IDCMP      ,SourceWindowIDCMPFlags,@@
                      #WA_Gadgets    ,*darrowbutton,@@
                      #WA_PubScreen  ,*myscreen,@@
                      (#WA_Dummy + $60),-1)
  *win.Window = Peek.l(Addr Window(0))
  DEFTYPE.IntuiMessage *msg

quitme.l = False

mode.b = 0

While quitme = False ; message loop
  If mode = 0
    ev.l = WaitEvent
    If ev
      NPrint Hex$(ev) + " " + Hexw$(EventCode) + " " + Hexw$(EventQualifier) + " " + Hexw$(EventVanillaKey)
      WPrintScroll 
      Select ev
      Case #IDCMP_CLOSEWINDOW : quitme = True
      ;Case #IDCMP_MOUSEMOVE : NPrint "*******"
      End Select
    EndIf
    ;NPrint Timer
  Else
    Wait_(1 LSL *win\UserPort\mp_SigBit)
    *msg = GetMsg_(*win\UserPort)
    While *msg
      If *msg
        NPrint Hex$(*msg\Class) + " " + Hexw$(*msg\Code) + " " + Hexw$(*msg\Qualifier)
        WPrintScroll
        Select *msg\Class
        Case #IDCMP_CLOSEWINDOW : quitme = True
        ;Case #IDCMP_MOUSEMOVE : NPrint "****"
        End Select
        ReplyMsg_ *msg
      EndIf
      *msg = GetMsg_(*win\UserPort)
    Wend
  EndIf

  VWait
Wend

End ; never forget "End", it closes the window for us and frees all resources
