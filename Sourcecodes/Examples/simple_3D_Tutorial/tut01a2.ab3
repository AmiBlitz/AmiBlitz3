; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 3
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 15
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = -1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA

;Hallo Freunde der Freundin!!!
;Es hatte lange gedauert aber ich habe jetzt das 3D-sample f|r euch fertiggestellt.

;Um den Code nicht mit Kommentaren (auch aus |bersichtlichkeitsgr|nden) aufzubldhen
;kvnnt auch die Doku die beiligt lesen. Dort wird alles nochmal erkldrt
;Aber auch in der AmiBlitz-ML kvnnt ihr mich direkt bei Problemen fragen

;Ich beantworte jede Frage
;Merkt euch eins: Es ist noch kein Meister vom Himmel gefallen!

;An dieser Stelle nochmals danke an Bernd Roesch fuer seine Hilfe

;SO, LOS GEHTS!

OPTIMIZE 5
DEFTYPE .l

NEWTYPE .vtx
  sx.l;screenX
  sy.l;screenY
  vx.f;pointX, diese angaben MUESSEN in float sein!!! ansonsten alles in long .l
  vy.f;pointY
  vz.f;pointZ
End NEWTYPE

NEWTYPE .plg
  vtx1.l
  vtx2.l
  vtx3.l
End NEWTYPE


Dim List points.vtx(1000)
Dim List polygons.plg(1500)


  Function .s getstring{splitstring.s, pos.l}; Funktion um den String zu teilen
                                             ;ich muss aber sagen: haette man schoener loesen koennen
    st1.l = 0
    st2.l = 0



      st1 = Instr(splitstring, ";", 1);sucht nach dem ersten seperator semikolon

      If st1 > 0 st2 = Instr(splitstring, ";", st1+1);falls in st1 schon eine position drinnsteht st2 fuellen

      Select pos
        Case 1
          Function Return Left$(splitstring, st1-1); gibt den ersten Teil des Strings
        Case 2
          Function Return Right$(Left$(splitstring, st2-1), st2-1-st1); gibt den mittleren Teil
        Case 3

          retStr.s = Right$(splitstring, Len(splitstring) - st2); gint letzten Teil des Strings zurueck

            If Right$(retStr,1) = Chr$(13); hier wird ueberprueft ob ein Enterzeichen (neue Zeile) da ist
              retStr = Left$(retStr, Len(retStr)-1); wenn ja muss es weggeschnitten werden!
            EndIf

          Function Return retStr


    End Select

  End Function


;------------------------------------------------------


  Statement loadModel {filename.s};

    SHARED points()
    SHARED polygons()

    If OpenFile(0,filename); unsere Datei
                  FileInput 0

      ClearList points()
      ClearList polygons()

      Repeat

        linestream.s = Edit$(80) ;liest die zeile ein

        If Instr(linestream, "#") > 0
          linestream = Left$(linestream, Len(linestream)-1)

          If Len(linestream) > 1
            AddLast points()
              points()\vx = Val(getstring{linestream, 1})
              points()\vy = Val(getstring{linestream, 2})
              points()\vz = Val(getstring{linestream, 3})
          EndIf
        Else
          If Len(linestream) > 1
            AddLast polygons()
              polygons()\vtx1 = Val(getstring{linestream, 1})
              polygons()\vtx2 = Val(getstring{linestream, 2})
              polygons()\vtx3 = Val(getstring{linestream, 3})
          EndIf
        EndIf


      Until Eof(0)

      CloseFile 0

    EndIf

  End Statement


;------------------------------------------------------


  Statement renderObject{onX.l, onY.l}

    SHARED points()

    For pc.l = 0 To CountItem(points()) - 1

      USEPATH points(pc)

        \sx = ((2000 * \vx) / (\vz + 400)) + onX
        \sy = ((2000 * \vy) / (\vz + 400)) + onY

    Next

  End Statement


;------------------------------------------------------


  Statement drawObject{color.l, culling.l}


    SHARED points()
    SHARED polygons()


      plgcount.l = CountItem(polygons()) - 1


     ; VWait 1
      For pc.l = 0 To plgcount

        bufferz.f = 0

        v1x.l = points(polygons(pc)\vtx1)\sx - points(polygons(pc)\vtx2)\sx
        v1y.l = points(polygons(pc)\vtx1)\sy - points(polygons(pc)\vtx2)\sy
        v2x.l = points(polygons(pc)\vtx3)\sx - points(polygons(pc)\vtx1)\sx
        v2y.l = points(polygons(pc)\vtx3)\sy - points(polygons(pc)\vtx1)\sy

        If culling = -1
          bufferz = (v1x * v2y - v1y * v2x)

        Else
          bufferz = 1
        EndIf

        If bufferz > 0

          Wline points(polygons(pc)\vtx1)\sx, points(polygons(pc)\vtx1)\sy, points(polygons(pc)\vtx2)\sx, points(polygons(pc)\vtx2)\sy, color
          Wline points(polygons(pc)\vtx2)\sx, points(polygons(pc)\vtx2)\sy, points(polygons(pc)\vtx3)\sx, points(polygons(pc)\vtx3)\sy, color
          Wline points(polygons(pc)\vtx3)\sx, points(polygons(pc)\vtx3)\sy, points(polygons(pc)\vtx1)\sx, points(polygons(pc)\vtx1)\sy, color
        EndIf

;      VWait 1
      Next pc



  End Statement


;------------------------------------------------------


  Statement scaleObject{fX.f, fY.f, fZ.f}

    SHARED points()



    For pc.l = 0 To CountItem(points()) - 1

      USEPATH points(pc)

        If fX <> 0 Then \vx = \vx * fX
        If fY <> 0 Then \vy = \vy * fY
        If fZ <> 0 Then \vz = \vz * fZ

    Next

  End Statement


;------------------------------------------------------


  Statement rotateObject{fX.f, fY.f, fZ.f}

    pifac.f = 3.1415927/180

    SHARED points()


    xcos.f = Cos(fX*pifac)
    ycos.f = Cos(fY*pifac)
    zcos.f = Cos(fZ*pifac)
    xsin.f = Sin(fX*pifac)
    ysin.f = Sin(fY*pifac)
    zsin.f = Sin(fZ*pifac)

    For pc.l = 0 To CountItem(points()) - 1

      USEPATH points(pc)

        If fX <> 0

            oY.f = \vy: oZ.f = \vz

            \vy = (oY * xcos) - (oZ * xsin)
            \vz = (oY * xsin) + (oZ * xcos)


        End If

        If fY <> 0

            oZ.f = \vz: oX.f = \vx

            \vz = (oZ * ycos) - (oX * ysin)
            \vx = (oZ * ysin) + (oX * ycos)

        End If

        If fZ <> 0

            oX = \vx: oY = \vy

            \vx = (oX * zcos) - (oY * zsin)
            \vy = (oX * zsin) + (oY * zcos)

        End If


    Next

  End Statement


;------------------------------------------------------


  Statement translateObject{fX.f, fY.f, fZ.f}

    SHARED points()

    For pc.l = 0 To CountItem(points()) - 1

      USEPATH points(pc)
        \vx = \vx + fX
        \vy = \vy + fY
        \vz = \vz + fZ

    Next

  End Statement


;------------------------------------------------------




  FindScreen 0
  Window 0, 0,0,640,480,$100F,"3D-Sample by Frank Diehl (press mouse to exit)", 120, 120
  Use Screen 0


  NPrint "Please wait load Object ..."

  loadModel{"zylinder.obj"}

  NPrint "Object loaded!"
  NPrint "Vertices:"
  Print CountItem(points())
  NPrint ""
  NPrint "Polygons:"
  Print CountItem(polygons())



  scaleObject{0.045,0.045,0.045}


  Repeat

    ;InnerCls 0

    drawObject{0, 0} ;alte Zeichnung uebermalen, kostet aber zeit- alternativ geht InnerCls 0!

    rotateObject{0.1,-0.3,1}; objekt rotieren lassen

    renderObject{320, 240}; objekt rendern
    ;VWait 1
    drawObject{1, 0} ;neu zeichnen
    VWait 1

    If Joyb(0)<>0 Then End ;bei mausklick ende

  Forever


