; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "tickstest"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 0
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 19
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 2
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 5
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 4
; Max GTList      = 100
; /XTRA
; --
; -- this example is a benchmark for variables
; --

#developobject=1 ;enable this if you want include that file

#ownrun = 1
CNIF #ownrun
  OPTIMIZE 7
  #developobject=1
  Statement error {text.s}
    Request "Bench",text.s,"ok"
  End Statement
CEND


Object ticks_include
  NEWTYPE.eclock_ticks
    is_open.l
    msgport.l
    msg.l
    timer_base.l
    quantum.l
    efreq_err.l
    dummy_efreq.l
    timeindex_hi_a.l
    timeindex_lo_a.l
    efreq.l
    timeindex_hi_b.l
    timeindex_lo_b.l
    sigflag.l
    scaler.l
  End NEWTYPE

  DEFTYPE.eclock_ticks eclock_ticks
  USEPATH eclock_ticks

  CNIF #developobject=0
  !ticks_set
  !ticks_close
  !ticks_open
  !ticks_reset
  !ticks_read
  !ticks_read_reset
  .Installexithandler_ticks
   MOVE.l #myfreecode_ticks,d0 ;
  SysJsr $c801       ;this install the exithandler
  MOVE.l d0,oldfree_ticks   ;This read the oldfree code to link all handlers together
  BRA l1_ticks
  myfreecode_ticks          ;this is the autoexit routine
  ;*****************User Code Start
  ticks_close{} ; this is called on program exit automatic
  ;*****************User Code End******************************
  MOVE.l oldfree_ticks,a0  ;jump to next exithandler
  JMP (a0)
  oldfree_ticks: Dc.l 0
  l1_ticks:
  CEND
End Object




Object ticks_set ;ticks_set {@scaler} ;the ticks per second
  Statement ticks_set {@scaler.l} ;the ticks per second default 50
  SHARED eclock_ticks
    If \is_open
      GetReg a0,&\timeindex_hi_a    ;ReadEClock
      GetReg d0,\timer_base
      MOVE.l a6,-(a7)
      MOVE.l d0,a6
      JSR -60(a6)
      MOVE.l (a7)+,a6
      MOVE.l d0,-4(a0)
      If scaler>0 Then \scaler=scaler
      \timeindex_lo_b = \timeindex_lo_a
      \timeindex_hi_b = \timeindex_hi_a
    Else
      error {"Tried to read eclock while timer.device closed !"}
    End If
  End Statement
End Object


Object ticks_close
  Statement ticks_close {}
  SHARED eclock_ticks
    If \timer_base Then CloseDevice_ (\msg)       :\timer_base = False
    If \msg        Then DeleteIORequest_ (\msg)   :\msg        = False
    If \msgport    Then DeleteMsgPort_ (\msgport) :\msgport    = False
    \is_open = False
  End Statement
End Object


Object ticks_open ;succ.w = ticks_open {}
  Function.l ticks_open {@scaler.l}
  SHARED eclock_ticks
    succ.l = False
    \msgport = CreateMsgPort_()
    If  \msgport
      \msg = CreateIORequest_(\msgport,SizeOf.timerequest)
      If \msg
        If OpenDevice_ ("timer.device",#UNIT_WAITECLOCK,\msg,0) = False
          *TimerIO.timerequest = \msg
          *TimerIO\tr_node\io_Command = #TR_ADDREQUEST
          succ = True
          \is_open    = True
          \efreq_err  = 0
          *mp.MsgPort = \msgport
          \sigflag    = 1 LSL *mp\mp_SigBit
          \timer_base = *TimerIO\tr_node\io_Device
          ticks_set {scaler.l}
        Else
          error {"Unable to open timer.device !"}
        End If
      Else
        error {"Failed to create timerequest !"}
      End If
    Else
      error {"Failed to create msgport !"}
    End If
    If succ = False Then ticks_close {}
    Function Return succ
  End Function
End Object



Object ticks_read ; read the time diffrence to ticks_set or ticks_reset
Function.l ticks_read {}
SHARED eclock_ticks
  If \is_open
    GetReg a0,&\timeindex_hi_b    ;ReadEClock
    GetReg d0,\timer_base
    MOVE.l a6,-(a7)
    MOVE.l d0,a6
    JSR -60(a6)
    MOVE.l (a7)+,a6
    MOVE.l d0,-4(a0)
    time_lo.l = \timeindex_lo_b - \timeindex_lo_a
    time_hi.l = \timeindex_hi_b - \timeindex_hi_a

    x.l = time_lo ASR 8
    a.l = \scaler
    b.l = \efreq  ASR 8
    r1.l = x MOD b
    q1.l = x / b
    r2.l = a MOD b
    q2.l = a / b
    time.l = b*q1*q2 + q2*r1+q1*r2 + r1*r2/b

    ;If time_hi><0 Then time=0
  Else
    error {"Tried to read eclock while timer.device closed !"}
    time=0
  End If
  Function Return time
End Function
End Object


Object ticks_read_reset ; read the time diffrence to last call
Function.l FAST ticks_read_reset {}
SHARED eclock_ticks
  If \is_open
    GetReg a0,&\timeindex_hi_b    ;ReadEClock
    GetReg d0,\timer_base
    MOVE.l a6,-(a7)
    MOVE.l d0,a6
    JSR -60(a6)
    MOVE.l (a7)+,a6
    MOVE.l d0,-4(a0)
    time_lo.l = \timeindex_lo_b - \timeindex_lo_a
    time_hi.l = \timeindex_hi_b - \timeindex_hi_a

    \timeindex_lo_a = \timeindex_lo_b
    \timeindex_hi_a = \timeindex_hi_b

    x.l = time_lo ASR 8
    a.l = \scaler
    b.l = \efreq  ASR 8
    r1.l = x MOD b
    q1.l = x / b
    r2.l = a MOD b
    q2.l = a / b
    time.l = b*q1*q2 + q2*r1+q1*r2 + r1*r2/b

    ;If time_hi><0 Then time=0
  Else
    error {"Tried to read eclock while timer.device closed !"}
    time=0
  End If
  Function Return time
End Function
End Object



Object ticks_reset ; reset the time to the last call of ticks_read
Statement FAST ticks_reset {}
SHARED eclock_ticks
  \timeindex_lo_a = \timeindex_lo_b
  \timeindex_hi_a = \timeindex_hi_b
End Statement
End Object


;***************************************************
;*                                                 *
;* HERE DOES THE ACTUAL BENCHMARK START !!!        *
;*                                                 *
;***************************************************
CNIF #ownrun

Macro bench_var
  a`1.`1 = 1000
  b`1.`1 = 1000
  c`1.`1 = 1000
  d`1.`1 = 1000
  ticks_reset{}
  For n.l=0 To #benchloopsize
    a`1 = b`1*d`1 + c`1
    b`1 = (a`1 - c`1) / d`1
  Next
  time.l = ticks_read {}
  NPrint ".`1 needed ",time," ms"
End Macro


#benchloopsize = 1000000

If ticks_open {1000}

  !bench_var {b} ; Bench the Byte...
  !bench_var {w} ; Word ...
  !bench_var {l} ; Long Word ...
  !bench_var {q} ; Quick
  !bench_var {f} ; Float
  !bench_var {d} ; and double ...

  error {"End Of Bench !"}
  ticks_close{}
End If
End
CEND
