; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "dbl_shooter2"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 7
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 1
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = "image"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
OPTIMIZE 5
SYNTAX 6

WBStartup

RunErrsOff

;#flip_viewport  = 0   ; use ScrollVP()
;#flip_bltbmap   = 1   ; blit bitmaps via BltBmapRastPort()
;#flip_none      = 2   ; no dbl
;#flip_smart     = 3   ; use seletive blit bia BltBmapRastPort and Queue()  #refresh_mode=0 only!
;#flip_bmap      = 4   ; use ChangeVPBitMap()
;#flip_scrbuff   = 5   ; use ChangeScreenBuffer()

;#refresh_object = 0   ; refresh objectwise
;#refresh_full   = 1   ; refresh always complete screen

; dbl_include settings
#refresh_mode   = 0  ; 0 1
#flip_mode      = 5   ; 0 1 2 3 4 5
#use_screenhack = 0   ; 0 1

;#use_cpublit = 1
XINCLUDE "dbl_display.include.ab3"
XINCLUDE "ahi.include.ab3"
XINCLUDE "intuition.include.ab3"

LastRunErrsMode

NEWTYPE.ball
  x.f
  y.f
  xs.f
  ys.f
End NEWTYPE

Dim List ball.ball(0)
ballcounter.l  = 0
message.s      = ""
succ.l         = False
balltyp.l      = 3
breakme.l      = False
scrl.l         = False

Statement newmessage {}
SHARED ball(),ballcounter,message.s,balltyp,ballsize.l,ballshot.l
  Format ""
  b.s = "Screen: "+Str$(dbl_GetWidth{})+"x"+Str$(dbl_GetHeight{})+"x"+Str$(dbl_GetDepth{})+" "
  a.s = Str$(image_GetWidth{balltyp})+"x"+Str$(image_GetHeight{balltyp})
  message.s = b.s + "balls: "+Str$(ballcounter)+" / size: "+a.s+" / fps: "
End Statement

Statement ball_add {}
SHARED ball(),ballcounter,message.s,balltyp,width.l,height.l
  If AddItem(ball())
    ball()\x=Rnd(width),Rnd(height),(Rnd-.5)*5,(Rnd-.5)*5
    ballcounter+1
  End If
  newmessage {}
End Statement

Statement ball_remove {}
SHARED ball(),ballcounter,message.s,balltyp
  ResetList ball()
  If NextItemFast(ball())
    KillItem ball():ballcounter-1
  End If
  newmessage {}
End Statement

.initall
gfxpath.s = "/Data/" ; set your path here, including "/" !
sfxpath.s = "/Data/"
ret.l=ahi_OpenDevice {0}
ret=ret & ahi_LoadSound {0,sfxpath.s + "hit"}
ret=ret & ahi_LoadSound {1,sfxpath.s + "shot"}
ret=ret & ahi_LoadSound {2,sfxpath.s + "reload"}
ret=ret & ahi_LoadSound {3,sfxpath.s + "noammo"}

If dbl_Init {"MyGame",#dbl_scr_BestModeID,640,480,16}
  width.l  = dbl_GetWidth{}
  height.l = dbl_GetHeight{}

  dbl_SetPenRGB {0,0}                  ; set pen 1 so that we can see error messages
  dbl_SetPenRGB {1,$FF0000}
  dbl_SetPenRGB {2,$FFFFFF}
  If image_Load {1,gfxpath.s+"pattern"}
    image_SetDitherMode {1,0}

    succ=image_Load {2,gfxpath.s+"ball64x64",0}  : image_MidHandle {2}
    succ&image_Load {3,gfxpath.s+"ball32x32",0}  : image_MidHandle {3}
    succ&image_Load {4,gfxpath.s+"ball16x16",0}  : image_MidHandle {4}
    succ&image_Load {5,gfxpath.s+"target",$FF00FF}:image_MidHandle {5}

    ball_add {} : ball_add {} : ball_add {}

    intui_FlushEvents{}

    If succ
      magazine.l = 5
     ; dbl_SetFPS {#dbl_fps_monitor}
     ; dbl_SetFPS {71.2}  ;set a maximum framerate of x fps
     ; dbl_SetFPS {#dbl_fps_vbeam}
     dbl_SetFPS {#dbl_fps_free}

     newmessage {}
     dbl_Reset{}
     dbl_BGBlitPattern{1,0,0,width,height}   ; blit the background pattern in window

.messageloop_start
    While breakme=False

        shot.l=False
        Repeat
          ev.l = intui_GetEvent{}
          Select ev
            Case #IDCMP_MOUSEBUTTONS
              If !event_click
                If !event_mb=1
                   If fireval.l<magazine
                    fireval.l+1
                    ahi_PlaySound {1} ; shot !
                    shot=True
                  Else
                    ahi_PlaySound {3} ; no ammo!
                  End If
                Else

                  If fireval
                    fireval=0
                    ahi_PlaySound {2} ; reload !
                  End If
                End If
              End If

            Case #IDCMP_RAWKEY
              If !event_keydown
                Select !event_vanillakey
                  Case 27
                    breakme = True
                  Case @"a"
                    ball_add{}
                  Case @"r"
                    ball_remove{}
                  Case @"s"
                    scrl=1-scrl
                    sxv.f= Rnd*2 * Sgn(Rnd-.5):syv.f=Rnd*2 * Sgn(Rnd-.5)
                  Case @"c"
                    balltyp+1:If balltyp=5 Then balltyp=2
                    newmessage {}
                  Case @"m"
                    If imagedat(2)\mask_ptr
                      image_FreeMask{2}
                      image_FreeMask{3}
                      image_FreeMask{4}
                    Else
                      image_InitMask{2,0}
                      image_InitMask{3,0}
                      image_InitMask{4,0}
                    End If
                End Select
              End If
          End Select
        Until ev=0
        dbl_QBlit {5,!event_mx,!event_my}
        dbl_Flip{}           ; flip the doublebuffer !
        framecorrect.f = dbl_GetFrameTime{50}
        If framecorrect<0.25 Then framecorrect=0.25
        If framecorrect>2 Then framecorrect=2

        dbl_Unqueue{}        ; unblit all objects drawn with "dbl_q???" commands

        If scrl
          new_xoff.f - sxv.f * framecorrect.f
          new_yoff.f - syv.f * framecorrect
          dxi.l = Int(new_xoff) - old_xoff.l
          dyi.l = Int(new_yoff) - old_yoff.l
          old_xoff.l + dxi
          old_yoff.l + dyi
          dbl_BGScroll{dxi,dyi}
          If dxi<0
            dbl_BGBlitPattern{1,0,0,-dxi,height,-old_xoff,-old_yoff}
          Else
            dbl_BGBlitPattern{1,width-1-dxi,0,dxi,height,-old_xoff,-old_yoff}
          End If
           If dyi<0
            dbl_BGBlitPattern{1,0,0,width,-dyi,-old_xoff,-old_yoff}
          Else
            dbl_BGBlitPattern{1,0,height-1-dyi,width,dyi,-old_xoff,-old_yoff}
          End If
        End If

        If shot  ; check for hit with mouseclick
          ResetList ball()
          While NextItemFast(ball())
            If dbl_2ImgHit {balltyp,ball()\x,ball()\y,@@
               -1,SMouseX,SMouseY}  ;@@ mean join next line to term
               KillItem ball():ballcounter-1
               ballshot+1
               ahi_PlaySound {0}
            End If
          Wend
        End If

        ResetList ball() ; draw balls
        While NextItemFast(ball())
          ball()\x+ball()\xs*framecorrect
          ball()\y+ball()\ys*framecorrect
          If ball()\x<0 OR ball()\x>width  Then ball()\xs=-ball()\xs
          If ball()\y<0 OR ball()\y>height Then ball()\ys=-ball()\ys
          dbl_QBlit {balltyp,ball()\x,ball()\y}     ;draw balls
        Wend


        fps.f =  dbl_GetFPS{1000}

        Format "##0.0"
        a.s  = Str$(fps)
        Format ""
        dbl_QPrint {message.s+a.s+" Score "+Str$(ballshot),10,10,2}  ; Print a text for 1 frame
        dbl_QPrint {"ESC=exit  (a)dd / (r)emove ball  (c)hange  (m)ask  (s)croll LMB=shoot RMB=reload",10,height-16,2}

      Wend
    End If
  End If
End If
End



