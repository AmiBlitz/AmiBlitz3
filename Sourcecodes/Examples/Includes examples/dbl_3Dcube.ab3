; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "//Bin"
; ExeFile         = "dbl_3dcube2"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 23
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 11
; LabelSearch     = ""
; LabelRemark     = 140
; LabelAll        = 5
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
OPTIMIZE 5  ; we could optimize for fpu if we want (7)
SYNTAX 6    ; not really needed, but always a good choice!

WBStartup

RunErrsOff
XINCLUDE "dbl_display.include.ab3"  ; include the important stuff!
XINCLUDE "intuition.include.ab3"
XINCLUDE "perlin.include.ab3"
XINCLUDE "image_ext.include.ab3"
LastRunErrsMode

; Our cube newtype !
NEWTYPE.coo
  x.f:y.f:z.f  ; fix 3D coordinates
  rx.f:ry.f    ; 2D coos after rotation
End NEWTYPE
!setfpcr {8}

; this macro rotates the coordinates x,y,z with the angles a,b,c,
; and writes the result in rx,ry,rz
Macro D3_rotate ; {x.f,y.f,z.f,a.f,b.f,c.f,*rx.f,*ry.f,*rz.f}
  `9 =  (`2)*Sin(`4) + (`3)*Cos(`4)
  `8 =  (`2)*Cos(`4) - (`3)*Sin(`4)
  `7 =  (`1)*Cos(`5) + (`9)*Sin(`5)
  D3px.f  = `7
  `7 =  (`7)*Cos(`6) - (`8)*Sin(`6)
  `8 =  (`8)*Cos(`6) + D3px*Sin(`6)
  `9 = -(`1)*Sin(`5) + (`9)*Cos(`5)
End Macro

; this macro projects x,y,z to x2d,y2d
; distance is the z-distance to the camera
; zoom zoom the whole thing bigger
; widthmid and heighmid add an offset to the result, to position the object
; in the middle of the screen
Macro D3_project ; {x.f,y.f,z.f,distance.f,zoom.f,widthmid.f,heightmid.f,x2d.f,y2d.f}
  `8 = `1/(`3 + `4) * `5 + `6
  `9 = `2/(`3 + `4) * `5 + `7
End Macro

; define the 3D cube object
Dim cube.coo(8)
cube(0)\x = -1,-1,-1
cube(1)\x =  1,-1,-1
cube(2)\x =  1, 1,-1
cube(3)\x = -1, 1,-1
cube(4)\x = -1,-1, 1
cube(5)\x =  1,-1, 1
cube(6)\x =  1, 1, 1
cube(7)\x = -1, 1, 1

a.f = 0:b.f = 0: c.f = 0
distance.f = 20     ; the distance from camera, must be > 2
cubesize.f = 1000 ; size of the cube

#max_stars = 100  ; number of background stars
Dim starx.f(#max_stars)
Dim stary.f(#max_stars)
Dim starz.f(#max_stars)

For n.l=0 To #max_stars   ; init the stars
  starx(n) = Rnd * 64000 - 32000
  stary(n) = Rnd * 48000 - 24000
  starz(n) = Rnd * 1000
Next

; load graphics (image 0 is reserved by dbl_display!)
succ.l = image_Load {1,"/Data/test.iff"}
succ.l & image_Load {3,"/Data/shiptexture.jpg"}

rec.Rectangle\MinX = 0,0,127,127
par.perlinPars\persistence = 0.6,.01,0.7,1.0,34,4,1
par\FGRGB = $FFFFFF,$332200
succ.l & image_PerlinNoise{4,rec,par}

bv.l = 1
DEFTYPE.texturearray tbcoo

; init screen (using bestmodeID for 640x480 True color)
succ   & dbl_Init {"MyGame",-1,640,480,16}
breakme.l = False
fast.l = 1
rota.l = 1
Format "##0.0"
If succ
  starcol.l = dbl_GetPen{180,150,200}
  textpen.l = dbl_GetPen{255,255,255}
 ; dbl_SetFPS{#dbl_fps_vbeam}
 ; dbl_SetFPS{#dbl_fps_vblank}
  dbl_SetFPS{#dbl_fps_free} ; dont limit the maximum FPS
  rec.Rectangle\MinX = 0,0,640,480
  par.perlinPars\persistence = 0.6,.01,1,1.0,50,7,1
  par\FGRGB = $44AA99,$000000

  perlin_RenderNoise2d{dbl\rp_bg,rec,par}
  ;dbl_BGBlitPattern{1,0,0,!dbl_GetWidth,!dbl_GetHeight}

  Repeat
    ; flip the doublebuffer (default is synced with 50Hz )!
    dbl_Flip{}

    ; unblit all objects drawn with "dbl_q???" functions
    dbl_Unqueue{}

    ; check events
    While intui_GetEvent{}
      Select !event_idcmp
        Case #IDCMP_RAWKEY
          If !event_keydown
            Select !event_vanillakey
              Case 27
                breakme = True
              Case @"r"
                rota = 1-rota
              Case @"q"
                If distance > 2 Then distance - 1
              Case @"w"
                distance+1
              Case @"x"
                fast.l=1-fast
              Case 27
                breakme = True
              Case @"l"
                If bv
                  bv = 0
                  brightness.l=-1
                Else
                  bv = 5
                  brightness.l=0
                End If
            End Select
          End If
        Case #IDCMP_MOUSEBUTTONS
          ;breakme = True
      End Select
    Wend

    If !intui_rawstatus{$4e} Then a+0.05
    If !intui_rawstatus{$4f} Then a-0.05
    If !intui_rawstatus{$4d} Then b+0.05
    If !intui_rawstatus{$4c} Then b-0.05
    If !intui_rawstatus{$50} Then c+0.05
    If !intui_rawstatus{$51} Then c-0.05

    ; move AND draw the stars
    SetAPen_ dbl\rp,starcol
    For n.l = 0 To #max_stars
      If starz(n)<10 Then starz(n) = 500
      sx.f = starx(n) / starz(n) + !dbl_GetWidth/2
      sy.f = stary(n) / starz(n) + !dbl_GetHeight/2
      starz(n)-4
      sx2.f = starx(n) / starz(n) + !dbl_GetWidth/2
      sy2.f = stary(n) / starz(n) + !dbl_GetHeight/2
      Move_ dbl\rp,sx,sy
      Draw_ dbl\rp,sx2,sy2
      ;Wline sx,sy,sx2,sy2,starcol
      If sx2<0 OR sy2<0 OR sx2>!dbl_GetWidth OR sy2>!dbl_GetHeight Then starz(n) = 500
    Next

    ; change the brightness
    If brightness>=0
      brightness.l+bv
      If brightness>555  Then bv.l = -10
      If brightness<80   Then bv.l = 10
    End If

    ; rotate around all angles
    If rota.l
      a-0.020 ; rotate x-axis
      b+0.025 ; rotate y-axis
      c+0.022 ; rotate z-axis
    End If

    ; calculate coordinates
    For n.l = 0 To 7
      !D3_rotate{cube(n)\x,cube(n)\y,cube(n)\z,a,b,c,x.f,y.f,z.f}
      !D3_project{x,y,z,distance,cubesize,!dbl_GetWidth/2,!dbl_GetHeight/2,cube(n)\rx,cube(n)\ry}
    Next

    ; draw the cube
    tbcoo\x1 = cube(0)\rx,cube(0)\ry,cube(1)\rx,cube(1)\ry,cube(2)\rx,cube(2)\ry,cube(3)\rx,cube(3)\ry
    image_TextureBlit {3,tbcoo,brightness,0,fast,dbl\rp}
    tbcoo\x1 = cube(7)\rx,cube(7)\ry,cube(6)\rx,cube(6)\ry,cube(5)\rx,cube(5)\ry,cube(4)\rx,cube(4)\ry
    image_TextureBlit {3,tbcoo,brightness,0,fast,dbl\rp }
    tbcoo\x1 = cube(1)\rx,cube(1)\ry,cube(5)\rx,cube(5)\ry,cube(6)\rx,cube(6)\ry,cube(2)\rx,cube(2)\ry
    image_TextureBlit {3,tbcoo,brightness,0,fast,dbl\rp }
    tbcoo\x1 = cube(4)\rx,cube(4)\ry,cube(0)\rx,cube(0)\ry,cube(3)\rx,cube(3)\ry,cube(7)\rx,cube(7)\ry
    image_TextureBlit {3,tbcoo,brightness,0,fast,dbl\rp }
    tbcoo\x1 = cube(4)\rx,cube(4)\ry,cube(5)\rx,cube(5)\ry,cube(1)\rx,cube(1)\ry,cube(0)\rx,cube(0)\ry
    image_TextureBlit {4,tbcoo,brightness,0,fast,dbl\rp }
    tbcoo\x1 = cube(3)\rx,cube(3)\ry,cube(2)\rx,cube(2)\ry,cube(6)\rx,cube(6)\ry,cube(7)\rx,cube(7)\ry
    image_TextureBlit {1,tbcoo,brightness,0,fast,dbl\rp }

    dbl_QDamage {0,0,639,479}     ; report the damaged area
    dbl_QPrint {"(q) size++ / (w) size-- / (x) toggle interpol / (l) toggle light",20,!dbl_GetHeight-30,textpen}
    dbl_QPrint {"(ARROW keys/F1+F2) rotate / (r) toggle rotation",20,!dbl_GetHeight-20,textpen}
    fps.f = dbl_GetFPS{1000}
    dbl_QPrint {"FPS: "+Str$(fps),20,20,textpen}
  Until breakme
End If

End



