; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "//bin"
; ExeFile         = "dbl_simple_09_playfield"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 11
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
OPTIMIZE 5
SYNTAX 6

WBStartup

XINCLUDE "dbl_display.include.ab3"

NEWTYPE.ball
  x.f:y.f:xs.f:ys.f
End NEWTYPE

Dim List ball.ball(0)
If AddItem(ball()) Then ball()\x = 30,200,1,-2
If AddItem(ball()) Then ball()\x = 30,200,2,-1
If AddItem(ball()) Then ball()\x = 30,200,1.5,-1.5

gfxpath.s = "/Data/"
succ.l = image_Load {2,gfxpath.s+"glass_big",$FF00FF,20}  : image_MidHandle {2}
succ   & image_Load {1,gfxpath.s+"pattern"}
 
succ   & dbl_Init {"MyGame",#dbl_scr_BestModeID,640,480,24}
If succ

  ; draw a background box
  dbl_BGBox24{$669988,10,10,630,470}

  ; fill first playfield with pattern
  dbl_SetPlayField {20,20,310,400}
  dbl_BGBlitPattern{1,0,0,!dbl_GetWidth,!dbl_GetHeight}    ; blit the background pattern in window

  ; fill second playfield with pattern
  dbl_SetPlayField {330,80,620,460}
  dbl_BGBlitPattern{1,0,0,!dbl_GetWidth,!dbl_GetHeight}    ; blit the background pattern in window


  Repeat
    ; remove playfield definition, because we want dbl_flip to
    ; swap full screen, not only one playfild!
    dbl_RemPlayField {}

    dbl_Flip{}
    dbl_Unqueue{}

    ; move balls
    ResetList ball()
    While NextItemFast(ball())
      ball()\ys + 0.1
      ball()\x+ball()\xs
      ball()\y+ball()\ys
      If ball()\x<10 OR ball()\x>!dbl_GetWidth/2-30  Then ball()\xs=-ball()\xs : ball()\x+ball()\xs
      If ball()\y<10 OR ball()\y>!dbl_GetHeight-90   Then ball()\ys=-ball()\ys : ball()\y+ball()\ys
    Wend


    ; get direction for wired scrolling
    rx.f + 0.003
    sxv.l = Sin(rx) * 2
    syv.l = Cos(rx) * 2
    scroll_x.l - sxv
    scroll_y.l - syv


    ; set the first playfield!
    ; all coos are now relative to this playfield!
    dbl_SetPlayField {20,20,310,400}

    ; draw the balls
    ResetList ball()
    While NextItemFast(ball())
      dbl_QBlit {2,ball()\x,ball()\y}
    Wend

    ; do some impressive scrolling
    dbl_BGScroll {sxv,syv,False}

    ; fill scrolled-in areas
    If sxv<0
      dbl_BGBlitPattern{1,0,0,-sxv,!dbl_GetPFHeight,scroll_x,scroll_y,False}
    Else
      dbl_BGBlitPattern{1,!dbl_GetPFWidth-sxv,0,sxv,!dbl_GetPFHeight,scroll_x,scroll_y,False}
    End If
    If syv<0
      dbl_BGBlitPattern{1,0,0,!dbl_GetPFWidth,-syv,scroll_x,scroll_y,False}
    Else
      dbl_BGBlitPattern{1,0,!dbl_GetPFHeight-syv,!dbl_GetPFWidth,syv,scroll_x,scroll_y,False}
    End If


    ; set the second playfield,
    ; all coos are now relative to this playfield!
    dbl_SetPlayField {330,80,620,460}

    ; draw the same balls again
    ResetList ball()
    While NextItemFast(ball())
      dbl_QBlit {2,ball()\x,ball()\y}
    Wend

    ; invert the scrolling directions
    sxv=-sxv
    syv=-syv
    scroll_x2.l - sxv
    scroll_y2.l - syv

    ; do scrolling
    dbl_BGScroll {sxv,syv,False}

    ; fill scrolled-in areas
    If sxv<0
      dbl_BGBlitPattern{1,0,0,-sxv,!dbl_GetPFHeight,scroll_x2,scroll_y2,False}
    Else
      dbl_BGBlitPattern{1,!dbl_GetPFWidth-sxv,0,sxv,!dbl_GetPFHeight,scroll_x2,scroll_y2,False}
    End If
    If syv<0
      dbl_BGBlitPattern{1,0,0,!dbl_GetPFWidth,-syv,scroll_x2,scroll_y2,False}
    Else
      dbl_BGBlitPattern{1,0,!dbl_GetPFHeight-syv,!dbl_GetPFWidth,syv,scroll_x2,scroll_y2,False}
    End If

  Until Event=#IDCMP_MOUSEBUTTONS
End If
End



