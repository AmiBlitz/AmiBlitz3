; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = ""
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 16
; CursorColumn    = 24
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; Max ChunkyBuffer= 2
; /XTRA
; 2B3D Demo 1
; 
; This little demo shows few 3d objects spinning around. Letter A is an example
; of a one sided polygon. It will not be rendered if the polygon's back is
; facing a viewer. It is useful with concave objects (like presented cube and
; pyramid) where some of the polygons, ones facing away, can be removed.
; 
; Letter T is an example of an object made up of two sided polygons. polygons
; will be rendered no matter which way they are facing.
; 
; Cube and a pyramid are both made up of one sided polygons. The scene uses
; default light source created at 3d world initiation. Light source can be
; changed using CreateLightSource(), but I found this setting to be most
; effective visually.

INCLUDE "gorny.include.ab3"

LoadFont 0,"topaz.font",8       ;IT ALLOWS MORE INFO IN LESS SPACE

PLGLoadObject{"pyramid.plg",1}    ;LOAD OBJECTS FROM DISK...
PositionObject{110,70,750}        ;...AND POSITION THEM IN 3D SAPCE

PLGLoadObject{"cube.plg",1}       ; ...
PositionObject{-150,-100,750}     ;

PLGLoadObject{"LetterA.plg",1}    ;     ...
PositionObject{-60,0,900}         ;

PLGLoadObject{"letterT.plg",1}    ;
PositionObject{60,0,900}          ;          ...

For k=-500 To 500 Step 55         ;THIS PROVIDES A LOT OF WORK FOR
  PLGLoadObject{"ground.plg",1}   ;THE SYSTEM AND THUS IT SLOWS DOWN A LOT
  PositionObject{k,-150,400}      ;ORIGINALLY THIS DEMO HAD NO GROUND, BUT
Next k                            ;LOOKED SO GOOD I DECIDED TO LEAVE IT IN.


;PREPARE MENU

MenuTitle 0,0,"About"
  MenuItem 0,0,0,0,"Control "
  MenuItem 0,0,0,1,"Author  "
  MenuItem 0,0,0,2,"Quit "

;PREPARE SCREEN

Screen 0,0,0,320,200,5,0,"",1,2
Window 0,0,0,320,200,6144,"",1,2
SetMenu 0
Use IntuiFont 0

BitMap 0,640,200,5
BitMap 1,640,200,5

db.b=0
done.b=False

Use BitMap db
BitMapOutput db
Cls 0

;FIX SCREENS PALETTE SO IT CONTAINS 16 SHADES OF TWO
;DIFFERENT COLROS, REDDISH REGISTERS 0-15, AND BLUES AT REGISTERS 16-31

c1.rgbtype\r=0,0,0
c2.rgbtype\r=15,8,0
TouchPalette{0,15,c1,c2}

c1.rgbtype\r=2,0,0
c2.rgbtype\r=0,8,15
TouchPalette{16,31,c1,c2}

Display3D{320,200,300}            ;MUST BE CALLED BEFORE ANY 3D OPERATIONS

Frustum{500,3000}                 ;CHANGE SOME SETTINGS
ClipMode{#ZPLANE}                 ;EITHER #FRUSTUM OR #ZPLANE
AmbientLight{2}                   ;ANYWHERE BETWEEN 0 AND 15

anglex.w=0                        ;INITIAL VIEWING ANGLES
angley.w=0
anglez.w=0
speed=10

BitMaptoWindow db,0

Repeat                            ;MAIN LOOP
  ev.l=Event
  If ev=$400;keypress             ;CHECK FOR KEYBOARD ACTIVITY...
    keypress.s=Inkey$             ;...AND RESPOND
    Print Hex$(RawKey)
    Select RawKey
      Case $45 ;ESC
        done=True
      Case $4c ;up
        MoveForward{speed}
      Case $4d ;down
        MoveForward{-speed}
      Case $4f ;left
        angley-speed:If angley<0 Then angley=360
        ViewAngle{anglex, angley, anglez}
      Case $4e ;right
        angley+speed:If angley>360 Then angley=0
        ViewAngle{anglex, angley, anglez}
      Case $01 ;"1"
        speed-5:If speed<5 Then speed=5
      Case $02 ;"2"
        speed+5
      Case $10 ;"Q"
        MoveUp{speed}
      Case $20 ;"A"
        MoveDown{speed}
    End Select
  EndIf

If ev=$100 ;menu
  Select ItemHit
    Case 0
      Window 1,20,20,180,120,4106," 2B3D HELP ",1,2
      WColour 8,0
      NPrint ""
      NPrint " Use arrow keys to move"
      NPrint " forward, back, and turns:"
      NPrint ""
      NPrint " LEFT, RIGHT, UP, and DOWN"
      NPrint ""
      NPrint ""
      NPrint " '1' LOOSE SPEED"
      NPrint " '2' SPEED UP"
      NPrint " 'Q' GO UP"
      NPrint " 'A' GO DOWN"
      NPrint " ESC TO QUIT"
      NPrint ""
      Repeat: av.l=WaitEvent:Until av=512
      Free Window 1:Use Window 0
    Case 1
      Window 2,20,20,165,100,4106,"",1,2
      WColour 8,0
      NPrint ""
      NPrint "           2B3D"
      NPrint ""
      NPrint "        Version 0.9"
      NPrint ""
      NPrint " 3D GRAPHICS MINI-LIBRARY"
      NPrint "    FOR BLITZ BASIC II"
      NPrint ""
      NPrint "       Maciej Gorny"
      NPrint "  gorny@elvis.rowan.edu"
      Repeat: cv.l=WaitEvent:Until cv=512
      Free Window 2:Use Window 0
    Case 2
      done=True
  End Select
EndIf

    NewView{}                  ;VIEW COULD HAVE POSSIBLY CHANGED
                               ;SO RECALCULATE

    ResetList OBJECTS()
    While NextItem(OBJECTS())                          ;ROTATE OBJECTS
      If OBJECTS()\id=1 Then RotateObject{6,4,0,0}
      If OBJECTS()\id=2 Then RotateObject{1,5,0,0}
      If OBJECTS()\id=3 Then RotateObject{0,8,0,0}
      If OBJECTS()\id=4 Then RotateObject{8,0,0,0}
    Wend

    db=1-db                    ;SWITCH BITMAPS
    Use BitMap db
    Cls 0
    BitMapOutput db

    PaintFrame{}               ;RENDER NEW VIEW TO A CURRENT BITMAP

    Colour 7,1
    Locate 4,2:Print "Blitz Basic II 3D Graphics MiniLib"
    Locate 9,24:Print "Viewer (x,y,z) ",CameraX{},";",CameraY{},";",CameraZ{}


    BitMaptoWindow db,0        ;DISPLAY RESULTS IN A WINDOW
Until done                     ;LOOP ENDLESSLY UNTIL BORED....
End














