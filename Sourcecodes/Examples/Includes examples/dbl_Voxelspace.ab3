; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "//Bin"
; ExeFile         = "dbl_VoxelSpace"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 486
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = "rp_map"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
; --
; -- simple voxel demo made for AmiBlitz3
; --
; -- there are no optimations made,
; -- just the FPU has been activated !
; --
OPTIMIZE 5
SYNTAX 6

XINCLUDE "dbl_display.include.ab3"
XINCLUDE "eclock.include.ab3"
XINCLUDE "intuition.include.ab3"
XINCLUDE "perlin.include.ab3"
XINCLUDE "image_ext.include.ab3"

; -- dimensions of the voxelspace & the display
#gXd = 256
#gYd = 256
#display_width = 640
#display_height= 480

; -- some variables
DEFTYPE.w blickhoehe
DEFTYPE.d blickwinkel
DEFTYPE.w blickwinkel_grad
SHARED show_fog.b,show_map.b,voxelmode.b,resolution.b
SHARED grwh.w: grwh = #gXd/2
SHARED grhh.w: grhh = #gYd/2
SHARED px.d,pz.d



; -- shows the map and the current position
Statement update_map{x.w,y.w}
SHARED blickwinkel
  If show_map
    If Peek.l(Addr Window(2)) = 0
      Window 2,ScreenWidth-256,0,256,256,#WFLG_CLOSEGADGET,"Texturemap",0,1
      Move_ RastPort(2),#gXd/2,#gYd/2
      image_Blit{2,0,0}
    EndIf
    *rp_map.RastPort = RastPort(2)
    image_Blit{2,0,0,*rp_map}  ; <-- uebles Vorgehen ! komplette Map neu blitten, um Position zu loeschen ...
    SetDrMd_ *rp_map,0
    SetAPen_ *rp_map,2
    SetBPen_ *rp_map,1

    a1.w = grwh - x - Sin(blickwinkel)*4
    b1.w = grwh - y - Cos(blickwinkel)*4
    c1.w = grwh - x + Sin(blickwinkel)*4
    d1.w = grwh - y + Cos(blickwinkel)*4
    Move_ *rp_map,c1,d1
    Draw_ *rp_map,a1,b1
    o1.w = grwh - x - Sin(blickwinkel-Pi/2)*6
    o2.w = grwh - y - Cos(blickwinkel-Pi/2)*6
    Draw_ *rp_map,o1,o2

  Else
    If Peek.l(Addr Window(2))<>0 Then CloseWindow 2
  EndIf
End Statement

; -- very simple voxel routine
Function voxel_show{winkel.d,hoehe.w}
  scale_x.d = (dbl_GetWidth{}/#gXd)
  scale_y.d = (dbl_GetHeight{}/#gYd)
  tile.d = resolution * scale_x
  For i.w = -grwh To grwh-1 Step resolution
    row.w = #gYd + 1
    grwh_mi.d = (grwh - i) * scale_x
    rayx.d = px
    rayz.d = pz
    stepx.d = Sin(winkel + 0.00125 * i)
    stepz.d = Cos(winkel + 0.00125 * i)

    count.d = 1
    While count < 200 ; sichtweite
      rayx.d = rayx + stepx
      rayz.d = rayz + stepz
      If rayx>-grwh AND rayx<grwh
        If rayz>-grhh AND rayz<grhh
          c.w = image_GetRGB{1,rayx + grwh,rayz + grhh} AND $FF
          h.d = ((24000.0 - hoehe*100)/count) - ((0.15*hoehe+30)*c)/count
          If h < row
            ; -- display either water or landscape
            If c < 40
              co.l = $009DD0
            Else
              co = image_GetRGB{2,rayx+grwh,rayz+grhh}
              If show_fog = On Then co = (co AND $FFFF) OR Xor(c,$FF)
            EndIf
            ; -- paint vertical voxel
            x.d = grwh_mi
            If x>=0 AND x<=dbl_GetWidth{} AND h>=0 AND (row-1)<=#gYd
              h2.d = h * scale_y
              h3.d = (row-1) * scale_y
              Select voxelmode
              Case 1 : resolution = 4 : dbl_QLine24{co,x,h2,x + tile,h3}
              Case 2 : resolution = 4 : dbl_QLine24{co,x,h2,x+tile,h2}
              Case 3 : resolution = 2
                       For y.f = h To row-1
                         dbl_QPlot24{co,x,y*scale_y}
                       Next y
              Case 4 : resolution = 2 : dbl_QPlot24{co,x,h3}
              Case 5 : resolution = 4 : dbl_QBox24{co,x,h2,x + tile,h3}
              End Select
            EndIf
            row = h
          EndIf
        EndIf
      EndIf
      count + 1
    Wend
  Next
End Function







; -- MAINPROGRAM ------------------------------------------------------------
.MAIN
WBStartup: NoCli : WbToScreen 0 : ScreenToFront_ Peek.l(Addr Screen(0))

voxelmode.b  = 5  ; Voxeldarstellungsmodus (Punkt, Line, Block)
resolution.b = 1  ; aufloesung des Space
show_map = Off    ; show the map window
show_fog = Off    ; some silly fog emulation
show_demo.b = On  ; automatic movement
blickhoehe = 32   ; flightlevel
px = 0            ; initial position (middle origin!)
pz = 0

; -- the following routine calculates the heightmap and texturemap
Gosub generate_datas


; -- open the doublebuffering-display
If NOT dbl_Init {"VoxelSpace",-1,#display_width,#display_height,16}
  error{"coult not initiate the double buffering area !"}
  End
EndIf

; -- set the background-color either for foggy or normal weather
If show_fog = On Then bgcolor.l = $000099 Else bgcolor.l = $223322
dbl_BGBox24{bgcolor,0,0,dbl_GetWidth{},dbl_GetHeight{}}
Activate 0
dbl_SetFPS{#dbl_fps_free} ; dont limit the maximum FPS
Repeat
  dbl_Flip{}      ; switch the doublebuffer
  dbl_Unqueue{}   ; delete all objects, drawn with dbl_q*-Functions

  mxs.d = 0 : ev.l = Event
  Select ev
  Case #IDCMP_MOUSEMOVE
   If SMouseX<>osmousex.w
     mxs.d = (((SMouseX-osmousex)/2)*Pi)/180.0
     osmousex = SMouseX
     FlushEvents
   EndIf

  Case #IDCMP_RAWKEY
    Select RawKey
    Case $4d ; down
      px = px - Sin(blickwinkel)
      pz = pz - Cos(blickwinkel)

    Case $4c ; up
      px = px + (Sin(blickwinkel)*2)
      pz = pz + (Cos(blickwinkel)*2)

    Case $4e : mxs.d = 0.025 ; -- cursor rechts
    Case $4f : mxs.d = -0.025 ; -- cursor links
    Case $45 : exit.b = True
    Case 34  : show_demo = - (1 - Abs(show_demo))
    Case 35  : show_fog = - (1 - Abs(show_fog))
               If show_fog = On Then bgcolor.l = $000099 Else bgcolor.l = $223322
               dbl_BGBox24{bgcolor,0,0,dbl_GetWidth{},dbl_GetHeight{}}
    Case 55  : show_map = - (1 - Abs(show_map))
    Case 1   : voxelmode = 1
    Case 2   : voxelmode = 2
    Case 3   : voxelmode = 3
    Case 4   : voxelmode = 4
    Case 5   : voxelmode = 5
    ;Default  : !cout{RawKey}
    End Select
    FlushEvents
  End Select

  ; -- calculate actual view
  If show_demo = On
    demo_counter.d = (demo_counter + 1) MOD 360
    demo_winkel.d = demo_counter * Pi/180
    blickwinkel = Sin(demo_winkel) - Cos(demo_winkel)
    px + (Sin(demo_winkel)/2 - Cos(demo_winkel))
    pz + (Cos(demo_winkel)/2 - Sin(demo_winkel))
  Else
    blickwinkel = (blickwinkel - mxs.d)
    blickhoehe = SMouseY
    If blickhoehe > 96 Then blickhoehe = 96
  EndIf
  blickwinkel_grad = (180*blickwinkel/Pi) MOD 360

  ; -- update displays
  voxel_show{blickwinkel, blickhoehe}
  update_map{px,pz}

  dbl_QPrint{"<d> Demo, <m> Karte, <f> Nebel",0,0,0}
  dbl_QPrint{"<1..5> Voxelmodus",0,10,0}
  ;dbl_QPrint{"x:" + Str$(Int(px)) + " z:" + Str$(Int(pz)) + " Richtung: "+Str$(blickwinkel_grad)+Chr$(176),0,20,2}
  fps.f = dbl_GetFPS{1000}
  dbl_QPrint {"FPS: "+Str$(fps),#display_width-64,0,0}
Until exit = True

ScreenToBack_ Peek.l(Addr Screen(0)) : CloseWindow 2 : !coutclose
End



; --
; -- generation of voxel and texture data
generate_datas:
  ; -- Erzeugen der Heightmap und der Texturekarte
  ; -- beide Karten sind im Augenblick identisch
  ; -- man kann aber auch ein Bild als Texturkarte verwenden
  ;!cout{"generating heightmap..."}
  rec.Rectangle\MinX = 0,0,255,255
  par.perlinPars\persistence = 0.4,.05,0.9,1.0,17,4,1
  par\FGRGB = $ffffff,$332200
  If NOT image_PerlinNoise{1,rec,par}
    error{"could not generate the heightmap!"}
  Else
    rp_heightmap.l = image_GetRPPtr{1}
  EndIf

  ;!cout{"generating terrain texture..."}
  ;rec.perlinRect\x1 = 0,0,255,255
  ;par.perlinPars\persistence = 0.6,.01,0.9,1.0,17,4,1
  par\FGRGB = $ffaaaa,$337721
  ;If NOT image_PerlinNoise{2,rec,par}
  If NOT image_Load{3,"/data/map/tile_grass.png"}
    error{"could not generate the texture!"}
  Else
    ; -- create temp image for scaling
    image_Create{2,#gXd,#gYd}
    *rp_map.RastPort = image_GetRPPtr{2}
    image_BlitScaled{3,0,0,#gXd,#gYd,*rp_map}
    image_Free{3}
  EndIf
Return
 

