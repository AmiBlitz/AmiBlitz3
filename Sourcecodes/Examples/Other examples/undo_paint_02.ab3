; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "UndoDemo2"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 4
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 115
; CursorColumn    = 24
; LabelSearch     = "und"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
; This is a rough example what the undo.include can do for you
SYNTAX 6
OPTIMIZE 7
#SID_DRAWLINE  = 1
#CID_DRAWPIXEL = 1
#PIXELSIZE = 10
#PALETTESIZE = 32
#MAXPENS = 4

XINCLUDE "undo.include.ab3"
XINCLUDE "intuition.include.ab3"

; inti screen and window
DefaultIDCMP #IDCMP_MOUSEMOVE|#IDCMP_MOUSEBUTTONS|#IDCMP_CLOSEWINDOW|#IDCMP_GADGETUP
WbToScreen 0
Window 0,0,0,320,200,$E,"Undo Example (draw something!)",0,1
*rp.RastPort = RastPort(0)
GTButton 0,0,0,0,100,#PALETTESIZE,"undo",$0
AttachGTList 0,0
quitme.l = False
acpen.l = 1
mousedraw.l = False

Statement draw_palette {acpen.l}
SHARED *rp
For pen.l = 0 To #MAXPENS-1
  If pen=acpen
    SetAPen_ *rp,3
  Else
    SetAPen_ *rp,1
  End If
  RectFill_ *rp,100+WLeftOff+pen*#PALETTESIZE,WTopOff,100+WLeftOff+(pen+1)*#PALETTESIZE-1,WTopOff+#PALETTESIZE
  SetAPen_ *rp,pen
  RectFill_ *rp,100+WLeftOff+pen*#PALETTESIZE+2,WTopOff+2,100+WLeftOff+(pen+1)*#PALETTESIZE-3,WTopOff+#PALETTESIZE-2
Next
End Statement

Statement draw_line {x1.l,y1.l,x2.l,y2.l,acpen.l}
SHARED *rp,*undo.undostack
mx.l = x1 / #PIXELSIZE
my.l = y1 / #PIXELSIZE
dx.l = x2 / #PIXELSIZE
dy.l = y2 / #PIXELSIZE

If dx<1 Then dx=1
If dx>=(WLeftOff+InnerWidth) / #PIXELSIZE Then dx=(WLeftOff+InnerWidth) / #PIXELSIZE -1
If dy<(WTopOff+#PALETTESIZE+#PIXELSIZE-1)/#PIXELSIZE Then dy=(WTopOff+#PALETTESIZE+#PIXELSIZE-1)/#PIXELSIZE
If dy>=(WTopOff+InnerHeight) / #PIXELSIZE Then dy=(WTopOff+InnerHeight) / #PIXELSIZE -1

If mx<1 Then mx=1
If mx>=(WLeftOff+InnerWidth) / #PIXELSIZE Then mx=(WLeftOff+InnerWidth) / #PIXELSIZE -1
If my<(WTopOff+#PALETTESIZE+#PIXELSIZE-1)/#PIXELSIZE Then my=(WTopOff+#PALETTESIZE+#PIXELSIZE-1)/#PIXELSIZE
If my>=(WTopOff+InnerHeight) / #PIXELSIZE Then my=(WTopOff+InnerHeight) / #PIXELSIZE -1


Repeat


  ; rescue the background:
  pixelpen.l = ReadPixel_ (*rp,mx*#PIXELSIZE,my*#PIXELSIZE)
  pixelcoos.l = (mx) | (my LSL 16)
  undo_Store {*undo,#CID_DRAWPIXEL,0,0,pixelpen,pixelcoos} ; store it as a container

  SetAPen_ *rp,acpen
  RectFill_ *rp,mx*#PIXELSIZE,my*#PIXELSIZE,(mx+1)*#PIXELSIZE-1,(my+1)*#PIXELSIZE-1

  change.l = 0
  If mx>dx Then mx-1 : change.l = -1
  If mx<dx Then mx+1 : change.l = -1
  If my>dy Then my-1 : change.l = -1
  If my<dy Then my+1 : change.l = -1
 

Until change=0
End Statement

draw_palette {acpen}

; create an undo stack with max 10 steps
*undo.undostack = undo_Create{10}

; go into main loop
Repeat
  idcmp.l = intui_WaitEvent{}
  Select idcmp
    Case #IDCMP_CLOSEWINDOW
      quitme = True

    Case #IDCMP_GADGETUP
      If !event_gadgethit = 0 ; hit our undo button
        If undo_GetNumSteps {*undo}>0
         While undo_GetContainer {*undo} ; as long as we find undo containers...
          Select undo_GetContainerID {*undo} ; check what container ID (we have only one!)
            Case #CID_DRAWPIXEL
              pixelpen.l  = undo_GetContainerUserData1{*undo}
              pixelcoos.l = undo_GetContainerUserData2{*undo}
              pixelx.l = pixelcoos AND $0000FFFF
              pixely.l = pixelcoos LSR 16
              SetAPen_ *rp,pixelpen
              RectFill_ *rp,pixelx*#PIXELSIZE,pixely*#PIXELSIZE,(pixelx+1)*#PIXELSIZE-1,(pixely+1)*#PIXELSIZE-1
          End Select
         Wend
        Else
          message {"No more undo steps available!"}
        End If
      End If

    Case #IDCMP_MOUSEBUTTONS
      If !event_release
        mousedraw = False
      End If

      If !event_click
        If (!event_mx>=WLeftOff) AND (!event_my>=WTopOff+#PALETTESIZE) AND (!event_mx<WLeftOff+InnerWidth) AND (!event_my<WTopOff+InnerHeight)
          undo_Start {*undo,#SID_DRAWLINE} ; start a new undo step on each click
          draw_line {!event_mx,!event_my,!event_mx,!event_my,acpen}
          mx.l = !event_mx
          my.l = !event_my
          mousedraw = True
        End If

        If (!event_my>WTopOff) AND (!event_my<WTopOff+#PALETTESIZE)
          acpen.l = (!event_mx-100-WLeftOff)/#PALETTESIZE
          If acpen<0 Then acpen=0
          If acpen>=#MAXPENS Then acpen=#MAXPENS-1
          draw_palette {acpen}
        End If
      End If

    Case #IDCMP_MOUSEMOVE
      If mousedraw AND !event_mbdown ; if mouse button is pressed
        If !event_mx/#PIXELSIZE ><mx/#PIXELSIZE OR !event_my/#PIXELSIZE><my/#PIXELSIZE
          draw_line {mx,my,!event_mx,!event_my,acpen}
          mx = !event_mx
          my = !event_my
        End If
      End If
  End Select
Until quitme
End

