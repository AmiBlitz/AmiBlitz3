; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "UndoDemo1"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 66
; CursorColumn    = 24
; LabelSearch     = "undo"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max ChunkyBuffer= 2
; /XTRA
; This is a rough example what the undo.include can do for you
SYNTAX 6
OPTIMIZE 7
#SID_DRAWLINE  = 1
#CID_DRAWPIXEL = 1

XINCLUDE "undo.include.ab3"
XINCLUDE "intuition.include.ab3"

; inti screen and window
DefaultIDCMP #IDCMP_MOUSEMOVE|#IDCMP_MOUSEBUTTONS|#IDCMP_CLOSEWINDOW|#IDCMP_GADGETUP
WbToScreen 0
Window 0,0,0,320,200,$E,"Undo Example (draw something!)",0,1
*rp.RastPort = RastPort(0)
GTButton 0,0,100,200-70,100,30,"undo",$0
AttachGTList 0,0
quitme.l = False
Stop
; create an undo stack with max 10 steps
*undo.undostack = undo_Create{10}

; go into main loop
Repeat
  idcmp.l = intui_WaitEvent{}
  Select idcmp
    Case #IDCMP_CLOSEWINDOW
      quitme = True

    Case #IDCMP_GADGETUP
      If !event_gadgethit = 0 ; hit our undo button
        If undo_GetNumSteps {*undo}>0
          While undo_GetContainer {*undo} ; as long as we find undo containers...
            Select undo_GetContainerID {*undo} ; check what container ID (we have only one!)
              Case #CID_DRAWPIXEL
                pixelpen.l  = undo_GetContainerUserData1{*undo}
                pixelcoos.l = undo_GetContainerUserData2{*undo}
                pixelx.l = pixelcoos AND $0000FFFF
                pixely.l = pixelcoos LSR 16
                SetAPen_ *rp,pixelpen
                WritePixel_ *rp,pixelx,pixely ; lets restore the pixel
            End Select
          Wend
        Else
          message {"No more undo steps available!"}
        End If
      End If

    Case #IDCMP_MOUSEBUTTONS
      If !event_click
        undo_Start {*undo,#SID_DRAWLINE} ; start a new undo step on each click
        mx.l = !event_mx
        my.l = !event_my
      End If

    Case #IDCMP_MOUSEMOVE
      If !event_mbdown ; if mouse button is pressed
        While mx><!event_mx OR my><!event_my
          If mx>!event_mx Then mx-1
          If mx<!event_mx Then mx+1
          If my>!event_my Then my-1
          If my<!event_my Then my+1

          ; rescue the background:
          pixelpen.l = ReadPixel_ (*rp,mx,my)
          pixelcoos.l = (mx) | (my LSL 16)
          undo_Store {*undo,#CID_DRAWPIXEL,0,0,pixelpen,pixelcoos} ; store it as a container

          SetAPen_ *rp,1
          WritePixel_ *rp,mx,my ; and draw a black pixel
        Wend
      End If
  End Select
Until quitme
End

