; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = ""
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 38
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 65535
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 44
; CursorColumn    = 52
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; Max BitMap      = 10
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
OPTIMIZE 5

Function.l MAKE_ID{a$, b$, c$, d$}

   result.l = Asc(a$) LSL 24
   result = result | (Asc(b$) LSL 16)
   result = result | (Asc(c$) LSL 8)
   result = result | Asc(d$)

   Function Return result
End Function

DEFTYPE.IFFHandle *iff
DEFTYPE.StoredProperty *sp;      /* defined in iffparse.h */
DEFTYPE.ContextNode *top
DEFTYPE.BitMapHeader *bmhd;      /* defined in IFF spec   */

*iff = AllocIFF_
*iff\iff_Stream = Open_("dh1:amiblitz3/sourcecodes/amiblitz3/ped/ped.wizard", #MODE_OLDFILE)
InitIFFasDOS_(*iff)

error.l = OpenIFF_(*iff, #IFFF_READ)
If NOT error

  *sp = FindProp_(*iff, MAKE_ID{"W","Z","R","D"}, MAKE_ID{"I","M","G","S"})
;  *sp = FindProp_(*iff, &"WZRD", &"FVER")
;  If *sp
    NPrint *sp\sp_Size
;  Else
;  EndIf

;  dummy.l = PropChunk_ (*iff, ID_ILBM, #ID_BMHD)
;  dummy.l = PropChunk_ (*iff, ID_ILBM, #ID_CMAP)
;  dummy.l = PropChunk_ (*iff, ID_ILBM, #ID_CAMG)
;  dummy.l = StopChunk_ (*iff, ID_ILBM, #ID_BODY)
  _type$= "    "
  id$ = "    "
  Repeat
    error = ParseIFF_ (*iff, #IFFPARSE_STEP)
    If error = 0
      *top = CurrentChunk_(*iff)
      IDtoStr_ *top\cn_Type,&_type$
      IDtoStr_ *top\cn_ID,&id$
      NPrint "Chunk-Type: ",_type$,", ID:",id$,",  Size: ",*top\cn_Size
    EndIf
  ; IFFERR_EOF    -1L /* Reached logical End of File  */
  ; IFFERR_EOC    -2L /* About To leave context */
  ; IFFERR_NOSCOPE    -3L /* No valid scope For property  */
  ; IFFERR_NOMEM    -4L /* Internal memory alloc failed */
  ; IFFERR_READ   -5L /* Stream Read error    */
  ; IFFERR_WRITE    -6L /* Stream write error   */
  ; IFFERR_SEEK   -7L /* Stream seek error    */
  ; IFFERR_MANGLED    -8L /* Data in File is corrupt  */
  ; IFFERR_SYNTAX   -9L /* IFF SYNTAX error   */
  ; IFFERR_NOTIFF   -10L  /* NOT an IFF File    */
  ; IFFERR_NOHOOK   -11L  /* No Call-back hook provided */
  ; IFF_RETURN2CLIENT -12L  /* Client handler normal return */
  Until error<>0

  Print "parse error (" + Str$(error) + ")"

  Select error
  Case #IFFERR_EOF
    NPrint ": end of file"
  Case #IFFERR_READ
    NPrint ": could not read stream"
  Default
    NPrint ""
  End Select

;If (bmhdprop = IIFFParse->FindProp (iff, ID_ILBM, ID_BMHD))
;  configurescreen (bmhdprop)
;Else
;  NPrint "No BMHD, no picture."
;EndIf
;
;If (cmapprop = IIFFParse->FindProp (iff, ID_ILBM, ID_CMAP))
;  setcolors (cmapprop)
;Else
;  usedefaultcolors ()
;EndIf
;
;If (camgprop = IIFFParse->FindProp (iff, ID_ILBM, ID_CAMG))
;  setdisplaymodes (camgprop)
;EndIf

  CloseIFF_ (*iff)
  Close_(*iff\iff_Stream)
  FreeIFF_ (*iff)
Else
   NPrint "error ", error
EndIf
End
