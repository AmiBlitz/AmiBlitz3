; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "dbl_VoxelSpace"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 1174
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = "look"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 100
; Max GadgetList  = 100
; Max Shape       = 200
; Max Bank        = 1
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 10
; Max Window      = 100
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
; --
; -- simple VoxelSpace-Demo conversion
; --
; -- inspired by VoxelSpace by Sebastian Macke
; -- github: https://github.com/s-macke/VoxelSpace/blob/master/VoxelSpace.htqqqqqqqqqqqqqqqqqqqqqq
OPTIMIZE 7 ; - FPU on strongly advised
SYNTAX 6

#display_width   = 224;320 ;640 ;1024
#display_height  = 160;ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss+256 ;480 ; 768
#display_depth   = 8
#display_bgcolor = $9090E0

NEWTYPE.input
  forwardbackward.q
  leftright.q
  updown.q
  lookup.q
  lookdown.q
End NEWTYPE

NEWTYPE.camera
  x.q
  y.q
  height.q
  angle.q
  horizon.q
  distance.w
End NEWTYPE

NEWTYPE.map
  posx.w
  posy.w
  scalefactor.q
  width.w
  height.w
  widthperiod.w
  heightperiod.w

  scalefx.q
  scalefy.q

  stepping.b
  shift.w
End NEWTYPE

DEFTYPE.b db
DEFTYPE.input _input
DEFTYPE.camera camera
camera\x = 512.0
camera\y = 800.0
camera\height = 96.0;78.0
camera\angle = 0.0
camera\horizon = 100.0
camera\distance = 800

DEFTYPE.map map
Dim altitude.b(1024*1024)       ; fix sized array to keep it simple
Dim color.l(1024*1024)
Dim hiddeny.l(#display_width)


Statement DrawVerticalLine{x.l, ytop.l, ybottom.l, color.l}
  SHARED map
  If ytop < 0 Then ytop = 0
  If ytop > ybottom Then Statement Return
  QAMIGA
  If map\stepping > 1
    Boxf x,ytop,x+map\stepping,ybottom,color
  Else
    Line x,ytop,x,ybottom,color
  EndIf
  BLITZ
End Statement

Macro DrawBackground
;  QAMIGA
  Cls 0
;  BLITZ
End Macro

Function DoubleBuffer{}
SHARED db
    VWait
    DisplayBitMap 0,db
    db = 1 - db
    Use BitMap db
    BitMapOutput db
    UnQueue db
End Function



Statement Render{}
  SHARED camera, map, altitude(), color(), hiddeny()

  sinang.q = Sin(camera\angle)
  cosang.q = Cos(camera\angle)

  ;-- reset hidden lines
  For x.l = 0 To #display_width
    hiddeny(x) = #display_height
  Next x

  ;-- draw from front to back
  deltaz.f = 1.0
  For z.q = 1 To camera\distance Step deltaz
    ;-- 90 degree field of view
    plx.q =  -cosang * z - sinang * z
    ply.q =   sinang * z - cosang * z
    prx.q =   cosang * z - sinang * z
    pry.q =  -sinang * z - cosang * z

    dx.q = (prx - plx) / (#display_width / map\stepping)
    dy.q = (pry - ply) / (#display_width / map\stepping);height)

    plx + camera\x
    ply + camera\y

    invz.f = 1.0 / z * 240.0

    For x = 0 To #display_width Step map\stepping

      mapoffset.l = ((Int(ply) AND map\heightperiod) LSL map\shift) + (Int(plx) & map\widthperiod)
      alt.w = altitude(mapoffset)
      color.l = color(mapoffset)

      heightonscreen.l = (camera\height - alt) * invz + camera\horizon
      DrawVerticalLine{x, heightonscreen, hiddeny(x), color}
      If (heightonscreen < hiddeny(x)) Then hiddeny(x) = heightonscreen

      plx + dx
      ply + dy
    Next x

    deltaz + 0.005

  Next z

End Statement

.MAIN
; -- MAINPROGRAM ------------------------------------------------------------
WBStartup : NoCli
; --
; -- alloc bitmaps for doublebuffering
; --
BitMap 0,#display_width,#display_height,#display_depth
BitMap 1,#display_width,#display_height,#display_depth

; --
; --  preload map datas
; --
Gosub generate_tables

; --
; -- open the display
; --
BLITZ
;InitCopList 0,$10000 + #display_depth
InitCopList 0,64,#display_height,$10000 + #display_depth,8,256,0
CreateDisplay 0
DisplayPalette 0,0
DisplayAdjust 0,-2,12,0,((320-#display_width) LSR 1)-16,-((320-#display_width) LSR 1)-16

Queue 0,15
Queue 1,15
Mouse On
BlitzKeys On
; --
; -- main loop
; --
oldtime.l = 0 : current.l  = 0 : timediff.q = 0.0 : oangle.q = 0 : db = 0
Repeat
  ; -----------------------------------------  draw landscape
  DoubleBuffer{}
  !DrawBackground
  Render{}

  ; -- draw border
  For x.w = 0 To #display_width-1
    Plot x,0,25
    Plot x,#display_height-1,25
  Next x
  For y.w = 0 To #display_height-1
   Plot 0,y,25
    Plot #display_width-1,y,25
  Next y

  ; -----------------------------------------  draw the map
  ;rot.q = (oangle - camera\angle) / (2*Pi) : Rotate 0, rot
  QBlit db,0,map\posx,map\posy
  posx.w = map\posx + Int(camera\x * map\scalefx * map\scalefactor)
  posy.w = map\posy + Int(camera\y * map\scalefy * map\scalefactor)
  Plot posx,posy,Rnd(16)

  ; ----------------------------------------- update camera
  oldtime = current
  current.l = Timer
  timediff = (current-oldtime) * 0.05
  If _input\forwardbackward<>0
    camera\x - _input\forwardbackward * Sin(camera\angle) * timediff
    camera\y - _input\forwardbackward * Cos(camera\angle) * timediff
  EndIf
  If _input\leftright<>0
    oangle = camera\angle
    camera\angle + _input\leftright * 0.1 * timediff
    If Abs(camera\angle) > 2 * Pi Then camera\angle = 0
  EndIf
  If _input\updown<>0 Then    camera\height + _input\updown * timediff
  If _input\lookup Then       camera\horizon + 2 * timediff
  If _input\lookdown Then     camera\horizon - 2 * timediff

  ; -- collision detection
  mapoffset.l = (Int(camera\y) AND (map\width-1)) LSL map\shift + (Int(camera\x) AND (map\height-1))
  If altitude(mapoffset) + 10.0 > camera\height
    camera\height = altitude(mapoffset) + 10.0
  EndIf

  ; -- sync with map on screen
  If camera\x < 0 Then camera\x = map\width-camera\x
  If camera\x > map\width Then camera\x = 0
  If camera\y < 0 Then camera\y = map\height-camera\y
  If camera\y > map\height Then camera\y = 0

  ; ----------------------------------------- event handler
  _input\leftright = -MouseXSpeed / (#display_width LSR 5)
  _input\updown = -MouseYSpeed / (#display_height LSR 5)
  ;camera\horizon = 100.0 + (MouseYSpeed / #display_height) * 96.0

  If Joyb(0) = 1 Then _input\forwardbackward = 2.0
  If Joyb(0) > 1 Then exit.b = True

  If RawStatus($4d) OR RawStatus($21) Then _input\forwardbackward + -3.0
  If RawStatus($4c) OR RawStatus($11) Then _input\forwardbackward + 3.0
  If RawStatus($4e) OR RawStatus($22) Then _input\leftright = -1
  If RawStatus($4f) OR RawStatus($20) Then _input\leftright = 1

  If RawStatus($12) Then _input\lookup = True           ; e
  If RawStatus($13) Then _input\updown = 2.0            ; r
  If RawStatus($23) Then _input\updown = -2.0           ; f
  If RawStatus($10) Then _input\lookdown = True         ; q

  If RawStatus($5e)                                     ; +
    map\stepping * 2
    If map\stepping > 8 Then map\stepping  = 8
  EndIf
  If RawStatus($4a)                                     ; -
    map\stepping / 2
    If map\stepping < 1 Then map\stepping  = 1
  EndIf

  If RawStatus($45) Then exit = True

  ; -- Key released
  ;Case $91: _input\forwardbackward = 0      ; up
  ;Case $A1: _input\forwardbackward = 0      ; down
  ;Case $A2: _input\leftright = 0            ; right
  ;Case $A0: _input\leftright = 0            ; left
  ;Case $92: _input\lookup = False           ; -- e
  ;Case $93: _input\updown = 0               ; -- r
  ;Case $A3: _input\updown = 0               ; -- f
  ;Case $90: _input\lookdown = False         ; -- q

  ; -- update display
  Colour 15
  Locate 1,1 : Print "Frames: ", 50/(current-oldtime)
  Locate 1,2 : Print "Resol.: ", map\stepping,"x",map\stepping
  ;dbl_QPrint{"x:" + Str$(Int(px)) + " z:" + Str$(Int(pz)) + " Richtung: "+Str$(blickwinkel_grad)+Chr$(176),0,20,2}
  ;fps.f = dbl_GetFPS{10}
  ;dbl_QPrint{"FPS: "+Str$(Int(fps)),#display_width-108,0,0}
  ;dbl_QPrint{"s: " + Str$(_input\forwardbackward),#display_width-108,12}
  ;dbl_QPrint{"h: " + Str$(camera\horizon),#display_width-108,26}
  ;dbl_QPrint{"a: " + Str$(camera\angle),#display_width-108,38}
  ;dbl_QPrint{"key: " + Hex$(RawKey),0,0,0}
Until exit = True
BlitzKeys Off
AMIGA
FlushEvents
Free BitMap 0
Free BitMap 1
Free Palette 0
Free Shape 0
End

;=======================================================================================
.generate_tables
  ; -- load the map / colormap
  BitMap 2,150,150,8 : LoadBitMap 2,"/data/map/C1W_low.iff",0
  BitMap 3,150,150,8 : LoadBitMap 3,"/data/map/D1_low.iff"

  map\width = 1024
  map\height = 1024
  map\widthperiod  = map\width - 1
  map\heightperiod = map\height - 1

  map\shift = 10    ; 1024
  map\stepping = 8  ; reduceable horizontal resolution

  map\scalefx = 150 / map\width * 1.0
  map\scalefy = 150 / map\height * 1.0

  w.w = 0 : h.w = 0
  For i.l = 0 To (map\width-1) * (map\height-1)
      h = i LSR map\shift
      ws.w = w * map\scalefx
      hs.w = h * map\scalefy
      Use BitMap 2 : color(i) = Point(ws,hs)
      Use BitMap 3 : altitude(i) = Point (ws,hs) AND $FF
      w + 1 : If w = map\width Then w = 0
  Next i
  ; --
  ; -- free temp bitmaps
  ; --
  Free BitMap 2
  Free BitMap 3

  ; --
  ; -- create the scaled map
  ; --
  map\scalefactor = 0.25
  Use BitMap 0
  For x.w = 1 To map\widthperiod
    For y.w = 1 To map\heightperiod
      offset.l = y LSL map\shift + x
      Plot (x * map\scalefx) * map\scalefactor, (y * map\scalefy) * map\scalefactor, color(offset)
    Next y
  Next x
  GetaShape 0,0,0,(map\widthperiod * map\scalefx) * map\scalefactor, (map\heightperiod * map\scalefy) * map\scalefactor
  Cls
  map\posx = #display_width - (1.0 * 150 * map\scalefactor) - 3
  map\posy = 3

Return


