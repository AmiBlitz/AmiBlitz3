; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Ram Disk:"
; ExeFile         = "wizard_test2"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 80
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 1
; InterruptCheck  = 0
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 32
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 5
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 5
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 20
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;-- simple demo how to use StormWizard GUI-files
;--
;-- set optimization flags (integer optimization and turn new syntax on)
OPTIMIZE 5
;--
;-- set new syntax mode 4 (variables must be declared before usage)
SYNTAX 4

;--
;-- include "error" for use of simple error{}-Requester
XINCLUDE "error.include.ab3"

;--
;-- add startupcode for wb programs - without that code the program will be compiled as an shell-program
;-- we do not want do any shell-output
WBStartup : NoCli

;--
;-- find current used screen
FindScreen(0)

;--
;-- open the window with ID "1".
;-- it will also open the surfaceData for us
;-- the GUI-file has to be included as a binary include (see end of source file)
WZWindow 1,?SurfaceData,250    ;surface for Window

;--
;-- show the wizard requester
WZ_LockWindow_ WZHandle
*win.Window = Peek.l(Addr Window(1))
args.l = 0
r.l = WZ_EasyRequestArgs_(WZSurface, *win, WZID("REQ_DEMO"), &args)
WZ_UnlockWindow_ WZHandle


;-- create a wizard-list object
;-- and add the found file entry names
If ChDir ("sys:")
  While MoreEntries
    WZListAdd lv1.List,EntryName$
  Wend
Else
  WZListAdd lv1.List,"<no entries found.>"
End If

;--
;-- attach the list to the listview
WZPrint "LISTVIEW1",1,lv1; before attaching a list you must create the liste via WZListAdd or you will get Enforcer Hits

;--
;-- detach the list before changing entries
WZPrint "LISTVIEW1",1,0

;--
;-- you can work with textstyles and colours of listentries by setting the proper tags before adding an entry
;-- in this demo we add an entry at position 0
WZTags #WENTRYA_TextStyle,#FSF_BOLD,#WENTRYA_TextPen,2
WZListAdd lv1.List,"Colour Text",0

;--
;-- you can remove and replace entries in this examples entry no. 15
WZListRemove lv1,15 : WZListAdd lv1,"entry #15",15

;--
;-- set the start entry and the optionally selected item
;-- in this case: select item number 2 and start display the list at item 0
WZPrint "LISTVIEW1",2,lv1,0

;--
;-- set toggle menu item to state On
WZMenuSet "MENU_TOGGLE",-1
;-- get the current toogle state
ret.l = WZMenuGet ("MENU_TOGGLE")
;-- print the state to window title
WTitle "toggle state of menu item: " + Str$(ret)

Repeat
  ev.l = WaitEvent : Use Window EventWindow
  WLocate 10,12 : Format "##############"

  Select EventWindow
  Case 1:               ;message of first window
    Select ev
      Case #IDCMP_CLOSEWINDOW : exit = 1

      Case #IDCMP_INTUITICKS : Print Hex$(EventQualifier)

      Case #IDCMP_MENUPICK
        Select WZMenuName
            Case "QUIT" : exit = 1
        End Select

      Case #IDCMP_IDCMPUPDATE
          Select WZGadName
            Case "BUTTON_1"
              error{"This button does nothing."}

            Case "BUTTON_2"
              WZListRemove child1.List
              WZListRemove child2.List
              WZListRemove maintree.List
              WZWindow 2,?SurfaceData,200

              tree1.l = WZListAddTree (maintree.List,"meine",0,-1,child1) ;set child 1 as child
              WZTags #WENTRYA_TreePen,2    ;set one entry To white
              WZListAddTree child1.List,"child1",tree1 ;is a child of tree1
              tree2.l = WZListAddTree (child1     ,"child2",tree1,-1,child2.List)
              WZListAddTree child2.List,"child2_1",tree2,-1,0,$12345678
              WZListAddTree child2.List,"child2_2",tree2
              WZListAddTree child2.List,"child2_3",tree2
              WZListAddTree maintree.List,"mainnode",0,-2
              WZPrint "HIERARCHY1",0,maintree

            Case "STRING_NAME"
              name$ = WZInputstr : WZPrint "ARG_1",&name$

            Case "GADGET_INTEGER"
              sl = WZInput : WZPrint "SLIDER_1",sl

            Case "SLIDER_1"
              sl = WZInput

            Case "LISTVIEW1":
              var2$ = WZListString(lv1,WZInput)
              WZPrint "ARG_1",&var2$,WZDoubleClick
          End Select

      Case #IDCMP_MENUHELP:

      Case #IDCMP_GADGETHELP:
           If WZGadHelp <> "" Then WTitle "Help text: " + WZGadHelp

      Case #IDCMP_MOUSEMOVE:
    End Select

  Case 2:             ;message of second window
    Select ev
      Case #IDCMP_CLOSEWINDOW : WZCloseWindow 2
      Case #IDCMP_MENUPICK
        Select WZMenuName
        End Select
      Case #IDCMP_IDCMPUPDATE
          Select WZGadName
          Case "HIERARCHY1"
            node.l = WZGetNode(maintree)     ;get the current item
            ;WTitle WZListString(node,0)+"  "+Hex$(WZListData(node,0))+" "+Str$(WZDoubleClick)
          End Select
      Case #IDCMP_MENUHELP
      Case #IDCMP_GADGETHELP
    End Select
  End Select
Until exit = 1
End

;--
;-- tell the compiled to link the GUI-file to the executable
;-- the Wizard-functions can access the GUI-data by passing the Label
SurfaceData: IncBin "wizard_Demo.wizard"
SurfaceDataEnd:

