; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "Prog.exe"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 7
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 32768
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 91
; CursorColumn    = 32
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Database    = 16
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;This program shows you how to use the AmiTCP extension to connect
;to an FTP server and be able to send commands and read responses
;from server. This program is only a demonstration program and not
;a full FTP server.

; --  reate important structures
NEWTYPE.list
  *ItemA.b
  *ItemB.b
End NEWTYPE
                                                                                                                                                                                                                                                 
NEWTYPE.inaddr
  s_addr.l
End NEWTYPE
                                                                                                                                                                                                                                               
NEWTYPE.sockaddrin
  sin_len.b
  sin_family.b
  sin_port.w
  sin_addr.inaddr
  sin_zero.b[8]
End NEWTYPE
                                                                                                                                                                                                                                               
NEWTYPE.hostent
  *h_name.b
  *h_aliases.list
  h_addrtype.l
  h_lenght.l
  *h_addr_list.list
End NEWTYPE

;-- Input Servers name
Print "Enter server's name >"
a$ = Edit$("ftp.aminet.net",40)

;-- Create a socket
sock.l = socket_(2,1,0)

;-- Get host details
*a.hostent = gethostbyname_(a$)
If *a = 0
  Print "Sorry, could not resolve hostname..."
  End
EndIf
                                                                                                                                                                                                                                                     
NPrint "Hostname is " + Peek.s(*a\h_name)
                                                                                                                                                                                                                 
;-- Copy Details to our Sockaddrin structure
bb = CopyMem_(*a.hostent\h_addr_list\ItemA,&host.sockaddrin\sin_addr,*a.hostent\h_lenght)

host.sockaddrin\sin_port = 21         ;Set port for FTP
host.sockaddrin\sin_family = 2        ;Set type to AT_INET
lenght = SizeOf.sockaddrin            ;Get lenght of structure sockaddrin

;-- Connect to host
b = connect_(sock.l,host.sockaddrin,lenght)
If b=-1 Then NPrint"Unable to connect to host.":Goto finish

;-- Allocate buffer
mem.l = AllocMem_($2000,1)
Gosub reader       ;Read data
NPrint c$          ;Print data read

.repeater
  Print "Enter word to send?"    ;Input data to send
  d$ = Edit$(40) : If LCase$(d$) = "exit" Then Goto finish      ;If exit is typed then quit
  Gosub writer                  ;send data to server
  Gosub reader                  ;read data from server
  NPrint c$                     ;print data
Goto repeater

;-- Free memory allocated, close connection and quit
.finish
  d = FreeMem_(mem.l,$1000)
  CloseSocket_(sock.l)
End

;-- This routine reads data from FTP server
.reader
  NPrint "reading data from host..."
  sockread.l = 0                              ;Clear Readmask
  sockread.l BitSet sock.l                    ;Set Readmask on our socket
  g = WaitSelect_(2,&sockread.l,0,0,0,0)      ;Wait until there is some data to read
  ar.l = $4004667f                            ;FIONREAD
  e = IoctlSocket_(sock, ar, mem)             ;How much data is there?
  If e = -1
    NPrint "Error ", Errno_
  Else
    f = Peek.l(mem)                           ;Place value in f
    NPrint "got ",f,"bytes data"
    c = recv_(sock.l,mem,f,0)                 ;Read f bytes

    ;-- This routine extracts data from buffer and places it in c$
    buf.l = mem.l
    x = Peek.b(buf.l)
    c$ = ""
    While f > 0
      c$ = c$ + Chr$(x)
      buf + 1
      x = Peek.b(buf.l)
      f = f - 1
    Wend
  EndIf
Return

;-- This routine writes data to server
.writer
  sockwrite.l = 0               ;Clear Writemask
  sockwrite.l BitSet sock.l   ;set Writemask on our socket
  g = WaitSelect_(2,0,&sockwrite.l,0,0,0)     ;Wait until server is ready to read our data
  Print "ok write to it ... "
  d$ = d$ + Chr$($a)
  l = FLen(d$)                  ;Add a Line Feed to our string
  c = send_(sock.l,d$,l,0)                    ;Send data to server
  NPrint "done"
Return
