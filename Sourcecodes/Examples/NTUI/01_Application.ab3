; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "EnableDisable"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 1024
; MakeSmallest    = 0
; FuncOptimize    = 0
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 4000
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = -1
; InterruptCheck  = -1
; AutoRun         = -1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 0
; CursorColumn    = 0
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; /XTRA
; ======================== NTUI Application Example ===========================
; 11/27/2014 Thilo Koehler
; =============================================================================

; Set Optimize and Syntax level for the correct typecheck by the compilation ==
optimize 7
Syntax 6

; Include Dependencies ========================================================
WBStartup
XINCLUDE "ntui.include.ab3"

; Program Initialization ======================================================
SHARED *ntui.tuiEngine

; build the GUI from XML code, and retrieve the engine object
*ntui = ntui_GetEngine{ntui_BuildFromXMLMem{#NULL, ?layout}}

; if something went wrong, display error message and exit
If (*ntui = Null)
  error{"Unable to create NTUI environment!"}
  Goto exit
End If

; show the main window
; if something went wrong, display error message and exit
If ntui_ShowWindowByID{*ntui, "MainWindow"} = False
  error{"Unable to show MainWindow!"}
  Goto exit
End If

; Notification Loop ===========================================================
Repeat
  ; wait for a notification
  *notify.tuiNotify = ntui_WaitNotify{*ntui}
  
  ; evaluatie notification
  Select ntui_GetNotifyID{*notify}
    Case "QUIT" ; we should quit
      quit.b = True
      
    Case "ICONIFY"
      ntui_Iconify{*ntui}
      
    Case "POPUP"
      ntui_PopUp{*ntui}

  End Select
Until quit

.exit
; Cleanup =====================================================================
; free all resources allocated by NTUI
ntui_FreeEngine{*ntui}
End

.layout
; GUI Definition as XML =======================================================
Dc.b "<Engine appname='NTUI Application'"
Dc.b "  appIconFile=''"
Dc.b "  appIconText='NTUI Application'"
Dc.b "  appMenuText='NTUI Application'"
Dc.b "  onIconify='ICONIFY'"
Dc.b "  onPopup='POPUP'"
Dc.b "  onQuit='QUIT'"
Dc.b "/>"
Dc.b "<Window id='MainWindow' title='NTUI Application' onClose='QUIT'>"
Dc.b "  <VGroup>"
Dc.b "    <Label text='NTUI Application'/>"
Dc.b "    <Button label='Iconify' image='iconify' onClick='ICONIFY'/>"
Dc.b "    <Button label='Quit' image='quit' onClick='QUIT'/>"
Dc.b "  </VGroup>"
Dc.b "</Window>"
Dc.b 0
