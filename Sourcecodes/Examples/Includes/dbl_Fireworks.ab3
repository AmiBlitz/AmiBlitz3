; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "//Bin"
; ExeFile         = "dbl_Fireworks"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 142
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = "pre"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
OPTIMIZE 5
SYNTAX 6
XINCLUDE "dbl_display.include.ab3"
XINCLUDE "eclock.include.ab3"
XINCLUDE "intuition.include.ab3"

#gXd = 800
#gYd = 600

NoCli
WbToScreen 0
ScreenToFront_ Peek.l(Addr Screen(0))
If NOT image_Load{1,"/data/pattern"} Then End
If NOT dbl_Init {"Fireworks",-1,#gXd,#gYd,16}
  End
EndIf
;dbl_BGBox24{$0,0,0,#gXd,#gYd}
dbl_BGBlitPattern{1,0,0,!dbl_GetWidth,!dbl_GetHeight}

NEWTYPE.shot
  x.f
  y.f
  speed.f
  distance.w
  travelled.f
  color.l
End NEWTYPE

NEWTYPE.particle
  x.f
  y.f
  angle.f
  speed.f
  time.w
  _timer.w
End NEWTYPE
Dim List s.shot(0)
Dim List p.particle(0)

Function fire_shot{x.f,y.f,speed.f,distance.f}
SHARED s()
  If AddLast(s())
    s()\x     = x
    s()\y     = y
    s()\speed   = speed
    s()\distance  = s()\y - distance
    s()\color = (100 + Rnd(155)) LSL 16 + (100 + Rnd(55)) LSL 8 + 10 + Rnd(90)
  EndIf
End Function

Function create_new_particle{x.f,y.f,speed.f,angle.f}
SHARED p()
  If AddLast (p())
    p()\x = x
    p()\y = y
    p()\speed = speed
    p()\angle = angle
    p()\_timer = Timer
    p()\time = 50 + Rnd(50)
  EndIf
End Function
 

Function update_shots{}
SHARED s()
  ResetList s()
  If FirstItem(s())
    Repeat
      s()\y = s()\y - s()\speed ; -- move shot
      dbl_QBox24{s()\color,s()\x,s()\y,s()\x+2,s()\y+2}

      If s()\y < s()\distance
        trnd.f = 1 + Rnd(5)       ;-- number of Rings of particles the shot will produce (min,max)
        For mloop.l = 1 To trnd   ;-- loop for the number of rings of particles the shot will produce (min,max)
          speed.f = 0.2+Rnd(2)  ;-- rnd speed for each ring of particles
          incr.f = 10 + Rnd(60) ;-- angle/spacing between each particle
          For loop.l = 0 To incr  ;-- loop thru each particle in the loop, and create
            create_new_particle{s()\x,s()\y,speed*0.8+Rnd(speed*1.2),loop * (359 / incr)}
          Next
        Next
        KillItem s()
      End If
    Until NOT NextItem(s())
  EndIf
End Function


Function update_particles{}
SHARED p()
  ResetList p()
  If FirstItem(p())
  Repeat
    p()\x =p()\x + Cos(p()\angle) * p()\speed                           ; -- move the particle
    p()\y =p()\y + Sin(p()\angle) * p()\speed + (Timer-p()\_timer)/20   ; -- move the particle

    colred.l = 100 + Rnd(155)                                             ; -- set random red color
    colgrn.l = 10 + Rnd(colred - 10)                                      ; -- random green colour, based on the result of the random red colour
    Color.l  = colred LSL 16 + colgrn LSL 8 + 10 + Rnd(180)
    dbl_QBox24{Color,p()\x,p()\y, p()\x + 1 + Rnd(3),p()\y + 1 + Rnd(3)}
    If Timer > p()\_timer + p()\time                                    ; -- check lifetime of particle
      KillItem p()
    End If
  Until NOT NextItem(p())
  EndIf
End Function




Repeat
  ev.l = Event
  dbl_Flip{}
  dbl_Unqueue{}

  If ev = #IDCMP_MOUSEBUTTONS
    ; Parameters:         x             y                 speed             distance
    fire_shot{10 + Rnd(#gXd-10) , 400 + Rnd(#gYd-400) , 0.8 + Rnd(2.5) , 70 + Rnd(130)}
  EndIf
  update_shots{}
  update_particles{}

  If LastItem(p())
    particles.w = Index(p())
  EndIf
  dbl_QPrint{"# particles: "+Str$(particles),0,0,1}
Until ev = #IDCMP_RAWKEY

ScreenToBack_ Peek.l(Addr Screen(0))
End

          


           

