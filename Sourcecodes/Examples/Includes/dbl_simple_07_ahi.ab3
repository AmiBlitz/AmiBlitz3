; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "//Bin"
; ExeFile         = "dbl_simple_07_ahi"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 35
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 11
; LabelSearch     = ""
; LabelRemark     = 140
; LabelAll        = 5
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
OPTIMIZE 5
SYNTAX 6

WBStartup

XINCLUDE "dbl_display.include.ab3"
XINCLUDE "ahi.include.ab3"    ; we need ahi_Device.include for sound!

NEWTYPE.ball
x.f:y.f:xs.f:ys.f
End NEWTYPE

Dim List ball.ball(0)
For n.l = 0 To 2
  If AddItem(ball()) Then  ball()\x=  10,100,Rnd*3,Rnd*3
Next

gfxpath.s = "/Data/"
sfxpath.s = "/Data/"

succ.l = image_Load {2,gfxpath.s+"glass_big",$FF00FF,20}  : image_MidHandle {2}
succ   & image_Load {1,gfxpath.s+"pattern"}
succ   & image_Load {3,gfxpath.s+"foreground",$FF00FF,5}  : image_MidHandle {3}

; load our bounce sound!
succ   & ahi_LoadSound {0,sfxpath.s+"rassel4.wav"}

; open the ahi.device
succ   & ahi_OpenDevice {0}

;succ   & dbl_Init {"MyGame",#dbl_scr_BestModeID,640,480,24}
succ   & dbl_Init {"MyGame",#dbl_scr_Window,640,480,24}
If succ
  dbl_BGBlitPattern{1,0,0,!dbl_GetWidth,!dbl_GetHeight}
  If dbl_InitCollision{} = False Then error {"Unable to init collition !"}
  dbl_BGBlit{3,!dbl_GetWidth/2,!dbl_GetHeight/2}
  ;image_BlitMask{3,!dbl_GetWidth/2,!dbl_GetHeight/2,dbl\rp_bg}
  v.f = 1
  Repeat
    dbl_Flip{}
    dbl_Unqueue{}

    ; move balls
    ResetList ball()
    While NextItemFast(ball())
      ball()\ys + 0.1
      ox.f = ball()\x
      oy.f = ball()\y
      ball()\x+ball()\xs
      ball()\y+ball()\ys

      speed.f = ball()\xs*ball()\xs + ball()\ys*ball()\ys

      If ball()\x<0 OR ball()\x>!dbl_GetWidth  Then ball()\x=ox :ball()\xs=-ball()\xs *v
      If ball()\y<0 OR ball()\y>!dbl_GetHeight Then ball()\y=oy :ball()\ys=-ball()\ys *v


      If dbl_Hit{ball()\x,ball()\y}  ; We hit something !
        ball()\x= ox
        ball()\y= oy

        If dbl_Hit{ball()\x+ball()\xs,ball()\y} = False  ; check horizontal...
          ball()\ys=-ball()\ys * v
        Else

          If dbl_Hit{ball()\x,ball()\y+ball()\ys} = False ; check vertical
            ball()\xs=-ball()\xs  *v
          Else
            ball()\xs=-ball()\xs  *v
            ball()\ys=-ball()\ys  *v
          End If

        End If
        ball()\x+ball()\xs
        ball()\y+ball()\ys

        ; we hit something, so play boucne sound at random pitch

        g.f = speed* 2
        If g>4
          f.f = (Rnd * 100 + 100) *speed
          ahi_PlaySound{0,g,ball()\x/!dbl_GetWidth,22000 + f}
        End If
      End If

    Wend

    ; draw balls
    ResetList ball()
    While NextItemFast(ball())
      dbl_QBlit {2,ball()\x,ball()\y}
    Wend

  Until Event=#IDCMP_MOUSEBUTTONS
End If
End



