; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "TuiDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 3717
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 65535
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 26
; CursorColumn    = 46
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 100
; Max GadgetList  = 100
; Max Shape       = 200
; Max Bank        = 1
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 10
; Max Window      = 100
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
NoCli    ; we do not want a console window

XINCLUDE "error.include.ab3"
XINCLUDE "screennotify.include.ab3"

; open a window to receive messages
DefaultIDCMP $400 + $200 + $8
Window 0,0,0,320,200,$1000 + $400 + $8 + $2,"Press a key to exit",O,1
*win.Window = Peek.l(Addr Window(0))

; create the WorkbenchClient
*port.MsgPort = CreateMsgPort_
snmhandle.l = screennotify_AddWorkbenchClient{*port} ;win\UserPort
NPrint "snmhandle: ", Hex$(snmhandle)
NPrint "Port: ", Hex$(*port)

If snmhandle <> 0
  exit.b = False

  While NOT exit = True
    myEvent.l = Event

    If myEvent = #IDCMP_RAWKEY OR myEvent = #IDCMP_CLOSEWINDOW Then exit = True
    If myEvent<>0 Then NPrint Hex$(myEvent) : WPrintScroll

    *snm.ScreenNotifyMessage = GetMsg_(*port)
    If *snm
      _type.l = *snm\snm_Type
      _value.l = *snm\snm_Value
      If _type = #SCREENNOTIFY_TYPE_WORKBENCH
        NPrint "Workbench requested CloseWorkbench with type " + Str$(_type)
      EndIf
      ReplyMsg_ *snm
    EndIf
  Wend

  ; clean up everything
  screennotify_RemWorkbenchClient{snmhandle}
  DeleteMsgPort_ *port
  CloseWindow 0
Else
  error{"Could not create the WorkbenchClient!"}
EndIf

End
