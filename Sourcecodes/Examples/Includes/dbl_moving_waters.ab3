; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "//Bin"
; ExeFile         = "dbl_Moving_WaterDemo"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 170
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 167
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 100
; Max GadgetList  = 100
; Max Shape       = 200
; Max Bank        = 1
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max Window      = 100
; Max IntuiFont   = 10
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
; --
; -- simple drops simulation demo made for AmiBlitz3
; --
OPTIMIZE 5
SYNTAX 6


XINCLUDE "dbl_display.include.ab3"
XINCLUDE "screen.include.ab3"
XINCLUDE "eclock.include.ab3"
XINCLUDE "intuition.include.ab3"
XINCLUDE "perlin.include.ab3"
XINCLUDE "image_ext.include.ab3"

#display_width  = 255
#display_height = 255

; -- image dimensions
; -- should be 255x255, other images will be scaled to that format
#gXd = 255
#gYd = 255
image$ = "/data/pattern"

SHARED CurrentTexture.b,NextTexture.b
CurrentTexture = 1 : NextTexture = 0

_Depth.w = -75
DropRadius.w = 9
VISCOSITY.f = 0.000000001
Dim InterferenceMap.w(1,#gXd,#gYd)


Statement Update_Interferences{}
SHARED InterferenceMap()
SHARED VISCOSITY

  DEFTYPE.f n
  For y.l = 2 To #gYd-2
    For x.l = 2 To #gXd-2
      ; -- calculate some intereferences
      n = InterferenceMap(CurrentTexture,x-1,y)   + InterferenceMap(CurrentTexture,x+1,y)
      n + InterferenceMap(CurrentTexture,x,y-1)   + InterferenceMap(CurrentTexture,x,y+1)
      n + InterferenceMap(CurrentTexture,x-2,y)   + InterferenceMap(CurrentTexture,x+2,y)
      n + InterferenceMap(CurrentTexture,x,y-2)   + InterferenceMap(CurrentTexture,x,y+2)
      n + InterferenceMap(CurrentTexture,x-1,y+1) + InterferenceMap(CurrentTexture,x+1,y-1)
      n + InterferenceMap(CurrentTexture,x-1,y-1) + InterferenceMap(CurrentTexture,x+1,y+1)

      n = n / 6.0
      n = n - InterferenceMap(NextTexture,x,y)
      n = n - n * VISCOSITY
      InterferenceMap(NextTexture,x,y) = Int(n)
    Next
  Next

  ; -- swap the stored images
  temp.b = CurrentTexture
  CurrentTexture = NextTexture
  NextTexture = temp

  ; -- draw the interferenced image line by line
  stepping.b = 4 : stepping2.b  = stepping LSR 1
  For j.w = 1 To #gYd-1  Step stepping
    For i.w = 1 To #gXd-1 Step stepping
      xoff.l = i
      xoff - InterferenceMap(CurrentTexture,i-1,j)
      xoff + InterferenceMap(CurrentTexture,i+1,j)

      yoff.l = j
      yoff - InterferenceMap(CurrentTexture,i,j-1)
      yoff + InterferenceMap(CurrentTexture,i,j+1)

      If xoff < 0 Then xoff = 0
      If xoff > 255 Then xoff = 255
      If yoff < 0 Then yoff = 0
      If yoff > 255 Then yoff = 255

      ; -- joining the image and the interferences
      col.l = image_GetRGB{1,xoff,yoff}
      r.l = col LSR 16
      g.l = (col LSR 8) AND 255
      b.l = col AND 255
      r + InterferenceMap(CurrentTexture,i,j)
      g + InterferenceMap(CurrentTexture,i,j)
      b + InterferenceMap(CurrentTexture,i,j)
      If r < 0 Then r = 0
      If g < 0 Then g = 0
      If b < 0 Then b = 0
      If r > 255 Then r = 255
      If g > 255 Then g = 255
      If b > 255 Then b = 255
      col = (r LSL 16) + (g LSL 8) + b
      ;dbl_QPlot24{col,i,j}
      dbl_QBox24{col,i-stepping2,j-stepping2,i+stepping2,j+stepping2}
    Next
  Next

  ; -- draw a simple mouse pointer
  ;col.l = 255 LSL 16
  ;dbl_QPlot24{col,mx,my}
  ;dbl_QPlot24{col,mx+1,my}
  ;dbl_QPlot24{col,mx-1,my}
  ;dbl_QPlot24{col,mx,my+1}
  ;dbl_QPlot24{col,mx,my-1}
End Function

Function.l SquaredDist{sx.w, sy.w, dx.w, dy.w}
  Function Return (dx - sx) * (dx - sx) + (dy - sy) * (dy - sy)
End Function

Statement Drop{dmx.w,dmy.w,dep.w}
SHARED InterferenceMap()
SHARED _Depth,DropRadius

  For y.w = dmy - DropRadius To dmy + DropRadius
    For x.w = dmx - DropRadius To dmx + DropRadius
      If y>3 AND y<#gYd-2 AND x>3 AND x<#gXd-2
        dist.w = SquaredDist{dmx,dmy,x,y}
        If dist < DropRadius
          fd.w = (_Depth * DropRadius - Sqr(dist)) / DropRadius
          If fd > 127 Then fd = 127
          If fd <-127 Then fd =-127
          InterferenceMap(CurrentTexture,x,y) = fd
        EndIf
      EndIf
    Next
  Next
End Statement


; -------------------------------------------------------------------------
.MAINPROGRAM
WBStartup: NoCli : WbToScreen 0 : ScreenToFront_ Peek.l(Addr Screen(0))

; -- open the doublebuffering-display
If NOT dbl_Init {"water drops",-2,#display_width,#display_height,16}
  error{"coult not initiate the double buffering area !"}
  End
EndIf

If image_Load{1,image$}
;  image_Create{2,255,255}
;  image_BlitScaled{1,0,0,255,255,image_GetRPPtr{2}}
;  image_Free{1}
Else
  error{"could not open the image " + image$}
  End
EndIf

dbl_BGBlitPattern{1,0,0,!dbl_GetWidth,!dbl_GetHeight}

Activate 0
dbl_SetFPS{#dbl_fps_free} ; dont limit the maximum FPS

mx.w =0
my.w =0
Repeat
  dbl_Flip{}
  dbl_Unqueue{}

  ; -- get the mousepointers position
  mx = WMouseX : my = WMouseY
  If mx < 2 Then mx = 2
  If mx > #gXd Then mx = #gXd
  If my < 12 Then my = 12
  If my > #gYd Then my = #gYd

  ; -- draw the interferenced image
  Update_Interferences{}

  ; -- eventhandler
  Repeat
    ev.l = Event
    Select ev
    Case #IDCMP_MOUSEBUTTONS
      Drop{mx,my,_Depth}

    Case #IDCMP_RAWKEY
      Select RawKey
      Case $45 : exit.l = True
      Default
        For i.l = 1 To 360
          j.f = i * Pi/180.0
          dx.w = Cos(j)*100+(255/2)
          dy.w = Sin(j)*100+(255/2)
          Drop{dx,dy,_Depth}
        Next
      End Select
    End Select
  Until ev = 0

  fps$ = "FPS: "+Str$(Int(dbl_GetFPS{1000}))
  dbl_QPrint{fps$,dbl_GetWidth{}-64,2,$0}
Until exit = True
dbl_Free{}
image_FreeAll{}

; -- bring the IDE to front
ScreenToBack_ Peek.l(Addr Screen(0)) : !coutclose
End
