; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "//Bin"
; ExeFile         = "dbl_BltBmap_ASL"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 118
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 15
; CursorColumn    = 11
; LabelSearch     = "ball"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA

; CONFIGURE HERE ***************************

#use_screenhack = 0  ; 0 = no screen hack, 1 = screen hack
#flip_mode = 1       ; 0,1,2,3,4 or 5
; #flip_scrollvp  = 0   ; use ScrollVP()
; #flip_bltbmap   = 1   ; blit bitmaps via BltBmapRastPort()
; #flip_none      = 2   ; single buffering
; #flip_smart     = 3   ; use seletive blit bia BltBmapRastPort and Queue()
; #flip_changebmap= 4   ; use ChangeVPBitMap()
; #flip_scrbuff   = 5   ; use ChangeScreenBuffer()

; *************************************

OPTIMIZE 5
SYNTAX 6

WBStartup

XINCLUDE "dbl_display.include.ab3"
XINCLUDE "intuition.include.ab3"
XINCLUDE "image_ext.include.ab3"

NEWTYPE.ball
  x.f:y.f:xs.f:ys.f
End NEWTYPE

fmode.s = "Huh!???"
If #flip_mode = #flip_scrollvp   Then fmode.s = "ScrollVP()"
If #flip_mode = #flip_none       Then fmode.s = "Single Buffer"
If #flip_mode = #flip_smart      Then fmode.s = "Selective Blit"
If #flip_mode = #flip_bltbmap    Then fmode.s = "BltBmapRastPort()"
If #flip_mode = #flip_scrbuff    Then fmode.s = "ChangeScreenBuffer()"
If #flip_mode = #flip_changebmap Then fmode.s = "ChangeVPBitMap()"

If #use_screenhack Then fmode.s + "+ScreenHack(tm)"

;#screen_mode = #dbl_scr_Window      ; use this to run demo in a window on WB Screen
;#screen_mode = #dbl_scr_BestModeID  ; use this to automatically determine the best screen mode
#screen_mode = #dbl_scr_ASL          ; use this to present an ASL requester for screen mode

Dim List ball.ball(0)

Statement AddBall{num.l}

  SHARED ball()
  For n.l=0 To num-1
    If AddItem(ball()) Then ball()\x = 0,100,Rnd,1-Rnd*2
  Next

End Statement

Statement RemBall{num.l}

  SHARED ball()
  For n.l=0 To num-1
    ResetList ball()
    If NextItem(ball()) Then KillItem ball()
  Next

End Statement

; Main Program
AddBall{3}

; Create the background pattern via perlin noise
rec.Rectangle\MinX = 0,0,127,127
par.perlinPars\persistence = 0.6,.015,1,1.0,54,6,1
par\FGRGB = $000000,$6F4F9F
succ.l = image_PerlinNoise{1,rec,par}

; Load the ball image
succ   & image_Decode{2,?ballimg}
succ   & dbl_Init {"MyGame",#screen_mode,640,480,24} : If #screen_mode=#dbl_scr_Window Then fmode.s = "Window Mode"

If succ
  
  exit.w =False

  dbl_SetFPS{50}      : tmode.s = "50Hz fix"
  dbl_BGBlitPattern{1,0,0,!dbl_GetWidth,!dbl_GetHeight}
  pen.l = dbl_GetPen{255,255,255}

  Repeat
    dbl_Flip{}
    dbl_Unqueue{}

    ; move balls
    balls.l = 0
    ResetList ball()
    While NextItemFast(ball())
      ball()\ys + 0.1
      ball()\x+ball()\xs
      ball()\y+ball()\ys
      If ball()\x<0 OR ball()\x>!dbl_GetWidth  Then ball()\xs=-ball()\xs : ball()\x+ball()\xs
      If ball()\y<0 OR ball()\y>!dbl_GetHeight Then ball()\ys=-ball()\ys : ball()\y+ball()\ys
      dbl_QBlit {2,ball()\x,ball()\y}     ;draw ball
      balls+1
    Wend

    ; calculate how we want to scroll in a wired way
    rx.f + 0.003
    sxv.l = Sin(rx) * 2
    syv.l = Cos(rx) * 2
    scroll_x.l - sxv
    scroll_y.l - syv

    ; acutally scroll the playfield sxv/syv pixels
    dbl_BGScroll {sxv,syv,False}

    ; fill the new scrolled-in areas with background pattern
    If sxv<0 ; we scrolled right ?
      dbl_BGBlitPattern{1,0,0,-sxv,!dbl_GetPFHeight,scroll_x,scroll_y,False}
    Else     ; we scrolled left !
      dbl_BGBlitPattern{1,!dbl_GetPFWidth-sxv,0,sxv,!dbl_GetPFHeight,scroll_x,scroll_y,False}
    End If
    If syv<0 ; we scrolled down?
      dbl_BGBlitPattern{1,0,0,!dbl_GetPFWidth,-syv,scroll_x,scroll_y,False}
    Else     ; we scrolled up !
      dbl_BGBlitPattern{1,0,!dbl_GetPFHeight-syv,!dbl_GetPFWidth,syv,scroll_x,scroll_y,False}
    End If

    Format "##0.0"
    fps.s = " / FPS: "+Str$(dbl_GetFPS{1000})
    Format ""
    obj.s = " / Objects: "+Str$(balls)
    dbl_QPrint{fmode+fps+" / Timer: "+tmode.s+obj,20,20,pen}
    Repeat
      idcmp.l = Event
      Select idcmp
;        Case #IDCMP_MOUSEBUTTONS : exit = True
        Case #IDCMP_RAWKEY
          Select EventCode
            Case #RAWKEY_ESC : exit = True
            Case 1 : dbl_SetFPS{50}                 : tmode.s = "50Hz fix"
            Case 2 : dbl_SetFPS{#dbl_fps_monitor}   : tmode.s = "Monitor FPS Calculated"
            Case 3 : dbl_SetFPS{#dbl_fps_vblank}    : tmode.s = "WaitTOF()"
            Case 4 : dbl_SetFPS{#dbl_fps_vbeam}     : tmode.s = "WaitBOVP()"
            Case 5 : dbl_SetFPS{#dbl_fps_free}      : tmode.s = "no sync (max speed)"
            Case #RAWKEY_A : AddBall{1}
            Case #RAWKEY_R : RemBall{1}
          End Select
      End Select
    Until idcmp=0

    dbl_QPrint{"'1'=50Hz / '2'=Monitor / '3'=WaitTOF / '4'=WaitBOVP / '5'=no sync",20,!dbl_GetPFHeight-40,pen}
    dbl_QPrint{"'a'=add object / 'r'=remove object / ESC=quit",20,!dbl_GetPFHeight-20,pen}

  Until exit
End If

End

.ballimg
IncBin "/Data/ball.ab3i"



