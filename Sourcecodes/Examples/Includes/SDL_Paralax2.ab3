; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "/Bin"
; ExeFile         = "SDLParalax2"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 70
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = "-d -f"
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 3
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;/*
; * "Parallax Scrolling Example II"
; *
; *   Nghia             <nho@optushome.com.au>
; *   Randi J. Relander <rjrelander@users.sourceforge.net>
; *   David Olofson     <david@gardena.net>
; *
; * This software is released under the terms of the GPL.
; *
; * Contact authors For permission if you want to use this
; * software, or work derived from it, under other terms.
; *
; *
; *  Command Line options:
; *  -f  Fullscreen
; *  -d  Double Buffer
; *  -<n>  Depth = <n> bits
; */

; * Amiblitz3 port by Thilo Koehler
OPTIMIZE 7
SYNTAX 2

XINCLUDE "sdl.include.ab3"

;/*----------------------------------------------------------
;  Definitions...
;----------------------------------------------------------*/
;/* foreground and background velocities in pixels/sec */
#FOREGROUND_VEL_X  = 100
#FOREGROUND_VEL_Y  = 50

; * Size of the Screen in pixels
#SCREEN_W = 320
#SCREEN_H = 240

; * Size of one background tile in pixels
#TILE_W  =  48
#TILE_H  =  48

; * The maps are 16 by 16 squares, AND hold one
; * character per square. The characters determine
; * which tiles are To be drawn in the corresponding
; * squares On the Screen. Space (" ") means that
; * no tile will be drawn.
#MAP_W =  16
#MAP_H =  16

NEWTYPE.map_data_t
  dat.b[#MAP_H*#MAP_W];
End NEWTYPE

NEWTYPE.tiled_layer_t
  pos_x.f
  pos_y.f
  vel_x.f
  vel_y.f
  *map.map_data_t
  *tiles.SDL_Surface
End NEWTYPE

;/*----------------------------------------------------------
;  ...and some code. :-)
;----------------------------------------------------------*/
Statement draw_tile{*_screen.SDL_Surface,*tiles.SDL_Surface, x.l, y.l, tile.b}
  DEFTYPE.SDL_Rect source_rect, dest_rect
  tile - @"0"
  If (tile<0 OR tile>4) Then Statement Return
  source_rect\x = 0                       ;  /* Only one column, so we never change this. */
  source_rect\y = tile * #TILE_H ;  /* Select tile from image! */
  source_rect\w = #TILE_W
  source_rect\h = #TILE_H

  dest_rect\x = x
  dest_rect\y = y

  SDL_BlitSurface{*tiles, source_rect, *_screen, dest_rect}
End Statement

;/*----------------------------------------------------------
;  tiled_layer_t functions
;----------------------------------------------------------*/
;/* Initialivze layer; set up map and tile graphics data. */
Statement tl_init{*tl.tiled_layer_t, *map.map_data_t, *tiles.SDL_Surface}
  *tl\pos_x = 0.0
  *tl\pos_y = 0.0
  *tl\vel_x = 0.0
  *tl\vel_y = 0.0
  *tl\map   = *map
  *tl\tiles = *tiles
End Statement

;/* Set position */
Statement tl_pos{*tl.tiled_layer_t , x.f, y.f}
  *tl\pos_x = x
  *tl\pos_y = y
End Statement

;/* Set velocity */
Statement tl_vel{*tl.tiled_layer_t, x.f, y.f}
  *tl\vel_x = x
  *tl\vel_y = y
End Statement

;/* Update animation (apply the velocity, that is) */
Statement tl_animate{*tl.tiled_layer_t, dt.f}
  *tl\pos_x + dt * *tl\vel_x
  *tl\pos_y + dt * *tl\vel_y
End Statement

;/* Bounce at map limits */
Statement tl_limit_bounce{*tl.tiled_layer_t }
  maxx.l = #MAP_W * #TILE_W - #SCREEN_W
  maxy.l = #MAP_H * #TILE_H - #SCREEN_H

  If(*tl\pos_x >= maxx)
    ;/* v.out = - v.in */
    *tl\vel_x = -*tl\vel_x;
    ; * Mirror over right limit. We need To do this
    ; * To be totally accurate, as we're in a time
    ; * discreet system! Ain't that obvious...? ;-)
    *tl\pos_x = maxx * 2 - *tl\pos_x;
  Else
    If(*tl\pos_x <= 0)
      ;/* Basic physics again... */
      *tl\vel_x = -*tl\vel_x;
      ;/* Mirror over left limit */
      *tl\pos_x = -*tl\pos_x;
    End If
  End If

  If(*tl\pos_y >= maxy)
    *tl\vel_y = -*tl\vel_y;
    *tl\pos_y = maxy * 2 - *tl\pos_y;
  Else
   If(*tl\pos_y <= 0)
     *tl\vel_y = -*tl\vel_y;
     *tl\pos_y = -*tl\pos_y;
   End If
 End If
End Statement

; * LINK the position of this layer To another layer, w/ Scale ratio
; *
; * BTW, it would be kind of neat implementing the LINK in a more
; * automatic fashion - tl_link() one layer To another an init time,
; * AND Then forget about it! Oh well, that's another tutorial. :-)
Statement tl_link{*tl.tiled_layer_t, *to_tl.tiled_layer_t , ratio.f}
  *tl\pos_x = *to_tl\pos_x * ratio
  *tl\pos_y = *to_tl\pos_y * ratio
End Statement

;/* Render layer To the specified surface */
Statement tl_render{*tl.tiled_layer_t, *_screen.SDL_Surface}
  DEFTYPE.l map_x, map_y, map_x_loop, fine_x, fine_y, x, y

  ;/* Calculate which part of the map To draw */
  map_x = Int(Int(*tl\pos_x) / #TILE_W)
  map_y = Int(Int(*tl\pos_y) / #TILE_H)

  ; * Calculate where the Screen is, with pixel accuracy.
  ; * (This gets "negated" later, as it's a Screen
  ; * coordinate rather than a map coordinate.)
  fine_x = Int(*tl\pos_x) MOD #TILE_W
  fine_y = Int(*tl\pos_y) MOD #TILE_H

  ; * Draw all visible tiles.
  ; *
  ; * Note that this means that we need To draw the size
  ; * of one tile outside the Screen On each side! (The
  ; * parts that are outside aren't actually rendered, of
  ; * course - SDL clips them away.)
  y = -fine_y
  While (y<#SCREEN_H)
    map_x_loop = map_x
    x = -fine_x
    While (x<#SCREEN_W)
      draw_tile{*_screen, *tl\tiles, x, y,*tl\map\dat[(map_y * #MAP_W + map_x_loop) MOD (#MAP_W*#MAP_H)]}
      map_x_loop+1
      x + #TILE_W
    Wend
    map_y +1
    y + #TILE_H
  Wend
End Statement


;/* Main Program */
DEFTYPE.SDL_Surface *_screen,*tiles_bmp,*tiles
DEFTYPE.tiled_layer_t foreground_layer, middle_layer, background_layer
DEFTYPE.l tick1, tick2, bpp, flags, i
DEFTYPE.f dt
DEFTYPE.SDL_Event _event
*foreground_map.map_data_t = ?_foreground_map
*middle_map.map_data_t     = ?_middle_map
*background_map.map_data_t = ?_background_map

SDL_Init{#SDL_INIT_VIDEO}

; Get the optional CLI arguments
XINCLUDE "dos.include.ab3"
err.l = False
Repeat
  arg.s = dos_GetNextArg{} ; get the next CLI argument
  larg.s = LCase$(arg) ; lower case the option string
  Select larg
    Case "-d"  ; the user can specify a string here, spaces must be in quotes
      flags | #SDL_DOUBLEBUF
    Case "-f"  ; the user can specify an integer number here
      flags | #SDL_FULLSCREEN
    Default
      bpp = Vallong(arg)
      If bpp<0 Then bpp=-bpp

      If arg><"" AND bpp=0
        NPrint "*** ERROR: Unknown option \\22",arg,"\\22 specified!"
        err.l = True
      End If
  End Select
Until arg = "" ; until we processed all arguments

If err Then End

*_screen = SDL_SetVideoMode{#SCREEN_W, #SCREEN_H, bpp, flags}
SDL_WM_SetCaption{"Parallax Scrolling Example 2", "Parallax 2"}

*tiles_bmp = SDL_LoadBMP{"/Data/tiles.bmp"}
If *tiles_bmp=#NULL Then error{"Unable to open /Data/tiles.bmp!"} : End

*tiles = SDL_DisplayFormat{*tiles_bmp}
SDL_FreeSurface{*tiles_bmp}

;/* set colorkey To bright magenta */
SDL_SetColorKey{*tiles,#SDL_SRCCOLORKEY|#SDL_RLEACCEL,SDL_MapRGB{*tiles\_format,255,0,255}}

tl_init{foreground_layer, *foreground_map, *tiles}
tl_init{middle_layer    , *middle_map    , *tiles}
tl_init{background_layer, *background_map, *tiles}

tl_vel{foreground_layer, #FOREGROUND_VEL_X, #FOREGROUND_VEL_Y}

;/* Get initial tick For time calculation */
tick1 = SDL_GetTicks{}

breakit.l = False
While (SDL_PollEvent{_event} >= 0 AND breakit=False)

  ;/* Click To exit */
  If (_event\_type = #SDL_MOUSEBUTTONDOWN) Then breakit=True

  ;/* calculate time since last update */
  tick2 = SDL_GetTicks{}
  dt = (tick2 - tick1) * 0.001
  tick1 = tick2

  ;/* Update foreground position */
  tl_animate{foreground_layer, dt}
  tl_limit_bounce{foreground_layer}

  ; * LINK the middle AND background levels
  ; * To the foreground level
  tl_link{&middle_layer    , &foreground_layer, 0.5 }
  tl_link{&background_layer, &foreground_layer, 0.25}

  ;/* Render layers */
  tl_render{background_layer, *_screen}
  tl_render{middle_layer    , *_screen}
  tl_render{foreground_layer, *_screen}

  ;/* draw "title" tile in upper left corner */
  draw_tile{*_screen, *tiles, 0, 0, @"4"}

  ;/* make changes visible */
  SDL_Flip{*_screen}

  ;/* Let operating system breath */
  SDL_Delay{1}
Wend

SDL_FreeSurface{*tiles}
SDL_Quit{}

End

;/*----------------------------------------------------------
;  ...some globals...
;----------------------------------------------------------*/
;/*
; * Foreground map.
; */
._foreground_map
;/*   0123456789ABCDEF */
Dc.b "3333333333333333"
Dc.b "3   2   3      3"
Dc.b "3   222 3  222 3"
Dc.b "3333 22     22 3"
Dc.b "3       222    3"
Dc.b "3   222 2 2  333"
Dc.b "3   2 2 222    3"
Dc.b "3   222      223"
Dc.b "3        333   3"
Dc.b "3  22 23 323  23"
Dc.b "3  22 32 333  23"
Dc.b "3            333"
Dc.b "3 3  22 33     3"
Dc.b "3    222  2  3 3"
Dc.b "3  3     3   3 3"
Dc.b "3333333333333333"

;/*
; * Middle level map; where the planets are.
; */
._middle_map
;/*   0123456789ABCDEF */
Dc.b "    1   1       "
Dc.b "           1   1"
Dc.b "   1            "
Dc.b "     1  1    1  "
Dc.b "   1            "
Dc.b "         1      "
Dc.b " 1            1 "
Dc.b "    1   1       "
Dc.b "          1     "
Dc.b "   1            "
Dc.b "        1    1  "
Dc.b " 1          1   "
Dc.b "     1          "
Dc.b "        1       "
Dc.b "  1        1    "

;/*
; * Background map.
; */
._background_map
;/*   0123456789ABCDEF */
Dc.b "0000000000000000"
Dc.b "0000000000000000"
Dc.b "0000000000000000"
Dc.b "0000000000000000"
Dc.b "0000000000000000"
Dc.b "0000000000000000"
Dc.b "0000000000000000"
Dc.b "0000000000000000"
Dc.b "0000000000000000"
Dc.b "0000000000000000"
Dc.b "0000000000000000"
Dc.b "0000000000000000"
Dc.b "0000000000000000"
Dc.b "0000000000000000"
Dc.b "0000000000000000"
Dc.b "0000000000000000"
 
Ds.l 64

;/*----------------------------------------------------------
;  Eof
;----------------------------------------------------------*/

