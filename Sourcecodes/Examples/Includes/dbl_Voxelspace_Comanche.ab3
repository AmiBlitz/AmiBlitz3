; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "//Bin"
; ExeFile         = "dbl_VoxelSpace"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 100000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 897
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 77
; CursorColumn    = 14
; LabelSearch     = "look"
; LabelRemark     = 0
; LabelAll        = 1
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 100
; Max GadgetList  = 100
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 200
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 100
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 1
; Max Buffer      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 10
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 100
; Max BlitzFont   = 1
; Max GTList      = 100
; Max BitMap      = 10
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 100
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; /XTRA
; --
; -- simple VoxelSpace-Demo conversion
; --
; -- inspired by VoxelSpace by Sebastian Macke
; -- github: https://github.com/s-macke/VoxelSpace/blob/master/VoxelSpace.html
; --
; -- mapdata is copyright 1992 by Nova Logic
; --
;
OPTIMIZE 7 ; - FPU on strongly advised
SYNTAX 6

XINCLUDE "dbl_display.include.ab3"
XINCLUDE "eclock.include.ab3"
XINCLUDE "image_ext.include.ab3"

#display_width   = 320 ;640 ;1024
#display_height  = 256 ;480 ; 768
#display_bgcolor = $9090E0

NEWTYPE.input
  forwardbackward.q
  leftright.q
  updown.q
  lookup.q
  lookdown.q
End NEWTYPE

NEWTYPE.camera
  x.q
  y.q
  height.q
  angle.q
  horizon.q
  distance.w
End NEWTYPE

NEWTYPE.map
  posx.w
  posy.w
  scalefactor.q
  width.w
  height.w
  widthperiod.w
  heightperiod.w

  scalefx.q
  scalefy.q

  stepping.b
  shift.w
End NEWTYPE

DEFTYPE.input _input
DEFTYPE.camera camera
camera\x = 512.0
camera\y = 800.0
camera\height = 78.0
camera\angle = 0.0
camera\horizon = 100.0
camera\distance = 800

DEFTYPE.map map
Dim altitude.b(1024*1024)       ; fix sized array to keep it simple
Dim color.l(1024*1024)
Dim hiddeny.l(#display_width)


;
Statement DrawVerticalLine{x.l, ytop.l, ybottom.l, color.l}
  SHARED map
  If ytop < 0 Then ytop = 0
  If ytop > ybottom Then Statement Return
  If map\stepping<>1
    dbl_QBox24{color,x,ytop,x+map\stepping,ybottom}
  Else
    dbl_QLine24{color,x,ytop,x,ybottom}
  EndIf
End Statement

Macro DrawBackground
  dbl_BGBox24{#display_bgcolor,0,0,#display_width,#display_height}
End Macro

Statement Render{}
  SHARED camera, map, altitude(), color(), hiddeny()

  sinang.q = Sin(camera\angle)
  cosang.q = Cos(camera\angle)

  ; reset hidden
  For x.l = 0 To #display_width
    hiddeny(x) = #display_height
  Next x

  ; Draw from front to back
  deltaz.f = 1.0
  For z.q = 1 To camera\distance Step deltaz
    ; 90 degree field of view
    plx.q =  -cosang * z - sinang * z
    ply.q =   sinang * z - cosang * z
    prx.q =   cosang * z - sinang * z
    pry.q =  -sinang * z - cosang * z

    dx.q = (prx - plx) / (#display_width / map\stepping)
    dy.q = (pry - ply) / (#display_width / map\stepping);height)

    plx + camera\x
    ply + camera\y

    invz.f = 1.0 / z * 240.0

    For x = 0 To #display_width Step map\stepping

      mapoffset.l = ((Int(ply) AND map\widthperiod) LSL map\shift) + (Int(plx) & map\heightperiod)
      alt.w = altitude(mapoffset)
      color.l = color(mapoffset)

      heightonscreen.l = (camera\height - alt) * invz + camera\horizon
      DrawVerticalLine{x, heightonscreen, hiddeny(x), color}
      If (heightonscreen < hiddeny(x)) Then hiddeny(x) = heightonscreen

      plx + dx
      ply + dy
    Next x

    deltaz + 0.005

  Next z

End Statement

; -- MAINPROGRAM ------------------------------------------------------------
.MAIN
WBStartup : WbToScreen 0 : ScreenToFront_ Peek.l(Addr Screen(0))
NoCli
; --
; --  preload map datas
Gosub generate_tables

; --
; -- open the doublebuffering-display
If NOT dbl_Init {"VoxelSpace2",-1,#display_width,#display_height,16}
  error{"coult not initiate the double buffering area !"}
  End
EndIf
AddIDCMP #IDCMP_DELTAMOVE
Activate 0


time.l = 0 : current.l  = 0
osmousex.w = 0 : osmousey.w = 0

dbl_SetFPS{#dbl_fps_free} ; dont limit the maximum FPS
!DrawBackground
Repeat
  dbl_Flip{}      ; switch the doublebuffer
  dbl_Unqueue{}   ; delete all objects, drawn with dbl_q*-Functions

  ; -----------------------------------------  draw landscape
  Render{}

  ; -----------------------------------------  draw the map
  dbl_QBlit{0,map\posx,map\posy,map\scalefactor}
  posx.w = map\posx + Int(camera\x * map\scalefx * map\scalefactor)
  posy.w = map\posy + Int(camera\y * map\scalefy * map\scalefactor)
  dbl_QPlot24{$FFFFFF,posx,posy}

  ; ----------------------------------------- update camera
  current.l = Timer
  If _input\forwardbackward<>0
    camera\x - _input\forwardbackward * Sin(camera\angle) * (current-time) * 0.05
    camera\y - _input\forwardbackward * Cos(camera\angle) * (current-time) * 0.05
  EndIf
  If _input\leftright<>0 Then camera\angle + _input\leftright * 0.1 * (current-time) * 0.05
  If _input\updown<>0 Then    camera\height + _input\updown * (current-time) * 0.05
  If _input\lookup Then       camera\horizon + 2 * (current-time) * 0.05
  If _input\lookdown Then     camera\horizon - 2 * (current-time) * 0.05

  ; collision detection
  mapoffset.l = (Int(camera\y) AND (map\width-1)) LSL map\shift + (Int(camera\x) AND (map\height-1))
  If altitude(mapoffset) + 10.0 > camera\height
    camera\height = altitude(mapoffset) + 10.0
  EndIf

  ; sync with map on screen
  If camera\x < 0 Then camera\x = map\width-camera\x
  If camera\x > map\width Then camera\x = 0
  If camera\y < 0 Then camera\y = map\height-camera\y
  If camera\y > map\height Then camera\y = 0



  ; ----------------------------------------- event handler
  ev.l = Event : qu.l = EventQualifier
  Select ev
  Case #IDCMP_MOUSEBUTTONS
    If (qu AND $FFFFC000)
      _input\forwardbackward = 5.0
    Else
      _input\forwardbackward = 0.0
      _input\leftright = 0.0
      _input\updown = 0.0
    EndIf

  Case #IDCMP_MOUSEMOVE
    If _input\forwardbackward <> 0
      _input\leftright = (osmousex - SMouseX) / (#display_width / 32)
      _input\updown = (osmousey - SMouseY) / (#display_height / 32)
      camera\horizon = 100.0 + (-(SMouseY - osmousey) / #display_height) * 96.0
      osmousey = SMouseY
      osmousex = SMouseX
    EndIf

  Case #IDCMP_RAWKEY
    ; -- Key pressed
    Select RawKey
    Case $4d: _input\forwardbackward + -3.0   ; -- cursor down
    Case $21: _input\forwardbackward + -3.0   ; -- s

    Case $4c: _input\forwardbackward + 3.0    ; -- cursor up
    Case $11: _input\forwardbackward + 3.0    ; -- w

    Case $4e: _input\leftright = -1.0         ; -- cursor right
    Case $22: _input\leftright = -1.0         ; -- d

    Case $4f: _input\leftright = 1.0          ; -- cursor left
    Case $20: _input\leftright = 1.0          ; -- a

    Case $12: _input\lookup = True            ; -- e
    Case $13: _input\updown = 2.0             ; -- r
    Case $23: _input\updown = -2.0            ; -- f
    Case $10: _input\lookdown = True          ; -- q

    Case $5E: map\stepping * 2                ; -- +
      If map\stepping > 8 Then map\stepping  = 8
    Case $4A: map\stepping / 2                ; -- -
      If map\stepping < 1 Then map\stepping  = 1
    Case $45: exit.b = True                   ; -- esc

    ; -- Key released
    ;Case $91: _input\forwardbackward = 0      ; up
    ;Case $A1: _input\forwardbackward = 0      ; down
    Case $A2: _input\leftright = 0            ; right
    Case $A0: _input\leftright = 0            ; left
    Case $92: _input\lookup = False           ; -- e
    Case $93: _input\updown = 0               ; -- r
    Case $A3: _input\updown = 0               ; -- f
    Case $90: _input\lookdown = False         ; -- q
    End Select
  End Select
  FlushEvents
  time = current

  ; -- update displays

  ;dbl_QPrint{"x:" + Str$(Int(px)) + " z:" + Str$(Int(pz)) + " Richtung: "+Str$(blickwinkel_grad)+Chr$(176),0,20,2}
  fps.f = dbl_GetFPS{10}
  dbl_QPrint{"FPS: "+Str$(Int(fps)),#display_width-108,0,0}
  dbl_QPrint{"s: " + Str$(_input\forwardbackward),#display_width-108,12}
  dbl_QPrint{"h: " + Str$(camera\horizon),#display_width-108,26}
  dbl_QPrint{"a: " + Str$(camera\angle),#display_width-108,38}
  dbl_QPrint{"key: " + Hex$(RawKey),0,0,0}
Until exit = True

ScreenToFront_ Peek.l(Addr Screen(0)) : CloseWindow 2
!coutclose
End


.generate_tables
  ; -- load the images
  postfix$=""
  image_Load{0,"/data/map/C1W"+postfix$+".png"}
  image_Load{1,"/data/map/D1"+postfix$+".png"}

  map\width = 1024  ; image_GetWidth{0}
  map\height = 1024 ; image_GetHeight{0}
  map\widthperiod  = map\width - 1
  map\heightperiod = map\height - 1

  map\shift = 10    ; 1024
  map\stepping = 8  ; reduce horizontal resolution

  map\scalefx = image_GetWidth{0} / map\width * 1.0
  map\scalefy = image_GetHeight{0} / map\height * 1.0

  w.w = 0 : h.w = 0
  For i.l = 0 To map\width * map\height
      h = i LSR map\shift
      ws.w = w * map\scalefx
      hs.w = h * map\scalefy
      color(i) = image_GetRGB{0,ws,hs}
      altitude(i)= image_GetRGB{1,ws,hs} AND $FF
      w + 1 : If w = map\width Then w = 0
  Next i
  image_Free{1}

  map\scalefactor = 0.05 ;image_GetWidth{0} / 2
  map\posx = #display_width - (1.0 * image_GetWidth{0} * map\scalefactor) - 3
  map\posy = 3
Return
 

