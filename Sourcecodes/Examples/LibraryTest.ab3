; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "LIBS:"
; ExeFile         = ""
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 36
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 74
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 60
; LabelAll        = 5
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
; test.include.bb2 automatically generated by FD2Include (Thilo Koehler)

OPTIMIZE 7
SYNTAX 2
WBStartup
XINCLUDE "error.include.ab3"

; Library offsets:
#_LVO_TESTBASE_AddTwoIntegers = -30
#_LVO_TESTBASE_SubTwoIntegers = -36

SHARED *_TestBase.Library

; Helper Macros:
Macro __TestBase_SaveRegs
MOVE.l a4,-(a7) : MOVE.l a5,-(a7) : MOVE.l a6,-(a7) : MOVE.l d7,-(a7)
End Macro

Macro __TestBase_RestoreRegs
MOVE.l (a7)+,d7 : MOVE.l (a7)+,a6 : MOVE.l (a7)+,a5 : MOVE.l (a7)+,a4
End Macro


; Wrapper Macros:
Macro test_AddTwoIntegers;{ret.l,a,b}
!__TestBase_SaveRegs
GetReg d0,`2
GetReg d1,`3
GetReg a6,*_TestBase
JSR _LVO_TESTBASE_AddTwoIntegers(a6)
!__TestBase_RestoreRegs
`1 = PutD0
End Macro

Macro test_SubTwoIntegers;{ret.l,a,b}
!__TestBase_SaveRegs
GetReg d0,`2
GetReg d1,`3
GetReg a6,*_TestBase
JSR _LVO_TESTBASE_SubTwoIntegers(a6)
!__TestBase_RestoreRegs
`1 = PutD0
End Macro


; Open/Close Library:
Function.l test_OpenLib{@minVersion.l}
If (*_TestBase)
  If (minVersion<=*_TestBase\lib_Version) Then Function Return *_TestBase
  CloseLibrary_ *_TestBase : *_TestBase = 0
End If
If minVersion<0 Then minVersion = 0
*_TestBase = OpenLibrary_ ("test.library",minVersion)
If *_TestBase
  ; (!) Do some other init stuff here...
Else
  If (minVersion>0)
    error{"Unable to open test.library (v"+Str$(minVersion)+"+)!"}
  Else
    error{"Unable to open test.library!"}
  End If
End If
Function Return *_TestBase
End Function

Statement test_CloseLib{}
If *_TestBase
  ; (!) Do some freeing stuff here that you inited in _TestBase_Init{}...
  CloseLibrary_ *_TestBase : *_TestBase = 0
End If
End Statement
!autoexit{test_CloseLib}


; Wrapper Functions:
Function.l test_AddTwoIntegers{_a.l,_b.l}
If (test_OpenLib{}) ; (!) put your min version here if needed!
  !test_AddTwoIntegers{result.l,_a,_b}
End If
Function Return result
End Function

Function.l test_SubTwoIntegers{_a.l,_b.l}
If (test_OpenLib{}) ; (!) put your min version here if needed!
  !test_SubTwoIntegers{result.l,_a,_b}
End If
Function Return result
End Function



a.l = 7
b.l = 3
Stop
c.l = test_AddTwoIntegers{a,b}
NPrint a,"+",b," = ",c
c.l = test_SubTwoIntegers{a,b}
NPrint a,"-",b," = ",c

End



