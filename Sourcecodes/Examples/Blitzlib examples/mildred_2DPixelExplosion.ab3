; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 0
; FuncOptimize    = 0
; Version         = 0.0.0
; NumberOfBuilds  = 9
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 111
; CursorColumn    = 10
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelCase       = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 5
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 20
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max BlitzFont   = 4
; Max Window      = 20
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max TagList     = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA

;Pixel Explosion Mildred Library Example.
;
;Programmed by : Mikkel Loekke, aka. FlameDuck.
;
;Please read the README file.

;                  __ _
;Modified by Sami Naatanen (25.01.1999)
; Just made it faster and more "realistic"
; Can now do easily 4000 pixels and 060 with 10000 stars is still
; super smooth! In fact 15000 stars runs quite smooth
; (some jerking at the beginning).

WBStartup
NoCli

degrad.q = Pi/180

NEWTYPE .point
  x.q
  y.q
  anglx.q
  angly.q
End NEWTYPE

#numpnts=4000                       ; Change this for more or less points.

Dim pnt.point (#numpnts)

DEFTYPE.l

MCPU Processor                      ; Tell Mildred which CPU it should use.
Mc2pCPUmode Processor               ; Tell Mildred which CPU it should use for c2p.

MReserveBitmaps 1                   ; Tell Mildred that we're going to use 1 chunky bitmap.
MReservec2pWindows 1                ; Tell it we only need one c2p display.
MReserveShapes 1                    ; Tell Mildred that we need a shape aswell.

InitPalette 0,256                   ; Setup a grayscale palette.
For t.l=0 To 255
  AGAPalRGB 0,t,t,t,t
Next

.initgraphics
MBitmap 0,320,256                   ; This will contain our chunky buffer.

Mc2pWindow 0,320,256                ; Setup structures for c2p conversions.

*pbb.l=AllocMem(320*256,$10002)     ; Get some free CHIP memory
If *pbb.l                           ; and if we succeed
  CludgeBitMap 0,320,256,8,*pbb     ; make it a planar bitmap.
Else End
EndIf

Dim scrtaglst.TagItem(7)            ; All this stuff sets up our
scrtaglst(0)\ti_Tag = #SA_Left      ; Taglist for the screen we
scrtaglst(0)\ti_Data = 0            ; want.
scrtaglst(1)\ti_Tag = #SA_Depth
scrtaglst(1)\ti_Data = 8
scrtaglst(2)\ti_Tag = #SA_Width
scrtaglst(2)\ti_Data = 320
scrtaglst(3)\ti_Tag = #SA_Height
scrtaglst(3)\ti_Data = 256
scrtaglst(4)\ti_Tag = #SA_BitMap
scrtaglst(4)\ti_Data = Addr BitMap (0)
scrtaglst(5)\ti_Tag = #SA_ShowTitle
scrtaglst(5)\ti_Data = 0
scrtaglst(6)\ti_Tag = #SA_Draggable
scrtaglst(6)\ti_Data = 0
scrtaglst(7)\ti_Tag = #TAG_END      ; The most important tag of them all.

ScreenTags 0,"MildredDEMO",&scrtaglst(0) ; Open our intuition screen.

ShowPalette 0                       ; Attach our palette to the screen.


Dim cin.q(359),kos.q(359)

For t.l=0 To 359
  cin(t)=Sin(degrad*t)
  kos(t)=Cos(degrad*t)
Next t
.goagain                            ; A Label that tells us where to go
                                    ; to reset all our variables
For t.l=0 To #numpnts
  pnt(t)\x=160
  pnt(t)\y=128
  r.w=Rnd(359)
  v.q=Rnd(Rnd(4.4)+3)+Rnd(1.6)
  pnt(t)\anglx=cin(r)*v
  pnt(t)\angly=kos(r)*v
Next

phase.w=0
Repeat                              ; Repeat our mainloop ....
  Mc2p *pbb                         ; Convert our chunky buffer to
                                    ; our planar bitmap.
  MCls                              ; Clear our chunky buffer
  pntskip.w=0
  For t=0 To #numpnts               ; Boring math part. It's really
                                    ; not as complicated as it looks
    If (pnt(t)\y>0 AND pnt(t)\y<256) AND (pnt(t)\x>0 AND pnt(t)\x<320)
      MPlot pnt(t)\x,pnt(t)\y,255-phase
      pnt(t)\x-pnt(t)\anglx
      pnt(t)\y-pnt(t)\angly
    Else
      pntskip+1
    EndIf
  Next
  phase+2:If phase=256 Then pntskip=#numpnts
  VWait 1
Until RawStatus($45) OR pntskip=#numpnts  ; .... Until we press Escape, or the fade is complete.
If pntskip=#numpnts Then Goto goagain     ; If the fade completed, reset variables, and go again.
End                                 ; End our nice program.

