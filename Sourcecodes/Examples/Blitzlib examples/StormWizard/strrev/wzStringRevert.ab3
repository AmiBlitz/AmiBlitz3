; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "StormWizardApp"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 19
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8192
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 20
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 5
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max Window      = 50
; Max BlitzFont   = 4
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;/////////////////////////////////////////////////////////////////////////////////
;/                                                                               /
;/ wzStringRevert - a Storm Wizard GUI App coded in AmiBlitz3                    /
;/                                                                               /
;/ Author: Micha B. - February 2023                                              /
;/                                                                               /
;/ Description:                                                                  /
;/ This demo app shows how to code a wzlib-driven programm that uses a           /
;/ StormWizard-generated GUI. Topics like reading and writing to/from            /
;/ different Gadgets, reacting on Menu and Gadget Events, user-defined           /
;/ function for reverting strings are demonstrated.                              /
;/                                                                               /
;/ Usefull functions:                                                            /
;/ ==================                                                            /
;/ WZWindow - interprete data from a StormWizard resource                        /
;/ EventWindow - determine in which window an event happened                     /
;/ Str$ - convert a number to a string                                           /
;/ WZID - identifies a given gadget by its StormWizard object name               /
;/ WZPrint - set value for a given gadget                                        /
;/ WZGetString - get string value from a given gadget                            /
;/                                                                               /
;/////////////////////////////////////////////////////////////////////////////////

; ------------------------------------------------------------------------------
; --- For convenience: Gadgets used in this project declared as constants    ---
; -- Those are generated by StormWizard if ToolTypes are set as follows:      --
; -- HEADER_FORMAT=#%s = %ld                                                  --
; -- HEADER_SUFFIX=_inc.ab3                                                   --
; -- NOTE: You have to copy the values from the generated .ab3 file into      --
; --       your main source file. You also might tokenize that file by        --
; --       XINCLUDEing it afterwards instead.                                 --
; --                                                                          --
; -- You can use those constants in order to identify Gadgets/Menus instead   --
; -- of WZID "GADGET" (see example code)                                      --
; ------------------------------------------------------------------------------
XINCLUDE "StringRevert_inc.ab3"

; control the optimizer ...
; [1] integer optimizer, exe will need 68020+ CPU
; [2] floating point usage, exe will need 68881+ FPU
; [4] AB3 compiler extentions
OPTIMIZE 5 ; = 1|2|4

; compile with more strict syntax, that is very useful for larger projects
SYNTAX 4

; --- FUNCTION: Revert a given String ---
Function.s ReverseString{myString.s}
  DEFTYPE.b i
  DEFTYPE.s wstring1, rString

  ; Array for keeping characters in reversed order
  Dim myOut.s(Len(myString))

  ; Lets lowercase our String
  wstring1 = LCase$( myString )

  ; get characters one after another in reversed order
  ; and store them in an Array.
  For i = Len(myString) To 1 Step -1
    myOut(i) = Mid$(wstring1, i, 1)
    rString = rString + myOut(i)
  Next i

  Function Return rString
End Function

; give our tool a version string including the compile date
!version {"wzRevertString 1.0 (\\__DATE_GER__)"}

; we need to include the WBStartup Code
WBStartup

; use the frontmost screen as screen object 0
FindScreen 0

; interpret the data found in the included wizard resource
WZWindow 1,?wzdata,100
exit.l = False

Repeat
  ev.l=WaitEvent ; wait until an event occures
  Use Window EventWindow
  Select EventWindow
    Case 1 ; the messages for first window flow here
      Select ev
        Case #IDCMP_CLOSEWINDOW:
          exit=True                ;quit the program
        Case #IDCMP_MENUPICK:     ; here come the menu messages
          Select WZMenuName
            Case "MN_QUIT":exit=True
          End Select
        Case #IDCMP_IDCMPUPDATE   ; here come the Gadget messages.
          Select WZGadName
          ; here come the case to do the action on Gadget pressing
          ;WZPrint set gadget values AND WZInput can Get them.
          ;For the current pressed gadget value Call WZInput without any parameter.
          Case "BTN_CLEAR"
            WZPrint #TI_IN, ""
            WZPrint #TI_OUT, ""

          Case "BTN_REVERT"
            WZPrint "TI_OUT", ReverseString{WZGetString( "TI_IN")}
           End Select
       End Select
    ; here can add more case if you want support more windows
  End Select
Until exit

End ; never forget "End", it closes the window for us and frees all resources

; include the data file that contains the wizard GUI
; Note: this must be somewere AFTER the End instruction, so that it never gets executed!
wzdata: IncBin "StringRevert.wizard"

