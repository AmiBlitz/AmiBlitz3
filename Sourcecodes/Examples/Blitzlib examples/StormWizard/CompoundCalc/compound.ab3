; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "zins"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 1.0.2
; NumberOfBuilds  = 137
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8192
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 29
; CursorColumn    = 58
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 20
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 5
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max Window      = 50
; Max BlitzFont   = 4
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;///////////////////////////////////////////////////////////////////////////////
;/                                                                             /
;/ CompoundCalc - a Storm Wizard GUI App coded in AmiBlitz3                    /
;/                                                                             /
;/ Author: Micha B. - February 2023                                            /
;/                                                                             /
;/ Description:                                                                /
;/ This demo app shows how to code a wzlib-driven programm that uses a         /
;/ StormWizard-generated GUI. Topics like reading and writing to/from          /
;/ Text Gadgets, reacting on Menu and Gadget Events, creating and handling     /
;/ EasyRequesters are demonstrated.                                            /
;/                                                                             /
;/ Usefull functions:                                                          /
;/ ==================                                                          /
;/ WZWindow - interprete data from a StormWizard resource                      /
;/ EventWindow - determine in which window an event happened                   /
;/ OpenEasyReq - opens an intuition EasyRequester                              /
;/ Request - another way to open a Reqester                                    /
;/ Val - convert a number from a string to an integer value                    /
;/ Str$ - convert a number to a string                                         /
;/ WZID - identifies a given gadget by its StormWizard object name             /
;/ WZPrint - set value for a given gadget                                      /
;/ WZInput - get numeric value from a given gadget                             /
;/ WZGetString - get string value from a given text gadget                     /
;/ DefaultOutput - redirects NPrint to Console output                          /
;/                 (instead of printing to the GUI)                            /
;/                                                                             /
;///////////////////////////////////////////////////////////////////////////////

; control the optimizer ...
; [1] integer optimizer, exe will need 68020+ CPU
; [2] floating point usage, exe will need 68881+ FPU
; [4] AB3 compiler extentions
OPTIMIZE 4 ; = 1|2|4

; compile with more strict syntax, AB3 extensions enabled, that is very useful for larger projects
SYNTAX 4

;-> Requester constants, memory allocation when used
#OK = 2
#CANCEL = 2

; --- Declare some usefull variables ---
DEFTYPE.d interest, deposit_rate, runtime, result
DEFTYPE.l retval, exit
DEFTYPE.s req_about, req_quit


;--- Message strings for OpenEasyRequest() ---
;-> First, lets build a decent "About" requester...
req_about.s =  "AmiBlitz 3 CompountCalc v" + Str$("\\__VER_MAJOR") + "." + Str$("\\__VER_MINOR") + "." + Str$("\\__VER_PATCH") + "." + Str$("\\__VER_BUILD")
req_about.s = req_about.s + "\\ncompiled on " + Str$("\\__DATE__")
req_about.s = req_about.s + "\\n\\n" + "based on an example by Bernd Roesch" + "\\n\\n" + "Author: Micha B.\\nWeb: www.amiga.mbergmann-sh.de"
;-> Now lets make a security request for quitting the app..
req_quit.s  =  "CompountCalc v\\__VER_MAJOR.\\__VER_MINOR\\n\\nDo you really want to quit?"

; give our tool a version string including the compile date
!version {"CompoundCalc v\\__VER_MAJOR.\\__VER_MINOR.\\__VER_PATCH.\\__VER_BUILD (\\__DATE__)"}

; we need to include the WBStartup Code
WBStartup

; use the frontmost screen as screen object 0
FindScreen 0

; interpret the data found in the included wizard resource
WZWindow 1,?wzdata,250
exit.l = False

Repeat
  ev.l=WaitEvent ; wait until an event occures
  Use Window EventWindow
  Select EventWindow
    Case 1 ; the messages for first window flow here
      Select ev
        Case #IDCMP_CLOSEWINDOW:
          DefaultOutput
          NPrint("QUIT requested from IDCMP_CLOSEWINDOW")
           ;-> lets check if user really wants to quit...
           retval.l= OpenEasyReq("Quit CompoundCalc...", req_quit.s, "_OK|_Cancel")
           Select retval.l
             Case #OK:
               exit = True   ; quit the Program
             Case #CANCEL:
               ; -> do nothing...
            End Select

       Case #IDCMP_MENUPICK:     ; here come the menu messages
          Select WZMenuName
           Case "MN_DEFAULT" : DefaultOutput : NPrint("DEFAULT requested from menu")
             WZPrint WZID("DEPOSIT"), ""
             WZPrint WZID("INTEREST"), ""
             WZPrint WZID("YEARS"), ""
             WZPrint WZID("RESULT"), ""
             ;-> give some nice feedback to the user...
             Request "Default values","Me, I just emptied all those string gadgets...","I saw you doing that. You are so smart, cutie!"

           Case "MN_ABOUT":
              DefaultOutput
              NPrint("ABOUT requested from menu")

              retval.l=OpenEasyReq("About this App...", req_about.s, "Cute. Go brew some coffee now!")

            Case "MN_QUIT":
              DefaultOutput
              NPrint("QUIT requested from menu")
              ;-> lets check if user really wants to quit...
              retval.l= OpenEasyReq("Quit CompoundCalc...", req_quit.s, "_OK|_Cancel")
              Select retval.l
                Case #OK:
                  exit = True   ; quit the Program
                Case #CANCEL:
                  ; -> do nothing...
              End Select
          End Select

       Case #IDCMP_IDCMPUPDATE   ; here come the Gadget messages.
          Select WZGadName
          ; For the current pressed gadget value call WZInput without any parameter.
             Case "DEFAULTBTN" : DefaultOutput : NPrint("Button Default pressed")
               WZPrint WZID("DEPOSIT"), ""
               WZPrint WZID("INTEREST"), ""
               WZPrint WZID("YEARS"), ""
               WZPrint WZID("RESULT"), ""

               ;-> give some nice feedback to the user...
               Request "Default values","Me, I just emptied all those string gadgets...","I saw you doing that. You are so smart, cutie!"

             Case "CALCBTN" : DefaultOutput : NPrint("Button Calculation pressed")
               ;-> get Gadget values
               deposit.d        = Val(WZGetString(WZID("DEPOSIT")))
               interest_rate.d  = Val(WZGetString(WZID("INTEREST")))
               runtime.d        = Val(WZGetString(WZID("YEARS")))

               ;->calculate final amount
               ;FORMULA: Endkapital = Anfangskapital * (1 + Zinssatz / 100) ^ Jahre
               result.d = deposit.d * (1 + interest_rate.d / 100) ^ runtime.d

               ;-> display result
               WZPrint WZID("RESULT"), Str$(result.d)
          End Select
       End Select
       ; here can add more case if you want support more windows
  End Select
Until exit

End ; never forget "End", it closes the window for us and frees all resources

; include the data file that contains the wizard GUI
; Note: this must be somewere AFTER the End instruction, so that it never gets executed!
wzdata: IncBin "compound.wizard"

