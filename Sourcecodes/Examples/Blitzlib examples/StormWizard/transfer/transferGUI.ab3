; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "TransferGUI"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10000
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 26
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8192
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 35
; CursorColumn    = 82
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max File        = 20
; Max GadgetList  = 5
; Max Shape       = 100
; Max Bank        = 5
; Max MenuList    = 5
; Max GTList      = 5
; Max Palette     = 4
; Max BitMap      = 10
; Max Screen      = 5
; Max IntuiFont   = 5
; Max Window      = 50
; Max BlitzFont   = 4
; Max IconInfo    = 1
; Max MUIObject   = 50
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max Tape        = 5
; Max Sound       = 10
; Max MedModule   = 8
; Max Buffer      = 10
; Max Queue       = 10
; Max Sprite      = 20
; Max Module      = 5
; Max Slice       = 10
; Max Page        = 4
; Max CopList     = 10
; Max PTModule    = 5
; Max Anim        = 10
; Max NChunky     = 50
; Max Chunky      = 20
; Max Stencil     = 5
; Max XBSound     = 10
; /XTRA
;/////////////////////////////////////////////////////////////////////////////////
;/                                                                               /
;/ transferGUI - a Storm Wizard GUI App coded in AmiBlitz3                       /
;/                                                                               /
;/ Author: Micha B. - February 2023                                              /
;/                                                                               /
;/ Description:                                                                  /
;/ This demo app shows how to code a wzlib-driven programm that uses a           /
;/ StormWizard-generated GUI. Topics like reading and writing to/from            /
;/ different Gadgets, reacting on Menu and Gadget Events, enable/disable Gadgets /
;/ and Menus, opening more than one window, transfering data between two         /
;/ windows are demonstrated.                                                     /
;/                                                                               /
;/ Usefull functions:                                                            /
;/ ==================                                                            /
;/ WZWindow - interprete data from a StormWizard resource                        /
;/ EventWindow - determine in which window an event happened                     /
;/ Str$ - convert a number to a string                                           /
;/ WZID - identifies a given gadget by its StormWizard object name               /
;/ WZPrint - set value for a given gadget                                        /
;/ WZInput - get numeric value from a given gadget                               /
;/ WZEnable - enable a given gadget                                              /
;/ WZDisable - disable a given gadget                                            /
;/ WZMenuOn - enable a certain menu entry or whole menu                          /
;/ WZMenuOff - disable a certain menu entry or whole menu                        /
;/ DefaultOutput - redirects NPrint to Console output                            /
;/                 (instead of printing to the GUI)                              /
;/ Check, if a certain Window is open or not:                                    /
;/      *wzwin.Window = Peek.l( Addr Window( WZID("WIN2") ) )                    /
;/ Results:                                                                      /
;/             *wzwin = 0 - Window is not open                                   /
;/             *wzwin > 0 - Window is open                                       /
;/                                                                               /
;/////////////////////////////////////////////////////////////////////////////////

; ------------------------------------------------------------------------------
; --- For convenience: Gadgets used in this project declared as constants    ---
; -- Those are generated by StormWizard if ToolTypes are set as follows:      --
; -- HEADER_FORMAT=#%s = %ld                                                  --
; -- HEADER_SUFFIX=_inc.ab3                                                   --
; -- NOTE: You have to copy the values from the generated .ab3 file into      --
; --       your main source file. You also might tokenize that file and       --
; --       XINCLUDE it afterwards instead.                                    --
; --                                                                          --
; -- You can use those constants in order to identify Gadgets/Menus instead   --
; -- of WZID "GADGET" (see example code)                                      --
; ------------------------------------------------------------------------------

XINCLUDE "transfer_inc.ab3"

DEFTYPE.l slider_one_value, integer_one_value
DEFTYPE.l slider_two_value, integer_two_value

; control the optimizer ...
; [1] integer optimizer, exe will need 68020+ CPU
; [2] floating point usage, exe will need 68881+ FPU
; [4] AB3 compiler extentions
OPTIMIZE 5 ; = 1|2|4

; compile with more strict syntax, that is very useful for larger projects
SYNTAX 4

; give our tool a version string including the compile date
!version {"transferGUI 1.0 (\\__DATE__)"}

; we need to include the WBStartup Code
WBStartup

; use the frontmost screen as screen object 0
FindScreen 0

; interpret the data found in the included wizard resource
WZWindow 1,?wzdata,100
WZWindow 2,?wzdata,100
exit.l = False

Repeat
  ev.l=WaitEvent ; wait until an event occures
  Use Window EventWindow
  ; --- Handle WIN1 events -----------------------------------
  Select EventWindow
    Case 1 ; the messages for first window flow here
      Select ev
        Case #IDCMP_CLOSEWINDOW:
          exit=True                ;quit the program
        Case #IDCMP_MENUPICK:     ; here come the menu messages
          Select WZMenuName
            Case "MN_OPENW2"
              ;-> Set start values according to WIN1
              slider_two_value.l  = WZInput(#HS_ONE)

              WZMenuOff "MN_OPENW2"    ; disable Menu entry "ReOpen Window TWO" in Window ONE
              WZWindow 2,?wzdata,100   ; ReOpen WIN2

              Use Window #WIN2
              WZPrint #HS_TWO, slider_two_value.l
              WZPrint #IG_TWO, slider_two_value.l
              Use Window #WIN1

            Case "MN_QUIT":exit=True
          End Select
        Case #IDCMP_IDCMPUPDATE   ; here come the Gadget messages.
          Select WZGadName
          ; here come the case to do the action on Gadget pressing
          ;WZPrint set gadget values AND WZInput can Get them.
          ;For the current pressed gadget value Call WZInput without any parameter.
          Case "HS_ONE":
            ; --- DEBUG ----
            DefaultOutput
            NPrint("Slider ONE value: "+ Str$(WZInput(#HS_ONE)))

            ; check, if WIN2 is actually opened! Writing values to a ressource that
            ; is actually not available would lead to CRASH otherwise!
            *wzwin.Window = Peek.l(Addr Window(WZID("WIN2") ) )
            If *wzwin > 0
              ; --- Transfer value to #WIN2's HS_TWO slider gadget ---
              slider_one_value.l = WZInput(#HS_ONE)  ; first, store value in a variable...
              Use Window #WIN2                       ; second, set active window to WIN2...
              WZPrint #HS_TWO, slider_one_value.l    ; ...and finally change value of WIN2 slider and integer gadgets.
              WZPrint #IG_TWO, slider_one_value.l
            EndIf

          Case "IG_ONE"
            ; --- DEBUG ---
            DefaultOutput
            NPrint("Integer ONE value: " + Str$(WZInput(#IG_ONE)) )

            ; check, if WIN2 is actually opened! Writing values to a ressource that
            ; is actually not available would lead to CRASH otherwise!
            *wzwin.Window = Peek.l(Addr Window(WZID("WIN2") ) )
            If *wzwin > 0
              integer_one_value.l = WZInput(#IG_ONE)  ; first, store value in a variable...
              Use Window #WIN2                        ; second, set active window to WIN2...
              WZPrint #HS_TWO, integer_one_value.l    ; ...and finally change value of WIN2 slider and integer gadgets.
              WZPrint #IG_TWO, integer_one_value.l
            EndIf

           End Select
       End Select

    ; --- Handle WIN2 events -----------------------------------
    Case 2
      Select ev
        Case #IDCMP_CLOSEWINDOW:
          Use Window #WIN1
          WZMenuOn "MN_OPENW2"    ; enable Menu entry "ReOpen Window TWO" in Window ONE
          WZCloseWindow #WIN2     ; quit the program

        Case #IDCMP_IDCMPUPDATE   ; here come the Gadget messages.
          Select WZGadName
          ; here come the case to do the action on Gadget pressing
          ;WZPrint set gadget values AND WZInput can Get them.
          ;For the current pressed gadget value Call WZInput without any parameter.
          Case "HS_TWO":
            ; --- Transfer value to #WIN1's HS_TWO slider gadget           ---
            ; --- Since WIN1 is allways open, there is no need to check it ---
            slider_two_value.l = WZInput(#HS_TWO)  ; first, store value in a variable...
            Use Window #WIN1                       ; second, set active window to WIN1...
            WZPrint #HS_ONE, slider_two_value.l    ; ...and finally change value of WIN1 slider and integer gadgets.
            WZPrint #IG_ONE, slider_two_value.l

          Case "IG_TWO"
            integer_two_value.l = WZInput(#IG_TWO)  ; first, store value in a variable...
            Use Window #WIN1                        ; second, set active window to WIN2...
            WZPrint #HS_ONE, integer_two_value.l    ; ...and finally change value of WIN2 slider and integer gadgets.
            WZPrint #IG_ONE, integer_two_value.l
           End Select
       End Select

  End Select
Until exit

End ; never forget "End", it closes the window for us and frees all resources

; include the data file that contains the wizard GUI
; Note: this must be somewere AFTER the End instruction, so that it never gets executed!
wzdata: IncBin "transfer.wizard"

