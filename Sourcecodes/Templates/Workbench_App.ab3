; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "RAM:"
; ExeFile         = "WorkbenchApp"
; CreateIcon      = 1
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10000
; MakeSmallest    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 2
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8192
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 50
; CursorColumn    = 15
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 50
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 50
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 50
; /XTRA
; Workbench App Template

; control the compiler ...
; 1 : integer optimizer, exe will need 68020+ CPU
; 2 : floating point usage, exe will need 68881+ FPU
; 4 : allow AB3 compiler extentions
OPTIMIZE 5 ; = 1|4
 
; do some more strict syntax (e.g. declare variables),
; which is very useful for larger projects
SYNTAX 2

; we need to include the WBStartup Code
WBStartup

; use the WB screen as screen object 0
WbToScreen 0

; give our WB App a version string
!version {"MyWBApp 1.0 (\\__DATE_GER__)"}

; include some includes we are going to use
XINCLUDE "dos.include.ab3"        ; AmigaDOS related functions
XINCLUDE "intuition.include.ab3"  ; dealing with IntuiMessages
XINCLUDE "app.include.ab3"        ; App functionality


; declare our own constants
#notify_popup    = 1
#notify_icondrop = 2
#notify_windrop  = 3


; open a simple window with a menu and a button
Statement OpenGUI{}

  WindowFlags.l = #WFLG_CLOSEGADGET|#WFLG_DRAGBAR|#WFLG_DEPTHGADGET|#WFLG_ACTIVATE|#WFLG_SIZEGADGET
  Window 0,10,10,320,200,WindowFlags,"MyWBApp",1,0 ; open the window

  app_AddWin {0,#notify_windrop}  ; add App functionality to the window
  app_HideIcon{}   ; hide the AppIcon

  GTMenuTitle 0,0,"Project"           ; create a menu
  GTMenuItem 0,0,0,0,"Iconfiy","i"
  GTMenuItem 0,0,0,0,"Quit","q"
  GTSetMenu 0  ; attach the menu list to the window

  GTButton 0,1,80,50,160,30,"Iconify",0 ; create a gadget list
  AttachGTList 0,0

  ShowScreen 0
End Statement


; close the gui
Statement CloseGUI{}
app_RemWin{0}     ; remove the app functionalityy
GTUnSetMenu       ; remove the menu list
DetachGTList 0    ; remove the gadget list
CloseWindow 0     ; close the window
Free GTMenuList 0 ; free the menu list
Free GTList 0
app_ShowIcon{}    ; show the AppIcon
End Statement


; get the tooltypes Arguments ...
dos_GetToolString{"MyString","Default"}
dos_GetToolValue {"MyValue",-1}

If app_Init {"MyApp","Blitz3:Amiblitz3","MyApp Menuitem",#notify_popup,#notify_icondrop} = False Then End

OpenGUI{}

intui_SigFlag.l = intui_GetSigFlag{}
app_SigFlag.l   = app_GetSigFlag{}
;..._SigFlag.l = ...  ; more sigflags we want to wait for, e.g. ahi, arexx or timer
SigFlags.l = intui_SigFlag|app_SigFlag

quitme.l = False
While quitme = False ; message loop
  signal.l = Wait_(SigFlags)  ; put the app to sleep until we receive a signal

  If signal&intui_SigFlag ; we got a signal from intuition
    While intui_GetEvent{}  ; get the idcmp type
      Select !event_idcmp  ; check what kind of event happends (#IDCMP_...)
        Case #IDCMP_CLOSEWINDOW  ; someone hit the close gadget
          quitme=True

        Case #IDCMP_GADGETUP
          ; check gadgets
          Select !event_gadgethit
            Case 1 ; gadget #1 is our iconify gadget
              CloseGUI{}
          End Select

        Case #IDCMP_MENUPICK
          ; ... check Menu Picks
          Select !event_menuhit
            Case 0 ; project >
              Select !event_itemhit
                Case 0 ; quit
                  quitme = True
                Case 1 ; iconfiy
                  CloseGUI{}
               End Select
          End Select
       ; Case #IDCMP_...
          ; see Definition Browser for more event types
          ; see intuition.include for more !event_ macros to retrive information about the event

        Default
          ; we are not interested in this event, so we do nothing

      End Select
    Wend
  End If

  If signal&app_SigFlag
    While app_GetEvent{}
      Select app_GetEventNotify{}
        Case #notify_popup
          OpenGUI{}
        Case #notify_icondrop
          message {"Dropped \\22"+app_GetEventString{}+"\\22 onto app icon!"}
        Case #notify_windrop
          message {"Dropped \\22"+app_GetEventString{}+"\\22 into our window at "+Str$(app_GetEventX{})+"/"+Str$(app_GetEventY{})+"!"}
        Default
          ; unknown message, will be ignored
      End Select
    Wend
  End If

; If signal&..._SigFlag
  ; check for other signals, such as ahi, arexx, timer etc.
; End if
Wend

End ; never forget "End", it closes the window for us and frees all resources


