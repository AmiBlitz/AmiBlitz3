; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "//Sourcecodes/Bin"
; ExeFile         = "test"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; Version         = 0.1.0
; NumberOfBuilds  = 125
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 16000
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 10
; CursorColumn    = 61
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 20
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 20
; /XTRA
;/* ========= Include NTUI ========== */
XINCLUDE "ntui.include.ab3" ;/* include the ntui functionality */
XINCLUDE "error.include.ab3"

;/* ========= Declarations ========== */
SHARED *ntui.tuiEngine ; make the tuiEngine omnipresent...
quit.l = False

;/* ========= Init Program ========== */
*ntui = ntui_GetEngine{ntui_BuildFromXMLMem{Null,?guiXml} } ; create a new engine from XML definition
If (*ntui = Null) Then error{"Unable to initialize NTUI environment!"} : End
If ntui_ShowWindowByID{*ntui,"mainwin"} = False Then error{"Unable to show demo window!"} : quit.l = True

;/* ========= Message Loop ========== */
Repeat
  *notify.tuiNotify = ntui_WaitNotify{*ntui}  ; wait for new events

  Select ntui_GetNotifyID{*notify}                      ; go for the notification value we got...
    Case "QUIT"    : quit = True                             ; window close gadget => quit the program
    Case "AREXX"   : msg.s = ntui_GetNotifyString{*notify}  ; we received an arexx message
    Case "POPUP"   : ntui_PopUp{*ntui,"Workbench"}      ; pop up on Workbench
                     ntui_HideAppIcon{*ntui}            ; ... and hide the app icon
    Case "ICONIFY" : ntui_Iconify{*ntui}                ; iconify
                     ntui_ShowAppIcon{*ntui}            ; .. and show the app icon
    Case "click!"  : message{"Click!"} ; the user hit the button...
    Default        : ; ignore unhandled notifications
  End Select
Until quit

;/* ========== CleanUp & Exit =========== */
ntui_FreeEngine{*ntui} ;/* free the tui engine (and close all windows) */
End

.guiXml
Dc.b "<engine arexxport='NTUI_TEMPLATE' onMessage='AREXX'>"
Dc.b "  <window id='mainwin' title='NTUI Window' onclose='QUIT'>"
Dc.b "    <hgroup wrap='2'>"
Dc.b "      <label text='Push Button' align='right'/>"
Dc.b "      <button text='Click Me!' onclick='click!' help='This is the bubble help!'/>"
Dc.b "    </hgroup>"
Dc.b "  </window>"
Dc.b "</engine>"
Dc.b 0

