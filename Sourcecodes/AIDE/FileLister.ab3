; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "//AIDE"
; ExeFile         = "AIDE"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.5.0
; NumberOfBuilds  = 1134
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8192
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 1
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1677
; CursorColumn    = 68
; LabelSearch     = "def"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 1
; Max GadgetList  = 1
; Max Queue       = 1
; Max Screen      = 2
; Max Shape       = 1
; Max CopList     = 1
; Max Sprite      = 1
; Max Stencil     = 1
; Max Module      = 1
; Max Window      = 30
; Max Anim        = 1
; Max Sound       = 1
; Max Bank        = 1
; Max Buffer      = 1
; Max BitMap      = 1
; Max Slice       = 1
; Max Page        = 1
; Max Tape        = 1
; Max IntuiFont   = 12
; Max MedModule   = 1
; Max Palette     = 1
; Max MenuList    = 1
; Max BlitzFont   = 1
; Max GTList      = 30
; /XTRA
XINCLUDE "Definitions.ab3"

#HAS_FILELISTER = 1

Statement FileLister_AddFile{*listView.tuiListView,filename.s}
  d.s = dos_GetFileDate{filename}

  path.s = dos_PathPart{filename}
  If path=AIDE\Prefs\FileListPath Then name.s = dos_FilePart{filename} : Else name = filename

  If dos_IsDir{filename}
    flags.l=0
    If Peek.b(&name)=@"." Then flags | #TUIF_DISABLED
    b.s = "\pRIGHT\t<DIR>"
    If dos_Exist{filename+".info"} Then icon.s = filename+".info" : Else icon.s = AIDE\Prefs\DefIconFolder
    ntui_AddListItem{*listView,-1,"\p"+icon+"|\b"+name+"|"+b+"|"+d+"",0,1234,flags}
  Else
    bs.l = dos_GetFileSize{filename}
    If bs>=1000
      Format "000"
      b = Str$(bs MOD 1000)
      Format ""
    Else
      b = Str$(bs)
    End If
    While bs>1000
      bs/1000
      If bs>=1000
        Format "000"
        b = Str$(bs MOD 1000)+"."+b
        Format ""
      Else
        b = Str$(bs)+"."+b
      End If
    Wend
    flags = 0
    ;If dos_Exist{filename+".info"}
    ;  icon.s = filename+".info"
    ;Else
      docTypeX.l = DocType_Examine{name}
      icon.s = DocType_GetDefIcon{docTypeX}
    ;End If
    ntui_AddListItem{*listView,-1,"\p"+icon+"|"+name+"|"+b+"|"+d+"",0,1234,flags}
  End If

End Statement


Statement FileLister_Fill{id.s,path.s,pattern.s}
  *listView.tuiListView = (.tuiListView)ntui_GetObjectByID{*ntui,id}
  If *listView=Null Then Statement Return

  ntui_ClearListView{*listView}
  ;ntui_SetAttr{*listView,#TUILVA_TOTALWIDTH,0} ; this is read only attr !!!

  AIDE\Prefs\FileListPath = ""
  DocType_SetPattern{#DOCTYPE_DEFAULT,pattern}

  Select path
    Case ""
      Repeat
        name.s = dos_ScanVolumes{}
        If name
          flags.l=0;#TUIF_HIGHLIGHT
          s.f = dos_GetDiskSize{name}
          unit.s="B"
          If s>1024 Then s/1024 : unit="kB"
          If s>1024 Then s/1024 : unit="MB"
          If s>1024 Then s/1024 : unit="GB"
          b.s = Str$(Int(s))
          If s<100 Then n.l = Int(s*10) MOD 10 : b.s + "."+Str$(n)
          b.s + unit
          icon.s = name
          d.s = dos_GetFileDate{name}
          ntui_AddListItem{*listView,-1,"\p"+icon+"|\b"+name+"|"+b+"|"+d+"",0,1234,flags}
        End If
      Until name=""

      Repeat
        name.s = dos_ScanAssigns{}
        If name
          flags.l=0;#TUIF_HIGHLIGHT
          b.s = "<ASSIGN>"
          icon.s = AIDE\Prefs\DefIconAssign
          d.s = dos_GetFileDate{name}
          ntui_AddListItem{*listView,-1,"\p"+icon+"|\b"+name+"|"+b+"|"+d+"",0,1234,flags}
        End If
      Until name=""

    Case "AIDE::FAVORITES"
      If AIDE\FavoriteT
        pft_Sort{AIDE\FavoriteT}
        modified.l = 0
        *iter.pftiterator  = pft_Iterate{AIDE\FavoriteT,""}
        While pft_HasNext{*iter}
          name.s = pft_GetIteratorKey{*iter}
          device.s = dos_DevicePart{name}
          If dos_Exist{name}=False
            pft_RemItem{AIDE\FavoriteT,name} : modified+1
          Else
            FileLister_AddFile{*listView,name}
          End If
        Wend
        pft_FreeIterator{*iter}
        If modified>0 Then pft_Save{AIDE\FavoriteT,AIDE\FavoriteFileName}
      End If

    Default
      path = GetDosFileName{path}
      ;lock.l = Lock_ (&path,#ACCESS_READ)
      ;If lock
        ;MaxLen buff.s = 1024
          ;NameFromLock_ lock,&buff,1023
          ;path = Peek.s(&buff)

          If path><"" AND AIDE\FavoriteT><Null
            count$ = pft_GetString{AIDE\FavoriteT,path}
            If count$=""
              count$="1"
            Else
              countL.l = Vallong(count$)
              count$=Str$(countL+1)
            End If
            pft_SetString{AIDE\FavoriteT,path,count$}
          End If
        ;UnLock_ lock
      ;End If
      AIDE\Prefs\FileListPath = path
      Repeat
        name.s = dos_ScanDir{path,pattern}
        If name Then FileLister_AddFile{*listView,name}
      Until name=""

  End Select

  ntui_SetStringByID{*ntui,!obj_filelist_path   ,AIDE\Prefs\FileListPath}
  ntui_SetStringByID{*ntui,!obj_filelist_pattern,AIDE\DocType[#DOCTYPE_DEFAULT]\Pattern_}

End Statement


;/* event handler function */
FileLister_HandleNotify:
Function.l FileLister_HandleNotify{*notify.tuiNotify}

  Select ntui_GetNotifyID{*notify}
    Case !ev_filelist_refresh
      path.s = ntui_GetStringByID{*ntui,!obj_filelist_path}
      FileLister_Fill{!obj_filelist,path,AIDE\DocType[#DOCTYPE_DEFAULT]\Pattern_}

    Case !ev_filelist_setpattern
      pattern.s = ntui_GetStringByID{*ntui,!obj_filelist_pattern}
      FileLister_Fill{!obj_filelist,AIDE\Prefs\FileListPath,pattern}

    Case !ev_filelist_parentpath
      path.s = ntui_GetStringByID{*ntui,!obj_filelist_path}
      path = dos_PathPart{path}
      FileLister_Fill{!obj_filelist,path,AIDE\DocType[#DOCTYPE_DEFAULT]\Pattern_}

    Case !ev_filelist_showdrives
      FileLister_Fill{!obj_filelist,"",AIDE\DocType[#DOCTYPE_DEFAULT]\Pattern_}

    Case !ev_filelist_favorites
      FileLister_Fill{!obj_filelist,"AIDE::FAVORITES",AIDE\DocType[#DOCTYPE_DEFAULT]\Pattern_}

    Case !ev_filelist_select
      *obj.tuiObject = ntui_GetNotifyObject{*notify}
      ntui_GetAttr{*obj,#TUIA_CLASSID,&classId.l}
      If classId=#TUICLASS_LISTVIEW
        *listView.tuiListView = (.tuiListView)*obj
        selectedX.l = ntui_GetFirstSelectedListItem{*listView}
        selected.s  = ntui_GetListItemText{*listView,selectedX,1}

        path = dos_AddPart{AIDE\Prefs\FileListPath,selected}

        If dos_IsFile{path}
          docX.l = Document_Open{path}
          If docX>=0 Then Document_Show{docX}
        Else
          FileLister_Fill{!obj_filelist,path,AIDE\DocType[#DOCTYPE_DEFAULT]\Pattern_}
        End If

      End If

    Case !ev_filelist_iconinfo
      *obj.tuiObject = ntui_GetObjectByID{*ntui,!obj_filelist}
      ntui_GetAttr{*obj,#TUIA_CLASSID,&classId.l}
      If classId=#TUICLASS_LISTVIEW
        *listView.tuiListView = (.tuiListView)*obj
        selectedX.l = ntui_GetFirstSelectedListItem{*listView}
        If selectedX>=0
          selected.s  = ntui_GetListItemText{*listView,selectedX,1}
          path = dos_AddPart{AIDE\Prefs\FileListPath,selected}
          ;cmd.s = "run wbinfo \\22"+path+"\\22"
          arg.s = "\\22"+path+"\\22 pubscreen "+AIDE\Prefs\PubScreenName
          ;error{arg}
          ;Execute_ &cmd,0,0
          dos_RunCli{"wbinfo",0,-1,False,arg}
        End If
      End If

    Default:
      Function Return False ; not interested...

  End Select
  Function Return True

End Function
!_MakeGlobalFuncPointer{FileLister_HandleNotify,{Null}}

InstallNotifyHandler{"FileLister", *FileLister_HandleNotify}
