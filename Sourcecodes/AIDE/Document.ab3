; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "//AIDE"
; ExeFile         = "AIDE"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.5.0
; NumberOfBuilds  = 1134
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8192
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 1
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1677
; CursorColumn    = 68
; LabelSearch     = "def"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 1
; Max GadgetList  = 1
; Max Queue       = 1
; Max Screen      = 2
; Max Shape       = 1
; Max CopList     = 1
; Max Sprite      = 1
; Max Stencil     = 1
; Max Module      = 1
; Max Window      = 30
; Max Anim        = 1
; Max Sound       = 1
; Max Bank        = 1
; Max Buffer      = 1
; Max BitMap      = 1
; Max Slice       = 1
; Max Page        = 1
; Max Tape        = 1
; Max IntuiFont   = 12
; Max MedModule   = 1
; Max Palette     = 1
; Max MenuList    = 1
; Max BlitzFont   = 1
; Max GTList      = 30
; /XTRA

Function.l Document_FindBySource{*source.tuiGroup}

  For docX.l=0 To #DOCUMENT_MAX-1
    If AIDE\Document[docX]\IsUsed
      If *source = AIDE\Document[docX]\Source Then Function Return docX
    End If
  Next

  Function Return #DOCUMENT_INVALID

End Function


Statement Document_SetStatusMessage{docX.l,status.s}

  !If_BadDocX_Then{ Statement Return }
  If AIDE\Document[docX]\Source
    ntui_SetStringByID{AIDE\Document[docX]\Source,!obj_source_dstatus,status}
  End If

End Statement


Function.l Document_FindByTextBox{*textBox.tuiTextBox}

  For docX.l=0 To #DOCUMENT_MAX-1
    If AIDE\Document[docX]\IsUsed
      If AIDE\Document[docX]\TextBox = *textBox Then Function Return docX
    End If
  Next

  Function Return #DOCUMENT_INVALID

End Function


Function.l Document_IsEdited{docX.l}

  !If_BadDocX_Then{ Function Return False }
  ntui_GetAttr{AIDE\Document[docX]\TextBox,#TUITBA_EDITED,&edited.l}
  Function Return edited

End Function


Function.l Document_CanUndo{docX.l}

  !If_BadDocX_Then{ Function Return False }
  ntui_GetAttr{AIDE\Document[docX]\TextBox,#TUITBA_UNDOSTEPS,&steps.l}
  Function Return steps

End Function


Function.tuiGroup Source_FindActive{}

  *win.tuiWindow = (.tuiWindow)ntui_GetObjectByID{*ntui,!win_main}
  If *win
    *tab.tuiTabView = (.tuiTabView)ntui_GetObjectByID{*win,!obj_main_sourcetab}
    If *tab
      *group.tuiGroup = Null
      If ntui_GetAttr{*tab,#TUITVA_ACTIVETABOBJ,&*group}
        Function Return *group
      End If
    End If
  End If

  Function Return Null

End Function


; get the document index from current tab
Function.l Document_FindActive{}

  If *ntui=Null Then Function Return #DOCUMENT_INVALID
  *source.tuiGroup = Source_FindActive{}
  Function Return Document_FindBySource{*source}

End Function


Function.s Document_GetFileName{docX.l}

  !If_BadDocX_Then{ Function Return ""}

  If ntui_GetAttr{AIDE\Document[docX]\TextBox,#TUITBA_FILENAME,&filenameP.l}
    If filenameP Then Function Return Peek.s(filenameP)
  End If

  Function Return ""

End Function


Function.l Document_GetCursorLine{docX.l}

  !If_BadDocX_Then{ Function Return 0}

  If ntui_GetAttr{AIDE\Document[docX]\TextBox,#TUITBA_CURSORLINE,&lpos.l}
    Function Return lpos
  End If

  Function Return 0

End Function


Function.l Document_GetTopLine{docX.l}

  !If_BadDocX_Then{ Function Return 0}

  If ntui_GetAttr{AIDE\Document[docX]\TextBox,#TUITBA_TOPLINE,&lpos.l}
    Function Return lpos
  End If

  Function Return 0

End Function


Function.s Document_GetImageFile{docX.l}

  !If_BadDocX_Then{ Function Return "" }
  Function Return AIDE\Document[docX]\ImageFile

End Function


Function.l Document_SetTitle{docX.l,title.s,image.s}

  !If_BadDocX_Then{ Function Return False}

  *tab.tuiObject = ntui_GetObjectByID{*ntui,!obj_main_sourcetab}
  *source.tuiGroup = AIDE\Document[docX]\Source
  If *source
    If title="" Then title = AIDE\Document[docX]\Title     : Else AIDE\Document[docX]\Title     = title
    If image="" Then image = AIDE\Document[docX]\ImageFile : Else AIDE\Document[docX]\ImageFile = image

    If dos_Exist{image+".info"}=False
      image = DocType_GetDefIcon{AIDE\Document[docX]\DocTypeX}
    End If

    If Document_IsEdited{docX}      Then image = image + "|edit"   : ntui_SetAttr{*source,#TUIA_BOLD,True}       : Else ntui_SetAttr{*source,#TUIA_BOLD,False}
    If AIDE\Document[docX]\IsLocked Then image = image + "|off" ;: ntui_SetAttr{*source,#TUIA_UNDERLINED,True} : Else ntui_SetAttr{*source,#TUIA_UNDERLINED,False}
    ntui_SetAttr{*source,#TUIGA_IMAGE,&image}
    ntui_SetAttr{AIDE\Document[docX]\TextBox,#TUITBA_READONLY,AIDE\Document[docX]\IsLocked}

    ntui_SetString{*source,title}
    ntui_Refresh{*tab,Null}
    succ.l = True
  End If

  Function Return succ

End Function


Function.l Document_GetDocType{docX.l}

  !If_BadDocX_Then{ Function Return #DOCTYPE_UNDEFINED}

  Function Return AIDE\Document[docX]\DocTypeX

End Function

Function.l Document_GetContext{docX.l}
  !_ASSERT{((docX >= 0) AND (docX < #DOCUMENT_MAX))}
  !_ASSERT{AIDE\Document[docX]\IsUsed}
  docTypeX.l = AIDE\Document[docX]\DocTypeX
  !_ASSERT{((docTypeX >= 0) AND (docTypeX < #DOCTYPE_MAX))}
  Function Return AIDE\DocType[docTypeX]\Context
  
End Function

SHARED updatecount.l
Statement Document_UpdateGui{}
  updatecount+1
  docX.l       = Document_FindActive{}
  docTypeX.l   = Document_GetDocType{docX}
  thisEdit.l   = False
  allEdit.l    = False
  canUndo.l    = False
  canBuildSource.l  = False
  canDebugSource.l  = False
  canReleaseSource.l  = False
  canBuildProject.l = False
  canDebugProject.l = False
  canReleaseProject.l = False
  hasSettings.l = False
  noProject.l  = True

  For n.l=0 To #DOCUMENT_MAX-1
    If AIDE\Document[n]\IsUsed
      If Document_IsEdited{n}
        allEdit = True
        If docX = n Then thisEdit = True
      End If
      If docX=n
        canUndo = Document_CanUndo{n}
        If DocType_IsAvailable{docTypeX}
          If AIDE\DocType[docTypeX]\TestCmd><""  Then canBuildSource=True
          If AIDE\DocType[docTypeX]\DebugCmd><"" Then canDebugSource=True
          If AIDE\DocType[docTypeX]\ReleaseCmd><"" Then canReleaseSource=True
          If ((AIDE\DocType[docTypeX]\TestCmd><"")  AND (noProject=False)) Then canBuildProject=True
          If ((AIDE\DocType[docTypeX]\DebugCmd><"") AND (noProject=False)) Then canDebugProject=True
          If ((AIDE\DocType[docTypeX]\ReleaseCmd><"") AND (noProject=False)) Then canReleaseProject=True
          If AIDE\DocType[docTypeX]\OpenSettings Then hasSettings = True
        End If
      End If
    End If
  Next

  For pass.l=0 To 1
    Select pass
      Case 0
        *parent.tuiObject = ntui_GetObjectByID{*ntui,!obj_main_toolbar}
      Case 1
        *parent.tuiObject = ntui_GetObjectByID{*ntui,!obj_main_menubar}
    End Select

    ; project control
    If pass = 1 ; menu only
    ntui_SetAttrByID{*parent,!obj_project_build   ,#TUIA_DISABLED,AIDE\CmdIsRunning OR canBuildProject=False}
    ntui_SetAttrByID{*parent,!obj_project_import  ,#TUIA_DISABLED,AIDE\CmdIsRunning OR noProject}
    ntui_SetAttrByID{*parent,!obj_project_export  ,#TUIA_DISABLED,AIDE\CmdIsRunning OR noProject}
    ntui_SetAttrByID{*parent,!obj_project_settings,#TUIA_DISABLED,AIDE\CmdIsRunning OR noProject}
    ntui_SetAttrByID{*parent,!obj_project_close   ,#TUIA_DISABLED,AIDE\CmdIsRunning OR noProject}
    ntui_SetAttrByID{*parent,!obj_project_new     ,#TUIA_DISABLED,AIDE\CmdIsRunning OR noProject}
    End If
    
    ; source control
    ntui_SetAttrByID{*parent,!obj_source_build    ,#TUIA_DISABLED,AIDE\CmdIsRunning OR canBuildSource=False}
    ntui_SetAttrByID{*parent,!obj_source_debug    ,#TUIA_DISABLED,AIDE\CmdIsRunning OR canDebugSource=False}
    ntui_SetAttrByID{*parent,!obj_source_release  ,#TUIA_DISABLED,AIDE\CmdIsRunning OR canReleaseSource=False}
    ntui_SetAttrByID{*parent,!obj_source_save     ,#TUIA_DISABLED,(thisEdit=False)}
    ntui_SetAttrByID{*parent,!obj_source_saveall  ,#TUIA_DISABLED,(allEdit =False)}
    ntui_SetAttrByID{*parent,!obj_source_undo     ,#TUIA_DISABLED,(canUndo=False)}
    ntui_SetAttrByID{*parent,!obj_source_settings ,#TUIA_DISABLED,(hasSettings=False)}

    ; debugger control
    ntui_SetAttrByID{*parent,!obj_debug_continue  ,#TUIA_DISABLED,AIDE\CmdIsRunning=False}
    ntui_SetAttrByID{*parent,!obj_debug_break     ,#TUIA_DISABLED,AIDE\CmdIsRunning=False}
    ntui_SetAttrByID{*parent,!obj_debug_step      ,#TUIA_DISABLED,AIDE\CmdIsRunning=False}
    ntui_SetAttrByID{*parent,!obj_debug_stepin    ,#TUIA_DISABLED,AIDE\CmdIsRunning=False}
    ntui_SetAttrByID{*parent,!obj_debug_stepout   ,#TUIA_DISABLED,AIDE\CmdIsRunning=False}
    ntui_SetAttrByID{*parent,!obj_debug_end       ,#TUIA_DISABLED,AIDE\CmdIsRunning=False}
  Next

End Statement


Document_OnEdit:
Function.l Document_OnEdit{*textBox.tuiTextBox,*ev.tuiEvent,*notifyId.str}

  docX.l = Document_FindByTextBox{*textBox}
  If docX>=0
    Document_SetTitle{docX,"",""}
  End If
  Document_UpdateGui{}

End Function
!_MakeGlobalFuncPointer{Document_OnEdit,{Null,Null,Null}}


Function.s Document_GetDosPattern{docX.l}

  !If_BadDocX_Then{ Function Return ""}

  Function Return AIDE\DocType[AIDE\Document[docX]\DocTypeX]\Pattern_

End Function


; find a source group by filename
Function.l Document_FindByFilename{findname.s}

  findlock.l = Lock_(&findname,#ACCESS_READ);
  If findlock=0 Then Function Return -1

  *source.tuiGroup = Null
  *win.tuiWindow = (.tuiWindow)ntui_GetObjectByID{*ntui,!win_main}
  If *win
    *tab.tuiTabView = (.tuiTabView)ntui_GetObjectByID{*win,!obj_main_sourcetab}
    If *tab
      *child.tuiObject = ntui_GetChildObject{*tab}
      While *child
        filelock.l = 0
        *tb.tuiTextBox = (.tuiTextBox)ntui_GetObjectByID{*child,!obj_source_text}
        If *tb
          If ntui_GetAttr{*tb,#TUITBA_FILENAME,&filenameP.l}
            If filenameP
              filelock = Lock_(filenameP,#ACCESS_READ)
              ;filename.s = Peek.s(filenameP)
            End If
          End If
        End If
        If SameLock_(filelock,findlock)=0
          *source = (.tuiGroup)*child
          *child = Null
        Else
          *child = ntui_GetNextObject{*child}
        End If
        If filelock Then UnLock_ filelock : filelock=0
      Wend
    End If
  End If
  If findlock Then UnLock_ findlock : findlock=0

  Function Return Document_FindBySource{*source}

End Function


; create a new document tab, but dont show it
Function.l Document_New{}

  ; find free document slot
  resultX.l = -1
  docX.l = 0
  While AIDE\Document[docX]\IsUsed=True AND docX<#DOCUMENT_MAX
    docX+1
  Wend
  If AIDE\Document[docX]\IsUsed=False
    *source.tuiGroup = Null
    *win.tuiWindow = (.tuiWindow)ntui_GetObjectByID{*ntui,!win_main}
    If *win
      *tab.tuiTabView = (.tuiTabView)ntui_GetObjectByID{*win,!obj_main_sourcetab}
      If *tab
        *source = (.tuiGroup)ntui_BuildFromXMLFile{*tab, dos_AddPart{AIDE\GuiPath,!file_fragment_source} }
        If *source
          *textBox.tuiTextBox = (.tuiTextBox)ntui_GetObjectByID{*source,!obj_source_text}
          If *textBox
            ntui_SetAttr{*source,#TUIA_USERDATA,docX}
            ntui_SetAttr{*textBox,#TUIA_USERDATA,docX}
            ntui_SetAttr{*textBox,#TUITBA_ONEDITCB,*Document_OnEdit}
            ntui_SetAttr{*textBox,#TUITBA_CURSORSTYLE,AIDE\Prefs\EditorCursorStyle}
            ntui_SetAttr{*textBox,#TUITBA_BLINKSPEED,AIDE\Prefs\EditorBlinkSpeed}
            AIDE\Document[docX]\Source   = *source
            AIDE\Document[docX]\TextBox  = *textBox
            AIDE\Document[docX]\IsUsed   = True
            DocType_Attach{#DOCTYPE_DEFAULT, docX}
            AIDE\Document[docX]\Title    = "unnamed"
            AIDE\Document[docX]\IsLocked = False
            resultX.l = docX
            Document_SetTitle{docX,"unnamed",DocType_GetDefIcon{AIDE\Document[docX]\DocTypeX}}
          End If
        End If
        If resultX<0
          If *source Then ntui_FreeObject{*source}
        End If
        ntui_Rethink{*tab}
      End If
    End If
  End If

  Function Return resultX

End Function


; save a document
Function.l Document_Save{docX.l,filename.s,@force.l}

  !If_BadDocX_Then{ Function Return False}
  succ.l = False

  If filename=""
    If ntui_GetAttr{AIDE\Document[docX]\TextBox,#TUITBA_FILENAME,&filenameP.l}
      If filenameP Then filename.s = Peek.s(filenameP)
    End If
  End If

  If filename
    filepart.s = dos_FilePart{filename}
    docTypeX.l = DocType_Examine{filepart}
    If docTypeX=#DOCTYPE_DEFAULT Then docTypeX=AIDE\Document[docX]\DocTypeX

    If AIDE\Document[docX]\DocTypeX><docTypeX ; set docType before saving
      DocType_Attach{docTypeX, docX}
    End If

    If DocType_Export{docX, filename}
      ntui_SetAttr{AIDE\Document[docX]\TextBox,#TUITBA_FILENAME,&filename}
      ntui_SetAttr{AIDE\Document[docX]\TextBox,#TUITBA_EDITED,False}
      ntui_SetAttr{AIDE\Document[docX]\TextBox,#TUITBA_READONLY,AIDE\Document[docX]\IsLocked}
      Document_SetTitle{docX,filepart,""}
      *tab.tuiObject = ntui_GetObjectByID{*ntui,!obj_main_sourcetab}
      ntui_Refresh{*tab,Null}
      succ=True
    End If
  End If

  Document_UpdateGui{}
  Function Return succ

End Function

Function.s Document_GetScanResultFilename{docX.l}

  Function Return "RAM:AIDE."+Hex$(FindTask_(Null))+"."+Str$(docX)+".txt"
  
End Function


Statement Document_Scan{docX.l}

  !If_BadDocX_Then{ Statement Return}
  filename.s = Document_GetFileName{docX}
  DocType_ScanSource{docX, filename}
  
End Statement


Statement Document_ScanFinish{docX.l}

  !If_BadDocX_Then{ Statement Return}
  DocType_ScanSourceFinish{docX}
  
End Statement


; show a document (make active docX)
Statement Document_Show{docX.l}
 
  If docX>=0
    ntui_SetAttrByID{*ntui,!obj_main_sourcetab,#TUITVA_ACTIVETABOBJ, AIDE\Document[docX]\Source}
  End If

  *lv.tuiListView = (.tuiListView)ntui_GetObjectByID{*ntui,!obj_src_list}
  If *lv
    ntui_ClearListView{*lv}
  End If
  
  If docX>=0
    If AIDE\Document[docX]\NeedScan=True
      AIDE\Document[docX]\NeedScan=False
      Document_Scan{docX}
    End If
    DocType_SourceBrowser{docX}
  End If

  If *lv 
    ntui_GetAttr{*lv,#TUILVA_TOTALITEMS,&items.l}
    If items=0
      title.s = ""
      ntui_SetAttr{*lv,#TUILVA_TITLE,&title}
      ntui_AddListItem{*lv,0,"<< no info available >>",-1,Null,#TUIF_DISABLED}
    End If
  End If

  Document_UpdateGui{}

End Statement


; closes the document of the current tab and the tab itself
Function.l Document_Close{docX.l}

  !If_BadDocX_Then{ Function Return False }

  DocType_Detach{docX}

  *source.tuiGroup = AIDE\Document[docX]\Source
  If *source
    *tab.tuiTabView = (.tuiTabView)ntui_GetParentObject{*source}
    ntui_GetAttr{*tab,#TUITVA_ACTIVETAB,&tabX.l}
    If ntui_GetAttr{*source,#TUIA_USERDATA,&testX.l}
      If testX><docX Then error{"Internal Error: DocX mismatch!"}
    End If
    ntui_FreeObject{*source}
    ntui_Rethink{*tab}
    ntui_GetAttr{*tab,#TUITVA_NUMTABS,&tabN.l}
    If tabX>=tabN Then tabX-1
    ntui_SetAttr{*tab,#TUITVA_ACTIVETAB,tabX}
  End If
  AIDE\Document[docX]\IsUsed = False
  AIDE\Document[docX]\Source = Null
  docX.l = Document_FindActive{}
  Document_Show{docX.l}

  Function Return True

End Function


Statement Document_SetCursor{docX.l,lpos.l,cpos.l}

  !If_BadDocX_Then{ Statement Return}
  
  ntui_SetAttr{AIDE\Document[docX]\TextBox,#TUITBA_CURSORLINE,lpos}
  ntui_SetAttr{AIDE\Document[docX]\TextBox,#TUITBA_CURSORCHAR,cpos}
  
End Statement


Statement Document_JumpTo{docX.l,lpos.l,cpos.l,@focus.l}

  !If_BadDocX_Then{ Statement Return}
  
  docY.l = Document_FindActive{}
  If docY><docX Then Document_Show{docX}
  
  Document_SetCursor{docX,lpos,cpos}  
 
  ; make sure lpos is nicely visible
  ntui_GetAttr{AIDE\Document[docX]\TextBox,#TUITBA_TOPLINE,&tlpos.l}
  ntui_GetAttr{AIDE\Document[docX]\TextBox,#TUITBA_VISIBLELINES,&vlpos.l}
  ntui_GetAttr{AIDE\Document[docX]\TextBox,#TUITBA_TOTALLINES,&tlines.l}
  
  mlpos.l = lpos - vlpos/3 ; in the upper third...
  If tlines-vlpos<mlpos Then mlpos=tlines-vlpos

  If mlpos>=0
    ntui_SetAttr{AIDE\Document[docX]\TextBox,#TUITBA_TOPLINE,mlpos}
  End If
  
  If focus Then ntui_SetFocus{AIDE\Document[docX]\TextBox}

End Statement


; load a document (but dont show it)
Function.l Document_Load{docX.l,filename.s}

  !If_BadDocX_Then{ Function Return False }

  succ.l = False
  docTypeX.l = DocType_Examine{filename}

  If DocType_Attach{docTypeX, docX}
    If DocType_Import{docX, filename}
      ntui_SetAttr{AIDE\Document[docX]\TextBox,#TUITBA_EDITED,False}
      ntui_SetAttr{AIDE\Document[docX]\TextBox,#TUITBA_READONLY,AIDE\Document[docX]\IsLocked}
      filepart.s = dos_FilePart{filename}
      Document_SetTitle{docX.l,filepart,filename}
      *tab.tuiObject = ntui_GetObjectByID{*ntui,!obj_main_sourcetab}
      ntui_Refresh{*tab,Null}
      succ = True
      AIDE\Document[docX]\NeedScan=True
    End If
  End If
  Function Return succ

End Function


; open a new document
Function.l Document_Open{filename.s}

  docX.l = Document_FindByFilename{filename}
  If docX<0
    docX = Document_New{}
    If docX>=0 Then Document_Load{docX,filename}
  End If

  Function Return docX

End Function


Statement Document_RunCmd{docX.l, command.s, filename.s, output.s, workdir.s}
  If AIDE\CmdIsRunning Then Statement Return

  docTypeX.l = AIDE\Document[docX]\DocTypeX
  If NOT(DocType_IsAvailable{docTypeX})
    error{"Illegal doctype !"}
    Statement Return
  End If

  filename = Prefs_ParseString{filename, docTypeX}
  output = Prefs_ParseString{output, docTypeX}
  workdir = Prefs_ParseString{workdir, docTypeX}
  
  filename = RunCmd_ParseString{filename, filename, output, workdir}
  output = RunCmd_ParseString{output, filename, output, workdir}
  workdir = RunCmd_ParseString{workdir, filename, output, workdir}
  
  filepath.s = dos_PathPart{filename}

  command = Prefs_ParseString{command, docTypeX}
  command = RunCmd_ParseString{command, filename, output, workdir}
  ;command = Replace$(command,"%","\\03") ; ???

  exe.s = lindex{command,0}
  args.s = ltail{command,1}

  *con.tuiTextBox = (.tuiTextBox)ntui_GetObjectByID{*ntui,!obj_main_console}
  If *con
    pipefile.s = "Pipe:"+Hex$(FindTask_(0))
    txt.s = "\\1B[33m\\1B[1m" + AIDE\DocType[docTypeX]\Name + " >>>\\n"
    ntui_SetAttr{*con,#TUITBA_TEXT,&txt}
    fh.l = Open_(&pipefile,#MODE_NEWFILE)
    If fh=0
      msg.s = "\\1B[33m\\1B[1mUnable to open "+pipefile+"!\\n"
      ntui_SetAttr{*con, #TUITBA_APPENDTEXT,&msg}
    Else
      ntui_SetTextBoxFileListener{*con,&pipefile}
    End If

    ; file path the working directory
    If workdir >< "" 
      tmplock.l = Lock_(&workdir,#ACCESS_READ)
      If tmplock=0
        msg.s = "\\1B[33m\\1B[1mcd \\22" + workdir + "\\22 failed!\\n"
        ntui_SetAttr{*con, #TUITBA_APPENDTEXT,&msg}
      End If
    Else
      tmplock=0
    End If
    
    If tmplock
      oldlock.l = CurrentDir_ (tmplock)
    Else
      oldlock=-1
    End If
    
    msg.s = "\\1B[33m\\1B[1m" + dos_GetCurrentDir{} + ">\\n"
    ntui_SetAttr{*con, #TUITBA_APPENDTEXT,&msg}
    
    AIDE\CmdPath = filepath
    AIDE\CmdArgs = args
    AIDE\CmdExe  = exe
    msg.s = "\\1B[33m\\1B[1m\\22" + exe+"\\22 "+args+"\\n"
    ntui_SetAttr{*con, #TUITBA_APPENDTEXT,&msg}

    setCLI.l = SetCLI{}
    If setCLI 
      msg.s = "\\1B[33m\\1B[1mSet CLI\\nCurrentDir:" + dos_GetCurrentDir{} + ">\\n"
      ntui_SetAttr{*con, #TUITBA_APPENDTEXT,&msg}
    End If

    ret.l = dos_RunCli3{exe,AIDE\CmdTaskPri,AIDE\DocType[docTypeX]\Stack,False,args,Null,fh}
    If ret><0
      msg.s = "\\1B[33m\\1B[1mFailed with #"+Str$(ret)+"\\n"
      ntui_SetAttr{*con, #TUITBA_APPENDTEXT,&msg}
    Else
      AIDE\CmdIsRunning = True
    End If
    Document_UpdateGui{}

    ; restore current dir
    If oldlock><-1 Then CurrentDir_ oldlock
    If tmplock><0  Then UnLock_ tmplock
    If setCLI Then RemCLI{}

  End If

End Statement


Statement Document_Build{docX.l, command.s}

  !If_BadDocX_Then{Statement Return}

  filename.s = Document_GetFileName{docX}
  outfile.s  = DocType_OutputFile{docX}
  edited.w   = Document_IsEdited{docX}
  docTypeX.l = AIDE\Document[docX]\DocTypeX

  If filename=""
    error{"No file is associated with this document."}
    Statement Return
  End If

  If edited
    If Document_Save{docX,filename}=False
      error{"Unable to save document."}
      Statement Return
    End If
  End If
  Document_RunCmd{docX, command, filename, outfile, AIDE\DocType[docTypeX]\WorkPath}

End Statement


Statement Document_Test{docX.l}

  !If_BadDocX_Then{Statement Return}

  docTypeX.l = AIDE\Document[docX]\DocTypeX
  If AIDE\DocType[docTypeX]\TestCmd
    Document_Build{docX, AIDE\DocType[docTypeX]\TestCmd}
  Else
    error{"No test command configured for this file type."}
  End If

End Statement


Statement Document_Debug{docX.l}

  !If_BadDocX_Then{Statement Return}

  docTypeX.l = AIDE\Document[docX]\DocTypeX
  If AIDE\DocType[docTypeX]\DebugCmd
    Document_Build{docX, AIDE\DocType[docTypeX]\DebugCmd}
  Else
    error{"No debug command configured for this file type."}
  End If

End Statement


Statement Document_Release{docX.l}

  !If_BadDocX_Then{Statement Return}

  docTypeX.l = AIDE\Document[docX]\DocTypeX
  If AIDE\DocType[docTypeX]\ReleaseCmd
    Document_Build{docX, AIDE\DocType[docTypeX]\ReleaseCmd}
  Else
    error{"No release command configured for this file type."}
  End If

End Statement


Function.l Document_ReplaceSelectedText{docX.l,replace.s,find.s,all.l}

  !If_BadDocX_Then{Function Return False}

  *textBox.tuiTextBox = AIDE\Document[docX]\TextBox
  If *textBox=Null Then Function Return False
  If AIDE\Prefs\EscapeSearch
    find    = UnescapeString{find}
    replace = UnescapeString{replace}
  End If

  Function Return ntui_ReplaceTextBoxText{*textBox,&replace,FLen(replace),&find,FLen(find),AIDE\Prefs\CaseSensitiveSearch,all}

End Function


Function.l Document_SelectSearchText{docX.l,needle.s,direction.l}
  DEFTYPE.longP lposP,cposP,slposP,scposP

  !If_BadDocX_Then{Function Return False}

  *textBox.tuiTextBox = AIDE\Document[docX]\TextBox
  If *textBox=Null Then Function Return False

  If AIDE\Prefs\EscapeSearch
    needle = UnescapeString{needle}
  End If


  ntui_GetAttr{*textBox,#TUITBA_CURSORLINE,lposP}
  ntui_GetAttr{*textBox,#TUITBA_CURSORCHAR,cposP}
  succ.l = False
  Select direction
    Case 1:
      succ = ntui_FindNextTextBoxText{*textBox,&needle,FLen(needle),lposP,cposP,AIDE\Prefs\CaseSensitiveSearch}
      If succ=False
        lposP\l = 0 : cposP\l = 0
        succ = ntui_FindNextTextBoxText{*textBox,&needle,FLen(needle),lposP,cposP,AIDE\Prefs\CaseSensitiveSearch}
      End If

    Case -1:
      _tb_seek{*textBox,lposP,cposP,-1}
      succ = ntui_FindPrevTextBoxText{*textBox,&needle,FLen(needle),lposP,cposP,AIDE\Prefs\CaseSensitiveSearch}
      If succ=False
        ntui_GetAttr{*textBox,#TUITBA_TOTALLINES,lposP}
        cposP\l = 0
        ;ntui_GetAttr{*textBox,#TUITBA_TOTALLINES,cposP}
        succ = ntui_FindPrevTextBoxText{*textBox,&needle,FLen(needle),lposP,cposP,AIDE\Prefs\CaseSensitiveSearch}
      End If

    Default:
      ntui_GetAttr{*textBox,#TUITBA_BEGINSELECTLINE,slposP}
      ntui_GetAttr{*textBox,#TUITBA_BEGINSELECTCHAR,scposP}
      If slposP\l>=0
        lposP\l = slposP\l
        cposP\l = scposP\l
      End If
      succ = ntui_FindNextTextBoxText{*textBox,&needle,FLen(needle),lposP,cposP,AIDE\Prefs\CaseSensitiveSearch}
      If succ=False
        lposP\l = 0 : cposP\l = 0
        succ = ntui_FindNextTextBoxText{*textBox,&needle,FLen(needle),lposP,cposP,AIDE\Prefs\CaseSensitiveSearch}
      End If

  End Select

  If succ
    ntui_SetAttr{*textBox,#TUITBA_CURSORLINE,lposP\l}
    ntui_SetAttr{*textBox,#TUITBA_CURSORCHAR,cposP\l+FLen(needle)}
    ntui_SetTextBoxSelection{*textBox,Null,lposP\l,cposP\l,lposP\l,cposP\l+FLen(needle)}
    ntui_Refresh{*textBox,Null}
  End If
  
  Function Return succ

End Function



Statement Document_ApplySettings{docX.l}

  !If_BadDocX_Then{ Statement Return }

  docTypeX.l = AIDE\Document[docX]\DocTypeX
  If AIDE\DocType[docTypeX]\ApplySettings
    !_CallFuncPointer{AIDE\DocType[docTypeX]\ApplySettings, res.l, docX}
  Else
    error{"No source settings available for this file type."}
  End If

End Statement


Statement Document_OpenSettings{docX.l}

  !If_BadDocX_Then{ Statement Return}

  docTypeX.l = AIDE\Document[docX]\DocTypeX
  If AIDE\DocType[docTypeX]\OpenSettings
    !_CallFuncPointer{AIDE\DocType[docTypeX]\OpenSettings, res.l, docX}
  Else
    error{"No source settings available for this file type."}
  End If

End Statement


Statement Document_EditFunction{docX.l,func.s}
  !If_BadDocX_Then{Statement Return}

  If AIDE\Document[docX]\TextBox
    *tb.tuiTextBox = AIDE\Document[docX]\TextBox
    Select func
      Case "cut"       : key.s="x" : ntui_KeyStrokeTextBox{*tb,#RAWKEY_X,&key,#TUIQUAL_COM}
      Case "copy"      : key.s="c" : ntui_KeyStrokeTextBox{*tb,#RAWKEY_C,&key,#TUIQUAL_COM}
      Case "paste"     : key.s="v" : ntui_KeyStrokeTextBox{*tb,#RAWKEY_V,&key,#TUIQUAL_COM}
      Case "undo"      : key.s="z" : ntui_KeyStrokeTextBox{*tb,#RAWKEY_Z,&key,#TUIQUAL_COM}
      Case "selectall" : key.s="a" : ntui_KeyStrokeTextBox{*tb,#RAWKEY_A,&key,#TUIQUAL_COM}
      Case "delete"    : key.s="d" : ntui_KeyStrokeTextBox{*tb,#RAWKEY_D,&key,#TUIQUAL_COM}
    End Select
    ntui_SetFocus{*tb}
    Document_UpdateGui{}
  End If

End Statement

