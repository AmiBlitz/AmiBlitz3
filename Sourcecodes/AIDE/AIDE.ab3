; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Sourcecodes:Amiblitz3/AIDE"
; ExeFile         = "AIDE_d"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.6.5
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 4000
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 1
; OverflowCheck   = 0
; AssemblerCheck  = -1
; InterruptCheck  = -1
; AutoRun         = -1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 0
; CursorColumn    = 0
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; /XTRA
optimize 7
Syntax 6            ; changed to 6 for a better check  tomsmart1

XINCLUDE "Definitions.ab3"

;/* init the AIDE preferences and path settings */
Statement AIDE_Init{}

  progIcon.s  = dos_GetStartIcon{"Sourcecodes:AmiBlitz3/AIDE/AIDE_d"}
  progFile.s  = dos_GetProgFile{"Sourcecodes:AmiBlitz3/AIDE/AIDE_d"}
  progDir.s   = dos_PathPart{progFile}
  ;error{"exe: "+progFile+" icon: "+progIcon}

  AIDE\InstallPath    = progDir
  AIDE\Icon           = progIcon
  AIDE\GuiPath        = dos_AddPart{AIDE\InstallPath,"Gui"}
  AIDE\SysPath        = dos_AddPart{AIDE\InstallPath,"System"}
  AIDE\TypesPath      = dos_AddPart{AIDE\InstallPath,"Types"}
  AIDE\IconsPath      = dos_AddPart{AIDE\InstallPath,"Icons"}
  AIDE\Quit           = False
  AIDE\CallDirLock    = 0
  AIDE\AddAssignDone  = dos_AddAssign{"Libs",dos_AddPart{AIDE\InstallPath,"Libs"}}
  
  AIDE\CurrentDocTypeX = #DOCTYPE_UNDEFINED

  installLock.l = Lock_(&AIDE\InstallPath,#ACCESS_READ)
  If installLock
    AIDE\CallDirLock = CurrentDir_ (installLock)
  End If
  
  AIDE\CmdIsRunning = False
  AIDE\CmdTaskPri = -1
  AIDE\FavoriteT   = Null
  AIDE\FavoriteFileName = dos_AddPart{AIDE\SysPath,"PathHistory.pft"}
  AIDE\StartUpProgress = 0
  
End Statement

AIDE_Init{}


Statement StartUp_Message{message.s}  

  If message><""
    *splashmsg.tuiLabel = (.tuiLabel)ntui_GetObjectByID{*ntui,!obj_splash_message}
    If *splashmsg
      ntui_SetString{*splashmsg,message}
      _ntui_Redraw{*splashmsg,Null}
    End If
  End If
  
  *progress.tuiImageView = (.tuiImageView)ntui_GetObjectByID{*ntui,!obj_splash_progress}
  If *progress
    image.s = "Gui/images/busy_"+Str$(AIDE\StartUpProgress & $7)
    ntui_SetAttr{*progress,#TUIIVA_IMAGE,&image}
    _ntui_Redraw{*progress,Null}
    AIDE\StartUpProgress+1
  End If
  
End Statement


Statement Popup_Help{name.s,text.s,source.s,x.l,y.l}

  *win.tuiWindow = ntui_GetWindowByID{*ntui,!win_popuphelp,-1}
  If *win Then ntui_FreeObject{*win} : *win=Null ; hack to make it reopen again!
  
  If *win=Null
    *win = ntui_GetWindow{ntui_BuildFromXMLFile{*ntui,dos_AddPart{AIDE\GuiPath,!file_win_popuphelp}}}
  Else
    ntui_HideWindowByID{*ntui,!win_popuphelp}
  EndIf

  If name="" Then Statement Return
  
  If *win
    ntui_SetStringByID{*win,!obj_popuphelp_name,name}
    ntui_SetStringByID{*win,!obj_popuphelp_text,text}
    ntui_SetStringByID{*win,!obj_popuphelp_source,source}
    ntui_Rethink{*win}
    ntui_ShowWindow{*win,x,y,Null,False}
  EndIf

End Statement


Statement PopUp_InputSelector{options.s,x.l,y.l}

  *win.tuiWindow = ntui_GetWindowByID{*ntui,!win_inputselector,-1}
  If *win Then ntui_FreeObject{*win} : *win=Null ; hack to make it reopen again!
  
  If *win=Null
    *obj.tuiObject = ntui_BuildFromXMLFile{*ntui,dos_AddPart{AIDE\GuiPath,!file_win_inputselector}}
    If *obj Then *win = ntui_GetWindow{*obj}
  Else
    ntui_HideWindowByID{*ntui,!win_inputselector}
  EndIf

  If options="" Then Statement Return
  
  If *win = Null Then Statement Return
  
  *listView.tuiListView = (.tuiListView)ntui_GetObjectByID{*win,!obj_selector_list}
  If *listView = Null Then Statement Return
  
  apos.l = 0
  bpos.l = 0
  count.l = 0
  Repeat
    apos = bpos+1
    bpos = Instr(options,"\\09",apos)
    If bpos=0 Then bpos = FLen(options)
    If bpos>apos
      option.s = Mid$(options,apos,bpos-apos)
      ntui_AddListItem{*listView,-1,option,count,0,0}
      count+1
    EndIf
  Until bpos<=apos
  
  ntui_Rethink{*win}
  ntui_ShowWindow{*win,x,y,Null,False}
  
End Statement


Statement AIDE_AutoLayout{}
  If *ntui\screen_=Null Then Statement Return

  top.l    = *ntui\screen_\BarHeight
  bottom.l = *ntui\screen_\Height-1
  left.l   = 0
  right.l  = *ntui\screen_\Width-1


  lock.l = LockIBase_ (0)
  *myWindow.Window = *ntui\screen_\FirstWindow

  While *myWindow
    rx.l = *myWindow\Width/*myWindow\Height
    ry.l = *myWindow\Height/*myWindow\Width
    If rx>8
      If *myWindow\TopEdge+*myWindow\Height-1 >= bottom
        bottom = Min(bottom,*myWindow\TopEdge-1)
      End If
      If *myWindow\TopEdge<*ntui\screen_\BarHeight
        top    = Max(top,*myWindow\TopEdge+*myWindow\Height)
      End If
    End If

    If ry>2
      If *myWindow\LeftEdge+*myWindow\Width-1 >= right
        right = Min(right,*myWindow\LeftEdge-1)
      End If
      If *myWindow\LeftEdge<=0
        left  = Max(left,*myWindow\LeftEdge+*myWindow\Width)
      End If
    End If
    *myWindow = *myWindow\NextWindow
  Wend
  UnlockIBase_ lock
  
  *win.tuiWindow = ntui_GetWindowByID{*ntui,!win_main}
  If *win
    bbox.tuiRect\left = left,top,right,bottom
    ntui_SetAttr{*win,#TUIWA_SCREENBOX,bbox}
  End If

End Statement

XINCLUDE "Utilities.ab3"
XINCLUDE "DocType.ab3"
XINCLUDE "Document.ab3"

; ========================== BASETYPES =========================
XINCLUDE "Types/Default.ab3"
XINCLUDE "Types/XML.ab3"
XINCLUDE "Types/AmigaGuide.ab3"
XINCLUDE "Types/Makefile.ab3"
XINCLUDE "Types/CPP.ab3"
XINCLUDE "Types/AmiBlitz3.ab3"
; ==============================================================

XINCLUDE "Console.ab3"
XINCLUDE "SearchHighlight.ab3"
XINCLUDE "AISS.ab3"
XINCLUDE "Prefs.ab3"
XINCLUDE "FileLister.ab3"

Statement AIDE_Deinit{exitcode.l}

  If *ntui
    ntui_Iconify{*ntui}
  End If
  
  If exitcode = 0 Then Prefs_WriteToIcon{AIDE\Icon}

  Document_Show{#DOCUMENT_INVALID}
  For docX.l=0 To #DOCUMENT_MAX-1
    If AIDE\Document[docX]\IsUsed
      Document_Close{docX}
    End If
  Next

  For docTypeX.l=0 To #DOCTYPE_MAX-1
    If DocType_IsAvailable{docTypeX}
      DocType_Deinit{docTypeX}
    End If
  Next

  For baseTypeX.l=0 To #BASETYPE_MAX-1
    If BaseType_IsAvailable{baseTypeX}
      BaseType_Unregister{baseTypeX}
    End If
  Next

  If *ntui
    ntui_FreeEngine{*ntui}
    *ntui = Null
  End If

  If AIDE\FavoriteT Then pft_Free{AIDE\FavoriteT} : AIDE\FavoriteT = Null

  installLock.l = CurrentDir_(AIDE\CallDirLock) : AIDE\CallDirLock = 0
  If installLock Then UnLock_ installLock
  
  If AIDE\AddAssignDone Then dos_RemAssign{"Libs",dos_AddPart{AIDE\InstallPath,"Libs"}} : AIDE\AddAssignDone = False

End Statement


Statement AIDE_Deinit_Auto{}

  AIDE_Deinit{-666}
  
End Statement
;!autoexit{AIDE_Deinit_Auto} ; crashes on exit


Statement StartUp_OpenWorkSpace{}

  opendocs.s = AIDE\Prefs\OpenDocs
  
  apos.l = 1
  StartUp_Message{"open workspace..."}
  Repeat
    bpos.l = Instr(opendocs,"|",apos)
    If bpos<=0 Then bpos=FLen(opendocs)+1
    If bpos>apos
      filename.s = Mid$(opendocs,apos,bpos-apos)
      cpos.l = Instr(filename,"@")
      lpos.l = 0
      If cpos>0
        lpos.l     = Vallong(Mid$(filename,cpos+1,FLen(filename)-cpos))
        filename.s = Left$(filename,cpos-1)
      End If
      If dos_Exist{filename}
        StartUp_Message{"open "+dos_FilePart{filename}+"..."}
        docX.l = Document_Open{filename}
        Document_SetCursor{docX,lpos,cpos}
      End If
    End If
    apos = bpos+1
  Until apos>=FLen(opendocs)

End Statement


;/* open window functions */
Function.tuiWindow Window_Main{}

  *winmain.tuiWindow = ntui_GetWindowByID{*ntui,!win_main}
  If *winmain
    ntui_FreeObject{*winmain}
    *winmain = Null
  End If
    
  Select AIDE\Prefs\GUILayout
    Case #GUILAYOUT_MEDIUM:
      *winmain.tuiWindow = ntui_GetWindow{ntui_BuildFromXMLFile{*ntui,dos_AddPart{AIDE\GuiPath,!file_win_main_mid}}}
    Case #GUILAYOUT_LARGE:
      *winmain.tuiWindow = ntui_GetWindow{ntui_BuildFromXMLFile{*ntui,dos_AddPart{AIDE\GuiPath,!file_win_main_large}}}
    Default:
      *winmain.tuiWindow = ntui_GetWindow{ntui_BuildFromXMLFile{*ntui,dos_AddPart{AIDE\GuiPath,!file_win_main_small}}}
  End Select
  
  If *winmain = Null Then Function Return *winmain

  *holder_browser.tuiObject  = ntui_GetObjectByID{*winmain,!holder_browser}
  *holder_browser2.tuiObject = ntui_GetObjectByID{*winmain,!holder_browser2}
  *holder_browser3.tuiObject = ntui_GetObjectByID{*winmain,!holder_browser3}
  *holder_console.tuiObject  = ntui_GetObjectByID{*winmain,!holder_console}
  *holder_menu.tuiObject     = ntui_GetObjectByID{*winmain,!holder_menu}
  *holder_toolbar.tuiObject  = ntui_GetObjectByID{*winmain,!holder_toolbar}
  *holder_editor.tuiObject   = ntui_GetObjectByID{*winmain,!holder_editor}

  If *holder_browser3=Null Then *holder_browser3 = *holder_browser2
  If *holder_browser3=Null Then *holder_browser3 = *holder_browser
  If *holder_browser2=Null Then *holder_browser2 = *holder_browser
  
  If *holder_menu     Then ntui_BuildFromXMLFile{*holder_menu    ,dos_AddPart{AIDE\GuiPath,!file_fragment_menu}}
  If *holder_toolbar  Then ntui_BuildFromXMLFile{*holder_toolbar ,dos_AddPart{AIDE\GuiPath,!file_fragment_toolbar}}
  If *holder_console  Then ntui_BuildFromXMLFile{*holder_console ,dos_AddPart{AIDE\GuiPath,!file_fragment_console}}
  If *holder_browser  Then ntui_BuildFromXMLFile{*holder_browser ,dos_AddPart{AIDE\GuiPath,!file_fragment_filebrowser}}
  If *holder_browser2 Then ntui_BuildFromXMLFile{*holder_browser2,dos_AddPart{AIDE\GuiPath,!file_fragment_sourcebrowser}}
  If *holder_browser2 Then ntui_BuildFromXMLFile{*holder_browser2,dos_AddPart{AIDE\GuiPath,!file_fragment_projectbrowser}}
  If *holder_browser3 Then ntui_BuildFromXMLFile{*holder_browser3,dos_AddPart{AIDE\GuiPath,!file_fragment_ab3browser}}
  If *holder_browser3 Then ntui_BuildFromXMLFile{*holder_browser3,dos_AddPart{AIDE\GuiPath,!file_fragment_aissbrowser}}
  If *holder_editor   Then ntui_BuildFromXMLFile{*holder_editor  ,dos_AddPart{AIDE\GuiPath,!file_fragment_editor}}
  
  Function Return *winmain
  
End Function


Function.w Window_SetUpMain{}

  FileLister_Fill{!obj_filelist,AIDE\Prefs\FileListPath,AIDE\DocType[#DOCTYPE_DEFAULT]\Pattern_}
  ntui_SetAttrByID{*ntui,!obj_main_console,#TUITBA_STYLECB,*_con_StyleCallback}
  ntui_SetValueByID{*ntui,!obj_find_docasesense,AIDE\Prefs\CaseSensitiveSearch}
  ntui_SetValueByID{*ntui,!obj_find_doescape   ,AIDE\Prefs\EscapeSearch}
  If AIDE\Prefs\EscapeSearch
    ntui_SetAttrByID{*ntui,!obj_find_string,#TUITBA_STYLECB,*_search_StyleCallback}
    ntui_SetAttrByID{*ntui,!obj_find_replacestring,#TUITBA_STYLECB,*_search_StyleCallback}
  Else
    ntui_SetAttrByID{*ntui,!obj_find_string,#TUITBA_STYLECB,Null}
    ntui_SetAttrByID{*ntui,!obj_find_replacestring,#TUITBA_STYLECB,Null}
  End If
  If AIDE\Prefs\PubScreenName="AIDE"
    ntui_SetAttrByID{*ntui,!win_main,#TUIWA_BORDERLESS,1}
  Else
    ntui_SetAttrByID{*ntui,!win_main,#TUIWA_BORDERLESS,0}
  End If
  AIDE_AutoLayout{}
  Document_UpdateGui{}
      
  If ntui_ShowWindowByID{*ntui,!win_main}=False
    error{"\\__THIS_FUNCTION: Unable to open main AIDE window!"}
    Function Return False
  End If
      
  Function Return True

End Function


Statement Window_About{}

  If ntui_ShowWindowByID{*ntui,!win_about}=False
    ;*win.tuiWindow = ntui_GetWindow{ntui_BuildFromXMLMem{*ntui,?gui_about}}
    *win.tuiWindow = ntui_GetWindow{ntui_BuildFromXMLFile{*ntui,dos_AddPart{AIDE\GuiPath,!file_win_about}}}
    If *win
      ntui_SetStringByID{*win,!obj_about_version  ,"\\__VER_MAJOR.\\__VER_MINOR"}
      ntui_SetStringByID{*win,!obj_about_arexxport,AIDE\Prefs\AREXXPort}
      ntui_SetStringByID{*win,!obj_about_pubscreen,AIDE\Prefs\PubScreenName}
      ntui_SetStringByID{*win,!obj_about_icon,AIDE\Icon}
    End If
    If ntui_ShowWindowByID{*ntui,!win_about}=False Then error{"\\__THIS_FUNCTION: Unable to open About Window!"}
  End If

End Statement


;/* event handler function */
AIDE_HandleNotify:
Function.l AIDE_HandleNotify{*notify.tuiNotify}

  Select ntui_GetNotifyID{*notify}
    Case "POPUP"        ; someone wants us to popup
      ntui_HideAppIcon{*ntui}
      If AIDE\Prefs\PubScreenName="AIDE"
        ntui_SetAttrByID{*ntui,!win_main,#TUIWA_BORDERLESS,1}
      Else
        ntui_SetAttrByID{*ntui,!win_main,#TUIWA_BORDERLESS,0}
      End If
      ntui_PopUp{*ntui,AIDE\Prefs\PubScreenName,Null}

    Case "ICONIFY"      ; someone wants us to iconify
      ntui_Iconify{*ntui}
      ntui_ShowAppIcon{*ntui}

    Case "AREXX"        ; we got an arexx message
      Select ntui_GetNotifyString{*notify}
         Case "QUIT"    : ntui_PostNotify{*ntui,"QUIT"}
         Case "ICONIFY" : ntui_PostNotify{*ntui,"ICONIFY"}
         Case "POPUP"   : ntui_PostNotify{*ntui,"POPUP"}
      End Select

    Case "CLOSE"        ; close a window
      *win.tuiWindow = ntui_GetNotifyWindow{*notify}
      If *win Then ntui_HideWindow{*win}

    Case "QUIT"         ; someone wants us to quit
      AIDE\Quit = True
      For docX.l=0 To #DOCUMENT_MAX-1
        If AIDE\Document[docX]\IsUsed
          If Document_IsEdited{docX}
            option.l = ask{"\\22" + AIDE\Document[docX]\Title + "\\22 has unsafed changes.\\n","Save|Discard|Cancel"}
            Select option
              Case 1 :
                Document_Save{docX,""}
              Case 2 :
               ; discard changes
              Case 0 :
                AIDE\Quit = False
                docX = #DOCUMENT_MAX 
            End Select
          End If
        End If
      Next

    Case !ev_aide_about
      Window_About{}

    Case !ev_source_cursor
      *source.tuiGroup = Source_FindActive{}
      If *source
        ntui_GetAttrByID{*source,!obj_source_text,#TUITBA_CURSORLINE,&lpos.l}
        ntui_GetAttrByID{*source,!obj_source_text,#TUITBA_CURSORCHAR,&cpos.l}
        ntui_GetAttrByID{*source,!obj_source_text,#TUITBA_TOTALLINES,&ltotal.l}
        ;a.s = "Line "+Str$(lpos+1)+" / "+Str$(ltotal)+" Char "+Str$(cpos+1)
        a.s = "Line "+Str$(lpos+1)+" / "+Str$(cpos+1); + " Total "+Str$(ltotal)
        ntui_SetStringByID{*source,!obj_source_status,a}

        ntui_GetAttrByID{*source,!obj_source_text,#TUITBA_NUMBEROFCHANGES,&changes.l}
        ntui_GetAttrByID{*source,!obj_source_text,#TUITBA_UNDOSTEPS,&steps.l}
        ntui_GetAttrByID{*source,!obj_source_text,#TUITBA_EDITED,&edited.l}
        a.s = "#Changes "+Str$(changes)+" / #Undo "+Str$(steps)+" / #Edits "+Str$(edited)+" / #GUI-Updates "+Str$(updatecount)
        ntui_SetStringByID{*source,!obj_source_dstatus,a}
        ;AIDE_UpdateGui{}
      End If

    Case !ev_source_debug
      docX.l = Document_FindActive{}
      If docX>=0
        Document_Debug{docX}
      Else
        error{"No file selected for debugging!"}
      End If

    Case !ev_source_build
      docX.l = Document_FindActive{}
      If docX>=0
        Document_Test{docX}
      Else
        error{"No file selected for compiling!"}
      End If
      
    Case !ev_source_release
      docX.l = Document_FindActive{}
      If docX>=0
        Document_Release{docX}
      Else
        error{"No file selected for release!"}
      End If

    Case !ev_project_build
      docX.l = Document_FindActive{}
      If docX>=0
        Document_Release{docX}
      Else
        error{"No project selected for building!"}
      End If

    Case !ev_source_save
      docX.l = Document_FindActive{}
      If docX>=0
        Document_Save{docX,""} ; find filename from textbox
      Else
        error{"No tab selected to save!"}
      End If

    Case !ev_source_saveall
      For docX.l = 0 To #DOCUMENT_MAX-1
        If Document_IsEdited{docX}
          Document_Save{docX,""}
        End If
      Next


    Case !ev_source_saveas
      filename.s = ntui_GetNotifyString{*notify}
      docX.l = Document_FindActive{}
      If docX>=0
        Document_Save{docX,filename}
      End If

    Case !ev_source_close
      docX.l = Document_FindActive{}
      If docX>=0 Then Document_Close{docX}

    Case !ev_source_closeall
      For docX.l = 0 To #DOCUMENT_MAX-1
        Document_Close{docX}
      Next

    Case !ev_source_closeallbutthis
      docY.l = Document_FindActive{}
      For docX.l = 0 To #DOCUMENT_MAX-1
        If docX><docY Then Document_Close{docX}
      Next

    Case !ev_source_open_req
      docX.l = Document_FindActive{}
      If docX>=0
        filename.s = Document_GetFileName{docX}
        path.s     = dos_PathPart{filename}
        file_.s    = dos_FilePart{filename}
        pattern.s  = AIDE\DocType[#DOCTYPE_DEFAULT]\Pattern_

        If path><"" Then ntui_SetAttrByID{*ntui,!req_source_open,#TUIRA_PATH,&path}
        ntui_SetAttrByID{*ntui,!req_source_open,#TUIRA_FILE,&file_}
        ntui_SetAttrByID{*ntui,!req_source_open,#TUIRA_PATTERN,&pattern}
      End If
      ntui_ShowRequesterByID{*ntui,!req_source_open}

    Case !ev_source_open
      filename.s = ntui_GetNotifyString{*notify}
      docX.l = Document_Open{filename}
      If docX>=0 Then Document_Show{docX}

    Case !ev_source_new
      docX.l = Document_New{}
      If docX>=0 Then Document_Show{docX}

    Case !ev_source_saveas_req
      docX.l = Document_FindActive{}
      If docX>=0
        filename.s = Document_GetFileName{docX}
        path.s     = dos_PathPart{filename}
        file_.s    = dos_FilePart{filename}
        pattern.s  = Document_GetDosPattern{docX}

        If path><"" Then ntui_SetAttrByID{*ntui,!req_source_saveas,#TUIRA_PATH,&path}
        ntui_SetAttrByID{*ntui,!req_source_saveas,#TUIRA_FILE,&file_}
        ntui_SetAttrByID{*ntui,!req_source_saveas,#TUIRA_PATTERN,&pattern}
        

        ntui_ShowRequesterByID{*ntui,!req_source_saveas}
      Else
        error{"No tab selected to save!"}
      End If

   ; Case !ev_path_req
   ;   ntui_ShowRequesterByID{*ntui,"req_path"}

    Case !ev_source_settings
      docX.l = Document_FindActive{}
      If docX>=0
        Document_OpenSettings{docX}
      Else
        error{"No tab selected for settings!"}
      End If

    Case !ev_source_applysettings
      *win.tuiWindow = ntui_GetNotifyWindow{*notify}
      If *win
        ntui_GetAttr{*win,#TUIWA_INSTANCEID,&docX.l}
        If docX>=0
          Document_ApplySettings{docX}
          ntui_HideWindow{*win}
        End If
      End If

    Case !ev_tool_shell
      newcli.s = "NEWSHELL \\22CON:40/40/800/400/AIDE Shell/CLOSE/SCREEN "+AIDE\Prefs\PubScreenName + "\\22"
      Execute_ &newcli,Null,Null

    Case !ev_console_close
      AIDE\CmdIsRunning = False
      Document_UpdateGui{}
      *con.tuiTextBox = (.tuiTextBox)ntui_GetObjectByID{*ntui,!obj_main_console}
      If *con
        txt.s = "\\1B[33m\\1B[1m<<< Done.\\n"
        ntui_SetAttr{*con,#TUITBA_APPENDTEXT,&txt}
      End If

    Case !ev_find_docasesense
      AIDE\Prefs\CaseSensitiveSearch = ntui_GetValueByID{*ntui,!obj_find_docasesense}
      
    Case !ev_find_doescape
      AIDE\Prefs\EscapeSearch = ntui_GetValueByID{*ntui,!obj_find_doescape}
      If AIDE\Prefs\EscapeSearch
        ntui_SetAttrByID{*ntui,!obj_find_string,#TUITBA_STYLECB,*_search_StyleCallback}
        ntui_SetAttrByID{*ntui,!obj_find_replacestring,#TUITBA_STYLECB,*_search_StyleCallback}
      Else
        ntui_SetAttrByID{*ntui,!obj_find_string,#TUITBA_STYLECB,Null}
        ntui_SetAttrByID{*ntui,!obj_find_replacestring,#TUITBA_STYLECB,Null}
      End If

    Case !ev_find_refresh
      needle.s = ntui_GetStringByID{*ntui,!obj_find_string}
      docX.l = Document_FindActive{}
      Document_SelectSearchText{docX,needle,0}

    Case !ev_find_next
      needle.s = ntui_GetStringByID{*ntui,!obj_find_string}
      docX.l = Document_FindActive{}
      Document_SelectSearchText{docX,needle,1}

    Case !ev_find_prev
      needle.s = ntui_GetStringByID{*ntui,!obj_find_string}
      docX.l = Document_FindActive{}
      Document_SelectSearchText{docX,needle,-1}
      
    Case !ev_source_find
      docX.l = Document_FindActive{}
      If docX>=0
        *search.tuiTextBox = (.tuiTextBox)ntui_GetObjectByID{*ntui,!obj_find_string}
        *tb.tuiTextBox = (.tuiTextBox)ntui_GetObjectByID{AIDE\Document[docX]\Source,!obj_source_text}
        If (*tb)
          text.s = ntui_GetTextBoxText{*tb,False}
        Else
          text = ""
        End If
        
        If (*search) 
          If text><"" Then ntui_SetAttr{*search,#TUITBA_TEXT,&text}
          ntui_SetFocus{*search}
          ntui_SetTextBoxSelection{*search}
        EndIf
        
      End If
      
    Case !ev_find_replacefind
      needle.s  = ntui_GetStringByID{*ntui,!obj_find_string}
      replace.s = ntui_GetStringByID{*ntui,!obj_find_replacestring}
      docX.l = Document_FindActive{}
      succ.l = Document_ReplaceSelectedText{docX,replace,"",False}
      Document_SelectSearchText{docX,needle,1}
      If succ Then count.l=1:Else count=0
      Document_SetStatusMessage{docX,Str$(count)+" occurences replaced"}
      
    Case !ev_find_replaceall
      needle.s  = ntui_GetStringByID{*ntui,!obj_find_string}
      replace.s = ntui_GetStringByID{*ntui,!obj_find_replacestring}
      docX.l = Document_FindActive{}
      count.l = Document_ReplaceSelectedText{docX,replace,needle,True}
      Document_SetStatusMessage{docX,Str$(count)+" occurences replaced"}
      
    Case !ev_source_undo      : Document_EditFunction{Document_FindActive{},"undo"}
    Case !ev_source_cut       : Document_EditFunction{Document_FindActive{},"cut"}
    Case !ev_source_copy      : Document_EditFunction{Document_FindActive{},"copy"}
    Case !ev_source_paste     : Document_EditFunction{Document_FindActive{},"paste"}
    Case !ev_source_delete    : Document_EditFunction{Document_FindActive{},"delete"}
    Case !ev_source_selectall : Document_EditFunction{Document_FindActive{},"selectall"}
    Case !ev_source_switch    : ;AIDE_UpdateGui{}
     docX.l = Document_FindActive{}
     Document_Show{docX}

    Case !ev_src_jumpto
      docX.l = Document_FindActive{}
      If docX>=0
        docTypeX.l = AIDE\Document[docX]\DocTypeX
        *lv.tuiListView = (.tuiListView)ntui_GetObjectByID{*ntui,!obj_src_list}
        If *lv
          i.l     = ntui_GetFirstSelectedListItem{*lv}
          type_.s = ntui_GetListItemText{*lv,i,0}
          name.s  = ntui_GetListItemText{*lv,i,1}
          more.s  = ntui_GetListItemText{*lv,i,2}
          DocType_JumpTo{docX, type_, name, more}
        End If
      End If
      
    Case !ev_src_refresh
      docX.l = Document_FindActive{}
      If docX>=0
        DocType_SourceBrowser{docX}
      End If
      
    Case !ev_src_rescan
      docX.l = Document_FindActive{}
      If docX>=0
        AIDE\Document[docX]\NeedScan=True
        Document_Show{docX}
      End If
      
    Case !ev_setlayout_small
      For docX.l = 0 To #DOCUMENT_MAX-1
        Document_Close{docX}
      Next
      AIDE\Prefs\GUILayout = #GUILAYOUT_SMALL
      Window_Main{}
      Window_SetUpMain{}
      
    Case !ev_setlayout_medium
      For docX.l = 0 To #DOCUMENT_MAX-1
        Document_Close{docX}
      Next
      AIDE\Prefs\GUILayout = #GUILAYOUT_MEDIUM
      Window_Main{}
      Window_SetUpMain{}
      
    Case !ev_setlayout_large
      For docX.l = 0 To #DOCUMENT_MAX-1
        Document_Close{docX}
      Next
      AIDE\Prefs\GUILayout = #GUILAYOUT_LARGE
      Window_Main{}
      Window_SetUpMain{}
      
    Case !ev_console_click
      textP.l = 0
      ntui_GetAttrByID{*ntui,!obj_main_console,#TUITBA_CURSORLINE,&textP}
      ntui_GetAttrByID{*ntui,!obj_main_console,#TUITBA_LINE,&textP}
      If textP
        text.s = Peek.s(textP)
        ;error{"Linetext:"+text}

        find.s = ".c:" : pos.l = Instr(text,find)
        If pos<=0 Then find=".h:"   : pos = Instr(text,find)
        If pos<=0 Then find=".cpp:" : pos = Instr(text,find)
        If pos<=0 Then find=".hpp:" : pos = Instr(text,find)
        If pos>0
          pos + FLen(find)
          filename.s = Left$(text,pos-2)
          npos.l = Instr(text,":",pos)
          If npos>=0
            lposstr.s = Mid$(text,pos,npos-pos)
            lpos.l = Vallong(lposstr)-1
          Else
            lpos = 0
          End If
          filename=MakeAmigaDOSFilename{filename}
          ;error{"filename="+filename+" lpos="+Str$(lpos)}
          docX.l = Document_Open{filename}
          Document_JumpTo{docX,lpos,True}
        EndIf

        find.s = "Include"
        If Left$(text,FLen(find))=find
          cpos.l = 7
          While (Peek.b(&text+cpos)><$22 AND cpos<FLen(text)):cpos+1:Wend
          cpos+1
          If cpos<FLen(text)
            bpos.l = cpos
            While (Peek.b(&text+cpos)><$22 AND cpos<FLen(text)):cpos+1:Wend
            If cpos>bpos
              filename.s = Mid$(text,bpos+1,cpos-bpos)
              ;If Instr(filename,":")<=0 Then filename = dos_AddPart{AIDE\BuildPath,filename}

              ;error{"read:"+filename}
              docX.l = Document_Open{filename}
              Document_Show{docX}
            End If
          EndIf
        EndIf

        find.s = "Compiler Error"
        cpos = Instr(text,find)
        If cpos>0
          cpos.l = FLen(find)
          While (Peek.b(&text+cpos)><@"<" AND cpos<FLen(text)):cpos+1:Wend
          cpos+1
          If cpos<FLen(text)
            bpos.l = cpos
            While (Peek.b(&text+cpos)><@">" AND cpos<FLen(text)):cpos+1:Wend
            If cpos>bpos
              filename.s = Mid$(text,bpos+1,cpos-bpos)
              cpos= Instr(filename,"@")
              If cpos>0
                lposstr.s = Right$(filename,FLen(filename)-cpos)
                lpos.l = Vallong(lposstr)-1
                filename = Left$(filename,cpos-1)
              End If
              ;error{"Document:"+filename+"lpos="+lposstr}
              ;If Instr(filename,":")<=0 Then filename = dos_AddPart{AIDE\BuildPath,filename}
              
              docX.l = Document_Open{filename}
              Document_JumpTo{docX,lpos,True}
            End If
          EndIf
        EndIf
      EndIf
      
    Case !ev_input_select
        *win.tuiWindow = ntui_GetNotifyWindow{*notify}
        If *win
          ntui_HideWindow{*win}
          *lv.tuiListView = (.tuiListView)ntui_GetObjectByID{*win,!obj_selector_list}
          i.l = ntui_GetFirstSelectedListItem{*lv}
          If i>=0
            selection.s = ntui_GetListItemText{*lv,i,0}
            docX.l = Document_FindActive{}
            If docX>=0            
             *textBox.tuiTextBox = (.tuiTextBox)ntui_GetObjectByID{AIDE\Document[docX]\Source,!obj_source_text}
              ntui_GetAttr{*textBox,#TUITBA_CURSORLINE,&lpos.l}
              ntui_GetAttr{*textBox,#TUITBA_CURSORCHAR,&cpos.l}
              *lineP.b = lpos
              ntui_GetAttr{*textBox,#TUITBA_LINE,&*lineP}
              If *lineP
                ; here it becomes AB3 specific => func pointer
                fpos.l = 0;_ab3_FindReplaceStart{*lineP,cpos}
                xpos.l = Instr(selection,".",0)
                If xpos > 0
                  selection = Left$(selection,xpos-1)
                End If
                If Left$(selection,1) = "*"
                  selection = Right$(selection, FLen(selection) - 1)
                End If
                If fpos>=0
                  ntui_SetTextBoxSelection    {*textBox,Null,lpos,fpos,lpos,cpos}
                  ntui_ReplaceTextBoxSelection{*textBox,&selection,FLen(selection)}
                End If
              End If
            End If
          End If
        End If
        
    Case "FILESCAN"
      sourcefile.s = ntui_GetNotifyString{*notify}
      docX.l = Document_FindByFilename{sourcefile}
      If docX>=0
        Document_ScanFinish{docX}
        If docX = Document_FindActive{}
          DocType_SourceBrowser{docX}
        End If
      End If

    Case "TEST"
      string.s = ntui_GetNotifyString{*notify}
      value.l  = ntui_GetNotifyValue{*notify}
      error{"We are testing! str=\\22"+string+"\\22 / val="+Str$(value)}

    Default
      Function Return False; not interested
  End Select
  
  Function Return True
End Function
!_MakeGlobalFuncPointer{AIDE_HandleNotify,{Null}}

InstallNotifyHandler{"AIDE", *AIDE_HandleNotify}


;/* ============== Main Program ==============
  exitcode.l = 0
  
  ; build the splash screen
  *splash.tuiObject = ntui_BuildFromXMLFile{Null,dos_AddPart{AIDE\GuiPath,!file_win_splash}}
  If *splash = Null Then error{"Unable to init NTUI environment for AIDE!"} : exitcode = -1 : Goto AIDE_cleanup
  *ntui.tuiEngine = ntui_GetEngine{*splash}
  ntui_PopUp{*ntui,"",Null}
  ntui_ShowWindowByID{*ntui,!win_splash}

  ; read preferences
  StartUp_Message{"reading preferences..."}
  Prefs_ReadFromIcon{AIDE\Icon}

  ; build engine and requesters
  StartUp_Message{"building Gui..."}
  ntui_BuildFromXMLFile{*ntui,dos_AddPart{AIDE\GuiPath,!file_engine}}
  ntui_BuildFromXMLFile{*ntui,dos_AddPart{AIDE\GuiPath,!file_requester}}

  ; build main window
  *winmain.tuiWindow = Window_Main{}
  If *winmain = Null Then error{"Unable to open main window for AIDE!"} : exitcode = -1 : Goto AIDE_cleanup

  ; open documents
  StartUp_OpenWorkSpace{}
  
  ; leave splash screen
  ntui_HideWindowByID{*ntui,!win_splash}
  ntui_Iconify{*ntui}

  ; open own screen
  Prefs_Apply{}
  ntui_PopUp{*ntui,AIDE\Prefs\PubScreenName,Null}
  ntui_ToFront{*ntui}
  
  ; setup the main window content
  If Window_SetUpMain{}=False Then exitcode=-2 : Goto AIDE_cleanup

  ; highlight active document
  docX.l = Document_FindByFilename{AIDE\Prefs\ActiveDocument}
  Document_Show{docX}
  
  ; event loop
  Repeat
    Wait_ -1
    *notify.tuiNotify = ntui_GetNotify{*ntui}
    While *notify
      done.l = NotifyHandler{*notify}
      
      If NOT(done)
        *con.tuiTextBox = (.tuiTextBox)ntui_GetObjectByID {*ntui,!obj_main_console}
      
        If *con
          id.s = ntui_GetNotifyID{*notify}
          If id
            string.s = ntui_GetNotifyString{*notify}
            value.l  = ntui_GetNotifyValue{*notify}
            msg.s = "Unhandled notification: "+id+" (str=\\22"+string+"\\22 / val="+Str$(value)+")\\n"
            ntui_SetAttr{*con,#TUITBA_APPENDTEXT,&msg}
          Else
            msg.s = "WARN: Empty notify!\\n"
          End If
        End If
      End If
      
      ; get next notify, if any
      *notify.tuiNotify = ntui_GetNotify{*ntui}      
    Wend
  Until AIDE\Quit

AIDE_cleanup:
  AIDE_Deinit{exitcode}
End
