; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "Sys:Programme/AIDE"
; ExeFile         = "AIDE"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 0
; Version         = 0.0.0
; NumberOfBuilds  = 517
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 65535
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 155
; CursorColumn    = 37
; LabelSearch     = "b"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 1
; Max GadgetList  = 1
; Max Queue       = 1
; Max Screen      = 2
; Max Shape       = 1
; Max CopList     = 1
; Max Sprite      = 1
; Max Stencil     = 1
; Max Module      = 1
; Max Window      = 30
; Max Anim        = 1
; Max Sound       = 1
; Max Bank        = 1
; Max Buffer      = 1
; Max BitMap      = 1
; Max Slice       = 1
; Max Page        = 1
; Max Tape        = 1
; Max IntuiFont   = 12
; Max MedModule   = 1
; Max Palette     = 1
; Max MenuList    = 1
; Max BlitzFont   = 1
; Max GTList      = 30
; /XTRA
; ========================= XML ====================
#HAS_XML = 1

#XMLCF_TOKEN     = $0001 ;/* is part of token */
#XMLCF_EOL       = $0002 ;/* end of line */
#XMLCF_STOP      = $0004 ;/* stops a token */
#XMLCF_HEX       = $0008
#XMLCF_BIN       = $0010
#XMLCF_DEC       = $0020
#XMLCF_SPACE     = $0040
#XMLCF_ILLEGAL   = $0080
#XMLCF_BRACKET   = $0100
#XMLCF_SPECIAL   = $0200
#XMLCF_STOP      = $0400 ;/* ends token */

NEWTYPE.XML_Base
  CharFlags.w[256]
End NEWTYPE

SHARED XML.XML_Base

NEWTYPE.AIDE_XMLContext_dep

  ; known Tags/attributes/values

End NEWTYPE

; parser
Function.l FAST _xml_SkipWhiteSpaces{*tline.tline,cpos.l}

  While (cpos<*tline\clength) AND ((XML\CharFlags[Peek.b(*tline\text + cpos)&$FF]&#XMLCF_SPACE)><0) : cpos+1 : Wend
  Function Return cpos

End Function


Function.l FAST _xml_ToLower{c.l}

  If c>=@"A" AND c<=@"Z" Then Function Return c-@"A"+@"a"
  Function Return c
  
End Function


Function.l FAST _xml_SkipToken{*tline.tline,cpos.l}

  cf.l = 0

  While (cf&#XMLCF_STOP)=0 AND cpos<*tline\clength
    cpos+1 : If cpos>=*tline\clength Then Function Return cpos
    cf.l = XML\CharFlags[Peek.b(*tline\text + cpos)&$FF]
  Wend
  Function Return cpos

End Function


Function.l FAST _xml_ParseComment{*tline.tline,cpos.l,*flags.longP}

  opos.l = cpos-3 : If opos<0 Then opos=0
  _tb_SetStyleCommand{*tline,opos ,#TUITBSC_ITALIC,1,0}
  _tb_SetStyleCommand{*tline,opos ,#TUITBSC_FGPEN,#TUITBPEN_COMMENT,0}
  _tb_SetStyleCommand{*tline,opos ,#TUITBSC_BGPEN,#TUITBPEN_BG2,0}
  *flags\l | #TUITBLF_INCOMMENT
  count.l = 0  
  While cpos<*tline\clength
    c.w = Peek.b(*tline\text+cpos)&$FF : cpos+1
    Select c
      Case @"-" : count+1
      Case @">"
        If count>=2
          _tb_SetStyleCommand{*tline,cpos ,#TUITBSC_ITALIC,0,0}
          _tb_SetStyleCommand{*tline,cpos ,#TUITBSC_FGPEN,#TUITBPEN_TEXT,0}
          _tb_SetStyleCommand{*tline,cpos ,#TUITBSC_BGPEN,#TUITBPEN_BG,0}
          *flags\l - #TUITBLF_INCOMMENT
          Function Return cpos
        Else
          count=0
        End If
      Default
        count=0
    End Select
  Wend

  ;_tb_SetStyleCommand{*tline,*tline\clength-1,#TUITBSC_BGPEN,#TUITBPEN_BG,0}
  Function Return *tline\clength

End Function


Function.l _xml_ParseEscape{*tline.tline,cpos.l}

  opos.l = cpos-1
  _tb_SetStyleCommand{*tline,opos,#TUITBSC_FGPEN,#TUITBPEN_CONSTANT,0}

  While cpos<*tline\clength
    c.w = Peek.b(*tline\text+cpos)&$FF : cpos+1
    Select c
      Case @";" : Function Return cpos
    End Select
  Wend
  
  _tb_SetStyleCommand{*tline,opos,#TUITBSC_WARN,1,#TUIPEN_BLUE}
  _tb_SetStyleCommand{*tline,cpos-1,#TUITBSC_WARN,0}
  Function Return cpos

End Function


Function.l FAST _xml_ParseValue{*tline.tline,cpos.l}
  opos.l = cpos-1
  c.b=Peek.b(*tline\text+cpos)
  terminator.b = $20
  
  Select c
    Case $22
      _tb_SetStyleCommand{*tline,cpos,#TUITBSC_FGPEN,#TUITBPEN_STRING,0}
      terminator = c
      cpos+1
    Case @"'"
      _tb_SetStyleCommand{*tline,cpos,#TUITBSC_FGPEN,#TUITBPEN_STRING,0}
      terminator = c
      cpos+1
    Default
      _tb_SetStyleCommand{*tline,cpos,#TUITBSC_FGPEN,#TUITBPEN_CONSTANT,0}
  End Select

  While cpos<*tline\clength
    c = Peek.b(*tline\text+cpos)&$FF : cpos+1
    Select c
      Case @"&"
        cpos = _xml_ParseEscape{*tline,cpos}
        _tb_SetStyleCommand{*tline,cpos,#TUITBSC_FGPEN,#TUITBPEN_STRING,0}
      Default
        If terminator=$20 
          If (XML\CharFlags[c&$FF]&#XMLCF_SPACE) Then c=$20
          If (XML\CharFlags[c&$FF]&#XMLCF_SPECIAL) Then c=$20
          If c=@"/" Then c=$20
        End If
        If c=terminator
          If terminator=$20 Then cpos-1
          _tb_SetStyleCommand{*tline,cpos,#TUITBSC_FGPEN,#TUITBPEN_TEXT,0}
          Function Return cpos
        End If
    End Select
  Wend
  ;_tb_SetStyleCommand{*tline,opos ,#TUITBSC_WARN,1,#TUIPEN_RED}
  Function Return cpos

End Function

Function.l FAST _xml_ParseAttr{*tline.tline,cpos.l}

  _tb_SetStyleCommand{*tline,cpos-1,#TUITBSC_FGPEN,#TUITBPEN_ATTR,0}
  ;_tb_SetStyleCommand{*tline,cpos-1,#TUITBSC_BOLD,1,0}
  cpos = _xml_SkipToken{*tline,cpos}
  _tb_SetStyleCommand{*tline,cpos,#TUITBSC_FGPEN,#TUITBPEN_TEXT,0}
  ;_tb_SetStyleCommand{*tline,cpos,#TUITBSC_BOLD,0,0}
  cpos = _xml_SkipWhiteSpaces{*tline,cpos}
  
  c.b=Peek.b(*tline\text+cpos) : cpos+1
  
  Select c
    Case @"="
      cpos = _xml_SkipWhiteSpaces{*tline,cpos}
      cpos = _xml_ParseValue{*tline,cpos}
    Case @">"
      Function Return cpos-1
    Default
      _tb_SetStyleCommand{*tline,cpos-1,#TUITBSC_WARN,1,#TUIPEN_GREEN}
      _tb_SetStyleCommand{*tline,cpos  ,#TUITBSC_WARN,0,#TUIPEN_GREEN}
      Function Return cpos
  End Select
    
  Function Return cpos

End Function


Function.l FAST _xml_ParseTag{*tline.tline,cpos.l,*flags.longP}

  If (*flags\l&#TUITBLF_INTAG) = 0
    c.b=Peek.b(*tline\text+cpos)
    If c= @"!" 
      If cpos+2<*tline\clength
        c1.b=Peek.b(*tline\text+cpos+1)
        c2.b=Peek.b(*tline\text+cpos+2)
        If c1=@"-" AND c2=@"-"
          Function Return _xml_ParseComment{*tline,cpos+2,*flags}
        End If
      End If
    End If
    _tb_SetStyleCommand{*tline,cpos-1,#TUITBSC_FGPEN,#TUITBPEN_TAG,0}
    _tb_SetStyleCommand{*tline,cpos-1,#TUITBSC_BOLD,1,0}

    c.b=Peek.b(*tline\text+cpos)
    If c= @"/" Then cpos+1
    
    fpos.l = _xml_SkipWhiteSpaces{*tline,cpos}
    cpos   = _xml_SkipToken{*tline,fpos-1}
    cpos.l = _xml_SkipWhiteSpaces{*tline,cpos}
    
    c.b=Peek.b(*tline\text+cpos)
    If c= @"/" Then cpos+1
    
    c.b=Peek.b(*tline\text+cpos)
    If c= @">" 
      cpos+1
      _tb_SetStyleCommand{*tline,cpos,#TUITBSC_FGPEN,#TUITBPEN_TEXT,0}
      _tb_SetStyleCommand{*tline,cpos,#TUITBSC_BOLD,0,0}

      Function Return cpos
    End If
    
    _tb_SetStyleCommand{*tline,cpos,#TUITBSC_BOLD,0,0}
    
    *flags\l | #TUITBLF_INTAG
  EndIf
  
  While cpos<*tline\clength
    cpos = _xml_SkipWhiteSpaces{*tline,cpos}
    c.b=Peek.b(*tline\text+cpos) : cpos+1
    Select c
      Case @"/" : ; close tag
        c.b=Peek.b(*tline\text+cpos) : cpos+1
        If c=@">"
          _tb_SetStyleCommand{*tline,cpos-2,#TUITBSC_FGPEN,#TUITBPEN_TAG,0}
          _tb_SetStyleCommand{*tline,cpos-2,#TUITBSC_BOLD,1,0}
          _tb_SetStyleCommand{*tline,cpos,#TUITBSC_FGPEN,#TUITBPEN_TEXT,0}
          _tb_SetStyleCommand{*tline,cpos,#TUITBSC_BOLD,0,0}
          *flags\l - #TUITBLF_INTAG
          Function Return cpos
        Else
          _tb_SetStyleCommand{*tline,cpos,#TUITBSC_WARN,1}        
        End If
        
      Case @"?" : ; close tag
        c.b=Peek.b(*tline\text+cpos) : cpos+1
        If c=@">"
          _tb_SetStyleCommand{*tline,cpos-2,#TUITBSC_FGPEN,#TUITBPEN_TAG,0}
          _tb_SetStyleCommand{*tline,cpos-2,#TUITBSC_BOLD,1,0}
          _tb_SetStyleCommand{*tline,cpos,#TUITBSC_FGPEN,#TUITBPEN_TEXT,0}
          _tb_SetStyleCommand{*tline,cpos,#TUITBSC_BOLD,0,0}
          *flags\l - #TUITBLF_INTAG
          Function Return cpos
        Else
          _tb_SetStyleCommand{*tline,cpos,#TUITBSC_WARN,1}        
        End If
        
      Case @">"
        _tb_SetStyleCommand{*tline,cpos-1,#TUITBSC_FGPEN,#TUITBPEN_TAG,0}
        _tb_SetStyleCommand{*tline,cpos-1,#TUITBSC_BOLD,1,0}
        _tb_SetStyleCommand{*tline,cpos,#TUITBSC_FGPEN,#TUITBPEN_TEXT,0}
        _tb_SetStyleCommand{*tline,cpos,#TUITBSC_BOLD,0,0}
        *flags\l - #TUITBLF_INTAG
        Function Return cpos
        
      Default
        If XML\CharFlags[c&$FF]&#XMLCF_TOKEN
          cpos = _xml_ParseAttr{*tline,cpos}
        Else
          Function Return *tline\clength
        End If
     End Select
     
  Wend

  Function Return cpos

End Function


_xml_StyleCallback:
Function.l _xml_StyleCallback{*textBox.tuiTextBox,lpos.l,*tline.tline}

  flags.l = #TUITBLF_NONE
  If lpos>0
    !line_use{*pline, lpos-1}
    If (*pline\flags&#TUITBLF_STYLED)
       flags = *pline\flags
    Else
      ; we should style it first!
      Function Return #TUISCB_PREV
    End If
  End If

  If *tline\text
    *tline\sclength = 0
    bptr.l          = *tline\text ; base pointer
    cpos.l          = 0

    If flags&#TUITBLF_INCOMMENT
      cpos = _xml_ParseComment{*tline,cpos,(.longP)&flags}
    End If
    
    If flags&#TUITBLF_INTAG
      cpos = _xml_ParseTag{*tline,cpos,(.longP)&flags}
    End If

    While cpos<*tline\clength
      c.b = Peek.b(bptr+cpos) : cpos+1

      Select c
        Case @"<" :
          cpos = _xml_ParseTag{*tline,cpos,(.longP)&flags}
          
        Default
          If XML\CharFlags[c&$FF]&#XMLCF_SPECIAL
            _tb_SetStyleCommand{*tline,cpos-1,#TUITBSC_WARN,1,#TUIPEN_RED}
            _tb_SetStyleCommand{*tline,cpos  ,#TUITBSC_WARN,0,#TUIPEN_RED}
          End If
          
      End Select

    Wend

    *tline\flags|#TUITBLF_STYLED
    oflags.l = *tline\flags
    If flags&#TUITBLF_INCOMMENT Then *tline\flags|#TUITBLF_INCOMMENT : Else *tline\flags|#TUITBLF_INCOMMENT - #TUITBLF_INCOMMENT
    If flags&#TUITBLF_INTAG     Then *tline\flags|#TUITBLF_INTAG     : Else *tline\flags|#TUITBLF_INTAG     - #TUITBLF_INTAG   
    If ((*tline\flags&#TUITBLF_INCOMMENT) >< (oflags&#TUITBLF_INCOMMENT)) Then Function Return #TUISCB_NEXT
    If ((*tline\flags&#TUITBLF_INTAG    ) >< (oflags&#TUITBLF_INTAG    )) Then Function Return #TUISCB_NEXT
  End If

  Function Return #TUISCB_DONE

End Function
!_MakeGlobalFuncPointer{_xml_StyleCallback,{Null,0,Null}}


XML_Prepare:
Function.l XML_Prepare{docTypeX.l}

  Function Return Default_Prepare{docTypeX}

End Function
!_MakeGlobalFuncPointer{XML_Prepare,{0}}


XML_Deinit:
Statement XML_Deinit{docTypeX.l}

  Default_Deinit{docTypeX}
  
End Statement
!_MakeGlobalFuncPointer{XML_Deinit,{0}}


XML_InitDocType:
Function.l XML_InitDocType{baseTypeX.l, docTypeX.l}

  If NOT(Default_InitDocType{baseTypeX, docTypeX}) Then Function Return False
  DocType_SetPattern{docTypeX, "#?.(xml)"}
  AIDE\DocType[docTypeX]\Name          = "XML"
  AIDE\DocType[docTypeX]\DefIcon       = "Icons/def_xml.info"
  AIDE\DocType[docTypeX]\Prepare       = *XML_Prepare
  AIDE\DocType[docTypeX]\Deinit        = *XML_Deinit
  AIDE\DocType[docTypeX]\StyleCallback = *_xml_StyleCallback
  AIDE\DocType[docTypeX]\TestCmd       = !MULTIVIEW_CMD
  Function Return True
  
End Function
!_MakeGlobalFuncPointer{XML_InitDocType,{0, 0}}


Statement XML_Register{baseTypeX.l}

  AIDE\BaseType[baseTypeX]\Name = "XML"
  AIDE\BaseType[baseTypeX]\IsAvailable = True
  AIDE\BaseType[baseTypeX]\InitDocType = *XML_InitDocType
  AIDE\BaseType[baseTypeX]\Unregister = *Default_Unregister
  
  ;/* ================= Init Character Flags ============== */
  For n.l=0 To 255
    XML\CharFlags[n] = #XMLCF_ILLEGAL | #XMLCF_STOP
  Next

  XML\CharFlags[   0] = #XMLCF_ILLEGAL | #XMLCF_STOP | #XMLCF_EOL ; Null
  XML\CharFlags[   1] = #XMLCF_ILLEGAL | #XMLCF_STOP ; SOH
  XML\CharFlags[   2] = #XMLCF_ILLEGAL | #XMLCF_STOP ; STX
  XML\CharFlags[   3] = #XMLCF_ILLEGAL | #XMLCF_STOP ; ETX
  XML\CharFlags[   4] = #XMLCF_ILLEGAL | #XMLCF_STOP ; EOT
  XML\CharFlags[   5] = #XMLCF_ILLEGAL | #XMLCF_STOP ; ENQ
  XML\CharFlags[   6] = #XMLCF_ILLEGAL | #XMLCF_STOP ; ACK
  XML\CharFlags[   7] = #XMLCF_ILLEGAL | #XMLCF_STOP ; BELL
  XML\CharFlags[   8] = #XMLCF_ILLEGAL | #XMLCF_STOP ; BS  (backspace)
  XML\CharFlags[   9] = #XMLCF_ILLEGAL | #XMLCF_STOP | #XMLCF_SPACE ; TAB (tabulator)
  XML\CharFlags[  10] = #XMLCF_ILLEGAL | #XMLCF_STOP | #XMLCF_EOL ; LF  (line feed) Linux Return
  XML\CharFlags[  11] = #XMLCF_ILLEGAL | #XMLCF_STOP ; VT
  XML\CharFlags[  12] = #XMLCF_ILLEGAL | #XMLCF_STOP ; FF  (feed forward)
  XML\CharFlags[  13] = #XMLCF_ILLEGAL | #XMLCF_STOP ; CR  (carrier return) Windows Return
  XML\CharFlags[  14] = #XMLCF_ILLEGAL | #XMLCF_STOP ; SO
  XML\CharFlags[  15] = #XMLCF_ILLEGAL | #XMLCF_STOP ; SI
  XML\CharFlags[  16] = #XMLCF_ILLEGAL | #XMLCF_STOP ; DLE
  XML\CharFlags[  17] = #XMLCF_ILLEGAL | #XMLCF_STOP ; DC1
  XML\CharFlags[  18] = #XMLCF_ILLEGAL | #XMLCF_STOP ; CD2
  XML\CharFlags[  19] = #XMLCF_ILLEGAL | #XMLCF_STOP ; CD3
  XML\CharFlags[  20] = #XMLCF_ILLEGAL | #XMLCF_STOP ; CD4
  XML\CharFlags[  21] = #XMLCF_ILLEGAL | #XMLCF_STOP ; NAK
  XML\CharFlags[  22] = #XMLCF_ILLEGAL | #XMLCF_STOP ; SYN
  XML\CharFlags[  23] = #XMLCF_ILLEGAL | #XMLCF_STOP ; ETB
  XML\CharFlags[  24] = #XMLCF_ILLEGAL | #XMLCF_STOP ; CAN (Cancel)
  XML\CharFlags[  25] = #XMLCF_ILLEGAL | #XMLCF_STOP ; EM
  XML\CharFlags[  26] = #XMLCF_ILLEGAL | #XMLCF_STOP ; SUB
  XML\CharFlags[  27] = #XMLCF_ILLEGAL | #XMLCF_STOP ; ESC (Escape)
  XML\CharFlags[  28] = #XMLCF_ILLEGAL | #XMLCF_STOP ; FS
  XML\CharFlags[  29] = #XMLCF_ILLEGAL | #XMLCF_STOP ; GS
  XML\CharFlags[  30] = #XMLCF_ILLEGAL | #XMLCF_STOP ; RS
  XML\CharFlags[  31] = #XMLCF_ILLEGAL | #XMLCF_STOP ; US
  XML\CharFlags[@" "] = #XMLCF_STOP | #XMLCF_SPACE ; Space
  XML\CharFlags[@"!"] = #XMLCF_TOKEN
  XML\CharFlags[  34] = #XMLCF_STOP | #XMLCF_SPECIAL
  XML\CharFlags[@"#"] = #XMLCF_STOP | #XMLCF_TOKEN   
  XML\CharFlags[@"$"] = #XMLCF_STOP | #XMLCF_TOKEN   
  XML\CharFlags[@"%"] = #XMLCF_STOP 
  XML\CharFlags[@"&"] = #XMLCF_STOP | #XMLCF_SPECIAL
  XML\CharFlags[@"'"] = #XMLCF_STOP | #XMLCF_SPECIAL 
  XML\CharFlags[@"("] = #XMLCF_STOP | #XMLCF_BRACKET
  XML\CharFlags[@")"] = #XMLCF_STOP | #XMLCF_BRACKET
  XML\CharFlags[@"*"] = #XMLCF_STOP 
  XML\CharFlags[@"+"] = #XMLCF_STOP 
  XML\CharFlags[@","] = #XMLCF_STOP 
  XML\CharFlags[@"-"] = #XMLCF_STOP 
  XML\CharFlags[@"."] = #XMLCF_STOP 
  XML\CharFlags[@"/"] = #XMLCF_STOP 
  XML\CharFlags[@"0"] = #XMLCF_TOKEN    | #XMLCF_BIN |#XMLCF_HEX|#XMLCF_DEC
  XML\CharFlags[@"1"] = #XMLCF_TOKEN    | #XMLCF_BIN |#XMLCF_HEX|#XMLCF_DEC
  XML\CharFlags[@"2"] = #XMLCF_TOKEN    | #XMLCF_HEX |#XMLCF_DEC
  XML\CharFlags[@"3"] = #XMLCF_TOKEN    | #XMLCF_HEX |#XMLCF_DEC
  XML\CharFlags[@"4"] = #XMLCF_TOKEN    | #XMLCF_HEX |#XMLCF_DEC
  XML\CharFlags[@"5"] = #XMLCF_TOKEN    | #XMLCF_HEX |#XMLCF_DEC
  XML\CharFlags[@"6"] = #XMLCF_TOKEN    | #XMLCF_HEX |#XMLCF_DEC
  XML\CharFlags[@"7"] = #XMLCF_TOKEN    | #XMLCF_HEX |#XMLCF_DEC
  XML\CharFlags[@"8"] = #XMLCF_TOKEN    | #XMLCF_HEX |#XMLCF_DEC
  XML\CharFlags[@"9"] = #XMLCF_TOKEN    | #XMLCF_HEX |#XMLCF_DEC
  XML\CharFlags[@":"] = #XMLCF_TOKEN 
  XML\CharFlags[@";"] = #XMLCF_STOP
  XML\CharFlags[@"<"] = #XMLCF_STOP | #XMLCF_SPECIAL
  XML\CharFlags[@"="] = #XMLCF_STOP 
  XML\CharFlags[@">"] = #XMLCF_STOP | #XMLCF_SPECIAL
  XML\CharFlags[@"?"] = #XMLCF_TOKEN 
  XML\CharFlags[@"@"] = #XMLCF_TOKEN
  XML\CharFlags[@"A"] = #XMLCF_TOKEN  | #XMLCF_HEX
  XML\CharFlags[@"B"] = #XMLCF_TOKEN  | #XMLCF_HEX
  XML\CharFlags[@"C"] = #XMLCF_TOKEN  | #XMLCF_HEX
  XML\CharFlags[@"D"] = #XMLCF_TOKEN  | #XMLCF_HEX
  XML\CharFlags[@"E"] = #XMLCF_TOKEN  | #XMLCF_HEX
  XML\CharFlags[@"F"] = #XMLCF_TOKEN  | #XMLCF_HEX
  XML\CharFlags[@"G"] = #XMLCF_TOKEN  
  XML\CharFlags[@"H"] = #XMLCF_TOKEN  
  XML\CharFlags[@"I"] = #XMLCF_TOKEN  
  XML\CharFlags[@"J"] = #XMLCF_TOKEN  
  XML\CharFlags[@"K"] = #XMLCF_TOKEN  
  XML\CharFlags[@"L"] = #XMLCF_TOKEN  
  XML\CharFlags[@"M"] = #XMLCF_TOKEN  
  XML\CharFlags[@"N"] = #XMLCF_TOKEN  
  XML\CharFlags[@"O"] = #XMLCF_TOKEN  
  XML\CharFlags[@"P"] = #XMLCF_TOKEN  
  XML\CharFlags[@"Q"] = #XMLCF_TOKEN  
  XML\CharFlags[@"R"] = #XMLCF_TOKEN  
  XML\CharFlags[@"S"] = #XMLCF_TOKEN  
  XML\CharFlags[@"T"] = #XMLCF_TOKEN  
  XML\CharFlags[@"U"] = #XMLCF_TOKEN  
  XML\CharFlags[@"V"] = #XMLCF_TOKEN  
  XML\CharFlags[@"W"] = #XMLCF_TOKEN  
  XML\CharFlags[@"X"] = #XMLCF_TOKEN  
  XML\CharFlags[@"Y"] = #XMLCF_TOKEN  
  XML\CharFlags[@"Z"] = #XMLCF_TOKEN  
  XML\CharFlags[@"["] = #XMLCF_STOP  | #XMLCF_BRACKET
  XML\CharFlags[@"\"] = #XMLCF_STOP 
  XML\CharFlags[@"]"] = #XMLCF_STOP  | #XMLCF_BRACKET
  XML\CharFlags[@"^"] = #XMLCF_STOP 
  XML\CharFlags[@"_"] = #XMLCF_TOKEN  
  XML\CharFlags[@"`"] = #XMLCF_STOP 
  XML\CharFlags[@"a"] = #XMLCF_TOKEN   | #XMLCF_HEX
  XML\CharFlags[@"b"] = #XMLCF_TOKEN   | #XMLCF_HEX
  XML\CharFlags[@"c"] = #XMLCF_TOKEN   | #XMLCF_HEX
  XML\CharFlags[@"d"] = #XMLCF_TOKEN   | #XMLCF_HEX
  XML\CharFlags[@"e"] = #XMLCF_TOKEN   | #XMLCF_HEX
  XML\CharFlags[@"f"] = #XMLCF_TOKEN   | #XMLCF_HEX
  XML\CharFlags[@"g"] = #XMLCF_TOKEN  
  XML\CharFlags[@"h"] = #XMLCF_TOKEN  
  XML\CharFlags[@"i"] = #XMLCF_TOKEN  
  XML\CharFlags[@"j"] = #XMLCF_TOKEN  
  XML\CharFlags[@"k"] = #XMLCF_TOKEN  
  XML\CharFlags[@"l"] = #XMLCF_TOKEN  
  XML\CharFlags[@"m"] = #XMLCF_TOKEN  
  XML\CharFlags[@"n"] = #XMLCF_TOKEN  
  XML\CharFlags[@"o"] = #XMLCF_TOKEN  
  XML\CharFlags[@"p"] = #XMLCF_TOKEN  
  XML\CharFlags[@"q"] = #XMLCF_TOKEN  
  XML\CharFlags[@"r"] = #XMLCF_TOKEN  
  XML\CharFlags[@"s"] = #XMLCF_TOKEN  
  XML\CharFlags[@"t"] = #XMLCF_TOKEN  
  XML\CharFlags[@"u"] = #XMLCF_TOKEN  
  XML\CharFlags[@"v"] = #XMLCF_TOKEN  
  XML\CharFlags[@"w"] = #XMLCF_TOKEN  
  XML\CharFlags[@"x"] = #XMLCF_TOKEN  
  XML\CharFlags[@"y"] = #XMLCF_TOKEN  
  XML\CharFlags[@"z"] = #XMLCF_TOKEN  
  XML\CharFlags[@"{"] = #XMLCF_STOP  | #XMLCF_BRACKET
  XML\CharFlags[@"|"] = #XMLCF_STOP 
  XML\CharFlags[@"}"] = #XMLCF_STOP  | #XMLCF_BRACKET
  XML\CharFlags[@"~"] = #XMLCF_STOP 
  XML\CharFlags[ 127] = #XMLCF_STOP  | #XMLCF_ILLEGAL
    
End Statement

XML_Register{#BASETYPE_XML}

; ===========================================================
