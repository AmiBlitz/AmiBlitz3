; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "//AIDE"
; ExeFile         = "AIDE"
; CreateIcon      = 0
; Residents       = "all.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.5.0
; NumberOfBuilds  = 1134
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8192
; RuntimeDebug    = 0
; DebugInfo       = 0
; CreateDbgFile   = 1
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1677
; CursorColumn    = 68
; LabelSearch     = "def"
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 50
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 30
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 1
; Max GadgetList  = 1
; Max Queue       = 1
; Max Screen      = 2
; Max Shape       = 1
; Max CopList     = 1
; Max Sprite      = 1
; Max Stencil     = 1
; Max Module      = 1
; Max Window      = 30
; Max Anim        = 1
; Max Sound       = 1
; Max Bank        = 1
; Max Buffer      = 1
; Max BitMap      = 1
; Max Slice       = 1
; Max Page        = 1
; Max Tape        = 1
; Max IntuiFont   = 12
; Max MedModule   = 1
; Max Palette     = 1
; Max MenuList    = 1
; Max BlitzFont   = 1
; Max GTList      = 30
; /XTRA

;XINCLUDE "Definitions.ab3"
;XINCLUDE "Utilities.ab3"
;XINCLUDE "DocType.ab3"
;XINCLUDE "Document.ab3"

Dim BaseType2Option.l(#BASETYPE_MAX)
Dim Option2BaseType.l(#BASETYPE_MAX)
SHARED BaseType2Option()
SHARED Option2BaseType()

Statement Prefs_FillDocTypeList{}

  *lv.tuiListView = (.tuiListView)ntui_GetObjectByID{*ntui,"prefs_doctype_list"}
  If *lv
    ntui_ClearListView{*lv}
    For docTypeX.l=0 To #DOCTYPE_MAX-1
      If DocType_IsAvailable{docTypeX}
        image.s=DocType_GetDefIcon{docTypeX}
        lvitem.s = "\p"+image+"|"+AIDE\DocType[docTypeX]\Name
        ntui_AddListItem{*lv,-1,lvitem,docTypeX,docTypeX,#TUIF_NONE}
      End If
    Next

    activeX.l = ntui_GetListItemIndexByID{*lv, AIDE\CurrentDocTypeX}
    If activeX >= 0
      ntui_SelectListItem{*lv, activeX}
    End If
  End If

End Statement


Function.l Prefs_CloseDocsFromDocType{docTypeX.l}

  If DocType_OpenDocs{docTypeX} = 0 Then Function Return True

  If ask{"You have open documents with this document type.\\nThey need to be closed.","Close|Cancel"}
    For docX.l = 0 To #DOCUMENT_MAX-1
      If AIDE\Document[docX]\IsUsed
        If AIDE\Document[docX]\DocTypeX = docTypeX
          Document_Close{docX}
        End If
      End If
    Next
    Function Return True
  End If

  Function Return False

End Function


Statement Prefs_SetFont{fontname.s, fontsize.l}

   If dos_GetExt{fontname} = "font" Then fontname = dos_RemExt{fontname}
   If fontname="" Then fontname = "default"
   If fontsize<=0 Then fontsizeS.s = "*" : Else fontsizeS = Str$(fontsize)
   font.s = fontname + "/" + fontsizeS
   ntui_SetStringByID{*ntui,"prefs_font", font}

End Statement

Function.s Prefs_GetFontName{fontname.s}
  font.s = ntui_GetStringByID{*ntui,"prefs_font"}
  xpos.l = Instr(font,"/")
  If xpos > 0
    fontname = Left$(font,xpos-1) + ".font"
  End If
  Function Return fontname
End Function


Function.l Prefs_GetFontSize{fontsize.l}

  font.s = ntui_GetStringByID{*ntui,"prefs_font"}
  xpos.l = Instr(font,"/")
  If xpos > 0
    fontsizeS.s = Right$(font, FLen(font) - xpos)
    If fontsizeS="*" OR fontsizeS=""
      fontsize = -1
    Else
      fontsize = Vallong(fontsizeS)
    End If
  End If
  Function Return fontsize

End Function


; write a doctype configuration to icon
Statement Prefs_WriteDocTypeToIcon{docTypeX.l, icon.s}

  If NOT(DocType_IsAvailable{docTypeX}) Then Statement Return

  dt.s = "DocType["+Str$(docTypeX)+"]."
  dos_SetToolString {dt + "name",     AIDE\DocType[docTypeX]\Name,     icon}
  dos_SetToolString {dt + "pattern",  AIDE\DocType[docTypeX]\Pattern_, icon}
  dos_SetToolString {dt + "deficon",  AIDE\DocType[docTypeX]\DefIcon,  icon}
  dos_SetToolString {dt + "workpath", AIDE\DocType[docTypeX]\WorkPath, icon}
  dos_SetToolString {dt + "sdkpath",  AIDE\DocType[docTypeX]\SDKPath,  icon}
  dos_SetToolValue  {dt + "stack",    AIDE\DocType[docTypeX]\Stack,    icon}
  dos_SetToolString {dt + "opencmd",  AIDE\DocType[docTypeX]\OpenCmd,  icon}
  dos_SetToolString {dt + "testcmd",  AIDE\DocType[docTypeX]\TestCmd,  icon}
  dos_SetToolString {dt + "debugcmd", AIDE\DocType[docTypeX]\DebugCmd, icon}
  dos_SetToolString {dt+"releasecmd", AIDE\DocType[docTypeX]\ReleaseCmd, icon}
  dos_SetToolString {dt + "basetype", AIDE\BaseType[AIDE\DocType[docTypeX]\BaseTypeX]\Name, icon}

End Statement


Statement Prefs_RemDocTypeFromIcon{docTypeX.l, icon.s}

  dt.s = "DocType["+Str$(docTypeX)+"]."
  If dos_GetToolString{dt + "name", "", icon} >< ""
    dos_SetToolState {dt + "name", False, icon}
  End If

End Statement


; read a doctype configuration from icon
Statement Prefs_ReadDocTypeFromIcon{docTypeX.l, icon.s}

  If docTypeX < 0 OR docTypeX >= #DOCTYPE_MAX Then Statement Return
  dt.s = "DocType["+Str$(docTypeX)+"]."

  baseName.s = dos_GetToolString {dt + "basetype", "", icon}
  baseTypeX.l = BaseType_GetByName{baseName}
  If NOT(BaseType_IsAvailable{baseTypeX}) Then Statement Return

  docTypeName.s = dos_GetToolString {dt + "name", "", icon}
  If docTypeName = "" Then Statement Return

  If DocType_IsAvailable{docTypeX}
    DocType_Deinit{docTypeX}
  End If
  !_ASSERT{AIDE\DocType[docTypeX]\IsAvailable = False}
  If NOT(BaseType_InitDocType{baseTypeX, docTypeX}) Then Statement Return

  AIDE\DocType[docTypeX]\Name      = docTypeName
  DocType_SetPattern{docTypeX, dos_GetToolString {dt + "pattern",  AIDE\DocType[docTypeX]\Pattern_,   icon}}
  AIDE\DocType[docTypeX]\DefIcon   = dos_GetToolString {dt + "deficon",  AIDE\DocType[docTypeX]\DefIcon,   icon}
  AIDE\DocType[docTypeX]\WorkPath  = dos_GetToolString {dt + "workpath", AIDE\DocType[docTypeX]\WorkPath,  icon}
  AIDE\DocType[docTypeX]\SDKPath   = dos_GetToolString {dt + "sdkpath",  AIDE\DocType[docTypeX]\SDKPath,   icon}
  AIDE\DocType[docTypeX]\Stack     = dos_GetToolValue  {dt + "stack",    AIDE\DocType[docTypeX]\Stack,     icon}
  AIDE\DocType[docTypeX]\OpenCmd   = dos_GetToolString {dt + "opencmd",  AIDE\DocType[docTypeX]\OpenCmd,   icon}
  AIDE\DocType[docTypeX]\TestCmd   = dos_GetToolString {dt + "testcmd",  AIDE\DocType[docTypeX]\TestCmd,   icon}
  AIDE\DocType[docTypeX]\DebugCmd  = dos_GetToolString {dt + "debugcmd", AIDE\DocType[docTypeX]\DebugCmd,  icon}
  AIDE\DocType[docTypeX]\ReleaseCmd= dos_GetToolString {dt+"releasecmd", AIDE\DocType[docTypeX]\ReleaseCmd,icon}

End Statement


; read a doctype configuration from preferences window
Statement Prefs_ReadDocTypeFromGui{docTypeX.l}

  If docTypeX < 0 OR docTypeX >= #DOCTYPE_MAX Then Statement Return
  ntui_GetAttrByID{*ntui,"prefs_doctype_group",#TUIA_ENABLED,&enabled.l}
  If enabled = False Then Statement Return

  option.l = ntui_GetValueByID{*ntui, "prefs_doctype_basetype"}
  If option>=0
    baseTypeX.l = Option2BaseType(option)
  Else
    baseTypeX.l = #BASETYPE_UNDEFINED
  End If

  If Prefs_CloseDocsFromDocType{docTypeX} = False Then Statement Return

  If NOT(BaseType_IsAvailable{baseTypeX})
    error{"Unavailable Base Type!"}
    Statement Return
  End If

  DocType_Deinit{docTypeX}
  If NOT(BaseType_InitDocType{baseTypeX, docTypeX})
    error{"Unable to init Doc Type!"}
    Statement Return
  End If

  AIDE\DocType[docTypeX]\Name     = ntui_GetStringByID{*ntui,"prefs_doctype_name"}
  DocType_SetPattern{docTypeX, ntui_GetStringByID{*ntui,"prefs_doctype_pattern"}}
  AIDE\DocType[docTypeX]\DefIcon  = ntui_GetStringByID{*ntui,"prefs_doctype_deficon"}
  AIDE\DocType[docTypeX]\WorkPath = ntui_GetStringByID{*ntui,"prefs_doctype_workpath"}
  AIDE\DocType[docTypeX]\SDKPath  = ntui_GetStringByID{*ntui,"prefs_doctype_sdkpath"}
  AIDE\DocType[docTypeX]\Stack    = ntui_GetValueByID{*ntui, "prefs_doctype_stack"}
  AIDE\DocType[docTypeX]\OpenCmd  = ntui_GetStringByID{*ntui,"prefs_doctype_opencmd"}
  AIDE\DocType[docTypeX]\TestCmd  = ntui_GetStringByID{*ntui,"prefs_doctype_testcmd"}
  AIDE\DocType[docTypeX]\DebugCmd = ntui_GetStringByID{*ntui,"prefs_doctype_debugcmd"}
  AIDE\DocType[docTypeX]\ReleaseCmd = ntui_GetStringByID{*ntui,"prefs_doctype_releasecmd"}

End Statement


; write a doctype configuration to preference window
Statement Prefs_WriteDocTypeToGui{docTypeX.l}

  AIDE\CurrentDocTypeX = docTypeX
  Prefs_FillDocTypeList{}

  If NOT(DocType_IsAvailable{docTypeX})
    ntui_SetAttrByID{*ntui,"prefs_doctype_group",#TUIA_DISABLED,#TRUE}
    Statement Return
  End If

  ntui_SetAttrByID{*ntui,"prefs_doctype_group", #TUIA_ENABLED,#TRUE}
  ntui_SetValueByID {*ntui,"prefs_doctype_basetype", BaseType2Option(AIDE\DocType[docTypeX]\BaseTypeX)}
  ntui_SetStringByID{*ntui,"prefs_doctype_name",     AIDE\DocType[docTypeX]\Name}
  ntui_SetStringByID{*ntui,"prefs_doctype_pattern",  AIDE\DocType[docTypeX]\Pattern_}
  ntui_SetStringByID{*ntui,"prefs_doctype_deficon",  AIDE\DocType[docTypeX]\DefIcon}
  ntui_SetStringByID{*ntui,"prefs_doctype_workpath", AIDE\DocType[docTypeX]\WorkPath}
  ntui_SetStringByID{*ntui,"prefs_doctype_sdkpath",  AIDE\DocType[docTypeX]\SDKPath}
  ntui_SetValueByID {*ntui,"prefs_doctype_stack",    AIDE\DocType[docTypeX]\Stack}
  ntui_SetStringByID{*ntui,"prefs_doctype_opencmd",  AIDE\DocType[docTypeX]\OpenCmd}
  ntui_SetStringByID{*ntui,"prefs_doctype_testcmd",  AIDE\DocType[docTypeX]\TestCmd}
  ntui_SetStringByID{*ntui,"prefs_doctype_debugcmd", AIDE\DocType[docTypeX]\DebugCmd}
  ntui_SetStringByID{*ntui,"prefs_doctype_releasecmd", AIDE\DocType[docTypeX]\ReleaseCmd}

End Statement


Statement Prefs_RescueCurrentDocType{}

  If DocType_IsAvailable{AIDE\CurrentDocTypeX}
    Prefs_ReadDocTypeFromGui{AIDE\CurrentDocTypeX}
  End If

End Statement


; open a new doctype configuration in preferences window
Statement Prefs_AddDocType{templateX.l}
  docTypeX.l = 0
  While (docTypeX < #DOCTYPE_MAX AND AIDE\DocType[docTypeX]\IsAvailable = True)
    docTypeX + 1
  Wend
  If docTypeX >= #DOCTYPE_MAX Then Statement Return
  If AIDE\DocType[docTypeX]\IsAvailable Then Statement Return ; no more doctypes

  If DocType_IsAvailable{templateX}
    If NOT(BaseType_InitDocType{AIDE\DocType[templateX]\BaseTypeX, docTypeX}) Then Statement Return
    AIDE\DocType[docTypeX]\Name = AIDE\DocType[templateX]\Name + "(2)"
    AIDE\DocType[docTypeX]\DefIcon = AIDE\DocType[templateX]\DefIcon
    AIDE\DocType[docTypeX]\TestCmd = AIDE\DocType[templateX]\TestCmd
    AIDE\DocType[docTypeX]\DebugCmd = AIDE\DocType[templateX]\DebugCmd
    AIDE\DocType[docTypeX]\ReleaseCmd = AIDE\DocType[templateX]\ReleaseCmd
    AIDE\DocType[docTypeX]\Stack = AIDE\DocType[templateX]\Stack
    AIDE\DocType[docTypeX]\WorkPath = AIDE\DocType[templateX]\WorkPath
    AIDE\DocType[docTypeX]\SDKPath = AIDE\DocType[templateX]\SDKPath
    DocType_SetPattern{docTypeX, AIDE\DocType[templateX]\Pattern_}
  Else
    If NOT(BaseType_InitDocType{#BASETYPE_DEFAULT, docTypeX}) Then Statement Return
    AIDE\DocType[docTypeX]\Name = "unnamed"
  End If
  Prefs_WriteDocTypeToGui{docTypeX}

End Statement


Statement Prefs_RemDocType{docTypeX.l}

  If docTypeX = #DOCTYPE_DEFAULT
    error{"Default file type cannot be removed!"}
    Statement Return
  End If

  If Prefs_CloseDocsFromDocType{docTypeX} = False Then Statement Return

  DocType_Deinit{docTypeX}
  If (AIDE\CurrentDocTypeX = docTypeX)
    AIDE\CurrentDocTypeX = #DOCTYPE_UNDEFINED
  End If
  Prefs_FillDocTypeList{}

End Statement

; write preferences to icon
Statement Prefs_WriteToIcon{icon.s}

  dos_SetToolValue  {"GUILayout"             ,AIDE\Prefs\GUILayout            ,icon}
  dos_SetToolBool   {"CaseSensitiveSearch"   ,AIDE\Prefs\CaseSensitiveSearch  ,icon}
  dos_SetToolBool   {"EscapeSearch"          ,AIDE\Prefs\EscapeSearch         ,icon}
  dos_SetToolString {"PubScreenName"         ,AIDE\Prefs\PubScreenName        ,icon}
  dos_SetToolValue  {"NTUIBorderStyle"       ,AIDE\Prefs\NTUIBorderStyle      ,icon}
  dos_SetToolValue  {"NTUIFillStyle"         ,AIDE\Prefs\NTUIFillStyle        ,icon}

  dos_SetToolValue  {"Editor.BlinkSpeed"     ,AIDE\Prefs\EditorBlinkSpeed     ,icon}
  dos_SetToolValue  {"Editor.CursorStyle"    ,AIDE\Prefs\EditorCursorStyle    ,icon}
  dos_SetToolBool   {"Editor.ShowReturnCode" ,AIDE\Prefs\EditorShowReturnCode ,icon}
  dos_SetToolBool   {"Editor.ShowBrackets"   ,AIDE\Prefs\EditorShowBrackets   ,icon}
  dos_SetToolBool   {"Editor.AutoIndent"     ,AIDE\Prefs\EditorAutoIndent     ,icon}
  dos_SetToolBool   {"Editor.TrimWhiteSpaces",AIDE\Prefs\EditorTrimWhiteSpaces,icon}
  dos_SetToolBool   {"Editor.FreeCursor"     ,AIDE\Prefs\EditorFreeCursor     ,icon}
  dos_SetToolBool   {"Editor.SaveBeforeBuild",AIDE\Prefs\EditorSaveBeforeBuild,icon}
  dos_SetToolString {"Editor.FontName"       ,AIDE\Prefs\EditorFontName       ,icon}
  dos_SetToolValue  {"Editor.FontSize"       ,AIDE\Prefs\EditorFontSize       ,icon}

  dos_GetToolString {"AREXXPort"             ,AIDE\Prefs\AREXXPort            ,icon}
  dos_SetToolString {"AppIcon"               ,AIDE\Prefs\AppIcon              ,icon}
  dos_SetToolString {"FileListPath"          ,AIDE\Prefs\FileListPath         ,icon}
  dos_SetToolBool   {"OpenLastSource"        ,AIDE\Prefs\OpenLastSource       ,icon}
  dos_SetToolString {"DefIconFolder"         ,AIDE\Prefs\DefIconFolder        ,icon}
  dos_SetToolString {"DefIconAssign"         ,AIDE\Prefs\DefIconAssign        ,icon}
  dos_SetToolString {"DefIconDevice"         ,AIDE\Prefs\DefIconDevice        ,icon}
  dos_SetToolString {"LastMajorVersion"      ,"\\__VER_MAJOR"                 ,icon}
  dos_SetToolString {"LastMinorVersion"      ,"\\__VER_MINOR"                 ,icon}

  For docTypeX.l=0 To #DOCTYPE_MAX-1
    If DocType_IsAvailable{docTypeX}
      Prefs_WriteDocTypeToIcon{docTypeX, icon}
    Else
      Prefs_RemDocTypeFromIcon{docTypeX, icon}
    End If
  Next

  documents.s = ""
  For docX.l=0 To #DOCUMENT_MAX-1
    If AIDE\Document[docX]\IsUsed
      If documents><"" Then documents + "|"
      name.s = Document_GetFileName{docX}
      name = Replace$(name,"\","\"+"\")
      name = Replace$(name,"|","\|")
      name = Replace$(name,"@","\@")
      documents + Document_GetFileName{docX}
      lpos.l = Document_GetTopLine{docX}
      If lpos>0 Then documents + "@"+Str$(lpos)
    End If
  Next

  dos_SetToolString {"OpenDocuments", documents ,icon}
  docX.l = Document_FindActive{}
  dos_SetToolString{"ActiveDocument", Document_GetFileName{docX} ,icon}

  If AIDE\FavoriteT
    pft_Save{AIDE\FavoriteT,AIDE\FavoriteFileName}
  End If

End Statement


; reapply the preferences to the app state
Statement Prefs_Apply{}

  For docX.l=0 To #DOCUMENT_MAX-1
    If AIDE\Document[docX]\IsUsed
      Document_ConfigureEditor{docX}
    End If
  Next
  ntui_SetAttr{*ntui,#TUIEA_FILLSTYLE,AIDE\Prefs\NTUIFillStyle}
  ntui_SetAttr{*ntui,#TUIEA_BORDERSTYLE,AIDE\Prefs\NTUIBorderStyle}
  ntui_SetAttr{*ntui,#TUIEA_PUBSCREENNAME,&AIDE\Prefs\PubScreenName}

End Statement


; read prefs from icon
Statement Prefs_ReadFromIcon{icon.s}

  AIDE\Prefs\GUILayout             = dos_GetToolValue {"GUILayout"             ,1             ,icon}
  AIDE\Prefs\CaseSensitiveSearch   = dos_GetToolValue {"CaseSensitiveSearch"   ,False         ,icon}
  AIDE\Prefs\EscapeSearch          = dos_GetToolValue {"EscapeSearch"          ,False         ,icon}
  AIDE\Prefs\NTUIBorderStyle       = dos_GetToolValue {"NTUIBorderStyle"       ,0             ,icon}
  AIDE\Prefs\NTUIFillStyle         = dos_GetToolValue {"NTUIFillStyle"         ,0             ,icon}

  AIDE\Prefs\EditorCursorStyle     = dos_GetToolValue {"Editor.CursorStyle"    ,#TUITBCS_LINE ,icon}
  AIDE\Prefs\EditorShowReturnCode  = dos_GetToolValue {"Editor.ShowReturnCode" ,False         ,icon}
  AIDE\Prefs\EditorShowBrackets    = dos_GetToolValue {"Editor.ShowBrackets"   ,True          ,icon}
  AIDE\Prefs\EditorBlinkSpeed      = dos_GetToolValue {"Editor.BlinkSpeed"     ,3             ,icon}
  AIDE\Prefs\EditorAutoIndent      = dos_GetToolValue {"Editor.AutoIndent"     ,True          ,icon}
  AIDE\Prefs\EditorTrimWhiteSpaces = dos_GetToolValue {"Editor.TrimWhiteSpaces",True          ,icon}
  AIDE\Prefs\EditorSaveBeforeBuild = dos_GetToolValue {"Editor.SaveBeforeBuild",True          ,icon}
  AIDE\Prefs\EditorFreeCursor      = dos_GetToolValue {"Editor.FreeCursor"     ,False         ,icon}
  AIDE\Prefs\EditorFontName        = dos_GetToolString{"Editor.FontName"       ,""            ,icon}
  AIDE\Prefs\EditorFontSize        = dos_GetToolValue {"Editor.FontSize"       ,-1            ,icon}

  AIDE\Prefs\PubScreenName         = dos_GetToolString{"PubScreenName"         ,"Workbench"   ,icon}
  AIDE\Prefs\AREXXPort             = dos_GetToolString{"AREXXPort"             ,"AIDE_AREXX"  ,icon}
  AIDE\Prefs\OpenLastSource        = dos_GetToolValue {"OpenLastSource"        ,True          ,icon}
  AIDE\Prefs\AppIcon               = dos_GetToolString{"AppIcon"               ,icon          ,icon}
  AIDE\Prefs\FileListPath          = dos_GetToolString{"FileListPath"          ,""            ,icon}
  AIDE\Prefs\OpenDocs              = dos_GetToolString{"OpenDocuments"         ,""            ,icon}
  AIDE\Prefs\ActiveDocument        = dos_GetToolString{"ActiveDocument"        ,""            ,icon}

  ;/* check if the version has changed to last start... */
  AIDE\LastMajorVersion          = dos_GetToolValue  {"LastMajorVersion"   ,0             ,icon}
  AIDE\LastMinorVersion          = dos_GetToolValue  {"LastMinorVersion"   ,0             ,icon}
  If AIDE\LastMajorVersion><Vallong("\\__VER_MAJOR") OR AIDE\LastMinorVersion><Vallong("\\__VER_MINOR")
    AIDE\RefreshAll = True
    dos_Delete{AIDE\FavoriteFileName}
  Else
    AIDE\RefreshAll = False
  EndIf

  AIDE\Prefs\DefIconFolder       = dos_GetToolString {"DefIconFolder"      ,"folder"      ,icon}
  AIDE\Prefs\DefIconAssign       = dos_GetToolString {"DefIconAssign"      ,"assign"      ,icon}
  AIDE\Prefs\DefIconDevice       = dos_GetToolString {"DefIconDevice"      ,"device"      ,icon}

  ;Prefs_InitDocTypeDefault{#DOCTYPE_DEFAULT}

  StartUp_Message{"load favorites..."}
  If dos_Exist{AIDE\FavoriteFileName} Then AIDE\FavoriteT = pft_Load{AIDE\FavoriteFileName}
  If AIDE\FavoriteT=Null Then AIDE\FavoriteT = pft_Create{}

  StartUp_Message{"initialize file types..."}
  tempbuffer.s = LSet$(" ",1024)
  For docTypeX.l=0 To #DOCTYPE_MAX-1
    Prefs_ReadDocTypeFromIcon{docTypeX, icon}
    If DocType_IsAvailable{docTypeX}
      If AIDE\RefreshAll
        DocType_ScanSDK{docTypeX}
      End If
    End If
  Next
  AIDE\RefreshAll = False

End Statement

; open prefs window
Statement Prefs_OpenGui{}

  If ntui_ShowWindowByID{*ntui,!win_preferences}=False
    *win.tuiWindow = ntui_GetWindow{ntui_BuildFromXMLFile{*ntui,dos_AddPart{AIDE\GuiPath,!file_win_preferences}}}
    If *win
      ; Editor
      ntui_SetValueByID{*win,"prefs_linecursor"      ,(AIDE\Prefs\EditorCursorStyle = #TUITBCS_LINE)}
      ntui_SetValueByID{*win,"prefs_boldlinecursor"  ,(AIDE\Prefs\EditorCursorStyle = #TUITBCS_BOLDLINE)}
      ntui_SetValueByID{*win,"prefs_blockcursor"     ,(AIDE\Prefs\EditorCursorStyle = #TUITBCS_BLOCK)}
      ntui_SetValueByID{*win,"prefs_underscorecursor",(AIDE\Prefs\EditorCursorStyle = #TUITBCS_UNDERSCORE)}
      ntui_SetValueByID{*win,"prefs_blinkspeed"      , AIDE\Prefs\EditorBlinkSpeed}
      ntui_SetValueByID{*win,"prefs_showreturncode"  , AIDE\Prefs\EditorShowReturnCode}
      ntui_SetValueByID{*win,"prefs_showbrackets"    , AIDE\Prefs\EditorShowBrackets}
      ntui_SetValueByID{*win,"prefs_autoindent"      , AIDE\Prefs\EditorAutoIndent}
      ntui_SetValueByID{*win,"prefs_freecursor"      , AIDE\Prefs\EditorFreeCursor}
      ntui_SetValueByID{*win,"prefs_savebeforebuild" , AIDE\Prefs\EditorSaveBeforeBuild}
      ntui_SetValueByID{*win,"prefs_trimwhitespaces" , AIDE\Prefs\EditorTrimWhiteSpaces}
      Prefs_SetFont{AIDE\Prefs\EditorFontName, AIDE\Prefs\EditorFontSize}

      ; NTUI
      ntui_SetValueByID{*win,"prefs_fillstyle",         AIDE\Prefs\NTUIFillStyle}
      ntui_SetValueByID{*win,"prefs_borderstyle",       AIDE\Prefs\NTUIBorderStyle}
      If AIDE\Prefs\PubScreenName = "Workbench" Then scrmode.l = 0 : Else scrmode = 1
      ntui_SetValueByID{*win,"prefs_screenmode",        scrmode}

      ; DocTypes
      options.s = ""
      option.l  = 0
      For baseTypeX.l=0 To #BASETYPE_MAX-1
        BaseType2Option(baseTypeX) = -1
        If BaseType_IsAvailable{baseTypeX}
          If option > 0 Then options + "|"
          options.s + BaseType_GetName{baseTypeX}
          Option2BaseType(option) = baseTypeX
          BaseType2Option(baseTypeX) = option
          option+1
        End If
      Next
      ntui_SetAttrByID{*win,"prefs_doctype_basetype", #TUICYA_OPTIONS, &options}

      Prefs_FillDocTypeList{}

    End If
    AIDE\CurrentDocTypeX = #DOCTYPE_UNDEFINED
    Prefs_WriteDocTypeToGui{#DOCTYPE_UNDEFINED}
    If ntui_ShowWindowByID{*ntui,!win_preferences}=False Then error{"\\__THIS_FUNCTION: Unable to open Preferences Window!"}
  End If

End Statement


; read preferences from window
Statement Prefs_ReadFromGui{}

  *win.tuiWindow = ntui_GetWindowByID{*ntui,!win_preferences}
  If *win=Null Then Statement Return

  ; Editor
  If ntui_GetValueByID{*win,"prefs_linecursor"}       Then AIDE\Prefs\EditorCursorStyle = #TUITBCS_LINE
  If ntui_GetValueByID{*win,"prefs_boldlinecursor"}   Then AIDE\Prefs\EditorCursorStyle = #TUITBCS_BOLDLINE
  If ntui_GetValueByID{*win,"prefs_blockcursor"}      Then AIDE\Prefs\EditorCursorStyle = #TUITBCS_BLOCK
  If ntui_GetValueByID{*win,"prefs_underscorecursor"} Then AIDE\Prefs\EditorCursorStyle = #TUITBCS_UNDERSCORE
  AIDE\Prefs\EditorBlinkSpeed      = ntui_GetValueByID{*win,"prefs_blinkspeed"}
  AIDE\Prefs\EditorShowReturnCode  = ntui_GetValueByID{*win,"prefs_showreturncode"}
  AIDE\Prefs\EditorShowBrackets    = ntui_GetValueByID{*win,"prefs_showbrackets"}
  AIDE\Prefs\EditorAutoIndent      = ntui_GetValueByID{*win,"prefs_autoindent"}
  AIDE\Prefs\EditorSaveBeforeBuild = ntui_GetValueByID{*win,"prefs_savebeforebuild"}
  AIDE\Prefs\EditorTrimWhiteSpaces = ntui_GetValueByID{*win,"prefs_trimwhitespaces"}
  AIDE\Prefs\EditorFreeCursor      = ntui_GetValueByID{*win,"prefs_freecursor"}
  AIDE\Prefs\EditorFontName        = Prefs_GetFontName{AIDE\Prefs\EditorFontName}
  AIDE\Prefs\EditorFontSize        = Prefs_GetFontSize{AIDE\Prefs\EditorFontSize}

  ; NTUI
  If ntui_GetValueByID{*win,"prefs_screenmode"}=0 Then AIDE\Prefs\PubScreenName = "Workbench" : Else AIDE\Prefs\PubScreenName = "AIDE"
  AIDE\Prefs\NTUIBorderStyle = ntui_GetValueByID{*win,"prefs_borderstyle"}
  AIDE\Prefs\NTUIFillStyle   = ntui_GetValueByID{*win,"prefs_fillstyle"}


  Prefs_RescueCurrentDocType{}

  Prefs_Apply{}

  ntui_GetAttr{*ntui,#TUIA_DIRTY,&dirty.l}
  If dirty
    ntui_Iconify{*ntui}
    ntui_SetAttr{*ntui,#TUIA_DIRTY,False}

    If AIDE\Prefs\PubScreenName="AIDE"
      ntui_SetAttrByID{*ntui,!win_main,#TUIWA_BORDERLESS,1}
    Else
      ntui_SetAttrByID{*ntui,!win_main,#TUIWA_BORDERLESS,0}
    End If

    ntui_PopUp{*ntui}
    AIDE_AutoLayout{}
  End If

End Statement


; prefs event handler
Prefs_HandleNotify:
Function.l Prefs_HandleNotify{*notify.tuiNotify}

  Select ntui_GetNotifyID{*notify}
    Case "prefs_cancel"
      ntui_HideWindowByID{*ntui,!win_preferences}

    Case "prefs_apply"
      ntui_HideWindowByID{*ntui,!win_preferences}
      Prefs_ReadFromGui{}

    Case "prefs_opengui"
      ntui_FreeWindowByID{*ntui,!win_preferences} ; DEBUG: to reopen the window everytime fresh!
      Prefs_OpenGui{}

    Case "prefs_aide_wbinfo"
      arg.s = "\\22"+AIDE\Icon+"\\22 pubscreen "+AIDE\Prefs\PubScreenName
      dos_RunCli{"wbinfo",0,-1,False,arg}

    Case "prefs_doctype_new"
      Prefs_RescueCurrentDocType{}
      Prefs_AddDocType{#DOCTYPE_UNDEFINED}

    Case "prefs_doctype_remove"
      Prefs_RemDocType{AIDE\CurrentDocTypeX}

    Case "prefs_doctype_resetdefaults"
      option.l = ntui_GetValueByID{*ntui, "prefs_doctype_basetype"}
      If option>=0
        baseTypeX.l = Option2BaseType(option)
      Else
        baseTypeX.l = #BASETYPE_UNDEFINED
      End If
      docTypeX.l = AIDE\CurrentDocTypeX
      If Prefs_CloseDocsFromDocType{docTypeX}
        If BaseType_IsAvailable{baseTypeX}
          BaseType_InitDocType{baseTypeX, docTypeX}
          Prefs_WriteDocTypeToGui{docTypeX}
        End If
      End If

    Case "prefs_doctype_clone"
      Prefs_RescueCurrentDocType{}
      Prefs_AddDocType{AIDE\CurrentDocTypeX}

    Case "prefs_doctype_refresh_sdk_dep"
      *lv.tuiListView = (.tuiListView)ntui_GetObjectByID{*ntui,"prefs_doctype_list"}
      If *lv
        i.l = ntui_GetFirstSelectedListItem{*lv}
        If i >= 0
          docTypeX.l = ntui_GetListItemUserData{*lv,i}
          If docTypeX>=0
            If (AIDE\DocType[docTypeX]\ScanSDK)
              !_CallFuncPointer{AIDE\DocType[docTypeX]\ScanSDK, res.l}
            End If
          End If
        End If
      End If

    Case "prefs_doctype_list"
      Prefs_RescueCurrentDocType{}
      *lv.tuiListView = (.tuiListView)ntui_GetObjectByID{*ntui,"prefs_doctype_list"}
      If *lv
        i.l = ntui_GetFirstSelectedListItem{*lv}
        If i >= 0
          docTypeX.l = ntui_GetListItemUserData{*lv,i}
        Else
          docTypeX.l = #DOCTYPE_UNDEFINED
        End If
        Prefs_WriteDocTypeToGui{docTypeX}
      End If

    Case "prefs_deficon_req"
      filename.s = ntui_GetStringByID{*ntui,"prefs_doctype_deficon"}
      path.s     = dos_PathPart{filename}
      file_.s    = dos_FilePart{filename}
      pattern.s  = "#?"
      ntui_SetAttrByID{*ntui,"req_deficon_select",#TUIRA_PATH,&path}
      ntui_SetAttrByID{*ntui,"req_deficon_select",#TUIRA_FILE,&file_}
      ntui_SetAttrByID{*ntui,"req_deficon_select",#TUIRA_PATTERN,&pattern}
      ntui_ShowRequesterByID{*ntui,"req_deficon_select"}

    Case "prefs_deficon_select"
      filename.s = ntui_GetNotifyString{*notify}
      ntui_SetStringByID{*ntui,"prefs_doctype_deficon", filename}

    Case "prefs_workpath_req"
      filename.s = ntui_GetStringByID{*ntui,"prefs_doctype_workpath"}
      path.s     = dos_PathPart{filename}
      file_.s    = dos_FilePart{filename}
      pattern.s  = "#?"
      ntui_SetAttrByID{*ntui,"req_workpath_select",#TUIRA_PATH,&path}
      ntui_SetAttrByID{*ntui,"req_workpath_select",#TUIRA_FILE,&file_}
      ntui_SetAttrByID{*ntui,"req_workpath_select",#TUIRA_PATTERN,&pattern}
      ntui_ShowRequesterByID{*ntui,"req_workpath_select"}

    Case "prefs_workpath_select"
      filename.s = ntui_GetNotifyString{*notify}
      ntui_SetStringByID{*ntui,"prefs_doctype_workpath", filename}

    Case "prefs_sdkpath_req"
      filename.s = ntui_GetStringByID{*ntui,"prefs_doctype_sdkpath"}
      path.s     = dos_PathPart{filename}
      file_.s    = dos_FilePart{filename}
      pattern.s  = "#?"
      ntui_SetAttrByID{*ntui,"req_sdkpath_select",#TUIRA_PATH,&path}
      ntui_SetAttrByID{*ntui,"req_sdkpath_select",#TUIRA_FILE,&file_}
      ntui_SetAttrByID{*ntui,"req_sdkpath_select",#TUIRA_PATTERN,&pattern}
      ntui_ShowRequesterByID{*ntui,"req_sdkpath_select"}

    Case "prefs_sdkpath_select"
      filename.s = ntui_GetNotifyString{*notify}
      ntui_SetStringByID{*ntui,"prefs_doctype_sdkpath", filename}

    Case "prefs_font_req"
      fontname.s = Prefs_GetFontName{AIDE\Prefs\EditorFontName}
      fontsize.l = Prefs_GetFontSize{AIDE\Prefs\EditorFontSize}
      ntui_SetAttrByID{*ntui,"req_font_select",#TUIRA_FONTNAME,&fontname}
      ntui_SetAttrByID{*ntui,"req_font_select",#TUIRA_FONTSIZE,fontsize}
      ntui_ShowRequesterByID{*ntui,"req_font_select"}

    Case "prefs_font_select"
      ntui_GetAttrByID{*ntui,"req_font_select",#TUIRA_FONTSIZE,&fontsize.l}
      ntui_GetAttrByID{*ntui,"req_font_select",#TUIRA_FONTNAME,&*fontnameP.b}
      If *fontnameP
        Prefs_SetFont{Peek.s(*fontnameP), fontsize}
      End If

    Default
      Function Return False ;  not interested

  End Select
  Function Return True

End Function

!_MakeGlobalFuncPointer{Prefs_HandleNotify,{Null}}

InstallNotifyHandler{"Prefs", *Prefs_HandleNotify}

