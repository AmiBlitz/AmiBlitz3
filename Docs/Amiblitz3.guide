@DATABASE AmiBlitz3.guide
@INDEX main
@REMARK $VER: amiblitz3.guide 1.04 (18.12.2007)
@WORDWRAP

@NODE main "AmiBlitz3 Guide"


 Welcome to @{b}AmiBlitz3@{ub} - an upgraded Basic-IDE of the original BlitzBasic II

 This archive contains the latest stable release of AmiBlitz3 (v3.00).


    Legal information

      @{" Amiforce-Distribution (important!) " link "amiforce"}
      @{" License (Important!) " link "license"}



    General information about this package

      @{" Why AmiBlitz3 ? " link "about"}
      @{" What do I have here ? " link "whassit"}
      @{" What are the differences to AmiBlitz2 ?" link "differences"}
      @{" Requirements " link "require"}
      @{" Installation " link "install"}



    Information about working with the programming environment

      @{" Usage " link "usage"}
      @{" native libs overview " link Blitzlibs.guide/main}
      @{" FAQ (by Bernd) " link "faq"}


    Introduction of the BASIC-dialect

      @{" programmers guide to blitz" link Blitz_programmers.guide/main}



    Some history, present and future informations

      @{" Changelog " link Changelog.guide/Main}
      @{" Known bugs " link "bugs"}
      @{" Authors " link "authors"}

@ENDNODE


@NODE about "About"

Why AmiBlitz3 ?

As Blitzbasic II became open source (Acidsoft left Amiga scene and disclaimed all rights
on its product, except the name: Blitzbasic was reincarnated on PC-platform and must not
be used at the Amiga-platform anymore), Bernd Roesch started to modernize BB2 and released
his work as AmiBlitz2. He did many improvements to the compiler and the editor PED.

By the way: The "source" that was available from good old BlitzBasicII was just a
disassembled machine code, therefore changes are hard to realize.

In 2006 Sven Dröge took a quick look on the source and started to modernize the GUI and
convert wide parts of the asm-code into AB-code.
He redesigned the configuration system, the file structure of the IDE-package and
added some features to PED like a new help system.

Thilo Koehler wrote a powerful compilation of include files that covers a wide area of
application, as mp3-playback, internet-connectivity, blitting and drawing functions, etc.
These includes were recently updated and a complete documentation was added.

All these changes that were done to the latest AmiBlitz3 version (v2.45) let to a new
release that is called AmiBlitz3.
@ENDNODE about

@NODE differences "Differences between AmiBlitz2 and AmiBlitz3"
@{b}Most important differences between AmiBlitz2 and AmiBlitz3@{ub}

    - redesigned GUI of PED

    - redesigned help system
      + online help to all available functions via amigaguide or autodoc files
      + Instruction Browser with auto-completion capability

    - rewritten configuration system
      + a modern configuration dialog with access to all configuration options
      + all settings are stored as Tooltypes in AmiBlitz3.info

    - cleaned up file structure of the whole IDE-package
      + obsolete files are removed
      + system files are grouped in one drawer

    - updated includes of Thilo Koehler (tkincludes) with many new features

    - updated and rewritten documentation for all ab2-native functions and
      the powerful tkincludes

    - Assigns "Blitz2:" and "Blitzlibs:" are not needed anymore

@ENDNODE differences


@NODE "amiforce" "important note to the Amiforce-Distribution"

                              @{b}Important note:@{ub}

This guide was released as component with the AmiBlitz3 distribution from Amiforce.

The Amiforce-Distribution may be offered only on Amiforce. 
On other websites this archive may not offered without permission of the autor. 
Hotlinks from other Websites to this archive are forbidden.
The parts of this distribution from Amiforce (e.g. translations) do not used 
without permission in other distributions.

The sharing over other ways (e.g. Amiga magazines) is expressly desired.
This applies also for the sharing from user to user.
The only condition is, the archiv must remain unchanged.

Have you any questions about this distribution or other from Amiforce released materials? 
Set with me in connection at the following adresses.


@{b}Home: http://www.amiforce.de@{ub}
@{b}Mail: webmaster\@amiforce.de@{ub}

@ENDNODE


@NODE "license" "Program Licenses"

The "AmiBlitz3" and "PED" programs are relased under the @{" GNU General Public License " link "gpl"}.

    AmiBlitz3 and PED are free software; you can redistribute them and/or modify
    them under the terms of the @{"GNU General Public License" link "gpl"} as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your own option) any later version.

    These programs are distributed in the hope that they will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    @{"GNU General Public License" link "gpl"} for more details.

    You should have received a copy of the @{"GNU General Public License" link "gpl"}
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

The libraries and additional tools are released under their own original or updated licenses.

No-one is claiming any intellectual or any other copyright over software developed
in AmiBlitz3. You are free to release anything you create in AmiBlitz3 under any
license you wish (at the time of writing there are no GPL licensed libraries).

@ENDNODE


@NODE whassit "What does it contain ?"

 This archive contains all you need to start developping software with AmiBlitz3.

 In detail the archive contains the following:
    - AmiBlitz3 (the compiler) v3.00    @{fg fill}(stored in main drawer)@{fg text}
    - PED (the program editor) v3.00    @{fg fill}(stored in system drawer)@{fg text}
    - REDDebugger v2.65                 @{fg fill}(stored in debug drawer)@{fg text}
    - Latest acidlibs file              @{fg fill}(stored in blitzlibs drawer)@{fg text}
    - Latest Deflibs file               @{fg fill}(stored in blitzlibs drawer)@{fg text}
    - Most recent Resident files        @{fg fill}(stored in residents drawer)@{fg text}
    - Newest tkincludes                 @{fg fill}(stored in includes drawer)@{fg text}
      (Thilo Koehlers powerful includes)

    - Documentation                     @{fg fill}(stored in docs drawer)@{fg text}
      + complete and updated documentation for amiblitz-native libs
      + complete and updated documentation of tkincludes

@ENDNODE


@NODE require "Requirements"

 Hardware requirements for AmiBlitz3 are as follows:
    - an Amiga (real, emulated, etc)
    - about 12Mb hard drive space (for this full distribution)
    - an FPU, if you want any optimizations

 Software requirements @{fg fill}(included)@{fg text}:
    - wizard.library
    - disassembler.library (only needed when you use the disassembly window in the debugger)
    - ted.library

 additional Requirements for some includes @{fg fill}(included)@{fg text}:
    - lh.library    (68k, by Holger P. Krekel and Olaf Barthel)
    - zlib.library  (68k, port by Achim Stegemann, email: achim.stegemann@onlinehome.de)
    - jpeg.library  (68k/PPC mixed binary, port by Paul Huxham, email: PaulHuxham@yahoo.com)


@ENDNODE


@NODE install "Installation, languages and uninstallation"

 Installation is very simple. Using the Workbench, drag the whole AmiBlitz3
 main directory to wherever you want to store it on your hard drive.
 You are now ready to use AmiBlitz3.

 AmiBlitz3 does not need special assigns for itself.
 On Startup, AmiBlitz3 generates its assign dynamically and on exit, the assign
 will be removed automatically.

 It also adds a path the the LIBS:-assign, so that you even do not need to
 install any of the includes libraries, as the system searches in the local
 libs-drawer, too.

 You may change the assign via Tooltype.

 The online-help system uses autodocs for help on OS-library functions. If you have
 installed a NDK, you should set the appropriate drawer to the autodocs in PEDs
 configuration dialogue.

@ENDNODE


@NODE usage "Usage"

 This section describes the main differences between the AmiBlitz3 compiler
and the original Blitz Basic 2 compiler (in order of likely appearance).

  Configuration of AmiBlitz3
  There is a new powerful Settings Dialogue in PED that gives access to all
  configuration options that are available for the IDE. All settings are
  stored in @{" Tooltypes " link tooltypes} stored in AmiBlitz3.info.

  Editing the Source:
  @{" Joining lines " link joining}
  @{" Keyboard/mouse controls " link inputs}
  @{" Non tokenising mode " link nontoke}
  @{" Real clipboard support " link clipboard}

  Useful Windows:
  @{" Source Browser" link labels}
  @{" Instruction Browser " link inputs 14}

  Compiler related:
  @{" AB2 source file format " link absource}
  @{" Compiler errors " link comperr}
  @{" New compiler menu items " link compmenu}
  @{" New executable formats " link exeformat}

  Compiler Directives:
  @{" Syntax handling " link syntax}
  @{" Code optimizations " link optimise}
  @{" USELASTPATH command " link uselastpath}


  @{" Source code changes " link codechange}
  @{" Variable parameters to statements/functions " link varargs}
  @{" Number of parameters to statements/functions increased" link moreargs}
  @{" Resize of arrays without losing data " link dimkeep}
  @{" Pointers to strings enhanced " link strptr}
  @{" Truely dynamic linked lists " link linklist}
  @{" Changes to program exit " link enddo}
  @{" WriteType and ReadType commands " link readwritetype}
  @{" Object...End Object commands " link object}
  @{" Maximum number of objects increased " link maxobject}
  @{" String passing as pointers fixed " link stringpass}
  @{" New 'library' macros " link macros}
  @{" New macros for library authors " link libmacros}
  @{" Resident clashes shown " link resclash}
  @{" RegLoad command " link regload}
  @{" Casting strings to longs " link caststring}
  @{" Character string escape sequences " link charseq}
  @{" New AB2 Object format  " link "objectuse"}
  @{" Macros  " link "macros"}



@ENDNODE


@NODE labels "Source Browser"

 The @{b}Source Browser@{ub} is a window, that gives several informations about the
 actual source.

 Actually, it has to registers:

 @{b}@{u}Source@{ub}@{uu}
 The main object of this register is the label listview This will show
 labels in source which start with the "." character. AmiBlitz3 also displays functions
 and statements here, and can also show comments and case statements. The list
 is limited to displaying 1000 items, for speed reasons. You can click with the
 left mouse button on an item in the list and the editor window will jump to
 the line with that item. You can hold down the left mouse button and drag the
 pointer over the list to scroll it, or use the prop-gadget on the right side
 of the window.

 The string gadget at the top of the window allows you to shorten the display
 to specific items (only the items which start with the text in the string gadget
 will be displayed).

 The @{b}Reset@{ub} gadget will clear the string gadget.

 The @{b}Case@{ub} gadget makes the list show only the Case statements.

 The @{b};@{ub} gadget displays all comments.

 The @{b}All@{ub} gadget displays all labels, functions/statements, comments
 and Case statements - the string gadget is usable when "All" is enabled.


 @{b}@{u}Libs@{ub}@{uu}
 This register contains a hierarchical listview, which shows all libs and their
 functions, that are being used in the actual source.
 Clicking on a function name will jump to the position in source.

@ENDNODE


@NODE dialogparameter "Dialog parameter window"

 If you press Ctrl+Help over an instruction a window will open which shows
you all the parameters for the instruction and allows you to enter values
for each one.

 If the dialog parameter window is already open you can simply click on
another instruction to have its parameters shown.

 The "Add Code" button will add the command and parameters, or modify the
existing command and parameters, to the current source position.

@ENDNODE


@NODE tooltypes "AmiBlitz tooltypes"

 There are also some @{b}tooltypes@{ub} which you can add to the AmiBlitz3 icon.


  @{b}OLDSEARCH@{ub} - When the search window is used, the cursor does not
                       jump to the start of the line. This tooltype should
                       be enabled or disabled, and has no parameters.

  @{b}BACKDROP@{ub} - This tooltype when enabled will make the editor window
                      into a backdrop window. This is useful if it overlaps
                      other windows on the AmiBlitz screen and you have no
                      "Window-to-back" hotkey (since there is no window
                      depth gadget on the editor window). This tooltype
                      is enabled by default, and has no parameters.

  @{b}DONTSORT@{ub} - When enabled, this tooltype tells the label window
                      to not sort the labels in the list into alphabetical
                      order. This tooltype is a switch and so has no parameters.

  @{b}LIBFILE@{ub} - You can use this tooltype to tell AmiBlitz3 what file
                     to use as a "deflibs" file. The format is
                     LIBFILE=<filename>. The default, or if the tooltype
                     is not specified, is "deflibs".

  @{b}STANDARDEDITMODE@{ub} - Makes the editor work like any normal text editor.
                              Pressing return will split a line instead of starting a
                              new one, backspace will join lines and pressing "Del"
                              with a marked block will delete the block.
                              This tooltype is a switch and has no parameters.

  @{b}STARTDIR@{ub} - Tells AmiBlitz what directory to use as the current directory
                      after starting. This tooltype is a string and has the format
                      STARTDIR=<directory path>

  @{b}NO_AUTO_TOKENIZE@{ub} - Forces AmiBlitz to not try to automatically decide
                              whether to tokenise a file or not, and will always
                              work in the regular AmiBlitz manner (files are always
                              tokenised).
                              This tooltype is a switch and has no parameters.

  @{b}NEWCOLORMODE@{ub} - Allows the editor to work in 8 or 16 colour
                          screenmodes. Without this tooltype set, you can only
                          use palette number 0 to 3 for the following
                          tooltypes (anything higher and it will wrap back to 0).

                          When this tooltype is set, it also makes the block
                          highlight colour the last entry in the palette.

                          This tooltype is a switch and has no parameters.

  @{b}RemarkForg@{ub} - The colour number to use for the foreground colour
                        of comments. The format of this tooltype is
                        RemarkForg=<Palette colour number>.

  @{b}RemarkBackg@{ub} - The colour number for the background colour of
                         comments. The format of this tooltype is
                         RemarkForg=<Palette colour number>.

  @{b}FunctionColor@{ub} - The colour number to use for function/statement names.
                           The format of this tooltype is
                           FunctionColor=<palette colour number>
                           This colour will be used in your code when you type a
                           function/statement name followed by a { bracket, e.g.
                           "foo{}" will have the "foo" shown in the specified colour.

  @{b}MacroColor@{ub} - The colour number to use for macro names. The format of this tooltype is
                        MacroColor=<palette colour number>
                        This colour will be used in your code when you call a macro, e.g.
                        "!iamamacro" will be shown in the specified colour.

  @{b}ConstantColor@{ub} - The colour number to use for constants. The format of this tooltype is
                           ConstantColor=<palette colour number>
                           This colour will be used in your code when you type any constant, e.g.
                           "#MYWINDOW" will be shown in the specified colour.

  @{b}StringColor@{ub} - The colour number to use for strings, including quotation marks.
                         The format of this tooltype is
                         StringColor=<palette colour number>
                         This colour will be used in your code when you type, e.g.
                         `"hello, world"' will be shown in the specified colour
                         (including quote marks).

  @{b}NewtypeColor@{ub} - The colour number to use for fields inside newtypes.
                          The format of this tooltype is
                          NewtypeColor=<palette colour number>
                          This colour will be used in your code when you use a
                          field from inside a newtype, e.g. "hi.there\dr_nick"
                          will have the "\dr_nick" part shown in the specified colour.

  @{b}ClassicColor@{ub} - The colour number to use for instructions from libraries
                          which use the classic Amiga chipset directly. The format
                          of this tooltype is
                          ClassicColor=<palette colour number>
                          A value of 99 will also disable the classic commands
                          in the "Instruction Browser".

 The actual colours used by the new tooltypes can be changed in the Prefs
item in the Project menu. Note the USA style of spelling "Color" in the tooltype
names!

@ENDNODE


@NODE compmenu "Compiler Menu additions"

 There are two new items in the "Compiler" menu. The first is "Save and
Compile/Run" which will save your code and then Compile & Run your program.

 The second is "Save and Create executable" which will save your source
code and then create an executable program.

 Both these options will save you 1 keypress but are useful if you are
developing a buggy program and forget to save your source a lot.

@ENDNODE


@NODE joining "Joining lines of code"

 A new feature is you can now join lines together, which is useful if you
reach the limit of the line length (which is 250 since AB2.26, 128 characters
before this and in the original Blitz2). To do this, simply put @@ in your
code and AmiBlitz will continue from the next line as if they were the same line.

 Have a look at the included examples.

 This feature requires you use optimise with at least a value of 4.

@ENDNODE


@NODE exeformat "Executable format"

 AmiBlitz can now create different styles of executable. The first, most
obvious change is that it can create PPC executables, when you use PPC
assembly language in your programs. The executable format is a WarpOS
fat binary, which will run under WarpOS and also MorphOS using the WarpOS
emulation. Note that a lot of the current libraries are still 68k, and so
is the code generated by AmiBlitz! If you want to create PPC executables,
you need to write the PPC assembly language code yourself.

 The second addition is that AmiBlitz can create chip or BSS sections in
ypour executable (only one!). This can be useful if you need to put
specific parts of your executable into e.g. chipmem for a picture which
you can then display without decoding from fastram->chipmem.

 AmiBlitz3 defaults to the CODE section. You can type either "chip" or
"bss" in your code to change to another section, which will remain the
current section until the other type of section is typed in your code
(either "bss" or "chip") or the end of the code. Do NOT use the same
section type twice (i.e. do not use "chip" twice)!

 The final change is that it is now possible to create libraries (and
other shared objects) from AmiBlitz. This is shown in the ppceq2.bb2
and SharedLibrary examples.

@ENDNODE


@NODE inputs "New inputs"

  @{fg shine}@{b}!!! Important Shortcuts based on english Keymap so may not all work !!!@{ub}@{fg text}

 The keyboard shortcuts in AmiBlitz are as follows:

  <TAB>                         in all browser windows make sourcewindow active
  <ESC>                         closes any active helpwindow

  <ALT> + <CURSOR UP>           move history up
  <ALT> + <CURSOR DOWN>         move history down

  <ALT> + <CURSOR RIGHT>        Jump to label/func
  <ALT> + <CURSOR LEFT>         Back from Label/func
  <ALT> + Left Mousebutton      Jump to label/func
  <ALT> + Middle Mousebutton    Back from Label/func

  <ALT> + click on a filename   save and compile and run (see above)
  <CTRL> + click on filename    save and create exe(save both if you click on diffrent)

  <CTRL> + <E>                  insert 'end if '
  <CTRL> + <F>                  insert a 'Function' skeleton
  <CTRL> + <N>                  insert a 'NewType' skeleton
  <CTRL> + <S>                  insert a 'Statement' skeleton

  <CTRL> + <X>                  CUT same as <AMIGA> + <X>
  <CTRL> + <C>                  COPY vertical, all select lines only copyed at the select column
  <CTRL> + <V>                  PASTE vertical, all lines pasted at the cursor culumn

  <CTRL> + <I>                  Switch Intellisens for Commands 'on/off' if Intellisens is enabled

  <CTRL> + <U>                  undo current line

  <CTRL> + <CURSOR RIGHT>       TAB marked block
  <CTRL> + <CURSOR LEFT>        un-TAB marked block

  <CTRL> + <CURSOR UP>          Jump to first line
  <CTRL> + <CURSOR DOWN>        Jump to last line

  @{"<HELP> + <SHIFT>" link "SHIFT+HELP"}              opens guide/autodoc of instruction under cursor
  @{"<HELP> + <CTRL>" link "CTRL+HELP"}               opens parameter diagnostic for actual function
  @{"<HELP> on any function" link "HELP+Text"}        displays correct syntax in screens titlebar
  @{"<HELP> on '\'" link "HELP+NEWTYPE"}                 opens window 'type browser' and shows newtype information
  <HELP> on 'EndIf'             shows corresponding IF-Blockheader

  <L-AMIGA> + <A>               Jump to position in source code where text was last added
  <L-AMIGA> + <1>-<3>           Jump to previously stored bookmark
  <L-AMIGA> + <SHIFT> + <1>-<3> Store a bookmark for this line

  <L-AMIGA> + <F4>-<F6>         save winconfig
  <F4> - <F6>                   load winconfig (F4 also startconfig)
  <F7>                          window autolayout variant #1
  <F8>                          window autolayout variant #2

  <F9>                          goto previous document
  <F10>                         goto next document


 You must save the preferences to store the window configuration to a file
 and when AmiBlitz starts, it always defaults to the F4 configuration.

@ENDNODE

@NODE HELP "Shortcut HELP Key over empty space"

 Pressing "Help" with nothing under the cursor (and nothing in the position
 to the left of the cursor) will bring up an instruction search window. You
 can type some text in the string gadget and all the instructions and @{"'library' macros" link macros} which
 contain that text will be shown in the listview. This is known as the
 "Instruction Browser".

@ENDNODE

@NODE HELP+Text "Shortcut HELP Key over Text"

 Pressing "Help" when there is a character under, or to the left of, the
 cursor will display the usual help string in the title-bar of the screen
 if the character is part of a recognised instruction. When it is not part
 of an instruction, AmiBlitz will show you how many times you have used this
 word in your source code. This is useful to check the correct spelling of a
 variable (Count>1) or to make sure you have not used that variable before
 (Count=1).

@ENDNODE

@NODE HELP+NEWTYPE "Shortcut HELP Key over Slash"

 Pressing "Help" while over a slash character ("\\") as used in types will show
 you all the fields of that NEWTYPE. This will work for variables, USEPATH
 code (e.g. "\\name") and arrays. If you have local and global variables with
 the same name but different types then the local variable type will be shown.

@ENDNODE

@NODE SHIFT+HELP "Shortcut SHIFT + HELP Key"

 Pressing "SHIFT+Help" over an instruction or object name will show you the full
 text of the online help for that instruction (if it is available). Pressing
 Alt+Help over an instruction will show you the commands in the library that
 the instruction is in. These are changeable in the PED menu editor (in the
 Custom menu).

@ENDNODE

@NODE R-AMIGA+HELP "Shortcut Right AMIGA + HELP Key"

 Pressing "R-AMIGA+Help" will bring up the default help program, which is
 useful for internal AmiBlitz commands. This help can be in English or
 German, depending on which help.dat file you use (help_en.dat or help_de.dat).
 By default, the English help file is used.

@ENDNODE

@NODE CTRL+HELP "Shortcut CTRL + HELP Key"

 Pressing "CTRL+Help" gives you the @{"dialog parameter window" link dialogparameter}.

@ENDNODE


@NODE optimise "Optimisation and new syntax"

 AmiBlitz3 is capable of optimising your executables. For this, you need the
new fpulib (which is included in the deflibs file supplied).

 To turn on the optimiser, you can use "@{b}optimize@{ub} 1". This will
enable code and integer optimisations. To turn on FPU optimisations,
use "@{b}optimize@{ub} 2". To turn both on, use "@{b}optimize@{ub} 3".
To turn them off, use "@{b}optimize@{ub} 0".

 The FPU optimiser uses FPU instructions which must be emulated on 040 and
060 processors!

 Note that the optimiser may not yet be fully working, since Bernd has
been the only person to use it a lot. When you are writing your programs
you should have the optimiser turned off and then only when you are
ready to create the final executable you should turn it on. If there
are problems with it, you can try to find the line in your source code
which causes a problem and inform Bernd so he can fix it.

 You also need to use the optimize command to turn on the new syntax of the
language. To do this, simply OR the value 4 in with whatever you already
have for the optimiser.

 Another speedup can be found with statements and functions. AmiBlitz has
added a new feature which you can use like this (when you create a
statement or function):
    Statement/Function FAST myfunction{...}

 When you use FAST (and it must be "FAST") it tells AmiBlitz to not clear
the local variables inside that function, and saves you some time
each time the function is called. Be warned, that you can get into
problems if you do not manually initialise your variables in a function!

Also note that you cannot use arrays or strings inside functions declared
with FAST! This is due to the memory allocations, which cannot work correctly
in FAST functions. You will get an error if you try to use FAST on an
unsuitable statement or function.

@ENDNODE


@NODE codechange "Source code changes"

 About the compiler:
 Faster compiletime: (2-5* on large progs (30000 lines)because of using variable Hash ALG)
 (Large Include Files now have no speed loss)

 Optimizer:  (Need fpulib.ob)
 add to your program optimize 1 switch it on or optimize 0 switch Integer off
                     optimize 2 switch 68k FPU for Basic on
                      optimze 3 switch Integer Optimizer on AND switch FPU on

 By default it is off.If you develop a program dont use it.(Writing a optimizer
 must support many terms and i am the only that using AmiBlitz3 so i am not sure
 if it is 100% errrorfree)

 In debugMode the FPU is always deactivated

 If your program is ready switch it on.If your program crash (Should not occur)
 you can find the statement and switch it off before and after that you can
 switch it on.If you find the place mail me the code sequence so i can try to fix it
 FPU switch must on before the first line (data dependency))

 What does it?
 it optimize if then,constant add,typeaccess and add a 32bit mul 32bit div
 Normally Code is ca 10%-20% slower than C if you not use too much
 functioncalls per second (use gosub then)
 For the FPU keep in mind that it use fsin fasin fsinh etc this is emulate
 in 040-060 (In UAEJIT it give full Speed)

 Allow Speech Plugins (PPC Asm& 68k FPU exists now)
 You can add all processor codegens (X86 ARM C LISP all you want)
 See the fpulib.bb2 it add 68kfpu and PPC Inline Assembler


 AmiBlitz includes some changes to the way in which you can write your code.

 Macros do not need {} after the name of the macro when you call them, although
you can still include them for compatibility.

 Labels do not need a colon ":" after them (except in assembly code).

 You can put code to be executed after a semi-colon (comment mark) in your code.
To do this, you need to write the two characters ":@" and then the code you want
executed. For example:
    ; Hi this is a comment :@b=1
will cause the "b=1" piece of code to be executed.

 If you try to load a file which has a name with a ".asm" extension, AmiBlitz
will try to convert all the ASM code into a format which the AmiBlitz assembler
can assemble. All instructions, structures, etc will be converted. If you do
not want this to happen, or if AmiBlitz makes too many mistakes, you can simply
rename your file and load it like that.

 This feature requires you use optimize with the value of 4 or'ed in to whatever
you are currently using.

 The editor will now accept all 256 ASCII characters (so you can have
characters with accents, special characters, ©®öäü etc).

 The 020+ arithmetic assembly language instructions muls.l/mulu.l/divs.l/divu.l
can now be used in code instead of as dc.w's. However, only register to
register mode is supported for now.

Putd0 and Getd0 are a fast way to move variables from ASM to basic and back
again (1 68k Cycle), and are faster than PutReg and GetReg.

Basic variables can be accessed in assembler:
    globals   move.l basicvarname(a5),dx
    locals    move.l basicvarname(a4),dx
    newtypes  move.l newtypevar(a5),a0
              move.l .newtypename\entry(a0),d0

    float:    fmove.s basicvarname(a5),dx (FPU on)

    PPC:      lwz rx,basicvar(r8)
@ENDNODE


@NODE comperr "New compiler error reports"

 AmiBlitz has improved reporting of compiler errors (especially when they deal
with macros or files which have been included using the INCLUDE or XINCLUDE
commands). When the compiler error requester pops up, the title bar of the
requester will show the contents of the line which has the error in it, so
it will be easier to find. Note that sometimes it does not show the exact line,
the error may be a couple of lines before or after it.

@ENDNODE


@NODE absource "AB2 source file format"

 If you save your sourcecode with the extension ".ab2" then the source code
will be saved as an ASCII file, but the ".xtra" file will also be saved.

 This is useful since you do not need to load your source into the AmiBlitz
editor just to read it (as you would have to do with the ".bb2" source format)
and you also have the use of the .xtra file (which you would not get if you
saved your source as ASCII).

@ENDNODE


@NODE varargs "Variable parameters to statements/functions"

 When calling statements or functions in your code, you can change the number
of parameters that you specify. All unspecified parameters will have the
value -1. You must have turned on the @{"new syntax mode" link optimise} for this.
Each parameter you want to be optional must have the @ symbol in front of
the variable name. For example:

    optimize 4 ; This value must be at least 4 to use this new feature

    Statement display(a.w, b.w, @c.w, @d.w}
        NPrint a
        NPrint b
        NPrint c
        NPrint d
    End Statement

    display{1,2} ; Causes 1, 2, -1 and -1 to be displayed

 Note that you need the new syntax mode turned on (the value you specify after
the @{" optimize " link "optimise"} command must be >=4).
@ENDNODE


@NODE moreargs "Number of parameters to statements/functions increased"

 The old versions of Blitz2 only allowed you to use 6 parameters in a
statement or function. Since v2.26 of AmiBlitz3, this limit has been increased
to 10.

 For the low level tech-heads, the first 6 parameters are passed in registers
d0 to d5 as before, the last 4 parameters can be accessed from the stack.
Each item takes *n bytes* on the stack, where n is the size of the parameter, and
are *before* the return address!

@ENDNODE


@NODE syntax "Syntax command (useful for tracking difficult to find bugs)"

 A command called "syntax" has been added, and it has a similar function to
the "optimize" command (control the compiler). The parameter is a number,
and the bits/values can be added together to turn on certain options:

  Bit   Value   Description
   0      1     All variables must be declared using the "DefType" or "Shared"
                commands, otherwise a compiler error will be generated.

   1      2     Same as above, but you can also declare variables when you
                use them for the first time as long as you specify a type

   2      4     Converting a variable to a smaller type (e.g. foo.w=bar.l)
                will cause a compiler error. To force the conversion, put
                a "+" character at the start of the line (or immediately
                after a ":" character).

@ENDNODE


@NODE dimkeep "Resize of arrays without losing data"

 Arrays can be resized without losing any data. To do this, specify the "KEEP"
keyword after the "Dim" command, like this:

    Dim array.w(10)    ; The original creation of the array

    ; Program code...

    Dim KEEP array(20) ; Resizing the array
    If GetD0=0
        ; Resizing the array failed.
        ; However, the old array size and contents are still available.
    Else
        ; Resizing the array worked OK
    EndIf

 Note that you can also only resize the LAST dimension of the array
(especially important for multi-dimension arrays).

@ENDNODE


@NODE strptr "Pointers to strings enhanced"

 The compiler will generate an error for code like this:
     *pointer="abcdef"
     *pointer=a$
because the only reason it works is that the string is in the temporary
string buffer. Performing some string operation will cause the string
pointed to be *pointer to be incorrect.

 You can however use:
     *pointer.s="abcdef"
     *pointer=&a$
which allows the strings to be handled correctly.

@ENDNODE


@NODE linklist "Truely dynamic linked lists"

 Linked lists can now be made fully dynamic (items and memory will only be
allocated when you add an item to the list). Previous versions of Blitz
only allocated the number of items you specified in the "Dim List" statement
and then maintained items in a "used" and "available" state (internally of
course :).

 To make your linked list fully dynamic, simply Dim the linked list with an
item size of 0:

    Dim List foo.w(0) ; This list is dynamic!

@ENDNODE


@NODE enddo "Changes to program exit"

 The first (and very useful :) change to the way you can exit programs is that
instead of simply using "End" to end your program, you can use "End d0" and the
value in the d0 register is returned as the program return code (useful for
DOS commands). Commands such as "PutD0" and "PutReg" can be used to set the
value in the register.

 You can also add custom exit handlers to your program, written in Basic. An
exit handler is a piece of code which is automatically called when the
programs exits. There is an example of this in the image_include source
(which is included with the grpahics card example).

@ENDNODE


@NODE uselastpath "USELASTPATH command"

 The command "USELASTPATH" sets the newtype path in the same way as the
"USEPATH" command. However, "USELASTPATH" sets the path to the previous
setting from "USEPATH". For example:

    DefType.Window mywindow
    DefType.Screen myscreen

    USEPATH mywindow
    NPrint \LeftEdge ; X-position of window

    USEPATH myscreen
    NPrint \Width    ; Width of screen
    NPrint \Height   ; Height of screen

    USELASTPATH
    NPrint \TopEdge  ; Y position of window

@ENDNODE


@NODE readwritetype "ReadType and WriteType commands"

 There are now two new commands called ReadType and WriteType which allow you
to read and write an entire NEWTYPE variable from and to a file. These are
similar to ReadMem and WriteMem except AmiBlitz does all the hard work for you.
Use them like this:

    NEWTYPE.mytype
        ; Some variables
    End NEWTYPE

    DefType.mytype a_variable

    ; Open file and things here as normal
    WriteType file_number, a_variable ; Write contents of NEWTYPE variable to file

    ReadType file_number, a_variable  ; Read back into type

 There are some limits to these functions. First, you must only use them
with AmiBlitz 2.27 and higher. Second, types inside types are not supported.
Third, string variables inside a type must not be longer than 300 characters
(although Bernd will increase this if people need it to be longer).

 See the writetype.ab2 example in the "Examples" directory.

@ENDNODE


@NODE maxobject "Maximum number of objects increased"

 It is now possible to use more objects than were previously possible. Certain
combinations of numbers of objects and sizes of objects caused crashes when
a program created in Blitz initialised its object buffer. For example, one
such library was the Shape library (1024 objects, each shape havign a size of
32 bytes = 32768) caused a negative offset to be calculated and the wrong
addresses used for the shapes.

 This is now fixed so that you can use up to 65536 objects (in theory anyway),
numbered 0 to 65535.

@ENDNODE


@NODE stringpass "String passing as pointers fixed"

 Passing strings (not string variables!) to functions which required pointers
did not always work when multiple strings were passed. This is now possible,
and is especially useful with OS functions as shown below:

    SetComment_ "ram:some_file_here", "A comment from AmiBlitz"

@ENDNODE


@NODE folding "Source code folding"
@ENDNODE


@NODE macros "New 'library' macros"

 A new/useful feature is the ability to write macros and have them included in
the @{"Instruction Browser" link inputs 14} window. To do this you can write
a macro which has a function or statement inside it and a comment to the side
of the macro. For example:

Macro my_func ; {a.w, b.l}   Comment would usually show syntax help for function
Function.l my_func{a.w, b.l}
    ; Your code for function here
End Function
End Macro

 You should only include one function or statement inside a macro since otherwise
you cannot use the help system advantages (described below).

 There are a lot of advantages to this. The first was mentioned above (the macro
line will be shown in the "Instruction Browser" - that will include the comment).
Parameter help (Help key by itself) and online help (Shift + Help) will also
work with these macros.

 Additionally, you can write many functions and then choose which ones to include
in your code by calling the macro (you will need to call the macro to include
the code anyway). This has the benefit of still allowing you to access all the
statements and functions you write, but smaller executables (since only the ones
you call the macro for are compiled).

 Finally, it is possible to compile these macros as resident files, so you can
created "libraries" in Basic and do not need to release the source code (if you
do not want to).

Bernd has also provided example code for installing an exit handler
which is some code that will automatically be called when your program exits.
This will behave the same way as if you had written a BlitzLib in 100% assembly!

 The "image_include" from Thilo Kohler, in the "Examples/GraphicCard" directory
is an excellent example of this system.


 Bernd has also proposed a method for making good use of this system, and is
similar to the "image_include" example. You should create a set of functions
for performing some task, or to act as a library. Each function should be
enclosed in Macro...End Macro blocks as described above, so you get all of the
benefits. You should also write an initialisation and close function. The
initialisation function, when included with its macro, should include all the
other functions (or maybe only the most used if you like) of the "library",
perform all initialisation code and install an exit handler to call the close
function.

 It may also be worthwhile having a macro such as "!image_all" to include ALL
other functions for the library, for lazy programmers like Bernd ;p

@ENDNODE


@NODE libmacros "New macros for library authors"

 There are also some macros which allow you to write Basic code in
libraries. For more information, see the section of the online help.

@ENDNODE


@NODE resclash "Resident clashes shown"

 When there are clashes in resident files, the usual requester will be shown
but now there will also be some extra information in the titlebar of the
requester. This will describe what the clash really is instead of simply telling
you there is one.

@ENDNODE


@NODE regload "RegLoad command"

 The RegLoad command allows you to load variables into floating point
registers. This can greatly improve the speed of your program, since
AmiBlitz can now use the FPU. A maximum of 5 registers can be loaded.

 The syntax is:

RegLoad var1 [, var2 [, var3 [, var4 [, var5]]]]

 When the registers are loaded all single precision floating point
numbers are converted to extended floating point.

 If the variables are changed when they are in a register you need to use the
RegSave command. It takes no parameters and simply stores the changed
variables which have been loaded into registers.

@ENDNODE


@NODE object "Object...End Object commands"
@ENDNODE


@NODE caststring "Casting strings to longs"

 If you have enabled the @{"new syntax mode" link optimise} then you will be able to cast
strings to integer variables. The length of the string must not be longer
than the number of bytes that the variable takes in memory.

 This can be useful especially when dealing with files which adhere to an
Amiga standard, such as IFF files. For example:

     x.l = @"ILBM"

will load the variable x with the longword which makes up the string
"ILBM".

 Using this syntax is a lot faster than using Asc(x), and probably also faster
than using Cvl(string). This will also work for byte and word but remember
not to make the string longer than 1 and 2 characters respectively.

@ENDNODE


@NODE charseq "Character string escape sequences"

 You can now add character sequences in strings which have special meanings
(similar to C but slightly different). The format is \\<char> (that should be
two slash characters) where char is the ASCII code of the character to insert
in hexadecimal. For example

    NPrint "\\22 Hello \\22"

 Will print the following (including! the quote marks)

    " Hello "

 This will save you some executable size and execution time instead of needing
to use Chr$(x) and adding that to a string, just to get a single "special"
character.

 Another feature of this new character sequence is that you can repeat
characters by using the format \\R<num><char>. num is a 2 digit value
in hexadecimal which tells AmiBlitz how many times to repeat and char
is the same as above.

 If you want to write two slash characters back to back, then you must put
four slash characters in your string - "\\\\".

 This feature is only enabled if you have the @{"new syntax mode" link optimise} turned on.

@ENDNODE


@NODE nontoke "Non tokenising mode"

 See also the @{"NON_AUTO_TOKENIZE tooltype" link tooltypes 35}.

@ENDNODE


@NODE clipboard "Real clipboard support"

 PED will now use the proper Amiga standard clipboard, so you can paste
code directly in from e.g. YAM.

 Another new feature is that if you copy a block and paste it, PEd will
check to see if there are any spaces in the first line. If there are none,
then the block will be pasted starting from the current column position
(so you could paste a block indented for example).
@ENDNODE

@node "objectuse" "How to use"

Here you can add all your thousands of functions/statements
 and can find them in instructionsbrowser like old commands
 Make file like  myfuncs.bb2
Embed the function or functions you want in a object end object

before

function testfunc{}
.......
end function

now

object testfunc ;short screen paramter help
function testfunc{}
end function
........

end object

You can add as many functions you want in a object.
But only the first function after a object is available in shorthelp etc.

Later functions are like C called  private stuff which not see in help
but can accsess if you want
So its upto you what you want make public or not to not confuse the User
with too many functions

now add a object

object myfuncs_include
!testfunc1
!testfunc2
.........
end object

This contain all objects that should include from the compiler

Now you can build a .res file out of this or maybe add to
a global res file with many thousends funcs for ex. add it to all.res

If you want use the functions your program should include the .res file
and call first a

!myfuncs_include

To develop/debug this stuff or use a testprogram without building a .res file
you can set the constant #developobject=1.

You can use this without building a .res file
for include with include command when your mainprogram
set before the include command #developobject=1

The instructionhelp can list you this Objects. Here you can add docu if you wish

You can add stuff to the exithandler that is called automatic on exit
and free resources to do this add

;******************* here come exithandlercode
.Installexithandler
 MOVE.l #myfreecode_myfunc,d0 ;
SysJsr $c801       ;this install the exithandler
MOVE.l d0,oldfree_myfunc   ;This read the oldfree code to link all handlers together
BRA l1_myfunc
myfreecode_myfunc          ;this is the autoexit routine
;*****************User Code Start
image_freeall{} ; this is called on program exit automatic
;*****************User Code End******************************
MOVE.l oldfree_myfunc,a0  ;jump to next exithandler
JMP (a0)
oldfree_myfunc: Dc.l 0
l1_myfunc
;*****************exit handler code end

Use always labels that can never occur in other programs.
Same is if your objects use global vars

Note: The `@ dont work here

If you want add help to guide you can do this easy

Load in file blitz2:redhelp/usermacros.guide

Make a node of the commad you want shift+help for

node "myfunc"
      Dont forget the @ before node

endnode

Example Progs to load in ped you can also easy add to a guide

{" Myfuncexample " system "run >NIL: BLITZ2:REDHelp/ShowExample File=Blitz2:exampledir/examplefile.ab2"}

Dont forget the @ before {" Myfunc....

ALso look in dir thilo_includes.All files use the AB2 object format

@endnode




@node "RWE" "Red When Excited"

                      @{b}@{u}How To Contact Red When Excited@{uu}@{ub}


Write to:                   Red When Excited Ltd,
                            2 Slimmons Drive,
                            St. Albans,
                            Herts.
                            AL4 9AS
                            ENGLAND

If you have Internet access, you can e-mail us :

                      redwhen\@ldngedge.demon.co.uk

or point your browser at our WorldWideWeb page :

                   http://www.aber.ac.uk/~ngh94/rwe.html

@endnode

@node "usefullmacros" "Usefull Macros"
@{lindent 4}
       These macros are only if you write plugins or write reentrant
       Code wich uses nore Tasks

       Lock Basic code with UnLockBasic:ev=wzwaitevent:LockBasic
       LockBasic and UnlockBasic can call after !asm

!initasm  Load registers d1-d7/a0-a6 from programm start
          dont use Basic Instructions.
          Must call before !basic !asm.

!basic    Switches to basic without look of stack Dont use interrupts.
          Can use in Statement and Reentrant Code

!basica7 Switches to basic Can call from Interrupts but Stackpos must
          be the same when you call !asma7.
          Dont use in Statements !!!!

!asm   Switches to asm and reloads reg d1-d7/a0-a6
       wich stored with !basic

!asma7    switches to asm and reloads reg d1-d7/a0-a6 from stack
          wich stored with !basica7

"!exitasm" stores d0-d7/a0-a6 so on Programm Return all Regs are
correct
           all Registers are correct
          Plugin Bsp Source

!initasm

!basic

   Basic Code

!asm

!exitasm

end noa7    ;stack must same position as on start so dont use it in
            for while or case instructions:end Instruction doesnt work

!newidcmp   makes a new idcmp for current WZwindow so reentrant
            code is possible

!freenewidcmp must call before wzclosewindow to release !newidcmp Port
@endnode


@NODE faq "Frequently asked questions (by Bernd)"
@{fg shine}A library i need is not in my deflibsfile how can i add this @{fg text}

Copy your desired lib to blitz3:blitzlibs/userlibs/private/
Re-Start AB2. The new instructions should now beavailable

If they are not available a lib clash happened with one of your other libs.
Look in the file sorted_libnums.bb2 to find the number your lib have
Look in file davidsdeflibs.txt if the libnum is free

You can then temporary use libnum 200- (6 free places) num 2 and 3
for your libs /fd's that selden used.

Use the librarymaster and rename the lib to one of the free nums
and copy it to blitz2:userlibs/beta

Now it is a good time to mail to the blitzlist so we can search a new number
for this lib to have a chance to make a deflibs that have all usefull libs
added.

To convert Sources between diffrent libnums you can save your file in .ab2 Format
(myfile.ab2 and reload it with the newdeflibs.

The ab2 Format saves in asciii the advantage of this is you do not lost the
compiler options.It has same features as BB2 format only problem is
loadtime of large programs is slow


If all of this tips you dont like create a copy of the file AmiBlitz3
rename it to AmiBlitz3_libold and use your own build deflibs here
Set tooltype deflibs=mydeflibs

The sense for this is because if function libs are out which are make with
the standard deflib you can easy use this also the new functionlibrarys (in macros
in .res files work optimal so)


@{fg shine}Wy should i avoid libclushes (more libs at 1 number) ?@{fg text}
AB2 load first deflibs and then acidlibs.BB2 load first acidlibs and then deflibs
Sense wy AB2 do this is to get the patchlib dir working

Only the first lib with the number is used.The other is not used and make only
problems.There are:
If you set the maximum object size
in the compiler prefs to a higher value and there are
two object entries with same name you cannot increase the maximum Object
size also if you set both values to a higher value.
If the Instruction help window in AB2 shows a instructions 2 times
you see also that it clashes.

@{fg shine}How do i manage my lib files in the best way@{fg text}

Until a new libmanager is out there are still usefull tools on the
Homepage at http://www.blitz-2000.co.uk/

deflibsman:(i sent to the list)
It shows you a listview with the libs and his
nums.You can sort by name/libnum so you find easy double libnums.
Also for handling the patchlibs it is usefull because you can deactivate
libs easy before you make deflibs:
Note: You see no libnums from
the userlibs/beta dir so you must check manually.

Librarymaster
If you want to change a libnum or split/make acidlibs/deflibs easy
and you know that your dir is clashfree use the librarymaster
It can also check clashes but has no feature to deactivate temporarly
a lib.
You can make a dir decompiled where the splittet acidlibs
can stay in.You can then change files in this and create again.
Note: the decompiled dir must empty if you split a file.


@{fg shine}What sense have the patchlibs dir@{fg text}

The patchlibs dir is used for developing/enhance libs
so the user can easy check if the patchlib work better or not
Because there are many unoffical bugfixes in
the acidlibs out this helps to find
problems in the offical Source in the fastest way.If you notice a problem
from a lib in patchlib you can use the deflibman do a select all and
remove step by step all patchlib and mail then the developer
the exact problem.

Later if all are happy with the acidlibs no file should stay in
patchlibs.This is then used for users that want to add
features to the acidlibs.And users who like it can install in patchlibs and
test it.If they notice problems they can
easy remove the lib and check without it.The developer of a patchfile should
add large default object numbers for testing because you can not increase
maximum objects in compilerprefs

Thats the sense wy i have add the patchlibs dir.

@{fg shine}How Liblinking work@{fg text}

Blitz2 use chars 1-127 for normal text.
If a char is higher than 127 then it read the second byte(if ACID uses 3
Bytes were wonderfull).So it get a num for ex. 0x9001
Blitz2 did a bclear #15 and the num is now 0x1001.Now it uses the number in
that way
that bit 14-6 are the libnum and bit 6-0 is intruction.So you get 256 libs
with 128 instructions.
On the libnum Blitz2 see which library he should link to the code.
If you have for example a lib with more than 128 instructions and lib is at
200 as base the 130. command
is interpret as command 2 on libnum 201.The problem is the linker want to
add library 201.This lib doesent exist in real so it add nothing.If you use
no commmand below 128 your lib is not linked and your executable crash


@{fg shine}Does every entry in a newtype structure also count as one global var? @{fg text}

No
A newtype var uses only a pointer to it in the globvar or locvar space
String variable use also a pointer to the stringspace.
dims also use only 1 pointer
A newtpye is limited to 32767 Bytes.If it greater the compiler shows
type too big


@{fg shine}
 When you install the new libs like memlib.obj staticslib.obj
 or varslib.obj
 Do you have to delete the old one (in blitzlibs:stystem) ?.


@{fg text}:
 Newer Blitzbasic Version dont use this files in
 blitzlibs/systems so this should not include in the
 libman if you create deflibs
 To see if you have a new blitzbasic version look
 if you have the file acidlibs (Introduced in BUM8)
 If so the system dir is not need because all the files are in acidlibs
 When you create a new deflibs with libman you must
 select all files in patchlibs


@{fg shine}
 I see no slider in the right bookmark window
@{fg text}:
 Increase in prefs label size to min 18 with topaz 8 font

@{fg shine}
 On WINUAEJIT when runtimeerrorcheck is on ,programs run extreme slow
 What can i do ?
@{fg text}
 Try disable the JIT (cpu nocache) for now
 This is a JIT Problem because it flushes the cache every trap
 I try to fix this

@{fg shine}
 My calculator say 11888.1 AB2 and BB2 say 11888.0939 Wy this
   a.f=11.9
   b.f=999
   Print a.f*b.f
@{fg text}
     This is because 32bit floats have a accuracy of 6 numbers (0.001%)
     ffp.But with FPU you have intern 64bit accuracy so this give with
     32bit vars better results than ffp in complex Terms look wy

     a=b*c+d
     a=a/4
     64bit=32bit*32bit                  b*c
     64bit=64bit+32bit                  res(b*c)+d
     If in the next term the result of the above (a)
     come after the = then the 64bit is not round down to 32bit value
     64bit=64bit/4
     Constants are double float in AB2 but using double float for
     vars is selden used and hard to implememt in AB2
     (3d graphicchips use 32 bit floats.)So the replace
     for the .f is single FPU.
     Also the FPU result is convert when print to ffp
     (because extern libs only support this)
     so accuracy is same like ffp when you see the number

     But if you want program in AB2 Assembler you
     can use 64bit float vars
@ENDNODE

@NODE bugs "Ooh, nasty"

 @{u}Displaying the source:@{uu}
 If the " " pair (for strings) are not correct then incorrect instructions
 are shown or garbled tokens (in the old version of Blitz, the instruction would become
 detokenised).If you correct the " " to the correct state and move cursor
 up/down then all will be fixed. This also happens sometimes when you use
 the editor option to "delete to end of line".
 This is because AmiBlitz3 uses all 256 ASCII characters - previously it only
 used characters 1-127 and all characters above were instructions.

 Sometimes the block selection via mouse may look weird.


@ENDNODE


@NODE authors "Authors and Credits"

 The authors of AmiBlitz were Acid Software (Simon Armstrong and Mark Sibly,
 back when it was called Blitz Basic).

 Red When Excited (RWE) produced a great number of useful additions
 including the editor and debugger, as well as a host of add-on libraries
 (in a collection known as the Blitz Support Suite, or BSS).

 Of course, many other authors have also created their own add-on libraries
 which have been included in this distribution, such as Frederic Laboureur
 (NLibs), Olivier Laviale (LotanLibs), Richard T. Elmore (ElmoreLibs), Paul
 West (Mildred), Xavier Nuel (BDLibs), Steve Flock (XBLibs) and many others
 that I have forgotten.

 Recently, Bernd Roesch has updated the compiler and editor
 and his work has convinced Simon and Mark to allow the release of
 AmiBlitz as freeware.

 Sven Dröge began in 2006 to heavily improve the IDE and reorder the distribution.

 Thomas Richter wrote the @{b}disassembler.library@{ub}, and you can find the full
 distribution for that on Aminet in util/libs/DisLib.lha. This library is
 used by the debugger.

 @{b}wizard.library@{ub} was written by Haage&Partner. You can find the full distribution
 on their homepage (http://www.haage-partner.com) or on Aminet in
 biz/haage/WizardLibrary.lha.

 If you would like to contribute to the development of @{b}AmiBlitz3@{ub}, most
 of the source for nearly everything connected to AmiBlitz3 has been
 released. The best idea is to check the notes in the source to see
 if updates should be released as they are created or sent back to a
 person who maintains the latest version.

 Bug reports should be sent to the appropriate author - in the case of
 AmiBlitz3 (compiler and editor) this is
 @{b}Bernd Roesch - berndroesch1\@compuserve.de or
Sven Dröge   - sven.droege\@programmed-excellence.de@{ub}

 You are welcome to join the amiblitz-mailinglist. Look at http://www.amiforce.de
 for further information...

@ENDNODE


@NODE gpl "GNU General Public License"

            GNU GENERAL PUBLIC LICENSE
               Version 2, June 1991

 Copyright (C) 1989, 1991 Free Software Foundation, Inc.
                       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

  The precise terms and conditions for copying, distribution and
modification follow.

            GNU GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The "Program", below,
refers to any such program or work, and a "work based on the Program"
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term "modification".)  Each licensee is addressed as "you".

Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.

You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.

  2. You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

    a) You must cause the modified files to carry prominent notices
    stating that you changed the files and the date of any change.

    b) You must cause any work that you distribute or publish, that in
    whole or in part contains or is derived from the Program or any
    part thereof, to be licensed as a whole at no charge to all third
    parties under the terms of this License.

    c) If the modified program normally reads commands interactively
    when run, you must cause it, when started running for such
    interactive use in the most ordinary way, to print or display an
    announcement including an appropriate copyright notice and a
    notice that there is no warranty (or else, saying that you provide
    a warranty) and that users may redistribute the program under
    these conditions, and telling the user how to view a copy of this
    License.  (Exception: if the Program itself is interactive but
    does not normally print such an announcement, your work based on
    the Program is not required to print an announcement.)

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.

In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:

    a) Accompany it with the complete corresponding machine-readable
    source code, which must be distributed under the terms of Sections
    1 and 2 above on a medium customarily used for software interchange; or,

    b) Accompany it with a written offer, valid for at least three
    years, to give any third party, for a charge no more than your
    cost of physically performing source distribution, a complete
    machine-readable copy of the corresponding source code, to be
    distributed under the terms of Sections 1 and 2 above on a medium
    customarily used for software interchange; or,

    c) Accompany it with the information you received as to the offer
    to distribute corresponding source code.  (This alternative is
    allowed only for noncommercial distribution and only if you
    received the program in object code or executable form with such
    an offer, in accord with Subsection b above.)

The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.

If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.

  5. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.

  7. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.

  9. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.

  10. If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

                NO WARRANTY

  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.

             END OF TERMS AND CONDITIONS

        How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


Also add information on how to contact you by electronic and paper mail.

If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

    Gnomovision version 69, Copyright (C) year name of author
    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, the commands you use may
be called something other than `show w' and `show c'; they could even be
mouse-clicks or menu items--whatever suits your program.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  Here is a sample; alter the names:

  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
  `Gnomovision' (which makes passes at compilers) written by James Hacker.

  <signature of Ty Coon>, 1 April 1989
  Ty Coon, President of Vice

This General Public License does not permit incorporating your program into
proprietary programs.  If your program is a subroutine library, you may
consider it more useful to permit linking proprietary applications with the
library.  If this is what you want to do, use the GNU Library General
Public License instead of this License.

@ENDNODE
