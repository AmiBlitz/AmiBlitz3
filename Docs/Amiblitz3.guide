@DATABASE AmiBlitz3.guide
@INDEX main
@REMARK $VER: AmiBlitz3.guide 1.2 (30.05.2023)
@WORDWRAP

@NODE main "AmiBlitz3 Guide"


  Welcome to @{b}AmiBlitz3@{ub} - an upgraded Basic-IDE of the original BlitzBasic II

  This archive contains the latest stable release of AmiBlitz3.

    @{u}General Information about AmiBlitz3@{uu}

      @{" License " link "license"}
      @{" Introduction " link "Abstract"}
      @{" Product history " link "history"}
      @{" Authors " link "authors"}

      @{" Differences between BB2 / AB2 / AB3" link DIFFERENCES}


    @{u}General information about this package@{uu}

      @{" Package contents " link "whassit"}
      @{" Requirements " link "require"}
      @{" Installation " link "install"}


    @{u}Introduction to AmiBlitz3 and the BASIC-dialect@{uu}

      @{" Usage " link USAGE}

      @{" Summary of the AmiBlitz3 programming Language " link "syntax"}
      
      @{" Documentation of Blitzlibs " link Miscellaneous/Blitzlibs.guide/main}
      @{" Documentation of Includes " link Includes/main.guide/main}

      @{" The classic programmers guide to BlitzBasicII manual" link BlitzProgrammers.guide/main}

    @{u}Further information@{uu}

      @{" Known bugs " link "bugs"}      
      @{" FAQ  " link FAQ}
      
@ENDNODE


@NODE history "History"

  Why does AmiBlitz3 exist?

  As @{b}Blitzbasic II@{ub} became open source (Acidsoft left Amiga scene and disclaimed all rights
  on its product, except the name: Blitzbasic was reincarnated on PC-platform and must not
  be used at the Amiga-platform anymore), Bernd Roesch started to modernize BB2 and released
  his work as AmiBlitz2. He did many improvements to the compiler and the editor PED.

  By the way: The "source" that was available from good old BlitzBasicII was just a
  disassembled machine code, therefore changes are hard to realize.

  In 2006 Sven Drï¿½ge took a quick look on the source and started to modernize the GUI and
  convert wide parts of the asm-code into AB-code.
  He redesigned the configuration system, the file structure of the IDE-package and
  added some features to PED like a new help system.

  Thilo Koehler wrote a powerful compilation of include files that covers a wide area of
  application, as mp3-playback, internet-connectivity, blitting and drawing functions, etc.
  These includes were recently updated and a complete documentation was added.

  All these changes that were done to the latest AmiBlitz2 version (v2.45) let to a new
  release that is called @{b}AmiBlitz3@{ub}.

@ENDNODE history

@NODE DIFFERENCES "Differences between AmiBlitz2 and AmiBlitz3"

  @{b}Tabulated comparison between Blitzbasic II, AmiBlitz2 and AmiBlitz3:@{ub}

    ---------------------------------------------------------------------------------------------
    | Component | Feature                                 | BlitzBasicII | AmiBlitz2 | AmiBlitz3 
    ---------------------------------------------------------------------------------------------
    | IDE       | @{"Required OS for IDE" link REQUIRE}                     | 1.2          | 3.1       | 2.X
    | IDE       | @{"FPU required for IDE" link REQUIRE}                    | no           | yes       | no
    | IDE       | @{"Automatic assign" link INSTALL}                        | no           | no        | yes
    | IDE       | @{"Powerful GUI" link USAGE}                            | no           | halfway   | yes
    | IDE       | @{"Extended configuration" link CONFIG}                  | no           | no        | yes
    | IDE       | @{"Tooltypes support" link tooltypes}                       | no           | minor     | yes
    | IDE       | @{"Extended Help System" link HELPSYSTEM}                    | no           | no        | yes
    | IDE       | @{"Max characters in source line" link SOURCEEDITOR}           | 128          | 250       | 250
    | IDE       | @{"Textbased fileformat" link FILEFORMAT}                    | no           | halfway   | yes
    | IDE       | @{"Supports linenumbers" link SOURCEEDITOR}                    | no           | no        | yes
    | IDE       | @{"Supports intellisense" link SOURCEEDITOR}                   | no           | no        | yes
    | IDE       | @{"Shows values as tooltip" link SOURCEEDITOR}                 | no           | no        | yes
    | IDE       | @{"Internal logging" link LOGGING}                        | no           | no        | yes
    | IDE       | @{"Multilingual support" Link CONFIG}                    | no           | no        | yes
    | package   | @{"Powerful Includes" link Includes/main.guide/main}                       | no           | yes       | yes    
    | package   | @{"Improved Blitzlibs" link Miscellaneous/Blitzlibs.guide/main}                      | no           | no        | yes
    | package   | @{"Updated documentation" link main}                   | no           | no        | yes
    | compiler  | @{"FPU optimizations" link "optimise"}                       | no           | yes       | yes
    | compiler  | @{"Autosupport of FPU" link FPUOPTIMIZATIONS}                      | no           | no        | yes
    | compiler  | @{"68020 optimizations" link "optimise"}                     | no           | yes       | yes        
    | compiler  | @{"Redim-able arrays" link dimkeep}                       | no           | yes       | yes    
    | compiler  | @{"Truely dynamic linked lists" link linklist}             | no           | yes       | yes    
    | compiler  | @{"Dynamic function parameters" link varargs}             | no           | yes       | yes      
    | compiler  | @{"Number of function parameters" link moreargs}           | 6            | 10        | 10     
    | compiler  | @{"Directly passing string to OS-functions" link stringpass} | no           | yes       | yes
    | compiler  | @{"Casting strings to long values" link caststring}          | no           | yes       | yes
    | compiler  | @{"Using escape sequences in strings" link charseq}       | no           | yes       | yes
    | compiler  | @{"Return a value at program exit" link enddo}          | no           | yes       | yes
    | compiler  | @{"Reading/Writing complete NewTypes" link readwritetype}       | no           | yes       | yes


  @{b}Additional compiler changes @{ub}

  @{" Compiler updates " link compilerupdates}
  @{" Pointers to strings enhanced " link strptr}
  @{" Object...End Object commands " link object}
  @{" Maximum number of objects increased " link maxobject}
  @{" New 'library' macros " link macros}
  @{" New macros for library authors " link libmacros}
  @{" Resident clashes shown " link resclash}
  @{" RegLoad command " link regload}
  @{" AB3 Object format " link "objectuse"}
  @{" Macros  " link "macros"}


@ENDNODE DIFFERENCES

@NODE FILEFORMAT "AB3 file format"

 @{b}@{u}AB3 file format@{ub}@{uu}
 In BlitzBasicII a saved source consist of two files: 
  * the *.bb2 tokenized source file and
  * the *.xtra config file.

 The bb2-file contains the tokenized source text, that means all commands are represented as a binary token number.
 Therefore is the source not human readable.

 The xtra-file contains serveral settings related to the source, e.g. compiler settings, object limits, resident files
 to be loaded with the source file and so on.

 AmiBlitz2 started to improve that by saving the source text as a detokenized (that means plain) text in an *.AB2-file.
 The *.xtra-file was still needed.

 In AmiBlitz3, all settings for the current source file are stored as comments at the beginning of the sourcefile. 
 These data will be parsed and automatically hidden to the user. The former *.xtra-file is not used anymore. The 
 source files will be tokenized on loading, therefore the main problem of lib clashes is gone. Lib clashes happened 
 with BlitzBasicII alot, if a programmer used a blitzlib with a different lib number.

 Example of the comment header of a source file:

 @{fg highlight}
 ; XTRA
 ; Embedded .xtra Header
 ; 
 ; General Info
 ; -------------------------------------------------------
 ; ExePath         = "ram:"
 ; ExeFile         = "Empty"
 ; CreateIcon      = 0
 ; Residents       = "all.res"
 ; 
 ; Compiler
 ; -------------------------------------------------------
 ; StringBuffer    = 100000
 ; MakeSmallest    = 1
 ; FuncOptimize    = 1
 ; Version         = 0.0.0
 ; NumberOfBuilds  = 11
 ; 
 ; Debugger
 ; -------------------------------------------------------
 ; CliArgs         = ""
 ; StackSize       = 8192
 ; RuntimeDebug    = 0
 ; DebugInfo       = 0
 ; CreateDbgFile   = 0
 ; OverflowCheck   = 0
 ; AssemblerCheck  = 0
 ; InterruptCheck  = 1
 ; AutoRun         = 1
 ; 
 ; Editor
 ; -------------------------------------------------------
 ; CursorLine      = 24
 ; CursorColumn    = 4
 ; LabelSearch     = ""
 ; LabelRemark     = 0
 ; LabelAll        = 0
 ; LabelPosition   = 0
 ; 
 ; Blitz Objects
 ; -------------------------------------------------------
 ; Max File        = 100
 ; Max GadgetList  = 100
 ; Max Screen      = 5
 ; Max Shape       = 200
 ; Max Window      = 100
 ; Max Bank        = 1
 ; Max IntuiFont   = 10
 ; Max MenuList    = 100
 ; Max BlitzFont   = 1
 ; Max GTList      = 100
 ; Max Palette     = 4
 ; Max BitMap      = 10
 ; Max IconInfo    = 1
 ; Max MUIObject   = 50
 ; Max AsyncReq    = 4
 ; Max Req-Lib     = 5
 ; Max GTMenuList  = 100
 ; Max Console     = 5
 ; Max TCPSock     = 5
 ; Max Tape        = 5
 ; Max Sound       = 10
 ; Max MedModule   = 8
 ; Max Buffer      = 10
 ; Max Queue       = 10
 ; Max Sprite      = 20
 ; Max Module      = 5
 ; Max Slice       = 10
 ; Max Page        = 4
 ; Max CopList     = 10
 ; Max PTModule    = 5
 ; Max Anim        = 10
 ; Max NChunky     = 50
 ; Max Chunky      = 20
 ; Max Stencil     = 5
 ; Max XBSound     = 10
 ; /XTRA
 ;
 ; different blitmode examples
 ;
 @{fg text}
 NoCli
 Screen 0,3              ; open an intuition screen
 ScreensBitMap 0,0       ; and use it's bitmap
 Cls                     ; clear bitmap
 For k=7 To 1 Step -1    ; start of loop
   Circlef 32,32,k*4,k   ; groovy circles
 Next                    ; end of loop
 
 GetaShape 0,0,0,64,64   ; pick shape up
 Cls 2                   ; clear bitmap again, with colour 2
 Circlef 160,100,120,90,6; draw a circle.
 BlitMode CookieMode     ; try a blit mode
 Blit 0,0,0
 BlitMode EraseMode      ; another ...
 Blit 0,160,0
 BlitMode InvMode        ; another ...
 Blit 0,0,100
 BlitMode SolidMode      ; and a last ...
 Blit 0,160,100
 MouseWait
 End
 


@ENDNODE FILEFORMAT




@NODE "license" "Program Licenses"

  The "AmiBlitz3" and "PED" programs are relased under the @{" GNU General Public License " link "gpl"}.

    AmiBlitz3 and PED are free software; you can redistribute them and/or modify
    them under the terms of the @{"GNU General Public License" link "gpl"} as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your own option) any later version.

    These programs are distributed in the hope that they will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    @{"GNU General Public License" link "gpl"} for more details.

    You should have received a copy of the @{"GNU General Public License" link "gpl"}
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  The libraries and additional tools are released under their own original or updated licenses.

  No-one is claiming any intellectual or any other copyright over software developed
  in AmiBlitz3. You are free to release anything you create in AmiBlitz3 under any
  license you wish (at the time of writing there are no GPL licensed libraries).

@ENDNODE

@NODE Abstract "Introduction"
  @{b}1 Introduction@{ub}

  @{b}1.1 What is AmiBlitz3?@{ub}

  AmiBlitz3 is a free, open-source programming language for AmigaOS2.x and
  compatible (although it can produce code for AmigaOS1.x!). 
  It comes with its own integrated development environment called
  PED (Program EDitor). PED includes a texteditor, multi-source handling and
  various browsers for functions and documentation. The compiler itself is
  called AmiBlitz3 and generates 68K executables or shared libraries.
  Executables can be debugged using a source code level runtime debugger.
  There are two types of runtime libraries, the so called BlitzLibs
  (68K static libraries) and the Includes (source code libraries).
  
  @{b}1.2 Design Issues@{ub}

  AmiBlitz3 is the non-commercial follower of BlitzBasic2 on the Amiga,
  published by AcidSoft. BlitzBasic was designed to develop games for Classic
  Amigas, with direct support for the classic hardware, such as OCS/AGA
  chipset or Paula for audio. Over the years, especially when BlitzBasic became
  Amiblitz, the system conform parts were more and more developed, leading to
  a programming language that can be used for other hardware too, such as x86
  running Amithlon or WinUAE, PPCs running AmigaOS4 or MorphOS, as long as the
  OS API is compatible and the OS is able to execute 68K code.
  The runtime libraries of AmiBlitz3 are splitted up into:

  @{b}baseLibs@{ub} (BlitzLibs)
    baseLibs are the most important an required BlitzLibs (something like "linker" libs)
    All the basic functionality can be found here, that is program control, basic input 
    and output etc. The baseLibs (like all other BlitzLibs) come as binary 68K code and 
    are automatically loaded during IDE startup. There is no need to link/include
    them manually. baseLibs are also libs, that are required by other libs.

  @{b}utilLibs@{ub} (BlitzLibs)
    UtilLibs are BlitzLibs that extent the functionality on certain topics, most
    of them are 3rd party developments and were intended to be configurable
    via the "AB3LibsManager" tool.

  @{b}csLibs@{ub} (BlitzLibs)
    CsLibs (or "chipset-libs") are BlitzLibs that makes use of the customchips hardware 
    of an original or emulated Amiga, e.g. for native drawing operations or playing sound.
    If you want to program workbench bases applications, you usually do not need these libs
    and can disable loading them.
    
  @{b}osLibs@{ub} (BlitzLibs, aka FD-Converted Libs)
    OsLibs are BlitzLibs too, but they do no contain real code, they are just
    wrappers to integrate an Amiga Shared Library into AmiBlitz3.
    The AmigaOS3.x API plus some other important Shared Libraries are
    integrated that way. 
    If you want to program games that does not use the OS you usually can disable loading
    these libs.

  @{b}Includes@{ub} (Source Code)
    Includes are NOT BlitzLibs. They are AmiBlitz3 source code files that are
    included (usually at the beginning) in the source code of a program.
    Unlike BlitzLibs, they are coded in AmiBlitz3 and not in 68K Assembler.
    This makes them debugable, user-expandable and, in the future, maybe
    CPU-retargetable.
    
  BlitzLibs have the followig shortcommings:
  - maximum of 128 tokens (instructions/functions/directives/keywords) per library
  - maximum of 256 libraries installed at the same time
  - fix IDs for libraries (most of them are already in use)
  - coded 100% in Assembler, bad maintainability
  - many BlitzLib source codes are not available and are not maintained anymore
    
  This is why future projects should use Includes to expand the runtime of
  AmiBlitz3.
  Includes are always included on source code level and therefore maintainable.
  There is no limit for the amount of includes or their tokens. 
  Amiga Shared Libraries can be made availabe in AmiBlitz3 programs as Includes,
  like the SDL.library, bsdsocket.library or amissl.library.
    
  @{b}1.3 Comparism AmiBlitz3, C and BASIC@{ub}

  @{b}1.3.1 How does AmiBlitz3 compare to BASIC?@{ub}

  Pros:
  - AmiBlitz3 compiler is insanely fast
  - AmiBlitz3 generates highly optimized 68K code, probably much faster than
    any BASIC dialect does.
  - AmiBlitz3 allows forced variable declaration.
  - huge Runtime Library (BlitzLibs/Includes)
  
  Cons:
  - AmiBlitz3 does not conform to BASIC standards.
    (your BASIC specific knowledge is pretty much useless).
  - AmiBlitz3 is only available for AmigaOS3.x and compatible.

  @{b}1.3.2 How does AmiBlitz3 compare to C/C++?@{ub}

  Pros:
  - AmiBlitz3 compiler is much faster than e.g. GCC.
  - AmiBlitz3 does not use ";" (semicolon) to seperate expressions.
    @{i}Authors' opinion: Generally, the semicolon as an expression delimiter is
          a good idea, but practically it creates unnecessary attention
          the coder has to pay.@{ui}
  - An AmiBlitz3 project is much simplier set up than a C makefile.
    (actually, you just compile the main file)                                            
  - Every source code file can have a build-in demo that is ignored if the
    file is used as an include (#__include compiler constant).
  - Strings are primitive types and as easy to handle as integers.
  - AmiBlitz3 is less complex and higher leveled.
  - Variables can be declared during usage, in 68K ASM style by using 
    a type extension (a.l = 0), no declaration monsters like
    "unsigned static const char * myVar".
  - Variables are initialized, no random bugs due to uninitialized variables.

  Cons:
  - C is widely spread and much more examples and documentation is out there.
  - C is available for almost every OS/CPU.
  - AmiBlitz3 does not support object oriented programming.
  - AmiBlitz3 is not type safe.
  - AmiBlitz3 does not allow forward declaration.
  
@ENDNODE


@NODE whassit "What does it contain ?"

 This archive contains all you need to start developping software with AmiBlitz3.

 In detail the archive contains the following:
    - AmiBlitz3 (the compiler)          @{fg fill}(stored in main drawer)@{fg text}
    - PED (the program editor)          @{fg fill}(stored in system drawer)@{fg text}
    - REDDebugger                       @{fg fill}(stored in debug drawer)@{fg text}

    - latest blitzlibs container files  @{fg fill}(stored in blitzlibs drawer)@{fg text}
    - latest resident files             @{fg fill}(stored in residents drawer)@{fg text}
    - latest includes                   @{fg fill}(stored in includes drawer)@{fg text}
      (Thilo Koehlers powerful includes)

    - AB3Libsmanager                    @{fg fill}(stored in tools drawer)@{fg text}      
    - AB3Helpviewer                     @{fg fill}(stored in tools drawer)@{fg text}
    - AB3AutodocViewer                  @{fg fill}(stored in tools drawer)@{fg text}

    - Documentation                     @{fg fill}(stored in docs drawer)@{fg text}
      + complete and updated documentation for amiblitz-native libs
      + complete and updated documentation of tkincludes

@ENDNODE


@NODE require "Requirements"

 Hardware requirements for AmiBlitz3 are as follows:
    - an Amiga with AmigaOS2.0+ (real, emulated, etc)
    - minimum of 8MB RAM to start the IDE
    - about 12Mb hard drive space (for this full distribution)

 Software requirements @{fg fill}(included)@{fg text}:
    - wizard.library (the IDEs GUI is made using "StormWizard")
    - disassembler.library (only needed when you use the disassembly window in the debugger)
    - ted.library (library that provides editor functions for PED)

 additional Requirements for some includes @{fg fill}(included)@{fg text}:
    - lh.library    (68k, by Holger P. Krekel and Olaf Barthel)
    - zlib.library  (68k, port by Achim Stegemann, email: achim.stegemann@onlinehome.de)
    - jpeg.library  (68k/PPC mixed binary, port by Paul Huxham, email: PaulHuxham@yahoo.com)

@ENDNODE


@NODE install "Installation, languages and uninstallation"

 Installation is very simple. Using the Workbench, drag the whole AmiBlitz3
 main directory to wherever you want to store it on your hard drive.
 You are now ready to use AmiBlitz3.

 AmiBlitz3 does not need special assigns for itself.
 On Startup, AmiBlitz3 generates its assign dynamically and on exit, the assign
 will be removed automatically.

 It also adds a path the the LIBS:-assign, so that you even do not need to
 install any of the includes libraries, as the system searches in the local
 libs-drawer, too.

 You may change the assign via Tooltype.

 The online-help system uses autodocs for help on OS-library functions. If you have
 installed a NDK, you should set the appropriate drawer to the autodocs in PEDs
 @{"Configuration" link CONFIG} dialog.

@ENDNODE


@NODE syntax "Syntax"

 2 @{"Syntax"                       link "Syntax"}
  2.1 @{"Program Flow"               link "ProgramFlow"}
  2.2 @{"Variables"                  link "Variables"}
  2.3 @{"Arrays"                     link "Arrays"}
  2.4 @{"Lists"                      link "Lists"} 
  2.5 @{"Primitive Types"            link "Primitives"}
  2.6 @{"Newtypes"                   link "Structures"}
  2.7 @{"Pointers"                   link "Pointers"}
  2.8 @{"Constants"                  link "Constants"}
  2.9 @{"Functions"                  link "Functions"}
  2.10 @{"Macros"                    link "Macros"}
  2.11 @{"Compiler Directives"       link "Directives"}

 3 @{"AmiBlitz3 Reference"          link "AFunctions"}
  3.1 @{"Build-In Functions"         link "BuildIn"}

 4 @{"68K - Assembler Reference"     link "MC68K"}
@ENDNODE syntax


@NODE SYNTAX "Syntax"
@{b}2 Syntax@{ub}

  An @{b}AmiBlitz3@{ub} program is a sequence of expressions (and definitions/
  compiler directives).
  Two expressions are separated by a new line or by a ":" (colon).

  +-----------------------------------------------------------------------------
  |
  | @{i}expression@{ui}
  | @{i}expression@{ui} : @{i}expression@{ui}
  |
  +-----------------------------------------------------------------------------

  An expression is usually a BlitzLib instruction, @{"variable" link "Variables"} assignment or
  a @{"function" link "Functions"} call.
 
  Example:
  +-----------------------------------------------------------------------------
  |
  | DEFTYPE.s myStringVar
  | myStringVar = "Hello World!" : NPrint a.s
  | End
  |
  +-----------------------------------------------------------------------------

@{b}2.0.1 Comments@{ub}  

  A comment is added by using the ";" (semicolon), and always ends at
  the end of line:
  +-----------------------------------------------------------------------------
  | 
  | @{i}expression@{ui} @{i}; this is a comment@{ui}
  | 
  +-----------------------------------------------------------------------------
  
@{b}2.0.2 Multi-Line Expressions@{ub}  

  An expression can be spanned over multiple lines, if the new line is escaped
  by "@@" (two at-signs):
  +-----------------------------------------------------------------------------
  | 
  | @{i}expression part1@{ui} @@
  | @{i}expression part2@{ui}
  | 
  +-----------------------------------------------------------------------------
  @{i}Note: AmiBlitz3 needs "new syntax mode" enabled by using @{"OPTIMIZE 4" link "Directives"}.@{ui}

@{b}2.0.3 Blocks of Expressions@{ub}  

  The "End @{i}something@{ui}" instruction is used terminate a block of expressions
  that have been grouped together, e.g. if they make up the body of a loop,
  function, or the conditional block of an "If":
  +-----------------------------------------------------------------------------
  | 
  | If @{i}condition@{ui}
  |   @{i}expression@{ui}
  |   @{i}expression@{ui}
  |   ...
  | End If
  | 
  | Function.t @{i}name@{ui}{...}
  |   @{i}expression@{ui}
  |   @{i}expression@{ui}
  |   ...
  | End Function
  |  
  +-----------------------------------------------------------------------------
  @{i}Note: "@{i}condition@{ui}" is an expression that evaluates to a boolean (true/false).@{ui}
  @{i}Note: A single "End" terminates the whole program.@{ui}
  @{i}Note: Some types of blocks (but not all) have a single-token shortcut, e.g.
        "End While" can be written as "Wend", "End If" as "EndIf".@{ui}

  See section @{"2.1 Program Flow" link "ProgramFlow"} for more details.
  
@ENDNODE

@NODE ProgramFlow "Program Flow"
@{b}2.1 Program Flow@{ub}

  The program flow is from top down. The program starts with the first
  expression in the source code and keeps on running until it exits with
  "End".
  An "End" is forced if the execution runs into the void. When the
  debugger is used, this will cause a runtime error.
  Be careful that you program does not run into data sections.

@{b}2.1.1 Labels@{ub}

  +-----------------------------------------------------------------------------
  |
  | ['][.]@{i}label@{ui}[:]
  |
  +-----------------------------------------------------------------------------
  
  A label is specified by stating its name with an optional . (full stop) or '
  (apostrophe) in front. It is a good style to use a seperating ":" (colon)
  after the label, however, it is not necessary. 

  To avoid clashes of label names, a label can be made locally unique by using
  the ' (apostrophe) modifier. The label name will be concatenated with the
  previous label, thus being locally unique.
  
  The leading full stop is used to indicate that the label should be visible
  in the @{"Source Browser" link SOURCEBROWSER} of the IDE for quick access.

  Example:
  +-----------------------------------------------------------------------------
  |
  | John:         @{i}; this is a normal label@{ui}
  |
  | 'Smith:       @{i}; actual label name becomes "JohnSmith"@{ui}
  |
  | .Jack:        @{i}; this is another label, visible in Source browser@{ui}
  |
  | 'Smith:       @{i}; actual label name becomes "JackSmith" and does not clash with@{ui}
  |               @{i}; above 'Smith, thus being locally unique.@{ui}
  |
  +-----------------------------------------------------------------------------

@{b}2.1.2 Goto@{ub}

  +-----------------------------------------------------------------------------
  |
  | Goto @{i}label@{ui}
  |
  +-----------------------------------------------------------------------------
  
  A simple branch is performed. Program execution will continue
  at the position after the label.

  Example:
  +-----------------------------------------------------------------------------
  | 
  | myLabel:
  | 
  | ...
  | 
  | Goto myLabel
  | 
  +-----------------------------------------------------------------------------
  @{i}Note: "Goto" is usually considered as a beginner's programming style and
        theoretically can be always avoided. However, there might be
        situation where a "Goto" is handy and makes life easier.@{ui}

@{b}2.1.3 Gosub/Return@{ub}

  +-----------------------------------------------------------------------------
  |
  | Gosub @{i}label@{ui}
  |
  | Return
  |
  +-----------------------------------------------------------------------------
  
  A branch to a subroutine is performed. Program execution will continue
  at the position of the label, and the address of the calling "Gosub" is
  remembered. When the program execution reaches a "Return", it will jump back
  to the position after the calling Gosub. This is used for subroutines, that
  should be executed in the global context rather than a @{"function" link "Functions"} that uses its
  own, local context.

  Example:
  +-----------------------------------------------------------------------------
  | 
  | ...
  |
  | Gosub mySubRoutine  @{i}; jump to label "mySubRoutine"@{ui}
  |
  | ...
  |
  | End                 @{i}; end of program@{ui}
  |
  |
  | mySubRoutine:
  | 
  | ...                 @{i}; do something ...@{ui}
  | 
  | Return              @{i}; jump back to the calling Gosub@{ui}
  | 
  +-----------------------------------------------------------------------------
  @{i}Note: "Gosub" is usually considered as a beginner's programming style.
        Gosub is sometimes handy but makes your code unmaintainable if the
        project grows. Usage is only recommended in very small, script-like
        applications. Ohterwise, use @{"functions" link "Functions"} instead.@{ui}
        
@{b}2.1.4 If/Then/Else @{ub}

  To make the execution of a block of statements dependent on a condition
  (expression that evaluates to type boolean), use "If":

  +-----------------------------------------------------------------------------
  |
  | If @{i}condition@{ui} : ... : End If
  |
  | If @{i}condition@{ui} Then ...
  |
  +-----------------------------------------------------------------------------

  The code in the "If" block is only executed, if the condition evaluates to
  true. If the condition is not the result of an comparator, e.g. a number,
  anything else than a 0 (zero) is interpreted as true, while the 0 is
  interpreted as false. In case of strings, all strings are true, except the
  empty string is interpreted as false.
  
  The "End If" is only needed, if the block spans over multiple lines.
  Otherwise they can be omitted and a "Then" is used. All expressions in the
  same line belong then to the conditional block.

  Example:
  +-----------------------------------------------------------------------------
  | 
  | If a=0 Then a=1 : Print "Hello!" @{i}; single line If-block@{ui}
  |  
  | If a=0                           @{i}; multi line If-block@{ui}
  |   a=1
  |   Print "Hello!"
  | End If
  | 
  +-----------------------------------------------------------------------------

  For every "If", you can define an alternative "Else" block:

  +-----------------------------------------------------------------------------
  |
  | If @{i}condition@{ui} : ... : Else : ... : End If
  |
  | If @{i}condition@{ui} Then ... : Else ... 
  |
  +-----------------------------------------------------------------------------

  Same rules for multilines apply for the "Else" block.

  Example:
  +-----------------------------------------------------------------------------
  | 
  | If a=0 Then a=1 : Print "Hello!" : Else a=0 : Print "Blabla."
  |  
  | If a=0 
  |   a=1
  |   Print "Hello!"
  | Else
  |   a=0
  |   Print "Blabla."
  | End If
  | 
  +-----------------------------------------------------------------------------

@{b}2.1.5 While/Wend@{ub}

  +-----------------------------------------------------------------------------
  |
  | While @{i}condition@{ui} : ... : Wend
  |
  +-----------------------------------------------------------------------------

  This executes a block of expressions, while the @{i}condition@{ui} evaluates
  to true. Same rules as for the "If" condition apply for numeric or string
  values.

  Example:
  +-----------------------------------------------------------------------------
  | 
  | While a>0
  |   a=a-1 
  |   Print "Hello!"
  | Wend
  | 
  +-----------------------------------------------------------------------------

@{b}2.1.6 Repeat/Until@{ub}

  +-----------------------------------------------------------------------------
  |
  | Repeat : ... : Until @{i}condition@{ui}
  |
  +-----------------------------------------------------------------------------

  This is the same like a while loop, only that the @{i}condition@{ui} is tested
  at the end of the block in contrast to the beginning of the block. Thus, the
  block is always executed at least once.

  Example:
  +-----------------------------------------------------------------------------
  | 
  | Repeat 
  |   a=a-1
  |   Print "Hello!"
  | Until a<=0
  | 
  +-----------------------------------------------------------------------------

@{b}2.1.7 For/Next/Step@{ub}

  +-----------------------------------------------------------------------------
  |
  | For @{i}var=a@{ui} To @{i}b@{ui} [Step @{i}increment@{ui}] : ... : Next 
  |
  +-----------------------------------------------------------------------------

  A "For" loop is a loop that sets a counter variable to an initial value @{i}a@{ui},
  executes a block of expressions and then de/increments the counter until it
  reaches the "To" value @{i}b@{ui}.
  @{i}increment@{ui} is the value added to the counter variable for each step,
  and is 1 if omitted. @{i}increment@{ui} may also be negative for reverse loops.
  
  Examples:
  +-----------------------------------------------------------------------------
  |
  | For n=a To b : ... : Next        @{i}; n is incremented by 1 for each cycle@{ui}
  | For n=a To b Step c : ... : Next @{i}; n is incremented by c for each cycle@{ui}
  |
  +-----------------------------------------------------------------------------
  
  A real example (output the first 100 positive integer numbers):
  +-----------------------------------------------------------------------------
  |
  | For n.l=1 To 100 
  |   NPrint n
  | Next
  |
  +-----------------------------------------------------------------------------

@{b}2.1.8 Select/Case@{ub}

  "Select" is selecting a "Case" block for execution that matches a previously
  given value. If none of the "Case" blocks matches the value, the optional
  "Default" block is exectued.
  
  +-----------------------------------------------------------------------------
  | 
  | Select @{i}value@{ui}
  |   Case @{i}alternative1@{ui}
  |     ...
  |   Case @{i}alternative2@{ui}
  |     ...
  |   ...
  |   Default 
  |     ...
  | End Select
  | 
  +-----------------------------------------------------------------------------

  The Select/Case construct should be prefered over a cascade of "If" block, if
  a value is checked against more than one alternative.
  
  Example:
  +-----------------------------------------------------------------------------
  | 
  | Select a.l
  |   Case 1   : NPrint "Value is 1"
  |   Case 2   : NPrint "Value is 2"
  |   Default  : NPrint "Value is something else..."
  | End Select
  | 
  +-----------------------------------------------------------------------------
  @{i}Note: Unlike C "switch", no "break" is needed after each block.@{ui}

@{b}2.1.9 End/initbasic@{ub}

  +-----------------------------------------------------------------------------
  | 
  | End
  | 
  +-----------------------------------------------------------------------------

  "End" frees all resources (that AmiBlitz3 is aware of...) and terminates
  the program. All programs, including libraries, must have this function as the
  last instruction.

  +-----------------------------------------------------------------------------
  | 
  | initbasic
  | 
  +-----------------------------------------------------------------------------

  "initbasic" will move the initialization code of @{b}AmiBlitz3@{ub} to this line.
  It is not allowed to execute any @{b}AmiBlitz3@{ub} code before this function is called,
  *if* it is called.
  If there is no initbasic, this will be done before the first line of source code.
  "initbasic" should be called only once or never! This is for advanced
  programming only.

@ENDNODE

@NODE Variables "Variables"
@{b}2.2 Variables@{ub}

  @{b}Variables@{ub} are "containers" that hold data (like numbers or strings) that can
  be addressed by the variables name. To specify the @{"type of the data" link "Primitives"},
  a variable is usually "declared" before it is used. During the lifetime of the
  variable, it cannot change its type.
    
  The most formal way to declare a variable is explicitly by using the "DEFTYPE"
  compiler directive and always use the type extension when the variable
  is used.

  +-----------------------------------------------------------------------------
  | 
  | DEFTYPE.t @{i}name@{ui}, ...       ; declare variable @{i}name@{ui} as type .t
  | @{i}name@{ui}.t = @{i}expression@{ui}       ; assign the result of the expression to @{i}name@{ui}
  | 
  +-----------------------------------------------------------------------------
  @{i}Note: See section @{"2.5 Primitive Types" link "Primitives"} and @{"2.6 Newtypes" link "Structures"} for more information
        and possible types.@{ui}
  @{i}Note: See section @{"2.8 Constants" link "Constants"} how to write constant expressions such as
        numbers or strings.@{ui}

  Using the same variable name with different type extentions will lead to a
  type-missmatch compiler error.
  Variable names are case sensitive and can contain the character a-z, A-Z,
  0-9 and "_" (under score), but are not allowed to start with a number.
  Variables are always initialized to zero or empty string, depending on the
  type. 
  There are three strictness settings that influence the declaration of
  variables. The compiler directive is called "SYNTAX n", were "n" can be
  0 (default), 1 or 2.
    
@{b}2.2.1 SYNTAX 0 (loose, default)@{ub}

  Variables don't have to be explicitly declared. Their type can be specified
  during their first usage by mentioning the type extension. If they are used
  the first time without a type extension, they get the default type.
  The default type can be changed by using the compiler directive "DEFTYPE.t" 
  without declaring a variable. Per default, the default type is Quick (.q).

  Example:
  +-----------------------------------------------------------------------------
  |
  | a = 5.5             @{i}; a is now type Quick (.q) and has the value 5.5@{ui}
  | DEFTYPE.l           @{i}; set the default type to Long (.l)@{ui}
  | b = 6               @{i}; b is now of type Long and has the value 6 @{ui}
  | c.q = 1             @{i}; c is now of type Quick and has the value 1@{ui}
  | 
  +-----------------------------------------------------------------------------
  @{i}Note: This syntax mode is traditionally used in BASIC dialects. However,
        this is very unsafe if you plan a medium or large project. You can
        easily introduce errors by typos that occure during runtime, and not
        already at compile time.@{ui}
        
@{b}2.2.2 SYNTAX 1 (strict)@{ub}

  All variables have to be declared and the type extension has always to be
  mentioned.
  @{i}Note: This syntax mode is similar to Pascal. It is very safe against
        typos, but creates significant overhead and can be anoying.@{ui}

@{b}2.2.3 SYNTAX 2 (medium, recommended)@{ub}

  Variables don't have to be explicitly declared, but their type has be specified
  at least by mentioning their type extension on first usage.
  On later usage, the extension is optional.
  
  Example:
  +-----------------------------------------------------------------------------
  | 
  | SYNTAX 2
  | DEFTYPE.l a, b, c   @{i}; declare a, b and c as type Long (and set to 0)@{ui}
  | d.l = 1             @{i}; declare d as type Long   and set it to 1@{ui}
  | e.f = 1.0           @{i}; declare e as type Float  and set it to 1@{ui}
  | f.s = "test"        @{i}; declare f as type String and set it to "test"@{ui}
  | g   = 5             @{i}; this will throw a compiler error, because g is not
  |                       explicitly declared and no type is mentioned.@{ui}
  | a.f = 5             @{i}; this will throw a compiler error, because a is 
  |                       already declared as type Long (.l)@{ui}
  +-----------------------------------------------------------------------------
  @{i}Note: Don't mix the "Syntax" directive up with the so called
  "new syntax mode", which is enabled by the @{"OPTIMIZE 4" link "Directives"} directive.@{ui}

@{b}2.2.4 Assignment Shortcut@{ub}

  As a shortcut, the assign operator "=" can be ommited if the first operand is
  also the variable to assign the result to. 

  Example:
  +-----------------------------------------------------------------------------
  |
  | a = a+1   @{i}; normal writing@{ui}
  | a + 1     @{i}; this does the same, it's a short cut@{ui}
  |
  | a = a/2+5 @{i}; normal writing@{ui}
  | a / 2+5   @{i}; short cut@{ui}
  |
  +-----------------------------------------------------------------------------
  @{i}Note: Unlike "a /= 2+5" in C/C++, "a / 2+5" would first devide though 2 and
        then add 5 (respecting common mathematical precedence).@{ui}

@{b}2.2.5 Global vs. Local Variables@{ub}
     
  Variables that are declared in the global context (outside of a
  Function/Statement) are global and have a lifetime that equals to the runtime
  of the program.
  Variables that are declared in a local context (inside a Function/Statement)
  are local and have a lifetime that starts and ends with the local context.

  By default, global variables are not reachable within local contexts. To
  "import" a global variable into a local context, the "SHARED" directive is
  used. If this is done inside a local context, the import is valid only for
  this specific context. If SHARED is used in global context, the variable is
  imported implicitly to every local context.

  Example:
  +-----------------------------------------------------------------------------
  |
  | DEFTYPE.l a  @{i}; declare a global variable@{ui}
  | SHARED b.l   @{i}; declare a global variable that is reachable in all functions@{ui}
  | 
  | Function.l test{}
  | SHARED a     @{i}; a needs to be "SHARED"@{ui}
  | c.l = a + b
  | Function Return c
  | End Function
  |
  +-----------------------------------------------------------------------------
  @{i}Note: "a" and "b" are both global variables. "a" needs to be explicitly
        imported, while "b" is imported automatically. "c" is a local variable
        that is not available in global context and its lifetime ends when the
        function exits.@{ui}
  @{i}Note: The global usage of SHARED needs new syntax mode (@{"OPTIMIZE 4" link "Directives"}) to
        be switched on.@{ui}
    
@ENDNODE

@NODE Arrays "Arrays"
@{b}2.3 Arrays@{ub}

  @{b}Arrays@{ub} of variables are declared by using the "Dim" instruction and
  stating the number of elements in round brackets:
  +-----------------------------------------------------------------------------
  | 
  | Dim [KEEP] @{i}name@{ui}.t(@{i}n@{ui})
  |
  +-----------------------------------------------------------------------------

  @{i}name@{ui} is an array of @{i}n@{ui} elements of type .t, starting from index 0
  to @{i}#elements@{ui}-1.
  Same as single variables, all array elements are initialized to zero.
  The keyword "KEEP" is optional and used if the array already exists and the
  content should be kept (only new elements are initialized to zero).
  If the array is down-sized however, data might get lost.
  
  An element is indexed by:
  +-----------------------------------------------------------------------------
  | 
  | @{i}name@{ui}.t(@{i}index@{ui})
  | 
  +-----------------------------------------------------------------------------
  @{i}Note: Negative indices are not allowed. The index must be smaller
        than #elements.@{ui}

  Any array can be "re-dimmed" any time by calling "Dim KEEP @{i}name.t@{ui} (@{i}n@{ui})".

  Example:
  +-----------------------------------------------------------------------------
  | 
  | Dim Race.s(5)        @{i}; declare an array of strings called "Race"@{ui}
  |
  | Race(0) = "Human"    @{i}; fill the elements of the array@{ui}
  | Race(1) = "Elve"
  | Race(2) = "Dwarf" 
  | Race(3) = "Ork"
  | Race(4) = "Halfling"
  |
  | For n.l=0 To 4 
  |   NPrint Race(n)     @{i}; print out all 5 race names@{ui}
  | Next
  | 
  +-----------------------------------------------------------------------------
  @{i}Note: The last element is 4, since we have 5 elements, from 0..4.
        Using 5 or higher as index would cause a runtime error!@{ui}

  Arrays (with some restrictions) can be also part of a newtype. See @{"2.6 Newtypes" link "Structures"}
  for details.
	
@{b}2.3.1 Multi-Dimensional Arrays@{ub}

  Arrays can be multi-dimensional. The dimensions are seperated by "," (comma).

  Example:
  +-----------------------------------------------------------------------------
  | 
  | Dim Matrix.l(10,10)  ; define a 10x10 matrix of long intergers
  | 
  | Matrix(0,0) = 1
  | Matrix(4,2) = 4
  |
  | For x.l=0 To 9 
  |   For y.l=0 To 9 
  |     NPrint Matrix(x,y)  @{i}; print out all elements of the matrix@{ui}
  |   Next
  | Next
  | 
  +-----------------------------------------------------------------------------
  @{i}Note: Be careful with multi-dimensional arrays. They can quickly eat up
        a lot of memory. E.g. Dim x.l(100,100,100) would alread eat up 4MB!@{ui}
  
@ENDNODE

@NODE Lists "Lists"
@{b}2.4 Lists@{ub}

  Lists contain items (elements) of a certain data type, similar to arrays. But
  in contrast to arrays, they are not addressed by indices. One of the items
  in the list is the current one that can be accessed at the moment. To access
  the other items, you can move forward or backwards in the list by the
  functions "NextItem" and "PrevItem". Once you seek over the boundaries, those
  functions return false and there is no valid current list item until you
  start from the beginning of the list or seek in the other direction again.
  
  The benefit of lists over arrays is that you can easily add or remove
  items with a minimum overhead and without bookkeeping which element is
  currently used. Lists are ideal for objects in a game, which often appear
  and disapear and all of them have to be processed every frame.

  @{b}Lists@{ub} are declared by using "List" and the "Dim" instruction:
  +-----------------------------------------------------------------------------
  | 
  | Dim List @{i}name@{ui}.t(n)
  | 
  +-----------------------------------------------------------------------------

  @{i}name@{ui} is now an empty list of type .t, with maximum of n items.
  The list is referred by using the round brackets without index.
  Items are handled by the following functions:
  +-----------------------------------------------------------------------------
  | 
  | AddItem(@{i}name@{ui}())           @{i}; add a new item at the current position and@{ui}
  |                           @{i}; make it the current item@{ui}
  | KillItem @{i}name@{ui}()           @{i}; remove the current item from the list@{ui}
  | NextItem(@{i}name@{ui}())          @{i}; seek to the next item@{ui}
  | PrevItem(@{i}name@{ui}())          @{i}; seek to the previous item@{ui}
  | ResetList @{i}name@{ui}()          @{i}; seek before the first item@{ui}
  | FirstItem(@{i}name@{ui}())         @{i}; seek to the first item@{ui}
  | LastItem(@{i}name@{ui}())          @{i}; seek to the last item@{ui}
  | ClearList @{i}name@{ui}()          @{i}; remove all items from list@{ui}
  | SortList(@{i}name@{ui}()[,@{i}field@{ui}])  @{i}; sort the list according the field name,@{ui}
  |                           @{i}; if it is a newtype@{ui}
  | PushItem @{i}name@{ui}()           @{i}; push the current position to stack@{ui}
  | PopItem @{i}name@{ui}()            @{i}; pop the current position from stack@{ui}
  |
  +-----------------------------------------------------------------------------

  Example:
  +-----------------------------------------------------------------------------
  | 
  | Dim List Race.s(5)           @{i}; declare a list of strings called Race@{ui}
  | 
  | If AddItem(Race()) Then Race() = "Human"
  | If AddItem(Race()) Then Race() = "Elve"
  | IF AddItem(Race()) Then Race() = "Dwarf"
  | 
  | ResetList Race()             @{i}; go before the first item@{ui}
  | While NextItem(Race())       @{i}; print out all items@{ui}
  |   NPrint Race()
  | Wend
  | 
  | ClearList Race()             @{i}; remove all items@{ui}
  |
  +-----------------------------------------------------------------------------

@{b}2.4.1 Dynamic Lists@{ub}

  If a List is declared with a "maximum" of 0 elements, its size is dynamic and
  only limited by the memory of the machine.

  This feature is available only for Kick2.0+ the moment.

@{b}2.4 Seek Recursively Through Lists@{ub}
  
  Let us imagine you have the following situation:
  You seek through a list and process a certain item. Now you have to call a
  subroutine (function or gosub) that needs to seek through the same list too.
  After returning from the subroutine, the current list item would be probably
  not the one you were processing.
  To solve this problem, every list has a "stack". You can push your current
  item on this stack (well actually a pointer to it), and pop it from stack
  again once the subroutine returns. You can then continue processing this item
  or seeking through the list from that position.
  
@ENDNODE

@NODE Primitives "Primitive Types"
@{b}2.5 Primitive Types@{ub}

  AmiBlitz3 knows the following primitive types:

  Name          | Extension | Size   | Value Range
  --------------+-----------+--------+---------------------------------------
  Byte          |       .b  |  8 bit | -128...+127
  Word          |       .w  | 16 bit | -32768...+32767
  Long          |       .l  | 32 bit | -2^31...+2^31-1
  Quick         |       .q  | 32 bit | -32768...+32767 (16.16 bit fix point)
  Float         |       .f  | 32 bit | quite large
  Double Float  |       .d  | 64 bit | even larger
  String        |     .s/$  | 32 bit | character string from 0-2^31-1 length
                |           | +64+(n+1)*8 bit
  Pointer       | *         | 32 bit | 0...2^31-1

  The AmiBlitz3 compiler will throw an error if the types within an
  expression don't match and can't be casted easily.

@{b}2.5.1 Byte (.b)@{ub}
  
  The type Byte is a signed 8 bit integer.

@{b}2.5.2 Word (.w)@{ub}
  
  The type Word is a signed 16 bit integer.
  
@{b}2.5.3 Long (.l)@{ub}
  
  The type Long is a signed 32 bit integer.
  
@{b}2.5.4 Quick (.q)@{ub}
  
  The type Quick is a signed, 16.16 bit fix point. That means, the upper
  16bit are used for the (signed) integer value, and the lower 16 bit are
  used for the fractional part.
  This type is a relict from BlitzBasic for machines that have no floating point
  unit. It is called "Quick" because it is quicker than a software-emulated
  floating point. The accuracy and the value range is pretty low, but well
  enough for coordinates of objects on the screen.
  If you use hardware FPU support however (see @{"OPTIMIZE 2" link "Directives"}), floats are much
  faster than Quicks.
  
  Quick is the default type in @{"SYNTAX 0" link "Variables"} variable declaration strictness level.

@{b}2.5.5 Float (.f)@{ub}
  
  The type Float is a signed 32 bit floating point. One bit for the sign, 23 bit
  for the mantissa and 8 bit for the exponent.
  
  Floats are calculated either by software emulation (slow) or by a
  hardware FPU. Which implementation is used will be defined during compile time
  using the @{"OPTIMIZE 2" link "Directives"} directive.
  
  @{i}Note: If you compile your program with "OPTIMIZE 2", it will require
        an FPU to run.@{ui}  

  @{i}Note: If you switch between software/hardware floats within a program,
        the float variables are not compatible, since the softfloat emulation
        uses a different format to store the value. You need to pass their
        value through a string or write a converter routine.@{ui}  

@{b}2.5.6 Double Float (.d)@{ub}

  The type Double Float is a signed 64 bit floating point. One bit for the sign,
  52 bit for the mantissa and 11 bit for the exponent.

  This type has a very high accuracy and value range. It is only available if 
  hardware FPU support is switched on using the @{"OPTIMIZE 2" link "Directives"} directive.
  There is no software emulation build in.

@{b}2.5.7 String (.s or $)@{ub}

  The type String is a variable sized, 0-terminated byte array.
  A string can contain any byte value, including the 0-byte. The acutal
  length and the length of the buffer is seperately stored.
  
  Usually, the length of the buffer is increased/decreased automatically wihtout
  the programmers notice. But in certain situations, it is handy to set it
  explicitly via:
  +-----------------------------------------------------------------------------
  | 
  | Maxlen string.s = n      @{i}; the the strings buffer to n bytes.@{ui}
  | 
  +-----------------------------------------------------------------------------

  The length of a string is practially only limited by the global temporary
  string buffer that is used during string operations to compose a result
  string. The size of this buffer is set in the compiler settings of the IDE.
  
  The extention .s of a string can also be written in the traditional BASIC
  style using a $. In that case, the $ become also part of the variable name and
  must always be written.

@{b}2.5.8 Pointer (*)@{ub}
  
  See @{"2.7 Pointers" link "Pointers"} for more information.
  
@ENDNODE

@NODE Structures "Newtypes"
@{b}2.6 Newtypes (Complex Types)@{ub}

  @{b}Newtypes@{ub} are compositions of primitive and/or other Newtypes. In
  other literatur you might find them as "structures" or "complex types".
  
  They are defined using the "NEWTYPE" keyword and listing the field with name
  and type:
  +-----------------------------------------------------------------------------
  | 
  | NEWTYPE @{i}name@{ui} 
  |   @{i}varname@{ui}.t
  |   ...
  | End NEWTYPE
  | 
  +-----------------------------------------------------------------------------

  A field in the type is addressed by using "\\" (back slash):
  +-----------------------------------------------------------------------------
  | 
  | NEWTYPE myType
  |   x.f
  |   y.f
  | End NEWTYPE
  |
  | DEFTYPE.myType test
  | test\\x = 1
  | test\\y = 2
  | NPrint "x is ",test\\x," and y is ",test\\y
  | 
  +-----------------------------------------------------------------------------

  If a field is written without type, it "inherits" the type from the previous
  field. The first field needs to have a type explicitly mentioned.
  
@{b}2.6.1 Multi Assignments@{ub}

  When assigning values, multiple fields can be filled at once by starting with
  one field and give several values separated by commas. Be careful that the
  order you specify the values is exactly matching the order of the fields in
  the Newtype. This is a potential source for bugs, e.g. when the Newtype is
  reordered.

  Example:
  +-----------------------------------------------------------------------------
  | 
  | NEWTYPE myType
  |   x.f : y
  | End NEWTYPE
  |
  | DEFTYPE.myType test
  | test\\x = 1,2
  | 
  +-----------------------------------------------------------------------------
  @{i}Note: "y" is of type float, because the previous field "x" is of type float.@{ui}
  @{i}Note: Like expressions, the multiple fields can be in the same line,
        seperated by a ":" (colon).@{ui}  
  
@{b}2.6.2 Arrays in Newtypes@{ub}

  Newtypes can contain one-dimensional arrays. In contrast to normal arrays,
  they are written using square brackets.
  +-----------------------------------------------------------------------------
  | 
  | NEWTYPE myType
  |   x.f[10]
  | End NEWTYPE
  |
  | DEFTYPE.myType test
  | test\\x[0] = 1
  | test\\x[1] = 2
  |  
  | NPrint test\\x[0]
  | 
  +-----------------------------------------------------------------------------
  
@ENDNODE

@NODE Pointers "Pointers"
@{b}2.7 Pointers@{ub}

  A pointer stores a memory address. Technically, on 32bit machines, this is a
  32bit value.
  To declare a pointer variable to a certain type instead of the type
  itself, the "*" (asterix) sign will be put in front and becomes part
  of the name, thus has always to be written.
  If the content of the pointer is addressed, it needs to be dereferred by
  accessing the fields in the Newtype the pointer is pointing to.
  Primitive types cannot access their values, only via the Peek.t() function.  

  Example:
  +-----------------------------------------------------------------------------
  | 
  | *myPointer.l = 0     @{i}; declare *myPointer and let it point to address 0@{ui}
  | 
  | *myPointer = 12345   @{i}; this would change the pointer to point to 12345@{ui}
  |                      @{i}; (which is a bad idea, actually)@{ui}
  |  
  +-----------------------------------------------------------------------------
  
@{b}2.7.1 Dereferencing a Pointer@{ub}

  To get the content a pointer points to, the type must be a newtype. It is
  dereferenced by accessing the fields in the newtype, just as if it was a
  "real" newtype rather than a pointer.
  Pointers to primitve types cannot be dereferenced. You need the function
  "Peek.t" to access the content.
  
  Example:
  +-----------------------------------------------------------------------------
  | 
  | NEWTYPE.t
  |   x.l
  | End NEWTYPE
  |
  | DEFTYPE.l dummy
  | *myNewtype.t = &dummy.l @{i}; let *myNewtype point to the content of dummy@{ui}
  | *myNewtype\\x = 12345    @{i}; this will set the content of *myNewtype\\x to@{ui}
  |                         @{i}; 12345.@{ui}
  |                         @{i}; Note: because it points to the content of dummy,@{ui}
  |                         @{i}; dummy is changed too!@{ui}
  | 
  | *myLong.l = &dummy.l    @{i}; let *myLong point to the content of dummy@{ui}
  |                         @{i}; there is actually no way to access the content.@{ui}
  | y.l = Peek.l(*myLong)   @{i}; ...unless you use Peek.t()@{ui}
  | Poke.l *myLong,12345    @{i}; ...and Poke.t@{ui}
  |
  +-----------------------------------------------------------------------------  
  @{i}Note: See next subsection what the "&" is doing!@{ui}
  
@{b}2.7.2 Referencing a Variable@{ub}
 
  To get a pointer to a variable use "&" (ampersand) in front of its name.

  Example:
  +-----------------------------------------------------------------------------
  | 
  | DEFTYPE.l dummy  
  | *myLong.l = &dummy.l  @{i}; let *myLong point to the content of dummy@{ui}
  | 
  +-----------------------------------------------------------------------------

  Warning: Be careful with pointers. This is for advanced programming.
  Because AmigaOS has no memory protection, you can crash your machine easily
  if the pointer points to a wrong/orphaned place.
  
@ENDNODE

@NODE Constants "Constants"
@{b}2.8 Constants@{ub}

  Constants and literals exist only for primitive types. Depending on the type,
  they are written in different ways.
  If the type is ambiguous, e.g. Word, Long or Float, the type will be
  determined by choosing the best fitting type within the expression. If the
  type cannot be intuitively casted, the compiler will throw a type-missmatch
  error.
  
@{b}2.8.1 Boolean Literals@{ub}

  Symbol             | Description
  -------------------+----------------------------------------------------------
  True               | @{i}logical true@{ui}
  False              | @{i}logical false@{ui}
  On                 | @{i}same like True@{ui}
  Off                | @{i}same like False@{ui}
  -1 or 0            | @{i}the above values written as numbers@{ui}

  @{i}Note: AmiBlitz3 does not really know booleans, a boolean is an integer
        value of either -1 (true, all bits set) or 0 (false, all bits cleared).@{ui}
  
@{b}2.8.2 Integer Literals (Byte, Word, Long)@{ub}

  Symbol             | Description
  -------------------+----------------------------------------------------------
  65                 | @{i}decimal for "65"@{ui}
  $41                | @{i}hexadecimal for "65"@{ui}
  %10001             | @{i}binary for "65"@{ui}
  @"A"               | @{i}ASCII for "65", newsyntax mode required@{ui}
  
@{b}2.8.3 Float Literals (Quick, Float or Double Float)@{ub}
  
  Float constants can be written as integers and will be casted.
  If the fractional part is needed, they are written as decimal numbers with a
  "." (full stop) to seperate the integer from fractional part.
  
  Symbol             | Description
  -------------------+----------------------------------------------------------
  65.0               | @{i}fractal number@{ui}
  0.1                | @{i}fractal number with leading 0@{ui}
  .1                 | @{i}fractal number without leading 0@{ui}

@{b}2.8.4 String Literals@{ub}

  Strings are written in double quotes. They use 8bit for each character.
  
  Symbol             | Description
  -------------------+----------------------------------------------------------
  "A"                | @{i}string of length 1@{ui}
  "Hello World!"     | @{i}string of length 12@{ui}

@{b}2.8.5 Pre-defined Constants@{ub}

  Symbol             | Description
  -------------------+----------------------------------------------------------
  True               | @{i}logic true,  equals to -1@{ui}
  False              | @{i}logic false, equals to  0@{ui}
  On                 | @{i}logic true,  equals to -1@{ui}
  Off                | @{i}logic false, equals to  0@{ui}
  Pi                 | @{i}3.1415926535@{ui}
                     | @{i}require @{"OPTIMIZE 4" link "Directives"}:@{ui}
  #__include         | @{i}0 if main source, -1 if included@{ui}
  #__autoconstantnum | @{i}value of the next auto-increment constant (read/write)@{ui}
  #__debug           | @{i}-1 if debugger is on, 0 if debugger is off@{ui}
  @#constant         | @{i}-1 if the user constant "constant" was defined earlier,@{ui}
                     | @{i}0 if undefined@{ui}

@{b}2.8.6 User Defined Constants@{ub}

  The user can define own constants. They are always of type long and must have
  a leading "#" (hash).

  Example:
  +-----------------------------------------------------------------------------
  | 
  | #myConstant = 1234     @{i}; define a user constant@{ui}
  |
  | NPrint #myConstant + 1 @{i}; this outputs 1235@{ui}
  |
  +-----------------------------------------------------------------------------

@{b}2.8.7 Escape Sequences@{ub}
  
  For use within string literals, the following escape sequences are defined:

  Symbol              | Description    
  --------------------+---------------------------------------------------------
  \\\\n                 | @{i}new line (ASCII #10)@{ui}
  \\\\@{i}<hex>@{ui}             | @{i}any character given by 2 digit hex value,@{ui}
                      | @{i}e.g. \\\\40 for "@"@{ui}
  \\\\r<nn><b>          | @{i}repeat the byte b for n times, while n is a two digit decimal number@{ui}
                      |
  \\\\__CODELINE        | @{i}number of the current code line in sourc code@{ui}
  \\\\__DATE__          | @{i}compile date in US format (mm/dd/yyyy)@{ui}
  \\\\__DATE_GER__      | @{i}compile date in German format (dd.mm.yyy)@{ui}
  \\\\__VER_MAJOR       | @{i}major verion number (from project settings)@{ui}
  \\\\__VER_MINOR       | @{i}minor verion number (from project settings)@{ui}
  \\\\__VER_PATCH       | @{i}patch number (from project settings)@{ui}
  \\\\__VER_BUILD       | @{i}build number (auto-incremental)@{ui}
  \\\\__THIS_FUNCTION   | @{i}name of the current function or "GLOBAL"@{ui}
  \\\\__THIS_INCLUDE    | @{i}name of the current include file@{ui}
  \\\\__THIS_POINTER    | @{i}hex pointer of the current function@{ui}

@{b}2.8.8 Examples@{ub}
  
  +-----------------------------------------------------------------------------
  |
  | #myConst    = 12345   
  |
  | myBool.b    = True
  | myFloat.f   = 2*Pi
  | myString.s  = "Hello World!"
  | myInt1.l    = 12345
  | myInt2.l    = $BEEF
  | myInt3.l    = %101110101011
  | myInt4.l    = @"ILBM"
  | myInt5.l    = #myConst
  |
  | version.s   = "$VER: MyProggy V\\\\__VER_MAJOR.\\\\__VER_MINOR (\\\\__DATE__)\\\\n"
  | 
  +-----------------------------------------------------------------------------

@ENDNODE

@NODE Functions "Functions"
@{b}2.9 Functions@{ub}

  A function is @{b}defined@{ub} as follows:
  +-----------------------------------------------------------------------------
  | 
  | Function.t [FAST] @{i}name@{ui} {@{i}param@{ui}.t, ...}
  |   Function Return @{i}value@{ui}
  | End Function
  |
  | Statement [FAST] @{i}name@{ui} {@{i}param@{ui}.t, ...} 
  | End Statement
  | 
  +-----------------------------------------------------------------------------
  
  Function/Statement: keyword to indicate we are defining a function
  @{i}FAST@{ui}          : optional modifier
  @{i}name@{ui}          : function's name
  .t                     : type extension
  @{i}value@{ui}         : expression we want to return
  @{i}param@{ui}.t, ...  : list of parameters, can be none up to 10

  Example:
  +-----------------------------------------------------------------------------
  | 
  | Function.f AddTwoFloats{a.f, b.f}
  |   result.f = a + b
  |   Function Return result
  | End Function
  | 
  | Statement PrintLine{text.s}
  |   Print text.s,"\\\\n"
  | End Statement
  |
  +-----------------------------------------------------------------------------

@{b}2.9.1 Statements@{ub}

  If the function has no return value, the keyword "Statement" is used instead
  of "Function". There is no need for a "Statement Return", unless the function
  should be exited earlier than the "End Statement".

@{b}2.9.2 Optional Parameters@{ub}

  A function can have @{b}optional parameters@{ub}. The optional parameters
  are declared by using the "@" (at sign). Once a parameter is optional,
  all following parameters must be optional too.
  Optional parameters that are omitted will be filled with the default value -1
  if they are numeric (integers and floats), and the empty string if they are
  strings.

  Example:
  +-----------------------------------------------------------------------------
  | 
  | Function.l AddLongs{a.l, @b.l, @c.l}
  |   Function Return a+b+c
  | End Function
  |
  | Function.l ConcatStrings{a.s, @b.s, @c.s}
  |   Function Return a+b+c
  | End Function
  |
  | Print AddLongs{3,2}                  @{i}; this would output "4" (yes, "4")@{ui}
  | Print ConcatStrings{"Hello","World"} @{i}; this would output "HelloWorld"@{ui}  
  |  
  +-----------------------------------------------------------------------------
  
  There is no possibility to overload a function.
  
@{b}2.9.3 FAST Modifier@{ub}

  The FAST modifier directive removes the init code of variables from the
  function.
  The following restrictions apply:
  - All local variables must be initialized manually.
  - Strings, arrays and newtypes are not allowed anymore.
  Therefore, the calling overhead of the function is reduced to a minimum.
  This makes sense for short and high frequently called functions.

@ENDNODE

@NODE Macros "Macros"
@{b}2.10 Macros@{ub}

  A macro is a definition of text that is inserted during compilation time
  whenever the name of the macro is stated. In AmiBlitz3, they are defined
  by the "MACRO" Compiler directive and and referred by using a
  leading "!" (exclamation mark).
  A macro can have parameters, they are reference by `n (Back Quote + param#)
  within the macro.
 
  +-----------------------------------------------------------------------------
  | 
  | MACRO myIntConst    :             5 : End MACRO
  | MACRO myFloatConst  :           5.4 : End MACRO
  | MACRO myStringConst :        "Test" : End MACRO
  | MACRO myFuncMacro   : ((`1) * (`2)) : End MACRO
  | 
  | Print !myStringConst,!myFuncMacro{2,3}
  |  
  | @{i}; The compiler would see: Print "Test",((2) * (3))@{ui}
  | 
  +-----------------------------------------------------------------------------
  @{i}Note: The Print would output "Test6".@{ui}

  A disadvantage of Macros is, that they are typeless.
  Mismatching types are determined AFTER the macro is applied, which makes
  debugging harder.

  Useful macros found in all.res:
  
  Symbol         | Description
  ---------------+--------------------------------------------------------------
  !version       | version string

  Useful macros found in "useful.include.ab3"

  Symbol         | Description
  ---------------+--------------------------------------------------------------
  !_NULL         | 0, Null pointer to make source more readable  
  !_ASSERT{x}    | terminates the program with an error message if x is false/0
  
@ENDNODE

@NODE Directives "Compiler Directives"
@{b}2.11 Compiler Directives@{ub}

  A compiler directive is a keyword in the source code that influences the
  compiling process, rather than an expression that generates executable code.
  Compiler directives are mostly uppercased to identify them easily.

  Keyword          | Description
  -----------------+------------------------------------------------------------
  OPTIMIZE n       | control the compiler optimization/syntaxmode
                   | "or" (logical) the following numbers:
                   | 1 : 68020 optimizer
                   | 2 : use FPU
                   | 4 : new syntax mode enabled
                   | Example: @{fg fill}OPTIMIZE 7@{fg text} -> turns on all three modes
                   |
                   | Note: in DEBUG-mode of the compiler the FPU is always deactivated
                   |       some trigonomitrical fpu instructions (fsin, fasin, fsinh, etc.) 
                   |       that the optimizer uses have to be emulated in some processors 
                   |       (68040,68060)
                   |
                   |
  SYNTAX n         | set the strictness:
                   | 0 : variables do not have to be declared (like BlitzBasic2)
                   | 1 : variables need to be defined via DEFTYPE
                   | 2 : variables need to be defined via DEFTYPE or first usage
                   |
                   |
  CNIF @{i}condition@{ui}   | compile if @{i}condition@{ui} evaluates to True
  CELSE            | alternative block to CNIF
  CEND             | end the conditional block
  CERR @{i}text@{ui}       | Allows a program to generate compile-time error messages
                   |
                   |
  RunErrsOff       | switch runtime debugger off
  RunErrsOn        | switch runtime debugger on
  LastRunErrsMode  | switch runtime debugger to last state
                   |
                   |
  USEPATH          | USEPATH allows you to specify a 'shortcut' path when dealing with NEWTYPE variables.
                   | Consider the following lines of code:
                   | 
                   | @{fg fill}aliens()\x=160@{fg text}
                   | @{fg fill}aliens()\y=100@{fg text}
                   | @{fg fill}aliens()\xs=10@{fg text}
                   | @{fg fill}aliens()\ys=-10@{fg text}

                   | USEPATH can be used to save you some typing, like so:

                   | @{fg fill}USEPATH aliens()@{fg text}
                   | @{fg fill}\x=160@{fg text}
                   | @{fg fill}\y=100@{fg text}
                   | @{fg fill}\xs=10@{fg text}
                   | @{fg fill}\ys=-10@{fg text}

                   | Whenever Blitz encounters a variable starting with the backslash character ('\'), it
                   | simply inserts the current USEPATH text before the backslash.
                   |
                   | 
  USELASTPATH      | The command "USELASTPATH" sets the newtype path in the same way as the
                   | "USEPATH" command. However, "USELASTPATH" sets the path to the previous
                   | setting from "USEPATH". For example:
                   | 
                   | @{fg fill}DefType.Window mywindow@{fg text}
                   | @{fg fill}DefType.Screen myscreen@{fg text}
                   | 
                   | @{fg fill}USEPATH mywindow@{fg text}
                   | @{fg fill}NPrint \LeftEdge ; X-position of window@{fg text}
                   | 
                   | @{fg fill}USEPATH myscreen@{fg text}
                   | @{fg fill}NPrint \Width    ; Width of screen@{fg text}
                   | @{fg fill}NPrint \Height   ; Height of screen@{fg text}
                   | 
                   | @{fg fill}USELASTPATH@{fg text}
                   | @{fg fill}NPrint \TopEdge  ; Y position of window@{fg text}
                   |
                   |
  INCLUDE          | include a source code file
  XINCLUDE         | include a source code file (only once!)
  IncBin           | include a binary file
                   |
                   | The search order (if not an absolute path in "file") is:
                   |  1. the path set in IDE to the includes directory
                   |  2. the path of the current source code file
                   |  3. the path to the executable to create

@ENDNODE

@NODE AFunctions "3 AmiBlitz3 - Reference"
@ENDNODE


@NODE BuildIn "3.1 Build-In Functions"

@{b}3.1 Build-In Functions@{ub}

@{b}3.1.1 Assign Operators@{ub}

  Symbol         | Description
  ---------------+--------------------------------------------------------------
  x = y          | assign y to x (primitive types/pointers only)

@{b}3.1.2 Comparators@{ub}

  Symbol         | Description
  ---------------+--------------------------------------------------------------
  x = y          | True if x is equal to y, False otherwise
  x >  y         | True if x is greater than y, False otherwise
  x >= y         | True if x is greater than or equal y, False otherwise
  x => y         | True if x is greater than or equal y, False otherwise
  x <  y         | True if x is smaller than y, False otherwise
  x <= y         | True if x is smaller than or equal y, False otherwise
  x =< y         | True if x is smaller than or equal y, False otherwise
  x >< y         | True if x is not equal to y, False otherwise
  x <> y         | True if x is not equal to y, False otherwise

@{b}3.1.3 Logic Operators@{ub}

  Symbol         | Description
  ---------------+--------------------------------------------------------------
  NOT(x)         | logic NOT
  x AND y        | logic AND
  x OR y         | logic OR
  Xor(x,y)       | logic XOR, equals to (x AND NOT(y)) OR (NOT(x) AND y)

@{b}3.1.4 Bit Manipulating Operators@{ub}

  Symbol         | Description
  ---------------+--------------------------------------------------------------
  NEG(x)         | bitwise negation of x (= XOR with all bits set)
  x & y          | bitwise AND (integer only)
  x | y          | bitwise OR  (integer only)
  Xor(x,y)       | bitwise XOR (integer only)
  x LSR y        | shift down x about y bits (unsigned)
  x ASR y        | shift down x about y bits (signed)
  x LSL y        | shift up x about y bits
  x ASL y        | shift up x about y bits

@{b}3.1.5 Math Operators@{ub}

  Symbol         | Description
  ---------------+--------------------------------------------------------------
  -x             | negation of x
  x + y          | add x and y
  x - y          | subtract y from x
  x * y          | multiply x by y
  x / y          | divide x through y
  x MOD y        | x modulo y 
  x ^ y          | x power y
  Log(x.f,y.f)   | logarithm of x to base y

@{b}3.1.6 Trigonometric Functions@{ub}

  Symbol         | Description
  ---------------+--------------------------------------------------------------
  Sin(x.f)       | Sinus of x
  Cos(x.f)       | Cosinus of x
  Tan(x.f)       | Tangents of x
  ASin(x.f)      | inverse Sinus of x
  ACos(x.f)      | inverse Cosinus of x
  ATan(x.f)      | inverse Tangents of x 

@{b}3.1.7 String Functions@{ub}

  Symbol                    | Description
  --------------------------+---------------------------------------------------
  Mid$(str.s,pos.p,n.p)     | crop n characters starting from pos of str 
  Len(str.s)                | string length of str

@{b}3.1.8 Program Flow Functions@{ub}

  Symbol                    | Description
  --------------------------+---------------------------------------------------
  DEFTYPE.t a               | declare and initialized variable a of type t
  Dim [KEEP] a.t(n)         | dimension an array of type t with n indices
  Dim List a.t(n)           | create a linked list of name a of type t
  NEWTPYE name              | declare a data structure
  Function name {...}       | declare a function
  Goto label                | unconditional branch
  Function Return (r)       | return from a function with return value r
  For i=a to b Step c       | "For" loop
  While c : ... : Wend      | "While" loop
  Repeat : ... : Until c    | "Repeat" loop
  If c Then ...             | "If" block
  Else ...                  | "Else" block
  Select x                  | "Select" switch
  Case y                    | "Case" block
  End                       | end program
  initbasic                 | init the Basic context

@{b}3.1.9 Memory Functions@{ub}

  Symbol               | Description
  ---------------------+--------------------------------------------------------
  Dc.t value           | declare a value directly in binary code
  SizeOf.t             | memory size of type t
  Peek.t(mem)          | (flat) copy the data from mem to the structure
  Poke.t(mem)          | (flat) copy the data from the structure to mem

@{b}3.1.10 Casting Function@{ub}

  Symbol        | Description
  --------------+---------------------------------------------------------------
  Val(x)        | convert string to float
  Vallong(x)    | convert string to integer
  Str(x)        | convert integer/float to string
  Int(x)        | convert float to integer

@ENDNODE


@NODE BRL "3.x Basic Runtime Library"
@{b}3.x Basic Runtime@{ub}
 
  The runtime library (BlitzLibs and Includes) is not described in this document.
  Please see the online-documentation.
  
@ENDNODE

@NODE MC68K "4 68K Assembler Reference"
@{b}4 68K Assembler Reference@{ub}
 
  AmiBlitz3 contains the full 68K instruction set (also 68020 and FPU) as inline assembler.
  You can simply write any time in your source code some lines of assembler
  and continue with Basic functions.
  
  The following registers are used across basic functions and must not be trashed:
  
  A4 is reserved for the local variable base within functions
  A5 is reserved for the global variable base
  A6 is reserved for library access
  D7 is reserved for intermediate results between Basic code

  ...and of course the Stack should not be trashed.
  
  A full reference of 68K Instuctions will not be described in this document.
  Check the Internet.
  
@ENDNODE

@NODE Examples "AmiBlitz3 Code Examples"
@{b}A Code Examples@{ub}

  Hello World:
  +-----------------------------------------------------------------------------
  | 
  | Print "Hello World!"                    @{i}; console output@{ui}
  | End                                     @{i}; end of program@{ui}
  |
  +-----------------------------------------------------------------------------

  Load, resize and save an image (via Includes):
  +-----------------------------------------------------------------------------
  |
  | XINCLUDE "image.include.ab3"               @{i}; use graphics.include@{ui}
  |
  | image_Load{0,"DH0:Pics/image.png"}         @{i}; load from disk@{ui}
  | image_Resize{1,0,800,600}                  @{i}; resize to 800x600 pixels@{ui}
  | image_Save{1,"DH0:Pics/image.jpg",@"JPEG"} @{i}; save as JPEG@{ui}
  |
  | End                                        @{i}; end of program@{ui}
  |
  +-----------------------------------------------------------------------------
  @{i}Note: Because the images are AmiBlitz3 maintained object, we don't have to free them.
        AmiBlitz3 is freeing it on "End".@{ui}

@ENDNODE

@NODE Glossary "B Glossary"
@{b}B Glossary@{ub}

Variable      : A memory cell that can store value of the type the variable has.

Constant      : A value of a certain type that does not change over compile
                time. This is usually set by the compiler.

Type          : The kind of data that is in a memory cell, this can be an
                integer, float or string, or user defined "complex type".

Primitive Type: A primitive type is one of the types AmiBlitz3 knows build-in.

Complex Type  : A complex type is a composition of primitive types. They are
                defined by the user.
                
Function      : A block of expressions that has some input parameters and one
                output result.
                AmiBlitz3 has some build in functions, and the user can define own
                functions.

Macro         : Instruction how to replace the macro name in source code with
                its body.
                Note: AmiBlitz3 uses macros in form of constants defined by
                preceding # and "Macro"s, while C uses #define for both.
                AmiBlitz3 uses only the preceding #.

Bool(ean)     : a type that can hold only two values: true and false
                This is usually the result type of comparators.

Long/Word/Byte: Those are Integer values, which can contain only numbers
                without fractional part.
                Results are rounded downwards, e.g. 5/2 = 2 in integer space

Float/Double  : Float is a numeric value with fractional part, Double is the
                same with higher precision

String        : A string in AmiBlitz3 is a sequence of characters terminated
                by 0.

Array         : An Array is a sequence of variables of a certain type.
                The variables are accessed by their index.
                
List          : A List is a sequence of variables of a certain type.
                The variables are accessed by stepping forward and backwards in
                the list.

AmiBlitz3     : programming language, see http://AmiBlitz3.amiforce.de               

C             : programming language

Expression    : anything that can be evaluated. An expression is composed out
                of terminals and non-terminals.

@ENDNODE






@NODE USAGE "Usage"

  @{b}Usage@{ub}

  This section describes who to use the main features of the IDE 

  @{u}General IDE features:@{uu}
  @{" Keyboard/Mouse Controls " link inputs}
  @{" Multiple Sources " link MULTIPLEDOCS}
  @{" File history " link LASTSAVED}
  @{" Custom Menues " link custommenu}  
  @{" Configuration " link CONFIG}
  @{" Help System " link HELPSYSTEM}
  @{" Compiler Errors " link comperr}
  @{" Smart Tokenization " link SMARTTOKENIZATION}
  @{" Clipboard Support " link clipboard}
  @{" Multiline Expressions " link MULTILINES}
  @{" Internal Logging " link LOGGING}

  @{u}Windows:@{uu}
  @{" Source Editor " link SOURCEEDITOR}
  @{" Source Browser " link SOURCEBROWSER}
  @{" Definition Browser " link DEFINITIONBROWSER}
  @{" Instruction Browser " link INSTRUCTIONBROWSER}
  @{" Library Browser " link LIBRARYBROWSER}
  @{" Parameter Dialog " link PARAMETERDIALOG}


  @{u}External control:@{uu}
  @{" CLI Mode  " link CLIMODE}
  @{" Arexx Port " link rexx_port}

  @{u}Other useful information:@{uu}
  @{" New Executable Formats " link exeformat}


@ENDNODE


@NODE MULTIPLEDOCS "Multiple Source Files"

 @{b}@{u}Multiple Source Files@{ub}@{uu}
 
 PED allows you to have more than one source file loaded at a time.
 
 To use this feature, select Open New... from the Project menu. You will
 then be presented with an empty document.

 You can navigate between opened source files by clicking on the tabname
 right under the source text area.

 Closing an opened source file can be done by just clicking on the close gadget
 of the source window. The current source will be closed and the window will stay
 open as long there is at least one other opened source left.

 The keys F9 and F10 are used to navigate between the various loaded
 files. F9 sends you back one document, F10 sends you forward one.
 If you are at the first document and push F9, you will go to the
 last document. Similarly, if you at the last document and push F10, you
 will go to the first document.
 
@ENDNODE MULTIPLEDOCS

@NODE LASTSAVED "Quickly Retrieve Commonly Used Files"

 @{b}@{u}File history@{ub}@{uu}
 
 PED can remember the last 5 files which were saved.
 These are added to the Source file... menu (beneath 'Close') and are in
 chronological order of saving.
 
 Each time you save a file or quit PED, the file Blitz3:System/ped.history
 is updated. 
 
 Selecting one of these 5 files will OVERWRITE the current document,
 (if the current document has unsaved changes however, a requester will
 pop-up asking for confirmation)
 
 If a save slot is empty ('Unnamed...'), PED will prompt you for a file, 
 and store that filename into the corresponding slot.
 
 When you save a file, PED will push that filename to the top of the list.
 If the file was already in the list, it simply shuffles everything above the
 entry down one. If the file is not on the list, all items are shuffled down
 one item, and the 5th item will be forgotten
 
 If a slot is empty and you try to save a file which is not already in the list,
 the empty slot is used.
 
@ENDNODE LASTSAVED


@NODE CONFIG "Configuration"

 @{u}@{b}Configuration of AmiBlitz3@{ub}@{uu}

 There is a powerful settings dialog in PED that gives access to all
 configuration options that are available for the IDE. All settings are
 stored as @{" Tooltypes " link tooltypes} in AmiBlitz3.info.

@ENDNODE CONFIG 

@NODE LOGGING "Internal logging"

 @{u}@{b}Internal Logging mechanism@{ub}@{uu}

 AmiBlitz3 provides an internal log mechanism to be activated.
 The logging covers several internal activities of the IDE and the compiler and 
 shows whats going to internally.

 The logging is heavily used for devloping the IDE and the compiler itself and is
 intended for developing purpose only.

 The logging may be activated via @{"tooltypes" link tooltypes 100}.
 
@ENDNODE LOGGING


@NODE HELPSYSTEM "Help System"

 @{u}@{b}Help System of AmiBlitz3@{ub}@{uu}
 
 There are alot of help meachnism integrated into the IDE to provide the developer with several
 information about commands, functions, constants, newtypes etc.

 Key point is the HELP-Key that can be used with several additional actions:

 +-----------------+---------------------------------------------------------------------------
 | Action          | Reaction                                                    
 +-----------------+---------------------------------------------------------------------------
 | HELP            | Shows the built-in syntax help of the command right under the cursor   
 |                 | Example: pressing HELP on "Print" shows the following text in the status 
 |                 |          line of the source window
 |                 |          @{fg highlight}Print Expression[,Expression] | Blitzlib: printlib@{fg text} 
 |                 |          
 | HELP + SHIFT    | Searches for an appropriate amigaguide or autodoc file for the keyword under 
 |                 | the cursor and opens it.
 |                 | Example: pressing HELP+SHIFT on "Print" opens the amigaguide file for 
 |                 |          printlib and shows the documentation about the command "Print".
 |                 |
 | HELP + CTRL     | Opens the @{"Parameter Dialog" link PARAMETERDIALOG} window for the current command/function
 |                 |
 | HELP on "\\"     | If the HELP-key is pressed while the cursor is above a backslash of a 
 |                 | newtype definition, the @{"Definition Browser" link DEFINITIONBROWSER} will be opened and the 
 |                 | current context will be inserted into the search string gadget.
 |                 | 
 | HELP on "EndIf" | Shows the corresponding IF-Blockheader in the status line
 |                 |
 | F1              | Opens this guide
 |                 |
 | F2              | Opens the guide for Includes
 |                 |
 | F3              | Opens the guide for Blitzlibs
 |                 |
 +-----------------+---------------------------------------------------------------------------

@ENDNODE HELPSYSTEM


@NODE SOURCEEDITOR "Source Editor"

 The @{u}@{b}Source Editor@{ub}@{uu} is the main window of the IDE and displays the current source code.

 It consists of a status line where the IDE displays notifications and the syntax help strings.
 The main area of this window is the text editing area for writing code.

 As the IDE is capable to handle @{"multiple source files" link MULTIPLEDOCS}, the file names of opened source files are shown
 right below the text area as tabs. Clicking on a Tab will switch to the source code of the selected file.

 At the bottom of this window there are some basic status information like the current cursor position 
 (Line / Column), the available amount of memory and some internal flag, e.g. if the Debugger is enabled,
 if the IDE is in @{"tokenizing" link SMARTTOKENIZATION} mode, etc.

 The @{u}@{b}source area@{ub}@{uu} has several features to prettify the source code to make it more 
 readable for the programmer. Each of these features can be controlled via @{"configuration" link CONFIG}.

 * Line numbers can be shown at the left side of the window
 * Syntax highlighting is available for 
    - blitz commands (tokens)
    - include functions
    - macros
    - strings
    - constants
    - comments
   If you want to, blitz commands that make use of the amiga custom chipset may be highlighted as well to
   mark code that may be problematic on machines without the chipset.
 * Auto indentation
 * Auto completion
 * Intellisense
 * Tooltipp

@ENDNODE SOURCEEDITOR


@NODE SOURCEBROWSER "Source Browser"

 The @{u}@{b}Source Browser@{ub}@{uu} is a window, that gives several informations about the
 actual source.

 Actually, it has to tabs:

 @{b}Source@{ub}
 The main object of this register is the label listview This will show
 labels in source which start with the "." character. AmiBlitz3 also displays functions
 and statements here, and can also show comments and case statements. The list
 is limited to displaying 1000 items, for speed reasons. You can click with the
 left mouse button on an item in the list and the editor window will jump to
 the line with that item. You can hold down the left mouse button and drag the
 pointer over the list to scroll it, or use the prop-gadget on the right side
 of the window.

 The string gadget at the top of the window allows you to shorten the display
 to specific items (only the items which start with the text in the string gadget
 will be displayed).

 The @{b}Reset@{ub} gadget will clear the string gadget.

 The @{b}Case@{ub} gadget makes the list show only the Case statements.

 The @{b};@{ub} gadget displays all comments.

 The @{b}All@{ub} gadget displays all labels, functions/statements, comments
 and Case statements - the string gadget is usable when "All" is enabled.


 @{b}Libs@{ub}
 This register contains a hierarchical listview, which shows all libs and their
 functions, that are being used in the actual source.
 Clicking on a function name will jump to the position in source.

@ENDNODE SOURCEBROWSER

@NODE INSTRUCTIONBROWSER "Instruction Browser"

 The @{u}@{b}Instruction Browser@{ub}@{uu} is a window, that gives several informations about the
 available blitz commands, macros and include functions.

 It provides a string gadget where you may enter a name or the beginning of a name of a command
 or function. The browser will start searching for matches while you are tying and displays
 found functions or commands in a table with the two columns "Function" and "Syntax".

 Clicking on an entry in the table will show additional information about that entry in a 
 text area under the table (if it is a blitz command). The additional informations are:
  * blitz library name 
  * blitz library number
  * Token ID
  * Offset in blitz library

 You may filter the search by using the buttons @{b}Macros@{ub}, @{b}Instructions@{ub} or 
 @{b}Include functions@{ub}.

 Clicking on @{b}Add to Code@{ub} will insert the currently selected entry at the current cursor 
 position.

@ENDNODE INSTRUCTIONBROWSER


@NODE LIBRARYBROWSER "Library Browser"

 The @{u}@{b}Library Browser@{ub}@{uu} is a window, that gives several informations about the
 available blitz libraries.

 On the left side there is a list of all libraries. A cycle gadget may be used to alter the
 sorting of the libraries by number or by name.

 Clicking on an entry in the list will set the selected library as current library and will
 show all commands of the library in a table on the right side of the window.
 The table consists of two columns "Function" and "Syntax".

 You may check the consistency of all loaded libraries by using the button @{b}Check Lib consistency@{ub}.
 This will check if there are no library clashes (libraries that use the same library number).
 With BlitzBasicII this was a hugh problem, as different developers used same blitzlibs with different
 library numbers.

 The button @{b}Show free IDs@{ub} shows a list of not used library numbers.

@ENDNODE LIBRARYBROWSER


@NODE DEFINITIONBROWSER "Definition Browser"

 The @{u}@{b}Definition Browser@{ub}@{uu} is a window, that gives several informations about the
 available Newtypes, Constants or Variables of the current source.

 On the top you will find a string gadget to enter the text to be searched for.

 The result area has three buttons to set the current mode:

  * CONSTANT
  * VARS
  * STRUCT

  Depending on the current mode the search string will be used to search for.

  Note: The search only works after at least one compile pass.

@ENDNODE DEFINITIONBROWSER


@NODE PARAMETERDIALOG "Dialog parameter window"

 @{u}@{b}Parameter Dialog@{ub}@{uu}
 If you press Ctrl+Help over an instruction a window will open which shows
 you all the parameters for the instruction and allows you to enter values
 for each one.

 If the dialog parameter window is already open you can simply click on
 another instruction to have its parameters shown.

 The "Add Code" button will add the command and parameters, or modify the
 existing command and parameters, to the current source position.

@ENDNODE


@NODE comperr "Compiler error reports"

 AmiBlitz has an improved reporting of compiler errors (especially when they deal
 with macros or files which have been included using the INCLUDE or XINCLUDE
 commands). When the compiler error requester pops up, it will show 

  * the line number, 
  * the contents of the line which has the error in it,
  * the include name, if the error oocured within an include file
  * the error message

After closing the requester, PED will jump to the line that caused the error.
If the error occured in an include, PED will open the include file and jump
to the error line.

@ENDNODE


@NODE CUSTOMMENU "The Custom Menu"

 @{b}@{u}Custom Menu@{ub}@{uu}

 PED allows the programmer to add their own menu items to a specially
 created menu called 'Custom'. This menu is maintained by using the
 integrated configuration tool via @{u}Project/Menu Edit...@{uu}:

 The main window contains a series of gadgets that are used to setup
 the PED custom menu items as you require.  The main portion of the window is
 taken up with a list of current menu items.
 
 The other gadgets present in the window are:

    Add         Use this gadget to add a new menu item to the end
                of the list of items. The new item becomes the
                active item.
    
    Del         Deletes the current item. The item after the
                current item becomes the active item.
    
    Sort        This gadget will sort the menu entries.

    Itemname    The button to the right let you choose the program.

    Stacksize   With this gadget you can set a stacksize for the 
                tool to be started.

    Run from WB This flag indicated, if the program to be started is
                a CLI-program or a WB program.

    Priority    A priority value for the program can be set.

    Save        This saves the current menu settings.

    Exit        This quits the MenuEditor.  If you have not saved your
                current changes they will be lost.

@ENDNODE CUSTOMMENU


@NODE tooltypes "AmiBlitz tooltypes"

 Almost the complete configuation of the IDE is stored in several tooltypes. These settings 
 may be altered via the settings window, or by modifying the proper tooltypes:
 
@{b} DIRECTORIES @{ub}
 +------------------+---------------------------------------------------------------------------------
 | ASSIGN           | the name of the assign that will be created at runtime of the IDE, e.g. "Blitz3:"
 | HELPDIR          | the directory where the IDE searches for internal helpfiles, e.g "Blitz3:Docs"
 | AUTODOCDIR       | the directory where the IDE searches for the os-autodocs, e.g. "Blitz3:Docs"
 | SOURCEDIR        | the default directory for storing soucefiles, e.g. "Blitz3:Sourcecodes"
 | INCLUDEDIR       | the default directory for include sources, e.g. "Blitz3:Sourcecodes/Includes"
 | 
 | Blitzlibs are organised in several "biglibs". Not all of these blitzlibs are needed for every coding project.
 | With the tool AB3LibsManager theses files can me managed. With the following tooltypes one can load different 
 | biglibs if needed:
 |
 | BASELIBS         | the baselibs-file to be loaded at startup, e.g. "Blitz3:Blitzlibs/baseLibs"
 | UTILLIBS         | the utillibs-file to be loaded at startup, e.g. "Blitz3:Blitzlibs/utilLibs"
 | OSLIBS           | the oslibs-file to be loaded at startup, e.g. "Blitz3:Blitzlibs/osLibs"
 | CSLIBS           | the cslibs-file to be loaded at startup, e.g. "Blitz3:Blitzlibs/csLibs"
 +------------------+---------------------------------------------------------------------------------

@{b} OTHER FILES @{ub}
+------------------+---------------------------------------------------------------------------------
 | DEBUGGER         | the executable of the debugger to be used, normally "Blitz3:Debug/defaultdbug"
 | EDITOR           | the executable of the IDE to be used, normally "Blitz3:System/PED"
 | WINDOWPREFS      | the prefsfile for storing the three different window layouts, e.g. "Blitz3:System/PED.winprefs"
 +------------------+---------------------------------------------------------------------------------

@{b} DISPLAY & ENVIRONMENT @{ub}
 +------------------+---------------------------------------------------------------------------------
 | GUIFONT          | the font and size to use for windows and other texts, e.g. "DinaB.font,16"
 | SOURCEFONT       | the font and size to use for displaying source code, e.g. "GohuFont.font,14"
 | USE_WBFONT       | let the IDE use the same font as Workbench does
 | USE_WBSCREEN     | let the IDE open on Workbench, all SCREEN-tooltypes are ignored
 | CLONE_WBSCREEN   | let the IDE clone the Workbench-screen
 | PUBSCREEN        | define the IDE's own screen as a public screen
 | DEFAULTPUBSCREEN | set the IDE's own screen as the default public screen
 | SCREEN_ID        | internal use: the modeid of the selected screen
 | SCREEN_WIDTH     | the width of the defined screen (should not be less than 640), e.g. "800"
 | SCREEN_HEIGHT    | the width of the defined screen (should not be less than 480), e.g. "600"
 | SCREEN_DEPTH     | the depth of the defined screen (should not be lesse than 4), e.g. "8"
 | ASLREQ_X         | the position and dimension of the standard asl-requester used by the IDE
 | ASLREQ_Y         | the position and dimension of the standard asl-requester used by the IDE
 | ASLREQ_W         | the position and dimension of the standard asl-requester used by the IDE
 | ASLREQ_H         | the position and dimension of the standard asl-requester used by the IDE
 | AUTOLAYOUT       | let the IDE position all the windows automatically
 +------------------+----------------------------------------------------------------------------------


@{b} COLORS @{ub}
 +------------------+---------------------------------------------------------------------------------
 | FUNCTIONCOLOR    | the color to be used for function names, e.g. "$004D8B48"
 | MACROCOLOR       | the color to be used for macro names, e.g. "$00CB3817"
 | STRINGCOLOR      | the color to be used for strings, e.g. "$00C5C10E"
 | NEWTYPECOLOR     | the color to be used for newtype names, e.g. "$001D48CB"
 | CONSTANTCOLOR    | the color to be used for constant names, e.g. "$008C338A"
 | REMARKFORG       | the color to be used for comments, e.g. "$00609860"
 | REMARKBACKG      | the background color to be used for comments, e.g. "$00D8FFD8"
 | TOKENCOLOR       | the color to be used for keywords, e.g. "$00646BD7"
 | TOKENBACKPEN     | the background color to be used for keywords, e.g. "$00FFFFFF"
 | BACKGROUNDCOLOR  | the background color to be used, e.g. "$00FFFFFF"
 | OTHERCOLOR       | the color to be used for function names, e.g. "$00000000"
 | CLASSICCOLOR     | the color to be used for blitz commands that use the amiga custom chipset, e.g. "$00C049FF"
 | screenbackcolor  | the color to be used for screen background, e.g. "$00C8C8C8"
 | screentextcolor  | the color to be used for screen texts, e.g. "$00000000"
 | screenshinecolor | the color to be used as screen shine color, e.g. "$00FFFFFF"
 | screenfillcolor  | the color to be used as screen fill color , e.g. "$006E94E2"
 +------------------+---------------------------------------------------------------------------------
  
@{b} IDE OPTIONS @{ub}
 +----------------------+---------------------------------------------------------------------------------
 | ASKBEFOREQUIT        | define if the IDE should ask again before closing
 | DISABLE_WELCOME      | define if the IDE should not display the welcome dialog box
 | DISABLE_DISPLAYBEEP  | define if the IDE should not "beep" the screen on notifications
 | DISABLE_LOCALIZATION | turn off the localization, useful on systems with low memory available
 | DISABLE_INCLUDEHELP  | turn off the helpsystem for include function, useful on low memory
 | ONLINEHELP           | enable the online help (HELP key)
 | ONLINEHELP_EXTENDED  | enable the tooltipp help bubble for constants, newtypes, etc.
 | SORT_LABELS          | sort the display of elements in the label window alphabetically
 | CON_DEVICE           | set the output device for the CLI-console (for running shell programs), e.g. "CON:"  
 | CON_ONWB             | define if the console should be opened on Workbench's screen
 | CON_WAIT             | define if the running program should wait until th econsole has been opened
 | USE_FILEPATTERN      | define if the IDE should use proper file patterns for file requesters
 | SOURCE_HISTORY       | enable the file history for the last 5 source files (in menu "Source Files)
 | LOAD_LAST_SOURCE     | enabled loading of the last edited source file at startup
 | LAST_SOURCE          | internal: path and name of the last edited source file
 +----------------------+---------------------------------------------------------------------------------

@{b} EDITOR @{ub}
 +----------------------+---------------------------------------------------------------------------------
 | SMART_TOKENIZATION   | if set, the IDE tries to deside if a source file should be tokenized for itself
 | LINENUMBERS          | enable display of linenumbers in sourcecode window
 | AUTO_FORMAT          | enable auto formating of source, e.g. inserting spaces beween operations, etc.
 | AUTO_CONSTRUCTS      | enable automatic conclusion of constructs, e.g, after "For" the IDE will 
 |                      | automatically add a "Next" into the follwoing line
 | AUTO_INDENT          | enable automatic indentation in next line after e.g. an If-clause
 | CORRECT_FUNCTIONS    | enable automatic correction of typed in function names, e.g. "dos_trim" -> "dos_Trim"
 | BOLD_TOKENS          | print tokens in bold font style
 | ITALIC_REMARKS       | print comments in italic font style
 | USE_INTELLISENSE     | enable intellisense for functions and statements: the IDE presents a list of 
 |                      | approriate avaible functions on the basis of the characters the user already 
 |                      | typed in.
 | USE_INTELLISENSE_COMM| enable intellisense for blitz commands as well
 | DISABLE_HIGHLIGHTING | turn off highlighting of source code, only keywords (tokens) will be highlighted
 | CURSORSTYLE          | define the style of the cursor, e.g. "line","underline","block"
 | CURSORBLINKRATE      | define the blink rate of the cursor, "0" means no blinking, e.g. "5"
 | SCROLLRATE           | define the scroll rate in Hz, on fast computers you can slow down the scrolling
 | MOUSEWHEELSTEP       | define the amount of lines to scroll when using the mousewheel, e.g. "6"
 +----------------------+---------------------------------------------------------------------------------

@{b} COMPILER OPTIONS @{ub}
 +----------------------+---------------------------------------------------------------------------------
 | ONEPASSCOMPILING     | use big buffers for compile so only 1 pass is needed (needs lots of RAM !)
 +----------------------+---------------------------------------------------------------------------------

@{b} DEBUGGING OPTIONS @{ub}
 +----------------------+---------------------------------------------------------------------------------
 | LOG_LEVEL            | set the loglevel for the log output, e.g."DEBUG" or "NOTHING"
 | LOG_MODE             | set the destination, "CONSOLE, "FILE", or "BOTH"
 | LOG_USED_BLITZLIBS   | (internal)
 +----------------------+---------------------------------------------------------------------------------

@ENDNODE

@NODE MULTILINES "Multiline Expressions"

 @{u}@{b}Multiline Expressions@{ub}@{uu}

 There is a character limit of 250 each line, but you may want to build a long source line, e.g. when
 using taglists. To do this, simply put @@ in your code and AmiBlitz will continue from the next line 
 as if they were the same line.

 Have a look at the included examples.

 This feature requires you use @{"OPTIMIZE 4" link "Directives"}.

@ENDNODE


@NODE exeformat "Executable format"

 AmiBlitz can now create different styles of executable. The first, most
obvious change is that it can create PPC executables, when you use PPC
assembly language in your programs. The executable format is a WarpOS
fat binary, which will run under WarpOS and also MorphOS using the WarpOS
emulation. Note that a lot of the current libraries are still 68k, and so
is the code generated by AmiBlitz! If you want to create PPC executables,
you need to write the PPC assembly language code yourself.

 The second addition is that AmiBlitz can create chip or BSS sections in
ypour executable (only one!). This can be useful if you need to put
specific parts of your executable into e.g. chipmem for a picture which
you can then display without decoding from fastram->chipmem.

 AmiBlitz3 defaults to the CODE section. You can type either "chip" or
"bss" in your code to change to another section, which will remain the
current section until the other type of section is typed in your code
(either "bss" or "chip") or the end of the code. Do NOT use the same
section type twice (i.e. do not use "chip" twice)!

 The final change is that it is now possible to create libraries (and
other shared objects) from AmiBlitz. This is shown in the ppceq2.bb2
and SharedLibrary examples.

@ENDNODE


@NODE inputs "New inputs"

  @{fg shine}@{b}!!! Important Shortcuts based on english Keymap so may not all work !!!@{ub}@{fg text}

 The keyboard shortcuts in AmiBlitz are as follows:

  <TAB>                         in all browser windows make sourcewindow active
  <ESC>                         closes any active helpwindow

  <ALT> + <CURSOR UP>           move history up
  <ALT> + <CURSOR DOWN>         move history down

  <ALT> + <CURSOR RIGHT>        Jump to label/func
  <ALT> + <CURSOR LEFT>         Back from Label/func
  <ALT> + Left Mousebutton      Jump to label/func
  <ALT> + Middle Mousebutton    Back from Label/func

  <ALT> + click on a filename   save and compile and run
  <CTRL> + click on filename    save and create exe (save both if you click on different)

  <CTRL> + <E>                  insert 'end if '
  <CTRL> + <F>                  insert a 'Function' skeleton
  <CTRL> + <N>                  insert a 'NewType' skeleton
  <CTRL> + <S>                  insert a 'Statement' skeleton

  <CTRL> + <X>                  CUT same as <AMIGA> + <X>
  <CTRL> + <C>                  COPY vertical, all select lines only copyed at the select column
  <CTRL> + <V>                  PASTE vertical, all lines pasted at the cursor column
 
  <CTRL> + <I>                  switch Intellisense for commands 'on/off'

  <CTRL> + <U>                  undo current line

  <CTRL> + <CURSOR RIGHT>       TAB marked block
  <CTRL> + <CURSOR LEFT>        un-TAB marked block

  <CTRL> + <CURSOR UP>          Jump to first line
  <CTRL> + <CURSOR DOWN>        Jump to last line

  <HELP> + <SHIFT>              opens guide/autodoc of instruction under cursor
  <HELP> + <CTRL>               opens parameter diagnostic for actual function
  <HELP> on any function        displays syntax help in status line of source window
  <HELP> on '\'                 opens window 'Definition Browser' and shows newtype information
  <HELP> on 'EndIf'             shows corresponding IF-Blockheader

  <F1>                          opens this guide
  <F2>                          opens includes-guide
  <F3>                          opens blitzlibs-guide

  <L-AMIGA> + <A>               Jump to position in source code where text was last added
  <L-AMIGA> + <SHIFT> + <1>-<3> Store a bookmark 1-3
  <L-AMIGA> + <1>-<3>           Jump to previously stored bookmark 1-3

  <L-AMIGA> + <F4>-<F6>         save winconfig
  <F4>-<F6>                     load winconfig (F4 also startconfig)
  <F7>                          window autolayout variant #1
  <F8>                          window autolayout variant #2

  <F9>                          goto previous document
  <F10>                         goto next document


  Note: You must save the preferences to store the window configuration to a file
        and when AmiBlitz starts, it always uses the first configuration (F4). 

@ENDNODE


@NODE optimise "Optimizations"

 The compiler has several strategies (simple) implemented to to optimize the code to be generated.

 You can control them with compiler directives and modifiers. See ...

 @{"Compiler directives" link Directives}
 @{"'FAST' modifier" link Functions}

 @{"FPU optimizations" link FPUOPTIMIZATIONS}

@ENDNODE


@NODE FPUOPTIMIZATIONS "FPU optimizations"

 @{b}@{u}As FPU Optimzations work:@{ub}@{uu}
 You can enable FPU optimizations via the @{"OPTIMIZE" link "Directives"} directive.
 
 If these optimizations are enabled, the compiler replaces several calculation routines
 with native fpu instructions.
 
 The program code can be generated on a system without a present FPU, but to prevent A
 system crash, on a system without an existing FPU, the IDE shows a warning when trying 
 to "Compile & Run" such a source.
 
 There are several FPU-optimizations that has been integrated into several blitzlibs directly.
 Theses optimizations are automatically enabled, if a FPU is detected at runtime,
 so even without explicit FPU-optimization, a FPU will be used, if available.
 This features leads to a minor increased code size.
  * printlib: converting floats for display -> higher precision of output
  * vallib: Evaluating a String expression using Val() -> higher precision of output / faster calculation

 The routine to check for an available FPU at runtime is also usable for the developer
 (see @{"ProcessorFPU" link Blitzlibs/ENVIRONLIB.guide/ProcessorFPU}).

@ENDNODE FPUOPTIMIZATIONS

@NODE compilerupdates "compiler changes"

 @{b}@{u}About the compiler:@{ub}@{uu}
 Faster compiletime: (2-5* on large progs (30000 lines)because of using variable Hash ALG)
 (Large Include Files now have no speed loss)

 Allow Speech Plugins (PPC Asm& 68k FPU exists now)
 You can add all processor codegens (X86 ARM C LISP all you want)
 See the source in fpulib.ab3 as an examples, it adds 68kfpu and PPC Inline Assembler

 AmiBlitz includes some changes to the way in which you can write your code.

 Macros do not need {} after the name of the macro when you call them, although
 you can still include them for compatibility.

 Labels do not need a colon ":" after them (except in assembly code).

 You can put code to be executed after a semi-colon (comment mark) in your code.
 To do this, you need to write the two characters ":@" and then the code you want
 executed. For example:
 ; Hi this is a comment :@b=1
 will cause the "b=1" piece of code to be executed.

 If you try to load a file which has a name with a ".asm" extension, AmiBlitz
 will try to convert all the ASM code into a format which the AmiBlitz assembler
 can assemble. All instructions, structures, etc will be converted. If you do
 not want this to happen, or if AmiBlitz makes too many mistakes, you can simply
 rename your file and load it like that.

 This feature requires you use @{"OPTIMIZE 4" link "Directives"} or'ed in to whatever
 you are currently using.

 The editor will now accept all 256 ASCII characters (so you can have
 characters with accents, special characters, ï¿½ï¿½ï¿½ï¿½ï¿½ etc).

 The 020+ arithmetic assembly language instructions muls.l/mulu.l/divs.l/divu.l
 can now be used in code instead of as dc.w's. However, only register to
 register mode is supported for now.

 Putd0 and Getd0 are a fast way to move variables from ASM to basic and back
 again (1 68k Cycle), and are faster than PutReg and GetReg.

 Basic variables can be accessed in assembler:
    globals   move.l basicvarname(a5),dx
    locals    move.l basicvarname(a4),dx
    newtypes  move.l newtypevar(a5),a0
              move.l .newtypename\entry(a0),d0

    float:    fmove.s basicvarname(a5),dx (FPU on)

    PPC:      lwz rx,basicvar(r8)
@ENDNODE


@NODE constants "New constants and directives"
{b}Compiler constants and directives:@{ub}
Note OPTIMIZE minimum 4 must be set for following:
#__include is -1 when this file is include 0 when this is standalone
#__debug   is -1 if this is a debug build 0 when no debug build

CNIF @#constant=0
  execute here if the constant is not defined
CEND

@{b}buildin string constants:@{ub}
\\__VER_MAJOR                 insert major version code (if set in project settings)
\\__VER_MINOR                 insert minor version code
\\__VER_PATCH                 insert patch number
\\__VER_BUILD                 insert build number

\\__DATE__                    insert date of compilation (english format)
\\__DATE_GER__                insert date of compilation (german format)
\\__THIS_FUNCTION             insert name of current statement or function
\\__THIS_INCLUDE              insert name of current include
\\__CODELINE                  insert current source line

\\n                           insert carriage return
\\R05*                        insert repeatation of "*" 5 times


@{b}Fast string comparision for string upto 4 characters:@{ub}
if a.l=\@"char1" ....  (a.w=\@"ab" a.b=\@"b")  to compare 4(2/1) char strings fast.

@{b}Merging Lines:@{ub}
functioncall {tag1,value1,\@\@     ; use \@\@ to merge lines
              tag2,value2}

@{b}Using "Escape Characters" in strings.@{ub}
\\n     carriage return
\\22    A 2 char hexcode that is added as a char in string (22 = ")
\R09a   print 09 repeatet a. Note that the repeat must always 2 digits

@{b}Fast calling of functions:@{ub}
Function FAST testfunc{var1,var2,\@var3,\@var4}

Functions can be called upto 10-20* faster.
Dont works if you have strings or newtypes in functions.

Also note, that same as in C, local vars are not set to 0 automatically. Use
this carefully and init all your vars. A speed boost is only noticable, if your functions is
called more than 10 000 times/sec. On functions that are called not frequently
its not needed.

@{b}Optional parameter handling for Functions & Statements@{ub}
Functions and Statements can have variable parameters.
The "\@" before variables indicates these (\@var3,\@var4) are optional:

Function testfunc{var1,var2,\@var3,\@var4}
End Function

If var3 = -1 then this par is not set do default

@{b}Redimensionation for Arrays@{ub}
Dim KEEP test(20)

This change the dim but hold old values.Note that you only can resize the last
dimension of a array

Dim List test(0)

Indicate it as a dynamic linked list,that can grow as much mem is available
If Getd0=0 show that there is no memory to increase the list

@{b}Support for FPU Datatypes@{ub}
AB2 supports FPU Datatypes when FPU optimizer (bit 1) is on
.d = FPU 64 bit
.f = FPU 32 bit

Note that data from ffp format to FPU format must convert by code



@ENDNODE 

@NODE varargs "Variable parameters to statements/functions"

 When calling statements or functions in your code, you can change the number
of parameters that you specify. All unspecified parameters will have the
value -1. You must have turned on the @{"new syntax mode" link directives} for this.
Each parameter you want to be optional must have the @ symbol in front of
the variable name. For example:
@{code}
    OPTIMIZE 4

    Statement display(a.w, b.w, @c.w, @d.w}
        NPrint a
        NPrint b
        NPrint c
        NPrint d
    End Statement

    display{1,2} ; Causes 1, 2, -1 and -1 to be displayed
 @{text}
 Note that you need the new syntax mode turned on (the value you specify after
 the @{"OPTIMIZE" link "Directives"} command must be >=4).

@ENDNODE


@NODE moreargs "Number of parameters to statements/functions increased"

 The old versions of Blitz2 only allowed you to use 6 parameters in a
statement or function. Since v2.26 of AmiBlitz3, this limit has been increased
to 10.

 For the low level tech-heads, the first 6 parameters are passed in registers
d0 to d5 as before, the last 4 parameters can be accessed from the stack.
Each item takes *n bytes* on the stack, where n is the size of the parameter, and
are *before* the return address!

@ENDNODE


@NODE syntax "SYNTAX command (useful for tracking difficult to find bugs)"

 A command called "syntax" has been added, and it has a similar function to
the @{"OPTIMIZE" link "Directives"} command (control the compiler). The parameter is a number,
and the bits/values can be added together to turn on certain options:

  Bit   Value   Description
   0      1     All variables must be declared using the "DefType" or "Shared"
                commands, otherwise a compiler error will be generated.

   1      2     Same as above, but you can also declare variables when you
                use them for the first time as long as you specify a type

   2      4     Converting a variable to a smaller type (e.g. foo.w=bar.l)
                will cause a compiler error. To force the conversion, put
                a "+" character at the start of the line (or immediately
                after a ":" character).

@ENDNODE


@NODE dimkeep "Resize of arrays without losing data"

 Arrays can be resized without losing any data. To do this, specify the "KEEP"
keyword after the "Dim" command, like this:

    Dim array.w(10)    ; The original creation of the array

    ; Program code...

    Dim KEEP array(20) ; Resizing the array
    If GetD0=0
        ; Resizing the array failed.
        ; However, the old array size and contents are still available.
    Else
        ; Resizing the array worked OK
    EndIf

 Note that you can also only resize the LAST dimension of the array
(especially important for multi-dimension arrays).

@ENDNODE


@NODE strptr "Pointers to strings enhanced"

 The compiler will generate an error for code like this:
     *pointer="abcdef"
     *pointer=a$
because the only reason it works is that the string is in the temporary
string buffer. Performing some string operation will cause the string
pointed to be *pointer to be incorrect.

 You can however use:
     *pointer.s="abcdef"
     *pointer=&a$
which allows the strings to be handled correctly.

@ENDNODE


@NODE linklist "Truely dynamic linked lists"

 Linked lists can now be made fully dynamic (items and memory will only be
allocated when you add an item to the list). Previous versions of Blitz
only allocated the number of items you specified in the "Dim List" statement
and then maintained items in a "used" and "available" state (internally of
course :).

 To make your linked list fully dynamic, simply Dim the linked list with an
item size of 0:

    Dim List foo.w(0) ; This list is dynamic!

  This feature is avaiable only for Kick2.0+ at the moment.

@ENDNODE


@NODE enddo "Changes to program exit"

 The first (and very useful :) change to the way you can exit programs is that
instead of simply using "End" to end your program, you can use "End d0" and the
value in the d0 register is returned as the program return code (useful for
DOS commands). Commands such as "PutD0" and "PutReg" can be used to set the
value in the register.

 You can also add custom exit handlers to your program, written in Basic. An
exit handler is a piece of code which is automatically called when the
programs exits. There is an example of this in the image_include source
(which is included with the grpahics card example).

@ENDNODE

@NODE readwritetype "ReadType and WriteType commands"

 There are now two new commands called ReadType and WriteType which allow you
to read and write an entire NEWTYPE variable from and to a file. These are
similar to ReadMem and WriteMem except AmiBlitz does all the hard work for you.
Use them like this:

    NEWTYPE.mytype
        ; Some variables
    End NEWTYPE

    DefType.mytype a_variable

    ; Open file and things here as normal
    WriteType file_number, a_variable ; Write contents of NEWTYPE variable to file

    ReadType file_number, a_variable  ; Read back into type

 There are some limits to these functions. First, you must only use them
with AmiBlitz 2.27 and higher. Second, types inside types are not supported.
Third, string variables inside a type must not be longer than 300 characters
(although Bernd will increase this if people need it to be longer).

 See the writetype.ab2 example in the "Examples" directory.

@ENDNODE


@NODE maxobject "Maximum number of objects increased"

 It is now possible to use more objects than were previously possible. Certain
combinations of numbers of objects and sizes of objects caused crashes when
a program created in Blitz initialised its object buffer. For example, one
such library was the Shape library (1024 objects, each shape havign a size of
32 bytes = 32768) caused a negative offset to be calculated and the wrong
addresses used for the shapes.

 This is now fixed so that you can use up to 65536 objects (in theory anyway),
numbered 0 to 65535.

@ENDNODE


@NODE stringpass "String passing as pointers fixed"

 Passing strings (not string variables!) to functions which required pointers
did not always work when multiple strings were passed. This is now possible,
and is especially useful with OS functions as shown below:

    SetComment_ "ram:some_file_here", "A comment from AmiBlitz"

@ENDNODE


@NODE folding "Source code folding"
@ENDNODE


@NODE macros "New 'library' macros"

 A new/useful feature is the ability to write macros and have them included in
the @{"Instruction Browser" link INSTRUCTIONBROWSER} window. To do this you can write
a macro which has a function or statement inside it and a comment to the side
of the macro. For example:

Macro my_func ; {a.w, b.l}   Comment would usually show syntax help for function
Function.l my_func{a.w, b.l}
    ; Your code for function here
End Function
End Macro

 You should only include one function or statement inside a macro since otherwise
you cannot use the help system advantages (described below).

 There are a lot of advantages to this. The first was mentioned above (the macro
line will be shown in the "Instruction Browser" - that will include the comment).
Parameter help (Help key by itself) and online help (Shift + Help) will also
work with these macros.

 Additionally, you can write many functions and then choose which ones to include
in your code by calling the macro (you will need to call the macro to include
the code anyway). This has the benefit of still allowing you to access all the
statements and functions you write, but smaller executables (since only the ones
you call the macro for are compiled).

 Finally, it is possible to compile these macros as resident files, so you can
created "libraries" in Basic and do not need to release the source code (if you
do not want to).

Bernd has also provided example code for installing an exit handler
which is some code that will automatically be called when your program exits.
This will behave the same way as if you had written a BlitzLib in 100% assembly!

 The "image_include" from Thilo Kohler, in the "Examples/GraphicCard" directory
is an excellent example of this system.


 Bernd has also proposed a method for making good use of this system, and is
similar to the "image_include" example. You should create a set of functions
for performing some task, or to act as a library. Each function should be
enclosed in Macro...End Macro blocks as described above, so you get all of the
benefits. You should also write an initialisation and close function. The
initialisation function, when included with its macro, should include all the
other functions (or maybe only the most used if you like) of the "library",
perform all initialisation code and install an exit handler to call the close
function.

 It may also be worthwhile having a macro such as "!image_all" to include ALL
other functions for the library, for lazy programmers like Bernd ;p

@ENDNODE


@NODE libmacros "New macros for library authors"

 There are also some macros which allow you to write Basic code in
libraries. For more information, see the section of the online help.

@ENDNODE


@NODE resclash "Resident clashes shown"

 When there are clashes in resident files, the usual requester will be shown
but now there will also be some extra information in the titlebar of the
requester. This will describe what the clash really is instead of simply telling
you there is one.

@ENDNODE


@NODE regload "RegLoad command"

 The RegLoad command allows you to load variables into floating point
registers. This can greatly improve the speed of your program, since
AmiBlitz can now use the FPU. A maximum of 5 registers can be loaded.

 The syntax is:

RegLoad var1 [, var2 [, var3 [, var4 [, var5]]]]

 When the registers are loaded all single precision floating point
numbers are converted to extended floating point.

 If the variables are changed when they are in a register you need to use the
RegSave command. It takes no parameters and simply stores the changed
variables which have been loaded into registers.

@ENDNODE


@NODE object "Object...End Object commands"
@ENDNODE


@NODE caststring "Casting strings to longs"

 If you have enabled the @{"new syntax mode" link optimise} then you will be able to cast
strings to integer variables. The length of the string must not be longer
than the number of bytes that the variable takes in memory.

 This can be useful especially when dealing with files which adhere to an
Amiga standard, such as IFF files. For example:

     x.l = @"ILBM"

will load the variable x with the longword which makes up the string
"ILBM".

 Using this syntax is a lot faster than using Asc(x), and probably also faster
than using Cvl(string). This will also work for byte and word but remember
not to make the string longer than 1 and 2 characters respectively.

@ENDNODE


@NODE charseq "Character string escape sequences"

 You can now add character sequences in strings which have special meanings
(similar to C but slightly different). The format is \\<char> (that should be
two slash characters) where char is the ASCII code of the character to insert
in hexadecimal. For example

    NPrint "\\22 Hello \\22"

 Will print the following (including! the quote marks)

    " Hello "

 This will save you some executable size and execution time instead of needing
to use Chr$(x) and adding that to a string, just to get a single "special"
character.

 Another feature of this new character sequence is that you can repeat
characters by using the format \\R<num><char>. num is a 2 digit value
in hexadecimal which tells AmiBlitz how many times to repeat and char
is the same as above.

 If you want to write two slash characters back to back, then you must put
four slash characters in your string - "\\\\".

 This feature is only enabled if you have the @{"new syntax mode" link optimise} turned on.

@ENDNODE


@NODE SMARTTOKENIZATION "Smart Tokenization"

 Using the @{b}Smart Tokenization@{ub} feature (see also the @{"SMART_TOKENIZATION tooltype" link tooltypes}.), 
 PED may be used to edit generic textfiles like every other editor:

 If smart tokenization is enabled, the IDE identifies source files by the file extensions
 
  *.ab2
  *.ab3
  *.bb2

 and switches tokenization on or of if suitable.

@ENDNODE


@NODE clipboard "Real clipboard support"

 PED uses the standard AmigaOS clipboard, so you can copy & paste code directly
 to or from other applications.

 PED supports "indented paste" of blocks: If you copy a block and paste it, PED will
 check to see if there are any spaces in the first line. If there are none,
 then the block will be pasted starting from the current column position
 (so you could paste a block indented for example).

@ENDNODE

@node "objectuse" "How to use"

Here you can add all your thousands of functions/statements
 and can find them in the @{"Instruction Browser" link INSTRUCTIONBROWSER} like old commands
 Make file like  myfuncs.bb2
Embed the function or functions you want in a object end object

before

function testfunc{}
.......
end function

now

object testfunc ;short screen paramter help
function testfunc{}
end function
........

end object

You can add as many functions you want in a object.
But only the first function after a object is available in shorthelp etc.

Later functions are like C called  private stuff which not see in help
but can accsess if you want
So its upto you what you want make public or not to not confuse the User
with too many functions

now add a object

object myfuncs_include
!testfunc1
!testfunc2
.........
end object

This contain all objects that should include from the compiler

Now you can build a .res file out of this or maybe add to
a global res file with many thousends funcs for ex. add it to all.res

If you want use the functions your program should include the .res file
and call first a

!myfuncs_include

To develop/debug this stuff or use a testprogram without building a .res file
you can set the constant #developobject=1.

You can use this without building a .res file
for include with include command when your mainprogram
set before the include command #developobject=1

The instructionhelp can list you this Objects. Here you can add docu if you wish

You can add stuff to the exithandler that is called automatic on exit
and free resources to do this add

;******************* here come exithandlercode
.Installexithandler
 MOVE.l #myfreecode_myfunc,d0 ;
SysJsr $c801       ;this install the exithandler
MOVE.l d0,oldfree_myfunc   ;This read the oldfree code to link all handlers together
BRA l1_myfunc
myfreecode_myfunc          ;this is the autoexit routine
;*****************User Code Start
image_freeall{} ; this is called on program exit automatic
;*****************User Code End******************************
MOVE.l oldfree_myfunc,a0  ;jump to next exithandler
JMP (a0)
oldfree_myfunc: Dc.l 0
l1_myfunc
;*****************exit handler code end

Use always labels that can never occur in other programs.
Same is if your objects use global vars

Note: The `@ dont work here

If you want add help to guide you can do this easy

Load in file blitz2:redhelp/usermacros.guide

Make a node of the commad you want shift+help for

node "myfunc"
      Dont forget the @ before node

endnode

Example Progs to load in ped you can also easy add to a guide

{" Myfuncexample " system "run >NIL: BLITZ2:REDHelp/ShowExample File=Blitz2:exampledir/examplefile.ab2"}

Dont forget the @ before {" Myfunc....

ALso look in dir thilo_includes.All files use the AB2 object format

@endnode


@node "usefullmacros" "Usefull Macros"
@{lindent 4}
       These macros are only if you write plugins or write reentrant
       Code wich uses nore Tasks

       Lock Basic code with UnLockBasic:ev=wzwaitevent:LockBasic
       LockBasic and UnlockBasic can call after !asm

!initasm  Load registers d1-d7/a0-a6 from programm start
          dont use Basic Instructions.
          Must call before !basic !asm.

!basic    Switches to basic without look of stack Dont use interrupts.
          Can use in Statement and Reentrant Code

!basica7 Switches to basic Can call from Interrupts but Stackpos must
          be the same when you call !asma7.
          Dont use in Statements !!!!

!asm   Switches to asm and reloads reg d1-d7/a0-a6
       wich stored with !basic

!asma7    switches to asm and reloads reg d1-d7/a0-a6 from stack
          wich stored with !basica7

"!exitasm" stores d0-d7/a0-a6 so on Programm Return all Regs are
correct
           all Registers are correct
          Plugin Bsp Source

!initasm

!basic

   Basic Code

!asm

!exitasm

end noa7    ;stack must same position as on start so dont use it in
            for while or case instructions:end Instruction doesnt work

!newidcmp   makes a new idcmp for current WZwindow so reentrant
            code is possible

!freenewidcmp must call before wzclosewindow to release !newidcmp Port
@endnode


@NODE FAQ "Frequently asked questions"

 @{fg shine}How Liblinking/Tokenization works@{fg text}
 Blitz2 uses the characters 1-127 for normal text. I a tokenized source, if a 
 characer is higher than 127 then the beginning of a token ist assumed. 
 Blitz2 reads the second character and calculates the tokennumber, ex. 0x9001 by
 clearing bit #15, the token number therefore 0x1001. 
 The tokennumber is coded as bits 14-6 are the libnum and bit 6-0 is intruction. 
 This way you get 256 possible libs with a maxmimum of 128 instructions each.
 
 When building the executable, the compiler has to link the library code for all
 used blitzlibs. If you have for example a lib with more than 128 instructions 
 and the libnumber is 200, the 130. command will be interpret as command 2 on libnum 
 201 as we habe a kind of "token overflow". The problem is, the linker wants to
 add library 201. This lib doesn't exist in real so its adds nothing. If you use
 no commmand below 128, your lib is not linked and your executable will crash.
 
 @{fg shine}Does every entry in a newtype structure also counts as one global var? @{fg text}
 
 No:
 A newtype variable uses only a pointer to it in the globvar or locvar space
 String variables use also just a pointer in the stringspace.
 Dims also use only 1 pointer
 A newtype-record is limited to 32767 Bytes. If it greater the compiler shows
 the Error "Type too big".
 
 
 @{fg shine}On WinUAE-JIT when runtimeerrorcheck is on, my program run extremely slow
 What can i do ?@{fg text}
 Try disable the JIT (cpu nocache) for now
 This is a JIT Problem because it flushes the cache every trap

 @{fg shine}
 I have different calculation results between BB2 and AB3 with ths examples code, when using FPU:
 a.f = 11.9
 b.f = 999
 Print a.f * b.f
 
 AB3 =>  11888.1 
 BB2 =>  11888.0939 
 @{fg text}
 This is because 32bit ffp-floats have an accuracy of 6 numbers (0.001%).
 With a FPU you have internal 64bit accuracy that provides even with 32bit variables 
 better results than ffp in complex terms:

 a = b * c + d
 a = a / 4
 64bit = 32bit * 32bit  (b*c)
 64bit = 64bit + 32bit  result of (b*c) + d

 If in the next term the result of the above (a) comes after the "=" then the 64bit 
 is not rounded down to 32bit value
   
 64bit = 64bit / 4
 Constants are double floats in AB3 but using double float for vars is used selden 
 and hard to implement in AmiBlitz (3d graphic chips use 32 bit floats).
 So the replace for the .f is single FPU.
 Also the FPU result is converted to ffp when printing (because external libs only support ffp),
 so accuracy is same like ffp when you see the number.
 But if you want program in AB3 Assembler, you can use 64bit float vars.
@ENDNODE

@NODE bugs "Ooh, nasty"

 @{u}Displaying the source:@{uu}
 If the " " pair (for strings) are not correct then incorrect instructions
 are shown or garbled tokens (in the old version of Blitz, the instruction would become
 detokenised).If you correct the " " to the correct state and move cursor
 up/down then all will be fixed. This also happens sometimes when you use
 the editor option to "delete to end of line".
 This is because AmiBlitz3 uses all 256 ASCII characters - previously it only
 used characters 1-127 and all characters above were instructions.

 Sometimes the block selection via mouse may look weird.

 @{u}Tokenizer:@{uu}
 There is a tokeniser fail if you use '#' and a command like 'SizeOf.':
 for example 'MOVE.l #SizeOf.EasyStruct,es_StructSize' this will treated by the
 compiler as a constant with the name '#SizeOf.EasyStruct'.
 As a workaround you have to put a space in between for the example
 'MOVE.l # SizeOf.EasyStruct,es_StructSize'
 this way the compiler generates correct code!


@ENDNODE


@NODE authors "Authors and Credits"

 The authors of AmiBlitz were Acid Software (Simon Armstrong and Mark Sibly,
 back when it was called Blitz Basic).

 Red When Excited (RWE) produced a great number of useful additions
 including the editor and debugger, as well as a host of add-on libraries
 (in a collection known as the Blitz Support Suite, or BSS).

 Of course, many other authors have also created their own add-on libraries
 which have been included in this distribution, such as Frederic Laboureur
 (NLibs), Olivier Laviale (LotanLibs), Richard T. Elmore (ElmoreLibs), Paul
 West (Mildred), Xavier Nuel (BDLibs), Steve Flock (XBLibs) and many others
 that I have forgotten.

 Recently, Bernd Roesch has updated the compiler and editor and his work has 
 convinced Simon and Mark to allow the release of AmiBlitz as freeware.
 
 Sven Drï¿½ge began in 2006 to heavily improve the IDE and reorder the distribution.

 Thilo Koehler wrote a powerful compilation of include files that covers a wide area of
 application, as mp3-playback, internet-connectivity, blitting and drawing functions, etc.
 These includes were recently updated and a complete documentation was added.

 Thomas Richter wrote the @{b}disassembler.library@{ub}, and you can find the full
 distribution for that on Aminet in util/libs/DisLib.lha. This library is
 used by the debugger.

 @{b}wizard.library@{ub} was written by Haage&Partner. You can find the full distribution
 on their homepage (http://www.haage-partner.com) or on Aminet in
 biz/haage/WizardLibrary.lha.

 If you would like to contribute to the development of @{b}AmiBlitz3@{ub}, most
 of the source for nearly everything connected to AmiBlitz3 has been
 released. The best idea is to check the notes in the source to see
 if updates should be released as they are created or sent back to a
 person who maintains the latest version.

 Bug reports should be sent to github-project at @{u}https://www.github.com/AmiBlitz/AmiBlitz3@{uu}

 You are welcome to join the facebook group 
 
     https://www.facebook.com/groups/342460143062811
 
 or the follwing (at the moment outdated) site:
 
     https://www.amiblitz.de
     https://www.amiforce.de       




 

@ENDNODE


@NODE gpl "GNU General Public License"

            GNU GENERAL PUBLIC LICENSE
               Version 2, June 1991

 Copyright (C) 1989, 1991 Free Software Foundation, Inc.
                       59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

  The precise terms and conditions for copying, distribution and
modification follow.

            GNU GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The "Program", below,
refers to any such program or work, and a "work based on the Program"
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term "modification".)  Each licensee is addressed as "you".

Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.

You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.

  2. You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

    a) You must cause the modified files to carry prominent notices
    stating that you changed the files and the date of any change.

    b) You must cause any work that you distribute or publish, that in
    whole or in part contains or is derived from the Program or any
    part thereof, to be licensed as a whole at no charge to all third
    parties under the terms of this License.

    c) If the modified program normally reads commands interactively
    when run, you must cause it, when started running for such
    interactive use in the most ordinary way, to print or display an
    announcement including an appropriate copyright notice and a
    notice that there is no warranty (or else, saying that you provide
    a warranty) and that users may redistribute the program under
    these conditions, and telling the user how to view a copy of this
    License.  (Exception: if the Program itself is interactive but
    does not normally print such an announcement, your work based on
    the Program is not required to print an announcement.)

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.

In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:

    a) Accompany it with the complete corresponding machine-readable
    source code, which must be distributed under the terms of Sections
    1 and 2 above on a medium customarily used for software interchange; or,

    b) Accompany it with a written offer, valid for at least three
    years, to give any third party, for a charge no more than your
    cost of physically performing source distribution, a complete
    machine-readable copy of the corresponding source code, to be
    distributed under the terms of Sections 1 and 2 above on a medium
    customarily used for software interchange; or,

    c) Accompany it with the information you received as to the offer
    to distribute corresponding source code.  (This alternative is
    allowed only for noncommercial distribution and only if you
    received the program in object code or executable form with such
    an offer, in accord with Subsection b above.)

The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.

If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.

  5. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.

  7. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.

  9. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.

  10. If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

                NO WARRANTY

  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.

             END OF TERMS AND CONDITIONS

        How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


Also add information on how to contact you by electronic and paper mail.

If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

    Gnomovision version 69, Copyright (C) year name of author
    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, the commands you use may
be called something other than `show w' and `show c'; they could even be
mouse-clicks or menu items--whatever suits your program.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  Here is a sample; alter the names:

  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
  `Gnomovision' (which makes passes at compilers) written by James Hacker.

  <signature of Ty Coon>, 1 April 1989
  Ty Coon, President of Vice

This General Public License does not permit incorporating your program into
proprietary programs.  If your program is a subroutine library, you may
consider it more useful to permit linking proprietary applications with the
library.  If this is what you want to do, use the GNU Library General
Public License instead of this License.

@ENDNODE

@NODE CLIMODE "CLI mode"

 @{b}@{u}CLI mode@{ub}@{uu}

 AmiBlitz may be started from a shell. In this mode, the IDE won't startup but
 will react as a CLI tool.

 @{u}Syntax:@{uu} @{fg highlight}AmiBlitz3 [options]@{fg text}

 @{u}Options:@{uu}
   -(s)ource <file>    : input source code filename (bb2, ab2 or ab3)
   -(e)xe <file>       : output executable filename
   -(d)ebug            : compile and start runtime debugger
   -(r)elease          : create release executable (size optimized)
   -run                : run compiled program
   -dump <info> <file> : dump compiler internals to file
                         (info=all|token|label|var|func|const|macro|type|lib)
   -setcom <options>   : set compiler settings (options=icon|small|func|ldbg|dbgf)
   -setdbg <check>     : set debugger settings (check=auto|irq|asm|ofl)
   -strbufsize <n>     : set the string buffer size of the compiler
   -stacksize <n>      : set the stacksize for the exe if it run/debug
   -maxerrors <n>      : set maxerrorcounter of the compiler (1-4096; default=99)
   -(1)pass            : use large buffers for compile
   -dform <n>          : format of compiler internals dump (0=bin, 1=ASCII; default=1)
   -PED                : start AmiBlitz3 IDE (PED)
   -save <file>        : re-save source code (convert format, if needed)
   -(v)erbose <n>      : set verbose level (0, 1 or 2; default=1)
   -(h)elp             : show this help
 
 @{u}Example:@{uu} @{fg highlight}AmiBlitz3 -s "DH0:Sourcecodes/MyProgram.ab3" -e RAM:MyProgram.exe@{fg text}
 
 Note: To start the AmiBlitz3 IDE, run from Workbench or with -PED option.


@ENDNODE CLIMODE

@NODE rexx_port "The AREXX Port"

 @{b}@{u}The ARexx Port@{ub}@{uu}
 
 AmiBlitz has an ARexx port. The ARexx port name defaults to PED_1.
 If this port exists, AmiBlitz tries PED_2 and so on upto PED_9.
 
 Using this port you can send a large number of commands to PED, enabling
 you to control several features from another program or from an ARexx script. 
 
 To send a message to the ARexx port from the CLI you use the "rx" command
 (located in SYS:Rexxc/).  This command accepts a command line such as :
 
 	rx 'address "PED_1"  ABOUT'
                 |        |
 			          |        |
 			          |        |
 	        Arexx port  Function
 	        to send to  to send
 
 You can send and receive ARexx commands by using the "RIARexxLib", or the "arexx_include".  
 Please see the documentation for this library for information about its commands.
 
 See @{" ARexx Commands " link rexx_commands} for a full list of supported ARexx commands.
 
 IMPORTANT:
 You need "RexxMast" running (which should be on your system disk inside the
 system drawer) before you can use PEDs ARexx features.

@ENDNODE rexx_port

@NODE rexx_commands "The AREXX Commands"

 @{b}@{u}ARexx Commands supported by AmiBlitz3@{ub}@{uu}

			      @{"ABOUT        " link REXX_ABOUT}
			      @{"VERSION      " link REXX_VERSION}

			      @{"NUMLINES     " link REXX_NUMLINES}

			      @{"REDRAW       " link REXX_REDRAW}
			      @{"HIDESCREEN   " link REXX_HIDESCREEN}
			      @{"SHOWSCREEEN  " link REXX_SHOWSCREEN}
			      @{"ICONIFY      " link REXX_ICONIFY}
			      @{"ACTIVATE     " link REXX_ACTIVATE}
			      @{"SCREENNAME   " link REXX_SCREENNAME}

			      @{"GETDOCLIST   " link REXX_GETDOCLIST}
			      @{"PREVDOC      " link REXX_PREVDOC}
			      @{"NEXTDOC      " link REXX_NEXTDOC}
			      @{"GOTODOC      " link REXX_GOTODOC}
			      @{"DOCLIST      " link REXX_DOCLIST}

			      @{"TOPLINE      " link REXX_TOPLINE}
			      @{"BOTTOMLINE   " link REXX_BOTTOMLINE}
			      @{"PREVLINE     " link REXX_PREVLINE}
			      @{"NEXTLINE     " link REXX_GETLINE}
			      @{"GETLINE      " link REXX_GETLINE}

			      @{"LOAD         " link REXX_LOAD}
			      @{"LOADNEW      " link REXX_LOADNEW}
			      @{"SAVE         " link REXX_SAVE}
			      @{"COMPILE      " link REXX_COMPILE}
			      @{"RUN          " link REXX_RUN}
			      @{"PRINT        " link REXX_PRINT}
			      @{"CUT          " link REXX_CUT}
			      @{"COPY         " link REXX_COPY}
			      @{"PASTE        " link REXX_PASTE}

			      @{"RELOADMENUS  " link REXX_RELOADMENUS}
			      @{"GETWORD      " link REXX_GETWORD}
			      @{"HELP         " link REXX_HELP}
			      @{"HELPTEXT     " link REXX_HELPTEXT}
			      @{"LIBGUIDE     " link REXX_LIBGUIDE}

			      @{"REMEMBERME   " link REXX_REMEMBERME}
			      @{"FORGETME     " link REXX_FORGETME}

			      @{"WINDOWPOS    " link REXX_WINDOWPOS}
			      @{"WINDOWSHORTEN" link REXX_WINDOWSHORTEN}

@ENDNODE rexx_commands

@NODE REXX_ABOUT "ABOUT"

                                   @{b}@{u}ABOUT@{ub}@{uu}

The @{b}ABOUT@{ub} command instructs PED to bring up the ABOUT requester

@ENDNODE REXX_ABOUT

@NODE REXX_GETDOCLIST "GETDOCLIST"

                                @{b}@{u}GETDOCLIST@{ub}@{uu}

@{b}GETDOCLIST@{ub} returns the address of the first document in memory.

For example, if the variable @{b}ad.l@{ub} is the result of @{b}GETDOCLIST@{ub},
then :

	document pathname		=	Peek$(ad+30)
	document filename		=	Peek$(ad+222)
	address of next document	=	Peek.l(ad)
	address of previous document	=	Peek.l(ad+4)
	current document ID		=	Peek.l(ad+8)
	number of lines			=	Peek.w(ad+28)
	address of first line		=	Peek.l(ad+16)
	address of last line		=	Peek.l(ad+20)
	address of current line		=	Peek.l(ad+24)

@ENDNODE REXX_GETDOCLIST


@NODE REXX_PREVDOC "PREVDOC"

                                  @{b}@{u}PREVDOC@{ub}@{uu}

@{b}PREVDOC@{ub} instructs PED to move to the previous document.

@ENDNODE REXX_PREVDOC

@NODE REXX_NEXTDOC "NEXTDOC"

                                  @{b}@{u}NEXTDOC@{ub}@{uu}

@{b}NEXTDOC@{ub} instructs PED to move the the next document.

@ENDNODE REXX_NEXTDOC

@NODE REXX_GOTODOC "GOTODOC"

                                  @{b}@{u}GOTODOC@{ub}@{uu}

@{b}GOTODOC@{ub} instructs PED to move the document which as nth in the
document list. 0=first document.

@ENDNODE REXX_GOTODOC

@NODE REXX_DOCLIST "DOCLIST"
                                  @{b}@{u}DOCLIST@{ub}@{uu}

The command @{b}DOCLIST@{ub} will bring up the Document List selection window.
This command will not return until the user has closed the window.

@ENDNODE REXX_DOCLIST

@NODE REXX_NUMLINES "NUMLINES"

                                 @{b}@{u}NUMLINES@{ub}@{uu}

@{b}NUMLINES@{ub} returns the number of lines in the current document

@ENDNODE REXX_NUMLINES

@NODE REXX_VERSION "VERSION"

                                 @{b}@{u}VERSION@{ub}@{uu}

@{b}VERSION@{ub} returns the version of AmiBlitz.

@ENDNODE REXX_VERSION

@NODE REXX_TOPLINE "TOPLINE"

                                  @{b}@{u}TOPLINE@{ub}@{uu}

@{b}TOPLINE@{ub} sets the AREXX line pointer to the first line in the current
document. This does not actually move the cursor on PED's screen to this
line, but moves an internal pointer.

@ENDNODE REXX_TOPLINE

@NODE REXX_BOTTOMLINE "BOTTOMLINE"

                                @{b}@{u}BOTTOMLINE@{ub}@{uu}

@{b}BOTTOMLINE@{ub} sets the AREXX line pointer to the last line in the current
document. This does not actually move the cursor on PED's screen to this
line, but moves an internal pointer.

@ENDNODE REXX_BOTTOMLINE

@NODE REXX_PREVLINE "PREVLINE"

                                 @{b}@{u}PREVLINE@{ub}@{uu}

@{b}PREVLINE@{ub} moves the AREXX line pointer back one line. This does not
move the cursor on PED's screen, but moves an internal pointer.

@ENDNODE REXX_PREVLINE


@NODE REXX_NEXTLINE "NEXTLINE"

                                 @{b}@{u}NEXTLINE@{ub}@{uu}

@{b}NEXTLINE@{ub} moves the AREXX line pointer forward one line. This does not
move the cursor on PED's screen, but moves an internal pointer.

@ENDNODE REXX_NEXTLINE

@NODE REXX_GETLINE "GETLINE"

                                  @{b}@{u}GETLINE@{ub}@{uu}

@{b}GETLINE@{ub} retrieves the line of text that the AREXX line pointer is at.
The text returned is detokenised.

@ENDNODE REXX_GETLINE


@NODE REXX_REDRAW "REDRAW"

                                  @{b}@{u}REDRAW@{ub}@{uu}

@{b}REDRAW@{ub} forces PED to refresh the display. This will result
in the current page of text to be redrawn and the mouseable label list
to be refreshed.

@ENDNODE REXX_REDRAW

@NODE REXX_HIDESCREEN "HIDESCREEN"

                                @{b}@{u}HIDESCREEN@{ub}@{uu}

@{b}HIDESCREEN@{ub} will tell PED to push its screen to the back, so it
is not visible.

@ENDNODE REXX_HIDESCREEN


@NODE REXX_SHOWSCREEN "SHOWSCREEN"

                                @{b}@{u}SHOWSCREEN@{ub}@{uu}

@{b}SHOWSCREEN@{ub} will tell PED to bring its screen to the front, so it
will become visible.

@ENDNODE REXX_SHOWSCREEN

@NODE REXX_ICONIFY "ICONIFY"

                                  @{b}@{u}ICONIFY@{ub}@{uu}

@{b}ICONIFY@{ub} will close PED's screen and add an item to Workbench's
@{b}Tools...@{ub} menu. PED will not re-open until the Tools... menu
item is selected.

@ENDNODE REXX_ICONIFY

@NODE REXX_ACTIVATE "ACTIVATE"

                                 @{b}@{u}ACTIVATE@{ub}@{uu}

@{b}ACTIVATE@{ub} will ensure that the text-editing area is activated.

@ENDNODE REXX_ACTIVATE


@NODE REXX_SCREENNAME "SCREENNAME"

                                @{b}@{u}SCREENNAME@{ub}@{uu}

@{b}SCREENNAME@{ub} will return the name of PED's public screen. If the
@{"Public Screen" link PUBSCREEN} option is disabled then an empty string is returned.

@ENDNODE REXX_SCREENNAME

@NODE REXX_NEW "NEW"

                                    @{b}@{u}NEW@{ub}@{uu}

Issuing the command @{b}NEW@{ub} will result in a new document being opened.

@ENDNODE REXX_NEW

@NODE REXX_LOAD "LOAD"

                             @{b}@{u}LOAD [filename$]@{ub}@{uu}

The command @{b}LOAD@{ub} will load @{i}filename$@{ui} into the @{b}current document@{ub}.
If there are any unsaved changes to the current document, the user will be asked
for confirmaton.

If @{i}filename$@{ui} is not specified, PED will open a file requester prompting
the user to select a file to load.

@ENDNODE REXX_LOAD

@NODE REXX_LOADNEW "LOADNEW"

                                  @{b}@{u}LOADNEW@{ub}@{uu}

@{b}LOADNEW@{ub} performs the same function as @{"LOAD" link REXX_LOAD} except that a
new empty document is opened before the file is loaded in.

@ENDNODE REXX_LOADNEW

@NODE REXX_SAVE "SAVE"

                             @{b}@{u}SAVE [filename$]@{ub}@{uu}

The command @{b}SAVE@{ub} will save the @{b}current document@{ub} as @{i}filename$@{ui}.

If @{i}filename$@{ui} is not specified, PED will open a file requester prompting
the user to select a name to save as.

@ENDNODE REXX_SAVE

@NODE REXX_COMPILE "COMPILE"

                                  @{b}@{u}COMPILE@{ub}@{uu}

Surprisingly, @{b}COMPILE@{ub} will result in the currently loaded program
to be compiled (and executed). This is the same as selecting 'Compile & Run...'
from the compiler menu.

@ENDNODE REXX_COMPILE

@NODE REXX_RUN "RUN"

                                    @{b}@{u}RUN@{ub}@{uu}

The command @{b}RUN@{ub} will execute the last compiled program. This is
the same as selecting 'Run...' from the Compiler menu.

@ENDNODE REXX_RUN

@NODE REXX_PRINT "PRINT"

                                   @{b}@{u}PRINT@{ub}@{uu}

@{b}PRINT@{ub} will print the current document. This is the same as selecting
'Print...' from the Project menu.

@ENDNODE REXX_PRINT

@NODE REXX_CUT "CUT"

                                    @{b}@{u}CUT@{ub}@{uu}

@{b}CUT@{ub} will cut the currently selected block to the clipboard. This
is the same as selecting 'Cut' from the Edit menu.

@ENDNODE REXX_CUT

@NODE REXX_COPY "COPY"

                                   @{b}@{u}COPY@{ub}@{uu}

@{b}COPY@{ub} will copy the currently selected block to the clipboard. This
is the same as selecting 'Copy' from the Edit menu.

@ENDNODE REXX_COPY

@NODE REXX_PASTE "PASTE"

                                   @{b}@{u}PASTE@{ub}@{uu}

@{b}PASTE@{ub} will paste the contents of the clipboard (unit 0) to the
current document. This is the same as selecting 'Paste' from the Edit menu.

@ENDNODE REXX_PASTE

@NODE REXX_RELOADMENUS "RELOADMENUS"

                                @{b}@{u}RELOADMENUS@{ub}@{uu}

@{b}RELOADMENUS@{ub} will instruct PED to re-load the custom menu file
(ENV:ped.menus) and alter the 'Customs menu accordingly.

@ENDNODE REXX_RELOADMENUS

@NODE REXX_GETWORD "GETWORD"

                                  @{b}@{u}GETWORD@{ub}@{uu}

@{b}GETWORD@{ub} will return the current word under the cursor. The text
is detokenised.

@ENDNODE REXX_GETWORD

@NODE REXX_HELP "HELP"

                                   @{b}@{u}HELP@{ub}@{uu}

@{b}HELP@{ub} will display the standard help line on PED's screen title.
This is the same as pushing the HELP key.

@ENDNODE REXX_HELP

@NODE REXX_HELPTEXT "HELPTEXT"

                                 @{b}@{u}HELPTEXT@{ub}@{uu}

@{b}HELPTEXT@{ub} will return the standard line of help text associated with
each Blitz command.

@ENDNODE REXX_HELPTEXT

@NODE REXX_LIBGUIDE "LIBGUIDE"

                                 @{b}@{u}LIBGUIDE@{ub}@{uu}

@{b}LIBGUIDE@{ub} will return the path to the online-help text associated
with the command under the cursor. This is obtained from the file
Blitz2:REDHelp/REDHelp.dat

@ENDNODE REXX_LIBGUIDE

@NODE REXX_REMEMBERME "REMEMBERME"

                                @{b}@{u}REMEMBERME@{ub}@{uu}

@{b}REMEMBERME@{ub} is for use with external programs, rather than AREXX scripts.
Issuing this command will mean your program will receive a message whenever it
needs to close its window (for example when PED needs to close its screen).
or when it should quit (when PED is exiting for example)

If you open a window on PED's screen, you MUST ask to be added to
the list of running applications which should be sent a message, otherwise
PED will not be able to close its screen when necessary.

Your program will be sent the messages :

		ï¿½ CLOSEWINDOW		when it must close its window
		ï¿½ OPENWINDOW		when it is ok to re-open its window
		ï¿½ QUITPLEASE		when it must exit

If you receive the message CLOSEWINDOW or OPENWINDOW, your program should reply
to the message AFTER it has performed its action (either closed its window,
opened its window).

If you receive the message QUITPLEASE, your program should reply to the message
AFTER it has closed its window, but should not send the @{"FORGETME" link REXX_FORGETME}
message back to PED.

@ENDNODE REXX_REMEMBERME

@NODE REXX_FORGETME "FORGETME"

                                 @{b}@{u}FORGETME@{ub}@{uu}

@{b}FORGETME@{ub} is for use with external programs, rather than AREXX scrips.
Issuing this command will man your program will not receive any more messages
whenever it needs to close its window. For instance, if a user exits your
program (but not by exiting PED) you should tell PED that you
are no longer running so that it no longer needs to worry about telling
you to quit/close/open window.

If your application has been given the message 'QUITPLEASE' from PED
you should NOT send a FORGETME message back.

@ENDNODE REXX_FORGETME
