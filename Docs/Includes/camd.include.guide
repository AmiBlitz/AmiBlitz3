@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "camd.include"

@{B}camd.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" camd_AddReceiver " link camd_AddReceiver} 
   @{" camd_AddSender " link camd_AddSender} 
   @{" camd_ClearMsg " link camd_ClearMsg} 
   @{" camd_EchoMsg " link camd_EchoMsg} 
   @{" camd_FindCluster " link camd_FindCluster} 
   @{" camd_FindMidiApp " link camd_FindMidiApp} 
   @{" camd_FindReceiverMidiLink " link camd_FindReceiverMidiLink} 
   @{" camd_FindSenderMidiLink " link camd_FindSenderMidiLink} 
   @{" camd_Free " link camd_Free} 
   @{" camd_GetClusterName " link camd_GetClusterName} 
   @{" camd_GetMidiAppName " link camd_GetMidiAppName} 
   @{" camd_GetMidiLinkName " link camd_GetMidiLinkName} 
   @{" camd_GetMsg " link camd_GetMsg} 
   @{" camd_GetMsgDat1 " link camd_GetMsgDat1} 
   @{" camd_GetMsgDat2 " link camd_GetMsgDat2} 
   @{" camd_GetMsgLength " link camd_GetMsgLength} 
   @{" camd_GetMsgMP " link camd_GetMsgMP} 
   @{" camd_GetMsgStatus " link camd_GetMsgStatus} 
   @{" camd_GetMsgTime " link camd_GetMsgTime} 
   @{" camd_GetSigFlag " link camd_GetSigFlag} 
   @{" camd_GetSysExData " link camd_GetSysExData} 
   @{" camd_GetSysExLength " link camd_GetSysExLength} 
   @{" camd_Init " link camd_Init} 
   @{" camd_IsSysEx " link camd_IsSysEx} 
   @{" camd_RemReceiver " link camd_RemReceiver} 
   @{" camd_RemSender " link camd_RemSender} 
   @{" camd_SendMem " link camd_SendMem} 
   @{" camd_SendMsg " link camd_SendMsg} 
   @{" camd_SkipSysEx " link camd_SkipSysEx} 

@{B}Public Macro Index:@{UB}

   @{" !camd_ClearMsg " link !camd_ClearMsg} 
   @{" !camd_EchoMsg " link !camd_EchoMsg} 
   @{" !camd_EchoMsgX " link !camd_EchoMsgX} 
   @{" !camd_GetMsg " link !camd_GetMsg} 
   @{" !camd_GetMsgChannel " link !camd_GetMsgChannel} 
   @{" !camd_GetMsgDat1 " link !camd_GetMsgDat1} 
   @{" !camd_GetMsgDat2 " link !camd_GetMsgDat2} 
   @{" !camd_GetMsgLength " link !camd_GetMsgLength} 
   @{" !camd_GetMsgMP " link !camd_GetMsgMP} 
   @{" !camd_GetMsgStatus " link !camd_GetMsgStatus} 
   @{" !camd_GetMsgTime " link !camd_GetMsgTime} 
   @{" !camd_GetMsgTyp " link !camd_GetMsgTyp} 
   @{" !camd_GetSigFlag " link !camd_GetSigFlag} 
   @{" !camd_IsSysEx " link !camd_IsSysEx} 
   @{" !camd_SendMem " link !camd_SendMem} 
   @{" !camd_SendMsg " link !camd_SendMsg} 

@ENDNODE
@NODE !camd_ClearMsg "!camd_ClearMsg"

@{B}!camd_ClearMsg@{UB}

@{B}Syntax:@{UB} !camd_ClearMsg

@{B}Description:@{UB}
See @{" camd_ClearMsg " link camd_ClearMsg}.

@{B}Inputs:@{UB}      
-

@{B}Result:@{UB}      
-

@{B}Example:@{UB}                                                  -


@{B}Bugs:@{UB}        -



@{B}See also:@{UB}    -


@ENDNODE
@NODE !camd_EchoMsg "!camd_EchoMsg"

@{B}!camd_EchoMsg@{UB}

@{B}Syntax:@{UB} !camd_EchoMsg

@{B}Description:@{UB}
Optimized version of @{" !camd_EchoMsgX " link !camd_EchoMsgX}, but can not change the midi channel on the fly.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !camd_EchoMsgX "!camd_EchoMsgX"

@{B}!camd_EchoMsgX@{UB}

@{B}Syntax:@{UB} !camd_EchoMsgX \{mp,channel\}

@{B}Description:@{UB}
See @{" camd_EchoMsg " link camd_EchoMsg}.

@{B}Inputs:@{UB}      
- mp    : ???
- channel    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !camd_GetMsg "!camd_GetMsg"

@{B}!camd_GetMsg@{UB}

@{B}Syntax:@{UB} !camd_GetMsg

@{B}Description:@{UB}
See camd_receive.

@{B}Inputs:@{UB}      
-

@{B}Result:@{UB}      
-

@{B}Example:@{UB}                                                  -


@{B}Bugs:@{UB}        -



@{B}See also:@{UB}    -


@ENDNODE
@NODE !camd_GetMsgChannel "!camd_GetMsgChannel"

@{B}!camd_GetMsgChannel@{UB}

@{B}Syntax:@{UB} !camd_GetMsgChannel

@{B}Description:@{UB}
Return the midi channel of the last received midi message.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- channel    : midi channel [0...15], channel = (status.b & $0F)

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !camd_GetMsgDat1 "!camd_GetMsgDat1"

@{B}!camd_GetMsgDat1@{UB}

@{B}Syntax:@{UB} !camd_GetMsgDat1

@{B}Description:@{UB}
See camd_received_dat1.

@{B}Inputs:@{UB}      
-

@{B}Result:@{UB}      
-

@{B}Example:@{UB}                                                  -


@{B}Bugs:@{UB}        -



@{B}See also:@{UB}    -


@ENDNODE
@NODE !camd_GetMsgDat2 "!camd_GetMsgDat2"

@{B}!camd_GetMsgDat2@{UB}

@{B}Syntax:@{UB} !camd_GetMsgDat2

@{B}Description:@{UB}
See camd_received_dat2.

@{B}Inputs:@{UB}      
-

@{B}Result:@{UB}      
-

@{B}Example:@{UB}                                                  -


@{B}Bugs:@{UB}        -



@{B}See also:@{UB}    -


@ENDNODE
@NODE !camd_GetMsgLength "!camd_GetMsgLength"

@{B}!camd_GetMsgLength@{UB}

@{B}Syntax:@{UB} !camd_GetMsgLength \{status.b\}

@{B}Description:@{UB}
See camd_msglength.

@{B}Inputs:@{UB}      
-
- status.b    : ???

@{B}Result:@{UB}      
-

@{B}Example:@{UB}                                                  -


@{B}Bugs:@{UB}        -



@{B}See also:@{UB}    -


@ENDNODE
@NODE !camd_GetMsgMP "!camd_GetMsgMP"

@{B}!camd_GetMsgMP@{UB}

@{B}Syntax:@{UB} !camd_GetMsgMP

@{B}Description:@{UB}
See camd_received_mp.

@{B}Inputs:@{UB}      
-

@{B}Result:@{UB}      
-

@{B}Example:@{UB}                                                  -


@{B}Bugs:@{UB}        -



@{B}See also:@{UB}    -


@ENDNODE
@NODE !camd_GetMsgStatus "!camd_GetMsgStatus"

@{B}!camd_GetMsgStatus@{UB}

@{B}Syntax:@{UB} !camd_GetMsgStatus

@{B}Description:@{UB}
See camd_received_status.

@{B}Inputs:@{UB}      
-

@{B}Result:@{UB}      
-

@{B}Example:@{UB}                                                  -


@{B}Bugs:@{UB}        -



@{B}See also:@{UB}    -


@ENDNODE
@NODE !camd_GetMsgTime "!camd_GetMsgTime"

@{B}!camd_GetMsgTime@{UB}

@{B}Syntax:@{UB} !camd_GetMsgTime

@{B}Description:@{UB}
See @{" camd_GetMsgTime " link camd_GetMsgTime}.

@{B}Inputs:@{UB}      
-

@{B}Result:@{UB}      
-

@{B}Example:@{UB}                                                  -


@{B}Bugs:@{UB}        -



@{B}See also:@{UB}    -


@ENDNODE
@NODE !camd_GetMsgTyp "!camd_GetMsgTyp"

@{B}!camd_GetMsgTyp@{UB}

@{B}Syntax:@{UB} !camd_GetMsgTyp

@{B}Description:@{UB}
Return (status byte & $F0), which means the pure message type without the channel information.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- evtyp.b    : = status.b & $F0

@{B}Example:@{UB}                                                  -


@{B}Bugs:@{UB}        -



@{B}See also:@{UB}    -


@ENDNODE
@NODE !camd_GetSigFlag "!camd_GetSigFlag"

@{B}!camd_GetSigFlag@{UB}

@{B}Syntax:@{UB} !camd_GetSigFlag

@{B}Description:@{UB}
See @{" camd_GetSigFlag " link camd_GetSigFlag}.

@{B}Inputs:@{UB}      
-

@{B}Result:@{UB}      
-

@{B}Example:@{UB}                                                  -


@{B}Bugs:@{UB}        -



@{B}See also:@{UB}    -


@ENDNODE
@NODE !camd_IsSysEx "!camd_IsSysEx"

@{B}!camd_IsSysEx@{UB}

@{B}Syntax:@{UB} !camd_IsSysEx

@{B}Description:@{UB}
See @{" camd_IsSysEx " link camd_IsSysEx}.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- succ.l

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !camd_SendMem "!camd_SendMem"

@{B}!camd_SendMem@{UB}

@{B}Syntax:@{UB} !camd_SendMem \{mp.l,ptr.l,blength.l\}

@{B}Description:@{UB}
See camd_send.

@{B}Inputs:@{UB}      
-
- mp.l    : ???
- ptr.l    : ???
- blength.l    : ???

@{B}Result:@{UB}      
-

@{B}Example:@{UB}                                                  -


@{B}Bugs:@{UB}        -



@{B}See also:@{UB}    -


@ENDNODE
@NODE !camd_SendMsg "!camd_SendMsg"

@{B}!camd_SendMsg@{UB}

@{B}Syntax:@{UB} !camd_SendMsg \{mp.l,*msg.MidiMSg\}

@{B}Description:@{UB}
See @{" camd_SendMsg " link camd_SendMsg}.

@{B}Inputs:@{UB}      
-
- mp.l    : ???
- *msg.MidiMSg    : ???

@{B}Result:@{UB}      
-

@{B}Example:@{UB}                                                  -


@{B}Bugs:@{UB}        -



@{B}See also:@{UB}    -


@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} camd.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 11.03.2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB} camd.library, Amiblitz2.4

@{B}Purpose:@{UB}
Provide camd functionality.

@{B}Abstract:@{UB}
This include provides a function set to do midi I/O via camd.library, which is currently the only real standard way to do this, like AHI for audio.

The concept of camd is to connect to clusters (meetings points), where applications can make a link to, which can be a receiving or a sending link. if an applications sends midi data to a cluster via a sending link, all applications that are connected with a receiving link will be signalled and collect the midi data.
The camd clusters are referenced by a string name, e.g. "out.0" or "EMU10K.0". The first application that establishes a link to a cluster will create it.
There are special clusters with the actual midi drivers behind them, but they can also be totally virtual and exchange midi data only between applications, without a connection to the outer world.
The camd.include can have several links to several clusters, each called a midiport. Each midiport can have a sender and/or a receiver link to a cluster (they dont have to be necessarily the same cluster).

There are also functions to browse through the available camd clusters and their connected applications. This way you can make a camd cluster selection dialog.

For more details about the concept of camd, read the documentation of the camd.library found in Aminet.

@{B}User Constants:@{UB}
#max_camdlinks   = 32
Number of midiports that can be used. The name is a bit missleading and should be more like #max_midiports, but this name was already occupied.

@{B}Example:@{UB}     
Connet to a camd cluster and send a midi event.

__________________________________________________________________ snip!
. XINCLUDE "camd.include.ab3"
.
. If @{" camd_Init " link camd_Init} \{"CAMDTest",0\}
.   If @{" camd_AddSender " link camd_AddSender} \{0,"My.out.0"\}
.   msg.MidiMsg = $90,$40,$7F,0,0  ; note_on event on channel 0
.   camd_SendMsg\{0,msg\}
.   Delay_ 50
.   msg.MidiMsg = $80,$40,$0,0,0  ; note_off event on channel 0
.   camd_SendMsg\{0,msg\}
. EndIf
. End
__________________________________________________________________ snip!




@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE camd_AddReceiver "camd_AddReceiver"

@{B}camd_AddReceiver@{UB}

@{B}Syntax:@{UB}  succ.w = camd_AddReceiver \{mp.l,clustername.s\}

@{B}Description:@{UB}
Add a new receiver link from the midiport to a cluster. This has to be done successfully in order to be able to receive on this midiport.

@{B}Inputs:@{UB}      
- mp.l    : midiport [0...max_camdlinks-1]
- clustername.s    : name of the cluster you want to connect to

@{B}Result:@{UB}      
- succ.w     : -1 if everything went well, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE camd_AddSender "camd_AddSender"

@{B}camd_AddSender@{UB}

@{B}Syntax:@{UB}  succ.w = camd_AddSender \{mp.l,clustername.s\}

@{B}Description:@{UB}
Add a new sender link from the midiport to a cluster. This has to be done successfully in order to be able to send on this midiport.

@{B}Inputs:@{UB}      
- mp.l    : midiport [0...max_camdlinks-1]
- clustername.s    : name of the cluster you want to connect to

@{B}Result:@{UB}      
- succ.w     : -1 if everything went well, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE camd_ClearMsg "camd_ClearMsg"

@{B}camd_ClearMsg@{UB}

@{B}Syntax:@{UB} camd_ClearMsg \{\}

@{B}Description:@{UB}
Clear the latest received midi message.
This function is not very useful, it will just make all camd_received_??? functions return 0. It is mainly suitable for debugging purposes.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    camd_receive




@ENDNODE
@NODE camd_EchoMsg "camd_EchoMsg"

@{B}camd_EchoMsg@{UB}

@{B}Syntax:@{UB} camd_EchoMsg \{mp.l,@channel.l\}

@{B}Description:@{UB}
"echo" the latest received midi message on the given midiport. Optionally, the midi channel can be changed.

@{B}Inputs:@{UB}      
- mp.l    : midiport [0...max_camdlinks-1]
- channel.l    : midi channel, if it should be changed

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    camd_receive




@ENDNODE
@NODE camd_FindCluster "camd_FindCluster"

@{B}camd_FindCluster@{UB}

@{B}Syntax:@{UB}  result.l = camd_FindCluster \{\}

@{B}Description:@{UB}
Scan through the list of system wide camd clusters.
If this function returns True, a cluster was found and information about this cluster can be asked with the camd_nextCluster??? functions.
Note: The search starts always with the first cluster and has to be scanned until this functions returns False. During the search, the camd system is locked, so do not waste too much time within this loop.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : True, if a camd cluster was found, otherwise False

@{B}Example:@{UB}     
__________________________________________________________________ snip!
.
. While camd_NextCluster\{\}
.   NPrint "  Clustername: ",camd_NextClusterName\{\}
. Wend
__________________________________________________________________ snip!


@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    camd_NextClusterName\{\}




@ENDNODE
@NODE camd_FindMidiApp "camd_FindMidiApp"

@{B}camd_FindMidiApp@{UB}

@{B}Syntax:@{UB}  result.l = camd_FindMidiApp \{@lockit.l\}

@{B}Description:@{UB}
Scan through the system wide list of midi nodes (=applications that create a midi node).
Note: The search starts always with the first midi node and has to be scanned until this functions returns False. During the search, the camd system is locked (if lockit.l is omitted or set to True), so do not waste too much time within this loop.
Note: The reason why you should set lockit.l to False is, when you use this function during you scann through camd clusters using camd_nextcluster, because then the camd system is already locked.

@{B}Inputs:@{UB}      
- lockit.l    : lock the camd system while scanning

@{B}Result:@{UB}      
- result.l     : True, if a midi node was found, otherwise False

@{B}Example:@{UB}     
__________________________________________________________________ snip!
.
. While camd_NextMidi\{\}
.   NPrint "Found camd application: ",camd_NextMidiName\{\}
. Wend
__________________________________________________________________ snip!


@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    camd_nextMidiName




@ENDNODE
@NODE camd_FindReceiverMidiLink "camd_FindReceiverMidiLink"

@{B}camd_FindReceiverMidiLink@{UB}

@{B}Syntax:@{UB}  result.l = camd_FindReceiverMidiLink \{*mi.Node\}

@{B}Description:@{UB}
Check for the next midi link in the list of receivers that are attached to the specified midi node.
Note: the midi node of the last result from camd_nextMidi has to be retrieved by camd\this_midi (sorry, thats a bit ugly, if someone wants to use this include, I could improve this).

@{B}Inputs:@{UB}      
- *mi.Node    : pointer to the last Node or 0 to start the search

@{B}Result:@{UB}      
- result.l     : True, if another midilink was found, otherwise False

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    camd_nextMidiLinkName




@ENDNODE
@NODE camd_FindSenderMidiLink "camd_FindSenderMidiLink"

@{B}camd_FindSenderMidiLink@{UB}

@{B}Syntax:@{UB}  result.l = camd_FindSenderMidiLink \{*mi.Node\}

@{B}Description:@{UB}
Check for the next midi link in the list of senders that are attached to the specified midi node.
Note: the midi node of the last result from camd_nextmidi has to be retrieved by camd\this_midi (sorry, thats a bit ugly, if someone wants to use this include, I could improve this).

@{B}Inputs:@{UB}      
- *mi.Node    : Pointer to a midi node

@{B}Result:@{UB}      
- result.l     : True, if another midilink was found, otherwise False

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    camd_nextMidiLinkName




@ENDNODE
@NODE camd_Free "camd_Free"

@{B}camd_Free@{UB}

@{B}Syntax:@{UB} camd_Free \{\}

@{B}Description:@{UB}
Free all resources associated with this include. This function is called on autoexit.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" camd_Init " link camd_Init}




@ENDNODE
@NODE camd_GetClusterName "camd_GetClusterName"

@{B}camd_GetClusterName@{UB}

@{B}Syntax:@{UB}  result.s = camd_GetClusterName \{\}

@{B}Description:@{UB}
Return the name of the last found cluster.
Note: This functions should be called after @{" camd_FindCluster " link camd_FindCluster} returned True.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.s     : name of the camd cluster

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" camd_FindCluster " link camd_FindCluster}




@ENDNODE
@NODE camd_GetMidiAppName "camd_GetMidiAppName"

@{B}camd_GetMidiAppName@{UB}

@{B}Syntax:@{UB}  result.s = camd_GetMidiAppName \{\}

@{B}Description:@{UB}
Get the name of the last found midi node.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.s     : name of the midi node

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    camd_nextMidi




@ENDNODE
@NODE camd_GetMidiLinkName "camd_GetMidiLinkName"

@{B}camd_GetMidiLinkName@{UB}

@{B}Syntax:@{UB}  midilinkname.s = camd_GetMidiLinkName \{\}

@{B}Description:@{UB}
Get the name of the last found midilink.
Note: This works for the last found senders and receivers.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- midilinkname.s     : name of the midi link

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    camd_nextMidiLink




@ENDNODE
@NODE camd_GetMsg "camd_GetMsg"

@{B}camd_GetMsg@{UB}

@{B}Syntax:@{UB}  succ.l =  camd_GetMsg \{\}

@{B}Description:@{UB}
Recevie the next waiting midi message in queue. It returns success, if there was a message waiting, that can be read using the camd_received_??? functions.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- succ.l     : -1 if there was a message waiting, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE camd_GetMsgDat1 "camd_GetMsgDat1"

@{B}camd_GetMsgDat1@{UB}

@{B}Syntax:@{UB}  dat.b =  camd_GetMsgDat1 \{\}

@{B}Description:@{UB}
Get the first data byte of the latest received midi message.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- dat.b     : data byte

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    camd_receive




@ENDNODE
@NODE camd_GetMsgDat2 "camd_GetMsgDat2"

@{B}camd_GetMsgDat2@{UB}

@{B}Syntax:@{UB}  dat.b =  camd_GetMsgDat2 \{\}

@{B}Description:@{UB}
Get the second data byte of the latest received midi message.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- dat.b     : data byte

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    camd_receive




@ENDNODE
@NODE camd_GetMsgLength "camd_GetMsgLength"

@{B}camd_GetMsgLength@{UB}

@{B}Syntax:@{UB}  blength.l = camd_GetMsgLength \{status.b\}

@{B}Description:@{UB}
Get the midi message length in bytes of the given status byte (this can be either 1, 2 or 3).

@{B}Inputs:@{UB}      
- status.b    : status byte

@{B}Result:@{UB}      
- blength.l     : byte length of midi message

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE camd_GetMsgMP "camd_GetMsgMP"

@{B}camd_GetMsgMP@{UB}

@{B}Syntax:@{UB}  midiport.b =  camd_GetMsgMP \{\}

@{B}Description:@{UB}
Get the midiport of the latest received midi message.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- midiport.b     : midiport of the last reveiced message

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    camd_receive




@ENDNODE
@NODE camd_GetMsgStatus "camd_GetMsgStatus"

@{B}camd_GetMsgStatus@{UB}

@{B}Syntax:@{UB}  status.b =  camd_GetMsgStatus \{\}

@{B}Description:@{UB}
Get the status byte of the latest received midi message.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- status.b     : status byte

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    camd_receive




@ENDNODE
@NODE camd_GetMsgTime "camd_GetMsgTime"

@{B}camd_GetMsgTime@{UB}

@{B}Syntax:@{UB}  timestamp.l =  camd_GetMsgTime \{\}

@{B}Description:@{UB}
Get the time stamp of the latest received midi message.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- timestamp.l     : time stamp of the received midi message

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    camd_receive




@ENDNODE
@NODE camd_GetSigFlag "camd_GetSigFlag"

@{B}camd_GetSigFlag@{UB}

@{B}Syntax:@{UB}  sigflag.l =  camd_GetSigFlag \{\}

@{B}Description:@{UB}
Get the signal flag that can be used to Wait_() for camd events.
Note: This function exists as a macro as well for faster performance.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- sigflag.l     : sigflag

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" !camd_GetSigFlag " link !camd_GetSigFlag}




@ENDNODE
@NODE camd_GetSysExData "camd_GetSysExData"

@{B}camd_GetSysExData@{UB}

@{B}Syntax:@{UB} camd_GetSysExData \{ptr.l,maxlength.l\}

@{B}Description:@{UB}
Receive SysEx data that is waiting in SysEx buffer. The data will be copied to the given memory location, but maxlength will not be exceeded.
SysEx data is waiting, if you received the SysEx status byte (0xF0) as a midi message.
Make sure that your buffer is big enough!

@{B}Inputs:@{UB}      
- ptr.l    : memory pointer to copy the SysEx data to
- maxlength.l    : maximum byte length to copy

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" camd_SkipSysEx " link camd_SkipSysEx}, @{" camd_GetSysExLength " link camd_GetSysExLength}




@ENDNODE
@NODE camd_GetSysExLength "camd_GetSysExLength"

@{B}camd_GetSysExLength@{UB}

@{B}Syntax:@{UB}  blength.l =  camd_GetSysExLength \{\}

@{B}Description:@{UB}
Get the byte length of the waiting SysEx data in SysEx buffer.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- blength.l     : byte length of the waiting SysEx data

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE camd_Init "camd_Init"

@{B}camd_Init@{UB}

@{B}Syntax:@{UB}  succ.w = camd_Init \{appname.s,timecounter_ptr.l,@sigtask.l,@signal.l,@sysexbuffersize.l\}

@{B}Description:@{UB}
Init the camd system for your application. You have to provide an appname, a pointer to a counter that is updated elsewhere, e.g. within an interrupt.
Optional you can provide a pointer to a Task structure of a task that should be signaled everytime there is a new midi message waiting. The singal send can be given or it will be allocated automaticaly. Then, it can be retrieved by @{" camd_GetSigFlag " link camd_GetSigFlag}.
Note: signal.l is a signal number, NOT a sigflag. E.g. is signal is 4 the sigflag = 1 LSL 4 = 16.

@{B}Inputs:@{UB}      
- appname.s    : name of your application
- timecounter_ptr.l    : pointer to a timestamp counter
- sigtask.l    : pointer to the to-be-signaled task
- signal.l    : signal, if you dont want this to be allocated automaticall
- sysexbuffersize.l    : ???

@{B}Result:@{UB}      
- succ.w     : -1 if everyting went well, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE camd_IsSysEx "camd_IsSysEx"

@{B}camd_IsSysEx@{UB}

@{B}Syntax:@{UB}  succ.l =  camd_IsSysEx \{\}

@{B}Description:@{UB}
Check if the latest received message is a SysEx message.
Note: The function simply checks the status byte of the latest received message to be equal 0xF0.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- succ.l     : -1 if the received message is a SysEx message, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    camd_receive




@ENDNODE
@NODE camd_RemReceiver "camd_RemReceiver"

@{B}camd_RemReceiver@{UB}

@{B}Syntax:@{UB} camd_RemReceiver \{mp.l\}

@{B}Description:@{UB}
Remove a receiver link to the given midiport that was created by camd_add_sender.

@{B}Inputs:@{UB}      
- mp.l    : midiport [0...max_camdlinks-1]

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE camd_RemSender "camd_RemSender"

@{B}camd_RemSender@{UB}

@{B}Syntax:@{UB} camd_RemSender \{mp.l\}

@{B}Description:@{UB}
Remove a sender link to the given midiport that was created by camd_add_sender.

@{B}Inputs:@{UB}      
- mp.l    : midiport [0...max_camdlinks-1]

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    camd_add_sender




@ENDNODE
@NODE camd_SendMem "camd_SendMem"

@{B}camd_SendMem@{UB}

@{B}Syntax:@{UB} camd_SendMem \{mp.l,ptr.l,blength.l\}

@{B}Description:@{UB}
Send MIDI data to the midiport.

@{B}Inputs:@{UB}      
- mp.l    : midiport [0...max_camdlinks-1]
- ptr.l    : pointer to memory buffer that holds the midi data
- blength.l    : byte length of the midi data

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE camd_SendMsg "camd_SendMsg"

@{B}camd_SendMsg@{UB}

@{B}Syntax:@{UB} camd_SendMsg \{mp.l,*msg.MidiMsg\}

@{B}Description:@{UB}
Send a single midi message to the given midiport.

@{B}Inputs:@{UB}      
- mp.l    : midiport [0...max_camdlinks-1]
- *msg.MidiMsg    : pointer to the MidiMsg to send

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE camd_SkipSysEx "camd_SkipSysEx"

@{B}camd_SkipSysEx@{UB}

@{B}Syntax:@{UB} camd_SkipSysEx \{\}

@{B}Description:@{UB}
Skip SysEx data that is waiting in SysEx buffer.
SysEx data is waiting, if you received the SysEx status byte (0xF0) as a midi message.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    camd_sysex_receive




@ENDNODE
