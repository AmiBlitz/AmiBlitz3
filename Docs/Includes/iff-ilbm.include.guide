@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "iff-ilbm.include"

@{B}iff-ilbm.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" ilbm_DecodeAlpha " link ilbm_DecodeAlpha} 
   @{" ilbm_RLDecode " link ilbm_RLDecode} 
   @{" ilbm_RLEncode " link ilbm_RLEncode} 

@{B}Private Function Index:@{UB}

   @{" _ilbm_write_old " link _ilbm_write_old} 
   @{" ilbm_Close " link ilbm_Close} 
   @{" ilbm_FixUp " link ilbm_FixUp} 
   @{" ilbm_Open " link ilbm_Open} 
   @{" ilbm_ReadAlpha " link ilbm_ReadAlpha} 
   @{" ilbm_WriteARGBBitMap " link ilbm_WriteARGBBitMap} 
   @{" ilbm_WriteGrabChunk " link ilbm_WriteGrabChunk} 
   @{" ilbm_WriteHeader " link ilbm_WriteHeader} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} iff-ilbm.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 29/12/2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB}  Amiblitz2.4

@{B}Purpose:@{UB}
This is an include to support the image.include with iff-ilbm load/save functionality.

@{B}Abstract:@{UB}
This include is of not much use stand alone, as you can load and save images through the image.include, but you might want to have a look at the source code for educational reasons.

This include loads the alpha channel of an IFF-ILBM file creatd with Arteffects 3+. Datatypes can not load the alpha channel of those files. It provides also iff-ilbm save functions that include the alpha channel.

@{B}User Constants:@{UB}     none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ilbm_write_old "_ilbm_write_old"

@{B}_ilbm_write_old@{UB}

@{B}Syntax:@{UB}  result.l = _ilbm_write_old \{dos.l,dataptr.l,img_width.l,img_height.l,bpr.l,img_grabx.l,img_graby.l,@compress.l,@usealpha.l\}

@{B}Description:@{UB}
* obsolete *

@{B}Inputs:@{UB}      
- dos.l    : ???
- dataptr.l    : ???
- img_width.l    : ???
- img_height.l    : ???
- bpr.l    : ???
- img_grabx.l    : ???
- img_graby.l    : ???
- compress.l    : ???
- usealpha.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ilbm_Close "ilbm_Close"

@{B}ilbm_Close@{UB}

@{B}Syntax:@{UB} ilbm_Close \{\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ilbm_DecodeAlpha "ilbm_DecodeAlpha"

@{B}ilbm_DecodeAlpha@{UB}

@{B}Syntax:@{UB} ilbm_DecodeAlpha \{destbuffer.l,awidth.l,aheight.l\}

@{B}Description:@{UB}
Decode the allpha mask from an "ALPH" chunk, as found in Arteffects iff-ilbm files.

@{B}Inputs:@{UB}      
- destbuffer.l    : memory pointer to awidth * aheight * 1 bytes
- awidth.l    : width of alpha mask in bytes
- aheight.l    : height of alpha mask in bytes

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ilbm_FixUp "ilbm_FixUp"

@{B}ilbm_FixUp@{UB}

@{B}Syntax:@{UB}  result.l = ilbm_FixUp \{dos.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- dos.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ilbm_Open "ilbm_Open"

@{B}ilbm_Open@{UB}

@{B}Syntax:@{UB}  result.l = ilbm_Open \{filename.s\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- filename.s    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ilbm_RLDecode "ilbm_RLDecode"

@{B}ilbm_RLDecode@{UB}

@{B}Syntax:@{UB}  decodedlength.l = ilbm_RLDecode \{srcbuff.l,dstbuff.l,slength.l,@dlength.l\}

@{B}Description:@{UB}
Perform run-length decoding.

@{B}Inputs:@{UB}      
- srcbuff.l    : memory pointer to rl encoded buffer
- dstbuff.l    : memory pointer to decoded (raw) buffer
- slength.l    : byte length of the rl encoded data
- dlength.l    : maximum byte length of the decoded buffer

@{B}Result:@{UB}      
- decodedlength.l     : decoded byte length

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ilbm_RLEncode "ilbm_RLEncode"

@{B}ilbm_RLEncode@{UB}

@{B}Syntax:@{UB}  encodelength.l = ilbm_RLEncode \{srcbuff.l,dstbuff.l,slength.l,@dlength.l\}

@{B}Description:@{UB}
Perform run-length encoding.

@{B}Inputs:@{UB}      
- srcbuff.l    : memory pointer to source data buffer
- dstbuff.l    : memory pointer to rl encoded buffer
- slength.l    : byte length of the source data
- dlength.l    : maximum byte length allowed for destination buffer

@{B}Result:@{UB}      
- encodelength.l     : byte length of rl encoded buffer (compressed)

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ilbm_ReadAlpha "ilbm_ReadAlpha"

@{B}ilbm_ReadAlpha@{UB}

@{B}Syntax:@{UB}  succ.l = ilbm_ReadAlpha \{\}

@{B}Description:@{UB}
* private
Find and read the ALPH chunk.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- succ.l     : -1 if ALPH chunk was found and loaded, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ilbm_WriteARGBBitMap "ilbm_WriteARGBBitMap"

@{B}ilbm_WriteARGBBitMap@{UB}

@{B}Syntax:@{UB}  result.l = ilbm_WriteARGBBitMap \{dos.l,ARGBptr.l,img_width.l,img_height.l,bpr.l,@compress.l,@pixfmt.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- dos.l    : ???
- ARGBptr.l    : ???
- img_width.l    : ???
- img_height.l    : ???
- bpr.l    : ???
- compress.l    : ???
- usealpha.l    : ???
- pixfmt.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ilbm_WriteGrabChunk "ilbm_WriteGrabChunk"

@{B}ilbm_WriteGrabChunk@{UB}

@{B}Syntax:@{UB}  result.l = ilbm_WriteGrabChunk \{dos.l,img_grabx.l,img_graby.l\}

@{B}Description:@{UB}
* private *
Write the brush-grab chunk as found in Arteffects files.

@{B}Inputs:@{UB}      
- dos.l    : ???
- img_grabx.l    : ???
- img_graby.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ilbm_WriteHeader "ilbm_WriteHeader"

@{B}ilbm_WriteHeader@{UB}

@{B}Syntax:@{UB}  result.l = ilbm_WriteHeader \{dos.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- dos.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
