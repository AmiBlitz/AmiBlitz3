@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "error.include"

@{B}error.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" ask " link ask} 
   @{" error " link error} 
   @{" error_Clear " link error_Clear} 
   @{" error_GetCode " link error_GetCode} 
   @{" error_SetFlags " link error_SetFlags} 
   @{" message " link message} 
   @{" serror " link serror} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB}  @{" error " link error}.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 18.08.2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB} Amiblitz2.4

@{B}Purpose:@{UB}
Provide simple and encapsuled @{" error " link error} output, also suitable for dialog requesters.

@{B}Abstract:@{UB}
This inlcude provide some simple commands to display @{" error " link error} messages.
Why use the @{" error " link error}.include ?
Imagine you write a big program. You need a lot of @{" error " link error} messages. If you program them directly using a non-encapsuled command, you can not change all messages in case you decide to use another type of requester or way to display the messages.
If you use always e.g. @{" error " link error} \{"Something went wrong!"\}, you have the output style under control and can change it application wide and quickly from requester to CLI output or antoher type of requester or even mute it,
dependent what the errror function is doing.

The @{" error " link error} include uses simple OS requesters by default, but can be configured differently by setting @{" error " link error} flags.

This include is used by nearly all other includes, so the functions will be available to you. I recommend that you use the functions for your debugging/@{" error " link error} output to be consistant.
You may change the @{" error " link error} inlcude, if you are not satisfied with the style of the requester or even may write your own "@{" error " link error}.include".

@{B}User Constants:@{UB}

@{B}Example:@{UB}     
. XInclude "@{" error " link error}.inlcude"
. @{" error " link error} \{"Wooohooo !"\}
. End



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ask "ask"

@{B}ask@{UB}

@{B}Syntax:@{UB}  result.l = ask \{text.s,buttons.s\}

@{B}Description:@{UB}
Ask the user for a decision.
The label text of each button has to be seperated by "|".
The buttons are counted from left to right, starting with 0.
Usually, you place your "cancel" option as the most left button.

@{B}Inputs:@{UB}      
- text.s    : Info text for the user
- buttons.s    : Button text seperated by "|" if you want several buttons

@{B}Result:@{UB}      
- result.l     : number of button that was hit

@{B}Example:@{UB}     
If ask\{"Are you really sure ?","Yes|Ooops!"\}
  NPrint "Formatting volume "Sys:" ..."
End If

or

choice.l = ask\{"Save picture as ...","IFF-ILBM|PNG|JPEG"\}
Select choice
  case 0
    ; save as JPEG
  case 1
    ; save as PNG
  case 2
    ; save as IFF-ILBM
End Select



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE error "error"

@{B}error@{UB}

@{B}Syntax:@{UB} error \{text.s,@errorcode.l,@onlyonce.l\}

@{B}Description:@{UB}
Display a simple requester that shows your text.

@{B}Inputs:@{UB}      
- text.s    : error text to display
- errorcode.l    : optionally an error code, that can be asked later in the program
- onlyonce.l    : in combination with the error code parameter the same error with the same errorcode will be displayed only once, avoiding that the user has to click 1000x "error wile reading file!" or something similar.

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" error_Clear " link error_Clear}




@ENDNODE
@NODE error_Clear "error_Clear"

@{B}error_Clear@{UB}

@{B}Syntax:@{UB} error_Clear \{\}

@{B}Description:@{UB}
Clear the last @{" error " link error} code, so no @{" error " link error} will be reported and the next @{" message " link message} will be displayed in any case.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     
@{" error " link error} \{"This is an @{" error " link error} @{" message " link message} with code 666 !",666\}
@{" error " link error} \{"This is an @{" error " link error} as well, but it will be not displayed because it has the same @{" error " link error} code than the previous @{" error " link error}, and the onlyonce parameter set to -1 (default)!",666\}
Nprint "The last @{" error " link error} code was: ",error_GetCode\{\}
error_Clear\{\}
@{" error " link error} \{"This @{" error " link error} will be displayed, because we called error_clear!",666\}
@{" error " link error} \{"This @{" error " link error} will be displayed, because we set onlyonce to false!",666,false\}
@{" error " link error} \{"This @{" error " link error} will be displayed, because we have another type of @{" error " link error} !",667\}


@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" error " link error}, @{" error_GetCode " link error_GetCode}




@ENDNODE
@NODE error_GetCode "error_GetCode"

@{B}error_GetCode@{UB}

@{B}Syntax:@{UB}  result.l = error_GetCode \{\}

@{B}Description:@{UB}
Return the @{" error " link error} code from the last call of @{" error " link error}.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : error code, defined by the programmer when calling the error function

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE error_SetFlags "error_SetFlags"

@{B}error_SetFlags@{UB}

@{B}Syntax:@{UB} error_SetFlags \{flags.l\}

@{B}Description:@{UB}
Set the @{" error " link error} flags, means the way that your @{" error " link error} is outputted:

#error_requester = 1  ; pop up requester
#error_logfile   = 2  ; write into logfile, can be also "CON:" for console output
#error_auto  = 4  ; auto "ok" @{" ask " link ask}

You may combine the flags with OR.

@{B}Inputs:@{UB}      
- flags.l    : error flags

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE message "message"

@{B}message@{UB}

@{B}Syntax:@{UB} message \{text.s\}

@{B}Description:@{UB}
The same like @{" error " link error}, but displays another requester title indication that this is a message, not an @{" error " link error}.

@{B}Inputs:@{UB}      
- text.s    : text of the message

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE serror "serror"

@{B}serror@{UB}

@{B}Syntax:@{UB} serror \{text.s\}

@{B}Description:@{UB}
"Serious error". Same like @{" error " link error}, but your program will be terminated within this function.
Use this if an @{" error " link error} occures where you can not continue running your program.

@{B}Inputs:@{UB}      
- text.s    : error text

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" error " link error}




@ENDNODE
