@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "multilist.include"

@{B}multilist.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" ml_ActivateNode " link ml_ActivateNode} 
   @{" ml_AddChild " link ml_AddChild} 
   @{" ml_AddChildSorted " link ml_AddChildSorted} 
   @{" ml_AddNode " link ml_AddNode} 
   @{" ml_AddNodeSorted " link ml_AddNodeSorted} 
   @{" ml_AddPathChild " link ml_AddPathChild} 
   @{" ml_AddPathNode " link ml_AddPathNode} 
   @{" ml_CollapsePath " link ml_CollapsePath} 
   @{" ml_CreatePathTree " link ml_CreatePathTree} 
   @{" ml_CreatePathTreeRoot " link ml_CreatePathTreeRoot} 
   @{" ml_DeactivateAll " link ml_DeactivateAll} 
   @{" ml_DeactivateNode " link ml_DeactivateNode} 
   @{" ml_Draw " link ml_Draw} 
   @{" ml_ExpandPath " link ml_ExpandPath} 
   @{" ml_FindNode " link ml_FindNode} 
   @{" ml_GetFirstNode " link ml_GetFirstNode} 
   @{" ml_GetLabelString " link ml_GetLabelString} 
   @{" ml_GetNextNode " link ml_GetNextNode} 
   @{" ml_GetPixelWidth " link ml_GetPixelWidth} 
   @{" ml_GetPrevNode " link ml_GetPrevNode} 
   @{" ml_GetRowHeight " link ml_GetRowHeight} 
   @{" ml_GetUserString " link ml_GetUserString} 
   @{" ml_RemoveAllChildren " link ml_RemoveAllChildren} 
   @{" ml_RemoveAllNodes " link ml_RemoveAllNodes} 
   @{" ml_RemoveNode " link ml_RemoveNode} 
   @{" ml_SetCollapsed " link ml_SetCollapsed} 
   @{" ml_SetExpanded " link ml_SetExpanded} 
   @{" ml_SetLabelString " link ml_SetLabelString} 
   @{" ml_SetUserString " link ml_SetUserString} 

@{B}Private Function Index:@{UB}

   @{" _ml_AddPart " link _ml_AddPart} 
   @{" _ml_FilePart " link _ml_FilePart} 
   @{" _ml_PathPart " link _ml_PathPart} 
   @{" ml_GetNode " link ml_GetNode} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE Introduction "Introduction"

@{B}Date:@{UB} 19/01/2007

@{B}Name:@{UB} multilist.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB}  Amiblitz2.4

@{B}Purpose:@{UB}
Provide multi-list functionality.
The "multi-list" is actually very similar to a "tree".

@{B}Abstract:@{UB}
A multi-list is a "normal" list, but each item can have another multi-list atached.
This is the most common way to represent a file directory structure. This is why this include has some special functions for file handling and a function to draw the multi list, which is used in tui.include.
Each node can have a label string and a user string, and a user value.
The user value could be used to store ID numbers or a pointer to more data belonging to the node. The structure is not very flexible, but ideal for tree-views on data like file systems.

@{B}User Constants:@{UB}  none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ml_AddPart "_ml_AddPart"

@{B}_ml_AddPart@{UB}

@{B}Syntax:@{UB}  result.s = _ml_AddPart \{pathpart.s,filepart.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- pathpart.s    : ???
- filepart.s    : ???

@{B}Result:@{UB}      
- result.s     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ml_FilePart "_ml_FilePart"

@{B}_ml_FilePart@{UB}

@{B}Syntax:@{UB}  result.s = _ml_FilePart \{filename.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- filename.s    : ???

@{B}Result:@{UB}      
- result.s     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ml_PathPart "_ml_PathPart"

@{B}_ml_PathPart@{UB}

@{B}Syntax:@{UB}  result.s = _ml_PathPart \{filename.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- filename.s    : ???

@{B}Result:@{UB}      
- result.s     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_ActivateNode "ml_ActivateNode"

@{B}ml_ActivateNode@{UB}

@{B}Syntax:@{UB} ml_ActivateNode \{*node.ml_node\}

@{B}Description:@{UB}
Mark a node as active.

@{B}Inputs:@{UB}      
- *node.ml_node    : pointer to a node

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_AddChild "ml_AddChild"

@{B}ml_AddChild@{UB}

@{B}Syntax:@{UB}  *node.l = ml_AddChild \{*parent_node.ml_node,typ.b,label_text.s,user_text.s,user_data.l\}

@{B}Description:@{UB}
Add a new node as a child to an existing node.

@{B}Inputs:@{UB}      
- *parent_node.ml_node : pointer to a node
- typ.b                : ???
- label_text.s         : text string for the node name
- user_text.s          : text string for the node content
- user_data.l          : long word for various use

@{B}Result:@{UB}      
- *node.ml_node     : pointer to the resulting node

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_AddChildSorted "ml_AddChildSorted"

@{B}ml_AddChildSorted@{UB}

@{B}Syntax:@{UB}  result.l = ml_AddChildSorted \{*parent_node.ml_node,typ.b,label_text.s,user_text.s,user_data.l\}

@{B}Description:@{UB}
Add a new node as a child to an existing node. The node will be inserted sorted after the label text.

@{B}Inputs:@{UB}      
- *parent_node.ml_node : ???
- typ.b                : ???
- label_text.s         : ???
- user_text.s          : ???
- user_data.l          : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_AddNode "ml_AddNode"

@{B}ml_AddNode@{UB}

@{B}Syntax:@{UB}  result.l = ml_AddNode \{*prev_node.ml_node,typ.b,label_text.s,user_text.s,user_data.l\}

@{B}Description:@{UB}
Add a new node to the list after prev_node.

@{B}Inputs:@{UB}      
- *prev_node.ml_node : ???
- typ.b              : ???
- label_text.s       : ???
- user_text.s        : ???
- user_data.l        : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_AddNodeSorted "ml_AddNodeSorted"

@{B}ml_AddNodeSorted@{UB}

@{B}Syntax:@{UB}  result.l = ml_AddNodeSorted \{*next_node.ml_node,typ.b,label_text.s,user_text.s,user_data.l\}

@{B}Description:@{UB}
Add a new node to the list refered by next_node, but insert it sorted according the label_text.

@{B}Inputs:@{UB}      
- *next_node.ml_node : ???
- typ.b              : ???
- label_text.s       : ???
- user_text.s        : ???
- user_data.l        : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_AddPathChild "ml_AddPathChild"

@{B}ml_AddPathChild@{UB}

@{B}Syntax:@{UB} ml_AddPathChild \{*parent_node.ml_node,path.s,@pattern.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *parent_node.ml_node : ???
- path.s               : ???
- pattern.s            : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_AddPathNode "ml_AddPathNode"

@{B}ml_AddPathNode@{UB}

@{B}Syntax:@{UB}  result.l = ml_AddPathNode \{*node.ml_node,path.s,@pattern.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *node.ml_node : ???
- path.s        : ???
- pattern.s     : ???

@{B}Result:@{UB}      
- result.l      : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_CollapsePath "ml_CollapsePath"

@{B}ml_CollapsePath@{UB}

@{B}Syntax:@{UB} ml_CollapsePath \{*node.ml_node\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *node.ml_node    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_CreatePathTree "ml_CreatePathTree"

@{B}ml_CreatePathTree@{UB}

@{B}Syntax:@{UB}  result.l = ml_CreatePathTree \{path.s,@pattern.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- path.s      : ???
- pattern.s   : ???

@{B}Result:@{UB}      
- result.l    : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_CreatePathTreeRoot "ml_CreatePathTreeRoot"

@{B}ml_CreatePathTreeRoot@{UB}

@{B}Syntax:@{UB}  result.l = ml_CreatePathTreeRoot \{path.s,name.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- path.s    : ???
- name.s    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_DeactivateAll "ml_DeactivateAll"

@{B}ml_DeactivateAll@{UB}

@{B}Syntax:@{UB} ml_DeactivateAll \{*node.ml_node\}

@{B}Description:@{UB}
Deactivate recursively all nodes and their children.

@{B}Inputs:@{UB}      
- *node.ml_node    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_DeactivateNode "ml_DeactivateNode"

@{B}ml_DeactivateNode@{UB}

@{B}Syntax:@{UB} ml_DeactivateNode \{*node.ml_node\}

@{B}Description:@{UB}
Mark a node as in-active.

@{B}Inputs:@{UB}      
- *node.ml_node    : node

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_Draw "ml_Draw"

@{B}ml_Draw@{UB}

@{B}Syntax:@{UB}  result.l = ml_Draw \{*rp.RastPort,*node.ml_node,firstpos.l,lastpos.l,x.l,y.l,sdepth.l,bgpen.l,bgpen_m.l\}

@{B}Description:@{UB}
Draw a multilist into a rastport from firstpos to lastpos.
The rastport needs to have a suitable clip region set to not overdraw the window borders etc.

@{B}Inputs:@{UB}      
- *rp.RastPort    : rastport to draw into
- *node.ml_node   : node
- firstpos.l      : first pos
- lastpos.l       : last pos
- x.l             : x coordinate
- y.l             : y coodrinate
- sdepth.l        : spedth to start from
- bgpen.l         : background pen
- bgpen_m.l       : background marked pen

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_ExpandPath "ml_ExpandPath"

@{B}ml_ExpandPath@{UB}

@{B}Syntax:@{UB} ml_ExpandPath \{*node.ml_node,@pattern.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *node.ml_node  : ???
- pattern.s      : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_FindNode "ml_FindNode"

@{B}ml_FindNode@{UB}

@{B}Syntax:@{UB}  result.l = ml_FindNode \{*node.ml_node,spos.l\}

@{B}Description:@{UB}
Find a node at the position spos.

@{B}Inputs:@{UB}      
- *node.ml_node : ???
- spos.l        : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_GetFirstNode "ml_GetFirstNode"

@{B}ml_GetFirstNode@{UB}

@{B}Syntax:@{UB}  *head.l = ml_GetFirstNode \{*node.ml_node\}

@{B}Description:@{UB}
Get the first node of the list referred by node.
NOTE: This is useful if you plan to scan all items from this list.

@{B}Inputs:@{UB}      
- *node.ml_node    : node

@{B}Result:@{UB}      
- *head.ml_node    : first node in list

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_GetLabelString "ml_GetLabelString"

@{B}ml_GetLabelString@{UB}

@{B}Syntax:@{UB}  label.s = ml_GetLabelString \{*node.ml_node\}

@{B}Description:@{UB}
Get the label string of the node.

@{B}Inputs:@{UB}      
- *node.ml_node  : node

@{B}Result:@{UB}      
- label.s        : label string

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_GetNextNode "ml_GetNextNode"

@{B}ml_GetNextNode@{UB}

@{B}Syntax:@{UB}  *node.l = ml_GetNextNode \{*node.ml_node\}

@{B}Description:@{UB}
Get the next node of the list.
If the function returns 0, you reached the end of the list.

@{B}Inputs:@{UB}      
- *node.ml_node    : node

@{B}Result:@{UB}      
- *node.ml_node    : next node

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_GetNode "ml_GetNode"

@{B}ml_GetNode@{UB}

@{B}Syntax:@{UB}  result.l = ml_GetNode \{*node.ml_node,spos.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- *node.ml_node    : ???
- spos.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_GetPixelWidth "ml_GetPixelWidth"

@{B}ml_GetPixelWidth@{UB}

@{B}Syntax:@{UB}  pixels.l = ml_GetPixelWidth \{*rp.RastPort,*node.ml_node,sdepth.l\}

@{B}Description:@{UB}
Calculate the width in pixels needed to draw the list in the current state.

@{B}Inputs:@{UB}      
- *rp.RastPort   : rastport to draw into
- *node.ml_node  : node to start
- sdepth.l       : ???

@{B}Result:@{UB}      
- pixels.l     : number of pixels

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_GetPrevNode "ml_GetPrevNode"

@{B}ml_GetPrevNode@{UB}

@{B}Syntax:@{UB}  *node.l = ml_GetPrevNode \{*node.ml_node\}

@{B}Description:@{UB}
Get the previous node of the list.
If the function return 0, you passed the head of the list.

@{B}Inputs:@{UB}      
- *node.ml_node  : node

@{B}Result:@{UB}      
- *node.ml_node  : previous node

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_GetRowHeight "ml_GetRowHeight"

@{B}ml_GetRowHeight@{UB}

@{B}Syntax:@{UB}  rows.l = ml_GetRowHeight \{*node.ml_node\}

@{B}Description:@{UB}
Calculate the number of rows the list would need to be shown, respecting which node is expanded and which is collapsed.
NOTE: This is useful to set the dimensions of a scroller bar if you plan to make the list visible.

@{B}Inputs:@{UB}      
- *node.ml_node   : node

@{B}Result:@{UB}      
- rows.l          : number of rows

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_GetUserString "ml_GetUserString"

@{B}ml_GetUserString@{UB}

@{B}Syntax:@{UB}  string.s = ml_GetUserString \{*node.ml_node\}

@{B}Description:@{UB}
Get the user string of the node

@{B}Inputs:@{UB}      
- *node.ml_node   : node

@{B}Result:@{UB}      
- string.s        : user string

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_RemoveAllChildren "ml_RemoveAllChildren"

@{B}ml_RemoveAllChildren@{UB}

@{B}Syntax:@{UB} ml_RemoveAllChildren \{*node.ml_node\}

@{B}Description:@{UB}
Remove all children of the node.

@{B}Inputs:@{UB}      
- *node.ml_node    : node

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_RemoveAllNodes "ml_RemoveAllNodes"

@{B}ml_RemoveAllNodes@{UB}

@{B}Syntax:@{UB} ml_RemoveAllNodes \{*node.ml_node\}

@{B}Description:@{UB}
Remove the complete list (and all child lists) referred by node. The node does not need to be the head of the list.

@{B}Inputs:@{UB}      
- *node.ml_node    : node

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_RemoveNode "ml_RemoveNode"

@{B}ml_RemoveNode@{UB}

@{B}Syntax:@{UB} ml_RemoveNode \{*node.ml_node\}

@{B}Description:@{UB}
Remove a node (and all its children).

@{B}Inputs:@{UB}      
- *node.ml_node    : node to remove

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_SetCollapsed "ml_SetCollapsed"

@{B}ml_SetCollapsed@{UB}

@{B}Syntax:@{UB} ml_SetCollapsed \{*node.ml_node\}

@{B}Description:@{UB}
Clear the expanded flag of the node. If you draw the node, it will not show its children.

@{B}Inputs:@{UB}      
- *node.ml_node    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_SetExpanded "ml_SetExpanded"

@{B}ml_SetExpanded@{UB}

@{B}Syntax:@{UB} ml_SetExpanded \{*node.ml_node\}

@{B}Description:@{UB}
Set the expanded flag of the node. If you draw the node, it will show its children.

@{B}Inputs:@{UB}      
- *node.ml_node    : node

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_SetLabelString "ml_SetLabelString"

@{B}ml_SetLabelString@{UB}

@{B}Syntax:@{UB} ml_SetLabelString \{*node.ml_node,string.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *node.ml_node    : ???
- string.s    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ml_SetUserString "ml_SetUserString"

@{B}ml_SetUserString@{UB}

@{B}Syntax:@{UB} ml_SetUserString \{*node.ml_node,string.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *node.ml_node    : ???
- string.s    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
