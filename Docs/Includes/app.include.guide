@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "app.include"

@{B}app.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" app_AddWin " link app_AddWin} 
   @{" app_Free " link app_Free} 
   @{" app_GetEvent " link app_GetEvent} 
   @{" app_GetEventID " link app_GetEventID} 
   @{" app_GetEventNotify " link app_GetEventNotify} 
   @{" app_GetEventString " link app_GetEventString} 
   @{" app_GetEventWin " link app_GetEventWin} 
   @{" app_GetEventX " link app_GetEventX} 
   @{" app_GetEventY " link app_GetEventY} 
   @{" app_GetSigFlag " link app_GetSigFlag} 
   @{" app_HideIcon " link app_HideIcon} 
   @{" app_Init " link app_Init} 
   @{" app_RemWin " link app_RemWin} 
   @{" app_ShowIcon " link app_ShowIcon} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} app.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 11.03.2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB} Amiblitz2.4

@{B}Purpose:@{UB}
Provide App functionality for Amiblitz programs.

@{B}Abstract:@{UB}
This include adds 3 features to your program:
- create an menu entry in the Workbench menu under "tools"
- show/hide an app icon to the Workbench desktop
- drag&drop of icons to your windows or app icon

@{B}User Constants:@{UB}    none

@{B}Example:@{UB}     
__________________________________________________________________ snip!
. XINCLUDE "app.include.ab3"
.
. #notify_win   = 1
. #notify_popup = 2
. #notify_icon  = 3
.
. Window 0,0,0,320,200,$E,"AppTest",1,0
. If @{" app_Init " link app_Init} \{"MyApp","Blitz2:Amiblitz2","MyApp Menuitem",#notify_popup,#n. otify_icon\}
.   @{" app_AddWin " link app_AddWin} \{0,#notify_win\}
.   app_ShowIcon\{\}
.   While breakme.l=False
.     Wait_($FFFFFFFF)
.     If @{" app_GetEvent " link app_GetEvent} \{\}
.       Select @{" app_GetEventNotify " link app_GetEventNotify} \{\}
.         Case #notify_icon
.           message \{"File drop on Icon ! \\22"+@{" app_GetEventString " link app_GetEventString} \{\}+"\\22"\}
.         Case #notify_win
.           message \{"File drop in Window ! \\22"+@{" app_GetEventString " link app_GetEventString} \{\}+"\\22"\}
.         Case #notify_popup
.           message \{"PopUp !"\}
.       End Select
.     End If
.     If Event=#IDCMP_CLOSEWINDOW Then breakme = True
.   Wend
. End If
. End
__________________________________________________________________ snip!



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE app_AddWin "app_AddWin"

@{B}app_AddWin@{UB}

@{B}Syntax:@{UB} app_AddWin \{win.l,notify.l\}

@{B}Description:@{UB}
Add the app functionality to a Window blitzobject, after the window was opened.
The notify value will be retruned by app_event_notify, when the user drops an icons over this window. Using the app_event_x and app_event_y functions, you can check if the file was dropped in the desired area, e.g. a file lister.

@{B}Inputs:@{UB}      
- win.l    : Window blitzobject number
- notify.l    : notify value associated with the window

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    app_win_rem




@ENDNODE
@NODE app_Free "app_Free"

@{B}app_Free@{UB}

@{B}Syntax:@{UB} app_Free \{\}

@{B}Description:@{UB}
Free all resources allocated by @{" app_Init " link app_Init} and later usage of the app.include.
This function will be automatically called on autoexit.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" app_Init " link app_Init}




@ENDNODE
@NODE app_GetEvent "app_GetEvent"

@{B}app_GetEvent@{UB}

@{B}Syntax:@{UB}  succ.l = app_GetEvent \{\}

@{B}Description:@{UB}
Check for app events and return success if there was an event.
See app_event_id for possbile events.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- succ.l     : -1 if there was an event, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    app_event_id




@ENDNODE
@NODE app_GetEventID "app_GetEventID"

@{B}app_GetEventID@{UB}

@{B}Syntax:@{UB}  eventID.l = app_GetEventID \{\}

@{B}Description:@{UB}
The event ID can be one of:
  #app_menu      : someone picked the Workbench menu entry
  #app_icon      : someone doulbeclicked the app icon
  #app_icon_drop : someone dropped an icon on our app icon
  #app_window    : someone dropped an icon on our window

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- eventID.l     : ID value of the event type that happend

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    app_check




@ENDNODE
@NODE app_GetEventNotify "app_GetEventNotify"

@{B}app_GetEventNotify@{UB}

@{B}Syntax:@{UB}  notify.l = app_GetEventNotify \{\}

@{B}Description:@{UB}
Return the notify value that can be defined by the user and is associated with the last event.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- notify.l     : user defined notify value

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    app_check




@ENDNODE
@NODE app_GetEventString "app_GetEventString"

@{B}app_GetEventString@{UB}

@{B}Syntax:@{UB}  result.s = app_GetEventString \{\}

@{B}Description:@{UB}
Return a string that is associated with the last event. E.g., if someone drops an file icon on your app icon or window, this is the complete dos filename.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.s     : string that is associated with the last event

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    app_check




@ENDNODE
@NODE app_GetEventWin "app_GetEventWin"

@{B}app_GetEventWin@{UB}

@{B}Syntax:@{UB}  win.l = app_GetEventWin \{\}

@{B}Description:@{UB}
Return the Window Blitzobject that belongs to the last event.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- win.l     : Window Blitzobject

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    app_check




@ENDNODE
@NODE app_GetEventX "app_GetEventX"

@{B}app_GetEventX@{UB}

@{B}Syntax:@{UB}  x.l = app_GetEventX \{\}

@{B}Description:@{UB}
Return the X coordinate of the last event, usually relative to the event windows top left edge.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- x.l     : X coordinate

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    app_check, app_event_y




@ENDNODE
@NODE app_GetEventY "app_GetEventY"

@{B}app_GetEventY@{UB}

@{B}Syntax:@{UB}  y.l = app_GetEventY \{\}

@{B}Description:@{UB}
Return the Y coordinate of the last event, usually relative to the event windows top left edge.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- y.l     : Y coordinate

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    app_check, app_event_x




@ENDNODE
@NODE app_GetSigFlag "app_GetSigFlag"

@{B}app_GetSigFlag@{UB}

@{B}Syntax:@{UB}  sigf.l = app_GetSigFlag \{\}

@{B}Description:@{UB}
Return the signal flag of the app event message port. You can use this in your event loop within Wait_().

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- sigf.l     : signal flag of the app event messageport

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE app_HideIcon "app_HideIcon"

@{B}app_HideIcon@{UB}

@{B}Syntax:@{UB} app_HideIcon \{\}

@{B}Description:@{UB}
Hide the app icon. It is save to clall this function if the icon is already hidden or there is no icon defined.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" app_ShowIcon " link app_ShowIcon}, @{" app_Init " link app_Init}




@ENDNODE
@NODE app_Init "app_Init"

@{B}app_Init@{UB}

@{B}Syntax:@{UB}  succ.l = app_Init \{name.s,iconfile.s,menuname.s,popup_notify.l,icon_notify.l\}

@{B}Description:@{UB}
Init the app functionality for your application.

@{B}Inputs:@{UB}      
- name.s    : name of your application
- iconfile.s    : dos path to an .info file that is used as an app icon
- menuname.s    : name of the menu entry that will be create in Workbenchs tool menu
- popup_notify.l    : notify value if the user wants to pop up your application (menu entry or click on app icon)
- icon_notify.l    : notify value if the user drops a file icon on the icon

@{B}Result:@{UB}      
- succ.l     : -1 if everything went well, 0 if it failed

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE app_RemWin "app_RemWin"

@{B}app_RemWin@{UB}

@{B}Syntax:@{UB} app_RemWin \{win.l\}

@{B}Description:@{UB}
Remove the resources associated with the Window blitzobject, on which @{" app_AddWin " link app_AddWin} was applied.

@{B}Inputs:@{UB}      
- win.l    : Window blitzobject number

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE app_ShowIcon "app_ShowIcon"

@{B}app_ShowIcon@{UB}

@{B}Syntax:@{UB} app_ShowIcon \{\}

@{B}Description:@{UB}
Show the app icon on the Workench desktop. It it save to call this function if the icon is already visible or if no icon was defined.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
