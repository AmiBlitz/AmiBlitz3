@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "dos.include"

@{B}dos.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" dos_AddAssign " link dos_AddAssign} 
   @{" dos_AddPart " link dos_AddPart} 
   @{" dos_AddPartAB3 " link dos_AddPartAB3} 
   @{" dos_Check " link dos_Check} 
   @{" dos_CheckAssign " link dos_CheckAssign} 
   @{" dos_CheckDiskSpace " link dos_CheckDiskSpace} 
   @{" dos_CheckLib " link dos_CheckLib} 
   @{" dos_CheckStackSize " link dos_CheckStackSize} 
   @{" dos_CloseToolTypes " link dos_CloseToolTypes} 
   @{" dos_Copy " link dos_Copy} 
   @{" dos_CreateDir " link dos_CreateDir} 
   @{" dos_CreateDosList " link dos_CreateDosList} 
   @{" dos_CreateFileList " link dos_CreateFileList} 
   @{" dos_Delete " link dos_Delete} 
   @{" dos_Exist " link dos_Exist} 
   @{" dos_FilePart " link dos_FilePart} 
   @{" dos_FilePartAB3 " link dos_FilePartAB3} 
   @{" dos_FlushToolTypes " link dos_FlushToolTypes} 
   @{" dos_Free " link dos_Free} 
   @{" dos_FreeArgs " link dos_FreeArgs} 
   @{" dos_FromBlitz " link dos_FromBlitz} 
   @{" dos_FromCLI " link dos_FromCLI} 
   @{" dos_FromWB " link dos_FromWB} 
   @{" dos_GetArg " link dos_GetArg} 
   @{" dos_GetExt " link dos_GetExt} 
   @{" dos_GetFileDate " link dos_GetFileDate} 
   @{" dos_GetFileSize " link dos_GetFileSize} 
   @{" dos_GetFileSizeEx " link dos_GetFileSizeEx} 
   @{" dos_GetNextArg " link dos_GetNextArg} 
   @{" dos_GetNumArgs " link dos_GetNumArgs} 
   @{" dos_GetProgDir " link dos_GetProgDir} 
   @{" dos_GetProgFile " link dos_GetProgFile} 
   @{" dos_GetProgIcon " link dos_GetProgIcon} 
   @{" dos_GetStackSize " link dos_GetStackSize} 
   @{" dos_GetStartDir " link dos_GetStartDir} 
   @{" dos_GetStartFile " link dos_GetStartFile} 
   @{" dos_GetStartIcon " link dos_GetStartIcon} 
   @{" dos_GetToolFloat " link dos_GetToolFloat} 
   @{" dos_GetToolHex " link dos_GetToolHex} 
   @{" dos_GetToolState " link dos_GetToolState} 
   @{" dos_GetToolString " link dos_GetToolString} 
   @{" dos_GetToolSwitch " link dos_GetToolSwitch} 
   @{" dos_GetToolValue " link dos_GetToolValue} 
   @{" dos_GetWBArg " link dos_GetWBArg} 
   @{" dos_GetWBLock " link dos_GetWBLock} 
   @{" dos_GetWBNumArgs " link dos_GetWBNumArgs} 
   @{" dos_IsDir " link dos_IsDir} 
   @{" dos_OpenToolTypes " link dos_OpenToolTypes} 
   @{" dos_ParentPath " link dos_ParentPath} 
   @{" dos_ParentPathAB3 " link dos_ParentPathAB3} 
   @{" dos_PathPart " link dos_PathPart} 
   @{" dos_PathPartAB3 " link dos_PathPartAB3} 
   @{" dos_ReadWBArgs " link dos_ReadWBArgs} 
   @{" dos_RemAssign " link dos_RemAssign} 
   @{" dos_RemExt " link dos_RemExt} 
   @{" dos_RemPath " link dos_RemPath} 
   @{" dos_Rename " link dos_Rename} 
   @{" dos_RunCli " link dos_RunCli} 
   @{" dos_RunWB " link dos_RunWB} 
   @{" dos_ScanAssigns " link dos_ScanAssigns} 
   @{" dos_ScanDevices " link dos_ScanDevices} 
   @{" dos_ScanDir " link dos_ScanDir} 
   @{" dos_ScanVolumes " link dos_ScanVolumes} 
   @{" dos_SetAssign " link dos_SetAssign} 
   @{" dos_SetAssignLock " link dos_SetAssignLock} 
   @{" dos_SetDebugExe " link dos_SetDebugExe} 
   @{" dos_SetExt " link dos_SetExt} 
   @{" dos_SetProtect " link dos_SetProtect} 
   @{" dos_SetTaskPri " link dos_SetTaskPri} 
   @{" dos_SetToolFloat " link dos_SetToolFloat} 
   @{" dos_SetToolHex " link dos_SetToolHex} 
   @{" dos_SetToolState " link dos_SetToolState} 
   @{" dos_SetToolString " link dos_SetToolString} 
   @{" dos_SetToolSwitch " link dos_SetToolSwitch} 
   @{" dos_SetToolValue " link dos_SetToolValue} 
   @{" dos_Trim " link dos_Trim} 
   @{" dos_TrimFileName " link dos_TrimFileName} 

@{B}Private Function Index:@{UB}

   @{" dos_ReadArgs " link dos_ReadArgs} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB}  dos.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 18.08.2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB} Amiblitz3.0

@{B}Purpose:@{UB}
Provide a lot of nice DOS releated functions to Amiblitz2.

@{B}Abstract:@{UB}
The include is a collection of functions like concatenating or splitting of filenames, running CLI or WB programs etc.
Everything was coded to be OS friendly. Some of the functions can be found as Blitzbasic functions as well, but here they are transparent what they are really doing.

@{B}User Constants:@{UB}

#USE_WBSTARTUPMSG=0
0 = dont get the pointer to the WBStartUpMessage
1 = get the pointer, needed for dos_GetWB... functions
Note: if you write a WB App, you want to set this to 1
      if you write a library or segment code, set this to 0

#CLIARGMODE=0
; 0 = use OS calls           ;  (default) does not support the CLI Arg simulation from IDE!
; 1 = use BlitzBasic Par$()
; 2 = disable completely but keeps dummy calls for compatibelity

This user constant is used by the functions @{" dos_ReadArgs " link dos_ReadArgs}, dos_nGetNxtArg and dos_NumArgs.
Default is 0.

@{B}Example:@{UB}                                                 none



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_AddAssign "dos_AddAssign"

@{B}dos_AddAssign@{UB}

@{B}Syntax:@{UB}  result.l = dos_AddAssign \{name.s,path.s\}

@{B}Description:@{UB}
Add a path to an existing assing.
Note: The assign must already exist. Use @{" dos_CheckAssign " link dos_CheckAssign} to choose between @{" dos_SetAssign " link dos_SetAssign} and dos_AddAssign.

@{B}Inputs:@{UB}      
- name.s    : name of the assing
- path.s    : name were the assing should point to

@{B}Result:@{UB}      
- result.l  : -1 if the assign was added 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_AddPart "dos_AddPart"

@{B}dos_AddPart@{UB}

@{B}Syntax:@{UB}  result.s = dos_AddPart \{pathpart.s,filepart.s\}

@{B}Description:@{UB}
Concatenate a path and a filename.

@{B}Inputs:@{UB}      
- pathpart.s   : dos path
- filepart.s   : file name

@{B}Result:@{UB}      
- result.s     : path+file name

@{B}Example:@{UB}     
NPrint dos_AddPart\{"Work:Pictures","MyPic.gif"\}
NPrint dos_AddPart\{"Work:Pictures/","MyPic.gif"\}

Would both output "Work:Pictures/MyPic.gif".


@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" dos_FilePart " link dos_FilePart}, @{" dos_PathPart " link dos_PathPart}




@ENDNODE
@NODE dos_AddPartAB3 "dos_AddPartAB3"

@{B}dos_AddPartAB3@{UB}

@{B}Syntax:@{UB}  result.s = dos_AddPartAB3 \{path.s,fil.s\}

@{B}Description:@{UB}
Concatenate a path and a filename, coded in AB3.
Note: Better use dos_AddPart!

@{B}Inputs:@{UB}      
- path.s    : dos path
- fil.s    : file name

@{B}Result:@{UB}      
- result.s     : path+file name

@{B}Example:@{UB}     
NPrint dos_AddPart\{"Work:Pictures","MyPic.gif"\}
NPrint dos_AddPart\{"Work:Pictures/","MyPic.gif"\}

Would both output "Work:Pictures/MyPic.gif".


@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" dos_FilePart " link dos_FilePart}, @{" dos_PathPart " link dos_PathPart}




@ENDNODE
@NODE dos_Check "dos_Check"

@{B}dos_Check@{UB}

@{B}Syntax:@{UB}  result.l = dos_Check \{filename.s\}

@{B}Description:@{UB}
Tried to open a file and closes it again. It returns -1 if everything went well, or the DOS error code if something went wrong.

@{B}Inputs:@{UB}      
- filename.s    : file name to check

@{B}Result:@{UB}      
- result.l     : -1 or DOS error code

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_CheckAssign "dos_CheckAssign"

@{B}dos_CheckAssign@{UB}

@{B}Syntax:@{UB}  result.l = dos_CheckAssign \{name.s\}

@{B}Description:@{UB}
Check if the requestet assign exists (it does not check devices or volumes)

@{B}Inputs:@{UB}      
- name.s    : assign to check

@{B}Result:@{UB}      
- result.l  : -1 if the device exists, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_CheckDiskSpace "dos_CheckDiskSpace"

@{B}dos_CheckDiskSpace@{UB}

@{B}Syntax:@{UB}  result.w = dos_CheckDiskSpace \{disk.s,bytes.f\}

@{B}Description:@{UB}
Check if there is bytes.f amount of memory on the given disk path available.
Note: "bytes.f" is a float value, and is allowed to be greater than 2GB.

@{B}Inputs:@{UB}      
- disk.s   : name of a disk or directory, e.g. "Sys:" or "Sys:T"
- bytes.f  : number of bytes

@{B}Result:@{UB}      
- result.w     : -1 if the memory is available, 0 if not

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_CheckLib "dos_CheckLib"

@{B}dos_CheckLib@{UB}

@{B}Syntax:@{UB}  result.l = dos_CheckLib \{library.s,libversion.l\}

@{B}Description:@{UB}
Check a library for existence and version.
Note: If you use external libraries, always check for their existence. This hold even for libraries, that you use as blitz tokens.

@{B}Inputs:@{UB}      
- library.s    : name of a amiga shared library
- libversion.w    : minimum version number
- libversion.l    : ???

@{B}Result:@{UB}      
- result.l     : -1 if the library exists with the mimimum version number, or 0

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_CheckStackSize "dos_CheckStackSize"

@{B}dos_CheckStackSize@{UB}

@{B}Syntax:@{UB}  result.l = dos_CheckStackSize \{bytes.l\}

@{B}Description:@{UB}
Check the stack size to be at least <bytes> bytes large.

@{B}Inputs:@{UB}      
- bytes.l    : minimum stack

@{B}Result:@{UB}      
- result.l   : -1 if the stack is large enough, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_CloseToolTypes "dos_CloseToolTypes"

@{B}dos_CloseToolTypes@{UB}

@{B}Syntax:@{UB} dos_CloseToolTypes \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_Copy "dos_Copy"

@{B}dos_Copy@{UB}

@{B}Syntax:@{UB}  result.l = dos_Copy \{sourcefile.s,destfile.s\}

@{B}Description:@{UB}
Copy sourcefile to destination file. This is the same as if you would execute in a shell:

1> copy "<sourcefile>" to "<destfile>"

Note: The functions automatically adds quotation marks to the filenames. This way, spaces in the filenames are allowed.

@{B}Inputs:@{UB}      
- sourcefile.s    : name of the source file
- destfile.s    : name of the destination file

@{B}Result:@{UB}      
- result.l     : -1 if everything went well, 0 if something went wrong

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        
The function might fail if your filenames contain already quotation marks.





@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_CreateDir "dos_CreateDir"

@{B}dos_CreateDir@{UB}

@{B}Syntax:@{UB}  result.l = dos_CreateDir \{dir.s\}

@{B}Description:@{UB}
Create a new directory. The function will fail if the directory already exists, or if the parent path does not exist.

@{B}Inputs:@{UB}      
- dir.s    : name of directory to create

@{B}Result:@{UB}      
- result.l     : -1 if everything went well, 0 if not

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_CreateDosList "dos_CreateDosList"

@{B}dos_CreateDosList@{UB}

@{B}Syntax:@{UB}  result.l = dos_CreateDosList \{flags.l\}

@{B}Description:@{UB}
Create a List (multilist.include) of DosList entires.
Search the RKM for LockDosList to see available flags.

@{B}Inputs:@{UB}      
- flags.l    : ???

@{B}Result:@{UB}      
- result.l     : list of dos entry names according the flags

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_CreateFileList "dos_CreateFileList"

@{B}dos_CreateFileList@{UB}

@{B}Syntax:@{UB}  result.l = dos_CreateFileList \{path.s,pattern.s,@flags.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- path.s    : ???
- pattern.s    : ???
- flags.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_Delete "dos_Delete"

@{B}dos_Delete@{UB}

@{B}Syntax:@{UB}  result.l = dos_Delete \{filename.s,@respectprotection.l\}

@{B}Description:@{UB}
Delete the file.

@{B}Inputs:@{UB}      
- filename.s          : name of file to delete
- respectprotection.l : if set to False, the file will be deleted even if it is protected from deletion.

@{B}Result:@{UB}      
- result.l     : -1 if the file was deleted, 0 if not (probably it was open then or did not exist)

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_Exist "dos_Exist"

@{B}dos_Exist@{UB}

@{B}Syntax:@{UB}  result.l = dos_Exist \{filename.s\}

@{B}Description:@{UB}
Check if the given file exists.
Note: This function fails, if the file exists but is currently written.

@{B}Inputs:@{UB}      
- filename.s    : name of fie

@{B}Result:@{UB}      
- result.l     : -1 if the file exists, 0 if not

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_FilePart "dos_FilePart"

@{B}dos_FilePart@{UB}

@{B}Syntax:@{UB}  result.s = dos_FilePart \{filename.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- filename.s   : filename with path

@{B}Result:@{UB}      
- result.s     : only the file part

@{B}Example:@{UB}     
NPrint dos_FilePart\{"Work:Samples/mysound.info"\}

This would return "mysound.info".


@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" dos_PathPart " link dos_PathPart}, @{" dos_AddPart " link dos_AddPart}




@ENDNODE
@NODE dos_FilePartAB3 "dos_FilePartAB3"

@{B}dos_FilePartAB3@{UB}

@{B}Syntax:@{UB}  result.s = dos_FilePartAB3 \{path.s\}

@{B}Description:@{UB}
Crop the file part out of a filename with complete path.

@{B}Inputs:@{UB}      
- path.s    : filename with path

@{B}Result:@{UB}      
- result.s     : only the file part

@{B}Example:@{UB}     
NPrint dos_FilePart\{"Work:Samples/mysound.info"\}

This would return "mysound.info".


@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" dos_PathPart " link dos_PathPart}, @{" dos_AddPart " link dos_AddPart}




@ENDNODE
@NODE dos_FlushToolTypes "dos_FlushToolTypes"

@{B}dos_FlushToolTypes@{UB}

@{B}Syntax:@{UB} dos_FlushToolTypes \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_Free "dos_Free"

@{B}dos_Free@{UB}

@{B}Syntax:@{UB} dos_Free \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_FreeArgs "dos_FreeArgs"

@{B}dos_FreeArgs@{UB}

@{B}Syntax:@{UB} dos_FreeArgs \{\}

@{B}Description:@{UB}
Free all resources associated with the dos_GetArgs function.
NOTE: This function is called on autoexit.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_FromBlitz "dos_FromBlitz"

@{B}dos_FromBlitz@{UB}

@{B}Syntax:@{UB}  result.l = dos_FromBlitz \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_FromCLI "dos_FromCLI"

@{B}dos_FromCLI@{UB}

@{B}Syntax:@{UB}  result.l = dos_FromCLI \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_FromWB "dos_FromWB"

@{B}dos_FromWB@{UB}

@{B}Syntax:@{UB}  result.l = dos_FromWB \{\}

@{B}Description:@{UB}
Test if we are running from Workbench.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : -1 if we are running from WB, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_GetArg "dos_GetArg"

@{B}dos_GetArg@{UB}

@{B}Syntax:@{UB}  result.s = dos_GetArg \{argc.l\}

@{B}Description:@{UB}
Get the CLI argument by index.

@{B}Inputs:@{UB}      
- argc.l    : index of argument, counting from 0

@{B}Result:@{UB}      
- result.s     : cli argument

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" dos_GetNumArgs " link dos_GetNumArgs}




@ENDNODE
@NODE dos_GetExt "dos_GetExt"

@{B}dos_GetExt@{UB}

@{B}Syntax:@{UB}  result.s = dos_GetExt \{filename.s\}

@{B}Description:@{UB}
Crop the filenames extention.

@{B}Inputs:@{UB}      
- filename.s    : filename

@{B}Result:@{UB}      
- result.s     : extention of the filename

@{B}Example:@{UB}     
NPrint "Work:disk.info"

This would return "info".


@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" dos_SetExt " link dos_SetExt}




@ENDNODE
@NODE dos_GetFileDate "dos_GetFileDate"

@{B}dos_GetFileDate@{UB}

@{B}Syntax:@{UB}  result.s = dos_GetFileDate \{filename.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- filename.s   : ???

@{B}Result:@{UB}      
- result.s     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_GetFileSize "dos_GetFileSize"

@{B}dos_GetFileSize@{UB}

@{B}Syntax:@{UB}  result.l = dos_GetFileSize \{filename.s\}

@{B}Description:@{UB}
Get the file size in bytes.
Note: This is a straigt forward implentation, it gets a lock on the file and reads out the size. It will fail on files that are exclusivly locked (e.g. beeing written). If you want to monitor a locked file, use @{" dos_GetFileSizeEx " link dos_GetFileSizeEx}.

@{B}Inputs:@{UB}      
- filename.s    : name of the file

@{B}Result:@{UB}      
- result.l     : size in bytes

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" dos_GetFileSizeEx " link dos_GetFileSizeEx}




@ENDNODE
@NODE dos_GetFileSizeEx "dos_GetFileSizeEx"

@{B}dos_GetFileSizeEx@{UB}

@{B}Syntax:@{UB}  result.l = dos_GetFileSizeEx \{filename.s\}

@{B}Description:@{UB}
Get the file size in bytes.
Note: This is a cool version of the fsize function, because it even returns the current size of a file that is being written, without the need to make a lock on the file.

@{B}Inputs:@{UB}      
- filename.s    : name of file

@{B}Result:@{UB}      
- result.l     : file size in bytes

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_GetNextArg "dos_GetNextArg"

@{B}dos_GetNextArg@{UB}

@{B}Syntax:@{UB}  result.s = dos_GetNextArg \{\}

@{B}Description:@{UB}
Get the next CLI argument.
You can set the following user constant:

#support_cliargs=x

x = 0 : use BlitzBasic Par$()
x = 1 : use OS calls           ;  run only in executable, NOT from BLITZ!
x = 2 : disable completely but keeps dummy calls for compatibelity

Note: The purpose of the whole thing is that you can get rid of the blitzlib that contains Par$() and Numpars and do this with OS function calls.
The disadvantage is, that it currently crashes if you do compile&run. Maybe this will be fixed somewhen.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.s     : CLI argument

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        
Doesn't work in compile&run mode if you use #support_cliargs=1


@{B}See also:@{UB}    @{" dos_GetNumArgs " link dos_GetNumArgs}




@ENDNODE
@NODE dos_GetNumArgs "dos_GetNumArgs"

@{B}dos_GetNumArgs@{UB}

@{B}Syntax:@{UB}  result.l = dos_GetNumArgs \{\}

@{B}Description:@{UB}
Get the number of CLI arguments waiting to be collected.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : number of CLU arguments

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        
Doesnt work in compile&run mode if you use #support_cliargs=1


@{B}See also:@{UB}    @{" dos_GetNextArg " link dos_GetNextArg}




@ENDNODE
@NODE dos_GetProgDir "dos_GetProgDir"

@{B}dos_GetProgDir@{UB}

@{B}Syntax:@{UB}  result.s = dos_GetProgDir \{defaultdir.s\}

@{B}Description:@{UB}
Return die directory from where the exectable was started from.
Note: This makes is almost always possible to get rid of ugly assings, that are often a source of problems to users.
If you read out the programs directory, and do all your data file reading relative from here (e.g. by concatenating filenames with @{" dos_AddPart " link dos_AddPart}), you get indepentend form the location on the disk.

The defaultdir.s should point to the directory you are developing your application in. If you do compile&run, this function will return the defaultdir.s, because in compile&run mode you dont start the program out of your usual directory.

@{B}Inputs:@{UB}      
- defaultdir.s    : name of you development default dir

@{B}Result:@{UB}      
- result.s     : path of the executable.

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_GetProgFile "dos_GetProgFile"

@{B}dos_GetProgFile@{UB}

@{B}Syntax:@{UB}  result.s = dos_GetProgFile \{defaultexe.s\}

@{B}Description:@{UB}
Return the own executable's path+filename, or defaultexe.s if started from wihtin Amiblitz IDE.
Notes: Works for CLI and Workbench.

@{B}Inputs:@{UB}      
- defaultexe.s : default string that is returned if you start from Amiblitz

@{B}Result:@{UB}      
- result.s     : full path+filename of your own executable.

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_GetProgIcon "dos_GetProgIcon"

@{B}dos_GetProgIcon@{UB}

@{B}Syntax:@{UB}  result.s = dos_GetProgIcon \{defaulticon.s\}

@{B}Description:@{UB}
Get the programs icon (without .info)

@{B}Inputs:@{UB}      
- defaulticon.s    : ???

@{B}Result:@{UB}      
- result.s     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_GetStackSize "dos_GetStackSize"

@{B}dos_GetStackSize@{UB}

@{B}Syntax:@{UB}  result.l = dos_GetStackSize \{@*task.Task\}

@{B}Description:@{UB}
Return the size of the stack in Bytes.

@{B}Inputs:@{UB}      
- *task.Task   : task (or you own task if omitted)

@{B}Result:@{UB}      
- result.l     : stack size

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_GetStartDir "dos_GetStartDir"

@{B}dos_GetStartDir@{UB}

@{B}Syntax:@{UB}  result.s = dos_GetStartDir \{defaultdir.s\}

@{B}Description:@{UB}
Get the directory from where the program was started from.
Note: This does not necessarily be the directory where the executables lives in.
E.g:
If you type in a shell:
DH0:Work>DH1:Test/mytool"
You will get "DH0:Work", whereas @{" dos_GetProgDir " link dos_GetProgDir} would return "DH1:Test"

@{B}Inputs:@{UB}      
- defaultdir.s    : ???

@{B}Result:@{UB}      
- result.s     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_GetStartFile "dos_GetStartFile"

@{B}dos_GetStartFile@{UB}

@{B}Syntax:@{UB}  result.s = dos_GetStartFile \{defaultfile.s\}

@{B}Description:@{UB}
Get the file name of the file that is associated with your program being launched.
Workbench:
The deficon or project icon
CLI:
First CLI argument
Amiblitz:
Just returns the defaultfile.s string

@{B}Inputs:@{UB}      
- defaultfile.s    : ???

@{B}Result:@{UB}      
- result.s     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_GetStartIcon "dos_GetStartIcon"

@{B}dos_GetStartIcon@{UB}

@{B}Syntax:@{UB}  result.s = dos_GetStartIcon \{defaulticon.s\}

@{B}Description:@{UB}
Get the icon from which a WB App was stated from.
This can be a Tool Icon or Project Icon.

@{B}Inputs:@{UB}      
- defaulticon.s    : ???

@{B}Result:@{UB}      
- result.s     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_GetToolFloat "dos_GetToolFloat"

@{B}dos_GetToolFloat@{UB}

@{B}Syntax:@{UB}  result.f = dos_GetToolFloat \{toolname.s,def.f,@filename.s\}

@{B}Description:@{UB}
Same like @{" dos_GetToolValue " link dos_GetToolValue}, but returns a float value.

@{B}Inputs:@{UB}      
- toolname.s  : ???
- def.f       : ???
- filename.s  : ???

@{B}Result:@{UB}      
- result.f     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_GetToolHex "dos_GetToolHex"

@{B}dos_GetToolHex@{UB}

@{B}Syntax:@{UB}  result.l = dos_GetToolHex \{toolname.s,def.l,@filename.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- toolname.s    : ???
- def.l    : ???
- filename.s    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_GetToolState "dos_GetToolState"

@{B}dos_GetToolState@{UB}

@{B}Syntax:@{UB}  result.l = dos_GetToolState \{toolname.s,@filename.s\}

@{B}Description:@{UB}
returns 1 if tool exists and is disabled
returns -1 if tool exists and is enabled
returns 0 if tool doesnt exist

@{B}Inputs:@{UB}      
- toolname.s  : name of the tooltype
- filename.s  : icon file

@{B}Result:@{UB}      
- result.l    : see above.

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_GetToolString "dos_GetToolString"

@{B}dos_GetToolString@{UB}

@{B}Syntax:@{UB}  result.s = dos_GetToolString \{toolname.s,def.s,@filename.s\}

@{B}Description:@{UB}
Get the value of a tooltype as a string.

@{B}Inputs:@{UB}      
- toolname.s    : name of the tooltype
- def.s    : default value, in case the tooltype does not exist
- iconfile.s    : optionally an icon file, if not the file from the calling program
- filename.s    : ???

@{B}Result:@{UB}      
- result.s     : data string containing the value of the tooltype

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        
This functions searches in the icon file that has the same name like the executable.
If the program was started as a default tool of a project icon, it wont work.
Therefore you might want to catch the real icon file name from the first CLI argument, and pass it to this function via the filename parameter.


@{B}See also:@{UB}    @{" dos_GetToolValue " link dos_GetToolValue}




@ENDNODE
@NODE dos_GetToolSwitch "dos_GetToolSwitch"

@{B}dos_GetToolSwitch@{UB}

@{B}Syntax:@{UB}  result.l = dos_GetToolSwitch \{toolname.s,@filename.s\}

@{B}Description:@{UB}
Check if the tooltype exists (-1) or if it is disabled or doesnt even exist (0).

@{B}Inputs:@{UB}      
- toolname.s  : ???
- filename.s  : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_GetToolValue "dos_GetToolValue"

@{B}dos_GetToolValue@{UB}

@{B}Syntax:@{UB}  result.l = dos_GetToolValue \{toolname.s,def.l,@filename.s\}

@{B}Description:@{UB}
Same like @{" dos_GetToolString " link dos_GetToolString}, but interprets the string as an integer value.
Strings like 'yes', 'true' or 'on' are interpreted as -1, and 'no', 'false', 'off' as 0.

@{B}Inputs:@{UB}      
- toolname.s  : name of the tooltype
- def.l       : default value, in case the tooltype does not exist
- iconfile.s  : optionally an icon file, if not the file from the callingprogram
- filename.s  : ???

@{B}Result:@{UB}      
- result.l    : integer containing the tooltypes value

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    dos_gettooltstring




@ENDNODE
@NODE dos_GetWBArg "dos_GetWBArg"

@{B}dos_GetWBArg@{UB}

@{B}Syntax:@{UB}  result.s = dos_GetWBArg \{argc.l\}

@{B}Description:@{UB}
Get an WB argument by index.

@{B}Inputs:@{UB}      
- argc.l    : index of argument

@{B}Result:@{UB}      
- result.s  : argument string

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_GetWBLock "dos_GetWBLock"

@{B}dos_GetWBLock@{UB}

@{B}Syntax:@{UB}  result.l = dos_GetWBLock \{argc.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- argc.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_GetWBNumArgs "dos_GetWBNumArgs"

@{B}dos_GetWBNumArgs@{UB}

@{B}Syntax:@{UB}  result.l = dos_GetWBNumArgs \{\}

@{B}Description:@{UB}
Get the number of WB arguments.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l   : # of WB Arguments

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_IsDir "dos_IsDir"

@{B}dos_IsDir@{UB}

@{B}Syntax:@{UB}  result.l = dos_IsDir \{filename.s\}

@{B}Description:@{UB}
Check if the given file is a directory or a file.

@{B}Inputs:@{UB}      
- filename.s    : file to check

@{B}Result:@{UB}      
- result.l     : -1 if it is a directory, 0 if it is a file

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_OpenToolTypes "dos_OpenToolTypes"

@{B}dos_OpenToolTypes@{UB}

@{B}Syntax:@{UB}  result.l = dos_OpenToolTypes \{filename.s\}

@{B}Description:@{UB}
Open the tooltype information of a certain file.

@{B}Inputs:@{UB}      
- filename.s   : name of the file

@{B}Result:@{UB}      
- result.l     : pointer to the disk object

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_ParentPath "dos_ParentPath"

@{B}dos_ParentPath@{UB}

@{B}Syntax:@{UB}  result.s = dos_ParentPath \{path.s\}

@{B}Description:@{UB}
Well, the same like @{" dos_PathPart " link dos_PathPart}.

@{B}Inputs:@{UB}      
- path.s     : ???

@{B}Result:@{UB}      
- result.s   : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_ParentPathAB3 "dos_ParentPathAB3"

@{B}dos_ParentPathAB3@{UB}

@{B}Syntax:@{UB}  result.s = dos_ParentPathAB3 \{path.s\}

@{B}Description:@{UB}
Get the parent directory.
Note: This is somehow similar to dos_ParentPart. If @{" dos_PathPart " link dos_PathPart} works for you, you should prefere it.

@{B}Inputs:@{UB}      
- path.s    : path name

@{B}Result:@{UB}      
- result.s     : parent path

@{B}Example:@{UB}     
NPrint "Work:MySamples/GunShots/"

This would return "Work:MySamples".



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_PathPart "dos_PathPart"

@{B}dos_PathPart@{UB}

@{B}Syntax:@{UB}  result.s = dos_PathPart \{filename.s\}

@{B}Description:@{UB}
Get the path part out of a file or directory name.

@{B}Inputs:@{UB}      
- filename.s   : name of the path/file

@{B}Result:@{UB}      
- result.s     : name of the parent path

@{B}Example:@{UB}     
NPrint "Work:MySamples/GunShots/gun.wav"

This would return "Work:MySamples/GunShots".

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" dos_FilePart " link dos_FilePart}, @{" dos_AddPart " link dos_AddPart}




@ENDNODE
@NODE dos_PathPartAB3 "dos_PathPartAB3"

@{B}dos_PathPartAB3@{UB}

@{B}Syntax:@{UB}  result.s = dos_PathPartAB3 \{path.s\}

@{B}Description:@{UB}
Get the path part pout of a file or directory name.
Note: This is somehow similar to @{" dos_PathPart " link dos_PathPart}. If @{" dos_PathPart " link dos_PathPart} works for you, you should prefere it.

@{B}Inputs:@{UB}      
- path.s    : name of the path/file

@{B}Result:@{UB}      
- result.s     : name of the parent path

@{B}Example:@{UB}     
NPrint "Work:MySamples/GunShots/gun.wav"

This would return "Work:MySamples/GunShots".



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_ReadArgs "dos_ReadArgs"

@{B}dos_ReadArgs@{UB}

@{B}Syntax:@{UB} dos_ReadArgs \{\}

@{B}Description:@{UB}
* private *
Read the CLI arguments.
Note: this is automatically called on program startup, if you program is compiled with #support_cliargs=1.
Note: use dos_nextarg and dos_numargs to get the arguments.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" dos_GetNumArgs " link dos_GetNumArgs}, @{" dos_GetNextArg " link dos_GetNextArg}




@ENDNODE
@NODE dos_ReadWBArgs "dos_ReadWBArgs"

@{B}dos_ReadWBArgs@{UB}

@{B}Syntax:@{UB} dos_ReadWBArgs \{\}

@{B}Description:@{UB}
*private*
Read the startup arguments from the WBStartUpMessage.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_RemAssign "dos_RemAssign"

@{B}dos_RemAssign@{UB}

@{B}Syntax:@{UB}  result.l = dos_RemAssign \{name.s\}

@{B}Description:@{UB}
Remove an Assing from the system list.

@{B}Inputs:@{UB}      
- name.s    : name of the assign

@{B}Result:@{UB}      
- result.l  : -1 if the assign was removed, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_RemExt "dos_RemExt"

@{B}dos_RemExt@{UB}

@{B}Syntax:@{UB}  result.s = dos_RemExt \{filename.s\}

@{B}Description:@{UB}
Remove the extention from the file name.
Note: As an extentions counts the alphanumerical part after the last dot, it is is shorter than 8 characters.

@{B}Inputs:@{UB}      
- filename.s    : name of file

@{B}Result:@{UB}      
- result.s     : name of file without extention

@{B}Example:@{UB}     
NPrint dos_RemExt\{"Libs:graphics.library"\}

This would return "Libs:graphics".


@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    dos_ext_set




@ENDNODE
@NODE dos_RemPath "dos_RemPath"

@{B}dos_RemPath@{UB}

@{B}Syntax:@{UB}  result.s = dos_RemPath \{filename.s,path.s\}

@{B}Description:@{UB}
Remove the path from the filename.

@{B}Inputs:@{UB}      
- filename.s : complete filename
- path.s     : path

@{B}Result:@{UB}      
- result.s     : filename without path

@{B}Example:@{UB}     
NPrint dos_RemPath\{"Work:MySamples/Gunshots/gun.wav","Work:MySamples"\}

This would return "Gunshots/gun.wav".


@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" dos_AddPart " link dos_AddPart}, @{" dos_PathPart " link dos_PathPart}, @{" dos_FilePart " link dos_FilePart}




@ENDNODE
@NODE dos_Rename "dos_Rename"

@{B}dos_Rename@{UB}

@{B}Syntax:@{UB}  result.l = dos_Rename \{oldname.s,newname.s\}

@{B}Description:@{UB}
Rename a file or directory.

@{B}Inputs:@{UB}      
- oldname.s    : name of the exisiting file
- newname.s    : new name of the file

@{B}Result:@{UB}      
- result.l     : -1 if everything went well, 0 if not

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_RunCli "dos_RunCli"

@{B}dos_RunCli@{UB}

@{B}Syntax:@{UB}  result.l = dos_RunCli \{filename.s,priority.l,@stack.l,@waitfinish.l,@cliargs.s\}

@{B}Description:@{UB}
Run an external program in CLI mode (as if it was run from the Shell).
Note: There are many ways to run an external program. If it should be in CLI mode, this is the best solution, because it is system friendly and allows you detailed control over priority and stack.

@{B}Inputs:@{UB}      
- filename.s    : name of the program
- priority.l    : task priority, usually 0
- stack.l    : optionally amount of stack memory in bytes
- waitfinish.l    : -1 = wait till the program exits (default), 0 = run asynchron and return immediately
- cliargs.s    : pass any cli args as you want, but dont put them into the filename !

@{B}Result:@{UB}      
- result.l     : -1 if the program was started async, 0 if something wentwrong
in waitfinish mode, it returns the return code of the program

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_RunWB "dos_RunWB"

@{B}dos_RunWB@{UB}

@{B}Syntax:@{UB}  result.l = dos_RunWB \{filename.s\}

@{B}Description:@{UB}
Run an external program in Workbench mode (as if it was started from a Workbench icon).

@{B}Inputs:@{UB}      
- filename.s    : filename

@{B}Result:@{UB}      
- result.l     : -1 if the program was started, 0 if not.

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_ScanAssigns "dos_ScanAssigns"

@{B}dos_ScanAssigns@{UB}

@{B}Syntax:@{UB}  result.s = dos_ScanAssigns \{\}

@{B}Description:@{UB}
Walk through the OS list of assigns. Call this function until it returns an empty string, then there are no more assigns.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.s  : name of an assign, e.g. "LIBS"

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" dos_ScanDevices " link dos_ScanDevices}, @{" dos_ScanVolumes " link dos_ScanVolumes}, @{" dos_ScanDir " link dos_ScanDir}




@ENDNODE
@NODE dos_ScanDevices "dos_ScanDevices"

@{B}dos_ScanDevices@{UB}

@{B}Syntax:@{UB}  result.s = dos_ScanDevices \{\}

@{B}Description:@{UB}
Walk through the OS list of mounted devices. Call this function until it returns an empty string, then there are no more device.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.s  : name of an device, e.g. "RAM"

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" dos_ScanAssigns " link dos_ScanAssigns}, @{" dos_ScanVolumes " link dos_ScanVolumes}, @{" dos_ScanDir " link dos_ScanDir}




@ENDNODE
@NODE dos_ScanDir "dos_ScanDir"

@{B}dos_ScanDir@{UB}

@{B}Syntax:@{UB}  result.s = dos_ScanDir \{path.s,@pattern.s,@flags.l\}

@{B}Description:@{UB}
Scan through a directory according the pattern. See #dos_scan_... for possible flags.

@{B}Inputs:@{UB}      
- path.s     : dos path to scan
- pattern.s  : dos pattern for matching
- flags.l    : flags for dirs, files and sorting

@{B}Result:@{UB}      
- result.s   : filename of the next matching file

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_ScanVolumes "dos_ScanVolumes"

@{B}dos_ScanVolumes@{UB}

@{B}Syntax:@{UB}  result.s = dos_ScanVolumes \{\}

@{B}Description:@{UB}
Walk through the OS list of volumes. Call this function until it returns an empty string, then there are no more volume.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.s  : name of a volume, e.g. "Ram Disk"

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" dos_ScanDevices " link dos_ScanDevices}, @{" dos_ScanAssigns " link dos_ScanAssigns}, @{" dos_ScanDir " link dos_ScanDir}




@ENDNODE
@NODE dos_SetAssign "dos_SetAssign"

@{B}dos_SetAssign@{UB}

@{B}Syntax:@{UB}  result.l = dos_SetAssign \{name.s,path.s,@force.l\}

@{B}Description:@{UB}
Make an assign to a disk path.

@{B}Inputs:@{UB}      
- name.s    : name of the assign
- path.s    : path were the assign should point to
- force.l   : set this assign, even if it already exists (the old one will be replaced!)

@{B}Result:@{UB}      
- result.l  : -1 if the assign was created, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" dos_AddAssign " link dos_AddAssign}



@ENDNODE
@NODE dos_SetAssignLock "dos_SetAssignLock"

@{B}dos_SetAssignLock@{UB}

@{B}Syntax:@{UB}  result.l = dos_SetAssignLock \{name.s,path.s,@force.l\}

@{B}Description:@{UB}
Same like @{" dos_SetAssign " link dos_SetAssign}, but uses AssignLock().
See RKM for differneces between AssignLock() and AssignPath().

@{B}Inputs:@{UB}      
- name.s    : name of the assign
- path.s    : path were the assign should point to
- force.l   : add this assign, even if it already exists

@{B}Result:@{UB}      
- result.l  : -1 if the assign was created, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_SetDebugExe "dos_SetDebugExe"

@{B}dos_SetDebugExe@{UB}

@{B}Syntax:@{UB} dos_SetDebugExe \{path.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- path.s    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_SetExt "dos_SetExt"

@{B}dos_SetExt@{UB}

@{B}Syntax:@{UB}  result.s = dos_SetExt \{filename.s,extention.s\}

@{B}Description:@{UB}
Changes the extention of the filename.
If the file has no extention, the new extention will be added.

@{B}Inputs:@{UB}      
- filename.s    : name of file
- extention.s    : new extention.

@{B}Result:@{UB}      
- result.s     : filename with new extention.

@{B}Example:@{UB}     
NPrint dos_SetExt\{"Work:Samples/mysound.aiff","wav"\}

This would return "Work:Samples/mysound.wav".


@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    dos_ext_remove




@ENDNODE
@NODE dos_SetProtect "dos_SetProtect"

@{B}dos_SetProtect@{UB}

@{B}Syntax:@{UB}  result.l = dos_SetProtect \{filename.s,bits.l\}

@{B}Description:@{UB}
Set the protection bits of a file or directory.

@{B}Inputs:@{UB}      
- filename.s    : name of file/directory
- bits.l    : protection bitmask

@{B}Result:@{UB}      
- result.l     : -1 if everything went well, 0 if not

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_SetTaskPri "dos_SetTaskPri"

@{B}dos_SetTaskPri@{UB}

@{B}Syntax:@{UB}  result.w = dos_SetTaskPri \{newpri.w\}

@{B}Description:@{UB}
Set the task pri of the current or given task.
Note: Be careful with extreme task priorities.
A task with a value smaller than 0 (default) can be blocked completely.
A task with a value greater than 20 freeze the mouse and keyboard until they go lower again or sleep. Dont do bussy loops in a task >0 ! (dont do them anyway!)

@{B}Inputs:@{UB}      
- newpri.w    : new priority [-128...127]
- *task.Task   : optionally an other task than you own one

@{B}Result:@{UB}      
- result.w     : old task priority

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_SetToolFloat "dos_SetToolFloat"

@{B}dos_SetToolFloat@{UB}

@{B}Syntax:@{UB}  result.l = dos_SetToolFloat \{toolname.s,value.f,@filename.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- toolname.s    : ???
- value.f    : ???
- filename.s    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_SetToolHex "dos_SetToolHex"

@{B}dos_SetToolHex@{UB}

@{B}Syntax:@{UB}  result.l = dos_SetToolHex \{toolname.s,value.l,@filename.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- toolname.s    : ???
- value.l    : ???
- filename.s    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_SetToolState "dos_SetToolState"

@{B}dos_SetToolState@{UB}

@{B}Syntax:@{UB}  result.l = dos_SetToolState \{toolname.s,enabled.l,@filename.s\}

@{B}Description:@{UB}
this function will return -1, if the toolstate was set,
0 if it failed (probably the tooltype or the icon doesnt exist)

@{B}Inputs:@{UB}      
- toolname.s   : ???
- enabled.l    : ???
- filename.s   : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_SetToolString "dos_SetToolString"

@{B}dos_SetToolString@{UB}

@{B}Syntax:@{UB}  result.l = dos_SetToolString \{toolname.s,string.s,@filename.s,@quote.l\}

@{B}Description:@{UB}
Set the tooltype with the given data string.
If the toolname does not exist, it will be created.

@{B}Inputs:@{UB}      
- toolname.s   : name of the tooltype
- toolstring.s : string value of the tooltype
- filename.s   : optionally the icon file, if not the programs own icon
- quote.l      : ???

@{B}Result:@{UB}      
- result.l     : -1 if everything went well, 0 if not

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" dos_SetToolValue " link dos_SetToolValue}, @{" dos_GetToolString " link dos_GetToolString}




@ENDNODE
@NODE dos_SetToolSwitch "dos_SetToolSwitch"

@{B}dos_SetToolSwitch@{UB}

@{B}Syntax:@{UB}  result.l = dos_SetToolSwitch \{toolname.s,state.b,@filename.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- toolname.s    : ???
- state.b    : ???
- filename.s    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_SetToolValue "dos_SetToolValue"

@{B}dos_SetToolValue@{UB}

@{B}Syntax:@{UB}  result.l = dos_SetToolValue \{toolname.s,value.l,@filename.s\}

@{B}Description:@{UB}
Set the tooltype with the given integer value.
If the toolname does not exist, it will be created.

@{B}Inputs:@{UB}      
- toolname.s  : name of the tooltype
- toolvalue.l : integer value of the tooltype
- filename.s  : optionally the icon file, if not the programs own icon

@{B}Result:@{UB}      
- result.l    : -1 if everything went well, 0 if not

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" dos_SetToolString " link dos_SetToolString}, @{" dos_GetToolValue " link dos_GetToolValue}




@ENDNODE
@NODE dos_Trim "dos_Trim"

@{B}dos_Trim@{UB}

@{B}Syntax:@{UB}  result.s = dos_Trim \{a.s\}

@{B}Description:@{UB}
Remove leading and trailing spaces, return codes or tabs.

@{B}Inputs:@{UB}      
- a.s       : input string

@{B}Result:@{UB}      
- result.s  : trimmed string

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE dos_TrimFileName "dos_TrimFileName"

@{B}dos_TrimFileName@{UB}

@{B}Syntax:@{UB}  result.s = dos_TrimFileName \{filename.s\}

@{B}Description:@{UB}
The given string is forced to be a nice string that works on most filesystems by replacing invalid characters with "_".

@{B}Inputs:@{UB}      
- filename.s    : problematic filename

@{B}Result:@{UB}      
- result.s     : nice filename

@{B}Example:@{UB}     
NPrint dos_TrimFileName \{"Heya, this is f#?%ing cool :-/"\}

This would return "Heya, this is f__ing cool _-_"



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
