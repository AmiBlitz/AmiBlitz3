@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "file_config.include"

@{B}file_config.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" config_ReadFloat " link config_ReadFloat} 
   @{" config_ReadLine " link config_ReadLine} 
   @{" config_ReadName " link config_ReadName} 
   @{" config_ReadString " link config_ReadString} 
   @{" config_ReadValue " link config_ReadValue} 
   @{" config_WriteFloat " link config_WriteFloat} 
   @{" config_WriteHex " link config_WriteHex} 
   @{" config_WriteInt " link config_WriteInt} 
   @{" config_WriteString " link config_WriteString} 
   @{" config_WriteValue " link config_WriteValue} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} file_config.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 27/12/2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB}  Amiblitz2.4

@{B}Purpose:@{UB}
Provide human-editable text-config file I/O functions.

@{B}Abstract:@{UB}
This include provides easy-to-use config file I/O, similar to tooltypes but into a file.

@{B}User Constants:@{UB} none

@{B}Example:@{UB}     
A config file is a pure text file and looks like this (similar to tooltypes):

___________________________ snip!

MyEntry1 = "myvalue"
MyEntry2 = 12345
...
___________________________ snip!

Read some entries from the config file:
_______________________________________ snip!
XINCLUDE "file.include.ab3"

fid.l = file_Open \{"DH0:MyConfigFile.txt",#file_read\}
If fid>=0
  While file_EOF \{fid\} = False
    Select @{" config_ReadName " link config_ReadName} \{fid\}
      Case "MyEntry1"
        entry1_string.s = @{" config_ReadString " link config_ReadString} \{\} ; would result in "myvalue"
      Case "MyEntry2"
        entry2_value.l = @{" config_ReadValue " link config_ReadValue} \{\} ; would result in 12345
      Default:
        NPrint "Unknown config entry!"
     End Select
   Wend
End If
End
_______________________________________ snip!



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE config_ReadFloat "config_ReadFloat"

@{B}config_ReadFloat@{UB}

@{B}Syntax:@{UB}  result.f = config_ReadFloat \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.f     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE config_ReadLine "config_ReadLine"

@{B}config_ReadLine@{UB}

@{B}Syntax:@{UB}  result.s = config_ReadLine \{fid.l\}

@{B}Description:@{UB}
Same like file_ReadLine, but removes all space characters that are not within quotes. This function is used within @{" config_ReadName " link config_ReadName}.

e.g.
my value      = "This is a test"

would be read as

myvalue="This is a test".

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      
- result.s     : one line of a text file

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE config_ReadName "config_ReadName"

@{B}config_ReadName@{UB}

@{B}Syntax:@{UB}  result.s = config_ReadName \{fid.l\}

@{B}Description:@{UB}
Read a new entry name from a config file.

@{B}Inputs:@{UB}      
- fid.l     : file object ID

@{B}Result:@{UB}      
- result.s  : name of the next entry in a config file

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" config_ReadString " link config_ReadString}, @{" config_ReadValue " link config_ReadValue}, @{" config_ReadFloat " link config_ReadFloat}




@ENDNODE
@NODE config_ReadString "config_ReadString"

@{B}config_ReadString@{UB}

@{B}Syntax:@{UB}  result.s = config_ReadString \{\}

@{B}Description:@{UB}
Get the entry data from an entry read with @{" config_ReadName " link config_ReadName} as a string.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.s     : entry string

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" config_ReadName " link config_ReadName}




@ENDNODE
@NODE config_ReadValue "config_ReadValue"

@{B}config_ReadValue@{UB}

@{B}Syntax:@{UB}  result.l = config_ReadValue \{\}

@{B}Description:@{UB}
Get the entry data from an entry read with @{" config_ReadName " link config_ReadName} as a value.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : entry value

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" config_ReadName " link config_ReadName}




@ENDNODE
@NODE config_WriteFloat "config_WriteFloat"

@{B}config_WriteFloat@{UB}

@{B}Syntax:@{UB}  result.l = config_WriteFloat \{fid.l,name.s,float.f\}

@{B}Description:@{UB}
Write a float into a config file.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- name.s    : name of the entry
- float.f    : float value

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE config_WriteHex "config_WriteHex"

@{B}config_WriteHex@{UB}

@{B}Syntax:@{UB}  result.l = config_WriteHex \{fid.l,name.s,value.l\}

@{B}Description:@{UB}
Write a integer value into a config file in hex representation.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- name.s    : name if the entry
- value.l    : integer value

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE config_WriteInt "config_WriteInt"

@{B}config_WriteInt@{UB}

@{B}Syntax:@{UB}  result.l = config_WriteInt \{fid.l,name.s,value.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- fid.l    : ???
- name.s    : ???
- value.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE config_WriteString "config_WriteString"

@{B}config_WriteString@{UB}

@{B}Syntax:@{UB}  result.l = config_WriteString \{fid.l,name.s,string.s\}

@{B}Description:@{UB}
Write a string into a config file.
The string will be automatically quoted.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- name.s    : name of the entry.
- string.s    : string

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE config_WriteValue "config_WriteValue"

@{B}config_WriteValue@{UB}

@{B}Syntax:@{UB}  result.l = config_WriteValue \{fid.l,name.s,value.l\}

@{B}Description:@{UB}
      ;If quoted=0 Then breakme=True

Write an integer value into a config file.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- name.s    : name of the entry
- value.l    : integer value

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
