@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "crc32.include"

@{B}crc32.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" CRC32_Add " link CRC32_Add} 
   @{" CRC32_Finalize " link CRC32_Finalize} 
   @{" CRC32_FromFile " link CRC32_FromFile} 
   @{" CRC32_FromMem " link CRC32_FromMem} 
   @{" CRC32_FromString " link CRC32_FromString} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE CRC32_Add "CRC32_Add"

@{B}CRC32_Add@{UB}

@{B}Syntax:@{UB}  CRC.l = CRC32_Add \{CRC.l,sourceaddr.l,blength.l\}

@{B}Description:@{UB}
Calculate the CRC32 value of a part of a message.
You need this function, if you dont have the whole message in one memory block.
Call this function with an initial value of $FFFFFFFF for each memory block, and pass the result always to the next call.
After all memory blocks are done, call CRC32_Finalize\{\} to get the real CRC32 checksum value.
The return value of this function is only an intermediate value, not a valid CRC32 checksum.

@{B}Inputs:@{UB}      
- CRC.l    : set this to $FFFFFFFF for the first call or the return valueof the last call
-  sourceaddr.l    : memory pointer to the data
-  blength.l    : byte length of this memory block

@{B}Result:@{UB}      
- CRC.l     : intermediate value that should be passed to the next call of CRC32_Add\{\} or to CRC32_Finalize\{\}

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE CRC32_Finalize "CRC32_Finalize"

@{B}CRC32_Finalize@{UB}

@{B}Syntax:@{UB}  CRC.l = CRC32_Finalize \{CRC.l\}

@{B}Description:@{UB}
Turn the value return by @{" CRC32_Add " link CRC32_Add} into the actual CRC32 checksum.
Note: This function is only necessary, if you use the @{" CRC32_Add " link CRC32_Add} function.
Note: This function is called only once, after all calls to @{" CRC32_Add " link CRC32_Add} are done.

@{B}Inputs:@{UB}      
- CRC.l    : The value returned by the last call of CRC32_add

@{B}Result:@{UB}      
- CRC.l     : The real CRC32 value

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE CRC32_FromFile "CRC32_FromFile"

@{B}CRC32_FromFile@{UB}

@{B}Syntax:@{UB}  CRC.l = CRC32_FromFile \{filename.s\}

@{B}Description:@{UB}
Calculate the CRC checksum out of a file.

@{B}Inputs:@{UB}      
- filename.s    : file name

@{B}Result:@{UB}      
- CRC.l     : 32bit value that represents the CRC32 checksum

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE CRC32_FromMem "CRC32_FromMem"

@{B}CRC32_FromMem@{UB}

@{B}Syntax:@{UB}  CRC.l = CRC32_FromMem \{sourceaddr.l,blength.l\}

@{B}Description:@{UB}
Calculate the  CRC32 checksum out of a memory block.

@{B}Inputs:@{UB}      
- sourceaddr.l    : memory pointer to the data to calculate the checksum of
- blength.l    : byte length of the data, can be anything from 0 - 2^31-1

@{B}Result:@{UB}      
- CRC.l     : 32bit value that represents the CRC32 checksum

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE CRC32_FromString "CRC32_FromString"

@{B}CRC32_FromString@{UB}

@{B}Syntax:@{UB}  CRC.l = CRC32_FromString \{string.s\}

@{B}Description:@{UB}
Calculate the CRC checksum out of a AB2 string.

@{B}Inputs:@{UB}      
- string.s    : string to calculate the CRC32 checksum from

@{B}Result:@{UB}      
- CRC.l     : 32bit value that represents the CRC32 checksum

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB}  CRC32.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 18.08.2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB} Amiblitz2.4

@{B}Purpose:@{UB}
Provide CRC-32 checksum calculation to Amiblitz2.

@{B}Abstract:@{UB}
This include contains functions to calculate the CRC-32 checksum, that is needed in various file formats, e.g. the .png file format for bitmap graphics.
It calculates a fairly unique checksum that can be used to detect transmission errors. A change in the message will cause very likely a different checksum.

@{B}User Constants:@{UB}    none

@{B}Example:@{UB}                                                 none



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
