@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "screen.include"

@{B}screen.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" screen_ASLRequest " link screen_ASLRequest} 
   @{" screen_Check " link screen_Check} 
   @{" screen_Close " link screen_Close} 
   @{" screen_CopyFont " link screen_CopyFont} 
   @{" screen_GetASLAutoScroll " link screen_GetASLAutoScroll} 
   @{" screen_GetASLDepth " link screen_GetASLDepth} 
   @{" screen_GetASLHeight " link screen_GetASLHeight} 
   @{" screen_GetASLModeID " link screen_GetASLModeID} 
   @{" screen_GetASLModeName " link screen_GetASLModeName} 
   @{" screen_GetASLOverscan " link screen_GetASLOverscan} 
   @{" screen_GetASLWidth " link screen_GetASLWidth} 
   @{" screen_GetBestModeID " link screen_GetBestModeID} 
   @{" screen_GetDepth " link screen_GetDepth} 
   @{" screen_GetFPS " link screen_GetFPS} 
   @{" screen_GetHeight " link screen_GetHeight} 
   @{" screen_GetModeID " link screen_GetModeID} 
   @{" screen_GetModeName " link screen_GetModeName} 
   @{" screen_GetPen " link screen_GetPen} 
   @{" screen_GetPenRGB " link screen_GetPenRGB} 
   @{" screen_GetWidth " link screen_GetWidth} 
   @{" screen_ObtainPen " link screen_ObtainPen} 
   @{" screen_Open " link screen_Open} 
   @{" screen_ReleasePen " link screen_ReleasePen} 
   @{" screen_SetASLInitialDims " link screen_SetASLInitialDims} 
   @{" screen_SetASLMaxDims " link screen_SetASLMaxDims} 
   @{" screen_SetASLMinDims " link screen_SetASLMinDims} 
   @{" screen_SetBias " link screen_SetBias} 
   @{" screen_SetPen " link screen_SetPen} 
   @{" screen_SetPenRGB " link screen_SetPenRGB} 
   @{" screen_SetPubName " link screen_SetPubName} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} screen.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 11.08.2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB} Amiblitz2.4, error.include

@{B}Purpose:@{UB}
Provide OS friendly screen handling functionality for Amiblitz programs.

@{B}Abstract:@{UB}
To handle screens looks easy at the frist view, but it tends to be quite complicated when if comes to correct palette handling, ASL requesters etc.
This include tries to cover most screen related issues. It works almost always directly using OS functions, but it fakes a Blitzbasic screen object at #0, so that you can still use all screen functions that come from Blitzbasic.

@{B}User Constants:@{UB}    none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE screen_ASLRequest "screen_ASLRequest"

@{B}screen_ASLRequest@{UB}

@{B}Syntax:@{UB}  result.l = screen_ASLRequest \{title.s,mask.l\}

@{B}Description:@{UB}
Open an ASL screen requester and let the user choose a screenmode.
To reduce the number of screenmodes to the ones matching your specs, use screen_ASL_setmin, screen_aslsetmax and screen_aslsetinitial.
This is a bit more lowlevel than screen_ask. You have to compose your bit mask out of the following values:

#asl_scr_width      =  1 ; ask for width
#asl_scr_height     =  2 ; ask for height
#asl_scr_depth      =  4 ; ask for depth
#asl_scr_overscan   =  8 ; ask for overscan
#asl_scr_ascroll    = 16 ; ask for auto scroll

After calling the requester, you can read out the screen information by screen_ASL_width, screen_ASL_height, screen_ASL_depth, screen_ASL_id, screen_ASL_autoscroll and screen_ask_overscan.

@{B}Inputs:@{UB}      
- title.s    : title of the ASL requester
- mask.l    : bit mask of things you want the ASL requester to ask

@{B}Result:@{UB}      
- result.w     : -1 if the requester was answered, 0 if aborted

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    
screen_ASL_setmin, screen_aslsetmax, screen_aslsetinitial
screen_ASL_width, screen_ASL_height, screen_ASL_depth, screen_ASL_id, screen_ASL_autoscroll, screen_ask_overscan




@ENDNODE
@NODE screen_Check "screen_Check"

@{B}screen_Check@{UB}

@{B}Syntax:@{UB}  result.w = screen_Check \{modeid.l,scr_width.l,scr_height.l,scr_depth.w,scr_overscan.l,scr_ascroll.l\}

@{B}Description:@{UB}
Ask for a screen mode via ASL requester to complete your pre-definitions. Set the parameters to -1 if you want them to be asked by ASL requester, or set them to your pre-defined value.
If the screen mode is clear, it will return immediately.

@{B}Inputs:@{UB}      
- modeid.l        : desired screen mode, if known
- scr_width.l     : screen width
- scr_height.l    : screen height
- scr_depth.w     : screen depth
- scr_overscan.l  : screen overscan
- scr_ascroll.l   : auto scroll

@{B}Result:@{UB}      
- result.w     : -1 if the screenmode could be determined, 0 if the user aborted

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE screen_Close "screen_Close"

@{B}screen_Close@{UB}

@{B}Syntax:@{UB} screen_Close \{\}

@{B}Description:@{UB}
Close the current screen. It is safe to call this if no screen was opened by screen.include.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" screen_Open " link screen_Open}




@ENDNODE
@NODE screen_CopyFont "screen_CopyFont"

@{B}screen_CopyFont@{UB}

@{B}Syntax:@{UB}  result.w = screen_CopyFont \{blitzfontID.l\}

@{B}Description:@{UB}
Clone the screens font and open it as a blitzbasic IntuiFont.
The font is the used font then and will be used by other blitz functions.

@{B}Inputs:@{UB}      
- blitzfontID.l    : Blitz IntuiFont object number

@{B}Result:@{UB}      
- result.w     :  -1 if everything went well, 0 if something went wrong

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE screen_GetASLAutoScroll "screen_GetASLAutoScroll"

@{B}screen_GetASLAutoScroll@{UB}

@{B}Syntax:@{UB}  result.l = screen_GetASLAutoScroll \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE screen_GetASLDepth "screen_GetASLDepth"

@{B}screen_GetASLDepth@{UB}

@{B}Syntax:@{UB}  result.l = screen_GetASLDepth \{\}

@{B}Description:@{UB}
Return the screen depth (2^depth = number of colours) selected by the last call of screen_asl.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : screen depth

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    screen_asl




@ENDNODE
@NODE screen_GetASLHeight "screen_GetASLHeight"

@{B}screen_GetASLHeight@{UB}

@{B}Syntax:@{UB}  result.l = screen_GetASLHeight \{\}

@{B}Description:@{UB}
Return the screen height selected by the last call of screen_asl.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : screen height

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    screen_asl




@ENDNODE
@NODE screen_GetASLModeID "screen_GetASLModeID"

@{B}screen_GetASLModeID@{UB}

@{B}Syntax:@{UB}  result.l = screen_GetASLModeID \{\}

@{B}Description:@{UB}
Return the screen mode ID selected by the last call of screen_asl.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : screen mode ID

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    screen_asl




@ENDNODE
@NODE screen_GetASLModeName "screen_GetASLModeName"

@{B}screen_GetASLModeName@{UB}

@{B}Syntax:@{UB}  result.s = screen_GetASLModeName \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.s     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE screen_GetASLOverscan "screen_GetASLOverscan"

@{B}screen_GetASLOverscan@{UB}

@{B}Syntax:@{UB}  result.l = screen_GetASLOverscan \{\}

@{B}Description:@{UB}
Return the overscan value selected by the last call of screen_asl.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : overscan value

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    screen_asl




@ENDNODE
@NODE screen_GetASLWidth "screen_GetASLWidth"

@{B}screen_GetASLWidth@{UB}

@{B}Syntax:@{UB}  result.l = screen_GetASLWidth \{\}

@{B}Description:@{UB}
Return the screen width that was selected by the last call of screen_asl or screen_ask.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : screen width

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    screen_asl




@ENDNODE
@NODE screen_GetBestModeID "screen_GetBestModeID"

@{B}screen_GetBestModeID@{UB}

@{B}Syntax:@{UB}  result.l = screen_GetBestModeID \{scr_width.l,scr_height.l,scr_depth.l\}

@{B}Description:@{UB}
Return the best screenmode ID for the given screen dimensions.

@{B}Inputs:@{UB}      
- scr_width.l    : ???
- scr_height.l    : ???
- scr_depth.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE screen_GetDepth "screen_GetDepth"

@{B}screen_GetDepth@{UB}

@{B}Syntax:@{UB}  result.l = screen_GetDepth \{\}

@{B}Description:@{UB}
Return the color depth of the currently open screen.
A depth lower or equal to 8 is usually a color indexed screen (1..256 colors).
A depth of 16 is Hi Color, and 24 is a True Color screen.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : color depth

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE screen_GetFPS "screen_GetFPS"

@{B}screen_GetFPS@{UB}

@{B}Syntax:@{UB}  result.f = screen_GetFPS \{@modeid.l\}

@{B}Description:@{UB}
Return the fps for the currently open screen.

@{B}Inputs:@{UB}      
- modeid.l    : ???

@{B}Result:@{UB}      
- result.f     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE screen_GetHeight "screen_GetHeight"

@{B}screen_GetHeight@{UB}

@{B}Syntax:@{UB}  result.l = screen_GetHeight \{\}

@{B}Description:@{UB}
Return the height in pixels of the currently open screen.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : height in pixels

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    screen_width, screen_depth, screen_id




@ENDNODE
@NODE screen_GetModeID "screen_GetModeID"

@{B}screen_GetModeID@{UB}

@{B}Syntax:@{UB}  result.l = screen_GetModeID \{\}

@{B}Description:@{UB}
Return the screenmode ID of the currently open screen.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : screenmode ID

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    screen_width, screen_height, screen_depth




@ENDNODE
@NODE screen_GetModeName "screen_GetModeName"

@{B}screen_GetModeName@{UB}

@{B}Syntax:@{UB}  result.s = screen_GetModeName \{@modeid.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- modeid.l    : ???

@{B}Result:@{UB}      
- result.s     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE screen_GetPen "screen_GetPen"

@{B}screen_GetPen@{UB}

@{B}Syntax:@{UB}  result.l = screen_GetPen \{r.l,g.l,b.l\}

@{B}Description:@{UB}
Return a pen number that reflects a similar pen to your specified RGB values.
It uses ObtainBestPen() to find a pen. No locked pens will be destroyed. This is the best way to get your pen numbers if you plan to draw something on a screen like lines, boxes or text.
Generally, you should never set pens directly unless you are the exclusive owner of the screen and you know what you are doing.
Note: the pen will be locked, so no other process can destroy it. You can release it using @{" screen_ReleasePen " link screen_ReleasePen}. Beware that your drawings might get trashed then if they are still visible.
Note: if you close the screen (or just leave it if it was stolen, e.g. the WB screen), all locked pens will be unlocked automatically.

@{B}Inputs:@{UB}      
- r.l    : 0...255 for red
- g.l    : 0...255 for green
- b.l    : 0...255 for blue

@{B}Result:@{UB}      
- result.l     : pen number, ready to use for pen based graphic operations.

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" screen_GetPenRGB " link screen_GetPenRGB}, @{" screen_SetPen " link screen_SetPen}




@ENDNODE
@NODE screen_GetPenRGB "screen_GetPenRGB"

@{B}screen_GetPenRGB@{UB}

@{B}Syntax:@{UB}  result.l = screen_GetPenRGB \{color.l\}

@{B}Description:@{UB}
Same like @{" screen_GetPen " link screen_GetPen}, but specifies the RGB value as one long value.

@{B}Inputs:@{UB}      
- color.l    : RGB value, e.g. $FF0000 for red

@{B}Result:@{UB}      
- result.l     : pen number

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" screen_GetPen " link screen_GetPen}




@ENDNODE
@NODE screen_GetWidth "screen_GetWidth"

@{B}screen_GetWidth@{UB}

@{B}Syntax:@{UB}  result.l = screen_GetWidth \{\}

@{B}Description:@{UB}
Return the width in pixels of the screen.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : screen width

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    screen_height, screen_depth, screen_id




@ENDNODE
@NODE screen_ObtainPen "screen_ObtainPen"

@{B}screen_ObtainPen@{UB}

@{B}Syntax:@{UB} screen_ObtainPen \{n.l\}

@{B}Description:@{UB}
Lock a pen on a screen. The pen can not be changed by other processes unless you unlock it.
Note: If you use @{" screen_GetPen " link screen_GetPen}, the pen is automatically locked. Normally, there is no need for you to use this function.

@{B}Inputs:@{UB}      
- n.l    : pen number to lock.

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" screen_ReleasePen " link screen_ReleasePen}




@ENDNODE
@NODE screen_Open "screen_Open"

@{B}screen_Open@{UB}

@{B}Syntax:@{UB}  result.w = screen_Open \{title.s,@modeid.l,@scr_width.l,@scr_height.l,@scr_depth.l,@visible.l\}

@{B}Description:@{UB}
Open a screen according the specified dimensions.

There are some "special" screen mode IDs:
  #scr_mode_wb_use   = -1 ; use the wb screen
  #scr_mode_wb_clone = -2 ; clone the wb screen
  #scr_mode_ask      = 0 ; ask vi aASL requester
  #scr_mode_find     = -3 ; find the screen with the given title

@{B}Inputs:@{UB}      
- title.s    : name of the screen
- modeid.l    : screenmode ID or one of the #scr_mode_... constants
- scr_width.l    : screen width
- scr_height.l    : screen height
- scr_depth.l    : screen depth
- visible.l    : set to -1, the screen will pop in front when it is created, 0 it will be created in the background until you pop it to front.

@{B}Result:@{UB}      
- result.w     : -1 if the screen is open, 0 if it failed

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" screen_Close " link screen_Close}




@ENDNODE
@NODE screen_ReleasePen "screen_ReleasePen"

@{B}screen_ReleasePen@{UB}

@{B}Syntax:@{UB} screen_ReleasePen \{pen.l\}

@{B}Description:@{UB}
Release a previously locked pen.

@{B}Inputs:@{UB}      
- pen.l    : pen number

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    screen_lockpen, @{" screen_GetPen " link screen_GetPen}, @{" screen_SetPen " link screen_SetPen}




@ENDNODE
@NODE screen_SetASLInitialDims "screen_SetASLInitialDims"

@{B}screen_SetASLInitialDims@{UB}

@{B}Syntax:@{UB} screen_SetASLInitialDims \{init_id.l,init_width.l,init_height.l,init_depth.l\}

@{B}Description:@{UB}
Set the initial values of the ASL screen mode requester.
Note: Usually, you set this to the values of the current screen.

@{B}Inputs:@{UB}      
- init_id.l    : screen mode id
- init_width.l    : screen width
- init_height.l    : screen height
- init_depth.l    : screen depth

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    screen_asl




@ENDNODE
@NODE screen_SetASLMaxDims "screen_SetASLMaxDims"

@{B}screen_SetASLMaxDims@{UB}

@{B}Syntax:@{UB} screen_SetASLMaxDims \{max_width.l,max_height.l,max_depth.l\}

@{B}Description:@{UB}
Set the maximum dimensions of the screen you which to be selectable in the ASL requester.
Screenmodes that can not handle your dimensions will be filtered out from the list.

@{B}Inputs:@{UB}      
- max_width.l    : screen width
- max_height.l    : screen height
- max_depth.l    : screen depth

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    screen_asl, screen_ASL_setmin




@ENDNODE
@NODE screen_SetASLMinDims "screen_SetASLMinDims"

@{B}screen_SetASLMinDims@{UB}

@{B}Syntax:@{UB} screen_SetASLMinDims \{min_width.l,min_height.l,min_depth.l\}

@{B}Description:@{UB}
Set the minimum dimensions of the screen you which to be selectable in the ASL requester.
Screenmodes that can not handle your dimensions will be filtered out from the list.
Hint: To force hi/true color screen modes, depth min_depth to 16.

@{B}Inputs:@{UB}      
- min_width.l    : screen width
- min_height.l    : screen height
- min_depth.l    : screen depth

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    screen_asl, screen_ASL_setmax




@ENDNODE
@NODE screen_SetBias "screen_SetBias"

@{B}screen_SetBias@{UB}

@{B}Syntax:@{UB} screen_SetBias \{r.l,g.l,b.l\}

@{B}Description:@{UB}
All pen allocations go through a "bias" to control the color temperatur.
A bias of 100 means no change.

@{B}Inputs:@{UB}      
- r.l    : bias of red
- g.l    : bias of green
- b.l    : bias of blue

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE screen_SetPen "screen_SetPen"

@{B}screen_SetPen@{UB}

@{B}Syntax:@{UB} screen_SetPen \{n.l,r.l,g.l,b.l\}

@{B}Description:@{UB}
Set a pen to the given RGB values and lock it.
This is not a nice way to get a pen number, but you can be sure that it matches exactly the color you specify. Dont do this on screens you dont own or that share the palette with other programs. Use @{" screen_GetPen " link screen_GetPen} instead.

@{B}Inputs:@{UB}      
- n.l    : pen number
- r.l    : 0...255 red
- g.l    : 0...255 green
- b.l    : 0...2555 blue

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" screen_GetPen " link screen_GetPen}, @{" screen_ReleasePen " link screen_ReleasePen}




@ENDNODE
@NODE screen_SetPenRGB "screen_SetPenRGB"

@{B}screen_SetPenRGB@{UB}

@{B}Syntax:@{UB} screen_SetPenRGB \{pen.l,color.l\}

@{B}Description:@{UB}
Same like @{" screen_SetPen " link screen_SetPen}, but with one long value for the color.

@{B}Inputs:@{UB}      
- pen.l    : pen number
- color.l    : RGB value, e.g. $00FF00 for green

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" screen_SetPen " link screen_SetPen}, @{" screen_GetPen " link screen_GetPen}, @{" screen_ReleasePen " link screen_ReleasePen}




@ENDNODE
@NODE screen_SetPubName "screen_SetPubName"

@{B}screen_SetPubName@{UB}

@{B}Syntax:@{UB} screen_SetPubName \{pubname.s\}

@{B}Description:@{UB}
If your screen should have a different name as pub name than you specify during @{" screen_Open " link screen_Open}, you can set it with this function BEFORE you open the screen.

@{B}Inputs:@{UB}      
- pubname.s    : public name of the screen

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
