@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "asm_audio.include"

@{B}asm_audio.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" asm_copymem " link asm_copymem} 
   @{" asm_fade_clip16m " link asm_fade_clip16m} 
   @{" asm_fade_clip16s " link asm_fade_clip16s} 
   @{" asm_ffade_clip16mx " link asm_ffade_clip16mx} 
   @{" asm_ffade_clip16sx " link asm_ffade_clip16sx} 
   @{" asm_gain " link asm_gain} 
   @{" asm_gain_clip " link asm_gain_clip} 
   @{" asm_getpeak " link asm_getpeak} 
   @{" asm_l2r " link asm_l2r} 
   @{" asm_makesubsample16m " link asm_makesubsample16m} 
   @{" asm_merge " link asm_merge} 
   @{" asm_merge32 " link asm_merge32} 
   @{" asm_merge32_LSR " link asm_merge32_LSR} 
   @{" asm_merge_m " link asm_merge_m} 
   @{" asm_r2l " link asm_r2l} 
   @{" asm_saw16s " link asm_saw16s} 
   @{" asm_seekpeak " link asm_seekpeak} 
   @{" asm_swap " link asm_swap} 
   @{" asm_zero " link asm_zero} 
   @{" asm_zero16m " link asm_zero16m} 
   @{" asm_zero16s " link asm_zero16s} 
   @{" asm_zerox " link asm_zerox} 

@{B}Private Function Index:@{UB}

   @{" asm_findlowhigh_m " link asm_findlowhigh_m} 
   @{" asm_findlowhigh_reset " link asm_findlowhigh_reset} 
   @{" asm_findlowhigh_s " link asm_findlowhigh_s} 
   @{" asm_findlowhigh_sub_m " link asm_findlowhigh_sub_m} 
   @{" asm_findlowhigh_sub_s " link asm_findlowhigh_sub_s} 
   @{" asm_makesubsample16s " link asm_makesubsample16s} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB}  asm_audio.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 11.03.2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB} Amiblitz2.4

@{B}Purpose:@{UB}
Collection of 68K ASM routines for audio processing. Used in HD-Rec.

@{B}Abstract:@{UB}

@{B}User Constants:@{UB}    none

@{B}Example:@{UB}                                                 none



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_copymem "asm_copymem"

@{B}asm_copymem@{UB}

@{B}Syntax:@{UB} asm_copymem \{sourceaddr.l,destaddr.l,blength.l\}

@{B}Description:@{UB}
Same as CopyMem_, but faster and memory areas can overlap!

@{B}Inputs:@{UB}      
- sourceaddr.l    : source address
- destaddr.l    : destination address
- blength.l    : byte length

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_fade_clip16m "asm_fade_clip16m"

@{B}asm_fade_clip16m@{UB}

@{B}Syntax:@{UB} asm_fade_clip16m \{sourceaddr.l,destaddr.l,flength.l,*params.asm_fadeparams\}

@{B}Description:@{UB}
Do a volume fade on 16bit signed mono wavesample. Values that exceed 16bit range will be clipped.

@{B}Inputs:@{UB}      
- sourceaddr.l    : source address
- destaddr.l    : destination address
- flength.l    : length in sample frames
- *params.asm_fadeparams    : asm_fadeparams structure

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_fade_clip16s "asm_fade_clip16s"

@{B}asm_fade_clip16s@{UB}

@{B}Syntax:@{UB} asm_fade_clip16s \{sourceaddr.l,destaddr.l,flength.l,*params.asm_fadeparams\}

@{B}Description:@{UB}
Do a volume fade on 16bit signed stereo wavesample. Values that exceed 16bit range will be clipped.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- destaddr.l    : ???
- flength.l    : ???
- *params.asm_fadeparams    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_ffade_clip16mx "asm_ffade_clip16mx"

@{B}asm_ffade_clip16mx@{UB}

@{B}Syntax:@{UB} asm_ffade_clip16mx \{sourceaddr.l,destaddr.l,flength.l,*params.asm_fadeparams\}

@{B}Description:@{UB}
Do a volume fade on 16bit signed mono wavesample. Values that exceed 16bit range will be clipped.
The calculations are dont using floats for highest accuracy.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- destaddr.l    : ???
- flength.l    : ???
- *params.asm_fadeparams    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_ffade_clip16sx "asm_ffade_clip16sx"

@{B}asm_ffade_clip16sx@{UB}

@{B}Syntax:@{UB} asm_ffade_clip16sx \{sourceaddr.l,destaddr.l,flength.l,*params.asm_fadeparams\}

@{B}Description:@{UB}
Do a volume fade on 16bit signed stereo wavesample. Values that exceed 16bit range will be clipped.
The calculations are dont using floats for highest accuracy.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- destaddr.l    : ???
- flength.l    : ???
- *params.asm_fadeparams    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_findlowhigh_m "asm_findlowhigh_m"

@{B}asm_findlowhigh_m@{UB}

@{B}Syntax:@{UB}  result.l = asm_findlowhigh_m \{sourceaddr.l,dummy.l,pixheight.l,viewratio.l,s_length.l\}

@{B}Description:@{UB}
* private * Used in HD-Rec.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- dummy.l    : ???
- pixheight.l    : ???
- viewratio.l    : ???
- s_length.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_findlowhigh_reset "asm_findlowhigh_reset"

@{B}asm_findlowhigh_reset@{UB}

@{B}Syntax:@{UB} asm_findlowhigh_reset \{d_length.l,ratio.l\}

@{B}Description:@{UB}
* private * Used in HD-REc.

@{B}Inputs:@{UB}      
- d_length.l    : ???
- ratio.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_findlowhigh_s "asm_findlowhigh_s"

@{B}asm_findlowhigh_s@{UB}

@{B}Syntax:@{UB}  result.l = asm_findlowhigh_s \{sourceaddr.l,dummy.l,pixheight.l,viewratio.l,s_length.l\}

@{B}Description:@{UB}
* private * Used in HD-Rec.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- dummy.l    : ???
- pixheight.l    : ???
- viewratio.l    : ???
- s_length.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_findlowhigh_sub_m "asm_findlowhigh_sub_m"

@{B}asm_findlowhigh_sub_m@{UB}

@{B}Syntax:@{UB} asm_findlowhigh_sub_m \{sourceaddr.l,d_length.l,pixheight.l,viewratio.l,subratio.l,zoom.l\}

@{B}Description:@{UB}
* private * Used in HD-Rec.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- d_length.l    : ???
- pixheight.l    : ???
- viewratio.l    : ???
- subratio.l    : ???
- zoom.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_findlowhigh_sub_s "asm_findlowhigh_sub_s"

@{B}asm_findlowhigh_sub_s@{UB}

@{B}Syntax:@{UB} asm_findlowhigh_sub_s \{sourceaddr.l,d_length.l,pixheight.l,viewratio.l,subratio.l,zoom.l\}

@{B}Description:@{UB}
* private * Used in HD-Rec.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- d_length.l    : ???
- pixheight.l    : ???
- viewratio.l    : ???
- subratio.l    : ???
- zoom.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_gain "asm_gain"

@{B}asm_gain@{UB}

@{B}Syntax:@{UB} asm_gain \{sourceaddr.l,destaddr.l,wlength.l,gain.l\}

@{B}Description:@{UB}
Change the volume gain.

@{B}Inputs:@{UB}      
- sourceaddr.l    : source address
- destaddr.l    : destination address
- wlength.l    : size in words (16bit)
- gain.l    : 0=mute, 256=same gain, 512=double volume

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_gain_clip "asm_gain_clip"

@{B}asm_gain_clip@{UB}

@{B}Syntax:@{UB} asm_gain_clip \{sourceaddr.l,destaddr.l,wlength.l,gain.l\}

@{B}Description:@{UB}
Change the volume gain and clip if the value exceed the 16bit range.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- destaddr.l    : ???
- wlength.l    : ???
- gain.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_getpeak "asm_getpeak"

@{B}asm_getpeak@{UB}

@{B}Syntax:@{UB}  result.l =  asm_getpeak \{sourceaddr.l,bytelength.l\}

@{B}Description:@{UB}
Find the highest (or loewest) 16bit peak value in the given memory area.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- bytelength.l    : ???

@{B}Result:@{UB}      
- result.l     : peak value

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_l2r "asm_l2r"

@{B}asm_l2r@{UB}

@{B}Syntax:@{UB} asm_l2r \{sourceaddr.l,destaddr.l,flength.l\}

@{B}Description:@{UB}
Copy the left channel to the right channel. It works on 16bit stereo data.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- destaddr.l    : ???
- flength.l    : length in sampleframes (=byte length / 4)

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_makesubsample16m "asm_makesubsample16m"

@{B}asm_makesubsample16m@{UB}

@{B}Syntax:@{UB} asm_makesubsample16m \{sourceaddr.l,modulo.l,blength.l,density.l,brain.l\}

@{B}Description:@{UB}
Used by HD-Rec.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- modulo.l    : ???
- blength.l    : ???
- density.l    : ???
- brain.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_makesubsample16s "asm_makesubsample16s"

@{B}asm_makesubsample16s@{UB}

@{B}Syntax:@{UB} asm_makesubsample16s \{sourceaddr.l,modulo.l,blength.l,density.l,brain_ptr.l\}

@{B}Description:@{UB}
* private * Used by HD-Rec.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- modulo.l    : ???
- blength.l    : ???
- density.l    : ???
- brain_ptr.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_merge "asm_merge"

@{B}asm_merge@{UB}

@{B}Syntax:@{UB} asm_merge \{sourceaddr.l,destaddr.l,flength.l\}

@{B}Description:@{UB}
Merge two audiostreams, both have to be 16bit stereo bigendian signed
Uses clipping to avoid crackling if peak is to high.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- destaddr.l    : ???
- flength.l    : length in sampleframes = bytelength / 4, must be > 0

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_merge32 "asm_merge32"

@{B}asm_merge32@{UB}

@{B}Syntax:@{UB} asm_merge32 \{sourceaddr.l,destaddr.l,flength.l\}

@{B}Description:@{UB}
Merge two audiostreams, both have to be 32bit stereo bigendian signed

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- destaddr.l    : ???
- flength.l    :  length in sampleframes = bytelength / 8, must be > 0

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_merge32_LSR "asm_merge32_LSR"

@{B}asm_merge32_LSR@{UB}

@{B}Syntax:@{UB} asm_merge32_LSR \{sourceaddr.l,destaddr.l,flength.l,LSR_val.l\}

@{B}Description:@{UB}
???

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- destaddr.l    : ???
- flength.l    : ???
- LSR_val.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_merge_m "asm_merge_m"

@{B}asm_merge_m@{UB}

@{B}Syntax:@{UB} asm_merge_m \{sourceaddr.l,destaddr.l,flength.l\}

@{B}Description:@{UB}
Merge two audiostreams, both have to be 16bit mono bigendian signed
Uses clipping to avoid crackling if peak is to high.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- destaddr.l    : ???
- flength.l    : length in sampleframes = bytelength / 2, must be > 0

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_r2l "asm_r2l"

@{B}asm_r2l@{UB}

@{B}Syntax:@{UB} asm_r2l \{sourceaddr.l,destaddr.l,flength.l\}

@{B}Description:@{UB}
Copy the right channel to the left channel on 16bit stereo data.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- destaddr.l    : ???
- flength.l    : length in sample frames (=byte length/4)

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_saw16s "asm_saw16s"

@{B}asm_saw16s@{UB}

@{B}Syntax:@{UB}  newseed.l =  asm_saw16s \{destaddr.l,flength.l,frequ.l,seed.l\}

@{B}Description:@{UB}
Generate a Saw waveform at the given frequency starting with seed (=phase).
Useful to fill buffers with a "buzz" instead of zeroing them for debugging purposes.

@{B}Inputs:@{UB}      
- destaddr.l    : ???
- flength.l    : ???
- frequ.l    : frequ = 32768 *  frequency[Hz] / samplerate
- seed.l    : ???

@{B}Result:@{UB}      
- newseed.l     : seed value to feed in the next call auf this function to get a continous waveform

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_seekpeak "asm_seekpeak"

@{B}asm_seekpeak@{UB}

@{B}Syntax:@{UB}  pos.l =  asm_seekpeak \{sourceaddr.l,bytelength.l,peak.l,reverse.l\}

@{B}Description:@{UB}
Find the position of the first value that exceed peak.l in 16bit mono or stereo data.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- bytelength.l    : ???
- peak.l    : peak value that has to be exceeded
- reverse.l    : 0= seek from beginning, -1 seek backwards from end

@{B}Result:@{UB}      
- pos.l     : Byte position where the first exceeding of peak.l happend

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_swap "asm_swap"

@{B}asm_swap@{UB}

@{B}Syntax:@{UB} asm_swap \{sourceaddr.l,destaddr.l,flength.l\}

@{B}Description:@{UB}
Swap left and right channel in 16bit stereo data.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- destaddr.l    : ???
- flength.l    : length in sample frames (=byte length/4)

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_zero "asm_zero"

@{B}asm_zero@{UB}

@{B}Syntax:@{UB} asm_zero \{destaddr.l,blength.l\}

@{B}Description:@{UB}
Zero (make absolute silence) the given memory area.

@{B}Inputs:@{UB}      
- destaddr.l    : ???
- blength.l    : byte length

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_zero16m "asm_zero16m"

@{B}asm_zero16m@{UB}

@{B}Syntax:@{UB} asm_zero16m \{destaddr.l,flength.l\}

@{B}Description:@{UB}
Zero (make absolute silence) the given memory area.

@{B}Inputs:@{UB}      
- destaddr.l    : ???
- flength.l    : length in sample frames (=byte length/2)

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_zero16s "asm_zero16s"

@{B}asm_zero16s@{UB}

@{B}Syntax:@{UB} asm_zero16s \{destaddr.l,flength.l\}

@{B}Description:@{UB}
Zero (make absolute silence) the given memory area.

@{B}Inputs:@{UB}      
- destaddr.l    : ???
- flength.l    : length in sample frames (=byte length/4)

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE asm_zerox "asm_zerox"

@{B}asm_zerox@{UB}

@{B}Syntax:@{UB} asm_zerox \{destaddr.l,blength.l\}

@{B}Description:@{UB}
Fills destaddr with zeros, blength is in bytes! It is optimized for speed so there is no need for a 16bit stereo only version.

@{B}Inputs:@{UB}      
- destaddr.l    : ???
- blength.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        
This function might be buggy. This is why it has the "x" at the end. Better use @{" asm_zero " link asm_zero}.



@{B}See also:@{UB}    -


@ENDNODE
