@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "jpeg.include"

@{B}jpeg.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" jpeg_Decode " link jpeg_Decode} 
   @{" jpeg_Find " link jpeg_Find} 
   @{" jpeg_GetHeight " link jpeg_GetHeight} 
   @{" jpeg_GetWidth " link jpeg_GetWidth} 
   @{" jpeg_Read " link jpeg_Read} 
   @{" jpeg_Write " link jpeg_Write} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} jpeg.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 29/12/2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB}  Amiblitz2.4

@{B}Purpose:@{UB}
This is a include to support the image.include with jpeg functionality.

@{B}Abstract:@{UB}
This include is of not much use stand alone, as you can load and save images through the image.include, but you might want to have a look at the source code for educational reasons.

@{B}User Constants:@{UB} none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE jpeg_Decode "jpeg_Decode"

@{B}jpeg_Decode@{UB}

@{B}Syntax:@{UB}  result.l = jpeg_Decode \{jph.l,*rp.RastPort\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- jph.l    : ???
- *rp.RastPort    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE jpeg_Find "jpeg_Find"

@{B}jpeg_Find@{UB}

@{B}Syntax:@{UB}  result.l = jpeg_Find \{memP.l,memsize.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- memP.l    : ???
- memsize.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE jpeg_GetHeight "jpeg_GetHeight"

@{B}jpeg_GetHeight@{UB}

@{B}Syntax:@{UB}  result.l = jpeg_GetHeight \{jph.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- jph.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE jpeg_GetWidth "jpeg_GetWidth"

@{B}jpeg_GetWidth@{UB}

@{B}Syntax:@{UB}  result.l = jpeg_GetWidth \{jph.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- jph.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE jpeg_Read "jpeg_Read"

@{B}jpeg_Read@{UB}

@{B}Syntax:@{UB}  result.l = jpeg_Read \{fid.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- fid.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE jpeg_Write "jpeg_Write"

@{B}jpeg_Write@{UB}

@{B}Syntax:@{UB}  succ.l = jpeg_Write \{fid.l,*rp.RastPort,img_width.l,img_height.l,@quality.l,@smoothing.l,@noprogressive.l\}

@{B}Description:@{UB}
Write a rastport as an jpeg encoded image to a file.

@{B}Inputs:@{UB}      
- fid.l    : file object ID (file.include)
- *rp.RastPort    : pointer to a rastport, must be high or true color
- img_width.l    : image width
- img_height.l    : image height
- quality.l    : image quality [1...100], where 1 is very bad quality butsmall file size, and 100 is best quality but big file size (default is 85)
- smoothing.l    : apply smooting during encoding [0...100], where 0 is no smoothing, 100 is maximum smoothing (default is 0)
- noprogressive.l    : 0 = encode as progressive jpeg, -1 = normal jpeg (default is -1)

@{B}Result:@{UB}      
- succ.l     : -1 if everything went well, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
