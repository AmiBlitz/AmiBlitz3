@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "png.include"

@{B}png.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" png_Close " link png_Close} 
   @{" png_DecodeARGB " link png_DecodeARGB} 
   @{" png_DecodeAlpha " link png_DecodeAlpha} 
   @{" png_FindChunk " link png_FindChunk} 
   @{" png_GetHeight " link png_GetHeight} 
   @{" png_GetWidth " link png_GetWidth} 
   @{" png_Open " link png_Open} 
   @{" png_Write " link png_Write} 

@{B}Private Function Index:@{UB}

   @{" png_Filter " link png_Filter} 
   @{" png_Read " link png_Read} 
   @{" png_Unfilter " link png_Unfilter} 

@{B}Public Macro Index:@{UB}

   @{" !png_inc_buffer " link !png_inc_buffer} 
   @{" !png_init_a " link !png_init_a} 
   @{" !png_init_b " link !png_init_b} 
   @{" !png_init_c " link !png_init_c} 
   @{" !png_shift_b " link !png_shift_b} 
   @{" !png_shift_c " link !png_shift_c} 
   @{" !png_unfilter_adam7_alpha " link !png_unfilter_adam7_alpha} 
   @{" !png_unfilter_adam7_argb " link !png_unfilter_adam7_argb} 
   @{" !png_unfilter_average " link !png_unfilter_average} 
   @{" !png_unfilter_peath " link !png_unfilter_peath} 
   @{" !png_unfilter_sub " link !png_unfilter_sub} 
   @{" !png_unfilter_up " link !png_unfilter_up} 

@ENDNODE
@NODE !png_inc_buffer "!png_inc_buffer"

@{B}!png_inc_buffer@{UB}

@{B}Syntax:@{UB} !png_inc_buffer

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !png_init_a "!png_init_a"

@{B}!png_init_a@{UB}

@{B}Syntax:@{UB} !png_init_a

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !png_init_b "!png_init_b"

@{B}!png_init_b@{UB}

@{B}Syntax:@{UB} !png_init_b

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !png_init_c "!png_init_c"

@{B}!png_init_c@{UB}

@{B}Syntax:@{UB} !png_init_c

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !png_shift_b "!png_shift_b"

@{B}!png_shift_b@{UB}

@{B}Syntax:@{UB} !png_shift_b

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !png_shift_c "!png_shift_c"

@{B}!png_shift_c@{UB}

@{B}Syntax:@{UB} !png_shift_c

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !png_unfilter_adam7_alpha "!png_unfilter_adam7_alpha"

@{B}!png_unfilter_adam7_alpha@{UB}

@{B}Syntax:@{UB} !png_unfilter_adam7_alpha \{xoff,yoff,xstep,ystep\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- xoff    : ???
- yoff    : ???
- xstep    : ???
- ystep    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !png_unfilter_adam7_argb "!png_unfilter_adam7_argb"

@{B}!png_unfilter_adam7_argb@{UB}

@{B}Syntax:@{UB} !png_unfilter_adam7_argb \{xoff,yoff,xstep,ystep\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- xoff    : ???
- yoff    : ???
- xstep    : ???
- ystep    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !png_unfilter_average "!png_unfilter_average"

@{B}!png_unfilter_average@{UB}

@{B}Syntax:@{UB} !png_unfilter_average

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !png_unfilter_peath "!png_unfilter_peath"

@{B}!png_unfilter_peath@{UB}

@{B}Syntax:@{UB} !png_unfilter_peath

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !png_unfilter_sub "!png_unfilter_sub"

@{B}!png_unfilter_sub@{UB}

@{B}Syntax:@{UB} !png_unfilter_sub

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !png_unfilter_up "!png_unfilter_up"

@{B}!png_unfilter_up@{UB}

@{B}Syntax:@{UB} !png_unfilter_up

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} png.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 29/12/2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB}  Amiblitz2.4, zlib.library

@{B}Purpose:@{UB}
This is a include to support the image.inlcude with png functionality.

@{B}Abstract:@{UB}
This include is of not much use stand alone, as you can load and save images through the image.include, but you might want to have a look at the source code for educational reasons.

This include is used by the image.include to load the alpha channel of a .png file, because picture.datatype on OS3.x does not support this.
It can also be used to save a png file from an ARGB or RGB pixel array.

@{B}User Constants:@{UB} none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE png_Close "png_Close"

@{B}png_Close@{UB}

@{B}Syntax:@{UB} png_Close \{\}

@{B}Description:@{UB}
Close the png file.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE png_DecodeARGB "png_DecodeARGB"

@{B}png_DecodeARGB@{UB}

@{B}Syntax:@{UB} png_DecodeARGB \{destbuffer.l,bpr.l\}

@{B}Description:@{UB}
Decode (means decompress and unfilter) a png buffer into an ARGB pixel array.

@{B}Inputs:@{UB}      
- destbuffer.l    : memory pointer of the ARGB pixel array (make sure it is big enough: width*height*4 bytes!)
- bpr.l    : bpr of the ARGB pixel array

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE png_DecodeAlpha "png_DecodeAlpha"

@{B}png_DecodeAlpha@{UB}

@{B}Syntax:@{UB} png_DecodeAlpha \{destbuffer.l,bpr.l\}

@{B}Description:@{UB}
Decode (means decompress and unfilter) a png buffer into an 8bit alpha array.

@{B}Inputs:@{UB}      
- destbuffer.l    : memory pointer of the alpha array (make sure it is big enough: width*height*1 bytes!)
- bpr.l    : bpr of the alpha array

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE png_Filter "png_Filter"

@{B}png_Filter@{UB}

@{B}Syntax:@{UB}  result.l = png_Filter \{sourceaddr.l,destaddr.l,lines.l,bpr.l,filtertype.l,bpp.l\}

@{B}Description:@{UB}
* private *
Perform the png filtering.

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- destaddr.l    : ???
- lines.l    : ???
- bpr.l    : ???
- filtertype.l    : ???
- bpp.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE png_FindChunk "png_FindChunk"

@{B}png_FindChunk@{UB}

@{B}Syntax:@{UB}  result.l = png_FindChunk \{dos.l,chunk.l,@pos.l,@blength.l,@immediate.l\}

@{B}Description:@{UB}
Find a chunk within a png file.
NOTE: The chunk format is different from the FORM chunks, so the png.include needs its own function.

@{B}Inputs:@{UB}      
- dos.l    : file object ID (file.include)
- chunk.l    : chunk header ID
- pos.l    : file seek position from where to start
- blength.l    : maximum byte length
- immediate.l    : allow the first chunk to be found

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE png_GetHeight "png_GetHeight"

@{B}png_GetHeight@{UB}

@{B}Syntax:@{UB}  height.l = png_GetHeight \{\}

@{B}Description:@{UB}
Return the height of the png image in pixel.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- height.l     : height in pixel

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE png_GetWidth "png_GetWidth"

@{B}png_GetWidth@{UB}

@{B}Syntax:@{UB}  width.l = png_GetWidth \{\}

@{B}Description:@{UB}
Return the width of the open png image in pixel.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- width.l     : width in pixel

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE png_Open "png_Open"

@{B}png_Open@{UB}

@{B}Syntax:@{UB}  succ.l = png_Open \{filename.s\}

@{B}Description:@{UB}
Open a png file for reading.

@{B}Inputs:@{UB}      
- filename.s    : file name of the png file

@{B}Result:@{UB}      
- succ.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE png_Read "png_Read"

@{B}png_Read@{UB}

@{B}Syntax:@{UB}  succ.l = png_Read \{\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- succ.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE png_Unfilter "png_Unfilter"

@{B}png_Unfilter@{UB}

@{B}Syntax:@{UB}  result.l = png_Unfilter \{sourceaddr.l,destaddr.l,pixelwidth.l,scanlines.l,bpr.l,bpp.l,mode.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- destaddr.l    : ???
- bpr.l    : ???
- mode.l    : ???
- pixelwidth.l    : ???
- scanlines.l    : ???
- bpp.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE png_Write "png_Write"

@{B}png_Write@{UB}

@{B}Syntax:@{UB}  result.l = png_Write \{dos.l,dataptr.l,img_width.l,img_height.l,bpr.l,@compress.l,@usealpha.l\}

@{B}Description:@{UB}
Write a png file.

@{B}Inputs:@{UB}      
- dos.l    : ???
- dataptr.l    : ???
- img_width.l    : ???
- img_height.l    : ???
- bpr.l    : ???
- compress.l    : ???
- usealpha.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
