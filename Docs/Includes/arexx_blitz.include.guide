@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "arexx_blitz.include"

@{B}arexx_blitz.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" arexx_AddString " link arexx_AddString} 
   @{" arexx_AddValue " link arexx_AddValue} 
   @{" arexx_CreateMsg " link arexx_CreateMsg} 
   @{" arexx_Execute " link arexx_Execute} 
   @{" arexx_FindPort " link arexx_FindPort} 
   @{" arexx_Free " link arexx_Free} 
   @{" arexx_GetInSigFlag " link arexx_GetInSigFlag} 
   @{" arexx_GetLine " link arexx_GetLine} 
   @{" arexx_GetMsg " link arexx_GetMsg} 
   @{" arexx_GetNextFloat " link arexx_GetNextFloat} 
   @{" arexx_GetNextString " link arexx_GetNextString} 
   @{" arexx_GetNextValue " link arexx_GetNextValue} 
   @{" arexx_GetOutSigFlag " link arexx_GetOutSigFlag} 
   @{" arexx_GetSender " link arexx_GetSender} 
   @{" arexx_GetSigFlag " link arexx_GetSigFlag} 
   @{" arexx_HandleOutQueue " link arexx_HandleOutQueue} 
   @{" arexx_Init " link arexx_Init} 
   @{" arexx_ReplyMsg " link arexx_ReplyMsg} 
   @{" arexx_SendMsg " link arexx_SendMsg} 

@{B}Private Function Index:@{UB}

   @{" _arexx_AddArgQuot " link _arexx_AddArgQuot} 
   @{" _arexx_Quoted " link _arexx_Quoted} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} arexx.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 11.03.2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB} ARexx, Amiblitz2.4

@{B}Purpose:@{UB}
Provide an AREXX port for your program.

@{B}Abstract:@{UB}
This include enables your program easily to use AREXX.
This inlcude uses some blitzlibs!

@{B}User Constants:@{UB}
How many ARexx messages can be in queue at a time
#max_rexxmessages = 200

Timeout in ticks (1/50 sec) for a reply
#rexx_timeout      = 500

@{B}Example:@{UB}     
Send an AREXX message:
__________________________________________________________________ snip!
XINCLUDE "arexx.include.ab3"

If arexx_OpenPort \{"MyAREXXPort"\}
  @{" arexx_CreateMsg " link arexx_CreateMsg} \{"AMIGAAMP"\} ; send to AmigaAmp AREXX port
  @{" arexx_AddString " link arexx_AddString} \{"PLAY"\}
  succ.l = @{" arexx_SendMsg " link arexx_SendMsg} \{\}
End if
End
__________________________________________________________________ snip!

Open an AREXX port and wait for QUIT message:
__________________________________________________________________ snip!
XINCLUDE "arexx.include.ab3"

If arexx_OpenPort \{"MyAREXXPort"\}
  While breakme.l=False
    signals.l = Wait_(-1)
    If arexx_GetMsg\{\}
      NPrint "Got message from: ",@{" arexx_GetSender " link arexx_GetSender} \{\}
      message.s = @{" arexx_GetNextString " link arexx_GetNextString} \{\}
      Select UCase$(message.s)
        Case "QUIT"
          breakme=True
          Default
            NPrint "Message: ",message.s
      End Select
    End If
  Wend
End If
End
__________________________________________________________________ snip!



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _arexx_AddArgQuot "_arexx_AddArgQuot"

@{B}_arexx_AddArgQuot@{UB}

@{B}Syntax:@{UB} _arexx_AddArgQuot \{arg.s\}

@{B}Description:@{UB}
Add an string argument 'quoted' to the current message.

@{B}Inputs:@{UB}      
- arg.s    : argument string

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" arexx_CreateMsg " link arexx_CreateMsg}, @{" arexx_SendMsg " link arexx_SendMsg}




@ENDNODE
@NODE _arexx_Quoted "_arexx_Quoted"

@{B}_arexx_Quoted@{UB}

@{B}Syntax:@{UB}  result.s = _arexx_Quoted \{a.s\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- a.s    : ???

@{B}Result:@{UB}      
- result.s     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    arexx_addargquot




@ENDNODE
@NODE arexx_AddString "arexx_AddString"

@{B}arexx_AddString@{UB}

@{B}Syntax:@{UB} arexx_AddString \{arg.s\}

@{B}Description:@{UB}
Add a new string argument to the current message.

@{B}Inputs:@{UB}      
- arg.s    : argument string

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" arexx_CreateMsg " link arexx_CreateMsg}, @{" arexx_SendMsg " link arexx_SendMsg}




@ENDNODE
@NODE arexx_AddValue "arexx_AddValue"

@{B}arexx_AddValue@{UB}

@{B}Syntax:@{UB} arexx_AddValue \{value.l\}

@{B}Description:@{UB}
Add an integer value to the argument string. This is blitz specific, and not suitable to use with other apps. Better dont use this at all!

@{B}Inputs:@{UB}      
- value.l    : integer argument

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" arexx_CreateMsg " link arexx_CreateMsg}, @{" arexx_SendMsg " link arexx_SendMsg}




@ENDNODE
@NODE arexx_CreateMsg "arexx_CreateMsg"

@{B}arexx_CreateMsg@{UB}

@{B}Syntax:@{UB} arexx_CreateMsg \{port.s,@message.s\}

@{B}Description:@{UB}
Create a new message to send to a specific AREXX port.
You can immediately add a message string, or add strings or integers using @{" arexx_AddString " link arexx_AddString} and @{" arexx_AddValue " link arexx_AddValue}.
After you built your message, send it using @{" arexx_SendMsg " link arexx_SendMsg}.

@{B}Inputs:@{UB}      
- port.s    : AREXX port to snd the message to
- message.s    : message string

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" arexx_SendMsg " link arexx_SendMsg}




@ENDNODE
@NODE arexx_Execute "arexx_Execute"

@{B}arexx_Execute@{UB}

@{B}Syntax:@{UB}  result.w = arexx_Execute \{port.s,arexxline.s,@blocking.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- port.s    : ???
- arexxline.s    : ???
- blocking.l    : ???

@{B}Result:@{UB}      
- result.w     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE arexx_FindPort "arexx_FindPort"

@{B}arexx_FindPort@{UB}

@{B}Syntax:@{UB}  port.l = arexx_FindPort \{port.s\}

@{B}Description:@{UB}
Find an AREXX port by name (usually of another application) and return its address pointer.
The function returns 0, if the port can not be found. This way you can check for the existence of an AREXX port.

@{B}Inputs:@{UB}      
- port.s    : name of the AREXX port to find

@{B}Result:@{UB}      
- port.l     : AREXX port address

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE arexx_Free "arexx_Free"

@{B}arexx_Free@{UB}

@{B}Syntax:@{UB} arexx_Free \{\}

@{B}Description:@{UB}
Close the AREXX port created using arexx_open. Pending messages will be lost.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    arexx_OpenPort




@ENDNODE
@NODE arexx_GetInSigFlag "arexx_GetInSigFlag"

@{B}arexx_GetInSigFlag@{UB}

@{B}Syntax:@{UB}  result.l = arexx_GetInSigFlag \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE arexx_GetLine "arexx_GetLine"

@{B}arexx_GetLine@{UB}

@{B}Syntax:@{UB}  result.s = arexx_GetLine \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.s     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE arexx_GetMsg "arexx_GetMsg"

@{B}arexx_GetMsg@{UB}

@{B}Syntax:@{UB}  succ.l = arexx_GetMsg \{@blocking.l\}

@{B}Description:@{UB}
Check for new AREXX messages. If it returns success, the message and its arguments can be received by calling arexx_nextarg, till this function returns an empty string.

@{B}Inputs:@{UB}      
- blocking.l    : ???

@{B}Result:@{UB}      
- succ.w     : -1 if there is a new message, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE arexx_GetNextFloat "arexx_GetNextFloat"

@{B}arexx_GetNextFloat@{UB}

@{B}Syntax:@{UB}  result.f = arexx_GetNextFloat \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.f     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE arexx_GetNextString "arexx_GetNextString"

@{B}arexx_GetNextString@{UB}

@{B}Syntax:@{UB}  result.s = arexx_GetNextString \{\}

@{B}Description:@{UB}
Return the next argument of the message, or the empty string if there are no more arguments.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.s     : argument string

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE arexx_GetNextValue "arexx_GetNextValue"

@{B}arexx_GetNextValue@{UB}

@{B}Syntax:@{UB}  result.l = arexx_GetNextValue \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE arexx_GetOutSigFlag "arexx_GetOutSigFlag"

@{B}arexx_GetOutSigFlag@{UB}

@{B}Syntax:@{UB}  result.l = arexx_GetOutSigFlag \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE arexx_GetSender "arexx_GetSender"

@{B}arexx_GetSender@{UB}

@{B}Syntax:@{UB}  result.s = arexx_GetSender \{\}

@{B}Description:@{UB}
Return the name of the AREXX port of the sender of the last received message.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.s     : name of the AREXX port

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    arexx_check




@ENDNODE
@NODE arexx_GetSigFlag "arexx_GetSigFlag"

@{B}arexx_GetSigFlag@{UB}

@{B}Syntax:@{UB}  result.l = arexx_GetSigFlag \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE arexx_HandleOutQueue "arexx_HandleOutQueue"

@{B}arexx_HandleOutQueue@{UB}

@{B}Syntax:@{UB}  result.l = arexx_HandleOutQueue \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE arexx_Init "arexx_Init"

@{B}arexx_Init@{UB}

@{B}Syntax:@{UB}  succ.l = arexx_Init \{inportname.s,@outportname.s\}

@{B}Description:@{UB}
Open an AREXX port for your program. This is needed in order to be able to receive AREXX commands from other programs.

@{B}Inputs:@{UB}      
- port_name.s    : name of your AREXX port
- inportname.s    : ???
- outportname.s    : ???

@{B}Result:@{UB}      
- succ.w     : -1 if the port was opened, 0 if it failed

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE arexx_ReplyMsg "arexx_ReplyMsg"

@{B}arexx_ReplyMsg@{UB}

@{B}Syntax:@{UB}  result.l = arexx_ReplyMsg \{ result.l,@string.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- result.l    : ???
- string.s    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE arexx_SendMsg "arexx_SendMsg"

@{B}arexx_SendMsg@{UB}

@{B}Syntax:@{UB}  succ.l = arexx_SendMsg \{@blocking.l\}

@{B}Description:@{UB}
Send the AREXX message that was prepared by arexx_newmessage and optional calls of arexx_addarg.

@{B}Inputs:@{UB}      
- blocking.l    : ???

@{B}Result:@{UB}      
- succ.w     : -1 if the message was send, 0 if it failed

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" arexx_CreateMsg " link arexx_CreateMsg}, @{" arexx_AddString " link arexx_AddString}, @{" arexx_AddValue " link arexx_AddValue}




@ENDNODE
