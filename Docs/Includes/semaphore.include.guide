@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "semaphore.include"

@{B}semaphore.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" sema_AttemptExclusive " link sema_AttemptExclusive} 
   @{" sema_AttemptShared " link sema_AttemptShared} 
   @{" sema_Create " link sema_Create} 
   @{" sema_Find " link sema_Find} 
   @{" sema_Get " link sema_Get} 
   @{" sema_ObtainExclusive " link sema_ObtainExclusive} 
   @{" sema_ObtainShared " link sema_ObtainShared} 
   @{" sema_Release " link sema_Release} 
   @{" sema_Remove " link sema_Remove} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} semaphore.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 29/12/2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB}  Amiblitz2.4

@{B}Purpose:@{UB}
Provide easy semaphore handling.

@{B}Abstract:@{UB}
A semaphore is a simple contruct to coordinate the access to a resource while several tasks are using it.

Imagine a toilet in an air plane as our "resource". Many people want to access it, but only one of them can be in at the same time.
The green/red light, that indicates if the toilet is occupied, is our semaphore.
If the light is green, the toilet is free and anybody can enter it any time. As soon (actually before) he uses the toilet, he turns the light to red (locks the semaphore). If in the meanwhile someone else wants to use the toilet, he is put into waiting state until the toilet is free and the light is turned to green (semaphore unlocked).

Usually you protect a memory block using a semaphore, if you want to make sure while you manipulating it, no one else is manipulating it. This can easily result into an inconsistent state.

NOTE: This include can handle one one semaphore at a time. If you need several semaphores in parallel, please notify the author. This can be easily extended.

@{B}User Constants:@{UB}   none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE sema_AttemptExclusive "sema_AttemptExclusive"

@{B}sema_AttemptExclusive@{UB}

@{B}Syntax:@{UB}  result.l = sema_AttemptExclusive \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE sema_AttemptShared "sema_AttemptShared"

@{B}sema_AttemptShared@{UB}

@{B}Syntax:@{UB}  result.l = sema_AttemptShared \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE sema_Create "sema_Create"

@{B}sema_Create@{UB}

@{B}Syntax:@{UB}  succ.w = sema_Create \{name.s,@removeOnExit.l\}

@{B}Description:@{UB}
Create a semaphore identified system wide by name.s.
If the semaphore already exists, this function will fail. You can share an already existing semphpre with @{" sema_Find " link sema_Find}.

@{B}Inputs:@{UB}      
- name.s    : name of the semaphore
- removeOnExit.l    : ???

@{B}Result:@{UB}      
- succ.w     : -1 if the semaphore is ready to use, 0 if something went wrong or the semaphore already exists

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE sema_Find "sema_Find"

@{B}sema_Find@{UB}

@{B}Syntax:@{UB}  succ.w = sema_Find \{name.s\}

@{B}Description:@{UB}
Try to find if someone else created the semaphore. If the semaphore does not already exist, the function will fail.
If the function succeeds, the semaphore is ready to use.

@{B}Inputs:@{UB}      
- name.s    : name of the semaphore

@{B}Result:@{UB}      
- succ.w     : -1 if the semaphore was found, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE sema_Get "sema_Get"

@{B}sema_Get@{UB}

@{B}Syntax:@{UB}  result.l = sema_Get \{name.s,@removeOnExit.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- name.s    : ???
- removeOnExit.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE sema_ObtainExclusive "sema_ObtainExclusive"

@{B}sema_ObtainExclusive@{UB}

@{B}Syntax:@{UB} sema_ObtainExclusive \{\}

@{B}Description:@{UB}
Become the exclusive owner of the semaphore.
If the semaphore is currently occupied, your task will put to wait till the semaphore becomes free again.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE sema_ObtainShared "sema_ObtainShared"

@{B}sema_ObtainShared@{UB}

@{B}Syntax:@{UB} sema_ObtainShared \{\}

@{B}Description:@{UB}
Obtain the semaphore non-exclusive. That means no one else can get exclusive access to it, but other non-exclusive locks are allowed.
If the semaphore is currently exclusive obtained, your task is put to wait until the semaphore becomes free again.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE sema_Release "sema_Release"

@{B}sema_Release@{UB}

@{B}Syntax:@{UB} sema_Release \{\}

@{B}Description:@{UB}
Release the semaphore. The semaphore has to be successfully obtained before.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE sema_Remove "sema_Remove"

@{B}sema_Remove@{UB}

@{B}Syntax:@{UB} sema_Remove \{\}

@{B}Description:@{UB}
Remove the semaphore. If you were the last owner, it will be removed from the system.
The semaphore can not be used anymore.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
