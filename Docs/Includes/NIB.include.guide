@Database  "NIBV1.11"
@$VER:     "NewIconsBlitz - V1.11 (27.01.2007)- Updated by mrodfr. (17/08/1999)"
@Author    "Loki/SatanicDreams (Robert Hutchinson)"
@(C)       "©Robert Hutchinson (Loki/SatanicDreams) - (17/08/1999)"

@Node MAIN "Welcome to the NIB Docs..."

 @{fg shine}@{u}@{b}NEW ICONS BLITZ - V1.10 - (C) ROBERT HUTCHINSON 17/08/1999@{ub}@{uu}@{fg text}
 [Loki/SatanicDreamsSoftware 1999]
 NIB, the complete replacement for the RI icon.library commands. Very easy
 to use system which allows DIRECT newicon.library support within your
 applications. With commands for standard and newicon images.

 @{b}1.00  @{u}Introduction@{uu}@{ub}
  1.01  @{" Description             " link 101}.........................WTF is this then?
  1.02  @{" Disclaimer              " link 102}...................In the event of.. Blah.
  1.03  @{" Requirements            " link 103}...........................What y`al need!
  1.04  @{" IMPORTANT NOTES         " link 104}..................MAKE SURE YOU READ THIS!
  1.05  @{" Library Number          " link 105}..........................Blitz lib number
  1.06  @{" Licence                 " link 106}.........................How can I use NIB
  1.07  @{" Author                  " link 107}.............................That be meee!

 @{b}2.0  @{u}Installation@{uu}@{ub}
  2.01  @{" Where to copy stuff     " link 201}.....................Check this first dewd
  2.02  @{" Your DefLibs            " link 202}......................What are those then?
  2.03  @{" Conflicting LibNums?    " link 203}...........OOOOOooooOOoOo We have a clash!
  2.04  @{" Bad Tokens              " link 204}..........`Naughty! Naughty!, BAD Tokens!'

 @{b}3.0  @{u}The NIB Include@{uu}@{ub}
  3.01  @{" Notes about the Include " link 301}..............Some notes about the include

 @{b}4.0  @{u}The Examples@{uu}@{ub}
  4.01  @{" NIB_ExampleNIB.BB2      " link 401}.........................The First Example
  4.02  @{" NIB_ExampleSTD.BB2      " link 402}..........................The Next Example
  4.03  @{" NIB_ExampleTCHK.BB2     " link 403}...........................Another Example
  4.04  @{" NIB_ExampleGTS.BB2      " link 404}...........................Another Example
  4.05  @{" NIB_ExampleGTS_STD.BB2  " link 405}...........................Another Example

 @{b}5.0  @{u}NIBSingle Commands@{uu}@{ub}
  5.01  @{" NIBOpenIcon{}              " link 501}    5.02  @{" NIBCheckStruct{}           " link 502}
  5.03  @{" STDCheckStruct{}           " link 503}    5.04  @{" STDFindWidth{}             " link 504}
  5.05  @{" STDFindHeight{}            " link 505}    5.06  @{" STDToImages{}              " link 506}
  5.07  @{" STDDrawImage{}             " link 507}    5.08  @{" NIBRemapChunkyData{}       " link 508}
  5.09  @{" NIBDrawImage{}             " link 509}    5.10  @{" NIBFreeImages{}            " link 510}
  5.11  @{" NIBFreeIcon{}              " link 511}    5.12  @{" NIBFindWidth{}             " link 512}
  5.13  @{" NIBFindHeight{}            " link 513}    5.14  @{" NIBSaveIcon{}              " link 514}

  5.15  @{" NIBCheckLibs{}             " link 515}

 @{b}6.0  @{u}Misc@{uu}@{ub}
  6.01  @{" Updates to NIB          " link 601}................Where can I get them from?
  6.02  @{" History                 " link 602}........................What has happened?
  6.03  @{" Future                  " link 603}......................What can you expect?
  6.04  @{" Greets to..             " link 604}...................Who could that be then?
  6.05  @{" Thanks to..             " link 605}..........................Who helped etc..

 NIB (C) Rob Hutchinson 1999 - http://www.satanicdreams.freeserve.co.uk/
 NewIcons (C) Team NewIcons  - http://www.amiganet.org/NewIcons/

@EndNode

@Node 101 "Description"

 @{fg shine}@{u}Description of NIB@{uu}@{fg text}
 
 NewIconsBlitz`s purpose is to allow Blitz programmers the ability
 to directly access the newicon.library to display NewIcon and
 Standard Amiga icons in an easy and friendly way.

 The beauty behind accessing the newicon.library directly is that
 your application`s user doesn`t have to be running the `NewIcons'
 program to see the NewIcons. And NIB handles icons in an object
 orientated way. To save hastle and confusion.

 NIB (newicon.library) can be used for all manner of things, from
 simply displaying icons in a window, to using it as a simple but
 extremely effective way of loading auto screen-remapped
 Graphical User Interface elements. Because of the speed of chunk
 image data remapping, the newicon.library is perfect for such 
 things.

@EndNode

@Node 102 "Disclaimer"

 @{fg shine}@{u}Disclaimer@{uu}@{fg text}

 This software is provided as-is, without warranty of any kind, 
 either expressed or implied. In no event will the author(s) be 
 liable for direct, indirect, incidental or consequential damages
 or data loss resulting from the use or application of this software. 
 The entire risk as to the results and performance of this software 
 is assumed by the user!

@EndNode

@Node 103 "Requirements"

 @{fg shine}@{u}Requirements@{uu}@{fg text}

 NIB Requires:

   BlitzBasic2.1+    (Well duh :))
   newicon.library1  (Within BlitzLibs:AmigaLibs/  And remade DefLibs.)

 Your Executables will require to run:

   icon.library    (Standard Commodore)
   newicon.library (For newicons [Version 4+ perferably])

 Not too much to ask? I`m not 100% sure from the NI documents if the
 newicon.library is distributable with your applications or not.
 But I still advise you to take it up with the author: 

   Eric Sauvageau: merlin\@linux.tc3net.com

@EndNode

@Node 104 "NOTES!"

 @{fg shine}@{u}IMPORTANT NOTES@{uu}@{fg text}

 o Images or icons should NOT be freed until you have finished with them!
   IE, if you have loaded a newicon, remapped it and drawn it to a window,
   DO NOT free the images UNTIL that window has either been closed or
   the image overwritten (you have finished with the image.)
   The reason for this is because the newicon.library allocates pens
   from your selected screen, and if you free the images when they are
   still `on-screen', the images could change colour. YUK!

 o LOGICAL ORDER OF NEWICON DISPLAY:

     1, Load icon
     2, Check structure for held images
     3, Remap chunky data to the screen
     4, Draw image(s) to window
     5, Free images
     6, Free icon

 o NIB uses Blitz Window objects, but wouldn`t take 5 minutes to
   convert to NCS window or the like.. And you might see this in
   next version of NIB. (Actually no you wont, I lied ;))

 o AmigaLibs.RES, AmigaLibsII.RES or AmigaLibsIII.RES (NCS) should
   be resident in the compiler menu for you program to function.
   Or of course MUI2.RES. Either way it makes no difference.

@EndNode

@Node 105 "Library Number"

 @{fg shine}@{u}LIBRARY NUMBER@{uu}@{fg text}

 Blitz uses library numbering for different librarys, and the
 newicon.library1 has lib number 208 assigned to it. This has
 been allocated with the official blitz library number list.
 Although the chances are this lib number wont clash with any
 others (2 libraries using the same number). You are advised
 to use DefLibMan (on aminet) to check libraries for duplicate
 library numbers.

 If you are having any problems with the library number, see
 the @{" Conflicting LibNums? " link 203} section.

@EndNode

@Node 106 "Licence"

 @{fg shine}@{u}LICENCE@{uu}@{fg text}

 Of course there is no licence for using NIB in your programs,
 though I would like to have an email from you if you use NIB,

   Me: loki\@sds.in2home.co.uk

 I have no idea what the distribution regulations are on the
 newicon.library itself, and whether you are allowed to
 distribute the newicon.library with your own applications:

   Eric Sauvageau: merlin\@linux.tc3net.com

 The docs arnt to clear on the distribute of the library.
 Well I couldn`t find anything :)

@EndNode

@Node 107 "Author"

 @{fg shine}@{u}AUTHOR@{uu}@{fg text}

 NIB is copyright Robert Hutchinson of SDSoftware 1999,

   loki\@sds.in2home.co.uk

 Please send any bug reports, changes to the above address,
 also if you are having ANY problems with NIB I would be
 only too happy to help ;)

 Any other questions regarding the newicon.library should be
 directed to the NewIcons Team,

    Eric Sauvageau: merlin\@linux.tc3net.com
    Phil Vedovatti: vedovatt\@u.washington.edu
      Ariel Magnum: arielmag\@actcom.co.il
   Nicola Salmoria: MC6489\@mclink.it

@EndNode

@Node 201 "Where to copy stuff"

  @{fg shine}@{u}INSTALLATION@{uu}@{fg text}

  Step 1, Copy the `NewIconsBlitz/NIBBlitzLibs/AmigaLibs/newicon.library1'
          file to `BlitzLibs:AmigaLibs/'

  Step 2, Open DefLibMan (AmiNet(Dev/Basic)), and check to see if the
          newicon.library1`s library number (208) is highlighted in white.
          If this is the case, see the @{" Conflicting LibNums? " link 203} section.
          Else Select `All' and `Make DefLibs'.

  Step 3, Open Blitz and then open the file:
          NewIconsBlitz:NIBIncludes/NIB_Include.BB2
          If this file has ?????`s (bad tokens) in it, or wont compile
          straight through until termination, see the @{" Bad Tokens " link 204}
          section. (BTW - Make sure AmigaLibs.RES is resident in the compiler
          menu!)

  And should be ready for use :)

@EndNode

@Node 202 "Your DefLibs"

  @{fg shine}@{u}YOUR DEFLIBS@{uu}@{fg text}

  Your deflibs are kept in your Blitz2: directory. This file contains
  all your library token offsets, and library settings.

  Your deflibs can be remade with the DefLibMan program on aminet
  (Dev/Basic), everytime you install/uninstall a new library you
  should remake your deflibs.

  You should also check for duplicate library numbers in DefLibMan
  before selecting `All' and `Make DefLibs'.

@EndNode

@Node 203 "Conflicting LibNums?"

  @{fg shine}@{u}CONFLICTING LIBNUMS@{uu}@{fg text}

  If you have confilicting library numbers, there are 2 ways to solve
  this problem:

  1, Get a copy of the NewIconV4 package of either aminet,
     http://www.amiganet.org/NewIcons/ or AFCD/CUCD. Then
     convert the FD file in Developers/Include/FD .
     (Preferably with NewFDConvert from aminet Dev/Basic)
     Giving it a free lib number.

  2, Fire up a copy of DiskModTools, AZap or similar HexEditor.
     Load in the newicon.library1 file and search for the hex
     value of 208 ($D0) changing it to another (free) lib
     number (in hex of course, hex values can be converted
     easily with the calculator in blitz!).

     NOTE: This method isn`t always 100% effective, and can cause
           bad tokens (incorrect offsets) so if you STILL have
           problems after changing this lib num and re-creating
           your deflibs, delete the newicon.library1 file and
           use option number 1 :)

@EndNode

@Node 204 "Bad Tokens"

  @{fg shine}@{u}BAD TOKENS@{uu}@{fg text}

  If you are getting bad/incorrect tokens within Blitz`s editor.
  And the lib number is DEFINATLY *NOT* conflicting, then have
  a look at the ASCII versions of the includes and examples in
  the ASCII/ directories. Then load them into blitz and save
  them out as BB2 files.

@EndNode

@Node 301 "Include."

  @{fg shine}@{u}NOTES ABOUT THE INCLUDE@{uu}@{fg text}

  Your program should have the followind include at the top:

    INCLUDE "<Path>/NewIconsBlitz/NIBMulti/NIB_Include.BB2"
    ; Where <Path> is the directory the NIB package is located.
    ; Could be Blitz2: ?

  Then your program will have access to the NIB commands.

@EndNode

@Node 401 "NIB_ExampleNIB.BB2"

  @{fg shine}@{u}NIB_EXAMPLENIB.BB2@{uu}@{fg text}

  This example is held within NewIconsBlitz/NIBExamples/
  and shows you exactly how to load specific NI data and display
  it in a window with the NIB commands. If no NI data is found
  in the icon, the program terminates.

  NOTE: You may have to change the location of the icon to load
        and the include file path!

@EndNode

@Node 402 "NIB_ExampleSTD.BB2"

  @{fg shine}@{u}NIB_EXAMPLESTD.BB2@{uu}@{fg text}

  This example is held within NewIconsBlitz/NIBExamples/
  and shows you exactly how to load specific STD data and display
  it in a window with the NIB commands. If no STD data is found
  in the icon, the program terminates.

   BTW: STD is just standard, IE 4Col/MWB icons.

  NOTE: You may have to change the location of the icon to load
        and the include file path!

@EndNode

@Node 403 "NIB_ExampleTCHK.BB2"

  @{fg shine}@{u}NIB_EXAMPLETCHK.BB2@{uu}@{fg text}

  This example is held within NewIconsBlitz/NIBExamples/
  and shows you exactly how to check for different types of icon
  data held within a .info file. Then displays the NI data if found,
  and the STD data otherwise in a window with the NIB commands.
  You can override the NI display of the icon in this example by
  setting #NIB_OVERRIDE to 1.

  NOTE: You may have to change the location of the icon to load
        and the include file path!

@EndNode

@Node 404 "NIB_ExampleGTS.BB2"

  @{fg shine}@{u}NIB_EXAMPLEGTS.BB2@{uu}@{fg text}

  This example is held within NewIconsBlitz/NIBExamples/
  and shows you how to use NIB/NewIcons in conjunction with
  Blitz and GTShape gadgets. Is uses a hacked up version of
  David McMinn`s GTShape fix code, and should work on full
  256 colour screens. This version in the NewIcon version.

  NOTE: You may have to change the location of the icon to load
        and the include file path!

@EndNode

@Node 405 "NIB_ExampleGTS_STD.BB2"

  @{fg shine}@{u}NIB_EXAMPLEGTS_STD.BB2@{uu}@{fg text}

  This example is held within NewIconsBlitz/NIBExamples/
  and shows you how to use NIB/NewIcons in conjunction with
  Blitz and GTShape gadgets. Is uses a hacked up version of
  David McMinn`s GTShape fix code, and should work on full
  256 colour screens. This version in the StandardIcon version.

  NOTE: You may have to change the location of the icon to load
        and the include file path!

@EndNode

@Node 601 "Updates to NIB"

  @{fg shine}@{u}UPDATES@{uu}@{fg text}

  You can find the latest version of NIB on AmiNet (dev/basic)
  or our site: http://www.satanicdreams.freeserve.co.uk/

@EndNode

@Node 602 "History"

  @{fg shine}@{u}HISTORY@{uu}@{fg text}

  1.00 - First release.
  1.10 - This version: - Added NIB_EXAMPLEGTS.BB2
                       - Added NIB_EXAMPLEGTS_STD.BB2
                       - Fixed dox with my New Addy.
                       - Minor tweaks.

@EndNode

@Node 603 "Future"

  @{fg shine}@{u}FUTURE@{uu}@{fg text}

  The future of NIB is unknown, as to whether or not I will update it
  depends on if I update it personally. If I update the routines
  for any reason (bugs, improvements),
  then I shall re-release the updated version.

  Things I`d like to implement:

    o Easy Standard/NewIcon data stipping.
      So you can remove the STD or NI data from the structure and
      save the icon out. Effectivly removing the specific icon type
      from the outputted object.

    o IconToBitmap (Blitz bitmap), This I WILL implement ;)..
      Soon enough... Actually maybe it might be a while, anyone,
      who can be bothered to do it please do, it`s fairly simple
      use of BltBitmap_ .

    o IconToShape, images to a Blitz shape object

    o IconToBrush, saving of an Icon image to a brush. Simple?

    o Transparent drawing. If anyone knows how to do this please
      email me.

@EndNode

@Node 501 "NIBOpenIcon{}"

  @{fg shine}NAME:@{fg text}
     NIBOpenIcon{}

  @{fg shine}SYNOPSIS:@{fg text}
     succ.b=NIBOpenIcon{Icon#,IconPath$}
     This command is a function!

  @{fg shine}FUNCTION:@{fg text}
     NIBOpenIcon{} loads an icons data into memory, from disk.
     The icon can be loaded from disk with or without the
     the `.info' suffix. If you do add the .info suffix it will
     get stripped by the command. It is probably faster to leave
     the `.info' suffix off if you can.

  @{fg shine}INPUTS:@{fg text}
     Icon#     = A number from 0 to #NIB_MAXIMUM. To load the icon
                 data into. Note #NIB_MAXIMUM can be changed at the
                 top of the include. If you use more than the
                 set maximum, the chances are you will get
                 `Array subscript out of range' errors from the
                 debugger.
     IconPath$ = A .info file on disk to load.

  @{fg shine}RETURNS:@{fg text}
     True for success or False for fail. If the command fails
     it almost certainly means the icon doesn`t exist or there
     wasn`t enough memory to load it.

@EndNode

@Node 502 "NIBCheckStruct{}"

  @{fg shine}NAME:@{fg text}
     NIBCheckStruct{}

  @{fg shine}SYNOPSIS:@{fg text}
     imgs.b=NIBCheckStruct{Icon#}
     This command is a function!

  @{fg shine}FUNCTION:@{fg text}
     NIBCheckStruct should always follow the @{"NIBOpenIcon{}" link 501} command!
     It is used to check the structure of the icon Icon#.
     This to find out if there is NewIcon image data in the icon.
     If the function returns 0. You should then proceed to use
     @{"STDCheckStruct" link 503} to see how many standard images are
     held within the structure.

  @{fg shine}INPUTS:@{fg text}
     Icon#     = A number from 0 to #NIB_MAXIMUM.

  @{fg shine}RETURNS:@{fg text}
     0 = No NI data.
     1 = Normal image only.
     2 = Selected image and normal image.

@EndNode

@Node 503 "STDCheckStruct{}"

  @{fg shine}NAME:@{fg text}
     STDCheckStruct{}

  @{fg shine}SYNOPSIS:@{fg text}
     simgs.b=STDCheckStruct{Icon#}
     This command is a function!

  @{fg shine}FUNCTION:@{fg text}
     STDCheckStruct{} works in the same way as @{"NIBCheckStruct{}" link 502} except
     it checks the structure of the STD data in the icon Icon#

  @{fg shine}INPUTS:@{fg text}
     Icon#     = A number from 0 to #NIB_MAXIMUM.

  @{fg shine}RETURNS:@{fg text}
     0 = No STD data.
     1 = Normal image only.
     2 = Selected image and normal image.

@EndNode

@Node 504 "STDFindWidth{}"

  @{fg shine}NAME:@{fg text}
     STDFindWidth{}

  @{fg shine}SYNOPSIS:@{fg text}
     iconwid.w=STDFindWidth{Icon#}
     This command is a function!

  @{fg shine}FUNCTION:@{fg text}
     STDFindWidth{} will return to you in a WORD type variable the
     width of the icon Icon#`s STD data. Loaded with @{"NIBOpenIcon{}" link 501}.

  @{fg shine}INPUTS:@{fg text}
     Icon#     = A number from 0 to #NIB_MAXIMUM.

  @{fg shine}RETURNS:@{fg text}
     A WORD containing the width of the loaded STD data.

  @{fg shine}SEE ALSO:@{fg text}
     @{"STDFindHeight{}" link 505}

@EndNode

@Node 505 "STDFindHeight{}"

  @{fg shine}NAME:@{fg text}
     STDFindHeight{}

  @{fg shine}SYNOPSIS:@{fg text}
     iconhei.w=STDFindHeight{Icon#}
     This command is a function!

  @{fg shine}FUNCTION:@{fg text}
     STDFindHeight{} will return to you in a WORD type variable the
     height of the icon Icon#`s STD data. Loaded with @{"NIBOpenIcon{}" link 501}

  @{fg shine}INPUTS:@{fg text}
     Icon#     = A number from 0 to #NIB_MAXIMUM.

  @{fg shine}RETURNS:@{fg text}
     A WORD containing the height of the loaded STD data.

  @{fg shine}SEE ALSO:@{fg text}
     @{"STDFindWidth{}" link 504}

@EndNode

@Node 506 "STDToImages{}"

  @{fg shine}NAME:@{fg text}
     STDToImages{}

  @{fg shine}SYNOPSIS:@{fg text}
     STDToImages{Icon#}
     This command is a statement!

  @{fg shine}FUNCTION:@{fg text}
     STDToImages{} is used to initialize the Standard image data.
     This should always be called before @{"STDDrawImage{}" link 507}, and
     only needs to be called once per loaded icon!

     NB: Remember no remapping of STD icons is done!

  @{fg shine}INPUTS:@{fg text}
     Icon#     = A number from 0 to #NIB_MAXIMUM.

  @{fg shine}SEE ALSO:@{fg text}
     @{"STDDrawImage{}" link 507}

@EndNode

@Node 507 "STDDrawImage{}"

  @{fg shine}NAME:@{fg text}
     STDDrawImage{}

  @{fg shine}SYNOPSIS:@{fg text}
     succ.b=STDDrawImage{Icon#,Type,Window,X,Y}
     This command is a function!

  @{fg shine}FUNCTION:@{fg text}
     This command will draw the initialized STD data to a specified
     window. Both the Normal and Selected images have to be drawn
     individually. (IE, call the command twice.)

  @{fg shine}INPUTS:@{fg text}
     Icon#  = A number from 0 to #NIB_MAXIMUM.
     Type   = The type of image to draw:
                 #NIB_NORMAL   - Draws the normal image data.
                 #NIB_SELECTED - Draws the selected image data.
     Window = The window number to draw the image to.
     X      = The X position in the window to draw the data at.
     Y      = The Y position in the window to draw the data at.

  @{fg shine}RETURNS:@{fg text}
     True or False. This command will only return false if 
     STDToImages{} hasn`t been run before-hand, you have no
     icon loaded or there was a constant other than the above
     passed to the function.

  @{fg shine}NOTES:@{fg text}
     Dont rely on the failsafe!

@EndNode

@Node 508 "NIBRemapChunkyData{}"

  @{fg shine}NAME:@{fg text}
     NIBRemapChunkyData{}

  @{fg shine}SYNOPSIS:@{fg text}
     NIBRemapChunkyData{Icon#,Type,Screen}
     This command is a statement!

  @{fg shine}FUNCTION:@{fg text}
     This command will remap the loaded chunky image data ready for
     you to draw to a window with @{"NIBDrawImage{}" link 509}.

  @{fg shine}INPUTS:@{fg text}
     Icon#  = A number from 0 to #NIB_MAXIMUM.
     Type   = The type to remap:
                 #NIB_NORMAL   - Remap only the normal image data.
                 #NIB_SELECTED - Remap only the selected image data.
                 #NIB_BOTH     - Remap both types (as above).
     Screen = The number of the screen you with to remap the data
              to. (Found with commands such as Screen, FindScreen
                   and WBToScreen).

  @{fg shine}SEE ALSO:@{fg text}
     @{"NIBDrawImage{}" link 509}

@EndNode

@Node 509 "NIBDrawImage{}"

  @{fg shine}NAME:@{fg text}
     NIBDrawImage{}

  @{fg shine}SYNOPSIS:@{fg text}
     succ.b=NIBDrawImage{Icon#,Type,Window,X,Y}
     Command is a function!

  @{fg shine}FUNCTION:@{fg text}
     This command will draw the initialized NI data to a specified
     window. Both the Normal and Selected images have to be drawn
     individually. (IE, call the command twice.)

  @{fg shine}INPUTS:@{fg text}
     Icon#  = A number from 0 to #NIB_MAXIMUM.
     Type   = The type of image to draw:
                 #NIB_NORMAL   - Draws the normal image data.
                 #NIB_SELECTED - Draws the selected image data.
     Window = The window number to draw the image to.
     X      = The X position in the window to draw the data at.
     Y      = The Y position in the window to draw the data at.

  @{fg shine}RETURNS:@{fg text}
     True or False. This command will only return false if 
     NIBRemapChunkyData{} hasn`t been run before-hand, you have no 
     icon loaded or there was a constant other than the above
     passed to the function.

  @{fg shine}NOTES:@{fg text}
     Dont rely on the failsafe!

@EndNode

@Node 510 "NIBFreeImages{}"

  @{fg shine}NAME:@{fg text}
     NIBFreeImages{}

  @{fg shine}SYNOPSIS:@{fg text}
     NIBFreeImages{Icon#,Type,Screen}
     This command is a statement!

  @{fg shine}FUNCTION:@{fg text}
     This command frees the remapped chunky images from memory,
     and should only be used after you have finished with your icon,
     as it frees the pens on the screen. Screen should also be
     the same as specified in @{"NIBRemapChunkyData{}" link 508}.
     If you free the imagedata and you still have the image on the
     window, the image may change colour!

     If your screen has since been closed, use:
     FreeRemappedImage_ *NIBImage(<Icon#>*2),0 ;for normal image freeing
      and
     FreeRemappedImage_ *NIBImage((<Icon#>*2)+1),0 ;for selected image freeing

  @{fg shine}INPUTS:@{fg text}
     Icon#  = A number from 0 to #NIB_MAXIMUM.
     Type   = The type of image to free:
                 #NIB_NORMAL   - Frees only the normal image.
                 #NIB_SELECTED - Frees only the selected image.
                 #NIB_BOTH     - Frees both images.
     Screen = The screen you remaped the images to.

@EndNode

@Node 511 "NIBFreeIcon{}"

  @{fg shine}NAME:@{fg text}
     NIBFreeIcon{}

  @{fg shine}SYNOPSIS:@{fg text}
     succ.b=NIBFreeIcon{Icon#}
     This command is a statement!

  @{fg shine}FUNCTION:@{fg text}
     This will free a loaded icon, and should be called after
     you have finished with your icon. Regardless of whether you
     have use STD or NI images.

     The images should be freed with the relevent commands 
     before calling this command.

  @{fg shine}INPUTS:@{fg text}
     Icon#  = A number from 0 to #NIB_MAXIMUM.

@EndNode

@Node 512 "NIBFindWidth{}"

  @{fg shine}NAME:@{fg text}
     NIBFindWidth{}

  @{fg shine}SYNOPSIS:@{fg text}
     nibwid.w=NIBFindWidth{Icon#}
     This command is a function!

  @{fg shine}FUNCTION:@{fg text}
     This command returns to you the width of the NI image in
     the icon Icon#`s data. It can be called before or after the
     remap commands.

  @{fg shine}RETURNS:@{fg text}
     A WORD value containing the width of the NI image.

  @{fg shine}INPUTS:@{fg text}
     Icon#  = A number from 0 to #NIB_MAXIMUM.

@EndNode

@Node 513 "NIBFindHeight{}"

  @{fg shine}NAME:@{fg text}
     NIBFindHeight{}

  @{fg shine}SYNOPSIS:@{fg text}
     nibwid.w=NIBFindHeight{}
     This command is a function!

  @{fg shine}FUNCTION:@{fg text}
     This command returns to you the height of the NI image in
     the icon Icon# data. It can be called before or after the
     remap commands.

  @{fg shine}RETURNS:@{fg text}
     A WORD value containing the height of the NI image.

  @{fg shine}INPUTS:@{fg text}
     Icon#  = A number from 0 to #NIB_MAXIMUM.

@EndNode


@Node 514 "NIBSaveIcon{}"

  @{fg shine}NAME:@{fg text}
     NIBSaveIcon{}

  @{fg shine}SYNOPSIS:@{fg text}
     succ.b=NIBSaveIcon{Icon#,FilePath$}
     This command is a Function!

  @{fg shine}FUNCTION:@{fg text}
     This command will save back to disk an icon file. Encoding the
     chunky image data into the tooltypes of the icon if it
     is availible. This rountine will save back any availible data.
     Simply if the data has been freed and the pointers reset
     the command will save only the STD data (and visa-versa)

  @{fg shine}INPUTS:@{fg text}
     Icon#     = A number from 0 to #NIB_MAXIMUM.
     FilePath$ = Path of the .info file to save to on disk.

  @{fg shine}RETURNS:@{fg text}
     True or False. If it fails the chances are it`s because
     the device/path doesn`t exist.

  @{fg shine}NOTES:@{fg text}
     I havent 100% tested this command, but is should work fine!

@EndNode

@Node 515 "NIBCheckLibs{}"

  @{fg shine}NAME:@{fg text}
     NIBCheckLibs{}

  @{fg shine}SYNOPSIS:@{fg text}
     succ.b=NIBCheckLibs{}
     This command is a Function!

  @{fg shine}FUNCTION:@{fg text}
     This command despite being at the bottom of the guide is the
     most important one you have availible! It checks for the
     newicon.library and icon.library, both required by your
     executable!!

  @{fg shine}RETURNS:@{fg text}
     True or False. If it fails, this means the user doesn`t have
     either V40+ of the newicon.library or V39+ of the icon.library
     and your program should promptly terminate!

  @{fg shine}NOTES:@{fg text}
     I haven`t checked the lowest possible version of the icon.library
     the user must have in order for you to use STD icons.. So
     if you have a version lower than V39 and it still works change
     the version it checks for in the include.

@EndNode

@Node 604 "Greets to"

  @{fg shine}@{u}GREETS GO OUT TO:@{uu}@{fg text}

  All the members of SDS:
    HawkEye, HotCakes, GazChap, EcheXiO, Scider, Pagman, aMIGA_dUDE,
    mULDERfBI, Budda, BootBlock, Fanta, Ribs, Kev, Wrecker, Paul Disbrey,
    Gadge, WingNut, Alan, and last but not least Phil Price.

  Members of the BlitzList:
    David McMinn, Rui Carvalho, Rick Hodger, Donnovan Reeve, Liz Tucker,
    Simon Hitchen, James.L.Boyd, S.BeardWood, Curt Esser, Amorel,
    Paul West, Anders Hasselqvist, Simon Archer, Paul Burkey,
    Anton Reinauer, Chris "PrinceD" Deeney, Tony Rolfe, Julian Kinraid,
    Jamie Solomons, Peter Price, Dave "C00lie", Stefan Lebed, Peter Thor,
    Chris Jarvis, John Mason and Scott.

    (I GOTTA have missed someone there?)

  Other Peeps,
    Materia_Keeper, Ben Vost[Pah!],

  People keeping the Amiga BBS scene alive:
    Leon (D-Tracker BBS), Ninja (Arachnoids BBS)

  Sorry if I forgot ppl ;)

@EndNode

@Node 605 "Thanks to"

  @{fg shine}@{u}THANKS GO OUT TO:@{uu}@{fg text}

  Whoever emails me telling me they are using NIB (But doubt anyone
  will, will they?? Go on, you know you want too! ;))

  David McMinn, for some additional help, and current ASM help ;)
  TA.

  Acid and RWE for Blitz2.

  My lovely Miggy :)

  And OF COURSE, Team NewIcons, whom without this wouldn`t have
  been in anyway possible :)

@EndNode



