@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "ciatimer.include"

@{B}ciatimer.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" cia_SetInterruptCode " link cia_SetInterruptCode} 
   @{" timer_Abort " link timer_Abort} 
   @{" timer_Close " link timer_Close} 
   @{" timer_GetSigFlag " link timer_GetSigFlag} 
   @{" timer_Open " link timer_Open} 
   @{" timer_Send " link timer_Send} 
   @{" timer_SetTPM " link timer_SetTPM} 
   @{" timer_Start " link timer_Start} 
   @{" timer_Stop " link timer_Stop} 

@{B}Private Function Index:@{UB}

   @{" cia_asm_free " link cia_asm_free} 
   @{" cia_find " link cia_find} 
   @{" cia_free " link cia_free} 
   @{" cia_setciafreq " link cia_setciafreq} 
   @{" cia_setcontrol_ptr " link cia_setcontrol_ptr} 
   @{" cia_setsigtask " link cia_setsigtask} 
   @{" cia_settimeindex_ptr " link cia_settimeindex_ptr} 
   @{" cia_settpm " link cia_settpm} 
   @{" cia_start " link cia_start} 
   @{" cia_try " link cia_try} 

@{B}Public Macro Index:@{UB}

   @{" !timer_Start " link !timer_Start} 
   @{" !timer_Stop " link !timer_Stop} 

@ENDNODE
@NODE !timer_Start "!timer_Start"

@{B}!timer_Start@{UB}

@{B}Syntax:@{UB} !timer_Start

@{B}Description:@{UB}
Start the timer running after it is created.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !timer_Stop "!timer_Stop"

@{B}!timer_Stop@{UB}

@{B}Syntax:@{UB} !timer_Stop

@{B}Description:@{UB}
Stop the timer.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} ciatimer.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon

@{B}Date:@{UB} 11.03.2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB} CIA chip, Amiblitz2.4

@{B}Purpose:@{UB}
Provide a very accurate timer.

@{B}Abstract:@{UB}
This include provides functionality to create an interrupt driven timer. It is very accurate, and the best way to make a proper timing on Classic, Amithlon and WinUAE. Unfortunately, it uses the CIA custom chip directly, so it wont work on AmigaOS4, MOS or AROS.
If you want to implement a system friendly timer, better use the HD-Rec_timerdev.include (HD-Rec specific, nearly API compatible to this one) or the timer_gui.include or the vvblank.include. For time messuring the eclock.include is the better choice.

@{B}User Constants:@{UB}    none

@{B}Example:@{UB}     
__________________________________________________________________ snip!
. XINCLUDE "ciatimer.include.ab3"
.
. tpm.l = 60 * 100 ; 6000 ticks per minute = 100 ticks per second
. If @{" timer_Open " link timer_Open} \{&timeindex.l,&cia_running.l,tpm\}
.   @{" timer_Start " link timer_Start} \{\}
.   For n.l = 0 To 10
.     NPrint "CIA running: ",cia_running," ... ticks: ",timeindex
.     Delay_ 50 ; wait a second
.   Next
.   @{" timer_Stop " link timer_Stop} \{\}
. End If
. End
__________________________________________________________________ snip!



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE cia_SetInterruptCode "cia_SetInterruptCode"

@{B}cia_SetInterruptCode@{UB}

@{B}Syntax:@{UB} cia_SetInterruptCode \{codeptr.l,@userdata.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- codeptr.l    : ???
- userdata.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE cia_asm_free "cia_asm_free"

@{B}cia_asm_free@{UB}

@{B}Syntax:@{UB} cia_asm_free \{a.l,b.l,c.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- a.l    : ???
- b.l    : ???
- c.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE cia_find "cia_find"

@{B}cia_find@{UB}

@{B}Syntax:@{UB}  result.w = cia_find \{preferA.w\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- preferA.w    : ???

@{B}Result:@{UB}      
- result.w     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE cia_free "cia_free"

@{B}cia_free@{UB}

@{B}Syntax:@{UB} cia_free \{\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE cia_setciafreq "cia_setciafreq"

@{B}cia_setciafreq@{UB}

@{B}Syntax:@{UB} cia_setciafreq \{cia_freq.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- cia_freq.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE cia_setcontrol_ptr "cia_setcontrol_ptr"

@{B}cia_setcontrol_ptr@{UB}

@{B}Syntax:@{UB} cia_setcontrol_ptr \{cia_control_ptr.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- cia_control_ptr.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE cia_setsigtask "cia_setsigtask"

@{B}cia_setsigtask@{UB}

@{B}Syntax:@{UB} cia_setsigtask \{sigflag.l,sigtask.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- sigflag.l    : ???
- sigtask.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE cia_settimeindex_ptr "cia_settimeindex_ptr"

@{B}cia_settimeindex_ptr@{UB}

@{B}Syntax:@{UB} cia_settimeindex_ptr \{timeindex_ptr.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- timeindex_ptr.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE cia_settpm "cia_settpm"

@{B}cia_settpm@{UB}

@{B}Syntax:@{UB} cia_settpm \{tpm.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- tpm.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE cia_start "cia_start"

@{B}cia_start@{UB}

@{B}Syntax:@{UB} cia_start \{\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE cia_try "cia_try"

@{B}cia_try@{UB}

@{B}Syntax:@{UB}  result.l = cia_try \{a.l,b.l,c.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- a.l    : ???
- b.l    : ???
- c.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE timer_Abort "timer_Abort"

@{B}timer_Abort@{UB}

@{B}Syntax:@{UB} timer_Abort \{\}

@{B}Description:@{UB}
Abort timer, actually it does nothing. This is only for API compatibelity to the timer.device version.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE timer_Close "timer_Close"

@{B}timer_Close@{UB}

@{B}Syntax:@{UB} timer_Close \{\}

@{B}Description:@{UB}
Close the timer and free all assicitated resources with this include.
This function is called on autoexit.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE timer_GetSigFlag "timer_GetSigFlag"

@{B}timer_GetSigFlag@{UB}

@{B}Syntax:@{UB}  sigflag.l = timer_GetSigFlag \{\}

@{B}Description:@{UB}
The timer will signal the own task on every tick. This is the sigflag that will be set.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- sigflag.l     : sigflag to use with Wait_()

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE timer_Open "timer_Open"

@{B}timer_Open@{UB}

@{B}Syntax:@{UB}  succ.w = timer_Open \{timeindex_ptr.l,control_ptr.l,tpm.l,@resdiv.l\}

@{B}Description:@{UB}
Open the timer. You have to provide a pointer to a long word, that holds a counter. You also have to provide a pointer to a controller long word. If the long word contains a 0, the timer will stop, otherwise it will run.
This way you are able to controll the interrupt. The timer_start/@{" timer_Stop " link timer_Stop} functions are exactly doing this.
The speed of the timer is given as ticks-per-minute.

@{B}Inputs:@{UB}      
- timeindex_ptr.l    : pointer to the timeindex counter (long word)
- control_ptr.l    : pointer to the controller field (long word)
- tpm.l    : ticks-per-minute
- resdiv.l    : resolution divisor (do only every n-th update)

@{B}Result:@{UB}      
- succ.w     : -1 if the timer was created, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE timer_Send "timer_Send"

@{B}timer_Send@{UB}

@{B}Syntax:@{UB} timer_Send \{x.l\}

@{B}Description:@{UB}
Does nothing. Only for compatibelity to timer.device version.

@{B}Inputs:@{UB}      
- x.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE timer_SetTPM "timer_SetTPM"

@{B}timer_SetTPM@{UB}

@{B}Syntax:@{UB} timer_SetTPM \{tpm.l,resdiv.l\}

@{B}Description:@{UB}
Set the ticks-per-minute after the timer was already created.

@{B}Inputs:@{UB}      
- tpm.l    : ticks-per-minute
- resdiv.l    : resolution divisor (do only every n-th update)

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE timer_Start "timer_Start"

@{B}timer_Start@{UB}

@{B}Syntax:@{UB} timer_Start \{\}

@{B}Description:@{UB}
Make the timer running.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE timer_Stop "timer_Stop"

@{B}timer_Stop@{UB}

@{B}Syntax:@{UB} timer_Stop \{\}

@{B}Description:@{UB}
Stop the timer running.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
