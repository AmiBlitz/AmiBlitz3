@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "ntui_event.include"

@{B}ntui_event.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" ntui_FlushRawKey " link ntui_FlushRawKey} 

@{B}Public Macro Index:@{UB}

   @{" !event_Alt " link !event_Alt} 
   @{" !event_Amiga " link !event_Amiga} 
   @{" !event_Click " link !event_Click} 
   @{" !event_Code " link !event_Code} 
   @{" !event_Ctrl " link !event_Ctrl} 
   @{" !event_DblClick " link !event_DblClick} 
   @{" !event_DeltaX " link !event_DeltaX} 
   @{" !event_DeltaY " link !event_DeltaY} 
   @{" !event_IDCMP " link !event_IDCMP} 
   @{" !event_InstanceID " link !event_InstanceID} 
   @{" !event_KeyDown " link !event_KeyDown} 
   @{" !event_KeyUp " link !event_KeyUp} 
   @{" !event_MenuItem " link !event_MenuItem} 
   @{" !event_MenuSubItem " link !event_MenuSubItem} 
   @{" !event_MenuTitle " link !event_MenuTitle} 
   @{" !event_Micros " link !event_Micros} 
   @{" !event_MouseButtonID " link !event_MouseButtonID} 
   @{" !event_MouseClick " link !event_MouseClick} 
   @{" !event_MouseOverObject " link !event_MouseOverObject} 
   @{" !event_MouseRelease " link !event_MouseRelease} 
   @{" !event_MouseX " link !event_MouseX} 
   @{" !event_MouseY " link !event_MouseY} 
   @{" !event_Notify " link !event_Notify} 
   @{" !event_ObjectX " link !event_ObjectX} 
   @{" !event_ObjectY " link !event_ObjectY} 
   @{" !event_Qualifier " link !event_Qualifier} 
   @{" !event_RawKey " link !event_RawKey} 
   @{" !event_Release " link !event_Release} 
   @{" !event_ScreenX " link !event_ScreenX} 
   @{" !event_ScreenY " link !event_ScreenY} 
   @{" !event_Seconds " link !event_Seconds} 
   @{" !event_Shift " link !event_Shift} 
   @{" !event_String " link !event_String} 
   @{" !event_TrplClick " link !event_TrplClick} 
   @{" !event_TuiWindow " link !event_TuiWindow} 
   @{" !event_UserID " link !event_UserID} 
   @{" !event_VanillaKey " link !event_VanillaKey} 
   @{" !event_WinID " link !event_WinID} 
   @{" !event_Window " link !event_Window} 
   @{" !event_tuiObject " link !event_tuiObject} 
   @{" !intui_MenuIsOpen " link !intui_MenuIsOpen} 
   @{" !ntui_MouseButtonPressed " link !ntui_MouseButtonPressed} 
   @{" !ntui_MouseButtonStatus " link !ntui_MouseButtonStatus} 
   @{" !ntui_RawKeyStatus " link !ntui_RawKeyStatus} 

@{B}Private Macro Index:@{UB}

   @{" !event_Signal " link !event_Signal} 

@ENDNODE
@NODE !event_Alt "!event_Alt"

@{B}!event_Alt@{UB}

@{B}Syntax:@{UB} !event_Alt

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_Amiga "!event_Amiga"

@{B}!event_Amiga@{UB}

@{B}Syntax:@{UB} !event_Amiga

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_Click "!event_Click"

@{B}!event_Click@{UB}

@{B}Syntax:@{UB} !event_Click

@{B}Description:@{UB}
Check if the last event did "click", such as a mousebutton.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- succ    : -1 if a click occured, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_Code "!event_Code"

@{B}!event_Code@{UB}

@{B}Syntax:@{UB} !event_Code \{*tuiEvent.tuiEvent\}

@{B}Description:@{UB}
Get the raw, untouched event code that is associated with the last event.
NOTE: This macro replaces the Blitz Function EventCode.

@{B}Inputs:@{UB}      
- *tuiEvent.tuiEvent    : ???

@{B}Result:@{UB}      
- code.l     : event code of the last event

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_Ctrl "!event_Ctrl"

@{B}!event_Ctrl@{UB}

@{B}Syntax:@{UB} !event_Ctrl

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_DblClick "!event_DblClick"

@{B}!event_DblClick@{UB}

@{B}Syntax:@{UB} !event_DblClick

@{B}Description:@{UB}
Check if the last mouse button event matches the doubleclick time (as set in AmigaOS preferences).

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- succ.l    : -1 if the last click was a double click, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_DeltaX "!event_DeltaX"

@{B}!event_DeltaX@{UB}

@{B}Syntax:@{UB} !event_DeltaX

@{B}Description:@{UB}
Return the mouse delta-x from the last mouse pointer positon.
NOTE: Makes sense only after #IDCMP_MOUSEMOVE.

- mdx.l   : mouse pointer delta x in pixel

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_DeltaY "!event_DeltaY"

@{B}!event_DeltaY@{UB}

@{B}Syntax:@{UB} !event_DeltaY

@{B}Description:@{UB}
Return the mouse delta-y from the last mouse pointer positon.
NOTE: Makes sense only after #IDCMP_MOUSEMOVE.

- mdy.l   : mouse pointer delta y in pixel

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_IDCMP "!event_IDCMP"

@{B}!event_IDCMP@{UB}

@{B}Syntax:@{UB} !event_IDCMP

@{B}Description:@{UB}
Return the IDCMP code of the last event.
See RKM/intuition or inlcudes/intuition.h for possible IDCMP codes.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
idcmp.l    : IDCMP code

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_InstanceID "!event_InstanceID"

@{B}!event_InstanceID@{UB}

@{B}Syntax:@{UB} !event_InstanceID \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_KeyDown "!event_KeyDown"

@{B}!event_KeyDown@{UB}

@{B}Syntax:@{UB} !event_KeyDown

@{B}Description:@{UB}
Check if a key was hold down while the event occured.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- succ.l    : -1, if key was hold down, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_KeyUp "!event_KeyUp"

@{B}!event_KeyUp@{UB}

@{B}Syntax:@{UB} !event_KeyUp

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_MenuItem "!event_MenuItem"

@{B}!event_MenuItem@{UB}

@{B}Syntax:@{UB} !event_MenuItem

@{B}Description:@{UB}
Return the menu item that is associated with the last #IDCMP_MENUPICK event.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
mitem.l    : menu item number

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_MenuSubItem "!event_MenuSubItem"

@{B}!event_MenuSubItem@{UB}

@{B}Syntax:@{UB} !event_MenuSubItem

@{B}Description:@{UB}
Return the sub menu item (if there is any) hit after the last IDCMP_MENUPICK event.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_MenuTitle "!event_MenuTitle"

@{B}!event_MenuTitle@{UB}

@{B}Syntax:@{UB} !event_MenuTitle

@{B}Description:@{UB}
Return the menu titel that was hit after the last #IDCMP_MENUPICK event.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- mtitle.l   : menu title number

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_Micros "!event_Micros"

@{B}!event_Micros@{UB}

@{B}Syntax:@{UB} !event_Micros

@{B}Description:@{UB}
Return the micro seconds of absolute system time when the last event occured.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
micros.l    : micro seconds

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" !event_Seconds " link !event_Seconds}




@ENDNODE
@NODE !event_MouseButtonID "!event_MouseButtonID"

@{B}!event_MouseButtonID@{UB}

@{B}Syntax:@{UB} !event_MouseButtonID

@{B}Description:@{UB}
Get the mouse button number of the last event associated with the mouse.
This can be
0: no mouse button
1: left mouse button
2: right mouse button
3: middle mouse button
...

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
mb.l    : number of mouse button

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_MouseClick "!event_MouseClick"

@{B}!event_MouseClick@{UB}

@{B}Syntax:@{UB} !event_MouseClick

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_MouseOverObject "!event_MouseOverObject"

@{B}!event_MouseOverObject@{UB}

@{B}Syntax:@{UB} !event_MouseOverObject

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_MouseRelease "!event_MouseRelease"

@{B}!event_MouseRelease@{UB}

@{B}Syntax:@{UB} !event_MouseRelease

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_MouseX "!event_MouseX"

@{B}!event_MouseX@{UB}

@{B}Syntax:@{UB} !event_MouseX

@{B}Description:@{UB}
Return the x position of the mouse pointer relative to the events windows left/top edge.
NOTE: x can be negative.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" !event_MouseY " link !event_MouseY}




@ENDNODE
@NODE !event_MouseY "!event_MouseY"

@{B}!event_MouseY@{UB}

@{B}Syntax:@{UB} !event_MouseY

@{B}Description:@{UB}
Return the y position of the mouse pointer relative to the events windows left/top edge.
NOTE: y can be negative.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" !event_MouseX " link !event_MouseX}




@ENDNODE
@NODE !event_Notify "!event_Notify"

@{B}!event_Notify@{UB}

@{B}Syntax:@{UB} !event_Notify \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_ObjectX "!event_ObjectX"

@{B}!event_ObjectX@{UB}

@{B}Syntax:@{UB} !event_ObjectX

@{B}Description:@{UB}
Identical to @{" !event_MouseX " link !event_MouseX}.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_ObjectY "!event_ObjectY"

@{B}!event_ObjectY@{UB}

@{B}Syntax:@{UB} !event_ObjectY

@{B}Description:@{UB}
Identical to @{" !event_MouseY " link !event_MouseY}.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_Qualifier "!event_Qualifier"

@{B}!event_Qualifier@{UB}

@{B}Syntax:@{UB} !event_Qualifier

@{B}Description:@{UB}
Get the whole, untouched qualifier value of the last event.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_RawKey "!event_RawKey"

@{B}!event_RawKey@{UB}

@{B}Syntax:@{UB} !event_RawKey

@{B}Description:@{UB}
Get the raw key number associated with the event.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_Release "!event_Release"

@{B}!event_Release@{UB}

@{B}Syntax:@{UB} !event_Release

@{B}Description:@{UB}
The event is "release", e.g. mouse button or key.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_ScreenX "!event_ScreenX"

@{B}!event_ScreenX@{UB}

@{B}Syntax:@{UB} !event_ScreenX

@{B}Description:@{UB}
Return the mouse x coordinate relative to the screen.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    !event_smy




@ENDNODE
@NODE !event_ScreenY "!event_ScreenY"

@{B}!event_ScreenY@{UB}

@{B}Syntax:@{UB} !event_ScreenY

@{B}Description:@{UB}
Return the mouse y coordinate relative to the screen.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    !event_smx




@ENDNODE
@NODE !event_Seconds "!event_Seconds"

@{B}!event_Seconds@{UB}

@{B}Syntax:@{UB} !event_Seconds

@{B}Description:@{UB}
Return the seconds of the absolute system time when the event occured.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" !event_Micros " link !event_Micros}




@ENDNODE
@NODE !event_Shift "!event_Shift"

@{B}!event_Shift@{UB}

@{B}Syntax:@{UB} !event_Shift

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_Signal "!event_Signal"

@{B}!event_Signal@{UB}

@{B}Syntax:@{UB} !event_Signal

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_String "!event_String"

@{B}!event_String@{UB}

@{B}Syntax:@{UB} !event_String

@{B}Description:@{UB}
Return the string that is associated with the last event.
This make only sense for IDCMP_GADGETUP, if the gadget was a string gadget.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_TrplClick "!event_TrplClick"

@{B}!event_TrplClick@{UB}

@{B}Syntax:@{UB} !event_TrplClick

@{B}Description:@{UB}
Check for tripple click of the mouse button.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_TuiWindow "!event_TuiWindow"

@{B}!event_TuiWindow@{UB}

@{B}Syntax:@{UB} !event_TuiWindow \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_UserID "!event_UserID"

@{B}!event_UserID@{UB}

@{B}Syntax:@{UB} !event_UserID \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_VanillaKey "!event_VanillaKey"

@{B}!event_VanillaKey@{UB}

@{B}Syntax:@{UB} !event_VanillaKey

@{B}Description:@{UB}
Get the vanilla key code (after raw key is mapped through you keyboard settings).
NOTE: This works also if you received a raw key message. There is no need to receive IDCMP_VANILLAKEY messages.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_WinID "!event_WinID"

@{B}!event_WinID@{UB}

@{B}Syntax:@{UB} !event_WinID \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_Window "!event_Window"

@{B}!event_Window@{UB}

@{B}Syntax:@{UB} !event_Window \{\}

@{B}Description:@{UB}
Return the Blitz Window Object ID of the events window.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : Window Object ID

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_tuiObject "!event_tuiObject"

@{B}!event_tuiObject@{UB}

@{B}Syntax:@{UB} !event_tuiObject

@{B}Description:@{UB}
Return ID of last hit gadget or -1, if no gadget was hit.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
gadID.l    : ID number of last gadget hit

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !intui_MenuIsOpen "!intui_MenuIsOpen"

@{B}!intui_MenuIsOpen@{UB}

@{B}Syntax:@{UB} !intui_MenuIsOpen

@{B}Description:@{UB}
Check if the menu is currently open.
NOTE: This is not an !event_xxx type macro, because it is not called after you received an event. You can check any time if the menu is open.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !ntui_MouseButtonPressed "!ntui_MouseButtonPressed"

@{B}!ntui_MouseButtonPressed@{UB}

@{B}Syntax:@{UB} !ntui_MouseButtonPressed

@{B}Description:@{UB}
Check if any mouse button is currently pressed.
NOTE: This is not an !event_xxx type macro, because it is not called after you received an event. You can check if a mouse button is pressed any time. This is ideal for games.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !ntui_MouseButtonStatus "!ntui_MouseButtonStatus"

@{B}!ntui_MouseButtonStatus@{UB}

@{B}Syntax:@{UB} !ntui_MouseButtonStatus \{mb\}

@{B}Description:@{UB}
Return the currently pressed mouse button(s).
NOTE: This is not an !event_xxx type macro, because it is not called after you received an event. You can check if a mouse button is pressed any time. This is ideal for games.
NOTE: This replaces te Blitz function Joyb()

@{B}Inputs:@{UB}      
- mb    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !ntui_RawKeyStatus "!ntui_RawKeyStatus"

@{B}!ntui_RawKeyStatus@{UB}

@{B}Syntax:@{UB} !ntui_RawKeyStatus \{keycode\}

@{B}Description:@{UB}
Return the status of any raw key.
NOTE: This is not an !event_xxx type macro, because it is not called after you received an event. You can check if a certain key is pressed any time. This is ideal for games.

@{B}Inputs:@{UB}      
- keycode    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} ntui_event.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 06/01/2009

@{B}Author:@{UB} <unknown>

@{B}Requirements:@{UB}  Amiblitz3

@{B}Purpose:@{UB}
Extend AB3 functionality.
* no description available *

@{B}Abstract:@{UB}
* no abstract available *

@{B}User Constants:@{UB}
#max_objects   = n

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_FlushRawKey "ntui_FlushRawKey"

@{B}ntui_FlushRawKey@{UB}

@{B}Syntax:@{UB} ntui_FlushRawKey \{\}

@{B}Description:@{UB}
*tuiWindow.tuiWindow     ; tuiWindow that cause the event
*tuiObject.tuiObject     ; object that caused the event
notify.l                 ; notify value
value.l                  ; if event contains an integer value
*string.str              ; if event contains a string
size.tuiPixel            ; if the event has a 2dim size
#RAWKEY_APOSTROPH = $00 ;   '   ~
#RAWKEY_1         = $01 ;   1   !
#RAWKEY_2         = $02 ;   2   @
#RAWKEY_3         = $03 ;   3   #
#RAWKEY_4         = $04 ;   4   $
#RAWKEY_5         = $05 ;   5   %
#RAWKEY_6         = $06 ;   6   ^
#RAWKEY_7         = $07 ;   7   &
#RAWKEY_8         = $08 ;   8   *
#RAWKEY_9         = $09 ;   9   (
#RAWKEY_0         = $0A ;   0   )
#RAWKEY_MINUS     = $0B ;   -   _
#RAWKEY_PLUS      = $0C ;   =   +
#RAWKEY_BACKSLASH = $0D ;   \   |
#RAWKEY_UNDEF1    = $0E ;   (undefined)   (undefined)
#RAWKEY_NUMPAD0   = $0F ;   0   0 (numeric pad)
#RAWKEY_Q         = $10 ;   q   Q
#RAWKEY_W         = $11 ;   w   W
#RAWKEY_E         = $12 ;   e   E
#RAWKEY_R         = $13 ;   r   R
#RAWKEY_T         = $14 ;   t   T
#RAWKEY_Y         = $15 ;   y   Y
#RAWKEY_U         = $16 ;   u   U
#RAWKEY_I         = $17 ;   i   I
#RAWKEY_O         = $18 ;   o   O
#RAWKEY_P         = $19 ;   p   P
#RAWKEY_SBO       = $1A ;   [   \{
#RAWKEY_SBC       = $1B ;   ]   \}
#RAWKEY_UNDEF2    = $1C ;   (undefined)   (undefined)
#RAWKEY_NUMPAD1   = $1D ;   1   1 (numeric pad)
#RAWKEY_NUMPAD2   = $1E ;   2   2 (numeric pad)
#RAWKEY_NUMPAD3   = $1F ;   3   3 (numeric pad)
#RAWKEY_A         = $20 ;   a   A
#RAWKEY_S         = $21 ;   s   S
#RAWKEY_D         = $22 ;   d   D
#RAWKEY_F         = $23 ;   f   F
#RAWKEY_G         = $24 ;   g   G
#RAWKEY_H         = $25 ;   h   H
#RAWKEY_J         = $26 ;   j   J
#RAWKEY_K         = $27 ;   k   K
#RAWKEY_L         = $28 ;   l   L
#RAWKEY_SEMI      = $29 ;   ;   :
#RAWKEY_QUOTE     = $2A ;   '   "
#RAWKEY_RESERVED1 = $2B ;   (reserved)  (reserved)
#RAWKEY_UNDEF3    = $2C ;   (undefined)   (undefined)
#RAWKEY_NUMPAD4   = $2D ;   4   4 (numeric pad)
#RAWKEY_NUMPAD5   = $2E ;   5   5 (numeric pad)
#RAWKEY_NUMPAD6   = $2F ;   6   6 (numeric pad)
#RAWKEY_RESERVED2 = $30 ;   (reserved)  (reserved)
#RAWKEY_Z         = $31 ;   z   Z
#RAWKEY_X         = $32 ;   x   X
#RAWKEY_C         = $33 ;   c   C
#RAWKEY_V         = $34 ;   v   V
#RAWKEY_B         = $35 ;   b   B
#RAWKEY_N         = $36 ;   n   N
#RAWKEY_M         = $37 ;   m   M
#RAWKEY_COMMA     = $38 ;   ,   <
#RAWKEY_DOT       = $39 ;   .   >
#RAWKEY_SLASH     = $3A ;   /   ?
#RAWKEY_UNDEF4    = $3B ;   (undefined)   (undefined)
#RAWKEY_NUMPADDOT = $3C ;   .   . (numeric pad)
#RAWKEY_NUMPAD7   = $3D ;   7   7 (numeric pad)
#RAWKEY_NUMPAD8   = $3E ;   8   8 (numeric pad)
#RAWKEY_NUMPAD9   = $3F ;   9   9 (numeric pad)
#RAWKEY_SPACE     = $40 ;   SPACE (20)  SPACE (20)
#RAWKEY_BACKSPACE = $41 ;   BACK SPACE (08)   BACK SPACE (08)
#RAWKEY_TAB       = $42 ;   TAB (09)  TAB (09)
#RAWKEY_ENTER     = $43 ;   ENTER (0D) (numeric pad)  ENTER (0D) (numeric pad)
#RAWKEY_RETURN    = $44 ;   Return (0D)   Return (0D)
#RAWKEY_ESC       = $45 ;   ESC (1B)  ESC (1B)
#RAWKEY_DEL       = $46 ;   DEL (7F)  DEL (7F)
#RAWKEY_UNDEF5    = $47 ;   (undefined)   (undefined)
#RAWKEY_PAGEUP    = $48 ;   (undefined)   (undefined)
#RAWKEY_PAGEDOWN  = $49 ;   (undefined)   (undefined)
#RAWKEY_NUMPADMINUS=$4A ;   -   - (numeric pad)
#RAWKEY_F11       = $4B ;   (undefined)   (undefined)
#RAWKEY_ARROWUP   = $4C ;   UP ARROW A  UP ARROW T
#RAWKEY_ARROWDOWN = $4D ;   DOWN ARROW B  DOWN ARROW S
#RAWKEY_ARROWRIGHT= $4E ;   RIGHT ARROW C   RIGHT ARROW A
#RAWKEY_ARROWLEFT = $4F ;   LEFT ARROW D  LEFT ARROW @
#RAWKEY_UP        = $4C ;   UP ARROW A  UP ARROW T
#RAWKEY_DOWN      = $4D ;   DOWN ARROW B  DOWN ARROW S
#RAWKEY_RIGHT     = $4E ;   RIGHT ARROW C   RIGHT ARROW A
#RAWKEY_LEFT      = $4F ;   LEFT ARROW D  LEFT ARROW @
#RAWKEY_F1        = $50 ;   F1 0~   F1 10~
#RAWKEY_F2        = $51 ;   F2 1~   F2 11~
#RAWKEY_F3        = $52 ;   F3 2~   F3 12~
#RAWKEY_F4        = $53 ;   F4 3~   F4 13~
#RAWKEY_F5        = $54 ;   F5 4~   F5 14~
#RAWKEY_F6        = $55 ;   F6 5~   F6 15~
#RAWKEY_F7        = $56 ;   F7 6~   F7 16~
#RAWKEY_F8        = $57 ;   F8 7~   F8 17~
#RAWKEY_F9        = $58 ;   F9 8~   F9 18~
#RAWKEY_F10       = $59 ;   F10 9~  F10 19~
#RAWKEY_UNDEF9    = $5A ;   (undefined)   (undefined)
#RAWKEY_UNDEF10   = $5B ;   (undefined)   (undefined)
#RAWKEY_UNDEF11   = $5C ;   (undefined)   (undefined)
#RAWKEY_UNDEF12   = $5D ;   (undefined)   (undefined)
#RAWKEY_UNDEF13   = $5E ;   (undefined)   (undefined)
#RAWKEY_HELP      = $5F ;   HELP ?~   HELP ?~
#RAWKEY_LSHIFT    = $60 ;   LEFT SHIFT  LEFT SHIFT
#RAWKEY_RSHIFT    = $61 ;   RIGHT SHIFT   RIGHT SHIFT
#RAWKEY_CAPSLOCK  = $62 ;   CAPS LOCK   CAPS LOCK
#RAWKEY_CTRL      = $63 ;   CTRL  CTRL
#RAWKEY_LALT      = $64 ;   LEFT ALT  LEFT ALT
#RAWKEY_RALT      = $65 ;   RIGHT ALT   RIGHT ALT
#RAWKEY_LAMIGA    = $66 ;   LEFT AMIGA  CLOSE AMIGA
#RAWKEY_RAMIGA    = $67 ;   RIGHT AMIGA   OPEN AMIGA
#RAWKEY_LMB       = $68 ;   LEFT Mouse BUTTON   LEFT Mouse BUTTON
#RAWKEY_RMB       = $69 ;   RIGHT Mouse BUTTON  RIGHT Mouse BUTTON
#RAWKEY_MMB       = $6A ;   MIDDLE Mouse BUTTON   MIDDLE Mouse BUTTON
#RAWKEY_UNDEF14   = $6B ;   (undefined)               (undefined)
#RAWKEY_UNDEF15   = $6C ;   (undefined)               (undefined)
#RAWKEY_UNDEF16   = $6D ;   (undefined)               (undefined)
#RAWKEY_UNDEF17   = $6E ;   (undefined)               (undefined)
#RAWKEY_UNDEF18   = $6F ;   (undefined)               (undefined)
RAWKEY_UNDEF     = $70 - 7F ; (undefined)   (undefined)
RAWKEY_TRANS     = $80-F8 ; UP TRANSITION   UP TRANSITION
RAWKEY_          = $(80 For 00, 81 For 01 ... F8 For 7F)
#RAWKEY_BADKEY    = $F9 ;   LAST KEYKODE BAD
#RAWKEY_OVERFLOW  = $FA ;   KEYBOARD Buffer OVERFLOW
#RAWKEY_UNDEF19   = $FB ;   (undefined)   (undefined)
#RAWKEY_FAILED    = $FC ;   KEYBOARD SELFTEST FAILED
#RAWKEY_START     = $FD ;   POWER-UP KEY STREAM Start
#RAWKEY_END       = $FE ;   POWER-UP KEY STREAM End
#RAWKEY_MOUSE     = $FF ;   Mouse Event (Mouse moved only, no button changed)

Reset all rawkeys to be unpressed.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
