@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "eclock.include"

@{B}eclock.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" eclock_Close " link eclock_Close} 
   @{" eclock_ObtainUnit " link eclock_ObtainUnit} 
   @{" eclock_Open " link eclock_Open} 
   @{" eclock_Read " link eclock_Read} 
   @{" eclock_ReadDouble " link eclock_ReadDouble} 
   @{" eclock_ReleaseUnit " link eclock_ReleaseUnit} 
   @{" eclock_SetStartTime " link eclock_SetStartTime} 
   @{" eclock_Start " link eclock_Start} 
   @{" eclock_StartLR " link eclock_StartLR} 
   @{" eclock_Stop " link eclock_Stop} 
   @{" eclock_StopLR " link eclock_StopLR} 

@{B}Private Function Index:@{UB}

   @{" _eclock_Div64 " link _eclock_Div64} 

@{B}Public Macro Index:@{UB}

   @{" !_eclock_GetSysTime " link !_eclock_GetSysTime} 
   @{" !_eclock_ReadEClock " link !_eclock_ReadEClock} 
   @{" !_eclock_Subtime " link !_eclock_Subtime} 

@ENDNODE
@NODE !_eclock_GetSysTime "!_eclock_GetSysTime"

@{B}!_eclock_GetSysTime@{UB}

@{B}Syntax:@{UB} !_eclock_GetSysTime \{ll timeval,

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !_eclock_ReadEClock "!_eclock_ReadEClock"

@{B}!_eclock_ReadEClock@{UB}

@{B}Syntax:@{UB} !_eclock_ReadEClock \{ll timeval,long efreq\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- ll timeval    : ???
- long efreq    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !_eclock_Subtime "!_eclock_Subtime"

@{B}!_eclock_Subtime@{UB}

@{B}Syntax:@{UB} !_eclock_Subtime \{dest timeval,source timeval) dest-source

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB}  eclock.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 18.08.2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB} Amiblitz2.4

@{B}Purpose:@{UB}
Provide accurate time messurement to Amiblitz2.

@{B}Abstract:@{UB}
This include can be used to read out the exact system time, but the main purpose is to use it like a "stop clock" to messure time intervalls e.g. for benchmark purposes.

from every function that read the eclock there are two versions, the hires one (default) and the low-res one.
- hires (EClock, CIA)
- lowres (GetSysTime,VBlank)
hires : This is very accurate, better than milliseconds
lowres: This is less precise, e.g. on WinUAE only 50Hz, but it has less overhead and it can be considered as more compatible, since it does not use the FPU and only OS functions calls to determine the time.
Use the lowres version, if you messure longer time intervalls that dont have to be very accurate.

@{B}User Constants:@{UB} none

@{B}Example:@{UB}     
XInclude "eclock.inlcude"

eclock_Start\{\}

... do something ...

time.l = eclock_Stop\{\}
NPrint "What we just did, needed ",time," ms to compute!"
End



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _eclock_Div64 "_eclock_Div64"

@{B}_eclock_Div64@{UB}

@{B}Syntax:@{UB}  result.l =  _eclock_Div64 \{ia.l,ib.l,ic.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- ia.l    : ???
- ib.l    : ???
- ic.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE eclock_Close "eclock_Close"

@{B}eclock_Close@{UB}

@{B}Syntax:@{UB} eclock_Close \{\}

@{B}Description:@{UB}
Close the timer.device and all resources the eclock.include allocated.
This is called on autoexit.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" eclock_Open " link eclock_Open}




@ENDNODE
@NODE eclock_ObtainUnit "eclock_ObtainUnit"

@{B}eclock_ObtainUnit@{UB}

@{B}Syntax:@{UB}  result.l = eclock_ObtainUnit \{\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE eclock_Open "eclock_Open"

@{B}eclock_Open@{UB}

@{B}Syntax:@{UB}  result.l = eclock_Open \{@scaler.l\}

@{B}Description:@{UB}
Open the timer.device. This is called automatically on the first use of @{" eclock_Start " link eclock_Start}.
But if you want to program disciplined, use it to check if the timer.device was opened correctly,
and you can already set the resulution.
The scaler parameter will be multiplied by the messured time in seconds.
E.g. a scaler of ...
* 1 will give you seconds.
* 50 will give you 50Hz ticks
*1000 will give you milliseconds,
*1000000 will give you micro seconds

Adjust it according your required accuracy.

Note: If the used timer has lower accuracy than you request, the values will be quantized.

@{B}Inputs:@{UB}      
- scaler.l    : scaler value

@{B}Result:@{UB}      
- result.l     : -1 if everything went well, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" eclock_Close " link eclock_Close}




@ENDNODE
@NODE eclock_Read "eclock_Read"

@{B}eclock_Read@{UB}

@{B}Syntax:@{UB}  result.l = eclock_Read \{@scaler.l,@unit.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- scaler.l    : ???
- unit.l    : ???

@{B}Result:@{UB}      
- result.d     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE eclock_ReadDouble "eclock_ReadDouble"

@{B}eclock_ReadDouble@{UB}

@{B}Syntax:@{UB}  result.d = eclock_ReadDouble \{@scaler.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- scaler.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE eclock_ReleaseUnit "eclock_ReleaseUnit"

@{B}eclock_ReleaseUnit@{UB}

@{B}Syntax:@{UB} eclock_ReleaseUnit \{unit.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- unit.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE eclock_SetStartTime "eclock_SetStartTime"

@{B}eclock_SetStartTime@{UB}

@{B}Syntax:@{UB} eclock_SetStartTime \{starttime.d,@scaler.l,@unit.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- starttime.d : ???
- scaler.l    : ???
- unit.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE eclock_Start "eclock_Start"

@{B}eclock_Start@{UB}

@{B}Syntax:@{UB} eclock_Start \{@scaler.l,@unit.l\}

@{B}Description:@{UB}
Start to messure the time.
Imagine to have a stopclock in your hands. This is the equivalent to pressing the "start" button.

@{B}Inputs:@{UB}      
- scaler.l    : optionally, a scaler value if different from eclock_open
- unit.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" eclock_Open " link eclock_Open}, @{" eclock_Stop " link eclock_Stop}




@ENDNODE
@NODE eclock_StartLR "eclock_StartLR"

@{B}eclock_StartLR@{UB}

@{B}Syntax:@{UB} eclock_StartLR \{@scaler.l,@unit.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- scaler.l    : ???
- unit.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE eclock_Stop "eclock_Stop"

@{B}eclock_Stop@{UB}

@{B}Syntax:@{UB}  result.l = eclock_Stop \{@unit.l\}

@{B}Description:@{UB}
Return the time that has passed since the last call of @{" eclock_Start " link eclock_Start}.
This is the equivalent to pressing the stop button and reading the time that has passed, except that the timer keeps on running.
You can call this functions as often as you want after @{" eclock_Start " link eclock_Start}.

@{B}Inputs:@{UB}      
- unit.l    : ???

@{B}Result:@{UB}      
- result.l     : time in seconds that has passed since the last call of eclock_start, scaled by the last scaler value that was set.

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE eclock_StopLR "eclock_StopLR"

@{B}eclock_StopLR@{UB}

@{B}Syntax:@{UB}  result.l =  eclock_StopLR \{@unit.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- unit.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
