@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "undo.include"

@{B}undo.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" undo_Config " link undo_Config} 
   @{" undo_Continue " link undo_Continue} 
   @{" undo_Create " link undo_Create} 
   @{" undo_Flush " link undo_Flush} 
   @{" undo_FlushAll " link undo_FlushAll} 
   @{" undo_Free " link undo_Free} 
   @{" undo_FreeAll " link undo_FreeAll} 
   @{" undo_GetContainer " link undo_GetContainer} 
   @{" undo_GetContainerData " link undo_GetContainerData} 
   @{" undo_GetContainerDataPtr " link undo_GetContainerDataPtr} 
   @{" undo_GetContainerDataSize " link undo_GetContainerDataSize} 
   @{" undo_GetContainerID " link undo_GetContainerID} 
   @{" undo_GetContainerUserData1 " link undo_GetContainerUserData1} 
   @{" undo_GetContainerUserData2 " link undo_GetContainerUserData2} 
   @{" undo_GetNumChanges " link undo_GetNumChanges} 
   @{" undo_GetNumGlobalChanges " link undo_GetNumGlobalChanges} 
   @{" undo_GetNumSteps " link undo_GetNumSteps} 
   @{" undo_GetStepID " link undo_GetStepID} 
   @{" undo_SetGlobalSaved " link undo_SetGlobalSaved} 
   @{" undo_SetSaved " link undo_SetSaved} 
   @{" undo_Start " link undo_Start} 
   @{" undo_Stop " link undo_Stop} 
   @{" undo_Store " link undo_Store} 

@{B}Private Function Index:@{UB}

   @{" _drawstat " link _drawstat} 
   @{" _undo_c_add " link _undo_c_add} 
   @{" _undo_c_addstep " link _undo_c_addstep} 
   @{" _undo_c_destroy " link _undo_c_destroy} 
   @{" _undo_c_todisk " link _undo_c_todisk} 
   @{" _undo_check_disk " link _undo_check_disk} 
   @{" _undo_check_mem " link _undo_check_mem} 
   @{" _undo_check_steps " link _undo_check_steps} 
   @{" _undo_collect_close " link _undo_collect_close} 
   @{" _undo_collect_open " link _undo_collect_open} 
   @{" _undo_nextindex " link _undo_nextindex} 
   @{" _undo_temp_free " link _undo_temp_free} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} undo.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 29/12/2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB}  Amiblitz2.4

@{B}Purpose:@{UB}
Provide undo functionality to AB2.

@{B}Abstract:@{UB}
'Undo' and 'redo' are both hard to implement features in an application.
The undo.inlcude will give you a hand here.

The undo.include works like this:
Imagine a big trashbin (called "undo stack"). You can throw anything in you like, from very small items, e.g. a deleted line or character in an texteditor, or very big items like a pixel area in your 24 bit bitmap that was painted over in a paint program.
Every item you throw in will be labeled with an ID number YOU can define. The trashbin behaves like a stack. The last thing you threw in, will be the first you can get out again.

The undo.include manages everything you throw in automatically, can swap it to disk if necessary or 'forget' an item if it gets too old or if it consumes too much memory.

You can create an infinite number of virtual trashbins/undo stack.

What to throw into the undo stack?
To know what an undo system has to do you have to identify how a 'do' can be undone.
There are 3 types:
1. Constructors: the undo stack has only to remember which object was constructed and can undo it by destroying.
2. Manipulators: the undo stack has either:
                 - to know how to reverse the manipluation (if possible at all)
                 - to save the manipulated data area BEFORE modifying
3. Destructors:  the undo stack has to save the whole object BEFORE it is destroyed

To identify which actions have to be undone per undo step (an undo step can contain one or more actions that have to be undone),
you throw in a 'blank page' to seperate the containers into undo steps.
Sounds complicated, but is easy:

Example :
A Paint Program: You create an empty, black picture and draw red box, then a blue circle and then you delete the picture.
The undo stack might look like this:

Container: 'destroy bitmap'     / Data Block: whole bitmap
__Step 3
Container: 'draw a blue circle' / Data Block: area covered by blue circle
__Step 2
container: 'draw a red box'     / Data Block: area covered by red box
__Step 1
Container: 'fill bitmap black'  / Data Block: whole bitmap
Container: 'create bitmap'      / Data Block: empty
__Step 0

Everytime the user hits undo, you will do a while loop on @{" undo_GetContainer " link undo_GetContainer} and you will get all containers from top of the stack till the next step seperator, until you reach step 0.
Each container has an ID how to interpret the content and an optional data block, that can contain e.g. parts of a bitmap.
NOTE: the 'create bitmap' does not need any data block, it can just destroy the bitmap, while the 'destroy bitmap' needs to know the whole bitmap to re-create it again.

The undo.include works very efficient on very small undo steps, e.g. a deleted character in a texteditor, and also on very big data blocks like restoring a whole bitmap.

Terminology:
undo stack : a stack that is filled with undo steps that can contain multiple containers. It is a FILO buffer (first in, last out).
undo step  : an undo step contains all actions that have to be reversed to undo the latest edit step in the application. One undo step can contain zero, one, or multiple containers.
container  : a container represents an atomic action that has to be reversed. It consists at least of the cID, identifying what to do with this container. It has also two user data fields and an optionally data block.
data block : the data block is an optional part of a container and can hold any data you need to revers the action indicated by the cID.
user data  : each container has 2 user data long words. They can contain any information you like, e.g. object ID numbers etc.
cID        : container identifier, defines what to do with the container
stepID     : ID of one undo step.

@{B}User Constants:@{UB} no user definable

@{B}Example:@{UB}                                         The build in example is more a test of the functionality than a real world example.
See the example/ dir for more examples.



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _drawstat "_drawstat"

@{B}_drawstat@{UB}

@{B}Syntax:@{UB} _drawstat \{*undo.undostack,*undo2.undostack\}

@{B}Description:@{UB}
* private *
Used only for visualisation of internal demo.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack
- *undo2.undostack    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _undo_c_add "_undo_c_add"

@{B}_undo_c_add@{UB}

@{B}Syntax:@{UB}  succ.l = _undo_c_add \{*undo.undostack,*ci.containerindex,cID.l,@dat_ptr.l,@dat_blength.l,@user_data1.l,@user_data2.l\}

@{B}Description:@{UB}
* private *
Add a new container to the undo stack.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack
- *ci.containerindex : container index
- cID.l              : container id
- dat_ptr.l          : pointer to data
- dat_blength.l      : length of data
- user_data1.l       : user data 1
- user_data2.l       : user data 2

@{B}Result:@{UB}      
- succ.l     : ...

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _undo_c_addstep "_undo_c_addstep"

@{B}_undo_c_addstep@{UB}

@{B}Syntax:@{UB}  succ.l = _undo_c_addstep \{*undo.undostack,*ci.containerindex,@stepID.l\}

@{B}Description:@{UB}
* private
Add a new step to the undo stack.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack
- *ci.containerindex    : container index
- stepID.l    : step id

@{B}Result:@{UB}      
- succ.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _undo_c_destroy "_undo_c_destroy"

@{B}_undo_c_destroy@{UB}

@{B}Syntax:@{UB} _undo_c_destroy \{*undo.undostack,*ci.containerindex\}

@{B}Description:@{UB}
* private *
Destroy (=free) a container of an undo stack, disk or ram type.

@{B}Inputs:@{UB}      
- *undo.undostack    : ???
- *ci.containerindex    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _undo_c_todisk "_undo_c_todisk"

@{B}_undo_c_todisk@{UB}

@{B}Syntax:@{UB}  succ.l = _undo_c_todisk \{*undo.undostack,*ci.containerindex\}

@{B}Description:@{UB}
* private *
Write a container of an undo stack to disk.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack
- *ci.containerindex    : index of the container

@{B}Result:@{UB}      
- succ.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _undo_check_disk "_undo_check_disk"

@{B}_undo_check_disk@{UB}

@{B}Syntax:@{UB} _undo_check_disk \{*undo.undostack,bdisk.l\}

@{B}Description:@{UB}
* private *
Check undo stack to provide a minimum amount of memory on disk.

@{B}Inputs:@{UB}      
- *undo.undostack  : pointer to undo stack
- bdisk.l        : bytes to guarantee on disk

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _undo_check_mem "_undo_check_mem"

@{B}_undo_check_mem@{UB}

@{B}Syntax:@{UB} _undo_check_mem \{*undo.undostack,bmem.l\}

@{B}Description:@{UB}
* private *
check undoengine to provide a minimum of bytes of memory.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack
- bmem.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _undo_check_steps "_undo_check_steps"

@{B}_undo_check_steps@{UB}

@{B}Syntax:@{UB} _undo_check_steps \{*undo.undostack\}

@{B}Description:@{UB}
* private *
Check undo stack and free undo steps above the maximum,

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _undo_collect_close "_undo_collect_close"

@{B}_undo_collect_close@{UB}

@{B}Syntax:@{UB} _undo_collect_close \{*undo.undostack\}

@{B}Description:@{UB}
* private
Close collect file.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _undo_collect_open "_undo_collect_open"

@{B}_undo_collect_open@{UB}

@{B}Syntax:@{UB}  succ.l = _undo_collect_open \{*undo.undostack\}

@{B}Description:@{UB}
* private
Open the collect file for small items.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack

@{B}Result:@{UB}      
- succ.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _undo_nextindex "_undo_nextindex"

@{B}_undo_nextindex@{UB}

@{B}Syntax:@{UB}  *ci.l = _undo_nextindex \{*undo.undostack\}

@{B}Description:@{UB}
* private *
Step to the next index and increase indexlist if necessary.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack

@{B}Result:@{UB}      
- *ci.containerindex     : pointer to an container omdex

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _undo_temp_free "_undo_temp_free"

@{B}_undo_temp_free@{UB}

@{B}Syntax:@{UB} _undo_temp_free \{\}

@{B}Description:@{UB}
* private
Free temporary buffer.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE undo_Config "undo_Config"

@{B}undo_Config@{UB}

@{B}Syntax:@{UB} undo_Config \{max_mem.l,max_disk.l,temp.s\}

@{B}Description:@{UB}
Set the global parameters.
NOTE: Unless you set max_disk=0, you need to specify a temp dir. The temp dir should NOT be the RAM Disk !
NOTE: The memory will be shared among all undo stacks.
NOTE: undo stacks might free containers BEFORE their step limit is reached, if the memory limit is exceeded.

@{B}Inputs:@{UB}      
- max_mem.l   : maximum memory used for all undo stacks
- max_disk.l  : maximum disk space used for all undo stacks
- temp.s      : path to the temporary directory

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE undo_Continue "undo_Continue"

@{B}undo_Continue@{UB}

@{B}Syntax:@{UB} undo_Continue \{*undo.undostack,@stepID.l\}

@{B}Description:@{UB}
Same like @{" undo_Start " link undo_Start}, but starts a new undo step only if the step ID is different. If the last step ID is the same, the function returns without doing anything.

@{B}Inputs:@{UB}      
- *undo.undostack : pointer to undo stack
- stepID.l        : free definable step identifier

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_Start " link undo_Start}, @{" undo_Stop " link undo_Stop}, @{" undo_Store " link undo_Store}




@ENDNODE
@NODE undo_Create "undo_Create"

@{B}undo_Create@{UB}

@{B}Syntax:@{UB}  *undo.l = undo_Create \{@maxsteps.l,@kickit.l\}

@{B}Description:@{UB}
Create a new undo stack and set the maximum number of undo steps kept.
If you ommit maxsteps or set it to -1, the undo stack will take as much steps as the memory settings (@{" undo_Config " link undo_Config}) allow.
NOTE: It is not allways wise to allow an infinite number of undo stacks, because multiple stacks might compete against each other. If you dont need really a lot of history, set it to a reasonable value (e.g. 10).

@{B}Inputs:@{UB}      
- maxsteps.l  : maximum number of undo steps to remember
- swapable.l    : ><0 allow to swap to disk (is default)
- kickit.l    : ???

@{B}Result:@{UB}      
- *undo.undostack     : pointer to an undo stack

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_Free " link undo_Free}




@ENDNODE
@NODE undo_Flush "undo_Flush"

@{B}undo_Flush@{UB}

@{B}Syntax:@{UB} undo_Flush \{*undo.undostack\}

@{B}Description:@{UB}
Free all containers of an undo stack.
After that, all undo steps on this undo stack are lost.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_FlushAll " link undo_FlushAll}




@ENDNODE
@NODE undo_FlushAll "undo_FlushAll"

@{B}undo_FlushAll@{UB}

@{B}Syntax:@{UB} undo_FlushAll \{\}

@{B}Description:@{UB}
Fush all undo stacks.
NOTE: This function calls @{" undo_Flush " link undo_Flush} for all undo stacks created.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_Flush " link undo_Flush}




@ENDNODE
@NODE undo_Free "undo_Free"

@{B}undo_Free@{UB}

@{B}Syntax:@{UB} undo_Free \{*undo.undostack\}

@{B}Description:@{UB}
Free undo stack and all containers.
NOTE: The pointer to the undo stack is not valid anymore after this call!

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_Create " link undo_Create}




@ENDNODE
@NODE undo_FreeAll "undo_FreeAll"

@{B}undo_FreeAll@{UB}

@{B}Syntax:@{UB} undo_FreeAll \{\}

@{B}Description:@{UB}
Free all undo stacks and undoengine.
NOTE: This function is called on autoexit.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_Free " link undo_Free}




@ENDNODE
@NODE undo_GetContainer "undo_GetContainer"

@{B}undo_GetContainer@{UB}

@{B}Syntax:@{UB}  succ.l = undo_GetContainer \{*undo.undostack\}

@{B}Description:@{UB}
Test if there is another container waiting within this undo step.
NOTE: This function is needed if you are going to undo something.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack

@{B}Result:@{UB}      
- succ.l     : -1 if there is a container, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE undo_GetContainerData "undo_GetContainerData"

@{B}undo_GetContainerData@{UB}

@{B}Syntax:@{UB}  succ.l = undo_GetContainerData \{*undo.undostack,dest_ptr.l,max_blength.l\}

@{B}Description:@{UB}
Copy the current container data block to a memory pointer.
This function is more efficient than @{" undo_GetContainerDataPtr " link undo_GetContainerDataPtr} and a manual copy of the data.

@{B}Inputs:@{UB}      
- *undo.undostack  : pointer to undo stack
- dest_ptr.l       : memory pointer
- max_blength.l    : maximum byte length to copy

@{B}Result:@{UB}      
- succ.l     : -1 if all data was copied, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_GetContainer " link undo_GetContainer}




@ENDNODE
@NODE undo_GetContainerDataPtr "undo_GetContainerDataPtr"

@{B}undo_GetContainerDataPtr@{UB}

@{B}Syntax:@{UB}  data_ptr.l = undo_GetContainerDataPtr \{*undo.undostack\}

@{B}Description:@{UB}
Get the pointer to the current container data block (after @{" undo_GetContainer " link undo_GetContainer}).
NOTE: This requres the undo.inlcude to hold the data lock in memory for you. If you just copy the data somewhere else, it is more efficient to call @{" undo_GetContainerData " link undo_GetContainerData}.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack

@{B}Result:@{UB}      
- data_ptr.l     : pointer to data block

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_GetContainer " link undo_GetContainer}




@ENDNODE
@NODE undo_GetContainerDataSize "undo_GetContainerDataSize"

@{B}undo_GetContainerDataSize@{UB}

@{B}Syntax:@{UB}  blength.l = undo_GetContainerDataSize \{*undo.undostack\}

@{B}Description:@{UB}
Get the byte length of the current container data block.
NOTE: If the container does not contain a data block, the length will be 0.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack

@{B}Result:@{UB}      
- blength.l     : byte length

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_GetContainer " link undo_GetContainer}




@ENDNODE
@NODE undo_GetContainerID "undo_GetContainerID"

@{B}undo_GetContainerID@{UB}

@{B}Syntax:@{UB}  cID.w = undo_GetContainerID \{*undo.undostack\}

@{B}Description:@{UB}
Get the container id of the current container (after @{" undo_GetContainer " link undo_GetContainer}).

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack

@{B}Result:@{UB}      
- cID.w     : container identifier

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_GetContainer " link undo_GetContainer}




@ENDNODE
@NODE undo_GetContainerUserData1 "undo_GetContainerUserData1"

@{B}undo_GetContainerUserData1@{UB}

@{B}Syntax:@{UB}  userdata.l = undo_GetContainerUserData1 \{*undo.undostack\}

@{B}Description:@{UB}
Get the user data 1 of the current container.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack

@{B}Result:@{UB}      
- userdata.l     : long word

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_GetContainer " link undo_GetContainer}




@ENDNODE
@NODE undo_GetContainerUserData2 "undo_GetContainerUserData2"

@{B}undo_GetContainerUserData2@{UB}

@{B}Syntax:@{UB}  userdata.l = undo_GetContainerUserData2 \{*undo.undostack\}

@{B}Description:@{UB}
Get the user data 2 of the current container.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack

@{B}Result:@{UB}      
- userdata.l     : long word

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_GetContainer " link undo_GetContainer}




@ENDNODE
@NODE undo_GetNumChanges "undo_GetNumChanges"

@{B}undo_GetNumChanges@{UB}

@{B}Syntax:@{UB}  changes.l = undo_GetNumChanges \{*undo.undostack\}

@{B}Description:@{UB}
Get the number of changes made on the given undo stack.
NOTE: The undo.include is keeping track of the number of changes based on the number of undo steps.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack

@{B}Result:@{UB}      
- changes.l     : number of changes

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_GetNumGlobalChanges " link undo_GetNumGlobalChanges}




@ENDNODE
@NODE undo_GetNumGlobalChanges "undo_GetNumGlobalChanges"

@{B}undo_GetNumGlobalChanges@{UB}

@{B}Syntax:@{UB}  changes.l = undo_GetNumGlobalChanges \{\}

@{B}Description:@{UB}
Get the global number of changes. This prevents you from going through all undo stacks and check them if they have some changes still pending.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- changes.l     : number of changes

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_GetNumChanges " link undo_GetNumChanges}




@ENDNODE
@NODE undo_GetNumSteps "undo_GetNumSteps"

@{B}undo_GetNumSteps@{UB}

@{B}Syntax:@{UB}  n.l = undo_GetNumSteps \{*undo.undostack\}

@{B}Description:@{UB}
Return the number of undo steps on the undo stack.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack

@{B}Result:@{UB}      
- n.l     : number of undo steps on undo stack

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_GetStepID " link undo_GetStepID}




@ENDNODE
@NODE undo_GetStepID "undo_GetStepID"

@{B}undo_GetStepID@{UB}

@{B}Syntax:@{UB}  stepID.l = undo_GetStepID \{*undo.undostack,@sindex.l\}

@{B}Description:@{UB}
Return the stepID of an undo step on the undo stack.
If sindex is ommitted or 0, the latest undo step identifier is returned.
If sindex>0, the undo step ifentifier of previous steps is returned.
If sindex>number of steps, -1 is returned.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack
- sindex.l           : index of undo step (0=latest step)

@{B}Result:@{UB}      
- stepID.l     : undo step identifier

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_GetNumSteps " link undo_GetNumSteps}




@ENDNODE
@NODE undo_SetGlobalSaved "undo_SetGlobalSaved"

@{B}undo_SetGlobalSaved@{UB}

@{B}Syntax:@{UB} undo_SetGlobalSaved \{\}

@{B}Description:@{UB}
Tell all undo stacks that their application data was saved.
NOTE: This resets the "number of changes" counter of all undo stacks to 0.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_GetNumGlobalChanges " link undo_GetNumGlobalChanges}




@ENDNODE
@NODE undo_SetSaved "undo_SetSaved"

@{B}undo_SetSaved@{UB}

@{B}Syntax:@{UB} undo_SetSaved \{*undo.undostack\}

@{B}Description:@{UB}
Tell the undo stack that the application data was saved.
NOTE: This function just resets the "number of changes" counter to 0.
NOTE: Usually, you do an "changes are not saved!" type of requester if the user wants to quit your application and undo_changes is bigger than 0. If the user saves the applicaion data to disk, you might want to reset the number of changes to 0.

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_GetNumChanges " link undo_GetNumChanges}




@ENDNODE
@NODE undo_Start "undo_Start"

@{B}undo_Start@{UB}

@{B}Syntax:@{UB} undo_Start \{*undo.undostack,@stepID.l\}

@{B}Description:@{UB}
Start a new undo step on the given undo stack, ready to take containers.
NOTE: Do not create unnecessary undo steps that contain no containers. It does not harm the undo stack, but an 'undo' will have no effect.

@{B}Inputs:@{UB}      
- *undo.undostack  : pointer to undo stack
- stepID.l       : free definable step identifier (avoid -1 for use with undo_GetStepID)

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_Stop " link undo_Stop}, @{" undo_Continue " link undo_Continue}, @{" undo_Store " link undo_Store}




@ENDNODE
@NODE undo_Stop "undo_Stop"

@{B}undo_Stop@{UB}

@{B}Syntax:@{UB} undo_Stop \{*undo.undostack\}

@{B}Description:@{UB}
Stop the current undo step. Subsequent calls to @{" undo_Store " link undo_Store} will be ignored.
NOTE: This function is useful if your undo step contains already all data needed to restore, and further manipulations of the application data dont matter (but still do an @{" undo_Store " link undo_Store}).

@{B}Inputs:@{UB}      
- *undo.undostack    : pointer to undo stack

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_Start " link undo_Start}, @{" undo_Store " link undo_Store}, @{" undo_Continue " link undo_Continue}




@ENDNODE
@NODE undo_Store "undo_Store"

@{B}undo_Store@{UB}

@{B}Syntax:@{UB} undo_Store \{*undo.undostack,cID.l,@dat_ptr.l,@dat_blength.l,@user_data1.l,@user_data2.l\}

@{B}Description:@{UB}
Store some information and/or data block into a new container on the undo stack.
NOTE: @{" undo_Start " link undo_Start} must have been called before to define a new undo step. One undo step can contain multiple containers!
NOTE: This function is always needed BEFORE you are going to manipluate your application data and should rescue everything that will be destroyed.

@{B}Inputs:@{UB}      
- *undo.undostack : pointer to undo stack
- cID.w            : free definable container identifier
- dat_ptr.l         : pointer to data, can be 0
- dat_blength.l   : length of data, can be 0
- user_data1.l    : free definable long word
- user_data2.l    : free definable long word
- cID.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" undo_Start " link undo_Start}, @{" undo_Stop " link undo_Stop}, @{" undo_Continue " link undo_Continue}




@ENDNODE
