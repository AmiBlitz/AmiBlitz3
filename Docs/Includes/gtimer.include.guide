@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "gtimer.include"

@{B}gtimer.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" gtimer_Check " link gtimer_Check} 
   @{" gtimer_Free " link gtimer_Free} 
   @{" gtimer_GetSigFlag " link gtimer_GetSigFlag} 
   @{" gtimer_Init " link gtimer_Init} 
   @{" gtimer_SetFreq " link gtimer_SetFreq} 

@{B}Private Function Index:@{UB}

   @{" _gtimer_Abort " link _gtimer_Abort} 
   @{" _gtimer_Start " link _gtimer_Start} 

@{B}Public Macro Index:@{UB}

   @{" !gtimer_GetSigFlag " link !gtimer_GetSigFlag} 

@ENDNODE
@NODE !gtimer_GetSigFlag "!gtimer_GetSigFlag"

@{B}!gtimer_GetSigFlag@{UB}

@{B}Syntax:@{UB} !gtimer_GetSigFlag

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} timer_gui.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 30/12/2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB}  Amiblitz2.4

@{B}Purpose:@{UB}
The purpose of this include is to do timing for GUI output, like a spectrum meter in WinAmp.

@{B}Abstract:@{UB}
The accuracy my not be very high, so do not use this e.g. to time musical notes or make benchmarks.
The advantage over the vvblank.inlcude is, that your program is not sleeping till the next tick has passed, so you can react on user input or other signals immediately, not with the delay of one tick.
This make this timer_gui.inlcude suitable for applications, while the vvblank.include does well for frame-by-frame based games.

The timer_gui.inlcude works simple:
Call @{" gtimer_Init " link gtimer_Init}. Get the signal flag with @{" gtimer_GetSigFlag " link gtimer_GetSigFlag} and add this signal flag to your signal flags you are waiting for with Wait_().
Then, everytime you receive this signal, call @{" gtimer_Check " link gtimer_Check}. It will return -1 if the desired amount of time has passed, 0 otherwise (normally it has passed of course, if you receive this signal).
If your program spent too much time in another function and you call this too late, do not mind, @{" gtimer_Check " link gtimer_Check} will return -1 and continue normally.

Note: If you want to time a game, better use the vvblank.include

@{B}User Constants:@{UB}  none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    vvblank.include




@ENDNODE
@NODE _gtimer_Abort "_gtimer_Abort"

@{B}_gtimer_Abort@{UB}

@{B}Syntax:@{UB} _gtimer_Abort \{\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _gtimer_Start "_gtimer_Start"

@{B}_gtimer_Start@{UB}

@{B}Syntax:@{UB} _gtimer_Start \{\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE gtimer_Check "gtimer_Check"

@{B}gtimer_Check@{UB}

@{B}Syntax:@{UB}  succ.l =  gtimer_Check \{\}

@{B}Description:@{UB}
Check if the time for one frame has already passed.
NOTE: You can do a bussy loop to check for a new frame, but it is highly recommended to put the timer signal flag (@{" gtimer_GetSigFlag " link gtimer_GetSigFlag}) into your Wait_() function to avoid unnecessary CPU load. Call this function only, if you received this signal.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- succ.l     : -1 if the timer for one frame has passed, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE gtimer_Free "gtimer_Free"

@{B}gtimer_Free@{UB}

@{B}Syntax:@{UB} gtimer_Free \{\}

@{B}Description:@{UB}
Close the timer.
NOTE: This is an autoexit function, you do not have to call this by your own.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE gtimer_GetSigFlag "gtimer_GetSigFlag"

@{B}gtimer_GetSigFlag@{UB}

@{B}Syntax:@{UB}  sigflag.l =  gtimer_GetSigFlag \{\}

@{B}Description:@{UB}
Get the signal flag for use with Wait_().

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- sigflag.l     : signal flag

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE gtimer_Init "gtimer_Init"

@{B}gtimer_Init@{UB}

@{B}Syntax:@{UB}  succ.l = gtimer_Init \{@vfreq.f,@device.s\}

@{B}Description:@{UB}
Open the timer.

@{B}Inputs:@{UB}      
- vfreq.f    : desired frame rate [Hz]
- device.s   : device name to use (default is "timer.device")

@{B}Result:@{UB}      
- succ.l     : -1 if the timer was created, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE gtimer_SetFreq "gtimer_SetFreq"

@{B}gtimer_SetFreq@{UB}

@{B}Syntax:@{UB} gtimer_SetFreq \{@vfreq.f\}

@{B}Description:@{UB}
Re-Configure the vertical frequency in Hz after @{" gtimer_Init " link gtimer_Init}.
Default vfreq is 50Hz, which is already ok for most graphical effects.
Many visual effects need only 25Hz to look smooth.

@{B}Inputs:@{UB}      
- vfreq.f    : desired frame rate [Hz]

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
