@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "ntui.include"

@{B}ntui.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" ntui_BeginHGroup " link ntui_BeginHGroup} 
   @{" ntui_BeginMenuBar " link ntui_BeginMenuBar} 
   @{" ntui_BeginVGroup " link ntui_BeginVGroup} 
   @{" ntui_Bind " link ntui_Bind} 
   @{" ntui_BindByID " link ntui_BindByID} 
   @{" ntui_CauseEvent " link ntui_CauseEvent} 
   @{" ntui_ClearFlags " link ntui_ClearFlags} 
   @{" ntui_CreateEngine " link ntui_CreateEngine} 
   @{" ntui_CreateWindow " link ntui_CreateWindow} 
   @{" ntui_Draw " link ntui_Draw} 
   @{" ntui_Enable " link ntui_Enable} 
   @{" ntui_EndGroup " link ntui_EndGroup} 
   @{" ntui_EndWindow " link ntui_EndWindow} 
   @{" ntui_FlushEvents " link ntui_FlushEvents} 
   @{" ntui_FreeEngine " link ntui_FreeEngine} 
   @{" ntui_FreeWindow " link ntui_FreeWindow} 
   @{" ntui_FreeWindowByID " link ntui_FreeWindowByID} 
   @{" ntui_GetAttr " link ntui_GetAttr} 
   @{" ntui_GetAttrByID " link ntui_GetAttrByID} 
   @{" ntui_GetEvent " link ntui_GetEvent} 
   @{" ntui_GetEventNotify " link ntui_GetEventNotify} 
   @{" ntui_GetObjectByID " link ntui_GetObjectByID} 
   @{" ntui_GetSigFlag " link ntui_GetSigFlag} 
   @{" ntui_GetStringByID " link ntui_GetStringByID} 
   @{" ntui_GetValueByID " link ntui_GetValueByID} 
   @{" ntui_GetWindowByID " link ntui_GetWindowByID} 
   @{" ntui_HideAppIcon " link ntui_HideAppIcon} 
   @{" ntui_HideWindow " link ntui_HideWindow} 
   @{" ntui_HideWindowByID " link ntui_HideWindowByID} 
   @{" ntui_HitObject " link ntui_HitObject} 
   @{" ntui_Iconify " link ntui_Iconify} 
   @{" ntui_PopUp " link ntui_PopUp} 
   @{" ntui_Redraw " link ntui_Redraw} 
   @{" ntui_Refresh " link ntui_Refresh} 
   @{" ntui_RemClip " link ntui_RemClip} 
   @{" ntui_SetAttr " link ntui_SetAttr} 
   @{" ntui_SetAttrByID " link ntui_SetAttrByID} 
   @{" ntui_SetAttrs " link ntui_SetAttrs} 
   @{" ntui_SetBorder " link ntui_SetBorder} 
   @{" ntui_SetClip " link ntui_SetClip} 
   @{" ntui_SetFlags " link ntui_SetFlags} 
   @{" ntui_SetFocus " link ntui_SetFocus} 
   @{" ntui_SetMaxSize " link ntui_SetMaxSize} 
   @{" ntui_SetMinSize " link ntui_SetMinSize} 
   @{" ntui_SetString " link ntui_SetString} 
   @{" ntui_SetStringByID " link ntui_SetStringByID} 
   @{" ntui_SetUserID " link ntui_SetUserID} 
   @{" ntui_SetValue " link ntui_SetValue} 
   @{" ntui_SetValueByID " link ntui_SetValueByID} 
   @{" ntui_ShowAppIcon " link ntui_ShowAppIcon} 
   @{" ntui_ShowBubble " link ntui_ShowBubble} 
   @{" ntui_ShowWindow " link ntui_ShowWindow} 
   @{" ntui_ShowWindowByID " link ntui_ShowWindowByID} 
   @{" ntui_Space " link ntui_Space} 
   @{" ntui_String2UserID " link ntui_String2UserID} 

@{B}Private Function Index:@{UB}

   @{" _ntui_CRC32 " link _ntui_CRC32} 
   @{" _ntui_CreateObject " link _ntui_CreateObject} 
   @{" _ntui_DrawGroup " link _ntui_DrawGroup} 
   @{" _ntui_DrawWindow " link _ntui_DrawWindow} 
   @{" _ntui_Free " link _ntui_Free} 
   @{" _ntui_FreeEngine " link _ntui_FreeEngine} 
   @{" _ntui_FreeObject " link _ntui_FreeObject} 
   @{" _ntui_FreeTempBuffer " link _ntui_FreeTempBuffer} 
   @{" _ntui_FreeWindow " link _ntui_FreeWindow} 
   @{" _ntui_GetBGTuiPen " link _ntui_GetBGTuiPen} 
   @{" _ntui_GetMinSize " link _ntui_GetMinSize} 
   @{" _ntui_GetTextLength " link _ntui_GetTextLength} 
   @{" _ntui_GetTextLengthEx " link _ntui_GetTextLengthEx} 
   @{" _ntui_GetTuiPen " link _ntui_GetTuiPen} 
   @{" _ntui_HandleEngine " link _ntui_HandleEngine} 
   @{" _ntui_HandleEvent " link _ntui_HandleEvent} 
   @{" _ntui_Init " link _ntui_Init} 
   @{" _ntui_Layout " link _ntui_Layout} 
   @{" _ntui_ObtainTempBuffer " link _ntui_ObtainTempBuffer} 
   @{" _ntui_OpenFont " link _ntui_OpenFont} 
   @{" _ntui_Print " link _ntui_Print} 
   @{" _ntui_PropagateBind " link _ntui_PropagateBind} 
   @{" _ntui_ReleaseTempBuffer " link _ntui_ReleaseTempBuffer} 
   @{" _ntui_SetActive " link _ntui_SetActive} 
   @{" _ntui_SetFocus " link _ntui_SetFocus} 
   @{" _ntui_SetFont " link _ntui_SetFont} 
   @{" _ntui_SetMover " link _ntui_SetMover} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} ntui.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 06/01/2009

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB}  Amiblitz3

@{B}Purpose:@{UB}
Implementation of NTUI Toolkit (New Thilo's User Interface)

@{B}Abstract:@{UB}
* no abstract available *

@{B}User Constants:@{UB}
#TUIINQUEUE   = 16 ; define the maximum events in input queue

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_CRC32 "_ntui_CRC32"

@{B}_ntui_CRC32@{UB}

@{B}Syntax:@{UB}  result.l = _ntui_CRC32 \{sourceaddr.l,blength.l\}

@{B}Description:@{UB}
private: calculate the CRC32 hash-value out of a memory block.

@{B}Inputs:@{UB}      
- sourceaddr.l    : address of memory block
- blength.l       : byte length of memory block

@{B}Result:@{UB}      
- result.l        : CRC32 hash value

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_CreateObject "_ntui_CreateObject"

@{B}_ntui_CreateObject@{UB}

@{B}Syntax:@{UB}  result.l = _ntui_CreateObject \{typeID.l,sizeof_obj.l,notify.l,help.s,flags.l,userID.l\}

@{B}Description:@{UB}
private: generic create function for every tui object. This is called by every tuiObject creation function.
This function allocates the memory for the tuiObject and fills out the mandatory fields.
It also links the object according the buildHelper and updates the buildHelper.

@{B}Inputs:@{UB}      
- typeID.l      : typeID of the tuiObject
- sizeof_obj.l  : size of the tuiObject specific structure
- notify.l      : notify value
- help.s        : short help text for this tuiObject
- flags.l       : initial tuiFlags (#TUIF_...)
- userID.l      : userID to find the object later

@{B}Result:@{UB}      
- result.l      : pointer to the tuiObject or NULL if failed

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_DrawGroup "_ntui_DrawGroup"

@{B}_ntui_DrawGroup@{UB}

@{B}Syntax:@{UB} _ntui_DrawGroup \{*tuiGroup.tuiGroup,*rp.RastPort\}

@{B}Description:@{UB}
private: Draw a tuiGroup object into the given rastport.

@{B}Inputs:@{UB}      
- *tuiGroup.tuiGroup : tuiGroup
- *rp.RastPort       : rastport

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_DrawWindow "_ntui_DrawWindow"

@{B}_ntui_DrawWindow@{UB}

@{B}Syntax:@{UB} _ntui_DrawWindow \{*tuiWindow.tuiWindow,*rp.RastPort\}

@{B}Description:@{UB}
private: Draw the content of a tuiWindow into the given RastPort.

@{B}Inputs:@{UB}      
- *tuiWindow.tuiWindow : tuiWindow
- *rp.RastPort         : rastport

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_Free "_ntui_Free"

@{B}_ntui_Free@{UB}

@{B}Syntax:@{UB} _ntui_Free \{\}

@{B}Description:@{UB}
private: free ntui.library

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_FreeEngine "_ntui_FreeEngine"

@{B}_ntui_FreeEngine@{UB}

@{B}Syntax:@{UB} _ntui_FreeEngine \{*tuiEngine.tuiEngine\}

@{B}Description:@{UB}
private: free the tuiEngine

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_FreeObject "_ntui_FreeObject"

@{B}_ntui_FreeObject@{UB}

@{B}Syntax:@{UB} _ntui_FreeObject \{*tui.tuiObject\}

@{B}Description:@{UB}
private: free a tui object

@{B}Inputs:@{UB}      
- *tui.tuiObject    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_FreeTempBuffer "_ntui_FreeTempBuffer"

@{B}_ntui_FreeTempBuffer@{UB}

@{B}Syntax:@{UB} _ntui_FreeTempBuffer \{\}

@{B}Description:@{UB}
private: Strictly private function. Called automatically on @{" _ntui_Free " link _ntui_Free}.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_FreeWindow "_ntui_FreeWindow"

@{B}_ntui_FreeWindow@{UB}

@{B}Syntax:@{UB} _ntui_FreeWindow \{*tuiWindow.tuiWindow\}

@{B}Description:@{UB}
private: free a tuiWindow

@{B}Inputs:@{UB}      
- *tuiWindow.tuiWindow    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_GetBGTuiPen "_ntui_GetBGTuiPen"

@{B}_ntui_GetBGTuiPen@{UB}

@{B}Syntax:@{UB}  result.l = _ntui_GetBGTuiPen \{*tui.tuiObject\}

@{B}Description:@{UB}
private: get the background pen for this ntui object */

@{B}Inputs:@{UB}      
- *tui.tuiObject : tuiObject

@{B}Result:@{UB}      
- result.l       : tuiPen of the background (note: not an AmigaOS pen!)

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_GetMinSize "_ntui_GetMinSize"

@{B}_ntui_GetMinSize@{UB}

@{B}Syntax:@{UB}  result.l = _ntui_GetMinSize \{*tui.tuiObject,*rp.RastPort\}

@{B}Description:@{UB}
private: calculate the minimum size needed by the tui object

@{B}Inputs:@{UB}      
- *tui.tuiObject  : ???
- *rp.RastPort    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_GetTextLength "_ntui_GetTextLength"

@{B}_ntui_GetTextLength@{UB}

@{B}Syntax:@{UB}  result.l = _ntui_GetTextLength \{*tuiEngine.tuiEngine,*text.str,flags.l,*rp.RastPort\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine : ???
- *text.str            : ???
- flags.l              : ???
- *rp.RastPort         : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_GetTextLengthEx "_ntui_GetTextLengthEx"

@{B}_ntui_GetTextLengthEx@{UB}

@{B}Syntax:@{UB} _ntui_GetTextLengthEx \{*tuiEngine.tuiEngine,*text.str,*tx.TextExtent,flags.l,*rp.RastPort\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine : ???
- *text.str            : ???
- *tx.TextExtent       : ???
- flags.l              : ???
- *rp.RastPort         : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_GetTuiPen "_ntui_GetTuiPen"

@{B}_ntui_GetTuiPen@{UB}

@{B}Syntax:@{UB}  result.l = _ntui_GetTuiPen \{*tuiEngine.tuiEngine,argb.l,@tuipen.l\}

@{B}Description:@{UB}
private

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine    : ???
- argb.l    : ???
- tuipen.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_HandleEngine "_ntui_HandleEngine"

@{B}_ntui_HandleEngine@{UB}

@{B}Syntax:@{UB} result.l = _ntui_HandleEngine \{*tuiEngine.tuiEngine,*tuiEvent.tuiEvent\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine    : ???
- *tuiEvent.tuiEvent    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_HandleEvent "_ntui_HandleEvent"

@{B}_ntui_HandleEvent@{UB}

@{B}Syntax:@{UB}  result.w = _ntui_HandleEvent \{*tui.tuiObject,*tuiEvent.tuiEvent\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tui.tuiObject    : ???
- *tuiEvent.tuiEvent    : ???

@{B}Result:@{UB}      
- result.w     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_Init "_ntui_Init"

@{B}_ntui_Init@{UB}

@{B}Syntax:@{UB}  result.l = _ntui_Init \{\}

@{B}Description:@{UB}
private: init ntui.library

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : ???
* Init CRC32 checksum Lookup table */

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_Layout "_ntui_Layout"

@{B}_ntui_Layout@{UB}

@{B}Syntax:@{UB} _ntui_Layout \{*tui.tuiObject,*rp.RastPort,@x.l,@y.l,@width.l,@height.l\}

@{B}Description:@{UB}
private: calculate the layout of the tui object given the dimensions.

@{B}Inputs:@{UB}      
- *tui.tuiObject    : ???
- *rp.RastPort    : ???
- x.l    : ???
- y.l    : ???
- width.l    : ???
- height.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_ObtainTempBuffer "_ntui_ObtainTempBuffer"

@{B}_ntui_ObtainTempBuffer@{UB}

@{B}Syntax:@{UB}  result.l = _ntui_ObtainTempBuffer \{byteSize.l\}

@{B}Description:@{UB}
Get some temporary memory from NTUI. Call @{" _ntui_ReleaseTempBuffer " link _ntui_ReleaseTempBuffer} if you are done.
Don't hold this memory for long time. The memory is shared among all NTUI programs running, and holding this memory will block other programs.

@{B}Inputs:@{UB}      
- byteSize.l    : size in bytes required

@{B}Result:@{UB}      
- result.l      : memory buffer of at least byteSize size

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_OpenFont "_ntui_OpenFont"

@{B}_ntui_OpenFont@{UB}

@{B}Syntax:@{UB}  *font.l = _ntui_OpenFont \{fontname.s,size.l,style.l,*scr.Screen\}

@{B}Description:@{UB}
private: open a font for later use in NTUI

@{B}Inputs:@{UB}      
- fontname.s   : name of the font (e.g. "topaz.font")
- size.l       : size of the font (e.g. 8)
- style.l      : style flags of the font (e.g. #FSF_BOLD)
- *scr.Screen  : optional screen from were to get the default if this fails

@{B}Result:@{UB}      
- *font.TextFont : font handle

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_Print "_ntui_Print"

@{B}_ntui_Print@{UB}

@{B}Syntax:@{UB} _ntui_Print \{*tuiEngine.tuiEngine,*text.str,x1.l,y1.l,x2.l,y2.l,flags.l,*rp.RastPort,fgTuiPen.l,bgTuiPen.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine    : ???
- *text.str    : ???
- x1.l    : ???
- y1.l    : ???
- x2.l    : ???
- y2.l    : ???
- flags.l    : ???
- *rp.RastPort    : ???
- fgTuiPen.l    : ???
- bgTuiPen.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_PropagateBind "_ntui_PropagateBind"

@{B}_ntui_PropagateBind@{UB}

@{B}Syntax:@{UB} _ntui_PropagateBind \{*tuiMaster.tuiObject\}

@{B}Description:@{UB}
private

@{B}Inputs:@{UB}      
- *tuiMaster.tuiObject    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_ReleaseTempBuffer "_ntui_ReleaseTempBuffer"

@{B}_ntui_ReleaseTempBuffer@{UB}

@{B}Syntax:@{UB} _ntui_ReleaseTempBuffer \{\}

@{B}Description:@{UB}
private: Release the temporary buffer obtained by @{" _ntui_ObtainTempBuffer " link _ntui_ObtainTempBuffer}.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_SetActive "_ntui_SetActive"

@{B}_ntui_SetActive@{UB}

@{B}Syntax:@{UB} _ntui_SetActive \{*tuiWindow.tuiWindow,*tui.tuiObject\}

@{B}Description:@{UB}
private

@{B}Inputs:@{UB}      
- *tuiWindow.tuiWindow    : ???
- *tui.tuiObject    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_SetFocus "_ntui_SetFocus"

@{B}_ntui_SetFocus@{UB}

@{B}Syntax:@{UB} _ntui_SetFocus \{*tuiWindow.tuiWindow,*tui.tuiObject\}

@{B}Description:@{UB}
private

@{B}Inputs:@{UB}      
- *tuiWindow.tuiWindow    : ???
- *tui.tuiObject    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_SetFont "_ntui_SetFont"

@{B}_ntui_SetFont@{UB}

@{B}Syntax:@{UB}  result.l = _ntui_SetFont \{*tuiEngine.tuiEngine,flags.l,@*rp.RastPort\}

@{B}Description:@{UB}
private: select a font from the given flags and optionally attach it to the rastport

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine : tuiEngine
- flags.l              : tuiFlags
- *rp.RastPort         : a RastPort

@{B}Result:@{UB}      
- result.l             : tuiFont index

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _ntui_SetMover "_ntui_SetMover"

@{B}_ntui_SetMover@{UB}

@{B}Syntax:@{UB} _ntui_SetMover \{*tuiWindow.tuiWindow,*tui.tuiObject\}

@{B}Description:@{UB}
private

@{B}Inputs:@{UB}      
- *tuiWindow.tuiWindow    : ???
- *tui.tuiObject    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_BeginHGroup "ntui_BeginHGroup"

@{B}ntui_BeginHGroup@{UB}

@{B}Syntax:@{UB}  *tuiGroup.l = ntui_BeginHGroup \{wrap.l,@title.s,@flags.l,@userID.l\}

@{B}Description:@{UB}
Same as @{" ntui_BeginVGroup " link ntui_BeginVGroup}, but sub-tuiObjects are arranged horizontally.

@{B}Inputs:@{UB}      
- wrap.l    : maximum number of tuiObject in-line before wrapping occures
- title.s   : optional title of the group (group will get a frame then)
- flags.l   : flags to control the group
- userID.l  : userID of the group

@{B}Result:@{UB}      
- *tuiGroup.tuiGroup  : pointer to the created group

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_BeginMenuBar "ntui_BeginMenuBar"

@{B}ntui_BeginMenuBar@{UB}

@{B}Syntax:@{UB}  *tuiGroup.l = ntui_BeginMenuBar \{\}

@{B}Description:@{UB}
Same as @{" ntui_BeginHGroup " link ntui_BeginHGroup}, but the sub-tuiObjects will work as a menubar that might appear in the screen-titlebar.
* Typically, you will create ntui_MenuTitle objects within this group.

@{B}Inputs:@{UB}      
- wrap.l    : maximum number of tuiObject in-line before wrapping occures
- title.s   : optional title of the group (group will get a frame then)
- flags.l   : flags to control the group
- userID.l  : userID of the group

@{B}Result:@{UB}      
- *tuiGroup.tuiGroup  : pointer to the created group

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_BeginVGroup "ntui_BeginVGroup"

@{B}ntui_BeginVGroup@{UB}

@{B}Syntax:@{UB}  *tuiGroup.l = ntui_BeginVGroup \{wrap.l,@title.s,@flags.l,@userID.l\}

@{B}Description:@{UB}
Begin a new tuiGroup that arranges its sub-tuiObjects vertically. After all sub-tuiObjects are created, you must call @{" ntui_EndGroup " link ntui_EndGroup}.
Note: a suitable parent object must have been created before you can call this function, such as another tuiGroup or tuiWindow.
Note: a value of 0 or a negativ number for wrapping will switch wrapping off. All sub-tuiObjects will be vertically in-line.

@{B}Inputs:@{UB}      
- wrap.l    : maximum number of tuiObject in-line before wrapping occures
- title.s   : optional title of the group (group will get a frame then)
- flags.l   : flags to control the group
- userID.l  : userID of the group

@{B}Result:@{UB}      
- *tuiGroup.tuiGroup  : pointer to the created group

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_Bind "ntui_Bind"

@{B}ntui_Bind@{UB}

@{B}Syntax:@{UB} ntui_Bind \{*tuiMaster.tuiObject,*tuiSlave.tuiObject\}

@{B}Description:@{UB}
Bind (connect) the two tuiObjects.
Master and Slave are only important during the call of this function and determines from which tuiObject to take the initial paramters.
* Lateron, the two tuiObject will stay synchron, means a change on one of the tuiObjects will case a change on the other tuiObject.
* Note: Which parameters will be synchronized is hardcoded in the tuiObject. E.g. if you bind a horizonal scroller with a vertical scroller, nothing will happen since they change different parameters (vertical vs. horizontal scroll offset).
* Note: If you bind A+B, and B+C ,A is automatically binded with C too.
* Note: The typical usage is to bind a custom view with a horizontal and vertical scroller. Once they are binded, you only have to take care about the custom view, and the scrollers will follow all changes.

@{B}Inputs:@{UB}      
- *tuiMaster.tuiObject : first tuiObject
- *tuiSlave.tuiObject  : second tuiObject

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_BindByID "ntui_BindByID"

@{B}ntui_BindByID@{UB}

@{B}Syntax:@{UB} ntui_BindByID \{*tui.tuiObject,masterUserID.l,slaveUserID.l\}

@{B}Description:@{UB}
Same like @{" ntui_Bind " link ntui_Bind}, but takes the UserID for input.

@{B}Inputs:@{UB}      
- *tui.tuiObject : parent tuiObject, usually the tuiWindow
- masterUserID.l : UserID of the first tuiObject
- slaveUserID.l  : UserID of the second tuiObject

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_CauseEvent "ntui_CauseEvent"

@{B}ntui_CauseEvent@{UB}

@{B}Syntax:@{UB}  result.l = ntui_CauseEvent \{notify.l,*tuiWindow.tuiWindow,@*tuiObject.tuiObject,@x.l,@y.l,@width.l,@height.l\}

@{B}Description:@{UB}
Cause an event to happen manually. The event will be passed to the tuiEngines input queue.

@{B}Inputs:@{UB}      
- notify.l               : notify value
- *tuiWindow.tuiWindow   : tuiWindow of the event
- *tuiObject.tuiObject   : tuiObject of the event (if any)
- x/y.l                  : x/y position of event
- width.l                : ???
- height.l               : ???
- x.l    : ???

@{B}Result:@{UB}      
- result.l               : pointer to created tuiEvent struture

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_ClearFlags "ntui_ClearFlags"

@{B}ntui_ClearFlags@{UB}

@{B}Syntax:@{UB} ntui_ClearFlags \{flags.l,@nochildren.l,@*tui.tuiObject\}

@{B}Description:@{UB}
Reset flags of a tui object

@{B}Inputs:@{UB}      
- flags.l        : tuiFlags to reset (#TUIF_...)
- nochildren.l   : if false, the flags are recursively set for all its children tuiObjects
- *tui.tuiObject : tuiObject, if not during build-time

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_CreateEngine "ntui_CreateEngine"

@{B}ntui_CreateEngine@{UB}

@{B}Syntax:@{UB}  result.l = ntui_CreateEngine \{appName.s,@arexxPort.s,@appMenu.s,@appIcon.s,@pubname.s,@*scr.Screen\}

@{B}Description:@{UB}
* create a new tui engine */

@{B}Inputs:@{UB}      
- appname.s    : name of the application
- menuname.s   : optional name for the Workbench App Menu
- icon.s       : optional icon that serves as an app icon
- pubname.s    : optional pubscreen name to popup on
- *scr.Screen  : optional screen pointer to popup on
- appName.s    : ???
- arexxPort.s    : ???
- appMenu.s    : ???
- appIcon.s    : ???

@{B}Result:@{UB}      
- result.l     : tuiEngine

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_CreateWindow "ntui_CreateWindow"

@{B}ntui_CreateWindow@{UB}

@{B}Syntax:@{UB}  result.l = ntui_CreateWindow \{*tuiEngine.tuiEngine,title.s,winID.l,@instanceID.l,@WFlags.l,@notify.l,@help.s,@flags.l,@userID.l\}

@{B}Description:@{UB}
Create a tuiWindow. This function will lock the tui.library until you call ntui_EndWidow. The tuiWindow will work as a suitable parent object for all sub-tuiObjects.

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine : tuiEngine to which the tuiWindow belongs to
- title.s      : Window Title
- winID.l      : winID
- instanceID.l : instanceID
- WFlags.l     : AmigaOS Window Flags (#WFLG_...)
- notify.l     : notify value if Close-Gadget is hit
- help.s       : short help text
- flags.l      : tuiFlags (#TUIF...)/
- userID.l     : userID

@{B}Result:@{UB}      
- result.l     : tuiWindow of NULL if failed or window with winID/instanceID is already created

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_Draw "ntui_Draw"

@{B}ntui_Draw@{UB}

@{B}Syntax:@{UB} ntui_Draw \{*tui.tuiObject,*rp.RastPort\}

@{B}Description:@{UB}
* Draw a tuiObject into the given rastport

@{B}Inputs:@{UB}      
- *tui.tuiObject  : tuiObject
- *rp.RastPort    : destination rastport

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_Enable "ntui_Enable"

@{B}ntui_Enable@{UB}

@{B}Syntax:@{UB} ntui_Enable \{*tui.tuiObject,onoff.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tui.tuiObject    : ???
- onoff.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_EndGroup "ntui_EndGroup"

@{B}ntui_EndGroup@{UB}

@{B}Syntax:@{UB}  result.l = ntui_EndGroup \{\}

@{B}Description:@{UB}
End a group definition.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : tuiGroup Object that was just terminated

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_EndWindow "ntui_EndWindow"

@{B}ntui_EndWindow@{UB}

@{B}Syntax:@{UB}  result.l = ntui_EndWindow \{\}

@{B}Description:@{UB}
End a window definition,

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : tuiWindow that was just terminated.

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_FlushEvents "ntui_FlushEvents"

@{B}ntui_FlushEvents@{UB}

@{B}Syntax:@{UB} ntui_FlushEvents \{*tuiEngine.tuiEngine,@*tuiWindow.tuiWindow\}

@{B}Description:@{UB}
Flush events that are waiting in the tasks event queue.

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine    : tuiEngine to flush
- *tuiWindow.tuiWindow    : optional window, otherwise flush all window events

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_FreeEngine "ntui_FreeEngine"

@{B}ntui_FreeEngine@{UB}

@{B}Syntax:@{UB} ntui_FreeEngine \{*tuiEngine.tuiEngine\}

@{B}Description:@{UB}
Free a tuiEngine and all sub-tuiObjects

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_FreeWindow "ntui_FreeWindow"

@{B}ntui_FreeWindow@{UB}

@{B}Syntax:@{UB}  result.w = ntui_FreeWindow \{*tuiWindow.tuiWindow\}

@{B}Description:@{UB}
* close and free a window (completely) */

@{B}Inputs:@{UB}      
- *tuiWindow.tuiWindow    : ???

@{B}Result:@{UB}      
- result.w     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_FreeWindowByID "ntui_FreeWindowByID"

@{B}ntui_FreeWindowByID@{UB}

@{B}Syntax:@{UB}  result.w = ntui_FreeWindowByID \{*tuiEngine.tuiEngine,winID.l,@instanceID.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine    : ???
- winID.l    : ???
- instanceID.l    : ???

@{B}Result:@{UB}      
- result.w     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_GetAttr "ntui_GetAttr"

@{B}ntui_GetAttr@{UB}

@{B}Syntax:@{UB}  result.l = ntui_GetAttr \{*tui.tuiObject,ti_Tag.l,@tagData.l\}

@{B}Description:@{UB}
Get an attribute of a tuiObject.
See @{" ntui_SetAttr " link ntui_SetAttr} for possible attributes.

@{B}Inputs:@{UB}      
- *tui.tuiObject : tuiObject
- ti_Tag.l       : tuiAttribute (#TUIA_...)
- tagData.l      : optional data if required

@{B}Result:@{UB}      
- result.l       : requested attribute's value

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_GetAttrByID "ntui_GetAttrByID"

@{B}ntui_GetAttrByID@{UB}

@{B}Syntax:@{UB} result.l = ntui_GetAttrByID \{*tui.tuiObject,userID.l,ti_Tag.l,@ti_Data.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tui.tuiObject    : ???
- userID.l    : ???
- ti_Tag.l    : ???
- ti_Data.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_GetEvent "ntui_GetEvent"

@{B}ntui_GetEvent@{UB}

@{B}Syntax:@{UB} result.l = ntui_GetEvent \{*tuiEngine.tuiEngine\}

@{B}Description:@{UB}
Get the next tuiEvent waiting in the input queue.
Note: you should always call this in a loop until there is no more event waiting, because you dont get a signal for already waiting events that wake your task up while Wait_().
Note: To query information from the tuiEvent, check if it is not NULL and use the following macros:
!event_Notify\{*tuiEvent\}
!event_Code \{*tuiEvent.tuiEvent\}
!event_tuiObject\{*tuiEvent\}
!event_Qualifier\{*tuiEvent\}
!event_Shift\{*tuiEvent\}
!event_Alt\{*tuiEvent\}
!event_Ctrl\{*tuiEvent\}
!event_Amiga\{*tuiEvent\}
!event_IDCMP\{*tuiEvent\}
!event_MouseX\{*tuiEvent\}
!event_MouseY\{*tuiEvent\}
!event_ObjectX\{*tuiEvent\}
!event_ObjectY\{*tuiEvent\}
!event_MouseOverObject\{*tuiEvent\}
!event_ScreenX\{*tuiEvent\}
!event_ScreenY\{*tuiEvent\}
!event_DeltaX\{*tuiEvent\}
!event_DeltaY\{*tuiEvent\}
!event_Seconds\{*tuiEvent\}
!event_Micros\{*tuiEvent\}
!event_String\{*tuiEvent\}
!event_DblClick\{*tuiEvent\}
!event_TrplClick\{*tuiEvent\}
!event_Signal\{*tuiEvent\}
!event_MouseButtonID\{*tuiEvent\}
!event_Release\{*tuiEvent\}
!event_MouseRelease\{*tuiEvent\}
!event_KeyUp\{*tuiEvent\}
!event_Click\{*tuiEvent\}
!event_MouseClick\{*tuiEvent\}
!event_KeyDown\{*tuiEvent\}
!ntui_MouseButtonPressed
!ntui_MouseButtonStatus \{mb\}
!ntui_RawKeyStatus \{keycode\}
!event_RawKey\{*tuiEvent\}
!event_VanillaKey\{*tuiEvent\}
!event_Window \{*tuiEvent\}
!event_TuiWindow \{*tuiEvent\}
!event_WinID \{*tuiEvent\}
!event_UserID\{*tuiEvent\}
!event_InstanceID\{*tuiEvent\}

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_GetEventNotify "ntui_GetEventNotify"

@{B}ntui_GetEventNotify@{UB}

@{B}Syntax:@{UB}  result.l = ntui_GetEventNotify \{*tuiEvent.tuiEvent\}

@{B}Description:@{UB}
Get the notify value of a given event.
Note: It is legal to call this function with a NULL pointer. The result will be #NOTIFY_NOTHING then.

@{B}Inputs:@{UB}      
- *tuiEvent.tuiEvent : tui event to ask for notify value or NULL

@{B}Result:@{UB}      
- result.l           : notify value

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_GetObjectByID "ntui_GetObjectByID"

@{B}ntui_GetObjectByID@{UB}

@{B}Syntax:@{UB}  result.l = ntui_GetObjectByID \{*tui.tuiObject,@userID.l,@typeID.l,@notify.l\}

@{B}Description:@{UB}
Find a tui object by userID, optionally add typeID and notify value for more restrict search */

@{B}Inputs:@{UB}      
- *tui.tuiObject : tuiObject from were to start the search (typically a tuiEngine or tuiWindow)
- userID.l       : userID of the tuiObject
- typeID.l       : typeID of the tuiObject
- notify.l       : notify value of the tuiObject

@{B}Result:@{UB}      
- result.l       : pointer to the tuiObject or NULL if not found

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_GetSigFlag "ntui_GetSigFlag"

@{B}ntui_GetSigFlag@{UB}

@{B}Syntax:@{UB}  result.l = ntui_GetSigFlag \{*tuiEngine.tuiEngine\}

@{B}Description:@{UB}
Get the signal flag mask of the event message port(s) for use with Wait_().

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine : tuiEngine from which to retrieve the signal flags

@{B}Result:@{UB}      
- result.l             : signal flag mask

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_GetStringByID "ntui_GetStringByID"

@{B}ntui_GetStringByID@{UB}

@{B}Syntax:@{UB} result.s = ntui_GetStringByID \{*tui.tuiObject,userID.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tui.tuiObject    : ???
- string.s    : ???
- userID.l    : ???

@{B}Result:@{UB}      
- result.s     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_GetValueByID "ntui_GetValueByID"

@{B}ntui_GetValueByID@{UB}

@{B}Syntax:@{UB} result.l = ntui_GetValueByID \{*tui.tuiObject,userID.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tui.tuiObject    : ???
- userID.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_GetWindowByID "ntui_GetWindowByID"

@{B}ntui_GetWindowByID@{UB}

@{B}Syntax:@{UB}  result.l = ntui_GetWindowByID \{*tui.tuiObject,@winID.l,@instanceID.l\}

@{B}Description:@{UB}
Find a tuiWindow by winID, optionally add instanceID for more restrict search. */

@{B}Inputs:@{UB}      
- *tui.tuiObject  : tuiObject from were to start the search (this is typically a tuiEngine)
- winID.l         : winID of the tuiWindow
- instanceID.l    : instanceID of the tuiWindow (if any)

@{B}Result:@{UB}      
- result.l        : pointer to the tuiWindow or NULL if not found

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_HideAppIcon "ntui_HideAppIcon"

@{B}ntui_HideAppIcon@{UB}

@{B}Syntax:@{UB} ntui_HideAppIcon \{*tuiEngine.tuiEngine\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_HideWindow "ntui_HideWindow"

@{B}ntui_HideWindow@{UB}

@{B}Syntax:@{UB}  result.w = ntui_HideWindow \{*tuiWindow.tuiWindow\}

@{B}Description:@{UB}
Hide a tuiWindow.
* note: The window is not present on the screen anymore. But the whole tuiWindow object still exists and can be manipulated as if it was open.
* A call of @{" ntui_ShowWindow " link ntui_ShowWindow} will make it visible again. Use @{" ntui_FreeWindow " link ntui_FreeWindow} to aktually destroy the window object.

@{B}Inputs:@{UB}      
- *tuiWindow.tuiWindow : pointer to the tuiWindow

@{B}Result:@{UB}      
- result.w     : true if the window was hidden, false otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_HideWindowByID "ntui_HideWindowByID"

@{B}ntui_HideWindowByID@{UB}

@{B}Syntax:@{UB}  result.w = ntui_HideWindowByID \{*tuiEngine.tuiEngine,winID.l,@instanceID.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine    : ???
- winID.l    : ???
- instanceID.l    : ???

@{B}Result:@{UB}      
- result.w     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_HitObject "ntui_HitObject"

@{B}ntui_HitObject@{UB}

@{B}Syntax:@{UB}  result.l = ntui_HitObject \{*tui.tuiObject,x.l,y.l\}

@{B}Description:@{UB}
Test the x/y coordinates which tuiObject they would hit.
note: This function does also hit disalbed tuiObjects.
* note: This function returns NULL, if no object is hit.

@{B}Inputs:@{UB}      
- *tui.tuiObject  : parent tuiObject, usually a tuiWindow
- x.l             : x coordinate
- y.l             : y coordinate

@{B}Result:@{UB}      
- result.l        : pointer to tuiObject or NULL

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_Iconify "ntui_Iconify"

@{B}ntui_Iconify@{UB}

@{B}Syntax:@{UB}  result.w = ntui_Iconify \{*tuiEngine.tuiEngine\}

@{B}Description:@{UB}
* re-open all windows, if any... */

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine    : ???

@{B}Result:@{UB}      
- result.w     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_PopUp "ntui_PopUp"

@{B}ntui_PopUp@{UB}

@{B}Syntax:@{UB}  succ.w = ntui_PopUp \{*tuiEngine.tuiEngine,@pubname.s,@*scr.Screen\}

@{B}Description:@{UB}
Pop the tui engine up on a screen.
This reverses the effect of @{" ntui_Iconify " link ntui_Iconify}.
In iconified mode (or if tui tuiEngine was just created), it is not allowed to open any window. The engine must first "popped" to a screen.

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine : tuiEngine to pop up
- pubname.s            : name of the PubScreen (e.g. "Workbench")
- *scr.Screen          : pointer to a custom screen

@{B}Result:@{UB}      
- succ.w               : True if popped up, False if failed

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_Redraw "ntui_Redraw"

@{B}ntui_Redraw@{UB}

@{B}Syntax:@{UB} ntui_Redraw \{*tui.tuiObject\}

@{B}Description:@{UB}
Redraw a tuiObject (entirely)

@{B}Inputs:@{UB}      
- *tui.tuiObject    : tuiObject to redraw

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_Refresh "ntui_Refresh"

@{B}ntui_Refresh@{UB}

@{B}Syntax:@{UB} ntui_Refresh \{*tui.tuiObject\}

@{B}Description:@{UB}
Refresh of a tui object (in contrast to @{" ntui_Redraw " link ntui_Redraw}, only value changes are updated)

@{B}Inputs:@{UB}      
- *tui.tuiObject    : tuiObject to refresh

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_RemClip "ntui_RemClip"

@{B}ntui_RemClip@{UB}

@{B}Syntax:@{UB} ntui_RemClip \{*rp.RastPort\}

@{B}Description:@{UB}
* remove a clip region from a rastport previously set with @{" ntui_SetClip " link ntui_SetClip}.

@{B}Inputs:@{UB}      
- *rp.RastPort    : rastport

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_SetAttr "ntui_SetAttr"

@{B}ntui_SetAttr@{UB}

@{B}Syntax:@{UB}  result.l = ntui_SetAttr \{*tui.tuiObject,ti_Tag.l,ti_Data.l\}

@{B}Description:@{UB}
Set an attribute of a tuiObject.
Note: This is a very powerful function that can change almost any aspect of the tuiObject.

Supported attributes:
#TUIA_STRING      Get/Set
                  Pointer to 0-terminated string value of tuiObject (if set, a cooy of the string will be made)
#TUIA_VALUE       Get/Set
                  32bit integer value of tuiObject
#TUIA_HELP        Get/Set
                  Pointer to 0-terminated string that holds the short help text (if set, a copy is made)
#TUIA_NOTIFY      Get/Set
                  Notify value of the tuiObject
#TUIA_FLAGS       Get/Set
                  All tuiFlags at once - use TUIA_SETFLAGS to manipulate single flags
                  Note: not all flags have an effect if changed during life-time of the tuiObject
#TUIA_WIDTH       Get
                  Current width in layout (might be 0 if the tuiObject is not visibke)
#TUIA_HEIGHT      Get
                  Current height in layout (might be 0 if the tuiObject is not visible)
#TUIA_MINWIDTH    Get/Set
                  Minimum width of the tuiObject (might be 0 if the tuiObject was never visible)
#TUIA_MINHEIGHT   Get/Set
                  Minimum height of the tuiObject (might be 0 if the tuiObject was never visible)
#TUIA_MAXWIDTH    Get/Set
                  Maximum width of the tuiObject (might be 0 if the tuiObject was never visible)
#TUIA_MAXHEIGHT   Get/Set
                  Minimum height of the tuiObject (might be 0 if the tuiObject was never visible)
#TUIA_XPOS        Get
                  X-position in layout of the tuiObject
#TUIA_YPOS        Get
                  Y-position in layout of the tuiObject
#TUIA_BORDERTYPE  Get/Set
                  Type of border, see #TUIBORDER_... for possible border types
#TUIA_GAPNORTH    Get
                  Gap at north side of the tuiObject
#TUIA_GAPSOUTH    Get
                  Gap at south side of the tuiObject
#TUIA_GAPEAST     Get
                  Gap at east side of the tuiObject
#TUIA_GAPWEST     Get
                  Gap at west side of the tuiObject
#TUIA_FOCUS       Get/Set
                  True, if the tuiObject currently holds the focus, False otherwise
#TUIA_TYPEID      Get
                  TypeID of the tuiObject (#TUI_...)
#TUIA_USERID      Get/Set
                  UserID of the tuiObject
#TUIA_BGPEN       Get/Set
                  Background tuiPen (NOT AmigaOS pen!)
#TUIA_SETFLAGS    Set
                  Set the flags stated in ti_Data
#TUIA_CLEARFLAGS  Set
                  Clear the flags stated in ti_Data
#TUIA_HIDDEN      Get/Set
                  True if the Object is hidden, False otherwise
#TUIA_ENABLED     Get/Set
                  True, if the tuiObject is enabled, False otherwise
#TUIA_DISABLED    Get/Set
                  True, if the tuiObject is disabled, False otherwise
#TUIA_VISIBLE     Get/Set
                  True, if the tuiObject is visible, False otherwise
#TUIA_ACTIVE      Get/Set
                  True, if the tuiObject is active, False otherwise
#TUIA_MOVER       Get/Set
                  True, if the tuiObject is the current Mouse-Over object, False otherwise

#TUIWA_WFLAGS     Get/Set
                  AmigaOS Window flags of the tuiWindow (#WFLG_...)
#TUIWA_APPNOTIFY  Get/Set
                  Notify value for an app event of this tuiWindow, default is #NOTIFY_WINDROP

#TUILVA_MULTISELECT Get/Set
                  Defines if the tuiListView can select multiple listviewitems at a time

@{B}Inputs:@{UB}      
- *tui.tuiObject  : tuiObject
- ti_Tag.l        : tuiAttribute (#TUIA_...)
- ti_Data.l       : value

@{B}Result:@{UB}      
- result.l        : true if the attribute was successfuly changed, false otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_SetAttrByID "ntui_SetAttrByID"

@{B}ntui_SetAttrByID@{UB}

@{B}Syntax:@{UB} ntui_SetAttrByID \{*tui.tuiObject,userID.l,ti_Tag.l,ti_Data.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tui.tuiObject    : ???
- userID.l    : ???
- ti_Tag.l    : ???
- ti_Data.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_SetAttrs "ntui_SetAttrs"

@{B}ntui_SetAttrs@{UB}

@{B}Syntax:@{UB}  result.l = ntui_SetAttrs \{*tui.tuiObject,*taglist.TagItem\}

@{B}Description:@{UB}
Same like @{" ntui_SetAttr " link ntui_SetAttr}, but set multiple attributes at once.

@{B}Inputs:@{UB}      
- *tui.tuiObject    : tuiObject
- *taglist.TagItem  : list of tagItems

@{B}Result:@{UB}      
- result.l     : count of attributes that have been successfully changed

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_SetBorder "ntui_SetBorder"

@{B}ntui_SetBorder@{UB}

@{B}Syntax:@{UB}  result.l = ntui_SetBorder \{borderType.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- borderType.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_SetClip "ntui_SetClip"

@{B}ntui_SetClip@{UB}

@{B}Syntax:@{UB} ntui_SetClip \{*rp.RastPort,x1.l,y1.l,x2.l,y2.l\}

@{B}Description:@{UB}
Set a rectangle clip region to the rastport. Remember to always call @{" ntui_RemClip " link ntui_RemClip} once you are done.
Note: This is a low-level helper function if you are drawing into a tuiView.

@{B}Inputs:@{UB}      
- *rp.RastPort : rastport to manipulate
- x1.l         : coordinates of the rectangle
- y1.l         :
- x2.l         :
- y2.l         :

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_SetFlags "ntui_SetFlags"

@{B}ntui_SetFlags@{UB}

@{B}Syntax:@{UB} ntui_SetFlags \{flags.l,@nochildren.l,@*tui.tuiObject\}

@{B}Description:@{UB}
Set flags of a tuiObject

@{B}Inputs:@{UB}      
- flags.l        : tuiFlags to set (#TUIF_...)
- nochildren.l   : if false, the flags are recursively set for all its children tuiObjects
- *tui.tuiObject : tuiObject, if not during build-time

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_SetFocus "ntui_SetFocus"

@{B}ntui_SetFocus@{UB}

@{B}Syntax:@{UB} ntui_SetFocus \{*tui.tuiObject\}

@{B}Description:@{UB}
Set the foucs to a given tuiObject.
The tuiObject will receive the user input then. Most tuiObjects change their visual appearance slightly.
Note: This is the same as if the tuiObject was hit with the mouse. If the user selects another tuiObject, the foucs is gone.

@{B}Inputs:@{UB}      
- *tui.tuiObject    : tuiObject

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_SetMaxSize "ntui_SetMaxSize"

@{B}ntui_SetMaxSize@{UB}

@{B}Syntax:@{UB}  result.l = ntui_SetMaxSize \{width.l,height.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- width.l    : ???
- height.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_SetMinSize "ntui_SetMinSize"

@{B}ntui_SetMinSize@{UB}

@{B}Syntax:@{UB}  result.l = ntui_SetMinSize \{width.l,height.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- width.l    : ???
- height.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_SetString "ntui_SetString"

@{B}ntui_SetString@{UB}

@{B}Syntax:@{UB} ntui_SetString \{*tui.tuiObject,string.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tui.tuiObject    : ???
- string.s    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_SetStringByID "ntui_SetStringByID"

@{B}ntui_SetStringByID@{UB}

@{B}Syntax:@{UB} ntui_SetStringByID \{*tui.tuiObject,string.s,userID.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tui.tuiObject    : ???
- string.s    : ???
- userID.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_SetUserID "ntui_SetUserID"

@{B}ntui_SetUserID@{UB}

@{B}Syntax:@{UB}  result.l = ntui_SetUserID \{userID.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- userID.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_SetValue "ntui_SetValue"

@{B}ntui_SetValue@{UB}

@{B}Syntax:@{UB} ntui_SetValue \{*tui.tuiObject,value.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tui.tuiObject    : ???
- value.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_SetValueByID "ntui_SetValueByID"

@{B}ntui_SetValueByID@{UB}

@{B}Syntax:@{UB} ntui_SetValueByID \{*tui.tuiObject,value.l,userID.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tui.tuiObject    : ???
- value.l    : ???
- userID.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_ShowAppIcon "ntui_ShowAppIcon"

@{B}ntui_ShowAppIcon@{UB}

@{B}Syntax:@{UB} ntui_ShowAppIcon \{*tuiEngine.tuiEngine,@text.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine    : ???
- text.s    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_ShowBubble "ntui_ShowBubble"

@{B}ntui_ShowBubble@{UB}

@{B}Syntax:@{UB} ntui_ShowBubble \{*tuiEngine.tuiEngine,text.s,x.l,y.l\}

@{B}Description:@{UB}
Show a help bubble over the given coordinates.

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine    : ???
- *text.str    : ???
- x.l    : ???
- y.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_ShowWindow "ntui_ShowWindow"

@{B}ntui_ShowWindow@{UB}

@{B}Syntax:@{UB}  result.w = ntui_ShowWindow \{*tuiWindow.tuiWindow,@xpos.l,@ypos.l,@*masterWindow.tuiWindow\}

@{B}Description:@{UB}
Make a tuiWindow visible on the screen.
Note: this function has no effect if the tuiEngine, to which the tuiWindow belongs too, is not popped up on a screen (=iconified)
Note: if the window is aready visible on the screen, it will be activated and put to front.

@{B}Inputs:@{UB}      
- *tuiWindow.tuiWindow    : tuiWindow
- xpos.l                  : initial x position
- ypos.l                  : initial y position
- *masterWindow.tuiWindow : masterwindow, if any (for internal menu use only)

@{B}Result:@{UB}      
- result.w     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_ShowWindowByID "ntui_ShowWindowByID"

@{B}ntui_ShowWindowByID@{UB}

@{B}Syntax:@{UB}  result.w = ntui_ShowWindowByID \{*tuiEngine.tuiEngine,winID.l,@instanceID.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *tuiEngine.tuiEngine    : ???
- winID.l    : ???
- instanceID.l    : ???

@{B}Result:@{UB}      
- result.w     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_Space "ntui_Space"

@{B}ntui_Space@{UB}

@{B}Syntax:@{UB}  *tuiSpace.l = ntui_Space \{width.l,height.l,@flags.l,@userID.l\}

@{B}Description:@{UB}
Create a tuiObject that just holds a certain space in the window layout.
This tuiObject has no other functionality than being a layout-helper, e.g. force a space between some other tuiObjects.
* Note: Don't use this if you want to draw your own things on the window. Use a tuiView instead!

@{B}Inputs:@{UB}      
- width.l    : minimum width of the space
- height.l   : minimum height of the space
- flags.l    : tuiFlags (#TUIF_...)
- userID.l   : optional UserID

@{B}Result:@{UB}      
- *tuiSpace.tuiSpace : tuiSpace Object

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ntui_String2UserID "ntui_String2UserID"

@{B}ntui_String2UserID@{UB}

@{B}Syntax:@{UB}  result.l = ntui_String2UserID \{userIDString.s\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- userIDString.s    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
