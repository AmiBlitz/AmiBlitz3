@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "intuition.include"

@{B}intuition.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" intui_FlushEvents " link intui_FlushEvents} 
   @{" intui_FlushRawKey " link intui_FlushRawKey} 
   @{" intui_Free " link intui_Free} 
   @{" intui_GetEvent " link intui_GetEvent} 
   @{" intui_GetEventWin " link intui_GetEventWin} 
   @{" intui_GetSigFlag " link intui_GetSigFlag} 
   @{" intui_WaitEvent " link intui_WaitEvent} 

@{B}Public Macro Index:@{UB}

   @{" !event_alt " link !event_alt} 
   @{" !event_click " link !event_click} 
   @{" !event_code " link !event_code} 
   @{" !event_ctrl " link !event_ctrl} 
   @{" !event_dblclick " link !event_dblclick} 
   @{" !event_gadgethit " link !event_gadgethit} 
   @{" !event_idcmp " link !event_idcmp} 
   @{" !event_itemhit " link !event_itemhit} 
   @{" !event_keydown " link !event_keydown} 
   @{" !event_mb " link !event_mb} 
   @{" !event_mbdown " link !event_mbdown} 
   @{" !event_mclick " link !event_mclick} 
   @{" !event_mdx " link !event_mdx} 
   @{" !event_mdy " link !event_mdy} 
   @{" !event_menuhit " link !event_menuhit} 
   @{" !event_micros " link !event_micros} 
   @{" !event_mousex " link !event_mousex} 
   @{" !event_mousey " link !event_mousey} 
   @{" !event_mx " link !event_mx} 
   @{" !event_my " link !event_my} 
   @{" !event_qualifier " link !event_qualifier} 
   @{" !event_rawkey " link !event_rawkey} 
   @{" !event_release " link !event_release} 
   @{" !event_seconds " link !event_seconds} 
   @{" !event_shift " link !event_shift} 
   @{" !event_smx " link !event_smx} 
   @{" !event_smy " link !event_smy} 
   @{" !event_string " link !event_string} 
   @{" !event_subhit " link !event_subhit} 
   @{" !event_trplclick " link !event_trplclick} 
   @{" !event_vanillakey " link !event_vanillakey} 
   @{" !event_winptr " link !event_winptr} 
   @{" !intui_joyb " link !intui_joyb} 
   @{" !intui_menuopen " link !intui_menuopen} 
   @{" !intui_mpress " link !intui_mpress} 
   @{" !intui_rawstatus " link !intui_rawstatus} 

@{B}Private Macro Index:@{UB}

   @{" !event_signal " link !event_signal} 

@ENDNODE
@NODE !event_alt "!event_alt"

@{B}!event_alt@{UB}

@{B}Syntax:@{UB} !event_alt

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_click "!event_click"

@{B}!event_click@{UB}

@{B}Syntax:@{UB} !event_click

@{B}Description:@{UB}
Check if the last event did "click", such as a mousebutton.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- succ    : -1 if a click occured, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_code "!event_code"

@{B}!event_code@{UB}

@{B}Syntax:@{UB} !event_code

@{B}Description:@{UB}
Get the raw, untouched event code that is associated with the last event.
NOTE: This macro replaces the Blitz Function EventCode.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- code.l     : event code of the last event

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_ctrl "!event_ctrl"

@{B}!event_ctrl@{UB}

@{B}Syntax:@{UB} !event_ctrl

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_dblclick "!event_dblclick"

@{B}!event_dblclick@{UB}

@{B}Syntax:@{UB} !event_dblclick

@{B}Description:@{UB}
Check if the last mouse button event matches the doubleclick time (as set in AmigaOS preferences).

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- succ.l    : -1 if the last click was a double click, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_gadgethit "!event_gadgethit"

@{B}!event_gadgethit@{UB}

@{B}Syntax:@{UB} !event_gadgethit

@{B}Description:@{UB}
Return ID of last hit gadget or -1, if no gadget was hit.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
gadID.l    : ID number of last gadget hit

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_idcmp "!event_idcmp"

@{B}!event_idcmp@{UB}

@{B}Syntax:@{UB} !event_idcmp

@{B}Description:@{UB}
Return the IDCMP code of the last event.
See RKM/intuition or inlcudes/intuition.h for possible IDCMP codes.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
idcmp.l    : IDCMP code

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_itemhit "!event_itemhit"

@{B}!event_itemhit@{UB}

@{B}Syntax:@{UB} !event_itemhit

@{B}Description:@{UB}
Return the menu item that is associated with the last #IDCMP_MENUPICK event.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
mitem.l    : menu item number

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_keydown "!event_keydown"

@{B}!event_keydown@{UB}

@{B}Syntax:@{UB} !event_keydown

@{B}Description:@{UB}
Check if a key was hold down while the event occured.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- succ.l    : -1, if key was hold down, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_mb "!event_mb"

@{B}!event_mb@{UB}

@{B}Syntax:@{UB} !event_mb

@{B}Description:@{UB}
Get the mouse button number of the last event associated with the mouse.
This can be
0: no mouse button
1: left mouse button
2: right mouse button
3: middle mouse button
...

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
mb.l    : number of mouse button

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_mbdown "!event_mbdown"

@{B}!event_mbdown@{UB}

@{B}Syntax:@{UB} !event_mbdown

@{B}Description:@{UB}
Check if a mouse button was hold down while the last event occured.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
succ.l    : -1 if a mouse button is hold, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_mclick "!event_mclick"

@{B}!event_mclick@{UB}

@{B}Syntax:@{UB} !event_mclick

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_mdx "!event_mdx"

@{B}!event_mdx@{UB}

@{B}Syntax:@{UB} !event_mdx

@{B}Description:@{UB}
Return the mouse delta-x from the last mouse pointer positon.
NOTE: Makes sense only after #IDCMP_MOUSEMOVE.

- mdx.l   : mouse pointer delta x in pixel

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_mdy "!event_mdy"

@{B}!event_mdy@{UB}

@{B}Syntax:@{UB} !event_mdy

@{B}Description:@{UB}
Return the mouse delta-y from the last mouse pointer positon.
NOTE: Makes sense only after #IDCMP_MOUSEMOVE.

- mdy.l   : mouse pointer delta y in pixel

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_menuhit "!event_menuhit"

@{B}!event_menuhit@{UB}

@{B}Syntax:@{UB} !event_menuhit

@{B}Description:@{UB}
Return the menu titel that was hit after the last #IDCMP_MENUPICK event.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- mtitle.l   : menu title number

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_micros "!event_micros"

@{B}!event_micros@{UB}

@{B}Syntax:@{UB} !event_micros

@{B}Description:@{UB}
Return the micro seconds of absolute system time when the last event occured.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
micros.l    : micro seconds

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" !event_seconds " link !event_seconds}




@ENDNODE
@NODE !event_mousex "!event_mousex"

@{B}!event_mousex@{UB}

@{B}Syntax:@{UB} !event_mousex

@{B}Description:@{UB}
Return the x position of the mouse pointer relative to the events windows left/top edge.
NOTE: x can be negative.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" !event_mousey " link !event_mousey}




@ENDNODE
@NODE !event_mousey "!event_mousey"

@{B}!event_mousey@{UB}

@{B}Syntax:@{UB} !event_mousey

@{B}Description:@{UB}
Return the y position of the mouse pointer relative to the events windows left/top edge.
NOTE: y can be negative.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" !event_mousex " link !event_mousex}




@ENDNODE
@NODE !event_mx "!event_mx"

@{B}!event_mx@{UB}

@{B}Syntax:@{UB} !event_mx

@{B}Description:@{UB}
Identical to @{" !event_mousex " link !event_mousex}.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_my "!event_my"

@{B}!event_my@{UB}

@{B}Syntax:@{UB} !event_my

@{B}Description:@{UB}
Identical to @{" !event_mousey " link !event_mousey}.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_qualifier "!event_qualifier"

@{B}!event_qualifier@{UB}

@{B}Syntax:@{UB} !event_qualifier

@{B}Description:@{UB}
Get the whole, untouched qualifier value of the last event.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_rawkey "!event_rawkey"

@{B}!event_rawkey@{UB}

@{B}Syntax:@{UB} !event_rawkey

@{B}Description:@{UB}
Get the raw key number associated with the event.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_release "!event_release"

@{B}!event_release@{UB}

@{B}Syntax:@{UB} !event_release

@{B}Description:@{UB}
The event is "release", e.g. mouse button or key.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_seconds "!event_seconds"

@{B}!event_seconds@{UB}

@{B}Syntax:@{UB} !event_seconds

@{B}Description:@{UB}
Return the seconds of the absolute system time when the event occured.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" !event_micros " link !event_micros}




@ENDNODE
@NODE !event_shift "!event_shift"

@{B}!event_shift@{UB}

@{B}Syntax:@{UB} !event_shift

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_signal "!event_signal"

@{B}!event_signal@{UB}

@{B}Syntax:@{UB} !event_signal

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_smx "!event_smx"

@{B}!event_smx@{UB}

@{B}Syntax:@{UB} !event_smx

@{B}Description:@{UB}
Return the mouse x coordinate relative to the screen.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" !event_smy " link !event_smy}




@ENDNODE
@NODE !event_smy "!event_smy"

@{B}!event_smy@{UB}

@{B}Syntax:@{UB} !event_smy

@{B}Description:@{UB}
Return the mouse y coordinate relative to the screen.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" !event_smx " link !event_smx}




@ENDNODE
@NODE !event_string "!event_string"

@{B}!event_string@{UB}

@{B}Syntax:@{UB} !event_string

@{B}Description:@{UB}
Return the string that is associated with the last event.
This make only sense for IDCMP_GADGETUP, if the gadget was a string gadget.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_subhit "!event_subhit"

@{B}!event_subhit@{UB}

@{B}Syntax:@{UB} !event_subhit

@{B}Description:@{UB}
Return the sub menu item (if there is any) hit after the last IDCMP_MENUPICK event.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_trplclick "!event_trplclick"

@{B}!event_trplclick@{UB}

@{B}Syntax:@{UB} !event_trplclick

@{B}Description:@{UB}
Check for tripple click of the mouse button.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_vanillakey "!event_vanillakey"

@{B}!event_vanillakey@{UB}

@{B}Syntax:@{UB} !event_vanillakey

@{B}Description:@{UB}
Get the vanilla key code (after raw key is mapped through you keyboard settings).
NOTE: This works also if you received a raw key message. There is no need to receive IDCMP_VANILLAKEY messages.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !event_winptr "!event_winptr"

@{B}!event_winptr@{UB}

@{B}Syntax:@{UB} !event_winptr

@{B}Description:@{UB}
Get the pointer to the window structure of the last event.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !intui_joyb "!intui_joyb"

@{B}!intui_joyb@{UB}

@{B}Syntax:@{UB} !intui_joyb

@{B}Description:@{UB}
Return the currently pressed mouse button(s).
NOTE: This is not an !event_xxx type macro, because it is not called after you received an event. You can check if a mouse button is pressed any time. This is ideal for games.
NOTE: This replaces te Blitz function Joyb()

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !intui_menuopen "!intui_menuopen"

@{B}!intui_menuopen@{UB}

@{B}Syntax:@{UB} !intui_menuopen

@{B}Description:@{UB}
Check if the menu is currently open.
NOTE: This is not an !event_xxx type macro, because it is not called after you received an event. You can check any time if the menu is open.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !intui_mpress "!intui_mpress"

@{B}!intui_mpress@{UB}

@{B}Syntax:@{UB} !intui_mpress

@{B}Description:@{UB}
Check if any mouse button is currently pressed.
NOTE: This is not an !event_xxx type macro, because it is not called after you received an event. You can check if a mouse button is pressed any time. This is ideal for games.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE !intui_rawstatus "!intui_rawstatus"

@{B}!intui_rawstatus@{UB}

@{B}Syntax:@{UB} !intui_rawstatus

@{B}Description:@{UB}
Return the status of any raw key.
NOTE: This is not an !event_xxx type macro, because it is not called after you received an event. You can check if a certain key is pressed any time. This is ideal for games.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} intuition.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 27/12/2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB}  Amiblitz3

@{B}Purpose:@{UB}
Replace the event related Blitz commands, fix some bugs and add some extra functionality.

@{B}Abstract:@{UB}
Why should I use the intuition.include ?

The Blitz commands for retrieving IDCMP events are system friendly and work on all platforms - theoretically.
But they were written without the knowledge of MOS and OS4. that have a slightly different behaviour when it comes to IDCMP events, especially when it
comes to scroller/slider gadgets and their immediate values. This include fixes those problems and behaves the same on all systems. It also does some workarounds and pre-processing, so that you always receive the values
you would expect.
E.g. following a slider gadget, you get an IDCMP_GADGETDOWN, then many IDCMP_MOUSEMOVE and then one IDCMP_GADGETUP. During the mouse moves, the Blitz command GadGetHit will return -1 or even crash.
This means, you have to keep track by yourself which slider is moving, which can be quite difficult if the window gets deactivated without user interaction and you are missing the IDCMP_GADGETUP.

The intuition include using @{" !event_gadgethit " link !event_gadgethit} will always return you the gadget ID of the slider, as you would expect.
A lot of affort has been taken into making it work nicely under all circumstances and all platforms.

Any bugs or problems ? No problem, you have the source code and can change it!

The include contains "intui_xxx" type functions, that can be called any time. The "event_xxx" type functions, mainly macros for speed reasons, are always related to the latest event you have received. It makes only sense to call them after you received an event you are interested in using intui_event or @{" intui_WaitEvent " link intui_WaitEvent}.

@{B}User Constants:@{UB}  none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE intui_FlushEvents "intui_FlushEvents"

@{B}intui_FlushEvents@{UB}

@{B}Syntax:@{UB} intui_FlushEvents \{@idcmp.l,@win.l\}

@{B}Description:@{UB}
Flush events that are waiting in the tasks event queue.
You can specify a IDCMP mask to select only special event types to be flushed or -1 for all events.
Additionally, you can specify the Blitz Window Object ID of the window, whose events should be flushed.
Otherwise the events of all windows are flushed.

@{B}Inputs:@{UB}      
- idcmp.l    : IDCMP mask to match the events to be flushed
- win.l    : Blitz Window Object ID of the window whose events should be flushed

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE intui_FlushRawKey "intui_FlushRawKey"

@{B}intui_FlushRawKey@{UB}

@{B}Syntax:@{UB} intui_FlushRawKey \{\}

@{B}Description:@{UB}
Reset all rawkeys to be unpressed.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE intui_Free "intui_Free"

@{B}intui_Free@{UB}

@{B}Syntax:@{UB} intui_Free \{\}

@{B}Description:@{UB}
Free all resources associated with the intuition include. You can not use the intuition.include functions anymore after this.
NOTE: This function is called on autoexit. You dont need to call it manually.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE intui_GetEvent "intui_GetEvent"

@{B}intui_GetEvent@{UB}

@{B}Syntax:@{UB}  result.l = intui_GetEvent \{\}

@{B}Description:@{UB}
Return the IDCMP code of the last event or 0 if there was no event in the queue.
NOTE: Replaces Blitz command "Event".

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : IDCMP code or 0

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE intui_GetEventWin "intui_GetEventWin"

@{B}intui_GetEventWin@{UB}

@{B}Syntax:@{UB}  result.l = intui_GetEventWin \{\}

@{B}Description:@{UB}
Return the Blitz Window Object ID of the events window.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : Window Object ID

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE intui_GetSigFlag "intui_GetSigFlag"

@{B}intui_GetSigFlag@{UB}

@{B}Syntax:@{UB}  result.l = intui_GetSigFlag \{\}

@{B}Description:@{UB}
Return the signal flag of the event message port for use with Wait_().

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : signal flag

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    intui_event




@ENDNODE
@NODE intui_WaitEvent "intui_WaitEvent"

@{B}intui_WaitEvent@{UB}

@{B}Syntax:@{UB}  result.l = intui_WaitEvent \{\}

@{B}Description:@{UB}
Freeze the task until an event occures and return IDCMP code.
This is only useful, if the event message port is the only thing your task is waiting for.
If you are waiting for other signals, like AHI, TCP/IP, I/O devices, AREXX etc., you might want to use Wait_() with the signal flag added from intui_sigflag. Then, use intui_event to find out if there is a new event waiting.
NOTE: This function replaces the Blitz command "WaitEvent".

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : IDCMP code

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    intui_event




@ENDNODE
