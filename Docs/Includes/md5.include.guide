@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "md5.include"

@{B}md5.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" md5_Add " link md5_Add} 
   @{" md5_Finalize " link md5_Finalize} 
   @{" md5_FromFile " link md5_FromFile} 
   @{" md5_FromMem " link md5_FromMem} 
   @{" md5_FromString " link md5_FromString} 

@{B}Private Function Index:@{UB}

   @{" _md5_rol " link _md5_rol} 
   @{" md5_FlipEndian " link md5_FlipEndian} 
   @{" md5_Init " link md5_Init} 
   @{" md5_LFlip " link md5_LFlip} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@{B}Private Macro Index:@{UB}

   @{" !_md5_rol " link !_md5_rol} 

@ENDNODE
@NODE !_md5_rol "!_md5_rol"

@{B}!_md5_rol@{UB}

@{B}Syntax:@{UB} !_md5_rol \{dat.l,value.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- dat.l    : ???
- value.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} md5.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 27/12/2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB}  Amiblitz2.4

@{B}Purpose:@{UB}
Provide md5 checksum functionality to AB2.

@{B}Abstract:@{UB}
With this include, you can easily calculate the md5 checksum of a file, a string or memory block.
The data can be also distributed over several blocks.

Background:
The md5 checksum (or often called hash value) is a 128 bit value, that is calculated out of any data block of any size.
The same data block will result in the same md5 code, but a (even slightly) different data block will result in a different md5 code.
However, two different data blocks can result theoretically in the same md5 code, but this is considered as very very unlikely.

The md5 checksum is often used as a finger print of a file (e.g. in file sharing clients), or to check if two files are identical without comparing the whole data bytewise.
It can also be used for hash tables, as the value is considered to be very unique.
As the md5 checksum is a so called "one way function", it is extremely difficult to "fake" a file to result in a certain md5 code, which makes it interesting for security/encryption applications.

Compared to the CRC32 checksum, it is much more unique and harder to fake. However, it is 4 times bigger and takes much more calculation time. The implementation in this inlcude is also far from being optimized fro speed.

@{B}User Constants:@{UB}   none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _md5_rol "_md5_rol"

@{B}_md5_rol@{UB}

@{B}Syntax:@{UB}  result.l = _md5_rol \{dat.l,value.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- dat.l    : ???
- value.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE md5_Add "md5_Add"

@{B}md5_Add@{UB}

@{B}Syntax:@{UB} md5_Add \{dataptr.l,bytelength.l,@nofinish.l\}

@{B}Description:@{UB}
Collect data and add it to the unfinished md5 code. You can ignore the nofinish.l parameter.
NOTE: This can be any byte size from 0 to 2^31, does not have to be a multiple of 64)

@{B}Inputs:@{UB}      
- dataptr.l     : pointer to a memory block
- bytelength.l  : byte length of memory block
- nofinish.l    : 0 indicates that this is the last block to add

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE md5_Finalize "md5_Finalize"

@{B}md5_Finalize@{UB}

@{B}Syntax:@{UB}  md5.s = md5_Finalize \{\}

@{B}Description:@{UB}
Return the md5 checksum that has been calculated.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- md5.s     : hex code of a 128 bit md5 value (12 digits)

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE md5_FlipEndian "md5_FlipEndian"

@{B}md5_FlipEndian@{UB}

@{B}Syntax:@{UB} md5_FlipEndian \{sourceaddr.l,destaddr.l,llength.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- destaddr.l    : ???
- llength.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE md5_FromFile "md5_FromFile"

@{B}md5_FromFile@{UB}

@{B}Syntax:@{UB}  md5.s = md5_FromFile \{filename.s\}

@{B}Description:@{UB}
Calculate the md5 checksum of a file.

@{B}Inputs:@{UB}      
- filename.s    : file name

@{B}Result:@{UB}      
- md5.s     : hex code of a 128 bit md5 value (12 digits)

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE md5_FromMem "md5_FromMem"

@{B}md5_FromMem@{UB}

@{B}Syntax:@{UB}  md5.s = md5_FromMem \{message.l,bytelength.l\}

@{B}Description:@{UB}
Calculate the md5 checksum of a memory buffer.

@{B}Inputs:@{UB}      
- message.l    : pointer to a memory block
- bytelength.l    : byte length of memory block

@{B}Result:@{UB}      
- md5.s     : hex code of a 128 bit md5 value (12 digits)

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE md5_FromString "md5_FromString"

@{B}md5_FromString@{UB}

@{B}Syntax:@{UB}  md5.s = md5_FromString \{string.s\}

@{B}Description:@{UB}
Calculate the md5 checksum of an AB2 string.

@{B}Inputs:@{UB}      
- string.s    : AB2 string

@{B}Result:@{UB}      
- md5.s     : hex code of a 128 bit md5 value (12 digits)

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE md5_Init "md5_Init"

@{B}md5_Init@{UB}

@{B}Syntax:@{UB} md5_Init \{\}

@{B}Description:@{UB}
* private *
Reset and prepare to calculate a new md5 code (is done automatically).

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE md5_LFlip "md5_LFlip"

@{B}md5_LFlip@{UB}

@{B}Syntax:@{UB}  result.l =  md5_LFlip \{value.l\}

@{B}Description:@{UB}
* private *
Convert a 32bit value big <-> little endian.

@{B}Inputs:@{UB}      
- value.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
