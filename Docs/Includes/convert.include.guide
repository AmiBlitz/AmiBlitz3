@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "convert.include"

@{B}convert.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" SLen " link SLen} 
   @{" Vallong_ " link Vallong_} 
   @{" con_Extended2Long " link con_Extended2Long} 
   @{" con_Fine2Midi " link con_Fine2Midi} 
   @{" con_FlipEndian32 " link con_FlipEndian32} 
   @{" con_Gain2midi " link con_Gain2midi} 
   @{" con_Hex2Integer_ " link con_Hex2Integer_} 
   @{" con_LFlip " link con_LFlip} 
   @{" con_LFlipx " link con_LFlipx} 
   @{" con_Long2Extended " link con_Long2Extended} 
   @{" con_Midi2Fine " link con_Midi2Fine} 
   @{" con_Midi2Gain " link con_Midi2Gain} 
   @{" con_Midi2Pan " link con_Midi2Pan} 
   @{" con_Mul48 " link con_Mul48} 
   @{" con_Note2String " link con_Note2String} 
   @{" con_Pan2Midi " link con_Pan2Midi} 
   @{" con_WFlip " link con_WFlip} 

@{B}Public Macro Index:@{UB}

   @{" !mul48 " link !mul48} 
   @{" !mul48_256 " link !mul48_256} 

@ENDNODE
@NODE !mul48 "!mul48"

@{B}!mul48@{UB}

@{B}Syntax:@{UB} !mul48 \{x.l,a.l,b.l,y.l\}

@{B}Description:@{UB}
This handy macro performes y = x*a/b, whereas x*a can use up to 48 bit, only the result must fit in 32 bit.

@{B}Inputs:@{UB}      
- x.l    : ???
- a.l    : ???
- b.l    : ???
- y.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" con_Mul48 " link con_Mul48}




@ENDNODE
@NODE !mul48_256 "!mul48_256"

@{B}!mul48_256@{UB}

@{B}Syntax:@{UB} !mul48_256 \{x.l,a.l,y.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- x.l    : ???
- a.l    : ???
- y.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} convert.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, AmigaOS4, MOS

@{B}Date:@{UB} 11.03.2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB} Amiblitz2.4

@{B}Purpose:@{UB}
Provide some convertion functions.

@{B}Abstract:@{UB}
Here you find some useful functions, that convert between different data formats.

@{B}User Constants:@{UB}    none

@{B}Example:@{UB}                                                 none



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE SLen "SLen"

@{B}SLen@{UB}

@{B}Syntax:@{UB}  result.l = SLen \{a$\}

@{B}Description:@{UB}
Length of string, same like Len(), but faster. Much faster. But it works only on strings, not on expressions.
Note: Bernd impelemented a functions called FLen. This is equally fast, but works only on strings as well.
E.g.
length.l = SLen\{a$\}  ; is allowed
length.l = SLen\{a$+" test "\} ; is NOT allowed

@{B}Inputs:@{UB}      
- a$    : string

@{B}Result:@{UB}      
- result.l     : length of the string

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE Vallong_ "Vallong_"

@{B}Vallong_@{UB}

@{B}Syntax:@{UB}  result.l = Vallong_ \{input$\}

@{B}Description:@{UB}
Convert the string to an intger value, same like Vallong().

@{B}Inputs:@{UB}      
- input$    : string

@{B}Result:@{UB}      
- result.l     : integer

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE con_Extended2Long "con_Extended2Long"

@{B}con_Extended2Long@{UB}

@{B}Syntax:@{UB}  result.l = con_Extended2Long \{exptr.l\}

@{B}Description:@{UB}
Convert the MACs "extended" format to a normal long integer. The format is e.g. used in the AIFF file format to sepcify the samplerate (as if life wasnt hard enough already).

@{B}Inputs:@{UB}      
- exptr.l    : pointer to an extended value

@{B}Result:@{UB}      
- result.l     : integer value

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        
This will not work, if the extended value exceeds the 32bit integer range.



@{B}See also:@{UB}    -


@ENDNODE
@NODE con_Fine2Midi "con_Fine2Midi"

@{B}con_Fine2Midi@{UB}

@{B}Syntax:@{UB}  result.l =  con_Fine2Midi \{fine.l\}

@{B}Description:@{UB}
Convert a fine tuning value to midi pitchwheel event value.

@{B}Inputs:@{UB}      
- fine.l    : fine tuning [-100...+100] cents

@{B}Result:@{UB}      
- result.l     : pitchwheel event value [0...127] ?

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE con_FlipEndian32 "con_FlipEndian32"

@{B}con_FlipEndian32@{UB}

@{B}Syntax:@{UB} con_FlipEndian32 \{sourceaddr.l,destaddr.l,llength.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- sourceaddr.l    : ???
- destaddr.l    : ???
- llength.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE con_Gain2midi "con_Gain2midi"

@{B}con_Gain2midi@{UB}

@{B}Syntax:@{UB}  result.l =  con_Gain2midi \{gain.l\}

@{B}Description:@{UB}
Convert a gain value to midi volume event value.

@{B}Inputs:@{UB}      
- gain.l    : gain value [0...100]

@{B}Result:@{UB}      
- result.l     : midi volume value [0...127]

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE con_Hex2Integer_ "con_Hex2Integer_"

@{B}con_Hex2Integer_@{UB}

@{B}Syntax:@{UB}  result.l = con_Hex2Integer_ \{hexa.s\}

@{B}Description:@{UB}
Convert a hexadeciaml value given as a string into a long word.
Obsolete, Vallong() can do this for us!

@{B}Inputs:@{UB}      
- hexa.s    : hex value

@{B}Result:@{UB}      
- result.l     : int value

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE con_LFlip "con_LFlip"

@{B}con_LFlip@{UB}

@{B}Syntax:@{UB}  result.l =  con_LFlip \{value.l\}

@{B}Description:@{UB}
Convert little <=> big endian of the given long int.

@{B}Inputs:@{UB}      
- value.l    : long integer big endian

@{B}Result:@{UB}      
- result.l     : long integer little endian

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE con_LFlipx "con_LFlipx"

@{B}con_LFlipx@{UB}

@{B}Syntax:@{UB}  result.l = con_LFlipx \{value.l\}

@{B}Description:@{UB}
* obsolete *  (and maybe buggy!)

@{B}Inputs:@{UB}      
- value.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE con_Long2Extended "con_Long2Extended"

@{B}con_Long2Extended@{UB}

@{B}Syntax:@{UB} con_Long2Extended \{in.l,exptr.l\}

@{B}Description:@{UB}
Convert a long integer value to MACs extended value.

@{B}Inputs:@{UB}      
- in.l    : integer value
- exptr.l    : pointer to an extended value to be filled

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE con_Midi2Fine "con_Midi2Fine"

@{B}con_Midi2Fine@{UB}

@{B}Syntax:@{UB}  result.l =  con_Midi2Fine \{fine.l\}

@{B}Description:@{UB}
Convert a midi pitch wheel value to fine tune value (cents).

@{B}Inputs:@{UB}      
- fine.l    : this is a 14bit value from 0...8191, that is send by the pitch wheel

@{B}Result:@{UB}      
- result.l     : fine tune value in cents (semi tone/100)

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE con_Midi2Gain "con_Midi2Gain"

@{B}con_Midi2Gain@{UB}

@{B}Syntax:@{UB}  result.l =  con_Midi2Gain \{gain.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- gain.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE con_Midi2Pan "con_Midi2Pan"

@{B}con_Midi2Pan@{UB}

@{B}Syntax:@{UB}  result.l =  con_Midi2Pan \{pan.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- pan.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE con_Mul48 "con_Mul48"

@{B}con_Mul48@{UB}

@{B}Syntax:@{UB}  result.l = con_Mul48 \{x.l,a.l,b.l\}

@{B}Description:@{UB}
Computes x*a/b with possibility that x*a is bigger than a longword.

@{B}Inputs:@{UB}      
- x.l    : 32bit integer value
- a.l    : 32bit integer value
- b.l    : 32bit integer value

@{B}Result:@{UB}      
- result.l     : x*a/b

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" !mul48 " link !mul48}




@ENDNODE
@NODE con_Note2String "con_Note2String"

@{B}con_Note2String@{UB}

@{B}Syntax:@{UB}  result.s = con_Note2String \{midinote.l\}

@{B}Description:@{UB}
onvert a midi note number to a human readable string like "A4" or "C#3".

@{B}Inputs:@{UB}      
- midinote.l    : [0...127]

@{B}Result:@{UB}      
- result.s     : name of the musical note

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE con_Pan2Midi "con_Pan2Midi"

@{B}con_Pan2Midi@{UB}

@{B}Syntax:@{UB}  result.l =  con_Pan2Midi \{pan.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- pan.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE con_WFlip "con_WFlip"

@{B}con_WFlip@{UB}

@{B}Syntax:@{UB}  result.w = con_WFlip \{value.w\}

@{B}Description:@{UB}
Convert word value little <=> big endian.

@{B}Inputs:@{UB}      
- value.w    : integer value big endian

@{B}Result:@{UB}      
- result.w     : integer value little endian

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
