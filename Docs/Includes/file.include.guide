@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "file.include"

@{B}file.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" file_Cache " link file_Cache} 
   @{" file_Clone " link file_Clone} 
   @{" file_Close " link file_Close} 
   @{" file_CloseAll " link file_CloseAll} 
   @{" file_CloseChunk " link file_CloseChunk} 
   @{" file_EOF " link file_EOF} 
   @{" file_Erase " link file_Erase} 
   @{" file_FindChunk " link file_FindChunk} 
   @{" file_GetChunk " link file_GetChunk} 
   @{" file_GetDosName " link file_GetDosName} 
   @{" file_GetFH " link file_GetFH} 
   @{" file_GetFullName " link file_GetFullName} 
   @{" file_GetIOErr " link file_GetIOErr} 
   @{" file_GetLength " link file_GetLength} 
   @{" file_GetName " link file_GetName} 
   @{" file_GetPath " link file_GetPath} 
   @{" file_GetSeekPos " link file_GetSeekPos} 
   @{" file_GetTagFloat " link file_GetTagFloat} 
   @{" file_GetTagString " link file_GetTagString} 
   @{" file_GetTagValue " link file_GetTagValue} 
   @{" file_IsOpen " link file_IsOpen} 
   @{" file_IsUsed " link file_IsUsed} 
   @{" file_Open " link file_Open} 
   @{" file_ReadBB2Line " link file_ReadBB2Line} 
   @{" file_ReadByte " link file_ReadByte} 
   @{" file_ReadFloat " link file_ReadFloat} 
   @{" file_ReadLine " link file_ReadLine} 
   @{" file_ReadLong " link file_ReadLong} 
   @{" file_ReadMem " link file_ReadMem} 
   @{" file_ReadString " link file_ReadString} 
   @{" file_ReadString2 " link file_ReadString2} 
   @{" file_ReadTag " link file_ReadTag} 
   @{" file_ReadWord " link file_ReadWord} 
   @{" file_Seek " link file_Seek} 
   @{" file_SeekRel " link file_SeekRel} 
   @{" file_SetASLPath " link file_SetASLPath} 
   @{" file_SetASLPos " link file_SetASLPos} 
   @{" file_SetBufferSize " link file_SetBufferSize} 
   @{" file_SetLittleEndian " link file_SetLittleEndian} 
   @{" file_Unlock " link file_Unlock} 
   @{" file_WFlip " link file_WFlip} 
   @{" file_WriteBB2Line " link file_WriteBB2Line} 
   @{" file_WriteByte " link file_WriteByte} 
   @{" file_WriteChunk " link file_WriteChunk} 
   @{" file_WriteFloat " link file_WriteFloat} 
   @{" file_WriteLine " link file_WriteLine} 
   @{" file_WriteLong " link file_WriteLong} 
   @{" file_WriteMem " link file_WriteMem} 
   @{" file_WriteString " link file_WriteString} 
   @{" file_WriteTag " link file_WriteTag} 
   @{" file_WriteTagString " link file_WriteTagString} 
   @{" file_WriteWord " link file_WriteWord} 

@{B}Private Function Index:@{UB}

   @{" file_GetFreeFID " link file_GetFreeFID} 
   @{" file_Identify " link file_Identify} 
   @{" file_LFlip " link file_LFlip} 
   @{" file_Lock " link file_Lock} 
   @{" file_ReadLinex " link file_ReadLinex} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} file.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 27/12/2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB}  Amiblitz2.4

@{B}Purpose:@{UB}
Provide file I/O functions.

@{B}Abstract:@{UB}
This include provides easy-to-use file I/O, with a high degree of control and extra functionality.

@{B}User Constants:@{UB}
#max_files = 100
Set the maximum amount if file object IDs you plan to use.

@{B}Example:@{UB}     
_______________________________________________________________ snip!
#max_files = 100
XINCLUDE "file.include.ab3"

fid.l = file_Open\{"DH0:myfile.dat",#file_open\}
If fid>=0
  @{" file_ReadMem " link file_ReadMem} \{fid,ptr,blength\} ; read something into memory
  @{" file_Close " link file_Close} \{fid\}
Else
  NPrint "Unable to open file !"
EndIf
End
_______________________________________________________________ snip!



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_Cache "file_Cache"

@{B}file_Cache@{UB}

@{B}Syntax:@{UB} file_Cache \{fid.l\}

@{B}Description:@{UB}
Cache a file to ram.
All subsequent file reading commands will read from the cache.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_Clone "file_Clone"

@{B}file_Clone@{UB}

@{B}Syntax:@{UB}  fid.l = file_Clone \{ofid.l\}

@{B}Description:@{UB}
Clone a file. You will get another file object ID that is open on the same file at the same seek position.

@{B}Inputs:@{UB}      
- ofid.l    : original file object ID

@{B}Result:@{UB}      
- fid.l    : file object ID

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_Close "file_Close"

@{B}file_Close@{UB}

@{B}Syntax:@{UB} file_Close \{fid.l\}

@{B}Description:@{UB}
Close a file previously opened with @{" file_Open " link file_Open}.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" file_Open " link file_Open}




@ENDNODE
@NODE file_CloseAll "file_CloseAll"

@{B}file_CloseAll@{UB}

@{B}Syntax:@{UB} file_CloseAll \{\}

@{B}Description:@{UB}
Close all open files.
NOTE: This function is called on autoexit. However, it is always a good programming style to close all files you opened explicitly.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_CloseChunk "file_CloseChunk"

@{B}file_CloseChunk@{UB}

@{B}Syntax:@{UB}  succ.w = file_CloseChunk \{fid.l,head.l\}

@{B}Description:@{UB}
Close a structured chunk ina file created with @{" file_WriteChunk " link file_WriteChunk}.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- head.l    : 4-byte identifier for the chunk, e.g. @"ILBM"

@{B}Result:@{UB}      
- succ.w    : -1 if everything went well, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" file_WriteChunk " link file_WriteChunk}




@ENDNODE
@NODE file_EOF "file_EOF"

@{B}file_EOF@{UB}

@{B}Syntax:@{UB}  succ.w =  file_EOF \{fid.l\}

@{B}Description:@{UB}
"End Of File": Test if the file has reached the end while reading.
This is useful to detect the end of a file while reading e.g. line by line via file_readln.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      
- succ.w    : -1 if the end of file is reached, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_Erase "file_Erase"

@{B}file_Erase@{UB}

@{B}Syntax:@{UB} file_Erase \{fid.l\}

@{B}Description:@{UB}
Erase an open file. The file object ID is not valid any more after this function.
Note: This command is useful if you want to erase a file e.g. if an error occured during writing and you decide to erase the file you started to write.
Note: This does the same like @{" file_Close " link file_Close} and a subsequent file_delete.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_FindChunk "file_FindChunk"

@{B}file_FindChunk@{UB}

@{B}Syntax:@{UB} result.l = file_FindChunk \{fid.l,chunk.l,@pos.l,@blength.l,@immediate.l,@nowordalign.l\}

@{B}Description:@{UB}
Start at the current seek position and try to find the chunk.
It must be a position already pointing to a valid chunk, .e.g pointing to "BMHD" in an IFF-ILBM file.
It returns the file seek position or 0 if the chunk is not found.
The file position will be set to the first byte of the chunk, e.g. "BODY"

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- chunk.l    : 4-byte chunk identifier, e.g. @"BODY"
- pos.l    : position to start seeking from (must point to a valid chunk)
- blength.l    : maximum length within the file to search for the chunk
- immediate.l    : allow the current position to be the found chunk
- nowordalign.l    : 0=do automatic word align (like found in most FORM files), -1 allow odd seek positions

@{B}Result:@{UB}      
seekpos.l   : file seek position that points to the chunk identifier, followed by the chunk size

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" file_WriteChunk " link file_WriteChunk}, @{" file_CloseChunk " link file_CloseChunk}




@ENDNODE
@NODE file_GetChunk "file_GetChunk"

@{B}file_GetChunk@{UB}

@{B}Syntax:@{UB}  result.l = file_GetChunk \{fid.l,chunk.l,@pos.l,@blength.l,@immediate.l,@nowordalign.l\}

@{B}Description:@{UB}
Same like file_FindChunk\{\}, but returns already the chunk size of the found chunk or 0.

NOTE: As a side effect, you file position pointer will be moved to the position that points to the 4-byte chunk identifier.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- chunk.l    : 4-byte chunk identifier, e.g. @"BODY"
- pos.l    : seek position to start from (-1 for current position)
- blength.l    : maximum byte length to seek within the file
- immediate.l    : allow current chunk to be found
- nowordalign.l    : 0=force word allignments (as found in most FORM fileformats), -1 no alignment

@{B}Result:@{UB}      
- result.l     : size of the found chunk or 0 if no chunk was found

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_GetDosName "file_GetDosName"

@{B}file_GetDosName@{UB}

@{B}Syntax:@{UB}  result.s = file_GetDosName \{fid.l\}

@{B}Description:@{UB}
Get the real full filename.
Same like file_fullname, but based on what the dos.library says about the name, rather than how you opended the file.
This may resolve assigns or current directories.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      
- result.s     : real dos.library file name including path

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_GetFH "file_GetFH"

@{B}file_GetFH@{UB}

@{B}Syntax:@{UB}  *fh.l = file_GetFH \{fid.l\}

@{B}Description:@{UB}
Return the AmigaOS file handle associated with the open file.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      
- *fh.FileHandle     : pointer to an AmigaOS file handle

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_GetFreeFID "file_GetFreeFID"

@{B}file_GetFreeFID@{UB}

@{B}Syntax:@{UB}  fid.l = file_GetFreeFID \{\}

@{B}Description:@{UB}
* private *
Find a free file object ID.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- fid.l     : file object ID

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_GetFullName "file_GetFullName"

@{B}file_GetFullName@{UB}

@{B}Syntax:@{UB}  result.s = file_GetFullName \{fid.l\}

@{B}Description:@{UB}
Get the full filename of the open file referenced by the file object ID.
The full filename contains path+file.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      
- result.s     : filename

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_GetIOErr "file_GetIOErr"

@{B}file_GetIOErr@{UB}

@{B}Syntax:@{UB}  error.s = file_GetIOErr \{\}

@{B}Description:@{UB}
Return the plain text string of the last dos.library error.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- error.s     : dos.library error text, e.g. "Disk object not found!"

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_GetLength "file_GetLength"

@{B}file_GetLength@{UB}

@{B}Syntax:@{UB}  length.l = file_GetLength \{fid.l\}

@{B}Description:@{UB}
Get the length in bytes of the open file.
NOTE: this works on files open for reading and writing.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      
- length.l     : length in bytes

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_GetName "file_GetName"

@{B}file_GetName@{UB}

@{B}Syntax:@{UB}  result.s = file_GetName \{fid.l\}

@{B}Description:@{UB}
Get the file name associated with the open file object ID.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      
- result.s     : file name (without path)

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_GetPath "file_GetPath"

@{B}file_GetPath@{UB}

@{B}Syntax:@{UB}  result.s = file_GetPath \{fid.l\}

@{B}Description:@{UB}
Get the path of the open file.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      
- result.s     : path (e.g. "DH0:MyFiles")

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_GetSeekPos "file_GetSeekPos"

@{B}file_GetSeekPos@{UB}

@{B}Syntax:@{UB}  result.l = file_GetSeekPos \{fid.l\}

@{B}Description:@{UB}
Get the current file seek position.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      
- result.l     : file position

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_GetTagFloat "file_GetTagFloat"

@{B}file_GetTagFloat@{UB}

@{B}Syntax:@{UB}  result.f = file_GetTagFloat \{\}

@{B}Description:@{UB}
Get the last read tag interpreted as a 32bit float value.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.f     : float value

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_GetTagString "file_GetTagString"

@{B}file_GetTagString@{UB}

@{B}Syntax:@{UB}  result.s = file_GetTagString \{\}

@{B}Description:@{UB}
Interpret the read tag as a string.
It is highly recommended to name a string tag with a "$" sign at the end, so that unknown tags can be skipped.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.s     : a string

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_GetTagValue "file_GetTagValue"

@{B}file_GetTagValue@{UB}

@{B}Syntax:@{UB}  result.l = file_GetTagValue \{\}

@{B}Description:@{UB}
Interpet the tag value as a 32 bit integer.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      
- result.l     : integer value

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_Identify "file_Identify"

@{B}file_Identify@{UB}

@{B}Syntax:@{UB}  result.s = file_Identify \{filename.s\}

@{B}Description:@{UB}
* private *
Try to identify the file, works only for audio formats.

@{B}Inputs:@{UB}      
- filename.s    : ???

@{B}Result:@{UB}      
- result.s     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_IsOpen "file_IsOpen"

@{B}file_IsOpen@{UB}

@{B}Syntax:@{UB}  fid.l = file_IsOpen \{name.s\}

@{B}Description:@{UB}
Check if the file is already opened via dos.inlcude and return the file object ID.

@{B}Inputs:@{UB}      
- name.s    : filename (including path)

@{B}Result:@{UB}      
- fid.l     : file object ID or -1 if the file is not open

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_IsUsed "file_IsUsed"

@{B}file_IsUsed@{UB}

@{B}Syntax:@{UB}  result.w = file_IsUsed \{fid.l\}

@{B}Description:@{UB}
Check the file object ID if it is valid (= associated file is open).

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      
- result.w     : -1 if the file is open, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_LFlip "file_LFlip"

@{B}file_LFlip@{UB}

@{B}Syntax:@{UB}  result.l = file_LFlip \{value.l\}

@{B}Description:@{UB}
* private *
Perform 32bit endian flip of the value.

@{B}Inputs:@{UB}      
- value.l    : 32bit value

@{B}Result:@{UB}      
- result.l     : 32 bit value in changed endianess

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_Lock "file_Lock"

@{B}file_Lock@{UB}

@{B}Syntax:@{UB} file_Lock \{fid.l\}

@{B}Description:@{UB}
* private *
Lock a file object ID. It can not be used by @{" file_Open " link file_Open} anymore.
This way you can reserve a certain file object ID.
Note: Use it only if you really know what you are doing.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_Open "file_Open"

@{B}file_Open@{UB}

@{B}Syntax:@{UB}  fid.l = file_Open \{name.s,mode.l,@extention.s\}

@{B}Description:@{UB}
Open a file and return file object ID on success, or -1 if it failed.
NOTE: Always check for fid>=0 for success. [0...#max_files-1] is a valid file object ID, -1 is not.

@{B}Inputs:@{UB}      
- name.s    : file name including path
- extention.s    : optionally file extention to set automatically
- mode.w    : can be one of
    #file_read
Open the file for read access.
Fails if the file does not exist.
However, writing is also allowed too.
    #file_forcewrite
Open the file for write access.
Creates a new file for writing. If the file already exists, it will be overwritten.
You are the exclusive owner of the file, not other program can access it while you have it open.
However, you can also read from the file.
    #file_write
Same like #file_forcewrite, but with asking before it overwrites anyexisting file.
    #file_open
Open the file for read/write access without overwriting the content.
The file is created if it does not exist.
Other programs can open the file while you have access to it.
- mode.l    : ???

@{B}Result:@{UB}      
- fid.l     : file object ID or -1 if it failed.

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_ReadBB2Line "file_ReadBB2Line"

@{B}file_ReadBB2Line@{UB}

@{B}Syntax:@{UB}  result.s = file_ReadBB2Line \{fid.l\}

@{B}Description:@{UB}
Read a line from an bb2 (BlitzBasic source code) tokenized source code.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      
- result.s     : string that contains a line of the sourcecode.

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_ReadByte "file_ReadByte"

@{B}file_ReadByte@{UB}

@{B}Syntax:@{UB}  result.b =  file_ReadByte \{fid.l\}

@{B}Description:@{UB}
Read 1 byte from the file and interpret them as a signed byte.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      
- result.b     : byte that was read

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_ReadFloat "file_ReadFloat"

@{B}file_ReadFloat@{UB}

@{B}Syntax:@{UB}  result.f =  file_ReadFloat \{fid.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- fid.l    : ???

@{B}Result:@{UB}      
- result.f     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_ReadLine "file_ReadLine"

@{B}file_ReadLine@{UB}

@{B}Syntax:@{UB}  result.s = file_ReadLine \{fid.l\}

@{B}Description:@{UB}
Read a line from a textfile, can be Amiga (\\n) or Windows return code (\\r\\n).
NOTE: If the file has reached the end, this function returns the empty string. To detect the end of file, use @{" file_EOF " link file_EOF}.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      
- result.s     : One line of a text file

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_ReadLinex "file_ReadLinex"

@{B}file_ReadLinex@{UB}

@{B}Syntax:@{UB}  result.s = file_ReadLinex \{fid.l\}

@{B}Description:@{UB}
* private *
Line @{" file_ReadLine " link file_ReadLine}, but does some wired textiltering too.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      
- result.s     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_ReadLong "file_ReadLong"

@{B}file_ReadLong@{UB}

@{B}Syntax:@{UB}  result.l =  file_ReadLong \{fid.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- fid.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_ReadMem "file_ReadMem"

@{B}file_ReadMem@{UB}

@{B}Syntax:@{UB}  result.l =  file_ReadMem \{fid.l,destaddr.l,blength.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- fid.l    : ???
- destaddr.l    : ???
- blength.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_ReadString "file_ReadString"

@{B}file_ReadString@{UB}

@{B}Syntax:@{UB}  result.s = file_ReadString \{fid.l,@limit.l\}

@{B}Description:@{UB}
Read a string from a binary file, previous store using "file_writestring".
The format of the string in the file is

$LLLLLLLLMyString$00

Where
$LLLLLLLL is a 4 byte value that specifies the length of the string.
MyString is the acutal string.
$00 is the terminating 0 byte.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- limit.l    : Maximum characters allowed (this is for protection if you read Garbadge)

@{B}Result:@{UB}      
- result.s     : a string

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_ReadString2 "file_ReadString2"

@{B}file_ReadString2@{UB}

@{B}Syntax:@{UB}  result.s = file_ReadString2 \{fid.l\}

@{B}Description:@{UB}
Same like @{" file_ReadString " link file_ReadString}, but without some wired terminating character testing. (<32)

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      
- result.s     : a string

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_ReadTag "file_ReadTag"

@{B}file_ReadTag@{UB}

@{B}Syntax:@{UB}  result.l = file_ReadTag \{fid.l\}

@{B}Description:@{UB}
Read a tag from a file.
Note: A tag is usually a 4 byte identifier followed by a 4 byte data value.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_ReadWord "file_ReadWord"

@{B}file_ReadWord@{UB}

@{B}Syntax:@{UB}  result.w =  file_ReadWord \{fid.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- fid.l    : ???

@{B}Result:@{UB}      
- result.w     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_Seek "file_Seek"

@{B}file_Seek@{UB}

@{B}Syntax:@{UB}  result.w = file_Seek \{fid.l,filepos.l\}

@{B}Description:@{UB}
Seek wihtin a file to a fix position.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- filepos.l    : seek position within the file. 0 is the begin of file.

@{B}Result:@{UB}      
- result.w     : -1 if everything went well, 0 if it failed

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_SeekRel "file_SeekRel"

@{B}file_SeekRel@{UB}

@{B}Syntax:@{UB}  result.w =  file_SeekRel \{fid.l,offset.l\}

@{B}Description:@{UB}
Same like @{" file_Seek " link file_Seek}, but seek relative to the current file position.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- offset.l    : offset to seek from the current position, might be negative

@{B}Result:@{UB}      
- result.w     : -1 if everything went well, 0 if it failed

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_SetASLPath "file_SetASLPath"

@{B}file_SetASLPath@{UB}

@{B}Syntax:@{UB} file_SetASLPath \{path.s,fil.s,patt.s\}

@{B}Description:@{UB}
Set the default path, file and pattern for the ASL requester.

@{B}Inputs:@{UB}      
- path.s    : disk path
- fil.s    : file name, might be empty
- patt.s    : dos pattern, e.g. "#?.mp3" to show only mp3 files in ASL requester

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_SetASLPos "file_SetASLPos"

@{B}file_SetASLPos@{UB}

@{B}Syntax:@{UB} file_SetASLPos \{x.l,y.l,xs.l,ys.l\}

@{B}Description:@{UB}
Set the pixel dimensions of the ASL requester.

@{B}Inputs:@{UB}      
- x.l    : left edge
- y.l    : top edge
- xs.l    : width
- ys.l    : height

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_SetBufferSize "file_SetBufferSize"

@{B}file_SetBufferSize@{UB}

@{B}Syntax:@{UB} file_SetBufferSize \{fid.l,@buffsize.l\}

@{B}Description:@{UB}
Set the cache buffer size for an open file.
Increasing the buffer can lead to faster reading/writing, but not always.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- buffsize.l    : new buffer size in bytes (should be >4096)

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_SetLittleEndian "file_SetLittleEndian"

@{B}file_SetLittleEndian@{UB}

@{B}Syntax:@{UB} file_SetLittleEndian \{fid.l\}

@{B}Description:@{UB}
Set the file to Intel mode, means all chunks and values are interpreted as little endian.
This influences only @{" file_WriteChunk " link file_WriteChunk}, @{" file_FindChunk " link file_FindChunk}, @{" file_GetChunk " link file_GetChunk}.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_Unlock "file_Unlock"

@{B}file_Unlock@{UB}

@{B}Syntax:@{UB} file_Unlock \{fid.l\}

@{B}Description:@{UB}
Unlock a file previously locked by @{" file_Lock " link file_Lock}.

@{B}Inputs:@{UB}      
- fid.l    : file object ID

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_WFlip "file_WFlip"

@{B}file_WFlip@{UB}

@{B}Syntax:@{UB}  result.w = file_WFlip \{value.w\}

@{B}Description:@{UB}
Change endianess of a 16 bit value.

@{B}Inputs:@{UB}      
- value.w    : 16 bit value

@{B}Result:@{UB}      
- result.w     : 16 bit value with changed endianess

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_WriteBB2Line "file_WriteBB2Line"

@{B}file_WriteBB2Line@{UB}

@{B}Syntax:@{UB}  result.l = file_WriteBB2Line \{fid.l,a.s\}

@{B}Description:@{UB}
Write a string as an .bb2 source code line. (BlitzBasic)

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- a.s    : text line

@{B}Result:@{UB}      
- result.l     : -1 if everything went well, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_WriteByte "file_WriteByte"

@{B}file_WriteByte@{UB}

@{B}Syntax:@{UB}  result.l =  file_WriteByte \{fid.l,byte8.b\}

@{B}Description:@{UB}
Write a byte to a file.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- byte8.b    : byte

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_WriteChunk "file_WriteChunk"

@{B}file_WriteChunk@{UB}

@{B}Syntax:@{UB}  result.w = file_WriteChunk \{fid.l,head.l,@blength.l,@nowordalign.l\}

@{B}Description:@{UB}
Write a chunk to a file.
NOTE: if you know the size of the chunk, you can supply it via blength.l, this will give a little speed up. If blength is not correct or -1, it will be corrected on @{" file_CloseChunk " link file_CloseChunk}.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- head.l    : 4 byte chunk identifier
- blength.l    : byte length, if known
- nowordalign.l    : 0=do word alignment (write a 0 byte if the chunk ends on an odd address), -1 = no alignment

@{B}Result:@{UB}      
- result.w     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_WriteFloat "file_WriteFloat"

@{B}file_WriteFloat@{UB}

@{B}Syntax:@{UB}  result.l =  file_WriteFloat \{fid.l,float32.f\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- fid.l    : ???
- float32.f    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_WriteLine "file_WriteLine"

@{B}file_WriteLine@{UB}

@{B}Syntax:@{UB}  result.l = file_WriteLine \{fid.l,textline.s\}

@{B}Description:@{UB}
Write a string as a line of a text file.

@{B}Inputs:@{UB}      
- fid.l       : file object ID
- textline.s  : string

@{B}Result:@{UB}      
- result.l    : -1 if everything went well, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_WriteLong "file_WriteLong"

@{B}file_WriteLong@{UB}

@{B}Syntax:@{UB}  result.l =  file_WriteLong \{fid.l,long32.l\}

@{B}Description:@{UB}
Write a long integer (32 bit) to a file.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- long32.l    : 32 bit integer value

@{B}Result:@{UB}      
- result.l     : -1 if everything went well, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_WriteMem "file_WriteMem"

@{B}file_WriteMem@{UB}

@{B}Syntax:@{UB}  result.w = file_WriteMem \{fid.l,sourceaddr.l,blength.l\}

@{B}Description:@{UB}
Write a memory block to a file.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- sourceaddr.l    : address to read data from
- blength.l    : byte length

@{B}Result:@{UB}      
- result.w     : -1 if everything went well, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_WriteString "file_WriteString"

@{B}file_WriteString@{UB}

@{B}Syntax:@{UB}  result.l = file_WriteString \{fid.l,string.s\}

@{B}Description:@{UB}
Write a string to a binary file in a way that it can be read by @{" file_ReadString " link file_ReadString}.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- string.s    : string to write

@{B}Result:@{UB}      
- result.l     : -1 if everything went well, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_WriteTag "file_WriteTag"

@{B}file_WriteTag@{UB}

@{B}Syntax:@{UB}  result.l = file_WriteTag \{fid.l,tag.l,value.l\}

@{B}Description:@{UB}
Write a tag to the file.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- tag.l    : tag identiefier, e.g. @"TAG_"
- value.l    : value

@{B}Result:@{UB}      
- result.l     : -1 if everything went well, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_WriteTagString "file_WriteTagString"

@{B}file_WriteTagString@{UB}

@{B}Syntax:@{UB}  result.l = file_WriteTagString \{fid.l,tag.l,string.s\}

@{B}Description:@{UB}
Write a string tag.
NOTE: It is highly recommended to name the tag with a "$" at the end, so it can be automatically skipped.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- tag.l    : tag name, e.g. @"TAG$"
- string.s    : string

@{B}Result:@{UB}      
- result.l     : -1 if everything went well, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE file_WriteWord "file_WriteWord"

@{B}file_WriteWord@{UB}

@{B}Syntax:@{UB}  result.l =  file_WriteWord \{fid.l,word16.w\}

@{B}Description:@{UB}
Write a 16 bit integer to a file.

@{B}Inputs:@{UB}      
- fid.l    : file object ID
- word16.w    : 16 bit integer

@{B}Result:@{UB}      
- result.l     : -1 if everything went well, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
