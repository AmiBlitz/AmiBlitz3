@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "vvblank.include"

@{B}vvblank.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" vvblank_Free " link vvblank_Free} 
   @{" vvblank_Init " link vvblank_Init} 
   @{" vvblank_ResetSync " link vvblank_ResetSync} 
   @{" vvblank_SetFreq " link vvblank_SetFreq} 
   @{" vvblank_Wait " link vvblank_Wait} 
   @{" vvblank_WaitSync " link vvblank_WaitSync} 

@{B}Private Function Index:@{UB}

   @{" _vvblank_Send " link _vvblank_Send} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB} vvblank.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 30/12/2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB}  Amiblitz2.4

@{B}Purpose:@{UB}
This include replaces the vwait command with a "virtual vertical blank" that is configurable in frequency (e.g. 100Hz). Main purpose is to time graphical output for games that should run on graphicscards.

@{B}Abstract:@{UB}
The simpliest way to use it is to replace VWait with @{" vvblank_Wait " link vvblank_Wait}. But you have more control over the "vblank".

@{B}User Constants:@{UB}

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _vvblank_Send "_vvblank_Send"

@{B}_vvblank_Send@{UB}

@{B}Syntax:@{UB} _vvblank_Send \{@vcycles.l\}

@{B}Description:@{UB}
Experimental only.

@{B}Inputs:@{UB}      
- vcycles.l : Number of VBlanks to wait, normaly this should be 1

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE vvblank_Free "vvblank_Free"

@{B}vvblank_Free@{UB}

@{B}Syntax:@{UB} vvblank_Free \{\}

@{B}Description:@{UB}
Free all resources associated with the vvblank.include.
NOTE: This function is autoexit, so you do not have to call this by your own.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE vvblank_Init "vvblank_Init"

@{B}vvblank_Init@{UB}

@{B}Syntax:@{UB}  succ.l = vvblank_Init \{@hz.f\}

@{B}Description:@{UB}
Init the vvblank and optionally set the desired frequency. A reasonable range is 25 to 200, default is 50Hz

@{B}Inputs:@{UB}      
- hz.f    : Hz of vvblank timer

@{B}Result:@{UB}      
- succ.l     : -1 if everything went well, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE vvblank_ResetSync "vvblank_ResetSync"

@{B}vvblank_ResetSync@{UB}

@{B}Syntax:@{UB} vvblank_ResetSync \{\}

@{B}Description:@{UB}
Tell vvblank_wait_sync where to start counting the ticks.

@{B}Inputs:@{UB}      none

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" vvblank_WaitSync " link vvblank_WaitSync}




@ENDNODE
@NODE vvblank_SetFreq "vvblank_SetFreq"

@{B}vvblank_SetFreq@{UB}

@{B}Syntax:@{UB}  succ.l = vvblank_SetFreq \{hz.f\}

@{B}Description:@{UB}
Sets the desired frequency. A reasonable range is 25 to 200, default is 50Hz

@{B}Inputs:@{UB}      
- hz.f    : Hz of vvblank timer

@{B}Result:@{UB}      
- succ.l     : -1 if everything went well, 0 otherwise

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE vvblank_Wait "vvblank_Wait"

@{B}vvblank_Wait@{UB}

@{B}Syntax:@{UB} vvblank_Wait \{@vcycles.l\}

@{B}Description:@{UB}
Operates exactly like the VWait command. It waits for the next VBlank tick.

@{B}Inputs:@{UB}      
- vcycles.l : Number of VBlanks to wait, normaly this should be 1

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE vvblank_WaitSync "vvblank_WaitSync"

@{B}vvblank_WaitSync@{UB}

@{B}Syntax:@{UB} vvblank_WaitSync \{@vcycles.l\}

@{B}Description:@{UB}
Like @{" vvblank_Wait " link vvblank_Wait}, but it counts the vblank ticks. If you missed one tick (because your program was to slow) this function will return immediately until you are in sync again.
To tell this function when to start you have to call @{" vvblank_ResetSync " link vvblank_ResetSync} just before your main loop. Be careful with this function, because if your program hangs for a while, it will rush very fast till it is in sync again.
I recommend to use vvlbank_wait, as is has the best behavior in most situations.

@{B}Inputs:@{UB}      
- vcycles.l    : vblank cycles to wait

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        This function has a small bug when wrapping the 32bit it is a bit too fast for one frame. But this is not serious.


@{B}See also:@{UB}    @{" vvblank_ResetSync " link vvblank_ResetSync}




@ENDNODE
