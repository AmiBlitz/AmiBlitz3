@Database "AB3Includes"
@Width 80
@font helvetica.font 13
@wordwrap
@TAB 3

@NODE main "fft.include"

@{B}fft.include@{UB}

@{B}Abstract@{UB}

   @{" Introduction " link Introduction} 

@{B}Public Function Index:@{UB}

   @{" fft_Bin2Freq " link fft_Bin2Freq} 
   @{" fft_Create " link fft_Create} 
   @{" fft_Do16m " link fft_Do16m} 
   @{" fft_Do32m " link fft_Do32m} 
   @{" fft_Do32s " link fft_Do32s} 
   @{" fft_Free " link fft_Free} 
   @{" fft_Freq2Bin " link fft_Freq2Bin} 
   @{" fft_GetMinOrder " link fft_GetMinOrder} 
   @{" fft_MagPha2SinCos " link fft_MagPha2SinCos} 
   @{" fft_Order2Points " link fft_Order2Points} 
   @{" fft_ResynthStereo " link fft_ResynthStereo} 
   @{" fft_ResynthStereox " link fft_ResynthStereox} 
   @{" fft_SetHammingWindow " link fft_SetHammingWindow} 
   @{" fft_SetHanningWindow " link fft_SetHanningWindow} 
   @{" fft_SetRectWindow " link fft_SetRectWindow} 
   @{" fft_SetWindow " link fft_SetWindow} 
   @{" fft_SinCos2MagPha " link fft_SinCos2MagPha} 
   @{" fft_SinCos2Magnitude " link fft_SinCos2Magnitude} 
   @{" fft_SinCos2Phase " link fft_SinCos2Phase} 
   @{" fft_SinCos2Power " link fft_SinCos2Power} 
   @{" ifft_Do16m " link ifft_Do16m} 
   @{" ifft_Do32m " link ifft_Do32m} 
   @{" ifft_Do32s " link ifft_Do32s} 

@{B}Private Function Index:@{UB}

   @{" _fft " link _fft} 
   @{" _fft_MakePTable " link _fft_MakePTable} 
   @{" _fft_MakePeriodTable " link _fft_MakePeriodTable} 
   @{" _fft_MakeSinTable " link _fft_MakeSinTable} 
   @{" _fft_MergeMono16 " link _fft_MergeMono16} 
   @{" _fft_MergeMono32 " link _fft_MergeMono32} 
   @{" _fft_MergeStereo " link _fft_MergeStereo} 
   @{" _fft_PermutateComplex " link _fft_PermutateComplex} 
   @{" _fft_PermutateComplexx " link _fft_PermutateComplexx} 
   @{" _fft_PermutateMono16 " link _fft_PermutateMono16} 
   @{" _fft_PermutateMono32 " link _fft_PermutateMono32} 
   @{" _fft_PermutateStereo " link _fft_PermutateStereo} 

@{B}Public Macro Index:@{UB}

 * no macros defined * 

@ENDNODE
@NODE Introduction "Introduction"

@{B}Name:@{UB}  fft.include

@{B}Platforms:@{UB} Classic, WinUAE, Amithlon, MorphOS, AmigaOS4

@{B}Date:@{UB} 18.08.2006

@{B}Author:@{UB} Thilo Koehler

@{B}Requirements:@{UB} Amiblitz2.4

@{B}Purpose:@{UB}
Provide FFT (Fast Fourier Transformation) related functions to AB2.

@{B}Abstract:@{UB}
This FFT algorithm computes the spectrum out of a 32bit integer array
of samples. The result are 32bit float complex values = 64bit/sample.
You have to allocate the buffers on your own.
There is also the inverse FFT to transform the spectrum back to time domain.
See example below!

@{B}User Constants:@{UB} none

@{B}Example:@{UB}     
. Newtype.complex
. r.f : i.f
. End Newtype
.
. Dim Waveform.l(8)
. Dim Spectrum.complex(8)
. Dim Magnitude.f(8)
. Dim Phase.f(8)
. *fft.fftH = @{" fft_Create " link fft_Create} \{3\}  ; create our FFT context of order 3 = 8 samples window
.
. ; convert from time space to frequency space
. fft_DoMono \{*fft,&Waveform(0),&Spectrum(0)\}
.
. @{" fft_SinCos2MagPha " link fft_SinCos2MagPha} \{*fft,&Spectrum(0),&Magnitude(0),&Phase(0)\}
.
. ; convert from frequency space to time space
. ifft_DoMono \{*fft,&Spectrum(0),&Waveform(0)\}
.
. fft_Free\{*fft\}
. End



@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _fft "_fft"

@{B}_fft@{UB}

@{B}Syntax:@{UB} _fft \{*fftH.fftH,buffer_dst.l,dir.l\}

@{B}Description:@{UB}
* private *
This is acutally doing the FFT algorithm.

@{B}Inputs:@{UB}      
- *fftH.fftH    : handle to the FFT context
- buffer_dst.l  : destination buffer for sin/cos values
- dir.l         : direction (0=FFT, -1 = inverse FFT)

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _fft_MakePTable "_fft_MakePTable"

@{B}_fft_MakePTable@{UB}

@{B}Syntax:@{UB}  result.l = _fft_MakePTable \{order.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- order.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _fft_MakePeriodTable "_fft_MakePeriodTable"

@{B}_fft_MakePeriodTable@{UB}

@{B}Syntax:@{UB}  result.l = _fft_MakePeriodTable \{order.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- order.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _fft_MakeSinTable "_fft_MakeSinTable"

@{B}_fft_MakeSinTable@{UB}

@{B}Syntax:@{UB}  result.l = _fft_MakeSinTable \{order.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- order.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _fft_MergeMono16 "_fft_MergeMono16"

@{B}_fft_MergeMono16@{UB}

@{B}Syntax:@{UB} _fft_MergeMono16 \{*fftH.fftH,buffer_src.l,buffer_dst.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *fftH.fftH    : ???
- buffer_src.l    : ???
- buffer_dst.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _fft_MergeMono32 "_fft_MergeMono32"

@{B}_fft_MergeMono32@{UB}

@{B}Syntax:@{UB} _fft_MergeMono32 \{*fftH.fftH,buffer_src.l,buffer_dst.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- *fftH.fftH    : handle to an FFT context
- buffer_src.l  : ???
- buffer_dst.l  : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _fft_MergeStereo "_fft_MergeStereo"

@{B}_fft_MergeStereo@{UB}

@{B}Syntax:@{UB} _fft_MergeStereo \{*fftH.fftH,buffer_src_l.l,buffer_src_r.l,buffer_dst.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- *fftH.fftH     : handle to an FFT context
- buffer_src_l.l : ???
- buffer_src_r.l : ???
- buffer_dst.l   : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _fft_PermutateComplex "_fft_PermutateComplex"

@{B}_fft_PermutateComplex@{UB}

@{B}Syntax:@{UB} _fft_PermutateComplex \{*fftH.fftH,buffer_src.l,buffer_dst.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- *fftH.fftH    : handle to an FFT context
- buffer_src.l  : ???
- buffer_dst.l  : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _fft_PermutateComplexx "_fft_PermutateComplexx"

@{B}_fft_PermutateComplexx@{UB}

@{B}Syntax:@{UB} _fft_PermutateComplexx \{*fftH.fftH,buffer_src.l,buffer_dst.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *fftH.fftH      : ???
- buffer_src.l    : ???
- buffer_dst.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _fft_PermutateMono16 "_fft_PermutateMono16"

@{B}_fft_PermutateMono16@{UB}

@{B}Syntax:@{UB} _fft_PermutateMono16 \{*fftH.fftH,buffer_src.l,buffer_dst.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *fftH.fftH    : ???
- buffer_src.l    : ???
- buffer_dst.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _fft_PermutateMono32 "_fft_PermutateMono32"

@{B}_fft_PermutateMono32@{UB}

@{B}Syntax:@{UB} _fft_PermutateMono32 \{*fftH.fftH,buffer_src.l,buffer_dst.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- *fftH.fftH    : handle to an FFT context
- buffer_src.l    : ???
- buffer_dst.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE _fft_PermutateStereo "_fft_PermutateStereo"

@{B}_fft_PermutateStereo@{UB}

@{B}Syntax:@{UB} _fft_PermutateStereo \{*fftH.fftH,buffer_src.l,buffer_dst_l.l,buffer_dst_r.l\}

@{B}Description:@{UB}
* private *

@{B}Inputs:@{UB}      
- *fftH.fftH      : ???
- buffer_src.l    : ???
- buffer_dst_l.l  : ???
- buffer_dst_r.l  : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE fft_Bin2Freq "fft_Bin2Freq"

@{B}fft_Bin2Freq@{UB}

@{B}Syntax:@{UB}  result.f = fft_Bin2Freq \{order.l,samplerate.f,binN.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- order.l    : ???
- samplerate.f    : ???
- binN.l    : ???

@{B}Result:@{UB}      
- result.f     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE fft_Create "fft_Create"

@{B}fft_Create@{UB}

@{B}Syntax:@{UB}  result.l = fft_Create \{order.l\}

@{B}Description:@{UB}
Create an FFT context and return the handle that is used for all functions.
Order can be anything from 1 to 26.
Note: an FFT window of order 26 would nearly need 2GB of memory.
For audio applications, you use orders in the range of 6-13.

@{B}Inputs:@{UB}      
- order.l    : order of your FFT window (number of samples = 2^order)

@{B}Result:@{UB}      
- result.l     : handle to an FFT context, or 0 if it failed

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE fft_Do16m "fft_Do16m"

@{B}fft_Do16m@{UB}

@{B}Syntax:@{UB} fft_Do16m \{*fftH.fftH,buffer_src.l,buffer_dst.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *fftH.fftH    : ???
- buffer_src.l    : ???
- buffer_dst.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE fft_Do32m "fft_Do32m"

@{B}fft_Do32m@{UB}

@{B}Syntax:@{UB} fft_Do32m \{*fftH.fftH,buffer_src.l,buffer_dst.l\}

@{B}Description:@{UB}
Perform FFT on 32bit integer mono sample array -> 2 x 32 float values (complex).
The resulting values represent the sin and cos part of the singal. To convert it to something displayable in a spectral analyzer, use @{" fft_SinCos2MagPha " link fft_SinCos2MagPha} or fft_SinCos2PowPha.

@{B}Inputs:@{UB}      
- *fftH.fftH      : handle to an FFT context
- buffer_src.l    : buffer of npoints 32 bit signed integer values
- buffer_dst.l    : buffer of npoints complex values, means 2*npoints 32bit floats

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    fft_do_stereo, ifft_do_mono




@ENDNODE
@NODE fft_Do32s "fft_Do32s"

@{B}fft_Do32s@{UB}

@{B}Syntax:@{UB} fft_Do32s \{*fftH.fftH,buffer_src.l,buffer_dst_l.l,buffer_dst_r.l\}

@{B}Description:@{UB}
Perform FFT on 32bit integer stereo sample array -> 4 x 32 float values (complex).

@{B}Inputs:@{UB}      
- *fftH.fftH    : handle to an FFT context
- buffer_src.l  : buffer of 2*npoints 32 bit signed integer values
- buffer_dst_l.l: buffer of npoints complex values, means 2*npoints 32bitfloats to hold the left channel
- buffer_dst_r.l: buffer of npoints complex values, means 2*npoints 32bitfloats to hold the right channel

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    fft_do_mono, ifft_do_stereo




@ENDNODE
@NODE fft_Free "fft_Free"

@{B}fft_Free@{UB}

@{B}Syntax:@{UB} fft_Free \{*fftH.fftH\}

@{B}Description:@{UB}
Free all data associated with the FFT handle

@{B}Inputs:@{UB}      
- *fftH.fftH    : handle to an FFT context

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" fft_Create " link fft_Create}




@ENDNODE
@NODE fft_Freq2Bin "fft_Freq2Bin"

@{B}fft_Freq2Bin@{UB}

@{B}Syntax:@{UB}  result.l = fft_Freq2Bin \{order.l,samplerate.f,frequency.f\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- order.l    : ???
- samplerate.f    : ???
- frequency.f    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE fft_GetMinOrder "fft_GetMinOrder"

@{B}fft_GetMinOrder@{UB}

@{B}Syntax:@{UB}  result.l = fft_GetMinOrder \{winSizeMs.f,samplerate.f\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- winSizeMs.f    : ???
- samplerate.f    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE fft_MagPha2SinCos "fft_MagPha2SinCos"

@{B}fft_MagPha2SinCos@{UB}

@{B}Syntax:@{UB} fft_MagPha2SinCos \{*fftH.fftH,buffer_magnitude.l,buffer_phase.l,buffer_dst.l,@bmod_m.l,@bmod_p.l\}

@{B}Description:@{UB}
Convert magnitude/phase representation of the spectrum to sinus/cosinus.

@{B}Inputs:@{UB}      
- *fftH.fftH        : handle to an FFT context
- buffer_magnitude.l: buffer that holds npoints float magnitude values.
- buffer_phase.l    : buffer that holds npoints float phase values
- buffer_dst.l      : buffer that will be filled with 2*npoints floats
- bmod_m.l    : ???
- bmod_p.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    @{" fft_SinCos2MagPha " link fft_SinCos2MagPha}












@ENDNODE
@NODE fft_Order2Points "fft_Order2Points"

@{B}fft_Order2Points@{UB}

@{B}Syntax:@{UB}  result.l = fft_Order2Points \{order.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- order.l    : ???

@{B}Result:@{UB}      
- result.l     : ???

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE fft_ResynthStereo "fft_ResynthStereo"

@{B}fft_ResynthStereo@{UB}

@{B}Syntax:@{UB} fft_ResynthStereo \{*fftH.fftH,buffer_src_l.l,buffer_src_r.l,buffer_dst.l,nlength.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *fftH.fftH    : ???
- buffer_src_l.l    : ???
- buffer_src_r.l    : ???
- buffer_dst.l    : ???
- nlength.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE fft_ResynthStereox "fft_ResynthStereox"

@{B}fft_ResynthStereox@{UB}

@{B}Syntax:@{UB} fft_ResynthStereox \{*fftH.fftH,buffer_src_l.l,buffer_src_r.l,buffer_dst.l,nlength.l\}

@{B}Description:@{UB}
Convert from magnitude/phase back to timedomain, similar to iFFT but with variable length.
Note: This functions is still experimental, and might not lead to the results you expect.

@{B}Inputs:@{UB}      
- *fftH.fftH     : handle to an FFT context
- buffer_src_l.l : ???
- buffer_src_r.l : ???
- buffer_dst.l   : ???
- nlength.l      : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE fft_SetHammingWindow "fft_SetHammingWindow"

@{B}fft_SetHammingWindow@{UB}

@{B}Syntax:@{UB} fft_SetHammingWindow \{*fftH.fftH\}

@{B}Description:@{UB}
Init a hamming window for the given FFT context.
This is used to reduce the leaking effect for analysing a short time window of a signal.

@{B}Inputs:@{UB}      
- *fftH.fftH    : handle to an FFT context

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE fft_SetHanningWindow "fft_SetHanningWindow"

@{B}fft_SetHanningWindow@{UB}

@{B}Syntax:@{UB} fft_SetHanningWindow \{*fftH.fftH\}

@{B}Description:@{UB}
Init a hanning window for the given FFT context.
This is used to reduce the leaking effect for analysing a short time window of a signal.

@{B}Inputs:@{UB}      
- *fftH.fftH    : handle to an FFT context

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE fft_SetRectWindow "fft_SetRectWindow"

@{B}fft_SetRectWindow@{UB}

@{B}Syntax:@{UB} fft_SetRectWindow \{*fftH.fftH\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *fftH.fftH    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE fft_SetWindow "fft_SetWindow"

@{B}fft_SetWindow@{UB}

@{B}Syntax:@{UB} fft_SetWindow \{*fftH.fftH,alpha.f,beta.f\}

@{B}Description:@{UB}
init a window function. This is used to create the Hamming or Hanning window.
The acutal function is:

For n.l=0 To npoints-1
   win(n) = alpha - beta*Cos(2.0 * Pi / (npoints-1) * n)
Next

where npoints is the number of samples, 2^order of the FFT.

@{B}Inputs:@{UB}      
- *fftH.fftH  : handle to an FFT context
- alpha.f     : alpha parameter
- beta.f      : bete parameter

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE fft_SinCos2MagPha "fft_SinCos2MagPha"

@{B}fft_SinCos2MagPha@{UB}

@{B}Syntax:@{UB} fft_SinCos2MagPha \{*fftH.fftH,buffer_src.l,buffer_magnitude.l,buffer_phase.l,@bmod_m.l,@bmod_p.l\}

@{B}Description:@{UB}
Convert sinus/cosinus representation of the spectrum to magnitude/phase representation.
The buffer to the phase values can be omitted, because usually you want the magnitude values
(e.g. to display them in a visual spectrum analyzer), and the computation of the phase is quite expensive.

@{B}Inputs:@{UB}      
- *fftH.fftH         : handle to an FFT context
- buffer_src.l       : pointer to a buffer that holds 2*npoints floats
- buffer_magnitude.l : pointer to a buffer to fill with npoints floats
- buffer_phase.l     : pointer to a buffer to fill with npoints floats
- bmod_m.l    : ???
- bmod_p.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE fft_SinCos2Magnitude "fft_SinCos2Magnitude"

@{B}fft_SinCos2Magnitude@{UB}

@{B}Syntax:@{UB} fft_SinCos2Magnitude \{*fftH.fftH,buffer_src.l,buffer_ampspec.l,@bmod.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *fftH.fftH    : ???
- buffer_src.l    : ???
- buffer_powerspec.l    : ???
- bmod.l    : ???
- buffer_ampspec.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE fft_SinCos2Phase "fft_SinCos2Phase"

@{B}fft_SinCos2Phase@{UB}

@{B}Syntax:@{UB} fft_SinCos2Phase \{*fftH.fftH,buffer_src.l,buffer_phase.l,@bmod.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *fftH.fftH    : ???
- buffer_src.l    : ???
- buffer_phase.l    : ???
- bmod.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE fft_SinCos2Power "fft_SinCos2Power"

@{B}fft_SinCos2Power@{UB}

@{B}Syntax:@{UB} fft_SinCos2Power \{*fftH.fftH,buffer_src.l,buffer_powerspec.l,@bmod.l\}

@{B}Description:@{UB}
Convert sinus/cosinus representation of the spectrum to power spectrum/phase representation.
The buffer to the phase values can be omitted, because usually you want the power spectrum values
(e.g. to display them in a visual spectrum analyzer), and the computation of the phase is quite expensive.

@{B}Inputs:@{UB}      
- *fftH.fftH        : handle to an FFT context
- buffer_src.l      : pointer to a buffer that holds 2*npoints floats
- buffer_powerspec.l: pointer to a buffer to fill with npoints floats
- bmod.l            : buffer mod for each power value in bytes

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ifft_Do16m "ifft_Do16m"

@{B}ifft_Do16m@{UB}

@{B}Syntax:@{UB} ifft_Do16m \{*fftH.fftH,buffer_src.l,buffer_dst.l\}

@{B}Description:@{UB}
* no description available *

@{B}Inputs:@{UB}      
- *fftH.fftH    : ???
- buffer_src.l    : ???
- buffer_dst.l    : ???

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ifft_Do32m "ifft_Do32m"

@{B}ifft_Do32m@{UB}

@{B}Syntax:@{UB} ifft_Do32m \{*fftH.fftH,buffer_src.l,buffer_dst.l\}

@{B}Description:@{UB}
Perform inverse FFT on sinus/cosinus representation to 32 bit integers.
Convert from frequency to time domain (spectrum to waveform).

@{B}Inputs:@{UB}      
- *fftH.fftH    : handle to an FFT context
- buffer_src.l  : buffer that holds 2*npoints floats
- buffer_dst.l  : buffer that will be filled with npoints 32bit integers

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
@NODE ifft_Do32s "ifft_Do32s"

@{B}ifft_Do32s@{UB}

@{B}Syntax:@{UB} ifft_Do32s \{*fftH.fftH,buffer_src_l.l,buffer_src_r.l,buffer_dst.l\}

@{B}Description:@{UB}
Perform inverse FFT on sinus/cosinus representation to 32bit integers.
Convert from frequency to time domain (spectrum to waveform).

@{B}Inputs:@{UB}      
- *fftH.fftH     : handle to an FFT context
- buffer_src_l.l : buffer that holds 2*npoints floats, representing the sin/cos spectrum of the left channel
- buffer_src_r.l : buffer that holds 2*npoints floats, representing the sin/cos spectrum of the right channel
- buffer_dst.l   : buffer that will be filled with 2*npoints 32bit integer values, representing the waveform
@

@{B}Result:@{UB}      none

@{B}Example:@{UB}     no example

@{B}Bugs:@{UB}        no bugs

@{B}See also:@{UB}    -


@ENDNODE
