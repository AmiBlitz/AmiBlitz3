@DATABASE SERIALLIB
@Author Conversion program
@$VER: SERIALLIB V1.1 (27.01.2007)- Updated by mrodfr.
@NODE OVERVIEW "Overview of SERIALLIB"

                                  @{b}@{u}Overview@{ub}@{uu}


                          An Acid Software Library

                         Converted to AmigaGuide by

                            Red When Excited Ltd

                 Used with the permission of Acid Software

          Edited, fixed and cleaned by Toby Zuijdveld 27/02/1999.
                       mailto:hotcakes\@abacus.net.au



@ENDNODE OVERVIEW

@NODE OpenSerial "SERIALLIB"

@{fg shine}Statement: OpenSerial@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : OpenSerial device$,unit#,baud,io_serflags
 
OpenSerial is used to configure a Serial Port for use. As with 
OpenFile, OpenSerial is a function and returns zero if it fails. If it 
succeeds advanced users may note the return result is the location of 
the IOExtSer structure. The baud rate should be in the range of 
110-292,000. The io_serflags parameter includes the following 
flags:

Bit#	Name	                Effect
bit7	#serf_xdisabled=128	disable xon/xoff 
bit6	#serf_eofmode=64	enable eof checking 
bit5	#serf_shared=32	        set if you don't need exclusive use of port 
bit4	#serf_rad_boogie=16	high speed mode 
bit3	#serf_queuedbrk=8	if set a break command waits for buffer empty 
bit2	#serf_7wire=4	        if set use 7 wire RS232
bit1	#serf_parity_odd=2	select odd parity (even if not set) 
bit0	#serf_parity_on=1	enable parity checking

 
@ENDNODE OpenSerial

@NODE WriteSerial "SERIALLIB"

@{fg shine}Statement: WriteSerial@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : WriteSerial unit#,byte
 
WriteSerial sends one byte to the serial port. Unit# defines which 
serial port is used. If you are sending characters use the Asc() 
function to convert the character to a byte e.g. 
WriteSerial 0,asc("b").


@ENDNODE WriteSerial

@NODE WriteSerialString "SERIALLIB"

@{fg shine}Statement: WriteSerialString@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : WriteSerialString unit#,string[,Flags 1=DoIO 2=TrueString]
 
WriteSerialString is similar to WriteSerial but sends a complete string 
to the serial port.


@ENDNODE WriteSerialString

@NODE ReadSerial "SERIALLIB"

@{fg shine}Function: ReadSerial@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ReadSerial (unit#[,flags 1=wait on])  returns -1 if nothing waiting
 
ReadSerial returns the next byte waiting in the serial port's read 
buffer. If the buffer is empty it returns a -1. It is best to use a 
word type (var.w=ReadSerial(0)) as a byte will not be able to 
differentiate between -1 and 255.


@ENDNODE ReadSerial

@NODE ReadSerialString "SERIALLIB"

@{fg shine}Function: ReadSerialString@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ReadSerialString (unit#)  returns null if nothing waiting
 
ReadSerialString puts the serial port's read buffer into a string, if 
the buffer is empty the function will return a null string 
(length=0).


@ENDNODE ReadSerialString

@NODE CloseSerial "SERIALLIB"

@{fg shine}Statement: CloseSerial@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : CloseSerial unit#
 
The CloseSerial command will close the port, enabling other programs to 
use it. Note: Blitz will automatically close all ports that are opened 
when a program ends.


@ENDNODE CloseSerial

@NODE SetSerialBuffer "SERIALLIB"

@{fg shine}Statement: SetSerialBuffer@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SetSerialBuffer unit#,bufferlength
 
SetSerialBuffer changes the size of the ports read buffer. This may be 
useful if your program is not always handling serial port data or is 
receiving and processing large chunks of data. The smallest size for 
the internal serial port (unit#0) is 64 bytes. The bufferlength 
variable is in bytes.


@ENDNODE SetSerialBuffer

@NODE SetSerialLens "SERIALLIB"

@{fg shine}Statement: SetSerialLens@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SetSerialLens unit#,readlen,writelen,stopbits
 
SetSerialLens allows you to change the size of characters read and 
written by the serial device. Generally readlen=writelen and should be 
set to either 7 or 8, stopbits should be set to 1 or 2. Default values 
are 8,8,1.


@ENDNODE SetSerialLens

@NODE SetSerialParams "SERIALLIB"

@{fg shine}Statement: SetSerialParams@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SetSerialParams unit#
 
For advanced users, SetSerialParams tells the serial port when 
parameters are changed. This would only be necesary if they were 
changed by poking offsets from IOExtSer which is returned by the 
OpenSerial command.


@ENDNODE SetSerialParams

@NODE SerialEvent "SERIALLIB"

@{fg shine}Function: SerialEvent@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SerialEvent (unit#)
 
SerialEvent is used when your program is handling events from more than 
1 source, Windows, ARexx etc. This command is currently not 
implemented


@ENDNODE SerialEvent

@NODE ReadSerialMem "SERIALLIB"

@{fg shine}Statement: ReadSerialMem@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ReadSerialMem unit#,Address,Length



@ENDNODE ReadSerialMem

@NODE WriteSerialMem "SERIALLIB"

@{fg shine}Statement: WriteSerialMem@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : WriteSerialMem unit#,Address,Length
@ENDNODE WriteSerialMem

@NODE MAIN "SERIALLIB"

.-----------------------------------------------------------------------------.
|                                 @{b}SERIALLIB@{ub}                                   |
`-----------------------------------------------------------------------------'

                             @{"     Overview     " link OVERVIEW}

                               Command Index                                

         @{" CloseSerial        " link CloseSerial}                @{" OpenSerial         " link OpenSerial}
         @{" ReadSerial         " link ReadSerial}                @{" ReadSerialMem      " link ReadSerialMem}
         @{" ReadSerialString   " link ReadSerialString}                @{" SerialEvent        " link SerialEvent}
         @{" SetSerialBuffer    " link SetSerialBuffer}                @{" SetSerialLens      " link SetSerialLens}
         @{" SetSerialParams    " link SetSerialParams}                @{" WriteSerial        " link WriteSerial}
         @{" WriteSerialMem     " link WriteSerialMem}                @{" WriteSerialString  " link WriteSerialString}
@ENDNODE MAIN

