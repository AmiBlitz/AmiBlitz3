@DATABASE BBLITLIB
@Author Conversion program
@$VER: BBLITLIB V1.1 (27.01.2007)- Updated by mrodfr.
@NODE OVERVIEW "Overview of BBLITLIB"

                                  @{b}@{u}Overview@{ub}@{uu}


                          An Acid Software Library

                         Converted to AmigaGuide by

                            Red When Excited Ltd

                 Used with the permission of Acid Software

          Edited, fixed and cleaned by Toby Zuijdveld 26/02/1999.
                       mailto:hotcakes\@abacus.net.au



@ENDNODE OVERVIEW

@NODE Buffer "BBLITLIB"

@{fg shine}Statement: Buffer@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Buffer Buffer#,Memorylen

The Buffer command is used to create a buffer object. Buffers are 
similar to queues in concept, but operate slightly differently. If you 
have not yet read the description of the Queue command, it would be a 
good idea to do so before continuing here.

The buffer related commands are very similar to the queue related 
commands - Buffer, BBlit, and UnBuffer, and are used in exactly the 
same way. Where buffers differ from queues, however, is in their 
ability to preserve background graphics. Whereas an UnQueue command 
normally trashes any background graphics, UnBuffer will politely 
restore whatever the BBlits may have overwritten. This is achieved by 
the BBlit command actually performing two blits.

The first blit transfers the area on the bitmap which the shape is 
about to cover to a temporary storage area - the second blit actually 
draws the shape onto the bitmap. When the time comes to UnBuffer all 
those BBlits, the temporary storage areas will be transferred back to 
the disrupted bitmap.

The Memorylen parameter of the Buffer command refers to how much 
memory, in bytes, should be put aside as temporary storage for the 
preservation of background graphics. The value of this parameter varies 
depending upon the size of shapes to BBlited, and the maximum number of 
shapes to be BBlited between UnBuffers.

A Memorylen of 16384 should be plenty for most situations, but may need 
to be increased if you start getting 'Buffer Overflow' error 
messages.


@ENDNODE Buffer

@NODE BBlit "BBLITLIB"

@{fg shine}Statement: BBlit@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : BBlit Buffer#,Shape#,X,Y[,Excessonoff]

The BBlit command is used to draw a shape onto the currently used 
bitmap, and preserve the overwritten area into a previously initialized 
buffer. For more information on how buffers work, please refer to the 
Buffer command.

The optional Excessonoff parameter works identically to the Excessonoff 
parameter used by the Blit command. Please refer to the Blit command 
for more information on this parameter.


@ENDNODE BBlit

@NODE UnBuffer "BBLITLIB"

@{fg shine}Statement: UnBuffer@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : UnBuffer Buffer#

UnBuffer is used to 'replace' areas on a bitmap overwritten by a series 
of BBlit commands. For more information on buffers, please refer to the 
Buffer command.


@ENDNODE UnBuffer

@NODE BBlitMode "BBLITLIB"

@{fg shine}Statement: BBlitMode@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : BBlitMode BLTCON0

BBlitMode allows you to control how the blitter operates when BBlitting 
shapes to bitmaps. Please refer to BlitMode for more information on 
this command.


@ENDNODE BBlitMode

@NODE ShowStencil "BBLITLIB"

@{fg shine}Statement: ShowStencil@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ShowStencil Buffer#,Stencil#

ShowStencil is used in connection with BBlits and stencil objects to 
produce a 'stencil' effect. Stencils allow you create the effect of 
shapes moving 'between' background and foreground graphics. Used 
properly, stencils can add a sense of 'depth' or 'three dimensionality' 
to animations.

In order to understand the following, it is recommended that the 
description of the Buffer command first be read, as stencils and 
buffers are closely connected.

So what steps are involved in using stencils? To begin with, you need 
both a bitmap and a stencil object. A stencil object is similar to a 
bitmap in that it contains various graphics. Stencils differ, however, 
in that they contain no colour information. They simply determine where 
graphics are placed on the stencil. The graphics on a stencil usually 
correspond to the graphics representing 'foreground' scenery on a 
bitmap.

So the first step is to set up a bitmap with both foreground and 
background scenery on it. Next, a stencil is set up with only the 
foreground scenery on it. This may be done using either the Stencil or 
SBlit command. Now, we BBlit our shapes. This will, of course, place 
all the shapes in front of both the background and the foreground 
graphics. However, once all shapes have been BBlitted, executing the 
ShowStencil command will repair the damage done to the foreground 
graphics!


@ENDNODE ShowStencil

@NODE FlushBuffer "BBLITLIB"

@{fg shine}Statement: FlushBuffer@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : FlushBuffer Buffer#

FlushBuffer will force the specified buffer object to be 'emptied', 
causing the next UnBuffer command to have no effect.
@ENDNODE FlushBuffer

@NODE MAIN "BBLITLIB"

.-----------------------------------------------------------------------------.
|                                  @{b}BBLITLIB@{ub}                                   |
`-----------------------------------------------------------------------------'

                             @{"     Overview     " link OVERVIEW}

                               Command Index                                

                               @{" BBlit        " link BBlit}
                               @{" BBlitMode    " link BBlitMode}
                               @{" Buffer       " link Buffer}
                               @{" FlushBuffer  " link FlushBuffer}
                               @{" ShowStencil  " link ShowStencil}
                               @{" UnBuffer     " link UnBuffer}

@ENDNODE MAIN

