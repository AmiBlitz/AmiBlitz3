@database LINKLISTLIB
@author "Conversion"
@$VER: LINKLISTLIB V1.1 (27.01.2007)- Updated by mrodfr.
@remark Created with Heddley v1.1 (c) Edd Dumbill 1994

@node "OVERVIEW" "Overview of LINKLISTLIB"

                                  @{b}@{u}Overview@{ub}@{uu}


                          An Acid Software Library

                         Converted to AmigaGuide by

                            Red When Excited Ltd

                 Used with the permission of Acid Software

          Edited, fixed and cleaned by Toby Zuijdveld 27/20/1999.
                       mailto:hotcakes\@abacus.net.au


@endnode

@node "FirstItem" "LINKLISTLIB"
 @{fg shine}Function: FirstItem@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : FirstItem (Arrayname())

Executing FirstItem will set the specified list array's 'current item'
pointer to the very first item in the list array. If there are no items  in
the list array, FirstItem will return false (0) otherwise, FirstItem  will
return true (-1).

@endnode

@node "AddItem" "LINKLISTLIB"
 @{fg shine}Function: AddItem@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : AddItem (Arrayname())

The AddItem function allows you to insert an array list item after the  list
array's 'current' item. AddItem returns a true/false value  reflecting whether
or not there was enough room in the array list to  add an element. If an array
element was available, AddItem returns a  true value (-1), and sets the list
array's 'current item' pointer to  the item added. If no array element was
available, AddItem returns  false (0).

Dim List a(10)
While AddLast(a())
    a()=C
wend

@endnode

@node "NextItem" "LINKLISTLIB"
 @{fg shine}Function: NextItem@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : NextItem (Arrayname())

NextItem will set the specified list array's 'current item' pointer to  the
item after the list array's old current item. This allows for  'forwards'
processing of a list array. NextItem returns a true/false  value reflecting
whether or not there actually was a next item  available or not. If an item
was available, NextItem will return true  (-1). Otherwise, NextItem will
return false (0).

ResetList a()
while NextItem(a())
    nprint a()
wend

@endnode

@node "ResetList" "LINKLISTLIB"
 @{fg shine}Statement: ResetList@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : ResetList Arrayname()

ResetList is used in conjunction with a list array to prepare the list  array
for NextItem processing. After executing a ResetList, the next  Nextitem
executed will set the list array's 'current element' pointer  to the list
array's very first item.

@endnode

@node "KillItem" "LINKLISTLIB"
 @{fg shine}Statement: KillItem@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : KillItem Arrayname()

KillItem is used to delete the specified list array's current item.  After
executing KillItem, the list array's 'current item' pointer will  be set to
the item before the item deleted.

@endnode

@node "AddFirst" "LINKLISTLIB"
 @{fg shine}Function: AddFirst@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : AddFirst (Arrayname())

The AddFirst function allows you to insert an array list item at the
beginning of an array list. AddFirst returns a true/false value  reflecting
whether or not there was enough room in the array list to  add an element. If
an array element was available, AddFirst returns a  true value (-1), and sets
the list array's 'current item' pointer to  the item added. If no array
element was available, AddFirst returns  false (0).

@endnode

@node "ClearList" "LINKLISTLIB"
 @{fg shine}Statement: ClearList@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : ClearList Arrayname()

ClearList is used in conjunction with list arrays to completely 'empty'  out
the specified list array. List arrays are automatically emptied  when they are
Dimmed.

@endnode

@node "AddLast" "LINKLISTLIB"
 @{fg shine}Function: AddLast@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : AddLast (Arrayname())

The AddLast function allows you to insert an array list item at the end  of an
array list. AddLast returns a true/false value reflecting whether  or not
there was enough room in the array list to add an element. If an  array
element was available, AddLast returns a true value (-1), and  sets the list
array's 'current item' pointer to the item added. If no  array element was
available, AddLast returns false (0).

@endnode

@node "PushItem" "LINKLISTLIB"
 @{fg shine}Statement: PushItem@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : PushItem Arrayname()

Executing PushItem causes the specified list array's 'current item'  pointer
to be pushed onto an internal stack. This pointer may be later  recalled by
executing PopItem. The internal item pointer stack allows for up to 8
'pushes'.

@endnode

@node "PopItem" "LINKLISTLIB"
 @{fg shine}Statement: PopItem@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : PopItem Arrayname()

PopItem 'pops' or 'recalls' a previously pushed current item pointer  for the
specified list array. Arrayname() must match the arrayname of  the most
recently executed PushItem.

@endnode

@node "PrevItem" "LINKLISTLIB"
 @{fg shine}Statement: PrevItem@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : PrevItem Arrayname()

PrevItem will set the specified list array's 'current item' pointer to  the
item before the list array's old current item. This allows for  'backwards'
processing of a list array. PrevItem returns a true/false  value reflecting
whether or not there actually was a previous item. If  a previous item was
available, PrevItem will return true (-1).  Otherwise, PrevItem will return
false (0).


@endnode

@node "LastItem" "LINKLISTLIB"
 @{fg shine}Statement: LastItem@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : LastItem Arrayname()

Executing LastItem will set the specified list array's 'current item'  pointer
to the very last item in the list array. If there are no items  in the list
array, LastItem will return false (0), otherwise LastItem  will return true
(-1).

@endnode

@node "ItemStackSize" "LINKLISTLIB"
 @{fg shine}Statement: ItemStackSize@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : ItemStackSize Max Items

ItemStackSize determines how many 'list' items may be pushed (using the
PushItem command), before items must be 'Pop'ped off again. For  example,
executing ItemStackSize 1000 will allow you to push up to 1000  list items
before you run out of item stack space.

@endnode

@node "SortList" "LINKLISTLIB"
 @{fg shine}Statement: SortList@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : SortList Arrayname(),sizeof .type\offset

The SortList command is used to rearrange the order of elements in a  Blitz2
linked list. The order in which the items are sorted depends on  the first
field of the linked list type which must be a single integer  word. Sorting
criteria will be examined in future releases.
@endnode

@node "MAIN" "LINKLISTLIB"
.-----------------------------------------------------------------------------.
|                                @{b}LINKLISTLIB@{ub}                                  |
`-----------------------------------------------------------------------------'

                             @{"     Overview     " link "OVERVIEW" 0}

                               Command Index                                

             @{" AddFirst       " link "AddFirst" 0}                @{" AddItem        " link "AddItem" 0}
             @{" AddLast        " link "AddLast" 0}                @{" ClearList      " link "ClearList" 0}
             @{" FirstItem      " link "FirstItem" 0}                @{" ItemStackSize  " link "ItemStackSize" 0}
             @{" KillItem       " link "KillItem" 0}                @{" LastItem       " link "LastItem" 0}
             @{" NextItem       " link "NextItem" 0}                @{" PopItem        " link "PopItem" 0}
             @{" PrevItem       " link "PrevItem" 0}                @{" PushItem       " link "PushItem" 0}
             @{" ResetList      " link "ResetList" 0}                @{" SortList       " link "SortList" 0}
             @{" FillArray      " link "FillArray" 0}


@endnode

@node "FillArray" "FillArray"
FillArray array()[,val]

Fill a array only Byte word long arrays (no Lists) support
@endnode

