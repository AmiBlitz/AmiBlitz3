@DATABASE DISPLAYLIB
@Author (Translator) Blackbird
@$VER: DISPLAYLIB-GER V1.1 (27.01.2007)- Updated by mrodfr.
@NODE OVERVIEW "Überblick zu DISPLAYLIB"

                                  @{b}@{u}Überblick@{ub}@{uu}


                          Eine Acid Software Library

                         Konvertiert nach AmigaGuide von

                            Red When Excited Ltd

                 Verwendet mit der Erlaubnis von Acid Software

          Bearbeitet und fehlerbereinigt von Toby Zuijdveld 27/02/1999.
                       mailto:hotcakes\@abacus.net.au

     Deutsche Übersetzung von Margit Möring, Marco Möring und Franz Schlick.
          Bestandteil der deutschsprachigen Amiblitz Supportpage Amiforce.
                            @{b}@{u}http://www.amiforce.de@{ub}@{uu} 
@ENDNODE OVERVIEW

@NODE CopList "DISPLAYLIB"

@{fg shine}Statement: CopList@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : CopList 

@ENDNODE CopList

@NODE InitCopList "DISPLAYLIB"

@{fg shine}Statement: InitCopList@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : InitCopList CopList#[,type]|[,ypos,height,type,sprites,colors,numcustoms]

InitCopList wird benutzt um eine CopList zu erzeugen, die mit dem Kommando 
CreateDisplay benutzt wird. Die YPos, height Parameter definieren die Section  
des Bildschirms. Sprites, colors und numcustoms allociiren Instructionen wie 
viele sprites (immer=8!) colors (möglich sind 256!) und custom copper instructionen 
(die benutzt werden von der neuen DisplayFX library die sich noch in Entwicklung 
befindet).

Der widthadjust Parameter ist zur Zeit nicht implementiert, für Bildschirmbreiten 
die nicht standard sind. Sehen sie hier bitte unter dem DisplayAdjust Kommando nach. 

Die folgenden Konstanten ergeben den Type Parameter.

Flag             Wert
#smoothscroll    $10
#dualplayfield   $20
#halfbrite       $40
#ham             $80

#lores           $000
#hires           $100
#super           $200

#loressprites    $400
#hiressprites    $800
#supersprites    $c00

#fmode0          $0000
#fmode1          $1000
#fmode2          $2000
#fmode3          $3000

#agapal          $10000

Für Bildschirme auf nicht-AGA-Maschinen sind nur #fmode0 und #loressprites 
erlaubt. Mehr Dokumentation, Beispiele und Fehlerbereinigungen zum erstellen 
eines Displays werden später veröffentlicht. 
@ENDNODE InitCopList

@NODE CreateDisplay "DISPLAYLIB"

@{fg shine}Statement: CreateDisplay@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : CreateDisplay CopList#[,CopList#..]


CreateDisplay wird benutzt um einen neuen Bildschirm mit der neuen display.library 
zu erzeugen. Jede Nummer einer vorhandenen CopList kann angegeben werden für 
CreateDisplay. CreateDisplay linkt die CopList und benutzt interne pointers, bitmaps, 
colours und sprites die der CopList hinzugefügt wurden.
@ENDNODE CreateDisplay

@NODE DisplayBitMap "DISPLAYLIB"

@{fg shine}Statement: DisplayBitMap@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DisplayBitMap CopList#,bmap[,x,y] [,bmap[,x,y]]

Das DisplayBitMap Kommando ist ähnlich zu verwenden wie die Show Kommandos
der slice librarys. Beinhaltet aber andere Kommandos für Vorder und Hintergrund  
playfields und smooth scroll optionen. Es gibt nur ein DisplayBitMap Kommando mit 
verschiedenen Parameter optionen. 
Mit AGA-Machinen, die x Position der lores und hires coplist benutzt den 
gebrochenen Teil des x Parameters für super smooth scrolling. Die CopList 
muss mit dem smooth scrolling flag initialisiert sein wenn die x,y Parameter
genutzt werden, das selbe gilt für dualplayfield.

@ENDNODE DisplayBitMap

@NODE DisplaySprite "DISPLAYLIB"

@{fg shine}Statement: DisplaySprite@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DisplaySprite CopList#,Sprite#,X,Y,Sprite Channel

DisplaySprite ist ähnlich zu den slice libraries ShowSprite Kommando mit dem 
Zusatz das auch super hires Positionierung und extra wide sprite handling 
vorhanden sind. Sehen sie hierzu auch SpriteMode.

@ENDNODE DisplaySprite

@NODE DisplayPalette "DISPLAYLIB"

@{fg shine}Statement: DisplayPalette@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DisplayPalette CopList#,Palette# [,coloroffset] [,coloroffset,bankoffset]

DisplayPalette kopiert Farbinformationen aus einer Palette zur spezifizierten CopList .

@ENDNODE DisplayPalette

@NODE DisplayControls "DISPLAYLIB"

@{fg shine}Statement: DisplayControls@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DisplayControls CopList#,BPLCON2,BPLCON3,BPLCON4

DisplayControls erlaubt den Zugriff zu meist gebrauchten Optionen die in dem Amiga 
Display System verfügbar sind. Die folgenden sind die wichtigsten bits aus den 
Registern (wurden noch nicht von Commodore veröffentlicht! *()GYU&^)

Der standard Wert wird als erstes im table angegeben, die Parameter
sind exclusiv bei DisplayControls.Es werden alle sprite color offsets auf 1 gesetzt 
sprite colours werden aus den color registers geholt. 240..255 anstatt aus 16..31 

DisplayControls 0,0,0,$ee

bit   BPLCON2=$224    BPLCON3=$c00                    BPLCON4=$11

15    *            BANK2 * active colour bank    BPLAM7 xor with bitplane
14    ZDBPSEL2     BANK1 *                       BPLAM6 DMA for altering
13    ZDBPSEL1     BANK0 *                       BPLAM5 effective colour
12    ZDBPSEL0     PF2OF2 coloffset pfield 2     BPLAM4 look up
11    ZDBPEN       PF2OF1                        BPLAM3
10    ZDCTEN       PF2OF0                        BPLAM2
09    KILLEHB *    LOCT *palette hi/lo nibble    BPLAM1
08    RDRAM=0 *                                  BPLAM0
07    SOGEN        SPRES1 *sprites resolution    ESPRM7 high order color
06    PF2PRI H     SPRES0 *                      ESPRM6 offset for even
05    PF2P2        BRDRBLANK border is black     ESPRM5 sprites
04    PF2P1        BRDNTRAN border hits ZD       ESPRM4
03    PF1P0                                      OSPRM7 high order color
02    PF1P2        ZDCLCKEN ZD=14Mhz clock       OSPRM6 offset for odd
01    PF1P1        BRDSPRT  sprites in borders!  OSPRM5 sprites
00    PF1P0        EXTBLKEN wo blank output?     OSPRM4

 !  - Nicht verändern
 H  - Standard hardware reference manual
 *  - wird kontrolliert von der display library
 ZD - jede referenz zu ZD ist nur ein Vorschlag

@ENDNODE DisplayControls

@NODE DisplayAdjust "DISPLAYLIB"

@{fg shine}Statement: DisplayAdjust@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DisplayAdjust CopList#,fetchwid,ddfstrt,ddfstop,diwstrt,diwstop

Temporäre Kontrolle der display-register wenn ich den widthadjust 
Parameter mit InitCopList zum arbeiten bekomme. Zur Zeit stehen nur standard
width displays zur verfügung aber sie können die Breite manuell modifizieren.
 
Fortgeschrittene Verwendung
------------------------

Das folgende ist ein CopList objekt newtype. Fortgeschrittene User haben damit 
zugriff auf einige Pointer sodas sie die Copperlist direkt modifizieren können.

Eine Benutzer Copperlist via den custom Parameter in dem InitCopList Kommando ist verfügbar.
Der customs pointer eines Objektes  zeigt dann in den Bereich im Speicher der initialisiert wurde 
mit $1fe0000 das das selbe darstellt wie eine NOP instruktion für den copper.

NEWTYPE .mycop
 size.l      ;0 = not initialised
 coppos.l     ;location in chipmem
 colors.l
 sprites.l
 bpcons.l
 bplanes.l
 dot.l
 customs.l
 dob.l
 numbp.w:colpokes.w         ;limits
 fetchwid.w:xand:xshift       ;for show calculations (3 words)
 ypos.w:height:res
 numsprites.w:numcols:numcustoms
 aga.w                ;24bit=$8000 fetch = $00,$10,$20,$30
 resshift.w             ;lo,hi,shi = 2 1 0
 setup.w               ;lines taken for setup
 cblow.w               ;if custom goes below 256
 sfetch.w:spres:spif:spwid:sspwid  ;sprite mode for display
End NEWTYPE

@ENDNODE DisplayAdjust

@NODE CustomColors "DISPLAYLIB"

@{fg shine}Statement: CustomColors@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : CustomColors CopList#,CCOffset,YPos,Palette,startcol,numcols[,thru256flag]  ;ecs=2+n aga=2+n+n+n/16

Bei benutzung des custom copper space in einem Display, wird CustomColors an den YPos 
die displaypalette verändern. Die benötigte Nummer der customcops ist 2+numcols für ecs displays 
und 2+n+n+n/16 für aga displays. 
Bei AGA, muss numcols ein mehrfaches von 32 sein.

Beachten sie bitte das bei Änderung einer große AGA Palette mehrere Linien 
auf dem Display geändert werden.

@ENDNODE CustomColors

@NODE CustomString "DISPLAYLIB"

@{fg shine}Statement: CustomString@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : CustomString CopList#,CCOffset,YPos,Copper$  ;2+n {n=len(a$)/4}



@ENDNODE CustomString

@NODE DisplayDblScan "DISPLAYLIB"

@{fg shine}Statement: DisplayDblScan@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DisplayDblScan CopList#,Mode[,copoffset]   ;2

DisplayDblScan wird benutzt um die vertikale Auflösung des displays 
um 2,4,8 oder 16 zu teilen, benutzte Modes 1,2,3 und 4. Dies ist meistens 
nützlich um schnelle bitmap Bereiche zu zoomen.  Ein Mode 0 wird das 
display wieder 100% erscheinen lassen.

Mit den Kommandos DisplayRainbow, DisplayRGB, DisplayUser und DisplayScroll 
wird DisplayDblScan das neue line by line des copper control der display library
benutzen. Zum Initialisieren diese Modes wird ein negativer Parameter des 
CustomCops Parameters des InitCopList Kommandos benutzt. DisplayDblScan 
Benötigt 2 copper instruktionen pro Linie (CustomCops=-2).

@ENDNODE DisplayDblScan

@NODE DisplayRainbow "DISPLAYLIB"

@{fg shine}Statement: DisplayRainbow@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DisplayRainbow CopList#,Register,Palette[,copoffset] ;ecs=1 aga=4

@ENDNODE DisplayRainbow

@NODE DisplayRGB "DISPLAYLIB"

@{fg shine}Statement: DisplayRGB@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DisplayRGB CopList#,Register,line,r,g,b[,copoffset] ;ecs=1 aga=4

@ENDNODE DisplayRGB

@NODE DisplayUser "DISPLAYLIB"

@{fg shine}Statement: DisplayUser@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DisplayUser CopList#,Line,String[,Offset]

@ENDNODE DisplayUser

@NODE DisplayScroll "DISPLAYLIB"

@{fg shine}Statement: DisplayScroll@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DisplayScroll CopList#,&xpos.q(n),&xpos.q(n)[,Offset]   ;3

DisplayScroll erlaubt dem Programm zu einem dynamischen display von jeder bitmap 
und jeder Linie des display. DisplayScroll sollte immer nach dem DisplayBitMap Kommando 
aufgerufen werden. Die Parameter sind zwei Bereiche aus einer liste aus xoffsets, diese 
repräsentieren die differenz in der horizontalen Position aus der oberen Linie. 
AGA Maschinen sind fähig um den fraktionalen Bereich jeden Eintrages für die super 
hiresolution Position der Bitmap zu benutzen. Drei Instruktionen per Linie sind nötig für 
das DisplayScroll Kommando.

@ENDNODE DisplayScroll

@NODE CustomSprites "DISPLAYLIB"

@{fg shine}Statement: CustomSprites@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : CustomSprites CopList#,CCOffset,YPos,NumSprites ;4n+2

CustomSprites fügt eine copper list in eine vertikale Position im display ein, die die 
Hardware reinitialisiert. Diese niederen Sprites haben die Sprite nummern 8..15.

@ENDNODE CustomSprites

@NODE CustomChunky "DISPLAYLIB"

@{fg shine}Statement: CustomChunky@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : CustomChunky CopList#,CCOffset,YPos,width,height,res ;4n+2

@ENDNODE CustomChunky

@NODE CustomChunkySize "DISPLAYLIB"

@{fg shine}Statement: CustomChunkySize@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : CustomChunkySize width,height
@ENDNODE CustomChunkySize

@NODE MAIN "DISPLAYLIB"

.-----------------------------------------------------------------------------.
|                                 @{b}DISPLAYLIB@{ub}                                  |
`-----------------------------------------------------------------------------'

                             @{"     Überblick     " link OVERVIEW}

                               Kommando Index                                

           @{" CopList          " link CopList}                @{" CreateDisplay    " link CreateDisplay}
           @{" CustomChunky     " link CustomChunky}                @{" CustomChunkySize " link CustomChunkySize}
           @{" CustomColors     " link CustomColors}                @{" CustomSprites    " link CustomSprites}
           @{" CustomString     " link CustomString}                @{" DisplayAdjust    " link DisplayAdjust}
           @{" DisplayBitMap    " link DisplayBitMap}                @{" DisplayControls  " link DisplayControls}
           @{" DisplayDblScan   " link DisplayDblScan}                @{" DisplayPalette   " link DisplayPalette}
           @{" DisplayRainbow   " link DisplayRainbow}                @{" DisplayRGB       " link DisplayRGB}
           @{" DisplayScroll    " link DisplayScroll}                @{" DisplaySprite    " link DisplaySprite}
           @{" DisplayUser      " link DisplayUser}                @{" InitCopList      " link InitCopList}
@ENDNODE MAIN

