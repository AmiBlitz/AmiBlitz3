@database VALLIB
@author "Conversion"
@$VER: VALLIB V1.1 (27.01.2007)- Updated by mrodfr.
@remark Created with Heddley v1.1 (c) Edd Dumbill 1994

@node "OVERVIEW" "Overview of VALLIB"

                                  @{b}@{u}Overview@{ub}@{uu}


                          An Acid Software Library

                         Converted to AmigaGuide by

                            Red When Excited Ltd

                 Used with the permission of Acid Software

@endnode

@node "Val" "VALLIB"
 @{fg shine}Function: Val@{fg text}
------------------------------------------------------------------------------
Modes  :
Syntax : =Val (String$)

This functions converts the string String$ into a numeric value and returns
this value. When converting the string, the conversion will stop the moment
either a non numeric value or a second decimal point is reached.

@endnode

@node "Int" "VALLIB"
 @{fg shine}Function: Int@{fg text}
------------------------------------------------------------------------------
Modes  :
Syntax : =Int (Expression)

This returns the Integer part (before the decimal point) of Expression.

@endnode

@node "Sgn" "VALLIB"
 @{fg shine}Function: Sgn@{fg text}
------------------------------------------------------------------------------
Modes  :
Syntax : =Sgn (Expression)

Sgn returns the sign of Expression. If Expression is less than 0, then -1 is
returned. If Expression is equal to 0, then 0 is returned. If Expression is
greater than 0, then 1 is returned.

@endnode

@node "Frac" "VALLIB"
 @{fg shine}Function: Frac@{fg text}
------------------------------------------------------------------------------
Modes  :
Syntax : =Frac (Expression)

Frac() returns the fractional part of Expression.

@endnode

@node "QFrac" "VALLIB"
 @{fg shine}Function: QFrac@{fg text}
------------------------------------------------------------------------------
Modes  :
Syntax : =QFrac (Quick)

QFrac() returns the fractional part of a quick value. It works like Frac()
but accepts a quick value as it's argument. It is faster than Frac() but has
the normal quick value limits.

@endnode

@node "QWrap" "VALLIB"
 @{fg shine}Function: QWrap@{fg text}
------------------------------------------------------------------------------
Modes  :
Syntax : =QWrap (Quick,Low,High)

QWrap will wrap the result of the Quick expression if Quick is greater than
or equal to high, or less than low. If Quick is less than Low, then
Quick-Low+High is returned. If Quick is greater than or equal to High, then
Quick-High+Low is returned.

@endnode

@node "QAbs" "VALLIB"
 @{fg shine}Function: QAbs@{fg text}
------------------------------------------------------------------------------
Modes  :
Syntax : =QAbs (Quick)

QAbs works just like Abs except that the value it accepts is a Quick. This
enhances the speed at which the function executes quite dramatically. Of
course you are limited by the restrictions of the quick type of value.

@endnode

@node "Abs" "VALLIB"
 @{fg shine}Function: Abs@{fg text}
------------------------------------------------------------------------------
Modes  :
Syntax : =Abs (Expression)

This function returns the positive equivalent of Expression.

@endnode

@node "QLimit" "VALLIB"
 @{fg shine}Function: QLimit@{fg text}
------------------------------------------------------------------------------
Modes  :
Syntax : =QLimit (Quick,Low,High)

QLimit is used to limit the range of a quick number. If Quick is greater  than
or equal to Low, and less or equal to High, the value of Quick is  returned.
If Quick is less than Low, then Low is returned. If Quick is  greater than
High, then High is returned.

@endnode

@node "Rnd" "VALLIB"
 @{fg shine}Function: Rnd@{fg text}
-----------------------------------------------------------------------------
Modes  :
Syntax : Rnd [(Range)]

This function returns a random number. If Range is not specified then a
random decimal is returned between 0 and 1. If Range is specified, then a
decimal value between 0 and Range is returned.

The start value for the random number generator may be set with @{"RndSeed" link "RndSeed" 0}.

@endnode

@node "RndSeed" "VALLIB"
 @{fg shine}Statement: RndSeed@{fg text}
-----------------------------------------------------------------------------
Modes  :
Syntax : RndSeed [(Range)]

Set start value for random generator, see also @{"Rnd" link "Rnd" 0}.

@endnode

@node "NTSC" "VALLIB"
 @{fg shine}Statement: NTSC@{fg text}
------------------------------------------------------------------------------
Modes  :
Syntax : NTSC

This function returns 0 if the display is currently in PAL mode, or -1 if
currently in NTSC mode. This may be used to write software which dynamically
adjusts itself to different versions of the Amiga computer.

@endnode

@node "DispHeight" "VALLIB"
 @{fg shine}Statement: DispHeight@{fg text}
------------------------------------------------------------------------------
Modes  :
Syntax : DispHeight

DispHeight will return 256 if executed on a PAL Amiga, or 200 if executed on
an NTSC Amiga. This allows programs to open full sized screens, windows etc
on any Amiga.

@endnode

@node "VPos" "VALLIB"
 @{fg shine}Statement: VPos@{fg text}
------------------------------------------------------------------------------
Modes  :
Syntax : VPos

VPos returns the video's beam vertical position. Useful in both highspeed
animation where screen update may need to be synced to a certain video beam
position (not just the top of frame as with VWait) and for a fast random
nember generator in non frame-synced applications.

@endnode

@node "True" "VALLIB"
 @{fg shine}Statement: True@{fg text}
------------------------------------------------------------------------------
Modes  :
Syntax : True

True is a system constant with a value of -1.

@endnode

@node "False" "VALLIB"
 @{fg shine}Statement: False@{fg text}
------------------------------------------------------------------------------
Modes  :
Syntax : False


False is a system constant with a value of 0.

@endnode

@node "QAngle" "VALLIB"
 @{fg shine}Function: QAngle@{fg text}
---------------------------------------------------------------------------
Modes  :
Syntax : =QAngle (Src X,Src Y,Dest X,Dest Y)

@endnode

@NODE "Max" "VALLIB"
@{fg shine}Function: Max@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : =Max(first_var,second_var)

  This will compare both values and return the Higher of the values.
  This currently supports INTEGERs only.

e.g.

	NPrint Max(30,50)
	MouseWait
	End
@ENDNODE

@NODE "Min" "VALLIB"
@{fg shine}Function: Min@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : =Min(first_var,second_var)

  This will compare both values and return the Lower of the values.
  This currently supports INTEGERs only.

e.g.

	NPrint Min(30,50)
	MouseWait
	End
@ENDNODE


@node "MAIN" "VALLIB"
-----------------------------------------------------------------------------.
                                  @{b} VALLIB@{ub}                                    |
-----------------------------------------------------------------------------'

                               Command Index

  @{"   Abs      " link "Abs" 0}                @{"   DispHeight  " link "DispHeight" 0}
  @{"   False    " link "False" 0}                @{"   Frac        " link "Frac" 0}
  @{"   Int      " link "Int" 0}                @{"   NTSC        " link "NTSC" 0}
  @{"   Min      " link "Min"}                @{"   Max         " link "Max"}
  @{"   QAbs     " link "QAbs" 0}                @{"   QAngle      " link "QAngle" 0}
  @{"   QFrac    " link "QFrac" 0}                @{"   QLimit      " link "QLimit" 0}
  @{"   QWrap    " link "QWrap" 0}                @{"   Rnd         " link "Rnd" 0}
  @{"   RndSeed  " link "RndSeed" 0}                @{"   Sgn         " link "Sgn" 0}
  @{"   True     " link "True" 0}                @{"   Val         " link "Val" 0}
  @{"   Vallong  " link "Vallong" 0}                @{"   VPos        " link "VPos" 0}

@endnode

@node "vallong" "vallong"

@endnode

