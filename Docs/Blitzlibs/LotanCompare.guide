@DataBase "LotanCompare"
@$VER: LOTANCOMPARELIB V1.1 (27.01.2007)- Updated by mrodfr.
@Node Main "LotanCompare"

  @{b}Lotan's Compare Library 0.02 (19-03-99)@{ub}

    @{" Big       " link Big} Function (Long)
    @{" CountByte " link CountByte} Function (Long)
    @{" CountLong " link CountLong} Function (Long)
    @{" CountWord " link CountWord} Function (Long)
    @{" FindByte  " link FindByte} Function (Long)
    @{" FindLong  " link FindLong} Function (Long)
    @{" FindStrg  " link FindStrg} Function (Long)
    @{" FindWord  " link FindWord} Function (Long)
    @{" Low       " link Low} Function (Long)

  @{b}Author@{ub}

    Olivier Laviale, Doumenge 46230 Montdoumerc, FRANCE

  @{b}See also@{ub}

    @{" BlitzLibs / LotanString " link LotanString.guide/Main}
@EndNode

@Node Big "LotanCompare : Big"

  @{b}@{u}Big@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= Big(Int,Int)

    @{b}Function@{ub} : Returns the bigger of two supplied integers.

    @{b}See also@{ub} : @{" Low " link Low}
@EndNode
@Node CountByte "LotanCompare : CountByte"

  @{b}@{u}CountByte@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= CountByte(Strg,Byte)
               @{i}rc.l @{ui}= CountByte(Addr,Byte,Len)

    @{b}Function@{ub} : Returns the number of occurences of a byte.

               This function can either be used to search in a string  or  in  memory
               area.

    @{b}Values@{ub}   : @{b}rc@{ub} is the number of occurence found.

               @{b}Byte@{ub} is the byte to look for.

               Used with a string, the number of bytes to examine will be the  length
               of  @{b}Strg@{ub}.  Else @{b}Addr@{ub} must be a pointer to an absolute memory location,
               @{b}Len@{ub} specify the number of bytes to examine.

    @{b}See also@{ub} : @{" CountLong " link CountLong}
               @{" CountWord " link CountWord}
               @{" FindByte  " link FindByte}
@EndNode
@Node CountLong "LotanCompare : CountLong"

  @{b}@{u}CountLong@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= CountLong(Strg,Long)
               @{i}rc.l @{ui}= CountLong(Addr,Long,Len)

    @{b}Function@{ub} : Returns the number of occurences of a long.

               This function can either be used to search in a string  or  in  memory
               area.

    @{b}Values@{ub}   : @{b}rc@{ub} is the number of occurence found.

               @{b}Long@{ub} is the long to look for.

               Used with a string, the number of longs to examine will be the  length
               of  @{b}Strg@{ub}.  Else @{b}Addr@{ub} must be a pointer to an absolute memory location,
               @{b}Len@{ub} specify the number of longs to examine.

    @{b}See also@{ub} : @{" CountByte " link CountByte}
               @{" CountWord " link CountWord}
               @{" FindLong  " link FindLong}
@EndNode
@Node CountWord "LotanCompare : CountWord"

  @{b}@{u}CountWord@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= CountWord(Strg,Word)
               @{i}rc.l @{ui}= CountWord(Addr,Word,Len)

    @{b}Function@{ub} : Returns the number of occurences of a word.

               This function can either be used to search in a string  or  in  memory
               area.

    @{b}Values@{ub}   : @{b}rc@{ub} is the number of occurence found.

               @{b}Word@{ub} is the word to look for.

               Used with a string, the number of words to examine will be the  length
               of  @{b}Strg@{ub}.  Else @{b}Addr@{ub} must be a pointer to an absolute memory location,
               @{b}Len@{ub} specify the number of words to examine.

    @{b}See also@{ub} : @{" CountByte " link CountByte}
               @{" CountLong " link CountLong}
               @{" FindWord  " link FindWord}
@EndNode
@Node FindByte "LotanCompare : FindByte"

  @{b}@{u}FindByte@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= FindByte(Strg,Byte)
               @{i}rc.l @{ui}= FindByte(Addr,Byte,MaxLen)

    @{b}Function@{ub} : Will try to find a byte from memory.

    @{b}Values@{ub}   : @{b}rc@{ub} is the position of @{b}Byte@{ub} in @{b}Strg@{ub}, or its offset from @{b}Addr@{ub}. @{b}rc@{ub} = 0 if
               the @{b}Byte@{ub} wasn't found.

               @{b}Strg@{ub} is a string to search in.

               @{b}Addr@{ub} is the absolute memory location where the search begins.

               @{b}MaxLen@{ub} is the maximum number of bytes from @{b}Addr@{ub}  to  compare.  If  you
               want to search from a memory location you must specify @{b}MaxLen@{ub}.

    @{b}Example@{ub}  : a.s = "All I wanna do it's have some fun."

               @{fg highlight}NPrint FindByte@{fg text}(a,$49)   ; Search for 'I' and will return 5.

    @{b}See also@{ub} : @{" FindLong " link FindLong}
               @{" FindWord " link FindWord}
@EndNode
@Node FindLong "LotanCompare : FindLong"

  @{b}@{u}FindLong@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= FindLong(Strg,Long)
               @{i}rc.l @{ui}= FindLong(Addr,Long,MaxLen)

    @{b}Function@{ub} : Will try to find a long from memory.

    @{b}Values@{ub}   : @{b}rc@{ub} is the position of @{b}Long@{ub} in @{b}Strg@{ub}, or its offset from @{b}Addr@{ub}. @{b}rc@{ub} = 0 if
               the @{b}Long@{ub} wasn't found.

               @{b}Strg@{ub} is a string to search in.

               @{b}Addr@{ub} is the absolute memory location where the search begins.

               @{b}MaxLen@{ub} is the maximum number of bytes from @{b}Addr@{ub}  to  compare.  If  you
               want to search from a memory location you must specify @{b}MaxLen@{ub}.

    @{b}See also@{ub} : @{" FindByte " link FindByte}
               @{" FindWord " link FindWord}
@EndNode
@Node FindStrg "LotanCompare : FindStrg"

  @{b}@{u}FindStrg@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= FindStrg(FindStr,Str)

    @{b}Function@{ub} : Try to locate a string in another.

               The result is the character position of @{b}FindStr@{ub} in @{b}Str@{ub} or 0 if a match
               isn't found.

    @{b}Note@{ub}     : The search is casesensitive.

    @{b}Example@{ub}  : @{fg highlight}FindStrg@{fg text}("eak","growing weaker and weaker") >> 10

    @{b}See also@{ub} : @{" BlitzLibs / LotanString " link LotanString.guide/Main}
@EndNode
@Node FindWord "LotanCompare : FindWord"

  @{b}@{u}FindWord@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= FindWord(Strg,Word)
               @{i}rc.l @{ui}= FindWord(Addr,Word,MaxLen)

    @{b}Function@{ub} : Will try to find a word from memory.

    @{b}Values@{ub}   : @{b}rc@{ub} is the position of @{b}Word@{ub} in @{b}Strg@{ub}, or its offset from @{b}Addr@{ub}. @{b}rc@{ub} = 0 if
               the @{b}Word@{ub} wasn't found.

               @{b}Strg@{ub} is a string to search in.

               @{b}Addr@{ub} is the absolute memory location where the search begins.

               @{b}MaxLen@{ub} is the maximum number of bytes from @{b}Addr@{ub}  to  compare.  If  you
               want to search from a memory location you must specify @{b}MaxLen@{ub}.

    @{b}See also@{ub} : @{" FindByte " link FindByte}
               @{" FindLong " link FindLong}
@EndNode
@Node FlipLong "LotanCompare : FlipLong"

  @{b}@{u}FlipLong@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= FlipLong(Long)

    @{b}Function@{ub} : Returns a fliped Long.

    @{b}Example@{ub}  : @{fg highlight}NPrint FlipLong@{fg text}($44332211) ; will return $11223344

    @{b}See also@{ub} : @{" FlipWord " link FlipWord}

@EndNode
@Node FlipWord "LotanCompare : FlipWord"

  @{b}@{u}FlipWord@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= FlipWord(Word)

    @{b}Function@{ub} : Returns a fliped Word.

    @{b}Example@{ub}  : @{fg highlight}NPrint FlipWord@{fg text}($2211) ; will return $1122

    @{b}See also@{ub} : @{" FlipLong " link FlipLong}

@EndNode
@Node Low "LotanCompare : Low"

  @{b}@{u}Low@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= Low(Int,Int)

    @{b}Function@{ub} : Returns the smaller of two supplied integers.

    @{b}See also@{ub} : @{" Big " link Big}
@EndNode
