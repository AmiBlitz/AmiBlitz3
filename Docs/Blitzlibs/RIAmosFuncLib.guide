@DATABASE RIAMOSFuncLib.guide
@$VER: RIAMOSFUNCLIB V1.91 (27.01.2007)-Updated by mrodfr
@NODE MAIN "RIAmosFuncLib"
.---------------------------------------------------------------------------.
|                        @{b}RI AMOS Func Library V2.5@{ub}                          |
`---------------------------------------------------------------------------'

                        ï¿½1996 Red When Excited Ltd

       Undocumented commands included by Toby Zuijdveld 28/02/1999.
                      mailto: hotcakes\@abacus.net.au

         @{"     Overview     " link OVERVIEW}

         @{b}Command Index@{ub}

         @{b}Memory banks:@{ub}
         @{" BankLimit    " link BankLimit}
         @{" BLoad        " link BLoad}          @{" BSave        " link BSave}
         @{" Erase        " link Erase}          @{" EraseAll     " link EraseAll}
         @{" Length       " link Length}          @{" NextBank     " link NextBank}
         @{" Reserve      " link Reserve}          @{" Start        " link Start}
         @{" SwapBank     " link swapbank}

         @{b}Memory functions:@{ub}
         @{" CopyByte     " link CopyByte}          @{" CopyWord     " link CopyWord}
         @{" CopyLong     " link CopyLong}          @{" FillMem      " link FillMem}
         @{" MemFree      " link MemFree}

         @{b}File system:@{ub}
         @{" ChangeDir    " link changedir}          @{" DeviceName$  " link DeviceName$}
         @{" FileSize     " link FileSize}          @{" FindVolume   " link FindVolume}
         @{" MakeDir      " link MakeDir}          @{" Rename       " link Rename}

         @{b}Chipset related:@{ub}
         @{" CachesOn     " link cacheson}          @{" CachesOff    " link cachesoff}
         @{" KeyCode      " link KeyCode}          @{" Lisa         " link Lisa}
         @{" ResetTimer   " link ResetTimer}          @{" Timer        " link Timer}
         @{" BlitterDone  " link BlitterDone}          @{" WaitBlitter  " link WaitBlitter}

         @{b}MISCELLANEOUS@{ub}
         @{" GTTagValue   " link gttagvalue}          @{" Reboot       " link Reboot}
         @{" SaveExec     " link saveexec}


         @{"     Examples    " link Examples}
@ENDNODE MAIN


@NODE OVERVIEW "Whats it all about?"

                                 @{b}@{u}Overview@{uu}@{ub}

This library was originally designed to emulate useful commands present in
AMOS. However, it has now grown to an all-purpose library containing
miscellaneous commands which did not warrant a separate library.

You will find commands for easy memory bank management, file loading/saving
commands, timing commands, memory manipulation and Amiga hardware commands.

@ENDNODE OVERVIEW

@NODE BankLimit "RIAmosFuncLib"
@{fg shine}
Function: BankLimit@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : [numbanks=]BankLimit[(maxbanks)]

  By default, the library lets you use banks 0-49. If this is not enough,
then call this command using :   BankLimit numbanks

This will currently erase all banks so be warned!

To find out the current bank limit use :   numbanks=BankLimit

@ENDNODE BankLimit

@NODE Reserve "RIAmosFuncLib"
@{fg shine}
Function: Reserve@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : success=Reserve(length) | (banknumber,length[,requirements])

  If only length is specified, then this function returns the number of the
bank allocated or -1 for failure.

  This will attempt to reserve <length> bytes of memory. If succesfull,
it will return -1. If unsuccessfull, 0 is returned.

The optional <requirements> parameter specifies which type of memory you
want:
		
		%1					=PUBLIC
		%10					=CHIP 
		%100					=FAST
		%100000000				=LOCAL
		%1000000000				=24BITDMA
		%10000000000				=KICK
		%10000000000000000			=CLEAR
		%1000000000000000000			=REVERSE
		%10000000000000000000000000000000	=NO_EXPUNGE

OR the values together for different combinations.

e.g.

	suc=Reserve(0,1024,%10)		; Reserve 1k of Chip Mem returns -1
	suc=Reserve(1024)		; Reserve 1k of Any Mem returns 1

@ENDNODE Reserve

@NODE Erase "RIAmosFuncLib"
@{fg shine}
Statement: Erase@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : Erase banknumber

  The Erase command will erase the specified memory bank.

e.g.

	suc=Reserve(0,1024,%10)                      ; Reserve 1k of Chip Mem
	Erase 0

@ENDNODE Erase

@NODE EraseAll "RIAmosFuncLib"
@{fg shine}
Statement: EraseAll@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : EraseAll

  This command will erase ALL allocated memory banks.

e.g.

	suc=@{"Reserve" link reserve}(0,1024,%10)    ; Reserve 1k of Chip Mem
	suc=Reserve(1,2048,0)	   		     ; Reserve 1k of ANY Mem
	EraseAll

@ENDNODE EraseAll

@NODE BLoad "RIAmosFuncLib"
@{fg shine}
Function: BLoad@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : success=BLoad(filename$) | (filename$,bank/addr[,length,offset,memtype])

  If only filename$ is specified, then the next available bank is allocated,
and the command returns the number of the bank for success or -1 for failure.

  If bank is specified, then the file is loaded into that bank. If address
is specified then it is loaded into the address. Valid banks are 0-49. 
If the bank does not exist, Blitz will reserve a bank for you.
If the bank does exist, Blitz will erase the bank from memory, and allocate
a new one.
The return result is -1 for success, or 0 for failure  (not enough RAM, 
file does not exist). If offset is specified, then <length> bytes will be
read from the specified offset position in the file.
If memtype is specified, then the file is loaded into a memory block
of that particular memtype (see @{"Reserve" link Reserve})
If you wish to leave either length/offset unspecified, simply use the
value 0

e.g.

	suc=BLoad("s:startup-sequence",0)	; returns -1
	suc=BLoad("c:dir",0,0,0,%10)		; Loads into CHIP
	suc=BLoad("c:list")			; returns 1

@ENDNODE BLoad

@NODE BSave "RIAmosFuncLib"
@{fg shine}
Function: BSave@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : success=BSave(filename$,bank/address,length)

  This will save <length> bytes at bank/address to the file. Return result
is -1 for success, 0 for failure. If length > bank length, then the length
of the bank is saved instead. If 0 is specified, the entire bank is saved.

e.g.

	suc=@{"BLoad" link BLoad}("c:dir",0,0,0,%10)	; Loads into CHIP
	suc=BSave("ram:temp",0)

@ENDNODE BSave

@NODE Start "RIAmosFuncLib"
@{fg shine}
Function: Start@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : start_address.l=Start(banknumber.b)

  This will return the start address of the specified bank. (0=no bank)

e.g.
        suc=@{"Reserve" link Reserve}(0,1024,%10)
	NPrint Start(0)
	MouseWait
	End

@ENDNODE Start

@NODE Length "RIAmosFuncLib"
@{fg shine}
Function: Length@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : length_of_bank.l=Length(banknumber.b)

  This will return the length of the specified bank in bytes. (0=No bank)

e.g.

	suc=@{"Reserve" link Reserve}(0,1024,%10)
	NPrint Length(0)
	MouseWait
	End

@ENDNODE Length

@NODE MemFree "RIAmosFuncLib"
@{fg shine}
Function: MemFree@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : bytes.l=MemFree

  This will return the total amount of Public Free RAM available to the
system.

e.g.

	NPrint "Total bytes free = ",MemFree
	MouseWait
	End

@ENDNODE MemFree

@NODE NextBank "RIAmosFuncLib"
@{fg shine}
Function: NextBank@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : bank.b=NextBank

  This will return the number of the first available bank (-1 if none free).

e.g.

	suc=@{"Reserve" link Reserve}(0,1024)
	suc=Reserve(0,2048)
	NPrint NextBank
	MouseWait
	End
	
@ENDNODE NextBank

@NODE FillMem "RIAmosFuncLib"
@{fg shine}
Statement: FillMem@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : FillMem address.l,length.l[,value.b]

   This will fill 'length' bytes starting from the specified address with
'value'. If 'value' is ommitted, 0 is filled.

e.g.

	suc=@{"Reserve" link Reserve}(0,1024)	     ; Allocate some memory
	FillMem Start(0),Length(0)                   ; Clear it
	MouseWait
	End

@ENDNODE FillMem

@NODE CopyByte "RIAmosFuncLib"
@{fg shine}
Statement: CopyByte@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : CopyByte source.l,dest.l,num.l

  This will copy <num> bytes from <source> to <dest>

e.g.

	CopyByte @{"Start" link Start}(0),Start(1),@{"Length" link Length}(0)

@ENDNODE CopyByte

@NODE CopyWord "RIAmosFuncLib"
@{fg shine}
Statement: CopyWord@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : CopyByte source.l,dest.l,num.l

  This will copy <num> words from <source> to <dest> 

e.g.

	CopyWord @{"Start" link Start}(0),Start(1),@{"Length" link Length}(0)/2

@ENDNODE CopyWord

@NODE CopyLong "RIAmosFuncLib"
@{fg shine}
Statement: CopyLong@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : CopyByte source.l,dest.l,num.l

  This will copy <num> longwords from <source> to <dest> 

e.g.

	CopyLong Start(0),Start(1),Length(0)/4

@ENDNODE CopyLong

@NODE MakeDir "RIAmosFuncLib"
@{fg shine}
Function: MakeDir@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : success=MakeDir(name$)

   This function attempts to create a directory called <name$>. If it is
unsuccessfull, 0 is returned else -1 is returned.

e.g.

	suc=MakeDir("RAM:MYDIR")

@ENDNODE MakeDir

@NODE Rename "RIAmosFuncLib"
@{fg shine}
Function: Rename@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : success=Rename(source$,dest$)

   This attempts to rename the file <source$> to <dest$>. -1 is returned if
successfull, else 0.

   NOTE: It is not possible to rename across devices.

e.g.

	suc=Rename("S:Startup-Sequence","S:Startup2")	; Do not run this!

@ENDNODE Rename

@NODE Timer "RIAmosFuncLib"
@{fg shine}
Function: Timer@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : t.l=Timer

   This will return the number of 50ths of a second since startup or the
last call to ResetTimer.

e.g.

	NPrint Timer
	VWait
	NPrint Timer
	MouseWait
	End

@ENDNODE Timer

@NODE ResetTimer "RIAmosFuncLib"
@{fg shine}
Statement: ResetTimer@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : ResetTimer

   This will reset the CIA timer to 0.

e.g.

	NPrint Timer
	VWait
	ResetTimer
	NPrint Timer
	MouseWait
	End

@ENDNODE ResetTimer

@NODE Lisa "RIAmosFuncLib"
@{fg shine}
Function: Lisa@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : chipver=Lisa

   This will return the current Lisa chip version :

    $00 for OCS Denise
    $F7 for ECS Denise
    $F8 for AGA Lisa

e.g.

	Select Lisa
	  Case 0
	    NPrint "You have an OCS Machine!"
	  Case $F7
	    NPrint "You have an ECS Machine!"
	  Case $F8
	    NPrint "You have an AGA Machine!"
	  Case $F9
	    NPrint "You have a AAA Machine?!"	; Maybe... :)
	End Select
	MouseWait
	End

@ENDNODE Lisa

@NODE Reboot "RIAmosFuncLib"
@{fg shine}
Statement: Reboot@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : Reboot

   This will perform a cold reboot

e.g.

	NPrint "Press mousebutton to reset.."
	MouseWait
	Reboot

@ENDNODE Reboot

@NODE FileSize "RIAmosFuncLib"
@{fg shine}
Function: FileSize@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : size.l=FileSize(filename$)

  This returns the length (in bytes) of the file.

e.g.

	NPrint "Startup is ",FileSize("S:startup-sequence")," bytes long!"
	MouseWait
	End

@ENDNODE FileSize


@NODE KeyCode "RIAmosFuncLib"
@{fg shine}
Function: KeyCode@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : keycode=KeyCode

    This will return the status of the keyboard in the form of a keycode.
You will need to experiment to find out the desired keycode for a particular
key. This merely peeks address $bfec01 and returns the value found.

e.g.

	NPrint KeyCode
	MouseWait
	End

@ENDNODE KeyCode

@NODE FindVolume "RIAmosFuncLib"
@{fg shine}
Function : FindVolume@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : success=FindVolume(volumename$)

  This will look to see if the specified volume is present, and returns
0 if it is not, or -1 if it is. If the volume is not present, this function
will NOT bring up a Requester ("Please insert Volume...")
The ":" should not be included in the volumename.

This is useful when waiting for diskswaps if you have a BlitzMode display.

e.g.

		<BlitzModesStatements>
		QAMIGA
		Repeat
		  VWait
		Until FindVolume("DISK2")
		BLITZ
		<More statements>

@ENDNODE FindVolume

@NODE DeviceName$ "RIAmosFuncLib"
@{fg shine}
Function : DeviceName$@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : devname$=DeviceName$(volumename$)

  This will return the device name of the specified volume or "" if the
volume was not found. The ":" may or may not be included.

e.g.

		NPrint DeviceName$("WORK:")

@ENDNODE DeviceName$

@NODE BlitterDone "RIAmosFuncLib"
@{fg shine}
Function : BlitterDone@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : status=BlitterDone

  This checks to see if the Blitter has finished BLITting. -1=Yes, 0=No

e.g.

	Repeat
	Until BlitterDone

@ENDNODE BlitterDone

@NODE WaitBlitter "RIAmosFuncLib"
@{fg shine}
Statement : WaitBlitter@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : WaitBlitter

  This will halt program execution until the Blitter is ready for use.

e.g.

	Blit 0,0,0
	WaitBlitter
	   ..
	   ..

@ENDNODE WaitBlitter

@NODE cacheson "RIAmosFuncLib"
@{fg shine}
Statement : CachesOn@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : CachesOn bitmask

	This function provides global control of any instruction or data
	caches that may be connected to the system.  All settings are
	global -- per task control is not provided.

	The action taken by this function will depend on the type of
	CPU installed.  This function may be patched to support external
	caches, or different cache architectures.  In all cases the function
	will attempt to best emulate the provided settings.  Use of this
	function may save state specific to the caches involved.

	The list of supported settings is provided in the exec/execbase.i
	include file.  The bits currently defined map directly to the Motorola
	68030 CPU CACR register.  Alternate cache solutions may patch into
	the Exec cache functions.  Where possible, bits will be interpreted to
	have the same meaning on the installed cache.

	As a side effect, this function clears all caches.

	Inputs: bitMask - a mask with ones for all bits to be switched on.

	******* Selected bit definitions for Cache manipulation calls **************

	bit  0 (EnableI)		: Enable instruction cache
	bit  1 (FreezeI)		: Freeze instruction cache
	bit  3 (ClearI)	   		: Clear instruction cache
	bit  4 (IBE)			: Instruction burst enable
	bit  8 (EnableD)		: 68030 Enable data cache
	bit  9 (FreezeD)		: 68030 Freeze data cache
	bit 11 (ClearD)	  		: 68030 Clear data cache
	bit 12 (DBE)			: 68030 Data burst enable
	bit 13 (WriteAllocate)	: 68030 Write-Allocate mode (must always be set)
	bit 31 (CopyBack)   	: Master enable for copyback caches

@ENDNODE

@NODE cachesoff "RIAmosFuncLib"
@{fg shine}
Statement : CachesOff@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : CachesOff bitmask

	This function provides global control of any instruction or data
	caches that may be connected to the system.  All settings are
	global -- per task control is not provided.

	The action taken by this function will depend on the type of
	CPU installed.  This function may be patched to support external
	caches, or different cache architectures.  In all cases the function
	will attempt to best emulate the provided settings.  Use of this
	function may save state specific to the caches involved.

	The list of supported settings is provided in the exec/execbase.i
	include file.  The bits currently defined map directly to the Motorola
	68030 CPU CACR register.  Alternate cache solutions may patch into
	the Exec cache functions.  Where possible, bits will be interpreted to
	have the same meaning on the installed cache.

	As a side effect, this function clears all caches.

	Inputs: bitMask - a mask with ones for all bits to be switched off.

	******* Selected bit definitions for Cache manipulation calls **************

	bit  0 (EnableI)		: Enable instruction cache
	bit  1 (FreezeI)		: Freeze instruction cache
	bit  3 (ClearI)	   		: Clear instruction cache
	bit  4 (IBE)			: Instruction burst enable
	bit  8 (EnableD)		: 68030 Enable data cache
	bit  9 (FreezeD)		: 68030 Freeze data cache
	bit 11 (ClearD)	  		: 68030 Clear data cache
	bit 12 (DBE)			: 68030 Data burst enable
	bit 13 (WriteAllocate)	: 68030 Write-Allocate mode (must always be set)
	bit 31 (CopyBack)   	: Master enable for copyback caches

@ENDNODE

@NODE gttagvalue "RIAmosFuncLib"
@{fg shine}
Statement : GTTagValue@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : GTTagValue (tagvalue.w)

Returns a tag value $80080000 if called without parameter or $8008<tagvalue>
as a combined value. Usefull to produce tagvalues for GadTools.

@ENDNODE

@NODE changedir "RIAmosFuncLib"
@{fg shine}
Statement : ChangeDir@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : ChangeDir(dir$)

Makes the directory dir$ to the current directory.
If used as a function, ChangeDir returns -1 is success and 0 if the directory could not be found.

@ENDNODE

@NODE swapbank "RIAmosFuncLib"
@{fg shine}
Statement : SwapBank@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : SwapBank sourcebank,destbank

@ENDNODE

@NODE saveexec "RIAmosFuncLib"
@{fg shine}
Statement : SaveExec@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : SaveExec filename$,list()

@ENDNODE


@NODE Examples "Example Programs"

                             @{b}@{u}Example Programs@{ub}@{uu}

@{fg shine}EXAMPLE 1@{fg text} - Example usage of most RIAMOSFuncLib commands:

	@{" Load Example 1 " system "run >NIL: Blitz3:amiblitz3 Blitz3:DOCS/userlibs/Examples/RIAMOSFuncLib1.bb"}

@ENDNODE Examples
