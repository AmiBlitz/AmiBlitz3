@database CIAProtrackerLib
@$VER: CIAPROTRACKERLIB V1.2 (27.01.2007)- Updated by mrodfr.
@author "Crossbones"
@remark Created with Heddley v1.20ß © Edd Dumbill 1994-5

@node "Main" "Protracker Library Documentation"


                          @{fg shine}CIA Protracker Library@{fg text}
                              @{fg fill}Blitz Basic II@{fg text}

                                Updated by:
                         Crossbones/Binary Assault


                               @{"Introduction" link "intro" 0}
                       @{"Getting Started/Installation" link "getting" 0}
                                 @{"Commands" link "commands" 0}
                                   @{"Bugs" link "bugs" 0}
                           @{"Contacting the author" link "contacting" 0}
                             @{"Revision History" link "history" 0}
                    @{"..And the page where I thank people" link "thanks" 0}
@endnode

@node "getting" "Getting Started/Installation"
                             @{fg shine}Getting Started:@{fg text}


@{u}@{fg shine}What you'll need:@{uu}@{fg text}

 o Blitz Basic II version 1.8 or greater.
 o An Amiga@{fg fill}*@{fg text}
 o Any music file in protracker format.


@{u}@{fg shine}Machine Requirements:@{uu}@{fg text}

 o Kickstart 2.0x+
 o At @{b}least@{ub} 1 meg of chip ram.
 o A kickin' stereo.


@{u}@{fg shine}Installing the library:@{uu}@{fg text}

 First, remove any older version of this library you might have. Look for names
such as "NeilsTrackerLib.obj" or "CiaTrackerLib.obj." Don't delete them, but
move them out of the way for now, keeping them until you're sure you don't need
them, or that you've found the correct library to remove.

 Now copy the included library into your blitzlibs:userlibs directory. Once
copied, you'll need to recompile your DEFLIBS file to use it. (@{fg fill}NOTE@{fg text}: Users of
version 2.1 need not do this, according to Acid.)

@{fg fill}*@{fg text} - I sincerely hope you have one of these. :)
@endnode

@node "intro" "Introduction"
                               @{fg shine}Introduction@{fg text}



The standard soundtracker replay routines supplied with Blitz Basic 2 have many
faults, which this library attempts to overcome.  Some of the features are:

  - Plays all PT songs that utilise either the VBLANK timing or the
    more recent CIA based timings
  - Plays back correctly on 50/60Hz systems, running either PAL or NTSC
  - Contains more specialised functions for advanced programmers
  - Enables the programmer to syncronise graphics with their music


@{u}@{fg shine}Credits:@{uu}@{fg text}

Original ProTracker playroutine by Amiga Freelancers, converted and enhanced
for Blitz by Neil O'Rourke.  Naggings from Roy, Jeff and Richard. Newer
revisions and further enhancements by @{"Crossbones" link "contacting" 0}/Binary Assault.


@{u}@{fg shine}NOTE:@{uu}@{fg text}

 Neil stopped work on the library at version 1.6. Unfortunately, all the source
code I've located of this library is only at version 1.3. This means that if
you are fimiliar with the last version of his library, a few of the commands
might not contain the same sytax or might not even be in this library any
more.

 If you find that you simply can't live without a certain feature, you might
try to contact me and coax me into providing the update you need.  I say
@{i}*MIGHT*@{ui} because there is no guarentee that I'll work on it.
@endnode

@node "commands" "Commands (Contents)"
                                 @{fg shine}Commands@{fg text}

                          @{"  LoadTrackerModule   " link "LoadTrackerModule" 0}
                          @{"    StartTracker      " link "StartTracker" 0}
                          @{"    StopTracker       " link "StopTracker" 0}
                          @{"    DecodeModule      " link "DecodeModule" 0}
                          @{"   GetTrackerSize     " link "GetTrackerSize" 0}
                          @{" GetTrackerLocation   " link "GetTrackerLocation" 0}
                          @{"  FreeTrackerModule   " link "FreeTrackerModule" 0}
                          @{"   GetTrackerEvent    " link "GetTrackerEvent" 0}
                          @{"  CheckTrackerEvent   " link "CheckTrackerEvent" 0}
                          @{"   WaitTrackerEvent   " link "WaitTrackerEvent" 0}
                          @{"    CheckTrackerID    " link "CheckTrackerID" 0}
                          @{"    GetModuleName$    " link "GetModuleName$" 0}
                          @{"  ModulePositionJump  " link "ModulePositionJump" 0}
                          @{"     ModuleToChip     " link "ModuleToChip" 0}
                          @{"    GetSongPosition   " link "GetSongPosition" 0}
                          @{"      PauseModule     " link "PauseModule" 0}
                          @{"  ChangeTrackerVBLank " link "ChangeTrackerVBlank" 0}
                          @{"      PlayTracker     " link "PlayTracker" 0}
                          @{"     TrackerVolume    " link "TrackerVolume" 0}
                          @{"   ChangeTrackerMask  " link "ChangeTrackerMask" 0}
                          @{"     ModulePatterns   " link "ModulePatterns" 0}
                          @{"SetSongPatternPosition" link "SetSongPatternPosition" 0}
                          @{"   GetTrackerVolume   " link "GetTrackerVolume" 0}
                          @{"    GetTrackerNote    " link "GetTrackerNote" 0}
                          @{"   SetTrackerTempo    " link "SetTrackerTempo" 0}
                          @{" GetTrackerInstrument " link "GetTrackerInstrument" 0}
                          @{"   GetSongPosition    " link "GetSongPosition" 0}
                          @{"    GetSongLength     " link "GetSongLength" 0}
                          @{"  StartTrackerPatPos  " link "StartTrackerPatPos" 0}
                          @{"  GetSampleLocation   " link "GetSampleLocation" 0}
                          @{"   GetSampleLength    " link "GetSampleLength" 0}
                          @{"    GetSampleName$    " link "GetSampleName$" 0}
                          @{"    BuildNoteTable    " link "BuildNoteTable" 0}
                          @{" GetTrackerNoteNumber " link "GetTrackerNoteNumber" 0}
                          @{"   TrackerPlayLoop    " link "TrackerPlayLoop" 0}
                          @{"   TrackerPlayOnce    " link "TrackerPlayOnce" 0}
                          @{"   TrackerModuleEnd   " link "TrackerModuleEnd" 0}
                          @{"  TrackerDeInitialise " link "TrackerDeInitialise" 0}
                          @{"  TrackerReInitialise " link "TrackerReInitialise" 0}
                          @{"  AllocatePatternMem  " link "AllocatePatternMem" 0}
                          @{"    GetChannelInfo    " link "GetChannelInfo" 0}
                          @{" TrackerPatternToMem  " link "TrackerPatternToMem" 0}
                          @{" GetModulePosition    " link "GetModulePosition" 0}
                          @{" PlayModule           " link "PlayModule" 0}
@endnode

@node "bugs" "Squish squish!"
                                   @{fg shine}Bugs@{fg text}
                         (@{fg fill}And How To Squash Them!@{fg text})


@{u}@{fg shine}Things I know about@{uu}@{fg text}

 o Because of some unknown problem, the routine actually reserves 3 bytes of
   memory (added to the actual module size.) Keep this in mind when calling
   the function to find out the byte-size of a module.

@{u}@{fg shine}Things I don't know about@{uu}@{fg text}

 @{i}Well!?! If I don't know about them, I can't really put them here can I?@{ui} ;)
@endnode

@node "contacting" "Contacting The Author"
                        @{b}@{fg shine}How to Contact the Author:@{ub}@{fg text}
                            (This part's easy!)

                         @{fg shine}Crossbones/Binary Assault@{fg text}
                              @{i}aka Steve Flock@{ui}

                               @{b}Via Internet@{ub}
                            madgun68\@attbi.com

                              @{b}Via Snail-Mail@{ub}
                                Steve Flock
                            2421 west LaCrosse
                            Spokane, Washington
                                   99205

(@{b}@{fg fill}Note:@{ub}@{fg text} @{i}Please be sure that if you're contacting me via snailmail that you put@{ui}
@{i}the correct postage on the letter. If I have to pay to get the mail, chances@{ui}
@{i}are you won't get a reply. I am at this address again.@{ui}.)
@endnode

@node "history" "History"
                   @{fg highlight}Revision History : CiaTrackerLibrary@{fg text}

@{u}@{fg shine}Pre 1.01B:@{uu}@{fg text}

 -Original version by Neil updated to use a decent method of CIA timing. No
  longer needs the crappy "SetDMA" command. :)

@{u}@{fg shine}1.01B:@{uu}@{fg text}

 -Fixed problem with slots. (Was supposed to be able to allow 0-8, but was
  only set only to keep track through 7.
 -Added various commands in an attempt to get up to date with the commands
  from Neil's last update. (Version 1.6)
 -Added better run-time error checking (Limited edition version of 1.01B.)

@{u}@{fg shine}1.02:@{uu}@{fg text}

 -Hoo boy! Did I ever screw up 1.01B. Good thing I didn't send it too much.
  Seems that the run-time errors section REALLY made a mess of things.
  Deleted them and rewrote the entire error checking system. MUCH better.
 -I am now using the TrackerTester program on all versions of the library
  ready for release. Since I have problems with beta testers offering to
  help, then never saying a damn thing once they get the library, I figure
  this is the next best thing. Checks all major commands for failure.
  (NOTE: This program is now included in releases. Use it if you have
  problems and report the errors/bugs to me for fixing.)
 -Fixed small problem with LoadTrackerModule command. (@{b}1.02a@{ub})
 -DecodeModule command changed to also include function from ModuleToChip.
  ModuleToChip still tokenises, but performs no function. (@{b}1.02a@{ub})
 -Repaired section that grabs the cia timer. This fixed the following
  problems:
  - Used to lose characters over the serial port when the player was active.
  - Failed to play if one of the two cia timers was being used. (It only
    was able to allocate one timer successfully, and failed on the other.)
  These two should fix any problems the player had on specific machines.
  (@{b}1.02a@{ub})

@{u}@{fg shine}1.055:@{uu}@{fg text} (@{b}Current@{ub})
 - Honestly, there are too many changes that I've made to mention here. I've
   also picked up limited development of the library again, after an absense
   of several years. I've lost track of when some of the changes I made took
   place.
 - DecodeModule bug introduced at some point. Didn't properly copy the module
   from fastram to chip.
 - LED/Filter state returned once the library is closed down. (This occurs
   when a program using it exits.)
 - Several new commands.
@endnode

@node "thanks" "Thanks!! :)"
                         @{fg highlight}The Thankyou Page:@{fg text}



 This is the page where I get to thank all the people who have helped this
library advance to the stage it's currently at.


                             Ted Bailey
                          Andrew (Defender)
                           Richard Elmore


 I know there are more, but I've forgotten your names. If you're seeing this
and saying "Geez, and he forgot me!" then get ahold of me and let me know.
@endnode

@node "LoadTrackerModule" "LoadTrackerModule (Command)"
                             @{fg highlight}LoadTrackerModule@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

success=LoadTrackerModule(TrackerModule#,FileName$)

@{u}@{fg shine}Comments:@{uu}@{fg text}

Loads the named module into chip ram, ready for playing.  This command can only
be called in Amiga mode.  success is a boolean return code (true).  If the load
fails for any reason, success returns the AmigaDOS error code.

@{b}@{fg fill}Note@{ub}@{fg text} that there is an implicit call to FreeTrackerModule for whatever module
you are trying to load.  However, if you want to load another module, don't try
to load it on top of the existing one that is playing. Use another
TrackerModule# (you have from 0 to 8).  The results are unpredictable, and
range from nothing to a system crash.  We can't call StopTracker, because this
will stop everything.
@endnode

@node "StartTracker" "StartTracker (Command)"
                               @{fg highlight}StartTracker@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

success=StartTracker(TrackerModule#)

@{u}@{fg shine}Comments:@{uu}@{fg text}

Starts to play the requested module, stopping any modules already playing, or
restarts the current module, and returns true.  Returns false if the module
couldn't be started for some reason (like it isn't loaded).
@endnode

@node "StopTracker" "StopTracker (Command)"
                                @{fg highlight}StopTracker@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

StopTracker

@{u}@{fg shine}Comments:@{uu}@{fg text}

Stops the current module. Not much to it, really.
@endnode

@node "DecodeModule" "DecodeModule (Command)"
                               @{fg highlight}DecodeModule@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

DecodeModule TrackerModule#,ModuleAddress

@{u}@{fg shine}Comments:@{uu}@{fg text}

 This sets an arbitary area of memory as a tracker module, useful if you have
BLoaded/INCBIN'd a file and want to hear if it is a module. Caution:  a
non-module may crash the Amiga when you try to play it.

@{fg fill}NOTE:@{fg text} As of release 1.02a, the ModuleToChip command has been changed.
      DecodeModule now does this for you automatically if the module that
      is being decoded is in fast ram. The ModuleToChip command will still
      tokenise though, to prevent problems that might occur to previous
      users of this library.
@endnode

@node "GetTrackerSize" "GetTrackerSize (Command)"
                              @{fg highlight}GetTrackerSize@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

modulelength=GetTrackerSize(TrackerModule#)

@{u}@{fg shine}Comments:@{uu}@{fg text}

Not really much of a useful command. Simply returns the size (in bytes) that
the module is using in memory. There should be no need to use this information,
and these commands are only included because they served a purpose in debugging
a long time ago, and to remove them would cause problems with the Blitz tokens.
@endnode

@node "GetTrackerLocation" "GetTrackerLocation (Command)"
                              @{fg highlight}GetTrackerLocation@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

modulelocation=GetTrackerLocation(TrackerModule#)

@{u}@{fg shine}Comments:@{uu}@{fg text}

Not really much of a useful command. Simply returns the memory location that
the module is occupying. There should be no need to use this information,  and
these commands are only included because they served a purpose in debugging  a
long time ago, and to remove them would cause problems with the Blitz tokens.
@endnode

@node "FreeTrackerModule" "FreeTrackerModule (Command)"
                             @{fg highlight}FreeTrackerModule@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

FreeTrackerModule TrackerModule#

@{u}@{fg shine}Comments:@{uu}@{fg text}

This frees a module loaded with LoadTrackerModule.  You cannot free a module
that has been set up with @{"DecodeModule" link "DecodeModule" 0} (see below), but there is nothing to
stop you trying.
@endnode

@node "GetTrackerEvent" "GetTrackerEvent (Command)"
                              @{fg highlight}GetTrackerEvent@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

trackerevent=GetTrackerEvent

@{u}@{fg shine}Comments:@{uu}@{fg text}

This command is a customised extension to the ProTracker replay routine.  A
"TrackerEvent" occurs when the replay routine comes across a $8xx command. This
command is not defined in the command list, and many demos (eg Jesus on E's)
use it to trigger effects.  This command gets the most recent TrackerEvent, so
any program looking at this will have to compare the current value to the value
that triggered the current effect.
@endnode

@node "CheckTrackerEvent" "CheckTrackerEvent (Command)"
                             @{fg highlight}CheckTrackerEvent@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

success=CheckTrackerEvent

@{u}@{fg shine}Comments:@{uu}@{fg text}

This routine checks to see if a TrackerEvent has occured since the last time
the routine was called, and returns True if it has.  Use @{"GetTrackerEvent" link "GetTrackerEvent" 0} to
determine what data the $8xx command had.
@endnode

@node "WaitTrackerEvent" "WaitTrackerEvent (Command)"
                             @{fg highlight}WaitTrackerEvent@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

@{b}@{fg fill}Unknown@{ub}@{fg text}

@{u}@{fg shine}Comments:@{uu}@{fg text}

** V1.6: DO NOT USE THIS COMMAND! **

@{b}@{i}** V1.0b: I haven't checked this. **@{ub}@{ui}

1.055: Still unchecked. Anyone ever used this?
@endnode

@node "CheckTrackerID" "CheckTrackerID (Command)"
                               @{fg highlight}CheckTrackerID@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

success=CheckTrackerID(TrackerModule#)

@{u}@{fg shine}Comments:@{uu}@{fg text}

This checks the module for the standard Pro/Noise/SoundTracker ID string "M.K."
(or "M!K!" in the case of a 100 pattern PT module), and returns True if one of
them is found.  This means that you can safely call StartTracker.

Note that there is no 100% guarenteed way of determining what is a module and
what isn't.  Bit Arts, for example, remove the M.K. identifier to make it
harder to rip modules, so if you're writing a module ripping program, you have
to take this result with a grain of salt.
@endnode

@node "ModuleToChip" "ModuleToChip (Command)"
                               @{fg highlight}ModuleToChip@{fg text}



@{fg fill}NOTE:@{fg text} This command is outdated as of this release. Even though the command
      will tokenise, the command has no function. Please see the
      @{"DecodeModule" link "DecodeModule" 0} command for more details.
@endnode

@node "SetSongPatternPosition" "SetSongPatternPosition"
                             @{fg shine}SetSongPatterPosition@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

SetSongPatternPosition Pattern#,Position#

@{u}@{fg shine}Comments:@{uu}@{fg text}

This command changes where the tracker routine is playing in the module. This
command causes the tracker to jump while the module is being played. Use
@{"StartTrackerPatPos" link "StartTrackerPatPos" 0} if you want to start a module at a particular position.
@endnode

@node "GetModuleName$" "GetModuleName$ (Command)"
                              @{fg highlight}GetModuleName$@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

name$=GetModuleName$(TrackerModule#)

@{u}@{fg shine}Comments:@{uu}@{fg text}

Returns the name of the module in name$. Not too useful, but I made a little
interface for workbench using the library, and needed a command like this.
@endnode

@node "ModulePositionJump" "ModulePositionJump (Command)"
                            @{fg highlight}ModulePositionJump@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

ModulePositionJump(Position#)

@{u}@{fg shine}Comments:@{uu}@{fg text}

 This command tells the play routine to jump to the pattern requested in
Position#.

@{b}@{fg fill}NOTE:@{ub}@{fg text} There is no error checking done at this time. It would be wise to know
      where you're going.
@endnode

@node "GetModulePosition" "GetModulePosition (Command)"
                             @{fg highlight}GetSongPosition@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

position=GetSongPosition

@{u}@{fg shine}Comments:@{uu}@{fg text}

This returns the current pattern the replay routine is playing.
@endnode

@node "PauseModule" "PauseModule (Command)"
                                @{fg highlight}PauseModule@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

PauseModule

@{u}@{fg shine}Comments:@{uu}@{fg text}

Stops the current module from playing, effectively pausing it. Use the command
again to unpause it.
@endnode

@node "ChangeTrackerVBlank" "ChangeTrackerVBlank"
                            @{fg highlight}ChangeTrackerVBlank@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

ChangeTrackerVBlank

@{u}@{fg shine}Comments:@{uu}@{fg text}

This command seems pretty useless, but there sure are alot of module players
that offer vblank timing. Call the command before playing the module, then call
the StartTracker command, so it knows which module to use. Then simply call the
@{"PlayModule" link "PlayModule" 0} command on every vblank.
@endnode

@node "PlayModule" "PlayModule (Command)"
                                @{fg highlight}PlayModule@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

PlayModule

@{u}@{fg shine}Comments:@{uu}@{fg text}

 This command is to be used if you use the @{"ChangeTrackerVBlank" link "ChangeTrackerVBlank" 0} command.

 To use this command, call ChangeTrackerVBlank first. Secondly, call the
@{"StartTracker" link "StartTracker" 0} command. At each vblank, you must then call PlayMoudule, which
will keep the music playing.
@endnode

@node "TrackerVolume" "TrackerVolume (Command)"
                               @{fg shine}TrackerVolume@{fg text}

@{u}@{fg highlight}Usage:@{uu}@{fg text}

TrackerVolume [Volume Level]

@{u}@{fg highlight}Comments:@{uu}@{fg text}

 What can be said? This command changes the volume level of the module. Note:
this effects all the channels currently masked in. (Refer to the command
@{"ChangeTrackerMask" link "ChangeTrackerMask" 0} for more information on this).
@endnode

@node "ChangeTrackerMask" "ChangeTrackerMask"
                             @{fg shine}ChangeTrackerMask@{fg text}

@{u}@{fg highlight}Usage:@{uu}@{fg text}

ChangeTrackerMask [NewMask]

@{u}@{fg highlight}Comments:@{uu}@{fg text}

 For all intents and purposes, you might never need this command. This command
allows you to tell the replay routine that it is not supposed to use a certain
channel, or certain channels. This is useful if you want, for instance, a two
channel module playing and sounds effects at the same time. The command wants
to know what channels the replay routine CAN use.

@{fg fill}How to figure out what channels to mask:@{fg text}

 This is fairly simple, and there are a couple of different ways to do this.

 1. @{b}@{fg shine}ChangeTrackerMask %0000ABCD@{ub}@{fg text} - Where ABCD represents channels 0-3.

    Channels to be used by the replay routine would be represented as
    1's, and channels you wish to use for sound effects, etc., would be
    represented as 0's.

    Example: @{fg shine}ChangeTrackerMask %00001001@{fg text} would play channels 0 and 3, while
    channels 1 and 2 would be free for you to use.

 2. @{b}@{fg shine}ChangeTrackerMask [DecimalValue]@{ub}@{fg text} - Where decimal value represents:

    1 - Channel 0
    2 - Channel 1
    4 - Channel 2
    8 - Channel 3

    Example: @{fg shine}ChangeTrackerMask 9@{fg text} would play channels 0 and 3, while channels
    1 and 2 would be free for you to use.
@endnode

@node "ModulePatterns" "ModulePositions"
                             @{fg highlight} ModulePatterns@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

patt=ModulePatterns(Module#)

@{u}@{fg shine}Comments:@{uu}@{fg text}

 This command is kind of useless, but I wanted one so it's included. ;) All
this command does is return the number of patterns used in the module.
@endnode

@node "GetSongPosition" "   GetSongPosition    "
                      @{fg shine}GetSongPosition@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

pos=GetSongPosition

@{u}@{fg shine}Comments:@{uu}@{fg text}

Returns the pattern number the tracker is playing.
@endnode

@node "GetSongLength" "    GetSongLength     "
                          @{fg shine}GetSongLength@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

length=GetSongLength

@{u}@{fg shine}Comments:@{uu}@{fg text}

Returns the number of patterns in use for the currently playing module.
@endnode

@node "StartTrackerPatPos" "  StartTrackerPatPos  "
                            @{fg shine}StartTrackerPatPos@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

success=StartTrackerPatPos(Module#,Pattern#,Position#)

@{u}@{fg shine}Comments:@{uu}@{fg text}

Starts a module at the desired pattern and position. Not to be confused with
@{"SetSongPatterPosition" link "SetSongPatterPosition" 0}, which changes the position while a module is playing.
@endnode

@node "GetSampleLocation" "  GetSampleLocation   "
                              @{fg shine}GetSampleLocation@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

mem.l=GetSampleLocation(Sample#)

@{u}@{fg shine}Comments:@{uu}@{fg text}

Returns the location in memory of a sample from the currently playing module.
@endnode

@node "GetSampleLength" "   GetSampleLength    "
                              @{fg shine}GetSampleLength@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

size.l=GetSampleLength(Sample#)

@{u}@{fg shine}Comments:@{uu}@{fg text}

Returns the size in bytes of a sample from the currently playing song.
@endnode

@node "GetSampleName$" "    GetSampleName$    "
                         @{fg shine}GetSampleName$@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

n$=GetSampleName$(Sample#)

@{u}@{fg shine}Comments:@{uu}@{fg text}

Returns the name of a sample from the currently playing song.
@endnode

@node "BuildNoteTable" "    BuildNoteTable    "
                           @{fg shine}BuildNoteTable@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

BuildNoteTable

@{u}@{fg shine}Comments:@{uu}@{fg text}

Builds a note table for use with the @{"GetTrackerNoteNumber" link "GetTrackerNoteNumber" 0} command.
@endnode

@node "GetTrackerNoteNumber" " GetTrackerNoteNumber "
                         @{fg shine}GetTrackerNoteNumber@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

note=GetTrackerNoteNumber(Channel#)

@{u}@{fg shine}Comments:@{uu}@{fg text}

Returns a number associated with the note being played on the selected channel.
You need to use the @{"BuildNoteTable" link "BuildNoteTable" 0} command before using this command. The table
looks as follows:

Number:856,808,762,720,678,640,604,570,538,508,480,453

Note:  C-1,C#1,D-1,D#1,E-3,F-1,F#1,G-1,G#1,A-1,A#1,B-1

Number:428,404,381,360,339,320,302,285,269,254,240,226

Note:  C-2,C#2,D-2,D#2,E-2,F-2,F#2,G-2,G#2,A-2,A#2,B-2

Number:214,202,190,180,170,160,151,143,135,127,120,113

Note:  C-3,C#3,D-3,D#3,E-1,F-3,F#3,G-3,G#3,A-3,A#3,B-3

I @{u}think@{uu} those are right. If not, the numbers are in the reverse order. ;)
@endnode

@node "TrackerPlayLoop" "   TrackerPlayLoop    "
                               @{fg shine}TrackerPlayLoop@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

TrackerPlayLoop

@{u}@{fg shine}Comments:@{uu}@{fg text}

The tracker will start the module over once it reaches the end.
@endnode

@node "TrackerPlayOnce" "   TrackerPlayOnce    "
                                @{fg shine}TrackerPlayOnce@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

TrackerPlayOnce

@{u}@{fg shine}Comments:@{uu}@{fg text}

The tracker will stop once it reaches the end of the module. @{"TrackerModuleEnd" link "TrackerModuleEnd" 0}
can be used to find out if the module has ended.
@endnode

@node "TrackerModuleEnd" "TrackerModuleEnd"
                              @{fg shine}TrackerModuleEnd@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

result=TrackerModuleEnd

@{u}@{fg shine}Comments:@{uu}@{fg text}

Returns TRUE if the module is finished or FALSE if still playing. Use with the
@{"TrackerPlayOnce" link "TrackerPlayOnce" 0} command.
@endnode

@node "TrackerDeInitialise" "  TrackerDeInitialise "
                            @{fg shine}TrackerDeInitialise@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

TrackerDeInitialise

@{u}@{fg shine}Comments:@{uu}@{fg text}

Frees any resources being used by the tracker. Useful if you're creating your
own module player, and need the cia timers for other replay routines. Use the
@{"TrackerReInitialise" link "TrackerReInitialise" 0} when you want to use the tracker again.
@endnode

@node "TrackerReInitialise" "TrackerReInitialise"
                           @{fg shine}TrackerReInitialise@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

TrackerReInitialise

@{u}@{fg shine}Comments:@{uu}@{fg text}

Causes the tracker to take hold of resources it needs in order to play modules.
This command is used to reactivate the tracker after the @{"TrackerDeInitialise" link "TrackerDeInitialise" 0}
command has been used.
@endnode

@node "AllocatePatternMem" "  AllocatePatternMem  "
                           @{fg shine}AllocatePatternMem@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

AllocatePatternMem

@{u}@{fg shine}Comments:@{uu}@{fg text}

Allocates a 1024 byte memory block for use with the @{"GetChannelInfo" link "GetChannelInfo" 0} and
@{"TrackerPatternToMem" link "TrackerPatternToMem" 0} commands. (Which are all pretty useless to the average
user.)
@endnode

@node "GetChannelInfo" "  AllocatePatternMem  "
                            @{fg shine}GetChannelInfo@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

n$=GetChannelInfo(Line#,Channel#)

@{u}@{fg shine}Comments:@{uu}@{fg text}

This command returns the selected note information to a string variable just
like what you'd see when using protracker. In this case, n$ would contain a
note such as "C#103C10" or "E-302A10". @{"AllocatePatternMem" link "AllocatePatternMem" 0} and
@{"TrackerPatternToMem" link "TrackerPatternToMem" 0} need to be used in conjunction with this command.
@endnode

@node "TrackerPatternToMem" "  AllocatePatternMem  "
                              @{fg shine}TrackerPatternToMem@{fg text}

@{u}@{fg shine}Usage:@{uu}@{fg text}

TrackerPatternToMem Pattern#

@{u}@{fg shine}Comments:@{uu}@{fg text}

Copies the selected pattern (from the currently playing module) to the
temporary memory location created by @{"AllocatePatternMem" link "AllocatePatternMem" 0}.
@{"GetChannelInfo" link "GetChannelInfo" 0} can then be used to get the information about the pattern.
@endnode

