@DataBase "LotanDraw"
@$VER: LOTANDRAWLIB V1.1 (27.01.2007)- Updated by mrodfr.
@Node Main "LotanDraw"

  @{b}Lotan's Draw Library 2.0 (25-01-99)@{ub}

    @{" DrBevel   " link DrBevel} Statement
    @{" DrBlit    " link DrBlit} Statement
    @{" DrBox     " link DrBox} Statement
    @{" DrBoxf    " link DrBoxf} Statement
    @{" DrCircle  " link DrCircle} Statement
    @{" DrCls     " link DrCls} Statement
    @{" DrEllipse " link DrEllipse} Statement
    @{" DrFont    " link DrFont} Statement
    @{" DrLine    " link DrLine} Statement
    @{" DrMode    " link DrMode} Statement
    @{" DrPen     " link DrPen} Statement
    @{" DrPlot    " link DrPlot} Statement
    @{" DrPort    " link DrPort} Command (Long)
    @{" DrText    " link DrText} Statement
    @{" DrTextLen " link DrTextLen} Function (Long)
    @{" DrTextMax " link DrTextMax} Function (Long)
    @{" DrTextStl " link DrTextStl} Statement
    @{" DrTopaz   " link DrTopaz} Statement

  @{b}Author@{ub}

    Olivier Laviale, Doumenge 46230 Montdoumerc, FRANCE

  @{b}Overview@{ub}

    I created this set of commands to be able to draw on windows, screens and bitmaps
    opened with OS functions instead of @{b}WindowLib@{ub}, @{b}ScreensLib@{ub} and @{b}BitMapLib@{ub}.

    My goal was to create easy to use and powerful functions,  because  drawing  with
    @{fg highlight}Move()@{fg text} and @{fg highlight}Draw()@{fg text} is really a hell of work.

    All functions available in this set are as easy to use  as  those  in  @{b}WindowLib@{ub},
    more efficient and totaly OS friendly, and as usual the library is really small :
    only 588 bytes.

  @{b}Note@{ub}

    You must use @{fg highlight}DrPort@{fg text}, to set the @{i}RastPort  structure@{ui}  to  use,  before  any  other
    function of the library, or functions will not draw anything.

  @{b}See also@{ub}

    OS Libs / Graphics.library.

    @{" History " link HIST}
    @{" Example " link EXAM}
@EndNode

@Node DrBevel "LotanDraw : DrBevel"

  @{b}@{u}DrBevel@{ub}@{uu}

    @{b}Syntax@{ub}   : DrBevel x1,y1,x2,y2,Pen1,Pen2

    @{b}Function@{ub} : Draws a bevel box on the currently used RastPort.

    @{b}Values@{ub}   : @{b}x1@{ub}, @{b}y1@{ub}, @{b}x2@{ub} and @{b}y2@{ub} specify two corners of the box to be drawn.

               @{b}Pen1@{ub} is the color register to use to draw the  @{i}Top/Left  side@{ui}  of  the
               box. @{b}Pen2@{ub} is the color register to useto draw the @{i}Bottom/Right side@{ui} of
               the box.

               Top/Left side and Bottom/Right side are not connected.

    @{b}See also@{ub} : @{" DrPort " link DrPort}
@EndNode
@Node DrBlit "LotanDraw : DrBlit"

  @{b}@{u}DrBlit@{ub}@{uu}

    @{b}Syntax@{ub}   : DrBlit BitMap,xSrc,ySrc,xDest,yDest,Width,Height
               DrBlit BitMap,xSrc,ySrc,xDest,yDest,Width,Height,MinTerm

    @{b}Function@{ub} : Used to blit a bitmap on the RastPort.

               This function is totaly OS friendly  and  should  work  with  any  Gfx
               Boards.
@EndNode
@Node DrBox "LotanDraw : DrBox"

  @{b}@{u}DrBox@{ub}@{uu}

    @{b}Syntax@{ub}   : DrBox x1,y1,x2,y2
               DrBox x1,y1,x2,y2,Pen

    @{b}Function@{ub} : Draws a rectangular outline onto the currently used RastPort.

    @{b}Values@{ub}   : @{b}x1@{ub}, @{b}y1@{ub}, @{b}x2@{ub} and @{b}y2@{ub} specify two corners of the box to be drawn.

               @{b}Pen@{ub} is the color register to use to draw. If not specified the current
               pen will be used.

    @{b}See also@{ub} : @{" DrBoxf " link DrBoxf}
               @{" DrPort " link DrPort}
@EndNode
@Node DrBoxf "LotanDraw : DrBoxf"

  @{b}@{u}DrBoxf@{ub}@{uu}

    @{b}Syntax@{ub}   : DrBoxf x1,y1,x2,y2
               DrBoxf x1,y1,x2,y2,Pen

    @{b}Function@{ub} : Draws a solid rectangular shape on the currently used RastPort.

    @{b}Values@{ub}   : @{b}x1@{ub}, @{b}y1@{ub}, @{b}x2@{ub} and @{b}y2@{ub} refer to two corners of the box.

               @{b}Pen@{ub} is the color register to use to draw. If not specified the current
               pen will be used.

    @{b}See also@{ub} : @{" DrBox  " link DrBox}
               @{" DrPort " link DrPort}
@EndNode
@Node DrCircle "LotanDraw : DrCircle"

  @{b}@{u}DrCircle@{ub}@{uu}

    @{b}Syntax@{ub}   : DrCircle x,y,Rad
               DrCircle x,y,Rad,Pen

    @{b}Function@{ub} : Used to draw an outlined circle.

    @{b}Values@{ub}   : @{b}x@{ub} and @{b}y@{ub} specify the mid point of the circle.

               The @{b}Rad@{ub} parameter specifies the radius of the circle.

               @{b}Pen@{ub} is the color register to use to draw. If not specified the current
               pen will be used.

    @{b}See also@{ub} : @{" DrEllipse " link DrEllipse}
@EndNode
@Node DrCls "LotanDraw : DrCls"

  @{b}@{u}DrCls@{ub}@{uu}

    @{b}Syntax@{ub}   : DrCls Pen

    @{b}Function@{ub} : Clears the currently used RastPort.

    @{b}Values@{ub}   : @{b}Pen@{ub} is the color register to use to clear the RastPort.

    @{b}See also@{ub} : @{" DrPort " link DrPort}
@EndNode
@Node DrEllipse "LotanDraw : DrEllipse"

  @{b}@{u}DrEllipse@{ub}@{uu}

    @{b}Syntax@{ub}   : DrEllipse x,y,xRad,yRad
               DrEllipse x,y,xRad,yRad,Pen

    @{b}Function@{ub} : Used to draw an outlined ellipse.

    @{b}Values@{ub}   : @{b}x@{ub} and @{b}y@{ub} specify the mid point of the ellipse.

               @{b}xRad@{ub} specifies the horizontal radius of the ellipse, @{b}yRad@{ub} the vertical
               radius.

               @{b}Pen@{ub} is the color register to use to draw. If not specified the current
               pen will be used.

    @{b}See also@{ub} : @{" DrCircle " link DrCircle}
@EndNode
@Node DrFont "LotanDraw : DrFont"

  @{b}@{u}DrFont@{ub}@{uu}

    @{b}Syntax@{ub}   : DrFont Font
               @{i}rc.l @{ui}= DrFont(Font)

    @{b}Function@{ub} : Will change the RastPort's font.

               The font must of course have been successfully opened before  you  may
               start to use it.

    @{b}Values@{ub}   : If OK 0 is returned, else an error  number  is  returned  which  means
               something went wrong.

               @{b}Font@{ub} is a pointer to a @{i}TextFont structure@{ui} which  has  previously  been
               opened.

    @{b}Example@{ub}  : font.TextAttr\ta_Name = "Chicago",13
               *Font.TextFont = @{fg highlight}OpenDiskFont_@{fg text}(font)

               @{fg highlight}DrFont@{fg text} *Font
               ...
               ...
               @{fg highlight}CloseFont_@{fg text} *Font

    @{b}See also@{ub} : OpenDiskFont()
@EndNode
@Node DrLine "LotanDraw : DrLine"

  @{b}@{u}DrLine@{ub}@{uu}

    @{b}Syntax@{ub}   : DrLine x1,y1,x2,y2[,xn,yn...]
               DrLine x1,y1,x2,y2[,xn,yn...],Pen

    @{b}Function@{ub} : Used to draw a serie of lines.

    @{b}Values@{ub}   : @{b}x1@{ub},@{b}y1@{ub}...@{b}xn@{ub},@{b}yn@{ub} are coordinates.

               @{b}Pen@{ub} is the color register to use to draw. If not specified the current
               pen will be used.

    @{b}See also@{ub} : @{" DrPort " link DrPort}
@EndNode
@Node DrMode "LotanDraw : DrMode"

  @{b}@{u}DrMode@{ub}@{uu}

    @{b}Syntax@{ub}   : DrMode Mode

    @{b}Function@{ub} : Will change the drawing mode.

    @{b}Values@{ub}   : @{b}Mode@{ub} is the new drawing mode. See drawing flags.

    @{b}Example@{ub}  : Prints 3D Text to a Window.

               @{fg highlight}DrPort@{fg text} *Win\RPort

               @{fg highlight}DrMode@{fg text} #JAM1
               @{fg highlight}DrText@{fg text} "Hello",10,10, 3
               @{fg highlight}DrText@{fg text} "Hello", 9, 9, 1
               @{fg highlight}DrText@{fg text} "Hello", 8, 8, 2
               @{fg highlight}DrMode@{fg text} #JAM2

    @{b}See also@{ub} : @{" DrPort    " link DrPort}
               @{" DrText    " link DrText}
               SetDrMd() on graphics.doc.

@EndNode
@Node DrPen "LotanDraw : DrPen"

  @{b}@{u}DrPen@{ub}@{uu}

    @{b}Syntax@{ub}   : DrPen Pen

    @{b}Function@{ub} : Set drawing pen.

               Use this function to set the color to draw with.

               This function is  not  really  usefull  as  all  drawing  function  of
               LotanDraw  are  able  to  change  the color them selves. But it can be
               usefull anyway :

                  @{fg highlight}If@{fg text} Active @{fg highlight}DrPen@{fg text} 2 @{fg highlight}Else DrPen@{fg text} 1  ; Set color depending activation
                  @{fg highlight}DrBoxf@{fg text} 0,0,30,30                ; Draw with the good pen.

               This function will save you some code...

    @{b}See also@{ub} : @{" DrPort " link DrPort}
@EndNode
@Node DrPlot "LotanDraw : DrPlot"

  @{b}@{u}DrPlot@{ub}@{uu}

    @{b}Syntax@{ub}   : DrPlot x,y
               DrPlot x,y,Pen

    @{b}Function@{ub} : Changes the color of a pixel.

    @{b}Values@{ub}   : @{b}x@{ub} and @{b}y@{ub} are the position of the pixel.

               @{b}Pen@{ub} is the color register to use to draw. If not specified the current
               pen will be used.

    @{b}See also@{ub} : @{" DrPort " link DrPort}
@EndNode
@Node DrPort "LotanDraw : DrPort"

  @{b}@{u}DrPort@{ub}@{uu}

    @{b}Syntax@{ub}   : DrPort RastPort
               @{i}rc.l @{ui}= DrPort
               @{i}rc.l @{ui}= DrPort(RastPort)

    @{b}Function@{ub} : Sets the RastPort to draw in.

               The @{i}RastPort @{ui}set by this function  will  be  used  by  all  the  other
               drawing functions of the library.

    @{b}Values@{ub}   : @{b}RastPort@{ub} is a pointer to a @{i}RastPort structure@{ui}.

               Used as a function  @{fg highlight}DrPort@{fg text}  will  return  a  pointer  to  the  current
               @{i}RastPort structure@{ui}.

               If @{b}RastPort@{ub} is specified and @{fg highlight}DrPort@{fg text} used as a function, a  pointer  to
               the  current  @{i}RastPort structure@{ui} will be returned before setting it to
               the new value.

               OldRPort.l = @{fg highlight}DrPort@{fg text}(*Win\RPort)

    @{b}Example@{ub}  : @{fg highlight}DrPort@{fg text} *Win\RPort
               @{fg highlight}Printf@{fg text} "Current RastPort is $%h\n",@{fg highlight}DrPort@{fg text}

    @{b}See also@{ub} : @{" Printf " link LotanPrint.guide/Printf}
@EndNode
@Node DrText "LotanDraw : DrText"

  @{b}@{u}DrText@{ub}@{uu}

    @{b}Syntax@{ub}   : DrText Text,x,y,Pen
               DrText Text,x,y,Pen,Len

    @{b}Function@{ub} : Write a string in the currently used RastPort.

               The text will be drawn with the font set by @{fg highlight}SetFont()@{fg text}, or the  default
               font of the workbench.

    @{b}Values@{ub}   : @{b}Text@{ub} is the string to drawn. You can specify the number of  characters
               to draw with the argument @{b}Len@{ub}, else all the string will be drawn.

               @{b}x@{ub} and @{b}y@{ub} are the coordinates to draw the string to.

               @{b}Pen@{ub} is the color register to use to draw the string.

    @{b}Example@{ub}  : @{fg highlight}DrText@{fg text}   "Hello",10,10,1

    @{b}See also@{ub} : @{" DrFont " link DrFont}
               @{" DrMode " link DrMode}
               @{" DrPort " link DrPort}
@EndNode
@Node DrTextLen "LotanDraw : DrTextLen"

  @{b}@{u}DrTextLen@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= DrTextLen(Str)
               @{i}rc.l @{ui}= DrTextLen(Str,Len)

    @{b}Function@{ub} : Returns the size (in pixel)  of  a  string  relative  to  the  current
               RastPort.

    @{b}Values@{ub}   : @{b}Str@{ub} is the string that will be drawn on the RastPort.

               You can specify the number of characters to use with the argument @{b}Len@{ub},
               else all the characters in @{b}Str@{ub} will be used.

               @{b}rc@{ub} is the length (in pixel) of @{b}Str@{ub} relatively to the current RastPort.

    @{b}Example@{ub}  : @{fg highlight}DrPort@{fg text} *Win\RPort
               @{fg highlight}NPrint DrTextLen@{fg text}("Hello")
               @{fg highlight}NPrint DrTextLen@{fg text}("Hello",2)

    @{b}See also@{ub} : @{" DrPort " link DrPort}
               @{" DrText " link DrText}
@EndNode
@Node DrTextMax "LotanDraw : DrTextMax"

  @{b}@{u}DrTextMax@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= DrTextMax(x1,x2,Str)

    @{b}Function@{ub} : Returns the number of characters able to fit between @{b}x1@{ub} and @{b}x2@{ub}.

               This function uses the current @{i}RastPort @{ui}set by @{fg highlight}DrPort@{fg text},  and  according
               to  the  font used by this @{i}RastPort @{ui}calculate the number of characters
               (from the start of the string) that will fit between @{b}x1@{ub} and @{b}x2@{ub}.

    @{b}Example@{ub}  : Str.s = "Hello Lotan!!"
               @{fg highlight}DrText@{fg text} Str,10,0,3,@{fg highlight}DrTextMax@{fg text}(10,40,Str)

    @{b}See also@{ub} : @{" DrPort " link DrPort}
               @{" DrText " link DrText}
@EndNode
@Node DrTextStl "LotanDraw : DrTextStl"

  @{b}@{u}DrTextStl@{ub}@{uu}

    Syntax   : DrTextStl Style

    Function : Used to change the style of the text.

    Style can be a

    #underlined =  1
    #bold       =  2
    #italic     =  4
    #extended   =  8 ; Wider than normal
    #colour     = 64 ; Colour version

@EndNode
@Node DrTopaz "LotanDraw : DrTopaz"

  @{b}@{u}DrTopaz@{ub}@{uu}

    @{b}Syntax@{ub}   : DrTopaz Size

    @{b}Function@{ub} : Sets Topaz as font of the RastPort.

    @{b}Values@{ub}   : @{b}Size@{ub} must be an existing one (8 or 9).

    @{b}See also@{ub} : @{" DrFont " link DrFont}
@EndNode

@Node HIST "LotanDraw : History"
@Prev Main

  @{b}@{u}History@{ub}@{uu}

    I created this library because I wasn't using Blitz's WindowLib and drawing  with
    @{fg highlight}Move()@{fg text}, @{fg highlight}Draw()@{fg text}, @{fg highlight}WritePixel()@{fg text}... was a hell of work.

    @{b}0.30@{ub}

      - Created @{fg highlight}DrPort@{fg text}, @{fg highlight}DrPlot@{fg text}, @{fg highlight}DrBox@{fg text}.

    @{b}0.42@{ub}

      - Added @{fg highlight}DrBoxf@{fg text}, @{fg highlight}DrBevel@{fg text}.

    @{b}1.00@{ub}

      - Added @{fg highlight}DrLine@{fg text}, @{fg highlight}DrText@{fg text}, @{fg highlight}TextLength@{fg text}, @{fg highlight}DrCls@{fg text}.
      - Rework on @{fg highlight}DrBevel@{fg text}, @{fg highlight}DrBox@{fg text}.
      - @{fg highlight}DrPort@{fg text} return the old RastPort when setting a new one.

    @{b}1.20@{ub}

      - Rewrite @{fg highlight}DrBevel@{fg text} totaly... lots of bugs...
      - Rename @{fg highlight}TextLength@{fg text} to @{fg highlight}DrTextLen@{fg text}.
      - Double the number of coordinates.

    @{b}1.24@{ub}

      - Pen is now optional, if not specified the current pen is used.

    @{b}1.30@{ub}

      - Array for coordinates is now allocated at the start of the program instead of
        included in the code. You can now give up to 64 coordinates.
      - Explode the last (??) bug in @{fg highlight}DrBevel@{fg text}... finally... ;-)

    @{b}1.40@{ub}

      - Added @{fg highlight}DrTextMax@{fg text}, @{fg highlight}DrTextSlt@{fg text}.
      - Reduce the code a bit.

    @{b}2.00@{ub}   (25-01-99)                                          (Size 2844 / Code 588)

      - Added @{fg highlight}DrFont@{fg text}, @{fg highlight}DrMode@{fg text}, @{fg highlight}DrEllipse@{fg text}, @{fg highlight}DrCircle@{fg text}, @{fg highlight}DrBlit@{fg text}, @{fg highlight}DrTopaz@{fg text}.
      - Added @{fg highlight}DrPen@{fg text}.

    @{b}2.02@{ub}   (24-01-00)                                          (Size 2820 /Code 566)

      Recompiled with PhxAss v4 by Frank Wille.
@EndNode
@Node EXAM "LotanDraw : Example"

  @{b}@{u}Example@{ub}@{uu}

    It's easy to draw on screens or  windows  bitmap  because  they  have  already  a
    @{i}RastPort  structure@{ui}  and a BitMap, but you may be confused if you want to draw on
    simple bitmaps...

    Here is an example to show you how to draw on a bitmaps not attached to anything,
    or on bitmaps created with the @{b}BitMapLib@{ub}.

    Using OS functions :

      ;-> Create and initialise a @{i}RastPort structure@{ui}

      @{fg highlight}InitRastPort_@{fg text} RPort._RastPort

      ;-> Attach the BitMap to the RastPort structure.

      RPort\_BitMap = @{fg highlight}AllocBitMap_@{fg text}(640, 512, 8, 1|2, 0)

      @{fg highlight}If@{fg text} RPort\_BitMap
         @{fg highlight}DrPort RPort@{fg text}         ; Use the RastPort structure holding the BitMap
         @{fg highlight}DrCls@{fg text}  3             ; Clear bitmap with color 3
      @{fg highlight}Else
         Printf@{fg text} "Unable to create the bitmap\n"
      @{fg highlight}EndIf@{fg text}

      ...

    Using Blitz BitMap :

      @{fg highlight}InitRastPort_@{fg text} RPort._RastPort

      ;-> Check if the bitmap really exists, has @{fg highlight}Addr@{fg text}() will return  the  address  of
      ;   the object event if it has not been initialised at all.

      *Bmp.bitmap = @{fg highlight}Addr BitMap@{fg text}(0)

      @{fg highlight}If@{fg text} *Bmp\_width
         RPort\_BitMap = *Bmp
         @{fg highlight}DrPort@{fg text} RPort
         @{fg highlight}DrCls@{fg text}  3
      @{fg highlight}Else
         Printf@{fg text} "No BitMap\n"
      @{fg highlight}EndIf@{fg text}

      ...
@EndNode
