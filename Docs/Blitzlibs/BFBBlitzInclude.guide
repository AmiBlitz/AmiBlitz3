@database SDSBFBPlayerConversion
@$VER: SDSBFBPLAYERCONVERSIONLIB V1.1 (27.01.2007)- Updated by mrodfr.
@node main "SDSBFBInclude autodoc"

	SDSBFB Include AutoDocs.
	------------------------

        Before we start, I advise you visit AmiNet and grab the BFBPlayer
        archive. Then read it through and come back. It contains a lot of stuff 
        I`m not going to go into here ;)

	@{" About BFB             " link A0 }	What the hell is BFB?
	@{" Getting Started       " link A1 }	Setting up and usage.
	@{" Requirements          " link A2 }	What you require.
	@{" Example               " link A3 }	About the SDSBFBPlayer.
	@{" Notes                 " link A4 }	IMPORTANT!
	@{" Resident + Structures " link A5 }	The resident file contents.

	@{" BFBLoadModule{}       " link B1 }	Load a module from disk.
	@{" BFBParseError{}       " link B2 }	Convert an Error to string.
	@{" BFBNextPattern{}      " link B3 }	Pattern Jump forward.
	@{" BFBPrevPattern{}      " link B4 }	Pattern Jump backward.
	@{" BFBPlayModule{}       " link B5 }	Play loaded module.
	@{" BFBStopModule{}       " link B6 }	Stop a playing module.
	@{" BFBFreeModule{}       " link B7 }	Free a loaded module.
	@{" BFBContModule{}       " link B8 }	Continue a stopped module.
	@{" BFBMaxSongs{}         " link B9 }	The songs in loaded module.
	@{" BFBCurrentSong{}      " link B10 }	The current song.
	@{" BFBChangeSong{}       " link B11 }	Change to a different song.
	@{" BFBModuleType{}       " link B12 }	The type of module loaded.
	@{" BFBModuleName{}       " link B13 }	The module`s name.
	@{" BFBMaxPositions{}     " link B14 }	Maximum track positions.
	@{" BFBCurrentPosition{}  " link B15 }	The current track position.
	@{" BFBModLoaded{}        " link B16 }	Is a mod loaded?
	@{" BFBModPlaying{}       " link B17 }	Is a mod playing?
	@{" BFBPlayPercentage{}   " link B18 }	% of the mod played.
	@{" BFBInitSamples{}      " link B19 }	Initialize the sample list.
	@{" BFBMaxSamples{}       " link B20 }	Maximum samples.
	@{" BFBGetSampleName{}    " link B21 }	Get a samples name$.
	@{" BFBModuleLength{}     " link B22 }	The length of the loaded mod.

	@{" Authors               " link C1 }	Us.

	Blitz conversion of the BFB C code is (C) Robert Hutchinson
        and David McMinn. loki\@napalmdeath.freeserve.co.uk,
                          dmcminn\@house-of-mojo.freeserve.co.uk

        Docs written and (C) by Robert Hutchinson 1999
 
	BFBPlayMaster.library:
	(C) 1996 Jarkko Vatjus-Anttila (a BFB Team production)

@endnode

@node A0 "About BFB.."

Well, you might be thinking, `What is BFB? And what can it do for me?'
Well if you are, BFB is a collection of 13 Amiga shared libraries.
Which were witten in 1996 by Jarkko Vatjus-Anttila. And to my knowledge
they were never updated from version 1.00 (is that true?). Which
is a damn shame, cos the BFB archive is GREAT, and it deserves a good
update! Anyway, the bfbplaymaster.library handles the 12 sub-libraries
which should always be present in LIBS:Replayers/  and the master
library in LIBS:  if they are not present it is very likely you will
get errors or a nice flashy guru ;)

BFBPlayMaster.library v1.00: Supports,

 1,  ProTracker Modules
 2,  MED / OctaMED
 3,  QuadraComposer
 4,  The Player 6.0a
 5,  The Player 6.1a
 6,  David Whittaker
 7,  GMOD
 8,  DigiBooster (not PRO!)
 9,  PSID
 10, THX Sound System
 11, Oktalyzer
 12, BMOD

And all these supported through 1 command in blitz: BFBLoadModule{},
you dont even have to do any of the module type checking for yourself!
(Isnt Mr Vatjus-Anttila nice ;) )

I haven`t got to the best bit yet ;).... 
BFB is FREEEEEEE!, yes, you could write a multi-format mosule player
in 10 seconds flat and release it now! You are allowed to use BFB
and it`s replayer libraries in your own NONCOMMERCIAL programs for
FREE!. Commercial use of the BFB libraries requires written permission
from the BFB author:

  Jarkko Vatjus-Anttila
  Linnukkatie 2
  90450 Kempele
  Finland

  URL:
  http://www.kempele.fi/~quaid/

  EMail:
  quaid\@kempele.fi

But I`m not sure of the vailidity of these addresses as it was 1996.

In short:
  BFB is `NICE!' ;)

@endnode

@node A1 "Getting started"

Well firstly you need to copy the contents of the libs/ dir to your
LIBS: directory. Then you need to copy the bfbplaymaster.library1
to your BlitzLibs:AmigaLibs/ directory. After that copy the SDSBFB.RES
file to BlitzLibs: and re-crete your deflibs. (I use DefLibMan for
this duty ;))

If you have a problem with the library number that is used I suggest
you get NewFDConvert from aminet (dev/basic) and convert the 
updated FD file (provided). NewFDConvert was the only FD converter
we could find that worked 100% with the bfbplaymaster.library

Now you should be ready to load in the example (SDSBFBPlayer).
So fire up Blitz and attempt to load the file: SDSBFBPlayerGUI.BB2
(the ascii version is included incase the tokens are screwed!)
You will also need BSS (Blitz Support Suite) for a lot of functions
in this example!!
If you are using the ascii version you require amigalibs.res and
SDSBFB.RES resident in the compiler menu.

When writing your own BFBPlayer programs, just remember that all you
require in your code is:

XINCLUDE "SDSBFBPlayer/BlitzConversion/Includes/BFB_Include.BB2"  ;Our include!

At the top of your code, and amigalibs.res + SDSBFB.RES resident
in the compiler menu...
Then you should have access to the 22 commands in the include,
(see the command index)

@endnode

@node A2 "Requirements.."

The player libraries require:

   medplayer.library  --> for playing meds
   playsid.library    --> for playing SID modules
   xpkmaster.library  --> for xpk decruncing modules (but thats
                          your domain not BFB`s ;) )

The only needed hardware is 020+ for THX sound system library. You
are not able to play the THX tunes without one.

Thats it really ;)
(see the BFBPlayer archive autodocs for more info!)

@endnode

@node A3 "Example"

SDSBFBPlayer.
=============

Was bodged together in 8 hours flat, just as an example to send
out with the package, but should work fine (except for the
font problem (which I cant be arsed to fix ;) If anyone wants to
do an update I dont mind, but I have already put enough time
into the conversion of this awesome library set for now.).

The example has ASCII and BB2 version included.
And should serve as a nice example of how to use the include
to your advantage!

Program (C) Loki^SD (thats me ;))

@endnode

@node A4 "Notes"

Some enforcer hits were occuring with my example according to 
Simon Hitchen (ta m8 ;)). But I dont have an MMU to test this out
with so I cant debug it. If anyone wants to screen out the no 
doubt thousands of bugs, please do. And send me the update ;)

Also, BFBNextPattern{} and BFBPrevPattern{} were causeing overflow
error. Which is a pain, but not too much of a problem. Just switch
overflow checking off in the debugger ;)

I left the authors info commands out, also the allocate channels
commands were dropped too. As they caused so many crashes, I just
couldn`t be arsed. Besides, the routines call them anyway!

Bodge? I think so ;)

@endnode

@node A5 "Res + Struct"

if you are going to do things manually without the help of the 
include. You will have access to the following:

  .BFBPlayBase    <-- Librarybase
  .SampleNames    <-- SampleName base
  .ModInfo        <-- The module structure

You also have the following Constants:

NodTypes:

  #MODTYPE_NOMODULE       
  #MODTYPE_THEPLAYER61A   
  #MODTYPE_THEPLAYER60A   
  #MODTYPE_PROTRACKER     
  #MODTYPE_MED            
  #MODTYPE_QUADRACOMPOSER 
  #MODTYPE_DIGIBOOSTER    
  #MODTYPE_GMOD           
  #MODTYPE_WHITTAKER      
  #MODTYPE_PSID           
  #MODTYPE_OKTALYZER      
  #MODTYPE_THX            
  #MODTYPE_HIPPELCOSO     
  #MODTYPE_BMOD           
  #MODTYPE_TRACKERPACKER3 
  #MODTYPE_SOUNDTRACKER4  
  #MODTYPE_PRORUNNER2     
  #MODTYPE_STARTREKKER    
  #MODTYPE_NOISEPACKER3   
  #MODTYPE_XPKPACKED      

ERROR CODES THAT MAY BE RETURNED:

  #BFBERR_NOERROR    
  #BFBERR_NOMODULE   
  #BFBERR_NOSUBLIB   
  #BFBERR_NOXPKERR   
  #BFBERR_NOMEDLIB   
  #BFBERR_NOPSIDLIB  
  #BFBERR_NOFILE     
  #BFBERR_FILEERROR  
  #BFBERR_NOMEMORY   
  #BFBERR_NOEMULRES  
  #BFBERR_P60AINITERR
  #BFBERR_P61AINITERR
  #BFBERR_NOAUDIO    
  #BFBERR_NOCIA      
  #BFBERR_020ERR     
  #BFBERR_THXERR     
  #BFBERR_LOWKICK    
  #BFBERR_TAGERR     
  #BFBERR_LIBINUSE   
  #BFBERR_BMODERR     

TagItems:

  #BFBTAG_SongName   
  #BFBTAG_SongFH     
  #BFBTAG_SongBuf     
  #BFBTAG_SampleName  
  #BFBTAG_SampleFH    
  #BFBTAG_SampleBuf   
  #BFBTAG_ModInfo     
  #BFBTAG_SongBufLen  
  #BFBTAG_SampleBufLen
  #BFBTAG_ModType     


These are explained a lot better in the BFB AutoDocs!

@endnode

@node B1 "BFBLoadModule{}"

FUNCTION: BFBLoadModule{Path$}
    INFO: Loads one of the supported module formats into memory
          ready for use. 
   INPUT: Path$, a string containg the path of the file on disk!
 RETURNS: An error code to be converted with BFBParseError{}
          If no error occured, it will with 0
   RTYPE: BYTE .b
 EXAMPLE: succ.b=BFBLoadModule{"Work:Music/Mods/MOD.Cool"}

@endnode

@node B2 "BFBParseError{}"

FUNCTION: BFBParseError{ErrCode}
    INFO: Converts an error code into a string ready to pass back
          to the user.
   INPUT: ErrCode, a code returned by either BFBLoadModule{} or,
          BFBPlayModule{} or:
 RETURNS: A string with a description of the error.
   RTYPE: STR$ .s
 EXAMPLE: error$=BFBParseError{succ}
          NPrint error$

@endnode

@node B3 "BFBNextPattern{}"

FUNCTION: BFBNextPattern{}
    INFO: Jumps to the next pattern in the currently playing module,
          if there is no module loaded, this command has no effect.
          But feel free to call it if you like.
 RETURNS: 0 for success, -1 for failure. If you get -1, it is most
          likely that the current module does not support pattern
          jumping!
   RTYPE: BYTE .b
 EXAMPLE: failsafe.b=BFBNextPattern{}

@endnode

@node B4 "BFBPrevPattern{}"

FUNCTION: BFBPrevPattern{}
    INFO: Jumps to the previous pattern in the currently playing module,
          if there is no module loaded, this command has no effect.
          But feel free to call it if you like.
 RETURNS: 0 for success, -1 for failure. If you get -1, it is most
          likely that the current module does not support pattern
          jumping!
   RTYPE: BYTE .b
 EXAMPLE: failsafe.b=BFBPrevPattern{}

@endnode

@node B5 "BFBPlayModule{}"

FUNCTION: BFBPlayModule{}
    INFO: Plays the currently loaded module, loaded with BFBLoadModule{}
          . If there is no currently loaded module, then this command
          will have no effect!
 RETURNS: And errorcode that can be parsed with BFBParseError{}
   RTYPE: BYTE .b
 EXAMPLE: succ.b=BFBPlayModule{}

@endnode

@node B6 "BFBStopModule{}"

FUNCTION: BFBStopModule{}
    INFO: Stops the currently playing module. If there is no currently
          loaded module, of there is not one playing, this command take
          no effect.
 RETURNS: This is a statement, thus nothing is returned!
 EXAMPLE: BFBStopModule{}

@endnode

@node B7 "BFBFreeModule{}"

FUNCTION: BFBFreeModule{}
    INFO: Frees a currently loaded module. If there is no module loaded
          this command has no effect. It also stops playing modules first!
 RETURNS: This is a statement, thus nothing is returned!
 EXAMPLE: BFBFreeModule{}

@endnode

@node B8 "BFBContModule{}"

FUNCTION: BFBContModule{}
    INFO: Continues a stopped module. If there is no loaded module,
          or the module has not been stopped then this command has no
          effect!
 RETURNS: TRUE for success and FALSE for failure!
   RTYPE: BYTE .b
 EXAMPLE: If BFBContModule{}=False

@endnode

@node B9 "BFBMaxSongs{}"

FUNCTION: BFBMaxSongs{}
    INFO: Returns the number of songs in the currently loaded module.
          This is for modules that contain more than 1 song!
 RETURNS: A value of the songs contained in the module.
   RTYPE: BYTE .b
 EXAMPLE: Songs.b=BFBMaxSongs{}

@endnode

@node B10 "BFBCurrentSong{}"

FUNCTION: BFBCurrentSong{}
    INFO: Returns the currently playing song number!
 RETURNS: A value of the current song.
   RTYPE: WORD .w (why?, who knows ;) Change to a byte if you like ;))
 EXAMPLE: CurSong.w=BFBCurrentSong{}

@endnode

@node B11 "BFBChangeSong{}"

DOH!:
=====

I think this command is screwed up! The FD was a bit crap to say
the least, and BFBChangeModule_ was being a pain in the ass tokenising.
So I just left this command out (well its still in there, it just
probably wont work ;))

It is supposed to change to `SongNum' within the current module,
but I doubt it will work! If you REALLY need it, I dont think I 
would take toooo much to contact the author and ask him why it has
2 argments in the docs, yet in reality, it only has 1 ;) Where has
the SongNum aregument disappeared too ? ;)

@endnode

@node B12 "BFBModuleType{}"

FUNCTION: BFBModuleType{}
    INFO: Returns the type of module currently loaded.
 RETURNS: A string containing the module format.
          If you require just a type check I advise you look at:
          *modinfo\mi_moduletype and compare it with the constants.
   RTYPE: STR$ .s
 EXAMPLE: OurType$=BFBModuleType{}

@endnode

@node B13 "BFBModuleName{}"

FUNCTION: BFBModuleName{}
    INFO: Returns the currently loaded module`s name.
 RETURNS: A string containing the modules name, if the module has no
          name set. The this command returns the modules disk name, IE:
          if you loaded: Work:Fadge/Cool.MOD and Cool.MOD has no name,
          then it would return Cool.MOD.
   RTYPE: STR$ .s
 EXAMPLE: OurName$=BFBModuleName{}

@endnode

@node B14 "BFBMaxPositions{}"

FUNCTION: BFBMaxPositions{}
    INFO: Ruturns the ammount of track positions in the currently loaded
          module.
 RETURNS: A value of the maximum track positions.
   RTYPE: WORD .w
 EXAMPLE: MTracks.w=BFBMaxPositions{}

@endnode

@node B15 "BFBCurrentPosition{}"

FUNCTION: BFBCurrentPosition{}
    INFO: Returns the current track position.
 RETURNS: A value to the current track postion, IE:
          BFBCurrentPosition{}/BFBMaxPositions{}
   RTYPE: WORD .w
 EXAMPLE: CTrack.w=BFBCurrentPosition{}

@endnode

@node B16 "BFBModLoaded{}"

FUNCTION: BFBModLoaded{}
    INFO: Tells you if a module is currently loaded or not.
 RETURNS: True or False
   RTYPE: BYTE .b
 EXAMPLE: If BFBModLoaded{}=False

@endnode

@node B17 "BFBModPlaying{}"

FUNCTION: BFBModPlaying{}
    INFO: Tells you if a module is currently playing or not.
 RETURNS: True or False
   RTYPE: BYTE .b
 EXAMPLE: If BFBModPlaying{}=False

@endnode

@node B18 "BFBPlayPercentage{}"

FUNCTION: BFBPlayPercentage{}
    INFO: Tells you the percentage of the song played when called.
 RETURNS: A value from 1-100 as a percentage gathered from the
          track positions.
   RTYPE: WORD .w (again, why? who knows ;))
 EXAMPLE: per.w=BFBPlayPercentage{}

@endnode

@node B19 "BFBInitSamples{}"

FUNCTION: BFBInitSamples{}
    INFO: This should be called before BFBMaxSamples{} or
          BFBGetSamples{}. But may be called as many times as you like!
 RETURNS: Nothing, it is a statement!
 EXAMPLE: BFBInitSamples{}

@endnode

@node B20 "BFBMaxSamples{}"

FUNCTION: BFBMaxSamples{}
    INFO: Returns the maximum samples in the module, if 1 or 0 is returned
          your program should take it that there are no sample names
          availible! BDBInitSamples{} must be run FIRST!
 RETURNS: A value of the Maximum samples in the current module ready
          for use with BFBGetSampleName{}
   RTYPE: LONG .l
 EXAMPLE: MaxSBFBMaxSamples{}

@endnode

@node B21 "BFBGetSampleName{}"

FUNCTION: BFBGetSampleName{SampleNum}
    INFO: Gets 1 string containing the name of the sample.
          BDBInitSamples{} must be run FIRST!
  INPUTS: SampleNum, the number of the sample to get, this number
          should always be between 0 and BFBMaxSamples{}
 RETURNS: A sample name in a string.
   RTYPE: STR$ .s
 EXAMPLE: SamName1$=BFBGetSampleName{1}

@endnode

@node B22 "BFBModuleLength{}"

FUNCTION: BFBModuleLength{}
    INFO: Returns the module length in memory.
 RETURNS: A value which should be the same as the modules physical
          disk size!
   RTYPE: LONG .l
 EXAMPLE: ourlength.l=BFBModuleLength{}

@endnode

@node C1 "Authors"

That would be:

  Robert Hutchinson - loki\@napalmdeath.freeserve.co.uk
       and
  David McMinn      - dmcminn\@house-of-mojo.freeserve.co.uk

Dont hessitate to contact us in any of the following circumstances:

  You need help with BFB.
  You have updated BFB-Blitz.
  You know of other BFBStuff.
    Or
  You are a nice looking female and,... ahem ;)
  You want to give us a million quid for out efforts or otherwise.
  You are giving away old miggy stuff.

@endnode
