@DATABASE RIFXLibV2.6
@Author Conversion program
@$VER: RIFXLIB V2.60 (27.01.2007)- Updated by mrodfr.
@NODE OVERVIEW "Overview of RI FX Lib V2.6"

                                  @{b}@{u}Overview@{ub}@{uu}

NOTE: The library has had a lot of the commands inside it expanded so that
they work on any size bitmap. At the moment the following, though, will only
work on lorez bitmaps:

    		 ZoomX8, Derez and ZoomXY

None of the commands in this library use the blitter chip. Also note that
the maximum bitmap depth for these functions is 8.

@ENDNODE OVERVIEW

@NODE FadeInBitmap "RI FX Lib V2.5"

@{fg shine}Statement: FadeInBitmap@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: FadeInBitmap source#,dest#,delay[,offset1,offset2,height]

  This is used to make an any width, any height, bitmap appear on another one
in a nice way. Source# and dest# should be bitmap object numbers and delay is
the 'slow-down' value for the fade. This is necessary because this routine
works very fast - at full speed it looks just like a slow screen copy. You
should note that the delay is taken as being a word, thus don't pass 0 or
you'll actually get a delay of 65535. This routine will adjust itself to take
into account the depth of the bitmap,

WARNING: the depth of the destination bitmap should be AT LEAST as big as the
         depth of the source# bitmap because the depth of the fade is taken
         from the source# bitmap.

The optional parameters in this command allow you to set respectively, the
source bitmap y offset, the destination bitmap y offset and the height of the
fade (in pixels). If these parameters are left out then the fade
automatically occurs across the full size of the bitmap.
  
See: ClearBitmap

@ENDNODE FadeInBitmap

@NODE ClearBitmap "RI FX Lib V2.5"

@{fg shine}Statement: ClearBitmap@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: ClearBitmap source#,delay[,offset,height]

  This is used to clear an any width, any height, bitmap in a very pleasant
way. The parameters are the same as for FadeInBitmap except that only one
bitmap is needed. The delay parameter is used for the same reason as in
FadeInBitmap - to slow down the effect. The optional parameters allow you to
set a y start value for the clear and the height (in pixels) of the clear.

See: FadeInBitmap

@ENDNODE ClearBitmap

@NODE ZoomX2 "RI FX Lib V2.5"

@{fg shine}Statement: ZoomX2@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: ZoomX2 source#,dest#,add_source,add_dest,width,height

  This command does a very fast X2 zoom. It works with two bitmaps - one
source and one destination (NOTE: these can be the same bitmap but you should
be careful that the zoom is not done over the source data). The two
parameters add_source and add_dest allow you to specify the position of the
start of the zoom, they are specified as byte offsets from the top left
corner of the bitmaps (byte 0). These values can be calculated by the
following method:

    add_source=(Y x BITMAP_WIDTH (in bytes) + (X / 8)

or by using the built in command ADDValue. Width and height are both
specified in pixels.

NOTE: There is no clipping on this command - be careful not to zoom off
      the edges of bitmaps.

You can zoom from a bitmap to a different size bitmap BUT the destination
bitmap must be as deep as the source and big enough to hold the zoomed data.

See: ZoomX4, ZoomX8 and ADDValue

@ENDNODE ZoomX2

@NODE ZoomX4 "RI FX Lib V2.5"

@{fg shine}Statement: ZoomX4@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: ZoomX4 source#,dest#,add_source,add_dest,width,height

  This is exactly the same as ZoomX2 except that a times 4 zoom is done by
this command.

NOTE: You can zoom from a bitmap to a different size bitmap BUT the
      destination bitmap must be as deep as the source and big enough
      to hold the zoomed data.

See: ZoomX2, ADDValue

@ENDNODE ZoomX4

@NODE ZoomX8 "RI FX Lib V2.5"

@{fg shine}Statement: ZoomX8@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: ZoomX8 source#,dest#,add_source,add_dest,width,height

  This is exactly the same as ZoomX2 except that a times 8 zoom is done by
this command.

See: ZoomX2, ADDValue

@ENDNODE ZoomX8

@NODE ADDValue "RI FX Lib V2.5"

@{fg shine}Function: ADDValue@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: addval.w=ADDValue(bitmap#,x,y)

  This function can be used the calculate the add_source and add_dest values
used in all the zoom commands. Just give the bitmap number, x co-ordinate
and the y co-ordinate and you'll get an answer back that can be used
straight in the ZoomXn commands.

See: ZoomX2, ZoomX4, ZoomX8 and ZoomXY

@ENDNODE ADDValue

@NODE InitZoomXY "RI FX Lib V2.5"

@{fg shine}Statement: InitZoomXY@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: InitZoomXY source#,dest#,add_source,add_dest

  This command initialises the ZoomXY routine to the bitmaps you want it to
work on. You MUST use this routine before calling ZoomXY. The parameters are
the same as the first four parameter for the ZoomXn commands - source and
destination bitmaps and add_source/destination values.

See: ZoomXY

@ENDNODE InitZoomXY

@NODE ZoomXY "RI FX Lib V2.5"

@{fg shine}Statement: ZoomXY@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: ZoomXY xzoom_value,yzoom_value,height

  This command does a zoom based on the values you give it. You should note,
though, that zoom values should be integer values (no fractional part). The
height is the height in pixels that the source data should be zoomed to. 
Please note that this command is different to the other zoom commands in that
the output of it is clipped to fit inside 320 pixels.

NOTE: This command should only be used after InitZoomXY has been called.

This routine has an extra feature in that if you give both zoom values as 1
then a bitmap copy is done from the source to the dest using the offsets
given and the height.

See: InitZoomXY

@ENDNODE ZoomXY

@NODE Derez "RI FX Lib V2.5"

@{fg shine}Statement: Derez@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: Derez source#,dest#,add_source,add_dest,derez_value,height

  This command is used to derez a low resolution bitmap onto another one.
The bitmaps are source# and dest#, add_source and add_dest are used to
control the start position of the derez (see ZoomX2 and ADDValue to see how
these are calculated). The derez value is obviously the amount that each
pixel will be derezed to in both the x and y directions, the height is the
height of the derez - the derez is clipped to fit inside this in the y
direction and inside 320 pixels in the x direction.

This routine has an extra feature in that if you give derez_value as 1 then
a bitmap copy is done from the source to the dest using the offsets given
and the height.

@ENDNODE Derez

@NODE ReduceX2 "RI FX Lib V2.5"

@{fg shine}Statement: ReduceX2@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: ReduceX2 source#,dest#,add_source,add_dest,width,height

  This command halves the given rectangle of one bitmap and pastes it onto
the destination bitmap. Width should be a multiple of 16, width and height
should describe a rectangular area that will be reduced (these values
should be in pixels).

See: ZoomX2 and other commands for more information about the syntax of
     this command.

@ENDNODE ReduceX2

@NODE MAIN "RI FX Lib V2.5"
.---------------------------------------------------------------------------.
|                               @{b}RI FX Lib V2.5@{ub}                              |
`---------------------------------------------------------------------------'

                         ©1996 Red When Excited Ltd

        Undocumented commands added by Toby Zuijdveld 02/03/1999
                       mailto: hotcakes\@abacus.net.au

                             @{"     Overview     " link OVERVIEW}

                               Command Index                                

                               @{" ADDValue     " link ADDValue}
                               @{" ClearBitmap  " link ClearBitmap}
                               @{" Derez        " link Derez}
                               @{" FadeInBitmap " link FadeInBitmap}
                               @{" InitZoomXY   " link InitZoomXY}
                               @{" ReduceX2     " link ReduceX2}
                               @{" ZoomX2       " link ZoomX2}
                               @{" ZoomX4       " link ZoomX4}
                               @{" ZoomX8       " link ZoomX8}
                               @{" ZoomXY       " link ZoomXY}

                                ZoomYZoom    bitmap#

                                @{" Examples " LINK Examples}


@ENDNODE MAIN

@NODE Examples "Example Programs"

                             @{b}@{u}Example Programs@{ub}@{uu}

@{fg shine}EXAMPLE 1@{fg text} -  An Example of Using The Zoom Commands :

           @{" Load Example 1 " system "run >NIL: BLITZ3:Amiblitz3 Blitz3:Docs/UserLibs/Examples/RIFXLib1.bb"}

@ENDNODE Examples
