@DATABASE FILEIOLIB
@Author Blackbird
@$VER: FILEIOLIB-GER V1.1 (27.01.2007)- Updated by mrodfr.
@NODE OVERVIEW "Überblick zu FILEIOLIB"

                                  @{b}@{u}Überblick@{ub}@{uu}


                          Eine Acid Software Library

                         Konvertiert nach AmigaGuide von

                            Red When Excited Ltd

                 Verwendet mit der Erlaubnis von Acid Software

          Bearbeitet und fehlerbereinigt von Toby Zuijdveld 27/02/1999.
                       mailto:hotcakes\@abacus.net.au

     Deutsche Übersetzung von Margit Möring, Marco Möring und Franz Schlick.
          Bestandteil der deutschsprachigen Amiblitz Supportpage Amiforce.
                            @{b}@{u}http://www.amiforce.de@{ub}@{uu} 
@ENDNODE OVERVIEW

@NODE OpenFile "FILEIOLIB"

@{fg shine}Function: OpenFile@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : OpenFile (File#,Filename$)

OpenFile öffnet eine Datei die mit Filename$ angegeben wurde. Wenn die Datei 
erfolgreich geöffnet wurde, wird OpenFile true (-1) zurückgeben, andernfalls 
wird OpenFile false (0) zurückgeben.

Die Dateien die mit OpenFile aufgerufen werden, können gelesen und geschrieben 
werden. Wenn die spezifizierte Datei in Filename$ nicht exestiert bevor darauf 
zugegriffen wird, wird die Datei durch OpenFile erzeugt.

Dateien die mit OpenFile geöffnet wurden, sind für verschiedene andere Datei-
Kommandos verfügbar.

Sehen sie hierzu auch @{" ReadFile   " link ReadFile}  oder  @{" WriteFile   " link ReadFile}
für mehr Beispiele

 Beispiel zum Schreiben einer Datei:

 if OpenFile(0,"ram:test")
   Maxlen c$=32
   Fields 0,a,b,c$
   a=10:b=16:c$="Hello"
   Put 0,0
   CloseFile 0
 end if

 Beispiel zu Lesen einer Datei:

  if OpenFile(0,"ram:test")
   Maxlen c$=32
   Fields 0,a,b,c$
   Get 0,0
   Nprint "a=",a,"b=",b,"c$=",c$
   CloseFile 0
   MouseWait
 end if

@ENDNODE OpenFile

@NODE CloseFile "FILEIOLIB"

@{fg shine}Statement: CloseFile@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : CloseFile File#

CloseFile wird benutzt um eine Datei zu schließen die mit anderen Datei
Funktionen wie z.B. FileOpen, ReadFile, WriteFile geöffnet wurden. 
Diese sollte mit allen Dateien gemacht werden wenn sie nicht mehr gebraucht werden.

@ENDNODE CloseFile

@NODE KillFile "FILEIOLIB"

@{fg shine}Statement: KillFile@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : KillFile Filename$

Das KillFile Kommando wird die spezifizierte Datei die in Filename$ angeben wurde  löschen. 
Es wird kein Fehler ausgegeben wenn die Datei nicht gelöscht werden konnte.

@ENDNODE KillFile

@NODE Fields "FILEIOLIB"

@{fg shine}Statement: Fields@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Fields File#,Var1[,Var2...]

Fields wird benutzt um Felder mit verschiedenen Dateizugriffen zu setzen.
Wenn Fields aufgerufen wurde werden Get und Put für das Lesen und Schreiben
von Informationen in die Datei benutzt.

Die Var Parameter spezifizieren eine Liste von Variablen von denen in der Datei 
gelesen oder geschrieben werden sollen. 

Wenn ein Put Kommando ausgeführt wird, wird der Wert in den Variablen gehalten
und in die Datei geschrieben.

Wenn ein Get Kommando ausgeführt wurde, werden die Werte aus der Datei gelesen.

Jede Stringvariable in der Variablenliste muß ein bestimmtes maximum an Zeichen 
aufnehemn können.  Dies wird mit dem MaxLen Kommando erreicht. Diese Stringvariablen 
dürfen nie größer als die definierte Maximumlänge haben.

@ENDNODE Fields

@NODE Put "FILEIOLIB"

@{fg shine}Statement: Put@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Put File#,Record

Put wird benutzt, um die Werte aus der Variablenliste in die Datei zu schreiben.
Wenn Put genutzt wird um die Größe eines Eintrages in der Datei zu vergrößern,
müßen sie nur am Ende der Datei einen Eintrag hinzufügen. 
Ein Beispiel:
Wenn sie eine datei mit 5 Einträgen haben, ist es nicht erlaubt einen Eintrag mit der 
Nummer 7 zu erstellen wenn es keinen Eintrag mit der Nummer 6 gibt.

@ENDNODE Put

@NODE Get "FILEIOLIB"

@{fg shine}Statement: Get@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Get File#,Record

Get wird benutzt um Informationen aus einem Eintrag der VariablenListe einer Datei zu lesen.
Einträge werden mit dem Field Kommando erstellt. Nur Einträge die existieren sind gültig.

@ENDNODE Get

@NODE FileOutput "FILEIOLIB"

@{fg shine}Statement: FileOutput@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : FileOutput File#

Das FileOutput Kommando setzt den OutPut von allen Print und NPrint Kommandos 
auf die spezifizierte Datei. Wenn die Datei später geschlossen wird, sollten Print 
Ausgaben auf einen anderen OutPut Kanal gesendet werden. (z.B: DefaultOutput 
oder WindowOutput).

@ENDNODE FileOutput

@NODE FileInput "FILEIOLIB"

@{fg shine}Statement: FileInput@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : FileInput File#

Das FileInput Kommando veranlasst alle Edit, Edit$ und Inkey$ Kommandos dazu 
ihre Eingaben von der spezifizierten Datei zu empfangen. Wenn die Datei später 
geschlossen wird,sollten alle Eingaben zu einem anderen Kanal gesetzt werden
(z.B: DefaultInput oder WindowInput).

@ENDNODE FileInput

@NODE gap1 "FILEIOLIB"

@{fg shine}Statement: gap1@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : gap1 

@ENDNODE gap1

@NODE Lof "FILEIOLIB"

@{fg shine}Function: Lof@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Lof (File#)

Lof gibt die Länge in Bytes der angegebenen Datei zurück.

@ENDNODE Lof

@NODE FileSeek "FILEIOLIB"

@{fg shine}Statement: FileSeek@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : FileSeek File#,Position

FileSeek erlaubt es ihnen sich in der Datei zu einem bestimmten Punkt zu bewegen.
Die erste Position von Daten in der Datei ist Position 0, die zweite wäre Position 1
usw. Die Position muss nicht zu einem größeren Wert als die Länge der Datei gesetzt 
werden.

Im Zusammenhang mit OpenFile und Lof wird FileSeek benutzt um etwas an die Datei 
anzuhängen.

@ENDNODE FileSeek

@NODE Loc "FILEIOLIB"

@{fg shine}Function: Loc@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Loc (File#)

Loc wird benutzt wenn sie eine Datei öffnen um ihrer Position in der Datei
zu spezifizieren. Wenn eine Datei das erste mal geöffnet wird befinden sie sich
auf Position 0 in der Datei.

@ENDNODE Loc

@NODE Eof "FILEIOLIB"

@{fg shine}Function: Eof@{fg text}
--------------------------------------------------------------------------------
Modes  : Amiga
Syntax : Eof (File#)

Die Eof Funktion erlaubt ihnen zu veranlassen das ihre Position am Ende der 
Datei ist. Wenn es erfolgreich war, gibt Eof true (-1) zurück,  andernfalls 
gibt Eof false (0) zurück.

Wenn ihre Position am Ende einer Datei ist, wird jedes erneute schreiben die 
Länge der Datei vergrößern. Jedes  Lesen von der Datei  wird einen Fehler ergeben.

@ENDNODE Eof

@NODE DosBuffLen "FILEIOLIB"

@{fg shine}Statement: DosBuffLen@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DosBuffLen Bytes

Die Blitz2 Dateikontrolle wird erreicht durch spezielle Pufferroutinen. 
Dies wurde getan um das Tempo der Dateizugriffe zu vergrößern.

Jede geöffnete Datei  wird mit einem 2048 Byte Puffer angefordert.
Wenn der Speicher gering ist, wird die Puffergröße mit dem DosBuffLen 
Kommando verringert.

@ENDNODE DosBuffLen

@NODE gap2 "FILEIOLIB"

@{fg shine}Statement: gap2@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : gap2 

@ENDNODE gap2

@NODE File "FILEIOLIB"

@{fg shine}Statement: File@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : File 

@ENDNODE File

@NODE ReadFile "FILEIOLIB"

@{fg shine}Function: ReadFile@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ReadFile (File#,Filename$)

ReadFile öffnet eine existierende Datei die mit Filename$ spezifiziert wurde
zum sequenzionellenLesen. Wenn die Spezifizierte Datei erfolgreich geöffnet 
werden konnte wird ReadFile true (-1) zurückgeben, andernfalls wird ReadFile 
false(0) zurückgeben.

Eine Datei die mit ReadFile geöffnet wurde, wird das Kommando FileInput benutzt 
um aus dieser Datei Informationen zu lesen.

Beispiel:

IF ReadFile (0,"ram:test")
   FileInput 0                ;setzt den output zur Datei 0
   NPrint Edit$(80)           ;maximale länge zum lesen
   CloseFile 0
   Default Input              ; dieses nicht vergessen
End If

@ENDNODE ReadFile

@NODE WriteFile "FILEIOLIB"

@{fg shine}Function: WriteFile@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : WriteFile (File#,Filename$)

WriteFile erzeugt eine neue Datei die mit Filename$ spezifiziert wird für das 
sequenzielle Schreiben. Wenn die Datei erfolgreich angelegt wurde gibt 
WriteFile true (-1) zurück, andernfalls wird WriteFile false(0) zurückgeben.

Eine Datei die mit WriteFile angelegt wurde, wird  das Kommando FileOutput
benutzt um in diese Datei zu schreiben. 

IF WriteFile (0,"ram:test")
   FileOutput 0               ;setzt den output zur Datei 0
   NPrint "Hallo"             ;CloseFile 0
   Default Output             ;setzt zum standard zurück (nicht vergessen)
End If

@ENDNODE WriteFile

@NODE WriteMem "FILEIOLIB"

@{fg shine}Statement: WriteMem@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : WriteMem File#,Address,Length

WriteMem erlaubt ihnen eine gewisse Anzahl von Bytes (bestimmt durch Länge) 
von einer absoluten Speicheradresse (bestimmt durch Address) zu einer 
geöffneten Datei die spezifiziert wurde als File# zu speichern.

@ENDNODE WriteMem

@NODE ReadMem "FILEIOLIB"

@{fg shine}Statement: ReadMem@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ReadMem File#,Address,Length

WriteMem erlaubt ihnen eine gewisse Anzahl von Bytes (bestimmt durch Länge) 
in eine absoluten Speicheradresse (bestimmt durch Address) zu einer 
geöffneten Datei die spezifiziert wurde als File# zu lesen.

Seien sie vorsichtig mit der Benutzung von ReadMem wenn sie zu absoluten 
Speicher zugreifen kann das zu schlechte Konsequenzen führen. 

@ENDNODE ReadMem

@NODE Exists "FILEIOLIB"

@{fg shine}Function: Exists@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Exists (Filename$)

@ENDNODE Exists

@NODE ReadType "FILEIOLIB"

@{fg shine}Statement: ReadType@{fg text}
--------------------------------------------------------------------------------
Modes  :
Syntax : ReadType file#,type    WriteType file#,type

Speichert/Liest komplette Newtypes mit String auf Disk.
Beachten sie die korrekte Handhabung wenn ältere Dateien kleinere Newtypes verwenden.
Ungeladene Teile werden auf 0 gesetzt.

@ENDNODE Exists

@NODE MAIN "FILEIOLIB"

.-----------------------------------------------------------------------------.
|                                 @{b}FILEIOLIB@{ub}                                   |
`-----------------------------------------------------------------------------'

                             @{"     Überblick    " link OVERVIEW}

                               Kommando Index                                

                 @{" CloseFile  " link CloseFile}                @{" DosBuffLen " link DosBuffLen}
                 @{" Eof        " link Eof}                @{" Exists     " link Exists}
                 @{" Fields     " link Fields}                @{" File       " link File}
                 @{" FileInput  " link FileInput}                @{" FileOutput " link FileOutput}
                 @{" FileSeek   " link FileSeek}                @{" Get        " link Get}
                 @{" KillFile   " link KillFile}                @{" Loc        " link Loc}
                 @{" Lof        " link Lof}                @{" OpenFile   " link OpenFile}
                 @{" Put        " link Put}                @{" ReadFile   " link ReadFile}
                 @{" ReadMem    " link ReadMem}                @{" WriteFile  " link WriteFile}
                 @{" WriteMem   " link WriteMem}                @{" WriteType  " link ReadType}
                 @{" ReadType   " link ReadType}                

@ENDNODE MAIN
