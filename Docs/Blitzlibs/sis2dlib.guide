@DATABASE 2DLIB
@$VER: 2DLIB V1.1 (27.01.2007)- Updated by mrodfr.
@Author Conversion program
@NODE OVERVIEW "Overview of 2DLIB"

                                  @{b}@{u}Overview@{ub}@{uu}


                          An Acid Software Library

                         Converted to AmigaGuide by

                            Red When Excited Ltd

                 Used with the permission of Acid Software

          Edited, fixed and cleaned by Toby Zuijdveld 26/02/1999.
                       mailto:hotcakes\@abacus.net.au



@ENDNODE OVERVIEW

@NODE Circle "2DLIB"

@{fg shine}Statement: Circle@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Circle x,y,rx[,ry],color

Circle will draw an open circle onto the currently used bitmap. X and Y 
specify the mid point of the circle. The Radius parameter specifies the 
radius of the circle. If a Y Radius parameter is supplied, then an 
ellipse may be drawn.

A Colour parameter of -1 will cause an 'inverted' circle to be 
drawn.


@ENDNODE Circle

@NODE Circlef "2DLIB"

@{fg shine}Statement: Circlef@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Circlef x,y,rx[,ry],color

Circlef will draw a filled circle onto the currently used bitmap. X and 
Y specify the mid point of the circle - Colour, the colour in which to 
draw the circle. The Radius parameter specifies the radius of the 
circle. If a Y Radius parameter is supplied, then an ellipse may be 
drawn.

A Colour parameter of -1 will cause an 'inverted' circle to be 
drawn.


@ENDNODE Circlef

@NODE Box "2DLIB"

@{fg shine}Statement: Box@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Box x1,y1,x2,y2,color

The Box command draw a rectangular outline onto the currently used 
bitmap. X1, Y1, X2 and Y2 specify two corners of the box to be drawn. 
Colour refers to the colour to draw the box in.

A Colour parameter of -1 will cause an 'inverted' box to be 
drawn.


@ENDNODE Box

@NODE Boxf "2DLIB"

@{fg shine}Statement: Boxf@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Boxf x1,y1,x2,y2,color

Boxf draws a solid rectangular shape on the currently used bitmap. 
X1,Y1,X2 and Y2 refer to two corners of the box. Colour specifies the 
colour to draw the box in.

A Colour parameter of -1 will cause the rectangular area to be 
'inverted'.


@ENDNODE Boxf

@NODE Line "2DLIB"

@{fg shine}Statement: Line@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Line [x1,y1,]x2,y2,color

The Line command draws a line connecting two pixels onto the currently 
used bitmap. The X and Y parameters specify the pixels to be joined, 
and Colour specifies the colour to draw the line in.

If X1 and Y1 are omitted, the end points (X2,Y2) of the last line drawn 
will be used.

A Colour parameter of -1 will cause an 'inverted' line to be 
drawn.


@ENDNODE Line

@NODE FreeFill "2DLIB"

@{fg shine}Statement: FreeFill@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : FreeFill frees memory allocated for 2d fill routines

FreeFill will deallocate the memory that Blitz 2 uses to execute the 
commands Circlef, FloodFill, ReMap and Boxf.

Blitz 2 uses a single monochrome bitmap the size of the bitmap being 
drawn to to do it's filled routines, by using the FreeFill command this 
BitMap can be 'freed' up if no more filled commands are to be 
executed.


@ENDNODE FreeFill

@NODE AllocFill "2DLIB"

@{fg shine}Statement: AllocFill@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : AllocFill for internal use only (polylib.obj)



@ENDNODE AllocFill

@NODE ReMap "2DLIB"

@{fg shine}Statement: ReMap@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ReMap colour# to replace,destination colour# [,BitMap destintion

ReMap is used to change all the pixels on a BitMap in one colour to 
another colour. The optional BitMap parameter will copy all the pixels 
in Colour#0 to their new colour on the new bitmap.


@ENDNODE ReMap

@NODE FloodFill "2DLIB"

@{fg shine}Statement: FloodFill@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : FloodFill x,y,colour [,border colour]

FloodFill will 'colour in' a region of the screen starting at the 
coordinates X,Y.

The first mode will fill all the region that is currently the colour at 
the coordinates X,Y with the colour specified by Colour.

The second mode will fill a region starting at X,Y and surrounded by 
the BorderColour with Colour.


@ENDNODE FloodFill

@NODE Poly "2DLIB"

@{fg shine}Statement: Poly@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Poly numpts,*coords.w,color

Poly is a bitmap based commands such as Box and Line. It draws a 
polygon using coordinates from an array or newtype of words.


@ENDNODE Poly

@NODE Polyf "2DLIB"

@{fg shine}Statement: Polyf@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Polyf numpts,*coords.w,color[,color2]

Same as Poly except Polyf draws filled polygons and has an optional 
parameter color2, if used this colour will be used if the coordinates 
are listed in anti-clockwise order, useful for 3D type applications. If 
color2= -1 then the polygon is not drawn if the verticies are listed in 
anti-clockwise order.


@ENDNODE Polyf

@NODE BitPlanesBitMap "2DLIB"

@{fg shine}Statement: BitPlanesBitMap@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : BitPlanesBitMap srcbitmap,destbitmap,planepick

BitPlanesBitMap creates a `dummy' bitmap from the SrcBitMap with only 
the bitplanes specified by the PlanePick mask. This is useful for 
shadow effects etc. where blitting speed can be speed up because of the 
fewer bitplanes involved


@ENDNODE BitPlanesBitMap

@NODE ClipBlit "2DLIB"

@{fg shine}Statement: ClipBlit@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ClipBlit Shape#,X,Y

ClipBlit is the same as the Blit command except ClipBlit will clip the 
shape to the inside of the used bitmap, all blit commands in Blitz2 are 
due to be expanded with this feature. 


@ENDNODE ClipBlit

@NODE ClipBlitMode "2DLIB"

@{fg shine}Statement: ClipBlitMode@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ClipBlitMode BPLCON0

Same as BlitMode except applies to the ClipBlit command. Another 
oversight now fixed.


@ENDNODE ClipBlitMode

@NODE BitMapWindow "2DLIB"

@{fg shine}Statement: BitMapWindow@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : BitMapWindow srcbitmap,destbitmap,x,y,w,h

BitMapWindow creates a dummy bitmap inside another bitmap. Both x and w 
parameters are rounded to the nearest 16 pixel boundary. Any rendering, 
printing and blitting to the new bitmap will be clipped inside the area 
used.


@ENDNODE BitMapWindow

@NODE BitMapOrigin "2DLIB"

@{fg shine}Statement: BitMapOrigin@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : BitMapOrigin BitMap#,x,y

BitMapOrigin allows the programmer to relocate the origin (0,0) of the 
bitmap used by the drawing commands line, poly, box and circle.
@ENDNODE BitMapOrigin

@NODE MAIN "2DLIB"

.-----------------------------------------------------------------------------.
|                                   @{b}2DLIB@{ub}                                     |
`-----------------------------------------------------------------------------'

                             @{"     Overview     " link OVERVIEW}

                               Command Index                                

           @{" AllocFill        " link AllocFill}                @{" BitMapOrigin     " link BitMapOrigin}
           @{" BitMapWindow     " link BitMapWindow}                @{" BitPlanesBitMap  " link BitPlanesBitMap}
           @{" Box              " link Box}                @{" Boxf             " link Boxf}
           @{" Circle           " link Circle}                @{" Circlef          " link Circlef}
           @{" ClipBlit         " link ClipBlit}                @{" ClipBlitMode     " link ClipBlitMode}
           @{" FloodFill        " link FloodFill}                @{" FreeFill         " link FreeFill}
           @{" Line             " link Line}                @{" Poly             " link Poly}
           @{" Polyf            " link Polyf}                @{" ReMap            " link ReMap}
@ENDNODE MAIN

