; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = ""
; ExeFile         = ""
; CreateIcon      = 0
; Residents       = "amigalibs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 1
; AssemblerCheck  = 1
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 5
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 100
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
; A disk copier using RI TrackDiskLib

; Limitations
; -----------
;
; 1) Implement single-drive copying


; Inhibits a drive to prevent other tasks accessing it
Statement Inhibit{dev$,action$}
  taskport.l=GetDeviceProc_(dev$+":",0)
  If taskport=0 Then Statement Return
  taskport.l=Peek.l(taskport)
  Select UCase$(action$)
    Case "ON"
      v.l=-1
    Case "OFF"
      v.l=0
  End Select
  DoPkt_ taskport,31,v,0,0,0,0
End Statement


WbToScreen 0
ShowScreen 0

Use Screen 0

DefaultIDCMP #IDCMP_CLOSEWINDOW|#IDCMP_GADGETDOWN|#IDCMP_GADGETUP|#IDCMP_MOUSEMOVE

wflgs.l=#WFLG_CLOSEGADGET|#WFLG_DRAGBAR|#WFLG_DEPTHGADGET|#WFLG_ACTIVATE
wflgs.l+#WFLG_REPORTMOUSE

GTTags #GTMX_Spacing,3
GTMX 0,100,4,14,0,0,"",2,"DF0|DF1|DF2|DF3",0
GTTags #GTMX_Spacing,3
GTMX 0,200,290,14,0,0,"",1,"DF0|DF1|DF2|DF3",1

GTCheckBox 0,17,122,50,12,12,"_Verify",2

GTButton 0,11,122,66,64,12,"_Start!",0

a$="%ld"

GTTags #GTSL_LevelFormat,&a$,#GTSL_LevelPlace,2,#GTSL_MaxLevelLen,2
GTSlider 0,15,110,10,80,12,"From",1,0,79
GTTags #GTSL_LevelFormat,&a$,#GTSL_LevelPlace,2,#GTSL_MaxLevelLen,2,#GTSL_Level,79
GTSlider 0,16,110,24,80,12,"To",1,0,79

Window 0,0,0,320,96,wflgs,"REDCopy",-1,-1

AttachGTList 0,0

GTSetAttrs 0,16,#GTSL_Level,79
;Redraw 0,16

quitflag.w=0
verify.w=0
driveA.w=0
driveB.w=1
starttrack.w=0
endtrack.w=79

Repeat
  ev.l=WaitEvent
  gh.l=GadgetHit
  ec.l=EventCode
  Select ev
    Case #IDCMP_CLOSEWINDOW
      quitflag=1
    Case #IDCMP_GADGETUP
      Gosub procgads
    Case #IDCMP_GADGETDOWN
      Gosub procgads2
  End Select
Until quitflag
End

.procgads2:
  Select gh
    Case 100
      driveA=ec
    Case 200
      driveB=ec
  End Select
Return

.procgads:
  Select gh
    Case 11
      Gosub copydisk
    Case 17
      verify=ec<>0
    Case 16
      endtrack=ec
      If endtrack<=starttrack
        Exchange starttrack,endtrack
        GTSetAttrs 0,15,#GTSL_Level,starttrack
        GTSetAttrs 0,16,#GTSL_Level,endtrack
      EndIf
    Case 15
      starttrack=ec
      If endtrack<=starttrack
        Exchange starttrack,endtrack
        GTSetAttrs 0,15,#GTSL_Level,starttrack
        GTSetAttrs 0,16,#GTSL_Level,endtrack
      EndIf
  End Select
Return

.copydisk:
  If driveA=driveB    ; single drive
    EZRequest "Single drive copying is not|yet implemented."
  Else
    Gosub multidrive
  EndIf
Return

.multidrive:
  OpenDisk driveB
  OpenDisk driveA
  Inhibit{"DF"+Str$(driveA),"ON"}
  Inhibit{"DF"+Str$(driveB),"ON"}
  MotorOn driveA
  MotorOn driveB
  Reserve 0,512*44,65536
  Reserve 1,512*44,65536
  ad.l=Start(0)
  ad2.l=Start(1)
  For n.l=starttrack To endtrack
    WTitle "Track "+Str$(n)
    ReadSector driveA,n*22,Start(0),22
    WriteSector driveB,n*22,Start(0),22
    If verify
      ReadSector driveB,n*22,Start(0),2
      For v.l=0 To (512*22)-1 Step 4
        If Peek.l(ad+v)<>Peek.l(ad2+v)
          MotorOff driveA
          MotorOff driveB
          CloseDisk driveA
          CloseDisk driveB
          EraseAll
          EZRequest "Verify Error on Track "+Str$(v),"Oh No!"
          Inhibit{"DF"+Str$(driveB),"OFF"}
          Inhibit{"DF"+Str$(driveA),"OFF"}
          Pop For:Pop For:Return
        EndIf
      Next v
    EndIf
  Next n
  MotorOff driveA
  MotorOff driveB
  CloseDisk driveA
  CloseDisk driveB
  EraseAll
  EZRequest "Disk Copied Ok!","Good"
  Inhibit{"DF"+Str$(driveA),"OFF"}
  Inhibit{"DF"+Str$(driveB),"OFF"}
Return

