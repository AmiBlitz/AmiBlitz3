; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "c:"
; ExeFile         = "CDPlayer"
; CreateIcon      = 1
; Residents       = "amigalibs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 5
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
; A font sensitive CD Player

;=======================================================================
;=                            RED CD Player                            =
;=                                                                     =
;= A demonstration program for the RI Compact Disk Library.  This      =
;= program shows how to write a simple CD Player using the library.    =
;=                                                                     =
;= Changing the Device:                                                =
;=   To change the device used, from the default 'cd.device' change    =
;=   the string variable device$ to hold your device name, e.g.        =
;=   'SCSI.device' and change the variable unit to equal the unit      =
;=   number to open.                                                   =
;=                                                                     =
;= Extensions that could be made:                                      =
;=    1) Timing remaining for track as well as time passed             =
;=       (Change Statement DoPlayTime{}                                =
;=    2) Allow random playing of tracks                                =
;=    3) Change the button interface to one that uses graphics         =
;=       (Update the routine OpenGUI to make it use GTShape rather     =
;=       than GBButton.                                                =
;=    4) Add keyboard shortcuts for the gadgets                        =
;=======================================================================

DEFTYPE.w
DEFTYPE.l  totalsecs

;=======================================================================
;=                         Constant Declarations                       =
;=======================================================================

#WINFLAGS=#WFLG_CLOSEGADGET|#WFLG_ACTIVATE|#WFLG_DRAGBAR|#WFLG_DEPTHGADGET
#WINFLAGS=#WINFLAGS | #WFLG_RMBTRAP

;Gadget constants
#PLAYBUTTON   =100
#STOPBUTTON   =101
#EJECTBUTTON  =102
#ABOUTBUTTON  =103
#TRACKBUTTONS =200

;Max number of tracks we can handle
#MAXTRACKS    =20

;CDStatus bit definitions
#CDSTSB_CLOSED      = 0  ; Drive door is closed
#CDSTSB_DISK        = 1  ; A disk has been detected
#CDSTSB_SPIN        = 2  ; Disk is spinning (motor is on)
#CDSTSB_TOC         = 3  ; Table of contents read.  Disk is valid.
#CDSTSB_CDROM       = 4  ; Track 1 contains CD-ROM data
#CDSTSB_PLAYING     = 5  ; Audio is playing
#CDSTSB_PAUSED      = 6  ; Pause mode (pauses on play command)
#CDSTSB_SEARCH      = 7  ; Search mode (Fast Forward/Fast Reverse)
#CDSTSB_DIRECTION   = 8  ; Search direction (0 = Forward, 1 = Reverse)

;Statuses for our program
#SLEEP              =0   ; Program is currently waiting for user input
#TRACKPLAYING       =1   ; Program is currently playing a track
#NODISK             =2   ; Program is waiting for a disk to be inserted

;=======================================================================
;=                            Statements                               =
;=======================================================================

;Centre a line of text about a given x coordinate in a given window
Statement CentreText{win.w,x.w,y.w,t$}
  Use Window win
  strlen.w=TextLength_(RastPort(win),t$,Len(t$))
  WLocate x-(strlen/2),y
  Print t$
End Statement

;Enable track buttons depending on the current CD tracks available
Statement UpdateTracks{totaltracks}
  cds=CDStatus
  For track.w=0 To #MAXTRACKS-1
    If track<totaltracks
      GTEnable 0,#TRACKBUTTONS+track
    Else
      GTDisable 0,#TRACKBUTTONS+track
    EndIf

    Redraw 0,#TRACKBUTTONS+track
  Next track

End Statement

;Draw the number of the currently playing track.  The parameter
;is the number to draw (zero relative).
Statement DrawPlaying{track}
  SHARED fontheight,drawtrackx,drawtracky

  x=drawtrackx+WLeftOff
  y=drawtracky+WTopOff
  WBox x-29,y,x+29,y+fontheight-1,0
  If track<>-1
    CentreText{0,drawtrackx,drawtracky,Str$(track+1)}
  EndIf
End Statement

;Play a track number, 'track' is zero relative!
Statement PlayTrack{track.w}
  CDPlayTrack track+1,(CDNumTracks-track)
End Statement

;Draw the playing time of the current track if a CD is currently
;playing.  If a CD is not playing, then draw the total disk time.
Statement DoPlayTime{}
  SHARED status,fontheight,drawtrackx,drawtracky,totalsecs

  If status=#SLEEP
    m=totalsecs/60
    s=totalsecs MOD 60
  Else
    DrawPlaying{CDTrackPlaying-1}

    CDUpdateInfo

    m=CDTrackMins
    s=CDTrackSecs
  EndIf

  t$=Str$(m/10)+Str$(m MOD 10)+":"+Str$(s/10)+Str$(s MOD 10)

  x=drawtrackx+WLeftOff
  y=drawtracky+WTopOff+fontheight+2
  WBox x-29,y,x+29,y+fontheight-1,0
  CentreText{0,drawtrackx,drawtracky+fontheight+2,t$}
End Statement

;Change the status of the program.
Statement ChangeStatus {newstatus}
  SHARED status

  If status=newstatus Then Statement Return

  Select newstatus
    Case #TRACKPLAYING
      GTEnable 0,#STOPBUTTON
      Redraw 0,#STOPBUTTON
    Case #SLEEP
      If status=#NODISK
        GTEnable 0,#PLAYBUTTON
        Redraw 0,#PLAYBUTTON
        GTEnable 0,#STOPBUTTON
        Redraw 0,#STOPBUTTON
        GTEnable 0,#EJECTBUTTON
        Redraw 0,#EJECTBUTTON
      EndIf
      GTDisable 0,#STOPBUTTON
      Redraw 0,#STOPBUTTON
      DrawPlaying{-1}
    Case #NODISK
      GTDisable 0,#PLAYBUTTON
      Redraw 0,#PLAYBUTTON
      GTDisable 0,#EJECTBUTTON
      Redraw 0,#EJECTBUTTON
      GTDisable 0,#STOPBUTTON
      Redraw 0,#STOPBUTTON
      UpdateTracks{0}
      DrawPlaying{-1}
      totalsecs=0
      DoPlayTime{}
  End Select

  status=newstatus
End Statement

;=======================================================================
;=                           Initialisation                            =
;=======================================================================
NoCli
WBStartup

Reserve 0,256

prog$="RED CD Player"

device$="cd.device"
unit   =0

count=0

;***** Get the screen and font to use *****
WbToScreen 0
ShowScreen 0
*scr.Screen=Peek.l(Addr Screen(0))
*myfont.TextAttr=*scr\Font
fontheight=*myfont\ta_YSize
ad1.l=*myfont\ta_Name
fontname$=Peek$(ad1)

LoadFont 1,fontname$,fontheight,0

; ***** Open the device to use for the CD Player *****
If OpenCD(device$,unit)=0
  EZRequest "Could not open "+device$+" \, Unit "+Str$(unit)
  End
EndIf

; ***** Open the user interface and check for a CD *****
Gosub OpenGUI
Gosub CheckCD

;=======================================================================
;=                              Main Loop                              =
;=======================================================================
.Mainloop:
Repeat
  Delay_ 1
  count+1
  ev.l=Event

; ***** Check to user events *****
  Select ev
    Case #IDCMP_GADGETUP
      Gosub DoGadgetUp
  End Select

  cds=CDStatus

; ***** Check for removed disk (manual disk ejection *****
  If status<>#NODISK
    If (cds BitTst #CDSTSB_CLOSED)=0
      ChangeStatus{#NODISK}
    EndIf
  EndIf

; ***** Update display if track playing / Detect new CD *****
  If count=40
    count=0
    If status=#NODISK AND (cds BitTst CDSTSTB_TOC)
      Gosub CheckCD
    Else
      If status=#TRACKPLAYING
        DoPlayTime{}
      EndIf
    EndIf
  EndIf
Until ev=#IDCMP_CLOSEWINDOW

;***** Close down the program *****
CDStop
CloseCD
End

;=======================================================================
;=                               CheckCD                               =
;=                                                                     =
;= Check for the presence of a disk, if found then read in the info    =
;= from the disk and update the display.                               =
;=======================================================================
.CheckCD:
  cds=CDStatus
  If (cds BitTst #CDSTSB_TOC)
    Delay_ 50
    CDReadTOC
    UpdateTracks{CDNumTracks}
    ChangeStatus{#SLEEP}

    totalsecs=0
    For h=1 To CDNumTracks
      totalsecs+CDTrackLength(h)
    Next h
    DoPlayTime{}
  Else
    ChangeStatus{#NODISK}
  EndIf
Return

;=======================================================================
;=                              OpenGUI                                =
;=                                                                     =
;= Open the graphical user interface.                                  =
;=======================================================================
.OpenGUI:
  butwidth=TextLength_(*scr\_RastPort,"20",2)+14
  obutwidth=TextLength_(*scr\_RastPort,"About",5)+14

  xoffset=1
  yoffset=1

  gadpos=butwidth*5

  winheight=*scr\BarHeight+5+((#MAXTRACKS/5)*(fontheight+2))

  x=xoffset
  y=yoffset
  For h=1 To #MAXTRACKS
    GTButton 0,#TRACKBUTTONS+h-1,x,y,butwidth,fontheight+2,Str$(h),$40
    x+butwidth
    If (h MOD 5)=0
      x=xoffset
      y+fontheight+2
    EndIf
  Next h

  x=xoffset+(butwidth*5)+8
  y=yoffset
  GTButton 0,#PLAYBUTTON,x,y,obutwidth,fontheight+2,"Play",0
  y+fontheight+2
  GTButton 0,#STOPBUTTON,x,y,obutwidth,fontheight+2,"Stop",$40
  y+fontheight+2
  GTButton 0,#EJECTBUTTON,x,y,obutwidth,fontheight+2,"Eject",0
  y+fontheight+2
  GTButton 0,#ABOUTBUTTON,x,y,obutwidth,fontheight+2,"About",0

  Window 0,0,fontheight+3,x+64+obutwidth+16,winheight,#WINFLAGS,prog$,-1,-1
  AttachGTList 0,0

  x+obutwidth+8
  GTBevelBox 0,WLeftOff+x,WTopOff+1,64,InnerHeight-2,0

  drawtrackx=x+32
  drawtracky=2+fontheight
  CentreText{0,x+32,2,"Track"}
Return

;=======================================================================
;=                             DoGadgetUp                              =
;=                                                                     =
;= Handle the gadget events from the user.                             =
;=======================================================================
.DoGadgetUp:
  gad=GadgetHit
  If gad>=#TRACKBUTTONS
    PlayTrack{gad-#TRACKBUTTONS}
    ChangeStatus{#TRACKPLAYING}
    Return
  EndIf

  Select gad
    Case #PLAYBUTTON
      If status=#SLEEP OR status=#TRACKPLAYING
        PlayTrack{0}
        ChangeStatus{#TRACKPLAYING}
      EndIf

    Case #STOPBUTTON
      If status=#TRACKPLAYING
        CDStop
        ChangeStatus{#SLEEP}
        DoPlayTime{}
      EndIf

    Case #EJECTBUTTON
      If status=#TRACKPLAYING Then CDStop
      CDDoor On
      ChangeStatus{#NODISK}

    Case #ABOUTBUTTON
      EZRequest ProgName$,"A demo program for the RICompactDiskLib|Current Device='"+device$+"' Unit "+Str$(unit),"  Ok  "
  End Select
Return

