; XTRA
; Embedded .xtra Header
; 
; General Info
; -------------------------------------------------------
; ExePath         = "c:"
; ExeFile         = "CDPlayer"
; CreateIcon      = 1
; Residents       = "amigalibs.res"
; 
; Compiler
; -------------------------------------------------------
; StringBuffer    = 10240
; MakeSmallest    = 1
; FuncOptimize    = 1
; Version         = 0.0.0
; NumberOfBuilds  = 0
; 
; Debugger
; -------------------------------------------------------
; CliArgs         = ""
; StackSize       = 8191
; RuntimeDebug    = 1
; DebugInfo       = 0
; CreateDbgFile   = 0
; OverflowCheck   = 0
; AssemblerCheck  = 0
; InterruptCheck  = 1
; AutoRun         = 1
; 
; Editor
; -------------------------------------------------------
; CursorLine      = 1
; CursorColumn    = 1
; LabelSearch     = ""
; LabelRemark     = 0
; LabelAll        = 0
; LabelPosition   = 0
; 
; Blitz Objects
; -------------------------------------------------------
; Max IconInfo    = 1
; Max NChunky     = 50
; Max MUIObject   = 5
; Max PTModule    = 5
; Max AsyncReq    = 4
; Max Req-Lib     = 5
; Max GTMenuList  = 5
; Max Console     = 5
; Max TCPSock     = 5
; Max XBSound     = 10
; Max Chunky      = 20
; Max File        = 5
; Max GadgetList  = 5
; Max Queue       = 10
; Max Screen      = 5
; Max Shape       = 100
; Max CopList     = 10
; Max Sprite      = 20
; Max Stencil     = 5
; Max Module      = 5
; Max Window      = 5
; Max Anim        = 10
; Max Sound       = 10
; Max Bank        = 5
; Max Buffer      = 10
; Max BitMap      = 10
; Max Slice       = 10
; Max Page        = 4
; Max Tape        = 5
; Max IntuiFont   = 5
; Max MedModule   = 8
; Max Palette     = 4
; Max MenuList    = 5
; Max BlitzFont   = 4
; Max GTList      = 5
; /XTRA
; A font sensitive Encrypter for data files

;=======================================================================
;=                            RED Encrypter                            =
;=                                                                     =
;= Demonstration program for the RI STC Library and the RI STC         =
;= Decrunch Library.  Allows decompression of any STC crunched data    =
;= file (memory permitting).                                           =
;=======================================================================

DEFTYPE.w

;=======================================================================
;=                         Constant Declarations                       =
;=======================================================================

#WINFLAGS=#WFLG_CLOSEGADGET|#WFLG_ACTIVATE|#WFLG_DRAGBAR|#WFLG_DEPTHGADGET
#WINFLAGS=#WINFLAGS | #WFLG_RMBTRAP

#LOADBUTTON       =3
#SAVEBUTTON       =4
#ABOUTBUTTON      =5

#PACKLEN          =0
#UNPACKLEN        =1
#SAFELEN          =2


;Gadget text position values
#_LEFT        =1
#_RIGHT       =2
#_ABOVE       =4
#_BELOW       =8

#_DISABLE     =$40

;=======================================================================
;=                            Statements                               =
;=======================================================================

;Centre a line of text about a given x coordinate in a given window
Statement CentreText{win.w,x.w,y.w,t$}
  Use Window win
  strlen.w=TextLength_(RastPort(win),t$,Len(t$))
  WLocate x-(strlen/2),y
  Print t$
End Statement

Statement SetNoFile{}
  GTDisable 0,#SAVEBUTTON
  Redraw 0,#SAVEBUTTON
  Erase 0
  Erase 1

  GTSetInteger 0,#PACKLEN,0
  GTSetInteger 0,#UNPACKLEN,0
  GTSetInteger 0,#SAFELEN,0
End Statement

Statement SetFile{}
  GTEnable 0,#SAVEBUTTON
  Redraw 0,#SAVEBUTTON

  ad.l=Start(0)

  GTSetInteger 0,#PACKLEN,Length(0)
  GTSetInteger 0,#UNPACKLEN,STCLength(ad)
  GTSetInteger 0,#SAFELEN,STCSafeLen(ad)
End Statement

;=======================================================================
;=                           Initialisation                            =
;=======================================================================
NoCli
WBStartup

MaxLen pa$=192
MaxLen fi$=192

prog$="STCLoader"

;***** Get the screen and font to use *****
WbToScreen 0
ShowScreen 0
*scr.Screen=Peek.l(Addr Screen(0))
*myfont.TextAttr=*scr\Font
fontheight=*myfont\ta_YSize
ad1.l=*myfont\ta_Name
fontname$=Peek$(ad1)

LoadFont 1,fontname$,fontheight,0

Gosub OpenGUI

;=======================================================================
;=                              Main Loop                              =
;=======================================================================

Repeat
  ev.l=WaitEvent

; ***** Check to user events *****
  Select ev
    Case #IDCMP_GADGETUP
      Gosub DoGadgetUp
  End Select

Until ev=#IDCMP_CLOSEWINDOW

;***** Close down the program *****
End

;=======================================================================
;=                              OpenGUI                                =
;=                                                                     =
;= Open the graphical user interface.  This routine uses the OS call   =
;= TextLength_ to calculate the pixel width of a string, it then uses  =
;= these widths to size its gadgets horizontally.  This allows proper  =
;= sizes of gadgets even when using proportional fonts.                =
;=======================================================================
.OpenGUI:
  butwidth=TextLength_(*scr\_RastPort,"About",5)+14
  textwidth=TextLength_(*scr\_RastPort,"Unpacked length:",16)+14

  xoffset=1
  yoffset=1

  winheight=*scr\BarHeight+5+(3*(fontheight+4))

  x=xoffset
  y=yoffset

  gadx2=x+textwidth+butwidth
  gadx3=gadx2+72

  GTButton 0,#LOADBUTTON,x,y,butwidth,fontheight+4,"Load",0
  GTNumber 0,#PACKLEN+0,gadx2,y,64,fontheight+4,"Unpacked length:",#_LEFT,0

  y+fontheight+4
  GTButton 0,#SAVEBUTTON,x,y,butwidth,fontheight+4,"Save",#_DISABLE
  GTNumber 0,#UNPACKLEN,gadx2,y,64,fontheight+4,"Packed length:",#_LEFT,0

  y+fontheight+4
  GTButton 0,#ABOUTBUTTON,x,y,butwidth,fontheight+4,"About",0
  GTNumber 0,#SAFELEN,gadx2,y,64,fontheight+4,"Safe length:",#_LEFT,0

  x=gadx3+obutwidth+8
  Window 0,0,fontheight+3,x+butwidth+8,winheight,#WINFLAGS,prog$,-1,-1
  AttachGTList 0,0
  WindowFont 1

  GTBevelBox 0,WLeftOff+x,WTopOff+1,butwidth,InnerHeight-2,0

  y=(InnerHeight/2)-fontheight

  CentreText{0,x+butwidth/2,y,"RWE"}
  CentreText{0,x+butwidth/2,y+fontheight,"1996"}
Return

;=======================================================================
;=                             DoGadgetUp                              =
;=                                                                     =
;= Handle the gadget events from the user.                             =
;=======================================================================
.DoGadgetUp:
  gad=GadgetHit

  Select gad
    Case #LOADBUTTON
      fil$=ASLFileRequest$("Select load file:",pa$,fi$)
      If fil$<>""
        SetNoFile{}

        If BLoad(fil$,0)=0
          EZRequest prog$,"Could not load the requested file.","  Ok  "
        Else
          If STCLength(Start(0))=0
            EZRequest "Not a stone cracked file!"
            Erase 0
          Else
            If Reserve(1,STCLength(Start(0)))=0
              EZRequest "Could not allocate destination buffer!"
              Erase 0
            Else
              STCDecrunch Start(0),Start(1)
              SetFile{}
            EndIf
          EndIf
        EndIf
      EndIf

    Case #ABOUTBUTTON
      EZRequest prog$,"A demo program for RISTCLib and RISTCDecrunchLib","  Ok  "

    Case #SAVEBUTTON
      If Length(1)
        fil$=ASLFileRequest$("Select save filename:",pa$,fi$)
        If fil$<>""
          flag=1
          If Exists(fil$)
            EZRequest "Overwrite existing file?","Yes|No"
            If reply=0 Then flag=0
          EndIf

          If flag=1
            If BSave(fil$,1)
              EZRequest "Saved file okay."
            Else
              EZRequest "Could not save to the file"
            EndIf
          EndIf
        EndIf
      EndIf

  End Select
Return

