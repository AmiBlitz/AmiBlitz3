@DATABASE ElmoreLibs
@$VER: ELMORELIB V1.12 (31.05.2015)- Updated by tomsmart1.
@NODE "MAIN"
Author:
  Richard T Elmore, HeadSoft, 126 STATE ST. #20, SPEARFISH, SD 57783, USA


            @{b}@{u}Elmore  library@{uu}@{ub}

      @{" Index " link "Index"}                 @{" SPACE$ " link "SPACE$"}
      @{" Checksum " link "Checksum"}              @{" CharCount " link "CharCount"}
      @{" SearchEnd " link "SearchEnd"}             @{" SearchBegin " link "SearchBegin"}
      @{" Cipher$ " link "Cipher$"}               @{" Repeats " link "Repeats"}


      NOTE ON FUNCTIONS, STATEMENTS and COMMANDS:
      -------------------------------------------

      "FUNCTIONS" are Blitz2 tokens that require parameters in
      parentheses, and return a value:
      n=ABS(m)

      "STATEMENTS" are Blitz2 tokens that only perform an action
      but do not return a value.  Their arguments do not require
      parentheses:
      PRINT "HELLO!"

      "COMMANDS" are Blitz2 tokens that can be used as either a
      FUNCTION or a STATEMENT, depending upon whether the arguments
      were in parentheses or not.

      [Function form:]
      n=REQUEST("TITLE","SELECT YES OR NO","YES|NO")

      [Statement form:]
      REQUEST "TITLE","SELECT OK TO CONTINUE","OK"
@ENDNODE


@NODE "Index"
Function: INDEX
***************
     Syntax: n=Index List()
      Modes: Amiga or Blitz
Description:
Returns index from top of LIST
This function will return the current index number of the supplied
List() array passed to it.  For example, if the list pointer is currently
at item 10 in the list, Index would return 10.
@ENDNODE


@NODE "Checksum"
Function: CHECKSUM
******************
     Syntax: n=Checksum (String$)
      Modes: Amiga or Blitz
Description:
Given a string, Checksum() will return a unique 32-bit integer as
a checksum, useful in situations such as serial transfers, etc. to
ensure both parties have the same data.
@ENDNODE


@NODE "CharCount"
Function: CHARCOUNT
*******************
     Syntax: n=CharCount (String$,byte)
      Modes: Amiga or Blitz
Description:
This function will return the number of occurances of a given byte
within a string.  For example, CharCount(text$,32) will count the
number of spaces in text$.
@ENDNODE


@NODE "SearchBegin"
Function: SEARCHBEGIN
*********************
     Syntax: n=SearchBegin (String$,byte,# from Begin)
      Modes: Amiga or Blitz
Description:
Similar to Instr(), SearchBegin will search the given string
for the specified byte.  For example, SearchBegin(a$,32,1)
will return the character position of the first space in a$,
while SearchBegin(a$,32,3) will return the position of the
third space.  If the byte is not found in the string, SearchBegin
will return a zero.
@ENDNODE


@NODE "SearchEnd"
Function: SEARCHEND
*******************
     Syntax: n=SearchEnd (String$,byte,# from End)
      Modes: Amiga or Blitz
Description:
Like SearchBegin() (above) except it searches from the end of
the string to the front.  For example, SearchBegin(a$,asc("A"),2)
will return the character position of the second-from-last letter
"A" in the string 'a$.'
@ENDNODE


@NODE "Cipher$"
Function: CIPHER$
*****************
     Syntax: n=Cipher$ (String$)
      Modes: Amiga or Blitz
Description:
The Cipher$() function will encrypt or decrypt a string passed to it.
This is especially handy if you don't want users "zapping" your executeable
or data files to read it's contents.  Note that Cipher$() can only
decrypt strings previously created with Cipher$().
@ENDNODE


@NODE "Repeats"
Function: REPEATS
*****************
     Syntax: n=Repeats (String$)
      Modes: Amiga or Blitz
Description:
This function will return the number of repeated bytes at the
beginning of your string.  Thus, Repeats("...Test") would return 3,
while Repeats("Example") would return 1.  If the string is null,
Repeats() will return zero.
@ENDNODE


@NODE "Space$"
Function: SPACE$
****************
     Syntax: n$=SPACE$ (number of spaces)
      Modes: Amiga or Blitz
Description:
This function is identical to the Space$ function in many other dialects
of BASIC.  It will return a string containing the desired number of
spaces, making it easier to align tables etc. to the screen or printer.
@ENDNODE
