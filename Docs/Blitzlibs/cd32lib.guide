@DATABASE AcidCD32Lib
@$VER: ACIDCD32LIB V1.1 (27.01.2007)- Updated by mrodfr.
@NODE "MAIN"
    @{" ConfigCD32 " link "ConfigCD32"} [&TagList]
    @{" ControlCD32 " link "ControlCD32"}
    @{" ExamineCD32 " link "ExamineCD32"}
    @{" InitCD32 " link "InitCD32"}
    @{" PlayCD32 " link "PlayCD32"} track#[,numtracks]
    @{" ReadCD32 " link "ReadCD32"} (CD_Offset,Address,Length)
    @{" ReadCD32Mem " link "ReadCD32Mem"}  (AppName$,FileName$,Address,Length/10)
    @{" StopCD32 " link "StopCD32"}
    @{" TocCD32 " link "TocCD32"}
    @{" WriteCD32Mem " link "WriteCD32Mem"} (AppName$,FileName$,Address,Length/10)

Overview of CD32 library for Blitz2
-----------------------------------

The cd32lib provides a simple interface to controlling the
cd32's audio and nonvolatile memory features.

Only a subset of the commands will be required for developers
porting their games to CD32, the rest are only useful for
general AudioCD player type software.

Nonvolatile Memory
------------------

To store a games highscore table in CD32 memory the author
must first transfer the data to a sequential segment of
RAM and then use the WriteCD32Mem command which handles
data in multiples of 10 bytes.

See the test program below:

;
; test writing hiscore table to cd32 nv memory
;

; note to test on A1200 rem out cdmem commands and enable file commands
;
; note in blitz probably good idea to be in amiga/qamiga mode when
; using cd32mem commands
;
; note to go to the bother of getting it working with ram:test b4
; replacing with cd32mem commands and also remember size in cd32mem
; command represents 10 bytes!
;
; I think also there is available nvmem type simulation library
; for 3.0 so you can test cd32mem commands properly on A1200

NEWTYPE .hitable
  name.l[5]         ;space for 5 names  (3 chars+null)
  score.l[5]        ;space for 5 scores (4 bytes each)
End NEWTYPE

DEFTYPE .hitable hitable

Dim name$(5)        ;actual arrays used in game
Dim score.l(5)

readtable:

  gotit=ReadCD32Mem("STARBASHER","HI-SCORES",&hitable,4)  ;reads 40 bytes
;  If ReadFile(0,"ram:test") Then ReadMem 0,&hitable,40:CloseFile 0

  For i=0 To 4
    name$(i)=Peeks$(&hitable\name[i],4)
    score(i)=hitable\score[i]
  Next

writetable:
  For i=0 To 4
    Poke$ &hitable\name[i],Left$(name$(i),3)
    hitable\score[i]=score(i)
  Next

  gotit=WriteCD32Mem("STARBASHER","HI-SCORES",&hitable,4)  ;write 40 bytes
;  If WriteFile(0,"ram:test") Then WriteMem 0,&hitable,40:CloseFile 0

  End


Playing Audio Tracks
--------------------

Instructing the CD32 to play an audio track is simply a
matter of using the PlayCD32 command.

The InitCD32 command should however be used first, and
if the result is false (ie software is NOT running on
CD32) your software should not call any other CD32
commands.

Unlike the CD32Mem commands we have found that the CD32
audio commands can be used in Blitz mode, although if
things start going weird....
@ENDNODE

@NODE "InitCD32"
Function: InitCD32

If InitCD32 returns true then it is ok to use the following
commands, if false then no there is no cd32 or compatible
available so don't even try.
@ENDNODE


@NODE "ExamineCD32"
Function: ExamineCD32 ;-1=programdisk 0=nodisk n=number of tracks

ExamineCD32 is useful for programs that allow disk swapping,
it can be used to ensure the programdisk that the game was run
from is present, or if there is no disk or if a standard music
CD has been inserted. It is feasible that you allow users to
play music cd's while playing you game and then be able to ask
them to insert the game disk when more data is required.
@ENDNODE


@NODE "PlayCD32"
PlayCD32 track#[,numtracks]

Makes the CD32 go boom tiddly pom depending on what type of
music track is specified... ie should/will/definately play
start the CD32 playing the track sprecified.
@ENDNODE


@NODE "StopCD32"
StopCD32

No explanation necesary, well it is sort of self explanatory...
@ENDNODE


@NODE "ControlCD32"
ControlCD32 ;0=play 1=pause 2=ffwd 3=rewind

Yup, pretty straight forward here.
@ENDNODE


@NODE "TocCD32"
TocCD32 ;returns location of the toc read by Examine

Hmmm, demo code required here. After using the ExamineCD32 command
you can find out the length of each track by examining the TOC data
(Table Of Contents) a sort of Audio CD directory command.
@ENDNODE


@NODE "ConfigCD32"
ConfigCD32 [&TagList] ;can return &currentconfig

Tags are available for 2x speed and 1xspeed and other things.
Interesting to note any CD can be turned into the chipmunk
edition by telling CD32 to switch to 2xspeed and then using
playtrack, or was that playtrack and then 2xspeed... Anyway
it does work.
@ENDNODE


@NODE "ReadCD32"
ReadCD32 (CD_Offset,Address,Length)

Wo, only good for lowlevel people who want to protect their
software in more ways than one. Using commands like this will
definately make your game non hard drive installable.
@ENDNODE


@NODE "ReadCD32Mem"
    See example in @{" main " link "MAIN"}
@ENDNODE


@NODE "WriteCD32Mem"
    See example in @{" main " link "MAIN"}
@ENDNODE
