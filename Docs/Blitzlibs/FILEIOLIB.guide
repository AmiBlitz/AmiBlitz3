@DATABASE FILEIOLIB
@Author Conversion program
@$VER: FILEIOLIB V1.1 (27.01.2007)- Updated by mrodfr.
@NODE OVERVIEW "Overview of FILEIOLIB"

                                  @{b}@{u}Overview@{ub}@{uu}


                          An Acid Software Library

                         Converted to AmigaGuide by

                            Red When Excited Ltd

                 Used with the permission of Acid Software

          Edited, fixed and cleaned by Toby Zuijdveld 26/02/1999.
                       mailto:hotcakes\@abacus.net.au



@ENDNODE OVERVIEW

@NODE OpenFile "FILEIOLIB"

@{fg shine}Function: OpenFile@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : OpenFile (File#,Filename$)

OpenFile attempts to open the file specified by Filename$. If the file 
was successfully opened, OpenFile will return true (-1), otherwise, 
OpenFile will return false (0).

Files opened using OpenFile may be both written to and read from. If 
the file specified by Filename$, did not already exist before the file 
was opened, it will be created by OpenFile.

Files opened with OpenFile are intended for use by the random access 
file commands, although it is quite legal to use these files in a 
sequential manner.

See also @{" ReadFile   " link ReadFile}  or  @{" WriteFile   " link ReadFile}
for more examples

 or writefile

Example for Write

 if OpenFile(0,"ram:test")
   Maxlen c$=32
   Fields 0,a,b,c$
   a=10:b=16:c$="Hello"
   Put 0,0
   CloseFile 0
 end if

Example for Read

  if OpenFile(0,"ram:test")
   Maxlen c$=32
   Fields 0,a,b,c$
   Get 0,0
   Nprint "a=",a,"b=",b,"c$=",c$
   CloseFile 0
   MouseWait
 end if

@ENDNODE OpenFile

@NODE CloseFile "FILEIOLIB"

@{fg shine}Statement: CloseFile@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : CloseFile File#

CloseFile is used to close a file opened using one of the file open 
functions (FileOpen, ReadFile, WriteFile). This should be done to all 
files when they are no longer required.


@ENDNODE CloseFile

@NODE KillFile "FILEIOLIB"

@{fg shine}Statement: KillFile@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : KillFile Filename$

The KillFile command will simply attempt to delete the specified file. 
No error will be returned if the file could not be deleted.

@ENDNODE KillFile

@NODE Fields "FILEIOLIB"

@{fg shine}Statement: Fields@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Fields File#,Var1[,Var2...]

Fields is used to set up fields of a random access file record. Once 
Fields is executed, Get and Put may be used to read and write 
information to and from the file.

The Var parameters specify a list of variables you wish to be either 
read from, or written to the file. 

When a Put is executed, the values held in these variables will be 
transferred to the file.

When a Get is executed, these variables will take on values read from 
the file.

Any string variables in the variable list MUST have been initialized to 
contain a maximum number of characters. This is done using the MaxLen 
command. These string variables must NEVER grow to be longer than their 
defined maximum length.


@ENDNODE Fields

@NODE Put "FILEIOLIB"

@{fg shine}Statement: Put@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Put File#,Record

Put is used to transfer the values contained in a Fields variable list 
to a particular record in a random access file. When using Put to 
increase the size of a random access file, you may only add to the 
immediate end of file. For example, if you have a random access file 
with 5 records in it, it is illegal to put record number 7 to the file 
until record number 6 has been created.


@ENDNODE Put

@NODE Get "FILEIOLIB"

@{fg shine}Statement: Get@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Get File#,Record

Get is used to transfer information from a particular record of a 
random access file into a variable list set up by the Fields command. 
Only records which also exist may be 'got'.


@ENDNODE Get

@NODE FileOutput "FILEIOLIB"

@{fg shine}Statement: FileOutput@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : FileOutput File#

The FileOutput command causes the output of all subsequent Print and 
NPrint commands to be sent to the specified sequential file. When the 
file is later closed, Print statements should be returned to an 
appropriate output channel (eg: DefaultOutput or WindowOutput).


@ENDNODE FileOutput

@NODE FileInput "FILEIOLIB"

@{fg shine}Statement: FileInput@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : FileInput File#

The FileInput command causes all subsequent Edit, Edit$ and Inkey$ 
commands to receive their input from the specified file. When the file 
is later closed, input should be redirected to an appropraite channel 
(eg: DefaultInput or WindowInput).


@ENDNODE FileInput

@NODE gap1 "FILEIOLIB"

@{fg shine}Statement: gap1@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : gap1 


@ENDNODE gap1

@NODE Lof "FILEIOLIB"

@{fg shine}Function: Lof@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Lof (File#)

Lof will return the length, in bytes, of the specified file.


@ENDNODE Lof

@NODE FileSeek "FILEIOLIB"

@{fg shine}Statement: FileSeek@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : FileSeek File#,Position

FileSeek allows you to move to a particular point in the specified 
file. The first piece of data in a file is at position 0, the second at 
position 1 and so on. Position must not be set to a value greater than 
the length of the file.

Used in conjunction with OpenFile and Lof, FileSeek may be used to 
'append' to a file.


@ENDNODE FileSeek

@NODE Loc "FILEIOLIB"

@{fg shine}Function: Loc@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Loc (File#)

Loc may be used to determine your current position in the specified 
file. When a file is first opened, you will be at position 0 in the 
file.


@ENDNODE Loc

@NODE Eof "FILEIOLIB"

@{fg shine}Function: Eof@{fg text}
--------------------------------------------------------------------------------
Modes  : Amiga
Syntax : Eof (File#)

The Eof function allows you to determine if you are currently 
positioned at the end of the specified file. If so, Eof will return 
true (-1), otherwise Eof will return false (0).

If you are at the end of a file, any further writing to the file will 
increase it's length, while any further reading from the file will 
cause an error.


@ENDNODE Eof

@NODE DosBuffLen "FILEIOLIB"

@{fg shine}Statement: DosBuffLen@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DosBuffLen Bytes

All Blitz 2 file handling is done through the use of special buffering 
routines. This is done to increase the speed of file handling, 
especially in the case of sequential files.

Initially, each file opened is allocated a 2048 byte buffer. However, 
if memory is tight this buffer size may be lowered using the DosBuffLen 
command.



@ENDNODE DosBuffLen

@NODE gap2 "FILEIOLIB"

@{fg shine}Statement: gap2@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : gap2 


@ENDNODE gap2

@NODE File "FILEIOLIB"

@{fg shine}Statement: File@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : File 



@ENDNODE File

@NODE ReadFile "FILEIOLIB"

@{fg shine}Function: ReadFile@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ReadFile (File#,Filename$)

ReadFile opens an already existing file specified by Filename$ for 
sequential reading. If the specified file was successfully opened, 
ReadFile will return true (-1), otherwise ReadFile will return false 
(0).

Once a file is open using ReadFile, FileInput may be used to read 
information from it.

Example:

IF ReadFile (0,"ram:test")
   FileInput 0                ;set output to file 0
   NPrint Edit$(80)           ;maxlen of read
   CloseFile 0
   Default Input              ;dont forget this
End If

@ENDNODE ReadFile

@NODE WriteFile "FILEIOLIB"

@{fg shine}Function: WriteFile@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : WriteFile (File#,Filename$)

WriteFile creates a new file, specified by Filename$, for the purpose 
of sequential file writing. If the file was successfully opened, 
WriteFile will return true (-1), otherwise, WriteFile will return false 
(0).

A file opened using WriteFile may be written to by using the FileOutput 
command. 

IF WriteFile (0,"ram:test")
   FileOutput 0               ;set output to file 0
   NPrint "Hallo"             ;CloseFile 0
   Default Output             ;set back to default (dont forget this)
End If

@ENDNODE WriteFile

@NODE WriteMem "FILEIOLIB"

@{fg shine}Statement: WriteMem@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : WriteMem File#,Address,Length

WriteMem allows you to write a number of bytes, determined by Length, 
from an absolute memory location, determined by Address, to an open 
file specified by File#.


@ENDNODE WriteMem

@NODE ReadMem "FILEIOLIB"

@{fg shine}Statement: ReadMem@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ReadMem File#,Address,Length

ReadMem allows you to read a number of bytes, determined by Length, 
into an absoulte memory location, determined by Address, from an open 
file specified by File#.

Be careful using ReadMem, as writing to absolute memory may have 
serious consequences if you don't known what you're doing!


@ENDNODE ReadMem

@NODE Exists "FILEIOLIB"

@{fg shine}Function: Exists@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Exists (Filename$)


@ENDNODE Exists


@NODE ReadType "FILEIOLIB"

@{fg shine}Statement: ReadType@{fg text}
--------------------------------------------------------------------------------
Modes  :
Syntax : ReadType file#,type    WriteType file#,type

Store/read complete newtype with string to disk
Also handles correct if older files use smaller newtypes
Unloaded parts are set to 0 and zerostring

@ENDNODE Exists

@NODE MAIN "FILEIOLIB"

.-----------------------------------------------------------------------------.
|                                 @{b}FILEIOLIB@{ub}                                   |
`-----------------------------------------------------------------------------'

                             @{"     Overview     " link OVERVIEW}

                               Command Index                                

                 @{" CloseFile  " link CloseFile}                @{" DosBuffLen " link DosBuffLen}
                 @{" Eof        " link Eof}                @{" Exists     " link Exists}
                 @{" Fields     " link Fields}                @{" File       " link File}
                 @{" FileInput  " link FileInput}                @{" FileOutput " link FileOutput}
                 @{" FileSeek   " link FileSeek}                @{" Get        " link Get}
                 @{" KillFile   " link KillFile}                @{" Loc        " link Loc}
                 @{" Lof        " link Lof}                @{" OpenFile   " link OpenFile}
                 @{" Put        " link Put}                @{" ReadFile   " link ReadFile}
                 @{" ReadMem    " link ReadMem}                @{" WriteFile  " link WriteFile}
                 @{" WriteMem   " link WriteMem}
                 @{" ReadType   " link ReadType}                @{" WriteType  " link ReadType}
                 @{" gap1       " link gap1}                @{" gap2       " link gap2}
@ENDNODE MAIN

