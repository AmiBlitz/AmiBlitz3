@database STRINGFUNCLIB
@author "Conversion"
@$VER: STRINGFUNCLIB V1.1 (27.01.2007)- Updated by mrodfr.
@remark Created with Heddley v1.1 (c) Edd Dumbill 1994

@node "OVERVIEW" "Overview of STRINGFUNCLIB"

                                  @{b}@{u}Overview@{ub}@{uu}


                          An Acid Software Library

                         Converted to AmigaGuide by

                            Red When Excited Ltd

                 Used with the permission of Acid Software

          Edited, fixed and cleaned by Toby Zuijdveld 27/02/1999.
                       mailto:hotcakes\@abacus.net.au


@endnode

@node "Left$" "STRINGFUNCLIB"
 @{fg shine}Function: Left$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Left$ (String$,Length)

This function returns Length leftmost characters of string  String$.

@endnode

@node "Right$" "STRINGFUNCLIB"
 @{fg shine}Function: Right$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Right$ (String$,Length)

Right$() returns the rightmost Length characters from string  String$.

@endnode

@node "Mid$" "STRINGFUNCLIB"
 @{fg shine}Function: Mid$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Mid$ (String$,Startchar[,Length])

This function returns Length characters of string String$ starting at
character Startchar. If the optional Length parameter is omitted, then  all
characters from Startchar up to the end of String$ will be  returned.

@endnode

@node "Hex$" "STRINGFUNCLIB"
 @{fg shine}Function: Hex$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Hex$ (Expression)

Hex$() returns an 8 character string equivalent to the hexadecimal
representation of Expression.

@endnode

@node "Bin$" "STRINGFUNCLIB"
 @{fg shine}Function: Bin$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Bin$ (Expression)

Hex$() returns a 32 character string equivalent to the binary  representation
of Expression.

@endnode

@node "Chr$" "STRINGFUNCLIB"
 @{fg shine}Function: Chr$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Chr$ (Expression)

Chr$ returns a one character string equivalent to the ASCII character
Expression.Ascii is a standard way of coding the characters used by the
computer display.

@endnode

@node "Asc" "STRINGFUNCLIB"
 @{fg shine}Function: Asc@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Asc (String$)

Asc() returns the ASCII value of the first characters in the string  String$.

@endnode

@node "String$" "STRINGFUNCLIB"
 @{fg shine}Function: String$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : String$ (String$,Repeats)

This function will return a string containing Repeats sequential  occurrences
of the string String$.

@endnode

@node "Instr" "STRINGFUNCLIB"
 @{fg shine}Function: Instr@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Instr (String$,Findstring$[,Startpos])

Instr attempts to locate FindString$ within String$. If a match is  found, the
character position of the first matching character will be  returned. If no
match is found, 0 will be returned.

The optional Startpos parameter allows you to specify a starting  character
position for the search.

CaseSense may be used to determine whether the search is case sensitive  or
not.

@endnode

@node "Replace$" "STRINGFUNCLIB"
 @{fg shine}Function: Replace$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Replace$ (String$,Findstring$,Replacestring$)

Replace$() will search the string String$ for any occurrences of the  string
Findstring$ and replace it with the string Replacestring$.

CaseSense may be used to determine whether the search is case sensitive  or
not.

@endnode

@node "Mki$" "STRINGFUNCLIB"
 @{fg shine}Function: Mki$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Mki$ (Integer)

This will create a two byte character string, given the two byte  numeric
value Numeric.

Mki$ is often used before writing integer values to sequential files to  save
on disk space. When the file is later read in, Cvi may be used to  convert the
string back to an integer.

@endnode

@node "Mkl$" "STRINGFUNCLIB"
 @{fg shine}Function: Mkl$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Mkl$ (Long)

This will create a four byte character string, given the four byte  numeric
value Long.

Mkl$ is often used when writing long values to sequential files to save  on
disk space. When the file is later read in, Cvl may be used to  convert the
string back to a long.

@endnode

@node "Cvi" "STRINGFUNCLIB"
 @{fg shine}Function: Cvi@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Cvi (String$)

Cvi returns an integer value equivalent to the left 2 characters of  String$.
This is the logical opposite of Mki$.

@endnode

@node "Cvl" "STRINGFUNCLIB"
 @{fg shine}Function: Cvl@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Cvl (String$)

Cvl returns a long value equivalent to the left 4 characters of  String$. This
is the logical opposite of Mkl$.

@endnode

@node "Len" "STRINGFUNCLIB"
 @{fg shine}Function: Len@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Len (String$)

Len returns the length of the string String$.

@endnode

@node "UnLeft$" "STRINGFUNCLIB"
 @{fg shine}Function: UnLeft$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : UnLeft$ (String$,Length)

UnLeft$() removes the rightmost Length characters from the string  String$.

@endnode

@node "UnRight$" "STRINGFUNCLIB"
 @{fg shine}Function: UnRight$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : UnRight$ (String$,Length)

UnRight$() removes the leftmost Length characters from the string  String$.

@endnode

@node "StripLead$" "STRINGFUNCLIB"
 @{fg shine}Function: StripLead$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : StripLead$ (String$,Ascii)

StripLead$ removes all leading occurrences of the ASCII character  specified
by Expression from the string String$.

@endnode

@node "StripTrail$" "STRINGFUNCLIB"
 @{fg shine}Function: StripTrail$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : StripTrail$ (String$,Ascii)

StripTrail$ removes all trailing occurrences of the ASCII character  specified
by Expression from the string String$.

@endnode

@node "LSet$" "STRINGFUNCLIB"
 @{fg shine}Function: LSet$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : LSet$ (String$,Characters)

This function returns a string of Characters characters long. The  string
String$ will be placed at beginning of this string. If String$  is shorter
than Characters the right hand side is padded with spaces.  If it is longer,
it will be truncated.

@endnode

@node "RSet$" "STRINGFUNCLIB"
 @{fg shine}Function: RSet$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : RSet$ (String$,Characters)

This function returns a string of Characters characters long. The  string
String$ will be placed at end of this string. If String$ is  shorter than
Characters the left hand side is padded with spaces. If it  is longer, it will
be truncated.

@endnode

@node "Centre$" "STRINGFUNCLIB"
 @{fg shine}Function: Centre$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Centre$ (String$,Characters)

This function returns a string of Characters characters long. The  string
String$ will be centered in the resulting string. If String$ is  shorter than
Characters the left and right sides will be padded with  spaces. If it is
longer, it will be truncated on either side.

@endnode

@node "LCase$" "STRINGFUNCLIB"
 @{fg shine}Function: LCase$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : LCase$ (String$)

This function returns the string String$ converted into  lowercase.

@endnode

@node "UCase$" "STRINGFUNCLIB"
 @{fg shine}Function: UCase$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : UCase$ (String$)

This function returns the string String$ converted to uppercase.

@endnode

@node "CaseSense" "STRINGFUNCLIB"
 @{fg shine}Statement: CaseSense@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : CaseSense On|Off

CaseSense allows you to control the searching mode used by the Instr  and
Replace$ functions. 

CaseSense On indicates that an exact match must be found.

CaseSense Off indicates that alphabetic characters may be matched even  if
they are not in the same case.

CaseSense On is the default search mode.

@endnode

@node "Mkq$" "STRINGFUNCLIB"
 @{fg shine}Function: Mkq$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Mkq$ (Quick)

This will create a four byte character string, given the four byte  numeric
value Quick.

Mkq$ is often used when writing quick values to sequential files to  save on
disk space. When the file is later read in, Cvq may be used to  convert the
string back to a quick.

@endnode

@node "Cvq" "STRINGFUNCLIB"
 @{fg shine}Function: Cvq@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Cvq (String$)

Cvq returns a quick value equivalent to the left 4 characters of  String$.
This is the logical opposite of Mkq$.
@endnode

@node "MAIN" "STRINGFUNCLIB"
.-----------------------------------------------------------------------------.
|                               @{b}STRINGFUNCLIB@{ub}                                 |
`-----------------------------------------------------------------------------'
                             @{"     Overview     " link "OVERVIEW" 0}

                               Command Index

               @{" Asc          " link "Asc" 0}                @{" Bin$         " link "Bin$" 0}
               @{" CaseSense    " link "CaseSense" 0}                @{" Centre$      " link "Centre$" 0}
               @{" Chr$         " link "Chr$" 0}                @{" Cvi          " link "Cvi" 0}
               @{" Cvl          " link "Cvl" 0}                @{" Cvq          " link "Cvq" 0}
               @{" Hex$         " link "Hex$" 0}                @{" Instr        " link "Instr" 0}
               @{" LCase$       " link "LCase$" 0}                @{" Left$        " link "Left$" 0}
               @{" Len          " link "Len" 0}                @{" LSet$        " link "LSet$" 0}
               @{" Mid$         " link "Mid$" 0}                @{" Mki$         " link "Mki$" 0}
               @{" Mkl$         " link "Mkl$" 0}                @{" Mkq$         " link "Mkq$" 0}
               @{" Replace$     " link "Replace$" 0}                @{" Right$       " link "Right$" 0}
               @{" RSet$        " link "RSet$" 0}                @{" String$      " link "String$" 0}
               @{" StripLead$   " link "StripLead$" 0}                @{" StripTrail$  " link "StripTrail$" 0}
               @{" Trim$        " link "Trim" 0}                @{" UCase$       " link "UCase$" 0}
               @{" UnLeft$      " link "UnLeft$" 0}                @{" UnRight$     " link "UnRight$"}
               @{" Hexb$        " link "Hexb$" 0}                @{" Hexw$        " link "Hexw$" 0}
               @{" Binb$        " link "Binb$" 0}                @{" Binw$        " link "Binw$" 0}
@endnode

@node "Hexw$" "Hexw$"

@endnode

@node "Hexb$" "Hexb$"

@endnode

@node "Binb$" "Binb$"

@endnode

@node "Binw$" "Binw$"

@endnode

@node "Trim$" "Trim$"
@{fg shine}Function: Trim$@{fg text}
------------------------------------------------------------------------------
-- Modes  :  Syntax : Trim (String$)

Trim$ removes all leading and trailing spaces of the Expression from the string String$.

@endnode
