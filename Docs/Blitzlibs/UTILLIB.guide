@DATABASE UTILLIB
@Author Conversion program
@$VER: UTILLIB V1.1 (27.01.2007)- Updated by mrodfr.
@NODE OVERVIEW "Overview of UTILLIB"

                                  @{b}@{u}Overview@{ub}@{uu}


                          An Acid Software Library

                         Converted to AmigaGuide by

                            Red When Excited Ltd

                 Used with the permission of Acid Software

          Edited, fixed and cleaned by Toby Zuijdveld 27/02/1999.
                       mailto:hotcakes\@abacus.net.au



@ENDNODE OVERVIEW

@NODE CreateMsgPort "UTILLIB"

@{fg shine}Statement: CreateMsgPort@{fg text}
--------------------------------------------------------------------------------
Modes  : AMIGA
Syntax : CreateMsgPort  *UserPort.port=CreateMsgPort(PortName$)

CreateMsgPort is a general Function and not specific to ARexx.

CreateMsgPort opens an intuition PUBLIC message port of the name 
supplied as the only argument. If all is well the address of the port 
created will be returned to you as a LONGWORD so the variable that you 
assign it to should be of type long.

If you do not supply a name then a private MsgPort will be opened for 
you.

Port.l=CreateMsgPort("PortName")

It is important that you check you actually succeeded in opening a port 
in your program. The following code or something similar will 
suffice.

Port.l=CreateMsgPort("Name")
IF Port=0 THEN Error_Routine{}

The name you give your port will be the name that Arexx looks for as 
the HOST address,(and is case sensitive) so take this into 
consideration when you open your port. NOTE IT MUST BE A UNIQUE NAME 
AND SHOULD NOT INCLUDE SPACES.

DeleteMsgPort() is used to remove the port later but this is not 
entirely necessary as Blitz2 will clean up for you on exit if need 
be.


@ENDNODE CreateMsgPort

@NODE DeleteMsgPort "UTILLIB"

@{fg shine}Statement: DeleteMsgPort@{fg text}
--------------------------------------------------------------------------------
Modes  : AMIGA
Syntax : DeleteMsgPort  *UserPort

DeleteMsgPort deletes a MessagePort previously allocated with 
CreateMsgPort(). The only argument taken by DeleteMsgPort is the 
address returned by CreateMsgPort(). If the Port was a public port then 
it will be removed from the public port list.

Port.l=CreateMsgPort("Name")
IF Port=0 Then End
DeleteMsgPort Port

Error checking is not critical as if this fails we have SERIOUS 
PROBLEMS.

YOU MUST WAIT FOR ALL MESSAGES FROM AREXX TO BE RECEIVED BEFORE YOU 
DELETE THE MSGPORT. IF YOU NEGLECT TO DELETE A MSGPORT BLITZ2 WILL DO 
IT FOR YOU AUTOMATICALLY ON PROGRAM EXIT.


@ENDNODE DeleteMsgPort

@NODE Wait "UTILLIB"

@{fg shine}Statement: Wait@{fg text}
--------------------------------------------------------------------------------
Modes  : AMIGA
Syntax : Wait 

Wait halts all program execution until an event occurs that the program 
is interested in. Any intuition event such as clicking on a gadget in a 
window will start program execution again.

A message arriving at a MsgPort will also start program execution 
again. So you may use Wait to wait for input from any source including 
messages from ARexx to your program.

Wait should always be paired with EVENT if you need to consider 
intuition events in your event handler loop.

Repeat
 Wait:rmsg.l=REXXEVENT(Port):ev.l=EVENT
 IF IsRexxMsg(Rmsg) Process_Rexx_Messages{}:ENDIF
 ;
 ;
 ;Rest of normal intuition event loop statements case etc
 ;
Until ev =$200
@ENDNODE Wait

@NODE MAIN "UTILLIB"

.-----------------------------------------------------------------------------.
|                                  @{b}UTILLIB@{ub}                                    |
`-----------------------------------------------------------------------------'

                             @{"     Overview     " link OVERVIEW}

                               Command Index                                

                              @{" CreateMsgPort  " link CreateMsgPort}
                              @{" DeleteMsgPort  " link DeleteMsgPort}
                              @{" Wait           " link Wait}

@ENDNODE MAIN

