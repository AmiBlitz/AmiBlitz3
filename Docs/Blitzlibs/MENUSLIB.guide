@DATABASE MENUSLIB
@Author Conversion program
@$VER: MENUSLIB V1.1 (27.01.2007)- Updated by mrodfr.
@NODE OVERVIEW "Overview of MENUSLIB"

                                  @{b}@{u}Overview@{ub}@{uu}


                          An Acid Software Library

                         Converted to AmigaGuide by

                            Red When Excited Ltd

                 Used with the permission of Acid Software

          Edited, fixed and converted by Toby Zuijdveld 27/02/1999.
                       mailto:hotcakes\@abacus.net.au



@ENDNODE OVERVIEW

@NODE MenuTitle "MENUSLIB"

@{fg shine}Statement: MenuTitle@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : MenuTitle MenuList#,Menu,Title$

MenuTitle is used to add a menu title to a menulist. Menu titles appear 
when the right mouse button is held down, and usually have menuitems 
attached to them.

Menu specifies which menu the title should be used for. Higher numbered 
menus appear further to the right along the menu bar, with 0 being the 
leftmost menu. Menutitles should be added in left to right order, with 
menu 0 being the first created, then 1 and so on...

Title$ is the actual text you want to appear when the right mouse 
button is pressed.


@ENDNODE MenuTitle

@NODE SetMenu "MENUSLIB"

@{fg shine}Statement: SetMenu@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SetMenu Menulist#

SetMenu is used to attach a menulist to the currently used window. Each 
window may have only one menulist attached to it.



@ENDNODE SetMenu

@NODE MenuItem "MENUSLIB"

@{fg shine}Statement: MenuItem@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : MenuItem MenuList#,Flags,Menu,Item,Itemtext$[,Shortcut$]

MenuItem is used to create a text menu item. Menu items appear 
vertically below menu titles when the mouse is moved over a menu title 
with the right mouse button held down.

Flags affects the operation of the menu item.

A value of 0 creates a stand 'seleect' menu item.

A value of 1 creates a 'toggle' menu item. Toggle menu items are used 
for 'on/off' type options. When a toggle menu item is selected, it will 
change state between on and off. An 'on' toggle item is identified by a 
'tick' or check mark.

A value of 2 creates a special type of toggle menu item. Any menu items 
which appear under the same menu with a Flags setting of 2 are said to 
be mutually exclusive. This means that only 1 of them may be in the 
'on' state at one time. If a menu item of this nature is toggled into 
the 'on' state, any other mutually exclusive menu items which may have 
previously been 'on' will be automatically turned 'off'.

Flags values of 3 and 4 correspond to values 1 and 2, only the item 
will initially appear in the 'on' state.

Menu specifies the menu title under which the menu item should 
appear.

Item specifies the menu item number this menu item should be referenced 
as. Higher numbered items appear further down a menu item list, with 0 
being the topmost item. Menu items should be added in 'top down' order, 
with menu item 0 being the first item created.

Itemtext$ is the actual text for the menu item.

An optional Shortcut$ string allows you to select a one character 
'keyboard shortcut' for the menu item.


@ENDNODE MenuItem

@NODE SubItem "MENUSLIB"

@{fg shine}Statement: SubItem@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SubItem MenuList#,Flags,Menu,Item,Subitem,Subitemtext$[,Shortcut$]

All menu items may have an optional list of sub menu items attached to 
them. To attach a sub menu item to a menu item, you use the SubItem 
command.

Item specifies the menu item to attach the sub item to.

Subitem refers to the number of the sub menu item to attach. Higher 
numbered sub items appear further down a sub item list, with 0 being 
the topmost sub item. Sub items should be added in 'top down' order, 
with sub item 0 being created first.

Subitemtext$ specifies the actual text for the sub item. As with menu 
items, sub items may have an optional keyboard shortcut character, 
specified using the Shortcut$ paramater.

All other parameters are identical to the MenuItem command.


@ENDNODE SubItem

@NODE ShapeItem "MENUSLIB"

@{fg shine}Statement: ShapeItem@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ShapeItem MenuList#,Flags,Menu,Item,Shape#

ShapeItem is used to create a graphical menu item.

Shape# refers to a previously initialized shape object to be used as 
the menu item's graphics.

All other parameters are identical to those for MenuItem.


@ENDNODE ShapeItem

@NODE ShapeSub "MENUSLIB"

@{fg shine}Statement: ShapeSub@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ShapeSub MenuList#,Flags,Menu,Item,Subitem,Shape#

ShapeSub allows you to create a graphic sub menu item. Shape# specifies 
a previously created shape object to be used as the sub item's 
grpahics.

All other parameters are identical to those in SubItem.


@ENDNODE ShapeSub

@NODE MenuGap "MENUSLIB"

@{fg shine}Statement: MenuGap@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : MenuGap X Gap,Y Gap

Executing MenuGap before creating any menu titles, items or sub items, 
allows you to control the layout of the menu.
X Gap refers to an amount, specified in pixles, to be inserted to the 
left and right of all menu items and sub menu items. Y Gap refers to an 
amount, again in pixels, to be inserted above and below all menu items 
and sub menu items.


@ENDNODE MenuGap

@NODE SubItemOff "MENUSLIB"

@{fg shine}Statement: SubItemOff@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SubItemOff X Offset,Y Offset

SubItemOff allows you to control the relative position of the top of a 
list of sub menu items, in relation to their associated menu 
item.

Whenver a menu item is created which is to have sub menu items, it's a 
good idea to append the name of the menu item with the '>>' character. 
This may be done using Chr$(187). This gives the user a visual 
indication that more options are available. To position the sub menu 
items correctly so that they appear after the '>>' character, 
SubItemOff should be used.


@ENDNODE SubItemOff

@NODE MenuState "MENUSLIB"

@{fg shine}Statement: MenuState@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : MenuState MenuList#[,Menu[,Item[,Subitem]]],On|Off

The MenuState command allows you to turn menus, or sections of menus, 
on or off.

MenuState with just the MenuList# parameter may be used to turn an 
entire menu list on or off.

MenuState with MenuList# and Menu parameters may be used to turn a menu 
on or off.

Similarly, menu items and sub items may be turned on or off by 
specifying the appropriate parameters.




@ENDNODE MenuState

@NODE MenuColour "MENUSLIB"

@{fg shine}Statement: MenuColour@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : MenuColour Colour

MenuColour allows you to determine what colour any menu item or sub 
item text is rendered in. MenuColour should be executed before the 
approprate menu item commands.


@ENDNODE MenuColour

@NODE MenuChecked "MENUSLIB"

@{fg shine}Function: MenuChecked@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : MenuChecked (MenuList#,Menu,Item[,Subitem])

The MenuChecked function allows you to tell whether or not a 'toggle' 
type menu item or menu sub item is currently 'checked' or 'on'. If the 
specified menu item or sub item is in fact checked, MenuChecked will 
return 'true' (-1). If not, MenuChecked will return 'false' (0).


@ENDNODE MenuChecked

@NODE MenuList "MENUSLIB"

@{fg shine}Statement: MenuList@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : MenuList List of Menus
@ENDNODE MenuList

@NODE MAIN "MENUSLIB"

.-----------------------------------------------------------------------------.
|                                  @{b}MENUSLIB@{ub}                                   |
`-----------------------------------------------------------------------------'

                             @{"     Overview     " link OVERVIEW}

                               Command Index                                

               @{" MenuChecked  " link MenuChecked}                @{" MenuColour   " link MenuColour}
               @{" MenuGap      " link MenuGap}                @{" MenuItem     " link MenuItem}
               @{" MenuList     " link MenuList}                @{" MenuState    " link MenuState}
               @{" MenuTitle    " link MenuTitle}                @{" SetMenu      " link SetMenu}
               @{" ShapeItem    " link ShapeItem}                @{" ShapeSub     " link ShapeSub}
               @{" SubItem      " link SubItem}                @{" SubItemOff   " link SubItemOff}
@ENDNODE MAIN

