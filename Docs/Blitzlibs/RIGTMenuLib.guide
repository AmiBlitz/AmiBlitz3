@DATABASE RIGTMenusLibV2.5
@Author Conversion program
@NODE OVERVIEW "Overview of RI GTMenus Lib V2.5"

                                  @{b}@{u}Overview@{ub}@{uu}

  This library provides access to the GadTools library functions for
setting up and layouting out menustrips.  Because of its use of Gadtools,
this library is for us with OS2 and above.

  Users of the current Acid library should have no problems converting to
this library, since it has been designed so that the only major differences
between them are the slight command name changes.  The benefit of using
this library is that GadTools takes over all positioning of menuitems, and
will automatically take account of things like font sensitivity and items
going off screen.  You'll also get that nice OS2 feeling to your menuitems,
including those luvly bar items.

  If you wish to have proper GadTools menus you need to open your windows
with the NewLookMenus flag set.  Do this by either specifying NewLookMenus
in your taglist for WindowTags, or by adding the value $200000 to your
window flags when you call the Window command.

  The library has its own Blitz2 object associated with it: GTMenuList,
which looks like:

		Newtype.GTMenuList
			*MenuList
			*MenuLookup
			numitems.w
		End Newtype

The latest version of the RED Debugger has this object built in for
convenience.


@ENDNODE OVERVIEW

@NODE GTMenuTitle "RI GTMenus Lib V2.5"

@{fg shine}Statement: GTMenuTitle@{fg text}
------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: GTMenuTitle GTMenuList#,menu,title$

  This creates the specified menutitle in the GTMenuList given.  The text
to display for the title is given in title$

This command fails if 'menu' is greater than 0 but menu title menu-1 hasn't
been defined


@ENDNODE GTMenuTitle

@NODE GTMenuItem "RI GTMenus Lib V2.5"

@{fg shine}Statement: GTMenuItem@{fg text}
------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: GTMenuItem GTMenuList#,flags,menu,item[,itemtext$
		[,shortcut$[mutualexclude[,UserData]]]]

  This creates the specified menuitem in the GTMenuList.  This command
works the same as the Acid command MenuItem *except* that the flags
parameter is different.  The flags in this library refer to the flag
definitions found in the Amiga Include files.

  You'll notice that the itemtext$ parameter is optional - if you leave
this out you'll get a bar item.  This bar item will automatically fit
perfectly across the menu width and will be unselectable by the user.

This command fails in the specifed menu hasn't been defined, or the
item is greater than 0 and (item-1) is undefined.

  There is now another optional parameter - mutualexclude.  This is a bit
pattern of menu items that cannot be 'ticked' whilst this item itself
is ticked.  Use this to have a group of items, out of which only 1 can
be selected a once by a user.  The bit pattern applies to items at the
current depth into the menulist, e.g. only items on the same menu title
can be mutually exclusive.  Refer to the Amiga manuals and the example program
for this library for more information.

The optional UserData field allows you to associate a longword value with
the mnenu item.  This longword will be stored with the menuitem when the
menustrip is actually created using (CreateMenuStrip).  This value can then
be retrieved using the command GTGetUserData.


@ENDNODE GTMenuItem

@NODE GTSubItem "RI GTMenus Lib V2.5"

@{fg shine}Statement: GTSubItem@{fg text}
------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: GTSubItem GTMenuList#,flags,menu,item,subitem[,itemtext$
		[,shortcut$[mutualexclude[,UserData]]]]

  Creates the specified subitem in the GTMenuList.  Need I say more?  The
flags are given as defined in the Amiga Include files.

  You'll notice that the itemtext$ parameter is optional - if you leave
this out you'll get a bar item.  This bar item will automatically fit
perfectly across the menu width and will be unselectable by the user.

  There is now another optional parameter - mutualexclude.  This is a bit
pattern of menu items that cannot be 'ticked' whilst this item itself
is ticked.  Use this to have a group of items, out of which only 1 can
be selected a once by a user.  The bit pattern applies to items at the
current depth into the menulist, e.g. only subitems on the same menu item
can be mutually exclusive.  Refer to the Amiga manuals and the example program
for this library for more information.

The optional UserData field allows you to associate a longword value with
the mnenu item.  This longword will be stored with the menuitem when the
menustrip is actually created using (CreateMenuStrip).  This value can then
be retrieved using the command GTGetUserData.


@ENDNODE GTSubItem

@NODE CreateMenuStrip "RI GTMenus Lib V2.5"

@{fg shine}Statement: CreateMenuStrip@{fg text}
------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: CreateMenuStrip GTMenuList#

  Creates the actual GadTools menustrip from a GTMenuList object.  When you
call commands like GTMenuTitle the work is performed on an internal list to
the library - not an actual menulist.  Thus this command translates the
internal list into a menulist and performs all GadTools formatting etc.

  This command is invoked automatically if it has not been called before
you call GTSetMenu.

  Note also that you must have a currently used screen object to call this
command since GadTools needs to know what screen to format your menus for
(font sensitivity).  Also note that you can call this command over and over
again for a given object - thus after adding new items you can call it
again to make this items appear in the menulist.  WARNING before calling
this command make sure that the GTMenuList given is not attached to a
window - problems will occur (corrupt menu items) if you call this item
whilst the menulist is attached.  Use GTUnSetMenu to remove this menulist
from a window.


@ENDNODE CreateMenuStrip

@NODE GTSetMenu "RI GTMenus Lib V2.5"

@{fg shine}Statement: GTSetMenu@{fg text}
------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: GTSetMenu GTMenuList#,Window#

  Attached the specified GTMenuList to the specified windows.  If the given
GTMenuList object has not had CreateMenuStrip called on it, CreateMenuStrip
is automatically invoked to calculate the menulist.


@ENDNODE GTSetMenu

@NODE GTUnSetMenu "RI GTMenus Lib V2.5"

@{fg shine}Statement: GTUnSetMenu@{fg text}
------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: GTUnSetMenu

  This command removes the menulist from the current window.  You must call
this function before you call CreateMenuStrip IF you have already set the
menulist to a window (come again? :) ).


@ENDNODE GTUnSetMenu

@NODE GTMenuChecked "RI GTMenus Lib V2.5"

@{fg shine}Statement: GTMenuChecked@{fg text}
------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: status=GTMenuChecked (GTMenuList#,menu,item[,subitem])

  This commamd is used in conjunction with menuitems that have a check
mark.  If the item (or subitem) is currently checked (e.g. a tick appears
in front of its text in the menu) then this command returns -1, else it
returns 0.  Note that you must have called either CreateMenuStrip or
GTSetMenu before you use this command.


@ENDNODE GTMenuChecked

@NODE GTSetMenuChecked "RI GTMenus Lib V2.5"

@{fg shine}Statement: GTSetMenuChecked@{fg text}
------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: GTSetMenuChecked GTMenuList#,menu,item[,subitem],Off|On

  This sets the tick mark on the selected item (or subitem) to the status
supplied (on or off).  The same rules apply to this command as
GTMenuChecked.


@ENDNODE GTSetMenuChecked

@NODE GTFreeMenu "RI GTMenus Lib V2.5"

@{fg shine}Statement: GTFreeMenu@{fg text}
------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: GTFreeMenu GTMenuList#,menu[,item[,subitem]]

  This frees the selected menu title/item/subitem from the libraries
internal menu list.  This change will not be reflected in the actual
menulist created by CreateMenuStrip until you recall CreateMenuStrip.

  Deleting an item automatically causes its decendants to be deleted.  Eg.
deleting a menu title will cause all items that belong to it to be deleted,
deleting a menu item will cause all subitems that belong to it be deleted.


@ENDNODE GTFreeMenu

@NODE GTMenuState "RI GTMenus Lib V2.5"

@{fg shine}Statement: GTMenuState@{fg text}
------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: GTSetMenuState GTMenuList#,menu,item[,subitem],Off|On

  This sets the tick mark on the selected item (or subitem) to the status
supplied (on=enabled or off=disabled).


@ENDNODE GTMenuState

@NODE GTGetUserData "RI GTMenus Lib V2.5"

@{fg shine}Statement: GTGetUserData@{fg text}
------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: userdata.l=GTGetUserData (GTMenuList#,menu,item[,subitem])

  This command can be used to retrieve the userdata associated with a
specific menuitem/subitem.  The userdata value for a menuitem/subitem is
passed as a parameter to the commands GTMenItem and GTSubItem.  The
UserData longword can be used to store any value you wish (e.g. could be
a pointer to a function, or a pointer to a string etc).
@ENDNODE GTGetUserData

@NODE MAIN "RI GTMenus Lib V2.5"

.-----------------------------------------------------------------------------.
|                            @{b}RI GTMenus Lib V2.5@{ub}                              |
`-----------------------------------------------------------------------------'

                         ©1996 Red When Excited Ltd

                             @{"     Overview     " link OVERVIEW}

                               Command Index                                

           @{" CreateMenuStrip  " link CreateMenuStrip}                @{" GTFreeMenu       " link GTFreeMenu}
           @{" GTGetUserData    " link GTGetUserData}                @{" GTMenuChecked    " link GTMenuChecked}
           @{" GTMenuItem       " link GTMenuItem}                @{" GTMenuState      " link GTMenuState}
           @{" GTMenuTitle      " link GTMenuTitle}                @{" GTSetMenu        " link GTSetMenu}
           @{" GTSetMenuChecked " link GTSetMenuChecked}                @{" GTSubItem        " link GTSubItem}
           @{" GTUnSetMenu      " link GTUnSetMenu}

                                @{" Examples " LINK Examples}

                              @{" Main Document " LINK "Blitz2:RedHelp/REDBlitzLibs/REDBLITZLIBS.GUIDE/MAIN"}
                              @{" Library Index " LINK "Blitz2:RedHelp/REDBlitzLibs/REDBLITZLIBS.GUIDE/LIBRARYLIST"}
@ENDNODE MAIN

@NODE Examples "Example Programs"

                             @{b}@{u}Example Programs@{ub}@{uu}


@{fg shine}EXAMPLE 1@{fg text} - Demonstration Of Using GadTools Menus :

           @{" Load Example 1 " system "run >NIL: BLITZ2:REDHelp/ShowExample File=Blitz2:RedHelp/REDBlitzLibs/Examples/RIGTMenusLib1.bb"}
           @{" Compile It!    " system "run >NIL: BLITZ2:REDHelp/ShowExample File=COMPILE"}


@ENDNODE Examples
