@DATABASE RIAppLibV2.6
@$VER: RIAPPLIB V2.6 (27.01.2007)- Updated by mrodfr.
@NODE MAIN "RIAppLibrary"
.---------------------------------------------------------------------------.
|                           @{b}RI App Library V2.5@{ub}                             |
`---------------------------------------------------------------------------'

                        ©1996 Red When Excited Ltd

       Undocumented commands added by Toby Zuijdveld 02/03/1999
                      mailto: hotcakes\@abacus.net.au

			   @{"     Overview     " link OVERVIEW}

                               Command Index

           @{" AppEvent      " link AppEvent}                  @{" DelAppIcon     " link DelAppIcon}
           @{" AppEventType  " link AppEventType}                  @{" DelAppMenu     " link DelAppMenu}
           @{" AppEventID    " link AppEventID}                  @{" AppFile        " link AppFile}
           @{" AddAppWindow  " link AddAppWindow}                  @{" AppNumFiles    " link AppNumFiles}
           @{" AddAppIcon    " link AddAppIcon}                  @{" AppLock        " link AppLock}
           @{" AddAppMenu    " link AddAppMenu}                  @{" AppMessage     " link AppMessage}
           @{" DelAppWindow  " link DelAppWindow}                  @{" AppMsgPort     " link AppMsgPort}
           @{" NextAppFile   " link NextAppFile}
                            @{" AppEventIDCMP " link AppEventIDCMP}

                              @{" Examples " link Examples}
@ENDNODE MAIN

@NODE Overview "Overview"

                                 @{b}@{u}Overview@{uu}@{ub}

This small library provides quick and easy to use commands for accessing
AppWindows, AppIcons and AppMenus.

An AppWindow is a window on the Workbench screen which will allow you
to drag file(s) into it, instead of ploughing through file-requesters.

An AppMenu adds a menu item to the "Tools" menu of the Workbench. It is
normally used for when the program is 'sleeping' and the user wishes to
wake it up. In addition, if any files are selected and the menu item
is selected these are passed to the program.

An AppIcon is just like a normal file icon on the Workbench except it
allows you to drop file(s) onto it, or to double-click it to wake
up the program.

These features require at Workbench v2.0 or higher.

@ENDNODE OVERVIEW

@NODE AppEvent "AppEvent"

@{fg shine}Function : AppEvent@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : status=AppEvent

  This command checks to see whether or not an 'App'Event (e.g. File
dropped onto an AppIcon or Menu Item selected) has occurred.

If you wish to wait for an AppEvent OR another Intuition event
(e.g. those from Windows/Menus etc) you can use the @{"AddWaitEvent" link "/AcidLibs/WindowsLib.GUIDE/AddWaitEvent"}
instead of a Repeat..VWait..Until  loop

This function will return 0 if no event has occurred, else
$800000 (#IDCMP_BOOPSI) if:

	An AppMenu was selected
        An AppIcon was double-clicked
        A File Was Dragged Into An AppWindow
        A File Was Dragged Onto An AppIcon

e.g.

  Repeat
    VWait
    appev.l=AppEvent		; Has something happened ?
  Until appev
  If appev=$800000
    NPrint "An AppEvent Occurred! !"
  EndIf

  or 

  AddWaitEvent @{"PortSigBit" link "RIMiscLib.GUIDE/PortSigBit"}(@{"AppMsgPort" link AppMsgPort},#IDCMP_BOOPSI
  ev.l=WaitEvent
  If ev=#IDCMP_BOOPSI
     appev.l=AppEvent
     If appev Then NPRINT "An AppEvent Occurred! !"
  EndIf

@ENDNODE AppEvent

@NODE AddAppWindow "AddAppWindow"

@{fg shine}Function : AddAppWindow@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : success=AddAppWindow(windownumber)

  This command attempts to make the window specified by 'windownumber' to
become an AppWindow. -1 means success, 0 means failure. There is a limit of
16 AppWindows open at any one time.

@ENDNODE AddAppWindow

@NODE AddAppIcon "AddAppIcon"

@{fg shine}Function : AddAppIcon@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : success=AddAppIcon(id,text$,iconname$)

  This command attempts to place an AppIcon onto the Workbench desktop.
ID is a unique identification number. Text$ is text to display underneath
the AppIcon and Iconname$ is the name of the file to use the Icon imagery.
-1 means success, 0 means failure. There is a limit of 16 AppIcons.

e.g.

  suc=AddAppIcon(0,"QuickFormat","SYS:System/Format")
  If suc=0 Then End

@ENDNODE AddAppIcon

@NODE AddAppMenu "AddAppMenu"

@{fg shine}Function : AddAppMenu@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : success=AddAppMenu(id,text$)

This command tries to add 'text$' to the Tools menu of Workbench.
ID is a unique identification number. Returns -1 for success, 0 for failure.
There is a limit of 16 AppMenu items.

e.g.

  suc=AddAppMenu(0,"Wakey Wakey")
  If suc=0 Then End

@ENDNODE AddAppMenu

@NODE AppEventType "AppEventType"

@{fg shine}Function : AppEventType@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : apptype=AppEventType

This function will return the type of App object which caused the event.

	0=No Event Occurred
	1=AppWindow
	2=AppIcon
	3=AppMenu

e.g.

  Repeat
    VWait
    appev.l=@{"AppEvent" link AppEvent} 	; Has something happened ?
  Until appev
  Select AppEventType
    Case 1
      NPrint "An AppWindow caused this!"
    Case 2
      NPrint "An AppIcon caused this!"
    Case 3
      NPrint "An AppMenu caused this!"
  End Select

@ENDNODE AppEventType

@NODE AppEventID "AppEventID"

@{fg shine}Function : AppEventID@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : idnumber=AppEventID

  This will return the object ID number which caused the AppEvent. This ID
number refers to the one which was used in:

   AddAppIcon/AddAppWindow/AddAppWindow.

   -1 means that no AppEvent occurred.

@ENDNODE AppEventID

@NODE NextAppFile "NextAppFile"

@{fg shine}Function : NextAppFile@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : filename$=NextAppFile

  This will return the full path and filename for the file/drawer/volume
which was selected when an AppEvent occurred. If a directory was selected
then a '/' is appended to the file name. If a volume (e.g. a Disk) was
selected then a ":" is appended.

An empty string means nothing was selected.

e.g.

  ; AppStuff initalized
  Repeat
    VWait
    appev.l=AppEvent
  Until appev=$800000      ; repeat until some files are selected.
  numfiles.l=AppNumFiles
  For n=1 To numfiles
    NPrint "File number "+str$(n)+" is "+NextAppFile
  Next n

@ENDNODE NextAppFile

@NODE AppNumFiles "AppNumFiles"

@{fg shine}Function : AppNumFiles@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : numfiles=AppNumFiles

  This will return the number of files selected when the AppEvent occurred.
  
@ENDNODE AppNumFiles

@NODE AppFile "AppFile"

@{fg shine}Function : AppFile@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : filename$=AppFile(file#)

  This will return the full path and filename for the file/drawer/volume
which was selected when an AppEvent occurred. The file# parameter specifies
which file to return. If a directory was selected then a '/' is appended to
the file name. If a volume (e.g. a Disk) was selected then  a ":" is
appended.

An empty string means nothing was selected.

e.g.

  ; AppStuff initalized
  Repeat
    VWait
    appev.l=AppEvent
  Until appev=$800000      ; repeat until some files are selected.
  numfiles.l=AppNumFiles
  For n=1 To numfiles
    NPrint "File number "+str$(n)+" is "+AppFile(n)
  Next n

@ENDNODE AppFile

@NODE DelAppWindow "DelAppWindow"

@{fg shine}Function: DelAppWindow@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : success=DelAppWindow[(number)]

  This command will remove the AppWindow from the system and free up the
associated message port.

@ENDNODE DelAppWindow

@NODE DelAppIcon "DelAppIcon"

@{fg shine}Function: DelAppIcon@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : success=DelAppIcon[(id)]

  This command will remove the AppIcon from the system and free up the
associated message port.

@ENDNODE DelAppIcon

@NODE DelAppMenu "DelAppMenu"

@{fg shine}Function: DelAppMenu@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : success=DelAppMenu[(id)]

  This command will remove the AppMenu from the system and free up the
associated message port.

@ENDNODE DelAppMenu

@NODE AppLock "AppLock"

@{fg shine}Function: AppLock@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : lock.l=AppLock

  This function returns the address of the lock associated with the current
AppFile.

@ENDNODE AppLock

@NODE AppMessage "AppMessage"

@{fg shine}Function: AppMessage@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : msgptr.l=AppMessage

  This function returns the address of the current message.

@ENDNODE AppMessage

@NODE AppMsgPort "AppMsgPort"

@{fg shine}Function: AppMsgPort@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : msgport.l=AppMsgPort

  This function returns the address of the App message port. Useful for
doing extra things such as @{"AddWaitEvent" link "/AcidLibs/WindowsLib.GUIDE/AddWaitEvent"} and @{"PortSigBit" link "RIMiscLib.GUIDE/PortSigBit"}(AppMsgPort),#IDCMP_BOOPSI

@ENDNODE AppMsgPort

@NODE AppEventIDCMP "AppEventIDCMP"

@{fg shine}Function: AppEventIDCMP@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : IDCMP_flag=AppEventIDCMP

  This function returns the IDCMP value for AppEvents. For use with 
AddWaitEvent (see ACIDs windows library)

@ENDNODE AppEventIDCMP

@NODE Examples "Example Programs"

                             @{b}@{u}Example Programs@{ub}@{uu}

@{fg shine}EXAMPLE 1@{fg text} - an example on how to use AppIcons :

	@{" Load Example 1 " system "run >NIL: BLITZ3:Amiblitz3 Blitz3:Docs/UserLibs/Examples/RIAppLib1.bb"}

@{fg shine}EXAMPLE 2@{fg text} - an example on how to use AppMenus :

	@{" Load Example 2 " system "run >NIL: BLITZ3:Amiblitz3 Blitz3:Docs/UserLibs/Examples/RIAppLib2.bb"}

@{fg shine}EXAMPLE 3@{fg text} - an example on how to use AppWindows :

	@{" Load Example 3 " system "run >NIL: BLITZ3:Amiblitz3 Blitz3:Docs/UserLibs/Examples/RIAppLib3.bb"}

@{fg shine}EXAMPLE 4@{fg text} - an example on how to use ALL the AppLibrary commands :

	@{" Load Example 4 " system "run >NIL: BLITZ3:Amiblitz3 Blitz3:Docs/UserLibs/Examples/RIAppLib4.bb"}

@ENDNODE Examples
