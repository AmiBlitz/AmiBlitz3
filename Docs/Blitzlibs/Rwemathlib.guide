@DATABASE RWEMathLib
@$VER: RWEMATHLIB V1.10 (27.01.2007)- Updated by mrodfr.
@NODE "MAIN"
;
; RWEmathlib (BUM10 beta release) - Nigel Hughes RWE/RI
;
; - #rwemathlib=23
;
; - does maths and matrix things and some chunky drawing stuff too
;
; - take a look at Nigels Landscape, Sphere and Sorting demos in
;   BUM10Examples2:UserCode2/  and my version of Nigels sphere demo
;   in BUM10Examples2:TedsDemos/
;
; - Why did I have to write these 'docs' Nigel ?  :-P
;
;
;Ted Bailey - September '96


                             Command List
                             ------------

       @{" UPeek(ad.l) " link "UPeek"}
       @{" QMULS(v1.q,v2.q) " link "QMuls"}
       @{" MakeVector x.w,y.w,z.w,&V.Vector_Type " link "MakeVector"}
       @{" VectorMagnitude(&V.Vector_Type) " link "VectorMagnitude"}
       @{" VectorAngle(&N.Vector_Type,&L.Vector_Type) " link "VectorAngle"}
       @{" FastVectorAngle(&N.Vector_Type,&L.Vector_Type) " link "FastVectorAngle"}
       @{" UnitVector &N.Vector_Type " link "UnitVector"}
       @{" SubtractVectors &N.Vector_Type,&L.Vector_Type,&Result.Vector_Type " link "SubtractVectors"}
       @{" DotProduct &N.Vector_Type,&L.Vector_Type " link "DotProduct"}
       @{" CrossProduct &N.Vector_Type,&L.Vector_Type,&Result.Vector_Type " link "CrossProduct"}
       @{" ApplyMatrix &M.Matrix_Type,&V.Vector_Type,&R.Vector_Type " link "ApplyMatrix"}
       @{" FastApply &M.Matrix_Type,&V.Vector_Type,&R.Vector_Type " link "FastApply"}
       @{" ShellSort &array.l,items.l " link "ShellSort"}
       @{" DepthSort &Index.q,&Assoc1.l,&Assoc2.l,Items.l " link "DepthSort"}
       @{" ShellDepthSort &array.l,items.l " link "ShellDepthSort"}
       @{" CInitDraw(Addr Chunky Object.l) " link "CInitDraw"}
       @{" CDrawDone " link "CDrawDone"}
       @{" CCls Colour mask " link "CCls"}
       @{" CLine x1,y1,x2,y2,c " link "CLine"}
       @{" CHLine x1,x2,y,c.b " link "CHLine"}
       @{" CTriangle &pointlist,color.b " link "CTriangle"}
       @{" CTrianglef &pointlist,color.b " link "CTrianglef"}


The Matrix Maths commands use the following three NewTypes...


NEWTYPE .Vector_Type
  x.w
  y.w
  z.w
  s.w
End NEWTYPE

NEWTYPE .Column_Type
  x.q
  y.q
  z.q
  s.q
End NEWTYPE

NEWTYPE .Matrix_Type
  Column.Column_Type[4]
End NEWTYPE

@ENDNODE


@NODE "UPeek"
FUNCTION: UPeek(ad.l)
---------------------

Returns a word equal to the unsigned byte at address 'ad.l'
@ENDNODE


@NODE "QMuls"
FUNCTION: QMULS(v1.q,v2.q)
--------------------------

Fast quick multiply for 020+ processors only
@ENDNODE


@NODE "MakeVector"
MakeVector x.w,y.w,z.w,&V.Vector_Type
-------------------------------------

Erm.. makes a vector ;)
@ENDNODE


@NODE "VectorMagnitude"
FUNCTION: VectorMagnitude(&V.Vector_Type)
-----------------------------------------

Erm.. returns the Vector Magnitude (absolute length) as a quick
@ENDNODE


@NODE "VectorAngle"
FUNCTION: VectorAngle(&N.Vector_Type,&L.Vector_Type)
----------------------------------------------------

Returns the angle between two vectors as a quick
@ENDNODE


@NODE "FastVectorAngle"
FUNCTION: FastVectorAngle(&N.Vector_Type,&L.Vector_Type)
--------------------------------------------------------

As above but for 020+ processors only
@ENDNODE


@NODE "UnitVector"
UnitVector &N.Vector_Type
-------------------------

Erm..
@ENDNODE


@NODE "SubtractVectors"
SubtractVectors &N.Vector_Type,&L.Vector_Type,&Result.Vector_Type
-----------------------------------------------------------------

Erm.. Subtracts two vectors
@ENDNODE


@NODE "DotProduct"
DotProduct &N.Vector_Type,&L.Vector_Type
----------------------------------------

Calculates the dot product of the two matrices
@ENDNODE


@NODE "CrossProduct"
CrossProduct &N.Vector_Type,&L.Vector_Type,&Result.Vector_Type
--------------------------------------------------------------

Erm..
@ENDNODE


@NODE "ApplyMatrix"
ApplyMatrix &M.Matrix_Type,&V.Vector_Type,&R.Vector_Type
--------------------------------------------------------

Does the fancy 3D rotation stuff I guess..
@ENDNODE


@NODE "FastApply"
FastApply &M.Matrix_Type,&V.Vector_Type,&R.Vector_Type
------------------------------------------------------

As above but for 020+ processors only.
@ENDNODE


@NODE "ShellSort"
ShellSort &array.l, items.l
---------------------------

Performs the shell sort algorithm on the given array, for the number
of items specified. Doesn't seem to be any way of specifying sort
direction though...
@ENDNODE


@NODE "DepthSort"
DepthSort &Index.q,&Assoc1.l,&Assoc2.l,Items.l
----------------------------------------------
@ENDNODE


@NODE "ShellDepthSort"
ShellDepthSort &array.l, items.l
--------------------------------

See Nigels' sorting example..
@ENDNODE


@NODE "CInitDraw"
FUNCTION: CInitDraw(AddrChunkyObject.l)
---------------------------------------

Sets up some tables and things for the drawing commands below. Returns
TRUE if successful or FALSE if not.

e.g.

      InitChunky 160,128,2   ;Acid chunky command to Initialise the
                             ;chunky buffer

                             ;If initialisation unsuccessful then quit
                             ;because we won't be able to use any of the
                             ;chunky drawing commands below
                             ;
      If CInitDraw(Addr Chunky(0))=False Then End
@ENDNODE


@NODE "CDrawDone"
CDrawDone
---------

Cleans up after CInitDraw and should be called before exiting your
program.

@ENDNODE


@NODE "CCls"
CCls ColourMask.b
-----------------

Clear the chunky buffer using an optional colour mask.
@ENDNODE


@NODE "CLine"
CLine x1.w,y1.w,x2.w,y2.w,c.b
-----------------------------

Draws a Chunky line from point x1,y1 to point x2,y2 in the chunky buffer
only (i.e. not onto the bitmap). It does not clip so don't draw outside
the chunky buffer limits.
@ENDNODE


@NODE "CHLine"
CHLine x1.w,x2.w,y.w,c.b
------------------------

Draws a horizontal chunky line from x1 to x2 at position y in the chunky
buffer only. It does not clip so don't draw outside the chunky buffer
limits.
@ENDNODE


@NODE "CTriangle"
CTriangle &pointlist,colour.b
-----------------------------

Similar in usage to the Acid Poly command, but draws triangles into the
chunky buffer only. It does not clip so don't draw outside the chunky
buffer limits.

e.g.

      NewType .tri                   ;triangle coordinates newtype
        x1.w:y1.w                    ;
        x2.w:y2.w                    ;
        x3.w:y3.w                    ;
      End Newtype                    ;

      a.tri\x1=50,100,100,50,150,100 ;'a' is now a variable of type .tri
                                     ;so we can now pass 'a' some triangle
                                     ;co-ordinates

      c.b=97                         ;colour

      CTriangle &a,c                 ;draw a triangle in the chunky buffer


@ENDNODE


@NODE "CTrianglef"
CTrianglef &pointlist,color.b
-----------------------------

Similar in usage to the Acid PolyF command (see above), but draws filled
triangles in the chunky buffer only. It does not clip so don't draw outside
the chunky buffer limits.
@ENDNODE
