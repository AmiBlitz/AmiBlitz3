@DataBase "LotanMemExt"
@$VER: LOTANMEMEXTLIB V1.1 (27.01.2007)- Updated by mrodfr.
@Node Main "LotanMemExt"

  @{b}Lotan's Memory Extention 1.0 (24-01-98)@{ub}

    @{" FlipLong  " link FlipLong} Function (Long)
    @{" FlipWord  " link FlipWord} Function (Word)
    @{" FPeekL    " link FPeekL} Function (Long)
    @{" FPeekW    " link FPeekW} Function (Word)
    @{" LoadMem   " link LoadMem} Function (Long)
    @{" SaveMem   " link SaveMem} Function (Long)
    @{" UPeekB    " link UPeekB} Function (Byte)
    @{" UPeekW    " link UPeekW} Function (Word)

  @{b}Author@{ub}

    Olivier Laviale, Doumenge 46230 Montdoumerc, FRANCE

  @{b}Overview@{ub}

    This library is some kind of extention to @{b}LotanMem@{ub} library. It contains  commands
    to peek  unsigned values, flip values, peek @{i}fliped @{ui}values.

    Best of all @{b}LotanMemExt@{ub} is very small : only 120 bytes.

  @{b}See also@{ub}

    @{" BlitzLibs / LotanMem " link LotanMem.guide/Main}
@EndNode

@Node FlipLong "LotanMemExt : FlipLong"

  @{b}@{u}FlipLong@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= FlipLong(Long)

    @{b}Function@{ub} : Returns @{b}Long@{ub} flipped end for end.

               This function is very useful when reading  files  designed  for  Intel
               processors as Words and Longs are reversed. (Like in GIF, AVI...)

    @{b}Example@{ub}  : @{fg highlight}FlipLong@{fg text}($78563412) ; will return $12345678
@EndNode
@Node FlipWord "LotanMemExt : FlipWord"

  @{b}@{u}FlipWord@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.w @{ui}= FlipWord(Word)

    @{b}Function@{ub} : Returns @{b}Word@{ub} flipped end for end.

               This function is very useful when reading  files  designed  for  Intel
               processors as Words and Longs are reversed. (Like in GIF, AVI...)

    @{b}Example@{ub}  : @{fg highlight}FlipWord@{fg text}($3412) ; will return $1234
@EndNode
@Node FPeekL "LotanMemExt : FPeekL"

  @{b}@{u}FPeekL@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= FPeekL(Addr)

    @{b}Function@{ub} : Flips a long read from memory.

               If @{b}Addr@{ub} contains $78563412 @{fg highlight}FPeekW@{fg text} will returns $12345678.

    @{b}Values@{ub}   : @{b}rc@{ub} is the fliped long read from @{b}Addr@{ub}.

               @{b}Addr@{ub} is an absolute memory location.

    @{b}See also@{ub} : @{" FlipLong " link FlipLong}
               @{" FPeekW   " link FPeekW}
@EndNode
@Node FPeekW "LotanMemExt : FPeekW"

  @{b}@{u}FPeekW@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.w @{ui}= FPeekW(Addr)

    @{b}Function@{ub} : Flips a word read from memory.

               If @{b}Addr@{ub} contains $CDAB @{fg highlight}FPeekW@{fg text} will returns $ABCD.

    @{b}Values@{ub}   : @{b}rc@{ub} is the fliped word read from @{b}Addr@{ub}.

               @{b}Addr@{ub} is an absolute memory location.

    @{b}See also@{ub} : @{" FlipWord " link FlipWord}
               @{" FPeekL   " link FPeekL}
@EndNode
@Node LoadMem "LotanMemExt : LoadMem"

  @{b}@{u}LoadMem@{ub}@{uu}

    @{b}Modes@{ub}    : Amiga
    @{b}Syntax@{ub}   : LoadMem FileName,Addr,Len
               @{i}rc.l @{ui}= LoadMem(FileName,Addr,Len)

    @{b}Function@{ub} : Will copy bytes from a file to memory.

    @{b}Values@{ub}   : @{b}FileName@{ub} is a path to the file you want to read.

               @{b}Addr@{ub} is a pointer to an absolute memory location where the bytes  read
               from the file will be copied.

               @{b}Len@{ub} is the number of bytes you want to copy.

               @{b}rc@{ub} is the number of byte read from the file, if @{b}Len@{ub}  is  greater  than
               the  length  of  the  file  the  number  of byte really copied will be
               returned.

    @{b}See also@{ub} : @{" SaveMem " link SaveMem}
@EndNode
@Node SaveMem "LotanMemExt : SaveMem"

  @{b}@{u}SaveMem@{ub}@{uu}

    @{b}Modes@{ub}    : Amiga
    @{b}Syntax@{ub}   : SaveMem FileName,Addr,Len
               @{i}rc.l @{ui}= SaveMem(FileName,Addr,Len)

    @{b}Function@{ub} : Will write bytes from memory to a file.

               I use it for debugging purpose, but you can use it to quicly create  a
               file...  I  made  it  because  I  was  using  @{fg highlight}BSave@{fg text}  of @{b}RIAmosLib@{ub}, but
               @{b}RIAmosLib@{ub} is sooooo big...

    @{b}Values@{ub}   : @{b}FileName@{ub} is a path to the file you want to write.

               @{b}Addr@{ub} is a pointer to an absolute memory location from where bytes will
               be write to the file.

               @{b}Len@{ub} is the number of bytes you want to copy.

               @{b}rc@{ub} is the number of bytes written to the file.

    @{b}See also@{ub} : @{" BSave   " link RIAmosFuncLib.guide/BSave}
               @{" LoadMem " link LoadMem}
@EndNode
@Node UPeekB "LotanMemExt : UPeekB"

  @{b}@{u}UPeekB@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.w @{ui}= UPeekB(Addr)

    @{b}Function@{ub} : Returns an unsigned byte from memory.

    @{b}Values@{ub}   : @{b}Addr@{ub} is an absolute memory location. @{b}rc@{ub} is  the  unsigned  value  read
               from that location.

    @{b}See also@{ub} : @{" UPeekW " link UPeekW}
@EndNode
@Node UPeekW "LotanMemExt : UPeekW"

  @{b}@{u}UPeekW@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= UPeekW(Addr)

    @{b}Function@{ub} : Returns an unsigned word from memory.

    @{b}Values@{ub}   : @{b}Addr@{ub} is an absolute memory location. @{b}rc@{ub} is  the  unsigned  value  read
               from that location.

    @{b}See also@{ub} : @{" UPeekB " link UPeekB}
@EndNode
