@DATABASE SHAPESLIB
@Author Conversion program
@$VER: SHAPESLIB V1.1 (27.01.2007)- Updated by mrodfr.
@NODE OVERVIEW "Overview of SHAPESLIB"

                                  @{b}@{u}Overview@{ub}@{uu}


                          An Acid Software Library

                         Converted to AmigaGuide by

                            Red When Excited Ltd

                 Used with the permission of Acid Software

          Edited, fixed and cleaned by Toby Zuijdveld 27/02/1999.
                       mailto:hotcakes\@abacus.net.au

                  and updated again by Sven Droege on 2020


@ENDNODE OVERVIEW

@NODE LoadShape "SHAPESLIB"

@{fg shine}Statement: LoadShape@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : LoadShape Shape#,Filename$[,Palette#]

LoadShape allows you to load an ILBM IFF file into a shape object. The 
optional Palette# parameter lets you also load the colour information 
contained in the file into a palette object.

The LoadShape command has now been extended to support anim brushes, if 
the file is an anim brush the shapes are loaded into consecutive shapes 
starting with the Shape# provided.


@ENDNODE LoadShape

@NODE MakeCookie "SHAPESLIB"

@{fg shine}Statement: MakeCookie@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : MakeCookie Shape#

MakeCookie allows you to create a 'cookiecut' for an individual shape. 
Cookiecuts are necessary for shapes which are to be used by the various 
blitting commands (for example, QBlit), and are normally made 
automatically whenever a shape is created (for example, using 
LoadShape). However, use of the AutoCookie command may mean you end up 
with a shape which has no cookiecut, but which you wish to blit at some 
stage. You can then use MakeCookie to make a cookiecut for this 
shape.


@ENDNODE MakeCookie

@NODE ShapeWidth "SHAPESLIB"

@{fg shine}Function: ShapeWidth@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ShapeWidth (Shape#)

The ShapeWidth function returns the width, in pixels, of a previously 
created shape object.


@ENDNODE ShapeWidth

@NODE ShapeHeight "SHAPESLIB"

@{fg shine}Function: ShapeHeight@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ShapeHeight (Shape#)

The ShapeHeight function returns the height, in pixels, of a previously 
created shape object.


@ENDNODE ShapeHeight

@NODE Handle "SHAPESLIB"

@{fg shine}Statement: Handle@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Handle Shape#,X,Y

All shapes have an associated 'handle'. A shape's handle refers to an 
offset from the upper left of the shape to be used when calculating a 
shapes position when it gets blitted to a bitmap. This is also often 
referred to as a 'hot spot'.

The X parameter specifies the 'acrosswards' offset for a handle, the Y 
parameter specifies a 'downwards' offset.

Let's have a look at an example of how a handle works. Assume you have 
set a shapes X handle to 5, and it's Y handle to 10. Now let's say we 
blit the shape onto a bitmap at pixel position 160,100. The handle will 
cause the upper left corner of the shape to actually end up at 155,90, 
while the point within the shape at 5,10 will end up at 160,100.

When a shape is created, it's handle is automatically set to 0,0 - it's 
upper left corner.


@ENDNODE Handle

@NODE AutoCookie "SHAPESLIB"

@{fg shine}Statement: AutoCookie@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : AutoCookie On|Off

When shapes objects are used by any of the blitting routines (for 
example, Blit), they usually require the presence of what is known as a 
'cookiecut'. These cookiecuts are used for internal purposes by the 
various blitting commands, and in no way affect the appearance or 
properties of a shape. They do, however, consume some of your valuable 
Chip memory.

When a shape is created (for example, by using LoadShape or GetaShape), 
a cookiecut is automatically made for it. However, this feature may be 
turned off by executing an AutoCookie Off. 
This is a good idea if you are not going to be using shapes for 
blitting - for example, shapes used for gadgets or menus.


@ENDNODE AutoCookie

@NODE CopyShape "SHAPESLIB"

@{fg shine}Statement: CopyShape@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : CopyShape Shape#,Shape#

CopyShape will produce an exact copy of one shape object in another 
shape object. The first Shape# specifies the source shape for the copy, 
the second specifies the destination shape. 

CopyShape is often used when you require two copies of a shape in order 
to manipulate (using, for example, XFlip) one of them.



@ENDNODE CopyShape

@NODE GetaShape "SHAPESLIB"

@{fg shine}Statement: GetaShape@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : GetaShape Shape#,X,Y,Width,Height

GetaShape lets you transfer a rectangular area of the currently used 
bitmap into the specified shape object. X, Y, Width and Height specify 
the area of the bitmap to be picked up and used as a shape.


Known problems:
With some CPU-types (68030+) may occur corrupted shapes when data cache is activated.
In this case as a workaround, you can temporarily disable the data cache before using GetaShape:

@{fg fill}If ExecVersion >= 36 ; CacheControl() is KS 2.0+
   cachebits.l = 0
   cachemask.l = %0001000100000000 ; Data Cache and Data Burst
   oldcache.l = CacheControl_(cachebits, cachemask)
End If@{fg text}

And to restore the cache afterwards:

@{fg fill}If ExecVersion >= 36
  dummy.l = CacheControl_(oldcache, cachemask) ; Restore CPU cache status
End If@{fg text}

The Exec version check can't be skipped, because the call doesn't exist in Kickstart 1.x, 
and so it'll crash (even though the call would have no effect on the 68000).

@ENDNODE GetaShape

@NODE SaveShapes "SHAPESLIB"

@{fg shine}Statement: SaveShapes@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SaveShapes Shape#,Shape#,Filename$

SaveShapes allows you to create a file containing a range of shape 
objects. This file may be later loaded using the LoadShapes 
command.

The range of shapes to be saved is specified by Shape#,Shape#, where 
the first Shape# refers to the lowest shape to be saved and the second 
Shape# the highest.


@ENDNODE SaveShapes

@NODE LoadShapes "SHAPESLIB"

@{fg shine}Statement: LoadShapes@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : LoadShapes Shape#[,Shape#],Filename$

LoadShapes lets you load a 'range' of shapes from disk into a series of 
shape objects. The file specified by Filename$ should have been created 
using the SaveShapes command.

The first Shape# parameter specifies the number of the first shape 
object to be loaded. Further shapes will be loaded into increasingly 
higher shape objects.

If a second Shape# parameter is supplied, then only shapes up to and 
including the second Shape# value will be loaded. If there are not 
enough shapes in the file to fill this range, any excess shapes will 
remain untouched.


@ENDNODE LoadShapes

@NODE Shape "SHAPESLIB"

@{fg shine}Statement: Shape@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Shape - image



@ENDNODE Shape

@NODE MidHandle "SHAPESLIB"

@{fg shine}Statement: MidHandle@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : MidHandle Shape#

MidHandle will cause the handle of the specified shape to be set to 
it's centre.
For example, these two commands achieve exactly the same result:

MidHandle 0

Handle 0,ShapeWidth(0)/2,ShapeHeight(0)/2

For more information on handles, please refer to the Handle 
command.


@ENDNODE MidHandle

@NODE DecodeShapes "SHAPESLIB"

@{fg shine}Statement: DecodeShapes@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DecodeShapes Shape#[,Shape#],MemoryLocation

DecodeShapes, similar to DecodeMedModule ensures the data is in chip 
and then configures the Shape object(s) to point to the data.


@ENDNODE DecodeShapes

@NODE InitShape "SHAPESLIB"

@{fg shine}Statement: InitShape@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : InitShape Shape#,Width,Height,Depth

InitShape has been added to simple create blank shape objects. 
Programmers who make a habit of using ShapesBitMap to render graphics 
to a shape object will appreciate this one for sure.
@ENDNODE InitShape

@NODE MAIN "SHAPESLIB"

.-----------------------------------------------------------------------------.
|                                 @{b}SHAPESLIB@{ub}                                   |
`-----------------------------------------------------------------------------'

                             @{"     Overview     " link OVERVIEW}

                               Command Index                                

               @{" AutoCookie   " link AutoCookie}                @{" CopyShape    " link CopyShape}
               @{" DecodeShapes " link DecodeShapes}                @{" GetaShape    " link GetaShape}
               @{" Handle       " link Handle}                @{" InitShape    " link InitShape}
               @{" LoadShape    " link LoadShape}                @{" LoadShapes   " link LoadShapes}
               @{" MakeCookie   " link MakeCookie}                @{" MidHandle    " link MidHandle}
               @{" SaveShapes   " link SaveShapes}                @{" Shape        " link Shape}
               @{" ShapeHeight  " link ShapeHeight}                @{" ShapeWidth   " link ShapeWidth}
@ENDNODE MAIN

