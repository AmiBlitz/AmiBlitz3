@DATABASE RICommoditiesLib.guide
@$VER: RICOMMODITIESLIB V2.60 (27.01.2007)- Updated by mrodfr.
@NODE MAIN "RICommoditiesLib"

.---------------------------------------------------------------------------.
|                      @{b}RI Commodities Library V2.5@{ub}                          |
`---------------------------------------------------------------------------'

                        ©1996 Red When Excited Ltd

       Undocumented commands added by Toby Zuijdveld 28/02/1999.
                      mailto: hotcakes\@abacus.net.au

			   @{"     Overview     " link OVERVIEW}

                               Command Index

          @{" MakeCommodity   " link MAKECOMMODITY}               @{" CxKill            " link CXKILL}            
          @{" SetHotKey       " link SETHOTKEY}               @{" CxUnique          " link CXUNIQUE}          
          @{" HotKeyHit       " link HOTKEYHIT}               @{" CxChangeList      " link CXCHANGELIST}      
          @{" CommodityEvent  " link COMMODITYEVENT}               @{" ExchangeAppear    " link EXCHANGEAPPEAR}    
          @{" SetCXStatus     " link SETCXSTATUS}               @{" ExchangeDisAppear " link EXCHANGEDISAPPEAR} 
          @{" ExchangeMessage " link EXCHANGEMESSAGE}               @{" ExchangeEnable    " link EXCHANGEENABLE}    
          @{" CxAppear        " link CXAPPEAR}               @{" ExchangeDisable   " link EXCHANGEDISABLE}   
          @{" CxDisAppear     " link CXDISAPPEAR}               @{" ExchangeKill      " link EXCHANGEKILL}      
          @{" CxEnable        " link CXENABLE}               @{" ExchangeUnique    " link EXCHANGEUNIQUE}    
          @{" CxDisable       " link CXDISABLE}               @{" ExchangeChangeList" link EXCHANGECHANGELIST}
          @{" CxListChange   " link CXLISTCHANGE}
          @{"ExchangeListChange" link EXCHANGELISTCHANGE}
                          @{" CommodityMsgPort " link COMMODITYMSGPORT}  

           WaitCommodity   

                              @{" Examples " link EXAMPLES}
@ENDNODE MAIN

@NODE OVERVIEW

                                 @{b}@{u}Overview@{ub}@{uu}

This library allows the easy use of Commodities. It requires Kickstart 2 or
higher.

It allows your program to receive messages from Exchange (for example
show interface, disable, quit etc) and to notify Exchange of the program's
status (GUI available, disabled, enabled etc)

@ENDNODE OVERVIEW

@NODE ExchangeListChange

@{fg shine}Functions : ExchangeListChange@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga

To be used in conjunction with ExchangeMessage, see ExchangeAppear for more 
information on usage.
@ENDNODE ExchangeListChange

@NODE CxListChange

@{fg shine}Functions : CxListChange@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga

This is used in conjunction with ExchangeMessage, see CxAppear for more 
information.
@ENDNODE CxListChange

@NODE MakeCommodity

@{fg shine}Function : MakeCommodity@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : success=MakeCommodity(name$,title$,description$)

  This command attempts to add your Commodity to the list of commodities.
A return value of -1 indicates success, 0 means failure. (not enough memory)

name$ refers to the name of the Commodity and it should be unique. This is
the name that appears when running the Commodity Exchange program.
title$ is the title of your program, e.g. "My Screen Blanker".
description$ is a brief description of your program.

The Commodity Exchange program will then have 'name$' in its list of
Commodities and when a user clicks on your commodity, it will display
the title$ and description$. 

@ENDNODE MakeCommodity

@NODE SetHotKey

@{fg shine}Function : SetHotKey@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : success=SetHotKey(hotkey#,hotkeydescription$)

  This will add a hotkey event to your commodity so that after a hotkey
has been pressed you can find out which one.

e.g.

     success=SetHotKey(0,"lalt lshift a")

@ENDNODE SetHotKey

@NODE HotKeyHit

@{fg shine}Function : HotKeyHit@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : hitkeynum=HotKeyHit

  This will return the number of the hot key which has been hit since the
last 'CommodityEvent' was called, or -1 if no such hotkey has been activated.

@ENDNODE HotKeyHit

@NODE CommodityEvent

@{fg shine}Function : CommodityEvent@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : anyevent=CommodityEvent

This looks to see if either:

  a) A hotkey has been pressed
  b) A message from Exchange has been received

and returns -1 if such an event occurred, 0 if nothing has happened yet.
This should be inside a Repeat-Until loop

e.g.

  Repeat
    VWait
    ev.l=Event
    ce.l=CommodityEvent
    hk.l=HotKeyHit          ; This must be used after CommodityEvent
  Until ev or ce or hk

@ENDNODE CommodityEvent

@NODE SetCXStatus

@{fg shine}Statement : SetCXStatus@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : SetCXStatus on|off

  This sets the status of your Commodity to either Active (on) or Inactive
(off) - this can be seen by running the Commodities Exchange program.

NOTE: WAS SetStatus -> Changed to clarify the fact its a Commodity Lib
      command.

@ENDNODE SetCXStatus

@NODE ExchangeMessage

@{fg shine}Function : ExchangeMessage@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : messnum.l=ExchangeMessage

  This looks to see if the Commodities Exchange has issued you with a message
e.g. Hide Interface, Show Interface. It returns the message ID of the 
incoming message or 0 for no message.

@ENDNODE ExchangeMessage

@NODE CxAppear

@{fg shine}Functions: CxAppear@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : CxAppear

  This is used in conjunction with ExchangeMessage

e.g.

  em.l=ExchangeMessage
  Select em
    Case CxAppear
      Gosub _appear
    Case CxDisAppear
      Gosub _disappear
  End Select

The function merely returns the ID value associated with that particular
Commodities Exchange message.

@ENDNODE CxAppear

@NODE CxDisAppear

@{fg shine}Functions: CxDisAppear@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : CxDisAppear

  This is used in conjunction with ExchangeMessage, see CxAppear for more
information.

@ENDNODE CxDisAppear

@NODE CxEnable

@{fg shine}Functions: CxEnable@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : CxEnable

  This is used in conjunction with ExchangeMessage, see CxAppear for more
information.

@ENDNODE CxEnable

@NODE CxDisable

@{fg shine}Functions: CxDisable@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : CxDisable

  This is used in conjunction with ExchangeMessage, see CxAppear for more
information.

@ENDNODE CxDisable

@NODE CxKill

@{fg shine}Functions: CxKill@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : CxKill 

  This is used in conjunction with ExchangeMessage, see CxAppear for more
information.

@ENDNODE CxKill

@NODE CxChangeList

@{fg shine}Functions: CxChangeList@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : CxChangeList

  This is used in conjunction with ExchangeMessage, see CxAppear for more
information.

@ENDNODE CxChangeList

@NODE CxUnique

@{fg shine}Functions: CxUnique@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : CxUnique

  This is used in conjunction with ExchangeMessage, see CxAppear for more
information.

@ENDNODE CxUnique

@NODE ExchangeAppear

@{fg shine}Functions: ExchangeAppear@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : ExchangeAppear

  This is used in conjunction with ExchangeMessage

e.g.

  em.l=ExchangeMessage
  If em
    If ExchangeAppear then Gosub _appear
    If ExchangeDisAppear then Gosub _dispappear
  EndIf

This is intended as an alternative way of acting upon Exchange Messages.

@ENDNODE ExchangeAppear

@NODE ExchangeDisAppear

@{fg shine}Functions: ExchangeDisAppear@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : ExchangeDisAppear

  This is used in conjunction with ExchangeMessage, see ExchangeAppear for
more information.

@ENDNODE ExchangeDisAppear

@NODE ExchangeEnable

@{fg shine}Functions: ExchangeEnable@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : ExchangeEnable

  This is used in conjunction with ExchangeMessage, see ExchangeAppear for
more information.

@ENDNODE ExchangeEnable

@NODE ExchangeDisable

@{fg shine}Functions: ExchangeDisable@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : ExchangeDisable

  This is used in conjunction with ExchangeMessage, see ExchangeAppear for
more information.

@ENDNODE ExchangeDisable

@NODE ExchangeKill

@{fg shine}Functions: ExchangeKill@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : ExchangeKill

  This is used in conjunction with ExchangeMessage, see ExchangeAppear for
more information.

@ENDNODE ExchangeKill

@NODE ExchangeChangeList

@{fg shine}Functions: ExchangeChangeList@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : ExchangeChangeList

  This is used in conjunction with ExchangeMessage, see ExchangeAppear for
more information.

@ENDNODE ExchangeChangeList

@NODE ExchangeUnique

@{fg shine}Functions: ExchangeUnique@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : ExchangeUnique

  This is used in conjunction with ExchangeMessage, see ExchangeAppear for
more information.

@ENDNODE ExchangeUnique


@NODE CommodityMsgPort

@{fg shine}Function: CommodityMsgPort@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : msgport.l=CommodityMsgPort

  This function returns the address of the Commoditiy's message port. Useful
for doing extra things such as AddWaitEvent PortSigBit(CommodityMsgPort),xxxx

@ENDNODE CommodityMsgPort

@NODE Examples "Example Programs"

                             @{b}@{u}Example Programs@{ub}@{uu}

@{fg shine}EXAMPLE 1@{fg text} - a general Commodities example :

	@{" Load Example 1 " system "run >NIL: BLITZ3:Amiblitz3 Blitz3:Docs/UserLibs/Examples/RICommoditiesLib1.bb"}

@ENDNODE Examples
