@database "SDSTCPLib Guide"
@author "Rob Hutchinson, Dave McMinn, Doug McLaughlin and Rick Hodger"
@$VER: SDSTCP_guide 2.11 (27.01.2007)-Updated by mrodfr-(14.07.2000)

@Node MAIN "Welcome to the TCPLib Docs..."

 @{fg shine}@{u}@{b}SATANIC DREAMS TCP LIBRARY V2.10 - (C)SATANIC DREAMS SOFTWARE 14/07/2000@{ub}@{uu}@{fg text}

 @{b}0.00  @{u}Overview@{uu}@{ub}
  This library is primarily a wrapper for the bsdsocket.library. Seen
  as the bsdsocket.library is damn hard to code with properly, this
  library has been written to help anyone write net applications,
  or even just add online upgrading of their existing programs.

 @{b}1.00  @{u}Introduction@{uu}@{ub}
  1.01  @{" Description             " link 101}.........................WTF is this then?
  1.02  @{" Disclaimer              " link 102}.....................In the event of, blah
  1.03  @{" Requirements            " link 103}...........................What y`al need!
  1.04  @{" Library Number          " link 104}..........................Blitz lib number
  1.05  @{" Authors                 " link 105}...............................That be us!
  1.06  @{" Known Bugs              " link 106}..........................Oh my god, nooo!
  1.07  @{" INSTALLATION!           " link 107}.........................How do I do that?
  1.08  @{" History                 " link 108}.................Whats been going on here?
  1.09  @{" Future                  " link 109}.....................Whats going to go on?
  1.10  @{" Quick Command Index.    " link 110}...................All commands in the lib

 @{b}2.00  @{u}The Examples@{uu}@{ub}
  There are currently 2 examples with the SDSTCPLibrary. These are both
  HTTP based downloaders. One uses MUI and the other is CLI based.
  Please refer to these for usage of this library. Examples are the
  best way to learn. Note that future versions of this library will
  have many more examples.

 @{b}3.00  @{u}Command Reference:@{uu}@{ub}
  3.01 @{" Original BSD functions   " link 301}......The functions from bsdsocket.library
  3.02 @{" High level functions     " link 302}.........The new functions for easy of use

 [(C)opyright Satanic Dreams Software 2000.]
 [Development as of 23-05-2000 is taken over by Rick Hodger, copyright remains intact.]

@EndNode

@Node 101 "Description"

 @{fg shine}@{u}Description of TCPLib@{uu}@{fg text}

 This library was written because of the definate lack of people being able
 to use the bsdsocket.library correctly. And although some functions by
 Paul Burkey are available for Blitz. They do not support events and error
 checking. Which is a major part of any connection routine.
 The worse thing about not supporting events is that you cannot tell when
 the server you are connected to has dropped connection. With the
 SDSTCPLibrary you can.

 The first version of this library only contained the exact functions of
 the bsdsocket.library. That version was released because blitz attempts
 to open the library as soon is your executable is started. And if it fails
 you dont get any warning, causing your application to crash. This version
 has both the original TCP library commands and the new "higher level"
 commands.

 The original commands are prefixed with "BSD" and the new high-level
 commands are prefixed with "TCP". Although they have different suffixes,
 you should take care not to mix them up unless you mean to.

 Have fun.

 @{" Return to main page " link MAIN}
@EndNode

@Node 102 "Disclaimer"

 @{fg shine}@{u}Disclaimer@{uu}@{fg text}

 This software is provided as-is, without warranty of any kind,
 either expressed or implied. In no event will the authors be
 liable for direct, indirect, incidental or consequential damages
 or data loss resulting from the use or application of this software.
 The entire risk as to the results and performance of this software
 is assumed by the user!

@{" Return to main page " link MAIN}
@EndNode

@Node 103 "Requirements"

 @{fg shine}@{u}Requirements@{uu}@{fg text}

 TCPLib Requires:
   BlitzBasic2.1+    (Well duh :))

 And thats it really.

 @{" Return to main page " link MAIN}
@EndNode

@Node 104 "Library Number"

 @{fg shine}@{u}Library Number@{uu}@{fg text}

 The library number assigned to this library is: 71.
 This number we believe is currently free, but please
 feel free to change it if yours is not, with the ChangeLibNum
 or cln programs.

 @{" Return to main page " link MAIN}
@EndNode

@Node 105 "Authors"

 @{fg shine}@{u}Authors@{uu}@{fg text}

 Well, thats us:

   Rob Hutchinson: rob\@satanicdreams.com
   David McMinn:   dave\@satanicdreams.com
   Rick Hodger:    rick\@simpleftp.co.uk

 With some help from Doug McLaughlin, (thanks Doug).

 @{" Return to main page " link MAIN}
@EndNode

@Node 106 "Known Bugs"

 THIS LIBRARY IS CURRENTLY IN BETA STAGE (WELL SORT OF), AND
 HAS NOT BEEN FULLY TESTED, IF YOU FIND ANY BUGS PLEASE
 EMAIL A BUG REPORT TO: rick\@simpleftp.co.uk.

 @{" Return to main page " link MAIN}
@EndNode

@Node 107 "Installation."

 @{fg shine}@{u}How to install:@{uu}@{fg text}

  - Copy OtherLibs/SDSTCPSocketLib.obj to BlitzLibs:OtherLibs/
  - Copy BlitzLibs/SDSTCP.RES to BlitzLibs:
  - Copy examples to somewhere nice on your HD.
  - Use MDL, DefLibMan or LibraryManager to recompile deflibs.
  - All done!

 @{" Return to main page " link MAIN}
@EndNode

@Node 108 "History"

 @{fg shine}@{u}History of TCPLib@{uu}@{fg text}

 Version 1.0 History:
   First Version - BSD Socket direct functions only.

 Version 2.0 History:
   Loads of new high-level commands added.

 Version 2.1 History:
   Extra high level commands to do with IP address/domain name
   information and conversion.

 @{i}Rick's takes over@{ui}

 Version 2.1 History:
   After much fiddling, added documentation for the last few
   commands that Rob had created, and added "TCPIsOnline"
   and "TCPSetMiamiIFace" commands.

   Should now work properly on (Win)UAE - 20th June 2002

 @{" Return to main page " link MAIN}
@Endnode

@Node 109 "Future"

 @{fg shine}@{u}Future of TCPLib@{uu}@{fg text}

 There are many plans for the future of this library. But the main
 2 things I wish to get added are:

  - More examples.
  - Better listen()/bind()/accept() support, for waiting for a
    connection, the current high-level commands only extend to
    connecting, not actually waiting for a connection on a socket.

 @{" Return to main page " link MAIN}
@EndNode



@Node 110 "Quick Command Index"

 @{fg shine}@{u}Quick Command Index@{uu}@{fg text}

 LOW-LEVEL: (47 Commands)
  BSDSocket(Domain,Type,Protocol)
  BSDBind([s]ock,*Name,NameLen)
  BSDListen([s]ock,BackLog)
  BSDAccept([s]ock,*Addr,*AddrLen)
  BSDConnect([s]ock,*Name,*NameLen)
  BSDSendTo([s]ock,*Buf,Len,Flags,*To,ToLen)
  BSDSend([s]ock,*Buf,Len,Flags)
  BSDRecvFrom([s]ock,*Buf,Len,Flags,*Addr,*AddrLen)
  BSDRecv([s]ock,*Buf,Len,Flags)
  BSDShutDown([s]ock,How)
  BSDSetSockOpt([s]ock,Level,OptName,*OptVal,OptLen)
  BSDGetSockOpt([s]ock,Level,OptName,*OptVal,*OptLen)
  BSDGetSockName([s]ock,*Name,*NameLen)
  BSDGetPeerName([s]ock,*Name,*NameLen)
  BSDIoctlSocket([s]ock,Req,*ArgP)
  BSDCloseSocket([s]ock)
  BSDWaitSelect(nFDS,*ReadFDS,*WriteFDS,*ExceptFDS,*TimeOut,*Signal)
  BSDSetSocketSignals(IntMask,IOMask,UrgentMask)
  BSDGetDTableSize
  BSDObtainSocket(ID,Domain,Type,Protocol)
  BSDReleaseSocket([s]ock,ID)
  BSDReleaseCopyOfSocket([s]ock,ID)
  BSDErrNo
  BSDSetErrnoPtr(*ErrNoP,Size)
  BSDINet_NToA(IP)
  BSDINet_Addr(*CP)
  BSDINet_LnaOf(,In)
  BSDINet_NetOf(In)
  BSDINet_MakeAddr(Net,Host)
  BSDINet_Network(*CP)
  BSDGetHostByAddr(*Addr,Len,Type)
  BSDGetNetByName(*Name)
  BSDGetNetByAddr(Net,Type)
  BSDGetServByName(*Name,*Proto)
  BSDGetServByPort(Port,*Proto)
  BSDGetProtoByName(*Name)
  BSDGetProtoByNumber(ID)
  BSDVSysLog(Pri,*Msg,Args)
  BSDDup2Socket(Olds,News)
  BSDSendMsg([s]ock,*Msg,Flags)
  BSDRecvMsg([s]ock,*Msg,Flags)
  BSDGetHostName(*Name,NameLen)
  BSDGetHostID
  BSDSocketBaseTagList(*Tags)
  BSDGetSocketEvents(*EventSP)
  BSDGetHostByName(*Name)

 HIGH-LEVEL: (46 Commands)
  TCPOpen              ; NOTE - MUST CALL FIRST...
  TCPClose             ;
  TCPAvail             ;

  TCPSock
  TCPFillMemB *Address,FillByte,Length
  TCPFillMemL *Address,FillLong,Length
  TCPFDSet SockBit,*FDAddress
  TCPFDClear SockBit,*FDAddress
  TCPCreateSocket(TCPSock#,BlockingOnOff,SocketRW,TSecs,TMicros)
  TCPRemoveSocket(TCPSock#)
  TCPFDIsSet(SockBit,*FDAddress)
  TCPFDWriteLoc
  TCPFDReadLoc
  TCPConnectSocket(TCPSock#,Host$,Port)
  TCPEvent
  TCPShutSocket(TCPSock#,How)
  TCPFDIntHighLoc
  TCPHighest
  TCPRescanHighest
  TCPSetStates(TCPSock#,States)
  TCPWrite TCPSock#,*DataAddress,DataLength
  TCPPrint TCPSock#,Data$
  TCPNPrint TCPSock#,Data$
  TCPSetReceiveBuffer(Size)
  TCPReadSocket$(TCPSock#)
  TCPIsReadEvent(TCPSock#)
  TCPIsWriteEvent(TCPSock#)
  TCPFreeReceiveBuffer
  TCPFDTempWriteLoc
  TCPFDTempReadLoc
  TCPLastReadSize
  TCPSocketNumber(TCPSock#)
  TCPSocketError(TCPSock#)
  TCPErrorString$
  TCPListenSocket(TCPSock#,QueueBacklog)

  === New to v2.1 ===
  -------------------
  TCPGetOwnHostName$(MaxLength)
  TCPGetIPStr$(IPAddress.l)
  TCPGetIPClass(IPAddress.l,Class)
  TCPExamineHostEntry(Host$)
  TCPExamineAddrEntry(IPAddress.l)
  TCPCanonicalName$
  TCPSlapSocketIn(Socket,TCPSock#)
  TCPPullSocketOut(TCPSock#)
  TCPGetOwnHostIP
  TCPIsOnline
  TCPSetMiamiIFace(interface)

 And because you're using Blitz, you use one, you use 'em all ;)

 @{" Return to main page " link MAIN}
@EndNode

@Node 301 "BSDSocket Commands"

 @{fg shine}@{u}ORIGINAL BSDSOCKET COMMAND WRAPPER@{uu}@{fg text}

  All these commands are documented in the bsdsocket library guide
  which is included in this archive.

  BSDSocket - socket()
  BSDBind - bind()
  BSDListen - listen()
  BSDAccept - accept()
  BSDConnect - connect()
  BSDSendTo - sendto()
  BSDSend - send()
  BSDRecvFrom - sendfrom()
  BSDRecv - recv()
  BSDShutDown - shutdown()
  BSDSetSockOpt - setsockopt()
  BSDGetSockOpt - getsockopt()
  BSDGetSockName - getsockname()
  BSDGetPeerName - getpeername()
  BSDIoctlSocket - Ioctlsocket()
  BSDCloseSocket - closesocket()
  BSDWaitSelect - waitselect()
  BSDSetSocketSignals - setsocketsignals()
  BSDGetDTableSize - getdatablesize()
  BSDObtainSocket - obtainsocket()
  BSDReleaseSocket - releasesocket()
  BSDReleaseCopyOfSocket - releasecopyofsocket()
  BSDErrNo - errno()
  BSDSetErrnoPtr - seterrnoprt()
  BSDINet_NToA - INet_NToA()
  BSDINet_Addr - INet_Addr()
  BSDINet_LnaOf - INet_LnaOf()
  BSDINet_NetOf - INet_NetOf()
  BSDINet_MakeAddr - INet_MakeAddr()
  BSDINet_Network - INet_Network()
  BSDGetHostByAddr - gethostbyaddr()
  BSDGetNetByName - getnetbyname()
  BSDGetNetByAddr - getnetbyaddr()
  BSDGetServByName - getservbyname()
  BSDGetServByPort - getservbyport()
  BSDGetProtoByName - getprotobyname()
  BSDGetProtoByNumber - getprotobynumber()
  BSDVSysLog - vsyslog()
  BSDDup2Socket - dup2socket()
  BSDSendMsg - sendmsg()
  BSDRecvMsg - recvmsg()
  BSDGetHostName - gethostname()
  BSDGetHostID - gethistid()
  BSDSocketBaseTagList - socketbasetaglist()
  BSDGetSocketEvents - getsocketevents()
  BSDGetHostByName - gethostbyname()

@endnode


@Node 400 "TCPSock"

  @{fg shine}NAME:@{fg text}
    TCPSock

  @{fg shine}SYNOPSIS:@{fg text}
    TCPSock

  @{fg shine}FUNCTION:@{fg text}
    Only really can be used to get the socket number by doing:
    Peek.l(Addr TCPSock(<socknum>))
    But you may aswell use TCPSocketNumber() for this.

  @{fg shine}INPUTS:@{fg text}
    TCPSock# - Blitz socket object

@EndNode

@Node 401 "TCPFillMemB"

  @{fg shine}NAME:@{fg text}
    TCPFillMemB

  @{fg shine}SYNOPSIS:@{fg text}
    TCPFillMemB *Address,FillByte,Length

  @{fg shine}FUNCTION:@{fg text}
    Simple function to write the specified byte to the specifed
    address upto the specified length.

  @{fg shine}INPUTS:@{fg text}
    *Address - start address
    FillByte - byte to fill with
    Length   - legth to fill for

@EndNode

@Node 402 "TCPFillMemL"

  @{fg shine}NAME:@{fg text}
    TCPFillMemL

  @{fg shine}SYNOPSIS:@{fg text}
    TCPFillMemL *Address,FillLong,Length

  @{fg shine}FUNCTION:@{fg text}
    Simple function to write the specified long to the specifed
    address upto the specified length.

    This is much faster than TCPFillMemB.

  @{fg shine}INPUTS:@{fg text}
    *Address - start address
    FillLong - long to fill with
    Length   - legth to fill for

@EndNode


@Node 403 "TCPFDSet"

  @{fg shine}NAME:@{fg text}
    TCPFDSet

  @{fg shine}SYNOPSIS:@{fg text}
    TCPFDSet SockBit,*FDAddress

  @{fg shine}FUNCTION:@{fg text}
    Set a bit from 1-64 in the FD address which is a 64 bit
    descriptor. These are used for write/read events.

  @{fg shine}INPUTS:@{fg text}
    SockBit    - Bit from 1-65
    *FDAddress - The address of the descriptor

@EndNode

@Node 404 "TCPFDClear"

  @{fg shine}NAME:@{fg text}
    TCPFDClear

  @{fg shine}SYNOPSIS:@{fg text}
    TCPFDClear SockBit,*FDAddress

  @{fg shine}FUNCTION:@{fg text}
    Clear a bit from 1-64 in the FD address which is a 64 bit
    descriptor. These are used for write/read events.

  @{fg shine}INPUTS:@{fg text}
    SockBit    - Bit from 1-65
    *FDAddress - The address of the descriptor

@EndNode

@Node 405 "TCPCreateSocket"

  @{fg shine}NAME:@{fg text}
    TCPCreateSocket

  @{fg shine}SYNOPSIS:@{fg text}
    succ.l=TCPCreateSocket(TCPSock#,BlockingOnOff,SocketRW,TSecs,TMicros)

  @{fg shine}FUNCTION:@{fg text}
    This function will create you a socket object, ready for use.
    If this function does not fail, then you can use it as you please.

    SocketRW sets whether your socket should be initialised allowing
    read events, write events or both. OR them togther. IE,
    most sockets will be initialised: #TCP_SOCK_Read|#TCP_SOCK_Write

  @{fg shine}INPUTS:@{fg text}
    TCPSock#      - Blitz socket object
    BlockingOnOff - Set to On or Off for blocking sockets.
                    Non-blocking sockets should really always be used.
                    They allow your program to continue executing even
                    when your socket is being connected.
    SocketRW      - #TCP_SOCK_Read and/or #TCP_SOCK_Write
    TSecs         - Timeout after this many seconds.
    TMicros       - .. and this many microseconds.

  @{fg shine}RETURNS:@{fg text}
    #TCP_SOCK_Ok          - If everything went well.
    #TCP_SOCK_FailTimeout - Failed to set timeout value for some reason.
                            Socket unusable after this.
    #TCP_SOCK_FailAsync   - Failed to set async/non-blocking (only if
                            BlockingOnOff=Off).
                            Failed and unusable after this.
    #TCP_SOCK_FailNoSock  - No Socket. Failed and unusable after this.

@EndNode

@Node 406 "TCPRemoveSocket"

  @{fg shine}NAME:@{fg text}
    TCPRemoveSocket

  @{fg shine}SYNOPSIS:@{fg text}
    succ.l=TCPRemoveSocket(TCPSock#)

  @{fg shine}FUNCTION:@{fg text}
    Completely removes a socket from the system, all event bits
    are reset and connections terminated. Note that you do not
    have to disconnect to use this command.

  @{fg shine}INPUTS:@{fg text}
    TCPSock# - Blitz socket object

  @{fg shine}RETURNS:@{fg text}
    0 if successful, else -1. If -1 then use TCPSocketError and
    TCPErrorString$ to show the error.

@EndNode

@Node 407 "TCPFDIsSet"

  @{fg shine}NAME:@{fg text}
    TCPFDIsSet

  @{fg shine}SYNOPSIS:@{fg text}
    is.l=TCPFDIsSet(SockBit,*FDAddress)

  @{fg shine}FUNCTION:@{fg text}
    This function is used to see if a single bit is currently set
    in a 64bit event descriptor.

  @{fg shine}INPUTS:@{fg text}
    SockBit    - A bit number from 1-64 to test.
    *FDAddress - Address of descriptor.

  @{fg shine}RETURNS:@{fg text}
    0 if NOT set. Anything other than 0 and it is set.

@EndNode

@Node 408 "TCPFDWriteLoc"

  @{fg shine}NAME:@{fg text}
    TCPFDWriteLoc

  @{fg shine}SYNOPSIS:@{fg text}
    *addr=TCPFDWriteLoc

  @{fg shine}FUNCTION:@{fg text}
    Returns the address of the internal write event descriptor.

  @{fg shine}RETURNS:@{fg text}
    Pointer to descriptor.

@EndNode

@Node 409 "TCPFDReadLoc"

  @{fg shine}NAME:@{fg text}
    TCPFDReadLoc

  @{fg shine}SYNOPSIS:@{fg text}
    *addr=TCPFDReadLoc

  @{fg shine}FUNCTION:@{fg text}
    Returns the address of the internal read event descriptor.

  @{fg shine}RETURNS:@{fg text}
    Pointer to descriptor.

@EndNode

@Node 410 "TCPConnectSocket"

  @{fg shine}NAME:@{fg text}
    TCPConnectSocket

  @{fg shine}SYNOPSIS:@{fg text}
    succ.l=TCPConnectSocket(TCPSock#,Host$,Port)

  @{fg shine}FUNCTION:@{fg text}
    Make a connection to another entity on a socket. This function
    will only lock up the program if the socket is blocking while
    a connection is being made. And will only timeout after the set
    time. (See TCPCreateSocket).

    If the socket is non-blocking then this command will only lock
    when looking up the specified host name (this does not take
    very long usually). Then the socket will be in "Connecting" mode,
    where it is actually trying to connect. When a connection is made
    you will know because you will get either a read or a write event
    (make sure you set those), once you get your first read or
    write event, you are connected.

    Make sure you remove the socket if this command fails.

  @{fg shine}INPUTS:@{fg text}
    TCPSock# - Blitz socket object
    Host$    - A host to connect to, EG: "www.satanicdreams.com"
    Port     - A word, contaning the port number to connect to. EG: 80

  @{fg shine}RETURNS:@{fg text}
    #TCP_SOCK_CONNECTING      - A connection made (blocking) or is
                                attempting to be made (non-blocking).
    #TCP_CONN_FailHostResolve - Failed to resolve the hostname you
                                specified.
    #TCP_CONN_FailNoConnect   - Failed to connect.
    #TCP_CONN_FailError       - Some fatal error or another.

    Note: Use TCPSocketError and TCPErrorString$ to show the error.

@EndNode

@Node 411 "TCPEvent"

  @{fg shine}NAME:@{fg text}
    TCPEvent

  @{fg shine}SYNOPSIS:@{fg text}
    maxsockevent.l=TCPEvent

  @{fg shine}FUNCTION:@{fg text}
    The command will check for read/write events on your socket.
    It is important to note that this command does not return the
    socket number that caused an event, rather the highest number
    socket that caused an event.

  @{fg shine}RETURNS:@{fg text}
    Highest socket that returned an event. You should check all
    sockets from 0 to this socket number-1 for events with
    TCPIsReadEvent() and TCPIsWriteEvent(). As Multiple sockets
    may have caused an event.

    Note that non-blocking sockets will almost ALWAYS cause write
    events, thats why it is important to switch the socket to just
    read events after a connection is established.

@EndNode

@Node 412 "TCPShutSocket"

  @{fg shine}NAME:@{fg text}
    TCPShutSocket

  @{fg shine}SYNOPSIS:@{fg text}
    TCPShutSocket(TCPSock#,How)

  @{fg shine}FUNCTION:@{fg text}
    This will shut part or a whole socket down.

  @{fg shine}INPUTS:@{fg text}
    TCPSock# - Blitz socket object
    How      - #TCP_DISC_HOW_NoReceives or
               #TCP_DISC_HOW_NoSends or
               #TCP_DISC_HOW_ShutDown
               I think this is quite straight forward :).

  @{fg shine}RETURNS:@{fg text}
    A 0 is returned if the call succeeds, -1 if it fails.

@EndNode

@Node 413 "TCPFDIntHighLoc"

  @{fg shine}NAME:@{fg text}
    TCPFDIntHighLoc

  @{fg shine}SYNOPSIS:@{fg text}
    *highest=TCPFDIntHighLoc

  @{fg shine}FUNCTION:@{fg text}
    Used to get the highest socket descriptor.
    Only really of use for internal testing.

  @{fg shine}RETURNS:@{fg text}
    Returns the internal highest socket descriptor.

@EndNode

@Node 414 "TCPHighest"

  @{fg shine}NAME:@{fg text}
    TCPHighest

  @{fg shine}SYNOPSIS:@{fg text}
    high.l=TCPHighest

  @{fg shine}FUNCTION:@{fg text}
    Get the highest number socket currently created.
    Only really of use for internal testing.

  @{fg shine}RETURNS:@{fg text}
    Highest socket number.

@EndNode

@Node 415 "TCPRescanHighest"

  @{fg shine}NAME:@{fg text}
    TCPRescanHighest

  @{fg shine}SYNOPSIS:@{fg text}
    TCPRescanHighest

  @{fg shine}FUNCTION:@{fg text}
    Rescan the list of opened sockets for the highest number,
    internal use only really.

@EndNode

@Node 416 "TCPSetStates"

  @{fg shine}NAME:@{fg text}
    TCPSetStates

  @{fg shine}SYNOPSIS:@{fg text}
    TCPSetStates TCPSock#,States

  @{fg shine}FUNCTION:@{fg text}
    Set the states of a currently created socket. (Do NOT use
    on dead or socket objects that have not been created.

    Setting #TCP_SOCK_Read will allow the socket to cause read events,
    setting #TCP_SOCK_Write will allow the socket to cause write events.

    For example: #TCP_SOCK_Read would allow only read events. While,
    #TCP_SOCK_Read|#TCP_SOCK_Write will allow both read and write events.

    On non-blocking sockets, it is a good idea to switch off write events
    after a connection is made. This will allow you to detect a server
    disconnection.

  @{fg shine}INPUTS:@{fg text}
    TCPSock# - Blitz socket object
    States   - #TCP_SOCK_Read, #TCP_SOCK_Write or #TCP_SOCK_Read|#TCP_SOCK_Write.

  @{fg shine}RETURNS:@{fg text}
    -!

@EndNode

@Node 417 "TCPWrite"

  @{fg shine}NAME:@{fg text}
    TCPWrite

  @{fg shine}SYNOPSIS:@{fg text}
    TCPWrite TCPSock#,*DataAddress,DataLength

  @{fg shine}FUNCTION:@{fg text}
    Write a section of memory to a socket.

  @{fg shine}INPUTS:@{fg text}
    TCPSock#     - Blitz socket object
    *DataAddress - The address of data to write.
    DataLength   - The length of data to write.

@EndNode


@Node 418 "TCPPrint"

  @{fg shine}NAME:@{fg text}
    TCPPrint

  @{fg shine}SYNOPSIS:@{fg text}
    TCPPrint TCPSock#,Data$

  @{fg shine}FUNCTION:@{fg text}
    Print a string to a socket.

  @{fg shine}INPUTS:@{fg text}
    TCPSock# - Blitz socket object.
    Data$    - The string to print.

@EndNode

@Node 419 "TCPNPrint"

  @{fg shine}NAME:@{fg text}
    TCPNPrint

  @{fg shine}SYNOPSIS:@{fg text}
    TCPNPrint TCPSock#,Data$

  @{fg shine}FUNCTION:@{fg text}
    New line print to a socket, this is the same as TCPPrint
    except that a character 10 is also sent to the socket.
    Note that this command uses 2 calls to send to save having
    to allocate multiple space for your data string, and for this
    reason may not work correctly in some situations?!?!? I dont
    know.

  @{fg shine}INPUTS:@{fg text}
    TCPSock# - Blitz socket object
    Data$    - The string to print.

@EndNode


@Node 420 "TCPSetReceiveBuffer"

  @{fg shine}NAME:@{fg text}
    TCPSetReceiveBuffer

  @{fg shine}SYNOPSIS:@{fg text}
    succ.l=TCPSetReceiveBuffer(Size)

  @{fg shine}FUNCTION:@{fg text}
    This command allows you set a receive buffer for your data.
    A buffer of 2048 is allocated on library initialisation. This
    command will open/reopen memory at the given size. This MAY
    allow you to read more quickly on extremely fast connections.

  @{fg shine}INPUTS:@{fg text}
    Size - Amount of bytes to open as buffer.

  @{fg shine}RETURNS:@{fg text}
    Location of memory or 0 for fail.

@EndNode

@Node 421 "TCPReadSocket$"

  @{fg shine}NAME:@{fg text}
    TCPReadSocket$

  @{fg shine}SYNOPSIS:@{fg text}
    reed$=TCPReadSocket$(TCPSock#)

  @{fg shine}FUNCTION:@{fg text}
    Read a string of data from the socket, you should only call this
    command if you get an event and TCPIsReadEvent().

    If this command returns an empty string and you got a read event
    then the server has disconnected.

  @{fg shine}INPUTS:@{fg text}
    TCPSock# - Blitz socket object

  @{fg shine}RETURNS:@{fg text}
    Stream of data as string.

@EndNode


@Node 422 "TCPIsReadEvent"

  @{fg shine}NAME:@{fg text}
    TCPIsReadEvent

  @{fg shine}SYNOPSIS:@{fg text}
    isevent.l=TCPIsReadEvent(TCPSock#)

  @{fg shine}FUNCTION:@{fg text}
    Check see if a read event has occured on a socket. Use this after
    an event in the range of your socket has occured with TCPEvent().

    If you get a read event with this command you can then read the
    waiting data with TCPReadSocket$()

  @{fg shine}INPUTS:@{fg text}
    TCPSock# - Blitz socket object

  @{fg shine}RETURNS:@{fg text}
    0 for fail or anything else for an event.

@EndNode

@Node 423 "TCPIsWriteEvent"

  @{fg shine}NAME:@{fg text}
    TCPIsWriteEvent

  @{fg shine}SYNOPSIS:@{fg text}
    isevent.l=TCPIsWriteEvent(TCPSock#)

  @{fg shine}FUNCTION:@{fg text}
    Check see if a write event has occured on your socket. This means
    that you are ALLOWED to write to the socket. You can always write
    to non-blocking sockets (providing they haven`t failed or become
    erronous for some reason (you should close them then)).

  @{fg shine}INPUTS:@{fg text}
    TCPSock# - Blitz socket object

  @{fg shine}RETURNS:@{fg text}
    0 for fail or anything else for an event.

@EndNode

@Node 424 "TCPFreeReceiveBuffer"

  @{fg shine}NAME:@{fg text}
    TCPFreeReceiveBuffer

  @{fg shine}SYNOPSIS:@{fg text}
    TCPFreeReceiveBuffer

  @{fg shine}FUNCTION:@{fg text}
    TCPFreeReceiveBuffer will free the receive buffer used to get data
    from your socket. You should only use this if you do not need to
    ever receive data or you are going to reopen but need the memory
    (humm). TCPSetReceiveBuffer will automatically free a buffer
    before reopening it.

  @{fg shine}INPUTS:@{fg text}
    TCPSock# - Blitz socket object

@EndNode


@Node 425 "TCPFDTempWriteLoc"

  @{fg shine}NAME:@{fg text}
    TCPFDTempWriteLoc

  @{fg shine}SYNOPSIS:@{fg text}
    TCPFDTempWriteLoc

  @{fg shine}FUNCTION:@{fg text}
    Get the address of the tempory write event descriptor.

  @{fg shine}RETURNS:@{fg text}
    Address of descriptor.

@EndNode

@Node 426 "TCPFDTempReadLoc"

  @{fg shine}NAME:@{fg text}
    TCPFDTempReadLoc

  @{fg shine}SYNOPSIS:@{fg text}
    TCPFDTempReadLoc

  @{fg shine}FUNCTION:@{fg text}
    Get the address of the tempory read event descriptor.

  @{fg shine}RETURNS:@{fg text}
    Address of descriptor.

@EndNode

@Node 427 "TCPLastReadSize"

  @{fg shine}NAME:@{fg text}
    TCPLastReadSize

  @{fg shine}SYNOPSIS:@{fg text}
    size.l=TCPLastReadSize

  @{fg shine}FUNCTION:@{fg text}
    Get the size of the last read data with TCPReadSocket$().
    Same as Len(TCPReadSocket$(x))

  @{fg shine}RETURNS:@{fg text}
    Size of last read data.

@EndNode

@Node 428 "TCPSocketNumber"

  @{fg shine}NAME:@{fg text}
    TCPSocketNumber

  @{fg shine}SYNOPSIS:@{fg text}
    sock.l=TCPSocketNumber(TCPSock#)

  @{fg shine}FUNCTION:@{fg text}
    Return the associated socket number from the socket object.
    This is the same as doing:

    Peek.l(Addr TCPSock(x))

    Note that each application may have upto and ONLY upto 64 sockets.

  @{fg shine}INPUTS:@{fg text}
    TCPSock# - Blitz socket object

  @{fg shine}RETURNS:@{fg text}
    The associated socket number from the socket object.

@EndNode

@Node 429 "TCPSocketError"

  @{fg shine}NAME:@{fg text}
    TCPSocketError

  @{fg shine}SYNOPSIS:@{fg text}
    error.l=TCPSocketError(TCPSock#)

  @{fg shine}FUNCTION:@{fg text}
    Check see if an error has occured on the specified socket. This
    should be done after all read/write events to check for failures,
    etc..

  @{fg shine}INPUTS:@{fg text}
    TCPSock# - Blitz socket object

  @{fg shine}RETURNS:@{fg text}
    0 for no error. Or an error number. For example, 61: Connection refused.

@EndNode

  TCPListenSocket(TCPSock#,QueueBacklog)

@Node 430 "TCPErrorString$"

  @{fg shine}NAME:@{fg text}
    TCPErrorString$

  @{fg shine}SYNOPSIS:@{fg text}
    error$=TCPErrorString$

  @{fg shine}FUNCTION:@{fg text}
    If an error has occured with TCPSocketError(), then use this command
    to get the associated string error. For example, the error 61
    would return the string "Connection refused".

    Should be used straight after the error has occured.

  @{fg shine}RETURNS:@{fg text}
    Error string.

@EndNode

@Node 431 "TCPListenSocket"

  @{fg shine}NAME:@{fg text}
    TCPListenSocket

  @{fg shine}SYNOPSIS:@{fg text}
    succ.l=TCPListenSocket(TCPSock#,QueueBacklog)

  @{fg shine}FUNCTION:@{fg text}
    Listen to a socket for a connection,
    More coming on this in future releases.

  @{fg shine}INPUTS:@{fg text}
    TCPSock#     - Blitz socket object.
    QueueBacklog - How many connections to queue.

  @{fg shine}RETURNS:@{fg text}
    Fail/Success.

@EndNode


@Node 501 "TCPOpen"

  @{fg shine}NAME:@{fg text}
    TCPOpen

  @{fg shine}SYNOPSIS:@{fg text}
    *socklibbase=TCPOpen

  @{fg shine}FUNCTION:@{fg text}
    This command is used to attempt to open the bsdsocket.library.
    It may easily fail. The TCP/IP stack mounts this library only
    when running. So if it fails it will just mean there is not
    TCP/IP stack and some error message should be displayed.

    Note that this command MUST, I REPEAT, MUST!! be called before
    ANY other commands are called. Your application *WILL* CRASH
    if you have not get a successful result from this command
    first. (Note that this includes the BSD#? commands, they need
    this command to be called first too).

  @{fg shine}RETURNS:@{fg text}
    0 for failure, otherwise the location in memory the
    bsdsocket.library is situated.

@EndNode

@Node 502 "TCPClose"

  @{fg shine}NAME:@{fg text}
    TCPClose

  @{fg shine}SYNOPSIS:@{fg text}
    TCPClose

  @{fg shine}FUNCTION:@{fg text}
    Close the bsdsocket.library. You should NOT make any calls to
    any commands after you have called this command. (At least
    not until another successful call to TCPOpen is made anyway).

@EndNode

@Node 503 "TCPAvail"

  @{fg shine}NAME:@{fg text}
    TCPAvail

  @{fg shine}SYNOPSIS:@{fg text}
    *socklibbase=TCPAvail

  @{fg shine}FUNCTION:@{fg text}
    Check see if the bsdsocket.library is currenly open for you
    application. Returns address of library.

  @{fg shine}RETURNS:@{fg text}
    Address of library.

@EndNode

@Node 432 "TCPGetOwnHostName$"

  @{fg shine}NAME:@{fg text}
    TCPGetOwnHostName$

  @{fg shine}SYNOPSIS:@{fg text}
    hostname$=TCPGetOwnHostName$(MaxLength)

  @{fg shine}FUNCTION:@{fg text}
    Finds out your computer's name, should you need to send it to
    a server for any reason.

  @{fg shine}INPUTS:@{fg text}
    MaxLength    - Maximum size of the string you want returned.
                   The string will be cropped if it exceeds this.

  @{fg shine}RETURNS:@{fg text}
    Your computer's name, or an IP address if no name is associated.

@EndNode

@Node 433 "TCPGetIPStr$"

  @{fg shine}NAME:@{fg text}
    TCPGetIPStr$

  @{fg shine}SYNOPSIS:@{fg text}
    IPAddress$=TCPGetIPStr$(IPAddress.l)

  @{fg shine}FUNCTION:@{fg text}
    Converts an IP address stored in a LONG variable, to a dot (.)
    notated string (eg. from 2130706433 to 127.0.0.1)

  @{fg shine}INPUTS:@{fg text}
    IPAddress.l  - The IP address in a LONG variable.

  @{fg shine}RETURNS:@{fg text}
    A string with your IP address in a dot (.) notation.

@EndNode

@Node 434 "TCPGetIPClass"

  Unknown

@EndNode

@Node 435 "TCPExamineHostEntry"

  @{fg shine}NAME:@{fg text}
    TCPExamineHostEntry

  @{fg shine}SYNOPSIS:@{fg text}
    IPAddress.l=TCPExamineHostEntry(hostname$)

  @{fg shine}FUNCTION:@{fg text}
    Allows you to "examine" a domain name, and retrive information
    about that domain name.  It also returns that domain name's
    IP address in longword form.

  @{fg shine}INPUTS:@{fg text}
    hostname$  = The domain name you want to query (eg. "www.aminet.net")

  @{fg shine}RETURNS:@{fg text}
    IPAddress.l = IP Address in longword form.

@EndNode

@Node 436 "TCPHostIPStr$"

  @{fg shine}NAME:@{fg text}
    TCPHostIPStr$

  @{fg shine}SYNOPSIS:@{fg text}
    IPAddress$=TCPHostIPStr$(IPAddress.l)

  @{fg shine}FUNCTION:@{fg text}
    Converts an IP address stored in a LONG variable, to a dot (.)
    notated string (eg. from 2130706433 to 127.0.0.1)

  @{fg shine}INPUTS:@{fg text}
    IPAddress.l  - The IP address in a LONG variable.

  @{fg shine}RETURNS:@{fg text}
    A string with your IP address in a dot (.) notation.

@EndNode

@Node 437 "TCPHostIP"

  Unknown

@EndNode

@Node 438 "TCPExamineAddrEntry"

  @{fg shine}NAME:@{fg text}
    TCPExamineAddrEntry

  @{fg shine}SYNOPSIS:@{fg text}
    IPAddress.l=TCPExamineAddrEntry(IPAddress.l)

  @{fg shine}FUNCTION:@{fg text}
    Allows you to "examine" an IP address, and retrive information
    about that IP address.

  @{fg shine}INPUTS:@{fg text}
    IPAddress.l = The IP address that you want to examine, in longword form.

  @{fg shine}RETURNS:@{fg text}
    IPAddress.l = IP Address in longword form.


@EndNode

@Node 439 "TCPCanonicalName$"

  @{fg shine}NAME:@{fg text}
    TCPCanonicalName$

  @{fg shine}SYNOPSIS:@{fg text}
    hostname$=TCPCanonicalName$

  @{fg shine}FUNCTION:@{fg text}
    Returns a string containing the domain name of the previously
    "examined" domain name, or IP address (if available).

  @{fg shine}RETURNS:@{fg text}
    hostname$ = String containing the domain name.

@EndNode

@Node 440 "TCPSlapSocketIn"

  @{fg shine}NAME:@{fg text}
    TCPSlapSocketIn

  @{fg shine}SYNOPSIS:@{fg text}
    TCPSlapSocketIn(Socket.l,TCPSock#)

  @{fg shine}FUNCTION:@{fg text}
    Allows you to insert sockets created with the low-level
    bsdsocket.library functions, into the SDSTCPLib's high
    level functions.  Ie.  Allows a socket created using
    functions like "BSDsock()" to be used
    with high-level functions like "TCPClose()"

  @{fg shine}INPUTS:@{fg text}
    Socket.l = Low-level socket to be used in high-level functions
    TCPSock# = High-level socket number where the low-level socket
               should be placed.

@EndNode

@Node 441 "TCPPullSocketOut"

  @{fg shine}NAME:@{fg text}
    TCPPullSocketOut

  @{fg shine}SYNOPSIS:@{fg text}
    TCPPullSocketOut(TCPSock#)

  @{fg shine}FUNCTION:@{fg text}
    Removes a high-level socket number from the high-level functions.

  @{fg shine}INPUTS:@{fg text}
    TCPSock# = High-level socket number where the low-level socket
               should be placed.

@EndNode

@Node 442 "TCPGetOwnHostIP"

  @{fg shine}NAME:@{fg text}
    TCPGetOwnHostIP

  @{fg shine}SYNOPSIS:@{fg text}
    IPAddress.l=TCPGetOwnHostIP

  @{fg shine}FUNCTION:@{fg text}
    Returns the current IP address in longword form.  Use this with
    "TCPGetIPStr$" in order to get your current IP address.

  @{fg shine}RETURNS:@{fg text}
    IPAddress.l = IP address in longword form.

@EndNode

@Node 504 "TCPIsOnline"

  @{b}Note:@{ub} This is not a proper bsdsocket.library function, this
  comes from the seperate miami.library and genesis.library libraries
  and so does not always work in the way desired.  See below for more
  details.

  @{fg shine}NAME:@{fg text}
    TCPIsOnline

  @{fg shine}SYNOPSIS:@{fg text}
    online.b=TCPIsOnline

  @{fg shine}FUNCTION:@{fg text}
    Attempts to discover whether the current TCP/IP stack is online
    or not by querying miami.library and genesis.library.

    Unfortunatly, differences between the way Miami and Miami Deluxe
    work may cause misleading results.  This issue has yet to be
    addressed by Holger Kruse, but a fix may be implemented in a future
    version of the library.

  @{fg shine}RETURNS:@{fg text}
    A result of 0 indicates the TCP/IP stack is offline, while a result
    of 1 indicates that it is online.  But you should also be prepared
    to receive a result of -1, indicating that neither miami.library or
    genesis.library were found (indicating that a much older TCP/IP stack
    is in use.

@EndNode

@Node 505 "TCPSetMiamiIFace"

  @{b}Note:@{ub} At present this is only used in conjunction with the
  @{"TCPIsOnline" link 504} command, but may be of use in other commands in the
  future.

  @{fg shine}NAME:@{fg text}
    TCPSetMiamiIFace

  @{fg shine}SYNOPSIS:@{fg text}
    TCPSetMiamiIFace(interface)

  @{fg shine}FUNCTION:@{fg text}
    Allows you to set the interface used for certain Miami-specific commands.

    Due to the way some of the miami.library functions work, they require an
    "interface" to be supplied.  The term "interface" is used to describe what
    connection is to be queryed.  For example, in the standard Miami, the "lo0"
    interface, describes the localhost interface, while "mi0" describes the
    dialup/SANA-2 connection.

    Miami Deluxe allows for multiple connections other than "mi0", and so you may
    find that you need to specify an interface name.  The longword used is actually
    a hexdecimal address of the four characters needed to make the string.  So
    $6C6F300 translates as "lo0+ NULL".  Predefined interfaces for you to use are:

      #TCP_MIAMIFACE_LO0
      #TCP_MIAMIFACE_MI0

    @{fg shine}INPUTS:@{fg text}
      interface = see above for more information.

@EndNode

@node 302 "Commands (High-Level)"

 @{fg shine}@{u}HIGH-LEVEL COMMAND WRAPPER@{uu}@{fg text}

  @{" TCPSock              " link 400} @{" TCPFillMemB          " link 401} @{" TCPFillMemL          " link 402}
  @{" TCPFDSet             " link 403} @{" TCPFDClear           " link 404} @{" TCPCreateSocket      " link 405}
  @{" TCPRemoveSocket      " link 406} @{" TCPFDIsSet           " link 407} @{" TCPFDWriteLoc        " link 408}
  @{" TCPFDReadLoc         " link 409} @{" TCPConnectSocket     " link 410} @{" TCPEvent             " link 411}
  @{" TCPShutSocket        " link 412} @{" TCPFDIntHighLoc      " link 413} @{" TCPHighest           " link 414}
  @{" TCPRescanHighest     " link 415} @{" TCPSetStates         " link 416} @{" TCPWrite             " link 417}
  @{" TCPPrint             " link 418} @{" TCPNPrint            " link 419} @{" TCPSetReceiveBuffer  " link 420}
  @{" TCPReadSocket$       " link 421} @{" TCPIsWriteEvent      " link 422} @{" TCPIsReadEvent       " link 423}
  @{" TCPFreeReceiveBuffer " link 424} @{" TCPFDTempWriteLoc    " link 425} @{" TCPFDTempReadLoc     " link 426}
  @{" TCPLastReadSize      " link 427} @{" TCPSocketNumber      " link 428} @{" TCPSocketError       " link 429}
  @{" TCPErrorString$      " link 430} @{" TCPListenSocket      " link 431} @{" TCPGetOwnHostName$   " link 432}
  @{" TCPGetIPStr$         " link 433} @{" TCPGetIPClass        " link 434} @{" TCPExamineHostEntry  " link 435}
  @{" TCPHostIPStr$        " link 436} @{" TCPHostIP            " link 437}
  @{" TCPExamineAddrEntry  " link 438} @{" TCPCanonicalName$    " link 439} @{" TCPSlapSocketIn      " link 440}
  @{" TCPPullSocketOut     " link 441} @{" TCPGetOwnHostIP      " link 442}

  [SPECIALS]

  @{" TCPOpen              " link 501} @{" TCPClose             " link 502} @{" TCPAvail             " link 503}
  @{" TCPIsOnline          " link 504} @{" TCPSetMiamiIFace     " link 505}

 @{" Return to main page " link MAIN}
@endnode

