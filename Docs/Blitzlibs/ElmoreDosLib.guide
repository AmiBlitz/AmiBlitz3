@DATABASE ElmoreLibs
@$VER: ELMORELIB V1.12 (31.05.2015)- Updated by tomsmart1.
@NODE "MAIN"
Author:
  Richard T Elmore, HeadSoft, 126 STATE ST. #20, SPEARFISH, SD 57783, USA

      @{b}@{u}Elmore DOS library@{uu}@{ub}

      @{" CHDir " link "CHDir"}              @{" GetAssigns " link "GetAssigns"}
      @{" CurrentDir$ " link "CurrentDir$"}        @{" Assign$ " link "Assign$"}
      @{" MoreEntries " link "MoreEntries"}        @{" Examine " link "Examine"}
      @{" EntryDir " link "EntryDir"}           @{" FileComment " link "FileComment"}
      @{" EntryName$ " link "EntryName$"}         @{" SetBits " link "SetBits"}
      @{" EntryBit$ " link "EntryBit$"}          @{" SetWildString " link "SetWildString"}
      @{" EntrySize " link "EntrySize"}          @{" MatchWild " link "MatchWild"}
      @{" EntryDate " link "EntryDate"}          @{" DosError$ " link "DosError$"}
      @{" EntryHour " link "EntryHour"}          @{" DiskState " link "DiskState"}
      @{" EntryMins " link "EntryMins"}          @{" DiskType$ " link "DiskType$"}
      @{" EntrySecs " link "EntrySecs"}          @{" FilePart$ " link "FilePart$"}
      @{" EntryComment$ " link "EntryComment$"}      @{" PathPart$ " link "PathPart$"}
      @{" CopyFile " link "CopyFile"}           @{" FullPath$ " link "FullPath$"}
      @{" SetCopyBuffer " link "SetCopyBuffer"}      @{" NoMoreEntries " link "NoMoreEntries"}
      @{" NameFile " link "NameFile"}           @{" GetLocal$ " link "GetLocal$"}
      @{" MakeDir " link "MakeDir"}            @{" GetEnv$ " link "GetEnv$"}
      @{" AnalyzeDisk " link "AnalyzeDisk"}        @{" SetLocal " link "SetLocal"}
      @{" DiskUnit " link "DiskUnit"}           @{" SetEnv " link "SetEnv"}
      @{" DiskErrors " link "DiskErrors"}         @{" UnSetLocal " link "UnSetLocal"}
      @{" DiskCapacity " link "DiskCapacity"}       @{" UnSetEnv " link "UnSetEnv"}
      @{" DiskUsed " link "DiskUsed"}           @{" Run " link "Run"}
      @{" DiskBlocks " link "DiskBlocks"}         @{" ComparePaths " link "ComparePaths"}
      @{" DiskFree " link "DiskFree"}           @{" Assign " link "Assign"}
      @{" MoveFile " link "MoveFile"}           @{" Exec " link "Exec"}


      NOTE ON FUNCTIONS, STATEMENTS and COMMANDS:
      -------------------------------------------

      "FUNCTIONS" are Blitz2 tokens that require parameters in
      parentheses, and return a value:
      n=ABS(m)

      "STATEMENTS" are Blitz2 tokens that only perform an action
      but do not return a value.  Their arguments do not require
      parentheses:
      PRINT "HELLO!"

      "COMMANDS" are Blitz2 tokens that can be used as either a
      FUNCTION or a STATEMENT, depending upon whether the arguments
      were in parentheses or not.

      [Function form:]
      n=REQUEST("TITLE","SELECT YES OR NO","YES|NO")

      [Statement form:]
      REQUEST "TITLE","SELECT OK TO CONTINUE","OK"
@ENDNODE


@NODE "CHDir"
Command: CHDIR
--------------
Syntax: CHDIR "Path:"  -or-  IF CHDIR("Path:") Then...

This command will change the current working directory for ALL disk-
related commands.  Used as a function, a value of TRUE will be returned
if the directory change was successful, or FALSE if it was unsuccessful.
@ENDNODE


@NODE "CopyFile"
Command: COPYFILE
-----------------
Syntax: COPYFILE "First","SECOND"  -or-  IF COPYFILE("FIRST","SECOND") Then...

This command will copy files, much like the CLI command "Copy."  In the
function form, it will return TRUE for success, and FALSE for failure.
Note that the speed at which it copies can be increased by increasing the
"CopyBuffer," which defaults to 8192 bytes.  (See below)
@ENDNODE


@NODE "SetCopyBuffer"
Statement: SetCopyBuffer
------------------------
Syntax: SetCopyBuffer BUFFERSIZE

This statement is used to set the size of the COPYFILE command's memory
buffer.  The default size is 8192 bytes, but this can be adjusted from
256 bytes to nearly all your free memory.  A larger buffer will normally
increase the speed at which the COPYFILE command operates, but only up to
the size of the largest file you're copying.  For example, if the largest
file you need to copy is 25000 bytes, then it will be useless to set the
COPYBUFFER above 25000.
@ENDNODE


@NODE "NameFile"
Command: NAMEFILE
-----------------
Syntax: NAMEFILE "Oldname","Newname"  -or-
        IF NAMEFILE("Oldname","Newname") Then...

This command returns FALSE for failure, TRUE for success:
The file "oldname" is renamed to "newname," if possible, and may be moved
to other directories within the same volume.  It is not yet possible to
use NAMEFILE to move a file from one volume to another, however.
@ENDNODE


@NODE "MakeDir"
Command: MAKEDIR
----------------
Syntax: NAMEFILE "Path:Dir"  -or-  If NAMEFILE("Path:Dir") Then...

This command will attempt to create a new directory with the given pathname.
It is only possible to create one level at a time, however.  For example,
MAKEDIR will fail if you attempt to MAKEDIR "RAM:New/Data" if the directory
"RAM:New" does not yet exist.  Used as a function, MAKEDIR returns TRUE for
success, and FALSE for failure.
@ENDNODE


@NODE "MoreEntries"
Command: MOREENTRIES
--------------------
Syntax: MOREENTRIES  -or-  If MOREENTRIES Then...

This command will read the next entry in the current directory for
inspection with other "ENTRY" commands.  Used within a loop, it is easy
to read an entire directory with these commands, similar to the "DIR" or
"LIST" commands of AmigaDOS.  (See below.  An example follows)
@ENDNODE


@NODE "EntryName$"
Function: ENTRYNAME$
--------------------
Syntax: n$=ENTRYNAME$

This function returns the name of the current directory entry.  If used
before the fist "MOREENTRIES" command, it will return the name of the
current directory.  (Just the current directory's name, not the full
path name)
@ENDNODE


@NODE "EntryDir"
Function: ENTRYDIR
------------------
Syntax: If ENTRYDIR Then...

This function returns TRUE if the current entry is a sub-directory, or
FALSE if it is a file.
@ENDNODE


@NODE "EntryBit$"
Function: ENTRYBITS$
--------------------
Syntax: n$=ENTRYBITS$

This function returns a string containing the protection-bits status of
the current file or directory.  An example may be "----RWED"  the same
format as given by the AmigaDOS "LIST" command.  Possible bit settings
are HSARWED:  H=HIDDEN, S=SCRIPT, A=ARCHIVED, R=READABLE, W=WRITEABLE,
E=EXECUTEABLE, D=DELETEABLE.
Any bits that are not set will have the "-" character in their place.
@ENDNODE


@NODE "EntrySize"
Function: ENTRYSIZE
-------------------
Syntax: n.l=ENTRYSIZE

This function returns the size in bytes of the current directory entry.
Note that sub-directories return a size of zero whether they are empty
or not.
@ENDNODE


@NODE "EntryDate"
Function: ENTRYDATE
-------------------
Syntax: d$=DATE$(ENTRYDATE)

This function returns the date the current entry was last modified, in
the same format as SYSTEMDATE uses.  (The number of days since 1/1/1978)
Thus, you may use the DATE$ and DATEFORMAT commands to translate it into
a string with a more human-readable string.
@ENDNODE


@NODE "EntryHour"
Function: ENTRYHOUR, ENTRYMINS, ENTRYSECS
-------------------
Syntax: h=ENTRYHOUR:m=ENTRYMINS:s=ENTRYSECS

ENTRYHOUR:
This function is related to ENTRYDATE, above, but returns the hour of the
day (0-23) at which the entry was last modified.

ENTRYMINS:
Returns the minute (0-59) of the time at which the entry was modified.

ENTRYSECS:
Returns the second (0-59) of the time at which the entry was modified.
@ENDNODE


@NODE "EntryComment$"
Function: ENTRYCOMMENT$
-----------------------
Syntax: c$=ENTRYCOMMENT$

This function will return the string containing the filenote for the
current directory entry, or "" if there is none.
@ENDNODE


@NODE "AnalyzeDisk"
Command: ANALYZEDISK
--------------------
Syntax: ANALYZEDISK "DRIVE:"  -or-  If ANALYZEDISK "DRIVE:" Then...

This command returns FALSE if the specified device or pathname was not
valid.  If successful, details about the specified drive can be read with
the following "DISK" functions.  The values for these functions will not
change until ANALYZEDISK is executed again, either on the same drive or
another one.
Note:  If given a full pathname, such as "DF0:System/Utilities" this
command will still know enough to analyze the disk "DF0:"
@ENDNODE


@NODE "DiskUnit"
Function: DISKUNIT
------------------
Syntax: n=DISKUNIT

This function will return the unit number of the most recently analyzed
disk.  DF0: for example, would return zero, while DF1: would return 1.
@ENDNODE


@NODE "DiskErrors"
Function: DISKERRorS
------------------
Syntax: n=DISKERRorS

This function will return the number of soft errors DOS knows about on
the last analyzed disk.  This should normally be zero.
@ENDNODE


@NODE "DiskCapacity"
Function: DISKCAPACITY
----------------------
Syntax: n=DISKCAPACITY

This function returns the capacity in bytes of the last analyzed drive.
For example, a fastfilesystem-formatted disk's max capacity is 837K, so
DISKCAPACITY would return 857904, which divided by 1024 is 837.
@ENDNODE


@NODE "DiskUsed"
Function: DISKUSED
------------------
Syntax: n=DISKUSED

This function returns the number of bytes actually in-use on the last
analyzed drive.
@ENDNODE


@NODE "DiskFree"
Function: DISKFREE
------------------
Syntax: n=DISKFREE

The opposite of DISKUSED, DISKFREE returns the number of bytes free
on the disk.  This function would be very useful, for example, in a
program that needed to save information to disk.  You would be able
to first determine if the specified SAVE disk had sufficient space.
@ENDNODE


@NODE "DiskBlocks"
Function: DISKBLOCKS
--------------------
Syntax: n=DISKBLOCKS

This function returns the number of bytes each block on a disk uses,
making it possible to convert the byte-values of the above functions
to number of blocks.
@ENDNODE
