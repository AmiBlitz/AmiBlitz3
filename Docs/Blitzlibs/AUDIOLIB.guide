@DATABASE AUDIOLIB
@Author Conversion program
@$VER: AUDIOLIB V1.1 (27.01.2007)- Updated by mrodfr.
@NODE OVERVIEW "Overview of AUDIOLIB"

                                  @{b}@{u}Overview@{ub}@{uu}


                          An Acid Software Library

                         Converted to AmigaGuide by

                            Red When Excited Ltd

                 Used with the permission of Acid Software

          Edited, fixed and cleaned by Toby Zuijdveld 26/02/1999.
                       mailto:hotcakes\@abacus.net.au



@ENDNODE OVERVIEW

@NODE DiskPlay "AUDIOLIB"

@{fg shine}Statement: DiskPlay@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DiskPlay Filename$,Channelmask[,Vol1[,Vol2...]]

DiskPlay will play an 8SVX IFF sound file straight from disk. This is 
ideal for situations where you simply want to play a sample without the 
extra hassle of loading a sound, playing it, and then freeing it. The 
DiskPlay command will also halt program flow until the sample has 
finished playing.

DiskPlay usually requires much less memory to play a sample than the 
LoadSound, Sound technique. Also, DiskPlay allows you to play samples 
of any length, whereas LoadSound only allows samples up to 128K in 
length to be loaded.

For information on the Channelmask and Vol parameters, please refer to 
<the Sound command




@ENDNODE DiskPlay

@NODE DiskBuffer "AUDIOLIB"

@{fg shine}Statement: DiskBuffer@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DiskBuffer Bufferlen

DiskBuffer allows you to set the size of the memory buffer used by the 
DiskPlay command. This Buffer is by default set to 1024 bytes, and 
should not normally have to be set to more than this.

Reducing the buffer size by too much may cause loss of sound quality of 
the DiskPlay command.

If you are using DiskPlay to access a very slow device, the buffer size 
may have to be increased.

@ENDNODE DiskBuffer

@NODE LoadSound "AUDIOLIB"

@{fg shine}Statement: LoadSound@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : LoadSound Sound#,Filename$

LoadSound creates a sound object for later playback. The sound is taken 
from an 8SVX IFF file. An error will be generated if the specified file 
is not in the correct IFF format.


@ENDNODE LoadSound

@NODE Sound "AUDIOLIB"

@{fg shine}Statement: Sound@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Sound Sound#,Channelmask[,Vol1[,Vol2...]]

Sound causes a previously created sound object to be played through the 
Amiga's audio hardware.
Channelmask specifies which of the Amiga's four audio channels the 
sound should be played through, and should be in the range one through 
fifteen.

The following is a list of Channelmask values and their effect:







ChannelMask  Channel 0   Channel 1   Channel 2   Channel 3

   1            on         off         off         off
   2           off          on         off         off
   3            on          on         off         off
   4           off         off          on         off
   5            on         off          on         off
   6           off          on          on         off
   7            on          on          on         off
   8           off         off         off          on
   9            on         off         off          on
  10           off          on         off          on
  11            on          on         off          on
  12           off         off          on          on
  13            on         off          on          on
  14           off          on          on          on
  15            on          on          on          on


In the above table, any audio channels specified as 'off' are not 
altered by Sound, and any sounds they may have previously been playing 
will not be affected.

The Volx parameters allow individual volume settings for different 
audio channels. Volume settings must be in the range zero through 64, 
zero being silence, and 64 being loudest. The first Vol parameter 
specifies the volume for the lowest numbered 'on' audio channel, the 
second Vol for the next lowest and so on.

For example, assume you are using the following Sound command:

Sound 0,10,32,16

The Channelmask of ten means the sound will play through audio channels 
one and three. The first volume of 32 will be applied to channel one, 
and the second volume of 16 will be applied to channel three.

Any Vol parameters omitted will be cause a volume setting of 64.


@ENDNODE Sound

@NODE Volume "AUDIOLIB"

@{fg shine}Statement: Volume@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Volume Channelmask,Vol1[,Vol2...]

Volume allows you to dynamically alter the volume of an audio channel. 
This enables effects such as volume fades. For an explanation of 
Channelmask and Vol parameters, please refer to the Sound 
command.


@ENDNODE Volume

@NODE Filter "AUDIOLIB"

@{fg shine}Statement: Filter@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Filter On|Off

Filter may be used to turn on or off the Amiga's low pass audio 
filter.


@ENDNODE Filter

@NODE LoopSound "AUDIOLIB"

@{fg shine}Statement: LoopSound@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : LoopSound Sound#,Channelmask[,Vol1[,Vol2...]]

LoopSound behaves identically to Sound, only the sound will be played 
repeatedly. Looping a sound allows for the facility to play the entire 
sound just once, and begin repeating at a point in the sound other than 
the beginning. This information is picked up from the 8SVX IFF file, 
when LoadSound is used to create the sound, or from the offset 
parameter of InitSound.


@ENDNODE LoopSound

@NODE InitSound "AUDIOLIB"

@{fg shine}Statement: InitSound@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : InitSound Sound#,Length[,Period[,Repeat]]

InitSound initializes a sound object in preparation for the creation of 
custom sound data. This allows simple sound waves such as sine or 
square waves to be algorithmically created. SoundData should be used to 
create the actual wave data.

Length refers to the length, in bytes, the sound object is required to 
be. Length MUST be less than 128K, and MUST be even.

Period allows you to specify a default pitch for the sound. A period of 
428 will cause the sound to be played at approximately middle 
'C'.

Offset is used in conjunction with LoopSound, and specifies a position 
in the sound at which repeating should begin. Please refer to LoopSound 
for more information on repeating sounds.


@ENDNODE InitSound

@NODE SoundData "AUDIOLIB"

@{fg shine}Statement: SoundData@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SoundData Sound#,Offset,Data

SoundData allows you to manually specify the waveform of a sound 
object. The sound object should normally have been created using 
InitSound, although altering IFF sounds is perfectly legal.

SoundData alters one byte of sound data at the specified Offset. Data 
refers to the actual byte to place into the sound, and should be in the 
range -128 to +127.


@ENDNODE SoundData

@NODE PeekSound "AUDIOLIB"

@{fg shine}Function: PeekSound@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : PeekSound (Sound#,Offset)

PeekSound returns the byte of a sample at the specified offset of the 
sound object specified.


@ENDNODE PeekSound

@NODE DecodeSound "AUDIOLIB"

@{fg shine}Statement: DecodeSound@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DecodeSound Sound#,MemoryLocation

DecodeSound similar to the other new Decode commands allows the 
programmer to include sound files within their program's object 
code.


@ENDNODE DecodeSound

@NODE SetPeriod "AUDIOLIB"

@{fg shine}Statement: SetPeriod@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SetPeriod Sound#,Period

Hmmm, not sure why we never included this command in the original 
audiolib, 
@ENDNODE SetPeriod

@NODE MAIN "AUDIOLIB"

.-----------------------------------------------------------------------------.
|                                  @{b}AUDIOLIB@{ub}                                   |
`-----------------------------------------------------------------------------'

                             @{"     Overview     " link OVERVIEW}

                               Command Index                                

               @{" DecodeSound  " link DecodeSound}                @{" DiskBuffer   " link DiskBuffer}
               @{" DiskPlay     " link DiskPlay}                @{" Filter       " link Filter}
               @{" InitSound    " link InitSound}                @{" LoadSound    " link LoadSound}
               @{" LoopSound    " link LoopSound}                @{" PeekSound    " link PeekSound}
               @{" SetPeriod    " link SetPeriod}                @{" Sound        " link Sound}
               @{" SoundData    " link SoundData}                @{" Volume       " link Volume}
@ENDNODE MAIN

