@DataBase "LotanString"
@$VER: LOTANSTRINGLIB V1.1 (27.01.2007)- Updated by mrodfr.
@Node Main "LotanString"

  @{b}Lotan's String Library 0.28 (18-05-99)@{ub}

    @{" StrChg   " link StrChg} Function (String)
    @{" StrClone " link StrClone} Function (String)
    @{" StrFlip  " link StrFlip} Function (String)
    @{" StrLeft  " link StrLeft} Function (String)
    @{" StrLen   " link StrLen} Function (Long)
    @{" StrLower " link StrLower} Function (String)
    @{" StrPack  " link StrPack} Function (String)
    @{" StrRange " link StrRange} Function (String)
    @{" StrRight " link StrRight} Function (String)
    @{" StrSub   " link StrSub} Function (String)
    @{" StrTrans " link StrTrans} Function (String)
    @{" StrUpper " link StrUpper} Function (String)

  @{b}Author@{ub}

    Olivier Laviale, Doumenge 46230 Montdoumerc, FRANCE

  @{b}Overview@{ub}

    Well, well, a brand new set of commands for Blitz. Yes another one... But what  a
    set  ;-).  This  set  will  definitly  eradicate  the  original one (R.I.P), more
    powerfull, more easy, more... more... and... small. Yes that's it.

    I decided to create thi set because compared to string functions of ARexx  Blitz'
    ones  really  sucks,  especially  pading options absolutelly unavailable (or very
    limited)...

  @{b}Bugs@{ub}

    For speed and size reasons @{fg highlight}StrChg@{fg text} and @{fg highlight}StrFlip@{fg text} are limited to  output  8192  bytes
    and no one more, if you think this is to small (hum?!?) let me know.

  @{b}See also@{ub}

    @{" FindStrg " link LotanCompare.guide/FindStrg}
    @{" Stringf  " link LotanPrint.guide/Stringf}

    @{" History                  " link HIST}
    @{" BlitzLibs / LotanConvert " link LotanConvert.guide/Main}
    @{" BlitzLibs / StringFunc   " link StringFuncLib.guide/Main}
@EndNode

@Node StrChg "LotanString : StrChg"

  @{b}@{u}StrChg@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.s @{ui}= StrChg(Str,OldStr,NewStr)

    @{b}Function@{ub} : Will replace any occurences of @{b}OldStr@{ub} found in @{b}Str@{ub} by @{b}NewStr@{ub}.

               This function is @{i}case-sensitive@{ui}, use @{fg highlight}StrUpper@{fg text} or @{fg highlight}StrLower@{fg text}  for  a  @{i}non
               case-sesitive@{ui} searching.

    @{b}Example@{ub}  : @{fg highlight}StrChg@{fg text}("Lotan I Hate You!!","Hate","Love") >> "Lotan I Love You"
               @{fg highlight}StrChg@{fg text}("L$ot$an$","$","")                  >> "Lotan"
               @{fg highlight}StrChg@{fg text}("Lotan","","Plo")                   >> "Lotan"

    @{b}See also@{ub} : @{" StrPack " link StrPack}
@EndNode
@Node StrClone "LotanString : StrClone"

  @{b}@{u}StrClone@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.s @{ui}= StrClone(Str,Num)

    @{b}Function@{ub} : Returns a string composed of @{b}Str@{ub} concatenated with itself @{b}Num@{ub} times.

    @{b}Example@{ub}  : @{fg highlight}StrClone@{fg text}("Lotan",3)    >> "LotanLotanLotan"
@EndNode
@Node StrFlip "LotanString : StrFlip"

  @{b}@{u}StrFlip@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.s @{ui}= StrFlip(Str)

    @{b}Function@{ub} : Returns @{b}Str@{ub} flipped end for end.

    @{b}Warning@{ub}  : Since version 1.02 of LotanString flipping a string made of  one  char
               will  crash  the  machine. It is easy to fix by checking the length of
               the string, but I don't think I will do it, so be careful ;-)

               If it's to hard for you, let me know ;-)

    @{b}Example@{ub}  : @{fg highlight}StrFlip@{fg text}(Lotan)   >> "natoL"
@EndNode
@Node StrLeft "LotanString : StrLeft"

  @{b}@{u}StrLeft@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.s @{ui}= StrLeft(Str,Len)
               @{i}rc.s @{ui}= StrLeft(Str,Len,Pad)

    @{b}Function@{ub} : Returns a string of @{b}Len@{ub} characters made up of the leftmost  characters
               in @{b}Str@{ub}.

               This function replaces @{fg highlight}Left$@{fg text}, @{fg highlight}LSet$@{fg text}, @{fg highlight}UnLeft$@{fg text}  and  adds  extra feature
               like  pading  the string with the character you want to, and no only a
               blank space.

    @{b}Values@{ub}   : If @{b}Len@{ub} is greater than the length of @{b}Str@{ub}, then the string returned  is
               filled  out  on  the  right  with  @{b}Pad@{ub}. (a quick way to left-justify a
               string)

    @{b}Example@{ub}  : @{fg highlight}StrLeft@{fg text}("never to stop saying",13)   >> "never to stop"
               @{fg highlight}StrLeft@{fg text}("Widget", 12)+"|"            >> "Widget      |"
               @{fg highlight}StrLeft@{fg text}("No", 4, 33)                 >> "No!!"
               @{fg highlight}StrLeft@{fg text}("Lotan My Lord",-8)          >> "Lotan"
               @{fg highlight}StrLeft@{fg text}("Lotan My Lord",-50)         >> ""

    @{b}See also@{ub} : @{" StrRight " link StrRight}
@EndNode
@Node StrLen "LotanString : StrLen"

  @{b}@{u}StrLen@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= StrLen(Str)
               @{i}rc.l @{ui}= StrLen(Addr)

    @{b}Function@{ub} : Returns the number of characters in a string.

               Since version 1.00 of LotanString StrLen  is  able  to  calculate  the
               length  of  a  string hold in memory. This string doesn't have to be a
               BlitzBasic's one, but can be a simple memory area...
@EndNode
@Node StrLower "LotanString : StrLower"

  @{b}@{u}StrLower@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.s @{ui}= StrLower(Str)

    @{b}Function@{ub} : Converts @{b}Str@{ub} to lowercase.

               This function really converts uppercase characters to lowercase  ones,
               unlike @{fg highlight}LCase$@{fg text}...

    @{b}Example@{ub}  : @{fg highlight}LCase$@{fg text}(@{fg highlight}d2c@{fg text}(216))     >> � -> �
               @{fg highlight}StrLower@{fg text}(@{fg highlight}d2c@{fg text}(216))   >> � -> �

    @{b}See also@{ub} : @{" StrUpper " link StrUpper}
@EndNode
@Node StrPack "LotanString : StrPack"

  @{b}@{u}StrPack@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.s @{ui}= StrPack(Str)
               @{i}rc.s @{ui}= StrPack(Str,Table)

    @{b}Function@{ub} : Removes any of the characters contained in @{b}Table@{ub} from @{b}Str@{ub}.

    @{b}Values@{ub}   : The default character for @{b}Table@{ub} is a  space,  so  this  function  will
               remove all spaces if only @{b}Str@{ub} is specified.

    @{b}Examples@{ub} : @{fg highlight}StrPack@{fg text}("$1,045","$,%")             >> "1045"
               @{fg highlight}StrPack@{fg text}("Call me Lotan.")           >> "CallmeLotan."
               @{fg highlight}StrPack@{fg text}("abcdef",@{fg highlight}StrRange@{fg text}($62,$64)) >> "aef"

    @{b}See also@{ub} : @{" StrRange " link StrRange}
               @{" StrTrans " link StrTrans}
@EndNode
@Node StrRange "LotanString : StrRange"

  @{b}@{u}StrRange@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.s @{ui}= StrRange(Start)
               @{i}rc.s @{ui}= StrRange(Start,End)

    @{b}Function@{ub} : Returns a string made of all characters between @{b}Start@{ub} and @{b}End@{ub}.

               If you don't supply @{b}End@{ub}, the character 255 will be used instead.

               If @{b}End@{ub} is Greater than @{b}Start@{ub},  @{fg highlight}StrRange@{fg text}  will  return  all  characters
               between  @{b}End@{ub} and 255 and all characters between 0 and @{b}Start@{ub}, excluding
               characters between @{b}End@{ub} and @{b}Start@{ub}.

    @{b}Example@{ub}  : @{fg highlight}StrRange@{fg text}(97,105)   >> "abcdefghi"
               @{fg highlight}StrRange@{fg text}(105,97)   >> Will return all characters between 105  and  255
                                     @{u}and@{uu} between 0 and 97.

    @{b}See also@{ub} : @{" StrPack " link "StrPack"}
@EndNode
@Node StrRight "LotanString : StrRight"

  @{b}@{u}StrRight@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.s @{ui}= StrRight(Str,Len)
               @{i}rc.s @{ui}= StrRight(Str,Len,Pad)

    @{b}Function@{ub} : Returns a string of @{b}Len@{ub} characters made up the rightmost characters in
               @{b}Str@{ub}.

               This function replace @{fg highlight}Right$@{fg text}, @{fg highlight}RSet$@{fg text}, @{fg highlight}UnRight$@{fg text} and adds  extra  feature
               like  pading  the string with the character you want to, and no only a
               blank space.

    @{b}Values@{ub}   : If @{b}Len@{ub} is greater than the length of @{b}Str@{ub}, then the  result  is  filled
               out on the left with @{b}Pad@{ub}. (a quick way to right-justify a string)

    @{b}Example@{ub}  : @{fg highlight}StrRight@{fg text}("never to stop saying",11)    >> "stop saying"
               "$"+@{fg highlight}StrRight@{fg text}("4.50", 6)                >> "$  4.50"
               "$"+@{fg highlight}StrRight@{fg text}("123.99", 6)              >> "$123.99"
               @{fg highlight}StrRight@{fg text}("Whoa", 8, 87)                >> "WWWWWhoa"
               @{fg highlight}StrRight@{fg text}("Lotan my Lord",-6)           >> "my Lord"
               @{fg highlight}StrRight@{fg text}("Lotan my Lord",-50)          >> ""

    @{b}See also@{ub} : @{" StrLeft " link StrLeft}
@EndNode
@Node StrSub "LotanString : StrSub"

  @{b}@{u}StrSub@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.s @{ui}= StrSub(Str,Pos)
               @{i}rc.s @{ui}= StrSub(Str,Pos,Len)
               @{i}rc.s @{ui}= StrSub(Str,Pos,Len,Pad)

    @{b}Function@{ub} : Returns @{b}Len@{ub} characters of @{b}Str@{ub} starting at @{b}Pos@{ub}.

    @{b}Values@{ub}   : @{b}Len@{ub} is the number of characters  you  want  to  get.  If  @{b}Len@{ub}  is  not
               specified,  then  all  of  the  string  to  the  right  of @{b}Pos@{ub} will be
               returned.

               If @{b}Len@{ub} is specified, the returned string  will  have  @{b}Len@{ub}  characters,
               filled out, if necessary, with @{b}Pad@{ub}.

               The default @{b}Pad@{ub} character is a blank.

    @{b}Example@{ub}  : @{fg highlight}StrSub@{fg text}("indifference",3,3)   >> dif
               @{fg highlight}StrSub@{fg text}("No way",4,5,33)      >> way!!

    @{b}See also@{ub} : @{" c2d      " link LotanConvert.guide/c2d}
               @{" StrLeft  " link StrLeft}
               @{" StrRight " link StrRight}
@EndNode
@Node StrTrans "LotanString : StrTrans"

  @{b}@{u}StrTrans@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.s @{ui}= StrTrans(Str,OutTable,InTable)
               @{i}rc.s @{ui}= StrTrans(Str,OutTable,InTable,Pad)

    @{b}Function@{ub} : Any character in @{b}Str@{ub} that also appears in @{b}InTable@{ub} is converted to  the
               corresponding  character  in  @{b}OutTable@{ub},  or  to  @{b}Pad@{ub}  if there isn't a
               corresponding character in @{b}OutTable@{ub}.

               The default @{b}Pad@{ub} character is a blank.

               This function is  very  usefull  to  mask  some  characters  like  not
               printable ones (0->10...).

    @{b}Example@{ub}  : @{fg highlight}StrTrans@{fg text}("string",@{fg highlight}StrRange@{fg text}(65,90),@{fg highlight}StrRange@{fg text}(97,122))
                  >> STRING
               @{fg highlight}StrTrans@{fg text}(@{fg highlight}StrRange@{fg text}(97,122),"",@{fg highlight}StrRange@{fg text}(100,119),46)
                  >> abc....................xyz

               @{fg highlight}StrTrans@{fg text}("abcdef","1234567","abf",46)                >> 12cde3
               @{fg highlight}StrTrans@{fg text}("abcdef","1234567","fab",46)                >> 23cde1
               @{fg highlight}StrTrans@{fg text}("abcdef","|","acf",45)                      >> |b-de-
               @{fg highlight}StrTrans@{fg text}("abcdef","","acf",45)                       >> -b-de-

    @{b}See also@{ub} : @{" StrChg   " link StrChg}
               @{" StrPack  " link StrPack}
               @{" StrRange " link StrRange}
               @{" StrUpper " link StrUpper}
@EndNode
@Node StrUpper "LotanString : StrUpper"

  @{b}@{u}StrUpper@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.s @{ui}= StrUpper(Str)

    @{b}Function@{ub} : Converts @{b}Str@{ub} to uppercase.

               This function really conerts lowercase characters to  uppercase  ones,
               unlike @{fg highlight}UCase$@{fg text}.

    @{b}Example@{ub}  : @{fg highlight}UCase$@{fg text}(@{fg highlight}d2c@{fg text}(248))     >> � -> �
               @{fg highlight}StrUpper@{fg text}(@{fg highlight}d2c@{fg text}(248))   >> � -> �

    @{b}See also@{ub} : @{" StrLower " link StrLower}
@EndNode

@Node HIST "LotanString : History"
@Prev Main

  @{b}@{u}History@{ub}@{uu}

    @{b}0.00@{ub}

      This is the first set I made, just to see... Created @{fg highlight}StrLen@{fg text} because it's really
      easy ;-)

    @{b}0.02@{ub}

      Added @{fg highlight}StrRight@{fg text} and @{fg highlight}StrLeft@{fg text}... hard work compared to StrLen ;-)

    @{b}0.05@{ub}

      Oops, @{fg highlight}StrRigth@{fg text} and @{fg highlight}StrLeft@{fg text} are really bad... Lot of bugs here.

    @{b}0.08@{ub}

      I made deep work with @{fg highlight}StrRight@{fg text} and @{fg highlight}StrLeft@{fg text}, they can  pad  strings  (even  with
      special  chars), remove head or tail... These 2 commands replace @{fg highlight}Right$@{fg text}, @{fg highlight}Left$@{fg text},
      @{fg highlight}RSet$@{fg text}, @{fg highlight}LSet$@{fg text}, @{fg highlight}UnRight$@{fg text} and @{fg highlight}UnLeft$@{fg text}... Great work ;-)

    @{b}0.10@{ub}

      Added @{fg highlight}StrLower@{fg text} and @{fg highlight}StrUpper@{fg text}.

    @{b}0.14@{ub}

      Added @{fg highlight}StrPack@{fg text}, @{fg highlight}StrRange@{fg text} and @{fg highlight}StrClone@{fg text}. If you are familiar with  Rexx  you  will
      recognise them.

    @{b}0.20@{ub}

      - Added @{fg highlight}StrFlip@{fg text}. And save some code here and there.
      - Rewrite @{fg highlight}StrRight@{fg text} (buggy).

    @{b}0.24@{ub}

      - Added @{fg highlight}StrChg@{fg text}... pfff... a hell of work.
      - Added Startup code to create a buffer for string  operation  of  @{fg highlight}StrFlip@{fg text}  and
        @{fg highlight}StrChg@{fg text}, to speed up things...

    0.28    (18-05-99)                                         (Size 1956 / Code 762)

      Added @{fg highlight}StrSub@{fg text} after hours of hard work ;-)

    1.00    (20-01-00)                                         (Size 1952 / Code 728)

      - Remove a stupid bug in StrLen, and added the ability to calculate the  length
        of  a  string,  even  if the string is not a BlitzBasic's one e.g. an area of
        memory.

      - Bump to version 1.00 as @{b}LotanString@{ub} is very stable  now.  All  versions  from
        here are complied using PhxAss v4 by Frank Wille.

    1.02    (23-01-00)                                         (Size 1948 / Code 724)

      Rewrote @{fg highlight}StrFlip@{fg text}, 2 time faster now, and it does no longer requires a  temporary
      buffer to flip a string.
@EndNode
