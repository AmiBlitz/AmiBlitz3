@DATABASE COLLSLIB
@Author Conversion program
@$VER: COLLSLIB V1.1 (27.01.2007)- Updated by mrodfr.
@NODE OVERVIEW "Overview of COLLSLIB"

                                  @{b}@{u}Overview@{ub}@{uu}


                          An Acid Software Library

                         Converted to AmigaGuide by

                            Red When Excited Ltd

                 Used with the permission of Acid Software

          Edited, fixed and cleaned by Toby Zuijdveld 26/02/1999.
                       mailto:hotcakes\@abacus.net.au



@ENDNODE OVERVIEW

@NODE SetCollOdd "COLLSLIB"

@{fg shine}Statement: SetCollOdd@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SetCollOdd 

SetCollOdd is used to control the detection of sprite/bitmap 
collisions. SetCollOdd will cause ONLY the collisions between sprites 
and 'odd coloured' bitmap graphics to be reported. Odd coloured bitmap 
graphics refers to any bitmap graphics rendered in an odd colour number 
(ie: 1,3,5...). This allows you to design bitmap graphics in such a way 
that even coloured areas are 'safe' (ie: they will not report a 
collision) whereas odd colour areas are 'unsafe' (ie: they will report 
a collision).

The DoColl and PColl commands are used to detect the actual 
sprite/bitmap collisions.


@ENDNODE SetCollOdd

@NODE SetColl "COLLSLIB"

@{fg shine}Statement: SetColl@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SetColl Colour,Bitplanes[,Playfield 1=front, 2=back]

There are 3 different commands involved in controlling sprite/bitmap 
collision detection, of which SetColl is one (the other 2 being 
SetCollOdd and SetCollHi). All three determine what colours in a bitmap 
will cause a collision with sprites. This allows you to design bitmaps 
with 'safe' and 'unsafe' areas.

SetColl allows you to specify a single colour which, when present in a 
bitmap, and in contact with a sprite, will cause a collision. The 
Colour parameter refers to the 'collidable' colour. Bitplanes refers to 
the number of bitplanes (depth) of the bitmap collisions are to be 
tested for in.

The optional PlayField parameter is only used in a dualplayfield slice. 
If Playfield is 1, then Colour refers to a colour in the foreground 
bitmap. If Playfield is 0, then Colour refers to a colour in the 
background bitmap.

DoColl and PColl are the commands used for actually detecting the 
collisions.


@ENDNODE SetColl

@NODE SetCollHi "COLLSLIB"

@{fg shine}Statement: SetCollHi@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SetCollHi Bitplanes



@ENDNODE SetCollHi

@NODE ShapesHit "COLLSLIB"

@{fg shine}Function: ShapesHit@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ShapesHit (Shape#,X,Y,Shape#,X,Y)

The ShapesHit function will calculate whether the rectangular areas 
occupied by 2 shapes overlap. ShapesHit will automatically take the 
shape handles into account.
If the 2 shapes overlap, ShapesHit will return true (-1), otherwise 
ShapesHit will return false (0).


@ENDNODE ShapesHit

@NODE ShapeSpriteHit "COLLSLIB"

@{fg shine}Function: ShapeSpriteHit@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ShapeSpriteHit (Shape#,X,Y,Sprite#,X,Y)

The ShapeSpriteHit function will calculate whether the rectangular area 
occupied by a shape at one position, and the rectangular area occupied 
by a sprite at another position are overlapped. If the areas do 
overlap, ShapeSpriteHit will return true (-1), otherwise ShapeSpriteHit 
will return false (0).

ShapeSpriteHit automatically takes the handles of both the shape and 
the sprite into account.


@ENDNODE ShapeSpriteHit

@NODE SpritesHit "COLLSLIB"

@{fg shine}Function: SpritesHit@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SpritesHit (Sprite#,X,Y,Sprite#,X,Y)

The SpritesHit function will calculate whether the rectangular areas 
occupied by 2 sprites overlap. SpritesHit will automatically take the 
sprite handles into account.

If the 2 sprites overlap, SpritesHit will return true (-1), otherwise 
SpritesHit will return false (0).


@ENDNODE SpritesHit

@NODE RectsHit "COLLSLIB"

@{fg shine}Function: RectsHit@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : =RectsHit (X1,Y1,Width1,Height1,X2,Y2,Width2,Height2)

The RectsHit function may be used to determine whether 2 arbitrary 
rectangular areas overlap. If the specified rectangular areas overlap, 
RectsHit will return true (-1), otherwise RectsHit will return false 
(0).


@ENDNODE RectsHit

@NODE SColl "COLLSLIB"

@{fg shine}Function: SColl@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SColl (Sprite Channel,Sprite Channel)

SColl may be used to determine whether the 2 sprites currently 
displayed through the specified sprite channels have collided. If they 
have, SColl will return true (-1), otherwise SColl will return false 
(0).
DColl must have been executed prior to using SColl.


@ENDNODE SColl

@NODE PColl "COLLSLIB"

@{fg shine}Function: PColl@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : PColl (Sprite Channel)

The PColl function may be used to find out if a particular sprite has 
collided with any bitmaps. Sprite Channel refers to the sprite channel 
the sprite you wish to check is being displayed through.

If the specified sprite has collided with any bitmap graphics, PColl 
will return a true (-1) value, otherwise PColl will return false 
(0).

Before using PColl, a DoColl must previously have been executed. Please 
refer to DoColl for more information.


@ENDNODE PColl

@NODE DoColl "COLLSLIB"

@{fg shine}Statement: DoColl@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : DoColl 

DoColl is used to perform sprite/bitmap collision checking. Once DoColl 
is executed, the PColl and/or SColl functions may be used to check for 
sprite/bitmap or sprite/sprite collisions.

Before DoColl may be used with PColl, the type of bitmap collisions to 
be detected must have been specified using one of the SetColl, 
SetCollOdd or SetCollHi commands.

After executing a DoColl, PColl and SColl will return the same values 
until the next time DoColl is executed.
@ENDNODE DoColl

@NODE MAIN "COLLSLIB"

.-----------------------------------------------------------------------------.
|                                  @{b}COLLSLIB@{ub}                                   |
`-----------------------------------------------------------------------------'

                             @{"     Overview     " link OVERVIEW}

                               Command Index                                

                              @{" DoColl         " link DoColl}
                              @{" PColl          " link PColl}
                              @{" RectsHit       " link RectsHit}
                              @{" SColl          " link SColl}
                              @{" SetColl        " link SetColl}
                              @{" SetCollHi      " link SetCollHi}
                              @{" SetCollOdd     " link SetCollOdd}
                              @{" ShapesHit      " link ShapesHit}
                              @{" ShapeSpriteHit " link ShapeSpriteHit}
                              @{" SpritesHit     " link SpritesHit}

@ENDNODE MAIN

