@DataBase "LotanPrint"
@$VER: LOTANPRINTLIB V1.1 (27.01.2007)- Updated by mrodfr.
@Node Main "LotanPrint"

  @{b}Lotan's Print Library 0.02 (10-03-99)@{ub}

    @{" Printf  " link Printf} Statement
    @{" Stringf " link Stringf} Function (String)

  @{b}Author@{ub}

    Olivier Laviale, Doumenge 46230 MontDoumerc, FRANCE

  @{b}Overview@{ub}

    @{fg highlight}Printf@{fg text} and @{fg highlight}Stringf@{fg text} are  general  command  replacement  for  printing  and  string
    formating operations.

    @{fg highlight}Printf@{fg text} and @{fg highlight}Stringf@{fg text} don't use any Blitz commands to perform convertions  and  misc
    operations , that's why it is a little big (about 1200 bytes), but this is really
    smaller thant using @{b}PrintLib@{ub} + @{b}StringFuncLib@{ub}.

  @{b}Limitations@{ub}

    The maximum output string length is fixed to 8 Ko, and the  number  of  arguments
    @{i}limited @{ui} to  256.  If you have problems with that limitations write me. It's very
    easy to fix.

    @{fg highlight}Printf@{fg text} works only with console windows (CLI), it will not affect any RastPort  or
    BitMap. Use @{fg highlight}Stringf@{fg text}, to format the string, and an apropriate function (@{fg highlight}DrText@{fg text} for
    a RastPort...).

  @{b}See also@{ub}

    @{" DrText " link LotanDraw.guide/DrText}

    @{" History " link HIST}
    @{" Example " link EXAM}
@EndNode

@Node Printf "LotanPrint : Printf"

  @{b}@{u}Printf@{ub}@{uu}

    @{b}Modes@{ub}    : Amiga
    @{b}Syntax@{ub}   : Printf Str
               Printf Str,...

    @{b}Function@{ub} : Prints a formated string.

               This function can perform data  conversion,  justify  your  text,  add
               color and style.

               Generaly a place-holder begining with  a  '%'  add  something  to  the
               string,  while  a  place-holder  begining  with a '\' allow you to use
               specials formating.

               @{b}Format & Specials@{ub}

                  @{fg shine}\n@{fg text} : Adds an end of line (EOL) char ($A).

                       @{fg highlight}Printf@{fg text} "\n\n\n\n"

                  @{fg shine}\d@{fg text} : Will erase all characters between  the  previous  EOL  and  it
                       (console mode).

                       @{fg highlight}Printf@{fg text} "I really\nHate\dLove\nLotan\n"
                          >> I really
                          >> Love
                          >> Lotan

                  @{fg shine}\r@{fg text} : Will reset the console, so only characters after it will still
                       be visible.

                       @{fg highlight}Printf@{fg text} "Who????\rLotan\n"
                          >> Lotan

                  @{fg shine}\S@{fg text} : Changes the style of the text after it as following :

                       @{fg shine}\Sp@{fg text} : 'p' like plain : reset the style of the text. Note  that
                             colors settings will be reseted too.
                       @{fg shine}\Sb@{fg text} : 'b' like bold.
                       @{fg shine}\Si@{fg text} : 'i' like italic.
                       @{fg shine}\Su@{fg text} : 'u' like underlined.

                       @{fg highlight}Printf@{fg text} "\Sbbold \Sp\Siitalic \Sp\Suunderlined\Sp plain\n"
                          >> @{b}bold@{ub} @{i}italic@{ui} @{u}underlined@{uu} plain

                  @{fg shine}\F@{fg text} : Changes the foreground color as following :

                       @{fg shine}\Fb@{fg text} : 'b' as background (color 0)
                       @{fg shine}\Ft@{fg text} : 't' as text       (color 1)
                       @{fg shine}\Fs@{fg text} : 's' as shine      (color 2)
                       @{fg shine}\Fh@{fg text} : 'h' as highlight  (color 3)

                       You can also suply a color number ranging from 0 to 7 instead.

                       @{fg highlight}Printf@{fg text} "\FbL\F1o\Fst\Fha\F4n\F5.\F6.\F7.\n"

                  @{fg shine}\B@{fg text} : Changes the background color as following :

                       @{fg shine}\Bb@{fg text} : 'b' as background (color 0)
                       @{fg shine}\Bt@{fg text} : 't' as text       (color 1)
                       @{fg shine}\Bs@{fg text} : 's' as shine      (color 2)
                       @{fg shine}\Bh@{fg text} : 'h' as highlight  (color 3)

                       You can also suply a color number ranging from 0 to 7 instead.

                       @{fg highlight}Printf@{fg text} "\BbL\B1o\Bst\Bha\B4n\B5.\B6.\B7.\n"

                  @{fg shine}\J@{fg text} : Changes the justification of the strings that will be included.

                       @{fg shine}\Jc@{fg text} : 'c' as char. Sets the character number that will be used
                             for pading. Default character is 32 (blank-space).

                             @{fg highlight}Printf@{fg text} "\Jc[32]"
                             @{fg highlight}Printf@{fg text} "\Jc",32

                       @{fg shine}\Jl@{fg text} : 'l' as left. Sets justification to left.
                       @{fg shine}\Jr@{fg text} : 'r' as right. Sets justification to right.
                       @{fg shine}\Je@{fg text} : 'e' as end. Ends justification.

                       @{fg highlight}Printf@{fg text} "\Jc[32]\Jl'%s[10]'\n","Lotan"
                          >> 'Lotan     '
                       @{fg highlight}Printf@{fg text} "\Jc\Jl'%s'\n",32,"Lotan",10
                          >> 'Lotan     '
                       @{fg highlight}Printf@{fg text} "'\Jr%s[10]%s'\n","Lotan","Lotan",10
                          >> '     Lotan     Lotan'
                       @{fg highlight}Printf@{fg text} "'\Jr%s[10]\Jl%s'\n","Lotan","Lotan",10
                          >> '     LotanLotan     '
                       @{fg highlight}Printf@{fg text} "'\Jr%s[10]\Je%s'\n","Lotan","Lotan",10
                          >> '     LotanLotan'

               @{b}Inclusions@{ub}

                  @{fg shine}%d@{fg text} : Includes a decimal number.  You  can  specify  the  number  of
                       characters  to  return  by  using  barkets, the result will be
                       padded with zeros. Note that  the  padded  result  will  never
                       exceed 10 characters.

                       @{fg highlight}Printf@{fg text} "Num is '%d'\n",33
                          >> Num is '33'
                       @{fg highlight}Printf@{fg text} "Num is '%d[8]'\n",33
                          >> Num is '00000033'

                  @{fg shine}%h@{fg text} : Includes the hexadecimal representation of a number.  You  can
                       specify  the  number of characters to return by using barkets,
                       the result will be paded with zeros.

                       @{fg highlight}Printf@{fg text} "$%h\n","Lotan"
                          >> $10223886
                       @{fg highlight}Printf@{fg text} "$%h\n",$ABBA
                          >> $0000ABBA
                       @{fg highlight}Printf@{fg text} "$%h[32]\n",$ABBA
                          >> $0000000000000000000000000000ABBA

                  @{fg shine}%s@{fg text} : Includes  a  string.  The  argument   corresponding   to   the
                       place-holder  can  either  be  a  string  or  a  pointer to an
                       absolute memory location. In both cases the copy of the string
                       will stop on the first null-char found.

                       @{fg highlight}Printf@{fg text} "'%s'\n","Lotan"
                          >> 'Lotan'

                       Used with justification you can  specify  the  length  of  the
                       string  that  should  be  formated. Don't forget to use @{fg shine}\Je@{fg text} to
                       avoid bad manipulations.

                       @{fg highlight}Printf@{fg text} "\Jl'%s[20]'\n","Lotan"
                          >> 'Lotan               '
                       @{fg highlight}Printf@{fg text} "\Jl'%s'\n","Lotan",20
                          >> 'Lotan               '

                  @{fg shine}%c@{fg text} : Includes a character. This is really usefull as  blitz  limits
                       the number of available characters for the tokens.

                       @{fg highlight}Printf@{fg text} "Durr%c[233]e de la piste :\n"
                          >> Durr�e de la piste :
                       @{fg highlight}Printf@{fg text} "Durr%ce de la piste :\n",233
                          >> Durr�e de la piste :

                  @{fg shine}%p@{fg text} : Includes a repeated character. The character to include is set
                       with @{fg shine}\Jc@{fg text}, default character is a blank space (32).

                       @{fg highlight}Printf@{fg text} "'%p[5]'"
                       @{fg highlight}Printf@{fg text} "'%p'",5
                          >> '     '
                       @{fg highlight}Printf@{fg text} "\Jc[46]'%p[5]'"
                       @{fg highlight}Printf@{fg text} "\Jc'%p'",46,5
                          >> '.....'

                  @{fg shine}%q@{fg text} : Includes a quote character.

                       @{fg highlight}Printf@{fg text} "He said : %qHello%q, so I reply %qSo...%q\n"
                          >> He said : "Hello", so I reply "So..."

    @{b}Warnings@{ub} : The first argument must always be a string. For example @{i}@{fg highlight}Printf@{fg text} 9 @{ui} will
               consider @{i}9 @{ui}as the address of the first string...

               On the other hand you are allowed to specify the address of  a  string
               instead of giving a string as argument. This is really a good thing as
               it will save a lot of executable size.

                  @{fg highlight}Printf@{fg text} ?LN,10,2,?OLI
                    >> 'Lotan' Time : 10:02

                  LN:   @{fg highlight}Dc@{fg text}.b "'%s' Time : %d[2]:%d[2]\n",0
                  OLI:  @{fg highlight}Dc@{fg text}.b "Lotan",0
                  @{fg highlight}Even@{fg text}

    @{b}See also@{ub} : @{" Print    " link printlib.guide/Print}
               PutStr() on dos.doc
@EndNode
@Node Stringf "LotanPrint : Stringf"

  @{b}@{u}Stringf@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.s @{ui}= Stringf(Str)
               @{i}rc.s @{ui}= Stringf(Str,...)

    @{b}Function@{ub} : Same as @{fg highlight}Printf@{fg text} but will create a new string instead of printing it.

    @{b}Example@{ub}  : rc.s = @{fg highlight}Stringf@{fg text}("\SbLotan\Sp is \Fs\Bt%s\Sp\n","a nice guy, that's it!!")

    @{b}See also@{ub} : @{" Printf " link Printf}
@EndNode

@Node HIST "LotanPrint : History"

  @{b}@{u}History@{ub}@{uu}

    @{b}0.00@{ub}

      - No fancy feature... only a try in arguments managing.

    @{b}0.01@{ub}

      - Added end of line special char (@{fg shine}\n@{fg text}).
      - Added strings inclusion (@{fg shine}%s@{fg text}).

    @{b}0.04@{ub}

      - Added colors (@{fg shine}\Fx@{fg text},@{fg shine}\Bx@{fg text}) and styles (@{fg shine}\S@{fg text}) special chars.

    @{b}0.08@{ub}

      - Added decimal (@{fg shine}%d@{fg text}) and hexadecimal (@{fg shine}%h@{fg text}) converters.

    @{b}0.12@{ub}

      - Completely new way to  manage  arguments...  you  can  now  pass  up  to  256
        arguments (instead of 8)

    @{b}0.14@{ub}

      - Rewrite most of the code... deep changes...

    @{b}0.28@{ub}

      - Added the '[]' feature, and so rewrite @{fg shine}%h@{fg text}, @{fg shine}%d@{fg text}, @{fg shine}%s@{fg text}.
      - Added @{fg shine}%c@{fg text} to add any char.

    @{b}0.34@{ub}

      - Added justification (@{fg shine}\Jx@{fg text}).
      - Rewrite @{fg shine}%s@{fg text} to handle justification.

    @{b}0.40@{ub}

      - Remove a stupid bug in []... [0] didn't work...
      - Added @{fg shine}\d@{fg text} and @{fg shine}\r@{fg text}.

    @{b}0.50@{ub}

      - Change buffers allocation... now buffers are  allocated  only  once  (at  the
        start of the program).
      - Added @{fg shine}%p@{fg text} to add repeated chars easily

    @{b}1.00@{ub}

      - Added @{fg shine}%q@{fg text} to add quotes.
      - Change the way justification  is  handled.  Now  you  must  use  @{fg shine}\Je@{fg text}  to  end
        justification, instead of using @{fg shine}\Jx@{fg text} before every @{fg shine}%s@{fg text}.
      - Well everything seams to be alright...

@EndNode
@Node EXAM "LotanPrint : Example"
@Prev Main

  @{b}Example@{ub}

      @{fg highlight}Printf@{fg text} and @{fg highlight}Stringf@{fg text} are easy to use and powerfull. Try this :

      @{fg highlight}Printf@{fg text} "\FhHello\Fs\Sb \Jl\Jc[46]%s[20]\Sp Time is %d[2]:%d[2] - $%h[32]\n","Lotan",14,3,$ABBA
        >> @{fg highlight}Hello@{fg shine} @{b}Lotan...............@{ub}@{fg text} Time is 14:03 - $0000000000000000000000000000ABBA

      @{fg highlight}Format@{fg text} "00"
      @{fg highlight}NPrint Chr$@{fg text}($9B),"33mHello",@{fg highlight}Chr$@{fg text}($9B),"32m",@{fg highlight}Chr$@{fg text}($9B),"1m ",@{fg highlight}LSet$@{fg text}("Lotan",20),@{fg highlight}Chr$@{fg text}($9B),"0m Time is ",@{fg highlight}Str$@{fg text}(14),":",@{fg highlight}Str$@{fg text}(3)," - $",@{fg highlight}Hex$@{fg text}($ABBA)
        >> @{fg highlight}Hello@{fg shine} @{b}Lotan@{ub}@{fg text}                Time is 14:03 - $0000ABBA

      As you can see using old commands is really a hell of work, and the  result  is
      not as good as we can espect because Blitz command are not especially powerful.
@EndNode
