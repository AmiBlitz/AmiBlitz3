@DATABASE GADGETSLIB
@Author Conversion program
@$VER: GADGETSLIB V1.1 (27.01.2007)- Updated by mrodfr.
@NODE OVERVIEW "�berblick zu GADGETSLIB"

                                  @{b}@{u}�berblick@{ub}@{uu}


                          Eine Acid Software Library

                         Konvertiert nach AmigaGuide von

                            Red When Excited Ltd

                 Verwendet mit der Erlaubnis von Acid Software

          Bearbeitet und fehlerbereinigt von Toby Zuijdveld 27/02/1999.
                       mailto:hotcakes\@abacus.net.au

     Deutsche �bersetzung von Margit M�ring, Marco M�ring und Franz Schlick.
          Bestandteil der deutschsprachigen Amiblitz Supportpage Amiforce.
                            @{b}@{u}http://www.amiforce.de@{ub}@{uu} 

@ENDNODE OVERVIEW

@NODE SetPropInfo "GADGETSLIB"

@{fg shine}Statement: SetPropInfo@{fg text}
--------------------------------------------------------------------------------
Modes  : Amiga
Syntax : SetPropInfo GadgetList#,Id,visible,total[,current]

Dieses Kommando erlaubt ihnen Proportionale Gadgets einzurichten das sie 
genauso benutzt werden k�nnen wie Gadgets aus der gadtools library.  
Auf diese Weise k�nnen sie die Gr��e des Pot und des K�rpers eines 
Propgadget festlegen indem sie die spezifizierten Werte wie total und visible
setzen, wie im GadTools GTScroller Kommando.

Ein Gadget das mit diesem Kommando eingerichtet wurde, kann anschlie�end 
im traditioneller Manier verwendet werden.

@ENDNODE SetPropInfo

@NODE GetPropCurrent "GADGETSLIB"

@{fg shine}Statement: GetPropCurrent@{fg text}
--------------------------------------------------------------------------------
Modes  : Amiga
Syntax : pos=GetPropCurrent(GadgetList#,Id)

Gibt die gegenw�rtige Position des K�rpers eines Propgadgets zur�ck.
Beachten sie, da� das Propgadget mit dem SetPropInfo-Kommando 
eingerichtet sein mu�, bevor sie dieses Kommando aufrufen. 
Der zur�ckgegebene Wert dieses Kommandos ergibt die gegenw�rtige 
Position des K�rpers aus einem Bereich von 0 bis (total-visible).

@ENDNODE GetPropCurrent

@NODE MoveProp "GADGETSLIB"

@{fg shine}Statement: MoveProp@{fg text}
--------------------------------------------------------------------------------
Modes  : Amiga
Syntax : MoveProp GadgetList#,Id,current[,window_redraw]

Dieses Kommando erlaubt ihnen eine Propgadget-Position zu setzen.
Dies sollte nur benutzt werden bei Gadgets die durch das Kommando 
SetPropInfo initialisiert wurden.

Das optinale window_redraw flag erlaubt ihnen zu spezifizieren ob das Gadget nach �nderungen neugezeichnet werden soll oder nicht.
 
@ENDNODE MoveProp

@NODE TextGadget "GADGETSLIB"

@{fg shine}Statement: TextGadget@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : TextGadget GadgetList#,X,Y,Flags,Id,Text$

Das TextGadget Kommando f�gt ein Textgadget der Gadgetliste zu.
Ein Textgadget ist der einfachste Typ eines Gadgets und besteht aus 
einer Reihe von Zeichen, optional von einem Rahmen umgeben.

Flags sollte aus der Tabelle am Beginn dieses Kapitels ausgew�hlt werden 

Booleangadgets sind die einfachsten Typen eines verf�gbaren Gadgets. 
Booleangadgets sind standardm��ig "Aus", au�er der User bet�tigt das 
Gadget mit der Maus, das schaltet das gaget auf "An". 
Wenn der Mausknopf losgelassen wurde, wird diese Gadgetart wieder auf
den "AUS" Status zur�ckspringen. Booleangadgets werden oft genutzt 
f�r "OK" oder "CANCEL" Gadgettypen.

Tooglegadgets unterscheiden sich, indem sich ihr Status bei jedem Klick mit 
der Maus auf "AN oder "AUS" �ndert. Als Beispiel, wenn man auf ein 
Tooglegadget klickt das auf "An" steht, wird das Gadget auf "AUS" 
geschaltet und beh�lt diesen Status. 

X und Y spezifizieren wo im Fenster das Gadget gezeichnet werden soll.
Abh�ngig von den Flags settings, werden Gadgets relativ von allen 4 
Fensterecken positioniert. Wenn ein Gadget relativ zur rechten unteren 
Ecke eines Fensters positioniert werden soll, sollten die entsprechenden 
X oder Y Parameter einen negativen Wert erhalten.

Id ist ein Identifikationswert das diesem Gadget gegeben wird.
Alle Gadgets in einer Gadgetliste sollten eigene Id-Nummern haben. Dies 
erm�glicht ihnen herauszufinden welches Gadget gew�hlt wurde.
Id sollte immer eine Positive Nummer haben,  au�er 0 !

Text$ ist der aktuelle Text den das Gadget enthalten soll.

@ENDNODE TextGadget

@NODE StringGadget "GADGETSLIB"

@{fg shine}Statement: StringGadget@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : StringGadget GadgetList#,X,Y,Flags,Id,Maxlen,Width

StringGadget erlaubt ihnen ein Texteingabefeld-Gadget im Intuitions-stil
zu erstellen. Wenn es aktiviert wurde, wird ein Cursor aktiviert und wartet 
auf die Eingabe eines Textes durch die Tastatur des Benutzers.

X und Y spezifizieren die Gadgetposition relativ zur linken oberen Ecke des 
aktiven Fensters.

Schauen Sie zum Anfang des Kapitels f�r alle relevanten Flags-angaben 
f�r ein Stringgadget.

Id ist ein Identifikationswert das diesem Gadget gegeben wird.
Alle Gadgets in einer Gadgetliste sollten eigene Id-Nummern haben. Dies 
erm�glicht ihnen herauszufinden welches Gadget gew�hlt wurde.
Id sollte immer eine Positive Nummer haben,  au�er 0 !

Maxlen bezieht sich auf die maximale Nummer an Zeichen die in diesem 
Gadget angezeigt werden sollen.

Width bezieht sich auf die Breite des Gadgets (in Pixel).
Ein Stringgadget hat die Breite wie in Maxlen angegeben wurde.
Wenn die Eingabe dies �berschreitet, wird zum linken Gadgetrand gescrollt 
wenn es n�tig wird.
 
@ENDNODE StringGadget

@NODE PropGadget "GADGETSLIB"

@{fg shine}Statement: PropGadget@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : PropGadget GadgetList#,X,Y,Flags,Id,Width,Height,[propflags,propactivation[,typemask]]

Das PropGadget Kommando wird benutzt um ein Proportinales Gadget 
zu erzeugen. Proportionalgadgets bringen einem Programm ein Gadget 
mit einem Schieberegler, dies erlaubt dem Benutzer den Regler zu 
justieren und einen anderen Effekt einzustellen. Proportionalgadgets 
werden meistens benutzt um einen 'R G B' Schieberegler zu erzeugen, 
wie sie in manchen Grafikprogrammen genutzt werden.

Proportionalgadgets haben 2 Hauptelemente, ein 'pot' (Kurzform f�r 
Potentiometer), und einen 'body' .

Der 'pot' bezieht sich auf die Position des Schiebereglers, und bewegt 
sich in einem Bereich zwischen 0 und 1. Ein Beispiel:
Ein Proportionalgadget das auf die H�lfte bewegt wird, hat einen Wert 
von '.5'. Der 'body' bezieht sich auf die Gr��e die das Gadget hat, und
ist auch in einem Bereich von 0 bis 1. Erneut verwenden wir den RGB-
Schieberegler als Beispiel, jeder Regler kann Werte anzeigen die einen
Bereich zwischen 0 bis 15 annehmen - dies gibt eine Unitgr��e, oder
einen 'body' von 1/16 oder '.0625'

Der 'pot' beschreibt also wo der Regler ist, der 'body' beschreibt die 
Gr��e 

Proportionalgadgets k�nnen benutzt werden um Horizontalschieberegler, 
Verticalschieberegler, oder eine Kombination aus beiden darzustellen.

Schauen Sie zum Anfang des Kapitels f�r alle relevanten Flags-angaben 
f�r Propgadgets.

X und Y spezifizieren die Gadgetposition relativ zur linken oberen Ecke des 
aktiven Fensters.

Width und Height bezieht sich auf die Gr��e des Bereichs in dem sich der 
Schieberegler bewegt.

Id ist eine Identifikationsnummer (die nicht 0 sein darf) die ihnen erlaubt
das Gadget zu indentifizieren wenn �nderungen am Gadget erfolgt sind.

Proportionalgadgets werden durch die Kommandos SetVProp und SetHProp
beeinflusst,und lesen die VPropPot, VPropBody, HPropPot und HPropBody 
Funktionen.

                              Neue Parameter
                              ================

Diese neue Version des PropGadget Kommandos erlaubt ihnen den extra flag
Wert f�r das Gadget zu setzen. Wenn sie diesen extra flag Wert benutzen,
wird das Propgadget initialisiert durch die Benutzung der OS flags.  
Alle Flags Parameter die in der OS-Include definiert sind k�nnen benutzt werden,
dies erlaubt die Benutzung von Flags wie z.B. PROPNEWLOOK um die Gadgets wie im 
OS2+look erscheinen zu lassen.

Der Parameter 'flags' wird gewechselt wenn der extra flag Parameter angegeben 
wird.

Die extra Parameter sind:

    propflags    Definiert Propgadget spezifische flags (z.B PROPNEWLOOK)
    propactication    Kontroliert Aktivierungs-situationen f�r das Gadget
    type        Wechselt den Typ des Gadgets (z.B. macht es zu einem 
    GIMMEZEROZERO   Rahmengadget)

@ENDNODE PropGadget

@NODE ArrowGadget "GADGETSLIB"

@{fg shine}Statement: ArrowGadget@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ArrowGadget GadgetList#,Id,direction,x,y,relativity[,special_flags]

Dies ist ein neues Kommando f�r diese Library das ihnen Zugriff auf das 
von OS  geliefert Set von 4 Pfeilgadgets erm�glicht. 
Diese Pfeilgadgets k�nnen sie in den Rahmen der Workbenchfenster sehen.
Dieses Kommando erlaubt ihnen diese Pfeilgadgets als normale Gadgets in 
ihrer GadgetLists zu erstellen.

Die Relativit�t ist definiert als:
#RIGHTREL    =%1        Relative zum rechten Fenster
#BOTTOMREL    =%10        Relative nach unten zum Fenster

Special flags werden gesetzt als:
#ISGZZGADGET    =%1        Setzt es in den Rahmen eines GIMMEZEROZERO Fensters
#IMMEDIATE    =%10        Empf�ngt #IDCMP_GADGETDOWN events von diesem
                Gadget

Richtung ist eines aus:
#LEFTIMAGE    =$0A        Linkes-Pfeilgadgetbild
#UPIMAGE    =$0B        Oberes-Pfeilgadgetbild
#RIGHTIMAGE    =$0C        Rechtes-Pfeilgadgetbild
#DOWNIMAGE    =$0D        Unteres-Pfeilgadgetbild

@ENDNODE ArrowGadget

@NODE ShapeGadget "GADGETSLIB"

@{fg shine}Statement: ShapeGadget@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ShapeGadget GadgetList#,X,Y,Flags,Id,Shape#[,Shape#]

Das ShapeGadget Kommando erlaubt ihnen ein Gadget zu erzeugen das
Garfiken enth�lt.
Der Shape# Parameter bezieht sich auf ein Shapeobjekt das die Grafik enth�lt 
und im Shapegadget angezeigt werden soll.
 
Das ShapeGadget Kommando kann auch eine alternative Grafik anzeigen wenn
das Gadget gew�hlt wurde.

Alle anderen Parameter sind identisch zu den Angaben im Kommando TextGadget.

@ENDNODE ShapeGadget

@NODE SetHProp "GADGETSLIB"

@{fg shine}Statement: SetHProp@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SetHProp GadgetList#,Id,Pot,Body

SetHProp wird benutzt um die horizontale Sliderqualit�t eines Proportionalgadgets
zu ver�ndern. Pot und Body sollten in einem Bereich zwischen 0 und 1 sein.
 
Wenn SetHProp ausgef�hrt wurde wenn das spezifizierte Gadget schon 
gezeichnet wurde, mu� das Kommando Redraw zum neuzeichnen der 
�nderungen aufgerufen werden. 

Bitte schauen sie hierzu auch das PropGadget Kommando f�r mehr 
Informationen eines Proportionalgadgets.

@ENDNODE SetHProp

@NODE SetVProp "GADGETSLIB"

@{fg shine}Statement: SetVProp@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SetVProp GadgetList#,Id,Pot,Body

SetVProp wird benutzt um die vertikale Sliderqualit�t eines Proportionalgadgets
zu ver�ndern. Pot und Body sollten in einem Bereich zwischen 0 und 1 sein.
 
Wenn SetVProp ausgef�hrt wurde wenn das spezifizierte Gadget schon 
gezeichnet wurde, mu� das Kommando Redraw zum neuzeichnen der 
�nderungen aufgerufen werden. 

Bitte schauen sie hierzu auch das PropGadget Kommando f�r mehr 
Informationen eines Proportionalgadgets.

@ENDNODE SetVProp

@NODE HPropPot "GADGETSLIB"

@{fg shine}Function: HPropPot@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : HPropPot (GadgetList#,Id)

Die HPropPot Funktion erlaubt ihnen den 'pot' eines Proportionalgadgets
neu zu definieren. 

HPropPot wird eine Nummer von 0 bis zu 1 (aber nicht enthalten) 
zur�ckgeben. Dies ist der Wert der f�r den horizontalen "Body" gesetzt 
wurde.  

Bitte schauen sie hierzu auch das PropGadget Kommando f�r mehr 
Informationen eines Proportionalgadgets.

@ENDNODE HPropPot

@NODE HPropBody "GADGETSLIB"

@{fg shine}Function: HPropBody@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : HPropBody (GadgetList#,Id)

Die HPropBody Funktion erlaubt ihnen den 'body' eines Proportionalgadgets
neu zu definieren. 

HPropBody wird eine Nummer von 0 bis zu 1 (aber nicht enthalten) 
zur�ckgeben. Dies ist der Wert der f�r den horizontalen "body" gesetzt 
wurde.  

Bitte schauen sie hierzu auch das PropGadget Kommando f�r mehr 
Informationen eines Proportionalgadgets.

@ENDNODE HPropBody

@NODE VPropPot "GADGETSLIB"

@{fg shine}Function: VPropPot@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : VPropPot (GadgetList#,Id)

Die VPropPot Function erlaubt ihnen die gew�hlten 'pot' settings 
eines Proportionalgadget neu zu definieren. 

VPropPot wird eine Nummer von 0 bis zu 1 (aber nicht enthalten) 
zur�ckgeben. Dies ist der Wert der f�r den vertikalen "pot" gesetzt 
wurde.  

Bitte schauen sie hierzu auch das PropGadget Kommando f�r mehr 
Informationen eines Proportionalgadgets.

@ENDNODE VPropPot

@NODE VPropBody "GADGETSLIB"

@{fg shine}Function: VPropBody@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : VPropBody (GadgetList#,Id)

Die VPropBody Funktion erlaubt ihnen den 'body' eines Proportionalgadgets
neu zu definieren. 

VPropBody wird eine Nummer von 0 bis zu 1 (aber nicht enthalten) 
zur�ckgeben. Dies ist der Wert der f�r den vertikalen "body" gesetzt 
wurde.  

Bitte schauen sie hierzu auch das PropGadget Kommando f�r mehr 
Informationen eines Proportionalgadgets.

@ENDNODE VPropBody

@NODE Redraw "GADGETSLIB"

@{fg shine}Statement: Redraw@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Redraw Window#[,Id]

Das ReDraw Kommando wird das spezifizierte Gadget (Id) im spezifizierten 
Fenster (Window) neuzeichnen.  Dieses Kommando wird meistens genutzt
wenn ein Proportionalgadget modifiziert wurde durch SetHProp oder 
SetVProp und neu gezeichnet werden muss, oder wenn ein Stringgadget 
geleert werden muss per ClearString.

Wenn sie dieses Kommando benutzen ohne einen Id Parameter anzugeben
werden alle Gadgets die dem Fenster zugef�gt wurden neugezeichnet.

@ENDNODE Redraw

@NODE Gap1 "GADGETSLIB"

@{fg shine}Statement: Gap1@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Gap1 *Gap2

@ENDNODE Gap1

@NODE Gap2 "GADGETSLIB"

@{fg shine}Statement: Gap2@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Gap2

@ENDNODE Gap2

@NODE Toggle "GADGETSLIB"

@{fg shine}Statement: Toggle@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Toggle GadgetList#,Id [,On|Off]

Das Toggle Kommando aus der gadget library wird benutzt um
zwischen den Status des gew�hlten Gadgets zu wechseln.  

@ENDNODE Toggle

@NODE Gap3 "GADGETSLIB"

@{fg shine}Statement: Gap3@{fg text}
--------------------------------------------------------------------------------
Modes  :
Syntax : Gap3 *GadgetBorder X,Y,Width,Height

The GadgetBorder command may be used to draw a rectangular border into the
currently used window.

Proportional gadgets and shape gadgets do not have borders automatically
created for them. The GadgetBorder command may be used, once a window is
opened, to render borders around these gadgets.

X,Y, Width and Height refer to the position of the gadget a border is
required around. GadgetBorder will automatically insert sapces between the
gadget and the border. The Borders command may be used to alter the amount
of spacing.

Of course, GadgetBorder may be used to draw a border around any arbitary
area, regardless of whether or not that area contains a gadget.

@ENDNODE Gap3

@NODE GadgetBorder "GADGETSLIB"

@{fg shine}Statement: GadgetBorder@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : GadgetBorder X,Y,Width,Height

Das GadgetBorder Kommando wird benutzt um einen rechteckigen Rahmen
im benutzten Fenster zu zeichnen.

Bei Proportionalgadgets und Shapegadgets werden nicht automatisch Rahmen 
erzeugt. Das GadgetBorder Kommando wird benutzt wenn ein Fenster ge�ffnet 
wurde um Rahmen um diese Art von Gadgets zu erzeugen. 

X,Y, Width und Height beziehen sich auf die Position des Gadgets, ein Rahmen
um das Gadget ist n�tig. GadgetBorder wird automatisch einen Abstand zwischen 
Gadget und Rahmen erzeugen. Das Borders Kommando wird hierf�r benutzt um
den Wert des Abstand zu �ndern. 

GadgetBorder wird benutzt um einen Rahmen um jeden Bereich zu zeichnen, ohne 
R�cksicht zu nehmen ob dieser Bereich ein Gadget enth�lt oder nicht.

@ENDNODE GadgetBorder

@NODE Borders "GADGETSLIB"

@{fg shine}Statement: Borders@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Borders [On|Off]|[Width,Height]

Borders erf�llt 2 Zwecke. Als erstes wird Borders benutzt um das automatische 
erzeugen von Rahmen um ein Text oder Stringgadget an oder aus zu schalten
Rahmen werden gezeichnet wenn ein Text oder Stringgadget-Kommando 
ausgef�hrt wird. Wenn sie sie das nicht w�nschen, sollten sie Borders Off 
ausf�hren bevor ein Text oder Stringgadget  Kommando ausgef�hrt wird.

Borders wird als zweite M�glichkeit aufgerufen um den Abstand zwischen 
einem Gadget und seinem Rahmen zu spezifizieren. Width  bezieht sich auf den 
Linken/Rechten Abstand, und Height zum Oberen/Unteren Abstand.

@ENDNODE Borders

@NODE ActivateString "GADGETSLIB"

@{fg shine}Statement: ActivateString@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ActivateString Window#,Id

ActivateString wird benutzt um ein Stringgadget automatisch zu aktivieren.
Dies ist identisch, als w�rde der User das Stringgadget selbst aktivieren

Es ist oft n�tzlich wichtige Stringgadgets selbst zu aktivieren, da dem User
meist die Tastatur n�her ist als die Maus.

@ENDNODE ActivateString

@NODE ResetString "GADGETSLIB"

@{fg shine}Statement: ResetString@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ResetString GadgetList#,Id

ResetString erlaubt ihnen ein Stringgadget das mit GadgetListe# und Id angegeben 
wird zur�ckzusetzen. Die Mauspfeilposition wird zur �u�ersten linken Ecke des 
Stringgadgets gesetzt.

@ENDNODE ResetString

@NODE StringText$ "GADGETSLIB"

@{fg shine}Function: StringText$@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : StringText$ (GadgetList#,Id)

Die Stringtext$ Funktion erlaubt ihnen die genauen Inhalte eines Stringgadgets 
zu bestimmen. StringText$ gibt einen String von Zeichen aus die den Inhalt des 
Stringgadgets entsprechen.

@ENDNODE StringText$

@NODE ClearString "GADGETSLIB"

@{fg shine}Statement: ClearString@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ClearString GadgetList#,Id

ClearString wird benutzt um den Text in dem spezifizierten StringGadget zu l�schen.
Die Mauspfeilposition wird zur �u�ersten linken Ecke des Stringgadgets gesetzt.

Wenn ein Stringgadgetinhalt gel�scht wird das auf dem Window dargestellt wurde,
wird der Text nicht aus dem Stringgadget entfernt. Das ReDraw Kommando muss 
hierzu ausgef�hrt werden.

@ENDNODE ClearString

@NODE GadgetList "GADGETSLIB"

@{fg shine}Statement: GadgetList@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : GadgetList List of Gadgets

@ENDNODE GadgetList

@NODE GadgetPens "GADGETSLIB"

@{fg shine}Statement: GadgetPens@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : GadgetPens Foreground Colour[,Background Colour]

GadgetPens bestimmt die Textfarben die benutzt werden wenn ein Gadget mit dem 
TextGadget Kommando erzeugt werden. Der Standardwert f�r die Vordergrundfarbe
ist 1, und f�r die Hintergrundfarbe 0.

@ENDNODE GadgetPens

@NODE BorderPens "GADGETSLIB"

@{fg shine}Statement: BorderPens@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : BorderPens Highlight Colour,Shadow Colour

BorderPens erlaubt ihnen die Farben f�r Gadgetrahmen die benutzt werden 
sollen zu bestimmen. Gadget Rahmen werden erstellt bei den TextGadget, 
StringGadget und GadgetBorder Kommandos.

HighLight Colour bezieht sich auf die Farbe der oberen linken Ecke des Rahmens, 
wobei Shadow Colour sich auf die rechte untere Ecke bezieht.

Der Standardwert f�r HighLight Colour ist 1. Der Standardwert f�r 
die Shadow Colour ist 2.

@ENDNODE BorderPens

@NODE GadgetJam "GADGETSLIB"

@{fg shine}Statement: GadgetJam@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : GadgetJam Jammode

GadgetJam erlaubt ihnen zu bestimmen welche Textrendermethode benutzt 
werden soll bei verwendung des TextGadget Kommandos.
Sehen sie hierzu auch das WJam Kommando im Windowskapitel f�r mehr
Informationen der Jam modes.

@ENDNODE GadgetJam

@NODE SelectMode "GADGETSLIB"

@{fg shine}Statement: SelectMode@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SelectMode 1=Box, 0=Inverse

SelectMode wird benutzt um zu definieren welches Gadgetrendering verwendet 
werden soll. Modes sind 1 f�r eine Box und 0 f�r invers. 

@ENDNODE SelectMode

@NODE SetString "GADGETSLIB"

@{fg shine}Statement: SetString@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SetString GadgetList#,Id,String$

SetString wird benutzt um die Inhalte eines Stringgadgets das mit dem Stringgadget 
Kommando erzeugt wurde zu initialisieren.
Das Stringgadget das angegeben wurde durch GadgetList# und Id, wird  angezeigt.
Sie ben�tigen das ReDraw Kommando um einen anderen Text anzuzeigen.

@ENDNODE SetString

@NODE ButtonGroup "GADGETSLIB"

@{fg shine}Statement: ButtonGroup@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ButtonGroup Group

ButtonGroup erlaubt ihnen zu bestimmen welche Gruppe wieviele Buttons 
zugef�gt werden. Jeder Button der erzeugt wurde, wird indentifiziert �ber 
die spezifizierte Gruppe
 
Das Ergebnis von allen ist, das Buttongadgets nur gegenseitig exclusive 
zu anderen Buttongadgets in der selben Gruppe sind.

'Group' muss eine positive Nummer gr��er als 0 sein. Jedes Buttongadgets 
das erzeugt wurde bevor ein 'ButtonGroup' Kommando ausgef�hrt wurde 
wird der group 1 zugef�gt.

@ENDNODE ButtonGroup

@NODE GadgetStatus "GADGETSLIB"

@{fg shine}Function: GadgetStatus@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : GadgetStatus (GadgetList#,Id)

GadgetStatus wird benutzt um den Status des angegebenen Gadgets
zu pr�fen. 

Bei einem "Schaltergadget" wird GadgetStatus true (-1) wenn das 
Gadget auf An steht , oder false (0) wenn das Gadget auf 
Aus steht zur�ckgeben.

Bei einem "cycling text Gadget", wird GadgetStatus einen Wert von 1 
oder gr��er ausgeben. Dies Repr�sentiert den aktuellen angezeigten 
Text im Gadget.

@ENDNODE GadgetStatus

@NODE ButtonId "GADGETSLIB"

@{fg shine}Function: ButtonId@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : ButtonId (GadgetList#,ButtonGroup)

ButtonId wird benutzt um festzustellen welches Gadget aus einer Gruppe 
selektiert wurde.  Es wird die GadgetId des Gadgets das selektiert wurde 
zur�ckgegeben.

@ENDNODE ButtonId

@NODE Enable "GADGETSLIB"

@{fg shine}Function: Enable@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Enable (GadgetList#,Id)

Ein Gadget das ausgeschaltet wurde ist "ge-ghostet" und kann vom User 
nicht angew�hlt werden. Die Kommandos Enable und Disable erlauben es 
dem Programmierer auf dieses Funktion aus Intuition zuzugreifen.

Enable gibt die Benutzung des Gadgets frei.

@ENDNODE Enable

@NODE Disable "GADGETSLIB"

@{fg shine}Function: Disable@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : Disable (GadgetList#,Id)

Ein Gadget das ausgeschaltet wurde ist "ge-ghostet" und kann vom User 
nicht angew�hlt werden. Die Kommandos Enable und Disable erlauben es 
dem Programmierer auf dieses Funktion aus Intuition zuzugreifen.

Disable schaltet das Gadget ab. ("ghosten")

@ENDNODE Disable

@NODE SetGadgetStatus "GADGETSLIB"

@{fg shine}Function: SetGadgetStatus@{fg text}
--------------------------------------------------------------------------------
Modes  : 
Syntax : SetGadgetStatus (GadgetList#,Id,Value)

SetGadgetStatus wird benutzt um ein Cycle-Gadget einen einzelnen Text zu setzen.
ReDraw sollte benutzt werden um einen Refresh f�r das Gadget zu zeichnen, damit 
der neue text gezeichnet wird.  

NEUES GADGETS BEISPIEL:

;
; new gadget types
;
WBStartup:FindScreen 0   ;wird auf der Workbench ge�ffnet
TextGadget 0,32,14,0,0,"CYCLE 1|CYCLE 2|CYCLE 3" 

ButtonGroup 1 ;erste Gruppe von Radiokn�pfen folgt
For i=1 To 5
  TextGadget 0,32,14+i*14,512,i,"CHANNEL #"+Str$(i)
Next

ButtonGroup 2 ;zweite Gruppe von Radiokn�pfen folgt
For i=6 To 10
  TextGadget 0,32,14+i*14,512,i,"BAND #"+Str$(i)
Next
Window 0,20,20,160,180,$1008,"GADGET TEST",1,2,0 

Repeat        ;wartet auf die bet�tigung des Schlie�symbols
  ev.l=WaitEvent
Until ev=$200
@ENDNODE SetGadgetStatus

@NODE FLAGS

|Bit# | Meaning                                        | Text | String | Prop | Shape |
|-----|------------------------------------------------|------|--------|------|-------|
|   0 | Toggle On|Off                                  |  yes |   no   |  no  |  yes  |
|   1 | Relative to Right Side of Window               |  yes |   yes  |  yes |  yes  |
|   2 | Relative to Bottom of Window                   |  yes |   yes  |  yes |  yes  |
|   3 | Size Relative to Width of Window               |  no  |   no   |  yes |  no   |
|   4 | Size Relative to Height of Window              |  no  |   no   |  yes |  no   |
|   5 | Box Select                                     |  yes |   yes  |  yes |  yes  |
|   6 | Prop Gadget has Horizontal Movement            |  no  |   no   |  yes |  no   |
|   7 | Prop Gadget Has Vertical Movement              |  no  |   no   |  yes |  no   |
|   8 | No Border around Prop Gadget Container         |  no  |   no   |  yes |  no   |
|-----|------------------------------------------------|------|--------|------|-------|

@ENDNODE FLAGS

@NODE MAIN "GADGETSLIB"

.-----------------------------------------------------------------------------.
|                                 @{b}GADGETSLIB@{ub}                                  |
`-----------------------------------------------------------------------------'

                             @{"     �berblick     " link OVERVIEW}

                               Kommando Index

           @{" ActivateString   " link ActivateString}                @{" ArrowGadget      " link ArrowGadget}
           @{" BorderPens       " link BorderPens}                @{" Borders          " link Borders}
           @{" ButtonGroup      " link ButtonGroup}                @{" ButtonId         " link ButtonId}
           @{" ClearString      " link ClearString}                @{" Disable          " link Disable}
           @{" Enable           " link Enable}                @{" GadgetJam        " link GadgetJam}
           @{" GadgetList       " link GadgetList}                @{" GadgetPens       " link GadgetPens}
           @{" GadgetStatus     " link GadgetStatus}                @{" Gap1             " link Gap1}
           @{" Gap3             " link Gap3}                @{" GetPropCurrent   " link GetPropCurrent}
           @{" HPropBody        " link HPropBody}                @{" HPropPot         " link HPropPot}
           @{" MoveProp         " link MoveProp}                @{" PropGadget       " link PropGadget}
           @{" Redraw           " link Redraw}                @{" ResetString      " link ResetString}
           @{" SelectMode       " link SelectMode}                @{" SetGadgetStatus  " link SetGadgetStatus}
           @{" SetHProp         " link SetHProp}                @{" SetPropInfo      " link SetPropInfo}
           @{" SetString        " link SetString}                @{" SetVProp         " link SetVProp}
           @{" ShapeGadget      " link ShapeGadget}                @{" StringGadget     " link StringGadget}
           @{" StringText$      " link StringText$}                @{" TextGadget       " link TextGadget}
           @{" Toggle           " link Toggle}                @{" VPropBody        " link VPropBody}

           @{" Überblick Flags   " link FLAGS}
@ENDNODE MAIN
