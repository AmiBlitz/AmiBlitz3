@DATABASE ToolTypeV1.11
@$VER: ToolType V1.11 (27.01.2007)-Updated by mrodfr-(1999) by Richard Andersson
@NODE MAIN "ToolType V1.11"

    @{b}ToolType V1.10 General Information:@{ub}

  * Blitz Basic II library number         : #151
  * Library size when linked to executable: 430 bytes
  * Number of commands                    : 9
  * Resources automatically freed at end  : Yes
  * RunTime Error Debugger                : Yes

    @{b}Commands summary:@{ub}

  @{" NCheckToolTypeString   " LINK NCheckToolTypeString} Function long
  @{" NFindToolType          " LINK NFindToolType} Function long
  @{" NFreeToolType          " LINK NFreeToolType} Statement
  @{" NGetNextToolTypeString " LINK NGetNextToolTypeString} Function string
  @{" NGetNumberOfToolType   " LINK NGetNumberOfToolType} Function word
  @{" NInitToolType          " LINK NInitToolType} Function long
  @{" NMatchToolTypeValue    " LINK NMatchToolTypeValue} Function word
  @{" NReadToolType          " LINK NReadToolType} Function long
  @{" NWriteToolType         " LINK NWriteToolType} Function word
@ENDNODE


@Node NCheckToolTypeString

    @{b}SYNTAX@{ub}
  @{b}result@{ub}.l = NCheckToolTypeString (@{b}ToolName@{ub}$, @{b}ToolTypeString@{ub}$)

    @{b}FUNCTION@{ub}
  This function checks if a Blitz string holds a specific ToolType. If
  the ToolType is present the ReturnValue is a pointer that should
  be passed as the first parameter to the function NMatchToolTypeValue().

  @{b}ToolName@{ub}
  This string holds the ToolType to check for.

  @{b}ToolTypeString@{ub}
  A string that could be returned from the function
  NGetNextToolTypeString().

  @{b}result@{ub}
  If result is TRUE the specified ToolType is present
  in @{b}ToolTypeString@{ub}.
@EndNode


@Node NFindToolType

    @{b}SYNTAX@{ub}
  @{b}result@{ub}.l = NFindToolType (@{b}#Object@{ub}.w, @{b}ToolName@{ub}$)

    @{b}FUNCTION@{ub}
  This function searches for the specified ToolType. If the ToolType is
  found then the ReturnValue is a pointer that should be passed as the
  first parameter to the function NMatchToolTypeValue().

  None of the ToolTypes need to be read into Blitz strings for this
  function, it's convenient when ToolTypes only need to be examined.

  @{b}#Object@{ub}
  Object to use.

  @{b}ToolName@{ub}
  This string describes the name of the ToolType that is to be found.

  @{b}result@{ub}
  If result is TRUE the specified ToolType is present in the icon's
  .info file.
@EndNode


@Node NFreeToolType

    @{b}SYNTAX@{ub}
  NFreeToolType @{b}#Object@{ub}.w

    @{b}STATEMENT@{ub}
  This statement frees a ToolType Object that is created with
  NReadToolType().  This routine doesn't care if the object
  was not initialized.

  @{b}#Object@{ub}
  Object to use.
@EndNode


@Node NGetNextToolTypeString

    @{b}SYNTAX@{ub}
  @{b}str@{ub}$ = NGetNextToolTypeString (@{b}#Object@{ub}.w)

    @{b}FUNCTION@{ub}
  This function returns the next ToolType and all associated values
  as a string.

  After the last ToolType is reached the next ToolType that will be
  returned is the first one. To find out how many ToolType strings
  exist, use the ReturnValue from the function NGetNumberOfToolType().

  A ToolType with a value/values is restricted to 128 bytes by the OS.

  @{b}#Object@{ub}
  Object to use.

  @{b}str@{ub}
  The returned string holds the ToolType and all associated values like
  this  " AMIGA=1200|4000 ".
@EndNode


@Node NGetNumberOfToolType

    @{b}SYNTAX@{ub}
  @{b}result@{ub}.w = NGetNumberOfToolType (@{b}#Object@{ub}.w)

    @{b}FUNCTION@{ub}
  This function returns the number of ToolTypes that are present
  in the icon's .info file, this should be used to easily fetch
  the right number of ToolType strings.

  @{b}#Object@{ub}
  Object to use.

  @{b}result@{ub}
  If result is TRUE, result will contain the number ToolTypes there
  is in the icon's .info file else it is FALSE.
@EndNode


@Node NInitToolType

    @{b}SYNTAX@{ub}
  @{b}result@{ub}.l = NInitToolType (@{b}Objects@{ub}.l, @{b}*WBStartup@{ub})

    @{b}FUNCTION@{ub}
  This is the Init routine and should always be called before any
  other ToolType function.

  @{b}Objects@{ub}
  This parameter specifies how many ToolType Objects are needed.
  Each Object can hold data about one .info file.

  Maximum number of Objects is 2046.

  @{b}*WBStartup@{ub}
  This is a pointer to a WBStartupMessage, this Message is passed to
  the program from WorkBench, *WBStartup is the ReturnValue from the
  function NWBStartup() that catches the Message.

  With this approach Object 0 is always automatically initialized from
  the .info file of the double clicked icon and the current directory
  is also set to the directory of this icon.

  If this parameter isn't a pointer (but is zero) none of the above
  actions have taken place.

  @{b}result@{ub}
  If some error has occurred then result is FALSE and there is no point
  in calling any other ToolType functions.  Should Always Be Ckecked.
@EndNode


@Node NMatchToolTypeValue

    @{b}SYNTAX@{ub}
  @{b}result@{ub}.w = NMatchToolTypeValue (@{b}ToolType@{ub}.l, @{b}Value@{ub}$)

    @{b}FUNCTION@{ub}
  This function checks if ToolType is set to the specified value.

  None of the ToolTypes need to be read into Blitz strings for
  this function, it's convenient when ToolTypes only need to be
  examined.

  @{b}ToolType@{ub}
  This is the ReturnValue from the function NCheckToolTypeString()
  or NFindToolType().

  @{b}Value@{ub}
  The string that describes a value to search for.

  @{b}result@{ub}
  If result is TRUE then the ToolTypes have one value that is the
  same as specified in second parameter.
@EndNode


@Node NReadToolType

    @{b}SYNTAX@{ub}
  @{b}result@{ub}.l = NReadToolType (@{b}#Object@{ub}.w, @{b}IconName@{ub}$)

    @{b}FUNCTION@{ub}
  This function reads the icon's .info file that is specified by name
  and initializes the ToolType Object.

  If the Object is already initialized this function doesn't care and
  just creates a new Object without deleting the old one - then
  there is no possibile way to preform any actions on the old Object.

  Maximum number of ToolTypes that could be handled is 32767,
  restricted by this Blitz Lib.

  @{b}#Object@{ub}
  Object to use.

  @{b}IconName@{ub}
  The icon's name: ".info" is automatically added to the end of name.

  @{b}result@{ub}
  The result is set to FALSE if the icon's .info file couldn't
  be read.
@EndNode


@Node NWriteToolType

    @{b}SYNTAX@{ub}
  @{b}result@{ub}.w = NWriteToolType (@{b}#Object@{ub}.w, @{b}Array()@{ub}, @{b}IconName@{ub}$)

    @{b}FUNCTION@{ub}
  This function writes the icon's .info file back to disk.

  @{b}#Object@{ub}
  Object to use.

  @{b}Array()@{ub}
  This array holds the pointers (ending with a zero) to strings that
  contain the new ToolTypes to be written. If no ToolType is supplied
  then the first long in the array is zero.

  The new ToolTypes have priority over old ToolTypes so if only
  one ToolType is added or changed all ToolTypes must first be
  read in to Blitz strings.

  Maximum number of ToolTypes that could be handled is 32767,
  restricted by the Blitz Lib.

  @{b}IconName@{ub}
  The icon's name: ".info" is automatically added to the end of name.

  @{b}result@{ub}
  If result is TRUE then the writing was succesful.
@EndNode

