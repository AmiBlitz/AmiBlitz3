@DATABASE ElmoreMathLib
@$VER: ELMOREMATH V1.12 (31.05.2015)- Updated by tomsmart1.
@NODE "MAIN"
Author:
  Richard T Elmore, HeadSoft, 126 STATE ST. #20, SPEARFISH, SD 57783, USA
  @{b}@{u}Elmore Math library@{uu}@{ub}

                       @{" Xor " link "Xor"}                     @{" Largest " link "Largest"}.l
                       @{" Smallest " link "Smallest"}.l              @{" Largest " link "Largest"}.q
                       @{" Smallest " link "Smallest"}.q              @{" Largest " link "Largest"}.w
                       @{" Smallest " link "Smallest"}.w              @{" Avg " link "Avg"}.l
                       @{" Avg " link "Avg"}.q                   @{" Avg " link "Avg"}.w
                       @{" RRandomize " link "RRandomize"}              @{" RRnd " link "RRnd"}
                       @{" Hex# " link "Hex#"}                    @{" Bin# " link "Bin#"}
@ENDNODE


@NODE "Xor"
Function: XOR
*************
     Syntax: n=Xor (expression,expression)
      Modes: Amiga or Blitz
Description:
Returns Exclusive OR of two expressions
This function returns the "exclusive-OR" or the two supplied arguments.
For example, Xor(255,170) will return 85, and Xor(-1) will return 0.
@ENDNODE


@NODE "Largest"
Function: LARGEST.L
*******************
     Syntax: n=Largest.l (Long Integer1,Long Integer2)
      Modes: Amiga or Blitz
Description:
This function will return the larger of the two supplied long integers.
For example, Largest.l(255,20045) would return 20045.


Function: LARGEST.Q
*******************
     Syntax: n=Largest.q (Quick1,Quick2)
      Modes: Amiga or Blitz
Description:
Identical to the function "Largest.l" (above) except that it accepts
quick-type variables or expressions.


Function: LARGEST
*****************
     Syntax: n=Largest (Integer1,Integer2)
      Modes: Amiga or Blitz
Description:
This is the fastest "Largest()" function.  Note that if passed floats
or quick-types, the fraction will be cut off.  See description for
Largest.l() and Largest.q().
@ENDNODE


@NODE "Smallest"
Function: SMALLEST.L
********************
     Syntax: n=Smallest.l (Long Integer1,Long Integer2)
      Modes: Amiga or Blitz
Description:
This function will return the smaller of two supplied long integers.
For example, Smallest.l(-999,5) would return -999.


Function: SMALLEST.Q
********************
     Syntax: n=Smallest.q (Quick1,Quick2)
      Modes: Amiga or Blitz
Description:
Identical to "Smallest.q" but uses quick-types.


Function: SMALLEST
******************
     Syntax: n=Smallest (Integer1,Integer2)
      Modes: Amiga or Blitz
Description:
Like Smallest.l() and Smallest.q(), above, with less accuracy, but
faster than the long-integer and quick-type versions.
@ENDNODE


@NODE "Avg"
Function: AVG.L
***************
     Syntax: n=Avg.l (Long Integer 1,Long Integer 2)
      Modes: Amiga or Blitz
Description:
This function will return the average of two long-integers (although
the fraction is cut off.)  Thus, Avg.l(5,15)=10, and Avg.l(1,2)=1.
(Since fractions will be cut off with this function, you may wish to
use the quick-type version of this function for more accuracy.)


Function: AVG.Q
***************
     Syntax: n=Avg.q (Quick1,Quick2)
      Modes: Amiga or Blitz
Description:
See the description for "Avg.l()" (above)


Function: AVG
*************
     Syntax: n=Avg (Integer1,Integer2)
      Modes: Amiga or Blitz
Description:
See the description for "Avg.l()" (above)
This version is the fastest Avg() function available.
@ENDNODE


@NODE "RRandomize"
Statement: RRANDOMIZE
*********************
     Syntax: RRandomize Seed
      Modes: Amiga or Blitz
Description:
Given a float-type expression or variable, RRandomize will "seed" the
reproducible random number generator.  The sequence of pseudo-random
numbers produced by "RRND" will be the same for each seed given it.
If you require trully random numbers, try "RRandomize Ticks."
@ENDNODE


@NODE "RRnd"
Function: RRND
**************
     Syntax: n=RRnd (Low,High)
      Modes: Amiga or Blitz
Description:
Given a range such as (1,6) this function will return a random number
based on the seed given it by "RRandomize."  These sets of "random"
numbers can be repeated if you provide the same seed.  This can be
useful in games, etc. so that using "RRandomize Level#" and then using
the RRnd() function to randomly draw the screen, each time the player
returns to that particular level, it will be the same.
@ENDNODE


@NODE "Hex#"
Function: Hex#
**************
     Syntax: n=Hex#(HexString$)
      Modes: Amiga or Blitz
Description:
This function accepts a hexadecimal value stored in a string and returns
the decimal value.
@ENDNODE


@NODE "Bin#"
Function: Bin#
**************
     Syntax: n=Bin#(BinString$)
      Modes: Amiga or Blitz
Description:
This function accepts a binary value stored in a string and returns
the decimal value.
@ENDNODE
