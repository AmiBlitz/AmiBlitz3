@DataBase "LotanSystem"
@$VER: LOTANSYSTEMLIB V1.1 (27.01.2007)- Updated by mrodfr.
@Node Main "LotanSystem"

  @{b}Lotan's System Library 0.12 (17-04-99)@{ub}

    @{" CtrlC       " link CtrlC} Function (Boolean)
    @{" Dispose     " link Dispose} Statement
    @{" execbase    " link execbase} Function (Long)
    @{" KickVersion " link KickVersion} Function (Word)
    @{" New         " link New} Function (Long)

  @{b}Author@{ub}

    Olivier Laviale, Doumenge 46230 Montdoumerc, FRANCE

  @{b}Overview@{ub}

    The main goal of this set was to provide a function that handles  @{i}Break  signals@{ui},
    because  I  was  desperately  yearning for this kind of stuff. Then, as @{fg highlight}CtrlC@{fg text} was
    lonely, I added @{fg highlight}New@{fg text} and @{fg highlight}Dispose@{fg text} to allocate and free memory really easily.

  @{b}See also@{ub}

    @{" History " link HIST}
@EndNode

@Node CtrlC "LotanSystem : CtrlC"

  @{b}@{u}CtrlC@{ub}@{uu}

    @{b}Modes@{ub}    : Amiga
    @{b}Syntax@{ub}   : @{i}rc.b @{ui}= CtrlC

    @{b}Function@{ub} : Used to check a Ctrl-C signal.

               Returns @{fg highlight}True@{fg text} if control-C has been pressed since the  last  call,  and
               @{fg highlight}False@{fg text}  otherwise.  This  is  really sensible only for programs started
               from the Shell/CLI.

    @{b}Example@{ub}  : @{fg highlight}Repeat
                  Printf@{fg text} "Hello word!\n"
               @{fg highlight}Until CtrlC@{fg text}
@EndNode
@Node Dispose "LotanSystem : Dispose"

  @{b}@{u}Dispose@{ub}@{uu}

    @{b}Syntax@{ub}   : Dispose Addr

    @{b}Function@{ub} : Used to free memory allocated with @{fg highlight}New@{fg text}.

               You should rarely  need  to  use  this  function  because  the  memory
               allocated by @{fg highlight}New@{fg text} is automatically freed when the program terminates.

    @{b}Note@{ub}     : Don't use @{fg highlight}Dispose@{fg text} to free memory not allocated  by  @{fg highlight}New@{fg text}.  @{fg highlight}New@{fg text}  uses  a
               different  method  to remember the size of the memory chunk allocated.
               @{fg highlight}Dispose@{fg text} will be confused if you give it a pointer to  a  memory  chunk
               allocated with @{fg highlight}AllocMem()@{fg text}...

    @{b}See also@{ub} : @{" New " link New}
@EndNode
@Node execbase "LotanSystem : execbase"

  @{b}@{u}execbase@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= execbase

    @{b}Function@{ub} : Returns pointer to the Exec library base.

    @{b}See also@{ub} : @{" intuitionbase " link LotanIntuition.guide/intuitionbase}
@EndNode
@Node KickVersion "LotanSystem : KickVersion"

  @{b}@{u}KickVersion@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.w @{ui}= KickVersion
               @{i}rc.b @{ui}= KickVersion(Ver)

    @{b}Function@{ub} : Used to get or check Exec version.

    @{b}Values@{ub}   : If @{b}Ver@{ub} is specified it will return @{fg highlight}True@{fg text} if your Kickstart revision  is
               at   least   equal   to   @{b}Ver@{ub},  and  @{fg highlight}False@{fg text}  otherwise.  For  instance,
               @{fg highlight}KickVersion@{fg text}(37) checks whether you're running with  Kickstart  version
               37 or greater (i.e., AmigaDOS 2.04 and above).

               If @{b}Ver@{ub} is not specified, the version of Exec is returned.

    @{b}Example@{ub}  : @{fg highlight}If KickVersion@{fg text}(39)
                  @{fg highlight}Printf@{fg text} "OS 3.0 rulez\n"
               @{fg highlight}Else
                  Printf@{fg text} "Exec version is only %d... a bit old humm??!\n",@{fg highlight}KickVersion
               EndIf@{fg text}
@EndNode
@Node New "LotanSystem : New"

  @{b}@{u}New@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= New(Size)
               @{i}rc.l @{ui}= New(Size,Type)

    @{b}Function@{ub} : Used to allocate memory.

               When you've finished with this memory you can use @{fg highlight}Dispose@{fg text} to  free  it
               for  use  elsewhere  in  your  program. You don't have to @{fg highlight}Dispose@{fg text} with
               memory you allocated with @{fg highlight}New@{fg text} because your program will  automatically
               free  it  when  it  terminates.  This is @{u}not@{uu} true for memory allocated
               using the normal Amiga system routines.

    @{b}Values@{ub}   : The @{b}Type@{ub} of memory (Fast or Chip) to be  allocated  can  be  specified
               using flags. See @{fg highlight}Tags & Flags / Memory Flags@{fg text}.

               If @{b}Type@{ub} is not specified the memory allocated is initialised  to  zero
               in each byte, and taken from any available store (Fast or Chip memory,
               in that order of preference).

               @{b}rc@{ub} is a pointer to a newly allocated chunk of memory,  which  is  @{b}Size@{ub}
               number  of  bytes. If the memory could not be allocated 0 is returned.
               Remember! @{u}Never@{uu} use memory which you have not successfully allocated.

    @{b}Note@{ub}     : If you want to free memory in your program  use  @{fg highlight}Dispose@{fg text}  and  no  one
               else.  @{fg highlight}New@{fg text} uses a special feature to remember the size of the chunk of
               memory allocated.

    @{b}v0.20@{ub}    : Starting with @{fg shine}v0.20@{fg text} an allocation failure will  no  longer  crash  the
               program  with  TRAP #0. Since @{fg shine}v0.20@{fg text} I use my very own memory managing,
               and no longer Blitz one's. So, if an allocation fails @{fg highlight}New@{fg text} will  return
               0, that's all.

    @{b}See also@{ub} : AllocMem() on Exec.doc
               @{" ArNew      " link LotanArray.guide/ArNew}
               @{" Dispose    " link Dispose}

@EndNode

@Node HIST "LotanSystem : History"
@Prev Main

  @{b}@{u}History@{ub}@{uu}

    @{b}0.00@{ub}

      - Only one command : @{fg highlight}CtrlC@{fg text}, but a very, very, very usefull command.

    @{b}0.02@{ub}

      - Added @{fg highlight}New@{fg text} and @{fg highlight}Dispose@{fg text}, for easy memory allocating and freeing.
      - Added @{fg highlight}KickVersion@{fg text} for convenience.

    @{b}0.03@{ub}

      - Stupid bugs fix in @{fg highlight}New@{fg text} and @{fg highlight}Dispose@{fg text}.

    @{b}0.04@{ub}

      - Added @{fg highlight}WBArg@{fg text}, @{fg highlight}WBArgs@{fg text}, @{fg highlight}WBStarted@{fg text}, and @{fg highlight}wbmessage@{fg text} for  easy  Workbench  arguments
        reading.

    @{b}0.05@{ub}

      - @{fg highlight}WBStarted@{fg text} remove, now  @{fg highlight}WBStartup@{fg text}  code  is  automaticaly  executed  with  the
      library initialization, and @{fg highlight}WBMessage@{fg text} is replied with program ending.

      I decide to move the code because even if @{fg highlight}WBStarted@{fg text} is not  executed  the  code
      remains in the executable, so why not using it...

    @{b}0.06@{ub}

      - Added @{fg highlight}ReadArgs@{fg text} and @{fg highlight}Arg@{fg text} for easy and powerful argument parsing.

    @{b}0.10@{ub}                                                                    (Size  74)

      - Moved arguments relative functions to a new set of command (@{fg highlight}LotanArgs@{fg text}).

    @{b}0.12@{ub}                                                                    (Size  74)
                                                                                     
      - Added @{fg highlight}execbase@{fg text}.

    @{b}0.20@{ub}                                                                    (Size 136)

      This new version uses its very own memory management system,  no  longer  Blitz
      one's. This will avoid TRAP #0 when memory allocation fail, and I @{u}hate@{uu} TRAP #0.

      I can't bear that the all program crash because an allocation failed, as it  is
      easy to check allocation result...

  @{b}@{u}See also@{ub}@{uu}

    @{" BlitzLibs / LotanArgs " link LotanArgs.guide/Main}
@EndNode
