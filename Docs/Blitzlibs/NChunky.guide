@DATABASE ChunkyV1.40
@$VER: Chunky V1.40 (27.01.2007)- Updated by mrodfr.
@NODE MAIN "Chunky V1.40"

    @{b}Chunky V1.30 General Information:@{ub}

  * Blitz Basic II library number         : #175
  * Library size when linked to executable: 660 bytes
  * Number of commands                    : 9
  * Resources automatically freed at end  : Yes

  NInitChnky() must be put before any other Chunky functions
  or you will enjoy BIG crashes.

    @{b}Commands summary:@{ub}

  @{" NChunkyBlit       " LINK NChunkyBlit} Statement
  @{" NChunkyBlock      " LINK NChunkyBlock} Statement
  @{" NChunkyBuffer     " LINK NChunkyBuffer} Function (Long)
  @{" NChunkyCls        " LINK NChunkyCls} Statement
  @{" NChunkyID         " LINK NChunkyID} Function (Long)
  @{" NChunkyPlot       " LINK NChunkyPlot} Statement
  @{" NFreeChunkyBuffer " LINK NFreeChunkyBuffer} Statement
  @{" NInitChunky       " LINK NInitChunky} Function (Boolean)
  @{" NUseChunkyBuffer  " LINK NUseChunkyBuffer} Statement

@ENDNODE


@NODE NChunkyBlit

    @{b}SYNTAX@{ub}
  NChunkyBlit(Shape Width, ShapeHeight, Shape Adress, X, Y )

    @{b}FUNCTION@{ub}
  Blit the specified chunky shape  to  the  given  Chunky  buffer.  This
  function  uses  colour  0  as  transparent.  It's  a  highly-optimized
  function. The shape can be of any size. This function  isn't  clipped,
  so  be  sure to  be  INSIDE  the  chunky  buffer when you perform your
  blitting.

@ENDNODE


@NODE NChunkyBlock

    @{b}SYNTAX@{ub}
  NChunkyBlock(Shape Width, ShapeHeight, Shape Adress, X, Y)

    @{b}FUNCTION@{ub}
  This function is 5 times faster than the NChunkyBlit function but has
  some limitations:

  * The shape width must be a multiple of 4.
  * There are no transparent colours.

  This function isn't clipped so be sure to Blit INSIDE the buffer.

  NOTE: This is the fastest way to Blit a shape inside a chunky  buffer.
  This function has been specially optimized for speed.

@ENDNODE


@NODE NChunkyBuffer

    @{b}SYNTAX@{ub}
  ChunkyID.l = NChunkyBuffer(#ChunkyBuffer, Width, Height)

    @{b}FUNCTION@{ub}
  It will allocate a ChunkyBuffer. The returned ChunkyID is  the  memory
  location  of  the  ChunkyBuffer.  If its NULL, the chunky buffer isn't
  allocated, so don't perform any operation on it.

  The ChunkyBuffer will be allocated at ANY_MEMORY place (ie in  FastRam
  if you have one, or else in ChipRam )

@ENDNODE


@NODE NChunkyCls

    @{b}SYNTAX@{ub}
  NChunkyCls(Colour)

    @{b}STATEMENT@{ub}
  Fills the  chunky  buffer  with  the  specified  colour.  It's  a  very
  optimized function.

@ENDNODE


@NODE NChunkyID

    @{b}SYNTAX@{ub}
  ChunkyID.l = NChunkyID

    @{b}FUNCTION@{ub}
  Returns the memory location of the used ChunkyBuffer.

@ENDNODE


@NODE NChunkyPlot

    @{b}SYNTAX@{ub}
  NChunkyPlot(X, Y, Colour)

    @{b}STATEMENT@{ub}
  Draws a plot at coordinate (X,Y)  with  the  specified  colour.

@ENDNODE


@NODE NFreeChunkyBuffer

    @{b}SYNTAX@{ub}
  NFreeChunkyBuffer(#ChunkyBuffer)

    @{b}STATEMENT@{ub}
  Free the given ChunkyBuffer.

@ENDNODE


@NODE NInitChunky

    @{b}SYNTAX@{ub}
  result.l = NInitChunky(#NumChunkyBufferMax)

    @{b}FUNCTION@{ub}
  Init all the Chunky environments for later use.  You  must  put  this
  function at the top of your source code if you want to use the NChunky
  commands. You can test the result to  see if  the  Chunky  environment
  is correctly initialized.

  #NumChunkyBufferMax : Maximum number of ChunkyBuffers to handle.

@ENDNODE


@NODE NUseChunkyBuffer

    @{b}SYNTAX@{ub}
  NUseChunkyBuffer(#ChunkyBuffer)

    @{b}STATEMENT@{ub}
  Set the given #ChunkyBuffer as the current ChunkyBuffer.

@ENDNODE


