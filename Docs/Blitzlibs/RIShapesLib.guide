@DATABASE RIShapesLibV2.6
@Author Conversion program
@$VER: RISHAPESLIB V2.60 (27.01.2007)- Updated by mrodfr.
@NODE OVERVIEW "Overview of RI Shapes Lib V2.6"

                                  @{b}@{u}Overview@{ub}@{uu}

The RIShapesLib is a library designed to fill the gaps left by inadequacies
in the Acid shapes system. The library introduces a new shapes file format,
called 'LEShapes'. These files can store compressed shapes and can also store
palette information.

@ENDNODE OVERVIEW

@NODE CludgeShapes "RI Shapes Lib V2.5"

@{fg shine}Statement/Function : CludgeShapes@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : [success]=CludgeShapes(shape#,numshapes,address)

  This allows the creation of shapes through INCBIN statements. It allocates
chip memory for each shape and copies the data into this. It does the same
as LoadShapes except it grabs shapes from memory.

e.g.

	suc=BLoad("myshapes",0)
	suc=CludgeShapes(0,50,Start(0))
	MouseWait
	End

@ENDNODE CludgeShapes

@NODE LESaveShapes "RI Shapes Lib V2.5"

@{fg shine}Statement : LESaveShapes@{fg text}
-----------------------------------------------------------------------------
Modes  :  Amiga
Syntax : LESaveShapes shapenum#,shapenum#,filename$[,palette#]

  This saves shapes and a palette in an IFF type file (not an picture). The
palette can be saved along with the shape file. If no palette is passed or
the passed palette is empty, no palette data will be saved.

@ENDNODE LESaveShapes

@NODE LELoadShapes "RI Shapes Lib V2.5"

@{fg shine}Statement : LELoadShapes@{fg text}
-----------------------------------------------------------------------------
Modes  :  Amiga
Syntax : LELoadShapes shapenum#,[shapenum#,]filename$[,palette#]

  This attempts to load shapes from an LEShapes file, if there is a palette
saved in the shape file this will be loaded into the specified palette. You
can miss out an upper shape limit or a palette number or both. 

IMPORTANT NOTE: Due to a limitation of the Blitz library system you cannot
                use the following form of the command:

		LELoadShapes 0,"shapesfile",0

You will get a "Can't convert types error". To get around this simply do:

		LELoadShapes 0,Maximum Shape,"shapesfile",0

@ENDNODE LELoadShapes

@NODE LECludgeShapes "RI Shapes Lib V2.5"

@{fg shine}Statement : LECludgeShapes@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : LECludgeShapes shape#,shape#,address,palette#[,copyregardless]

    This command decodes a shape file (that may have a palette) saved by
LESaveShapes. It can cope with compresses or uncompressed data, and conforms
with Acids standards for indicating that a shape has been cludged. If you
wish to decompress as many shapes as are in the shapes file you may do:

	LECludgeShapes shape#,Maximum Shapes-1,address,palette#

This will decode all the shapes in the file with NO OVERRUN like ACID's 
library.

IMPORTANT NOTE: There are some considerations with where in memory you want
                to place your LEShapes file to be Cludged. If you're shapes
                file is:

			1) Cached to CHIP MEM and
			2) UNCOMPRESSED

Then Cludge shapes will not create a second copy of the shapes data unless
the <copyregardless> parameter is set to -1.

@ENDNODE LECludgeShapes

@NODE LECompressShapes "RI Shapes Lib V2.5"

@{fg shine}Statement: LECompressShapes@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : LECompressShapes Boolean

    By default LESaveShapes compresses shapes in a shape file. The compressor
is quite intelligent in that if the compressed shape is larger (oxymoron any
one?) than the orginal (this can happen, honest) it saves the full data from
the old shape. 

If you wish to turn shape compression on or off, call LECompressShapes with
the correct parameter. 

Below is a small table comparing the same shape files stored in 3 different
ways. For very small shape files (1-3 shapes) you may find turning
compression off results in the saving of a few bytes. The bigger the file,
the larger the saving.

-----------------------------------------------------------------------------
Shapes| Acid SaveShapes | LESaveShapes NO COMPRESS | LESaveShapes COMPRESSION
------+-----------------+--------------------------+-------------------------
 400  |    76912  bytes |          68940 bytes     |       54091 bytes         
------+-----------------+--------------------------+-------------------------
 223  |    43008  bytes |          38576 bytes     |       35646 bytes         
-----------------------------------------------------------------------------

@ENDNODE LECompressShapes

@NODE MAIN "RI Shapes Lib V2.5"

.---------------------------------------------------------------------------.
|                             @{b}RI Shapes Lib V2.5@{ub}                            |
`---------------------------------------------------------------------------'

                         ©1996 Red When Excited Ltd

        Undocumented commands added by Toby Zuijdveld 02/03/1999
                       mailto: hotcakes\@abacus.net.au

                             @{"     Overview     " link OVERVIEW}

                               Command Index                                

                             @{" CludgeShapes     " link CludgeShapes}
                             @{" LECludgeShapes   " link LECludgeShapes}
                             @{" LECompressShapes " link LECompressShapes}
                             @{" LELoadShapes     " link LELoadShapes}
                             @{" LESaveShapes     " link LESaveShapes}

                              SafeToBlit       shape,x,y
                              LEInitShape      shape#,width,height,depth
                              LEScanShapes     startshape#,endshape#
                              LEMaxShapeWidth
                              LEMaxShapeHeight
                              LEMaxShapeDepth

                                @{" Examples " LINK Examples}

@ENDNODE MAIN

@NODE Examples "Example Programs"

                             @{b}@{u}Example Programs@{ub}@{uu}

@{fg shine}EXAMPLE 1@{fg text} - An Acid Shapes -> LEShapes Library :

	@{" Load Example 1 " system "run >NIL: BLITZ3:Amiblitz3 Blitz3:Docs/UserLibs/Examples/RIShapesLib1.bb"}

@ENDNODE Examples
