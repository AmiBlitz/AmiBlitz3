@DataBase "LotanIO"
@$VER: LOTANIOLIB V1.1 (27.01.2007)- Updated by mrodfr.
@Node Main "LotanIO"

  @{b}Lotan's IO Library 0.16 (10-05-99)@{ub}

    @{" CloseF   " link CloseF} Statement
    @{" EOFile   " link EOFile} Function (Boolean)
    @{" FSeek    " link FSeek} Command (Long)
    @{" FSize    " link FSize} Function (Lnog)
    @{" IOFile   " link IOFile} Command (Long)
    @{" OpenF    " link OpenF} Command (Long)
    @{" ReadCH   " link ReadCH} Function (String)
    @{" ReadLN   " link ReadLN} Function (String)
    @{" WriteCH  " link WriteCH} Command (Long)
    @{" WriteLN  " link WriteLN} Command (Long)
    @{" WriteNM  " link WriteNM} Command (Long)

  @{b}Author@{ub}

    Olivier Laviale, Doumenge 46230 Montdoumerc, FRANCE

  @{b}See also@{ub}

    @{" History  " link HIST}
    @{" Examples " link EXAM}

    OS Libs / Dos on Dos.doc
@EndNode

@Node CloseF "LotanIO : CloseF"

  @{b}@{u}CloseF@{ub}@{uu}

    @{b}Modes@{ub}    : Amiga
    @{b}Syntax@{ub}   : CloseF
               CloseF File

    @{b}Function@{ub} : Used to close an opened file.

               You can use @{fg highlight}CloseF@{fg text} to close files opened with @{fg highlight}Open()@{fg text} or @{fg highlight}OpenFromLock()@{fg text}
               but never use @{fg highlight}Close()@{fg text} to close a file opened with @{fg highlight}OpenF@{fg text}.

               Files opened with @{fg highlight}OpenF@{fg text} are automatically  closed  when  your  program
               quits.

    @{b}Values@{ub}   : @{b}File@{ub} is a pointer to a @{i}FileHandle structure@{ui} which has been initialised
               be a previous call to @{fg highlight}OpenF@{fg text} or @{fg highlight}Open()@{fg text}.

               If @{b}File@{ub} is not specified the last file set  in  @{fg highlight}IOFile@{fg text}  will  be  used
               instead. @{fg highlight}OpenF@{fg text} updates this value each time it opens a new file.

    @{b}Example@{ub}  : @{fg highlight}If OpenF@{fg text}("Sys:Disk.info")
                  @{fg highlight}Printf@{fg text} "File opended.\nFileHandle Pointer is $%h\n",@{fg highlight}IOFile@{fg text}
                  @{fg highlight}CloseF
               EndIf@{fg text}

    @{b}See also@{ub} : @{" IOFile " link IOFile}
               Open() on Dos.doc
               @{" OpenF  " link OpenF}

               @{" LotanIO / Examples " link Exam}
@EndNode
@Node EOFile "LotanIO : EOFile"

  @{b}@{u}EOFile@{ub}@{uu}

    @{b}Modes@{ub}    : Amiga
    @{b}Syntax@{ub}   : @{i}rc.b @{ui}= EOFile
               @{i}rc.b @{ui}= EOFile(File)

    @{b}Function@{ub} : Returns @{fg highlight}True@{fg text} when the cursor is at the end of a file.

    @{b}Values@{ub}   : @{b}File@{ub} is a pointer to a @{i}FileHandle structure@{ui} which has been initialised
               be a previous call to @{fg highlight}OpenF@{fg text} or @{fg highlight}Open()@{fg text}.

               If @{b}File@{ub} is not specified the last file set  in  @{fg highlight}IOFile@{fg text}  will  be  used
               instead. @{fg highlight}OpenF@{fg text} updates this value each time it opens a new file.

    @{b}Example@{ub}  : @{fg highlight}Repeat
                  Printf@{fg text} "'%s'\n",@{fg highlight}ReadLN
               Until EOFile@{fg text}

    @{b}See also@{ub} : @{" IOFile " link IOFile}
               @{" OpenF  " link OpenF}
@EndNode
@Node FSeek "LotanIO : FSeek"

  @{b}@{u}FSeek@{ub}@{uu}

    @{b}Modes@{ub}    : Amiga
    @{b}Syntax@{ub}   : FSeek Pos,OffSet
               FSeek File,Pos,Offset
               @{i}rc.l @{ui}= FSeek(Pos,Offset)
               @{i}rc.l @{ui}= FSeek(File,Pos,Offset)

    @{b}Function@{ub} : Moves the @{i}file cursor@{ui} inside a file.

    @{b}Values@{ub}   : @{b}File@{ub} is a pointer to a @{i}FileHandle structure@{ui} which has been initialised
               be a previous call to @{fg highlight}OpenF@{fg text} or @{fg highlight}Open()@{fg text}.

               If @{b}File@{ub} is not specified the last file set  in  @{fg highlight}IOFile@{fg text}  will  be  used
               instead. @{fg highlight}OpenF@{fg text} updates this value each time it opens a new file.

               @{b}Pos@{ub} is the @{i}new position@{ui} of the cursor relative to  @{b}OffSet@{ub},  while  the
               @{i}old position@{ui} of the cursor will be returned in @{b}rc@{ub}.

    @{b}Example@{ub}  : @{fg highlight}FSeek@{fg text}   0, 0 ; Will return the current position.
               @{fg highlight}FSeek@{fg text}   0,-1 ; Will move the cursor at the end of the file.
               @{fg highlight}FSeek@{fg text}   0, 1 ; Will move the cursor at the start of the file.

               @{fg highlight}FSeek@{fg text}  10, 0 ; Will move the  cursor  of  10  bytes  from  the  current
                              position.
               @{fg highlight}FSeek@{fg text} -10, 0 ; Will move the cursor of 10 bytes backward of the current
                              position.

               @{fg highlight}FSeek@{fg text}  10,-1 ; Will move the cursor of 10 byte from the  start  of  the
                              file.

               @{fg highlight}FSeek@{fg text} -10, 1 ; Will move the cursor of 10 byte from the end of the file
                              (backward)

    @{b}See also@{ub} : @{" IOFile " link IOFile}
@EndNode
@Node FSize "LotanIO : FSize"

  @{b}@{u}FSize@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= FSize
               @{i}rc.l @{ui}= FSize(File)

    @{b}Function@{ub} : Returns the size of a file.

    @{b}Values@{ub}   : @{b}File@{ub} is a pointer to a @{i}FileHandle structure@{ui} which has been initialised
               be a previous call to @{fg highlight}OpenF@{fg text} or @{fg highlight}Open()@{fg text}.

               If @{b}File@{ub} is not specified the last file set  in  @{fg highlight}IOFile@{fg text}  will  be  used
               instead. @{fg highlight}OpenF@{fg text} updates this value each time it opens a new file.

               @{b}rc@{ub} is the length of the file in bytes.

    @{b}See also@{ub} : @{" FSeek " link FSeek}
@EndNode
@Node ReadCH "LotanIO : ReadCH"

  @{b}@{u}ReadCH@{ub}@{uu}

    @{b}Modes@{ub}    : Amiga
    @{b}Syntax@{ub}   : @{i}rc.s @{ui}= ReadCH(Len)
               @{i}rc.s @{ui}= ReadCH(File,Len)

    @{b}Function@{ub} : Returns characters from file.

               This function will returns the number of characters specified  by  @{b}len@{ub}
               from @{b}file@{ub}, which must have been opened with a prior call to @{fg highlight}Open()@{fg text}

    @{b}Values@{ub}   : @{b}File@{ub} is a pointer to a @{i}FileHandle structure@{ui} which has been initialised
               be a previous call to @{fg highlight}OpenF@{fg text} or @{fg highlight}Open()@{fg text}.

               If @{b}File@{ub} is not specified the last file set  in  @{fg highlight}IOFile@{fg text}  will  be  used
               instead. @{fg highlight}OpenF@{fg text} updates this value each time it opens a new file.

               The function will read a maximum of 65535 characters  from  the  file.
               Specifying  a  longer  @{b}Len@{ub}  will not cause an error, but also will not
               return more than the 65535 characters.

    @{b}See also@{ub} : @{" IOFile  " link IOFile}
                Read() on dos.doc
               @{" ReadLN  " link ReadLN}
               @{" WriteCH " link WriteCH}
@EndNode
@Node ReadLN "LotanIO : ReadLN"

  @{b}@{u}ReadLN@{ub}@{uu}

    @{b}Modes@{ub}    : Amiga
    @{b}Syntax@{ub}   : @{i}rc.s @{ui}= ReadLN
               @{i}rc.s @{ui}= ReadLN(File)

    @{b}Function@{ub} : Returns a line from a file.

               Returns a string of characters from the  file  which  must  have  been
               opened with a prior call to @{fg highlight}Open()@{fg text}.

               The function will read characters from  @{b}file@{ub}  until  it  encounters  a
               line-feed  character ($0A), which will not be included in the returned
               value.

    @{b}Note@{ub}     : The maximum length of the value returned by @{fg highlight}ReadLN@{fg text} is 1000  bytes.  If
               line-feed  characters  are  not used in a file, then multiple calls to
               @{fg highlight}ReadLN@{fg text} would return the contents of the file in 1000-character chunks.

    @{b}Values@{ub}   : @{b}File@{ub} is a pointer to a @{i}FileHandle structure@{ui} which has been initialised
               be a previous call to @{fg highlight}OpenF@{fg text} or @{fg highlight}Open()@{fg text}.

               If @{b}File@{ub} is not specified the last file set  in  @{fg highlight}IOFile@{fg text}  will  be  used
               instead. @{fg highlight}OpenF@{fg text} updates this value each time it opens a new file.

    @{b}See also@{ub} : @{" IOFile  " link IOFile}
               @{" ReadCH  " link ReadCH}
               Read() on dos.doc
               @{" WriteLN " link WriteLN}
@EndNode
@Node IOFile "LotanIO : IOFile"

  @{b}@{u}IOFile@{ub}@{uu}

    @{b}Syntax@{ub}   : IOFile File
               @{i}rc.l @{ui}= IOFile
               @{i}rc.l @{ui}= IOFile(File)

    @{b}Function@{ub} : Sets or returns the file to use.

               If you don't supply the file argument to the other functions, the file
               set here will be used.

               Used as a function  @{fg highlight}IOFile@{fg text}  will  return  a  pointer  to  the  current
               @{i}FileHandle structure@{ui}.

    @{b}Values@{ub}   : @{b}File@{ub} is a pointer to the @{i}FileHandle structure@{ui}  of  a  file  opened  by
               @{fg highlight}OpenF@{fg text} or @{fg highlight}Open()@{fg text}.

               If @{b}File@{ub} is specified and @{fg highlight}IOFile@{fg text} used as a function, a pointer  to  the
               current FileHandle structure will be returned before setting it to the
               new value.

                  OldFile.l = @{fg highlight}IOFile@{fg text}(NewFile.l)

    @{b}Example@{ub}  : @{fg highlight}If OpenF@{fg text}("S:Startup-Sequence")
                  @{fg highlight}Printf@{fg text} "Current FileHandle structure %h\n",@{fg highlight}IOFile@{fg text}
                  @{fg highlight}CloseF
               EndIf@{fg text}

    @{b}See also@{ub} : @{" CloseF " link CloseF}
               @{" OpenF  " link OpenF}
@EndNode
@Node OpenF "LotanIO : OpenF"

  @{b}@{u}OpenF@{ub}@{uu}

    @{b}Modes@{ub}    : Amiga
    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= OpenF(Name)
               @{i}rc.l @{ui}= OpenF(Name,Mode)

    @{b}Function@{ub} : Opens a file.

               Files opened with @{fg highlight}OpenF@{fg text} are automatically  closed  when  your  program
               quits.

               @{fg highlight}OpenF@{fg text} update automatically the variable @{fg highlight}IOFile@{fg text}.

    @{b}Values@{ub}   : @{b}Name@{ub} is the name of the file to open, or a pointer to that name.

               @{b}Mode@{ub} tells the system what you are going to do with the file you open.
               See  @{fg highlight}Open()@{fg text}  for  a  list  of  access  modes. Note that if @{b}Mode@{ub} is not
               specified the file will be opened with @{fg shine}#MODE_READONLY@{fg text}.

               @{b}rc@{ub} is a pointer to the @{i}FileHandle structure@{ui} of the file. If the system
               couldn't open a file with our requirements @{fg highlight}OpenF@{fg text} will returns 0.

    @{b}Example@{ub}  : @{fg highlight}If OpenF@{fg text}("S:Startup-Sequence")
                  @{fg highlight}Printf@{fg text} "FileHandle structure : %h\n",@{fg highlight}IOFile
               EndIf@{fg text}

               or...

               @{fg highlight}If OpenF@{fg text}(?Strt)
                  @{fg highlight}Printf@{fg text} "FileHandle structure : %h\n",@{fg highlight}IOFile
               EndIf

               End@{fg text}

               Strt:  @{fg highlight}Dc@{fg text}.b "S:Startup-Sequence",0,0

    @{b}See also@{ub} : @{" CloseF " link CloseF}
               @{" IOFile " link IOFile}
               Open() on dos.doc
@EndNode
@Node WriteCH "LotanIO : WriteCH"

  @{b}@{u}WriteCH@{ub}@{uu}

    @{b}Modes@{ub}    : Amiga
    @{b}Syntax@{ub}   : WriteCH Str
               WriteCH File,Str
               @{i}rc.l @{ui}= WriteCH Str
               @{i}rc.l @{ui}= WriteCH File,Str

    @{b}Function@{ub} : Writes characters in a file.

               Writes the character(s) in @{b}Str@{ub} to  the  @{b}File@{ub},  which  must  have  been
               opened  with  a  prior  call to @{fg highlight}OpenF@{fg text}. This function will not append a
               newline character to @{b}Str@{ub}.

    @{b}Values@{ub}   : @{b}File@{ub} is a pointer to a @{i}FileHandle structure@{ui} which has been initialised
               be a previous call to @{fg highlight}OpenF@{fg text} or @{fg highlight}Open()@{fg text}.

               If @{b}File@{ub} is not specified the last file set  in  @{fg highlight}IOFile@{fg text}  will  be  used
               instead. @{fg highlight}OpenF@{fg text} updates this value each time it opens a new file.

               @{b}Str@{ub} is the string you want to write in the file.

               @{b}rc@{ub} is a count of the characters written to the file. If  the  function
               was  successful, the number will be the same as the length of @{b}Str@{ub}. Any
               other return indicates failure.

    @{b}See also@{ub} : @{" IOFile  " link IOFile}
               @{" OpenF   " link OpenF}
               @{" ReadCH  " link ReadCH}
               @{" WriteLN " link WriteLN}
               @{" WriteNM " link WriteNM}
@EndNode
@Node WriteLN "LotanIO : WriteLN"

  @{b}@{u}WriteLN@{ub}@{uu}

    @{b}Modes@{ub}    : Amiga
    @{b}Syntax@{ub}   : WriteLN Str
               WriteLN File,Str
               @{i}rc.l @{ui}= WriteLN(Str)
               @{i}rc.l @{ui}= WriteLN(File,Str)

    @{b}Function@{ub} : Writes a line in a file.

               Writes @{b}Str@{ub} to the @{b}File@{ub}, which must have been opened with a prior  call
               to @{fg highlight}OpenF@{fg text}. The function appends a line-feed character to the string.

    @{b}Values@{ub}   : @{b}File@{ub} is a pointer to a @{i}FileHandle structure@{ui} which has been initialised
               be a previous call to @{fg highlight}OpenF@{fg text} or @{fg highlight}Open()@{fg text}.

               If @{b}File@{ub} is not specified the last file set  in  @{fg highlight}IOFile@{fg text}  will  be  used
               instead. @{fg highlight}OpenF@{fg text} updates this value each time it opens a new file.

               @{b}Str@{ub} is the string you want to write in the file.

               @{b}rc@{ub} is a count of the characters written to the file. If  the  function
               was  successful,  the  number  will be one more than the length of @{b}Str@{ub}
               since the function counts the new-line character  that  it  adds.  Any
               other return indicates failure.

    @{b}See also@{ub} : @{" IOFile  " link IOFile}
               @{" OpenF   " link OpenF}
               @{" ReadLN  " link ReadLN}
               @{" WriteCH " link WriteCH}
               @{" WriteNM " link WriteNM}
@EndNode
@Node WriteNM "LotanIO : WriteNM"

  @{b}@{u}WriteNM@{ub}@{uu}

    @{b}Modes@{ub}    : Amiga
    @{b}Syntax@{ub}   : WriteNM Num,Frm
               WriteNM File,Num,Frm
               @{i}rc.l @{ui}= WriteNM(Num,Frm)
               @{i}rc.l @{ui}= WriteNM(File,Num,Frm)

    @{b}Function@{ub} : Writes a number in a file.

               Writes @{b}Num@{ub} to the @{b}File@{ub}, which must have been opened with a prior  call
               to @{fg highlight}OpenF@{fg text}.

               This function is used to write non ASCII values without having to  use
               @{fg highlight}Mkl$@{fg text}, @{fg highlight}Mki$@{fg text} or @{fg highlight}Asc@{fg text}. @{fg highlight}WriteNM@{fg text}(0,2) will write $00000000 in the file.

    @{b}Values@{ub}   : @{b}File@{ub} is a pointer to a @{i}FileHandle structure@{ui} which has been initialised
               be a previous call to @{fg highlight}OpenF@{fg text} or @{fg highlight}Open()@{fg text}.

               If @{b}File@{ub} is not specified the last file set  in  @{fg highlight}IOFile@{fg text}  will  be  used
               instead. @{fg highlight}OpenF@{fg text} updates this value each time it opens a new file.

               @{b}Num@{ub} is the number you want to write in the file.

               @{b}Frm@{ub} is the format you want to write. 0 will write a Word, less a Byte,
               more a Long.

               @{b}rc@{ub} is a count of the characters written to the file. If  the  function
               was  successful, the number will be the same as the length of @{b}Num@{ub}. Any
               other return indicates failure.

    @{b}Example@{ub}  : @{fg highlight}WriteNM@{fg text}(0,-1)        ; Will write $00 in the file
               @{fg highlight}WriteNM@{fg text}(0,0)         ; Will write $0000 in the file
               @{fg highlight}WriteNM@{fg text}(0,1)         ; Will write $00000000 in the file
               @{fg highlight}WriteNM@{fg text}($FFFFABBA,4) ; Will write $ABBA in the file

    @{b}See also@{ub} : @{" IOFile  " link IOFile}
               @{" OpenF   " link OpenF}
               @{" ReadLN  " link ReadLN}
               @{" WriteCH " link WriteCH}
               @{" WriteNM " link WriteNM}
@EndNode

@Node HIST "LotanIO : History"

  @{b}@{u}History@{ub}@{uu}

    @{b}0.00@{ub}

      This  library  was  made  to  easily  access  files  opened  with   @{fg highlight}Open()@{fg text}   or
      @{fg highlight}OpenFromLock()@{fg text}.

      - Created SetFile to set active file
      - Created ReadCH and ReadLN to read
      - Created WriteCH, WriteLN and WriteNM to write to this file.

    @{b}0.01@{ub}

      Worked on @{fg highlight}ReadCH@{fg text} and @{fg highlight}ReadLN@{fg text} because they were really bigs...

    @{b}0.03@{ub}                                                                   (Size 394)

      - Renamed @{fg highlight}SetFile@{fg text} to @{fg highlight}WorkFile@{fg text}.
      - Added @{fg highlight}EOFile@{fg text} and @{fg highlight}Seek@{fg text}.
      - Rewrote @{fg highlight}ReadCH@{fg text}... 3 times faster and smaller...
      - @{fg highlight}ReadLN@{fg text} is still a maze.

    0.04                                                                   (Size 384)

      Squashed some bugs, reduced the size.

    0.07                                                                   (Size 380)

      - Finally I decided to add @{fg highlight}OpenF@{fg text} and @{fg highlight}CloseF@{fg text}...
      - I rewrote completely @{fg highlight}ReadLN@{fg text}...soooooo small now ;-)
      - @{fg highlight}EOFile@{fg text} is still a big piece of code ;-(

    0.10                                                                   (Size 488)

      - Renamed @{fg highlight}WorkFile@{fg text} to @{fg highlight}IOFile@{fg text}.

      - Created a new way to allocate and free files... now files opened  with  @{fg highlight}OpenF@{fg text}
        are automatically closed when the program quits.

      - Added @{i}LibInit code@{ui} to allocate a @{i}FileInfoBlock structure@{ui} instead of  creating
        and freeing one at each call to @{fg highlight}EOFile@{fg text} or @{fg highlight}IOFile@{fg text}.

    0.15                                                                   (Size 444)

      - Rewrite some piece of code.
      - Reorganised commands.
      - Added @{fg highlight}FSize@{fg text}.
      - Renamed @{fg highlight}Seek@{fg text} to @{fg highlight}FSeek@{fg text}.

    0.16                                                                   (Size 492)

      - Squashed a big bug in @{fg highlight}ReadCH@{fg text}.
      - Rewrote @{fg highlight}WriteNM@{fg text}.
      - Now @{fg highlight}OpenF@{fg text} accepts string or pointers to strings... this will reduce the  size
        of you executable.
@EndNode
@Node EXAM "LotanIO : Examples"

  @{b}@{u}Examples@{ub}@{uu}

    Here are some examples for people that never use system functions or  don't  know
    about pointers.

    All functions in this set can either use a  pointer  to  a  FileHandle  structure
    returned  by  OpenF, Open(), OpenFromLock()... or the variable set in IOFile. The
    IOFile command is used to set the file to work with, or  to  return  the  current
    file  used.  Note  that  this  value  is automatically updated everytime OpenF is
    called.

      If OpenF("Sys:disk.info")
         Printf "File Ptr $%h\n",IOFile
         CloseF
      EndIf

    is equivalent to

      diskicon.l = OpenF("Sys:disk.info")

      If IOFile
         Printf "File Ptr $%h\n",IOFile
         CloseF
      EndIf

    or

      diskicon.l = OpenF("Sys:disk.info")

      If diskicon
         Printf "File Ptr $%h\n",diskicon
         CloseF
      EndIf


    If you use Open() you must use a pointer

      diskicon.l = Open_("Sys:disk.info",1005)

      If diskicon
         Printf "File Ptr $%h\n",diskicon
         CloseF diskicon
      EndIf

    or

      diskicon.l = Open_("Sys:disk.info",1005)

      If diskicon
         IOFile diskicon
         Printf "File Ptr $%h\n",IOFile
         CloseF
      EndIf

  @{b}@{u}Managing multiple file@{ub}@{uu}

    Using only one file at a time is easy to do, but using  multiple  files  requires
    some management... and pointers.

    The following is absolutely not alowed

       If OpenF("Sys:disk.info")
          If OpenF("Ram:disk.info")           ; IOFile is update, last lost.
             CloseF
          EndIf
          CloseF                              ; Will close 'Ram:disk.info' again
       EndIf

    This is good

       If OpenF("Sys:disk.info")
          sysdisk.l = IOFile
          If OpenF("Ram:disk.info")
             CloseF
          EndIf

          CloseF sysdisk
       EndIf

    or

      sysdisk.l = OpenF("Sys:disk.info")

      If sysdisk
         If OpenF("Ram:disk.info")
            CloseF
         EndIf

         CloseF sysdisk
      EndIf

  @{b}@{u}Using a lot of files@{ub}@{uu}

    in1.l = OpenF("ram:disk.info")
    in2.l = OpenF("sys:disk.info")
    out.l = OpenF("ram:test.icon",1006)   ; IOFile is out

    If in1
       If in2
          If out
             Repeat
                WriteCH ReadCH(in1,1)+ReadCH(in2,1)
             Until EOFile(in1) OR EOFile(in2) OR CtrlC

             CloseF
          EndIf
          CloseF in2
       EndIf
       CloseF in1
    EndIf
@EndNode
