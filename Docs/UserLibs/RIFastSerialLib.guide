@DATABASE RIFastSerialLibV2.6
@Author Conversion program
@$VER: RIFASTSERIALLIB V2.60 (27.01.2007)- Updated by mrodfr.
@NODE OVERVIEW "Overview of RI FastSerial Lib V2.6"

                                  @{b}@{u}Overview@{ub}@{uu}

This library is designed for use with games who require a very high speed
serial link facility. This library does this by removing the standard
serial-interrupt which occurs every time a byte arrives at the serial port,
and uses a 1<->1 handshaking process to ensure no bytes are lost. Whilst it
is bad practise to access the serial hardware directly, the current Amiga
serial port is not up to the task of sending and receiving large amounts
of data at high speeds, so direct hardware access is necessary. If you want
your program to be System Legal and are not worried about high speed, you
should use the Amiga's serial.device instead.

@ENDNODE OVERVIEW

@NODE CheckSerial "RI FastSerial Lib V2.5"

@{fg shine}Function: CheckSerial@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : byte=CheckSerial

  This function checks the serial port for a byte waiting. It returns the
byte, or -1 if there's nothing waiting.

@ENDNODE CheckSerial

@NODE DoSerialIO "RI FastSerial Lib V2.5"

@{fg shine}Statement: DoSerialIO@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : DoSerialIO 

  This function initiates the serial packet transfer.

The process is as follows :

If the host machine is the master :

	While more_bytes_left_to_send
           Send byte from OUTPUT buffer
	   Read byte into INPUT buffer
	Wend

else, if the host machine is the slave :

	While more_bytes_left_to_read
	   Read byte into INPUT buffer
	   Send byte from OUTPUT buffer
	Wend

@ENDNODE DoSerialIO

@NODE FinitSerialIO "RI FastSerial Lib V2.5"

@{fg shine}Statement: FinitSerialIO@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : FinitSerialIO 

  This command will restore the serial hardware to its standard state so
that other programs can use the serial port.

@ENDNODE FinitSerialIO

@NODE FlushSerialIO "RI FastSerial Lib V2.5"

@{fg shine}Statement: FlushSerialIO@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : FlushSerialIO - make sure serial port is empty

  This command will empty the serial port if a byte is waiting.

@ENDNODE FlushSerialIO

@NODE GetSerial "RI FastSerial Lib V2.5"

@{fg shine}Statement/Function: GetSerial@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : [something=]GetSerial([address,bytes])

  This command will either :

  a)  Wait for a byte at the serial port and return its value. If a byte
      is already present, this function returns immediately.

  b)  Get <bytes> bytes and store them at location <address>

@ENDNODE GetSerial

@NODE InitSerialIO "RI FastSerial Lib V2.5"

@{fg shine}Statement/Function: InitSerialIO@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga
Syntax : [something=]InitSerialIO(baud,numbytes,inbuf,outbuf)

  This command will initialize the serial port ready for use with the
DoSerialIO command. It will remove the standard interrupt allocated for when
a byte arrives at the serial port. Whilst the serial port is in this state,
other programs may not access the serial hardware.

@ENDNODE InitSerialIO

@NODE PutSerial "RI FastSerial Lib V2.5"

@{fg shine}Statement: PutSerial@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : PutSerial address,bytes | byte

  This command will either :

  a)  Send a single byte through the serial port

  b)  Send <byte> bytes starting at locaton <Address>

@ENDNODE PutSerial

@NODE SetIOBuffers "RI FastSerial Lib V2.5"

@{fg shine}Statement: SetIOBuffers@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : SetIOBuffers inbuf,outbuf

  This command enables you to specify where the input and output buffers (as
used by DoSerialIO) are located.

@ENDNODE SetIOBuffers

@NODE SetIOSize "RI FastSerial Lib V2.5"

@{fg shine}Statement: SetIOSize@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : SetIOSize bytes

  This command enables you to alter the size of the read/write cycle as used
by DoSerialIO.

@ENDNODE SetIOSize

@NODE SetIOSpeed "RI FastSerial Lib V2.5"

@{fg shine}Statement: SetIOSpeed@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : SetIOSpeed baudrate

  This command enables you to alter the speed of the serial port (see also
InitSerialIO).

@ENDNODE SetIOSpeed

@NODE SetSerialMode "RI FastSerial Lib V2.5"

@{fg shine}Statement: SetSerialMode@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : SetSerialMode mode  

  This command is used to tell DoSerialIO whether this machine is the Master
or Slave. During the read/write cycle executed by DoSerialIO, if the machine
is the Master, it will:

loop:
	send a byte
        read a byte
        if no more bytes then goto loop

If the machine is the slave :

loop:
        read a byte
	send a byte
        if no more bytes then goto loop

A mode of -1 signifies Master, 0 means Slave.

@ENDNODE SetSerialMode

@NODE SyncSerial "RI FastSerial Lib V2.5"

@{fg shine}Statement/Function: SyncSerial@{fg text}
-----------------------------------------------------------------------------
Modes  : Amiga/Blitz
Syntax : [mode=]SyncSerial(syncbyte)

  This command is used to synchronize the two machines. It will (optionally)
return whether this machine is the Master or Slave (see SetSerialMode). The
<syncbyte> parameter is the byte to sync on (eg, both machines must be
transmitting/waiting for this byte).

@ENDNODE SyncSerial

@NODE MAIN "RI FastSerial Lib V2.5"
.---------------------------------------------------------------------------.
|                           @{b}RI FastSerial Lib V2.5@{ub}                          |
`---------------------------------------------------------------------------'

                         ©1996 Red When Excited Ltd

        Undocumented commands added by Toby Zuijdveld 02/03/1999
                       mailto: hotcakes\@abacus.net.au

                             @{"     Overview     " link OVERVIEW}

                               Command Index                                

             @{" CheckSerial    " link CheckSerial}                @{" DoSerialIO     " link DoSerialIO}
             @{" FinitSerialIO  " link FinitSerialIO}                @{" FlushSerialIO  " link FlushSerialIO}
             @{" GetSerial      " link GetSerial}                @{" InitSerialIO   " link InitSerialIO}
             @{" PutSerial      " link PutSerial}                @{" SetIOBuffers   " link SetIOBuffers}
             @{" SetIOSize      " link SetIOSize}                @{" SetIOSpeed     " link SetIOSpeed}
             @{" SetSerialMode  " link SetSerialMode}                @{" SyncSerial     " link SyncSerial}

              SyncPut        address,bytes    SyncGet        address,bytes
              EndSerialIO    disable serial read/write

                                @{" Examples " LINK Examples}

@ENDNODE MAIN

@NODE Examples "Example Programs"

                             @{b}@{u}Example Programs@{ub}@{uu}

@{fg shine}EXAMPLE 1@{fg text} - A serial port based file transfer program :

	@{" Load Example 1 " system "run >NIL: BLITZ3:Amiblitz3 Blitz3:Docs/UserLibs/Examples/RIFastSerialLib1.bb"}

@ENDNODE Examples
