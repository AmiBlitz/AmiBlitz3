@DATABASE RIPackLibV2.6
@Author Conversion program
@$VER: RIPACKLIB V2.60 (27.01.2007)- Updated by mrodfr.
@NODE OVERVIEW "Overview of RI Pack Lib V2.6"

                                  @{b}@{u}Overview@{ub}@{uu}

This library contains commands for the unpacking of ILBM's (IFF pictures)
and the grabbing of their palettes (CMAP chunks). Nearly all the commands
in this library can be used as either STATEMENTS or FUNCTIONS. Usage is
identical in both cases but if used as a function then the command will
return:

    FALSE for failure
    TRUE for success

@ENDNODE OVERVIEW

@NODE UnpackIFF "RI Pack Lib V2.5"

@{fg shine}Statement/Function: UnpackIFF@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: UnpackIFF address.l,bitmap#[,lines,offset]
        suc=UnpackIFF(address.l,bitmap#[,lines,offset])

  This command is used to unpack an IFF picture file from memory onto a
bitmap. Address.l should point to the START of the iff file header in memory
(either CHIP or FAST mem can be used), bitmap should be the number of a
previously initialised bitmap. The optional lines parameter allows you to
specify the number of lines to unpack from the IFF file.

This command checks the size of the bitmap against the size of the IFF before
it unpacks the IFF onto it. Checks are made for width, height and depth of
the bitmap and the IFF and the following is done:

(size=WIDTH, HEIGHT and DEPTH)

    BITMAP 'size' < IFF 'size' : unpack aborted
    BITMAP 'size' = IFF 'size' : pic is unpacked
    BITMAP 'size' > IFF 'size' : pic is unpacked

Extra aborts can be caused by:

    - not using a previously installed bitmap
    - given the optional lines parameter as 0 or less
    - not giving ADDRESS.l as a pointer to a valid IFF ILBM header

When using the optional parameters, you should note that if you try to
unpack more lines than the IFF has, the unpack routine will automatically
stop at the last line of the IFF. It will not reject the UnpackIFF command. 
Also note that the offset is a byte offset from the start of the bitplanes.
You can use the AddValue command to calculate this value.

NOTE: you should save your IFF pictures with the STENCIL OFF because at the
      moment this routine does not check to see if STENCIL data is present
     in the IFF file.

@ENDNODE UnpackIFF

@NODE ILBMPalette "RI Pack Lib V2.5"

@{fg shine}Statement/Function: ILBMPalette@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: ILBMPalette address.l,palette#
        suc=ILBMPalette(address.l,palette#)

  This command is used to grab the palette from an IFF picture file held in
memory (CHIP or FAST mem). Address.l should be given as the address of
either an IFF file in memory or a CMAP chunk in memory. When you use the
SAVE PALETTE command from inside an art program (e.g. DPaint) or from inside
Blitz2, the program saves out a CMAP chunk which gives details about the
palette. The CMAP chunk is also saved with IFF picture files to give the
palette of the picture.

This command will look at the address you gave and try and find a CMAP chunk
from the address given to address+5120. If it finds a chunk it will grab the
palette into the given palette object. If the palette object already contains
palette information then this information is deleted. This routine looks in
the CMAP chunk and reserves the palette object to have the same number of
colour entries.

This command will fail if it doesn't find a CMAP chunk.

@ENDNODE ILBMPalette

@NODE ILBMGrab "RI Pack Lib V2.5"

@{fg shine}Statement: ILBMGrab@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: ILBMGrab address.l,bitmap#,palette#

  This command lets you grab both the palette and the graphics from an IFF
picture file with just one command. It returns a success parameter to say
whether or not it succeeded in grabbing the data, so if you need to know if
the grabbing was successful you'll have to use the separate commands for
grabbing palettes and graphics.

NOTE: this command essentially just calls both UnpackIFF and ILBMPalette
      so everything said about these commands is relevent for ILBMGrab.

@ENDNODE ILBMGrab

@NODE LoadIFF "RI Pack Lib V2.5"

@{fg shine}Statment/Function: LoadIFF@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga
Syntax: LoadIFF filename$,bitmap#[,palette#]
  suc=LoadIFF (filename$,bitmap#[,palette#])

  This command is a direct replacement for Blitz2's LoadBitmap. It is a lot
faster than Blitz's command since it loads the file into memory and then
unpacks it from there. Thus you need to ensure that you have enough free
memory to load the IFF into, before trying to use this command.

This command is also more stable than Blitz's since it checks for the
existence of the file before trying to load it in.

The optional parameter allows you to load in the palette of the IFF picture.
Refer to UnpackIFF and ILBMPalette for more information about unpacking the
graphics and grabbing the palettes.

IMPORTANT NOTE: to use this command you must have our FUNC library installed 
                in your copy of Blitz2. Use of this command without this
                library will probably lead to a bad crash of your Amiga!

@ENDNODE LoadIFF

@NODE ChunkHeader "RI Pack Lib V2.5"

@{fg shine}Function: ChunkHeader@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga
Syntax: val.l=ChunkHeader (A$)

  This command was put in by me (Stephen McNamara) before I realised Blitz
already had a command that does exactly the same. I've left it in just
because I want to. It is useful when looking through IFF files for chunks
(e.g. ILBM, CMAP, etc.) as it gives you a longword value to look for in
memory to find the chunk. The string should be a four character string
(e.g. CMAP), you'll be returned the longword value of the string.

This command does the job of the following bit of Blitz2 code:

    a$="CMAP"
    val.l=Peek.l(&a$)

@ENDNODE ChunkHeader

@NODE IFFDepth "RI Pack Lib V2.5"

@{fg shine}Function: IFFDepth@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: d=IFFDepth

  Given a pointer to an ILBM IFF file held in memory, this command returns
the depth of the picture so that an appropriate bitmap can be allocated to
allow viewing of it.

@ENDNODE IFFDepth

@NODE IFFWidth "RI Pack Lib V2.5"

@{fg shine}Function: IFFWidth@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: w=IFFWidth

  Given a pointer to an ILBM IFF file held in memory, this command returns
the width (in pixels) of the picture so that an appropriate bitmap can be
allocated to allow viewing of it.

@ENDNODE IFFWidth

@NODE IFFHeight "RI Pack Lib V2.5"

@{fg shine}Function: IFFHeight@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: h=IFFHeight

  Given a pointer to an ILBM IFF file held in memory, this command returns
the height (in pixels) of the picture so that an appropriate bitmap can be
allocated to allow viewing of it.

@ENDNODE IFFHeight

@NODE IFFViewmode "RI Pack Lib V2.5"

@{fg shine}Function: IFFViewmode@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: modeid.l=IFFViewmode

  Given a pointer to an ILBM IFF file held in memory, this command returns
the view mode of the picture so that an appropriate screen can be opened to
display the picture (the viewmode is a required parameter to the Screen
command).

@ENDNODE IFFViewmode

@NODE MAIN "RI Pack Lib V2.5"
.---------------------------------------------------------------------------.
|                              @{b}RI Pack Lib V2.5@{ub}                             |
`---------------------------------------------------------------------------'

                         ©1996 Red When Excited Ltd

        Undocumented commands added by Toby Zuijdveld 02/03/1999
                       mailto: hotcakes\@abacus.net.au

                             @{"     Overview     " link OVERVIEW}

                               Command Index                                

                               @{" ChunkHeader  " link ChunkHeader}
                               @{" IFFDepth     " link IFFDepth}
                               @{" IFFHeight    " link IFFHeight}
                               @{" IFFViewmode  " link IFFViewmode}
                               @{" IFFWidth     " link IFFWidth}
                               @{" ILBMGrab     " link ILBMGrab}
                               @{" ILBMPalette  " link ILBMPalette}
                               @{" LoadIFF      " link LoadIFF}
                               @{" UnpackIFF    " link UnpackIFF}

                                PackPBM      sourceaddr,destaddr,length
                                UnPackPBM    sourceaddr,destaddr,length

                                @{" Examples " LINK Examples}

@ENDNODE MAIN

@NODE Examples "Example Programs"

                             @{b}@{u}Example Programs@{ub}@{uu}

@{fg shine}EXAMPLE 1@{fg text} - Demonstrates loading and displaying an ILBM IFF picture :

           @{" Load Example 1 " system "run >NIL: BLITZ3:Amiblitz3 Blitz3:Docs/UserLibs/Examples/RIPackLib1.bb"}

@ENDNODE Examples
