@DATABASE XboneCIATRKLIB
@$VER: XBONECIATRKLIB V1.10 (27.01.2007)- Updated by mrodfr.
@NODE main XboneCIATRACKERMAIN
Library: neilsciatrackerlib #56
--------------------------------------------------------------------------
Author: Neil O'Rourke, 6 Victoria St, TAMWORTH, NSW 2340, AUSTRALIA

Overview:
Many thanks to Neil, from what I have seen on the net there are already
many BlitzUsers using this library to great success. I'm trying to fit the
example code on the disk as I type...

@{" Quick Usage  " link CIA_QUICKUSAGE}     @{" Author's Doc " link CIA_AUTHOR}

                           The CIA Tracker commands:

@{" BuildNoteTable          " link CIA_BNTABLE}     @{" GetSongPosition         " link CIA_GSONGPOSITION}
@{" CheckTrackerEvent       " link CIA_CTEVENT}     @{" GetTrackerEvent         " link CIA_GTEVENT}
@{" CheckTrackerModuleID    " link CIA_CTMID}     @{" GetTrackerInstrument    " link CIA_GTINSTRUMENT}
@{" FreeTrackerModule       " link CIA_FTMODULE}     @{" GetTrackerLocation      " link CIA_GTSIZE}
@{" GetPatternPosition      " link CIA_GPPOSITION}     @{" GetTrackerName          " link CIA_GTNAME}
@{" GetSampleLength         " link CIA_GSLENGTH}     @{" GetTrackerNote          " link CIA_GTNOTE}
@{" GetSampleLocation       " link CIA_GSLOCATION}     @{" GetTrackerNoteNumber    " link CIA_GTNNUMBER}
@{" GetSampleName           " link CIA_GSNAME}     @{" GetTrackerSize          " link CIA_GTSIZE}
@{" GetSongLength           " link CIA_GSONGLENGTH}     @{" GetTrackerVolume        " link CIA_GTVOLUME}

@{" InitTracker             " link CIA_ITRACKER}     @{" SetTrackerModule        " link CIA_STMODULE}
@{" LoadTrackerModule       " link CIA_LTMODULE}     @{" SetTrackerTempo         " link CIA_STTEMPO}
@{" OldGetTrackerNoteNumber " link CIA_OGTNNUMBER}     @{" StartTracker            " link CIA_STRACKER}
@{" PauseTracker            " link CIA_PRTRACKER}     @{" StartTrackerPatPos      " link CIA_STPPOS}
@{" PlayTrackerSample       " link CIA_PTSAMPLE}     @{" StopTracker             " link CIA_STOPTRACKER}
@{" RestartTracker          " link CIA_PRTRACKER}     @{" WaitTrackerEvent        " link CIA_WTEVENT}
@{" SetDMAWait              " link CIA_SDWAIT}
@{" SetSongPatternPosition  " link CIA_SSPPOSITION}
@{" SetTrackerMask          " link CIA_STMASK}

Notes:
~~~~~~
Quite a number of these commands extract their data from the playroutine in
real time; that is, around fifty times a second (depending upon the tempo).
Therefore, the value your program receives could well be very different
from what is actually happening in the song.


Disclaimer:
~~~~~~~~~~~
By installing this software on your system, you are agreeing that I have no
liability as to the outcome of such use.  If, for example, you use a
command as documented and a floppy disk is ejected from your disk drive
with such force that it severs your head from your neck, tough.  Next time,
duck.
@ENDNODE

@NODE CIA_AUTHOR
Author's Documentation: CIATracker.lib Documentation

Neil O'Rourke

Version 1.6 (24/6/94)

Introduction
~~~~~~~~~~~~
The standard soundtracker replay routines supplied with Blitz Basic 2 have
many faults, which this library attempts to overcome.  Some of the features
are:

  - Plays all ST/NT/PT songs that utilise either the VBLANK timing or the
    more recent CIA based timings
  - Plays back correctly on 50/60Hz systems, running either PAL or NTSC
  - Contains more specialised functions for advanced programmers
  - Enables the programmer to syncronise graphics with their music


Credits:
~~~~~~~~
Original ProTracker playroutine by Amiga Freelancers, converted and
enhanced for Blitz by Neil O'Rourke.  Naggings from Roy, Jeff and Richard.

The 1.6 upgrade
~~~~~~~~~~~~~~~
This is a maintenance upgrade, with some subtle (and not so subtle) bugs
fixed or noted.

LoadTrackerModule no longer crashes the machine if the name was invalid.

SetTrackerMask has been removed for the moment (this was causing the
TrackerEvent system to foul up)

WaitTrackerEvent has a nasty tendancy to lock the machine up.  Don't call
this command, use While NOT CheckTrackerEvent:Wend to wait for an event if
you must.  WaitTrackerEvent currently sits on the VBLANK interrupt, however
I think the problem is due to the sheer bulk of ciaTrackerLib getting in
the way of checking.  I think.

GetTrackerNoteNumber was found to be chewing up CPU time, and has been
replaced by a new version that chews up 2K of ram extra.

I've found that if you have run errors enabled to bring up the requester,
your module won't start sometimes.  Don't know what to do about this, as I
don't know what causes it.
@ENDNODE

@NODE CIA_QUICKUSAGE
Quick Usage:
~~~~~~~~~~~~
First you must set the DMAWait time with the SetDMAWait command.  Then,
enable all the channels with SetTrackerMask.  Load the module you want with
the LoadTrackerModule command, and then either StartTrackerModule it, or
InitTracker/RestartTracker later on.
@ENDNODE


@NODE CIA_LTMODULE
Function: @{fg shine}LoadTrackerModule@{fg text}
--------------------------------------------------------------------------
Syntax  : success=LoadTrackerModule(TrackerModule#,FileName$)

Description:
Loads the named module into chip ram, ready for playing.  This command can
only be called in Amiga mode.  success is a boolean return code (true).
If the load fails for any reason, success returns the AmigaDOS error code.

Note that there is an implicit call to FreeTrackerModule for whatever
module you are trying to load.  However, if you want to load another
module, don't try to load it on top of the existing one that is playing.
Use another TrackerModule# (you have from 0 to 8).  The results are
unpredictable, and range from nothing to a system crash.  We can't call
StopTracker, because this will stop everything.
@ENDNODE

@NODE CIA_STRACKER
Function: @{fg shine}StartTracker@{fg text}
--------------------------------------------------------------------------
Syntax  : success=StartTracker(TrackerModule#)

Description:
Starts to play the requested module, stopping any modules already playing,
or restarts the current module, and returns true.  Returns false if the
module couldn't be started for some reason (like it isn't loaded).
@ENDNODE

@NODE CIA_STOPTRACKER
Statement: @{fg shine}StopTracker@{fg text}
--------------------------------------------------------------------------

Description:
Stops the current module
@ENDNODE

@NODE CIA_SDWAIT
Statement: @{fg shine}SetDMAWait@{fg text}
--------------------------------------------------------------------------
Syntax   : SetDMAWait value

Description:
This sets the DMA Wait for your machine.  On a standard 7.14MHz 68000
based machine, the value is the default (300).  However, faster machines
can cause the replay routine to skip notes.  On a 25MHz 68030 machine, the
suggested value is 900.  Set this as low as possible so that you still
hear all the notes.  A future upgrade *may* do this automatically, but I
have no intention of implementing it at this stage, as I don't know what
DMAWait to set for different speed processors and version motherboards.

DMA wait is important.  Technically, when the replay routine loads the
chip registers with the information about the current note (location,
volume, pitch), a delay is needed to ensure that the chips actually get
the data, which happens on the next DMA slot.  Since the CPU can be
clocked independantly of the motherboard, we can't just delay by a set
amount.  How this problem has been solved is a busy wait that simply
loops around the number of times as specified by the DMAWait value.
A low value therefore lessens the load on the CPU but increases the
chances of missing notes while playing a song.  Too high a value can bog
the CPU down, and slow the song down as interrupts are missed.
@ENDNODE

@NODE CIA_FTMODULE
Statement: @{fg shine}FreeTrackerModule@{fg text}
--------------------------------------------------------------------------
Syntax   : FreeTrackerModule TrackerModule#

Description:
This frees a module loaded with LoadTrackerModule.  You cannot free a
module that has been set up with SetTrackerModule (see below), but there
is nothing to stop you trying.
@ENDNODE

@NODE CIA_STMODULE
Statement: @{fg shine}SetTrackerModule@{fg text}
--------------------------------------------------------------------------
Syntax   : SetTrackerModule TrackerModule#,ModuleAddress

Description:
This sets an arbitary area of memory as a tracker module, useful if you
have BLoaded a file and want to hear if it is a module. Caution: a
non-module may crash the Amiga.
@ENDNODE

@NODE CIA_GTSIZE
Functions: @{fg shine}GetTrackerSize & GetTrackerLocation@{fg text}
--------------------------------------------------------------------------
Syntax   : trackerlength=GetTrackerSize(TrackerModule#)
           GetTrackerLocation (TrackerModule#)

Description:
Both these functions return information about the module that has been
loaded with LoadTrackerModule.  There should be no need to use this
information, and these commands are only included because they served a
purpose in debugging a long time ago, and to remove them would cause
problems with the Blitz tokens
@ENDNODE

@NODE CIA_GTEVENT
Function: @{fg shine}GetTrackerEvent@{fg text}
--------------------------------------------------------------------------
Syntax  : trackerevent=GetTrackerEvent

Description:
This command is a customised extension to the ProTracker replay routine.
A "TrackerEvent" occurs when the replay routine comes across a $8xx
command. This command is not defined in the command list, and many demos
(eg Jesus on E's) use it to trigger effects.  This command gets the most
recent TrackerEvent, so any program looking at this will have to compare
the current value to the value that triggered the current effect.
@ENDNODE

@NODE CIA_CTEVENT
Function: @{fg shine}CheckTrackerEvent@{fg text}
--------------------------------------------------------------------------
Syntax  : success=CheckTrackerEvent

Description:
This routine checks to see if a TrackerEvent has occured since the last
time the routine was called, and returns True if it has.  Use
GetTrackerEvent to determine what data the $8xx command had.
@ENDNODE

@NODE CIA_WTEVENT
Statement: @{fg shine}WaitTrackerEvent@{fg text}
--------------------------------------------------------------------------

** V1.6: DO NOT USE THIS COMMAND! **

@ENDNODE

@NODE CIA_CTMID
Function: @{fg shine}CheckTrackerModuleID@{fg text}
--------------------------------------------------------------------------
Syntax  : success=CheckTrackerModuleID(TrackerModule#)

Description:
This checks the module for the standard Pro/Noise/SoundTracker ID string
"M.K." (or "M!K!" in the case of a 100 pattern PT module), and returns
True if one of them is found.  This means that you can safely call
StartTracker.

Note that there is no 100% guarenteed way of determining what is a module
and what isn't.  Bit Arts, for example, remove the M.K. identifier to make
it harder to rip modules, so if you're writing a module ripping program,
you have to take this result with a grain of salt.
@ENDNODE

@NODE CIA_GTVOLUME
Function: @{fg shine}GetTrackerVolume@{fg text}
--------------------------------------------------------------------------
Syntax  : volume=GetTrackerVolume(TrackerChannel#)

Description:
Returns the last volume set by a $Cxx command for the named channel, which
are numbered from 0 to 3.  This is not the "real" volume of the sample that
is currently playing.
@ENDNODE

@NODE CIA_GTNOTE
Function: @{fg shine}GetTrackerNote@{fg text}
--------------------------------------------------------------------------
Syntax  : note=GetTrackerNote(TrackerChannel#)

Description:
Returns the note that the play routine has just played in the named
channel.  This command is really only useful for graphic bars or simple
syncronisation of graphics to the music, but for that purpose the
TrackerEvent commands are far more flexable.  Note that the value returned
is the period of the note.  You have to look up the note in a period table
to find out what was actually being played.
@ENDNODE

@NODE CIA_STTEMPO
Statement: @{fg shine}SetTrackerTempo@{fg text}
--------------------------------------------------------------------------
Syntax   : SetTrackerTempo Tempo

Description:
Sets the tempo of the current song.  Note that a tempo command ($Fxx) will
override any value set by this command.  This command is really a stub to
the actual $Fxx command in the playroutine, and has all the features
associated with it.  Check your tracker docs for more details.
@ENDNODE

@NODE CIA_GTINSTRUMENT
Function: @{fg shine}GetTrackerInstrument@{fg text}
--------------------------------------------------------------------------
Syntax  : instrument=GetTrackerInstrument(TrackerChannel#)

Description:
Gets the instrument that is playing in the channel.
@ENDNODE

@NODE CIA_GPPOSITION
Function: @{fg shine}GetPatternPosition@{fg text}
--------------------------------------------------------------------------
Syntax  : PatPos=GetPatternPosition

Description:
This returns the current position in the current pattern.
@ENDNODE

@NODE CIA_GSONGPOSITION
Function: @{fg shine}GetSongPosition@{fg text}
--------------------------------------------------------------------------
Syntax  : SongPos=GetSongPosition

Description:
This returns the current pattern that is playing in the song
@ENDNODE

@NODE CIA_SSPPOSITION
Statement: @{fg shine}SetSongPatternPosition@{fg text}
--------------------------------------------------------------------------
Syntax   : SetSongPatternPosition Pattern#,Position#

Description:
This command sets what pattern to play, and from what position.  Use this
while a song is playing to jump to another pattern (eg. a game over
music). Call StartTrackerPatPos() to start a module from scratch.
@ENDNODE

@NODE CIA_GSONGLENGTH
Function: @{fg shine}GetSongLength@{fg text}
--------------------------------------------------------------------------
Syntax  : NumPatterns=GetSongLength

Description:
Returns the number of patterns in the current module.  Useful for displays
like in IntuiTracker, where the title bar of the window gives a display
that can be done like:

  NPrint GetSongLength,":",GetSongPosition
@ENDNODE

@NODE CIA_STMASK
Statement: @{fg shine}SetTrackerMask@{fg text}
--------------------------------------------------------------------------
Syntax   : SetTrackerMask Mask

** REMOVED IN V1.6 **
@ENDNODE

@NODE CIA_OGTNNUMBER
Function: @{fg shine}OldGetTrackerNoteNumber@{fg text}
--------------------------------------------------------------------------
Syntax  : notenumber=OldGetTrackerNoteNumber(Channel#)

Description:
This returns the number of the note played on the specified channel, with
C-1 being note 1.  Of use really in creating "equalizer bars".

V1.6: This command has turned out to be a CPU-hog!  The new implementation
will consume a lot of memory but will be much faster.  When you load your
old programs, GetTracker... will be replaced by OldGetTracker..., so your
code will continue to work.
@ENDNODE

@NODE CIA_STPPOS
Function: @{fg shine}StartTrackerPatPos@{fg text}
--------------------------------------------------------------------------
Syntax  : ret.l=StartTrackerPatPos(TrackerModule#,Pattern#,Position#)

This starts the named module at the requested pattern and position.  In
all other respects it is the same as StartTracker.
@ENDNODE

@NODE CIA_PRTRACKER
Statements: @{fg shine}PauseTracker &  RestartTracker@{fg text}
--------------------------------------------------------------------------

Description:
These commands allow you to stop a tracker module are restart it at a later
time.
@ENDNODE

@NODE CIA_PTSAMPLE
Statement: @{fg shine}PlayTrackerSample@{fg text}
--------------------------------------------------------------------------
Syntax   : PlayTrackerSample Sample#,Period,Volume,Channel

Description:
Plays a sample through the channel.  The module must not be running.
@ENDNODE

@NODE CIA_ITRACKER
Statement: @{fg shine}InitTracker@{fg text}
--------------------------------------------------------------------------
Syntax   : success=InitTracker(TrackerModule#)

Description:
Identical to StartTracker, except that the module doesn't start, but is
initialised.  Of use with the commands that use the current tracker
module. Use ReStartTracker to start playing.
@ENDNODE

@NODE CIA_GSLOCATION
Function: @{fg shine}GetSampleLocation@{fg text}
--------------------------------------------------------------------------
Syntax  : location=GetSampleLocation(Sample#)

Description:
Returns the address in memory of the named sample in the current module.
@ENDNODE

@NODE CIA_GSLENGTH
Function: @{fg shine}GetSampleLength@{fg text}
--------------------------------------------------------------------------
Syntax  : length=GetSampleLength(Sample#)

Description:
Returns the length in words of the named sample in the current module.
Multiply by two to get the byte length.
@ENDNODE

@NODE CIA_GSNAME
Function: @{fg shine}GetSampleName@{fg text}
--------------------------------------------------------------------------
Syntax  : name$=GetSampleName(Sample#)

Description:
Returns the name of the sample in name$.
@ENDNODE

@NODE CIA_GTNAME
Function: @{fg shine}GetTrackerName@{fg text}
--------------------------------------------------------------------------
Syntax  : name$=GetTrackerName(TrackerModule#)

Description:
Returns the name of the module in name$
@ENDNODE

@NODE CIA_BNTABLE
Statement: @{fg shine}BuildNoteTable@{fg text}
--------------------------------------------------------------------------

Description:
This command builds a note table for use with GetTrackerNoteNumber.  It
consumes 2K of memory for the look-up table.
@ENDNODE

@NODE CIA_GTNNUMBER
Function: @{fg shine}GetTrackerNoteNumber@{fg text}
--------------------------------------------------------------------------
Syntax  : notenumber=GetTrackerNoteNumber(Channel#)

Description:
This returns the number of the note played on the specified channel, with
C-1 being note 1.  Of use really in creating "equalizer bars".

For speed purposes, no error checking (like, has the note table been
built?) is done.
@ENDNODE
