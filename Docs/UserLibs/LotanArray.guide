@DataBase "LotanArray"
@$VER: LOTANARRAYLIB V1.1 (27.01.2007)- Updated by mrodfr.
@Node Main "LotanArray"

  @{b}Lotan's Array Library 0.30 (21-05-99)@{ub}

    @{" ArDispose " link ArDispose} Statement
    @{" ArGet     " link ArGet} Function (Long)
    @{" ArItm     " link ArItm} Function (Long)
    @{" ArLen     " link ArLen} Function (Long)
    @{" ArNew     " link ArNew} Function (Long)
    @{" ArOfByte  " link ArOfByte} Function (Long)
    @{" ArOfLong  " link ArOfLong} Function (Long)
    @{" ArOfStrg  " link ArOfStrg} Function (Long)
    @{" ArOfWord  " link ArOfWord} Function (Long)
    @{" ArSet     " link ArSet} Command (Long)
    @{" ArStr     " link ArStr} Function (String)

  @{b}Author@{ub}

    Olivier Laviale, Doumenge 46230 Montdoumerc, FRANCE

  @{b}Overview@{ub}

    This library is very useful to quickly creates arrays and manage them.

    For example :

      @{fg highlight}Dim@{fg text} array.l(5)
      array(0) = 1
      array(1) = 12
      array(2) = 18
      array(3) = $ABBA
      array(4) = $FF1234FF

      start.l = &array(0)

    Can easily be replaced by

      start.l = @{fg highlight}ArOfLong@{fg text}(1,12,8,$ABBA,$FF1234FF)

    And it will also reduce the size of your executable... what a good idea ;-)

  @{b}See also@{ub}

    @{" History " link HIST}
@EndNode

@Node ArDispose "LotanArray : ArDispose"

  @{b}@{u}ArDispose@{ub}@{uu}

    @{b}Syntax@{ub}   : ArDispose
               ArDispose Array

    @{b}Function@{ub} : Used to free an array.

               You should rarely  need  to  use  this  function  because  the  memory
               allocated by @{fg highlight}ArNew@{fg text} is automatically freed when the program terminates.

    @{b}Values@{ub}   : @{b}Array@{ub} is a pointer to an array of values allocated by @{fg highlight}ArNew@{fg text}, @{fg highlight}ArOfLong@{fg text},
               @{fg highlight}ArOfWord@{fg text}  or @{fg highlight}ArOfByte@{fg text}. Don't use @{fg highlight}ArDispose@{fg text} to free memory allocated by
               other functions (e.g. @{fg highlight}New@{fg text}).

               If the @{b}Array@{ub} is an @{i}array of strings@{ui}, all strings will be freed too.

               If you use @{fg highlight}ArDispose@{fg text} without giving an Array pointer,  @{fg highlight}ArDispose@{fg text}  will
               automatically  free  the @{u}last@{uu} allocated array. This is very usefull to
               define temporary arrays (e.g. Tags).

    @{b}Example@{ub}  : Tags.l = @{fg highlight}ArOfLong@{fg text}(#WA_IDCMP,$200, #WA_Flags,$1|$2|$4|$8|$20|$200|$1000, #WA_AutoAdjust,-1, #TAG_END)

               *Win = @{fg highlight}OpenW@{fg text}(20,20,320,200,0,0,"MyWin and its Tags",0,0,Tags) : @{fg highlight}ArDispose@{fg text} Tags
                 ...

               or

               *Win = @{fg highlight}OpenW@{fg text}(20,20,320,200,0,0,"MyWin and its Tags",0,0,@{fg highlight}ArOfLong@{fg text}(#WA_IDCMP,$200, #WA_Flags,$1|$2|$4|$8|$20|$200|$1000, #WA_AutoAdjust,-1, #TAG_END)) : @{fg highlight}ArDispose@{fg text}
               ...

    @{b}See also@{ub} : @{" ArNew " link ArNew}
               @{" New   " link LotanSystem.guide/New}
               @{" OpenW " link LotanIntuition.guide/OpenW}
@EndNode
@Node ArGet "LotanArray : ArGet"

  @{b}@{u}ArGet@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= ArGet(Array,Item)

    @{b}Function@{ub} : Used to get an item from an array.

               This function will return the value of an item from an array.  If  the
               array  is  an  array  of  strings,  the  address of the string will be
               returned. Use @{fg highlight}ArStr@{fg text} to get the string, or @{fg highlight}PeekS@{fg text}...

    @{b}Values@{ub}   : @{b}Array@{ub} is a pointer to an array created with @{fg highlight}ArNew@{fg text}, @{fg highlight}ArOfXxxx@{fg text}...

               @{b}Item@{ub} is the item number of the item you want to get. Don't forget that
               the first item is 0.

    @{b}Example@{ub}  : @{fg highlight}Printf@{fg text} "'%s'\\n",@{fg highlight}ArGet@{fg text}(MyStrings,0)

    @{b}See also@{ub} : @{" ArStr  " link ArStr}
               @{" PeekS  " link LotanMem.guide/PeekS}
               @{" Printf " link LotanPrint.guide/Printf}
@EndNode
@Node ArItm "LotanArray : ArItm"

  @{b}@{u}ArItm@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= ArItm(Array)

    @{b}Function@{ub} : Returns the number of items able to fit in an array.

    @{b}See also@{ub} : @{" ArLen " link ArLen}
@EndNode
@Node ArLen "LotanArray : ArLen"

  @{b}@{u}ArLen@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= ArLen(Array)

    @{b}Function@{ub} : Returns the size, in bytes, of an array.

    @{b}See also@{ub} : @{" ArItm " link ArItm}
@EndNode
@Node ArNew "LotanArray : ArNew"

  @{b}@{u}ArNew@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= ArNew(Num)
               @{i}rc.l @{ui}= ArNew(Num,Kind)

    @{b}Function@{ub} : Used to create an array.

               When you've finished with this array you can use @{fg highlight}ArDispose@{fg text} to free  it
               for  use  elsewhere  in your program. You don't have to @{fg highlight}ArDispose@{fg text} with
               arrays  you  allocated  with   @{fg highlight}ArNew@{fg text}   because   your   program   will
               automatically free it when it terminates.

    @{b}Values@{ub}   : @{b}Num@{ub} is the maximum number of items able to fit in the array.

               @{b}Kind@{ub} is the kind of items that can be used within the array.

                $0001 - Array of bytes
                $0002 - Array of words
                $0004 - Array of longs
                $1004 - Array of strings

               If you don't suply @{b}Kind@{ub}, an array of long will be created.

    @{b}See also@{ub} : @{" ArDispose " link ArDispose}
               @{" New       " link LotanSystem.guide/New}
@EndNode
@Node ArOfByte "LotanArray : ArOfByte"

  @{b}@{u}ArOfByte@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= ArOfByte(Data...)

    @{b}Function@{ub} : Used to create and initialize an array of bytes.

               Instead of @{fg highlight}ArNew@{fg text}, the array  will  be  created  immediately  with  the
               values  specified,  the size of the array will also be adjusted to fit
               the requirements.

    @{b}Example@{ub}  : array.l = @{fg highlight}ArOfByte@{fg text}(1,2,3,4,5,6,7)

    @{b}See also@{ub} : @{" ArOfLong " link ArOfLong}   @{" ArOfStrg " link ArOfStrg}
               @{" ArOfWord " link ArOfWord}   @{" ArNew    " link ArNew}
@EndNode
@Node ArOfLong "LotanArray : ArOfLong"

  @{b}@{u}ArOfLong@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= ArOfLong(Data...)

    @{b}Function@{ub} : Used to create and initialize an array of longs.

               Instead of @{fg highlight}ArNew@{fg text}, the array  will  be  created  immediately  with  the
               values  specified,  the size of the array will also be adjusted to fit
               the requirements.

    @{b}Example@{ub}  : array.l = @{fg highlight}ArOfLong@{fg text}(1,2,$ABBA,$FFFF2312,5,69234,7)

               @{fg highlight}ArOfLong@{fg text} is very usefull to easily create array of tags.

    @{b}Example@{ub}  : Old Sytle...

               @{fg highlight}Dim@{fg text} Tag.TagItem(7)
               Tag(0)\ti_Tag = @{fg shine}#WA_Left@{fg text},        10
               Tag(1)\ti_Tag = @{fg shine}#WA_Right@{fg text},       10
               Tag(2)\ti_Tag = @{fg shine}#WA_Width@{fg text},       300
               Tag(3)\ti_Tag = @{fg shine}#WA_Height@{fg text},      200
               Tag(4)\ti_Tag = @{fg shine}#WA_MinWidth@{fg text},    20
               Tag(5)\ti_Tag = @{fg shine}#WA_MinHeight@{fg text},   20
               Tag(6)\ti_Tag = @{fg shine}#WA_AutoAdjust@{fg text},  -1
               Tag(7)\ti_Tag = @{fg shine}#TAG_DONE@{fg text}

               @{fg highlight}Printf@{fg text} "Array Addr : $%h\\n",&Tag(0)

               Now...

               Tag.l = @{fg highlight}ArOfLong@{fg text}(@{fg shine}#WA_Left@{fg text},10, @{fg shine}#WA_Right@{fg text},10, @{fg shine}#WA_Width@{fg text},300, @{fg shine}#WA_Height@{fg text},200, @{fg shine}#WA_MinWidth@{fg text},20, @{fg shine}#WA_MinHeight@{fg text},20, @{fg shine}#WA_AutoAdjudt@{fg text},-1, @{fg shine}#TAD_DONE@{fg text})

               @{fg highlight}Printf@{fg text} "Array Addr : $%h\\n",Tag

    @{b}See also@{ub} : @{" ArOfByte " link ArOfLong}   @{" ArOfStrg " link ArOfStrg}
               @{" ArOfWord " link ArOfWord}   @{" ArNew    " link ArNew}
@EndNode
@Node ArOfStrg "LotanArray : ArOfStrg"

  @{b}@{u}ArOfStrg@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= ArOfStrg(Data...)

    @{b}Function@{ub} : Used to create and initialize an array of strings.

               Instead of @{fg highlight}ArNew@{fg text}, the array  will  be  created  immediately  with  the
               values  specified,  the size of the array will also be adjusted to fit
               the requirements.

    @{b}Example@{ub}  : array.l = @{fg highlight}ArOfStrg@{fg text}("Lotan","Is","a Lord")

    @{b}See also@{ub} : @{" ArOfByte " link ArOfLong}   @{" ArOfLong " link ArOfStrg}
               @{" ArOfWord " link ArOfWord}   @{" ArNew    " link ArNew}
@EndNode
@Node ArOfWord "LotanArray : ArOfWord"

  @{b}@{u}ArOfWord@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.l @{ui}= ArOfWord(Data...)

    @{b}Function@{ub} : Used to create and initialize an array of words.

               Instead of @{fg highlight}ArNew@{fg text}, the array  will  be  created  immediately  with  the
               values  specified,  the size of the array will also be adjusted to fit
               the requirements.

    @{b}Example@{ub}  : array.l = @{fg highlight}ArOfWord@{fg text}($ABBA,2,$FF43,4,5,69554,7)

    @{b}See also@{ub} : @{" ArOfByte " link ArOfLong}   @{" ArOfLong " link ArOfStrg}
               @{" ArOfStrg " link ArOfWord}   @{" ArNew    " link ArNew}
@EndNode
@Node ArSet "LotanArray : ArSet"

  @{b}@{u}ArSet@{ub}@{uu}

    @{b}Syntax@{ub}   : ArSet Array,Item,Data...
               @{i}rc.l @{ui}= ArSet(Array,Item,Data...)

    @{b}Function@{ub} : Used to change an item or more of an array.

               You must respect types. For example, you cannot change a strings  with
               a  long,  or  a  long  with a string. But you can change a byte with a
               long, or a long with a byte.

               If you change a byte with a long, only the byte of the  long  will  be
               moved.

    @{b}Note@{ub}     : Used as a function, @{fg highlight}ArSet@{fg text} will return the number of items  changed  in
               the  array.  So  if  you try to change 4 items in an array of 2, @{fg highlight}ArSet@{fg text}
               will return 2. And if you try to chnage a string in an array of longs,
               @{fg highlight}ArSet@{fg text} will return 0.

               @{u}Don't forget@{uu} that the first item is 0.

    @{b}Example@{ub}  : @{fg highlight}Printf@{fg text} "\\SbString Changed\\Sp : %d\\n",@{fg highlight}ArSet@{fg text}(MyStrings,0,"I","Love","Lotan")
               @{fg highlight}Printf@{fg text} "\\SbLongs Chnaged\\Sp :  %d\\n",@{fg highlight}ArSet@{fg text}(MyLongs,3,1,2,3,4,5,6,7,8)

    @{b}See also@{ub} : @{" ArGet " link ArGet}
@EndNode
@Node ArStr "LotanArray : ArStr"

  @{b}@{u}ArStr@{ub}@{uu}

    @{b}Syntax@{ub}   : @{i}rc.s @{ui}= ArStr(Array,Item)

    @{b}Function@{ub} : Used to get a string from an array.

               This function will return a standard string from an array of  strings,
               intead of @{fg highlight}ArGet@{fg text} that will return the pointer of the string.

    @{b}Note@{ub}     : @{u}Don't forget@{uu} that the first item is 0.

    @{b}Example@{ub}  : @{fg highlight}NPrint ArGet@{fg text}(MyStrings,0)        >> 1CF00034
               @{fg highlight}NPrint ArStr@{fg text}(MyStrings,0)        >> Lotan

               @{fg highlight}Printf@{fg text} "%h\\n",@{fg highlight}ArGet@{fg text}(MyStrings,0) >> 1CF00034
               @{fg highlight}Printf@{fg text} "%s\\n",@{fg highlight}ArGet@{fg text}(MyStrings,0) >> Lotan

    @{b}See also@{ub} : @{" ArGet " link ArGet}
@EndNode

@Node HIST "LotanArray : History"
@Prev Main

  @{b}@{u}History@{ub}@{uu}

    @{b}0.00@{ub}

      Created @{fg highlight}ArrayOfLong@{fg text}, because I needed a quick and  simple  function  to  create
      arrays of long like in AmigaE.

    @{b}0.01@{ub}

      Added @{fg highlight}ArrayItem@{fg text} to be able to get a defined item from an array.

    @{b}0.08@{ub}

      - Now a @{i}header @{ui}is added to the array to be able to manage it more easily.

        @{fg highlight}NEWTYPE@{fg text}.Array
           Size.l
           Items.w
           Kind.w
        @{fg highlight}End NEWTYPE@{fg text}

      - Added   @{fg highlight}ArrayOfByte@{fg text},  @{fg highlight}ArrayOfWord@{fg text}  and  @{fg highlight}ArrayOfStrg@{fg text},  because  @{i}long @{ui} is   not
        everything in life ;-)

    @{b}0.10@{ub}

      Added @{fg highlight}ArrayStrg@{fg text} to get a string  from  an  array  directly,  instead  of  using
      @{i}rc.s = @{fg highlight}PeekS@{fg text}(@{fg highlight}ArrayItem@{fg text}(0,buf)).@{ui}

    @{b}0.16@{ub}

      - Renamed @{fg highlight}ArrayItem@{fg text} to @{fg highlight}ArrayIGet@{fg text}.
      - Added @{fg highlight}ArrayISet@{fg text} to be able to set items in an array.
      - Added @{fg highlight}ArrayLen@{fg text} to be able to get the amont of memory used.
      - Added @{fg highlight}ArrayMerge@{fg text}.

    @{b}0.20@{ub}

      - Renamed every @{fg highlight}ArrayXxx@{fg text} to @{fg highlight}ArXxx@{fg text}, faster to type ;-)
      - Added @{fg highlight}ArNew@{fg text} and @{fg highlight}ArDispose@{fg text}.

    @{b}0.28@{ub}

      - Renamed @{fg highlight}ArIGet@{fg text} to @{fg highlight}ArGet@{fg text}, @{fg highlight}ArISet@{fg text} to @{fg highlight}ArSet@{fg text} and @{fg highlight}ArStrg@{fg text} to @{fg highlight}ArStr@{fg text}.
      - Deep improval of @{fg highlight}ArSet@{fg text}, now old strings changed are freed.
      - Deep code optimizations.
      - Renamed @{fg highlight}ArItem@{fg text} to @{fg highlight}ArItm@{fg text}.

    @{b}0.30@{ub} - (21.05.99)                                                      (Size 648)

      Removed @{fg highlight}ArMerge@{fg text}, now you must use @{fg highlight}ArNew@{fg text} and @{fg highlight}CopyMem()@{fg text} to copy an array.

    @{b}0.31@{ub} - (19.10.99)                                          (Size 1936 / Code 678)

      @{fg highlight}ArDispose@{fg text} is now able to free automatically the last allocated array.

    @{b}0.32@{ub} - (24-01-00)                                          (Size 1876 / Code 620)

      Recompiled using PhxAss v4 by Frank Wille.
@EndNode
