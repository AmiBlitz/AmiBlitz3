@DATABASE RIGFXLibV2.6
@Author Conversion program
@$VER: RIGFXLIB V2.60 (27.01.2007)- Updated by mrodfr.
@NODE OVERVIEW "Overview of RI GFX Lib V2.6"

                                  @{b}@{u}Overview@{ub}@{uu}

This library contains commands for the control of palette objects inside
Blitz2. These are just simple commands that allow either interrogation of
the palette objects or modifications to the colour values contained in
them. After changing the palette with these commands, you'll have to do
either a USE PALETTE/SHOWPALETTE or DISPLAYPALETTE (whichever is applicable
to what you're doing) to make the changes come into effect on your screen.

Send us anything you've written......

@ENDNODE OVERVIEW

@NODE PaletteInfo "RI GFX Lib V2.5"

@{fg shine}Statement: PaletteInfo@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: PaletteInfo Palette#

  This command is used to specify the palette object that all palette
interrogations should look at. The majority of the commands use this
palette object as the source for their data, e.g. PalRed(1) will look at the
red value of colour 1 of the palette last used in a PaletteInfo command.

@ENDNODE PaletteInfo

@NODE PalRed "RI GFX Lib V2.5"

@{fg shine}Function: PalRed@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: r.w=PalRed (Colour#)

  This command is used to get the red value of colour number Colour#. You
should use the PaletteInfo command to specify what palette this command
takes its information from.

The value returned will be from 0 to 15

@ENDNODE PalRed

@NODE PalGreen "RI GFX Lib V2.5"

@{fg shine}Function: PalGreen@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: g.w=PalGreen (Colour#)

  This command is used to get the green value of colour number Colour#. You
should use the PaletteInfo command to specify what palette this command
takes its information from.

The value returned will be from 0 to 15

@ENDNODE PalGreen

@NODE PalBlue "RI GFX Lib V2.5"

@{fg shine}Function: PalBlue@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: b.w=PalBlue (Colour#)

  This command is used to get the blue value of colour number Colour#.  You
should use the PaletteInfo command to specify what palette this command
takes its information from.

The value returned will be from 0 to 15

@ENDNODE PalBlue

@NODE AGAPalRed "RI GFX Lib V2.5"

@{fg shine}Function: AGAPalRed@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: r.w=AGAPalRed (Colour#)

  This command is used to get the red value of colour number Colour#. You
should use the PaletteInfo command to specify what palette this command
takes its information from.

The value returned will be from 0 to 255, this number of shades, though,
can only be displayed on an AGA machine.

@ENDNODE AGAPalRed

@NODE AGAPalGreen "RI GFX Lib V2.5"

@{fg shine}Function: AGAPalGreen@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: g.w=AGAPalGreen (Colour#)

  This command is used to get the green value of colour number Colour#. You
should use the PaletteInfo command to specify what palette this command
takes its information from.

The value returned will be from 0 to 255, this number of shades, though,
can only be displayed on an AGA machine.

@ENDNODE AGAPalGreen

@NODE AGAPalBlue "RI GFX Lib V2.5"

@{fg shine}Function: AGAPalBlue@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: b.w=AGAPalBlue (Colour#)

  This command is used to get the blue value of colour number Colour#. You
should use the PaletteInfo command to specify what palette this command
takes its information from.

The value returned will be from 0 to 255, this number of shades, though,
can only be displayed on an AGA machine.

@ENDNODE AGAPalBlue

@NODE PalAdjust "RI GFX Lib V2.5"

@{fg shine}Statement: PalAdjust@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: PalAdjust dest_palette#,ration.q[,start_col,end_col]

  This command is used to multiply all the colours, or a range of colours,
in a palette object, by a ratio. The dest_palette# arguement is used to
give a destination for the adjusted colour information. This destination
should be a pre-reserved palette and should be AT LEAST as big and the
source palette. The source palette is taken as being the palette last used
in the PaletteInfo command.

The ratio should be given as either a quick value or a float and should
be below one for a fade or above to lighten a palette. If you give a ratio
of 1 then a palette copy will occur.

The optional start and end parameters let you specify the range of
colours to adjust. Only this range of colours, though, will be adjusted
and stored in the destination palette.

@ENDNODE PalAdjust

@NODE FillPalette "RI GFX Lib V2.5"

@{fg shine}Statement: FillPalette@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: FillPalette palette#,r,g,b[start_col,end_col]

  This command lets you fill a given palette object with specific r,g,b
values. The values given should be between 0 to and 15. Optionally, you
can give start and end colour numbers to set a range for the fill. You
should be careful, though, because when you specify a range, no checking is
done (at the moment) to make sure that you don't exceed the colour limit of
the palette.

NOTE: this command does not work on the palette last PaletteInfo'ed.

@ENDNODE FillPalette

@NODE AGAFillPalette "RI GFX Lib V2.5"

@{fg shine}Statement: AGAFillPalette@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: AGAFillPalette palette#,r,g,b[start_col,end_col]

  This command is identical to FillPalette except that it lets you specify
AGA shade values for the r,g,b parameters.

See: FillPalette 

@ENDNODE AGAFillPalette

@NODE CopyColour "RI GFX Lib V2.5"

@{fg shine}Statement/Function: CopyColour@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: [suc=]CopyColour source_pal#,dest_pal#,source_col#,dest_col#

  This will attempt to copy a colour entry in a palette to another entry,
which can be in a separate palette or the same. If used as a function,
then it will return -1 for success, or 0 for failure. The command fails if
either of the colour numbers is out of the range of the relevant palette.

@ENDNODE CopyColour

@NODE SaveCMAP "RI GFX Lib V2.5"

@{fg shine}Statement/Function: SaveCMAP@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga
Syntax: [suc=]SaveCMAP palette#,filename$

  This command will save out the given palette as an IFF file, with just a
BMHD and CMAP. This file can be loaded into graphics packages like DPaint.
It will return -1 for success in saving, or 0 for failure.

@ENDNODE SaveCMAP

@NODE CPUCls "RI GFX Lib V2.5"

@{fg shine}Statement: CPUCls@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: CPUCls bitmap#

  Does a clear of a bitmap using the CPU. This command, unlike the Acid
command Cls, only clears to colour 0. On accerelated machines, though, it
out performs the Cls instruction.

@ENDNODE CPUCls

@NODE MergeBitplanes "RI GFX Lib V2.5"

@{fg shine}Statement: MergeBitplanes@{fg text}
-----------------------------------------------------------------------------
Modes : Amiga/Blitz
Syntax: MergeBitplanes srcBitmap1#,srcBitmap2#,destBitmap#,numplanes

  This command allows you to merge the bitplane pointers of two bitmaps
together to make a third bitmap. The idea of it is to cut down on the need
of reallocting bitmaps when changing bitmap depths. Merging the two
bitmaps together allows you to have deeper bitmaps when necessary, without
reallocating them.

This routine takes the bitplane pointers first from srcBitmap1 until it
runs out of pointers in that bitmap. It then moves on to srcBitmap2# until
all the pointers it needs are found. Note that numplanes must be in the
range of 1 to 8.

IMPORTANT NOTES:

	1. srcBitmap1 and srcBitmap2 must both be the same width and
           height. The command will fail if this is not the case.

	2. the destination bitmap will be allocated as a 'borrowed'
	   bitmap, thus freeing it will not actually deallocate any memory.  

	3. you must not deallocate either of the source bitmaps if you
	   still intend to use the destbitmap - doing so will invalidate
	   the bitplane pointers used by the destbitmap.

>> END
@ENDNODE MergeBitplanes

@NODE MAIN "RI GFX Lib V2.5"
.---------------------------------------------------------------------------.
|                              @{b}RI GFX Lib V2.5@{ub}                              |
`---------------------------------------------------------------------------'

                         ©1996 Red When Excited Ltd

                             @{"     Overview     " link OVERVIEW}

                               Command Index                                

             @{" AGAFillPalette " link AGAFillPalette}                @{" AGAPalBlue     " link AGAPalBlue}
             @{" AGAPalGreen    " link AGAPalGreen}                @{" AGAPalRed      " link AGAPalRed}
             @{" CopyColour     " link CopyColour}                @{" CPUCls         " link CPUCls}
             @{" FillPalette    " link FillPalette}                @{" MergeBitplanes " link MergeBitplanes}
             @{" PalAdjust      " link PalAdjust}                @{" PalBlue        " link PalBlue}
             @{" PaletteInfo    " link PaletteInfo}                @{" PalGreen       " link PalGreen}
             @{" PalRed         " link PalRed}                @{" SaveCMAP       " link SaveCMAP}
                                @{" Examples " LINK Examples}


@ENDNODE MAIN

@NODE Examples "Example Programs"

                             @{b}@{u}Example Programs@{ub}@{uu}

@{fg shine}EXAMPLE 1@{fg text} - Demonstration Of Using The Colour Commands :

           @{" Load Example 1 " system "run >NIL: BLITZ3:Amiblitz3 Blitz3:Docs/UserLibs/Examples/RIGFXLib1.bb"}

@ENDNODE Examples
