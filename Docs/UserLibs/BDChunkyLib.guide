@DATABASE BDChunkyLib
@$VER: BDCHUNKYLIB V1.1 (27.01.2007)- Updated by mrodfr.
@NODE "MAIN"
     BDChunkyLib  V1.0  (C) BadDolls Production
     20/05/1998

    @{" Installation " link "Install"}

First, there is a new object call "NChunky". This is a Chunky Buffer ;-)

The structure of this object is :

NEWTYPE.NChunky
  Width.l       ; Width of picture
  Height.l      ; Height of picture
  Size.l        ; Size of buffer
  AWidth.l      ; Aligned Width for buffer
  *ChunkyData.b ; Addr of the real chunky buffer
End NEWTYPE

    @{" BtmToNChunkyA " link "BtmToNChunkyA"}
    @{" CopyNChunyA " link "CopyNChunyA"}
    @{" FreeNChunkyA " link "FreeNChunkyA"}
    @{" InitNChunky " link "InitNChunky"}
    @{" NCBoxFA " link "NCBoxFA"}
    @{" NCClsA " link "NCClsA"}
    @{" NChunkyToBtmA " link "NChunkyToBtmA"}
    @{" NCPlotA " link "NCPlotA"}
    @{" NCPointA " link "NCPointA"}
    @{" RemapNChunkyLineA " link "RemapNChunkyLineA"}
    @{" RemapNChunkyPointA " link "RemapNChunkyPointA"}

@ENDNODE


@NODE "Install"
;--------------------------------------------------------
; How to install it, if you need another lib's number :
;
; First : Change the value of #bdchklib to a free number.
; ------  ( Have a look to DefLibMan in BUM9 )
;
; Second: Make blitzlibs:libmacs.res resident
; ------  ,select only 'Make Smallest Code'
;         in the Compiler Options
;         and create an executable ( BDChunkyLib.obj )
;
; Third : Remake your Deflibs ( via DefLibMan for example )
; ------
;________________________________________________________
@ENDNODE


@NODE "InitNChunky"
 o  InitNChunky NChunky#,Width.l,Height.l

    This command simply init the chunky buffer NChunky#.
    When use as a command, it return the address of the object.

 o  *AddrNChunky.NChunky=InitNChunky Width.l,Height.l

    This can be useful when you need a lot of NChunky buffers
     and don't want to assign them to a number. ( I need this in
     XLabProcess ;-)  )
@ENDNODE


@NODE "NChunkyToBtmA"
 o  NChunkyToBtmA *AddrNChunky.l, *AddrBtm.l

    NChunkyToBtm  NChunky#, BitMap#

    Convert a NChunky to BitMap ( same size !!! )
@ENDNODE


@NODE "BtmToNChunkyA"
 o  BtmToNChunkyA *AddrBtm.l *AddrNChunky.l

    BtmToNChunky BitMap#, NChunky#

    Convert a BitMap to a NChunky ( same size !!! )
@ENDNODE


@NODE "NCPlotA"
 o   NCPlotA *AddrNChunky.l, x.l, y.l, colour.b

    NCPlot NChunky#, x.l, y.l, colour.b

     Just like the Plot command ;-)
@ENDNODE


@NODE "NCPointA"
 o   colour.b = NCPointA( *AddrNChunky.l, x.l, y.l )

     colour.b = NCPoint( NChunky#, x.l, y.l )

     Just like the Point command...
@ENDNODE


@NODE "NCBoxFA"
 o   NCBoxFA *AddrNChunky.l, x1.l, y1.l ,x2.l ,y2.l ,colour.b

     NCBoxF NChunky#, x1.l, y1.l, x2.l, y2.l, colour.b

     Just like the BoxF command...
@ENDNODE


@NODE "CopyNChunyA"
 o   CopyNChunkyA *AddrNChunkySrc.l, *AddrNChunkyDest.l

    CopyNChunky NChunkySrc#, NChunkyDest#

     Will copy the NChunkySrc to the NChunkyDest.
@ENDNODE


@NODE "NCClsA"
 o   NCClsA *AddrNChunky.l ,colour.b

    NCCls NChunky# [,colour.b ]

     Hummm, like Cls...
@ENDNODE


@NODE "FreeNChunkyA"
 o   FreeNChunkyA *AddrNChunky.l

     Free a NChunky buffer.

    @{b}@{u}ONLY USE THIS IF YOU HAVE USE THE InitNChunkyA COMMAND !!!@{uu}@{ub}
@ENDNODE


@NODE "RemapNChunkyLineA"
 o   RemapNChunkyLineA *AddrNChunky.l ,y.l ,&RemapTable(0).l

     RemapNChunkyLine NChunky# ,y.l ,&RemapTable(0).l

     Simply Remap the line 'y' of your NChunky, using a color table.

    RemapTable() is a table for converting the colours.
    RemapTable must be .b !!!
@ENDNODE


@NODE "RemapNChunkyPointA"
 o   RemapNChunkyPointA *AddrNChunky.l ,x.l, y.l ,&RemapTable(0).l

     RemapNChunkyPoint NChunky# ,x.l, y.l ,&RemapTable(0).l

     Simply Remap the point x,y of your NChunky, using a color table.

    RemapTable() is a table for converting the colours.
    RemapTable must be .b !!!
@ENDNODE
