@DATABASE String
@$VER: String V1.51 (27.01.2007)-Updated by mrodfr(05.01.1999) by Laboureur -> AlphaSOUND <- Frédéric
@NODE MAIN "String V1.51"

    @{b}String V1.50 General Information:@{ub}

  * Blitz Basic II library number         : #166
  * Library size when linked to executable: 150 bytes
  * Number of commands                    : 11
  * Resources automatically freed at end  : Yes

    @{b}Commands summary:@{ub}

  @{" NAsc     " LINK NAsc} Function (Word)
  @{" NChr$    " LINK NChr$} Function (String)
  @{" NCvi     " LINK NCvi} Function (String)
  @{" NCvl     " LINK NCvl} Function (String)
  @{" NLCase$  " LINK NLCase$} Function (String)
  @{" NLeft$   " LINK NLeft$} Function (String)
  @{" NLen     " LINK NLen} Function (Long)
  @{" NMki$    " LINK NMki$} Function (Word)
  @{" NMkl$    " LINK NMkl$} Function (Long)
  @{" NRight$  " LINK NRight$} Function (String)
  @{" NUCase$  " LINK NUCase$} Function (String)

@ENDNODE


@NODE NAsc

    @{b}SYNTAX@{ub}
  Asc.w = NAsc(String$)

    @{b}FUNCTION@{ub}
  Returns the ascii value of the first character in string$.

@ENDNODE


@NODE NLen

    @{b}SYNTAX@{ub}
  length.w = NLen(String$)

    @{b}FUNCTION@{ub}
  Returns the character-length of the string.

@ENDNODE


@NODE NChr$

    @{b}SYNTAX@{ub}
  Text$ = NChr$(ASCII Value)

    @{b}FUNCTION@{ub}
  Returns the letter associated with the given ASCII value.

@ENDNODE


@NODE NRight$

    @{b}SYNTAX@{ub}
  Result$ = NRigth$(String$, Length)

    @{b}FUNCTION@{ub}
  Returns the characters from the right of the string with the
  given length. This function won't crash if given an incorrect
  value for the length parameter, it will return the 'best'
  matching result.

@ENDNODE


@NODE NLeft$

    @{b}SYNTAX@{ub}
  Result$ = NLeft$(String$, Length)

    @{b}FUNCTION@{ub}
  Returns the characters from the left of the string with the
  given length. This function won't crash if given an incorrect
  value for the length parameter, it will return the 'best'
  matching result.

@ENDNODE


@NODE NUCase$

    @{b}SYNTAX@{ub}
  Result$ = NUCase$(String$)

    @{b}FUNCTION@{ub}
  Returns the original string converted to Upper-Case caracters
  (if possible). This command also supports accented letters, so
  if an 'é' is found, it will be converted into Upper 'é'.
  Passing a null string causes the function to return a null string.

@ENDNODE


@NODE NLCase$

    @{b}SYNTAX@{ub}
  Result$ = NLCase$(String$)

    @{b}FUNCTION@{ub}
  Returns the original string converted to Lower-Case characters
  (if possible). This command also supports accented letters, so
  if an Upper 'é' is found, it will be converted into 'é'.
  Passing a null string causes the function to return a null string.

@ENDNODE


@NODE NMki$

    @{b}SYNTAX@{ub}
  Result$ = NMki$(Word number)

    @{b}FUNCTION@{ub}
  Converts a given word number into a 2-character string equivalent.
  It's often used to save disk space when saving numbers to disk.
  To convert the String back into a number, you can use the
  NCvi() function.

@ENDNODE


@NODE NMkl$

    @{b}SYNTAX@{ub}
  Result$ = NMkl$(Long number)

    @{b}FUNCTION@{ub}
  Converts a given long number into a 4-character string equivalent.
  It's often used to save disk space when saving numbers to disk.
  To convert the String back into a number, you can use the
  NCvl() function.

@ENDNODE


@NODE NCvl

    @{b}SYNTAX@{ub}
  Result.l = NCvl(String$)

    @{b}FUNCTION@{ub}
  Converts a given 4-character string into a number equivalent.
  It's the complementary function to NMkl$().

@ENDNODE


@NODE NCvi

    @{b}SYNTAX@{ub}
  Result.w = NCvi(String$)

    @{b}FUNCTION@{ub}
  Converts a given 2-character string into a number equivalent.
  It's the complementary function to NMki$().

@ENDNODE
