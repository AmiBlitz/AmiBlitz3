@DATABASE CommoditiesV1.22
@$VER: Commodities V1.22 (27.01.2007)- Updated by mrodfr. (1999) by Richard Andersson
@NODE MAIN "Commodities V1.22"

    @{b}Commodities V1.21 General Information:@{ub}

  * Blitz Basic II library number         : #153
  * Library size when linked to executable: 680 bytes
  * Number of commands                    : 16
  * Resources automatically freed at end  : Yes
  * RunTime Error Debugger                : Yes

    @{b}Commands summary:@{ub}

  @{" NActivateCommodity           " LINK NActivateCommodity} Statement
  @{" NCommodityActivateObject     " LINK NCommodityActivateObject} Statement
  @{" NCommodityActivateTranslater " LINK NCommodityActivateTranslater} Statement
  @{" NCommodityAddInputEvent      " LINK NCommodityAddInputEvent} Statement
  @{" NCommodityChangeFilter       " LINK NCommodityChangeFilter} Function word
  @{" NCommodityChangeTranslater   " LINK NCommodityChangeTranslater} Statement
  @{" NCommodityCtrlCSignal        " LINK NCommodityCtrlCSignal} Function word
  @{" NCommodityDeleteObject       " LINK NCommodityDeleteObject} Statement
  @{" NCommodityEvent              " LINK NCommodityEvent} Function word
  @{" NCommodityID                 " LINK NCommodityID} Function word
  @{" NCommodityIXChangeFilter     " LINK NCommodityIXChangeFilter} Function word
  @{" NCommodityObjectSignal       " LINK NCommodityObjectSignal} Function word
  @{" NCommodityCreateObject       " LINK NCommodityCreateObject} Function word
  @{" NCommodityType               " LINK NCommodityType} Function word
  @{" NCreateCommodity             " LINK NCreateCommodity} Function word
  @{" NWaitCommodityEvent          " LINK NWaitCommodityEvent} Function word
@ENDNODE


@NODE NActivateCommodity

    @{b}SYNTAX@{ub}
  NActivateCommodity @{b}Status@{ub}.l

    @{b}STATEMENT@{ub}
  Enable or Disable the Commodity, including all created Objects.

  When the Commodity is disabled it will only receive CxMessages of
  Command Type, from Commdities Exchange, CxMessages of Event Type
  are not processed.

  @{b}Status@{ub}
  Enable the Commodity by setting status to TRUE and Disable Commodity
  by setting it to FALSE.
@ENDNODE


@NODE NCommodityActivateObject

    @{b}SYNTAX@{ub}
  NCommodityActivateObject @{b}#Object@{ub}.l,@{b}Status@{ub}.l

    @{b}STATEMENT@{ub}
  Disable or Enable an Object created by NCommodityCreateObject().

  A disabled Object is kind of sleeping, it won't process any
  CxMessages until NCommodityActivateObject(#Obj, TRUE) wakes it up.

  This statement doesn't care if the Object is unused.

  @{b}#Object@{ub}
  Object to Disable or Enable.

  @{b}Status@{ub}
  Disable the Object by setting status to FALSE and Enable Object
  by setting status to TRUE.
@ENDNODE


@Node NCommodityActivateTranslater

    @{b}SYNTAX@{ub}
  NCommodityActivateTranslater @{b}#Object@{ub}.l,@{b}Status@{ub}.l

    @{b}STATEMENT@{ub}
  Disable or Enable the Translater in an Object.

  An enabled Translater changes the CxMessage input event in two ways,
  it could be eliminated or replaced by a new input event. When none
  of this is useful just disable the Translater.

  This statement doesn't care if the Object is unused.

  @{b}#Object@{ub}
  Object to use.

  @{b}Status@{ub}
  Disable the Translater by setting status to FALSE and Enable
  Translater by setting status to TRUE.
@EndNode


@NODE NCommodityAddInputEvent

    @{b}SYNTAX@{ub}
  NCommodityAddInputEvent @{b}*InputEvent@{ub}

    @{b}STATEMENT@{ub}
  Add a new InputEvent or a chain of InputEvents to the
  input event stream.

  @{b}*InputEvent@{ub}
  This is a pointer to an InputEvent NewType or a chain of InputEvent
  NewTypes and it is free to use again after this call.
@ENDNODE


@NODE NCommodityChangeFilter

    @{b}SYNTAX@{ub}
  @{b}error@{ub}.w = NCommodityChangeFilter (@{b}#Object@{ub}.l,@{b}Filter$@{ub})

    @{b}FUNCTION@{ub}
  Change the Filter conditions for an Object.

  This function doesn't care if the Object is unused.

  @{b}#Object@{ub}
  The Object to change the Filter for.

  @{"Filter$" LINK FilterStrings}
  The string that describes the new Filter conditions.

  @{b}error@{ub}
  If error is TRUE the input description string is bad and the Object does
  not process any CxMessages until either: this function, or
  NCommodityIXChangeFilter() succeeds the next time.
@ENDNODE


@NODE NCommodityChangeTranslater

    @{b}SYNTAX@{ub}
  NCommodityChangeTranslater @{b}#Object@{ub}.l,@{b}*InputEvent@{ub}

    @{b}STATEMENT@{ub}
  Change the Translater's InputEvent which replaces every CxMessage
  input event received.

  This statement doesn't care if the Object is unused.

  @{b}#Object@{ub}
  Object to use.

  @{b}*InputEvent@{ub}
  This is a pointer to an InputEvent NewType or a chain of InputEvent
  NewTypes and it is free to use again after this call.
@ENDNODE


@NODE NCommodityCtrlCSignal

    @{b}SYNTAX@{ub}
  @{b}result@{ub}.w = NCommodityCtrlCSignal

    @{b}FUNCTION@{ub}
  When a Commodity event has occured this function checks to see if
  the Ctrl C keys were pressed.

  @{b}result@{ub}
  The result is TRUE if Ctrl C was pressed else it's FALSE.
@ENDNODE


@NODE NCommodityDeleteObject

    @{b}SYNTAX@{ub}
  NCommodityDeleteObject @{b}#Object@{ub}.l

    @{b}STATEMENT@{ub}
  Delete a Disabled or Enabled Object.

  This statement doesn't care if the Object is unused.

  @{b}#Object@{ub}
  The Object to delete.
@ENDNODE


@NODE NCommodityEvent

    @{b}SYNTAX@{ub}
  @{b}result@{ub}.w = NCommodityEvent

    @{b}FUNCTION@{ub}
  This function checks if any Commodity event has occurred.

  A Commodity event can be one of the following: if any enabled Object
  receives the CxMessage it's looking for; if the user presses a button
  in Commodities Exchange; or, if the user presses Ctrl C in a CLI
  environment.

  NCommodityEvent() doesn't wait for events to happen, unlike
  NWaitCommodityEvent() - this is useful when the eventloop
  should go on.

  @{b}result@{ub}
  The result is TRUE for any Commodity event else it's FALSE.

  @{"EventLoop" LINK Example2}
@ENDNODE


@NODE NCommodityID

    @{b}SYNTAX@{ub}
  @{b}id@{ub}.w = NCommodityID

    @{b}FUNCTION@{ub}
  This function return the ID of the Object that received a CxMessage.

  @{b}id@{ub}
  This is the same as #param1 in NCommodityCreateObject() when the
  Object is created.

  If msgtype is of Command Type then NCommodityID returned a command
  from Commodities Exchange.
@ENDNODE


@NODE NCommodityIXChangeFilter

    @{b}SYNTAX@{ub}
  @{b}error@{ub}.w = NCommodityIXChangeFilter (@{b}Object@{ub}.l,@{b}*InputXpression@{ub})

    @{b}FUNCTION@{ub}
  Change the Filter conditions with an InputXpression NewType.

  This function doesn't care if the Object is unused.

  @{b}Object@{ub}
  The Object to change the Filter for.

  @{b}*InputXpression@{ub}
  A pointer to a InputXpression NewType that describes the new Filter
  conditions, the NewType is free to use again after this call.

  @{b}error@{ub}
  If error is TRUE there was something that didn't make sense in the
  InputXpression and the Object won't process any CxMessage until either:
  this function, or NCommodityChangeFilter() succeeds the next time.
@ENDNODE


@NODE NCommodityObjectSignal

    @{b}SYNTAX@{ub}
  @{b}result@{ub}.w = NCommodityObjectSignal

    @{b}FUNCTION@{ub}
  When a Commodity event has occured this function checks if the
  signal came from an Object.

  @{b}result@{ub}
  The result is TRUE if an Object signaled the Commodity else
  it's FALSE.
@ENDNODE


@NODE NCommodityCreateObject

    @{b}SYNTAX@{ub}
  @{b}error@{ub}.w = NCommodityCreateObject(@{b}#Object@{ub}.l,@{b}Filter$@{ub},@{b}*InputEvent@{ub})

    @{b}FUNCTION@{ub}
  This function creates an Object. The Object is created in enabled state
  and starts to process CxMessages immediately if the Commodity is enabled.

  If the Object is already in use the function doesn't care and just creates
  a new Object without deleting the old one, after that there is no way to
  delete or change the old Object.

  An Object consists of three parts.

  * The Filter, whose only purpose is to filter out the kind of CxMessage
    th Object is interested in.  The Filter can be changed at runtime.

  * The Sender, whose only purpose is to signal the Commodity when it
    receives a CxMessage.

  * The Translater, whose only purpose is to translate every CxMessage
    input event this Object receives, into a new one - the Translater
    needs to be enabled to do this.  The Translater can be changed at
    runtime.

  @{b}#Object@{ub}
  This is the Object number required and should not be higher then #param1
  in NCreateCommodity().

  @{"Filter$" LINK FilterStrings}
  This string sets the Filter conditions, a description of what this Object
  wants to know about.

  @{b}*InputEvent@{ub}
  This is a pointer to an InputEvent NewType or a chain of InputEvent
  NewTypes, the real input event is deleted and replaced by this new one.

  If the pointer is zero the real input event is just deleted, no other
  Commodity or the OS will know about it.

  @{b}error@{ub}
  If error is #COERR_ISNULL = 1 then the Object could not be created
  but if error is #COERR_BADFILTER = 4 the Object is created but
  it doesn't process any CxMessages until the Filter is changed
  with  NCommodityChangeFilter() or NCommodityIXChangeFilter().
@ENDNODE


@NODE NCommodityType

    @{b}SYNTAX@{ub}
  @{b}msgtype@{ub}.w = NCommodityType

    @{b}FUNCTION@{ub}
  This function return the messagetype of a CxMessage.

  @{b}msgtype@{ub}
  The CxMessage is either of Command Type or Event Type, the Command Type
  comes when the user presses a button in the Commodities Exchange
  and the Event Type when an Object receives a CxMessage.
@ENDNODE


@NODE NCreateCommodity

    @{b}SYNTAX@{ub}
  @{b}error@{ub}.w = NCreateCommodity(@{b}Objects@{ub}.l,@{b}Name$@{ub},@{b}Title$@{ub},@{b}Description$@{ub},
                             @{b}Priority@{ub}.b,@{b}Flag@{ub}.b)

    @{b}FUNCTION@{ub}
  This function creates the basic stuff for a Commodity.

  The Commodity is created in a disabled state so after you've
  created some objects, enable it with NActivateCommodity(TRUE).

  This is the Initroutine and should always be called first and
  can only be called once, at the moment, so if there is a failure
  with this call, then the program should always @{b}quit@{ub}.

  @{b}Objects@{ub}
  The number of Objects required,  Max Objects is 2046.

  @{b}Name$@{ub}
  This string describes the name of the Commodity and should be unique
  for each Commodity.

  @{b}Title$@{ub}
  This string describes the title that shows up in the window of
  Commodities Exchange when the Commodity is running.

  @{b}Description$@{ub}
  This string describes the description of the Commodity that shows up
  in the window of Commodities Exchange when the Commodity is running.

  @{b}Priority@{ub}
  The Commodity is inserted in the commoditylist and the place depends
  on the priority - ranging between -128 and 127.

  To do it properly the Commodity should read the ToolType CX_PRIORITY
  and use the priority specified by the user.

  @{b}Flag@{ub}
  If this is TRUE then the Commodity should show/hide a GUI when the user
  presses show interface/hide interface in Commodities Exchange.

  To do it properly the Commodity should read the ToolType CX_POPUP
  and see if the user wants the GUI to pop up when the Commodity is
  started.

  @{b}error@{ub}
  If this is FALSE the Commodity could not be created, this should always
  be checked and if it's FALSE then the program should @{b}quit@{ub}.
@ENDNODE


@NODE NWaitCommodityEvent

    @{b}SYNTAX@{ub}
  @{b}result@{ub}.w = NWaitCommodityEvent

    @{b}FUNCTION@{ub}
  This function checks if any Commodity event has occured.

  A Commodity event is one of the following: if an enabled Object
  receives the CxMessage it's looking for; if the user presses a button
  in Commodities Exchange; or, if the user presses Ctrl C in a CLI
  environment.

  NWaitCommodityEvent() would wait for events to happen, unlike
  NCommodityEvent(), this is useful for saving CPU time.

  @{b}result@{ub}
  The result is TRUE for any Commodity event else it's FALSE.

  @{"EventLoop" LINK Example1}
@ENDNODE


@NODE FilterStrings

    [Class]  {[-] (Qualifier|Synonym)}  [[-] upstroke]  [highmap|ANSICode]


    @{"       Class       " LINK Class}
    @{" Qualifier|Synonym " LINK Qualifier|Synonym}
    @{"     upstroke      " LINK upstroke}
    @{" highmap|ANSICode  " LINK highmap|ANSICode}


  Some simple input description strings.
  -------------------------------------
  "rawkey upstroke a"

  "rawkey -upsroke f1"

  "timer"

  "diskremoved"

  "rawkey leftbutton f2"
@ENDNODE

@NODE Class

 Class can be any one of the class strings in the table below.

     Class String
     ------------
    rawkey
    timer
    diskremoved
    diskinserted
@ENDNODE

@NODE Qualifier|Synonym

 Qualifier is one of the qualifier strings from the table below.
 A dash preceding the qualifier string tells the filter object not
 to care if that qualifier is present in the input event.
 Notice that there can be more than one qualifier (or none at all) in the
 input description string.

   Qualifier String
   ----------------
    lshift
    rshift
    capslock
    control
    lalt
    ralt
    lcommand
    rcommand
    numericpad
    repeat
    midbutton
    rbutton
    leftbutton
    relativemouse

 Synonym is one of the synonym strings from the table below.  These
 strings act as synonyms for groups of qualifiers. A dash preceding
 the synonym string tells the filter object not to care if that
 synonym is present in the input event.  Notice that there can be more
 than one synonym (or none at all) in the input description string.

    Synonym String
    --------------
    shift        look for either shift key
    caps         look for either shift key or capslock
    alt          look for either alt key
@ENDNODE

@NODE upstroke

 Upstroke is the literal string "upstroke".  If it is present alone the
 filter considers only upstrokes, if it's absent the filter considers only
 downstrokes and if preceded by a dash the filter considers both upstrokes
 and downstrokes.
@ENDNODE

@NODE highmap|ANSICode

 Highmap is one of the following strings:

    space , backspace , tab , enter , return , esc , del , help,
    up , down , right , left,
    f1 , f2 , f3 , f4 , f5 , f6 , f7 , f8 , f9 , f10.

 For some reason commodities.library accept f11 and f12 as
 valid keys.

 ANSICode is a single character for example `a' .

@ENDNODE


@NODE Example1

  quit.w=0

  Repeat

    NWaitCommodityEvent

    IF NCommodityObjectSignal
      Other code
    EndIf


    IF NCommodityCtrlCSignal  Then quit=1

  Until (quit)
@ENDNODE


@NODE Example2

  quit.w=0

  Repeat

    NVWait  ; or  VWait n  or  Delay_ n  - to slow down the loop.

    If NCommodityEvent

      IF NCommodityObjectSignal
        Other code
      EndIf


      IF NCommodityCtrlCSignal  Then quit=1

    EndIf

  Until (quit)
@ENDNODE

