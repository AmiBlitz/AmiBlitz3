@database EML.guide
@$VER: EML.guide 1.76b rev 25 July 1996 - © Paul Reece 1996

*************************************************************************
**** HEY YOU!!  THIS IS AN AMIGAGUIDE® HYPERTEXT FILE - YOU MUST USE ****
**** AMIGAGUIDE®, MULTIVIEW® OR SHOWHYP TO READ THIS DOCUMENTATION!! ****
*************************************************************************

@node Main "Enhanced Music Library - © Paul Reece 1996"

	Enhanced Music Library v1.76b

	© Paul Reece 1996


	@{" About               " link about} - What is EML anyway?
	@{" Requirements        " link req} - What is required for it to run?
	@{" Installation        " link install} - Installation instructions
	@{" Misc Information    " link lminfo} - Bugs, g'days and the future etc
	@{" Author              " link author} - How to contact the author

	@{" Commands            " link commands} - Included commands

	@{" Copyright info      " link copyr} - Copyright info and Disclaimer
	@{" Program History     " link prevs} - Revision Information

	@{" EML Player          " link player} - EML Player

@endnode

@node about "What is the Enhanced Music Library?"

Basically, the Enhanced Music Library is my attempt to port my Enhanced
Music Extension for Amos/AmosPro to the Blitz Basic 2 environment.

The library itself is quite similar to it Amos counterpart, featuring:

The new features include:

	o FULL Protracker CIA Playroutines (VBL also supported)

	o Tracker support commands to change volume, read titles etc

	o Improved tracker looping

	o Control of tracker voices (on/off)

	o Functions to return song information including current pattern,
	  songlength, sample periods etc.

	o Functions to return instrument information and parameters

Also to be included in the future are:

	o TfmxPro playroutines

 	o Sampling and Sample Monitoring from most available samplers
 	
 	o My old TrTrig command from EME days..  Easy I know, I just haven't
 	  been stuffed getting around to it :) (next release, I promise!)

@endnode

@node req "Requirements"

The Enhanced Music Library requires:

	o Blitz Basic 2.

   o An Amiga computer (Hey! You can try it on a PC if you want!!)  :-)

@endnode

@node install "Installation of the library"

The library is fairly easy to install in your Blitz system.  Just copy it
into your userlibs directory and build a new deflibs file (if you run Blitz
this way)

@endnode

@node lminfo "Bugs, g'days and the future"

Current Bugs/Problems:

	o None known at this stage.. I'm sure this will change though :)

Thankyou's must go to the following people:

	- Mikko Makela (mmmakela\@helsinki.fi)
	  Neil Miller (neilm\@triode.apana.org.au)
	  
	  For early beta testing.

	- Steve Flock

	  For help with window sizing problems in EMLPlayer (with different
	  fontsizes)

@endnode

@node author "How to contact the Author"

Have you found a bug?  Do you need help?  Do you have some suggestions for
the next version of the library?  Or do you just want to write some mail?
(I love mail!)

Anyway, if you want to contact me for any reason, I can be reached as
follows:

SNAIL:

	Paul Reece
	12 Howe Elbow
	Quinns Rocks
	Western Australia.
	6030.

	(at this stage until end of 1996)

EMAIL:

	paul\@fastlane.net.au
	preece\@anfi.tas.gov.au
	
IRC:

	nickname is Fastlane and I can usually be found on #amiga

@endnode

@node commands "Commands"

Tracker Commands

	@{" LoadPTModule                " link loadptmodule}		@{" SavePTModule                " link saveptmodule}
	@{" PlayPTModule                " link playptmodule}		@{" StopPTModule                " link stopptmodule}
	@{" PausePTModule               " link pauseptmodule}		@{" ContPTModule                " link contptmodule}
	@{" SetPTCurrentPos             " link setptcurrentpos}		@{" SetPTSongLoop               " link setptsongloop}
	@{" SetPTPatLoop                " link setptpatloop}		@{" SetPTZeroSpeed              " link setptzerospeed}
	@{" SetPTVolume                 " link setptvolume}		@{" SetPTVoiceVolume            " link setptvoicevolume}
	@{" SetPTSpeed                  " link setptspeed}		@{" =GetPTSpeed                 " link getptspeed}
	@{" SetPTTempo                  " link setpttempo}		@{" =GetPTTempo                 " link getpttempo}
	@{" SetPTMask                   " link setptmask}		@{" =GetPTMask                  " link getptmask}
	@{" SetPTVoiceOff               " link setptvoiceoff}		@{" SetPTVoiceOn                " link setptvoiceon}
	@{" SetPTVoiceToggle            " link setptvoicetoggle}		@{" =GetPTVoiceStat             " link getptvoicestat}
	@{" =GetPTVoicePeriod           " link getptvoiceperiod}		@{" =GetPTVoiceNote             " link getptvoicenote}
	@{" =GetPTVoiceInstrument       " link getptvoiceinstrument}		@{" =GetPTVuLevel               " link getptvulevel}
	@{" =GetPTRealVuLevel           " link getptrealvulevel}		@{" =GetPTSongPos               " link getptsongpos}
	@{" =GetPTPatternPos            " link getptpatternpos}		@{" =GetPTStat                  " link getptstat}
	@{" =GetPTModuleLen             " link getptmodulelen}		@{" =GetPTPosPattern            " link getptpospattern}
	@{" =GetPTModuleName$           " link getptmodulename}		@{" =GetPTInstrumentName$       " link getptinstrumentname}
	@{" =GetPTInstrumentAddr        " link getptinstrumentaddr}		@{" =GetPTInstrumentLen         " link getptinstrumentlen}
	@{" =GetPTInstrumentRepeatStart " link getptinstrumentrepeatstart}		@{" =GetPTInstrumentRepLen      " link getptinstrumentreplen}
	@{" =GetPTInstrumentVol         " link getptinstrumentvol}
    @{" =GetPTVoiceVolume           " link getptvoicevolume}
Advanced Commands

	@{" SetPTCia                    " link setptcia}		@{" SetPTVbl                    " link setptvbl}
	@{" SetPTNoInt                  " link setptnoint}		@{" SetPTCiaInt                 " link setptciaint}
	@{" SetPTCiaPri                 " link setptciapri}		@{" PTInt                       " link ptint}

Sampling Commands (not included in this release)

	@{" Sample                      " link sample}		@{" Monitor                     " link monitor}
	@{" SampleSound                 " link samplesound}		@{" =Period                     " link period}
	@{" =Hertz                      " link hertz}

@endnode


@node loadptmodule "LoadPTModule"

Command: LoadPTModule
---------------------
Syntax: LoadPTModule PTModule#,Filename$
        suc.b=LoadPTModule(PTModule#,Filename$)

Modes: Amiga

Description:

This command loads the specified file into the specified ptmodule object.
If used as a function, it returns TRUE (-1) if there were no errors.

@endnode
@node saveptmodule "SavePTModule"

Command: SavePTModule
---------------------
Syntax: SavePTModule PTModule#,Filename$
        suc.b=LoadPTModule(PTModule#,Filename$)

Modes: Amiga

Description:

This command saves the specified ptmodule object into the file specified.
If use as a function, it returns TRUE (-1) if there were no errors.

@endnode
@node playptmodule "PlayPTModule"

Statement: PlayPTModule
-----------------------
Syntax: PlayPTModule PTModule#[,Position]

Modes: Amiga/Blitz

Description:

Play a module loaded in as the specified Blitz ptmodule object.  The optional
position parameter allows you to specify a starting position to play from.

Modules will play correctly in BLITZ mode in version 1.90 and higher of Blitz
Basic 2.  For playing on other versions of Blitz2 in BLITZ mode, see the
details for SetPTNoInt below.

@endnode
@node stopptmodule "StopPTModule"

Statement: StopPTModule
-----------------------
Syntax: StopPTModule

Modes: Amiga/Blitz

Description:

Stops any ptmodule that may be playing.

@endnode
@node pauseptmodule "PausePTModule"

Statement: PausePTModule
------------------------
Syntax: PausePTModule

Modes: Amiga/Blitz

Description:

Pauses any playing ptmodule.

@endnode
@node contptmodule "ContPTModule"

Statement: ContPTModule
-----------------------
Syntax: ContPTModule

Modes: Amiga/Blitz

Description:

Continues any paused ptmodule from the point it was paused at.

@endnode
@node setptcurrentpos "SetPTCurrentPos"

Statement: SetPTCurrentPos
--------------------------
Syntax: SetPTCurrentPos pos

Modes: Amiga/Blitz

Description:

Jumps the module to the position given.  Note that NO error checking is
done.

@endnode
@node setptsongloop "SetPTSongLoop"

Statement: SetPTSongLoop
------------------------
Syntax: SetPTSongLoop On|Off

Modes: Amiga/Blitz

Description:

This command determines whether a tracker module repeats from the start when
a module ends.  As a default, any module will stop when the end is reached.

@endnode
@node setptpatloop "SetPTPatLoop"

Statement: SetPTPatLoop
-----------------------
Syntax: SetPTPatLoop On|Off|Once

Modes: Amiga/Blitz

Description:

This command turns on the pattern looping features of the playroutine.  The
On option will cause the current (or next if music has not started) pattern
to repeat until the music is stopped.

The Off option is the default, which causes music to play as normal.

The Once option causes the current (or next if music has not started) pattern
to play once and then the music will stop automatically.

@endnode
@node setptzerospeed "SetPTZeroSpeed"

Statement: SetPTZeroSpeed (previously SetPTZeroTempo)
-------------------------
Syntax: SetPTZeroSpeed On|Off

Modes: Amiga/Blitz

Description:

This command tells the playroutine to either stop when a tempo set 0 command
is encountered, or to keep playing.  The On option allows you to set tempo 0
without the music stopping.  The default is to stop the ptmodule.

@endnode
@node setptvolume "SetPTVolume"

Statement: SetPTVolume
----------------------
Syntax: SetPTVolume Volume

Modes: Amiga/Blitz

Description:

Sets the master volume of any playing or to-be-played ptmodule.  The volume
value must be between 0 and 64.  The setting is copied to ALL voices.

@endnode
@node setptvoicevolume "SetPTVoiceVolume"

Statement: SetPTVoiceVolume
---------------------------
Syntax: SetPTVoiceVolume Voice,Volume

Modes: Amiga/Blitz

Description:

Sets the master volume of the specified voice.

@endnode
@node getptvoicevolume "GetPTVoiceVolume"

Function: GetPTVoiceVolume
--------------------------
Syntax: vol.b=GetPTVoiceVolume(Voice)

Modes: Amiga/Blitz

Description:

Returns the master volume of the voice specified.

@endnode
@node setptspeed "SetPTSpeed"

Statement: SetPTSpeed
---------------------
Syntax: SetPTSpeed Speed

Modes: Amiga/Blitz

Description:

This command sets the speed of the currently playing ptmodule.  The value
must be between 0 and 32 - The default is 6.

@endnode
@node getptspeed "GetPTSpeed"

Function: GetPTSpeed
--------------------
Syntax: speed.b=GetPTSpeed

Modes: Amiga/Blitz

Description:

This function returns the current speed setting.

@endnode
@node setpttempo "SetPTTempo"

Statement: SetPTTempo
---------------------
Syntax: SetPTTempo CiaTempo

Modes: Amiga

Description:

This command sets the CIA tempo of the currently playing module.  This will
only work when the CIA playroutines are being used.  Valid values are from
33 to 255.  The default value is 125.

@endnode
@node getpttempo "GetPTTempo"

Function: GetPTTempo
--------------------
Syntax: tempo.w=GetPTTempo

Modes: Amiga

Description:

This function returns the current tempo setting.

@endnode
@node setptmask "SetPTMask"

Statement: SetPTMask
--------------------
Syntax: SetPTMask Voices

This command toggles on/off the music playing on the specified voices.  This
allows you to mask out channels for the playing of samples only etc.

The bitmap specifies which voices are on and off - Just set/unset the bit(s)
relating to the channels.

eg. %0001 - Channel 0 ON ONLY!
    %1011 - Channel 2 OFF ONLY!
    %1000 - Channel 3 ON ONLY!

@endnode
@node getptmask "GetPTMask"

Function: GetPTMask
-------------------
Syntax: mask.b=GetPTMask

Modes: Amiga/Blitz

Description:

This function returns the current protracker mask.

@endnode
@node setptvoiceoff "SetPTVoiceOff"

Statement: SetPTVoiceOff
------------------------
Syntax: SetPTVoiceOff Voice

Modes: Amiga/Blitz

Description:

Turns the specified voice off - No protracker music will be played on the
specified voice.

@endnode
@node setptvoiceon "SetPTVoiceOn"

Statement: SetPTVoiceOn
-----------------------
Syntax: SetPTVoiceOn Voice

Modes: Amiga/Blitz

Description:

Turns the specified voice on - Allows protracker music to be played on the
specified voice.

@endnode
@node setptvoicetoggle "SetPTVoiceToggle"

Statement: SetPTVoiceToggle
---------------------------
Syntax: SetPTVoiceToggle Voice

Modes: Amiga/Blitz

Description:

Toggles the specified voice from off to on or on to off...

@endnode
@node getptvoicestat "GetPTVoiceStat"

Function: GetPTVoiceStat
------------------------
Syntax: stat.b=GetPTVoiceStat(Voice)

Modes: Amiga/Blitz

Description:

This function returns true (-1) if the voice specified is turned on, or false
(0) if it is turned off.

@endnode
@node getptvoiceperiod "GetPTVoicePeriod"

Function: GetPTVoicePeriod
--------------------------
Syntax: period.w=GetPTVoicePeriod(Voice)

Modes: Amiga/Blitz

Description:

This function returns the sample-period value of the last, or current note
played on the specified channel.

@endnode
@node getptvoicenote "GetPTVoiceNote"

Function: GetPTVoiceNote
------------------------
Syntax: note.b=GetPTVoiceNote(Voice)

Modes: Amiga/Blitz

Description:

This function returns the note number of the last, or current note played on
the specified channel.

@endnode
@node getptvoiceinstrument "GetPTVoiceInstrument"

Function: GetPTVoiceInstrument
------------------------------
Syntax: instrument.b=GetPTVoiceInstrument(Voice)

Modes: Amiga/Blitz

Description:

This function returns the instrument number of the last, or current note
played on the specified channel.

@endnode
@node getptvulevel "GetPTVuLevel"

Function: GetPTVuLevel
----------------------
Syntax: vu.b=GetPTVuLevel(Voice)

Modes: Amiga/Blitz

Description:

This functions returns the 'original' volume level of the last note
played on the specified channel. (trig)

@endnode
@node getptrealvulevel "GetPTRealVuLevel"

Function: GetPTRealVuLevel
--------------------------
Syntax: vu.b=GetPTRealVuLevel(Voice)

Modes: Amiga/Blitz

Description:

This functions returns the volume level of the last/current note on the
specified channel.

@endnode
@node getptsongpos "GetPTSongPos"

Function: GetPTSongPos
----------------------
Syntax: pos.b=GetPTSongPos

Modes: Amiga/Blitz

Description:

This function returns the current position of the ptmodule currently playing.

@endnode
@node getptpatternpos "GetPTPatternPos"

Function: GetPTPatternPos
-------------------------
Syntax: pos.b=GetPTPatternPos

Modes: Amiga/Blitz

Description:

This function returns the current position of the currently playing pattern.
(ie. the line number on tracker programs)

@endnode
@node getptstat "GetPTStat"

Function: GetPTStat
-------------------
Syntax: stat.b=GetPTStat

Modes: Amiga/Blitz

Description:

This function returns the object number of any ptmodule currently playing OR
-1 if no ptmodule is playing.

@endnode
@node getptmodulelen "GetPTModuleLen"

Function: GetPTModuleLen
------------------------
Syntax: len.l=GetPTModuleLen(PTModule#)

Modes: Amiga/Blitz

Description:

This function returns the length (in positions) of the ptmodule specified.

@endnode
@node getptpospattern "GetPTPosPattern"

Function: GetPTPosPattern
-------------------------
Syntax: pat.b=GetPTPosPattern(PTModule#,Position)

Modes: Amiga/Blitz

Description:

This function returns the pattern number that is played at the specified
position in the specified ptmodule.

@endnode
@node getptmodulename "GetPTModuleName$"

Function: GetPTModuleName$
--------------------------
Syntax: name$=GetPTModuleName$(PTModule#)

Modes: Amiga/Blitz

Description:

This function returns the name of the specified ptmodule.

@endnode
@node getptinstrumentname "GetPTInstrumentName$"

Function: GetPTInstrumentName$
------------------------------
Syntax: name$=GetPTInstrumentName$(PTModule#,InstrumentNumber)

Modes: Amiga/Blitz

Description:

This function returns the name of the specified instrument.

@endnode
@node getptinstrumentaddr "GetPTInstrumentAddr"

Function: GetPTInstrumentAddr
-----------------------------
Syntax: addr.l=GetPTInstrumentAddr(PTModule#,InstrumentNumber)

Modes: Amiga/Blitz

Description:

This function returns the start address of the specified instrument.

@endnode
@node getptinstrumentlen "GetPTInstrumentLen"

Function: GetPTInstrumentLen
----------------------------
Syntax: len.l=GetPTInstrumentLen(PTModule#,InstrumentNumber)

Modes: Amiga/Blitz

Description:

This function returns the length of the specified instrument.

@endnode
@node getptinstrumentrepeatstart "GetPTInstrumentRepeatStart"

Function: GetPTInstrumentRepeatStart
------------------------------------
Syntax: rep.l=GetPTInstrumentRepeatStart(PTModule#,InstrumentNumber)

Modes: Amiga/Blitz

Description:

This function returns the offset from the start of the sample, where the
looping of the sample starts.

@endnode
@node getptinstrumentreplen "GetPTInstrumentRepLen"

Function: GetPTInstrumentRepLen
-------------------------------
Syntax: replen.l=GetPTInstrumentRepLen(PTModule#,InstrumentNumber)

Modes: Amiga/Blitz

Description:

This function returns the offset from the start of the sample, where the
looping of the sample ends.

@endnode
@node getptinstrumentvol "GetPTInstrumentVol"

Function: GetPTInstrumentVol
----------------------------
Syntax: vol.b=GetPTInstrumentVol(PTModule#,InstrumentNumber)

Modes: Amiga/Blitz

Description:

This function returns the volume setting for the specified instrument.

@endnode
@node setptcia "SetPTCia"

Statement: SetPTCia
-------------------
Syntax: SetPTCia

Modes: Amiga/Blitz

Description:

This command tells the playroutine to use CIA interrupts (and thus CIA tempos)
when playing ptmodules.  It will not switch interrupts whilst playing - if you
do so, any currently playing ptmodules will stop.

@endnode
@node setptvbl "SetPTVbl"

Statement: SetPTVbl
-------------------
Syntax: SetPTVbl

Modes: Amiga/Blitz

Description:

This command tells the playroutine to use VBL interrupts (and thus VBL tempos)
when playing ptmodules.

@endnode
@node setptnoint "SetPTNoInt"

Statement: SetPTNoInt
---------------------
Syntax: SetPTNoInt

Modes: Amiga/Blitz

Description:

This command tells the library not to start an interrupt when playing a song.
It is left to the use to use the PTInt statement each VBL to play the music.

Note!  This method only allows VBL tempos, but it DOES allow you to play music
       in Blitz mode on older versions of Blitz!

@endnode
@node setptciaint "SetPTCiaInt"

Statement: SetPTCiaInt
----------------------
Syntax: SetPTCiaInt Type

Modes: Amiga/Blitz

Description:

This command tells the playroutine to utilize the specified interrupt type
(like what is specified in the SetInt command) to use when using CIA's.

@endnode
@node setptciapri "SetPTCiaPri"

Statement: SetPTCiaPri
----------------------
Syntax: SetCiaPri Priority

Modes: Amiga/Blitz

Description:

This command sets the internal priority of the CIA interrupt.

BE CAREFULL!!  You can un-intentionally cripple your disk interrupts by using
a value too high!!

@endnode
@node ptint "PTInt"

Statement: PTInt
----------------
Syntax: PTInt

Modes: Amiga/Blitz

Description:

Called once every VBL (when in NoInt mode), this statement will play the
previously started ptmodule.

@endnode
@node sample "Sample"

Statement: Sample
-----------------
Syntax: Sample StartAddress,Length,Frequency

Modes: Amiga/Blitz

Description:

This command takes a sample using any connected sampler cartridge..
The sampling speed is measured in hertz and must be higher than 500!!

Sampling will stop when the length is reached or any mouse button is pressed.

Whilst sampling, ALL interrupts and the Screen DMA are de-activated.

NB: Samplers connected to the BUS port will NOT work. (ala DATEL)

@endnode
@node samplesound "SampleSound"

Statement: SampleSound
----------------------
Syntax: SampleSound Sound#,Frequency

Modes: Amiga/Blitz

Description:

This command takes a sample but samples into the specified sound object.

Sampling will stop when the length of the sound is reached or any mouse
button is pressed.

NOTE!: Frequency must be higher than 500!

@endnode
@node monitor "Monitor"

Statement: Monitor
------------------
Syntax: Monitor Frequency

Modes: Amiga/Blitz

Description:

This command monitors the input of the sampler and outputs it through the
Amiga's sound channels.  Any mouse button stops monitoring.

Whilst monitoring, ALL interrupts are disabled.

NOTE!: Frequency must be higher than 500!

@endnode
@node period "Period"

Function: Period
----------------
Syntax: Period(Hertz)

Modes: Amiga/Blitz

Description:

This function converts a value in hertz to an Amiga sample period.

@endnode
@node hertz "Hertz"

Function: Hertz
---------------
Syntax: Hertz(Period)

Modes: Amiga/Blitz

Description:

This function converts an Amiga sample period to a value in hertz.

@endnode
@node copyr "Copyright Information & Disclaimer"

This program is NOT Public Domain, FreeWare,  etc..  The author retains FULL
copyright of the program, examples and documentation.

This program is NOT to be sold by ANY PD library without written agreement
with myself..  It may NOT be uploaded to ANY ftp site or BBS either.
Updates will be released by the author onto stated ftp sites as he see's fit.

Placement of this program on ANY CD-Rom will ALSO be seen as a breach of
these conditions.

Also, ANY use of this program in a shareware/commercial software release
must be agreed-to by myself IN WRITING before any such release. (usually
all I'll want is a free copy of the game/program ;)  )

For more information in this regard, or for making suggestions/reporting bugs,
please contact me!

NOTE: Acid Software has permission to place this version of the library
on BUM9.

@endnode
@node prevs "Program History"

v1.76 (24-APR-1996)

oops.  Had in token list GetPTRealLevel instead of GetPTRealVuLevel. fixed.

v1.75 (20-APR-1996)

Added SetPTCurrentPos command.  Also fixed GetPTStat.

v1.7 (19-APR-1996)

Totally replaced and rewrote playroutine - now uses busywait fixed routines
by Peter Kunath.  Code generally cleaned up at the same time.. Bugs most
likely introduced :)

v1.6 (??-MAR-1996)

Many attempts to fix a damned playroutine bug. Still dropping notes like
mad.

v1.55 (11-NOV-1995)

Fixed problem with CIA allocation - previously munged the serial port.

v1.54 (24-SEP-1994)

Code cleaned up even more.  Portamento problem fixed (bug in playroutines
but not in PT program itself).

v1.53 (16-SEP-1994)

Return values added for LOAD and SAVE.  First public release.

v1.52 (15-SEP-1994)

GetPTVoiceNote and GetPTRealLevel added.

v1.51 (8-SEP-1994)

SavePTModule fixed.

v1.5 (27-JUL-1994)

Tempo/Speed commands/functions fixed and extended.  Master volume setting
for seperate voices implemented.

v1.4 (20-JUL-1994)

First release version (beta).. Only 1 lib (60).
Now uses its own Blitz object. (PTModule)

v1.3 (16-JUN-1994)

Many bugfixes.

v1.2b(6-JUN-1994)

Third library added.  Base TFMX playroutines included - doesn't do alot at
this stage.

v1.2 (5-JUN-1994)

Sampling commands added in a second library.
                 
v1.1 (1-JUN-1994)

CIA/VBL selection added.  Instrument info functions added.

v1.0 (30-MAY-1994)

First version - only released to 1 person. Full of BUGS.

Written from scratch in 3 days.

v0.0 (27-MAY-1994)

Blitz2 arrived in the post today.

@endnode
@node player "EML Player v2.25"

EML Player is a small, gadtools based Protracker player written using
the commands in EML Library.

It also makes use of WB and Commodities libraries by Red When Excited
(formerly LES and formerly RI).

Some features are:

	o Compact Gadtools GUI

	o Program is a commodity

	o Appwindow - Drag and drop mods to play


WARNING!

A few small bugs that you should be aware of:

	o Do *not* hit the INFO button to add the info listview when the
	  program window is at the BOTTOM of a screen.  Same goes for when
	  you initially open the Spectro window.

	  Doing so will result in a full machine crash!


Everything is pretty self-explanatory.  The source to the player will
be released in the future as sn example for the EML lib.

@endnode
