@DATABASE XpkV1.10
@$VER: Xpk V1.10 (27.01.2007)-Updated by mrodfr-(21.11.1998) by Laboureur -> AlphaSOUND <- Frédéric
@NODE MAIN "Xpk V1.10"

    @{b}Xpk V1.00 General Information:@{ub}

  * Blitz Basic II library number         : #178
  * Library size when linked to executable: 916 bytes
  * Number of commands                    : 14
  * Resources automatically freed at end  : No

  NInitXpk() must be put before any other Xpk functions
  or you will enjoy BIG crashes.

    @{b}Commands summary:@{ub}

  @{" NGetNextPacker     " LINK NGetNextPacker} Function (String)
  @{" NGetPackerNumber   " LINK NGetPackerNumber} Function (Long)
  @{" NInitXpk           " LINK NInitXpk} Command (Boolean)
  @{" NPackerDescription " LINK NPackerDescription} Function (String)
  @{" NPackerInfo        " LINK NPackerInfo} Statement
  @{" NPackerLongName    " LINK NPackerLongName} Function (String)
  @{" NPackerName        " LINK NPackerName} Function (String)
  @{" NPackFile          " LINK NPackFile} Function (Long)
  @{" NPackMemToFile     " LINK NPackMemToFile} Function (Long)
  @{" NScanPackersList   " LINK NScanPackersList} Statement
  @{" NUnPackFile        " LINK NUnPackFile} Fonction (Long)
  @{" NUnPackFileToMem   " LINK NUnPackFileToMem} Fonction (Long)
  @{" NXpkBufferLength   " LINK NXpkBufferLength} Function (Long)
  @{" NXpkFileLength     " LINK NXpkFileLength} Function (Long)

@ENDNODE


@NODE NInitXpk

    @{b}SYNTAX@{ub}
  result.l = NInitXpk

    @{b}COMMAND@{ub}
  Init all the Xpk environments for  later  use.  You  must  put  this
  function at the top  of  your  source code if you want to use the NXpk
  commands. This command tries to open the xpkmaster.library V3.0+. If
  result is NULL, the library can't be opened so be sure to test the
  result and disable all your XPK calls if it fails (or quit the program).

@ENDNODE


@NODE NUnPackFile

    @{b}SYNTAX@{ub}
  res.l = NUnPackFile(&SourceFile$, &DestFile$, &Password)

    @{b}COMMAND@{ub}
  Simply unpack an XPK Packed file to another file. If the file
  is password protected, you must specify it.

  If res = 0, the unpack has failed.

@ENDNODE


@NODE NPackFile

    @{b}SYNTAX@{ub}
  res.l = NPackFile(&SourceFile$, &DestFile$, &PackerName, &Password)

    @{b}COMMAND@{ub}
  Pack the given file to another file using the specified packer and
  password.

  If res = 0, the pack has failed.

@ENDNODE


@NODE NUnPackFileToMem

    @{b}SYNTAX@{ub}
  *MemLocation = NUnPackFileToMem(&SourceFile$, MemType, &Password)

    @{b}COMMAND@{ub}
  Unpack the specified file to a memory zone which will be allocated
  automatically. This function returns the memory address where the file
  is unpacked. You must use the XpkBufferLen() function to discover how
  big the buffer is. you must free the buffer manually when finished,
  with the following command:

            FreeMem_ *MemLocation, XpkBufferLen

  MemType allows you to specify which memory should be used for the
  buffer (CHIP or FAST mem)

  If *MemLocation = 0, the unpack has failed.

@ENDNODE


@NODE NPackMemToFile

    @{b}SYNTAX@{ub}
  res.l = PackMemToFile(*MemAddr, MemLen, &DestFilename$, &Packer$, &Pass$)

    @{b}COMMAND@{ub}

  Pack the memory starting from *MemAddr, of MemLen to DestFileName$ with the
  Packer$ and Pass$.

  If res = 0, the pack has failed.

@ENDNODE


@NODE NXpkBufferLength

    @{b}SYNTAX@{ub}
  BufferLen.l = NXpkBufferLength

    @{b}FUNCTION@{ub}
  Return the buffer length of the last NUnFileToMem decompressed
  file. This is used to allow you to free the buffer after use as
  the xpk package and Blitz don't free it.

  Warning ! Buffer length is different (bigger) to unpacked file
  length because it creates a header for handling the file. Be
  sure to use this buffer length to free the memory - and not the
  NXpkFileLen() command.

@ENDNODE


@NODE NXpkFileLength

    @{b}SYNTAX@{ub}
  BufferLen.l = NXpkFileLength

    @{b}FUNCTION@{ub}
  Returns the file length of the last NUnPackFileToMem() function, to
  discover the exact unpacked size of the file.

  Warning ! Unpacked file length is different than buffer length
  allocated by Xpk when Unpacking to memory !

@ENDNODE


@NODE NPackerInfo

    @{b}SYNTAX@{ub}
  NPackerInfo(Name$, Efficiency)

    @{b}STATEMENT@{ub}
  Check the information on a specified packer. Use the following commands
  to get special information: NPackerName(), NPackerLongName(),
  NPackerDescription().

@ENDNODE


@NODE NPackerName

    @{b}SYNTAX@{ub}
  Text$ = NPackerName

    @{b}FUNCTION@{ub}
  Returns the packer name acquired with the NPackerInfo() function.

@ENDNODE


@NODE NPackerLongName

    @{b}SYNTAX@{ub}
  Text$ = NPackerLongName

    @{b}FUNCTION@{ub}
  Return the packer long name acquired with the NPackerInfo() function.

@ENDNODE


@NODE NPackerDescription

    @{b}SYNTAX@{ub}
  Text$ = NPackerDescription

    @{b}FUNCTION@{ub}
  Return the packer description acquired with the NPackerInfo() function.

@ENDNODE


@NODE NScanPackersList

    @{b}SYNTAX@{ub}
  NScanPackersList

    @{b}STATEMENT@{ub}
  Scan the full packers list. Use NGetPackerNumber() and NGetNextPacker()
  to access the data collected with this scan.

@ENDNODE


@NODE NGetPackerNumber

    @{b}SYNTAX@{ub}
  Number.l = NGetPackerNumber

    @{b}FUNCTION@{ub}
  Returns the number of packers available on the system. You must have
  this value before calling the NScanPackersList() fonction.

@ENDNODE


@NODE NGetNextPacker

    @{b}SYNTAX@{ub}
  Text$ = NGetNextPacker

    @{b}FUNCTION@{ub}
  Return the next packer name found with a NScanPackersList() call.

@ENDNODE
