@DATABASE DrawingV1.16
@$VER: NCS Drawing Library V1.16 (27.01.2007)- Updated by mrodfr. (31.01.1999) by Laboureur -> AlphaSOUND <- Frédéric
@NODE MAIN "New Drawing Library"

    @{b}Drawing V1.15 General Information:@{ub}

  * Blitz Basic II library number         : #188
  * Library size when linked to executable: 320 bytes
  * Number of commands                    : 17
  * Resources automatically freed at end  : Yes

  NDrawingOutput() must be put before any other drawing functions. Don't
  forget to turn the @{"debugger" LINK "/Tools/RedDebugger.guide/Main"} ON when developing.

    @{b}Commands summary:@{ub}

  @{" NBackColour      " LINK NBackColour} Statement
  @{" NBoxFill         " LINK NBoxFill} Statement
  @{" NCircle          " LINK NCircle} Statement
  @{" NCls             " LINK NCls} Statement
  @{" NCopyBitmap      " LINK NCopyBitmap} Statement
  @{" NCursX           " LINK NCursX} Function (Word)
  @{" NCursY           " LINK NCursY} Function (Word)
  @{" NDPrint          " LINK NDPrint} Statement
  @{" NDrawingFont     " LINK NDrawingFont} Statement
  @{" NDrawingMode     " LINK NDrawingMode} Statement
  @{" NDrawingOutput   " LINK NDrawingOutput} Statement
  @{" NDrawingRastPort " LINK NDrawingRastPort} Statement
  @{" NEllipse         " LINK NEllipse} Statement
  @{" NFrontColour     " LINK NFrontColour} Statement
  @{" NLocate          " LINK NLocate} Statement
  @{" NLine            " LINK NLine} Statement
  @{" NObtainBestPen   " LINK NObtainBestPen} Function (Word)
  @{" NPlot            " LINK NPlot} Statement
  @{" NPoint           " LINK NPoint} Function (Word)
  @{" NReleasePen      " LINK NReleasePen} Statement
  @{" NTextLength      " LINK NTextLength} Function (Word)
  @{" NTextStyle       " LINK NTextStyle} Statement


@ENDNODE

@NODE NPlot

    @{b}SYNTAX@{ub}
  NPlot(x,y)

    @{b}STATEMENT@{ub}
  Draw a plot in the active color (set by NWColour) in the current window.

@ENDNODE


@NODE NBoxFill

    @{b}SYNTAX@{ub}
  NBoxFill(x1, y1, x2, y2)

    @{b}STATEMENT@{ub}
  Draw a filled box in the active color (set by NFrontColour) in the
  current output.

@ENDNODE


@NODE NBackColour

    @{b}SYNTAX@{ub}
  NBackColour(Colour)

    @{b}STATEMENT@{ub}
  Set the default background colour for graphic functions and text display.

@ENDNODE


@NODE NCursX

    @{b}SYNTAX@{ub}
  Result.w = NCursX

    @{b}FUNCTION@{ub}
  Returns the text cursor X position in the current output.

@ENDNODE


@NODE NCursY

    @{b}SYNTAX@{ub}
  Result.w = NCursY

    @{b}FUNCTION@{ub}
  Returns the text cursor Y position in the current output.

@ENDNODE


@NODE NFrontColour

    @{b}SYNTAX@{ub}
  NFrontColour(Colour)

    @{b}STATEMENT@{ub}
  Sets the default foreground colour for graphic functions and text display.

@ENDNODE


@NODE NLocate

    @{b}SYNTAX@{ub}
  NLocate(x,y)

    @{b}FUNCTION@{ub}
  Sets the text cursor to given position (for NDPrint).

@ENDNODE


@NODE NDPrint

    @{b}SYNTAX@{ub}
  NDPrint(String$)

    @{b}STATEMENT@{ub}
  Display the given string  on  the  used  output  at  position  set  by
  NLocate and with the colours set by NFrontColour. You can use NTextStyle
  to change the output style (bold, italic, underline) and NDrawingMode
  to change the way the text is rendered.

@ENDNODE


@NODE NTextStyle

    @{b}SYNTAX@{ub}
  NTextStyle(Style)

    @{b}STATEMENT@{ub}
  Set the style for future text output.

  The legal Style values are:

    0 = Nothing
    1 = Underline
    2 = Bold
    4 = Italic

  You can mix these values if needed (Bold+Italic will be 2+4 = 6)

@ENDNODE


@NODE NDrawingFont

    @{b}SYNTAX@{ub}
  NDrawingFont(FontID)

    @{b}STATEMENT@{ub}
  Sets the current font to given FontID. All new text rendered will
  be done with the new specified font.

  FontID MUST be a legal IntuiFont Pointer. You can use the NFont library
  to load any font and pass the NFontID pointer to this function.

@ENDNODE


@NODE NCircle

    @{b}SYNTAX@{ub}
  NCircle(x, y, Radius)

    @{b}STATEMENT@{ub}
  Draw an outlined circle at the position x,y with the size of Radius.

@ENDNODE


@NODE NCls

    @{b}SYNTAX@{ub}
  NCls(Colour)

    @{b}STATEMENT@{ub}
  Set the entire output to the given colour.

@ENDNODE


@NODE NCopyBitmap

    @{b}SYNTAX@{ub}
  NCopyBitMap(BitMapID, SourceX, SourceY, DestX, DestY, Width, Height)

    @{b}STATEMENT@{ub}
  Copy the specified area situated in the given BitMapID, and determined
  by SourceX, SourceY (x,y position in the bitmap to start the copy) and
  Witdh, Height which give the size of the copied data. DestX and DestY
  allow you to copy the data at this position in the current output.

  This function is 100% OS Friendly and clipped.

@ENDNODE


@NODE NDrawingOutput

    @{b}SYNTAX@{ub}
  NDrawingOutput(RastPort)

    @{b}STATEMENT@{ub}
  Set the drawing output to the specified rastport. After setting this, all
  the Drawing commands are rendered on this rasport. You must specify a
  valid rastport pointer.

    You can use the following functions to easily get rastports from objects:

      + NWindowRastPort
      + NScreenRastPort
      + NBitmapRastPort

    Example:

    NDrawingRastPort NWindowRastPort  ; All drawing will be done on the window.


@ENDNODE


@NODE NDrawingMode

    @{b}SYNTAX@{ub}
  NDrawingMode(Mode)

    @{b}STATEMENT@{ub}
  Change the drawing mode for graphics output:

    Here is a quick list of valid modes:

      #JAM1       = 0 : For text output, leave the background transparent.
      #JAM2       = 1 : For text output, print text with background colour
      #COMPLEMENT = 2 : XORred graphics
      #INVERSVID  = 4 : Use in conjunction with JAM2, it inverts background
                        and foreground colours when printing text.

  Note: These constants are found in the AmigaLibs.res file.

@ENDNODE


@NODE NEllipse

    @{b}SYNTAX@{ub}
  NEllipse(x, y, RadiusX, RadiusY)

    @{b}STATEMENT@{ub}
  Draw an outlined ellipse at the position x,y with size of RadiusX
  and RadiusY.

@ENDNODE


@NODE NLine

    @{b}SYNTAX@{ub}
  NLine(x1, y1, x2, y2)

    @{b}STATEMENT@{ub}
  Draw a line in the active color (set by NFrontColour) on the current
  output.

@ENDNODE


@NODE NPoint

    @{b}SYNTAX@{ub}
  Colour.w = NPoint(x, y)

    @{b}STATEMENT@{ub}
  Return the colour number at the coordinates (x,y) in the current
  output.

@ENDNODE


@NODE NTextLength

    @{b}SYNTAX@{ub}
  Length.w = NTextLength(x, y)

    @{b}STATEMENT@{ub}
  Return the pixel length of the given string in the current output.
  The main advantage of this function is so you can get the real length
  of any strings used with any fonts (even non-proportional ones).

@ENDNODE


@NODE NObtainBestPen

    @{b}SYNTAX@{ub}
  Result.w = NObtainBestPen(r, g, b, precision)

    @{b}STATEMENT@{ub}
  Return the colour number with the best match to the given parameter.
  On a public screen with free colours, it will allocate a new colour
  with the (r,g,b) value. The precision parameter tells the command
  how it should be detected:

    Valid values of 'precision' (follow by system constante):
      Exact = -1 (#PRECISION_EXACT)
      Image =  0 (#PRECISION_IMAGE)
      Icon  = 16 (#PRECISION_ICON)
      Gui   = 32 (#PRECISION_GUI)

  Note: You MUST use the NReleasePen(Result) for any colours you have allocated
  before quitting your program, else the colours will never be released
  to the free colour bank of the screen (very bad).

@ENDNODE


@NODE NReleasePen

    @{b}SYNTAX@{ub}
  NReleasePen #Pen

    @{b}STATEMENT@{ub}
  Tell the system than this pen isn't used (locked) by our program, so
  that other programs can use it. You must call this function if you have
  allocated any pens with NObtainBestPen().

@ENDNODE

@NODE NDrawingRastPort

    @{b}SYNTAX@{ub}
  *RastPort = NDrawingRastPort

    @{b}STATEMENT@{ub}
  Return the value of the currently used RastPort for output (for
  advanced programmers).

@ENDNODE


