Normal libraries
================

libheader -> Starts at byte 32 from start of file
32	MOVEQ #0,d0 -> $7000
34	RTS -> $4e75
36	DC.w librarynumber -> 2 bytes
38	dcb.l 4,0 -> 4 longwords of 0 (not all zero if it is a blitz systemlib, but still 4 longwords)
54	dc.l init -> offset from somewhere of init routine (called on program start)
58	dc.w return something in d0? -> 0==no 1==yes
60	dc.l finit -> offset from somewhere of finit routine (called on program exit)
64	dcb.l 3,0 -> 3 longwords of 0
76	dc.l error -> offset of runtime error checking routines

80	Library routine specifications go here

New offsets, starting from 80 or whenever the next command definition
appears

Function and command return types and parameter types:
#byte=1, #word=2, #long=3, #quick=4, #float=5, #string=7


+0	Command type

	Type:				Words
	Statement			1,0,0
	Unknown statement	8+1,0,0
	Function			(type LSL 8)+2,0,0
	Unknown function	8+2,0,0 -> (type pushed on stack)
	Command				(type LSL 8)+3,0,0

	
+6	Arguments

	dc.w number of arguments
	dc.b for each argument
	Even -> need to find out how even works


+x	Libraries (x = 6 + number of arguments from above)

	For each library requested, there is
	dc.w library number
	dc.w register to put library base in
	List is always terminated with a
	dc.w 0


+x	Subs (pointer to code, x = word after the dc.w 0 in the previous list)

	dc.l pointer to error routine for this command
	dc.l pointer to routine for command
	dc.l last parameter of macro (looks like it should always be 0)
	Even

Possible repeats of args/libs/subs, so check if next word is -1 to finish
the args/libs/subs part and go on to the name.

+x	Name of command

	dc.w -1
	dc.l 0
	dc.w 0
	dc.b name string,0	(the optional third parameter can be used as a label
						to the name string line in the ASM code [or something])
	dc.b help string,0
	Even

--end of command

Possible variations, starting from where a command should usually start
(i.e. at offset +0):

Dumtokes:

+0	dc.w 8,0,0
	dc.l 0
	dc.w 0
	dc.b name string,0 (optional label points here)
	dc.b help string,0
	Even

--end of command

Nullsubs:

+0	dc.w 0,0,0
	For each library requested, there is
	dc.w library number
	dc.w register to put library base in
	List is always terminated with a
	dc.w 0
	dc.l pointer to error handler 1 code
	dc.l pointer to routine code
	dc.l pointer to error handler 2 code

--end of command

So all checking for what might be in file can be done on the word at offset
+0. They should all be distinct.

i.e.

case 0 ; dumtoke
case 6 ; shared library
case 8 ; nullsub
case -1; libfin
default ; command

+0	End of list of commands

	dc.w -1
	Then either
	dc.l 0		for a libfin with no parameters or
	dc.l toke	pointer to dunno
	dc.l load	pointer to routine to load an object, or maybe what to do when loading library???
	dc.l save	pointer to routine to save object
	dc.l use	pointer to routine to use an object
	dc.l free	pointer to routine to free an object
	dc.w 0
	dc.w defmax
	dc.w shift


FDConverted system librarys
===========================

First 32 bytes of a file are the same as normal libraries

You then get this 48 byte header (normal libs also have a 48 byte header)

+0	dc.l 0				
	dc.w library number
	dcb.b 20,0			(last 2 bytes are not always 0, don't know what they are for. but it is always 20 bytes.)
	dc.w 1
	dcb.b 20,0			(3rd/4th bytes are not always 0, don't know what they are for. but it is always 20 bytes.)

OK, this is actually the syslibheader, except that the MOVEQ #0,d0:RTS, firsttoke,
lasttoke+1, error and flags are always 0 and the return is always 1.

--end of command


+0	Command type

	dc.w 6,0,0

+6	dc.w library number

+8	dc.w offset for JSR into actual library

+10	Parameter registers used

	one byte per parameter, 0-7 for reg no, +16 if address register
	List is always terminated with
	dc.b -1
	Even

+x	dc.l 0		(x is found out from -1 and possible even)
	dc.w 0
	dc.b name string,0
	dc.b parameter string,0
	Even

--end of command
