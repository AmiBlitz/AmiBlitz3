@DATABASE "REDMapEditor AmigaGuide Documentation"
@REMARK $VER: REDMapEditor AmigaGuide Documentation v2.5
@INDEX INDEX
@NODE MAIN "REDMapEditor v2.5"
                             @{b}@{u}REDMapEditor v2.5@{ub}@{uu}

                         (C)1996 Red When Excited


   @{" Introduction           " link RED_intro}    -- What is the REDMapEditor?
   @{" Credits                " link RED_credits}    -- Credits
   @{" The Map Editor Screen  " link IDX_mapscreen}    -- The REDMapEditor Screen
   @{" Context Sensitive Help " link RED_onlinehelp}    -- The Online Help System
   @{" Multiple Map Options   " link IDX_multimap}    -- Multiple Map Options
   @{" Map Loading/Saving     " link IDX_mapio}    -- Map Loading/Saving
   @{" Other Load Options     " link IDX_load}    -- Other Load Options
   @{" Configuration          " link IDX_config}    -- Configuration
   @{" ARexx                  " link IDX_arexx}    -- ARexx
   @{" Map Editor Functions   " link IDX_functions}    -- REDMapEditor Functions
   @{" Selectors              " link IDX_selectors}    -- Selectors
   @{" Map Examples           " link IDX_mapexamples}    -- Map Examples
   @{" ARexx Examples         " link IDX_arexxexamples}    -- ARexx Examples

   @{" Main Index             " link INDEX}    -- The Main Index Page

   @{" Red When Excited       " link RWE}    -- Red When Excited Ltd

              This program requires the reqtools.library v38+
@ENDNODE MAIN

@NODE IDX_mapscreen "The REDMapEditor Screen"
                         @{b}@{u}The REDMapEditor Screen@{ub}@{uu}

                 Please select the topic you wish to read:


   @{" Screen Layout          " link RED_screenlayout}    -- Map Editor screen layout information
   @{" Map Editor Menus       " link RED_menustrip}    -- The Map Editor Menu Strip
   @{" View Area              " link RED_viewarea}    -- The View Area
   @{" Control Area           " link RED_controlarea}     -- The Control Area
   @{" Information Area       " link RED_informationarea}    -- Information Area
   @{" Drawing Control Area   " link RED_drawingcontrol}    -- The Drawing Control Area
   @{" Shape Scroller         " link RED_shapescroller}    -- The Shape Scroller
@ENDNODE IDX_mapscreen

@NODE IDX_multimap "Multiple Map Options"
                           @{b}@{u}Multiple Map Options@{ub}@{uu}

                 Please select the topic you wish to read:


   @{" Multiple Maps          " link RED_multimap}    -- Multiple Maps
   @{" Rub Through            " link RED_rubthrough}    -- Rub Through
@ENDNODE IDX_multimap

@NODE IDX_mapio "Map Loading/Saving"
                            @{b}@{u}Map Loading/Saving@{ub}@{uu}

                 Please select the topic you wish to read:


   @{" New Map                " link RED_newmap}    -- New Map
   @{" Loading Maps           " link RED_loadingmaps}    -- Loading Maps
   @{" Saving Maps            " link RED_savingmaps}    -- Saving Maps
   @{" Save Raw Map           " link RED_saverawmap}    -- Saving Raw Maps
   @{" Saving Custom Maps     " link RED_savingcustommaps}    -- Saving Custom Maps
   @{" Custom Map File Format " link RED_custommapfileformat}    -- Custom Map File Format
@ENDNODE IDX_mapio

@NODE IDX_load "Other Load Options"
                            @{b}@{u}Other Load Options@{ub}@{uu}

                 Please select the topic you wish to read:


   @{" Loading Shapes         " link RED_loadingshapes}    -- Loading Shapes
   @{" Saving Shapes          " link RED_savingshapes}    -- Saving Shapes
   @{" Loading A Palette      " link RED_loadingpalettes}    -- Loading A Palette
@ENDNODE IDX_load

@NODE IDX_config "Configuration"
                               @{b}@{u}Configuration@{ub}@{uu}

                 Please select the topic you wish to read:


   @{" Configuration          " link RED_configuration}    -- Configuration
   @{" Tooltype Support       " link RED_tooltypesupport}    -- Tooltype Support
   @{" Startup Folder         " link RED_startupfolder}    -- Startup Program Folder
@ENDNODE IDX_config

@NODE IDX_arexx "ARexx"
                                   @{b}@{u}ARexx@{ub}@{uu}

                 Please select the topic you wish to read:


   @{" ARexx Support          " link RED_arexx}    -- ARexx Support
   @{" ARexx Command Set      " link RED_arexxcommands}    -- ARexx Command Set
@ENDNODE IDX_arexx

@NODE IDX_functions "Map Editor Functions"
                           @{b}@{u}Map Editor Functions@{ub}@{uu}

                 Please select the topic you wish to read:


   @{" Reflect Table          " link RED_reflecttable}    -- The Reflect Table function
   @{" Shape Names            " link RED_shapenames}    -- Shape Names
   @{" Map Shape Adjust       " link RED_mapshapeadjust}    -- Map Shape Adjust
   @{" Surface Data           " link RED_surfacedata}    -- Surface Data
   @{" Generate Source        " link RED_generatesource}    -- Generate Source
   @{" Stencil                " link RED_stencil}    -- Stencil
@ENDNODE IDX_functions

@NODE IDX_selectors "Selectors"
                                 @{b}@{u}Selectors@{ub}@{uu}

                 Please select the topic you wish to read:


   @{" Group Selector         " link RED_groupselector}    -- Group Selector
   @{" Range Selector         " link RED_rangeselector}    -- Range Selector
   @{" Shape Selector         " link RED_shapeselector}    -- Shape Selector
   @{" Buffer Selector        " link RED_bufferselector}    -- Buffer Selector
@ENDNODE IDX_selectors

@NODE IDX_mapexamples "Map Examples"
                               @{b}@{u}Map Examples@{ub}@{uu}

                 Please select the topic you wish to read:


   @{" Example Map            " link examplemap}    -- Example Map
   @{" Blitz Map              " link blitzmap}    -- Example Blitz Map
   @{" Custom Map             " link custommap}    -- Example Custom Map
@ENDNODE IDX_mapexamples

@NODE IDX_arexxexamples "ARexx Examples"
                              @{b}@{u}ARexx Examples@{ub}@{uu}

                 Please select the topic you wish to read:


   @{" Requirements           " link arexx_requirements}    -- ARexx Demo Requirements
   @{" Demo 1 - Simple Stuff  " link arexx_demo1}    -- Demo 1 - Simple Stuff
   @{" Demo 2 - Window Demo   " link arexx_demo2}    -- Demo 2 - Window Demo
   @{" Demo 3 - Map Loader    " link arexx_demo3}    -- Demo 3 - Map Loader
   @{" Demo 4 - Copy Map      " link arexx_demo4}    -- Demo 4 - Copy Map
@ENDNODE IDX_arexxexamples

@NODE INDEX "The Index Page"
                            @{b}@{u}REDMapEditor v2.5@{ub}@{uu}

                 Please select the topic you wish to read:


   @{" Introduction           " link RED_intro}    -- What is the REDMapEditor?
   @{" Credits                " link RED_credits}    -- Credits

The REDMapEditor Screen:
   @{" Screen Layout          " link RED_screenlayout}    -- Map Editor screen layout information
   @{" Map Editor Menus       " link RED_menustrip}    -- The Map Editor Menu Strip
   @{" View Area              " link RED_viewarea}    -- The View Area
   @{" Control Area           " link RED_controlarea}     -- The Control Area
   @{" Information Area       " link RED_informationarea}    -- Information Area
   @{" Drawing Control Area   " link RED_drawingcontrol}    -- The Drawing Control Area
   @{" Shape Scroller         " link RED_shapescroller}    -- The Shape Scroller

Online Help:
   @{" Context Sensitive Help " link RED_onlinehelp}    -- The Online Help System

Multiple Map Options:
   @{" Multiple Maps          " link RED_multimap}    -- Multiple Maps
   @{" Rub Through            " link RED_rubthrough}    -- Rub Through

Map Loading/Saving:
   @{" New Map                " link RED_newmap}    -- New Map
   @{" Loading Maps           " link RED_loadingmaps}    -- Loading Maps
   @{" Saving Maps            " link RED_savingmaps}    -- Saving Maps
   @{" Save Raw Map           " link RED_saverawmap}    -- Saving Raw Maps
   @{" Saving Custom Maps     " link RED_savingcustommaps}    -- Saving Custom Maps
   @{" Custom Map File Format " link RED_custommapfileformat}    -- Custom Map File Format

Other Load Options:
   @{" Loading Shapes         " link RED_loadingshapes}    -- Loading Shapes
   @{" Saving Shapes          " link RED_savingshapes}    -- Saving Shapes
   @{" Loading A Palette      " link RED_loadingpalettes}    -- Loading A Palette

Configuration:
   @{" Configuration          " link RED_configuration}    -- Configuration
   @{" Tooltype Support       " link RED_tooltypesupport}    -- Tooltype Support
   @{" Startup Folder         " link RED_startupfolder}    -- Startup Program Folder

ARexx:
   @{" ARexx Support          " link RED_arexx}    -- ARexx Support
   @{" ARexx Command Set      " link RED_arexxcommands}    -- ARexx Command Set

REDMapEditor Functions:
   @{" Reflect Table          " link RED_reflecttable}    -- The Reflect Table function
   @{" Shape Names            " link RED_shapenames}    -- Shape Names
   @{" Map Shape Adjust       " link RED_mapshapeadjust}    -- Map Shape Adjust
   @{" Surface Data           " link RED_surfacedata}    -- Surface Data
   @{" Generate Source        " link RED_generatesource}    -- Generate Source
   @{" Stencil                " link RED_stencil}    -- Stencil

Selectors:
   @{" Group Selector         " link RED_groupselector}    -- Group Selector
   @{" Range Selector         " link RED_rangeselector}    -- Range Selector
   @{" Shape Selector         " link RED_shapeselector}    -- Shape Selector
   @{" Buffer Selector        " link RED_bufferselector}    -- Buffer Selector

Map Examples:
   @{" Example Map            " link examplemap}    -- Example Map
   @{" Blitz Map              " link blitzmap}    -- Example Blitz Map
   @{" Custom Map             " link custommap}    -- Example Custom Map

ARexx Examples:
   @{" Requirements           " link arexx_requirements}    -- ARexx Demo Requirements
   @{" Demo 1 - Simple Stuff  " link arexx_demo1}    -- Demo 1 - Simple Stuff
   @{" Demo 2 - Window Demo   " link arexx_demo2}    -- Demo 2 - Window Demo
   @{" Demo 3 - Map Loader    " link arexx_demo3}    -- Demo 3 - Map Loader
   @{" Demo 4 - Copy Map      " link arexx_demo4}    -- Demo 4 - Copy Map
@ENDNODE

@NODE RED_intro "What is the REDMapEditor?"
                          @{b}@{u}What is the REDMapEditor?@{ub}@{uu}


The REDMapEditor is a program written is written in Blitz Basic 2 and
680x0 assembler.  The editor is geared towards to Blitz Basic 2
developers, but this does not mean that it is restricted for use within
Blitz Basic.  It could be used for any type of map creation, for any
language.

Basically a Map Editor simplifies the task of creating maps for your games,
projects, designers, puzzles etc. etc. In fact it may be used for any such 
task in which a map is needed. Such an example for the type of maps that 
can be created would be an overhead view game such as pacman or 
dynablasters, even sideviewing games can be designed e.g.. the shareware game
StarWoids had its maps created using an earlier version of the REDMapEditor.

This REDMapEditor is different to others however through its user
friendliness and ease of use - you can even grab iff pictures of blocks
with it and use them as blocks for use with your map. This means that the
only program you need to create your map from scratch is the REDMapEditor.

The REDMapEditor uses Intuition fully, thus allowing anyone to use it
quickly and easily.  As long as you, the user, have a basic understanding
of ideas like menu strips, windows and buttons (gadgets) then you should
have no problems getting into, and using, this editor.  

This program is fully OS friendly and should run fine in graphics card
screen modes.  Its also features a very powerfull ARexx port which allows
you to control its functionality from external programs.  Note that you
need RexxMast running (which should be on your system disk inside the
system drawer) before you can use the ARexx port.


                      @{b}@{u}Some Jargon and references....@{ub}@{uu}

Some simple jargon used inside this doc file:

	Blocks/shapes - these are the graphics that you're using to build
			up your map.  They can be thought as of bricks that
			are built up into wall, where the wall would be
			your map.

	Groups	      - groups are 'collections' of blocks.  They are used
			to make repeated collections of blocks easier to
			use.

	Maps	      - this is the actual data you are editing.  Maps are
			built up from shapes and groups using the editor
			and saved out for inclusion in your game.

    Blitz2 Map Editor - this is the original map editor supplied with the
			Blitz Basic 2 package.  The REDMapEditor is
			partially based on this editor, and includes
			practically all of its features.  Any Blitz2 map
			editor users should find the transition to this
			editor very painless.
@ENDNODE RED_intro

@NODE RED_screenlayout "The Screen Layout"
                               @{b}@{u}The Screen Layout@{ub}@{uu}

The REDMapEditor screen is laid out into a series of vertical sections.
These are:

                        @{" Menu Strip                " link RED_menustrip}

                        @{" Drawing Control Area      " link RED_drawingcontrol}

                        @{" Shape Scroller [optional] " link RED_shapescroller}

                        @{" View Area                 " link RED_viewarea}
@ENDNODE

@NODE RED_menustrip "The Map Editor Menu Strip"
                           @{b}@{u}The Map Editor Menu Strip@{ub}@{uu}

Most of the features of the REDMapEditor are reached via the menu strip.
Map editor has 3 menus: the Project menu, the Prefs menu and the
operations menu.  Following is a complete list of menu options available,
with keyboard short-cuts and explanatory text.  All  on menus are
shown with the standard 'Amiga' symbol next to their name to help you
identify them.


                               @{b}@{u}Project menu@{ub}@{uu}

The items in the project menu allow you to load and save different file
types, as well as control the current map and shapes.

 New map	Amiga n	- brings up the new map requester, from where you
			  can create a new map or load one off disk.  You
			  can cancel this requester if you like, in which
			  case nothing happens to your map.  Otherwise, a
			  new map will erase your old one.
			  See @{" New Map " link RED_newmap} for more information.

 Clear map	Amiga c	- opens a requester asking you if you really want
			  to clear the current map.  Clicking okay will
			  erase everything in the map.

 Resize map	Amiga z	- brings up a requester that looks like the New
			  map requester except that here you can resize
			  either the map size or the block size for
			  shapes.  Clicking Okay will change the size of
			  the map without erasing it.  You will, though,
			  loose data if you resize the map to smaller than
			  its original size.
			  Changing the block size in this requester will
			  cause all current shapes to be scanned to make
			  sure they are no bigger than the new size.  Shapes
			  that are larger than the block size will be
			  cleared.

 Load map	Amiga l	- brings up a file requester from where you can
			  select either a custom map or a raw file to load
			  into the editor.  When you select a file, the 
			  program will automatically try and identify the
			  file type.  If it doesn't manage to identify it,
			  a requester will open up asking you to select the
			  file type to load it as.
			  This file requester remembers the path you last
			  loaded from for easy map editing.

 Load shapes	Amiga a	- opens a file requester asking you to select a
			  shapes file to load.  Selecting a file will
			  cause the Shape Load window to open up.  Here
			  you select some options about how the shapes
			  in the file should be loaded in or can cancel the
			  load.
			  See @{" Loading Shapes " link RED_loadingshapes} for more information.

 Load palette	Amiga p	- brings up a file requester asking you to select
			  an IFF file from which to load a palette from.
			  The file can be a picture, anim or just a palette
			  file on its own (e.g. saved out from DPaint's
			  Save palette option).
			  See @{" Loading A Palette " link RED_loadingpalette} for more information.

 Save map	Amiga s	- opens a file selector from where you select the
			  filename to save the current map as.  You will be
			  warned if the file already exists and asked if you
			  really want to overwrite it.  Selecting a file
			  will cause the Save Map window open where you can
			  select what information you want saved in the map
			  file.
			  See @{" Saving Maps " link RED_savingmaps} for more information.

 Save raw	Amiga S	- opens a file requester from where you can select
			  the name of the raw map file to save.  Selecting
			  a file will cause 2 requesters to open up asking
			  you how you want the raw map to be saved.  Select
			  your options here and the map will be saved to
			  disk.
			  See @{" Saving Raw Maps " link RED_saverawmap} for more information.

 Save Shapes	Amiga A - opens up the Save Shapes selector from where you
			  can save any or all of the currently loaded
			  shapes.
			  See @{" Saving Shapes " link RED_savingshapes} for more information.

 Free Shapes...		- opens up a requester from where you should answer
			  'Yes' if you wish to delete all current shapes
			  and return to the default shape.  Select 'No' to
			  abort the free shape routine.

Generate source	Amiga G - brings up a window asking you to choose exactly
			  how the Blitz source code will be generated.
			  There are many options to choose from, you should
			  look at the section on Generating Source for more
			  information about them.  Clicking cancel will
			  abort this function whilst okay will open a file
			  requester where you select where to save the
			  source to.
			  See @{" Generate Source " link RED_generatesource} for more information.

 About		Amiga ?	- opens up several requesters giving program
			  information and details of the author.

 Quit and die	Amiga q	- opens a requester asking you to confirm that
			  you really do want to quit.  Selecting okay will
			  cause the program to end and all current work to
			  be deleted.  Please save out any maps that you
			  wish to keep before you select this option.


                             @{b}@{u}Preferences Menu@{ub}@{uu}

This menu allows you to configure the map editor environment.

 Configuration	Amiga /	- brings up windows where you can configure almost
			  everything inside the editor.  There are three
			  configuration windows, and each has a More button
			  which allows you to jump to the next one.
			  See the section on Configuration to get more
			  information about all the configurable options.
			  See @{" Configuration " link RED_configuration} for more information.

 Iconify	Amiga I	- iconifies the program to either the Tools menu on
			  the Workbench screen or a window on the Workbench
			  screen depending on the iconify mode selected
			  in the configuration.  Iconfying the program
			  causes its screen to close and some memory to be
			  frozen up.  It does not quit the program -
			  instead it just puts the program to sleep until
			  you need it again.

 Remap shapes	Amiga e	- whenever a palette is loaded into the editor, the
			  bottom four colours are automatically altered by
			  the editor to preserve the bottom four colours for
			  its own use.  This means that the editor will
			  always look the same.  This does also mean,
			  though, that graphics that use the bottom four
			  colours will be corrupted slightly.  The remap
			  option allows you to change all occurrences of the
			  bottom four colours in the shapes to spare colours
			  at the top of the palette.  This means that all
			  shapes will be viewed correctly inside the editor.
			  Remapping can only be done if your shapes are in
			  less that 256 colours and you have a palette
			  loaded.  Also note that the palette loaded isn't
			  actually altered by this command.  Thus you can
			  save out the palette in a custom map without
			  worrying about it being corrupted.

 Surface data	Amiga d	- opens up a window from where you can edit the
			  surface data for the currently loaded shapes.
			  See the section on Surface Data for more
			  information.
			  See @{" Surface Data " link RED_surfacedata} for more information.

 Reflect table		- has a sub menu where you decide what you want to
			  do to the reflect table.  the submenus are: Load,
			  Edit and Save.  Selecting a submenu will cause the
			  desired function to run.
			  See the section on Reflect Table for more
			  information.
			  See @{" Reflect Table " link RED_reflecttable} for more information.

 Shape names		- brings up a requester where you can select whether
			  you want to load or save shape names.  You can
			  also cancel this requester.
			  See the section on Shape Names for more
			  information.

 Stencil		- opens up the stencil window from where you
			  control the stencil function of the Red Map
			  Map Editor.

 ARexx/DOS commands	- has a sub menu from where you can select to 
			  edit, load or save the current fkey settings.
			  You can also select 'Immediate' to execute a
			  PORT type ARexx command.
			  See @{" Arexx Support " link RED_arexx} for more information.

 Rub Through...		- allows you to control the status of the Map
			  Editor's rub through feature.
			  See @{" Rub Through " link RED_rubthrough} for more information.


                              @{b}@{u}Operations Menu@{ub}@{uu}

This menu allows you to perform several different, map related operations.
You should note, though, that options on these menus *cannot* be undone.
For example: once a Fill Map Range function has been performed, you cannot
used the undone function to restore the original data.

 Goto map x,y	Amiga g	- opens a window from where you can select whether
			  or not the move is relative or absolute.  This
			  window has two gadgets in which you can enter the
			  coordinate to go to, these gadgets are
			  automatically loaded with the current screen
			  position when the window is opened.  Selecting
			  Okay will cause the move to performed, Cancel
			  will abort.
 Fill map range	Amiga f	- this first brings up the shapes requester for you
			  to select a shape to fill with.  It then opens a
			  window from where you select the area of the map
			  to fill.  You type in the position and size of the
			  fill into the gadgets and click Okay to perform
			  the fill, Cancel will abort.
 Replace shape	Amiga r	- this function replaces all occurrences of one shape
			  in the current map with the current shape.  It
			  will first ask you to select the shape to replace
			  from the shape requester.  Then it will open a
			  window from where you can select the area of the
			  map to replace.  Only shapes within this area will
			  be replaced.  Click Okay to perform the replace,
			  or Cancel to abort.
 Map flip	Amiga h	- brings up a requester asking you in which
			  direction you want to flip.  After selecting either
			  X or Y it opens up a window from where you can
			  select the area of the map to be flipped.
			  Selecting Okay will perform the flip, else Cancel
			  will abort.
			  Note: this operation uses the Reflect Table.
 Map shape	Amiga m - Allows you to alter the map data directly by
  adjust		  subtracting an integer value from all positions
			  within a given map range.
			  See later in this doc for a full discussion of
			  this function.

 Freehand Draw	<Tab>	- Change the current drawing mode to normal.

 Line Draw	<Tab>	- Change the current drawing mode to line.

 Box Draw	<Tab>	- Change the current drawing mode to box.

 Bar Draw	<Tab>	- Change the current drawing mode to bar.


                                 @{b}@{u}ARexxComm@{ub}@{uu}

This menu title will only be available if an ARexx program has asked the
Map Editor to create some custom menu items for it.
@ENDNODE

@NODE RED_drawingcontrol "The Drawing Control Area"
                            @{b}@{u}The Drawing Control Area@{ub}@{uu}

  This area is located directly under the menu strip.  It is split into the
separate areas, these being the @{" Information Area " link RED_informationarea} and the @{" Control area " link RED_controlarea}.
Here you are given information about the current position on display in the
map and given the chance to change the current drawing mode.
@ENDNODE

@NODE RED_informationarea "Information Area"
                                @{b}@{u}Information Area@{ub}@{uu}

  The Information area is located on the left of the Drawing Control area
and has two lines of text on it.  The first is titled MAP POS, this stands
for map position and tells you the map coordinates underneath the mouse
pointer. It also shows the shape number at that position in the map, If
the mouse is not inside the drawing area, this line will be blank. It will
also remain blank, if you have not selected "Onscreen coordinates" from the
configuration screen from the Prefs menu.
  The information is shown in the form of:

			MAP POS: x,y,shape number

although shape number will not appear if the map position is not defined
(e.g. you have drawn anything there yet).

  The second line of text in this area shows the current view coordinates of
the view in relation to the map.  It is shown in the form of:

			VIEWING: x1 to x2,y1 to y2

where (x1,y1) are the coordinates, in the map, of the top left hand corner
of the view area, and (x2,y2) are the coordinates of the bottom right hand
side of view area.  If the current map is smaller than the viewing area,
(x2,y2) will be the bottom right corner of the map.


                                @{b}@{u}Map Number@{ub}@{uu}

The current map number is displayed as a number from 1 to 6 and is located
in the top right hand side of the Information area.  See @{" Multiple Maps " link RED_multimap}
for information about changing the map number.


                                @{b}@{u}Rub Through@{ub}@{uu}

If rub through mode is current enabled, the current rub through map will be
displayed in the top right hand side of the Information Area.  The map
number will be displayed as a value from 1 to 6, prefixed with 'R'.  See
@{" Rub Through " link RED_rubthrough} for information about setting the rub through map.
@ENDNODE RED_informationarea

@NODE RED_controlarea "Control Area"
                                  @{b}@{u}Control Area@{ub}@{uu}

  The Control area is located on the right of the Drawing Control area.  It
contains a series of gadgets that allow you to control the map drawing
process, these gadgets are:

 Gadget		Shortcut	Description

 Shape		<Space>		Brings up the shape selector window
 Group		g		Brings up the group selector window
 L(eft)		l		Asks you to click on a shape in the map
				to assign to the left mouse button.  If you
				hold down <Shift> whist pressing the
				shortcut, the shape under the mouse pointer
				is automatically selected.
 R(ight)	r		Asks you whether you want to select a map
				block to assign to assign to the right mouse
				button or delete the current assign.
				If you click on select you'll be asked to
				select a shape from the map.
				As with L(eft), pressing <Shift> and the
				shortcut will cause the shape under the
				mouse pointer to be automatically selected.

The following are only available if you are using a screen that is wider
than 320 pixels.  If your screen is only 320 pixels wide (low res) then
these functions can only be activated from the keyboard shortcuts.

 Undo		u		Causes the last shape or group drawing
				operation to be undone.  Clicking on undo
				again will cause the original data to
				return.  Note that the undo buffer can only
				undo a maximum of 1000 shapes.
 Full		f		Fills the view area with all the current
				shapes.  From here you can then select a
				shape for either the left or right mouse
				button by clicking on one.  If you have more
				shapes than can be viewed on screen at once,
				you can scroll the area up and down with
				the up and down cursor keys.
 Name		n		brings up a window with a list of all
				currently defined names, from here you can
				select a shape to put on the left mouse
				button by name.  Just click in the list of
				names and hit Okay.
 Draw/Box/Line	<none>		selects the current drawing mode for shapes
				only - not groups.  Changing the mode
				automatically changes back to shape drawing.

@ENDNODE RED_controlarea

@NODE RED_shapescroller "The Shape Scroller"
                               @{b}@{u}The Shape Scroller@{ub}@{uu}

  The shape scroller is located directly below the Drawing Control Area.  It
allows you to view a range of the currently loaded shapes and select
different shapes without the need to open any windows.  Just clicking on a
shape in the scroller with either the right mouse button or the left mouse
button will automatically select that shape for the mouse button pressed.
Note that you must release the button to continue.

  The scroller has two scroll buttons, these are located at opposite ends of
the scroller and allow you to move it left and right through the shapes.
Click on these buttons with the left mouse button to scroll one shape at a
time in the selected direction, or click with the right mouse to move to the
start or end of the shapes (depending on what button you click on).

  The scroller automatically adjusts its size to fill the whole horizontal
screen width.  All shapes inside the scroller, are shown as 16x16 blocks,
this means that a shape larger than this will be clipped to fit inside this
size.  If you haven't got enough shapes loaded to fill the scroller, the
extra slots will be meshed out and will be unselectable.

  The scroller can display upto 4 rows of shapes at a time.  The height of
the scroller is controlled by the current configuration settings.  The
scroller can also be switched off in your configuration settings.  See
@{" Configuration " link RED_configuration} for more information.
@ENDNODE

@NODE RED_viewarea "The View Area"
                                 @{b}@{u}The View Area@{ub}@{uu}

  This area is the actual view area for the map you're editing.  It takes up
most of the screen's height and always fills the full width of the screen.

  Moving the mouse pointer into the scroll area will cause the current shape
(or group) to be drawn under the mouse pointer.  This draw is just to show
you what the shape will look like when actually look like when drawn down -
it is not a permanent change.  Moving the mouse around the view area will
cause the current drawing shape(s) to move with the pointer, giving you a
preview of what it would look like if you drew them down.

  Drawing with shapes is easy.  Simply press the left mouse button and
release to draw the current shape(s) under your mouse pointer, or press and
move the mouse to draw the shape(s) at several different positions at once.
Pressing the right mouse button will cause a different shape to be drawn on
your map, depending on the current setting of the button.  The default for
the right mouse button is delete, this means that when you draw, instead of
a shape being drawn onto your map, the current shape at the map position is
deleted.  You can, though, assign a shape to the right mouse button (by
either selecting one from the shape scroller, pressing R on the keyboard or
selecting the 'R' gadget on the screen).  When drawing with this, any shapes
you try and draw will be replaced with selected right mouse button shape.

  It is fairly unlikely that your map is going to exactly fit into the view
area.  When your map is smaller than the view, the area inside the view
where you cannot draw will be meshed off.  You will be unable to draw
anything inside this meshed area.  You will, though, only get a mesh if you
have the mesh option selected from the configuration windows, otherwise the
area will be blank.  If your map is to big for the view you are able to
scroll around it with the cursor keys.  This lets you create and edit a map
that is much larger than the current view can show with ease.  Pressing a
cursor key will scroll the map in the given direction one block unit (the
unit will be the block width for X scrolling or the block height for Y
scrolling).  If this isn't fast enough for you, you can press shift at the
same time to jump a full views worth of map.  Note, though, that you'll
never be able to scroll outside of the map area.  If you wish to move to a
specific coordinate or wish to move large distances, you can use the Goto
Map XY menu option to jump to a certain position.
@ENDNODE RED_viewarea

@NODE RED_shapeselector "Shape Selector Window"
                             @{b}@{u}Shape Selector Window@{ub}@{uu}

  This window allows you to select a shape from the currently loaded ones.
It is called up by pressing either on the 'Shape' gadget on the Control
Area or by pressing <SPACE> on the keyboard.  When used in this way, it
allows you to easily select a shape to place on the left mouse button.

  Inside the window, you will find a set of gadgets that let you move up
and down through the currently loaded shapes, as well as some info about
the current shape.  On the left and right sides of the window are two sets
of two gadgets.  They are for changing the current shape, the bottom top
gadget of each set moves one shape at a time, whilst the bottom one moves
ten shapes at a time.  This gadgets can be activated from the keyboard, use
'<' and '>' to decrease or increase the current shape by one, or press
<Shift> and either of them to decrease/increase by ten shapes.

  The number of the current shape is shown at the top of the window.
Directly underneath this there is a display box in which the current shape
is shown.  If the shape is larger than the box, it will be clipped to fit
inside it.  The last bit of info that is shown about the shape is the name
of it.  This is displayed in a text gadget directly under the view area,
you can type a new name for the shape directly into this gadget.  The name
should be in the form of a variable, e.g. Backgroundblock.  You can have
numbers in the name, but they should always appear at the end of it, e.g.:

		Backgroundblock1	is allowed
		Background1block	is not allowed

The name text gadget can be activated from the keyboard, just press
[Return].  Note, though, that whilst the text gadget is active, you cannot
use any of the keyboard shortcuts for the window.

  An extra feature of this window is that you can select a shape from the
map.  All you have to do is click outside the window on a shape in the view
area.  This will cause the current shape to automatically switch to the
selected shape.

  To exit the window and select the current shape for the left mouse
button, just press on the Select gadget at the bottom of the window or
press the S key.


                                   @{b}@{u}Operations@{ub}@{uu}

  Several of the functions on the Operations menu will call up the shape
selector window.  When this happens, you will not be selecting a shape to
draw with, but rather a shape to perform the operation with.  An example of
this is the replace operation, in this you'll be asked to select a shape to
replace with the current shape.  From the selector window you'd click on
the shape you wanted replaced in your map.

  When the Shape Selector is called in this manner, the title of the
selectors window will be a prompt string.  This string will describe what
you are selecting a shape for, e.g. "Select Fill Shape" when you are using
the Fill Range function.
@ENDNODE

@NODE RED_groupselector "Group Selector Window"
                             @{b}@{u}Group Selector Window@{ub}@{uu}

  This window allows you to control groups inside the map editor.  From it
you can select, create or delete any groups available.  The window can be
invoked either by clicking the gadget Group in the Control Area, or by
pressing the G key.

  The group window is very similar to the shape selector window in that it
shows you info about the current group and allows you to cycle through the
groups.  Where it differs, though, is in that is has a series of extra
gadgets that are specific to groups, these are:

	Xflip/Yflip:	This allows you to flip the current group either
			horizontally (X) or vertically (Y) about its
			center.

	R.T.:		This stands for Reflect Table and says whether
			or not you want the reflect table to be used when
			groups are flipped horizontally and vertically.  If
			this gadget is checked the reflect table is on for
			group flipping.

	Create:		Clicking on this will allow you to edit a group
			from scratch.  The selector window will be hidden,
			and you'll be able to click with the left mouse
			button on parts of the map to add items to the group.
			The relative position and shape number of the map
			square you click on will be stored in the current
			group.  You cannot add empty positions to a group,
			and a group can have a maximum of 100 shapes in it.
			You can also only select each position once, the
			position will be highlighted to show that it has
			been added okay.
			Press with the right mouse button to end creation
			of groups and return to the selector window.
			Note: the current group will be replaced by the new
			one when you perform this function.

	Delete:		Allows you to clear the current groups data.  Note,
			though, that you cannot undo this delete.

	Select:		Exits the selector window and puts the map editor
			into group drawing mode.  If the group you have
			currently selected has no shapes in it, the mode
			will automatically be changed back to shape draw
			and will use the last selected shape.

	Cancel:		Exits the selector window without changing the
			current drawing mode.  A point to note, though,
			is that the current state of the groups is
			changed.  EG. deletion of groups can not be
			'canceled'.

  Please note that all these gadgets have keyboard shortcuts.  They will all
have an underline character in their text showing the key to press to
activate them.


                            @{b}@{u}Quick Group Create@{ub}@{uu}

Groups can be quickly created by pressing the B key whilst the drawing area
of the Map Editors screen is active.  After pressing B just drag out a
region of the screen to make a group.  The group will be 'picked up' when
you release the mouse button after dragging.  If you drag out using the
right mouse button, the group will be removed from the map after it has
been grabbed.  This option functions like the Get Brush functions found in
most paint programs.
@ENDNODE

@NODE RED_rangeselector "Range Selector Window"
                             @{b}@{u}Range Selector Window@{ub}@{uu}

This window is used by all the functions that just act on a specific area
of the map.  In it, you select the area of the map that the function should
use, or cancel if you wish to abort the function.

There are 8 gadgets in the window, and these are split up into 2 groups.


	<String gadgets>
	Start Map X:	Set the start x position for the function.

	Start Map Y:	Set the start y position for the function.

	Width to do:	Set the width of the function (must be at least 1)

	Height to do:	Set the height of the function (must be at least 1)

	<Button gadgets>
	From View:	Sets up the start positions, width and height to
			reflect the current map view area.  This can be
			used to quickly select the visible area of the map.

	From Map:	Sets up the start positions, width and height so
			that the function will work on the entire map.

	Okay:		Exit the requester and perform the function.

	Cancel:		Abort the requester and cancel the function.

@ENDNODE

@NODE RED_configuration "Configuration"
                                 @{b}@{u}Configuration@{ub}@{uu}

  The map editor is very configurable.  You can change a lot of options to
customize it to just how you like it.  You can also save all preferences so
that it will automatically load into the correct mode when next run.

  The configuration section consists of 3 windows, entitled Default Paths,
Misc 1 and Misc 2.  All these requesters have 3 buttons at the bottom of
their windows:

		o More 		- skips to the next window
		o Save		- save the current configuration
		o Okay		- exit configuration section


                                 @{b}@{u}Default paths@{ub}@{uu}

  From here you can select the default paths to load/save maps from, load
shapes from and load palettes from.  You can either enter a new path into
the string gadgets, or you can click on the gadgets next to the paths to
bring up a requester from where you can click a path with the mouse.

  From here you also set up the path for the @{" Startup Folder " link RED_startupfolder}.  You
can also toggle the Startup Folder on/off by selecting/deselecting the
tickbox next to the Startup Folders string gadget.


                                     @{b}@{u}Misc 1@{ub}@{uu}

 	o Screen mode:        opens up a ReqTools screen mode requester from
			      where you can select your preferred mode (e.g.
			      Lowres, hires etc.).  Clicking on okay will
			      cause the map editor to reopen its screen in
			      the new resolution when you exit the
			      configuration window.  Only standard screen
			      modes are available (e.g. no HAM modes).
			      Note: when you save your configuration, the
			      screen mode details are automatically saved
			      with it so that the editor can open its
			      screen in your preferred mode when next run.

	o Iconify to:	      this cycle gadget lets you select whether
			      to iconify to the Tools menu or a window on
			      the Workbench screen.

	o Iconify end:	      this is used when you are iconifying to a
			      window.  It lets you select whether the
			      right mouse button ends the iconify, or the
			      zoom gadget of the window.

	o IconifyX:	      default x position of the iconify window.

	o IconifyY: 	      default y position of the iconify window.

	o Use AppIcon: 	      select whether or not an appicon appears on the
	  		      Workbench screen.  The appicon can have maps
			      dropped on it to automatically load them in.

	o Interleaved:        lets you select whether or not the screen is
		              interleaved (OS3.0+ only).  Interleaved screens
		              flicker much less when they're scrolled and so
			      are a lot nicer to work with.

	o Pub Screen:	      lets you select whether or not the
			      REDMapEditor's screen is a public screen.
			      Making the screen public will slow down
			      rendering slightly but has the benefit that
			      other programs can open their windows on the
			      screen.


                                     @{b}@{u}Misc 2@{ub}@{uu}

	o Shape remap:        decide what happens when shapes are loaded
			      whilst a palette is also loaded.  Options are:

				No - don't remap shapes
				Yes- automatically remap shapes
				Ask- open a requester asking whether or not
				     to remap the shapes straight after
				     loading them

	o Shape scroller:     allows you to select the height of the shape
			      scroller or disable it (selecting a height
			      of 'none' in this cycle gadget will switch
			      off the shape scroller).
			      See @{" Shape Scroller " link RED_shapescroller} for more information.

	o ShapeZ bordercol:   allows you to set the border colour used when
			      cutting from a picture file using the ShapeZ
			      cutter.

	o Use mesh:           lets you select whether or not areas of the
		              view are that you cannot draw on are meshed out.
		              If this checkbox is 'checked' then the mesh
			      is on.

	o Quiet shape remap:  decide whether remapping shapes gives a
			      progress indicator or if it just sets the
			      mouse to a busy pointer.  Quiet remapping
			      is slightly faster than using the progress
			      indicator.

	o Custom icon files:  select whether to save icon files when custom
			      maps are saved.

        o Screen coordinates: shows x,y coords, and shape number 
			      next to MAP POS: in the information 
			      area.

	o Warn on undo o/f:   warn when the undo buffer has overflown and can
			      receive no more data.  Currently the undo
			      buffer can hold 1000 entries.  This tick box
			      allows you to get a warning when the undo
			      buffer becomes full.
@ENDNODE

@NODE RED_surfacedata "Surface Data"
                                  @{b}@{u}Surface Data@{ub}@{uu}

  Surface data allows you to assign separate values to shapes.  When you
save custom maps, you'll be given an option to save out an extra chunk of
data that will hold a copy of your map, except that all shape numbers are
replaced by surface data.  Thus you could build, for example, a tree out of
6 separate blocks, but assign them the same surface value.  Your program
could then use the main map data to draw an onscreen map and use the surface
data map for something like collision detection.

  The surface data window consists of two shape display boxes.  Each has a
slider so that the shape displayed in it can be changed to any of the
currently loaded.  Each also has a gadget for entering an integer value for
the shapes surface data.

  There are two display areas so that you can easily set the surface values
for a range of shapes.  In the center of the window there is a 3 integer
gadget.  This gadget holds the value to assign to either all shapes or a
range of shapes.  To set a range, set up one display area to point at the first
shape in your range, and set the other to point at the last.  This range
can then have one value assigned to every shape in it by clicking the
'Set Range' button.
@ENDNODE

@NODE RED_reflecttable "Reflect Table"
                                 @{b}@{u}Reflect Table@{ub}@{uu}

  The reflect table allows you extra control over flipping maps and groups.
In the reflect table, each shape loaded has a xflip and a yflip shapes
number.  What these means is that when a shape is flipped, it automatically
changes to the alternate shape in the table.  Thus xflipping a shape in a
group or map would cause it to change into an alternate shape.

  Let me give an example to illustrate this.  Say you had some tunnel
shapes.  On represents a left exit from a tunnel, one a mid-section of
tunnel and the last a right exit from a tunnel.  These shapes in a map
could represent a tunnel section in your map.  They'd be drawn out with my
left exit, then the mid and then the right exit, going horizontally across
the screen.  Now what would happen if you flipped just these 3 blocks?  The
left and right exit would be reversed, giving a corrupted tunnel that would
need redrawing to make it look correct.

  To get round this, you could use the reflect table.  You'd set it up so
that the left tunnel exit flipped horizontally into the right exit.  Then
when the area of map was flipped, the exits would automatically change into
the correct exit.  This is a fairly simple example, a larger one could
involve a number of blocks in a shoot-em-up.  It would be likely that a lot
of the background blocks would just be the x or y flips (e.g. flipping the
'image' if a shape when drawing) of other blocks.  Thus you could draw an
area of map, and using the reflect table, easily flip this and paste it
somewhere else to add variety in your level.


                           @{b}@{u}Editing the reflect table@{ub}@{uu}

  The edit window consists of 3 shape display areas.  The one in the top
left shows the current shape being edited.  The other two show what the
shape currently flips into in the x and y directions.  These can be changed
using the sliders next to each area to change what the shape flips into.

  There are several buttons in this window, these are:

	o Correct: this looks at the shapes that the current shape flips
into.  It then makes it so that those shapes will flip into the current
shape.  This can be explained from the tunnel example given earlier.  When
you flip the left tunnel exit horizontally, you want it to change into the
right tunnel exit.  Inversely, when you flip the right one, you want it to
turn into the left one.  To do this, all you'd have to do is set up the
left to flip into the right and then press on 'Correct'.  The right exit
will then automatically be adjusted to flip into the left exit.

	o Reset ALL: resets all shapes so that they flip into themselves.

	o Okay: Exit the window and keep any changes.

	o Cancel: Exit the window but don't keep any changes.
@ENDNODE

@NODE RED_shapenames "Shape Names"
                                  @{b}@{u}Shape Names@{ub}@{uu}

  In the map editor, individual shapes can be named.  This can be very
helpful as in programs it is very useful to address individual shapes by a
constant (e.g. #background) than an actual number.  If you use constants,
you can change orders of shapes and delete shapes in your files without
having to go through your program making changes to all your blits etc.
All you have to do is change your maps and change the constants at the top
of your program.

  Names are entered in the shape select window.  Inside this window is a
string gadget, inside which you can enter a name.  Don't put a '#' at the
start of the name - when you save names, they automatically have a '#'
added to the front of them.  See the section on the shape select window for
more information about entering shape names (e.g. what names are allowed).


                          @{b}@{u}The 'Shape Names' menu item@{ub}@{uu}

  Clicking on this menu item will cause a requester to open.  From here you
can either Load or Save shape names.  Shape names are stored in a standard
ASCii file that can be inserted straight into any source code.  They are
saved out in the following form:

		'#'+<shapename>+'='+<shapenumber>

e.g. if the name for shape 20 is Backgroundblock, it would be saved as:

		#Backgroundblock=20

Assembler programmers will need to change the shape name file after
inserting it to replace all '=' with ' equ '.

If you are loading, you should make sure that the file you select if
actually a shape names file.  Selecting a different file could lead to a
crash.
@ENDNODE

@NODE RED_mapshapeadjust "Map Shape Adjust"
                                @{b}@{u}Map Shape Adjust@{ub}@{uu}

  This menu item allows you to add or subtract an integer value from a
specific area of the current map.  It is a fairly complex process, in that
a series of requesters have to be replied to before the process actually
takes place.

  What actually happens is that you select firstly a shape range to perform
the adjustment on.  Only shapes within this range will actually be altered
on the map, but the alteration may cause the final shape number to 'leave'
this range.  The adjusted value will never be more than the currently
loaded number of shapes.
  Then you must enter an integer value to added to all the shape numbers in
the current map.  This value can be either positive (to increase the shape
numbers) or negative (to decrease the shape numbers).
  Next you select the map range to change.  when the adjust is performed,
it will only have any effect within this range.
  After you have entered all the above information, you'll be asked to
*finally* confirm that you want to actually perform the change.  Beware,
though, the change cannot be undone.

  Let me list out those steps to try and make it a bit clearer:

		o Select shape range.  This is done with two visits to the
		  @{" Shape Selector " link RED_shapeselector} Window

		o Select adjust value.  Done using a standard string
		  requester

		o Select map range.  This is done using the
		  @{" Range Selector " link RED_rangeselector} Window

		o Confirm that you want to actually perform the adjust
@ENDNODE

@NODE RED_loadingshapes "Loading Shapes"
                                 @{b}@{u}Loading Shapes@{ub}@{uu}

  Shapes can be loaded from three different file formats from one single
file selector:


	o Blitz2 shape files

	o RWE shape files (as saved out from ShapeZ)

	o Datatype objects (WB3.0+)

	o IFF picture files

The Map Editor will automatically attempt to identify the type of file
being loaded.  If it finds an IFF or Datatypes picture file, the editor
will automatically load and scan the picture for shapes using the selected
cutter (see Cutter type: later in this section).  It will also ask you to
select whether or not to use the palette from the picture.

  Once you've selected a shapes file from the file selector you'll be
presented with a window from where you can select how to load the shapes
in.  Options will have checkboxes next to them, click these on or off
affects the status of the options.  Valid options are:

    o Reject different sizes  - blocks that are smaller than the current
				block size will be replaced with a blank
				shape if this option is enabled.  Note that
				shapes larger than the block size are
				always cleared.

    o Reset handles	      -	if enabled automatically sets the shape
				handles to the top left corner.  This
				option *should* always be enabled since
				shapes with different handles could
				possibly cause a software failure.

    o Overwrite current       - if enabled, this will cause all current
				shapes to be deleted before the new file
				is loaded in.

    o Quiet mode              - if enabled, this will skip the status
				information for shape scanning.  This
				speeds up loading but you loose out on
				information about whether shapes are being
				resized etc.

    o Load at:		      - if enabled, you can select a shape offset
				to load at.  Enter the offset into the
				gadget to the right of this tick box.  Note
				that the offset defaults to 1 past the
				highest current shape.

    o Cutter type:	      - select the type of cutter to use if the
				shapes file selected is recognised as a
				datatype file or an IFF.  Available options
				are ACID (original Acid Shape Editor
				cutter), TILE (cut horizontally and
				vertically from the bitmap) or SHAPEZ
				(cutter used by REDShapeZ).
@ENDNODE

@NODE RED_savingshapes "Saving Shapes"
                               @{b}@{u}Saving Shapes@{ub}@{uu}

This function allows you to save out the currently loaded shapes into
either a Blitz Basic shapes file or a RWE shapes file.  The first thing
you'll have to do is select a destination filename for the shapes.  Do this
by selecting a file from the save requester that opens.  After selecting a
file the Save Shapes window will open, it will have a series of gadgets
inside it which will allow you to control the save:


	o Save as Leshapes:	Select this gadget to save out the shapes
				in a RWE custom shapes file (that can be
				loaded with the commands found inside the
				RIShapes library).

	o Unremap shapes:	If shapes are currently remapped (to allow
				the Map Editor to maintain its colour
				mapping) this box allows you to control
				whether or not the Map Editor returns the
				shape colours to normal before saving.
				This box will nearly always be active.

	o Save All/Range:	Select whether to save all the current
				shapes or just a range of them.  If you
				select 'Range' the two number gadgets to
				the right of the Save All/Range gadget
				should be set to the range you wish to
				save.

After setting up the save, just click on the 'Save' gadget to actually
write out the file, otherwise select 'Cancel' to abort the save.
@ENDNODE RED_savingshapes

@NODE RED_newmap "New Map"
                                    @{b}@{u}New Map@{ub}@{uu}

The New Map window allows you to recreate the current map buffer.  It
allows you to control map and block dimensions (width and height) for the
map to be created.  The New Map window cannot be used to modify any map
buffer except the current one.

The window has 4 input gadgets, which are:

	Block Width		Enter the width of the map blocks for this
				map (in pixels)

	Block Height		Enter the height of the map blocks for this
				map (in pixels)

	Map Width		Enter the width of the map in blocks

	Map Height		Enter the height of the map in blocks


There are also three gadgets at the bottom of the screen which control
exiting from the window, these are:

	Load Map		Invoke the Load Map function and allows
				loading of a map from inside the window.

	Create			Accept the map/block dimensions and
				create the map
				WARNING: Any current map data in the buffer
				will be destroyed

	Cancel			Exit the window without making any changes


When the REDMapEditor first runs this window will be invoked
automatically.
@ENDNODE RED_newmap

@NODE RED_loadingmaps "Loading Maps"
                                  @{b}@{u}Loading Maps@{ub}@{uu}

  Clicking on the Load Map menu item will cause a file requester to open.
From here you'll be asked to select a map file to load.  This can either be
a custom map, a raw map or a map from the original Blitz Basic 2 map
editor.

  When you select a map, the map editor will automatically try and
identify it.  It will look at the start of the file and try and find the
custom header.  If it finds this, it will perform a custom map load where
it will look for information in the map, and ask you to confirm which
chunks of data you want loaded from the map.  The map data will always be
loaded, but you may select whether or not to load extra info, for example
palette, surface data and groups.

  If the file is not identified, a requester will open asking you to
identify the map as raw (in which case you'll be asked what form the data
is held in) or as a Blitz2 map file.  If you select Blitz2, the map editor
will automatically look for the <mapname>.mapstuff file that is associated
with Blitz2 maps.  If this file cannot be found, your map may become
corrupted as this file holds the map and block dimensions.
@ENDNODE

@NODE RED_savingmaps "Saving Maps"
                                  @{b}@{u}Saving Maps@{ub}@{uu}

  The map editor supports saving in two formats: custom and raw.  Both of
these formats have their good and bad points and are suitable for different
stages of a programs development.

  Custom maps always come out at least slightly larger than raw maps. They
do though hold a lot more info that raw maps.  For example, you can save a
palette, a pointer to a shapes file, group information and surface data
inside one custom map file.  Thus when you load this one file into the
editor, you'll automatically have all your groups back, plus the palette
and the shape file you originally loaded.  This can take a lot of hassle
out of editing map files, as it simplifies the process of loading in a map.

  On the negative side of custom maps is that fact that anybody could view
your map files simply by loading them in.  They could also rip out your
maps as size info etc. is held all in one file.  Depending on what sort of
project you're working on, this could be a crucial point.

  Raw maps are simply what they say: they are just a chunk of memory saved
out that describes the map.  They hold no size information at all, or any
other type of info, except 'this shape goes here' info.  They are always
smaller than custom maps.  They are thus perfect for a finished product as
it anybody wanting to view them would have to have some info about their
dimensions before viewing could be done.  For development, though, they are
not as good as custom maps because you have to manually load in extra data
(like a palette) and cannot save group information.

  It is recommended that you use the custom maps during development of your
programs, and then use raw maps in a finished product if necessary (e.g.
for security).

  See @{" Saving custom maps " link RED_savingcustommaps} and @{" Saving Raw Maps " link RED_saverawmap} for information about
how to save with these formats.
@ENDNODE

@NODE RED_savingcustommaps "Saving Custom Maps"
                               @{b}@{u}Saving Custom Maps@{ub}@{uu}

  When you save these maps, a window will open from where you can select
exactly what data to save with your map.  There will be a series of
checkboxes in this window, which you can click on or off depending on what
you want saved.  Valid options are:

		o Save palette in map

		o Save group information

		o Create Icon file *

		o Pointer to shape file (stores filename in map)

		o Surface data

* Creates an icon file for the saved map, with the map editor as the
default tool for it.

  After selecting your options just click on the save gadget to go ahead
with the save or click cancel to abort.


                              @{b}@{u}Important note@{ub}@{uu}

Custom maps saved out with this program cannot be loaded into other
programs, this includes earlier versions of this program (e.g. LES Map
Editor V2).
@ENDNODE

@NODE RED_saverawmap "Saving Raw Maps"
                              @{b}@{u}Saving raw maps@{ub}@{uu}

  After selecting your filename, you'll be asked to select the size of data
to save.  The options given to you are: Byte, Word and Cancel.  Byte should
only be selected if you use less than 128 shapes in total (this takes into
account the fact that a basic doing a Peek.b will sign extend the number).
Byte files, though, will come out as half the size of word files.  The only
other difference is that slightly different code is needed to use each type
of data in your own programs.  The byte option is mainly of use to people
who already use a map editor that saves out data in bytes (like the Blitz2
map editor).

  A second option will be given to you if you don't cancel the first
requester.  This option asks you what value you want to identify a null
position in the map when saved.  Possibly answers are: 00, -1 and cancel.
00 is the default, and means that the first shape number available for use
in the map is 1.  -1 is available to help those who have previously used
different editors that use this value for null slots.  Note that custom
maps use 00 for a null position.

  The save will then go ahead as long as you didn't select cancel from
either requester.
@ENDNODE

@NODE RED_custommapfileformat "Custom Map File Format"
                             @{b}@{u}Custom Map File Format@{ub}@{uu}

Custom maps are saved out in the standard IFF format.

The chunks used in the format are:

	INFO
		UWORD	map width in blocks
		UWORD	map height in blocks
		UWORD	block pixel width
		UWORD	block pixel height

	VERSION
		ULONG	4 character version string

	CMAP
		(UBYTE	red colour component
		UBYTE	green colour component
		UBYTE)	blue colour component

	GRPS
		ULONG	number of groups
		(UWORD	number of blocks in the group
		(UWORD	block x offset
		UWORD   block y offset
		UWORD)) block shape number

	SHAP
		UBYTE()	filename of a shapes file associate with this map

	SURF
		UWORD()	array of surface data values for each map block

	SURD
		UWORD()	array of surface data values for all current shapes

	MAPD
		UWORD()	array of actual map data

Note that any one map may not have all of these chunks present - the actual
chunks present is dependent on the options the user selects when they save
the map.
@ENDNODE

@NODE RED_tooltypesupport "Tooltype Support"
                                @{b}@{u}Tooltype Support@{ub}@{uu}

  The Map Editor supports a whole list of tooltypes to allow you to
customise it to your own needs.  These tooltypes can be edited directly by
bringing up the information requester from WorkBench or can be changed by
using the save configuration option in the configuration windows.


                                 @{b}@{u}ToolType list@{ub}@{uu}

	MODEID		- This is the viewmode id of the screen you want
			  the editor to open on.  It is recommended that
			  you do not edit this tooltype directly - using the
			  save configuration option from inside the program
			  will automatically set this tooltype.

	SWIDTH		- This is the width of the screen to open.  It must
			  be at least 320 pixels wide.

	SHEIGHT		- This is the height of the screen to open.  It
			  must be at least 200 pixels tall.

	MAPPATH
	PALPATH
	SHAPEPATH	- These are the default paths for loading and
			  saving.  Respectively, they are for map loading
			  and saving, palette loading and shape loading.

	STARTUPDIR	- The path to the {" Startup Folder " link RED_startupfolder}, by default the
			  Startup Folder has the following path:
				Blitz2:Startup/REDMapEditor

	ICONIFYTYPE	- The program has an iconify feature that allows
			  you to hide it away (e.g. close screen and free
			  up loads of memory).  When the program is
			  iconified it uses up very little processor time
			  and only memory associated with the actual
			  program and the shapes loaded.
			  This tooltype takes values 0 to 1 and lets you
			  select the type of iconify that occurs.  A value
			  of 1 means that the program should create a menu
			  item on WorkBench's Tools menu.  Selecting this
			  option uniconifies the program.
			  A value of 0 means that the program should create
			  a window on WorkBench.  Closing this window or
			  using the zoom gadget actives the program.

	ICONIFYEND
	ICONIFYX
	ICONIFYY	- If you selected a window iconify then these
			  tooltypes let you configure the iconify window.
			  The ICONIFYEND tooltype lets you decide whether
			  the iconify is ended by selecting the zoom gadget
			  on the window or by pressing the right mouse
			  button whilst the window is active.

	APPICON		- This says whether or not you want the program to
			  automatically create an appicon onto which you
			  can drop map files for fast loading.  This
			  tooltype has no value, if you do not want an
			  appicon then just put brackets around it
			  ("(APPICON)").

	QUIETREMAP	- This allows you to select whether or not the
			  shape remap option shows you a progress bar
			  whilst remapping.  Bracketing the tooltype out
			  enables the progress bar.

	CREATEICONS	- This allows you to select whether or not icon
			  files should be created for any custom files saved
			  out.  When icon files are created the default
			  tool of the file is automatically set to the map
			  editor allowing you to double click the file to
			  load the map editor.

	DOMESH		- This tooltype allows you to switch on or off the
			  mesh that covers areas of the current screen that
			  go outside of the current map.  You will see a
			  mesh if this option is enabled and your map is
			  smaller than the current screen.

	MOUSECOORDS	- This option allows you to select whether or not
			  mouse coordinates will be displayed when the
			  mouse pointer is within the drawing area.

	AUTOREMAP	- This option has 3 values: Yes, No and Ask.
			  It applies to shape loading and lets you decide
			  whether or not shapes should be remapped straight
			  after they are loaded.  Note: you can only remap
			  if you have a palette already loaded.  Set this
			  tooltype to ask too bring up a requester asking
			  you to decide whether or not to remap.

	SHAPESCROLL	- This option sets the height of the shape scroller
			  from 0 to 4 blocks.  If set to 0, the shape
			  scroller is disabled.

	SHAPEBUTTONS	- This is a binary number that holds the last saved
			  status of the gadgets on the GetShapes window.
			  You should not edit these in the tooltype.
			  Select your preferred mode when doing Load Shapes
			  and then select Save configuration.

	SAVEBUTTONS	- This is like SHAPEBUTTONS except that it applies
			  to the statuses of the gadgets in the Save Custom
			  Map window.

	UNDOWARN	- This option allows you to contol whether or not
			  the Map Editor warns you when the undo buffer
			  has run out of space.

	BORDERCOL	- Allows you to select the colour to use for
			  borders of shapes when cutting using the ShapeZ
			  cutter.

	STARTUPVALID	- This option allows you to select whether or not
			  the {" Startup Folder " link RED_startupfolder} function is enabled.

	PUBSCREEN	- This option controls whether or not the
			  REDMapEditor's screen is public.
@ENDNODE

@NODE RED_generatesource "Generating Source"
                              @{b}@{u}Generating Source@{ub}@{uu}

Selecting the Generate Source option is mostly of help to Blitz Basic 2
users, since it generates some ASCII text that will display your map on a
given bitmap, once loaded into Blitz Basic.

Firstly, upon selecting this option, you are asked whether you are sure
you want to generate the source code. If you do, then select Okay, 
otherwise click on cancel.

You are now faced with a screen containing several Cycle gadgets and text
entry gadgets. I will list them below, and explain them further below:

    Shortcut		Gadget			     Use

	f		file format 	Select style in which map will be
					saved (CUSTOM, or RAW). See the 
					sections on saving custom/raw maps
					for more details on the merits of
					either style.

	s		raw size	Byte or Word. Sets the size of the
					data written out. (only used when
					map being saved is in raw format).

	n		raw null	sets the value to use as null when
					saving as raw. Valid values are 00,
					or -1. Again, refer to saving raw
					map section for merits of either
					value.

	l		Blitz2 Mode	Sets the mode the map will run in
					under Blitz 2. Options are AMIGA or
					BLITZ.

	D		Data mode	sets how the data values will be
					written in the file. Options are
					VARIABLES or CONSTANTS.

	o		shape offset	sets the offset that the first shape
					will be loaded from.

	p		name prefix	sets a prefix for the name of the
					map you are saving.
 
You also have the option to Cancel from here, otherwise just click on Create
and via the file-requester that pops up, enter a place to save your source
to.
@ENDNODE

@NODE RED_arexx "ARexx Support"
                               @{b}@{u}ARexx Support@{ub}@{uu}

This program has an arexx port, named MapEditor.  Using this port you can
send the Map Editor a large number of commands, enabling you to control the
features of the Map Editor from another program or an ARexx script.
To avoid confusion, running several versions of the Map Editor will cause
the later versions of the Map Editor to open their port as 'MapEditorN'
when n is a number from 0 to 50.

To send a message to an arexx port from the cli you use the rx command
(found in sys:rexxc/).  This command accepts a command line like:

	rx 'address "MapEditor" QUIT'

			 |        |
			 |        |
		    Arexx port  Function
		    to send to  to send

If using Blitz2 you can send and receive ARexx commands by using the
RIARexxLib, which is part of the REDBlitzLibs V5.  Please see the
documentation for this library for information about its commands.

See @{" ARexx Commands " link RED_arexxcommands} for a full ARexx command list.

IMPORTANT:
You need RexxMast running (which should be on your system disk inside the
system drawer) before you can use the Map Editors ARexx port.


                               @{b}@{u}Command Keys@{ub}@{uu}

The Map Editor allows you to define upto 40 special commands that can be
executed using the Fkeys and three qualifier keys (CONTROL, SHIFT and ALT)
on the Amiga keyboard.  There are four different types of commands that can
be set up to be executed on the fkeys:


	PORT	- This type of command is a request to send a command to
		  a named ARexx port.  The command syntax is:

			<PORT> <COMMAND> [<PARAMETERS>]

		  E.g. if you have the latest version of Ted running and
		  have ARexx enabled, you could have the command:

			TED_REXX1 ABOUT

		  defined.  This would cause Ted to open its ABOUT
		  requester.

	REXX	- This is a request to send a command to send directly
		  to the REXX port.  You fill out the command with whatever
		  information your request requires.

	SCRIPT	- This is a request to execute an ARexx script.  You
		  specify the scripts name as the command.

	DOS	- This is a request to execute a DOS command.  You specify
		  the full command, e.g:

			Execute >NIL: <NIL: Blitz2:MapOperator

Your Map Editor ARexx commands can be loaded and saved as required by using
the subitems on the 'ARexx/DOS Commands' menu item.  When the Map Editor
first runs it looks for a file mapeditor_arexx in its program directory.
If it finds this file it loads its contents as its default fkey commands.
@ENDNODE RED_arexx

@NODE RED_arexxcommands "ARexx Command Set"
                             @{b}@{u}ARexx Command Set@{ub}@{uu}

  The full ARexx command set for the Map Editor follows, note that unless
otherwise stated the commands do not have any return values.


		@{" QUIT                " link arexx_quit}
		@{" BEQUIET             " link arexx_bequiet}
		@{" BENOISY             " link arexx_benoisy}
		@{" ICONIFY             " link arexx_iconify}
		@{" REDRAWMAP           " link arexx_redrawmap}
		@{" ACTIVATE            " link arexx_activate}
		@{" ABOUT               " link arexx_about}
		@{" VERSION             " link arexx_version}
		@{" LOAD                " link arexx_load}
		@{" GRABMAP             " link arexx_grabmap}
		@{" LOADSHAPE           " link arexx_loadshape}
		@{" LOADPALETTE         " link arexx_loadpalette}
		@{" RETURNMAP           " link arexx_returnmap}
		@{" REQUEST             " link arexx_request}
		@{" EZREQUEST           " link arexx_ezrequest}
		@{" LOADREQUEST         " link arexx_loadrequest}
		@{" SAVEREQUEST         " link arexx_saverequest}
		@{" STRINGREQUEST       " link arexx_stringrequest}
		@{" REMEMBERME          " link arexx_rememberme}
		@{" FORGETME            " link arexx_forgetme}
		@{" ADDMENUITEM         " link arexx_addmenuitem}
		@{" ADDSUBITEM          " link arexx_addsubitem}
		@{" REMAKEMENUS         " link arexx_remakemenus}
		@{" SHAPEREQUEST        " link arexx_shaperequest}
		@{" USEDMAP             " link arexx_usedmap}
		@{" SHAPEBUTTONS        " link arexx_shapebuttons}
		@{" BUFFERREQUEST       " link arexx_bufferrequest}
		@{" DISPLAYINFO         " link arexx_displayinfo}
		@{" SELECTCOORDS        " link arexx_selectcoords}
		@{" NOTIFYME            " link arexx_notifyme}
		@{" RETURNSHAPES        " link arexx_returnshapes}
		@{" PATHREQUEST         " link arexx_pathrequest}
		@{" MULTILOAD           " link arexx_multiload}
		@{" NEXTMULTIFILE       " link arexx_nextmultifile}
		@{" LOCK                " link arexx_lock}
		@{" UNLOCK              " link arexx_unlock}
		@{" WINDOWCENTRE        " link arexx_windowcentre}
		@{" PLOT                " link arexx_plot}
		@{" SELECTREGION        " link arexx_selectregion}
		@{" BLIT                " link arexx_blit}
@ENDNODE RED_arexxcommands

@NODE arexx_quit "ARexx Command: QUIT"
                            @{b}@{u}ARexx Command: QUIT@{ub}@{uu}

Causes the Map Editor to quit.  If the current mode isn't quiet and any of
the current buffers have been modified, the user will be asked to confirm
that they want to quit and loose all changes.  Change to from quiet mode
with the commands @{" BEQUIET " link arexx_bequiet} and @{" BENOISY " link arexx_benoisy}.
@ENDNODE arexx_quit

@NODE arexx_bequiet "ARexx Command: BEQUIET"
                          @{b}@{u}ARexx Command: BEQUIET@{ub}@{uu}

Change the current ARexx mode to quiet.
@ENDNODE arexx_bequiet

@NODE arexx_benoisy "ARexx Command: BENOISY"
                           @{b}@{u}ARexx Command: NOISY@{ub}@{uu}

Change the current ARexx mode to noisy.
@ENDNODE arexx_benoisy

@NODE arexx_iconify "ARexx Command: ICONIFY"
                          @{b}@{u}ARexx Command: ICONIFY@{ub}@{uu}

Causes the Map Editor to go into Iconify mode.  The type of iconify will be
the type they have currently selected in their configuration (window/Tool
Menu).
@ENDNODE arexx_iconify

@NODE arexx_redrawmap "ARexx Command: REDRAWMAP"
                         @{b}@{u}ARexx Command: REDRAWMAP@{ub}@{uu}

Causes the Map Editor to redraw its map display area.  Can be used after a
custom operator has modified the current map.
@ENDNODE arexx_redrawmap

@NODE arexx_activate "ARexx Command: ACTIVATE"
                          @{b}@{u}ARexx Command: ACTIVATE@{ub}@{uu}

Causes the Map Editor to bring its screen to the front, move it vertically
to the top of the display and activate its window.
@ENDNODE arexx_activate

@NODE arexx_about "ARexx Command: ABOUT"
                           @{b}@{u}ARexx Command: ABOUT@{ub}@{uu}

Causes the Map Editor to open ups its about requester.
@ENDNODE arexx_about

@NODE arexx_version "ARexx Command: VERSION"
                          @{b}@{u}ARexx Command: VERSION@{ub}@{uu}

A version string for the Map Editor and its ARexx interface is returned to
the calling program.
@ENDNODE arexx_version

@NODE arexx_load "ARexx Command: LOAD"
                            @{b}@{u}ARexx Command: LOAD@{ub}@{uu}

This command invokes the Map Editor map load function.  If passed a parameter
the Map Editor will attempt to load the file, otherwise the load file
requester will be opened and the user asked to select a map file to load.

Note that this function causes the Map Editor to brings its screen to the
front.
@ENDNODE arexx_load

@NODE arexx_grabmap "ARexx Command: GRABMAP"
                          @{b}@{u}ARexx Command: GRABMAP@{ub}@{uu}

This command should be passed the address of a map description structure.
This structure looks like (in Blitz2 newtype format):

		NEWTYPE .mapeditorinfo
		  width.w
		  height.w
		  bwidth.w
		  bheight.w
		  datatype.b
		  mapnull.b
		  address.l
		  viewx.w			*
		  viewy.w			*
		  name$
		  pad.b[18]			*
		End NEWTYPE

This structure should be filled out and then passed to the Map Editor as an
argument.  The Map Editor will then use this structure to redefine the
current map.  Note that some fields are not used in the GRABMAP command,
these fields are marked with an asterix '*'.
@ENDNODE arexx_grabmap

@NODE arexx_loadshape "ARexx Command: LOADSHAPE"
                         @{b}@{u}ARexx Command: LOADSHAPE@{ub}@{uu}

Invokes the Map Editor's load shape routine.  You pass a shapes file to
load as an argument to this routine.  Optionally you can pass the first
argument to this routine as 'NOREMAP' to force the Map Editor to not remap
the shapes.  If NOREMAP is used, the filename to load should be the second
argument.
@ENDNODE arexx_loadshape

@NODE arexx_loadpalette "ARexx Command: LOADPALETTE"
                        @{b}@{u}ARexx Command: LOADPALETTE@{ub}@{uu}

Invokes the Map Editors load palette routine.  You pass a filename of a
palette in the first argument of this command.
@ENDNODE arexx_loadpalette

@NODE arexx_returnmap "ARexx Command: RETURNMAP"
                         @{b}@{u}ARexx Command: RETURNMAP@{ub}@{uu}

Returns the address of a descriptor block for the current map.  If a map
number is specified in the first argument then the address of the
descriptor block for the specific map is returned.  The map number must be
specified in the range of 0 to 5.

The descriptor block is in the following format:

		NEWTYPE .mapeditor
		  width.w
		  height.w
		  bwidth.w
		  bheight.w
		  datatype.b
		  mapnull.b
		  address.l
		  viewx.w
		  viewy.w
		  name$
		  pad.b[18]
		End NEWTYPE

Example Blitz2 program for getting the map information and using it would
be:

@{b}===== BEGIN =====@{ub}

port.l=RXCreatePort("TestPort")

a$=RXSendCommand("MapEditor","RETURNMAP")

*mapinfo=ValLong(a$)

NPrint "Map width =",*mapinfo\width
NPrint "Map height=",*mapinfo\height

@{b}=====  END  =====@{ub}
@ENDNODE arexx_returnmap

@NODE arexx_request "ARexx Command: REQUEST"
                          @{b}@{u}ARexx Command: REQUEST@{ub}@{uu}

This command invokes the Map Editor's standard requester and asks the user
to answer a question.  It can take 1 or two parameters, the first of which
is the string to display inside the requester, if multiple lines are
required in this string, you should separate each line with a pipe
character ('|').  If your string requires spaces you must enclose it
withing quotations ('"').

The second argument allows you to enter the options that the user can select
from the requester.  They should be in the form of:

		<BUTTON1>|<BUTTON2>|...

Note that you can have as many buttons as required.  Also note that if you
do not suply a button parameter, you will get a default 'Okay' button.

This command returns the button number that the user selected from the
requester.  The far right button of the requester (usually 'Cancel') is
button 0, the other buttons count upwards from 1 from the left of the
requester.

An example that can be typed from the command line is:

	rx 'address "MapEditor" REQUEST "Hello _Hello!|_GoAway"'

@ENDNODE arexx_request

@NODE arexx_ezrequest "ARexx Command: EZREQUEST"
                         @{b}@{u}ARexx Command: EZREQUEST@{ub}@{uu}

This command is the same as the @{" REQUEST " link arexx_request} command except that
the output inside the requester will not be formatted.  Eg. the request
string you provide will not be centered inside the requester.  Everything
else about this command is actually the same as REQUEST.
@ENDNODE arexx_ezrequest

@NODE arexx_loadrequest "ARexx Command: LOADREQUEST"
                        @{b}@{u}ARexx Command: LOADREQUEST@{ub}@{uu}

This command invokes the Map Editors standard load file requester.  You
provide two parameters:

		Title string:	The title string for the file requester.
				E.g. 'Select the file to load...'

		File string:	The default path and filename to put into
				the file requester.  E.g.
					MapEditors:Examples/Test.map

This command returns a string, which will hold the full path to the file
selected, or nothing if the user cancelled the requester.
@ENDNODE arexx_loadrequest

@NODE arexx_saverequest "ARexx Command: SAVEREQUEST"
                        @{b}@{u}ARexx Command: SAVEREQUEST@{ub}@{uu}

This command invokes the Map Editors standard save file requester.  You
provide two parameters:

		Title string:	The title string for the file requester.
				E.g. 'Select the file to save...'

		File string:	The default path and filename to put into
				the file requester.  E.g.
					MapEditors:Examples/Test.map

This command returns a string, which will hold the full path to the file
selected, or nothing if the user cancelled the requester.  If the user
selects a file that already exists they will automatically be asked to
confirm that they wish to overwrite the file.
@ENDNODE arexx_saverequest

@NODE arexx_stringrequest "ARexx Command: STRINGREQUEST"
                       @{b}@{u}ARexx Command: STRINGREQUEST@{ub}@{uu}

This command invokes the Map Editor's standard string requester, into which
the user will be asked to enter a string in response to a question set by
you.  The 'body' part of the string requester (e.g. the question you're
asking the user) should be provided as the first argument to this command.
The second argument for this command should be the default text to appear
inside the string requester.

The string the user entered will be returned to you.  A blank string will
be returned if the user selected Cancel from the requester.
@ENDNODE arexx_stringrequest

@NODE arexx_rememberme "ARexx Command: REMEMBERME"
                           @{b}@{u}ARexx Command: REMEMBERME@{ub}@{uu}

This command asks the Map Editor to remember your port name and send a
'QUITPLEASE' message to it before attempting to quit.  In this way you can
sense when the Map Editor is about to exit and perform any shutdown you need
to do before quitting yourself.

Note that you should issue no more commands to the Map Editors ARexx port
after you receive the QUITPLEASE confirmation.  Just perform whatever
operations are necessary (e.g. saving out temporary data), reply to the
mesage and then quit.  All commands received at the Map Editors ARexx port
during shutdown will be ignored.
@ENDNODE arexx_rememberne

@NODE arexx_forgetme "ARexx Command: FORGETME"
                           @{b}@{u}ARexx Command: FORGETME@{ub}@{uu}

Instructs the Map Editor that your program is quitting and that it should
remove your port from its list of ports.  You need to use this command
before you quit if:


		You have issued a REMEMBERME command to the Map Editor

			OR

		You have menus created on the Map Editors menu strip

			OR

		You are currently owning the Map Editors notify functions

When you issue this command the following will be performed:

	1. If you own the notify function, it will be released and set to
	   unused.

	2. If you requested to shutdown message before the Map Editor
	   quits (using the REMEMBERME command) this request will be removed.

	3. If you have menus defined all of them will be removed and the
	   menu strip will be recreated.

Note that this command is the only current way of removing your menus from
the Map Editors menu strip.
@ENDNODE arexx_forgetme

@NODE arexx_addmenuitem "ARexx Command: ADDMENUITEM"
                        @{b}@{u}ARexx Command: ADDMENUITEM@{ub}@{uu}

Creates a menu item on the Map Editors menu strip.  All menu items created
via ARexx will be placed on a menu titled 'ARexxComm'.  The arguments you
pass to this command are:

	ARexx command:	The ARexx command to send to you when the user
			selects your menu item.  This command may not have
			any spaces in it.

	Item text:	The actual text that will appear on the menu strip
			for your new item.

	Shortcut key:	OPTIONAL shortcut key for your menu item.  Should
			be a one character string.

After adding menu items you must call the @{" REMAKEMENUS " link arexx_remakemenus} command to make
the Map Editor recreate its menu strip.  You should, though, call this
command after adding all the menu items that you require.

See the demo ARexx programs for working examples of this command.
@ENDNODE arexx_addmenuitem

@NODE arexx_addsubitem "ARexx Command: ADDSUBITEM"
                         @{b}@{u}ARexx Command: ADDSUBITEM@{ub}@{uu}

Adds a menu sub item to your last created menu item.  A subitem is a menu
item that branches off of the main menu.  To call this command you must
have already added a menu item by using the @{" ADDMENUITEM " link arexx_addmenuitem} command.

The parameters to be supplied to this command are:

	ARexx command:	The ARexx command to send to your port when the
			user selects your sub item.  This command may not
			have any spaces in it.

	Subitem text:	The actual text that will appear on the menu strip
			for your new sub item.
			Note that if you pass the subitem text as a blank
			string a 'separator' item will be created on the
			submenus.  This allows you to group together items
			on your menus.

After adding menu items you must call the @{" REMAKEMENUS " link arexx_remakemenus} command to make
the Map Editor recreate its menu strip.  You should, though, call this
command after adding all the menu items that you require.

You should note that subitems can not have menu shortcut keys.

See the demo ARexx programs for working examples of this command.
@ENDNODE arexx_addsubitem

@NODE arexx_remakemenus "ARexx Command: REMAKEMENUS"
                        @{b}@{u}ARexx Command: REMAKEMENUS@{ub}@{uu}

Ths command invokes the Map Editors make menu routines.  The end effect of
this is that any MenuItems or SubItems you have added to the Map Editors
menu strip will appear on the actual strip and be selectable to the user.
After calling this command your program must be ready to accept commands at
its message port.
@ENDNODE arexx_remakemenus

@NODE arexx_shaperequest "ARexx Command: SHAPEREQUEST"
                        @{b}@{u}ARexx Command: SHAPEREQUEST@{ub}@{uu}

This command invokes the Map Editors @{" Shape Selector " link RED_shapeselector}.  You can supply
one, two or three parameters to this command.

This first parameter suppled will be used as the title of the Shape
Selectors window.

By default the Shape Selectors window will not have a cancel button,
passing the second argument to this command as 'CANCEL' will cause a cancel
button to be added to the Selector.

The last parameter is the default shape number to be used.

Thus the command mask is:

	SHAPEREQUEST title$[,CANCEL[,shape_num]]

The number of the shape selected by the user is returned to you.  If the
user selected Cancel from the selector, -1 will be returned.
@ENDNODE arexx_shaperequest

@NODE arexx_usedmap "ARexx Command: USEDMAP"
                          @{b}@{u}ARexx Command: USEDMAP@{ub}@{uu}

Returns or sets the currently used map inside the Map Editor.  If a
parameter is passed AND the value of the parameter is in the range of 1 to
6, the current map number will be set to the value and the display will be
redrawn.

This routine returns the current map number being used.  If the map number
is changed during this command (e.g. you passed a valid parameter) the
value returned will be the new map number.
@ENDNODE arexx_usedmap

@NODE arexx_shapebuttons "ARexx Command: SHAPEBUTTONS"
                        @{b}@{u}ARexx Command: SHAPEBUTTONS@{ub}@{uu}

Allows you to set the options that will be used when the shape load
functions on the Map Editor are next called.  This command sets the global
options, e.g. the options will be changed on both ARexx commands of
LOADSHAPE and the user commands that allow shapes to be loaded.

The parameter you supply to this command should be a number from 0 to 31.
This number will be used as a bit mask for all the options held in the Load
Shapes requester.

The bit usage of this value are:

Bit #		Option
  0		Reject different sizes
  1		Reset handles to top left
  2		Overwrite current shapes
  3		Quiet mode
  4		Load at:

See @{" Loading Shapes " link RED_loadingshapes} for more information.
@ENDNODE arexx_shapebuttons

@NODE arexx_bufferrequest "ARexx Command: BUFFERREQUEST"
                       @{b}@{u}ARexx Command: BUFFERREQUEST@{ub}@{uu}

Opens up the Map Editors @{" Buffer Selector " link RED_bufferselector} and asks the user
to select a map.  The map number the user selects will be returned to you,
0 will be returned if they selected cancel from the selector.

This command accepts one parameter: a title for the buffer selector.  E.g.
'Select Map To Copy to'.
@ENDNODE arexx_bufferrequest

@NODE arexx_displayinfo "ARexx Command: DISPLAYINFO"
                        @{b}@{u}ARexx Command: DISPLAYINFO@{ub}@{uu}

Returns a pointer to the Map Editor's internal information structure.  This
structure is defined as a Blitz Basic 2 NewType:

	NEWTYPE.proginfo_type
	  scrname.s         ; Name of the Map Editors screen
	  mapx.w            ; Left position
	  mapy.w            ; Top position
	  viewwidth.w       ; view width in blocks
	  viewheight.w      ; view height in blocks
	  scr_ptr.l         ; Pointer to the map editor screen
	End NEWTYPE

Using this structure your program can retrieve some basic information about
the Map Editors display.  It can also be used to easily find the Map Editors
screen.

Example Blitz2 program for getting the display information and using it
would be:

@{b}===== BEGIN =====@{ub}

port.l=RXCreatePort("TestPort")

a$=RXSendCommand("MapEditor","DISPLAYINFO")

*dispinfo=ValLong(a$)

NPrint "Screen name=",*dispinfo\scrname
NPrint "Screen addr=",*dispinfo\scr_ptr

@{b}=====  END  =====@{ub}
@ENDNODE arexx_displayinfo

@NODE arexx_selectcoords "ARexx Command: SELECTCOORDS"
                        @{b}@{u}ARexx Command: SELECTCOORDS@{ub}@{uu}

This command invokes the Map Editors standard coordinate selection routine.
You should supply a title string to put at the top of the screen whilst the
routine is active.  You will then be returned either a blank string if the
user cancelled the routine or a string containing three values:

		o X coordinate the user selected

		o Y coordinate the user selected

		o The shape number at the coordinates the user selected

The return string will look something like:
		"16 32 0"

meaning that the coordinates selected where 16,32 and the shape at those
coordinates was 0.  If there was no shape at the coordinates, the shape
number entry will hold -1.
@ENDNODE arexx_selectcoords

@NODE arexx_notifyme "ARexx Command: NOTIFYME"
                          @{b}@{u}ARexx Command: NOTIFYME@{ub}@{uu}

This command allows you to take over the Map Editors notify feature.  When
you have this feature the Map Editor will send you messages whenever
important changes occur.  Currently there are four notify message types:

	MapDraw:	A message of type MapDraw is sent whenever the
			display is completely redrawn.

	MapScroll:	A message of type MapScroll is sent whenever the
			display area is scrolled by the user.

	NewScreen:	A message of type NewScreen is sent whenver the
			Map Editor is forced to reopen its screen.  The
			message will be sent after the new screen has
			opened.

	NewNotify:	A message of type NewNotify is sent when another
			ARexx program has requested use of the notify
			function.  When you receive this message you
			can assume that the notify function has already
			been taken over.

You can pass a filter argument to this function to force the Map Editor to
only send you messages of types you understand.  The filter should be
passed as an integer number in the first parameter to this command.

When you receive a notify message, the command you receive will be
'NOTIFY'.  The parameter supplied with the command will be a pointer to a
notify message structure, which currently looks like:

	Newtype.Notifymsg
		typ.w
	End Newtype

The type will be one of:
#mapdraw          =%0000000000000001
#mapscroll        =%0000000000000010
#newscreen        =%0000000000000100
#newnotify        =%0000000000001000
@ENDNODE arexx_notifyme

@NODE arexx_returnshapes "ARexx Command: RETURNSHAPES"
                        @{b}@{u}ARexx Command: RETURNSHAPES@{ub}@{uu}

This command returns a pointer to the Map Editors shape objects.  This
command is for users of Blitz2 who would like to know the address of the
Map Editors shapes.

The return value will be a string which will hold the address of shape 0
inside the Map Editor and the number of the currently used shape.  The two
values will be separated by a space inside the return string.
@ENDNODE arexx_returnshapes

@NODE arexx_pathrequest "ARexx Command: PATHREQUEST"
                        @{b}@{u}ARexx Command: PATHHREQUEST@{ub}@{uu}

Invokes the Map Editors path selector, which is basically a file request
where only directories are shown.  The user is asked to select a path,
which will then be retruend to you.  You have to provide one argument,
which will be used as the title for requester.
@ENDNODE arexx_pathrequest

@NODE arexx_multiload "ARexx Command: MULTILOAD"
                         @{b}@{u}ARexx Command: MULTILOAD@{ub}@{uu}

Invokes the Map Editors multiload requester, which is a file requester from
where the user can select multiple files.  The return value from this
requester will be 0 if the user cancelled the requester.

The files the user selected can be retrieved one at a time with the command
@{" NEXTMULTIFILE " link arexx_nextmultifile}.
@ENDNODE arexx_multiload

@NODE arexx_nextmultifile "ARexx Command: NEXTMULTIFILE"
                       @{b}@{u}ARexx Command: NEXTMULTIFILE@{ub}@{uu}

Returns the next file selected by the user from the multi file requester.
This command may only be called after first calling @{" MULTILOAD " link arexx_multiload}.
@ENDNODE arexx_nextmultifile

@NODE arexx_lock "ARexx Command: LOCK"
                            @{b}@{u}ARexx Command: LOCK@{ub}@{uu}

Locks up the Map Editors screen so that the user can not do any drawing or
select any menus items.  This command should be used before you attempt to
open any windows on the Map Editors screen.

This command must have an associated @{" UNLOCK " link arexx_unlock} command to unlock
the Map Editors functions.
@ENDNODE arexx_lock

@NODE arexx_unlock "ARexx Command: UNLOCK"
                           @{b}@{u}ARexx Command: UNLOCK@{ub}@{uu}

Unlocks the Map Editors screen so that the user can again draw and use the
menu items.
@ENDNODE arexx_unlock

@NODE arexx_windowcentre "ARexx Command: WINDOWCENTRE"
                        @{b}@{u}ARexx Command: WINDOWCENTRE@{ub}@{uu}

This routine can be used to centre a window on the Map Editors screen.  You
supply the width and height of the window you would wish to centre and are
returned a pointer to a structure containing the X and Y position you
should open the window at.

The pointer you are returned will be a pointer to the following structure:

	NEWTYPE.xyinfo
	  x.w                   ;X coordinate
	  y.w                   ;Y coordinate
	  flag.w                ;Flag return value
	End NEWTYPE

The flag return value will be 0 for Ok, or an error value if the
coordinates could not centre.  If the flag is non-zero it is not possible
to fit the window dimensions into the Map Editors screen and an attempt to
open your window will fail.
@ENDNODE arexx_windowcentre

@NODE arexx_plot "ARexx Command: PLOT"
                            @{b}@{u}ARexx Command: PLOT@{ub}@{uu}

Causes the Map Editor to draw a shape onto the current map.  You supply:

		X position to draw the shape at

		Y position to draw the shape at

		The shape number to draw
@ENDNODE arexx_plot

@NODE arexx_selectregion "ARexx Command: SELECTREGION"
                        @{b}@{u}ARexx Command: SELECTREGION@{ub}@{uu}

Invokes the Map Editors standard @{" Range Selector " link RED_rangeselector} which asks the user
to select a region of the map to operate on.  The return from this command
will be a blank string if the user cancelled the function, or a string
containing 4 numbers each separated by one space character, e.g.:


			"23 21 35 44"
			 |  |  |  |
			 |  |  |  Y2
                         |  |  X2
                         |  Y1
			 X1

		(X1,Y1) is the top left corner of the region
		(X2,Y2) is the bottom right corner of the region
@ENDNODE arexx_selectregion

@NODE arexx_blit "ARexx Command: BLIT"
                            @{b}@{u}ARexx Command: BLIT@{ub}@{uu}

This command allows you to blit an image onto the Map Editors view area.
You provide a pointer to the following newtype:

		NEWTYPE.ARexxBlit
		  x1.w
		  y1.w
		  x2.w
		  y2.w
		  ad.l
		  flag.w
		  unremap_cols.w
		End NEWTYPE

@{b}@{u}Field		Description@{ub}@{uu}
x1		X coordinate to blit at
y1		Y coordinate to blit at
x2		if x2<>x1 then this specifies a horizontal x value to blit
		into (e.g. the blit will be done at every block from
		x1 to x2).
y2		if y2<>y1 then this specifies a vertical y value to blit
		into (e.g. the blit will be done at every block from
		y1 to y2).
ad		if <1024 this value is the shape number to blit.
		if >1024 this value is the address of a Blitz2 shape
		object to blit (E.g. ArexxBlit\ad=addr shape(0))
flag		if 1 then the shape to be blitted will be unremapped before
		blitting
unremap_cols	the number of colours to unremap if flag=1.  Should always
		be 4 at present.

If used to just fill a single block with an image, e.g. x1=y1 AND x2=y2,
then this command will return the actual shape number at the coordinates
the blit occured at.

This command can be used to overlay your own imagery over the Map Editors
view area.  It can be used in conjunction with the @{" NOTIFYME " link arexx_notifyme} command
to allow you to know when the view area is redrawn or scrolled.
@ENDNODE arexx_blit

@NODE RED_credits "REDMapEditor v2.5 - Credits"
                       @{b}@{u}REDMapEditor v2.5 - Credits@{ub}@{uu}


                        Written by Stephen McNamara
                                    of
                             Red When Excited


                         (C)1996 Red When Excited

                               Release Date:
                                 25/8/1996

                           Advice: Steven Matty
                                   Steven Green
				   Stuart Gray
				   Martin Kift
				   Jurgen Valks
				   and others???

			 Thanx to: Nico Franco for the ReqTools library
				   Neil O'Rourke for ReqTools support in
				     Blitz
				   Acid Software for Blitz Basic 2
				   Everyone who mailed me about the
				     original RI Map Editor release
				   Blitz-list mailers everywhere

                    Documentation: Stephen McNamara
				   Steven Green
				   Steven Innell

   Original AmigaGuide conversion: Jurgen Valks
@ENDNODE RED_credits

@NODE RWE

                           @{u}@{b}Red When Excited@{uu}@{ub}

  This program is part of the Red When Excited Blitz Support Suite.

Red When Excited are:

			Steven Matty
			Stephen McNamara
			Nigel Hughes
			Steven Innell
			Mike Richards
			Mark Tiffany

@ENDNODE RWE

@NODE RED_multimap "Multiple Maps"
                               @{b}@{u}Multiple Maps@{ub}@{uu}

The REDMapEditor can have upto 6 maps (sometimes refered to as 'buffers'
in this document) loaded at once.  These maps share the same palette and
shapes but can have different dimensions.

Switching between maps is done by using the keys 1 to 6 on the main
keyboard.  If the map you selected does not already exist you will be
prompted to enter the dimensions the new map.  You can also switch between
maps by pressing the <RETURN> key.  This will open up a window with a
button for each map.  If the map is created the button will hold the
filename of the map.  To move to a map, just click on its button.

The current map number is displayed in the in @{" Information Area " link RED_informationarea} part
of the Map Editor's screen.

Any operations like LOAD or SAVE will always be performed on the current
map.
@ENDNODE RED_multimap

@NODE RED_rubthrough "Rub Through"
                                @{b}@{u}Rub Through@{ub}@{uu}

The rub through feature effects all drawing modes within the Map Editor.
If the feature is enabled, all attempts at drawing blocks/groups will cause
sections of another map to 'show' through onto the current map.  Thus
drawing with a block will make the block at the same X/Y position in the
rub through map appear.  Note that each map can have its own rub through
map.

To enable the Rub Through feature you select the 'Rub Through...' menu item
and then choose a map to use.  This feature can be disabled by selecting
the menu item and then selecting 'none' from the window that opens.

The current rub through map number is displayed in the in @{" Information Area " link RED_informationarea}
part of the Map Editor's screen.
@ENDNODE RED_rubthrough

@NODE RED_bufferselector "Buffer Selector"
                              @{b}@{u}Buffer Selector@{ub}@{uu}

This window allows you to select a buffer (map) number to use as the
current map.  It is invoked by pressing <RETURN> on the keyboard.

The selector window contains 7 button gadgets: 6 map buttons and 1 cancel
button.  Selecting Cancel will exit the selector without effecting any
changes, selecting one of the map buttons will exit the selector and change
the current map to the one selected.  If you select a map that does not
already exist the 'New Map' window opens up and asks you to enter the
dimensions of the new map.

The button text for each map will be either:

		 the filename of the map

			OR

		 <EMPTY> if the map doesn't exist

			OR

		 'Unnamed' if the map does not currently have a filename

You can use the keys 1 to 6 to automatically select one of the map buttons
when inside this selector.


                                   @{b}@{u}Operations@{ub}@{uu}

The Buffer Selector can be invoked by other programs via the RED Map
Editor's ARexx port.  Thus they can use this selector as a standard buffer
requester.  An example of this is @{" Demo 4 - Copy Map " link arexx_demo4} which uses the
selector to request a destination map to copy to.

When the Buffer Selector is called in this manner, the title of the
selector's window will be a prompt string.  This string will describe what
you are selecting a buffer for.
@ENDNODE RED_bufferselector

@NODE RED_stencil
                                  @{b}@{u}Stencil@{ub}@{uu}

The stencil allows you to protect shapes from being drawn over.  From the
Stencil Window you select which shapes should be protected.  To protect a
shape click on it with the left mouse button, to unprotect it click with
the right mouse button.  A protected shape has a filled bar underneath it,
an unprotected shape will have an empty box underneath it.

All the currently loaded shapes may not be visible in the window - you can
scroll the window up and down through the shapes using the 'Up' and 'Down'
buttons inside the window.  There are two extra buttons inside the window:

		Clear:	Clear all protected shapes

		Invert:	Swap protected and unprotected over.  E.g. a
			protected shape will become unprotected and vice
			versa.
@ENDNODE RED_stencil

@NODE examplemap "Example Map"
                                @{b}@{u}Example Map@{ub}@{uu}

This drawer holds an example map and the Blitz Basic 2 code needed to
display it onto a bitmap.  Just double click the Blitz Basic source code
file to load the file into Blitz2, then 'Compile and run' it to view its
output.

This demo program was almost entirely created using the Map Editors
@{" Generate Source " link RED_generatesource} feature.  All that was added was the code needed to
load the shapes file and initialise the bitmap to render to.  Press a mouse
button to end the demo program when you've seen enough.

			@{" View Demo Source Code " system "run >NIL: Blitz2:RedHelp/ShowExample FILE=Blitz2:RedHelp/REDMapEditor/Example_Map/Example.bb"}
@ENDNODE examplemap

@NODE blitzmap "Example Blitz Map"
                             @{b}@{u}Example Blitz Map@{ub}@{uu}

The drawer 'Examples/Blitz_Map' holds an example Blitz2 map.  This map is the type
of map that is created by the original Blitz2 Map Editor.  The files in the
drawer are:

		demomap:		The actual map data file
		demomap.gps:		Groups for the demo map
		demomap.mapstuff:	map size information
		blocks.shapes:		actual block graphics
		blocks.palette:		palette file for the blocks

The demo map can be loaded into the Map Editor by selecting the Map Editors
@{" Load Map " link RED_loadingmaps} routine.  You will, though, have to load the palette and blocks
separately using @{" Load Shapes " link RED_loadingshapes} and @{" Load Palette " link RED_loadingpalette}.
@ENDNODE blitzmap

@NODE custommap "Example Custom Map"
                            @{b}@{u}Example Custom Map@{ub}@{uu}

The drawer 'Custom_Map' holds an example custom map.  The actual map data
held in this custom map is the same as the data inside the 'Blitz_Map'
directory except that it is held inside a custom map file.  The files in
this drawer are:

		demomap.rmap:		The actual map data file
		blocks.shapes:		actual block graphics

The file demomap.rmap holds:

		Map size information
		Map blocks
		Palette
		Filename of a shapes file to load:
			'Blitz2:RedHelp/REDMapEditor/Custom_Map/blocks.shapes'

To load this map and all its associated data, just double click the actual
map files icon or select 'Load Map' from the REDMapEditor menustrip and enter
the filename 'Blitz2:RedHelp/REDMapEditor/Custom_Map/demomap.rmap'.
@ENDNODE custommap

@NODE arexx_requirements "ARexx Demo Requirements"
                          @{b}@{u}ARexx Demo Requirements@{ub}@{uu}

To use the demo programs you must have:

		o Map Editor running

		o REXXMAST running

To compile and run the source codes for the demo programs you must have
installed the REDBlitzLibs V5 or higher and Blitz Basic V1.9 or higher.

                                 @{b}@{u}FKey Note@{ub}@{uu}

The Map Editors default functions for fkeys 1 to 4 have been set up to run
the demo programs.  Thus pressing F1 will cause demo program one to run, F2
will run demo program 2 etc.
@ENDNODE arexx_requirements

@NODE arexx_demo1 "Demo 1 - Simple Stuff"
                           @{b}@{u}Demo 1 - Simple Stuff@{ub}@{uu}

This program demonstrates issuing commands to the Map Editors ARexx port.
It uses only a few of the Map Editors commands and attempts to do nothing
complicated.

The source code and executable for this program can be found in the
RedHelp/REDMapEditor folder as Demo1.

			@{"       Run Demo 1        " system "run >NIL: Blitz2:RedHelp/REDMapEditor/Demo1"}
			@{" View Demo 1 Source Code " system "run >NIL: Blitz2:RedHelp/ShowExample FILE=Blitz2:RedHelp/REDMapEditor/Source/Demo1.bb"}
@ENDNODE arexx_demo1

@NODE arexx_demo2 "Demo 2 - Window Demo"
                           @{b}@{u}Demo 2 - Window Demo@{ub}@{uu}

This program demonstrates opening a window on the Map Editors screen.
Opening windows is only allowed when the Map Editor is @{" LOCK " link arexx_lock}'ed up - e.g.
when the user cannot draw or use any menu items.

The demo simple locks the Map Editor and then opens its window on its
screen, after getting the Map Editors screen named using the command @{" DISPLAYINFO " link arexx_displayinfo}.

The source code and executable for this program can be found in the
RedHelp/REDMapEditor folder as Demo2.

			@{"       Run Demo 2        " system "run >NIL: Blitz2:RedHelp/REDMapEditor/Demo2"}
			@{" View Demo 2 Source Code " system "run >NIL: Blitz2:RedHelp/ShowExample FILE=Blitz2:RedHelp/REDMapEditor/Source/Demo2.bb"}
@ENDNODE arexx_demo2

@NODE arexx_demo3 "Demo 3 - Map Loader"
                            @{b}@{u}Demo 3 - Map Loader@{ub}@{uu}

This program demonstrates how to add a loader to the Map Editor.  It uses
the Map Editors ARexx menu commands to add menu items to the Map Editors
menu strip.  The menu items it adds allow you to load map files that have
been packed with Stone Cracker (an excellent packer).

To load a Stone Cracker packed file just select the Load menu item on the
ARexxComms.STCMapLoader menu item.  You will be presented with a file
requester from where you can select a map to load.  Assuming it is a stone
cracked file it will be loaded in, decompressed and then loaded into the
Map Editor.  There is an example map called 'demomap.rmap.stc' inside the
Extras folder - this example can be used to demonstrate the function of
this program.

Note that this program does not require the STC library to run - it uses an
inbuilt decompressor.

This demo proram has a 'Quit' menu item.  Selecting it will cause the
program to end.  The program also uses the Map Editors @{" KILLME " link arexx_killme} command
so that when the Map Editor quits it too will be killed.

The source code and executable for this program can be found in the
RedHelp/REDMapEditor folder as Demo3.

			@{"       Run Demo 3        " system "run >NIL: Blitz2:RedHelp/REDMapEditor/Demo3"}
			@{" View Demo 3 Source Code " system "run >NIL: Blitz2:RedHelp/ShowExample FILE=Blitz2:RedHelp/REDMapEditor/Source/Demo3.bb"}
@ENDNODE arexx_demo3

@NODE arexx_demo4 "Demo 4 - Copy Map"
                             @{b}@{u}Demo 4 - Copy Map@{ub}@{uu}

This program demonstrates adding a simple extra function to the Map Editor.
It also demonstrates how powerful the Map Editors ARexx port is.

The program adds a 'Copy Map...' menu item.  When selected, this item asks
you to select a destination buffer and then copies the current map to it.
The copy is accomplished in only a few instructions to the Map Editor -
have a look at the source code to see how its done.

Note that this program can only be quitted by quitting the Map Editor.

The source code and executable for this program can be found in the
RedHelp/REDMapEditor folder as Demo4.

			@{"       Run Demo 4        " system "run >NIL: Blitz2:RedHelp/REDMapEditor/Demo4"}
			@{" View Demo 4 Source Code " system "run >NIL: Blitz2:RedHelp/ShowExample FILE=Blitz2:RedHelp/REDMapEditor/Source/Demo4.bb"}
@ENDNODE arexx_demo4

@NODE RED_loadingpalettes "Loading A Palette"
                             @{b}@{u}Loading A Palette@{ub}@{uu}

Selecting the 'Load Palette' menu item will cause a file requester to open
in which you should select a palette file to load in.  The file you select
can be any standard IFF file that contains a CMAP chunk, or just a file on
its own that contains a CMAP chunk.

Loading a palette allows you to see your blocks as they are meant to be
viewed - in the correct colours.  This obviously makes drawing with them
easier and helps you to envisage what the final map will look like.  Once a
palette is loaded you will also be able to use the ReMap option which will
allow you to view your blocks in the correct colour and view the Map
Editors display in the correct colours.
@ENDNODE RED_loadingpalettes

@NODE RED_onlinehelp "Context Sensitive Help"
                          @{b}@{u}Context Sensitive Help@{ub}@{uu}

The REDMapEditor has a help system built in.  This help system allows you
to get immediate help for all of the menu items and most of the windows
inside the REDMapEditor.  Note that the help system requires RexxMast to
be running BEFORE the REDMapEditor is itself run.  If you wish to use the
help system you should consider adding the line

		sys:System/RexxMast >NIL:

to your user-startup file.  This way RexxMast will always be running and
the online help system will always be available.


                          @{b}@{u}How To Invoke Menu Help@{ub}@{uu}

To get help on any menu item, follow the following steps:


		1. Hold the right mouse button down to show the menu titles
		   at the top of the screen.

		2. Whilst holding the right mouse button, move to the menu
		   item you require help for.

		3. Whilst holding the right mouse button, press the HELP
		   key.

		4. Release the right mouse button.

The REDMapEditor AmigaGuide file will now open up on your Workbench
screen at the correct location for the menu item.  If help is no
appropriate for the menu item you selected, nothing will happen.


                         @{b}@{u}How To Invoke Window Help@{ub}@{uu}

To get help on a window just press the HELP key whilst the window is
active.  Note that there must be no gadgets activated when you press HELP
(e.g. the cursor cannot be within a string gadget).

The REDMapEditor AmigaGuide file will now open up on your Workbench
screen at the correct location for the menu item.  If help is no
appropriate for the window you selected, nothing will happen.

When the main REDMapEditor window is active you can press help to open up
the AmigaGuide help document at the @{" Screen Layout " link RED_screenlayout} section.

By default the help window will open up on your Workbench screen.  If,
though, you have chosen to make your REDMapEditor screen public (see
@{" Configuration " link RED_configuration}) then the help window will appear on the REDMapEditor
screen.
@ENDNODE RED_onelinehelp

@NODE RED_startupfolder "Startup Programs Folder"
                      @{b}@{u}Startup Programs Folder@{ub}@{uu}

REDMapEditor can automatically launch programs for you when it first runs.
These programs are kept, by default, in the Blitz2:Startup/REDMapEditor
directory.  When the REDMapEditor first runs, it scans this directory and
runs all files that match the pattern "#?~(#?.info)".

The Startup directory should contain any programs that you require to run
whenever you run the REDMapEditor.  These feature will mainly be of use to
people writing ARexx programs that intergrate into REDMapEditor.  These
ARexx programs can be run every time the REDMapEditor loads.

The path for the Startup folder can be changed within the @{" Configuration " link RED_configuration}
You can activate/deactive the Startup Folder feature from Configuration.

The programs inside the Startup folder can define three tooltypes to
control how they are run:

	DONOTWAIT	REDMapEditor 'launches' the program and then
			continues executing without waiting for the program
			to terminate.

	WAIT		REDMapEditor waits for the amount of seconds
			requested in the tooltype.
			E.g. WAIT=100 will cause a wait of 100 seconds.

	DONOTRUN	REDMapEditor will not attempt to run this program.
			This allows you to disable to launching of
			different programs.

Note that the tooltypes are not case sensitive.
If the program files inside the directory do not have an icon, the
following tooltypes are assumed:

	DONOTWAIT
	WAIT=0

Before programs are executed the REDMapEditor sets up the following
environment variables which your program can access:

	MAPEDITORSCREEN	The screen name of the REDMapEditor.
	MAPEDITORPORT	The ARexx port name (if any) for the REDMapEditor.

@{b}***********@{ub} Do NOT put the REDMapEditor executable inside this folder, otherwise
@{b}! WARNING !@{ub} you will have infinite copies of REDMapEditor loading ad infinitum
@{b}***********@{ub}
@ENDNODE RED_startupfolder
