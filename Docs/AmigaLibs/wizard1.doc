TABLE OF CONTENTS

wizard.library/WZ_AllocWindowHandleA
wizard.library/WZ_CloseSurface
wizard.library/WZ_CloseWindow
wizard.library/WZ_CreateImageBitMap
wizard.library/WZ_CreateWindowObjA
wizard.library/WZ_DeleteImageBitMap
wizard.library/WZ_DrawVImageA
wizard.library/WZ_EasyRequestArgs
wizard.library/WZ_FreeWindowHandle
wizard.library/WZ_GadgetConfig
wizard.library/WZ_GadgetHelp
wizard.library/WZ_GadgetHelpMsg
wizard.library/WZ_GadgetKey
wizard.library/WZ_GadgetObjectname
wizard.library/WZ_GetDataAddress
wizard.library/WZ_GetNode
wizard.library/WZ_InitEasyStruct
wizard.library/WZ_InitNodeA
wizard.library/WZ_InitNodeEntryA
wizard.library/WZ_ListCount
wizard.library/WZ_LockWindow
wizard.library/WZ_LockWindows
wizard.library/WZ_MenuConfig
wizard.library/WZ_MenuHelp
wizard.library/WZ_MenuObjectname
wizard.library/WZ_NewObjectA
wizard.library/WZ_ObjectID
wizard.library/WZ_OpenSurfaceA
wizard.library/WZ_OpenWindowA
wizard.library/WZ_SnapShotA
wizard.library/WZ_UnlockWindow
wizard.library/WZ_UnlockWindows

wizard.library/WZ_AllocWindowHandleA

NAME
	WZ_AllocWindowHandleA -- Creates a new WizardWindowHandle
	WZ_AllocWindowHandle  -- variable arguments version for higher programming languages

SYNOPSIS
	winhandle = WZ_AllocWindowHandleA(
			screen, user_sizeof, surface, tags )
	D0		D0	D1		A0	A1
	
	struct WizardWindowHandle *WZ_AllocWindowHandleA(
		struct Screen *, ULONG, APTR, struct TagItem *);
	
	winhandle = WZ_AllocWindowHandle(
			screen, user_sizeof, surface, firstTag, ... )
	
	struct WizardWindowHandle *WZ_AllocWindowHandle(
		struct Screen *, ULONG, APTR, Tag, ...);
	

FUNCTION
	Allocates the memory for a WizardWindowHandle which will then be
	initialised.

WARNING
	This structure contains private fields used by StormWizard's routines.
	
ARGUMENTS
	screen		- a pointer to the Screen structure of the screen
			  the window should appear on
	user_sizeof	- the size in bytes of a private structure used to
			  hold program-specific data belonging to the window
			  (see WZ_WindowUserStruct()).
	surface		- the value returned by WZ_OpenSurface()
	tags
	  WWH_StackSize, ULONG
	  	Size of the stack used for the layout process (defaults to
	  	8192).
RESULTS
	winhandle - a pointer to a WizardWindowHandle structure or NULL
		    if an error occurred.
	  Window - a pointer to an Intuition Window structure, if the window
	  	    is already open, otherwise NULL.
	  MenuStrip - a pointer to the window's MenuStrip or NULL if the
	  	      window has no menus.
	  DrawInfo - will be initialised when the structure is created.
	  VisualInfo - will be initialised when the structure is created.
	  ScreenTitle - this field should contain the window's screen title
	  		used when WZ_OpenWindowTags() is called to open the
	  		window. When the structure this field will be filled
	  		with "-1". A call to WZ_CreateWindowObj() will set
	  		it to a useful value.
	  Objects - A MinList structure containing BOOPSI objects that are
	  		to be removed when the WizardHandle is released using
	  		intuition.library/DisposeObject(). It is possible to
	  		insert own objects.
	  Rootgadget - a pointer to a Group gadget which places its members
	  	       within the window and initialises them for the layout
	  	       process.
	  	       There is ALWAYS a root gadget when all objects
	  	       belonging to a window were created. The gadget is at
	  	       the same time the start of the gadget list!
	  RootTopGadget
	  RootLeftGadget
	  RootBottomGadget
	  RootRightGadget
	  	These fields are currently unused and should be initialised
	  	to Null.
	  UserStruct - a pointer to a private structure which has been
	  	       initialised with zeros. If the function was called
	  	       with a user_sizeof argument of zero, this pointer
	  	       contains zero and must not be referred as such!
	  	       However you can in this case use the field to keep
	  	       custom values!
	
SEE ALSO
	WZ_CreateWindowObjA(), WZ_OpenWindowA(), WZ_CloseWindow(),
	WZ_FreeWindowHandle()

wizard.library/WZ_CloseSurface

NAME
	WZ_CloseSurface -- Closes a surface description
	
SYNOPSIS
	WZ_CloseSurface(surface)
			A0
	
	VOID	WZ_CloseSurface(APTR);

FUNCTION
	This function closes a surface description and releases the
	memory used.
	
WARNING
	 If there are still any WindowHandles or windows open these will
	 be closed and removed. All resources will not be accessible any
	 longer.

ARGUMENTS
	surface	- the value returned by WZ_OpenSurface()

SEE ALSO
	WZ_OpenSurfaceA(),WZ_SnapShotA()

wizard.library/WZ_CloseWindow

NAME
	WZ_CloseWindow -- Closes a window
	
SYNOPSIS
	WZ_CloseWindow(winhandle)
			A0
	
	VOID	WZ_CloseWindow(struct WizardWindowHandle *);

FUNCTION
	Closes a window similar to the Intuition function.

WARNING
	Do NOT use the Intuition function!

ARGUMENTS
	winhandle	- a WizardWindowHandle returned by WZ_AllocWindowHandle()

SEE ALSO
	WZ_OpenWindowA()

wizard.library/WZ_CreateImageBitMap

NAME
	WZ_CreateImageBitMap -- Creates the BitMap of an image
	
SYNOPSIS
	bm = WZ_CreateImageBitMap(transpen, drinfo, newimage, screen, pens)
										D0				A0			A1			A2		A3
	
	struct BitMap *WZ_CreateImageBitMap(UWORD, struct DrawInfo *,
			struct WizardNewImage *, struct Screen *, UBYTE *);

FUNCTION
	Obtains pens, allocates a new BitMap and remaps the image according
	to the pens allocated.

WARNING
	The screen and the PenTable created must not be removed as long as
	the Image's BitMap exists!

ARGUMENTS
	transpen - the color used to remap colour register zero in the image.
	drinfo	- the screen's DrawInfo structure
	screen	- the screen the Image should be displayed on
	pens		- a buffer of 256 bytes which will contain the color
				  registers used

RESULTS
	bm			- A BitMap initialized with the image data. Its dimension and
				  its colour depth can be obtained using the WizardNewImage
				  structure.

SEE ALSO
	WZ_DeleteImageBitMap(), WZ_GetDataAddress()


wizard.library/WZ_CreateWindowObjA

NAME
	WZ_CreateWindowObjA -- Create window objects
	WZ_CreateWindowObj  -- variable arguments version for higher programming languages
	
SYNOPSIS
	newwin = WZ_CreateWindowObjA(winhandle, id, tags)
	D0				A0	D0	A1
	
	struct NewWindow *WZ_CreateWindowObjA
		(ULONG, struct WizardWindowHandle *,struct TagItem *);

	newwin = WZ_CreateWindowObj(winhandle, id, firstTag, ... )
	
	struct NewWindow *WZ_CreateWindowObj
		(ULONG, struct WizardWindowHandle *,Tag, ... );

FUNCTION
	This function will create all important window objects such as
	Gadget, Menu and Notify objects.

WARNING
	You can NOT control the object's description.

ARGUMENTS
	id		- the ID of the window to be created
	winhandle	- a WizardWindowHandle returned by a call to
			  WZ_AllocWindowHandle()
	tags		. TagItems, e.g. to pass the gadget array
	

	  WWH_GadgetArray - a pointer to an array that will be filled with
	  			with the created gadgets according to their
	  			Gadget ID. This tag is always required!
	  WWH_GadgetArraySize - the array's size in bytes. This tag can be
	  			left off.
	  WWH_PreviousGadget - if specified, the created gadgets will be
	  			inserted behind this gadget
	  WWH_StringHook - a pointer to a StringHook structure which will
	  			be passed to all string gadgets in the
	  			window. Refer to the "strgclass" description
	  			for details!

RESULTS
	newwin		- A pointer to an initialized NewWindow structure or
			  NULL if an error occurred. The structure will be
			  initialised as follows:
	  LeftEdge,
	  TopEdge,
	  Width,
	  Height 	- taken from the surface description. Can be fixed
	  		  with WZSnapShotA()
	  DetailPen,
	  BlockPen 	- default to values unequal zero
	  IDCMPFlags 	- taken from the surface description
	  Flags 	- also taken from the surface description
	  FirstGadget 	- the window's root gadget
	  CheckMark 	- NULL
	  Title 	- the string as specified in StormWizard
	  Screen 	- the screen structure passed to WZ_AllocWindowHandle()
	  BitMap 	- NULL
	  MinWidth,
	  MinHeight 	- minimum dimensions the window may have. These
		  	  values will be continuously recalculated.
	  MaxWidth,
	  MaxHeight 	- default to values unequal zero
	  Type 		- the CUSTOMSCREEN value
	
SEE ALSO
	WZ_AllocWindowHandle(), WZ_FreeWindowHandle(), WZ_OpenWindow(),
	WZ_CloseWindow()

wizard.library/WZ_DeleteImageBitMap

NAME
	WZ_DeleteImageBitMap -- Removes the BitMap of an image
	
SYNOPSIS
	WZ_DeleteImageBitMap(bm, newimage, screen, pens)
								A0		A1			A2			A3
	
	void WZ_DeleteImageBitMap(struct BitMap *,
					struct WizardNewImage *, struct Screen *, UBYTE *);

FUNCTION
	Releases the BitMap created and the used pens for an image.

WARNING
	The screen and the PenTable MUST belong to this image!

ARGUMENTS
	bm			- BitMap to be released
	newimage	- the BitMap's NewImage structure
	screen	- the screen the image was created for
	pens		- a buffer of 256 bytes containing the colour
				  registers used for the BitMap

SEE ALSO
	WZ_CreateImageBitMap(), WZ_GetDataAddress()


wizard.library/WZ_DrawVImageA

NAME
	WZ_DrawVImageA -- Draws vector images
	WZ_DrawVImage  -- variable arguments version for higher programming languages

	
SYNOPSIS
	success	= WZ_DrawVImageA
			(vimage, x, y, w, h, type, rp, drinfo, tags)
	D0		A0	D0 D1 D2 D3 D4 	D5 	D6	A1	
	
	BOOL	WZ_DrawVImageA(
			struct WizardVImage *,
			WORD, WORD, WORD, WORD, UWORD, struct RastPort *,
			struct DrawInfo *, struct TagItem *);

	success	= WZ_DrawVImage
		(vimage, x, y, w, h, type, rp, drinfo, firstTag, ... )
	
	BOOL	WZ_DrawVImage(
			struct WizardVImage *,
			WORD, WORD, WORD, WORD, UWORD, struct RastPort *,
			struct DrawInfo *, Tag, ... );

FUNCTION
	This function draws a vector image using the parameters supplied.
	This makes it possible to realise Turtle-like graphic images.

WARNING
	Parts of the definition of a vector image contain references to
	other vector images. This recursive behaviour uses the stack
	extensively!

ARGUMENTS
	vimage	- a pointer to the WizardVImage structure which is
		  defined as follows:
	  flags
	    WVIF_MinWidth - if the width passed is smaller than the width
	          specified in the WizardVImage structure, the image will
	          normally not be drawn. In such cases this flag forces
	          the width passed to the minimum value specified. The
	          X position will be subtracted by the difference between
	          these two values divided by two.
	    WVIF_MinHeight - Similar to WVIF_MinWidth, but for the height.
		  If this flag is not set and the height is too small,
		  WZ_DrawVImage() will fail.
	    WVIF_AreaInit - this flag is not used as of now.
	    WVIF_Recursion - this flag indicates recursive behaviour of
		  the vector image. At every call the value in
		  VImage->Counter will be decreased by one. If it ever
		  reaches zero, the recursion will be aborted. The flag
		  must only be used if the vector image is used by a
		  single task.
	  Counter - if the WVIF_Recursion flag is set this value specifies
		  the maximum recursion depth. If you wish the image to be
		  called a second time, specify a 2 here.
	  MinWidth - This is the minimum value for the WZ_DrawVImage() call
	  	  if the WVIF_MinWidth flag is specified.
	  MinHeight - This is the minimum value for the WZ_DrawVImage() call
	  	  if the WVIF_MinHeight flag is specified.
	  RelCoords - This pointer allows you to specify co-ordinates relative
	  	  to any position you like. Create a table consisting of UWORD
	  	  pairs with the first entry being the relative X and the
	  	  second entry being the relative Y value. Terminate the table
	  	  with a combination of two zero bytes.
	  	  The first entry in this table is referenced as the base
	  	  position no. 4. Entries may range from 0 to 65535. Predefined
	  	  base positions are:
	  	  0 - upper-left edge
	  	  1 - upper-right edge
	  	  2 - lower-right edge
	  	  3 - lower-left edge
	  	  If you set this pointer to zero, you are limited to these
	  	  three base positions.
	  Images - here you can specify a series of pointers. The pointer used
	  	  will then be determined using the type field. If type is 0,
	  	  the WizardVImage->Images pointer is used directly, otherwise
	  	  one of the following pointers.
	  	  This implies that the length of the structure can NOT be
	  	  determined!
	x	- the X position for the leftmost part of the image
	y	- the Y position for the uppermost part of the image
	w	- the image width
	h	- the image height
	type	- the type of the image to be drawn
	rp	- a pointer to the RastPort structure to be used
	drinfo	- a pointer to a DrawInfo structure if DrawInfo colors are
		  used or text functions are used.
	tags	- the following tags are defined:

	  WVIA_Text (V37), STRPTR
	  	The address of a string terminated with a zero byte or a
	  	carriage return (for text commands)
	  WVIA_TextFont (V37), struct TextFont *
	   	The TextFont structure to be used for text functions.
	   	Defaults to the DrawInfo structure's font.
	  WVIA_TextPlace (V37), ULONG
	  	Describes how the text will be aligned: use one of the
	  	constants WZRDPLACE_LEFT, WZRDPLACE_CENTER, WZRDPLACE_RIGHT
	  	to align the text appropriately. Defaults to WZRDPLACE_CENTER.
	  WVIA_TextPen (V37), UWORD
	  	This tag is not used yet. You currently have to set the
	  	text colour yourself with an appropriate function call.
	  WVIA_TextStyles (V37), ULONG
	  	This tag is not used yet. You currently have to set the
	  	text style yourself with an appropriate function call.
	  WVIA_TextHighlights (V37), ULONG
	  	This tag is not used yet.
	  WVIA_TextImages (V37), BOOL
	  	Set this to TRUE if you wish to enable images with the
	  	dimension of a text output. A value of FALSE disables this
	  	image type. Defaults to TRUE.
	  WVIA_TagImage (V37), struct WizardVImage *
		This tag allows you to specify a variable definition of the
		vector image.
	  WVIA_TagImageCode (V37), UWORD
	  	Specifies the type used for the image specified with the
	  	WVIA_TagImage tag. Defaults to zero.
	  WVIA_ImageCode (V37), UWORD
	  	If you previously specified the type for a fixed reference
	  	to another vector image with "-1" you can specify its real
	  	type here. If in such cases this tag is left off, the image
	  	reference will be ignored. This tag defaults to "-1".
	  WVIA_Color0-7 (V37), UWORD
	  	This tag contains colours which will be selectable using the
	  	WVICMD_TAGCOLOR command. DrawInfo colours will be selectable,
		too.
	  WVIA_TPoint0-7 (V37), struct TPoint
	  	Using this tag you can include calculated positions into
	  	the VImage definition. The default structure used contains
	  	a value of X<<16+Y.
	  WVIA_AreaPtrn (V37), APTR
	  	A pointer to a grid to be used for all following area-fill
	  	commands (WVICMD_RECTFILL). The height is specified directly
	  	at the WVICMD_SETAFPT call.
	  WVIA_TmpRas (V37), struct TmpRas *
	  	Here you need to specify an initialised TmpRas structure
	  	which will be fixed in the RastPort when the WVICMD_AREAINIT
	  	command is issued.
	  WVIA_BitMapWidth (V37), UWORD
	  	The width of the BitMap passed in special tags. Defaults to
	  	zero.
	  WVIA_BitMapHeight (V37), UWORD
	  	The height of the BitMap passed in special tags. Defaults to
	  	zero.
	  WVIA_BitMap0-7 (V37), struct BitMap *
	  	Bitmaps for DrawVImage() calls.
	  WVIA_PureText (V37), BOOL
	  	Set this to TRUE if an underscore character should instruct
	  	the wizard.library to render the following character under-
	  	lined. A value of FALSE will render underscores as normal
	  	characters. Defaults to TRUE.
	
	Commands for VImage definitions:
	--------------------------------
	
	All commands and the memory size used by following arguments are
	of type LONG!
	
	WVICMD_END :
		Identifies the end of a definition.
	WVICMD_COLOR : Pen;
		Sets the Rastport's APen to the following pen which must be
		within the range from 0 to 255 or a WZRD_... colour. DrawInfo
		colors are selectable, too.
	WVICMD_COLOR2 : Pen;
		Sets the Rastport's BPen to the following pen. The same rules
		as for WVICMD_COLOR apply. This tag is rarely used.
	WVICMD_MOVE : BPkt, XOffset, YOffset;
		Moves the graphic cursor to the coordinates XOffset and
		YOffset which are interpreted relative to the specified
		base position.
	WVICMD_DRAW : BPkt, XOffset, YOffset, Mask;
		Draws a line from the current graphic cursor position to
		the specified position. XOffset and YOffset are interpreted
		as under WVICMD_MOVE, Mask specifies the pattern to be used
		for the line. The specified APen will be used.
	WVICMD_RECTFILL : BPkt, XOffset, YOffset;
		Draws a filled rectangle from the current graphic cursor
		position to the specified position. The rectangle is filled
		with the APen colour. For this operation, the graphic cursor needs
		to be positioned on the upper left edge of the rectangle. The
		coordinates passed specify its lower right edge.
	WVICMD_WRITEPIXEL : BPkt, XOffset, YOffset;
		Draws a single coloured pixel at the coordinates indicated by
		XOffset and YOffset (once again, relative to the base position).
		APen is used for the colour.
	WVICMD_IMAGE : BPKT, XOffset, YOffset, Type , VImage;
		Performs a recursive VImage call. The upper left edge must have
		been previously specified using the WVICMD_MOVE command. The
		lower right edge is specified by XOffset and YOffset as well as
		BPkt. Type specifies the type to be used, a "-1" indicates that
		the type should be taken from the WVIA_ImageCode tag.
		VImage is a pointer to the vector image to be drawn.
	WVICMD_TEXT :
		Renders the text specified with the WVIA_Text tag at the
		current position with the current style and colour.
	WVICMD_SETDRMD :
		Sets the RastPort's DrawMode. It defaults to RP_JAM1.
	WVICMD_TEXTIMAGE : HBorder, VBorder, Type,VImage;
		If a text is drawn, it has a certain position and certain
		dimensions. If you use this command these values are used to
		display an image, however its dimensions will be increased by
		the HBorder and VBorder values. The image will be displayed
		using the specified type and image.
		This type of images can be disabled for the current vector
		image using the WVIA_TextImages tag.
	WVICMD_TEXTMOVE : FontSizeFak, BaseFak, LengthFak,XOffset,YOffset;
		This command moves the cursor relative to the current position.
		The length of the maximum possible text output will be divided by
		LengthFak and added to the current X-position. TextFont->Baseline
		will be divided by BasekFak and added to the current Y-position.
		The font height is divided by FontSizeFak and added to the X
		position as well. You can specify a zero for any argument to
		disable it.
	WVICMD_TAGCOLOR : Col;
		Col specifies the WVIA_Color tag whose colour is to be set. To set
		WVIA_Color1's colour Col must be a '1'.
	WVICMD_TEXTPLACE: BPKT, XOffset, YOffset;
		This command allows you to comfortably position vertically
		centred text within a virtual rectangle. Using the WVIA_Textplace
		tag the text can be placed left-bound, right-bound and centred.
		The rectangle 's upper left edge is taken from the cursor's current
		position whereas the lower-right position must be specified using
		the XOffset and YOffset parameters which are interpreted relative
		to BPKT. Nothing will be written into the RastPort!
	WVICMD_SETAFPT : AreaPtSz, AreaPtrn;
		This command allows you to use arbitrary patterns for fill commands.
		If AreaPtrn is passed with a value of -1L, the WVIA_AreaPtrn tag
		must contain the correct raster address. The raster dimension is
		calculated using the formula 2^AreaPtSz.
	WVICMD_SNAPCURSOR : BPkt;
		Writes the cursor's current X/Y positions back to the specified base
		position. Possible values range from 0 to 15.
	WVICMD_SNAPX : BPkt;
		Writes the cursor's current X position back to the specified base
		position.
	WVICMD_SNAPY : BPkt;
		Writes the cursor's current Y position back to the specified base
		position.
	WVICMD_TAGMOVE : TPoint;
		Sets the cursor to a position specified by a WVIA_TPoint tag. TPoint
		determines the number of the tag to be used.
	WVICMD_TAGIMAGE :  BPKT, XOffset, YOffset, Type, VImageTags;
		Refer to WVICMD_IMAGE how position and dimension are calculated.
		The image address is taken from the WVIA_TagImage tag. VImageTags
		contains the tags for the WZ_DrawVImage() call. If this value is
		-1L the current tags are used. The type for the function call is
		referenced from the WVIA_TagImageCode tag.
	WVICMD_BITMAP_TO_RP : BPKT, XOffset, YOffset, Map;
		This command allows you to blit Bitmaps into the RastPort. BPkt,
		XOffset and YOffset form the upper-left edge. Map must contain the
		number of the WVIA_BitMap tag. The Bitmap's proportions must be
		specified using the WVIA_BitMapWidth and WVIA_BitMapHeight tags.
	WVICMD_FILLBORDER : BPKT, XOffset, YOffset, HBorder, VBorder;
		This command draws a border using the current APen. The function
		draws from the upper-left edge of the vector image to its
		lower-right edge. The area from the current cursor position to
		the specified base position will not be touched. Base position
		(BPkt), XOffset and YOffset specify the lower-right edge whose
		contents will NOT be overdrawn.
		Using HBorder and VBorder you can reduce the vector image's
		dimensions within the routine.
	WVICMD_Beep :
		calls intuition.library's DisplayBeep() with a Screen value of
		zero.
	WVICMD_AREAINIT :
		Initializes the RastPort for usage of area functions. The
		WVIA_TmpRas tag must contain a pointer to an initialized TmpRas
		structure.
	WVICMD_AREAMOVE : BPKT, XOffset, YOffset;
		Moves the cursor for area functions to the position specified by
		XOffset and YOffset which are interpreted relative to the base
		position BPkt. This command can be followed by up to three calls
		to the WVICMD_AREADRAW command.
	WVICMD_AREADRAW : BPKT, XOffset, YOffset;
		Draws a border line to the specified position (XOffset and YOffset,
		interpreted relative to BPkt). Do not use this command more than
		three times!
	WVICMD_AREAEND :
		Draws a filled image into the RastPort. The current APen and the
		current raster image will be used. After this command you can use
		WVICMD_AREAMOVE and WVIA_AREADRAW again.
		
RESULTS
	success	- will always be TRUE.

wizard.library/WZ_EasyRequestArgs

NAME
	WZ_EasyRequestArgs -- creates an easy-to-handle requester
	
SYNOPSIS
	RESULTS	= WZ_EasyRequestArgs(surface, window, id, args)
	D0				A0	A1	D0 A2
	
	LONG	WZ_EasyRequestArgs(
			APTR, struct Window *, ULONG, void *);

FUNCTION
	Similar to intuition.library's EasyRequestArgsA function.
	Keeps care of keyboard input.

WARNING
	The arguments passed can not be verified.
	The requester can only be closed if a gadget is selected using either
	mouse or keyboard. The Userport is not locked against input, so take
	care to lock the window yourself!

ARGUMENTS
	surface	- The value returned by a call to WZ_OpenSurface()
	window	- The address of the Window structure to be locked
	id	- The requester ID as assigned by StormWizard
	args	- The address of the list of arguments

RESULTS
	RESULTS	- The number of the gadget that was used to leave the
		  requester or -1 if the requester could not be displayed
		  due to lack of memory.

SEE ALSO
	WZ_InitEasyStruct()

wizard.library/WZ_FreeWindowHandle

NAME
	WZ_FreeWindowHandle -- Releases a WizardWindowHandle
	
SYNOPSIS
	WZ_FreeWindowHandle(winhandle)
	
	
	VOID	WZ_FreeWindow(struct WizardWindowHandle *);

FUNCTION
	Closes an eventually opened window, releases all objects
	associated with a window and its memory.

ARGUMENTS
	winhandle	- A WizardWindowHandle as returned by
			  WZ_AllocWindowHandle

SEE ALSO
	WZ_AllocWindowHandleA()

wizard.library/WZ_GadgetConfig

NAME
	WZ_GadgetConfig -- Obtains a gadget's config string
	
SYNOPSIS
	string	= WZ_GadgetConfig(winhandle, gadget)
	D0			A0	A1
	
	STRPTR	WZ_GadgetConfig(
			struct WizardWindowHandle *, struct Gadget *);

FUNCTION
	Obtains a gadget's configuration string as specified with
	StormWizard.

ARGUMENTS
	winhandle	- a pointer to a WizardWindowHandle
	gadget		- a pointer to a Wizard gadget

RESULTS
	string		- a string address or NULL if an error occurred

SEE ALSO
	WZ_MenuConfig(), WZ_GadgetHelp()

wizard.library/WZ_GadgetHelp

NAME
	WZ_GadgetHelp -- Obtains a gadget's help string
	
SYNOPSIS
	string	= WZ_GadgetHelp(winhandle, iaddress)
	D0			A0	A1
	
	STRPTR	WZ_GadgetHelp(struct WizardWindowHandle *, APTR);

FUNCTION
	Obtains a gadget's help string as specified with StormWizard.
	If the surface description was opened with the SFH_Catalog tag,
	the translated string will be returned.
	
WARNING
	If the gadget passed is not found as a Window within the
	WizardWindowHandle structure the function assumes that it is a
	wizard.library gadget without further verification.
	
ARGUMENTS
	winhandle	- a pointer to a WizardWindowHandle
	iaddress	- a pointer to a Wizard gadget or an opened window

RESULTS
	string		- a string address or NULL if an error occurred

SEE ALSO
	WZ_MenuHelp(), WZ_GadgetConfig()

wizard.library/WZ_GadgetHelpMsg

NAME
	WZ_GadgetHelpMsg -- Obtains a gadget's help message
	
SYNOPSIS
	succes	= WZ_GadgetHelpMsg(winhandle, winhaddress, iaddress
					mousex, mousey, flags)
	D0				A0	A1 	A2
					D0	D1	D2
	
	BOOL	WZ_GadgetHelpMsg(struct WizardWindowHandle *,
				struct WizardWindowHandle **,
				APTR *, WORD, WORD, UWORD);

FUNCTION
	This function was written to allow V37 and V38 of the AmigaOS
	to receive GadgetHelp messages. Under V39 this function can be
	optionally used to receive Intuiton messages.

WARNING
	In later versions iaddress will be able to return objects which
	on the one hand located at the current mouse pointer position and
	belong to the surface description but which on the other hand do
	not belong to the active window. This includes windows themselves,
	too.

ARGUMENTS
	winhandle	- a pointer to a WizardWindowHandle which reported
			  mouse movement
	winhaddress	- a pointer to a memory area of four bytes which is
			  used by the function to return a second value
	iaddress	- a pointer to a memory area of four bytes which is
			  used by the function to return a third value
	mousex		- the mouse's X position
	mousey		- the mouse's Y position
	flags		- the following flags are currently defined:
	
	  WGHF_IgnoreOS	   - Enables usage of this function under OS 3.0+
	                     (see function description)
	  WGHF_FullControl - If this flag is set the function will also
	                     return messages from other windows. This flag
	                     does not yet work under V37!
			
RESULTS
	success		- if the mouse's position and the affected object
			  have been changed this value is TRUE. Otherwise
			  it is FALSE.
	winhaddress	- if success is equal to TRUE you will here find a
			  pointer to a WizardWindowHandle which is
			  located under the mouse pointer.
	iaddress	- if success is equal to TRUE you will here find a
			  pointer to the object which is located under the
			  mouse pointer. The pointer must then be used
			  similarly to the appropriate field of an IntuitMessage
			  when an IDCMP_GADGETHELP message is received.

SEE ALSO
	WZ_GadgetHelp(), WZ_MenuHelp(),

wizard.library/WZ_GadgetKey

NAME
	WZ_GadgetKeyA -- Notify gadgets about a keypress
	WZ_GadgetKey -- variable arguments version for higher programming languages
	
SYNOPSIS
	success	= WZ_GadgetKeyA(winhandle, code, qualifier,tags)
	D0			A0	D0	D1	A1
	
	BOOL	WZ_GadgetKeyA(
			struct WizardWindowHandle *, ULONG, ULONG,
			struct TagItem *);

	success = WZ_GadgetKey(
			winhandle, code, qualifier, firstTag, ... )
	
	BOOL WZ_GadgetKey(
		struct WizardWindowHandle *, ULONG, ULONG, APTR, Tag, ...);
	
FUNCTION
	This function should be used to notify the gadgets about a keypress
	in a system-friendly way. If the destination gadget is a string or
	an integer gadget it will be automatically activated. If another
	gadget has reserved the key combination it will send an
	IDCMP_IDCMPUPDATE message to the window so that possible Notifys
	are automatically processed.

WARNING
	If multiple gadgets are responsible for a key combination and they
	are visible at the same time it is unpredictable which gadget the
	message sends.
	
ARGUMENTS
	winhandle	- WizardWindowHandle of the window where the key
			  press occurred
	key		- ASCII code of the key pressed
	qualifier	- Qualifier code for the key press

RESULTS
	success	- whether a gadget was responsible for the keypress
	          (TRUE/FALSE)

wizard.library/WZ_GadgetObjectname

NAME
	WZ_GadgetObjectname -- Obtains a gadget's object name
	
SYNOPSIS
	string	= WZ_GadgetObjectname(winhandle, gadget)
	D0			A0	A1
	
	STRPTR	WZ_GadgetObjectname(
		struct WizardWindowHandle *,struct Gadget *);

FUNCTION
	This function obtains a gadget's object name as specified with
	StormWizard. If no object name was specified NULL is returned.
	
ARGUMENTS
	winhandle	- a pointer to a WizardWindowHandle
	gadget		- a pointer to a gadget
RESULTS
	string		- a string address or NULL if an error occurred

SEE ALSO
	WZ_MenuObjectname()

wizard.library/WZ_GetDataAddress

NAME
	WZ_GetDataAddress -- obtains data from a surface description
	
SYNOPSIS
	data = WZ_GetDataAddress(surface, type, id)
									A0			D0		D1
	
	APTR WZ_GetDataAddress(APTR, ULONG, ULONG);

FUNCTION
	Obtains certain structures or chunks belong to a surface description.

WARNING
	If the data requested could not be found the function returns NULL.

ARGUMENTS
	surface	- the program's surface description
	type	- determines what the function should look for.
		  Values that have so far been defined are:
		  WDATA_IMAGE - search for a WizardNewImage structure
	id	- the structure/chunk ID. When looking for an image specify
		  the image number (image object name).

SEE ALSO
	WZ_CreateImageBitMap(),WZ_DeleteImageBitMap()


wizard.library/WZ_GetNode

NAME
	WZ_GetNode -- Obtains a node
	
SYNOPSIS
	node	= WZ_GetNode(list, number)
	D0		A0	D0
	
	struct	WizardNode *WZ_GetNode(struct MinList *, UWORD);

FUNCTION
	This function was written for the Hierarchy class. You can use it
	to obtain the tree's node that is currently below the cursor. Herefore
	call it using the value from the WHIERACHYA_Selected tag.

ARGUMENTS
	list	- address of a MinList structure
	number	- number of a visible node whose address is to be obtained

RESULTS
	node	- the WizardNode's address or NULL

SEE ALSO
	WZ_ListCount()

wizard.library/WZ_InitEasyStruct

NAME
	WZ_InitEasyStruct -- Initializes an EasyStruct structure
	
SYNOPSIS
	easy = WZ_InitEasyStruct(surface,easystruct,id,size)
	D0			A0	A1	D0	D1
	
	struct EasyStruct *WZ_InitEasyStruct(
			APTR,struct EasyStruct *, ULONG *, ULONG, ULONG);

FUNCTION
	Initializes the specified EasyStruct structure.

ARGUMENTS
	surface		- the value returned by a call to WZ_OpenSurface()
	easystruct	- a pointer to an EasyStruct (intuition.library)
	id		- requester number as specified in StormWizard
	size		- size of the EasyStruct structure

RESULTS
	easy		- address of the EasyStruct structure or NULL if an
			  error occurred

SEE ALSO
	WZ_EasyRequestArgs()

wizard.library/WZ_InitNodeA

NAME
	WZ_InitNodeA -- Initializes a WizardNode
	WZ_InitNode -- variable arguments version for higher programming languages
	
SYNOPSIS
	WZ_InitNodeA(wizardnode, entrys, tags)
			A0	D0	A1
	
	void WZ_InitNodeA(struct WizardNode *, ULONG, struct TagItem *);

	WZ_InitNode(winhandle, entrys, firstTag, ... )
	
	void WZ_InitNode(struct WizardNode *, ULONG, Tag, ...);

FUNCTION
	Initializes the WizardNode specified. Starting with V38 up to
	32 entries can be used.

ARGUMENTS
	wizardnode	- the Node to be initialised
	entrys		- the number of entries the Node has
	tags		- defined tags are:
	
	 WNDOEA_Flags -- (V37), UBYTE
	 	Flags valid for this Node
	
SEE ALSO
	WZ_InitNodeEntry()

wizard.library/WZ_InitNodeEntryA

NAME
	WZ_InitNodeEntryA -- Initializes a WindowNode entry
	WZ_InitNodeEntry -- variable arguments version for higher programming languages
	
SYNOPSIS
	WZ_InitNodeEntryA(wizardnode, entry, tags)
				A0	D0	A1
	
	void WZ_InitNodeEntryA(
			struct WizardNode *, ULONG, struct TagItem *);

	WZ_InitNodeEntry(
			winhandle, entry, firstTag, ... )
	
	void WZ_InitNodeEntry(
			struct WizardNode *, ULONG, Tag, ...);

FUNCTION
	Initializes the specified WizardNode entry. The maximimum entry to
	be addressed is 31 as there's a limit of 32 entries per node (since
	V38)!

ARGUMENTS
	wizardnode	- the node whose entry is to be initialised
	entry		- the entry number to be initialised
	tags		- defined as follows:
	
	 WENTRYA_Type -- (V37), UBYTE
		the type the entry should belong to

	 WNE_SPACE
		WENTRYA_SpaceWidth -- (V38), UWORD
			Witdh of this space

	 WNE_TEXT
		WENTRYA_TextPen -- (V37), UWORD
			Color of this entry
		WENTRYA_TextSPen -- (V37), UWORD
		 	Color of this entry when it is selected
		WENTRYA_TextStyle -- (V37), UBYTE
		 	Font style to be used for this entry
		WENTRYA_TextSStyle -- (V37), UBYTE
		 	Font style to be used when the entry is selected
		WENTRYA_TextFont -- (V38), struct TextFont *
			The font to be used for this entry or NULL
		WENTRYA_TextJustification -- (V38), UWORD
			Justification, WZRDPLACE_LEFT or _RIGHT or _CENTER

	 WNE_FORMAT
		WENTRYA_FormatPen -- (V38), UWORD
		 	Color of this entry
		WENTRYA_FormatTreeSPen -- (V38), UWORD
		 	Color of this entry when it is selected
		WENTRYA_FormatStyle -- (V38), UBYTE
		 	Font style to be used for this entry
		WENTRYA_FormatSStyle -- (V38), UBYTE
		 	Font style to be used when the entry is selected
		WENTRYA_FormatStruct -- (V38), STRPTR *
			A pointer to a memory area which contains a pointer to
			a formatting string, followed by pointers to arguments
			for the formatting process
		WENTRYA_FormatFont -- (V38), struct TextFont *
			The font to be used for the text or NULL
		WENTRYA_FormatJustification -- (V38), UWORD
			Justification, WZRDPLACE_LEFT or _RIGHT or _CENTER
	
	 WNE_TREE
		WENTRYA_TreeParentNode -- (V37), struct WizardNode *
			The parent WizardNode
		WENTRYA_TreeChilds -- (V37), struct MinList *
			A pointer to a MinList structure if there are any
			child nodes
		WENTRYA_TreePen -- (V38), UWORD
		 	The entry's color
		WENTRYA_TreeSPen -- (V38), UWORD
		 	The entry's color when it's selected
		WENTRYA_TreeStyle -- (V38), UBYTE
		 	The entry's font style
		WENTRYA_TreeSStyle -- (V38), UBYTE
		 	The entry's font style when it's selected
		WENTRYA_TreeFont -- (V38), struct TextFont *
			The font to be used for this entry or NULL

	 WNE_IMAGE
		WENTRYA_ImageWidth -- (V38), UWORD
			The BitMap's width (= the image width)
		WENTRYA_ImageHeight -- (V38), UWORD
			The BitMap's height (= the image height)
		WENTRYA_ImageBitMap -- (V38), struct BitMap *
			BitMap for "normal" (unselected) display
		WENTRYA_ImageSBitMap -- (V38), struct BitMap *
			BitMap for "selected" display
		WENTRYA_Justification -- (V38), UWORD
			Justification when in table mode

	 WNE_VIMAGE
		WENTRYA_VImageWidth -- (V38), UWORD
			The vector image's width
		WENTRYA_VImageStruct -- (V38), struct WizardVImage *
			Vector image described by this entry
		WENTRYA_VImageTags -- (V38), struct TagItem *
			Tags to be passed to the vector image when in
			"normal" (unselected) mode
		WENTRYA_VImageSTags -- (V38), struct TagItem *
			Tags to be passed to the vector image when in
			"selected" mode
	
	 WNE_HOOK
		WENTRYA_HookStruct -- (V38), struct Hook *
			Hook to be used to display the entry
		WENTRYA_HookWidth -- (V38), UWORD
			Width of the entry
		WENTRYA_HookUserData -- (V38), APTR
			Data for the Hook

SEE ALSO
	WZ_InitNode()

wizard.library/WZ_ListCount

NAME
	WZ_ListCount -- Obtains the number of nodes displayed
	
SYNOPSIS
	count	= WZ_ListCount(list)
	D0		A0
	
	ULONG WZ_ListCount(struct MinList *);

FUNCTION
	This function was written for the hierarchy class. You can use it
	to obtain the number of visible nodes of the specified tree.

WARNING
	The list passed must be a chain of WizardTreeNodes.

ARGUMENTS
	list	- address of the MinList structure containing WizardNodes

RESULTS
	count	- the number of visible nodes

SEE ALSO
	WZ_GetNode()

wizard.library/WZ_LockWindow

NAME
	WZ_LockWindow -- Locks a window
	
SYNOPSIS
	WZ_LockWindow(winhandle)
			A0
	
	VOID WZ_LockWindow(struct WizardWindowHandle *);

FUNCTION
	This function locks the window for all kinds of user input. The
	mouse pointer will be changed to a busy pointer.

ARGUMENTS
	winhandle	- the WizardWindowHandle structure of the window
			  to be locked

SEE ALSO
	WZ_UnlockWindow()

wizard.library/WZ_LockWindows

NAME
	WZ_LockWindows -- locks all windows
	
SYNOPSIS
	WZ_LockWindows(surface)
			A0
	
	VOID WZ_LockWindows(APTR);

FUNCTION
	This function will lock all windows belonging to the surface
	description passed.

ARGUMENTS
	surface	- the value returned by a call to WZ_OpenSurface()

SEE ALSO
	WZ_UnlockWindows()

wizard.library/WZ_MenuConfig

NAME
	WZ_MenuConfig -- obtains a menu's config string
	
SYNOPSIS
	string	= WZ_MenuConfig(winhandle, code)
	D0			A0	D0
	
	STRPTR	WZ_MenuConfig(struct WizardWindowHandle *, ULONG);

FUNCTION
	Obtains a menu's configuration string as specified with
	StormWizard.
	
ARGUMENTS
	winhandle	- a pointer to a WizardWindowHandle
	code		- MenuCode of the MenuTitle, MenuItem or MenuSubitem
			  selected
RESULTS
	string		- a string address or NULL

SEE ALSO
	WZ_GadgetConfig(), WZ_MenuHelp()

wizard.library/WZ_MenuHelp

NAME
	WZ_MenuHelp -- obtains a menu's help string
	
SYNOPSIS
	string	= WZ_MenuHelp(winhandle, code)
	D0			A0	D0
	
	STRPTR	WZ_MenuHelp(struct WizardWindowHandle *, ULONG);

FUNCTION
	Obtains a menu item's help string as specified with StormWizard.
	If the surface description was opened with the SFH_Catalog tag,
	the translated string will be returned.
	
ARGUMENTS
	winhandle	- a pointer to a WizardWindowHandle
	code		- MenuCode of the selected MenuTitle, MenuItem or
			  MenuSubitem

RESULTS
	string		- a string address or NULL

SEE ALSO
	WZ_GadgetHelp(), WZ_MenuConfig()

wizard.library/WZ_MenuObjectname

NAME
	WZ_MenuObjectname -- obtains a menu's object name
	
SYNOPSIS
	string	= WZ_MenuObjectname(winhandle, code)
	D0			A0	D0
	
	STRPTR	WZ_MenuObjectname(struct WizardWindowHandle *, ULONG);

FUNCTION
	This function obtains a menu's object name as specified with
	StormWizard. If no object name was specified the function returns
	NULL.
	
ARGUMENTS
	winhandle	- a pointer to a WizardWindowHandle
	code		- the MenuCode of the selected MenuTitle, MenuItem
			  or MenuSubitem

RESULTS
	string		- a string address or NULL

SEE ALSO
	WZ_GadgetObjectname()

wizard.library/WZ_NewObjectA

NAME
	WZ_NewObjectA -- creates a new object
	WZ_NewObject  -- variable arguments version for higher programming languages
	
SYNOPSIS
	obj = WZ_NewObjectA(surface,class, tags)
	D0		A1	D0	A0
	
	APTR WZ_NewObjectA(APTR, ULONG, struct TagItem *);

	obj = WZ_NewObject(surface, class, firstTag, ... )
	
	APTR WZ_NewObject(APTR, ULONG, Tag, ... );

FUNCTION
	Creates a new object of the specified type.

ARGUMENTS
	class	- the class of the object to be created
	tags	- defined as follows:
	
	  GA_DrawInfo, struct DrawInfo *
		ALWAYS specify a pointer to a DrawInfo structure here!
	  WGA_Label -- (V37) [C...], STRPTR
		This universal tag is used to specify a label for the
		object.
	  WGA_Label2 -- (V37) [C...], STRPTR
		Another universal tag: this one allows you to specify a
		second pointer for the creation of the object.
	  WGA_TextFont -- (V37) [C...], struct TextFont *
		Using this tag you can override the font set by default
		in the DrawInfo structure. This allows you to assign every
		object its own font. Universal tag.
	  WGA_Flags -- (V37) [C...], UWORD
		Here you can set flags for the object to be created. The
		following general flags are defined:
		  WGF_GadgetHelp -- if the gadget should send a GadgetHelp
				message when the mouse is positioned over
				it.
		  WGF_Disabled -- if you wish the gadget to be unselectable.
	  WGA_Priority -- (V37) [C.G.], UBYTE
		This tag allows you to assign each objects its own priority.
		Valid values range from 0 to 255 (defaults to zero).
	  WGA_RelHeight -- (V37) [C...], UBYTE
		This tag is used the specify the upper and lower border of
		an object relative to its TextDimension. Defaults to 2.
	  WGA_MinWidth -- (V37) [C.G.], UWORD
		This tag specifies the minimum width for the object to be
		created. It is class-independent and can be obtained by all
		objects.
	  WGA_MinHeight -- (V37) [C.G.], UWORD
		This tag specifies the minimum height for the object to be
		created. It can be obtained by all objects, however its
		meaning varies from class to class.
	  WGA_Link -- (V37) [..S.], struct Gadget *
		This tag allows for communications between gadgets the content
		of which is totally uninteresting to the programmer.
	  WGA_LinkData -- (V37) [C...], UBYTE
		Depending on the object class some links require an
		additional specification of the line number (e.g. Label
		gadgets). Required for keyboard control.
	  WGA_HelpText -- (V37) [C...], STRPTR
		The Help string which will be obtainable from a gadget using
		the WZ_GadgetHelp() function.
	  WGA_Config -- (V37) [C...], STRPTR
		The Config string which will be obtainable from a gadget using
		the WZ_GadgetConfig() function.
	  WGA_NewImage -- (V37) [C...], struct WizardNewImage *
		This tag is used to specify the image required for display
		and dimension calculations.
	  WGA_SelNewImage -- (V37) [C...], struct WizardNewImage *
		This tag is used to specify the image for the selected state
		of the object.
	  WGA_Group -- (V37) [C...], struct Gadget *
		This tag is used to link the object within an existing group.
		Pass a pointer to the gadget structure of the group gadget.
	  WGA_GroupPage -- (V37) [C...], UWORD
		If the group gadget consists of multiple pages you need
		to specify the page for the new object here. Defaults to 0.
	  WGA_Locale -- (V37) [C...], struct Locale *
		So far this tag is only used for date gadgets to localise the
		abbreviations of day names into the correct language. This
		tag must be specified.
	
	WCLASS_LAYOUT: 
	---------------
	- start and influence the layout process

	WLAYOUTA_RootGadget -- (V37) [C...], struct Gadget *
		Root group whose layout process is to be started
	WLAYOUTA_Type -- (V37) [C...], UWORD
		Type of the root gadget, not used yet
	WLAYOUTA_BorderLeft -- (V37) [C...], WORD
	WLAYOUTA_BorderRight -- (V37) [C...], WORD
	WLAYOUTA_BorderTop -- (V37) [C...], WORD
	WLAYOUTA_BorderBottom -- (V37) [C...], WORD
		Border values to leave free during the layout process
		(defaults to 0).
	WLAYOUTA_StackSwap -- (V37) [C...], struct StackSwapStruct *
		A pointer to an instance of the similar-called stack
		structure for the layout process. This tag must be specified.

	WCLASS_HGROUP and WCLASS_VGROUP:
	--------------------------------
	- take care of the switching between pages (max. 32)
	- calculate dimensions and positions of its members
	- flags: WGRPF_EqualSize assigns all members the same minimum
	  dimensions and WGRPF_DockMode enables Dock mode.
	
	  WGROUPA_ActivePage -- (V37) [CSGN], UWORD
		Specifies the group's visible page.
	  WGROUPA_MaxPage -- (V37) [C...], UWORD
		Specifies the maximum page number to be processed by this
		gadget. The maximum allowed value is 31.
		This tag will be overwritten if the group title consists of
		multiple lines.
	  WGROUPA_HBorder -- (V37) [C...], WORD
		Specifies the border space which should be left free to the
		left and the right of the gadget.
	  WGROUPA_VBorder -- (V37) [C...], WORD
		Similar to HBorder this tag specifies the space to be left
		free above and below of the gadget. If the title string passed
		consists of a single line the font height is added to the
		upper border.
	  WGROUPA_BHOffset -- (V37) [C...], WORD
		Specifies the horizontal border space to be left free WITHIN
		the gadget (to the left and the right of the image to be
		drawn).
	  WGROUPA_BVOffset -- (V37) [C...], WORD
		Similar to BHOffset this tag specifies the vertical border
		space (the space left free above and below of the frame to
		be drawn).
	  WGROUPA_Space -- (V37) [C...], UWORD
		Specifies the fixed minimum distance to be used between
		members of this group. If the group has none or only a single
		member this tag will have no effect.
	  WGROUPA_VarSpace -- (V37) [C...], UWORD
		Specifies the proportions to be used to distribute the space
		available among the group's members and its white spaces. All
		objects of an group then have its own minimum dimension. A
		value of 32768 causes the group gadget to calculate the
		relation of used space and white space to be roughly equal.
		Of course this is not always possible.
	  WGROUPA_FrameType -- (V37) [C...], UWORD
		Specifies the frame to be drawn within a range from 0 to
		8. Defaults to 0.
	
	WCLASS_BUTTON
	-------------
	- simple buttons

	  WBUTTONA_Label -- (V37) [CS..], STRPTR
		Specifies the label for a button gadget. Overrides the
		universal WGA_Label tag, if used.
	
	WCLASS_STRING
	-------------
	- if you wish the string gadget to be selectable using keys you need
	  to link it with a label
	- Flags: WGF_KeyControl to enable tab cycling. Must be set!
	
	  WSTRINGA_String -- (V37) [CSGN], STRPTR
		The address of a null-terminated string. Overrides the
		universal WGA_Label tag, if used.
	  WSTRINGA_MaxChars -- (V37) [C...], UWORD
		Specifies the maximum length of the editable string (excluding
		the terminating zero byte). Has a maximum of 255.
	  WSTRINGA_Justification -- (V37) [C...], ULONG
		Justification (GACT_...). Defaults to left.

	WCLASS_CHECKBOX
	---------------
	- must be linked with a label gadget.
	
	  WCHECKBOXA_Checked -- (V37) [CSGN], BOOL
		If TRUE, the checkbox will be rendered in checked state.
	
	WCLASS_MX
	---------
	- must be linked with a label gadget.
	
	  WMXA_Active -- (V37) [CSGN], UWORD
		Specifies the active, selected button within the object.
	
	WCLASS_LABEL
	------------
	- often used as target object for links
	- texts can consist of multiple lines
	- does not send Notifies
	
	  WLABELA_FrameType -- (V37) [C...], UWORD
	  	Specifies the frame that is to be drawn around the object.
	  WLABELA_Space -- (V37) [C...], UWORD
	  	The distance in pixels in-between the text lines (not used if
	  	the text consists of a single line).
	  WLABELA_BGPen -- (V37) [C...], UWORD
	  	The background colour to be used (defaults to 0).
	  WLABELA_TextPlace -- (V37) [C...], UWORD
	  	Specifies how the text is to be justified. Use WZRDPLACE_LEFT,
	  	WZRDPLACE_CENTER or WRZDPLACE_RIGHT.
	  WLABELA_HighLights -- (V37) [C...], ULONG
	  	Determines which lines should be highlighted when displayed.
	  	To highlight lines 0 and 2, 2^0 + 2^2 = 5 must be passed.
	  WLABELA_Styles -- (V37) [C...], ULONG
	  	Determines which lines should be rendered in boldface when
	  	displayed. To print lines 0 and 2 in bold face pass a value of 5.
	  WLABELA_Label -- (V37) [C...], STRPTR
	  	Address of the text to be displayed. Overrides WGA_Label.
	  WLABELA_Lines -- (V37) [..G.], UWORD
	  	The number of text lines.
	  
	WCLASS_INTEGER
	--------------
	- allows of input of numbers in 3 numeric systems
	- Flags: WGF_KeyControl to enable tab cycling. Must be set!
	  
	  WINTEGERA_Long -- (V37) [CSGN], LONG
	    	A signed integer which can be modified by the user.
	  WINTEGERA_MinLong -- (V37) [C...], LONG
	  WINTEGERA_MinLong -- (V37) [C...], LONG
	    	Lower and upper limits for the integer.
	  WINTEGERA_Justification -- (V37) [C...], ULONG
	  	Justification (GACT_...). Defaults to left.

	WCLASS_HSCROLLER and WCLASS_VSCROLLER
	-------------------------------------
	- Scroll bars to scroll through lists.
	- Can be linked to ListView, MultiListView and Hierarchy gadgets
	- Flags: WSCF_NewLook to render the scroll bars in the "new" OS/3 look
	
	  WSCROLLERA_Top -- (V37) [CSGN], LONG
	  	An integer value ranging normally from 0 to Total-1. Defaults to
	  	zero.
	  WSCROLLERA_Visible (V37) [CSG.], ULONG
	  	Specifies the number of visible entries within a list.
	  WSCROLLERA_Total -- (V37) [CSG.], ULONG
	  	Number of entries a list can have. Defaults to 10.
	
	WCLASS_ARROW
	------------
	- Arrow gadgets
	- Can be linked to Proportional gadgets, then these will send messages
	
	  WARROWA_Type -- (V37) [C...], UWORD
	  	The type of the arrow from 0 to 3 (Left, Right, Up and Down).
	  	Defaults to 0 (Left).
	  WARROWA_Step -- (V37) [CS..], UWORD
	  	Specifies the stepping size when a step is repeated within a tick.
	
	WCLASS_LISTVIEW and WCLASS_MULTILISTVIEW
	----------------------------------------
	- displays a list of WizardNodes
	- Flags: WLVF_ReadOnly to render the border recessed and make the entries
	  unselectable and WLVF_DoubleClicks to receive messages when a
	  double-click is performed on an entry (see below).
	
	  WLISTVIEWA_Top -- (V37) [CSG.], ULONG
	  	The number of the first visible node.
	  WLISTVIEWA_Selected -- (V37) [CSGN], LONG
	  	The number of the selected entry within the list. If the object
	  	belongs to the MultiListView the last selected entry will be
	  	returned.
	  WLISTVIEWA_List -- (V37) [CS..], struct MinList *
	  	A list of WizardListNodes which is to be displayed. You can display
	  	vector images in front of a string by specifying its address in the
	  	node. If a node is selected WZ_DrawVImage() is called with a type
	  	value of 1, otherwise it's 0. If the object belongs to the
	  	MultiListView class you need to query WLNF_Selected whether the
	  	node was selected or not. WLNF_Selected must not be used if the
	  	object belongs to the ListView class!
	  WLISTVIEWA_DoubleClick -- (V37) [...N], BOOL
	  	If a message was sent by the object and this tag equals TRUE, the
	  	message was caused by a double-click on a list entry.
	  WLISTVIEWA_Visible -- (V37) [.S..], UWORD
	  	Use this tag to specify the number of a node who should be under
	  	all circumstances visible in the window. If the node is not visible
	  	this tag will collidate with WLISTVIEWA_Top as its value is
	  	modified.
	  WLISTVIEWA_HeaderNode -- (V38) [.S...], struct WizardNode *
	  	A pointer to a WizardNode which is used as header.
	  WLISTVIEWA_Columns -- (V38) [.S...], UWORD
	  	The number of columns that should be used to display the list or
	  	NULL.
	
	WCLASS_TOGGLE
	-------------
	- similar to Checkbox gadgets
	- Flags: WTGF_SimpleMode if the object should be selectable only,
	  deselecting will then be not possible any more.
	
	  WTOGGLEA_Checked -- (V37) [CSGN], BOOL
	  	TRUE if pressed, FALSE otherwise.
	
	WCLASS_LINE
	-----------
	- draw simple lines.
	- do not send Notifies.
	
	  WLINEA_Type -- (V37) [C...], UWORD
	  	Determines how the line gadget should draw a line. Values are 0
	  	for horizontally, 1 for vertically, 2 for horizontally and selected
	  	or 3 for vertically and selected. Defaults to 0.
	  WLINEA_Label -- (V37) [C...], STRPTR
	  	A zero-terminated string which will be written into the line if
	  	it is a horizontal line. Overrides WGA_Label.
	
	WCLASS_COLORFIELD
	-----------------
	- displays a palette of colours
	- must be linked with a label gadget
	- does not send any Notifies
	
	  WCOLORFIELDA_Pen -- (V37) [CS..], UWORD
	  	The number of the colour register whose colour should appear within
	  	the highlighted box. WZRD_... colours are allowed. Defaults to 0.
	
	WCLASS_ARGS
	-----------
	- displays up to 10 different argument
	- does not send any Notifies
	
	  WARGSA_Format -- (V37) [.S..], STRPTR
	  	A formatting string that will be passed to RawDoFmt().
	  WARGSA_TextPlace -- (V37) [C...], UWORD
	  	One of the WZRDPLACE_ constants which describe how the formatted
	  	text should be justified within the available graphical space.
	  WARGSA_FrameType -- (V37) [C...], UWORD
	  	A number specifying the frame type to be drawn.
	  WARGSA_TextPen -- (V37) [CS..],UWORD
	  	The color to be used for text output.
	  WARGSA_Arg0-9 -- (V37) [CS..], ULONG
	  	Specify the arguments to be formatted here.
	  	WARNING: If the address of a string is passed, the string can
	  	         not be copied into an own buffer!
	
	WCLASS_GAUGE
	------------
	- to display chronological progress
	- does not send any Notifies
	
	  WGAUGEA_Total -- (V37) [CS..], UWORD
	  	Maximum level of the gauge.
	  WGAUGEA_Current -- (V37) [CS..], UWORD
	  	Current level of the gauge, must be within 0 and WGUAGEA_Total.
	  WGAUGEA_Format -- (V37) [CS..], STRPTR
	  	This tag overrides WGA_Label and specifies the formatting string
	  	to be passed along with the arguments to exec.library/RawDoFmt().
	
	WCLASS_CYCLE
	------------
	- can be linked to Label gadgets for keyboard control
	
	  WCYCLEA_Active -- (V37) [CSGN], UWORD
	  	Specifies the active entry.
	  WCYCLEA_Labels -- (V37) [CS..], STRPTR
	  	The address of multiple strings separated by linefeeds ("\n").
	  	This tag overrides WGA_Label.

	WCLASS_VECTORBUTTON
	-------------------
	- objects of this type behave like objects of the Button class
	
	  WVECTORBUTTONA_Type -- (V37) [C...], UWORD
	  	The number of the vector image to be displayed: File (0),
	  	Drawer (1) or Popup (2).

	WCLASS_DATE
	-----------
	- Objects of this type behave like calendar sheets.
	
	  WDATEA_Day -- (V37) [CSGN], UWORD
	  	The day to be selected (1 or higher, default is 1).
	  WDATEA_Month -- (V37) [CS..], UWORD
	  	The month whose days should be displayed (1 or higher, defaults
	  	to 1=January).
	  WDATEA_Year -- (V37) [CS..], UWORD
	  	The year, must be bigger than 1978 (default is 1978).
	
	WCLASS_SPACE
	------------
	- are used as space holders and to fill gaps.
	
	  WSPACEA_Pen -- (V37) [C...], UWORD
	  	The colour to be used to draw a raster. The background colour is
		used as secondary colour.
	
	WCLASS_IMAGE
	------------
	- displays Bitmaps within windows
	- does not send any Notifys
	
	  WIMAGEA_BGPen -- (V37) [C...], UWORD
	  	The color to be used to draw a possibly existing border.
	  WIMAGEA_FrameType -- (V37) [C...], UWORD
	  	Determines using which frame the object's dimensions will be
	  	drawn. Valid values are WZRDFRAME_NONE, WZRDFRAME_ICON,
	  	WZRDFRAME_ICON, WZRDFRAME_BUTTON, WZRDFRAME_STRING and
	  	WZRDFRAME_DOUBLEICON. Defaults to WZRDFRAME_ICON.
	  WIMAGEA_HBorder -- (V37) [C...], UWORD
	  	The minimum distance to the left and right borders (defaults to 0).
	  WIMAGEA_VBorder -- (V37) [C...], UWORD
	  	The minimum distance to the borders above and below of the object
	  	(defaults to 0).
	  WIMAGEA_NewImage -- (V37) [C...], struct WizardNewImage *
	  	The address of an WizardNewImage structure which specifies the
	  	image to be drawn. Overrides WGA_NewImage.
	
	WCLASS_IMAGEBUTTON
	------------------
	- behave like normal buttons but look like images

	  WIMAGEBUTTONA_BGPen -- (V37) [C...], UWORD
	  	The color used to draw the border when the object is in
	  	unselected state.
	  WIMAGEBUTTONA_SelBGPen -- (V37) [C...], UWORD
	  	The color used to draw the border when the object is in
	  	selected state.
	  WIMAGEBUTTONA_FrameType -- (V37) [C...], UWORD
	  	The frame used to draw the object's dimensions. Valid values are
	  	WZRDFRAME_NONE, WZRDFRAME_ICON, WZRDFRAME_BUTTON, WZRDFRAME_STRING
	  	and WZRDFRAME_DOUBLEICON. The default is WZRDFRAME_ICON.
	  WIMAGEBUTTONA_HBorder -- (V37) [C...], UWORD
	  	The minimum distance to keep free to the left and right border.
	 	Defaults to 0.
	  WIMAGEBUTTONA_VBorder -- (V37) [C...], UWORD
	  	The minimum distance to keep free to the upper and lower border.
	  	Defaults to 0.
	  WIMAGEBUTTONA_NewImage -- (V37) [C...], struct WizardNewImage *
	  	The address of the WizardNewImage structure containing the
	  	image to be drawn. This tag must be specified!
	  WIMAGEBUTTONA_SelNewImage -- (V37) [C...], struct WizardNewImage *
	  	The address of the WizardNewImage structure containing the
	  	image to be drawn when the button is selected.

	WCLASS_IMAGETOGGLE
	------------------
	- behave like Toggle objects but look like images
	- Flags: WITF_SimpleMode causes the object to be selectable-only, i.e.
	  it can't be deselected any more

	  WIMAGETOGGLEA_BGPen -- (V37) [C...], UWORD
	  	The color used to draw the border when the object is in
	  	unselected state.
	  WIMAGETOGGLEA_SelBGPen -- (V37) [C...], UWORD
	  	The color used to draw the border when the object is in
	  	selected state.
	  WIMAGETOGGLEA_FrameType -- (V37) [C...], UWORD
	  	The frame used to draw the object's dimensions. Valid values are
	  	WZRDFRAME_NONE, WZRDFRAME_ICON, WZRDFRAME_BUTTON, WZRDFRAME_STRING
	  	and WZRDFRAME_DOUBLEICON. The default is WZRDFRAME_ICON.
	  WIMAGETOGGLEA_HBorder -- (V37) [C...], UWORD
	  	The minimum distance to keep free to the left and right border.
	 	Defaults to 0.
	  WIMAGETOGGLEA_VBorder -- (V37) [C...], UWORD
	  	The minimum distance to keep free to the upper and lower border.
	  	Defaults to 0.
	  WIMAGETOGGLEA_NewImage -- (V37) [C...], struct WizardNewImage *
	  	The address of the WizardNewImage structure containing the
	  	image to be drawn. This tag must be specified!
	  WIMAGETOGGLEA_SelNewImage -- (V37) [C...], struct WizardNewImage *
	  	The address of the WizardNewImage structure containing the
	  	image to be drawn when the button is selected.
	  WIMAGETOGGLEA_Checked -- (V37) [CSGN], BOOL
	  	TRUE if the imagetoggle object is pressed and FALSE otherwise.

	WCLASS_IMAGEPOPUP
	------------------
	- Images with text popup menus
	- Flags: WITF_SimpleMode causes the object to be selectable-only, i.e.
	  it can't be deselected any more

	  WIMAGEPOPUPA_BGPen -- (V37) [C...], UWORD
	  	The color used to draw the border when the object is in
	  	unselected state.
	  WIMAGEPOPUPA_FrameType -- (V37) [C...], UWORD
	  	The frame used to draw the object's dimensions. Valid values are
	  	WZRDFRAME_NONE, WZRDFRAME_ICON, WZRDFRAME_BUTTON, WZRDFRAME_STRING
	  	and WZRDFRAME_DOUBLEICON. The default is WZRDFRAME_ICON.
	  WIMAGEPOPUPA_HBorder -- (V37) [C...], UWORD
	  	The minimum distance to keep free to the left and right border.
	 	Defaults to 0.
	  WIMAGEPOPUPA_VBorder -- (V37) [C...], UWORD
	  	The minimum distance to keep free to the upper and lower border.
	  	Defaults to 0.
	  WIMAGEPOPUPA_NewImage -- (V37) [C...], struct WizardNewImage *
	  	The address of the WizardNewImage structure containing the
	  	image to be drawn. This tag must be specified!
	  WIMAGEPOPUPA_TextPlace -- (V37) [C...], UWORD
	  	Specifies how the text is to be justified. Use WZRDPLACE_LEFT,
	  	WZRDPLACE_CENTER or WRZDPLACE_RIGHT.
	  WIMAGEPOPUPA_Labels -- (V37) [C...], STRPTR
	  	Address of the text to be used for the popup dialogue. Seperate
	  	the text with linefeeds ("\n"). This tag overrides WGA_LABEL.
	  WIMAGEPOPUPA_Selected -- (V37) [...N], UWORD
	  	Number of the selected popup menu entry.
	
	WCLASS_TEXTPOPUP
	----------------
	- look like buttons but contain popup menus
	- Flags: WTPF_NewLook displays the popup menu in 3D Look
	
	  WTEXTPOPUPA_TextPlace -- (V37) [C...], UWORD
	  	Specifies how the popup text is to be justified. Use
	  	WZRDPLACE_LEFT, WZRDPLACE_CENTER or WRZDPLACE_RIGHT.
	  WTEXTPOPUPA_Labels -- (V37) [C...], STRPTR
	  	Address of the texts to be used for the popup dialogue. Separate
	  	the text with linefeeds ("\n"). This tag overrides WGA_LABEL2
	  	and must be specified.
	  WTEXTPOPUPA_Name -- (V37) [C...], STRPTR
	  	The text to be used for the button. Overrides WGA_LABEL.
	  WTEXTPOPUPA_Selectd -- (V37) [...N], UWORD
	  	Number of the selected popup menu entry.
	
	WCLASS_PALETTE
	--------------
	- allows the user to select a colour out of a palette
	
	  WPALETTEA_Colors -- (V37) [C...], UWORD
	  	The number of colours that should be selectable or -1 to use the
	  	maximum possible number of colours. The maximum allowed value for
	  	this tag is 255.
	  WPALETTEA_Selected -- (V37) [CSGN], WORD
	  	Number of the selected color (defaults to -1).
	  WPALETTEA_Offset -- (V37) [C...], UWORD
	  	Number of the first selectable colour register.
	
	WCLASS_VECTORPOPUP
	------------------
	- look like Vector buttons but contain popup menus
	- Flags: WTPF_NewLook displays the popup menu in 3D Look
	
	  WVECTORPOPUPA_Type -- (V37) [C...], UWORD
	  	Number of the Vector image to be used for display: File (0),
	  	Drawer (1) or Popup (2).
	  WVECTORPOPUPA_Labels -- (V37) [C...], STRPTR
	  	Address of the texts to be used for the popup dialogue. Separate
	  	the text with linefeeds ("\n"). This tag overrides WGA_LABEL
	  	and must be specified.
	  WVECTORPOPUPA_TextPlace -- (V37) [C...], UWORD
	  	Specifies how the popup text is to be justified. Use
	  	WZRDPLACE_LEFT, WZRDPLACE_CENTER or WRZDPLACE_RIGHT.
	  WVECTORPOPUPA_Selected -- (V37) [...N]
	  	Number of the selected popup menu entry.
	
	WCLASS_HIERARCHY
	----------------
	- similar to ListView objects
	- are capable of displaying hierarchical lists
	- Flags: WHRF_DoubleClicks will cause messages to be sent when a
	  double-click is issued.
	
	  WHIERARCHYA_ImageType -- (V37) [C...], UWORD
	  	Chooses an existing image to be used. Valid values are None (0),
	  	Tree (1) and Triangle (2).
	  WHIERARCHYA_ImageWidth -- (V37) [CS..], UWORD
	  	The width of the drawable images which also serve as switches to
	  	expand/collapse parts of the tree.
	  WHIERARCHYA_Top -- (V37) [CSG.], ULONG
	  	The number of the first visible node.
	  WHIERARCHYA_List -- (V37) [CS..], struct MinList *
	  	The address of the list whose contents are to be displayed. The
	  	list passed must contain WizardTreeNodes whose ParentNode and Childs
	  	fields must be correctly initialised. The structure should be
	  	organised in a tree-like chain structure. All nodes that are
	  	directly linked into the MinList structure must have a zero in
	  	their ParentNode field as there is no parent node for these.
	  WHIERARCHYA_Visible -- (V37) [.S..], UWORD
	  	Use this tag to specify the number of a node who should be under
	  	all circumstances visible in the window. Only those nodes are
	  	counted who can be displayed because their parent node is already
	  	open.
	  WHIERARCHYA_Selected -- (V37) [CSGN], LONG
	  	The number of the selected list entry. If the object belongs to
	  	the MultiListView class, the last selected entry is affected.
	  WHIERARCHYA_DoubleClick -- (V37) [...N], BOOL
	  	If a message was sent by the object and this tag equals TRUE, the
	  	message was caused by a double-click on a list entry.
	  WHIERARCHYA_HeaderNode -- (V38) [.S...], struct WizardNode *
	  	A pointer to a WizardNode which is used as header.
	  WHIERARCHYA_Columns -- (V38) [.S...], UWORD
	  	The number of columns that should be used to display the list or
	  	NULL.

	WCLASS_HSLIDER and WCLASS_VSLIDER
	---------------------------------
	- these are sliders for all kinds of uses
	- Flags: WLSF_NewLook renders the sliders in the "new" OS/3 look
	
	  WSLIDERA_Level -- (V37) [CSGN], WORD
	  	The current level of the slider. Can range from Min to Max and
	  	defaults to 0.
	  WSLIDERA_Min (V37) [CSG.], WORD
	  	Specifies the lower limit for the slider (defaults to -10).
	  WSLIDERA_Max -- (V37) [CSG.], WORD
	  	Specifies the upper limit for the slider (defaults to 10).

	WCLASS_STRINGFIELD
	------------------
	
	  WSTRINGFIELDA_Text -- (V38) [CSGN], STRPTR
	  	The address of a zero-terminated text.
	  WSTRINGFIELDA_MaxChars -- (V38) [C...], UWORD
	  	The maximum length of the editable text without the terminating
	  	zero byte. The maximum value allowed is 1023.
	  WSTRINGFIELDA_MaxLines -- (V38) [C...], UWORD
	  	The maximum number of lines. The highest value allowed is 256.
	  WSTRINGFIELDA_Hook -- (V38) [C...], ULONG
	  	This hook can be used to implement your own functions.
	  WSTRINGFIELDA_TextPen,
	  WSTRINGFIELDA_STextPen,
	  WSTRINGFIELDA_CTextPen,
	  WSTRINGFIELDA_BGPen,
	  WSTRINGFIELDA_SBGPen,
	  WSTRINGFIELDA_CBGPen -- (V38) [C...], UWORD
	  	The Pens used to render the string field. MagicPens are allowed.

RESULTS
	obj	- a pointer to the object created.

SEE ALSO
	intuition.library/DisposeObject()

wizard.library/WZ_ObjectID

NAME
	WZ_ObjectID -- obtains an object's object ID
	
SYNOPSIS
	success = WZ_ObjectID(surface,id,objectname)
	D0			a0	a2	a1

FUNCTION
	Returns the object ID of an objects whose name was passed.

ARGUMENTS
	surface    - the value returned by a call to WZ_OpenSurface()
	id	   - a pointer to a memory area of four bytes which is
		     used by the function to return the ID on success
	objectname - The name of the object whose ID is to be obtained
		
RESULTS
	sucess	   - TRUE if the ID could be found and FALSE otherwise

SEE ALSO
	WZ_OpenSurface()

wizard.library/WZ_OpenSurfaceA

NAME
	WZ_OpenSurfaceA -- opens a surface description
	WZ_OpenSurface  -- variable arguments version for higher programming languages
	
SYNOPSIS
	Surface	= WZ_OpenSurfaceA(name, memaddr,tags)
	D0		A0	A1	A2
	
	APTR WZ_OpenSurfaceA(STRPTR, APTR,struct TagItem *);

	Surface	= WZ_OpenSurface(name, memaddr,firsttag, ... )
	
	APTR WZ_OpenSurface(STRPTR, APTR,Tag, ... );

FUNCTION
	This function opens a surface description for usage. If the file
	was already loaded you can pass 0 for name and specify its address
	as "memadr".
	Usually, "name" should be a pointer to the name of the file and
	"memadr" should be NULL.

WARNING
	If in address is passed using memadr you have to make sure that the
	surface description will only be initialised once. This means that
	programs which use this capability must not be loaded resident!

ARGUMENTS
	name 	- a pointer to the name of the file (NULL-terminated)
	memaddr - if "name" was not specified: a pointer into the memory
		  location which contains the surface description
	tags 	- the following tags are defined:
		
	  SFH_Locale - (V37) , struct Locale *
		a pointer as returned by locale.library/OpenLocale() if you
		do not want to use the system's standard locale.
	  SFH_Catalog - (V37), struct Catalog *
		a pointer to the opened Catalogue file, see locale.library/
		OpenCatalog().
	  SFH_AutoInit - (V37), BOOL
		If the surface description is to be opened from a fixed
		memory location, setting this to FALSE will disable its
		initialisation. In that case the surface description MUST
		have been already initialised! Defaults to TRUE. 

RESULTS
	Surface	- a pointer or NULL if an error occurred

SEE ALSO
	WZ_CloseSurface(), WZ_SnapShotA()

wizard.library/WZ_OpenWindowA()

NAME
	WZ_OpenWindowA -- Opens a window
	WZ_OpenWindow  -- variable arguments version for higher programming languages
	
SYNOPSIS
	window	= WZ_OpenWindowA(winhandle, newwin, tags)
	D0			A0	A1	A2
	
	struct Window *WZ_OpenWindowA(struct WizardWindowHandle *,
			struct NewWindow *, struct TagItem *);

	window	= WZ_OpenWindow(winhandle, newwin, firstTag, ... )
	
	struct Window *WZ_OpenWindow(struct WizardWindowHandle *,
			struct NewWindow *, Tag, ... );

FUNCTION
	Opens a window similar to the Intuition function.

WARNING
	Using the Intuition function will lead to unpredictable results
	during the layout process.

ARGUMENTS
	winhandle	- a WizardWindowHandle as obtained by a call to
			  WZ_AllocWindowHandle()
	newwin		- a NewWindowStruct or NULL, e.g. as returned by
			  WZ_CreateWindowObj().
	tags 		- Tags (e.g. WA_AutoAdjust)

RESULTS
	window		- a pointer to a Window structure or NULL if an
			  error occurred

SEE ALSO
	WZ_CloseWindow()

wizard.library/WZ_SnapShotA()

NAME
	WZ_SnapShotA -- Fixes window positions and dimensions
	WZ_SnapShot -- variable arguments version for higher programming languages
	
SYNOPSIS
	success	= WZ_SnapShotA(surface,tags)
	D0		A0
	
	BOOL	WZ_SnapShot(APTR,struct TagItem *);

	success	= WZ_SnapShot(surface, firstTag, ... )
	D0		A0
	
	BOOL	WZ_SnapShot(APTR, Tag, ... );

FUNCTION
	This function saves the current window position and dimensions back
	to the surface description. Windows which are yet open are ignored.
	Usually you will want to call this function at the end of the
	program.

WARNING
	If WZ_OpenSurface() was called with the "memadr" parameter this
	function will fail!

ARGUMENTS
	surface	- the value returned by a call to WZ_OpenSurface()
	tags - currently none

RESULTS
	success	- TRUE on success or FALSE if an error occured

SEE ALSO
	WZ_OpenSurface(), WZ_CloseSurface()

wizard.library/WZ_UnlockWindow

NAME
	WZ_UnlockWindow -- Unlocks a window
	
SYNOPSIS
	RESULTS = WZ_UnlockWindow(winhandle)
	D0		A0
	
	ULONG	WZ_UnlockWindow(struct WizardWindowHandle *);

FUNCTION
	Reallows user input in a window.

WARNING
	If the window was not previously locked fatal system errors may occur.
	If it was locked multiple times it must be unlocked exactly that often.
	This means that a single call does not necessarily actually reenable
	user input.

ARGUMENTS
	winhandle	- WizardWindowHandle whose window is to be unlocked

RESULTS
	RESULTS	- returns the number of WZ_UnlockWindow() calls left that are
			  required to enable user input. NULL if the window receives user
			  input again. A value of -1 indicates a fatal error.

SEE ALSO
	WZ_LockWindow()

wizard.library/WZ_UnlockWindows

NAME
	WZ_UnlockWindows -- Unlocks all windows
	
SYNOPSIS
	WZ_UnlockWindows(surface)
			A0
	
	VOID WZ_UnlockWindows(APTR);

FUNCTION
	This function performs an WZ_UnlockWindow() for all windows belonging
	to a surface description.

ARGUMENTS
	surface	- Returnwert von WZ_OpenSurface()

SEE ALSO
	WZ_LockWindows()


