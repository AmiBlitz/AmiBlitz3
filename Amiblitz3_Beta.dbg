00000008 <AmiBlitz3.ab2@0> XTRAEndPadBytes:     Dc.l 0                             ; 4 fill/pad/termination bytes for the xtra write function  tomsmart1
00000014 <AmiBlitz3.ab2@44> optimize 5                               ; don't use FPU (opt. 4)
00000076 <AmiBlitz3.ab2@67> !initasm                                 ; some initial mumbo jumbo
000000A0 <AmiBlitz3.ab2@68> !basic
000000AC <AmiBlitz3.ab2@73> cli_verbose = -1
000000B2 <AmiBlitz3.ab2@74> CLIMode     = False
000000C8 <AmiBlitz3.ab2@75> MaxLen cli_tempstr.s = 1024
000000E4 <AmiBlitz3.ab2@76> GetCurrentDirName_ &cli_tempstr,1024  ; get the current dir to restore it on exit
0000010E <AmiBlitz3.ab2@77> cli_path.s = Peek.s(&cli_tempstr)
0000010E <library_offsets.ab3@1> XINCLUDE "/Shared/library_offsets.ab3"   ; needed includes
0000010E <AmiBlitz3.ab2@81> ;GetMsg                       SET -$174
0000010E <dos.include.bb2@1> XINCLUDE "dos.include.bb2"
0000010E <error.include.bb2@1> XINCLUDE "error.include.bb2"
00000146 <error.include.bb2@62> If ver.s=""
0000016E <error.include.bb2@63>   error_title.s     = "ERROR:"
00000196 <error.include.bb2@64>   message_title.s   = "Message:"
000001BE <error.include.bb2@65>   question_title.s  = "Question:"
000001C4 <error.include.bb2@66> Else
000001F8 <error.include.bb2@67>   error_title.s     = ver.s
0000022C <error.include.bb2@68>   message_title.s   = ver.s
00000260 <error.include.bb2@69>   question_title.s  = ver.s
0000027C <error.include.bb2@73> WbToScreen 0
00000296 <error.include.bb2@99> Statement error_SetFlags {flags.l}
000002A2 <error.include.bb2@101>   \flags = flags
000002A6 <error.include.bb2@102> End Statement
000002B4 <error.include.bb2@104> errorengine\flags = #error_requester
000002E6 <error.include.bb2@124> Statement error {text.s,@errorcode.l,@onlyonce.l}
0000036A <error.include.bb2@126>   text.s = Replace$(text.s,Chr$(0),"\\n")
00000384 <error.include.bb2@128>   If (\flags&#error_requester)
000003BC <error.include.bb2@129>     If onlyonce=False OR \err_code><errorcode OR errorcode=-1
0000041C <error.include.bb2@130>       If Used Window<0 Then *win.Window=0:Else *win.Window=Peek.l(Addr Window(Used Window))
0000042A <error.include.bb2@132>       \req\es_StructSize   = SizeOf.EasyStruct
00000438 <error.include.bb2@133>       \req\es_Flags        = 0;-1
00000446 <error.include.bb2@134>       \req\es_Title        = &error_title.s
00000454 <error.include.bb2@135>       \req\es_TextFormat   = &text.s
0000047C <error.include.bb2@136>       gadget.s             = "OK"
0000048A <error.include.bb2@137>       \req\es_GadgetFormat = &gadget.s
00000492 <error.include.bb2@138>       flags.l              = #IDCMP_RAWKEY
000004C4 <error.include.bb2@140>       EasyRequestArgs_ *win,\req,&flags,0
000004DE <error.include.bb2@145>   If (\flags&#error_stdout)
00000516 <error.include.bb2@146>     If onlyonce=False OR \err_code><errorcode OR errorcode=-1
0000051C <error.include.bb2@147>       DefaultOutput
00000560 <error.include.bb2@148>       NPrint text.s
000005A8 <error.include.bb2@149>       If (Used Window>=0) Then WindowOutput Used Window
000005B2 <error.include.bb2@153>   \err_code = errorcode
000005CA <error.include.bb2@155> End Statement
00000604 <error.include.bb2@194> Function.l ask {text.s,buttons.s}
0000060C <error.include.bb2@196>   n.l = 0
0000062E <error.include.bb2@198>   If ((\flags&#error_autoask)=False)
0000068E <error.include.bb2@199>     If Used Window<0 Then *win.Window=0:Else *win.Window=Peek.l(Addr Window(Used Window))
0000069C <error.include.bb2@201>     \req\es_StructSize   = SizeOf.EasyStruct
000006AA <error.include.bb2@202>     \req\es_Flags        = 0
000006B8 <error.include.bb2@203>     \req\es_Title        = &question_title
000006C6 <error.include.bb2@204>     \req\es_TextFormat   = &text
0000072C <error.include.bb2@205>     If buttons ="" Then buttons = "OK"
0000073A <error.include.bb2@206>     \req\es_GadgetFormat = &buttons
00000770 <error.include.bb2@209>     n.l=EasyRequestArgs_ (*win,\req,0,0)
0000077A <error.include.bb2@213>   Function Return n
00000796 <error.include.bb2@214> End Function
000007AC <error.include.bb2@301> Statement error_Clear {}
000007B4 <error.include.bb2@303>   \err_code = False
000007B6 <error.include.bb2@304> End Statement
000007B6 <multilist.include.bb2@1> XINCLUDE "multilist.include.bb2"
000007B6 <strptr.include.bb2@1> XINCLUDE "strptr.include.bb2"
000007B6 <useful.include.bb2@1> XINCLUDE "useful.include.bb2"
000007E4 <useful.include.bb2@220> Function.s lindex {string.s,ind.l}
000007EE <useful.include.bb2@221> ptr.l = &string
00000802 <useful.include.bb2@222> l.l   = FLen(string)
0000080A <useful.include.bb2@223> pos.l = 0
00000832 <useful.include.bb2@224> ret.s = ""
00000858 <useful.include.bb2@225> While ind>=0 AND pos<l
00000874 <useful.include.bb2@228>     c.w = Peek.b(ptr+pos) &$FF
00000882 <useful.include.bb2@229>     pos+1
000008A4 <useful.include.bb2@230>   Until c>32 OR pos>=l
000008AC <useful.include.bb2@233>   curly.l  = 0
000008B4 <useful.include.bb2@234>   quoted.l = 0
000008BA <useful.include.bb2@235>   Select c
000008D6 <useful.include.bb2@236>     Case @"{" : curly+1
000008F8 <useful.include.bb2@237>     Case $22  : quoted=1-quoted
0000090A <useful.include.bb2@238>     Case 0
00000910 <useful.include.bb2@239>     Default
00000956 <useful.include.bb2@240>       If ind=0 AND c>32 Then ret.s = Chr$(c)
00000958 <useful.include.bb2@241>   End Select
00000966 <useful.include.bb2@243>   If pos<l
00000982 <useful.include.bb2@245>        c.w = Peek.b(ptr+pos) &$FF
000009E0 <useful.include.bb2@246>        If ind=0 Then ret.s + Chr$(c)
000009E6 <useful.include.bb2@247>        Select c
000009F4 <useful.include.bb2@248>          Case @"{"
00000A08 <useful.include.bb2@249>            If quoted=False
00000A1A <useful.include.bb2@250>              If curly>0
00000A28 <useful.include.bb2@251>                curly+1
00000A2E <useful.include.bb2@252>              Else
00000A38 <useful.include.bb2@253>                c=-1
00000A4C <useful.include.bb2@256>          Case @"}"
00000A60 <useful.include.bb2@257>            If quoted=False
00000A72 <useful.include.bb2@258>              If curly>0
00000A80 <useful.include.bb2@259>                curly-1
00000A9C <useful.include.bb2@260>                If curly=0 Then c=-1
00000AA2 <useful.include.bb2@261>              Else
00000AB4 <useful.include.bb2@265>          Case $22
00000ABE <useful.include.bb2@266>            If quoted
00000AC6 <useful.include.bb2@267>              quoted=0
00000AE2 <useful.include.bb2@268>              If curly=0 Then c=-1
00000AE8 <useful.include.bb2@269>            Else
00000B12 <useful.include.bb2@270>              If curly=0 Then c=-1 : Else quoted=1
00000B18 <useful.include.bb2@272>          Default
00000B26 <useful.include.bb2@273>            If c<=32
00000B3E <useful.include.bb2@274>              If curly  Then c + 256
00000B56 <useful.include.bb2@275>              If quoted Then c + 256
00000B6E <useful.include.bb2@276>              If c<=32 Then c=-1
00000B70 <useful.include.bb2@278>        End Select
00000B7E <useful.include.bb2@279>        pos+1
00000BA0 <useful.include.bb2@280>     Until c<=32 OR pos>=l
00000C32 <useful.include.bb2@281>     If ind=0 AND c=-1 Then ret.s = Left$(ret.s,FLen(ret.s)-1)
00000C40 <useful.include.bb2@283>   ind-1
00000C46 <useful.include.bb2@284> Wend
00000C70 <useful.include.bb2@285> Function Return ret.s
00000C8E <useful.include.bb2@286> End Function
00000C8E <strptr.include.bb2@31> 
00000CB8 <strptr.include.bb2@33> str_MemPoolHeader = CreatePool_(0,32768,32768)
00000CD2 <strptr.include.bb2@84> Statement FAST str_Free {ntptr.l}
00000CDC <strptr.include.bb2@85> If ntptr
00000D2C <strptr.include.bb2@86>   !str_Free{ntptr}
00000D30 <strptr.include.bb2@88> End Statement
00000D52 <strptr.include.bb2@103> Statement FAST str_WritePtr{ntptr.l,textptr.l,@clength.l}
00000D5C <strptr.include.bb2@104> If ntptr
00000DAC <strptr.include.bb2@105>   !str_Free{ntptr}
00000DB6 <strptr.include.bb2@106>   If textptr
00000DC8 <strptr.include.bb2@107>     If clength<0
00000DD0 <strptr.include.bb2@108>       clength.l=0
00000DFE <strptr.include.bb2@109>       While Peek.b(textptr+clength):clength+1:Wend
00000E10 <strptr.include.bb2@111>     If clength>0
00000E38 <strptr.include.bb2@112>       *str.str = AllocPooled_ (str_MemPoolHeader,clength+1+4)
00000E42 <strptr.include.bb2@113>       If *str
00000E50 <strptr.include.bb2@114>         Poke.l ntptr,*str
00000E5A <strptr.include.bb2@115>         *str\size=clength
00000E80 <strptr.include.bb2@116>         CopyMem_ textptr,&*str\str,clength
00000E9A <strptr.include.bb2@117>         Poke.b *str + 4 + clength,0
00000E9E <strptr.include.bb2@122> End Statement
00000ECC <strptr.include.bb2@137> Statement str_Write{ntptr.l,text.s}
00000ED6 <strptr.include.bb2@138> If ntptr
00000F26 <strptr.include.bb2@139>   !str_Free{ntptr}
00000F3A <strptr.include.bb2@140>   l.l = FLen(text.s)
00000F4C <strptr.include.bb2@141>   If l>0
00000F74 <strptr.include.bb2@142>     *str.str = AllocPooled_ (str_MemPoolHeader,l+1+4)
00000F7E <strptr.include.bb2@143>     If *str
00000F8C <strptr.include.bb2@144>       Poke.l ntptr,*str
00000F96 <strptr.include.bb2@145>       *str\size=l
00000FBE <strptr.include.bb2@146>       CopyMem_ &text.s,&*str\str,l
00000FD8 <strptr.include.bb2@147>       Poke.b *str + 4 + l,0
00000FF0 <strptr.include.bb2@151> End Statement
0000100A <strptr.include.bb2@213> Function.s str_Read {ntptr.l}
00001014 <strptr.include.bb2@214> If ntptr
00001022 <strptr.include.bb2@215>   *str.str=Peek.l(ntptr)
00001054 <strptr.include.bb2@216>   If *str Then Function Return Peeks$(&*str\str,*str\size)
00001072 <strptr.include.bb2@218> Function Return ""
0000107C <strptr.include.bb2@219> End Function
00001092 <strptr.include.bb2@221> Statement str_FreeMemPool{}
0000109C <strptr.include.bb2@222> If str_MemPoolHeader
000010AC <strptr.include.bb2@223>   DeletePool_ str_MemPoolHeader
000010B4 <strptr.include.bb2@224>   str_MemPoolHeader=0
000010B6 <strptr.include.bb2@226> End Statement
000010E4 <strptr.include.bb2@227> !autoexit{str_FreeMemPool}
000010E4 <multilist.include.bb2@44> 
000010FA <multilist.include.bb2@61> MaxLen ml_tempstring.s = #MAX_MLTEMPSTRING
00001134 <multilist.include.bb2@78> Function.s _ml_AddPart {pathpart.s,filepart.s}
00001168 <multilist.include.bb2@80> ml_tempstring = pathpart
0000118E <multilist.include.bb2@81> AddPart_ &ml_tempstring,&filepart.s,#MAX_MLTEMPSTRING
000011AE <multilist.include.bb2@82> Function Return Peek.s(&ml_tempstring)
000011CE <multilist.include.bb2@83> End Function
000011F8 <multilist.include.bb2@100> Function.s _ml_FilePart {filename.s}
0000120E <multilist.include.bb2@101> fptr.l = FilePart_(&filename.s)
00001218 <multilist.include.bb2@102> If fptr
00001240 <multilist.include.bb2@103>   filepart.s = Peek.s(fptr)
00001246 <multilist.include.bb2@104> Else
0000126E <multilist.include.bb2@105>   filepath.s = ""
00001298 <multilist.include.bb2@107> Function Return filepart.s
000012B6 <multilist.include.bb2@108> End Function
000012FC <multilist.include.bb2@153> Function.l ml_AddNode {*prev_node.ml_node,typ.b,label_text.s,user_text.s,user_data.l}
0000131C <multilist.include.bb2@154> *node.ml_node = AllocMem_ (SizeOf.ml_node,#MEMF_CLEAR)
00001326 <multilist.include.bb2@155> If *node
00001332 <multilist.include.bb2@156>   \prev_node = *prev_node
0000133C <multilist.include.bb2@158>   If *prev_node
00001348 <multilist.include.bb2@159>     \next_node = *prev_node\next_node
00001352 <multilist.include.bb2@160>     *prev_node\next_node = *node
00001358 <multilist.include.bb2@161>   Else
00001364 <multilist.include.bb2@162>     \next_node = 0
00001372 <multilist.include.bb2@165>   If \next_node
00001382 <multilist.include.bb2@166>     \next_node\prev_node = *node
00001390 <multilist.include.bb2@169>   \typ      = typ
000013AC <multilist.include.bb2@170>   str_WritePtr {&\label_text,&label_text.s}
000013C8 <multilist.include.bb2@171>   str_WritePtr {&\user_text ,&user_text.s}
000013D4 <multilist.include.bb2@172>   \user_data = user_data
000013DE <multilist.include.bb2@173>   \expanded = False
000013E8 <multilist.include.bb2@175> Function Return *node
00001404 <multilist.include.bb2@176> End Function
0000144A <multilist.include.bb2@243> Function.l ml_AddNodeSorted {*next_node.ml_node,typ.b,label_text.s,user_text.s,user_data.l}
00001454 <multilist.include.bb2@244> If *next_node
00001474 <multilist.include.bb2@245>   *node.ml_node = AllocMem_ (SizeOf.ml_node,#MEMF_CLEAR)
0000147E <multilist.include.bb2@246>   If *node
0000148C <multilist.include.bb2@247>     *parent_node.ml_node = *next_node\parent_node
000014B2 <multilist.include.bb2@248>     While *next_node\prev_node:*next_node = *next_node\prev_node:Wend
000014BA <multilist.include.bb2@249>     *prev_node.ml_node = 0
00001506 <multilist.include.bb2@250>     b.s = UCase$(label_text.s)
00001516 <multilist.include.bb2@251>     If typ><#node_tree
0000151C <multilist.include.bb2@252>       breakme.l = False
00001536 <multilist.include.bb2@253>       While *next_node AND breakme = False
0000154C <multilist.include.bb2@254>         If *next_node\typ=#node_tree
00001552 <multilist.include.bb2@255>           *prev_node = *next_node
0000155C <multilist.include.bb2@256>           *next_node = *next_node\next_node
00001562 <multilist.include.bb2@257>         Else
00001568 <multilist.include.bb2@258>           breakme.l = True
0000156E <multilist.include.bb2@260>       Wend
00001574 <multilist.include.bb2@263>     breakme.l = False
0000158E <multilist.include.bb2@264>     While *next_node AND breakme=False
000015E0 <multilist.include.bb2@266>       a.s = UCase$(str_Read{&*next_node\label_text})
00001640 <multilist.include.bb2@267>       If a.s<b.s AND typ=*next_node\typ
00001646 <multilist.include.bb2@269>         *prev_node = *next_node
00001650 <multilist.include.bb2@270>         *next_node = *next_node\next_node
00001656 <multilist.include.bb2@272>       Else
0000165C <multilist.include.bb2@273>         breakme=True
00001662 <multilist.include.bb2@275>     Wend
00001694 <multilist.include.bb2@277>     If *prev_node=0 AND *parent_node><0 Then *parent_node\child_node = *node
000016AA <multilist.include.bb2@279>     If *next_node Then *next_node\prev_node = *node
000016BE <multilist.include.bb2@280>     If *prev_node Then *prev_node\next_node = *node
000016CA <multilist.include.bb2@282>     \prev_node = *prev_node
000016D4 <multilist.include.bb2@283>     \next_node = *next_node
000016E0 <multilist.include.bb2@284>     \parent_node = *parent_node
000016EE <multilist.include.bb2@285>     \child_node = 0
000016FC <multilist.include.bb2@287>     \typ      = typ
00001718 <multilist.include.bb2@288>     str_WritePtr {&\label_text,&label_text.s}
00001734 <multilist.include.bb2@289>     str_WritePtr {&\user_text ,&user_text.s}
00001740 <multilist.include.bb2@290>     \user_data = user_data
0000174A <multilist.include.bb2@291>     \expanded = False
0000176E <multilist.include.bb2@292>     If \parent_node Then \parent_node\typ = #node_tree
00001774 <multilist.include.bb2@294> Else
000017DE <multilist.include.bb2@295>   *node = ml_AddNode {0,typ,label_text.s,user_text.s,user_data.l}
000017E8 <multilist.include.bb2@297> Function Return *node
00001804 <multilist.include.bb2@298> End Function
0000184A <multilist.include.bb2@320> Function.l ml_AddChildSorted {*parent_node.ml_node,typ.b,label_text.s,user_text.s,user_data.l}
00001854 <multilist.include.bb2@321> If *parent_node
00001874 <multilist.include.bb2@322>   *node.ml_node = AllocMem_ (SizeOf.ml_node,#MEMF_CLEAR)
0000187E <multilist.include.bb2@323>   If *node
00001886 <multilist.include.bb2@324>     *prev_node.ml_node = 0
00001894 <multilist.include.bb2@325>     *next_node.ml_node = *parent_node\child_node
000018E0 <multilist.include.bb2@327>     b.s = UCase$(label_text.s)
000018F0 <multilist.include.bb2@328>     If typ><#node_tree
000018F6 <multilist.include.bb2@329>       breakme.l = False
00001910 <multilist.include.bb2@330>       While *next_node AND breakme = False
00001926 <multilist.include.bb2@331>         If *next_node\typ=#node_tree
0000192C <multilist.include.bb2@332>           *prev_node = *next_node
00001936 <multilist.include.bb2@333>           *next_node = *next_node\next_node
0000193C <multilist.include.bb2@334>         Else
00001942 <multilist.include.bb2@335>           breakme.l = True
00001948 <multilist.include.bb2@337>       Wend
0000194E <multilist.include.bb2@340>     breakme.l = False
00001968 <multilist.include.bb2@341>     While *next_node AND breakme=False
000019BA <multilist.include.bb2@343>       a.s = UCase$(str_Read{&*next_node\label_text})
00001A1A <multilist.include.bb2@344>       If a.s<b.s AND typ=*next_node\typ
00001A20 <multilist.include.bb2@345>         *prev_node = *next_node
00001A2A <multilist.include.bb2@346>         *next_node = *next_node\next_node
00001A30 <multilist.include.bb2@348>       Else
00001A36 <multilist.include.bb2@349>         breakme=True
00001A3C <multilist.include.bb2@351>     Wend
00001A5A <multilist.include.bb2@353>     If *prev_node=0 Then *parent_node\child_node = *node
00001A70 <multilist.include.bb2@354>     If *next_node Then *next_node\prev_node = *node
00001A84 <multilist.include.bb2@355>     If *prev_node Then *prev_node\next_node = *node
00001A90 <multilist.include.bb2@357>     \prev_node = *prev_node
00001A9A <multilist.include.bb2@358>     \next_node = *next_node
00001AA6 <multilist.include.bb2@359>     \parent_node = *parent_node
00001AB4 <multilist.include.bb2@360>     \child_node = 0
00001AC2 <multilist.include.bb2@362>     \typ      = typ
00001ADE <multilist.include.bb2@363>     str_WritePtr {&\label_text,&label_text.s}
00001AFA <multilist.include.bb2@364>     str_WritePtr {&\user_text ,&user_text.s}
00001B06 <multilist.include.bb2@365>     \user_data = user_data
00001B10 <multilist.include.bb2@366>     \expanded = False
00001B22 <multilist.include.bb2@367>     \parent_node\typ = #node_tree
00001B28 <multilist.include.bb2@369> Else
00001B92 <multilist.include.bb2@370>   *node = ml_AddNode {0,typ,label_text.s,user_text.s,user_data.l}
00001B9C <multilist.include.bb2@372> Function Return *node
00001BB8 <multilist.include.bb2@373> End Function
00001BD2 <multilist.include.bb2@390> Function.l ml_GetFirstNode {*node.ml_node}
00001C02 <multilist.include.bb2@391> If *node Then While *node\prev_node:*node=*node\prev_node:Wend
00001C0C <multilist.include.bb2@392> Function Return *node
00001C12 <multilist.include.bb2@393> End Function
00001C2C <multilist.include.bb2@406> Statement ml_RemoveNode {*node.ml_node}
00001C36 <multilist.include.bb2@407> If *node
00001C58 <multilist.include.bb2@408>   If \prev_node Then \prev_node\next_node = \next_node
00001C7C <multilist.include.bb2@409>   If \next_node Then \next_node\prev_node = \prev_node
00001C8E <multilist.include.bb2@410>   If \parent_node
00001CA6 <multilist.include.bb2@411>     If \parent_node\child_node = *node
00001CBA <multilist.include.bb2@412>       \parent_node\child_node = \next_node
00001CCC <multilist.include.bb2@415>   While \child_node
00001CDC <multilist.include.bb2@416>     ml_RemoveNode {\child_node}
00001CE2 <multilist.include.bb2@417>   Wend
00001CF2 <multilist.include.bb2@418>   str_Free {&\label_text}
00001D02 <multilist.include.bb2@419>   str_Free {&\user_text}
00001D1C <multilist.include.bb2@420>   FreeMem_ *node,SizeOf.ml_node
00001D20 <multilist.include.bb2@422> End Statement
00001D3A <multilist.include.bb2@439> Function.l ml_GetNextNode {*node.ml_node}
00001D44 <multilist.include.bb2@440> If *node
00001D50 <multilist.include.bb2@441>   Function Return *node\next_node
00001D56 <multilist.include.bb2@442> Else
00001D62 <multilist.include.bb2@443>   Function Return 0
00001D68 <multilist.include.bb2@445> End Function
00001D82 <multilist.include.bb2@501> Function.s ml_GetLabelString{*node.ml_node}
00001D8C <multilist.include.bb2@502> If *node
00001DBC <multilist.include.bb2@503>   Function Return str_Read{&\label_text}
00001DC2 <multilist.include.bb2@504> Else
00001DE0 <multilist.include.bb2@505>   Function Return ""
00001DEA <multilist.include.bb2@507> End Function
00001E04 <multilist.include.bb2@565> Function.s ml_GetUserString{*node.ml_node}
00001E0E <multilist.include.bb2@566> If *node
00001E3E <multilist.include.bb2@567>   Function Return str_Read{&\user_text}
00001E44 <multilist.include.bb2@568> Else
00001E62 <multilist.include.bb2@569>   Function Return ""
00001E6C <multilist.include.bb2@571> End Function
00001E86 <multilist.include.bb2@585> Statement ml_RemoveAllNodes {*node.ml_node}
00001EB6 <multilist.include.bb2@586> If *node Then While *node\prev_node:*node=*node\prev_node:Wend
00001EC0 <multilist.include.bb2@588> While *node
00001ECA <multilist.include.bb2@589>   *next_node.ml_node=*node\next_node
00001EEC <multilist.include.bb2@590>   If \prev_node Then \prev_node\next_node = \next_node
00001F10 <multilist.include.bb2@591>   If \next_node Then \next_node\prev_node = \prev_node
00001F22 <multilist.include.bb2@592>   If \parent_node
00001F3A <multilist.include.bb2@593>     If \parent_node\child_node = *node
00001F4E <multilist.include.bb2@594>       \parent_node\child_node = \next_node
00001F60 <multilist.include.bb2@597>   While \child_node
00001F70 <multilist.include.bb2@598>     ml_RemoveNode {\child_node}
00001F76 <multilist.include.bb2@599>   Wend
00001F86 <multilist.include.bb2@600>   str_Free {&\label_text}
00001F96 <multilist.include.bb2@601>   str_Free {&\user_text}
00001FB0 <multilist.include.bb2@602>   FreeMem_ *node,SizeOf.ml_node
00001FB6 <multilist.include.bb2@603>   *node = *next_node
00001FBC <multilist.include.bb2@604> Wend
00001FC0 <multilist.include.bb2@605> End Statement
00001FDA <multilist.include.bb2@618> Statement ml_RemoveAllChildren {*node.ml_node}
00001FE4 <multilist.include.bb2@619> If *node
00001FF6 <multilist.include.bb2@620>   While \child_node
00002006 <multilist.include.bb2@621>     ml_RemoveNode {\child_node}
0000200C <multilist.include.bb2@622>   Wend
00002010 <multilist.include.bb2@624> End Statement
0000202A <multilist.include.bb2@638> Statement ml_SetExpanded {*node.ml_node}
00002034 <multilist.include.bb2@639> If *node
0000203E <multilist.include.bb2@640>   \expanded = True
00002042 <multilist.include.bb2@642> End Statement
0000205C <multilist.include.bb2@656> Statement ml_SetCollapsed {*node.ml_node}
00002066 <multilist.include.bb2@657> If *node
00002070 <multilist.include.bb2@658>   \expanded = False
00002074 <multilist.include.bb2@660> End Statement
0000208E <multilist.include.bb2@713> Function.l ml_GetRowHeight {*node.ml_node}
00002096 <multilist.include.bb2@714> lpos.l = 0
000020A0 <multilist.include.bb2@715> While *node
000020B6 <multilist.include.bb2@716>   If \typ = #node_tree
000020CA <multilist.include.bb2@717>     If \expanded
000020EE <multilist.include.bb2@718>       lpos + ml_GetRowHeight{\child_node}
000020FC <multilist.include.bb2@721>   lpos + 1
00002106 <multilist.include.bb2@722>   *node=\next_node
0000210C <multilist.include.bb2@723> Wend
00002116 <multilist.include.bb2@724> Function Return lpos
0000211C <multilist.include.bb2@725> End Function
0000213A <multilist.include.bb2@742> Function.l ml_GetNode {*node.ml_node,spos.l}
00002142 <multilist.include.bb2@743> lpos.l = 0
0000214C <multilist.include.bb2@744> While *node
0000216A <multilist.include.bb2@745>   If lpos=spos Then Poke.l ?getnode_res,*node
00002180 <multilist.include.bb2@746>   If \typ = #node_tree
00002194 <multilist.include.bb2@747>     If \expanded
000021C8 <multilist.include.bb2@748>       lpos + ml_GetNode{\child_node,spos-lpos-1}
000021D6 <multilist.include.bb2@751>   lpos + 1
000021E0 <multilist.include.bb2@752>   *node=\next_node
000021E6 <multilist.include.bb2@753> Wend
000021F0 <multilist.include.bb2@754> Function Return lpos
000021F4 <multilist.include.bb2@756> Dc.l 0
000021FA <multilist.include.bb2@757> End Function
00002214 <multilist.include.bb2@795> Statement ml_DeactivateAll {*node.ml_node}
0000221E <multilist.include.bb2@796> While *node
00002228 <multilist.include.bb2@797>   *node\active = False
0000223E <multilist.include.bb2@798>   If \typ = #node_tree
0000224E <multilist.include.bb2@799>     ml_DeactivateAll{\child_node}
00002258 <multilist.include.bb2@801>   *node=\next_node
0000225E <multilist.include.bb2@802> Wend
00002262 <multilist.include.bb2@803> End Statement
00002284 <multilist.include.bb2@821> Function.l ml_GetPixelWidth {*rp.RastPort,*node.ml_node,sdepth.l}
0000228C <multilist.include.bb2@822> pixwidth.l=1
000022A6 <multilist.include.bb2@823> xs.l = sdepth * *rp\TxWidth*2
000022B0 <multilist.include.bb2@824> While *node
000022C6 <multilist.include.bb2@825>   If \typ = #node_tree
000022DA <multilist.include.bb2@826>     If \expanded
00002330 <multilist.include.bb2@827>      b.s = "[-] "+str_Read{&\label_text}
0000236A <multilist.include.bb2@828>      tstwidth.l = TextLength_ (*rp,&b.s,Peek.l(&b.s-4)) +xs
0000237C <multilist.include.bb2@829>      pixwidth.l = Max(tstwidth,pixwidth)
0000239E <multilist.include.bb2@830>      tstwidth.l = ml_GetPixelWidth{*rp,\child_node,sdepth+1}
000023A4 <multilist.include.bb2@831>     Else
000023FA <multilist.include.bb2@832>      b.s = "[+] "+str_Read{&\label_text}
00002434 <multilist.include.bb2@833>      tstwidth.l = TextLength_ (*rp,&b.s,Peek.l(&b.s-4)) + xs
0000243A <multilist.include.bb2@835>   Else
00002474 <multilist.include.bb2@836>     b.s = str_Read{&\label_text}
000024AE <multilist.include.bb2@837>     tstwidth.l = TextLength_ (*rp,&b.s,Peek.l(&b.s-4)) + xs
000024C0 <multilist.include.bb2@839>   pixwidth.l = Max(tstwidth,pixwidth)
000024CA <multilist.include.bb2@840>   *node=\next_node
000024D0 <multilist.include.bb2@841> Wend
000024DA <multilist.include.bb2@842> Function Return pixwidth
000024EE <multilist.include.bb2@843> End Function
00002534 <multilist.include.bb2@870> Function.l ml_Draw {*rp.RastPort,*node.ml_node,firstpos.l,lastpos.l,x.l,y.l,sdepth.l,bgpen.l,bgpen_m.l}
0000253C <multilist.include.bb2@871> lpos.l = 0
0000255A <multilist.include.bb2@872> x1.l = x + sdepth   * *rp\TxWidth ; *2
00002586 <multilist.include.bb2@873> y1.l = y - firstpos * *rp\TxHeight + *rp\TxBaseline
000025A4 <multilist.include.bb2@874> y2.l = y - firstpos * *rp\TxHeight
000025BE <multilist.include.bb2@875> SetDrMd_ *rp,1
000025D8 <multilist.include.bb2@876> While *node AND lpos<=lastpos
0000265A <multilist.include.bb2@877>   SetAPen_ *rp,bgpen:RectFill_ *rp,x,y2+lpos * *rp\TxHeight,3200,y2+(lpos+1) * *rp\TxHeight-1
0000266E <multilist.include.bb2@879>   If \active
00002686 <multilist.include.bb2@880>     SetBPen_ *rp,bgpen_m
0000268C <multilist.include.bb2@881>   Else
000026A4 <multilist.include.bb2@882>     SetBPen_ *rp,bgpen
000026BA <multilist.include.bb2@884>   If \typ = #node_tree
000026D4 <multilist.include.bb2@886>     SetAPen_ *rp,2
000026E8 <multilist.include.bb2@887>     If \expanded
000026F6 <multilist.include.bb2@888>       If lpos>=firstpos
0000274C <multilist.include.bb2@889>         b.s = "[-] "+str_Read{&\label_text}
00002782 <multilist.include.bb2@890>         Move_ *rp,x1,y1+lpos * *rp\TxHeight
000027B2 <multilist.include.bb2@891>         Text_ *rp,&b.s,Peek.l(&b.s-4)
0000283A <multilist.include.bb2@893>       lpos + ml_Draw{*rp,\child_node,firstpos-lpos-1,lastpos-lpos-1,x,y,sdepth+1,bgpen,bgpen_m}
00002840 <multilist.include.bb2@894>     Else
0000284E <multilist.include.bb2@895>       If lpos>=firstpos
000028A4 <multilist.include.bb2@896>         b.s = "[+] "+str_Read{&\label_text}
000028DA <multilist.include.bb2@897>         Move_ *rp,x1,y1+lpos * *rp\TxHeight
0000290A <multilist.include.bb2@898>         Text_ *rp,&b.s,Peek.l(&b.s-4)
00002910 <multilist.include.bb2@901>   Else
0000292A <multilist.include.bb2@902>     SetAPen_ *rp,1
00002938 <multilist.include.bb2@903>     If lpos>=firstpos
00002972 <multilist.include.bb2@904>       b.s = str_Read{&\label_text}
000029A8 <multilist.include.bb2@905>       Move_ *rp,x1,y1+lpos * *rp\TxHeight
000029D8 <multilist.include.bb2@906>       Text_ *rp,&b.s,Peek.l(&b.s-4)
000029E6 <multilist.include.bb2@909>   lpos + 1
000029F0 <multilist.include.bb2@910>   *node=\next_node
000029F6 <multilist.include.bb2@911> Wend
00002A00 <multilist.include.bb2@912> Function Return lpos
00002A14 <multilist.include.bb2@913> End Function
00002A52 <multilist.include.bb2@928> Statement ml_AddPathChild {*parent_node.ml_node,path.s,@pattern.s}
00002A5C <multilist.include.bb2@930> If *parent_node
00002AC2 <multilist.include.bb2@931>   If pattern.s = "" Then pattern.s = "~(#?.(info|bak|xtra))"
00002AE2 <multilist.include.bb2@932>   lock.l = Lock_(&path.s,#ACCESS_READ)
00002AEC <multilist.include.bb2@933>   If lock
00002B00 <multilist.include.bb2@934>     oldlock.l = CurrentDir_(lock)
00002B0A <multilist.include.bb2@935>     If oldlock
00002B72 <multilist.include.bb2@937>       buf.s = LSet$(" ",FLen(pattern.s)*3+4)
00002BA2 <multilist.include.bb2@938>       ParsePatternNoCase_ &pattern.s,&buf.s,FLen(buf.s)
00002BCC <multilist.include.bb2@939>       pattern.s = Peek.s(&buf.s)
00002BEE <multilist.include.bb2@940>       If Examine_(lock,&fib)
00002C10 <multilist.include.bb2@941>         While ExNext_(lock,&fib)
00002C94 <multilist.include.bb2@942>           filename.s = _ml_AddPart{path.s,Peek.s(&fib\fib_FileName)}
00002CAC <multilist.include.bb2@943>           If fib\fib_DirEntryType<0
00002CD4 <multilist.include.bb2@944>             If MatchPatternNoCase_ (&pattern.s,&fib\fib_FileName)
00002D6A <multilist.include.bb2@945>               *node.ml_node = ml_AddChildSorted {*parent_node,#node_simple,_ml_FilePart{filename.s},filename.s,0}
00002D70 <multilist.include.bb2@947>           Else
00002E06 <multilist.include.bb2@948>             *node.ml_node = ml_AddChildSorted {*parent_node,#node_tree,_ml_FilePart{filename.s},filename.s,1}
00002E0C <multilist.include.bb2@950>         Wend
00002E20 <multilist.include.bb2@953>       oldlock = CurrentDir_ (oldlock)
00002E30 <multilist.include.bb2@955>     UnLock_ lock
00002E5A <multilist.include.bb2@958> End Statement
00002E9C <multilist.include.bb2@976> Function.l ml_AddPathNode {*node.ml_node,path.s,@pattern.s,@alldirs.l}
00002F02 <multilist.include.bb2@978>   If pattern.s = "" Then pattern.s = "~(#?.(info|bak|xtra))"
00002F22 <multilist.include.bb2@979>   lock.l = Lock_(&path.s,#ACCESS_READ)
00002F2C <multilist.include.bb2@980>   If lock
00002F40 <multilist.include.bb2@981>     oldlock.l = CurrentDir_(lock)
00002F4A <multilist.include.bb2@982>     If oldlock
00002FB2 <multilist.include.bb2@983>       buf.s = LSet$(" ",FLen(pattern.s)*3+4)
00002FE2 <multilist.include.bb2@984>       ParsePatternNoCase_ &pattern.s,&buf.s,FLen(buf.s)
0000300C <multilist.include.bb2@985>       pattern.s = Peek.s(&buf.s)
0000302E <multilist.include.bb2@986>       If Examine_(lock,&fib)
00003050 <multilist.include.bb2@987>         While ExNext_(lock,&fib)
000030D4 <multilist.include.bb2@988>           filename.s = _ml_AddPart{path.s,Peek.s(&fib\fib_FileName)}
000030EC <multilist.include.bb2@989>           If fib\fib_DirEntryType<0
00003114 <multilist.include.bb2@990>             If MatchPatternNoCase_ (&pattern.s,&fib\fib_FileName)
000031AA <multilist.include.bb2@991>               *node.ml_node = ml_AddNodeSorted {*node,#node_simple,_ml_FilePart{filename.s},filename.s,0}
000031B0 <multilist.include.bb2@993>           Else
000031BA <multilist.include.bb2@994>              If alldirs
00003250 <multilist.include.bb2@995>                *node.ml_node = ml_AddNodeSorted {*node,#node_tree,_ml_FilePart{filename.s},filename.s,1}
00003256 <multilist.include.bb2@996>              Else
0000327E <multilist.include.bb2@997>                If MatchPatternNoCase_ (&pattern.s,&fib\fib_FileName)
00003314 <multilist.include.bb2@998>                  *node.ml_node = ml_AddNodeSorted {*node,#node_tree,_ml_FilePart{filename.s},filename.s,1}
0000331A <multilist.include.bb2@1002>         Wend
0000332E <multilist.include.bb2@1004>       oldlock = CurrentDir_ (oldlock)
0000333E <multilist.include.bb2@1006>     UnLock_ lock
0000336E <multilist.include.bb2@1008> If *node Then While *node\prev_node:*node=*node\prev_node:Wend
00003378 <multilist.include.bb2@1009> Function Return *node
000033A4 <multilist.include.bb2@1010> End Function
000033A4 <dos.include.bb2@57> XINCLUDE "useful.include.bb2"
000033BA <dos.include.bb2@60> MaxLen dos_tempstring.s = #MAX_DOSTEMPSTRING
000033C2 <dos.include.bb2@62> *dos_WBMsg.WBStartup    = 0
000033CA <dos.include.bb2@63> *dos_icon.DiskObject    = 0
000033F2 <dos.include.bb2@64> dos_iconfile.s          = ""
000033FA <dos.include.bb2@65> dos_iconmodified.l      = 0
00003422 <dos.include.bb2@66> dos_debugexe.s          = ""
0000344A <dos.include.bb2@67> dos_lastscanpatt.s      = ""
00003472 <dos.include.bb2@68> dos_lastscanpath.s      = ""
0000347A <dos.include.bb2@69> dos_lastscanflags.l     = 0
00003482 <dos.include.bb2@70> *dos_scanlist.ml_node   = 0
0000348A <dos.include.bb2@71> *dos_scanroot.ml_node   = 0
00003492 <dos.include.bb2@72> *dos_devicelist.ml_node = 0
0000349A <dos.include.bb2@73> *dos_deviceroot.ml_node = 0
000034A2 <dos.include.bb2@74> *dos_volumelist.ml_node = 0
000034AA <dos.include.bb2@75> *dos_volumeroot.ml_node = 0
000034B2 <dos.include.bb2@76> *dos_assignlist.ml_node = 0
000034BA <dos.include.bb2@77> *dos_assignroot.ml_node = 0
000034DA <dos.include.bb2@78> *dos_fib.FileInfoBlock  = AllocDosObject_ (#DOS_FIB,#TAG_DONE)
000034E2 <dos.include.bb2@79> version_iconlib.l = 0
000034EA <dos.include.bb2@80> version_doslib.l  = 0
00003512 <dos.include.bb2@82> Dim List dos_toolstring.s(0)
00003528 <dos.include.bb2@113> Function.l dos_FromBlitz{}
00003534 <dos.include.bb2@114> Function Return FromBlitz
00003538 <dos.include.bb2@115> End Function
0000354E <dos.include.bb2@128> Function.l dos_FromCLI {}
00003568 <dos.include.bb2@129> If dos_FromBlitz{} Then Function Return 0
0000357E <dos.include.bb2@130> *pr.Process = FindTask_(0)
000035A8 <dos.include.bb2@131> If *pr\pr_CLI = 0 Then succ.l=False:Else succ=True
000035B2 <dos.include.bb2@132> Function Return succ
000035B8 <dos.include.bb2@133> End Function
000035CE <dos.include.bb2@146> Function.l dos_FromWB {}
000035E8 <dos.include.bb2@147> If dos_FromBlitz{} Then Function Return 0
000035FE <dos.include.bb2@148> *pr.Process = FindTask_(0)
00003628 <dos.include.bb2@149> If *pr\pr_CLI = 0 Then succ.l=True:Else succ=False
00003632 <dos.include.bb2@150> Function Return succ
00003638 <dos.include.bb2@151> End Function
00003662 <dos.include.bb2@167> Function.l dos_GetLibVersion{library.s}
0000366E <dos.include.bb2@168> libversion.l = -1
0000368E <dos.include.bb2@169> *lib.Library=OpenLibrary_(&library.s,0)
00003698 <dos.include.bb2@170> If *lib
000036A8 <dos.include.bb2@171> libversion.l = *lib\lib_Version
000036B8 <dos.include.bb2@172> CloseLibrary_ *lib
000036C2 <dos.include.bb2@174> Function Return libversion
000036DC <dos.include.bb2@175> End Function
000036F2 <dos.include.bb2@413> Function.s dos_GetNextArg {}
00003704 <dos.include.bb2@415> arghandle\argcounter+1
0000377E <dos.include.bb2@416> If NumPars>=arghandle\argcounter Then a.s = Par$(arghandle\argcounter):Else a.s = ""
000037A8 <dos.include.bb2@417> Function Return a.s
000037C0 <dos.include.bb2@418> End Function
000037DA <dos.include.bb2@428> Function.s dos_GetArg {argc.l}
000037F4 <dos.include.bb2@430> If argc<1 Then argc=1
000037FE <dos.include.bb2@431> arghandle\argcounter = argc
00003878 <dos.include.bb2@432> If NumPars>=arghandle\argcounter Then a.s = Par$(arghandle\argcounter):Else a.s = ""
000038A2 <dos.include.bb2@433> Function Return a.s
000038BA <dos.include.bb2@434> End Function
000038D0 <dos.include.bb2@444> Function.l dos_GetNumArgs {}
000038E2 <dos.include.bb2@445> Function Return NumPars
000038E6 <dos.include.bb2@446> End Function
000038FC <dos.include.bb2@462> Statement dos_FreeArgs{}
000038FE <dos.include.bb2@463> End Statement
00003938 <dos.include.bb2@524> Function.s dos_AddPart {pathpart.s,filepart.s}
0000396C <dos.include.bb2@526> dos_tempstring = pathpart
00003992 <dos.include.bb2@527> AddPart_ &dos_tempstring,&filepart.s,#MAX_DOSTEMPSTRING
000039B2 <dos.include.bb2@528> Function Return Peek.s(&dos_tempstring)
000039D2 <dos.include.bb2@529> End Function
000039FC <dos.include.bb2@644> Function.s dos_FilePart {filename.s}
00003A12 <dos.include.bb2@645> fptr.l = FilePart_(&filename.s)
00003A1C <dos.include.bb2@646> If fptr
00003A44 <dos.include.bb2@647>   filepart.s = Peek.s(fptr)
00003A4A <dos.include.bb2@648> Else
00003A72 <dos.include.bb2@649>   filepath.s = ""
00003A9C <dos.include.bb2@651> Function Return filepart.s
00003ABA <dos.include.bb2@652> End Function
00003AE4 <dos.include.bb2@675> Function.s dos_PathPart {filename.s}
00003B54 <dos.include.bb2@676> pathpart.s = Left$(filename.s,PathPart_(&filename.s)-&filename.s)
00003B7E <dos.include.bb2@677> Function Return pathpart.s
00003B9C <dos.include.bb2@678> End Function
00003BC6 <dos.include.bb2@694> Function.s dos_ParentPath {path.s}
00003C14 <dos.include.bb2@695> Function Return dos_PathPart{path.s}
00003C32 <dos.include.bb2@696> End Function
00003C5C <dos.include.bb2@713> Function.l dos_Exist {filename.s}
00003C7C <dos.include.bb2@714> lock.l=Lock_(&filename.s,#ACCESS_READ)
00003CA8 <dos.include.bb2@715> If lock Then UnLock_ lock:succ.l=True:Else succ=False
00003CB2 <dos.include.bb2@716> Function Return succ
00003CCC <dos.include.bb2@717> End Function
00003CE6 <dos.include.bb2@735> Function.l dos_CreateDosList{flags.l}
00003CFA <dos.include.bb2@736> *doslist.DosList = LockDosList_(flags)
00003D02 <dos.include.bb2@737> *node.ml_node  = 0
00003D0C <dos.include.bb2@738> If *doslist
00003D28 <dos.include.bb2@740>     *doslist = NextDosEntry_(*doslist,flags)
00003D32 <dos.include.bb2@741>     If *doslist
00003D78 <dos.include.bb2@742>       pathname.s = LSet$("_",64)
00003DA2 <dos.include.bb2@743>       NameFromLock_ *doslist\dol_Lock,&pathname.s,64
00003DCC <dos.include.bb2@744>       pathname.s = Peek.s(&pathname)
00003E68 <dos.include.bb2@745>       !BADDR{name.s,*doslist\dol_Name}
00003EAE <dos.include.bb2@746>       name +":"
00003F16 <dos.include.bb2@747>       *node.ml_node = ml_AddNodeSorted{*node,#node_simple,name,pathname,1}
00003F2E <dos.include.bb2@749>   Until *doslist = 0
00003F3E <dos.include.bb2@750>   UnLockDosList_(flags)
00003F4C <dos.include.bb2@752> *node = ml_GetFirstNode{*node}
00003F56 <dos.include.bb2@753> Function Return *node
00003F6A <dos.include.bb2@754> End Function
00003F94 <dos.include.bb2@864> Function.l dos_CheckAssign {name.s}
00004042 <dos.include.bb2@865> If Right$(name.s,1)=":" Then name.s = UnLeft$(name.s,1)
00004058 <dos.include.bb2@866> *assignlist.DosList = LockDosList_(#LDF_READ|#LDF_ASSIGNS)
00004062 <dos.include.bb2@867> If *assignlist
0000408A <dos.include.bb2@868>   found.l = FindDosEntry_(*assignlist,&name.s,#LDF_ASSIGNS)
00004094 <dos.include.bb2@869>   If found
0000409A <dos.include.bb2@870>     succ.l = True
000040A0 <dos.include.bb2@871>   Else
000040A6 <dos.include.bb2@872>     succ.l = False
000040B8 <dos.include.bb2@874>   UnLockDosList_(#LDF_READ|#LDF_ASSIGNS)
000040C2 <dos.include.bb2@876> Function Return succ.l
000040DC <dos.include.bb2@877> End Function
0000411A <dos.include.bb2@898> Function.l dos_SetAssign {name.s,path.s,@force.l}
00004122 <dos.include.bb2@899> succ.l = 0
000041D0 <dos.include.bb2@900> If Right$(name.s,1)=":" Then name.s = UnLeft$(name.s,1)
000041E4 <dos.include.bb2@901> If force=False
00004226 <dos.include.bb2@902>   If dos_CheckAssign{name.s} Then Function Return 0
00004246 <dos.include.bb2@904> succ.l = AssignPath_(&name,&path)
00004250 <dos.include.bb2@905> Function Return succ
0000426C <dos.include.bb2@906> End Function
000042A6 <dos.include.bb2@958> Function.l dos_AddAssign{name.s,path.s}
000042AE <dos.include.bb2@959> succ.l = 0
0000435C <dos.include.bb2@960> If Right$(name.s,1)=":" Then name.s = UnLeft$(name.s,1)
00004392 <dos.include.bb2@961> If dos_CheckAssign{name.s} ; check if the assing exists...
000043B2 <dos.include.bb2@962>   lock.l = Lock_(&path,#ACCESS_READ)
000043D0 <dos.include.bb2@963>   succ.l = AssignAdd_(&name,lock.l)
000043F4 <dos.include.bb2@964>   If succ=False Then UnLock_ lock
000043FE <dos.include.bb2@966> Function Return succ
0000441A <dos.include.bb2@967> End Function
00004454 <dos.include.bb2@984> Function.l dos_RemAssign {name.s,@path.s}
00004502 <dos.include.bb2@985> If Right$(name.s,1)=":" Then name.s = UnLeft$(name.s,1)
0000453A <dos.include.bb2@986> If path=""
0000455A <dos.include.bb2@987>   succ.l = AssignLock_(&name,0)
00004560 <dos.include.bb2@988> Else
00004580 <dos.include.bb2@989>   lock.l = Lock_ (&path,#ACCESS_READ)
0000458A <dos.include.bb2@990>   If lock
000045A4 <dos.include.bb2@991>     RemAssignList_ &name,lock
000045BC <dos.include.bb2@992>     UnLock_ lock : lock=0
000045C6 <dos.include.bb2@995> Function Return succ
000045E2 <dos.include.bb2@996> End Function
0000460C <dos.include.bb2@1131> Function.s dos_GetProgDir {defaultdir.s}
0000461A <dos.include.bb2@1133> If dos_FromBlitz{}
000046E4 <dos.include.bb2@1134>   If defaultdir="" AND dos_debugexe><"" Then defaultdir=dos_PathPart{dos_debugexe}
0000470E <dos.include.bb2@1135>   Function Return defaultdir.s
00004736 <dos.include.bb2@1137> NameFromLock_ GetProgramDir_(),&dos_tempstring,#MAX_DOSTEMPSTRING
00004760 <dos.include.bb2@1138> path.s=Peek.s(&dos_tempstring)
0000478A <dos.include.bb2@1140> Function Return path.s
000047A8 <dos.include.bb2@1141> End Function
000047D2 <dos.include.bb2@1159> Function.s dos_GetProgFile {defaultexe.s}
00004844 <dos.include.bb2@1161> If defaultexe = "" Then defaultexe = dos_debugexe
0000486C <dos.include.bb2@1162> exe.s = ""
0000487A <dos.include.bb2@1163> If dos_FromBlitz{}
000048AE <dos.include.bb2@1164>   exe = defaultexe
000048BC <dos.include.bb2@1167> If dos_FromWB{}
000048DE <dos.include.bb2@1173>   exe.s = ProgPath$
000048EC <dos.include.bb2@1177> If dos_FromCLI{}
00004910 <dos.include.bb2@1178>   If GetProgramName_ (&dos_tempstring,#MAX_DOSTEMPSTRING  )
0000493A <dos.include.bb2@1179>     exe = Peek.s(&dos_tempstring)
00004964 <dos.include.bb2@1182> Function Return exe
00004982 <dos.include.bb2@1183> End Function
000049AC <dos.include.bb2@1206> Function.s dos_GetStartFile {defaultfile.s}
000049D4 <dos.include.bb2@1208> fil.s = ""
000049E2 <dos.include.bb2@1209> If dos_FromBlitz{}
00004A16 <dos.include.bb2@1210>   fil = defaultfile
00004A24 <dos.include.bb2@1213> If dos_FromWB{}
00004A32 <dos.include.bb2@1224> If dos_FromCLI{}
00004A7C <dos.include.bb2@1225>   If dos_GetNumArgs{}>0 Then fil = dos_GetArg{0}
00004AA6 <dos.include.bb2@1227> Function Return fil
00004AC4 <dos.include.bb2@1228> End Function
00004AEE <dos.include.bb2@1244> Function.s dos_GetProgIcon {defaulticon.s}
00004B46 <dos.include.bb2@1245> icon.s = dos_GetProgFile{defaulticon}
00004B70 <dos.include.bb2@1246> Function Return icon;+".info"
00004B8E <dos.include.bb2@1247> End Function
00004BA4 <dos.include.bb2@1321> Function.l dos_CloseToolTypes{}
00004BAA <dos.include.bb2@1323> succ.l = False
00004BB4 <dos.include.bb2@1324> If *dos_icon
00004BBE <dos.include.bb2@1325>   If dos_iconmodified
00004BDC <dos.include.bb2@1328>     succ=PutDiskObject_ (&dos_iconfile,*dos_icon)
00004BE2 <dos.include.bb2@1329>   Else
00004BE8 <dos.include.bb2@1330>     succ=True
00004BF8 <dos.include.bb2@1332>   FreeDiskObject_ *dos_icon
00004BFE <dos.include.bb2@1333>   dos_iconmodified = False
00004C06 <dos.include.bb2@1334>   *dos_icon        = 0
00004C2E <dos.include.bb2@1335>   dos_iconfile.s   = ""
00004C38 <dos.include.bb2@1336>   ClearList dos_toolstring()
00004C42 <dos.include.bb2@1338> Function Return succ
00004C56 <dos.include.bb2@1339> End Function
00004C6C <dos.include.bb2@1361> Statement dos_Free{}
00004C72 <dos.include.bb2@1367> dos_CloseToolTypes{}
00004C96 <dos.include.bb2@1368> If *dos_assignroot Then ml_RemoveAllNodes{*dos_assignroot} : *dos_assignroot=0 : *dos_assignnode = 0
00004CBA <dos.include.bb2@1369> If *dos_deviceroot Then ml_RemoveAllNodes{*dos_deviceroot} : *dos_deviceroot=0 : *dos_devicenode = 0
00004CDE <dos.include.bb2@1370> If *dos_volumeroot Then ml_RemoveAllNodes{*dos_volumeroot} : *dos_volumeroot=0 : *dos_volumenode = 0
00004CE4 <dos.include.bb2@1371> dos_FreeArgs{}
00004D10 <dos.include.bb2@1372> If *dos_fib Then FreeDosObject_ #DOS_FIB,*dos_fib : *dos_fib=0
00004D12 <dos.include.bb2@1373> End Statement
00004D40 <dos.include.bb2@1374> !autoexit {dos_Free}
00004D6A <dos.include.bb2@1390> Function.l dos_OpenToolTypes{filename.s}
00004DF4 <dos.include.bb2@1393> If filename.s = "" Then filename.s = dos_GetProgIcon{""}
00004EBC <dos.include.bb2@1394> If Right$(filename,5)=".info" Then filename = Left$(filename,FLen(filename)-5)
00004EC6 <dos.include.bb2@1396> If *dos_icon ; do we already have an icon open ?
00004F10 <dos.include.bb2@1397>   If filename><dos_iconfile Then dos_CloseToolTypes{}
00004F5C <dos.include.bb2@1399> If *dos_icon=0 AND filename.s><""; there is no icon open yet ? Then open it !
00004F94 <dos.include.bb2@1400>   If version_iconlib=0 Then version_iconlib = dos_GetLibVersion{"icon.library"}
00004FA6 <dos.include.bb2@1401>   If version_iconlib<36
00004FBC <dos.include.bb2@1402>     *dos_icon.DiskObject = GetDiskObject_(&filename.s)
00004FC2 <dos.include.bb2@1403>   Else
00004FD8 <dos.include.bb2@1404>     *dos_icon.DiskObject = GetDiskObjectNew_(&filename.s)
0000500C <dos.include.bb2@1406>   dos_iconfile         = filename
00005012 <dos.include.bb2@1407>   dos_iconmodified     = False
0000501C <dos.include.bb2@1409> Function Return *dos_icon
00005036 <dos.include.bb2@1410> End Function
00005080 <dos.include.bb2@1440> Function.s dos_GetToolString {toolname.s,def.s,@filename.s}
000050B6 <dos.include.bb2@1442> If dos_OpenToolTypes{filename} ; do we finally have an icon ?
000050DA <dos.include.bb2@1443>   succ.l=FindToolType_(*dos_icon\do_ToolTypes,&toolname.s)
000050E4 <dos.include.bb2@1444>   If succ ; we found it!
0000510C <dos.include.bb2@1445>     a.s=Peek.s(succ)
00005154 <dos.include.bb2@1448> If succ=False Then a.s = def.s ; set the default
0000522A <dos.include.bb2@1450> If Peek.b(&a.s)=$22 AND Peek.b(&a.s+FLen(a.s)-1)=$22 Then a.s = Mid$(a.s,2,FLen(a.s)-2)
00005254 <dos.include.bb2@1451> Function Return a.s
00005274 <dos.include.bb2@1452> End Function
000052AE <dos.include.bb2@1471> Function.l dos_GetToolState {toolname.s,@filename.s}
000052B4 <dos.include.bb2@1473> tool_exist.l  = False
000052BA <dos.include.bb2@1474> tool_active.l = False
000052C2 <dos.include.bb2@1475> res.l = 0
000052F8 <dos.include.bb2@1476> If dos_OpenToolTypes{filename}
00005306 <dos.include.bb2@1477>   ttp.l = *dos_icon\do_ToolTypes
00005310 <dos.include.bb2@1478>   If ttp
0000533C <dos.include.bb2@1479>     While Peek.l(ttp)><0 AND tool_exist=False
0000534A <dos.include.bb2@1480>       toolptr.l = Peek.l(ttp)
00005354 <dos.include.bb2@1481>       If toolptr
00005382 <dos.include.bb2@1483>         string.s   = Peek.s(toolptr)  : activated.l=True
00005400 <dos.include.bb2@1486>         nospaces.s = Replace$(string.s," ","")
00005452 <dos.include.bb2@1489>         pos.l      = Instr(nospaces,"=",1)
00005464 <dos.include.bb2@1490>         If pos>0
000054D2 <dos.include.bb2@1491>           name.s = LCase$(Left$(nospaces,pos-1))
000054D8 <dos.include.bb2@1492>         Else
00005524 <dos.include.bb2@1493>           name.s = LCase$(nospaces)
000055F2 <dos.include.bb2@1497>         If Left$(name,1)="(" Then name = Right$(name,FLen(name)-1): activated=False
000056D2 <dos.include.bb2@1498>         If activated=False AND Right$(name,1)=")" Then name = Left$(name,FLen(name)-1)
0000573E <dos.include.bb2@1500>         If name.s = LCase$(toolname)
00005744 <dos.include.bb2@1501>           tool_exist = True
00005760 <dos.include.bb2@1502>           If activated Then tool_active=True:Else tool_active=False
0000576E <dos.include.bb2@1505>       ttp + SizeOf.l
00005774 <dos.include.bb2@1506>     Wend
00005786 <dos.include.bb2@1509> If tool_exist Then res=1
0000579C <dos.include.bb2@1510> If tool_active Then res=-1
000057A6 <dos.include.bb2@1511> Function Return res
000057C2 <dos.include.bb2@1512> End Function
000057EC <dos.include.bb2@1528> Function.s dos_Trim{a.s}
0000589E <dos.include.bb2@1529> While Peek.b(&a.s)<=32 AND Peek.b(&a.s)>0:a.s=Right$(a.s,FLen(a.s)-1):Wend
00005994 <dos.include.bb2@1530> While Peek.b(&a.s+FLen(a.s)-1)<=32 AND Peek.b(&a.s+FLen(a.s)-1)>0:a.s=Left$(a.s,FLen(a.s)-1):Wend
000059BE <dos.include.bb2@1531> Function Return a.s
000059DC <dos.include.bb2@1532> End Function
00005A1A <dos.include.bb2@1551> Function.l dos_SetToolState {toolname.s,enabled.l,@filename.s}
00005A40 <dos.include.bb2@1553> If AddItem(dos_toolstring())=False Then Function Return 0
00005A46 <dos.include.bb2@1554> tool_exist.l     = False
00005A7C <dos.include.bb2@1555> If dos_OpenToolTypes{filename}
00005A8A <dos.include.bb2@1556>   ttp.l = *dos_icon\do_ToolTypes
00005A94 <dos.include.bb2@1557>   If ttp
00005AC0 <dos.include.bb2@1558>     While Peek.l(ttp)><0 AND tool_exist=False
00005ACE <dos.include.bb2@1559>       toolptr.l = Peek.l(ttp)
00005AD8 <dos.include.bb2@1560>       If toolptr
00005B06 <dos.include.bb2@1562>         string.s   = Peek.s(toolptr)  : activated.l=True
00005B5E <dos.include.bb2@1565>         nospaces.s = dos_Trim{string}
00005C2C <dos.include.bb2@1568>         If Left$(nospaces,1)="(" Then nospaces = Right$(nospaces,FLen(nospaces)-1): activated=False
00005D0C <dos.include.bb2@1569>         If activated=False AND Right$(nospaces,1)=")" Then nospaces = Left$(nospaces,FLen(nospaces)-1)
00005D5E <dos.include.bb2@1572>         pos.l      = Instr(nospaces,"=",1)
00005D70 <dos.include.bb2@1573>         If pos>0
00005E02 <dos.include.bb2@1574>           name.s = dos_Trim{LCase$(Left$(nospaces,pos-1))}
00005E08 <dos.include.bb2@1575>         Else
00005E78 <dos.include.bb2@1576>           name.s = dos_Trim{LCase$(nospaces)}
00005EE4 <dos.include.bb2@1578>         If name.s = LCase$(toolname)
00005EEA <dos.include.bb2@1579>           tool_exist = True
00005EF4 <dos.include.bb2@1581>           If activated
00005F08 <dos.include.bb2@1582>             If enabled=False
00005F66 <dos.include.bb2@1583>               dos_toolstring() = "("+nospaces+")"
00005F7C <dos.include.bb2@1584>               Poke.l ttp,&dos_toolstring()
00005F82 <dos.include.bb2@1585>               dos_iconmodified = True
00005F88 <dos.include.bb2@1587>           Else
00005F9C <dos.include.bb2@1588>             If enabled=True
00005FD6 <dos.include.bb2@1589>               dos_toolstring() = nospaces
00005FEC <dos.include.bb2@1590>               Poke.l ttp,&dos_toolstring()
00005FF2 <dos.include.bb2@1591>               dos_iconmodified = True
00006000 <dos.include.bb2@1597>       ttp + SizeOf.l
00006006 <dos.include.bb2@1598>     Wend
00006010 <dos.include.bb2@1601> Function Return tool_exist
0000602C <dos.include.bb2@1602> End Function
0000607A <dos.include.bb2@1743> Function.l dos_SetToolString {toolname.s,string.s,@filename.s,@quote.l}
000060B0 <dos.include.bb2@1745> If dos_OpenToolTypes{filename}
000060D6 <dos.include.bb2@1746>   If AddItem(dos_toolstring())=0 Then Function Return False
000060E0 <dos.include.bb2@1747>   If quote
0000615C <dos.include.bb2@1748>     dos_toolstring() = toolname.s+"=\\22"+string+"\\22"
00006162 <dos.include.bb2@1749>   Else
0000619C <dos.include.bb2@1750>     dos_toolstring() = toolname.s
000061D4 <dos.include.bb2@1751>     If string><""
00006244 <dos.include.bb2@1752>       dos_toolstring()+"="+string
00006290 <dos.include.bb2@1755>   toolname.s = LCase$(toolname.s)
00006298 <dos.include.bb2@1756>   count.l = 0
0000629E <dos.include.bb2@1757>   found.l = False
000062AC <dos.include.bb2@1759>   ttp.l = *dos_icon\do_ToolTypes
000062B6 <dos.include.bb2@1760>   If ttp
000062E2 <dos.include.bb2@1761>      While Peek.l(ttp)><0 AND found=False
000062F0 <dos.include.bb2@1762>       toolptr.l = Peek.l(ttp)
000062FA <dos.include.bb2@1763>       If toolptr
00006322 <dos.include.bb2@1764>         string.s   = Peek.s(toolptr)
000063A0 <dos.include.bb2@1765>         nospaces.s = Replace$(string.s," ","")
000063F2 <dos.include.bb2@1766>         pos.l      = Instr(nospaces,"=",1)
00006404 <dos.include.bb2@1767>         If pos>=0
00006472 <dos.include.bb2@1768>           name.s = LCase$(Left$(nospaces,pos-1))
00006478 <dos.include.bb2@1769>         Else
000064C4 <dos.include.bb2@1770>           name.s = LCase$(nospaces)
00006508 <dos.include.bb2@1772>         If name.s = toolname
0000650E <dos.include.bb2@1773>           found = True
00006524 <dos.include.bb2@1774>           Poke.l ttp,&dos_toolstring()
0000652A <dos.include.bb2@1775>           dos_iconmodified = True
00006538 <dos.include.bb2@1777>         count+1
00006546 <dos.include.bb2@1779>       ttp + SizeOf.l
0000654C <dos.include.bb2@1780>      Wend
00006560 <dos.include.bb2@1783>   If found=False
0000658E <dos.include.bb2@1784>     newtoolarray.l = AllocVec_(SizeOf.l*(count+2),#MEMF_CLEAR)
00006598 <dos.include.bb2@1785>     If newtoolarray
000065AA <dos.include.bb2@1786>       If *dos_icon\do_ToolTypes
000065D2 <dos.include.bb2@1787>         CopyMem_ *dos_icon\do_ToolTypes,newtoolarray,count*SizeOf.l
000065DE <dos.include.bb2@1789>       *dos_icon\do_ToolTypes = newtoolarray
000065F4 <dos.include.bb2@1790>       ttp.l = *dos_icon\do_ToolTypes + count*SizeOf.l
0000660A <dos.include.bb2@1791>       Poke.l ttp,&dos_toolstring()
00006620 <dos.include.bb2@1792>       Poke.l ttp+SizeOf.l,0
00006626 <dos.include.bb2@1793>       dos_iconmodified = True
0000662C <dos.include.bb2@1794>       found = True
00006632 <dos.include.bb2@1795>       dos_CloseToolTypes{}
0000664A <dos.include.bb2@1796>       FreeVec_ newtoolarray : newtoolarray = 0
00006654 <dos.include.bb2@1800> Function Return found
00006670 <dos.include.bb2@1801> End Function
0000669A <dos.include.bb2@2088> Function.s dos_RemExt {filename.s} ; ------------------------------------------------------
000066AE <dos.include.bb2@2089> m.l = FLen(filename.s)
000066EC <dos.include.bb2@2090> While w$><"."
000067D2 <dos.include.bb2@2091>   w$=Mid$(filename.s,m,1):m-1:If m=0 OR (FLen(filename.s)-m)>8 Then w$=".":m=FLen(filename.s)
000067D8 <dos.include.bb2@2092> Wend
00006828 <dos.include.bb2@2093> filename.s = Left$(filename.s,m)
00006852 <dos.include.bb2@2094> Function Return filename.s
00006870 <dos.include.bb2@2095> End Function
0000689A <dos.include.bb2@2119> Function.s dos_GetExt {filename.s} ; ------------------------------------------------------
000068AE <dos.include.bb2@2120> m.l = FLen(filename.s)
000068EC <dos.include.bb2@2121> While w$><"."
000069D2 <dos.include.bb2@2122>   w$=Mid$(filename.s,m,1):m-1:If m=0 OR (FLen(filename.s)-m)>10 Then w$=".":m=FLen(filename.s)
000069D8 <dos.include.bb2@2123> Wend
00006A4A <dos.include.bb2@2124> filename.s = Right$(filename.s,FLen(filename.s)-m-1)
00006A74 <dos.include.bb2@2125> Function Return filename.s
00006A92 <dos.include.bb2@2126> End Function
00006ACC <dos.include.bb2@2152> Function.s dos_SetExt {filename.s,extention.s}
00006B04 <dos.include.bb2@2153> If extention.s><""
00006B5C <dos.include.bb2@2154>   filename.s = dos_RemExt {filename.s}
00006BC0 <dos.include.bb2@2155>   filename.s + "." + extention.s
00006BEA <dos.include.bb2@2157> Function Return filename.s
00006C0A <dos.include.bb2@2158> End Function
00006C34 <dos.include.bb2@2175> Function.l dos_CreateDir {dir.s}
00006C3A <dos.include.bb2@2176> succ.l = False
00006C50 <dos.include.bb2@2177> *lock.l = CreateDir_(&dir.s)
00006C5A <dos.include.bb2@2178> If *lock
00006C60 <dos.include.bb2@2179>   succ.l = True
00006C70 <dos.include.bb2@2180>   UnLock_ *lock
00006C7A <dos.include.bb2@2182> Function Return succ
00006C94 <dos.include.bb2@2183> End Function
00006CC2 <dos.include.bb2@2203> Function.l dos_CheckLib{library.s,libversion.l}
00006CDC <dos.include.bb2@2204> If libversion<0 Then libversion=0
00006CFA <dos.include.bb2@2205> *lib.Library=OpenLibrary_(&library.s,libversion)
00006D04 <dos.include.bb2@2206> If *lib
00006D14 <dos.include.bb2@2207>   CloseLibrary_ *lib
00006D1C <dos.include.bb2@2208>   Function Return True
00006D24 <dos.include.bb2@2210> Function Return False
00006D3E <dos.include.bb2@2211> End Function
00006D7C <dos.include.bb2@2248> Function.l dos_CreateFileList {path.s,pattern.s,@flags.l}
00006D9C <dos.include.bb2@2250> lock.l = Lock_(&path.s,#ACCESS_READ)
00006DC2 <dos.include.bb2@2251> If lock><0 AND *dos_fib><0
00006DCA <dos.include.bb2@2252>   dos_listlength=0
00006DDE <dos.include.bb2@2253>   oldlock.l = CurrentDir_(lock)
00006DE8 <dos.include.bb2@2254>   If oldlock
00006E50 <dos.include.bb2@2255>     buf.s = LSet$(" ",FLen(pattern.s)*3+4)
00006E64 <dos.include.bb2@2256>     If flags&#dos_scan_nocasesense
00006E94 <dos.include.bb2@2257>       ParsePatternNoCase_ &pattern.s,&buf.s,FLen(buf.s)
00006E9A <dos.include.bb2@2258>     Else
00006ECA <dos.include.bb2@2259>       ParsePattern_ &pattern.s,&buf.s,FLen(buf.s)
00006EF4 <dos.include.bb2@2261>     pattern.s = Peek.s(&buf.s)
00006F14 <dos.include.bb2@2262>     If Examine_(lock,*dos_fib)
00006F34 <dos.include.bb2@2263>       While ExNext_(lock,*dos_fib)
00006FB8 <dos.include.bb2@2264>         filename.s = dos_AddPart{path.s,Peek.s(&*dos_fib\fib_FileName)}
00006FD0 <dos.include.bb2@2265>         If *dos_fib\fib_DirEntryType<0
00006FE4 <dos.include.bb2@2266>           If flags&#dos_scan_files
00006FF8 <dos.include.bb2@2267>             If flags&#dos_scan_nocasesense
0000701C <dos.include.bb2@2268>               succ.l = MatchPatternNoCase_ (&pattern.s,&*dos_fib\fib_FileName)
00007022 <dos.include.bb2@2269>             Else
00007046 <dos.include.bb2@2270>               succ = MatchPattern_ (&pattern.s,&*dos_fib\fib_FileName)
00007050 <dos.include.bb2@2272>             If succ
0000705E <dos.include.bb2@2273>               dos_listlength+1
00007072 <dos.include.bb2@2274>               If flags&#dos_scan_sorted
00007108 <dos.include.bb2@2275>                 *node.ml_node = ml_AddNodeSorted {*node,#node_simple,dos_FilePart{filename.s},filename.s,0}
0000710E <dos.include.bb2@2276>               Else
000071A4 <dos.include.bb2@2277>                 *node.ml_node = ml_AddNode       {*node,#node_simple,dos_FilePart{filename.s},filename.s,0}
000071AA <dos.include.bb2@2281>         Else
000071BE <dos.include.bb2@2282>           If flags&#dos_scan_dirs
000071CC <dos.include.bb2@2283>             dos_listlength+1
000071E0 <dos.include.bb2@2284>             If flags&#dos_scan_sorted
00007276 <dos.include.bb2@2285>               *node.ml_node = ml_AddNodeSorted {*node,#node_tree,dos_FilePart{filename.s},filename.s,1}
0000727C <dos.include.bb2@2286>             Else
00007312 <dos.include.bb2@2287>               *node.ml_node = ml_AddNode       {*node,#node_tree,dos_FilePart{filename.s},filename.s,1}
00007318 <dos.include.bb2@2291>       Wend
0000732C <dos.include.bb2@2293>     oldlock = CurrentDir_ (oldlock)
0000733C <dos.include.bb2@2295>   UnLock_ lock
0000734A <dos.include.bb2@2297> *node = ml_GetFirstNode{*node}
00007354 <dos.include.bb2@2298> Function Return *node
00007370 <dos.include.bb2@2299> End Function
0000739E <dos.include.bb2@2417> Function.l dos_SetProtect {filename.s, bits.l}
000073C0 <dos.include.bb2@2418> If SetProtection_(&filename.s,bits)
000073C8 <dos.include.bb2@2419>   Function Return True
000073D6 <dos.include.bb2@2420> Else Function Return False
000073F0 <dos.include.bb2@2422> End Function
0000741E <dos.include.bb2@2441> Function.l dos_Delete {filename.s,@respectprotection.l}
00007432 <dos.include.bb2@2442> If respectprotection=False
00007466 <dos.include.bb2@2443>   dos_SetProtect{filename,0}
00007480 <dos.include.bb2@2445> If DeleteFile_ (&filename.s)
00007488 <dos.include.bb2@2446>   Function Return True
00007496 <dos.include.bb2@2447> Else Function Return False
000074B0 <dos.include.bb2@2449> End Function
000074DA <dos.include.bb2@2585> Function.l dos_GetFileSize {filename.s}
000074E6 <dos.include.bb2@2587> size.l = -1
00007506 <dos.include.bb2@2588> lock.l=Lock_(&filename.s,#ACCESS_READ)
0000752C <dos.include.bb2@2589> If lock><0 AND *dos_fib><0
00007558 <dos.include.bb2@2590>   If Examine_(lock, *dos_fib) <> 0
00007570 <dos.include.bb2@2591>     If *dos_fib\fib_DirEntryType < 0
0000757E <dos.include.bb2@2593>       size=*dos_fib\fib_Size ; filesize
00007584 <dos.include.bb2@2594>     Else
00007590 <dos.include.bb2@2595>       size=-3                  ; drawer
00007596 <dos.include.bb2@2597>   Else
000075A2 <dos.include.bb2@2598>     size=-2        ; failed!
000075B2 <dos.include.bb2@2600>   UnLock_ lock
000075B8 <dos.include.bb2@2601> Else
000075C4 <dos.include.bb2@2602>   size=-1
000075CE <dos.include.bb2@2604> Function Return size
000075E8 <dos.include.bb2@2605> End Function
00007602 <dos.include.bb2@2712> Function.l dos_GetStackSize{@*task.Task}
00007640 <dos.include.bb2@2713> If *task=-1 OR *task=0 Then *task.Task = FindTask_(0)
0000765A <dos.include.bb2@2714> stacksize.l = (*task\tc_SPUpper - *task\tc_SPLower)
00007664 <dos.include.bb2@2715> Function Return stacksize
0000766A <dos.include.bb2@2716> End Function
0000766A <AmiBlitz3.ab2@82> 
00007678 <AmiBlitz3.ab2@84> If dos_FromCLI{}
0000767E <AmiBlitz3.ab2@85>   CLIMode.l=True
0000768A <AmiBlitz3.ab2@86>   error_SetFlags{#error_stdout}
0000768A <common.ab3@1> XINCLUDE "/Shared/common.ab3"
00007690 <common.ab3@214> JMP COMDATABASE_END
00007692 <common.ab3@215> comFunc_Default:  RTS
00007822 <common.ab3@216> greenzone:                      Ds.l 100
00007826 <common.ab3@217> comdata:                        Dc.l COMDATABASE
0000782A <common.ab3@219> comFunc_CloseGUI:               Dc.l comFunc_Default                                            ;-$8  ;close_gui
0000782E <common.ab3@220> comFunc_CreateGUI:              Dc.l comFunc_Default                                            ;-$4  ;create_whole_gui
00007832 <common.ab3@222> comFunc_OpenWindow:             Dc.l comFunc_Default                                            ;$0
00007836 <common.ab3@223> comFunc_CloseWindow:            Dc.l comFunc_Default                                            ;$4
0000783A <common.ab3@224> comFunc_MessageLoop:            Dc.l comFunc_Default                                            ;$8
0000783E <common.ab3@225> comFunc_ErrorRequest:           Dc.l comFunc_Default                                            ;$0C
00007842 <common.ab3@226> comFunc_DetokenizeSource:       Dc.l comFunc_Default                                            ;$10
00007846 <common.ab3@227> comFunc_TokenizeSource:         Dc.l comFunc_Default                                            ;$14
0000784A <common.ab3@228> comFunc_ASLFileRequest:         Dc.l comFunc_Default                                            ;$18
0000784E <common.ab3@229> comFunc_RefreshGadList:         Dc.l comFunc_Default                                            ;$1c
00007852 <common.ab3@230> comFunc_CheckEvents:            Dc.l comFunc_Default                                            ;$20
00007856 <common.ab3@232>                                 Ds.l 1                                                          ;$24
0000785A <common.ab3@234>                                 Ds.l 1                                                          ;$28   (pointer screen)
0000785E <common.ab3@235> comPtr_IntuiBase:               Ds.l 1                                                          ;$2c   (_intuibase)
00007862 <common.ab3@236> comFunc_SetStoredColors:        Dc.l comFunc_Default                                            ;$30
00007866 <common.ab3@237> comFunc_SetStoredColors2:       Dc.l comFunc_Default                                            ;$34
0000786A <common.ab3@238> comFunc_DebugTrap:              Dc.l 0                                                          ;$38
0000786E <common.ab3@239> comFunc_OpenConsole:            Dc.l comFunc_Default                                            ;$3C
00007872 <common.ab3@240> comFunc_CloseConsole:           Dc.l comFunc_Default                                            ;$40
00007876 <common.ab3@241> comFunc_ActivateGadCompilerWin: Dc.l comFunc_Default                                            ;$44
0000787A <common.ab3@242> comFunc_SetNormalPointer:       Dc.l comFunc_Default                                            ;$48
0000787E <common.ab3@243> comFunc_SetBusyPointer:         Dc.l comFunc_Default                                            ;$4C   4c 4d 4e 4f
00007886 <common.ab3@246>                                 Ds.l 2                                                          ;$50   50 51 52 53 54 55 56 57
0000788A <common.ab3@247> comFunc_CloseCompilerWin:       Dc.l comFunc_Default                                            ;$58   58 59 5a 5b
0000788C <common.ab3@248> comWord_ScreenWidth:            Ds.w 1                                                          ;$5C   5c 5d
00007890 <common.ab3@249> comPtr_CompilerWindow:          Ds.l 1                                                          ;$5E   5e 5f 60 61
00007892 <common.ab3@250> comWord__AL_0_8520:             Ds.w 1                                                          ;$62   62 63
00007896 <common.ab3@251> comFunc_DetokenizeLine:         Dc.l 0;detokenize_line                                          ;$64
0000789A <common.ab3@252> comPtr_CurrentDir:              Dc.l 0;str_currentdir                                           ;$68
0000789E <common.ab3@253> comPtr_SourceName:              Dc.l 0;str_sourcename                                           ;$6C
000078A2 <common.ab3@254> comFunc_AL_0_852E:              Dc.l 0;AL_0_8BD2                                                ;$70
000078A6 <common.ab3@255> comFunc_AL_0_8532:              Dc.l 0;AL_0_8BD6                                                ;$74
000078AE <common.ab3@256> comWord_DoTokenize:             Ds.l 2                                                          ;$78
000078B6 <common.ab3@257> comLongLong_XtraBegin:          Dc.b "tEdSdOc!"                                                 ;$80
000078BA <common.ab3@258> comPtr_FirstSourceLine:         Ds.l 1                                                          ;$88
000078BE <common.ab3@259> comPtr_LastSourceLine:          Ds.l 1                                                          ;$8C
000078C2 <common.ab3@260> comPtr_CurrentSourceLine:       Ds.l 1                                                          ;$90
000078C4 <common.ab3@262>                                 Ds.w 1                                                          ;$94
00007984 <common.ab3@263> comStr_CurrentDir:              Ds.l 48                                                         ;$96
000079CC <common.ab3@264> comStr_SourceName:              Ds.l 18                                                         ;$156  ;$96+48*4
000079D0 <common.ab3@266>                                 Ds.l 1                                                          ;$19E
000079D2 <common.ab3@267> comWord__AL_0_8660:             Ds.w 1                                                          ;$1A2
000079D6 <common.ab3@268> comByte__AL_0_8662:             Ds.l 1                                                          ;$1A4
000079D8 <common.ab3@269> comWord_PasteMode:              Ds.w 1                                                          ;$1A8
000079DA <common.ab3@270> comWord__AL_0_8668:             Ds.w 1                                                          ;$1AA
000079DC <common.ab3@271> comByte_EnteredCharacter:       Ds.w 1                                                          ;$1AC
000079DE <common.ab3@272> comByte_StateBlockMark:         Ds.w 1                                                          ;$1AE
000079E0 <common.ab3@274>                                 Ds.w 1                                                          ;$1B0
000079E2 <common.ab3@275> comWord__AL_0_8670:             Ds.w 1                                                          ;$1B2
000079E3 <common.ab3@277>                                 Ds.b 1                                                          ;$1B4
000079E4 <common.ab3@278> comByte_ScreenBarHeight:        Ds.b 1                                                          ;$1B5
000079E6 <common.ab3@279> comWord_WinHeight_disabled:     Ds.w 1                                                          ;$1B6
000079E8 <common.ab3@280> comWord_MaxColumns:             Dc.w 250;columnsize                                             ;$1B8
000079EA <common.ab3@282>                                 Dc.w $0050                                                    ;$1BA
000079EC <common.ab3@285>                                 Ds.w 1                                                          ;$1BC
000079EE <common.ab3@287>                                 Ds.w 1                                                          ;$1BE
000079F0 <common.ab3@289>                                 Ds.w 1                                                          ;$1C0
000079F4 <common.ab3@291>                                 Ds.l 1                                                          ;$1C2
000079F6 <common.ab3@293>                                 Ds.w 1                                                          ;$1C6
000079F8 <common.ab3@294> comWord_Column:                 Ds.w 1                                                          ;$1C8
000079FA <common.ab3@296>                                 Ds.w 1                                                          ;$1CA
000079FE <common.ab3@298>                                 Ds.l 1                                                          ;$1CC
00007A00 <common.ab3@299> comWord_TextBufferOffset:       Ds.w 1                                                          ;$1D0
00007A02 <common.ab3@300> comWord_StoreColumn:            Dc.w 0                                                          ;$1D2
00007A06 <common.ab3@303>                                 Ds.l 1                                                          ;$1D6
00007A08 <common.ab3@304> comWord_StoreTextBufferOffset:  Ds.w 1                                                          ;$1DA
00007A0A <common.ab3@305> comWord__AL_0_869A:             Ds.w 1                                                          ;$1DC
00007A0C <common.ab3@306> comWord_ColumnsOffset:          Ds.w 1                                                          ;$1DE
00007A0E <common.ab3@308>                                 Ds.w 1                                                          ;$1E0
00007A10 <common.ab3@309> comWord_QualifierStore:         Ds.w 1                                                          ;$1E2
00007A14 <common.ab3@311>                                 Ds.l 1                                                          ;$1E4
00007A16 <common.ab3@312> comWord_KeyBeforeReturn:        Ds.w 1                                                          ;$1E8
00007A18 <common.ab3@313> comByte_RunningFlag:            Dc.w $0                                                         ;$1EA
00007A1A <common.ab3@317>                                 Ds.w 1                                                          ;$1EC
00007A1C <common.ab3@318> comWord_LinePosEndX:            Ds.w 1                                                          ;$1EE;org comment: position of block.
00007A20 <common.ab3@319> comPtr_DestBufferStart:         Ds.l 1                                                          ;$1F0
00007A22 <common.ab3@325>                                 Ds.w 1                                                          ;$1F4
00007A24 <common.ab3@327>                                 Ds.w 1                                                          ;$1F6
00007A26 <common.ab3@329>                                 Ds.w 1                                                          ;$1F8
00007A28 <common.ab3@330> comWord__AL_0_86B8:             Ds.w 1                                                          ;$1FA
00007A2A <common.ab3@331> comWord_CursorInMarkedBlock:    Ds.w 1                                                          ;$1FC
00007A2E <common.ab3@332> comPtr_SourceFileHandle:        Ds.l 1                                                          ;$1FE
00007A30 <common.ab3@333> comWord__AL_0_86C0:             Ds.w 1                                                          ;$202
00007A32 <common.ab3@334> comWord_SourceModifiedFlag:     Ds.w 1
00007A34 <common.ab3@335> comWord__AL_0_86C4:             Ds.w 1
00007A36 <common.ab3@336> comWord__AL_0_86C6:             Ds.w 1
00007A38 <common.ab3@338>                                 Dc.w $0006
00007A3A <common.ab3@340>                                 Dc.w $0005
00007A3C <common.ab3@342>                                 Ds.w 1
00007A40 <common.ab3@343> comPtr_LabelList:               Ds.l 1
00007A42 <common.ab3@344> comWord_LabelListChanged:       Ds.w 1
00007A70 <common.ab3@345> comStr_StatusString:            Dc.b "Line:       ",0,"Column:    ",0,"                   ",0,0 ; moved position of Line string termination and the begin of Column to the right to support up to 999999 lines  tomsmart1
00007A7A <common.ab3@346> comStr_Block:                   Dc.b "Block   ",0,0
00007A7E <common.ab3@347> comLong_ActualColumn:           Ds.l 1
00007A80 <common.ab3@349>                                 Ds.w 1
00007A82 <common.ab3@350> comWord_PrefsWrittenState:      Ds.w 1                                                          ; nach writeprefs $FFFF, ansonsten $0
00007A86 <common.ab3@351> comPtr_CompilerWindowStructur:  Ds.l 1    ; was comwin_datas:  tomsmart1
00007A8A <common.ab3@352> comWord_SourceChanged:          Dc.l $203A
00007A93 <common.ab3@353> comStr_Modified:                Dc.b "        ",0     ; cang form to Longs to a string tomsmart1
00007A96 <common.ab3@354>                                 Ds.b 3  ;fill bytes for the modify string  tomsmart1
00007AC3 <common.ab3@355> comStr_FilePattern:             Dc.b "(#?.bb|#?.bb2|#?.asm|#?ab2|#?.txt|#?.guide)",0,0
00007B03 <common.ab3@356>                                 Ds.l 16
00007B0F <common.ab3@357> comStr_FilePattern_Standalone:  Dc.b $7e,"(#?.info)",0,0
00007B5F <common.ab3@358>                                 Ds.l 20
00007B6B <common.ab3@359> comStr_FilePattern_NoInfo:      Dc.b $7e,"(#?.info)",0,0
00007BBB <common.ab3@360>                                 Ds.l 20
00007CB7 <common.ab3@361> comStr_SourceFileComplete:      Ds.l 63
00007CB9 <common.ab3@362>                                 Ds.w 1
00007D79 <common.ab3@363> comStr_ASLDummyDir:             Ds.l 48
00007DB9 <common.ab3@364> comStr_ASLDummyPath:            Ds.l 16
00007DBB <common.ab3@365> comWord_LabelSize:              Ds.w 1                                                          ; AL_0_8A3E
00007DBC <common.ab3@366> Even
00007DC0 <common.ab3@369> comLong_StoreDisplayLine:       Dc.l 0
00007DC4 <common.ab3@371>                                 Dc.l 0
00007DC8 <common.ab3@372> comLong_DisplayLineOffsetStore: Dc.l 0
00007DCC <common.ab3@373> comLong_BlockStartDisplayLine:  Dc.l 0
00007DD0 <common.ab3@375> comLong_DisplayLine:            Dc.l 0
00007DD4 <common.ab3@377> comLong_DisplayLineOffset:      Dc.l 0
00007DD8 <common.ab3@378> comLong_LinePosEndY:            Dc.l 0
00007DDC <common.ab3@379> comLong_LinePosStartX:          Dc.l 0                                                          ;current cursor line
00007DE0 <common.ab3@380> comLong_LinePosStartY:          Dc.l 0
00007DE4 <common.ab3@381> comLong_BlockStartX:            Dc.l 0
00007DE8 <common.ab3@382> comLong_BlockStartY:            Dc.l 0
00007DEC <common.ab3@383> comLong_BlockEndX:              Dc.l 0
00007DF0 <common.ab3@384> comLong_BlockEndY:              Dc.l 0
00007DF4 <common.ab3@386> comLong_TotalLines:             Dc.l 0                                                          ;ok
00007DF8 <common.ab3@388>                                 Dc.l 0
00007DFC <common.ab3@390>                                 Dc.l 0
00007E00 <common.ab3@392> comLong_BoundLines:             Dc.l $6
00007E04 <common.ab3@393> comLong_Label1VisableItem:      Dc.l 0
00007E0E <common.ab3@394> comWord_LabelCounter:           Ds.w 5
00007E12 <common.ab3@395>                                 Dc.l 0
00007E16 <common.ab3@398> comLong_CursorPosStore:         Dc.l 0                                                          ; saved cursorposition
00007E18 <common.ab3@399> comWord_LabelRemark:            Dc.w 0                                                          ; state of buttons in label window
00007E1A <common.ab3@400> comWord_LabelAll:               Dc.w 0
00007E38 <common.ab3@401> comStr_LabelSearchString:       Ds.b 30                                                         ; stored string of stringgadget
00007E3C <common.ab3@402> comLong_Label1VisableItemStore: Dc.l 0
00007E3E <common.ab3@404> comWord_CreateDebugFile:        Dc.w -1  ; added by Thilo
00007E42 <common.ab3@405> xtra_dumm6:                     Ds.b 4
00007E76 <common.ab3@406> xtra_dummy:                     Ds.b 52
00007E7A <common.ab3@407> comLong_XtraTerminator:         Dc.l -1
00007E88 <common.ab3@409> comStr_EnvPEDPrefs:             Dc.b "ENV:ped.prefs",0
00007E9A <common.ab3@410> comStr_EnvarcPEDPrefs:          Dc.b "ENVARC:ped.prefs",0,0
00007E9C <common.ab3@411> comWord__AL_0_8A6A:             Ds.w 1
00007EB0 <common.ab3@412> comStr_ASLChangeDir:            Dc.b "Choose directory...",0
00007EC6 <common.ab3@413> comStr_ASLLoadFile:             Dc.b "Name of file to open",0,0
00007EDC <common.ab3@414> comStr_ASLSaveFile:             Dc.b "Name to save file as",0,0
00007EF2 <common.ab3@415> comStr_ASLLoadBlock:            Dc.b "Name of block to load",0
00007F08 <common.ab3@416> comStr_ASLSaveBlock:            Dc.b "Name to save block as",0
00007F0A <common.ab3@417> comWord__AL_0_8AD8:             Ds.w 1
00007F0C <common.ab3@418> comWord_LabelSizeC:             Ds.w 1
00007F10 <common.ab3@420>                                 Ds.l 1
00007F14 <common.ab3@422>                                 Ds.l 1
00007F18 <common.ab3@424>                                 Ds.l 1
00007F1C <common.ab3@425> comPtr_SourceAreaRastPort:      Ds.l 1
00007F20 <common.ab3@426> comPtr_UnknownRastPort:         Ds.l 1
00007F24 <common.ab3@427> comPtr_Temp_TokenString1:       Ds.l 1
00007F28 <common.ab3@428> comPtr_Temp_TokenString2:       Ds.l 1
00007F2C <common.ab3@429> comPtr_Temp_TokenString3:       Ds.l 1
00007F30 <common.ab3@430> comPtr_Temp_TokenStringObsolete:Ds.l 1
00007F34 <common.ab3@431> comPtr_DosBuffer:               Ds.l 1
00007F3A <common.ab3@432> comStr_TokenError:              Dc.b "?????",0
00007F4C <common.ab3@433>                                 Dc.b "Token Unavailable",0
00007F4E <common.ab3@437>                                 Dc.b $1C,$01                  ; CURSORUP
00007F52 <common.ab3@438>                                 Dc.l 0;key_cursorup
00007F54 <common.ab3@439>                                 Dc.b $1D,$01                  ; CURSORDOWN
00007F58 <common.ab3@440>                                 Dc.l 0;key_cursordown
00007F5A <common.ab3@441>                                 Dc.b 13,$01                   ; RETURN
00007F5E <common.ab3@442>                                 Dc.l 0;insertreturn
00007F60 <common.ab3@443>                                 Dc.b $81,$00                  ; F1
00007F64 <common.ab3@444>                                 Dc.l 0;menu_helpgeneral
00007F66 <common.ab3@445>                                 Dc.b $82,$00                  ; F2
00007F6A <common.ab3@446>                                 Dc.l 0;menu_helpincludesguide
00007F6C <common.ab3@447>                                 Dc.b $83,$00                  ; F3
00007F70 <common.ab3@448>                                 Dc.l 0;menu_helpblitzlibs
00007F72 <common.ab3@449>                                 Dc.b $84,$00                  ; F4
00007F76 <common.ab3@450>                                 Dc.l 0;menu_dublicate
00007F78 <common.ab3@451>                                 Dc.b $89,$00                  ; F9
00007F7C <common.ab3@452>                                 Dc.l 0;menu_previousfile
00007F7E <common.ab3@453>                                 Dc.b $8A,$00                  ; F10
00007F82 <common.ab3@454>                                 Dc.l 0;menu_nextfile
00007F84 <common.ab3@455>                                 Dc.b $8B,$00                  ; HELP
00007F88 <common.ab3@456>                                 Dc.l 0;event_helpkey
00007F8A <common.ab3@457>                                 Dc.b $FF,$01                  ; VERTICAL SCROLLER
00007F8E <common.ab3@458>                                 Dc.l 0;event_vertscroller
00007F90 <common.ab3@459>                                 Dc.b $FE,$00
00007F94 <common.ab3@460>                                 Dc.l 0;event_shortcut         ; SHORTCUT
00007F96 <common.ab3@461>                                 Dc.b $FD,$01
00007F9A <common.ab3@462>                                 Dc.l 0;event_leftmousebutton  ; L-MOUSEBUTTON
00007F9C <common.ab3@463>                                 Dc.b $FB,$01
00007FA0 <common.ab3@464>                                 Dc.l 0;AJL_0_7FCC
00007FA2 <common.ab3@465>                                 Ds.w 1
00007FB6 <common.ab3@469> comStr_ErrorOpenFile:           Dc.b "Couldn't open file!",0
00007FCA <common.ab3@470> comStr_ErrorReadFile:           Dc.b "Error reading file!",0
00007FDE <common.ab3@471> comStr_ErrorWriteFile:          Dc.b "Error writing file!",0
00007FE0 <common.ab3@472> comWord_PEDIsAvailable:         Ds.w 1                       ;+$7B2   B2 B3
00007FE4 <common.ab3@473> comLong_AB3IsAvailable:         Ds.l 1                       ;+$7B4   B4 B5 B6 B7
00007FE8 <common.ab3@474> comPtr_TokenBase:               Dc.l 0                       ;+$7B6   B8 B9 C0 CA CB CC CD CE CF
00007FEC <common.ab3@475> comPtr_TokenBase2:              Dc.l 0
00007FF0 <common.ab3@476> comFunc_ReadXtraFile:           Dc.l comFunc_Default         ;+$7C0
00007FF4 <common.ab3@477> comFunc_WriteXtraFile:          Dc.l comFunc_Default         ;+$7C4
00007FF8 <common.ab3@478> comFunc_CallMenuEntry:          Dc.l comFunc_Default         ;+$7C8
00007FFC <common.ab3@479> comFunc_CallDummy:              Dc.l comFunc_Default         ;+$7CC   in teddata, there is a 0
00007FFD <common.ab3@480> comByte__L_0_8BCCa:             Dc.b $FF                     ;+$7D0   +++ : +++    ; ?? look like not used??  tomsmart1
00007FFE <common.ab3@481> comByte__L_0_8BCD:              Dc.b $FF                     ;+$7D1   +++ \\34 +++
00007FFF <common.ab3@482> comByte_LabelIdentifier:        Dc.b $FF                     ;+$7D2   +++ . +++
00008002 <common.ab3@483> comByte__L_0_8BCF:              Dc.b $FF,$00,$00             ;+$7D3   +++ ; +++
00008006 <common.ab3@484> AL_0_8BD2:                      Ds.l 1                       ;+$7D6   +++ NEW1 +++
0000800A <common.ab3@485> AL_0_8BD6:                      Ds.l 1                       ;+$7DA
0000800E <common.ab3@486> comLong_NewDebug:               Dc.b "newd"                  ;+$7de
00008012 <common.ab3@487> comPtr_Trap15:                  Dc.l 0                       ;+$7e2
00008016 <common.ab3@488> comPtr_DirectBuffer:            Dc.l 0                       ;+$7e6
0000801A <common.ab3@489> comPtr_MacroBase:               Dc.l 0                       ;+$7ea
0000801B <common.ab3@490> comByte_DebugMode:              Dc.b -1                      ;+$7ee
0000801C <common.ab3@491>                                 Dc.b 1
0000801E <common.ab3@492>                                 Dc.w 1
00008022 <common.ab3@493> comPtr_VarBase:                 Dc.l 0                       ;+$7f2
00008026 <common.ab3@494> comPtr_InstrBase:               Dc.l 0                       ;+$7f6
0000802A <common.ab3@495> comPtr_LibPointer:              Dc.l 0                       ;+$7fa
0000802E <common.ab3@497> comPtr_CompilerVersion:         Dc.l 0                       ;+$7fe   hier soll der pointer auf den versionsstring stehen
00008032 <common.ab3@498> comFunc_OpenCompilerWindow:     Dc.l comFunc_Default         ;+$802
00008036 <common.ab3@499> dummy2:                         Dc.l 0                       ;+$806
0000803A <common.ab3@500> dummy3:                         Dc.l 0                       ;+$80A
0000803E <common.ab3@501> comPtr_VersionInformation:      Dc.l 0                       ;+$80E
00008042 <common.ab3@502> comPtr_NumberOfBuilds:          Dc.l 0                       ;+$812
00008046 <common.ab3@503> comPtr_PreProcessor:            Dc.l 0                       ;+$816
0000804A <common.ab3@504> dummy6:                         Dc.l 0
0000804E <common.ab3@508> comData_Magic:                  Dc.b "...."
00008052 <common.ab3@509> comData_A0:                     Dc.l 0
00008056 <common.ab3@510> comData_Long:                   Dc.l 0
00008058 <common.ab3@511> comData_Word:                   Dc.w 0
00008059 <common.ab3@512> comData_Byte:                   Dc.b 0
0000805D <common.ab3@513> comFunc_SaveSource:             Dc.l comFunc_Default  ; filename in D0, format is autodetected (.bb2, .ab2, .ab3)
00008061 <common.ab3@514> comFunc_LoadSource:             Dc.l comFunc_Default  ; filename in D0, fromat is autodetected
00008065 <common.ab3@515> comFunc_ClearSource:            Dc.l comFunc_Default  ; no parameters
00008069 <common.ab3@516> comPtr_MemPool                  Dc.l 0
0000806A <common.ab3@518> Even
0000806A <AmiBlitz3.ab2@89> 
0000806A <preprocessor.include.ab3@1> XINCLUDE "/Shared/preprocessor.include.ab3"
0000806A <hashmap.include.bb2@1> XINCLUDE "hashmap.include.bb2"
00008088 <hashmap.include.bb2@34> Function.l FAST hashmap_Koehler32{buff.l,bytelength.l}
00008090 <hashmap.include.bb2@35>   s1.l = 0
000080BE <hashmap.include.bb2@36>   For n.l = 0 To bytelength-1
000080EE <hashmap.include.bb2@37>      s1 = (s1 + Peek.b(buff+n)) * 196314165 ; best hash function EVER!
000080FE <hashmap.include.bb2@38>   Next
00008108 <hashmap.include.bb2@39>   Function Return s1
0000810E <hashmap.include.bb2@40> End Function
00008130 <hashmap.include.bb2@43> Function.l FAST hashmap_GetHashIndex{*hm.hashmap,buff.l,bytelength.l}
0000814E <hashmap.include.bb2@44> If (*hm=#NULL) Then Function Return 0
00008160 <hashmap.include.bb2@45> hash.l = hashmap_Koehler32{buff,bytelength}
00008188 <hashmap.include.bb2@46> Function Return Xor(hash,(hash LSR 16)) & *hm\mask
0000818E <hashmap.include.bb2@47> End Function
000081A8 <hashmap.include.bb2@50> Statement hashmap_Free{*hm.hashmap}
000081C0 <hashmap.include.bb2@51>   If *hm=#NULL Then Statement Return
000081D2 <hashmap.include.bb2@52>   If *hm\base
000081E0 <hashmap.include.bb2@53>     ptr.l = *hm\base
00008214 <hashmap.include.bb2@54>     For n.l=0 To *hm\size-1
00008222 <hashmap.include.bb2@55>       datptr.l = Peek.l(ptr)
0000822C <hashmap.include.bb2@56>       If datptr
0000823E <hashmap.include.bb2@57>         If (*hm\tank)
0000827C <hashmap.include.bb2@58>           If ((datptr<*hm\tank) OR (datptr>=*hm\tank+*hm\tanksize))
0000828C <hashmap.include.bb2@59>             FreeVec_ datptr
00008292 <hashmap.include.bb2@61>         Else
000082A2 <hashmap.include.bb2@62>           FreeVec_ datptr
000082B2 <hashmap.include.bb2@64>         Poke.l ptr,#NULL
000082C0 <hashmap.include.bb2@66>       ptr+4
000082D0 <hashmap.include.bb2@67>     Next
000082F4 <hashmap.include.bb2@68>     FreeVec_ *hm\base : *hm\base = #NULL
00008300 <hashmap.include.bb2@70>   *hm\numitems   = 0
0000830E <hashmap.include.bb2@71>   *hm\mask       = 0
0000831C <hashmap.include.bb2@72>   *hm\size       = 0
0000832A <hashmap.include.bb2@73>   *hm\searchpos  = 0
00008338 <hashmap.include.bb2@74>   *hm\numclashes = 0
0000836E <hashmap.include.bb2@75>   If *hm\tank Then FreeVec_ *hm\tank : *hm\tank =#NULL
0000837C <hashmap.include.bb2@76>   *hm\tanksize   = 0
0000838C <hashmap.include.bb2@77>   FreeVec_ *hm
00008394 <hashmap.include.bb2@78>   *hm = #NULL
00008398 <hashmap.include.bb2@79> End Statement
000083B2 <hashmap.include.bb2@82> Function.l hashmap_Create{order.l}
000083CC <hashmap.include.bb2@83>   If order>24 Then order=24
000083E6 <hashmap.include.bb2@84>   If order<1 Then order=1
00008406 <hashmap.include.bb2@86>   *hm.hashmap = AllocVec_(SizeOf.hashmap,#MEMF_CLEAR)
00008410 <hashmap.include.bb2@87>   If *hm
0000841C <hashmap.include.bb2@88>     *hm\order        = order
00008430 <hashmap.include.bb2@89>     *hm\size         = (1 LSL order)
00008462 <hashmap.include.bb2@90>     *hm\base         = AllocVec_(4 * *hm\size,#MEMF_CLEAR)
0000847A <hashmap.include.bb2@91>     *hm\mask         = *hm\size-1
00008486 <hashmap.include.bb2@92>     *hm\numitems     = 0
00008494 <hashmap.include.bb2@93>     *hm\searchpos    = 0
000084A2 <hashmap.include.bb2@94>     *hm\numclashes   = 0
000084B0 <hashmap.include.bb2@95>     *hm\tank         = #NULL
000084BE <hashmap.include.bb2@96>     *hm\tanksize     = 0
000084E8 <hashmap.include.bb2@97>     If *hm\base = #NULL Then hashmap_Free{*hm} : *hm = #NULL
000084F2 <hashmap.include.bb2@99>   Function Return *hm
000084F8 <hashmap.include.bb2@100> End Function
00008526 <hashmap.include.bb2@103> Statement hashmap_RemItem{*hm.hashmap,key.s}
0000853E <hashmap.include.bb2@104>   If (*hm=#NULL) Then Statement Return
0000855C <hashmap.include.bb2@105>   If (*hm\base=#NULL) Then Statement Return
00008570 <hashmap.include.bb2@106>   kl.l       = FLen(key)
00008588 <hashmap.include.bb2@107>   hash.l     = hashmap_GetHashIndex{*hm,&key,kl}
000085B0 <hashmap.include.bb2@108>   baseptr.l  = Peek.l(*hm\base + (hash&*hm\mask)*4)
000085C8 <hashmap.include.bb2@109>   If baseptr =#NULL Then Statement Return
000085D6 <hashmap.include.bb2@110>   oldsize.l  = Peek.l(baseptr)
000085E4 <hashmap.include.bb2@111>   ptr.l      = baseptr +4
000085F2 <hashmap.include.bb2@112>   endptr.l   = ptr + oldsize
00008606 <hashmap.include.bb2@113>   While ptr<endptr
0000865A <hashmap.include.bb2@114>     ikl.l = Peek.l(ptr) : ptr + 4 : listkey.s = Peeks$(ptr,ikl) : ptr + ikl
00008684 <hashmap.include.bb2@115>     isl.l = Peek.l(ptr) : ptr + 4                              : ptr + isl
000086C8 <hashmap.include.bb2@117>     If listkey=key
000086E8 <hashmap.include.bb2@118>       newsize.l = oldsize - ikl-4 -isl-4
000086FA <hashmap.include.bb2@119>       If newsize>0
0000871E <hashmap.include.bb2@120>         newptr.l = AllocVec_ (newsize+4,#MEMF_ANY)
0000872C <hashmap.include.bb2@121>         Poke.l newptr,newsize
00008784 <hashmap.include.bb2@122>         beginsize.l = (ptr)-(baseptr+4) - ikl-4 - isl-4 : CopyMem_ baseptr+4,newptr+4,beginsize
000087CA <hashmap.include.bb2@123>         endsize.l   = oldsize - (ptr)+(baseptr+4)       : CopyMem_ ptr,newptr+4+beginsize,endsize
000087D0 <hashmap.include.bb2@124>       Else
000087D8 <hashmap.include.bb2@125>         newptr = #NULL
00008800 <hashmap.include.bb2@127>       Poke.l *hm\base + (hash&*hm\mask)*4,newptr
00008812 <hashmap.include.bb2@128>       *hm\numitems-1
00008824 <hashmap.include.bb2@129>       If (*hm\tank)
0000885E <hashmap.include.bb2@130>         If baseptr<*hm\tank OR baseptr>=*hm\tank+*hm\tanksize
0000886E <hashmap.include.bb2@131>           FreeVec_ baseptr
00008874 <hashmap.include.bb2@133>       Else
00008884 <hashmap.include.bb2@134>         FreeVec_ baseptr
0000888A <hashmap.include.bb2@136>       Statement Return
00008890 <hashmap.include.bb2@138>   Wend
000088A8 <hashmap.include.bb2@139> End Statement
000088E6 <hashmap.include.bb2@142> Function.l hashmap_AddItem{*hm.hashmap,key.s,string.s}
00008904 <hashmap.include.bb2@143>   If (*hm=#NULL) Then Function Return #NULL
00008936 <hashmap.include.bb2@144>   hashmap_RemItem{*hm.hashmap,key.s}
0000894A <hashmap.include.bb2@145>   kl.l     = FLen(key)
0000895E <hashmap.include.bb2@146>   sl.l     = FLen(string)
00008976 <hashmap.include.bb2@147>   hash.l   = hashmap_GetHashIndex{*hm,&key,kl}
0000899E <hashmap.include.bb2@149>   oldptr.l = Peek.l(*hm\base + (hash&*hm\mask)*4)
000089A8 <hashmap.include.bb2@153>   If oldptr
000089B6 <hashmap.include.bb2@154>     oldsize.l = Peek.l(oldptr)
000089CE <hashmap.include.bb2@155>     *hm\numclashes+1
000089D4 <hashmap.include.bb2@159>   Else
000089DC <hashmap.include.bb2@160>     oldsize.l = 0
000089FC <hashmap.include.bb2@163>   newsize.l = oldsize + 4+kl + 4+sl
00008A22 <hashmap.include.bb2@164>   newptr.l  = AllocVec_ (4+newsize,#MEMF_ANY)
00008A2C <hashmap.include.bb2@165>   If newptr
00008A3A <hashmap.include.bb2@166>     Poke.l newptr,newsize
00008A44 <hashmap.include.bb2@168>     If oldptr
00008A70 <hashmap.include.bb2@169>       CopyMem_ oldptr+4,newptr+4,oldsize
00008A84 <hashmap.include.bb2@170>       itemptr.l = newptr+4+oldsize
00008A8A <hashmap.include.bb2@171>     Else
00008A98 <hashmap.include.bb2@172>       itemptr.l = newptr+4
00008ACE <hashmap.include.bb2@175>     Poke.l itemptr,kl      : CopyMem_ &key,itemptr+4,kl
00008B1C <hashmap.include.bb2@176>     Poke.l itemptr+4+kl,sl : CopyMem_ &string,itemptr+4+kl+4,sl
00008B44 <hashmap.include.bb2@178>     Poke.l *hm\base + (hash&*hm\mask)*4,newptr
00008B5E <hashmap.include.bb2@179>     If oldptr Then FreeVec_ oldptr
00008B70 <hashmap.include.bb2@180>     *hm\numitems+1
00008B7A <hashmap.include.bb2@182>   Function Return newptr
00008B96 <hashmap.include.bb2@183> End Function
00008BBC <hashmap.include.bb2@186> Function.l FAST hashmap_GetItemByHash{*hm.hashmap,keyPtr.l,keyLength.l,preHash.l}
00008BDA <hashmap.include.bb2@187> If (*hm=#NULL) Then Function Return #NULL
00008BFE <hashmap.include.bb2@188> If (*hm\base=#NULL) Then Function Return #NULL
00008C18 <hashmap.include.bb2@189> hash.l  = Xor(preHash,(preHash LSR 16))
00008C40 <hashmap.include.bb2@190> ptr.l   = Peek.l(*hm\base + (hash&*hm\mask)*4)
00008C5E <hashmap.include.bb2@191> If (ptr=#NULL) Then Function Return #NULL
00008C7A <hashmap.include.bb2@192> size.l   = Peek.l(ptr) : ptr +4
00008C88 <hashmap.include.bb2@193> endptr.l = ptr + size
00008C9C <hashmap.include.bb2@194> While ptr<endptr
00008CBE <hashmap.include.bb2@195>   ikl.l = Peek.l(ptr) : ptr +4+ikl
00008CE0 <hashmap.include.bb2@196>   isl.l = Peek.l(ptr) : ptr +4+isl
00008CEE <hashmap.include.bb2@197>   If keyLength=ikl
00008D08 <hashmap.include.bb2@198>     lptr.l = ptr-isl-4-ikl
00008D38 <hashmap.include.bb2@199>     If Peek.b(lptr)=Peek.b(keyPtr)
00008D3E <hashmap.include.bb2@200>       succ.l = True
00008D6C <hashmap.include.bb2@201>       For n.l=1 To ikl-1
00008DAE <hashmap.include.bb2@202>         If Peek.b(lptr+n)><Peek.b(keyPtr+n) Then succ=False
00008DBE <hashmap.include.bb2@203>       Next
00008DC8 <hashmap.include.bb2@204>       If succ
00008DD8 <hashmap.include.bb2@205>         Function Return ptr-isl
00008DDE <hashmap.include.bb2@209> Wend
00008DEA <hashmap.include.bb2@210> Function Return #NULL
00008DF0 <hashmap.include.bb2@211> End Function
00008E1E <hashmap.include.bb2@215> Function.s hashmap_GetItem{*hm.hashmap,key.s}
00008E4E <hashmap.include.bb2@216>   If (*hm=#NULL) Then Function Return ""
00008E84 <hashmap.include.bb2@217>   If (*hm\base=#NULL) Then Function Return ""
00008E98 <hashmap.include.bb2@218>   kl.l     = FLen(key)
00008EB0 <hashmap.include.bb2@219>   hash.l   = hashmap_GetHashIndex{*hm,&key,kl}
00008ED8 <hashmap.include.bb2@220>   ptr.l    = Peek.l(*hm\base + (hash&*hm\mask)*4)
00008F08 <hashmap.include.bb2@221>   If (ptr=#NULL) Then Function Return ""
00008F24 <hashmap.include.bb2@222>   size.l   = Peek.l(ptr) : ptr +4
00008F32 <hashmap.include.bb2@223>   endptr.l = ptr + size
00008F46 <hashmap.include.bb2@224>   While ptr<endptr
00008F9A <hashmap.include.bb2@225>     ikl.l = Peek.l(ptr) : ptr +4 : listkey.s = Peeks$(ptr,kl) : ptr +ikl
00008FC4 <hashmap.include.bb2@226>     isl.l = Peek.l(ptr) : ptr +4 :                           : ptr +isl
00009008 <hashmap.include.bb2@227>     If listkey=key
0000902E <hashmap.include.bb2@228>       Function Return Peeks$(ptr-isl,isl)
00009034 <hashmap.include.bb2@230>   Wend
00009052 <hashmap.include.bb2@231> Function Return "" ; not found
00009070 <hashmap.include.bb2@232> End Function
0000908E <hashmap.include.bb2@266> Function.l hashmap_Write{*hm.hashmap,*fh.FileHandle}
00009094 <hashmap.include.bb2@267>   succ.l = False
000090BA <hashmap.include.bb2@268>   If *hm><#NULL AND *fh><#NULL
000090E8 <hashmap.include.bb2@270>     header.l = @"HMAP" : Write_ *fh,&header,4
00009110 <hashmap.include.bb2@271>     spos_fsize.l = Seek_ (*fh,0,#OFFSET_CURRENT)
00009134 <hashmap.include.bb2@272>     Write_ *fh,&header,4
0000918A <hashmap.include.bb2@275>     header.l = @"ORDR" : Write_ *fh,&header,4 : Write_ *fh,&*hm\order      ,4
000091DC <hashmap.include.bb2@276>     header.l = @"ITEM" : Write_ *fh,&header,4 : Write_ *fh,&*hm\numitems   ,4
00009232 <hashmap.include.bb2@277>     header.l = @"CLSH" : Write_ *fh,&header,4 : Write_ *fh,&*hm\numclashes ,4
00009242 <hashmap.include.bb2@280>     size.l = *hm\size*4
00009294 <hashmap.include.bb2@281>     header.l = @"MAPT" : Write_ *fh,&header,4 : Write_ *fh,&size   ,4
000092BC <hashmap.include.bb2@282>     spos_maptable.l = Seek_ (*fh,0,#OFFSET_CURRENT)
000092E2 <hashmap.include.bb2@283>     tmpbase.l = AllocVec_(*hm\size*4,#MEMF_ANY)
000092FC <hashmap.include.bb2@284>     If tmpbase=#NULL Then Function Return False
00009304 <hashmap.include.bb2@285>     tmpptr.l  = 0
0000932C <hashmap.include.bb2@286>     Write_ *fh,tmpbase,*hm\size*4
0000935A <hashmap.include.bb2@289>     header.l = @"TANK" : Write_ *fh,&header,4
00009382 <hashmap.include.bb2@290>     spos_tanksize.l = Seek_ (*fh,0,#OFFSET_CURRENT)
0000938A <hashmap.include.bb2@291>     tanksize.l = 0
000093AE <hashmap.include.bb2@292>     Write_ *fh,&tanksize ,4
000093E2 <hashmap.include.bb2@294>     For n.l=0 To *hm\size-1
000093FE <hashmap.include.bb2@295>       datptr.l = Peek.l(*hm\base+n*4)
00009408 <hashmap.include.bb2@296>       If datptr
0000941C <hashmap.include.bb2@297>         datl.l = Peek.l(datptr)+4
0000943C <hashmap.include.bb2@298>         Write_ *fh,datptr,datl
00009458 <hashmap.include.bb2@299>         Poke.l tmpbase+n*4,tmpptr+4
00009466 <hashmap.include.bb2@300>         tmpptr + datl
00009474 <hashmap.include.bb2@301>         tanksize + datl
0000947A <hashmap.include.bb2@302>       Else
00009492 <hashmap.include.bb2@303>         Poke.l tmpbase+n*4,0
000094A2 <hashmap.include.bb2@305>     Next
000094D0 <hashmap.include.bb2@306>     totalsize.l = Seek_ (*fh,0,#OFFSET_CURRENT) - 8
0000952C <hashmap.include.bb2@307>     If Seek_ (*fh,spos_fsize   ,#OFFSET_BEGINNING)><-1 Then Write_ *fh,&totalsize,4
000095A4 <hashmap.include.bb2@308>     If Seek_ (*fh,spos_maptable,#OFFSET_BEGINNING)><-1 Then Write_ *fh,tmpbase,*hm\size*4 : FreeVec_ tmpbase : tmpbase=#NULL
00009600 <hashmap.include.bb2@309>     If Seek_ (*fh,spos_tanksize,#OFFSET_BEGINNING)><-1 Then Write_ *fh,&tanksize,4
00009606 <hashmap.include.bb2@310>     succ.l = True
00009610 <hashmap.include.bb2@312>   Function Return succ
00009616 <hashmap.include.bb2@313> End Function
00009644 <hashmap.include.bb2@316> Function.l hashmap_Save{*hm.hashmap,filename.s}
0000964A <hashmap.include.bb2@317>   succ.l = False
0000966A <hashmap.include.bb2@318>   *fh.FileHandle = Open_(&filename,#MODE_NEWFILE)
00009674 <hashmap.include.bb2@319>   If *fh
00009686 <hashmap.include.bb2@320>     succ = hashmap_Write{*hm,*fh}
00009696 <hashmap.include.bb2@321>     Close_ *fh
000096A0 <hashmap.include.bb2@323>   Function Return succ
000096BA <hashmap.include.bb2@324> End Function
000096D4 <hashmap.include.bb2@327> Function.l hashmap_Read{*fh.FileHandle}
000096DC <hashmap.include.bb2@328>   *hm.hashmap = #NULL
000096E2 <hashmap.include.bb2@329>   more.l = True
000096EC <hashmap.include.bb2@330>   While more
000096F4 <hashmap.include.bb2@331>     header.l = 0
0000971C <hashmap.include.bb2@332>     more     = Read_ (*fh,&header,4)
00009722 <hashmap.include.bb2@333>     Select header
00009736 <hashmap.include.bb2@334>       Case 0 : more=False
00009772 <hashmap.include.bb2@336>       Case @"ORDR" : more=Read_(*fh,&order.l,4)
00009798 <hashmap.include.bb2@337>         If order>1 AND order<25
000097A6 <hashmap.include.bb2@338>           *hm.hashmap = hashmap_Create{order}
000097E2 <hashmap.include.bb2@340>       Case @"ITEM" : more=Read_(*fh,&items.l,4)
000097F6 <hashmap.include.bb2@341>          If *hm Then *hm\numitems = items
00009832 <hashmap.include.bb2@343>       Case @"CLSH" : more=Read_(*fh,&clashes.l,4)
00009848 <hashmap.include.bb2@344>          If *hm Then *hm\numclashes = clashes
0000985C <hashmap.include.bb2@346>       Case @"MAPT"
00009866 <hashmap.include.bb2@347>         If *hm
0000988A <hashmap.include.bb2@348>           Read_ *fh,&size.l,4
000098C2 <hashmap.include.bb2@349>           Read_ *fh,*hm\base,Min(*hm\size*4,size)
000098C8 <hashmap.include.bb2@350>         Else
000098D4 <hashmap.include.bb2@351>           Function Return #NULL
000098E8 <hashmap.include.bb2@354>       Case @"TANK"
000098F2 <hashmap.include.bb2@355>         If *hm
0000991A <hashmap.include.bb2@356>           Read_ *fh,&*hm\tanksize,4
00009942 <hashmap.include.bb2@357>           *hm\tank = AllocVec_ (*hm\tanksize,#MEMF_ANY)
00009954 <hashmap.include.bb2@358>           If *hm\tank
00009980 <hashmap.include.bb2@359>             Read_ *fh,*hm\tank,*hm\tanksize
000099B4 <hashmap.include.bb2@360>             For n.l=0 To *hm\size-1
000099E0 <hashmap.include.bb2@361>               If Peek.l(*hm\base+n*4)>0
00009A2C <hashmap.include.bb2@362>                 Poke.l *hm\base+n*4,Peek.l(*hm\base+n*4)+*hm\tank-4
00009A3C <hashmap.include.bb2@364>             Next
00009A42 <hashmap.include.bb2@366>         Else
00009A4E <hashmap.include.bb2@367>           Function Return #NULL
00009A7C <hashmap.include.bb2@370>       Default : more = Read_ (*fh,&dummy.l,4)
00009A7E <hashmap.include.bb2@372>     End Select
00009A84 <hashmap.include.bb2@373>   Wend
00009A8E <hashmap.include.bb2@374>   If *hm
00009AB8 <hashmap.include.bb2@375>     If *hm\tank=#NULL Then hashmap_Free{*hm} : *hm = #NULL
00009AC2 <hashmap.include.bb2@377>   Function Return *hm
00009AC8 <hashmap.include.bb2@378> End Function
00009AF2 <hashmap.include.bb2@381> Function.l hashmap_Load{filename.s}
00009AFA <hashmap.include.bb2@382>   *hm.hashmap = #NULL
00009B1A <hashmap.include.bb2@383>   *fh.FileHandle = Open_(&filename,#MODE_OLDFILE)
00009B24 <hashmap.include.bb2@384>   If *fh
00009B32 <hashmap.include.bb2@385>     *hm = hashmap_Read{*fh}
00009B42 <hashmap.include.bb2@386>     Close_ *fh
00009B4C <hashmap.include.bb2@388>   Function Return *hm
00009B66 <hashmap.include.bb2@389> End Function
00009B66 <preprocessor.include.ab3@11> 
00009B80 <preprocessor.include.ab3@29> Statement preproc_FlushTokens{*tn.preprocessor}
00009B98 <preprocessor.include.ab3@30> If *tn=#NULL Then Statement Return
00009BBE <preprocessor.include.ab3@31> If *tn\tokens   Then hashmap_Free{*tn\tokens} : *tn\tokens   = #NULL
00009BF4 <preprocessor.include.ab3@32> If *tn\detokens Then FreeVec_ *tn\detokens    : *tn\detokens = #NULL
00009BF8 <preprocessor.include.ab3@33> End Statement
00009C12 <preprocessor.include.ab3@36> Statement preproc_Free{*tn.preprocessor}
00009C2A <preprocessor.include.ab3@37> If *tn=#NULL Then Statement Return
00009C34 <preprocessor.include.ab3@38> preproc_FlushTokens{*tn}
00009C4C <preprocessor.include.ab3@39> FreeVec_ *tn : *tn=#NULL
00009C50 <preprocessor.include.ab3@40> End Statement
00009C6A <preprocessor.include.ab3@43> Statement preproc_Update{*tn.preprocessor}
00009C82 <preprocessor.include.ab3@44> If *tn=#NULL Then Statement Return
00009C9A <preprocessor.include.ab3@45> If *tn\detokens=#NULL
00009CBE <preprocessor.include.ab3@46>   *tn\detokens = AllocVec_ (128*256*4,#MEMF_CLEAR)
00009CC4 <preprocessor.include.ab3@47> Else
00009CEE <preprocessor.include.ab3@48>   For n.l=0 To 128*256-1
00009D0C <preprocessor.include.ab3@49>     Poke.l *tn\detokens + n*4,#NULL
00009D1C <preprocessor.include.ab3@50>   Next
00009D26 <preprocessor.include.ab3@53> *hm.hashmap = *tn\tokens
00009D34 <preprocessor.include.ab3@54> *ta.l       = *tn\detokens
00009D5A <preprocessor.include.ab3@55> If *ta><#NULL AND *hm><#NULL
00009D8E <preprocessor.include.ab3@56>   For n.l=0 To *hm\size-1
00009DAA <preprocessor.include.ab3@57>     ptr.l   = Peek.l(*hm\base + n*4)
00009DB4 <preprocessor.include.ab3@58>     If ptr
00009DD0 <preprocessor.include.ab3@59>       size.l   = Peek.l(ptr) : ptr +4
00009DDE <preprocessor.include.ab3@60>       endptr.l = ptr + size
00009DF2 <preprocessor.include.ab3@61>       While ptr<endptr
00009E14 <preprocessor.include.ab3@62>         ikl.l = Peek.l(ptr) : ptr +4+ikl
00009E36 <preprocessor.include.ab3@63>         isl.l = Peek.l(ptr) : ptr +4+isl
00009E54 <preprocessor.include.ab3@64>         tokenIndex.l = (Peek.w(ptr-isl) & $7FFF)
00009E82 <preprocessor.include.ab3@65>         Poke.l *ta+tokenIndex*4,ptr-isl-4-ikl-4
00009E88 <preprocessor.include.ab3@66>       Wend
00009E98 <preprocessor.include.ab3@68>   Next
00009E9C <preprocessor.include.ab3@70> End Statement
00009EB2 <preprocessor.include.ab3@73> Function.l preproc_Create{}
00009ED2 <preprocessor.include.ab3@74> *tn.preprocessor = AllocVec_ (SizeOf.preprocessor,#MEMF_CLEAR)
00009EDC <preprocessor.include.ab3@75> If *tn
00009F06 <preprocessor.include.ab3@76>   For n.l=0 To 255
00009F1C <preprocessor.include.ab3@77>     *tn\tokenFlags[n] = #TOKENF_STOP|#TOKENF_NEW
00009F2C <preprocessor.include.ab3@78>   Next
00009F48 <preprocessor.include.ab3@80>   *tn\tokenFlags[   0] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_EOL ; Null
00009F64 <preprocessor.include.ab3@81>   *tn\tokenFlags[   1] = #TOKENF_STOP|#TOKENF_NEW ; SOH
00009F80 <preprocessor.include.ab3@82>   *tn\tokenFlags[   2] = #TOKENF_STOP|#TOKENF_NEW ; STX
00009F9C <preprocessor.include.ab3@83>   *tn\tokenFlags[   3] = #TOKENF_STOP|#TOKENF_NEW ; ETX
00009FB8 <preprocessor.include.ab3@84>   *tn\tokenFlags[   4] = #TOKENF_STOP|#TOKENF_NEW ; EOT
00009FD4 <preprocessor.include.ab3@85>   *tn\tokenFlags[   5] = #TOKENF_STOP|#TOKENF_NEW ; ENQ
00009FF0 <preprocessor.include.ab3@86>   *tn\tokenFlags[   6] = #TOKENF_STOP|#TOKENF_NEW ; ACK
0000A00C <preprocessor.include.ab3@87>   *tn\tokenFlags[   7] = #TOKENF_STOP|#TOKENF_NEW ; BELL
0000A028 <preprocessor.include.ab3@88>   *tn\tokenFlags[   8] = #TOKENF_STOP|#TOKENF_NEW ; BS  (backspace)
0000A044 <preprocessor.include.ab3@89>   *tn\tokenFlags[   9] = #TOKENF_STOP|#TOKENF_NEW ; TAB (tabulator)
0000A060 <preprocessor.include.ab3@90>   *tn\tokenFlags[  10] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_EOL ; LF  (line feed) Linux Return
0000A07C <preprocessor.include.ab3@91>   *tn\tokenFlags[  11] = #TOKENF_STOP|#TOKENF_NEW ; VT
0000A098 <preprocessor.include.ab3@92>   *tn\tokenFlags[  12] = #TOKENF_STOP|#TOKENF_NEW ; FF  (feed forward)
0000A0B4 <preprocessor.include.ab3@93>   *tn\tokenFlags[  13] = #TOKENF_STOP|#TOKENF_NEW ; CR  (carrier return) Windows Return
0000A0D0 <preprocessor.include.ab3@94>   *tn\tokenFlags[  14] = #TOKENF_STOP|#TOKENF_NEW ; SO
0000A0EC <preprocessor.include.ab3@95>   *tn\tokenFlags[  15] = #TOKENF_STOP|#TOKENF_NEW ; SI
0000A108 <preprocessor.include.ab3@96>   *tn\tokenFlags[  16] = #TOKENF_STOP|#TOKENF_NEW ; DLE
0000A124 <preprocessor.include.ab3@97>   *tn\tokenFlags[  17] = #TOKENF_STOP|#TOKENF_NEW ; DC1
0000A140 <preprocessor.include.ab3@98>   *tn\tokenFlags[  18] = #TOKENF_STOP|#TOKENF_NEW ; CD2
0000A15C <preprocessor.include.ab3@99>   *tn\tokenFlags[  19] = #TOKENF_STOP|#TOKENF_NEW ; CD3
0000A178 <preprocessor.include.ab3@100>   *tn\tokenFlags[  20] = #TOKENF_STOP|#TOKENF_NEW ; CD4
0000A194 <preprocessor.include.ab3@101>   *tn\tokenFlags[  21] = #TOKENF_STOP|#TOKENF_NEW ; NAK
0000A1B0 <preprocessor.include.ab3@102>   *tn\tokenFlags[  22] = #TOKENF_STOP|#TOKENF_NEW ; SYN
0000A1CC <preprocessor.include.ab3@103>   *tn\tokenFlags[  23] = #TOKENF_STOP|#TOKENF_NEW ; ETB
0000A1E8 <preprocessor.include.ab3@104>   *tn\tokenFlags[  24] = #TOKENF_STOP|#TOKENF_NEW ; CAN (Cancel)
0000A204 <preprocessor.include.ab3@105>   *tn\tokenFlags[  25] = #TOKENF_STOP|#TOKENF_NEW ; EM
0000A220 <preprocessor.include.ab3@106>   *tn\tokenFlags[  26] = #TOKENF_STOP|#TOKENF_NEW ; SUB
0000A23C <preprocessor.include.ab3@107>   *tn\tokenFlags[  27] = #TOKENF_STOP|#TOKENF_NEW ; ESC (Escape)
0000A258 <preprocessor.include.ab3@108>   *tn\tokenFlags[  28] = #TOKENF_STOP|#TOKENF_NEW ; FS
0000A274 <preprocessor.include.ab3@109>   *tn\tokenFlags[  29] = #TOKENF_STOP|#TOKENF_NEW ; GS
0000A290 <preprocessor.include.ab3@110>   *tn\tokenFlags[  30] = #TOKENF_STOP|#TOKENF_NEW ; RS
0000A2AC <preprocessor.include.ab3@111>   *tn\tokenFlags[  31] = #TOKENF_STOP|#TOKENF_NEW ; US
0000A2C8 <preprocessor.include.ab3@112>   *tn\tokenFlags[@" "] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY ; Space
0000A2E4 <preprocessor.include.ab3@113>   *tn\tokenFlags[@"!"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A300 <preprocessor.include.ab3@114>   *tn\tokenFlags[  34] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY |#TOKENF_QUOT
0000A31C <preprocessor.include.ab3@115>   *tn\tokenFlags[@"#"] = #TOKENF_STOP|#TOKENF_IS|#TOKENF_COPY
0000A338 <preprocessor.include.ab3@116>   *tn\tokenFlags[@"$"] = #TOKENF_STOP|#TOKENF_IS|#TOKENF_COPY
0000A354 <preprocessor.include.ab3@117>   *tn\tokenFlags[@"%"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A370 <preprocessor.include.ab3@118>   *tn\tokenFlags[@"&"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A38C <preprocessor.include.ab3@119>   *tn\tokenFlags[@"'"] = #TOKENF_STOP|#TOKENF_COPY
0000A3A8 <preprocessor.include.ab3@120>   *tn\tokenFlags[@"("] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A3C4 <preprocessor.include.ab3@121>   *tn\tokenFlags[@")"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A3E0 <preprocessor.include.ab3@122>   *tn\tokenFlags[@"*"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A3FC <preprocessor.include.ab3@123>   *tn\tokenFlags[@"+"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A418 <preprocessor.include.ab3@124>   *tn\tokenFlags[@","] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A434 <preprocessor.include.ab3@125>   *tn\tokenFlags[@"-"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A450 <preprocessor.include.ab3@126>   *tn\tokenFlags[@"."] = #TOKENF_STOP|#TOKENF_COPY
0000A46C <preprocessor.include.ab3@127>   *tn\tokenFlags[@"/"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A488 <preprocessor.include.ab3@128>   *tn\tokenFlags[@"0"] = #TOKENF_IS|#TOKENF_COPY
0000A4A4 <preprocessor.include.ab3@129>   *tn\tokenFlags[@"1"] = #TOKENF_IS|#TOKENF_COPY
0000A4C0 <preprocessor.include.ab3@130>   *tn\tokenFlags[@"2"] = #TOKENF_IS|#TOKENF_COPY
0000A4DC <preprocessor.include.ab3@131>   *tn\tokenFlags[@"3"] = #TOKENF_IS|#TOKENF_COPY
0000A4F8 <preprocessor.include.ab3@132>   *tn\tokenFlags[@"4"] = #TOKENF_IS|#TOKENF_COPY
0000A514 <preprocessor.include.ab3@133>   *tn\tokenFlags[@"5"] = #TOKENF_IS|#TOKENF_COPY
0000A530 <preprocessor.include.ab3@134>   *tn\tokenFlags[@"6"] = #TOKENF_IS|#TOKENF_COPY
0000A54C <preprocessor.include.ab3@135>   *tn\tokenFlags[@"7"] = #TOKENF_IS|#TOKENF_COPY
0000A568 <preprocessor.include.ab3@136>   *tn\tokenFlags[@"8"] = #TOKENF_IS|#TOKENF_COPY
0000A584 <preprocessor.include.ab3@137>   *tn\tokenFlags[@"9"] = #TOKENF_IS|#TOKENF_COPY
0000A5A0 <preprocessor.include.ab3@138>   *tn\tokenFlags[@":"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A5BC <preprocessor.include.ab3@139>   *tn\tokenFlags[@";"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COMMENT|#TOKENF_COPY
0000A5D8 <preprocessor.include.ab3@140>   *tn\tokenFlags[@"<"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A5F4 <preprocessor.include.ab3@141>   *tn\tokenFlags[@"="] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A610 <preprocessor.include.ab3@142>   *tn\tokenFlags[@">"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A62C <preprocessor.include.ab3@143>   *tn\tokenFlags[@"?"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A648 <preprocessor.include.ab3@144>   *tn\tokenFlags[@"@"] = #TOKENF_STOP|#TOKENF_COPY
0000A664 <preprocessor.include.ab3@145>   *tn\tokenFlags[@"A"] = #TOKENF_FIRST|#TOKENF_IS  |#TOKENF_COPY
0000A680 <preprocessor.include.ab3@146>   *tn\tokenFlags[@"B"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A69C <preprocessor.include.ab3@147>   *tn\tokenFlags[@"C"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A6B8 <preprocessor.include.ab3@148>   *tn\tokenFlags[@"D"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A6D4 <preprocessor.include.ab3@149>   *tn\tokenFlags[@"E"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A6F0 <preprocessor.include.ab3@150>   *tn\tokenFlags[@"F"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A70C <preprocessor.include.ab3@151>   *tn\tokenFlags[@"G"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A728 <preprocessor.include.ab3@152>   *tn\tokenFlags[@"H"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A744 <preprocessor.include.ab3@153>   *tn\tokenFlags[@"I"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A760 <preprocessor.include.ab3@154>   *tn\tokenFlags[@"J"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A77C <preprocessor.include.ab3@155>   *tn\tokenFlags[@"K"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A798 <preprocessor.include.ab3@156>   *tn\tokenFlags[@"L"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A7B4 <preprocessor.include.ab3@157>   *tn\tokenFlags[@"M"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A7D0 <preprocessor.include.ab3@158>   *tn\tokenFlags[@"N"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A7EC <preprocessor.include.ab3@159>   *tn\tokenFlags[@"O"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A808 <preprocessor.include.ab3@160>   *tn\tokenFlags[@"P"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A824 <preprocessor.include.ab3@161>   *tn\tokenFlags[@"Q"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A840 <preprocessor.include.ab3@162>   *tn\tokenFlags[@"R"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A85C <preprocessor.include.ab3@163>   *tn\tokenFlags[@"S"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A878 <preprocessor.include.ab3@164>   *tn\tokenFlags[@"T"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A894 <preprocessor.include.ab3@165>   *tn\tokenFlags[@"U"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A8B0 <preprocessor.include.ab3@166>   *tn\tokenFlags[@"V"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A8CC <preprocessor.include.ab3@167>   *tn\tokenFlags[@"W"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A8E8 <preprocessor.include.ab3@168>   *tn\tokenFlags[@"X"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A904 <preprocessor.include.ab3@169>   *tn\tokenFlags[@"Y"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A920 <preprocessor.include.ab3@170>   *tn\tokenFlags[@"Z"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000A93C <preprocessor.include.ab3@171>   *tn\tokenFlags[@"["] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A958 <preprocessor.include.ab3@172>   *tn\tokenFlags[@"\"] = #TOKENF_STOP|#TOKENF_COPY
0000A974 <preprocessor.include.ab3@173>   *tn\tokenFlags[@"]"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A990 <preprocessor.include.ab3@174>   *tn\tokenFlags[@"^"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A9AC <preprocessor.include.ab3@175>   *tn\tokenFlags[@"_"] = #TOKENF_IS              |#TOKENF_COPY
0000A9C8 <preprocessor.include.ab3@176>   *tn\tokenFlags[@"`"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000A9E4 <preprocessor.include.ab3@177>   *tn\tokenFlags[@"a"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AA00 <preprocessor.include.ab3@178>   *tn\tokenFlags[@"b"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AA1C <preprocessor.include.ab3@179>   *tn\tokenFlags[@"c"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AA38 <preprocessor.include.ab3@180>   *tn\tokenFlags[@"d"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AA54 <preprocessor.include.ab3@181>   *tn\tokenFlags[@"e"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AA70 <preprocessor.include.ab3@182>   *tn\tokenFlags[@"f"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AA8C <preprocessor.include.ab3@183>   *tn\tokenFlags[@"g"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AAA8 <preprocessor.include.ab3@184>   *tn\tokenFlags[@"h"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AAC4 <preprocessor.include.ab3@185>   *tn\tokenFlags[@"i"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AAE0 <preprocessor.include.ab3@186>   *tn\tokenFlags[@"j"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AAFC <preprocessor.include.ab3@187>   *tn\tokenFlags[@"k"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AB18 <preprocessor.include.ab3@188>   *tn\tokenFlags[@"l"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AB34 <preprocessor.include.ab3@189>   *tn\tokenFlags[@"m"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AB50 <preprocessor.include.ab3@190>   *tn\tokenFlags[@"n"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AB6C <preprocessor.include.ab3@191>   *tn\tokenFlags[@"o"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AB88 <preprocessor.include.ab3@192>   *tn\tokenFlags[@"p"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000ABA4 <preprocessor.include.ab3@193>   *tn\tokenFlags[@"q"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000ABC0 <preprocessor.include.ab3@194>   *tn\tokenFlags[@"r"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000ABDC <preprocessor.include.ab3@195>   *tn\tokenFlags[@"s"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000ABF8 <preprocessor.include.ab3@196>   *tn\tokenFlags[@"t"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AC14 <preprocessor.include.ab3@197>   *tn\tokenFlags[@"u"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AC30 <preprocessor.include.ab3@198>   *tn\tokenFlags[@"v"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AC4C <preprocessor.include.ab3@199>   *tn\tokenFlags[@"w"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AC68 <preprocessor.include.ab3@200>   *tn\tokenFlags[@"x"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000AC84 <preprocessor.include.ab3@201>   *tn\tokenFlags[@"y"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000ACA0 <preprocessor.include.ab3@202>   *tn\tokenFlags[@"z"] = #TOKENF_FIRST| #TOKENF_IS|#TOKENF_COPY
0000ACBC <preprocessor.include.ab3@203>   *tn\tokenFlags[@"{"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000ACD8 <preprocessor.include.ab3@204>   *tn\tokenFlags[@"|"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000ACF4 <preprocessor.include.ab3@205>   *tn\tokenFlags[@"}"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000AD10 <preprocessor.include.ab3@206>   *tn\tokenFlags[@"~"] = #TOKENF_STOP|#TOKENF_NEW|#TOKENF_COPY
0000AD2C <preprocessor.include.ab3@207>   *tn\tokenFlags[ 127] = #TOKENF_STOP|#TOKENF_NEW
0000AD38 <preprocessor.include.ab3@208>   *tn\tokens   = #NULL
0000AD46 <preprocessor.include.ab3@209>   *tn\detokens = #NULL
0000AD50 <preprocessor.include.ab3@211> Function Return *tn
0000AD56 <preprocessor.include.ab3@212> End Function
0000AD84 <preprocessor.include.ab3@247> Function.l preproc_LoadTokens{*tn.preprocessor,hashmapfile.s}
0000ADA2 <preprocessor.include.ab3@248> If *tn = #NULL Then Function Return #NULL
0000ADD4 <preprocessor.include.ab3@249> *hm.hashmap = hashmap_Load{hashmapfile}
0000ADDE <preprocessor.include.ab3@250> If *hm
0000AE04 <preprocessor.include.ab3@251>   If *tn\tokens Then hashmap_Free{*tn\tokens} : *tn\tokens = #NULL
0000AE0E <preprocessor.include.ab3@252>   *tn\tokens = *hm
0000AE18 <preprocessor.include.ab3@253>   preproc_Update{*tn}
0000AE22 <preprocessor.include.ab3@255> Function Return *hm
0000AE3C <preprocessor.include.ab3@256> End Function
0000AE6A <preprocessor.include.ab3@259> Function.w preproc_SaveTokens{*tn.preprocessor,hashmapfile.s}
0000AE84 <preprocessor.include.ab3@260> If *tn = #NULL Then Function Return False
0000AE92 <preprocessor.include.ab3@261> If *tn\tokens
0000AECC <preprocessor.include.ab3@262>   Function Return hashmap_Save{*tn\tokens,hashmapfile}
0000AED4 <preprocessor.include.ab3@264> Function Return False
0000AEEE <preprocessor.include.ab3@265> End Function
0000AF14 <preprocessor.include.ab3@272> Function.l preproc_Tokenize{*tn.preprocessor,sourcebuff.l,destbuff.l,bytelength.l}
0000AF34 <preprocessor.include.ab3@273> If *tn = #NULL Then Function Return -1
0000AF56 <preprocessor.include.ab3@274> If *tn\tokens = #NULL Then Function Return -1
0000AF5C <preprocessor.include.ab3@275> dptr.l        = destbuff
0000AF6A <preprocessor.include.ab3@276> eptr.l        = sourcebuff+bytelength
0000AF70 <preprocessor.include.ab3@277> sptr.l        = sourcebuff
0000AF78 <preprocessor.include.ab3@278> tokenlength.l = 0
0000AF7E <preprocessor.include.ab3@279> accept.l      = True
0000AF86 <preprocessor.include.ab3@280> hash.l        = 0
0000AF9A <preprocessor.include.ab3@282> While sptr<eptr
0000AFC0 <preprocessor.include.ab3@283>   c.b  = Peek.b(sptr) : If c<0 Then c=$3F; ?
0000AFE8 <preprocessor.include.ab3@284>   cf.l = *tn\tokenFlags[c&$FF]
0000AFF2 <preprocessor.include.ab3@286>   If tokenlength ; we have a token
0000B006 <preprocessor.include.ab3@287>     If (cf&#TOKENF_STOP) ; and a stop character
0000B01A <preprocessor.include.ab3@288>       If c=@"$"
0000B02A <preprocessor.include.ab3@289>         Poke.b dptr,c
0000B044 <preprocessor.include.ab3@290>         xhash.l = (hash+c)*196314165
0000B06C <preprocessor.include.ab3@291>         tptr.l = hashmap_GetItemByHash{*tn\tokens,dptr-tokenlength,tokenlength+1,xhash}
0000B07E <preprocessor.include.ab3@292>         If tptr=#NULL
0000B0A0 <preprocessor.include.ab3@293>           tptr.l = hashmap_GetItemByHash{*tn\tokens,dptr-tokenlength,tokenlength,hash}
0000B0A6 <preprocessor.include.ab3@294>         Else
0000B0AE <preprocessor.include.ab3@295>           cf=0
0000B0B4 <preprocessor.include.ab3@297>       Else
0000B0D6 <preprocessor.include.ab3@298>         tptr.l = hashmap_GetItemByHash{*tn\tokens,dptr-tokenlength,tokenlength,hash}
0000B0E0 <preprocessor.include.ab3@300>       If tptr ; we found it!
0000B0EE <preprocessor.include.ab3@301>         dptr-tokenlength
0000B10C <preprocessor.include.ab3@302>         Poke.w dptr,Peek.w(tptr)
0000B11A <preprocessor.include.ab3@303>         dptr+2
0000B122 <preprocessor.include.ab3@304>         tokenlength = 0
0000B128 <preprocessor.include.ab3@305>         accept      = False
0000B13C <preprocessor.include.ab3@309>     If (cf&#TOKENF_IS) ; it is a valid token char
0000B146 <preprocessor.include.ab3@310>       If tokenlength ; we have a token!
0000B154 <preprocessor.include.ab3@311>         tokenlength+1
0000B16E <preprocessor.include.ab3@312>         hash = (hash+c)*196314165
0000B174 <preprocessor.include.ab3@314>     Else ; no, it's not a token
0000B17C <preprocessor.include.ab3@315>       tokenlength=0
0000B182 <preprocessor.include.ab3@317>   Else
0000B196 <preprocessor.include.ab3@318>     If (cf&#TOKENF_FIRST)
0000B1A0 <preprocessor.include.ab3@319>       If accept ; do we accept new tokens?
0000B1A8 <preprocessor.include.ab3@320>         tokenlength=1
0000B1BC <preprocessor.include.ab3@321>         hash = c*196314165
0000B1D0 <preprocessor.include.ab3@326>   If (cf&(#TOKENF_QUOT|#TOKENF_COMMENT|#TOKENF_EOL))
0000B1E4 <preprocessor.include.ab3@327>     If (cf&#TOKENF_QUOT) ; it's a string constant
0000B202 <preprocessor.include.ab3@329>         Poke.b dptr,c : dptr+1
0000B210 <preprocessor.include.ab3@330>         sptr+1
0000B220 <preprocessor.include.ab3@331>         c  = Peek.b(sptr) ;: If c<0 Then c=$3F; ? string constants are allowed to contain >128 chars
0000B248 <preprocessor.include.ab3@332>         cf = *tn\tokenFlags[c&$FF]
0000B26A <preprocessor.include.ab3@333>       Until ((cf&(#TOKENF_QUOT|#TOKENF_EOL)) OR (sptr>=eptr))
0000B27E <preprocessor.include.ab3@336>     If (cf&#TOKENF_COMMENT) ; it's a comment
0000B29C <preprocessor.include.ab3@338>         Poke.b dptr,c : dptr+1
0000B2AA <preprocessor.include.ab3@339>         sptr+1
0000B2D0 <preprocessor.include.ab3@340>         c  = Peek.b(sptr) : If c<0 Then c=$3F; ?
0000B2F8 <preprocessor.include.ab3@341>         cf = *tn\tokenFlags[c&$FF]
0000B31A <preprocessor.include.ab3@342>       Until ((cf&(#TOKENF_EOL)) OR (sptr>=eptr))
0000B34A <preprocessor.include.ab3@345>     If (cf&#TOKENF_EOL     ) Then Poke.b dptr,0 : dptr+1
0000B378 <preprocessor.include.ab3@349>   If (cf&#TOKENF_NEW     ) Then accept=True:tokenlength=0:Else accept=False
0000B3AA <preprocessor.include.ab3@350>   If (cf&#TOKENF_COPY    ) Then Poke.b dptr,c : dptr+1
0000B3B8 <preprocessor.include.ab3@352>   sptr+1
0000B3BE <preprocessor.include.ab3@353> Wend
0000B3CE <preprocessor.include.ab3@356> Function Return dptr-destbuff
0000B3D4 <preprocessor.include.ab3@357> End Function
0000B3FA <preprocessor.include.ab3@360> Function.l preproc_DetokenizeFP{*tn.preprocessor,sourcebuff.l,bytelength.l,fp.l}
0000B41A <preprocessor.include.ab3@361> If *tn = #NULL Then Function Return -1
0000B440 <preprocessor.include.ab3@362> If *tn\detokens = #NULL Then Function Return -1
0000B460 <preprocessor.include.ab3@363> bptr.l        = AllocVec_(8192*2,#MEMF_ANY)
0000B480 <preprocessor.include.ab3@364> If bptr=#NULL Then Function Return -1
0000B486 <preprocessor.include.ab3@365> dptr.l        = bptr                     ; destination pointer
0000B494 <preprocessor.include.ab3@366> aptr.l        = bptr + 8192              ; write if destpointer>aptr!
0000B4A2 <preprocessor.include.ab3@367> eptr.l        = sourcebuff+bytelength    ; end source pointer
0000B4A8 <preprocessor.include.ab3@368> sptr.l        = sourcebuff               ; source pointer
0000B4B0 <preprocessor.include.ab3@369> count.l       = 0
0000B4CE <preprocessor.include.ab3@370> Poke.l bptr+8192*2-4,@"B00B"             ; test cookie
0000B4E2 <preprocessor.include.ab3@371> While sptr<eptr
0000B4F2 <preprocessor.include.ab3@372>   c.b  = Peek.b(sptr)
0000B508 <preprocessor.include.ab3@374>   If (c&$80)
0000B520 <preprocessor.include.ab3@376>     tokenIndex.l = Peek.w(sptr) & $7FFF
0000B53C <preprocessor.include.ab3@377>     tokenNode.l = Peek.l(*tn\detokens + tokenIndex*4)
0000B546 <preprocessor.include.ab3@378>     If tokenNode
0000B562 <preprocessor.include.ab3@379>       tokenLength.l = Peek.l(tokenNode) : tokenNode+4
0000B574 <preprocessor.include.ab3@380>       If tokenLength<8192
0000B5A2 <preprocessor.include.ab3@381>         For n.l=0 To tokenLength-1
0000B5DE <preprocessor.include.ab3@382>           Poke.b dptr,Peek.b(tokenNode) : dptr+1 : tokenNode+1
0000B5EE <preprocessor.include.ab3@383>         Next
0000B5F4 <preprocessor.include.ab3@384>       Else
0000B5FA <preprocessor.include.ab3@387>     Else
0000B612 <preprocessor.include.ab3@388>       libid.l   = (tokenIndex LSR 7) & $FF
0000B622 <preprocessor.include.ab3@389>       tokenid.l = tokenIndex & $7F
0000B6A8 <preprocessor.include.ab3@390>       defToken.s = "????Lib"+Str$(libid)+"/"+Str$(tokenid)
0000B6E2 <preprocessor.include.ab3@391>       For n.l=0 To FLen(defToken)-1
0000B718 <preprocessor.include.ab3@392>         Poke.b dptr,Peek.b(&defToken+n) : dptr+1
0000B728 <preprocessor.include.ab3@393>       Next
0000B736 <preprocessor.include.ab3@395>     sptr+2
0000B73C <preprocessor.include.ab3@396>   Else
0000B74C <preprocessor.include.ab3@397>     If c=0   ; it's a newline
0000B776 <preprocessor.include.ab3@398>       Poke.b dptr,$0A : dptr+1 : sptr+1
0000B77C <preprocessor.include.ab3@399>     Else
0000B7A8 <preprocessor.include.ab3@400>       Poke.b dptr,c : dptr+1 : sptr+1
0000B7B8 <preprocessor.include.ab3@403>     If (c=$22) ; it's a string!
0000B7C8 <preprocessor.include.ab3@405>         c  = Peek.b(sptr)
0000B7E6 <preprocessor.include.ab3@406>         Poke.b dptr,c : dptr+1
0000B7F4 <preprocessor.include.ab3@407>         sptr+1
0000B82A <preprocessor.include.ab3@408>       Until ((c=$22) OR (c=0) OR (sptr>=eptr))
0000B84E <preprocessor.include.ab3@409>       If c=0 Then Poke.b dptr-1,$0A
0000B862 <preprocessor.include.ab3@412>     If (c=@";") ; it's a comment!
0000B872 <preprocessor.include.ab3@414>         c  = Peek.b(sptr)
0000B890 <preprocessor.include.ab3@415>         Poke.b dptr,c : dptr+1
0000B89E <preprocessor.include.ab3@416>         sptr+1
0000B8C2 <preprocessor.include.ab3@417>       Until ((c=0) OR (sptr>=eptr))
0000B8E6 <preprocessor.include.ab3@418>       If c=0 Then Poke.b dptr-1,$0A
0000B8F4 <preprocessor.include.ab3@422>   If dptr>aptr
0000B902 <preprocessor.include.ab3@423>     wlen.l = dptr-bptr
0000B922 <preprocessor.include.ab3@424>     Write_ fp,bptr,wlen
0000B930 <preprocessor.include.ab3@425>     count + wlen
0000B936 <preprocessor.include.ab3@426>     dptr = bptr
0000B93C <preprocessor.include.ab3@429> Wend
0000B94A <preprocessor.include.ab3@431> If dptr>bptr
0000B958 <preprocessor.include.ab3@432>   wlen.l = dptr-bptr
0000B978 <preprocessor.include.ab3@433>   Write_ fp,bptr,wlen
0000B986 <preprocessor.include.ab3@434>   count + wlen
0000B98C <preprocessor.include.ab3@435>   dptr = bptr
0000B99C <preprocessor.include.ab3@440> FreeVec_ bptr
0000B9A6 <preprocessor.include.ab3@442> Function Return count
0000B9BA <preprocessor.include.ab3@443> End Function
0000B9E0 <preprocessor.include.ab3@448> Function.l preproc_Detokenize{*tn.preprocessor,sourcebuff.l,destbuff.l,bytelength.l}
0000BA00 <preprocessor.include.ab3@449> If *tn = #NULL Then Function Return -1
0000BA26 <preprocessor.include.ab3@450> If *tn\detokens = #NULL Then Function Return -1
0000BA2C <preprocessor.include.ab3@451> dptr.l        = destbuff
0000BA3A <preprocessor.include.ab3@452> eptr.l        = sourcebuff+bytelength
0000BA40 <preprocessor.include.ab3@453> sptr.l        = sourcebuff
0000BA54 <preprocessor.include.ab3@454> While sptr<eptr
0000BA64 <preprocessor.include.ab3@455>   c.b  = Peek.b(sptr)
0000BA7A <preprocessor.include.ab3@457>   If (c&$80)
0000BA92 <preprocessor.include.ab3@459>     tokenIndex.l = Peek.w(sptr) & $7FFF
0000BAAE <preprocessor.include.ab3@460>     tokenNode.l = Peek.l(*tn\detokens + tokenIndex*4)
0000BAB8 <preprocessor.include.ab3@461>     If tokenNode
0000BAD4 <preprocessor.include.ab3@462>       tokenLength.l = Peek.l(tokenNode) : tokenNode+4
0000BB02 <preprocessor.include.ab3@463>       For n.l=0 To tokenLength-1
0000BB3E <preprocessor.include.ab3@464>         Poke.b dptr,Peek.b(tokenNode) : dptr+1 : tokenNode+1
0000BB4E <preprocessor.include.ab3@465>       Next
0000BB5C <preprocessor.include.ab3@467>     sptr+2
0000BB62 <preprocessor.include.ab3@468>   Else
0000BB72 <preprocessor.include.ab3@469>     If c=0
0000BB9C <preprocessor.include.ab3@470>       Poke.b dptr,$0A : dptr+1 : sptr+1
0000BBA2 <preprocessor.include.ab3@471>     Else
0000BBCE <preprocessor.include.ab3@472>       Poke.b dptr,c : dptr+1 : sptr+1
0000BBDE <preprocessor.include.ab3@474>     If (c=$22)
0000BBEE <preprocessor.include.ab3@476>         c  = Peek.b(sptr)
0000BC0C <preprocessor.include.ab3@477>         Poke.b dptr,c : dptr+1
0000BC1A <preprocessor.include.ab3@478>         sptr+1
0000BC50 <preprocessor.include.ab3@479>       Until ((c=$22) OR (c=0) OR (sptr>=eptr))
0000BC74 <preprocessor.include.ab3@480>       If c=0 Then Poke.b dptr-1,$0A
0000BC88 <preprocessor.include.ab3@483>     If (c=@";")
0000BC98 <preprocessor.include.ab3@485>         c  = Peek.b(sptr)
0000BCB6 <preprocessor.include.ab3@486>         Poke.b dptr,c : dptr+1
0000BCC4 <preprocessor.include.ab3@487>         sptr+1
0000BCE8 <preprocessor.include.ab3@488>       Until ((c=0) OR (sptr>=eptr))
0000BD0C <preprocessor.include.ab3@489>       If c=0 Then Poke.b dptr-1,$0A
0000BD12 <preprocessor.include.ab3@493> Wend
0000BD22 <preprocessor.include.ab3@494> Function Return dptr-destbuff
0000BD28 <preprocessor.include.ab3@495> End Function
0000BD5E <preprocessor.include.ab3@498> Function.l preproc_AddToken{*tn.preprocessor,tokenName.s,tokenID.l,libID.l}
0000BD7C <preprocessor.include.ab3@499> If *tn = #NULL Then Function Return #NULL
0000BDA2 <preprocessor.include.ab3@500> If *tn\tokens = #NULL Then *tn\tokens=hashmap_Create{14}
0000BDC2 <preprocessor.include.ab3@501> If *tn\tokens = #NULL Then Function Return #NULL
0000BDE0 <preprocessor.include.ab3@502> tokenW.w = libID LSL 7 | tokenID | $8000
0000BE0E <preprocessor.include.ab3@503> tokenS.s = Peeks$(&tokenW,2)
0000BE70 <preprocessor.include.ab3@504> Function Return hashmap_AddItem{*tn\tokens,tokenName,tokenS}
0000BE8A <preprocessor.include.ab3@505> End Function
0000BEA4 <preprocessor.include.ab3@509> Statement preproc_QueryTokens{*PreProcessor.preprocessor}
0000BEAE <preprocessor.include.ab3@510> preproc_FlushTokens{*PreProcessor}
0000BEEC <preprocessor.include.ab3@511> !ComData_GetL{comPtr_TokenBase,D0}
0000BEF0 <preprocessor.include.ab3@512> *token.tokeninfo = PutD0
0000BEFA <preprocessor.include.ab3@514> While *token
0000BF28 <preprocessor.include.ab3@515>   name.s    =  Peek.s(&*token\dat)
0000BF48 <preprocessor.include.ab3@516>   libid.l   = (*token\number LSR 7) &$FF
0000BF60 <preprocessor.include.ab3@517>   tokenid.l = *token\number & $7F
0000BFBE <preprocessor.include.ab3@518>   tokenS.s  = hashmap_GetItem{*PreProcessor\tokens,name}
0000BFEA <preprocessor.include.ab3@519>   If tokenS
0000BFFC <preprocessor.include.ab3@520>     dtoken.l = Peek.w(&tokenS)
0000C00C <preprocessor.include.ab3@521>     dtokenid.l = (dtoken) & $7F
0000C024 <preprocessor.include.ab3@522>     dlibid.l   = (dtoken LSR 7) &$FF
0000C02A <preprocessor.include.ab3@524>   Else
0000C064 <preprocessor.include.ab3@525>     preproc_AddToken{*PreProcessor,name,tokenid,libid}
0000C06E <preprocessor.include.ab3@527>   *token = *token\next_token
0000C074 <preprocessor.include.ab3@528> Wend
0000C07E <preprocessor.include.ab3@529> preproc_Update{*PreProcessor}
0000C090 <preprocessor.include.ab3@530> End Statement
0000C090 <AmiBlitz3.ab2@90> 
0000C090 <wizard_Table.include.bb2@1> XINCLUDE "PE/wizard_Table.include.bb2"
0000C09C <wizard_Table.include.bb2@73> optimize 5
0000C0BE <wizard_Table.include.bb2@78> If ((Maximum GTList) < 25) OR ((Maximum File)<10)
0000C11A <wizard_Table.include.bb2@79>   dummy.l = RTEZRequest("","Object Maximum too small\\nIncrease Objectsize for GTList to >25\\nand Objectsize for Files to >10","Exit")
0000C120 <wizard_Table.include.bb2@80> End
0000C120 <wizard_Tools.include.bb2@1> XINCLUDE "PE/wizard_Tools.include.bb2"
0000C120 <screen.include.bb2@1> XINCLUDE "screen.include.bb2"
0000C120 <asl.include.bb2@1> XINCLUDE "asl.include.bb2"
0000C144 <asl.include.bb2@93> Dim aslfiledat.aslfiledat(#MAX_ASLFR_IDs-1)
0000C16C <asl.include.bb2@94> Dim List file_requ_items.mfiles(0)
0000C190 <asl.include.bb2@95> Dim asltag.TagItem (64)
0000C1BE <asl.include.bb2@294> Function.l aslfr_Request{id.l,savemode.l,multiselect.l,drawersonly.l,@*scr.Screen,@noIcons.l}
0000C3DC <asl.include.bb2@296> !_ASL_Init
0000C40A <asl.include.bb2@298> If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0
0000C436 <asl.include.bb2@300> asltag(n)\ti_Tag = #ASLFR_Screen           ,*scr                          : n+1
0000C472 <asl.include.bb2@301> asltag(n)\ti_Tag = #ASLFR_TitleText        ,&aslfiledat(id)\title             : n+1
0000C49E <asl.include.bb2@302> asltag(n)\ti_Tag = #ASLFR_InitialLeftEdge  ,ASL_x                         : n+1
0000C4CA <asl.include.bb2@303> asltag(n)\ti_Tag = #ASLFR_InitialTopEdge   ,ASL_y                         : n+1
0000C4F6 <asl.include.bb2@304> asltag(n)\ti_Tag = #ASLFR_InitialWidth     ,ASL_xs                        : n+1
0000C522 <asl.include.bb2@305> asltag(n)\ti_Tag = #ASLFR_InitialHeight    ,ASL_ys                        : n+1
0000C54E <asl.include.bb2@306> asltag(n)\ti_Tag = #ASLFR_DoSaveMode       ,savemode                      : n+1
0000C57A <asl.include.bb2@307> asltag(n)\ti_Tag = #ASLFR_DoMultiSelect    ,multiselect                   : n+1
0000C5A6 <asl.include.bb2@308> asltag(n)\ti_Tag = #ASLFR_DrawersOnly      ,drawersonly                   : n+1
0000C5D2 <asl.include.bb2@309> asltag(n)\ti_Tag = #ASLFR_RejectIcons      ,noIcons                       : n+1
0000C662 <asl.include.bb2@311> If aslfiledat(id)\ok><""   Then asltag(n)\ti_Tag = #ASLFR_PositiveText,&aslfiledat(id)\ok           : n+1
0000C6F2 <asl.include.bb2@312> If aslfiledat(id)\cancel><""Then asltag(n)\ti_Tag = #ASLFR_NegativeText,&aslfiledat(id)\cancel      : n+1
0000C790 <asl.include.bb2@313> If aslfiledat(id)\fil><""  AND drawersonly=False Then asltag(n)\ti_Tag = #ASLFR_InitialFile,&aslfiledat(id)\fil : n+1
0000C7DA <asl.include.bb2@314> If aslfiledat(id)\path><""
0000C81A <asl.include.bb2@315>   asltag(n)\ti_Tag = #ASLFR_InitialDrawer,&aslfiledat(id)\path        : n+1
0000C820 <asl.include.bb2@316> Else
0000C86A <asl.include.bb2@319> If aslfiledat(id)\patt><""
0000C8AA <asl.include.bb2@320>   asltag(n)\ti_Tag = #ASLFR_InitialPattern,&aslfiledat(id)\patt       : n+1
0000C8D4 <asl.include.bb2@321>   asltag(n)\ti_Tag = #ASLFR_DoPatterns,True                       : n+1
0000C8DA <asl.include.bb2@322> Else
0000C904 <asl.include.bb2@323>   asltag(n)\ti_Tag = #ASLFR_DoPatterns,False                      : n+1
0000C92E <asl.include.bb2@325> asltag(n)\ti_Tag = #TAG_DONE,False                                        : n+1
0000C958 <asl.include.bb2@327> *file_requ.FileRequester_TK = AllocAslRequest_ (#ASL_FileRequest,&asltag(0)\ti_Tag)
0000C962 <asl.include.bb2@328> If *file_requ
0000C980 <asl.include.bb2@329>   asltag(0)\ti_Tag = #TAG_DONE,False
0000C9A2 <asl.include.bb2@330>   If AslRequest_ (*file_requ,0)
0000C9D0 <asl.include.bb2@331>     d$=Peek.s(*file_requ\fr_Drawer) ;,256)
0000C9FE <asl.include.bb2@332>     f$=Peek.s(*file_requ\fr_File); ,256)
0000CA2C <asl.include.bb2@333>     p$=Peek.s(*file_requ\fr_Pattern);

0000CA72 <asl.include.bb2@336>     aslfiledat(id)\fil     = f$
0000CAB8 <asl.include.bb2@337>     aslfiledat(id)\path    = d$
0000CAFE <asl.include.bb2@338>     aslfiledat(id)\patt    = p$
0000CB36 <asl.include.bb2@340>     If d$<>""
0000CC34 <asl.include.bb2@341>       If Right$(d$,1)<>":" AND Right$(d$,1)<>"/" Then d$=d$+"/"
0000CC52 <asl.include.bb2@343>     aslfiledat(id)\filecount = 0
0000CC5C <asl.include.bb2@345>     ClearList file_requ_items()
0000CC82 <asl.include.bb2@346>     If multiselect Then selected.l= *file_requ\fr_NumArgs :Else selected = 0
0000CC94 <asl.include.bb2@348>     If selected>1                     ;multiple files were selected
0000CCC2 <asl.include.bb2@349>       For i.l = 0 To selected -1
0000CCEA <asl.include.bb2@350>         *nextarg.l=Peek.l(*file_requ\fr_ArgList+(8*i)+4)
0000CCFC <asl.include.bb2@351>         If AddItem(file_requ_items())
0000CD52 <asl.include.bb2@352>           file_requ_items()\pathname=d$+Peek.s(*nextarg)
0000CD88 <asl.include.bb2@353>           aslfiledat(id)\filecount + 1
0000CD98 <asl.include.bb2@355>       Next
0000CD9E <asl.include.bb2@356>     Else                              ;one or less selected
0000CDB0 <asl.include.bb2@357>       If AddItem(file_requ_items())
0000CDBA <asl.include.bb2@358>         If drawersonly
0000CDF4 <asl.include.bb2@359>           file_requ_items()\pathname=d$
0000CDFA <asl.include.bb2@360>         Else
0000CE52 <asl.include.bb2@361>           file_requ_items()\pathname=d$+f$
0000CE70 <asl.include.bb2@363>         aslfiledat(id)\filecount = 1
0000CE76 <asl.include.bb2@366>     succ = True
0000CE86 <asl.include.bb2@369>   ASL_x   = *file_requ\fr_LeftEdge
0000CE96 <asl.include.bb2@370>   ASL_y   = *file_requ\fr_TopEdge
0000CEA6 <asl.include.bb2@371>   ASL_xs  = *file_requ\fr_Width
0000CEB6 <asl.include.bb2@372>   ASL_ys  = *file_requ\fr_Height
0000CEC6 <asl.include.bb2@374>   FreeAslRequest_ *file_requ
0000CED0 <asl.include.bb2@376> Function Return succ
0000CEE4 <asl.include.bb2@377> End Function
0000CEFA <asl.include.bb2@393> Function.s aslfr_GetNextFile{}
0000CF22 <asl.include.bb2@395> a.s = ""
0000CF2C <asl.include.bb2@396> ResetList file_requ_items()
0000CF3E <asl.include.bb2@397> If NextItem(file_requ_items())
0000CF78 <asl.include.bb2@398>   a.s = file_requ_items()\pathname
0000CF82 <asl.include.bb2@399>   KillItem file_requ_items()
0000CFAC <asl.include.bb2@401> Function Return a.s
0000CFC4 <asl.include.bb2@402> End Function
0000D016 <asl.include.bb2@438> Statement aslfr_SetPath{id.l,path.s,@fil.s,@patt.s,@optional.l}
0000D044 <asl.include.bb2@440> If id<0 OR id>#MAX_ASLFR_IDs-1 Then id=0
0000D0D6 <asl.include.bb2@441> If fil ><"" OR optional=False Then aslfiledat(id)\fil   = fil.s
0000D11C <asl.include.bb2@442> aslfiledat(id)\path  = path.s
0000D1AE <asl.include.bb2@443> If patt><"" OR optional=False Then aslfiledat(id)\patt  = patt.s
0000D1C8 <asl.include.bb2@444> End Statement
0000D212 <asl.include.bb2@629> Statement aslsm_SetRequesterTitle{title.s,ok.s,cancel.s}
0000D246 <asl.include.bb2@630> aslscreendat\title  = title.s
0000D27E <asl.include.bb2@631> aslscreendat\ok     = ok.s
0000D2B6 <asl.include.bb2@632> aslscreendat\cancel = cancel.s
0000D2D0 <asl.include.bb2@633> End Statement
0000D2FA <asl.include.bb2@677> Function.l aslsm_Request{@doDims.l,@doDepth.l,@doOverscan.l,@doAutoscroll.l,@*scr.Screen}
0000D518 <asl.include.bb2@678> !_ASL_Init
0000D544 <asl.include.bb2@680> asltag(n)\ti_Tag = #ASLSM_Screen           ,*scr                         : n+1
0000D5B0 <asl.include.bb2@681> If title.s><"" Then asltag(n)\ti_Tag = #ASLSM_TitleText ,&title.s        : n+1
0000D5DC <asl.include.bb2@682> asltag(n)\ti_Tag = #ASLSM_InitialLeftEdge  ,ASL_x                        : n+1
0000D608 <asl.include.bb2@683> asltag(n)\ti_Tag = #ASLSM_InitialTopEdge   ,ASL_y                        : n+1
0000D634 <asl.include.bb2@684> asltag(n)\ti_Tag = #ASLSM_InitialWidth     ,ASL_xs                       : n+1
0000D660 <asl.include.bb2@685> asltag(n)\ti_Tag = #ASLSM_InitialHeight    ,ASL_ys                       : n+1
0000D6AA <asl.include.bb2@687> If aslscreendat\mind>0 Then asltag(n)\ti_Tag = #ASLSM_MinDepth  , aslscreendat\mind  : n+1
0000D6F4 <asl.include.bb2@688> If aslscreendat\maxd>0 Then asltag(n)\ti_Tag = #ASLSM_MaxDepth  , aslscreendat\maxd  : n+1
0000D73E <asl.include.bb2@689> If aslscreendat\minw>0 Then asltag(n)\ti_Tag = #ASLSM_MinWidth  , aslscreendat\minw  : n+1
0000D788 <asl.include.bb2@690> If aslscreendat\minh>0 Then asltag(n)\ti_Tag = #ASLSM_MinHeight , aslscreendat\minh  : n+1
0000D7D2 <asl.include.bb2@691> If aslscreendat\maxw>0 Then asltag(n)\ti_Tag = #ASLSM_MaxWidth  , aslscreendat\maxw  : n+1
0000D81C <asl.include.bb2@692> If aslscreendat\maxh>0 Then asltag(n)\ti_Tag = #ASLSM_MaxHeight , aslscreendat\maxh  : n+1
0000D866 <asl.include.bb2@694> If aslscreendat\scr_id    >0 Then asltag(n)\ti_Tag = #ASLSM_InitialDisplayID      ,aslscreendat\scr_id        : n+1
0000D8AE <asl.include.bb2@695> If aslscreendat\scr_depth >0 Then asltag(n)\ti_Tag = #ASLSM_InitialDisplayDepth   ,aslscreendat\scr_depth     : n+1
0000D8F8 <asl.include.bb2@696> If aslscreendat\scr_width >0 Then asltag(n)\ti_Tag = #ASLSM_InitialDisplayWidth   ,aslscreendat\scr_width     : n+1
0000D942 <asl.include.bb2@697> If aslscreendat\scr_height>0 Then asltag(n)\ti_Tag = #ASLSM_InitialDisplayHeight  ,aslscreendat\scr_height    : n+1
0000D96E <asl.include.bb2@699> asltag(n)\ti_Tag = #ASLSM_DoWidth         , doDims  : n+1
0000D99A <asl.include.bb2@700> asltag(n)\ti_Tag = #ASLSM_DoHeight        , doDims  : n+1
0000D9C6 <asl.include.bb2@701> asltag(n)\ti_Tag = #ASLSM_DoDepth         , doDepth : n+1
0000D9F2 <asl.include.bb2@702> asltag(n)\ti_Tag = #ASLSM_DoOverscanType  , doOverscan  : n+1
0000DA1E <asl.include.bb2@703> asltag(n)\ti_Tag = #ASLSM_DoAutoScroll    , doAutoscroll  : n+1
0000DA3A <asl.include.bb2@704> asltag(n)\ti_Tag = #TAG_DONE,False
0000DA64 <asl.include.bb2@706> *screen_requ.ScreenModeRequester = AllocAslRequest_ (#ASL_ScreenModeRequest,&asltag(0)\ti_Tag)
0000DA6E <asl.include.bb2@707> If *screen_requ
0000DA8C <asl.include.bb2@708>   asltag(0)\ti_Tag = #TAG_DONE,False
0000DAAE <asl.include.bb2@709>   If AslRequest_ (*screen_requ,0)
0000DAC0 <asl.include.bb2@710>     aslscreendat\scr_width     = *screen_requ\sm_DisplayWidth
0000DAD2 <asl.include.bb2@711>     aslscreendat\scr_height    = *screen_requ\sm_DisplayHeight
0000DAE4 <asl.include.bb2@712>     aslscreendat\scr_depth     = *screen_requ\sm_DisplayDepth
0000DAF6 <asl.include.bb2@713>     aslscreendat\scr_overscan  = *screen_requ\sm_OverscanType
0000DB04 <asl.include.bb2@714>     aslscreendat\scr_id        = *screen_requ\sm_DisplayID
0000DB16 <asl.include.bb2@715>     aslscreendat\scr_ascroll   = *screen_requ\sm_AutoScroll
0000DB20 <asl.include.bb2@716>     succ = *screen_requ\sm_DisplayID
0000DB30 <asl.include.bb2@718>   ASL_x   = *screen_requ\sm_LeftEdge
0000DB40 <asl.include.bb2@719>   ASL_y   = *screen_requ\sm_TopEdge
0000DB50 <asl.include.bb2@720>   ASL_xs  = *screen_requ\sm_Width
0000DB60 <asl.include.bb2@721>   ASL_ys  = *screen_requ\sm_Height
0000DB70 <asl.include.bb2@723>   FreeAslRequest_ *screen_requ
0000DB76 <asl.include.bb2@724> Else
0000DBA4 <asl.include.bb2@725>   error{"\\__THIS_FUNCTION: Unable to allocate ASL screen requester!"}
0000DBAE <asl.include.bb2@727> Function Return succ.l
0000DBB4 <asl.include.bb2@728> End Function
0000DBCE <asl.include.bb2@746> Function.s aslsm_GetModeName{@modeid.l}
0000DBF6 <asl.include.bb2@748> name.s = "unknown"
0000DC18 <asl.include.bb2@749> If modeid =-1 Then modeid = aslscreendat\scr_id
0000DC40 <asl.include.bb2@750> If modeid=-1 OR modeid = 0
0000DC6E <asl.include.bb2@751>   *scr.Screen = Peek.l(Addr Screen(Used Screen))
0000DC78 <asl.include.bb2@752>   If *scr
0000DC92 <asl.include.bb2@753>     modeid.l = GetVPModeID_(*scr\ViewPort)
0000DCBA <asl.include.bb2@756> If modeid><-1 AND modeid><0
0000DCCE <asl.include.bb2@757>   mode_ptr.l = FindDisplayInfo_ (modeid)
0000DCD8 <asl.include.bb2@758>   If mode_ptr
0000DD12 <asl.include.bb2@759>     count.l = GetDisplayInfoData_ (mode_ptr,&naminfo,SizeOf.NameInfo,#DTAG_NAME,modeid)
0000DD40 <asl.include.bb2@760>     name.s = Peek.s(&naminfo\Name)
0000DD6A <asl.include.bb2@763> Function Return name
0000DD92 <asl.include.bb2@764> End Function
0000DDA8 <asl.include.bb2@782> Function.l aslsm_GetWidth{}
0000DDB8 <asl.include.bb2@784> Function Return aslscreendat\scr_width
0000DDBC <asl.include.bb2@785> End Function
0000DDD2 <asl.include.bb2@801> Function.l aslsm_GetHeight{}
0000DDE2 <asl.include.bb2@803> Function Return aslscreendat\scr_height
0000DDE6 <asl.include.bb2@804> End Function
0000DDFC <asl.include.bb2@821> Function.l aslsm_GetDepth{}
0000DE0E <asl.include.bb2@823> Function Return aslscreendat\scr_depth
0000DE12 <asl.include.bb2@824> End Function
0000DE28 <asl.include.bb2@840> Function.l aslsm_GetModeID{}
0000DE38 <asl.include.bb2@842> Function Return aslscreendat\scr_id
0000DE3C <asl.include.bb2@843> End Function
0000DE52 <asl.include.bb2@859> Function.l aslsm_GetOverscan{}
0000DE64 <asl.include.bb2@861> Function Return aslscreendat\scr_overscan
0000DE68 <asl.include.bb2@862> End Function
0000DE7E <asl.include.bb2@876> Function.l aslsm_GetAutoscroll{}
0000DE90 <asl.include.bb2@878> Function Return aslscreendat\scr_ascroll
0000DE94 <asl.include.bb2@879> End Function
0000DEB6 <asl.include.bb2@923> Statement aslsm_SetMinDims{min_width.l,min_height.l,min_depth.l}
0000DEC2 <asl.include.bb2@924> aslscreendat\minw = min_width
0000DECE <asl.include.bb2@925> aslscreendat\minh = min_height
0000DEDA <asl.include.bb2@926> aslscreendat\mind = min_depth
0000DEDE <asl.include.bb2@927> End Statement
0000DF00 <asl.include.bb2@972> Statement aslsm_SetInitialDims{init_width.l,init_height.l,init_depth.l}
0000DF0C <asl.include.bb2@973> aslscreendat\scr_depth  = init_depth
0000DF18 <asl.include.bb2@974> aslscreendat\scr_width  = init_width
0000DF24 <asl.include.bb2@975> aslscreendat\scr_height = init_height
0000DF28 <asl.include.bb2@976> End Statement
0000DF42 <asl.include.bb2@990> Statement aslsm_SetInitialModeID{init_id.l}
0000DF4E <asl.include.bb2@992> aslscreendat\scr_id     = init_id
0000DF76 <asl.include.bb2@993> If init_id><0 AND init_id><-1
0000DF8A <asl.include.bb2@994>   mode_ptr.l = FindDisplayInfo_ (init_id)
0000DF94 <asl.include.bb2@995>   If mode_ptr
0000DFCA <asl.include.bb2@996>   GetDisplayInfoData_ mode_ptr,&diminfo,SizeOf.DimensionInfo,#DTAG_DIMS,init_id
0000DFF2 <asl.include.bb2@998>   aslscreendat\scr_width  = diminfo\Nominal\MaxX-diminfo\Nominal\MinX+1
0000E01A <asl.include.bb2@999>   aslscreendat\scr_height = diminfo\Nominal\MaxY-diminfo\Nominal\MinY+1
0000E03C <asl.include.bb2@1002> End Statement
0000E03C <screen.include.bb2@38> 
0000E060 <screen.include.bb2@89> Dim staglist.TagItem(20)
0000E070 <screen.include.bb2@92> \penarraydummy = -1
0000E07E <screen.include.bb2@93> \scr_id = #scr_mode_invalid
0000E088 <screen.include.bb2@94> \scr_isopen = False
0000E096 <screen.include.bb2@95> \scr_sysfont = #scr_sysfont_wb_off
0000E0B8 <screen.include.bb2@219> Function.l screen_GetPen {r.l,g.l,b.l}
0000E0DC <screen.include.bb2@220>   If \scr=0 Then Function Return 1
0000E0FC <screen.include.bb2@221>   r = r * \bias_red   / 100
0000E116 <screen.include.bb2@222>   If r<0 Then r=0
0000E130 <screen.include.bb2@223>   If r>255 Then r=255
0000E150 <screen.include.bb2@225>   g = g * \bias_green / 100
0000E16A <screen.include.bb2@226>   If g<0 Then g=0
0000E184 <screen.include.bb2@227>   If g>255 Then g=255
0000E1A4 <screen.include.bb2@229>   b = b * \bias_blue / 100
0000E1BE <screen.include.bb2@230>   If b<0 Then b=0
0000E1D8 <screen.include.bb2@231>   If b>255 Then b=255
0000E1E8 <screen.include.bb2@233>   r=r LSL 24 ;

0000E1F8 <screen.include.bb2@234>   g=g LSL 24 ; adjust to "32-bit left justified long value"
0000E208 <screen.include.bb2@235>   b=b LSL 24 ;

0000E21A <screen.include.bb2@236>   *view.ViewPort=\scr\ViewPort
0000E228 <screen.include.bb2@237>   *cmap.ColorMap=*view\ColorMap
0000E278 <screen.include.bb2@238>   pen.l=ObtainBestPenA_(*cmap,r,g,b,Tags(#OBP_Precision,#PRECISION_IMAGE))
0000E2C8 <screen.include.bb2@239>   If pen>=0 AND pen<=255 Then screenengine\screenPenLock[pen]+1
0000E316 <screen.include.bb2@240>   If pen=-1 Then error {"Unable to obtain pen!"}:Function Return 1 ; check for failure
0000E320 <screen.include.bb2@241>  Function Return pen
0000E326 <screen.include.bb2@242> End Function
0000E340 <screen.include.bb2@261> Function.l screen_GetPenRGB {color.l}
0000E358 <screen.include.bb2@262>   r.l = ((color & $00ff0000) LSR 16 )
0000E370 <screen.include.bb2@263>   g.l = ((color & $0000ff00) LSR 8 )
0000E380 <screen.include.bb2@264>   b.l = ((color & $000000ff)  )
0000E398 <screen.include.bb2@265>  Function Return screen_GetPen{r,g,b}
0000E39E <screen.include.bb2@266> End Function
0000E3B8 <screen.include.bb2@282> Statement screen_ReleasePen {pen.l}
0000E3CA <screen.include.bb2@283>   If \scr
0000E3DC <screen.include.bb2@284>     *view.ViewPort=\scr\ViewPort
0000E3EA <screen.include.bb2@285>     *cmap.ColorMap=*view\ColorMap
0000E406 <screen.include.bb2@286>     If screenengine\screenPenLock[pen]>0
0000E41E <screen.include.bb2@287>       ReleasePen_ *cmap,pen
0000E446 <screen.include.bb2@288>       screenengine\screenPenLock[pen]-1
0000E44A <screen.include.bb2@291> End Statement
0000E470 <screen.include.bb2@313> Statement screen_SetPen {n.l,r.l,g.l,b.l}
0000E48E <screen.include.bb2@314>   If \scr=0 Then Statement Return
0000E4AE <screen.include.bb2@315>   r = r * \bias_red   / 100
0000E4C8 <screen.include.bb2@316>   If r<0 Then r=0
0000E4E2 <screen.include.bb2@317>   If r>255 Then r=255
0000E502 <screen.include.bb2@319>   g = g * \bias_green / 100
0000E51C <screen.include.bb2@320>   If g<0 Then g=0
0000E536 <screen.include.bb2@321>   If g>255 Then g=255
0000E556 <screen.include.bb2@323>   b = b * \bias_blue / 100
0000E570 <screen.include.bb2@324>   If b<0 Then b=0
0000E58A <screen.include.bb2@325>   If b>255 Then b=255
0000E59A <screen.include.bb2@327>   r=r LSL 24 ;

0000E5AA <screen.include.bb2@328>   g=g LSL 24 ; adjust to "32-bit left justified long value"
0000E5BA <screen.include.bb2@329>   b=b LSL 24 ;

0000E5CC <screen.include.bb2@330>   *view.ViewPort=\scr\ViewPort
0000E5DA <screen.include.bb2@331>   *cmap.ColorMap=*view\ColorMap
0000E60A <screen.include.bb2@332>   SetRGB32_*view,n,r,g,b
0000E676 <screen.include.bb2@333>   If ObtainPen_ (*cmap,n,r,g,b,#PEN_NO_SETCOLOR) Then screenengine\screenPenLock[n]+1;:Else error{"Setpen failed!"}
0000E67A <screen.include.bb2@334> End Statement
0000E6A8 <screen.include.bb2@417> Function.l screen_ASLRequest {title.s,mask.l}
0000E6AE <screen.include.bb2@418>   succ.l = False
0000E714 <screen.include.bb2@419>   aslsm_SetRequesterTitle{title.s,"",""}
0000E73A <screen.include.bb2@420>   If mask&#asl_scr_width    Then doDims.l=True:Else doDims=False
0000E754 <screen.include.bb2@421>   If mask&#asl_scr_height   Then doDims=True
0000E77A <screen.include.bb2@422>   If mask&#asl_scr_depth    Then doDepth.l=True:Else doDepth=False
0000E7A0 <screen.include.bb2@423>   If mask&#asl_scr_overscan Then doOverscan.l=True:Else doOverscan=False
0000E7C6 <screen.include.bb2@424>   If mask&#asl_scr_ascroll   Then doAutoscroll.l=True:Else doAutoscroll=False
0000E7F0 <screen.include.bb2@425>   If aslsm_Request{doDims,doDepth,doOverscan,doAutoscroll} Then succ=True
0000E7FA <screen.include.bb2@426>  Function Return succ
0000E814 <screen.include.bb2@427> End Function
0000E842 <screen.include.bb2@558> Function.w screen_Check {modeid.l,scr_width.l,scr_height.l,scr_depth.w,scr_overscan.l,scr_ascroll.l}
0000E848 <screen.include.bb2@560>   succ.w = False
0000E850 <screen.include.bb2@561>   mask.l = 0
0000E872 <screen.include.bb2@562>   If scr_width<=0     Then mask|#asl_scr_width  ;: Else aslscr\minw = scr_width  : aslscr\maxw = scr_width
0000E894 <screen.include.bb2@563>   If scr_height<=0    Then mask|#asl_scr_height ;: Else aslscr\minh = scr_height : aslscr\maxh = scr_height
0000E8B2 <screen.include.bb2@564>   If scr_depth<=0     Then mask|#asl_scr_depth  ;: Else aslscr\mind = scr_depth  : aslscr\maxd = scr_depth
0000E8D8 <screen.include.bb2@568>   If mask><0 OR modeid<=0
0000E906 <screen.include.bb2@577>     If screen_ASLRequest {"",mask}
0000E90C <screen.include.bb2@579>       succ.w = True
0000E912 <screen.include.bb2@581>   Else
0000E91C <screen.include.bb2@582>     aslsm_SetInitialModeID{modeid}
0000E930 <screen.include.bb2@583>     aslsm_SetInitialDims{scr_width,scr_height,scr_depth}
0000E93C <screen.include.bb2@584>     aslscreendat\scr_overscan   = scr_overscan
0000E948 <screen.include.bb2@585>     aslscreendat\scr_ascroll    = 128
0000E94E <screen.include.bb2@586>     succ.w = True
0000E958 <screen.include.bb2@588>  Function Return succ
0000E95E <screen.include.bb2@589> End Function
0000E974 <screen.include.bb2@593> Statement screen_ReleaseAllPens{}
0000E986 <screen.include.bb2@594>   If \scr_isopen
0000E9B0 <screen.include.bb2@595>     For pen.l = 0 To 255
0000E9E2 <screen.include.bb2@596>       While screenengine\screenPenLock[pen]>0:screen_ReleasePen {pen}:Wend
0000E9F8 <screen.include.bb2@597>       screenengine\screenPenLock[pen]=0
0000EA08 <screen.include.bb2@598>     Next
0000EA0C <screen.include.bb2@600> End Statement
0000EA22 <screen.include.bb2@614> Statement screen_Close {}
0000EA34 <screen.include.bb2@615>   If \scr_isopen
0000EA3A <screen.include.bb2@616>     screen_ReleaseAllPens{}
0000EA46 <screen.include.bb2@618>     Select \scr_id
0000EA54 <screen.include.bb2@620>       Case #scr_mode_ask
0000EA82 <screen.include.bb2@621>         error {"The #scr_mode_ask should be overwritten by the real screenmodeID.\\nSomething went defintely wrong here!"}
0000EA96 <screen.include.bb2@623>       Case #scr_mode_wb_use
0000EAAA <screen.include.bb2@626>       Case #scr_mode_find
0000EACA <screen.include.bb2@628>         UnlockPubScreen_ 0,\scr ; we dont need the screen name as argument
0000EAE4 <screen.include.bb2@629>         Poke.l Addr Screen(0),0 ; make AB2 think that the screen is closed
0000EAF8 <screen.include.bb2@631>       Case #scr_mode_invalid
0000EAFE <screen.include.bb2@634>       Default ; handle wb clone and custom screen
0000EB10 <screen.include.bb2@635>         If \scr
0000EB1A <screen.include.bb2@637>             timeout.l = 50*5
0000EB78 <screen.include.bb2@638>             While CloseScreen_ (\scr)=False AND timeout>0:Delay_ 1:timeout-1:Wend
0000EB8A <screen.include.bb2@639>             If timeout=0
0000EBCC <screen.include.bb2@640>               tryagain.l = ask{"Unable to close screen!\\nPlease close all windows/apps running on this screen.","try again...|ignore"}
0000EBD2 <screen.include.bb2@641>             Else
0000EBD8 <screen.include.bb2@642>               tryagain.l = False
0000EBEC <screen.include.bb2@644>           Until tryagain=False
0000EC06 <screen.include.bb2@646>         Poke.l Addr Screen(0),0 ; make AB2 think that the screen is closed
0000EC08 <screen.include.bb2@648>     End Select
0000EC12 <screen.include.bb2@649>     \scr_isopen = False
0000EC20 <screen.include.bb2@650>     \scr        = 0
0000EC2E <screen.include.bb2@651>     \scr_id     = #scr_mode_invalid
0000EC40 <screen.include.bb2@653>     If \screenfont                  ; check if we use a screenfont
0000EC56 <screen.include.bb2@654>       CloseFont_ (\screenfont)      ; yes then close it
0000EC64 <screen.include.bb2@655>       \screenfont = 0
0000EC68 <screen.include.bb2@659> End Statement
0000EC96 <screen.include.bb2@660> !autoexit{screen_Close}
0000ECAC <screen.include.bb2@964> Function.l screen_GetWidth {}
0000ECB8 <screen.include.bb2@965>  Function Return \scr_width
0000ECBC <screen.include.bb2@966> End Function
0000ECD2 <screen.include.bb2@982> Function.l screen_GetHeight {}
0000ECE2 <screen.include.bb2@983>  Function Return \scr_height
0000ECE6 <screen.include.bb2@984> End Function
0000ECE6 <PE_Tools.include.bb2@1> XINCLUDE "PE/PE_Tools.include.bb2"
0000ED0A <PE_Tools.include.bb2@67> Dim monate$(12)
0000ED12 <PE_Tools.include.bb2@76> Restore monate
0000ED40 <PE_Tools.include.bb2@77> For kal.b = 1 To 12
0000ED6E <PE_Tools.include.bb2@78>   Read monate$(kal.b)
0000EDDE <PE_Tools.include.bb2@79>   monatestr$ + monate$(kal) + "\\0a"
0000EDEC <PE_Tools.include.bb2@80> Next kal
0000EE3C <PE_Tools.include.bb2@81> monatestr$ = StripTrail$(monatestr$,10)
0000EE5E <PE_Tools.include.bb2@213> Function.l MulDiv_{a.l,b.l,c.l}
0000EE76 <PE_Tools.include.bb2@214>   Function Return (a*b)/c
0000EE7C <PE_Tools.include.bb2@215> End Function
0000EE9A <PE_Tools.include.bb2@378> Function.s DateAsString{value.l,@mode.b}
0000EEBE <PE_Tools.include.bb2@380>   Format ""
0000EEF2 <PE_Tools.include.bb2@381>   d$  = Str$(value)
0000EF44 <PE_Tools.include.bb2@382>   j$  = Left$(d$,4)
0000EF9C <PE_Tools.include.bb2@383>   m$  = Mid$(d$,5,2)
0000EFEE <PE_Tools.include.bb2@384>   t$  = Right$(d$,2)
0000EFFA <PE_Tools.include.bb2@386>   Select mode
0000F00A <PE_Tools.include.bb2@387>   Case #DATUM_TTMM
0000F080 <PE_Tools.include.bb2@388>     datum$ = t$ + "." + m$ + "."
0000F096 <PE_Tools.include.bb2@389>   Case #DATUM_JJMMTT
0000F12A <PE_Tools.include.bb2@390>     datum$ = j$ + "." + m$ + "."  + t$
0000F140 <PE_Tools.include.bb2@391>   Case #DATUM_TTMMJJ
0000F1FC <PE_Tools.include.bb2@392>     datum$ = t$ + "." + m$ + "."  + Right$(j$,2)
0000F212 <PE_Tools.include.bb2@393>   Case #DATUM_TTMMJJJJ
0000F2A6 <PE_Tools.include.bb2@394>     datum$ = t$ + "." + m$ + "."  + j$
0000F2AC <PE_Tools.include.bb2@395>   Default
0000F340 <PE_Tools.include.bb2@396>     datum$ = t$ + "." + m$ + "."  + j$
0000F342 <PE_Tools.include.bb2@397>   End Select
0000F36C <PE_Tools.include.bb2@398>   Function Return datum$
0000F384 <PE_Tools.include.bb2@399> End Function
0000F3B2 <PE_Tools.include.bb2@408> Function.l DateAsLong{d$,@mode.l}
0000F3F6 <PE_Tools.include.bb2@412>   If Vallong(d$)>1000
0000F4FE <PE_Tools.include.bb2@413>     d$ = Right$(d$,2)+"."+Mid$(d$,6,2)+"."+Left$(d$,4)
0000F522 <PE_Tools.include.bb2@416>   Dim zlong.l(2)
0000F54E <PE_Tools.include.bb2@417>   Format "" : found.l = 0
0000F558 <PE_Tools.include.bb2@418>   CaseSense Off
0000F582 <PE_Tools.include.bb2@419>   For i.l = 1 To 12
0000F61A <PE_Tools.include.bb2@420>     If Instr(d$, Left$(monate$(i),3)) > 0
0000F620 <PE_Tools.include.bb2@421>       found = i
0000F630 <PE_Tools.include.bb2@423>   Next i
0000F636 <PE_Tools.include.bb2@425>   Select found
0000F644 <PE_Tools.include.bb2@426>   Case 0
0000F67C <PE_Tools.include.bb2@427>     l.l  = Len(d$) : quit.b= False
0000F68C <PE_Tools.include.bb2@428>     i.l = 0 : y.l = 0
0000F6A4 <PE_Tools.include.bb2@429>     While quit = False
0000F742 <PE_Tools.include.bb2@430>       a$ = Mid$(d$,Len(d$)-i,1) : i + 1
0000F7FA <PE_Tools.include.bb2@431>       If ( (a$ = ".") OR (a$="-") OR (a$="/")) AND (y < 2)
0000F85A <PE_Tools.include.bb2@432>         zlong(y) = Vallong(Right$(d$,i-1))
0000F8E4 <PE_Tools.include.bb2@433>         d$ = Left$(d$,Len(d$)-i)
0000F8FA <PE_Tools.include.bb2@434>         i = 0 : y + 1
0000F900 <PE_Tools.include.bb2@435>       Else
0000F912 <PE_Tools.include.bb2@436>         If (y = 2)
0000F950 <PE_Tools.include.bb2@437>           zlong(y) = Vallong(d$)
0000F956 <PE_Tools.include.bb2@438>           quit = True
0000F95C <PE_Tools.include.bb2@439>         Else
0000F97A <PE_Tools.include.bb2@440>           If (i>20) Then Function Return 0
0000F980 <PE_Tools.include.bb2@443>     Wend
0000F992 <PE_Tools.include.bb2@445>     If mode = #DATUM_MTJ
0000F9A6 <PE_Tools.include.bb2@446>       swap_.l= zlong(1)
0000F9C6 <PE_Tools.include.bb2@447>       zlong(1) = zlong(2)
0000F9DA <PE_Tools.include.bb2@448>       zlong(2) = swap_
0000FA1C <PE_Tools.include.bb2@451>     If (zlong(0)>70) AND (zlong(0)<100)
0000FA44 <PE_Tools.include.bb2@452>       zlong(0)=1900 + zlong(0)
0000FA4A <PE_Tools.include.bb2@453>     Else
0000FA90 <PE_Tools.include.bb2@454>       If zlong(0)<70 Then zlong(0)=2000 + zlong(0)
0000FB56 <PE_Tools.include.bb2@457>     If (zlong(0)<1900) OR (zlong(0)>2200) OR (zlong(1)=0) OR (zlong(1)>12) OR (zlong(2)=0) OR (zlong(2)>32) Then Function Return 0
0000FB5C <PE_Tools.include.bb2@459>   Default
0000FB70 <PE_Tools.include.bb2@461>     zlong(1) = found
0000FBF8 <PE_Tools.include.bb2@462>     If Val(StrRight(StripTrail$(d$,32),4)) > 1000
0000FC5E <PE_Tools.include.bb2@463>       zlong(0) = Val(StrRight(d$,4))
0000FC64 <PE_Tools.include.bb2@464>     Else
0000FCCA <PE_Tools.include.bb2@465>       zlong(0) = Val(StrRight(d$,2))
0000FD3A <PE_Tools.include.bb2@466>       If zlong(0)<70 Then zlong(0)+2000 Else zlong(0)+1900
0000FDA0 <PE_Tools.include.bb2@468>     zlong(2) = Val(StrLeft(d$,2))
0000FDA2 <PE_Tools.include.bb2@469>   End Select
0000FDA8 <PE_Tools.include.bb2@471>   Select mode
0000FDB6 <PE_Tools.include.bb2@472>   Case #DATUM_DAYS
0000FDCC <PE_Tools.include.bb2@473>     Function Return zlong(2)
0000FDE0 <PE_Tools.include.bb2@474>   Case #DATUM_MONTHS
0000FDF6 <PE_Tools.include.bb2@475>     Function Return zlong(1)
0000FE0A <PE_Tools.include.bb2@476>   Case #DATUM_YEARS
0000FE20 <PE_Tools.include.bb2@477>     Function Return zlong(0)
0000FE26 <PE_Tools.include.bb2@478>   Default
0000FE3A <PE_Tools.include.bb2@479>     datum.l = zlong(0)
0000FE4A <PE_Tools.include.bb2@480>     datum = datum * 10000
0000FE7E <PE_Tools.include.bb2@481>     datum = datum + zlong(1) * 100 + zlong(2)
0000FE88 <PE_Tools.include.bb2@482>     Function Return datum
0000FE8A <PE_Tools.include.bb2@483>   End Select
0000FEA4 <PE_Tools.include.bb2@484> End Function
0000FEC6 <PE_Tools.include.bb2@669> Function.l GetBestPenRGB{r.l,g.l,b.l}
0000FEE0 <PE_Tools.include.bb2@670>   If r < 0 Then r=0
0000FEFA <PE_Tools.include.bb2@671>   If r > 255 Then r=255
0000FF14 <PE_Tools.include.bb2@672>   If g < 0 Then g=0
0000FF2E <PE_Tools.include.bb2@673>   If g > 255 Then g=255
0000FF48 <PE_Tools.include.bb2@674>   If b < 0 Then b=0
0000FF62 <PE_Tools.include.bb2@675>   If b > 255 Then b=255
0000FF72 <PE_Tools.include.bb2@677>   r = r LSL 24 ;

0000FF82 <PE_Tools.include.bb2@678>   g = g LSL 24 ; adjust to "32-bit left justified long value"
0000FF92 <PE_Tools.include.bb2@679>   b = b LSL 24 ;

0000FFA0 <PE_Tools.include.bb2@680>   *scrn.Screen = ActiveScreen ;Peek.l(Addr Screen (Used Screen))
0000FFAE <PE_Tools.include.bb2@681>   *view.ViewPort = *scrn\ViewPort
0000FFBC <PE_Tools.include.bb2@682>   *cmap.ColorMap = *view\ColorMap
0001000C <PE_Tools.include.bb2@683>   pen.l = ObtainBestPenA_(*cmap,r,g,b,Tags(#OBP_Precision,#PRECISION_GUI))
00010016 <PE_Tools.include.bb2@686>   Function Return pen
0001001C <PE_Tools.include.bb2@687> End Function
00010036 <PE_Tools.include.bb2@690> Function.l GetBestPen{_rgb.l}
00010046 <PE_Tools.include.bb2@691>   r.l = _rgb LSR 16
0001005E <PE_Tools.include.bb2@692>   g.l = (_rgb LSL 16) LSR 24
00010076 <PE_Tools.include.bb2@693>   b.l = (_rgb LSL 24) LSR 24
0001008E <PE_Tools.include.bb2@695>   Function Return GetBestPenRGB{r,g,b}
00010094 <PE_Tools.include.bb2@696> End Function
00010094 <wizard_Tools.include.bb2@23> Syntax 0
000100BC <wizard_Tools.include.bb2@47> Dim List parent.parentstruct(0)
000100E6 <wizard_Tools.include.bb2@106> Function.b WZ_CheckOpen{w$}
0001015E <wizard_Tools.include.bb2@108>   If Peek.l(Addr Window(WZID(w$))) = 0 Then Function Return False Else Function Return True
00010178 <wizard_Tools.include.bb2@110> End Function
000101A6 <wizard_Tools.include.bb2@114> Statement WZ_SetFont{winid$,@Style.b}
000101F8 <wizard_Tools.include.bb2@115>  *win.Window = Peek.l(Addr Window( WZID(winid$) ) )
0001020A <wizard_Tools.include.bb2@116>  If (*win <> 0)
00010250 <wizard_Tools.include.bb2@117>    Use Window WZID(winid$)
0001025E <wizard_Tools.include.bb2@118>    *han.WizardWindowHandle = WZHandlenocheck
00010270 <wizard_Tools.include.bb2@119>    If (*han <> 0)
000102A6 <wizard_Tools.include.bb2@121>      foname$ = Peek.s(*han\DrawInfo\dri_Font\tf_Message\mn_Node\ln_Name)
000102B4 <wizard_Tools.include.bb2@122>      fosize.w = WZYFontsize
000102BA <wizard_Tools.include.bb2@125>    Else
000102D2 <wizard_Tools.include.bb2@126>     *scr.Screen = Peek.l(Addr Screen(0))
00010300 <wizard_Tools.include.bb2@127>     foname$ = Peek.s(*scr\Font\ta_Name)
00010312 <wizard_Tools.include.bb2@128>     fosize.w = *scr\Font\ta_YSize
00010360 <wizard_Tools.include.bb2@131>    If Exists("fonts:"+ fonname$)
000103AE <wizard_Tools.include.bb2@132>      LoadFont 0,foname$,fosize
000103C8 <wizard_Tools.include.bb2@133>      If Style=-1 Then Style = 0
000103EC <wizard_Tools.include.bb2@134>      WindowFont 0,Style
00010404 <wizard_Tools.include.bb2@137> End Statement
0001042A <wizard_Tools.include.bb2@251> Function.l WZ_PopUp{x.w,y.w,@w.w,@h.w}
0001043A <wizard_Tools.include.bb2@252>  entries.w = WZListItems(popupliste)
00010442 <wizard_Tools.include.bb2@253>  width.l = 0
00010450 <wizard_Tools.include.bb2@254>  If entries > 0
0001047A <wizard_Tools.include.bb2@255>    For i.l = 1 To entries
000104B4 <wizard_Tools.include.bb2@256>      entry$ = WZListString(popupliste,i-1,-1)
0001051A <wizard_Tools.include.bb2@257>      width.l = Max(width,(WZXFontsize+2) * Len(entry$))
0001052A <wizard_Tools.include.bb2@258>    Next i
00010550 <wizard_Tools.include.bb2@259>    height.l = (WZYFontsize+2) * entries + 2
00010570 <wizard_Tools.include.bb2@261>    If w = -1 Then w = width + 2
0001059A <wizard_Tools.include.bb2@262>    If (h = -1) OR (h > height)
000105A2 <wizard_Tools.include.bb2@263>      h = height
000105B6 <wizard_Tools.include.bb2@265>    If h<32 Then h= 32
000105F2 <wizard_Tools.include.bb2@266>    If x + w > screen_GetWidth{} Then x = screen_GetWidth{} - w
0001062E <wizard_Tools.include.bb2@267>    If y + h > screen_GetHeight{} Then y = screen_GetHeight{} - h
00010642 <wizard_Tools.include.bb2@268>    If x < 0 Then x = 0
00010656 <wizard_Tools.include.bb2@269>    If y < 0 Then y = 0
00010668 <wizard_Tools.include.bb2@270>    If height > h
0001066E <wizard_Tools.include.bb2@271>      _page.b = 0
00010674 <wizard_Tools.include.bb2@272>    Else
0001067A <wizard_Tools.include.bb2@273>      _page = 1
00010694 <wizard_Tools.include.bb2@276>    win_use.l = Used Window
00010738 <wizard_Tools.include.bb2@278>    WZWindow WZID("WIN_POPUP"),?wzgui,64,x,y,w,h,WZID("WIN_POPUP")
00010772 <wizard_Tools.include.bb2@279>    WZPrint "POPUP_PAGE",_page
000107E4 <wizard_Tools.include.bb2@280>    WZPrint "POPUPMENU"+Str$(_page),-1,&popupliste
000107FE <wizard_Tools.include.bb2@281>    exit.l = 0 : selected.l = -1 : FlushEvents
00010808 <wizard_Tools.include.bb2@283>      popev.l = WaitEvent
00010850 <wizard_Tools.include.bb2@284>      If EventWindow = WZID("WIN_POPUP")
00010856 <wizard_Tools.include.bb2@285>        Select popev
00010864 <wizard_Tools.include.bb2@286>        Case #IDCMP_IDCMPUPDATE
000108BE <wizard_Tools.include.bb2@287>          If WZGadName = "POPUPMENU" + Str$(_page)
000108CE <wizard_Tools.include.bb2@288>            selected = WZInput + 1
000108D4 <wizard_Tools.include.bb2@289>            exit = True
000108E8 <wizard_Tools.include.bb2@291>        Case #IDCMP_MOUSEBUTTONS
000108F2 <wizard_Tools.include.bb2@292>          mb.b = MButtons
00010918 <wizard_Tools.include.bb2@293>          If (mb = 1) OR (mb=2)
0001091E <wizard_Tools.include.bb2@294>            FlushEvents
00010924 <wizard_Tools.include.bb2@295>            exit = True
00010926 <wizard_Tools.include.bb2@297>        End Select
0001092C <wizard_Tools.include.bb2@298>      Else
00010932 <wizard_Tools.include.bb2@299>        exit = True
0001093C <wizard_Tools.include.bb2@301>    Until exit
00010974 <wizard_Tools.include.bb2@302>    WZCloseWindow WZID("WIN_POPUP")
0001099E <wizard_Tools.include.bb2@303>    If win_use<>-1 Then Use Window win_use
000109AA <wizard_Tools.include.bb2@305>    popupdata\selected_entry = selected
000109B4 <wizard_Tools.include.bb2@306>    Function Return selected
000109C8 <wizard_Tools.include.bb2@308> End Function
000109C8 <wizard_Table.include.bb2@84> XINCLUDE "screen.include.bb2"
000109F0 <wizard_Table.include.bb2@158> Dim List wzrow.wzrow(0)
00010A18 <wizard_Table.include.bb2@159> Dim List wzimage.wzimage(0)
00010A5A <wizard_Table.include.bb2@335> Statement WZ_DrawImage{gadgetid$,image_name$,wx.l,wy.l}
00010A74 <wizard_Table.include.bb2@359> End Statement
00010A9E <wizard_Table.include.bb2@361> Statement WZ_KillImages{gadgetid$}
00010AB6 <wizard_Table.include.bb2@370> End Statement
00010AE0 <wizard_Table.include.bb2@390> Function.l WZ_ImageHeight{image_name$}
00010AFA <wizard_Table.include.bb2@398> End Function
00010B24 <wizard_Table.include.bb2@400> Function.l WZ_ImageWidth{image_name$}
00010B3E <wizard_Table.include.bb2@408> End Function
00010B68 <wizard_Table.include.bb2@442> Statement RestoreTable{gadgetid$}
00010B90 <wizard_Table.include.bb2@444>   dir$ = "RAM:T/"
00010BDC <wizard_Table.include.bb2@445>   ClearType wztabledata
00010BE6 <wizard_Table.include.bb2@446>   ClearList wzrow()
00010C52 <wizard_Table.include.bb2@448>   If Exists(dir$+gadgetid$+".data")
00010CCC <wizard_Table.include.bb2@449>     If OpenFile(10,dir$ + gadgetid$ + ".data")
00010D2A <wizard_Table.include.bb2@450>       ReadType 10,wztabledata
00010D42 <wizard_Table.include.bb2@451>       CloseFile 10
00010DBC <wizard_Table.include.bb2@453>     If OpenFile(10,dir$ + gadgetid$ + ".content")
00010DD8 <wizard_Table.include.bb2@454>       lf.l = Lof(10)
00010DFC <wizard_Table.include.bb2@455>       While Loc(10)<>lf
00010E0E <wizard_Table.include.bb2@456>         If AddLast(wzrow())
00010E6A <wizard_Table.include.bb2@457>           ReadType 10,wzrow()
00010E70 <wizard_Table.include.bb2@459>       Wend
00010E88 <wizard_Table.include.bb2@460>       CloseFile 10
00010EA0 <wizard_Table.include.bb2@464> End Statement
00010ECA <wizard_Table.include.bb2@467> Statement SaveTable{gadgetid$}
00010EF2 <wizard_Table.include.bb2@469>   dir$ = "RAM:T/"
00010F54 <wizard_Table.include.bb2@470>   DeleteFile_ dir$ + gadgetid$ + ".data"
00010FB6 <wizard_Table.include.bb2@471>   DeleteFile_ dir$ + gadgetid$ + ".content"
00011030 <wizard_Table.include.bb2@473>   If OpenFile(10,dir$ + gadgetid$ + ".data")
0001103A <wizard_Table.include.bb2@474>     wztabledata\changed = False
00011098 <wizard_Table.include.bb2@475>     WriteType 10,wztabledata
000110B0 <wizard_Table.include.bb2@476>     CloseFile 10
0001112A <wizard_Table.include.bb2@478>   If OpenFile(10,dir$ + gadgetid$ + ".content")
00011134 <wizard_Table.include.bb2@479>     ResetList wzrow()
00011146 <wizard_Table.include.bb2@480>     While NextItemFast(wzrow())
000111A2 <wizard_Table.include.bb2@481>       WriteType 10,wzrow()
000111A8 <wizard_Table.include.bb2@482>     Wend
000111C0 <wizard_Table.include.bb2@483>     CloseFile 10
000111C6 <wizard_Table.include.bb2@487>   DefaultOutput
00011212 <wizard_Table.include.bb2@488>   ClearType wztabledata
0001121C <wizard_Table.include.bb2@489>   ClearList wzrow()
00011234 <wizard_Table.include.bb2@490> End Statement
0001125E <wizard_Table.include.bb2@494> Statement SetActualTable{gadgetid$}
000112A6 <wizard_Table.include.bb2@497>   If (gadgetid$<>wztabledata\id)
000112E2 <wizard_Table.include.bb2@498>     If (wztabledata\id<>"")
00011302 <wizard_Table.include.bb2@499>       If (wztabledata\edit_ = True)
00011336 <wizard_Table.include.bb2@500>         *g.Gadget = WZGadAddr(gadgetid$ )
00011348 <wizard_Table.include.bb2@501>         If *g<>0
00011358 <wizard_Table.include.bb2@502>           id.l = *g\GadgetID
0001138A <wizard_Table.include.bb2@503>           If GTGadPtr(wztabledata\GTListID,0) <> 0
000113AE <wizard_Table.include.bb2@504>             zeile.l  =  wztabledata\aktuelle_zeile + (wztabledata\erste_zeile-1)
000113BE <wizard_Table.include.bb2@505>             spalte.l =  wztabledata\aktuelle_spalte
000113F8 <wizard_Table.include.bb2@506>             text$ = GTGetString(wztabledata\GTListID,0)
00011402 <wizard_Table.include.bb2@512>             ResetList wzrow()
00011414 <wizard_Table.include.bb2@513>             While NextItemFast(wzrow())
00011434 <wizard_Table.include.bb2@514>               If Index(wzrow())-1 = zeile
0001148A <wizard_Table.include.bb2@515>                 If wzrow()\cell[spalte] <> text$
000114D0 <wizard_Table.include.bb2@516>                   wzrow()\cell[spalte] = text$
000114E2 <wizard_Table.include.bb2@517>                   wzrow()\changed = True
000114EC <wizard_Table.include.bb2@518>                   wztabledata\changed = True
000114F2 <wizard_Table.include.bb2@521>             Wend
000114FC <wizard_Table.include.bb2@522>             wztabledata\edit_ = False
0001151A <wizard_Table.include.bb2@523>             DetachGTList wztabledata\GTListID
00011532 <wizard_Table.include.bb2@524>             Free GTList wztabledata\GTListID
00011538 <wizard_Table.include.bb2@526>         Else
000115C4 <wizard_Table.include.bb2@527>           dummy = RTEZRequest("","The designated table "+gadgetid$+" does not exist.","_Ok")
00011616 <wizard_Table.include.bb2@530>       If (wztabledata\changed = True) Then SaveTable{wztabledata\id}
00011644 <wizard_Table.include.bb2@532>     RestoreTable{gadgetid$}
00011662 <wizard_Table.include.bb2@534>   Use Window wztabledata\window_
0001167A <wizard_Table.include.bb2@535> End Statement
0001173C <wizard_Table.include.bb2@549> Statement WZ_AddRow{gadgetid$,@n1$,@n2$,@n3$,@n4$,@n5$,@n6$,@n7$,@n8$,@n9$}
0001176A <wizard_Table.include.bb2@552>   SetActualTable{gadgetid$}
0001177C <wizard_Table.include.bb2@554>   Select wztabledata\order
0001179A <wizard_Table.include.bb2@555>   Case 0 : dummy.l = AddLast(wzrow())
000117BE <wizard_Table.include.bb2@556>   Case 1 : dummy = AddFirst(wzrow())
000117C0 <wizard_Table.include.bb2@557>   End Select
000117D4 <wizard_Table.include.bb2@559>   If dummy = True
00011820 <wizard_Table.include.bb2@560>     wzrow()\cell[1] = n1$
0001186C <wizard_Table.include.bb2@561>     wzrow()\cell[2] = n2$
000118B8 <wizard_Table.include.bb2@562>     wzrow()\cell[3] = n3$
00011904 <wizard_Table.include.bb2@563>     wzrow()\cell[4] = n4$
00011950 <wizard_Table.include.bb2@564>     wzrow()\cell[5] = n5$
0001199C <wizard_Table.include.bb2@565>     wzrow()\cell[6] = n6$
000119E8 <wizard_Table.include.bb2@566>     wzrow()\cell[7] = n7$
00011A34 <wizard_Table.include.bb2@567>     wzrow()\cell[8] = n8$
00011A80 <wizard_Table.include.bb2@568>     wzrow()\cell[9] = n9$
00011AAA <wizard_Table.include.bb2@570>     For i.l = 1 To #MAX_SPALTEN - 1
00011ACC <wizard_Table.include.bb2@571>       wzrow()\FrontPen[i] = wztabledata\FrontPen
00011AEE <wizard_Table.include.bb2@572>       wzrow()\BackPen[i] = wztabledata\BackPen
00011AFE <wizard_Table.include.bb2@573>     Next i
00011B16 <wizard_Table.include.bb2@574>     wztabledata\maxzeilen + 1
00011B20 <wizard_Table.include.bb2@575>     wztabledata\changed = True
00011B3A <wizard_Table.include.bb2@578> End Statement
00011B7C <wizard_Table.include.bb2@620> Statement WZ_InitTable{winid$,gadgetid$,spalten.w,@order.w}
00011BD2 <wizard_Table.include.bb2@629>   DeleteFile_ "ram:t/" + gadgetid$ + ".data"
00011C28 <wizard_Table.include.bb2@630>   DeleteFile_ "ram:t/" + gadgetid$ + ".content"
00011C56 <wizard_Table.include.bb2@631>   SetActualTable{gadgetid$}
00011C92 <wizard_Table.include.bb2@633>   wztabledata\window_ = WZID(winid$)
00011CCE <wizard_Table.include.bb2@634>   wztabledata\GTListID= WZID(winid$)
00011D06 <wizard_Table.include.bb2@635>   wztabledata\id = gadgetid$
00011D10 <wizard_Table.include.bb2@636>   wztabledata\readonly = False
00011D1A <wizard_Table.include.bb2@637>   wztabledata\sortable = True
00011D24 <wizard_Table.include.bb2@638>   wztabledata\hlines = False
00011D2E <wizard_Table.include.bb2@639>   wztabledata\vlines = True
00011D3C <wizard_Table.include.bb2@641>   wztabledata\spalten = spalten
00011D48 <wizard_Table.include.bb2@643>   wztabledata\erste_zeile = 1
00011D54 <wizard_Table.include.bb2@644>   wztabledata\aktuelle_zeile=  0
00011D62 <wizard_Table.include.bb2@646>   wztabledata\FrontPen = 1;#WZRD_TEXTPEN
00011D70 <wizard_Table.include.bb2@647>   wztabledata\BackPen =  0;#WZRD_BACKGROUNDPEN
00011D7E <wizard_Table.include.bb2@648>   wztabledata\TitlePen = 2;#WZRD_BARDETAILPEN
00011D8C <wizard_Table.include.bb2@649>   wztabledata\TitleBack = 3;#WZRD_BARBLOCKPEN
00011D9A <wizard_Table.include.bb2@650>   wztabledata\Highlight = 3;#WZRD_FILLPEN
00011DB2 <wizard_Table.include.bb2@652>   If order = -1 Then order = 0
00011DBE <wizard_Table.include.bb2@653>   wztabledata\order = order
00011DC8 <wizard_Table.include.bb2@655>   wztabledata\changed = True
00011DF6 <wizard_Table.include.bb2@656>   For i.w = 1 To spalten.w
00011E14 <wizard_Table.include.bb2@657>     wztabledata\priority[i] = 1
00011E2E <wizard_Table.include.bb2@658>     wztabledata\editable_[i] = False
00011E68 <wizard_Table.include.bb2@659>     wztabledata\title[i] = ""
00011E86 <wizard_Table.include.bb2@660>     wztabledata\entrytype[i] = #WNE_TEXT
00011E94 <wizard_Table.include.bb2@661>   Next i
00011EAE <wizard_Table.include.bb2@662> End Statement
00011ED8 <wizard_Table.include.bb2@664> Statement WZ_KillTable{gadgetid$}
00011F06 <wizard_Table.include.bb2@667>   SetActualTable{gadgetid$}
00011F5C <wizard_Table.include.bb2@668>   DeleteFile_ "ram:t/" + gadgetid$ + ".data"
00011FB2 <wizard_Table.include.bb2@669>   DeleteFile_ "ram:t/" + gadgetid$ + ".content"
00011FE0 <wizard_Table.include.bb2@670>   WZ_KillImages{gadgetid$}
0001202C <wizard_Table.include.bb2@671>   ClearType wztabledata
00012036 <wizard_Table.include.bb2@672>   ClearList wzrow()
0001204E <wizard_Table.include.bb2@673> End Statement
0001208C <wizard_Table.include.bb2@682> Statement WZ_SetTableColors{gadgetid$,fp.l,bp.l,@tp.w,@tb.w,@hl.w}
000120BA <wizard_Table.include.bb2@684>   SetActualTable{gadgetid$}
000120C6 <wizard_Table.include.bb2@685>   wztabledata\FrontPen = fp
000120D2 <wizard_Table.include.bb2@686>   wztabledata\BackPen = bp
000120F2 <wizard_Table.include.bb2@687>   If tp<>-1 Then  wztabledata\TitlePen = tp
00012112 <wizard_Table.include.bb2@688>   If tb<>-1 Then  wztabledata\TitleBack = tb
00012132 <wizard_Table.include.bb2@689>   If hl<>-1 Then  wztabledata\Highlight = hl
0001213C <wizard_Table.include.bb2@690>   wztabledata\changed = True
00012154 <wizard_Table.include.bb2@691> End Statement
00012216 <wizard_Table.include.bb2@725> Statement WZ_SetTableTitle{gadgetid$,@n1$,@n2$,@n3$,@n4$,@n5$,@n6$,@n7$,@n8$,@n9$}
00012244 <wizard_Table.include.bb2@728>   SetActualTable{gadgetid$}
0001228A <wizard_Table.include.bb2@729>   wztabledata\title[1] = n1$
000122D0 <wizard_Table.include.bb2@730>   wztabledata\title[2] = n2$
00012316 <wizard_Table.include.bb2@731>   wztabledata\title[3] = n3$
0001235C <wizard_Table.include.bb2@732>   wztabledata\title[4] = n4$
000123A2 <wizard_Table.include.bb2@733>   wztabledata\title[5] = n5$
000123E8 <wizard_Table.include.bb2@734>   wztabledata\title[6] = n6$
0001242E <wizard_Table.include.bb2@735>   wztabledata\title[7] = n7$
00012474 <wizard_Table.include.bb2@736>   wztabledata\title[8] = n8$
0001248E <wizard_Table.include.bb2@737> End Statement
000124BC <wizard_Table.include.bb2@746> Statement WZ_SetSortable{gadgetid$,mode.b}
000124EA <wizard_Table.include.bb2@748>   SetActualTable{gadgetid$}
000124F8 <wizard_Table.include.bb2@749>   wztabledata\sortable = mode
00012510 <wizard_Table.include.bb2@750> End Statement
0001256E <wizard_Table.include.bb2@752> Statement WZ_SetPriority{gadgetid$,@n1.w,@n2.w,@n3.w,@n4.w,@n5.w,@n6.w,@n7.w,@n8.w,@n9.w}
0001259C <wizard_Table.include.bb2@755>   SetActualTable{gadgetid$}
000125CC <wizard_Table.include.bb2@757>   If n1<>-1 Then  wztabledata\priority[1] = n1
000125FC <wizard_Table.include.bb2@758>   If n2<>-1 Then  wztabledata\priority[2] = n2
0001262C <wizard_Table.include.bb2@759>   If n3<>-1 Then  wztabledata\priority[3] = n3
0001265C <wizard_Table.include.bb2@760>   If n4<>-1 Then  wztabledata\priority[4] = n4
0001268C <wizard_Table.include.bb2@761>   If n5<>-1 Then  wztabledata\priority[5] = n5
000126BC <wizard_Table.include.bb2@762>   If n6<>-1 Then  wztabledata\priority[6] = n6
000126EC <wizard_Table.include.bb2@763>   If n7<>-1 Then  wztabledata\priority[7] = n7
0001271C <wizard_Table.include.bb2@764>   If n8<>-1 Then  wztabledata\priority[8] = n8
0001274C <wizard_Table.include.bb2@765>   If n9<>-1 Then  wztabledata\priority[9] = n9
00012764 <wizard_Table.include.bb2@767> End Statement
000127C2 <wizard_Table.include.bb2@769> Statement WZ_SetEditable{gadgetid$,@n1.w,@n2.w,@n3.w,@n4.w,@n5.w,@n6.w,@n7.w,@n8.w,@n9.w}
000127F0 <wizard_Table.include.bb2@771>   SetActualTable{gadgetid$}
0001280E <wizard_Table.include.bb2@773>   wztabledata\editable_[1] = n1
0001282C <wizard_Table.include.bb2@774>   wztabledata\editable_[2] = n2
0001284A <wizard_Table.include.bb2@775>   wztabledata\editable_[3] = n3
00012868 <wizard_Table.include.bb2@776>   wztabledata\editable_[4] = n4
00012886 <wizard_Table.include.bb2@777>   wztabledata\editable_[5] = n5
000128A4 <wizard_Table.include.bb2@778>   wztabledata\editable_[6] = n6
000128C2 <wizard_Table.include.bb2@779>   wztabledata\editable_[7] = n7
000128E0 <wizard_Table.include.bb2@780>   wztabledata\editable_[8] = n8
000128FE <wizard_Table.include.bb2@781>   wztabledata\editable_[9] = n9
00012916 <wizard_Table.include.bb2@783> End Statement
00012948 <wizard_Table.include.bb2@793> Function.s WZ_GetCell{gadgetid$,zeile.l,spalte.l}
00012972 <wizard_Table.include.bb2@796>   If (zeile>0) AND (spalte>0)
000129A0 <wizard_Table.include.bb2@797>     SetActualTable{gadgetid$}
000129AA <wizard_Table.include.bb2@798>     ResetList wzrow()
000129BC <wizard_Table.include.bb2@799>     While NextItemFast(wzrow())
000129DC <wizard_Table.include.bb2@800>       If Index(wzrow())-1 = zeile
00012A22 <wizard_Table.include.bb2@801>         r$ = wzrow()\cell[spalte]
00012A4C <wizard_Table.include.bb2@802>         Function Return r$
00012A52 <wizard_Table.include.bb2@804>     Wend
00012A70 <wizard_Table.include.bb2@806> End Function
00012AB2 <wizard_Table.include.bb2@809> Function.b WZ_SetCell{gadgetid$,zeile.l,spalte.l,wert$}
00012AE0 <wizard_Table.include.bb2@812>   SetActualTable{gadgetid$}
00012AEA <wizard_Table.include.bb2@813>   ResetList wzrow()
00012AFC <wizard_Table.include.bb2@814>   While NextItemFast(wzrow())
00012B1C <wizard_Table.include.bb2@815>     If Index(wzrow())-1 = zeile
00012B72 <wizard_Table.include.bb2@816>       If wzrow()\cell[spalte] <> wert$
00012BB8 <wizard_Table.include.bb2@817>         wzrow()\cell[spalte] = wert$
00012BCA <wizard_Table.include.bb2@818>         wzrow()\changed = True
00012BD4 <wizard_Table.include.bb2@819>         wztabledata\changed = True
00012BDC <wizard_Table.include.bb2@820>         Function Return True
00012BE2 <wizard_Table.include.bb2@823>   Wend
00012BFE <wizard_Table.include.bb2@824> End Function
00012C28 <wizard_Table.include.bb2@828> Statement WZ_EditExit{gadgetid$}
00012C56 <wizard_Table.include.bb2@831>   SetActualTable{gadgetid$}
00012C76 <wizard_Table.include.bb2@832>   If wztabledata\edit_ = True
00012CAA <wizard_Table.include.bb2@833>     *g.Gadget = WZGadAddr(gadgetid$)
00012CB8 <wizard_Table.include.bb2@834>     *w.Window = WZWindowAddr
00012CCA <wizard_Table.include.bb2@835>     If *g<>0
00012CDA <wizard_Table.include.bb2@836>       id.l = *g\GadgetID
00012CE8 <wizard_Table.include.bb2@837>       zeile.w  =  wztabledata\aktuelle_zeile
00012CF6 <wizard_Table.include.bb2@838>       spalte.w =  wztabledata\aktuelle_spalte
00012D30 <wizard_Table.include.bb2@839>       text$ = GTGetString(wztabledata\GTListID,0)
00012D98 <wizard_Table.include.bb2@845>       z.b = WZ_SetCell{gadgetid$,zeile,spalte,text$}
00012DA2 <wizard_Table.include.bb2@846>       wztabledata\edit_ = False
00012DC0 <wizard_Table.include.bb2@847>       DetachGTList wztabledata\GTListID
00012DD8 <wizard_Table.include.bb2@848>       Free GTList wztabledata\GTListID
00012DF0 <wizard_Table.include.bb2@851> End Statement
00012E1E <wizard_Table.include.bb2@854> Statement WZ_SetActiveRow{gadgetid$,zeile.l}
00012E4C <wizard_Table.include.bb2@856>   SetActualTable{gadgetid$}
00012E58 <wizard_Table.include.bb2@866>   wztabledata\aktuelle_zeile = zeile
00012E70 <wizard_Table.include.bb2@867> End Statement
00012E9E <wizard_Table.include.bb2@869> Statement WZ_SetActiveColumn{gadgetid$,spalte.l}
00012ECC <wizard_Table.include.bb2@871>   SetActualTable{gadgetid$}
00012ED8 <wizard_Table.include.bb2@873>   wztabledata\aktuelle_spalte = spalte
00012EF0 <wizard_Table.include.bb2@874> End Statement
00012F22 <wizard_Table.include.bb2@926> Function.w WZ_MouseRow{gadgetid$,mx.w,my.w}
00012F50 <wizard_Table.include.bb2@929>   SetActualTable{gadgetid$}
00012F84 <wizard_Table.include.bb2@930>   *gad.Gadget = WZGadAddr(gadgetid$)
00012F96 <wizard_Table.include.bb2@931>   If *gad<>0
00012FA0 <wizard_Table.include.bb2@932>     wx.w = wztabledata\LeftEdge
00012FAE <wizard_Table.include.bb2@933>     wy.w = wztabledata\TopEdge
00012FBC <wizard_Table.include.bb2@934>     ww.w = wztabledata\Width
00012FCA <wizard_Table.include.bb2@935>     wh.w = wztabledata\Height
00013020 <wizard_Table.include.bb2@936>     If (mx > wx) AND (mx<(wx + ww)) AND (my>wy) AND (my<(wy+wh))
0001302E <wizard_Table.include.bb2@937>       gh.w = wztabledata\columnheight
0001305E <wizard_Table.include.bb2@938>       If my < (wy + WZYFontsize)
00013064 <wizard_Table.include.bb2@939>         row.w = 0
0001306A <wizard_Table.include.bb2@940>       Else
000130E0 <wizard_Table.include.bb2@941>         row.w = (wztabledata\erste_zeile-1) + Int( (my - (wy+WZYFontsize))) / gh + 1
000130EA <wizard_Table.include.bb2@943>       Function Return row
000130F0 <wizard_Table.include.bb2@944>     Else
000130FA <wizard_Table.include.bb2@945>       Function Return 0
00013100 <wizard_Table.include.bb2@947>   Else
0001310A <wizard_Table.include.bb2@948>     Function Return 0
00013124 <wizard_Table.include.bb2@950> End Function
00013156 <wizard_Table.include.bb2@952> Function.w WZ_MouseColumn{gadgetid$,mx.w,my.w}
00013184 <wizard_Table.include.bb2@955>   SetActualTable{gadgetid$}
000131B8 <wizard_Table.include.bb2@956>   *gad.Gadget = WZGadAddr(gadgetid$)
000131CA <wizard_Table.include.bb2@957>   If *gad<>0
000131D4 <wizard_Table.include.bb2@958>     wx.l = wztabledata\LeftEdge
000131E2 <wizard_Table.include.bb2@959>     wy.l = wztabledata\TopEdge
000131F0 <wizard_Table.include.bb2@960>     ww.l = wztabledata\Width
000131FE <wizard_Table.include.bb2@961>     wh.l = wztabledata\Height
00013204 <wizard_Table.include.bb2@962>     x.l = wx
0001325E <wizard_Table.include.bb2@963>     If (mx > wx) AND (mx<(wx+ww)) AND (my>wy) AND (my<(wy+wh))
00013292 <wizard_Table.include.bb2@964>       For j.w = 1 To wztabledata\spalten
000132B6 <wizard_Table.include.bb2@965>         x + wztabledata\breite[j]
000132D2 <wizard_Table.include.bb2@966>         If (mx < x) Then Function Return j
000132E0 <wizard_Table.include.bb2@967>       Next j
000132E6 <wizard_Table.include.bb2@968>     Else
000132F0 <wizard_Table.include.bb2@969>       Function Return 0
000132F6 <wizard_Table.include.bb2@971>   Else
00013300 <wizard_Table.include.bb2@972>     Function Return 0
0001331A <wizard_Table.include.bb2@974> End Function
00013344 <wizard_Table.include.bb2@993> Statement WZ_DrawTable{gadgetid$}
00013372 <wizard_Table.include.bb2@996>   SetActualTable{gadgetid$}
00013384 <wizard_Table.include.bb2@998>   If FirstItem(wzimage())
000133CE <wizard_Table.include.bb2@1000>       If wzimage()\table = gadgetid$
0001340E <wizard_Table.include.bb2@1001>         If wztabledata\columnheight < wzimage()\Height Then wztabledata\columnheight = wzimage()\Height + 2
00013422 <wizard_Table.include.bb2@1003>     Until NOT NextItemFast(wzimage())
00013440 <wizard_Table.include.bb2@1005>   If wztabledata\scale_images = Off
0001348E <wizard_Table.include.bb2@1006>     If wztabledata\columnheight < WZYFontsize + 2 Then wztabledata\columnheight = WZYFontsize + 2
00013494 <wizard_Table.include.bb2@1007>   Else
000134AE <wizard_Table.include.bb2@1008>     wztabledata\columnheight = WZYFontsize + 2
000134CC <wizard_Table.include.bb2@1011>   Use Window wztabledata\window_
00013500 <wizard_Table.include.bb2@1012>   *g.Gadget = WZGadAddr(gadgetid$)
00013512 <wizard_Table.include.bb2@1013>   If *g<>0
0001352A <wizard_Table.include.bb2@1014>     wztabledata\LeftEdge = *g\LeftEdge + 1
00013544 <wizard_Table.include.bb2@1015>     wztabledata\TopEdge  = *g\TopEdge + 1
0001355E <wizard_Table.include.bb2@1016>     wztabledata\Width    = *g\Width  - 3
00013578 <wizard_Table.include.bb2@1017>     wztabledata\Height   = *g\Height - 1
0001358C <wizard_Table.include.bb2@1018>     wztabledata\GadgetID = *g\GadgetID
000135B2 <wizard_Table.include.bb2@1019>     *tablewin.Window = WZWindowAddr : DrPort *tablewin\RPort
000135C2 <wizard_Table.include.bb2@1020>     zeilenhoehe.l = WZYFontsize
000135D4 <wizard_Table.include.bb2@1021>     If zeilenhoehe > 72
000135E8 <wizard_Table.include.bb2@1022>       zeilenhoehe = *tablewin\IFont\tf_YSize
00013616 <wizard_Table.include.bb2@1023>       error{"There was a problem with WZYFontSize.\\nThis problem is related to AFA_OS.\\nApplication may fail."}
00013644 <wizard_Table.include.bb2@1026>     WZ_EditExit{gadgetid$} ; sichern evtl. gemachter Eingaben im Gadget
0001365C <wizard_Table.include.bb2@1028>     If wztabledata\columnheight <> 0
00013682 <wizard_Table.include.bb2@1029>       wztabledata\zeilen = (wztabledata\Height - zeilenhoehe) / (wztabledata\columnheight)
00013688 <wizard_Table.include.bb2@1030>     Else
000136B6 <wizard_Table.include.bb2@1031>       error{"There has been an error while processing WZ_DrawTable(). columnheight is 0."}
000136BC <wizard_Table.include.bb2@1032>       Statement Return
000136C4 <wizard_Table.include.bb2@1037>     gesamtp.l = 0
000136F8 <wizard_Table.include.bb2@1038>     For p.w = 1 To wztabledata\spalten
00013740 <wizard_Table.include.bb2@1039>       If wztabledata\entrytype[p] = #WNE_TEXT Then gesamtp + wztabledata\priority[p]
0001374E <wizard_Table.include.bb2@1040>     Next p
00013782 <wizard_Table.include.bb2@1042>     For p = 1 To wztabledata\spalten
000137A8 <wizard_Table.include.bb2@1043>       If wztabledata\entrytype[p] = #WNE_IMAGE
000137BA <wizard_Table.include.bb2@1044>         If FirstItem( wzimage())
000137C2 <wizard_Table.include.bb2@1045>           image_width.l = 0
000137F2 <wizard_Table.include.bb2@1047>             If image_width < wzimage()\Width Then image_width = wzimage()\Width
00013806 <wizard_Table.include.bb2@1048>           Until NOT NextItemFast(wzimage())
00013814 <wizard_Table.include.bb2@1050>         image_width + 2
00013830 <wizard_Table.include.bb2@1051>         wztabledata\breite[p] = image_width
0001383E <wizard_Table.include.bb2@1054>     Next p
00013852 <wizard_Table.include.bb2@1056>     table_width.l = wztabledata\Width - image_width
00013864 <wizard_Table.include.bb2@1057>     If gesamtp>0
00013898 <wizard_Table.include.bb2@1058>       For p = 1 To wztabledata\spalten
000138BE <wizard_Table.include.bb2@1059>         If wztabledata\entrytype[p] = #WNE_TEXT
000138EC <wizard_Table.include.bb2@1060>           anteil.q = wztabledata\priority[p] / gesamtp
0001392A <wizard_Table.include.bb2@1061>           wztabledata\breite[p] = Int(anteil * table_width)
00013938 <wizard_Table.include.bb2@1063>       Next p
0001398A <wizard_Table.include.bb2@1066>     DrBoxf  wztabledata\LeftEdge,wztabledata\TopEdge     ,wztabledata\LeftEdge+wztabledata\Width,wztabledata\TopEdge+wztabledata\Height-2,wztabledata\BackPen
000139D0 <wizard_Table.include.bb2@1067>     DrBoxf  wztabledata\LeftEdge,wztabledata\TopEdge     ,wztabledata\LeftEdge+wztabledata\Width,wztabledata\TopEdge + zeilenhoehe,wztabledata\TitleBack
00013A28 <wizard_Table.include.bb2@1068>     DrLine wztabledata\LeftEdge,wztabledata\TopEdge+zeilenhoehe,wztabledata\LeftEdge+wztabledata\Width,wztabledata\TopEdge + zeilenhoehe,1
00013A32 <wizard_Table.include.bb2@1069>     GTGZZPosition On
00013A3C <wizard_Table.include.bb2@1070>     WJam 0
00013A42 <wizard_Table.include.bb2@1071>     sx.w = 0
00013A76 <wizard_Table.include.bb2@1073>     For x.w = 1 To wztabledata\spalten
00013A98 <wizard_Table.include.bb2@1074>       If wztabledata\breite[x]>0
00013ADE <wizard_Table.include.bb2@1075>         a$ = wztabledata\title[x]
00013AFA <wizard_Table.include.bb2@1076>         sbreite.w = wztabledata\breite[x]
00013B0A <wizard_Table.include.bb2@1079>         DrMode 0
00013B1E <wizard_Table.include.bb2@1080>         If wztabledata\sorted_by = x
00013B44 <wizard_Table.include.bb2@1081>           If wztabledata\align[x] = #ALIGN_LEFT
00013B4A <wizard_Table.include.bb2@1082>             lw.w = 8
00013B6A <wizard_Table.include.bb2@1083>             lx.w = wztabledata\LeftEdge + sx + sbreite - 8
00013B70 <wizard_Table.include.bb2@1084>           Else
00013B76 <wizard_Table.include.bb2@1085>             lw.w = 8
00013B8E <wizard_Table.include.bb2@1086>             lx.w = wztabledata\LeftEdge + sx + 4
00013BB4 <wizard_Table.include.bb2@1088>           ly.w = 1 + wztabledata\TopEdge + zeilenhoehe * zeile.w
00013BC2 <wizard_Table.include.bb2@1089>           lh.w = zeilenhoehe - 3
00013BF4 <wizard_Table.include.bb2@1090>           DrBoxf lx-1,ly, lx+lw,ly+lh,0
00013C60 <wizard_Table.include.bb2@1091>           DrLine lx-1,ly,  lx+(lw/2)-1,ly+lh, lx-1+lw,ly,  2
00013CBE <wizard_Table.include.bb2@1092>           DrLine lx  ,ly,  lx+(lw/2)  ,ly+lh, lx  +lw,ly, 1
00013DCE <wizard_Table.include.bb2@1096>         !WZ_CutCell {a$, sbreite}
00013E00 <wizard_Table.include.bb2@1097>         SetSoftStyle_ DrPort,2,AskSoftStyle_(DrPort)
00013E1A <wizard_Table.include.bb2@1098>         Select wztabledata\align[x]
00013E28 <wizard_Table.include.bb2@1099>         Case #ALIGN_LEFT
00013E94 <wizard_Table.include.bb2@1100>           DrText a$, wztabledata\LeftEdge + sx + 4, wztabledata\TopEdge + zeilenhoehe * zeile.w , wztabledata\TitlePen
00013EA4 <wizard_Table.include.bb2@1101>           sx + sbreite
00013EB8 <wizard_Table.include.bb2@1102>         Case #ALIGN_RIGHT
00013F08 <wizard_Table.include.bb2@1103>           sx + sbreite : tl.l = DrTextLen(a$) + 4
00013F74 <wizard_Table.include.bb2@1104>           DrText a$, wztabledata\LeftEdge + sx - tl , wztabledata\TopEdge + zeilenhoehe * zeile,wztabledata\TitlePen
00013F88 <wizard_Table.include.bb2@1105>         Case #ALIGN_CENTER
00013FDE <wizard_Table.include.bb2@1106>           tl.l = (sbreite - DrTextLen(a$)) / 2
0001404A <wizard_Table.include.bb2@1107>           DrText a$, wztabledata\LeftEdge + sx + tl , wztabledata\TopEdge + zeilenhoehe * zeile,wztabledata\TitlePen
0001405A <wizard_Table.include.bb2@1108>           sx + sbreite
0001405C <wizard_Table.include.bb2@1109>         End Select
00014074 <wizard_Table.include.bb2@1111>         If x<wztabledata\spalten
000140CA <wizard_Table.include.bb2@1112>           DrLine wztabledata\LeftEdge + sx    , wztabledata\TopEdge, wztabledata\LeftEdge + sx    , wztabledata\TopEdge+zeilenhoehe,1
0001412C <wizard_Table.include.bb2@1113>           DrLine wztabledata\LeftEdge + sx + 1, wztabledata\TopEdge, wztabledata\LeftEdge + sx + 1, wztabledata\TopEdge+zeilenhoehe,2
0001413A <wizard_Table.include.bb2@1116>     Next x
0001416C <wizard_Table.include.bb2@1117>     SetSoftStyle_ DrPort,0,AskSoftStyle_(DrPort)
00014176 <wizard_Table.include.bb2@1118>     WJam 1
000141B8 <wizard_Table.include.bb2@1119>     If wztabledata\vlines = False Then linesh.l = zeilenhoehe+ 1 Else linesh = wztabledata\Height
000141D4 <wizard_Table.include.bb2@1120>     sx = wztabledata\breite[1]
00014208 <wizard_Table.include.bb2@1121>     For x = 2 To wztabledata\spalten
0001422A <wizard_Table.include.bb2@1122>       If wztabledata\breite[x]>0
00014246 <wizard_Table.include.bb2@1123>         sbreite = wztabledata\breite[x]
0001428C <wizard_Table.include.bb2@1124>         !SetDrMd{*tablewin\RPort,%0101010101010101}                   ;+ zeilenhoehe
000142EE <wizard_Table.include.bb2@1125>         DrLine wztabledata\LeftEdge + sx    , wztabledata\TopEdge + zeilenhoehe, wztabledata\LeftEdge + sx    , wztabledata\TopEdge+linesh - 2,1
00014336 <wizard_Table.include.bb2@1126>         !SetDrMd{*tablewin\RPort,-1}
00014346 <wizard_Table.include.bb2@1127>         sx + sbreite
00014354 <wizard_Table.include.bb2@1129>     Next x
0001435E <wizard_Table.include.bb2@1131>     wztabledata\is_open = True
00014376 <wizard_Table.include.bb2@1133> End Statement
000143A4 <wizard_Table.include.bb2@1139> Statement WZ_HighlightRow{gadgetid$,zeile.w}
000143D8 <wizard_Table.include.bb2@1142>   *bgad.Gadget = WZGadAddr(gadgetid$)
000143EA <wizard_Table.include.bb2@1143>   If *bgad> 0
00014408 <wizard_Table.include.bb2@1144>     Use Window wztabledata\window_
00014412 <wizard_Table.include.bb2@1145>     wx.w = wztabledata\LeftEdge
00014420 <wizard_Table.include.bb2@1146>     wy.w = wztabledata\TopEdge
0001442E <wizard_Table.include.bb2@1147>     ww.w = wztabledata\Width
0001443C <wizard_Table.include.bb2@1148>     wh.w = wztabledata\Height
0001444A <wizard_Table.include.bb2@1149>     gh.w = wztabledata\columnheight
00014458 <wizard_Table.include.bb2@1151>     *tablewin.Window = WZWindowAddr
00014470 <wizard_Table.include.bb2@1152>     DrPort *tablewin\RPort
00014488 <wizard_Table.include.bb2@1154>     zeile = zeile - (wztabledata\erste_zeile-1)
000144DC <wizard_Table.include.bb2@1155>     If (zeile > 0) AND (zeile <= wztabledata\zeilen) AND (zeile<=wztabledata\maxzeilen) AND (wztabledata\readonly = False)
0001451A <wizard_Table.include.bb2@1156>       gy.q = WZYFontsize + (zeile-1) * gh
00014578 <wizard_Table.include.bb2@1158>       DrBoxf wx,wy + gy + 1 ,wx + ww,wy+gy + gh-1,wztabledata\Highlight
00014598 <wizard_Table.include.bb2@1160>       If wztabledata\vlines = True
000145B4 <wizard_Table.include.bb2@1161>         sx  = wztabledata\breite[1]
000145E8 <wizard_Table.include.bb2@1162>         For j = 2 To wztabledata\spalten
0001460A <wizard_Table.include.bb2@1163>           If wztabledata\breite[j]>0
00014626 <wizard_Table.include.bb2@1164>             sbreite = wztabledata\breite[j]
0001466C <wizard_Table.include.bb2@1165>             !SetDrMd{*tablewin\RPort,%0101010101010101}
000146D2 <wizard_Table.include.bb2@1166>             DrLine wx + sx  ,wy + gy, wx + sx  ,wy + gy + gh,1
0001471A <wizard_Table.include.bb2@1168>             !SetDrMd{*tablewin\RPort,-1}
0001472A <wizard_Table.include.bb2@1169>             sx + sbreite
00014738 <wizard_Table.include.bb2@1171>         Next j
0001475E <wizard_Table.include.bb2@1174>       wy + WZYFontsize + 2 ; direkt unter der Titelzeile anfangen
00014768 <wizard_Table.include.bb2@1175>       ResetList wzrow()
0001477A <wizard_Table.include.bb2@1176>       While NextItemFast(wzrow())
000147A6 <wizard_Table.include.bb2@1177>         If (Index(wzrow())) = (wztabledata\erste_zeile + zeile)
00015356 <wizard_Table.include.bb2@1178>           !WZ_DrawRow
0001535C <wizard_Table.include.bb2@1179>           Pop While : Goto uquit
00015362 <wizard_Table.include.bb2@1181>       Wend
0001537A <wizard_Table.include.bb2@1185> End Statement
000153A4 <wizard_Table.include.bb2@1190> Statement WZ_UpdateTable{gadgetid$}
000153F0 <wizard_Table.include.bb2@1193>   SetActualTable{gadgetid$} : Use Window wztabledata\window_
00015424 <wizard_Table.include.bb2@1195>   *g.Gadget = WZGadAddr(gadgetid$)
00015436 <wizard_Table.include.bb2@1196>   If (*g <> 0) ;AND (Index(wzrow())>0)
0001545C <wizard_Table.include.bb2@1197>     *tablewin.Window = WZWindowAddr : DrPort *tablewin\RPort
000154CC <wizard_Table.include.bb2@1199>     WZPrint gadgetid$+"_SCROLLER",wztabledata\erste_zeile - 1,wztabledata\zeilen  ; ,wztabledata\maxzeilen-1
000154E0 <wizard_Table.include.bb2@1200>     If wztabledata\maxzeilen = 0
0001556E <wizard_Table.include.bb2@1201>       dummy.b = SetGadgetAttrsA_(WZGadAddr(gadgetid$+"_SCROLLER"),WZWindowAddr,0,Tags(#WSCROLLERA_Total,1))
00015574 <wizard_Table.include.bb2@1202>     Else
00015608 <wizard_Table.include.bb2@1203>       dummy = SetGadgetAttrsA_(WZGadAddr(gadgetid$+"_SCROLLER"),WZWindowAddr,0,Tags(#WSCROLLERA_Total,wztabledata\maxzeilen))
0001567E <wizard_Table.include.bb2@1206>     DrBoxf wztabledata\LeftEdge,wztabledata\TopEdge + WZYFontsize + 1,wztabledata\LeftEdge + wztabledata\Width-1,wztabledata\TopEdge+wztabledata\Height-2, wztabledata\BackPen
00015686 <wizard_Table.include.bb2@1208>     hline_color.l = 1 ; GetBestPen{ GetRGBValue{wztabledata\BackPen} * 2 }
000156A6 <wizard_Table.include.bb2@1209>     If wztabledata\hlines = True
000156DA <wizard_Table.include.bb2@1210>       For y.w = 1 To wztabledata\zeilen
00015720 <wizard_Table.include.bb2@1211>         !SetDrMd{*tablewin\RPort,%0101010101010101}
000157C8 <wizard_Table.include.bb2@1212>         DrLine wztabledata\LeftEdge, wztabledata\TopEdge + WZYFontsize + y * wztabledata\columnheight, wztabledata\LeftEdge+wztabledata\Width,wztabledata\TopEdge+WZYFontsize + y*wztabledata\columnheight,hline_color
00015810 <wizard_Table.include.bb2@1213>         !SetDrMd{*tablewin\RPort,-1}
0001581E <wizard_Table.include.bb2@1214>       Next y
0001583E <wizard_Table.include.bb2@1216>     If wztabledata\vlines = True
0001585A <wizard_Table.include.bb2@1217>       sx.w = wztabledata\breite[1]
0001588E <wizard_Table.include.bb2@1218>       For x.w = 2 To wztabledata\spalten
000158B0 <wizard_Table.include.bb2@1219>         If wztabledata\breite[x]>0
000158CC <wizard_Table.include.bb2@1220>           sbreite.w = wztabledata\breite[x]
00015912 <wizard_Table.include.bb2@1221>        !SetDrMd{*tablewin\RPort,%0101010101010101}
00015974 <wizard_Table.include.bb2@1222>           DrLine wztabledata\LeftEdge + sx    , wztabledata\TopEdge, wztabledata\LeftEdge + sx    , wztabledata\TopEdge+wztabledata\Height-1,1
000159BC <wizard_Table.include.bb2@1224>       !SetDrMd{*tablewin\RPort,-1}
000159CC <wizard_Table.include.bb2@1225>           sx + sbreite
000159DA <wizard_Table.include.bb2@1227>       Next x
000159E4 <wizard_Table.include.bb2@1231>     ResetList wzrow()
000159F2 <wizard_Table.include.bb2@1233>       dummy = NextItemFast(wzrow())
00015A30 <wizard_Table.include.bb2@1234>     Until (Index(wzrow())-1 = wztabledata\erste_zeile) OR (dummy = False)
00015A36 <wizard_Table.include.bb2@1237>     zeile.w = 1
00015A3C <wizard_Table.include.bb2@1239>       sx = 0
00016580 <wizard_Table.include.bb2@1240>       !WZ_DrawRow
000165AC <wizard_Table.include.bb2@1241>       If zeile+wztabledata\erste_zeile-1 = wztabledata\aktuelle_zeile
000165B6 <wizard_Table.include.bb2@1242>         PushItem wzrow()
000165FC <wizard_Table.include.bb2@1243>         WZ_HighlightRow{gadgetid$,zeile+wztabledata\erste_zeile-1}
00016606 <wizard_Table.include.bb2@1244>         PopItem wzrow()
00016614 <wizard_Table.include.bb2@1246>       zeile + 1
00016622 <wizard_Table.include.bb2@1247>       dummy.b = NextItemFast(wzrow())
00016652 <wizard_Table.include.bb2@1248>     Until (zeile > wztabledata\zeilen) OR (dummy = False)
0001666A <wizard_Table.include.bb2@1251> End Statement
0001669C <wizard_Table.include.bb2@1259> Statement WZ_EditCell{gadgetid$,zeile.l,spalte.l}
000166DC <wizard_Table.include.bb2@1262>   If (zeile>0) AND (zeile<=wztabledata\maxzeilen) AND (NOT wztabledata\readonly);  AND (NOT wztabledata\edit_)
00016710 <wizard_Table.include.bb2@1263>     *bgad.Gadget = WZGadAddr(gadgetid$)
00016722 <wizard_Table.include.bb2@1264>     If *bgad > 0
00016740 <wizard_Table.include.bb2@1265>       Use Window wztabledata\window_
0001676A <wizard_Table.include.bb2@1266>       DrPort RastPort(wztabledata\window_)
00016774 <wizard_Table.include.bb2@1267>       wx = wztabledata\LeftEdge
00016782 <wizard_Table.include.bb2@1268>       wy = wztabledata\TopEdge
00016790 <wizard_Table.include.bb2@1269>       ww = wztabledata\Width
0001679E <wizard_Table.include.bb2@1270>       wh = wztabledata\Height
000167AC <wizard_Table.include.bb2@1271>       gh.l = wztabledata\columnheight
000167BA <wizard_Table.include.bb2@1272>       id.l = wztabledata\GadgetID
000167CC <wizard_Table.include.bb2@1274>       If (zeile > 0)
000167FA <wizard_Table.include.bb2@1275>         For j = 1 To spalte - 1
00016818 <wizard_Table.include.bb2@1276>           sx + wztabledata\breite[j]
00016828 <wizard_Table.include.bb2@1277>         Next j
00016888 <wizard_Table.include.bb2@1278>         gn$ = WZ_GetCell{gadgetid$,zeile,spalte}
0001689E <wizard_Table.include.bb2@1279>         breite = ww / wztabledata\spalten
000168DA <wizard_Table.include.bb2@1280>         wypos.l = wy + WZYFontsize + gh * (zeile-wztabledata\erste_zeile)
000168E6 <wizard_Table.include.bb2@1281>         gapx = -2
0001699E <wizard_Table.include.bb2@1282>         *gad.Gadget = GTString(wztabledata\GTListID,0,wx + sx + gapx, wypos ,wztabledata\breite[spalte]+6,gh+1,"",0,64,gn$)
000169B0 <wizard_Table.include.bb2@1283>         If *gad<>0
000169BA <wizard_Table.include.bb2@1284>           *gad\GadgetRender = False
000169EE <wizard_Table.include.bb2@1285>           AttachGTList wztabledata\GTListID,wztabledata\window_
00016A08 <wizard_Table.include.bb2@1287>           If (KickVersion > 40)
00016A6C <wizard_Table.include.bb2@1288>             DrBoxf wx + sx + 2, wypos+1,wztabledata\breite[spalte]+wx+sx - 1,wypos + gh-1,wztabledata\BackPen
00016A8E <wizard_Table.include.bb2@1290>           GTActivateGadget wztabledata\GTListID,0
00016A98 <wizard_Table.include.bb2@1291>           wztabledata\edit_ = True
00016AA4 <wizard_Table.include.bb2@1292>           wztabledata\aktuelle_spalte = spalte
00016AB0 <wizard_Table.include.bb2@1293>           wztabledata\aktuelle_zeile = zeile
00016AC8 <wizard_Table.include.bb2@1298> End Statement
00016AF6 <wizard_Table.include.bb2@1301> Statement WZ_TableSort{gadgetid$,column.w}
00016B24 <wizard_Table.include.bb2@1303>   SetActualTable{gadgetid$}
00016B44 <wizard_Table.include.bb2@1305>   StringSort wzrow(),SizeOf.wzrow,6 + column*4
00016B5C <wizard_Table.include.bb2@1312> End Statement
00016B7A <wizard_Table.include.bb2@1316> Function.l WZ_CheckTableEvent{ev.l,@ev_win.l}
00016B9A <wizard_Table.include.bb2@1319>   If ev_win = -1 Then ev_win = EventWindow
00016BB8 <wizard_Table.include.bb2@1320>   If ev_win<0 Then Function Return 0
00016BCE <wizard_Table.include.bb2@1321>   Use Window ev_win
00016BD4 <wizard_Table.include.bb2@1324>     found = False
00016C08 <wizard_Table.include.bb2@1325>     If (EventWindow <> wztabledata\window_) AND (ev<>#IDCMP_GADGETHELP)
00016C32 <wizard_Table.include.bb2@1326>       ChDir "ram:T" : found = False
00016C5A <wizard_Table.include.bb2@1327>       While (MoreEntries = True) AND (found = False)
00016C7C <wizard_Table.include.bb2@1328>         gadgetid$ = EntryName$
00016CD8 <wizard_Table.include.bb2@1329>         If Right$(gadgetid$,8) = ".content"
00016D56 <wizard_Table.include.bb2@1330>           gadgetid$ = StrChg(gadgetid$,".content","")
00016D84 <wizard_Table.include.bb2@1331>           SetActualTable{gadgetid$}
00016DAC <wizard_Table.include.bb2@1332>           If EventWindow = wztabledata\window_ Then found = True
00016DB2 <wizard_Table.include.bb2@1334>       Wend
00016DB8 <wizard_Table.include.bb2@1335>     Else
00016DBE <wizard_Table.include.bb2@1336>       found = True
00016DF6 <wizard_Table.include.bb2@1337>       gadgetid$ = wztabledata\id
00016E1E <wizard_Table.include.bb2@1346>   If found AND (wztabledata\window_>0)
00016E2A <wizard_Table.include.bb2@1347>     mb = MButtons
00016E30 <wizard_Table.include.bb2@1348>     Select ev
00016E3E <wizard_Table.include.bb2@1349>     Case #IDCMP_NEWSIZE
00016E70 <wizard_Table.include.bb2@1350>       WZ_DrawTable{wztabledata\id}
00016EA2 <wizard_Table.include.bb2@1351>       WZ_UpdateTable{wztabledata\id}
00016EAC <wizard_Table.include.bb2@1355>       Function Return ev
00016EC0 <wizard_Table.include.bb2@1356>     Case #IDCMP_RAWKEY
00016ECE <wizard_Table.include.bb2@1357>         *w.Window = WZWindowAddr
00016EE0 <wizard_Table.include.bb2@1358>         v.w = *w\MessageKey\Code
00016EFC <wizard_Table.include.bb2@1359>         v2.w = *w\MessageKey\Qualifier + 32768
00016F24 <wizard_Table.include.bb2@1360>         If (v2 = #IEQUALIFIER_LSHIFT) OR (v2 = #IEQUALIFIER_RSHIFT) Then shift = True
00016F32 <wizard_Table.include.bb2@1363>         row.w = wztabledata\aktuelle_zeile
00016F40 <wizard_Table.include.bb2@1364>         col.w= wztabledata\aktuelle_spalte
00016F4E <wizard_Table.include.bb2@1365>         zei.w = wztabledata\erste_zeile
00016F54 <wizard_Table.include.bb2@1366>         Select v
00016F60 <wizard_Table.include.bb2@1367>         Case #CURSORUP
00016F6E <wizard_Table.include.bb2@1368>           If NOT shift
00016F84 <wizard_Table.include.bb2@1369>             If row > (wztabledata\erste_zeile)
00016F90 <wizard_Table.include.bb2@1370>               row - 1
00016F96 <wizard_Table.include.bb2@1371>             Else
00016FAA <wizard_Table.include.bb2@1372>               If wztabledata\erste_zeile > 1
00016FC0 <wizard_Table.include.bb2@1373>                 wztabledata\erste_zeile - 1
00016FCC <wizard_Table.include.bb2@1374>                 row - 1
00016FD2 <wizard_Table.include.bb2@1377>           Else
00016FDE <wizard_Table.include.bb2@1378>             wztabledata\erste_zeile = 1
00016FE4 <wizard_Table.include.bb2@1379>             row = 1
00016FF6 <wizard_Table.include.bb2@1386>         Case #CURSORDOWN
00017004 <wizard_Table.include.bb2@1387>           If NOT shift
00017170 <wizard_Table.include.bb2@1388>             !WZ_VerifyVisibility{row}
00017176 <wizard_Table.include.bb2@1389>           Else
0001719A <wizard_Table.include.bb2@1390>             wztabledata\erste_zeile = wztabledata\maxzeilen - wztabledata\zeilen + 1
000171A8 <wizard_Table.include.bb2@1391>             row = wztabledata\maxzeilen
000171AA <wizard_Table.include.bb2@1393>         End Select
000171EC <wizard_Table.include.bb2@1394>         If (wztabledata\aktuelle_zeile <> row) OR (wztabledata\aktuelle_spalte <> col) OR (wztabledata\erste_zeile <> zei)
00017220 <wizard_Table.include.bb2@1395>           WZ_SetActiveRow{gadgetid$,row}
00017254 <wizard_Table.include.bb2@1396>           WZ_SetActiveColumn{gadgetid$,col}
00017282 <wizard_Table.include.bb2@1397>           WZ_UpdateTable{gadgetid$}
0001728E <wizard_Table.include.bb2@1398>           Function Return #WZTABLEEVENT_CELLSELECTED
000172A2 <wizard_Table.include.bb2@1401>     Case #IDCMP_VANILLAKEY
000172B0 <wizard_Table.include.bb2@1402>       row.w = wztabledata\aktuelle_zeile
000172BE <wizard_Table.include.bb2@1403>       col.w= wztabledata\aktuelle_spalte
000172CC <wizard_Table.include.bb2@1404>       zei.w = wztabledata\erste_zeile
000172F2 <wizard_Table.include.bb2@1406>       tabkey$ = Chr$(EventCode)
000172FC <wizard_Table.include.bb2@1407>       ResetList wzrow()
0001733C <wizard_Table.include.bb2@1408>       While NextItemFast(wzrow()) AND Index(wzrow())-1<wztabledata\aktuelle_zeile
00017342 <wizard_Table.include.bb2@1409>       Wend
00017354 <wizard_Table.include.bb2@1410>       While NextItemFast(wzrow())
000173A0 <wizard_Table.include.bb2@1411>         r$ = wzrow()\cell[1]
00017408 <wizard_Table.include.bb2@1412>         If Left$(r$,1) = tabkey$
0001741C <wizard_Table.include.bb2@1413>           row = Index(wzrow()) - 1
0001743E <wizard_Table.include.bb2@1414>           If row - wztabledata\erste_zeile => wztabledata\zeilen
0001745C <wizard_Table.include.bb2@1415>             wztabledata\erste_zeile = row - wztabledata\zeilen + 1
00017462 <wizard_Table.include.bb2@1417>           Goto exit_vanilla
00017468 <wizard_Table.include.bb2@1419>       Wend
000174AA <wizard_Table.include.bb2@1421>       If (wztabledata\aktuelle_zeile <> row) OR (wztabledata\aktuelle_spalte <> col) OR (wztabledata\erste_zeile <> zei)
000174DE <wizard_Table.include.bb2@1422>         WZ_SetActiveRow{gadgetid$,row}
00017512 <wizard_Table.include.bb2@1423>         WZ_SetActiveColumn{gadgetid$,col}
00017540 <wizard_Table.include.bb2@1424>         WZ_UpdateTable{gadgetid$}
0001754C <wizard_Table.include.bb2@1425>         Function Return #WZTABLEEVENT_CELLSELECTED
00017560 <wizard_Table.include.bb2@1430>     Case #IDCMP_IDCMPUPDATE
000175A6 <wizard_Table.include.bb2@1431>       If (WZGadHit<>-1) AND (WZGadHit<>255) AND (ev<>#IDCMP_GADGETHELP)
000175F4 <wizard_Table.include.bb2@1432>         If WZGadName = gadgetid$ + "_SCROLLER"
00017622 <wizard_Table.include.bb2@1433>           WZ_EditExit{gadgetid$}
00017638 <wizard_Table.include.bb2@1435>             ev2.l = Wait : VWait
00017662 <wizard_Table.include.bb2@1436>           Until (ev2 <> #IDCMP_DELTAMOVE) AND (ev2<>#IDCMP_MOUSEMOVE)
00017668 <wizard_Table.include.bb2@1437>           FlushEvents
00017688 <wizard_Table.include.bb2@1440>           If WZInput <= wztabledata\maxzeilen
000176C2 <wizard_Table.include.bb2@1441>             If (WZInput + 1) <>  wztabledata\erste_zeile Then wztabledata\erste_zeile = WZInput + 1
000176FC <wizard_Table.include.bb2@1442>             WZ_SetActiveRow{gadgetid$,wztabledata\erste_zeile}
0001772A <wizard_Table.include.bb2@1443>             WZ_UpdateTable{gadgetid$}
00017736 <wizard_Table.include.bb2@1445>             Function Return #WZTABLEEVENT_CELLSELECTED
0001773C <wizard_Table.include.bb2@1447>         Else
0001775C <wizard_Table.include.bb2@1449>           If wztabledata\edit_ = True
0001778A <wizard_Table.include.bb2@1450>             For i = 1 To wztabledata\spalten
000177A6 <wizard_Table.include.bb2@1451>               j + wztabledata\editable_[i]
000177B6 <wizard_Table.include.bb2@1452>             Next i
000177C8 <wizard_Table.include.bb2@1453>             If j = 0
000177F6 <wizard_Table.include.bb2@1454>               WZ_EditExit{gadgetid$}
00017824 <wizard_Table.include.bb2@1455>               WZ_UpdateTable{gadgetid$}
00017830 <wizard_Table.include.bb2@1457>               Function Return #WZTABLEEVENT_CELLSELECTED
00017844 <wizard_Table.include.bb2@1462>     Case #IDCMP_GADGETUP ; pruefen welches Ereignis das GTString beendet hat: TAB oder ENTER, ..
0001786C <wizard_Table.include.bb2@1463>       If (GadgetHit = 0) AND (ev<>#IDCMP_GADGETHELP)    ; GTString-gadget
0001789A <wizard_Table.include.bb2@1464>         WZ_EditExit{gadgetid$}
000178A8 <wizard_Table.include.bb2@1465>         *w.Window = WZWindowAddr
000178BA <wizard_Table.include.bb2@1466>         v.w = *w\MessageKey\Code
000178CC <wizard_Table.include.bb2@1467>         w.w = *w\MessageKey\Qualifier
000178DA <wizard_Table.include.bb2@1468>         row = wztabledata\aktuelle_zeile
000178E8 <wizard_Table.include.bb2@1469>         col = wztabledata\aktuelle_spalte
000178EE <wizard_Table.include.bb2@1471>         Select v
000178FA <wizard_Table.include.bb2@1472>         Case $9 ; TAB
00017900 <wizard_Table.include.bb2@1473>           found = False
0001790E <wizard_Table.include.bb2@1476>               col + 1
0001794E <wizard_Table.include.bb2@1477>             Until (wztabledata\editable_[col] = True) OR (col>wztabledata\spalten)
0001798E <wizard_Table.include.bb2@1479>             If (wztabledata\editable_[col] = False) OR (col>wztabledata\spalten)
000179A6 <wizard_Table.include.bb2@1480>               If col => wztabledata\spalten
000179BC <wizard_Table.include.bb2@1481>                 If row = wztabledata\zeilen
000179D2 <wizard_Table.include.bb2@1482>                   If row = wztabledata\maxzeilen
000179D8 <wizard_Table.include.bb2@1483>                     row = 1
000179DE <wizard_Table.include.bb2@1484>                     col = 0
000179EA <wizard_Table.include.bb2@1485>                     wztabledata\erste_zeile = 1
000179F0 <wizard_Table.include.bb2@1486>                   Else
000179F6 <wizard_Table.include.bb2@1487>                     col = 0
00017A0E <wizard_Table.include.bb2@1488>                     wztabledata\erste_zeile + 1
00017A14 <wizard_Table.include.bb2@1490>                 Else
00017A2A <wizard_Table.include.bb2@1491>                   If row = wztabledata\maxzeilen
00017A30 <wizard_Table.include.bb2@1492>                     row = 1
00017A36 <wizard_Table.include.bb2@1493>                     col = 0
00017A42 <wizard_Table.include.bb2@1494>                     wztabledata\erste_zeile = 1
00017A48 <wizard_Table.include.bb2@1495>                   Else
00017A56 <wizard_Table.include.bb2@1496>                     row + 1
00017A5C <wizard_Table.include.bb2@1497>                     col = 0
00017A62 <wizard_Table.include.bb2@1501>             Else
00017A68 <wizard_Table.include.bb2@1502>               found = True
00017A7C <wizard_Table.include.bb2@1504>           Until found = True
00017AAA <wizard_Table.include.bb2@1506>           WZ_UpdateTable{gadgetid$}
00017AB6 <wizard_Table.include.bb2@1507>           wztabledata\aktuelle_zeile = row
00017AC2 <wizard_Table.include.bb2@1508>           wztabledata\aktuelle_spalte = col
00017AC8 <wizard_Table.include.bb2@1511>         Default
00017AF6 <wizard_Table.include.bb2@1512>           WZ_UpdateTable{gadgetid$}
00017B02 <wizard_Table.include.bb2@1513>           wztabledata\aktuelle_zeile = 0;row
00017B0E <wizard_Table.include.bb2@1514>           wztabledata\aktuelle_spalte = 0;col
00017B10 <wizard_Table.include.bb2@1515>         End Select
00017B1C <wizard_Table.include.bb2@1516>         Function Return #WZTABLEEVENT_CELLSELECTED
00017B30 <wizard_Table.include.bb2@1519>     Case #IDCMP_MOUSEBUTTONS
00017B50 <wizard_Table.include.bb2@1521>       mx = WMouseX : my = WMouseY
00017B8A <wizard_Table.include.bb2@1522>       row = WZ_MouseRow{gadgetid$,mx,my}
00017BC6 <wizard_Table.include.bb2@1523>       column = WZ_MouseColumn{gadgetid$,mx,my}
00017C02 <wizard_Table.include.bb2@1524>       If (row > 0) AND (column>0) AND (row <= wztabledata\maxzeilen)
00017C22 <wizard_Table.include.bb2@1526>         If wztabledata\edit_=True
00017C2C <wizard_Table.include.bb2@1528>           wztabledata\edit_ = False
00017C4A <wizard_Table.include.bb2@1529>           DetachGTList wztabledata\GTListID
00017C62 <wizard_Table.include.bb2@1530>           Free GTList wztabledata\GTListID
00017C94 <wizard_Table.include.bb2@1532>         If (wztabledata\aktuelle_spalte<>column) OR (wztabledata\aktuelle_zeile<>row)
00017CC8 <wizard_Table.include.bb2@1533>           WZ_SetActiveRow{gadgetid$,row}
00017CFA <wizard_Table.include.bb2@1534>           WZ_SetActiveColumn{gadgetid$,column}
00017D28 <wizard_Table.include.bb2@1535>           WZ_UpdateTable{gadgetid$}
00017D4A <wizard_Table.include.bb2@1538>           If wztabledata\editable_[column] = True
00017D82 <wizard_Table.include.bb2@1539>             WZ_EditCell{gadgetid$,row,column}
00017D88 <wizard_Table.include.bb2@1541>           FlushEvents
00017D8E <wizard_Table.include.bb2@1543>         Else
00017D94 <wizard_Table.include.bb2@1545>           Select mb
00017DA2 <wizard_Table.include.bb2@1546>           Case 6 ; Right, up
00017DBE <wizard_Table.include.bb2@1547>             If NOT wztabledata\editable_[column]
00017DD4 <wizard_Table.include.bb2@1548>               If row = wztabledata\aktuelle_zeile
00017E02 <wizard_Table.include.bb2@1549>                 WZ_EditExit{gadgetid$}
00017E3E <wizard_Table.include.bb2@1550>                 a.b = WZ_PopUp{SMouseX-4,SMouseY-8}
00017E4E <wizard_Table.include.bb2@1551>                 If a = 0
00017E5C <wizard_Table.include.bb2@1552>                   wztabledata\selected_popup = 0
00017E64 <wizard_Table.include.bb2@1553>                   Function Return False
00017E6A <wizard_Table.include.bb2@1554>                 Else
00017E7A <wizard_Table.include.bb2@1555>                   wztabledata\selected_popup = a
00017E86 <wizard_Table.include.bb2@1556>                   Function Return #WZTABLEEVENT_POPUPMENU
00017E8C <wizard_Table.include.bb2@1558>               Else
00017E94 <wizard_Table.include.bb2@1559>                 Function Return False
00017E9A <wizard_Table.include.bb2@1562>           Default
00017EE2 <wizard_Table.include.bb2@1563>             If wztabledata\editable_[column] Then WZ_EditExit{gadgetid$}
00017EE4 <wizard_Table.include.bb2@1564>           End Select
00017EF2 <wizard_Table.include.bb2@1567>         If EventDoubleclick
00017F04 <wizard_Table.include.bb2@1568>           If wzold_row = row
00017F10 <wizard_Table.include.bb2@1569>             Function Return #WZTABLEEVENT_DOUBLECLICK
00017F16 <wizard_Table.include.bb2@1571>         Else
00017F2E <wizard_Table.include.bb2@1572>           If row < > 0 Then wzold_row = row
00017F3A <wizard_Table.include.bb2@1573>           Function Return #WZTABLEEVENT_CELLSELECTED
00017F40 <wizard_Table.include.bb2@1576>       Else
00017F6E <wizard_Table.include.bb2@1577>         If (row = 0) AND (wztabledata\sortable = True)
00017F7A <wizard_Table.include.bb2@1578>           wztabledata\sorted_by = column
00017FAC <wizard_Table.include.bb2@1579>           WZ_TableSort{gadgetid$,column}
00017FDA <wizard_Table.include.bb2@1580>           WZ_DrawTable{gadgetid$}
00018008 <wizard_Table.include.bb2@1581>           WZ_UpdateTable{gadgetid$}
0001800A <wizard_Table.include.bb2@1584>     End Select
00018012 <wizard_Table.include.bb2@1586>   Function Return False
00018024 <wizard_Table.include.bb2@1587> End Statement
00018024 <AmiBlitz3.ab2@91> 
00018030 <AmiBlitz3.ab2@92> optimize 5                               ; added because the include change the optimize and or syntax level  tomsmart1
00018030 <logging.include.bb2@1> XINCLUDE "PE/logging.include.bb2"
0001803C <logging.include.bb2@4> optimize 4
0001803C <file.include.bb2@1> XINCLUDE "file.include.bb2"
00018052 <file.include.bb2@66> MaxLen ASL_path.s    = 4096
00018068 <file.include.bb2@67> MaxLen ASL_file.s    = 256
0001807E <file.include.bb2@68> MaxLen ASL_pattern.s = 4096
00018094 <file.include.bb2@70> MaxLen IO_errmsg.s  = 64
000180A0 <file.include.bb2@72> ASL_x.l = -1
000180AC <file.include.bb2@73> ASL_y.l = -1
000180B8 <file.include.bb2@74> ASL_xs.l = -1
000180C4 <file.include.bb2@75> ASL_ys.l = -1
000180EC <file.include.bb2@77> ASL_path.s = "SYS:"
00018114 <file.include.bb2@78> ASL_file.s = ""
0001813C <file.include.bb2@79> ASL_pattern.s = "#?"
00018160 <file.include.bb2@109> Dim filedat.filedat (#max_files-1)
00018184 <file.include.bb2@110> Dim chunk.chunk(8)
0001819E <file.include.bb2@156> Function.l file_LFlip {value.l}
000181AE <file.include.bb2@157> GetReg a0,&value
000181B0 <file.include.bb2@158> CLR.l d0
000181B2 <file.include.bb2@159> CLR.l d1
000181B4 <file.include.bb2@160> CLR.l d2
000181B6 <file.include.bb2@161> CLR.l d3
000181B8 <file.include.bb2@162> MOVE.b  (a0),d0
000181BC <file.include.bb2@163> MOVE.b 1(a0),d1
000181C0 <file.include.bb2@164> MOVE.b 2(a0),d2
000181C4 <file.include.bb2@165> MOVE.b 3(a0),d3
000181C6 <file.include.bb2@166> LSL.l #8,d1
000181C8 <file.include.bb2@167> LSL.l #8,d3
000181CA <file.include.bb2@168> OR.l d0,d1
000181CC <file.include.bb2@169> OR.l d2,d3
000181CE <file.include.bb2@170> SWAP d3
000181D0 <file.include.bb2@171> OR.l d1,d3
000181D2 <file.include.bb2@172> MOVE.l d3,(a0)
000181DC <file.include.bb2@173> Function Return value
000181E2 <file.include.bb2@174> End Function
000181FC <file.include.bb2@215> Function.l file_GetFH {fid.l}
0001821A <file.include.bb2@217> Function Return filedat(fid)\fh
00018220 <file.include.bb2@218> End Function
0001823A <file.include.bb2@237> Function.l file_GetLength {fid.l}
00018254 <file.include.bb2@239> If \is_used
0001827E <file.include.bb2@240>   If \blength<=0
0001829E <file.include.bb2@241>     *fib.FileInfoBlock = AllocDosObject_ (#DOS_FIB,#TAG_DONE)
000182A8 <file.include.bb2@242>     If *fib
000182D4 <file.include.bb2@243>       ExamineFH_ \fh,*fib
000182F6 <file.include.bb2@244>       \blength = *fib\fib_Size
00018310 <file.include.bb2@245>       FreeDosObject_ #DOS_FIB,*fib
00018314 <file.include.bb2@248> Else
00018342 <file.include.bb2@249>   error{"\\__THIS_FUNCTION: Requested file is not open!"}
00018360 <file.include.bb2@251> Function Return \blength
00018366 <file.include.bb2@252> End Function
00018384 <file.include.bb2@271> Function.w file_Seek {fid.l,filepos.l}
0001838A <file.include.bb2@273> succ.w = True
000183B2 <file.include.bb2@274> If \seekpos >< filepos
000183D0 <file.include.bb2@275>   If \cache_ptr
0001840A <file.include.bb2@276>     If filepos>=0 AND filepos<=\blength
00018426 <file.include.bb2@277>       \seekpos = filepos
0001842A <file.include.bb2@278>     Else
00018430 <file.include.bb2@279>       succ = False
00018434 <file.include.bb2@281>   Else
0001843A <file.include.bb2@282>     succ.w = False
00018454 <file.include.bb2@283>     If \is_used
0001849E <file.include.bb2@285>       If Seek_ (\fh,filepos,#OFFSET_BEGINNING) = -1
000184A4 <file.include.bb2@286>         succ.w=False
000184D2 <file.include.bb2@287>         error{"\\__THIS_FUNCTION: Tried to seek at invalid position!"}
000184DC <file.include.bb2@288>       Else succ.w = True
000184F8 <file.include.bb2@289>         \seekpos = filepos
000184FC <file.include.bb2@291>     Else
0001852A <file.include.bb2@292>       error{"\\__THIS_FUNCTION: Requested file is not open!"}
00018534 <file.include.bb2@296> Function Return succ
0001853A <file.include.bb2@297> End Function
00018558 <file.include.bb2@316> Function.w FAST file_SeekRel {fid.l,offset.l}
00018586 <file.include.bb2@318> Function Return file_Seek {fid,\seekpos+offset}
0001858C <file.include.bb2@319> End Function
000185A2 <file.include.bb2@335> Function.l file_GetFreeFID{}
000185AC <file.include.bb2@337> fid.l = 0
0001861A <file.include.bb2@338> While (\is_used=True OR \occupied=True) AND fid < #max_files-1
0001862A <file.include.bb2@339>   fid+1
0001862E <file.include.bb2@340> Wend
00018668 <file.include.bb2@341> If \is_used=True Then fid = -1 ;: error{"Too many files open !"}
00018672 <file.include.bb2@342> Function Return fid
00018678 <file.include.bb2@343> End Function
00018692 <file.include.bb2@397> Statement file_Close {fid.l}
000186A8 <file.include.bb2@399> If fid>=0
00018704 <file.include.bb2@400>   If \fh Then Close_ \fh : \fh = False
0001873E <file.include.bb2@401>   \name       = ""
00018778 <file.include.bb2@402>   \path       = ""
00018796 <file.include.bb2@403>   \seekpos    = 0
000187B4 <file.include.bb2@404>   \blength    = 0
000187CA <file.include.bb2@405>   \is_used    = False
000187E6 <file.include.bb2@406>   \accessmode = 0
00018800 <file.include.bb2@407>   \occupied   = False
0001887C <file.include.bb2@408>   If \cache_ptr Then FreeMem_ \cache_ptr,\cache_blength : \cache_ptr = 0
0001888E <file.include.bb2@410> End Statement
000188A4 <file.include.bb2@422> Statement file_CloseAll {}
000188D8 <file.include.bb2@424> For fid.l=0 To #max_files-1
000188E2 <file.include.bb2@425>   file_Close{fid}
000188F2 <file.include.bb2@426> Next
000188F6 <file.include.bb2@427> End Statement
00018924 <file.include.bb2@428> !autoexit{file_CloseAll}
0001893E <file.include.bb2@447> Function.s file_GetDosName {fid.l}
00018954 <file.include.bb2@449> If fid>=0
00018972 <file.include.bb2@450>   If \fh
00018988 <file.include.bb2@451>     MaxLen name.s = 2096
000189C0 <file.include.bb2@452>     NameFromFH_ \fh,&name.s,2096
000189EA <file.include.bb2@453>     name.s = Peek.s(&name.s)
00018A14 <file.include.bb2@456> Function Return name.s
00018A2C <file.include.bb2@457> End Function
00018A42 <file.include.bb2@525> Function.s file_GetIOErr {}
00018A8E <file.include.bb2@527> Fault_ IoErr_(),0,&IO_errmsg.s,64 : Poke.b &IO_errmsg.s+63,0
00018AAE <file.include.bb2@528> Function Return Peek.s(&IO_errmsg.s)
00018AB6 <file.include.bb2@529> End Function
00018AF4 <file.include.bb2@568> Function.l file_Open {name.s,mode.l,@extention.s}
00018B00 <file.include.bb2@570> openfid.l = -1
00018B0A <file.include.bb2@571> fid.l = file_GetFreeFID{}
00018B20 <file.include.bb2@572> If fid>=0
00018B26 <file.include.bb2@573>   Select mode
00018B32 <file.include.bb2@574>     Case #file_read
00018B5A <file.include.bb2@575>       a.s = "Select file to read ..."
00018B6A <file.include.bb2@576>     Case #file_open
00018B92 <file.include.bb2@577>       a.s = "Select file to open ..."
00018BA2 <file.include.bb2@578>     Case #file_write
00018BCA <file.include.bb2@579>       a.s = "Select file to write ..."
00018BDA <file.include.bb2@580>     Case #file_forcewrite
00018C02 <file.include.bb2@581>       a.s = "Select file to write ..."
00018C04 <file.include.bb2@582>   End Select
00018C2A <file.include.bb2@584>   If mode = #file_read Then savemode.l = False:Else savemode = True
00018C66 <file.include.bb2@586>   If name.s=""
00018CF0 <file.include.bb2@587>     aslfr_SetPath {0,ASL_path.s,ASL_file.s,ASL_pattern.s}
00018D2A <file.include.bb2@588>     If aslfr_Request {0,savemode.l,False,False}
00018D5A <file.include.bb2@589>       name.s = aslfr_GetNextFile {}
00018D96 <file.include.bb2@593>   If name.s><""
00018DEE <file.include.bb2@594>     path.s  = dos_PathPart {name.s}
00018E46 <file.include.bb2@595>     fname.s = dos_FilePart {name.s}
00018EC6 <file.include.bb2@597>     name.s  = dos_AddPart {path.s,fname.s}
00018EFA <file.include.bb2@598>     ASL_path.s = path.s
00018F2E <file.include.bb2@599>     ASL_file.s  = fname.s
00018F34 <file.include.bb2@600>     Select mode
00018F40 <file.include.bb2@601>       Case #file_read
00018F74 <file.include.bb2@602>         \fh = Open_ (&name.s,#MODE_OLDFILE)
00018FA4 <file.include.bb2@603>         If \fh = False
00019060 <file.include.bb2@604>           If extention.s><"" Then fname.s = dos_SetExt {fname.s,extention.s}
000190E0 <file.include.bb2@605>           name.s  = dos_AddPart {path.s,fname.s}
00019114 <file.include.bb2@606>           \fh =  Open_ (&name.s,#MODE_OLDFILE)
00019132 <file.include.bb2@608>         If \fh
0001913A <file.include.bb2@609>           openfid = fid
0001913E <file.include.bb2@610>         Else
00019202 <file.include.bb2@611>           error{"\\__THIS_FUNCTION: Unable to read " + Chr$(34)+name.s+Chr$(34)+" : "+ file_GetIOErr{}+"!"}
00019212 <file.include.bb2@614>       Case #file_write
000192CE <file.include.bb2@615>         If extention.s><"" Then fname.s = dos_SetExt {fname.s,extention.s}
0001934E <file.include.bb2@616>         name.s  = dos_AddPart {path.s,fname.s}
0001942E <file.include.bb2@617>         If dos_Exist {name.s} Then bool.l = ask {"File "+Chr$(34)+fname.s+Chr$(34)+" already exists!","Overwrite|Cancel"}:Else bool = True
00019438 <file.include.bb2@618>         If bool
0001946C <file.include.bb2@619>           \fh = Open_ (&name.s,#MODE_NEWFILE)
0001948A <file.include.bb2@620>           If \fh
00019492 <file.include.bb2@621>             openfid = fid
00019496 <file.include.bb2@622>           Else
0001955A <file.include.bb2@623>             error{"\\__THIS_FUNCTION: Unable to write " + Chr$(34)+name.s+Chr$(34)+" : "+ file_GetIOErr{}+"!"}
0001956A <file.include.bb2@627>       Case #file_open
0001959E <file.include.bb2@628>         \fh = Open_ (&name.s,#MODE_READWRITE)
000195CE <file.include.bb2@629>         If \fh = False
0001968A <file.include.bb2@630>           If extention.s><"" Then fname.s = dos_SetExt {fname.s,extention.s}
0001970A <file.include.bb2@631>           name.s  = dos_AddPart {path.s,fname.s}
0001973E <file.include.bb2@632>           \fh =  Open_ (&name.s,#MODE_READWRITE)
0001975C <file.include.bb2@635>         If \fh
00019764 <file.include.bb2@636>           openfid = fid
00019768 <file.include.bb2@637>         Else
0001982C <file.include.bb2@638>           error{"\\__THIS_FUNCTION: Unable to open " + Chr$(34)+name.s+Chr$(34)+" : "+ file_GetIOErr{}+"!"}
0001983C <file.include.bb2@641>       Case #file_forcewrite
000198F8 <file.include.bb2@642>         If extention.s><"" Then fname.s = dos_SetExt {fname.s,extention.s}
00019978 <file.include.bb2@643>         name.s  = dos_AddPart {path.s,fname.s}
000199AC <file.include.bb2@644>         \fh = Open_ (&name.s,#MODE_NEWFILE)
000199CA <file.include.bb2@645>         If \fh
000199D2 <file.include.bb2@646>           openfid = fid
000199D6 <file.include.bb2@647>         Else
00019A9A <file.include.bb2@648>           error{"\\__THIS_FUNCTION: Unable to write " + Chr$(34)+name.s+Chr$(34)+" : "+ file_GetIOErr{}+"!"}
00019A9E <file.include.bb2@651>       Default
00019ACC <file.include.bb2@652>         error{"\\__THIS_FUNCTION: Undefined accessmode!"}
00019ACE <file.include.bb2@653>     End Select
00019AD2 <file.include.bb2@655> Else
00019B5E <file.include.bb2@656>   error{"\\__THIS_FUNCTION: Unable to open file \\22"+dos_FilePart {name.s}+"\\22: Too many files open!"}
00019B74 <file.include.bb2@659> If openfid>=0
00019B8A <file.include.bb2@660>   \is_used = True
00019BF4 <file.include.bb2@661>   \name = dos_FilePart {name.s}
00019C5E <file.include.bb2@662>   \path = dos_PathPart {name.s}
00019C7E <file.include.bb2@663>   If mode = #file_forcewrite Then mode = #file_write
00019C9A <file.include.bb2@664>   \accessmode = mode
00019CB8 <file.include.bb2@665>   \seekpos = 0
00019CD2 <file.include.bb2@666>   \intel = False
00019CDC <file.include.bb2@668> Function Return openfid
00019CF8 <file.include.bb2@669> End Function
00019D12 <file.include.bb2@733> Function.s file_GetFullName {fid.l}
00019DB6 <file.include.bb2@735> filename.s = dos_AddPart {\path,\name}
00019E12 <file.include.bb2@736> If \is_used = False Then error{"\\__THIS_FUNCTION: Requested file is not open!"}
00019E3C <file.include.bb2@737> Function Return filename.s
00019E54 <file.include.bb2@738> End Function
00019E6E <file.include.bb2@755> Function.w file_IsUsed {fid.l}
00019EB0 <file.include.bb2@757> If fid>=0 AND fid<#max_files Then Function Return \is_used
00019EB8 <file.include.bb2@758> Function Return False
00019EBE <file.include.bb2@759> End Function
00019EE0 <file.include.bb2@805> Function.w file_WriteMem {fid.l,sourceaddr.l,blength.l}
00019EE6 <file.include.bb2@807> succ.w = False
00019F0E <file.include.bb2@808> If fid>=0 AND fid<#max_files
00019F28 <file.include.bb2@809> If \is_used
00019F3E <file.include.bb2@810>   If blength>#file_maxbuffer
00019F9A <file.include.bb2@811>     If \buffer_used Then Flush_ \fh:\buffer_used = False
00019FD2 <file.include.bb2@812>     wlength.l = Write_ (\fh,sourceaddr,blength)
00019FD6 <file.include.bb2@813>   Else
0001A022 <file.include.bb2@814>     wlength.l = FWrite_ (\fh,sourceaddr,blength,1) * blength
0001A03C <file.include.bb2@815>     \buffer_used = True
0001A050 <file.include.bb2@818>   If wlength=blength
0001A056 <file.include.bb2@819>     succ.w = True
0001A05A <file.include.bb2@820>   Else
0001A070 <file.include.bb2@821>     If wlength>=0
0001A150 <file.include.bb2@822>       error{"\\__THIS_FUNCTION: Failed to write data to \\22"+\name+"\\22!\\nWanted to write "+Str$(blength)+" bytes but did "+Str$(wlength)+"!"}
0001A154 <file.include.bb2@823>     Else
0001A19A <file.include.bb2@824>       a.s = LSet$ (" ",85)
0001A1A6 <file.include.bb2@825>       err.l = IoErr_()
0001A214 <file.include.bb2@826>       If Fault_ (err.l,0,&a.s,81) = False Then a.s = "undefined dos error"
0001A24E <file.include.bb2@827>       error{a.s}
0001A29A <file.include.bb2@830>   If wlength>=0 Then \seekpos + wlength
0001A306 <file.include.bb2@831>   If \seekpos>\blength Then \blength = \seekpos
0001A30A <file.include.bb2@832> Else
0001A338 <file.include.bb2@833>   error{"\\__THIS_FUNCTION: Tried to write a non-existing file!"}
0001A33C <file.include.bb2@835> Else
0001A392 <file.include.bb2@836>  error{"\\__THIS_FUNCTION: Invalid dos number! "+Str$(fid)}
0001A39C <file.include.bb2@838> Function Return succ
0001A3B0 <file.include.bb2@839> End Function
0001A3CA <file.include.bb2@841> Statement file_Flush{fid.l}
0001A3D0 <file.include.bb2@843> succ.w = False
0001A3F8 <file.include.bb2@844> If fid>=0 AND fid<#max_files
0001A412 <file.include.bb2@845>   If \is_used
0001A46E <file.include.bb2@846>     If \buffer_used Then Flush_ \fh:\buffer_used = False
0001A472 <file.include.bb2@849> End Statement
0001A494 <file.include.bb2@867> Function.l FAST file_ReadMem {fid.l,destaddr.l,blength.l}
0001A49A <file.include.bb2@869> succ.l = False
0001A4B4 <file.include.bb2@870> If \is_used
0001A4D2 <file.include.bb2@871>   If \cache_ptr
0001A514 <file.include.bb2@872>     If blength<\cache_blength-\seekpos
0001A562 <file.include.bb2@873>       CopyMem_ \cache_ptr+\seekpos,destaddr,blength
0001A598 <file.include.bb2@874>       \seekpos + blength
0001A59E <file.include.bb2@875>       succ.l = True
0001A5A2 <file.include.bb2@876>     Else
0001A5D2 <file.include.bb2@877>       \seekpos = \blength
0001A5D8 <file.include.bb2@878>       succ=False
0001A5DC <file.include.bb2@880>   Else
0001A5F2 <file.include.bb2@881>     If blength>#file_maxbuffer
0001A64E <file.include.bb2@882>       If \buffer_used Then Flush_ \fh:\buffer_used = False
0001A686 <file.include.bb2@883>       rlength.l = Read_ (\fh,destaddr,blength)
0001A68A <file.include.bb2@884>     Else
0001A6D6 <file.include.bb2@885>       rlength.l = FRead_ (\fh,destaddr,blength,1) * blength
0001A6F0 <file.include.bb2@886>       \buffer_used = True
0001A704 <file.include.bb2@888>     If rlength=blength
0001A70A <file.include.bb2@889>       succ = True ; rlength
0001A70E <file.include.bb2@890>     Else
0001A724 <file.include.bb2@891>       If rlength>=0
0001A72A <file.include.bb2@892>         succ.l = False ; rlength
0001A72E <file.include.bb2@893>       Else
0001A780 <file.include.bb2@894>         error{"\\__THIS_FUNCTION: "+file_GetIOErr{}}
0001A7CC <file.include.bb2@897>     If rlength>=0 Then \seekpos + rlength
0001A7D6 <file.include.bb2@900> Function Return succ
0001A7DC <file.include.bb2@901> End Function
0001A7F6 <file.include.bb2@955> Function.w FAST file_EOF {fid.l}
0001A7FC <file.include.bb2@957> succ.w = False
0001A848 <file.include.bb2@958> If \blength <=0 Then \blength = file_GetLength{fid}
0001A88A <file.include.bb2@959> If \blength <= \seekpos Then succ=True
0001A894 <file.include.bb2@960> Function Return succ
0001A89A <file.include.bb2@961> End Function
0001A8C0 <file.include.bb2@1108> Function.w file_WriteChunk {fid.l,head.l,@blength.l,@nowordalign.l}
0001A8C6 <file.include.bb2@1110> succ.w = False
0001A8EE <file.include.bb2@1111> If file_chunkcounter<8 AND file_chunkcounter>=0
0001A952 <file.include.bb2@1112>   If nowordalign=0 AND (filedat(fid)\seekpos&1)=1 Then dummy.l = 0:file_WriteMem {fid,&dummy,1}
0001A96C <file.include.bb2@1113>   succ.w = file_WriteMem {fid,&head,4}
0001A976 <file.include.bb2@1114>   If succ
0001A990 <file.include.bb2@1115>     succ.w = file_WriteMem {fid,&blength,4}
0001A99A <file.include.bb2@1116>     If succ
0001A9B2 <file.include.bb2@1117>       chunk(file_chunkcounter)\head   = head
0001A9E2 <file.include.bb2@1118>       chunk(file_chunkcounter)\offset = filedat(fid)\seekpos
0001A9FE <file.include.bb2@1119>       chunk(file_chunkcounter)\blength = blength
0001AA0E <file.include.bb2@1120>       file_chunkcounter+1
0001AA12 <file.include.bb2@1123> Else
0001AA40 <file.include.bb2@1124>   error{"\\__THIS_FUNCTION: Invalid chunk counter!"}
0001AA4A <file.include.bb2@1126> Function Return succ
0001AA50 <file.include.bb2@1127> End Function
0001AA6E <file.include.bb2@1148> Function.w file_CloseChunk {fid.l,head.l}
0001AA74 <file.include.bb2@1150> succ.w = False
0001AA8A <file.include.bb2@1151> If file_chunkcounter>0
0001AA9A <file.include.bb2@1152>   file_chunkcounter-1
0001AABE <file.include.bb2@1153>   If chunk(file_chunkcounter)\head=head
0001AAF4 <file.include.bb2@1154>     chunklength.l = filedat(fid)\seekpos - chunk(file_chunkcounter)\offset
0001AB0A <file.include.bb2@1155>     If chunklength>=0
0001AB58 <file.include.bb2@1156>       If chunk(file_chunkcounter)\blength><chunklength AND chunk(file_chunkcounter)\blength>0
0001AC36 <file.include.bb2@1157>         error{"\\__THIS_FUNCTION: Chunk length was told wrong ("+Mkl$(head)+": "+Str$(chunk(file_chunkcounter)\blength)+"><"+Str$(chunklength)+") !"}
0001AC54 <file.include.bb2@1158>         chunk(file_chunkcounter)\blength = 0
0001AC7E <file.include.bb2@1160>       If chunk(file_chunkcounter)\blength<=0
0001AC9A <file.include.bb2@1161>         lastpos.l = filedat(fid)\seekpos
0001ACC8 <file.include.bb2@1162>         succ.w = file_Seek {fid,chunk(file_chunkcounter)\offset-4}
0001ACD2 <file.include.bb2@1163>         If succ
0001ACFE <file.include.bb2@1164>           If filedat(fid)\intel Then chunklength = file_LFlip{chunklength}
0001AD18 <file.include.bb2@1165>           succ = file_WriteMem {fid,&chunklength,4}
0001AD34 <file.include.bb2@1166>           If succ Then succ = file_Seek {fid,lastpos}
0001AD38 <file.include.bb2@1167>         Else
0001AD66 <file.include.bb2@1168>           error{"\\__THIS_FUNCTION: unable to seek within file!"}
0001AD6A <file.include.bb2@1170>       Else
0001AD70 <file.include.bb2@1171>         succ.w = True
0001AD74 <file.include.bb2@1173>     Else
0001AE08 <file.include.bb2@1174>       error{"\\__THIS_FUNCTION: Length of chunk is <0! ("+Str$(chunklength)+") ("+Mkl$(head)+")"}
0001AE0C <file.include.bb2@1176>   Else
0001AEA2 <file.include.bb2@1177>     error{"\\__THIS_FUNCTION: Closed wrong chunk! ("+Mkl$(chunk(file_chunkcounter)\head)+" >< "+Mkl$(head)+")"}
0001AEA6 <file.include.bb2@1179> Else
0001AED4 <file.include.bb2@1180>   error{"\\__THIS_FUNCTION: There is no chunk To close!"}
0001AEDE <file.include.bb2@1182> Function Return succ
0001AEE4 <file.include.bb2@1183> End Function
0001AEFE <file.include.bb2@1245> Function.l file_GetSeekPos {fid.l}
0001AF1C <file.include.bb2@1247> Function Return filedat(fid)\seekpos
0001AF22 <file.include.bb2@1248> End Function
0001AF3C <file.include.bb2@1398> Function.b FAST file_ReadByte {fid.l}
0001AF5A <file.include.bb2@1400> If \cache_ptr
0001B018 <file.include.bb2@1401>   If \seekpos<=\cache_blength Then \seekpos+1 : Function Return Peek.b(\cache_ptr+\seekpos-1)
0001B020 <file.include.bb2@1402>   dummy.b=0
0001B024 <file.include.bb2@1403> Else
0001B054 <file.include.bb2@1404>   If file_ReadMem{fid,&dummy.b,1}=0 Then dummy=0
0001B060 <file.include.bb2@1406> Function Return dummy
0001B066 <file.include.bb2@1407> End Function
0001B080 <file.include.bb2@1423> Function.l FAST file_ReadLong {fid.l}
0001B09E <file.include.bb2@1425> If \cache_ptr
0001B15A <file.include.bb2@1426>   If \seekpos<=\cache_blength Then \seekpos+4 : Function Return Peek.l(\cache_ptr+\seekpos-4)
0001B164 <file.include.bb2@1427>   dummy.l=0
0001B168 <file.include.bb2@1428> Else
0001B19A <file.include.bb2@1429>   If file_ReadMem{fid,&dummy.l,4}=0 Then dummy=0
0001B1A4 <file.include.bb2@1431> Function Return dummy
0001B1AA <file.include.bb2@1432> End Function
0001B1C4 <file.include.bb2@1593> Function.s file_ReadLine {fid.l}
0001B1CE <file.include.bb2@1594> dummy.l = 0
0001B1D8 <file.include.bb2@1595> dummy2.l = 0
0001B1EE <file.include.bb2@1596> MaxLen a.s=512
0001B204 <file.include.bb2@1597> While dummy>=0
0001B214 <file.include.bb2@1598>   If file_EOF{fid}
0001B220 <file.include.bb2@1599>     dummy=-1
0001B224 <file.include.bb2@1600>   Else
0001B22E <file.include.bb2@1601>     dummy=0
0001B270 <file.include.bb2@1602>     If file_ReadMem {fid,&dummy+3,1} = False Then dummy=-1
0001B286 <file.include.bb2@1603>     If dummy=13
0001B2AA <file.include.bb2@1604>       If file_ReadMem {fid,&dummy2+3,1}
0001B2C0 <file.include.bb2@1605>         If dummy2=10
0001B2CC <file.include.bb2@1606>           dummy=-1
0001B2D0 <file.include.bb2@1607>         Else
0001B2E0 <file.include.bb2@1608>           file_SeekRel{fid,1}
0001B302 <file.include.bb2@1613>     If dummy=10 Then dummy=-1
0001B318 <file.include.bb2@1616>   If dummy>=0
0001B364 <file.include.bb2@1617>     a.s + Chr$(dummy)
0001B368 <file.include.bb2@1619> Wend
0001B392 <file.include.bb2@1621> Function Return a.s
0001B3AA <file.include.bb2@1622> End Function
0001B3D8 <file.include.bb2@1682> Function.l file_WriteLine {fid.l,textline.s}
0001B3EC <file.include.bb2@1683> slen.l = FLen(textline)
0001B404 <file.include.bb2@1684> Poke.b &textline+slen,10 ; dont try this at home, kids!
0001B426 <file.include.bb2@1685> succ.l = file_WriteMem {fid,&textline,slen+1}
0001B43E <file.include.bb2@1686> Poke.b &textline+slen,0
0001B448 <file.include.bb2@1687> Function Return succ
0001B462 <file.include.bb2@1688> End Function
0001B484 <file.include.bb2@1763> Function.l file_WriteTag{fid.l,tag.l,value.l}
0001B49C <file.include.bb2@1765> fileengine\tagitem\ti_Tag = tag,value
0001B4BE <file.include.bb2@1766> Function Return file_WriteMem{fid,fileengine\tagitem,8}
0001B4C4 <file.include.bb2@1767> End Function
0001B4F6 <file.include.bb2@1787> Function.l file_WriteTagString{fid.l,tag.l,string.s}
0001B50A <file.include.bb2@1789> slen.l = FLen(string.s)
0001B522 <file.include.bb2@1790> tag.l = (tag & $FFFFFF00) | @"$"
0001B53A <file.include.bb2@1791> fileengine\tagitem\ti_Tag = tag,slen
0001B55A <file.include.bb2@1792> succ.l = file_WriteMem {fid,fileengine\tagitem,8}
0001B58C <file.include.bb2@1793> succ & file_WriteMem {fid,&string.s,slen+1}
0001B5BE <file.include.bb2@1794> aligns.l = 4 - ((slen+1) MOD 4)
0001B5D4 <file.include.bb2@1795> If aligns<4
0001B5DE <file.include.bb2@1796>   dummy.l =0
0001B608 <file.include.bb2@1797>   succ & file_WriteMem {fid,&dummy,aligns}
0001B612 <file.include.bb2@1799> Function Return succ
0001B62C <file.include.bb2@1800> End Function
0001B646 <file.include.bb2@1817> Function.l file_ReadTag{fid.l}
0001B664 <file.include.bb2@1819> succ.l = file_ReadMem{fid,fileengine\tagitem,8}
0001B688 <file.include.bb2@1820> If (fileengine\tagitem\ti_Tag & $FF) = @"$"
0001B6D2 <file.include.bb2@1821>   fileengine\string = LSet$(" ",fileengine\tagitem\ti_Data)
0001B6EC <file.include.bb2@1822>   file_ReadMem{fid,&fileengine\string,fileengine\tagitem\ti_Data}
0001B6FE <file.include.bb2@1823>   dummy.l = file_ReadByte{fid} ; read the 0 byte
0001B736 <file.include.bb2@1824>   aligns.l = 4 - ((fileengine\tagitem\ti_Data+1) MOD 4)
0001B74C <file.include.bb2@1825>   If aligns<4
0001B756 <file.include.bb2@1826>     dummy.l =0
0001B77E <file.include.bb2@1827>     succ & file_ReadMem {fid,&dummy,aligns}
0001B782 <file.include.bb2@1829> Else
0001B7AA <file.include.bb2@1830>   fileengine\string = ""
0001B7BA <file.include.bb2@1832> Function Return fileengine\tagitem\ti_Tag
0001B7CE <file.include.bb2@1833> End Function
0001B7E4 <file.include.bb2@1846> Function.l file_GetTagValue{}
0001B7F4 <file.include.bb2@1848> Function Return fileengine\tagitem\ti_Data
0001B7F8 <file.include.bb2@1849> End Function
0001B80E <file.include.bb2@1870> Function.s file_GetTagString{}
0001B838 <file.include.bb2@1872> Function Return fileengine\string
0001B840 <file.include.bb2@1873> End Function
0001B840 <logging.include.bb2@8> 
0001B8DE <logging.include.bb2@30> log_file$ = dos_GetProgDir{"ram:"}+dos_GetProgFile{"unknown"}+".log"
0001B8E6 <logging.include.bb2@31> log_destination.w = #log_toconsole
0001B8EE <logging.include.bb2@32> log_level.w = #log_all
0001B8F6 <logging.include.bb2@33> log_format.w = #log_normal
0001B90C <logging.include.bb2@107> Function.s log_GetTimeStamp{}
0001B916 <logging.include.bb2@110>   DateFormat 0 ; DD/MM/YYYY
0001B98C <logging.include.bb2@111>   _date$ = StrChg(Date$(SystemDate),"/",".")
0001B9B0 <logging.include.bb2@112>   Format "00"
0001BA5A <logging.include.bb2@113>   _time$ = Str$(Hours)+":"+Str$(Mins)+":"+Str$(Secs)
0001BA7E <logging.include.bb2@114>   Format ""
0001BA84 <logging.include.bb2@115>   Select log_format
0001BAAC <logging.include.bb2@116>   Case #log_short  : Function Return ""
0001BB08 <logging.include.bb2@117>   Case #log_nodate : Function Return "["+_time$+"]"
0001BB8A <logging.include.bb2@118>   Default : Function Return "["+_date$+" "+_time$+"]"
0001BB8C <logging.include.bb2@119>   End Select
0001BBA4 <logging.include.bb2@120> End Function
0001BBDE <logging.include.bb2@124> Statement log_Output{text$,@header$}
0001BC10 <logging.include.bb2@126>   message_len.w = Len(text$)
0001BC24 <logging.include.bb2@127>   If message_len > #log_Width
0001BC56 <logging.include.bb2@128>     For i.w = 1 To message_len Step #log_Width
0001BFD8 <logging.include.bb2@129>       !log_out{header$,Mid$(text$,i,#log_Width)}
0001BFE6 <logging.include.bb2@130>     Next i
0001BFEA <logging.include.bb2@131>   Else
0001C28C <logging.include.bb2@132>     !log_out{header$,text$}
0001C2A6 <logging.include.bb2@134> End Statement
0001C2E0 <logging.include.bb2@137> Statement log_PrintN{text$,header$}
0001C332 <logging.include.bb2@138>   ret.w = Instr(text$,Chr$(10))
0001C346 <logging.include.bb2@139>   If ret = 0
0001C39C <logging.include.bb2@140>     log_Output{text$,header$}
0001C3A0 <logging.include.bb2@141>   Else
0001C41C <logging.include.bb2@142>     log_Output{Left$(text$,ret-1),header$}
0001C490 <logging.include.bb2@143>     log_PrintN{UnRight$(text$,ret),header$}
0001C4AA <logging.include.bb2@145> End Statement
0001C4AA <AmiBlitz3.ab2@95> CEND
0001C4B6 <AmiBlitz3.ab2@96> optimize 5                               ; added because the include change the optimize and or syntax level  tomsmart1
0001C4B6 <translation.include.bb2@1> XINCLUDE "translation.include.bb2"
0001C4B6 <phrasebook.include.bb2@1> XINCLUDE "phrasebook.include.bb2"  ; we will use functions from the dos.include
0001C4B6 <prefixtree.include.bb2@1> XINCLUDE "prefixtree.include.bb2"
0001C4B6 <dynamicarray.include.bb2@1> XINCLUDE "dynamicarray.include.bb2"
0001C4DE <dynamicarray.include.bb2@42> Dim List *da_TrackList.dynArray(0)
0001C4F8 <dynamicarray.include.bb2@55> Statement da_Clear{*da.dynArray}
0001C502 <dynamicarray.include.bb2@56> If *da
0001C514 <dynamicarray.include.bb2@57>   If *da\array
0001C538 <dynamicarray.include.bb2@58>     FreeVec_ *da\array : *da\array = 0
0001C546 <dynamicarray.include.bb2@60>   *da\allocN = 0
0001C552 <dynamicarray.include.bb2@61>   *da\useN   = 0
0001C556 <dynamicarray.include.bb2@63> End Statement
0001C570 <dynamicarray.include.bb2@76> Statement da_Unuse{*da.dynArray}
0001C57A <dynamicarray.include.bb2@77> If *da
0001C586 <dynamicarray.include.bb2@78>   *da\useN   = 0
0001C58A <dynamicarray.include.bb2@80> End Statement
0001C5A8 <dynamicarray.include.bb2@99> Function.l da_Create{itemSize.l,@incItems.l}
0001C5C2 <dynamicarray.include.bb2@101> If incItems<1 incItems = #DA_DEFAULTINCITEMS
0001C5E2 <dynamicarray.include.bb2@102> *da.dynArray = AllocVec_(SizeOf.dynArray,#MEMF_ANY)
0001C5EC <dynamicarray.include.bb2@103> If *da
0001C5FA <dynamicarray.include.bb2@104>   *da\allocN   = 0
0001C606 <dynamicarray.include.bb2@105>   *da\useN     = 0
0001C614 <dynamicarray.include.bb2@106>   *da\array    = 0
0001C620 <dynamicarray.include.bb2@107>   *da\itemSize = itemSize
0001C62C <dynamicarray.include.bb2@108>   *da\incN     = incItems
0001C63E <dynamicarray.include.bb2@109>   If AddItem(*da_TrackList())
0001C64E <dynamicarray.include.bb2@110>     *da_TrackList() = *da
0001C658 <dynamicarray.include.bb2@113> Function Return *da
0001C65E <dynamicarray.include.bb2@114> End Function
0001C67C <dynamicarray.include.bb2@156> Function.l da_Expand{*da.dynArray,itemMax.l}
0001C686 <dynamicarray.include.bb2@157> If *da
0001C6A8 <dynamicarray.include.bb2@158>   If *da\allocN>itemMax Then Function Return -1
0001C6B6 <dynamicarray.include.bb2@159>   oldAllocN.l = *da\allocN
0001C6DE <dynamicarray.include.bb2@160>   *da\allocN = Max(itemMax,*da\allocN + *da\incN)
0001C710 <dynamicarray.include.bb2@161>   tmp.l = AllocVec_ (*da\allocN * *da\itemSize,#MEMF_CLEAR)
0001C71A <dynamicarray.include.bb2@162>   If tmp
0001C72C <dynamicarray.include.bb2@163>     If *da\array
0001C760 <dynamicarray.include.bb2@164>       CopyMem_ *da\array,tmp,oldAllocN * *da\itemSize
0001C776 <dynamicarray.include.bb2@165>       FreeVec_ *da\array
0001C782 <dynamicarray.include.bb2@167>     *da\array = tmp
0001C790 <dynamicarray.include.bb2@168>     Function Return -1
0001C79C <dynamicarray.include.bb2@171> Function Return 0
0001C7A2 <dynamicarray.include.bb2@172> End Function
0001C7C0 <dynamicarray.include.bb2@231> Function.l FAST da_GetItem{*da.dynArray,itemX.l}
0001C7D6 <dynamicarray.include.bb2@233> If da_Expand{*da,itemX}
0001C7F8 <dynamicarray.include.bb2@234>   If itemX>=*da\useN Then *da\useN = itemX+1
0001C81C <dynamicarray.include.bb2@235>   Function Return *da\array + itemX * *da\itemSize
0001C828 <dynamicarray.include.bb2@237> Function Return 0
0001C82E <dynamicarray.include.bb2@238> End Function
0001C850 <dynamicarray.include.bb2@281> Function.l FAST da_SetItem{*da.dynArray,itemX.l,@itemPtr.l}
0001C85A <dynamicarray.include.bb2@282> If *da
0001C87C <dynamicarray.include.bb2@283>   If *da\allocN<=itemX Then da_Expand{*da,itemX}
0001C88E <dynamicarray.include.bb2@284>   If *da\array
0001C8B0 <dynamicarray.include.bb2@285>     If itemX>=*da\useN Then *da\useN = itemX+1
0001C8D2 <dynamicarray.include.bb2@286>     newitemPtr.l = *da\array + itemX * *da\itemSize
0001C8FA <dynamicarray.include.bb2@287>     If itemPtr><-1 AND itemPtr><0
0001C920 <dynamicarray.include.bb2@288>       CopyMem_ itemPtr,newitemPtr,*da\itemSize
0001C92A <dynamicarray.include.bb2@290>     Function Return newitemPtr
0001C936 <dynamicarray.include.bb2@293> Function Return 0
0001C93C <dynamicarray.include.bb2@294> End Function
0001C95E <dynamicarray.include.bb2@335> Function.l FAST da_InsertItem{*da.dynArray,itemX.l,@itemPtr.l}
0001C968 <dynamicarray.include.bb2@336> If *da
0001C98E <dynamicarray.include.bb2@337>   If itemX>=0 AND itemX<*da\useN
0001C9A6 <dynamicarray.include.bb2@338>     If da_Expand{*da.dynArray,*da\useN}
0001C9E4 <dynamicarray.include.bb2@339>       For itemY.l = *da\useN-1 To itemX Step -1
0001CA44 <dynamicarray.include.bb2@340>         CopyMem_ *da\array + (itemY) * *da\itemSize, *da\array + (itemY+1) * *da\itemSize, *da\itemSize
0001CA54 <dynamicarray.include.bb2@341>       Next
0001CA66 <dynamicarray.include.bb2@342>       *da\useN+1
0001CA7E <dynamicarray.include.bb2@345>   Function Return da_SetItem{*da,itemX,itemPtr}
0001CA8A <dynamicarray.include.bb2@347> Function Return 0
0001CA90 <dynamicarray.include.bb2@348> End Function
0001CAAA <dynamicarray.include.bb2@425> Statement da_Free{*da.dynArray}
0001CAB4 <dynamicarray.include.bb2@427> If *da
0001CABE <dynamicarray.include.bb2@428>   da_Clear{*da}
0001CACE <dynamicarray.include.bb2@429>   FreeVec_ *da
0001CAD8 <dynamicarray.include.bb2@430>   ResetList *da_TrackList()
0001CAEA <dynamicarray.include.bb2@431>   While NextItemFast(*da_TrackList())
0001CB00 <dynamicarray.include.bb2@432>     If *da_TrackList()=*da
0001CB0A <dynamicarray.include.bb2@433>       KillItem *da_TrackList()
0001CB10 <dynamicarray.include.bb2@435>   Wend
0001CB14 <dynamicarray.include.bb2@437> End Statement
0001CB2A <dynamicarray.include.bb2@531> Statement da_AutoExit{}
0001CB30 <dynamicarray.include.bb2@533> done.l = False
0001CB3A <dynamicarray.include.bb2@535>   ResetList *da_TrackList()
0001CB70 <dynamicarray.include.bb2@536>   If NextItemFast(*da_TrackList()) Then da_Free{*da_TrackList()} : Else done=-1
0001CB7A <dynamicarray.include.bb2@537> Until done
0001CB7E <dynamicarray.include.bb2@538> End Statement
0001CBAC <dynamicarray.include.bb2@539> !autoexit{da_AutoExit}
0001CBAC <prefixtree.include.bb2@35> 
0001CBC6 <prefixtree.include.bb2@100> Statement pft_Free{*pft.prefixtree}
0001CBD0 <prefixtree.include.bb2@101> If *pft
0001CBF8 <prefixtree.include.bb2@102>   If \dbase Then FreeVec_ \dbase
0001CC1A <prefixtree.include.bb2@103>   If \curPath Then da_Free{\curPath}
0001CC36 <prefixtree.include.bb2@104>   \dbase = #NULL : \dbaseAlloc = 0
0001CC46 <prefixtree.include.bb2@105>   FreeVec_ *pft
0001CC4A <prefixtree.include.bb2@107> End Statement
0001CC64 <prefixtree.include.bb2@123> Function.l pft_Create{@blocksize.l}
0001CC84 <prefixtree.include.bb2@124> *pft.prefixtree = AllocVec_ (SizeOf.prefixtree,#MEMF_CLEAR)
0001CC8E <prefixtree.include.bb2@125> If *pft
0001CCA8 <prefixtree.include.bb2@126>   If blocksize< 1 Then blocksize=1024
0001CCB6 <prefixtree.include.bb2@127>   \dbaseAlloc = 0
0001CCC4 <prefixtree.include.bb2@128>   \dbaseUsed  = 0
0001CCD2 <prefixtree.include.bb2@129>   \dbaseAdd   = 0
0001CCE0 <prefixtree.include.bb2@130>   \dbaseRoot  = 0
0001CCEC <prefixtree.include.bb2@131>   \dbaseBlock = blocksize
0001CCFA <prefixtree.include.bb2@132>   \dbase      = #NULL
0001CD08 <prefixtree.include.bb2@133>   \dbaseRoot  = 0
0001CD16 <prefixtree.include.bb2@134>   \dbaseAdd   = 0
0001CD24 <prefixtree.include.bb2@135>   \dbaseUsed  = 0
0001CD3E <prefixtree.include.bb2@136>   \curPath    = da_Create{SizeOf.prefixpointer,16}
0001CD4C <prefixtree.include.bb2@137>   \curPos     = -1
0001CD5C <prefixtree.include.bb2@138>   \curDepth   = -1
0001CD6C <prefixtree.include.bb2@139>   \foundPos   = -1
0001CD7C <prefixtree.include.bb2@140>   \foundDepth = -1
0001CD8A <prefixtree.include.bb2@141>   \itemN      = 0
0001CD94 <prefixtree.include.bb2@143> Function Return *pft
0001CD9A <prefixtree.include.bb2@144> End Function
0001CDB8 <prefixtree.include.bb2@162> Function.l pft_Expand{*pft.prefixtree,minFree.l}
0001CDBE <prefixtree.include.bb2@163> succ.l = False
0001CDC8 <prefixtree.include.bb2@164> If *pft
0001CDE8 <prefixtree.include.bb2@165>   If (\dbaseAlloc - \dbaseAdd)<minFree
0001CE16 <prefixtree.include.bb2@166>     newsize.l  = \dbaseAlloc + Max(minFree,\dbaseBlock)
0001CE34 <prefixtree.include.bb2@167>     newdbase.l = AllocVec_(newsize ,#MEMF_CLEAR)
0001CE3E <prefixtree.include.bb2@168>     If newdbase
0001CE50 <prefixtree.include.bb2@169>       If \dbase
0001CE7C <prefixtree.include.bb2@170>         CopyMem_ \dbase,newdbase,\dbaseAlloc
0001CE92 <prefixtree.include.bb2@171>         FreeVec_ \dbase
0001CE9E <prefixtree.include.bb2@173>       \dbase      = newdbase
0001CEAA <prefixtree.include.bb2@174>       \dbaseAlloc = newsize
0001CEB0 <prefixtree.include.bb2@175>       succ.l = True
0001CEB6 <prefixtree.include.bb2@176>     Else
0001CEBC <prefixtree.include.bb2@177>       succ = False
0001CEC2 <prefixtree.include.bb2@179>   Else
0001CEC8 <prefixtree.include.bb2@180>     succ = True
0001CED2 <prefixtree.include.bb2@183> Function Return succ
0001CED8 <prefixtree.include.bb2@184> End Function
0001CF0A <prefixtree.include.bb2@204> Function.l pft_Match{*pft.prefixtree,key.s,*pftmatch.pftmatch}
0001CF24 <prefixtree.include.bb2@205> If *pft   = #NULL Then Function Return False
0001CF3C <prefixtree.include.bb2@206> If \dbase = #NULL
0001CF50 <prefixtree.include.bb2@207>   pft_Expand{*pft,\dbaseBlock}
0001CFA0 <prefixtree.include.bb2@208>   If \dbase Then Poke.w \dbase,0 : \dbaseRoot = 0 : \dbaseAdd = 2 : \dbaseUsed = 2
0001CFC0 <prefixtree.include.bb2@210> If \dbase = #NULL Then Function Return False
0001CFD4 <prefixtree.include.bb2@211> klen.l = FLen(key)
0001CFE2 <prefixtree.include.bb2@212> node.l = \dbaseRoot   ;start at the root
0001CFEE <prefixtree.include.bb2@213> preNode.l = -1
0001CFF6 <prefixtree.include.bb2@214> preOff.l  = 0
0001CFFE <prefixtree.include.bb2@215> nodeOff.l = 0
0001D006 <prefixtree.include.bb2@216> lastMatchedKeyPos.l = 0
0001D00E <prefixtree.include.bb2@217> kpos.l = 0
0001D014 <prefixtree.include.bb2@218> break.l = False
0001D022 <prefixtree.include.bb2@219> *pftmatch\state = #PFT_ADD
0001D044 <prefixtree.include.bb2@221> While kpos<klen AND break=False
0001D070 <prefixtree.include.bb2@222>   tlen.l = Peek.b(\dbase+ node+nodeOff) & $FF
0001D082 <prefixtree.include.bb2@224>   If tlen>0
0001D088 <prefixtree.include.bb2@225>     succ.l=True
0001D0B0 <prefixtree.include.bb2@227>     For n.l=1 To tlen
0001D0D4 <prefixtree.include.bb2@228>       kc.b = Peek.b(&key+kpos+n-1)
0001D0FC <prefixtree.include.bb2@229>       tc.b = Peek.b(\dbase+ node+nodeOff+n)
0001D130 <prefixtree.include.bb2@230>       If kc><tc Then succ=False : n=tlen : Else *pftmatch\state = #PFT_SPLIT
0001D140 <prefixtree.include.bb2@231>     Next
0001D14A <prefixtree.include.bb2@232>     If succ ; yes!
0001D158 <prefixtree.include.bb2@233>       kpos + tlen
0001D16C <prefixtree.include.bb2@234>       preOff.l = nodeOff+tlen+1
0001D172 <prefixtree.include.bb2@235>       preNode.l = node
0001D192 <prefixtree.include.bb2@236>       jump.l = Peek.l(\dbase+ preNode+preOff)
0001D198 <prefixtree.include.bb2@237>       node = jump
0001D1A0 <prefixtree.include.bb2@239>       nodeOff = 0
0001D1DA <prefixtree.include.bb2@241>         tlen.l = Peek.b(\dbase+ node+nodeOff) & $FF : nodeOff+1
0001D200 <prefixtree.include.bb2@242>         If tlen>0 Then nodeOff + (tlen + 4)
0001D218 <prefixtree.include.bb2@243>       Until tlen = 0
0001D24C <prefixtree.include.bb2@244>       If Peek.b(\dbase+ node+nodeOff)><0 Then lastMatchedKeyPos = kpos
0001D254 <prefixtree.include.bb2@245>       nodeOff = 0
0001D262 <prefixtree.include.bb2@247>       *pftmatch\state = #PFT_ADD
0001D268 <prefixtree.include.bb2@249>     Else   ; ehm, no, check the next one
0001D280 <prefixtree.include.bb2@250>       If *pftmatch\state = #PFT_SPLIT
0001D286 <prefixtree.include.bb2@251>         break = True
0001D28C <prefixtree.include.bb2@252>       Else
0001D2A6 <prefixtree.include.bb2@253>         nodeOff + 1 + tlen + 4
0001D2AC <prefixtree.include.bb2@256>   Else
0001D2B2 <prefixtree.include.bb2@258>     break = True
0001D2B8 <prefixtree.include.bb2@260> Wend
0001D2C6 <prefixtree.include.bb2@261> If kpos=klen
0001D2D4 <prefixtree.include.bb2@262>   *pftmatch\state = #PFT_FOUND
0001D30E <prefixtree.include.bb2@264>     tlen.l = Peek.b(\dbase+ node+nodeOff) & $FF : nodeOff+1
0001D334 <prefixtree.include.bb2@265>     If tlen>0 Then nodeOff + (tlen + 4)
0001D34C <prefixtree.include.bb2@266>   Until tlen = 0
0001D358 <prefixtree.include.bb2@269> *pftmatch\preNode = preNode
0001D364 <prefixtree.include.bb2@270> *pftmatch\preOff  = preOff
0001D370 <prefixtree.include.bb2@271> *pftmatch\kpos    = kpos
0001D37C <prefixtree.include.bb2@272> *pftmatch\node    = node
0001D388 <prefixtree.include.bb2@273> *pftmatch\nodeOff = nodeOff
0001D392 <prefixtree.include.bb2@274> *pftmatch\lastMatchedKeyPos = lastMatchedKeyPos
0001D39A <prefixtree.include.bb2@276> Function Return True
0001D3B4 <prefixtree.include.bb2@277> End Function
0001D3F2 <prefixtree.include.bb2@324> Function.l pft_AddItem{*pft.prefixtree,key.s,string.s}
0001D3F8 <prefixtree.include.bb2@325> succ.l = False
0001D438 <prefixtree.include.bb2@326> If pft_Match{*pft,key,pftmatch.pftmatch}
0001D48E <prefixtree.include.bb2@327>   prefix.s  = Left$(key,pftmatch\kpos)
0001D500 <prefixtree.include.bb2@328>   postfix.s = Right$(key,FLen(key)-pftmatch\kpos)
0001D50C <prefixtree.include.bb2@330>   Select pftmatch\state
0001D51A <prefixtree.include.bb2@331>     Case #PFT_FOUND
0001D560 <prefixtree.include.bb2@332>       oldstring.s = Peek.s(\dbase+pftmatch\node+pftmatch\nodeOff)
0001D5AA <prefixtree.include.bb2@333>       \dbaseUsed + FLen(string) - FLen(oldstring)
0001D5E2 <prefixtree.include.bb2@334>       If FLen(oldstring)>=FLen(string)
0001D636 <prefixtree.include.bb2@335>         Poke.s \dbase+ pftmatch\node+pftmatch\nodeOff,string
0001D63C <prefixtree.include.bb2@336>         succ.l = True
0001D642 <prefixtree.include.bb2@337>       Else
0001D650 <prefixtree.include.bb2@339>         node.l = pftmatch\node
0001D658 <prefixtree.include.bb2@340>         nodeOff.l = 0
0001D692 <prefixtree.include.bb2@342>           tlen.l = Peek.b(\dbase+ node+nodeOff) & $FF : nodeOff+1
0001D6B8 <prefixtree.include.bb2@343>           If tlen>0 Then nodeOff + (tlen + 4)
0001D6D0 <prefixtree.include.bb2@344>         Until tlen = 0
0001D706 <prefixtree.include.bb2@345>         expNodeSize.l = nodeOff-1 + 1 + FLen(string) + 1
0001D71C <prefixtree.include.bb2@346>         If pft_Expand{*pft,expNodeSize}
0001D72A <prefixtree.include.bb2@348>           expNode.l = \dbaseAdd
0001D742 <prefixtree.include.bb2@349>           \dbaseAdd + expNodeSize
0001D77A <prefixtree.include.bb2@350>           CopyMem_ \dbase+ node,\dbase+ expNode,nodeOff
0001D7A0 <prefixtree.include.bb2@351>           Poke.b \dbase+ expNode+nodeOff-1,0
0001D7E8 <prefixtree.include.bb2@352>           Poke.s \dbase+ expNode+nodeOff,string
0001D7EE <prefixtree.include.bb2@353>           succ.l = True
0001D808 <prefixtree.include.bb2@355>           If pftmatch\preNode=-1
0001D814 <prefixtree.include.bb2@356>             \dbaseRoot = expNode
0001D81A <prefixtree.include.bb2@357>           Else
0001D846 <prefixtree.include.bb2@358>             Poke.l \dbase + pftmatch\preNode + pftmatch\preOff,expNode
0001D85A <prefixtree.include.bb2@363>     Case #PFT_ADD
0001D868 <prefixtree.include.bb2@365>       node.l = pftmatch\node
0001D870 <prefixtree.include.bb2@366>       nodeOff.l = 0
0001D8AA <prefixtree.include.bb2@368>         tlen.l = Peek.b(\dbase+ node+nodeOff) & $FF : nodeOff+1
0001D8D0 <prefixtree.include.bb2@369>         If tlen>0 Then nodeOff + (tlen + 4)
0001D8E8 <prefixtree.include.bb2@370>       Until tlen = 0
0001D922 <prefixtree.include.bb2@371>       nodeString.s = Peek.s(\dbase+ node+nodeOff)
0001D94C <prefixtree.include.bb2@372>       expNodeSize.l = nodeOff + FLen(nodeString) + 1
0001D964 <prefixtree.include.bb2@373>       \dbaseUsed - expNodeSize
0001D994 <prefixtree.include.bb2@374>       expNodeSize + FLen(postfix.s) + 1 + 4
0001D9C0 <prefixtree.include.bb2@375>       newNodeSize.l = 1 + FLen(string) + 1
0001D9DC <prefixtree.include.bb2@376>       If pft_Expand{*pft,newNodeSize+expNodeSize}
0001D9EA <prefixtree.include.bb2@378>         expNode.l = \dbaseAdd
0001D9F8 <prefixtree.include.bb2@379>         newNode.l = expNode + expNodeSize
0001DA36 <prefixtree.include.bb2@380>         CopyMem_ \dbase+ node,\dbase+ expNode,nodeOff-1
0001DA72 <prefixtree.include.bb2@381>         Poke.b \dbase+ expNode+nodeOff-1,FLen(postfix)
0001DADE <prefixtree.include.bb2@382>         Poke.s \dbase+ expNode+nodeOff,postfix : nodeOff + FLen(postfix)
0001DB0C <prefixtree.include.bb2@383>         Poke.l \dbase+ expNode+nodeOff,newNode : nodeOff+4
0001DB3A <prefixtree.include.bb2@384>         Poke.b \dbase+ expNode+nodeOff,0       : nodeOff+1
0001DB82 <prefixtree.include.bb2@385>         Poke.s \dbase+ expNode+nodeOff,nodeString
0001DB9C <prefixtree.include.bb2@388>         Poke.b \dbase+ newNode,0
0001DBE4 <prefixtree.include.bb2@389>         Poke.s \dbase+ newNode+1,string.s
0001DC02 <prefixtree.include.bb2@390>         \dbaseAdd  + expNodeSize + newNodeSize
0001DC20 <prefixtree.include.bb2@391>         \dbaseUsed + expNodeSize + newNodeSize
0001DC3A <prefixtree.include.bb2@394>         If pftmatch\preNode=-1
0001DC46 <prefixtree.include.bb2@395>           \dbaseRoot = expNode
0001DC4C <prefixtree.include.bb2@396>         Else
0001DC78 <prefixtree.include.bb2@397>           Poke.l \dbase + pftmatch\preNode + pftmatch\preOff,expNode
0001DC90 <prefixtree.include.bb2@399>         \itemN + 1
0001DC96 <prefixtree.include.bb2@400>         succ.l = True
0001DCAA <prefixtree.include.bb2@403>     Case #PFT_SPLIT
0001DCB8 <prefixtree.include.bb2@405>       node.l    = pftmatch\node
0001DCC6 <prefixtree.include.bb2@406>       nodeOff.l = pftmatch\nodeOff
0001DCD4 <prefixtree.include.bb2@407>       kpos.l    = pftmatch\kpos
0001DCDC <prefixtree.include.bb2@408>       spos.l    = 0
0001DD00 <prefixtree.include.bb2@409>       rulelen.l = Peek.b(\dbase+node+nodeOff)
0001DD28 <prefixtree.include.bb2@410>       rule.s    = ""
0001DD50 <prefixtree.include.bb2@411>       For n.l=1 To rulelen
0001DDBC <prefixtree.include.bb2@412>         rule.s + Chr$(Peek.b(\dbase+node+nodeOff+n))
0001DDCC <prefixtree.include.bb2@413>       Next
0001DDF8 <prefixtree.include.bb2@414>       nextNode.l = Peek.l(\dbase+node+nodeOff+rulelen+1)
0001DE4E <prefixtree.include.bb2@416>       While Peek.b(&key+kpos)=Peek.b(\dbase+node+nodeOff+spos+1)
0001DE5C <prefixtree.include.bb2@417>         spos + 1
0001DE6A <prefixtree.include.bb2@418>         kpos + 1
0001DE70 <prefixtree.include.bb2@419>       Wend
0001DEB8 <prefixtree.include.bb2@421>       If spos=0 Then error {"SPlitpos at pos 0 !"}      : spos = 1
0001DEFC <prefixtree.include.bb2@422>       If spos>=rulelen Then error {"SPlitpos at the end!"} : spos = 1
0001DF4C <prefixtree.include.bb2@425>       ruleStem.s = Left$(postfix,spos)
0001DFA2 <prefixtree.include.bb2@426>       oldRule.s  = Right$(rule,rulelen-spos)
0001E00E <prefixtree.include.bb2@427>       newRule.s  = Right$(postfix,FLen(postfix)-spos)
0001E016 <prefixtree.include.bb2@431>       nodeOff.l = 0
0001E050 <prefixtree.include.bb2@433>         tlen.l = Peek.b(\dbase+node+nodeOff) & $FF : nodeOff+1
0001E076 <prefixtree.include.bb2@434>         If tlen>0 Then nodeOff + (tlen + 4)
0001E08E <prefixtree.include.bb2@435>       Until tlen = 0
0001E0C8 <prefixtree.include.bb2@436>       nodeString.s = Peek.s(\dbase+node+nodeOff)
0001E0F2 <prefixtree.include.bb2@437>       expNodeSize.l = nodeOff + FLen(nodeString) + 1
0001E10A <prefixtree.include.bb2@438>       \dbaseUsed - expNodeSize
0001E12E <prefixtree.include.bb2@440>       If FLen(newRule)=0
0001E182 <prefixtree.include.bb2@441>         midNodeSize.l = (1+FLen(oldRule)+4) + 1 + (FLen(string)+1)
0001E18A <prefixtree.include.bb2@442>         newNodeSize.l = 0
0001E190 <prefixtree.include.bb2@443>       Else
0001E1F2 <prefixtree.include.bb2@444>         midNodeSize = (1+FLen(oldRule)+4) + (1+FLen(newRule)+4) + 1 + (1)
0001E21E <prefixtree.include.bb2@445>         newNodeSize = 1 + (FLen(string)+1)
0001E23A <prefixtree.include.bb2@448>       If pft_Expand{*pft,newNodeSize+midNodeSize}
0001E248 <prefixtree.include.bb2@450>         midNode.l = \dbaseAdd
0001E256 <prefixtree.include.bb2@451>         newNode.l = midNode + midNodeSize
0001E264 <prefixtree.include.bb2@453>         node.l    = pftmatch\node
0001E272 <prefixtree.include.bb2@454>         nodeOff = pftmatch\nodeOff
0001E2B6 <prefixtree.include.bb2@455>         Poke.b \dbase+node+nodeOff,FLen(ruleStem) : nodeOff + 1
0001E322 <prefixtree.include.bb2@456>         Poke.s \dbase+node+nodeOff,ruleStem       : nodeOff + FLen(ruleStem)
0001E350 <prefixtree.include.bb2@457>         Poke.l \dbase+node+nodeOff,midNode        : nodeOff + 4
0001E364 <prefixtree.include.bb2@458>         offset.l = FLen(oldRule)
0001E396 <prefixtree.include.bb2@459>         For n.l=nodeOff To expNodeSize-1-offset
0001E3E0 <prefixtree.include.bb2@460>           Poke.b \dbase+node+n,Peek.b(\dbase+node+n+offset)
0001E3F0 <prefixtree.include.bb2@461>         Next
0001E424 <prefixtree.include.bb2@462>         For n.l = expNodeSize-offset To expNodeSize-1
0001E446 <prefixtree.include.bb2@463>           Poke.b \dbase+node+n,@"#"
0001E456 <prefixtree.include.bb2@464>         Next
0001E45E <prefixtree.include.bb2@467>         nodeOff = 0
0001E4A2 <prefixtree.include.bb2@468>         Poke.b \dbase+ midNode+nodeOff,FLen(oldRule) : nodeOff + 1
0001E50E <prefixtree.include.bb2@469>         Poke.s \dbase+ midNode+nodeOff,oldRule       : nodeOff + FLen(oldRule)
0001E53C <prefixtree.include.bb2@470>         Poke.l \dbase+ midNode+nodeOff,nextNode      : nodeOff + 4
0001E560 <prefixtree.include.bb2@472>         If FLen(newRule)>0
0001E5A4 <prefixtree.include.bb2@473>           Poke.b \dbase+ midNode+nodeOff,FLen(newRule) : nodeOff + 1
0001E610 <prefixtree.include.bb2@474>           Poke.s \dbase+ midNode+nodeOff,newRule       : nodeOff + FLen(newRule)
0001E63E <prefixtree.include.bb2@475>           Poke.l \dbase+ midNode+nodeOff,newNode       : nodeOff + 4
0001E66C <prefixtree.include.bb2@476>           Poke.b \dbase+ midNode+nodeOff,0             : nodeOff + 1
0001E674 <prefixtree.include.bb2@477>           nodeOff = 0
0001E6A2 <prefixtree.include.bb2@478>           Poke.b \dbase+ newNode+nodeOff,0             : nodeOff + 1
0001E714 <prefixtree.include.bb2@479>           Poke.s \dbase+ newNode+nodeOff,string        : nodeOff + FLen(string) + 1
0001E71A <prefixtree.include.bb2@480>         Else
0001E748 <prefixtree.include.bb2@481>           Poke.b \dbase+ midNode+nodeOff,0             : nodeOff+1
0001E7BA <prefixtree.include.bb2@482>           Poke.s \dbase+ midNode+nodeOff,string        : nodeOff + FLen(string) + 1
0001E7D8 <prefixtree.include.bb2@485>         \dbaseAdd  + newNodeSize + midNodeSize
0001E7FC <prefixtree.include.bb2@486>         \dbaseUsed + expNodeSize + newNodeSize + midNodeSize
0001E814 <prefixtree.include.bb2@487>         \itemN + 1
0001E81A <prefixtree.include.bb2@488>         succ.l = True
0001E820 <prefixtree.include.bb2@491>     Default
0001E822 <prefixtree.include.bb2@493>   End Select
0001E82C <prefixtree.include.bb2@496> Function Return succ
0001E858 <prefixtree.include.bb2@497> End Function
0001E87A <prefixtree.include.bb2@515> Function.l pft_Rethink{*pftS.prefixtree,*pftD.prefixtree,node.l}
0001E882 <prefixtree.include.bb2@516> NodeOff.l = 0
0001E888 <prefixtree.include.bb2@517> oldNode.l    = node
0001E896 <prefixtree.include.bb2@518> newNode.l    = *pftD\dbaseAdd
0001E8D0 <prefixtree.include.bb2@520>   tlen.l = Peek.b(*pftS\dbase+oldNode+NodeOff) & $FF : NodeOff+1
0001E8F6 <prefixtree.include.bb2@521>   If tlen>0 Then NodeOff + (tlen + 4)
0001E90E <prefixtree.include.bb2@522> Until tlen = 0
0001E948 <prefixtree.include.bb2@523> NodeString.s = Peek.s(*pftS\dbase+oldNode+NodeOff)
0001E972 <prefixtree.include.bb2@524> NodeSize.l   = NodeOff + FLen(NodeString) + 1
0001E98A <prefixtree.include.bb2@526> *pftD\dbaseAdd  + NodeSize
0001E9A2 <prefixtree.include.bb2@527> *pftD\dbaseUsed + NodeSize
0001E9DA <prefixtree.include.bb2@528> CopyMem_ *pftS\dbase + oldNode, *pftD\dbase + newNode,NodeSize
0001E9E2 <prefixtree.include.bb2@530> NodeOff.l = 0
0001EA1C <prefixtree.include.bb2@532>   tlen.l = Peek.b(*pftS\dbase+oldNode+NodeOff) & $FF : NodeOff+1
0001EA2E <prefixtree.include.bb2@534>   If tlen>0
0001EA54 <prefixtree.include.bb2@535>     oldJump.l = Peek.l(*pftS\dbase+oldNode+NodeOff+tlen)
0001EA6A <prefixtree.include.bb2@536>     newJump.l = pft_Rethink{*pftS,*pftD,oldJump}
0001EA90 <prefixtree.include.bb2@537>     Poke.l *pftD\dbase+newNode+NodeOff+tlen,newJump
0001EAA4 <prefixtree.include.bb2@538>     NodeOff + (tlen + 4)
0001EABC <prefixtree.include.bb2@540> Until tlen = 0
0001EACE <prefixtree.include.bb2@541> *pftD\itemN = *pftS\itemN
0001EAD8 <prefixtree.include.bb2@542> Function Return newNode
0001EAEC <prefixtree.include.bb2@543> End Function
0001EB06 <prefixtree.include.bb2@560> Function.l pft_Optimize{*pft.prefixtree}
0001EB24 <prefixtree.include.bb2@561> If *pft=#NULL Then Function Return #NULL
0001EB36 <prefixtree.include.bb2@562> *pftT.prefixtree = pft_Create{}
0001EB54 <prefixtree.include.bb2@563> If *pftT=#NULL Then Function Return #NULL
0001EB76 <prefixtree.include.bb2@564> If *pft\dbase=#NULL Then Function Return *pftT
0001EB92 <prefixtree.include.bb2@565> If pft_Expand{*pftT,*pft\dbaseUsed}
0001EBB2 <prefixtree.include.bb2@566>   *pftT\dbaseRoot = pft_Rethink{*pft,*pftT,*pft\dbaseRoot}
0001EBBC <prefixtree.include.bb2@567>   Function Return *pftT
0001EBC2 <prefixtree.include.bb2@568> Else
0001EBCC <prefixtree.include.bb2@569>   pft_Free{*pftT}
0001EBD8 <prefixtree.include.bb2@571> Function Return #NULL
0001EBDE <prefixtree.include.bb2@572> End Function
0001EC0C <prefixtree.include.bb2@591> Function.s pft_FindItem{*pft.prefixtree,key.s}
0001EC34 <prefixtree.include.bb2@592> string.s = ""
0001EC74 <prefixtree.include.bb2@593> If pft_Match{*pft,key,pftmatch.pftmatch}
0001EC8C <prefixtree.include.bb2@594>   If pftmatch\state = #PFT_FOUND
0001ECD2 <prefixtree.include.bb2@595>     string.s = Peek.s(\dbase+pftmatch\node+pftmatch\nodeOff)
0001ECFC <prefixtree.include.bb2@598> Function Return string.s
0001ED2A <prefixtree.include.bb2@599> End Function
0001ED44 <prefixtree.include.bb2@613> Statement pft_Reset{*pft.prefixtree}
0001ED52 <prefixtree.include.bb2@614> *pft\curPos   = -1
0001ED62 <prefixtree.include.bb2@615> *pft\curDepth = -1
0001ED72 <prefixtree.include.bb2@616> *pft\foundPos   = -1
0001ED82 <prefixtree.include.bb2@617> *pft\foundDepth = -1
0001ED92 <prefixtree.include.bb2@618> da_Unuse{*pft\curPath}
0001ED96 <prefixtree.include.bb2@619> End Statement
0001EDB0 <prefixtree.include.bb2@636> Function.l pft_GetNextItem{*pft.prefixtree}
0001EDB6 <prefixtree.include.bb2@637> succ.l = False
0001EDC6 <prefixtree.include.bb2@638> *pft\foundPos   = -1
0001EDD6 <prefixtree.include.bb2@639> *pft\foundDepth = -1
0001EE04 <prefixtree.include.bb2@641> If *pft\curPos<0 OR *pft\curDepth<0
0001EE24 <prefixtree.include.bb2@642>   *pp.prefixpointer = da_SetItem{*pft\curPath,0}
0001EE4C <prefixtree.include.bb2@643>   If *pp Then *pp\offset = *pft\dbaseRoot : *pp\key = #NULL
0001EE5A <prefixtree.include.bb2@644>   *pft\curDepth = 0
0001EE66 <prefixtree.include.bb2@645>   *pft\curPos   = 0
0001EE70 <prefixtree.include.bb2@648>       offset.l = *pp\offset
0001EE90 <prefixtree.include.bb2@649>       While Peek.b(*pft\dbase+offset)
0001EEB6 <prefixtree.include.bb2@650>         keylen.l = Peek.b(*pft\dbase+offset) & $FF
0001EED0 <prefixtree.include.bb2@651>         offset + 1 + keylen + 4
0001EED6 <prefixtree.include.bb2@652>       Wend
0001EEE4 <prefixtree.include.bb2@653>       offset+1
0001EF04 <prefixtree.include.bb2@654>       If Peek.b(*pft\dbase+offset)
0001EF10 <prefixtree.include.bb2@655>         *pft\foundPos   = offset
0001EF22 <prefixtree.include.bb2@656>         *pft\foundDepth = *pft\curDepth
0001EF28 <prefixtree.include.bb2@657>         succ=True
0001EF3A <prefixtree.include.bb2@658>         *pft\curPos + 1
0001EF40 <prefixtree.include.bb2@661> Else
0001EF6A <prefixtree.include.bb2@662>   If *pft\curPos>=*pft\dbaseUsed Then pft_Reset{*pft} : Function Return False
0001EF88 <prefixtree.include.bb2@665> *pp.prefixpointer = da_GetItem{*pft\curPath,*pft\curDepth}
0001EF90 <prefixtree.include.bb2@666> *npp.prefixpointer = #NULL
0001EFA4 <prefixtree.include.bb2@668> While succ=False
0001EFCC <prefixtree.include.bb2@669>   keylen.l    = Peek.b(*pft\dbase+*pp\offset) & $FF
0001EFDE <prefixtree.include.bb2@670>   If keylen>0 ;/* we got a link ... */
0001F006 <prefixtree.include.bb2@671>     key.s = ""
0001F02E <prefixtree.include.bb2@672>     For n.l=1 To keylen
0001F096 <prefixtree.include.bb2@673>       key.s + Chr$(Peek.b(*pft\dbase+*pp\offset+n))
0001F0A6 <prefixtree.include.bb2@674>     Next
0001F0CE <prefixtree.include.bb2@675>     jump.l = Peek.l(*pft\dbase+*pp\offset+keylen+1)
0001F0EC <prefixtree.include.bb2@676>     *pp\offset + 1 + keylen + 4
0001F116 <prefixtree.include.bb2@677>     *npp = da_SetItem{*pft\curPath,*pft\curDepth+1}
0001F120 <prefixtree.include.bb2@678>     If *npp
0001F138 <prefixtree.include.bb2@679>       *pft\curDepth + 1
0001F142 <prefixtree.include.bb2@680>       *npp\offset = jump
0001F17A <prefixtree.include.bb2@681>       str_Write{&*npp\key,key.s}
0001F180 <prefixtree.include.bb2@682>       *pp = *npp
0001F18A <prefixtree.include.bb2@685>       offset.l = *pp\offset
0001F1AA <prefixtree.include.bb2@686>       While Peek.b(*pft\dbase+offset)
0001F1D0 <prefixtree.include.bb2@687>         keylen.l = Peek.b(*pft\dbase+offset) & $FF
0001F1EA <prefixtree.include.bb2@688>         offset + 1 + keylen + 4
0001F1F0 <prefixtree.include.bb2@689>       Wend
0001F1FE <prefixtree.include.bb2@690>       offset+1
0001F21E <prefixtree.include.bb2@691>       If Peek.b(*pft\dbase+offset)
0001F22A <prefixtree.include.bb2@692>         *pft\foundPos   = offset
0001F23C <prefixtree.include.bb2@693>         *pft\foundDepth = *pft\curDepth
0001F242 <prefixtree.include.bb2@694>         succ=True
0001F254 <prefixtree.include.bb2@695>         *pft\curPos + 1
0001F25A <prefixtree.include.bb2@698>   Else  ;/* no more links, we have to go back */
0001F272 <prefixtree.include.bb2@699>     *pft\curDepth-1
0001F2B6 <prefixtree.include.bb2@700>     If *pft\curDepth>=0 Then *pp = da_GetItem{*pft\curPath,*pft\curDepth} : Else Function Return False
0001F2BC <prefixtree.include.bb2@702> Wend
0001F2C6 <prefixtree.include.bb2@703> Function Return succ
0001F2DA <prefixtree.include.bb2@704> End Function
0001F2F4 <prefixtree.include.bb2@743> Function.s pft_GetKey{*pft.prefixtree}
0001F31C <prefixtree.include.bb2@744> key.s = ""
0001F34A <prefixtree.include.bb2@745> For d.l=0 To *pft\foundDepth
0001F362 <prefixtree.include.bb2@746>   *pp.prefixpointer = da_GetItem{*pft\curPath,d}
0001F3C4 <prefixtree.include.bb2@747>   key.s + str_Read{&*pp\key}
0001F3D4 <prefixtree.include.bb2@748> Next
0001F3FE <prefixtree.include.bb2@749> Function Return key.s
0001F416 <prefixtree.include.bb2@750> End Function
0001F430 <prefixtree.include.bb2@767> Function.s pft_GetString{*pft.prefixtree}
0001F458 <prefixtree.include.bb2@768> value.s = ""
0001F470 <prefixtree.include.bb2@769> If *pft\foundPos>=0
0001F4AA <prefixtree.include.bb2@770>   value.s = Peek.s(*pft\dbase+*pft\foundPos)
0001F4D4 <prefixtree.include.bb2@772> Function Return value.s
0001F4EC <prefixtree.include.bb2@773> End Function
0001F506 <prefixtree.include.bb2@815> Function.l pft_Read{fid.l}
0001F50E <prefixtree.include.bb2@816> *pft.prefixtree = #NULL
0001F526 <prefixtree.include.bb2@817> If file_ReadTag{fid} = @"PFTR"
0001F530 <prefixtree.include.bb2@818>   bsize.l = file_GetTagValue{}
0001F542 <prefixtree.include.bb2@819>   *pft.prefixtree = pft_Create{}
0001F57A <prefixtree.include.bb2@820>   While bsize>0 AND file_EOF{fid}=False
0001F588 <prefixtree.include.bb2@821>     bsize-8
0001F594 <prefixtree.include.bb2@822>     Select file_ReadTag{fid}
0001F5B0 <prefixtree.include.bb2@823>       Case @"USED" : *pft\dbaseUsed  = file_GetTagValue{}
0001F5D2 <prefixtree.include.bb2@824>       Case @"ROOT" : *pft\dbaseRoot  = file_GetTagValue{}
0001F5F4 <prefixtree.include.bb2@825>       Case @"BLOK" : *pft\dbaseBlock = file_GetTagValue{}
0001F616 <prefixtree.include.bb2@826>       Case @"ITEM" : *pft\itemN      = file_GetTagValue{}
0001F638 <prefixtree.include.bb2@827>       Case @"DATA" : *pft\dbaseAdd   = file_GetTagValue{}
0001F654 <prefixtree.include.bb2@828>         If pft_Expand{*pft,*pft\dbaseAdd }
0001F672 <prefixtree.include.bb2@829>           file_ReadMem{fid,*pft\dbase,*pft\dbaseAdd }
0001F686 <prefixtree.include.bb2@830>           bsize - *pft\dbaseAdd
0001F68C <prefixtree.include.bb2@832>       Default
0001F68E <prefixtree.include.bb2@834>     End Select
0001F694 <prefixtree.include.bb2@835>   Wend
0001F69E <prefixtree.include.bb2@837> Function Return *pft
0001F6A4 <prefixtree.include.bb2@838> End Function
0001F6C2 <prefixtree.include.bb2@856> Function.l pft_Write{*pft.prefixtree,fid.l}
0001F6C8 <prefixtree.include.bb2@857> succ.l = False
0001F6EC <prefixtree.include.bb2@858> If file_WriteChunk{fid,@"PFTR"}
0001F70A <prefixtree.include.bb2@859>   succ = file_WriteTag{fid,@"USED",\dbaseUsed}
0001F738 <prefixtree.include.bb2@860>   succ & file_WriteTag{fid,@"ROOT",\dbaseRoot}
0001F766 <prefixtree.include.bb2@861>   succ & file_WriteTag{fid,@"BLOK",\dbaseBlock}
0001F794 <prefixtree.include.bb2@862>   succ & file_WriteTag{fid,@"ITEM",\itemN}
0001F7C2 <prefixtree.include.bb2@863>   succ & file_WriteTag{fid,@"DATA",\dbaseAdd}
0001F7F6 <prefixtree.include.bb2@864>   succ & file_WriteMem{fid,\dbase,\dbaseAdd}
0001F806 <prefixtree.include.bb2@865>   file_CloseChunk{fid,@"PFTR"}
0001F810 <prefixtree.include.bb2@867> Function Return succ
0001F816 <prefixtree.include.bb2@868> End Function
0001F816 <phrasebook.include.bb2@34> 
0001F860 <phrasebook.include.bb2@58> Function.l pb_Create{appName.s,langName.s,langNameE.s}
0001F880 <phrasebook.include.bb2@59> *pb.phrasebook = AllocVec_(SizeOf.phrasebook,#MEMF_ANY)
0001F88A <phrasebook.include.bb2@60> If *pb
0001F89E <phrasebook.include.bb2@61>   *pb\pft         = pft_Create{}
0001F8E4 <phrasebook.include.bb2@62>   *pb\appName     = #NULL : str_Write{&*pb\appName,appName}
0001F92A <phrasebook.include.bb2@63>   *pb\langName    = #NULL : str_Write{&*pb\langName,langName}
0001F970 <phrasebook.include.bb2@64>   *pb\langNameE   = #NULL : str_Write{&*pb\langNameE,langNameE}
0001F97A <phrasebook.include.bb2@66> Function Return *pb
0001F996 <phrasebook.include.bb2@67> End Function
0001F9C0 <phrasebook.include.bb2@70> Function.s _pb_Normalize{text.s}
0001FA3E <phrasebook.include.bb2@71>   text = Replace$(text,"."," . ")
0001FABC <phrasebook.include.bb2@72>   text = Replace$(text,","," , ")
0001FB3A <phrasebook.include.bb2@73>   text = Replace$(text,":"," : ")
0001FBB8 <phrasebook.include.bb2@74>   text = Replace$(text,"!"," ! ")
0001FC36 <phrasebook.include.bb2@75>   text = Replace$(text,"-"," - ")
0001FCB4 <phrasebook.include.bb2@76>   text = Replace$(text,"+"," + ")
0001FD32 <phrasebook.include.bb2@77>   text = Replace$(text,"?"," ? ")
0001FDB0 <phrasebook.include.bb2@78>   text = Replace$(text,"&"," & ")
0001FE2E <phrasebook.include.bb2@79>   text = Replace$(text,"|"," | ")
0001FEAC <phrasebook.include.bb2@80>   text = Replace$(text,"\n"," \n ")
0001FF30 <phrasebook.include.bb2@81>   text = Replace$(text,Chr$(10)," \n ")
0001FF60 <phrasebook.include.bb2@82>   search.s = "" : wc.l = 0
0001FFBC <phrasebook.include.bb2@84>     tmp.s = lindex{text,wc}
0001FFE8 <phrasebook.include.bb2@85>     If tmp
000200B2 <phrasebook.include.bb2@86>       If search Then search = search + " " + tmp : Else search = tmp
000200C0 <phrasebook.include.bb2@88>     wc+1
000200FE <phrasebook.include.bb2@89>   Until tmp=""
00020182 <phrasebook.include.bb2@90>   search = Replace$(search," \n ",Chr$(10))
000201AC <phrasebook.include.bb2@91>   Function Return search
000201CA <phrasebook.include.bb2@92> End Function
000201E4 <phrasebook.include.bb2@106> Statement pb_Free{*pb.phrasebook}
000201EE <phrasebook.include.bb2@107> If *pb
000201FA <phrasebook.include.bb2@108>   pft_Free{*pb\pft}
0002020A <phrasebook.include.bb2@109>   str_Free{&*pb\appName}
0002021A <phrasebook.include.bb2@110>   str_Free{&*pb\langName}
0002022A <phrasebook.include.bb2@111>   str_Free{&*pb\langNameE}
0002023A <phrasebook.include.bb2@112>   FreeVec_ *pb
0002023E <phrasebook.include.bb2@114> End Statement
0002027C <phrasebook.include.bb2@131> Statement pb_AddPhrase {*pb.phrasebook,template.s,native.s}
000202D4 <phrasebook.include.bb2@132> template.s = _pb_Normalize{template}
00020330 <phrasebook.include.bb2@133> pft_AddItem{*pb\pft,template,native}
000203BA <phrasebook.include.bb2@134> If pft_FindItem{*pb\pft,LCase$(template)}=""
00020438 <phrasebook.include.bb2@135>   pft_AddItem{*pb\pft,LCase$(template),native}
00020452 <phrasebook.include.bb2@137> End Statement
00020480 <phrasebook.include.bb2@155> Function.s _pb_LookUp{*pb.phrasebook,text.s}
000204BC <phrasebook.include.bb2@156>   If *pb=#NULL Then Function Return text
0002058A <phrasebook.include.bb2@158>   While (Left$(text,1) =" ") : text=Right$(text,FLen(text)-1) : Wend
00020658 <phrasebook.include.bb2@159>   While (Right$(text,1)=" ") : text=Left$ (text,FLen(text)-1) : Wend
000206A4 <phrasebook.include.bb2@161>   textL.s = LCase$(text)
00020722 <phrasebook.include.bb2@162>   textL.s = Replace$(textL,"'","")
000207A0 <phrasebook.include.bb2@163>   textL.s = Replace$(textL,"\\22","")
000207FE <phrasebook.include.bb2@165>   trans.s = pft_FindItem{*pb\pft,text}
0002089A <phrasebook.include.bb2@166>   If trans="" Then trans = pft_FindItem{*pb\pft,textL}
000208D2 <phrasebook.include.bb2@168>   If trans=""
00020930 <phrasebook.include.bb2@169>     first.s = lindex{text,0}                          ; split up first word
000209B8 <phrasebook.include.bb2@170>     tail.s  = Right$(text,FLen(text)-FLen(first)-1)   ; ... from tail
000209C0 <phrasebook.include.bb2@172>     i.l = 0
00020A2A <phrasebook.include.bb2@174>       tmp.s = lindex{text,i} : i+1
00020A9C <phrasebook.include.bb2@175>       If tmp><"" Then last.s=tmp
00020ADA <phrasebook.include.bb2@176>     Until tmp=""
00020B62 <phrasebook.include.bb2@177>     head.s = Left$(text,FLen(text)-FLen(last)-1)
00020B8E <phrasebook.include.bb2@187>     If head
00020BEA <phrasebook.include.bb2@188>       ttrans.s = _pb_LookUp{*pb,head}
00020CB8 <phrasebook.include.bb2@189>       ltrans.s = _pb_LookUp{*pb,last} : If ltrans="" Then ltrans=last
00020D1C <phrasebook.include.bb2@190>       trans = ttrans + " " + ltrans
00020D22 <phrasebook.include.bb2@191>     Else
00020D56 <phrasebook.include.bb2@192>       trans = last
00020E24 <phrasebook.include.bb2@196>   While (Left$(trans,1) =" ") : trans=Right$(trans,FLen(trans)-1) : Wend
00020EF2 <phrasebook.include.bb2@197>   While (Right$(trans,1)=" ") : trans=Left$ (trans,FLen(trans)-1) : Wend
00020F1C <phrasebook.include.bb2@199>   Function Return trans
00020F3A <phrasebook.include.bb2@200> End Function
00020F68 <phrasebook.include.bb2@204> Function.s pb_Translate{*pb.phrasebook,text.s}
00020FA4 <phrasebook.include.bb2@205>   If *pb=#NULL Then Function Return text
00021014 <phrasebook.include.bb2@206>   text.s = _pb_Normalize{text}+Chr$(10)
0002101C <phrasebook.include.bb2@207>   apos.l = 1
0002106E <phrasebook.include.bb2@208>   bpos.l = Instr(text,Chr$(10))
00021096 <phrasebook.include.bb2@209>   trans.s=""
000210AE <phrasebook.include.bb2@210>   While bpos>0
00021162 <phrasebook.include.bb2@211>     trans + _pb_LookUp{*pb,Mid$(text,apos,bpos-apos)}
00021170 <phrasebook.include.bb2@212>     apos.l = bpos+1
000211C6 <phrasebook.include.bb2@213>     bpos.l = Instr(text,Chr$(10),apos)
00021224 <phrasebook.include.bb2@214>     If bpos>0 Then trans+Chr$(10)
0002122A <phrasebook.include.bb2@215>   Wend
000212AE <phrasebook.include.bb2@216>   trans = Replace$(trans," \n ",Chr$(10))
00021332 <phrasebook.include.bb2@217>   trans = Replace$(trans," \n",Chr$(10))
000213B6 <phrasebook.include.bb2@218>   trans = Replace$(trans,"\n",Chr$(10))
00021434 <phrasebook.include.bb2@219>   trans = Replace$(trans," !","!")
000214B2 <phrasebook.include.bb2@220>   trans = Replace$(trans," .",".")
00021530 <phrasebook.include.bb2@221>   trans = Replace$(trans," :",":")
000215AE <phrasebook.include.bb2@222>   trans = Replace$(trans," ,",",")
0002162C <phrasebook.include.bb2@223>   trans = Replace$(trans," ;",";")
000216AA <phrasebook.include.bb2@224>   trans = Replace$(trans," ?","?")
00021728 <phrasebook.include.bb2@225>   trans = Replace$(trans," | ","|")
00021752 <phrasebook.include.bb2@226>   Function Return trans
00021770 <phrasebook.include.bb2@227> End Function
0002179E <phrasebook.include.bb2@245> Function.l pb_LoadText{*pb.phrasebook,filename.s}
000217E2 <phrasebook.include.bb2@246> fid.l = file_Open{filename,#file_read}
000217E8 <phrasebook.include.bb2@247> succ.l = False
00021802 <phrasebook.include.bb2@248> If fid<0 Then Function Return False
0002181E <phrasebook.include.bb2@249> While file_EOF{fid}=False
00021852 <phrasebook.include.bb2@250>   dictline.s = file_ReadLine{fid}
00021876 <phrasebook.include.bb2@251>   If FLen(dictline)>2
0002189E <phrasebook.include.bb2@252>     If Peek.l(&dictline)&$FFFFFF00=$EFBBBF00 ; skip utf8 header
0002190A <phrasebook.include.bb2@253>       dictline = Right$(dictline,FLen(dictline)-3)
00021968 <phrasebook.include.bb2@256>   template.s = lindex{dictline,0}
000219C6 <phrasebook.include.bb2@257>   native.s   = lindex{dictline,1}
00021A12 <phrasebook.include.bb2@258>   If FLen(template)>0 AND FLen(native)>0
00021A6C <phrasebook.include.bb2@259>     pb_AddPhrase{*pb,template,native}
00021A72 <phrasebook.include.bb2@260>     succ=True
00021A78 <phrasebook.include.bb2@262> Wend
00021A82 <phrasebook.include.bb2@263> file_Close{fid}
00021A8C <phrasebook.include.bb2@264> Function Return succ
00021AA6 <phrasebook.include.bb2@265> End Function
00021AD4 <phrasebook.include.bb2@282> Function.l pb_SaveBin{*pb.phrasebook,filename.s}
00021ADA <phrasebook.include.bb2@283> succ.l = False
00021B1E <phrasebook.include.bb2@284> fid.l = file_Open{filename,#file_forcewrite}
00021B38 <phrasebook.include.bb2@285> If fid<0 Then Function Return False
00021B48 <phrasebook.include.bb2@286> *pft.prefixtree = pft_Optimize{*pb\pft}
00021B52 <phrasebook.include.bb2@287> If *pft
00021B5E <phrasebook.include.bb2@288>   pft_Free{*pb\pft}
00021B68 <phrasebook.include.bb2@289>   *pb\pft = *pft
00021B8C <phrasebook.include.bb2@292> If file_WriteChunk{fid,@"PHBK"}
00021BD4 <phrasebook.include.bb2@293>   file_WriteTagString{fid,@"APP$",str_Read{&*pb\appName}}
00021C1C <phrasebook.include.bb2@294>   file_WriteTagString{fid,@"LAN$",str_Read{&*pb\langNameE}}
00021C64 <phrasebook.include.bb2@295>   file_WriteTagString{fid,@"NAT$",str_Read{&*pb\langName}}
00021C7A <phrasebook.include.bb2@296>   file_WriteTag{fid,@"PTBL",0}
00021C8E <phrasebook.include.bb2@297>   succ.l = pft_Write{*pb\pft,fid}
00021C98 <phrasebook.include.bb2@299> file_Close{fid}
00021CA2 <phrasebook.include.bb2@300> Function Return succ
00021CBC <phrasebook.include.bb2@301> End Function
00021CE6 <phrasebook.include.bb2@317> Function.l pb_LoadBin{filename.s}
00021D2A <phrasebook.include.bb2@318> fid.l = file_Open{filename,#file_read}
00021D44 <phrasebook.include.bb2@319> If fid<0 Then Function Return False
00021DA2 <phrasebook.include.bb2@320> *pb.phrasebook = pb_Create{"","",""}
00021DBC <phrasebook.include.bb2@321> If *pb=#NULL Then Function Return False
00021DD4 <phrasebook.include.bb2@323> If file_ReadTag{fid} = @"PHBK"
00021DDE <phrasebook.include.bb2@324>   bsize.l = file_GetTagValue{}
00021DFA <phrasebook.include.bb2@325>   While file_EOF{fid}=False
00021E08 <phrasebook.include.bb2@326>     bsize - 8
00021E14 <phrasebook.include.bb2@327>     Select file_ReadTag{fid}
00021E60 <phrasebook.include.bb2@328>       Case @"APP$" : str_Write{&*pb\appName  ,file_GetTagString{}}
00021EB2 <phrasebook.include.bb2@329>       Case @"LAN$" : str_Write{&*pb\langNameE,file_GetTagString{}}
00021F04 <phrasebook.include.bb2@330>       Case @"NAT$" : str_Write{&*pb\langName ,file_GetTagString{}}
00021F18 <phrasebook.include.bb2@331>       Case @"PTBL"
00021F28 <phrasebook.include.bb2@332>         *pb\pft = pft_Read{fid}
00021F2E <phrasebook.include.bb2@333>       Default
00021F30 <phrasebook.include.bb2@335>     End Select
00021F36 <phrasebook.include.bb2@336>   Wend
00021F40 <phrasebook.include.bb2@338> file_Close{fid}
00021F4A <phrasebook.include.bb2@339> Function Return *pb
00021F64 <phrasebook.include.bb2@340> End Function
00021F8E <phrasebook.include.bb2@379> Function.l pb_GetFromLocale{appName.s}
00021FA4 <phrasebook.include.bb2@380> *locale.Locale = OpenLocale_(#NULL)
00021FAE <phrasebook.include.bb2@381> If *locale
00022026 <phrasebook.include.bb2@382>   lang.s = Replace$(Peek.s(*locale\loc_LanguageName),".language","")
00022062 <phrasebook.include.bb2@383>   lang.s = Peek.s(*locale\loc_PrefLanguages[0])
00022072 <phrasebook.include.bb2@384>   CloseLocale_ *locale
00022092 <phrasebook.include.bb2@385>   buffPtr.l = AllocVec_(4096,#MEMF_ANY)
000220B2 <phrasebook.include.bb2@386>   *fibTex.FileInfoBlock = AllocDosObject_ (#DOS_FIB,#TAG_DONE)
000220D2 <phrasebook.include.bb2@387>   *fibBin.FileInfoBlock = AllocDosObject_ (#DOS_FIB,#TAG_DONE)
00022108 <phrasebook.include.bb2@388>   If buffPtr><#NULL AND *fibTex><#NULL AND *fibBin><#NULL
00022130 <phrasebook.include.bb2@389>     realfile.s = ""
00022168 <phrasebook.include.bb2@390>     If realfile=""
000221CC <phrasebook.include.bb2@391>       pbfile.s = appName+"."+lang
000221EC <phrasebook.include.bb2@392>       lock.l = Lock_ (&pbfile,#ACCESS_READ)
00022268 <phrasebook.include.bb2@393>       If lock Then NameFromLock_ lock,buffPtr,4096 : Examine_ lock,*fibTex : UnLock_ lock : realfile=Peek.s(buffPtr)
000222A0 <phrasebook.include.bb2@396>     If realfile=""
00022316 <phrasebook.include.bb2@397>       pbfile.s = "Locale/PhraseBooks/"+appName+"."+lang
00022336 <phrasebook.include.bb2@398>       lock.l = Lock_ (&pbfile,#ACCESS_READ)
000223B2 <phrasebook.include.bb2@399>       If lock Then NameFromLock_ lock,buffPtr,4096 : Examine_ lock,*fibTex : UnLock_ lock : realfile=Peek.s(buffPtr)
000223EA <phrasebook.include.bb2@402>     If realfile=""
00022460 <phrasebook.include.bb2@403>       pbfile.s = "Locale:PhraseBooks/"+appName+"."+lang
00022480 <phrasebook.include.bb2@404>       lock.l = Lock_ (&pbfile,#ACCESS_READ)
000224FC <phrasebook.include.bb2@405>       If lock Then NameFromLock_ lock,buffPtr,4096 : Examine_ lock,*fibTex : UnLock_ lock : realfile=Peek.s(buffPtr)
00022528 <phrasebook.include.bb2@408>     If realfile
00022530 <phrasebook.include.bb2@409>       *pb.phrasebook = #NULL
00022576 <phrasebook.include.bb2@410>       binfile.s = realfile+".bin"
00022596 <phrasebook.include.bb2@411>       lock.l = Lock_ (&binfile,#ACCESS_READ)
000225A0 <phrasebook.include.bb2@412>       If lock
000225B8 <phrasebook.include.bb2@413>         Examine_ lock,*fibBin
000225C8 <phrasebook.include.bb2@414>         UnLock_ lock
00022600 <phrasebook.include.bb2@415>         If CompareDates_(*fibTex\fib_Date,*fibBin\fib_Date)>0 ; Bin is later than Text
00022632 <phrasebook.include.bb2@416>           *pb = pb_LoadBin{binfile}
00022644 <phrasebook.include.bb2@419>       If *pb = #NULL
000226C6 <phrasebook.include.bb2@420>         *pb = pb_Create{appName,lang,lang}
000226D0 <phrasebook.include.bb2@421>         If *pb
00022702 <phrasebook.include.bb2@422>           pb_LoadText{*pb,realfile}
00022734 <phrasebook.include.bb2@423>           pb_SaveBin{*pb,binfile}
00022760 <phrasebook.include.bb2@428>   If *fibTex Then FreeDosObject_ #DOS_FIB,*fibTex : *fibTex = #NULL
0002278C <phrasebook.include.bb2@429>   If *fibBin Then FreeDosObject_ #DOS_FIB,*fibBin : *fibBin = #NULL
000227AE <phrasebook.include.bb2@430>   If buffPtr Then FreeVec_ buffPtr : buffPtr = #NULL
000227B8 <phrasebook.include.bb2@432> Function Return *pb
000227D2 <phrasebook.include.bb2@433> End Function
000227D2 <translation.include.bb2@31> XINCLUDE "useful.include.bb2"
000227E8 <translation.include.bb2@43> Statement trans_Free{}
00022804 <translation.include.bb2@44> If *__pb__ Then pb_Free{*__pb__} : *__pb__ = #NULL
00022806 <translation.include.bb2@45> End Statement
00022834 <translation.include.bb2@46> !autoexit{trans_Free}
00022834 <AmiBlitz3.ab2@99> CEND
00022834 <ted.include.ab3@1> XINCLUDE "/Shared/ted.include.ab3"
0002284E <ted.include.ab3@161> Function.l ted_OpenLib{@minVersion.l}
00022858 <ted.include.ab3@162> If (*_TEDBase)
0002287A <ted.include.ab3@163>   If (minVersion<=*_TEDBase\lib_Version) Then Function Return *_TEDBase
00022892 <ted.include.ab3@164>   CloseLibrary_ *_TEDBase : *_TEDBase = 0
000228AC <ted.include.ab3@166> If minVersion<0 Then minVersion = 0
000228DE <ted.include.ab3@167> *_TEDBase = OpenLibrary_ ("ted.library",minVersion)
000228E8 <ted.include.ab3@168> If *_TEDBase
000228EE <ted.include.ab3@170> Else
00022900 <ted.include.ab3@171>   If (minVersion>0)
00022968 <ted.include.ab3@172>     error{"Unable to open ted.library (v"+Str$(minVersion)+"+)!"}
0002296E <ted.include.ab3@173>   Else
0002299C <ted.include.ab3@174>     error{"Unable to open ted.library!"}
000229A6 <ted.include.ab3@177> Function Return *_TEDBase
000229AC <ted.include.ab3@178> End Function
000229C2 <ted.include.ab3@180> Statement ted_CloseLib{}
000229CC <ted.include.ab3@181> If *_TEDBase
000229E4 <ted.include.ab3@183>   CloseLibrary_ *_TEDBase : *_TEDBase = 0
000229E6 <ted.include.ab3@185> End Statement
00022A14 <ted.include.ab3@186> !autoexit{ted_CloseLib}
00022A2E <ted.include.ab3@190> Statement TEDSetLabelList{mouselistP.l}
00022A44 <ted.include.ab3@191> If (ted_OpenLib{}) ; (!) put your min version here if needed!
00022A78 <ted.include.ab3@192>   !TEDSetLabelList{result.l,mouselistP}
00022A7C <ted.include.ab3@194> End Statement
00022A96 <ted.include.ab3@196> Statement TEDSetLabelCount{mousecountP.l}
00022AAC <ted.include.ab3@197> If (ted_OpenLib{}) ; (!) put your min version here if needed!
00022AE0 <ted.include.ab3@198>   !TEDSetLabelCount{result.l,mousecountP}
00022AE4 <ted.include.ab3@200> End Statement
00022AFE <ted.include.ab3@216> Statement TEDSetJumpTable{comdataP.l}
00022B14 <ted.include.ab3@217> If (ted_OpenLib{}) ; (!) put your min version here if needed!
00022B48 <ted.include.ab3@218>   !TEDSetJumpTable{result.l,comdataP}
00022B4C <ted.include.ab3@220> End Statement
00022B66 <ted.include.ab3@236> Statement TEDSetFirstLine{firstlineP.l}
00022B7C <ted.include.ab3@237> If (ted_OpenLib{}) ; (!) put your min version here if needed!
00022BB0 <ted.include.ab3@238>   !TEDSetFirstLine{result.l,firstlineP}
00022BB4 <ted.include.ab3@240> End Statement
00022BCE <ted.include.ab3@242> Statement TEDSetCurrentLine{currentlineP.l}
00022BE4 <ted.include.ab3@243> If (ted_OpenLib{})  ; (!) put your min version here if needed!
00022C18 <ted.include.ab3@244>   !TEDSetCurrentLine{result.l,currentlineP}
00022C1C <ted.include.ab3@246> End Statement
00022C1C <AmiBlitz3.ab2@100> 
00022C1C <CLIModeSupport.ab3@1> XINCLUDE "CLIModeSupport.ab3"
00022C32 <CLIModeSupport.ab3@4> Statement OpenConsoleFake{}
00022C48 <CLIModeSupport.ab3@7>   *myproc.Process   = FindTask_(0)
00022C56 <CLIModeSupport.ab3@8>   pr_CIS.l = *myproc\pr_CIS
00022C64 <CLIModeSupport.ab3@9>   pr_COS.l = *myproc\pr_COS
00022C6E <CLIModeSupport.ab3@11>   If *ab3proc
00022C80 <CLIModeSupport.ab3@12>     *myproc\pr_CIS = *ab3proc\pr_CIS
00022C92 <CLIModeSupport.ab3@13>     *myproc\pr_COS = *ab3proc\pr_COS
00022C98 <CLIModeSupport.ab3@14>   Else
00022CC6 <CLIModeSupport.ab3@15>     error{"AB3 Process is not initialized!"}
00022CCA <CLIModeSupport.ab3@18> End Statement
00022CE0 <CLIModeSupport.ab3@21> Statement CloseConsoleFake{}
00022CF6 <CLIModeSupport.ab3@23>   *myproc.Process = FindTask_(0)
00022D02 <CLIModeSupport.ab3@24>   *myproc\pr_CIS = pr_CIS
00022D0E <CLIModeSupport.ab3@25>   *myproc\pr_COS=  pr_COS
00022D16 <CLIModeSupport.ab3@26>   pr_COS = #NULL
00022D1E <CLIModeSupport.ab3@27>   pr_CIS = #NULL
00022D22 <CLIModeSupport.ab3@28> End Statement
00022D4C <CLIModeSupport.ab3@47> Statement SetCurrentDir{path.s}
00022D78 <CLIModeSupport.ab3@49>   If path
00022D8A <CLIModeSupport.ab3@50>     SetCurrentDirName_ &path
00022DA2 <CLIModeSupport.ab3@52> End Statement
00022DB8 <CLIModeSupport.ab3@56> Function.l InitEmulatedPED{}
00022DBE <CLIModeSupport.ab3@58>   succ.l = True
00022DF4 <CLIModeSupport.ab3@62>   !ComData_SetW{comWord_MaxColumns    ,##columnsize}
00022E2C <CLIModeSupport.ab3@63>   !ComData_SetL{comData_Magic         ,#$7E3A3A7E}             ; "~::~"
00022E64 <CLIModeSupport.ab3@64>   !ComData_SetL{comPtr_CurrentDir     ,#comStr_CurrentDir }
00022E9C <CLIModeSupport.ab3@65>   !ComData_SetL{comPtr_SourceName     ,#comStr_SourceName }
00022ED4 <CLIModeSupport.ab3@66>   !ComData_SetL{comPtr_TokenBase      ,#tokens }
00022F0C <CLIModeSupport.ab3@67>   !ComData_SetL{comPtr_TokenBase2     ,#0}
00022F44 <CLIModeSupport.ab3@68>   !ComData_SetL{comFunc_ReadXtraFile  ,#read_xtrafile }
00022F7C <CLIModeSupport.ab3@69>   !ComData_SetL{comFunc_WriteXtraFile ,#write_xtrafile}
00022FB4 <CLIModeSupport.ab3@70>   !ComData_SetL{comFunc_OpenConsole   ,#ab3_OpenConsole}
00022FEC <CLIModeSupport.ab3@71>   !ComData_SetL{comFunc_CloseConsole  ,#ab3_CloseConsole}
00023024 <CLIModeSupport.ab3@72>   !ComData_SetL{comFunc_CallMenuEntry ,#call_menuentry}
0002305C <CLIModeSupport.ab3@73>   !ComData_SetL{comFunc_CallDummy     ,#0}
00023094 <CLIModeSupport.ab3@74>   !ComData_SetL{comLong_AB3IsAvailable,#teddata}
0002309E <CLIModeSupport.ab3@75>   MOVE.l #100,progressbar_width
000230A8 <CLIModeSupport.ab3@77>   MOVE.l #str_path_deflibs ,deflib
000230B2 <CLIModeSupport.ab3@78>   MOVE.l #str_path_includes,incd
000230C6 <CLIModeSupport.ab3@80>   If ted_OpenLib{0}
00023102 <CLIModeSupport.ab3@81>     !ComData_LEA{COMDATABASE,d0}              : comdataP.l           = PutD0 : TEDSetJumpTable  {comdataP}
0002313E <CLIModeSupport.ab3@82>     !ComData_LEA{comPtr_FirstSourceLine,d0}   : FirstSourceLineP.l   = PutD0 : TEDSetFirstLine  {FirstSourceLineP}
0002317A <CLIModeSupport.ab3@83>     !ComData_LEA{comPtr_CurrentSourceLine,d0} : CurrentSourceLineP.l = PutD0 : TEDSetCurrentLine{CurrentSourceLineP}
000231B6 <CLIModeSupport.ab3@84>     !ComData_LEA{comPtr_LabelList,d0}         : LabelListP.l         = PutD0 : TEDSetLabelList  {LabelListP}
000231F2 <CLIModeSupport.ab3@85>     !ComData_LEA{comWord_LabelCounter,d0}     : LabelCounterP.l      = PutD0 : TEDSetLabelCount {LabelCounterP}
000231F8 <CLIModeSupport.ab3@86>   Else
00023226 <CLIModeSupport.ab3@87>     error{"ERROR: Unable to open ted.library!"}
00023250 <CLIModeSupport.ab3@90>   mempoolP.l = CreatePool_(#MEMF_CLEAR,40000,40000)
0002325A <CLIModeSupport.ab3@91>   If mempoolP
0002325E <CLIModeSupport.ab3@92>     GetD0 mempoolP
00023292 <CLIModeSupport.ab3@93>     !ComData_SetL{comPtr_MemPool,d0}
00023298 <CLIModeSupport.ab3@94>   Else
000232C6 <CLIModeSupport.ab3@95>     error{"Could not allocate enough memory. PED closes down now."}
000232CC <CLIModeSupport.ab3@96>     succ=False
000232E2 <CLIModeSupport.ab3@99>   *ab3proc.Process = FindTask_(0)
000232EC <CLIModeSupport.ab3@101>   Function Return succ
000232F2 <CLIModeSupport.ab3@102> End Function
00023308 <CLIModeSupport.ab3@106> Function.l DeinitEmulatedPED{}
0002330E <CLIModeSupport.ab3@107>   succ.l = True
0002334C <CLIModeSupport.ab3@109>   !ComData_GetL{comPtr_MemPool,d0}
00023350 <CLIModeSupport.ab3@110>   mempoolP.l = PutD0
0002335A <CLIModeSupport.ab3@111>   If mempoolP
0002335C <CLIModeSupport.ab3@112>     CLR.l d0
00023390 <CLIModeSupport.ab3@113>     !ComData_SetL{comPtr_MemPool,d0}
000233A0 <CLIModeSupport.ab3@114>     DeletePool_ mempoolP
000233A6 <CLIModeSupport.ab3@117>   ted_CloseLib{}
000233B0 <CLIModeSupport.ab3@119>   Function Return succ
000233B6 <CLIModeSupport.ab3@120> End Function
000233CC <CLIModeSupport.ab3@124> Statement ClearSource{}
0002340A <CLIModeSupport.ab3@125>   !ComData_GetL{comPtr_FirstSourceLine,D0}
0002340E <CLIModeSupport.ab3@126>   *SourceLine.SourceLine_t = PutD0
00023416 <CLIModeSupport.ab3@127>   *NextLine.SourceLine_t = #NULL
00023454 <CLIModeSupport.ab3@128>   !ComData_GetL{comLong_TotalLines,D0}
00023456 <CLIModeSupport.ab3@129>   SUBQ.l #1,D0
0002345A <CLIModeSupport.ab3@130>   maxlines.l = PutD0
00023498 <CLIModeSupport.ab3@132>   !ComData_GetL{comPtr_MemPool,D0}
0002349C <CLIModeSupport.ab3@133>   mempoolP.l = PutD0
000234DA <CLIModeSupport.ab3@135>   !ComData_GetL{comLong_TotalLines,D0}
000234DE <CLIModeSupport.ab3@136>   totalLines.l = PutD0
00023508 <CLIModeSupport.ab3@138>   While *SourceLine><#NULL AND totalLines>0
00023512 <CLIModeSupport.ab3@139>     *NextLine =  *SourceLine\NextLine
00023526 <CLIModeSupport.ab3@140>     memsize.l = Peek.l(*SourceLine-4)
0002354C <CLIModeSupport.ab3@141>     FreePooled_ mempoolP,*SourceLine-4,memsize
00023552 <CLIModeSupport.ab3@142>     *SourceLine = *NextLine
00023560 <CLIModeSupport.ab3@143>     totalLines-1
00023566 <CLIModeSupport.ab3@144>   Wend
0002359E <CLIModeSupport.ab3@146>   !ComData_SetL{comLong_TotalLines,#$0001}
000235A2 <CLIModeSupport.ab3@149> End Statement
000235CC <CLIModeSupport.ab3@152> Function.l LoadXtra{filename.s}
000235D2 <CLIModeSupport.ab3@153>   succ.l = False
000235F2 <CLIModeSupport.ab3@154>   fp.l = Open_ (&filename,#MODE_OLDFILE)
000235FC <CLIModeSupport.ab3@155>   If fp
00023600 <CLIModeSupport.ab3@156>     GetD0 fp
00023602 <CLIModeSupport.ab3@157>     MOVE.l A4,-(A7)
00023620 <CLIModeSupport.ab3@158>     !asm
00023622 <CLIModeSupport.ab3@159>     MOVE.l D0,D7
00023628 <CLIModeSupport.ab3@160>     MOVEA.l _dosbase,A6
0002362E <CLIModeSupport.ab3@161>     JSR read_xtrafile
00023658 <CLIModeSupport.ab3@163>     !basic
0002365A <CLIModeSupport.ab3@164>     MOVE.l (A7)+,A4
00023688 <CLIModeSupport.ab3@165>     !ComData_LEA{comDef_XtraExtendBegin,D0}
0002368C <CLIModeSupport.ab3@166>     aptr.l = PutD0
000236BA <CLIModeSupport.ab3@167>     !ComData_LEA{comDef_XtraExtendEnd,D0}
000236BE <CLIModeSupport.ab3@168>     eptr.l = PutD0
000236E4 <CLIModeSupport.ab3@170>     Read_ fp,aptr,eptr-aptr
000236F4 <CLIModeSupport.ab3@171>     Close_ fp
000236FA <CLIModeSupport.ab3@172>     succ.l = True
00023700 <CLIModeSupport.ab3@173>   Else
0002372E <CLIModeSupport.ab3@174>     error{"WARNING: Unable to open .xtra file!"}
00023738 <CLIModeSupport.ab3@176>  Function Return succ
00023752 <CLIModeSupport.ab3@177> End Function
00023770 <CLIModeSupport.ab3@189> Function.l SkipXtraHeader{textP.l,blength.l}
00023778 <CLIModeSupport.ab3@190>   pos.l = 0
0002377E <CLIModeSupport.ab3@191>   found.l = False
00023784 <CLIModeSupport.ab3@192>   gotcomment.l = False
000237A6 <CLIModeSupport.ab3@193>   While found=False AND pos<blength
000237BE <CLIModeSupport.ab3@195>     Select Peek.b(textP+pos)
000237E4 <CLIModeSupport.ab3@196>       Case @";" : gotcomment.l = True  : pos+1
0002380E <CLIModeSupport.ab3@197>       Case 10   : If gotcomment=False
0002381C <CLIModeSupport.ab3@198>                     found = True       : pos=0
00023822 <CLIModeSupport.ab3@199>                   Else
00023836 <CLIModeSupport.ab3@200>                     gotcomment = False : pos+1
0002384E <CLIModeSupport.ab3@202>       Case @"/"
0002385C <CLIModeSupport.ab3@203>         pos+1
00023870 <CLIModeSupport.ab3@204>         xtra.l = Peek.l(textP+pos)
000238AC <CLIModeSupport.ab3@205>         If xtra = @"xtra" OR xtra = @"XTRA" OR xtra = @"Xtra"
000238BA <CLIModeSupport.ab3@206>           pos + 4
000238EA <CLIModeSupport.ab3@207>           While Peek.b(textP+pos)><10 AND pos<blength
000238F8 <CLIModeSupport.ab3@208>             pos+1
000238FE <CLIModeSupport.ab3@209>           Wend
0002390C <CLIModeSupport.ab3@210>           pos+1
00023912 <CLIModeSupport.ab3@211>           found = True
00023918 <CLIModeSupport.ab3@213>       Default
00023926 <CLIModeSupport.ab3@214>         pos+1
00023928 <CLIModeSupport.ab3@215>     End Select
0002392E <CLIModeSupport.ab3@217>   Wend
00023944 <CLIModeSupport.ab3@219>   If pos>=blength Then pos=0
0002394E <CLIModeSupport.ab3@220>  Function Return pos
00023954 <CLIModeSupport.ab3@221> End Function
0002397E <CLIModeSupport.ab3@225> Function.l LoadSource{sourcefile.s}
000239BC <CLIModeSupport.ab3@226>   !ComData_GetL{comPtr_FirstSourceLine,D0}
000239C0 <CLIModeSupport.ab3@227>   *sourceBase.SourceLine_t = PutD0
000239FE <CLIModeSupport.ab3@228>   !ComData_GetL{comPtr_PreProcessor,D0}
00023A02 <CLIModeSupport.ab3@229>   *PreProcessor.preprocessor = PutD0
00023A40 <CLIModeSupport.ab3@230>   !ComData_GetL{comPtr_MemPool,D0}
00023A44 <CLIModeSupport.ab3@231>   mempoolP.l = PutD0
00023A4C <CLIModeSupport.ab3@233>   *firstLine.SourceLine_t  = #NULL
00023A54 <CLIModeSupport.ab3@234>   *lastLine.SourceLine_t   = #NULL
00023A98 <CLIModeSupport.ab3@236>   fid.l = file_Open{sourcefile,#file_read}
00023AAA <CLIModeSupport.ab3@237>   If fid>=0
00023AB8 <CLIModeSupport.ab3@238>     byteLength.l = file_GetLength{fid}
00023AEC <CLIModeSupport.ab3@239>     sourcefile.s = file_GetDosName{fid}
00023B10 <CLIModeSupport.ab3@241>     tempBuffer.l = AllocVec_(byteLength+8,#MEMF_ANY)
00023B1A <CLIModeSupport.ab3@242>     If tempBuffer
00023B34 <CLIModeSupport.ab3@243>       If file_ReadMem{fid,tempBuffer,byteLength}
00023B48 <CLIModeSupport.ab3@244>         Poke.b tempBuffer+byteLength,0
00023BA0 <CLIModeSupport.ab3@245>         ex.s = dos_GetExt{sourcefile}
00023C46 <CLIModeSupport.ab3@246>         If ex="ab2" OR ex="ab3" OR ex="asc"
00023C4E <CLIModeSupport.ab3@247>           offset.l = 0
00023C86 <CLIModeSupport.ab3@248>           If ex="ab3"
00023C8C <CLIModeSupport.ab3@249>             headerDone.l = False
00023C9C <CLIModeSupport.ab3@250>             file_Seek{fid,0}
00023CC4 <CLIModeSupport.ab3@253>             ExePath.s        = "RAM:"
00023CEC <CLIModeSupport.ab3@254>             ExeFile.s        = "Prog.exe"
00023CF4 <CLIModeSupport.ab3@255>             StringBuffer.l   = 8192
00023CFA <CLIModeSupport.ab3@256>             MakeSmallest.l   = False
00023D02 <CLIModeSupport.ab3@257>             StackSize.l      = 32768
00023D2A <CLIModeSupport.ab3@258>             CliArgs.s        = ""
00023D32 <CLIModeSupport.ab3@259>             NumberOfBuilds.l = 0
00023D3A <CLIModeSupport.ab3@260>             VersionInfo.l    = 0
00023D40 <CLIModeSupport.ab3@261>             CreateIcon.l     = False
00023D46 <CLIModeSupport.ab3@262>             UseDebugger.l    = False
00023D4C <CLIModeSupport.ab3@263>             DebugInfo.l      = False
00023D52 <CLIModeSupport.ab3@264>             CreateDbgFile.l  = False
00023D58 <CLIModeSupport.ab3@265>             OverflowCheck.l  = False
00023D5E <CLIModeSupport.ab3@266>             AssemblerCheck.l = True
00023D64 <CLIModeSupport.ab3@267>             InterruptCheck.l = True
00023D6A <CLIModeSupport.ab3@268>             AutoRun.l        = True
00023D72 <CLIModeSupport.ab3@269>             CursorLine.l     = 0
00023D7A <CLIModeSupport.ab3@270>             CursorCol.l      = 0
00023DA2 <CLIModeSupport.ab3@271>             LabelSearch.s    = ""
00023DA8 <CLIModeSupport.ab3@272>             LabelRemark.w    = False
00023DAE <CLIModeSupport.ab3@273>             LabelAll.w       = False
00023DB6 <CLIModeSupport.ab3@274>             LabelPosition.l  = 0
00023DD6 <CLIModeSupport.ab3@278>             FillMem ?optssave,?ptr_endxtradata-?optssave,0
00023DE6 <CLIModeSupport.ab3@280>             Poke.b ?xtra_versionnumber,0                                ; vers org source
00023DF6 <CLIModeSupport.ab3@281>             Poke.b ?create_iconfile,0                                   ; create icon for executable
00023E06 <CLIModeSupport.ab3@283>             Poke.w ?set_use_debugger,0
00023E16 <CLIModeSupport.ab3@284>             Poke.w ?AL_0_11010,0                                          ;+obsolet: debugger
00023E26 <CLIModeSupport.ab3@285>             Poke.w ?AL_0_1103C,0                                          ;+obsolet: long arrays
00023E36 <CLIModeSupport.ab3@286>             Poke.w ?AL_0_11068,0                                          ;+obsolet: expand macros
00023E46 <CLIModeSupport.ab3@287>             Poke.w ?AL_0_11094,0                                          ;+obsolet: quoted macros
00023E56 <CLIModeSupport.ab3@288>             Poke.w ?set_make_smallestcode,0
00023E66 <CLIModeSupport.ab3@289>             Poke.w ?set_link_debuginfo,0
00023E76 <CLIModeSupport.ab3@290>             Poke.w ?set_autorun,0
00023E86 <CLIModeSupport.ab3@291>             Poke.w ?set_interruptcheck,0
00023E96 <CLIModeSupport.ab3@292>             Poke.w ?set_assemblercheck,0
00023EA6 <CLIModeSupport.ab3@293>             Poke.w ?set_overflowcheck,0
00023EB6 <CLIModeSupport.ab3@294>             Poke.w ?default_obsolete,0                                    ;+obsolet: ohne inhalt
00023EC6 <CLIModeSupport.ab3@295>             Poke.w ?default_interruptcheck,0                              ;+obsolet: interruptcheck vorgabe
00023ED6 <CLIModeSupport.ab3@296>             Poke.w ?default_overflowcheck,0                               ;+obsolet: overflow vorgabe
00023EE8 <CLIModeSupport.ab3@298>             Poke.l ?objectbuffer,0
00023EFA <CLIModeSupport.ab3@299>             Poke.l ?libsbuffer,0
00023F0C <CLIModeSupport.ab3@300>             Poke.l ?systembuffer,0
00023F1E <CLIModeSupport.ab3@301>             Poke.l ?databuffer,0
00023F30 <CLIModeSupport.ab3@302>             Poke.l ?macrobuffer_size,0
00023F42 <CLIModeSupport.ab3@303>             Poke.l ?stringbuffer,0
00023F54 <CLIModeSupport.ab3@305>             Poke.l ?residents_table,0
00023F66 <CLIModeSupport.ab3@306>             Poke.l ?exepath,0                                           ; exepath und exefilename jeweils 192 bytes
00023F9A <CLIModeSupport.ab3@309>               lin.s = file_ReadLine{fid}
00023FB2 <CLIModeSupport.ab3@310>               If file_EOF{fid} Then headerDone=True
00023FFE <CLIModeSupport.ab3@311>               eqpos.l = Instr(lin,"=")
00024010 <CLIModeSupport.ab3@312>               If eqpos>0
00024066 <CLIModeSupport.ab3@313>                 rawtoken.s = Left$(lin,eqpos-1)
000240D8 <CLIModeSupport.ab3@314>                 value.s    = Right$(lin,FLen(lin)-eqpos-1)
000240DE <CLIModeSupport.ab3@315>               Else
00024112 <CLIModeSupport.ab3@316>                 rawtoken.s = lin
0002413A <CLIModeSupport.ab3@317>                 value.s    =  ""
00024162 <CLIModeSupport.ab3@319>                 token.s    = ""
0002419C <CLIModeSupport.ab3@320>                 For n.l=0 To FLen(rawtoken)-1    ; trim token
000241B4 <CLIModeSupport.ab3@321>                   c.b = Peek.b(&rawtoken+n)
00024252 <CLIModeSupport.ab3@322>                   If (c>=@"a" AND c<=@"z") OR (c>=@"A" AND c<=@"Z") OR c=@"_" OR c=@"/" OR c=@"-"
0002426C <CLIModeSupport.ab3@323>                     If (c=@"-") Then c=32 ; - to SPACE
000242BA <CLIModeSupport.ab3@324>                     token + Chr$(c)
000242CA <CLIModeSupport.ab3@326>                 Next
000242D2 <CLIModeSupport.ab3@328>                 ltrim.l = 0
000242E6 <CLIModeSupport.ab3@329>                 lmax.l  = FLen(value)
0002432C <CLIModeSupport.ab3@330>                 While Peek.b(&value+ltrim)<33 AND ltrim<lmax: ltrim+1 : Wend
00024332 <CLIModeSupport.ab3@331>                 rtrim.l = lmax
0002437C <CLIModeSupport.ab3@332>                 While Peek.b(&value+rtrim)<33 AND rtrim>=0 : rtrim-1 : Wend
000243E6 <CLIModeSupport.ab3@333>                 If Peek.b(&value+rtrim)=$22 AND Peek.b(&value+ltrim)=$22 Then rtrim-1:ltrim+1
0002444C <CLIModeSupport.ab3@334>                 value = Mid$(value,ltrim+1,rtrim-ltrim+1)
00024480 <CLIModeSupport.ab3@335>                 lvalue.l = Vallong(value)
000244AC <CLIModeSupport.ab3@337>                 If token
000244FA <CLIModeSupport.ab3@338>                   Select LCase$(token)
0002451E <CLIModeSupport.ab3@339>                     Case "/xtra"
00024524 <CLIModeSupport.ab3@340>                       headerDone = True
00024532 <CLIModeSupport.ab3@342>                       offset = file_GetSeekPos{fid}
00024590 <CLIModeSupport.ab3@344>                     Case "exepath"        : ExePath = value
000245EE <CLIModeSupport.ab3@345>                     Case "exefile"        : ExeFile = value
00024618 <CLIModeSupport.ab3@346>                     Case "residents"
00024622 <CLIModeSupport.ab3@347>                       resptr.l = ?residents_table
0002462A <CLIModeSupport.ab3@348>                       resN.l   = 0
00024668 <CLIModeSupport.ab3@349>                       While value><""
000246B4 <CLIModeSupport.ab3@350>                         cpos.l = Instr(value,",")
000246C6 <CLIModeSupport.ab3@351>                         If cpos>0
0002471C <CLIModeSupport.ab3@352>                           resident.s = Left$(value,cpos-1)
00024794 <CLIModeSupport.ab3@353>                           value = Right$(value,FLen(value)-cpos-1+1)
0002479A <CLIModeSupport.ab3@354>                         Else
000247CE <CLIModeSupport.ab3@355>                           resident = value
000247F6 <CLIModeSupport.ab3@356>                           value = ""
0002482C <CLIModeSupport.ab3@359>                         Poke.s resptr,resident
0002483A <CLIModeSupport.ab3@360>                         resptr+$44
00024848 <CLIModeSupport.ab3@361>                         resN + 1
000248B0 <CLIModeSupport.ab3@362>                         If resN=7 Then value="" : error{"Warning: could not load all residents"}
000248B6 <CLIModeSupport.ab3@363>                       Wend
00024900 <CLIModeSupport.ab3@364>                     Case "stringbuffer"   : StringBuffer = lvalue : If StringBuffer<4096 Then StringBuffer=4096
0002494A <CLIModeSupport.ab3@365>                     Case "stacksize"      : StackSize    = lvalue : If StackSize<#MIN_STACKSIZE Then StackSize=#MIN_STACKSIZE
0002497A <CLIModeSupport.ab3@366>                     Case "makesmallest"   : MakeSmallest = lvalue
000249A4 <CLIModeSupport.ab3@367>                     Case "version"
000249F6 <CLIModeSupport.ab3@368>                       mpos.l = Instr(value,".",1)
00024A4C <CLIModeSupport.ab3@369>                       ppos.l = Instr(value,".",mpos+1)                          ; fixed search of the second "." because we must start +1 behind the first founded one
00024A9C <CLIModeSupport.ab3@370>                       MajorVersion.l = Vallong(Left$(value,mpos))
00024B02 <CLIModeSupport.ab3@371>                       MinorVersion.l = Vallong(Mid$(value,mpos+1,ppos-mpos+1))
00024B6E <CLIModeSupport.ab3@372>                       PatchVersion.l = Vallong(Right$(value,FLen(value)-ppos))  ; fixed leng calculation
00024B9A <CLIModeSupport.ab3@373>                       VersionInfo.l  = (MajorVersion LSL 24) | (MinorVersion LSL 16) | (PatchVersion LSL 8)
00024BCA <CLIModeSupport.ab3@374>                     Case "numberofbuilds" : NumberOfBuilds = lvalue
00024C46 <CLIModeSupport.ab3@375>                     Case "cliargs"        : CliArgs.s      = Left$(value,254)
00024C76 <CLIModeSupport.ab3@376>                     Case "createicon"     : CreateIcon     = lvalue
00024CA6 <CLIModeSupport.ab3@377>                     Case "runtimedebug"   : UseDebugger    = lvalue
00024CD6 <CLIModeSupport.ab3@378>                     Case "debuginfo"      : DebugInfo      = lvalue
00024D06 <CLIModeSupport.ab3@379>                     Case "createdbgfile"  : CreateDbgFile  = lvalue
00024D36 <CLIModeSupport.ab3@380>                     Case "overflowcheck"  : OverflowCheck  = lvalue
00024D66 <CLIModeSupport.ab3@381>                     Case "assemblercheck" : AssemblerCheck = lvalue
00024D96 <CLIModeSupport.ab3@382>                     Case "interruptcheck" : InterruptCheck = lvalue
00024DC6 <CLIModeSupport.ab3@383>                     Case "autorun"        : AutoRun        = lvalue
00024DF6 <CLIModeSupport.ab3@384>                     Case "cursorline"     : CursorLine     = lvalue
00024E26 <CLIModeSupport.ab3@385>                     Case "cursorcolumn"   : CursorCol      = lvalue
00024EA2 <CLIModeSupport.ab3@386>                     Case "labelsearch"    : LabelSearch    = Left$(value,29)
00024ED4 <CLIModeSupport.ab3@387>                     Case "labelremark"    : LabelRemark    = lvalue
00024F06 <CLIModeSupport.ab3@388>                     Case "labelall"       : LabelAll       = lvalue
00024F36 <CLIModeSupport.ab3@389>                     Case "labelposition"  : LabelPosition  = lvalue            ; added the read of inner position of the labellist tomsmart1
00024F3C <CLIModeSupport.ab3@390>                     Default
00024FB0 <CLIModeSupport.ab3@391>                       If LCase$(Left$(token,3))="max"
0002501C <CLIModeSupport.ab3@392>                         bobjName.s = Right$(token,FLen(token)-3)
0002502E <CLIModeSupport.ab3@393>                         bobjMax.l  = Peek.w(?number_of_objects)
0002505C <CLIModeSupport.ab3@394>                         For i.l = 0 To bobjMax-1 ; find the obj's name...
00025084 <CLIModeSupport.ab3@395>                          name.s = "                                "
00025098 <CLIModeSupport.ab3@396>                          GetD0 &name,i:JSR getobjectentry : a.l = PutD0
000250C2 <CLIModeSupport.ab3@397>                          name = Peek.s(&name)
00025106 <CLIModeSupport.ab3@398>                          If (name=bobjName) ; this is the one...
00025116 <CLIModeSupport.ab3@399>                            Poke.w ?maxobjects_value,lvalue
00025126 <CLIModeSupport.ab3@400>                            Poke.w ?maxobject_pos,i
0002512C <CLIModeSupport.ab3@401>                            Gosub storemaxobjects
0002513C <CLIModeSupport.ab3@403>                         Next
0002514A <CLIModeSupport.ab3@407>                   End Select
00025154 <CLIModeSupport.ab3@410>             Until headerDone
0002518C <CLIModeSupport.ab3@413>             Poke.s ?exepath    ,ExePath
000251C4 <CLIModeSupport.ab3@414>             Poke.s ?exefilename,ExeFile
000251FC <CLIModeSupport.ab3@415>             GetD0 CursorLine : !ComData_SetL{comLong_CursorPosStore,d0}
0002520C <CLIModeSupport.ab3@416>             Poke.l ?versioninformation,VersionInfo
00025274 <CLIModeSupport.ab3@417>             !ComData_LEA{comStr_LabelSearchString,d0} : labelP.l = PutD0 : Poke.s labelP,LabelSearch
000252AC <CLIModeSupport.ab3@418>             Poke.s ?str_cliarguments,CliArgs
000252BC <CLIModeSupport.ab3@419>             Poke.l ?stringbuffer,StringBuffer
000252CC <CLIModeSupport.ab3@420>             Poke.l ?number_of_builds,NumberOfBuilds
00025334 <CLIModeSupport.ab3@421>             !SetBoolXtra{make_smallestcode,MakeSmallest}
0002539C <CLIModeSupport.ab3@422>             !SetBoolXtra{create_iconfile  ,CreateIcon}
00025404 <CLIModeSupport.ab3@423>             !SetBoolXtra{use_debugger     ,UseDebugger}
0002546C <CLIModeSupport.ab3@424>             !SetBoolXtra{link_debuginfo   ,DebugInfo}
000254D4 <CLIModeSupport.ab3@425>             !SetBoolXtra{overflowcheck    ,OverflowCheck}
0002553C <CLIModeSupport.ab3@426>             !SetBoolXtra{assemblercheck   ,AssemblerCheck}
000255A4 <CLIModeSupport.ab3@427>             !SetBoolXtra{interruptcheck   ,InterruptCheck}
0002560C <CLIModeSupport.ab3@428>             !SetBoolXtra{autorun          ,AutoRun}
0002561C <CLIModeSupport.ab3@429>             Poke.l ?stacksize,StackSize
00025654 <CLIModeSupport.ab3@431>             GetD0 CreateDbgFile : !ComData_SetW{comWord_CreateDebugFile,d0}
0002568E <CLIModeSupport.ab3@432>             GetD0 LabelRemark   : !ComData_SetW{comWord_LabelRemark,d0}
000256C8 <CLIModeSupport.ab3@433>             GetD0 LabelAll      : !ComData_SetW{comWord_LabelAll,d0}
00025700 <CLIModeSupport.ab3@434>             GetD0 LabelPosition : !ComData_SetL{comLong_Label1VisableItemStore,d0}    ; added the load of the inner postion of the labellist  tomsmart1
00025726 <CLIModeSupport.ab3@437>           byteLength = preproc_Tokenize{*PreProcessor,tempBuffer+offset,tempBuffer,byteLength-offset}
0002572E <CLIModeSupport.ab3@440>         offset.l = 0
00025736 <CLIModeSupport.ab3@442>         *sourceNode.SourceNode_t = #NULL
0002573E <CLIModeSupport.ab3@443>         *prevLine.SourceLine_t   = #NULL
00025746 <CLIModeSupport.ab3@445>         count.l = 0
0002575A <CLIModeSupport.ab3@446>         While offset<byteLength
00025788 <CLIModeSupport.ab3@447>           text.s = Peek.s(tempBuffer+offset)
000257A2 <CLIModeSupport.ab3@448>           charLength.l = FLen(text)+1
000257B0 <CLIModeSupport.ab3@449>           offset+charLength
0002581C <CLIModeSupport.ab3@450>           If charLength>#columnsize Then charLength =#columnsize : text = Left$(text,#columnsize-1)
00025842 <CLIModeSupport.ab3@451>           allocsize.l = SizeOf.SourceNode_t+FLen(text)   ; the SizeOf contains already the terminating 0-Byte
0002585E <CLIModeSupport.ab3@452>           *sourceNode = AllocPooled_(mempoolP,allocsize)
00025868 <CLIModeSupport.ab3@453>           If *sourceNode
00025872 <CLIModeSupport.ab3@454>             *sourceNode\AllocSize             = allocsize
0002587E <CLIModeSupport.ab3@455>             *sourceNode\SourceLine\PrevLine   = *prevLine
0002588C <CLIModeSupport.ab3@456>             *sourceNode\SourceLine\NextLine   = #NULL
00025898 <CLIModeSupport.ab3@457>             *sourceNode\SourceLine\CharLength = charLength
000258D4 <CLIModeSupport.ab3@458>             Poke.s &*sourceNode\SourceLine\Text,text
000258EE <CLIModeSupport.ab3@459>             If *prevLine Then *prevLine\NextLine = &*sourceNode\SourceLine
000258FC <CLIModeSupport.ab3@460>             *prevLine = &*sourceNode\SourceLine
0002591C <CLIModeSupport.ab3@461>             If *firstLine=#NULL Then *firstLine = &*sourceNode\SourceLine
0002592A <CLIModeSupport.ab3@462>             *lastLine = &*sourceNode\SourceLine
00025938 <CLIModeSupport.ab3@463>             count+1
0002593E <CLIModeSupport.ab3@465>         Wend
0002594E <CLIModeSupport.ab3@466>         FreeVec_ tempBuffer
00025952 <CLIModeSupport.ab3@468>         GetD0 *firstLine
00025986 <CLIModeSupport.ab3@469>         !ComData_SetL{comPtr_FirstSourceLine   ,D0}
000259BA <CLIModeSupport.ab3@470>         !ComData_SetL{comPtr_CurrentSourceLine ,D0}
000259BE <CLIModeSupport.ab3@471>         GetD0 *lastLine
000259F2 <CLIModeSupport.ab3@472>         !ComData_SetL{comPtr_LastSourceLine    ,D0}
000259F6 <CLIModeSupport.ab3@473>         GetD0 count
00025A2A <CLIModeSupport.ab3@474>         !ComData_SetL{comLong_TotalLines       ,D0}
00025A30 <CLIModeSupport.ab3@475>         MOVE.l D0,numlines
00025A66 <CLIModeSupport.ab3@477>         !ComData_SetW{comWord_TextBufferOffset ,#0}
00025A9C <CLIModeSupport.ab3@478>         !ComData_SetW{comWord_Column           ,#0}
00025AD2 <CLIModeSupport.ab3@479>         !ComData_SetW{comWord_ColumnsOffset    ,#0}
00025B0A <CLIModeSupport.ab3@480>         !ComData_SetL{comLong_DisplayLineOffset,#0}
00025B42 <CLIModeSupport.ab3@481>         !ComData_SetL{comLong_DisplayLine      ,#0}
00025BE8 <CLIModeSupport.ab3@483>         If ex="bb2" OR ex="bb" OR ex="ab2"    ; read xtra file
00025C28 <CLIModeSupport.ab3@484>           LoadXtra{sourcefile+".xtra"}
00025C60 <CLIModeSupport.ab3@487>         If ex="ab3"        ; apply xtra data
00025C7E <CLIModeSupport.ab3@488>           !asm
00025C82 <CLIModeSupport.ab3@489>           MOVEM.l D7/A6,-(A7)
00025C88 <CLIModeSupport.ab3@490>           JSR init_buffers
00025C8E <CLIModeSupport.ab3@491>           JSR reloadresident
00025C92 <CLIModeSupport.ab3@492>           MOVEM.l (A7)+,D7/A6
00025CBC <CLIModeSupport.ab3@493>           !basic
00025CD0 <CLIModeSupport.ab3@497>         If CLIMode=True                              ; check if we run in CLI mode 
00025D0E <CLIModeSupport.ab3@498>           !ComData_GetL{comLong_CursorPosStore,d0}   ; yes than get the line of the cursor position
00025D42 <CLIModeSupport.ab3@499>           !ComData_SetL{comLong_DisplayLine   ,d0}   ; and store it so it gets not lost by a save of the sourcecode
00025D78 <CLIModeSupport.ab3@503>         !ComData_SetW{comWord_SourceChanged,#0}
00025DD0 <CLIModeSupport.ab3@505>         currdir.s = dos_PathPart{sourcefile}
00025DFE <CLIModeSupport.ab3@506>         !ComData_LEA{comStr_CurrentDir,D0}
00025E02 <CLIModeSupport.ab3@507>         currentDirP.l = PutD0
00025E38 <CLIModeSupport.ab3@508>         Poke.s currentDirP,currdir
00025E66 <CLIModeSupport.ab3@509>         SetCurrentDir{currdir}
00025E94 <CLIModeSupport.ab3@511>         !ComData_LEA{comStr_SourceFileComplete,D0}
00025E98 <CLIModeSupport.ab3@512>         sfcP.l = PutD0
00025ECE <CLIModeSupport.ab3@513>         Poke.s sfcP,sourcefile
00025EFC <CLIModeSupport.ab3@515>         !ComData_LEA{comStr_SourceName,D0}
00025F00 <CLIModeSupport.ab3@516>         snP.l = PutD0
00025F64 <CLIModeSupport.ab3@517>         Poke.s snP,dos_FilePart{sourcefile}
00025F6A <CLIModeSupport.ab3@520>     Else
00025F98 <CLIModeSupport.ab3@521>       error{"Not enough memory to load file!"}
00025FA2 <CLIModeSupport.ab3@524>     file_Close{fid}
00025FAC <CLIModeSupport.ab3@526>  Function Return *firstLine
00025FC6 <CLIModeSupport.ab3@527> End Function
00025FF0 <CLIModeSupport.ab3@530> Function.l SaveXtra{filename.s}
00025FF6 <CLIModeSupport.ab3@531>   succ.l = False
00026016 <CLIModeSupport.ab3@532>   fp.l = Open_ (&filename,#MODE_NEWFILE)
00026020 <CLIModeSupport.ab3@533>   If fp
00026024 <CLIModeSupport.ab3@534>     GetD0 fp
00026026 <CLIModeSupport.ab3@535>     MOVE.l A4,-(A7)
00026044 <CLIModeSupport.ab3@536>     !asm
00026046 <CLIModeSupport.ab3@537>     MOVE.l D0,D7
0002604C <CLIModeSupport.ab3@538>     MOVEA.l _dosbase,A6
00026052 <CLIModeSupport.ab3@540>     JSR write_xtrafile
0002607C <CLIModeSupport.ab3@541>     !basic
0002607E <CLIModeSupport.ab3@542>     MOVE.l (A7)+,A4
000260AC <CLIModeSupport.ab3@543>     !ComData_LEA{comDef_XtraExtendBegin,D0}
000260B0 <CLIModeSupport.ab3@544>     aptr.l = PutD0
000260DE <CLIModeSupport.ab3@545>     !ComData_LEA{comDef_XtraExtendEnd,D0}
000260E2 <CLIModeSupport.ab3@546>     eptr.l = PutD0
00026108 <CLIModeSupport.ab3@547>     Write_ fp,aptr,eptr-aptr
00026118 <CLIModeSupport.ab3@548>     Close_ fp
0002611E <CLIModeSupport.ab3@549>     succ.l = True
00026124 <CLIModeSupport.ab3@550>   Else
00026152 <CLIModeSupport.ab3@551>     error{"WARNING: Unable to save .xtra file!"}
0002615C <CLIModeSupport.ab3@553>  Function Return succ
00026176 <CLIModeSupport.ab3@554> End Function
0002618C <CLIModeSupport.ab3@557> Statement RunSource{}
000261B6 <CLIModeSupport.ab3@558>   workpath.s = Peek.s(?exepath)
000261E4 <CLIModeSupport.ab3@559>   SetCurrentDir{workpath}
000261F8 <CLIModeSupport.ab3@561>   If ted_OpenLib{0}
00026234 <CLIModeSupport.ab3@562>     !ComData_LEA{COMDATABASE,d0}              : comdataP.l           = PutD0 : TEDSetJumpTable  {comdataP}
00026270 <CLIModeSupport.ab3@563>     !ComData_LEA{comPtr_FirstSourceLine,d0}   : FirstSourceLineP.l   = PutD0 : TEDSetFirstLine  {FirstSourceLineP}
000262AC <CLIModeSupport.ab3@564>     !ComData_LEA{comPtr_CurrentSourceLine,d0} : CurrentSourceLineP.l = PutD0 : TEDSetCurrentLine{CurrentSourceLineP}
000262E8 <CLIModeSupport.ab3@565>     !ComData_LEA{comPtr_LabelList,d0}         : LabelListP.l         = PutD0 : TEDSetLabelList  {LabelListP}
00026324 <CLIModeSupport.ab3@566>     !ComData_LEA{comWord_LabelCounter,d0}     : LabelCounterP.l      = PutD0 : TEDSetLabelCount {LabelCounterP}
0002632A <CLIModeSupport.ab3@567>   Else
00026358 <CLIModeSupport.ab3@568>     error{"ERROR: Unable to open ted.library!"}
0002635A <CLIModeSupport.ab3@571>   MOVE.l A4,-(A7)
00026378 <CLIModeSupport.ab3@572>   !asm
0002637E <CLIModeSupport.ab3@573>   JSR menu_run
000263A8 <CLIModeSupport.ab3@574>   !basic
000263AA <CLIModeSupport.ab3@575>   MOVE.l (A7)+,A4
000263BC <CLIModeSupport.ab3@576> End Statement
000263EE <CLIModeSupport.ab3@579> Function.l CompileSource{exefile.s,debug.l,release.l}
000263F8 <CLIModeSupport.ab3@580>   If debug ; set debugger
00026462 <CLIModeSupport.ab3@581>     !SetBoolXtra{use_debugger     ,1}
000264CC <CLIModeSupport.ab3@582>     !SetBoolXtra{link_debuginfo   ,1}
00026536 <CLIModeSupport.ab3@584>     !SetBoolXtra{overflowcheck    ,1}
000265A0 <CLIModeSupport.ab3@585>     !SetBoolXtra{assemblercheck   ,1}
0002660A <CLIModeSupport.ab3@586>     !SetBoolXtra{interruptcheck   ,1}
00026674 <CLIModeSupport.ab3@587>     !SetBoolXtra{autorun          ,1}
0002667A <CLIModeSupport.ab3@588>   Else
000266E4 <CLIModeSupport.ab3@589>     !SetBoolXtra{use_debugger     ,0}
0002674E <CLIModeSupport.ab3@590>     !SetBoolXtra{link_debuginfo   ,0}
00026758 <CLIModeSupport.ab3@593>   If release   ; set make smallest (for release)
000267C2 <CLIModeSupport.ab3@594>     !SetBoolXtra{make_smallestcode,1}
000267C8 <CLIModeSupport.ab3@595>   Else
00026832 <CLIModeSupport.ab3@596>     !SetBoolXtra{make_smallestcode,0}
0002683A <CLIModeSupport.ab3@599>   newexesize.l = $7FFFFFFF
00026868 <CLIModeSupport.ab3@601>   !ComData_LEA{comStr_CurrentDir,D0}
0002686C <CLIModeSupport.ab3@602>   currentDirP.l = PutD0
00026894 <CLIModeSupport.ab3@603>   sourcepath.s = Peek.s(currentDirP)
0002689A <CLIModeSupport.ab3@606>     oldexesize.l = newexesize
000268A0 <CLIModeSupport.ab3@609>     CLR.w anyerrs
000268A6 <CLIModeSupport.ab3@610>     CLR.w debugversion
000268AC <CLIModeSupport.ab3@611>     CLR.w flag_noPED
000268B2 <CLIModeSupport.ab3@612>     CLR.w flag_noCLI
000268BC <CLIModeSupport.ab3@613>     MOVE.l #$FFFFffff,linenumat
000268C6 <CLIModeSupport.ab3@614>     MOVE.l #$FFFFffff,compilelinecounter
000268F4 <CLIModeSupport.ab3@616>     SetCurrentDir{sourcepath}
00026920 <CLIModeSupport.ab3@618>     If exefile
00026928 <CLIModeSupport.ab3@619>       MOVE.w #1,makeexec_remember
0002695C <CLIModeSupport.ab3@621>       global_exefilename = exefile
0002696E <CLIModeSupport.ab3@622>       Poke.l ?ptr_newexefilename,&global_exefilename
000269D4 <CLIModeSupport.ab3@623>       Poke.s ?exepath     ,dos_PathPart{exefile}
00026A3A <CLIModeSupport.ab3@624>       Poke.s ?exefilename ,dos_FilePart{exefile}
00026A40 <CLIModeSupport.ab3@625>     Else
00026A48 <CLIModeSupport.ab3@626>       MOVE.w #0,makeexec_remember
00026A4A <CLIModeSupport.ab3@630>     MOVE.l A4,-(a7)
00026A68 <CLIModeSupport.ab3@631>     !asm
00026AA6 <CLIModeSupport.ab3@632>     !ComData_GetL{comPtr_FirstSourceLine,A5}
00026AE4 <CLIModeSupport.ab3@633>     !ComData_GetL{comLong_TotalLines,D7}
00026AEA <CLIModeSupport.ab3@635>     MOVE.l A5,firstitem_
00026AF0 <CLIModeSupport.ab3@636>     MOVE.w D7,numlines_org
00026AF6 <CLIModeSupport.ab3@637>     MOVE.l d7,numlines
00026B00 <CLIModeSupport.ab3@640>       MOVE.w makeexec_remember,makeexec                                     ;MOVE.w #$FFFF,debugversion
00026B06 <CLIModeSupport.ab3@641>       JSR ab3_OpenDebugFile
00026B0C <CLIModeSupport.ab3@642>       JSR startcompile
00026B12 <CLIModeSupport.ab3@643>       JSR ab3_CloseDebugFile
00026B1C <CLIModeSupport.ab3@644>       CMP.l #"NORE",reqmode
00026B20 <CLIModeSupport.ab3@645>     BEQ _ab3_compileloop
00026B4A <CLIModeSupport.ab3@647>     !basic
00026B4C <CLIModeSupport.ab3@648>     MOVE.l (a7)+,A4
00026B52 <CLIModeSupport.ab3@650>     MOVE.l globallinecount,D0
00026B56 <CLIModeSupport.ab3@651>     counter.l = PutD0
00026B5C <CLIModeSupport.ab3@653>     MOVE.l anyerrs,d0
00026B60 <CLIModeSupport.ab3@654>     err.l = PutD0
00026BBA <CLIModeSupport.ab3@656>     If cli_verbose>=1 Then NPrint counter-1," line(s) compiled."
00026BCC <CLIModeSupport.ab3@658>     If err=0
00026BF8 <CLIModeSupport.ab3@659>       If exefile
00026C9E <CLIModeSupport.ab3@660>         If cli_verbose>=1 Then NPrint "Saving executable as \\22",exefile,"\\22."
00026CBC <CLIModeSupport.ab3@661>         !asm
00026CC2 <CLIModeSupport.ab3@662>         JSR savefile
00026CEC <CLIModeSupport.ab3@663>         !basic
00026CF6 <CLIModeSupport.ab3@664>         If release
00026D28 <CLIModeSupport.ab3@665>           newexesize.l = dos_GetFileSize{exefile}
00026D42 <CLIModeSupport.ab3@666>           If newexesize<=0 Then newexesize = $7FFFFFFF
00026D56 <CLIModeSupport.ab3@671>   Until newexesize>=oldexesize
00026D60 <CLIModeSupport.ab3@673>  Function Return err
00026D7A <CLIModeSupport.ab3@674> End Function
00026DA4 <CLIModeSupport.ab3@678> Function.l SaveSource{filename.s}
00026DC8 <CLIModeSupport.ab3@679>   Format ""
00026E06 <CLIModeSupport.ab3@680>   !ComData_GetL{comPtr_FirstSourceLine,D0}
00026E0A <CLIModeSupport.ab3@681>   *sourceBase.SourceLine_t = PutD0
00026E48 <CLIModeSupport.ab3@683>   !ComData_GetL{comPtr_PreProcessor,D0}
00026E4C <CLIModeSupport.ab3@684>   *PreProcessor.preprocessor = PutD0
00026E8A <CLIModeSupport.ab3@687>   !ComData_GetL{comLong_DisplayLineOffset,D0}
00026EC8 <CLIModeSupport.ab3@688>   !ComData_GetL{comLong_DisplayLine,D1}
00026ECA <CLIModeSupport.ab3@689>   ADD.l d1,d0
00026EFE <CLIModeSupport.ab3@690>   !ComData_SetL{comLong_CursorPosStore,d0}
00026F04 <CLIModeSupport.ab3@692>   succ.l = False
00026F48 <CLIModeSupport.ab3@693>   fid.l = file_Open{filename,#file_write}
00026F5A <CLIModeSupport.ab3@694>   If fid>=0
00026F62 <CLIModeSupport.ab3@696>     totalLength.l = 0
00026F68 <CLIModeSupport.ab3@697>     *sourceLine.SourceLine_t = *sourceBase
00026F72 <CLIModeSupport.ab3@699>     While *sourceLine ; estimate the size of the temp buffer
00026F80 <CLIModeSupport.ab3@700>       baseptr.l = &*sourceLine\Text
00026F86 <CLIModeSupport.ab3@701>       sptr.l = baseptr
00026FAE <CLIModeSupport.ab3@702>       While Peek.b(sptr) : sptr+1 : Wend
00026FC8 <CLIModeSupport.ab3@703>       totalLength + sptr-baseptr+1
00026FD2 <CLIModeSupport.ab3@704>       *sourceLine = *sourceLine\NextLine
00026FD8 <CLIModeSupport.ab3@705>     Wend
00026FF6 <CLIModeSupport.ab3@707>     tmp.l      = AllocVec_(totalLength,#MEMF_CLEAR)
00027000 <CLIModeSupport.ab3@708>     If tmp
00027006 <CLIModeSupport.ab3@709>       *sourceLine = *sourceBase
0002700C <CLIModeSupport.ab3@710>       dptr.l     = tmp
00027016 <CLIModeSupport.ab3@711>       While *sourceLine
00027024 <CLIModeSupport.ab3@712>         baseptr.l = &*sourceLine\Text
0002702A <CLIModeSupport.ab3@713>         sptr.l = baseptr
0002703A <CLIModeSupport.ab3@715>           char.b = Peek.b(sptr)
00027066 <CLIModeSupport.ab3@716>           Poke.b dptr,char : sptr +1 : dptr+1
0002707C <CLIModeSupport.ab3@717>         Until char=0
00027086 <CLIModeSupport.ab3@718>         *sourceLine = *sourceLine\NextLine
0002708C <CLIModeSupport.ab3@719>       Wend
000270E4 <CLIModeSupport.ab3@721>       ex.s = dos_GetExt{filename}
00027156 <CLIModeSupport.ab3@723>       If ex="bb2" OR ex="bb" ; write tokenized
0002716E <CLIModeSupport.ab3@724>         succ = file_WriteMem{fid,tmp,totalLength}
00027174 <CLIModeSupport.ab3@725>       Else
000271AC <CLIModeSupport.ab3@726>         If ex="ab3" ; write Xtra as text...
000271DA <CLIModeSupport.ab3@728>           cliargs.s = Peeks$(?str_cliarguments,255)
00027204 <CLIModeSupport.ab3@729>           cliargs   = Peek.s(&cliargs)
0002720E <CLIModeSupport.ab3@731>           resptr.l = ?residents_table
00027236 <CLIModeSupport.ab3@732>           residents.s = Peek.s(resptr)
00027260 <CLIModeSupport.ab3@733>           For i.l = 0 To 6
00027302 <CLIModeSupport.ab3@734>             If Right$(residents,1)><"," Then residents + ","
00027310 <CLIModeSupport.ab3@735>             resptr + $44
00027360 <CLIModeSupport.ab3@736>             residents  + Peek.s(resptr)
00027370 <CLIModeSupport.ab3@737>           Next
00027438 <CLIModeSupport.ab3@738>           If Right$(residents,1)="," Then residents=Left$(residents,FLen(residents)-1)
0002746C <CLIModeSupport.ab3@740>           If (Peek.b(?use_debugger      )&$80) Then RuntimeDebug.l   = 1:Else RuntimeDebug   = 0
000274A0 <CLIModeSupport.ab3@741>           If (Peek.b(?create_iconfile   )&$80) Then CreateIcon.l     = 1:Else CreateIcon     = 0
000274D4 <CLIModeSupport.ab3@742>           If (Peek.b(?make_smallestcode )&$80) Then MakeSmallest.l   = 1:Else MakeSmallest   = 0
00027508 <CLIModeSupport.ab3@743>           If (Peek.b(?link_debuginfo    )&$80) Then DebugInfo.l      = 1:Else DebugInfo      = 0
0002753C <CLIModeSupport.ab3@744>           If (Peek.b(?autorun           )&$80) Then AutoRun.l        = 1:Else AutoRun        = 0
00027570 <CLIModeSupport.ab3@745>           If (Peek.b(?assemblercheck    )&$80) Then AssemblerCheck.l = 1:Else AssemblerCheck = 0
000275A4 <CLIModeSupport.ab3@746>           If (Peek.b(?interruptcheck    )&$80) Then InterruptCheck.l = 1:Else InterruptCheck = 0
000275D8 <CLIModeSupport.ab3@747>           If (Peek.b(?overflowcheck     )&$80) Then OverflowCheck.l  = 1:Else OverflowCheck  = 0
000275DA <CLIModeSupport.ab3@749>           CLR.l d0
00027618 <CLIModeSupport.ab3@750>           !ComData_GetW{comWord_CreateDebugFile,D0}
0002761C <CLIModeSupport.ab3@751>           CreateDbgFile.l = PutD0
0002765A <CLIModeSupport.ab3@754>           !ComData_GetL{comLong_DisplayLineOffset,d0}
00027698 <CLIModeSupport.ab3@755>           !ComData_GetL{comLong_DisplayLine      ,d1}
0002769A <CLIModeSupport.ab3@756>           ADD.l d1,d0
000276A0 <CLIModeSupport.ab3@757>           ADD.l #1,d0
000276A4 <CLIModeSupport.ab3@758>           CursorLine.l = PutD0
000276A6 <CLIModeSupport.ab3@760>           CLR.l d0
000276E4 <CLIModeSupport.ab3@761>           !ComData_GetW{comWord_ColumnsOffset,d0}
00027722 <CLIModeSupport.ab3@762>           !ComData_GetW{comWord_Column       ,d1}
00027724 <CLIModeSupport.ab3@763>           EXT.l d0
00027726 <CLIModeSupport.ab3@764>           EXT.l d1
00027728 <CLIModeSupport.ab3@765>           ADD.l d1,d0
0002772E <CLIModeSupport.ab3@766>           ADD.l #1,d0
00027732 <CLIModeSupport.ab3@767>           CursorColumn.l = PutD0
00027742 <CLIModeSupport.ab3@769>           VersionInfo.l  = Peek.l(?versioninformation)
0002775A <CLIModeSupport.ab3@770>           MajorVersion.l = (VersionInfo & $FF000000) LSR 24
00027772 <CLIModeSupport.ab3@771>           MinorVersion.l = (VersionInfo & $00FF0000) LSR 16
0002778A <CLIModeSupport.ab3@772>           PatchVersion.l = (VersionInfo & $0000FF00) LSR 8
000277B4 <CLIModeSupport.ab3@774>           ExePath.s = Peek.s(?exepath)
000277DE <CLIModeSupport.ab3@775>           ExeFile.s = Peek.s(?exefilename)
0002780C <CLIModeSupport.ab3@777>           !ComData_LEA{comStr_LabelSearchString,d0}
00027810 <CLIModeSupport.ab3@778>           labelP.l = PutD0
00027838 <CLIModeSupport.ab3@779>           LabelSearch.s = Peek.s(labelP)
0002783A <CLIModeSupport.ab3@780>           CLR.l d0
00027878 <CLIModeSupport.ab3@781>           !ComData_GetW{comWord_LabelRemark,d0}
0002787C <CLIModeSupport.ab3@782>           LabelRemark.w = PutD0
000278BA <CLIModeSupport.ab3@783>           !ComData_GetW{comWord_LabelAll,d0}
000278BE <CLIModeSupport.ab3@784>           LabelAll.w = PutD0
000278FC <CLIModeSupport.ab3@785>           !ComData_GetL{comLong_Label1VisableItemStore,d0}        ; added the save of the inner postion of the labellist  tomsmart1
00027900 <CLIModeSupport.ab3@786>           LabelPosition.l= PutD0
00027926 <CLIModeSupport.ab3@788>           file_WriteLine{fid,"; XTRA"}
0002794C <CLIModeSupport.ab3@789>           file_WriteLine{fid,"; Embedded .xtra Header"}
00027972 <CLIModeSupport.ab3@790>           file_WriteLine{fid,"; "}
00027998 <CLIModeSupport.ab3@791>           file_WriteLine{fid,"; General Info"}
000279BE <CLIModeSupport.ab3@792>           file_WriteLine{fid,"; -------------------------------------------------------"}
00027A14 <CLIModeSupport.ab3@793>           file_WriteLine{fid,"; ExePath         = \\22"+ExePath+"\\22"}
00027A6A <CLIModeSupport.ab3@794>           file_WriteLine{fid,"; ExeFile         = \\22"+ExeFile+"\\22"}
00027AB8 <CLIModeSupport.ab3@795>           file_WriteLine{fid,"; CreateIcon      = "+Str$(CreateIcon)}
00027B0E <CLIModeSupport.ab3@796>           file_WriteLine{fid,"; Residents       = \\22"+residents+"\\22"}
00027B34 <CLIModeSupport.ab3@797>           file_WriteLine{fid,"; "}
00027B5A <CLIModeSupport.ab3@798>           file_WriteLine{fid,"; Compiler"}
00027B80 <CLIModeSupport.ab3@799>           file_WriteLine{fid,"; -------------------------------------------------------"}
00027BD6 <CLIModeSupport.ab3@800>           file_WriteLine{fid,"; StringBuffer    = "+Str$(Peek.l(?stringbuffer))}
00027C24 <CLIModeSupport.ab3@801>           file_WriteLine{fid,"; MakeSmallest    = "+Str$(MakeSmallest)}
00027CDE <CLIModeSupport.ab3@802>           file_WriteLine{fid,"; Version         = "+Str$(MajorVersion)+"."+Str$(MinorVersion)+"."+Str$(PatchVersion)}
00027D34 <CLIModeSupport.ab3@803>           file_WriteLine{fid,"; NumberOfBuilds  = "+Str$(Peek.l(?number_of_builds))}
00027D5A <CLIModeSupport.ab3@804>           file_WriteLine{fid,"; "}
00027D80 <CLIModeSupport.ab3@805>           file_WriteLine{fid,"; Debugger"}
00027DA6 <CLIModeSupport.ab3@806>           file_WriteLine{fid,"; -------------------------------------------------------"}
00027DFC <CLIModeSupport.ab3@807>           file_WriteLine{fid,"; CliArgs         = \\22"+cliargs+"\\22"}
00027E52 <CLIModeSupport.ab3@808>           file_WriteLine{fid,"; StackSize       = "+Str$(Peek.l(?stacksize))}
00027EA0 <CLIModeSupport.ab3@809>           file_WriteLine{fid,"; RuntimeDebug    = "+Str$(RuntimeDebug)}
00027EEE <CLIModeSupport.ab3@810>           file_WriteLine{fid,"; DebugInfo       = "+Str$(DebugInfo)}
00027F3C <CLIModeSupport.ab3@811>           file_WriteLine{fid,"; CreateDbgFile   = "+Str$(CreateDbgFile)}
00027F8A <CLIModeSupport.ab3@812>           file_WriteLine{fid,"; OverflowCheck   = "+Str$(OverflowCheck)}
00027FD8 <CLIModeSupport.ab3@813>           file_WriteLine{fid,"; AssemblerCheck  = "+Str$(AssemblerCheck)}
00028026 <CLIModeSupport.ab3@814>           file_WriteLine{fid,"; InterruptCheck  = "+Str$(InterruptCheck)}
00028074 <CLIModeSupport.ab3@815>           file_WriteLine{fid,"; AutoRun         = "+Str$(AutoRun)}
0002809A <CLIModeSupport.ab3@816>           file_WriteLine{fid,"; "}
000280C0 <CLIModeSupport.ab3@817>           file_WriteLine{fid,"; Editor"}
000280E6 <CLIModeSupport.ab3@818>           file_WriteLine{fid,"; -------------------------------------------------------"}
00028134 <CLIModeSupport.ab3@819>           file_WriteLine{fid,"; CursorLine      = "+Str$(CursorLine)}
00028182 <CLIModeSupport.ab3@820>           file_WriteLine{fid,"; CursorColumn    = "+Str$(CursorColumn)}
000281D8 <CLIModeSupport.ab3@821>           file_WriteLine{fid,"; LabelSearch     = \\22"+LabelSearch+"\\22"}
00028226 <CLIModeSupport.ab3@822>           file_WriteLine{fid,"; LabelRemark     = "+Str$(LabelRemark)}
00028274 <CLIModeSupport.ab3@823>           file_WriteLine{fid,"; LabelAll        = "+Str$(LabelAll)}
000282C2 <CLIModeSupport.ab3@824>           file_WriteLine{fid,"; LabelPosition   = "+Str$(LabelPosition)}
000282E8 <CLIModeSupport.ab3@825>           file_WriteLine{fid,"; "}
0002830E <CLIModeSupport.ab3@826>           file_WriteLine{fid,"; Blitz Objects"}
00028334 <CLIModeSupport.ab3@827>           file_WriteLine{fid,"; -------------------------------------------------------"}
0002836C <CLIModeSupport.ab3@828>           For i.l = 0 To Peek.w(?number_of_objects)-1
00028394 <CLIModeSupport.ab3@829>             name.s = "                                "
000283A8 <CLIModeSupport.ab3@830>             GetD0 &name,i:JSR getobjectentry : a.l = PutD0
0002841C <CLIModeSupport.ab3@831>             name.s = Replace$(Peek.s(&name)," ","-")
00028462 <CLIModeSupport.ab3@832>             maxname.s = "; Max "+name
00028510 <CLIModeSupport.ab3@833>             If FLen(maxname)<18 Then maxname + LSet$(" ",18-FLen(maxname))
0002857C <CLIModeSupport.ab3@834>             file_WriteLine{fid,maxname+"= "+Str$(a)}
0002858C <CLIModeSupport.ab3@835>           Next
000285B2 <CLIModeSupport.ab3@837>           file_WriteLine{fid,"; /XTRA"}
000285BC <CLIModeSupport.ab3@839>         file_Flush{fid}
000285E6 <CLIModeSupport.ab3@840>         plainLength.l = preproc_DetokenizeFP{*PreProcessor,tmp,totalLength,file_GetFH{fid}}
000285EC <CLIModeSupport.ab3@841>         succ.l = True
000285FC <CLIModeSupport.ab3@843>       FreeVec_ tmp
000286A2 <CLIModeSupport.ab3@845>       If ex="bb2" OR ex="bb" OR ex="ab2"    ; write xtra file
000286E2 <CLIModeSupport.ab3@846>         SaveXtra{filename+".xtra"}
000286E8 <CLIModeSupport.ab3@848>     Else
0002873E <CLIModeSupport.ab3@849>       error{!TRANS{"Not enough memory for temp buffer!"}}
00028748 <CLIModeSupport.ab3@851>     file_Close{fid}
00028752 <CLIModeSupport.ab3@853>  Function Return succ
0002876C <CLIModeSupport.ab3@854> End Function
0002878E <CLIModeSupport.ab3@910> Function.l WriteDump{fid.l,dumpFlags.l,mode.l}
000287B0 <CLIModeSupport.ab3@911>   MOVE.l realconstbase,d0            : constantbaseP.l  = PutD0 : If constantbaseP Then *constant.Constant_t = Peek.l(constantbaseP)
0002880A <CLIModeSupport.ab3@912>   !ComData_GetL{comPtr_VarBase,d0}   : varbaseP.l       = PutD0 : If varbaseP      Then *var.Var_t           = Peek.l(varbaseP)
0002882C <CLIModeSupport.ab3@913>   MOVE.l newtypebase,d0              : newtypebaseP.l   = PutD0 : If newtypebaseP  Then *typ.NewType_t       = Peek.l(newtypebaseP)
00028886 <CLIModeSupport.ab3@914>   !ComData_GetL{comPtr_MacroBase,d0} : macrobaseP.l     = PutD0 : If macrobaseP    Then *mac.Macro_t         = Peek.l(macrobaseP)
000288C8 <CLIModeSupport.ab3@915>   !ComData_GetL{comPtr_TokenBase,D0} : *token.tokeninfo = PutD0
000288CE <CLIModeSupport.ab3@917>   Select mode
000288DC <CLIModeSupport.ab3@918>     Case 0 ; binary hashmaps
000288E2 <CLIModeSupport.ab3@920>     Default ; ASCII
000288F6 <CLIModeSupport.ab3@921>       If dumpFlags&#DUMPFLG_CONSTANTS
00028900 <CLIModeSupport.ab3@922>         While *constant
0002897A <CLIModeSupport.ab3@923>           file_WriteLine{fid,"CONSTANT "+Peek.s(&*constant\nameA)+" $"+Hex$(*constant\value)}
00028984 <CLIModeSupport.ab3@924>           *constant = *constant\next_
0002898A <CLIModeSupport.ab3@925>         Wend
0002899E <CLIModeSupport.ab3@928>       If dumpFlags&#DUMPFLG_VARS
000289A8 <CLIModeSupport.ab3@929>         While *var
00028A28 <CLIModeSupport.ab3@930>           file_WriteLine{fid,"VAR "+Peek.s(&*var\nameA)+"."+Peek.s(&*var\typ\nameA)}
00028A32 <CLIModeSupport.ab3@931>           *var = *var\next_
00028A38 <CLIModeSupport.ab3@932>         Wend
00028A4C <CLIModeSupport.ab3@935>       If dumpFlags&#DUMPFLG_NEWTYPES
00028A56 <CLIModeSupport.ab3@936>         While *typ
00028A9E <CLIModeSupport.ab3@937>           file_WriteLine{fid,"NEWTYPE "+Peek.s(&*typ\nameA)}
00028AA8 <CLIModeSupport.ab3@939>           *typ = *typ\next_
00028AAE <CLIModeSupport.ab3@940>         Wend
00028AC2 <CLIModeSupport.ab3@943>       If dumpFlags&#DUMPFLG_MACROS
00028ACC <CLIModeSupport.ab3@944>         While *mac
00028B14 <CLIModeSupport.ab3@945>           file_WriteLine{fid,"MACRO "+Peek.s(&*mac\nameA)}
00028B1E <CLIModeSupport.ab3@946>           *mac = *mac\next_
00028B24 <CLIModeSupport.ab3@947>         Wend
00028B38 <CLIModeSupport.ab3@950>       If dumpFlags&#DUMPFLG_FUNCTIONS
00028B5E <CLIModeSupport.ab3@951>         file_WriteLine{fid,"FUNCTION Function dump not supported yet!"}
00028B72 <CLIModeSupport.ab3@954>       If dumpFlags&#DUMPFLG_LABELS ; <= same like constants!?
00028B98 <CLIModeSupport.ab3@955>         file_WriteLine{fid,"LABEL Label dump not supported yet!"}
00028BAC <CLIModeSupport.ab3@958>       If dumpFlags&#DUMPFLG_LIBS
00028BD2 <CLIModeSupport.ab3@959>         file_WriteLine{fid,"LIB Blitz Library dump not supported yet!"}
00028BE6 <CLIModeSupport.ab3@962>       If dumpFlags&#DUMPFLG_TOKENS ; <= all available tokens
00028BF0 <CLIModeSupport.ab3@963>         While *token
00028C1E <CLIModeSupport.ab3@964>           name.s    = Peek.s(&*token\dat)
00028C6E <CLIModeSupport.ab3@965>           help.s    = Peek.s(&*token\dat+FLen(name)+1)
00028C8E <CLIModeSupport.ab3@966>           libid.l   = (*token\number LSR 7) &$FF
00028CA6 <CLIModeSupport.ab3@967>           tokenid.l = *token\number & $7F
00028D8A <CLIModeSupport.ab3@968>           file_WriteLine{fid,"TOKEN "+Str$(libid)+"/"+Str$(tokenid)+" "+name+" "+help}
00028D94 <CLIModeSupport.ab3@969>           *token = *token\next_token
00028D9A <CLIModeSupport.ab3@970>         Wend
00028D9C <CLIModeSupport.ab3@972>   End Select
00028DB0 <CLIModeSupport.ab3@973> End Function
00028DE2 <CLIModeSupport.ab3@976> Function.l DumpFile{filename.s,dumpFlags.l,mode.l}
00028DE8 <CLIModeSupport.ab3@977>   succ.l = False
00028E2C <CLIModeSupport.ab3@978>   fid.l = file_Open{filename,#file_forcewrite}
00028E3E <CLIModeSupport.ab3@979>   If fid>=0
00028E50 <CLIModeSupport.ab3@980>     WriteDump{fid,dumpFlags,mode}
00028E5A <CLIModeSupport.ab3@981>     file_Close{fid}
00028E60 <CLIModeSupport.ab3@982>     succ.l = True
00028E6A <CLIModeSupport.ab3@984>  Function Return succ
00028E84 <CLIModeSupport.ab3@985> End Function
00028E84 <AmiBlitz3.ab2@101> 
00028EF8 <AmiBlitz3.ab2@106> dynassign.s = dos_GetToolString{"ASSIGN","Blitz3:"}
00028F30 <AmiBlitz3.ab2@107> If dynassign <> ""
00028F46 <AmiBlitz3.ab2@108>     *AssignSema.SignalSemaphore = FindSemaphore_(&dynassign)    ; does it already exist?
00028F50 <AmiBlitz3.ab2@109>     If *AssignSema
00028F60 <AmiBlitz3.ab2@110>       ObtainSemaphoreShared_ *AssignSema
00028F66 <AmiBlitz3.ab2@111>     Else                                                        ; no, create one...
00028F86 <AmiBlitz3.ab2@112>       *AssignSema = AllocVec_ (SizeOf.SignalSemaphore,#MEMF_PUBLIC|#MEMF_CLEAR)
00028F90 <AmiBlitz3.ab2@113>       If *AssignSema
00028FA0 <AmiBlitz3.ab2@114>         InitSemaphore_ *AssignSema
00028FD4 <AmiBlitz3.ab2@116>         *AssignSema\ss_Link\ln_Name = AllocVec_(FLen(dynassign)+1,#MEMF_PUBLIC|#MEMF_CLEAR)
00028FE6 <AmiBlitz3.ab2@117>         If *AssignSema\ss_Link\ln_Name
00029022 <AmiBlitz3.ab2@118>           Poke.s  *AssignSema\ss_Link\ln_Name,dynassign
0002902E <AmiBlitz3.ab2@120>         *AssignSema\ss_Link\ln_Pri  = 1
0002903A <AmiBlitz3.ab2@121>         *AssignSema\ss_Link\ln_Type = #NT_SIGNALSEM
0002904A <AmiBlitz3.ab2@123>         AddSemaphore_ *AssignSema
0002905A <AmiBlitz3.ab2@124>         ObtainSemaphoreShared_ *AssignSema
000290A6 <AmiBlitz3.ab2@130>   mydir.s = dos_GetProgDir{"Sys:"}
00029106 <AmiBlitz3.ab2@131>   If dos_SetAssign{dynassign,mydir,False}
0002919A <AmiBlitz3.ab2@132>     dos_AddAssign{"LIBS:",dos_AddPart{dynassign,"Libs"}}
000291D2 <AmiBlitz3.ab2@135>   Poke$ ?str_blitz3assign,dynassign
00029254 <AmiBlitz3.ab2@136>   Poke$ ?str_defaultdbug,dos_AddPart{dynassign,"Debug/DefaultDBug"}
000292D6 <AmiBlitz3.ab2@139>   Poke$ ?str_path_acidlibs,dos_AddPart{dynassign, "BlitzLibs/AcidLibs"}
00029358 <AmiBlitz3.ab2@140>   Poke$ ?str_path_deflibs ,dos_AddPart{dynassign, "BlitzLibs/DefLibs" }
000293DA <AmiBlitz3.ab2@141>   Poke$ ?str_path_userlibs,dos_AddPart{dynassign, "BlitzLibs/UserLibs"}
0002945C <AmiBlitz3.ab2@142>   Poke$ ?str_path_includes,dos_AddPart{dynassign, "Sourcecodes/Includes"}
000294D0 <AmiBlitz3.ab2@143>   my_systemdir$    = dos_AddPart{dynassign, "System"}
00029544 <AmiBlitz3.ab2@144>   my_residentsdir$ = dos_AddPart{dynassign, "BlitzLibs/Residents"}
000295B8 <AmiBlitz3.ab2@145>   my_blitzlibsdir$ = dos_AddPart{dynassign, "BlitzLibs"}
000295E6 <AmiBlitz3.ab2@146>   dos_CreateDir{my_blitzlibsdir$}
0002960A <AmiBlitz3.ab2@147>   dos_CreateDir{Peek$(?str_path_userlibs)}
00029638 <AmiBlitz3.ab2@148>   dos_CreateDir{my_residentsdir$}
00029666 <AmiBlitz3.ab2@149>   dos_CreateDir{my_systemdir$}
00029730 <AmiBlitz3.ab2@155> pedfile$ = dos_GetToolString{"EDITOR",dos_AddPart{my_systemdir$,"PED"}}
00029768 <AmiBlitz3.ab2@156> Poke.s ?str_pedfile,pedfile$
000297A6 <AmiBlitz3.ab2@158> If dos_GetToolState{"START_WITHOUT_LIBS"} = -1
000297B6 <AmiBlitz3.ab2@159>   Poke.b ?start_without_libs,1
000297BC <AmiBlitz3.ab2@160> Else
000297CC <AmiBlitz3.ab2@161>   Poke.b ?start_without_libs,0
000297F2 <AmiBlitz3.ab2@164> !TRANS_INIT{"AmiBlitz3"}     ; init localization via translation.include
0002981A <AmiBlitz3.ab2@167> errorout.s = ""                                            ; for the error text
00029820 <AmiBlitz3.ab2@168> ende.b     =  False                                        ; abort indicater
00029858 <AmiBlitz3.ab2@170> If dos_CheckLib{"wizard.library",42} = False               ; needed for Compiler, PED and REDDebugger
0002989E <AmiBlitz3.ab2@171>   errorout + "Missing wizard.library:\\nThis library is required in version 42 by this IDE.\\n\\n"
000298A4 <AmiBlitz3.ab2@172>   ende = True
000298DC <AmiBlitz3.ab2@175> If dos_CheckLib{"reqtools.library",38} = False             ; needed for PED and REDDebugger
00029922 <AmiBlitz3.ab2@176>   errorout + "Missing reqtools.library:\\nThis library is required in version 38 by the IDE.\\n\\n"
00029928 <AmiBlitz3.ab2@177>   ende = True
00029960 <AmiBlitz3.ab2@180> If dos_CheckLib{"ted.library",1} = False                   ; needed for PED and REDDebugger
000299A6 <AmiBlitz3.ab2@181>   errorout + "Missing ted.library:\\nThis library is required in version 1 by the IDE.\\n\\n"
000299AC <AmiBlitz3.ab2@182>   ende = True
000299E4 <AmiBlitz3.ab2@185> If dos_CheckLib{"disassembler.library",40} = False         ; only needed for REDDebugger
00029A2A <AmiBlitz3.ab2@186>   errorout + "Missing disassembler.library:\\nThis library is required in version 40 for REDDebugger\\nASM debugging won't work.\\n\\n"
00029A62 <AmiBlitz3.ab2@189> If errorout <> ""                                          ; check if something to show
00029AA8 <AmiBlitz3.ab2@190>    errorout = "Please reinstall AmiBlitz3 or install the librarys in LIBS:\\n\\n"+errorout
00029AB6 <AmiBlitz3.ab2@191>    If ende
00029AFC <AmiBlitz3.ab2@192>      errorout + "...that the IDE can Start!"               ; for abort
00029B02 <AmiBlitz3.ab2@193>    Else
00029B48 <AmiBlitz3.ab2@194>      errorout + "...for a full working IDE!"               ; for limited start
00029BAA <AmiBlitz3.ab2@196>    error{!TRANS{errorout}}
00029BB6 <AmiBlitz3.ab2@199> dbg_fid.l = -1 ; no debug file id yet!
00029BCA <AmiBlitz3.ab2@203> If ende Then Goto abnormal_exit                            ; remove Assigns
00029BD4 <AmiBlitz3.ab2@206> If CLIMode
00029BDA <AmiBlitz3.ab2@209>   err.l      = False                                       ; indicate that an error has occured
00029BE0 <AmiBlitz3.ab2@210>   showhelp.l = False                                       ; show the CLI tool's help
00029C2C <AmiBlitz3.ab2@213>   cli_progpath.s     = dos_GetProgDir{"Blitz3:"}
00029C54 <AmiBlitz3.ab2@214>   cli_sourcefile.s   = ""
00029C7C <AmiBlitz3.ab2@215>   cli_exefile.s      = ""
00029CA4 <AmiBlitz3.ab2@216>   cli_savefile.s     = ""
00029CCC <AmiBlitz3.ab2@217>   cli_dumpfile.s     = ""
00029CF4 <AmiBlitz3.ab2@218>   cli_includepath.s  = ""
00029D1C <AmiBlitz3.ab2@219>   cli_blitzlibpath.s = ""
00029D22 <AmiBlitz3.ab2@220>   cli_debuginfo.l    = False
00029D28 <AmiBlitz3.ab2@221>   cli_run.l          = False
00029D30 <AmiBlitz3.ab2@222>   cli_dumpflags.l    = $FFFFFFFF
00029D58 <AmiBlitz3.ab2@223>   cli_info.s         = ""
00029D5E <AmiBlitz3.ab2@224>   cli_release.l      = False
00029D68 <AmiBlitz3.ab2@225>   cli_numargs.l      = dos_GetNumArgs{}
00029D6E <AmiBlitz3.ab2@226>   cli_gui.l          = False
00029D76 <AmiBlitz3.ab2@227>   cli_dumpform.l     = 1 ; 0 = bin, 1 = ASCII
00029D7E <AmiBlitz3.ab2@228>   cli_verbose.l      = 1
00029D96 <AmiBlitz3.ab2@229>   If cli_numargs=0 Then showhelp=True
00029DC6 <AmiBlitz3.ab2@233>     arg.s = dos_GetNextArg{}                               ; get the next CLI argument
00029E12 <AmiBlitz3.ab2@234>     larg.s = LCase$(arg)                                   ; lower case the option string
00029EDA <AmiBlitz3.ab2@235>     If Left$(larg,1)="-" Then larg = Right$(larg,FLen(larg)-1)
00029F10 <AmiBlitz3.ab2@236>     Select larg
00029F5C <AmiBlitz3.ab2@237>       Case "s" : larg="source"
00029FAE <AmiBlitz3.ab2@238>       Case "e" : larg="exe"
0002A000 <AmiBlitz3.ab2@239>       Case "d" : larg="debug"
0002A052 <AmiBlitz3.ab2@240>       Case "r" : larg="release"
0002A0A4 <AmiBlitz3.ab2@241>       Case "h" : larg="help"
0002A0F6 <AmiBlitz3.ab2@242>       Case "v" : larg="verbose"
0002A104 <AmiBlitz3.ab2@243>     End Select
0002A13A <AmiBlitz3.ab2@245>     Select larg
0002A18E <AmiBlitz3.ab2@246>       Case "exe"      : cli_exefile     = dos_GetNextArg{}
0002A1E8 <AmiBlitz3.ab2@247>       Case "source"   : cli_sourcefile  = dos_GetNextArg{}
0002A242 <AmiBlitz3.ab2@248>       Case "save"     : cli_savefile    = dos_GetNextArg{}
0002A272 <AmiBlitz3.ab2@249>       Case "debug"    : cli_debuginfo   = True
0002A2A2 <AmiBlitz3.ab2@250>       Case "run"      : cli_run         = True
0002A2D2 <AmiBlitz3.ab2@251>       Case "release"  : cli_release     = True
0002A302 <AmiBlitz3.ab2@252>       Case "ped"      : cli_gui         = True
0002A35C <AmiBlitz3.ab2@253>       Case "dform"    : cli_dumpform.l  = Vallong(dos_GetNextArg{})
0002A3CE <AmiBlitz3.ab2@254>       Case "dump"     : cli_info        = LCase$(dos_GetNextArg{})
0002A3FE <AmiBlitz3.ab2@255>                         cli_dumpfile    = dos_GetNextArg{}
0002A406 <AmiBlitz3.ab2@256>                         cli_dumpflags   = $0
0002A466 <AmiBlitz3.ab2@257>                         If Instr(cli_info,"all"  ) Then cli_dumpflags | $FFFFFFFF
0002A4C6 <AmiBlitz3.ab2@258>                         If Instr(cli_info,"token") Then cli_dumpflags | #DUMPFLG_TOKENS
0002A526 <AmiBlitz3.ab2@259>                         If Instr(cli_info,"label") Then cli_dumpflags | #DUMPFLG_LABELS
0002A586 <AmiBlitz3.ab2@260>                         If Instr(cli_info,"var"  ) Then cli_dumpflags | #DUMPFLG_VARS
0002A5E6 <AmiBlitz3.ab2@261>                         If Instr(cli_info,"const") Then cli_dumpflags | #DUMPFLG_CONSTANTS
0002A646 <AmiBlitz3.ab2@262>                         If Instr(cli_info,"func" ) Then cli_dumpflags | #DUMPFLG_FUNCTIONS
0002A6A6 <AmiBlitz3.ab2@263>                         If Instr(cli_info,"macro") Then cli_dumpflags | #DUMPFLG_MACROS
0002A706 <AmiBlitz3.ab2@264>                         If Instr(cli_info,"type" ) Then cli_dumpflags | #DUMPFLG_NEWTYPES
0002A766 <AmiBlitz3.ab2@265>                         If Instr(cli_info,"lib"  ) Then cli_dumpflags | #DUMPFLG_LIBS
0002A778 <AmiBlitz3.ab2@266>                         If cli_dumpflags = $0
0002A77E <AmiBlitz3.ab2@267>                          err=True
0002A812 <AmiBlitz3.ab2@268>                          NPrint "\\1b[1m*** ERROR: Invalid flags for dumpfile \\22",cli_info,"\\22 specified!\\1b[0m"
0002A86C <AmiBlitz3.ab2@270>       Case "verbose"  : cli_verbose     = Vallong(dos_GetNextArg{})
0002A89C <AmiBlitz3.ab2@271>       Case "h"        : showhelp        = True             ; show the help and quit
0002A8A2 <AmiBlitz3.ab2@272>       Default
0002A8DA <AmiBlitz3.ab2@273>         If arg><""
0002A96E <AmiBlitz3.ab2@274>           NPrint "\\1b[1m*** ERROR: Unknown option \\22",arg,"\\22 specified!\\1b[0m"
0002A974 <AmiBlitz3.ab2@275>           err = True
0002A982 <AmiBlitz3.ab2@277>     End Select
0002A9CE <AmiBlitz3.ab2@278>   Until arg = "" OR err=True          ; until we processed all arguments
0002A9F0 <AmiBlitz3.ab2@281>   If err><False OR showhelp = True
0002A9FA <AmiBlitz3.ab2@282>     If showhelp
0002AA5C <AmiBlitz3.ab2@283>     NPrint "AmiBlitz ",Peek.s(?myversion)
0002AA94 <AmiBlitz3.ab2@284>     NPrint "\\nSyntax: AmiBlitz3 [options]"
0002AACC <AmiBlitz3.ab2@285>     NPrint "\\nOptions:"
0002AB04 <AmiBlitz3.ab2@286>     NPrint "  -(s)ource <file>    : input source code filename (bb2, ab2 or ab3)"
0002AB3C <AmiBlitz3.ab2@287>     NPrint "  -(e)xe <file>       : output executable filename"
0002AB74 <AmiBlitz3.ab2@288>     NPrint "  -(d)ebug            : compile with debug info"
0002ABAC <AmiBlitz3.ab2@289>     NPrint "  -(r)elease          : create release executable (size optimized)"
0002ABE4 <AmiBlitz3.ab2@290>     NPrint "  -run                : run compiled program"
0002AC1C <AmiBlitz3.ab2@291>     NPrint "  -dump <info> <file> : dump compiler internals to file"
0002AC54 <AmiBlitz3.ab2@292>     NPrint "                        (info=all|token|label|var|func|const|macro|type|lib)"
0002AC8C <AmiBlitz3.ab2@293>     NPrint "  -dform <n>          : format of compiler internals dump (0=bin, 1=ASCII; default=1)"
0002ACC4 <AmiBlitz3.ab2@294>     NPrint "  -PED                : start AmiBlitz3 IDE (PED)"
0002ACFC <AmiBlitz3.ab2@295>     NPrint "  -save <file>        : re-save source code (convert format, if needed)"
0002AD34 <AmiBlitz3.ab2@296>     NPrint "  -(v)erbose <n>      : set verbose level (0, 1 or 2; default=1)"
0002AD6C <AmiBlitz3.ab2@297>     NPrint "  -(h)elp             : show this help"
0002ADA4 <AmiBlitz3.ab2@298>     NPrint "\\nExample:"
0002ADDC <AmiBlitz3.ab2@299>     NPrint "  AmiBlitz3 -s \\22DH0:Sourcecodes/MyProgram.ab3\\22 -e RAM:MyProgram.exe"
0002AE14 <AmiBlitz3.ab2@300>     NPrint "\\nNote: To start the AmiBlitz3 IDE, run from Workbench or with -PED option."
0002AE1A <AmiBlitz3.ab2@303>     Goto abnormal_exit
0002AE36 <AmiBlitz3.ab2@306>   If cli_gui        Then CLIMode = False : error_SetFlags{#error_requester}
0002AE9A <AmiBlitz3.ab2@307>   If cli_sourcefile Then Poke.s ?str_tempfilename,cli_sourcefile
0002AEAA <AmiBlitz3.ab2@310> Poke.l ?CLIMode,CLIMode
0002AECE <AmiBlitz3.ab2@335>   Dim incdim.s (#maxincludes)
0002AEF2 <AmiBlitz3.ab2@336>   Dim incline.l(#maxincludes)
0002AF1C <AmiBlitz3.ab2@612> Statement activategadget{ag$}                              ;ag$ = gadget
0002AF70 <AmiBlitz3.ab2@613>   ActivateGadget_ WZGadAddr (ag$),WZWindowAddr,0
0002AF88 <AmiBlitz3.ab2@614> End Statement
0002AFA2 <AmiBlitz3.ab2@616> Function.s Get_Libinfo{addr_libnum.l}
0002AFAE <AmiBlitz3.ab2@618>   lib_ab2.b = False : lib_os.b = False
0002AFB4 <AmiBlitz3.ab2@619>   addr_counter.l = addr_libnum
0002AFBC <AmiBlitz3.ab2@620>   skip.l = 0
0002AFCE <AmiBlitz3.ab2@621>   If addr_counter=0
0002AFFC <AmiBlitz3.ab2@622>     error{"INTERNAL: \\__THIS_FUNCTION: Invalid pointer!"}
0002B01A <AmiBlitz3.ab2@623>     Function Return ""
0002B028 <AmiBlitz3.ab2@628>     mem.l = Peek.l(addr_counter)
0002B036 <AmiBlitz3.ab2@633>     addr_counter + 2
0002B056 <AmiBlitz3.ab2@634>     If (mem = $0000ffff) Then lib_ab2= True : skip = 8
0002B070 <AmiBlitz3.ab2@635>     If (mem LSR 16) = $ffe2
0002B076 <AmiBlitz3.ab2@637>       lib_os = True
0002B07E <AmiBlitz3.ab2@638>       skip = 10
0002B0C4 <AmiBlitz3.ab2@639>       If Peek$(addr_counter+skip) = "" Then skip + 4
0002B108 <AmiBlitz3.ab2@641>   Until (lib_ab2=True OR lib_os = True) OR (addr_counter>addr_libnum + $400)
0002B11E <AmiBlitz3.ab2@643>   If (addr_counter>addr_libnum + $400)
0002B13C <AmiBlitz3.ab2@645>     Function Return ""
0002B142 <AmiBlitz3.ab2@646>   Else
0002B166 <AmiBlitz3.ab2@647>     Function Return Peek$(addr_counter + skip)
0002B170 <AmiBlitz3.ab2@649> End Function
0002B18E <AmiBlitz3.ab2@689>   !asm
0002B194 <AmiBlitz3.ab2@690>   MOVEA.l _execbase,A6
0002B198 <AmiBlitz3.ab2@691>   MOVEM.l d0/a0,-(a7)
0002B19A <AmiBlitz3.ab2@693>   MOVEQ #127,d0
0002B1A0 <AmiBlitz3.ab2@694>   LEA chartab,a0
0002B1A6 <AmiBlitz3.ab2@697>     MOVE.b #1,128(a0)
0002B1A8 <AmiBlitz3.ab2@698>     CLR.b (a0)+
0002B1AC <AmiBlitz3.ab2@699>   DBF d0,'l12
0002B1B2 <AmiBlitz3.ab2@701>   LEA chartab,a0
0002B1B6 <AmiBlitz3.ab2@702>   MOVE.b #1,(a0)
0002B1BC <AmiBlitz3.ab2@703>   MOVE.b #1,","(a0)
0002B1C2 <AmiBlitz3.ab2@704>   MOVE.b #1,";"(a0)
0002B1C8 <AmiBlitz3.ab2@705>   MOVE.b #1,":"(a0)
0002B1CE <AmiBlitz3.ab2@706>   MOVE.b #1,"("(a0)
0002B1D4 <AmiBlitz3.ab2@707>   MOVE.b #1,")"(a0)
0002B1DA <AmiBlitz3.ab2@708>   MOVE.b #1,"="(a0)
0002B1E0 <AmiBlitz3.ab2@709>   MOVE.b #1,"+"(a0)
0002B1E6 <AmiBlitz3.ab2@710>   MOVE.b #1,"-"(a0)
0002B1EC <AmiBlitz3.ab2@711>   MOVE.b #1,"*"(a0)
0002B1F2 <AmiBlitz3.ab2@712>   MOVE.b #1,"/"(a0)
0002B1F8 <AmiBlitz3.ab2@713>   MOVE.b #1,"$"(a0)
0002B1FE <AmiBlitz3.ab2@714>   MOVE.b #1,"%"(a0)
0002B204 <AmiBlitz3.ab2@715>   MOVE.b #1,"."(a0)
0002B20A <AmiBlitz3.ab2@716>   MOVE.b #1,"["(a0)
0002B210 <AmiBlitz3.ab2@717>   MOVE.b #1,"]"(a0)
0002B216 <AmiBlitz3.ab2@718>   MOVE.b #1,"{"(a0)
0002B21C <AmiBlitz3.ab2@719>   MOVE.b #1,"}"(a0)
0002B222 <AmiBlitz3.ab2@720>   MOVE.b #1,"\"(a0)
0002B228 <AmiBlitz3.ab2@721>   MOVE.b #1,">"(a0)
0002B22E <AmiBlitz3.ab2@722>   MOVE.b #1,"<"(a0)
0002B234 <AmiBlitz3.ab2@723>   MOVE.b #1,"&"(a0)
0002B23A <AmiBlitz3.ab2@724>   MOVE.b #1,"|"(a0)
0002B240 <AmiBlitz3.ab2@725>   MOVE.b #1,"^"(a0)
0002B246 <AmiBlitz3.ab2@726>   MOVE.b #1,$7e(a0)
0002B24C <AmiBlitz3.ab2@727>   MOVE.w #$0101,1(a0)
0002B252 <AmiBlitz3.ab2@729>   LEA instrtab,a0
0002B258 <AmiBlitz3.ab2@730>   MOVE.l #labelhash-instrtab,d0
0002B25A <AmiBlitz3.ab2@731>   ASR.l #2,d0
0002B25C <AmiBlitz3.ab2@732>   SUBQ.l #1,d0
0002B25E <AmiBlitz3.ab2@735>    CLR.l (a0)+
0002B260 <AmiBlitz3.ab2@736>    SUBQ.l #1,d0
0002B264 <AmiBlitz3.ab2@737>   BNE 'l10
0002B26A <AmiBlitz3.ab2@739>   LEA allowtab,a0
0002B270 <AmiBlitz3.ab2@740>   MOVE.l #255,d0
0002B272 <AmiBlitz3.ab2@743>     CLR.b (a0)+
0002B276 <AmiBlitz3.ab2@744>   DBF d0,'la1
0002B27C <AmiBlitz3.ab2@746>   LEA allowtab,a0
0002B282 <AmiBlitz3.ab2@747>   MOVE.b #1,$7d(a0)
0002B288 <AmiBlitz3.ab2@748>   MOVE.b #1,$7c(a0)
0002B28E <AmiBlitz3.ab2@749>   MOVE.b #1,$44(a0)
0002B294 <AmiBlitz3.ab2@750>   MOVE.b #1,$45(a0)
0002B29A <AmiBlitz3.ab2@751>   MOVE.b #1,$b9(a0)
0002B2A0 <AmiBlitz3.ab2@752>   MOVE.b #1,$89(a0)
0002B2A6 <AmiBlitz3.ab2@753>   MOVE.b #1,$ce(a0)
0002B2AC <AmiBlitz3.ab2@754>   MOVE.b #1,$cf(a0)
0002B2B2 <AmiBlitz3.ab2@755>   MOVE.b #1,$d0(a0)
0002B2B8 <AmiBlitz3.ab2@756>   MOVE.b #1,$cd(a0)
0002B2BA <AmiBlitz3.ab2@757>   MOVEQ #0,d0
0002B2C0 <AmiBlitz3.ab2@759>   MOVEA.l _execbase,a6
0002B2C6 <AmiBlitz3.ab2@764>   MOVE.l #$10000,d0
0002B2CC <AmiBlitz3.ab2@765>   MOVE.l #80000,d1
0002B2CE <AmiBlitz3.ab2@766>   MOVE.l d1,d2
0002B2D2 <AmiBlitz3.ab2@767>   JSR _CreatePool(a6)                                      ; alloc memory for own stuff
0002B2D8 <AmiBlitz3.ab2@768>   MOVE.l d0,mempool
0002B2DC <AmiBlitz3.ab2@769>   MOVEM.l (a7)+,d0/a0
0002B2E2 <AmiBlitz3.ab2@770>   TST.l mempool
0002B2E6 <AmiBlitz3.ab2@771>   BEQ shutdown_compiler
0002B2EA <AmiBlitz3.ab2@773>   MOVEA.l $114(A6),A4                                      ; get adress of this.Task-Structure
0002B2F0 <AmiBlitz3.ab2@774>   MOVE.l A4,ptr_ThisTask
0002B2F4 <AmiBlitz3.ab2@776>   BSR.w open_doslibrary
0002B2F8 <AmiBlitz3.ab2@777>   BEQ.w shutdown_compiler
0002B2FE <AmiBlitz3.ab2@779>   MOVE.l D2,stacksize
0002B300 <AmiBlitz3.ab2@783>   MOVEQ.l #$00,D0
0002B306 <AmiBlitz3.ab2@784>   LEA tokens,A0
0002B308 <AmiBlitz3.ab2@787>     ADDQ.w #1,D0
0002B30A <AmiBlitz3.ab2@788>     MOVE.l (A0),D1
0002B30E <AmiBlitz3.ab2@789>     BEQ.w JL_0_2D1C
0002B310 <AmiBlitz3.ab2@790>     MOVEA.l D1,A0
0002B314 <AmiBlitz3.ab2@791> BRA.w JL_0_2D0E
0002B31A <AmiBlitz3.ab2@794>   MOVE.l A0,end_of_tokenlist
0002B31E <AmiBlitz3.ab2@796>   BSR.w makeasmtable
0002B326 <AmiBlitz3.ab2@797>   MOVE.w #$FFFF,returncode_org                             ;#-1,returncode
0002B32A <AmiBlitz3.ab2@799>   BSR.w open_mathlibrary
0002B32E <AmiBlitz3.ab2@800>   BEQ.w freemem_and_quit4
0002B334 <AmiBlitz3.ab2@802>   MOVE.l constmaxpc,D0
0002B336 <AmiBlitz3.ab2@803>   MOVEQ.l #$02,D1                                          ;chipmem            ;01 org source
0002B33C <AmiBlitz3.ab2@804>   MOVEA.l _execbase,A6
0002B340 <AmiBlitz3.ab2@805>   JSR _AllocMem(A6)                                        ;mem for branch routine
0002B346 <AmiBlitz3.ab2@806>   MOVE.l D0,constpcat
0002B34A <AmiBlitz3.ab2@807>   BEQ.w freemem_and_quit3
0002B350 <AmiBlitz3.ab2@808>   ADD.l constmaxpc,D0
0002B356 <AmiBlitz3.ab2@809>   MOVE.l D0,constlibat
0002B35C <AmiBlitz3.ab2@811>   MOVE.l macrobuffer_size,D0
0002B362 <AmiBlitz3.ab2@812>   CMP.l #40000,d0
0002B366 <AmiBlitz3.ab2@813>   BGE 'ok
0002B36C <AmiBlitz3.ab2@814>     MOVE.l #40000,d0
0002B372 <AmiBlitz3.ab2@815>     MOVE.l d0,macrobuffer_size
0002B374 <AmiBlitz3.ab2@818>   ADDQ.l #4,d0
0002B376 <AmiBlitz3.ab2@819>   MOVEQ.l #$01,D1
0002B37C <AmiBlitz3.ab2@820>   MOVEA.l _execbase,A6
0002B380 <AmiBlitz3.ab2@821>   JSR _AllocMem(A6)                                        ;macro mem
0002B382 <AmiBlitz3.ab2@822>   MOVE.l d0,a0
0002B388 <AmiBlitz3.ab2@823>   MOVE.l macrobuffer_size,(a0)+
0002B38A <AmiBlitz3.ab2@824>   MOVE.l a0,d0
0002B390 <AmiBlitz3.ab2@825>   MOVE.l D0,ptr_macrobuffer_begin
0002B394 <AmiBlitz3.ab2@826>   BEQ.w freemem_and_quit2
0002B39A <AmiBlitz3.ab2@827>   ADD.l macrobuffer_size,D0
0002B3A0 <AmiBlitz3.ab2@828>   MOVE.l D0,ptr_macrobuffer_end
0002B3A6 <AmiBlitz3.ab2@830>   TST.l CLIMode
0002B3AA <AmiBlitz3.ab2@831>   BEQ load_ped
0002B3D4 <AmiBlitz3.ab2@834>   !basic
0002B3DE <AmiBlitz3.ab2@835>   succ.l = InitEmulatedPED{}
0002B3E2 <AmiBlitz3.ab2@836>   GetD0 succ
0002B400 <AmiBlitz3.ab2@837>   !asm
0002B402 <AmiBlitz3.ab2@838>   TST.l d0
0002B406 <AmiBlitz3.ab2@839>   BEQ freemem_and_quit
0002B40C <AmiBlitz3.ab2@840> JMP skip_ped
0002B412 <AmiBlitz3.ab2@845>   MOVE.l #str_pedfile,D1                                   ; Load PED
0002B418 <AmiBlitz3.ab2@846>   MOVEA.l _dosbase,A6
0002B41C <AmiBlitz3.ab2@847>   JSR _LoadSeg(A6)
0002B422 <AmiBlitz3.ab2@848>   MOVE.l D0,ptr_seg_ped
0002B426 <AmiBlitz3.ab2@849>   BEQ.w freemem_and_quit
0002B428 <AmiBlitz3.ab2@853>   MOVEA.l D0,A2
0002B42A <AmiBlitz3.ab2@854>   ADDA.l A2,A2
0002B42C <AmiBlitz3.ab2@855>   ADDA.l A2,A2
0002B432 <AmiBlitz3.ab2@857>   LEA teddata,a1                                           ;lea edstruct,A1
0002B438 <AmiBlitz3.ab2@858>   MOVE.l #"TEDY",d1
0002B43C <AmiBlitz3.ab2@859>   JSR 4(A2)                                                ; Run PED
0002B442 <AmiBlitz3.ab2@861>   MOVE.l A0,ped_startup_addr                               ; PED returns address of routine "startup_code"
0002B448 <AmiBlitz3.ab2@862>   MOVE.l A1,comdata                                        ; PED returns address of comdata-area in A1
0002B486 <AmiBlitz3.ab2@864>   !ComData_GetW{comWord_PEDIsAvailable,D0}                 ; if PED_IsAvailable=0, quit AmiBlitz
0002B48A <AmiBlitz3.ab2@865>   BEQ.w unload_ped
0002B4C8 <AmiBlitz3.ab2@869>   !ComData_GetL{comData_Magic,D0}
0002B4CE <AmiBlitz3.ab2@870>   CMP.l #$7E3A3A7E,D0                                      ;"~::~",D0
0002B4D2 <AmiBlitz3.ab2@871>   BNE unload_ped
0002B50A <AmiBlitz3.ab2@874>   !ComData_SetL{comPtr_Trap15            ,#directTrap15 }
0002B542 <AmiBlitz3.ab2@875>   !ComData_SetL{comPtr_DirectBuffer      ,#directbuffer}
0002B57A <AmiBlitz3.ab2@876>   !ComData_SetL{comPtr_MacroBase         ,#macrobase}
0002B5B2 <AmiBlitz3.ab2@877>   !ComData_SetL{comPtr_VarBase           ,#varbase }
0002B5EA <AmiBlitz3.ab2@878>   !ComData_SetL{comPtr_InstrBase         ,#instrtab}
0002B622 <AmiBlitz3.ab2@879>   !ComData_SetL{comPtr_LibPointer        ,#libpointer}
0002B65A <AmiBlitz3.ab2@880>   !ComData_SetL{comPtr_CompilerVersion   ,#myversion }
0002B692 <AmiBlitz3.ab2@881>   !ComData_SetL{comPtr_VersionInformation,#versioninformation}
0002B6CA <AmiBlitz3.ab2@882>   !ComData_SetL{comPtr_NumberOfBuilds    ,#number_of_builds}
0002B702 <AmiBlitz3.ab2@883>   !ComData_SetL{comFunc_SaveSource       ,#ab3_SaveSource}
0002B73A <AmiBlitz3.ab2@884>   !ComData_SetL{comFunc_LoadSource       ,#ab3_LoadSource}
0002B772 <AmiBlitz3.ab2@885>   !ComData_SetL{comFunc_ClearSource      ,#ab3_ClearSource}
0002B778 <AmiBlitz3.ab2@887>   CLR.w returncode_org
0002B7A2 <AmiBlitz3.ab2@889>   !basic
0002B7AC <AmiBlitz3.ab2@890>   If CLIMode
0002B81E <AmiBlitz3.ab2@891>     If cli_verbose>=2 Then NPrint !TRANS{"Loading BlitzLibs."}
0002B83C <AmiBlitz3.ab2@893>   !asm
0002B842 <AmiBlitz3.ab2@897>   TST.b start_without_libs
0002B846 <AmiBlitz3.ab2@898>   BNE skip_loading_libs
0002B84A <AmiBlitz3.ab2@899>     BSR.w call_setpointerbusy
0002B854 <AmiBlitz3.ab2@900>     MOVE.l #$FFFFffff,linenumat
0002B858 <AmiBlitz3.ab2@901>     BSR.w get_libraries
0002B85E <AmiBlitz3.ab2@902>     JSR init_libraries
0002B862 <AmiBlitz3.ab2@903>     BSR.w init_buffers
0002B866 <AmiBlitz3.ab2@904>     BSR.w call_setpointernormal
0002B868 <AmiBlitz3.ab2@909>   MOVEQ.l #-$01,D0
0002B86E <AmiBlitz3.ab2@910>   MOVEA.l _execbase,A6
0002B872 <AmiBlitz3.ab2@911>   JSR _AllocSignal(A6)
0002B878 <AmiBlitz3.ab2@912>   MOVE.l D0,signalNum
0002B87A <AmiBlitz3.ab2@913>   MOVEQ.l #$00,D1
0002B87C <AmiBlitz3.ab2@914>   BSET D0,D1
0002B882 <AmiBlitz3.ab2@915>   MOVE.l D1,signals
0002B888 <AmiBlitz3.ab2@919>   MOVE.l #str_defaultdbug,D1
0002B88C <AmiBlitz3.ab2@920>   MOVEA.l _dosbase(PC),A6
0002B890 <AmiBlitz3.ab2@921>   JSR _LoadSeg(A6)
0002B896 <AmiBlitz3.ab2@922>   MOVE.l D0,ptr_seg_debugger
0002B898 <AmiBlitz3.ab2@923>   TST.l d0
0002B89C <AmiBlitz3.ab2@924>   BNE ok_12
0002B8C6 <AmiBlitz3.ab2@925>     !basic
0002B91C <AmiBlitz3.ab2@926>     error{!TRANS{"The Debugexecutor `Defaultdbug` was not found.\\nDebugging is not possible."}}
0002B93A <AmiBlitz3.ab2@927>     !asm
0002B940 <AmiBlitz3.ab2@930>   TST.l CLIMode
0002B944 <AmiBlitz3.ab2@931>   BEQ run_ped
0002B96E <AmiBlitz3.ab2@937>   !basic
0002B974 <AmiBlitz3.ab2@938>   err.l = False
0002B9A0 <AmiBlitz3.ab2@946>   If cli_sourcefile
0002B9C0 <AmiBlitz3.ab2@947>     lock.l = Lock_(&cli_sourcefile,#ACCESS_READ)
0002B9CA <AmiBlitz3.ab2@948>     If lock
0002B9EE <AmiBlitz3.ab2@949>       NameFromLock_ lock,&cli_tempstr,1024
0002BA18 <AmiBlitz3.ab2@950>       cli_sourcefile.s = Peek.s(&cli_tempstr)
0002BA28 <AmiBlitz3.ab2@951>       UnLock_ lock
0002BA54 <AmiBlitz3.ab2@954>     If cli_exefile
0002BAA6 <AmiBlitz3.ab2@955>       SetCurrentDir{dos_PathPart{cli_sourcefile}}
0002BAFE <AmiBlitz3.ab2@956>       path.s = dos_PathPart{cli_exefile}
0002BB1E <AmiBlitz3.ab2@957>       lock.l = Lock_(&path,#ACCESS_READ)
0002BB28 <AmiBlitz3.ab2@958>       If lock
0002BB4C <AmiBlitz3.ab2@959>         NameFromLock_ lock,&cli_tempstr,1024
0002BB76 <AmiBlitz3.ab2@960>         path.s = Peek.s(&cli_tempstr)
0002BC24 <AmiBlitz3.ab2@961>         cli_exefile = dos_AddPart{path,dos_FilePart{cli_exefile}}
0002BC34 <AmiBlitz3.ab2@962>         UnLock_ lock
0002BC7E <AmiBlitz3.ab2@973>   If cli_verbose>=2 Then NPrint "Initializing token hashmap."
0002BCA6 <AmiBlitz3.ab2@974>   TokenHashMapFile.s = "Blitz3:System/TokenList.hashmap"
0002BCB0 <AmiBlitz3.ab2@975>   *PreProcessor.preprocessor = preproc_Create{}
0002BCC0 <AmiBlitz3.ab2@976>   Poke.l ?comPtr_PreProcessor,*PreProcessor
0002BCF2 <AmiBlitz3.ab2@977>   preproc_LoadTokens{*PreProcessor,TokenHashMapFile}
0002BD06 <AmiBlitz3.ab2@978>   If *PreProcessor\tokens=#NULL
0002BD80 <AmiBlitz3.ab2@979>     If cli_verbose>=1 Then NPrint "No hashmap found (\\22"+TokenHashMapFile+"\\22), will be created..."
0002BD8A <AmiBlitz3.ab2@980>     preproc_QueryTokens{*PreProcessor}
0002BDBC <AmiBlitz3.ab2@981>     preproc_SaveTokens{*PreProcessor,TokenHashMapFile}
0002BE08 <AmiBlitz3.ab2@989>   If cli_sourcefile><"" AND err=False
0002BEAE <AmiBlitz3.ab2@990>     If cli_verbose>=2 Then NPrint "Loading sourcecode \\22",cli_sourcefile,"\\22."
0002BEE0 <AmiBlitz3.ab2@991>     succ=LoadSource{cli_sourcefile}
0002BEEA <AmiBlitz3.ab2@992>     If succ
0002BF22 <AmiBlitz3.ab2@993>       If cli_savefile=""                                                        ; added check if -save is used then we skip compiling and only save the source  tomsmart1
0002BF9C <AmiBlitz3.ab2@994>         If cli_verbose>=1 Then NPrint "Compiling "+cli_sourcefile+"..."
0002BFD6 <AmiBlitz3.ab2@995>         comerr.l = CompileSource{cli_exefile,cli_debuginfo,cli_release}
0002BFE0 <AmiBlitz3.ab2@997>         If comerr
0002BFE6 <AmiBlitz3.ab2@999>         Else
0002BFEC <AmiBlitz3.ab2@1003>     Else
0002C03C <AmiBlitz3.ab2@1004>       If cli_verbose>=0 NPrint "\\1b[1m*** ERROR: Unable to read source file!\\1b[0m" : err=True
0002C088 <AmiBlitz3.ab2@1008>   If cli_savefile><"" AND err=False
0002C0F0 <AmiBlitz3.ab2@1009>     If cli_verbose>=2 Then NPrint "Saving Sourcefiles as "+cli_savefile
0002C11E <AmiBlitz3.ab2@1010>     SaveSource{cli_savefile}
0002C16A <AmiBlitz3.ab2@1013>   If cli_dumpfile><"" AND err=False
0002C1B4 <AmiBlitz3.ab2@1014>     If cli_verbose>=2 Then NPrint "Saving dumpfile."
0002C1EA <AmiBlitz3.ab2@1015>     DumpFile{cli_dumpfile,cli_dumpflags,cli_dumpform}
0002C1F4 <AmiBlitz3.ab2@1018>   If cli_run
0002C208 <AmiBlitz3.ab2@1019>     If comerr=False
0002C234 <AmiBlitz3.ab2@1020>       If cli_exefile
0002C2AE <AmiBlitz3.ab2@1021>         If cli_verbose>=1 Then NPrint "Compiling "+cli_sourcefile+"..."
0002C2DC <AmiBlitz3.ab2@1022>         comerr.l = CompileSource{"",cli_debuginfo,cli_release} ; re-compile for launch!
0002C326 <AmiBlitz3.ab2@1024>       If cli_verbose>=1 Then NPrint "Running program..."
0002C32C <AmiBlitz3.ab2@1025>       RunSource{}
0002C32E <AmiBlitz3.ab2@1027>         CLR.l d0
0002C36C <AmiBlitz3.ab2@1028>         !ComData_GetB{comByte_RunningFlag,D0}
0002C370 <AmiBlitz3.ab2@1029>         running.l = PutD0
0002C38C <AmiBlitz3.ab2@1030>         If running Then Delay_ 50
0002C3A0 <AmiBlitz3.ab2@1032>       Until running=False
0002C3B4 <AmiBlitz3.ab2@1033>       If Peek.l(?_runerror)
0002C404 <AmiBlitz3.ab2@1034>         If cli_verbose>=0 NPrint "\\1b[1m*** ERROR: Unable to run compiled program!\\1b[0m" : err=True
0002C416 <AmiBlitz3.ab2@1045>   preproc_Free{*PreProcessor} : *PreProcessor=#NULL
0002C460 <AmiBlitz3.ab2@1046>   If cli_verbose>=2 Then NPrint "Exit AmiBlitz3."
0002C466 <AmiBlitz3.ab2@1047>   DeinitEmulatedPED{}
0002C484 <AmiBlitz3.ab2@1049>   !asm
0002C48A <AmiBlitz3.ab2@1050> JMP terminate_ab3
0002C4B4 <AmiBlitz3.ab2@1055>   !basic
0002C4F2 <AmiBlitz3.ab2@1056>     *MyCatalog.l=OpenCatalogA_(0,"Compiler.catalog",0)
0002C4FC <AmiBlitz3.ab2@1058>     If *MyCatalog
0002C53C <AmiBlitz3.ab2@1059>        WZTags #SFH_Catalog,*MyCatalog,#TAG_DONE,0,#TAG_END,0
0002C552 <AmiBlitz3.ab2@1062>     WZLoadGUI ?wzgui
0002C570 <AmiBlitz3.ab2@1063>   !asm
0002C576 <AmiBlitz3.ab2@1066>   MOVEA.l ped_startup_addr,A1
0002C57C <AmiBlitz3.ab2@1067>   LEA str_tempfilename,A0
0002C57E <AmiBlitz3.ab2@1068>   JSR (A1)
0002C5A8 <AmiBlitz3.ab2@1074>   !basic
0002C5C2 <AmiBlitz3.ab2@1075>     If *MyCatalog Then CloseCatalog_ *MyCatalog
0002C5E0 <AmiBlitz3.ab2@1076>   !asm
0002C5E6 <AmiBlitz3.ab2@1079>   MOVE.l signalNum,D0
0002C5EC <AmiBlitz3.ab2@1080>   MOVEA.l _execbase,A6
0002C5F0 <AmiBlitz3.ab2@1081>   JSR _FreeSignal(A6)
0002C5F6 <AmiBlitz3.ab2@1083>   MOVE.l ptr_seg_debugger,D1
0002C5FA <AmiBlitz3.ab2@1084>   BEQ.b skip_unload_debugger
0002C5FE <AmiBlitz3.ab2@1085>     MOVEA.l _dosbase(PC),A6
0002C602 <AmiBlitz3.ab2@1086>     JSR _UnLoadSeg(A6)
0002C606 <AmiBlitz3.ab2@1089>   BSR.w Aclearallvars
0002C60A <AmiBlitz3.ab2@1090>   BSR.w free_residents
0002C60E <AmiBlitz3.ab2@1091>   BSR.w free_blitzlibs
0002C614 <AmiBlitz3.ab2@1094>   MOVE.l ptr_seg_ped,D1
0002C618 <AmiBlitz3.ab2@1095>   BEQ freemem_and_quit
0002C61C <AmiBlitz3.ab2@1096>   MOVEA.l _dosbase(PC),A6
0002C620 <AmiBlitz3.ab2@1097>   JSR _UnLoadSeg(A6)
0002C624 <AmiBlitz3.ab2@1100>   BSR.w freeallox
0002C62A <AmiBlitz3.ab2@1101>   MOVEA.l ptr_macrobuffer_begin,A1
0002C62C <AmiBlitz3.ab2@1102>   MOVE.l -(a1),D0
0002C62E <AmiBlitz3.ab2@1103>   ADDQ.l #4,d0
0002C634 <AmiBlitz3.ab2@1104>   MOVEA.l _execbase,A6
0002C638 <AmiBlitz3.ab2@1105>   JSR _FreeMem(A6)
0002C63E <AmiBlitz3.ab2@1108>   MOVEA.l _dosbase,A1
0002C644 <AmiBlitz3.ab2@1109>   MOVEA.l _execbase,A6
0002C648 <AmiBlitz3.ab2@1110>   JSR _CloseLibrary(A6)
0002C64E <AmiBlitz3.ab2@1112>   MOVEA.l constpcat,A1
0002C654 <AmiBlitz3.ab2@1113>   MOVE.l constmaxpc,D0
0002C65A <AmiBlitz3.ab2@1114>   MOVEA.l _execbase,A6
0002C65E <AmiBlitz3.ab2@1115>   JSR _FreeMem(A6)
0002C664 <AmiBlitz3.ab2@1118>   MOVEA.l _mathffpbase,A1
0002C66A <AmiBlitz3.ab2@1119>   MOVEA.l _execbase,A6
0002C66E <AmiBlitz3.ab2@1120>   JSR _CloseLibrary(A6)
0002C674 <AmiBlitz3.ab2@1130>     MOVEA.l _execbase,A6
0002C67A <AmiBlitz3.ab2@1131>     MOVE.l mempool,a0
0002C67E <AmiBlitz3.ab2@1132>     JSR _DeletePool(a6)
0002C684 <AmiBlitz3.ab2@1133>     CLR.l pushat
0002C68A <AmiBlitz3.ab2@1140>   JSR free_unusedfunctions
0002C68C <AmiBlitz3.ab2@1141>   MOVEQ #0,d0
0002C69A <AmiBlitz3.ab2@1144>   !exitasm
0002C6D2 <AmiBlitz3.ab2@1145>   If dynassign<>""
0002C6DC <AmiBlitz3.ab2@1146>     If *AssignSema
0002C6EC <AmiBlitz3.ab2@1147>       ReleaseSemaphore_ *AssignSema
0002C704 <AmiBlitz3.ab2@1148>       If (AttemptSemaphore_ (*AssignSema))                 ; we are the exclusive owner of the sema now!
0002C798 <AmiBlitz3.ab2@1149>         dos_RemAssign{"LIBS:",dos_AddPart{dynassign,"Libs"}}
0002C7D2 <AmiBlitz3.ab2@1150>         dos_RemAssign{dynassign}
0002C7E2 <AmiBlitz3.ab2@1151>         RemSemaphore_ *AssignSema
0002C7F2 <AmiBlitz3.ab2@1152>         ReleaseSemaphore_ *AssignSema
0002C828 <AmiBlitz3.ab2@1153>         If *AssignSema\ss_Link\ln_Name Then FreeVec_ *AssignSema\ss_Link\ln_Name : *AssignSema\ss_Link\ln_Name = #NULL
0002C838 <AmiBlitz3.ab2@1154>         FreeVec_ *AssignSema
0002C840 <AmiBlitz3.ab2@1155>         *AssignSema = #NULL
0002C86E <AmiBlitz3.ab2@1159>   SetCurrentDir{cli_path}
0002C890 <AmiBlitz3.ab2@1160>   !coutclose
0002C896 <AmiBlitz3.ab2@1161> End
0002C8A2 <AmiBlitz3.ab2@1166> str_doslibrary:     Dc.b "dos.library",0 : Even
0002C8A6 <AmiBlitz3.ab2@1167> _dosbase:           Ds.l 1
0002C8AC <AmiBlitz3.ab2@1171>   MOVEA.l _execbase,A6
0002C8B2 <AmiBlitz3.ab2@1172>   LEA str_doslibrary,A1
0002C8B6 <AmiBlitz3.ab2@1173>   JSR _OldOpenLibrary(A6)
0002C8BC <AmiBlitz3.ab2@1174>   MOVE.l D0,_dosbase
0002C8BE <AmiBlitz3.ab2@1175> RTS
0002C8C4 <AmiBlitz3.ab2@1179>   MOVEA.l #str_mathffpname,A1
0002C8CA <AmiBlitz3.ab2@1180>   MOVEA.l _execbase,A6
0002C8CE <AmiBlitz3.ab2@1181>   JSR _OldOpenLibrary(A6)
0002C8D4 <AmiBlitz3.ab2@1182>   MOVE.l D0,_mathffpbase
0002C8D6 <AmiBlitz3.ab2@1183> RTS
0002C908 <AmiBlitz3.ab2@1189>   !ComData_JMP{comFunc_SetNormalPointer}
0002C93A <AmiBlitz3.ab2@1197>   !ComData_JMP{comFunc_SetBusyPointer}
0002C964 <AmiBlitz3.ab2@1202>   !basic
0002C968 <AmiBlitz3.ab2@1203>   ab3save_filenameP.l = PutD0
0002C972 <AmiBlitz3.ab2@1204>   If ab3save_filenameP
0002C99A <AmiBlitz3.ab2@1205>     ab3save_filename.s = Peek.s(ab3save_filenameP)
0002C9C8 <AmiBlitz3.ab2@1207>     SaveSource{ab3save_filename}
0002C9CE <AmiBlitz3.ab2@1208>   Else
0002C9FC <AmiBlitz3.ab2@1209>     error{"INTERNAL ERROR: no filename passed in D0 to SaveSource{}!"}
0002CA1A <AmiBlitz3.ab2@1211>   !asm
0002CA1C <AmiBlitz3.ab2@1212>   RTS
0002CA46 <AmiBlitz3.ab2@1215>   !basic
0002CA4A <AmiBlitz3.ab2@1216>   ab3save_filenameP.l = PutD0
0002CA54 <AmiBlitz3.ab2@1217>   If ab3save_filenameP
0002CA7C <AmiBlitz3.ab2@1218>     ab3save_filename.s = Peek.s(ab3save_filenameP)
0002CAAA <AmiBlitz3.ab2@1219>     LoadSource{ab3save_filename}
0002CAB0 <AmiBlitz3.ab2@1220>   Else
0002CADE <AmiBlitz3.ab2@1221>     error{"INTERNAL ERROR: no filename passed in D0 to LoadSource{}!"}
0002CAFC <AmiBlitz3.ab2@1223>   !asm
0002CAFE <AmiBlitz3.ab2@1224>   RTS
0002CB28 <AmiBlitz3.ab2@1227>   !basic
0002CB2E <AmiBlitz3.ab2@1228>   ClearSource{}
0002CB4C <AmiBlitz3.ab2@1229>   !asm
0002CB4E <AmiBlitz3.ab2@1230>   RTS
0002CB78 <AmiBlitz3.ab2@1233>   !basic
0002CB7E <AmiBlitz3.ab2@1234>   OpenConsoleFake{}
0002CB9C <AmiBlitz3.ab2@1235>   !asm
0002CB9E <AmiBlitz3.ab2@1236>   RTS
0002CBC8 <AmiBlitz3.ab2@1240>   !basic
0002CBCE <AmiBlitz3.ab2@1241>   CloseConsoleFake{}
0002CBEC <AmiBlitz3.ab2@1242>   !asm
0002CBEE <AmiBlitz3.ab2@1243>   RTS
0002CBF4 <AmiBlitz3.ab2@1247>   MOVE.w d6,menuitemdebug
0002CC1E <AmiBlitz3.ab2@1248>   !basic
0002CC30 <AmiBlitz3.ab2@1249>   menuitemx.l = Peek.w(?menuitemdebug)
0002CC56 <AmiBlitz3.ab2@1250>   If menuitemx>16 OR  menuitemx<0
0002CCBE <AmiBlitz3.ab2@1251>     error{"Called invalid AB3 Menuitem #"+Str$(menuitemx)+"!"}
0002CCC6 <AmiBlitz3.ab2@1252>     menuitemx=0
0002CCD6 <AmiBlitz3.ab2@1254>   Poke.w ?menuitemdebug,menuitemx
0002CCF4 <AmiBlitz3.ab2@1255>   !asm
0002CCFA <AmiBlitz3.ab2@1256>   MOVE.w menuitemdebug,d6
0002CD00 <AmiBlitz3.ab2@1259>   MOVE.l A5,firstitem_
0002CD06 <AmiBlitz3.ab2@1260>   MOVE.w D7,numlines_org
0002CD0C <AmiBlitz3.ab2@1261>   MOVE.l d7,numlines
0002CD0E <AmiBlitz3.ab2@1262>   LSL.w #2,D6
0002CD14 <AmiBlitz3.ab2@1263>   LEA menu_items,A0
0002CD18 <AmiBlitz3.ab2@1264>   MOVEA.l $0(A0,D6.W),A0
0002CD22 <AmiBlitz3.ab2@1265>   MOVE.l #$FFFFffff,linenumat
0002CD2C <AmiBlitz3.ab2@1266>   MOVE.l #$FFFFffff,compilelinecounter
0002CD2E <AmiBlitz3.ab2@1270>   JSR (A0)
0002CD34 <AmiBlitz3.ab2@1271>   MOVE.l compilelinecounter,D0
0002CD36 <AmiBlitz3.ab2@1272> RTS
0002CD3A <AmiBlitz3.ab2@1274> menuitemdebug: Dc.l 0
0002CD3E <AmiBlitz3.ab2@1276> mempool                Dc.l 0
0002CD54 <AmiBlitz3.ab2@1277> str_loaddebugmessage:  Dc.b "Debug module to load",0 : Even
0002CD5A <AmiBlitz3.ab2@1278> dloaderr:             JSR handle_compileerror
0002CD76 <AmiBlitz3.ab2@1279>                        Dc.b "Can't LoadSeg debug module!",0 : Even
0002CDB4 <AmiBlitz3.ab2@1287>   !ComData_GetL{comFunc_ASLFileRequest,A3}
0002CDBA <AmiBlitz3.ab2@1288>   LEA str_loaddebugmessage,A2
0002CDC0 <AmiBlitz3.ab2@1289>   LEA str_blitz3assign,A0
0002CDC6 <AmiBlitz3.ab2@1290>   LEA str_temp_debugmodulename,A1
0002CDC8 <AmiBlitz3.ab2@1293>   JSR (A3)
0002CDCC <AmiBlitz3.ab2@1295>   BEQ.w menu_loaddebugmodule_noload
0002CDD2 <AmiBlitz3.ab2@1296>   MOVE.l D0,ptr_temp_debugmodule
0002CDD6 <AmiBlitz3.ab2@1297>   BSR.w call_setpointerbusy
0002CDDC <AmiBlitz3.ab2@1298>   MOVE.l A7,errstack
0002CDE6 <AmiBlitz3.ab2@1299>   MOVE.l #menu_loaddebugmodule_noload,errcont
0002CDEC <AmiBlitz3.ab2@1300>   MOVE.l ptr_temp_debugmodule,D1
0002CDF0 <AmiBlitz3.ab2@1302>   MOVEA.l _dosbase(PC),A6
0002CDF4 <AmiBlitz3.ab2@1303>   JSR _LoadSeg(A6)
0002CDF6 <AmiBlitz3.ab2@1304>   MOVE.l D0,D7
0002CDFA <AmiBlitz3.ab2@1305>   BEQ.w dloaderr
0002CE00 <AmiBlitz3.ab2@1306>   MOVE.l ptr_seg_debugger,D1
0002CE04 <AmiBlitz3.ab2@1307>   BEQ.b menu_loaddebugmodule_ndseg
0002CE08 <AmiBlitz3.ab2@1308>   MOVEA.l _dosbase(PC),A6
0002CE0C <AmiBlitz3.ab2@1309>   JSR _UnLoadSeg(A6)
0002CE10 <AmiBlitz3.ab2@1310>   BSR.w call_setpointernormal
0002CE16 <AmiBlitz3.ab2@1313>   MOVE.l D7,ptr_seg_debugger
0002CE18 <AmiBlitz3.ab2@1316> RTS
0002CE36 <AmiBlitz3.ab2@1319> str_request_exename:   Dc.b "Name of Executable to Create:",0 : Even                        ;xtext org source
0002CEF6 <AmiBlitz3.ab2@1320> exepath:               Ds.l 48                             ;Ds.b #MAX_STRINGSIZE ; Ds.l 48  ;xpath  dcb.b 192,0 org source
0002CFB6 <AmiBlitz3.ab2@1321> exefilename:           Ds.l 48                             ;Ds.b #MAX_STRINGSIZE ; Ds.l 48  ;xname  dcb.b 192,0 org source
0002CFBA <AmiBlitz3.ab2@1322> ptr_newexefilename:    Dc.l 0                                                               ;execname org
0002CFE4 <AmiBlitz3.ab2@1326>   !basic
0002D00E <AmiBlitz3.ab2@1327>   exepath.s = Peek.s(?exepath)
0002D038 <AmiBlitz3.ab2@1328>   exefile.s = Peek.s(?exefilename)
0002D0B8 <AmiBlitz3.ab2@1329>   exefile.s = dos_AddPart{exepath,exefile}
0002D0F0 <AmiBlitz3.ab2@1330>   Poke.s ?tempspace,exefile
0002D10E <AmiBlitz3.ab2@1331>   !asm
0002D114 <AmiBlitz3.ab2@1352>   LEA tempspace,a0
0002D116 <AmiBlitz3.ab2@1353>   MOVE.l a0,d0
0002D11A <AmiBlitz3.ab2@1354> BRA newcreate2
0002D144 <AmiBlitz3.ab2@1360>   !basic
0002D16E <AmiBlitz3.ab2@1361>   request_exename.s = Peek.s(?str_request_exename )
0002D1CA <AmiBlitz3.ab2@1362>   request_exename   = !TRANS{request_exename}
0002D1D0 <AmiBlitz3.ab2@1363>   GetD0 &request_exename
0002D1EE <AmiBlitz3.ab2@1364>   !asm
0002D1F0 <AmiBlitz3.ab2@1365>   MOVE.l D0,A2
0002D22E <AmiBlitz3.ab2@1368>   !ComData_GetL{comFunc_ASLFileRequest,A3}
0002D234 <AmiBlitz3.ab2@1370>   LEA exepath,A0
0002D23A <AmiBlitz3.ab2@1371>   LEA exefilename,A1
0002D23C <AmiBlitz3.ab2@1374>   JSR (A3)                                                 ;open ped filerequest
0002D240 <AmiBlitz3.ab2@1375>   BEQ.w cancel_createexe
0002D24A <AmiBlitz3.ab2@1378>   ADD.l #1,number_of_builds
0002D250 <AmiBlitz3.ab2@1381>   MOVE.l D0,ptr_newexefilename
0002D258 <AmiBlitz3.ab2@1382>   MOVE.w #-1,debugversion
0002D25E <AmiBlitz3.ab2@1383>   MOVE.w set_make_smallestcode,-(A7)
0002D266 <AmiBlitz3.ab2@1387>     MOVE.w #1,makeexec
0002D26C <AmiBlitz3.ab2@1388>     JSR ab3_OpenDebugFile
0002D270 <AmiBlitz3.ab2@1389>     BSR.w startcompile
0002D276 <AmiBlitz3.ab2@1390>     JSR ab3_CloseDebugFile
0002D280 <AmiBlitz3.ab2@1391>     CMP.l #"NORE",reqmode
0002D284 <AmiBlitz3.ab2@1392>   BEQ 'l1
0002D28A <AmiBlitz3.ab2@1394>   TST.w anyerrs
0002D28E <AmiBlitz3.ab2@1395>   BNE.b menu_createexecutable__skip
0002D292 <AmiBlitz3.ab2@1396>   BSR.w savefile
0002D298 <AmiBlitz3.ab2@1399>   MOVE.w (A7)+,set_make_smallestcode
0002D29A <AmiBlitz3.ab2@1402> RTS
0002D2A2 <AmiBlitz3.ab2@1406>   MOVE.w #-1,flag_noPED
0002D2A4 <AmiBlitz3.ab2@1407> RTS
0002D2AC <AmiBlitz3.ab2@1411>   MOVE.w #-1,flag_noCLI
0002D2AE <AmiBlitz3.ab2@1412> RTS
0002D2D8 <AmiBlitz3.ab2@1415>   !basic
0002D300 <AmiBlitz3.ab2@1416>     If dbg_fid>=0 Then file_Close{dbg_fid} : dbg_fid = -1
0002D310 <AmiBlitz3.ab2@1417>     Poke.w ?word_WriteDebugFileNow,0
0002D32E <AmiBlitz3.ab2@1418>   !asm
0002D330 <AmiBlitz3.ab2@1419> RTS
0002D35A <AmiBlitz3.ab2@1422>   !basic
0002D36A <AmiBlitz3.ab2@1423>   Poke.w ?word_WriteDebugFileNow,0
0002D37C <AmiBlitz3.ab2@1424>   If dbg_fid>=0
0002D392 <AmiBlitz3.ab2@1425>     file_Close{dbg_fid} : dbg_fid = -1
0002D3A4 <AmiBlitz3.ab2@1427>   If dbg_fid.l<0
0002D3A6 <AmiBlitz3.ab2@1428>     CLR.l d0
0002D3E4 <AmiBlitz3.ab2@1429>     !ComData_GetW{comWord_CreateDebugFile,D0}
0002D3E8 <AmiBlitz3.ab2@1430>     dbg_Create.l = PutD0
0002D3F2 <AmiBlitz3.ab2@1431>     If (dbg_Create) ; only when set!
0002D402 <AmiBlitz3.ab2@1432>       exefileP.l = Peek.l (?ptr_newexefilename)
0002D42A <AmiBlitz3.ab2@1433>       exefile.s = ""
0002D45C <AmiBlitz3.ab2@1434>       If exefileP Then exefile.s = Peek.s(exefileP)
0002D494 <AmiBlitz3.ab2@1435>       If exefile><""
0002D4EA <AmiBlitz3.ab2@1436>         dbg_fid = file_Open{exefile+".dbg",#file_forcewrite}
0002D4FC <AmiBlitz3.ab2@1437>         If dbg_fid>=0
0002D50E <AmiBlitz3.ab2@1438>           Poke.w ?word_WriteDebugFileNow,-1
0002D51A <AmiBlitz3.ab2@1441>       oldhunkoffset.l = -1
0002D542 <AmiBlitz3.ab2@1442>       oldfile.s       = ""
0002D560 <AmiBlitz3.ab2@1445>   !asm
0002D562 <AmiBlitz3.ab2@1446> RTS
0002D568 <AmiBlitz3.ab2@1449> TST.w word_WriteDebugFileNow
0002D56C <AmiBlitz3.ab2@1450> BEQ 'skipdebugfile
0002D596 <AmiBlitz3.ab2@1451> !basic
0002D5A8 <AmiBlitz3.ab2@1452>   If dbg_fid>=0
0002D5BA <AmiBlitz3.ab2@1453>     pass.l          = Peek.w(?pass)
0002D5CC <AmiBlitz3.ab2@1454>     If pass><0
0002D5D2 <AmiBlitz3.ab2@1455>       oldhunkoffset.l = hunkoffset.l
0002D606 <AmiBlitz3.ab2@1456>       oldfile.s       = codefile.s
0002D622 <AmiBlitz3.ab2@1457>       If Peek.w (?ininclude)>0
0002D632 <AmiBlitz3.ab2@1458>         codeline.l = Peek.l(?includeline);-1
0002D6A2 <AmiBlitz3.ab2@1459>         codefile.s = dos_FilePart{incdim(Peek.w(?ininclude)-1)}
0002D6A8 <AmiBlitz3.ab2@1460>       Else
0002D6D6 <AmiBlitz3.ab2@1461>         !ComData_LEA{comStr_SourceName,A0}
0002D6D8 <AmiBlitz3.ab2@1462>         MOVE.l A0,D0
0002D6DC <AmiBlitz3.ab2@1463>         sourceP.l = PutD0
0002D704 <AmiBlitz3.ab2@1464>         codefile.s = Peek.s(sourceP)
0002D714 <AmiBlitz3.ab2@1465>         codeline.l = Peek.l(?linenumat)
0002D73C <AmiBlitz3.ab2@1467>       hunkoffset.l = Peek.l(?destpointer)-Peek.l(?destbufferstart)
0002D790 <AmiBlitz3.ab2@1468>       If oldhunkoffset><hunkoffset OR oldfile><codefile
0002D7A0 <AmiBlitz3.ab2@1475>         *sourceLine.SourceLine_t = Peek.l(?sourceline)
0002D7AA <AmiBlitz3.ab2@1476>         If *sourceLine
0002D7C0 <AmiBlitz3.ab2@1477>           MaxLen detokenline.s = 4096
0002D802 <AmiBlitz3.ab2@1478>          !ComData_GetL{comPtr_PreProcessor,include_preprocessor}
0002D812 <AmiBlitz3.ab2@1479>          *tn.preprocessor = Peek.l(?include_preprocessor)
0002D83E <AmiBlitz3.ab2@1480>           written.l = preproc_Detokenize{*tn,&*sourceLine\Text,&detokenline,*sourceLine\CharLength}
0002D86C <AmiBlitz3.ab2@1481>           If written>0 Then Poke.b &detokenline+written-1,0
0002D896 <AmiBlitz3.ab2@1482>           sourceLineText.s = Peek.s(&detokenline)
0002D89C <AmiBlitz3.ab2@1483>         Else
0002D8C4 <AmiBlitz3.ab2@1484>           sourceLineText = "NULL"
0002D98C <AmiBlitz3.ab2@1487>         file_WriteLine{dbg_fid,Hex$(hunkoffset)+" <"+codefile+"@"+Str$(codeline)+"> "+sourceLineText}
0002D9AA <AmiBlitz3.ab2@1493> !asm
0002D9AC <AmiBlitz3.ab2@1495> RTS
0002D9AE <AmiBlitz3.ab2@1497> word_WriteDebugFileNow: Dc.w 0
0002D9B0 <AmiBlitz3.ab2@1499> flag_noPED:  Ds.w 1                                        ;closeed org source
0002D9B2 <AmiBlitz3.ab2@1500> flag_noCLI:  Ds.w 1                                        ;nocli org source
0002D9B6 <AmiBlitz3.ab2@1504>   MOVEM.l D0-D1/A0-A1/A6,-(A7)
0002D9BC <AmiBlitz3.ab2@1505>   MOVEA.l _execbase,A6
0002D9C0 <AmiBlitz3.ab2@1506>   JSR _CacheClearU(A6)
0002D9C4 <AmiBlitz3.ab2@1507>   MOVEM.l (A7)+,D0-D1/A0-A1/A6
0002D9C6 <AmiBlitz3.ab2@1508> RTS
0002D9D0 <AmiBlitz3.ab2@1552>   ADD.l #1,number_of_builds
0002D9D6 <AmiBlitz3.ab2@1554>   CLR.w debugversion
0002D9DC <AmiBlitz3.ab2@1555>   CLR.w flag_noPED
0002D9E2 <AmiBlitz3.ab2@1556>   CLR.w flag_noCLI
0002D9EA <AmiBlitz3.ab2@1559>     MOVE.w #0,makeexec                                     ;MOVE.w #$FFFF,debugversion
0002D9EE <AmiBlitz3.ab2@1560>     BSR.w startcompile
0002D9F8 <AmiBlitz3.ab2@1561>     CMP.l #"NORE",reqmode
0002D9FC <AmiBlitz3.ab2@1562>   BEQ 'l1
0002DA02 <AmiBlitz3.ab2@1565>   TST.w anyerrs
0002DA06 <AmiBlitz3.ab2@1566>    BNE.w JL_0_3482
0002DA0A <AmiBlitz3.ab2@1568>   MOVE.w flag_noPED(PC),D1
0002DA0E <AmiBlitz3.ab2@1569>    BEQ.w skip_closingGUI
0002DA40 <AmiBlitz3.ab2@1574>   !ComData_JSR{comFunc_CloseGUI}
0002DA44 <AmiBlitz3.ab2@1575> BRA.b runprogram
0002DA48 <AmiBlitz3.ab2@1579>   BSR.w compilerequester
0002DA4E <AmiBlitz3.ab2@1582>   MOVEA.l _dosbase,A6
0002DA54 <AmiBlitz3.ab2@1583>   LEA exepath,a0
0002DA56 <AmiBlitz3.ab2@1584>   MOVE.l a0,d1
0002DA58 <AmiBlitz3.ab2@1585>   MOVEQ #-2,d2
0002DA5C <AmiBlitz3.ab2@1586>   JSR _Lock(a6)                                            ;lock
0002DA62 <AmiBlitz3.ab2@1587>   MOVE.l d0,exelock
0002DA68 <AmiBlitz3.ab2@1588>   MOVE.l #0,d1
0002DA6C <AmiBlitz3.ab2@1589>   JSR _CurrentDir(A6)
0002DA72 <AmiBlitz3.ab2@1590>   MOVE.l D0,lock_currentdir
0002DA74 <AmiBlitz3.ab2@1591>   MOVE.l D0,D1
0002DA78 <AmiBlitz3.ab2@1592>   JSR _CurrentDir(A6)
0002DA7E <AmiBlitz3.ab2@1593>   CLR.l ptr_exetask
0002DA84 <AmiBlitz3.ab2@1602>   MOVE.l #str_process_name,D1
0002DA86 <AmiBlitz3.ab2@1603>   MOVEQ.l #$00,D2
0002DA8C <AmiBlitz3.ab2@1604>   MOVE.l #proc_seglist,D3
0002DA8E <AmiBlitz3.ab2@1605>   LSR.l #2,D3
0002DA94 <AmiBlitz3.ab2@1606>   MOVE.l stacksize,D4
0002DA9A <AmiBlitz3.ab2@1607>   MOVEA.l _dosbase,A6
0002DA9E <AmiBlitz3.ab2@1608>   JSR _CreateProc(A6)                                      ;runtask
0002DAA0 <AmiBlitz3.ab2@1609>   TST.l D0
0002DAA4 <AmiBlitz3.ab2@1610>    BEQ ErrorRunningProg
0002DADA <AmiBlitz3.ab2@1612>   !ComData_SetB{comByte_RunningFlag,#1}   ; this should be done here, straigt after it is clear that
0002DAE0 <AmiBlitz3.ab2@1614>   TST.w flag_noPED
0002DAE4 <AmiBlitz3.ab2@1615>    BNE.b JL_0_344E
0002DAE8 <AmiBlitz3.ab2@1616>   BSR.w close_compilewin
0002DAEE <AmiBlitz3.ab2@1619>   CLR.l firstlocal
0002DAF4 <AmiBlitz3.ab2@1620>   CLR.l firstglob
0002DAF8 <AmiBlitz3.ab2@1621>   MOVE.w flag_noPED(PC),D1
0002DAFC <AmiBlitz3.ab2@1622>   BEQ.w skip_openGUI
0002DB2E <AmiBlitz3.ab2@1626>   !ComData_JSR{comFunc_CreateGUI}
0002DB30 <AmiBlitz3.ab2@1635> RTS
0002DB3A <AmiBlitz3.ab2@1638> MOVE.l #1,_runerror
0002DB3E <AmiBlitz3.ab2@1639> BRA JL_0_344E
0002DB42 <AmiBlitz3.ab2@1641> _runerror: Dc.l 0
0002DB46 <AmiBlitz3.ab2@1642> lock_currentdir:    Ds.l 1                                          ;tasklock org source
0002DB4A <AmiBlitz3.ab2@1643> ptr_exetask:        Ds.l 1                                          ;panictask org source
0002DB4E <AmiBlitz3.ab2@1644> signalNum:          Ds.l 1                                          ;panicbit org source
0002DB52 <AmiBlitz3.ab2@1645> signals:            Ds.l 1                                          ;panicmask org source
0002DB68 <AmiBlitz3.ab2@1647> str_process_name:   Dc.b "Blitz ][ Program Proc",0 : Even           ;procname org source
0002DB6D <AmiBlitz3.ab2@1648>                     Ds.b 5                                          ;cnop 0,4 :dc.l 0   ;length org source
0002DB70 <AmiBlitz3.ab2@1649> Even4
0002DB74 <AmiBlitz3.ab2@1651> ptr_ThisTask:       Ds.l 1                                          ;length
0002DB78 <AmiBlitz3.ab2@1652> .proc_seglist:      Ds.l 1                                          ;procstart org source ;next
0002DB7E <AmiBlitz3.ab2@1656>   MOVEA.l $4,A0
0002DB86 <AmiBlitz3.ab2@1657>   MOVE.l  $114(A0),ptr_exetask
0002DB8C <AmiBlitz3.ab2@1659>   MOVEA.l _dosbase,A6
0002DB92 <AmiBlitz3.ab2@1660>   MOVE.l exelock,D1
0002DB96 <AmiBlitz3.ab2@1661>   JSR _CurrentDir(A6)
0002DBCC <AmiBlitz3.ab2@1666>   !ComData_SetB{comByte_RunningFlag,#1}
0002DBD0 <AmiBlitz3.ab2@1672>   MOVE.w flag_noCLI(PC),D1
0002DBD4 <AmiBlitz3.ab2@1673>    BNE.b skip_openconsole
0002DC06 <AmiBlitz3.ab2@1677>   !ComData_JSR{comFunc_OpenConsole}
0002DC0A <AmiBlitz3.ab2@1680>   BSR.w calcvbr
0002DC10 <AmiBlitz3.ab2@1681>   MOVEA.l vbr,A0
0002DC16 <AmiBlitz3.ab2@1686>   CLR.w dirmode
0002DC1C <AmiBlitz3.ab2@1687>   CLR.l firstglob
0002DC22 <AmiBlitz3.ab2@1688>   CLR.l firstlocal
0002DC28 <AmiBlitz3.ab2@1690>   MOVE.l stacksize,D2
0002DC2E <AmiBlitz3.ab2@1691>   MOVE.l #$624C745A,D7                                      ;#'bLtZ',d7 org source ;force cli-type run
0002DC34 <AmiBlitz3.ab2@1692>   LEA str_cliarguments,A0                                   ;cli arguement
0002DC3A <AmiBlitz3.ab2@1693>   MOVEA.l destbufferstart,A1
0002DC3E <AmiBlitz3.ab2@1694>   BSR.w Aclearcache
0002DC40 <AmiBlitz3.ab2@1697>   JSR (A1)                                                 ; execute compiled code  ;Run the thing!
0002DC46 <AmiBlitz3.ab2@1699>   MOVEA.l vbr,A0
0002DC4C <AmiBlitz3.ab2@1701>   CLR.l firstglob
0002DC52 <AmiBlitz3.ab2@1702>   CLR.l firstlocal
0002DC58 <AmiBlitz3.ab2@1703>   MOVEA.l _dosbase,A6
0002DC5E <AmiBlitz3.ab2@1704>   MOVE.l exelock,d1
0002DC62 <AmiBlitz3.ab2@1705>   BEQ 'nolock
0002DC66 <AmiBlitz3.ab2@1706>   JSR _UnLock(a6)
0002DC9C <AmiBlitz3.ab2@1711>   !ComData_SetB{comByte_RunningFlag,#0}
0002DCA0 <AmiBlitz3.ab2@1714>   MOVE.w flag_noCLI(PC),D1
0002DCA4 <AmiBlitz3.ab2@1715>    BNE.b skip_closeconsole
0002DCD6 <AmiBlitz3.ab2@1719>   !ComData_JSR{comFunc_CloseConsole}
0002DCDE <AmiBlitz3.ab2@1722>   MOVE.w #$0001,stopit
0002DCE2 <AmiBlitz3.ab2@1723>   MOVE.l signals(PC),D0
0002DCE8 <AmiBlitz3.ab2@1724>   MOVEA.l ptr_ThisTask,A1
0002DCEE <AmiBlitz3.ab2@1725>   MOVEA.l _execbase,A6
0002DCF2 <AmiBlitz3.ab2@1726>   JSR _Signal(A6)
0002DCF4 <AmiBlitz3.ab2@1727> RTS
0002DCFA <AmiBlitz3.ab2@1731>   MOVEA.l _execbase,A6
0002DCFE <AmiBlitz3.ab2@1732>   MOVE.w $128(A6),D0
0002DD00 <AmiBlitz3.ab2@1733>   MOVEQ.l #$00,D1
0002DD04 <AmiBlitz3.ab2@1734>   ANDI.w #$F,D0
0002DD08 <AmiBlitz3.ab2@1737>     BEQ.b calcvbr__skip
0002DD0A <AmiBlitz3.ab2@1738>     ADDQ.w #1,D1
0002DD0C <AmiBlitz3.ab2@1739>     LSR.w #1,D0
0002DD10 <AmiBlitz3.ab2@1740> BRA.b calcvbr_loop
0002DD12 <AmiBlitz3.ab2@1743>   MOVEQ.l #$00,D2
0002DD16 <AmiBlitz3.ab2@1744>   CMP.w #$2,D1
0002DD1A <AmiBlitz3.ab2@1745>    BCS.b calcvbr__skip2
0002DD20 <AmiBlitz3.ab2@1746>   MOVEA.l _execbase,A6
0002DD24 <AmiBlitz3.ab2@1747>   JSR _SuperState(A6)
0002DD28 <AmiBlitz3.ab2@1748>   Dc.l $4E7A2801                                           ;movec vbr,D2
0002DD2C <AmiBlitz3.ab2@1749>   JSR _UserState(A6)
0002DD32 <AmiBlitz3.ab2@1752>   MOVE.l D2,vbr
0002DD34 <AmiBlitz3.ab2@1753> RTS
0002DD3A <AmiBlitz3.ab2@1757>   LEA instrtab,a0
0002DD40 <AmiBlitz3.ab2@1758>   MOVE.l #labelhash-instrtab,d0
0002DD42 <AmiBlitz3.ab2@1759>   ASR.l #2,d0
0002DD44 <AmiBlitz3.ab2@1760>   SUBQ.l #1,d0
0002DD46 <AmiBlitz3.ab2@1763>   CLR.l (a0)+
0002DD48 <AmiBlitz3.ab2@1764>   SUBQ.l #1,d0
0002DD4C <AmiBlitz3.ab2@1765>   BNE 'l10
0002DD50 <AmiBlitz3.ab2@1766>   BSR.w call_setpointerbusy
0002DD54 <AmiBlitz3.ab2@1767>   BSR.w free_userlibs
0002DD58 <AmiBlitz3.ab2@1768>   BSR.w scan_for_userlibs
0002DD5C <AmiBlitz3.ab2@1769>   BSR.w JL_0_7082
0002DD60 <AmiBlitz3.ab2@1770> BRA.w call_setpointernormal
0002DD8A <AmiBlitz3.ab2@1776>   !basic
0002DDC4 <AmiBlitz3.ab2@1777>   Poke.l ?size_acidlibs, dos_GetFileSize{Peek$(?str_path_acidlibs)}
0002DDD4 <AmiBlitz3.ab2@1779>   deflibNameP.l = Peek.l(?deflib)
0002DDDE <AmiBlitz3.ab2@1780>   If deflibNameP
0002DE10 <AmiBlitz3.ab2@1781>     If Peek.s(deflibNameP)<>""
0002DE5A <AmiBlitz3.ab2@1782>       Poke.l ?size_deflibs, dos_GetFileSize{Peek.s(Peek.l(?deflib))}
0002DE60 <AmiBlitz3.ab2@1783>     Else
0002DE9A <AmiBlitz3.ab2@1784>       Poke.l ?size_deflibs, dos_GetFileSize{Peek.s(?str_path_deflibs)}
0002DEA0 <AmiBlitz3.ab2@1786>   Else
0002DEDA <AmiBlitz3.ab2@1787>     Poke.l ?size_deflibs, dos_GetFileSize{Peek.s(?str_path_deflibs)}
0002DF08 <AmiBlitz3.ab2@1788>     error{"INTERNAL: Invalid deflib name pointer!"}
0002DF26 <AmiBlitz3.ab2@1790>   !asm
0002DF2C <AmiBlitz3.ab2@1795>   MOVE.l #str_path_userlibs,D1
0002DF2E <AmiBlitz3.ab2@1796>   MOVEQ.l #-$02,D2
0002DF34 <AmiBlitz3.ab2@1797>   MOVEA.l _dosbase,A6
0002DF38 <AmiBlitz3.ab2@1798>   JSR _Lock(A6)
0002DF3A <AmiBlitz3.ab2@1799>   MOVE.l D0,D7
0002DF3E <AmiBlitz3.ab2@1800>    BEQ.w exit_get_libraries
0002DF40 <AmiBlitz3.ab2@1801>   MOVE.l D7,D1
0002DF46 <AmiBlitz3.ab2@1802>   MOVE.l #ptr_parameterstore,D2
0002DF4A <AmiBlitz3.ab2@1803>   JSR _Examine(A6)
0002DF4C <AmiBlitz3.ab2@1804>   TST.l D0
0002DF50 <AmiBlitz3.ab2@1805>   BEQ.w unlock_and_exit_get_libraries
0002DF56 <AmiBlitz3.ab2@1806>   MOVE.l fib_DirEntryType,D0
0002DF5A <AmiBlitz3.ab2@1807>   BMI.w unlock_and_exit_get_libraries
0002DF5C <AmiBlitz3.ab2@1812>     MOVE.l D7,D1
0002DF62 <AmiBlitz3.ab2@1813>     MOVE.l #ptr_parameterstore,D2
0002DF68 <AmiBlitz3.ab2@1814>     MOVEA.l _dosbase,A6
0002DF6C <AmiBlitz3.ab2@1815>     JSR _ExNext(A6)
0002DF6E <AmiBlitz3.ab2@1816>     TST.l D0
0002DF72 <AmiBlitz3.ab2@1817>      BEQ.w exit_scan_libsdrawer                            ; kein weiteres File
0002DF78 <AmiBlitz3.ab2@1819>     MOVE.l fib_DirEntryType,D0                             ; positive for directoies, negative for files
0002DF7C <AmiBlitz3.ab2@1820>     BPL.w scan_libsdrawer                                  ; skip directories
0002DF82 <AmiBlitz3.ab2@1822>     LEA fib_FileName,A0                                    ; pruefen ob infofile
0002DF86 <AmiBlitz3.ab2@1823>     BSR.w check_for_infoextention
0002DF8A <AmiBlitz3.ab2@1824>     BEQ.w scan_libsdrawer
0002DF90 <AmiBlitz3.ab2@1826>     MOVEA.l _execbase,A6                                   ; allocate $26 = 38 bytes fuer listeneintrag
0002DF92 <AmiBlitz3.ab2@1827>     MOVEQ.l #$26,D0
0002DF94 <AmiBlitz3.ab2@1828>     MOVEQ.l #$01,D1
0002DF9A <AmiBlitz3.ab2@1829>     MOVE.l mempool,a0
0002DF9E <AmiBlitz3.ab2@1830>     JSR _AllocPooled(a6)
0002DFA4 <AmiBlitz3.ab2@1832>     MOVEA.l _dosbase,A6
0002DFA6 <AmiBlitz3.ab2@1833>     MOVE.l D0,D6                                           ; sichere speicheradresse in D6
0002DFAC <AmiBlitz3.ab2@1836>     LEA ptr_userlibs_list,A0                               ; pruefe liste
0002DFAE <AmiBlitz3.ab2@1839>     MOVE.l (A0),D5
0002DFB2 <AmiBlitz3.ab2@1840>      BEQ.w JL_0_3722                                       ; kein pointer da? kann springe weiter
0002DFB4 <AmiBlitz3.ab2@1841>     MOVEA.l D5,A2
0002DFB6 <AmiBlitz3.ab2@1842>     ADDQ.w #6,A2                                           ; 6 bytes weiter gehen, um dateinamen zu speichern
0002DFBC <AmiBlitz3.ab2@1845>     LEA fib_FileName,A1                                    ; vergleich, ob Dateiname schon in der liste ist
0002DFBE <AmiBlitz3.ab2@1848>       MOVEQ.l #$00,D0
0002DFC0 <AmiBlitz3.ab2@1849>       MOVE.b (A1)+,D0
0002DFC4 <AmiBlitz3.ab2@1850>        BEQ.w JL_0_3722                                     ; dateiname komplett, dann weiter
0002DFC6 <AmiBlitz3.ab2@1851>       MOVEQ.l #$00,D1
0002DFC8 <AmiBlitz3.ab2@1852>       MOVE.b (A2)+,D1
0002DFCC <AmiBlitz3.ab2@1853>        BEQ.w JL_0_371C
0002DFEE <AmiBlitz3.ab2@1854>       !compare1                                            ;bsr.w tstalpha
0002DFF2 <AmiBlitz3.ab2@1855>       BNE.w JL_0_3702
0002DFF6 <AmiBlitz3.ab2@1856>       ANDI.w #$DF,D0
0002DFF8 <AmiBlitz3.ab2@1859>       EXG.l D0,D1
0002E01A <AmiBlitz3.ab2@1860>       !compare1                                            ;bsr.w tstalpha
0002E01E <AmiBlitz3.ab2@1861>       BNE.w JL_0_3710
0002E022 <AmiBlitz3.ab2@1862>       ANDI.w #$DF,D0
0002E024 <AmiBlitz3.ab2@1865>       EXG.l D0,D1
0002E026 <AmiBlitz3.ab2@1866>       CMP.b D1,D0
0002E02A <AmiBlitz3.ab2@1867>     BEQ.w JL_0_36E6
0002E02E <AmiBlitz3.ab2@1868>     BCS.w JL_0_3722
0002E030 <AmiBlitz3.ab2@1871>     MOVEA.l D5,A0
0002E034 <AmiBlitz3.ab2@1872> BRA.w JL_0_36D6
0002E036 <AmiBlitz3.ab2@1875>     MOVEA.l D6,A1                                          ; hier war die adresse des allokierten Speicers drin
0002E038 <AmiBlitz3.ab2@1876>     MOVE.l (A0),(A1)
0002E03A <AmiBlitz3.ab2@1877>     MOVE.l A1,(A0)
0002E03C <AmiBlitz3.ab2@1878>     ADDQ.w #4,A1                                           ; pointer zum naechsten namen ueberspringen
0002E040 <AmiBlitz3.ab2@1879>     MOVE.w #$FFFF,(A1)+                                    ; $FFFF schreiben
0002E046 <AmiBlitz3.ab2@1880>     MOVEA.l #fib_FileName,A0                               ; dateinamen in die liste kopieren
0002E048 <AmiBlitz3.ab2@1883>       MOVE.b (A0)+,(A1)+
0002E04C <AmiBlitz3.ab2@1884>     BNE.w JL_0_3734
0002E050 <AmiBlitz3.ab2@1885> BRA.w scan_libsdrawer
0002E052 <AmiBlitz3.ab2@1888>   MOVE.l D7,D1
0002E058 <AmiBlitz3.ab2@1889>   MOVEA.l _dosbase,A6
0002E05C <AmiBlitz3.ab2@1890>   JSR _UnLock(A6)
0002E05E <AmiBlitz3.ab2@1891>   MOVEQ.l #-$01,D0
0002E060 <AmiBlitz3.ab2@1894> RTS
0002E062 <AmiBlitz3.ab2@1897>   MOVE.l D7,D1
0002E068 <AmiBlitz3.ab2@1898>   MOVEA.l _dosbase,A6
0002E06C <AmiBlitz3.ab2@1899>   JSR _UnLock(A6)
0002E06E <AmiBlitz3.ab2@1900>   MOVEQ.l #$00,D0
0002E070 <AmiBlitz3.ab2@1901> RTS
0002E076 <AmiBlitz3.ab2@1905>   MOVEA.l _execbase,A6
0002E07C <AmiBlitz3.ab2@1906>   MOVEA.l ptr_userlibs_list,A2
0002E082 <AmiBlitz3.ab2@1907>   CLR.l ptr_userlibs_list
0002E086 <AmiBlitz3.ab2@1910>     CMPA.w #$0,A2
0002E08A <AmiBlitz3.ab2@1911>     BEQ.w exit_free_userlib
0002E08C <AmiBlitz3.ab2@1912>       MOVEA.l A2,A1
0002E08E <AmiBlitz3.ab2@1913>       MOVEQ.l #$26,D0
0002E090 <AmiBlitz3.ab2@1914>       MOVEA.l (A2),A2
0002E096 <AmiBlitz3.ab2@1915>       MOVE.l mempool,a0
0002E09C <AmiBlitz3.ab2@1916>       MOVEA.l _execbase,A6
0002E0A0 <AmiBlitz3.ab2@1917>       JSR _FreePooled(A6)
0002E0A4 <AmiBlitz3.ab2@1918> BRA.w loop_free_userlib
0002E0A6 <AmiBlitz3.ab2@1921> RTS
0002E0A8 <AmiBlitz3.ab2@1924> pass:  Dc.w 0                                             ; smallpass org source
0002E0AA <AmiBlitz3.ab2@1925> compiler_job: Dc.w 0                                      ; added by thilo: what the compiler is doing at the moment
0002E0B0 <AmiBlitz3.ab2@1929>   MOVE.l A7,errstack                                      ;startcompile
0002E0B6 <AmiBlitz3.ab2@1938>   CLR.l reqmode
0002E0C0 <AmiBlitz3.ab2@1940>   MOVE.l #Aclearallvars,errcont
0002E0CA <AmiBlitz3.ab2@1941>   MOVE.l #concomstack,concomsp
0002E0CE <AmiBlitz3.ab2@1948>   MOVE.w #1450,D0
0002E0D0 <AmiBlitz3.ab2@1949>   LSR.w #3,D0
0002E0D2 <AmiBlitz3.ab2@1950>   SUBQ.w #7,D0                                             ; 173
0002E0D8 <AmiBlitz3.ab2@1951>   MOVE.w D0,progressbar_width
0002E0DA <AmiBlitz3.ab2@1952>   SWAP D0
0002E0DC <AmiBlitz3.ab2@1953>   CLR.w D0
0002E0E2 <AmiBlitz3.ab2@1954>   MOVE.l numlines,d1
0002E0E6 <AmiBlitz3.ab2@1955>   DIVU.l d1,d0                                             ; progressbar_width / numlines
0002E0E8 <AmiBlitz3.ab2@1957>   TST.w D0
0002E0EC <AmiBlitz3.ab2@1958>   BNE.w JL_0_37C0
0002E0EE <AmiBlitz3.ab2@1959>   MOVEQ.l #-$01,D0
0002E0F4 <AmiBlitz3.ab2@1962>   MOVE.w D0,progress_per_line
0002E0FC <AmiBlitz3.ab2@1970>   BTST #$7,use_debugger
0002E100 <AmiBlitz3.ab2@1972>   BNE 'debugon
0002E106 <AmiBlitz3.ab2@1973>   CLR.w debugmode
0002E10A <AmiBlitz3.ab2@1974> BRA.b 'debugoff
0002E110 <AmiBlitz3.ab2@1977>   SNE debugmode
0002E148 <AmiBlitz3.ab2@1985>   !ComData_SetB{comByte_DebugMode,debugmode}
0002E14E <AmiBlitz3.ab2@1988>   CLR.w dirmode                                            ;direct mode flag
0002E154 <AmiBlitz3.ab2@1989>   CLR.w ezerr                                              ;quiet error
0002E15A <AmiBlitz3.ab2@1990>   CLR.l currentfunction
0002E160 <AmiBlitz3.ab2@1991>   CLR.w connest
0002E166 <AmiBlitz3.ab2@1992>   CLR.w varmode
0002E16C <AmiBlitz3.ab2@1993>   CLR.w proceduremode
0002E172 <AmiBlitz3.ab2@1994>   CLR.w ininclude
0002E178 <AmiBlitz3.ab2@1995>   CLR.w intstring
0002E17E <AmiBlitz3.ab2@1996>   CLR.w pass
0002E186 <AmiBlitz3.ab2@1997>   MOVE.w #0,compiler_job
0002E18C <AmiBlitz3.ab2@1998>   CLR.l funcscanon
0002E192 <AmiBlitz3.ab2@2006>   CLR.l funcscanon
0002E196 <AmiBlitz3.ab2@2007>   BSR.w compileall
0002E19C <AmiBlitz3.ab2@2009>   MOVE.w dontwrite,d0
0002E1A0 <AmiBlitz3.ab2@2010>   CMP.w #1,d0
0002E1A4 <AmiBlitz3.ab2@2011>   BNE 'l3
0002E1AA <AmiBlitz3.ab2@2012>   CLR.w dontwrite
0002E1AE <AmiBlitz3.ab2@2013>   BSR compileall                                           ;if a function is not found
0002E1B4 <AmiBlitz3.ab2@2017>   TST.b funcoptimize
0002E1BA <AmiBlitz3.ab2@2019>   LEA firstproc,a0
0002E1C0 <AmiBlitz3.ab2@2020>   CLR.l savefuncspace
0002E1C2 <AmiBlitz3.ab2@2021>   MOVE.l (a0),d0
0002E1C4 <AmiBlitz3.ab2@2025>     MOVE.l d0,a0
0002E1C8 <AmiBlitz3.ab2@2026>     BEQ 'out
0002E1CC <AmiBlitz3.ab2@2027>     TST.b isfunc(a0)
0002E1D0 <AmiBlitz3.ab2@2028>     BNE 'nex
0002E1D4 <AmiBlitz3.ab2@2029>     MOVEM.l d2/a6/a0,-(a7)
0002E1D6 <AmiBlitz3.ab2@2031>     MOVEQ #0,d0
0002E1DA <AmiBlitz3.ab2@2032>     MOVE.b $21+#funcentry_extend-1(a0),d0
0002E1DE <AmiBlitz3.ab2@2033>     SUB.w #$21+#funcentry_extend,d0
0002E1E2 <AmiBlitz3.ab2@2034>     ADD.w #16,d0
0002E1E8 <AmiBlitz3.ab2@2035>     MOVE.l #$10000,d1
0002E1EA <AmiBlitz3.ab2@2036>     MOVE.l d0,d2
0002E1F0 <AmiBlitz3.ab2@2037>     MOVEA.l _execbase,A6
0002E1F4 <AmiBlitz3.ab2@2038>     JSR _AllocMem(a6)         ; thilo: not 100% sure about this!
0002E1F6 <AmiBlitz3.ab2@2039>     MOVE.l d0,a1
0002E1FA <AmiBlitz3.ab2@2040>     MOVE.l d2,4(a1)
0002E200 <AmiBlitz3.ab2@2041>     MOVE.l unusedfunc,(a1)
0002E206 <AmiBlitz3.ab2@2042>     MOVE.l d0,unusedfunc
0002E20A <AmiBlitz3.ab2@2043>     MOVEM.l (a7)+,a6/a0/d2
0002E20E <AmiBlitz3.ab2@2044>     MOVE.l isfunc+1(a0),d0
0002E210 <AmiBlitz3.ab2@2045>     ADDQ.l #6,d0
0002E216 <AmiBlitz3.ab2@2046>     ADD.l d0,savefuncspace
0002E21A <AmiBlitz3.ab2@2049>     MOVE.l d0,8(a1)
0002E21E <AmiBlitz3.ab2@2050>     LEA 12(a1),a1
0002E220 <AmiBlitz3.ab2@2051>     MOVE.l a0,-(a7)
0002E224 <AmiBlitz3.ab2@2052>     LEA $21+#funcentry_extend(a0),a0
0002E226 <AmiBlitz3.ab2@2055>       MOVE.b (a0)+,(a1)+
0002E22A <AmiBlitz3.ab2@2056>     BNE 'l1
0002E22C <AmiBlitz3.ab2@2057>     MOVE.l (a7)+,a0
0002E22E <AmiBlitz3.ab2@2060>     MOVE.l (a0),d0
0002E232 <AmiBlitz3.ab2@2061> BRA 'lr1
0002E23A <AmiBlitz3.ab2@2064>   BTST #$7,make_smallestcode
0002E23E <AmiBlitz3.ab2@2065>   BEQ.b JL_0_3844                                           ;optimize for executable
0002E244 <AmiBlitz3.ab2@2066>   CLR.l morememadd
0002E248 <AmiBlitz3.ab2@2068>   BSR.w alloxadj
0002E24C <AmiBlitz3.ab2@2069>   BEQ.w JL_0_388A
0002E252 <AmiBlitz3.ab2@2070>   ADDQ.w #1,pass
0002E256 <AmiBlitz3.ab2@2071>   BSR.w compileall
0002E25C <AmiBlitz3.ab2@2074>   MOVE.w dontwrite,D1
0002E260 <AmiBlitz3.ab2@2075>   BEQ.w JL_0_38A2
0002E264 <AmiBlitz3.ab2@2094> BRA.w JL_0_3896
0002E26C <AmiBlitz3.ab2@2105>   MOVE.w #$FFFF,anyerrs
0002E270 <AmiBlitz3.ab2@2106> BRA.w JL_0_38A2
0002E274 <AmiBlitz3.ab2@2109>   BSR.w alloxinc                                          ;increase all by 50%
0002E278 <AmiBlitz3.ab2@2110>   BEQ.w Aclearallvars
0002E27C <AmiBlitz3.ab2@2111> BRA.w JL_0_3824
0002E280 <AmiBlitz3.ab2@2123> BRA.w JL_0_38A6                                            ;???????
0002E286 <AmiBlitz3.ab2@2127>   JSR freereps
0002E28C <AmiBlitz3.ab2@2128>   JSR freesels
0002E292 <AmiBlitz3.ab2@2129>   JSR AJL_0_6DF2
0002E298 <AmiBlitz3.ab2@2130>   JSR freepends
0002E29E <AmiBlitz3.ab2@2131>   JSR freeifs
0002E2A4 <AmiBlitz3.ab2@2132>   JSR AJL_0_C188
0002E2AA <AmiBlitz3.ab2@2133>   JSR AJL_0_C15C
0002E2B0 <AmiBlitz3.ab2@2134>   JSR AJL_0_D9BC
0002E2B6 <AmiBlitz3.ab2@2137> JMP cleartemplabel
0002E2BA <AmiBlitz3.ab2@2140> mempool2:  Dc.l 0
0002E2C0 <AmiBlitz3.ab2@2144>   JSR Aclearcache
0002E2C8 <AmiBlitz3.ab2@2146>   BTST #$7,use_debugger
0002E2CC <AmiBlitz3.ab2@2148>   BNE 'debugon
0002E2D2 <AmiBlitz3.ab2@2149>   CLR.w debugmode
0002E2D6 <AmiBlitz3.ab2@2150> BRA.b 'debugoff
0002E2DC <AmiBlitz3.ab2@2153>   SNE debugmode
0002E314 <AmiBlitz3.ab2@2158>   !ComData_SetB{comByte_DebugMode,debugmode}
0002E31A <AmiBlitz3.ab2@2160>   LEA regtable,a0
0002E31C <AmiBlitz3.ab2@2161>   MOVEQ #10,d0
0002E31E <AmiBlitz3.ab2@2164>     CLR.l (a0)+
0002E322 <AmiBlitz3.ab2@2165>   DBF d0,'l1
0002E328 <AmiBlitz3.ab2@2167>   LEA includetemp2,a0
0002E32A <AmiBlitz3.ab2@2168>   CLR.b (a0)
0002E334 <AmiBlitz3.ab2@2169>   MOVE.l #7,maxregs
0002E33A <AmiBlitz3.ab2@2170>   CLR.w debugnest
0002E340 <AmiBlitz3.ab2@2171>   CLR.b funcparloop
0002E346 <AmiBlitz3.ab2@2172>   CLR.b nostringopt
0002E34C <AmiBlitz3.ab2@2173>   CLR.b firsttime
0002E352 <AmiBlitz3.ab2@2174>   CLR.l lastdestpointer
0002E358 <AmiBlitz3.ab2@2175>   CLR.l lastwritedat
0002E35E <AmiBlitz3.ab2@2176>   CLR.l prevwritedat
0002E364 <AmiBlitz3.ab2@2177>   CLR.l includeline
0002E36A <AmiBlitz3.ab2@2178>   CLR.b incnif
0002E370 <AmiBlitz3.ab2@2179>   CLR.b formode
0002E376 <AmiBlitz3.ab2@2180>   CLR.b funccall
0002E37C <AmiBlitz3.ab2@2181>   CLR.w objectcount
0002E382 <AmiBlitz3.ab2@2182>   CLR.b resdisable
0002E388 <AmiBlitz3.ab2@2183>   CLR.b developobject
0002E38E <AmiBlitz3.ab2@2184>   CLR.b optistring
0002E394 <AmiBlitz3.ab2@2185>   CLR.b optistring2
0002E39A <AmiBlitz3.ab2@2186>   CLR.b optiarray
0002E3A0 <AmiBlitz3.ab2@2187>   CLR.b quickadd
0002E3A6 <AmiBlitz3.ab2@2188>   CLR.w newmode
0002E3AC <AmiBlitz3.ab2@2189>   CLR.w mode
0002E3B2 <AmiBlitz3.ab2@2190>   CLR.w string1
0002E3B8 <AmiBlitz3.ab2@2191>   CLR.b fastfunc
0002E3BE <AmiBlitz3.ab2@2192>   CLR.w load_var_size
0002E3C4 <AmiBlitz3.ab2@2193>   CLR.w load_var_reg
0002E3CA <AmiBlitz3.ab2@2194>   CLR.l load_var_addr
0002E3D0 <AmiBlitz3.ab2@2195>   CLR.w imm_size
0002E3D6 <AmiBlitz3.ab2@2196>   CLR.w imm_reg
0002E3DC <AmiBlitz3.ab2@2197>   CLR.l imm_addr
0002E3E2 <AmiBlitz3.ab2@2198>   CLR.b _dcb
0002E3E8 <AmiBlitz3.ab2@2199>   CLR.l nohunkoffset
0002E3EE <AmiBlitz3.ab2@2200>   CLR.b peekaddrsize
0002E3F4 <AmiBlitz3.ab2@2201>   CLR.b typecheck
0002E3FA <AmiBlitz3.ab2@2202>   CLR.b declare2
0002E400 <AmiBlitz3.ab2@2203>   CLR.b declare
0002E406 <AmiBlitz3.ab2@2204>   CLR.l myoline                                          ;check
0002E40C <AmiBlitz3.ab2@2205>   CLR.l myline                                          ;check
0002E412 <AmiBlitz3.ab2@2206>   CLR.b newvariable
0002E418 <AmiBlitz3.ab2@2207>   CLR.b saved0
0002E41E <AmiBlitz3.ab2@2208>   CLR.l bsssize
0002E424 <AmiBlitz3.ab2@2209>   CLR.l chipsize
0002E42A <AmiBlitz3.ab2@2210>   CLR.b infunctioncode
0002E434 <AmiBlitz3.ab2@2211>   MOVE.l #-1,bssstart
0002E43E <AmiBlitz3.ab2@2212>   MOVE.l #-1,bssend
0002E448 <AmiBlitz3.ab2@2213>   MOVE.l #-1,chipstart
0002E452 <AmiBlitz3.ab2@2214>   MOVE.l #-1,chipend
0002E45A <AmiBlitz3.ab2@2215>   MOVE.w #0,bssmode
0002E460 <AmiBlitz3.ab2@2216>   CLR.w a2offset
0002E466 <AmiBlitz3.ab2@2217>   CLR.w fast
0002E46C <AmiBlitz3.ab2@2218>   CLR.w fpu
0002E472 <AmiBlitz3.ab2@2219>   CLR.b iee
0002E478 <AmiBlitz3.ab2@2220>   CLR.w newsyntax
0002E47C <AmiBlitz3.ab2@2221>   BSR.w JL_0_38A6
0002E482 <AmiBlitz3.ab2@2222>   JSR AJL_0_7962
0002E488 <AmiBlitz3.ab2@2223>   JSR frallvars
0002E48E <AmiBlitz3.ab2@2224>   JSR fralltypes
0002E494 <AmiBlitz3.ab2@2225>   JSR freemacs
0002E49A <AmiBlitz3.ab2@2226>   JSR clearfunctionlist
0002E4A0 <AmiBlitz3.ab2@2227>   TST.w pass
0002E4A6 <AmiBlitz3.ab2@2229>   JSR clearlabels
0002E4AC <AmiBlitz3.ab2@2230>   JSR clearhash
0002E4B2 <AmiBlitz3.ab2@2233>   LEA devo,a0
0002E4B6 <AmiBlitz3.ab2@2234>   MOVEM.l a0-a6/d0-d7,-(a7)
0002E4BC <AmiBlitz3.ab2@2235>   LEA ptr_parameterstore,a1
0002E4BE <AmiBlitz3.ab2@2238>     MOVE.b (a0)+,(a1)+
0002E4C2 <AmiBlitz3.ab2@2239>   BNE 'l1b
0002E4C4 <AmiBlitz3.ab2@2240>   MOVEQ #13,d2
0002E4CA <AmiBlitz3.ab2@2241>   JSR findlabel2
0002E4CE <AmiBlitz3.ab2@2242>   BNE 'd
0002E4D2 <AmiBlitz3.ab2@2243>   CLR.l 8(a2)
0002E4D6 <AmiBlitz3.ab2@2246>   MOVEM.l (a7)+,a0-a6/d0-d7
0002E500 <AmiBlitz3.ab2@2247>   !basic
0002E574 <AmiBlitz3.ab2@2248>   dos_Delete{dos_AddPart{my_systemdir$,"ab_compileerror.txt"}}
0002E592 <AmiBlitz3.ab2@2249>   !asm
0002E598 <AmiBlitz3.ab2@2250>   CLR.b returncode
0002E59E <AmiBlitz3.ab2@2251> JMP freeprocvs
0002E5A4 <AmiBlitz3.ab2@2255>   MOVE.l #bssstore-labelhash,d0
0002E5A6 <AmiBlitz3.ab2@2256>   ASR.l #2,d0
0002E5AC <AmiBlitz3.ab2@2257>   LEA labelhash,a0
0002E5AE <AmiBlitz3.ab2@2260>     CLR.l (a0)+
0002E5B0 <AmiBlitz3.ab2@2261>     SUBQ.l #1,d0
0002E5B4 <AmiBlitz3.ab2@2262>   BNE.s 'l10
0002E5BA <AmiBlitz3.ab2@2264>   LEA labelbase,a1
0002E5BC <AmiBlitz3.ab2@2265>   MOVE.l (a1),d0
0002E5C0 <AmiBlitz3.ab2@2266>   BEQ 'l11
0002E5C2 <AmiBlitz3.ab2@2269>     MOVE.l d0,a1
0002E5C6 <AmiBlitz3.ab2@2270>     TST.l 4(a1)
0002E5CA <AmiBlitz3.ab2@2271>     BEQ 'l29
0002E5CE <AmiBlitz3.ab2@2272>     LEA $13(a1),a0
0002E5D0 <AmiBlitz3.ab2@2273>     MOVEQ #0,d0
0002E5D2 <AmiBlitz3.ab2@2274>     MOVEQ #0,d1
0002E5D4 <AmiBlitz3.ab2@2277>       MOVE.b (a0)+,d1
0002E5D8 <AmiBlitz3.ab2@2278>       BEQ 'l12
0002E5DE <AmiBlitz3.ab2@2279>       !hashalgo
0002E5E2 <AmiBlitz3.ab2@2280> BRA 'l13
0002E5E8 <AmiBlitz3.ab2@2283>     LEA labelhash,a0
0002E5EE <AmiBlitz3.ab2@2284>     AND.l #hashsize,d0
0002E5F0 <AmiBlitz3.ab2@2285>      ASL.l #2,d0
0002E5F4 <AmiBlitz3.ab2@2286>     MOVE.l 0(a0,d0),d1                                     ;*4
0002E5F8 <AmiBlitz3.ab2@2287>     MOVE.l d1,$c(a1)
0002E5FC <AmiBlitz3.ab2@2288>     MOVE.l a1,0(a0,d0)
0002E5FE <AmiBlitz3.ab2@2291>     MOVE.l (a1),d0
0002E602 <AmiBlitz3.ab2@2292>   BNE 'l21
0002E604 <AmiBlitz3.ab2@2295> RTS
0002E60A <AmiBlitz3.ab2@2299>   MOVEA.l lastrestype,A0
0002E60C <AmiBlitz3.ab2@2300>   MOVEA.l (A0),A2
0002E60E <AmiBlitz3.ab2@2301>   CLR.l (A0)
0002E614 <AmiBlitz3.ab2@2302> JMP freetypes
0002E61A <AmiBlitz3.ab2@2306>   MOVEA.l varbase,A3
0002E620 <AmiBlitz3.ab2@2307>   CLR.l varbase
0002E624 <AmiBlitz3.ab2@2310>   CMPA.w #$0,A3
0002E628 <AmiBlitz3.ab2@2311>   BEQ.w 'l20
0002E62A <AmiBlitz3.ab2@2312>   MOVEA.l A3,A1
0002E62C <AmiBlitz3.ab2@2313>   MOVEA.l (A3),A3
0002E62E <AmiBlitz3.ab2@2314>   MOVEQ.l #$00,D0
0002E632 <AmiBlitz3.ab2@2315>   MOVE.b $E+4(A1),D0
0002E638 <AmiBlitz3.ab2@2316>   MOVEA.l _execbase,A6
0002E63E <AmiBlitz3.ab2@2317>   MOVE.l mempool2,a0
0002E642 <AmiBlitz3.ab2@2318>   JSR _FreePooled(A6)
0002E646 <AmiBlitz3.ab2@2319> BRA.w 'l10
0002E648 <AmiBlitz3.ab2@2322> RTS
0002E64E <AmiBlitz3.ab2@2327>   LEA firstiff,A2
0002E650 <AmiBlitz3.ab2@2328>   MOVEQ.l #$0E,D2
0002E656 <AmiBlitz3.ab2@2329> JMP freeslist
0002E658 <AmiBlitz3.ab2@2335> progressbar_width:   Dc.w 100                              ;riteend org source ;right end of include strip
0002E65A <AmiBlitz3.ab2@2336> inmacro:             Ds.w 1                                ;macmask org source ;macro found
0002E660 <AmiBlitz3.ab2@2340>   CLR.w inmacro
0002E666 <AmiBlitz3.ab2@2341>   ADDQ.l #1,globallinecount
0002E66C <AmiBlitz3.ab2@2342>   CLR.b nostringopt
0002E670 <AmiBlitz3.ab2@2343>   BSR.w JL_0_3CA4
0002E676 <AmiBlitz3.ab2@2344>   CLR.w instringon
0002E67C <AmiBlitz3.ab2@2347>   TST.w ininclude
0002E680 <AmiBlitz3.ab2@2348>   BEQ.w JL_0_39B0
0002E686 <AmiBlitz3.ab2@2349>   ADDQ.l #1,includeline
0002E68C <AmiBlitz3.ab2@2350>     JSR ab3_WriteDebugFile
0002E692 <AmiBlitz3.ab2@2351>   JSR AJL_0_C09E
0002E696 <AmiBlitz3.ab2@2352>   BEQ.w JL_0_39B0
0002E69C <AmiBlitz3.ab2@2353>   MOVE.w ininclude,D0
0002E6A0 <AmiBlitz3.ab2@2354>   CMP.w #$4,D0
0002E6A4 <AmiBlitz3.ab2@2355>   BCC.w JL_0_39AC
0002E6A6 <AmiBlitz3.ab2@2356>   ADD.w D0,D0
0002E6AC <AmiBlitz3.ab2@2357>   LEA progress_per_line,A0
0002E6B0 <AmiBlitz3.ab2@2358>   MOVE.w $0(A0,D0.W),D2
0002E6B4 <AmiBlitz3.ab2@2359>   CMP.w progressbar_width(PC),D2
0002E6B8 <AmiBlitz3.ab2@2360>   BCC.w JL_0_39AC
0002E6BC <AmiBlitz3.ab2@2361>   ADDQ.w #1,$0(A0,D0.W)
0002E6BE <AmiBlitz3.ab2@2362>   LSR.w #1,D0
0002E6C0 <AmiBlitz3.ab2@2363>   MOVE.l d0,d1
0002E6C2 <AmiBlitz3.ab2@2364>   EXT.l d1
0002E6C4 <AmiBlitz3.ab2@2365>   MOVE.l d2,d0
0002E6C6 <AmiBlitz3.ab2@2366>   EXT.l d0                                                 ;d0=x,d1=y
0002E6CC <AmiBlitz3.ab2@2368>   JSR update_progressbar
0002E6CE <AmiBlitz3.ab2@2371>   MOVEQ.l #-$01,D0
0002E6D0 <AmiBlitz3.ab2@2372> RTS
0002E6D6 <AmiBlitz3.ab2@2376>   MOVE.l titleat,D0
0002E6D8 <AmiBlitz3.ab2@2377>   MOVEQ.l #$00,D1
0002E6DE <AmiBlitz3.ab2@2378>   MOVE.w progress_per_line,D1
0002E6E0 <AmiBlitz3.ab2@2379>   ADD.l D1,D0
0002E6E2 <AmiBlitz3.ab2@2380>   MOVE.l D0,D1
0002E6E4 <AmiBlitz3.ab2@2381>   SWAP D0
0002E6EA <AmiBlitz3.ab2@2382>   CMP.w titleat,D0
0002E6EE <AmiBlitz3.ab2@2383>    BEQ.w JL_0_39E4
0002E6F0 <AmiBlitz3.ab2@2386>   EXT.l d0
0002E6F2 <AmiBlitz3.ab2@2387>   MOVE.l d1,-(a7)
0002E6FA <AmiBlitz3.ab2@2390>   MOVE.w #1,compiler_job                                    ; set to compiler job 1 (=build executable)
0002E700 <AmiBlitz3.ab2@2391>   JSR update_progressbar
0002E708 <AmiBlitz3.ab2@2392>   MOVE.w #0,compiler_job                                    ; set to compiler job 0 (=compile source)
0002E70A <AmiBlitz3.ab2@2396>   MOVE.l (a7)+,d1
0002E710 <AmiBlitz3.ab2@2399>   MOVE.l D1,titleat
0002E716 <AmiBlitz3.ab2@2400>   ADDQ.l #1,linenumat
0002E71C <AmiBlitz3.ab2@2401>   CLR.w linedone
0002E722 <AmiBlitz3.ab2@2402>   JSR ab3_WriteDebugFile  ; write to DebugFile every main source line
0002E728 <AmiBlitz3.ab2@2404>   SUBQ.l #1,numlines2
0002E72C <AmiBlitz3.ab2@2405>    BEQ.w JL_0_3A12
0002E732 <AmiBlitz3.ab2@2406>   MOVEA.l sourceline,A0
0002E734 <AmiBlitz3.ab2@2407>   MOVEA.l (A0),A0
0002E73A <AmiBlitz3.ab2@2408>   MOVE.l A0,sourceline
0002E73E <AmiBlitz3.ab2@2409>   LEA $9(A0),A5
0002E740 <AmiBlitz3.ab2@2412> RTS
0002E742 <AmiBlitz3.ab2@2416>   MOVE.w D0,-(A7)
0002E744 <AmiBlitz3.ab2@2417>   MOVEQ.l #$03,D0
0002E746 <AmiBlitz3.ab2@2420>     MOVE.w D1,D2
0002E74A <AmiBlitz3.ab2@2421>     ANDI.w #$F,D2
0002E74E <AmiBlitz3.ab2@2422>     ADDI.w #$30,D2
0002E752 <AmiBlitz3.ab2@2423>     CMP.w #$3A,D2
0002E756 <AmiBlitz3.ab2@2424>      BCS.w JL_0_3A2C
0002E758 <AmiBlitz3.ab2@2425>     ADDQ.w #7,D2
0002E75C <AmiBlitz3.ab2@2428>     MOVE.b D2,$0(A0,D0.W)
0002E75E <AmiBlitz3.ab2@2429>     LSR.w #4,D1
0002E762 <AmiBlitz3.ab2@2430>   DBF D0,JL_0_3A18
0002E764 <AmiBlitz3.ab2@2432>   MOVE.w (A7)+,D0
0002E766 <AmiBlitz3.ab2@2433> RTS
0002E76C <AmiBlitz3.ab2@2443>   MOVE.w skipcode,D1
0002E770 <AmiBlitz3.ab2@2444>   BNE.w JL_0_3A46
0002E772 <AmiBlitz3.ab2@2445> RTS
0002E774 <AmiBlitz3.ab2@2448>   MOVE.l A5,-(A7)
0002E776 <AmiBlitz3.ab2@2449>   MOVEQ.l #$3A,D1                                          ;':'
0002E778 <AmiBlitz3.ab2@2450>   MOVEQ.l #$21,D2                                          ;'!'
0002E77A <AmiBlitz3.ab2@2451>   MOVEQ.l #$3B,D3                                          ;';'
0002E77C <AmiBlitz3.ab2@2452>   MOVEQ.l #$22,D4                                          ;'"'
0002E77E <AmiBlitz3.ab2@2455>   MOVE.b (A5)+,D0
0002E782 <AmiBlitz3.ab2@2456>    BEQ.w JL_0_3CA0
0002E786 <AmiBlitz3.ab2@2457>    BPL.w JL_0_3A60
0002E788 <AmiBlitz3.ab2@2458>   MOVE.b (A5)+,D0
0002E78C <AmiBlitz3.ab2@2459> BRA.w JL_0_3A50
0002E78E <AmiBlitz3.ab2@2462>   CMP.b D4,D0
0002E792 <AmiBlitz3.ab2@2463>    BNE.w JL_0_3A82
0002E794 <AmiBlitz3.ab2@2466>   MOVE.b (A5)+,D0
0002E798 <AmiBlitz3.ab2@2467>    BEQ.w notqerr
0002E79C <AmiBlitz3.ab2@2473>   CMP.b #$22,D0
0002E7A0 <AmiBlitz3.ab2@2474>    BNE.w JL_0_3A66
0002E7A4 <AmiBlitz3.ab2@2475> BRA.w JL_0_3A50
0002E7A6 <AmiBlitz3.ab2@2478>   CMP.b D1,D0
0002E7AA <AmiBlitz3.ab2@2479>    BEQ.w JL_0_3CA0
0002E7AC <AmiBlitz3.ab2@2480>   CMP.b D3,D0
0002E7B0 <AmiBlitz3.ab2@2481>    BEQ.w JL_0_3CA0
0002E7B2 <AmiBlitz3.ab2@2484>   CMP.b D2,D0
0002E7B6 <AmiBlitz3.ab2@2485>    BNE.w JL_0_3A50
0002E7BE <AmiBlitz3.ab2@2486>   MOVE.w #$FFFF,inmacro                                    ; no runtimecheck in macros
0002E7C0 <AmiBlitz3.ab2@2487>   MOVEA.l A5,A3
0002E7C6 <AmiBlitz3.ab2@2488>    JSR getparameter2
0002E7CA <AmiBlitz3.ab2@2489>    BNE.w JL_0_3AAC
0002E7D0 <AmiBlitz3.ab2@2490> JMP syntaxerr
0002E7DA <AmiBlitz3.ab2@2495>    MOVE.w oldqflag,instringon
0002E7E0 <AmiBlitz3.ab2@2496>   MOVEA.l lastsourcepos,A5
0002E7E6 <AmiBlitz3.ab2@2497>    JSR findmac                                             ;find macro
0002E7EA <AmiBlitz3.ab2@2498>    BEQ.w JL_0_3ABE
0002E7F0 <AmiBlitz3.ab2@2499> JMP nomacerr
0002E7F6 <AmiBlitz3.ab2@2502>   TST.b debugmode
0002E7FA <AmiBlitz3.ab2@2503>   BEQ 'sk1
0002E7FE <AmiBlitz3.ab2@2504>   MOVE.w #$4e71,d1
0002E804 <AmiBlitz3.ab2@2505>   JSR writeword
0002E806 <AmiBlitz3.ab2@2506>   MOVE.l a5,-(a7)
0002E808 <AmiBlitz3.ab2@2507>   MOVE.l a3,a5
0002E80A <AmiBlitz3.ab2@2508>   SUBQ.l #1,a5
0002E812 <AmiBlitz3.ab2@2509>   MOVE.w #$0,inmacro
0002E816 <AmiBlitz3.ab2@2510>   BSR debugstuffa
0002E81E <AmiBlitz3.ab2@2511>   MOVE.w #$FFFF,inmacro
0002E820 <AmiBlitz3.ab2@2512>   MOVE.l (a7)+,a5
0002E824 <AmiBlitz3.ab2@2513>   MOVE.w #$4e71,d1
0002E82A <AmiBlitz3.ab2@2514>   JSR writeword
0002E82C <AmiBlitz3.ab2@2517>   MOVEA.l A5,A4
0002E830 <AmiBlitz3.ab2@2520>    CMP.b #" ",(a4)+
0002E834 <AmiBlitz3.ab2@2521>     BEQ 'l5a
0002E836 <AmiBlitz3.ab2@2522>      SUBQ.l#1,a4
0002E83A <AmiBlitz3.ab2@2523>      CMP.b #",",(a4)
0002E83E <AmiBlitz3.ab2@2524>     BEQ JL_0_3AEA
0002E840 <AmiBlitz3.ab2@2527>   MOVEQ.l #$00,D4
0002E846 <AmiBlitz3.ab2@2528>   TST.b newsyntax
0002E84A <AmiBlitz3.ab2@2529>   BEQ 'l10b
0002E84E <AmiBlitz3.ab2@2530>   MOVEM.l a0/d0,-(a7)
0002E852 <AmiBlitz3.ab2@2531>   MOVE.l 4(a2),a0
0002E856 <AmiBlitz3.ab2@2532>   MOVE.w 8(a2),d0
0002E85A <AmiBlitz3.ab2@2535>   CMP.b #"`",(a0)+
0002E85E <AmiBlitz3.ab2@2536>   BEQ 'x1
0002E860 <AmiBlitz3.ab2@2537>   SUBQ.w #1,d0
0002E864 <AmiBlitz3.ab2@2538>   BNE 'x2
0002E868 <AmiBlitz3.ab2@2539> BRA 'x3
0002E86C <AmiBlitz3.ab2@2542>   MOVEM.l (a7)+,a0/d0
0002E870 <AmiBlitz3.ab2@2543> BRA 'l10
0002E874 <AmiBlitz3.ab2@2546>   MOVEM.l (a7)+,a0/d0
0002E878 <AmiBlitz3.ab2@2547> BRA JL_0_3AEA
0002E87C <AmiBlitz3.ab2@2550>   CMPI.b #"{",(A4)
0002E880 <AmiBlitz3.ab2@2551>    BNE.w JL_0_3AEA
0002E882 <AmiBlitz3.ab2@2555>   ADDQ.l #1,a4
0002E886 <AmiBlitz3.ab2@2558>     CMP.b #" ",(a4)
0002E88A <AmiBlitz3.ab2@2559>     BEQ 'l5
0002E88E <AmiBlitz3.ab2@2560>     MOVEM.l a0/d0,-(a7)
0002E894 <AmiBlitz3.ab2@2561>     CLR.b exmac
0002E89A <AmiBlitz3.ab2@2562>     LEA chartab,a0
0002E89C <AmiBlitz3.ab2@2563>     MOVEQ #0,d0
0002E89E <AmiBlitz3.ab2@2564>     MOVE.b (a4),d0
0002E8A2 <AmiBlitz3.ab2@2565>     BMI 'm1
0002E8A6 <AmiBlitz3.ab2@2566>     TST.b 0(a0,d0)
0002E8AA <AmiBlitz3.ab2@2567>     BEQ 'm1
0002E8B0 <AmiBlitz3.ab2@2568>     TST.b newsyntax
0002E8B4 <AmiBlitz3.ab2@2569>     BEQ 'ns1
0002E8B8 <AmiBlitz3.ab2@2570>     CMP.b #"#",d0
0002E8BC <AmiBlitz3.ab2@2571>     BEQ 'm1
0002E8C0 <AmiBlitz3.ab2@2572>     CMP.b #"$",d0
0002E8C4 <AmiBlitz3.ab2@2573>     BEQ 'm1
0002E8C8 <AmiBlitz3.ab2@2574>     CMP.b #"-",d0
0002E8CC <AmiBlitz3.ab2@2575>     BEQ 'm1
0002E8D0 <AmiBlitz3.ab2@2578>   CMP.b #",",d0
0002E8D4 <AmiBlitz3.ab2@2579>     BEQ 'm1
0002E8D8 <AmiBlitz3.ab2@2580>     CMP.b #"{",d0
0002E8DC <AmiBlitz3.ab2@2581>     BNE 'm1b
0002E8DE <AmiBlitz3.ab2@2582>     ADDQ.l #1,a4
0002E8E2 <AmiBlitz3.ab2@2583> BRA 'm1
0002E8E8 <AmiBlitz3.ab2@2586>   TST.b newsyntax
0002E8EC <AmiBlitz3.ab2@2587>     BEQ 'm1
0002E8F4 <AmiBlitz3.ab2@2588>     MOVE.b #1,exmac
0002E8F8 <AmiBlitz3.ab2@2591>   MOVEM.l (a7)+,a0/d0
0002E8FE <AmiBlitz3.ab2@2592>     TST.b exmac
0002E902 <AmiBlitz3.ab2@2593>     BNE JL_0_3AEA
0002E904 <AmiBlitz3.ab2@2600>   TST.b (a4)
0002E908 <AmiBlitz3.ab2@2601>   BEQ JL_0_3AEA
0002E90E <AmiBlitz3.ab2@2604>   MOVEA.l ptr_macrobuffer_begin,A0
0002E910 <AmiBlitz3.ab2@2607>   ADDQ.w #1,D4
0002E912 <AmiBlitz3.ab2@2608>   MOVE.l A4,(A0)
0002E916 <AmiBlitz3.ab2@2609>   CLR.w 4(a0)
0002E91A <AmiBlitz3.ab2@2610>    BSR.w JL_0_3CC6
0002E91C <AmiBlitz3.ab2@2612>   ADDQ.l #4,a0
0002E91E <AmiBlitz3.ab2@2616>   SUBQ.w #1,(a0)+
0002E922 <AmiBlitz3.ab2@2617>   CMP.b #$7D,D0
0002E926 <AmiBlitz3.ab2@2618>   BEQ 'l10
0002E928 <AmiBlitz3.ab2@2619>   TST.b d0
0002E92C <AmiBlitz3.ab2@2620>   BEQ 'l10
0002E930 <AmiBlitz3.ab2@2621> BRA JL_0_3AD0
0002E936 <AmiBlitz3.ab2@2625>   CLR.l sourceline3
0002E938 <AmiBlitz3.ab2@2626>   MOVEA.l A4,A5
0002E93E <AmiBlitz3.ab2@2629>   MOVE.w D4,numarg
0002E944 <AmiBlitz3.ab2@2636>   MOVE.l #$01,D1
0002E94A <AmiBlitz3.ab2@2637>   MOVEA.l _execbase,A6
0002E950 <AmiBlitz3.ab2@2638>   MOVE.l mempool,a0
0002E956 <AmiBlitz3.ab2@2639>   MOVE.l macrobuffer_size,D0
0002E95C <AmiBlitz3.ab2@2640>   CMP.l #40000,d0
0002E960 <AmiBlitz3.ab2@2641>   BGE 'l1m
0002E966 <AmiBlitz3.ab2@2642>   MOVE.l #40000,d0
0002E96C <AmiBlitz3.ab2@2643>   MOVE.l d0,macrobuffer_size
0002E970 <AmiBlitz3.ab2@2646>   JSR _AllocPooled(a6)
0002E97A <AmiBlitz3.ab2@2648>   MOVE.l myline,myoline
0002E97C <AmiBlitz3.ab2@2651>   ADDQ.l #1,d0
0002E982 <AmiBlitz3.ab2@2652>   MOVE.l D0,myline
0002E984 <AmiBlitz3.ab2@2653>   MOVEA.l D0,A1
0002E98A <AmiBlitz3.ab2@2654>   MOVE.b #":",-1(a1)
0002E98C <AmiBlitz3.ab2@2655>   MOVEA.l A1,A6
0002E992 <AmiBlitz3.ab2@2656>   ADDA.l macrobuffer_size,A6
0002E994 <AmiBlitz3.ab2@2657>   MOVEA.l (A7)+,A0
0002E996 <AmiBlitz3.ab2@2660>   CMPA.l A6,A1
0002E99A <AmiBlitz3.ab2@2661>    BCC.w mbovererr
0002E99C <AmiBlitz3.ab2@2662>   MOVE.b (A0)+,(a1)+
0002E99E <AmiBlitz3.ab2@2663>   CMPA.l A3,A0
0002E9A2 <AmiBlitz3.ab2@2664>    BCS.w JL_0_3B1E
0002E9A4 <AmiBlitz3.ab2@2665>   SUBQ.w #1,A1
0002E9A8 <AmiBlitz3.ab2@2666>   MOVE.w $8(A2),D1
0002E9AC <AmiBlitz3.ab2@2667>    BEQ.w JL_0_3C70
0002E9B4 <AmiBlitz3.ab2@2668>   MOVE.w $A(A2),macnum
0002E9B8 <AmiBlitz3.ab2@2669>   ADDQ.w #1,$A(A2)
0002E9BC <AmiBlitz3.ab2@2670>   MOVEA.l $4(A2),A2
0002E9BE <AmiBlitz3.ab2@2671>   SUBQ.w #1,D1
0002E9C4 <AmiBlitz3.ab2@2672>   CLR.b firstmline
0002E9C6 <AmiBlitz3.ab2@2675>     MOVEQ.l #$00,D0
0002E9C8 <AmiBlitz3.ab2@2676>     MOVE.b (A2)+,D0
0002E9CE <AmiBlitz3.ab2@2677>     TST.b firstmline
0002E9D2 <AmiBlitz3.ab2@2678>     BNE 'c1
0002E9D6 <AmiBlitz3.ab2@2679>     CMP.b #$22,d0
0002E9DA <AmiBlitz3.ab2@2680>     BNE 's1
0002E9E2 <AmiBlitz3.ab2@2681>     MOVE.b #1,firstmline
0002E9E6 <AmiBlitz3.ab2@2684>     CMP.b #":",d0
0002E9EA <AmiBlitz3.ab2@2685>     BNE 'm1
0002E9F2 <AmiBlitz3.ab2@2686>     MOVE.b #1,firstmline
0002E9F6 <AmiBlitz3.ab2@2689>     CMP.b #";",d0
0002E9FA <AmiBlitz3.ab2@2690>     BNE 'c1
0002E9FC <AmiBlitz3.ab2@2693>     SUBQ.w #1,d1                                           ;filter out comment
0002E9FE <AmiBlitz3.ab2@2694>     MOVE.b (a2)+,d0
0002EA04 <AmiBlitz3.ab2@2695>     CMP.w #":@",-1(a2)
0002EA08 <AmiBlitz3.ab2@2696>     BEQ 'c2
0002EA0A <AmiBlitz3.ab2@2697>     TST.w d1
0002EA0E <AmiBlitz3.ab2@2698>     BNE 'l1
0002EA12 <AmiBlitz3.ab2@2699>   BRA JL_0_3C6C
0002EA18 <AmiBlitz3.ab2@2702>     CMP.b #":",1(a2)
0002EA1C <AmiBlitz3.ab2@2703>       BNE 'l1
0002EA1E <AmiBlitz3.ab2@2704>       ADDQ #2,a2
0002EA20 <AmiBlitz3.ab2@2705>       SUBQ #3,d1
0002EA22 <AmiBlitz3.ab2@2706>       MOVE.b (a2)+,d0
0002EA2A <AmiBlitz3.ab2@2707>       MOVE.b #1,firstmline
0002EA2E <AmiBlitz3.ab2@2710>     CMP.b #"`",D0
0002EA32 <AmiBlitz3.ab2@2711>      BNE.w JL_0_3C56
0002EA34 <AmiBlitz3.ab2@2712>     SUBQ.w #1,D1
0002EA36 <AmiBlitz3.ab2@2713>     MOVE.b (A2)+,D0
0002EA3A <AmiBlitz3.ab2@2714>     CMP.w #$7B,D0
0002EA3E <AmiBlitz3.ab2@2715>      BEQ.w JL_0_3BB6
0002EA42 <AmiBlitz3.ab2@2716>     CMP.w #$40,D0
0002EA46 <AmiBlitz3.ab2@2717>      BNE.w JL_0_3B82
0002EA48 <AmiBlitz3.ab2@2718>     MOVEQ.l #$00,D2
0002EA4E <AmiBlitz3.ab2@2719>     MOVE.w macnum,D2
0002EA50 <AmiBlitz3.ab2@2720>     MOVEA.l A1,A0
0002EA52 <AmiBlitz3.ab2@2721>     MOVE.w D1,-(A7)
0002EA58 <AmiBlitz3.ab2@2722>      JSR makelong
0002EA5A <AmiBlitz3.ab2@2723>     MOVEA.l A0,A1
0002EA5C <AmiBlitz3.ab2@2724>     MOVE.w (A7)+,D1
0002EA60 <AmiBlitz3.ab2@2725>   BRA.w JL_0_3C6C
0002EA64 <AmiBlitz3.ab2@2728>     ORI.w #$20,D0
0002EA68 <AmiBlitz3.ab2@2729>     CMP.w #$7A,D0
0002EA6C <AmiBlitz3.ab2@2730>      BCS.w JL_0_3B94
0002EA72 <AmiBlitz3.ab2@2731>   JMP ilconsterr
0002EA76 <AmiBlitz3.ab2@2734>     SUBI.w #$30,D0
0002EA7A <AmiBlitz3.ab2@2735>     CMP.w #$A,D0
0002EA7E <AmiBlitz3.ab2@2736>      BCS.w JL_0_3BF2
0002EA82 <AmiBlitz3.ab2@2737>     SUBI.w #$27,D0
0002EA86 <AmiBlitz3.ab2@2738>     CMP.w #$A,D0
0002EA8A <AmiBlitz3.ab2@2739>      BCC.w JL_0_3BB2
0002EA90 <AmiBlitz3.ab2@2740>   JMP ilconsterr
0002EA94 <AmiBlitz3.ab2@2743>   BRA.w JL_0_3BF2
0002EA96 <AmiBlitz3.ab2@2746>     MOVE.l A5,-(A7)
0002EA9A <AmiBlitz3.ab2@2747>     MOVEM.l D1/A1-A2/A6,-(A7)
0002EA9C <AmiBlitz3.ab2@2748>     MOVEA.l A2,A5
0002EAA2 <AmiBlitz3.ab2@2749>      JSR AJL_0_BF6E
0002EAA6 <AmiBlitz3.ab2@2750>     CMP.w #$7D,D0
0002EAAA <AmiBlitz3.ab2@2751>      BEQ.w JL_0_3BD2
0002EAB0 <AmiBlitz3.ab2@2752>   JMP syntaxerr
0002EAB4 <AmiBlitz3.ab2@2755>     MOVEM.l (A7)+,D1/A1-A2/A6
0002EAB6 <AmiBlitz3.ab2@2756>     MOVE.l A5,D2
0002EAB8 <AmiBlitz3.ab2@2757>     SUB.l A2,D2
0002EABA <AmiBlitz3.ab2@2758>     SUB.w D2,D1
0002EABC <AmiBlitz3.ab2@2759>     MOVEA.l A5,A2
0002EAC2 <AmiBlitz3.ab2@2760>     CLR.w instringon
0002EAC4 <AmiBlitz3.ab2@2761>     MOVEA.l (A7)+,A5
0002EAC6 <AmiBlitz3.ab2@2762>     MOVE.l D3,D0
0002EACA <AmiBlitz3.ab2@2763>     BPL.w JL_0_3BF2
0002EAD0 <AmiBlitz3.ab2@2764>   JMP ilconsterr
0002EAD2 <AmiBlitz3.ab2@2767>     SUBQ.w #1,D0
0002EAD6 <AmiBlitz3.ab2@2768>      BPL.w JL_0_3C20
0002EADC <AmiBlitz3.ab2@2772>     MOVE.w numarg,D0
0002EAE0 <AmiBlitz3.ab2@2773>     DIVU #$A,D0
0002EAE4 <AmiBlitz3.ab2@2774>     ADDI.w #$30,D0
0002EAE6 <AmiBlitz3.ab2@2775>     CMPA.l A6,A1
0002EAEA <AmiBlitz3.ab2@2776>      BCC.w mbovererr
0002EAEC <AmiBlitz3.ab2@2777>     MOVE.b D0,(A1)+
0002EAEE <AmiBlitz3.ab2@2778>     SWAP D0
0002EAF2 <AmiBlitz3.ab2@2779>     ADDI.w #$30,D0
0002EAF4 <AmiBlitz3.ab2@2780>     CMPA.l A6,A1
0002EAF8 <AmiBlitz3.ab2@2781>      BCC.w mbovererr
0002EAFA <AmiBlitz3.ab2@2782>     MOVE.b D0,(A1)+
0002EAFE <AmiBlitz3.ab2@2783>   BRA.w JL_0_3C6C
0002EB04 <AmiBlitz3.ab2@2789>     CMP.w numarg,D0
0002EB08 <AmiBlitz3.ab2@2790>      BCC.w JL_0_3C6C
0002EB0A <AmiBlitz3.ab2@2791>     LSL.w #1,D0
0002EB0C <AmiBlitz3.ab2@2792>     MOVE.w D0,D4
0002EB0E <AmiBlitz3.ab2@2793>     LSL.w #1,D0
0002EB10 <AmiBlitz3.ab2@2794>     ADD.w D4,D0
0002EB16 <AmiBlitz3.ab2@2795>     MOVEA.l ptr_macrobuffer_begin,A0
0002EB18 <AmiBlitz3.ab2@2796>     ADDA.w D0,A0
0002EB1C <AmiBlitz3.ab2@2797>     MOVE.w $4(A0),D4
0002EB20 <AmiBlitz3.ab2@2798>      BEQ.w JL_0_3C6C
0002EB22 <AmiBlitz3.ab2@2799>     MOVEA.l (A0),A0
0002EB24 <AmiBlitz3.ab2@2800>     SUBQ.w #1,D4
0002EB26 <AmiBlitz3.ab2@2803>       CMPA.l A6,A1
0002EB2A <AmiBlitz3.ab2@2804>        BCC.w mbovererr
0002EB2E <AmiBlitz3.ab2@2805>       CMP.w #"@@",(a0)
0002EB32 <AmiBlitz3.ab2@2806>        BNE 'l10
0002EB38 <AmiBlitz3.ab2@2807>       TST.w ininclude
0002EB3C <AmiBlitz3.ab2@2808>        BNE errorjoin
0002EB42 <AmiBlitz3.ab2@2811>       MOVE.l sourceline,a0
0002EB44 <AmiBlitz3.ab2@2812>       MOVE.l (a0),a0
0002EB4A <AmiBlitz3.ab2@2813>       CMP.l #0,a0
0002EB4E <AmiBlitz3.ab2@2814>       BNE 'l11
0002EB50 <AmiBlitz3.ab2@2815>       MOVEQ #0,d0
0002EB56 <AmiBlitz3.ab2@2816>       JSR error
0002EB5C <AmiBlitz3.ab2@2819>       MOVE.l a0,sourceline
0002EB62 <AmiBlitz3.ab2@2820>       ADDQ.l #1,linenumat
0002EB66 <AmiBlitz3.ab2@2821>       LEA 9(a0),a0
0002EB68 <AmiBlitz3.ab2@2822>       MOVE.l a0,-(a7)
0002EB6C <AmiBlitz3.ab2@2825>       CMP.b #" ",(a0)+
0002EB70 <AmiBlitz3.ab2@2826>        BEQ 'l110
0002EB76 <AmiBlitz3.ab2@2827>       CMP.b #";",-1(a0)
0002EB78 <AmiBlitz3.ab2@2828>       MOVE.l (a7)+,a0
0002EB7C <AmiBlitz3.ab2@2829>        BEQ 'l111
0002EB7E <AmiBlitz3.ab2@2830>       SUBQ.l #1,d4
0002EB80 <AmiBlitz3.ab2@2833>       MOVE.b (A0)+,(A1)+
0002EB84 <AmiBlitz3.ab2@2834>     DBF D4,JL_0_3C46
0002EB88 <AmiBlitz3.ab2@2836>   BRA.w JL_0_3C6C
0002EB8A <AmiBlitz3.ab2@2839>     CMPA.l A6,A1
0002EB8E <AmiBlitz3.ab2@2840>      BCC.w mbovererr
0002EB90 <AmiBlitz3.ab2@2841>     MOVE.b D0,(A1)+
0002EB94 <AmiBlitz3.ab2@2842>      BPL.w JL_0_3C6C
0002EB96 <AmiBlitz3.ab2@2843>     CMPA.l A6,A1
0002EB9A <AmiBlitz3.ab2@2844>      BCC.w mbovererr
0002EB9C <AmiBlitz3.ab2@2845>     MOVE.b (A2)+,(A1)+
0002EB9E <AmiBlitz3.ab2@2846>     SUBQ.w #1,D1
0002EBA2 <AmiBlitz3.ab2@2849>   DBF D1,JL_0_3B48
0002EBA4 <AmiBlitz3.ab2@2859>   CMPA.l A6,A1
0002EBA8 <AmiBlitz3.ab2@2860>    BCC.w mbovererr
0002EBAA <AmiBlitz3.ab2@2861>   MOVE.b (A5)+,(A1)+
0002EBAE <AmiBlitz3.ab2@2862>    BNE.w JL_0_3C70
0002EBB4 <AmiBlitz3.ab2@2863>   MOVEA.l myline,A5
0002EBBA <AmiBlitz3.ab2@2864>   MOVE.l myoline,D0
0002EBBE <AmiBlitz3.ab2@2865>    BEQ.w JL_0_3C9C
0002EBC0 <AmiBlitz3.ab2@2866>   SUBQ.l #1,d0
0002EBC2 <AmiBlitz3.ab2@2867>   MOVEA.l D0,A1
0002EBC8 <AmiBlitz3.ab2@2868>   MOVE.l macrobuffer_size,D0
0002EBCE <AmiBlitz3.ab2@2869>   MOVEA.l _execbase,A6
0002EBD4 <AmiBlitz3.ab2@2870>   MOVE.l mempool,a0
0002EBD8 <AmiBlitz3.ab2@2871>   JSR _FreePooled(A6)
0002EBDC <AmiBlitz3.ab2@2874> BRA.w JL_0_3A46
0002EBDE <AmiBlitz3.ab2@2877>   MOVEA.l (A7)+,A5
0002EBE0 <AmiBlitz3.ab2@2878> RTS
0002EBE6 <AmiBlitz3.ab2@2882>   MOVE.l myline,D0
0002EBEA <AmiBlitz3.ab2@2883>   BEQ.w JL_0_3CC4
0002EBEC <AmiBlitz3.ab2@2884>   SUBQ.l #1,d0
0002EBF2 <AmiBlitz3.ab2@2885>   CLR.l myline
0002EBF4 <AmiBlitz3.ab2@2886>   MOVEA.l D0,A1
0002EBFA <AmiBlitz3.ab2@2887>   MOVE.l macrobuffer_size,D0
0002EC00 <AmiBlitz3.ab2@2888>   MOVEA.l _execbase,A6
0002EC06 <AmiBlitz3.ab2@2889>   MOVE.l mempool,a0
0002EC0A <AmiBlitz3.ab2@2890> JMP _FreePooled(A6)
0002EC0C <AmiBlitz3.ab2@2893> RTS
0002EC0E <AmiBlitz3.ab2@2897>   MOVEQ.l #$00,D2
0002EC12 <AmiBlitz3.ab2@2900>   ADDQ.w #1,4(a0)
0002EC14 <AmiBlitz3.ab2@2901>    MOVE.b (A4)+,D0
0002EC18 <AmiBlitz3.ab2@2903>    BEQ exit1
0002EC1C <AmiBlitz3.ab2@2904>    BPL.w JL_0_3CD8
0002EC20 <AmiBlitz3.ab2@2905>   ADDQ.w #1,4(a0)
0002EC22 <AmiBlitz3.ab2@2906>   ADDQ.w #1,A4
0002EC26 <AmiBlitz3.ab2@2907> BRA.w JL_0_3CC8
0002EC2C <AmiBlitz3.ab2@2910>    TST.w instringon
0002EC30 <AmiBlitz3.ab2@2911>    BNE 'lnom
0002EC34 <AmiBlitz3.ab2@2912>    CMP.b #";",d0
0002EC38 <AmiBlitz3.ab2@2913>    BEQ exit2
0002EC3C <AmiBlitz3.ab2@2914>    CMP.b #":",d0
0002EC40 <AmiBlitz3.ab2@2915>    BEQ exit2
0002EC44 <AmiBlitz3.ab2@2918>   CMP.b #$22,D0
0002EC48 <AmiBlitz3.ab2@2919>    BNE.w JL_0_3CEA
0002EC4E <AmiBlitz3.ab2@2920>   NOT.w instringon
0002EC52 <AmiBlitz3.ab2@2921> BRA.w JL_0_3CC8
0002EC58 <AmiBlitz3.ab2@2925>   TST.w instringon
0002EC5C <AmiBlitz3.ab2@2926>    BNE.w JL_0_3CC8
0002EC60 <AmiBlitz3.ab2@2927>    CMP.b #"@",d0
0002EC64 <AmiBlitz3.ab2@2928>    BNE 'l10
0002EC68 <AmiBlitz3.ab2@2929>    CMP.b #"@",(a4)
0002EC6C <AmiBlitz3.ab2@2930>    BNE 'l10
0002EC72 <AmiBlitz3.ab2@2931>    TST.w ininclude
0002EC76 <AmiBlitz3.ab2@2932>    BNE errorjoin
0002EC7C <AmiBlitz3.ab2@2933>    MOVE.l sourceline3,a4
0002EC82 <AmiBlitz3.ab2@2934>    CMP.l #0,a4
0002EC86 <AmiBlitz3.ab2@2935>    BNE 'l11
0002EC8C <AmiBlitz3.ab2@2936>    MOVE.l sourceline,a4
0002EC8E <AmiBlitz3.ab2@2939>   MOVE.l (a4),a4
0002EC94 <AmiBlitz3.ab2@2940>       CMP.l #0,a4
0002EC98 <AmiBlitz3.ab2@2941>       BNE 'l12
0002EC9A <AmiBlitz3.ab2@2942>       MOVEQ #0,d0
0002ECA0 <AmiBlitz3.ab2@2943>       JSR error
0002ECA6 <AmiBlitz3.ab2@2946>    MOVE.l a4,sourceline3
0002ECAA <AmiBlitz3.ab2@2947>    LEA 9(a4),a4
0002ECAC <AmiBlitz3.ab2@2948>    MOVEQ #",",d0
0002ECB0 <AmiBlitz3.ab2@2951>   CMP.b #$2C,D0
0002ECB4 <AmiBlitz3.ab2@2952>    BNE.w JL_0_3D06
0002ECB6 <AmiBlitz3.ab2@2953>   TST.w D2
0002ECBA <AmiBlitz3.ab2@2954>    BEQ.w JL_0_3D30
0002ECBE <AmiBlitz3.ab2@2955> BRA.w JL_0_3CC8
0002ECC2 <AmiBlitz3.ab2@2959>    CMP.b #$7B,D0                                           ;"{"
0002ECC6 <AmiBlitz3.ab2@2960>    BEQ.w 'l10
0002ECCA <AmiBlitz3.ab2@2961>   CMP.b #$28,D0                                            ;"("
0002ECCE <AmiBlitz3.ab2@2964>    BNE.w JL_0_3D14
0002ECD0 <AmiBlitz3.ab2@2965>   ADDQ.w #1,D2
0002ECD4 <AmiBlitz3.ab2@2966> BRA.w JL_0_3CC8
0002ECD8 <AmiBlitz3.ab2@2969>   CMP.b #$7D,D0                                           ;"}"
0002ECDC <AmiBlitz3.ab2@2970>    BNE.w JL_0_3D22
0002ECDE <AmiBlitz3.ab2@2971>  TST.w D2
0002ECE2 <AmiBlitz3.ab2@2972>    BEQ.w JL_0_3D30
0002ECE6 <AmiBlitz3.ab2@2976>    CMP.b #$7D,D0                                           ;"}"
0002ECEA <AmiBlitz3.ab2@2977>    BEQ.w 'l10
0002ECEE <AmiBlitz3.ab2@2978>   CMP.b #$29,D0                                            ;")"
0002ECF2 <AmiBlitz3.ab2@2981>    BNE.w JL_0_3CC8
0002ECF4 <AmiBlitz3.ab2@2982>   SUBQ.w #1,D2
0002ECF8 <AmiBlitz3.ab2@2983> BRA.w JL_0_3CC8
0002ECFA <AmiBlitz3.ab2@2986> RTS
0002ECFC <AmiBlitz3.ab2@2990>       SUBQ.l #1,a4
0002ED02 <AmiBlitz3.ab2@2991>       CLR.l sourceline3
0002ED04 <AmiBlitz3.ab2@2992> RTS
0002ED06 <AmiBlitz3.ab2@2996>       MOVEQ #0,d0
0002ED08 <AmiBlitz3.ab2@2997>       SUBQ.l #1,a4
0002ED0E <AmiBlitz3.ab2@2998>       CLR.l sourceline3
0002ED10 <AmiBlitz3.ab2@2999> RTS
0002ED14 <AmiBlitz3.ab2@3003>   CMP.b #$7B,D0                                            ;"{"
0002ED18 <AmiBlitz3.ab2@3004>   BEQ.w JL_0_3D3E
0002ED1C <AmiBlitz3.ab2@3005>   CMP.b #$28,D0                                            ;"("
0002ED1E <AmiBlitz3.ab2@3008> RTS
0002ED22 <AmiBlitz3.ab2@3012>   CMP.b #$7D,D0                                            ;"}"
0002ED26 <AmiBlitz3.ab2@3013>   BEQ.w JL_0_3D4C
0002ED2A <AmiBlitz3.ab2@3014>   CMP.b #$29,D0                                            ;")"
0002ED2C <AmiBlitz3.ab2@3017> RTS
0002ED2E <AmiBlitz3.ab2@3021> stopit:     Ds.w 1
0002ED30 <AmiBlitz3.ab2@3022> clrreq:     Ds.w 1
0002ED34 <AmiBlitz3.ab2@3043>   MOVE.w clrreq(PC),D0
0002ED38 <AmiBlitz3.ab2@3044>    BEQ.w close_compilewin__skip
0002ED62 <AmiBlitz3.ab2@3046>   !basic
0002ED9E <AmiBlitz3.ab2@3047>   If Peek.l(Addr Window(4))<>0 Then WZCloseWindow 4        ;turn off the requester
0002EDBC <AmiBlitz3.ab2@3048>   !asm
0002EDC2 <AmiBlitz3.ab2@3049>   LEA clrreq,a0
0002EDC4 <AmiBlitz3.ab2@3050>   NOT.w (a0)                                               ;reass
0002EDCA <AmiBlitz3.ab2@3051>   MOVEA.l ptr_ThisTask,A0
0002EDCE <AmiBlitz3.ab2@3052>   CLR.l $1E(A0)
0002EDD2 <AmiBlitz3.ab2@3053>   CLR.l $2A(A0)
0002EDD4 <AmiBlitz3.ab2@3056> RTS
0002EDD6 <AmiBlitz3.ab2@3059> intsused:  Ds.w 1
0002EDDE <AmiBlitz3.ab2@3063>   MOVE.w #-1,blitzoff
0002EDE4 <AmiBlitz3.ab2@3064>   CLR.w intsused
0002EDEA <AmiBlitz3.ab2@3065>   CLR.w anyerrs
0002EDF0 <AmiBlitz3.ab2@3066>   CLR.w blitzmode
0002EDF6 <AmiBlitz3.ab2@3067>   CLR.w dontwrite                                              ;nomemleft
0002EDFC <AmiBlitz3.ab2@3068>   CLR.w constmode
0002EE02 <AmiBlitz3.ab2@3069>   CLR.w cmake
0002EE08 <AmiBlitz3.ab2@3070>   CLR.w cfetchmode
0002EE0E <AmiBlitz3.ab2@3071>   CLR.l intdata1
0002EE14 <AmiBlitz3.ab2@3072>   CLR.w fuckpos
0002EE1A <AmiBlitz3.ab2@3073>   CLR.w procnum
0002EE20 <AmiBlitz3.ab2@3074>   CLR.w procnum2
0002EE26 <AmiBlitz3.ab2@3075>   CLR.w dfetch
0002EE2C <AmiBlitz3.ab2@3076>   CLR.l titleat
0002EE32 <AmiBlitz3.ab2@3077>   CLR.b usedpath
0002EE38 <AmiBlitz3.ab2@3078>   CLR.b path2
0002EE3E <AmiBlitz3.ab2@3079>   CLR.w inerr
0002EE44 <AmiBlitz3.ab2@3080>   CLR.w intlevel
0002EE4A <AmiBlitz3.ab2@3081>   CLR.l cont_pc
0002EE50 <AmiBlitz3.ab2@3082>   CLR.l cont_pc2
0002EE56 <AmiBlitz3.ab2@3083>   CLR.l lastcontlink
0002EE60 <AmiBlitz3.ab2@3084>   MOVE.l destbufferstart,destpointer
0002EE6A <AmiBlitz3.ab2@3085>   MOVE.l destbufferstart,bigpc
0002EE74 <AmiBlitz3.ab2@3086>   MOVE.l destbufferend,libend
0002EE7E <AmiBlitz3.ab2@3087>   MOVE.l data1start,data1
0002EE88 <AmiBlitz3.ab2@3088>   MOVE.l data2at,data2
0002EE90 <AmiBlitz3.ab2@3089>   MOVE.w #-1,skipcode                                      ;#-1,comflag org source
0002EE98 <AmiBlitz3.ab2@3090>   MOVE.w #-1,linemode                                      ;#-1,linemode org soruce
0002EE9E <AmiBlitz3.ab2@3091>   CLR.w oldvcodelen
0002EEA4 <AmiBlitz3.ab2@3092>   CLR.b lastgloballabel                                    ;lastbiglab org source
0002EEA6 <AmiBlitz3.ab2@3093> RTS
0002EEA8 <AmiBlitz3.ab2@3096> debugmode:  Ds.w 1                                         ;debugga org source ;debugger enabled?
0002EEAE <AmiBlitz3.ab2@3100>   LEA  clrreq,a1
0002EEB2 <AmiBlitz3.ab2@3101>   MOVE.w #2000,(a1)
0002EEDC <AmiBlitz3.ab2@3102>   !basic
0002EEF0 <AmiBlitz3.ab2@3103>   If CLIMode=False
0002EF0C <AmiBlitz3.ab2@3104>     FindScreen 0
0002EF6A <AmiBlitz3.ab2@3105>     WZWindow 4,?wzgui,64,-2,-2,-2,-2,4
0002EF72 <AmiBlitz3.ab2@3109>   calcpro_old.l = 0
0002EF7E <AmiBlitz3.ab2@3110>   typ_old.l     = -1
0002EF8A <AmiBlitz3.ab2@3111>   pass_old.l    = -1
0002EFA8 <AmiBlitz3.ab2@3112>   !asm
0002EFAE <AmiBlitz3.ab2@3113>   CLR.w stopit
0002EFB0 <AmiBlitz3.ab2@3114> RTS
0002EFB6 <AmiBlitz3.ab2@3118>   CLR.w storedebugmode
0002EFBC <AmiBlitz3.ab2@3119>   CLR.b iserror
0002EFC0 <AmiBlitz3.ab2@3120>   BSR.w compilerequester
0002EFCA <AmiBlitz3.ab2@3122>   MOVE.l #0,globallinecount
0002EFD0 <AmiBlitz3.ab2@3123>   JSR check_of_same_source
0002EFD4 <AmiBlitz3.ab2@3124>   BSR.w call_setpointerbusy
0002EFD8 <AmiBlitz3.ab2@3125>   BSR.w setcvars
0002EFE0 <AmiBlitz3.ab2@3126>   MOVE.w #$8000,globalvarpointer
0002EFEA <AmiBlitz3.ab2@3127>   MOVE.l #newtype_quick,defaulttype
0002EFF0 <AmiBlitz3.ab2@3128>   MOVE.l A7,passstack
0002EFFA <AmiBlitz3.ab2@3129>   MOVE.l #firstitem_,sourceline
0002F004 <AmiBlitz3.ab2@3130>   MOVE.w numlines_org,linesleft
0002F00E <AmiBlitz3.ab2@3131>   MOVE.l numlines,numlines2
0002F014 <AmiBlitz3.ab2@3132>   ADDQ.w #1,linesleft
0002F01A <AmiBlitz3.ab2@3133>   ADDQ.l #1,numlines2
0002F024 <AmiBlitz3.ab2@3134>   MOVE.l #-1,linenumat
0002F028 <AmiBlitz3.ab2@3135>   BSR.w resetlibs
0002F02C <AmiBlitz3.ab2@3136>   BSR.w Aclearallvars
0002F032 <AmiBlitz3.ab2@3137>   LEA progress_per_line+2,A0
0002F034 <AmiBlitz3.ab2@3138>   MOVEQ.l #$03,D0
0002F036 <AmiBlitz3.ab2@3141>     CLR.w (A0)+
0002F03A <AmiBlitz3.ab2@3142>   DBF D0,JL_0_40EC
0002F040 <AmiBlitz3.ab2@3145>   LEA _include,a0
0002F044 <AmiBlitz3.ab2@3146>   MOVEM.l a0-a6/d0-d7,-(a7)
0002F04A <AmiBlitz3.ab2@3147>   LEA ptr_parameterstore,a1
0002F04C <AmiBlitz3.ab2@3150>     MOVE.b (a0)+,(a1)+
0002F050 <AmiBlitz3.ab2@3151>   BNE 'l1b
0002F052 <AmiBlitz3.ab2@3153>   MOVEQ #9,d2
0002F058 <AmiBlitz3.ab2@3154>   JSR findlabel2
0002F05C <AmiBlitz3.ab2@3155>   BNE 'd
0002F064 <AmiBlitz3.ab2@3156>   MOVE.l #0,8(a2)
0002F068 <AmiBlitz3.ab2@3157>   MOVEM.l (a7)+,a0-a6/d0-d7
0002F06C <AmiBlitz3.ab2@3158> BRA 'd2
0002F072 <AmiBlitz3.ab2@3161>   JSR addlabelhash
0002F07A <AmiBlitz3.ab2@3162>   MOVE.l #$1,$4(A2)
0002F082 <AmiBlitz3.ab2@3163>   MOVE.l #0,8(a2)
0002F086 <AmiBlitz3.ab2@3164>   MOVEM.l (a7)+,a0-a6/d0-d7
0002F08C <AmiBlitz3.ab2@3167>   LEA _debug,a0
0002F090 <AmiBlitz3.ab2@3168>   MOVEM.l a0-a6/d0-d7,-(a7)
0002F096 <AmiBlitz3.ab2@3169>   LEA ptr_parameterstore,a1
0002F098 <AmiBlitz3.ab2@3172>     MOVE.b (a0)+,(a1)+
0002F09C <AmiBlitz3.ab2@3173>   BNE 'l9b
0002F09E <AmiBlitz3.ab2@3175>   MOVEQ #7,d2
0002F0A4 <AmiBlitz3.ab2@3176>   JSR findlabel2
0002F0A8 <AmiBlitz3.ab2@3177>   BNE 'd9
0002F0AC <AmiBlitz3.ab2@3178>   MOVE.b debugmode(PC),D0
0002F0AE <AmiBlitz3.ab2@3179>   EXT.w d0
0002F0B0 <AmiBlitz3.ab2@3180>   EXT.l d0
0002F0B4 <AmiBlitz3.ab2@3181>   MOVE.l d0,8(a2)
0002F0B8 <AmiBlitz3.ab2@3182>   MOVEM.l (a7)+,a0-a6/d0-d7
0002F0BC <AmiBlitz3.ab2@3183> BRA 'd9b
0002F0C2 <AmiBlitz3.ab2@3186>   JSR addlabelhash
0002F0CA <AmiBlitz3.ab2@3187>   MOVE.l #$1,$4(A2)
0002F0CE <AmiBlitz3.ab2@3188>   MOVE.b debugmode(PC),D0
0002F0D0 <AmiBlitz3.ab2@3189>   EXT.w d0
0002F0D2 <AmiBlitz3.ab2@3190>   EXT.l d0
0002F0D6 <AmiBlitz3.ab2@3191>   MOVE.l d0,8(a2)
0002F0DA <AmiBlitz3.ab2@3192>   MOVEM.l (a7)+,a0-a6/d0-d7
0002F0E0 <AmiBlitz3.ab2@3195>   MOVE.l #firstitem_,a0
0002F0E2 <AmiBlitz3.ab2@3196>   MOVE.l (a0),a0
0002F0E6 <AmiBlitz3.ab2@3197>   LEA 9(a0),a0
0002F0EE <AmiBlitz3.ab2@3198>   MOVE.w #0,exdebug
0002F0F4 <AmiBlitz3.ab2@3199>   TST.b debugmode
0002F0F8 <AmiBlitz3.ab2@3200>    BEQ 'l10
0002F0FA <AmiBlitz3.ab2@3203>   MOVE.b (a0)+,d0
0002F0FE <AmiBlitz3.ab2@3204>    BEQ 'l10
0002F102 <AmiBlitz3.ab2@3205>   CMP.b #$20,d0
0002F106 <AmiBlitz3.ab2@3206>    BEQ 'l2
0002F108 <AmiBlitz3.ab2@3207>   SUBQ.l #1,a0
0002F10E <AmiBlitz3.ab2@3208>   CMP.l #"DEBU",(a0)
0002F112 <AmiBlitz3.ab2@3209>    BNE 'l10
0002F118 <AmiBlitz3.ab2@3210>   CMP.b #"G",4(a0)
0002F11C <AmiBlitz3.ab2@3211>    BNE 'l10
0002F124 <AmiBlitz3.ab2@3212>   MOVE.w #$0,debugversion
0002F12C <AmiBlitz3.ab2@3213>   MOVE.b #1,exdebug
0002F132 <AmiBlitz3.ab2@3216>   LEA nops4,A0
0002F138 <AmiBlitz3.ab2@3217>   LEA dataget,A1
0002F13E <AmiBlitz3.ab2@3218>   JSR pokecode2                                            ;write intro nops
0002F144 <AmiBlitz3.ab2@3219>   MOVE.l #$01010101,d1
0002F14A <AmiBlitz3.ab2@3220>   JSR writedatalong                                        ;for the 4 tempregs
0002F150 <AmiBlitz3.ab2@3221>   JSR writedatalong
0002F156 <AmiBlitz3.ab2@3222>   JSR writedatalong
0002F15C <AmiBlitz3.ab2@3223>   JSR writedatalong
0002F162 <AmiBlitz3.ab2@3224>   TST.b saved0
0002F166 <AmiBlitz3.ab2@3225>    BEQ 'l1
0002F16C <AmiBlitz3.ab2@3226>   MOVE.l #$4e714e71,d1
0002F172 <AmiBlitz3.ab2@3227>   JSR writelong                                            ;add 2 nops
0002F178 <AmiBlitz3.ab2@3228>   MOVE.l #$4e714e71,d1
0002F17E <AmiBlitz3.ab2@3229>   JSR writelong                                            ;add 2 nops
0002F184 <AmiBlitz3.ab2@3230>   MOVE.l #$4e714e71,d1
0002F18A <AmiBlitz3.ab2@3231>   JSR writelong                                            ;add 2 nops
0002F190 <AmiBlitz3.ab2@3232>    MOVE.l #$4e714e71,d1
0002F196 <AmiBlitz3.ab2@3233>   JSR writelong                                            ;add 2 nops
0002F19A <AmiBlitz3.ab2@3236>   MOVE.b debugmode(PC),D1
0002F19E <AmiBlitz3.ab2@3237>    BEQ.b JL_0_4132
0002F1A8 <AmiBlitz3.ab2@3238>   MOVE.b debugmode,storedebugmode
0002F1AC <AmiBlitz3.ab2@3239>   MOVE.w #$FFDC,D1
0002F1B0 <AmiBlitz3.ab2@3240>    BSR.w uselib
0002F1B6 <AmiBlitz3.ab2@3241>   TST.w debugversion                                       ;make a version for debugger
0002F1BA <AmiBlitz3.ab2@3242>    BNE.b JL_0_412A
0002F1BE <AmiBlitz3.ab2@3246>   MOVE.w #$FA3C,D1
0002F1C2 <AmiBlitz3.ab2@3247>    BSR.w uselib
0002F1C6 <AmiBlitz3.ab2@3248>   MOVE.w #$0001,D1
0002F1CA <AmiBlitz3.ab2@3249>    BSR.w uselib
0002F1CE <AmiBlitz3.ab2@3250> BRA.b JL_0_4132
0002F1D2 <AmiBlitz3.ab2@3253>   MOVE.w #$FA32,D1
0002F1D6 <AmiBlitz3.ab2@3254>   BSR.w uselib
0002F1DA <AmiBlitz3.ab2@3257>   BSR.w nextline
0002F1E0 <AmiBlitz3.ab2@3258>   CLR.l linenum
0002F1E6 <AmiBlitz3.ab2@3259>   CLR.l stacktrack
0002F1EC <AmiBlitz3.ab2@3262>   ADDQ.l #1,linenum
0002F1F6 <AmiBlitz3.ab2@3263>   MOVE.l destpointer,destpointer2
0002F1FC <AmiBlitz3.ab2@3264>   MOVE.l a5,sourceline2
0002F200 <AmiBlitz3.ab2@3265>   BSR.w compile_line                                        ;compile pass
0002F204 <AmiBlitz3.ab2@3268>   BSR.w nextline
0002F208 <AmiBlitz3.ab2@3269>    BNE.w JL_0_4136
0002F20C <AmiBlitz3.ab2@3270>   BSR.w JUMP_do_runerrson
0002F210 <AmiBlitz3.ab2@3271>   BSR.w pointchk
0002F216 <AmiBlitz3.ab2@3272>   TST.b objectcount
0002F21A <AmiBlitz3.ab2@3273>    BNE macenderr
0002F220 <AmiBlitz3.ab2@3274>   CLR.l linenumat
0002F224 <AmiBlitz3.ab2@3275>   BSR.w errchx2
0002F22E <AmiBlitz3.ab2@3276>   CMP.l #-1,bssend
0002F232 <AmiBlitz3.ab2@3277>    BNE 'l30
0002F23C <AmiBlitz3.ab2@3278>   MOVE.l destpointer,bssend                                ;compile end
0002F242 <AmiBlitz3.ab2@3281>   MOVE.l destpointer,d0
0002F24C <AmiBlitz3.ab2@3282>   CMP.l #-1,bssstart
0002F250 <AmiBlitz3.ab2@3283>   BNE 'lnf6
0002F25A <AmiBlitz3.ab2@3284>   CMP.l #-1,chipstart
0002F25E <AmiBlitz3.ab2@3285>   BNE 'lnf6
0002F262 <AmiBlitz3.ab2@3286> BRA 'leven4
0002F268 <AmiBlitz3.ab2@3289>   MOVE.l destpointer,d1
0002F26A <AmiBlitz3.ab2@3290>   ADDQ.l #3,d1
0002F270 <AmiBlitz3.ab2@3291>   AND.l #$fffffffc,d1                                      ;bug ?
0002F276 <AmiBlitz3.ab2@3292>   MOVE.l d1,destpointer
0002F280 <AmiBlitz3.ab2@3295>   MOVE.l destpointer,codeend
0002F28A <AmiBlitz3.ab2@3296>   CMP.l #-1,chipend
0002F28E <AmiBlitz3.ab2@3297>   BNE 'l31
0002F298 <AmiBlitz3.ab2@3298>   MOVE.l destpointer,chipend
0002F29E <AmiBlitz3.ab2@3301>   MOVE.l destpointer,d1
0002F2A0 <AmiBlitz3.ab2@3302>   ADDQ.l #1,d1
0002F2A6 <AmiBlitz3.ab2@3303>   AND.l #$fffffffe,d1                                     ;new evenexit
0002F2AC <AmiBlitz3.ab2@3304>   MOVE.l d1,destpointer
0002F2B0 <AmiBlitz3.ab2@3305>   MOVE.b debugmode(PC),D1
0002F2B4 <AmiBlitz3.ab2@3306>    BEQ.b JL_0_4180
0002F2B8 <AmiBlitz3.ab2@3307>    BSR.w debugstuff
0002F2BC <AmiBlitz3.ab2@3308>   MOVE.w #$C300,D1
0002F2C2 <AmiBlitz3.ab2@3309>    JSR Atokejsr
0002F2C6 <AmiBlitz3.ab2@3310>    BSR.w debugstuff
0002F2CA <AmiBlitz3.ab2@3311>   MOVE.l eopcode(PC),D1
0002F2D0 <AmiBlitz3.ab2@3312>    JSR writelong
0002F2D4 <AmiBlitz3.ab2@3313>   MOVE.l lastcontlink(PC),D1
0002F2D8 <AmiBlitz3.ab2@3314>    BEQ.b JL_0_4180
0002F2DA <AmiBlitz3.ab2@3315>   MOVEA.l D1,A0
0002F2DE <AmiBlitz3.ab2@3316>   CLR.w $6(A0)
0002F2E8 <AmiBlitz3.ab2@3322>   MOVE.l destpointer,endop                                ;where end goes...
0002F2EE <AmiBlitz3.ab2@3324>   TST.w blitzmode
0002F2F2 <AmiBlitz3.ab2@3325>   BEQ.w JL_0_4198
0002F2F6 <AmiBlitz3.ab2@3326>   BSR.w do_AMIGA                                          ;back to amiga if in blitz!
0002F2FC <AmiBlitz3.ab2@3329>   TST.w intsused
0002F300 <AmiBlitz3.ab2@3330>   BEQ.b JL_0_41AA
0002F304 <AmiBlitz3.ab2@3331>   MOVE.w #$C105,D1                                        ;interupts off!
0002F30A <AmiBlitz3.ab2@3332>   JSR tokejsr2
0002F30E <AmiBlitz3.ab2@3335>   BSR.w calcstatic
0002F314 <AmiBlitz3.ab2@3336>   MOVE.w D4,numstatic
0002F31A <AmiBlitz3.ab2@3337>   MOVE.l D3,staticdata
0002F31E <AmiBlitz3.ab2@3338>    BSR.w calcmaxs
0002F324 <AmiBlitz3.ab2@3340>   TST.l tokeslist
0002F328 <AmiBlitz3.ab2@3341>    BEQ.b JL_0_41F8
0002F32E <AmiBlitz3.ab2@3342>   MOVE.w gotocode,D1                                       ;jmp!
0002F334 <AmiBlitz3.ab2@3343>    JSR writeword
0002F33E <AmiBlitz3.ab2@3344>   MOVE.l destpointer,endjmpat
0002F342 <AmiBlitz3.ab2@3345>    BSR.w addoff
0002F348 <AmiBlitz3.ab2@3346>    JSR writelong                                           
0002F34C <AmiBlitz3.ab2@3348>    BSR.w JL_0_6C76                                         ;has to be done before finits!
0002F352 <AmiBlitz3.ab2@3352>   TST.w dontwrite
0002F356 <AmiBlitz3.ab2@3353>    BNE.b JL_0_41F8
0002F35A <AmiBlitz3.ab2@3354>   MOVEA.l endjmpat(PC),A4
0002F360 <AmiBlitz3.ab2@3355>   MOVE.l destpointer,(A4)
0002F366 <AmiBlitz3.ab2@3358>   TST.b returncode
0002F36A <AmiBlitz3.ab2@3359>   BEQ 'l2
0002F36E <AmiBlitz3.ab2@3360>   MOVE.w #$2e80,d1
0002F374 <AmiBlitz3.ab2@3361>   JSR writeword
0002F37A <AmiBlitz3.ab2@3364>   JSR JL_0_B98A
0002F380 <AmiBlitz3.ab2@3365>   TST.b returncode
0002F384 <AmiBlitz3.ab2@3366>   BEQ 'l3
0002F388 <AmiBlitz3.ab2@3367>   MOVE.w #$4e75,d1
0002F38E <AmiBlitz3.ab2@3368>   JSR writeword
0002F392 <AmiBlitz3.ab2@3369> BRA 'l1
0002F398 <AmiBlitz3.ab2@3372>   MOVE.l #$70004E75,D1
0002F39E <AmiBlitz3.ab2@3373>   JSR writelong                                            ;write moveq #0,d0:rts
0002F3A4 <AmiBlitz3.ab2@3376>   JSR JL_0_B73E
0002F3A8 <AmiBlitz3.ab2@3377>   BSR.w asmfixer
0002F3AC <AmiBlitz3.ab2@3378>   BSR.w close_compilewin
0002F3B0 <AmiBlitz3.ab2@3379> BRA.w call_setpointernormal
0002F3B6 <AmiBlitz3.ab2@3383> JMP do_runerrson
0002F3B8 <AmiBlitz3.ab2@3387> eopcode:    Dc.b $70,$03                                   ;MOVEQ #$03,D0
0002F3BA <AmiBlitz3.ab2@3388>             Dc.b $4E,$40                                   ;TRAP  #00
0002F3BE <AmiBlitz3.ab2@3390> endjmpat:   Ds.l 1
0002F3C4 <AmiBlitz3.ab2@3394>   MOVEA.l newtype_string,A2
0002F3CA <AmiBlitz3.ab2@3395>   MOVE.l #MaxByte,D0                                       ;move.l #$ff,d0 org source
0002F3CE <AmiBlitz3.ab2@3398>     CMPA.w #$0,A2
0002F3D2 <AmiBlitz3.ab2@3399>      BEQ.w pointchk_done
0002F3D6 <AmiBlitz3.ab2@3400>     CMP.l $4(A2),D0
0002F3DA <AmiBlitz3.ab2@3401>      BNE.w pointchk_next
0002F3E2 <AmiBlitz3.ab2@3402>     MOVE.w $8(A2),linenumat+2                              ;type not found  ;move 8(a2),linenumat org source
0002F3E6 <AmiBlitz3.ab2@3403> BRA.w notypeerr
0002F3E8 <AmiBlitz3.ab2@3406>     MOVEA.l (A2),A2
0002F3EC <AmiBlitz3.ab2@3407> BRA.w pointchk_loop
0002F3EE <AmiBlitz3.ab2@3410> RTS
0002F3F4 <AmiBlitz3.ab2@3414>   LEA labelbase,A2
0002F3F6 <AmiBlitz3.ab2@3418>   MOVE.l (A2),D0                                           ;testlabels
0002F3FA <AmiBlitz3.ab2@3419>    BEQ.w errchx2_done
0002F3FC <AmiBlitz3.ab2@3420>   MOVEA.l D0,A2
0002F400 <AmiBlitz3.ab2@3421>   MOVE.l $4(A2),D0
0002F404 <AmiBlitz3.ab2@3422>   BTST #$0,D0
0002F408 <AmiBlitz3.ab2@3423>    BNE.w errchx2_loop
0002F40C <AmiBlitz3.ab2@3424>   MOVE.l $8(A2),D0
0002F410 <AmiBlitz3.ab2@3425>    BNE.w errchx2_loop
0002F418 <AmiBlitz3.ab2@3426>   MOVE.w $10(A2),linenumat+2
0002F41A <AmiBlitz3.ab2@3427>   MOVEQ #0,d0
0002F41E <AmiBlitz3.ab2@3428>   MOVE.b $12(a2),d0
0002F426 <AmiBlitz3.ab2@3429>   MOVE.w 0(a2,d0),linenumat
0002F42C <AmiBlitz3.ab2@3430> JMP nolaberr                                               ;label not found
0002F432 <AmiBlitz3.ab2@3433>   MOVE.l concomsp,D0
0002F438 <AmiBlitz3.ab2@3434>   CMP.l #concomstack,D0
0002F43C <AmiBlitz3.ab2@3435>    BNE.w chxerr4
0002F442 <AmiBlitz3.ab2@3436>   MOVE.w connest,D1
0002F446 <AmiBlitz3.ab2@3437>    BNE.w chxerr4
0002F448 <AmiBlitz3.ab2@3440>   MOVE.l D1,-(A7)
0002F44E <AmiBlitz3.ab2@3441>   MOVE.l firstsel,D1
0002F452 <AmiBlitz3.ab2@3442>    BNE.w errchx_err1
0002F458 <AmiBlitz3.ab2@3443>   MOVE.l firstrep,D1
0002F45C <AmiBlitz3.ab2@3444>    BNE.w errchx_err2
0002F462 <AmiBlitz3.ab2@3445>   MOVE.w intstring,D1
0002F466 <AmiBlitz3.ab2@3446>    BNE.w errchx_err3
0002F46A <AmiBlitz3.ab2@3447>   MOVE.l 4(a7),d1
0002F470 <AmiBlitz3.ab2@3448>   MOVE.w proceduremode,D1
0002F474 <AmiBlitz3.ab2@3449>    BNE.w errchx_err6
0002F47A <AmiBlitz3.ab2@3450>   MOVE.l firstiff,d1
0002F47E <AmiBlitz3.ab2@3451>    BNE errchx_err5
0002F484 <AmiBlitz3.ab2@3452>   MOVE.l firstfor,D1
0002F488 <AmiBlitz3.ab2@3453>    BNE.w errchx_err7
0002F48A <AmiBlitz3.ab2@3454>   MOVE.l (A7)+,D1
0002F48C <AmiBlitz3.ab2@3455> RTS
0002F496 <AmiBlitz3.ab2@3459>   MOVE.l sellineat,linenumat
0002F49C <AmiBlitz3.ab2@3460> JMP selerrz
0002F4A6 <AmiBlitz3.ab2@3463>   MOVE.l replineat,linenumat
0002F4AC <AmiBlitz3.ab2@3464> JMP unterr3
0002F4B6 <AmiBlitz3.ab2@3467>   MOVE.l intlineat,linenumat
0002F4BC <AmiBlitz3.ab2@3468> JMP interr2
0002F4C6 <AmiBlitz3.ab2@3471>   MOVE.l iflineat,linenumat
0002F4CC <AmiBlitz3.ab2@3472> JMP noenderr
0002F4D6 <AmiBlitz3.ab2@3475>   MOVE.l prolineat,linenumat
0002F4DC <AmiBlitz3.ab2@3476> JMP nopenderr
0002F4E6 <AmiBlitz3.ab2@3479>   MOVE.l forlineat,linenumat
0002F4EC <AmiBlitz3.ab2@3480> JMP nonexterr
0002F4F6 <AmiBlitz3.ab2@3483>   MOVE.l ciflineat,linenumat
0002F4FC <AmiBlitz3.ab2@3484> JMP nocenderr
0002F506 <AmiBlitz3.ab2@3488>   MOVE.l data1,maxsat
0002F508 <AmiBlitz3.ab2@3489>   MOVEQ.l #$00,D4
0002F50E <AmiBlitz3.ab2@3490>   MOVEA.l libpointer,A2
0002F512 <AmiBlitz3.ab2@3493>     CMPA.w #$0,A2
0002F516 <AmiBlitz3.ab2@3494>      BEQ.w calcmaxs_done
0002F51A <AmiBlitz3.ab2@3495>     TST.w $C(A2)
0002F51E <AmiBlitz3.ab2@3496>      BPL.w calcmaxs_next
0002F522 <AmiBlitz3.ab2@3497>     MOVE.l $12(A2),D0
0002F526 <AmiBlitz3.ab2@3498>     TST.w -$2(A2,D0.L)
0002F52A <AmiBlitz3.ab2@3499>      BEQ.w calcmaxs_next
0002F52C <AmiBlitz3.ab2@3500>     ADDQ.w #1,D4
0002F530 <AmiBlitz3.ab2@3501>     MOVE.w -$6(A2,D0.L),D1
0002F534 <AmiBlitz3.ab2@3502>     BSR.w pokedata1
0002F536 <AmiBlitz3.ab2@3503>     MOVEQ.l #$01,D1
0002F53A <AmiBlitz3.ab2@3504>     MOVE.w -$2(A2,D0.L),D2
0002F53C <AmiBlitz3.ab2@3505>     LSL.w D2,D1
0002F540 <AmiBlitz3.ab2@3506>     MULU -$4(A2,D0.L),D1                                   ;write objectspacesize
0002F544 <AmiBlitz3.ab2@3507>     BSR.w writedatalong
0002F546 <AmiBlitz3.ab2@3510>     MOVEA.l (A2),A2
0002F54A <AmiBlitz3.ab2@3511> BRA.w calcmaxs_loop
0002F550 <AmiBlitz3.ab2@3514>   MOVE.w D4,maxsused
0002F554 <AmiBlitz3.ab2@3515>    BEQ.w calcmaxs_done2
0002F558 <AmiBlitz3.ab2@3516>   MOVE.w #$FFFA,D1                                         ;;use memlib
0002F55C <AmiBlitz3.ab2@3517> BRA.w uselib
0002F55E <AmiBlitz3.ab2@3520> RTS
0002F564 <AmiBlitz3.ab2@3524>    MOVE.l a7,stackaddr
0002F568 <AmiBlitz3.ab2@3525>    BSR.w compile_term
0002F56C <AmiBlitz3.ab2@3526>    BSR.w reget
0002F570 <AmiBlitz3.ab2@3527>    BNE.w illeolerr
0002F576 <AmiBlitz3.ab2@3528>    TST.w dontwrite
0002F57A <AmiBlitz3.ab2@3529>    BNE 'l1
0002F580 <AmiBlitz3.ab2@3530>    TST.l stacktrack
0002F584 <AmiBlitz3.ab2@3531>    BNE errormsg_stack
0002F588 <AmiBlitz3.ab2@3534>    CMP.w #-$7FDE,D0
0002F58C <AmiBlitz3.ab2@3535>    BNE.w compile_line_notelse
0002F592 <AmiBlitz3.ab2@3536>    JSR do_else2
0002F596 <AmiBlitz3.ab2@3537> BRA.w compile_line
0002F598 <AmiBlitz3.ab2@3540>   TST.w D0
0002F59C <AmiBlitz3.ab2@3541>   BNE.w compile_line
0002F5A2 <AmiBlitz3.ab2@3546>   MOVE.l firstiff,D0
0002F5A6 <AmiBlitz3.ab2@3547>    BEQ.w compile_line_done
0002F5A8 <AmiBlitz3.ab2@3548>   MOVEA.l D0,A0
0002F5AC <AmiBlitz3.ab2@3549>   MOVE.w $C(A0),D1
0002F5B0 <AmiBlitz3.ab2@3550>    BPL.w compile_line_done
0002F5B4 <AmiBlitz3.ab2@3554>   BCLR #$F,D1
0002F5BA <AmiBlitz3.ab2@3555>    JSR AJL_0_D7B8
0002F5C0 <AmiBlitz3.ab2@3556>    JSR AJL_0_D81C
0002F5C4 <AmiBlitz3.ab2@3557> BRA.w compile_line_unthen
0002F5C6 <AmiBlitz3.ab2@3560> RTS
0002F5CC <AmiBlitz3.ab2@3564>   LEA lastgloballabel,A0
0002F5CE <AmiBlitz3.ab2@3565>   TST.b (A0)
0002F5D2 <AmiBlitz3.ab2@3566>    BEQ.w nolocerr
0002F5D8 <AmiBlitz3.ab2@3567>   LEA ptr_parameterstore,A1
0002F5DA <AmiBlitz3.ab2@3568>   MOVEQ.l #$00,D2
0002F5DC <AmiBlitz3.ab2@3571>   ADDQ.w #1,D2
0002F5DE <AmiBlitz3.ab2@3572>   MOVE.b (A0)+,(A1)+
0002F5E2 <AmiBlitz3.ab2@3573>    BNE.w createlab_loop
0002F5E8 <AmiBlitz3.ab2@3574>   MOVE.b #$27,-$1(A1)
0002F5EA <AmiBlitz3.ab2@3575>   MOVE.w D2,-(A7)
0002F5EE <AmiBlitz3.ab2@3576>    BSR.w makename4
0002F5F0 <AmiBlitz3.ab2@3577>   CMP.w (A7)+,D2
0002F5F4 <AmiBlitz3.ab2@3578>    BEQ.w syntaxerr
0002F5F6 <AmiBlitz3.ab2@3579>    TST.w d0
0002F5FA <AmiBlitz3.ab2@3580>    BPL createlab_done
0002F602 <AmiBlitz3.ab2@3581>    MOVE.w #$3a,lastchar
0002F604 <AmiBlitz3.ab2@3582>    SUBQ.l #2,a5
0002F606 <AmiBlitz3.ab2@3585> RTS
0002F610 <AmiBlitz3.ab2@3589>   MOVE.l #forthstack,forthsp
0002F61A <AmiBlitz3.ab2@3590>   MOVE.l #precstack,precsp
0002F61C <AmiBlitz3.ab2@3591> RTS
0002F61E <AmiBlitz3.ab2@3598>   MOVEQ.l #$00,D4
0002F648 <AmiBlitz3.ab2@3601>   !basic
0002F664 <AmiBlitz3.ab2@3602>   If Peek.l(Addr Window(4))
0002F67A <AmiBlitz3.ab2@3603>     Use Window 4
0002F68A <AmiBlitz3.ab2@3604>     ev.l = Event : c_abort.b = False
0002F694 <AmiBlitz3.ab2@3605>     While ev
0002F6A6 <AmiBlitz3.ab2@3606>       If ev = #IDCMP_IDCMPUPDATE
0002F6DC <AmiBlitz3.ab2@3607>         If WZGadName = "COMPILE_ABORT" Then c_abort = True
0002F6F6 <AmiBlitz3.ab2@3609>       If (c_abort = True)
0002F6F8 <AmiBlitz3.ab2@3611>         MOVEQ.l #-$01,d4
0002F6FE <AmiBlitz3.ab2@3612>         MOVE.w D4,stopit
0002F71C <AmiBlitz3.ab2@3613>         !asm
0002F720 <AmiBlitz3.ab2@3614>     BRA chkrealstop__skip
0002F72A <AmiBlitz3.ab2@3616>       ev = Event
0002F730 <AmiBlitz3.ab2@3617>     Wend
0002F74E <AmiBlitz3.ab2@3619>   !asm
0002F750 <AmiBlitz3.ab2@3620>   MOVEQ.l #$00,D6
0002F752 <AmiBlitz3.ab2@3621>   MOVEQ.l #$00,D7                                          ; clr Z-Flag for beq.b in chkstop_chk
0002F754 <AmiBlitz3.ab2@3625> RTS
0002F758 <AmiBlitz3.ab2@3629>   MOVE.w stopit(PC),D0
0002F75C <AmiBlitz3.ab2@3630>   BEQ chkstop__chk
0002F762 <AmiBlitz3.ab2@3631>   SUBQ.w #1,stopit
0002F764 <AmiBlitz3.ab2@3635> RTS
0002F76C <AmiBlitz3.ab2@3638>   MOVE.w #2000,stopit
0002F770 <AmiBlitz3.ab2@3639>   BSR.w chkrealstop
0002F774 <AmiBlitz3.ab2@3640>   BEQ.b chkstop__rts
0002F778 <AmiBlitz3.ab2@3642>   BSR.w close_compilewin
0002F77C <AmiBlitz3.ab2@3643>   BSR.w call_setpointernormal
0002F782 <AmiBlitz3.ab2@3645>   MOVEA.l errstack,A7
0002F788 <AmiBlitz3.ab2@3646>   MOVEA.l errcont,A0
0002F790 <AmiBlitz3.ab2@3647>   MOVE.w #-1,anyerrs
0002F792 <AmiBlitz3.ab2@3648> JMP (A0)
0002F796 <AmiBlitz3.ab2@3651> d_pc:           Ds.l 1
0002F79A <AmiBlitz3.ab2@3652> d_bigpc:        Ds.l 1
0002F79C <AmiBlitz3.ab2@3653> d_nomemleft:    Ds.w 1
0002F7A0 <AmiBlitz3.ab2@3654> cont_pc:        Ds.l 1
0002F7A4 <AmiBlitz3.ab2@3655> cont_pc2:       Ds.l 1
0002F7A8 <AmiBlitz3.ab2@3656> lastcontlink:   Ds.l 1
0002F7AC <AmiBlitz3.ab2@3660>   ORI.w #$4E40,D1
0002F7B0 <AmiBlitz3.ab2@3661> BRA.w JUMP_writeword
0002F7B6 <AmiBlitz3.ab2@3665>   TST.b debugmode
0002F7BA <AmiBlitz3.ab2@3666>   BEQ.w debugstuff__rts
0002F7C0 <AmiBlitz3.ab2@3673>   TST.w dirmode                                            ;or while in direct mode...
0002F7C4 <AmiBlitz3.ab2@3674>    BNE debugstuff__rts
0002F7CE <AmiBlitz3.ab2@3675>   MOVE.l destpointer,d_pc
0002F7D8 <AmiBlitz3.ab2@3676>   MOVE.l bigpc,d_bigpc
0002F7E2 <AmiBlitz3.ab2@3677>   MOVE.w dontwrite,d_nomemleft
0002F7E6 <AmiBlitz3.ab2@3678>   MOVEM.l D0-D1,-(A7)
0002F7E8 <AmiBlitz3.ab2@3679>   MOVEQ.l #$01,D1
0002F7EC <AmiBlitz3.ab2@3680>    BSR.w writetrap                                         ;write the adress to sourceline
0002F7F2 <AmiBlitz3.ab2@3684>    MOVE.l destpointer,D0
0002F7F8 <AmiBlitz3.ab2@3685>   MOVE.l cont_pc,D1
0002F7FE <AmiBlitz3.ab2@3686>   MOVE.l D0,cont_pc
0002F804 <AmiBlitz3.ab2@3687>   MOVE.l D1,cont_pc2
0002F808 <AmiBlitz3.ab2@3688>    BEQ.b debugstuff__skip
0002F80E <AmiBlitz3.ab2@3689>   TST.w dontwrite
0002F812 <AmiBlitz3.ab2@3690>    BNE.b debugstuff__skip
0002F814 <AmiBlitz3.ab2@3691>   MOVEA.l D1,A4
0002F816 <AmiBlitz3.ab2@3692>   SUB.l A4,D0
0002F81A <AmiBlitz3.ab2@3693>   MOVE.w D0,$6(A4)
0002F820 <AmiBlitz3.ab2@3694>   MOVE.l A4,lastcontlink
0002F826 <AmiBlitz3.ab2@3697>   TST.w ininclude
0002F82C <AmiBlitz3.ab2@3699>   TST.w makeexec
0002F830 <AmiBlitz3.ab2@3700>   BEQ 'l1
0002F836 <AmiBlitz3.ab2@3701>   TST.w exdebug
0002F83A <AmiBlitz3.ab2@3702>   BEQ 'noinc
0002F83E <AmiBlitz3.ab2@3705>   MOVEM.l a0-a1/d2/d3,-(a7)                                ;write source for includes
0002F844 <AmiBlitz3.ab2@3706>   MOVE.l data1,d1
0002F84A <AmiBlitz3.ab2@3707>   TST.b firsttime
0002F84E <AmiBlitz3.ab2@3708>   BNE 'nofirst
0002F856 <AmiBlitz3.ab2@3709>   MOVE.b #1,firsttime
0002F85C <AmiBlitz3.ab2@3710>   MOVE.l #"DuCk",d1                                        ; to found from debugger the code start
0002F862 <AmiBlitz3.ab2@3711>   JSR writedatalong
0002F868 <AmiBlitz3.ab2@3712>   MOVE.l #"AmiB",d1
0002F86E <AmiBlitz3.ab2@3713>   JSR writedatalong
0002F874 <AmiBlitz3.ab2@3714>   MOVE.l destbufferstart,d1
0002F87A <AmiBlitz3.ab2@3715>   JSR writedatalong
0002F880 <AmiBlitz3.ab2@3716>   TST.w dontwrite
0002F884 <AmiBlitz3.ab2@3717>   BNE 'nohunk
0002F88A <AmiBlitz3.ab2@3718>   MOVE.l data1,d1
0002F88C <AmiBlitz3.ab2@3719>   SUBQ.l #4,d1
0002F892 <AmiBlitz3.ab2@3720>   SUB.l destbufferstart,d1
0002F894 <AmiBlitz3.ab2@3721>   MOVE.l d1,d2
0002F89A <AmiBlitz3.ab2@3722>   JSR addhunkoffset
0002F8A0 <AmiBlitz3.ab2@3725>   MOVE.l destpointer,d2
0002F8A6 <AmiBlitz3.ab2@3726>   MOVE.l data1,d1
0002F8AC <AmiBlitz3.ab2@3729>   MOVE.l destpointer,d2
0002F8AE <AmiBlitz3.ab2@3730>   MOVE.l d1,d3
0002F8B4 <AmiBlitz3.ab2@3731>   SUB.l destbufferstart,d1
0002F8BA <AmiBlitz3.ab2@3732>   OR.l #$80000000,d1
0002F8C0 <AmiBlitz3.ab2@3733>   JSR writelong
0002F8C6 <AmiBlitz3.ab2@3734>   TST.w inmacro
0002F8CA <AmiBlitz3.ab2@3735>   BEQ 'sc1
0002F8D0 <AmiBlitz3.ab2@3736>   MOVE.l myline,a0
0002F8D4 <AmiBlitz3.ab2@3738> BRA 'inc2
0002F8DA <AmiBlitz3.ab2@3740>  'sc1  TST.w ininclude
0002F8DE <AmiBlitz3.ab2@3741>   BEQ 'inc
0002F8E4 <AmiBlitz3.ab2@3742>   MOVE.l includesourceline,a0
0002F8E8 <AmiBlitz3.ab2@3743> BRA 'inc2
0002F8EE <AmiBlitz3.ab2@3746>   MOVE.l sourceline,a0
0002F8F2 <AmiBlitz3.ab2@3747>   LEA 9(a0),a0
0002F8F4 <AmiBlitz3.ab2@3750>   MOVE.l d1,d2
0002F8F6 <AmiBlitz3.ab2@3751>   MOVE.l A5,D1
0002F8F8 <AmiBlitz3.ab2@3752>   SUB.l a0,D1
0002F8FE <AmiBlitz3.ab2@3753>   ADD.l #9,d1
0002F902 <AmiBlitz3.ab2@3754>   BSR.w JUMP_writeword
0002F908 <AmiBlitz3.ab2@3755>   CMP.l #9,d1
0002F90C <AmiBlitz3.ab2@3756>   BEQ 'pos1
0002F912 <AmiBlitz3.ab2@3757>   TST.w dontwrite
0002F916 <AmiBlitz3.ab2@3758>   BNE 'nopad
0002F91C <AmiBlitz3.ab2@3759>   MOVE.l lastsourceline,d1
0002F920 <AmiBlitz3.ab2@3760>   MOVE.l d1,-6(a4)
0002F924 <AmiBlitz3.ab2@3761> BRA 'nopad
0002F92A <AmiBlitz3.ab2@3764>   MOVE.l d2,lastsourceline
0002F934 <AmiBlitz3.ab2@3765>    MOVE.l destpointer,lastdestpointer
0002F936 <AmiBlitz3.ab2@3766>    MOVEQ #0,d1
0002F93C <AmiBlitz3.ab2@3767>   MOVE.l data1,d2
0002F942 <AmiBlitz3.ab2@3768>   SUB.l destbufferstart,d2
0002F948 <AmiBlitz3.ab2@3769>   JSR writedatalong
0002F94E <AmiBlitz3.ab2@3770>   TST.w dontwrite
0002F952 <AmiBlitz3.ab2@3771>   BNE 'no2
0002F958 <AmiBlitz3.ab2@3772>   JSR addhunkoffset
0002F95E <AmiBlitz3.ab2@3775>   MOVE.l data1,d2
0002F964 <AmiBlitz3.ab2@3776>   SUB.l destbufferstart,d2
0002F96A <AmiBlitz3.ab2@3777>   JSR writedatalong
0002F970 <AmiBlitz3.ab2@3778>   TST.w dontwrite
0002F974 <AmiBlitz3.ab2@3779>   BNE 'no
0002F97A <AmiBlitz3.ab2@3780>   JSR addhunkoffset
0002F980 <AmiBlitz3.ab2@3781>   MOVE.l lastwritedat,a1
0002F986 <AmiBlitz3.ab2@3782>   CMP.l #0,a1
0002F98A <AmiBlitz3.ab2@3783>   BEQ 'no
0002F98C <AmiBlitz3.ab2@3784>   MOVE.l d3,(a1)
0002F994 <AmiBlitz3.ab2@3785>   MOVE.l prevwritedat,4(a1)
0002F99E <AmiBlitz3.ab2@3786>   MOVE.l lastwritedat,prevwritedat
0002F9A4 <AmiBlitz3.ab2@3789>   MOVE.l d3,lastwritedat
0002F9A6 <AmiBlitz3.ab2@3790>   MOVEQ #4,d1
0002F9AA <AmiBlitz3.ab2@3791>   BSR pokedata1b
0002F9AC <AmiBlitz3.ab2@3794>   MOVE.b (a0)+,d1
0002F9B0 <AmiBlitz3.ab2@3795>   BEQ 'done
0002F9B4 <AmiBlitz3.ab2@3796>   BSR pokedata1b
0002F9B8 <AmiBlitz3.ab2@3797> BRA 'loop
0002F9BA <AmiBlitz3.ab2@3800>   MOVEQ #0,d1
0002F9BE <AmiBlitz3.ab2@3801>   BSR pokedata1b
0002F9C4 <AmiBlitz3.ab2@3802>   MOVE.l data1,d1
0002F9C8 <AmiBlitz3.ab2@3803>   BTST #0,d1
0002F9CC <AmiBlitz3.ab2@3804>   BEQ 'nopad
0002F9CE <AmiBlitz3.ab2@3805>   MOVEQ #0,d1
0002F9D2 <AmiBlitz3.ab2@3806>   BSR pokedata1b
0002F9D6 <AmiBlitz3.ab2@3809>   MOVEM.l (a7)+,a0-a1/d2/d3
0002F9DA <AmiBlitz3.ab2@3810> BRA 'noinc2
0002F9E0 <AmiBlitz3.ab2@3813>   MOVE.l sourceline,D1
0002F9E6 <AmiBlitz3.ab2@3815>   JSR writelong
0002F9E8 <AmiBlitz3.ab2@3816>   MOVE.l A5,D1
0002F9EE <AmiBlitz3.ab2@3817>   SUB.l sourceline,D1
0002F9F4 <AmiBlitz3.ab2@3819>   JSR writeword
0002F9F6 <AmiBlitz3.ab2@3822>   MOVEQ.l #$00,D1
0002F9FC <AmiBlitz3.ab2@3823>   JSR writeword                                            ; was: BSR.w writeword
0002FA00 <AmiBlitz3.ab2@3824>   MOVEM.l (A7)+,D0-D1
0002FA02 <AmiBlitz3.ab2@3827> RTS
0002FA08 <AmiBlitz3.ab2@3831>   TST.b debugmode                                          ;extern debug
0002FA0C <AmiBlitz3.ab2@3832>    BEQ.b undodebug__rts
0002FA12 <AmiBlitz3.ab2@3833>   TST.b dirmode
0002FA16 <AmiBlitz3.ab2@3834>   BNE undodebug__rts
0002FA20 <AmiBlitz3.ab2@3839>   MOVE.w d_nomemleft,dontwrite
0002FA2A <AmiBlitz3.ab2@3840>   MOVE.l d_bigpc,bigpc
0002FA34 <AmiBlitz3.ab2@3841>   MOVE.l d_pc,destpointer
0002FA3E <AmiBlitz3.ab2@3842>   MOVE.l cont_pc2,cont_pc
0002FA40 <AmiBlitz3.ab2@3845> RTS
0002FA4A <AmiBlitz3.ab2@3849>   MOVE.l #forthstack,forthsp
0002FA54 <AmiBlitz3.ab2@3850>   MOVE.l #precstack,precsp
0002FA5A <AmiBlitz3.ab2@3851>   CLR.w regnum
0002FA60 <AmiBlitz3.ab2@3852>   CLR.w nonew
0002FA66 <AmiBlitz3.ab2@3853>   CLR.w sbasegot
0002FA70 <AmiBlitz3.ab2@3854>   MOVE.w varcodelen,oldvcodelen
0002FA76 <AmiBlitz3.ab2@3855>   CLR.w varcodelen
0002FA7E <AmiBlitz3.ab2@3856>   MOVE.w #-1,lasta6
0002FA80 <AmiBlitz3.ab2@3857> RTS
0002FA86 <AmiBlitz3.ab2@3861>   TST.w linemode
0002FA8A <AmiBlitz3.ab2@3862>   BMI.b smode__skip
0002FA8E <AmiBlitz3.ab2@3863>   BSR.w undodebug
0002FA94 <AmiBlitz3.ab2@3864>   MOVE.w linemode,D1
0002FA96 <AmiBlitz3.ab2@3865>   ADDQ.w #4,A7
0002FA98 <AmiBlitz3.ab2@3866>   LSL.w #2,D1
0002FA9E <AmiBlitz3.ab2@3867>   LEA modetable,A0
0002FAA2 <AmiBlitz3.ab2@3868>   MOVEA.l $0(A0,D1.W),A0
0002FAA6 <AmiBlitz3.ab2@3869>   BSR.w reget
0002FAA8 <AmiBlitz3.ab2@3872> JMP (A0)                                                   ;jumptokenroutine
0002FAAA <AmiBlitz3.ab2@3875> RTS
0002FAB2 <AmiBlitz3.ab2@3880>   MOVE.w #0,leaa0a0+2
0002FAB8 <AmiBlitz3.ab2@3881>   CLR.b nowdeclare
0002FABE <AmiBlitz3.ab2@3882>   CLR.b notypecheck
0002FAC4 <AmiBlitz3.ab2@3883>   CLR.l lasttoken
0002FACA <AmiBlitz3.ab2@3884>   CLR.b doimmediate
0002FAD0 <AmiBlitz3.ab2@3885>   CLR.w vartype
0002FAD6 <AmiBlitz3.ab2@3886>   CLR.w regnumfunc
0002FADC <AmiBlitz3.ab2@3887>   CLR.b optistring
0002FAE2 <AmiBlitz3.ab2@3888>   CLR.b iniffcommand
0002FAE8 <AmiBlitz3.ab2@3889>   CLR.w instringon  ; new
0002FAEE <AmiBlitz3.ab2@3890>   TST.b debugmode
0002FAF2 <AmiBlitz3.ab2@3891>    BEQ 'fpu
0002FAFC <AmiBlitz3.ab2@3897>   MOVE.b fpu,iee
0002FB00 <AmiBlitz3.ab2@3898>   MOVE.w stopit(PC),D0
0002FB04 <AmiBlitz3.ab2@3899>   BNE chkstop_chkb
0002FB08 <AmiBlitz3.ab2@3900>   BSR.w chkstop                                          ; message here
0002FB0E <AmiBlitz3.ab2@3903>   SUBQ.w #1,stopit
0002FB12 <AmiBlitz3.ab2@3906>   BSR.w findmacro                                          ;macro
0002FB16 <AmiBlitz3.ab2@3958>   CMP.b #$2b,(a5)
0002FB1A <AmiBlitz3.ab2@3959>   BNE 'lb2
0002FB1E <AmiBlitz3.ab2@3960>   BSR.w get1bytemain                                       ;gettokenmain
0002FB26 <AmiBlitz3.ab2@3961>   MOVE.b #1,notypecheck
0002FB2C <AmiBlitz3.ab2@3964>   TST.b debugmode
0002FB30 <AmiBlitz3.ab2@3965>    BEQ.s 'l10
0002FB36 <AmiBlitz3.ab2@3966>   TST.b exdebug
0002FB3A <AmiBlitz3.ab2@3967>   BEQ 'l10a
0002FB3C <AmiBlitz3.ab2@3968>   MOVE.w (a5),d0
0002FB40 <AmiBlitz3.ab2@3969>   CMP.w #$8025,d0
0002FB44 <AmiBlitz3.ab2@3970>    BEQ 'l10
0002FB48 <AmiBlitz3.ab2@3973>   BSR.w debugstuffa                                         ;insert runtimecode debugcode
0002FB4C <AmiBlitz3.ab2@3978>   BSR.w get1bytemain                                       ;gettokenmain
0002FB50 <AmiBlitz3.ab2@3979>   BEQ.w undodebug                                          ;JL_0_462C
0002FB5A <AmiBlitz3.ab2@3985>   MOVE.l #forthstack,forthsp
0002FB64 <AmiBlitz3.ab2@3986>   MOVE.l #precstack,precsp
0002FB6A <AmiBlitz3.ab2@3987>   CLR.w regnum
0002FB70 <AmiBlitz3.ab2@3988>   CLR.w nonew
0002FB76 <AmiBlitz3.ab2@3989>   CLR.w sbasegot
0002FB80 <AmiBlitz3.ab2@3990>   MOVE.w varcodelen,oldvcodelen
0002FB86 <AmiBlitz3.ab2@3992>   CLR.w varcodelen
0002FB8E <AmiBlitz3.ab2@3993>   MOVE.w #$FFFF,lasta6
0002FB92 <AmiBlitz3.ab2@3995>   BSR.w smode
0002FB94 <AmiBlitz3.ab2@3996>   TST.w D0
0002FB98 <AmiBlitz3.ab2@3997>   BMI.w get_tokencode
0002FB9C <AmiBlitz3.ab2@3998>   CMP.w #$2E,D0
0002FBA0 <AmiBlitz3.ab2@3999>    BEQ.w JL_0_4644                                         ;shortlist
0002FBA4 <AmiBlitz3.ab2@4000>   CMP.w #"#",D0
0002FBA8 <AmiBlitz3.ab2@4001>    BEQ.w JL_0_4718                                         ;constant found
0002FBAC <AmiBlitz3.ab2@4002>   CMP.w #$27,D0
0002FBB0 <AmiBlitz3.ab2@4003>    BEQ.w JL_0_4638                                         ;local label
0002FBB6 <AmiBlitz3.ab2@4004>   MOVE.l A5,letstart
0002FBBC <AmiBlitz3.ab2@4005>   JSR getparameter
0002FBC0 <AmiBlitz3.ab2@4006>   BSR.w reget
0002FBC4 <AmiBlitz3.ab2@4007>    BEQ.w JL_0_4658                                         ;label found
0002FBC8 <AmiBlitz3.ab2@4008>   CMP.w #$7B,D0
0002FBCC <AmiBlitz3.ab2@4009>    BEQ.w JL_0_475C
0002FBCE <AmiBlitz3.ab2@4010>   TST.w d0
0002FBD2 <AmiBlitz3.ab2@4011>    BPL 'll1
0002FBD8 <AmiBlitz3.ab2@4012>   TST.b newsyntax
0002FBDC <AmiBlitz3.ab2@4013>    BEQ 'll1
0002FBE2 <AmiBlitz3.ab2@4014>   LEA allowtab,a0
0002FBE4 <AmiBlitz3.ab2@4015>   MOVEQ #0,d1
0002FBE6 <AmiBlitz3.ab2@4016>   MOVE.b d0,d1
0002FBEA <AmiBlitz3.ab2@4017>   TST.b 0(a0,d1.w)
0002FBEE <AmiBlitz3.ab2@4018>    BNE 'll1
0002FBF0 <AmiBlitz3.ab2@4019>   SUBQ.l #2,a5
0002FBF8 <AmiBlitz3.ab2@4020>   MOVE.w #":",lastchar                                     ;no doublepoint
0002FBFC <AmiBlitz3.ab2@4021> BRA JL_0_4658
0002FC04 <AmiBlitz3.ab2@4024>   CMP.l #"equ ",-1(a5)
0002FC08 <AmiBlitz3.ab2@4025>    BEQ 'll4
0002FC10 <AmiBlitz3.ab2@4026>   CMP.l #"EQU ",-1(a5)
0002FC14 <AmiBlitz3.ab2@4027>    BNE 'll2
0002FC16 <AmiBlitz3.ab2@4030>   ADDQ.l #2,a5
0002FC1A <AmiBlitz3.ab2@4031>   BSR.w findlabel2
0002FC1E <AmiBlitz3.ab2@4032>   BEQ.w 'lf1
0002FC22 <AmiBlitz3.ab2@4033>   BSR.w addlabelhash
0002FC2A <AmiBlitz3.ab2@4034>   MOVE.l #$1,$4(A2)
0002FC32 <AmiBlitz3.ab2@4037>   CMPI.l #$1,$4(A2)
0002FC36 <AmiBlitz3.ab2@4038>    BNE.w illconerr
0002FC3A <AmiBlitz3.ab2@4039>   BSR get1bytemain
0002FC3C <AmiBlitz3.ab2@4040>   MOVE.l A2,-(A7)
0002FC3E <AmiBlitz3.ab2@4051>   SUBQ.l #1,a5
0002FC40 <AmiBlitz3.ab2@4054>   SUBQ.l #1,a5
0002FC46 <AmiBlitz3.ab2@4055>   JSR AJL_0_BF6E
0002FC48 <AmiBlitz3.ab2@4056>   MOVEA.l (A7)+,A2
0002FC4C <AmiBlitz3.ab2@4057>   MOVE.l D3,$8(A2)
0002FC4E <AmiBlitz3.ab2@4058>   RTS
0002FC52 <AmiBlitz3.ab2@4059>   BSR get1bytemain
0002FC5A <AmiBlitz3.ab2@4062>   CMP.l #"SET ",-1(a5)
0002FC5E <AmiBlitz3.ab2@4063>   BNE 'll3
0002FC62 <AmiBlitz3.ab2@4064> BRA 'll4
0002FC68 <AmiBlitz3.ab2@4067> JMP AJL_0_DEA6
0002FC6C <AmiBlitz3.ab2@4070>   CMP.w #-$7FDE,D0
0002FC70 <AmiBlitz3.ab2@4071>   BEQ.w get_tokencode
0002FC74 <AmiBlitz3.ab2@4072> BRA.w undodebug
0002FC78 <AmiBlitz3.ab2@4075>   BSR.w undodebug
0002FC7C <AmiBlitz3.ab2@4076>   BSR.w createlab
0002FC80 <AmiBlitz3.ab2@4077> BRA.w JL_0_466E
0002FC84 <AmiBlitz3.ab2@4080>   BSR.w get1bytemain
0002FC88 <AmiBlitz3.ab2@4081>    BEQ.w JL_0_462C
0002FC8C <AmiBlitz3.ab2@4082>   CMP.w #"'",D0
0002FC90 <AmiBlitz3.ab2@4083>    BEQ.w JL_0_4638
0002FC94 <AmiBlitz3.ab2@4084>    BSR.w makename2
0002FC96 <AmiBlitz3.ab2@4085>    TST.w d0
0002FC9A <AmiBlitz3.ab2@4086>    BPL 'll1
0002FC9C <AmiBlitz3.ab2@4087>    SUBQ.l #2,a5
0002FCA4 <AmiBlitz3.ab2@4088>    MOVE.w #":",lastchar
0002FCA8 <AmiBlitz3.ab2@4089> BRA JL_0_4658                                              ;????
0002FCAC <AmiBlitz3.ab2@4093>   BSR.w undodebug
0002FCB2 <AmiBlitz3.ab2@4094>   LEA ptr_parameterstore,A0
0002FCB8 <AmiBlitz3.ab2@4095>   LEA lastgloballabel,A1
0002FCBA <AmiBlitz3.ab2@4098>   MOVE.b (A0)+,(A1)+
0002FCBE <AmiBlitz3.ab2@4099>    BNE.w JL_0_4668
0002FCC2 <AmiBlitz3.ab2@4102>   BSR.w findlabel2
0002FCC6 <AmiBlitz3.ab2@4103>    BEQ.w JL_0_4698
0002FCCA <AmiBlitz3.ab2@4104>    BSR.w addlabelhash
0002FCCE <AmiBlitz3.ab2@4107>   CLR.l $4(A2)
0002FCD6 <AmiBlitz3.ab2@4108>   MOVE.l destpointer,$8(A2)
0002FCDE <AmiBlitz3.ab2@4111>   MOVE.w procnum,$10(A2)
0002FCE0 <AmiBlitz3.ab2@4112> RTS
0002FCE4 <AmiBlitz3.ab2@4116>   MOVE.l $4(A2),D0
0002FCE8 <AmiBlitz3.ab2@4117>   BTST #$0,D0
0002FCEC <AmiBlitz3.ab2@4118>    BNE.w illlaberr
0002FCF2 <AmiBlitz3.ab2@4119>   TST.w pass
0002FCF6 <AmiBlitz3.ab2@4121>   MOVE.l $8(A2),D0
0002FCFA <AmiBlitz3.ab2@4122>    BNE.w duplaberr
0002FD02 <AmiBlitz3.ab2@4123>   MOVE.w procnum,$10(A2)
0002FD06 <AmiBlitz3.ab2@4124>   MOVEA.l $4(A2),A3
0002FD0C <AmiBlitz3.ab2@4125>   MOVEA.l _execbase,A6
0002FD10 <AmiBlitz3.ab2@4128>   CMPA.w #$0,A3
0002FD14 <AmiBlitz3.ab2@4129>    BEQ.w JL_0_467A
0002FD18 <AmiBlitz3.ab2@4130>     MOVE.l $4(A2),D1
0002FD1C <AmiBlitz3.ab2@4131>     BTST #$0,D1
0002FD20 <AmiBlitz3.ab2@4132>     BNE.w illlaberr
0002FD24 <AmiBlitz3.ab2@4133>   MOVE.w $8(A3),D1
0002FD28 <AmiBlitz3.ab2@4134>   CMP.w $10(A2),D1
0002FD2C <AmiBlitz3.ab2@4135>    BEQ.w JL_0_46DC
0002FD32 <AmiBlitz3.ab2@4136>    TST.b newsyntax
0002FD36 <AmiBlitz3.ab2@4137>    BEQ 'l1
0002FD3A <AmiBlitz3.ab2@4138> BRA.w JL_0_46DC                                            ;label context out of range fix
0002FD42 <AmiBlitz3.ab2@4143>   MOVE.w $A(A3),linenumat+2                                ;move 10(a3),linenumat org source
0002FD46 <AmiBlitz3.ab2@4144> BRA.w referr
0002FD4C <AmiBlitz3.ab2@4147>   MOVE.w dontwrite,D1
0002FD50 <AmiBlitz3.ab2@4148>    BNE.w JL_0_4706
0002FD54 <AmiBlitz3.ab2@4149>   MOVEA.l $4(A3),A1
0002FD5A <AmiBlitz3.ab2@4150>   BTST #$0,$7(A3)
0002FD5E <AmiBlitz3.ab2@4151>    BEQ.w JL_0_4700
0002FD60 <AmiBlitz3.ab2@4152>   SUBQ.w #1,A1
0002FD66 <AmiBlitz3.ab2@4153>   MOVE.l data2,(A1)
0002FD6A <AmiBlitz3.ab2@4154> BRA.w JL_0_4706
0002FD70 <AmiBlitz3.ab2@4157>   MOVE.l destpointer,(A1)
0002FD72 <AmiBlitz3.ab2@4160>   MOVEA.l A3,A1
0002FD74 <AmiBlitz3.ab2@4161>   MOVEA.l (A3),A3
0002FD78 <AmiBlitz3.ab2@4162>   MOVE.l A3,$4(A2)
0002FD7A <AmiBlitz3.ab2@4163>   MOVEQ.l #$0C+2,D0
0002FD80 <AmiBlitz3.ab2@4164>   MOVE.l mempool,a0
0002FD86 <AmiBlitz3.ab2@4165>   MOVEA.l _execbase,A6
0002FD8A <AmiBlitz3.ab2@4166>   JSR _FreePooled(A6)
0002FD8E <AmiBlitz3.ab2@4167> BRA.w JL_0_46BC
0002FD98 <AmiBlitz3.ab2@4172>    MOVE.l #forthstack,forthsp
0002FDA2 <AmiBlitz3.ab2@4173>   MOVE.l #precstack,precsp
0002FDA6 <AmiBlitz3.ab2@4174>    BSR.w getparameter2
0002FDAA <AmiBlitz3.ab2@4177>   BSR.w findlabel2
0002FDAE <AmiBlitz3.ab2@4178>    BEQ.w JL_0_4738
0002FDB2 <AmiBlitz3.ab2@4179>    BSR.w addlabelhash
0002FDBA <AmiBlitz3.ab2@4180>   MOVE.l #$1,$4(A2)
0002FDBE <AmiBlitz3.ab2@4181> BRA.w JL_0_4744
0002FDC6 <AmiBlitz3.ab2@4184>   CMPI.l #$1,$4(A2)
0002FDCA <AmiBlitz3.ab2@4185>    BNE.w illconerr
0002FDCE <AmiBlitz3.ab2@4194>   CMP.w #$3D,D0
0002FDD2 <AmiBlitz3.ab2@4195>   BEQ.w JL_0_474E
0002FDD4 <AmiBlitz3.ab2@4196> RTS
0002FDD6 <AmiBlitz3.ab2@4200>   MOVE.l A2,-(A7)
0002FDDC <AmiBlitz3.ab2@4201>   JSR AJL_0_BF6E
0002FDDE <AmiBlitz3.ab2@4202>   MOVEA.l (A7)+,A2
0002FDE2 <AmiBlitz3.ab2@4203>   MOVE.l D3,$8(A2)                                         ;store constant
0002FDEA <AmiBlitz3.ab2@4204>   CMP.w #$0a,lastchar
0002FDEE <AmiBlitz3.ab2@4205>   BNE 'l1
0002FDF6 <AmiBlitz3.ab2@4206>   MOVE.w #":",lastchar                                     ;hack to read wizard include files
0002FDF8 <AmiBlitz3.ab2@4209> RTS
0002FDFC <AmiBlitz3.ab2@4212>   BSR.w findproc                                           ;write statement call
0002FE00 <AmiBlitz3.ab2@4213>   BEQ _state
0002FE06 <AmiBlitz3.ab2@4214>   TST.l unusedfunc
0002FE0A <AmiBlitz3.ab2@4215>   BEQ noprocerr
0002FE10 <AmiBlitz3.ab2@4217>   JSR gotoendsource
0002FE14 <AmiBlitz3.ab2@4220>   TST.b $5(A2)
0002FE1A <AmiBlitz3.ab2@4222>   MOVE.l a2,currentfunccall
0002FE22 <AmiBlitz3.ab2@4223>   MOVE.b #1,funccall
0002FE28 <AmiBlitz3.ab2@4224>   MOVE.b #1,isfunc(a2)
0002FE2C <AmiBlitz3.ab2@4225>   MOVE.l $E(A2),-(A7)
0002FE2E <AmiBlitz3.ab2@4226>   MOVEQ.l #$00,D0
0002FE32 <AmiBlitz3.ab2@4227>   MOVE.b $4(A2),D0
0002FE38 <AmiBlitz3.ab2@4228>   MOVE.l d0,parnumtemp
0002FE3C <AmiBlitz3.ab2@4229>   BEQ.w JL_0_4786
0002FE40 <AmiBlitz3.ab2@4230>   TST.b $20(a2)                                            ;increase if morepar
0002FE44 <AmiBlitz3.ab2@4231>   BNE 'no0par
0002FE46 <AmiBlitz3.ab2@4232>   MOVE.l a5,a4
0002FE4A <AmiBlitz3.ab2@4235>   CMP.b #$20,(a4)+
0002FE4E <AmiBlitz3.ab2@4236>   BEQ 'l1
0002FE54 <AmiBlitz3.ab2@4237>   CMP.b #"}",-1(a4)
0002FE58 <AmiBlitz3.ab2@4238>   BNE  'no0par                                             ;statementcall pars
0002FE5A <AmiBlitz3.ab2@4239>   MOVEQ #0,d0
0002FE5E <AmiBlitz3.ab2@4242>   LEA $16(A2),A1
0002FE60 <AmiBlitz3.ab2@4245>   MOVE.l d1,-(a7)
0002FE62 <AmiBlitz3.ab2@4246>   MOVE.b (a1),d2
0002FE64 <AmiBlitz3.ab2@4247>   MOVE.l d0,d1
0002FE68 <AmiBlitz3.ab2@4248>   CMP.w #4,d2
0002FE6C <AmiBlitz3.ab2@4249>   BNE 'l1b
0002FE72 <AmiBlitz3.ab2@4250>   ADD.l #$203c,d1
0002FE78 <AmiBlitz3.ab2@4252>   JSR writeword
0002FE7E <AmiBlitz3.ab2@4253>   MOVE.l #$ffff0000,d1
0002FE84 <AmiBlitz3.ab2@4255>   JSR writelong
0002FE88 <AmiBlitz3.ab2@4256> BRA 'l2b
0002FE8E <AmiBlitz3.ab2@4259>   TST.b fpu
0002FE92 <AmiBlitz3.ab2@4260>   BNE 'l1c
0002FE96 <AmiBlitz3.ab2@4261>   CMP.w #5,d2
0002FE9A <AmiBlitz3.ab2@4262>   BNE 'l1c
0002FEA0 <AmiBlitz3.ab2@4263>   ADD.l #$203c,d1
0002FEA6 <AmiBlitz3.ab2@4265>   JSR writeword
0002FEAC <AmiBlitz3.ab2@4266>   MOVE.l #$800000c1,d1
0002FEB2 <AmiBlitz3.ab2@4268>   JSR writelong
0002FEB6 <AmiBlitz3.ab2@4269> BRA 'l2b
0002FEBC <AmiBlitz3.ab2@4272>   ADD.l #$70ff,d1
0002FEC2 <AmiBlitz3.ab2@4274>   JSR writeword
0002FEC8 <AmiBlitz3.ab2@4275>   MOVE.l #$f23c5000,d1
0002FECA <AmiBlitz3.ab2@4276>   MOVE.l d0,d2
0002FECC <AmiBlitz3.ab2@4277>   ASR.l #2,d2
0002FECE <AmiBlitz3.ab2@4278>   ADD.l d2,d1
0002FED4 <AmiBlitz3.ab2@4280>   JSR writelong
0002FED8 <AmiBlitz3.ab2@4281>   MOVE.w #$ffff,d1
0002FEDE <AmiBlitz3.ab2@4283>   JSR writeword
0002FEE0 <AmiBlitz3.ab2@4286>   MOVE.l (a7)+,d1
0002FEE2 <AmiBlitz3.ab2@4287>   ADDQ.l #1,a1
0002FEE8 <AmiBlitz3.ab2@4288>   ADD.l #$0200,d0
0002FEEE <AmiBlitz3.ab2@4289>   CMP.l #$0e00,d0
0002FEF2 <AmiBlitz3.ab2@4290>    BEQ syntaxerr
0002FEF4 <AmiBlitz3.ab2@4291>   TST.b (a1)
0002FEF8 <AmiBlitz3.ab2@4292>    BNE 'again
0002FEFC <AmiBlitz3.ab2@4293> BRA JL_0_4786
0002FF06 <AmiBlitz3.ab2@4296>   MOVE.w a2offset,a2offset2
0002FF0A <AmiBlitz3.ab2@4297>   LEA $16(A2),A2
0002FF10 <AmiBlitz3.ab2@4298>   MOVE.b funcparloop,-(a7)
0002FF18 <AmiBlitz3.ab2@4299>   MOVE.b #1,funcparloop
0002FF1C <AmiBlitz3.ab2@4300>   BSR.w fetchpees2
0002FF22 <AmiBlitz3.ab2@4301>   MOVE.b (a7)+,funcparloop
0002FF26 <AmiBlitz3.ab2@4302> BRA.w JL_0_478A
0002FF2A <AmiBlitz3.ab2@4305>   BSR.w get1bytemain
0002FF2E <AmiBlitz3.ab2@4308>   CMP.w #$7D,D0
0002FF32 <AmiBlitz3.ab2@4309>    BNE.w morepar_                                          ;syntax error morepar
0002FF38 <AmiBlitz3.ab2@4310>    JSR chkstak
0002FF3A <AmiBlitz3.ab2@4311>   MOVE.l (A7)+,D1
0002FF40 <AmiBlitz3.ab2@4327>    JSR JL_0_AFCA
0002FF46 <AmiBlitz3.ab2@4349>   CLR.b funccall
0002FF4A <AmiBlitz3.ab2@4350> BRA.w get1bytemain
0002FF4E <AmiBlitz3.ab2@4354>   CMP.w #$c09f,d0                                          ;hack to use getregd0 instead of getd0
0002FF52 <AmiBlitz3.ab2@4355>   BNE 'l2
0002FF56 <AmiBlitz3.ab2@4356>    MOVE.w #$dd05,d0
0002FF5A <AmiBlitz3.ab2@4359>   CMP.w #$c0a0,d0                                          ;hack to use getregd0 instead of getd0
0002FF5E <AmiBlitz3.ab2@4360>   BNE 'l3
0002FF62 <AmiBlitz3.ab2@4361>    MOVE.w #$dd06,d0
0002FF66 <AmiBlitz3.ab2@4364>   CMP.w #-$7FC4,D0
0002FF6A <AmiBlitz3.ab2@4365>   BCS.w JL_0_47C4
0002FF6E <AmiBlitz3.ab2@4366>     CMP.w #-$7F4D,D0
0002FF72 <AmiBlitz3.ab2@4367>     BCC.w JL_0_47C4
0002FF7A <AmiBlitz3.ab2@4368>       BTST #$7,assemblercheck                              ;inline Assembler checking
0002FF7E <AmiBlitz3.ab2@4369>       BNE.b JL_0_47C0
0002FF84 <AmiBlitz3.ab2@4370>         TST.b debugmode
0002FF88 <AmiBlitz3.ab2@4371>         BEQ.b 'l10
0002FF92 <AmiBlitz3.ab2@4376>           MOVE.w d_nomemleft,dontwrite
0002FF9C <AmiBlitz3.ab2@4377>           MOVE.l d_bigpc,bigpc
0002FFA6 <AmiBlitz3.ab2@4378>           MOVE.l d_pc,destpointer
0002FFB0 <AmiBlitz3.ab2@4379>           MOVE.l cont_pc2,cont_pc
0002FFB4 <AmiBlitz3.ab2@4385> BRA.w JL_0_612C
0002FFB8 <AmiBlitz3.ab2@4388>   BCLR #$F,D0
0002FFBA <AmiBlitz3.ab2@4389>   MOVE.w D0,D1
0002FFBE <AmiBlitz3.ab2@4390>   ANDI.w #$7F00,D1
0002FFC2 <AmiBlitz3.ab2@4391>   BNE.w JL_0_4856
0002FFC6 <AmiBlitz3.ab2@4392>     CMP.w #$B3,D0                                          ;intern Instructions
0002FFCA <AmiBlitz3.ab2@4393>     BCS.w JL_0_47F2
0002FFCE <AmiBlitz3.ab2@4394>       SUBI.w #$77,D0
0002FFD2 <AmiBlitz3.ab2@4395>       CMP.w #$4B,D0
0002FFD6 <AmiBlitz3.ab2@4396>       BEQ.w JL_0_4830
0002FFDA <AmiBlitz3.ab2@4397>         CMP.w #$46,D0
0002FFDE <AmiBlitz3.ab2@4398>         BEQ.w JL_0_4830
0002FFE2 <AmiBlitz3.ab2@4399> BRA.w JL_0_4834                                            ; change tokennum
0002FFE6 <AmiBlitz3.ab2@4402>     CMP.w #$38,D0
0002FFEA <AmiBlitz3.ab2@4403>      BEQ.w JL_0_4830
0002FFEE <AmiBlitz3.ab2@4404>     CMP.w #$39,D0
0002FFF2 <AmiBlitz3.ab2@4405>      BEQ.w JL_0_4830
0002FFF6 <AmiBlitz3.ab2@4406>     CMP.w #$D,D0
0002FFFA <AmiBlitz3.ab2@4407>      BEQ.w JL_0_4830
0002FFFE <AmiBlitz3.ab2@4408>     CMP.w #$12,D0
00030002 <AmiBlitz3.ab2@4409>      BEQ.w JL_0_4830
00030006 <AmiBlitz3.ab2@4410>     CMP.w #$13,D0
0003000A <AmiBlitz3.ab2@4411>      BEQ.w JL_0_4830
0003000E <AmiBlitz3.ab2@4412>     CMP.w #$1A,D0
00030012 <AmiBlitz3.ab2@4413>      BEQ.w JL_0_4830
00030016 <AmiBlitz3.ab2@4414>     CMP.w #$2A,D0
0003001A <AmiBlitz3.ab2@4415>      BHI.w JL_0_4834
0003001E <AmiBlitz3.ab2@4416>     CMP.w #$23,D0
00030022 <AmiBlitz3.ab2@4417>      BCS.b JL_0_4834
00030026 <AmiBlitz3.ab2@4420>   BSR.w undodebug
00030028 <AmiBlitz3.ab2@4423>   SUBQ.w #1,D0
0003002A <AmiBlitz3.ab2@4424>   LSL.w #2,D0
00030030 <AmiBlitz3.ab2@4431>   LEA instructionbase,A0
00030034 <AmiBlitz3.ab2@4432>   MOVEA.l $0(A0,D0.W),A0
00030036 <AmiBlitz3.ab2@4433>   MOVE.l A0,-(A7)
0003003A <AmiBlitz3.ab2@4434> BRA.w get1bytemain
0003003C <AmiBlitz3.ab2@4440>   MOVE.w D0,D1
00030040 <AmiBlitz3.ab2@4441>    BSR.w searchinstr
00030046 <AmiBlitz3.ab2@4442>    TST.b newmode
0003004A <AmiBlitz3.ab2@4443>    BNE compile_term
00030050 <AmiBlitz3.ab2@4444>   BTST #$2,$1(A3)                                          ;a3 = pointer to instr ;toke stuff in a3
00030054 <AmiBlitz3.ab2@4445>    BNE.w stamigalib
0003005A <AmiBlitz3.ab2@4446>   BTST #$0,$1(A3)
0003005E <AmiBlitz3.ab2@4447>    BEQ.w needreturn_                                       ;syntax err need return   ;check it's a statement
00030062 <AmiBlitz3.ab2@4448>    BSR.w JL_0_49EA                                         ;does it need a size specifier?
00030066 <AmiBlitz3.ab2@4449>    BSR.w JL_0_66F6
0003006C <AmiBlitz3.ab2@4455>   MOVE.w numreps,-(A7)
00030072 <AmiBlitz3.ab2@4456>   MOVE.w userp,-(A7)
00030078 <AmiBlitz3.ab2@4457>   MOVE.w a2offset,-(A7)
0003007A <AmiBlitz3.ab2@4458>   MOVE.l A2,-(A7)                                          ;recurs.
00030084 <AmiBlitz3.ab2@4459>   MOVE.w convsize,userp
00030088 <AmiBlitz3.ab2@4460>   LEA $6(A3),A1
0003008A <AmiBlitz3.ab2@4464>    MOVE.w (A1),D2
0003008E <AmiBlitz3.ab2@4465>    BMI.w SERR                                              ;statement syntax error
00030092 <AmiBlitz3.ab2@4466>   ANDI.w #$FF,D2
00030094 <AmiBlitz3.ab2@4467>   CMP.w D2,D1
00030098 <AmiBlitz3.ab2@4468>    BEQ.w JL_0_48E0
0003009C <AmiBlitz3.ab2@4469>    BCS.w JL_0_48CC
0003009E <AmiBlitz3.ab2@4470>   MOVE.b (A1),D3
000300A2 <AmiBlitz3.ab2@4471>   ANDI.w #$7,D3
000300A6 <AmiBlitz3.ab2@4472>    BEQ.w JL_0_48CC
000300A8 <AmiBlitz3.ab2@4473>   MOVE.w D2,D4
000300AA <AmiBlitz3.ab2@4474>   SUB.w D3,D4
000300AC <AmiBlitz3.ab2@4475>   MOVEQ.l #$00,D5
000300AE <AmiBlitz3.ab2@4476>   MOVE.w D1,D5
000300B0 <AmiBlitz3.ab2@4477>   SUB.w D4,D5
000300B2 <AmiBlitz3.ab2@4478>   DIVU D3,D5
000300B4 <AmiBlitz3.ab2@4479>   SWAP D5
000300B6 <AmiBlitz3.ab2@4480>   TST.w D5
000300BA <AmiBlitz3.ab2@4481>    BEQ.w JL_0_48E0
000300BC <AmiBlitz3.ab2@4484>   ADDQ.w #2,A1
000300BE <AmiBlitz3.ab2@4485>   ADDA.w D2,A1
000300C2 <AmiBlitz3.ab2@4486>    BSR.w aligna1
000300C6 <AmiBlitz3.ab2@4487>    BSR.w skiplibreg
000300CA <AmiBlitz3.ab2@4488>   LEA $C(A1),A1
000300CE <AmiBlitz3.ab2@4489> BRA.w JL_0_489A
000300D0 <AmiBlitz3.ab2@4492>   MOVE.w (a3),d2
000300D4 <AmiBlitz3.ab2@4493>   BTST #1,d2
000300D8 <AmiBlitz3.ab2@4494>   BEQ statement_
000300DC <AmiBlitz3.ab2@4495>   CMP.w #1,d1
000300E0 <AmiBlitz3.ab2@4496>   BEQ statement_
000300E4 <AmiBlitz3.ab2@4499>   CMP.b #$20,(a5)+
000300E8 <AmiBlitz3.ab2@4500>   BEQ 'l2
000300EE <AmiBlitz3.ab2@4501>   CMP.b #"(",-2(a5)
000300F2 <AmiBlitz3.ab2@4502>   BNE 'l1
000300F6 <AmiBlitz3.ab2@4503> BRA parameter_
000300FA <AmiBlitz3.ab2@4506> BRA inbrackets_
000300FC <AmiBlitz3.ab2@4509>   MOVE.b (A1),D2
000300FE <AmiBlitz3.ab2@4510>   LSL.w #8,D2
00030100 <AmiBlitz3.ab2@4511>   OR.w D2,D1
00030102 <AmiBlitz3.ab2@4512>   MOVE.l A1,-(A7)
00030108 <AmiBlitz3.ab2@4513>   CLR.w a2offset
0003010A <AmiBlitz3.ab2@4514>   TST.w D1
0003010E <AmiBlitz3.ab2@4515>    BEQ.w JL_0_4900
00030112 <AmiBlitz3.ab2@4516>   LEA $2(A1),A2
00030116 <AmiBlitz3.ab2@4517>    BSR.w fetchlibps
0003011A <AmiBlitz3.ab2@4518> BRA.w JL_0_4904
0003011E <AmiBlitz3.ab2@4521>   BSR.w get1bytemain
00030120 <AmiBlitz3.ab2@4524>   MOVEA.l (A7)+,A1
00030122 <AmiBlitz3.ab2@4525>   MOVEA.l (A7)+,A2
00030128 <AmiBlitz3.ab2@4526>   MOVE.w a2offset,D1
0003012C <AmiBlitz3.ab2@4527>    BEQ.w JL_0_493A
00030132 <AmiBlitz3.ab2@4528>   MOVE.w D1,preplibst+2
00030138 <AmiBlitz3.ab2@4529>   MOVE.l preplibst,D1
0003013E <AmiBlitz3.ab2@4530>    JSR writelong                                           ;write array offset stack correct
00030148 <AmiBlitz3.ab2@4531>   MOVE.w numreps,movenumrep+2
0003014C <AmiBlitz3.ab2@4532>    BEQ.w JL_0_493A
00030152 <AmiBlitz3.ab2@4533>   MOVE.l movenumrep,D1
00030158 <AmiBlitz3.ab2@4534>    JSR writelong
0003015E <AmiBlitz3.ab2@4538>   JSR userjsr
00030164 <AmiBlitz3.ab2@4541>   MOVE.w a2offset,D1
00030168 <AmiBlitz3.ab2@4542>    BEQ.w JL_0_4974
0003016C <AmiBlitz3.ab2@4543>   CMP.w #$8,D1
00030170 <AmiBlitz3.ab2@4544>    BHI.w JL_0_4964
00030174 <AmiBlitz3.ab2@4545>   ANDI.w #$7,D1
00030176 <AmiBlitz3.ab2@4546>   LSL.w #8,D1
00030178 <AmiBlitz3.ab2@4547>   LSL.w #1,D1
0003017C <AmiBlitz3.ab2@4548>   ORI.w #$504F,D1
00030182 <AmiBlitz3.ab2@4550>   JSR writeword
00030186 <AmiBlitz3.ab2@4551> BRA.w JL_0_4974
0003018C <AmiBlitz3.ab2@4554>   MOVE.w D1,fixlibst+2
00030192 <AmiBlitz3.ab2@4555>   MOVE.l fixlibst,D1
00030198 <AmiBlitz3.ab2@4556>   JSR writelong
0003019E <AmiBlitz3.ab2@4559>   MOVE.w (A7)+,a2offset
000301A4 <AmiBlitz3.ab2@4560>   MOVE.w (A7)+,userp
000301AA <AmiBlitz3.ab2@4561>   MOVE.w (A7)+,numreps
000301AE <AmiBlitz3.ab2@4562> BRA.w reget
000301B2 <AmiBlitz3.ab2@4566>   MOVEM.l A2-A3,-(A7)
000301B8 <AmiBlitz3.ab2@4567>   CLR.b doublepeek
000301BE <AmiBlitz3.ab2@4568>   MOVE.l A5,lastsourcepos
000301C2 <AmiBlitz3.ab2@4569>    BSR.w getchar
000301C6 <AmiBlitz3.ab2@4570>   CMP.w #$2E,D0
000301CA <AmiBlitz3.ab2@4571>    BEQ.w JL_0_49B4
000301D0 <AmiBlitz3.ab2@4572>   MOVEA.l defaulttype,A2
000301D4 <AmiBlitz3.ab2@4573>   CMP.w #$24,D0
000301D8 <AmiBlitz3.ab2@4574>    BNE.w JL_0_49CA
000301DA <AmiBlitz3.ab2@4575>   MOVEQ.l #$07,D1
000301DE <AmiBlitz3.ab2@4576> BRA.w JL_0_49DE
000301E2 <AmiBlitz3.ab2@4579>   BSR.w getparameter2
000301E6 <AmiBlitz3.ab2@4580>   BEQ.w syntaxerr
000301EC <AmiBlitz3.ab2@4581>   LEA newtypebase,A2
000301F0 <AmiBlitz3.ab2@4582>   BSR.w findtype
000301F4 <AmiBlitz3.ab2@4583>   BNE.w notypeerr
000301FE <AmiBlitz3.ab2@4587>   MOVE.w oldqflag,instringon
00030204 <AmiBlitz3.ab2@4588>   MOVEA.l lastsourcepos,A5
0003020C <AmiBlitz3.ab2@4589>   CMPI.l #$100,$4(A2)
00030210 <AmiBlitz3.ab2@4590>    BCC.w illtypeerr
00030214 <AmiBlitz3.ab2@4591>   MOVE.w $6(A2),D1
0003021A <AmiBlitz3.ab2@4592>   CMP.w #8,8(a2)
0003021E <AmiBlitz3.ab2@4593>   BNE 'l1
00030226 <AmiBlitz3.ab2@4594>   MOVE.b #1,doublepeek
0003022C <AmiBlitz3.ab2@4598>   MOVE.w D1,convsize
00030230 <AmiBlitz3.ab2@4599>   MOVEM.l (A7)+,A2-A3
00030232 <AmiBlitz3.ab2@4600> RTS
00030238 <AmiBlitz3.ab2@4605>   BTST #$3,$1(A3)
0003023C <AmiBlitz3.ab2@4606>   BEQ.w JL_0_4A06
00030240 <AmiBlitz3.ab2@4607>   BSR.w AJL_0_498A                                         ;read peek/poke size
00030244 <AmiBlitz3.ab2@4609>   ORI.w #$7000,D1
0003024A <AmiBlitz3.ab2@4610>   JSR writeword
00030250 <AmiBlitz3.ab2@4611>   ADDQ.w #1,regnum
00030252 <AmiBlitz3.ab2@4614> RTS
00030254 <AmiBlitz3.ab2@4620>             Dc.b $10,$12                                   ;MOVE.B  (A2),D0
00030256 <AmiBlitz3.ab2@4621>             Dc.b $14,$91                                   ;MOVE.B  (A1),(A2)
00030258 <AmiBlitz3.ab2@4622>             Dc.b $12,$80                                   ;MOVE.B  D0,(A1)
0003025A <AmiBlitz3.ab2@4626> swapw:      Dc.b $30,$12                                   ;MOVE.W  (A2),D0
0003025C <AmiBlitz3.ab2@4627>             Dc.b $34,$91                                   ;MOVE.W  (A1),(A2)
0003025E <AmiBlitz3.ab2@4628>             Dc.b $32,$80                                   ;MOVE.W  D0,(A1)
00030260 <AmiBlitz3.ab2@4632> swapl:      Dc.b $20,$12                                   ;MOVE.L  (A2),D0
00030262 <AmiBlitz3.ab2@4633>             Dc.b $24,$91                                   ;MOVE.L  (A1),(A2)
00030264 <AmiBlitz3.ab2@4634>             Dc.b $22,$80                                   ;MOVE.L  D0,(A1)
00030266 <AmiBlitz3.ab2@4638> pulla1:     Dc.b $22,$5F                                   ;MOVEA.L (A7)+,A1
00030268 <AmiBlitz3.ab2@4641> srctype:    Ds.w 1
0003026C <AmiBlitz3.ab2@4646>   BSR.w excget
00030270 <AmiBlitz3.ab2@4647>   CMP.w #$2C,D0
00030274 <AmiBlitz3.ab2@4648>    BNE.w syntaxerr
0003027A <AmiBlitz3.ab2@4649>   MOVE.b D2,srctype
00030280 <AmiBlitz3.ab2@4650>   MOVE.w pusha2,D1
00030286 <AmiBlitz3.ab2@4651>   JSR writeword
0003028A <AmiBlitz3.ab2@4652>   BSR.w get1bytemain
0003028E <AmiBlitz3.ab2@4653>   BSR.w excget
00030294 <AmiBlitz3.ab2@4654>   CMP.b srctype,D2
00030298 <AmiBlitz3.ab2@4655>    BNE.w excerr2
0003029E <AmiBlitz3.ab2@4656>   MOVE.w pulla1,D1
000302A4 <AmiBlitz3.ab2@4657>    JSR writeword
000302A8 <AmiBlitz3.ab2@4658>   CMP.b #$2,D2
000302AC <AmiBlitz3.ab2@4659>    BCS.w JL_0_4B2A
000302B0 <AmiBlitz3.ab2@4660>    BEQ.w JL_0_4B1E
000302B4 <AmiBlitz3.ab2@4661>   LEA swapl(PC),A0
000302B8 <AmiBlitz3.ab2@4662>   LEA swaplf(PC),A1
000302BE <AmiBlitz3.ab2@4663> JMP pokecode
000302C2 <AmiBlitz3.ab2@4666>   LEA swapw(PC),A0
000302C6 <AmiBlitz3.ab2@4667>   LEA swapwf(PC),A1
000302CC <AmiBlitz3.ab2@4668> JMP pokecode
000302D0 <AmiBlitz3.ab2@4671>   LEA swapb(PC),A0
000302D4 <AmiBlitz3.ab2@4672>   LEA swapbf(PC),A1
000302DA <AmiBlitz3.ab2@4673> JMP pokecode
000302E0 <AmiBlitz3.ab2@4677>   JSR getparameter
000302E4 <AmiBlitz3.ab2@4678>   BSR.w JL_0_8E3C
000302E8 <AmiBlitz3.ab2@4679>   BSR.w calcvar
000302EC <AmiBlitz3.ab2@4680>   BTST #$E,D2
000302F0 <AmiBlitz3.ab2@4681>    BEQ.w JL_0_4B4E
000302F4 <AmiBlitz3.ab2@4682>   MOVE.b #$4,D2
000302F6 <AmiBlitz3.ab2@4685>   TST.b D2
000302FA <AmiBlitz3.ab2@4686>    BEQ.w excerr
000302FE <AmiBlitz3.ab2@4687>   BTST #$F,D2
00030302 <AmiBlitz3.ab2@4688>    BNE.w JL_0_4B6A
00030308 <AmiBlitz3.ab2@4689>   MOVE.w leaamp,D1
0003030E <AmiBlitz3.ab2@4690>    JSR pokewda5s
00030310 <AmiBlitz3.ab2@4691>   MOVE.w D3,D1
00030316 <AmiBlitz3.ab2@4692> JMP writeword
00030318 <AmiBlitz3.ab2@4695> RTS
0003031E <AmiBlitz3.ab2@4701>   MOVE.l mempool,a0
00030324 <AmiBlitz3.ab2@4702>   MOVEA.l _execbase,A6
00030328 <AmiBlitz3.ab2@4703> JMP _AllocPooled(a6)
0003032C <AmiBlitz3.ab2@4710>   MOVE.w #$BF00,D1
00030332 <AmiBlitz3.ab2@4711> JMP Atokejsr
00030336 <AmiBlitz3.ab2@4715>   CMP.w #-$7FFA,D0
0003033A <AmiBlitz3.ab2@4716>    BEQ.w popreturn
0003033E <AmiBlitz3.ab2@4717>   CMP.w #-$7FEA,D0
00030342 <AmiBlitz3.ab2@4718>    BEQ.w popnext2
00030346 <AmiBlitz3.ab2@4719>   CMP.w #-$7FF2,D0
0003034A <AmiBlitz3.ab2@4720>    BEQ.w popselect2
0003034E <AmiBlitz3.ab2@4721>   CMP.w #-$7FF5,D0
00030352 <AmiBlitz3.ab2@4722>    BEQ.w get1bytemain
00030356 <AmiBlitz3.ab2@4723>   CMP.w #-$7FF4,D0
0003035A <AmiBlitz3.ab2@4724>    BEQ.w get1bytemain
0003035E <AmiBlitz3.ab2@4725>   CMP.w #-$7FEC,D0
00030362 <AmiBlitz3.ab2@4726>    BEQ.w get1bytemain
00030366 <AmiBlitz3.ab2@4727>   CMP.w #-$7F45,D0
0003036A <AmiBlitz3.ab2@4728>    BEQ.w get1bytemain
0003036E <AmiBlitz3.ab2@4729> BRA.w syntaxerr
00030374 <AmiBlitz3.ab2@4732>   TST.b debugmode
00030378 <AmiBlitz3.ab2@4733>    BEQ.w popreturn__norerr
0003037C <AmiBlitz3.ab2@4734>   LEA popreturn__rfix(PC),A0
00030380 <AmiBlitz3.ab2@4735>   LEA popreturn__rfixf(PC),A1
00030386 <AmiBlitz3.ab2@4736>    JSR pokecode
0003038A <AmiBlitz3.ab2@4737>   MOVE.w #$C305,D1
00030390 <AmiBlitz3.ab2@4738>    JSR Atokejsr
00030394 <AmiBlitz3.ab2@4739>   MOVE.w popreturn__rfix2(PC),D1
0003039A <AmiBlitz3.ab2@4741>    JSR writeword
0003039E <AmiBlitz3.ab2@4742> BRA.w get1bytemain
000303A4 <AmiBlitz3.ab2@4746>   CMPI.w #$6753,$4(A7)                                     ;#"gS",4(A7)
000303A8 <AmiBlitz3.ab2@4747>   BEQ.w popreturn__rfix2
000303AE <AmiBlitz3.ab2@4750>   JSR $20000                                               ;reass
000303B0 <AmiBlitz3.ab2@4753>   ADDQ.w #6,A7
000303B4 <AmiBlitz3.ab2@4757>   MOVE.w popreturn__sfix(PC),D1
000303BA <AmiBlitz3.ab2@4758>   JSR writeword
000303BE <AmiBlitz3.ab2@4759> BRA.w get1bytemain
000303C0 <AmiBlitz3.ab2@4764>   Dc.b $58,$4F                                             ;ADDQ.W  #4,A7
000303C6 <AmiBlitz3.ab2@4769>   MOVE.l firstfor,D0
000303CA <AmiBlitz3.ab2@4770>    BEQ.w noforerr
000303CC <AmiBlitz3.ab2@4771>   MOVEA.l D0,A2
000303D0 <AmiBlitz3.ab2@4772>    BSR.w get1bytemain
000303D4 <AmiBlitz3.ab2@4773>   BSR.w popnext
000303DA <AmiBlitz3.ab2@4776>   TST.b debugmode
000303DE <AmiBlitz3.ab2@4777>    BEQ.w popnext3__ner
000303E4 <AmiBlitz3.ab2@4778>   MOVE.l nextfixw2,D1
000303EA <AmiBlitz3.ab2@4779>   CMPI.w #$3,$C(A2)
000303EE <AmiBlitz3.ab2@4780>    BCS.w writelong
000303F4 <AmiBlitz3.ab2@4781>   MOVE.l nextfixl2,D1
000303F8 <AmiBlitz3.ab2@4782> BRA.w writelong
000303FE <AmiBlitz3.ab2@4785>   CMPI.w #$3,$C(A2)
00030402 <AmiBlitz3.ab2@4786>    BCS.w popnext3__skip2
00030408 <AmiBlitz3.ab2@4787>   MOVE.l nextfixl,D1
0003040C <AmiBlitz3.ab2@4788> BRA.w writelong
00030412 <AmiBlitz3.ab2@4791>   MOVE.w nextfixw,D1
00030418 <AmiBlitz3.ab2@4792> JMP writeword
0003041C <AmiBlitz3.ab2@4796>   MOVE.w $C(A2),D0
00030422 <AmiBlitz3.ab2@4797>   TST.b debugmode
00030426 <AmiBlitz3.ab2@4798>    BEQ.w popnext__norunerr
0003042A <AmiBlitz3.ab2@4799>   MOVE.w #$C306,D1
0003042E <AmiBlitz3.ab2@4800>   CMP.w #$3,D0
00030432 <AmiBlitz3.ab2@4801>    BCS.w popnext__oktc
00030434 <AmiBlitz3.ab2@4802>   ADDQ.w #1,D1
00030436 <AmiBlitz3.ab2@4805>   MOVE.l A2,-(A7)
0003043C <AmiBlitz3.ab2@4806>   JSR Atokejsr
0003043E <AmiBlitz3.ab2@4807>   MOVEA.l (A7)+,A2
00030440 <AmiBlitz3.ab2@4810> RTS
00030446 <AmiBlitz3.ab2@4814>   MOVE.l firstsel,D0
0003044A <AmiBlitz3.ab2@4815>    BEQ.w eselerr
0003044C <AmiBlitz3.ab2@4816>   MOVEA.l D0,A2
00030450 <AmiBlitz3.ab2@4817>    BSR.w get1bytemain
00030454 <AmiBlitz3.ab2@4820>   MOVE.w $C(A2),D2
0003045A <AmiBlitz3.ab2@4821>   TST.b debugmode
0003045E <AmiBlitz3.ab2@4822>    BEQ.w popselect__norerr
00030462 <AmiBlitz3.ab2@4823>   MOVE.w #$C313,D1
00030466 <AmiBlitz3.ab2@4824>   CMP.w #$3,D2
0003046A <AmiBlitz3.ab2@4825>    BCS.w popselect__chkit
0003046C <AmiBlitz3.ab2@4826>   ADDQ.w #1,D1
00030472 <AmiBlitz3.ab2@4829>   JSR Atokejsr                                             ;make sure next thing on stack
00030474 <AmiBlitz3.ab2@4833>   MOVEQ.l #$02,D1
00030478 <AmiBlitz3.ab2@4834>   CMP.w #$3,D2
0003047C <AmiBlitz3.ab2@4835>    BCS.w popselect__doit
0003047E <AmiBlitz3.ab2@4836>   MOVEQ.l #$04,D1
00030482 <AmiBlitz3.ab2@4837>   CMP.w #$7,D2
00030486 <AmiBlitz3.ab2@4838>    BCS.w popselect__doit
0003048C <AmiBlitz3.ab2@4839>   LEA endselstr,A0
00030492 <AmiBlitz3.ab2@4840>   LEA endselstrf,A1
00030498 <AmiBlitz3.ab2@4841>   TST.b debugmode
0003049C <AmiBlitz3.ab2@4842>    BEQ.w popselect__norerr3
000304A2 <AmiBlitz3.ab2@4843>   LEA endselstrf2,A1
000304A8 <AmiBlitz3.ab2@4846>   JSR pokecode
000304AC <AmiBlitz3.ab2@4847>   MOVE.w #$C003,D1                                         ;global freemem
000304B2 <AmiBlitz3.ab2@4848> JMP Atokejsr
000304B8 <AmiBlitz3.ab2@4851>   TST.b debugmode
000304BC <AmiBlitz3.ab2@4852>    BEQ.w popselect__norerr2
000304BE <AmiBlitz3.ab2@4853>   ADDQ.w #2,D1                                             ;for the "sE"
000304C0 <AmiBlitz3.ab2@4856>   LSL.w #8,D1
000304C2 <AmiBlitz3.ab2@4857>   LSL.w #1,D1
000304C8 <AmiBlitz3.ab2@4858>   OR.w endsel,D1
000304CC <AmiBlitz3.ab2@4859> BRA.w writeword
000304D0 <AmiBlitz3.ab2@4862> firstrep:    Ds.l 1
000304D4 <AmiBlitz3.ab2@4863> replineat:   Ds.l 1
000304DA <AmiBlitz3.ab2@4872>   CLR.l fp0addr
000304E4 <AmiBlitz3.ab2@4873>   MOVE.l linenumat,replineat
000304E6 <AmiBlitz3.ab2@4874>   MOVEQ.l #$08,D0
000304EC <AmiBlitz3.ab2@4875>   MOVEA.l _execbase,A6
000304F2 <AmiBlitz3.ab2@4876>   MOVE.l mempool,a0
000304F6 <AmiBlitz3.ab2@4877>   JSR _AllocPooled(a6)
000304F8 <AmiBlitz3.ab2@4879>   MOVEA.l D0,A0
000304FC <AmiBlitz3.ab2@4880>   MOVE.l firstrep(PC),(A0)
00030502 <AmiBlitz3.ab2@4881>   MOVE.l A0,firstrep
0003050A <AmiBlitz3.ab2@4882>   MOVE.l destpointer,$4(A0)
0003050C <AmiBlitz3.ab2@4883> RTS
00030512 <AmiBlitz3.ab2@4886> str_temp:  Ds.w 3                                            ;infochk  ds.b 6 org source
00030516 <AmiBlitz3.ab2@4889>   LEA str_temp(PC),A1
00030518 <AmiBlitz3.ab2@4890>   CLR.w (A1)
0003051C <AmiBlitz3.ab2@4891>   CLR.l $2(A1)
0003051E <AmiBlitz3.ab2@4894>   MOVEQ.l #$04,D0
00030522 <AmiBlitz3.ab2@4897>     MOVE.b $1(A1),(A1)+
00030526 <AmiBlitz3.ab2@4898>   DBF D0,check_for_infoextention__loop
0003052A <AmiBlitz3.ab2@4903>   LEA str_temp(PC),A1
0003052C <AmiBlitz3.ab2@4904>   MOVE.b (A0),D0
00030530 <AmiBlitz3.ab2@4905>   ORI.b #$20,D0
00030534 <AmiBlitz3.ab2@4906>   MOVE.b D0,$5(A1)
00030536 <AmiBlitz3.ab2@4907>   TST.b (A0)+
0003053A <AmiBlitz3.ab2@4908>    BNE.w check_for_infoextention__loop2
0003053E <AmiBlitz3.ab2@4909>   CMPI.w #$2E69,(A1)+                                      ;".i"
00030542 <AmiBlitz3.ab2@4910>    BNE.w check_for_infoextention__no
00030548 <AmiBlitz3.ab2@4911>   CMPI.l #$6E666F20,(A1)                                   ;"nfo "
0003054A <AmiBlitz3.ab2@4914> RTS
0003054E <AmiBlitz3.ab2@4918>   BPL.w gettokeps__evaltoke
00030550 <AmiBlitz3.ab2@4919>   MOVE.w D0,D1
00030554 <AmiBlitz3.ab2@4920>   ANDI.w #$7F80,D1
00030558 <AmiBlitz3.ab2@4921>    BEQ.w tokeerr
0003055C <AmiBlitz3.ab2@4922>   BCLR #$F,D0
0003055E <AmiBlitz3.ab2@4923>   MOVE.w D0,D4                                             ;got toke number
00030562 <AmiBlitz3.ab2@4924>   BSR.w get1bytemain
00030566 <AmiBlitz3.ab2@4925> BRA.w gettokeps__gotnum
0003056C <AmiBlitz3.ab2@4928>   JSR JL_0_BF6A
00030572 <AmiBlitz3.ab2@4929>   CMP.l #MaxWord,D3
00030576 <AmiBlitz3.ab2@4930>    BHI.w tokeerr
00030578 <AmiBlitz3.ab2@4931>   TST.w D6
0003057C <AmiBlitz3.ab2@4932>    BNE.w tokeerr
0003057E <AmiBlitz3.ab2@4933>   MOVE.w D3,D4
00030580 <AmiBlitz3.ab2@4936>   MOVEQ.l #$00,D5
00030584 <AmiBlitz3.ab2@4937>   CMP.w #$2C,D0
00030588 <AmiBlitz3.ab2@4938>    BNE.w gettokeps__gotfrom
0003058A <AmiBlitz3.ab2@4939>   MOVE.w D4,-(A7)
00030590 <AmiBlitz3.ab2@4940>    JSR AJL_0_BF6E
00030596 <AmiBlitz3.ab2@4941>   CMP.l #MaxWord,D3
0003059A <AmiBlitz3.ab2@4942>    BHI.w tokeerr
0003059C <AmiBlitz3.ab2@4943>   TST.w D6
000305A0 <AmiBlitz3.ab2@4944>    BNE.w tokeerr
000305A2 <AmiBlitz3.ab2@4945>   MOVE.w D3,D5
000305A4 <AmiBlitz3.ab2@4946>   MOVE.w (A7)+,D4
000305A6 <AmiBlitz3.ab2@4949> RTS                                                        ;d4=toke, d5=form
000305A8 <AmiBlitz3.ab2@4953>   TST.w D0
000305AC <AmiBlitz3.ab2@4954>    BSR.w gettokeps
000305B0 <AmiBlitz3.ab2@4955>   MOVE.w #$4EB9,D1
000305B4 <AmiBlitz3.ab2@4956>   BSR.w writeword
000305B8 <AmiBlitz3.ab2@4957>   BSR.w addoff
000305BA <AmiBlitz3.ab2@4958>   MOVE.w D5,D1
000305BE <AmiBlitz3.ab2@4959>   ORI.w #$8000,D1                                          ;Toke of Amiga type.
000305C0 <AmiBlitz3.ab2@4960>   SWAP D1
000305C2 <AmiBlitz3.ab2@4961>   MOVE.w D4,D1
000305C6 <AmiBlitz3.ab2@4962> BRA.w writelong
000305C8 <AmiBlitz3.ab2@4966>   TST.w D0
000305CC <AmiBlitz3.ab2@4967>    BSR.w gettokeps
000305D0 <AmiBlitz3.ab2@4968>   MOVE.w #$4EB9,D1
000305D4 <AmiBlitz3.ab2@4969>   BSR.w writeword
000305D8 <AmiBlitz3.ab2@4970>   BSR.w addoff
000305DA <AmiBlitz3.ab2@4971>   MOVE.w D5,D1
000305DE <AmiBlitz3.ab2@4972>   ORI.w #$C000,D1                                          ;Toke of Blitz type.
000305E0 <AmiBlitz3.ab2@4973>   SWAP D1
000305E2 <AmiBlitz3.ab2@4974>   MOVE.w D4,D1
000305E6 <AmiBlitz3.ab2@4975> BRA.w writelong
000305EC <AmiBlitz3.ab2@4979>   JSR JL_0_BF6A
000305F2 <AmiBlitz3.ab2@4980>   CMP.l #$10000,D3
000305F6 <AmiBlitz3.ab2@4981>    BCC.w tokeerr
000305F8 <AmiBlitz3.ab2@4982>   MOVE.w D3,D1
000305FE <AmiBlitz3.ab2@4983> JMP Atokejsr
00030602 <AmiBlitz3.ab2@4987>   BSR.w gettokeps
00030606 <AmiBlitz3.ab2@4988>   MOVE.w #$4EB9,D1
0003060A <AmiBlitz3.ab2@4989>   BSR.w writeword
00030610 <AmiBlitz3.ab2@4990>   MOVE.l destpointer,D3
00030618 <AmiBlitz3.ab2@4991>   BTST #$7,blitzmode
0003061C <AmiBlitz3.ab2@4992>    BEQ.w do_TokeJsr__inamiga
00030620 <AmiBlitz3.ab2@4993>   BSET #$E,D5
00030624 <AmiBlitz3.ab2@4996>   BSR.w JL_0_6E86
00030628 <AmiBlitz3.ab2@4997>   BSR.w addoff
0003062C <AmiBlitz3.ab2@4998> BRA.w writelong
00030630 <AmiBlitz3.ab2@5002>   BEQ.w do_VWait__zero
00030632 <AmiBlitz3.ab2@5003>   MOVEQ.l #$02,D2                                          ;get a word
00030638 <AmiBlitz3.ab2@5005>   JSR bakeval
0003063C <AmiBlitz3.ab2@5006>   MOVE.w fvwait(PC),D1
00030640 <AmiBlitz3.ab2@5007> BRA.w do_VWait__vcont
00030644 <AmiBlitz3.ab2@5010>   MOVE.w #$7000,D1                                         ;moveq #0,d0
00030648 <AmiBlitz3.ab2@5013>   BSR.w writeword
0003064C <AmiBlitz3.ab2@5014>   MOVE.w #$C104,D1
00030652 <AmiBlitz3.ab2@5015> JMP Atokejsr
00030654 <AmiBlitz3.ab2@5019>   SUBQ.w #1,D0
0003065A <AmiBlitz3.ab2@5022>   Dc.w $3b7c,$ffff,0                                       ;move.w #$FFFF,$0(A5) ;noopt
0003065E <AmiBlitz3.ab2@5025>   Dc.l $426d0001                                           ;clr.w $0(A5)
00030662 <AmiBlitz3.ab2@5029>   MOVE.b debugmode(PC),D1
00030666 <AmiBlitz3.ab2@5030>   BEQ.b debugmode_codelabel__skip
0003066A <AmiBlitz3.ab2@5031>   MOVE.w #$D500,D1
00030670 <AmiBlitz3.ab2@5032> JMP Atokejsr
00030672 <AmiBlitz3.ab2@5035> RTS
0003067A <AmiBlitz3.ab2@5039>   BSET #$0,blitzmode
00030682 <AmiBlitz3.ab2@5040>   BSET #$7,blitzmode
00030686 <AmiBlitz3.ab2@5041>   MOVE.w #$C200,D1
0003068C <AmiBlitz3.ab2@5042>   JSR Atokejsr
00030692 <AmiBlitz3.ab2@5043>   TST.b debugmode
00030696 <AmiBlitz3.ab2@5044>    BEQ.w do_BLITZ__done
0003069A <AmiBlitz3.ab2@5045>   MOVE.w cgoblitz(PC),D1
0003069E <AmiBlitz3.ab2@5046>   BSR.w writeword
000306A0 <AmiBlitz3.ab2@5047>   MOVEQ.l #-$01,D1
000306A4 <AmiBlitz3.ab2@5048>   BSR.w writeword
000306AA <AmiBlitz3.ab2@5049>   JSR getbbase
000306AE <AmiBlitz3.ab2@5050>   BSR.w writeword
000306B2 <AmiBlitz3.ab2@5053> BRA.w debugmode_codelabel
000306B6 <AmiBlitz3.ab2@5057>   MOVE.w #$C201,D1
000306BA <AmiBlitz3.ab2@5058> BRA.w do_AMIGA__toamode
000306BE <AmiBlitz3.ab2@5062>   MOVE.W  #$C202,D1
000306C6 <AmiBlitz3.ab2@5065>   BSET #$0,blitzmode
000306CE <AmiBlitz3.ab2@5066>   BCLR #$7,blitzmode
000306D4 <AmiBlitz3.ab2@5067>   JSR Atokejsr
000306DA <AmiBlitz3.ab2@5068>   TST.b debugmode
000306DE <AmiBlitz3.ab2@5069>    BEQ.w do_AMIGA__done
000306E2 <AmiBlitz3.ab2@5070>   MOVE.w cgoamiga(PC),D1
000306E6 <AmiBlitz3.ab2@5071>   BSR.w writeword
000306EC <AmiBlitz3.ab2@5072>   JSR getbbase
000306F0 <AmiBlitz3.ab2@5073>   BSR.w writeword
000306F4 <AmiBlitz3.ab2@5076> BRA.w debugmode_codelabel
000306F8 <AmiBlitz3.ab2@5080>   MOVEM.l D2-D7/A2-A4,-(A7)
000306FC <AmiBlitz3.ab2@5083>   MOVEM.l (A7)+,D2-D7/A2-A4
00030702 <AmiBlitz3.ab2@5087>   JSR JL_0_BF6A
00030708 <AmiBlitz3.ab2@5088>   CMP.l #$E,D3
0003070C <AmiBlitz3.ab2@5089>    BCC.w interr4
00030710 <AmiBlitz3.ab2@5090>   MOVE.w #$7000,D1
00030712 <AmiBlitz3.ab2@5091>   OR.w D3,D1
00030716 <AmiBlitz3.ab2@5092>   BSR.w writeword
0003071A <AmiBlitz3.ab2@5093>   MOVE.w #$C101,D1
00030720 <AmiBlitz3.ab2@5094> JMP Atokejsr                                               ;clear the interupt
00030722 <AmiBlitz3.ab2@5097> inerr:       Ds.w 1                                        ;flag - in error trap mode
00030726 <AmiBlitz3.ab2@5098> errjmp:      Ds.l 1                                        ;where err jump is
0003072A <AmiBlitz3.ab2@5099> errcode:     Ds.l 1
0003072E <AmiBlitz3.ab2@5103>   MOVE.W  #$D202,D1
00030734 <AmiBlitz3.ab2@5104> JMP Atokejsr                                               ;BRA.W Atokejsr
00030738 <AmiBlitz3.ab2@5108>   MOVE.w inerr(PC),D1
0003073C <AmiBlitz3.ab2@5109>    BEQ.w errerr3
00030742 <AmiBlitz3.ab2@5110>   CLR.w inerr
00030748 <AmiBlitz3.ab2@5111>   MOVE.w dontwrite,D1
0003074C <AmiBlitz3.ab2@5112>    BNE.w doendseterr__skip
00030750 <AmiBlitz3.ab2@5113>   MOVEA.l errjmp(PC),A0
00030756 <AmiBlitz3.ab2@5114>   MOVE.l destpointer,(A0)
0003075A <AmiBlitz3.ab2@5117> BRA.w get1bytemain
0003075E <AmiBlitz3.ab2@5121>   MOVE.w #$D205,D1
00030764 <AmiBlitz3.ab2@5122> JMP Atokejsr
0003076A <AmiBlitz3.ab2@5126>   MOVE.w proceduremode,D1
0003076E <AmiBlitz3.ab2@5127>    BNE.w errerr1
00030772 <AmiBlitz3.ab2@5128>   MOVE.w inerr(PC),D1
00030776 <AmiBlitz3.ab2@5129>    BNE.w errerr2
0003077C <AmiBlitz3.ab2@5130>   LEA inerr,a0
0003077E <AmiBlitz3.ab2@5131>   NOT.w (a0)                                               ;reass
00030782 <AmiBlitz3.ab2@5132>   MOVE.w #$203C,D1                                         ;move.l #x,d0
00030786 <AmiBlitz3.ab2@5133>   BSR.w writeword
00030790 <AmiBlitz3.ab2@5134>   MOVE.l destpointer,errcode
00030794 <AmiBlitz3.ab2@5135>   BSR.w addoff
00030798 <AmiBlitz3.ab2@5136>   BSR.w writelong
0003079C <AmiBlitz3.ab2@5137>   MOVE.w #$D201,D1
000307A2 <AmiBlitz3.ab2@5138>   JSR Atokejsr
000307A6 <AmiBlitz3.ab2@5139>   MOVE.w #$4EF9,D1                                         ;JMP
000307AA <AmiBlitz3.ab2@5140>   BSR.w writeword
000307B4 <AmiBlitz3.ab2@5141>   MOVE.l destpointer,errjmp
000307B8 <AmiBlitz3.ab2@5142>   BSR.w addoff
000307BC <AmiBlitz3.ab2@5143>   BSR.w writelong
000307C2 <AmiBlitz3.ab2@5144>   MOVE.w dontwrite,D1
000307C6 <AmiBlitz3.ab2@5145>    BNE.w do_SetErr__skip
000307CA <AmiBlitz3.ab2@5146>   MOVEA.l errcode(PC),A0
000307D0 <AmiBlitz3.ab2@5147>   MOVE.l destpointer,(A0)
000307D2 <AmiBlitz3.ab2@5150> RTS
000307D6 <AmiBlitz3.ab2@5153> intlineat:  Ds.l 1
000307D8 <AmiBlitz3.ab2@5157>   MOVEQ.l #-$01,D1                                        ;type - need new string space
000307DC <AmiBlitz3.ab2@5158>   BSR.w errchx
000307E2 <AmiBlitz3.ab2@5159>   MOVE.w D1,intstring
000307EC <AmiBlitz3.ab2@5160>   MOVE.l linenumat,intlineat
000307F2 <AmiBlitz3.ab2@5161>   JSR JL_0_BF6A                                           ;get constant - int level
000307F8 <AmiBlitz3.ab2@5162>   CMP.l #$E,D3
000307FC <AmiBlitz3.ab2@5163>    BCC.w interr4
00030802 <AmiBlitz3.ab2@5164>   ST intsused
00030808 <AmiBlitz3.ab2@5165>   MOVE.w D3,intlevel
0003080C <AmiBlitz3.ab2@5166>   MOVE.w #$7000,D1
0003080E <AmiBlitz3.ab2@5167>   OR.w D3,D1                                              
00030812 <AmiBlitz3.ab2@5168>   BSR.w writeword                                         ;moveq #x,d0
00030816 <AmiBlitz3.ab2@5169>   MOVE.w #$223C,D1                                        ;move.l #x,d1
0003081A <AmiBlitz3.ab2@5170>   BSR.w writeword
0003081E <AmiBlitz3.ab2@5171>   BSR.w addoff
00030824 <AmiBlitz3.ab2@5172>   MOVE.l destpointer,-(A7)
00030828 <AmiBlitz3.ab2@5173>   BSR.w writelong
0003082C <AmiBlitz3.ab2@5174>   MOVE.w #$C100,D1
00030832 <AmiBlitz3.ab2@5175>   JSR Atokejsr
00030836 <AmiBlitz3.ab2@5176>   MOVE.w #$4EF9,D1                                        ;jmp
0003083A <AmiBlitz3.ab2@5177>   BSR.w writeword
0003083E <AmiBlitz3.ab2@5178>   BSR.w addoff
00030848 <AmiBlitz3.ab2@5179>   MOVE.l destpointer,intjmpat
0003084C <AmiBlitz3.ab2@5180>   BSR.w writelong
0003084E <AmiBlitz3.ab2@5181>   MOVEA.l (A7)+,A0
00030854 <AmiBlitz3.ab2@5182>   MOVE.w dontwrite,D1
00030858 <AmiBlitz3.ab2@5183>   BNE.w do_SetInt__dontpoke
0003085E <AmiBlitz3.ab2@5184>   MOVE.l destpointer,(A0)
00030862 <AmiBlitz3.ab2@5187>   MOVE.l intstart0(PC),D1
00030866 <AmiBlitz3.ab2@5188>   BSR.w writelong
0003086C <AmiBlitz3.ab2@5189>   TST.b debugmode
00030870 <AmiBlitz3.ab2@5190>    BEQ.w do_SetInt__norerr
00030872 <AmiBlitz3.ab2@5194>   MOVEQ.l #$02,D1
00030876 <AmiBlitz3.ab2@5195>   BSR.w writetrap
0003087A <AmiBlitz3.ab2@5196>   BSR.w addoff
00030884 <AmiBlitz3.ab2@5197>   MOVE.l destpointer,intcleanat
00030888 <AmiBlitz3.ab2@5198>   BSR.w writelong
0003088E <AmiBlitz3.ab2@5199>   MOVE.w intlevel,D1
00030892 <AmiBlitz3.ab2@5200>   BSR.w writeword
00030896 <AmiBlitz3.ab2@5201>   MOVE.w #$C30B,D1                                         ;disable stack checks
0003089C <AmiBlitz3.ab2@5202>   JSR Atokejsr
000308A0 <AmiBlitz3.ab2@5205>   MOVE.w #$FED3,D1
000308A4 <AmiBlitz3.ab2@5206>   BSR.w uselib
000308A8 <AmiBlitz3.ab2@5207>   MOVE.w #$C102,D1
000308AE <AmiBlitz3.ab2@5208>   JSR Atokejsr
000308B6 <AmiBlitz3.ab2@5209>   MOVE.w #-1,lasta6
000308C0 <AmiBlitz3.ab2@5210>   MOVE.l linenumat,intline
000308C2 <AmiBlitz3.ab2@5211> RTS
000308C4 <AmiBlitz3.ab2@5215>             Ds.w 1                                         ;??looks like obsolved data??
000308C8 <AmiBlitz3.ab2@5217> intdata1:   Ds.l 1                                         ;where in data1 a5 is being kept
000308CC <AmiBlitz3.ab2@5219> intjmpat:   Ds.l 1
000308D0 <AmiBlitz3.ab2@5220> intline:    Ds.l 1
000308D2 <AmiBlitz3.ab2@5221> intstring:  Ds.w 1                                         ;flag 0 = no setint
000308D4 <AmiBlitz3.ab2@5224> intlevel:   Ds.w 1
000308D8 <AmiBlitz3.ab2@5225> intcleanat: Ds.l 1
000308DC <AmiBlitz3.ab2@5226> ret15add:   Ds.l 1
000308DE <AmiBlitz3.ab2@5227> ret15cc:    Ds.w 1
000308E6 <AmiBlitz3.ab2@5231>   ADDI.l #$12,$2(A7)
000308EE <AmiBlitz3.ab2@5232>   MOVE.l $2(A7),ret15add
000308F4 <AmiBlitz3.ab2@5233>   MOVE.w (A7),ret15cc
000308FC <AmiBlitz3.ab2@5234>   MOVE.l #directdo,$2(A7)
000308FE <AmiBlitz3.ab2@5235> RTE
00030902 <AmiBlitz3.ab2@5244>   MOVE.l ret15add(PC),-(A7)
00030906 <AmiBlitz3.ab2@5245>   MOVE.w ret15cc(PC),-(A7)                                 ;15*4
0003090A <AmiBlitz3.ab2@5246>   MOVEM.l D0-D7/A0-A6,-(A7)
00030914 <AmiBlitz3.ab2@5247>   MOVE.l destbufferend,trap15temp                          ;store high buff addr
0003091E <AmiBlitz3.ab2@5248>   MOVE.l destbufferstart,trap15temp2
00030928 <AmiBlitz3.ab2@5249>   MOVE.l libend,templibend
00030932 <AmiBlitz3.ab2@5250>   MOVE.l data1start,tempdata1start
00030938 <AmiBlitz3.ab2@5251>   CLR.l hunkoffsetcounter
0003093E <AmiBlitz3.ab2@5253>   MOVE.l directbuffer,a0
00030944 <AmiBlitz3.ab2@5257>   MOVE.l a0,destbufferstart
0003094A <AmiBlitz3.ab2@5258>   ADD.l #3900,a0
00030950 <AmiBlitz3.ab2@5259>   MOVE.l a0,destbufferend
00030956 <AmiBlitz3.ab2@5260>   TST.b exdebug
0003095A <AmiBlitz3.ab2@5261>   BEQ 'l1
00030960 <AmiBlitz3.ab2@5262>   MOVE.l a0,libend
00030966 <AmiBlitz3.ab2@5263>   ADD.l #4000,a0
0003096C <AmiBlitz3.ab2@5264>   MOVE.l a0,data1start
00030976 <AmiBlitz3.ab2@5267>   MOVE.l #dircont,errcont
0003097C <AmiBlitz3.ab2@5268>   MOVE.l A7,errstack
00030984 <AmiBlitz3.ab2@5269>   MOVE.w #$FFFF,dirmode
00030988 <AmiBlitz3.ab2@5271>     MOVEA.l ret15add(PC),A1
0003098E <AmiBlitz3.ab2@5272>     MOVE.w -(A1),blitzmode
00030990 <AmiBlitz3.ab2@5273>     CLR.l -(A1)
00030996 <AmiBlitz3.ab2@5274>     MOVE.l -(A1),firstglob
0003099C <AmiBlitz3.ab2@5275>     MOVE.l -(A1),firstlocal
000309A2 <AmiBlitz3.ab2@5277>   CLR.w proceduremode
000309A8 <AmiBlitz3.ab2@5278>   MOVE.l firstglob,D0
000309AE <AmiBlitz3.ab2@5279>   OR.l firstlocal,D0
000309B2 <AmiBlitz3.ab2@5280>   BEQ.b directdo__skip
000309B8 <AmiBlitz3.ab2@5281>   NOT.w proceduremode
000309BA <AmiBlitz3.ab2@5284>   MOVEA.l -(A1),A0                                         ;address of string
000309BC <AmiBlitz3.ab2@5288>   MOVE.l A0,-(A7)
000309FA <AmiBlitz3.ab2@5291>   !ComData_GetL{comFunc_DebugTrap,A1}
000309FC <AmiBlitz3.ab2@5294>   JSR (A1)                                                 ;tokenise line.....
000309FE <AmiBlitz3.ab2@5295>   MOVEA.l (A7)+,A5
00030A08 <AmiBlitz3.ab2@5296>   MOVE.l directbuffer,destpointer
00030A0E <AmiBlitz3.ab2@5297>   TST.b exdebug
00030A12 <AmiBlitz3.ab2@5298>   BEQ 'noexdebug
00030A14 <AmiBlitz3.ab2@5299>   MOVE.l a5,a0
00030A1A <AmiBlitz3.ab2@5300>   MOVE.l #200,d0
00030A20 <AmiBlitz3.ab2@5303>     MOVE.b 0(a0,d0.l),8(a0,d0.l)
00030A24 <AmiBlitz3.ab2@5304>   DBF d0,'l1
00030A2A <AmiBlitz3.ab2@5309>   MOVE.l destpointer,a0
00030A2E <AmiBlitz3.ab2@5310>   MOVE.w #$207c,(a0)+
00030A30 <AmiBlitz3.ab2@5311>   MOVE.l a5,d0
00030A36 <AmiBlitz3.ab2@5312>   ADD.l #$206,d0                                           ;constant from debuglib
00030A38 <AmiBlitz3.ab2@5313>   MOVE.l d0,(a0)+
00030A3E <AmiBlitz3.ab2@5314>   MOVE.l a0,destpointer
00030A40 <AmiBlitz3.ab2@5315>   MOVE.l a5,a0
00030A44 <AmiBlitz3.ab2@5316>   MOVE.w #$8039,(a0)+                                      ;TokeJsr 164 (inputoutputlib) LSL 7+4
00030A4A <AmiBlitz3.ab2@5317>   MOVE.l #"$520",(a0)+
00030A4E <AmiBlitz3.ab2@5318>   MOVE.w #"4:",(a0)+
00030A54 <AmiBlitz3.ab2@5321>   CLR.w dontwrite
00030A5C <AmiBlitz3.ab2@5322>   MOVE.w #$FFFF,lasta6
00030A60 <AmiBlitz3.ab2@5323>   BSR.w compile_line                                        ;.....compile it
00030A66 <AmiBlitz3.ab2@5324>   TST.b exdebug
00030A6A <AmiBlitz3.ab2@5325>   BEQ 'noexdebug2
00030A70 <AmiBlitz3.ab2@5326>   JSR JL_0_6C76
00030A76 <AmiBlitz3.ab2@5329>   CLR.w proceduremode
00030A7A <AmiBlitz3.ab2@5330>   BSR.w errchx
00030A7E <AmiBlitz3.ab2@5331>   MOVE.w #$4EF9,D1
00030A82 <AmiBlitz3.ab2@5332>   BSR.w writeword                                          ;JMP
00030A86 <AmiBlitz3.ab2@5333>   MOVE.l ret15add(PC),D1
00030A8A <AmiBlitz3.ab2@5334>   BSR.w writelong                                          ;jmp to done
00030A90 <AmiBlitz3.ab2@5335>   MOVE.w dontwrite,D0
00030A94 <AmiBlitz3.ab2@5336>    BNE.w nodirmem
00030A9C <AmiBlitz3.ab2@5337>   MOVE.l directbuffer,$3E(A7)                              ;install code address
00030AA2 <AmiBlitz3.ab2@5340>   CLR.w dirmode
00030AA8 <AmiBlitz3.ab2@5341>   MOVE.w ret15cc(PC),$3C(A7)
00030AB2 <AmiBlitz3.ab2@5342>   MOVE.l trap15temp,destbufferend
00030ABC <AmiBlitz3.ab2@5343>   MOVE.l trap15temp2,destbufferstart
00030AC6 <AmiBlitz3.ab2@5344>   MOVE.l tempdata1start,data1start
00030AD0 <AmiBlitz3.ab2@5345>   MOVE.l templibend,libend
00030AD4 <AmiBlitz3.ab2@5346>   MOVEM.l (A7)+,D0-D7/A0-A6
00030AD8 <AmiBlitz3.ab2@5347>   BSR.w Aclearcache                                        ;selden used
00030ADA <AmiBlitz3.ab2@5348> RTR
00030ADE <AmiBlitz3.ab2@5351>   MOVEA.l ret15add(PC),A0
00030AE0 <AmiBlitz3.ab2@5352>   SUBQ.w #2,A0
00030AE2 <AmiBlitz3.ab2@5353>   MOVE.l D0,-(A0)
00030AE6 <AmiBlitz3.ab2@5354> BRA.w direxit
00030AEA <AmiBlitz3.ab2@5358>   MOVE.w $6(A3),D1
00030AEE <AmiBlitz3.ab2@5359>   BSR.w uselib                                             ;get lib for base address
00030AF2 <AmiBlitz3.ab2@5360>   MOVE.w $A(A1),-(A7)                                      ;libbase reg
00030AF4 <AmiBlitz3.ab2@5361>   ADDQ.w #8,A3
00030AF6 <AmiBlitz3.ab2@5362>   MOVE.w (A3)+,-(A7)                                       ;get offset for lib
00030AF8 <AmiBlitz3.ab2@5363>   MOVE.l A3,-(A7)
00030AFA <AmiBlitz3.ab2@5367>   MOVEQ.l #$00,D3
00030AFC <AmiBlitz3.ab2@5370>   MOVE.b (A3)+,D1
00030B00 <AmiBlitz3.ab2@5371>    BMI.w stamigalib__done
00030B02 <AmiBlitz3.ab2@5372>   MOVEQ.l #$03,D2
00030B04 <AmiBlitz3.ab2@5373>   ADDQ.w #1,D3
00030B08 <AmiBlitz3.ab2@5374>   MOVEM.l D3/A3,-(A7)
00030B0E <AmiBlitz3.ab2@5375>    JSR peval
00030B12 <AmiBlitz3.ab2@5376>   MOVEM.l (A7)+,D3/A3
00030B16 <AmiBlitz3.ab2@5377>   CMP.w #$2C,D0
00030B1A <AmiBlitz3.ab2@5378>    BEQ.w stamigalib__loop
00030B1C <AmiBlitz3.ab2@5379>   TST.b (A3)
00030B20 <AmiBlitz3.ab2@5380>    BPL.w syntaxerr
00030B22 <AmiBlitz3.ab2@5383>   MOVEA.l (A7)+,A3
00030B24 <AmiBlitz3.ab2@5384>   SUBQ.w #1,D3
00030B28 <AmiBlitz3.ab2@5385>    BPL.w stamigalib__toend
00030B2C <AmiBlitz3.ab2@5386>    BSR.w get1bytemain                                      ;no pars - get :
00030B30 <AmiBlitz3.ab2@5387> BRA.w stamigalib__nopars
00030B32 <AmiBlitz3.ab2@5390>   TST.b (A3)+                                              ;go to end of params
00030B36 <AmiBlitz3.ab2@5391>    BPL.w stamigalib__toend
00030B38 <AmiBlitz3.ab2@5392>   SUBQ.w #1,A3
00030B3A <AmiBlitz3.ab2@5395>    MOVEQ.l #$00,D1
00030B3C <AmiBlitz3.ab2@5396>    MOVE.b -(A3),D1
00030B40 <AmiBlitz3.ab2@5397>    BTST #$4,D1
00030B44 <AmiBlitz3.ab2@5398>     BNE.w stamigalib__addreg
00030B46 <AmiBlitz3.ab2@5399>    LSL.w #8,D1
00030B48 <AmiBlitz3.ab2@5400>    LSL.w #1,D1
00030B4C <AmiBlitz3.ab2@5401>    ORI.w #$201F,D1
00030B50 <AmiBlitz3.ab2@5402>  BRA.w stamigalib__gotit
00030B54 <AmiBlitz3.ab2@5405>    ANDI.w #$7,D1
00030B56 <AmiBlitz3.ab2@5406>    LSL.w #8,D1
00030B58 <AmiBlitz3.ab2@5407>    LSL.w #1,D1
00030B5C <AmiBlitz3.ab2@5408>    ORI.w #$205F,D1
00030B60 <AmiBlitz3.ab2@5411>     BSR.w writeword
00030B64 <AmiBlitz3.ab2@5412>   DBF D3,stamigalib__loop2
00030B6A <AmiBlitz3.ab2@5415>   MOVE.w (A7)+,libjsr+2
00030B70 <AmiBlitz3.ab2@5416>   MOVE.w (A7)+,libbase+2
00030B76 <AmiBlitz3.ab2@5417>   MOVE.l libbase,D1
00030B7A <AmiBlitz3.ab2@5418>    BSR.w writelong
00030B80 <AmiBlitz3.ab2@5419>   MOVE.l libjsr,D1
00030B84 <AmiBlitz3.ab2@5420> BRA.w writelong
00030B8A <AmiBlitz3.ab2@5424>   MOVE.l data1,D4
00030B90 <AmiBlitz3.ab2@5425>   SUB.l data1start,D4
00030B96 <AmiBlitz3.ab2@5426>   ADD.l #10000,d4
00030B9C <AmiBlitz3.ab2@5427>   MOVE.l libend,D3
00030BA2 <AmiBlitz3.ab2@5428>   SUB.l destbufferend,D3
00030BA8 <AmiBlitz3.ab2@5429>   ADD.l #40000,d3
00030BAE <AmiBlitz3.ab2@5430>   MOVE.l bigpc,D2
00030BB4 <AmiBlitz3.ab2@5431>   SUB.l destbufferstart,D2
00030BBA <AmiBlitz3.ab2@5432>   ADD.l #20000,d2
00030BC0 <AmiBlitz3.ab2@5433>   MOVE.l databuffer,D5
00030BC6 <AmiBlitz3.ab2@5434>   ADD.l #10000,D5
00030BCA <AmiBlitz3.ab2@5435> BRA newallox
00030BD0 <AmiBlitz3.ab2@5439>   MOVE.l objectbuffer,D2
00030BD2 <AmiBlitz3.ab2@5440>   LSR.l #1,D2
00030BD8 <AmiBlitz3.ab2@5441>   ADD.l objectbuffer,D2
00030BDE <AmiBlitz3.ab2@5442>   MOVE.l libsbuffer,D3
00030BE0 <AmiBlitz3.ab2@5443>   LSR.l #1,D3
00030BE6 <AmiBlitz3.ab2@5444>   ADD.l libsbuffer,D3
00030BEC <AmiBlitz3.ab2@5445>   MOVE.l systembuffer,D4
00030BEE <AmiBlitz3.ab2@5446>   LSR.l #1,D4
00030BF4 <AmiBlitz3.ab2@5447>   ADD.l systembuffer,D4
00030BFA <AmiBlitz3.ab2@5448>   MOVE.l databuffer,D5
00030BFC <AmiBlitz3.ab2@5449>   LSR.l #1,D5
00030C02 <AmiBlitz3.ab2@5450>   ADD.l databuffer,D5
00030C06 <AmiBlitz3.ab2@5451> BRA.w newallox
00030C0C <AmiBlitz3.ab2@5455>   MOVE.l bigpc,D2
00030C12 <AmiBlitz3.ab2@5456>   SUB.l destbufferstart,D2                                     ;size of object buffer
00030C18 <AmiBlitz3.ab2@5457>   SUB.l savefuncspace,d2
00030C1E <AmiBlitz3.ab2@5459>   TST.w debugversion
00030C22 <AmiBlitz3.ab2@5460>    BNE.b alloxadj__skip
00030C28 <AmiBlitz3.ab2@5461>   ADDI.l #$800,D2
00030C2E <AmiBlitz3.ab2@5464>   MOVE.l libend,D3
00030C34 <AmiBlitz3.ab2@5465>   SUB.l destbufferend,D3
00030C3A <AmiBlitz3.ab2@5467>   MOVE.l data1,D4
00030C40 <AmiBlitz3.ab2@5468>   SUB.l data1start,D4
00030C46 <AmiBlitz3.ab2@5470>   MOVE.l data2,D5
00030C4C <AmiBlitz3.ab2@5471>   SUB.l data2at,D5
00030C52 <AmiBlitz3.ab2@5473>   CLR.l morememadd
00030C56 <AmiBlitz3.ab2@5476>   BSR.w makeallox
00030C5A <AmiBlitz3.ab2@5477>   BNE.w newallox__done
00030C5E <AmiBlitz3.ab2@5478> BRA.w init_buffers
00030C60 <AmiBlitz3.ab2@5481> RTS
00030C66 <AmiBlitz3.ab2@5485>   MOVEA.l _execbase,A6
00030C6C <AmiBlitz3.ab2@5486>   MOVE.l objlen,D0
00030C70 <AmiBlitz3.ab2@5487>   BEQ.w freeallox__skip
00030C76 <AmiBlitz3.ab2@5488>   CLR.l objlen
00030C7C <AmiBlitz3.ab2@5489>   MOVEA.l destbufferstart,A1
00030C82 <AmiBlitz3.ab2@5490>   MOVE.l mempool,a0
00030C86 <AmiBlitz3.ab2@5491> JMP _FreeVec(A6)
00030C88 <AmiBlitz3.ab2@5494> RTS
00030C8E <AmiBlitz3.ab2@5498>   MOVE.l objectbuffer,D2
00030C94 <AmiBlitz3.ab2@5499>   MOVE.l libsbuffer,D3
00030C9A <AmiBlitz3.ab2@5500>   MOVE.l systembuffer,D4
00030CA0 <AmiBlitz3.ab2@5501>   MOVE.l databuffer,D5
00030CA8 <AmiBlitz3.ab2@5504>   MOVE.w #$FFFF,anyerrs
00030CAC <AmiBlitz3.ab2@5505>   BSR.w freeallox
00030CAE <AmiBlitz3.ab2@5509>   ADDQ.l #1,D2
00030CB2 <AmiBlitz3.ab2@5510>   BCLR #$0,D2
00030CB4 <AmiBlitz3.ab2@5511>   ADDQ.l #1,D3
00030CB8 <AmiBlitz3.ab2@5512>   BCLR #$0,D3
00030CBA <AmiBlitz3.ab2@5513>   ADDQ.l #1,D4
00030CBE <AmiBlitz3.ab2@5514>   BCLR #$0,D4
00030CC0 <AmiBlitz3.ab2@5515>   TST.l d5
00030CC4 <AmiBlitz3.ab2@5516>   BNE 'l1
00030CC6 <AmiBlitz3.ab2@5519>   ADDQ.l #1,D5
00030CCA <AmiBlitz3.ab2@5520>   BCLR #$0,D5
00030CCC <AmiBlitz3.ab2@5521>   MOVE.l D2,D0
00030CCE <AmiBlitz3.ab2@5522>   ADD.l D3,D0
00030CD0 <AmiBlitz3.ab2@5523>   ADD.l D4,D0
00030CD2 <AmiBlitz3.ab2@5524>   ADD.l D5,D0
00030CD8 <AmiBlitz3.ab2@5525>   ADD.l #moremem,d0
00030CDA <AmiBlitz3.ab2@5526>   MOVE.l D0,D6
00030CE0 <AmiBlitz3.ab2@5527>   MOVE.l #MemfPublic_MemfClear,D1
00030CE6 <AmiBlitz3.ab2@5528>   MOVE.l mempool,a0
00030CEC <AmiBlitz3.ab2@5529>   MOVEA.l _execbase,A6
00030CF0 <AmiBlitz3.ab2@5530>   JSR _AllocVec(a6)                                        ;alloc mem for objectbuffer
00030CF2 <AmiBlitz3.ab2@5532>   TST.l D0
00030CF6 <AmiBlitz3.ab2@5533>   BEQ.w exit_initbuffers
00030CFC <AmiBlitz3.ab2@5534>   MOVE.l D6,objlen
00030D02 <AmiBlitz3.ab2@5535>   MOVE.l D2,objectbuffer
00030D08 <AmiBlitz3.ab2@5536>   MOVE.l D3,libsbuffer
00030D0E <AmiBlitz3.ab2@5537>   MOVE.l D4,systembuffer
00030D14 <AmiBlitz3.ab2@5538>   MOVE.l D5,databuffer
00030D1A <AmiBlitz3.ab2@5539>   MOVE.l D0,destbufferstart
00030D4E <AmiBlitz3.ab2@5542>   !ComData_SetL{comPtr_DestBufferStart,D0}
00030D50 <AmiBlitz3.ab2@5543>   ADD.l D2,D0
00030D56 <AmiBlitz3.ab2@5544>   MOVE.l D0,destbufferend
00030D58 <AmiBlitz3.ab2@5545>   ADD.l D3,D0
00030D5E <AmiBlitz3.ab2@5546>   MOVE.l D0,data1start
00030D60 <AmiBlitz3.ab2@5547>   ADD.l D4,D0
00030D66 <AmiBlitz3.ab2@5548>   MOVE.l D0,data2at
00030D68 <AmiBlitz3.ab2@5549>   ADD.l D5,D0
00030D6E <AmiBlitz3.ab2@5550>   MOVE.l D0,allat
00030D70 <AmiBlitz3.ab2@5553> RTS
00030D74 <AmiBlitz3.ab2@5557>   Dc.b $00,$00,$00,$01                                     ;         1
00030D78 <AmiBlitz3.ab2@5558>   Dc.b $00,$00,$00,$0A                                     ;        10
00030D7C <AmiBlitz3.ab2@5559>   Dc.b $00,$00,$00,$64                                     ;       100
00030D80 <AmiBlitz3.ab2@5560>   Dc.b $00,$00,$03,$E8                                     ;      1000
00030D84 <AmiBlitz3.ab2@5561>   Dc.b $00,$00,$27,$10                                     ;     10000
00030D88 <AmiBlitz3.ab2@5562>   Dc.b $00,$01,$86,$A0                                     ;    100000
00030D8C <AmiBlitz3.ab2@5563>   Dc.b $00,$0F,$42,$40                                     ;   1000000
00030D90 <AmiBlitz3.ab2@5564>   Dc.b $00,$98,$96,$80                                     ;  10000000
00030D94 <AmiBlitz3.ab2@5565>   Dc.b $05,$F5,$E1,$00                                     ; 100000000
00030D98 <AmiBlitz3.ab2@5566>   Dc.b $3B,$9A,$CA,$00                                     ;1000000000
00030D9A <AmiBlitz3.ab2@5570>   MOVEQ.l #$00,D1                                          ;no zero printed
00030D9C <AmiBlitz3.ab2@5571>   MOVEQ.l #$24,D3                                          ; "$"
00030D9E <AmiBlitz3.ab2@5574>   MOVEQ.l #$30,D4                                          ; "0"
00030DA2 <AmiBlitz3.ab2@5577>     CMP.l divisors(PC,D3.W),D2
00030DA6 <AmiBlitz3.ab2@5578>     BCS.w makelong__skip
00030DAA <AmiBlitz3.ab2@5579>     SUB.l divisors(PC,D3.W),D2
00030DAC <AmiBlitz3.ab2@5580>     ADDQ.w #1,D4
00030DB0 <AmiBlitz3.ab2@5581> BRA.w makelong__loop2
00030DB4 <AmiBlitz3.ab2@5584>   CMP.b #"0",D4
00030DB8 <AmiBlitz3.ab2@5585>   BNE.w makelong__doit
00030DBA <AmiBlitz3.ab2@5586>   TST.w D1
00030DBE <AmiBlitz3.ab2@5587>   BEQ.w makelong__skip2
00030DC0 <AmiBlitz3.ab2@5590>   MOVE.b D4,(A0)+
00030DC2 <AmiBlitz3.ab2@5591>   MOVEQ.l #$01,D1
00030DC4 <AmiBlitz3.ab2@5594>   SUBQ.w #4,D3
00030DC8 <AmiBlitz3.ab2@5595>   BPL.w makelong__loop
00030DCA <AmiBlitz3.ab2@5596>   TST.w D1
00030DCE <AmiBlitz3.ab2@5597>   BNE.w makelong__skip3
00030DD2 <AmiBlitz3.ab2@5598>   MOVE.b #"0",(A0)+
00030DD4 <AmiBlitz3.ab2@5601>   CLR.b (A0)
00030DD6 <AmiBlitz3.ab2@5602> RTS
00030DF6 <AmiBlitz3.ab2@5605> str_residentrequester:  Dc.b "Name of Resident File to Create",0 : Even        ;restext org source
00030EB6 <AmiBlitz3.ab2@5606> str_residentpath:       Ds.l 48                                                ;respath org source
00030F76 <AmiBlitz3.ab2@5607> str_residentname:       Ds.l 48                                                ;resname org source
00030F7C <AmiBlitz3.ab2@5611>   MOVE.l macrobase,D0
00030F80 <AmiBlitz3.ab2@5612>    BNE.w create_residentfile
00030F86 <AmiBlitz3.ab2@5613>   MOVE.l newtype_string,D0
00030F8A <AmiBlitz3.ab2@5614>    BNE.w create_residentfile
00030F90 <AmiBlitz3.ab2@5615>   MOVEA.l labelbase,A2
00030F94 <AmiBlitz3.ab2@5618>     CMPA.w #$0,A2
00030F98 <AmiBlitz3.ab2@5619>      BEQ.w menu_createresidentfile__err
00030FA0 <AmiBlitz3.ab2@5620>     CMPI.l #$1,$4(A2)
00030FA4 <AmiBlitz3.ab2@5621>      BEQ.w create_residentfile
00030FA6 <AmiBlitz3.ab2@5622>     MOVEA.l (A2),A2
00030FAA <AmiBlitz3.ab2@5623> BRA.w menu_createresidentfile__loop
00030FD4 <AmiBlitz3.ab2@5626>   !basic
0003102A <AmiBlitz3.ab2@5627>     error{!TRANS{"There is no data to be stored in a resident file.\\nTry again to create the resident after one compile pass."}}
00031048 <AmiBlitz3.ab2@5628>   !asm
0003104A <AmiBlitz3.ab2@5629> RTS
00031088 <AmiBlitz3.ab2@5635>   !ComData_GetL{comFunc_ASLFileRequest,A3}
0003108E <AmiBlitz3.ab2@5636>   LEA str_residentrequester,A2
00031094 <AmiBlitz3.ab2@5637>   LEA str_residentpath,A0
0003109A <AmiBlitz3.ab2@5638>   LEA str_residentname,A1
000310C4 <AmiBlitz3.ab2@5639>   !basic
000310FC <AmiBlitz3.ab2@5640>     Poke$ ?str_residentpath,my_residentsdir$
00031128 <AmiBlitz3.ab2@5641>     Poke$ ?str_residentname,".res"
00031146 <AmiBlitz3.ab2@5642>   !asm
00031148 <AmiBlitz3.ab2@5645>   JSR (A3)
0003114C <AmiBlitz3.ab2@5647>   BEQ.w menu_createresidentfile__err
0003114E <AmiBlitz3.ab2@5650>   MOVE.l D0,D1
00031154 <AmiBlitz3.ab2@5651>   MOVE.l #HUNK_RELOC_8__MODE_NEWFILE,D2
00031158 <AmiBlitz3.ab2@5652>   MOVEA.l _dosbase(PC),A6
0003115C <AmiBlitz3.ab2@5653>   JSR _Open(A6)
0003115E <AmiBlitz3.ab2@5654>   MOVE.l D0,D7                                             ;handle
00031162 <AmiBlitz3.ab2@5655>   BEQ.w menu_createresidentfile__err
00031166 <AmiBlitz3.ab2@5656>   MOVEM.l d2-d7/a0-a6,-(a7)
0003116C <AmiBlitz3.ab2@5657>   LEA devo,a0
00031172 <AmiBlitz3.ab2@5658>   LEA ptr_parameterstore,a1
00031174 <AmiBlitz3.ab2@5661>     MOVE.b (a0)+,(a1)+
00031178 <AmiBlitz3.ab2@5662>   BNE 'l1
0003117A <AmiBlitz3.ab2@5663>   MOVEQ #13,d2
00031180 <AmiBlitz3.ab2@5664>   JSR findlabel2
00031184 <AmiBlitz3.ab2@5665>   BNE 'd
00031188 <AmiBlitz3.ab2@5666>   TST.l 8(a2)
0003118C <AmiBlitz3.ab2@5667>   BEQ 'd2
000311B6 <AmiBlitz3.ab2@5668>   !basic
0003120C <AmiBlitz3.ab2@5669>     error{!TRANS{"Cannot create Resident with develope debug 1"}}
0003122A <AmiBlitz3.ab2@5670>   !asm
0003122E <AmiBlitz3.ab2@5671>   MOVEM.l (a7)+,d2-d7/a0-a6
00031232 <AmiBlitz3.ab2@5672>   MOVEA.l _dosbase(PC),A6
00031234 <AmiBlitz3.ab2@5673>   MOVE.l d7,d1
00031238 <AmiBlitz3.ab2@5674>   JSR _Close(a6)
0003123C <AmiBlitz3.ab2@5675> BRA menu_createresidentfile__err
00031240 <AmiBlitz3.ab2@5679>   MOVEM.l (a7)+,d2-d7/a0-a6
00031244 <AmiBlitz3.ab2@5680>   BSR.w call_setpointerbusy
00031248 <AmiBlitz3.ab2@5682>   BSR.w AJL_0_7962
0003124A <AmiBlitz3.ab2@5683>   MOVE.l D7,D1
00031250 <AmiBlitz3.ab2@5684>   MOVE.l #tsthead,D2                                       ;header
00031252 <AmiBlitz3.ab2@5685>   MOVEQ.l #$20,D3
00031256 <AmiBlitz3.ab2@5686>   MOVEA.l _dosbase(PC),A6
0003125A <AmiBlitz3.ab2@5687>   JSR _Write(A6)
0003125C <AmiBlitz3.ab2@5688>   MOVEQ.l #$00,D6                                          ;offset from start of file!
00031260 <AmiBlitz3.ab2@5689>   BSR.w restypes
00031264 <AmiBlitz3.ab2@5690>   BSR.w resmacs
00031268 <AmiBlitz3.ab2@5691>   BSR.w resconsts
0003126A <AmiBlitz3.ab2@5692>   MOVE.l D6,D3
0003126C <AmiBlitz3.ab2@5693>   ADDQ.l #3,D3
00031272 <AmiBlitz3.ab2@5694>   ANDI.l #$FFFFFFFC,D3                                    ;long word align
00031274 <AmiBlitz3.ab2@5695>   MOVE.l D3,-(A7)
00031276 <AmiBlitz3.ab2@5696>   SUB.l D6,D3
0003127A <AmiBlitz3.ab2@5697>   BEQ.w menu_createresidentfile__noalign
00031280 <AmiBlitz3.ab2@5698>   MOVE.l #writelist,D2
00031282 <AmiBlitz3.ab2@5699>   MOVE.l D7,D1
00031288 <AmiBlitz3.ab2@5700>   MOVEA.l _dosbase,A6
0003128C <AmiBlitz3.ab2@5701>   JSR _Write(A6)
00031296 <AmiBlitz3.ab2@5704>    MOVE.l hunkoffsetcounter,tstsize3
0003129A <AmiBlitz3.ab2@5705>    BEQ.w menu_createresidentfile__skip2a
0003129C <AmiBlitz3.ab2@5706>   MOVE.l D7,D1
000312A2 <AmiBlitz3.ab2@5707>   MOVE.l #tstend,D2
000312A4 <AmiBlitz3.ab2@5708>   MOVEQ.l #$0C,D3
000312AA <AmiBlitz3.ab2@5709>   MOVEA.l _dosbase,A6
000312AE <AmiBlitz3.ab2@5710>    JSR _Write(A6)
000312B4 <AmiBlitz3.ab2@5714>   MOVEA.l hunkoffsetbase,A2
000312B8 <AmiBlitz3.ab2@5717>   CMPA.w #$0,A2
000312BC <AmiBlitz3.ab2@5718>    BEQ.w menu_createresidentfile__skip2
000312C0 <AmiBlitz3.ab2@5719>   LEA $4(A2),A1
000312C2 <AmiBlitz3.ab2@5720>   MOVE.l D7,D1
000312C4 <AmiBlitz3.ab2@5721>   MOVE.l A1,D2
000312C6 <AmiBlitz3.ab2@5722>   MOVEQ.l #$04,D3
000312CC <AmiBlitz3.ab2@5723>   MOVEA.l _dosbase,A6
000312D0 <AmiBlitz3.ab2@5724>    JSR _Write(A6)
000312D2 <AmiBlitz3.ab2@5725>   MOVEA.l (A2),A2
000312D6 <AmiBlitz3.ab2@5726> BRA.w menu_createresidentfile__oloop
000312D8 <AmiBlitz3.ab2@5729>   MOVE.l D7,D1
000312DE <AmiBlitz3.ab2@5730>   MOVE.l #zero,D2
000312E0 <AmiBlitz3.ab2@5731>   MOVEQ.l #$04,D3
000312E6 <AmiBlitz3.ab2@5732>   MOVEA.l _dosbase,A6
000312EA <AmiBlitz3.ab2@5733>   JSR _Write(A6)
000312EC <AmiBlitz3.ab2@5736>   MOVE.l D7,D1
000312F2 <AmiBlitz3.ab2@5737>   MOVE.l #tstdone,D2
000312F4 <AmiBlitz3.ab2@5738>   MOVEQ.l #$04,D3
000312FA <AmiBlitz3.ab2@5739>   MOVEA.l _dosbase,A6
000312FE <AmiBlitz3.ab2@5740>    JSR _Write(A6)
00031300 <AmiBlitz3.ab2@5741>   MOVE.l (A7)+,D0
00031302 <AmiBlitz3.ab2@5742>   LSR.l #2,D0
00031308 <AmiBlitz3.ab2@5743>   MOVE.l D0,temp1
0003130A <AmiBlitz3.ab2@5744>   MOVE.l D7,D1
0003130C <AmiBlitz3.ab2@5745>   MOVEQ.l #$14,D2
0003130E <AmiBlitz3.ab2@5746>   MOVEQ.l #-$01,D3
00031312 <AmiBlitz3.ab2@5747>   JSR _Seek(A6)
00031314 <AmiBlitz3.ab2@5748>   MOVE.l D7,D1
0003131A <AmiBlitz3.ab2@5749>   MOVE.l #temp1,D2
0003131C <AmiBlitz3.ab2@5750>   MOVEQ.l #$04,D3
00031320 <AmiBlitz3.ab2@5751>    JSR _Write(A6)
00031322 <AmiBlitz3.ab2@5752>   MOVE.l D7,D1
00031324 <AmiBlitz3.ab2@5753>   MOVEQ.l #$1C,D2
00031326 <AmiBlitz3.ab2@5754>   MOVEQ.l #-$01,D3
0003132A <AmiBlitz3.ab2@5755>    JSR _Seek(A6)
0003132C <AmiBlitz3.ab2@5756>   MOVE.l D7,D1
00031332 <AmiBlitz3.ab2@5757>   MOVE.l #temp1,D2
00031334 <AmiBlitz3.ab2@5758>   MOVEQ.l #$04,D3
00031338 <AmiBlitz3.ab2@5759>    JSR _Write(A6)
0003133A <AmiBlitz3.ab2@5760>   MOVE.l D7,D1
0003133E <AmiBlitz3.ab2@5761>    JSR _Close(A6)
00031342 <AmiBlitz3.ab2@5762> BRA.w call_setpointernormal
00031344 <AmiBlitz3.ab2@5766>   ADDQ.w #5,D1
00031346 <AmiBlitz3.ab2@5767>   ADDQ.b #8,D0
0003134A <AmiBlitz3.ab2@5770>     CMPA.w #$0,A2
0003134E <AmiBlitz3.ab2@5771>     BEQ.w writelist__done
00031352 <AmiBlitz3.ab2@5772>      BSR.w writeitem
00031354 <AmiBlitz3.ab2@5773>     MOVEA.l (A2),A2
00031358 <AmiBlitz3.ab2@5774> BRA.w writelist__loop
0003135A <AmiBlitz3.ab2@5777> RTS
0003135C <AmiBlitz3.ab2@5780>   MOVEQ.l #$00,D3
00031360 <AmiBlitz3.ab2@5781>   MOVE.b $0(A2,D5.W),D3
00031362 <AmiBlitz3.ab2@5782>   ADDQ.w #1,D3
00031366 <AmiBlitz3.ab2@5783>   BCLR #$0,D3                                              ;word align
00031368 <AmiBlitz3.ab2@5784>   MOVE.l (A2),-(A7)
0003136C <AmiBlitz3.ab2@5785>    BEQ.w writeitem__skip
00031370 <AmiBlitz3.ab2@5786>    BSR.w resoff
00031372 <AmiBlitz3.ab2@5787>   ADD.l D3,D6
00031374 <AmiBlitz3.ab2@5788>   MOVE.l D6,(A2)
00031376 <AmiBlitz3.ab2@5789>   SUB.l D3,D6
00031378 <AmiBlitz3.ab2@5792>    ADD.l D3,D6
0003137A <AmiBlitz3.ab2@5793>   MOVE.l A2,D2
0003137C <AmiBlitz3.ab2@5794>   MOVE.l D7,D1
00031382 <AmiBlitz3.ab2@5795>   MOVEA.l _dosbase,A6
00031386 <AmiBlitz3.ab2@5796>    JSR _Write(A6)
00031388 <AmiBlitz3.ab2@5797>   MOVE.l (A7)+,(A2)
0003138A <AmiBlitz3.ab2@5798> RTS
0003138C <AmiBlitz3.ab2@5801>   MOVE.l D6,D2
00031390 <AmiBlitz3.ab2@5802> BRA.w addhunkoffset
00031394 <AmiBlitz3.ab2@5806>     CMPA.w #$0,A2
00031398 <AmiBlitz3.ab2@5807>      BEQ.w writeoffs__done
0003139E <AmiBlitz3.ab2@5808>     MOVEA.l newtypebase,A1
000313A0 <AmiBlitz3.ab2@5809>     MOVEQ.l #$00,D1
000313A4 <AmiBlitz3.ab2@5812>       CMPA.w #$0,A1
000313A8 <AmiBlitz3.ab2@5813>       BEQ.w writeoffs__found
000313AC <AmiBlitz3.ab2@5814>       CMPA.l $A(A2),A1
000313B0 <AmiBlitz3.ab2@5815>        BEQ.w writeoffs__found
000313B2 <AmiBlitz3.ab2@5816>       ADDQ.w #1,D1
000313B4 <AmiBlitz3.ab2@5817>       MOVEA.l (A1),A1
000313B8 <AmiBlitz3.ab2@5818> BRA.w writeoffs__loop2
000313BC <AmiBlitz3.ab2@5821>     MOVE.w $A(A2),-(A7)
000313C0 <AmiBlitz3.ab2@5822>     MOVE.w D1,$A(A2)
000313C4 <AmiBlitz3.ab2@5823>      BSR.w writeitem
000313C8 <AmiBlitz3.ab2@5824>     MOVE.w (A7)+,$A(A2)
000313CA <AmiBlitz3.ab2@5825>     MOVEA.l (A2),A2
000313CE <AmiBlitz3.ab2@5826> BRA.w writeoffs
000313D0 <AmiBlitz3.ab2@5829> RTS
000313D2 <AmiBlitz3.ab2@5833>   MOVEQ.l #$00,D0
000313D6 <AmiBlitz3.ab2@5836>   CMPA.w #$0,A2
000313DA <AmiBlitz3.ab2@5837>    BEQ.w countem__done
000313DC <AmiBlitz3.ab2@5838>   ADDQ.w #1,D0
000313DE <AmiBlitz3.ab2@5839>   MOVEA.l (A2),A2
000313E2 <AmiBlitz3.ab2@5840> BRA.w countem__loop
000313E8 <AmiBlitz3.ab2@5843>   MOVE.w D0,temp1
000313EA <AmiBlitz3.ab2@5844>   MOVE.l D7,D1
000313F0 <AmiBlitz3.ab2@5845>   MOVE.l #temp1,D2
000313F2 <AmiBlitz3.ab2@5846>   MOVEQ.l #$02,D3
000313F4 <AmiBlitz3.ab2@5847>   ADDQ.l #2,D6
000313FA <AmiBlitz3.ab2@5848>   MOVEA.l _dosbase,A6
000313FE <AmiBlitz3.ab2@5849> JMP _Write(A6)
00031404 <AmiBlitz3.ab2@5853>    TST.b resdisable
00031408 <AmiBlitz3.ab2@5854>    BEQ resmacs__l1
0003140E <AmiBlitz3.ab2@5855>    MOVE.l currentmacroaddr,a3
00031414 <AmiBlitz3.ab2@5856>    CMP.l #0,a3
00031418 <AmiBlitz3.ab2@5857>    BEQ resmacs__l1
0003141A <AmiBlitz3.ab2@5858>    MOVE.l (a3),a3
0003141E <AmiBlitz3.ab2@5859> BRA resmacs__l2
00031424 <AmiBlitz3.ab2@5862>   MOVEA.l macrobase,A3                                     ;??begin org code??
00031426 <AmiBlitz3.ab2@5865>   MOVEA.l A3,A2
0003142A <AmiBlitz3.ab2@5866>   BSR.w countem
0003142E <AmiBlitz3.ab2@5869>    CMPA.w #$0,A3
00031432 <AmiBlitz3.ab2@5870>    BEQ.w resmacs__done
00031434 <AmiBlitz3.ab2@5871>   MOVE.l D6,D5
00031436 <AmiBlitz3.ab2@5872>   MOVE.l (A3),-(A7)
0003143A <AmiBlitz3.ab2@5873>   MOVE.l $4(A3),-(A7)
0003143C <AmiBlitz3.ab2@5874>   MOVEQ.l #$00,D3
00031440 <AmiBlitz3.ab2@5875>   MOVE.b $C(A3),D3
00031442 <AmiBlitz3.ab2@5876>   ADDQ.w #1,D3
00031446 <AmiBlitz3.ab2@5877>   BCLR #$0,D3
00031448 <AmiBlitz3.ab2@5878>   ADD.l D3,D6                                              ;add len of struct
0003144C <AmiBlitz3.ab2@5879>   TST.w $8(A3)
00031450 <AmiBlitz3.ab2@5880>    BEQ.w resmacs__notext
00031454 <AmiBlitz3.ab2@5881>   MOVE.l D6,$4(A3)
00031456 <AmiBlitz3.ab2@5882>   MOVE.l D5,D2
00031458 <AmiBlitz3.ab2@5883>   ADDQ.l #4,D2
0003145C <AmiBlitz3.ab2@5884>    BSR.w addhunkoffset
0003145E <AmiBlitz3.ab2@5887>   MOVEQ.l #$00,D4
00031462 <AmiBlitz3.ab2@5888>   MOVE.w $8(A3),D4
00031464 <AmiBlitz3.ab2@5889>   ADDQ.w #1,D4
00031468 <AmiBlitz3.ab2@5890>   BCLR #$0,D4
0003146A <AmiBlitz3.ab2@5891>   ADD.l D4,D6
0003146C <AmiBlitz3.ab2@5892>   TST.l (A3)
00031470 <AmiBlitz3.ab2@5893>    BEQ.w resmacs__nomore
00031472 <AmiBlitz3.ab2@5894>   MOVE.l D6,(A3)
00031474 <AmiBlitz3.ab2@5895>   MOVE.l D5,D2
00031478 <AmiBlitz3.ab2@5896>    BSR.w addhunkoffset
0003147A <AmiBlitz3.ab2@5899>   MOVE.l A3,D2
0003147C <AmiBlitz3.ab2@5900>   MOVE.l D7,D1
00031482 <AmiBlitz3.ab2@5902>    MOVEA.l _dosbase,A6
00031486 <AmiBlitz3.ab2@5903>    JSR _Write(a6)
00031488 <AmiBlitz3.ab2@5904>   TST.l D4
0003148C <AmiBlitz3.ab2@5905>    BEQ.w resmacs__skip
0003148E <AmiBlitz3.ab2@5906>   MOVE.l (A7),D2
00031490 <AmiBlitz3.ab2@5907>   MOVE.l D4,D3
00031492 <AmiBlitz3.ab2@5908>   MOVE.l D7,D1
00031498 <AmiBlitz3.ab2@5910>     MOVEA.l _dosbase,A6
0003149C <AmiBlitz3.ab2@5911>    JSR _Write(A6)
000314A0 <AmiBlitz3.ab2@5914>   MOVE.l (A7)+,$4(A3)
000314A2 <AmiBlitz3.ab2@5915>   MOVE.l (A7)+,(A3)
000314A4 <AmiBlitz3.ab2@5916>   MOVEA.l (A3),A3
000314A8 <AmiBlitz3.ab2@5917> BRA.w resmacs__loop
000314AA <AmiBlitz3.ab2@5920> RTS
000314B0 <AmiBlitz3.ab2@5924>   TST.b resdisable
000314B4 <AmiBlitz3.ab2@5925>   BEQ restypes__l1
000314BA <AmiBlitz3.ab2@5926>   MOVE.l lastrestype,a3
000314C0 <AmiBlitz3.ab2@5927>   CMP.l #0,a3
000314C4 <AmiBlitz3.ab2@5928>   BEQ restypes__l1
000314C6 <AmiBlitz3.ab2@5929>   MOVE.l (a3),a3
000314CA <AmiBlitz3.ab2@5930> BRA restypes__l2
000314D0 <AmiBlitz3.ab2@5933>   MOVEA.l newtype_string,A3
000314D2 <AmiBlitz3.ab2@5936>   MOVEA.l A3,A2
000314D6 <AmiBlitz3.ab2@5937>    BSR.w countem
000314DA <AmiBlitz3.ab2@5940>    CMPA.w #$0,A3
000314DE <AmiBlitz3.ab2@5941>    BEQ.w restypes__done
000314E0 <AmiBlitz3.ab2@5942>   MOVE.l D6,-(A7)
000314E4 <AmiBlitz3.ab2@5943>   MOVEA.l $4(A3),A2
000314E6 <AmiBlitz3.ab2@5944>   MOVEQ.l #$0E,D5
000314EA <AmiBlitz3.ab2@5945>    BSR.w writeoffs
000314EC <AmiBlitz3.ab2@5946>   MOVE.l (A7)+,D0
000314F0 <AmiBlitz3.ab2@5947>   MOVE.l $4(A3),-(A7)
000314F4 <AmiBlitz3.ab2@5948>   MOVE.l D0,$4(A3)
000314F6 <AmiBlitz3.ab2@5949>   MOVE.l D6,D2
000314F8 <AmiBlitz3.ab2@5950>   ADDQ.l #4,D2
000314FC <AmiBlitz3.ab2@5951>    BSR.w addhunkoffset
000314FE <AmiBlitz3.ab2@5952>   MOVEQ.l #$00,D3
00031502 <AmiBlitz3.ab2@5953>   MOVE.b $A(A3),D3
00031504 <AmiBlitz3.ab2@5954>   ADDQ.w #1,D3
00031508 <AmiBlitz3.ab2@5955>   BCLR #$0,D3
0003150A <AmiBlitz3.ab2@5956>   ADD.l D3,D6
0003150C <AmiBlitz3.ab2@5957>   MOVE.l A3,D2
0003150E <AmiBlitz3.ab2@5958>   MOVE.l D7,D1
00031514 <AmiBlitz3.ab2@5960>     MOVEA.l _dosbase,A6
00031518 <AmiBlitz3.ab2@5961>     JSR _Write(A6)
0003151C <AmiBlitz3.ab2@5962>   MOVE.l (A7)+,$4(A3)
0003151E <AmiBlitz3.ab2@5963>   MOVEA.l (A3),A3
00031522 <AmiBlitz3.ab2@5964> BRA.w restypes__loop
00031524 <AmiBlitz3.ab2@5967> RTS
0003152A <AmiBlitz3.ab2@5971>    TST.b resdisable
0003152E <AmiBlitz3.ab2@5972>    BEQ resconsts__l1
00031534 <AmiBlitz3.ab2@5973>    MOVE.l currentlabeladdr,a2
0003153A <AmiBlitz3.ab2@5974>    CMP.l #0,a2
0003153E <AmiBlitz3.ab2@5975>    BEQ resconsts__l1
00031540 <AmiBlitz3.ab2@5976>    MOVE.l (a2),a2
00031544 <AmiBlitz3.ab2@5977> BRA resconsts__l2
0003154A <AmiBlitz3.ab2@5980>    MOVEA.l labelbase,A2
0003154C <AmiBlitz3.ab2@5983>    MOVEQ.l #$00,D0
00031550 <AmiBlitz3.ab2@5986>    CMPA.w #$0,A2
00031554 <AmiBlitz3.ab2@5987>    BEQ.w resconsts__done
0003155C <AmiBlitz3.ab2@5988>   CMPI.l #$1,$4(A2)
00031560 <AmiBlitz3.ab2@5989>    BNE.w resconsts__next
00031562 <AmiBlitz3.ab2@5990>   ADDQ.w #1,D0
00031564 <AmiBlitz3.ab2@5993>   MOVEA.l (A2),A2
00031568 <AmiBlitz3.ab2@5994> BRA.w resconsts__loop
0003156E <AmiBlitz3.ab2@5997>   MOVE.w D0,temp1
00031570 <AmiBlitz3.ab2@5998>   MOVE.l D7,D1
00031576 <AmiBlitz3.ab2@5999>   MOVE.l #temp1,D2
00031578 <AmiBlitz3.ab2@6000>   MOVEQ.l #$02,D3
0003157A <AmiBlitz3.ab2@6001>   ADDQ.l #2,D6
00031580 <AmiBlitz3.ab2@6003>     MOVEA.l _dosbase,A6
00031584 <AmiBlitz3.ab2@6004>     JSR _Write(A6)
0003158A <AmiBlitz3.ab2@6005>    TST.b resdisable
0003158E <AmiBlitz3.ab2@6006>    BEQ resconsts__done_l1
00031594 <AmiBlitz3.ab2@6007>    MOVE.l currentlabeladdr,a2
0003159A <AmiBlitz3.ab2@6008>    CMP.l #0,a2
0003159E <AmiBlitz3.ab2@6009>    BEQ resconsts__done_l1
000315A0 <AmiBlitz3.ab2@6010>    MOVE.l (a2),a2
000315A4 <AmiBlitz3.ab2@6011> BRA resconsts__loop2
000315AA <AmiBlitz3.ab2@6014>    MOVEA.l labelbase,A2                                    ;write resident labels
000315AE <AmiBlitz3.ab2@6017>    CMPA.w #$0,A2
000315B2 <AmiBlitz3.ab2@6018>    BEQ.w resconsts__done2
000315BA <AmiBlitz3.ab2@6019>   CMPI.l #$1,$4(A2)
000315BE <AmiBlitz3.ab2@6020>    BNE.w resconsts__next2
000315C0 <AmiBlitz3.ab2@6021>    MOVEQ.l #$00,D3
000315C4 <AmiBlitz3.ab2@6022>   MOVE.b $12(A2),D3                                        ;length
000315C6 <AmiBlitz3.ab2@6023>   ADDQ.w #1,D3
000315CA <AmiBlitz3.ab2@6024>   BCLR #$0,D3
000315CC <AmiBlitz3.ab2@6025>   MOVE.l D6,D2
000315CE <AmiBlitz3.ab2@6026>   ADD.l D3,D6
000315D0 <AmiBlitz3.ab2@6029>   MOVE.l (A2),-(A7)
000315D2 <AmiBlitz3.ab2@6030>   TST.l (A2)
000315D6 <AmiBlitz3.ab2@6031>    BEQ.w resconsts__nonext
000315D8 <AmiBlitz3.ab2@6032>   MOVE.l D6,(A2)
000315DC <AmiBlitz3.ab2@6033>    BSR.w addhunkoffset
000315DE <AmiBlitz3.ab2@6036>   MOVE.l A2,D2
000315E0 <AmiBlitz3.ab2@6037>   MOVE.l D7,D1
000315E6 <AmiBlitz3.ab2@6039>     MOVEA.l _dosbase,A6
000315EA <AmiBlitz3.ab2@6040>     JSR _Write(A6)
000315EC <AmiBlitz3.ab2@6041>   MOVE.l (A7)+,(A2)
000315EE <AmiBlitz3.ab2@6044>   MOVEA.l (A2),A2
000315F2 <AmiBlitz3.ab2@6045> BRA.w resconsts__loop2
000315F4 <AmiBlitz3.ab2@6048> RTS
0003161E <AmiBlitz3.ab2@6052>    !basic
00031624 <AmiBlitz3.ab2@6053>     MOVE.l ptr_resfile,d0
00031634 <AmiBlitz3.ab2@6054>     resfileP.l = Peek.l(?ptr_resfile)
0003163E <AmiBlitz3.ab2@6055>     If resfileP
00031666 <AmiBlitz3.ab2@6056>       resfile$ = Peek.s(resfileP)
000316B2 <AmiBlitz3.ab2@6057>       tests.b = Instr(resfile$,"/")
000316FE <AmiBlitz3.ab2@6058>       testc.b = Instr(resfile$,":")
00031720 <AmiBlitz3.ab2@6059>       If tests=0 AND testc=0
000317A0 <AmiBlitz3.ab2@6060>         resfile$ = dos_AddPart{my_residentsdir$,resfile$}
000317B2 <AmiBlitz3.ab2@6061>         Poke.l ?ptr_resfile,&resfile$
000317B8 <AmiBlitz3.ab2@6063>     Else
000317E6 <AmiBlitz3.ab2@6064>       error{"INTERNAL: Invalid pointer in ptr_resfile!"}
00031804 <AmiBlitz3.ab2@6066>    !asm
00031806 <AmiBlitz3.ab2@6067> RTS
0003180C <AmiBlitz3.ab2@6071>   MOVE.l A7,errstack
00031816 <AmiBlitz3.ab2@6073>   MOVE.l #next_resentry,errcont
0003181E <AmiBlitz3.ab2@6074>   MOVE.w #$FFFF,ezerr
00031822 <AmiBlitz3.ab2@6075>   BSR.w Aclearallvars
00031826 <AmiBlitz3.ab2@6076>   BSR.w free_residents
0003182C <AmiBlitz3.ab2@6078>   LEA residents_table,A5
0003182E <AmiBlitz3.ab2@6079>   MOVEQ.l #$07,D6
00031830 <AmiBlitz3.ab2@6082>     TST.b (A5)
00031834 <AmiBlitz3.ab2@6083>     BEQ.w next_resentry
0003183A <AmiBlitz3.ab2@6084>     MOVE.l A5,ptr_resfile
0003183E <AmiBlitz3.ab2@6085>     BSR check_residentpath
00031844 <AmiBlitz3.ab2@6086>     MOVE.l ptr_resfile,d1
0003184A <AmiBlitz3.ab2@6087>     MOVEA.l _dosbase,A6
0003184E <AmiBlitz3.ab2@6088>     JSR _LoadSeg(A6)
00031852 <AmiBlitz3.ab2@6089>     MOVE.l D0,$40(A5)
00031856 <AmiBlitz3.ab2@6090>     BNE.w reloadresident__yeah
0003185A <AmiBlitz3.ab2@6091>     BSR.w reserr
0003185C <AmiBlitz3.ab2@6094>     MOVEA.l D0,A3
0003185E <AmiBlitz3.ab2@6095>     ADDA.l A3,A3
00031860 <AmiBlitz3.ab2@6096>     ADDA.l A3,A3
00031862 <AmiBlitz3.ab2@6097>     ADDQ.w #4,A3                                           ;start of res
00031866 <AmiBlitz3.ab2@6098>     BSR.w JL_0_5A9E
0003186A <AmiBlitz3.ab2@6099>     BSR.w JL_0_5A62                                        ;add macros to list
0003186E <AmiBlitz3.ab2@6100>     BSR.w JL_0_5A32                                        ;read labels
00031872 <AmiBlitz3.ab2@6103>     LEA $44(A5),A5
00031876 <AmiBlitz3.ab2@6104>   DBF D6,reloadresident__loop
00031880 <AmiBlitz3.ab2@6109>   MOVE.l #free_residents,errcont
00031886 <AmiBlitz3.ab2@6111>   MOVEA.l newtype_string,A3
00031888 <AmiBlitz3.ab2@6112>   MOVEQ.l #$0B,D7
0003188C <AmiBlitz3.ab2@6113>   BSR.w checkclash
00031892 <AmiBlitz3.ab2@6115>   MOVEA.l macrobase,A3
00031894 <AmiBlitz3.ab2@6116>   MOVEQ.l #$d,D7
00031898 <AmiBlitz3.ab2@6117>   BSR.w checkclash
0003189E <AmiBlitz3.ab2@6119>   MOVEA.l firstconst,A3
000318A0 <AmiBlitz3.ab2@6120>   MOVEQ.l #$19,D7
000318A4 <AmiBlitz3.ab2@6121>   BSR.w checkclash
000318A6 <AmiBlitz3.ab2@6124> RTS
000318A8 <AmiBlitz3.ab2@6128>   MOVEA.l A3,A4
000318AC <AmiBlitz3.ab2@6131>     CMPA.w #$0,A4
000318B0 <AmiBlitz3.ab2@6132>     BEQ.w checkclash__done
000318B6 <AmiBlitz3.ab2@6134>     LEA ptr_parameterstore,A0
000318BA <AmiBlitz3.ab2@6135>     LEA $0(A4,D7.W),A1
000318BC <AmiBlitz3.ab2@6136>     MOVEQ.l #-$01,D2
000318BE <AmiBlitz3.ab2@6139>       ADDQ.w #1,D2
000318C0 <AmiBlitz3.ab2@6140>       MOVE.b (A1)+,(A0)+
000318C4 <AmiBlitz3.ab2@6141>     BNE.w checkclash__loop2
000318C6 <AmiBlitz3.ab2@6142>     MOVEA.l A3,A2
000318CA <AmiBlitz3.ab2@6145>     BSR.w findlab
000318CE <AmiBlitz3.ab2@6146>     BNE.w checkclash__next                                  ;not found
000318D0 <AmiBlitz3.ab2@6147>     CMPA.l A2,A4
000318D4 <AmiBlitz3.ab2@6148>     BEQ.w checkclash__l1
000318D6 <AmiBlitz3.ab2@6149>     MOVE.l a1,a5
000318DA <AmiBlitz3.ab2@6150> BRA clasherr
000318DE <AmiBlitz3.ab2@6153> BRA.w checkclash__more
000318E0 <AmiBlitz3.ab2@6156>     MOVEA.l (A4),A4
000318E4 <AmiBlitz3.ab2@6157> BRA.w checkclash__loop
000318E6 <AmiBlitz3.ab2@6160> RTS
000318EC <AmiBlitz3.ab2@6164>   MOVEA.l _dosbase,A6
000318F2 <AmiBlitz3.ab2@6166>   LEA newtype_string,A0
000318F8 <AmiBlitz3.ab2@6167>   MOVE.l A0,lastrestype
000318FA <AmiBlitz3.ab2@6168>   CLR.l (A0)
00031900 <AmiBlitz3.ab2@6170>   LEA macrobase,A0
00031906 <AmiBlitz3.ab2@6171>   MOVE.l A0,currentmacroaddr
00031908 <AmiBlitz3.ab2@6172>   CLR.l (A0)
0003190E <AmiBlitz3.ab2@6174>   LEA labelbase,A0
00031914 <AmiBlitz3.ab2@6175>   MOVE.l A0,currentlabeladdr
00031916 <AmiBlitz3.ab2@6176>   CLR.l (A0)
0003191C <AmiBlitz3.ab2@6177>   CLR.w rescnt
00031954 <AmiBlitz3.ab2@6181>   !ComData_SetB{comByte_DebugMode,debugmode}
0003195A <AmiBlitz3.ab2@6184>   LEA residents_table,A2
0003195C <AmiBlitz3.ab2@6185>   MOVEQ.l #$07,D2
00031960 <AmiBlitz3.ab2@6188>      MOVE.l $40(A2),D1
00031964 <AmiBlitz3.ab2@6189>      BEQ.w free_residents__next
00031968 <AmiBlitz3.ab2@6190>       CLR.l $40(A2)
0003196E <AmiBlitz3.ab2@6191>       MOVEA.l _dosbase,A6
00031972 <AmiBlitz3.ab2@6192>       JSR _UnLoadSeg(A6)
00031976 <AmiBlitz3.ab2@6195>      LEA $44(A2),A2
0003197A <AmiBlitz3.ab2@6196>    DBF D2,free_residents__loop
0003197C <AmiBlitz3.ab2@6198> RTS
0003197E <AmiBlitz3.ab2@6202>   MOVE.w (A3)+,D1
00031982 <AmiBlitz3.ab2@6203>   BEQ.w JL_0_5A60
00031988 <AmiBlitz3.ab2@6204>   MOVEA.l currentlabeladdr,A2
0003198A <AmiBlitz3.ab2@6205>   MOVE.l A3,(A2)
0003198C <AmiBlitz3.ab2@6206>   SUBQ.w #1,D1
0003198E <AmiBlitz3.ab2@6209>     MOVEA.l A3,A2
00031990 <AmiBlitz3.ab2@6210>     MOVEA.l (A3),A3
00031994 <AmiBlitz3.ab2@6211>   DBF D1,JL_0_5A42
00031996 <AmiBlitz3.ab2@6213>   CLR.l (a2)                                               ;bugfix for object
0003199C <AmiBlitz3.ab2@6214>   MOVE.l A2,currentlabeladdr
0003199E <AmiBlitz3.ab2@6215>   MOVEA.l A2,A3
000319A0 <AmiBlitz3.ab2@6216>   MOVEQ.l #$00,D0
000319A4 <AmiBlitz3.ab2@6217>   MOVE.b $12(A3),D0
000319A6 <AmiBlitz3.ab2@6218>   ADDQ.w #1,D0
000319AA <AmiBlitz3.ab2@6219>   BCLR #$0,D0
000319AC <AmiBlitz3.ab2@6220>   ADDA.w D0,A3
000319AE <AmiBlitz3.ab2@6223> RTS
000319B0 <AmiBlitz3.ab2@6227>   MOVE.w (A3)+,D1
000319B4 <AmiBlitz3.ab2@6228>   BEQ.w JL_0_5A9C
000319BA <AmiBlitz3.ab2@6230>   MOVEA.l currentmacroaddr,A2
000319BC <AmiBlitz3.ab2@6231>   MOVE.l A3,(A2)
000319BE <AmiBlitz3.ab2@6232>   SUBQ.w #1,D1
000319C0 <AmiBlitz3.ab2@6235>     MOVEA.l A3,A2
000319C2 <AmiBlitz3.ab2@6236>     MOVEA.l (A3),A3
000319C6 <AmiBlitz3.ab2@6237>   DBF D1,JL_0_5A72
000319CC <AmiBlitz3.ab2@6239>   MOVE.l A2,currentmacroaddr
000319CE <AmiBlitz3.ab2@6240>   MOVEA.l A2,A3
000319D0 <AmiBlitz3.ab2@6241>   MOVEQ.l #$00,D0
000319D4 <AmiBlitz3.ab2@6242>   MOVE.b $C(A3),D0
000319D6 <AmiBlitz3.ab2@6243>   ADDQ.w #1,D0
000319DA <AmiBlitz3.ab2@6244>   BCLR #$0,D0
000319DE <AmiBlitz3.ab2@6245>   MOVE.w $8(A3),D1
000319E0 <AmiBlitz3.ab2@6246>   ADDQ.w #1,D1
000319E4 <AmiBlitz3.ab2@6247>   BCLR #$0,D1
000319E6 <AmiBlitz3.ab2@6248>   ADDA.w D0,A3
000319E8 <AmiBlitz3.ab2@6249>   ADDA.w D1,A3
000319EA <AmiBlitz3.ab2@6252> RTS
000319EC <AmiBlitz3.ab2@6256>   MOVE.w (A3)+,D1
000319F0 <AmiBlitz3.ab2@6257>   BEQ.w JL_0_5B38
000319F2 <AmiBlitz3.ab2@6258>   MOVE.w D1,-(A7)
000319F4 <AmiBlitz3.ab2@6259>   SUBQ.w #1,D1
000319FA <AmiBlitz3.ab2@6260>   MOVEA.l lastrestype,A2
000319FC <AmiBlitz3.ab2@6261>   MOVE.l A2,-(A7)
000319FE <AmiBlitz3.ab2@6264>       MOVE.l (A3),D0
00031A02 <AmiBlitz3.ab2@6265>       BEQ.w JL_0_5ABC
00031A04 <AmiBlitz3.ab2@6266>       MOVEA.l D0,A3
00031A08 <AmiBlitz3.ab2@6267> BRA.w JL_0_5AB0
00031A0C <AmiBlitz3.ab2@6270>       MOVE.b $E(A3),D0
00031A0E <AmiBlitz3.ab2@6271>       ADDQ.w #1,D0
00031A12 <AmiBlitz3.ab2@6272>       BCLR #$0,D0
00031A14 <AmiBlitz3.ab2@6273>       ADDA.w D0,A3
00031A16 <AmiBlitz3.ab2@6274>       MOVE.l A3,(A2)
00031A18 <AmiBlitz3.ab2@6275>       MOVEA.l A3,A2
00031A1A <AmiBlitz3.ab2@6276>       MOVEQ.l #$00,D0
00031A1E <AmiBlitz3.ab2@6277>       MOVE.b $A(A3),D0
00031A20 <AmiBlitz3.ab2@6278>       ADDQ.w #1,D0
00031A24 <AmiBlitz3.ab2@6279>       BCLR #$0,D0
00031A26 <AmiBlitz3.ab2@6280>       ADDA.w D0,A3
00031A2A <AmiBlitz3.ab2@6281>   DBF D1,JL_0_5AB0
00031A2C <AmiBlitz3.ab2@6283>   MOVEA.l (A7)+,A0
00031A2E <AmiBlitz3.ab2@6284>   MOVEA.l (A0),A0
00031A32 <AmiBlitz3.ab2@6287>     CMPA.w #$0,A0
00031A36 <AmiBlitz3.ab2@6288>     BEQ.w JL_0_5B2A
00031A3A <AmiBlitz3.ab2@6289>     MOVEA.l $4(A0),A1
00031A3E <AmiBlitz3.ab2@6292>     CMPA.w #$0,A1
00031A42 <AmiBlitz3.ab2@6293>     BEQ.w JL_0_5B24
00031A46 <AmiBlitz3.ab2@6294>     MOVE.w $A(A1),D0
00031A4C <AmiBlitz3.ab2@6295>     MOVEA.l newtypebase,A4
00031A50 <AmiBlitz3.ab2@6296>     CMP.w #$7,D0
00031A54 <AmiBlitz3.ab2@6297>     BCS.w JL_0_5B0E
00031A5A <AmiBlitz3.ab2@6298>     SUB.w rescnt,D0
00031A5C <AmiBlitz3.ab2@6301>     SUBQ.w #1,D0
00031A60 <AmiBlitz3.ab2@6302>     BMI.w JL_0_5B1A
00031A62 <AmiBlitz3.ab2@6305>        MOVEA.l (A4),A4
00031A66 <AmiBlitz3.ab2@6306>   DBF D0,JL_0_5B14
00031A6A <AmiBlitz3.ab2@6309>     MOVE.l A4,$A(A1)
00031A6C <AmiBlitz3.ab2@6310>     MOVEA.l (A1),A1
00031A70 <AmiBlitz3.ab2@6311> BRA.w JL_0_5AEE
00031A72 <AmiBlitz3.ab2@6314>     MOVEA.l (A0),A0
00031A76 <AmiBlitz3.ab2@6315> BRA.w JL_0_5AE2
00031A78 <AmiBlitz3.ab2@6318>   MOVE.w (A7)+,D0
00031A7E <AmiBlitz3.ab2@6319>   ADD.w D0,rescnt
00031A84 <AmiBlitz3.ab2@6320>   MOVE.l A2,lastrestype
00031A86 <AmiBlitz3.ab2@6323> RTS
00031A8C <AmiBlitz3.ab2@6327>   LEA tokens,A0
00031A90 <AmiBlitz3.ab2@6328>   MOVE.w #$003A,D0                                         ; $003A : 58 dec
00031A92 <AmiBlitz3.ab2@6331>     MOVEA.l (A0),A0
00031A96 <AmiBlitz3.ab2@6332>   DBF D0,JL_0_5BD0
00031A9C <AmiBlitz3.ab2@6334>   MOVEA.l #asmpnts,A1                                      ;create tokentab
00031AA0 <AmiBlitz3.ab2@6335>   MOVE.w #$0076,D0                                         ; $0076 : 118 dec
00031AA4 <AmiBlitz3.ab2@6338>       LEA $6(A0),A2
00031AA6 <AmiBlitz3.ab2@6341>         TST.b (A2)+
00031AAA <AmiBlitz3.ab2@6342>       BNE.w JL_0_5BE4
00031AAC <AmiBlitz3.ab2@6345>         TST.b (A2)+
00031AB0 <AmiBlitz3.ab2@6346>       BNE.w JL_0_5BEA
00031AB2 <AmiBlitz3.ab2@6348>       ADDQ.w #1,A2
00031AB4 <AmiBlitz3.ab2@6349>       EXG.l D1,A2
00031AB8 <AmiBlitz3.ab2@6350>       BCLR #$0,D1
00031ABA <AmiBlitz3.ab2@6351>       EXG.l D1,A2
00031ABC <AmiBlitz3.ab2@6352>       MOVE.l A2,(A1)+
00031ABE <AmiBlitz3.ab2@6353>       MOVEA.l (A0),A0
00031AC2 <AmiBlitz3.ab2@6354>   DBF D0,JL_0_5BE0
00031AC4 <AmiBlitz3.ab2@6355> RTS
00031AC8 <AmiBlitz3.ab2@6359>   BSR.w asmconst
00031ACA <AmiBlitz3.ab2@6360>   MOVEQ.l #$0B,D5
00031ACC <AmiBlitz3.ab2@6361> RTS
00031ACE <AmiBlitz3.ab2@6364> unmove:  Ds.w 1
00031AD2 <AmiBlitz3.ab2@6368>   MOVE.w #$48E7,D1
00031AD6 <AmiBlitz3.ab2@6369>   BSR.w writeword                                          ;movem.l -(a7)
00031ADA <AmiBlitz3.ab2@6370>   MOVE.w #$000F,D2
00031ADC <AmiBlitz3.ab2@6371>   SUB.w D4,D2
00031ADE <AmiBlitz3.ab2@6372>   MOVEQ.l #-$01,D1
00031AE0 <AmiBlitz3.ab2@6373>   BCLR D2,D1
00031AE4 <AmiBlitz3.ab2@6374>   BSR.w writeword
00031AE6 <AmiBlitz3.ab2@6375>   MOVEQ.l #-$01,D1
00031AE8 <AmiBlitz3.ab2@6376>   BCLR D4,D1
00031AEE <AmiBlitz3.ab2@6377>   MOVE.w D1,unmove
00031AF0 <AmiBlitz3.ab2@6378> RTS
00031AF4 <AmiBlitz3.ab2@6382>   MOVE.w #$4CDF,D1
00031AF8 <AmiBlitz3.ab2@6383>   BSR.w writeword
00031AFC <AmiBlitz3.ab2@6384>   MOVE.w unmove(PC),D1
00031B00 <AmiBlitz3.ab2@6385> BRA.w writeword
00031B04 <AmiBlitz3.ab2@6398>   BSR.w JL_0_5D22
00031B08 <AmiBlitz3.ab2@6399>   CMP.w #$2C,D0                                            ;#','
00031B0C <AmiBlitz3.ab2@6400>    BNE.w syntaxerr
00031B12 <AmiBlitz3.ab2@6401>   MOVE.l #$48E7FFFE,D1                                     ;movem to stack
00031B16 <AmiBlitz3.ab2@6402>    BSR.w writelong
00031B18 <AmiBlitz3.ab2@6403>   MOVE.w D4,D1
00031B1C <AmiBlitz3.ab2@6404>   ORI.w #$2F00,D1
00031B20 <AmiBlitz3.ab2@6405>    BSR.w writeword
00031B24 <AmiBlitz3.ab2@6406>    BSR.w get1bytemain
00031B28 <AmiBlitz3.ab2@6407>    BSR.w getparameter
00031B2C <AmiBlitz3.ab2@6408>    BSR.w JL_0_8E3C
00031B30 <AmiBlitz3.ab2@6409>    BSR.w calcvar
00031B34 <AmiBlitz3.ab2@6410>    BTST #$E,D2
00031B38 <AmiBlitz3.ab2@6411>    BEQ.w JL_0_5C80
00031B3C <AmiBlitz3.ab2@6414>    MOVE.b #$3,D2
00031B40 <AmiBlitz3.ab2@6415> BRA.w JL_0_5C8E
00031B42 <AmiBlitz3.ab2@6418>   TST.b D2
00031B46 <AmiBlitz3.ab2@6419>    BEQ.w JL_0_5C78
00031B4A <AmiBlitz3.ab2@6420>   CMP.b #$7,D2
00031B4E <AmiBlitz3.ab2@6421>    BEQ.w JL_0_5C78
00031B52 <AmiBlitz3.ab2@6424>   BTST #$F,D2
00031B56 <AmiBlitz3.ab2@6425>    BNE.w JL_0_5CA4
00031B5A <AmiBlitz3.ab2@6426>   MOVE.w #$45ED,D1                                         ;lea x(a5),a2
00031B5E <AmiBlitz3.ab2@6427>    BSR.w writeword
00031B60 <AmiBlitz3.ab2@6428>   MOVE.w D3,D1
00031B64 <AmiBlitz3.ab2@6429>    BSR.w writeword
00031B68 <AmiBlitz3.ab2@6432>   MOVE.w #$201F,D1                                         ;move.l (a7)+,d0
00031B6C <AmiBlitz3.ab2@6433>    BSR.w writeword
00031B70 <AmiBlitz3.ab2@6434>   MOVE.w #$1480,D1
00031B74 <AmiBlitz3.ab2@6435>   CMP.b #$1,D2
00031B78 <AmiBlitz3.ab2@6436>    BEQ.w JL_0_5CC8
00031B7C <AmiBlitz3.ab2@6437>   EORI.w #$3000,D1
00031B80 <AmiBlitz3.ab2@6438>   CMP.b #$2,D2
00031B84 <AmiBlitz3.ab2@6439>    BNE.w JL_0_5CC8
00031B88 <AmiBlitz3.ab2@6440>   ORI.w #$1000,D1
00031B8C <AmiBlitz3.ab2@6443>   BSR.w writeword
00031B92 <AmiBlitz3.ab2@6444>   MOVE.l #$4CDF7FFF,D1
00031B96 <AmiBlitz3.ab2@6445> BRA.w writelong
00031B9A <AmiBlitz3.ab2@6449>   BSR.w JL_0_5D22
00031B9E <AmiBlitz3.ab2@6450>   CMP.w #$2C,D0
00031BA2 <AmiBlitz3.ab2@6451>    BNE.w syntaxerr
00031BA6 <AmiBlitz3.ab2@6452>    BSR.w regmovems
00031BA8 <AmiBlitz3.ab2@6453>   MOVE.w D4,-(A7)
00031BAA <AmiBlitz3.ab2@6454>   MOVEQ.l #$03,D2
00031BAE <AmiBlitz3.ab2@6455>    BSR.w eval
00031BB0 <AmiBlitz3.ab2@6456>   MOVE.w (A7)+,D1
00031BB4 <AmiBlitz3.ab2@6457>    BEQ.w JL_0_5D1A
00031BB8 <AmiBlitz3.ab2@6458>   CMP.w #$8,D1
00031BBC <AmiBlitz3.ab2@6459>    BCC.w JL_0_5D0C
00031BBE <AmiBlitz3.ab2@6460>   LSL.w #8,D1
00031BC0 <AmiBlitz3.ab2@6461>   LSL.w #1,D1
00031BC4 <AmiBlitz3.ab2@6462>   ORI.w #$2000,D1
00031BC8 <AmiBlitz3.ab2@6463>    BSR.w writeword
00031BCC <AmiBlitz3.ab2@6464> BRA.w JL_0_5D1A
00031BCE <AmiBlitz3.ab2@6467>   SUBQ.w #8,D1
00031BD0 <AmiBlitz3.ab2@6468>   LSL.w #8,D1
00031BD2 <AmiBlitz3.ab2@6469>   LSL.w #1,D1
00031BD6 <AmiBlitz3.ab2@6470>   ORI.w #$2040,D1
00031BDA <AmiBlitz3.ab2@6471>   BSR.w writeword
00031BDE <AmiBlitz3.ab2@6474> BRA.w dounmove
00031BE2 <AmiBlitz3.ab2@6478>   BSR.w get1bytemain
00031BE6 <AmiBlitz3.ab2@6481>   ORI.w #$20,D0
00031BEA <AmiBlitz3.ab2@6482>   CMP.w #$64,D0
00031BEE <AmiBlitz3.ab2@6483>    BEQ.w JL_0_5D4E
00031BF2 <AmiBlitz3.ab2@6484>   CMP.w #$61,D0
00031BF6 <AmiBlitz3.ab2@6485>    BNE.w syntaxerr
00031BFA <AmiBlitz3.ab2@6486>    BSR.w JL_0_5D4E
00031BFC <AmiBlitz3.ab2@6487>   ADDQ.w #8,D4
00031BFE <AmiBlitz3.ab2@6488> RTS
00031C2A <AmiBlitz3.ab2@6492>   !fget                                                   ;bsr.w get1bytemain
00031C2E <AmiBlitz3.ab2@6494>   ORI.w #$20,D0
00031C32 <AmiBlitz3.ab2@6497>   CMP.w #$61,D0
00031C36 <AmiBlitz3.ab2@6498>   BNE.w syntaxerr
00031C62 <AmiBlitz3.ab2@6501>   !fget                                                    ;bsr.w get1bytemain
00031C66 <AmiBlitz3.ab2@6502>   SUBI.w #$30,D0
00031C6A <AmiBlitz3.ab2@6503>    BMI.w syntaxerr
00031C6E <AmiBlitz3.ab2@6504>   CMP.w #$7,D0
00031C72 <AmiBlitz3.ab2@6505>    BHI.w syntaxerr
00031C74 <AmiBlitz3.ab2@6506>   MOVE.w D0,D4
00031CA0 <AmiBlitz3.ab2@6507>   !fget
00031CA2 <AmiBlitz3.ab2@6508> RTS                                                        ;bra.w get1bytemain
00031CA4 <AmiBlitz3.ab2@6512>   ADDQ.w #8,D4
00031CA6 <AmiBlitz3.ab2@6515>   MOVEQ.l #$00,D5
00031CAA <AmiBlitz3.ab2@6516>   SUBI.w #$30,D4
00031CAE <AmiBlitz3.ab2@6519>   CMP.w #$2D,D0
00031CB2 <AmiBlitz3.ab2@6520>    BEQ.w JL_0_5D9E
00031CB6 <AmiBlitz3.ab2@6521>   CMP.w #$2F,D0
00031CBA <AmiBlitz3.ab2@6522>    BEQ.w JL_0_5D8C
00031CBE <AmiBlitz3.ab2@6523> BRA.w syntaxerr
00031CC0 <AmiBlitz3.ab2@6526>   BSET D4,D5
00031CC2 <AmiBlitz3.ab2@6529>   MOVE.w D5,D4
00031CC4 <AmiBlitz3.ab2@6530>   MOVEQ.l #$0F,D5
00031CC6 <AmiBlitz3.ab2@6531> RTS
00031CC8 <AmiBlitz3.ab2@6534>   BSET D4,D5
00031CCC <AmiBlitz3.ab2@6535>   BSR.w JL_0_5D1E
00031CDE <AmiBlitz3.ab2@6536>   !compare3                                                ;bsr.w JL_0_5FC0
00031CE2 <AmiBlitz3.ab2@6537>   BNE.w JL_0_5D70
00031CE6 <AmiBlitz3.ab2@6538> BRA.w JL_0_5D84
00031CE8 <AmiBlitz3.ab2@6541>   MOVE.w D4,D1
00031CEC <AmiBlitz3.ab2@6542>    BSR.w JL_0_5D1E
00031CEE <AmiBlitz3.ab2@6543>   CMP.w D4,D1
00031CF2 <AmiBlitz3.ab2@6544>    BLS.w JL_0_5DAC
00031CF4 <AmiBlitz3.ab2@6545>   EXG.l D4,D1
00031CF6 <AmiBlitz3.ab2@6548>   BSET D1,D5
00031CF8 <AmiBlitz3.ab2@6549>   ADDQ.w #1,D1
00031CFA <AmiBlitz3.ab2@6550>   CMP.w D4,D1
00031CFE <AmiBlitz3.ab2@6551>    BLS.w JL_0_5DAC
00031D10 <AmiBlitz3.ab2@6552>   !compare3                                                ;bsr.w JL_0_5FC0
00031D14 <AmiBlitz3.ab2@6553>   BNE.w JL_0_5D70
00031D18 <AmiBlitz3.ab2@6554> BRA.w JL_0_5D86
00031D1A <AmiBlitz3.ab2@6557>   MOVEA.l A5,A4                                            ;bsr.w get1bytemain
00031D46 <AmiBlitz3.ab2@6558>    !fget
00031D4A <AmiBlitz3.ab2@6559>   CMP.w #$23,D0
00031D4E <AmiBlitz3.ab2@6560>    BEQ.w getimm
00031D52 <AmiBlitz3.ab2@6561>   CMP.w #$28,D0
00031D56 <AmiBlitz3.ab2@6562>    BEQ.w JL_0_5DFE
00031D5A <AmiBlitz3.ab2@6563>   CMP.w #$2D,D0
00031D5E <AmiBlitz3.ab2@6564>    BNE.w JL_0_5E20
00031D8A <AmiBlitz3.ab2@6565>    !fget                                                   ;bsr.w get1bytemain       -(
00031D8E <AmiBlitz3.ab2@6566>   CMP.w #$28,D0
00031D92 <AmiBlitz3.ab2@6567>    BNE.w JL_0_5F4E
00031D96 <AmiBlitz3.ab2@6568>    BSR.w JL_0_5D3E
00031D9A <AmiBlitz3.ab2@6569>   CMP.w #$29,D0
00031D9E <AmiBlitz3.ab2@6570>    BNE.w syntaxerr
00031DA0 <AmiBlitz3.ab2@6571>   MOVEQ.l #$04,D5
00031DCC <AmiBlitz3.ab2@6572>   !fget                                                    ;bsr.w get1bytemain
00031DCE <AmiBlitz3.ab2@6573> RTS
00031DD2 <AmiBlitz3.ab2@6577>   BSR.w JL_0_5D3E
00031DD6 <AmiBlitz3.ab2@6578>   CMP.w #$29,D0
00031DDA <AmiBlitz3.ab2@6579>    BNE.w syntaxerr
00031E06 <AmiBlitz3.ab2@6580>   !fget                                                    ;bsr.w get1bytemain
00031E0A <AmiBlitz3.ab2@6581>   CMP.w #$2B,D0
00031E0E <AmiBlitz3.ab2@6582>    BEQ.w JL_0_5E1A
00031E10 <AmiBlitz3.ab2@6583>   MOVEQ.l #$02,D5
00031E12 <AmiBlitz3.ab2@6584> RTS
00031E14 <AmiBlitz3.ab2@6588>   MOVEQ.l #$03,D5
00031E40 <AmiBlitz3.ab2@6589>   !fget                                                    ;bra.w get1bytemain
00031E42 <AmiBlitz3.ab2@6590> RTS
00031E46 <AmiBlitz3.ab2@6594>   ORI.w #$20,D0
00031E48 <AmiBlitz3.ab2@6595>   MOVE.w D0,D1                                            
00031E74 <AmiBlitz3.ab2@6596>    !fget                                                   ;bsr.w get1bytemain
00031E78 <AmiBlitz3.ab2@6597>   CMP.w #$64,D1
00031E7C <AmiBlitz3.ab2@6598>    BNE.w JL_0_5E6C
00031E80 <AmiBlitz3.ab2@6599>   CMP.w #$30,D0
00031E84 <AmiBlitz3.ab2@6600>    BCS.w JL_0_5EAE
00031E88 <AmiBlitz3.ab2@6601>   CMP.w #$37,D0
00031E8C <AmiBlitz3.ab2@6602>    BHI.w JL_0_5EAE
00031E8E <AmiBlitz3.ab2@6603>   MOVE.w D0,D4
00031EBA <AmiBlitz3.ab2@6604>    !fget                                                   ;bsr.w get1bytemain
00031ECC <AmiBlitz3.ab2@6605>    !compare3                                               ;bsr.w JL_0_5FC0
00031ED0 <AmiBlitz3.ab2@6606>    BEQ.w JL_0_5E64
00031ED4 <AmiBlitz3.ab2@6607>   CMP.w #$2D,D0
00031ED8 <AmiBlitz3.ab2@6608>    BEQ.w JL_0_5D6A
00031EDC <AmiBlitz3.ab2@6609>   CMP.w #$2F,D0
00031EE0 <AmiBlitz3.ab2@6610>    BEQ.w JL_0_5D6A
00031EE4 <AmiBlitz3.ab2@6611> BRA.w JL_0_5EB8
00031EE6 <AmiBlitz3.ab2@6614>   MOVEQ.l #$00,D5
00031EEA <AmiBlitz3.ab2@6615>   SUBI.w #$30,D4
00031EEC <AmiBlitz3.ab2@6616> RTS
00031EF0 <AmiBlitz3.ab2@6619>    CMP.w #$61,D1
00031EF4 <AmiBlitz3.ab2@6620>    BNE.w JL_0_5EAE
00031EF8 <AmiBlitz3.ab2@6621>   CMP.w #$30,D0
00031EFC <AmiBlitz3.ab2@6622>    BCS.w JL_0_5EAE
00031F00 <AmiBlitz3.ab2@6623>   CMP.w #$37,D0
00031F04 <AmiBlitz3.ab2@6624>    BHI.w JL_0_5EAE
00031F06 <AmiBlitz3.ab2@6625>   MOVE.w D0,D4
00031F32 <AmiBlitz3.ab2@6626>    !fget                                                   ;bsr.w get1bytemain
00031F44 <AmiBlitz3.ab2@6627>    !compare3                                               ;bsr.w JL_0_5FC0
00031F48 <AmiBlitz3.ab2@6628>    BEQ.w JL_0_5EA6
00031F4C <AmiBlitz3.ab2@6629>   CMP.w #$2D,D0
00031F50 <AmiBlitz3.ab2@6630>    BEQ.w JL_0_5D68                                         ;movem
00031F54 <AmiBlitz3.ab2@6631>   CMP.w #$2F,D0
00031F58 <AmiBlitz3.ab2@6632>    BEQ.w JL_0_5D68
00031F5C <AmiBlitz3.ab2@6633> BRA.w JL_0_5EB8
00031F5E <AmiBlitz3.ab2@6636>   MOVEQ.l #1,d5
00031F62 <AmiBlitz3.ab2@6637>   SUBI.w #$30,D4
00031F66 <AmiBlitz3.ab2@6639> BRA 'l10
00031F68 <AmiBlitz3.ab2@6640>   ADDQ.w #8,d4
00031F6A <AmiBlitz3.ab2@6641>   MOVEQ #0,d5
00031F6C <AmiBlitz3.ab2@6642>   BSET d4,d5
00031F6E <AmiBlitz3.ab2@6643>   MOVE.w d5,d4
00031F70 <AmiBlitz3.ab2@6644>   MOVEQ.l #$0f,D5                                          ;01
00031F72 <AmiBlitz3.ab2@6647> RTS
00031F76 <AmiBlitz3.ab2@6651>   ORI.w #$20,D0
00031F78 <AmiBlitz3.ab2@6652>   MOVE.w D0,D4
00031FA4 <AmiBlitz3.ab2@6653>    !fget                                                   ;bsr.w get1bytemain
00031FB6 <AmiBlitz3.ab2@6656>   !compare3                                                ;bsr.w JL_0_5FC0
00031FBA <AmiBlitz3.ab2@6657>    BNE.w JL_0_5EF2
00031FBE <AmiBlitz3.ab2@6658>   CMP.w #$73,D1
00031FC2 <AmiBlitz3.ab2@6659>    BNE.w JL_0_5EF2
00031FC6 <AmiBlitz3.ab2@6660>   CMP.w #$70,D4
00031FCA <AmiBlitz3.ab2@6661>    BNE.w JL_0_5EDE
00031FDC <AmiBlitz3.ab2@6662>    !compare3                                               ;bsr.w JL_0_5FC0
00031FE0 <AmiBlitz3.ab2@6663>    BNE.w JL_0_5F4E
00031FE2 <AmiBlitz3.ab2@6664>   MOVEQ.l #$07,D4
00031FE4 <AmiBlitz3.ab2@6665>   MOVEQ.l #$01,D5
00031FE6 <AmiBlitz3.ab2@6666> RTS
00031FEA <AmiBlitz3.ab2@6670>   CMP.w #$72,D4
00031FEE <AmiBlitz3.ab2@6671>    BNE.w JL_0_5F4E
00032000 <AmiBlitz3.ab2@6672>    !compare3                                               ;bsr.w JL_0_5FC0
00032004 <AmiBlitz3.ab2@6673>    BNE.w JL_0_5F4E
00032006 <AmiBlitz3.ab2@6674>   MOVEQ.l #$0D,D5
00032008 <AmiBlitz3.ab2@6675> RTS
0003200C <AmiBlitz3.ab2@6679>   ORI.w #$20,D0
00032010 <AmiBlitz3.ab2@6680>   CMP.w #$63,D1
00032014 <AmiBlitz3.ab2@6681>    BNE.w JL_0_5F22
00032018 <AmiBlitz3.ab2@6682>   CMP.w #$63,D4
0003201C <AmiBlitz3.ab2@6683>    BNE.w JL_0_5F4E
00032020 <AmiBlitz3.ab2@6684>   CMP.w #$72,D0
00032024 <AmiBlitz3.ab2@6685>    BNE.w JL_0_5F4E
00032028 <AmiBlitz3.ab2@6686>    BSR.w get1bytemain                                      ;??wy not !fget
0003202C <AmiBlitz3.ab2@6687>    BEQ.w JL_0_5F1E
00032030 <AmiBlitz3.ab2@6688>   CMP.w #$2C,D0
00032034 <AmiBlitz3.ab2@6689>    BNE.w JL_0_5F4E
00032036 <AmiBlitz3.ab2@6692>   MOVEQ.l #$0C,D5
00032038 <AmiBlitz3.ab2@6693> RTS
0003203C <AmiBlitz3.ab2@6697>   CMP.w #$75,D1
00032040 <AmiBlitz3.ab2@6698>    BNE.w JL_0_5F4E
00032044 <AmiBlitz3.ab2@6699>   CMP.w #$73,D4
00032048 <AmiBlitz3.ab2@6700>    BNE.w JL_0_5F4E
0003204C <AmiBlitz3.ab2@6701>   CMP.w #$70,D0
00032050 <AmiBlitz3.ab2@6702>    BNE.w JL_0_5F4E
00032054 <AmiBlitz3.ab2@6703>    BSR.w get1bytemain                                      ;??wy not !fget
00032058 <AmiBlitz3.ab2@6704>    BEQ.w JL_0_5F4A
0003205C <AmiBlitz3.ab2@6705>   CMP.w #$2C,D0
00032060 <AmiBlitz3.ab2@6706>    BNE.w JL_0_5F4E
00032062 <AmiBlitz3.ab2@6709>   MOVEQ.l #$0E,D5
00032064 <AmiBlitz3.ab2@6710> RTS
00032066 <AmiBlitz3.ab2@6714>   MOVEA.l A4,A5
0003206A <AmiBlitz3.ab2@6715>    BSR.w asmconst
0003207C <AmiBlitz3.ab2@6716>    !compare3                                               ;bsr.w JL_0_5FC0
00032080 <AmiBlitz3.ab2@6717>    BEQ.w JL_0_5FB8
00032084 <AmiBlitz3.ab2@6718>   CMP.w #$2E,D0
00032088 <AmiBlitz3.ab2@6719>    BEQ.w JL_0_5FA0
0003208C <AmiBlitz3.ab2@6720>   CMP.w #$28,D0
00032090 <AmiBlitz3.ab2@6721>    BNE.w syntaxerr
00032094 <AmiBlitz3.ab2@6722>    BSR.w get1bytemain                                      ;??wy not !fget
00032098 <AmiBlitz3.ab2@6723>   ORI.w #$20,D0
0003209C <AmiBlitz3.ab2@6724>   CMP.w #$70,D0
000320A0 <AmiBlitz3.ab2@6725>    BNE.w JL_0_5F98
000320A4 <AmiBlitz3.ab2@6726>    BSR.w get1bytemain                                      ;??wy not !fget
000320A8 <AmiBlitz3.ab2@6727>   ORI.w #$20,D0
000320AC <AmiBlitz3.ab2@6728>   CMP.w #$63,D0
000320B0 <AmiBlitz3.ab2@6729>    BNE.w syntaxerr
000320B4 <AmiBlitz3.ab2@6730>    BSR.w get1bytemain                                      ;??wy not !fget
000320B8 <AmiBlitz3.ab2@6731>    BSR.w JL_0_5FD4
000320BA <AmiBlitz3.ab2@6732>   ADDQ.w #4,D5
000320BC <AmiBlitz3.ab2@6733> RTS
000320C0 <AmiBlitz3.ab2@6737>   BSR.w JL_0_5D46
000320C4 <AmiBlitz3.ab2@6738> BRA.w JL_0_5FD4
000320C8 <AmiBlitz3.ab2@6742>    BSR.w get1bytemain                                     ;??wy not !fget
000320CC <AmiBlitz3.ab2@6743>   ORI.w #$20,D0
000320D0 <AmiBlitz3.ab2@6744>   CMP.w #$77,D0
000320D4 <AmiBlitz3.ab2@6745>    BEQ.w JL_0_5FBC
000320D8 <AmiBlitz3.ab2@6746>   CMP.w #$6C,D0
000320DC <AmiBlitz3.ab2@6747>    BNE.w syntaxerr
000320DE <AmiBlitz3.ab2@6750>   MOVEQ.l #$08,D5
000320E0 <AmiBlitz3.ab2@6751> RTS
000320E2 <AmiBlitz3.ab2@6755>   MOVEQ.l #$07,D5
000320E4 <AmiBlitz3.ab2@6756> RTS
000320E6 <AmiBlitz3.ab2@6760>   TST.w D0
000320EA <AmiBlitz3.ab2@6761>    BEQ.w JL_0_5FD2
000320EE <AmiBlitz3.ab2@6762>   CMP.w #$3A,D0
000320F2 <AmiBlitz3.ab2@6763>    BEQ.w JL_0_5FD2
000320F6 <AmiBlitz3.ab2@6764>   CMP.w #$2C,D0
000320F8 <AmiBlitz3.ab2@6767> RTS
000320FC <AmiBlitz3.ab2@6771>   CMP.w #$2C,D0
00032100 <AmiBlitz3.ab2@6772>    BNE.w JL_0_6054
00032104 <AmiBlitz3.ab2@6773>    BSR.w get1bytemain                                      ;??wy not !fget
00032108 <AmiBlitz3.ab2@6774>   ORI.w #$20,D0
0003210A <AmiBlitz3.ab2@6775>   MOVEQ.l #$00,D1
0003210E <AmiBlitz3.ab2@6776>   CMP.w #$64,D0
00032112 <AmiBlitz3.ab2@6777>    BEQ.w JL_0_5FFA
00032116 <AmiBlitz3.ab2@6778>   CMP.w #$61,D0
0003211A <AmiBlitz3.ab2@6779>    BNE.w syntaxerr
0003211E <AmiBlitz3.ab2@6780>   BSET #$F,D1
00032122 <AmiBlitz3.ab2@6783>    BSR.w get1bytemain                                      ;??wy not !fget
00032126 <AmiBlitz3.ab2@6784>   SUBI.w #$30,D0
0003212A <AmiBlitz3.ab2@6785>    BMI.w syntaxerr
0003212E <AmiBlitz3.ab2@6786>   CMP.w #$7,D0
00032132 <AmiBlitz3.ab2@6787>    BHI.w syntaxerr
00032134 <AmiBlitz3.ab2@6788>   LSL.w #8,D0
00032136 <AmiBlitz3.ab2@6789>   LSL.w #4,D0
00032138 <AmiBlitz3.ab2@6790>   OR.w D0,D1
0003213C <AmiBlitz3.ab2@6791>    BSR.w get1bytemain                                      ;??wy not !fget
00032140 <AmiBlitz3.ab2@6792>   CMP.w #$2E,D0
00032144 <AmiBlitz3.ab2@6793>    BNE.w JL_0_6040
00032148 <AmiBlitz3.ab2@6794>    BSR.w get1bytemain                                      ;??wy not !fget
0003214C <AmiBlitz3.ab2@6795>   ORI.w #$20,D0
00032150 <AmiBlitz3.ab2@6796>   CMP.w #$77,D0
00032154 <AmiBlitz3.ab2@6797>    BEQ.w JL_0_603C
00032158 <AmiBlitz3.ab2@6798>   CMP.w #$6C,D0
0003215C <AmiBlitz3.ab2@6799>    BNE.w syntaxerr
00032160 <AmiBlitz3.ab2@6800>   BSET #$B,D1
00032164 <AmiBlitz3.ab2@6803>    BSR.w get1bytemain                                      ;??wy not !fget
00032168 <AmiBlitz3.ab2@6806>    CMP.b #"*",d0                                           ;020 * Mode
0003216C <AmiBlitz3.ab2@6807>             BNE 'l1
00032170 <AmiBlitz3.ab2@6808>             BSR.w get1bytemain                             ;??wy not !fget
00032174 <AmiBlitz3.ab2@6809>             CMP.b #"2",d0
00032178 <AmiBlitz3.ab2@6810>             BNE 'l2
0003217C <AmiBlitz3.ab2@6811>             OR.w #$200,d1
00032180 <AmiBlitz3.ab2@6812> BRA 'l1b
00032184 <AmiBlitz3.ab2@6815>             CMP.b #"4",d0
00032188 <AmiBlitz3.ab2@6816>             BNE 'l3
0003218C <AmiBlitz3.ab2@6817>             OR.w #$400,d1
00032190 <AmiBlitz3.ab2@6818> BRA 'l1b
00032194 <AmiBlitz3.ab2@6821>             CMP.b #"8",d0
00032198 <AmiBlitz3.ab2@6822>             BNE syntaxerr
0003219C <AmiBlitz3.ab2@6823>             OR.w #$600,d1
000321A0 <AmiBlitz3.ab2@6826>         BSR.w get1bytemain                                 ;??wy not !fget
000321A4 <AmiBlitz3.ab2@6829>   CMP.w #$29,D0
000321A8 <AmiBlitz3.ab2@6830>    BNE.w syntaxerr
000321AE <AmiBlitz3.ab2@6831>   MOVE.w D1,extraword
000321B0 <AmiBlitz3.ab2@6832>   MOVEQ.l #$06,D5
000321B4 <AmiBlitz3.ab2@6833> BRA.w get1bytemain                                         ;??wy not !fget
000321B8 <AmiBlitz3.ab2@6837>   CMP.w #$29,D0                                            ;")"
000321BC <AmiBlitz3.ab2@6838>    BNE.w syntaxerr
000321BE <AmiBlitz3.ab2@6839>   MOVEQ.l #$05,D5
000321C2 <AmiBlitz3.ab2@6840> BRA.w get1bytemain                                         ;??wy not !fget
000321C8 <AmiBlitz3.ab2@6847>   MOVEA.l asmbuff,A0
000321CE <AmiBlitz3.ab2@6848>   MOVE.w ininclude,D1
000321D4 <AmiBlitz3.ab2@6849>   OR.w inmacro,D1
000321D6 <AmiBlitz3.ab2@6850>   MOVE.w D1,(A0)+                                          ;flag!
000321DA <AmiBlitz3.ab2@6851>    BNE.w copyconst
000321DC <AmiBlitz3.ab2@6852>   MOVE.l A5,-(A7)
000321E0 <AmiBlitz3.ab2@6853>    BSR.w copyconst
000321E6 <AmiBlitz3.ab2@6854>   MOVEA.l asmbuff,A0
000321EA <AmiBlitz3.ab2@6855>   CMP.w #$4,D1
000321EE <AmiBlitz3.ab2@6856>    BLS.w asmconst__leave
000321F4 <AmiBlitz3.ab2@6857>   TST.w lc
000321F8 <AmiBlitz3.ab2@6858>    BNE.w asmconst__leave
000321FA <AmiBlitz3.ab2@6859>   ADDQ.w #2,A0
000321FC <AmiBlitz3.ab2@6860>   MOVE.l (A7)+,(A0)+
000321FE <AmiBlitz3.ab2@6861>   CLR.b (A0)
00032206 <AmiBlitz3.ab2@6862>   MOVE.w #$0004,asmlen2                                    ;pointer + 0
00032208 <AmiBlitz3.ab2@6863> RTS
0003220A <AmiBlitz3.ab2@6867>   NOT.w (A0)
0003220C <AmiBlitz3.ab2@6868>   ADDQ.w #4,A7
0003220E <AmiBlitz3.ab2@6869> RTS
00032210 <AmiBlitz3.ab2@6872> lc:  Ds.w 1
00032216 <AmiBlitz3.ab2@6876>   CLR.w lc
00032218 <AmiBlitz3.ab2@6877>   MOVEQ.l #$00,D1
0003221A <AmiBlitz3.ab2@6880>    ADDQ.w #1,D1                                            ;label name
00032246 <AmiBlitz3.ab2@6881>    !fget                                                   ;bsr.w get1bytemain
0003224A <AmiBlitz3.ab2@6882>    BEQ.w copyconst__done
0003224E <AmiBlitz3.ab2@6883>    CMP.w #$22,d0
00032252 <AmiBlitz3.ab2@6884>    BNE.s copyconst__loop_l10
00032258 <AmiBlitz3.ab2@6885>    NOT.w instringon
0003225C <AmiBlitz3.ab2@6888>    CMP.w #":",d0
00032260 <AmiBlitz3.ab2@6889>    BNE.s copyconst__loop_l11
00032266 <AmiBlitz3.ab2@6890>    TST.w instringon
0003226A <AmiBlitz3.ab2@6891>    BEQ copyconst__done
0003226C <AmiBlitz3.ab2@6894>   TST.w D0
00032270 <AmiBlitz3.ab2@6895>   BPL.w copyconst__notmi
00032272 <AmiBlitz3.ab2@6896>   MOVE.w D0,-(A7)
00032274 <AmiBlitz3.ab2@6897>   LSR.w #8,D0
00032276 <AmiBlitz3.ab2@6898>   MOVE.b D0,(A0)+
00032278 <AmiBlitz3.ab2@6899>   MOVE.w (A7)+,D0
0003227A <AmiBlitz3.ab2@6900>   MOVE.b D0,(A0)+
0003227C <AmiBlitz3.ab2@6901>   ADDQ.w #1,D1
00032280 <AmiBlitz3.ab2@6902> BRA.s copyconst__loop
00032286 <AmiBlitz3.ab2@6905>    TST.w instringon
0003228A <AmiBlitz3.ab2@6906>    BNE.w copyconst__putbyte
00032290 <AmiBlitz3.ab2@6907>    TST.b _dcb
00032294 <AmiBlitz3.ab2@6908>    BNE copyconst__notmi_l10
00032298 <AmiBlitz3.ab2@6909>    CMP.w #$28,D0
0003229C <AmiBlitz3.ab2@6910>    BEQ.w copyconst__done
000322A0 <AmiBlitz3.ab2@6913>    CMP.w #$2C,D0
000322A4 <AmiBlitz3.ab2@6914>    BEQ.w copyconst__done
000322A8 <AmiBlitz3.ab2@6915>    CMP.b #"'",D0
000322AC <AmiBlitz3.ab2@6916>    BNE.w copyconst__putbyte
000322B2 <AmiBlitz3.ab2@6917>    MOVE.w D0,lc                                     ;locallabels
000322B4 <AmiBlitz3.ab2@6918>    MOVE.l A1,-(A7)
000322BA <AmiBlitz3.ab2@6919>    LEA lastgloballabel,A1
000322BC <AmiBlitz3.ab2@6920>    TST.b (A1)
000322C0 <AmiBlitz3.ab2@6921>    BEQ.w nolocerr
000322C2 <AmiBlitz3.ab2@6924>   ADDQ.w #1,D1
000322C4 <AmiBlitz3.ab2@6925>   MOVE.b (A1)+,(A0)+
000322C8 <AmiBlitz3.ab2@6926>    BNE.w copyconst__cloop
000322CA <AmiBlitz3.ab2@6927>   SUBQ.w #1,D1
000322CC <AmiBlitz3.ab2@6928>   SUBQ.w #1,A0
000322CE <AmiBlitz3.ab2@6929>   MOVEA.l (A7)+,A1
000322D0 <AmiBlitz3.ab2@6932>   MOVE.b D0,(A0)+
000322D4 <AmiBlitz3.ab2@6933> BRA.w copyconst__loop
000322D6 <AmiBlitz3.ab2@6936>   CLR.b (A0)
000322DC <AmiBlitz3.ab2@6937>   MOVE.w D1,asmlen2
000322DE <AmiBlitz3.ab2@6938> RTS
000322E4 <AmiBlitz3.ab2@6943>   CMP.l #$80ad,d0
000322E8 <AmiBlitz3.ab2@6944>   BNE.s 'l12
000322EE <AmiBlitz3.ab2@6945> JMP bssseg
000322F4 <AmiBlitz3.ab2@6948>   CMP.l #$807f,d0
000322F8 <AmiBlitz3.ab2@6949>     BNE.s 'l13
000322FE <AmiBlitz3.ab2@6950> JMP chipseg
00032304 <AmiBlitz3.ab2@6953>   ADDQ.l #1,destpointer                                    ;even
0003230C <AmiBlitz3.ab2@6954>   BCLR #$0,destpointer+3
00032310 <AmiBlitz3.ab2@6955>   SUBI.w #$803C,D0
00032312 <AmiBlitz3.ab2@6956>   LSL.w #2,D0
00032318 <AmiBlitz3.ab2@6957>   MOVEA.l #asmpnts,A0
0003231C <AmiBlitz3.ab2@6958>   MOVEA.l $0(A0,D0.W),A0                                   ;begin inline assembler
00032322 <AmiBlitz3.ab2@6959>   MOVE.w D0,temp1
00032324 <AmiBlitz3.ab2@6960>   MOVE.l A0,-(A7)
00032326 <AmiBlitz3.ab2@6961>   MOVEQ.l #$01,D1
00032352 <AmiBlitz3.ab2@6962>    !fget                                                   ;bsr.w get1bytemain
00032356 <AmiBlitz3.ab2@6963>   CMP.w #$2E,D0
0003235A <AmiBlitz3.ab2@6964>    BNE.w JL_0_6184
00032386 <AmiBlitz3.ab2@6965>   !fget                                                    ;bsr.w get1bytemain
0003238A <AmiBlitz3.ab2@6966>   ORI.w #$20,D0
0003238E <AmiBlitz3.ab2@6967>   CMP.w #$77,D0                                            ;long
00032392 <AmiBlitz3.ab2@6968>    BEQ.w JL_0_618A
00032396 <AmiBlitz3.ab2@6969>   CMP.w #$62,D0                                            ;byte
0003239A <AmiBlitz3.ab2@6970>    BEQ.w JL_0_617A
0003239E <AmiBlitz3.ab2@6971>   CMP.w #$6C,D0                                            ;word
000323A2 <AmiBlitz3.ab2@6972>    BEQ.w JL_0_6196
000323A6 <AmiBlitz3.ab2@6973>   CMP.w #"s",d0
000323AA <AmiBlitz3.ab2@6974>   BNE syntaxerr
000323AE <AmiBlitz3.ab2@6975> BRA.w JL_0_617A
000323B0 <AmiBlitz3.ab2@6978>   MOVEQ.l #$00,D1
000323B4 <AmiBlitz3.ab2@6979>   MOVE.w $8(A0),D0
000323B8 <AmiBlitz3.ab2@6980> BRA.w JL_0_619E
000323BA <AmiBlitz3.ab2@6983>   MOVEQ.l #$04,D1
000323BE <AmiBlitz3.ab2@6984> BRA.w JL_0_61AE
000323C0 <AmiBlitz3.ab2@6987>   MOVEQ.l #$04,D1
000323C4 <AmiBlitz3.ab2@6988>   MOVE.w $8(A0),D0
000323C6 <AmiBlitz3.ab2@6989>   LSR.w #4,D0
000323CA <AmiBlitz3.ab2@6990> BRA.w JL_0_619E
000323CC <AmiBlitz3.ab2@6993>   MOVEQ.l #$08,D1
000323D0 <AmiBlitz3.ab2@6994>   MOVE.w $8(A0),D0
000323D2 <AmiBlitz3.ab2@6995>   LSR.w #8,D0
000323D6 <AmiBlitz3.ab2@6998>    ANDI.w #$F,D0
000323DA <AmiBlitz3.ab2@6999>   CMP.w #$F,D0
000323DE <AmiBlitz3.ab2@7000>    BNE.w 'cl60
000323E6 <AmiBlitz3.ab2@7003>    CMP.l #"MULS",-6(a0)
000323EA <AmiBlitz3.ab2@7004>    BNE 'c20
000323F0 <AmiBlitz3.ab2@7005>    MOVE.l #$4c000800,d1
000323F6 <AmiBlitz3.ab2@7006> JMP do32
000323FE <AmiBlitz3.ab2@7009>    CMP.l #"MULU",-6(a0)
00032402 <AmiBlitz3.ab2@7010>    BNE 'c30
00032408 <AmiBlitz3.ab2@7011>    MOVE.l #$4c000000,d1
0003240E <AmiBlitz3.ab2@7012> JMP do32
00032416 <AmiBlitz3.ab2@7015>    CMP.l #"DIVS",-6(a0)
0003241A <AmiBlitz3.ab2@7016>    BNE 'c40
00032420 <AmiBlitz3.ab2@7017>    MOVE.l #$4c400800,d1
00032426 <AmiBlitz3.ab2@7018> JMP do32
0003242E <AmiBlitz3.ab2@7021>    CMP.l #"DIVU",-6(a0)
00032432 <AmiBlitz3.ab2@7022>    BNE 'c50
00032438 <AmiBlitz3.ab2@7023>    MOVE.l #$4c400000,d1
0003243E <AmiBlitz3.ab2@7024> JMP do32
00032442 <AmiBlitz3.ab2@7027> BRA illsizeerr
0003246E <AmiBlitz3.ab2@7030>   !fget                                                    ;bsr.w get1bytemain
00032474 <AmiBlitz3.ab2@7033>   MOVE.w D1,asmsize
00032476 <AmiBlitz3.ab2@7034>   MOVEQ.l #-$01,D3
0003247A <AmiBlitz3.ab2@7035>    BSR.w reget
0003247E <AmiBlitz3.ab2@7036>    BEQ.w JL_0_6200
00032488 <AmiBlitz3.ab2@7037>   MOVE.l #ptr_parameterstore,asmbuff
00032492 <AmiBlitz3.ab2@7039>    MOVE.w oldqflag,instringon
00032498 <AmiBlitz3.ab2@7040>   MOVEA.l lastsourcepos,A5
0003249C <AmiBlitz3.ab2@7041>    BSR.w JL_0_5DC2
0003249E <AmiBlitz3.ab2@7042>   MOVE.l D4,D2                                             ;to src
000324A0 <AmiBlitz3.ab2@7043>   MOVE.l D5,D3
000324AA <AmiBlitz3.ab2@7044>   MOVE.w asmlen2,asmlen
000324AC <AmiBlitz3.ab2@7045>   MOVEQ.l #-$01,D5
000324B6 <AmiBlitz3.ab2@7046>   MOVE.w extraword,extraword2
000324BA <AmiBlitz3.ab2@7047>   CMP.w #$2C,D0                                            ;','
000324BE <AmiBlitz3.ab2@7048>    BNE.w JL_0_6200
000324C8 <AmiBlitz3.ab2@7049>   MOVE.l #namebuff2,asmbuff
000324CC <AmiBlitz3.ab2@7050>    BSR.w JL_0_5DC2                                         ;dest
000324CE <AmiBlitz3.ab2@7053>   MOVEA.l (A7)+,A0
000324D4 <AmiBlitz3.ab2@7054>   MOVEA.l destpointer,A1
000324D6 <AmiBlitz3.ab2@7055>   MOVEA.l A1,A4
000324D8 <AmiBlitz3.ab2@7056>   ADDQ.w #2,A1
000324DA <AmiBlitz3.ab2@7057>   MOVE.w (A0),D1
000324DC <AmiBlitz3.ab2@7058>   TST.w D3
000324E0 <AmiBlitz3.ab2@7059>    BMI.w JL_0_639E
000324E4 <AmiBlitz3.ab2@7060>   MOVE.w $E(A0),D0
000324E8 <AmiBlitz3.ab2@7061>    BPL.w JL_0_6264
000324EC <AmiBlitz3.ab2@7062>   BTST #$0,D0
000324F0 <AmiBlitz3.ab2@7063>    BEQ.w JL_0_6240
000324F4 <AmiBlitz3.ab2@7064>   CMP.w #$1,D5
000324F8 <AmiBlitz3.ab2@7065>    BNE.w JL_0_6240
000324FC <AmiBlitz3.ab2@7066>   CMP.w #$E,D3
00032500 <AmiBlitz3.ab2@7067>    BEQ.w JL_0_6264
00032506 <AmiBlitz3.ab2@7068>   MOVE.w temp1,D0
00032508 <AmiBlitz3.ab2@7069>   ADDQ.w #4,D0
0003250C <AmiBlitz3.ab2@7070> BRA.w JL_0_6256
00032510 <AmiBlitz3.ab2@7073>   BTST #$1,D0
00032514 <AmiBlitz3.ab2@7074>    BEQ.w JL_0_6264
00032518 <AmiBlitz3.ab2@7075>   CMP.w #$B,D3
0003251C <AmiBlitz3.ab2@7076>    BNE.w JL_0_6264
00032522 <AmiBlitz3.ab2@7077>   MOVE.w temp1,D0
00032524 <AmiBlitz3.ab2@7080>   ADDQ.w #4,D0
0003252A <AmiBlitz3.ab2@7081>   MOVEA.l #asmpnts,A0
0003252E <AmiBlitz3.ab2@7082>   MOVEA.l $0(A0,D0.W),A0
00032530 <AmiBlitz3.ab2@7083>   MOVE.w (A0),D1
0003253A <AmiBlitz3.ab2@7086>   MOVE.l #ptr_parameterstore,buff1
00032544 <AmiBlitz3.ab2@7087>   MOVE.l #namebuff2,buff2
00032548 <AmiBlitz3.ab2@7088>   MOVE.l $A(A0),D0
0003254C <AmiBlitz3.ab2@7089>    BEQ.w JL_0_62DC
0003254E <AmiBlitz3.ab2@7090>   MOVEA.l D0,A3
00032554 <AmiBlitz3.ab2@7091>   MOVE.w asmsize,D6
00032556 <AmiBlitz3.ab2@7094>    JSR (A3)
0003255A <AmiBlitz3.ab2@7095>    BPL.w JL_0_629A
0003255E <AmiBlitz3.ab2@7096>   CMP.w #-$2,D0
00032562 <AmiBlitz3.ab2@7097>    BEQ.w illsizeerr
00032566 <AmiBlitz3.ab2@7098> BRA.w illeaerr
0003256A <AmiBlitz3.ab2@7101>   BEQ.w JL_0_62DC
0003256C <AmiBlitz3.ab2@7102>   EXG.l D2,D4
0003256E <AmiBlitz3.ab2@7103>   EXG.l D3,D5
00032574 <AmiBlitz3.ab2@7104>   MOVE.l extraword,D6
00032576 <AmiBlitz3.ab2@7105>   SWAP D6
0003257C <AmiBlitz3.ab2@7106>   MOVE.l D6,extraword
00032586 <AmiBlitz3.ab2@7107>   MOVE.l #namebuff2,buff1
00032590 <AmiBlitz3.ab2@7108>   MOVE.l #ptr_parameterstore,buff2
00032596 <AmiBlitz3.ab2@7109>   MOVE.w asmlen,D6
0003259C <AmiBlitz3.ab2@7110>   MOVE.w asmlen2,D7
000325A2 <AmiBlitz3.ab2@7111>   MOVE.w D6,asmlen2
000325A8 <AmiBlitz3.ab2@7112>   MOVE.w D7,asmlen
000325B2 <AmiBlitz3.ab2@7115>   MOVE.l buff1,asmbuff
000325B6 <AmiBlitz3.ab2@7116>   MOVE.w $E(A0),D0
000325BA <AmiBlitz3.ab2@7117>    BEQ.w JL_0_6348
000325BE <AmiBlitz3.ab2@7118>    BMI.w JL_0_6348
000325C2 <AmiBlitz3.ab2@7119>    CMP.w #$7000,d1
000325C6 <AmiBlitz3.ab2@7120>    BNE 'skip
000325CA <AmiBlitz3.ab2@7121>    CMP.w #$b,d3
000325CE <AmiBlitz3.ab2@7122>    BNE illeaerr
000325D2 <AmiBlitz3.ab2@7125>    CMP.w #$1,D0
000325D6 <AmiBlitz3.ab2@7126>    BNE.w JL_0_630E
000325DA <AmiBlitz3.ab2@7127>    CMP.w #$B,D3
000325DE <AmiBlitz3.ab2@7128>    BNE.w JL_0_6348
000325E2 <AmiBlitz3.ab2@7131>    BSR.w insasm
000325E4 <AmiBlitz3.ab2@7132>   MOVE.w D4,D2
000325E6 <AmiBlitz3.ab2@7133>   MOVE.w D5,D3
000325EA <AmiBlitz3.ab2@7134> BRA.w JL_0_6364
000325EE <AmiBlitz3.ab2@7137>    CMP.w #$2,D0
000325F2 <AmiBlitz3.ab2@7138>    BNE.w JL_0_6324
000325F6 <AmiBlitz3.ab2@7139>   CMP.w #$8,D3
000325FA <AmiBlitz3.ab2@7140>    BNE.w illeaerr
000325FC <AmiBlitz3.ab2@7141>   MOVEQ.l #$09,D3
00032600 <AmiBlitz3.ab2@7142> BRA.w JL_0_6348
00032604 <AmiBlitz3.ab2@7145>    CMP.w #$3,D0
00032608 <AmiBlitz3.ab2@7146>    BEQ.w JL_0_6302
0003260C <AmiBlitz3.ab2@7147>   CMP.w #$4,D0
00032610 <AmiBlitz3.ab2@7148>    BEQ.w JL_0_6302
00032614 <AmiBlitz3.ab2@7149>   CMP.w #$5,D0
00032618 <AmiBlitz3.ab2@7150>    BNE.w JL_0_6348
0003261C <AmiBlitz3.ab2@7151>   CMP.w #$8,D5
00032620 <AmiBlitz3.ab2@7152>    BNE.w illeaerr
00032622 <AmiBlitz3.ab2@7153>   OR.w D2,D1
00032624 <AmiBlitz3.ab2@7154>   MOVEQ.l #$09,D5
00032628 <AmiBlitz3.ab2@7157>   MOVE.w $2(A0),D6
0003262C <AmiBlitz3.ab2@7158>   MOVE.b $6(A0),D7
00032630 <AmiBlitz3.ab2@7159>   MOVEM.l D4-D5,-(A7)
00032636 <AmiBlitz3.ab2@7160>   MOVE.w extraword2,D4
0003263A <AmiBlitz3.ab2@7161>    BSR.w doea
0003263E <AmiBlitz3.ab2@7162>   MOVEM.l (A7)+,D2-D3
00032640 <AmiBlitz3.ab2@7163>   TST.w D3
00032644 <AmiBlitz3.ab2@7166>     BMI.w JL_0_6392
0003264A <AmiBlitz3.ab2@7167>   MOVE.w extraword,D4
0003264E <AmiBlitz3.ab2@7168>   MOVE.w $4(A0),D6
00032652 <AmiBlitz3.ab2@7169>   MOVE.b $7(A0),D7
0003265C <AmiBlitz3.ab2@7170>   MOVE.l buff2,asmbuff
00032666 <AmiBlitz3.ab2@7171>   MOVE.w asmlen2,asmlen
0003266A <AmiBlitz3.ab2@7172>    BSR.w doea
0003266E <AmiBlitz3.ab2@7173> BRA.w JL_0_63AA
00032672 <AmiBlitz3.ab2@7176>   MOVE.w $4(A0),D0
00032676 <AmiBlitz3.ab2@7177>    BNE.w illeaerr
0003267A <AmiBlitz3.ab2@7178> BRA.w JL_0_63AA
0003267E <AmiBlitz3.ab2@7182>   MOVE.w $2(A0),D0
00032682 <AmiBlitz3.ab2@7183>   OR.w $4(A0),D0
00032686 <AmiBlitz3.ab2@7184>    BNE.w illeaerr
0003268A <AmiBlitz3.ab2@7187>   MOVE.w $8(A0),D0
0003268E <AmiBlitz3.ab2@7188>   ANDI.w #$F000,D0
00032692 <AmiBlitz3.ab2@7189>   CMP.w #-$1000,D0
00032696 <AmiBlitz3.ab2@7190>    BEQ.w JL_0_63D2
00032698 <AmiBlitz3.ab2@7191>   LSR.w #8,D0
0003269A <AmiBlitz3.ab2@7192>   LSR.w #4,D0
0003269E <AmiBlitz3.ab2@7193>   MOVE.w $8(A0),D2
000326A4 <AmiBlitz3.ab2@7194>   MOVE.w asmsize,D3
000326A6 <AmiBlitz3.ab2@7195>   LSR.w D3,D2
000326AA <AmiBlitz3.ab2@7196>   ANDI.w #$F,D2
000326AC <AmiBlitz3.ab2@7197>   LSL.w D0,D2
000326AE <AmiBlitz3.ab2@7198>   OR.w D2,D1
000326B4 <AmiBlitz3.ab2@7201>   CMPA.l destbufferend,A4
000326B8 <AmiBlitz3.ab2@7202>    BCS.w JL_0_63E8
000326C0 <AmiBlitz3.ab2@7204>   MOVE.w #$FFFF,dontwrite
000326C4 <AmiBlitz3.ab2@7205> BRA.w JL_0_63EA
000326C6 <AmiBlitz3.ab2@7208>   MOVE.w D1,(A4)
000326CC <AmiBlitz3.ab2@7211>   MOVE.l A1,destpointer
000326CE <AmiBlitz3.ab2@7212> RTS
000326D4 <AmiBlitz3.ab2@7216>   MOVE.l destpointer,-(A7)
000326DA <AmiBlitz3.ab2@7217>   MOVE.l A1,destpointer
000326DE <AmiBlitz3.ab2@7218>    BSR.w addoff
000326E4 <AmiBlitz3.ab2@7219>   MOVEA.l destpointer,A1
000326EA <AmiBlitz3.ab2@7220>   MOVE.l (A7)+,destpointer
000326EC <AmiBlitz3.ab2@7221> RTS
000326F0 <AmiBlitz3.ab2@7225>   MOVEM.l d2-d6,-(a7)
000326F6 <AmiBlitz3.ab2@7226>   JSR stripspaces
000326FA <AmiBlitz3.ab2@7227>   CMP.b #"d",(a5)+
000326FE <AmiBlitz3.ab2@7228>   BNE noreg
00032700 <AmiBlitz3.ab2@7229>   MOVE.b (a5)+,d0
00032704 <AmiBlitz3.ab2@7230>   CMP.b #$30,d0
00032708 <AmiBlitz3.ab2@7231>   BLT noreg
0003270C <AmiBlitz3.ab2@7232>   CMP.b #$37,d0
00032710 <AmiBlitz3.ab2@7233>   BGT noreg
00032714 <AmiBlitz3.ab2@7234>   SUB.b #$30,d0
00032716 <AmiBlitz3.ab2@7235>   MOVEQ #0,d3
00032718 <AmiBlitz3.ab2@7236>   MOVE.b d0,d3                                             ;reg1
0003271A <AmiBlitz3.ab2@7237>   ASL.l #8,d3
0003271C <AmiBlitz3.ab2@7238>   ASL.l #8,d3
00032722 <AmiBlitz3.ab2@7239>   JSR stripspaces
00032726 <AmiBlitz3.ab2@7240>   CMP.b #",",(a5)+
0003272A <AmiBlitz3.ab2@7241>   BNE noreg
00032730 <AmiBlitz3.ab2@7242>   JSR stripspaces
00032734 <AmiBlitz3.ab2@7243>   CMP.b #"d",(a5)+
00032738 <AmiBlitz3.ab2@7244>   BNE noreg
0003273A <AmiBlitz3.ab2@7245>   MOVE.b (a5)+,d0
0003273E <AmiBlitz3.ab2@7246>   CMP.b #$30,d0
00032742 <AmiBlitz3.ab2@7247>   BLT noreg
00032746 <AmiBlitz3.ab2@7248>   CMP.b #$37,d0
0003274A <AmiBlitz3.ab2@7249>   BGT noreg
0003274E <AmiBlitz3.ab2@7250>   SUB.b #$30,d0
00032750 <AmiBlitz3.ab2@7251>   MOVEQ #0,d4
00032752 <AmiBlitz3.ab2@7252>   MOVE.b d0,d4                                             ;reg2
00032754 <AmiBlitz3.ab2@7253>   ASL.l #8,d4
00032756 <AmiBlitz3.ab2@7254>   ASL.l #4,d4
00032758 <AmiBlitz3.ab2@7255>   OR.b d0,d1
0003275A <AmiBlitz3.ab2@7256>   OR.l d3,d1
0003275C <AmiBlitz3.ab2@7257>   OR.l d4,d1
00032762 <AmiBlitz3.ab2@7258>   JSR writelong
00032766 <AmiBlitz3.ab2@7259>   MOVEM.l (a7)+,d2-d6
0003276A <AmiBlitz3.ab2@7260>   MOVEM.l d1/a1-a3,-(a7)
0003276E <AmiBlitz3.ab2@7261> BRA exit
00032772 <AmiBlitz3.ab2@7265>   MOVEM.l (a7)+,d2-d6
00032778 <AmiBlitz3.ab2@7266>   LEA errtext,a0
0003277A <AmiBlitz3.ab2@7267>   MOVE.l a0,-(a7)
00032780 <AmiBlitz3.ab2@7268> JMP handle_compileerror
00032786 <AmiBlitz3.ab2@7277>   MOVE.w dontwrite,D1
0003278A <AmiBlitz3.ab2@7278>    BNE.w asmfixer__done
00032792 <AmiBlitz3.ab2@7279>   BTST #$7,make_smallestcode
00032796 <AmiBlitz3.ab2@7280>    BEQ.w asmfixer__go
0003279A <AmiBlitz3.ab2@7281>   MOVE.w pass(PC),D1
0003279E <AmiBlitz3.ab2@7282>    BEQ.w asmfixer__done
000327A4 <AmiBlitz3.ab2@7285>   MOVEA.l templabel,A2                                     ;insert labels in Code
000327AC <AmiBlitz3.ab2@7286>   MOVE.b #1,curtemplabel
000327B4 <AmiBlitz3.ab2@7287>   MOVE.w #$FFFF,constmode
000327BA <AmiBlitz3.ab2@7288>   CLR.w regnum
000327C4 <AmiBlitz3.ab2@7289>           MOVE.l #forthstack,forthsp
000327CE <AmiBlitz3.ab2@7290>           MOVE.l #precstack,precsp
000327D2 <AmiBlitz3.ab2@7291>    BSR.w prepstack
000327D4 <AmiBlitz3.ab2@7294>   MOVE.l A2,-(A7)
000327D8 <AmiBlitz3.ab2@7295>    BSR.w chkstop
000327DA <AmiBlitz3.ab2@7296>   MOVEA.l (A7)+,A2
000327DE <AmiBlitz3.ab2@7297>   CMPA.w #$0,A2
000327E2 <AmiBlitz3.ab2@7298>    BEQ.w asmfixer__done2
000327E8 <AmiBlitz3.ab2@7299>    CLR.b iee
000327EE <AmiBlitz3.ab2@7300>   MOVE.l A2,asmbuff
000327F2 <AmiBlitz3.ab2@7301>   LEA $10(A2),A5
000327F6 <AmiBlitz3.ab2@7302>   TST.b $F(A2)
000327FA <AmiBlitz3.ab2@7303>    BNE.w asmfixer__skipo
000327FC <AmiBlitz3.ab2@7304>   MOVEA.l (A5),A5                                          ;pointer to real text
00032802 <AmiBlitz3.ab2@7307>    CLR.w asmtype
00032806 <AmiBlitz3.ab2@7308>    CMP.b #".",(a5)
0003280A <AmiBlitz3.ab2@7309>    BNE.s asmfixer__skipo_l10
0003280C <AmiBlitz3.ab2@7310>    MOVE.l a2,-(a7)
0003280E <AmiBlitz3.ab2@7311>    ADDQ.l #1,a5
00032814 <AmiBlitz3.ab2@7312>    LEA newtypebase,a2
00032818 <AmiBlitz3.ab2@7313>    BSR getparameter2
0003281C <AmiBlitz3.ab2@7314>    BEQ.w syntaxerr
00032820 <AmiBlitz3.ab2@7315>    BSR findtype
00032824 <AmiBlitz3.ab2@7316>    BNE.w notypeerr
00032828 <AmiBlitz3.ab2@7317>    LEA $4(a2),a2
0003282C <AmiBlitz3.ab2@7318>    BSR getparameter2
00032830 <AmiBlitz3.ab2@7319>    BEQ.w syntaxerr
00032834 <AmiBlitz3.ab2@7320>    BSR.w findvariable2
00032838 <AmiBlitz3.ab2@7321>    BNE.w notypeerr
0003283C <AmiBlitz3.ab2@7322>    MOVE.w $4(a2),d3
0003283E <AmiBlitz3.ab2@7323>    EXT.l d3
00032842 <AmiBlitz3.ab2@7324> BRA asmfixer__skipo_l30b
00032846 <AmiBlitz3.ab2@7327>   CMP.b #"\",(a5)
0003284A <AmiBlitz3.ab2@7328>     BNE asmfixer__skipo_l20
0003284C <AmiBlitz3.ab2@7329>     ADDQ.l #1,a5
0003284E <AmiBlitz3.ab2@7330>    MOVE.l a2,-(a7)
00032850 <AmiBlitz3.ab2@7331>    MOVE.l a5,a4
00032856 <AmiBlitz3.ab2@7332>    LEA usedpath,a5
0003285A <AmiBlitz3.ab2@7333>    CMP.b #"*",(a5)
0003285E <AmiBlitz3.ab2@7334>    BNE asmfixer__skipo_lm1
00032860 <AmiBlitz3.ab2@7335>    ADDQ.l #1,a5
00032864 <AmiBlitz3.ab2@7338>    BSR.w getparameter2
00032868 <AmiBlitz3.ab2@7339>    BEQ.w syntaxerr
0003286E <AmiBlitz3.ab2@7340>    LEA varbase,A2
00032876 <AmiBlitz3.ab2@7341>    MOVE.b #1,newvariable
0003287A <AmiBlitz3.ab2@7342>    BSR.w findvariable
00032880 <AmiBlitz3.ab2@7343>    CLR.b newvariable
00032886 <AmiBlitz3.ab2@7344>    CMP.l #-1,d0
0003288A <AmiBlitz3.ab2@7345>    BEQ.w notypeerr
0003288C <AmiBlitz3.ab2@7346>    MOVE.l a4,a5
00032890 <AmiBlitz3.ab2@7347>    MOVE.l $a(a2),a2
00032894 <AmiBlitz3.ab2@7348>    LEA $4(a2),a2
00032898 <AmiBlitz3.ab2@7349>    BSR getparameter2
0003289C <AmiBlitz3.ab2@7350>    BEQ.w syntaxerr
000328A0 <AmiBlitz3.ab2@7351>    BSR.w findvariable2
000328A4 <AmiBlitz3.ab2@7352>    BNE.w notypeerr
000328A8 <AmiBlitz3.ab2@7353>   MOVE.w $4(A2),D3
000328AA <AmiBlitz3.ab2@7354>   EXT.l D3
000328B0 <AmiBlitz3.ab2@7357>    CMP.b #"[",-1(a5)
000328B4 <AmiBlitz3.ab2@7358>    BNE asmfixer__skipo_l30c
000328B6 <AmiBlitz3.ab2@7359>    MOVEQ #0,d0
000328B8 <AmiBlitz3.ab2@7360>    MOVE.b (a5)+,d0
000328BA <AmiBlitz3.ab2@7361>    MOVE.l d3,-(a7)
000328BC <AmiBlitz3.ab2@7362>    MOVEQ #0,d3
000328C2 <AmiBlitz3.ab2@7363>    JSR atoi
000328C4 <AmiBlitz3.ab2@7364>    MOVE.l (a7)+,d1
000328C8 <AmiBlitz3.ab2@7365>    MOVE.l $a(a2),a2
000328CC <AmiBlitz3.ab2@7366>    MOVE.w 8(a2),d0
000328CE <AmiBlitz3.ab2@7367>    MULS d0,d3
000328D0 <AmiBlitz3.ab2@7368>    ADD.l d1,d3
000328D2 <AmiBlitz3.ab2@7371>   MOVE.l (a7)+,a2
000328D6 <AmiBlitz3.ab2@7372> BRA asmfixer__oko
000328DC <AmiBlitz3.ab2@7375>   CMP.w #$c,$8(a2)
000328E0 <AmiBlitz3.ab2@7376>      BEQ asmfixer__skipo_lf1
000328E6 <AmiBlitz3.ab2@7377>      CMP.w #$d,$8(a2)
000328EA <AmiBlitz3.ab2@7378>      BEQ asmfixer__skipo_lf1
000328F0 <AmiBlitz3.ab2@7381>   JSR AJL_0_BF6E
000328F6 <AmiBlitz3.ab2@7384>   MOVEA.l asmbuff,A2
000328FA <AmiBlitz3.ab2@7385>    BEQ.w asmfixer__oko
000328FE <AmiBlitz3.ab2@7386>   CMP.w #$28,D0
00032902 <AmiBlitz3.ab2@7387>    BEQ.w asmfixer__oko
00032906 <AmiBlitz3.ab2@7388>   CMP.w #$2C,D0
0003290A <AmiBlitz3.ab2@7389>    BEQ.w asmfixer__oko
0003290E <AmiBlitz3.ab2@7390> BRA.w syntaxerr
00032916 <AmiBlitz3.ab2@7393>   MOVE.b #1,iee
0003291A <AmiBlitz3.ab2@7394> BRA asmfixer__skipo_lf2
0003291E <AmiBlitz3.ab2@7397>   MOVEA.l $4(A2),A1
00032922 <AmiBlitz3.ab2@7399>   MOVE.w $8(A2),D1                                         ;labelmode
00032926 <AmiBlitz3.ab2@7400>   CMP.w #$5,D1
0003292A <AmiBlitz3.ab2@7401>    BNE.w asmfixer__notdan
0003292E <AmiBlitz3.ab2@7404>    BSR.w chkword                                         ;word
00032930 <AmiBlitz3.ab2@7407>   MOVE.w D3,(A1)
00032934 <AmiBlitz3.ab2@7408> BRA.w asmfixer__next
00032938 <AmiBlitz3.ab2@7411>   CMP.w #$6,D1
0003293C <AmiBlitz3.ab2@7412>    BNE.w asmfixer__notdanxi
00032940 <AmiBlitz3.ab2@7415>    BSR.w chkbyte                                         ;byte
00032944 <AmiBlitz3.ab2@7418>   MOVE.b D3,$1(A1)
00032948 <AmiBlitz3.ab2@7419> BRA.w asmfixer__next
0003294C <AmiBlitz3.ab2@7422>    CMP.w #$11,D1                                           ;byte
00032950 <AmiBlitz3.ab2@7423>    BEQ.w asmfixer__isbyte2
00032954 <AmiBlitz3.ab2@7424>    CMP.w #$c,d1
00032958 <AmiBlitz3.ab2@7425>    BEQ asmfixer__single1
0003295C <AmiBlitz3.ab2@7426>    CMP.w #$d,d1
00032960 <AmiBlitz3.ab2@7427>    BEQ asmfixer__double1
00032964 <AmiBlitz3.ab2@7428>   CMP.w #$7,D1
00032968 <AmiBlitz3.ab2@7429>    BEQ.w asmfixer__word                                    ;word
0003296C <AmiBlitz3.ab2@7430>   CMP.w #$8,D1
00032970 <AmiBlitz3.ab2@7431>    BNE.w asmfixer__notabsl
00032976 <AmiBlitz3.ab2@7434>   MOVE.w asmtype,D1                                        ;long
0003297A <AmiBlitz3.ab2@7435>    BEQ.w asmfixer__notpcrel
0003297E <AmiBlitz3.ab2@7436>      BSR.w asmoff
00032980 <AmiBlitz3.ab2@7439>   MOVE.l D3,(A1)
00032984 <AmiBlitz3.ab2@7440> BRA.w asmfixer__next
0003298A <AmiBlitz3.ab2@7444>   fmove.s fp0,0(a1)
0003298E <AmiBlitz3.ab2@7445> BRA.w asmfixer__next
00032994 <AmiBlitz3.ab2@7449>   fmove.d fp0,0(a1)
00032998 <AmiBlitz3.ab2@7450> BRA.w asmfixer__next
0003299C <AmiBlitz3.ab2@7454>   CMP.w #$9,D1
000329A0 <AmiBlitz3.ab2@7455>    BNE.w asmfixer__notdpc
000329A2 <AmiBlitz3.ab2@7456>   SUB.l A1,D3                                              ;branchword
000329A6 <AmiBlitz3.ab2@7457>    BSR.w chkword
000329A8 <AmiBlitz3.ab2@7458>   MOVE.w D3,(A1)
000329AC <AmiBlitz3.ab2@7459> BRA.w asmfixer__next
000329B0 <AmiBlitz3.ab2@7463>   CMP.w #$A,D1
000329B4 <AmiBlitz3.ab2@7464>    BNE.w asmfixer__imm
000329B6 <AmiBlitz3.ab2@7465>   SUB.l A1,D3                                              ;branchbyte
000329BA <AmiBlitz3.ab2@7466> BRA.w asmfixer__isbyte
000329BE <AmiBlitz3.ab2@7470>   CMP.w #$11,d1
000329C2 <AmiBlitz3.ab2@7471>   BLE asmfixer__imm_org
000329C4 <AmiBlitz3.ab2@7472>   MOVE.l a3,-(a7)
000329CA <AmiBlitz3.ab2@7473>   LEA pluginbase,a3
000329CE <AmiBlitz3.ab2@7474>   MOVE.l 8(a2),a0
000329D0 <AmiBlitz3.ab2@7475>   JSR (a0)                                                 ;hook
000329D2 <AmiBlitz3.ab2@7476>   MOVE.l (a7)+,a3
000329D6 <AmiBlitz3.ab2@7477> BRA asmfixer__next
000329DA <AmiBlitz3.ab2@7480>   MOVE.w $A(A2),D0
000329DE <AmiBlitz3.ab2@7481>    BEQ.w asmfixer__noflag
000329E2 <AmiBlitz3.ab2@7482>   CMP.w #$1,D0
000329E6 <AmiBlitz3.ab2@7483>    BEQ.w asmfixer__tocount
000329EA <AmiBlitz3.ab2@7484>   CMP.w #$3,D0
000329EE <AmiBlitz3.ab2@7485>    BEQ.w asmfixer__tomoveq
000329F2 <AmiBlitz3.ab2@7486>   CMP.w #$4,D0
000329F6 <AmiBlitz3.ab2@7487>    BEQ.w asmfixer__totrap
000329FA <AmiBlitz3.ab2@7490>   CMP.w #$B,D1                                             ;long
000329FE <AmiBlitz3.ab2@7491>    BEQ.w asmfixer__isabsl
00032A02 <AmiBlitz3.ab2@7492> BRA asmfixer__word2                                              ;word
00032A08 <AmiBlitz3.ab2@7495>   CMP.l #$F,D3
00032A0C <AmiBlitz3.ab2@7496>    BHI.w illtraperr
00032A0E <AmiBlitz3.ab2@7497>   OR.b D3,-(A1)
00032A12 <AmiBlitz3.ab2@7498> BRA.w asmfixer__next
00032A18 <AmiBlitz3.ab2@7501>   CMP.l #$8,D3
00032A1C <AmiBlitz3.ab2@7502>    BHI.w illimmerr
00032A1E <AmiBlitz3.ab2@7503>   TST.l D3
00032A22 <AmiBlitz3.ab2@7504>    BEQ.w illimmerr
00032A26 <AmiBlitz3.ab2@7505>   ANDI.w #$7,D3
00032A28 <AmiBlitz3.ab2@7506>   LSL.w #8,D3
00032A2A <AmiBlitz3.ab2@7507>   LSL.w #1,D3
00032A2C <AmiBlitz3.ab2@7508>   OR.w D3,-(A1)
00032A30 <AmiBlitz3.ab2@7509> BRA.w asmfixer__next
00032A34 <AmiBlitz3.ab2@7512>    BSR.w chkbyte
00032A36 <AmiBlitz3.ab2@7513>   MOVE.b D3,-(A1)
00032A38 <AmiBlitz3.ab2@7516>   MOVEA.l (A2),A2
00032A3C <AmiBlitz3.ab2@7517> BRA.w asmfixer__loop
00032A42 <AmiBlitz3.ab2@7520>   CLR.w constmode
00032A48 <AmiBlitz3.ab2@7523>   CLR.b curtemplabel
00032A4A <AmiBlitz3.ab2@7524> RTS
00032A4C <AmiBlitz3.ab2@7533>   BTST D3,D6
00032A50 <AmiBlitz3.ab2@7534>    BEQ.w illeaerr
00032A54 <AmiBlitz3.ab2@7535>    BSR.w makemode
00032A58 <AmiBlitz3.ab2@7536>   CMP.w #$7,D3
00032A5C <AmiBlitz3.ab2@7537>    BCS.w doea__skip
00032A5E <AmiBlitz3.ab2@7538>   MOVE.w D3,D2
00032A60 <AmiBlitz3.ab2@7539>   SUBQ.w #7,D2
00032A64 <AmiBlitz3.ab2@7540>   CMP.w #$5,D2
00032A68 <AmiBlitz3.ab2@7541>    BCS.w doea__skip0
00032A6A <AmiBlitz3.ab2@7542>   MOVEQ.l #$04,D2
00032A6C <AmiBlitz3.ab2@7545>   MOVEQ.l #$07,D3
00032A6E <AmiBlitz3.ab2@7548>   MOVE.b D7,D0
00032A72 <AmiBlitz3.ab2@7549>   ANDI.w #$F,D0
00032A76 <AmiBlitz3.ab2@7550>   CMP.w #$F,D0
00032A7A <AmiBlitz3.ab2@7551>    BEQ.w doea__skip2
00032A7C <AmiBlitz3.ab2@7552>   LSL.w D0,D3
00032A7E <AmiBlitz3.ab2@7553>   OR.w D3,D1
00032A80 <AmiBlitz3.ab2@7556>   LSR.w #4,D7
00032A84 <AmiBlitz3.ab2@7557>   ANDI.w #$F,D7
00032A88 <AmiBlitz3.ab2@7558>   CMP.w #$F,D7
00032A8C <AmiBlitz3.ab2@7559>    BEQ.w doea__skip3
00032A8E <AmiBlitz3.ab2@7560>   LSL.w D7,D2
00032A90 <AmiBlitz3.ab2@7561>   OR.w D2,D1
00032A92 <AmiBlitz3.ab2@7564> RTS
00032A98 <AmiBlitz3.ab2@7568>   CMP.l #$7F,D3
00032A9C <AmiBlitz3.ab2@7569>    BGT.w illdiserr
00032AA2 <AmiBlitz3.ab2@7570>   CMP.l #$FFFFFF80,D3                                      ;#-128,d3 org source
00032AA6 <AmiBlitz3.ab2@7571>    BLT.w illdiserr
00032AA8 <AmiBlitz3.ab2@7572> RTS
00032AAE <AmiBlitz3.ab2@7576>   CMP.l #$7fff,D3
00032AB2 <AmiBlitz3.ab2@7577>    BGT.w illdiserr
00032AB8 <AmiBlitz3.ab2@7578>   CMP.l #$FFFF8000,D3                                      ;#-32768,d3 org source
00032ABC <AmiBlitz3.ab2@7579>    BLT.w illdiserr
00032ABE <AmiBlitz3.ab2@7580> RTS
00032AC0 <AmiBlitz3.ab2@7585>   MOVE.b (a5)+,d0
00032AC2 <AmiBlitz3.ab2@7586>   CMP.b d1,d0
00032AC6 <AmiBlitz3.ab2@7587>   BEQ 'll10
00032AC8 <AmiBlitz3.ab2@7588>   TST.b d0
00032ACC <AmiBlitz3.ab2@7589>   BNE 'll20
00032ACE <AmiBlitz3.ab2@7592>   SUBQ #1,a5
00032AD0 <AmiBlitz3.ab2@7593> RTS
00032AD2 <AmiBlitz3.ab2@7598>   MOVE.b (a5)+,d0
00032AD6 <AmiBlitz3.ab2@7599>   CMP.b #",",d0
00032ADA <AmiBlitz3.ab2@7600>   BEQ 'll10
00032ADE <AmiBlitz3.ab2@7601>   CMP.b #";",d0
00032AE2 <AmiBlitz3.ab2@7602>   BEQ 'll10
00032AE6 <AmiBlitz3.ab2@7603>  CMP.b #":",d0
00032AEA <AmiBlitz3.ab2@7604>   BEQ 'll10
00032AEC <AmiBlitz3.ab2@7607>   TST.b d0
00032AF0 <AmiBlitz3.ab2@7608>   BNE 'll20
00032AF2 <AmiBlitz3.ab2@7611>   SUBQ #1,a5
00032AF4 <AmiBlitz3.ab2@7612> RTS
00032AF6 <AmiBlitz3.ab2@7616>   ADD.l a2,d1
00032AFC <AmiBlitz3.ab2@7617>   LEA tempspace,a1
00032AFE <AmiBlitz3.ab2@7618>   MOVE.l d1,a0
00032B00 <AmiBlitz3.ab2@7621>   MOVE.b (a0)+,(a1)+
00032B04 <AmiBlitz3.ab2@7622>   BNE.s 'l10
00032B06 <AmiBlitz3.ab2@7623>   SUBQ.l #1,a0
00032B08 <AmiBlitz3.ab2@7624>   SUBQ.l #1,a1
00032B0A <AmiBlitz3.ab2@7627>   MOVE.b (a5)+,(a1)+
00032B0E <AmiBlitz3.ab2@7628>   BNE.s 'l20
00032B10 <AmiBlitz3.ab2@7629>   CLR.b (a1)
00032B16 <AmiBlitz3.ab2@7630>   LEA tempspace,a5
00032B18 <AmiBlitz3.ab2@7631> RTS
00032B1C <AmiBlitz3.ab2@7635>   MOVEM.l D1-D2/A0,-(A7)
00032B1E <AmiBlitz3.ab2@7636>   MOVE.l d0,d2
00032B20 <AmiBlitz3.ab2@7637>   MOVEQ #0,d1
00032B22 <AmiBlitz3.ab2@7638>   MOVE.l a5,a4
00032B24 <AmiBlitz3.ab2@7641>   ADDQ.l #1,d1
00032B26 <AmiBlitz3.ab2@7642>   MOVE.b (a5)+,d0
00032B2A <AmiBlitz3.ab2@7643>   CMP.b #",",d0
00032B2E <AmiBlitz3.ab2@7644>   BEQ 'll10
00032B32 <AmiBlitz3.ab2@7645>   CMP.b #";",d0
00032B36 <AmiBlitz3.ab2@7646>   BEQ 'll10
00032B3A <AmiBlitz3.ab2@7647>   CMP.b #":",d0
00032B3E <AmiBlitz3.ab2@7648>   BEQ 'll10
00032B42 <AmiBlitz3.ab2@7649>   CMP.b #"(",d0
00032B46 <AmiBlitz3.ab2@7650>   BEQ 'll10
00032B48 <AmiBlitz3.ab2@7651>   TST.b d0
00032B4C <AmiBlitz3.ab2@7652>   BNE 'll20
00032B4E <AmiBlitz3.ab2@7655>   SUBQ #1,a5
00032B52 <AmiBlitz3.ab2@7656>   CMP.b #"'",(a4)
00032B56 <AmiBlitz3.ab2@7657>   BEQ 'llocal
00032B5C <AmiBlitz3.ab2@7658>   TST.w inmacro
00032B60 <AmiBlitz3.ab2@7659>   BNE 'lmacro
00032B62 <AmiBlitz3.ab2@7660>   MOVEQ.l #$14+4,D0
00032B64 <AmiBlitz3.ab2@7661>   ADD.l d1,d0
00032B66 <AmiBlitz3.ab2@7662>   MOVE.l d1,-(a7)
00032B68 <AmiBlitz3.ab2@7663>   MOVEQ.l #$01,D1
00032B6E <AmiBlitz3.ab2@7664>   MOVEA.l _execbase,A6
00032B74 <AmiBlitz3.ab2@7665>   MOVE.l mempool2,a0
00032B78 <AmiBlitz3.ab2@7666>   JSR _AllocPooled(a6)
00032B7A <AmiBlitz3.ab2@7668>   MOVE.l (a7)+,d1
00032B7C <AmiBlitz3.ab2@7669>   TST.l d0
00032B80 <AmiBlitz3.ab2@7670>   BEQ nomemory
00032B82 <AmiBlitz3.ab2@7671>   MOVEA.l D0,A0
00032B8A <AmiBlitz3.ab2@7673>   MOVE.w linenumat+2,$A(A0)
00032B90 <AmiBlitz3.ab2@7675>   MOVE.l templabel,(A0)
00032B96 <AmiBlitz3.ab2@7676>   MOVE.l A0,templabel
00032B9E <AmiBlitz3.ab2@7677>   MOVE.l destpointer,$4(A0)
00032BA2 <AmiBlitz3.ab2@7678>   MOVE.l d2,$8(A0)
00032BA6 <AmiBlitz3.ab2@7679>   LEA $E(A0),A0
00032BAA <AmiBlitz3.ab2@7680>   MOVE.b #$14,(A0)+
00032BAC <AmiBlitz3.ab2@7681>   CLR.b (a0)+
00032BAE <AmiBlitz3.ab2@7683>   MOVE.l a0,d2
00032BB0 <AmiBlitz3.ab2@7684>   ADDQ.l #4,d2
00032BB2 <AmiBlitz3.ab2@7685>   MOVE.l d2,(a0)+
00032BB4 <AmiBlitz3.ab2@7688>   MOVE.b (a4)+,(a0)+
00032BB6 <AmiBlitz3.ab2@7689>   SUBQ.l #1,d1
00032BBA <AmiBlitz3.ab2@7690>   BNE 'lc1
00032BBC <AmiBlitz3.ab2@7691>   CLR.b (a0)+
00032BC2 <AmiBlitz3.ab2@7692>   MOVE.w linenumat,(a0)
00032BC6 <AmiBlitz3.ab2@7693>   MOVEM.l (A7)+,D1-D2/A0
00032BC8 <AmiBlitz3.ab2@7694> RTS
00032BCA <AmiBlitz3.ab2@7697>   MOVEQ.l #$10+2,D0
00032BCC <AmiBlitz3.ab2@7698>   ADD.l d1,d0
00032BD0 <AmiBlitz3.ab2@7699>   MOVEM.l a4/d3,-(a7)
00032BD2 <AmiBlitz3.ab2@7700>   MOVE.l d1,d3
00032BD4 <AmiBlitz3.ab2@7701>   MOVEQ.l #$01,D1
00032BDA <AmiBlitz3.ab2@7702>   MOVEA.l _execbase,A6
00032BE0 <AmiBlitz3.ab2@7703>   MOVE.l mempool2,a0
00032BE4 <AmiBlitz3.ab2@7704>   JSR _AllocPooled(a6)
00032BE6 <AmiBlitz3.ab2@7706>   TST.l d0
00032BEA <AmiBlitz3.ab2@7707>   BEQ nomemory
00032BEC <AmiBlitz3.ab2@7708>   MOVEA.l D0,A0
00032BF4 <AmiBlitz3.ab2@7711>   MOVE.w linenumat+2,$C(A0)
00032BFA <AmiBlitz3.ab2@7712>   MOVE.l templabel,(A0)
00032C00 <AmiBlitz3.ab2@7713>   MOVE.l A0,templabel
00032C08 <AmiBlitz3.ab2@7714>   MOVE.l destpointer,$4(A0)
00032C0C <AmiBlitz3.ab2@7715>   MOVE.l d2,$8(A0)
00032C10 <AmiBlitz3.ab2@7716>   LEA $E(A0),A0
00032C12 <AmiBlitz3.ab2@7717>   MOVE.b d3,(A0)+
00032C18 <AmiBlitz3.ab2@7718>   ADD.b #$10,-1(a0)
00032C1C <AmiBlitz3.ab2@7719>   MOVE.b #$1,(a0)+
00032C1E <AmiBlitz3.ab2@7720>   SUBQ.w #1,d3
00032C20 <AmiBlitz3.ab2@7723>   MOVE.b (a4)+,(a0)+
00032C22 <AmiBlitz3.ab2@7724>   SUBQ.l #1,d3
00032C26 <AmiBlitz3.ab2@7725>   BNE.s 'lm2
00032C28 <AmiBlitz3.ab2@7726>   CLR.b (a0)+
00032C2E <AmiBlitz3.ab2@7727>   MOVE.w linenumat,(a0)
00032C32 <AmiBlitz3.ab2@7728>   MOVEM.l (a7)+,d3/a4
00032C36 <AmiBlitz3.ab2@7729>   MOVEM.l (A7)+,D1-D2/A0
00032C38 <AmiBlitz3.ab2@7730> RTS
00032C3E <AmiBlitz3.ab2@7733>   LEA lastgloballabel,a1
00032C40 <AmiBlitz3.ab2@7736>   ADDQ.l #1,d1
00032C42 <AmiBlitz3.ab2@7737>   TST.b (a1)+
00032C46 <AmiBlitz3.ab2@7738>   BNE.s 'll11
00032C48 <AmiBlitz3.ab2@7739>   MOVEQ.l #$10+2,D0
00032C4A <AmiBlitz3.ab2@7740>   ADD.l d1,d0
00032C4E <AmiBlitz3.ab2@7741>   MOVEM.l a4/d3,-(a7)
00032C50 <AmiBlitz3.ab2@7742>   MOVE.l d1,d3
00032C52 <AmiBlitz3.ab2@7743>   MOVEQ.l #$01,D1
00032C58 <AmiBlitz3.ab2@7744>   MOVEA.l _execbase,A6
00032C5E <AmiBlitz3.ab2@7745>   MOVE.l mempool2,a0
00032C62 <AmiBlitz3.ab2@7746>   JSR _AllocPooled(a6)
00032C64 <AmiBlitz3.ab2@7748>   TST.l d0
00032C68 <AmiBlitz3.ab2@7749>   BEQ nomemory
00032C6A <AmiBlitz3.ab2@7750>   MOVEA.l D0,A0
00032C72 <AmiBlitz3.ab2@7753>   MOVE.w linenumat+2,$C(A0)
00032C78 <AmiBlitz3.ab2@7754>   MOVE.l templabel,(A0)
00032C7E <AmiBlitz3.ab2@7755>   MOVE.l A0,templabel
00032C86 <AmiBlitz3.ab2@7756>   MOVE.l destpointer,$4(A0)
00032C8A <AmiBlitz3.ab2@7757>   MOVE.l d2,$8(A0)
00032C8E <AmiBlitz3.ab2@7758>   LEA $E(A0),A0
00032C90 <AmiBlitz3.ab2@7759>   MOVE.b d3,(A0)+
00032C96 <AmiBlitz3.ab2@7760>   ADD.b #$10,-1(a0)
00032C9A <AmiBlitz3.ab2@7761>   MOVE.b #$1,(a0)+
00032C9C <AmiBlitz3.ab2@7762>   SUBQ.w #1,d3
00032CA2 <AmiBlitz3.ab2@7763>   LEA lastgloballabel,a1
00032CA4 <AmiBlitz3.ab2@7766>   SUBQ.l #1,d3
00032CA6 <AmiBlitz3.ab2@7767>   MOVE.b (a1)+,(a0)+
00032CAA <AmiBlitz3.ab2@7768>   BNE.s 'lm3
00032CAC <AmiBlitz3.ab2@7769>   SUBQ.l #1,a0
00032CAE <AmiBlitz3.ab2@7772>   MOVE.b (a4)+,(a0)+
00032CB0 <AmiBlitz3.ab2@7773>   SUBQ.l #1,d3
00032CB4 <AmiBlitz3.ab2@7774>   BNE.s 'lm1
00032CB6 <AmiBlitz3.ab2@7775>   CLR.b (a0)+
00032CBC <AmiBlitz3.ab2@7776>   MOVE.w linenumat,(a0)
00032CC0 <AmiBlitz3.ab2@7777>   MOVEM.l (a7)+,d3/a4
00032CC4 <AmiBlitz3.ab2@7778>   MOVEM.l (A7)+,D1-D2/A0
00032CC6 <AmiBlitz3.ab2@7779> RTS
00032CF0 <AmiBlitz3.ab2@7783>   !basic
00032D46 <AmiBlitz3.ab2@7784>   error{!TRANS{"No memory available!!!\\nAB3 will terminate due to low memory!"}}
00032D58 <AmiBlitz3.ab2@7785>   loop Delay_ 1
00032D5E <AmiBlitz3.ab2@7786> Goto loop
00032D62 <AmiBlitz3.ab2@7790>   MOVEM.l D0-D2/A0,-(A7)
00032D66 <AmiBlitz3.ab2@7791>   MOVE.w $E(A0),-(A7)
00032D6A <AmiBlitz3.ab2@7792>    BPL.w insasm__ok
00032D6C <AmiBlitz3.ab2@7793>   CLR.w (A7)
00032D6E <AmiBlitz3.ab2@7796>   MOVE.l A1,-(A7)
00032D70 <AmiBlitz3.ab2@7797>   MOVEQ.l #$10+2,D0
00032D76 <AmiBlitz3.ab2@7798>   ADD.w asmlen,D0
00032D78 <AmiBlitz3.ab2@7799>   MOVE.w D0,D2
00032D7A <AmiBlitz3.ab2@7800>   MOVEQ.l #$01,D1
00032D80 <AmiBlitz3.ab2@7801>   MOVEA.l _execbase,A6
00032D86 <AmiBlitz3.ab2@7802>   MOVE.l mempool2,a0
00032D8A <AmiBlitz3.ab2@7803>   JSR _AllocPooled(a6)
00032D8C <AmiBlitz3.ab2@7805>   MOVEA.l D0,A0
00032D94 <AmiBlitz3.ab2@7808>   MOVE.w linenumat+2,$C(A0)
00032D9A <AmiBlitz3.ab2@7809>   MOVE.l templabel,(A0)
00032DA0 <AmiBlitz3.ab2@7810>   MOVE.l A0,templabel
00032DA4 <AmiBlitz3.ab2@7811>   MOVE.l (A7),$4(A0)
00032DA8 <AmiBlitz3.ab2@7812>   MOVE.w d3,$8(A0)
00032DAE <AmiBlitz3.ab2@7813>   MOVE.w $4(A7),$A(A0)
00032DB2 <AmiBlitz3.ab2@7814>   LEA $E(A0),A0
00032DB4 <AmiBlitz3.ab2@7815>   MOVE.b D2,(A0)+                                           ;length
00032DBA <AmiBlitz3.ab2@7816>   MOVEA.l asmbuff,A1
00032DBC <AmiBlitz3.ab2@7817>   ADDQ.w #1,A1
00032DBE <AmiBlitz3.ab2@7818>   MOVE.b (A1)+,(A0)+                                        ;type - 0 = indirect,else direct
00032DC2 <AmiBlitz3.ab2@7819>    BNE.w insasm__loop
00032DC4 <AmiBlitz3.ab2@7820>   MOVE.l (A1)+,(A0)+
00032DCA <AmiBlitz3.ab2@7821>   MOVE.w linenumat,(a0)
00032DCE <AmiBlitz3.ab2@7822> BRA.w insasm__loopdone
00032DD0 <AmiBlitz3.ab2@7825>    MOVE.b (A1)+,(A0)+
00032DD4 <AmiBlitz3.ab2@7826>    BNE.w insasm__loop
00032DDA <AmiBlitz3.ab2@7827>    MOVE.w linenumat,(a0)
00032DDC <AmiBlitz3.ab2@7830>   MOVEA.l (A7)+,A1
00032DDE <AmiBlitz3.ab2@7831>   ADDQ.w #2,A7
00032DE2 <AmiBlitz3.ab2@7832>   MOVEM.l (A7)+,D0-D2/A0
00032DE4 <AmiBlitz3.ab2@7833> RTS
00032DE8 <AmiBlitz3.ab2@7837>   CMP.w #$5,D3
00032DEC <AmiBlitz3.ab2@7838>    BCS.w makemode__done
00032DF0 <AmiBlitz3.ab2@7839>   CMP.w #$B,D3
00032DF4 <AmiBlitz3.ab2@7840>    BHI.w makemode__done2
00032DF8 <AmiBlitz3.ab2@7841>    BEQ.w makemode__imm
00032DFC <AmiBlitz3.ab2@7842>    BSR.w insasm
00032E00 <AmiBlitz3.ab2@7843>   CMP.w #$5,D3
00032E04 <AmiBlitz3.ab2@7844>    BEQ.w makemode__word
00032E08 <AmiBlitz3.ab2@7845>   CMP.w #$6,D3
00032E0C <AmiBlitz3.ab2@7846>    BEQ.w makemode__dxi
00032E10 <AmiBlitz3.ab2@7847>   CMP.w #$7,D3
00032E14 <AmiBlitz3.ab2@7848>    BEQ.w makemode__word
00032E18 <AmiBlitz3.ab2@7849>   CMP.w #$8,D3
00032E1C <AmiBlitz3.ab2@7850>    BEQ.w makemode__long
00032E20 <AmiBlitz3.ab2@7851>   CMP.w #$9,D3
00032E24 <AmiBlitz3.ab2@7852>    BEQ.w makemode__word
00032E2A <AmiBlitz3.ab2@7856>   CMPA.l destbufferend,A1
00032E2E <AmiBlitz3.ab2@7857>    BCS.w makemode__ok7
00032E30 <AmiBlitz3.ab2@7858>   ADDQ.w #2,A1
00032E32 <AmiBlitz3.ab2@7859> RTS
00032E34 <AmiBlitz3.ab2@7862>   MOVE.w D4,(A1)+
00032E36 <AmiBlitz3.ab2@7863> RTS
00032E3E <AmiBlitz3.ab2@7866>   CMPI.w #$8,asmsize
00032E42 <AmiBlitz3.ab2@7867>    BCC.w makemode__immlong
00032E44 <AmiBlitz3.ab2@7868>   MOVEQ.l #$10,D3
00032E48 <AmiBlitz3.ab2@7869>    BSR.w insasm
00032E4A <AmiBlitz3.ab2@7870>   MOVEQ.l #$0B,D3
00032E4E <AmiBlitz3.ab2@7871> BRA.w makemode__word
00032E52 <AmiBlitz3.ab2@7874>   BSR.w insasm
00032E54 <AmiBlitz3.ab2@7877>   ADDQ.w #2,A1
00032E56 <AmiBlitz3.ab2@7880>   ADDQ.w #2,A1
00032E58 <AmiBlitz3.ab2@7881> RTS
00032E5C <AmiBlitz3.ab2@7884>   CMP.w #$F,D3
00032E60 <AmiBlitz3.ab2@7885>    BNE.w makemode__done
00032E66 <AmiBlitz3.ab2@7886>   CMPA.l destbufferend,A1
00032E6A <AmiBlitz3.ab2@7887>    BCS.w makemode__ok3
00032E6C <AmiBlitz3.ab2@7888>   ADDQ.w #2,A1
00032E6E <AmiBlitz3.ab2@7889>   ADDQ.w #4,A7
00032E70 <AmiBlitz3.ab2@7890> RTS
00032E72 <AmiBlitz3.ab2@7893>   MOVE.w D2,(A1)+
00032E74 <AmiBlitz3.ab2@7894>   ADDQ.w #4,A7
00032E76 <AmiBlitz3.ab2@7897> RTS
00032E7A <AmiBlitz3.ab2@7901>   BSR.w storeloc
00032E84 <AmiBlitz3.ab2@7902>   MOVE.l linenumat,oldline
00032E86 <AmiBlitz3.ab2@7903>   MOVEQ.l #$00,D1
00032E8A <AmiBlitz3.ab2@7904>    BSR.w get1bytemain
00032E8E <AmiBlitz3.ab2@7905>    BEQ.w JL_0_676E
00032E90 <AmiBlitz3.ab2@7906>   MOVEQ.l #$00,D3
00032E94 <AmiBlitz3.ab2@7907> BRA.w JL_0_6726
00032E98 <AmiBlitz3.ab2@7910>    BSR.w get1bytemain
00032E9C <AmiBlitz3.ab2@7911>    BNE.w JL_0_671C
00032E9E <AmiBlitz3.ab2@7914>   TST.w D3
00032EA2 <AmiBlitz3.ab2@7915>    BNE.w brackets_                                         ;syntax error brackets
00032EA6 <AmiBlitz3.ab2@7916> BRA.w JL_0_676C
00032EAC <AmiBlitz3.ab2@7919>    MOVE.w instringon,D4
00032EB0 <AmiBlitz3.ab2@7921>      BEQ JL_0_6726
00032EB2 <AmiBlitz3.ab2@7924>     MOVEQ #0,d0
00032EB4 <AmiBlitz3.ab2@7925>      MOVE.b (a5)+,d0                                       ;fix "ue"
00032EBA <AmiBlitz3.ab2@7926>      MOVE.w d0,lastchar
00032EBE <AmiBlitz3.ab2@7927>      BEQ ready
00032EC2 <AmiBlitz3.ab2@7928>      CMP.b #$22,d0
00032EC6 <AmiBlitz3.ab2@7929>      BNE 'l1
00032ECC <AmiBlitz3.ab2@7930>      NOT.w instringon
00032ED0 <AmiBlitz3.ab2@7931> BRA JL_0_670A
00032ED4 <AmiBlitz3.ab2@7934>            CMP.b #"@",d0                                   ;expand line @@ 1. for parameter
00032ED8 <AmiBlitz3.ab2@7935>            BNE 'l10
00032EDC <AmiBlitz3.ab2@7936>            CMP.b #"@",(a5)
00032EE0 <AmiBlitz3.ab2@7937>            BNE 'l10
00032EE6 <AmiBlitz3.ab2@7940>            TST.w ininclude
00032EEA <AmiBlitz3.ab2@7941>            BNE 'inc
00032EF0 <AmiBlitz3.ab2@7942>            MOVE.l sourceline3,a5
00032EF6 <AmiBlitz3.ab2@7943>            CMP.l #0,a5
00032EFA <AmiBlitz3.ab2@7944>            BNE 'l11t
00032F00 <AmiBlitz3.ab2@7945>            MOVEA.l sourceline,A5
00032F02 <AmiBlitz3.ab2@7948>            MOVEA.l (A5),A5
00032F08 <AmiBlitz3.ab2@7949>            CMP.l #0,a5
00032F0C <AmiBlitz3.ab2@7950>            BEQ JL_0_676C
00032F12 <AmiBlitz3.ab2@7951>            MOVE.l a5,sourceline3
00032F16 <AmiBlitz3.ab2@7952>            LEA $9(A5),A5
00032F1A <AmiBlitz3.ab2@7953> BRA 'l11
00032F1C <AmiBlitz3.ab2@7956>            ADDQ.l #1,a5
00032F1E <AmiBlitz3.ab2@7957>            TST.b (a5)
00032F22 <AmiBlitz3.ab2@7958>            BNE 'inc
00032F24 <AmiBlitz3.ab2@7962>            ADDQ.l #1,a5
00032F26 <AmiBlitz3.ab2@7963>            TST.b (a5)
00032F2A <AmiBlitz3.ab2@7964>            BEQ illeolerr
00032F2C <AmiBlitz3.ab2@7965>            MOVE.l a5,-(a7)
00032F30 <AmiBlitz3.ab2@7968>       CMP.b #" ",(a5)+
00032F34 <AmiBlitz3.ab2@7969>       BEQ 'l110
00032F3A <AmiBlitz3.ab2@7970>        CMP.b #";",-1(a5)
00032F3C <AmiBlitz3.ab2@7971>        MOVE.l (a7)+,a5
00032F40 <AmiBlitz3.ab2@7972>        BEQ 'l111
00032F44 <AmiBlitz3.ab2@7973> BRA JL_0_670A
00032F48 <AmiBlitz3.ab2@7976>    CMP.w #$29,D0
00032F4C <AmiBlitz3.ab2@7977>    BNE.w JL_0_673A
00032F4E <AmiBlitz3.ab2@7978>   TST.w D3
00032F52 <AmiBlitz3.ab2@7979>    BEQ.w JL_0_676C
00032F54 <AmiBlitz3.ab2@7982>   SUBQ.w #1,D3
00032F58 <AmiBlitz3.ab2@7983> BRA.w JL_0_670A
00032F5C <AmiBlitz3.ab2@7986>    CMP.w #$7D,D0
00032F60 <AmiBlitz3.ab2@7987>    BEQ.w JL_0_6734
00032F64 <AmiBlitz3.ab2@7988>   CMP.w #$28,D0
00032F68 <AmiBlitz3.ab2@7989>    BNE.w JL_0_6750
00032F6A <AmiBlitz3.ab2@7992>    ADDQ.w #1,D3
00032F6E <AmiBlitz3.ab2@7993> BRA.w JL_0_670A
00032F72 <AmiBlitz3.ab2@7996>   CMP.w #$7B,D0
00032F76 <AmiBlitz3.ab2@7997>    BEQ.w JL_0_674A
00032F7A <AmiBlitz3.ab2@7998>   CMP.w #$2C,D0
00032F7E <AmiBlitz3.ab2@7999>    BNE.w JL_0_670A
00032F80 <AmiBlitz3.ab2@8000>   TST.w D3
00032F84 <AmiBlitz3.ab2@8001>    BNE.w JL_0_670A
00032F86 <AmiBlitz3.ab2@8002>   ADDQ.w #1,D1
00032F8A <AmiBlitz3.ab2@8003> BRA.w JL_0_670A
00032F8C <AmiBlitz3.ab2@8006>   ADDQ.w #1,D1
00032F92 <AmiBlitz3.ab2@8009>   CLR.l sourceline3
00032F9C <AmiBlitz3.ab2@8010>   MOVE.l oldline,linenumat
00032FA0 <AmiBlitz3.ab2@8011> BRA.w resloc
00032FA6 <AmiBlitz3.ab2@8015>    CLR.w numreps
00032FA8 <AmiBlitz3.ab2@8016>   MOVE.w D1,D0
00032FAC <AmiBlitz3.ab2@8017>   ANDI.w #$FF00,D0
00032FB0 <AmiBlitz3.ab2@8018>    BEQ.w fetchlibps__noreps
00032FB2 <AmiBlitz3.ab2@8019>   LSR.w #8,D0
00032FB4 <AmiBlitz3.ab2@8020>   LSR.w #4,D0
00032FB8 <AmiBlitz3.ab2@8021>    BEQ.w fetchlibps__skip
00032FBA <AmiBlitz3.ab2@8022>   SUB.b D0,D1
00032FC4 <AmiBlitz3.ab2@8023>    MOVE.w regnum,regnumfunc
00032FCA <AmiBlitz3.ab2@8024>    MOVE.b funcparloop,-(a7)
00032FD2 <AmiBlitz3.ab2@8025>    MOVE.b #0,funcparloop
00032FD6 <AmiBlitz3.ab2@8026>    BSR.w fetchpees2
00032FDC <AmiBlitz3.ab2@8027>    MOVE.b (a7)+,funcparloop
00032FE0 <AmiBlitz3.ab2@8028>   CMP.w #$2C,D0
00032FE4 <AmiBlitz3.ab2@8029>    BNE.w syntaxerr
00032FE6 <AmiBlitz3.ab2@8032>   MOVE.w D1,D2
00032FE8 <AmiBlitz3.ab2@8033>   LSR.w #8,D2
00032FEC <AmiBlitz3.ab2@8034>   ANDI.w #$7,D2
00032FEE <AmiBlitz3.ab2@8037>    CMP.b D2,D1
00032FF2 <AmiBlitz3.ab2@8038>    BCS.w fetchlibps__repsdone
00032FF4 <AmiBlitz3.ab2@8039>   SUB.b D2,D1
00032FF8 <AmiBlitz3.ab2@8040>   MOVEM.l D2/A2,-(A7)
00032FFA <AmiBlitz3.ab2@8041>   MOVE.w D2,D0
00033000 <AmiBlitz3.ab2@8042>   MOVE.b funcparloop,-(a7)
00033008 <AmiBlitz3.ab2@8043>   MOVE.b #0,funcparloop
0003300C <AmiBlitz3.ab2@8044>   BSR.w fetchpees4
00033012 <AmiBlitz3.ab2@8045>   MOVE.b (a7)+,funcparloop
00033016 <AmiBlitz3.ab2@8046>   MOVEM.l (A7)+,D2/A2
0003301C <AmiBlitz3.ab2@8047>   ADDQ.w #1,numreps
00033020 <AmiBlitz3.ab2@8048> BRA.w fetchlibps__rloop
00033026 <AmiBlitz3.ab2@8051>    MOVE.w numreps,D3
0003302A <AmiBlitz3.ab2@8052>    BEQ.w syntaxerr
0003302C <AmiBlitz3.ab2@8053>   ADDA.w D2,A2
00033030 <AmiBlitz3.ab2@8054>   ANDI.w #$FF,D1
00033034 <AmiBlitz3.ab2@8055>    BEQ.w fetchlibps__done
00033038 <AmiBlitz3.ab2@8056>   CMP.w #$2C,D0
0003303C <AmiBlitz3.ab2@8057>    BNE.w syntaxerr
0003303E <AmiBlitz3.ab2@8060>    MOVE.w D1,D0
00033042 <AmiBlitz3.ab2@8061>    BNE.w fetchpees2b
00033044 <AmiBlitz3.ab2@8064> RTS
0003304A <AmiBlitz3.ab2@8067>   MOVE.b funcparloop,-(a7)
00033052 <AmiBlitz3.ab2@8068>   MOVE.b #0,funcparloop
00033056 <AmiBlitz3.ab2@8069>   BSR.w fetchpees2
0003305C <AmiBlitz3.ab2@8070>   MOVE.b (a7)+,funcparloop
0003305E <AmiBlitz3.ab2@8071> RTS
00033062 <AmiBlitz3.ab2@8075> ptype:    Dc.b $3F,$3C,$00,$00                             ;MOVE.W  #$0000,-(A7)
00033064 <AmiBlitz3.ab2@8078> partostack:  Ds.w 1                                        ;pmode org source
00033066 <AmiBlitz3.ab2@8082>   MOVEQ.l #$01,D2
0003306A <AmiBlitz3.ab2@8083> BRA.w fetchpees3
0003306C <AmiBlitz3.ab2@8086>   MOVEQ.l #$00,D2
00033070 <AmiBlitz3.ab2@8089>   ANDI.w #$F,D0
00033076 <AmiBlitz3.ab2@8097>   CLR.w parnum
00033078 <AmiBlitz3.ab2@8098>   MOVE.w D1,-(A7)
0003307C <AmiBlitz3.ab2@8099>   MOVE.w partostack(PC),-(A7)                              ;in case of recursion
00033082 <AmiBlitz3.ab2@8100>   MOVE.w D2,partostack
00033084 <AmiBlitz3.ab2@8101>   MOVE.w D0,-(A7)
00033088 <AmiBlitz3.ab2@8102>   CMP.w #"@@",(a5)                                         ;was l15
0003308C <AmiBlitz3.ab2@8103>   BNE fetchpees__loop
00033092 <AmiBlitz3.ab2@8104>   TST.w ininclude                                          ;merge macrolines
00033096 <AmiBlitz3.ab2@8105>   BNE errorjoin
0003309C <AmiBlitz3.ab2@8106>        MOVEA.l sourceline,A5
0003309E <AmiBlitz3.ab2@8109>            MOVEA.l (A5),A5
000330A4 <AmiBlitz3.ab2@8110>            MOVE.l a5,sourceline
000330A8 <AmiBlitz3.ab2@8111>            LEA $9(A5),A5
000330AE <AmiBlitz3.ab2@8112>            ADDQ.l #1,linenumat
000330B0 <AmiBlitz3.ab2@8116>   MOVE.b (A2)+,D2                                          ;parameterloop   d2=vartype
000330B4 <AmiBlitz3.ab2@8117>    BNE.w fetchpees__skip0
000330BA <AmiBlitz3.ab2@8118>   MOVE.w userp,D2                                          ;user selected type
000330BC <AmiBlitz3.ab2@8121>    MOVE.l A2,-(A7)
000330C2 <AmiBlitz3.ab2@8122>    ADDQ.w #1,parnum
000330C8 <AmiBlitz3.ab2@8123>    TST.b funccall
000330CC <AmiBlitz3.ab2@8124>    BEQ fetchpees__skip0_l1
000330D4 <AmiBlitz3.ab2@8125>    CMP.w #6,parnum
000330D8 <AmiBlitz3.ab2@8126>    BLE fetchpees__skip0_l1
000330DC <AmiBlitz3.ab2@8127>    CMP.w #7,d2
000330E2 <AmiBlitz3.ab2@8133>    TST.b fpu
000330E6 <AmiBlitz3.ab2@8134>    BEQ fetchpees__skip0_old
000330EC <AmiBlitz3.ab2@8135>    TST.w regnumfunc
000330F0 <AmiBlitz3.ab2@8136>    BEQ fetchpees__skip0_old
000330F6 <AmiBlitz3.ab2@8137>    CMP.w #$48e7,-4(a4)
000330FA <AmiBlitz3.ab2@8138>    BNE fetchpees__skip0_old
000330FC <AmiBlitz3.ab2@8139>    MOVEQ #0,d1
00033102 <AmiBlitz3.ab2@8140>    MOVE.w regnum,d1
00033108 <AmiBlitz3.ab2@8141>    CMP regnumfunc,d1                                       ;fpu reg function save
0003310C <AmiBlitz3.ab2@8142>    BGE fetchpees__skip0_old
0003310E <AmiBlitz3.ab2@8143>    ASL.w #7,d1
00033110 <AmiBlitz3.ab2@8144>    MOVE.l d0,-(a7)
00033116 <AmiBlitz3.ab2@8145>    MOVE.w regnumfunc,d0
0003311C <AmiBlitz3.ab2@8146>    CLR.w regmask
00033122 <AmiBlitz3.ab2@8149>    BSET d0,regmask
00033124 <AmiBlitz3.ab2@8150>    SUBQ #1,d0
00033128 <AmiBlitz3.ab2@8151>    BNE fetchpees__skip0_loop
0003312A <AmiBlitz3.ab2@8152>     MOVEQ #0,d0
00033130 <AmiBlitz3.ab2@8155>       BTST d0,regmask
00033134 <AmiBlitz3.ab2@8156>       BEQ fetchpees__skip0_noa7
00033136 <AmiBlitz3.ab2@8157>       MOVEQ #0,d1
00033138 <AmiBlitz3.ab2@8158>       MOVE.w d0,d1
0003313A <AmiBlitz3.ab2@8159>       SUBQ.w #1,d1
0003313C <AmiBlitz3.ab2@8160>       ASL #7,d1
00033142 <AmiBlitz3.ab2@8161>       OR.l #$f2277400,d1                                   ;fmove.d
00033146 <AmiBlitz3.ab2@8163>       BSR writelong
0003314C <AmiBlitz3.ab2@8165>       ADDQ.l #2,stacktrack
00033152 <AmiBlitz3.ab2@8166>       MOVE.l stacktrack,d1
00033158 <AmiBlitz3.ab2@8167>       CMP.l #180,d1
0003315C <AmiBlitz3.ab2@8168>       BGT conmemerr                                        ;formel too complex
0003315E <AmiBlitz3.ab2@8169>       MOVE.l a0,-(a7)
00033164 <AmiBlitz3.ab2@8170>       LEA fpustackbase,a0
0003316C <AmiBlitz3.ab2@8171>       MOVE.w regmask,0(a0,d1)
0003316E <AmiBlitz3.ab2@8172>       MOVE.l (a7)+,a0
00033170 <AmiBlitz3.ab2@8175>       ADDQ.w #1,d0
00033176 <AmiBlitz3.ab2@8176>       CMP.w regnumfunc,d0
0003317A <AmiBlitz3.ab2@8177>       BLE fetchpees__skip0_loop2
0003317C <AmiBlitz3.ab2@8180>       MOVE.l (a7)+,d0
00033182 <AmiBlitz3.ab2@8183>      MOVE.l currentfunccall,-(a7)
00033188 <AmiBlitz3.ab2@8184>      MOVE.w parnum,-(a7)
0003318C <AmiBlitz3.ab2@8185>      BSR.w JL_0_6836
00033192 <AmiBlitz3.ab2@8186>      MOVE.w (a7)+,parnum
00033198 <AmiBlitz3.ab2@8188>    MOVE.l (a7)+,currentfunccall
0003319E <AmiBlitz3.ab2@8189>    TST.b fpu
000331A2 <AmiBlitz3.ab2@8190>    BEQ fetchpees__skip0_noprint
000331A4 <AmiBlitz3.ab2@8191>   MOVE.l (a7),a2
000331A6 <AmiBlitz3.ab2@8192>   ADDQ.l #1,a2
000331AA <AmiBlitz3.ab2@8193>    CMP.b #5,d2
000331AE <AmiBlitz3.ab2@8194>   BNE fetchpees__skip0_noprint
000331B4 <AmiBlitz3.ab2@8195>   CMP.b #$5d,24(a2)
000331B8 <AmiBlitz3.ab2@8196>   BNE fetchpees__skip0_noprint
000331BE <AmiBlitz3.ab2@8197>   CMP.b #$81,25(a2)
000331C2 <AmiBlitz3.ab2@8198>   BLT fetchpees__skip0_noprint
000331C8 <AmiBlitz3.ab2@8199>   CMP.b #$86,25(a2)
000331CC <AmiBlitz3.ab2@8200>   BEQ fetchpees__skip0_ok
000331D2 <AmiBlitz3.ab2@8201>   CMP.b #$87,25(a2)
000331D6 <AmiBlitz3.ab2@8202>   BEQ fetchpees__skip0_ok
000331DC <AmiBlitz3.ab2@8203>   CMP.b #$88,25(a2)
000331E0 <AmiBlitz3.ab2@8204>   BEQ fetchpees__skip0_ok
000331E6 <AmiBlitz3.ab2@8205>   CMP.b #$83,25(a2)
000331EA <AmiBlitz3.ab2@8206>   BGT fetchpees__skip0_noprint
000331F0 <AmiBlitz3.ab2@8209>   MOVE.l destpointer,a4
000331F6 <AmiBlitz3.ab2@8210>   CMP.w #$2f00,-2(a4)
000331FA <AmiBlitz3.ab2@8211>   BNE fetchpees__skip0_noprint
00033200 <AmiBlitz3.ab2@8212>   SUBQ.l #2,destpointer
00033206 <AmiBlitz3.ab2@8214>   MOVE.l #$f2277400,d1
0003320A <AmiBlitz3.ab2@8215>   BSR writelong                                            ;fmove.d fp0,-(a7)
00033210 <AmiBlitz3.ab2@8216>   ADDQ #4,a2offset
00033216 <AmiBlitz3.ab2@8234>   CLR.b optistring
00033218 <AmiBlitz3.ab2@8235>   MOVEA.l (A7)+,A2
0003321C <AmiBlitz3.ab2@8236>    CMP.w #"@",d0
00033220 <AmiBlitz3.ab2@8237>   BNE fetchpees__skip0_l10
00033224 <AmiBlitz3.ab2@8238>    CMP.b #"@",(a5)
00033228 <AmiBlitz3.ab2@8239>   BNE fetchpees__skip0_l10
0003322E <AmiBlitz3.ab2@8240>   TST.w ininclude
00033232 <AmiBlitz3.ab2@8241>   BNE errorjoin
00033238 <AmiBlitz3.ab2@8242>   MOVEA.l sourceline,A5
0003323A <AmiBlitz3.ab2@8243>            MOVEA.l (A5),A5
00033240 <AmiBlitz3.ab2@8244>            MOVE.l a5,sourceline
00033246 <AmiBlitz3.ab2@8245>            ADDQ.l #1,linenumat
0003324A <AmiBlitz3.ab2@8246>            LEA $9(A5),A5
0003324C <AmiBlitz3.ab2@8247>            MOVEQ #0,d0
00033250 <AmiBlitz3.ab2@8248>            BSR get1bytemain
00033254 <AmiBlitz3.ab2@8251>    CMP.b #32,(a5)+ ;for space after a ,
00033258 <AmiBlitz3.ab2@8252>    BEQ fetchpees__skip0_l10:
0003325A <AmiBlitz3.ab2@8253>    SUBQ.l #1,a5
0003325E <AmiBlitz3.ab2@8255>    CMP.w #"@@",(a5)                                        ;if merge
00033262 <AmiBlitz3.ab2@8256>    BNE fetchpees__skip0_l15
00033266 <AmiBlitz3.ab2@8257>    MOVEM.l d0-d7/a0-a4/a6,-(a7)
0003326C <AmiBlitz3.ab2@8258>    JSR mergeline
00033270 <AmiBlitz3.ab2@8259>    MOVEM.l (a7)+,d0-d7/a0-a4/a6
00033272 <AmiBlitz3.ab2@8279>       SUBQ.w #1,(A7)
00033276 <AmiBlitz3.ab2@8280>    BEQ.w fetchpees__done
0003327A <AmiBlitz3.ab2@8282>     CMP.w #$2C,D0
0003327E <AmiBlitz3.ab2@8284>    BNE overloadfunc
00033282 <AmiBlitz3.ab2@8285> BRA.w fetchpees__loop
00033284 <AmiBlitz3.ab2@8288>   ADDQ.w #2,A7
0003328A <AmiBlitz3.ab2@8289>   MOVE.w (A7)+,partostack
0003328C <AmiBlitz3.ab2@8290>   MOVE.w (A7)+,D1
00033292 <AmiBlitz3.ab2@8291>   CLR.b funccall
00033294 <AmiBlitz3.ab2@8292> RTS
0003329A <AmiBlitz3.ab2@8296>   CLR.b funccall
000332A0 <AmiBlitz3.ab2@8297>   MOVE.w regnum,d1
000332A6 <AmiBlitz3.ab2@8298>   MOVE.l currentfunccall,a4
000332AA <AmiBlitz3.ab2@8299>   CMP.b $20(a4),d1                                         ;increase if more pars
000332AE <AmiBlitz3.ab2@8300>   BLT notparerr
000332B0 <AmiBlitz3.ab2@8303>   MOVE.b (a2)+,d2
000332B8 <AmiBlitz3.ab2@8304>   ADD.w #1,parnum
000332BE <AmiBlitz3.ab2@8305>   TST.b fpu
000332C2 <AmiBlitz3.ab2@8306>   BEQ 'nofpu
000332C6 <AmiBlitz3.ab2@8307>   CMP.b #5,d2
000332CA <AmiBlitz3.ab2@8308>   BNE 'nofpu
000332CC <AmiBlitz3.ab2@8309>   MOVEQ #0,d1
000332D2 <AmiBlitz3.ab2@8310>   MOVE.w regnum,d1
000332DA <AmiBlitz3.ab2@8311>   CMP.w #6,regnum
000332DE <AmiBlitz3.ab2@8312>   BLT 'nostack2
000332E2 <AmiBlitz3.ab2@8317>   MOVE.w #$2c3c,d1
000332E6 <AmiBlitz3.ab2@8318>   BSR writeword
000332EC <AmiBlitz3.ab2@8319>   MOVE.l #$bf800000,d1
000332F0 <AmiBlitz3.ab2@8320>   BSR writelong
000332F4 <AmiBlitz3.ab2@8321>   MOVE.w #$c4ff,d1                                         ;savetemp+regnum
000332FA <AmiBlitz3.ab2@8322>   ADD.w parnum,d1
00033300 <AmiBlitz3.ab2@8323>   JSR Atokejsr
00033306 <AmiBlitz3.ab2@8324>   TST.w dontwrite
0003330A <AmiBlitz3.ab2@8325>   BNE 'l1
00033310 <AmiBlitz3.ab2@8326>   MOVE.l data1start,d1
00033316 <AmiBlitz3.ab2@8327>   MOVE.l destpointer,a4
0003331A <AmiBlitz3.ab2@8328>   ADD.l d1,-4(a4)
00033320 <AmiBlitz3.ab2@8329>   MOVE.l destpointer,d1
00033322 <AmiBlitz3.ab2@8330>   SUBQ.l #4,d1
00033328 <AmiBlitz3.ab2@8331>   SUB.l destbufferstart,d1
0003332A <AmiBlitz3.ab2@8332>   MOVE.l d2,-(a7)
0003332C <AmiBlitz3.ab2@8333>   MOVE.l d1,d2
00033332 <AmiBlitz3.ab2@8334>   JSR addhunkoffset
00033334 <AmiBlitz3.ab2@8335>   MOVE.l (a7)+,d2
00033338 <AmiBlitz3.ab2@8336> BRA 'l1
0003333A <AmiBlitz3.ab2@8339>   ASL.l #7,d1
00033340 <AmiBlitz3.ab2@8340>   OR.l #$F23C5000,d1                                       ;fmove.w #-1,fpx
00033344 <AmiBlitz3.ab2@8341>   BSR writelong
00033346 <AmiBlitz3.ab2@8342>   MOVEQ #-1,d1                                             ;-1
0003334A <AmiBlitz3.ab2@8343>   BSR writeword
0003334E <AmiBlitz3.ab2@8344> BRA 'l1
00033354 <AmiBlitz3.ab2@8347>   MOVE.w regnum,d1
0003335C <AmiBlitz3.ab2@8348>   CMP.w #6,regnum
00033360 <AmiBlitz3.ab2@8349>   BLT 'nostack
00033364 <AmiBlitz3.ab2@8354>   CMP.b #2,d2
00033368 <AmiBlitz3.ab2@8355>   BGT 'nw
0003336C <AmiBlitz3.ab2@8356> BRA 'nos
00033370 <AmiBlitz3.ab2@8365>   CMP.w #7,d2
00033374 <AmiBlitz3.ab2@8366>   BNE 'nos
0003337A <AmiBlitz3.ab2@8367>   ADDQ #4,a2offset
00033380 <AmiBlitz3.ab2@8369>     MOVE.l #$48780000,d1
00033384 <AmiBlitz3.ab2@8370>     BSR writelong
0003338A <AmiBlitz3.ab2@8371>     ADDQ.w #4,a2offset
0003338E <AmiBlitz3.ab2@8372>     MOVE.w #$2f3c,d1
00033392 <AmiBlitz3.ab2@8373>     BSR writeword
00033398 <AmiBlitz3.ab2@8374>     MOVE.l #-1,d1
0003339C <AmiBlitz3.ab2@8375>     BSR writelong
000333A0 <AmiBlitz3.ab2@8376>   BRA 'l1
000333A4 <AmiBlitz3.ab2@8380>   CMP.b #4,d2
000333A8 <AmiBlitz3.ab2@8381>       BNE 'noq
000333AC <AmiBlitz3.ab2@8382>       MOVE.w #$2c3c,d1
000333B0 <AmiBlitz3.ab2@8383>       BSR writeword
000333B6 <AmiBlitz3.ab2@8384>       MOVE.l #$ffff0000,d1
000333BA <AmiBlitz3.ab2@8385>       BSR writelong
000333BE <AmiBlitz3.ab2@8386> BRA 'noq2
000333C2 <AmiBlitz3.ab2@8389>      CMP.b #5,d2
000333C6 <AmiBlitz3.ab2@8390>      BNE 'nof
000333CA <AmiBlitz3.ab2@8391>       MOVE.w #$2c3c,d1
000333CE <AmiBlitz3.ab2@8392>       BSR writeword
000333D4 <AmiBlitz3.ab2@8393>       MOVE.l #$800000c1,d1
000333D8 <AmiBlitz3.ab2@8394>       BSR writelong
000333DC <AmiBlitz3.ab2@8395> BRA 'noq2
000333E0 <AmiBlitz3.ab2@8398>   MOVE.w #$7cff,d1
000333E4 <AmiBlitz3.ab2@8399>   BSR writeword
000333E8 <AmiBlitz3.ab2@8402>   MOVE.w #$c4ff,d1                                         ;savetemp+regnum
000333EE <AmiBlitz3.ab2@8403>   ADD.w parnum,d1
000333F4 <AmiBlitz3.ab2@8404>   JSR Atokejsr
000333FA <AmiBlitz3.ab2@8405>    TST.w dontwrite
000333FE <AmiBlitz3.ab2@8406>    BNE 'l1
00033404 <AmiBlitz3.ab2@8407>    MOVE.l data1start,d1
0003340A <AmiBlitz3.ab2@8408>    MOVE.l destpointer,a4
0003340E <AmiBlitz3.ab2@8409>    ADD.l d1,-4(a4)
00033414 <AmiBlitz3.ab2@8410>    MOVE.l destpointer,d1
00033416 <AmiBlitz3.ab2@8411>    SUBQ.l #4,d1
0003341C <AmiBlitz3.ab2@8412>    SUB.l destbufferstart,d1
0003341E <AmiBlitz3.ab2@8413>    MOVE.l d2,-(a7)
00033420 <AmiBlitz3.ab2@8414>    MOVE.l d1,d2
00033426 <AmiBlitz3.ab2@8415>    JSR addhunkoffset
00033428 <AmiBlitz3.ab2@8416>    MOVE.l (a7)+,d2
0003342C <AmiBlitz3.ab2@8417> BRA 'l1
0003342E <AmiBlitz3.ab2@8420>   ASL.l #8,d1
00033430 <AmiBlitz3.ab2@8421>   ASL.l #1,d1
00033436 <AmiBlitz3.ab2@8422>   OR.l #$203c,d1                                           ;-1
0003343A <AmiBlitz3.ab2@8423>   BSR writeword
00033440 <AmiBlitz3.ab2@8424>   MOVE.l #-1,d1
00033444 <AmiBlitz3.ab2@8425>   CMP.b #4,d2
00033448 <AmiBlitz3.ab2@8426>   BNE 'nq1
0003344E <AmiBlitz3.ab2@8427>   MOVE.l #$ffff0000,d1
00033452 <AmiBlitz3.ab2@8430>   CMP.b #5,d2
00033456 <AmiBlitz3.ab2@8431>   BNE 'nof2
0003345C <AmiBlitz3.ab2@8432>   TST.b fpu
00033460 <AmiBlitz3.ab2@8433>   BNE 'nof2
00033466 <AmiBlitz3.ab2@8434>   MOVE.l #$800000c1,d1
0003346A <AmiBlitz3.ab2@8437>    BSR writelong
0003346E <AmiBlitz3.ab2@8438>    CMP.b #7,d2
00033472 <AmiBlitz3.ab2@8439>    BNE 'l1
00033478 <AmiBlitz3.ab2@8441>      MOVE.l #$48780000,d1
0003347C <AmiBlitz3.ab2@8442>      BSR writelong
00033482 <AmiBlitz3.ab2@8444>    ADDQ.w #4,a2offset                                      ; bug fix for string parameters
00033488 <AmiBlitz3.ab2@8445>    MOVE.l #$594f,d1                                        ; subq #4,a7
0003348C <AmiBlitz3.ab2@8446>    BSR writeword
0003348E <AmiBlitz3.ab2@8449>    SUBQ.w #1,(A7)
00033492 <AmiBlitz3.ab2@8450>    BEQ.w fetchpees__done
00033498 <AmiBlitz3.ab2@8451>    ADDQ.w #1,regnum
0003349C <AmiBlitz3.ab2@8452> BRA 'ol2
0003349E <AmiBlitz3.ab2@8455>    MOVE.w D2,D1
000334A2 <AmiBlitz3.ab2@8456>    ANDI.w #$40,D1
000334A8 <AmiBlitz3.ab2@8457>    MOVE.b D1,partostack
000334AA <AmiBlitz3.ab2@8458>    TST.b D2
000334AE <AmiBlitz3.ab2@8459>     BMI.w handlevara
000334B2 <AmiBlitz3.ab2@8460>    BTST #$5,D2
000334B6 <AmiBlitz3.ab2@8461>     BNE.w handlearr
000334BC <AmiBlitz3.ab2@8462>     MOVE.w regnumstore,-(a7)
000334C2 <AmiBlitz3.ab2@8463>     MOVE.w tempregnum,-(a7)
000334C8 <AmiBlitz3.ab2@8464>     MOVE.w parnum,-(a7)
000334CC <AmiBlitz3.ab2@8465>     BSR.w getap                                        ;recursive entry
000334D2 <AmiBlitz3.ab2@8466>     MOVE.w (a7)+,parnum
000334D8 <AmiBlitz3.ab2@8467>     MOVE.w (a7)+,tempregnum
000334DE <AmiBlitz3.ab2@8468>     MOVE.w (a7)+,regnumstore
000334E2 <AmiBlitz3.ab2@8471>     MOVE.w partostack(PC),D1
000334E6 <AmiBlitz3.ab2@8472>     BEQ.w JL_0_6886
000334EC <AmiBlitz3.ab2@8475>    ADDQ.w #4,a2offset
000334F2 <AmiBlitz3.ab2@8478>    MOVE.w pushdn,D1
000334F8 <AmiBlitz3.ab2@8479>    OR.w regnum,D1
000334FC <AmiBlitz3.ab2@8480>    CMP.w #$3,D2
00033500 <AmiBlitz3.ab2@8481>     BCC.w JL_0_6880
00033506 <AmiBlitz3.ab2@8482>    SUBQ.w #2,a2offset
0003350A <AmiBlitz3.ab2@8483>    ORI.w #$1000,D1
0003350E <AmiBlitz3.ab2@8484>    BSR.w writeword
00033510 <AmiBlitz3.ab2@8485> RTS
00033514 <AmiBlitz3.ab2@8488>   CMP.b #7,d2
00033518 <AmiBlitz3.ab2@8489>    BNE 'l10
00033520 <AmiBlitz3.ab2@8490>    CMP.b #2,optistring
00033526 <AmiBlitz3.ab2@8494>   TST.b iee
0003352A <AmiBlitz3.ab2@8495>   BEQ 'old
0003352E <AmiBlitz3.ab2@8496>   CMP.b #5,d2
00033532 <AmiBlitz3.ab2@8497>   BNE 'old
00033536 <AmiBlitz3.ab2@8500>   BSR.w writeword                                          ;write val to stack
00033538 <AmiBlitz3.ab2@8501> RTS
0003353E <AmiBlitz3.ab2@8504>   SUBQ.w #4,a2offset
00033540 <AmiBlitz3.ab2@8505> RTS
00033546 <AmiBlitz3.ab2@8508>   ADDQ.w #1,regnum
00033548 <AmiBlitz3.ab2@8509> RTS
0003354A <AmiBlitz3.ab2@8513>   MOVEQ.l #$03,D2
0003354E <AmiBlitz3.ab2@8514> BRA.w JL_0_6854
00033552 <AmiBlitz3.ab2@8518>   ANDI.w #$7,D2
00033554 <AmiBlitz3.ab2@8519>   MOVE.w D2,-(A7)
00033558 <AmiBlitz3.ab2@8520>    BSR.w JL_0_A916
0003355C <AmiBlitz3.ab2@8521>   CMP.b #$7,D2                                             ;ignore pnt to $
00033560 <AmiBlitz3.ab2@8522>    BEQ.w JL_0_68C0
00033564 <AmiBlitz3.ab2@8523>   BTST #$E,D2
00033568 <AmiBlitz3.ab2@8524>    BEQ.w JL_0_68B6
0003356C <AmiBlitz3.ab2@8525>   MOVE.b #$3,D2                                            ;pointer to long
00033570 <AmiBlitz3.ab2@8526> BRA.w JL_0_68C0
00033572 <AmiBlitz3.ab2@8529>    TST.b D2
00033576 <AmiBlitz3.ab2@8530>    BNE.w JL_0_68C0
0003357A <AmiBlitz3.ab2@8531>   MOVE.b #$3,D2
0003357C <AmiBlitz3.ab2@8534>   MOVE.w (A7)+,D3
0003357E <AmiBlitz3.ab2@8535>   TST.b D3
00033582 <AmiBlitz3.ab2@8536>    BEQ.w JL_0_68D2
00033584 <AmiBlitz3.ab2@8537>   CMP.b D2,D3
00033588 <AmiBlitz3.ab2@8538>    BEQ.w putalp
0003358C <AmiBlitz3.ab2@8539> BRA.w mismatcherr
00033592 <AmiBlitz3.ab2@8542>   ADDQ.w #2,a2offset
00033596 <AmiBlitz3.ab2@8543>   MOVE.w ptype(PC),D1
0003359A <AmiBlitz3.ab2@8544>    BSR.w writeword
0003359C <AmiBlitz3.ab2@8545>   MOVEQ.l #$00,D1
0003359E <AmiBlitz3.ab2@8546>   MOVE.b D2,D1
000335A2 <AmiBlitz3.ab2@8547>    BSR.w writeword
000335A6 <AmiBlitz3.ab2@8548> BRA.w putalp
000335A8 <AmiBlitz3.ab2@8551>    MOVE.w D2,-(A7)
000335AC <AmiBlitz3.ab2@8552>    BSR.w JL_0_694E
000335B2 <AmiBlitz3.ab2@8553>   BTST #$4,$1(A7)
000335B6 <AmiBlitz3.ab2@8554>    BEQ.w JL_0_6900
000335BA <AmiBlitz3.ab2@8555>    BSR.w JL_0_699A
000335C0 <AmiBlitz3.ab2@8558>    BTST #$3,$1(A7)
000335C4 <AmiBlitz3.ab2@8559>    BEQ.w JL_0_690E
000335C8 <AmiBlitz3.ab2@8560>    BSR.w sendtype
000335CA <AmiBlitz3.ab2@8563>    MOVE.w (A7)+,D2
000335CE <AmiBlitz3.ab2@8564> BRA.w get1bytemain
000335D4 <AmiBlitz3.ab2@8567>   MOVE.w regnum,D1
000335D6 <AmiBlitz3.ab2@8568>   LSL.w #8,D1
000335D8 <AmiBlitz3.ab2@8569>   LSL.w #1,D1
000335DC <AmiBlitz3.ab2@8570>   ORI.w #$7000,D1
000335E2 <AmiBlitz3.ab2@8571>   BTST #$0,$7(A3)
000335E6 <AmiBlitz3.ab2@8572>    BNE.w JL_0_6946                                         ;A Pointer
000335EE <AmiBlitz3.ab2@8573>   CMPI.l #$100,$4(A2)
000335F2 <AmiBlitz3.ab2@8574>    BCC.w arrerr1                                           ;illegal type to send
000335F6 <AmiBlitz3.ab2@8575>   MOVE.b $7(A2),D1
000335FA <AmiBlitz3.ab2@8578>   BSR.w writeword                                          ;moveq #type,d regat
000335FC <AmiBlitz3.ab2@8579>   MOVEQ.l #$02,D2                                          ;just a word.
00033600 <AmiBlitz3.ab2@8580> BRA.w JL_0_685C
00033604 <AmiBlitz3.ab2@8583>   MOVE.b #$3,D1
00033608 <AmiBlitz3.ab2@8584> BRA.w JL_0_693C
0003360C <AmiBlitz3.ab2@8588>    BSR.w get1bytemain                                      ;write array paramter code
00033610 <AmiBlitz3.ab2@8589>    BSR.w getparameter
00033618 <AmiBlitz3.ab2@8590>   BTST #$1,flagmask+1
0003361C <AmiBlitz3.ab2@8591>    BEQ.w syntaxerr
00033620 <AmiBlitz3.ab2@8592>    BSR.w JL_0_8E3C
00033624 <AmiBlitz3.ab2@8593>    BSR.w get1bytemain
00033628 <AmiBlitz3.ab2@8594>   CMP.w #$29,D0                                            ;we just want a() or whatever
0003362C <AmiBlitz3.ab2@8595>    BNE.w syntaxerr
00033632 <AmiBlitz3.ab2@8596>   MOVE.w notshared,D1
00033636 <AmiBlitz3.ab2@8597>    BNE.w noarrayerr
0003363C <AmiBlitz3.ab2@8598>   MOVE.w regnum,D1
0003363E <AmiBlitz3.ab2@8599>   LSL.w #8,D1
00033640 <AmiBlitz3.ab2@8600>   LSL.w #1,D1
00033644 <AmiBlitz3.ab2@8601>   OR.w fbase(PC),D1
0003364A <AmiBlitz3.ab2@8602>    TST.b varmode
0003364E <AmiBlitz3.ab2@8603>    BEQ 'l1
00033652 <AmiBlitz3.ab2@8604>    BCLR #0,d1
00033656 <AmiBlitz3.ab2@8607>    BSR.w writeword
0003365A <AmiBlitz3.ab2@8608>   MOVE.w $4(A3),D1
0003365E <AmiBlitz3.ab2@8609>    BSR.w writeword
00033662 <AmiBlitz3.ab2@8610> BRA.w putalp
00033668 <AmiBlitz3.ab2@8614>   MOVE.w regnum,D1
0003366A <AmiBlitz3.ab2@8615>   LSL.w #8,D1
0003366C <AmiBlitz3.ab2@8616>   LSL.w #1,D1
00033670 <AmiBlitz3.ab2@8617>   OR.w fbase(PC),D1
00033676 <AmiBlitz3.ab2@8618>    TST.b varmode
0003367A <AmiBlitz3.ab2@8619>    BEQ 'l1
0003367E <AmiBlitz3.ab2@8620>    BCLR #0,d1
00033682 <AmiBlitz3.ab2@8623>    BSR.w writeword
00033686 <AmiBlitz3.ab2@8624>   MOVE.w $8(A3),D1
00033688 <AmiBlitz3.ab2@8625>   LSL.w #2,D1
0003368E <AmiBlitz3.ab2@8626>   MOVE.w varmode,D2
00033692 <AmiBlitz3.ab2@8627>    BEQ.w JL_0_69BE
00033694 <AmiBlitz3.ab2@8628>   NEG.w D1
00033698 <AmiBlitz3.ab2@8631>    ADD.w $4(A3),D1
0003369C <AmiBlitz3.ab2@8632>    BSR.w writeword
000336A2 <AmiBlitz3.ab2@8633>   MOVE.w regnum,D1
000336A4 <AmiBlitz3.ab2@8634>   LSL.w #8,D1
000336A6 <AmiBlitz3.ab2@8635>   LSL.w #1,D1
000336AA <AmiBlitz3.ab2@8636>   MOVE.w partostack(PC),D2
000336AE <AmiBlitz3.ab2@8637>    BNE.w JL_0_69F4
000336B6 <AmiBlitz3.ab2@8638>   CMPI.w #$7,regnum
000336BA <AmiBlitz3.ab2@8639>    BCC.w JL_0_69F4
000336BE <AmiBlitz3.ab2@8640>   OR.w pushlast(PC),D1
000336C4 <AmiBlitz3.ab2@8641>   MOVE.w regnum,D2
000336C6 <AmiBlitz3.ab2@8642>   SUBQ.w #1,D2
000336C8 <AmiBlitz3.ab2@8643>   OR.w D2,D1
000336CC <AmiBlitz3.ab2@8644> BRA.w JL_0_69F8
000336D0 <AmiBlitz3.ab2@8647>   OR.w pushadd(PC),D1
000336D4 <AmiBlitz3.ab2@8650>   BSR.w writeword
000336DC <AmiBlitz3.ab2@8651>   MOVE.b #$1,partostack
000336E0 <AmiBlitz3.ab2@8652> BRA.w putalp
000336E4 <AmiBlitz3.ab2@8656> fbase:       Dc.b $20,$2D,$00,$00                           ;MOVE.L  $0000(A5),D0
000336E6 <AmiBlitz3.ab2@8657> pushadd:     Dc.b $D0,$97                                   ;ADD.L (A7),D0
000336E8 <AmiBlitz3.ab2@8658> pushlast:    Dc.b $D0,$80                                   ;ADD.L D0,D0
000336EC <AmiBlitz3.ab2@8663>   ANDI.w #$7,D2                                            ;0-7 (unknown to string)
000336F0 <AmiBlitz3.ab2@8664>    BEQ.w evalu2
000336F4 <AmiBlitz3.ab2@8665> BRA.w eval
000336FA <AmiBlitz3.ab2@8669>   MOVEA.l libpointer,A1
000336FE <AmiBlitz3.ab2@8672>    CMPA.w #$0,A1
00033702 <AmiBlitz3.ab2@8673>    BEQ.w resetlibs__done
00033708 <AmiBlitz3.ab2@8674>   MOVE.w #-1,$A(A1)
0003370E <AmiBlitz3.ab2@8675>   BCLR #$7,$C(A1)
00033710 <AmiBlitz3.ab2@8676>   MOVEA.l (A1),A1
00033714 <AmiBlitz3.ab2@8677> BRA.w resetlibs__loop
00033716 <AmiBlitz3.ab2@8680> RTS
0003371A <AmiBlitz3.ab2@8684>   MOVE.w #$FFFE,D1
0003371E <AmiBlitz3.ab2@8687>    BSR.w JL_0_6F38
00033724 <AmiBlitz3.ab2@8690>   TST.w cfetchmode
00033728 <AmiBlitz3.ab2@8691>    BEQ.w uselib3__noconst
0003372E <AmiBlitz3.ab2@8692>   BTST #$6,$C(A1)
00033732 <AmiBlitz3.ab2@8693>    BNE.w uselib3__constok
00033736 <AmiBlitz3.ab2@8694> BRA.w badconerr                                            ;Can't use this Library!
00033738 <AmiBlitz3.ab2@8697> RTS
0003373E <AmiBlitz3.ab2@8700>    BSET #$7,$C(A1)
00033742 <AmiBlitz3.ab2@8701>    BNE.w JL_0_6C74                                         ;already done....
00033748 <AmiBlitz3.ab2@8702>    CMPI.w #-1,$A(A1)
0003374C <AmiBlitz3.ab2@8703>    BNE.w JL_0_6C74                                         ;something already here
00033752 <AmiBlitz3.ab2@8707>    TST.w dirmode
00033756 <AmiBlitz3.ab2@8708>    BEQ.b JL_0_6A86
0003375C <AmiBlitz3.ab2@8709>    TST.b exdebug
00033760 <AmiBlitz3.ab2@8710>    BEQ 'l1
00033764 <AmiBlitz3.ab2@8711> BRA.b JL_0_6A86
0003376A <AmiBlitz3.ab2@8714>   BCLR #$7,$C(A1)
0003376E <AmiBlitz3.ab2@8715> BRA.w dirliberr
00033774 <AmiBlitz3.ab2@8718>   MOVE.b debugmode,-(a7)
00033778 <AmiBlitz3.ab2@8719>   MOVEM.l D1/A0/A2,-(A7)
00033780 <AmiBlitz3.ab2@8725>   BTST #$7,use_debugger
00033784 <AmiBlitz3.ab2@8726>   BNE 'debugon
00033786 <AmiBlitz3.ab2@8727>   CLR.w D1
0003378A <AmiBlitz3.ab2@8728> BRA.b 'debugoff
0003378C <AmiBlitz3.ab2@8731>   SNE D1
00033792 <AmiBlitz3.ab2@8734>   MOVE.b d1,debugmode
00033794 <AmiBlitz3.ab2@8738>   MOVEA.l A1,A0
00033798 <AmiBlitz3.ab2@8739>   ADDA.l $12(A1),A0
0003379C <AmiBlitz3.ab2@8740>   TST.w -$2(A0)
000337A0 <AmiBlitz3.ab2@8741>    BEQ.w JL_0_6AD2
000337A4 <AmiBlitz3.ab2@8742>   MOVEM.l A0-A1,-(A7)
000337A8 <AmiBlitz3.ab2@8743>   MOVE.w #$FB4F,D1
000337AC <AmiBlitz3.ab2@8744>    BSR.w uselib
000337B0 <AmiBlitz3.ab2@8745>   MOVEM.l (A7)+,A0-A1
000337B6 <AmiBlitz3.ab2@8746>   ADDQ.w #1,globalvarpointer
000337BE <AmiBlitz3.ab2@8747>   BCLR #$0,globalvarpointer+1
000337C6 <AmiBlitz3.ab2@8748>   MOVE.w globalvarpointer,-$6(A0)
000337CC <AmiBlitz3.ab2@8749>   ADDQ.w #4,globalvarpointer
000337D0 <AmiBlitz3.ab2@8750>   TST.l -$E(A0)
000337D4 <AmiBlitz3.ab2@8751>    BEQ.w JL_0_6AD2
000337DA <AmiBlitz3.ab2@8752>   ADDQ.w #4,globalvarpointer
000337E2 <AmiBlitz3.ab2@8755>   MOVE.l libend,$28(A1)
000337E4 <AmiBlitz3.ab2@8756>   MOVEA.l A1,A0
000337E8 <AmiBlitz3.ab2@8757>   ADDA.l $12(A1),A0
000337EA <AmiBlitz3.ab2@8758>   MOVE.l A1,D1
000337EE <AmiBlitz3.ab2@8759>   ADD.l $6(A1),D1
000337F2 <AmiBlitz3.ab2@8760>   TST.l $2C(A1)
000337F6 <AmiBlitz3.ab2@8761>    BEQ.w JL_0_6AFE
000337FC <AmiBlitz3.ab2@8763>   TST.b debugmode
00033800 <AmiBlitz3.ab2@8764>    BNE.w JL_0_6AFE
00033802 <AmiBlitz3.ab2@8765>   MOVE.l A1,D1
00033806 <AmiBlitz3.ab2@8766>   ADD.l $2C(A1),D1
0003380C <AmiBlitz3.ab2@8769>   MOVEA.l libend,A2
00033812 <AmiBlitz3.ab2@8772>   CMPA.l data1start,A2
00033816 <AmiBlitz3.ab2@8773>    BCS.w JL_0_6B24
0003381E <AmiBlitz3.ab2@8774>   MOVE.w #$FFFF,dontwrite
00033820 <AmiBlitz3.ab2@8777>   ADDQ.w #2,A0
00033822 <AmiBlitz3.ab2@8778>   ADDQ.w #2,A2
00033824 <AmiBlitz3.ab2@8779>   CMPA.l D1,A0
00033828 <AmiBlitz3.ab2@8780>    BCS.w JL_0_6B16
0003382C <AmiBlitz3.ab2@8781> BRA.w JL_0_6B2C
0003382E <AmiBlitz3.ab2@8784>   MOVE.w (A0)+,(A2)+                                       ;copylibcode
00033830 <AmiBlitz3.ab2@8785>   CMPA.l D1,A0
00033834 <AmiBlitz3.ab2@8786>    BCS.w JL_0_6B04
0003383A <AmiBlitz3.ab2@8789>   MOVE.l A2,libend
0003383E <AmiBlitz3.ab2@8790>   MOVE.l $20(A1),D1
00033842 <AmiBlitz3.ab2@8791>    BEQ.w JL_0_6BB8
00033846 <AmiBlitz3.ab2@8792>   MOVEM.l D0/D2-D3,-(A7)
0003384A <AmiBlitz3.ab2@8793>   MOVEA.l $24(A1),A0
0003384C <AmiBlitz3.ab2@8794>   MOVEQ.l #$00,D3
0003384E <AmiBlitz3.ab2@8797>   MOVE.l (A0)+,D2
00033852 <AmiBlitz3.ab2@8798>   TST.l $2C(A1)
00033856 <AmiBlitz3.ab2@8799>    BEQ.w JL_0_6B60
0003385C <AmiBlitz3.ab2@8800>   TST.b debugmode
00033860 <AmiBlitz3.ab2@8801>    BNE.w JL_0_6B60
00033864 <AmiBlitz3.ab2@8802>   CMP.l $2C(A1),D2
00033868 <AmiBlitz3.ab2@8803>    BCC.w JL_0_6BA0
0003386C <AmiBlitz3.ab2@8806>   TST.w $0(A1,D2.L)
00033870 <AmiBlitz3.ab2@8807>    BPL.w JL_0_6B72
00033872 <AmiBlitz3.ab2@8808>   TST.l D3
00033876 <AmiBlitz3.ab2@8809>    BNE.w JL_0_6B72
00033878 <AmiBlitz3.ab2@8810>   MOVE.l A0,D0
0003387A <AmiBlitz3.ab2@8811>   MOVE.l D1,D3
0003387E <AmiBlitz3.ab2@8814>   SUB.l $12(A1),D2
00033882 <AmiBlitz3.ab2@8815>    BMI.w JL_0_6BA0
00033886 <AmiBlitz3.ab2@8816>   ADD.l $28(A1),D2
00033888 <AmiBlitz3.ab2@8817>   MOVE.l D2,-(A7)
0003388E <AmiBlitz3.ab2@8818>   SUB.l destbufferstart,D2
00033892 <AmiBlitz3.ab2@8819>    BSR.w addhunkoffset
00033894 <AmiBlitz3.ab2@8820>   MOVEA.l (A7)+,A2
0003389A <AmiBlitz3.ab2@8821>   TST.w dontwrite
0003389E <AmiBlitz3.ab2@8822>    BNE.w JL_0_6BA0
000338A2 <AmiBlitz3.ab2@8823>   MOVE.l $28(A1),D2
000338A6 <AmiBlitz3.ab2@8824>   SUB.l $12(A1),D2
000338A8 <AmiBlitz3.ab2@8825>   ADD.l D2,(A2)
000338AA <AmiBlitz3.ab2@8828>    SUBQ.l #1,D1
000338AE <AmiBlitz3.ab2@8829>    BNE.w JL_0_6B44
000338B0 <AmiBlitz3.ab2@8830>   MOVE.l D3,D2
000338B4 <AmiBlitz3.ab2@8831>    BEQ.w JL_0_6BB4
000338B6 <AmiBlitz3.ab2@8832>   MOVEA.l D0,A2
000338B8 <AmiBlitz3.ab2@8833>   SUBQ.w #4,A2
000338BC <AmiBlitz3.ab2@8834>    BSR.w JL_0_6E34
000338C0 <AmiBlitz3.ab2@8837>    MOVEM.l (A7)+,D0/D2-D3
000338C4 <AmiBlitz3.ab2@8840>    MOVEM.l (A7)+,D1/A0/A2
000338C8 <AmiBlitz3.ab2@8841>   MOVEM.l D1-D2,-(A7)
000338CC <AmiBlitz3.ab2@8842>   TST.w $1A(A1)
000338D0 <AmiBlitz3.ab2@8843>    BNE.w JL_0_6BD0
000338D4 <AmiBlitz3.ab2@8844>   CLR.w $A(A1)
000338D8 <AmiBlitz3.ab2@8845> BRA.w JL_0_6C5E
000338DE <AmiBlitz3.ab2@8848>   ADDQ.w #1,globalvarpointer
000338E6 <AmiBlitz3.ab2@8849>   BCLR #$0,globalvarpointer+1
000338EE <AmiBlitz3.ab2@8850>   MOVE.w globalvarpointer,$A(A1)
000338F2 <AmiBlitz3.ab2@8851>   CMP.w #-$12D,D1
000338F6 <AmiBlitz3.ab2@8852>    BNE.w JL_0_6C16
000338FE <AmiBlitz3.ab2@8853>   MOVE.w $A(A1),movestdn+2
00033906 <AmiBlitz3.ab2@8854>   MOVE.w $A(A1),pusha3+2
0003390E <AmiBlitz3.ab2@8855>   MOVE.w $A(A1),pusha32+2
00033916 <AmiBlitz3.ab2@8856>   MOVE.w $A(A1),pulla3+2
0003391E <AmiBlitz3.ab2@8857>   MOVE.w $A(A1),geta3+2
00033922 <AmiBlitz3.ab2@8860>    CMP.w #-$3E9,D1
00033926 <AmiBlitz3.ab2@8861>    BNE.w JL_0_6C3E
0003392E <AmiBlitz3.ab2@8862>   MOVE.w $A(A1),dataget+2
00033936 <AmiBlitz3.ab2@8863>   MOVE.w $A(A1),dataput+2
0003393E <AmiBlitz3.ab2@8864>   MOVE.w $A(A1),rescode+6
00033946 <AmiBlitz3.ab2@8865>   MOVE.w $A(A1),rescode2+2
0003394C <AmiBlitz3.ab2@8868>   ADDQ.w #2,globalvarpointer
00033950 <AmiBlitz3.ab2@8869>   TST.w $1A(A1)
00033954 <AmiBlitz3.ab2@8870>    BMI.w JL_0_6C52
0003395A <AmiBlitz3.ab2@8871>   ADDQ.w #2,globalvarpointer
0003395E <AmiBlitz3.ab2@8874>   MOVEM.l D1/A1,-(A7)
00033962 <AmiBlitz3.ab2@8875>   BSR.w uselib2
00033966 <AmiBlitz3.ab2@8876>   MOVEM.l (A7)+,D1/A1
00033968 <AmiBlitz3.ab2@8879>   MOVE.w D1,D2
0003396C <AmiBlitz3.ab2@8880>   MOVE.l $16(A1),D1
00033970 <AmiBlitz3.ab2@8881>    BSR.w uselib2_org
00033974 <AmiBlitz3.ab2@8882>   MOVE.l $1C(A1),D1
00033978 <AmiBlitz3.ab2@8883>    BSR.w uselib2_org
0003397C <AmiBlitz3.ab2@8884>   MOVEM.l (A7)+,D1-D2
00033982 <AmiBlitz3.ab2@8886>   MOVE.b (a7)+,debugmode
00033984 <AmiBlitz3.ab2@8889> RTS
00033986 <AmiBlitz3.ab2@8893>   MOVEQ.l #$00,D2
0003398C <AmiBlitz3.ab2@8896>   MOVEA.l tokeslist,A2
0003398E <AmiBlitz3.ab2@8897>   CMPA.l D2,A2
00033992 <AmiBlitz3.ab2@8898>    BEQ.w JL_0_6CE0
00033994 <AmiBlitz3.ab2@8899>   MOVE.l A2,-(A7)
00033996 <AmiBlitz3.ab2@8902>   MOVEQ.l #$00,D3
0003399A <AmiBlitz3.ab2@8905>   MOVEA.l $8(A2),A3
0003399C <AmiBlitz3.ab2@8906>   CMPA.l D3,A3
000339A0 <AmiBlitz3.ab2@8907>    BEQ.w JL_0_6CD2
000339A2 <AmiBlitz3.ab2@8908>   MOVE.l A3,-(A7)
000339A6 <AmiBlitz3.ab2@8909>   MOVEM.l D2-D3/A2-A3,-(A7)
000339AA <AmiBlitz3.ab2@8910>   MOVE.w $4(A2),D1
000339AE <AmiBlitz3.ab2@8911>   MOVE.w $6(A2),D2
000339B2 <AmiBlitz3.ab2@8912>    BSR.w JL_0_6CE2
000339B6 <AmiBlitz3.ab2@8913>   MOVEM.l (A7)+,D2-D3/A2-A3
000339BC <AmiBlitz3.ab2@8914>   MOVE.w dontwrite,D0
000339C0 <AmiBlitz3.ab2@8915>    BEQ.w JL_0_6CBE
000339C2 <AmiBlitz3.ab2@8918>   MOVEA.l (A3),A3
000339C4 <AmiBlitz3.ab2@8919>   CMPA.l D3,A3
000339C8 <AmiBlitz3.ab2@8920>    BNE.w JL_0_6CB2
000339CC <AmiBlitz3.ab2@8921> BRA.w JL_0_6CCC
000339D0 <AmiBlitz3.ab2@8924>   MOVEA.l $4(A3),A0
000339D2 <AmiBlitz3.ab2@8925>   MOVE.l D7,(A0)
000339D4 <AmiBlitz3.ab2@8926>   MOVEA.l (A3),A3
000339D6 <AmiBlitz3.ab2@8927>   CMPA.l D3,A3
000339DA <AmiBlitz3.ab2@8928>    BNE.w JL_0_6CBE
000339DC <AmiBlitz3.ab2@8931>   MOVE.l (A7)+,D3
000339E0 <AmiBlitz3.ab2@8932> BRA.w JL_0_6C88
000339E2 <AmiBlitz3.ab2@8935>    MOVEA.l (A2),A2
000339E4 <AmiBlitz3.ab2@8936>   CMPA.l D2,A2
000339E8 <AmiBlitz3.ab2@8937>    BNE.w JL_0_6C86
000339EA <AmiBlitz3.ab2@8938>   MOVE.l (A7)+,D2
000339EE <AmiBlitz3.ab2@8939> BRA.w JL_0_6C78
000339F0 <AmiBlitz3.ab2@8942> RTS
000339F2 <AmiBlitz3.ab2@8946>   MOVE.w D2,-(A7)
000339F6 <AmiBlitz3.ab2@8947>    BSR.w searchinstr
000339F8 <AmiBlitz3.ab2@8948>   MOVE.w (A7)+,D2
00033A00 <AmiBlitz3.ab2@8949>   BCLR #$7,blitzmode
00033A04 <AmiBlitz3.ab2@8950>   BCLR #$E,D2
00033A08 <AmiBlitz3.ab2@8951>    BEQ.w JL_0_6D02
00033A10 <AmiBlitz3.ab2@8952>   BSET #$7,blitzmode
00033A12 <AmiBlitz3.ab2@8955>   TST.w (A3)
00033A16 <AmiBlitz3.ab2@8956>    BEQ.w JL_0_6DAC
00033A1C <AmiBlitz3.ab2@8957>   BTST #$2,$1(A3)
00033A20 <AmiBlitz3.ab2@8958>    BNE.w tokeerr
00033A26 <AmiBlitz3.ab2@8959>   BTST #$3,$1(A3)
00033A2A <AmiBlitz3.ab2@8960>    BNE.w tokeerr
00033A2E <AmiBlitz3.ab2@8961>   LEA $6(A3),A3
00033A30 <AmiBlitz3.ab2@8964>   MOVE.w (A3)+,D0
00033A34 <AmiBlitz3.ab2@8965>    BMI.w tokeerr
00033A38 <AmiBlitz3.ab2@8966>   ANDI.w #$FF,D0
00033A3A <AmiBlitz3.ab2@8967>   ADDA.w D0,A3
00033A3C <AmiBlitz3.ab2@8968>   ADDQ.w #1,A3
00033A3E <AmiBlitz3.ab2@8969>   EXG.l D0,A3
00033A42 <AmiBlitz3.ab2@8970>   BCLR #$0,D0
00033A44 <AmiBlitz3.ab2@8971>   EXG.l D0,A3
00033A46 <AmiBlitz3.ab2@8972>   SUBQ.w #1,D2
00033A4A <AmiBlitz3.ab2@8973>    BPL.w JL_0_6D98
00033A4C <AmiBlitz3.ab2@8974>   TST.w (A3)
00033A50 <AmiBlitz3.ab2@8975>    BNE.w JL_0_6D76
00033A54 <AmiBlitz3.ab2@8976>   MOVE.l $2(A3),D0
00033A58 <AmiBlitz3.ab2@8977>   OR.l $A(A3),D0
00033A5C <AmiBlitz3.ab2@8978>    BNE.w JL_0_6D76
00033A62 <AmiBlitz3.ab2@8979>   BTST #$0,$9(A3)
00033A66 <AmiBlitz3.ab2@8980>    BNE.w JL_0_6D76
00033A6A <AmiBlitz3.ab2@8981>   MOVE.l $6(A3),D7
00033A6E <AmiBlitz3.ab2@8982>   MOVE.w $0(A2,D7.L),D0
00033A72 <AmiBlitz3.ab2@8983>   ANDI.w #$F000,D0
00033A76 <AmiBlitz3.ab2@8984>   CMP.w #-$6000,D0
00033A7A <AmiBlitz3.ab2@8985>    BEQ.w JL_0_6D76
00033A7E <AmiBlitz3.ab2@8988>   SUB.l $12(A2),D7
00033A82 <AmiBlitz3.ab2@8989>   ADD.l $28(A2),D7
00033A84 <AmiBlitz3.ab2@8990> RTS
00033A8A <AmiBlitz3.ab2@8994>   LEA cutejsr,A0
00033A90 <AmiBlitz3.ab2@8997>   MOVE.l destpointer,-(A7)
00033A98 <AmiBlitz3.ab2@8998>   MOVE.w #$FFFF,lasta6
00033A9A <AmiBlitz3.ab2@9001>    JSR (A0)
00033A9E <AmiBlitz3.ab2@9002>   MOVE.w #$4E75,D1
00033AA2 <AmiBlitz3.ab2@9003>    BSR.w writeword
00033AA4 <AmiBlitz3.ab2@9004>   MOVE.l (A7)+,D7
00033AA6 <AmiBlitz3.ab2@9005> RTS
00033AA8 <AmiBlitz3.ab2@9009>   TST.w (A3)+
00033AAC <AmiBlitz3.ab2@9010>    BEQ.w JL_0_6DA4
00033AAE <AmiBlitz3.ab2@9011>   ADDQ.w #2,A3
00033AB2 <AmiBlitz3.ab2@9012> BRA.w JL_0_6D98
00033AB6 <AmiBlitz3.ab2@9015>   LEA $C(A3),A3
00033ABA <AmiBlitz3.ab2@9016> BRA.w JL_0_6D20
00033ABC <AmiBlitz3.ab2@9020>   TST.w D2
00033AC0 <AmiBlitz3.ab2@9021>    BNE.w tokeerr
00033AC4 <AmiBlitz3.ab2@9022>   TST.w $6(A3)
00033AC8 <AmiBlitz3.ab2@9023>    BNE.w JL_0_6DE4
00033ACC <AmiBlitz3.ab2@9024>   MOVE.l $8(A3),D0
00033AD0 <AmiBlitz3.ab2@9025>   OR.l $10(A3),D0
00033AD4 <AmiBlitz3.ab2@9026>    BNE.w JL_0_6DE4
00033ADA <AmiBlitz3.ab2@9027>   BTST #$0,$F(A3)
00033ADE <AmiBlitz3.ab2@9028>    BNE.w JL_0_6DE4
00033AE2 <AmiBlitz3.ab2@9029>   MOVE.l $C(A3),D7
00033AE6 <AmiBlitz3.ab2@9030>   MOVE.w $0(A2,D7.L),D0
00033AEA <AmiBlitz3.ab2@9031>   ANDI.w #$F000,D0
00033AEE <AmiBlitz3.ab2@9032>   CMP.w #-$6000,D0
00033AF2 <AmiBlitz3.ab2@9033>    BNE.w JL_0_6D6C
00033AF4 <AmiBlitz3.ab2@9036>   MOVE.l A3,D1
00033AF6 <AmiBlitz3.ab2@9037>   SUB.l A2,D1
00033AFC <AmiBlitz3.ab2@9038>   LEA Amakelibsub,A0
00033B00 <AmiBlitz3.ab2@9039> BRA.w JL_0_6D7C
00033B06 <AmiBlitz3.ab2@9043>   MOVEA.l _execbase,A6
00033B0C <AmiBlitz3.ab2@9044>   MOVEA.l tokeslist,A2
00033B12 <AmiBlitz3.ab2@9045>   CLR.l tokeslist
00033B16 <AmiBlitz3.ab2@9048>     CMPA.w #$0,A2
00033B1A <AmiBlitz3.ab2@9049>      BEQ.w JL_0_6E32
00033B1E <AmiBlitz3.ab2@9050>     MOVEA.l $8(A2),A3
00033B22 <AmiBlitz3.ab2@9053>       CMPA.w #$0,A3
00033B26 <AmiBlitz3.ab2@9054>        BEQ.w JL_0_6E24
00033B28 <AmiBlitz3.ab2@9055>       MOVEA.l A3,A1
00033B2A <AmiBlitz3.ab2@9056>       MOVEA.l (A3),A3
00033B2C <AmiBlitz3.ab2@9057>       MOVEQ.l #$08,D0
00033B32 <AmiBlitz3.ab2@9058>       MOVE.l mempool,a0
00033B38 <AmiBlitz3.ab2@9059>       MOVEA.l _execbase,A6
00033B3C <AmiBlitz3.ab2@9060>       JSR _FreePooled(A6)
00033B40 <AmiBlitz3.ab2@9061> BRA.w JL_0_6E0E
00033B42 <AmiBlitz3.ab2@9064>     MOVEA.l A2,A1
00033B44 <AmiBlitz3.ab2@9065>     MOVEA.l (A2),A2
00033B46 <AmiBlitz3.ab2@9066>     MOVEQ.l #$0C,D0
00033B4C <AmiBlitz3.ab2@9067>     MOVE.l mempool,a0
00033B52 <AmiBlitz3.ab2@9068>     MOVEA.l _execbase,A6
00033B56 <AmiBlitz3.ab2@9069>     JSR _FreePooled(A6)
00033B5A <AmiBlitz3.ab2@9070> BRA.w JL_0_6E02
00033B5C <AmiBlitz3.ab2@9073> RTS
00033B60 <AmiBlitz3.ab2@9077>   MOVEM.l D3-D5/A1-A6,-(A7)
00033B62 <AmiBlitz3.ab2@9078>   MOVEA.l A1,A4
00033B64 <AmiBlitz3.ab2@9081>   MOVE.l (A2)+,D3
00033B68 <AmiBlitz3.ab2@9082>   MOVE.w $0(A4,D3.L),D5
00033B6C <AmiBlitz3.ab2@9083>    BPL.w JL_0_6E7A
00033B70 <AmiBlitz3.ab2@9084>   TST.l $2C(A4)
00033B74 <AmiBlitz3.ab2@9085>    BEQ.w JL_0_6E5E
00033B7A <AmiBlitz3.ab2@9086>   TST.b debugmode
00033B7E <AmiBlitz3.ab2@9087>    BNE.w JL_0_6E5E
00033B82 <AmiBlitz3.ab2@9088>   CMP.l $2C(A4),D3
00033B86 <AmiBlitz3.ab2@9089>    BCC.w JL_0_6E7A
00033B8A <AmiBlitz3.ab2@9092>   BCLR #$F,D5
00033B8E <AmiBlitz3.ab2@9093>   MOVE.w $2(A4,D3.L),D4
00033B92 <AmiBlitz3.ab2@9094>   SUB.l $12(A4),D3
00033B96 <AmiBlitz3.ab2@9095>   ADD.l $28(A4),D3
00033B9A <AmiBlitz3.ab2@9096>   MOVEM.l D2/A2/A4,-(A7)
00033B9E <AmiBlitz3.ab2@9097>    BSR.w JL_0_6E86
00033BA2 <AmiBlitz3.ab2@9098>   MOVEM.l (A7)+,D2/A2/A4
00033BA4 <AmiBlitz3.ab2@9101>   SUBQ.l #1,D2
00033BA8 <AmiBlitz3.ab2@9102>    BNE.w JL_0_6E3A
00033BAC <AmiBlitz3.ab2@9103>   MOVEM.l (A7)+,D3-D5/A1-A6
00033BAE <AmiBlitz3.ab2@9104> RTS
00033BB4 <AmiBlitz3.ab2@9108>   LEA tokeslist,A3
00033BBA <AmiBlitz3.ab2@9109>   MOVEA.l _execbase,A6
00033BBC <AmiBlitz3.ab2@9112>   MOVE.l (A3),D0
00033BC0 <AmiBlitz3.ab2@9113>    BEQ.w JL_0_6EAC
00033BC2 <AmiBlitz3.ab2@9114>   MOVEA.l D0,A3
00033BC6 <AmiBlitz3.ab2@9115>   CMP.w $4(A3),D4
00033BCA <AmiBlitz3.ab2@9116>    BNE.w JL_0_6E90
00033BCE <AmiBlitz3.ab2@9117>   CMP.w $6(A3),D5
00033BD2 <AmiBlitz3.ab2@9118>    BNE.w JL_0_6E90
00033BD6 <AmiBlitz3.ab2@9119> BRA.w JL_0_6ED0
00033BD8 <AmiBlitz3.ab2@9122>   MOVEQ.l #$0C,D0
00033BDA <AmiBlitz3.ab2@9123>   MOVEQ.l #$01,D1
00033BE0 <AmiBlitz3.ab2@9124>   MOVE.l mempool,a0
00033BE4 <AmiBlitz3.ab2@9125>   JSR _AllocPooled(a6)
00033BE6 <AmiBlitz3.ab2@9127>   MOVEA.l D0,A3
00033BEC <AmiBlitz3.ab2@9128>   MOVE.l tokeslist,(A3)
00033BF2 <AmiBlitz3.ab2@9129>   MOVE.l A3,tokeslist
00033BF6 <AmiBlitz3.ab2@9130>   MOVE.w D4,$4(A3)
00033BFA <AmiBlitz3.ab2@9131>   MOVE.w D5,$6(A3)
00033BFE <AmiBlitz3.ab2@9132>   CLR.l $8(A3)
00033C00 <AmiBlitz3.ab2@9135>   MOVEQ.l #$08,D0
00033C02 <AmiBlitz3.ab2@9136>   MOVEQ.l #$01,D1
00033C08 <AmiBlitz3.ab2@9137>   MOVE.l mempool,a0
00033C0C <AmiBlitz3.ab2@9138>   JSR _AllocPooled(a6)
00033C0E <AmiBlitz3.ab2@9140>   MOVEA.l D0,A0
00033C12 <AmiBlitz3.ab2@9141>   MOVE.l D3,$4(A0)
00033C16 <AmiBlitz3.ab2@9142>   MOVE.l $8(A3),(A0)
00033C1A <AmiBlitz3.ab2@9143>   MOVE.l A0,$8(A3)
00033C1C <AmiBlitz3.ab2@9144>   MOVE.w D4,D1
00033C20 <AmiBlitz3.ab2@9145> BRA.w searchinstr
00033C24 <AmiBlitz3.ab2@9148> tokeslist: Ds.l 1
00033C28 <AmiBlitz3.ab2@9161>   BEQ.w uselib2_org__skip
00033C2A <AmiBlitz3.ab2@9162>   MOVE.l A1,-(A7)
00033C2C <AmiBlitz3.ab2@9163>   ADDA.l D1,A1
00033C2E <AmiBlitz3.ab2@9164>   ADDQ.w #6,A1
00033C30 <AmiBlitz3.ab2@9167>     MOVE.w (A1)+,D1
00033C34 <AmiBlitz3.ab2@9168>     BEQ.w uselib2_org__done
00033C36 <AmiBlitz3.ab2@9169>     CMP.w D2,D1
00033C3A <AmiBlitz3.ab2@9170>     BEQ.w uselib2_org__skip2
00033C3C <AmiBlitz3.ab2@9171>     MOVE.l A1,-(A7)
00033C40 <AmiBlitz3.ab2@9172>     BSR.w uselib
00033C42 <AmiBlitz3.ab2@9173>     MOVEA.l (A7)+,A1
00033C44 <AmiBlitz3.ab2@9176>     ADDQ.w #2,A1
00033C48 <AmiBlitz3.ab2@9177> BRA.w uselib2_org__loop
00033C4A <AmiBlitz3.ab2@9180>   MOVEA.l (A7)+,A1
00033C4C <AmiBlitz3.ab2@9183> RTS
00033C52 <AmiBlitz3.ab2@9187>   MOVEA.l libpointer,A1
00033C56 <AmiBlitz3.ab2@9190>   CMPA.w #$0,A1
00033C5A <AmiBlitz3.ab2@9191>    BEQ.b JL_0_6F36
00033C5E <AmiBlitz3.ab2@9192>   CMP.w $4(A1),D1
00033C62 <AmiBlitz3.ab2@9193>    BEQ.w JL_0_6F34
00033C64 <AmiBlitz3.ab2@9194>   MOVEA.l (A1),A1
00033C68 <AmiBlitz3.ab2@9195> BRA.w JL_0_6F20
00033C6A <AmiBlitz3.ab2@9198>   MOVEQ.l #-$01,D1
00033C6C <AmiBlitz3.ab2@9201> RTS
00033C70 <AmiBlitz3.ab2@9205>   MOVEM.l d0/a2,-(a7)
00033C72 <AmiBlitz3.ab2@9206>   MOVEQ #0,d0
00033C78 <AmiBlitz3.ab2@9207>   LEA instrtab+4,a2
00033C7A <AmiBlitz3.ab2@9208>   MOVE.w d1,d0
00033C7C <AmiBlitz3.ab2@9209>   ASL.l #3,d0
00033C80 <AmiBlitz3.ab2@9210>   MOVE.l 0(a2,d0.l),a1                                     ;*8
00033C86 <AmiBlitz3.ab2@9211>   CMP.l #0,a1
00033C8A <AmiBlitz3.ab2@9212>   BNE JL_0_6F54b
00033C90 <AmiBlitz3.ab2@9214>   MOVEA.l libpointer,A1
00033C94 <AmiBlitz3.ab2@9217>     CMPA.w #$0,A1
00033C98 <AmiBlitz3.ab2@9218>     BEQ.w noliberr
00033C9C <AmiBlitz3.ab2@9219>     CMP.w $4(A1),D1
00033CA0 <AmiBlitz3.ab2@9220>     BEQ.w JL_0_6F54
00033CA2 <AmiBlitz3.ab2@9221>    MOVEA.l (A1),A1
00033CA6 <AmiBlitz3.ab2@9222> BRA.w JL_0_6F3E
00033CAA <AmiBlitz3.ab2@9225>   MOVE.l a1,0(a2,d0.l)
00033CAE <AmiBlitz3.ab2@9228>   MOVEM.l (a7)+,d0/a2
00033CB0 <AmiBlitz3.ab2@9229> RTS
00033CB4 <AmiBlitz3.ab2@9232>   MOVEM.l d0-d1/a1,-(a7)
00033CB6 <AmiBlitz3.ab2@9233>   MOVEQ #0,d0
00033CBC <AmiBlitz3.ab2@9234>   LEA instrtab,a1
00033CBE <AmiBlitz3.ab2@9235>   MOVE.w d1,d0
00033CC0 <AmiBlitz3.ab2@9236>   ASL.l #3,d0
00033CC4 <AmiBlitz3.ab2@9237>   MOVE.l 0(a1,d0.l),a3
00033CC8 <AmiBlitz3.ab2@9238>   MOVE.l 4(a1,d0.l),a2
00033CCE <AmiBlitz3.ab2@9239>   CMP.l #0,a3
00033CD2 <AmiBlitz3.ab2@9240>   BNE JL_0_6F92b
00033CD8 <AmiBlitz3.ab2@9242>   MOVEA.l libpointer,A2
00033CDC <AmiBlitz3.ab2@9245>   CMPA.w #$0,A2
00033CE0 <AmiBlitz3.ab2@9246>   BEQ.w notokerr
00033CE4 <AmiBlitz3.ab2@9247>   CMP.w $E(A2),D1
00033CE8 <AmiBlitz3.ab2@9248>   BCS.w JL_0_6FB8
00033CEC <AmiBlitz3.ab2@9249>   CMP.w $10(A2),D1
00033CF0 <AmiBlitz3.ab2@9250>   BCC.w JL_0_6FB8
00033CF4 <AmiBlitz3.ab2@9251>   LEA $30(A2),A3
00033CF8 <AmiBlitz3.ab2@9252>   TST.w $4(A2)
00033CFC <AmiBlitz3.ab2@9253>   BPL.w JL_0_6FA6
00033D00 <AmiBlitz3.ab2@9256>     CMP.w $E(A2),D1
00033D04 <AmiBlitz3.ab2@9257>     BEQ.w JL_0_6F92
00033D06 <AmiBlitz3.ab2@9258>     SUBQ.w #1,D1
00033D0A <AmiBlitz3.ab2@9259>     MOVEA.l $2(A3),A3
00033D0E <AmiBlitz3.ab2@9260> BRA.w JL_0_6F80
00033D12 <AmiBlitz3.ab2@9263>   MOVE.l a3,0(a1,d0.l)
00033D16 <AmiBlitz3.ab2@9264>   MOVE.l a2,4(a1,d0.l)
00033D1A <AmiBlitz3.ab2@9267>   MOVEM.l (a7)+,d0-d1/a1
00033D1E <AmiBlitz3.ab2@9268>   MOVEM.l D1/A1-a3,-(A7)
00033D22 <AmiBlitz3.ab2@9269>   CMP.w #1,(a3)
00033D26 <AmiBlitz3.ab2@9270>   BNE.s ex10
00033D2E <AmiBlitz3.ab2@9271>   CMP.l #$12345678,$e(a3)
00033D32 <AmiBlitz3.ab2@9272>   BNE.s ex10
00033D38 <AmiBlitz3.ab2@9273>   CMP.w #$ffff,$16(a3)
00033D3C <AmiBlitz3.ab2@9274>   BNE.s ex10
00033D40 <AmiBlitz3.ab2@9275>   MOVE.l $12(a3),d1
00033D44 <AmiBlitz3.ab2@9276>   BEQ.s ex10
00033D4A <AmiBlitz3.ab2@9277>   LEA pluginbase,a3
00033D4E <AmiBlitz3.ab2@9279> JMP 0(a2,d1.l)                                             ;plugin
00033D52 <AmiBlitz3.ab2@9282>   MOVEM.l (A7)+,D1/A1-a3
00033D58 <AmiBlitz3.ab2@9283>   JSR stripspaces
00033D5A <AmiBlitz3.ab2@9284>   MOVEQ #0,d0
00033D5C <AmiBlitz3.ab2@9285>   MOVE.b (a5)+,d0
00033D62 <AmiBlitz3.ab2@9286>   MOVE.w d0,lastchar
00033D64 <AmiBlitz3.ab2@9287>   ADDQ.l #4,a7
00033D66 <AmiBlitz3.ab2@9288> RTS
00033D68 <AmiBlitz3.ab2@9292>   MOVEA.l A2,A1
00033D6E <AmiBlitz3.ab2@9293>   CLR.b newmode
00033D72 <AmiBlitz3.ab2@9294>   MOVE.w $4(A1),D1
00033D76 <AmiBlitz3.ab2@9297>   BSR.w uselib3
00033D7A <AmiBlitz3.ab2@9298>   MOVEM.l (A7)+,D1/A1-a3
00033D7C <AmiBlitz3.ab2@9299> RTS
00033D82 <AmiBlitz3.ab2@9302>   MOVE.w globalvarpointer,-(a7)
00033D8A <AmiBlitz3.ab2@9303>   MOVE.w #$8004,globalvarpointer
00033D8E <AmiBlitz3.ab2@9304>   BSR.w uselib3
00033D94 <AmiBlitz3.ab2@9305>   MOVE.w (a7)+,globalvarpointer
00033D98 <AmiBlitz3.ab2@9306>   MOVEM.l (A7)+,D1/A1-a3
00033D9A <AmiBlitz3.ab2@9307> RTS
00033D9E <AmiBlitz3.ab2@9310>     CMP.w $E(A2),D1
00033DA2 <AmiBlitz3.ab2@9311>     BEQ.w JL_0_6F92
00033DA4 <AmiBlitz3.ab2@9312>     SUBQ.w #1,D1
00033DA8 <AmiBlitz3.ab2@9313>     MOVEA.l $2(A3),A3
00033DAC <AmiBlitz3.ab2@9314> BRA.w JL_0_6FA6
00033DAE <AmiBlitz3.ab2@9317>   MOVEA.l (A2),A2
00033DB2 <AmiBlitz3.ab2@9318> BRA.w JL_0_6F5C
00033DB8 <AmiBlitz3.ab2@9321> JMP writeword
00033DBC <AmiBlitz3.ab2@9324> ptr_acidlibs:   Ds.l 1                                     ;deflibsat org source
00033DC0 <AmiBlitz3.ab2@9325> ptr_deflibs:    Ds.l 1                                     ;acidlibsat org source
00033DC4 <AmiBlitz3.ab2@9326> ptr_userlibs:   Ds.l 1                                     ;blitzlibsat org source  ;;start of blitzlibs list!
00033DC6 <AmiBlitz3.ab2@9332>   TST.l D0
00033DCA <AmiBlitz3.ab2@9333>   BEQ.w exit_loadlibsfile
00033DCC <AmiBlitz3.ab2@9334>     MOVE.l D0,D6                                           ;d6=len
00033DD2 <AmiBlitz3.ab2@9335>     MOVEA.l _dosbase,A6
00033DD8 <AmiBlitz3.ab2@9336>     MOVE.l #HUNK_RELOC_16__MODE_OLDFILE,D2
00033DDC <AmiBlitz3.ab2@9337>     JSR _Open(A6)
00033DDE <AmiBlitz3.ab2@9338>     MOVE.l D0,D7
00033DE2 <AmiBlitz3.ab2@9339>     BEQ.w exit_loadlibsfile
00033DE4 <AmiBlitz3.ab2@9340>       MOVE.l D6,D0
00033DE6 <AmiBlitz3.ab2@9341>       MOVEQ.l #$01,D1
00033DEC <AmiBlitz3.ab2@9342>       MOVEA.l _execbase,A6
00033DF2 <AmiBlitz3.ab2@9343>       MOVE.l mempool,a0
00033DF6 <AmiBlitz3.ab2@9344>       JSR _AllocPooled(a6)
00033DF8 <AmiBlitz3.ab2@9345>       MOVE.l D0,D5                                         ;start address
00033DFA <AmiBlitz3.ab2@9347>       MOVE.l D7,D1                                         ; handle
00033DFC <AmiBlitz3.ab2@9348>       MOVE.l D5,D2                                         ; buffer addr
00033DFE <AmiBlitz3.ab2@9349>       MOVE.l D6,D3                                         ; size
00033E04 <AmiBlitz3.ab2@9350>       MOVEA.l _dosbase,A6
00033E08 <AmiBlitz3.ab2@9351>       JSR _Read(A6)
00033E0A <AmiBlitz3.ab2@9352>       MOVE.l D7,D1
00033E0E <AmiBlitz3.ab2@9353>       JSR _Close(A6)
00033E10 <AmiBlitz3.ab2@9355>       MOVEA.l D5,A0                                        ; buffer addr
00033E12 <AmiBlitz3.ab2@9361>         MOVE.l (A0)+,D0                                    ; naechster Longwert nach DO
00033E16 <AmiBlitz3.ab2@9362>         BEQ.b JL_0_7044                                    ; wenn <> 0, dann
00033E1A <AmiBlitz3.ab2@9363>           LEA $20(A0),A1                                   ;   lade inhalt von D0+40bytes nach A1
00033E1C <AmiBlitz3.ab2@9364>           MOVE.l A1,(A3)                                   ;   kopiere Adresse in A1 zum libpointer
00033E1E <AmiBlitz3.ab2@9365>           MOVEA.l A1,A3                                    ;   kopiere A1 nach A3
00033E20 <AmiBlitz3.ab2@9366>           ADDA.l D0,A0                                     ;   addiere inhalt von D0 zu A0 hinzu
00033E24 <AmiBlitz3.ab2@9367>           MOVE.l -$4(A1),D0                                ;   hole die 4bytes vor nach D0
00033E26 <AmiBlitz3.ab2@9368>           ADD.l D0,D0                                      ;   verdoppele D0
00033E28 <AmiBlitz3.ab2@9369>           ADD.l D0,D0                                      ;   verdoppele D0 nochmal
00033E2C <AmiBlitz3.ab2@9370>           MOVE.l D0,$6(A1)                                 ;   schreibe D0 6bytes nach A1
00033E30 <AmiBlitz3.ab2@9371>           CLR.l $20(A1)                                    ;   loesche D0+40bytes
00033E34 <AmiBlitz3.ab2@9372>           LEA $C(A1,D0.L),A2                               ;   lade inhalt von (A1)+D0+$C nach A2
00033E36 <AmiBlitz3.ab2@9373>           CMPA.l A0,A2
00033E3A <AmiBlitz3.ab2@9374>           BCC.b JL_0_7010                                  ; wenn A0=>A2
00033E40 <AmiBlitz3.ab2@9375>             MOVE.l -$8(A2),$20(A1)                         ;

00033E44 <AmiBlitz3.ab2@9376>             MOVE.l A2,$24(A1)                              ;

00033E48 <AmiBlitz3.ab2@9377> BRA.w JL_0_7010
00033E4A <AmiBlitz3.ab2@9380>       MOVE.l D5,D0
00033E4C <AmiBlitz3.ab2@9383> RTS
00033E76 <AmiBlitz3.ab2@9387>   !basic
00033EEA <AmiBlitz3.ab2@9388>    tempmapping$ = dos_AddPart{my_systemdir$,"token_mapping_userlibs.txt"}
00033F1E <AmiBlitz3.ab2@9389>    dos_Delete{tempmapping$}
00033F62 <AmiBlitz3.ab2@9390>    fid.l = file_Open{tempmapping$,#file_forcewrite}
00033F80 <AmiBlitz3.ab2@9391>   !asm
00033F86 <AmiBlitz3.ab2@9393>   LEA libpointer,A3
00033F8C <AmiBlitz3.ab2@9397>   MOVE.l size_deflibs,D0
00033F92 <AmiBlitz3.ab2@9398>   MOVE.l deflib,d1
00033F96 <AmiBlitz3.ab2@9399>   BEQ 'l1
00033F9A <AmiBlitz3.ab2@9400> BRA 'l2
00033FA0 <AmiBlitz3.ab2@9403>   MOVE.l #str_path_deflibs,D1
00033FA4 <AmiBlitz3.ab2@9406>   BSR.w load_libsfile
00033FAA <AmiBlitz3.ab2@9407>   MOVE.l D0,ptr_deflibs
00033FB0 <AmiBlitz3.ab2@9410>   MOVE.l size_acidlibs,D0
00033FB6 <AmiBlitz3.ab2@9411>   MOVE.l #str_path_acidlibs,D1
00033FBA <AmiBlitz3.ab2@9412>   BSR.w load_libsfile
00033FC0 <AmiBlitz3.ab2@9413>   MOVE.l D0,ptr_acidlibs
00033FC2 <AmiBlitz3.ab2@9417>   CLR.l (A3)
00033FC8 <AmiBlitz3.ab2@9418>   MOVE.l A3,ptr_userlibs
00033FCE <AmiBlitz3.ab2@9423>   LEA str_libfilename,A0
00033FD4 <AmiBlitz3.ab2@9424>   LEA str_path_userlibs,A1
00033FD6 <AmiBlitz3.ab2@9427>     MOVE.b (A1)+,(A0)+
00033FDA <AmiBlitz3.ab2@9428>   BNE.b JL_0_708E
00033FDC <AmiBlitz3.ab2@9430>   SUBQ.w #1,A0
00033FE0 <AmiBlitz3.ab2@9431>   MOVE.b #$2F,(A0)+
00033FE2 <AmiBlitz3.ab2@9434>   MOVE.l A0,-(A7)                                          ; -- store str_path_userlibs in A7
00033FE8 <AmiBlitz3.ab2@9436>   LEA ptr_userlibs_list,A2
00033FEE <AmiBlitz3.ab2@9437>   MOVEA.l ptr_userlibs,A3
00033FF4 <AmiBlitz3.ab2@9438>   MOVEA.l _dosbase,A6
00033FF6 <AmiBlitz3.ab2@9443>       MOVE.l (A2),D0                                       ; addresse aus liste nach D0
00033FFA <AmiBlitz3.ab2@9444>       BNE.b JL_0_70C6                                      ; wenn nix drin, processing ueberspringen
00033FFC <AmiBlitz3.ab2@9446>       CLR.l (A3)
00033FFE <AmiBlitz3.ab2@9447>       ADDQ.w #4,A7
00034028 <AmiBlitz3.ab2@9448>       !basic
0003403C <AmiBlitz3.ab2@9449>       If fid<>-1
00034046 <AmiBlitz3.ab2@9450>         file_Close{fid}
00034052 <AmiBlitz3.ab2@9451>         fid = -1
00034070 <AmiBlitz3.ab2@9453>       !asm
00034074 <AmiBlitz3.ab2@9454> BRA.w process_libraries
00034076 <AmiBlitz3.ab2@9457>       MOVEA.l D0,A2                                        ; addresse zureuck nach A2
0003407A <AmiBlitz3.ab2@9458>       TST.w $4(A2)                                         ; naechste addresse pruefen
0003407E <AmiBlitz3.ab2@9459>     BEQ.b JL_0_70BA
00034082 <AmiBlitz3.ab2@9461>     LEA $6(A2),A1
00034084 <AmiBlitz3.ab2@9462>     MOVEA.l (A7),A0
00034086 <AmiBlitz3.ab2@9465>       MOVE.b (A1)+,(A0)+
0003408A <AmiBlitz3.ab2@9466>     BNE.w JL_0_70D4
0003408C <AmiBlitz3.ab2@9470>     MOVE.l A0,-(A7)
00034092 <AmiBlitz3.ab2@9471>     MOVE.l #str_libfilename,D1
00034094 <AmiBlitz3.ab2@9472>     MOVEQ.l #-$02,D2
0003409A <AmiBlitz3.ab2@9473>     MOVEA.l _dosbase,A6
0003409E <AmiBlitz3.ab2@9474>      JSR _Lock(A6)
000340A0 <AmiBlitz3.ab2@9475>     MOVE.l D0,D1
000340A4 <AmiBlitz3.ab2@9476>      BEQ.w JL_0_7156
000340A6 <AmiBlitz3.ab2@9477>     MOVEA.l (A7),A0
000340AC <AmiBlitz3.ab2@9478>     MOVE.b #$2F,-$1(A0)
000340AE <AmiBlitz3.ab2@9481>     MOVE.l D1,-(A7)
000340B4 <AmiBlitz3.ab2@9482>     MOVE.l #ptr_parameterstore,D2
000340BA <AmiBlitz3.ab2@9483>     MOVEA.l _dosbase,A6
000340BE <AmiBlitz3.ab2@9484>     JSR _Examine(A6)
000340C0 <AmiBlitz3.ab2@9485>     TST.l D0
000340C4 <AmiBlitz3.ab2@9486>      BEQ.w JL_0_7150
000340CA <AmiBlitz3.ab2@9489>     LEA fib_FileName,A0
000340CE <AmiBlitz3.ab2@9490>     BSR.w check_for_infoextention
000340D2 <AmiBlitz3.ab2@9491>     BEQ.w JL_0_7150
000340FC <AmiBlitz3.ab2@9494>     !basic
00034180 <AmiBlitz3.ab2@9495>       Poke$ ?str_libfilename,dos_AddPart{Peek$(?str_path_userlibs),Peek$(?fib_FileName)}
0003419E <AmiBlitz3.ab2@9496>     !asm
000341A4 <AmiBlitz3.ab2@9497>     MOVE.l #str_libfilename,D1
000341A8 <AmiBlitz3.ab2@9498>     BSR.w open_userlibfile
000341AA <AmiBlitz3.ab2@9501>     MOVE.l (A7)+,D1
000341B0 <AmiBlitz3.ab2@9502>     MOVEA.l _dosbase,A6
000341B4 <AmiBlitz3.ab2@9503>     JSR _UnLock(A6)
000341B6 <AmiBlitz3.ab2@9506>     ADDQ.w #4,A7
000341BA <AmiBlitz3.ab2@9507> BRA.w JL_0_70BA
000341C0 <AmiBlitz3.ab2@9510>   MOVE.l #HUNK_RELOC_16__MODE_OLDFILE,D2
000341C6 <AmiBlitz3.ab2@9511>   MOVEA.l _dosbase,A6
000341CA <AmiBlitz3.ab2@9512>    JSR _Open(A6)
000341CC <AmiBlitz3.ab2@9513>   MOVE.l D0,D7
000341D0 <AmiBlitz3.ab2@9514>    BEQ.w exit_userlibfile
000341D2 <AmiBlitz3.ab2@9517>   MOVE.l D7,D1                                             ; filehandle
000341D8 <AmiBlitz3.ab2@9518>   MOVE.l #optstuff,D2                                     ; buffer
000341DE <AmiBlitz3.ab2@9519>   MOVEA.l _dosbase,A6
000341E0 <AmiBlitz3.ab2@9520>   MOVEQ.l #$20,D3                                          ; size
000341E4 <AmiBlitz3.ab2@9521>   JSR _Read(A6)
000341EA <AmiBlitz3.ab2@9524>   MOVE.l optstuff+28,D6
000341EC <AmiBlitz3.ab2@9525>   LSL.l #2,D6
000341EE <AmiBlitz3.ab2@9526>   MOVE.l D6,D0
000341F0 <AmiBlitz3.ab2@9527>   MOVEQ.l #$01,D1
000341F6 <AmiBlitz3.ab2@9528>   MOVEA.l _execbase,A6
000341FC <AmiBlitz3.ab2@9529>   MOVE.l mempool,a0
00034200 <AmiBlitz3.ab2@9530>   JSR _AllocPooled(a6)
00034202 <AmiBlitz3.ab2@9531>   MOVEA.l D0,A5
00034208 <AmiBlitz3.ab2@9534>   MOVEA.l _dosbase,A6
0003420A <AmiBlitz3.ab2@9535>   MOVE.l D7,D1                                             ; filehandle
0003420C <AmiBlitz3.ab2@9536>   MOVE.l A5,D2                                             ; buffer
0003420E <AmiBlitz3.ab2@9537>   MOVE.l D6,D3                                             ; size
00034212 <AmiBlitz3.ab2@9538>    JSR _Read(A6)
00034214 <AmiBlitz3.ab2@9539>   MOVE.l A5,(A3)
00034216 <AmiBlitz3.ab2@9541>   MOVE.l A5,d0
00034218 <AmiBlitz3.ab2@9543>   MOVEA.l A5,A3
0003421C <AmiBlitz3.ab2@9544>   MOVE.l D6,$6(A5)
00034220 <AmiBlitz3.ab2@9545>   CLR.l $20(A5)
0003424A <AmiBlitz3.ab2@9547>   !basic
00034254 <AmiBlitz3.ab2@9549>   addr_libnum.l = PutD0 + 4
00034268 <AmiBlitz3.ab2@9550>   If fid<>-1
00034308 <AmiBlitz3.ab2@9551>     currentlib$ = LSet$(Peek.s(?fib_FileName),30)+";"+LSet$(Get_Libinfo{addr_libnum},30) ;+";"+Str$(Peek.w(addr_libnum))
0003433A <AmiBlitz3.ab2@9552>     file_WriteLine{fid,currentlib$}
00034358 <AmiBlitz3.ab2@9554>   !asm
0003435A <AmiBlitz3.ab2@9557>   MOVE.l D7,D1                                             ; filehandle
00034360 <AmiBlitz3.ab2@9558>   MOVE.l #optstuff,D2                                     ; buffer
00034362 <AmiBlitz3.ab2@9559>   MOVEQ.l #$0C,D3                                          ; size
00034368 <AmiBlitz3.ab2@9560>   MOVEA.l _dosbase,A6
0003436C <AmiBlitz3.ab2@9561>    JSR _Read(A6)
00034372 <AmiBlitz3.ab2@9563>   CMP.l #$C,D0
00034376 <AmiBlitz3.ab2@9564>    BCS.w close_and_exit_userlibfile
0003437C <AmiBlitz3.ab2@9567>   MOVE.l optstuff+4,D0
00034380 <AmiBlitz3.ab2@9568>   MOVE.l D0,$20(A5)
00034382 <AmiBlitz3.ab2@9569>   LSL.l #2,D0
00034384 <AmiBlitz3.ab2@9570>   MOVE.l D0,D5
00034386 <AmiBlitz3.ab2@9571>   MOVEQ.l #$01,D1
0003438C <AmiBlitz3.ab2@9572>   MOVEA.l _execbase,A6
00034392 <AmiBlitz3.ab2@9573>   MOVE.l mempool,a0
00034396 <AmiBlitz3.ab2@9574>   JSR _AllocPooled(a6)
0003439C <AmiBlitz3.ab2@9576>   MOVEA.l _dosbase,A6
000343A0 <AmiBlitz3.ab2@9577>   MOVE.l D0,$24(A5)
000343A2 <AmiBlitz3.ab2@9578>   MOVE.l D7,D1
000343A4 <AmiBlitz3.ab2@9579>   MOVE.l D0,D2
000343A6 <AmiBlitz3.ab2@9580>   MOVE.l D5,D3
000343AA <AmiBlitz3.ab2@9581>   JSR _Read(A6)
000343AC <AmiBlitz3.ab2@9584>   MOVE.l D7,D1
000343B2 <AmiBlitz3.ab2@9585>   MOVEA.l _dosbase,A6
000343B6 <AmiBlitz3.ab2@9586> JMP _Close(A6)
000343B8 <AmiBlitz3.ab2@9589> RTS
000343BE <AmiBlitz3.ab2@9595>   CLR.w number_of_objects
000343C4 <AmiBlitz3.ab2@9596>   MOVEA.l end_of_tokenlist,A3
000343CA <AmiBlitz3.ab2@9597>   MOVEA.l libpointer,A2
000343CE <AmiBlitz3.ab2@9600>     CMPA.w #$0,A2
000343D2 <AmiBlitz3.ab2@9601>     BEQ.w JL_0_72D8                                        ; <-- abbruch mit RTS
000343D6 <AmiBlitz3.ab2@9603>     MOVE.w $4(A2),D7                                       ; <-- get tokennumber
000343DA <AmiBlitz3.ab2@9604>     BMI.w JL_0_7226
000343DC <AmiBlitz3.ab2@9605>       LSL.w #7,D7
000343DE <AmiBlitz3.ab2@9606>       ADDQ.w #1,D7
000343E2 <AmiBlitz3.ab2@9607>       MOVE.w D7,$E(A2)
000343E6 <AmiBlitz3.ab2@9610>     LEA $30(A2),A1
000343EC <AmiBlitz3.ab2@9611>     LEA temp1,A4
000343EE <AmiBlitz3.ab2@9614>       MOVE.w (A1),D0
000343F2 <AmiBlitz3.ab2@9615>       BMI.w JL_0_72AE
000343F4 <AmiBlitz3.ab2@9616>       MOVE.l A1,(A4)
000343F6 <AmiBlitz3.ab2@9617>       MOVEA.l A1,A4
000343F8 <AmiBlitz3.ab2@9618>       ADDQ.w #2,A4
000343FA <AmiBlitz3.ab2@9619>       ADDQ.w #6,A1
000343FE <AmiBlitz3.ab2@9620>       CMP.w #$8,D0
00034402 <AmiBlitz3.ab2@9621>       BEQ.w JL_0_7290
00034406 <AmiBlitz3.ab2@9622>         ANDI.w #$F,D0
0003440A <AmiBlitz3.ab2@9623>         BNE.w JL_0_725C
0003440E <AmiBlitz3.ab2@9624>           BSR.w skiplibreg
00034412 <AmiBlitz3.ab2@9625>           LEA $C(A1),A1
00034414 <AmiBlitz3.ab2@9626>           ADDQ.w #1,D7
00034418 <AmiBlitz3.ab2@9627> BRA.w JL_0_7230
0003441C <AmiBlitz3.ab2@9630>     BTST #$2,D0
00034420 <AmiBlitz3.ab2@9631>     BEQ.w JL_0_7274
00034422 <AmiBlitz3.ab2@9632>       ADDQ.w #4,A1
00034424 <AmiBlitz3.ab2@9635>         TST.b (A1)+
00034428 <AmiBlitz3.ab2@9636>       BPL.w JL_0_7266
0003442C <AmiBlitz3.ab2@9637>       BSR.w aligna1
00034430 <AmiBlitz3.ab2@9638> BRA.w JL_0_7290
00034432 <AmiBlitz3.ab2@9641>       MOVE.w (A1)+,D0
00034436 <AmiBlitz3.ab2@9642>       BMI.w JL_0_7290
0003443A <AmiBlitz3.ab2@9643>       ANDI.w #$FF,D0
0003443C <AmiBlitz3.ab2@9644>       ADDA.w D0,A1
00034440 <AmiBlitz3.ab2@9645>       BSR.w aligna1
00034444 <AmiBlitz3.ab2@9646>       BSR.w skiplibreg
00034448 <AmiBlitz3.ab2@9647>       LEA $C(A1),A1
0003444C <AmiBlitz3.ab2@9648> BRA.w JL_0_7274
0003444E <AmiBlitz3.ab2@9651>     MOVE.l A1,(A3)
00034450 <AmiBlitz3.ab2@9652>     MOVEA.l A1,A3
00034452 <AmiBlitz3.ab2@9653>     ADDQ.w #4,A1
00034454 <AmiBlitz3.ab2@9654>     MOVE.w D7,(A1)+
00034456 <AmiBlitz3.ab2@9657>       TST.b (A1)+
0003445A <AmiBlitz3.ab2@9658>     BNE.w JL_0_7298
0003445C <AmiBlitz3.ab2@9661>       TST.b (A1)+
00034460 <AmiBlitz3.ab2@9662>     BNE.w JL_0_729E
00034464 <AmiBlitz3.ab2@9664>     BSR.w aligna1
00034466 <AmiBlitz3.ab2@9665>     ADDQ.w #1,D7
0003446A <AmiBlitz3.ab2@9666> BRA.w JL_0_7230
0003446E <AmiBlitz3.ab2@9669>     TST.w $4(A2)
00034472 <AmiBlitz3.ab2@9670>      BMI.w JL_0_72BA
00034476 <AmiBlitz3.ab2@9671>     MOVE.w D7,$10(A2)
00034478 <AmiBlitz3.ab2@9674>     ADDQ.w #2,A1
0003447A <AmiBlitz3.ab2@9675>     TST.l (A1)+
0003447E <AmiBlitz3.ab2@9676>      BEQ.w JL_0_72CC
00034484 <AmiBlitz3.ab2@9677>     ADDQ.w #1,number_of_objects
00034488 <AmiBlitz3.ab2@9678>     LEA $16(A1),A1
0003448A <AmiBlitz3.ab2@9681>     SUBA.l A2,A1
0003448E <AmiBlitz3.ab2@9682>     MOVE.l A1,$12(A2)
00034490 <AmiBlitz3.ab2@9683>     MOVEA.l (A2),A2
00034494 <AmiBlitz3.ab2@9684> BRA.w JL_0_720E
00034496 <AmiBlitz3.ab2@9687>   CLR.l (A3)
0003449C <AmiBlitz3.ab2@9688>   MOVE.l A7,errstack
000344A6 <AmiBlitz3.ab2@9689>   MOVE.l #AL_0_730E,errcont
000344AE <AmiBlitz3.ab2@9690>   MOVE.w #$FFFF,ezerr
000344B2 <AmiBlitz3.ab2@9691>   MOVE.w #$FFFA,D1
000344B6 <AmiBlitz3.ab2@9692>    BSR.w JL_0_6F38
000344BC <AmiBlitz3.ab2@9693>   MOVE.l A1,tempvm
000344C0 <AmiBlitz3.ab2@9694>   MOVE.w #$FDA7,D1
000344C4 <AmiBlitz3.ab2@9695>    BSR.w JL_0_6F38
000344CA <AmiBlitz3.ab2@9696>   MOVE.l A1,ffplib
000344CC <AmiBlitz3.ab2@9699> RTS
000344D0 <AmiBlitz3.ab2@9702> ffplib:  Ds.l 1
000344D2 <AmiBlitz3.ab2@9706>     TST.w (A1)+
000344D6 <AmiBlitz3.ab2@9707>     BEQ.w JL_0_7320
000344D8 <AmiBlitz3.ab2@9708>     ADDQ.w #2,A1
000344DC <AmiBlitz3.ab2@9709> BRA.w skiplibreg
000344DE <AmiBlitz3.ab2@9712> RTS
000344E0 <AmiBlitz3.ab2@9716>   EXG.l A1,A0
000344E4 <AmiBlitz3.ab2@9717>   BSR.w aligna1
000344E6 <AmiBlitz3.ab2@9718>   EXG.l A1,A0
000344E8 <AmiBlitz3.ab2@9719> RTS
000344EA <AmiBlitz3.ab2@9722>   EXG.l D0,A1
000344EC <AmiBlitz3.ab2@9723>   ADDQ.l #1,D0
000344F0 <AmiBlitz3.ab2@9724>   BCLR #$0,D0
000344F2 <AmiBlitz3.ab2@9725>   EXG.l D0,A1
000344F4 <AmiBlitz3.ab2@9726> RTS
000344FA <AmiBlitz3.ab2@9730>   MOVEA.l _execbase,A6
00034500 <AmiBlitz3.ab2@9731>   MOVEA.l ptr_userlibs,A2
00034502 <AmiBlitz3.ab2@9732>   MOVE.l (A2),D0
00034504 <AmiBlitz3.ab2@9733>   CLR.l (A2)
00034506 <AmiBlitz3.ab2@9734>   MOVEA.l D0,A2
0003450A <AmiBlitz3.ab2@9737>     CMPA.w #$0,A2
0003450E <AmiBlitz3.ab2@9738>     BEQ.w free_userlib
00034512 <AmiBlitz3.ab2@9740>     MOVE.l $20(A2),D0
00034516 <AmiBlitz3.ab2@9741>     BEQ.b JL_0_7360
00034518 <AmiBlitz3.ab2@9742>       LSL.l #2,D0
0003451E <AmiBlitz3.ab2@9743>       MOVE.l mempool,a0
00034522 <AmiBlitz3.ab2@9744>       MOVEA.l $24(A2),A1
00034526 <AmiBlitz3.ab2@9745>       JSR _FreePooled(A6)
00034528 <AmiBlitz3.ab2@9748>     MOVEA.l A2,A1
0003452C <AmiBlitz3.ab2@9749>     MOVE.l $6(A1),D0
00034532 <AmiBlitz3.ab2@9750>     MOVE.l mempool,a0
00034534 <AmiBlitz3.ab2@9751>     MOVEA.l (A2),A2
0003453A <AmiBlitz3.ab2@9752>     MOVEA.l _execbase,A6
0003453E <AmiBlitz3.ab2@9753>     JSR _FreePooled(A6)
00034542 <AmiBlitz3.ab2@9754> BRA.w JL_0_7348
00034546 <AmiBlitz3.ab2@9758>   BSR.w free_userlibs
0003454C <AmiBlitz3.ab2@9759>   MOVEA.l _execbase,A6
00034552 <AmiBlitz3.ab2@9760>   CLR.l libpointer
00034558 <AmiBlitz3.ab2@9761>   MOVEA.l end_of_tokenlist,A0
0003455A <AmiBlitz3.ab2@9762>   CLR.l (A0)
00034560 <AmiBlitz3.ab2@9764>   MOVE.l size_acidlibs,D0
00034564 <AmiBlitz3.ab2@9765>   BEQ.b JL_0_73A2
0003456A <AmiBlitz3.ab2@9766>     MOVE.l ptr_acidlibs,D1
0003456E <AmiBlitz3.ab2@9767>     BEQ.b JL_0_73A2
00034574 <AmiBlitz3.ab2@9768>       CLR.l ptr_acidlibs
00034576 <AmiBlitz3.ab2@9769>       MOVEA.l D1,A1
0003457C <AmiBlitz3.ab2@9770>       MOVE.l mempool,a0
00034582 <AmiBlitz3.ab2@9771>       MOVEA.l _execbase,A6
00034586 <AmiBlitz3.ab2@9772>       JSR _FreePooled(A6)                                 ; free acidlibs
0003458C <AmiBlitz3.ab2@9775>   MOVE.l size_deflibs,D0
00034590 <AmiBlitz3.ab2@9776>   BEQ.b JL_0_73BE
00034596 <AmiBlitz3.ab2@9777>     MOVE.l ptr_deflibs,D1
0003459A <AmiBlitz3.ab2@9778>     BEQ.b JL_0_73BE
000345A0 <AmiBlitz3.ab2@9779>       CLR.l ptr_deflibs                                    ; d0: memorySize
000345A2 <AmiBlitz3.ab2@9780>       MOVEA.l D1,A1                                        ; a1: memory
000345A8 <AmiBlitz3.ab2@9781>       MOVE.l mempool,a0                                    ; a0: poolHeader
000345AE <AmiBlitz3.ab2@9782>       MOVEA.l _execbase,A6
000345B2 <AmiBlitz3.ab2@9783>       JSR _FreePooled(A6)                                  ; free deflibs
000345B4 <AmiBlitz3.ab2@9786> RTS
000345BA <AmiBlitz3.ab2@9790>   MOVEA.l currentmacroaddr,A0
000345BC <AmiBlitz3.ab2@9791>   MOVEA.l (A0),A2
000345BE <AmiBlitz3.ab2@9792>   CLR.l (A0)
000345C4 <AmiBlitz3.ab2@9793>   MOVEA.l _execbase,A6
000345C8 <AmiBlitz3.ab2@9796>     CMPA.w #$0,A2
000345CC <AmiBlitz3.ab2@9797>     BEQ.w JL_0_73FA
000345CE <AmiBlitz3.ab2@9798>     MOVEQ.l #$00,D0
000345D2 <AmiBlitz3.ab2@9799>     MOVE.w $8(A2),D0
000345D6 <AmiBlitz3.ab2@9800>     BEQ.w JL_0_73E8
000345DA <AmiBlitz3.ab2@9801>     MOVEA.l $4(A2),A1
000345E0 <AmiBlitz3.ab2@9802>     MOVE.l mempool,a0
000345E4 <AmiBlitz3.ab2@9803>     JSR _FreePooled(A6)
000345E6 <AmiBlitz3.ab2@9806>     MOVEA.l A2,A1
000345E8 <AmiBlitz3.ab2@9807>     MOVEA.l (A2),A2
000345EA <AmiBlitz3.ab2@9808>     MOVEQ.l #$00,D0
000345EE <AmiBlitz3.ab2@9809>     MOVE.b $C(A1),D0
000345F4 <AmiBlitz3.ab2@9810>     MOVE.l mempool2,a0
000345F8 <AmiBlitz3.ab2@9811>     JSR _FreePooled(A6)
000345FC <AmiBlitz3.ab2@9812> BRA.w JL_0_73CE
000345FE <AmiBlitz3.ab2@9815> RTS
00034604 <AmiBlitz3.ab2@9819>   MOVEA.l templabel,A2
0003460A <AmiBlitz3.ab2@9820>   CLR.l templabel
0003460C <AmiBlitz3.ab2@9821> RTS
00034612 <AmiBlitz3.ab2@9824>   MOVEA.l _execbase,A6                                     ;??looks like dead code?
00034616 <AmiBlitz3.ab2@9827>     CMPA.w #$0,A2
0003461A <AmiBlitz3.ab2@9828>     BEQ.w JL_0_7426
0003461C <AmiBlitz3.ab2@9829>     MOVEQ.l #$00,D0
00034620 <AmiBlitz3.ab2@9830>     MOVE.b $E(A2),D0                                       ;labeltemp
00034622 <AmiBlitz3.ab2@9831>     MOVEA.l A2,A1
00034624 <AmiBlitz3.ab2@9832>     MOVEA.l (A2),A2
0003462A <AmiBlitz3.ab2@9833>     MOVE.l mempool2,a0
0003462E <AmiBlitz3.ab2@9835> BRA.w JL_0_740C
00034630 <AmiBlitz3.ab2@9838> RTS
00034636 <AmiBlitz3.ab2@9842>   MOVEA.l data1,A4
0003463C <AmiBlitz3.ab2@9843>   CMPA.l data2at,A4
00034640 <AmiBlitz3.ab2@9844>   BCC.w JL_0_7442
00034642 <AmiBlitz3.ab2@9845>     MOVE.b D1,(A4)+
00034648 <AmiBlitz3.ab2@9846>     MOVE.l A4,data1
0003464A <AmiBlitz3.ab2@9847> RTS
00034652 <AmiBlitz3.ab2@9850>   MOVE.w #$FFFF,dontwrite                                  ;move #-1, org source
00034658 <AmiBlitz3.ab2@9851>   ADDQ.l #1,data1
0003465A <AmiBlitz3.ab2@9852> RTS
0003465C <AmiBlitz3.ab2@9856>   SWAP D1
00034660 <AmiBlitz3.ab2@9857>   BSR.w pokedata1
00034662 <AmiBlitz3.ab2@9858>   SWAP D1
00034668 <AmiBlitz3.ab2@9861>   MOVEA.l data1,A4
0003466E <AmiBlitz3.ab2@9862>   CMPA.l data2at,A4
00034672 <AmiBlitz3.ab2@9863>    BCC.w JL_0_7474
00034674 <AmiBlitz3.ab2@9864>   MOVE.w D1,(A4)+
0003467A <AmiBlitz3.ab2@9865>   MOVE.l A4,data1
0003467C <AmiBlitz3.ab2@9866> RTS
00034684 <AmiBlitz3.ab2@9869>   MOVE.w #$FFFF,dontwrite
0003468A <AmiBlitz3.ab2@9870>   ADDQ.l #2,data1
0003468C <AmiBlitz3.ab2@9871> RTS
00034692 <AmiBlitz3.ab2@9875>   MOVE.l data1,D3                                      ;write local string/type allocs
00034694 <AmiBlitz3.ab2@9876>   MOVEQ.l #$00,D4
00034698 <AmiBlitz3.ab2@9879>   CMPA.w #$0,A2
0003469C <AmiBlitz3.ab2@9880>    BEQ.w JL_0_74CAc
000346A0 <AmiBlitz3.ab2@9881>   TST.w $6(A2)
000346A4 <AmiBlitz3.ab2@9882>    BNE.w JL_0_74C4c
000346A8 <AmiBlitz3.ab2@9883>   MOVEA.l $A(A2),A3
000346B0 <AmiBlitz3.ab2@9884>   CMPI.l #$100,$4(A3)
000346B4 <AmiBlitz3.ab2@9885>    BCS.w JL_0_74C4c
000346B8 <AmiBlitz3.ab2@9886>   MOVE.w $4(A2),D1
000346BC <AmiBlitz3.ab2@9887>    BSR.w pokedata1
000346C0 <AmiBlitz3.ab2@9888>   MOVE.w $8(A3),D1
000346C4 <AmiBlitz3.ab2@9889>    BSR.w pokedata1
000346C6 <AmiBlitz3.ab2@9890>   ADDQ.w #1,D4
000346C8 <AmiBlitz3.ab2@9893>    MOVEA.l (A2),A2
000346CC <AmiBlitz3.ab2@9894> BRA.w JL_0_7492c
000346CE <AmiBlitz3.ab2@9897>    TST.w D4
000346D2 <AmiBlitz3.ab2@9898>    BEQ.w JL_0_74E0
000346D6 <AmiBlitz3.ab2@9899>   MOVE.w #$FF37,D1
000346DA <AmiBlitz3.ab2@9900>    BSR.w uselib
000346DE <AmiBlitz3.ab2@9901>   MOVE.w #$FFFA,D1
000346E2 <AmiBlitz3.ab2@9902> BRA.w uselib
000346E8 <AmiBlitz3.ab2@9910>   MOVEA.l varbase,A2                                       ;add alloc mem for types/strings global
000346EE <AmiBlitz3.ab2@9913>   MOVE.l data1,D3
000346F0 <AmiBlitz3.ab2@9914>   MOVEQ.l #$00,D4
000346F6 <AmiBlitz3.ab2@9915>   TST.b iserror
000346FA <AmiBlitz3.ab2@9916>   BEQ JL_0_7492
000346FC <AmiBlitz3.ab2@9917>   RTS
00034700 <AmiBlitz3.ab2@9919>    CMPA.w #$0,A2
00034704 <AmiBlitz3.ab2@9920>    BEQ.w JL_0_74CA
00034708 <AmiBlitz3.ab2@9921>   TST.w $6(A2)
0003470C <AmiBlitz3.ab2@9922>    BNE.w JL_0_74C4
00034710 <AmiBlitz3.ab2@9923>   MOVEA.l $A(A2),A3
00034718 <AmiBlitz3.ab2@9924>   CMPI.l #$100,$4(A3)
0003471C <AmiBlitz3.ab2@9925>    BCS.w JL_0_74C4
00034720 <AmiBlitz3.ab2@9926>   MOVE.w $4(A2),D1
00034724 <AmiBlitz3.ab2@9927>    BSR.w pokedata1
00034728 <AmiBlitz3.ab2@9928>   MOVE.w $8(A3),D1
0003472C <AmiBlitz3.ab2@9929>    BSR.w pokedata1
0003472E <AmiBlitz3.ab2@9930>   ADDQ.w #1,D4
00034730 <AmiBlitz3.ab2@9933>   MOVEA.l (A2),A2
00034734 <AmiBlitz3.ab2@9934> BRA.w JL_0_7492
0003473A <AmiBlitz3.ab2@9938>   MOVEA.l sharebase,A2
0003473E <AmiBlitz3.ab2@9941>   CMPA.w #$0,A2
00034742 <AmiBlitz3.ab2@9942>    BEQ.w JL_0_74CAb
00034746 <AmiBlitz3.ab2@9944>   TST.w $6(A2)
0003474A <AmiBlitz3.ab2@9945>    BNE.w JL_0_74C4b
0003474E <AmiBlitz3.ab2@9946>   MOVEA.l $A(A2),A3
00034756 <AmiBlitz3.ab2@9947>   CMPI.l #$100,$4(A3)
0003475A <AmiBlitz3.ab2@9948>    BCS.w JL_0_74C4b
0003475E <AmiBlitz3.ab2@9949>   MOVE.w $4(A2),D1
00034762 <AmiBlitz3.ab2@9950>    BSR.w pokedata1
00034766 <AmiBlitz3.ab2@9951>   MOVE.w $8(A3),D1
0003476A <AmiBlitz3.ab2@9952>    BSR.w pokedata1
0003476C <AmiBlitz3.ab2@9953>   ADDQ.w #1,D4
0003476E <AmiBlitz3.ab2@9956>   MOVEA.l (A2),A2
00034772 <AmiBlitz3.ab2@9957> BRA.w JL_0_7492b
00034774 <AmiBlitz3.ab2@9960>    TST.w D4
00034778 <AmiBlitz3.ab2@9961>    BEQ.w JL_0_74E0
0003477C <AmiBlitz3.ab2@9962>   MOVE.w #$FF37,D1
00034780 <AmiBlitz3.ab2@9963>    BSR.w uselib                                            ;use statics lib
00034784 <AmiBlitz3.ab2@9964>   MOVE.w #$FFFA,D1                                         ;use memlib
00034788 <AmiBlitz3.ab2@9965> BRA.w uselib
0003478A <AmiBlitz3.ab2@9968> RTS
00034790 <AmiBlitz3.ab2@9972>   MOVE.w numtoa2,D1
00034794 <AmiBlitz3.ab2@9973>    BSR.w writeword
00034798 <AmiBlitz3.ab2@9974>    BSR.w addoff
0003479A <AmiBlitz3.ab2@9975>   MOVE.l D3,D1
0003479E <AmiBlitz3.ab2@9976>    BSR.w writelong
000347A0 <AmiBlitz3.ab2@9977>   SUBQ.w #1,D4
000347A6 <AmiBlitz3.ab2@9978>   MOVE.w D4,endarray+2
000347AC <AmiBlitz3.ab2@9979>   MOVE.l endarray,D1
000347B0 <AmiBlitz3.ab2@9980> BRA.w writelong
000347B2 <AmiBlitz3.ab2@9984>   MOVE.l D3,-(A7)
000347B8 <AmiBlitz3.ab2@9987>   MOVEA.l _dosbase,A6
000347BC <AmiBlitz3.ab2@9988>   JSR _Write(a6)
000347BE <AmiBlitz3.ab2@9990>   CMP.l (A7)+,D0
000347C2 <AmiBlitz3.ab2@9991>    BNE.w JL_0_7516
000347C4 <AmiBlitz3.ab2@9992> RTS
000347C6 <AmiBlitz3.ab2@9995>   MOVE.l D7,D1
000347CC <AmiBlitz3.ab2@9997>   MOVEA.l _dosbase,A6
000347D0 <AmiBlitz3.ab2@9998>   JSR _Close(a6)
000347D6 <AmiBlitz3.ab2@10001> JMP error_create_exe
000347DC <AmiBlitz3.ab2@10010>   MOVE.l A7,errstack
000347E0 <AmiBlitz3.ab2@10011>   MOVEM.l d2-d7/a2-a6,-(a7)
000347EA <AmiBlitz3.ab2@10012>   MOVE.l #AL_0_7790,errcont
000347EE <AmiBlitz3.ab2@10013>    BSR.w call_setpointerbusy
000347F6 <AmiBlitz3.ab2@10014>   MOVE.w #$FFFF,anyerrs
00034800 <AmiBlitz3.ab2@10015>   CMP.l #-1,chipstart
00034804 <AmiBlitz3.ab2@10016>   BEQ 'l01
0003480A <AmiBlitz3.ab2@10017>   MOVE.l chipend,d1
0003480C <AmiBlitz3.ab2@10018>   ADDQ.l #3,d1
00034812 <AmiBlitz3.ab2@10019>   AND.l #$fffffffc,d1                                      ;bug
00034818 <AmiBlitz3.ab2@10020>   MOVE.l d1,chipend
0003481A <AmiBlitz3.ab2@10021>   MOVE.l d1,a1
00034820 <AmiBlitz3.ab2@10022>   MOVE.l chipstart,a0
00034822 <AmiBlitz3.ab2@10023>   MOVE.l a1,d1
00034824 <AmiBlitz3.ab2@10024>   SUB.l a0,d1
0003482A <AmiBlitz3.ab2@10025>   MOVE.l d1,chipsize
00034834 <AmiBlitz3.ab2@10028>   CMP.l #-1,bssstart
00034838 <AmiBlitz3.ab2@10029>   BEQ 'l11
0003483E <AmiBlitz3.ab2@10030>   MOVE.l realbssend,a1
00034844 <AmiBlitz3.ab2@10031>   MOVE.l bssstart,a0
00034846 <AmiBlitz3.ab2@10032>   MOVE.l a1,d1
00034848 <AmiBlitz3.ab2@10033>   SUB.l a0,d1
0003484E <AmiBlitz3.ab2@10034>   MOVE.l d1,bsssize
00034852 <AmiBlitz3.ab2@10035>   BEQ 'l11
00034854 <AmiBlitz3.ab2@10038>   TST.b (a0)+
00034858 <AmiBlitz3.ab2@10039>   BEQ 'l31
0003485E <AmiBlitz3.ab2@10040>   TST.b debugmode
00034862 <AmiBlitz3.ab2@10041>   BEQ 'l1
00034868 <AmiBlitz3.ab2@10042>   TST.b exdebug
0003486C <AmiBlitz3.ab2@10043>   BNE 'l31
00034872 <AmiBlitz3.ab2@10046>   MOVE.l #nodata,-(a7)
00034878 <AmiBlitz3.ab2@10047> JMP handle_compileerror
0003487A <AmiBlitz3.ab2@10050>   CMP.l a0,a1
0003487E <AmiBlitz3.ab2@10051>   BGT 'l32
00034884 <AmiBlitz3.ab2@10052>   MOVE.l bssend,d1
00034886 <AmiBlitz3.ab2@10053>   ADDQ.l #3,d1
0003488C <AmiBlitz3.ab2@10054>   AND.l #$fffffffc,d1                                      ;bug
00034892 <AmiBlitz3.ab2@10055>   MOVE.l d1,bssend
00034894 <AmiBlitz3.ab2@10056>   MOVE.l d1,a1
0003489A <AmiBlitz3.ab2@10057>   MOVE.l bssstart,a0
0003489C <AmiBlitz3.ab2@10058>   MOVE.l a1,d1
0003489E <AmiBlitz3.ab2@10059>   SUB.l a0,d1
000348A4 <AmiBlitz3.ab2@10060>   MOVE.l d1,bsssize
000348A8 <AmiBlitz3.ab2@10063>   MOVEM.l d5-d7/d3,-(a7)
000348AE <AmiBlitz3.ab2@10064>   MOVE.w dontwrite,D1
000348B2 <AmiBlitz3.ab2@10065>   BNE.w JL_0_757C
000348B8 <AmiBlitz3.ab2@10066>   MOVE.l chipsize,d5
000348BE <AmiBlitz3.ab2@10067>   MOVE.l bsssize,d3
000348C4 <AmiBlitz3.ab2@10068>   MOVE.l chipstart,d7
000348CA <AmiBlitz3.ab2@10069>   MOVE.l bssstart,d6
000348D0 <AmiBlitz3.ab2@10070>   MOVEA.l hunkoffsetbase,A2
000348D6 <AmiBlitz3.ab2@10071>   MOVEA.l destbufferstart,A1
000348D8 <AmiBlitz3.ab2@10072>   MOVE.l A1,D2
000348DE <AmiBlitz3.ab2@10073>   ADD.l noinits,D2
000348E4 <AmiBlitz3.ab2@10074>   CLR.l hunkoffsetnum
000348E8 <AmiBlitz3.ab2@10077>   CMPA.w #$0,A2
000348EC <AmiBlitz3.ab2@10078>    BEQ.w JL_0_757C
000348F0 <AmiBlitz3.ab2@10079>   MOVE.l $4(A2),D0
000348F4 <AmiBlitz3.ab2@10080>    LEA $0(a1,d0.l),a0
000348F6 <AmiBlitz3.ab2@10081>    MOVE.l (a0),d1
000348F8 <AmiBlitz3.ab2@10082>   TST.l d1
000348FC <AmiBlitz3.ab2@10083>    BMI.w 'lm1
00034904 <AmiBlitz3.ab2@10084>   MOVE.b #0,newhunk
0003490E <AmiBlitz3.ab2@10085>   CMP.l #-1,chipstart
00034912 <AmiBlitz3.ab2@10086>   BEQ 'l10
00034918 <AmiBlitz3.ab2@10087>   CMP.l chipstart,d1
0003491C <AmiBlitz3.ab2@10088>   BLT 'l10
00034924 <AmiBlitz3.ab2@10089>   MOVE.b #1,newhunk
0003492A <AmiBlitz3.ab2@10090>   CMP.l chipend,d1
0003492E <AmiBlitz3.ab2@10091>   BGE 'l110
00034930 <AmiBlitz3.ab2@10092>   SUB.l d7,(a0)
00034938 <AmiBlitz3.ab2@10093>   ADD.l #$80000000,4(a2)
0003493C <AmiBlitz3.ab2@10094> BRA JL_0_7576
00034940 <AmiBlitz3.ab2@10097>   SUB.l d5,0(a0)
0003494A <AmiBlitz3.ab2@10100>   CMP.l #-1,bssstart
0003494E <AmiBlitz3.ab2@10101>     BEQ 'l11
00034954 <AmiBlitz3.ab2@10102>   CMP.l bssstart,d1
00034958 <AmiBlitz3.ab2@10103>   BLT 'l11
0003495E <AmiBlitz3.ab2@10104>   CMP.l bssend,d1
00034962 <AmiBlitz3.ab2@10105>   BGE 'l111
00034968 <AmiBlitz3.ab2@10106>   TST.b newhunk
0003496C <AmiBlitz3.ab2@10107>   BEQ 'ln1
0003496E <AmiBlitz3.ab2@10108>   ADD.l d5,(a0)
00034970 <AmiBlitz3.ab2@10111>   SUB.l d6,(a0)
00034978 <AmiBlitz3.ab2@10112>   ADD.l #$40000000,4(a2)
0003497C <AmiBlitz3.ab2@10113> BRA JL_0_7576
00034980 <AmiBlitz3.ab2@10116>   SUB.l d3,0(a0)
00034982 <AmiBlitz3.ab2@10119>   SUB.l D2,(A0)
00034988 <AmiBlitz3.ab2@10122>   ADDQ.l #1,hunkoffsetnum
0003498A <AmiBlitz3.ab2@10125>    MOVEA.l (A2),A2
0003498E <AmiBlitz3.ab2@10126> BRA.w JL_0_755E
00034992 <AmiBlitz3.ab2@10130>   MOVEM.l (a7)+,d5-d7/d3
00034998 <AmiBlitz3.ab2@10131>   MOVE.l ptr_newexefilename,D1
0003499E <AmiBlitz3.ab2@10132>   MOVE.l #HUNK_RELOC_8__MODE_NEWFILE,D2
000349A4 <AmiBlitz3.ab2@10133>   MOVEA.l _dosbase,A6
000349A8 <AmiBlitz3.ab2@10134>    JSR _Open(A6)
000349AA <AmiBlitz3.ab2@10135>   MOVE.l D0,D7
000349AE <AmiBlitz3.ab2@10136>    BEQ.w execerr
000349B4 <AmiBlitz3.ab2@10137>   MOVE.l objlen,D0
000349BA <AmiBlitz3.ab2@10138>   SUB.l #moremem,d0
000349C0 <AmiBlitz3.ab2@10139>   SUB.l noinits,D0
000349CA <AmiBlitz3.ab2@10140>   CMP.l #-1,bssstart
000349CE <AmiBlitz3.ab2@10141>   BEQ 'l60
000349D4 <AmiBlitz3.ab2@10142>   SUB.l bsssize,d0
000349DA <AmiBlitz3.ab2@10143>   SUB.l chipsize,d0
000349DE <AmiBlitz3.ab2@10144> BRA.s 'l61
000349E8 <AmiBlitz3.ab2@10147>   CMP.l #-1,chipstart
000349EC <AmiBlitz3.ab2@10148>   BEQ 'l61
000349F2 <AmiBlitz3.ab2@10149>   SUB.l bsssize,d0
000349F8 <AmiBlitz3.ab2@10150>   SUB.l chipsize,d0
000349FA <AmiBlitz3.ab2@10153>   ADDQ.l #3,D0
000349FC <AmiBlitz3.ab2@10154>   LSR.l #2,D0
00034A02 <AmiBlitz3.ab2@10155>   MOVE.l D0,tstsize1
00034A08 <AmiBlitz3.ab2@10156>   MOVE.l D0,tstsize2
00034A0A <AmiBlitz3.ab2@10157>   MOVE.l D7,D1
00034A10 <AmiBlitz3.ab2@10158>   MOVE.l #tsthead,D2                                      ;hunkbegin
00034A12 <AmiBlitz3.ab2@10159>   MOVEQ.l #$20,D3
00034A1C <AmiBlitz3.ab2@10160>   CMP.l #-1,bssstart
00034A20 <AmiBlitz3.ab2@10161>   BEQ 'lb1
00034A2A <AmiBlitz3.ab2@10162>   CMP.l #-1,chipstart
00034A2E <AmiBlitz3.ab2@10163>   BEQ 'lb1
00034A38 <AmiBlitz3.ab2@10164>   MOVE.l #1,bssnum
00034A42 <AmiBlitz3.ab2@10165>   MOVE.l #2,chipnum
00034A44 <AmiBlitz3.ab2@10166>   MOVEQ.l #$28,D3
00034A4A <AmiBlitz3.ab2@10167>   MOVE.l bsssize,d2
00034A4C <AmiBlitz3.ab2@10168>   ADDQ.l #3,d2
00034A4E <AmiBlitz3.ab2@10169>   ASR.l #2,d2
00034A54 <AmiBlitz3.ab2@10170>   MOVE.l d2,hunkend+8
00034A5A <AmiBlitz3.ab2@10171>   MOVE.l d2,bsssize3
00034A60 <AmiBlitz3.ab2@10172>   MOVE.l chipsize,d2
00034A62 <AmiBlitz3.ab2@10173>   ADDQ.l #3,d2
00034A64 <AmiBlitz3.ab2@10174>   ASR.l #2,d2
00034A6A <AmiBlitz3.ab2@10175>   MOVE.l d2,chipsize2
00034A74 <AmiBlitz3.ab2@10176>   ADD.l #$40000000,chipsize2
00034A7A <AmiBlitz3.ab2@10177>   MOVE.l d2,hunkend2+8
00034A80 <AmiBlitz3.ab2@10178>   MOVE.l D0,tstsize1c
00034A86 <AmiBlitz3.ab2@10179>   MOVE.l D0,tstsize2c
00034A8C <AmiBlitz3.ab2@10180>   MOVE.l #hunkbegin2,d2
00034A90 <AmiBlitz3.ab2@10181> BRA 'l100
00034A9A <AmiBlitz3.ab2@10184>   CMP.l #-1,bssstart
00034A9E <AmiBlitz3.ab2@10185>   BEQ 'l10
00034AA8 <AmiBlitz3.ab2@10186>   MOVE.l #1,bssnum
00034AAA <AmiBlitz3.ab2@10187>   MOVEQ.l #$24,D3
00034AB0 <AmiBlitz3.ab2@10188>   MOVE.l bsssize,d2
00034AB2 <AmiBlitz3.ab2@10189>   ADDQ.l #3,d2
00034AB4 <AmiBlitz3.ab2@10190>   ASR.l #2,d2
00034ABA <AmiBlitz3.ab2@10191>   MOVE.l d2,hunkend+8
00034AC0 <AmiBlitz3.ab2@10192>   MOVE.l d2,bsssize2
00034AC6 <AmiBlitz3.ab2@10193>   MOVE.l D0,tstsize1b
00034ACC <AmiBlitz3.ab2@10194>   MOVE.l D0,tstsize2b
00034AD2 <AmiBlitz3.ab2@10195>   MOVE.l #hunkbegin,d2
00034ADC <AmiBlitz3.ab2@10198>   CMP.l #-1,chipstart
00034AE0 <AmiBlitz3.ab2@10199>   BEQ 'l100
00034AEA <AmiBlitz3.ab2@10200>   MOVE.l #1,chipnum
00034AEC <AmiBlitz3.ab2@10201>   MOVEQ.l #$24,D3
00034AF2 <AmiBlitz3.ab2@10202>   MOVE.l chipsize,d2
00034AF4 <AmiBlitz3.ab2@10203>   ADDQ.l #3,d2
00034AF6 <AmiBlitz3.ab2@10204>   ASR.l #2,d2
00034AFC <AmiBlitz3.ab2@10205>   MOVE.l d2,hunkend2+8
00034B02 <AmiBlitz3.ab2@10206>   MOVE.l d2,bsssize2
00034B0C <AmiBlitz3.ab2@10207>   ADD.l #$40000000,bsssize2
00034B12 <AmiBlitz3.ab2@10208>   MOVE.l D0,tstsize1b
00034B18 <AmiBlitz3.ab2@10209>   MOVE.l D0,tstsize2b
00034B1E <AmiBlitz3.ab2@10210>   MOVE.l #hunkbegin,d2
00034B22 <AmiBlitz3.ab2@10213>    BSR.w mywrite
00034B28 <AmiBlitz3.ab2@10214>   MOVE.l destbufferstart,D2
00034B2E <AmiBlitz3.ab2@10215>   ADD.l noinits,D2
00034B34 <AmiBlitz3.ab2@10216>   MOVE.l objlen,D3
00034B3A <AmiBlitz3.ab2@10217>   SUB.l #moremem,d3
00034B40 <AmiBlitz3.ab2@10218>   SUB.l noinits,D3
00034B4A <AmiBlitz3.ab2@10219>   CMP.l #-1,bssstart
00034B4E <AmiBlitz3.ab2@10220>   BNE 'l40
00034B58 <AmiBlitz3.ab2@10221>   CMP.l #-1,chipstart
00034B5C <AmiBlitz3.ab2@10222>   BNE 'l40
00034B60 <AmiBlitz3.ab2@10223> BRA 'l41
00034B66 <AmiBlitz3.ab2@10226>   MOVE.l codeend,d1
00034B68 <AmiBlitz3.ab2@10227>     SUB.l d2,d1
00034B6A <AmiBlitz3.ab2@10228>     MOVE.l d1,d3
00034B70 <AmiBlitz3.ab2@10229>   SUB.l bsssize,d3
00034B76 <AmiBlitz3.ab2@10230>   SUB.l chipsize,d3
00034B78 <AmiBlitz3.ab2@10231>   MOVE.l D7,D1
00034B7C <AmiBlitz3.ab2@10232>   BSR.w mywrite
00034B82 <AmiBlitz3.ab2@10233>   MOVE.l objlen,D3
00034B88 <AmiBlitz3.ab2@10234>   SUB.l #moremem,d3
00034B8E <AmiBlitz3.ab2@10235>   SUB.l noinits,D3
00034B90 <AmiBlitz3.ab2@10236>   MOVE.l d3,d1
00034B96 <AmiBlitz3.ab2@10237>   MOVE.l destbufferstart,D2
00034B9C <AmiBlitz3.ab2@10238>   ADD.l noinits,D2
00034B9E <AmiBlitz3.ab2@10239>   ADD.l d2,d1
00034BA4 <AmiBlitz3.ab2@10240>   SUB.l codeend,d1
00034BA6 <AmiBlitz3.ab2@10241>   MOVE.l d1,d3
00034BAC <AmiBlitz3.ab2@10242>   MOVE.l codeend,d2
00034BAE <AmiBlitz3.ab2@10245>   MOVE.l d2,d1
00034BB0 <AmiBlitz3.ab2@10246>   ADD.l d3,d1
00034BB2 <AmiBlitz3.ab2@10247>   ADDQ.l #3,D1
00034BB8 <AmiBlitz3.ab2@10248>   ANDI.l #$FFFFFFFC,D1
00034BBA <AmiBlitz3.ab2@10249>   SUB.l d2,d1
00034BBC <AmiBlitz3.ab2@10250>   MOVE.l d1,d3
00034BBE <AmiBlitz3.ab2@10251>   MOVE.l D7,D1
00034BC2 <AmiBlitz3.ab2@10252>    BSR.w mywrite
00034BCC <AmiBlitz3.ab2@10253>   MOVE.l hunkoffsetcounter,tstsize3
00034BD0 <AmiBlitz3.ab2@10254>    BEQ.w JL_0_7646
00034BD2 <AmiBlitz3.ab2@10255>   MOVE.l D7,D1
00034BD8 <AmiBlitz3.ab2@10256>   MOVE.l #tstend,D2
00034BDA <AmiBlitz3.ab2@10257>   MOVEQ.l #$04,D3
00034BDE <AmiBlitz3.ab2@10258>    BSR.w mywrite
00034BE4 <AmiBlitz3.ab2@10259>    MOVEA.l _execbase,A6
00034BEA <AmiBlitz3.ab2@10260>    MOVE.l hunkoffsetcounter,d0
00034BEC <AmiBlitz3.ab2@10261>    ASL.l #2,d0
00034BF2 <AmiBlitz3.ab2@10262>    ADD.l #12,d0
00034BF4 <AmiBlitz3.ab2@10263>    MOVEQ #0,d1
00034BF8 <AmiBlitz3.ab2@10264>    JSR _AllocMem(a6)
00034BFA <AmiBlitz3.ab2@10265>    TST.l d0
00034BFE <AmiBlitz3.ab2@10266>    BEQ nomem
00034C04 <AmiBlitz3.ab2@10267>    MOVE.l noinits,D4
00034C06 <AmiBlitz3.ab2@10268>    MOVE.l d5,-(a7)
00034C08 <AmiBlitz3.ab2@10269>    MOVE.l d0,d5
00034C0A <AmiBlitz3.ab2@10270>    MOVE.l d0,a1
00034C10 <AmiBlitz3.ab2@10271>    MOVEA.l hunkoffsetbase,A2
00034C18 <AmiBlitz3.ab2@10272>    MOVE.b #0,newhunk
00034C1C <AmiBlitz3.ab2@10275>   CMPA.w #$0,A2
00034C20 <AmiBlitz3.ab2@10276>    BEQ.w savehunk
00034C26 <AmiBlitz3.ab2@10277>   MOVE.l destbufferstart,D2
00034C2C <AmiBlitz3.ab2@10278>   ADD.l noinits,D2
00034C30 <AmiBlitz3.ab2@10279>   MOVE.l  $4(A2),d1
00034C34 <AmiBlitz3.ab2@10280>   BTST #31,d1
00034C38 <AmiBlitz3.ab2@10281>   BEQ 'lh1
00034C40 <AmiBlitz3.ab2@10282>   MOVE.b #1,newhunk
00034C44 <AmiBlitz3.ab2@10283> BRA 'lh3
00034C48 <AmiBlitz3.ab2@10286>   BTST #30,d1
00034C4C <AmiBlitz3.ab2@10287>   BEQ 'lh2
00034C54 <AmiBlitz3.ab2@10288>   MOVE.b #1,newhunk
00034C58 <AmiBlitz3.ab2@10289> BRA 'lh3
00034C5A <AmiBlitz3.ab2@10292>   ADD.l d1,d2
00034C60 <AmiBlitz3.ab2@10293>   CMP.l chipend,d2
00034C64 <AmiBlitz3.ab2@10294>   BLT 'l100
00034C6A <AmiBlitz3.ab2@10295>   SUB.l chipsize,d1
00034C70 <AmiBlitz3.ab2@10298>   CMP.l bssend,d2
00034C74 <AmiBlitz3.ab2@10299>   BLT 'l101
00034C7A <AmiBlitz3.ab2@10300>   SUB.l bsssize,d1
00034C7C <AmiBlitz3.ab2@10303>   MOVE.l d1,(a1)
00034C7E <AmiBlitz3.ab2@10304>   SUB.l D4,(A1)+
00034C80 <AmiBlitz3.ab2@10307>   MOVEA.l (A2),A2
00034C84 <AmiBlitz3.ab2@10308> BRA.w menu_createresidentfile__oloopb
00034C86 <AmiBlitz3.ab2@10312>   MOVE.l D7,D1
00034C8C <AmiBlitz3.ab2@10313>   MOVEA.l _dosbase,A6
00034C96 <AmiBlitz3.ab2@10314>   MOVE.l hunkoffsetnum,tstsize3
00034C9A <AmiBlitz3.ab2@10315>   BEQ 'ln1
00034CA0 <AmiBlitz3.ab2@10316>   MOVE.l #tstend+4,d2
00034CA2 <AmiBlitz3.ab2@10317>     MOVEQ #8,d3
00034CA6 <AmiBlitz3.ab2@10318>    JSR _Write(A6)
00034CA8 <AmiBlitz3.ab2@10319>   MOVE.l d7,d1
00034CAE <AmiBlitz3.ab2@10320>   MOVE.l hunkoffsetnum,d3
00034CB0 <AmiBlitz3.ab2@10321>   ASL.l #2,d3
00034CB2 <AmiBlitz3.ab2@10322>   MOVE.l d5,D2
00034CB6 <AmiBlitz3.ab2@10323>   JSR _Write(a6)
00034CBC <AmiBlitz3.ab2@10326>   TST.b newhunk
00034CC0 <AmiBlitz3.ab2@10327>   BEQ 'l10
00034CC6 <AmiBlitz3.ab2@10328>   MOVEA.l hunkoffsetbase,A2
00034CC8 <AmiBlitz3.ab2@10329>   MOVE.l d5,a0
00034CCA <AmiBlitz3.ab2@10330>   ADDQ #8,a0
00034CD2 <AmiBlitz3.ab2@10331>   MOVE.l bssnum,-4(a0)
00034CD4 <AmiBlitz3.ab2@10332>   MOVEQ #0,d6
00034CD8 <AmiBlitz3.ab2@10335>   CMPA.w #$0,A2
00034CDC <AmiBlitz3.ab2@10336>    BEQ.w 'lh3
00034CE2 <AmiBlitz3.ab2@10337>   MOVE.l destbufferstart,D2
00034CE8 <AmiBlitz3.ab2@10338>   ADD.l noinits,D2
00034CEC <AmiBlitz3.ab2@10339>   MOVE.l  $4(A2),d1
00034CF0 <AmiBlitz3.ab2@10340>   BTST #30,d1
00034CF4 <AmiBlitz3.ab2@10341>   BEQ 'lh1
00034CF8 <AmiBlitz3.ab2@10342>   BCLR #30,d1
00034CFA <AmiBlitz3.ab2@10343>   MOVE.l d1,(a0)
00034CFC <AmiBlitz3.ab2@10344>   SUB.l D4,(A0)+
00034CFE <AmiBlitz3.ab2@10345>   ADDQ.l #1,d6
00034D00 <AmiBlitz3.ab2@10348>   MOVE.l (a2),a2
00034D04 <AmiBlitz3.ab2@10349> BRA 'lh2
00034D06 <AmiBlitz3.ab2@10352>   TST.l d6
00034D0A <AmiBlitz3.ab2@10353>     BEQ 'lh10
00034D0C <AmiBlitz3.ab2@10354>     MOVE.l d5,a0
00034D0E <AmiBlitz3.ab2@10355>     MOVE.l d6,(a0)
00034D10 <AmiBlitz3.ab2@10356>     MOVE.l d7,d1
00034D12 <AmiBlitz3.ab2@10357>     MOVE.l d5,d2
00034D14 <AmiBlitz3.ab2@10358>     MOVE.l d6,d3
00034D16 <AmiBlitz3.ab2@10359>     ASL.l #2,d3
00034D18 <AmiBlitz3.ab2@10360>     ADDQ.l #8,d3
00034D1C <AmiBlitz3.ab2@10361>     BSR.w mywrite
00034D22 <AmiBlitz3.ab2@10364>   MOVEA.l hunkoffsetbase,A2
00034D24 <AmiBlitz3.ab2@10365>   MOVE.l d5,a0
00034D26 <AmiBlitz3.ab2@10366>   ADDQ #8,a0
00034D2E <AmiBlitz3.ab2@10367>   MOVE.l chipnum,-4(a0)
00034D30 <AmiBlitz3.ab2@10368>   MOVEQ #0,d6
00034D34 <AmiBlitz3.ab2@10371>   CMPA.w #$0,A2
00034D38 <AmiBlitz3.ab2@10372>    BEQ.w 'lh30
00034D3E <AmiBlitz3.ab2@10373>   MOVE.l destbufferstart,D2
00034D44 <AmiBlitz3.ab2@10374>   ADD.l noinits,D2
00034D48 <AmiBlitz3.ab2@10375>   MOVE.l  $4(A2),d1
00034D4C <AmiBlitz3.ab2@10376>   BTST #31,d1
00034D50 <AmiBlitz3.ab2@10377>   BEQ 'lh11
00034D54 <AmiBlitz3.ab2@10378>   BCLR #31,d1
00034D56 <AmiBlitz3.ab2@10379>   MOVE.l d1,(a0)
00034D58 <AmiBlitz3.ab2@10380>   SUB.l D4,(A0)+
00034D5A <AmiBlitz3.ab2@10381>   ADDQ.l #1,d6
00034D5C <AmiBlitz3.ab2@10384>   MOVE.l (a2),a2
00034D60 <AmiBlitz3.ab2@10385> BRA 'lh20
00034D62 <AmiBlitz3.ab2@10388>   TST.l d6
00034D66 <AmiBlitz3.ab2@10389>     BEQ 'l10
00034D68 <AmiBlitz3.ab2@10390>     MOVE.l d5,a0
00034D6A <AmiBlitz3.ab2@10391>     MOVE.l d6,(a0)
00034D6C <AmiBlitz3.ab2@10392>     MOVE.l d7,d1
00034D6E <AmiBlitz3.ab2@10393>     MOVE.l d5,d2
00034D70 <AmiBlitz3.ab2@10394>     MOVE.l d6,d3
00034D72 <AmiBlitz3.ab2@10395>     ASL.l #2,d3
00034D74 <AmiBlitz3.ab2@10396>     ADDQ.l #8,d3
00034D78 <AmiBlitz3.ab2@10397>     BSR.w mywrite
00034D7E <AmiBlitz3.ab2@10401>    MOVEA.l _execbase,A6
00034D84 <AmiBlitz3.ab2@10402>    MOVE.l hunkoffsetcounter,d0
00034D86 <AmiBlitz3.ab2@10403>    ASL.l #2,d0
00034D8C <AmiBlitz3.ab2@10404>    ADD.l #12,d0
00034D8E <AmiBlitz3.ab2@10405>    MOVE.l d5,a1
00034D92 <AmiBlitz3.ab2@10406>    JSR _FreeMem(a6)
00034D98 <AmiBlitz3.ab2@10407>    MOVEA.l _dosbase,A6
00034D9A <AmiBlitz3.ab2@10408>    MOVE.l (a7)+,d5
00034D9E <AmiBlitz3.ab2@10409> BRA JL_0_7632
00034DA4 <AmiBlitz3.ab2@10413>   MOVEA.l hunkoffsetbase,A2
00034DAA <AmiBlitz3.ab2@10414>   MOVE.l noinits,D4
00034DAE <AmiBlitz3.ab2@10417>   CMPA.w #$0,A2                                            ;write hunkoffsets
00034DB2 <AmiBlitz3.ab2@10418>   BEQ.w JL_0_7632
00034DB6 <AmiBlitz3.ab2@10419>   LEA $4(A2),A1
00034DB8 <AmiBlitz3.ab2@10420>   SUB.l D4,(A1)
00034DBA <AmiBlitz3.ab2@10421>   MOVE.l D7,D1
00034DBC <AmiBlitz3.ab2@10422>   MOVE.l A1,D2
00034DBE <AmiBlitz3.ab2@10423>   MOVEQ.l #$04,D3
00034DC2 <AmiBlitz3.ab2@10424>   BSR.w mywrite
00034DC6 <AmiBlitz3.ab2@10425>   ADD.l D4,$4(A2)
00034DC8 <AmiBlitz3.ab2@10426>   MOVEA.l (A2),A2
00034DCC <AmiBlitz3.ab2@10427> BRA.w JL_0_7610
00034DD2 <AmiBlitz3.ab2@10430>   CLR.l tstsize3
00034DD4 <AmiBlitz3.ab2@10431>   MOVE.l D7,D1
00034DDA <AmiBlitz3.ab2@10432>   MOVE.l #tstsize3,D2
00034DDC <AmiBlitz3.ab2@10433>   MOVEQ.l #$04,D3
00034DE0 <AmiBlitz3.ab2@10434>    BSR.w mywrite
00034DE8 <AmiBlitz3.ab2@10437>   BTST #$7,link_debuginfo
00034DEC <AmiBlitz3.ab2@10438>    BEQ.w JL_0_7706
00034DF2 <AmiBlitz3.ab2@10439>   MOVE.l #sysdebug,D2                                      ;debughunks
00034DF4 <AmiBlitz3.ab2@10440>   MOVEQ.l #$04,D3
00034DF6 <AmiBlitz3.ab2@10441>   MOVE.l D7,D1
00034DFA <AmiBlitz3.ab2@10442>    BSR.w mywrite
00034E00 <AmiBlitz3.ab2@10443>   MOVEA.l labelbase,A2
00034E04 <AmiBlitz3.ab2@10446>   CMPA.w #$0,A2
00034E08 <AmiBlitz3.ab2@10447>    BEQ.w JL_0_76F8
00034E0E <AmiBlitz3.ab2@10448>   BTST #$0,$7(A2)
00034E12 <AmiBlitz3.ab2@10449>    BEQ.w JL_0_7682
00034E1A <AmiBlitz3.ab2@10450>   CMPI.l #$1,$4(A2)
00034E1E <AmiBlitz3.ab2@10452>   BRA.w JL_0_76F2                                            ;only addr labels
00034E20 <AmiBlitz3.ab2@10454>   MOVEQ.l #$00,D4
00034E24 <AmiBlitz3.ab2@10455>   MOVE.b $12(A2),D4
00034E28 <AmiBlitz3.ab2@10456>   SUBI.w #$13,D4
00034E2A <AmiBlitz3.ab2@10457>   ADDQ.w #2,D4
00034E2E <AmiBlitz3.ab2@10458>   ANDI.w #$FFFC,D4
00034E30 <AmiBlitz3.ab2@10459>   MOVE.l D4,D5
00034E32 <AmiBlitz3.ab2@10460>   LSR.w #2,D5
00034E38 <AmiBlitz3.ab2@10461>   MOVE.l D5,temp1
00034E3A <AmiBlitz3.ab2@10462>   LSL.w #2,D5
00034E40 <AmiBlitz3.ab2@10463>   MOVE.l #temp1,a1
00034E46 <AmiBlitz3.ab2@10465>   LEA debugstore,a0
00034E48 <AmiBlitz3.ab2@10466>   MOVE.l (a1),(a0)+
00034E4A <AmiBlitz3.ab2@10467>   MOVEQ.l #$04,D3
00034E4E <AmiBlitz3.ab2@10470>   LEA $13(A2),A1
00034E50 <AmiBlitz3.ab2@10471>   MOVE.l d4,d1
00034E52 <AmiBlitz3.ab2@10472>   SUBQ.l #1,d1
00034E54 <AmiBlitz3.ab2@10475>     MOVE.b (a1)+,d0
00034E58 <AmiBlitz3.ab2@10476>     BEQ 'l21
00034E5C <AmiBlitz3.ab2@10477>     CMP.b #"'",d0                                            ; ' does reassembler/assembler not like, so replace
00034E60 <AmiBlitz3.ab2@10478>     BNE 'ok
00034E64 <AmiBlitz3.ab2@10479>     MOVE.b #"_",d0
00034E66 <AmiBlitz3.ab2@10480> 'ok    MOVE.b d0,(a0)+                                      ; copy labeltext to debuginfo
00034E6A <AmiBlitz3.ab2@10481>   DBF d1,'l10
00034E6E <AmiBlitz3.ab2@10483> BRA 'l22
00034E70 <AmiBlitz3.ab2@10486>       CLR.b (a0)+
00034E74 <AmiBlitz3.ab2@10487>   DBF d1,'l21
00034E76 <AmiBlitz3.ab2@10490>   ADD.l d4,d3
00034E78 <AmiBlitz3.ab2@10495>   SUB.l D4,D5
00034E7C <AmiBlitz3.ab2@10496>    BEQ.w JL_0_76CE
00034E82 <AmiBlitz3.ab2@10497>   MOVE.l #zero,a1
00034E84 <AmiBlitz3.ab2@10499>   MOVE.l (a1),(a0)+
00034E86 <AmiBlitz3.ab2@10501>   ADD.l d5,d3
00034E8A <AmiBlitz3.ab2@10506>   MOVE.l $8(A2),D2
00034E90 <AmiBlitz3.ab2@10507>   SUB.l destbufferstart,D2
00034E96 <AmiBlitz3.ab2@10508>   SUB.l noinits,D2
00034E9C <AmiBlitz3.ab2@10509>   MOVE.l D2,temp1
00034EA2 <AmiBlitz3.ab2@10510>   MOVE.l #temp1,a1
00034EA4 <AmiBlitz3.ab2@10512>   MOVE.l (a1),(a0)+
00034EAA <AmiBlitz3.ab2@10513>   ADD.l #4,d3
00034EB0 <AmiBlitz3.ab2@10514>   LEA debugstore,a0
00034EB2 <AmiBlitz3.ab2@10515>   MOVE.l a0,d2
00034EB4 <AmiBlitz3.ab2@10517>   MOVE.l D7,D1
00034EB8 <AmiBlitz3.ab2@10518>   BSR.w mywrite
00034EBA <AmiBlitz3.ab2@10521>   MOVEA.l (A2),A2
00034EBE <AmiBlitz3.ab2@10522> BRA.w JL_0_7664
00034EC4 <AmiBlitz3.ab2@10526>   MOVE.l #zero,D2
00034EC6 <AmiBlitz3.ab2@10527>   MOVEQ.l #$04,D3
00034EC8 <AmiBlitz3.ab2@10528>   MOVE.l D7,D1
00034ECC <AmiBlitz3.ab2@10529>   BSR.w mywrite
00034ECE <AmiBlitz3.ab2@10532>   MOVE.l D7,D1
00034ED4 <AmiBlitz3.ab2@10533>   MOVE.l #tstdone,D2                                      ;hunkend
00034ED6 <AmiBlitz3.ab2@10534>   MOVEQ.l #$04,D3
00034EE0 <AmiBlitz3.ab2@10535>   CMPI.l #-1,bssstart
00034EE4 <AmiBlitz3.ab2@10536>   BEQ 'l10
00034EE6 <AmiBlitz3.ab2@10537>   MOVEQ #16,d3
00034EEC <AmiBlitz3.ab2@10538>   MOVE.l #hunkend,d2
00034EF6 <AmiBlitz3.ab2@10539>   CMPI.l #-1,chipstart
00034EFA <AmiBlitz3.ab2@10540>   BEQ 'l10
00034EFC <AmiBlitz3.ab2@10541>   MOVE.l d7,d1
00034EFE <AmiBlitz3.ab2@10542>   MOVEQ #12,d3
00034F02 <AmiBlitz3.ab2@10543>   BSR.w mywrite
00034F0C <AmiBlitz3.ab2@10546>   CMPI.l #-1,chipstart
00034F10 <AmiBlitz3.ab2@10547>   BEQ 'l11
00034F12 <AmiBlitz3.ab2@10548>   MOVEQ #12,d3
00034F18 <AmiBlitz3.ab2@10549>   MOVE.l #hunkend2,d2
00034F1A <AmiBlitz3.ab2@10550>   MOVE.l d7,d1
00034F1E <AmiBlitz3.ab2@10551>   BSR.w mywrite
00034F20 <AmiBlitz3.ab2@10552>   MOVE.l d7,d1
00034F26 <AmiBlitz3.ab2@10553>   MOVE.l chipstart,d2
00034F2C <AmiBlitz3.ab2@10554>   MOVE.l chipsize,d3
00034F30 <AmiBlitz3.ab2@10555>   BSR.w mywrite
00034F32 <AmiBlitz3.ab2@10556>   MOVEQ #4,d3
00034F38 <AmiBlitz3.ab2@10557>   MOVE.l #hunkend,d2
00034F3A <AmiBlitz3.ab2@10558>   MOVE.l d7,d1
00034F3E <AmiBlitz3.ab2@10561>   BSR.w mywrite
00034F40 <AmiBlitz3.ab2@10562>   MOVE.l D7,D1
00034F46 <AmiBlitz3.ab2@10563>   MOVEA.l _dosbase,A6
00034F4A <AmiBlitz3.ab2@10564>   JSR _Close(A6)
00034F52 <AmiBlitz3.ab2@10569>   BTST #$7,create_iconfile
00034F56 <AmiBlitz3.ab2@10570>    BEQ.w skip_createicon
00034F5C <AmiBlitz3.ab2@10572>   MOVEA.l ptr_newexefilename,A0
00034F5E <AmiBlitz3.ab2@10575>     TST.b (A0)+
00034F62 <AmiBlitz3.ab2@10576>   BNE.w JL_0_772C
00034F64 <AmiBlitz3.ab2@10577>   SUBQ.w #1,A0
00034F66 <AmiBlitz3.ab2@10578>   MOVE.l A0,-(A7)
00034F6C <AmiBlitz3.ab2@10579>   LEA str_infoextention2,A1
00034F6E <AmiBlitz3.ab2@10582>     MOVE.b (A1)+,(A0)+
00034F72 <AmiBlitz3.ab2@10583>   BNE.w JL_0_773A
00034F78 <AmiBlitz3.ab2@10585>   MOVE.l ptr_newexefilename,D1
00034F7A <AmiBlitz3.ab2@10586>   MOVEQ.l #-$02,D2
00034F80 <AmiBlitz3.ab2@10587>   MOVEA.l _dosbase,A6
00034F84 <AmiBlitz3.ab2@10588>   JSR _Lock(A6)
00034F86 <AmiBlitz3.ab2@10589>   MOVE.l D0,D1
00034F8A <AmiBlitz3.ab2@10590>   BEQ.w JL_0_775A                                          ;no icon exit so jump to create one  tomsmart1
00034F8E <AmiBlitz3.ab2@10591>   JSR _UnLock(A6)                                          ;OH!! there is a Icon so we must Unlock it  tomsmart1
00034F92 <AmiBlitz3.ab2@10592> BRA.w JL_0_7788                                            ;and skip writing a Icon  tomsmart1
00034F98 <AmiBlitz3.ab2@10595>   MOVE.l ptr_newexefilename,D1
00034F9E <AmiBlitz3.ab2@10596>   MOVE.l #HUNK_RELOC_8__MODE_NEWFILE,D2
00034FA4 <AmiBlitz3.ab2@10597>   MOVEA.l _dosbase,A6
00034FA8 <AmiBlitz3.ab2@10598>    JSR _Open(A6)
00034FAA <AmiBlitz3.ab2@10599>   MOVE.l D0,D7
00034FAE <AmiBlitz3.ab2@10600>    BEQ.w JL_0_7788
00034FB4 <AmiBlitz3.ab2@10601>   MOVE.l #icongfx_data,D2                                  ; icon graphics
00034FBA <AmiBlitz3.ab2@10602>   MOVE.l #icongfx_data_end-icongfx_data,D3                 ; length of gfx-data
00034FBC <AmiBlitz3.ab2@10603>   MOVE.l D7,D1
00034FC2 <AmiBlitz3.ab2@10604>   MOVEA.l _dosbase,A6
00034FC6 <AmiBlitz3.ab2@10605>   JSR _Write(A6)
00034FC8 <AmiBlitz3.ab2@10606>   MOVE.l D7,D1
00034FCC <AmiBlitz3.ab2@10607>   JSR _Close(A6)
00034FCE <AmiBlitz3.ab2@10610>   MOVEA.l (A7)+,A0
00034FD0 <AmiBlitz3.ab2@10611>   CLR.b (A0)
00034FD6 <AmiBlitz3.ab2@10616>   TST.b exdebug
00034FDA <AmiBlitz3.ab2@10617>    BEQ JL_0_757Cb
00034FE0 <AmiBlitz3.ab2@10618>   MOVE.w dontwrite,D1
00034FE4 <AmiBlitz3.ab2@10619>   BNE.w JL_0_757Cb
00034FEA <AmiBlitz3.ab2@10620>   MOVE.l chipsize,d5
00034FF0 <AmiBlitz3.ab2@10621>   MOVE.l bsssize,d3
00034FF6 <AmiBlitz3.ab2@10622>   MOVE.l chipstart,d7
00034FFC <AmiBlitz3.ab2@10623>   MOVE.l bssstart,d6
00035002 <AmiBlitz3.ab2@10624>   MOVEA.l hunkoffsetbase,A2
00035008 <AmiBlitz3.ab2@10625>   MOVEA.l destbufferstart,A1
0003500A <AmiBlitz3.ab2@10626>   MOVE.l A1,D2
00035010 <AmiBlitz3.ab2@10627>   ADD.l noinits,D2
00035016 <AmiBlitz3.ab2@10628>   CLR.l hunkoffsetnum
0003501A <AmiBlitz3.ab2@10631>   CMPA.w #$0,A2
0003501E <AmiBlitz3.ab2@10632>    BEQ.w JL_0_757Cb
00035022 <AmiBlitz3.ab2@10633>   MOVE.l $4(A2),D0
00035026 <AmiBlitz3.ab2@10634>    LEA $0(a1,d0.l),a0
00035028 <AmiBlitz3.ab2@10635>    MOVE.l (a0),d1
0003502A <AmiBlitz3.ab2@10636>   TST.l d1
0003502E <AmiBlitz3.ab2@10637>    BMI.w 'lm1
00035036 <AmiBlitz3.ab2@10638>   MOVE.b #0,newhunk
00035040 <AmiBlitz3.ab2@10639>   CMP.l #-1,chipstart
00035044 <AmiBlitz3.ab2@10640>   BEQ 'l10
0003504A <AmiBlitz3.ab2@10641>   CMP.l chipstart,d1
0003504E <AmiBlitz3.ab2@10642>   BLT 'l10
00035056 <AmiBlitz3.ab2@10643>   MOVE.b #1,newhunk
0003505C <AmiBlitz3.ab2@10644>   CMP.l chipend,d1
00035060 <AmiBlitz3.ab2@10645>   BGE 'l110
00035062 <AmiBlitz3.ab2@10646>   ADD.l d7,(a0)
0003506A <AmiBlitz3.ab2@10647>   ADD.l #$80000000,4(a2)
0003506E <AmiBlitz3.ab2@10648> BRA JL_0_7576b
00035072 <AmiBlitz3.ab2@10651>   ADD.l d5,0(a0)
0003507C <AmiBlitz3.ab2@10654>   CMP.l #-1,bssstart
00035080 <AmiBlitz3.ab2@10655>     BEQ 'l11
00035086 <AmiBlitz3.ab2@10656>   CMP.l bssstart,d1
0003508A <AmiBlitz3.ab2@10657>   BLT 'l11
00035090 <AmiBlitz3.ab2@10658>   CMP.l bssend,d1
00035094 <AmiBlitz3.ab2@10659>   BGE 'l111
0003509A <AmiBlitz3.ab2@10660>   TST.b newhunk
0003509E <AmiBlitz3.ab2@10661>   BEQ 'ln1
000350A0 <AmiBlitz3.ab2@10662>   ADD.l d5,(a0)
000350A2 <AmiBlitz3.ab2@10665>   ADD.l d6,(a0)
000350AA <AmiBlitz3.ab2@10666>   ADD.l #$40000000,4(a2)
000350AE <AmiBlitz3.ab2@10667> BRA JL_0_7576b
000350B2 <AmiBlitz3.ab2@10670>   ADD.l d3,0(a0)
000350B4 <AmiBlitz3.ab2@10673>   ADD.l D2,(A0)                                            ;only normal code offsets restore
000350BA <AmiBlitz3.ab2@10676>   ADDQ.l #1,hunkoffsetnum
000350BC <AmiBlitz3.ab2@10679>   MOVEA.l (A2),A2
000350C0 <AmiBlitz3.ab2@10680> BRA.w JL_0_755Eb
000350C6 <AmiBlitz3.ab2@10683>   JSR call_setpointernormal
000350CA <AmiBlitz3.ab2@10684>   MOVEM.l (a7)+,d2-d7/a2-a6
000350CC <AmiBlitz3.ab2@10686> RTS
000350CE <AmiBlitz3.ab2@10690>   MOVE.l D2,-(A7)
000350D4 <AmiBlitz3.ab2@10691>   MOVE.l destpointer,D2
000350DA <AmiBlitz3.ab2@10692>   SUB.l destbufferstart,D2
000350DE <AmiBlitz3.ab2@10693>   BSR.w addhunkoffset
000350E0 <AmiBlitz3.ab2@10694>   MOVE.l (A7)+,D2
000350E2 <AmiBlitz3.ab2@10695> RTS
000350E6 <AmiBlitz3.ab2@10699>   MOVEM.l D0-D1/A0-A1/A6,-(A7)
000350EC <AmiBlitz3.ab2@10700>   TST.b nohunkoffset
000350F0 <AmiBlitz3.ab2@10701>   BNE 'l10
000350F2 <AmiBlitz3.ab2@10702>   MOVEQ.l #$8,D0
000350F4 <AmiBlitz3.ab2@10703>   MOVEQ.l #$01,D1
000350FA <AmiBlitz3.ab2@10704>   MOVEA.l _execbase,A6
00035100 <AmiBlitz3.ab2@10705>   MOVE.l mempool2,a0
00035104 <AmiBlitz3.ab2@10706>   JSR _AllocPooled(a6)
0003510A <AmiBlitz3.ab2@10708>   ADDQ.l #1,hunkoffsetcounter
0003510C <AmiBlitz3.ab2@10709>   MOVEA.l D0,A0
00035112 <AmiBlitz3.ab2@10710>   MOVE.l hunkoffsetbase,(A0)
00035118 <AmiBlitz3.ab2@10711>   MOVE.l A0,hunkoffsetbase
0003511C <AmiBlitz3.ab2@10712>   MOVE.l D2,$4(A0)
00035120 <AmiBlitz3.ab2@10715>   MOVEM.l (A7)+,D0-D1/A0-A1/A6
00035122 <AmiBlitz3.ab2@10716> RTS
00035128 <AmiBlitz3.ab2@10720>   CLR.l hunkoffsetbase
0003512E <AmiBlitz3.ab2@10721>   MOVEA.l _execbase,A6
00035134 <AmiBlitz3.ab2@10722>   MOVEA.l hunkoffsetbase,A2
00035138 <AmiBlitz3.ab2@10725>     CMPA.w #$0,A2
0003513C <AmiBlitz3.ab2@10726>      BEQ.w JL_0_7988
0003513E <AmiBlitz3.ab2@10727>     MOVEA.l A2,A1
00035140 <AmiBlitz3.ab2@10728>     MOVEQ.l #$08,D0
00035142 <AmiBlitz3.ab2@10729>     MOVEA.l (A2),A2
00035148 <AmiBlitz3.ab2@10730>     MOVE.l mempool2,a0
0003514C <AmiBlitz3.ab2@10731>     JSR _FreePooled(A6)
00035150 <AmiBlitz3.ab2@10732> BRA.w JL_0_7972
00035156 <AmiBlitz3.ab2@10735>   CLR.l hunkoffsetcounter
00035158 <AmiBlitz3.ab2@10736> RTS
00035170 <AmiBlitz3.ab2@10739> cmakebuff:  Ds.l 6                                          ;dc.w 12 org source
00035174 <AmiBlitz3.ab2@10740> cmakea5:    Ds.l 1
00035176 <AmiBlitz3.ab2@10741> cmake:      Ds.w 1
000351F6 <AmiBlitz3.ab2@10742> cmakebak:   Ds.l 32                                         ;ds.b 128 org source
000351FC <AmiBlitz3.ab2@10746>   MOVE.l A5,lastsourcepos
00035206 <AmiBlitz3.ab2@10747>   MOVE.w instringon,oldqflag
00035208 <AmiBlitz3.ab2@10751>   MOVEQ.l #$00,D0
0003520A <AmiBlitz3.ab2@10752>   MOVE.b (A5)+,D0
0003520E <AmiBlitz3.ab2@10753>    BEQ getcharb__donea
00035212 <AmiBlitz3.ab2@10754>   BPL getcharb__stuffa
00035214 <AmiBlitz3.ab2@10755>   LSL.l #8,D0
00035216 <AmiBlitz3.ab2@10756>   MOVE.b (A5)+,D0
00035218 <AmiBlitz3.ab2@10757>   MOVE.l a1,-(a7)
0003521E <AmiBlitz3.ab2@10758>   LEA replacedat,a1
00035222 <AmiBlitz3.ab2@10759>   Dc.w $4a71,$0a00                                         ;TST.w 0(a1,d0.l*2)
00035226 <AmiBlitz3.ab2@10760>   BEQ getchar__l10
0003522A <AmiBlitz3.ab2@10761>   Dc.w $3031,$0a00                                         ;MOVE.w 0(a1,d0.l*2),d0
00035230 <AmiBlitz3.ab2@10764>   MOVE.l d0,lasttoken
00035232 <AmiBlitz3.ab2@10765>   MOVE.l (a7)+,a1
00035236 <AmiBlitz3.ab2@10766> BRA getchar__weiter
0003523A <AmiBlitz3.ab2@10769>   CMP.w #$22,D0
0003523E <AmiBlitz3.ab2@10770>    BEQ.b swapquotea
00035242 <AmiBlitz3.ab2@10771>   CMP.w #$3B,D0
00035246 <AmiBlitz3.ab2@10772>    BNE.b getcharb__donea
0003524C <AmiBlitz3.ab2@10773>   TST.w instringon
00035250 <AmiBlitz3.ab2@10774>    BNE.b getcharb__donea
00035252 <AmiBlitz3.ab2@10777>   MOVE.b (A5)+,D0
00035256 <AmiBlitz3.ab2@10778>              BEQ getchar__l1
0003525A <AmiBlitz3.ab2@10779>              CMP.b #":",d0
0003525E <AmiBlitz3.ab2@10780>              BNE getcharb__loopa                                ;:@
00035262 <AmiBlitz3.ab2@10781>              CMP.b #"@",(a5)
00035266 <AmiBlitz3.ab2@10782>              BNE getcharb__loopa
00035268 <AmiBlitz3.ab2@10783>              ADDQ #1,a5
0003526E <AmiBlitz3.ab2@10786>   MOVE.w D0,lastchar
00035272 <AmiBlitz3.ab2@10789> BRA.s getchar__weiter
00035278 <AmiBlitz3.ab2@10792>   NOT.w instringon
0003527E <AmiBlitz3.ab2@10795>    MOVE.w D0,lastchar
00035282 <AmiBlitz3.ab2@10796>    BEQ.w getchar__done
00035286 <AmiBlitz3.ab2@10797>    BPL.w getchar__done2
0003528A <AmiBlitz3.ab2@10798>   CMP.w #-$7FE4,D0                                         ;cnif
0003528E <AmiBlitz3.ab2@10799>    BEQ.w getchar__cnif
00035292 <AmiBlitz3.ab2@10800>   CMP.w #-$7FE3,D0                                         ;csif
00035296 <AmiBlitz3.ab2@10801>    BEQ.w getchar__csif
0003529A <AmiBlitz3.ab2@10802>   CMP.w #-$7FE2,D0                                         ;celse
0003529E <AmiBlitz3.ab2@10803>    BEQ.w getchar__celse
000352A2 <AmiBlitz3.ab2@10804>   CMP.w #-$7FE1,D0                                         ;cend
000352A6 <AmiBlitz3.ab2@10805>    BEQ.w getchar__cend
000352AC <AmiBlitz3.ab2@10808>   TST.w skipcode
000352B0 <AmiBlitz3.ab2@10809>    BEQ.w getchar
000352B4 <AmiBlitz3.ab2@10810>   CMP.w #$7E,D0
000352B8 <AmiBlitz3.ab2@10811>    BEQ.w getchar__cmake                                         ;tilde
000352BC <AmiBlitz3.ab2@10812>   CMP.w #$2,D0
000352C0 <AmiBlitz3.ab2@10813>    BNE.w getchar__notunpath
000352C6 <AmiBlitz3.ab2@10814>   MOVEA.l usedfrom,A5
000352CC <AmiBlitz3.ab2@10815>   CLR.l usedfrom
000352D0 <AmiBlitz3.ab2@10816> BRA.w getchar
000352D4 <AmiBlitz3.ab2@10819>   CMP.w #$1,D0
000352D8 <AmiBlitz3.ab2@10820>    BNE.w getchar__done
000352DC <AmiBlitz3.ab2@10824>   MOVEA.l cmakea5(PC),A5
000352E0 <AmiBlitz3.ab2@10825> BRA.w getchar
000352E6 <AmiBlitz3.ab2@10828>   TST.w cmake
000352EA <AmiBlitz3.ab2@10829>    BNE.w getchar__done
000352EE <AmiBlitz3.ab2@10831>   MOVEM.l D0-D7/A0-A6,-(A7)
000352F4 <AmiBlitz3.ab2@10832>   LEA cmake,a0                                         ;reass
000352F6 <AmiBlitz3.ab2@10833>   NOT.w (a0)
000352FA <AmiBlitz3.ab2@10834>   LEA cmakebak(PC),A0
00035300 <AmiBlitz3.ab2@10835>   LEA ptr_parameterstore,A1
00035302 <AmiBlitz3.ab2@10836>   MOVEQ.l #$1F,D0
00035304 <AmiBlitz3.ab2@10839>     MOVE.l (A1)+,(A0)+
00035308 <AmiBlitz3.ab2@10840>   DBF D0,getchar__cmloop
0003530E <AmiBlitz3.ab2@10843>    JSR AJL_0_BF6E
00035312 <AmiBlitz3.ab2@10844>   CMP.w #$7E,D0
00035316 <AmiBlitz3.ab2@10845>    BNE.w syntaxerr
0003531C <AmiBlitz3.ab2@10846>   MOVE.l A5,cmakea5                                      ;tilde
00035320 <AmiBlitz3.ab2@10847>   LEA cmakebuff(PC),A0
00035322 <AmiBlitz3.ab2@10848>   MOVE.l D3,D2
00035326 <AmiBlitz3.ab2@10849>   BSR.w makelong
00035328 <AmiBlitz3.ab2@10850>   ADDQ.b #1,(A0)
0003532E <AmiBlitz3.ab2@10851>   LEA cmake,a0
00035330 <AmiBlitz3.ab2@10852>   NOT.w (a0)                                               ;reass
00035334 <AmiBlitz3.ab2@10853>   LEA cmakebak(PC),A0
0003533A <AmiBlitz3.ab2@10854>   LEA ptr_parameterstore,A1
0003533C <AmiBlitz3.ab2@10855>   MOVEQ.l #$1F,D0
0003533E <AmiBlitz3.ab2@10858>     MOVE.l (A0)+,(A1)+
00035342 <AmiBlitz3.ab2@10859>   DBF D0,getchar__cmloop2
00035346 <AmiBlitz3.ab2@10861>   MOVEM.l (A7)+,D0-D7/A0-A6
0003534A <AmiBlitz3.ab2@10862>   LEA cmakebuff(PC),A5
0003534E <AmiBlitz3.ab2@10863> BRA.w getchar
00035350 <AmiBlitz3.ab2@10866> RTS
0003535A <AmiBlitz3.ab2@10870>   MOVE.l linenumat,ciflineat                               ;csif
00035360 <AmiBlitz3.ab2@10871>   TST.w skipcode
00035364 <AmiBlitz3.ab2@10872>    BEQ.w getchar__incnest
00035368 <AmiBlitz3.ab2@10873>    BSR.w get1bytemain
0003536A <AmiBlitz3.ab2@10874>    MOVE.l a1,-(a7)
00035370 <AmiBlitz3.ab2@10875>    JSR JL_0_C492
00035372 <AmiBlitz3.ab2@10876>    MOVE.l (a7)+,a1
00035376 <AmiBlitz3.ab2@10877> BRA.w getchar
00035380 <AmiBlitz3.ab2@10880>   MOVE.l linenumat,ciflineat                               ;cnif
00035386 <AmiBlitz3.ab2@10881>   TST.w skipcode
0003538A <AmiBlitz3.ab2@10882>    BEQ.w getchar__incnest
0003538E <AmiBlitz3.ab2@10883>    BSR.w get1bytemain
00035392 <AmiBlitz3.ab2@10884>    CMP.b #"@",d0
00035396 <AmiBlitz3.ab2@10885>    BNE getchar__cnif_ok2
0003539A <AmiBlitz3.ab2@10886>    BSR.w get1bytemain
000353A2 <AmiBlitz3.ab2@10887>    MOVE.b #1,incnif
000353A8 <AmiBlitz3.ab2@10888>    JSR findconstant2
000353AC <AmiBlitz3.ab2@10889>    BEQ getchar__cnif_ok2
000353B2 <AmiBlitz3.ab2@10892>    MOVE.w fast,-(a7)
000353B8 <AmiBlitz3.ab2@10893>    CLR.b fast
000353BA <AmiBlitz3.ab2@10894>    MOVE.l a1,-(a7)
000353C0 <AmiBlitz3.ab2@10895>    JSR JL_0_C47E
000353C6 <AmiBlitz3.ab2@10896>    CLR.b incnif
000353C8 <AmiBlitz3.ab2@10897>    MOVE.l (a7)+,a1
000353CE <AmiBlitz3.ab2@10898>    MOVE.w (a7)+,fast
000353D2 <AmiBlitz3.ab2@10899> BRA.w getchar
000353D8 <AmiBlitz3.ab2@10902>   ADDQ.w #1,connest
000353DC <AmiBlitz3.ab2@10903> BRA.w getchar
000353E2 <AmiBlitz3.ab2@10906>   MOVE.w connest,D0                                      ;celse
000353E6 <AmiBlitz3.ab2@10907>    BNE.w getchar
000353EC <AmiBlitz3.ab2@10908>   NOT.w skipcode
000353F0 <AmiBlitz3.ab2@10909> BRA.w getchar
000353F6 <AmiBlitz3.ab2@10912>   SUBQ.w #1,connest                                      ;cend
000353FA <AmiBlitz3.ab2@10913>    BPL.w getchar
00035400 <AmiBlitz3.ab2@10914>   ADDQ.w #1,connest
00035406 <AmiBlitz3.ab2@10915>   MOVEA.l concomsp,A0
0003540C <AmiBlitz3.ab2@10916>   CMPA.l #concomstack,A0
00035410 <AmiBlitz3.ab2@10917>    BEQ.w nociferr
00035412 <AmiBlitz3.ab2@10918>   SUBQ.w #2,A0
00035418 <AmiBlitz3.ab2@10919>   MOVE.l A0,concomsp
0003541E <AmiBlitz3.ab2@10920>   MOVE.w (A0),skipcode
00035422 <AmiBlitz3.ab2@10921> BRA.w getchar
00035426 <AmiBlitz3.ab2@10924> ciflineat:   Ds.l 1
00035428 <AmiBlitz3.ab2@10932>   MOVEQ.l #$00,D0
0003542A <AmiBlitz3.ab2@10933>   MOVE.b (A5)+,D0
0003542E <AmiBlitz3.ab2@10934>    BEQ.b getcharb__done
00035432 <AmiBlitz3.ab2@10935>    BPL.b getcharb__stuff
00035434 <AmiBlitz3.ab2@10936>   LSL.w #8,D0
00035436 <AmiBlitz3.ab2@10937>   MOVE.b (A5)+,D0
00035438 <AmiBlitz3.ab2@10938> RTS
0003543C <AmiBlitz3.ab2@10941>   CMP.w #$22,D0
00035440 <AmiBlitz3.ab2@10942>    BEQ.b swapquote
00035444 <AmiBlitz3.ab2@10943>   CMP.w #$3B,D0
00035448 <AmiBlitz3.ab2@10944>    BNE.b getcharb__done
0003544E <AmiBlitz3.ab2@10945>   TST.w instringon
00035452 <AmiBlitz3.ab2@10946>    BNE.b getcharb__done
00035454 <AmiBlitz3.ab2@10949>   MOVE.b (A5)+,D0
00035458 <AmiBlitz3.ab2@10950>             BEQ getcharb__loop_l1
0003545C <AmiBlitz3.ab2@10951>             CMP.b #":",d0
00035460 <AmiBlitz3.ab2@10952>             BNE getcharb__loop
00035464 <AmiBlitz3.ab2@10953>             CMP.b #"@",(a5)
00035468 <AmiBlitz3.ab2@10954>             BNE getcharb__loop
0003546E <AmiBlitz3.ab2@10957>   MOVE.w D0,lastchar
00035470 <AmiBlitz3.ab2@10960> RTS
00035476 <AmiBlitz3.ab2@10963>   NOT.w instringon
00035478 <AmiBlitz3.ab2@10964> RTS
0003547C <AmiBlitz3.ab2@10968>   BSR.w getchar
00035482 <AmiBlitz3.ab2@10969>   TST.w instringon
00035486 <AmiBlitz3.ab2@10970>    BNE.w get1byte__skip
0003548A <AmiBlitz3.ab2@10971>   CMP.w #$20,D0
0003548E <AmiBlitz3.ab2@10972>    BEQ.w get1byte_
00035490 <AmiBlitz3.ab2@10975> RTS
000354AA <AmiBlitz3.ab2@10978> gs:        Ds.w 13                                         ;ds.b 26  org source
000354AE <AmiBlitz3.ab2@10979>            Dc.b $F6,$E4,$FC,$D6                            ;dc.b 228,246,252,196,214,220 org source
000354B0 <AmiBlitz3.ab2@10980>            Dc.b $C4,$DC
000354B4 <AmiBlitz3.ab2@10986>   BSR.w getchar
000354BA <AmiBlitz3.ab2@10987>   TST.w instringon
000354BE <AmiBlitz3.ab2@10988>    BNE.w gchar2
000354C2 <AmiBlitz3.ab2@10989>   CMP.w #$20,D0
000354C6 <AmiBlitz3.ab2@10990>    BEQ.w get1bytemain
000354C8 <AmiBlitz3.ab2@10992>   TST.w D0
000354CC <AmiBlitz3.ab2@10995>   BEQ.b get1bytemain__zero
000354D2 <AmiBlitz3.ab2@10996>   TST.w instringon
000354D6 <AmiBlitz3.ab2@10997>    BEQ.b get1bytemain__noqoute
000354DA <AmiBlitz3.ab2@10998>   CMP.b #$20,D0
000354DE <AmiBlitz3.ab2@10999>    BCC.b get1bytemain__skip
000354E2 <AmiBlitz3.ab2@11000>   MOVE.b gs(PC,D0.W),D0
000354E4 <AmiBlitz3.ab2@11001> RTS
000354E8 <AmiBlitz3.ab2@11004>   CMP.w #-$7FDE,D0                                         ;cmp #$8000+34,d0 org source  ;else
000354EC <AmiBlitz3.ab2@11005>    BEQ.b get1bytemain__zero
000354F0 <AmiBlitz3.ab2@11006>   CMP.w #$3A,D0
000354F4 <AmiBlitz3.ab2@11007>    BEQ.b get1bytemain__zero
000354F6 <AmiBlitz3.ab2@11010>   TST.w D0
000354F8 <AmiBlitz3.ab2@11013> RTS
000354FE <AmiBlitz3.ab2@11017>   MOVE.w lastchar,D0
00035502 <AmiBlitz3.ab2@11018> BRA.w gchar2
0003550C <AmiBlitz3.ab2@11022>   MOVE.w oldqflag,instringon
00035512 <AmiBlitz3.ab2@11023>   MOVEA.l lastsourcepos,A5
00035514 <AmiBlitz3.ab2@11024> RTS
0003551A <AmiBlitz3.ab2@11028>   MOVE.w D0,locchar
00035520 <AmiBlitz3.ab2@11029>   MOVE.l A5,locloc
00035522 <AmiBlitz3.ab2@11030> RTS
00035528 <AmiBlitz3.ab2@11034>   MOVEA.l locloc,A5
0003552E <AmiBlitz3.ab2@11035>   MOVE.w locchar,D0
00035534 <AmiBlitz3.ab2@11036>   MOVE.w D0,lastchar
00035536 <AmiBlitz3.ab2@11037> RTS
00035536 <internal_errormsg.ab2@1> XINCLUDE "internal_errormsg.ab2"
0003557E <internal_errormsg.ab2@9> !CERROR{runerrsoverflow         ,"Precedence 'RunErrs' stack overflow!\nToo many 'RunErrs' nested."}
000355D0 <internal_errormsg.ab2@10> !CERROR{unpairrunerrs           ,"'LastRunErrsMode' called without 'RunErrsOff'!\nToo many 'RunErrs' nested."}
0003560E <internal_errormsg.ab2@11> !CERROR{errormsg_stack          ,"Internal Optimizer 2 stack error! Please report as bug!"}
0003564C <internal_errormsg.ab2@12> !CERROR{errormsg_reg            ,"Register already loaded!\nHint: Use 'storereg' before."}
00035676 <internal_errormsg.ab2@13> !CERROR{errormsg_declaredtwice  ,"Variable/constant already declared."}
000356A6 <internal_errormsg.ab2@14> !CERROR{errormsg_autocount      ,"Autocount constant has been used before."}
000356F0 <internal_errormsg.ab2@15> !CERROR{errormsg_onlylong       ,"Peek/Poke take only longs or pointers as address in Syntax 2 mode!"}
00035776 <internal_errormsg.ab2@16> !CERROR{errormsg_nofast         ,"FAST directive is not allowed if local strings or newtypes are used.\nHint: Use pointers or shared (global) variables instead."}
000357D8 <internal_errormsg.ab2@17> !CERROR{typeerror               ,"Variable type smaller than result type of expression (Syntax 4).\nWorkaround: +var=xx force"}
00035820 <internal_errormsg.ab2@18> !CERROR{badstoperr              ,"Debugger must be enabled for 'Stop' (sets breakpoint) directive."} ;??label not uesd anymore??
00035872 <internal_errormsg.ab2@19> !CERROR{vardeclareerr           ,"Variables/constants must be declared before usage in selected syntax mode."}
000358BC <internal_errormsg.ab2@20> !CERROR{error_create_exe        ,"Error creating executable!\nHint: Maybe executable file is in use?"}   ;makeexecerr org source
0003590A <internal_errormsg.ab2@21> !CERROR{error_dublicate_for     ,"Duplicate For...Next error.\nHint: Same variable name used for counter?"}  ;fornexterr org source
00035940 <internal_errormsg.ab2@22> !CERROR{excerr2                 ,"'Exchange' does not work with different types."}
0003596E <internal_errormsg.ab2@23> !CERROR{excerr                  ,"'Exchange' does not work with NewTypes."}
00035988 <internal_errormsg.ab2@24> !CERROR{arrerr1                 ,"Illegal array type."}
000359A6 <internal_errormsg.ab2@25> !CERROR{nocenderr               ,"CNIF/CSIF without CEND!"}
00035A24 <internal_errormsg.ab2@26> !CERROR{referr                  ,"Label reference out of context!\nHint: Trying to get a label address that is not inthe same function or global context?"}
00035A4E <internal_errormsg.ab2@27> !CERROR{illlaberr               ,"Label has been used as a constant!"}
00035A74 <internal_errormsg.ab2@28> !CERROR{selerrz                 ,"'Select' without 'End Select'!"}
00035A94 <internal_errormsg.ab2@29> !CERROR{unterr1                 ,"'Until' without 'Repeat'!"}
00035AB2 <internal_errormsg.ab2@30> !CERROR{unterr2                 ,"Repeat block too large!"}
00035AD2 <internal_errormsg.ab2@31> !CERROR{unterr3                 ,"'Repeat' without 'Until'!"}
00035AFA <internal_errormsg.ab2@32> !CERROR{vbokerr1                ,"AbortVBOK MUST be in a SETINT 5!"}  ;??looks like label not used??
00035B24 <internal_errormsg.ab2@33> !CERROR{errerr1                 ,"'SetErr' not allowed in procedures!"}
00035B26 <internal_errormsg.ab2@36>   Ds.w 1
00035B42 <internal_errormsg.ab2@39> !CERROR{errerr2                 ,"Can't nest 'SetErr'!"}
00035B68 <internal_errormsg.ab2@40> !CERROR{errerr3                 ,"'End SetErr' without 'SetErr'!"}        ; JL_0_7E6C:        ;??looks like label not used??
00035B80 <internal_errormsg.ab2@41> !CERROR{noarrayerr              ,"Array not found!"}
00035BDE <internal_errormsg.ab2@42> !CERROR{nolisterr               ,"Array is not a List!\nHint: Forgot the array index OR forgot 'List' when declared list?"}
00035C00 <internal_errormsg.ab2@43> !CERROR{defaerr                 ,"'Default' without 'Select'!"}
00035C26 <internal_errormsg.ab2@44> !CERROR{eselerr                 ,"'End Select' without 'Select'!"}
00035C4E <internal_errormsg.ab2@45> !CERROR{cbraerr                 ,"Previous 'Case' block too large!"}
00035C6E <internal_errormsg.ab2@46> !CERROR{caseerr                 ,"'Case' without 'Select'!"}
00035C92 <internal_errormsg.ab2@47> !CERROR{tokeerr                 ,"Illegal TokeJsr token number!"}
00035CD8 <internal_errormsg.ab2@48> !CERROR{opterr                  ,"Internal Optimizer error! - $ffff,$ffff.\nPlease report as bug!"} ;??looks like label not used??
00035CFC <internal_errormsg.ab2@49> !CERROR{blitzerr                ,"Only available in Blitz mode!"}
00035D20 <internal_errormsg.ab2@50> !CERROR{amigaerr                ,"Only available in Amiga mode!"}
00035D40 <internal_errormsg.ab2@51> !CERROR{interr4                 ,"Illegal interrupt number!"}
00035D64 <internal_errormsg.ab2@52> !CERROR{error4char              ,"Too many chars for data type "}
00035D86 <internal_errormsg.ab2@53> !CERROR{interr5                 ,"Illegal nested interrupts!"}      ;??looks like label not used??
00035DB2 <internal_errormsg.ab2@54> !CERROR{interr3                 ,"Can't use 'Set/ClrInt' in local mode!"}
00035DD8 <internal_errormsg.ab2@55> !CERROR{interr                  ,"'End SetInt' without 'SetInt'!"}
00035DE2 <internal_errormsg.ab2@58>   MOVE.l intline,linenumat
00035E08 <internal_errormsg.ab2@59> !CERROR{DUMMY1___               ,"'SetInt' without 'End SetInt'!"}
00035E5A <internal_errormsg.ab2@61> !CERROR{conmemerr               ,"Expression too complex!\nHint: Break up expression in smaller expressions."}
00035EC4 <internal_errormsg.ab2@62> !CERROR{pserr                   ,"Precedence stack overflow!\nHint: Increase stack size in AmiBlitz3 icon and later your exe's icon!"}
00035F22 <internal_errormsg.ab2@63> !CERROR{clasherr                ,"Clash in Residents!\nHint: You must remove at least one .res file in Compiler Settings."}
00035F90 <internal_errormsg.ab2@64> !CERROR{reserr                  ,"Can't load Resident!\nHint: Go to Compiler Settings and remove path, copy .res to BlitzLibs/Residents/"}
00035FCC <internal_errormsg.ab2@65> !CERROR{dupofferr               ,"Duplicate offset error!\nHint: Use a different name."}  ;unsicher
00035FEA <internal_errormsg.ab2@66> !CERROR{notparerr               ,"Not enough parameters!"}
00036010 <internal_errormsg.ab2@67> !CERROR{badconterr              ,"'Cont' currently not available!"}
00036040 <internal_errormsg.ab2@68> !CERROR{dirliberr               ,"Library is not available in direct mode!"}
00036064 <internal_errormsg.ab2@69> !CERROR{baddirerr               ,"Illegal direct mode command!"}
00036092 <internal_errormsg.ab2@70> !CERROR{nodirmem                ,"Not enough room in direct mode buffer!"}
000360B6 <internal_errormsg.ab2@71> !CERROR{illdirerr               ,"Can't create in direct mode!"}
000360CC <internal_errormsg.ab2@72> !CERROR{nosuperr                ,"Not supported."}
000360E2 <internal_errormsg.ab2@73> !CERROR{freeerr                 ,"Illegal Token."}
000360E8 <internal_errormsg.ab2@76>   MOVEA.l asmbuff,A2
000360F0 <internal_errormsg.ab2@78>   MOVE    $C(A2),linenumat+2                               ;move 12(a2),linenumat  org source code
000360F2 <internal_errormsg.ab2@79>   MOVEQ   #0,d0
000360F6 <internal_errormsg.ab2@80>   MOVE.b  14(a2),d0
000360FE <internal_errormsg.ab2@81>   MOVE.w  -2(a2,d0),linenumat
00036100 <internal_errormsg.ab2@82> RTS
0003613A <internal_errormsg.ab2@84> !CERROR{noreturn_               ,"This function call does not support a return value!"}
00036166 <internal_errormsg.ab2@85> !CERROR{morepar_                ,"Syntax error or too many parameters!"}
00036196 <internal_errormsg.ab2@86> !CERROR{brackets_               ,"'(' or '{' brackets not paired correctly!"}
000361CE <internal_errormsg.ab2@87> !CERROR{parameter_              ,"Wrong numbers of parameters or brackets unpaired."}
00036228 <internal_errormsg.ab2@88> !CERROR{inbrackets_             ,"Calls with a return value must be put in brackets, or\nwrong number of parameters."}
0003622A <internal_errormsg.ab2@92>     MOVE.b (a5)+,d0
0003622E <internal_errormsg.ab2@93>      BEQ parameter_
00036232 <internal_errormsg.ab2@94>     CMP.b #"(",d0
00036236 <internal_errormsg.ab2@95>      BEQ 'l1
0003623A <internal_errormsg.ab2@96>     CMP.b #"{",d0
0003623E <internal_errormsg.ab2@97>      BEQ 'l1
00036242 <internal_errormsg.ab2@98>     CMP.b #")",d0
00036246 <internal_errormsg.ab2@99>      BEQ 'l1
0003624A <internal_errormsg.ab2@100>     CMP.b #"}",d0
0003624E <internal_errormsg.ab2@101>      BEQ 'l1
00036252 <internal_errormsg.ab2@102>   BRA 'l2
00036290 <internal_errormsg.ab2@103> !CERROR{'l1                     ,"'({})' brackets are not allowed in BlitzLib statement."}
000362C2 <internal_errormsg.ab2@105> !CERROR{needreturn_             ,"Return value needed for this function call."}
000362E0 <internal_errormsg.ab2@106> !CERROR{mbovererr               ,"Macro buffer overflow!"}
0003630A <internal_errormsg.ab2@107> !CERROR{illvgerr                ,"Illegal 'VGoto'/'VGosub' parameter!"} ;??looks like label not used??
00036326 <internal_errormsg.ab2@108> !CERROR{notqerr                 ,"No terminating quote!"}
00036340 <internal_errormsg.ab2@109> !CERROR{illcgeterr              ,"Can't use constant!"}                 ;??looks like label not used??
0003635E <internal_errormsg.ab2@110> !CERROR{illconerr               ,"Can't assign constant!"}
00036382 <internal_errormsg.ab2@111> !CERROR{redimerr                ,"Illegal number of dimensions!"}
00036384 <internal_errormsg.ab2@114>   SUBQ.l #2,a5
000363D6 <internal_errormsg.ab2@115> !CERROR{DUMMY2___               ,"Garbage at the end of line!\nHint: Maybe some unwanted characters pending?"}
000363FE <internal_errormsg.ab2@117> !CERROR{illelseerr              ,"Illegal 'Else' in 'While'-Block!"}
00036426 <internal_errormsg.ab2@118> !CERROR{illgotoerr              ,"Can't 'Goto'/'Gosub' a procedure!"}  ;??looks like label not used??
00036442 <internal_errormsg.ab2@122> !CERROR{illtraperr              ,"Illegal trap vector!"}
00036462 <internal_errormsg.ab2@123> !CERROR{illimmerr               ,"Illegal immediate value!"}
0003647A <internal_errormsg.ab2@124> !CERROR{illabserr               ,"Illegal absolute!"}                  ;??looks like label not used??
000364BE <internal_errormsg.ab2@125> !CERROR{illdiserr               ,"Illegal displacement!\nHint: Use JMP/JSR instead of BRA/BSR."}
00036506 <internal_errormsg.ab2@126> !CERROR{intern1                 ,"Internal error: Function call to odd address!\nPlease report bug!"}
00036530 <internal_errormsg.ab2@127> !CERROR{illsizeerr              ,"Illegal assembler instruction size!"}
0003655A <internal_errormsg.ab2@128> !CERROR{illeaerr                ,"Illegal assembler addressing mode!"}
00036574 <internal_errormsg.ab2@132> !CERROR{nolocerr                ,"Illegal local name."}
0003659E <internal_errormsg.ab2@133> !CERROR{fpconerr                ,"Fractions not allowed in constants."}
000365F2 <internal_errormsg.ab2@134> !CERROR{more6par                ,"More than 6 parameters not allowed with strings.\nHint: Use pointer instead."}
0003663E <internal_errormsg.ab2@135> !CERROR{more6pard               ,"More than 6 parameters not allowed with double float and quick float."}
00036676 <internal_errormsg.ab2@136> !CERROR{errorjoin               ,"Joining lines with @ @ does not work in includes."}
0003667C <internal_errormsg.ab2@139>   JSR handle_compileerror
0003668A <internal_errormsg.ab2@141>   Dc.b "Syntax error!",0
000366BA <internal_errormsg.ab2@144> !CERROR{andop2                  ,"You can't get the address of a constant!"}
000366EE <internal_errormsg.ab2@145> !CERROR{notallowd               ,"'For'...'Next' not allowed for double float!"}
00036754 <internal_errormsg.ab2@146> !CERROR{notwork                 ,"Frac does not work for speed reasons with FPU usage!\nHint: Use frac=value-int(value) instead."}
00036772 <internal_errormsg.ab2@147> !CERROR{typeerr                 ,"Type already declared."}                ; was: Duplicated type
000367EC <internal_errormsg.ab2@148> !CERROR{laberr                  ,"Illegal label name.\nHint: Use only latin letters and underscore. Numbers are allowed only if not first character."}
00036814 <internal_errormsg.ab2@149> !CERROR{modeerr                 ,"'End NewType' without 'NewType'!"}
0003682A <internal_errormsg.ab2@150> !CERROR{notypeerr               ,"Type not found!"}
0003683E <internal_errormsg.ab2@151> !CERROR{illtypeerr              ,"Illegal type!"}
00036840 <internal_errormsg.ab2@154>   Ds.w 1
00036841 <internal_errormsg.ab2@155>   Dc.b 0
00036842 <internal_errormsg.ab2@156> Even
00036862 <internal_errormsg.ab2@158> !CERROR{offerr                  ,"Offset already declared!"}              ; was :"Duplicate offset!"}       ;??looks like label not used??
00036868 <internal_errormsg.ab2@161>   JSR handle_compileerror
0003687A <internal_errormsg.ab2@163>   Dc.b "Numeric overflow!",0
000368AE <internal_errormsg.ab2@166> !CERROR{toolongerr              ,"Type too big!\nHint: Maximum is 64K per Type"}
000368C6 <internal_errormsg.ab2@167> !CERROR{rongtypeerr             ,"Mismatched types!"}
000368E2 <internal_errormsg.ab2@168> !CERROR{noarrerr                ,"Array not yet dim'd."}
000368FA <internal_errormsg.ab2@169> !CERROR{noofferr                ,"Offset not found."}
0003691A <internal_errormsg.ab2@170> !CERROR{pointerr                ,"Element is not a pointer."}
0003693A <internal_errormsg.ab2@171> !CERROR{noleterr                ,"Can't assign expression."}
00036960 <internal_errormsg.ab2@172> !CERROR{illoperr                ,"Illegal operator for this type."}
00036976 <internal_errormsg.ab2@173> !CERROR{mismatcherr             ,"Type mismatch!"}
00036992 <internal_errormsg.ab2@174> !CERROR{arraldimerr             ,"Array already dim'd."}      ;??looks like label not used??
000369BC <internal_errormsg.ab2@175> !CERROR{nonewerr                ,"Can't create variable inside 'Dim'!"}
000369D4 <internal_errormsg.ab2@176> !CERROR{arrnotdimd              ,"Array not dim'd!"}          ;??looks like label not used??
000369F0 <internal_errormsg.ab2@177> !CERROR{noconsterr              ,"Constant not defined!"}     ;??looks like label not used??
00036A10 <internal_errormsg.ab2@178> !CERROR{alconsterr              ,"Constant already defined!"} ;??looks like label not used??
00036A28 <internal_errormsg.ab2@179> !CERROR{ilconsterr              ,"Illegal constant!"}
00036A2C <internal_errormsg.ab2@182>   LEA liberrnum(PC),A0
00036A32 <internal_errormsg.ab2@183>   JSR hexascii
00036A38 <internal_errormsg.ab2@184>   JSR handle_compileerror
00036A4D <internal_errormsg.ab2@185>   Dc.b "Library not Found : $"
00036A53 <internal_errormsg.ab2@187>   Dc.b "ffff.",0                                          ;,0
00036A54 <internal_errormsg.ab2@188> Even
00036A58 <internal_errormsg.ab2@191>   LEA tokerrnum(PC),A0
00036A5E <internal_errormsg.ab2@192>   JSR hexascii
00036A64 <internal_errormsg.ab2@193>   JSR handle_compileerror
00036A77 <internal_errormsg.ab2@194>   Dc.b "Token Not Found : $"
00036A7D <internal_errormsg.ab2@196>   Dc.b "ffff.",0                                           ;,0
00036A7E <internal_errormsg.ab2@197> Even
00036A9C <internal_errormsg.ab2@199> !CERROR{duplaberr               ,"Label already defined!"}                ; Duplicate label!"}
00036AB4 <internal_errormsg.ab2@200> !CERROR{nolaberr                ,"Label not found!"}
00036AD0 <internal_errormsg.ab2@201> !CERROR{typeiferr               ,"Can't compare types!"}   ;??looks like label not used??
00036AFA <internal_errormsg.ab2@202> !CERROR{noiferr                 ,"'End' condition without condition!"}
00036B14 <internal_errormsg.ab2@203> !CERROR{bigiferr                ,"If block too large!"}
00036B34 <internal_errormsg.ab2@204> !CERROR{badenderr               ,"Illegal nested condition!"}
00036B52 <internal_errormsg.ab2@205> !CERROR{dupmacerr               ,"Macro already defined!"}
00036B80 <internal_errormsg.ab2@206> !CERROR{macnesterr              ,"Can't create Macro/Object inside Macro!"}
00036B8A <internal_errormsg.ab2@209>   MOVE.l macline,linenumat
00036BBC <internal_errormsg.ab2@210> !CERROR{DUMMY3___               ,"'Macro/Object' without 'End Macro/Object'!"}
00036BDA <internal_errormsg.ab2@212> !CERROR{macbigerr               ,"'Macro/Object' too big!"}
00036BF8 <internal_errormsg.ab2@213> !CERROR{tmmacerr                ,"Macros nested too deep!"}               ;??looks like label not used??
00036C18 <internal_errormsg.ab2@214> !CERROR{nomacerr                ,"'Macro/Object' not found!"}
00036C3E <internal_errormsg.ab2@215> !CERROR{comerr                  ,"Too many comma's in assignment!"}       ; 'Let'!"}
00036C64 <internal_errormsg.ab2@216> !CERROR{nocomerr                ,"Can't use comma in assignment!"}        ; 'Let'!"}
00036C8C <internal_errormsg.ab2@217> !CERROR{conintype               ,"Can't use a constant in NewType!"}      ;??looks like label not used??
00036CAA <internal_errormsg.ab2@218> !CERROR{alincerr                ,"File already included!"}
00036CCA <internal_errormsg.ab2@219> !CERROR{error_cant_open_include ,"Can't open include file!"}              ;noincerr org source
00036CE4 <internal_errormsg.ab2@220> !CERROR{error_reading_file      ,"Error reading file!"}                   ;readerr org source
00036D06 <internal_errormsg.ab2@221> !CERROR{toifmacerr              ,"If Macro's nested too deep!"}           ;??looks like label not used??
00036D24 <internal_errormsg.ab2@222> !CERROR{noenderr                ,"'If' without 'End If'!"}
00036D46 <internal_errormsg.ab2@223> !CERROR{dupprocerr              ,"Procesure already declared!"}           ; Duplicate procedure name!"}
00036D6A <internal_errormsg.ab2@224> !CERROR{duplocerr               ,"Duplicate parameter variable!"}         ;??looks like label not used??
00036D70 <internal_errormsg.ab2@227>   JSR free_unusedfunctions
00036D8C <internal_errormsg.ab2@228> !CERROR{DUMMY4___               ,"Procedure not found!"}
00036DA8 <internal_errormsg.ab2@230> !CERROR{toovarerr               ,"Too many parameters!"}
00036DC6 <internal_errormsg.ab2@231> !CERROR{illvarerr               ,"Illegal parameter type!"}               ;??looks like label not used??
00036DE4 <internal_errormsg.ab2@232> !CERROR{nopenderr               ,"Unterminated procedure!"}
00036E32 <internal_errormsg.ab2@233> !CERROR{illprocerr              ,"Illegal procedure call!\nHint: Maybe a return variable is need or not?"}
00036E50 <internal_errormsg.ab2@234> !CERROR{functypeerr             ,"Illegal function type!"}                ;??looks like label not used??
00036E6E <internal_errormsg.ab2@235> !CERROR{illprocperr             ,"Illegal parameter type!"}
00036E88 <internal_errormsg.ab2@236> !CERROR{extlaberr               ,"Can't access label!"}                   ;??looks like label not used??
00036ED4 <internal_errormsg.ab2@237> !CERROR{sreterr                 ,"Illegal procedure return!\nHint: Function return within a statement?"}
00036EFA <internal_errormsg.ab2@238> !CERROR{sharederr               ,"'Shared' outside of procedure!"}
00036F1A <internal_errormsg.ab2@239> !CERROR{dupsherr                ,"Variable already shared!"}
00036F3C <internal_errormsg.ab2@240> !CERROR{badforerr               ,"Bad type for 'For'...'Next'"}
00036F58 <internal_errormsg.ab2@241> !CERROR{noforerr                ,"'Next' without 'For'!"}
00036F7E <internal_errormsg.ab2@242> !CERROR{bigforerr               ,"'For'...'Next' block too long!"}
00036F9A <internal_errormsg.ab2@243> !CERROR{nonexterr               ,"'For' without 'Next'!"}
00036FB8 <internal_errormsg.ab2@244> !CERROR{zprocerr                ,"Can't nest procedures!"}                ;??looks like label not used??
00036FE0 <internal_errormsg.ab2@245> !CERROR{nodimerr                ,"Can't 'Dim' globals in procedures"}     ;??looks like label not used??
00036FFC <internal_errormsg.ab2@246> !CERROR{error_convert_types     ,"Can't convert types!"}                  ;noconerr org source
0003700C <internal_errormsg.ab2@247> !CERROR{baddaterr               ,"Bad data!"}
0003702E <internal_errormsg.ab2@248> !CERROR{nociferr                ,"'CEND' without 'CNIF/CSIF'!"}
00037032 <internal_errormsg.ab2@251>   MOVE.l $2E00(A6),D7
00037034 <internal_errormsg.ab2@254>   MOVE.l a0,a5
0003704E <internal_errormsg.ab2@255> !CERROR{DUMMY5___               ,"Constant not found!"}
00037072 <internal_errormsg.ab2@257> !CERROR{badconerr               ,"Illegal constant expression!"}
00037092 <internal_errormsg.ab2@258> !CERROR{badpenderr              ,"Illegal 'End' procedure!"}
000370C4 <internal_errormsg.ab2@259> !CERROR{onlyfloatint            ,"Only float (.f) or long (.l) supported yet!"}
00037122 <internal_errormsg.ab2@260> !CERROR{syntaxerropt4           ,"You need 'newsyntax' mode for that.\nHint: use optimize4 or higher at begin of program."}
0003715A <internal_errormsg.ab2@261> !CERROR{errortoken              ,"You can only include tokenized files (.bb2 |.bb)!"}
00037198 <internal_errormsg.ab2@262> !CERROR{errorbytes              ,"Constant expression too large to hold in byte variable."}
000371CE <internal_errormsg.ab2@263> !CERROR{errordouble             ,"64bit float is too big to put in a 32bit long!"}
00037200 <internal_errormsg.ab2@264> !CERROR{errorasmexit            ,"asmexit must be called inside a Function! "}
00037200 <AmiBlitz3.ab2@11041> 
00037202 <AmiBlitz3.ab2@11045> ezerr:   Ds.w 1                                            ;for simple errors
00037208 <AmiBlitz3.ab2@11051>    MOVE.l myline,d0
0003720C <AmiBlitz3.ab2@11052>   BNE handle_compileerror__l2
00037212 <AmiBlitz3.ab2@11054>     MOVE.l a5,lastsourcepos
00037214 <AmiBlitz3.ab2@11056>     SUBA.l a5,a5
0003721A <AmiBlitz3.ab2@11058>   TST.l usedfrom
0003721E <AmiBlitz3.ab2@11059>   BEQ handle_compileerror__org
00037224 <AmiBlitz3.ab2@11060>     MOVEA.l usedfrom,a5
0003722A <AmiBlitz3.ab2@11063>   TST.w dirmode
0003722E <AmiBlitz3.ab2@11064>   BNE.b handle_compileerror__quiet
00037234 <AmiBlitz3.ab2@11065>     JSR call_setpointernormal
00037238 <AmiBlitz3.ab2@11066>     MOVE.w ezerr(PC),D0
0003723C <AmiBlitz3.ab2@11067>     BNE.w handle_compileerror__skip
00037242 <AmiBlitz3.ab2@11068>       MOVE.w cfetchmode,D0
00037246 <AmiBlitz3.ab2@11069>       BEQ.w handle_compileerror__skip2
00037250 <AmiBlitz3.ab2@11070>         MOVE.l oldlibat,destbufferend                      ;fix up lib thing.
00037256 <AmiBlitz3.ab2@11073>   MOVE.w constmode,D0
0003725A <AmiBlitz3.ab2@11074>   BEQ.b handle_compileerror__skip3
0003725E <AmiBlitz3.ab2@11075>     BSR.w asmerr2
00037264 <AmiBlitz3.ab2@11078>   MOVE.l firstlocal,D1
0003726A <AmiBlitz3.ab2@11079>   OR.l firstglob,D1
0003726E <AmiBlitz3.ab2@11080>   BEQ.b handle_compileerror__notproc                       ;?!?!?!
00037274 <AmiBlitz3.ab2@11081>     JSR JL_0_DB5C
0003727C <AmiBlitz3.ab2@11084>   MOVE.w #$FFFF,anyerrs                                    ;#-1,anyerrs org source
00037286 <AmiBlitz3.ab2@11085>   CMP.l #"NORE",reqmode                                    ;for used functions
0003728A <AmiBlitz3.ab2@11086>   BEQ handle_compileerror__notproc_l1
00037294 <AmiBlitz3.ab2@11087>     MOVE.l linenumat,compilelinecounter
0003729A <AmiBlitz3.ab2@11090>   JSR close_compilewin
0003729C <AmiBlitz3.ab2@11093>   MOVEA.l (A7)+,A0
000372A6 <AmiBlitz3.ab2@11094>   CMP.l #"NORE",reqmode                                    ;for used functions
000372AA <AmiBlitz3.ab2@11095>   BEQ handle_compileerror__skip_Lxx2
000372B0 <AmiBlitz3.ab2@11096>   TST.l CLIMode
000372B4 <AmiBlitz3.ab2@11097>   BNE 'climode_output
000372BA <AmiBlitz3.ab2@11099>     JSR save_errorfile
000372BE <AmiBlitz3.ab2@11100>     BRA 'end_output
000372C4 <AmiBlitz3.ab2@11102>     JSR stdout_error
000372CA <AmiBlitz3.ab2@11104>     MOVE.l lastsourcepos,a5
000372CC <AmiBlitz3.ab2@11105> 'loop TST.b (a5)
000372D0 <AmiBlitz3.ab2@11106>       BEQ 'ok2
000372D2 <AmiBlitz3.ab2@11107>     MOVE.b (a5)+,d0                                  ; position to usefull source position to avoid following errors
000372D6 <AmiBlitz3.ab2@11108>     BEQ 'ok
000372DA <AmiBlitz3.ab2@11109>     CMP.b #":",d0
000372DE <AmiBlitz3.ab2@11110>     BEQ 'ok
000372E2 <AmiBlitz3.ab2@11111>     BRA 'loop
000372E4 <AmiBlitz3.ab2@11112> 'ok SUBQ.l #1,a5
000372EC <AmiBlitz3.ab2@11113> 'ok2 MOVE.w #0,lastchar
000372F4 <AmiBlitz3.ab2@11114>     MOVE.b #1,iserror
000372FA <AmiBlitz3.ab2@11115>     MOVE.l stackaddr,a7
000372FC <AmiBlitz3.ab2@11116>     RTS
000372FE <AmiBlitz3.ab2@11122>   MOVE.l A0,-(a7)
0003733C <AmiBlitz3.ab2@11123>   !ComData_GetL{comFunc_ErrorRequest,A1}
0003733E <AmiBlitz3.ab2@11124>   MOVE.l (a7)+,A0
00037342 <AmiBlitz3.ab2@11126>   MOVEM.l d6/D7/A6,-(A7)
00037348 <AmiBlitz3.ab2@11127>   MOVE.l includeline,d7
0003734E <AmiBlitz3.ab2@11128>   MOVE.l #"INLN",a6
00037358 <AmiBlitz3.ab2@11129>   MOVE.l errstack,tempa7
0003735A <AmiBlitz3.ab2@11130>   JSR (A1)
00037384 <AmiBlitz3.ab2@11131>   !basic
000373C0 <AmiBlitz3.ab2@11132>    If Peek.l(Addr Window(3))<>0 Then WZCloseWindow 3
000373DE <AmiBlitz3.ab2@11133>   !asm
000373E2 <AmiBlitz3.ab2@11134>   MOVEM.l (A7)+,D7/d6/A6
000373E8 <AmiBlitz3.ab2@11137>   MOVE.l tempa7,a7
000373EE <AmiBlitz3.ab2@11138>   MOVEA.l errcont,A0
000373F0 <AmiBlitz3.ab2@11140> RTS
000373F6 <AmiBlitz3.ab2@11143>   MOVEA.l errstack,A7
000373FC <AmiBlitz3.ab2@11144>   MOVEA.l errcont,A0
000373FE <AmiBlitz3.ab2@11146> RTS
00037400 <AmiBlitz3.ab2@11149>   MOVE.l (A7),D0
00037406 <AmiBlitz3.ab2@11150>   MOVEA.l errstack,A7
0003740C <AmiBlitz3.ab2@11151>   MOVEA.l errcont,A0
0003740E <AmiBlitz3.ab2@11152> JMP (A0)
00037412 <AmiBlitz3.ab2@11158>   CMP.w #$7A,D0                                            ;'z'
00037416 <AmiBlitz3.ab2@11159>    BHI.w tstalpha__no
0003741A <AmiBlitz3.ab2@11160>   CMP.w #$41,D0                                            ;'A'
0003741E <AmiBlitz3.ab2@11161>    BCS.w tstalpha__no
00037422 <AmiBlitz3.ab2@11162>   CMP.w #$61,D0                                            ;'a'
00037426 <AmiBlitz3.ab2@11163>    BCC.w tstalpha__yes
0003742A <AmiBlitz3.ab2@11164>   CMP.w #$5A,D0                                            ;'Z'
0003742E <AmiBlitz3.ab2@11165>    BHI.w tstalpha__no
00037430 <AmiBlitz3.ab2@11168>   CMP.w D0,D0
00037432 <AmiBlitz3.ab2@11171> RTS
00037436 <AmiBlitz3.ab2@11179>   CMP.w #$30,D0                                            ;'0'
0003743A <AmiBlitz3.ab2@11180>    BCS.w tstnum__skip
0003743E <AmiBlitz3.ab2@11181>   CMP.w #$39,D0                                            ;'9'
00037442 <AmiBlitz3.ab2@11182>    BHI.w tstnum__skip                                     
00037444 <AmiBlitz3.ab2@11183>   CMP.w D0,D0
00037446 <AmiBlitz3.ab2@11186> RTS
00037468 <AmiBlitz3.ab2@11192>   !compare1                                                ;bsr.w tstalpha
0003746C <AmiBlitz3.ab2@11193>    BEQ.w tstlab__skip
0003747E <AmiBlitz3.ab2@11194>   !compare2                                                ;bsr.w tstnum2
00037482 <AmiBlitz3.ab2@11195>    BEQ.w tstlab__skip
00037486 <AmiBlitz3.ab2@11196>   CMP.w #$5F,D0                                            ;'_'
0003748A <AmiBlitz3.ab2@11197>    BEQ.w tstlab__skip
0003748E <AmiBlitz3.ab2@11198>   CMP.w #$27,D0                                            ;#loclabch,d0 org source
00037490 <AmiBlitz3.ab2@11201> RTS
0003749A <AmiBlitz3.ab2@11206>   MOVE.w oldqflag,instringon
000374A0 <AmiBlitz3.ab2@11207>   MOVEA.l lastsourcepos,A5
000374A6 <AmiBlitz3.ab2@11210>   LEA ptr_parameterstore,A1
000374A8 <AmiBlitz3.ab2@11213>   MOVEQ.l #$00,D2
000374AE <AmiBlitz3.ab2@11216>   LEA chartab,a0
000374B0 <AmiBlitz3.ab2@11217>   MOVEQ #0,d0
000374B6 <AmiBlitz3.ab2@11218>   MOVE.l A5,lastsourcepos
000374C0 <AmiBlitz3.ab2@11219>   MOVE.w instringon,oldqflag
000374C2 <AmiBlitz3.ab2@11222>     MOVE.b (a5)+,d0
000374C6 <AmiBlitz3.ab2@11223>   CMP.b #$20,d0                                            ;space deftype
000374CA <AmiBlitz3.ab2@11224>   BEQ makename4__retry
000374D0 <AmiBlitz3.ab2@11226>   MOVE.w d0,lastchar
000374D4 <AmiBlitz3.ab2@11227>   TST.b 0(a0,d0.w)
000374D8 <AmiBlitz3.ab2@11228>   BNE makename__done
000374DA <AmiBlitz3.ab2@11237>   MOVE.b D0,(A1)+
000374DC <AmiBlitz3.ab2@11238>   ADDQ.l #1,D2
000374E2 <AmiBlitz3.ab2@11239>   MOVE.l A5,lastsourcepos
000374E4 <AmiBlitz3.ab2@11242>   MOVE.b (a5)+,d0
000374EA <AmiBlitz3.ab2@11243>   MOVE.b d0,lastchar+1
000374EE <AmiBlitz3.ab2@11244>   CMP.b #$20,d0
000374F2 <AmiBlitz3.ab2@11245>   BEQ makename__loop_l20
000374F6 <AmiBlitz3.ab2@11247>   TST.b 0(a0,d0)
000374FA <AmiBlitz3.ab2@11248>   BEQ makename__loop
000374FE <AmiBlitz3.ab2@11249>   CMP.b #2,d0
00037502 <AmiBlitz3.ab2@11250>   BNE makename__loop_lf1
00037508 <AmiBlitz3.ab2@11251>   MOVEA.l usedfrom,A5
0003750E <AmiBlitz3.ab2@11252>   CLR.l usedfrom
00037512 <AmiBlitz3.ab2@11253> BRA makename__loop_ln1
00037516 <AmiBlitz3.ab2@11256>   CMP.b #1,d0
0003751A <AmiBlitz3.ab2@11257>   BNE makename__loop_l20
0003751E <AmiBlitz3.ab2@11258>   MOVEA.l cmakea5(PC),A5
00037522 <AmiBlitz3.ab2@11259> BRA makename__loop_ln1
00037526 <AmiBlitz3.ab2@11262>   CMP.b #$7e,d0
0003752A <AmiBlitz3.ab2@11263>             BNE makename__loop_lt
00037530 <AmiBlitz3.ab2@11264>             TST.w cmake
00037534 <AmiBlitz3.ab2@11265>             BNE.w makename__loop_a1
00037536 <AmiBlitz3.ab2@11266>             SUBQ.l #1,a5
0003753A <AmiBlitz3.ab2@11267>             BSR.w get1bytemain
0003753E <AmiBlitz3.ab2@11268> BRA makename__loop
00037542 <AmiBlitz3.ab2@11272> BRA makename__loop_gpex
00037546 <AmiBlitz3.ab2@11276>   BSR.w getchar
00037568 <AmiBlitz3.ab2@11277>    !compare1                                               ;bsr.w tstalpha
0003756C <AmiBlitz3.ab2@11278>    BEQ.w makename__loop_getp1
0003757E <AmiBlitz3.ab2@11279>    !compare2                                               ;bsr.w tstnum
00037582 <AmiBlitz3.ab2@11280>    BEQ.w makename__loop_getp1
00037586 <AmiBlitz3.ab2@11281>   CMP.w #$5F,D0                                            ;'_'
0003758A <AmiBlitz3.ab2@11282>    BEQ.w makename__loop_getp1
0003758E <AmiBlitz3.ab2@11283>   CMP.w #$27,D0                                            ;#loclabch,d0 org source
00037592 <AmiBlitz3.ab2@11287>       BNE makename__loop_gpex
00037596 <AmiBlitz3.ab2@11288>       CMP.b #$20,d0
0003759A <AmiBlitz3.ab2@11289>       BNE.w makename__loop
0003759C <AmiBlitz3.ab2@11292>      TST.b d0
000375A0 <AmiBlitz3.ab2@11293>      BPL makename__loop_l10
000375A2 <AmiBlitz3.ab2@11294>      SUBQ.l #1,a5
000375A6 <AmiBlitz3.ab2@11295>      BSR get1byte_
000375AA <AmiBlitz3.ab2@11298>    CMP.w #$20,D0
000375AE <AmiBlitz3.ab2@11299>    BNE.w makename__done
000375B0 <AmiBlitz3.ab2@11300>    MOVEQ #0,d0
000375B6 <AmiBlitz3.ab2@11301>   MOVE.l a5,lastsourcepos
000375B8 <AmiBlitz3.ab2@11304>   MOVE.b (a5)+,d0                                          ;neuneu
000375BC <AmiBlitz3.ab2@11305>   BPL makename__loop_l101:
000375BE <AmiBlitz3.ab2@11306>   ASL.w #8,d0
000375C0 <AmiBlitz3.ab2@11307>   MOVE.b (a5)+,d0
000375C6 <AmiBlitz3.ab2@11310>   TST.w instringon
000375CA <AmiBlitz3.ab2@11311>   BNE makename__loop_l102
000375CE <AmiBlitz3.ab2@11312>   CMP.b #$20,d0
000375D2 <AmiBlitz3.ab2@11313>   BEQ makename__loop_l103
000375D6 <AmiBlitz3.ab2@11314>   CMP.b #";",d0
000375DA <AmiBlitz3.ab2@11315>   BNE makename__loop_l102
000375DC <AmiBlitz3.ab2@11318>   MOVE.b (A5)+,D0
000375E0 <AmiBlitz3.ab2@11319>              BEQ makename__loop_l1
000375E4 <AmiBlitz3.ab2@11320>              CMP.b #":",d0
000375E8 <AmiBlitz3.ab2@11321>              BNE makename__loop_lr                         ;:@
000375EC <AmiBlitz3.ab2@11322>              CMP.b #"@",(a5)
000375F0 <AmiBlitz3.ab2@11323>              BNE makename__loop_lr
000375F2 <AmiBlitz3.ab2@11324>              ADDQ #1,a5
000375F8 <AmiBlitz3.ab2@11328>   MOVE.w d0,lastchar
000375FC <AmiBlitz3.ab2@11332>   CMP.b #";",d0
00037600 <AmiBlitz3.ab2@11333>   BEQ makename__done_l11
00037602 <AmiBlitz3.ab2@11334>   CLR.b (A1)
00037604 <AmiBlitz3.ab2@11336>   TST.w D2
00037606 <AmiBlitz3.ab2@11337> RTS
00037608 <AmiBlitz3.ab2@11340>   CLR.b (a1)
0003760A <AmiBlitz3.ab2@11341>   MOVEQ #0,d0
00037610 <AmiBlitz3.ab2@11342>   MOVE.w d0,lastchar
00037612 <AmiBlitz3.ab2@11344>   TST.w D2
00037614 <AmiBlitz3.ab2@11345> RTS
00037616 <AmiBlitz3.ab2@11351>   MOVE.l (A2),D0
0003761A <AmiBlitz3.ab2@11354>   BEQ.w findlast__here
0003761C <AmiBlitz3.ab2@11355>   MOVEA.l D0,A2
00037620 <AmiBlitz3.ab2@11356> BRA.w findlast__loop
00037624 <AmiBlitz3.ab2@11359> BRA.w reget
00037626 <AmiBlitz3.ab2@11365>   MOVE.l (A2),-(A7)
0003762A <AmiBlitz3.ab2@11366>   BSR.w addlabel
0003762C <AmiBlitz3.ab2@11367>   MOVE.l (A7)+,(A2)
0003762E <AmiBlitz3.ab2@11368> RTS
00037634 <AmiBlitz3.ab2@11373>   CLR.l fp0addr
0003763A <AmiBlitz3.ab2@11374>   TST.w dirmode
0003763E <AmiBlitz3.ab2@11375>    BNE.w illdirerr
00037640 <AmiBlitz3.ab2@11376>   MOVEQ.l #$00,D0
00037642 <AmiBlitz3.ab2@11377>   MOVE.w D7,D0
00037644 <AmiBlitz3.ab2@11378>   ADD.w D2,D0
00037646 <AmiBlitz3.ab2@11379>   ADDQ.w #1,D0
00037648 <AmiBlitz3.ab2@11380>   MOVE.w D0,D2
0003764A <AmiBlitz3.ab2@11381>   ADDQ.l #2,d0
0003764C <AmiBlitz3.ab2@11382>   MOVEQ.l #$01,D1
00037652 <AmiBlitz3.ab2@11383>   MOVEA.l _execbase,A6
00037658 <AmiBlitz3.ab2@11384>   MOVE.l mempool2,a0
0003765C <AmiBlitz3.ab2@11385>   JSR _AllocPooled(a6)
00037662 <AmiBlitz3.ab2@11387>   MOVE.l lastlabel,a2
00037664 <AmiBlitz3.ab2@11388>   MOVE.l D0,(A2)
00037666 <AmiBlitz3.ab2@11389>   MOVE.l d0,a0
00037668 <AmiBlitz3.ab2@11390>   CLR.l (a0)
0003766E <AmiBlitz3.ab2@11391>   MOVE.l a0,lastlabel
00037670 <AmiBlitz3.ab2@11392>   MOVE.l d0,A2
00037674 <AmiBlitz3.ab2@11393>   LEA -$1(A0,D7.W),A0
00037676 <AmiBlitz3.ab2@11394>   MOVE.b D2,(A0)+
0003767C <AmiBlitz3.ab2@11395>   LEA ptr_parameterstore,A1
0003767E <AmiBlitz3.ab2@11396>   MOVEQ #0,d0
00037680 <AmiBlitz3.ab2@11397>   MOVEQ #0,d1
00037682 <AmiBlitz3.ab2@11400>   MOVE.b (A1)+,d1
00037686 <AmiBlitz3.ab2@11401>    BEQ 'l1
0003768C <AmiBlitz3.ab2@11402>    !hashalgo
0003768E <AmiBlitz3.ab2@11403>    MOVE.b d1,(A0)+
00037692 <AmiBlitz3.ab2@11404> BRA addlabel_loop2a
00037694 <AmiBlitz3.ab2@11407>    CLR.b (a0)+
0003769A <AmiBlitz3.ab2@11408>    LEA labelhash,a0
000376A0 <AmiBlitz3.ab2@11409>    AND.l #hashsize,d0
000376A2 <AmiBlitz3.ab2@11410>    ASL.l #2,d0
000376A6 <AmiBlitz3.ab2@11411>    MOVE.l 0(a0,d0),d1
000376AA <AmiBlitz3.ab2@11412>    MOVE.l d1,$c(a2)
000376AE <AmiBlitz3.ab2@11413>    MOVE.l a2,0(a0,d0)
000376B0 <AmiBlitz3.ab2@11414>    MOVEQ #0,d0
000376B4 <AmiBlitz3.ab2@11415> BRA.w reget
000376BA <AmiBlitz3.ab2@11419>    TST.b newvariable
000376BE <AmiBlitz3.ab2@11420>    BNE addlabel
000376C4 <AmiBlitz3.ab2@11423>   TST.w dirmode
000376C8 <AmiBlitz3.ab2@11424>    BNE.w illdirerr
000376CA <AmiBlitz3.ab2@11425>   MOVEQ.l #$00,D0
000376CC <AmiBlitz3.ab2@11426>   MOVE.w D7,D0
000376CE <AmiBlitz3.ab2@11427>   ADD.w D2,D0
000376D0 <AmiBlitz3.ab2@11428>   ADDQ.w #1,D0
000376D2 <AmiBlitz3.ab2@11429>   MOVE.w D0,D2
000376D4 <AmiBlitz3.ab2@11430>   MOVEQ.l #$01,D1
000376DA <AmiBlitz3.ab2@11431>   MOVEA.l _execbase,A6
000376E0 <AmiBlitz3.ab2@11432>   MOVE.l mempool2,a0
000376E4 <AmiBlitz3.ab2@11433>   JSR _AllocPooled(a6)
000376E6 <AmiBlitz3.ab2@11434>   MOVEA.l D0,A0
000376EC <AmiBlitz3.ab2@11436>   LEA varbase,a2
000376EE <AmiBlitz3.ab2@11437>   MOVE.l (a2),(a0)
000376F0 <AmiBlitz3.ab2@11438>   MOVE.l A0,(A2)
000376F2 <AmiBlitz3.ab2@11439>   MOVEA.l A0,A2
000376F6 <AmiBlitz3.ab2@11440>   LEA -$1(A0,D7.W),A0
000376F8 <AmiBlitz3.ab2@11441>   MOVE.b D2,(A0)+
000376FE <AmiBlitz3.ab2@11442>   LEA ptr_parameterstore,A1
00037700 <AmiBlitz3.ab2@11443>   MOVEQ #0,d0
00037702 <AmiBlitz3.ab2@11444>   MOVEQ #0,d1
00037704 <AmiBlitz3.ab2@11447>   MOVE.b (A1)+,d1
00037708 <AmiBlitz3.ab2@11448>    BEQ 'l12
0003770E <AmiBlitz3.ab2@11449>    !hashalgo
00037710 <AmiBlitz3.ab2@11450>    MOVE.b d1,(A0)+
00037714 <AmiBlitz3.ab2@11451> BRA 'l11
00037716 <AmiBlitz3.ab2@11454>   CLR.b (a0)+
0003771C <AmiBlitz3.ab2@11455>   LEA variablehash,a0
00037722 <AmiBlitz3.ab2@11456>    AND.l #hashsize,d0
00037724 <AmiBlitz3.ab2@11457>    ASL.l #2,d0
00037728 <AmiBlitz3.ab2@11458>    MOVE.l 0(a0,d0),d1
0003772C <AmiBlitz3.ab2@11459>    MOVE.l d1,$e(a2)
00037730 <AmiBlitz3.ab2@11460>    MOVE.l a2,0(a0,d0)
00037732 <AmiBlitz3.ab2@11461>    MOVEQ #0,d0
00037736 <AmiBlitz3.ab2@11462> BRA.w reget
0003773C <AmiBlitz3.ab2@11466>   TST.w dirmode
00037740 <AmiBlitz3.ab2@11467>    BNE.w illdirerr
00037742 <AmiBlitz3.ab2@11474>   MOVEQ.l #$00,D0
00037744 <AmiBlitz3.ab2@11475>   MOVE.w D7,D0
00037746 <AmiBlitz3.ab2@11476>   ADD.w D2,D0
00037748 <AmiBlitz3.ab2@11477>   ADDQ.w #1,D0
0003774A <AmiBlitz3.ab2@11478>   MOVE.w D0,D2
0003774C <AmiBlitz3.ab2@11479>   MOVEQ.l #$01,D1
00037752 <AmiBlitz3.ab2@11480>   MOVEA.l _execbase,A6
00037758 <AmiBlitz3.ab2@11481>   MOVE.l mempool2,a0
0003775C <AmiBlitz3.ab2@11482>   JSR _AllocPooled(a6)
0003775E <AmiBlitz3.ab2@11484>   MOVEA.l D0,A0
00037760 <AmiBlitz3.ab2@11485>   MOVE.l A0,(A2)
00037762 <AmiBlitz3.ab2@11486>   CLR.l (a0)
00037766 <AmiBlitz3.ab2@11487>   CLR.l 8(a0)                                              ;clear next
00037768 <AmiBlitz3.ab2@11488>   MOVEA.l A0,A2
0003776C <AmiBlitz3.ab2@11489>   LEA -$1(A0,D7.W),A0
0003776E <AmiBlitz3.ab2@11490>   MOVE.b D2,(A0)+                                          ;put in struct length
00037774 <AmiBlitz3.ab2@11491>   LEA ptr_parameterstore,A1
00037776 <AmiBlitz3.ab2@11492>   MOVEQ #0,d0
00037778 <AmiBlitz3.ab2@11493>   MOVEQ #0,d1
0003777A <AmiBlitz3.ab2@11496>   MOVE.b (A1)+,d1
0003777C <AmiBlitz3.ab2@11499>   MOVE.b d1,(A0)+
00037780 <AmiBlitz3.ab2@11500>   BNE.w addlabel_loop2
00037784 <AmiBlitz3.ab2@11501> BRA.w reget
00037786 <AmiBlitz3.ab2@11505>   MOVEQ.l #$13,D7
0003778C <AmiBlitz3.ab2@11506>   LEA constantbase,A2
00037790 <AmiBlitz3.ab2@11507> BRA.w findlab
00037792 <AmiBlitz3.ab2@11511>   MOVEQ.l #$05+8,D7                                        ;#5,d7 org source
00037798 <AmiBlitz3.ab2@11512>   LEA xinclude_base,A2
0003779C <AmiBlitz3.ab2@11513> BRA.w findlab
0003779E <AmiBlitz3.ab2@11517>   MOVEQ.l #$09,D7
000377A4 <AmiBlitz3.ab2@11518>   LEA firstconst,A2
000377A8 <AmiBlitz3.ab2@11519> BRA.w findlab
000377AA <AmiBlitz3.ab2@11523>   MOVEQ.l #$0d,D7                                          ;find macro
000377B0 <AmiBlitz3.ab2@11524>   LEA macrobase,A2
000377B4 <AmiBlitz3.ab2@11525> BRA.w findlab
000377BA <AmiBlitz3.ab2@11529>   LEA labelhash,A2
000377BC <AmiBlitz3.ab2@11530>   MOVEQ.l #$13,D7
000377BE <AmiBlitz3.ab2@11531>   EXT.l d2
000377C4 <AmiBlitz3.ab2@11532>   LEA ptr_parameterstore,A0
000377C6 <AmiBlitz3.ab2@11533>   MOVEQ #0,d0
000377C8 <AmiBlitz3.ab2@11534>   MOVEQ #0,d1
000377CA <AmiBlitz3.ab2@11537>     MOVE.b (a0)+,d1
000377CE <AmiBlitz3.ab2@11538>     BEQ 'l15
000377D4 <AmiBlitz3.ab2@11539>     !hashalgo
000377D8 <AmiBlitz3.ab2@11540> BRA 'l20
000377DE <AmiBlitz3.ab2@11543>   AND.l #hashsize,d0
000377E0 <AmiBlitz3.ab2@11544>   ASL.l #2,d0
000377E4 <AmiBlitz3.ab2@11545>   MOVE.l 0(a2,d0),d0
000377E8 <AmiBlitz3.ab2@11546> BRA 'l11
000377EC <AmiBlitz3.ab2@11549>   MOVE.l $c(A2),D0                                         ;find label
000377F0 <AmiBlitz3.ab2@11552>   BEQ findlab__no
000377F2 <AmiBlitz3.ab2@11553>   MOVEA.l D0,A2
000377F4 <AmiBlitz3.ab2@11554>   MOVEQ.l #$00,D0
000377F8 <AmiBlitz3.ab2@11555>   MOVE.b -$1(A2,D7.l),D0
000377FE <AmiBlitz3.ab2@11556>   LEA ptr_parameterstore,A0
00037800 <AmiBlitz3.ab2@11557>   SUB.l D7,D0
00037802 <AmiBlitz3.ab2@11558>   SUBQ.l #1,D0
00037804 <AmiBlitz3.ab2@11559>   CMP.l D0,D2
00037808 <AmiBlitz3.ab2@11560>    BNE.b 'l10
0003780C <AmiBlitz3.ab2@11561>   LEA $0(A2,D7.W),A1
0003780E <AmiBlitz3.ab2@11562>   SUBQ.l #1,D0
00037810 <AmiBlitz3.ab2@11565>     MOVE.b (a1)+,d1
00037812 <AmiBlitz3.ab2@11566>     CMP.b (a0)+,d1
00037816 <AmiBlitz3.ab2@11568>     BNE.b 'l10
0003781A <AmiBlitz3.ab2@11569>   DBF D0,'l201
0003781E <AmiBlitz3.ab2@11571>   BSR.w reget
00037820 <AmiBlitz3.ab2@11572>   CMP.w D0,D0
00037822 <AmiBlitz3.ab2@11573> RTS
00037824 <AmiBlitz3.ab2@11577>   MOVEQ.l #$0B,D7
00037828 <AmiBlitz3.ab2@11578> BRA.w findlab
0003782E <AmiBlitz3.ab2@11582>   LEA firstproc,A2
00037834 <AmiBlitz3.ab2@11583>   MOVE.l #$21+#funcentry_extend,D7
00037838 <AmiBlitz3.ab2@11584> BRA findlab
0003783E <AmiBlitz3.ab2@11588>   LEA firstfor,A2
00037840 <AmiBlitz3.ab2@11589>   MOVEQ.l #$11,D7
00037844 <AmiBlitz3.ab2@11590> BRA.w findlab
00037846 <AmiBlitz3.ab2@11594>   MOVEQ.l #$0F,D7
0003784A <AmiBlitz3.ab2@11595> BRA.w findlab
0003784C <AmiBlitz3.ab2@11599>   MOVEQ.l #$0F+4,D7
00037852 <AmiBlitz3.ab2@11600>   TST.b newvariable
00037856 <AmiBlitz3.ab2@11601>    BNE.w findlab
0003785C <AmiBlitz3.ab2@11602>   LEA variablehash,A2
00037862 <AmiBlitz3.ab2@11603>   LEA ptr_parameterstore,A0
00037864 <AmiBlitz3.ab2@11604>   MOVEQ #0,d0
00037866 <AmiBlitz3.ab2@11605>   MOVEQ #0,d1
00037868 <AmiBlitz3.ab2@11608>     MOVE.b (a0)+,d1
0003786C <AmiBlitz3.ab2@11609>     BEQ 'l15
00037872 <AmiBlitz3.ab2@11610>     !hashalgo
00037876 <AmiBlitz3.ab2@11611> BRA 'l20
0003787C <AmiBlitz3.ab2@11614>   AND.l #hashsize,d0
0003787E <AmiBlitz3.ab2@11615>   ASL.l #2,d0
00037882 <AmiBlitz3.ab2@11616>   MOVE.l 0(a2,d0),d0
00037886 <AmiBlitz3.ab2@11617> BRA 'l11
0003788A <AmiBlitz3.ab2@11620>   MOVE.l $e(A2),D0                                         ;find label
0003788E <AmiBlitz3.ab2@11623>   BEQ findlab__no
00037890 <AmiBlitz3.ab2@11624>   MOVEA.l D0,A2
00037892 <AmiBlitz3.ab2@11625>   MOVEQ.l #$00,D0
00037896 <AmiBlitz3.ab2@11626>   MOVE.b -$1(A2,D7.W),D0
0003789C <AmiBlitz3.ab2@11627>   LEA ptr_parameterstore,A0
0003789E <AmiBlitz3.ab2@11628>   SUB.w D7,D0
000378A0 <AmiBlitz3.ab2@11629>   SUBQ.l #1,D0
000378A2 <AmiBlitz3.ab2@11630>   CMP.w D0,D2
000378A6 <AmiBlitz3.ab2@11631>    BNE.b 'l10
000378AA <AmiBlitz3.ab2@11632>   LEA $0(A2,D7.W),A1
000378AC <AmiBlitz3.ab2@11633>   SUBQ.l #1,D0
000378AE <AmiBlitz3.ab2@11636>     MOVE.b (a1)+,d1
000378B0 <AmiBlitz3.ab2@11637>     CMP.b (a0)+,d1
000378B4 <AmiBlitz3.ab2@11639>     BNE.b 'l10
000378B8 <AmiBlitz3.ab2@11640>   DBF D0,'l201
000378BC <AmiBlitz3.ab2@11642>   BSR.w reget
000378BE <AmiBlitz3.ab2@11643>   CMP.w D0,D0
000378C0 <AmiBlitz3.ab2@11644> RTS
000378C2 <AmiBlitz3.ab2@11657>     MOVE.l (A2),D0                                         ;find label
000378C6 <AmiBlitz3.ab2@11658>      BEQ.b findlab__no
000378C8 <AmiBlitz3.ab2@11659>     MOVEA.l D0,A2
000378CA <AmiBlitz3.ab2@11660>     MOVEQ.l #$00,D0
000378CE <AmiBlitz3.ab2@11661>     MOVE.b -$1(A2,D7.W),D0
000378D0 <AmiBlitz3.ab2@11662>     SUB.l D7,D0
000378D2 <AmiBlitz3.ab2@11663>     SUBQ.l #1,D0
000378D4 <AmiBlitz3.ab2@11664>   CMP.w D0,D2
000378D8 <AmiBlitz3.ab2@11665>   BNE.b findlab__loop
000378DC <AmiBlitz3.ab2@11667>   LEA $0(A2,D7.W),A1
000378E2 <AmiBlitz3.ab2@11668>   LEA ptr_parameterstore,A0
000378E4 <AmiBlitz3.ab2@11669>   SUBQ.l #1,D0
000378E6 <AmiBlitz3.ab2@11672>     MOVE.b (a1)+,d1
000378E8 <AmiBlitz3.ab2@11673>     CMP.b (a0)+,d1
000378EC <AmiBlitz3.ab2@11675>     BNE.b findlab__loop
000378F0 <AmiBlitz3.ab2@11676>   DBF D0,findlab__loop2
000378F4 <AmiBlitz3.ab2@11678>   BSR.w reget
000378F6 <AmiBlitz3.ab2@11679>   CMP.w D0,D0
000378F8 <AmiBlitz3.ab2@11680> RTS
000378FC <AmiBlitz3.ab2@11683>   BSR.w reget
000378FE <AmiBlitz3.ab2@11684>   MOVEQ.l #-$01,D1
00037900 <AmiBlitz3.ab2@11685> RTS
00037906 <AmiBlitz3.ab2@11689>   MOVEA.l alllocals,A4
0003790C <AmiBlitz3.ab2@11690>   CLR.l alllocals
00037910 <AmiBlitz3.ab2@11694>     CMPA.w #$0,A4
00037914 <AmiBlitz3.ab2@11695>      BEQ.b freeprocvs__done
00037918 <AmiBlitz3.ab2@11696>     MOVEA.l $4(A4),A3
0003791C <AmiBlitz3.ab2@11698>     MOVEA.l $8(A4),A3
0003791E <AmiBlitz3.ab2@11700>     MOVEA.l A4,A1
00037920 <AmiBlitz3.ab2@11701>     MOVEA.l (A4),A4
00037922 <AmiBlitz3.ab2@11702>     MOVEQ.l #$0C,D0
00037928 <AmiBlitz3.ab2@11703>     MOVEA.l _execbase,A6
0003792E <AmiBlitz3.ab2@11704>     MOVE.l mempool,a0
00037932 <AmiBlitz3.ab2@11705>     JSR _FreePooled(A6)
00037936 <AmiBlitz3.ab2@11706> BRA.b freeprocvs__loop
0003793C <AmiBlitz3.ab2@11709>   CLR.l firstglob                                          ;fix 2*aclearallvar called
00037942 <AmiBlitz3.ab2@11710>   CLR.l firstlocal
00037948 <AmiBlitz3.ab2@11711>   CLR.l sharebase
0003794E <AmiBlitz3.ab2@11712>   TST.l mempool2
00037952 <AmiBlitz3.ab2@11713>   BEQ freeprocvs__done_l10
00037958 <AmiBlitz3.ab2@11715>   MOVEA.l _execbase,A6
0003795E <AmiBlitz3.ab2@11716>   MOVE.l mempool2,a0
00037964 <AmiBlitz3.ab2@11717>   CLR.l mempool2
00037968 <AmiBlitz3.ab2@11718>   JSR _DeletePool(a6)
0003796E <AmiBlitz3.ab2@11721>   MOVE.l _execbase,a6
00037974 <AmiBlitz3.ab2@11722>   MOVE.l #$10000,d0
0003797A <AmiBlitz3.ab2@11723>   MOVE.l #80000,d1
0003797C <AmiBlitz3.ab2@11724>   MOVE.l d1,d2
00037980 <AmiBlitz3.ab2@11725>   JSR _CreatePool(a6)
00037986 <AmiBlitz3.ab2@11726>   MOVE.l d0,mempool2
00037988 <AmiBlitz3.ab2@11727> RTS
0003798C <AmiBlitz3.ab2@11731>   CMPA.w #$0,A3
00037990 <AmiBlitz3.ab2@11732>    BEQ.w freevars__done
00037992 <AmiBlitz3.ab2@11733>   MOVEA.l A3,A1
00037994 <AmiBlitz3.ab2@11734>   MOVEA.l (A3),A3
00037996 <AmiBlitz3.ab2@11735>   MOVEQ.l #$00,D0
0003799A <AmiBlitz3.ab2@11736>   MOVE.b $E(A1),D0
000379A0 <AmiBlitz3.ab2@11737>   MOVEA.l _execbase,A6
000379A6 <AmiBlitz3.ab2@11738>   MOVE.l mempool2,a0
000379AA <AmiBlitz3.ab2@11739>   JSR _FreePooled(A6)
000379AE <AmiBlitz3.ab2@11740> BRA.w freevars
000379B2 <AmiBlitz3.ab2@11743>     CMPA.w #$0,A3
000379B6 <AmiBlitz3.ab2@11744>      BEQ.w freevars__done
000379B8 <AmiBlitz3.ab2@11745>     MOVEA.l A3,A1
000379BA <AmiBlitz3.ab2@11746>     MOVEA.l (A3),A3
000379BC <AmiBlitz3.ab2@11747>     MOVEQ.l #$00,D0
000379C0 <AmiBlitz3.ab2@11748>     MOVE.b $E+4(A1),D0
000379C6 <AmiBlitz3.ab2@11749>     MOVEA.l _execbase,A6
000379CC <AmiBlitz3.ab2@11750>     MOVE.l mempool2,a0
000379D0 <AmiBlitz3.ab2@11751>     JSR _FreePooled(A6)
000379D4 <AmiBlitz3.ab2@11752> BRA.w freevarsb
000379D6 <AmiBlitz3.ab2@11755> RTS
000379DC <AmiBlitz3.ab2@11759>   MOVEA.l currentlabeladdr,A0
000379E2 <AmiBlitz3.ab2@11760>   MOVE.l a0,lastlabel
000379E4 <AmiBlitz3.ab2@11761>   MOVEA.l (A0),A2
000379E6 <AmiBlitz3.ab2@11762>   CLR.l (A0)
000379EC <AmiBlitz3.ab2@11763>   MOVEA.l _execbase,A6
000379F0 <AmiBlitz3.ab2@11766>   CMPA.w #$0,A2
000379F4 <AmiBlitz3.ab2@11767>    BEQ.w clearlabels__done
000379F8 <AmiBlitz3.ab2@11768>   MOVE.l $4(A2),D0
000379FC <AmiBlitz3.ab2@11769>   BTST #$0,D0
00037A00 <AmiBlitz3.ab2@11770>    BNE.w clearlabels__skip
00037A02 <AmiBlitz3.ab2@11771>   MOVEA.l D0,A3
00037A06 <AmiBlitz3.ab2@11774>     CMPA.w #$0,A3
00037A0A <AmiBlitz3.ab2@11775>      BEQ.w clearlabels__skip
00037A0C <AmiBlitz3.ab2@11776>     MOVEA.l A3,A1
00037A0E <AmiBlitz3.ab2@11777>     MOVEA.l (A3),A3
00037A10 <AmiBlitz3.ab2@11778>     MOVEQ.l #$0C+2,D0                                      ;cancel fix
00037A16 <AmiBlitz3.ab2@11779>     MOVE.l mempool,a0
00037A1A <AmiBlitz3.ab2@11780>     JSR _FreePooled(A6)
00037A1E <AmiBlitz3.ab2@11781> BRA.w clearlabels__loop2
00037A20 <AmiBlitz3.ab2@11784>   MOVEQ.l #$00,D0
00037A24 <AmiBlitz3.ab2@11785>   MOVE.b $12(A2),D0
00037A26 <AmiBlitz3.ab2@11786>   MOVEA.l A2,A1
00037A28 <AmiBlitz3.ab2@11787>   MOVEA.l (A2),A2
00037A2E <AmiBlitz3.ab2@11788>   MOVE.l mempool2,a0
00037A32 <AmiBlitz3.ab2@11790> BRA.w clearlabels__loop
00037A34 <AmiBlitz3.ab2@11793> RTS
00037A3A <AmiBlitz3.ab2@11797>   MOVEA.l firstpend,A3
00037A40 <AmiBlitz3.ab2@11798>   CLR.l firstpend
00037A46 <AmiBlitz3.ab2@11799>   MOVEA.l _execbase,A6
00037A4A <AmiBlitz3.ab2@11802>     CMPA.w #$0,A3
00037A4E <AmiBlitz3.ab2@11803>      BEQ.w freepends__done
00037A50 <AmiBlitz3.ab2@11804>     MOVEA.l A3,A1
00037A52 <AmiBlitz3.ab2@11805>     MOVEQ.l #$08,D0
00037A54 <AmiBlitz3.ab2@11806>     MOVEA.l (A3),A3
00037A5A <AmiBlitz3.ab2@11807>     MOVE.l mempool,a0
00037A5E <AmiBlitz3.ab2@11808>     JSR _FreePooled(A6)
00037A62 <AmiBlitz3.ab2@11809> BRA.w fpnd2
00037A64 <AmiBlitz3.ab2@11812> RTS
00037A6A <AmiBlitz3.ab2@11816>   MOVEA.l firstproc,A2
00037A70 <AmiBlitz3.ab2@11817>   CLR.l firstproc
00037A76 <AmiBlitz3.ab2@11818>   MOVEA.l _execbase,A6
00037A7A <AmiBlitz3.ab2@11821>     CMPA.w #$0,A2
00037A7E <AmiBlitz3.ab2@11822>      BEQ.w clearfunctionlist__done
00037A80 <AmiBlitz3.ab2@11823>     MOVEA.l A2,A1
00037A82 <AmiBlitz3.ab2@11824>     MOVEA.l (A2),A2
00037A84 <AmiBlitz3.ab2@11825>     MOVEQ.l #$00,D0
00037A88 <AmiBlitz3.ab2@11826>     MOVE.b $20+#funcentry_extend(A1),D0
00037A8E <AmiBlitz3.ab2@11827>     MOVE.l mempool2,a0
00037A92 <AmiBlitz3.ab2@11828>     JSR _FreePooled(A6)
00037A96 <AmiBlitz3.ab2@11829> BRA.w clearfunctionlist__loop
00037A98 <AmiBlitz3.ab2@11832> RTS
00037A9C <AmiBlitz3.ab2@11836>   CMPA.w #$0,A2
00037AA0 <AmiBlitz3.ab2@11837>    BEQ.w freetypes__done
00037AA4 <AmiBlitz3.ab2@11838>   MOVEA.l $4(A2),A3
00037AA8 <AmiBlitz3.ab2@11839>   CMPA.w #$FF,A3
00037AAC <AmiBlitz3.ab2@11840>    BEQ.w freetypes__noway
00037AB0 <AmiBlitz3.ab2@11844>    BSR.w freevars
00037AB2 <AmiBlitz3.ab2@11847>     MOVEA.l A2,A1
00037AB4 <AmiBlitz3.ab2@11848>     MOVEA.l (A2),A2
00037AB6 <AmiBlitz3.ab2@11849>     MOVEQ.l #$00,D0
00037ABA <AmiBlitz3.ab2@11850>     MOVE.b $A(A1),D0
00037AC0 <AmiBlitz3.ab2@11851>     MOVEA.l _execbase,A6
00037AC6 <AmiBlitz3.ab2@11852>     MOVE.l mempool2,a0
00037ACA <AmiBlitz3.ab2@11853>     JSR _FreePooled(A6)
00037ACE <AmiBlitz3.ab2@11854> BRA.w freetypes
00037AD0 <AmiBlitz3.ab2@11857> RTS
00037AD6 <AmiBlitz3.ab2@11861>   JSR uselib2
00037ADC <AmiBlitz3.ab2@11863>   CLR.w notshared
00037AE2 <AmiBlitz3.ab2@11864>   CLR.w varmode
00037AE8 <AmiBlitz3.ab2@11865>   MOVE.w proceduremode,D1
00037AEC <AmiBlitz3.ab2@11866>    BNE.w JL_0_8F4E
00037AF2 <AmiBlitz3.ab2@11867>   LEA varbase,A2
00037AF8 <AmiBlitz3.ab2@11868>   LEA ptr_parameterstore,a0
00037AFC <AmiBlitz3.ab2@11869>   CMP.b #$22,(a0)
00037B00 <AmiBlitz3.ab2@11870>   BNE JL_0_8E5E
00037B02 <AmiBlitz3.ab2@11871>   MOVEQ #0,d0
00037B08 <AmiBlitz3.ab2@11872> JMP error
00037B0C <AmiBlitz3.ab2@11875>   BSR.w findvariable
00037B10 <AmiBlitz3.ab2@11878>   BNE.w JL_0_8E7E
00037B16 <AmiBlitz3.ab2@11881>   MOVE.b flagmask+1,D1
00037B1A <AmiBlitz3.ab2@11882>   MOVE.b $7(A2),D3
00037B1C <AmiBlitz3.ab2@11883>   EOR.b D3,D1
00037B20 <AmiBlitz3.ab2@11884>   BNE 'l2
00037B28 <AmiBlitz3.ab2@11885>   CMP.b #2,nowdeclare
00037B2C <AmiBlitz3.ab2@11886>   BEQ errormsg_declaredtwice
00037B30 <AmiBlitz3.ab2@11887> BRA.w JL_0_8FA8
00037B34 <AmiBlitz3.ab2@11890>   BSR.w findlab
00037B38 <AmiBlitz3.ab2@11891>   BNE 'l1
00037B40 <AmiBlitz3.ab2@11892>   CMP.b #2,nowdeclare
00037B44 <AmiBlitz3.ab2@11893>   BEQ errormsg_declaredtwice
00037B46 <AmiBlitz3.ab2@11894>   CMP.w d0,d0
00037B4A <AmiBlitz3.ab2@11897> BRA.w JL_0_8E62
00037B4C <AmiBlitz3.ab2@11900>    MOVE.l a2,-(a7)
00037B52 <AmiBlitz3.ab2@11901>    LEA sharebase,a2
00037B54 <AmiBlitz3.ab2@11902>    MOVEQ #$f+4,d7
00037B58 <AmiBlitz3.ab2@11903>    BSR.w findlab
00037B5C <AmiBlitz3.ab2@11904>    BEQ 'l2x
00037B5E <AmiBlitz3.ab2@11905>    MOVE.l (a7)+,a2
00037B62 <AmiBlitz3.ab2@11906> BRA 'cont
00037B64 <AmiBlitz3.ab2@11909>   ADDQ.l #4,a7
00037B6A <AmiBlitz3.ab2@11910>   CLR.w varmode
00037B70 <AmiBlitz3.ab2@11911>   MOVE.b flagmask+1,D1
00037B74 <AmiBlitz3.ab2@11912>   MOVE.b $7(A2),D3
00037B76 <AmiBlitz3.ab2@11913>   EOR.b D3,D1
00037B7A <AmiBlitz3.ab2@11914>   BNE vardeclareerr
00037B7E <AmiBlitz3.ab2@11915> BRA JL_0_8FA8
00037B84 <AmiBlitz3.ab2@11918>    MOVE.w nonew,D1
00037B88 <AmiBlitz3.ab2@11919>    BNE.w nonewerr
00037B8E <AmiBlitz3.ab2@11920>    TST.b nowdeclare
00037B92 <AmiBlitz3.ab2@11921>    BNE 'l2
00037B98 <AmiBlitz3.ab2@11922>    TST.b declare2
00037B9C <AmiBlitz3.ab2@11923>    BEQ 'l1
00037BA0 <AmiBlitz3.ab2@11924>    CMP.b #$2e,d0
00037BA4 <AmiBlitz3.ab2@11925>    BEQ 'l2
00037BA8 <AmiBlitz3.ab2@11926>    CMP.b #"$",d0
00037BAC <AmiBlitz3.ab2@11927>    BEQ 'l2
00037BB0 <AmiBlitz3.ab2@11928> BRA vardeclareerr
00037BB6 <AmiBlitz3.ab2@11931>   TST.b declare
00037BBA <AmiBlitz3.ab2@11932>    BNE vardeclareerr
00037BBE <AmiBlitz3.ab2@11935>   BSR.w addvariable
00037BC4 <AmiBlitz3.ab2@11936>   NOT.w notshared
00037BC6 <AmiBlitz3.ab2@11937>   MOVEA.l A2,A3
00037BCC <AmiBlitz3.ab2@11938>   MOVEA.l defaulttype,A2
00037BD0 <AmiBlitz3.ab2@11939>   CMP.w #$2E,D0
00037BD4 <AmiBlitz3.ab2@11940>    BEQ.w JL_0_8EB8
00037BD8 <AmiBlitz3.ab2@11941>   CMP.w #$24,D0
00037BDC <AmiBlitz3.ab2@11942>    BNE.w JL_0_8ECA
00037BE2 <AmiBlitz3.ab2@11943>   LEA newtype_string,A2
00037BE6 <AmiBlitz3.ab2@11944>    BSR.w get1bytemain
00037BEA <AmiBlitz3.ab2@11945> BRA.w JL_0_8ECA
00037BEE <AmiBlitz3.ab2@11948>    BSR.w getparameter2
00037BF4 <AmiBlitz3.ab2@11949>   LEA newtypebase,A2
00037BF8 <AmiBlitz3.ab2@11950>    BSR.w findtype
00037BFC <AmiBlitz3.ab2@11951>    BNE.w JUMP_notypeerr
00037C02 <AmiBlitz3.ab2@11954>   CMPA.l #newtype_byte,A2
00037C06 <AmiBlitz3.ab2@11955>    BEQ.w JL_0_8EECb
00037C0C <AmiBlitz3.ab2@11956>   MOVE.w varmode,D1
00037C10 <AmiBlitz3.ab2@11957>    BNE.w JL_0_8EE4b
00037C16 <AmiBlitz3.ab2@11958>   ADDQ.w #1,globalvarpointer
00037C1E <AmiBlitz3.ab2@11961>   BCLR #$0,globalvarpointer+1
00037C22 <AmiBlitz3.ab2@11964>   MOVE.l A2,$A(A3)
00037C2A <AmiBlitz3.ab2@11965>   MOVE.w flagmask,$6(A3)                                  ;??????????
00037C2C <AmiBlitz3.ab2@11967>   MOVEQ.l #$04,D1
00037C34 <AmiBlitz3.ab2@11968>   BTST #$0,flagmask+1
00037C38 <AmiBlitz3.ab2@11969>    BNE.w JL_0_8F22b
00037C40 <AmiBlitz3.ab2@11970>   BTST #$1,flagmask+1
00037C44 <AmiBlitz3.ab2@11971>    BNE.w JL_0_8F22b
00037C4C <AmiBlitz3.ab2@11972>   CMPI.l #$100,$4(A2)
00037C50 <AmiBlitz3.ab2@11973>    BCC.w JL_0_8F22b
00037C54 <AmiBlitz3.ab2@11974>   MOVE.w $8(A2),D1
00037C5A <AmiBlitz3.ab2@11977>   TST.w varmode
00037C5E <AmiBlitz3.ab2@11978> BRA.w JL_0_8F3E
00037C62 <AmiBlitz3.ab2@11987>   BSR.w getparameter2
00037C68 <AmiBlitz3.ab2@11988>   LEA newtypebase,A2
00037C6C <AmiBlitz3.ab2@11989>    BSR.w findtype
00037C70 <AmiBlitz3.ab2@11990>    BNE.w notypeerr
00037C76 <AmiBlitz3.ab2@11993>   CMPA.l #newtype_byte,A2
00037C7A <AmiBlitz3.ab2@11994>    BEQ.w JL_0_8EEC
00037C80 <AmiBlitz3.ab2@11995>   MOVE.w varmode,D1
00037C84 <AmiBlitz3.ab2@11996>    BNE.w JL_0_8EE4
00037C8A <AmiBlitz3.ab2@11997>   ADDQ.w #1,globalvarpointer
00037C92 <AmiBlitz3.ab2@12000>   BCLR #$0,globalvarpointer+1
00037C96 <AmiBlitz3.ab2@12003>   MOVE.l A2,$A(A3)
00037C9E <AmiBlitz3.ab2@12004>   MOVE.w flagmask,$6(A3)                                  ;??????????
00037CA0 <AmiBlitz3.ab2@12005>   MOVEQ.l #$04,D1
00037CA8 <AmiBlitz3.ab2@12006>   BTST #$0,flagmask+1
00037CAC <AmiBlitz3.ab2@12007>    BNE.w JL_0_8F22
00037CB4 <AmiBlitz3.ab2@12008>   BTST #$1,flagmask+1
00037CB8 <AmiBlitz3.ab2@12009>    BNE.w JL_0_8F22
00037CC0 <AmiBlitz3.ab2@12010>   CMPI.l #$100,$4(A2)
00037CC4 <AmiBlitz3.ab2@12011>    BCC.w JL_0_8F22
00037CC8 <AmiBlitz3.ab2@12012>   MOVE.w $8(A2),D1
00037CCE <AmiBlitz3.ab2@12015>   TST.w varmode
00037CD2 <AmiBlitz3.ab2@12016>    BEQ.w JL_0_8F3E
00037CD4 <AmiBlitz3.ab2@12017>   NEG.w D1
00037CDA <AmiBlitz3.ab2@12018>   ADD.w D1,globalvarpointer
00037CE2 <AmiBlitz3.ab2@12019>   MOVE.w globalvarpointer,$4(A3)
00037CE4 <AmiBlitz3.ab2@12020> RTS
00037CEC <AmiBlitz3.ab2@12023>   MOVE.w globalvarpointer,$4(A3)
00037CF2 <AmiBlitz3.ab2@12024>   ADD.w D1,globalvarpointer
00037CF4 <AmiBlitz3.ab2@12025> RTS
00037CFA <AmiBlitz3.ab2@12029>   LEA firstglob,A2
00037CFE <AmiBlitz3.ab2@12030>    BSR.w findvariable2
00037D02 <AmiBlitz3.ab2@12033>   BNE.w JL_0_8F74
00037D08 <AmiBlitz3.ab2@12034>   MOVE.b flagmask+1,D1
00037D0C <AmiBlitz3.ab2@12035>   MOVE.b $7(A2),D3
00037D0E <AmiBlitz3.ab2@12036>   EOR.b D3,D1
00037D12 <AmiBlitz3.ab2@12037>    BEQ.w JL_0_8FA8
00037D16 <AmiBlitz3.ab2@12038>    BSR.w findlab
00037D1A <AmiBlitz3.ab2@12039> BRA.w JL_0_8F58
00037D22 <AmiBlitz3.ab2@12042>   MOVE.w #$FFFF,varmode
00037D28 <AmiBlitz3.ab2@12043>   MOVE.w globalvarpointer,-(A7)
00037D32 <AmiBlitz3.ab2@12044>   MOVE.w locvaroff,globalvarpointer
00037D38 <AmiBlitz3.ab2@12045>   LEA firstlocal,A2
00037D40 <AmiBlitz3.ab2@12046>   MOVE.b #1,newvariable
00037D44 <AmiBlitz3.ab2@12047>    BSR.w JL_0_8E5E
00037D4A <AmiBlitz3.ab2@12048>   CLR.b newvariable
00037D54 <AmiBlitz3.ab2@12049>   MOVE.w globalvarpointer,locvaroff
00037D5A <AmiBlitz3.ab2@12050>   MOVE.w (A7)+,globalvarpointer
00037D5C <AmiBlitz3.ab2@12051> RTS
00037D5E <AmiBlitz3.ab2@12054>   MOVEA.l A2,A3
00037D62 <AmiBlitz3.ab2@12055>   CMP.w #$2E,D0
00037D66 <AmiBlitz3.ab2@12056>    BEQ.w JL_0_8FCE
00037D6A <AmiBlitz3.ab2@12057>   CMP.w #$24,D0
00037D6E <AmiBlitz3.ab2@12058>    BNE.w JL_0_8FE8
00037D76 <AmiBlitz3.ab2@12059>   CMPI.l #newtype_string,$A(A3)
00037D7A <AmiBlitz3.ab2@12060>    BNE.w rongtypeerr
00037D7E <AmiBlitz3.ab2@12061>    BSR.w get1bytemain
00037D82 <AmiBlitz3.ab2@12062> BRA.w JL_0_8FE8
00037D86 <AmiBlitz3.ab2@12065>    BSR.w getparameter2
00037D8C <AmiBlitz3.ab2@12066>   LEA newtypebase,A2
00037D90 <AmiBlitz3.ab2@12067>    BSR.w findtype
00037D94 <AmiBlitz3.ab2@12068>    BNE.w notypeerr
00037D98 <AmiBlitz3.ab2@12069>   CMPA.l $A(A3),A2
00037D9C <AmiBlitz3.ab2@12070>    BNE.w rongtypeerr
00037DA4 <AmiBlitz3.ab2@12072>   BTST #$0,flagmask+1
00037DA8 <AmiBlitz3.ab2@12073>    BEQ.w JL_0_8FFE
00037DAE <AmiBlitz3.ab2@12074>   BTST #$0,$7(A3)
00037DB2 <AmiBlitz3.ab2@12075>    BEQ.w pointerr
00037DB6 <AmiBlitz3.ab2@12078>   MOVEA.l $A(A3),A2
00037DB8 <AmiBlitz3.ab2@12079> RTS
00037DBA <AmiBlitz3.ab2@12083>    TST.l D3                                                ;newtype >32kb  .w to .l
00037DBE <AmiBlitz3.ab2@12084>    BEQ.w JL_0_9042
00037DC8 <AmiBlitz3.ab2@12085>    MOVE.l destpointer,loada
00037DCC <AmiBlitz3.ab2@12088> BRA JL_0_9032
00037DD0 <AmiBlitz3.ab2@12090>   CMP.w #$9,D3                                             ;_addq_arrays
00037DD4 <AmiBlitz3.ab2@12091>    BCC.w JL_0_9032
00037DDA <AmiBlitz3.ab2@12092>   MOVE.w d3,arrayoffset
00037DDE <AmiBlitz3.ab2@12093>   ANDI.w #$7,D3
00037DE0 <AmiBlitz3.ab2@12094>   LSL.w #8,D3
00037DE2 <AmiBlitz3.ab2@12095>   LSL.w #1,D3
00037DEA <AmiBlitz3.ab2@12096>   ANDI.w #$F1FF,addqa0
00037DF0 <AmiBlitz3.ab2@12097>   OR.w D3,addqa0
00037DF6 <AmiBlitz3.ab2@12098>   MOVE.w addqa0,D1
00037DFA <AmiBlitz3.ab2@12099> BRA.w writeword
00037E00 <AmiBlitz3.ab2@12102>   CMP.l #$7fff,d3                                          ;>32kb newtypes
00037E04 <AmiBlitz3.ab2@12103>   BGT longoffset
00037E0A <AmiBlitz3.ab2@12104>   MOVE.w D3,leaa0a0+2
00037E10 <AmiBlitz3.ab2@12105>   MOVE.w d3,arrayoffset
00037E16 <AmiBlitz3.ab2@12106>   MOVE.l leaa0a0,D1
00037E1A <AmiBlitz3.ab2@12107>   BSR.w writelong
00037E1C <AmiBlitz3.ab2@12110> RTS
00037E20 <AmiBlitz3.ab2@12113>    MOVE.w #$d5fc,d1
00037E24 <AmiBlitz3.ab2@12114>    BSR writeword
00037E26 <AmiBlitz3.ab2@12115>    MOVE.l d3,d1
00037E2A <AmiBlitz3.ab2@12116>    BSR.w writelong
00037E2C <AmiBlitz3.ab2@12117> RTS
00037E30 <AmiBlitz3.ab2@12121>   Dc.w $b0ad,0000                                          ;cmp.l $0(A5),D0    ;nooptimize
00037E34 <AmiBlitz3.ab2@12124>    BCS.w arrchk3                                           
00037E3A <AmiBlitz3.ab2@12125>    JSR $20000                                              ;jsr 0
00037E40 <AmiBlitz3.ab2@12131>   TST.b fast
00037E44 <AmiBlitz3.ab2@12132>   BEQ 'l1
00037E46 <AmiBlitz3.ab2@12133>    MOVEQ #0,d1                                             ;faster arrays
00037E4C <AmiBlitz3.ab2@12134>    MOVE.w regnum,d2
00037E4E <AmiBlitz3.ab2@12135>    MOVE.w d2,d1
00037E50 <AmiBlitz3.ab2@12136>    LSL.w #8,d1
00037E52 <AmiBlitz3.ab2@12137>    LSL.w #4,d1
00037E54 <AmiBlitz3.ab2@12138>    ADD.w d2,d1
00037E5A <AmiBlitz3.ab2@12139>    OR.l #$4c2d0000,d1
00037E60 <AmiBlitz3.ab2@12140>    TST.w varmode
00037E64 <AmiBlitz3.ab2@12141>    BEQ 'l1a
00037E68 <AmiBlitz3.ab2@12142>    BCLR #16,d1
00037E6C <AmiBlitz3.ab2@12145>    BSR writelong
00037E70 <AmiBlitz3.ab2@12146>    MOVE.w $4(A7),D1
00037E74 <AmiBlitz3.ab2@12147>    BSR.w writeword
00037E7A <AmiBlitz3.ab2@12148>    MOVE.w regnum,D1
00037E7C <AmiBlitz3.ab2@12149>   SUBQ.w #1,D1
00037E7E <AmiBlitz3.ab2@12150>   LSL.w #8,D1
00037E80 <AmiBlitz3.ab2@12151>   LSL.w #1,D1
00037E84 <AmiBlitz3.ab2@12152>   ORI.w #$D080,D1
00037E8A <AmiBlitz3.ab2@12153>   OR.w regnum,D1
00037E8E <AmiBlitz3.ab2@12154>    BSR.w writeword
00037E90 <AmiBlitz3.ab2@12155> RTS
00037E96 <AmiBlitz3.ab2@12158>   MOVE.w regnum,D2
00037E9A <AmiBlitz3.ab2@12159>   MOVE.w arrmul1(PC),D1
00037E9C <AmiBlitz3.ab2@12160>   OR.w D2,D1
00037E9E <AmiBlitz3.ab2@12161>   SUBQ.w #1,D1
00037EA2 <AmiBlitz3.ab2@12162>    BSR.w writeword
00037EA6 <AmiBlitz3.ab2@12163>   MOVE.w arrmul2(PC),D1
00037EA8 <AmiBlitz3.ab2@12164>   OR.w D2,D1
00037EAA <AmiBlitz3.ab2@12165>   MOVE.w D2,D3
00037EAC <AmiBlitz3.ab2@12166>   SUBQ.w #1,D3
00037EAE <AmiBlitz3.ab2@12167>   LSL.w #8,D3
00037EB0 <AmiBlitz3.ab2@12168>   LSL.w #1,D3
00037EB2 <AmiBlitz3.ab2@12169>   OR.w D3,D1
00037EB6 <AmiBlitz3.ab2@12170>    BSR.w writeword
00037EBA <AmiBlitz3.ab2@12171>   MOVE.w arrmul3(PC),D1
00037EBC <AmiBlitz3.ab2@12172>   MOVE.w D2,D3
00037EBE <AmiBlitz3.ab2@12173>   LSL.w #8,D3
00037EC0 <AmiBlitz3.ab2@12174>   LSL.w #1,D3
00037EC2 <AmiBlitz3.ab2@12175>   OR.w D3,D1
00037EC6 <AmiBlitz3.ab2@12176>    BSR.w pokewda5s
00037ECA <AmiBlitz3.ab2@12177>   MOVE.w $4(A7),D1
00037ECC <AmiBlitz3.ab2@12178>   ADDQ.w #2,D1
00037ED0 <AmiBlitz3.ab2@12179>    BSR.w writeword
00037ED4 <AmiBlitz3.ab2@12180>   MOVE.w arrmul4(PC),D1
00037ED6 <AmiBlitz3.ab2@12181>   MOVE.w D2,D3
00037ED8 <AmiBlitz3.ab2@12182>   SUBQ.w #1,D3
00037EDA <AmiBlitz3.ab2@12183>   LSL.w #8,D3
00037EDC <AmiBlitz3.ab2@12184>   LSL.w #1,D3
00037EDE <AmiBlitz3.ab2@12185>   OR.w D3,D1
00037EE2 <AmiBlitz3.ab2@12186>    BSR.w pokewda5s
00037EE6 <AmiBlitz3.ab2@12187>   MOVE.w $4(A7),D1
00037EEA <AmiBlitz3.ab2@12188>    BSR.w writeword
00037EEE <AmiBlitz3.ab2@12189>   MOVE.w arrmul5(PC),D1
00037EF0 <AmiBlitz3.ab2@12190>   OR.w D2,D1
00037EF2 <AmiBlitz3.ab2@12191>   SUBQ.w #1,D1
00037EF6 <AmiBlitz3.ab2@12192>    BSR.w writeword
00037EFA <AmiBlitz3.ab2@12193>   MOVE.w arrmul6(PC),D1
00037EFC <AmiBlitz3.ab2@12194>   OR.w D2,D1
00037EFE <AmiBlitz3.ab2@12195>   SUBQ.w #1,D1
00037F02 <AmiBlitz3.ab2@12196>    BSR.w writeword
00037F06 <AmiBlitz3.ab2@12197>   MOVE.w arrmul7(PC),D1
00037F08 <AmiBlitz3.ab2@12198>   OR.w D2,D1
00037F0A <AmiBlitz3.ab2@12199>   SUBQ.w #1,D1
00037F0C <AmiBlitz3.ab2@12200>   MOVE.w D2,D3
00037F0E <AmiBlitz3.ab2@12201>   LSL.w #8,D3
00037F10 <AmiBlitz3.ab2@12202>   LSL.w #1,D3
00037F12 <AmiBlitz3.ab2@12203>   OR.w D3,D1
00037F16 <AmiBlitz3.ab2@12204>    BSR.w writeword
00037F1A <AmiBlitz3.ab2@12205>   MOVE.w arrmul8(PC),D1
00037F1C <AmiBlitz3.ab2@12206>   MOVE.w D2,D3
00037F1E <AmiBlitz3.ab2@12207>   SUBQ.w #1,D3
00037F20 <AmiBlitz3.ab2@12208>   LSL.w #8,D3
00037F22 <AmiBlitz3.ab2@12209>   LSL.w #1,D3
00037F24 <AmiBlitz3.ab2@12210>   OR.w D3,D1
00037F28 <AmiBlitz3.ab2@12211>    BSR.w writeword
00037F2E <AmiBlitz3.ab2@12212>   MOVE.w regnum,D1
00037F30 <AmiBlitz3.ab2@12213>   SUBQ.w #1,D1
00037F32 <AmiBlitz3.ab2@12214>   LSL.w #8,D1
00037F34 <AmiBlitz3.ab2@12215>   LSL.w #1,D1
00037F38 <AmiBlitz3.ab2@12216>   ORI.w #$D080,D1
00037F3E <AmiBlitz3.ab2@12217>   OR.w regnum,D1
00037F42 <AmiBlitz3.ab2@12218> BRA.w writeword
00037F44 <AmiBlitz3.ab2@12226> arrmul1:   MOVE.l d0,-(a7)                                ;write array access
00037F46 <AmiBlitz3.ab2@12227> arrmul2:   MOVE  d0,d0
00037F4A <AmiBlitz3.ab2@12228> arrmul3:   MULU 0(a5),d0                                  ;mulu   x+2(a5),d1  ;lo*lo
00037F4E <AmiBlitz3.ab2@12229> arrmul4:   MULU 0(a5),d0                                  ;mulu   x(a5),d0    ;hi*lo
00037F50 <AmiBlitz3.ab2@12231> arrmul5:   SWAP d0
00037F52 <AmiBlitz3.ab2@12232> arrmul6:   CLR d0
00037F54 <AmiBlitz3.ab2@12233> arrmul7:   ADD.l d0,d0
00037F56 <AmiBlitz3.ab2@12234> arrmul8:   MOVE.l (a7)+,d0
00037F5A <AmiBlitz3.ab2@12239> listcode1:  Dc.b $24,$6D :              Dc.b $00,$00       ;MOVEA.L $0000(A5),A2      ;pointer to start of array data
00037F5E <AmiBlitz3.ab2@12240> listcode2:  Dc.b $24,$6A,$FF,$E0                           ;MOVEA.L -$0020(A2),A2     ;pointer to current
00037F60 <AmiBlitz3.ab2@12241> listarfix:  Dc.b $50,$4A                                   ;ADDQ.W  #8,A2
00037F66 <AmiBlitz3.ab2@12259>   CLR.l lastoffset_org
00037F6C <AmiBlitz3.ab2@12260>   BTST #$1,$7(A3)
00037F70 <AmiBlitz3.ab2@12261>    BEQ.w calcvar__notarr
00037F76 <AmiBlitz3.ab2@12262>   MOVE.w notshared,D1
00037F7A <AmiBlitz3.ab2@12263>    BNE.w noarrerr
00037F7E <AmiBlitz3.ab2@12264>    BSR.w get1bytemain
00037F82 <AmiBlitz3.ab2@12265>   CMP.w #$29,D0
00037F86 <AmiBlitz3.ab2@12266>    BNE.w calcvar__notalist
00037F8C <AmiBlitz3.ab2@12267>   BTST #$0,$6(A3)
00037F90 <AmiBlitz3.ab2@12268>    BEQ.w nolisterr
00037F98 <AmiBlitz3.ab2@12269>   MOVE.w $4(A3),listcode1+2
00037F9C <AmiBlitz3.ab2@12270>   MOVE.l listcode1(PC),D1
00037FA0 <AmiBlitz3.ab2@12271>    BSR.w pokela5s
00037FA4 <AmiBlitz3.ab2@12272>   MOVE.l listcode2(PC),D1
00037FA8 <AmiBlitz3.ab2@12273>    BSR.w writelong
00037FAE <AmiBlitz3.ab2@12274>   TST.b debugmode
00037FB2 <AmiBlitz3.ab2@12275>    BEQ.w calcvar__nolrerr
00037FB4 <AmiBlitz3.ab2@12279>   MOVE.l A2,-(A7)
00037FB8 <AmiBlitz3.ab2@12280>   MOVE.w #$C315,D1
00037FBC <AmiBlitz3.ab2@12281>    BSR.w Atokejsr
00037FBE <AmiBlitz3.ab2@12282>   MOVEA.l (A7)+,A2
00037FC2 <AmiBlitz3.ab2@12285>    MOVE.w listarfix(PC),D1                                 ;addq #8,a2
00037FC6 <AmiBlitz3.ab2@12287>    BSR.w writeword
00037FCA <AmiBlitz3.ab2@12288> BRA.w calcvar__normalar
00037FCC <AmiBlitz3.ab2@12291> calcvar__listoff:   Ds.w 1
00037FD2 <AmiBlitz3.ab2@12295>   CLR.w calcvar__listoff
00037FD8 <AmiBlitz3.ab2@12296>   BTST #$0,$6(A3)
00037FDC <AmiBlitz3.ab2@12297>    BEQ.w calcvar__knop
00037FE4 <AmiBlitz3.ab2@12298>   MOVE.w #$0008,calcvar__listoff                            ;adjust size of one element if list.
00037FE8 <AmiBlitz3.ab2@12301>   MOVEM.l A2-A3,-(A7)
00037FEE <AmiBlitz3.ab2@12302>   MOVE.w varmode,-(A7)
00037FF2 <AmiBlitz3.ab2@12303>   MOVE.w $8(A3),-(A7)                                       ;number of dims
00037FF6 <AmiBlitz3.ab2@12304>   MOVE.w $4(A3),-(A7)                                       ;varoff
00037FF8 <AmiBlitz3.ab2@12305>   MOVE.l A2,-(A7)
00037FFE <AmiBlitz3.ab2@12306>   MOVE.w flagmask,-(A7)
00038008 <AmiBlitz3.ab2@12308>   MOVE.w oldqflag,instringon
0003800E <AmiBlitz3.ab2@12309>   MOVEA.l lastsourcepos,A5
00038012 <AmiBlitz3.ab2@12310>    BSR.w arreval
00038018 <AmiBlitz3.ab2@12311>   MOVE.w (A7)+,flagmask
00038020 <AmiBlitz3.ab2@12312>   MOVE.w $8(A7),varmode
00038026 <AmiBlitz3.ab2@12313>   TST.b debugmode
0003802A <AmiBlitz3.ab2@12314>    BEQ.w calcvar__noszchk
0003802C <AmiBlitz3.ab2@12318>   MOVEA.l (A7)+,A2
0003802E <AmiBlitz3.ab2@12319>   MOVEQ.l #$04,D1
00038036 <AmiBlitz3.ab2@12320>   BTST #$0,flagmask+1                                      ;pointer?
0003803A <AmiBlitz3.ab2@12321>    BNE.b calcvar__domul                                          ;yes, then use 4 byte mul...
0003803E <AmiBlitz3.ab2@12322>   MOVE.w $8(A2),D1
00038042 <AmiBlitz3.ab2@12325>   ADD.w calcvar__listoff(PC),D1
00038046 <AmiBlitz3.ab2@12326>   BSR.w JL_0_B6DE
0003804C <AmiBlitz3.ab2@12327>   ADDQ.w #1,regnum
0003804E <AmiBlitz3.ab2@12330>   ADDQ.w #4,(A7)
00038052 <AmiBlitz3.ab2@12331>   TST.w $4(A7)
00038056 <AmiBlitz3.ab2@12332>    BEQ.w calcvar__isglob
00038058 <AmiBlitz3.ab2@12333>   SUBQ.w #8,(A7)                                           ;range check local array
0003805E <AmiBlitz3.ab2@12336>   TST.b debugmode
00038062 <AmiBlitz3.ab2@12337>    BEQ.w calcvar__noer1
00038068 <AmiBlitz3.ab2@12338>   MOVE.w regnum,D1
0003806A <AmiBlitz3.ab2@12339>   SUBQ.w #1,D1
0003806C <AmiBlitz3.ab2@12340>   LSL.w #8,D1
0003806E <AmiBlitz3.ab2@12341>   LSL.w #1,D1
00038072 <AmiBlitz3.ab2@12342>   OR.w zarrchk(PC),D1
00038076 <AmiBlitz3.ab2@12343>    BSR.w pokewda5s                                         ;cmp.l x(a5),D regat
00038078 <AmiBlitz3.ab2@12344>   MOVE.w (A7),D1
0003807C <AmiBlitz3.ab2@12345>    BSR.w writeword
00038080 <AmiBlitz3.ab2@12346>   MOVE.l arrchk2(PC),D1
00038084 <AmiBlitz3.ab2@12347>    BSR.w writelong
00038088 <AmiBlitz3.ab2@12348>   MOVE.w #$C309,D1
0003808C <AmiBlitz3.ab2@12349>    BSR.w Atokejsr
00038090 <AmiBlitz3.ab2@12352>   SUBQ.w #1,$2(A7)
00038094 <AmiBlitz3.ab2@12353>    BEQ.w calcvar__ardone
00038098 <AmiBlitz3.ab2@12354>   CMP.w #$2C,D0
0003809C <AmiBlitz3.ab2@12355>    BNE.w syntaxerr
000380A2 <AmiBlitz3.ab2@12356>    TST.b fast
000380A6 <AmiBlitz3.ab2@12357>    BNE 'l1
000380AA <AmiBlitz3.ab2@12358>    BSR.w arrevalchk
000380AE <AmiBlitz3.ab2@12359> BRA 'l2
000380B2 <AmiBlitz3.ab2@12362>   BSR arreval
000380BA <AmiBlitz3.ab2@12365>   MOVE.w $4(A7),varmode
000380BE <AmiBlitz3.ab2@12366>   BSR.w JL_0_9052
000380C2 <AmiBlitz3.ab2@12367> BRA.w calcvar__arloop
000380C6 <AmiBlitz3.ab2@12371>   CMP.w #$29,D0
000380CA <AmiBlitz3.ab2@12372>    BNE.w syntaxerr
000380D0 <AmiBlitz3.ab2@12373>   SUBQ.w #1,regnum
000380D2 <AmiBlitz3.ab2@12374>   ADDQ.w #6,A7
000380D6 <AmiBlitz3.ab2@12375>   MOVEM.l (A7)+,A2-A3
000380DE <AmiBlitz3.ab2@12376>   MOVE.w $4(A3),movea5a0+2
000380E4 <AmiBlitz3.ab2@12377>   MOVE.l movea5a0,D1
000380E8 <AmiBlitz3.ab2@12378>    BSR.w pokela5s
000380EE <AmiBlitz3.ab2@12379>   MOVE.w regnum,D1
000380F2 <AmiBlitz3.ab2@12380>   ORI.w #$D5C0,D1                                          ;add.l Dr,a2
000380F6 <AmiBlitz3.ab2@12381>    BSR.w writeword
000380FC <AmiBlitz3.ab2@12382>   BTST #$0,$6(A3)
00038100 <AmiBlitz3.ab2@12383>    BEQ.w calcvar__normalar
00038104 <AmiBlitz3.ab2@12387>   MOVE.w listarfix(PC),D1
00038108 <AmiBlitz3.ab2@12388>    BSR.w writeword
0003810C <AmiBlitz3.ab2@12391>   BSR.w get1bytemain
00038112 <AmiBlitz3.ab2@12395>   BTST #$0,$7(A3)
00038116 <AmiBlitz3.ab2@12396>    BEQ.w calcvar__noppnt
0003811A <AmiBlitz3.ab2@12397>   CMP.w #$5C,D0
0003811E <AmiBlitz3.ab2@12398>    BNE.w calcvar__pmskip
00038122 <AmiBlitz3.ab2@12399>   MOVE.w calcvar__pfix(PC),D1
00038126 <AmiBlitz3.ab2@12400>    BSR.w writeword
0003812A <AmiBlitz3.ab2@12403>   MOVE.w #$8000,D2
0003812E <AmiBlitz3.ab2@12404> BRA.w calcvar__loopml
00038132 <AmiBlitz3.ab2@12407>   MOVE.w #$C000,D2
00038136 <AmiBlitz3.ab2@12408> BRA.w calcvar__loopml
00038138 <AmiBlitz3.ab2@12412> calcvar__pfix:   Dc.b $24,$52                                   ;MOVEA.L (A2),A2
0003813C <AmiBlitz3.ab2@12417>   CMP.w #$28,D0
00038140 <AmiBlitz3.ab2@12418>    BEQ.w noarrerr
00038148 <AmiBlitz3.ab2@12419>   CMPI.l #$100,$4(A2)
0003814C <AmiBlitz3.ab2@12420>    BCS.w calcvar__simpvar
00038152 <AmiBlitz3.ab2@12421>   BTST #$0,$7(A3)
00038156 <AmiBlitz3.ab2@12422>    BEQ.w calcvar__notap
0003815A <AmiBlitz3.ab2@12426>   CMP.w #$5C,D0
0003815E <AmiBlitz3.ab2@12427>    BEQ.w calcvar__notap
00038160 <AmiBlitz3.ab2@12428>   MOVEQ.l #$00,D2
00038164 <AmiBlitz3.ab2@12429> BRA.w calcvar__simpvar2
00038168 <AmiBlitz3.ab2@12432>   MOVE.w #$8000,D2
00038170 <AmiBlitz3.ab2@12433>   MOVE.w $4(A3),movea5a0+2
00038176 <AmiBlitz3.ab2@12434>   MOVE.l movea5a0,D1
0003817A <AmiBlitz3.ab2@12435>    BSR.w pokela5s                                         ;move.l x(a5),a2
00038180 <AmiBlitz3.ab2@12437>    TST.b debugmode
00038184 <AmiBlitz3.ab2@12438>    BEQ.w 'skip
00038188 <AmiBlitz3.ab2@12439>    MOVE.w #$c320,D1
0003818E <AmiBlitz3.ab2@12440>    JSR Atokejsr
00038190 <AmiBlitz3.ab2@12444>   MOVEQ.l #$00,D3
00038194 <AmiBlitz3.ab2@12447>   CMP.w #$5C,D0
00038198 <AmiBlitz3.ab2@12448>    BNE.w calcvar__done
000381A0 <AmiBlitz3.ab2@12449>   CMPI.l #$100,$4(A2)
000381A4 <AmiBlitz3.ab2@12450>    BCS.w rongtypeerr
000381A6 <AmiBlitz3.ab2@12451>   MOVE.w D2,-(A7)
000381AA <AmiBlitz3.ab2@12452>    BSR.w getparameter2
000381AE <AmiBlitz3.ab2@12453>    BEQ.w syntaxerr
000381B0 <AmiBlitz3.ab2@12454>   ADDQ.w #4,A2
000381B4 <AmiBlitz3.ab2@12455>    BSR.w findvariable2
000381B8 <AmiBlitz3.ab2@12456>    BNE.w noofferr
000381BA <AmiBlitz3.ab2@12457>   MOVE.w (A7)+,D2
000381BC <AmiBlitz3.ab2@12458>   MOVEA.l A2,A3                                             ;pointer to offset
000381C0 <AmiBlitz3.ab2@12459>   MOVEA.l $A(A3),A2                                         ;pointer to type
000381C2 <AmiBlitz3.ab2@12460>   MOVEQ #0,d1
000381C6 <AmiBlitz3.ab2@12461>   MOVE.w 4(a3),d1
000381C8 <AmiBlitz3.ab2@12462>   ADD.l d1,d3
000381CE <AmiBlitz3.ab2@12464>   MOVE.l A3,lastoffset_org
000381D2 <AmiBlitz3.ab2@12465>   CMP.w #$5B,D0
000381D6 <AmiBlitz3.ab2@12466>    BNE.w calcvar__realdone
000381DC <AmiBlitz3.ab2@12467>   BTST #$1,$7(A3)
000381E0 <AmiBlitz3.ab2@12468>    BEQ.w rongtypeerr
000381E4 <AmiBlitz3.ab2@12469>    BSR.w JL_0_9004
000381E8 <AmiBlitz3.ab2@12470>   MOVEM.l A2-A3,-(A7)
000381EE <AmiBlitz3.ab2@12471>   MOVE.w varmode,-(A7)
000381F4 <AmiBlitz3.ab2@12472>   MOVE.l lastoffset_org,-(A7)
000381FA <AmiBlitz3.ab2@12473>   MOVE.w pusha2,D1
000381FE <AmiBlitz3.ab2@12474>    BSR.w writeword
00038200 <AmiBlitz3.ab2@12475>   MOVEQ.l #$03,D2                                          ;was 2 >32kb types
0003820A <AmiBlitz3.ab2@12476>   MOVE.l destpointer,deststore
0003820E <AmiBlitz3.ab2@12477>    BSR.w eval
00038212 <AmiBlitz3.ab2@12478>   CMP.w #$5D,D0
00038216 <AmiBlitz3.ab2@12479>    BNE.w syntaxerr
0003821C <AmiBlitz3.ab2@12480>   TST.b fast                                               ;a2,-(a7) array
00038220 <AmiBlitz3.ab2@12481>   BEQ calcvar__loop0_l10
00038226 <AmiBlitz3.ab2@12485>   MOVE.l destpointer,d1
0003822C <AmiBlitz3.ab2@12486>   SUB.l deststore,d1
00038232 <AmiBlitz3.ab2@12487>   CMP.l #4,d1
00038236 <AmiBlitz3.ab2@12488>   BNE calcvar__loop0_l10
0003823C <AmiBlitz3.ab2@12489>   MOVE.l destpointer,a4
00038242 <AmiBlitz3.ab2@12490>   MOVE.l -4(a4),-6(a4)
00038248 <AmiBlitz3.ab2@12491>   SUBQ.l #2,destpointer
0003824E <AmiBlitz3.ab2@12492>   CLR.l imm_addr
00038254 <AmiBlitz3.ab2@12493>   CLR.l load_var_addr
00038258 <AmiBlitz3.ab2@12494> BRA calcvar__loop0_l20
0003825E <AmiBlitz3.ab2@12497>   MOVE.w pulla2,D1
00038262 <AmiBlitz3.ab2@12498>    BSR.w writeword
00038268 <AmiBlitz3.ab2@12501>   MOVE.l (A7)+,lastoffset_org
0003826E <AmiBlitz3.ab2@12502>   MOVE.w (A7)+,varmode
00038272 <AmiBlitz3.ab2@12503>   MOVEM.l (A7)+,A2-A3
00038278 <AmiBlitz3.ab2@12509>   TST.w debugmode
0003827C <AmiBlitz3.ab2@12510>    BEQ.b calcvar__nobchk
00038280 <AmiBlitz3.ab2@12511>   MOVE.w $8(A3),D1
00038284 <AmiBlitz3.ab2@12512>    BEQ.b calcvar__nobchk                                   ;no [0] checks!
0003828A <AmiBlitz3.ab2@12516>   MOVE.w D1,brchkcode+2
00038290 <AmiBlitz3.ab2@12517>   MOVE.w regnum,D1
00038292 <AmiBlitz3.ab2@12518>   LSL.w #8,D1
00038294 <AmiBlitz3.ab2@12519>   LSL.w #1,D1
00038298 <AmiBlitz3.ab2@12520>   OR.w brchkcode0(PC),D1
0003829E <AmiBlitz3.ab2@12521>   MOVE.w D1,brchkcode
000382A2 <AmiBlitz3.ab2@12522>   MOVE.l brchkcode(PC),D1
000382A6 <AmiBlitz3.ab2@12523>    BSR.w writelong
000382AA <AmiBlitz3.ab2@12524>   MOVE.l brchkcode+4(PC),D1
000382AE <AmiBlitz3.ab2@12525>    BSR.w writelong
000382B2 <AmiBlitz3.ab2@12526>   MOVE.w brchkcode+8(PC),D1
000382B6 <AmiBlitz3.ab2@12527>    BSR.w writeword
000382B8 <AmiBlitz3.ab2@12530>   MOVEQ.l #$04,D1
000382BE <AmiBlitz3.ab2@12531>   BTST #$0,$7(A3)
000382C2 <AmiBlitz3.ab2@12532>    BNE.w calcvar__dothemul
000382C6 <AmiBlitz3.ab2@12533>   MOVE.w $8(A2),D1
000382CA <AmiBlitz3.ab2@12536>   BSR.w JL_0_B6DE
000382D0 <AmiBlitz3.ab2@12537>   MOVE.w addrega2,D1
000382D6 <AmiBlitz3.ab2@12538>   OR.w regnum,D1
000382DA <AmiBlitz3.ab2@12539>    OR.w #$100,d1                                           ;>32kb types
000382DE <AmiBlitz3.ab2@12540>    BSR.w writeword
000382E2 <AmiBlitz3.ab2@12541>    BSR.w get1bytemain
000382E4 <AmiBlitz3.ab2@12542>   MOVEQ.l #$00,D3
000382E8 <AmiBlitz3.ab2@12543>   MOVE.w #$8000,D2
000382EE <AmiBlitz3.ab2@12546>   BTST #$0,$7(A3)
000382F2 <AmiBlitz3.ab2@12547>    BNE.w calcvar__pointer
000382F6 <AmiBlitz3.ab2@12548> BRA.w calcvar__loop0
000382FA <AmiBlitz3.ab2@12552>  CMP.w #$5C,D0
000382FE <AmiBlitz3.ab2@12553>    BNE.w calcvar__done3
00038300 <AmiBlitz3.ab2@12554>   TST.w D3
00038304 <AmiBlitz3.ab2@12555>    BNE.w calcvar__pskip
0003830A <AmiBlitz3.ab2@12556>   MOVE.w movea0,D1
0003830E <AmiBlitz3.ab2@12557>    BSR.w writeword
00038312 <AmiBlitz3.ab2@12558> BRA.w calcvar__pmore
00038318 <AmiBlitz3.ab2@12561>   MOVE.w D3,movea0a0+2
0003831E <AmiBlitz3.ab2@12562>   MOVE.l movea0a0,D1
00038322 <AmiBlitz3.ab2@12563>    BSR.w writelong
00038328 <AmiBlitz3.ab2@12566>   BTST #$2,$7(A3)
0003832C <AmiBlitz3.ab2@12567>    BEQ.w calcvar__loopml
00038332 <AmiBlitz3.ab2@12568>   MOVE.l adda0a0,D1
00038336 <AmiBlitz3.ab2@12569>    BSR.w writelong
0003833A <AmiBlitz3.ab2@12570> BRA.w calcvar__loopml
0003833E <AmiBlitz3.ab2@12573>   BSET #$E,D2
00038344 <AmiBlitz3.ab2@12574>   BTST #$2,$7(A3)
00038348 <AmiBlitz3.ab2@12575>    BNE.w calcvar__done
0003834C <AmiBlitz3.ab2@12576>   BSET #$D,D2
00038354 <AmiBlitz3.ab2@12579>   CMPI.l #$100,$4(A2)
00038358 <AmiBlitz3.ab2@12580>    BCC.w calcvar__done2
0003835C <AmiBlitz3.ab2@12581>   MOVE.b $7(A2),D2
00038360 <AmiBlitz3.ab2@12584> BRA.w JL_0_9004
00038364 <AmiBlitz3.ab2@12587>   MOVE.w $6(A2),D2
00038368 <AmiBlitz3.ab2@12590>   MOVE.w $4(A3),D3
0003836E <AmiBlitz3.ab2@12591>   BTST #$0,$7(A3)
00038372 <AmiBlitz3.ab2@12592>    BEQ.w calcvar__nopoint
00038376 <AmiBlitz3.ab2@12593>   BSET #$E,D2
00038378 <AmiBlitz3.ab2@12596> RTS
0003837C <AmiBlitz3.ab2@12600> brchkcode0:  Dc.b $B0,$7C,$00,$00                          ;CMP.W   #$0000,D0
00038380 <AmiBlitz3.ab2@12601> brchkcode:   Dc.b $B0,$7C :             Dc.b $00,$00       ;CMP.W   #$0000,D0
00038382 <AmiBlitz3.ab2@12602>              Dc.b $65,$04                                  ;BCS.B   brchkcode__ok
00038384 <AmiBlitz3.ab2@12603>              Dc.b $70,$02                                  ;MOVEQ   #$02,D0
00038386 <AmiBlitz3.ab2@12604>              Dc.b $4E,$40                                  ;TRAP    #00
0003838C <AmiBlitz3.ab2@12612>   TST.w varmode
00038390 <AmiBlitz3.ab2@12613>    BEQ.w writeword
00038394 <AmiBlitz3.ab2@12614>   BCLR #$0,D1
00038398 <AmiBlitz3.ab2@12615> BRA.w writeword
0003839E <AmiBlitz3.ab2@12618>   TST.w varmode
000383A2 <AmiBlitz3.ab2@12619>    BEQ.w writeword
000383A6 <AmiBlitz3.ab2@12620>   BCLR #$9,D1
000383AA <AmiBlitz3.ab2@12621> BRA.w writeword
000383B0 <AmiBlitz3.ab2@12624>   TST.w proceduremode
000383B4 <AmiBlitz3.ab2@12625>    BEQ.w writelong
000383B8 <AmiBlitz3.ab2@12626>   BCLR #$19,D1
000383BC <AmiBlitz3.ab2@12627> BRA.w writelong
000383C2 <AmiBlitz3.ab2@12630>   TST.w varmode
000383C6 <AmiBlitz3.ab2@12631>   BEQ.w writelong
000383CA <AmiBlitz3.ab2@12632>   BCLR #$10,D1
000383D0 <AmiBlitz3.ab2@12635>   ADDQ.l #1,destpointer
000383D8 <AmiBlitz3.ab2@12636>   BCLR #$0,destpointer+3
000383DE <AmiBlitz3.ab2@12637>   MOVEA.l destpointer,A4
000383E4 <AmiBlitz3.ab2@12638>   CMPA.l destbufferend,A4
000383E8 <AmiBlitz3.ab2@12639>    BCC.w writeword__overa
000383EA <AmiBlitz3.ab2@12640>   MOVE.l D1,(A4)+
000383F0 <AmiBlitz3.ab2@12643>   MOVE.l A4,destpointer
000383F4 <AmiBlitz3.ab2@12644>   CMPA.l bigpc(PC),A4
000383F8 <AmiBlitz3.ab2@12645>    BHI.w writeword__nbp
000383FA <AmiBlitz3.ab2@12646> RTS
00038402 <AmiBlitz3.ab2@12649>   MOVE.w #$FFFF,dontwrite                                  ;#-1 org source
00038408 <AmiBlitz3.ab2@12650>   CLR.b fast
0003840E <AmiBlitz3.ab2@12651>   CLR.b fpu
00038414 <AmiBlitz3.ab2@12652>   CLR.b iee
00038416 <AmiBlitz3.ab2@12653>   ADDQ.w #4,A4
0003841A <AmiBlitz3.ab2@12654> BRA.w writeword__msa
00038420 <AmiBlitz3.ab2@12660>   ADDQ.l #1,destpointer
00038428 <AmiBlitz3.ab2@12661>   BCLR #$0,destpointer+3
0003842E <AmiBlitz3.ab2@12662>   MOVEA.l destpointer,A4
00038434 <AmiBlitz3.ab2@12663>   CMPA.l destbufferend,A4
00038438 <AmiBlitz3.ab2@12664>    BCC.w writeword__over
0003843A <AmiBlitz3.ab2@12665>   MOVE.w D1,(A4)+
00038440 <AmiBlitz3.ab2@12668>   MOVE.l A4,destpointer
00038444 <AmiBlitz3.ab2@12669>   CMPA.l bigpc(PC),A4
00038448 <AmiBlitz3.ab2@12670>    BHI.w writeword__nbp
0003844A <AmiBlitz3.ab2@12671> RTS
00038450 <AmiBlitz3.ab2@12674>   ADDQ.l #1,destpointer
00038458 <AmiBlitz3.ab2@12675>   BCLR #$0,destpointer+3
0003845E <AmiBlitz3.ab2@12676>   MOVEA.l destpointer,A4
00038464 <AmiBlitz3.ab2@12677>   CMPA.l destbufferend,A4
00038468 <AmiBlitz3.ab2@12678>    BCC.w writeword__over
0003846A <AmiBlitz3.ab2@12679>   MOVE.w D1,(A4)+
00038470 <AmiBlitz3.ab2@12680>   MOVE.l A4,destpointer
00038474 <AmiBlitz3.ab2@12681>   CMPA.l bigpc(PC),A4
00038478 <AmiBlitz3.ab2@12682>    BHI.w writeword__nbp
0003847A <AmiBlitz3.ab2@12683> RTS
00038480 <AmiBlitz3.ab2@12686>   TST.w cfetchmode
00038484 <AmiBlitz3.ab2@12687>   BNE.w writeword__nbp2
0003848A <AmiBlitz3.ab2@12688>   MOVE.l A4,bigpc
0003848C <AmiBlitz3.ab2@12691> RTS
00038494 <AmiBlitz3.ab2@12694>   MOVE.w #$FFFF,dontwrite                                  ;#-1 org source
00038496 <AmiBlitz3.ab2@12695>   ADDQ.w #2,A4
0003849C <AmiBlitz3.ab2@12696>   CLR.b fast
000384A2 <AmiBlitz3.ab2@12697>   CLR.b fpu
000384A8 <AmiBlitz3.ab2@12698>   CLR.b iee
000384AC <AmiBlitz3.ab2@12699> BRA.w writeword__ms
000384B2 <AmiBlitz3.ab2@12703>   MOVEA.l destpointer,A4
000384B8 <AmiBlitz3.ab2@12704>   CMPA.l destbufferend,A4
000384BC <AmiBlitz3.ab2@12705>    BCC.w writebyte__over
000384BE <AmiBlitz3.ab2@12706>   MOVE.b D1,(A4)+
000384C4 <AmiBlitz3.ab2@12709>   MOVE.l A4,destpointer
000384C8 <AmiBlitz3.ab2@12710>   CMPA.l bigpc(PC),A4
000384CC <AmiBlitz3.ab2@12711>    BHI.w writebyte__nbp
000384CE <AmiBlitz3.ab2@12712> RTS
000384D4 <AmiBlitz3.ab2@12715>   TST.w cfetchmode
000384D8 <AmiBlitz3.ab2@12716>    BNE.w writebyte__nbp2
000384DE <AmiBlitz3.ab2@12717>   MOVE.l A4,bigpc
000384E0 <AmiBlitz3.ab2@12720> RTS
000384E8 <AmiBlitz3.ab2@12723>   MOVE.w #-1,dontwrite
000384EA <AmiBlitz3.ab2@12724>   ADDQ.w #1,A4
000384F0 <AmiBlitz3.ab2@12725>   CLR.b fast
000384F6 <AmiBlitz3.ab2@12726>   CLR.b fpu
000384FC <AmiBlitz3.ab2@12727>   CLR.b iee
00038500 <AmiBlitz3.ab2@12728> BRA.w writebyte__ms
00038504 <AmiBlitz3.ab2@12731> bigpc:   Ds.l 1
00038506 <AmiBlitz3.ab2@12735>   MOVE.w (A0)+,D1
0003850A <AmiBlitz3.ab2@12736>   BSR.w writeword
0003850C <AmiBlitz3.ab2@12739>     CMPA.l A1,A0
00038510 <AmiBlitz3.ab2@12740>     BCC.w pokecode__done
00038512 <AmiBlitz3.ab2@12741>       MOVE.w (A0)+,D1
00038516 <AmiBlitz3.ab2@12742>       BSR.w writeword
0003851A <AmiBlitz3.ab2@12743> BRA.w pokecode__loop
0003851C <AmiBlitz3.ab2@12746> RTS
0003851E <AmiBlitz3.ab2@12749>   MOVE.w (A0)+,D1
00038522 <AmiBlitz3.ab2@12750>   BSR.w writeword
00038524 <AmiBlitz3.ab2@12751>   CMPA.l A1,A0
00038528 <AmiBlitz3.ab2@12752>   BCS.w pokecode2
0003852A <AmiBlitz3.ab2@12753> RTS
00038530 <AmiBlitz3.ab2@12759>   TST.b iniffcommand
00038534 <AmiBlitz3.ab2@12760>   BEQ 'l1
00038538 <AmiBlitz3.ab2@12761>     MOVE.w #$4880,D1
0003853E <AmiBlitz3.ab2@12762>     OR.w regnum,D1
00038542 <AmiBlitz3.ab2@12763>     BSR writeword
00038544 <AmiBlitz3.ab2@12766> RTS
00038548 <AmiBlitz3.ab2@12769>   BSR.w convert_byte_to_word
0003854E <AmiBlitz3.ab2@12772>   TST.b iee
00038552 <AmiBlitz3.ab2@12773>   BEQ 'old
00038556 <AmiBlitz3.ab2@12774>   CMP.b #5,d2
0003855A <AmiBlitz3.ab2@12775>   BEQ wtof
0003855E <AmiBlitz3.ab2@12778>   MOVE.w #$48C0,D1
00038564 <AmiBlitz3.ab2@12779>   OR.w regnum,D1
00038568 <AmiBlitz3.ab2@12780> BRA.w writeword
0003856A <AmiBlitz3.ab2@12783>   MOVEQ #0,d0
00038570 <AmiBlitz3.ab2@12784>   MOVE.w regnum,d0
00038572 <AmiBlitz3.ab2@12785>   ASL.l #7,d0
00038578 <AmiBlitz3.ab2@12786>   MOVE.l #$f2005000,d1
0003857A <AmiBlitz3.ab2@12787>   OR.l d0,d1
0003857C <AmiBlitz3.ab2@12788>   ASL.l #1,d0
0003857E <AmiBlitz3.ab2@12789>   ASL.l #8,d0
00038580 <AmiBlitz3.ab2@12790>   OR.l d0,d1
00038584 <AmiBlitz3.ab2@12791> BRA writelong
00038588 <AmiBlitz3.ab2@12795>   BSR.w convert_byte_to_word
0003858C <AmiBlitz3.ab2@12798>   MOVE.w #$4840,D1
00038592 <AmiBlitz3.ab2@12799>   OR.w regnum,D1
00038596 <AmiBlitz3.ab2@12800>    BSR.w writeword
0003859A <AmiBlitz3.ab2@12801>   MOVE.w #$4240,D1
000385A0 <AmiBlitz3.ab2@12802>   OR.w regnum,D1
000385A4 <AmiBlitz3.ab2@12803> BRA.w writeword
000385A8 <AmiBlitz3.ab2@12807>   CMP.w #$ffdc,d1
000385AC <AmiBlitz3.ab2@12808>   BNE 'negfpu
000385AE <AmiBlitz3.ab2@12809>   MOVEQ #0,d0
000385B4 <AmiBlitz3.ab2@12810>   MOVE.w regnum,d0
000385B6 <AmiBlitz3.ab2@12811>   ASL.l #7,d0
000385BC <AmiBlitz3.ab2@12812>   MOVE.l #$f2004000,d1
000385BE <AmiBlitz3.ab2@12813>   OR.l d0,d1
000385C0 <AmiBlitz3.ab2@12814>   ASL.l #1,d0
000385C2 <AmiBlitz3.ab2@12815>   ASL.l #8,d0
000385C4 <AmiBlitz3.ab2@12816>   OR.l d0,d1
000385C8 <AmiBlitz3.ab2@12817> BRA writelong
000385CA <AmiBlitz3.ab2@12821>   MOVEQ #0,d1
000385D0 <AmiBlitz3.ab2@12822>   MOVE.w regnum,d1                                         ;fpu neg
000385D2 <AmiBlitz3.ab2@12823>   ASL.l #7,d1
000385D8 <AmiBlitz3.ab2@12824>   OR.l #$f200001a,d1
000385DA <AmiBlitz3.ab2@12825>   MOVE.l d0,-(a7)
000385DC <AmiBlitz3.ab2@12826>   MOVEQ #0,d0
000385E2 <AmiBlitz3.ab2@12827>   MOVE.w regnum,d0
000385E4 <AmiBlitz3.ab2@12828>   ASL.l #8,d0
000385E6 <AmiBlitz3.ab2@12829>   ASL.l #2,d0
000385E8 <AmiBlitz3.ab2@12830>   OR.l d0,d1
000385EA <AmiBlitz3.ab2@12831>   MOVE.l (a7)+,d0
000385EE <AmiBlitz3.ab2@12832> BRA writelong
000385F4 <AmiBlitz3.ab2@12835>    TST.b iee
000385F8 <AmiBlitz3.ab2@12836>    BNE wtof
000385FC <AmiBlitz3.ab2@12837>    BSR.w convert_byte_to_long
00038600 <AmiBlitz3.ab2@12840>    MOVE.w #$FFDC,D1
00038606 <AmiBlitz3.ab2@12843>    TST.b iee
0003860A <AmiBlitz3.ab2@12844>    BNE ltof
00038610 <AmiBlitz3.ab2@12845>    MOVE.w D1,libjsr+2
00038614 <AmiBlitz3.ab2@12846>    BSR.w JL_0_AD40
00038616 <AmiBlitz3.ab2@12847>   MOVE.l D4,D1
0003861A <AmiBlitz3.ab2@12848>    BSR.w JL_0_AD38
0003861E <AmiBlitz3.ab2@12849>   MOVE.w #$C900,D1
00038622 <AmiBlitz3.ab2@12850>    BSR.w Atokejsr
00038626 <AmiBlitz3.ab2@12851>    BSR.w JL_0_A352
0003862C <AmiBlitz3.ab2@12852>   MOVE.l libjsr,D1
00038630 <AmiBlitz3.ab2@12853>    BSR.w writelong
00038634 <AmiBlitz3.ab2@12854>    BSR.w JL_0_A36E
00038636 <AmiBlitz3.ab2@12855>   MOVE.l D5,D1
0003863A <AmiBlitz3.ab2@12856> BRA.w JL_0_AD38
0003863C <AmiBlitz3.ab2@12859> RTS
00038640 <AmiBlitz3.ab2@12862>   MOVE.w #$C317,D1
00038646 <AmiBlitz3.ab2@12863>   TST.b typecheck
0003864A <AmiBlitz3.ab2@12864>   BEQ 'l1
00038650 <AmiBlitz3.ab2@12865>    TST.b notypecheck
00038654 <AmiBlitz3.ab2@12866>    BNE 'l1
0003865A <AmiBlitz3.ab2@12867>    TST.l lasttoken
0003865E <AmiBlitz3.ab2@12868>    BEQ typeerror
00038664 <AmiBlitz3.ab2@12872>   TST.b debugmode
00038668 <AmiBlitz3.ab2@12873>    BEQ.w JL_0_9696
00038670 <AmiBlitz3.ab2@12874>   BTST #$7,overflowcheck
00038674 <AmiBlitz3.ab2@12875>    BEQ.w JL_0_9696
0003867A <AmiBlitz3.ab2@12876>   TST.w cfetchmode
0003867E <AmiBlitz3.ab2@12877>    BNE.w JL_0_9696
00038684 <AmiBlitz3.ab2@12878>   TST.w regnum
00038688 <AmiBlitz3.ab2@12879>    BEQ.w JL_0_968A
0003868A <AmiBlitz3.ab2@12880>   MOVE.w D1,-(A7)
0003868E <AmiBlitz3.ab2@12881>   MOVE.w JL_0_9698(PC),D1
00038692 <AmiBlitz3.ab2@12882>    BSR.w writeword
00038698 <AmiBlitz3.ab2@12883>   MOVE.w regnum,D1
0003869C <AmiBlitz3.ab2@12884>   OR.w L_0_969C(PC),D1
000386A0 <AmiBlitz3.ab2@12885>    BSR.w writeword
000386A2 <AmiBlitz3.ab2@12886>   MOVE.w (A7)+,D1
000386A6 <AmiBlitz3.ab2@12887>    BSR.w JL_0_968A
000386AA <AmiBlitz3.ab2@12888>   MOVE.w L_0_969A(PC),D1
000386AE <AmiBlitz3.ab2@12889> BRA.w writeword
000386B2 <AmiBlitz3.ab2@12893>   MOVEM.l D0-D7/A0-A6,-(A7)
000386B6 <AmiBlitz3.ab2@12894>    BSR.w Atokejsr
000386BA <AmiBlitz3.ab2@12895>   MOVEM.l (A7)+,D0-D7/A0-A6
000386BC <AmiBlitz3.ab2@12898> RTS
000386BE <AmiBlitz3.ab2@12901>   MOVE.l D0,-(A7)
000386C0 <AmiBlitz3.ab2@12904>   MOVE.l (A7)+,D0
000386C2 <AmiBlitz3.ab2@12907>   MOVE.l D0,D0
000386C6 <AmiBlitz3.ab2@12910>   BSR.w convert_word_to_long
000386CC <AmiBlitz3.ab2@12911>   TST.b iee
000386D0 <AmiBlitz3.ab2@12912>   BEQ 'old
000386D4 <AmiBlitz3.ab2@12913>   CMP.b #5,d2
000386D8 <AmiBlitz3.ab2@12914>   BNE 'old
000386DA <AmiBlitz3.ab2@12915> RTS
000386DE <AmiBlitz3.ab2@12918> BRA.w JL_0_9600
000386E2 <AmiBlitz3.ab2@12922>   MOVE.w #$C316,D1
000386E8 <AmiBlitz3.ab2@12923>   TST.b typecheck
000386EC <AmiBlitz3.ab2@12924>   BEQ 'l1
000386F2 <AmiBlitz3.ab2@12925>   TST.b peekaddrsize
000386F6 <AmiBlitz3.ab2@12926>   BNE 'l1
000386FC <AmiBlitz3.ab2@12927>   TST.b notypecheck
00038700 <AmiBlitz3.ab2@12928>   BNE 'l1
00038706 <AmiBlitz3.ab2@12929>   TST.l lasttoken
0003870A <AmiBlitz3.ab2@12930>   BEQ typeerror
0003870E <AmiBlitz3.ab2@12933> BRA.w JL_0_963A
00038712 <AmiBlitz3.ab2@12937>   MOVE.w #$C318,D1
00038718 <AmiBlitz3.ab2@12938>   TST.b typecheck
0003871C <AmiBlitz3.ab2@12939>   BEQ 'l1
00038722 <AmiBlitz3.ab2@12940>   TST.b peekaddrsize
00038726 <AmiBlitz3.ab2@12941>   BNE 'l1
0003872C <AmiBlitz3.ab2@12942>   TST.b notypecheck
00038730 <AmiBlitz3.ab2@12943>   BNE 'l1
00038736 <AmiBlitz3.ab2@12944>   TST.l lasttoken
0003873A <AmiBlitz3.ab2@12945>   BEQ typeerror
0003873E <AmiBlitz3.ab2@12948> BRA.w JL_0_963A
00038742 <AmiBlitz3.ab2@12952>   MOVE.w #$C318,D1
00038748 <AmiBlitz3.ab2@12953>   TST.b typecheck
0003874C <AmiBlitz3.ab2@12954>   BEQ 'l1
00038752 <AmiBlitz3.ab2@12955>   TST.b notypecheck
00038756 <AmiBlitz3.ab2@12956>   BNE 'l1
0003875C <AmiBlitz3.ab2@12957>   TST.l lasttoken
00038760 <AmiBlitz3.ab2@12958>   BEQ typeerror
00038764 <AmiBlitz3.ab2@12961>   BSR.w JL_0_963A
00038768 <AmiBlitz3.ab2@12962> BRA.w convert_word_to_quick
0003876C <AmiBlitz3.ab2@12966> BRA.w JL_0_9600
0003876E <AmiBlitz3.ab2@12970> RTS
00038772 <AmiBlitz3.ab2@12974>   MOVE.w #$C319,D1
00038778 <AmiBlitz3.ab2@12975>   TST.b typecheck
0003877C <AmiBlitz3.ab2@12976>   BEQ 'l1
00038782 <AmiBlitz3.ab2@12977>   TST.b notypecheck
00038786 <AmiBlitz3.ab2@12978>   BNE 'l1
0003878C <AmiBlitz3.ab2@12979>   TST.l lasttoken
00038790 <AmiBlitz3.ab2@12980>   BEQ typeerror
00038794 <AmiBlitz3.ab2@12983>   BSR.w JL_0_963A
00038798 <AmiBlitz3.ab2@12986>   MOVE.w #$4240,D1
0003879E <AmiBlitz3.ab2@12987>   OR.w regnum,D1
000387A2 <AmiBlitz3.ab2@12988>   BSR.w writeword
000387A6 <AmiBlitz3.ab2@12989>   MOVE.w #$4840,D1
000387AC <AmiBlitz3.ab2@12990>   OR.w regnum,D1
000387B0 <AmiBlitz3.ab2@12991> BRA.w writeword
000387B4 <AmiBlitz3.ab2@12995> BRA.w JL_0_96D0
000387B8 <AmiBlitz3.ab2@12999>   BSR.w JL_0_96D0
000387BC <AmiBlitz3.ab2@13000> BRA.w convert_word_to_long
000387BE <AmiBlitz3.ab2@13005>   MOVEQ #0,d0
000387C4 <AmiBlitz3.ab2@13006>   MOVE.w regnum,d0
000387C6 <AmiBlitz3.ab2@13007>   ASL.l #7,d0
000387CC <AmiBlitz3.ab2@13008>   MOVE.l #$f2004000,d1
000387CE <AmiBlitz3.ab2@13009>   OR.l d0,d1
000387D0 <AmiBlitz3.ab2@13010>   ASL.l #1,d0
000387D2 <AmiBlitz3.ab2@13011>   ASL.l #8,d0
000387D4 <AmiBlitz3.ab2@13012>   OR.l d0,d1
000387D8 <AmiBlitz3.ab2@13013>   BSR writelong
000387DE <AmiBlitz3.ab2@13014>   MOVE.w regnum,d0
000387E0 <AmiBlitz3.ab2@13015>   ASL.l #7,d0
000387E6 <AmiBlitz3.ab2@13016>   MOVE.l #$f23c4423,d1                                     ;fmul.s #1/65536,fpreg
000387E8 <AmiBlitz3.ab2@13017>   OR.w d0,d1
000387EC <AmiBlitz3.ab2@13018>   BSR writelong
000387F2 <AmiBlitz3.ab2@13019>   MOVE.l #$37800000,d1
000387F6 <AmiBlitz3.ab2@13020>   BSR writelong
000387F8 <AmiBlitz3.ab2@13021> RTS
000387FE <AmiBlitz3.ab2@13025>   TST.b iee
00038802 <AmiBlitz3.ab2@13026>   BNE qtof
00038806 <AmiBlitz3.ab2@13027>   MOVE.w #$D300,D1
00038808 <AmiBlitz3.ab2@13030>   MOVE.w D1,-(A7)
0003880C <AmiBlitz3.ab2@13031>    BSR.w JL_0_AD40
0003880E <AmiBlitz3.ab2@13032>   MOVE.l D4,D1
00038812 <AmiBlitz3.ab2@13033>    BSR.w JL_0_AD38
00038816 <AmiBlitz3.ab2@13034>    BSR.w JL_0_A352
00038818 <AmiBlitz3.ab2@13035>   MOVE.w (A7)+,D1
0003881C <AmiBlitz3.ab2@13036>    BSR.w Atokejsr
00038820 <AmiBlitz3.ab2@13037>    BSR.w JL_0_A36E
00038822 <AmiBlitz3.ab2@13038>   MOVE.l D5,D1
00038826 <AmiBlitz3.ab2@13039> BRA.w JL_0_AD38
00038828 <AmiBlitz3.ab2@13043> RTS
0003882E <AmiBlitz3.ab2@13046>   TST.b typecheck
00038832 <AmiBlitz3.ab2@13047>   BEQ 'l1
00038838 <AmiBlitz3.ab2@13048>   TST.b notypecheck
0003883C <AmiBlitz3.ab2@13049>   BNE 'l1
00038842 <AmiBlitz3.ab2@13050>   TST.l lasttoken
00038846 <AmiBlitz3.ab2@13051>   BEQ typeerror
0003884C <AmiBlitz3.ab2@13054>   TST.b iee
00038850 <AmiBlitz3.ab2@13055>   BNE ftol
00038854 <AmiBlitz3.ab2@13056>   MOVE.w #$C31A,D1
00038858 <AmiBlitz3.ab2@13057>   BSR.w JL_0_963A
0003885C <AmiBlitz3.ab2@13058>   BSR.w JL_0_974A
00038860 <AmiBlitz3.ab2@13059> BRA.w convert_long_to_byte
00038862 <AmiBlitz3.ab2@13063> RTS
00038868 <AmiBlitz3.ab2@13066>   TST.b typecheck
0003886C <AmiBlitz3.ab2@13067>   BEQ 'l1
00038872 <AmiBlitz3.ab2@13068>   TST.b notypecheck
00038876 <AmiBlitz3.ab2@13069>   BNE 'l1
0003887C <AmiBlitz3.ab2@13070>   TST.l lasttoken
00038880 <AmiBlitz3.ab2@13071>   BEQ typeerror
00038886 <AmiBlitz3.ab2@13074>   TST.b iee
0003888A <AmiBlitz3.ab2@13075>   BNE ftol
0003888E <AmiBlitz3.ab2@13076>   MOVE.w #$C31B,D1
00038892 <AmiBlitz3.ab2@13077>   BSR.w JL_0_963A
00038896 <AmiBlitz3.ab2@13078>   BSR.w JL_0_974A
0003889A <AmiBlitz3.ab2@13079> BRA.w convert_long_to_word
0003889C <AmiBlitz3.ab2@13083> RTS
000388A2 <AmiBlitz3.ab2@13086>   TST.b iee
000388A6 <AmiBlitz3.ab2@13087>   BNE ftol
000388AA <AmiBlitz3.ab2@13088>   MOVE.w #$C31C,D1
000388AE <AmiBlitz3.ab2@13089>   BSR.w JL_0_963A
000388B2 <AmiBlitz3.ab2@13092>   MOVE.w #$FFE2,D1
000388B6 <AmiBlitz3.ab2@13093> BRA.w JL_0_9604
000388B8 <AmiBlitz3.ab2@13096>   MOVE.l d0,-(a7)
000388BA <AmiBlitz3.ab2@13097>   MOVEQ #0,d0
000388C0 <AmiBlitz3.ab2@13098>   MOVE.w regnum,d0
000388C2 <AmiBlitz3.ab2@13099>   ASL.l #7,d0
000388C8 <AmiBlitz3.ab2@13100>   MOVE.l #$f2006000,d1
000388CA <AmiBlitz3.ab2@13101>   OR.l d0,d1
000388CC <AmiBlitz3.ab2@13102>   ASL.l #1,d0
000388CE <AmiBlitz3.ab2@13103>   ASL.l #8,d0
000388D0 <AmiBlitz3.ab2@13104>   OR.l d0,d1
000388D2 <AmiBlitz3.ab2@13105>   MOVE.l (a7)+,d0
000388D6 <AmiBlitz3.ab2@13106> BRA writelong
000388D8 <AmiBlitz3.ab2@13110>   MOVE.l d0,-(a7)
000388DA <AmiBlitz3.ab2@13111>   MOVEQ #0,d0
000388E0 <AmiBlitz3.ab2@13112>   MOVE.l #$f23c4023,d1
000388E6 <AmiBlitz3.ab2@13113>   MOVE.w regnum,d0
000388E8 <AmiBlitz3.ab2@13114>   ASL.l #7,d0
000388EA <AmiBlitz3.ab2@13115>   OR.l d0,d1
000388EE <AmiBlitz3.ab2@13116>   BSR writelong
000388F4 <AmiBlitz3.ab2@13117>   MOVE.l #$00010000,d1
000388F8 <AmiBlitz3.ab2@13118>   BSR writelong
000388FE <AmiBlitz3.ab2@13119>   MOVE.w regnum,d0
00038900 <AmiBlitz3.ab2@13120>   ASL.l #7,d0
00038906 <AmiBlitz3.ab2@13121>   MOVE.l #$f2006000,d1
00038908 <AmiBlitz3.ab2@13122>   OR.l d0,d1
0003890A <AmiBlitz3.ab2@13123>   ASL.l #1,d0
0003890C <AmiBlitz3.ab2@13124>   ASL.l #8,d0
0003890E <AmiBlitz3.ab2@13125>   OR.l d0,d1
00038912 <AmiBlitz3.ab2@13126>   BSR writelong
00038914 <AmiBlitz3.ab2@13127>   MOVE.l (a7)+,d0
00038916 <AmiBlitz3.ab2@13128> RTS
00038918 <AmiBlitz3.ab2@13132> RTS
0003891E <AmiBlitz3.ab2@13136>   TST.b iee
00038922 <AmiBlitz3.ab2@13137>   BNE ftoq
00038926 <AmiBlitz3.ab2@13138>   MOVE.w #$C31B,D1
0003892A <AmiBlitz3.ab2@13139>   BSR.w JL_0_963A
0003892E <AmiBlitz3.ab2@13140>   MOVE.w #$D301,D1
00038932 <AmiBlitz3.ab2@13141> BRA.w JL_0_96FC
00038938 <AmiBlitz3.ab2@13146>    TST.l lasttoken
0003893C <AmiBlitz3.ab2@13147>    BNE 'l1
00038940 <AmiBlitz3.ab2@13148> BRA error_convert_types
00038948 <AmiBlitz3.ab2@13151>   CMP.b #2,optistring
0003894C <AmiBlitz3.ab2@13152>   BEQ JLrts
00038952 <AmiBlitz3.ab2@13153>   MOVE.w stol,D1
00038956 <AmiBlitz3.ab2@13154>   BSR.w writeword
0003895E <AmiBlitz3.ab2@13155>   CMPI.w #$2,sbgot
00038962 <AmiBlitz3.ab2@13156>   BCS.w sbtolong
00038966 <AmiBlitz3.ab2@13157>   MOVE.w ceos(PC),D1
0003896A <AmiBlitz3.ab2@13158>   BSR.w writeword
00038970 <AmiBlitz3.ab2@13161>   MOVE.w regnum,D1
00038972 <AmiBlitz3.ab2@13162>   LSL.w #8,D1
00038974 <AmiBlitz3.ab2@13163>   LSL.w #1,D1
0003897C <AmiBlitz3.ab2@13164>   CMPI.w #$2,sbgot
00038980 <AmiBlitz3.ab2@13165>   BCS.w JL_0_98E8
00038986 <AmiBlitz3.ab2@13166>   MOVE.w a2offset,D3
0003898C <AmiBlitz3.ab2@13167>   SUB.w thisstuse,D3
00038990 <AmiBlitz3.ab2@13168>   CMP.w #$6,D3
00038994 <AmiBlitz3.ab2@13169>   BNE.w JL_0_98D4b
0003899A <AmiBlitz3.ab2@13170>   OR.w movestst2,D1
0003899E <AmiBlitz3.ab2@13171>   BSR.w writeword
000389A4 <AmiBlitz3.ab2@13172>   LEA movestst2+2,A0
000389AA <AmiBlitz3.ab2@13173>   LEA movestst2f,A1
000389AE <AmiBlitz3.ab2@13174> BRA.w pokecode2
000389B4 <AmiBlitz3.ab2@13178>   OR.w movea7dn,D1
000389B8 <AmiBlitz3.ab2@13179>   BSR.w writeword
000389BE <AmiBlitz3.ab2@13180>   MOVE.l #0,D1
000389C2 <AmiBlitz3.ab2@13181> BRA.w writeword
000389C8 <AmiBlitz3.ab2@13185>   ADDQ.w #1,fuckpos
000389CC <AmiBlitz3.ab2@13186>   BSR.w writeconvertcode
000389D2 <AmiBlitz3.ab2@13187>   SUBQ.w #1,fuckpos
000389D4 <AmiBlitz3.ab2@13189> RTS
000389D6 <AmiBlitz3.ab2@13193>   MOVE.w D3,D1
000389D8 <AmiBlitz3.ab2@13194>   SUBQ.w #1,D1
000389DC <AmiBlitz3.ab2@13195>   MULU #$7,D1
000389DE <AmiBlitz3.ab2@13196>   ADD.w D2,D1
000389E0 <AmiBlitz3.ab2@13197>   SUBQ.w #1,D1
000389E2 <AmiBlitz3.ab2@13198>   LSL.w #2,D1
000389E8 <AmiBlitz3.ab2@13199>   LEA convtable,A0
000389EC <AmiBlitz3.ab2@13200>   MOVE.l $0(A0,D1.W),D1
000389F0 <AmiBlitz3.ab2@13201>   BEQ.w JL_0_97A2
000389F2 <AmiBlitz3.ab2@13202>     MOVEA.l D1,A0
000389F6 <AmiBlitz3.ab2@13203>     CMP.b #$ff,d3
000389FA <AmiBlitz3.ab2@13204>     BEQ JL_0_97A2
000389FC <AmiBlitz3.ab2@13205> JMP (A0)
000389FE <AmiBlitz3.ab2@13208> RTS
00038A02 <AmiBlitz3.ab2@13211> usedfrom:  Ds.l 1
00038A06 <AmiBlitz3.ab2@13218>   CMP.w #"\",D0
00038A0A <AmiBlitz3.ab2@13219>   BNE.w JL_0_97C2
00038A0E <AmiBlitz3.ab2@13220>     CMP.b #"\",(a5)
00038A12 <AmiBlitz3.ab2@13221>     BNE 'first
00038A18 <AmiBlitz3.ab2@13222>       MOVE.l A5,usedfrom
00038A1E <AmiBlitz3.ab2@13223>       LEA path2,A5
00038A22 <AmiBlitz3.ab2@13224> BRA 'g1
00038A24 <AmiBlitz3.ab2@13227>     SUBQ.w #1,A5
00038A2A <AmiBlitz3.ab2@13228>   MOVE.l A5,usedfrom
00038A30 <AmiBlitz3.ab2@13229>   LEA usedpath,A5                                          ;read path
00038A34 <AmiBlitz3.ab2@13232>   BSR.w get1bytemain
00038A3A <AmiBlitz3.ab2@13235>   CLR.w flagmask
00038A3E <AmiBlitz3.ab2@13236>   CMP.w #$2A,D0
00038A42 <AmiBlitz3.ab2@13237>    BNE.w JL_0_983A
00038A4A <AmiBlitz3.ab2@13238>   MOVE.w #$0001,flagmask
00038A4E <AmiBlitz3.ab2@13240>    BSR.w getparameter2
00038A52 <AmiBlitz3.ab2@13243>    BEQ.w syntaxerr
00038A56 <AmiBlitz3.ab2@13244>   CMP.w #$28,D0
00038A5A <AmiBlitz3.ab2@13245>    BEQ.w JL_0_9830
00038A5E <AmiBlitz3.ab2@13246>   CMP.w #$2E,D0
00038A62 <AmiBlitz3.ab2@13247>    BEQ.w JL_0_980C
00038A66 <AmiBlitz3.ab2@13248>   CMP.w #$24,D0
00038A6A <AmiBlitz3.ab2@13249>    BNE.w JL_0_9838
00038A72 <AmiBlitz3.ab2@13250>   ORI.w #$8,flagmask
00038A76 <AmiBlitz3.ab2@13251>    BSR.w storeloc
00038A7A <AmiBlitz3.ab2@13252>    BSR.w get1bytemain
00038A7E <AmiBlitz3.ab2@13253> BRA.w JL_0_9822
00038A82 <AmiBlitz3.ab2@13257>   BSR.w storeloc
00038A84 <AmiBlitz3.ab2@13258>   MOVE.w D2,-(A7)
00038A8A <AmiBlitz3.ab2@13259>   LEA namebuff2,A1
00038A8E <AmiBlitz3.ab2@13260>    BSR.w makename3
00038A92 <AmiBlitz3.ab2@13261>    BEQ.w syntaxerr
00038A94 <AmiBlitz3.ab2@13262>   MOVE.w (A7)+,D2
00038A96 <AmiBlitz3.ab2@13265>    MOVE.w D0,D1
00038A9A <AmiBlitz3.ab2@13266>    BSR.w resloc
00038A9E <AmiBlitz3.ab2@13267>    CMP.w #$28,D1
00038AA2 <AmiBlitz3.ab2@13268>    BNE.w JL_0_9838
00038AAA <AmiBlitz3.ab2@13271>   ORI.w #$2,flagmask
00038AAC <AmiBlitz3.ab2@13274> RTS
00038AB0 <AmiBlitz3.ab2@13278>   CMP.w #$40,D0
00038AB4 <AmiBlitz3.ab2@13279>    BNE.w JL_0_984E
00038ABC <AmiBlitz3.ab2@13280>   MOVE.w #$0005,flagmask
00038AC0 <AmiBlitz3.ab2@13281> BRA.w JL_0_97D8
00038AC4 <AmiBlitz3.ab2@13285>   BSR.w makename2
00038AC8 <AmiBlitz3.ab2@13286> BRA.w JL_0_97DC
00038ACC <AmiBlitz3.ab2@13290>   MOVE.w #$FED3,D1
00038AD0 <AmiBlitz3.ab2@13291>    BSR.w uselib
00038AD6 <AmiBlitz3.ab2@13292>   LEA pusha3,A0
00038ADC <AmiBlitz3.ab2@13293>   LEA pusha3f,A1
00038AE0 <AmiBlitz3.ab2@13294> BRA.w pokecode
00038AE4 <AmiBlitz3.ab2@13298>   MOVE.w #$FED3,D1
00038AE8 <AmiBlitz3.ab2@13299>    BSR.w uselib
00038AEE <AmiBlitz3.ab2@13300>   LEA pulla3,A0
00038AF4 <AmiBlitz3.ab2@13301>   LEA pulla3f,A1
00038AF8 <AmiBlitz3.ab2@13302> BRA.w pokecode
00038AFA <AmiBlitz3.ab2@13306> ceos:   Dc.b $42,$1B                                       ;CLR.B   (A3)+             ;*!
00038B02 <AmiBlitz3.ab2@13311>     CMP.b #2,optistring
00038B06 <AmiBlitz3.ab2@13312>    BEQ 'l10
00038B0A <AmiBlitz3.ab2@13313>    MOVE.w ceos(PC),D1
00038B0E <AmiBlitz3.ab2@13314>    BSR.w writeword                                         ;clr.b (a3)
00038B14 <AmiBlitz3.ab2@13317>   MOVE.w regnum,D1
00038B16 <AmiBlitz3.ab2@13318>   LSL.w #8,D1
00038B18 <AmiBlitz3.ab2@13319>   LSL.w #1,D1
00038B20 <AmiBlitz3.ab2@13320>   CMPI.w #$2,sbgot
00038B24 <AmiBlitz3.ab2@13321>    BCS.w JL_0_98E8
00038B2A <AmiBlitz3.ab2@13322>   MOVE.w a2offset,D3                                       ;stackuse,d3 org source
00038B30 <AmiBlitz3.ab2@13323>   SUB.w thisstuse,D3
00038B34 <AmiBlitz3.ab2@13324>   CMP.w #$6,D3
00038B38 <AmiBlitz3.ab2@13325>    BNE.w JL_0_98D4
00038B3E <AmiBlitz3.ab2@13326>   OR.w movestst2,D1
00038B42 <AmiBlitz3.ab2@13327>    BSR.w writeword
00038B48 <AmiBlitz3.ab2@13328>   LEA movestst2+2,A0
00038B4E <AmiBlitz3.ab2@13329>   LEA movestst2f,A1
00038B52 <AmiBlitz3.ab2@13330> BRA.w pokecode2
00038B58 <AmiBlitz3.ab2@13334>    OR.w movea7dn,D1
00038B5C <AmiBlitz3.ab2@13335>    BSR.w writeword
00038B62 <AmiBlitz3.ab2@13336>   MOVE.l movea7dn+2,D1
00038B66 <AmiBlitz3.ab2@13348>   BSR writelong
00038B6E <AmiBlitz3.ab2@13351>    CMP.w #6,regnum
00038B72 <AmiBlitz3.ab2@13352>    BEQ 'l1
00038B78 <AmiBlitz3.ab2@13353>    TST.w stackpar
00038B7C <AmiBlitz3.ab2@13354>    BNE 'l1
00038B82 <AmiBlitz3.ab2@13355>    TST.b funcparloop
00038B86 <AmiBlitz3.ab2@13356>    BEQ 'l1
00038B8C <AmiBlitz3.ab2@13357>    MOVE.l #$48780000,d1
00038B90 <AmiBlitz3.ab2@13358>    BSR writelong
00038B92 <AmiBlitz3.ab2@13362> RTS
00038B94 <AmiBlitz3.ab2@13367>      MOVE.l d1,-(a7)
00038B9C <AmiBlitz3.ab2@13368>      CMP.w #6,regnum
00038BA0 <AmiBlitz3.ab2@13369>      BEQ 'l1
00038BA6 <AmiBlitz3.ab2@13370>      TST.w stackpar
00038BAA <AmiBlitz3.ab2@13371>      BNE 'l1
00038BB0 <AmiBlitz3.ab2@13372>      TST.b funcparloop
00038BB4 <AmiBlitz3.ab2@13373>      BEQ 'l1
00038BBA <AmiBlitz3.ab2@13374>      MOVE.l #$48780000,d1
00038BBE <AmiBlitz3.ab2@13375>      BSR writelong
00038BC0 <AmiBlitz3.ab2@13378>      MOVE.l (a7)+,d1
00038BC6 <AmiBlitz3.ab2@13380>    OR.w movestdn,D1
00038BCA <AmiBlitz3.ab2@13381>    BSR.w writeword
00038BCE <AmiBlitz3.ab2@13382>   MOVE.w #$FED3,D1
00038BD2 <AmiBlitz3.ab2@13383>    BSR.w uselib
00038BD6 <AmiBlitz3.ab2@13384>   MOVE.w $A(A1),D1
00038BDA <AmiBlitz3.ab2@13385> BRA.w writeword
00038BDC <AmiBlitz3.ab2@13388> unknown:    Ds.w 1
00038BE2 <AmiBlitz3.ab2@13391> somecode:   Dc.b $0C,$80,$00,$01,$00,$00                   ;CMPI.L  #$00010000,D0
00038BE6 <AmiBlitz3.ab2@13392> somecode2:  Dc.b $65,$00,$00,$08                           ;BCS.W   codeisok
00038BEC <AmiBlitz3.ab2@13393>             Dc.b $4E,$B9,$00,$00,$00,$00                   ;JSR $00000000
00038BF2 <AmiBlitz3.ab2@13399>   TST.b debugmode
00038BF6 <AmiBlitz3.ab2@13400>   BEQ.w sharreval
00038BFA <AmiBlitz3.ab2@13401>  BSR.w arreval
00038BFE <AmiBlitz3.ab2@13404>   MOVE.w somecode(PC),D1
00038C04 <AmiBlitz3.ab2@13405>   OR.w regnum,D1
00038C08 <AmiBlitz3.ab2@13406>    BSR.w writeword
00038C0A <AmiBlitz3.ab2@13407>   MOVEQ.l #$01,D1
00038C0C <AmiBlitz3.ab2@13408>   SWAP D1
00038C10 <AmiBlitz3.ab2@13409>    BSR.w writelong
00038C14 <AmiBlitz3.ab2@13410>   MOVE.l somecode2(PC),D1
00038C18 <AmiBlitz3.ab2@13411>    BSR.w writelong
00038C1C <AmiBlitz3.ab2@13412>   MOVE.w #$C309,D1
00038C20 <AmiBlitz3.ab2@13413> BRA.w Atokejsr
00038C22 <AmiBlitz3.ab2@13417>   MOVEQ.l #$02,D2
00038C24 <AmiBlitz3.ab2@13418>   MOVEQ.l #$00,D1
00038C26 <AmiBlitz3.ab2@13419>   MOVEQ.l #$00,D3
00038C2A <AmiBlitz3.ab2@13420> BRA.w maineval2
00038C2C <AmiBlitz3.ab2@13424>   MOVEQ.l #$03,D2
00038C2E <AmiBlitz3.ab2@13425>   MOVEQ.l #$00,D1
00038C30 <AmiBlitz3.ab2@13426>   MOVEQ.l #$00,D3
00038C34 <AmiBlitz3.ab2@13427> BRA.w maineval2
00038C3E <AmiBlitz3.ab2@13432>   MOVE.w oldqflag,instringon
00038C44 <AmiBlitz3.ab2@13433>   MOVEA.l lastsourcepos,A5
00038C46 <AmiBlitz3.ab2@13434>   MOVEQ.l #-$01,D1
00038C48 <AmiBlitz3.ab2@13435>   MOVEQ.l #-$01,D3
00038C4C <AmiBlitz3.ab2@13436> BRA.w peval
00038C56 <AmiBlitz3.ab2@13441>   MOVE.w oldqflag,instringon
00038C5C <AmiBlitz3.ab2@13442>   MOVEA.l lastsourcepos,A5
00038C5E <AmiBlitz3.ab2@13445>   MOVEQ.l #-$01,D1
00038C60 <AmiBlitz3.ab2@13446>   MOVEQ.l #$00,D3
00038C64 <AmiBlitz3.ab2@13447> BRA.w maineval
00038C6E <AmiBlitz3.ab2@13452>   MOVE.w oldqflag,instringon
00038C74 <AmiBlitz3.ab2@13453>   MOVEA.l lastsourcepos,A5
00038C76 <AmiBlitz3.ab2@13454>   MOVEQ.l #$00,D1
00038C78 <AmiBlitz3.ab2@13455>   MOVEQ.l #-$01,D3
00038C7C <AmiBlitz3.ab2@13456> BRA.w maineval
00038C7E <AmiBlitz3.ab2@13460>   MOVEQ.l #$01,D1
00038C80 <AmiBlitz3.ab2@13461>   MOVEQ.l #-$01,D3
00038C84 <AmiBlitz3.ab2@13462> BRA.w maineval
00038C8E <AmiBlitz3.ab2@13467>   MOVE.w oldqflag,instringon
00038C94 <AmiBlitz3.ab2@13468>   MOVEA.l lastsourcepos,A5
00038C96 <AmiBlitz3.ab2@13471>   MOVEQ.l #$00,D1                                        ;no push
00038C98 <AmiBlitz3.ab2@13472>   MOVEQ.l #$00,D3
00038CA0 <AmiBlitz3.ab2@13491>    CMPI.w #$6,regnum
00038CA4 <AmiBlitz3.ab2@13492>    BCS.w maineval2
00038CA6 <AmiBlitz3.ab2@13493>    MOVEQ #0,d1
00038CAC <AmiBlitz3.ab2@13494>    MOVE.l destpointer,a4
00038CB2 <AmiBlitz3.ab2@13496>    CMPA.l destbufferend,A4
00038CB6 <AmiBlitz3.ab2@13497>    BCC.w maineval__l2
00038CBC <AmiBlitz3.ab2@13499>    CMP.w #$2f0a,-2(a4)                                    ;bug is a move.l a2,-(a7) before (show temp calc)?
00038CC0 <AmiBlitz3.ab2@13501>    BNE maineval__l2
00038CC4 <AmiBlitz3.ab2@13505> BRA maineval__l1
00038CC6 <AmiBlitz3.ab2@13508>   MOVEQ.l #-$01,D1
00038CCE <AmiBlitz3.ab2@13511>   MOVE.w #$0006,regnum                                     ;write a func par To stack
00038CD4 <AmiBlitz3.ab2@13514>   MOVE.w thisstuse,-(A7)
00038CDE <AmiBlitz3.ab2@13515>   MOVE.w a2offset,thisstuse
00038CE4 <AmiBlitz3.ab2@13516>   MOVE.w stackpar,-(A7)
00038CEA <AmiBlitz3.ab2@13517>   MOVE.w D1,stackpar
00038CF0 <AmiBlitz3.ab2@13518>   MOVE.w sbgot,-(A7)
00038CF6 <AmiBlitz3.ab2@13519>   CLR.w sbgot
00038CFA <AmiBlitz3.ab2@13520>   MOVE.w unknown(PC),-(A7)
00038D00 <AmiBlitz3.ab2@13521>   MOVE.w D3,unknown
00038D02 <AmiBlitz3.ab2@13522>   MOVE.w D2,-(a7)
00038D08 <AmiBlitz3.ab2@13523>   MOVE.w d2,mode
00038D0C <AmiBlitz3.ab2@13524>    BSR.w eval3
00038D0E <AmiBlitz3.ab2@13525>   MOVE.w (a7)+,d3
00038D12 <AmiBlitz3.ab2@13526>    BEQ.w maineval__noconv
00038D16 <AmiBlitz3.ab2@13527>   MOVE.w unknown(PC),D1
00038D1A <AmiBlitz3.ab2@13528>    BNE.w maineval__noconv
00038D1C <AmiBlitz3.ab2@13529>   EXG.l D2,D3
00038D1E <AmiBlitz3.ab2@13530>    MOVE.l a2,-(a7)
00038D24 <AmiBlitz3.ab2@13531>    TST.b curtemplabel
00038D28 <AmiBlitz3.ab2@13532>    BEQ maineval2__l10
00038D2E <AmiBlitz3.ab2@13533>    MOVE.l asmbuff,a2
00038D34 <AmiBlitz3.ab2@13534>    CMP.w #$c,$8(a2)
00038D38 <AmiBlitz3.ab2@13535>    BEQ maineval2__l20
00038D3E <AmiBlitz3.ab2@13536>    CMP.w #$d,$8(a2)
00038D42 <AmiBlitz3.ab2@13537>    BEQ maineval2__l20
00038D44 <AmiBlitz3.ab2@13540>   CMP.w d2,d3
00038D48 <AmiBlitz3.ab2@13541>   BEQ maineval2__l20
00038D4C <AmiBlitz3.ab2@13542>   BSR.w writeconvertcode
00038D52 <AmiBlitz3.ab2@13543>   CLR.b doimmediate
00038D54 <AmiBlitz3.ab2@13546>   MOVE.l (a7)+,a2
00038D5A <AmiBlitz3.ab2@13549>   MOVE.w (A7)+,unknown
00038D60 <AmiBlitz3.ab2@13550>   MOVE.w stackpar,D1
00038D64 <AmiBlitz3.ab2@13551>    BEQ.w maineval__skipme
00038D68 <AmiBlitz3.ab2@13552>    BMI.w maineval__skipme
00038D6E <AmiBlitz3.ab2@13556>   MOVE.w regnum,D1
00038D70 <AmiBlitz3.ab2@13557>   LSL.w #8,D1
00038D72 <AmiBlitz3.ab2@13558>   LSL.w #1,D1
00038D76 <AmiBlitz3.ab2@13559>   CMP.w #$7,D2
00038D7A <AmiBlitz3.ab2@13560>    BNE.w maineval__hi1
00038D82 <AmiBlitz3.ab2@13561>    CMP.b #2,optistring
00038D86 <AmiBlitz3.ab2@13562>    BEQ maineval__hi1a
00038D88 <AmiBlitz3.ab2@13563>   MOVE.w D1,-(A7)
00038D8E <AmiBlitz3.ab2@13564>   OR.w getstlen,D1
00038D92 <AmiBlitz3.ab2@13565>    BSR.w writeword
00038D94 <AmiBlitz3.ab2@13566>   MOVE.w (A7)+,D1
00038D9A <AmiBlitz3.ab2@13569>   ADDQ.w #2,a2offset                                        ;lib mode to stack
00038D9E <AmiBlitz3.ab2@13573>   MOVE.w #$3f3c,d1
00038DA2 <AmiBlitz3.ab2@13574>    BSR.w writeword
00038DA4 <AmiBlitz3.ab2@13578>   MOVE.w d2,d1
00038DAA <AmiBlitz3.ab2@13579>   MOVE.w d1,libmode
00038DAE <AmiBlitz3.ab2@13580>    BSR.w writeword
00038DB2 <AmiBlitz3.ab2@13581>   CMP.w #$7,D2
00038DB6 <AmiBlitz3.ab2@13582>    BNE.w maineval__skipme
00038DBC <AmiBlitz3.ab2@13583>   MOVE.w putstlen,D1
00038DC2 <AmiBlitz3.ab2@13584>   OR.w regnum,D1
00038DC6 <AmiBlitz3.ab2@13585>    BSR.w writeword
00038DCA <AmiBlitz3.ab2@13588>    CMP.w #$7,D2
00038DCE <AmiBlitz3.ab2@13589>    BNE.w maineval__notst
00038DD6 <AmiBlitz3.ab2@13600>    CMP.b #2,optistring
00038DDA <AmiBlitz3.ab2@13601>    BEQ maineval__skipme_l10
00038DE0 <AmiBlitz3.ab2@13602>    ADDQ.w #4,a2offset                                      ;a length on da stack.....
00038DE4 <AmiBlitz3.ab2@13603>    BSR.w sbtolong
00038DE8 <AmiBlitz3.ab2@13604> BRA.w maineval__notst2
00038DF0 <AmiBlitz3.ab2@13608>     CMP.w #6,regnum
00038DF4 <AmiBlitz3.ab2@13609>     BEQ maineval__skipme_l10_l1
00038DFA <AmiBlitz3.ab2@13610>     TST.b funcparloop
00038DFE <AmiBlitz3.ab2@13611>     BEQ maineval__skipme_l10_l1
00038E04 <AmiBlitz3.ab2@13612>     MOVE.l #$48780000,d1
00038E08 <AmiBlitz3.ab2@13613>     BSR writelong
00038E0C <AmiBlitz3.ab2@13616> BRA.w maineval__notst2
00038E12 <AmiBlitz3.ab2@13619>   ADDQ.w #2,a2offset
00038E16 <AmiBlitz3.ab2@13620> BRA maineval__skipme
00038E1E <AmiBlitz3.ab2@13623>   CMPI.w #$2,sbgot
00038E22 <AmiBlitz3.ab2@13624>    BCS.w maineval__notst2                                         ;correct stack
00038E26 <AmiBlitz3.ab2@13625>   MOVE.w ststfix(PC),D1
00038E2A <AmiBlitz3.ab2@13626>    BSR.w writeword
00038E30 <AmiBlitz3.ab2@13629>   MOVE.w (A7)+,sbgot
00038E36 <AmiBlitz3.ab2@13630>   MOVE.w stackpar,D1
00038E3A <AmiBlitz3.ab2@13631>    BPL.w maineval__skip
00038E3E <AmiBlitz3.ab2@13632>    CMP.b #7,d2
00038E42 <AmiBlitz3.ab2@13633>    BEQ maineval__notst2_l1
00038E48 <AmiBlitz3.ab2@13634>   TST.b funcparloop
00038E4C <AmiBlitz3.ab2@13635>   BEQ maineval__notst2_l1
00038E50 <AmiBlitz3.ab2@13636>   CMP.b #5,d2
00038E54 <AmiBlitz3.ab2@13637>   BNE maineval__notst2_skip
00038E5A <AmiBlitz3.ab2@13638>   TST.b fpu
00038E5E <AmiBlitz3.ab2@13639>   BEQ maineval__notst2_skip
00038E64 <AmiBlitz3.ab2@13640>   MOVE.l #$f2066700,d1                                     ;fmove.s fp6,d6
00038E6A <AmiBlitz3.ab2@13641>   JSR writelong
00038E6E <AmiBlitz3.ab2@13644>   MOVE.w #$c4ff,d1                                         ;savetemp+regnum
00038E74 <AmiBlitz3.ab2@13645>   ADD.w parnum,d1
00038E7A <AmiBlitz3.ab2@13646>   JSR Atokejsr
00038E80 <AmiBlitz3.ab2@13647>    TST.w dontwrite
00038E84 <AmiBlitz3.ab2@13648>    BNE maineval__notst2_l1
00038E8A <AmiBlitz3.ab2@13649>    MOVE.l data1start,d1
00038E90 <AmiBlitz3.ab2@13650>    MOVE.l destpointer,a4
00038E94 <AmiBlitz3.ab2@13651>    ADD.l d1,-4(a4)
00038E9A <AmiBlitz3.ab2@13652>    MOVE.l destpointer,d1
00038E9C <AmiBlitz3.ab2@13653>    SUBQ.l #4,d1
00038EA2 <AmiBlitz3.ab2@13654>    SUB.l destbufferstart,d1
00038EA4 <AmiBlitz3.ab2@13655>    MOVE.l d2,-(a7)
00038EA6 <AmiBlitz3.ab2@13656>    MOVE.l d1,d2
00038EAC <AmiBlitz3.ab2@13657>    JSR addhunkoffset
00038EAE <AmiBlitz3.ab2@13658>    MOVE.l (a7)+,d2
00038EB2 <AmiBlitz3.ab2@13659> BRA maineval__skip
00038EB8 <AmiBlitz3.ab2@13662>   ADDQ.w #2,a2offset
00038EBE <AmiBlitz3.ab2@13663>   MOVE.w pushd0wd,D1
00038EC2 <AmiBlitz3.ab2@13664>   CMP.w #$3,D2                                             ;write parameter to stack
00038EC6 <AmiBlitz3.ab2@13665>    BCS.w maineval__ok
00038ECC <AmiBlitz3.ab2@13666>   ADDQ.w #2,a2offset
00038ED2 <AmiBlitz3.ab2@13667>   TST.b fpu
00038ED6 <AmiBlitz3.ab2@13668>   BEQ maineval__notst2_nofpu
00038EDA <AmiBlitz3.ab2@13669>   CMP.w #5,d2
00038EDE <AmiBlitz3.ab2@13670>   BNE maineval__notst2_nofpu
00038EE0 <AmiBlitz3.ab2@13671>   MOVEQ #0,d1
00038EE6 <AmiBlitz3.ab2@13672>   MOVE.w regnum,d1
00038EE8 <AmiBlitz3.ab2@13673>   ASL.l #7,d1
00038EEE <AmiBlitz3.ab2@13674>   OR.l #$f2276400,d1
00038EF2 <AmiBlitz3.ab2@13675>   BSR writelong
00038EF6 <AmiBlitz3.ab2@13676> BRA maineval__skip
00038EFC <AmiBlitz3.ab2@13679>   MOVE.w pushd0l,D1
00038F02 <AmiBlitz3.ab2@13682>    OR.w regnum,D1
00038F06 <AmiBlitz3.ab2@13683>    BSR.w writeword                                         ;nat
00038F0C <AmiBlitz3.ab2@13686>   MOVE.w (A7)+,stackpar
00038F12 <AmiBlitz3.ab2@13687>   MOVE.w (A7)+,thisstuse
00038F14 <AmiBlitz3.ab2@13688> RTS
00038F16 <AmiBlitz3.ab2@13691> thisstuse: Ds.w 1
00038F18 <AmiBlitz3.ab2@13694> ststfix:   Dc.b $58,$4F                                    ;ADDQ.W  #4,A7
00038F1A <AmiBlitz3.ab2@13695> pushut:    Dc.b $3F,$00                                    ;MOVE.W  D0,-(A7)
00038F1E <AmiBlitz3.ab2@13700>   BSR.w eval4
00038F28 <AmiBlitz3.ab2@13701>   SUBI.l #$12,forthsp
00038F2A <AmiBlitz3.ab2@13702> RTS
00038F2C <AmiBlitz3.ab2@13706>   MOVEQ.l #$01,D1
00038F30 <AmiBlitz3.ab2@13708>       MOVEA.l precsp(PC),A1
00038F32 <AmiBlitz3.ab2@13709>       MOVE.l A0,(A1)+
00038F34 <AmiBlitz3.ab2@13710>       MOVE.w D1,(A1)+
00038F3A <AmiBlitz3.ab2@13711>       MOVE.l A1,precsp
00038F3E <AmiBlitz3.ab2@13712>    BSR.w calcloop
00038F40 <AmiBlitz3.ab2@13713>   TST.w D1
00038F44 <AmiBlitz3.ab2@13714>    BNE.w syntaxerr
00038F4A <AmiBlitz3.ab2@13715>   SUBQ.l #6,precsp                                      ;pop the prec set up
00038F4C <AmiBlitz3.ab2@13716> RTS
00038F50 <AmiBlitz3.ab2@13720>   BSR.w JL_0_9C24
00038F54 <AmiBlitz3.ab2@13723>   MOVEA.l precsp(PC),A1
00038F56 <AmiBlitz3.ab2@13724>   CMP.w -(A1),D1
00038F5A <AmiBlitz3.ab2@13725>    BHI.w JL_0_9B0A
00038F5C <AmiBlitz3.ab2@13726> RTS
00038F60 <AmiBlitz3.ab2@13731>   MOVEA.l precsp(PC),A1
00038F62 <AmiBlitz3.ab2@13732>   MOVE.l A0,(A1)+
00038F64 <AmiBlitz3.ab2@13733>   MOVE.w D1,(A1)+
00038F6A <AmiBlitz3.ab2@13734>   MOVE.l A1,precsp
00038F6C <AmiBlitz3.ab2@13735>   MOVE.w D2,-(A7)
00038F72 <AmiBlitz3.ab2@13736>   ADDQ.w #1,regnum
00038F76 <AmiBlitz3.ab2@13737>    BSR.w calcloop
00038F7C <AmiBlitz3.ab2@13738>   SUBQ.w #1,regnum
00038F7E <AmiBlitz3.ab2@13739>   MOVE.w (A7)+,D3
00038F82 <AmiBlitz3.ab2@13740>   MOVEM.l D1/A0,-(A7)
00038F86 <AmiBlitz3.ab2@13741>    BEQ.w JL_0_9B2E
00038F8A <AmiBlitz3.ab2@13742>    BSR.w JL_0_9770
00038F8E <AmiBlitz3.ab2@13745>   BSR.w popprec
00038F92 <AmiBlitz3.ab2@13746>   BSR.w writecode
00038F96 <AmiBlitz3.ab2@13747>   MOVEA.l forthsp(PC),A0
00038F9A <AmiBlitz3.ab2@13748>   MOVE.w -$2(A0),D1
00038F9E <AmiBlitz3.ab2@13749>   OR.w -$14(A0),D1
00038FA2 <AmiBlitz3.ab2@13750>   MOVE.w D1,-$14(A0)
00038FA6 <AmiBlitz3.ab2@13751>    BNE.w JL_0_9C0E
00038FAC <AmiBlitz3.ab2@13752>   MOVE.w dontwrite,D1
00038FB0 <AmiBlitz3.ab2@13753>    BNE.w JL_0_9C0E
00038FB4 <AmiBlitz3.ab2@13754>    MOVEA.l -$24(A0),A0
000390F0 <AmiBlitz3.ab2@13756>  !newcalc
000390F4 <AmiBlitz3.ab2@13757>    BEQ 'l10
000390F8 <AmiBlitz3.ab2@13758>    MOVEA.l forthsp(PC),A0
00039100 <AmiBlitz3.ab2@13759>    MOVE.w -$18(A0),lasta6
00039108 <AmiBlitz3.ab2@13760>    MOVE.l -$1C(A0),lasta6
0003910C <AmiBlitz3.ab2@13761>    MOVEA.l -$24(A0),A0
00039112 <AmiBlitz3.ab2@13762>    MOVE.l A0,destpointer
00039118 <AmiBlitz3.ab2@13763>    MOVEA.l _mathffpbase,A6
0003911E <AmiBlitz3.ab2@13764>    MOVEA.l ffplib,A1
00039122 <AmiBlitz3.ab2@13765> BRA cont1
00039126 <AmiBlitz3.ab2@13768>   MOVE.w #$2000,D1
0003912C <AmiBlitz3.ab2@13769>   OR.w regnum,D1
00039130 <AmiBlitz3.ab2@13770>    BSR.w writeword
00039132 <AmiBlitz3.ab2@13771>     MOVEQ #0,d1
00039138 <AmiBlitz3.ab2@13772>     MOVE.w regnum,D1
0003913A <AmiBlitz3.ab2@13773>     ASL.l #8,d1
0003913C <AmiBlitz3.ab2@13774>     ASL.l #2,d1
00039142 <AmiBlitz3.ab2@13775>     OR.l #$f2000000,d1
00039146 <AmiBlitz3.ab2@13776>     BSR writelong
0003914A <AmiBlitz3.ab2@13777>   MOVE.w #$4E75,D1
0003914E <AmiBlitz3.ab2@13778>    BSR.w writeword
00039156 <AmiBlitz3.ab2@13779>   MOVE.w -$18(A0),lasta6
0003915E <AmiBlitz3.ab2@13780>   MOVE.l -$1C(A0),lasta6
00039162 <AmiBlitz3.ab2@13781>   MOVEA.l -$24(A0),A0
00039168 <AmiBlitz3.ab2@13782>   MOVE.l A0,destpointer
0003916C <AmiBlitz3.ab2@13783>   MOVEM.l D2/A5,-(A7)
00039172 <AmiBlitz3.ab2@13784>   MOVEA.l _mathffpbase,A6
00039178 <AmiBlitz3.ab2@13785>   MOVEA.l ffplib,A1
0003917C <AmiBlitz3.ab2@13786>   MOVE.w $A(A1),D0
00039182 <AmiBlitz3.ab2@13787>   LEA _mathffpbase,A5
00039184 <AmiBlitz3.ab2@13788>   SUBA.w D0,A5
0003918A <AmiBlitz3.ab2@13789>   JSR Aclearcache                                          ;neg +
00039190 <AmiBlitz3.ab2@13790>   CLR.l load_var_addr
00039196 <AmiBlitz3.ab2@13791>   CLR.l imm_addr
0003919C <AmiBlitz3.ab2@13792>   TST.w dontwrite
000391A0 <AmiBlitz3.ab2@13793>   BNE '1
000391A2 <AmiBlitz3.ab2@13794>   JSR (A0)                                                 ;calc constant inline expression
000391A6 <AmiBlitz3.ab2@13797>   MOVEM.l (A7)+,D2/A5
000391AC <AmiBlitz3.ab2@13800>   MOVE.w regnum,D1
000391AE <AmiBlitz3.ab2@13801>   LSL.w #8,D1
000391B0 <AmiBlitz3.ab2@13802>   LSL.w #1,D1
000391B4 <AmiBlitz3.ab2@13803>   ORI.w #$203C,D1
000391B8 <AmiBlitz3.ab2@13804>   CMP.w #$3,D2
000391BC <AmiBlitz3.ab2@13805>    BCC.w JL_0_9BCE
000391C0 <AmiBlitz3.ab2@13806>   ORI.w #$1000,D1
000391C4 <AmiBlitz3.ab2@13807>    BSR.w writeword
000391C6 <AmiBlitz3.ab2@13808>   MOVE.w D0,D1
000391CA <AmiBlitz3.ab2@13809>    BSR.w writeword
000391CE <AmiBlitz3.ab2@13810> BRA.w JL_0_9BD8
000391D4 <AmiBlitz3.ab2@13814>   TST.b iee                                                ;fpu constant
000391D8 <AmiBlitz3.ab2@13815>   BEQ 'l10
000391DC <AmiBlitz3.ab2@13816>   CMP.b #5,d2
000391E0 <AmiBlitz3.ab2@13817>   BNE 'l10
000391E2 <AmiBlitz3.ab2@13818>   MOVEQ #0,d1
000391E8 <AmiBlitz3.ab2@13819>   MOVE.w regnum,D1
000391EA <AmiBlitz3.ab2@13820>   ASL.l #7,d1
000391F0 <AmiBlitz3.ab2@13821>   OR.l #$f23c5400,d1
000391F4 <AmiBlitz3.ab2@13822>   BSR writelong
000391F6 <AmiBlitz3.ab2@13823>   SUBQ.l #8,a7
000391FC <AmiBlitz3.ab2@13824>   fmove.d fp0,0(a7)
000391FE <AmiBlitz3.ab2@13825>   MOVE.l (a7)+,d1
00039202 <AmiBlitz3.ab2@13826>   BSR writelong
00039204 <AmiBlitz3.ab2@13827>   MOVE.l (a7)+,d1
00039208 <AmiBlitz3.ab2@13828>   BSR writelong
0003920C <AmiBlitz3.ab2@13829> BRA JL_0_9BD8
00039210 <AmiBlitz3.ab2@13832>   BSR.w writeword
00039212 <AmiBlitz3.ab2@13833>   MOVE.l D0,D1
00039216 <AmiBlitz3.ab2@13834>   BSR.w writelong
0003921A <AmiBlitz3.ab2@13837>   MOVEA.l forthsp(PC),A0
0003921E <AmiBlitz3.ab2@13838>   MOVEA.l -$20(A0),A3
00039224 <AmiBlitz3.ab2@13839>   MOVEA.l hunkoffsetbase,A2
0003922A <AmiBlitz3.ab2@13840>   MOVE.l A3,hunkoffsetbase
00039230 <AmiBlitz3.ab2@13841>   MOVEA.l _execbase,A6
00039232 <AmiBlitz3.ab2@13844>   CMPA.l A3,A2
00039236 <AmiBlitz3.ab2@13845>   BEQ.w JL_0_9C0A
0003923C <AmiBlitz3.ab2@13846>   SUBQ.l #1,hunkoffsetcounter
0003923E <AmiBlitz3.ab2@13847>   MOVEA.l A2,A1
00039240 <AmiBlitz3.ab2@13848>   MOVEA.l (A2),A2
00039242 <AmiBlitz3.ab2@13849>   MOVEQ.l #$8,D0
00039248 <AmiBlitz3.ab2@13850>   MOVE.l mempool2,a0
0003924C <AmiBlitz3.ab2@13851>    JSR _FreePooled(A6)
00039250 <AmiBlitz3.ab2@13852> BRA.w JL_0_9BF0
00039254 <AmiBlitz3.ab2@13856>   MOVEA.l forthsp(PC),A0
00039258 <AmiBlitz3.ab2@13859>   LEA -$12(A0),A0
0003925E <AmiBlitz3.ab2@13860>   MOVE.l A0,forthsp
00039262 <AmiBlitz3.ab2@13861>   MOVEM.l (A7)+,D1/A0
00039266 <AmiBlitz3.ab2@13862>   BSR.w reget
0003926A <AmiBlitz3.ab2@13863> BRA.w JL_0_9AFE
0003926E <AmiBlitz3.ab2@13867>   BSR.w JL_0_A386
00039270 <AmiBlitz3.ab2@13868>   TST.w d0
00039274 <AmiBlitz3.ab2@13869>   BEQ JL_0_9C42
00039278 <AmiBlitz3.ab2@13870>   CMP.b #",",d0
0003927C <AmiBlitz3.ab2@13871>   BEQ JL_0_9C42
00039280 <AmiBlitz3.ab2@13872>   CMP.b #"@",d0                                            ;expandline @@
00039284 <AmiBlitz3.ab2@13873>   BEQ JL_0_9C42
0003928A <AmiBlitz3.ab2@13874>   LEA operators,A0
0003928C <AmiBlitz3.ab2@13877>    TST.w (A0)
00039290 <AmiBlitz3.ab2@13878>    BEQ.w JL_0_9C42
00039292 <AmiBlitz3.ab2@13879>   CMP.w (A0),D0
00039296 <AmiBlitz3.ab2@13880>    BEQ.w JL_0_9C46a
0003929A <AmiBlitz3.ab2@13881>   LEA $20(A0),A0
0003929E <AmiBlitz3.ab2@13882> BRA.w JL_0_9C2E
000392A0 <AmiBlitz3.ab2@13886>   MOVEQ.l #$00,D1
000392A2 <AmiBlitz3.ab2@13887> RTS
000392A6 <AmiBlitz3.ab2@13891>   CMP.w #$3C,D0
000392AA <AmiBlitz3.ab2@13892>    BNE.w JL_0_9C70
000392AE <AmiBlitz3.ab2@13893>    BSR.w get1bytemain
000392B2 <AmiBlitz3.ab2@13894>   CMP.w #$3D,D0
000392B6 <AmiBlitz3.ab2@13895>    BNE.w JL_0_9C64
000392BC <AmiBlitz3.ab2@13896>   LEA ople,A0
000392C0 <AmiBlitz3.ab2@13897> BRA.w JL_0_9CCA
000392C4 <AmiBlitz3.ab2@13901>   CMP.w #$3E,D0
000392C8 <AmiBlitz3.ab2@13902>    BNE.w JL_0_9C96
000392CC <AmiBlitz3.ab2@13903> BRA.w JL_0_9CC4
000392D0 <AmiBlitz3.ab2@13907>   CMP.w #$3E,D0
000392D4 <AmiBlitz3.ab2@13908>    BNE.w JL_0_9C9E
000392D8 <AmiBlitz3.ab2@13909>    BSR.w get1bytemain
000392DC <AmiBlitz3.ab2@13910>   CMP.w #$3D,D0
000392E0 <AmiBlitz3.ab2@13911>    BNE.w JL_0_9C8E
000392E6 <AmiBlitz3.ab2@13912>   LEA opge,A0
000392EA <AmiBlitz3.ab2@13913> BRA.w JL_0_9CCA
000392EE <AmiBlitz3.ab2@13917>   CMP.w #$3C,D0
000392F2 <AmiBlitz3.ab2@13918>    BEQ.w JL_0_9CC4
000392FC <AmiBlitz3.ab2@13922>     MOVE.w oldqflag,instringon
00039302 <AmiBlitz3.ab2@13923>     MOVEA.l lastsourcepos,A5
00039306 <AmiBlitz3.ab2@13924> BRA.w JL_0_9CCA
0003930A <AmiBlitz3.ab2@13928>   CMP.w #$3D,D0
0003930E <AmiBlitz3.ab2@13929>    BNE.w JL_0_9CCA
00039312 <AmiBlitz3.ab2@13930>    BSR.w get1bytemain
00039316 <AmiBlitz3.ab2@13931>   CMP.w #$3E,D0
0003931A <AmiBlitz3.ab2@13932>    BNE.w JL_0_9CBC
00039320 <AmiBlitz3.ab2@13933>   LEA opge,A0
00039324 <AmiBlitz3.ab2@13934> BRA.w JL_0_9CCA
00039328 <AmiBlitz3.ab2@13938>   CMP.w #$3C,D0
0003932C <AmiBlitz3.ab2@13939>   BNE.w JL_0_9C96
00039332 <AmiBlitz3.ab2@13942>   LEA opne,A0
00039336 <AmiBlitz3.ab2@13945>   MOVE.w $1E(A0),D1
00039338 <AmiBlitz3.ab2@13946> RTS
0003933A <AmiBlitz3.ab2@13953>   MOVE.w d2,d1
0003933C <AmiBlitz3.ab2@13954>   SUBQ.w #1,D1
00039340 <AmiBlitz3.ab2@13955>    BMI.w illoperr
00039342 <AmiBlitz3.ab2@13956>   LSL.w #2,D1
00039346 <AmiBlitz3.ab2@13957>   MOVE.l $2(A0,D1.W),D1
0003934A <AmiBlitz3.ab2@13958>    BEQ.w illoperr
0003934C <AmiBlitz3.ab2@13959>   MOVEA.l D1,A0
0003934E <AmiBlitz3.ab2@13962> JMP (A0)
00039352 <AmiBlitz3.ab2@13978>   MOVEA.l precsp(PC),A1
00039358 <AmiBlitz3.ab2@13979>   CMPA.l #precstackf,A1
0003935C <AmiBlitz3.ab2@13980>    BCC.w pserr
0003935E <AmiBlitz3.ab2@13981>   MOVE.w -(A1),D1
00039360 <AmiBlitz3.ab2@13982>   MOVEA.l -(A1),A0
00039366 <AmiBlitz3.ab2@13983>   MOVE.l A1,precsp
00039368 <AmiBlitz3.ab2@13984> RTS
0003936C <AmiBlitz3.ab2@13987> precsp:      Dc.l precstack
00039468 <AmiBlitz3.ab2@13988> precstack:   Ds.l 63                                       ;ds 6*32 org source   ;Lotsa Room?
000394EC <AmiBlitz3.ab2@13989>              Ds.l 33
000394EE <AmiBlitz3.ab2@13995> mseq:  SEQ D0
000394F0 <AmiBlitz3.ab2@13996> msne:    SNE D0
000394F2 <AmiBlitz3.ab2@13997> mslt:    SLT D0
000394F4 <AmiBlitz3.ab2@13998> msle:    SLE D0
000394F6 <AmiBlitz3.ab2@13999> msgt:    SGT D0
000394F8 <AmiBlitz3.ab2@14000> msge:    SGE D0
000394FA <AmiBlitz3.ab2@14002> cmp0:    CMP.b D0,D0
000394FC <AmiBlitz3.ab2@14003> cmp1:    CMP.w D0,D0
000394FE <AmiBlitz3.ab2@14004> cmp2:    CMP.l D0,D0
00039502 <AmiBlitz3.ab2@14008>   MOVE.w cmp0(PC),D1
00039506 <AmiBlitz3.ab2@14009> BRA.w doeqcmp2                                            ;writecompare
0003950A <AmiBlitz3.ab2@14013>   MOVE.w cmp0(PC),D1
0003950E <AmiBlitz3.ab2@14014> BRA.w donecmp2
00039512 <AmiBlitz3.ab2@14018>   MOVE.w cmp0(PC),D1
00039516 <AmiBlitz3.ab2@14019> BRA.w doltcmp2
0003951A <AmiBlitz3.ab2@14023>   MOVE.w cmp0(PC),D1
0003951E <AmiBlitz3.ab2@14024> BRA.w dolecmp2
00039522 <AmiBlitz3.ab2@14028>   MOVE.w cmp0(PC),D1
00039526 <AmiBlitz3.ab2@14029> BRA.w dogtcmp2
0003952A <AmiBlitz3.ab2@14034>   MOVE.w cmp0(PC),D1
0003952E <AmiBlitz3.ab2@14035> BRA.w dogecmp2
00039532 <AmiBlitz3.ab2@14039>   MOVE.w cmp1(PC),D1
00039536 <AmiBlitz3.ab2@14040> BRA.w doeqcmp2
0003953A <AmiBlitz3.ab2@14044>   MOVE.w cmp1(PC),D1
0003953E <AmiBlitz3.ab2@14045> BRA.w donecmp2
00039542 <AmiBlitz3.ab2@14049>   MOVE.w cmp1(PC),D1
00039546 <AmiBlitz3.ab2@14050> BRA.w doltcmp2
0003954A <AmiBlitz3.ab2@14054>   MOVE.w cmp1(PC),D1
0003954E <AmiBlitz3.ab2@14055> BRA.w dolecmp2
00039552 <AmiBlitz3.ab2@14059>   MOVE.w cmp1(PC),D1
00039556 <AmiBlitz3.ab2@14060> BRA.w dogtcmp2
0003955A <AmiBlitz3.ab2@14065>   MOVE.w cmp1(PC),D1
0003955E <AmiBlitz3.ab2@14066> BRA.w dogecmp2
00039562 <AmiBlitz3.ab2@14070>   MOVE.w cmp2(PC),D1                                   ;writecomparelong
00039566 <AmiBlitz3.ab2@14071> BRA doeqcmp2
0003956A <AmiBlitz3.ab2@14074>   MOVE.w cmp2(PC),D1
0003956E <AmiBlitz3.ab2@14075> BRA donecmp2
00039572 <AmiBlitz3.ab2@14079>   MOVE.w cmp2(PC),D1
00039576 <AmiBlitz3.ab2@14080> BRA.w doltcmp2
0003957A <AmiBlitz3.ab2@14084>   MOVE.w cmp2(PC),D1
0003957E <AmiBlitz3.ab2@14085> BRA.w dolecmp2
00039582 <AmiBlitz3.ab2@14089>   MOVE.w cmp2(PC),D1
00039586 <AmiBlitz3.ab2@14090> BRA.w dogtcmp2
0003958A <AmiBlitz3.ab2@14094>   MOVE.w cmp2(PC),D1
0003958E <AmiBlitz3.ab2@14095> BRA.w dogecmp2
00039590 <AmiBlitz3.ab2@14098> cfregat:  Ds.w 1
00039596 <AmiBlitz3.ab2@14102>   MOVE.w D1,libjsr+2
0003959A <AmiBlitz3.ab2@14103>    BSR.w JL_0_AD40
0003959C <AmiBlitz3.ab2@14104>   MOVE.l D4,D1
000395A0 <AmiBlitz3.ab2@14105>    BSR.w JL_0_AD38
000395A4 <AmiBlitz3.ab2@14106>   MOVE.w #$C900,D1
000395A8 <AmiBlitz3.ab2@14107>    BSR.w Atokejsr
000395AC <AmiBlitz3.ab2@14108>    BSR.w JL_0_A352
000395B2 <AmiBlitz3.ab2@14109>   MOVE.l libjsr,D1
000395B6 <AmiBlitz3.ab2@14110>    BSR.w writelong
000395C0 <AmiBlitz3.ab2@14111>   MOVE.w regnum,cfregat
000395C6 <AmiBlitz3.ab2@14112>   CLR.w regnum
000395C8 <AmiBlitz3.ab2@14113> RTS
000395D2 <AmiBlitz3.ab2@14117>   MOVE.w cfregat,regnum
000395D6 <AmiBlitz3.ab2@14118>    BSR.w JL_0_A36E
000395D8 <AmiBlitz3.ab2@14119>   MOVE.l D5,D1
000395DC <AmiBlitz3.ab2@14120> BRA.w JL_0_AD38
000395DE <AmiBlitz3.ab2@14124>    MOVEQ.l #-$2A,D1
000395E4 <AmiBlitz3.ab2@14125>    TST.b fpu
000395E8 <AmiBlitz3.ab2@14126>    BEQ do_equal_float__nofpu
000395EA <AmiBlitz3.ab2@14127>    MOVEQ #0,d1
000395F0 <AmiBlitz3.ab2@14128>    MOVE.w regnum,d1
000395F2 <AmiBlitz3.ab2@14129>    MOVE.l d1,d2
000395F4 <AmiBlitz3.ab2@14130>    ASL.l #7,d1
000395F6 <AmiBlitz3.ab2@14131>    ADDQ  #1,d2
000395F8 <AmiBlitz3.ab2@14132>    ASL.l #8,d2
000395FA <AmiBlitz3.ab2@14133>    ASL.l #2,d2
000395FC <AmiBlitz3.ab2@14134>    OR.l d2,d1
00039602 <AmiBlitz3.ab2@14135>    OR.l #$f2000038,d1
00039608 <AmiBlitz3.ab2@14136>    JSR writelong
0003960C <AmiBlitz3.ab2@14137>    MOVE.w #$f240,d1
00039612 <AmiBlitz3.ab2@14138>    OR.w regnum,d1
00039616 <AmiBlitz3.ab2@14139>    BSR writeword
00039618 <AmiBlitz3.ab2@14140>    MOVEQ.l #1,d2
0003961C <AmiBlitz3.ab2@14141>    MOVE.w #1,d1                                            ;fpu comp fseq
00039620 <AmiBlitz3.ab2@14142>    BSR writeword
00039622 <AmiBlitz3.ab2@14143> RTS
00039626 <AmiBlitz3.ab2@14146>    BSR.w docflib
0003962A <AmiBlitz3.ab2@14147>    BSR.w doeqcmp
0003962E <AmiBlitz3.ab2@14148> BRA.w docflib2
00039630 <AmiBlitz3.ab2@14152>   MOVEQ.l #-$2A,D1
00039636 <AmiBlitz3.ab2@14153>   TST.b fpu
0003963A <AmiBlitz3.ab2@14154>    BEQ do_not_equal_float__nofpu
0003963C <AmiBlitz3.ab2@14155>    MOVEQ #0,d1
00039642 <AmiBlitz3.ab2@14156>    MOVE.w regnum,d1
00039644 <AmiBlitz3.ab2@14157>    MOVE.l d1,d2
00039646 <AmiBlitz3.ab2@14158>    ASL.l #7,d1
00039648 <AmiBlitz3.ab2@14159>    ADDQ  #1,d2
0003964A <AmiBlitz3.ab2@14160>    ASL.l #8,d2
0003964C <AmiBlitz3.ab2@14161>    ASL.l #2,d2
0003964E <AmiBlitz3.ab2@14162>    OR.l d2,d1
00039654 <AmiBlitz3.ab2@14163>    OR.l #$f2000038,d1
0003965A <AmiBlitz3.ab2@14164>    JSR writelong
0003965E <AmiBlitz3.ab2@14165>    MOVE.w #$f240,d1
00039664 <AmiBlitz3.ab2@14166>    OR.w regnum,d1
00039668 <AmiBlitz3.ab2@14167>    BSR writeword
0003966E <AmiBlitz3.ab2@14168>    MOVE.l #1,d2
00039672 <AmiBlitz3.ab2@14169>    MOVE.w #$e,d1                                           ;fpu comp fsne
00039676 <AmiBlitz3.ab2@14170>    BSR writeword
00039678 <AmiBlitz3.ab2@14171> RTS
0003967C <AmiBlitz3.ab2@14174>    BSR.w docflib
00039680 <AmiBlitz3.ab2@14175>    BSR.w donecmp
00039684 <AmiBlitz3.ab2@14176> BRA.w docflib2
00039686 <AmiBlitz3.ab2@14180>   MOVEQ.l #-$2A,D1
0003968C <AmiBlitz3.ab2@14181>     TST.b fpu
00039690 <AmiBlitz3.ab2@14182>    BEQ do_littler_float__nofpu
00039692 <AmiBlitz3.ab2@14183>    MOVEQ #0,d1
00039698 <AmiBlitz3.ab2@14184>    MOVE.w regnum,d1
0003969A <AmiBlitz3.ab2@14185>    MOVE.l d1,d2
0003969C <AmiBlitz3.ab2@14186>    ASL.l #7,d1
0003969E <AmiBlitz3.ab2@14187>    ADDQ  #1,d2
000396A0 <AmiBlitz3.ab2@14188>    ASL.l #8,d2
000396A2 <AmiBlitz3.ab2@14189>    ASL.l #2,d2
000396A4 <AmiBlitz3.ab2@14190>    OR.l d2,d1
000396AA <AmiBlitz3.ab2@14191>    OR.l #$f2000038,d1
000396B0 <AmiBlitz3.ab2@14192>    JSR writelong
000396B4 <AmiBlitz3.ab2@14193>    MOVE.w #$f240,d1
000396BA <AmiBlitz3.ab2@14194>    OR.w regnum,d1
000396BE <AmiBlitz3.ab2@14195>    BSR writeword
000396C4 <AmiBlitz3.ab2@14196>    MOVE.l #$1,d2
000396C8 <AmiBlitz3.ab2@14197>    MOVE.w #$14,d1                                          ;fpu comp fslt
000396CC <AmiBlitz3.ab2@14198>    BSR writeword
000396CE <AmiBlitz3.ab2@14199> RTS
000396D2 <AmiBlitz3.ab2@14202>    BSR.w docflib
000396D6 <AmiBlitz3.ab2@14203>    BSR.w doltcmp
000396DA <AmiBlitz3.ab2@14204> BRA.w docflib2
000396DC <AmiBlitz3.ab2@14208>   MOVEQ.l #-$2A,D1
000396E2 <AmiBlitz3.ab2@14209>   TST.b fpu
000396E6 <AmiBlitz3.ab2@14210>    BEQ do_littler_equal_float__nofpu
000396E8 <AmiBlitz3.ab2@14211>    MOVEQ #0,d1
000396EE <AmiBlitz3.ab2@14212>    MOVE.w regnum,d1
000396F0 <AmiBlitz3.ab2@14213>    MOVE.l d1,d2
000396F2 <AmiBlitz3.ab2@14214>    ASL.l #7,d1
000396F4 <AmiBlitz3.ab2@14215>    ADDQ  #1,d2
000396F6 <AmiBlitz3.ab2@14216>    ASL.l #8,d2
000396F8 <AmiBlitz3.ab2@14217>    ASL.l #2,d2
000396FA <AmiBlitz3.ab2@14218>    OR.l d2,d1
00039700 <AmiBlitz3.ab2@14219>    OR.l #$f2000038,d1
00039706 <AmiBlitz3.ab2@14220>    JSR writelong
0003970A <AmiBlitz3.ab2@14221>    MOVE.w #$f240,d1
00039710 <AmiBlitz3.ab2@14222>    OR.w regnum,d1
00039714 <AmiBlitz3.ab2@14223>    BSR writeword
0003971A <AmiBlitz3.ab2@14224>    MOVE.l #1,d2
0003971E <AmiBlitz3.ab2@14225>    MOVE.w #$15,d1                                          ;fpu comp fsle
00039722 <AmiBlitz3.ab2@14226>    BSR writeword
00039724 <AmiBlitz3.ab2@14227> RTS
00039728 <AmiBlitz3.ab2@14230>    BSR.w docflib
0003972C <AmiBlitz3.ab2@14231>    BSR.w dolecmp
00039730 <AmiBlitz3.ab2@14232> BRA.w docflib2
00039732 <AmiBlitz3.ab2@14236>   MOVEQ.l #-$2A,D1
00039738 <AmiBlitz3.ab2@14237>    TST.b fpu
0003973C <AmiBlitz3.ab2@14238>    BEQ do_greater_float__nofpu
0003973E <AmiBlitz3.ab2@14239>     MOVEQ #0,d1
00039744 <AmiBlitz3.ab2@14240>    MOVE.w regnum,d1
00039746 <AmiBlitz3.ab2@14241>    MOVE.l d1,d2
00039748 <AmiBlitz3.ab2@14242>    ASL.l #7,d1
0003974A <AmiBlitz3.ab2@14243>    ADDQ  #1,d2
0003974C <AmiBlitz3.ab2@14244>    ASL.l #8,d2
0003974E <AmiBlitz3.ab2@14245>    ASL.l #2,d2
00039750 <AmiBlitz3.ab2@14246>    OR.l d2,d1
00039756 <AmiBlitz3.ab2@14247>    OR.l #$f2000038,d1
0003975C <AmiBlitz3.ab2@14248>    JSR writelong
00039760 <AmiBlitz3.ab2@14249>    MOVE.w #$f240,d1
00039766 <AmiBlitz3.ab2@14250>    OR.w regnum,d1
0003976A <AmiBlitz3.ab2@14251>    BSR writeword
00039770 <AmiBlitz3.ab2@14252>    MOVE.l #1,d2
00039774 <AmiBlitz3.ab2@14253>    MOVE.w #$12,d1                                          ;fpu comp fsgt
00039778 <AmiBlitz3.ab2@14254>    BSR writeword
0003977A <AmiBlitz3.ab2@14255> RTS
0003977E <AmiBlitz3.ab2@14258>    BSR.w docflib
00039782 <AmiBlitz3.ab2@14259>    BSR.w dogtcmp
00039786 <AmiBlitz3.ab2@14260> BRA.w docflib2
00039788 <AmiBlitz3.ab2@14264>   MOVEQ.l #-$2A,D1
0003978E <AmiBlitz3.ab2@14265>  TST.b fpu
00039792 <AmiBlitz3.ab2@14266>    BEQ do_greater_equal_float__nofpu
00039794 <AmiBlitz3.ab2@14267>    MOVEQ #0,d1
0003979A <AmiBlitz3.ab2@14268>    MOVE.w regnum,d1
0003979C <AmiBlitz3.ab2@14269>    MOVE.l d1,d2
0003979E <AmiBlitz3.ab2@14270>    ASL.l #7,d1
000397A0 <AmiBlitz3.ab2@14271>    ADDQ  #1,d2
000397A2 <AmiBlitz3.ab2@14272>    ASL.l #8,d2
000397A4 <AmiBlitz3.ab2@14273>    ASL.l #2,d2
000397A6 <AmiBlitz3.ab2@14274>    OR.l d2,d1
000397AC <AmiBlitz3.ab2@14275>    OR.l #$f2000038,d1
000397B2 <AmiBlitz3.ab2@14276>    JSR writelong
000397B6 <AmiBlitz3.ab2@14277>    MOVE.w #$f240,d1
000397BC <AmiBlitz3.ab2@14278>    OR.w regnum,d1
000397C0 <AmiBlitz3.ab2@14279>    BSR writeword
000397C6 <AmiBlitz3.ab2@14280>    MOVE.l #1,d2
000397CA <AmiBlitz3.ab2@14281>    MOVE.w #$13,d1                                          ;fpu comp fsge
000397CE <AmiBlitz3.ab2@14282>    BSR writeword
000397D0 <AmiBlitz3.ab2@14283> RTS
000397D4 <AmiBlitz3.ab2@14286>    BSR.w docflib
000397D8 <AmiBlitz3.ab2@14287>    BSR.w dogecmp
000397DC <AmiBlitz3.ab2@14288> BRA.w docflib2
000397E2 <AmiBlitz3.ab2@14293>   MOVE.l #$CE00,D1
000397E8 <AmiBlitz3.ab2@14294>    MOVE.l d1,lastinstruction
000397EC <AmiBlitz3.ab2@14295>    BSR.w Atokejsr
000397F0 <AmiBlitz3.ab2@14296> BRA.w doeqcmp
000397F6 <AmiBlitz3.ab2@14300>   MOVE.l #$CE00,D1
000397FC <AmiBlitz3.ab2@14301>    MOVE.l d1,lastinstruction
00039800 <AmiBlitz3.ab2@14302>    BSR.w Atokejsr
00039804 <AmiBlitz3.ab2@14303> BRA.w donecmp
0003980A <AmiBlitz3.ab2@14307>   MOVE.l #$CE00,D1
00039810 <AmiBlitz3.ab2@14308>    MOVE.l d1,lastinstruction
00039814 <AmiBlitz3.ab2@14309>    BSR.w Atokejsr
00039818 <AmiBlitz3.ab2@14310> BRA.w doltcmp
0003981E <AmiBlitz3.ab2@14314>   MOVE.l #$CE00,D1
00039824 <AmiBlitz3.ab2@14315>    MOVE.l d1,lastinstruction
00039828 <AmiBlitz3.ab2@14316>    BSR.w Atokejsr
0003982C <AmiBlitz3.ab2@14317> BRA.w dolecmp
00039832 <AmiBlitz3.ab2@14321>   MOVE.l #$CE00,D1
00039838 <AmiBlitz3.ab2@14322>    MOVE.l d1,lastinstruction
0003983C <AmiBlitz3.ab2@14323>    BSR.w Atokejsr
00039840 <AmiBlitz3.ab2@14324> BRA.w dogtcmp
00039846 <AmiBlitz3.ab2@14328>   MOVE.l #$CE00,D1
0003984C <AmiBlitz3.ab2@14329>    MOVE.l d1,lastinstruction
00039850 <AmiBlitz3.ab2@14330>    BSR.w Atokejsr
00039854 <AmiBlitz3.ab2@14331> BRA.w dogecmp
0003985A <AmiBlitz3.ab2@14336>   TST.b fast                                               ;compare
0003985E <AmiBlitz3.ab2@14337>   BEQ cmpit__org
00039864 <AmiBlitz3.ab2@14341>   MOVE.l destpointer,a0
0003986A <AmiBlitz3.ab2@14342>   SUB.l imm_addr,a0
00039870 <AmiBlitz3.ab2@14343>   CMP.l #6,a0
00039874 <AmiBlitz3.ab2@14344>   BNE cmpit__l11
0003987A <AmiBlitz3.ab2@14345>   MOVE.l imm_addr,a0
00039882 <AmiBlitz3.ab2@14346>   CMP.w #$223c,imm_addr
00039886 <AmiBlitz3.ab2@14347>   BNE cmpit__org
0003988C <AmiBlitz3.ab2@14348>   ADD.w #$8e80,-6(a4)
00039892 <AmiBlitz3.ab2@14351>   CLR.l imm_addr
00039894 <AmiBlitz3.ab2@14352> RTS
0003989A <AmiBlitz3.ab2@14355>   CMP.l #4,a0
0003989E <AmiBlitz3.ab2@14356>   BNE cmpit__l10
000398A2 <AmiBlitz3.ab2@14357>   CMP.b #2,d3
000398A6 <AmiBlitz3.ab2@14358>   BNE cmpit__l11b
000398AC <AmiBlitz3.ab2@14359>   ADD.w #$7e40,-4(a4)
000398AE <AmiBlitz3.ab2@14360> RTS
000398B4 <AmiBlitz3.ab2@14363>  ADD.w #$7e00,-4(a4)
000398B6 <AmiBlitz3.ab2@14364> RTS
000398BC <AmiBlitz3.ab2@14367>    MOVE.l destpointer,a0
000398C2 <AmiBlitz3.ab2@14368>    SUB.l load_var_addr,a0
000398C6 <AmiBlitz3.ab2@14369>    CMP.w #4,a0
000398CA <AmiBlitz3.ab2@14370>    BNE cmpit__org
000398CE <AmiBlitz3.ab2@14371>    CMP.b #3,d3
000398D2 <AmiBlitz3.ab2@14372>    BCS cmpit__lv1
000398D8 <AmiBlitz3.ab2@14373>    CLR.l load_var_addr
000398DE <AmiBlitz3.ab2@14374>    ADD.w #$9080-$200,-4(a4)
000398E0 <AmiBlitz3.ab2@14375> RTS
000398E4 <AmiBlitz3.ab2@14378>   CMP.b #2,d3
000398E8 <AmiBlitz3.ab2@14379>    BNE cmpit__org
000398EE <AmiBlitz3.ab2@14380>    CLR.l load_var_addr
000398F4 <AmiBlitz3.ab2@14381>    ADD.w #$8040-$200,-4(a4)
000398F6 <AmiBlitz3.ab2@14382> RTS
000398FC <AmiBlitz3.ab2@14385>   MOVE.w regnum,D3
000398FE <AmiBlitz3.ab2@14386>   OR.w D3,D1
00039900 <AmiBlitz3.ab2@14387>   LSL.w #8,D3
00039902 <AmiBlitz3.ab2@14388>   LSL.w #1,D3
00039904 <AmiBlitz3.ab2@14389>   OR.w D3,D1
00039906 <AmiBlitz3.ab2@14390>   ADDQ.w #1,D1
0003990A <AmiBlitz3.ab2@14391> BRA.w writeword
0003990E <AmiBlitz3.ab2@14395>    BSR.w cmpit
00039912 <AmiBlitz3.ab2@14398>    MOVE.w mseq(PC),D1
00039916 <AmiBlitz3.ab2@14399> BRA.w cpoke
0003991A <AmiBlitz3.ab2@14403>   BSR.w cmpit
0003991E <AmiBlitz3.ab2@14406>   MOVE.w msne(PC),D1
00039922 <AmiBlitz3.ab2@14407> BRA.w cpoke
00039926 <AmiBlitz3.ab2@14411>   BSR.w cmpit
0003992A <AmiBlitz3.ab2@14414>    MOVE.w mslt(PC),D1
0003992E <AmiBlitz3.ab2@14415> BRA.w cpoke
00039932 <AmiBlitz3.ab2@14419>    BSR.w cmpit
00039936 <AmiBlitz3.ab2@14422>    MOVE.w msle(PC),D1
0003993A <AmiBlitz3.ab2@14423> BRA.w cpoke
0003993E <AmiBlitz3.ab2@14427>    BSR.w cmpit
00039942 <AmiBlitz3.ab2@14430>    MOVE.w msgt(PC),D1
00039946 <AmiBlitz3.ab2@14431> BRA.w cpoke
0003994A <AmiBlitz3.ab2@14435>   BSR.w cmpit
0003994E <AmiBlitz3.ab2@14438>    MOVE.w msge(PC),D1
00039954 <AmiBlitz3.ab2@14441>    OR.w regnum,D1
00039958 <AmiBlitz3.ab2@14442>    CMP.w #5,d2
0003995C <AmiBlitz3.ab2@14443>    BNE cpoke__nod0
00039960 <AmiBlitz3.ab2@14444>    CMP.w #5,d3
00039964 <AmiBlitz3.ab2@14445>    BNE cpoke__nod0
00039966 <AmiBlitz3.ab2@14446>    MOVE.l d1,-(a7)
0003996C <AmiBlitz3.ab2@14447>    MOVE.l #$44004a00,d1                                    ;68k neg.b:tst.b
00039970 <AmiBlitz3.ab2@14448>    BSR writelong
00039972 <AmiBlitz3.ab2@14449>    MOVE.l (a7)+,d1
00039976 <AmiBlitz3.ab2@14452>    BSR.w writeword                                         ;writeseq
00039978 <AmiBlitz3.ab2@14453>    MOVEQ.l #1,d2
0003997E <AmiBlitz3.ab2@14454>    MOVE.l lasttoken,d1
00039984 <AmiBlitz3.ab2@14455>     TST.b fast
00039988 <AmiBlitz3.ab2@14456>     BEQ.s cpoke__l11
0003998E <AmiBlitz3.ab2@14457>    CMP.l #$800b,d1
00039992 <AmiBlitz3.ab2@14458>    BEQ cpoke__l10
00039996 <AmiBlitz3.ab2@14461>   MOVE.w #$4880,D1                                         ;ext.w D regat
0003999C <AmiBlitz3.ab2@14462>   OR.w regnum,D1
000399A0 <AmiBlitz3.ab2@14463>    BSR.w writeword                                         ;writeext.w
000399A2 <AmiBlitz3.ab2@14464>   MOVEQ.l #$02,D2                                          ;type now WORD!
000399A4 <AmiBlitz3.ab2@14467> RTS
000399A8 <AmiBlitz3.ab2@14472>   MOVE.w #$D040,D1
000399AA <AmiBlitz3.ab2@14473>   MOVEQ.l #$02,D2                                          ;writeaddword   ;now a word
000399AE <AmiBlitz3.ab2@14474> BRA.w doplus2
000399B2 <AmiBlitz3.ab2@14478>   MOVE.w #$D040,D1
000399B4 <AmiBlitz3.ab2@14479>   MOVEQ.l #$03,D2                                          ;now a long
000399B8 <AmiBlitz3.ab2@14480>    BSR.w doplus2
000399BC <AmiBlitz3.ab2@14481> BRA.w convert_word_to_long
000399C0 <AmiBlitz3.ab2@14485>   MOVE.w #$D080,D1                                         ;writeaddlong
000399C2 <AmiBlitz3.ab2@14488>   MOVE.w d1,a1
000399C8 <AmiBlitz3.ab2@14489>   TST.b fast
000399CC <AmiBlitz3.ab2@14490>   BEQ doplus2__l10
000399CE <AmiBlitz3.ab2@14494>   ASR.w #8,d1
000399D2 <AmiBlitz3.ab2@14495>   CMP.b #$90,d1
000399D6 <AmiBlitz3.ab2@14496>   BEQ doplus2__sub1
000399DA <AmiBlitz3.ab2@14497>   CMP.b #$d0,d1
000399DE <AmiBlitz3.ab2@14498>   BNE doplus2__l10
000399E2 <AmiBlitz3.ab2@14499>   CMP.b #3,d3
000399E6 <AmiBlitz3.ab2@14500>   BCS doplus2__lq10
000399EC <AmiBlitz3.ab2@14501>   TST.b quickadd
000399F2 <AmiBlitz3.ab2@14505>    MOVE.l destpointer,a0
000399F8 <AmiBlitz3.ab2@14506>    CLR.b quickadd
000399FE <AmiBlitz3.ab2@14507>    CLR.l load_var_addr
00039A04 <AmiBlitz3.ab2@14508>    SUB.l imm_addr,a0
00039A08 <AmiBlitz3.ab2@14509>    CMP.w #6,a0
00039A0C <AmiBlitz3.ab2@14510>    BEQ doplus2__li10
00039A10 <AmiBlitz3.ab2@14511>    CMP.w #4,a0
00039A14 <AmiBlitz3.ab2@14512>    BNE.s doplus2__li1
00039A1A <AmiBlitz3.ab2@14513>    CLR.l imm_addr
00039A20 <AmiBlitz3.ab2@14514>    ADD.w #$a040-$200,-4(a4)
00039A22 <AmiBlitz3.ab2@14515> RTS
00039A24 <AmiBlitz3.ab2@14518>    MOVE.l a4,a0
00039A2A <AmiBlitz3.ab2@14519>    SUB.l load_var_addr,a0
00039A30 <AmiBlitz3.ab2@14520>    CMP.l #$a,a0
00039A34 <AmiBlitz3.ab2@14521>    BNE doplus2__l10e
00039A3A <AmiBlitz3.ab2@14522>    CLR.l load_var_addr
00039A3E <AmiBlitz3.ab2@14523>    MOVE.w -$8(a4),d1
00039A44 <AmiBlitz3.ab2@14524>    MOVE.l -$4(a4),-$8(a4)
00039A48 <AmiBlitz3.ab2@14525>    MOVE.w d1,-$4(a4)
00039A4E <AmiBlitz3.ab2@14526>    SUB.w #$1980,-$a(a4)
00039A54 <AmiBlitz3.ab2@14527>    SUBQ.l #2,destpointer
00039A56 <AmiBlitz3.ab2@14528> RTS
00039A5C <AmiBlitz3.ab2@14531>   CLR.b quickadd
00039A60 <AmiBlitz3.ab2@14532> BRA doplus2__l10
00039A66 <AmiBlitz3.ab2@14535>    CLR.l imm_addr
00039A6A <AmiBlitz3.ab2@14536>    TST.l -4(a4)                                            ;skip If ADD.l #0,dx
00039A6E <AmiBlitz3.ab2@14537>    BNE doplus2__doit
00039A74 <AmiBlitz3.ab2@14538>    SUBQ.l #6,destpointer
00039A76 <AmiBlitz3.ab2@14539> RTS
00039A7C <AmiBlitz3.ab2@14542>    ADD.w #$b080-$200,-6(a4)
00039A7E <AmiBlitz3.ab2@14543> RTS
00039A84 <AmiBlitz3.ab2@14546>    MOVE.l destpointer,a0
00039A8A <AmiBlitz3.ab2@14547>    SUB.l load_var_addr,a0
00039A8E <AmiBlitz3.ab2@14548>    CMP.w #4,a0
00039A92 <AmiBlitz3.ab2@14549>    BNE doplus2__l10
00039A96 <AmiBlitz3.ab2@14550>    CMP.b #3,d3
00039A9A <AmiBlitz3.ab2@14551>    BNE doplus2__lv1
00039AA0 <AmiBlitz3.ab2@14552>    CLR.l load_var_addr
00039AA6 <AmiBlitz3.ab2@14553>    ADD.w #$b080-$200,-4(a4)
00039AA8 <AmiBlitz3.ab2@14554> RTS
00039AAC <AmiBlitz3.ab2@14557>   CMP.b #2,d3
00039AB0 <AmiBlitz3.ab2@14558>   BNE doplus2__l10
00039AB6 <AmiBlitz3.ab2@14559>   CLR.l load_var_addr
00039ABC <AmiBlitz3.ab2@14560>   ADD.w #$a040-$200,-4(a4)
00039ABE <AmiBlitz3.ab2@14561> RTS
00039AC4 <AmiBlitz3.ab2@14564>   MOVE.w regnum,D3
00039AC6 <AmiBlitz3.ab2@14565>   MOVE.w a1,d1
00039AC8 <AmiBlitz3.ab2@14566>   OR.w D3,D1
00039ACA <AmiBlitz3.ab2@14567>   ADDQ.w #1,D1
00039ACC <AmiBlitz3.ab2@14568>   LSL.w #8,D3
00039ACE <AmiBlitz3.ab2@14569>   LSL.w #1,D3
00039AD0 <AmiBlitz3.ab2@14570>   OR.w D3,D1
00039AD4 <AmiBlitz3.ab2@14571> BRA.w writeword
00039AD8 <AmiBlitz3.ab2@14574>    CMP.b #3,d3
00039ADC <AmiBlitz3.ab2@14575>    BCS doplus2__sub1_lq10
00039AE2 <AmiBlitz3.ab2@14576>    TST.b quickadd
00039AE8 <AmiBlitz3.ab2@14580>    MOVE.l destpointer,a0
00039AEE <AmiBlitz3.ab2@14581>    CLR.b quickadd
00039AF4 <AmiBlitz3.ab2@14582>    CLR.l load_var_addr
00039AFA <AmiBlitz3.ab2@14583>    SUB.l imm_addr,a0
00039AFE <AmiBlitz3.ab2@14584>    CMP.w #6,a0
00039B02 <AmiBlitz3.ab2@14585>    BEQ doplus2__sub1_li10
00039B06 <AmiBlitz3.ab2@14586>    CMP.w #4,a0
00039B0A <AmiBlitz3.ab2@14587>    BNE.s doplus2__sub1_li1
00039B10 <AmiBlitz3.ab2@14588>    CLR.l imm_addr
00039B16 <AmiBlitz3.ab2@14589>    ADD.w #$6040-$200,-4(a4)
00039B18 <AmiBlitz3.ab2@14590> RTS
00039B1A <AmiBlitz3.ab2@14593>    MOVE.l a4,a0
00039B20 <AmiBlitz3.ab2@14594>     SUB.l load_var_addr,a0
00039B26 <AmiBlitz3.ab2@14595>     CMP.l #$a,a0
00039B2A <AmiBlitz3.ab2@14596>     BNE doplus2__sub1_l10e
00039B30 <AmiBlitz3.ab2@14597>    CLR.l load_var_addr
00039B34 <AmiBlitz3.ab2@14598>    MOVE.w -$8(a4),d1
00039B3A <AmiBlitz3.ab2@14599>    MOVE.l -$4(a4),-$8(a4)
00039B3E <AmiBlitz3.ab2@14600>    MOVE.w d1,-$4(a4)
00039B44 <AmiBlitz3.ab2@14601>    SUB.w #$1b80,-$a(a4)
00039B4A <AmiBlitz3.ab2@14602>    SUBQ.l #2,destpointer
00039B4C <AmiBlitz3.ab2@14603> RTS
00039B52 <AmiBlitz3.ab2@14606>   CLR.b quickadd
00039B56 <AmiBlitz3.ab2@14607> BRA doplus2__sub1_l10
00039B5C <AmiBlitz3.ab2@14610>    CLR.l imm_addr
00039B62 <AmiBlitz3.ab2@14611>    ADD.w #$7080-$200,-6(a4)
00039B64 <AmiBlitz3.ab2@14612> RTS
00039B6A <AmiBlitz3.ab2@14615>    MOVE.l destpointer,a0
00039B70 <AmiBlitz3.ab2@14616>    SUB.l load_var_addr,a0
00039B74 <AmiBlitz3.ab2@14617>    CMP.w #4,a0
00039B78 <AmiBlitz3.ab2@14618>    BNE doplus2__sub1_l10
00039B7C <AmiBlitz3.ab2@14619>    CMP.b #3,d3
00039B80 <AmiBlitz3.ab2@14620>    BNE doplus2__sub1_lv1
00039B86 <AmiBlitz3.ab2@14621>    CLR.l load_var_addr
00039B8C <AmiBlitz3.ab2@14622>    ADD.w #$7080-$200,-4(a4)
00039B8E <AmiBlitz3.ab2@14623> RTS
00039B92 <AmiBlitz3.ab2@14626>    CMP.b #2,d3
00039B96 <AmiBlitz3.ab2@14627>    BNE doplus2__sub1_l10
00039B9C <AmiBlitz3.ab2@14628>    CLR.l load_var_addr
00039BA2 <AmiBlitz3.ab2@14629>    ADD.w #$6040-$200,-4(a4)
00039BA4 <AmiBlitz3.ab2@14630> RTS
00039BAA <AmiBlitz3.ab2@14633>   MOVE.w regnum,D3
00039BAC <AmiBlitz3.ab2@14634>   MOVE.w a1,d1
00039BAE <AmiBlitz3.ab2@14635>   OR.w D3,D1
00039BB0 <AmiBlitz3.ab2@14636>   ADDQ.w #1,D1
00039BB2 <AmiBlitz3.ab2@14637>   LSL.w #8,D3
00039BB4 <AmiBlitz3.ab2@14638>   LSL.w #1,D3
00039BB6 <AmiBlitz3.ab2@14639>   OR.w D3,D1
00039BBA <AmiBlitz3.ab2@14640> BRA.w writeword
00039BBC <AmiBlitz3.ab2@14644>   MOVEQ #0,d0
00039BC2 <AmiBlitz3.ab2@14645>   MOVE.w regnum,d0
00039BC4 <AmiBlitz3.ab2@14646>   ADDQ #1,d0
00039BC6 <AmiBlitz3.ab2@14647>   ASL.w #8,d0
00039BC8 <AmiBlitz3.ab2@14648>   ASL.w #2,d0
00039BCE <AmiBlitz3.ab2@14649>   MOVE.l #$f2000022,d1                                     ;fpu add
00039BD0 <AmiBlitz3.ab2@14650>   OR.l d0,d1
00039BD6 <AmiBlitz3.ab2@14651>   MOVE.w regnum,d0
00039BD8 <AmiBlitz3.ab2@14652>   ASL.w #7,d0
00039BDA <AmiBlitz3.ab2@14653>   OR.l d0,d1
00039BDE <AmiBlitz3.ab2@14654> BRA.w writelong
00039BE4 <AmiBlitz3.ab2@14660>   TST.b iee
00039BE8 <AmiBlitz3.ab2@14661>   BNE do_plus_float__fadd1
00039BEC <AmiBlitz3.ab2@14662>   MOVE.w #$FFBE,D1                                         ;#-66,d1 org soruce ;floatadd
00039BF2 <AmiBlitz3.ab2@14665>    MOVE.w D1,libjsr+2
00039BF6 <AmiBlitz3.ab2@14666>    BSR.w JL_0_AD40
00039BF8 <AmiBlitz3.ab2@14667>   MOVE.l D4,D1
00039BFC <AmiBlitz3.ab2@14668>    BSR.w JL_0_AD38
00039C00 <AmiBlitz3.ab2@14669>   MOVE.w #$C900,D1
00039C04 <AmiBlitz3.ab2@14670>    BSR.w Atokejsr
00039C08 <AmiBlitz3.ab2@14671>    BSR.w JL_0_A352
00039C0E <AmiBlitz3.ab2@14672>   MOVE.l libjsr,D1
00039C12 <AmiBlitz3.ab2@14673>    BSR.w writelong
00039C16 <AmiBlitz3.ab2@14674>    BSR.w JL_0_A36E
00039C18 <AmiBlitz3.ab2@14675>   MOVE.l D5,D1
00039C1C <AmiBlitz3.ab2@14676> BRA.w JL_0_AD38
00039C22 <AmiBlitz3.ab2@14680>   MOVE.w regnum,D1
00039C24 <AmiBlitz3.ab2@14681>   LSL.w #8,D1
00039C26 <AmiBlitz3.ab2@14682>   LSL.w #1,D1
00039C28 <AmiBlitz3.ab2@14683>   MOVE.w D1,-(A7)
00039C2C <AmiBlitz3.ab2@14684>   CMP.w #3072,d1
00039C30 <AmiBlitz3.ab2@14685>   BEQ 'l1
00039C36 <AmiBlitz3.ab2@14686>   OR.w addcode,D1                                          ;move.l (a7)+,d0
00039C3A <AmiBlitz3.ab2@14687> BRA 'l2
00039C3E <AmiBlitz3.ab2@14690>    MOVE.w #$588f,d1                                        ;addq.l #4,a7
00039C42 <AmiBlitz3.ab2@14693>    BSR.w writeword
00039C44 <AmiBlitz3.ab2@14694>   MOVE.w (A7)+,D1
00039C4A <AmiBlitz3.ab2@14695>   OR.w addcode+2,D1                                        ;native string add.l d0,(a7)
00039C4E <AmiBlitz3.ab2@14696> BRA.w writeword
00039C52 <AmiBlitz3.ab2@14702>   MOVE.w #$9040,D1
00039C56 <AmiBlitz3.ab2@14703> BRA.w doplus2
00039C5A <AmiBlitz3.ab2@14707>   MOVE.w #$9040,D1
00039C5E <AmiBlitz3.ab2@14708> BRA.w doplus2
00039C62 <AmiBlitz3.ab2@14712>   MOVE.w #$9080,D1
00039C66 <AmiBlitz3.ab2@14713> BRA.w doplus2
00039C6C <AmiBlitz3.ab2@14717>    TST.b iee
00039C70 <AmiBlitz3.ab2@14718>     BNE do_minus_float__fs1
00039C74 <AmiBlitz3.ab2@14719>   MOVE.w #$FFB8,D1                                         ;floatsub
00039C78 <AmiBlitz3.ab2@14720> BRA.w doflib
00039C7A <AmiBlitz3.ab2@14723>   MOVEQ #0,d0
00039C80 <AmiBlitz3.ab2@14724>   MOVE.w regnum,d0
00039C82 <AmiBlitz3.ab2@14725>   ADDQ #1,d0
00039C84 <AmiBlitz3.ab2@14726>   ASL.w #8,d0
00039C86 <AmiBlitz3.ab2@14727>   ASL.w #2,d0
00039C8C <AmiBlitz3.ab2@14728>   MOVE.l #$f2000028,d1
00039C8E <AmiBlitz3.ab2@14729>   OR.l d0,d1
00039C94 <AmiBlitz3.ab2@14730>   MOVE.w regnum,d0
00039C96 <AmiBlitz3.ab2@14731>   ASL.w #7,d0
00039C98 <AmiBlitz3.ab2@14732>   OR.l d0,d1
00039C9C <AmiBlitz3.ab2@14733> BRA.w writelong
00039CA0 <AmiBlitz3.ab2@14739>   MOVE.w #$C1C0,D1
00039CA2 <AmiBlitz3.ab2@14740>   MOVEQ.l #$02,D2                                          ;now a word
00039CA6 <AmiBlitz3.ab2@14741> BRA.w doplus2
00039CAA <AmiBlitz3.ab2@14745>   MOVE.w #$C1C0,D1
00039CAC <AmiBlitz3.ab2@14746>   MOVEQ.l #$03,D2                                          ;now a long.
00039CB0 <AmiBlitz3.ab2@14747> BRA.w doplus2
00039CB4 <AmiBlitz3.ab2@14751>   MOVE.w #$CA00,D1                                         ;quickmul
00039CB8 <AmiBlitz3.ab2@14752> BRA.w domylib
00039CBE <AmiBlitz3.ab2@14756>   TST.b fast
00039CC2 <AmiBlitz3.ab2@14757>   BNE.s 'l10
00039CC6 <AmiBlitz3.ab2@14758>   MOVE.w #$CA01,D1                                         ;writelongmul
00039CCA <AmiBlitz3.ab2@14759> BRA.w domylib
00039CD0 <AmiBlitz3.ab2@14768>    MOVE.l destpointer,a0
00039CD6 <AmiBlitz3.ab2@14769>    SUB.l imm_addr,a0
00039CDA <AmiBlitz3.ab2@14770>    CMP.w #6,a0
00039CDE <AmiBlitz3.ab2@14771>    BNE 'li1
00039CE0 <AmiBlitz3.ab2@14772>    MOVEQ.l #2,d1
00039CE2 <AmiBlitz3.ab2@14773>    MOVEQ #1,d3
00039CE6 <AmiBlitz3.ab2@14776>   CMP.l -4(a4),d1
00039CEA <AmiBlitz3.ab2@14777>    BEQ 'oklsl
00039CEC <AmiBlitz3.ab2@14778>     LSL.l #1,d1
00039CF2 <AmiBlitz3.ab2@14779>     ADD.l #1,d3
00039CF8 <AmiBlitz3.ab2@14780>     CMP.l #9,d3
00039CFC <AmiBlitz3.ab2@14781>     BNE 'ag
00039D00 <AmiBlitz3.ab2@14782>    MOVE.w -2(a4),d1
00039D04 <AmiBlitz3.ab2@14783>    BSR writeword
00039D0A <AmiBlitz3.ab2@14784>    MOVE.w -6(a4),-4(a4)
00039D12 <AmiBlitz3.ab2@14785>    MOVE.l #$4c3c0800,-8(a4)
00039D18 <AmiBlitz3.ab2@14786>    MOVE.w regnum,D3
00039D1C <AmiBlitz3.ab2@14787>    MULS #$1000,D3
00039D20 <AmiBlitz3.ab2@14788>    OR.w D3,-6(a4)
00039D26 <AmiBlitz3.ab2@14789>    CLR.l load_var_addr
00039D2C <AmiBlitz3.ab2@14790>    CLR.l imm_addr
00039D30 <AmiBlitz3.ab2@14791> BRA 'li3
00039D34 <AmiBlitz3.ab2@14794>    CMP.w #8,d3
00039D38 <AmiBlitz3.ab2@14795>    BEQ 'ok
00039D3A <AmiBlitz3.ab2@14796>    ASL.l #1,d3
00039D3C <AmiBlitz3.ab2@14797>    ASL.l #8,d3
00039D40 <AmiBlitz3.ab2@14798>    MOVE.w #$e188,d1
00039D42 <AmiBlitz3.ab2@14799>    OR.w d3,d1
00039D46 <AmiBlitz3.ab2@14800>    MOVE.w d1,-6(a4)
00039D4A <AmiBlitz3.ab2@14801> BRA 'okls
00039D50 <AmiBlitz3.ab2@14804>   MOVE.w #$e188,-6(a4)                                     ;lsl.l #,dx
00039D56 <AmiBlitz3.ab2@14807>   MOVE.w regnum,d3
00039D5A <AmiBlitz3.ab2@14808>    OR.b d3,-5(a4)
00039D60 <AmiBlitz3.ab2@14809>    SUBQ.l #4,destpointer
00039D66 <AmiBlitz3.ab2@14810>    CLR.l load_var_addr
00039D6C <AmiBlitz3.ab2@14811>    CLR.l imm_addr
00039D70 <AmiBlitz3.ab2@14812> BRA 'li3
00039D76 <AmiBlitz3.ab2@14815>    MOVE.l destpointer,a0
00039D7C <AmiBlitz3.ab2@14816>    SUB.l load_var_addr,a0
00039D80 <AmiBlitz3.ab2@14817>    CMP.w #4,a0
00039D84 <AmiBlitz3.ab2@14818>    BNE 'li2
00039D88 <AmiBlitz3.ab2@14819>    MOVE.w -2(a4),d1
00039D8C <AmiBlitz3.ab2@14820>    BSR writeword
00039D92 <AmiBlitz3.ab2@14821>    MOVE.b #$4c,-6(a4)
00039D98 <AmiBlitz3.ab2@14822>    MOVE.w #$0800,-4(a4)
00039D9E <AmiBlitz3.ab2@14823>    MOVE.w regnum,D3
00039DA2 <AmiBlitz3.ab2@14824>    MULS #$1000,d3
00039DA6 <AmiBlitz3.ab2@14825>    OR.w D3,-4(a4)
00039DAA <AmiBlitz3.ab2@14826> BRA 'li3
00039DB0 <AmiBlitz3.ab2@14829>    MOVE.l #$4c010800,d1
00039DB6 <AmiBlitz3.ab2@14830>    MOVE.w regnum,D3
00039DB8 <AmiBlitz3.ab2@14831>    EXT.l d3
00039DBC <AmiBlitz3.ab2@14832>    MULS #$1000,d3
00039DBE <AmiBlitz3.ab2@14833>    OR.w D3,d1
00039DC2 <AmiBlitz3.ab2@14834>    MULS #$10,d3
00039DC4 <AmiBlitz3.ab2@14835>    ADD.l d3,d1
00039DC8 <AmiBlitz3.ab2@14836>    BSR writelong
00039DCA <AmiBlitz3.ab2@14841> RTS
00039DCC <AmiBlitz3.ab2@14845>   MOVE.w D1,-(A7)
00039DD0 <AmiBlitz3.ab2@14846>    BSR.w JL_0_AD40
00039DD2 <AmiBlitz3.ab2@14847>   MOVE.l D4,D1
00039DD6 <AmiBlitz3.ab2@14848>    BSR.w JL_0_AD38
00039DDA <AmiBlitz3.ab2@14849>    BSR.w JL_0_A352
00039DDC <AmiBlitz3.ab2@14850>   MOVEQ #0,d1
00039DDE <AmiBlitz3.ab2@14851>   MOVE.w (A7)+,D1
00039DE4 <AmiBlitz3.ab2@14852>   MOVE.l d1,lastinstruction
00039DE8 <AmiBlitz3.ab2@14853>    BSR.w Atokejsr
00039DEC <AmiBlitz3.ab2@14854>    BSR.w JL_0_A36E
00039DEE <AmiBlitz3.ab2@14855>   MOVE.l D5,D1
00039DF2 <AmiBlitz3.ab2@14856> BRA.w JL_0_AD38
00039DF8 <AmiBlitz3.ab2@14860>    TST.b iee
00039DFC <AmiBlitz3.ab2@14861>     BNE fm1
00039E00 <AmiBlitz3.ab2@14862>  MOVE.w #$FFB2,D1                                          ;floatmul
00039E04 <AmiBlitz3.ab2@14863> BRA.w doflib
00039E06 <AmiBlitz3.ab2@14866>   MOVEQ #0,d0
00039E0C <AmiBlitz3.ab2@14867>  MOVE.w regnum,d0
00039E0E <AmiBlitz3.ab2@14868>  ADDQ #1,d0
00039E10 <AmiBlitz3.ab2@14869>  ASL.w #8,d0
00039E12 <AmiBlitz3.ab2@14870>  ASL.w #2,d0
00039E18 <AmiBlitz3.ab2@14871>  MOVE.l #$f2000023,d1
00039E1A <AmiBlitz3.ab2@14872>  OR.l d0,d1
00039E20 <AmiBlitz3.ab2@14873>  MOVE.w regnum,d0
00039E22 <AmiBlitz3.ab2@14874>  ASL.w #7,d0
00039E24 <AmiBlitz3.ab2@14875>  OR.l d0,d1
00039E28 <AmiBlitz3.ab2@14876> BRA.w writelong
00039E2A <AmiBlitz3.ab2@14880>   MOVE.w D2,-(A7)                                          ;dopow
00039E2C <AmiBlitz3.ab2@14881>   MOVE.w D2,D3
00039E2E <AmiBlitz3.ab2@14882>   MOVEQ.l #$05,D2
00039E32 <AmiBlitz3.ab2@14883>    BSR.w JL_0_9770
00039E38 <AmiBlitz3.ab2@14884>   ADDQ.w #1,regnum
00039E3A <AmiBlitz3.ab2@14885>   MOVE.w (A7)+,D3
00039E3C <AmiBlitz3.ab2@14886>   MOVEQ.l #$05,D2
00039E40 <AmiBlitz3.ab2@14887>    BSR.w writeconvertcode
00039E46 <AmiBlitz3.ab2@14888>   SUBQ.w #1,regnum
00039E4A <AmiBlitz3.ab2@14889>    BSR.w nocando
00039E50 <AmiBlitz3.ab2@14890>    TST.b fpu
00039E54 <AmiBlitz3.ab2@14891>    BEQ 'old
00039E56 <AmiBlitz3.ab2@14892>    MOVEQ #0,d1
00039E5C <AmiBlitz3.ab2@14893>    MOVE.w regnum,d1
00039E5E <AmiBlitz3.ab2@14894>   MOVE.l d1,d0
00039E60 <AmiBlitz3.ab2@14895>   ASL.w #7,d1
00039E62 <AmiBlitz3.ab2@14896>   ASL.w #8,d0
00039E64 <AmiBlitz3.ab2@14897>   ASL.w #2,d0
00039E66 <AmiBlitz3.ab2@14898>   OR.w d0,d1
00039E68 <AmiBlitz3.ab2@14899>   MOVE.l d1,-(a7)
00039E6E <AmiBlitz3.ab2@14901>    OR.l #$f2000016,d1                                       ;flog2.x fp0      ;fpu ^ pow
00039E72 <AmiBlitz3.ab2@14902>    BSR writelong
00039E78 <AmiBlitz3.ab2@14903>    MOVE.w regnum,d0
00039E7A <AmiBlitz3.ab2@14904>  ADDQ #1,d0
00039E7C <AmiBlitz3.ab2@14905>  ASL.w #8,d0
00039E7E <AmiBlitz3.ab2@14906>  ASL.w #2,d0
00039E84 <AmiBlitz3.ab2@14907>  MOVE.l #$f2000023,d1
00039E86 <AmiBlitz3.ab2@14908>  OR.l d0,d1
00039E8C <AmiBlitz3.ab2@14909>  MOVE.w regnum,d0
00039E8E <AmiBlitz3.ab2@14910>  ASL.w #7,d0
00039E90 <AmiBlitz3.ab2@14911>  OR.l d0,d1
00039E96 <AmiBlitz3.ab2@14912>    OR.l #$f2000023,d1                                      ;fmulx.x fp1,fp0
00039E9A <AmiBlitz3.ab2@14913>    BSR writelong
00039E9C <AmiBlitz3.ab2@14914>    MOVE.l (a7)+,d1
00039EA2 <AmiBlitz3.ab2@14916>    OR.l #$f2000011,d1                                      ;ftwotox.x fp0
00039EA6 <AmiBlitz3.ab2@14917>    BSR writelong
00039EA8 <AmiBlitz3.ab2@14918> RTS
00039EAC <AmiBlitz3.ab2@14921>   MOVE.w #$6001,D1
00039EB0 <AmiBlitz3.ab2@14922> BRA.w domylib
00039EB4 <AmiBlitz3.ab2@14928>   MOVEA.l forthsp(PC),A0
00039EB8 <AmiBlitz3.ab2@14929>   MOVE.w #$FFFF,-(A0)                                      ;#-1,-(a0) org source
00039EBA <AmiBlitz3.ab2@14930> RTS
00039EBE <AmiBlitz3.ab2@14936>   MOVE.w #$D400,D1
00039EC2 <AmiBlitz3.ab2@14937> BRA.w domylib
00039EC6 <AmiBlitz3.ab2@14941>   MOVE.w #$D401,D1
00039ECA <AmiBlitz3.ab2@14942> BRA.w domylib
00039ECE <AmiBlitz3.ab2@14946>    BSR.w nocando                                           ;modlib uses an alibjsr here!
00039ED2 <AmiBlitz3.ab2@14947>   MOVE.w #$D402,D1
00039ED6 <AmiBlitz3.ab2@14948> BRA.w domylib
00039EDA <AmiBlitz3.ab2@14952>   MOVE.w #$D403,D1
00039EDC <AmiBlitz3.ab2@14953>   MOVEQ.l #$02,D2                                          ;now a word.
00039EE0 <AmiBlitz3.ab2@14954> BRA.w domylib
00039EE4 <AmiBlitz3.ab2@14958>    BSR.w nocando                                           ;modlib lib uses an alibjsr!  ;domod float
00039EEA <AmiBlitz3.ab2@14959>   TST.b fpu
00039EEE <AmiBlitz3.ab2@14960>   BEQ 'old
00039EF0 <AmiBlitz3.ab2@14961>   MOVEQ #0,d1
00039EF6 <AmiBlitz3.ab2@14962>   MOVE.w regnum,d1                                         ;fpu mod
00039EF8 <AmiBlitz3.ab2@14963>   MOVE.l d1,d0
00039EFA <AmiBlitz3.ab2@14964>   ADDQ.l #1,d1
00039EFC <AmiBlitz3.ab2@14965>   ASL.l #7,d0
00039EFE <AmiBlitz3.ab2@14966>   ASL.l #8,d1
00039F00 <AmiBlitz3.ab2@14967>   ASL.l #2,d1
00039F02 <AmiBlitz3.ab2@14968>   OR.l d0,d1
00039F04 <AmiBlitz3.ab2@14969>   MOVE.l d0,-(a7)
00039F0A <AmiBlitz3.ab2@14970>   OR.l #$f2000021,d1
00039F0E <AmiBlitz3.ab2@14971>   BSR writelong
00039F10 <AmiBlitz3.ab2@14972>   MOVE.l (a7)+,d0
00039F12 <AmiBlitz3.ab2@14973>  RTS
00039F16 <AmiBlitz3.ab2@14976>   MOVE.w #$D404,D1
00039F18 <AmiBlitz3.ab2@14977>   MOVEQ.l #$03,D2                                          ;now a long
00039F1C <AmiBlitz3.ab2@14978> BRA.w domylib
00039F20 <AmiBlitz3.ab2@14986>   MOVE.w #$48C0,D1
00039F26 <AmiBlitz3.ab2@14987>   OR.w regnum,D1
00039F2A <AmiBlitz3.ab2@14988>    BSR.w writeword
00039F2C <AmiBlitz3.ab2@14989>   ADDQ.w #1,D1
00039F30 <AmiBlitz3.ab2@14990>    BSR.w writeword
00039F34 <AmiBlitz3.ab2@14993>    MOVE.w #$48C0,D1
00039F3A <AmiBlitz3.ab2@14994>   OR.w regnum,D1
00039F3E <AmiBlitz3.ab2@14995>    BSR.w writeword
00039F42 <AmiBlitz3.ab2@14996>   MOVE.w #$81C0,D1
00039F46 <AmiBlitz3.ab2@14997> BRA.w doplus2
00039F4C <AmiBlitz3.ab2@15001>   TST.b fast
00039F50 <AmiBlitz3.ab2@15002>   BNE.s 'l10
00039F54 <AmiBlitz3.ab2@15003>   MOVE.w #$CB01,D1
00039F58 <AmiBlitz3.ab2@15004> BRA.w domylib
00039F5C <AmiBlitz3.ab2@15010>   BSR.w JL_0_AD40
00039F5E <AmiBlitz3.ab2@15011>   MOVE.l D4,D1
00039F62 <AmiBlitz3.ab2@15012>    BSR.w JL_0_AD38
00039F66 <AmiBlitz3.ab2@15013>    BSR.w JL_0_A352
00039F6C <AmiBlitz3.ab2@15027>    MOVE.l #$4c410800,d1
00039F70 <AmiBlitz3.ab2@15028>    BSR writelong
00039F74 <AmiBlitz3.ab2@15031>   MOVE.w #$4e71,d1
00039F78 <AmiBlitz3.ab2@15033>    BSR.w JL_0_A36E
00039F7A <AmiBlitz3.ab2@15034>   MOVE.l D5,D1
00039F7E <AmiBlitz3.ab2@15035> BRA.w JL_0_AD38
00039F82 <AmiBlitz3.ab2@15038>     CMP.w #8,d3
00039F86 <AmiBlitz3.ab2@15039>     BEQ 'ok
00039F88 <AmiBlitz3.ab2@15040>     ASL.l #1,d3
00039F8A <AmiBlitz3.ab2@15041>     ASL.l #8,d3
00039F8E <AmiBlitz3.ab2@15042>     MOVE.w #$e080,d1
00039F90 <AmiBlitz3.ab2@15043>     OR.w d3,d1
00039F94 <AmiBlitz3.ab2@15044> BRA 'oklsr2
00039F98 <AmiBlitz3.ab2@15047>   MOVE.w #$e080,d1                                         ;lsr.l #,dx
00039F9E <AmiBlitz3.ab2@15050>      SUBQ.l #6,destpointer
00039FA2 <AmiBlitz3.ab2@15051>      BSR writeword
00039FA4 <AmiBlitz3.ab2@15052>      MOVE.l (a7)+,d3
00039FA6 <AmiBlitz3.ab2@15053>      MOVEQ #0,d1
00039FAC <AmiBlitz3.ab2@15054>      CLR.l load_var_addr
00039FB2 <AmiBlitz3.ab2@15055>      CLR.l imm_addr
00039FB6 <AmiBlitz3.ab2@15056> BRA JL_0_AD38
00039FBA <AmiBlitz3.ab2@15060>   MOVE.w #$CB00,D1                                         ;quickdiv
00039FBE <AmiBlitz3.ab2@15061> BRA.w domylib
00039FC4 <AmiBlitz3.ab2@15065>    TST.b iee
00039FC8 <AmiBlitz3.ab2@15066>    BNE fdiv1
00039FCC <AmiBlitz3.ab2@15067>    MOVE.w #$FFAC,D1                                        ;floatdiv
00039FD0 <AmiBlitz3.ab2@15068> BRA.w doflib
00039FD2 <AmiBlitz3.ab2@15072>   MOVEQ #0,d0
00039FD8 <AmiBlitz3.ab2@15073>   MOVE.w regnum,d0
00039FDA <AmiBlitz3.ab2@15074>   ADDQ #1,d0
00039FDC <AmiBlitz3.ab2@15075>   ASL.w #8,d0
00039FDE <AmiBlitz3.ab2@15076>   ASL.w #2,d0
00039FE4 <AmiBlitz3.ab2@15077>   MOVE.l #$f2000020,d1                                     ;fpu div
00039FE6 <AmiBlitz3.ab2@15078>   OR.l d0,d1
00039FEC <AmiBlitz3.ab2@15079>   MOVE.w regnum,d0
00039FEE <AmiBlitz3.ab2@15080>   ASL.w #7,d0
00039FF0 <AmiBlitz3.ab2@15081>   OR.l d0,d1
00039FF4 <AmiBlitz3.ab2@15082> BRA.w writelong
00039FF8 <AmiBlitz3.ab2@15086>   MOVE.w #$C000,D1
00039FFC <AmiBlitz3.ab2@15087> BRA.w doplus2
0003A000 <AmiBlitz3.ab2@15091>   MOVE.w #$C040,D1
0003A004 <AmiBlitz3.ab2@15092> BRA.w doplus2
0003A008 <AmiBlitz3.ab2@15096>   MOVE.w #$C080,D1
0003A00C <AmiBlitz3.ab2@15097> BRA.w doplus2
0003A010 <AmiBlitz3.ab2@15101>   MOVE.w #$8000,D1
0003A014 <AmiBlitz3.ab2@15102> BRA.w doplus2
0003A018 <AmiBlitz3.ab2@15106>   MOVE.w #$8040,D1
0003A01C <AmiBlitz3.ab2@15107> BRA.w doplus2
0003A020 <AmiBlitz3.ab2@15111>   MOVE.w #$8080,D1
0003A024 <AmiBlitz3.ab2@15112> BRA.w doplus2
0003A028 <AmiBlitz3.ab2@15116>   MOVE.w #$B100,D1
0003A02E <AmiBlitz3.ab2@15119>    MOVE.w regnum,D3
0003A030 <AmiBlitz3.ab2@15120>   OR.w D3,D1
0003A032 <AmiBlitz3.ab2@15121>   ADDQ.w #1,D3
0003A034 <AmiBlitz3.ab2@15122>   LSL.w #8,D3
0003A036 <AmiBlitz3.ab2@15123>   LSL.w #1,D3
0003A038 <AmiBlitz3.ab2@15124>   OR.w D3,D1
0003A03C <AmiBlitz3.ab2@15125> BRA.w writeword
0003A040 <AmiBlitz3.ab2@15129>   MOVE.w #$B140,D1
0003A044 <AmiBlitz3.ab2@15130> BRA.w JL_0_A25C
0003A048 <AmiBlitz3.ab2@15134>   MOVE.w #$B180,D1
0003A04C <AmiBlitz3.ab2@15135> BRA.w JL_0_A25C
0003A050 <AmiBlitz3.ab2@15139>   MOVE.w #$E1A8,D1
0003A054 <AmiBlitz3.ab2@15140> BRA.w JL_0_A298
0003A058 <AmiBlitz3.ab2@15144>   MOVE.w #$E0A8,D1
0003A05C <AmiBlitz3.ab2@15145> BRA.w JL_0_A298
0003A060 <AmiBlitz3.ab2@15149>   MOVE.w #$E0A0,D1
0003A064 <AmiBlitz3.ab2@15150> BRA.w JL_0_A298
0003A066 <AmiBlitz3.ab2@15154>   MOVE.w D1,-(A7)
0003A06C <AmiBlitz3.ab2@15155>   ADDQ.w #1,regnum
0003A06E <AmiBlitz3.ab2@15156>   MOVE.w D2,-(A7)
0003A070 <AmiBlitz3.ab2@15157>   MOVE.w D2,D3
0003A072 <AmiBlitz3.ab2@15158>   MOVEQ.l #$02,D2
0003A076 <AmiBlitz3.ab2@15161>    BSR.w writeconvertcode
0003A078 <AmiBlitz3.ab2@15162>   MOVE.w (A7)+,D2
0003A07E <AmiBlitz3.ab2@15163>   SUBQ.w #1,regnum
0003A082 <AmiBlitz3.ab2@15164>   CMP.w #$4,D2
0003A086 <AmiBlitz3.ab2@15165>    BEQ.w JL_0_A2C2
0003A088 <AmiBlitz3.ab2@15166>   MOVE.w D2,D3
0003A08A <AmiBlitz3.ab2@15167>   MOVEQ.l #$03,D2
0003A08E <AmiBlitz3.ab2@15168>    BSR.w JL_0_9770
0003A090 <AmiBlitz3.ab2@15171>    MOVE.w (A7)+,D1
0003A096 <AmiBlitz3.ab2@15172>   MOVE.w regnum,D3
0003A098 <AmiBlitz3.ab2@15173>   OR.w D3,D1
0003A09A <AmiBlitz3.ab2@15174>   ADDQ.w #1,D3
0003A09C <AmiBlitz3.ab2@15175>   LSL.w #8,D3
0003A09E <AmiBlitz3.ab2@15176>   LSL.w #1,D3
0003A0A0 <AmiBlitz3.ab2@15177>   OR.w D3,D1
0003A0A4 <AmiBlitz3.ab2@15178> BRA.w writeword
0003A0A8 <AmiBlitz3.ab2@15182>   MOVE.w #$0100,D1
0003A0AC <AmiBlitz3.ab2@15183>    BSR.w JL_0_A31C
0003A0B2 <AmiBlitz3.ab2@15184>   MOVE.w regnum,D1
0003A0B6 <AmiBlitz3.ab2@15185>   ORI.w #$56C0,D1
0003A0BA <AmiBlitz3.ab2@15186>    BSR.w writeword
0003A0C0 <AmiBlitz3.ab2@15187>   MOVE.w regnum,D1
0003A0C4 <AmiBlitz3.ab2@15188>   ORI.w #$4880,D1
0003A0C8 <AmiBlitz3.ab2@15189>    BSR.w writeword
0003A0CA <AmiBlitz3.ab2@15190>   MOVEQ.l #$02,D2
0003A0CC <AmiBlitz3.ab2@15191> RTS
0003A0D0 <AmiBlitz3.ab2@15195>   MOVE.w #$01C0,D1
0003A0D4 <AmiBlitz3.ab2@15198>    BSR.w JL_0_A31C
0003A0D6 <AmiBlitz3.ab2@15199>   MOVEQ.l #$03,D2
0003A0D8 <AmiBlitz3.ab2@15200> RTS
0003A0DC <AmiBlitz3.ab2@15204>   MOVE.w #$0180,D1
0003A0E0 <AmiBlitz3.ab2@15205> BRA.w JL_0_A304
0003A0E4 <AmiBlitz3.ab2@15209>   MOVE.w #$0140,D1
0003A0E8 <AmiBlitz3.ab2@15210> BRA.w JL_0_A304
0003A0EA <AmiBlitz3.ab2@15214>   MOVE.w D1,-(A7)
0003A0EC <AmiBlitz3.ab2@15215>   MOVE.w D2,-(A7)
0003A0EE <AmiBlitz3.ab2@15216>   MOVE.w D2,D3
0003A0F0 <AmiBlitz3.ab2@15217>   MOVEQ.l #$03,D2
0003A0F4 <AmiBlitz3.ab2@15218>    BSR.w JL_0_9770
0003A0F6 <AmiBlitz3.ab2@15219>   MOVE.w (A7)+,D3
0003A0F8 <AmiBlitz3.ab2@15220>   MOVEQ.l #$01,D2
0003A0FE <AmiBlitz3.ab2@15221>   ADDQ.w #1,regnum
0003A102 <AmiBlitz3.ab2@15222>    BSR.w writeconvertcode
0003A108 <AmiBlitz3.ab2@15223>   SUBQ.w #1,regnum
0003A10E <AmiBlitz3.ab2@15224>   MOVE.w regnum,D1
0003A110 <AmiBlitz3.ab2@15225>   MOVE.w D1,D2
0003A112 <AmiBlitz3.ab2@15226>   ADDQ.w #1,D2
0003A114 <AmiBlitz3.ab2@15227>   LSL.w #8,D2
0003A116 <AmiBlitz3.ab2@15228>   LSL.w #1,D2
0003A118 <AmiBlitz3.ab2@15229>   OR.w (A7)+,D1
0003A11A <AmiBlitz3.ab2@15230>   OR.w D2,D1
0003A11E <AmiBlitz3.ab2@15231> BRA.w writeword
0003A124 <AmiBlitz3.ab2@15235>   MOVE.w regnum,D1
0003A128 <AmiBlitz3.ab2@15236>    BEQ.w JL_0_A36C
0003A12C <AmiBlitz3.ab2@15237>   ORI.w #$2000,D1
0003A130 <AmiBlitz3.ab2@15238>    BSR.w writeword
0003A134 <AmiBlitz3.ab2@15239>   ADDI.w #$201,D1
0003A138 <AmiBlitz3.ab2@15240>    BSR.w writeword
0003A13A <AmiBlitz3.ab2@15243> RTS
0003A140 <AmiBlitz3.ab2@15247>   MOVE.w regnum,D1
0003A144 <AmiBlitz3.ab2@15248>    BEQ.w JL_0_A384
0003A146 <AmiBlitz3.ab2@15249>   LSL.w #8,D1
0003A148 <AmiBlitz3.ab2@15250>   LSL.w #1,D1
0003A14C <AmiBlitz3.ab2@15251>   ORI.w #$2000,D1
0003A150 <AmiBlitz3.ab2@15252>    BSR.w writeword
0003A152 <AmiBlitz3.ab2@15255> RTS
0003A15A <AmiBlitz3.ab2@15259>    CMPI.w #$7,regnum
0003A15E <AmiBlitz3.ab2@15260>    BCS.w JL_0_A6B4
0003A164 <AmiBlitz3.ab2@15261>   MOVE.l #$f2277700,d1                                     ;fmove.d fp6,-(a7)
0003A168 <AmiBlitz3.ab2@15262>   BSR writelong
0003A16C <AmiBlitz3.ab2@15263>   MOVE.w #$2F06,D1                                         ;d6 to stack
0003A170 <AmiBlitz3.ab2@15265>   CMP.w #$3,D2
0003A174 <AmiBlitz3.ab2@15266>    BCS.w JL_0_A3A2
0003A178 <AmiBlitz3.ab2@15267>   MOVE.w #$2F06,D1
0003A17C <AmiBlitz3.ab2@15270>   BSR.w writeword
0003A17E <AmiBlitz3.ab2@15271>   MOVE.w D1,-(A7)
0003A184 <AmiBlitz3.ab2@15272>   SUBQ.w #1,regnum
0003A188 <AmiBlitz3.ab2@15273>    BSR.w JL_0_A6B4
0003A18E <AmiBlitz3.ab2@15274>   ADDQ.w #1,regnum
0003A194 <AmiBlitz3.ab2@15275>   MOVE.l #$f2001b80,d1
0003A198 <AmiBlitz3.ab2@15276>   BSR writelong
0003A19C <AmiBlitz3.ab2@15277>   MOVE.w #$3E06,D1
0003A1A0 <AmiBlitz3.ab2@15278>   CMP.w #$3,D2
0003A1A4 <AmiBlitz3.ab2@15279>    BCS.w JL_0_A3C8
0003A1A8 <AmiBlitz3.ab2@15280>   MOVE.w #$2E06,D1
0003A1AC <AmiBlitz3.ab2@15283>   BSR.w writeword
0003A1AE <AmiBlitz3.ab2@15284>   MOVE.w (A7)+,D1
0003A1B2 <AmiBlitz3.ab2@15285>   ANDI.w #$F000,D1
0003A1B6 <AmiBlitz3.ab2@15286>   ORI.w #$C1F,D1
0003A1BC <AmiBlitz3.ab2@15287>   JSR writeword
0003A1C2 <AmiBlitz3.ab2@15288>   MOVE.l #$f21f5700,d1                                     ;fmove.d (a7)+,fp6
0003A1C6 <AmiBlitz3.ab2@15289> BRA writelong
0003A1CA <AmiBlitz3.ab2@15293>   BSR.w JL_0_A6B4
0003A1CE <AmiBlitz3.ab2@15294>   MOVE.w #$4440,D1
0003A1D2 <AmiBlitz3.ab2@15295>   CMP.w #$3,D2
0003A1D6 <AmiBlitz3.ab2@15296>    BCS.w JL_0_A406
0003A1DA <AmiBlitz3.ab2@15297>   MOVE.w #$4480,D1
0003A1DE <AmiBlitz3.ab2@15298>   CMP.w #$5,D2
0003A1E2 <AmiBlitz3.ab2@15299>    BCS.w JL_0_A406
0003A1E6 <AmiBlitz3.ab2@15300>   CMP.w #$6,D2
0003A1EA <AmiBlitz3.ab2@15301>    BCC.w illoperr
0003A1EE <AmiBlitz3.ab2@15302>   MOVE.w #$FFC4,D1
0003A1F2 <AmiBlitz3.ab2@15303> BRA.w JL_0_9604
0003A1F8 <AmiBlitz3.ab2@15306>   OR.w regnum,D1                                           ;negate
0003A1FE <AmiBlitz3.ab2@15307>   CLR.l imm_addr
0003A202 <AmiBlitz3.ab2@15308> BRA.w writeword
0003A206 <AmiBlitz3.ab2@15312>    BSR.w eval4
0003A20A <AmiBlitz3.ab2@15313>   CMP.w #$29,D0
0003A20E <AmiBlitz3.ab2@15314>    BEQ.w JL_0_A424
0003A212 <AmiBlitz3.ab2@15315>   CMP.w #$7D,D0
0003A216 <AmiBlitz3.ab2@15316>    BNE.w brackets_                                         ;syntax error brackets
0003A21A <AmiBlitz3.ab2@15319> BRA.w get1bytemain
0003A21E <AmiBlitz3.ab2@15323>    BSR.w eval4
0003A222 <AmiBlitz3.ab2@15324>   CMP.w #$5,D2
0003A226 <AmiBlitz3.ab2@15325>    BCC.w illoperr
0003A22C <AmiBlitz3.ab2@15326>   MOVE.w regnum,D1
0003A230 <AmiBlitz3.ab2@15327>   ORI.w #$4640,D1
0003A234 <AmiBlitz3.ab2@15328>   CMP.w #$3,D2
0003A238 <AmiBlitz3.ab2@15329>    BCS.w writeword
0003A23C <AmiBlitz3.ab2@15330>   EORI.w #$C0,D1
0003A240 <AmiBlitz3.ab2@15331> BRA.w writeword
0003A242 <AmiBlitz3.ab2@15335>   MOVEQ.l #$05,D2                                          ;fpu pi
0003A248 <AmiBlitz3.ab2@15336>    TST.b fpu
0003A24C <AmiBlitz3.ab2@15337>   BEQ 'old
0003A252 <AmiBlitz3.ab2@15338> JMP fpupi
0003A258 <AmiBlitz3.ab2@15341>   MOVE.w regnum,D1
0003A25A <AmiBlitz3.ab2@15342>   LSL.w #8,D1
0003A25C <AmiBlitz3.ab2@15343>   LSL.w #1,D1
0003A260 <AmiBlitz3.ab2@15344>   ORI.w #$203C,D1
0003A264 <AmiBlitz3.ab2@15345>    BSR.w writeword
0003A26A <AmiBlitz3.ab2@15346>   MOVE.l #$C90FDA42,D1
0003A26E <AmiBlitz3.ab2@15347>    BSR.w writelong
0003A272 <AmiBlitz3.ab2@15348> BRA.w get1bytemain
0003A36E <AmiBlitz3.ab2@15356> forthstack:  Ds.l 63                                       ;ds.b  18*32 org source
0003A46A <AmiBlitz3.ab2@15357>              Ds.l 63
0003A4B2 <AmiBlitz3.ab2@15358>              Ds.l 18
0003A4B6 <AmiBlitz3.ab2@15359> forthsp:     Dc.l forthstack
0003A4E2 <AmiBlitz3.ab2@15364>    !fget
0003A4E6 <AmiBlitz3.ab2@15365>    CMP.b #$7e,d0
0003A4EA <AmiBlitz3.ab2@15366>    BNE 'noc
0003A4EC <AmiBlitz3.ab2@15367>    SUBQ.l #1,a5
0003A4F0 <AmiBlitz3.ab2@15368>    BSR get1bytemain
0003A4F4 <AmiBlitz3.ab2@15371>    CMP.b #"#",d0
0003A4F8 <AmiBlitz3.ab2@15372>    BNE 'ld1
0003A4FC <AmiBlitz3.ab2@15373>    CMP.b #$22,(a5)
0003A500 <AmiBlitz3.ab2@15374>    BNE 'ld1
0003A506 <AmiBlitz3.ab2@15375>    JSR addimmi
0003A50A <AmiBlitz3.ab2@15378>    CMP.b #$22,d0
0003A50E <AmiBlitz3.ab2@15379>    BNE 'l11
0003A514 <AmiBlitz3.ab2@15389>    NOT.w instringon
0003A516 <AmiBlitz3.ab2@15392>    TST.b d0
0003A51A <AmiBlitz3.ab2@15393>    BPL 'l10
0003A51C <AmiBlitz3.ab2@15394>    LSL.w #8,d0
0003A51E <AmiBlitz3.ab2@15395>    MOVE.b (a5)+,d0
0003A524 <AmiBlitz3.ab2@15396>    MOVE.l d0,lasttoken
0003A52A <AmiBlitz3.ab2@15397>    MOVE.w d0,lastchar
0003A52E <AmiBlitz3.ab2@15400>   CMP.w #$28,D0
0003A532 <AmiBlitz3.ab2@15401>    BEQ.w JL_0_A410
0003A536 <AmiBlitz3.ab2@15402>   CMP.w #$7B,D0
0003A53A <AmiBlitz3.ab2@15403>    BEQ.w JL_0_A410
0003A53E <AmiBlitz3.ab2@15404>   CMP.w #$2D,D0
0003A542 <AmiBlitz3.ab2@15405>    BEQ.w JL_0_A3DA
0003A546 <AmiBlitz3.ab2@15406>   CMP.w #-$7F77,D0
0003A54A <AmiBlitz3.ab2@15407>    BEQ.w JL_0_A428
0003A54E <AmiBlitz3.ab2@15408>   MOVEA.l forthsp(PC),A1
0003A554 <AmiBlitz3.ab2@15409>   CMPA.l #forthsp,A1
0003A558 <AmiBlitz3.ab2@15410>    BCC.w conmemerr
0003A55E <AmiBlitz3.ab2@15411>   MOVE.l destpointer,(A1)+
0003A564 <AmiBlitz3.ab2@15412>   MOVE.l hunkoffsetbase,(A1)+
0003A56A <AmiBlitz3.ab2@15413>   MOVE.l lasta6,(A1)+
0003A570 <AmiBlitz3.ab2@15414>   MOVE.w lasta6,(A1)+
0003A572 <AmiBlitz3.ab2@15415>   CLR.w (A1)+
0003A574 <AmiBlitz3.ab2@15416>   CLR.w (A1)+
0003A57A <AmiBlitz3.ab2@15417>   MOVE.l A1,forthsp
0003A58C <AmiBlitz3.ab2@15419>    !compare2
0003A590 <AmiBlitz3.ab2@15420>    BEQ.w JL_0_B224
0003A594 <AmiBlitz3.ab2@15421>   CMP.w #".",D0
0003A598 <AmiBlitz3.ab2@15422>    BEQ.w JL_0_B21E
0003A59C <AmiBlitz3.ab2@15423>   CMP.w #"#",D0
0003A5A0 <AmiBlitz3.ab2@15424>    BEQ.w get_constant
0003A5A4 <AmiBlitz3.ab2@15425>   CMP.w #"$",D0
0003A5A8 <AmiBlitz3.ab2@15426>    BEQ.w get_hexconstant
0003A5AC <AmiBlitz3.ab2@15427>   CMP.w #"%",D0
0003A5B0 <AmiBlitz3.ab2@15428>    BEQ.w JL_0_A8C0
0003A5B4 <AmiBlitz3.ab2@15429>   CMP.w #-$7FD1,D0
0003A5B8 <AmiBlitz3.ab2@15430>    BEQ.w _SizeOf
0003A5BC <AmiBlitz3.ab2@15431>   CMP.w #-$7F46,D0
0003A5C0 <AmiBlitz3.ab2@15432>    BEQ.w JL_0_A44E
0003A5C4 <AmiBlitz3.ab2@15433>   CMP.w #-$7F3B,D0
0003A5C8 <AmiBlitz3.ab2@15434>    BEQ.w JL_0_A83C
0003A5CC <AmiBlitz3.ab2@15435>   CMP.w #-$7F3A,D0
0003A5D0 <AmiBlitz3.ab2@15436>    BEQ.w JL_0_A846
0003A5D6 <AmiBlitz3.ab2@15437>   MOVE.w constmode,D1
0003A5DA <AmiBlitz3.ab2@15438>    BEQ.w JL_0_A776
0003A5FC <AmiBlitz3.ab2@15439>    !compare1                                               ;bsr.w tstalpha
0003A600 <AmiBlitz3.ab2@15440>    BEQ.w JL_0_AF22
0003A604 <AmiBlitz3.ab2@15441>   CMP.w #$5F,D0
0003A608 <AmiBlitz3.ab2@15442>    BEQ.w JL_0_AF22
0003A60C <AmiBlitz3.ab2@15443>   CMP.w #$22,D0
0003A610 <AmiBlitz3.ab2@15444>    BEQ.w JL_0_AF00
0003A614 <AmiBlitz3.ab2@15445> BRA.w syntaxerr
0003A61A <AmiBlitz3.ab2@15449>   MOVE.w cfetchmode,D1
0003A61E <AmiBlitz3.ab2@15450>   BEQ.w JL_0_A784
0003A622 <AmiBlitz3.ab2@15451> BRA.w badconerr
0003A628 <AmiBlitz3.ab2@15454> JMP syntaxerropt4
0003A62A <AmiBlitz3.ab2@15458>   NOT.w -(A1)
0003A64C <AmiBlitz3.ab2@15459>   !compare1                                                ;bsr.w tstalpha
0003A650 <AmiBlitz3.ab2@15460>    BEQ.w JL_0_AF4C
0003A654 <AmiBlitz3.ab2@15461>   CMP.w #$2A,D0
0003A658 <AmiBlitz3.ab2@15462>    BEQ.w JL_0_AF4C
0003A65C <AmiBlitz3.ab2@15463>   CMP.w #$5C,D0
0003A660 <AmiBlitz3.ab2@15464>    BEQ.w JL_0_AF4C
0003A664 <AmiBlitz3.ab2@15465>   CMP.w #$22,D0
0003A668 <AmiBlitz3.ab2@15466>    BEQ.w JL_0_ADC0
0003A66C <AmiBlitz3.ab2@15467>   BTST #$F,D0
0003A670 <AmiBlitz3.ab2@15468>    BNE.w JL_0_AAF2
0003A674 <AmiBlitz3.ab2@15469>   CMP.w #$26,D0
0003A678 <AmiBlitz3.ab2@15470>    BEQ.w JL_0_A90E
0003A67C <AmiBlitz3.ab2@15471>   CMP.w #$3F,D0
0003A680 <AmiBlitz3.ab2@15472>    BEQ.w JL_0_AED4
0003A684 <AmiBlitz3.ab2@15475>   CMP.b #"@",d0
0003A688 <AmiBlitz3.ab2@15476>    BNE syntaxerr
0003A68E <AmiBlitz3.ab2@15477>   TST.b newsyntax
0003A692 <AmiBlitz3.ab2@15478>    BEQ JUMP_syntaxerropt4
0003A698 <AmiBlitz3.ab2@15479>   MOVE.w regnum,D1
0003A69A <AmiBlitz3.ab2@15480>   LSL.w #8,D1
0003A69C <AmiBlitz3.ab2@15481>   LSL.w #1,D1
0003A6A0 <AmiBlitz3.ab2@15482>   ORI.w #$203C,D1
0003A6A4 <AmiBlitz3.ab2@15483>   BSR.w writeword
0003A6A8 <AmiBlitz3.ab2@15484>   CMP.b #$22,(a5)
0003A6AC <AmiBlitz3.ab2@15485>    BNE syntaxerr
0003A6AE <AmiBlitz3.ab2@15486>   ADDQ #1,a5
0003A6B0 <AmiBlitz3.ab2@15487>   MOVEQ #0,d0
0003A6B4 <AmiBlitz3.ab2@15488>   CMP.b #1,d2
0003A6B8 <AmiBlitz3.ab2@15489>    BEQ 'l3b
0003A6BC <AmiBlitz3.ab2@15490>   CMP.b #2,d2
0003A6C0 <AmiBlitz3.ab2@15491>    BEQ 'l2b
0003A6C4 <AmiBlitz3.ab2@15492>   CMP.b #4,d2
0003A6C8 <AmiBlitz3.ab2@15493>    BEQ error_convert_types
0003A6CA <AmiBlitz3.ab2@15494>   MOVE.b (a5)+,d0
0003A6CE <AmiBlitz3.ab2@15495>   BEQ syntaxerr
0003A6D2 <AmiBlitz3.ab2@15496>   CMP.b #$22,d0
0003A6D6 <AmiBlitz3.ab2@15497>   BNE 'l1
0003A6DA <AmiBlitz3.ab2@15498>     MOVE.b #0,d0
0003A6DE <AmiBlitz3.ab2@15499> BRA 'do
0003A6E0 <AmiBlitz3.ab2@15502>   ASL.l #8,d0
0003A6E2 <AmiBlitz3.ab2@15503>   MOVE.b (a5)+,d0
0003A6E6 <AmiBlitz3.ab2@15504>   BEQ syntaxerr
0003A6EA <AmiBlitz3.ab2@15505>   CMP.b #$22,d0
0003A6EE <AmiBlitz3.ab2@15506>   BNE 'l2
0003A6F2 <AmiBlitz3.ab2@15507>     MOVE.b #0,d0
0003A6F4 <AmiBlitz3.ab2@15508>     ASR.l #8,d0
0003A6F8 <AmiBlitz3.ab2@15509> BRA 'do
0003A6FA <AmiBlitz3.ab2@15512>   ASL.l #8,d0
0003A6FC <AmiBlitz3.ab2@15515>   MOVE.b (a5)+,d0
0003A700 <AmiBlitz3.ab2@15516>    BEQ syntaxerr
0003A704 <AmiBlitz3.ab2@15517>    CMP.b #$22,d0
0003A708 <AmiBlitz3.ab2@15518>    BNE 'l3
0003A70C <AmiBlitz3.ab2@15519>    MOVE.b #0,d0
0003A70E <AmiBlitz3.ab2@15520>    ASR.l #8,d0
0003A712 <AmiBlitz3.ab2@15521> BRA 'do
0003A714 <AmiBlitz3.ab2@15524>   ASL.l #8,d0
0003A716 <AmiBlitz3.ab2@15527>   MOVE.b (a5)+,d0
0003A71A <AmiBlitz3.ab2@15528>    BEQ syntaxerr
0003A71E <AmiBlitz3.ab2@15529>    CMP.b #$22,d0
0003A722 <AmiBlitz3.ab2@15530>    BNE 'l4
0003A726 <AmiBlitz3.ab2@15531>    MOVE.b #0,d0
0003A728 <AmiBlitz3.ab2@15532>    ASR.l #8,d0
0003A72C <AmiBlitz3.ab2@15533> BRA 'do
0003A730 <AmiBlitz3.ab2@15536>    CMP.b #$22,(a5)+
0003A734 <AmiBlitz3.ab2@15537>    BNE JUMP_error4char
0003A736 <AmiBlitz3.ab2@15540>   MOVE.l d0,d1
0003A73A <AmiBlitz3.ab2@15541>     BSR writelong
0003A73E <AmiBlitz3.ab2@15542>     BSR get1bytemain
0003A740 <AmiBlitz3.ab2@15543> RTS
0003A744 <AmiBlitz3.ab2@15547>   BSR.w get1bytemain
0003A748 <AmiBlitz3.ab2@15548>   CMP.w #$2E,D0
0003A74C <AmiBlitz3.ab2@15549>    BEQ.b JL_0_A7F4
0003A756 <AmiBlitz3.ab2@15551>   MOVE.w oldqflag,instringon
0003A75C <AmiBlitz3.ab2@15552>   MOVEA.l lastsourcepos,A5
0003A75E <AmiBlitz3.ab2@15553>   MOVE.w D2,-(A7)
0003A762 <AmiBlitz3.ab2@15554>    BSR.w getparameter2
0003A766 <AmiBlitz3.ab2@15555>    BEQ.w syntaxerr
0003A76C <AmiBlitz3.ab2@15556>   LEA varbase,A2
0003A770 <AmiBlitz3.ab2@15557>    BSR.w findvariable
0003A774 <AmiBlitz3.ab2@15558>    BNE.w notypeerr
0003A778 <AmiBlitz3.ab2@15559>   MOVE.w $4(A2),D3
0003A77A <AmiBlitz3.ab2@15560>   EXT.l D3
0003A77C <AmiBlitz3.ab2@15561>   MOVE.w (A7)+,D2
0003A780 <AmiBlitz3.ab2@15562> BRA.w JL_0_B46E
0003A782 <AmiBlitz3.ab2@15566>   MOVE.w D2,-(A7)
0003A786 <AmiBlitz3.ab2@15567>    BSR.w getparameter2
0003A78A <AmiBlitz3.ab2@15568>    BEQ.w syntaxerr
0003A790 <AmiBlitz3.ab2@15569>   LEA newtypebase,A2
0003A794 <AmiBlitz3.ab2@15570>    BSR.w findtype
0003A798 <AmiBlitz3.ab2@15571>    BNE.w notypeerr
0003A79A <AmiBlitz3.ab2@15572>   MOVEQ.l #$00,D3
0003A79E <AmiBlitz3.ab2@15573>   CMP.w #$5C,D0
0003A7A2 <AmiBlitz3.ab2@15574>    BNE.w JL_0_A832
0003A7A6 <AmiBlitz3.ab2@15575>    BSR.w getparameter2
0003A7AA <AmiBlitz3.ab2@15576>    BEQ.w syntaxerr
0003A7AE <AmiBlitz3.ab2@15577>   LEA $4(A2),A2
0003A7B2 <AmiBlitz3.ab2@15578>    BSR.w findvariable2
0003A7B6 <AmiBlitz3.ab2@15579>    BNE.w noofferr
0003A7BA <AmiBlitz3.ab2@15580>   MOVE.w $4(A2),D3
0003A7BE <AmiBlitz3.ab2@15581> BRA.w JL_0_A836
0003A7C2 <AmiBlitz3.ab2@15585>   MOVE.w $8(A2),D3
0003A7C4 <AmiBlitz3.ab2@15588>   MOVE.w (A7)+,D2
0003A7C8 <AmiBlitz3.ab2@15589> BRA.w JL_0_B46E
0003A7CA <AmiBlitz3.ab2@15593>   MOVEQ.l #-$01,D3
0003A7CE <AmiBlitz3.ab2@15594>    BSR.w get1bytemain
0003A7D2 <AmiBlitz3.ab2@15595> BRA.w JL_0_B46E
0003A7D4 <AmiBlitz3.ab2@15599>   MOVEQ.l #$00,D3
0003A7D8 <AmiBlitz3.ab2@15600>    BSR.w get1bytemain
0003A7DC <AmiBlitz3.ab2@15601> BRA.w JL_0_B46E
0003A7E0 <AmiBlitz3.ab2@15605>   CMP.w #$30,D0
0003A7E4 <AmiBlitz3.ab2@15606>    BCS.w JL_0_A876
0003A7E8 <AmiBlitz3.ab2@15607>   CMP.w #$39,D0
0003A7EC <AmiBlitz3.ab2@15608>    BLS.w JL_0_A874
0003A7F0 <AmiBlitz3.ab2@15609>   ANDI.w #$FFDF,D0
0003A7F4 <AmiBlitz3.ab2@15610>   CMP.w #$46,D0
0003A7F8 <AmiBlitz3.ab2@15611>    BHI.w JL_0_A876
0003A7FC <AmiBlitz3.ab2@15612>   CMP.w #$41,D0
0003A800 <AmiBlitz3.ab2@15613>    BCS.w JL_0_A876
0003A802 <AmiBlitz3.ab2@15616>    CMP.w D0,D0
0003A804 <AmiBlitz3.ab2@15619> RTS
0003A808 <AmiBlitz3.ab2@15623>   CMP.w #$31,D0
0003A80C <AmiBlitz3.ab2@15624>    BEQ.w JL_0_A884
0003A810 <AmiBlitz3.ab2@15625>   CMP.w #$30,D0
0003A812 <AmiBlitz3.ab2@15628> RTS
0003A814 <AmiBlitz3.ab2@15632>    MOVEQ #0,d0
0003A816 <AmiBlitz3.ab2@15633>    MOVE.b (a5)+,d0
0003A818 <AmiBlitz3.ab2@15634>    MOVE.b (a5)+,d0
0003A81C <AmiBlitz3.ab2@15635>    BSR ishex
0003A820 <AmiBlitz3.ab2@15636>    BNE syntaxerr
0003A824 <AmiBlitz3.ab2@15637>    SUBI.w #$30,D0
0003A828 <AmiBlitz3.ab2@15638>    CMP.w #$9,D0
0003A82C <AmiBlitz3.ab2@15639>    BLS.w 'l1
0003A82E <AmiBlitz3.ab2@15640>    SUBQ.w #7,D0
0003A830 <AmiBlitz3.ab2@15643>    MOVE.l d0,d1
0003A832 <AmiBlitz3.ab2@15644>    MOVE.b (a5)+,d0
0003A836 <AmiBlitz3.ab2@15645>      BSR ishex
0003A83A <AmiBlitz3.ab2@15646>     BNE syntaxerr
0003A83C <AmiBlitz3.ab2@15647>     LSL.l #4,d1
0003A840 <AmiBlitz3.ab2@15648>     SUBI.w #$30,D0
0003A844 <AmiBlitz3.ab2@15649>    CMP.w #$9,D0
0003A848 <AmiBlitz3.ab2@15650>    BLS.w 'l2
0003A84A <AmiBlitz3.ab2@15651>    SUBQ.w #7,D0
0003A84C <AmiBlitz3.ab2@15654>   ADD.l d1,d0
0003A84E <AmiBlitz3.ab2@15655> RTS
0003A852 <AmiBlitz3.ab2@15659>    BSR.w get1bytemain
0003A856 <AmiBlitz3.ab2@15660>    BSR.w ishex
0003A85A <AmiBlitz3.ab2@15661>    BNE.w syntaxerr
0003A85C <AmiBlitz3.ab2@15662>   MOVEQ.l #$00,D3
0003A860 <AmiBlitz3.ab2@15663>   CMP.w #5,d2
0003A864 <AmiBlitz3.ab2@15664>   BNE JL_0_A894
0003A86A <AmiBlitz3.ab2@15665>   CMP.l #newtype_double,a2
0003A86E <AmiBlitz3.ab2@15666>   BEQ 'doit
0003A874 <AmiBlitz3.ab2@15667>   CMP.l #newtype_float,a2
0003A878 <AmiBlitz3.ab2@15668>   BNE JL_0_A894
0003A880 <AmiBlitz3.ab2@15671>    fmove.s #0,fp0
0003A886 <AmiBlitz3.ab2@15673>   TST.b fpu
0003A88A <AmiBlitz3.ab2@15674>   BEQ JL_0_A894
0003A890 <AmiBlitz3.ab2@15675>   fmove.w #16,fp1
0003A894 <AmiBlitz3.ab2@15676>   fmul.x fp1,fp0
0003A898 <AmiBlitz3.ab2@15677>   SUBI.w #$30,D0
0003A89C <AmiBlitz3.ab2@15678>   CMP.w #$9,D0
0003A8A0 <AmiBlitz3.ab2@15679>    BLS.w JL_0_A8AEa
0003A8A2 <AmiBlitz3.ab2@15680>   SUBQ.w #7,D0
0003A8A6 <AmiBlitz3.ab2@15683>    fmove.w d0,fp1
0003A8AA <AmiBlitz3.ab2@15684>    fadd.x fp1,fp0
0003A8AE <AmiBlitz3.ab2@15685>    BSR.w get1bytemain
0003A8B2 <AmiBlitz3.ab2@15686>    BSR.w ishex
0003A8B6 <AmiBlitz3.ab2@15687>    BEQ.w JL_0_A894a
0003A8BA <AmiBlitz3.ab2@15688> BRA.w nofpregload
0003A8C0 <AmiBlitz3.ab2@15692>   CMP.l #$10000000,D3
0003A8C4 <AmiBlitz3.ab2@15693>    BCC.w overerr
0003A8C6 <AmiBlitz3.ab2@15694>   LSL.l #4,D3
0003A8CA <AmiBlitz3.ab2@15695>   SUBI.w #$30,D0
0003A8CE <AmiBlitz3.ab2@15696>   CMP.w #$9,D0
0003A8D2 <AmiBlitz3.ab2@15697>    BLS.w JL_0_A8AE
0003A8D4 <AmiBlitz3.ab2@15698>   SUBQ.w #7,D0
0003A8D6 <AmiBlitz3.ab2@15701>   OR.w D0,D3
0003A8DA <AmiBlitz3.ab2@15702>    BSR.w get1bytemain
0003A8DE <AmiBlitz3.ab2@15703>    BSR.w ishex
0003A8E2 <AmiBlitz3.ab2@15704>    BEQ.w JL_0_A894
0003A8E6 <AmiBlitz3.ab2@15705> BRA.w JL_0_B46E
0003A8EA <AmiBlitz3.ab2@15709>    BSR.w get1bytemain
0003A8EE <AmiBlitz3.ab2@15710>    BSR.w JL_0_A878
0003A8F2 <AmiBlitz3.ab2@15711>    BNE.w syntaxerr
0003A8F4 <AmiBlitz3.ab2@15712>    MOVEQ.l #$00,D3
0003A8F6 <AmiBlitz3.ab2@15715>    LSL.l #1,D3
0003A8FA <AmiBlitz3.ab2@15716>    BCS.w overerr
0003A8FE <AmiBlitz3.ab2@15717>   SUBI.w #$30,D0
0003A900 <AmiBlitz3.ab2@15718>   OR.w D0,D3
0003A904 <AmiBlitz3.ab2@15719>    BSR.w get1bytemain
0003A908 <AmiBlitz3.ab2@15720>    BSR.w JL_0_A878
0003A90C <AmiBlitz3.ab2@15721>    BEQ.w JL_0_A8CE
0003A910 <AmiBlitz3.ab2@15722> BRA.w JL_0_B46E
0003A912 <AmiBlitz3.ab2@15726>    MOVE.w d2,-(A7)
0003A91A <AmiBlitz3.ab2@15727>    MOVE.b #0,automode
0003A91E <AmiBlitz3.ab2@15728>    CMP.b #"@",(a5)
0003A922 <AmiBlitz3.ab2@15729>    BNE 'l1
0003A924 <AmiBlitz3.ab2@15730>    ADDQ.l #1,a5
0003A92C <AmiBlitz3.ab2@15731>    MOVE.b #1,automode
0003A930 <AmiBlitz3.ab2@15732>    BSR getparameter2
0003A934 <AmiBlitz3.ab2@15733>    BSR findlabel2
0003A938 <AmiBlitz3.ab2@15734>    BNE 'addit
0003A93C <AmiBlitz3.ab2@15735> BRA errormsg_autocount
0003A940 <AmiBlitz3.ab2@15738>   BSR.w addlabelhash
0003A948 <AmiBlitz3.ab2@15739>   MOVE.l #$1,$4(A2)
0003A94C <AmiBlitz3.ab2@15740>   MOVEM.l a2/a5,-(a7)
0003A952 <AmiBlitz3.ab2@15741>   MOVE.w lastchar,-(a7)
0003A958 <AmiBlitz3.ab2@15742>   LEA autostorename,a5
0003A95C <AmiBlitz3.ab2@15743>   BSR getparameter2
0003A960 <AmiBlitz3.ab2@15744>   BSR findlabel2
0003A964 <AmiBlitz3.ab2@15745>   BEQ 'found
0003A968 <AmiBlitz3.ab2@15746>   BSR.w addlabelhash
0003A970 <AmiBlitz3.ab2@15747>   MOVE.l #$1,$4(A2)
0003A978 <AmiBlitz3.ab2@15748>   MOVE.l #0,8(a2)
0003A97A <AmiBlitz3.ab2@15751>    MOVE.w (a7)+,d0
0003A980 <AmiBlitz3.ab2@15752>    MOVE.w d0,lastchar
0003A984 <AmiBlitz3.ab2@15753>   MOVE.l 8(a2),d3
0003A98C <AmiBlitz3.ab2@15754>   ADD.l #1,8(a2)
0003A990 <AmiBlitz3.ab2@15755>   MOVEM.l (a7)+,a2/a5
0003A994 <AmiBlitz3.ab2@15756>   MOVE.l d3,8(a2)
0003A998 <AmiBlitz3.ab2@15757>   MOVE.l $8(A2),D3
0003A99C <AmiBlitz3.ab2@15758> BRA.l 'l3
0003A9A0 <AmiBlitz3.ab2@15761>   BSR.w getparameter2
0003A9A6 <AmiBlitz3.ab2@15762>     TST.b incnif
0003A9AA <AmiBlitz3.ab2@15763>     BEQ 'lc1
0003A9AE <AmiBlitz3.ab2@15764>     BSR.w findlabel2
0003A9B2 <AmiBlitz3.ab2@15765>     BNE 'l5
0003A9B4 <AmiBlitz3.ab2@15766>     MOVEQ #1,d3
0003A9B6 <AmiBlitz3.ab2@15767>     MOVE.w (A7)+,D2
0003A9BA <AmiBlitz3.ab2@15768> BRA JL_0_B46E
0003A9BC <AmiBlitz3.ab2@15771>   MOVEQ #0,d3
0003A9BE <AmiBlitz3.ab2@15772>     MOVE.w (A7)+,D2
0003A9C2 <AmiBlitz3.ab2@15773> BRA JL_0_B46E
0003A9C6 <AmiBlitz3.ab2@15776>    BSR.w findlabel2
0003A9CA <AmiBlitz3.ab2@15777>    BNE.w cnferr
0003A9D2 <AmiBlitz3.ab2@15780>    CMPI.l #$1,$4(A2)
0003A9D6 <AmiBlitz3.ab2@15781>    BNE.w cnferr
0003A9DA <AmiBlitz3.ab2@15783>    MOVE.l $8(A2),D3
0003A9DC <AmiBlitz3.ab2@15784>    MOVE.w (A7)+,D2
0003A9E0 <AmiBlitz3.ab2@15785> BRA.w JL_0_B46E
0003A9E6 <AmiBlitz3.ab2@15789>   CLR.w vartype
0003A9EA <AmiBlitz3.ab2@15790>   BSR.w JL_0_A916
0003A9EC <AmiBlitz3.ab2@15791>   MOVEQ.l #$03,D2
0003A9EE <AmiBlitz3.ab2@15792> RTS
0003A9F2 <AmiBlitz3.ab2@15796>    BSR.w get1bytemain
0003AA04 <AmiBlitz3.ab2@15797>    !compare2
0003AA08 <AmiBlitz3.ab2@15798>    BEQ andop2
0003AA0C <AmiBlitz3.ab2@15799>    BSR.w getparameter
0003AA10 <AmiBlitz3.ab2@15800>    BSR.w JL_0_8E3C
0003AA14 <AmiBlitz3.ab2@15801>    BSR.w calcvar
0003AA18 <AmiBlitz3.ab2@15802>   CMP.b #$7,D2
0003AA1C <AmiBlitz3.ab2@15803>    BNE.w JL_0_A960
0003AA20 <AmiBlitz3.ab2@15804>   BTST #$F,D2
0003AA24 <AmiBlitz3.ab2@15805>    BNE.w JL_0_A94A
0003AA2A <AmiBlitz3.ab2@15806>   MOVE.w D3,stamp2+2
0003AA30 <AmiBlitz3.ab2@15807>   MOVE.l stamp2,D1
0003AA34 <AmiBlitz3.ab2@15808>    BSR.w pokela5s
0003AA38 <AmiBlitz3.ab2@15809> BRA.w JL_0_A978
0003AA3E <AmiBlitz3.ab2@15813>   MOVE.w regnum,D1
0003AA40 <AmiBlitz3.ab2@15814>   LSL.w #8,D1
0003AA42 <AmiBlitz3.ab2@15815>   LSL.w #1,D1
0003AA48 <AmiBlitz3.ab2@15816>   OR.w stamp,D1
0003AA4C <AmiBlitz3.ab2@15817>    BSR.w writeword
0003AA4E <AmiBlitz3.ab2@15818> RTS
0003AA52 <AmiBlitz3.ab2@15822>   BTST #$F,D2
0003AA56 <AmiBlitz3.ab2@15823>    BNE.w JL_0_A978
0003AA5C <AmiBlitz3.ab2@15824>   MOVE.w D3,leaamp+2
0003AA62 <AmiBlitz3.ab2@15825>   MOVE.l leaamp,D1
0003AA66 <AmiBlitz3.ab2@15826>    BSR.w pokela5s
0003AA6C <AmiBlitz3.ab2@15829>   MOVE.w regnum,D1
0003AA6E <AmiBlitz3.ab2@15830>   LSL.w #8,D1
0003AA70 <AmiBlitz3.ab2@15831>   LSL.w #1,D1
0003AA76 <AmiBlitz3.ab2@15832>   OR.w leaamp2,D1
0003AA7A <AmiBlitz3.ab2@15833> BRA.w writeword
0003AA7E <AmiBlitz3.ab2@15837>   MOVE.w #$D200,D1
0003AA82 <AmiBlitz3.ab2@15838>    BSR.w Atokejsr
0003AA84 <AmiBlitz3.ab2@15839>   MOVEQ.l #$03,D2
0003AA86 <AmiBlitz3.ab2@15840> RTS
0003AA8A <AmiBlitz3.ab2@15844> addrcode:  Dc.b $20,$6D,$00,$00                            ;MOVEA.L $0000(A5),A0
0003AA8C <AmiBlitz3.ab2@15845>            Dc.b $D0,$C0                                    ;ADDA.W  D0,A0
0003AA8E <AmiBlitz3.ab2@15846>            Dc.b $20,$08                                    ;MOVE.L  A0,D0
0003AA92 <AmiBlitz3.ab2@15852>    BSR.w get1bytemain
0003AA94 <AmiBlitz3.ab2@15853>   MOVE.w D0,D1
0003AA98 <AmiBlitz3.ab2@15854>    BPL.w syntaxerr
0003AA9A <AmiBlitz3.ab2@15855>   MOVE.w D2,-(A7)
0003AA9E <AmiBlitz3.ab2@15856>   BCLR #$F,D1
0003AAA2 <AmiBlitz3.ab2@15857>    BSR.w searchinstr
0003AAA6 <AmiBlitz3.ab2@15858>   MOVE.l $12(A2),D0
0003AAAA <AmiBlitz3.ab2@15859>   TST.w -$2(A2,D0.L)
0003AAAE <AmiBlitz3.ab2@15860>    BEQ.w freeerr
0003AAB0 <AmiBlitz3.ab2@15861>   MOVE.w (A7)+,D2
0003AAB2 <AmiBlitz3.ab2@15862> RTS
0003AAB6 <AmiBlitz3.ab2@15866>   MOVE.l $0(A5),D0
0003AABA <AmiBlitz3.ab2@15867>    BNE.b ucodeskip
0003AABC <AmiBlitz3.ab2@15868>   MOVEQ.l #-$01,D0
0003AAC0 <AmiBlitz3.ab2@15869> BRA.b usedcodef
0003AAC4 <AmiBlitz3.ab2@15872>   SUB.l $0(A5),D0
0003AAC6 <AmiBlitz3.ab2@15875>   LSR.w #8,D0
0003AACA <AmiBlitz3.ab2@15880>    MOVE.l $0(A5),D0
0003AACE <AmiBlitz3.ab2@15881>    BNE.b ucodeskip2
0003AAD0 <AmiBlitz3.ab2@15882>   MOVEQ.l #-$01,D0
0003AAD4 <AmiBlitz3.ab2@15883> BRA.b usedcode2f
0003AAD8 <AmiBlitz3.ab2@15886>   SUB.l $0(A5),D0                                          ;usedcode2
0003AADA <AmiBlitz3.ab2@15887>   LSR.w #8,D0
0003AADC <AmiBlitz3.ab2@15890>   LSR.w #8,D0
0003AADE <AmiBlitz3.ab2@15895>   MOVE.l D0,-(A7)
0003AAE0 <AmiBlitz3.ab2@15898>   MOVE.l (A7)+,D0
0003AAE2 <AmiBlitz3.ab2@15901>   MOVE.l D0,D0
0003AAE6 <AmiBlitz3.ab2@15907>   BSR.w JL_0_A9A0
0003AAEA <AmiBlitz3.ab2@15909>   MOVE.w -$2(A2,D0.L),D3
0003AAEE <AmiBlitz3.ab2@15910>   CMP.w #$9,D3
0003AAF2 <AmiBlitz3.ab2@15911>    BCC.w doused__skip
0003AAF6 <AmiBlitz3.ab2@15915>   LEA usedcode(PC),A0
0003AAFA <AmiBlitz3.ab2@15916>   LEA usedcodef(PC),A1
0003AB00 <AmiBlitz3.ab2@15918>   ANDI.w #$F1FF,$E+4(A0)                                   ;and #$f1ff,ucodediv-usedcode(a0) org source
0003AB04 <AmiBlitz3.ab2@15919>   ANDI.w #$7,D3
0003AB06 <AmiBlitz3.ab2@15920>   LSL.w #8,D3
0003AB08 <AmiBlitz3.ab2@15921>   LSL.w #1,D3
0003AB0C <AmiBlitz3.ab2@15922>   OR.w D3,$E+4(A0)                                         ;or  d3,ucodediv-usedcode(a0) org source
0003AB10 <AmiBlitz3.ab2@15923> BRA.w doused__skip2
0003AB14 <AmiBlitz3.ab2@15928>   LEA usedcode2(PC),A0
0003AB18 <AmiBlitz3.ab2@15929>   LEA usedcode2f(PC),A1
0003AB1E <AmiBlitz3.ab2@15931>   ANDI.w #$F1FF,$10+4(A0)                                  ;and #$f1ff,ucodediv2-usedcode2(a0) org source
0003AB20 <AmiBlitz3.ab2@15932>   SUBQ.w #8,D3
0003AB22 <AmiBlitz3.ab2@15933>   LSL.w #8,D3
0003AB24 <AmiBlitz3.ab2@15934>   LSL.w #1,D3
0003AB28 <AmiBlitz3.ab2@15935>   OR.w D3,$10+4(A0)                                        ;or  d3,ucodediv2-usedcode2(a0) org source
0003AB2C <AmiBlitz3.ab2@15938>   MOVE.w -$6(A2,D0.L),D3
0003AB30 <AmiBlitz3.ab2@15939>   MOVE.w D3,$C+4(A0)                                       ;move d3,ucodeskip-usedcode+2(a0) org source
0003AB32 <AmiBlitz3.ab2@15940>   ADDQ.w #4,D3
0003AB36 <AmiBlitz3.ab2@15941>   MOVE.w D3,$2(A0)
0003AB3C <AmiBlitz3.ab2@15942>   MOVE.w regnum,D1
0003AB40 <AmiBlitz3.ab2@15943>    BEQ.w doused__skip3
0003AB44 <AmiBlitz3.ab2@15944>   MOVE.w usedprep(PC),D1
0003AB48 <AmiBlitz3.ab2@15945>    BSR.w writeword
0003AB4C <AmiBlitz3.ab2@15948>   BSR.w pokecode
0003AB52 <AmiBlitz3.ab2@15949>   MOVE.w regnum,D1
0003AB56 <AmiBlitz3.ab2@15950>    BEQ.w doused__skip4
0003AB58 <AmiBlitz3.ab2@15951>   LSL.w #8,D1
0003AB5A <AmiBlitz3.ab2@15952>   LSL.w #1,D1
0003AB5E <AmiBlitz3.ab2@15953>   OR.w usedfix(PC),D1
0003AB62 <AmiBlitz3.ab2@15954>    BSR.w writeword
0003AB66 <AmiBlitz3.ab2@15955>   MOVE.w useddone(PC),D1
0003AB6A <AmiBlitz3.ab2@15956>    BSR.w writeword
0003AB6C <AmiBlitz3.ab2@15959>    MOVEQ.l #$02,D2
0003AB70 <AmiBlitz3.ab2@15960> BRA.w get1bytemain
0003AB74 <AmiBlitz3.ab2@15968>    BSR.w JL_0_A9A0
0003AB76 <AmiBlitz3.ab2@15970>   MOVEQ.l #$00,D3
0003AB7A <AmiBlitz3.ab2@15971>   MOVE.w -$4(A2,D0.L),D3
0003AB7E <AmiBlitz3.ab2@15972>    BSR.w get1bytemain
0003AB82 <AmiBlitz3.ab2@15973> BRA.w JL_0_B46E
0003AB86 <AmiBlitz3.ab2@15980>    BSR.w get1bytemain
0003AB88 <AmiBlitz3.ab2@15981>   MOVE.w D0,-(A7)
0003AB8C <AmiBlitz3.ab2@15982>    BSR.w get1bytemain
0003AB90 <AmiBlitz3.ab2@15983>   CMP.w #$28,D0
0003AB94 <AmiBlitz3.ab2@15984>    BNE.w syntaxerr
0003AB96 <AmiBlitz3.ab2@15985>   MOVE.w (A7)+,D0
0003AB9A <AmiBlitz3.ab2@15986>    BSR.w JL_0_C340
0003AB9E <AmiBlitz3.ab2@15987>    BSR.w reget
0003ABA2 <AmiBlitz3.ab2@15988>   CMP.w #$29,D0
0003ABA6 <AmiBlitz3.ab2@15989>    BNE.w syntaxerr
0003ABAA <AmiBlitz3.ab2@15993>   LEA addrcode(PC),A0
0003ABAE <AmiBlitz3.ab2@15994>   LEA addrcodef(PC),A1
0003ABB4 <AmiBlitz3.ab2@15995>   MOVE.w -$6(A2),$2(A0)
0003ABB8 <AmiBlitz3.ab2@15996>   MOVE.w $4(A0),D1
0003ABBC <AmiBlitz3.ab2@15997>   ANDI.w #$FFF8,D1
0003ABC2 <AmiBlitz3.ab2@15998>   OR.w regnum,D1
0003ABC6 <AmiBlitz3.ab2@15999>   MOVE.w D1,$4(A0)
0003ABCA <AmiBlitz3.ab2@16000>   MOVE.w $6(A0),D1
0003ABCE <AmiBlitz3.ab2@16001>   ANDI.w #$F1FF,D1
0003ABD4 <AmiBlitz3.ab2@16002>   MOVE.w regnum,D0
0003ABD6 <AmiBlitz3.ab2@16003>   LSL.w #8,D0
0003ABD8 <AmiBlitz3.ab2@16004>   LSL.w #1,D0
0003ABDA <AmiBlitz3.ab2@16005>   OR.w D0,D1
0003ABDE <AmiBlitz3.ab2@16006>   MOVE.w D1,$6(A0)
0003ABE2 <AmiBlitz3.ab2@16007>    BSR.w pokecode
0003ABE4 <AmiBlitz3.ab2@16008>   MOVEQ.l #$03,D2
0003ABE8 <AmiBlitz3.ab2@16009> BRA.w get1bytemain
0003ABEC <AmiBlitz3.ab2@16013>   CMP.w #-$7F4D,D0
0003ABF0 <AmiBlitz3.ab2@16014>    BHI.w JL_0_AAFE
0003ABF4 <AmiBlitz3.ab2@16015> BRA.w syntaxerr
0003ABF8 <AmiBlitz3.ab2@16019>    CMP.w #$b581,d0
0003ABFC <AmiBlitz3.ab2@16020>    BNE nonull
0003AC00 <AmiBlitz3.ab2@16021>    CMP.b #7,d2
0003AC04 <AmiBlitz3.ab2@16022>    BEQ nonull
0003AC08 <AmiBlitz3.ab2@16023>    MOVE.w #$7000,d1                                            ;asm instr moveq #0,dx
0003AC0E <AmiBlitz3.ab2@16024>    MOVE.w regnum,d0
0003AC10 <AmiBlitz3.ab2@16025>    ASL.l #7,d0
0003AC12 <AmiBlitz3.ab2@16026>    ASL.l #2,d0
0003AC14 <AmiBlitz3.ab2@16027>    OR.l d0,d1
0003AC18 <AmiBlitz3.ab2@16028>    BSR writeword
0003AC1E <AmiBlitz3.ab2@16029>    JSR get1bytemain
0003AC20 <AmiBlitz3.ab2@16030>    RTS
0003AC24 <AmiBlitz3.ab2@16032> nonull  CMP.w #-$7F4A,D0
0003AC28 <AmiBlitz3.ab2@16033>    BEQ.w JL_0_A98C
0003AC2C <AmiBlitz3.ab2@16034>   CMP.w #-$7F48,D0
0003AC30 <AmiBlitz3.ab2@16035>    BEQ.w doaddr
0003AC34 <AmiBlitz3.ab2@16036>   CMP.w #-$7F3C,D0
0003AC38 <AmiBlitz3.ab2@16037>    BEQ.w domaximum
0003AC3C <AmiBlitz3.ab2@16038>   CMP.w #-$7F2F,D0
0003AC40 <AmiBlitz3.ab2@16039>    BEQ.w doused
0003AC42 <AmiBlitz3.ab2@16040>   MOVE.w D2,-(A7)
0003AC44 <AmiBlitz3.ab2@16041>   MOVE.w D0,D1
0003AC48 <AmiBlitz3.ab2@16042>   BCLR #$F,D1
0003AC4C <AmiBlitz3.ab2@16044>    BSR.w searchinstr
0003AC4E <AmiBlitz3.ab2@16045>   MOVE.w (A3),D1
0003AC52 <AmiBlitz3.ab2@16046>   BTST #$1,D1
0003AC56 <AmiBlitz3.ab2@16047>    BEQ.w noreturn_                                         ;syntax error noreturn
0003AC5A <AmiBlitz3.ab2@16048>   BTST #$2,D1
0003AC5E <AmiBlitz3.ab2@16049>    BNE.w JL_0_AC1A
0003AC60 <AmiBlitz3.ab2@16050>   LSR.w #8,D1
0003AC66 <AmiBlitz3.ab2@16051>   BTST #$3,$1(A3)
0003AC6A <AmiBlitz3.ab2@16052>    BEQ.w JL_0_AB4C
0003AC70 <AmiBlitz3.ab2@16053>    JSR AJL_0_498A
0003AC72 <AmiBlitz3.ab2@16056>    MOVE.w D1,-(A7)                                         ;is library instruction
0003AC76 <AmiBlitz3.ab2@16057>   CMP.w #$7,D1
0003AC7A <AmiBlitz3.ab2@16058>    BNE.w JL_0_AB5E
0003AC7C <AmiBlitz3.ab2@16059>   MOVE.l A2,-(A7)
0003AC80 <AmiBlitz3.ab2@16060>    BSR.w makesbase
0003AC82 <AmiBlitz3.ab2@16061>   MOVEA.l (A7)+,A2
0003AC86 <AmiBlitz3.ab2@16064>     BSR.w JL_0_AFA2
0003AC88 <AmiBlitz3.ab2@16065>   MOVE.w D3,-(A7)
0003AC8C <AmiBlitz3.ab2@16066>    BSR.w get1bytemain
0003AC8E <AmiBlitz3.ab2@16067>   MOVEQ.l #$00,D1
0003AC92 <AmiBlitz3.ab2@16068>   CMP.w #$28,D0
0003AC96 <AmiBlitz3.ab2@16069>    BNE.w JL_0_AB80
0003AC9A <AmiBlitz3.ab2@16070>    BSR.w JL_0_66F6
0003AC9C <AmiBlitz3.ab2@16071>   TST.w D1
0003ACA0 <AmiBlitz3.ab2@16072>    BEQ.w syntaxerr
0003ACA4 <AmiBlitz3.ab2@16073> BRA.w JL_0_AB84
0003ACAE <AmiBlitz3.ab2@16078>   MOVE.w oldqflag,instringon
0003ACB4 <AmiBlitz3.ab2@16079>   MOVEA.l lastsourcepos,A5
0003ACBA <AmiBlitz3.ab2@16082>    MOVE.w regnum,-(A7)
0003ACC4 <AmiBlitz3.ab2@16083>    MOVE.w regnum,regnumstore
0003ACCA <AmiBlitz3.ab2@16084>    TST.b fpu
0003ACCE <AmiBlitz3.ab2@16085>             BEQ 'nofloat
0003ACD4 <AmiBlitz3.ab2@16086>             CMP.w #$ffff,28(a3)
0003ACD8 <AmiBlitz3.ab2@16087>             BNE 'nofloat
0003ACDE <AmiBlitz3.ab2@16088>             CMP.w #$3c01,34(a3)                            ;val do nofpu stuff
0003ACE2 <AmiBlitz3.ab2@16089>             BEQ 'nofloat
0003ACE8 <AmiBlitz3.ab2@16090>             CMP.w #$3c02,34(a3)                            ;int skip
0003ACEC <AmiBlitz3.ab2@16091>             BEQ 'quick
0003ACF0 <AmiBlitz3.ab2@16092>             CMP.b #5,(a3)
0003ACF4 <AmiBlitz3.ab2@16093>             BNE 'nofloat
0003ACFA <AmiBlitz3.ab2@16096>             CLR.l load_var_addr
0003ACFE <AmiBlitz3.ab2@16097> BRA 'isfpu
0003AD04 <AmiBlitz3.ab2@16100>    CLR.w regnum
0003AD06 <AmiBlitz3.ab2@16103>    MOVE.w D1,-(A7)
0003AD0C <AmiBlitz3.ab2@16104>   BTST #$3,$1(A3)
0003AD10 <AmiBlitz3.ab2@16105>    BEQ.w JL_0_ABB0
0003AD14 <AmiBlitz3.ab2@16124>   MOVE.w $6(A7),D1
0003AD1A <AmiBlitz3.ab2@16125>   MOVE.w d1,peeksize
0003AD1E <AmiBlitz3.ab2@16135>   ORI.w #$7000,D1
0003AD22 <AmiBlitz3.ab2@16136>   BSR.w writeword                                          ;write peekmode
0003AD28 <AmiBlitz3.ab2@16139>   ADDQ.w #1,regnum
0003AD2A <AmiBlitz3.ab2@16140>   MOVE.w (A7),D1
0003AD32 <AmiBlitz3.ab2@16143>   MOVE.w 2(a7),tempregnum
0003AD38 <AmiBlitz3.ab2@16144>   JSR JL_0_4878
0003AD3A <AmiBlitz3.ab2@16145>   TST.w (A7)+
0003AD3E <AmiBlitz3.ab2@16146>    BEQ.w JL_0_ABC6
0003AD42 <AmiBlitz3.ab2@16147>   CMP.w #$29,D0
0003AD46 <AmiBlitz3.ab2@16148>    BNE.w syntaxerr
0003AD4A <AmiBlitz3.ab2@16149>    BSR.w get1bytemain
0003AD4C <AmiBlitz3.ab2@16152>    MOVE.w (A7)+,D1
0003AD52 <AmiBlitz3.ab2@16153>   MOVE.w D1,regnum
0003AD56 <AmiBlitz3.ab2@16154>    BEQ.w JL_0_ABDE
0003AD5C <AmiBlitz3.ab2@16155>    CMP.w #$3c01,24(a2)                                     ;val skipped
0003AD60 <AmiBlitz3.ab2@16156>    BNE 'noval
0003AD66 <AmiBlitz3.ab2@16157>    TST.b fpu
0003AD6A <AmiBlitz3.ab2@16158>    BEQ 'noval
0003AD70 <AmiBlitz3.ab2@16159>    CLR.l load_var_addr
0003AD72 <AmiBlitz3.ab2@16160>    MOVEQ #0,d1
0003AD78 <AmiBlitz3.ab2@16161>    MOVE.w regnum,d1
0003AD7A <AmiBlitz3.ab2@16162>    LSL.l #7,d1
0003AD80 <AmiBlitz3.ab2@16163>    OR.l #$f2000000,d1
0003AD84 <AmiBlitz3.ab2@16164>    BSR writelong
0003AD88 <AmiBlitz3.ab2@16165> BRA JL_0_ABDE
0003AD8E <AmiBlitz3.ab2@16169>    CMP.w #$3c02,24(a2)                                     ;int skipped
0003AD92 <AmiBlitz3.ab2@16170>    BEQ 'quick
0003AD96 <AmiBlitz3.ab2@16171>    CMP.b #5,d2
0003AD9A <AmiBlitz3.ab2@16172>    BNE 'nofpu
0003ADA0 <AmiBlitz3.ab2@16173>    TST.b fpu
0003ADA4 <AmiBlitz3.ab2@16174>    BEQ 'nofpu
0003ADAA <AmiBlitz3.ab2@16179>    CLR.l load_var_addr
0003ADAE <AmiBlitz3.ab2@16180> BRA JL_0_ABDE
0003ADB0 <AmiBlitz3.ab2@16183>   LSL.w #8,D1
0003ADB2 <AmiBlitz3.ab2@16184>   LSL.w #1,D1
0003ADB6 <AmiBlitz3.ab2@16185>   ORI.w #$2000,D1
0003ADBA <AmiBlitz3.ab2@16186>   BSR.w writeword                                          ;write move.l d0,dx
0003ADC0 <AmiBlitz3.ab2@16187>   TST.b fpu
0003ADC4 <AmiBlitz3.ab2@16188>   BEQ JL_0_ABDE
0003ADC6 <AmiBlitz3.ab2@16189>   MOVEQ #0,d1
0003ADCC <AmiBlitz3.ab2@16190>   MOVE.w regnum,d1
0003ADCE <AmiBlitz3.ab2@16191>   LSL.l #7,d1
0003ADD4 <AmiBlitz3.ab2@16192>   OR.l #$f2000000,d1
0003ADD6 <AmiBlitz3.ab2@16196>        MOVE.w (A7)+,D3
0003ADDA <AmiBlitz3.ab2@16197>        BEQ.w JL_0_ABFC
0003ADE0 <AmiBlitz3.ab2@16198>        TST.b fpu
0003ADE4 <AmiBlitz3.ab2@16199>        BEQ 'nofpu
0003ADE6 <AmiBlitz3.ab2@16200>       MOVE.l d0,-(a7)
0003ADE8 <AmiBlitz3.ab2@16201>        MOVE.l a0,-(a7)
0003ADEE <AmiBlitz3.ab2@16202>        MOVE.l stacktrack,d1
0003ADF4 <AmiBlitz3.ab2@16203>        LEA fpustackbase,a0
0003ADFC <AmiBlitz3.ab2@16204>        MOVE.w 0(a0,d1),regmask
0003ADFE <AmiBlitz3.ab2@16205>        MOVE.l (a7)+,a0
0003AE02 <AmiBlitz3.ab2@16206>       MOVE.w #8,d0
0003AE06 <AmiBlitz3.ab2@16209>       BEQ 'ready
0003AE0C <AmiBlitz3.ab2@16210>       BTST d0,regmask
0003AE10 <AmiBlitz3.ab2@16211>       BEQ 'noa7
0003AE12 <AmiBlitz3.ab2@16212>       MOVEQ #0,d1
0003AE14 <AmiBlitz3.ab2@16213>       MOVE.w d0,d1
0003AE16 <AmiBlitz3.ab2@16214>       SUBQ.w #1,d1
0003AE18 <AmiBlitz3.ab2@16215>       ASL #7,d1
0003AE1E <AmiBlitz3.ab2@16217>       OR.l #$f21f5400,d1                                   ;fmove.d (a7)+
0003AE22 <AmiBlitz3.ab2@16218>       BSR writelong
0003AE28 <AmiBlitz3.ab2@16219>       SUBQ.l #2,stacktrack
0003AE2A <AmiBlitz3.ab2@16222>       SUBQ.w #1,d0
0003AE2E <AmiBlitz3.ab2@16223>       BNE 'loop
0003AE30 <AmiBlitz3.ab2@16226>       MOVE.l (a7)+,d0
0003AE36 <AmiBlitz3.ab2@16227>       SUBQ.l #2,stacktrack                                 ;int track
0003AE3A <AmiBlitz3.ab2@16230>    MOVE.w #$4CDF,D1
0003AE3E <AmiBlitz3.ab2@16231>    BSR.w writeword                                         ;write movem.l (a7)+,
0003AE40 <AmiBlitz3.ab2@16232>   MOVEQ.l #$00,D1
0003AE42 <AmiBlitz3.ab2@16233>   MOVEQ.l #$0F,D4
0003AE44 <AmiBlitz3.ab2@16236>     LSL.w #1,D3
0003AE46 <AmiBlitz3.ab2@16237>     ROXR.w #1,D1
0003AE4A <AmiBlitz3.ab2@16238>   DBF D4,JL_0_ABF0
0003AE4E <AmiBlitz3.ab2@16240>    BSR.w writeword
0003AE54 <AmiBlitz3.ab2@16241>    TST.b fast
0003AE58 <AmiBlitz3.ab2@16242>    BEQ JL_0_ABFC
0003AE5E <AmiBlitz3.ab2@16243>    TST.w regnum
0003AE62 <AmiBlitz3.ab2@16244>    BEQ JL_0_ABFC
0003AE68 <AmiBlitz3.ab2@16245>    CMP.w #$3c0e,$1c(a3)                                    ;true
0003AE6C <AmiBlitz3.ab2@16246>    BNE 'l1
0003AE72 <AmiBlitz3.ab2@16247>    MOVE.w regnum,d1
0003AE74 <AmiBlitz3.ab2@16248>    ASL.l #8,d1
0003AE76 <AmiBlitz3.ab2@16249>    ASL.l #1,d1
0003AE7A <AmiBlitz3.ab2@16250>    OR.w #$70ff,d1
0003AE84 <AmiBlitz3.ab2@16251>    SUB.l #12,destpointer
0003AE88 <AmiBlitz3.ab2@16252>    BSR writeword
0003AE8E <AmiBlitz3.ab2@16255>   CMP.w #$3c0f,$1c(a3)                                     ;false
0003AE92 <AmiBlitz3.ab2@16256>    BNE 'l2
0003AE98 <AmiBlitz3.ab2@16257>     MOVE.w regnum,d1
0003AE9A <AmiBlitz3.ab2@16258>     ASL.l #8,d1
0003AE9C <AmiBlitz3.ab2@16259>     ASL.l #1,d1
0003AEA0 <AmiBlitz3.ab2@16260>     OR.w #$7000,d1
0003AEAA <AmiBlitz3.ab2@16261>     SUB.l #12,destpointer
0003AEAE <AmiBlitz3.ab2@16262>     BSR writeword
0003AEB0 <AmiBlitz3.ab2@16266>    MOVE.w (A7)+,D2
0003AEB4 <AmiBlitz3.ab2@16267>   CMP.w #$7,D2                                             ;destination var type
0003AEB8 <AmiBlitz3.ab2@16268>    BNE.w JL_0_AC16
0003AEBE <AmiBlitz3.ab2@16269>   MOVE.w putstlen,D1
0003AEC4 <AmiBlitz3.ab2@16270>   OR.w regnum,D1
0003AEC8 <AmiBlitz3.ab2@16271>    BSR.w writeword
0003AECC <AmiBlitz3.ab2@16274> BRA.w JL_0_AF66
0003AED0 <AmiBlitz3.ab2@16278>   MOVE.w $6(A3),D1
0003AED4 <AmiBlitz3.ab2@16279>    BSR.w uselib
0003AED8 <AmiBlitz3.ab2@16280>    BSR.w JL_0_AD40
0003AEDA <AmiBlitz3.ab2@16281>   MOVE.l D4,D1
0003AEDC <AmiBlitz3.ab2@16282>   MOVE.l D5,-(A7)
0003AEE0 <AmiBlitz3.ab2@16283>    BSR.w JL_0_AD38
0003AEE4 <AmiBlitz3.ab2@16284>   MOVE.w $A(A1),-(A7)
0003AEE6 <AmiBlitz3.ab2@16285>   ADDQ.w #8,A3
0003AEE8 <AmiBlitz3.ab2@16286>   MOVE.w (A3)+,-(A7)
0003AEEA <AmiBlitz3.ab2@16287>   MOVE.l A3,-(A7)
0003AEEE <AmiBlitz3.ab2@16288>    BSR.w get1bytemain
0003AEF0 <AmiBlitz3.ab2@16289>   MOVE.w D0,-(A7)
0003AEF2 <AmiBlitz3.ab2@16290>   MOVEQ.l #$00,D3
0003AEF4 <AmiBlitz3.ab2@16293>   MOVE.b (A3)+,D1
0003AEF8 <AmiBlitz3.ab2@16294>    BMI.w JL_0_AC6A
0003AEFA <AmiBlitz3.ab2@16295>   MOVEQ.l #$03,D2
0003AEFC <AmiBlitz3.ab2@16296>   ADDQ.w #1,D3
0003AF00 <AmiBlitz3.ab2@16297>   MOVEM.l D3/A3,-(A7)
0003AF04 <AmiBlitz3.ab2@16298>    BSR.w peval
0003AF0A <AmiBlitz3.ab2@16299>   SUBQ.w #4,a2offset
0003AF0E <AmiBlitz3.ab2@16300>   MOVEM.l (A7)+,D3/A3
0003AF12 <AmiBlitz3.ab2@16301>   CMP.w #$2C,D0
0003AF16 <AmiBlitz3.ab2@16302>    BEQ.w JL_0_AC40
0003AF18 <AmiBlitz3.ab2@16303>   TST.b (A3)
0003AF1C <AmiBlitz3.ab2@16304>    BPL.w syntaxerr
0003AF1E <AmiBlitz3.ab2@16307>   MOVE.w (A7)+,D1
0003AF22 <AmiBlitz3.ab2@16308>    BSR.w JL_0_AD04
0003AF24 <AmiBlitz3.ab2@16309>   MOVEA.l (A7)+,A3
0003AF26 <AmiBlitz3.ab2@16310>   SUBQ.w #1,D3
0003AF2A <AmiBlitz3.ab2@16311>    BMI.w JL_0_ACBE
0003AF2C <AmiBlitz3.ab2@16314>   TST.b (A3)+
0003AF30 <AmiBlitz3.ab2@16315>    BPL.w JL_0_AC78
0003AF32 <AmiBlitz3.ab2@16316>   SUBQ.w #1,A3
0003AF34 <AmiBlitz3.ab2@16319>     MOVEQ.l #$00,D1
0003AF36 <AmiBlitz3.ab2@16320>     MOVE.b -(A3),D1
0003AF3A <AmiBlitz3.ab2@16321>     BTST #$4,D1
0003AF3E <AmiBlitz3.ab2@16322>      BNE.w JL_0_ACAA
0003AF44 <AmiBlitz3.ab2@16323>     CMP.w regnum,D1
0003AF48 <AmiBlitz3.ab2@16324>      BCC.w JL_0_AC9E
0003AF4A <AmiBlitz3.ab2@16325>     BSET D1,D5
0003AF4C <AmiBlitz3.ab2@16326>     MOVEQ.l #$0F,D0
0003AF4E <AmiBlitz3.ab2@16327>     SUB.w D1,D0
0003AF50 <AmiBlitz3.ab2@16328>     BSET D0,D4
0003AF52 <AmiBlitz3.ab2@16331>     LSL.w #8,D1
0003AF54 <AmiBlitz3.ab2@16332>     LSL.w #1,D1
0003AF58 <AmiBlitz3.ab2@16333>     ORI.w #$201F,D1
0003AF5C <AmiBlitz3.ab2@16334>   BRA.w JL_0_ACB6
0003AF60 <AmiBlitz3.ab2@16337>     ANDI.w #$7,D1
0003AF62 <AmiBlitz3.ab2@16338>     LSL.w #8,D1
0003AF64 <AmiBlitz3.ab2@16339>     LSL.w #1,D1
0003AF68 <AmiBlitz3.ab2@16340>     ORI.w #$205F,D1
0003AF6C <AmiBlitz3.ab2@16343>      BSR.w writeword
0003AF70 <AmiBlitz3.ab2@16344>   DBF D3,JL_0_AC80
0003AF76 <AmiBlitz3.ab2@16347>   MOVE.w (A7)+,libjsr+2
0003AF7C <AmiBlitz3.ab2@16348>   MOVE.w (A7)+,libbase+2
0003AF82 <AmiBlitz3.ab2@16349>   MOVE.l libbase,D1
0003AF86 <AmiBlitz3.ab2@16350>    BSR.w writelong
0003AF8C <AmiBlitz3.ab2@16351>   MOVE.l libjsr,D1
0003AF90 <AmiBlitz3.ab2@16352>    BSR.w writelong
0003AF96 <AmiBlitz3.ab2@16353>   MOVE.w regnum,D1
0003AF9A <AmiBlitz3.ab2@16354>    BEQ.w JL_0_ACF4
0003AF9C <AmiBlitz3.ab2@16355>   LSL.w #8,D1
0003AF9E <AmiBlitz3.ab2@16356>   LSL.w #1,D1
0003AFA2 <AmiBlitz3.ab2@16357>   ORI.w #$2000,D1
0003AFA6 <AmiBlitz3.ab2@16358>    BSR.w writeword
0003AFA8 <AmiBlitz3.ab2@16361>   MOVE.l (A7)+,D1
0003AFAC <AmiBlitz3.ab2@16362>    BSR.w JL_0_AD38
0003AFAE <AmiBlitz3.ab2@16363>   MOVEQ.l #$03,D2
0003AFB2 <AmiBlitz3.ab2@16364>    BSR.w reget
0003AFB6 <AmiBlitz3.ab2@16365> BRA.w JL_0_AF66
0003AFB8 <AmiBlitz3.ab2@16368>   TST.w D3
0003AFBC <AmiBlitz3.ab2@16369>    BEQ.w JL_0_AD1E
0003AFC0 <AmiBlitz3.ab2@16370>   CMP.w #$28,D1
0003AFC4 <AmiBlitz3.ab2@16371>    BNE.w syntaxerr
0003AFC8 <AmiBlitz3.ab2@16372>   CMP.w #$29,D0
0003AFCC <AmiBlitz3.ab2@16373>    BNE.w syntaxerr
0003AFD0 <AmiBlitz3.ab2@16374> BRA.w get1bytemain
0003AFD4 <AmiBlitz3.ab2@16377>   CMP.w #$28,D1
0003AFD8 <AmiBlitz3.ab2@16378>    BNE.w JL_0_AD36
0003AFDC <AmiBlitz3.ab2@16379>    BSR.w get1bytemain
0003AFE0 <AmiBlitz3.ab2@16380>   CMP.w #$29,D0
0003AFE4 <AmiBlitz3.ab2@16381>    BNE.w syntaxerr
0003AFE8 <AmiBlitz3.ab2@16382> BRA.w get1bytemain
0003AFEA <AmiBlitz3.ab2@16385> RTS
0003AFEC <AmiBlitz3.ab2@16388>   TST.w D1
0003AFF0 <AmiBlitz3.ab2@16389>    BNE.w writelong
0003AFF2 <AmiBlitz3.ab2@16390> RTS
0003AFF6 <AmiBlitz3.ab2@16394>   MOVE.w #$48E7,D4
0003AFF8 <AmiBlitz3.ab2@16395>   SWAP D4
0003AFFA <AmiBlitz3.ab2@16396>   CLR.w D4
0003AFFE <AmiBlitz3.ab2@16397>   MOVE.w #$4CDF,D5
0003B000 <AmiBlitz3.ab2@16398>   SWAP D5
0003B002 <AmiBlitz3.ab2@16399>   CLR.w D5
0003B008 <AmiBlitz3.ab2@16400>   MOVE.w regnum,D1
0003B00C <AmiBlitz3.ab2@16401>    BEQ.w JL_0_AD74
0003B010 <AmiBlitz3.ab2@16402>   BSET #$F,D4
0003B014 <AmiBlitz3.ab2@16403>   BSET #$0,D5
0003B018 <AmiBlitz3.ab2@16404>   CMP.w #$2,D1
0003B01C <AmiBlitz3.ab2@16405>    BCS.w JL_0_AD72
0003B020 <AmiBlitz3.ab2@16408>   BSET #$E,D4
0003B024 <AmiBlitz3.ab2@16409>   BSET #$1,D5
0003B026 <AmiBlitz3.ab2@16412> RTS
0003B02C <AmiBlitz3.ab2@16415>   TST.w fuckpos
0003B030 <AmiBlitz3.ab2@16416>   BNE.w JL_0_AD6A
0003B032 <AmiBlitz3.ab2@16417> RTS
0003B034 <AmiBlitz3.ab2@16420> fuckpos:  Ds.w 1
0003B03A <AmiBlitz3.ab2@16424>   MOVE.w sbasegot,D1
0003B03E <AmiBlitz3.ab2@16425>    BEQ.w makesbase__skip
0003B042 <AmiBlitz3.ab2@16429>   MOVE.w sbgot(PC),D1
0003B046 <AmiBlitz3.ab2@16430>    BNE.w makesbase__skip2
0003B04E <AmiBlitz3.ab2@16434>   MOVE.w #$0002,sbgot
0003B054 <AmiBlitz3.ab2@16435>   MOVE.w movea3a7,D1
0003B058 <AmiBlitz3.ab2@16436> BRA.w writeword
0003B05A <AmiBlitz3.ab2@16439> RTS
0003B062 <AmiBlitz3.ab2@16444>   MOVE.w #$0001,sbgot                                      ;voodoo magic! - Will it work?
0003B068 <AmiBlitz3.ab2@16447>   MOVE.l #$C601,D1
0003B070 <AmiBlitz3.ab2@16448>   MOVE.w #-1,sbasegot
0003B076 <AmiBlitz3.ab2@16449>   MOVE.l d1,lastinstruction
0003B07A <AmiBlitz3.ab2@16450>   BSR.w Atokejsr
0003B07C <AmiBlitz3.ab2@16451> RTS
0003B086 <AmiBlitz3.ab2@16456>   MOVE.l data1,litdata1
0003B08C <AmiBlitz3.ab2@16457>   TST.b fast
0003B090 <AmiBlitz3.ab2@16458>   BEQ 'l50                                                 ;optistring  seem impossible to get work
0003B094 <AmiBlitz3.ab2@16462> BRA 'l50                                                   ;to deactivate
0003B09A <AmiBlitz3.ab2@16468>   TST.b optistring
0003B09E <AmiBlitz3.ab2@16469>   BNE.s 'l21
0003B0A4 <AmiBlitz3.ab2@16470>   CLR.b string1
0003B0AC <AmiBlitz3.ab2@16471>   MOVE.b #1,optistring
0003B0B2 <AmiBlitz3.ab2@16472>   TST.b nostringopt
0003B0B6 <AmiBlitz3.ab2@16473>   BNE 'l21
0003B0B8 <AmiBlitz3.ab2@16474>   MOVE.l a5,a4
0003B0BA <AmiBlitz3.ab2@16475>   SUBQ.l #1,a4
0003B0BC <AmiBlitz3.ab2@16478>     TST.b (a4)
0003B0C0 <AmiBlitz3.ab2@16479>     BMI 'l19a
0003B0C4 <AmiBlitz3.ab2@16480>     BEQ.s 'l20
0003B0C8 <AmiBlitz3.ab2@16481>     CMP.b #$22,(a4)
0003B0CC <AmiBlitz3.ab2@16482>     BEQ.s 'l19
0003B0D2 <AmiBlitz3.ab2@16485>     TST.w string1
0003B0D6 <AmiBlitz3.ab2@16486>     BNE 'l11
0003B0DA <AmiBlitz3.ab2@16487>     CMP.b #":",(a4)
0003B0DE <AmiBlitz3.ab2@16488>     BEQ.s 'l20
0003B0E2 <AmiBlitz3.ab2@16489>     CMP.b #";",(a4)
0003B0E6 <AmiBlitz3.ab2@16490>     BEQ.s 'l20
0003B0EA <AmiBlitz3.ab2@16491>     CMP.b #"+",(a4)
0003B0EE <AmiBlitz3.ab2@16492>     BEQ.s 'l21
0003B0F2 <AmiBlitz3.ab2@16493>     CMP.b #",",(a4)
0003B0F6 <AmiBlitz3.ab2@16494>     BEQ.s 'l20                                             ;was l21
0003B0FA <AmiBlitz3.ab2@16495>     CMP.b #")",(a4)
0003B0FE <AmiBlitz3.ab2@16496>     BEQ.s 'l20                                             ;was l21
0003B100 <AmiBlitz3.ab2@16499>     ADDQ.l #1,a4
0003B104 <AmiBlitz3.ab2@16500> BRA.s 'l10
0003B10C <AmiBlitz3.ab2@16503>   BCHG #0,string1
0003B110 <AmiBlitz3.ab2@16504> BRA 'l18
0003B112 <AmiBlitz3.ab2@16507>   ADDQ.l #1,a4
0003B114 <AmiBlitz3.ab2@16508>   TST.b (a4)
0003B118 <AmiBlitz3.ab2@16509>   BEQ 'l21
0003B11C <AmiBlitz3.ab2@16510> BRA 'l11
0003B11E <AmiBlitz3.ab2@16513>   MOVE.l a5,a4
0003B120 <AmiBlitz3.ab2@16514>   SUBQ.l #1,a4
0003B124 <AmiBlitz3.ab2@16517>   CMP.b #$20,-(a4)
0003B128 <AmiBlitz3.ab2@16518>   BEQ 'll1
0003B12C <AmiBlitz3.ab2@16519>   CMP.b #"+",(a4)
0003B130 <AmiBlitz3.ab2@16520>   BEQ 'l21
0003B138 <AmiBlitz3.ab2@16535>   MOVE.b #2,optistring
0003B140 <AmiBlitz3.ab2@16538>   CMP.b #2,optistring
0003B144 <AmiBlitz3.ab2@16539>   BEQ.s 'l100
0003B148 <AmiBlitz3.ab2@16542>   BSR.w makesbase
0003B14C <AmiBlitz3.ab2@16543>   BSR.w pokedata1                                          ;writestringsizespace
0003B150 <AmiBlitz3.ab2@16544>   BSR.w pokedata1
0003B152 <AmiBlitz3.ab2@16547>   MOVEQ.l #$00,D2
0003B158 <AmiBlitz3.ab2@16550>     MOVE.l a5,lastsourcepos
0003B15A <AmiBlitz3.ab2@16551>     MOVEQ #0,d0
0003B15C <AmiBlitz3.ab2@16552>     MOVE.b (a5)+,d0
0003B15E <AmiBlitz3.ab2@16553>     TST.w D0
0003B162 <AmiBlitz3.ab2@16554>      BEQ.w notqerr
0003B166 <AmiBlitz3.ab2@16555>     CMP.w #$22,D0                                          ; --- " ---
0003B16A <AmiBlitz3.ab2@16556>      BEQ.w JL_0_ADF6
0003B16E <AmiBlitz3.ab2@16557>     CMP.b #"\",d0
0003B172 <AmiBlitz3.ab2@16558>      BNE 'l1
0003B176 <AmiBlitz3.ab2@16559>     CMP.b #"\",(a5)
0003B17A <AmiBlitz3.ab2@16560>      BNE 'l1
0003B180 <AmiBlitz3.ab2@16561>     TST.b newsyntax
0003B184 <AmiBlitz3.ab2@16562>      BEQ 'l1
0003B18A <AmiBlitz3.ab2@16563>     CMP.w #"\\",1(a5)                                      ; new compiler constants
0003B18E <AmiBlitz3.ab2@16564>     BNE 'l2
0003B190 <AmiBlitz3.ab2@16565>     ADDQ #2,a5
0003B192 <AmiBlitz3.ab2@16568>     ADDQ.w #1,D2
0003B194 <AmiBlitz3.ab2@16569>     MOVE.w D0,D1
0003B198 <AmiBlitz3.ab2@16570>     BSR.w pokedata1b                                        ;writestring
0003B19C <AmiBlitz3.ab2@16571> BRA.w writestring
0003B1A2 <AmiBlitz3.ab2@16574>     JSR check_newconstants
0003B1A6 <AmiBlitz3.ab2@16575> BRA writestring
0003B1AC <AmiBlitz3.ab2@16578>   NOT instringon
0003B1B2 <AmiBlitz3.ab2@16579>   MOVE.w dontwrite,D1
0003B1B6 <AmiBlitz3.ab2@16580>   BNE.w JL_0_AE0A
0003B1BE <AmiBlitz3.ab2@16581>   CMP.b #2,optistring
0003B1C2 <AmiBlitz3.ab2@16582>   BEQ 'l10
0003B1C8 <AmiBlitz3.ab2@16583>     MOVEA.l litdata1,A0
0003B1CA <AmiBlitz3.ab2@16584>     CLR.w (A0)+                                            ;writesize
0003B1CC <AmiBlitz3.ab2@16585>     MOVE.w D2,(A0)
0003B1D0 <AmiBlitz3.ab2@16589>   BSR.w JL_0_AEA4                                          ;writestringconstantcode
0003B1D6 <AmiBlitz3.ab2@16590>   ADDQ.l #1,data1
0003B1DE <AmiBlitz3.ab2@16591>   BCLR #$0,data1+3
0003B1E0 <AmiBlitz3.ab2@16592>   MOVEQ.l #$07,D2
0003B1E4 <AmiBlitz3.ab2@16593> BRA.w get1bytemain
0003B1E8 <AmiBlitz3.ab2@16597>   BSR.w makename2
0003B1EC <AmiBlitz3.ab2@16598>   BSR.w findlabel2
0003B1F0 <AmiBlitz3.ab2@16599>   BEQ.w JL_0_AE4A
0003B1F4 <AmiBlitz3.ab2@16600>   BSR.w addlabelhash
0003B1F8 <AmiBlitz3.ab2@16601>   CLR.l $4(A2)
0003B1FC <AmiBlitz3.ab2@16602>   CLR.l $8(A2)
0003B204 <AmiBlitz3.ab2@16604>   MOVE.w linenumat+2,$10(A2)
0003B20A <AmiBlitz3.ab2@16605>   MOVE.w linenumat,d0
0003B20C <AmiBlitz3.ab2@16606>   MOVEQ #0,d1
0003B210 <AmiBlitz3.ab2@16607>   MOVE.b -1(a2,d7),d1
0003B214 <AmiBlitz3.ab2@16608>   MOVE.w d0,0(a2,d1)
0003B218 <AmiBlitz3.ab2@16609> BRA.w JL_0_AE52
0003B21C <AmiBlitz3.ab2@16612>   TST.l $8(A2)
0003B220 <AmiBlitz3.ab2@16613>   BNE.w JL_0_AE88
0003B226 <AmiBlitz3.ab2@16616>   MOVEA.l _execbase,A6
0003B228 <AmiBlitz3.ab2@16617>   MOVEQ.l #$0C+2,D0
0003B22A <AmiBlitz3.ab2@16618>   MOVEQ.l #$01,D1
0003B230 <AmiBlitz3.ab2@16619>   MOVE.l mempool,a0
0003B234 <AmiBlitz3.ab2@16620>   JSR _AllocPooled(a6)
0003B236 <AmiBlitz3.ab2@16622>   MOVEA.l D0,A0
0003B23A <AmiBlitz3.ab2@16623>   MOVE.l $4(A2),(A0)
0003B23E <AmiBlitz3.ab2@16624>   MOVE.l A0,$4(A2)
0003B246 <AmiBlitz3.ab2@16625>   MOVE.l destpointer,$4(A0)
0003B24A <AmiBlitz3.ab2@16626>   ADDQ.l #2,$4(A0)
0003B252 <AmiBlitz3.ab2@16627>   MOVE.w procnum,$8(A0)
0003B25A <AmiBlitz3.ab2@16628>   MOVE.w linenumat+2,$A(A0)
0003B262 <AmiBlitz3.ab2@16629>   MOVE.w linenumat,$c(a0)
0003B264 <AmiBlitz3.ab2@16630> RTS
0003B268 <AmiBlitz3.ab2@16633>   MOVE.l $4(A2),D1
0003B26C <AmiBlitz3.ab2@16634>   BTST #$0,D1
0003B270 <AmiBlitz3.ab2@16635>    BNE.w illlaberr
0003B276 <AmiBlitz3.ab2@16636>   MOVE.w procnum,D1
0003B27A <AmiBlitz3.ab2@16637>   CMP.w $10(A2),D1
0003B27E <AmiBlitz3.ab2@16638>    BNE.w referr
0003B280 <AmiBlitz3.ab2@16639> RTS
0003B282 <AmiBlitz3.ab2@16643>   MOVE.w D0,-(A7)
0003B28A <AmiBlitz3.ab2@16644>   CMP.b #2,optistring
0003B28E <AmiBlitz3.ab2@16645>   BEQ 'l10
0003B294 <AmiBlitz3.ab2@16648>   MOVE.w numtoa0,D1
0003B298 <AmiBlitz3.ab2@16649>    BSR.w writeword
0003B29C <AmiBlitz3.ab2@16650>    BSR.w addoff
0003B2A2 <AmiBlitz3.ab2@16651>   MOVE.l litdata1,D1
0003B2A6 <AmiBlitz3.ab2@16652>    BSR.w writelong
0003B2AC <AmiBlitz3.ab2@16653>   MOVE.w pushlen,D1
0003B2B0 <AmiBlitz3.ab2@16654>    BSR.w writeword
0003B2B4 <AmiBlitz3.ab2@16655>   MOVE.w #$C600,D1
0003B2B8 <AmiBlitz3.ab2@16656>    BSR.w Atokejsr
0003B2BA <AmiBlitz3.ab2@16657>   MOVE.w (A7)+,D0
0003B2BC <AmiBlitz3.ab2@16658> RTS
0003B2BE <AmiBlitz3.ab2@16661>   MOVEQ #0,d1
0003B2C2 <AmiBlitz3.ab2@16662>   BSR.w pokedata1b
0003B2C8 <AmiBlitz3.ab2@16663>   MOVE.l destpointer,a4
0003B2CC <AmiBlitz3.ab2@16664>   MOVE.w #$203c,d1
0003B2D2 <AmiBlitz3.ab2@16665>   TST.w mode
0003B2D6 <AmiBlitz3.ab2@16666>   BNE 'lm10
0003B2DC <AmiBlitz3.ab2@16667>    ADDQ.w #4,a2offset
0003B2E0 <AmiBlitz3.ab2@16668>   MOVE.w #$2f3c,d1
0003B2E6 <AmiBlitz3.ab2@16671>   TST.w mode
0003B2EA <AmiBlitz3.ab2@16672>   BEQ 'lm3
0003B2F0 <AmiBlitz3.ab2@16673>   MOVE.w regnum,D0
0003B2F2 <AmiBlitz3.ab2@16674>   LSL.w #8,D0
0003B2F4 <AmiBlitz3.ab2@16675>   LSL.w #1,D0
0003B2F6 <AmiBlitz3.ab2@16676>   OR.w d0,d1
0003B2FA <AmiBlitz3.ab2@16677>   BSR writeword
0003B2FE <AmiBlitz3.ab2@16678>   BSR.w addoff
0003B304 <AmiBlitz3.ab2@16679>   MOVE.l litdata1,D1
0003B308 <AmiBlitz3.ab2@16680>   BSR.w writelong
0003B310 <AmiBlitz3.ab2@16681>   CMP.w #3,mode
0003B314 <AmiBlitz3.ab2@16682>   BEQ 'l30
0003B31A <AmiBlitz3.ab2@16683>    ADDQ.w #4,a2offset
0003B31E <AmiBlitz3.ab2@16684>   MOVE.w #$4878,D1
0003B322 <AmiBlitz3.ab2@16685>   BSR.w writeword
0003B324 <AmiBlitz3.ab2@16686>   MOVE.l d2,d1
0003B328 <AmiBlitz3.ab2@16687>   BSR writeword
0003B32A <AmiBlitz3.ab2@16690>   MOVE.w (A7)+,D0
0003B32C <AmiBlitz3.ab2@16691> RTS
0003B332 <AmiBlitz3.ab2@16694>   MOVE.l #$3f3c0007,d1
0003B336 <AmiBlitz3.ab2@16695>   BSR writelong
0003B33C <AmiBlitz3.ab2@16696>   MOVE.w regnum,D1
0003B33E <AmiBlitz3.ab2@16697>   LSL.w #8,D1
0003B340 <AmiBlitz3.ab2@16698>   LSL.w #1,D1
0003B344 <AmiBlitz3.ab2@16699>   ORI.w #$2f3c,d1
0003B348 <AmiBlitz3.ab2@16700>   BSR writeword
0003B34E <AmiBlitz3.ab2@16701>    ADDQ.w #4,a2offset
0003B350 <AmiBlitz3.ab2@16702>   MOVE.l d2,d1
0003B354 <AmiBlitz3.ab2@16703>   BSR writelong
0003B358 <AmiBlitz3.ab2@16704>   MOVE.w #$2f3c,d1
0003B35C <AmiBlitz3.ab2@16705>   BSR writeword
0003B360 <AmiBlitz3.ab2@16706>   BSR.w addoff
0003B366 <AmiBlitz3.ab2@16707>   MOVE.l litdata1,D1
0003B36A <AmiBlitz3.ab2@16708>   BSR.w writelong
0003B36C <AmiBlitz3.ab2@16709>   MOVE.w (A7)+,D0
0003B36E <AmiBlitz3.ab2@16710> RTS
0003B372 <AmiBlitz3.ab2@16714>   BSR.w get1bytemain
0003B376 <AmiBlitz3.ab2@16715>    BSR.w JL_0_AE22
0003B37C <AmiBlitz3.ab2@16716>   MOVE.w regnum,D1
0003B37E <AmiBlitz3.ab2@16717>   LSL.w #8,D1
0003B380 <AmiBlitz3.ab2@16718>   LSL.w #1,D1
0003B384 <AmiBlitz3.ab2@16719>   ORI.w #$203C,D1
0003B388 <AmiBlitz3.ab2@16720>    BSR.w writeword
0003B38C <AmiBlitz3.ab2@16721>    BSR.w addoff
0003B390 <AmiBlitz3.ab2@16722>   MOVE.l $8(A2),D1
0003B394 <AmiBlitz3.ab2@16723>    BSR.w writelong
0003B396 <AmiBlitz3.ab2@16724>   MOVEQ.l #$03,D2
0003B39A <AmiBlitz3.ab2@16725> BRA.w reget
0003B39C <AmiBlitz3.ab2@16728>   MOVEQ.l #$00,D3
0003B3A0 <AmiBlitz3.ab2@16731>   BSR.w get1bytemain
0003B3A4 <AmiBlitz3.ab2@16732>    BEQ.w syntaxerr
0003B3A8 <AmiBlitz3.ab2@16733>   CMP.w #$22,D0
0003B3AC <AmiBlitz3.ab2@16734>    BEQ.w JL_0_AF1A
0003B3AE <AmiBlitz3.ab2@16735>   LSL.l #8,D3
0003B3B0 <AmiBlitz3.ab2@16736>   MOVE.b D0,D3
0003B3B4 <AmiBlitz3.ab2@16737> BRA.w JL_0_AF02
0003B3B8 <AmiBlitz3.ab2@16740>   BSR.w get1bytemain
0003B3BC <AmiBlitz3.ab2@16741> BRA.w JL_0_B46E
0003B3BE <AmiBlitz3.ab2@16744>   MOVE.w D2,-(A7)                                          ;basicvarsforasm
0003B3C2 <AmiBlitz3.ab2@16745>    BSR.w makename2
0003B3C6 <AmiBlitz3.ab2@16746>    BSR.w findlabel2
0003B3CA <AmiBlitz3.ab2@16747>    BEQ.w 'l10
0003B3D0 <AmiBlitz3.ab2@16748>    LEA ptr_parameterstore,a0
0003B3D6 <AmiBlitz3.ab2@16749>    CMP.b #"@",-1(a0,d2.w)
0003B3DA <AmiBlitz3.ab2@16750>    BNE cnferr
0003B3DE <AmiBlitz3.ab2@16751>    CLR.b -1(a0,d2.w)
0003B3E0 <AmiBlitz3.ab2@16752>    SUBQ.l #1,d2
0003B3E6 <AmiBlitz3.ab2@16753>    LEA varbase,a2
0003B3EA <AmiBlitz3.ab2@16754>    BSR findvariable
0003B3EE <AmiBlitz3.ab2@16755>    BNE cnferr
0003B3F2 <AmiBlitz3.ab2@16756>    CMP.b #"\",d0
0003B3F6 <AmiBlitz3.ab2@16757>    BNE 'l6
0003B3FC <AmiBlitz3.ab2@16758>    ADDQ #1,lastsourcepos
0003B400 <AmiBlitz3.ab2@16759>    MOVE.l $a(a2),a2
0003B402 <AmiBlitz3.ab2@16760>    ADDQ.l #4,a2
0003B406 <AmiBlitz3.ab2@16761>    BSR.w makename2
0003B40A <AmiBlitz3.ab2@16762>    BSR findvariable2
0003B40E <AmiBlitz3.ab2@16763>    BNE cnferr
0003B412 <AmiBlitz3.ab2@16764> BRA.s 'l6                                                  ;???
0003B416 <AmiBlitz3.ab2@16767>    MOVE.w $4(a2),d3
0003B418 <AmiBlitz3.ab2@16768>    EXT.l d3
0003B41C <AmiBlitz3.ab2@16769> BRA JL_0_AF46
0003B420 <AmiBlitz3.ab2@16772>   MOVE.l $8(A2),D3
0003B428 <AmiBlitz3.ab2@16773>   CMPI.l #$1,$4(A2)
0003B42C <AmiBlitz3.ab2@16774>    BEQ.w JL_0_AF46
0003B432 <AmiBlitz3.ab2@16775>   NOT.w asmtype
0003B434 <AmiBlitz3.ab2@16778>   MOVE.w (A7)+,D2
0003B438 <AmiBlitz3.ab2@16779> BRA.w JL_0_B46E
0003B43A <AmiBlitz3.ab2@16783>   MOVE.w D2,-(A7)
0003B43E <AmiBlitz3.ab2@16784>    BSR.w getparameter
0003B442 <AmiBlitz3.ab2@16785>   CMP.w #$7B,D0
0003B446 <AmiBlitz3.ab2@16786>    BEQ.w JL_0_AFDE
0003B44A <AmiBlitz3.ab2@16787>    BSR.w JL_0_8E3C
0003B44E <AmiBlitz3.ab2@16789>    BSR.w calcvar                                         ;getvaroffset+type
0003B452 <AmiBlitz3.ab2@16790>    BSR.w JL_0_B150
0003B458 <AmiBlitz3.ab2@16802>    TST.b typecheck
0003B45C <AmiBlitz3.ab2@16803>    BEQ JL_0_AF66
0003B466 <AmiBlitz3.ab2@16806>    CMP.l #$da01,lasttoken                                  ;poke
0003B46A <AmiBlitz3.ab2@16807>    BEQ 'l1
0003B474 <AmiBlitz3.ab2@16808>    CMP.l #$da02,lasttoken                                  ;peek
0003B478 <AmiBlitz3.ab2@16809>    BNE 'l2
0003B480 <AmiBlitz3.ab2@16812>    CMP.w #1,parnum
0003B484 <AmiBlitz3.ab2@16813>    BNE JL_0_AF66
0003B48A <AmiBlitz3.ab2@16814>    MOVE.b d2,peekaddrsize
0003B48E <AmiBlitz3.ab2@16815> BRA JL_0_AF66
0003B494 <AmiBlitz3.ab2@16818>   CLR.b peekaddrsize
0003B498 <AmiBlitz3.ab2@16821>   CMP.w #$1,D2
0003B49C <AmiBlitz3.ab2@16822>    BNE.w JL_0_AF7C
0003B4A2 <AmiBlitz3.ab2@16823>   MOVE.w regnum,D1
0003B4A6 <AmiBlitz3.ab2@16824>   ORI.w #$4880,D1
0003B4AA <AmiBlitz3.ab2@16825>    BSR.w writeword
0003B4AC <AmiBlitz3.ab2@16828>   MOVE.w (A7)+,D3
0003B4B0 <AmiBlitz3.ab2@16829>    BEQ.w JL_0_AF9E
0003B4B6 <AmiBlitz3.ab2@16830>    MOVE.l lastinstruction,a0
0003B4BA <AmiBlitz3.ab2@16831>   CMP.w #$3,D3
0003B4BE <AmiBlitz3.ab2@16832>    BNE.w JL_0_AF92
0003B4C2 <AmiBlitz3.ab2@16833>   CMP.w #$4,D2
0003B4C6 <AmiBlitz3.ab2@16834>    BEQ.w JL_0_AF98
0003B4C8 <AmiBlitz3.ab2@16837>   CMP.w D2,D3
0003B4CC <AmiBlitz3.ab2@16838>    BLS.w JL_0_AF9E
0003B4CE <AmiBlitz3.ab2@16841>   EXG.l D2,D3
0003B4D2 <AmiBlitz3.ab2@16843>   BSR.w writeconvertcode
0003B4D6 <AmiBlitz3.ab2@16846> BRA.w reget
0003B4D8 <AmiBlitz3.ab2@16849>   MOVEQ.l #$00,D3
0003B4DE <AmiBlitz3.ab2@16850>   MOVE.w regnum,D1
0003B4E2 <AmiBlitz3.ab2@16851>    BEQ.w JL_0_AFC8
0003B4E4 <AmiBlitz3.ab2@16852>   SUBQ.w #1,D1
0003B4E6 <AmiBlitz3.ab2@16855>      LSR.l #1,D3
0003B4EA <AmiBlitz3.ab2@16856>      BSET #$F,D3
0003B4EE <AmiBlitz3.ab2@16857>   DBF D1,JL_0_AFB0b
0003B4F4 <AmiBlitz3.ab2@16859>    TST.b fpu
0003B4F8 <AmiBlitz3.ab2@16860>    BEQ 'l1
0003B4FE <AmiBlitz3.ab2@16861>    ADDQ.l #2,stacktrack                                    ;intern command
0003B500 <AmiBlitz3.ab2@16862>     MOVE.l a0,-(a7)
0003B506 <AmiBlitz3.ab2@16863>     MOVE.l stacktrack,d1
0003B50C <AmiBlitz3.ab2@16864>     LEA fpustackbase,a0
0003B510 <AmiBlitz3.ab2@16865>     CLR.w 0(a0,d1)
0003B516 <AmiBlitz3.ab2@16866>     CLR.w regmask
0003B518 <AmiBlitz3.ab2@16867>     MOVE.l (a7)+,a0
0003B51C <AmiBlitz3.ab2@16870>   MOVE.w #$48E7,D1
0003B520 <AmiBlitz3.ab2@16871>    BSR.w writeword                                         ;write movem.l d0/d1,-(a7)
0003B522 <AmiBlitz3.ab2@16872>   MOVE.w D3,D1
0003B526 <AmiBlitz3.ab2@16873> BRA.w writeword
0003B528 <AmiBlitz3.ab2@16878>   MOVEQ.l #$00,D3
0003B52E <AmiBlitz3.ab2@16879>   MOVE.w regnum,D1
0003B532 <AmiBlitz3.ab2@16880>    BEQ.w JL_0_AFC8
0003B534 <AmiBlitz3.ab2@16881>   SUBQ.w #1,D1
0003B536 <AmiBlitz3.ab2@16884>     LSR.l #1,D3
0003B53A <AmiBlitz3.ab2@16885>     BSET #$F,D3
0003B53E <AmiBlitz3.ab2@16886>   DBF D1,JL_0_AFB0
0003B544 <AmiBlitz3.ab2@16888>    TST.b fpu
0003B548 <AmiBlitz3.ab2@16889>    BEQ 'l1
0003B54E <AmiBlitz3.ab2@16890>    ADDQ.l #2,stacktrack                                    ;intern command
0003B550 <AmiBlitz3.ab2@16891>     MOVE.l a0,-(a7)
0003B556 <AmiBlitz3.ab2@16892>     MOVE.l stacktrack,d1
0003B55C <AmiBlitz3.ab2@16893>     LEA fpustackbase,a0
0003B560 <AmiBlitz3.ab2@16894>     CLR.w 0(a0,d1)
0003B564 <AmiBlitz3.ab2@16895>    CMP.b #5,(a3)                                           ;result float ?
0003B568 <AmiBlitz3.ab2@16896>     BNE 'nofpu
0003B572 <AmiBlitz3.ab2@16898>     MOVE.w regnum,regnumfunc
0003B578 <AmiBlitz3.ab2@16901>   CLR.w regmask
0003B57A <AmiBlitz3.ab2@16902>     MOVE.l (a7)+,a0
0003B57E <AmiBlitz3.ab2@16905>   MOVE.w #$48E7,D1
0003B582 <AmiBlitz3.ab2@16906>    BSR.w writeword                                         ;write movem.l d0/d1,-(a7)
0003B584 <AmiBlitz3.ab2@16907>   MOVE.w D3,D1
0003B588 <AmiBlitz3.ab2@16908> BRA.w writeword
0003B58A <AmiBlitz3.ab2@16911> RTS
0003B58C <AmiBlitz3.ab2@16915>   MOVE.l D1,-(A7)
0003B590 <AmiBlitz3.ab2@16916>   MOVE.w #$4EB9,D1
0003B594 <AmiBlitz3.ab2@16917>    BSR.w writeword
0003B598 <AmiBlitz3.ab2@16918>    BSR.w addoff
0003B59A <AmiBlitz3.ab2@16919>   MOVE.l (A7)+,D1
0003B59E <AmiBlitz3.ab2@16920> BRA.w writelong
0003B5A2 <AmiBlitz3.ab2@16924>    BSR.w findproc                                          ;write function call
0003B5A6 <AmiBlitz3.ab2@16925>    BEQ 'l1
0003B5AC <AmiBlitz3.ab2@16926>    TST.l unusedfunc
0003B5B0 <AmiBlitz3.ab2@16927>    BEQ noprocerr
0003B5B6 <AmiBlitz3.ab2@16929>    JSR gotoendsource
0003B5B8 <AmiBlitz3.ab2@16932>   MOVEQ.l #$00,D1
0003B5BC <AmiBlitz3.ab2@16933>   MOVE.b $5(A2),D1
0003B5C2 <AmiBlitz3.ab2@16934>   MOVE.b d1,retmode
0003B5C6 <AmiBlitz3.ab2@16935>    BMI.w illprocerr
0003B5CC <AmiBlitz3.ab2@16936>    MOVE.b #1,isfunc(a2)
0003B5CE <AmiBlitz3.ab2@16937>   MOVE.w D1,-(A7)
0003B5D0 <AmiBlitz3.ab2@16938>   MOVEQ.l #$00,D1
0003B5D4 <AmiBlitz3.ab2@16939>   MOVE.b $4(A2),D1
0003B5D6 <AmiBlitz3.ab2@16940>   LSR.w #4,D1
0003B5DA <AmiBlitz3.ab2@16941>    BEQ.w JL_0_B006
0003B5DC <AmiBlitz3.ab2@16942>   LSL.w #2,D1
0003B5E2 <AmiBlitz3.ab2@16943>   SUB.w D1,a2offset
0003B5E6 <AmiBlitz3.ab2@16946>   CMPI.w #$7,(A7)
0003B5EA <AmiBlitz3.ab2@16947>    BNE.b JL_0_B014
0003B5EC <AmiBlitz3.ab2@16948>   MOVE.l A2,-(A7)
0003B5F0 <AmiBlitz3.ab2@16949>    BSR.w makesbase
0003B5F2 <AmiBlitz3.ab2@16950>   MOVEA.l (A7)+,A2
0003B5F8 <AmiBlitz3.ab2@16953>   MOVE.w sbasegot,-(A7)
0003B5FC <AmiBlitz3.ab2@16954>    BEQ.b JL_0_B020
0003B600 <AmiBlitz3.ab2@16955>    BSR.w dopusha3
0003B604 <AmiBlitz3.ab2@16958>   BSR.w JL_0_AFA2func
0003B606 <AmiBlitz3.ab2@16959>   MOVE.w D3,-(A7)
0003B60A <AmiBlitz3.ab2@16960>   MOVE.l $E(A2),D1
0003B60E <AmiBlitz3.ab2@16961>   TST.b $20(a2)                                            ;increase if morepar
0003B612 <AmiBlitz3.ab2@16962>   BNE 'no0par
0003B614 <AmiBlitz3.ab2@16963>   MOVE.l a5,a4
0003B618 <AmiBlitz3.ab2@16966>   CMP.b #$20,(a4)+
0003B61C <AmiBlitz3.ab2@16967>   BEQ 'l1
0003B622 <AmiBlitz3.ab2@16968>   CMP.b #"}",-1(a4)
0003B626 <AmiBlitz3.ab2@16969>   BNE  'no0par
0003B628 <AmiBlitz3.ab2@16970>   MOVEQ #0,d0
0003B62C <AmiBlitz3.ab2@16973>   LEA $16(A2),A1
0003B62E <AmiBlitz3.ab2@16976>   MOVE.l d1,-(a7)
0003B630 <AmiBlitz3.ab2@16977>   MOVE.b (a1),d2
0003B632 <AmiBlitz3.ab2@16978>   MOVE.l d0,d1
0003B636 <AmiBlitz3.ab2@16979>   CMP.w #4,d2
0003B63A <AmiBlitz3.ab2@16980>   BNE 'l1b
0003B640 <AmiBlitz3.ab2@16981>   ADD.l #$203c,d1
0003B644 <AmiBlitz3.ab2@16982>   BSR writeword
0003B64A <AmiBlitz3.ab2@16983>   MOVE.l #$ffff0000,d1
0003B64E <AmiBlitz3.ab2@16984>   BSR writelong
0003B652 <AmiBlitz3.ab2@16985> BRA 'l2b
0003B658 <AmiBlitz3.ab2@16988>    TST.b fpu
0003B65C <AmiBlitz3.ab2@16989>    BNE 'l1c
0003B660 <AmiBlitz3.ab2@16990>    CMP.w #5,d2
0003B664 <AmiBlitz3.ab2@16991>    BNE 'l1c
0003B66A <AmiBlitz3.ab2@16992>    ADD.l #$203c,d1
0003B66E <AmiBlitz3.ab2@16993>    BSR writeword
0003B674 <AmiBlitz3.ab2@16994>    MOVE.l #$800000c1,d1
0003B678 <AmiBlitz3.ab2@16995>    BSR writelong
0003B67C <AmiBlitz3.ab2@16996> BRA 'l2b
0003B682 <AmiBlitz3.ab2@16999>   ADD.l #$70ff,d1
0003B686 <AmiBlitz3.ab2@17000>   BSR writeword
0003B68A <AmiBlitz3.ab2@17001>   CMP.w #7,d2
0003B68E <AmiBlitz3.ab2@17002>   BNE 'l1d
0003B694 <AmiBlitz3.ab2@17003>   MOVE.l #$2f3c0000,d1      ; write code move.l #0,-(a7)
0003B698 <AmiBlitz3.ab2@17004>   BSR writelong
0003B69A <AmiBlitz3.ab2@17005>   MOVEQ #0,d1
0003B69E <AmiBlitz3.ab2@17006>   BSR writeword
0003B6A4 <AmiBlitz3.ab2@17007>   MOVE.l #$2f3c0000,d1      ; write code move.l #0,-(a7)
0003B6A8 <AmiBlitz3.ab2@17008>   BSR writelong
0003B6AA <AmiBlitz3.ab2@17009>   MOVEQ #0,d1
0003B6AE <AmiBlitz3.ab2@17010>   BSR writeword
0003B6B4 <AmiBlitz3.ab2@17012> 'l1d  MOVE.l #$f23c5000,d1
0003B6B6 <AmiBlitz3.ab2@17013>   MOVE.l d0,d2
0003B6B8 <AmiBlitz3.ab2@17014>   ASR.l #2,d2
0003B6BA <AmiBlitz3.ab2@17015>   ADD.l d2,d1
0003B6BE <AmiBlitz3.ab2@17016>   BSR writelong
0003B6C2 <AmiBlitz3.ab2@17017>   MOVE.w #$ffff,d1
0003B6C6 <AmiBlitz3.ab2@17018>   BSR writeword
0003B6C8 <AmiBlitz3.ab2@17022>   MOVE.l (a7)+,d1
0003B6CA <AmiBlitz3.ab2@17023>      ADDQ.l #1,a1
0003B6D0 <AmiBlitz3.ab2@17024>      ADD.l #$0200,d0
0003B6D6 <AmiBlitz3.ab2@17025>      CMP.l #$0e00,d0
0003B6DA <AmiBlitz3.ab2@17026>      BEQ syntaxerr
0003B6DC <AmiBlitz3.ab2@17027>      TST.b (a1)
0003B6E0 <AmiBlitz3.ab2@17028>      BNE 'again
0003B6E4 <AmiBlitz3.ab2@17029> BRA 'p1
0003B6E8 <AmiBlitz3.ab2@17032>   TST.b $4(A2)
0003B6EC <AmiBlitz3.ab2@17033>    BNE.w JL_0_B03E
0003B6F0 <AmiBlitz3.ab2@17036>   BSR.w JL_0_AFCA
0003B6F4 <AmiBlitz3.ab2@17037>    BSR.w get1bytemain
0003B6F8 <AmiBlitz3.ab2@17038> BRA.w JL_0_B06C
0003B6FE <AmiBlitz3.ab2@17042>   MOVE.w regnum,-(A7)
0003B708 <AmiBlitz3.ab2@17043>   MOVE.w regnum,regnumfunc
0003B70A <AmiBlitz3.ab2@17046>   MOVE.l D1,-(A7)                                          ;write function call with pars
0003B712 <AmiBlitz3.ab2@17047>   MOVE.b #1,funccall
0003B714 <AmiBlitz3.ab2@17048>   MOVEQ.l #$00,D0
0003B718 <AmiBlitz3.ab2@17049>   MOVE.b $4(A2),D0
0003B71E <AmiBlitz3.ab2@17050>   MOVE.l d0,parnumtemp
0003B728 <AmiBlitz3.ab2@17051>   MOVE.w a2offset,a2offset2
0003B730 <AmiBlitz3.ab2@17052>   MOVE.b 5(a2),retmode
0003B736 <AmiBlitz3.ab2@17053>   MOVE.l a2,currentfunccall
0003B73A <AmiBlitz3.ab2@17054>   LEA $16(A2),A2
0003B740 <AmiBlitz3.ab2@17055>   CLR.w regnum
0003B746 <AmiBlitz3.ab2@17056>   CLR.w regmask
0003B74C <AmiBlitz3.ab2@17057>   MOVE.b funcparloop,-(a7)
0003B754 <AmiBlitz3.ab2@17058>   MOVE.b #1,funcparloop
0003B75A <AmiBlitz3.ab2@17060>   JSR fetchpees2
0003B760 <AmiBlitz3.ab2@17061>   MOVE.b (a7)+,funcparloop
0003B766 <AmiBlitz3.ab2@17062>   JSR chkstak
0003B768 <AmiBlitz3.ab2@17063>   MOVE.l (A7)+,D1
0003B76C <AmiBlitz3.ab2@17079>    BTST #0,d1
0003B770 <AmiBlitz3.ab2@17080>    BNE intern1
0003B774 <AmiBlitz3.ab2@17081>    BSR.w JL_0_AFCA
0003B77A <AmiBlitz3.ab2@17103>   MOVE.w (A7)+,regnum
0003B77E <AmiBlitz3.ab2@17106>   CMP.w #$7D,D0
0003B782 <AmiBlitz3.ab2@17107>    BNE.w syntaxerr
0003B784 <AmiBlitz3.ab2@17108>    MOVEQ #0,d1
0003B78A <AmiBlitz3.ab2@17109>   MOVE.w regnum,D1
0003B78E <AmiBlitz3.ab2@17110>    BEQ.w JL_0_B08A
0003B794 <AmiBlitz3.ab2@17111>    TST.b fpu
0003B798 <AmiBlitz3.ab2@17112>    BEQ 'old
0003B7A0 <AmiBlitz3.ab2@17113>    CMP.b #5,retmode
0003B7A4 <AmiBlitz3.ab2@17114>    BNE 'old
0003B7A6 <AmiBlitz3.ab2@17115>    ASL.l #7,d1
0003B7AC <AmiBlitz3.ab2@17116>    OR.l #$f2000000,d1
0003B7B0 <AmiBlitz3.ab2@17117>    BSR writelong
0003B7B4 <AmiBlitz3.ab2@17118> BRA JL_0_B08A
0003B7B6 <AmiBlitz3.ab2@17120>  'old  LSL.w #8,D1
0003B7B8 <AmiBlitz3.ab2@17121>   LSL.w #1,D1
0003B7BC <AmiBlitz3.ab2@17122>   ORI.w #$2000,D1
0003B7C0 <AmiBlitz3.ab2@17123>    BSR.w writeword
0003B7C2 <AmiBlitz3.ab2@17126>    MOVE.w (A7)+,D3
0003B7C6 <AmiBlitz3.ab2@17127>    BEQ.w JL_0_B0A8
0003B7CC <AmiBlitz3.ab2@17128>    TST.b fpu
0003B7D0 <AmiBlitz3.ab2@17129>    BEQ 'old
0003B7D2 <AmiBlitz3.ab2@17130>    MOVE.l d0,-(a7)
0003B7D6 <AmiBlitz3.ab2@17131>    MOVE.w #8,d0
0003B7D8 <AmiBlitz3.ab2@17132>    MOVE.l a0,-(a7)
0003B7DE <AmiBlitz3.ab2@17133>    MOVE.l stacktrack,d1
0003B7E4 <AmiBlitz3.ab2@17134>    LEA fpustackbase,a0
0003B7EC <AmiBlitz3.ab2@17135>    MOVE.w 0(a0,d1),regmask
0003B7EE <AmiBlitz3.ab2@17136>    MOVE.l (a7)+,a0
0003B7F2 <AmiBlitz3.ab2@17139>   BEQ 'ready
0003B7F8 <AmiBlitz3.ab2@17140>    BTST d0,regmask
0003B7FC <AmiBlitz3.ab2@17141>    BEQ 'noa7
0003B7FE <AmiBlitz3.ab2@17142>    MOVEQ #0,d1
0003B800 <AmiBlitz3.ab2@17143>    MOVE.w d0,d1
0003B802 <AmiBlitz3.ab2@17144>    SUBQ.w #1,d1
0003B804 <AmiBlitz3.ab2@17145>    ASL #7,d1
0003B80A <AmiBlitz3.ab2@17147>    OR.l #$f21f5400,d1                                      ;fmove.d (a7)+
0003B80E <AmiBlitz3.ab2@17148>    BSR writelong
0003B814 <AmiBlitz3.ab2@17149>    SUBQ.l #2,stacktrack
0003B816 <AmiBlitz3.ab2@17152>    SUBQ.w #1,d0
0003B81A <AmiBlitz3.ab2@17153>    BNE 'loop
0003B820 <AmiBlitz3.ab2@17156>   SUBQ.l #2,stacktrack                                     ;integer sub
0003B822 <AmiBlitz3.ab2@17157>   MOVE.l (a7)+,d0
0003B826 <AmiBlitz3.ab2@17160>   MOVE.w #$4CDF,D1
0003B82A <AmiBlitz3.ab2@17161>    BSR.w writeword
0003B82C <AmiBlitz3.ab2@17162>   MOVEQ.l #$00,D1
0003B82E <AmiBlitz3.ab2@17163>   MOVEQ.l #$0F,D4
0003B830 <AmiBlitz3.ab2@17166>     LSL.w #1,D3
0003B832 <AmiBlitz3.ab2@17167>     ROXR.w #1,D1
0003B836 <AmiBlitz3.ab2@17168>   DBF D4,JL_0_B09C                                         ;movem.l (a7)+,dx
0003B83A <AmiBlitz3.ab2@17170>     BSR.w writeword
0003B840 <AmiBlitz3.ab2@17171>    CLR.w regnumfunc
0003B842 <AmiBlitz3.ab2@17174>   MOVE.w (A7)+,D1
0003B846 <AmiBlitz3.ab2@17175>    BEQ.b JL_0_B0D2
0003B84A <AmiBlitz3.ab2@17176>   CMPI.w #$7,(A7)
0003B84E <AmiBlitz3.ab2@17177>    BEQ.b JL_0_B0C4
0003B854 <AmiBlitz3.ab2@17178>   LEA geta3,A0
0003B85A <AmiBlitz3.ab2@17179>   LEA numtoa0,A1
0003B85E <AmiBlitz3.ab2@17180>    BSR.w pokecode
0003B862 <AmiBlitz3.ab2@17181> BRA.b JL_0_B0CE
0003B868 <AmiBlitz3.ab2@17184>   MOVE.w deca3,D1
0003B86C <AmiBlitz3.ab2@17185>    BSR.w writeword
0003B870 <AmiBlitz3.ab2@17188>   BSR.w dopulla3                                           ;fix up string base
0003B872 <AmiBlitz3.ab2@17191>   MOVE.w (A7)+,D2                                          ;what it returns!
0003B876 <AmiBlitz3.ab2@17192>   CMP.w #$7,D2
0003B87A <AmiBlitz3.ab2@17193>    BNE.w JL_0_B0EC
0003B880 <AmiBlitz3.ab2@17194>   MOVE.w putstlen,D1
0003B886 <AmiBlitz3.ab2@17195>   OR.w regnum,D1
0003B88A <AmiBlitz3.ab2@17196>    BSR.w writeword
0003B88E <AmiBlitz3.ab2@17199>   BSR.w get1bytemain
0003B892 <AmiBlitz3.ab2@17200> BRA.w JL_0_AF66
0003B894 <AmiBlitz3.ab2@17204> deca3:   Dc.b $53,$4B                                      ;SUBQ.W  #1,A3
0003B89C <AmiBlitz3.ab2@17209>   CMP.b #2,optistring
0003B8A0 <AmiBlitz3.ab2@17210>   BEQ fs2
0003B8A4 <AmiBlitz3.ab2@17211>   BSR.w makesbase                                          ;writestringvariable
0003B8A8 <AmiBlitz3.ab2@17212>   BTST #$F,D2
0003B8AC <AmiBlitz3.ab2@17213>    BNE.w JL_0_B112
0003B8B2 <AmiBlitz3.ab2@17214>   MOVE.w D3,leaa5d3a2+2
0003B8B8 <AmiBlitz3.ab2@17215>   MOVE.l leaa5d3a2,D1
0003B8BC <AmiBlitz3.ab2@17216>    BSR.w pokela5s
0003B8C2 <AmiBlitz3.ab2@17219>   MOVE.w regnum,D1
0003B8C4 <AmiBlitz3.ab2@17220>   LSL.w #8,D1
0003B8C6 <AmiBlitz3.ab2@17221>   LSL.w #1,D1
0003B8CA <AmiBlitz3.ab2@17222>   ORI.w #$7000,D1
0003B8D0 <AmiBlitz3.ab2@17223>   LEA stvarget2,A0
0003B8D2 <AmiBlitz3.ab2@17224>   MOVE.w D1,(A0)
0003B8D8 <AmiBlitz3.ab2@17225>   MOVE.w regnum,D1
0003B8DE <AmiBlitz3.ab2@17226>   ANDI.w #$FFF8,$2(A0)
0003B8E2 <AmiBlitz3.ab2@17227>   OR.w D1,$2(A0)
0003B8E8 <AmiBlitz3.ab2@17228>   LEA stvarget2f,A1
0003B8EC <AmiBlitz3.ab2@17229>    BSR.w pokecode
0003B8F0 <AmiBlitz3.ab2@17230>   MOVE.w #$C600,D1
0003B8F4 <AmiBlitz3.ab2@17231>    BSR.w Atokejsr
0003B8F6 <AmiBlitz3.ab2@17232>   MOVEQ.l #$07,D2
0003B8FA <AmiBlitz3.ab2@17233> BRA.w reget
0003B900 <AmiBlitz3.ab2@17236>      TST.w stackpar
0003B904 <AmiBlitz3.ab2@17237>      BMI 'l10
0003B90A <AmiBlitz3.ab2@17238>      MOVE.l #$3f3c0007,d1
0003B910 <AmiBlitz3.ab2@17239>      ADDQ.w #2,a2offset
0003B914 <AmiBlitz3.ab2@17240>      BSR writelong
0003B918 <AmiBlitz3.ab2@17243>   MOVE.w #$4878,d1
0003B91E <AmiBlitz3.ab2@17244>      CLR.w stackpar
0003B922 <AmiBlitz3.ab2@17245>      BSR writeword
0003B926 <AmiBlitz3.ab2@17246>      MOVE.w #$0,d1
0003B92A <AmiBlitz3.ab2@17247>      BSR writeword
0003B92E <AmiBlitz3.ab2@17248>      MOVE.w #$246d,d1
0003B932 <AmiBlitz3.ab2@17249>      BSR writeword
0003B934 <AmiBlitz3.ab2@17250>      MOVE.w d3,d1
0003B938 <AmiBlitz3.ab2@17251>      BSR writeword
0003B93E <AmiBlitz3.ab2@17252>      MOVE.l #$4a926704,d1
0003B942 <AmiBlitz3.ab2@17253>      BSR writelong
0003B948 <AmiBlitz3.ab2@17254>      MOVE.l #$2eaafffc,d1
0003B94C <AmiBlitz3.ab2@17255>      BSR writelong
0003B950 <AmiBlitz3.ab2@17256>      MOVE.w #$2f0a,d1
0003B956 <AmiBlitz3.ab2@17257>      ADDQ.w #8,a2offset
0003B95A <AmiBlitz3.ab2@17258>      BSR writeword
0003B95E <AmiBlitz3.ab2@17259> BRA.w reget
0003B962 <AmiBlitz3.ab2@17262>   CMP.b #$7,D2                                             ;load basic var
0003B966 <AmiBlitz3.ab2@17263>    BEQ.w JL_0_B0F6
0003B96C <AmiBlitz3.ab2@17265>    TST.b iee
0003B970 <AmiBlitz3.ab2@17266>    BEQ 'noiee
0003B974 <AmiBlitz3.ab2@17267>    CMP.b #5,d2
0003B978 <AmiBlitz3.ab2@17268>    BNE 'noiee
0003B97A <AmiBlitz3.ab2@17269>    MOVE.l d0,-(a7)                                         ;fpu load var
0003B97E <AmiBlitz3.ab2@17270>    BTST #15,d2
0003B982 <AmiBlitz3.ab2@17271>    BEQ 'var
0003B988 <AmiBlitz3.ab2@17272>    CMP.l #$7fff,d3
0003B98C <AmiBlitz3.ab2@17273>    BGT 'longoffset
0003B992 <AmiBlitz3.ab2@17274>    MOVE.l #$f22a4400,d1                                    ;newtype     >32kb
0003B994 <AmiBlitz3.ab2@17275>    TST.w d3                                                ;offset =0
0003B998 <AmiBlitz3.ab2@17276>    BNE 'offset
0003B99E <AmiBlitz3.ab2@17279>   MOVE.l #$f2124400,d1
0003B9A0 <AmiBlitz3.ab2@17280>    MOVEQ #0,d3
0003B9A4 <AmiBlitz3.ab2@17281> BRA 'glob
0003B9AA <AmiBlitz3.ab2@17284>   SUBQ.l #4,destpointer
0003B9AE <AmiBlitz3.ab2@17285> BRA 'glob
0003B9B4 <AmiBlitz3.ab2@17288>   TST.b fast
0003B9B8 <AmiBlitz3.ab2@17289>    BEQ 'nofastload
0003B9BE <AmiBlitz3.ab2@17290>    TST.w regnum
0003B9C2 <AmiBlitz3.ab2@17291>    BNE 'nofastload
0003B9C8 <AmiBlitz3.ab2@17292>    CMP.l fp0addr,a4
0003B9CC <AmiBlitz3.ab2@17293>    BNE 'nofastload
0003B9D2 <AmiBlitz3.ab2@17294>    MOVE.l fp0iff,d1
0003B9D8 <AmiBlitz3.ab2@17295>    CMP.l firstiff,d1
0003B9DC <AmiBlitz3.ab2@17296>    BNE 'nofastload
0003B9E2 <AmiBlitz3.ab2@17297>    MOVE.w varmode,d1
0003B9E8 <AmiBlitz3.ab2@17298>    CMP.w fp0mode,d1
0003B9EC <AmiBlitz3.ab2@17299>    BNE 'nofastload
0003B9F2 <AmiBlitz3.ab2@17300>    CMP.w fp0var,d3
0003B9F6 <AmiBlitz3.ab2@17301>    BNE 'nofastload
0003B9FA <AmiBlitz3.ab2@17302>    BCLR #16,d2
0003B9FC <AmiBlitz3.ab2@17303>    MOVE.l (a7)+,d0
0003B9FE <AmiBlitz3.ab2@17304> RTS
0003BA00 <AmiBlitz3.ab2@17307>    MOVEQ #0,d0
0003BA06 <AmiBlitz3.ab2@17308>    MOVE.w regnum,d0
0003BA0C <AmiBlitz3.ab2@17309>    CMP.l maxregs,d0
0003BA10 <AmiBlitz3.ab2@17310>    BLE 'ok
0003BA16 <AmiBlitz3.ab2@17311>    LEA cmplxerr,a0
0003BA18 <AmiBlitz3.ab2@17312>   MOVE.l a0,-(a7)
0003BA1E <AmiBlitz3.ab2@17313> JMP handle_compileerror
0003BA24 <AmiBlitz3.ab2@17316>    LEA regtable,a4
0003BA26 <AmiBlitz3.ab2@17317>    TST.l (a4)
0003BA2A <AmiBlitz3.ab2@17318>    BEQ 'noreg
0003BA2E <AmiBlitz3.ab2@17319>    CMP.w 0+4(a4),d3
0003BA32 <AmiBlitz3.ab2@17320>    BNE 'doreg1
0003BA38 <AmiBlitz3.ab2@17321>    MOVE.l #$f2001c00,d1
0003BA3E <AmiBlitz3.ab2@17322>    MOVE.w regnum,d0
0003BA40 <AmiBlitz3.ab2@17323>    ASL.w #7,d0
0003BA42 <AmiBlitz3.ab2@17324>    OR.w d0,d1
0003BA46 <AmiBlitz3.ab2@17325>    BSR writelong
0003BA48 <AmiBlitz3.ab2@17326>    MOVE.l (a7)+,d0
0003BA4A <AmiBlitz3.ab2@17327> RTS
0003BA4E <AmiBlitz3.ab2@17330>   CMP.w 8+4(a4),d3
0003BA52 <AmiBlitz3.ab2@17331>    BNE 'doreg2
0003BA58 <AmiBlitz3.ab2@17332>    MOVE.l #$f2001800,d1
0003BA5E <AmiBlitz3.ab2@17333>    MOVE.w regnum,d0
0003BA60 <AmiBlitz3.ab2@17334>    ASL.w #7,d0
0003BA62 <AmiBlitz3.ab2@17335>    OR.w d0,d1
0003BA66 <AmiBlitz3.ab2@17336>    BSR writelong
0003BA68 <AmiBlitz3.ab2@17337>    MOVE.l (a7)+,d0
0003BA6A <AmiBlitz3.ab2@17338> RTS
0003BA6E <AmiBlitz3.ab2@17341>   CMP.w 16+4(a4),d3
0003BA72 <AmiBlitz3.ab2@17342>    BNE 'doreg3
0003BA78 <AmiBlitz3.ab2@17343>    MOVE.l #$f2001400,d1
0003BA7E <AmiBlitz3.ab2@17344>    MOVE.w regnum,d0
0003BA80 <AmiBlitz3.ab2@17345>    ASL.w #7,d0
0003BA82 <AmiBlitz3.ab2@17346>    OR.w d0,d1
0003BA86 <AmiBlitz3.ab2@17347>    BSR  writelong
0003BA88 <AmiBlitz3.ab2@17348>    MOVE.l (a7)+,d0
0003BA8A <AmiBlitz3.ab2@17349> RTS
0003BA8E <AmiBlitz3.ab2@17352>   CMP.w 24+4(a4),d3
0003BA92 <AmiBlitz3.ab2@17353>    BNE 'doreg4
0003BA98 <AmiBlitz3.ab2@17354>    MOVE.l #$f2001000,d1
0003BA9E <AmiBlitz3.ab2@17355>    MOVE.w regnum,d0
0003BAA0 <AmiBlitz3.ab2@17356>    ASL.w #7,d0
0003BAA2 <AmiBlitz3.ab2@17357>    OR.w d0,d1
0003BAA6 <AmiBlitz3.ab2@17358>    BSR writelong
0003BAA8 <AmiBlitz3.ab2@17359>    MOVE.l (a7)+,d0
0003BAAA <AmiBlitz3.ab2@17360> RTS
0003BAAE <AmiBlitz3.ab2@17363>    CMP.w 32+4(a4),d3
0003BAB2 <AmiBlitz3.ab2@17364>    BNE 'noreg
0003BAB8 <AmiBlitz3.ab2@17365>    MOVE.l #$f2000c00,d1
0003BABE <AmiBlitz3.ab2@17366>    MOVE.w regnum,d0
0003BAC0 <AmiBlitz3.ab2@17367>    ASL.w #7,d0
0003BAC2 <AmiBlitz3.ab2@17368>    OR.w d0,d1
0003BAC6 <AmiBlitz3.ab2@17369>    BSR writelong
0003BAC8 <AmiBlitz3.ab2@17370>    MOVE.l (a7)+,d0
0003BACA <AmiBlitz3.ab2@17371> RTS
0003BAD0 <AmiBlitz3.ab2@17374>    MOVE.l #$f22d4400,d1                                    ;var
0003BAD6 <AmiBlitz3.ab2@17375>    TST.w varmode
0003BADA <AmiBlitz3.ab2@17376>   BEQ 'glob
0003BADE <AmiBlitz3.ab2@17377>   BCLR #16,d1                                              ;local
0003BAE0 <AmiBlitz3.ab2@17380>    MOVEQ #0,d0
0003BAE6 <AmiBlitz3.ab2@17381>    MOVE.w regnum,d0
0003BAEA <AmiBlitz3.ab2@17382>    CMP.w #7,d0
0003BAEE <AmiBlitz3.ab2@17383>    BLE 'ok2
0003BAF4 <AmiBlitz3.ab2@17384>    LEA cmplxerr,a0
0003BAF6 <AmiBlitz3.ab2@17385>   MOVE.l a0,-(a7)
0003BAFC <AmiBlitz3.ab2@17386> JMP handle_compileerror
0003BAFE <AmiBlitz3.ab2@17389>      ASL.w #7,d0
0003BB00 <AmiBlitz3.ab2@17390>    OR.l d0,d1
0003BB08 <AmiBlitz3.ab2@17391>    CMP.l #doublecheck,8(a2)
0003BB0C <AmiBlitz3.ab2@17392>    BNE 'dbl
0003BB12 <AmiBlitz3.ab2@17393>    OR.l #$00001000,d1
0003BB16 <AmiBlitz3.ab2@17396>   BSR writelong
0003BB18 <AmiBlitz3.ab2@17397>    MOVE.l (a7)+,d0
0003BB1C <AmiBlitz3.ab2@17398>    AND.w #$ff,d2
0003BB1E <AmiBlitz3.ab2@17399>    MOVE.w d3,d1
0003BB22 <AmiBlitz3.ab2@17400>    BEQ 'nooffs
0003BB26 <AmiBlitz3.ab2@17401> BRA writeword
0003BB28 <AmiBlitz3.ab2@17406> RTS
0003BB2E <AmiBlitz3.ab2@17409>   MOVE.w regnum,D1
0003BB34 <AmiBlitz3.ab2@17410>   MOVE.w d1,load_var_reg
0003BB36 <AmiBlitz3.ab2@17411>   LSL.w #8,D1
0003BB40 <AmiBlitz3.ab2@17412>   MOVE.l destpointer,load_var_addr
0003BB46 <AmiBlitz3.ab2@17413>   MOVE.w d2,load_var_size
0003BB48 <AmiBlitz3.ab2@17414>   LSL.w #1,D1
0003BB4C <AmiBlitz3.ab2@17415>   BTST #$E,D2
0003BB50 <AmiBlitz3.ab2@17416>    BNE.w JL_0_B17A
0003BB52 <AmiBlitz3.ab2@17417>   TST.b D2
0003BB56 <AmiBlitz3.ab2@17418>    BNE.w JL_0_B17E
0003BB58 <AmiBlitz3.ab2@17419>   MOVEQ.l #$03,D2
0003BB5C <AmiBlitz3.ab2@17420>   ORI.w #$200A,D1
0003BB60 <AmiBlitz3.ab2@17421> BRA.w writeword
0003BB64 <AmiBlitz3.ab2@17424>   MOVE.b #$3,D2
0003BB68 <AmiBlitz3.ab2@17427>   BTST #$F,D2
0003BB6C <AmiBlitz3.ab2@17428>    BEQ.w JL_0_B19A                                         ;loadarray
0003BB72 <AmiBlitz3.ab2@17429>    TST.b fast                                              ;lea->move xx(a2)
0003BB76 <AmiBlitz3.ab2@17430>    BEQ 'la10
0003BB7C <AmiBlitz3.ab2@17435>    CLR.l load_var_addr
0003BB80 <AmiBlitz3.ab2@17436> BRA 'la10
0003BB88 <AmiBlitz3.ab2@17438>    CMP.w #$2012,movea2dn                                  ;??Looks like dead code??
0003BB8C <AmiBlitz3.ab2@17439>    BNE 'la10
0003BB92 <AmiBlitz3.ab2@17440>    TST.b optiarray
0003BB96 <AmiBlitz3.ab2@17441>    BNE 'la10
0003BB9C <AmiBlitz3.ab2@17442>    MOVE.l destpointer,a4
0003BBA2 <AmiBlitz3.ab2@17443>    SUB.l loada,a4
0003BBA6 <AmiBlitz3.ab2@17444>    CMP.w #4,a4
0003BBAA <AmiBlitz3.ab2@17445>    BEQ 'la100
0003BBAE <AmiBlitz3.ab2@17446>    CMP.w #2,a4
0003BBB2 <AmiBlitz3.ab2@17447>    BNE 'la10
0003BBB8 <AmiBlitz3.ab2@17448>    MOVE.l destpointer,a4
0003BBBC <AmiBlitz3.ab2@17449>    CMP.b #3,d2
0003BBC0 <AmiBlitz3.ab2@17450>    BCS 'la110
0003BBC6 <AmiBlitz3.ab2@17451>    MOVE.w #$202a,-2(a4)
0003BBCA <AmiBlitz3.ab2@17452>    OR.w d1,-2(a4)
0003BBD0 <AmiBlitz3.ab2@17453>    MOVE.w arrayoffset,d1
0003BBD4 <AmiBlitz3.ab2@17454>    BSR writeword
0003BBD8 <AmiBlitz3.ab2@17455> BRA JL_0_B194
0003BBDC <AmiBlitz3.ab2@17458>    CMP.b #2,d2
0003BBE0 <AmiBlitz3.ab2@17459>    BNE 'la120
0003BBE6 <AmiBlitz3.ab2@17460>     MOVE.w #$302a,-2(a4)
0003BBEA <AmiBlitz3.ab2@17461>    OR.w d1,-2(a4)
0003BBF0 <AmiBlitz3.ab2@17463>    MOVE.w arrayoffset,d1
0003BBF4 <AmiBlitz3.ab2@17464>    BSR writeword
0003BBF8 <AmiBlitz3.ab2@17465> BRA JL_0_B194
0003BBFC <AmiBlitz3.ab2@17468>   CMP.b #1,d2
0003BC00 <AmiBlitz3.ab2@17469>    BNE.s 'la10
0003BC06 <AmiBlitz3.ab2@17470>     MOVE.w #$102a,-2(a4)
0003BC0A <AmiBlitz3.ab2@17471>    OR.w d1,-2(a4)
0003BC10 <AmiBlitz3.ab2@17472>    MOVE.w arrayoffset,d1
0003BC14 <AmiBlitz3.ab2@17473>    BSR writeword
0003BC18 <AmiBlitz3.ab2@17474> BRA JL_0_B194
0003BC1E <AmiBlitz3.ab2@17477>   MOVE.l destpointer,a4
0003BC24 <AmiBlitz3.ab2@17478>    CMP.w #$45ea,-2(a4)
0003BC28 <AmiBlitz3.ab2@17479>    BNE 'la10
0003BC2C <AmiBlitz3.ab2@17480>    CMP.b #3,d2
0003BC30 <AmiBlitz3.ab2@17481>    BCS 'la11
0003BC36 <AmiBlitz3.ab2@17482>    MOVE.w #$202a,-4(a4)
0003BC3A <AmiBlitz3.ab2@17483>    OR.w d1,-4(a4)
0003BC3E <AmiBlitz3.ab2@17484> BRA JL_0_B194
0003BC42 <AmiBlitz3.ab2@17487>    CMP.b #2,d2
0003BC46 <AmiBlitz3.ab2@17488>    BNE 'la12
0003BC4C <AmiBlitz3.ab2@17489>     MOVE.w #$302a,-4(a4)
0003BC50 <AmiBlitz3.ab2@17490>    OR.w d1,-4(a4)
0003BC54 <AmiBlitz3.ab2@17491> BRA JL_0_B194
0003BC58 <AmiBlitz3.ab2@17494>   CMP.b #1,d2
0003BC5C <AmiBlitz3.ab2@17495>    BNE.s 'la10
0003BC62 <AmiBlitz3.ab2@17496>     MOVE.w #$102a,-4(a4)
0003BC66 <AmiBlitz3.ab2@17497>    OR.w d1,-4(a4)
0003BC6A <AmiBlitz3.ab2@17498> BRA JL_0_B194
0003BC70 <AmiBlitz3.ab2@17501>    OR.w movea2dn,D1
0003BC74 <AmiBlitz3.ab2@17502>    BSR.w JL_0_B1B2
0003BC78 <AmiBlitz3.ab2@17503>    BSR.w writeword
0003BC7C <AmiBlitz3.ab2@17506>   ANDI.w #$FF,D2
0003BC7E <AmiBlitz3.ab2@17507> RTS
0003BC84 <AmiBlitz3.ab2@17511>    MOVE.l destpointer,a4
0003BC8C <AmiBlitz3.ab2@17512>    MOVE.l #$f22a4400,-4(a4)
0003BC92 <AmiBlitz3.ab2@17513>    MOVE.w arrayoffset,d1
0003BC96 <AmiBlitz3.ab2@17514> BRA writeword
0003BC9C <AmiBlitz3.ab2@17518>   OR.w moved3a5dn,D1                                        ;write move.l 0(a5),reg
0003BCA0 <AmiBlitz3.ab2@17519>    BSR.w JL_0_B1B2
0003BCA4 <AmiBlitz3.ab2@17520>    BSR.w pokewda5s
0003BCA6 <AmiBlitz3.ab2@17521>   MOVE.w D3,D1
0003BCAA <AmiBlitz3.ab2@17522>    BSR.w writeword
0003BCAE <AmiBlitz3.ab2@17523> BRA.w JL_0_B194
0003BCB2 <AmiBlitz3.ab2@17526>   BTST #$E,D2
0003BCB6 <AmiBlitz3.ab2@17527>    BNE.w JL_0_B1CA
0003BCBA <AmiBlitz3.ab2@17528>   CMP.b #$1,D2
0003BCBE <AmiBlitz3.ab2@17529>    BEQ.w JL_0_B1CC
0003BCC2 <AmiBlitz3.ab2@17530>   CMP.b #$2,D2
0003BCC6 <AmiBlitz3.ab2@17531>    BEQ.w JL_0_B1D2
0003BCC8 <AmiBlitz3.ab2@17534> RTS
0003BCCC <AmiBlitz3.ab2@17537>   EORI.w #$3000,D1
0003BCCE <AmiBlitz3.ab2@17538> RTS
0003BCD2 <AmiBlitz3.ab2@17541>   ORI.w #$1000,D1
0003BCD4 <AmiBlitz3.ab2@17542> RTS
0003BCDC <AmiBlitz3.ab2@17546>   MOVE.w #$FFFF,dfetch
0003BCE0 <AmiBlitz3.ab2@17547>   BSR.w get1bytemain
0003BCE4 <AmiBlitz3.ab2@17548>   CMP.w #$2D,D0
0003BCE8 <AmiBlitz3.ab2@17549>    BNE.w JL_0_B206
0003BCEC <AmiBlitz3.ab2@17550>   BSR.w get1bytemain
0003BCF0 <AmiBlitz3.ab2@17551>   BSR.w JL_0_B206
0003BCF4 <AmiBlitz3.ab2@17552>   CMP.w #$5,D2
0003BCF8 <AmiBlitz3.ab2@17553>    BCC.w JL_0_B200
0003BCFA <AmiBlitz3.ab2@17554>   NEG.l D0
0003BCFC <AmiBlitz3.ab2@17555> RTS
0003BD02 <AmiBlitz3.ab2@17558>   TST.b fpu
0003BD06 <AmiBlitz3.ab2@17559>   BEQ 'noneg
0003BD0A <AmiBlitz3.ab2@17560>   fneg.x fp0
0003BD0C <AmiBlitz3.ab2@17561> RTS
0003BD10 <AmiBlitz3.ab2@17564>   BCHG #$7,D0
0003BD12 <AmiBlitz3.ab2@17565> RTS
0003BD16 <AmiBlitz3.ab2@17568>   CMP.w #$24,D0
0003BD1A <AmiBlitz3.ab2@17569>    BEQ.w get_hexconstant
0003BD1E <AmiBlitz3.ab2@17570>   CMP.w #$25,D0
0003BD22 <AmiBlitz3.ab2@17571>    BEQ.w JL_0_A8C0
0003BD26 <AmiBlitz3.ab2@17572>   CMP.w #$2E,D0
0003BD2A <AmiBlitz3.ab2@17573>    BNE.w JL_0_B224
0003BD2C <AmiBlitz3.ab2@17576>   MOVEQ.l #$00,D3
0003BD30 <AmiBlitz3.ab2@17577> BRA.w JL_0_B272
0003BD32 <AmiBlitz3.ab2@17580>   MOVEQ.l #$00,D3                                          ;number
0003BD36 <AmiBlitz3.ab2@17581>    BSR.w atoi
0003BD3A <AmiBlitz3.ab2@17582>   CMP.w #$2E,D0
0003BD3E <AmiBlitz3.ab2@17583>    BEQ.w JL_0_B268
0003BD42 <AmiBlitz3.ab2@17584>   ORI.w #$20,D0
0003BD46 <AmiBlitz3.ab2@17585>   CMP.w #$65,D0
0003BD4A <AmiBlitz3.ab2@17586>    BNE.w JL_0_B46E
0003BD50 <AmiBlitz3.ab2@17587>   CMP.l #$800000,D3
0003BD54 <AmiBlitz3.ab2@17588>    BCC.w overerr
0003BD56 <AmiBlitz3.ab2@17589>   MOVEQ.l #-$01,D6
0003BD5A <AmiBlitz3.ab2@17590>   fmove.l d3,fp0
0003BD5C <AmiBlitz3.ab2@17591>   MOVE.l D3,D0
0003BD62 <AmiBlitz3.ab2@17592>   MOVEA.l _mathffpbase,A6
0003BD66 <AmiBlitz3.ab2@17593>    JSR -$24(A6)
0003BD68 <AmiBlitz3.ab2@17594>   MOVE.l D0,D3
0003BD6C <AmiBlitz3.ab2@17595>    BSR.w JL_0_B2E6
0003BD70 <AmiBlitz3.ab2@17596>    BSR.w reget
0003BD74 <AmiBlitz3.ab2@17597>    BSR.w JL_0_B480
0003BD78 <AmiBlitz3.ab2@17598> BRA.w JL_0_B3DC
0003BD7C <AmiBlitz3.ab2@17601>   CMP.b #4,d2
0003BD80 <AmiBlitz3.ab2@17602>   BEQ 'l4
0003BD84 <AmiBlitz3.ab2@17603>   MOVE.b #5,d2                                             ;nprint 2/0.5 bugfix
0003BD8A <AmiBlitz3.ab2@17606>    TST.b fpu
0003BD8E <AmiBlitz3.ab2@17607>    BNE 'l1
0003BD94 <AmiBlitz3.ab2@17608>    CMP.l #$800000,D3
0003BD98 <AmiBlitz3.ab2@17609>    BCC.w overerr
0003BD9C <AmiBlitz3.ab2@17610> BRA JL_0_B272
0003BDA2 <AmiBlitz3.ab2@17613>   CMP.l #$7fffffff,d3
0003BDA6 <AmiBlitz3.ab2@17614>     BCC.w overerr
0003BDA8 <AmiBlitz3.ab2@17617>   MOVEQ.l #-$01,D6
0003BDAA <AmiBlitz3.ab2@17618>   MOVE.l D3,D0
0003BDAE <AmiBlitz3.ab2@17619>   fmove.l d3,fp0
0003BDB4 <AmiBlitz3.ab2@17620>   MOVEA.l _mathffpbase,A6
0003BDB8 <AmiBlitz3.ab2@17621>    JSR -$24(A6)                                            ;integer to ffp
0003BDBA <AmiBlitz3.ab2@17622>   MOVE.l D0,-(A7)
0003BDBE <AmiBlitz3.ab2@17623>    BSR.w get1bytemain
0003BDC2 <AmiBlitz3.ab2@17624>    BSR.w tstnum
0003BDC6 <AmiBlitz3.ab2@17625>    BNE.w syntaxerr
0003BDC8 <AmiBlitz3.ab2@17626>   MOVEQ.l #$00,D3
0003BDCC <AmiBlitz3.ab2@17627>    BSR.w atoi
0003BDCE <AmiBlitz3.ab2@17628>   TST.l D3
0003BDD2 <AmiBlitz3.ab2@17629>    BEQ.w JL_0_B2E0
0003BDD8 <AmiBlitz3.ab2@17630>   TST.b fpu
0003BDDC <AmiBlitz3.ab2@17631>   BNE 'l1
0003BDE2 <AmiBlitz3.ab2@17632>   CMP.l #$800000,D3
0003BDE6 <AmiBlitz3.ab2@17633>    BCC.w overerr
0003BDEA <AmiBlitz3.ab2@17634> BRA 'l2
0003BDF0 <AmiBlitz3.ab2@17637>   CMP.l #$7fffffff,d3
0003BDF4 <AmiBlitz3.ab2@17638>   BCC overerr
0003BDF8 <AmiBlitz3.ab2@17641>   fmove.l d5,fp1
0003BDFA <AmiBlitz3.ab2@17642>   MOVE.l D5,D0
0003BDFE <AmiBlitz3.ab2@17643>    JSR -$24(A6)
0003BE00 <AmiBlitz3.ab2@17644>   MOVE.l D0,D5
0003BE04 <AmiBlitz3.ab2@17645>   fmove.l d3,fp2
0003BE06 <AmiBlitz3.ab2@17646>   MOVE.l D3,D0
0003BE0A <AmiBlitz3.ab2@17647>    JSR -$24(A6)
0003BE0E <AmiBlitz3.ab2@17648>   fdiv.x fp1,fp2
0003BE10 <AmiBlitz3.ab2@17649>   MOVE.l D5,D1
0003BE14 <AmiBlitz3.ab2@17650>    JSR -$54(A6)
0003BE18 <AmiBlitz3.ab2@17651>   fadd.x fp2,fp0
0003BE1A <AmiBlitz3.ab2@17652>   MOVE.l (A7)+,D1
0003BE1E <AmiBlitz3.ab2@17653>    JSR -$42(A6)
0003BE20 <AmiBlitz3.ab2@17654>   MOVE.l D0,D3
0003BE24 <AmiBlitz3.ab2@17655>    BSR.w reget
0003BE28 <AmiBlitz3.ab2@17656>   ORI.w #$20,D0
0003BE2C <AmiBlitz3.ab2@17657>   CMP.w #$65,D0
0003BE30 <AmiBlitz3.ab2@17658>    BNE.w JL_0_B2D4
0003BE34 <AmiBlitz3.ab2@17659>    BSR.w JL_0_B2E6
0003BE38 <AmiBlitz3.ab2@17662>    BSR.w reget
0003BE3C <AmiBlitz3.ab2@17663>    BSR.w JL_0_B480
0003BE40 <AmiBlitz3.ab2@17664> BRA.w JL_0_B3DC
0003BE42 <AmiBlitz3.ab2@17667>   MOVE.l (A7)+,D3
0003BE46 <AmiBlitz3.ab2@17668> BRA.w JL_0_B2D4
0003BE4A <AmiBlitz3.ab2@17671>   BSR.w get1bytemain
0003BE4E <AmiBlitz3.ab2@17672>   CMP.w #$2B,D0
0003BE52 <AmiBlitz3.ab2@17673>    BEQ.w JL_0_B30E
0003BE56 <AmiBlitz3.ab2@17674>   CMP.w #$2D,D0
0003BE5A <AmiBlitz3.ab2@17675>    BNE.w JL_0_B312
0003BE5E <AmiBlitz3.ab2@17676>    BSR.w get1bytemain
0003BE62 <AmiBlitz3.ab2@17677>    BSR.w getsign
0003BE64 <AmiBlitz3.ab2@17678>   MOVE.l D3,D0
0003BE68 <AmiBlitz3.ab2@17679>   fdiv.x fp1,fp0
0003BE6A <AmiBlitz3.ab2@17680>   MOVE.l D4,D1
0003BE6E <AmiBlitz3.ab2@17681>    JSR -$54(A6)
0003BE70 <AmiBlitz3.ab2@17682>   MOVE.l D0,D3
0003BE72 <AmiBlitz3.ab2@17683> RTS
0003BE76 <AmiBlitz3.ab2@17686>   BSR.w get1bytemain
0003BE7A <AmiBlitz3.ab2@17689>   BSR.w getsign
0003BE7E <AmiBlitz3.ab2@17690>   fmul.x fp1,fp0
0003BE80 <AmiBlitz3.ab2@17691>   MOVE.l D3,D0
0003BE82 <AmiBlitz3.ab2@17692>   MOVE.l D4,D1
0003BE86 <AmiBlitz3.ab2@17693>    JSR -$4E(A6)
0003BE88 <AmiBlitz3.ab2@17694>   MOVE.l D0,D3
0003BE8A <AmiBlitz3.ab2@17695> RTS
0003BE8E <AmiBlitz3.ab2@17698>   BSR.w tstnum
0003BE92 <AmiBlitz3.ab2@17699>    BNE.w syntaxerr
0003BE94 <AmiBlitz3.ab2@17700>   MOVE.w D0,D4
0003BE98 <AmiBlitz3.ab2@17701>   SUBI.w #$30,D4
0003BE9C <AmiBlitz3.ab2@17702>    BSR.w get1bytemain
0003BEA0 <AmiBlitz3.ab2@17703>    BSR.w tstnum
0003BEA4 <AmiBlitz3.ab2@17704>    BNE.w getsign__skip
0003BEA8 <AmiBlitz3.ab2@17705>   MULU #$A,D4
0003BEAC <AmiBlitz3.ab2@17706>   SUBI.w #$30,D0
0003BEAE <AmiBlitz3.ab2@17707>   ADD.w D0,D4
0003BEB2 <AmiBlitz3.ab2@17708>    BSR.w get1bytemain
0003BEB6 <AmiBlitz3.ab2@17711>   CMP.w #$12,D4
0003BEBA <AmiBlitz3.ab2@17712>    BHI.w overerr
0003BEBC <AmiBlitz3.ab2@17713>   LSL.w #3,D4
0003BEC2 <AmiBlitz3.ab2@17714>   LEA fputab,a0
0003BEC4 <AmiBlitz3.ab2@17715>   ADD.l d4,a0
0003BECA <AmiBlitz3.ab2@17716>   fmove.d 0(a0),fp1
0003BECC <AmiBlitz3.ab2@17717>   LSR.w #1,d4
0003BED0 <AmiBlitz3.ab2@17718>   MOVE.l facts(PC,D4.W),D4
0003BED2 <AmiBlitz3.ab2@17719> RTS
0003BF1A <AmiBlitz3.ab2@17723>   Dc.d 1,10,100,1000,10000,100000,1000000,10000000,100000000  ;,1000000000,10000000000
0003BF1E <AmiBlitz3.ab2@17728>   Dc.l $80000041
0003BF22 <AmiBlitz3.ab2@17729>   Dc.l $A0000044
0003BF26 <AmiBlitz3.ab2@17730>   Dc.l $C8000047
0003BF2A <AmiBlitz3.ab2@17731>   Dc.l $FA00004A
0003BF2E <AmiBlitz3.ab2@17732>   Dc.l $9C40004E
0003BF32 <AmiBlitz3.ab2@17733>   Dc.l $C3500051
0003BF36 <AmiBlitz3.ab2@17734>   Dc.l $F4240054
0003BF3A <AmiBlitz3.ab2@17735>   Dc.l $98968058
0003BF3E <AmiBlitz3.ab2@17736>   Dc.l $BEBC205B
0003BF42 <AmiBlitz3.ab2@17737>   Dc.l $EE6B285E
0003BF46 <AmiBlitz3.ab2@17738>   Dc.l $9502F962
0003BF4A <AmiBlitz3.ab2@17739>   Dc.l $BA43B765
0003BF4E <AmiBlitz3.ab2@17740>   Dc.l $E8D4A568
0003BF52 <AmiBlitz3.ab2@17741>   Dc.l $9184E76C
0003BF56 <AmiBlitz3.ab2@17742>   Dc.l $B5E6A96F
0003BF5A <AmiBlitz3.ab2@17743>   Dc.l $E35F2972
0003BF5E <AmiBlitz3.ab2@17744>   Dc.l $8E1BCA76
0003BF62 <AmiBlitz3.ab2@17745>   Dc.l $B1A2BD79
0003BF66 <AmiBlitz3.ab2@17746>   Dc.l $DE0B6C7C
0003BF68 <AmiBlitz3.ab2@17750>   MOVEQ.l #$01,D5
0003BF6A <AmiBlitz3.ab2@17753>   LSL.l #1,D5
0003BF6C <AmiBlitz3.ab2@17754>   MOVE.l D5,D1
0003BF6E <AmiBlitz3.ab2@17755>   LSL.l #2,D5
0003BF70 <AmiBlitz3.ab2@17756>   ADD.l D1,D5                                              ;divisor for frac convert!
0003BF72 <AmiBlitz3.ab2@17757>   LSL.l #1,D3
0003BF76 <AmiBlitz3.ab2@17758>    BCS.w overerr
0003BF78 <AmiBlitz3.ab2@17759>   MOVE.l D3,D1
0003BF7A <AmiBlitz3.ab2@17760>   LSL.l #1,D3
0003BF7E <AmiBlitz3.ab2@17761>    BCS.w overerr
0003BF80 <AmiBlitz3.ab2@17762>   LSL.l #1,D3
0003BF84 <AmiBlitz3.ab2@17763>    BCS.w overerr
0003BF86 <AmiBlitz3.ab2@17764>   ADD.l D1,D3
0003BF8A <AmiBlitz3.ab2@17765>   SUBI.w #$30,D0
0003BF8C <AmiBlitz3.ab2@17766>   ADD.l D0,D3
0003BFB8 <AmiBlitz3.ab2@17767>    !fget                                                   ;bsr.w get1bytemain
0003BFBC <AmiBlitz3.ab2@17768>    CMP.b #1,d0
0003BFC0 <AmiBlitz3.ab2@17769>    BNE 'cm1
0003BFC2 <AmiBlitz3.ab2@17770>    SUBQ.l #1,a5
0003BFC6 <AmiBlitz3.ab2@17771>    BSR get1bytemain                                        ;??wy not !fget
0003BFCA <AmiBlitz3.ab2@17774>   CMP.b #$7e,d0
0003BFCE <AmiBlitz3.ab2@17775>    BNE 'cm2
0003BFD0 <AmiBlitz3.ab2@17776>    SUBQ.l #1,a5
0003BFD4 <AmiBlitz3.ab2@17777>    BSR get1bytemain
0003BFD6 <AmiBlitz3.ab2@17780>   TST.b d0
0003BFDA <AmiBlitz3.ab2@17781>    BPL 'l10
0003BFDC <AmiBlitz3.ab2@17782>    LSL.w #8,d0
0003BFDE <AmiBlitz3.ab2@17783>    MOVE.b (a5)+,d0
0003BFE4 <AmiBlitz3.ab2@17784>    MOVE.w d0,lastchar
0003BFF6 <AmiBlitz3.ab2@17787>   !compare2                                                ;bsr.w tstnum ;cmake bug
0003BFFA <AmiBlitz3.ab2@17788>    BEQ.w atoi__loop
0003BFFC <AmiBlitz3.ab2@17789> RTS
0003BFFE <AmiBlitz3.ab2@17792> dfetch:  Ds.w 1                                            ;fetching data?
0003C002 <AmiBlitz3.ab2@17796>   MOVE.w dfetch(PC),D1
0003C006 <AmiBlitz3.ab2@17797>    BEQ.w JL_0_B3EC
0003C00C <AmiBlitz3.ab2@17798>   CLR.w dfetch
0003C00E <AmiBlitz3.ab2@17799> RTS
0003C014 <AmiBlitz3.ab2@17802>   MOVE.w d2,imm_size
0003C01E <AmiBlitz3.ab2@17803>   MOVE.w regnum,imm_reg
0003C028 <AmiBlitz3.ab2@17804>   MOVE.l destpointer,imm_addr
0003C02C <AmiBlitz3.ab2@17805>    CMP.w #$1,D2
0003C030 <AmiBlitz3.ab2@17806>    BEQ.w JL_0_B418
0003C034 <AmiBlitz3.ab2@17807>   CMP.w #$2,D2
0003C038 <AmiBlitz3.ab2@17808>    BEQ.w JL_0_B418
0003C03C <AmiBlitz3.ab2@17809>   CMP.w #$3,D2
0003C040 <AmiBlitz3.ab2@17810>    BEQ.w JL_0_B434
0003C044 <AmiBlitz3.ab2@17811>   CMP.w #$4,D2
0003C048 <AmiBlitz3.ab2@17812>    BEQ.w JL_0_B434
0003C04C <AmiBlitz3.ab2@17813>   CMP.w #$5,D2
0003C050 <AmiBlitz3.ab2@17814>    BEQ.w JL_0_B434
0003C054 <AmiBlitz3.ab2@17815> BRA.w mismatcherr
0003C05A <AmiBlitz3.ab2@17818>   MOVE.w regnum,D1
0003C05C <AmiBlitz3.ab2@17819>   LSL.w #8,D1
0003C05E <AmiBlitz3.ab2@17820>   LSL.w #1,D1
0003C062 <AmiBlitz3.ab2@17821>   ORI.w #$303C,D1
0003C066 <AmiBlitz3.ab2@17822>    BSR.w writeword
0003C068 <AmiBlitz3.ab2@17823>   MOVE.w D0,D1
0003C06C <AmiBlitz3.ab2@17824>    BSR.w writeword
0003C070 <AmiBlitz3.ab2@17825> BRA.w reget
0003C072 <AmiBlitz3.ab2@17828>   MOVEQ #0,d1
0003C078 <AmiBlitz3.ab2@17829>   MOVE.w regnum,D1
0003C07E <AmiBlitz3.ab2@17830>   TST.b fpu
0003C082 <AmiBlitz3.ab2@17831>   BEQ 'f1
0003C086 <AmiBlitz3.ab2@17832>   CMP.w #5,d2
0003C08A <AmiBlitz3.ab2@17833>   BEQ 'l10
0003C08E <AmiBlitz3.ab2@17834> BRA 'f2
0003C094 <AmiBlitz3.ab2@17837>   TST.b iee
0003C098 <AmiBlitz3.ab2@17838>   BNE 'l10
0003C09A <AmiBlitz3.ab2@17841>   LSL.w #8,D1
0003C09C <AmiBlitz3.ab2@17842>   LSL.w #1,D1
0003C0A0 <AmiBlitz3.ab2@17843>   ORI.w #$203C,D1
0003C0A4 <AmiBlitz3.ab2@17844>    BSR.w writeword
0003C0A6 <AmiBlitz3.ab2@17845>   MOVE.l D0,D1
0003C0AA <AmiBlitz3.ab2@17846>    BSR.w writelong
0003C0AE <AmiBlitz3.ab2@17847> BRA.w reget
0003C0B0 <AmiBlitz3.ab2@17850>   MOVEQ #5,d2
0003C0B2 <AmiBlitz3.ab2@17851>   ASL.l #7,d1
0003C0B4 <AmiBlitz3.ab2@17852>   SUBQ.l #8,a7
0003C0BA <AmiBlitz3.ab2@17857>       OR.l #$f23c4400,d1                                   ;fmove.s
0003C0C0 <AmiBlitz3.ab2@17858>        fmove.s fp0,0(a7)
0003C0C4 <AmiBlitz3.ab2@17860>   BSR writelong
0003C0C6 <AmiBlitz3.ab2@17861>   MOVE.l (a7)+,d1
0003C0CA <AmiBlitz3.ab2@17862>   BSR writelong
0003C0CC <AmiBlitz3.ab2@17863>   MOVE.l (a7)+,d1
0003C0D0 <AmiBlitz3.ab2@17867> BRA.w reget
0003C0D2 <AmiBlitz3.ab2@17873>  MOVE.l D3,D0
0003C0D4 <AmiBlitz3.ab2@17874>   TST.w D6
0003C0D8 <AmiBlitz3.ab2@17875>    BEQ.w JL_0_B46C
0003C0DE <AmiBlitz3.ab2@17876>   MOVEA.l _mathffpbase,A6
0003C0E2 <AmiBlitz3.ab2@17877>    JSR -$1E(A6)
0003C0E6 <AmiBlitz3.ab2@17878>    BVC.w JL_0_B46C
0003C0E8 <AmiBlitz3.ab2@17879>   ADDQ.w #4,A7
0003C0EC <AmiBlitz3.ab2@17880> BRA.w JL_0_B5A0
0003C0EE <AmiBlitz3.ab2@17883> RTS
0003C0F0 <AmiBlitz3.ab2@17887>   MOVEQ.l #$00,D6
0003C0F4 <AmiBlitz3.ab2@17888>    fmove.l d3,fp0
0003C0F8 <AmiBlitz3.ab2@17891>   BSR.w JL_0_B480
0003C0FC <AmiBlitz3.ab2@17892> BRA.w JL_0_B3DC
0003C0FE <AmiBlitz3.ab2@17895>   MOVE.w D2,-(A7)
0003C102 <AmiBlitz3.ab2@17896>    BSR.w JL_0_BF6A
0003C104 <AmiBlitz3.ab2@17897>   MOVE.w (A7)+,D2
0003C106 <AmiBlitz3.ab2@17900>   TST.w D2
0003C10A <AmiBlitz3.ab2@17901>    BNE.w JL_0_B498
0003C10C <AmiBlitz3.ab2@17902>   TST.w D6
0003C110 <AmiBlitz3.ab2@17903>    BEQ.w JL_0_B492
0003C112 <AmiBlitz3.ab2@17904>   MOVEQ.l #$04,D2
0003C116 <AmiBlitz3.ab2@17905> BRA.w JL_0_B510
0003C118 <AmiBlitz3.ab2@17908>   MOVEQ.l #$02,D2
0003C11C <AmiBlitz3.ab2@17909> BRA.w JL_0_B4C4
0003C120 <AmiBlitz3.ab2@17912>   CMP.w #$1,D2
0003C124 <AmiBlitz3.ab2@17913>    BEQ.w JL_0_B4C4
0003C128 <AmiBlitz3.ab2@17914>   CMP.w #$2,D2
0003C12C <AmiBlitz3.ab2@17915>    BEQ.w JL_0_B4F8
0003C130 <AmiBlitz3.ab2@17916>   CMP.w #$3,D2
0003C134 <AmiBlitz3.ab2@17917>    BEQ.w JL_0_B57A
0003C138 <AmiBlitz3.ab2@17918>   CMP.w #$4,D2
0003C13C <AmiBlitz3.ab2@17919>    BEQ.w JL_0_B506
0003C140 <AmiBlitz3.ab2@17920>   CMP.w #$5,D2
0003C144 <AmiBlitz3.ab2@17921>    BEQ.w JL_0_B586
0003C148 <AmiBlitz3.ab2@17922> BRA.w mismatcherr
0003C14C <AmiBlitz3.ab2@17925>   BSR.w JL_0_B450                                          ;bugfix if a.b=$90 bug fix
0003C152 <AmiBlitz3.ab2@17926>   CMP.l #$7f,D0
0003C156 <AmiBlitz3.ab2@17927>    BGT.w JL_0_B4DC
0003C15C <AmiBlitz3.ab2@17928>   CMP.l #$FFFFFF80,D0
0003C160 <AmiBlitz3.ab2@17929>    BGE.w JL_0_B59E
0003C162 <AmiBlitz3.ab2@17932>   MOVEQ.l #$02,D2                                          ;was 2 before
0003C168 <AmiBlitz3.ab2@17933>   CMP.l #$7fff,D0
0003C16C <AmiBlitz3.ab2@17934>    BGT.w JL_0_B4F2
0003C172 <AmiBlitz3.ab2@17935>   CMP.l #$FFFF8000,D0
0003C176 <AmiBlitz3.ab2@17936>    BGE.w JL_0_B59E
0003C178 <AmiBlitz3.ab2@17939>   MOVEQ.l #$03,D2
0003C17C <AmiBlitz3.ab2@17940> BRA.w JL_0_B59E
0003C17E <AmiBlitz3.ab2@17966>   TST.w D6
0003C182 <AmiBlitz3.ab2@17967>    BNE.w JL_0_B510
0003C186 <AmiBlitz3.ab2@17968>    BSR.w JL_0_B450
0003C18A <AmiBlitz3.ab2@17969> BRA.w JL_0_B4DC
0003C18E <AmiBlitz3.ab2@17972>   BSR.w JL_0_B450
0003C190 <AmiBlitz3.ab2@17973>   TST.w D6
0003C194 <AmiBlitz3.ab2@17974>   BEQ.w JL_0_B560
0003C19A <AmiBlitz3.ab2@17977>   CMP.l #MaxWordSgnd,D0
0003C19E <AmiBlitz3.ab2@17978>    BGT.w JL_0_B5A0
0003C1A4 <AmiBlitz3.ab2@17979>   CMP.l #$FFFF8000,D0
0003C1A8 <AmiBlitz3.ab2@17980>    BLT.w JL_0_B5A0
0003C1AA <AmiBlitz3.ab2@17981>   MOVE.w D0,-(A7)
0003C1AE <AmiBlitz3.ab2@17982>    JSR -$24(A6)
0003C1B0 <AmiBlitz3.ab2@17983>   MOVE.l D0,D1
0003C1B2 <AmiBlitz3.ab2@17984>   MOVE.l D3,D0
0003C1B6 <AmiBlitz3.ab2@17985>    JSR -$48(A6)
0003C1BC <AmiBlitz3.ab2@17986>   MOVE.l #$80000051,D1
0003C1C0 <AmiBlitz3.ab2@17987>    JSR -$4E(A6)
0003C1C4 <AmiBlitz3.ab2@17988>    JSR -$1E(A6)
0003C1C8 <AmiBlitz3.ab2@17989>    BEQ.w JL_0_B55A
0003C1CE <AmiBlitz3.ab2@17990>   CMP.l #$10000,D0
0003C1D2 <AmiBlitz3.ab2@17991>    BCC.w JL_0_B55A
0003C1D4 <AmiBlitz3.ab2@17992>   MOVE.w D0,D1
0003C1D6 <AmiBlitz3.ab2@17993>   MOVE.w (A7)+,D0
0003C1D8 <AmiBlitz3.ab2@17994>   SWAP D0
0003C1DA <AmiBlitz3.ab2@17995>   MOVE.w D1,D0
0003C1DE <AmiBlitz3.ab2@17996> BRA.w JL_0_B59E
0003C1E0 <AmiBlitz3.ab2@17999>   ADDQ.w #2,A7
0003C1E4 <AmiBlitz3.ab2@18000> BRA.w JL_0_B5A0
0003C1EA <AmiBlitz3.ab2@18003>   CMP.l #MaxWordSgnd,D0
0003C1EE <AmiBlitz3.ab2@18004>    BGT.w JL_0_B4F2
0003C1F4 <AmiBlitz3.ab2@18005>   CMP.l #$FFFF8000,D0
0003C1F8 <AmiBlitz3.ab2@18006>    BLT.w JL_0_B4F2
0003C1FA <AmiBlitz3.ab2@18007>   SWAP D0
0003C1FE <AmiBlitz3.ab2@18008> BRA.w JL_0_B59E
0003C200 <AmiBlitz3.ab2@18011>   TST.w D6
0003C204 <AmiBlitz3.ab2@18012>   BNE.w JL_0_B5A0
0003C206 <AmiBlitz3.ab2@18013>   MOVE.l D3,D0
0003C20A <AmiBlitz3.ab2@18014> BRA.w JL_0_B59E
0003C20C <AmiBlitz3.ab2@18017>   TST.w D6
0003C210 <AmiBlitz3.ab2@18018>   BNE.w JL_0_B5A0
0003C212 <AmiBlitz3.ab2@18019>   MOVE.l D3,D0
0003C218 <AmiBlitz3.ab2@18020>   MOVEA.l _mathffpbase,A6
0003C21C <AmiBlitz3.ab2@18021>   JSR -$24(A6)
0003C21E <AmiBlitz3.ab2@18022>   MOVE.l D0,D3
0003C222 <AmiBlitz3.ab2@18023> BRA.w JL_0_B5A0
0003C224 <AmiBlitz3.ab2@18026> RTS
0003C226 <AmiBlitz3.ab2@18029>   MOVEQ.l #$05,D2
0003C228 <AmiBlitz3.ab2@18030>   MOVE.l D3,D0
0003C22A <AmiBlitz3.ab2@18031> RTS
0003C22E <AmiBlitz3.ab2@18035>             Ds.l 1                                         ;??Looks like unused data??
0003C232 <AmiBlitz3.ab2@18036> pushpc:     Ds.l 1
0003C236 <AmiBlitz3.ab2@18037> pushoff:    Ds.l 1
0003C23A <AmiBlitz3.ab2@18038> pushdooff:  Ds.l 1
0003C23C <AmiBlitz3.ab2@18039> pushclen:   Ds.w 1
0003C240 <AmiBlitz3.ab2@18040> pushat:     Ds.l 1
0003C24A <AmiBlitz3.ab2@18044>   MOVE.l destpointer,pushpc
0003C254 <AmiBlitz3.ab2@18045>   MOVE.l hunkoffsetbase,pushoff
0003C256 <AmiBlitz3.ab2@18046> RTS
0003C25A <AmiBlitz3.ab2@18050>   MOVEM.l D0-D1/A0-A1,-(A7)
0003C260 <AmiBlitz3.ab2@18051>   MOVE.l destpointer,D0
0003C264 <AmiBlitz3.ab2@18052>   MOVE.l pushpc(PC),D1
0003C26A <AmiBlitz3.ab2@18053>   MOVE.l D1,destpointer
0003C26C <AmiBlitz3.ab2@18054>   SUB.l D1,D0
0003C272 <AmiBlitz3.ab2@18055>   MOVE.w D0,pushclen
0003C276 <AmiBlitz3.ab2@18056>    BEQ.w JL_0_B636
0003C27C <AmiBlitz3.ab2@18057>   MOVE.w dontwrite,D1
0003C280 <AmiBlitz3.ab2@18058>    BNE.w JL_0_B636
0003C288 <AmiBlitz3.ab2@18059>    CMP.w #1000,pushclen
0003C28C <AmiBlitz3.ab2@18060>    BGE conmemerr
0003C292 <AmiBlitz3.ab2@18061>    MOVE.l pushat,d0
0003C296 <AmiBlitz3.ab2@18062>    BNE 'nomem
0003C29C <AmiBlitz3.ab2@18063>    MOVE.l #1024,d0
0003C29E <AmiBlitz3.ab2@18064>   MOVEQ.l #$01,D1
0003C2A4 <AmiBlitz3.ab2@18065>   MOVEA.l _execbase,A6
0003C2AA <AmiBlitz3.ab2@18066>   MOVE.l mempool,a0
0003C2AE <AmiBlitz3.ab2@18067>   JSR _AllocPooled(a6)
0003C2B4 <AmiBlitz3.ab2@18069>   MOVE.l D0,pushat
0003C2B6 <AmiBlitz3.ab2@18072>   MOVEA.l D0,A0
0003C2BC <AmiBlitz3.ab2@18073>   MOVEA.l pushpc,A1
0003C2C2 <AmiBlitz3.ab2@18074>   MOVE.l A1,destpointer
0003C2C8 <AmiBlitz3.ab2@18075>   MOVE.w pushclen,D0
0003C2CA <AmiBlitz3.ab2@18076>   LSR.w #1,D0
0003C2CC <AmiBlitz3.ab2@18077>   SUBQ.w #1,D0
0003C2CE <AmiBlitz3.ab2@18080>     MOVE.w (A1)+,(A0)+
0003C2D2 <AmiBlitz3.ab2@18081>   DBF D0,JL_0_B626
0003C2DC <AmiBlitz3.ab2@18083>    MOVE.l hunkoffsetbase,pushdooff
0003C2E0 <AmiBlitz3.ab2@18086>   MOVEM.l (A7)+,D0-D1/A0-A1
0003C2E2 <AmiBlitz3.ab2@18087> RTS
0003C2E6 <AmiBlitz3.ab2@18091>   MOVEM.l D0-D1/A0-A1,-(A7)
0003C2E8 <AmiBlitz3.ab2@18092>   MOVEQ.l #$00,D0
0003C2EE <AmiBlitz3.ab2@18093>   MOVE.w pushclen,D0
0003C2F2 <AmiBlitz3.ab2@18094>    BEQ.w JL_0_B6D8
0003C2F8 <AmiBlitz3.ab2@18095>   MOVE.l destpointer,D1
0003C2FE <AmiBlitz3.ab2@18096>   ADD.l D0,destpointer
0003C304 <AmiBlitz3.ab2@18097>   TST.w dontwrite
0003C308 <AmiBlitz3.ab2@18098>    BNE.w JL_0_B6D8
0003C30A <AmiBlitz3.ab2@18099>   LSR.w #1,D0
0003C30C <AmiBlitz3.ab2@18100>   SUBQ.w #1,D0
0003C30E <AmiBlitz3.ab2@18101>   MOVEA.l D1,A1
0003C314 <AmiBlitz3.ab2@18102>   MOVEA.l pushat,A0
0003C31A <AmiBlitz3.ab2@18105>     CMPA.l destbufferend,A1
0003C31E <AmiBlitz3.ab2@18106>     BCS.w JL_0_B684
0003C326 <AmiBlitz3.ab2@18108>     MOVE.w #$FFFF,dontwrite
0003C32A <AmiBlitz3.ab2@18109>   BRA.w JL_0_B6D8
0003C32C <AmiBlitz3.ab2@18112>      MOVE.w (A0)+,(A1)+                                    ;copylibcode
0003C330 <AmiBlitz3.ab2@18113>   DBF D0,JL_0_B66E
0003C336 <AmiBlitz3.ab2@18115>   SUB.l pushpc,D1
0003C33A <AmiBlitz3.ab2@18116>   BEQ.w JL_0_B6C2
0003C340 <AmiBlitz3.ab2@18117>   MOVEA.l pushdooff,A0
0003C346 <AmiBlitz3.ab2@18120>   CMPA.l pushoff,A0
0003C34A <AmiBlitz3.ab2@18121>   BEQ.w JL_0_B6C2
0003C34E <AmiBlitz3.ab2@18122>   MOVEA.l $4(A0),A1
0003C354 <AmiBlitz3.ab2@18123>   ADDA.l destbufferstart,A1
0003C35A <AmiBlitz3.ab2@18124>   CMPA.l destbufferend,A1
0003C35E <AmiBlitz3.ab2@18125>   BCC.w JL_0_B6BC
0003C362 <AmiBlitz3.ab2@18126>   ADD.l D1,$4(A0)
0003C364 <AmiBlitz3.ab2@18129>   MOVEA.l (A0),A0
0003C368 <AmiBlitz3.ab2@18130> BRA.w JL_0_B69A
0003C36E <AmiBlitz3.ab2@18133>   MOVEA.l pushat,A1
0003C370 <AmiBlitz3.ab2@18134>   MOVEQ.l #$00,D0
0003C376 <AmiBlitz3.ab2@18135>   MOVE.w pushclen,D0
0003C37C <AmiBlitz3.ab2@18136>   MOVEA.l _execbase,A6
0003C382 <AmiBlitz3.ab2@18137>   MOVE.l mempool,a0
0003C386 <AmiBlitz3.ab2@18141>   MOVEM.l (A7)+,D0-D1/A0-A1
0003C388 <AmiBlitz3.ab2@18142> RTS
0003C38A <AmiBlitz3.ab2@18145>   MOVE.l D1,-(A7)                                          ;array mul
0003C38C <AmiBlitz3.ab2@18146>   MOVEQ.l #$00,D2
0003C38E <AmiBlitz3.ab2@18147>   MOVEQ.l #$0F,D3
0003C390 <AmiBlitz3.ab2@18150>     LSL.w #1,D1
0003C394 <AmiBlitz3.ab2@18151>     BCC.w JL_0_B6EE
0003C396 <AmiBlitz3.ab2@18152>     ADDQ.w #1,D2
0003C398 <AmiBlitz3.ab2@18153>     MOVE.w D3,D4
0003C39C <AmiBlitz3.ab2@18156>   DBF D3,JL_0_B6E4
0003C39E <AmiBlitz3.ab2@18158>   SUBQ.w #1,D2
0003C3A2 <AmiBlitz3.ab2@18159>    BNE.w JL_0_B726
0003C3A4 <AmiBlitz3.ab2@18160>   ADDQ.w #4,A7
0003C3A6 <AmiBlitz3.ab2@18161>   MOVE.w D4,D1
0003C3AA <AmiBlitz3.ab2@18162>    BEQ.w JL_0_B724
0003C3AE <AmiBlitz3.ab2@18163>   CMP.w #$8,D1
0003C3B2 <AmiBlitz3.ab2@18164>    BCS.w JL_0_B712
0003C3B6 <AmiBlitz3.ab2@18165>   SUBI.w #$8,D1
0003C3BA <AmiBlitz3.ab2@18166>    BSR.w JL_0_B712
0003C3BC <AmiBlitz3.ab2@18167>   MOVEQ.l #$00,D1
0003C3BE <AmiBlitz3.ab2@18170>   LSL.w #8,D1
0003C3C0 <AmiBlitz3.ab2@18171>   LSL.w #1,D1
0003C3C4 <AmiBlitz3.ab2@18172>   ORI.w #$E188,D1
0003C3CA <AmiBlitz3.ab2@18173>   OR.w regnum,D1
0003C3CE <AmiBlitz3.ab2@18174> BRA.w writeword
0003C3D0 <AmiBlitz3.ab2@18177> RTS
0003C3D2 <AmiBlitz3.ab2@18180>   MOVEQ #0,d1
0003C3D8 <AmiBlitz3.ab2@18181>   MOVE.w regnum,D1
0003C3DA <AmiBlitz3.ab2@18182>   LSL.l #8,D1
0003C3DC <AmiBlitz3.ab2@18184>   LSL.l #4,d1
0003C3E2 <AmiBlitz3.ab2@18186>   OR.l #$4c3c0000,d1
0003C3E8 <AmiBlitz3.ab2@18187>   OR.w regnum,d1
0003C3EC <AmiBlitz3.ab2@18188>   BSR.w writelong
0003C3EE <AmiBlitz3.ab2@18189>   MOVE.l (A7)+,D1
0003C3F2 <AmiBlitz3.ab2@18191> BRA writelong
0003C3F8 <AmiBlitz3.ab2@18194>   MOVE.l destpointer,-(A7)
0003C3FA <AmiBlitz3.ab2@18195>   MOVEQ.l #-$01,D7
0003C3FE <AmiBlitz3.ab2@18198>     BSR.w findhilib
0003C402 <AmiBlitz3.ab2@18199>      BEQ.w JL_0_B8A4
0003C406 <AmiBlitz3.ab2@18200>     TST.w $C(A2)
0003C40A <AmiBlitz3.ab2@18201>      BPL.w JL_0_B746
0003C40E <AmiBlitz3.ab2@18203>     MOVE.l $16(A2),D1
0003C412 <AmiBlitz3.ab2@18204>     BEQ.w JL_0_B746
0003C416 <AmiBlitz3.ab2@18206>     MOVE.w $4(A2),D1                                       ; check state in D1 and do some things
0003C41A <AmiBlitz3.ab2@18207>     CMP.w #-$2,D1
0003C41E <AmiBlitz3.ab2@18208>      BNE.w JL_0_B772
0003C422 <AmiBlitz3.ab2@18209>     BSR.w makevsize
0003C426 <AmiBlitz3.ab2@18210> BRA.w JL_0_B7FE
0003C42A <AmiBlitz3.ab2@18213>     CMP.w #-$5C4,D1
0003C42E <AmiBlitz3.ab2@18214>      BNE.w JL_0_B790
0003C432 <AmiBlitz3.ab2@18215>     MOVE.w #$7000,D1
0003C43A <AmiBlitz3.ab2@18216>     BTST #$7,autorun
0003C43C <AmiBlitz3.ab2@18217>     SNE D1
0003C440 <AmiBlitz3.ab2@18218>     BSR.w writeword
0003C444 <AmiBlitz3.ab2@18219> BRA.w JL_0_B7FE
0003C448 <AmiBlitz3.ab2@18222>     CMP.w #-$12D,D1
0003C44C <AmiBlitz3.ab2@18223>      BNE.w JL_0_B7A0
0003C450 <AmiBlitz3.ab2@18224>     BSR.w makessize
0003C454 <AmiBlitz3.ab2@18225> BRA.w JL_0_B7FE
0003C458 <AmiBlitz3.ab2@18228>     CMP.w #-$1F5,D1
0003C45C <AmiBlitz3.ab2@18229>      BNE.w JL_0_B7C2
0003C460 <AmiBlitz3.ab2@18230>     MOVE.w #$203C,D1
0003C464 <AmiBlitz3.ab2@18231>     BSR.w writeword
0003C468 <AmiBlitz3.ab2@18232>     BSR.w addoff
0003C46E <AmiBlitz3.ab2@18233>     MOVE.l endop,D1
0003C472 <AmiBlitz3.ab2@18234>     BSR.w writelong
0003C476 <AmiBlitz3.ab2@18235> BRA.w JL_0_B7FE
0003C47A <AmiBlitz3.ab2@18238>     CMP.w #-$3E9,D1
0003C47E <AmiBlitz3.ab2@18239>      BNE.w JL_0_B7E4
0003C482 <AmiBlitz3.ab2@18240>     MOVE.w #$203C,D1
0003C486 <AmiBlitz3.ab2@18241>     BSR.w writeword
0003C48A <AmiBlitz3.ab2@18242>     BSR.w addoff
0003C490 <AmiBlitz3.ab2@18243>     MOVE.l data2at,D1
0003C494 <AmiBlitz3.ab2@18244>     BSR.w writelong
0003C498 <AmiBlitz3.ab2@18245> BRA.w JL_0_B7FE
0003C49C <AmiBlitz3.ab2@18248>     CMP.w #$1,D1
0003C4A0 <AmiBlitz3.ab2@18249>      BNE.w JL_0_B7FE
0003C4A4 <AmiBlitz3.ab2@18250>     MOVE.w #$203C,D1
0003C4A8 <AmiBlitz3.ab2@18251>     BSR.w writeword
0003C4AE <AmiBlitz3.ab2@18252>     MOVE.l ptr_seg_debugger,D1
0003C4B2 <AmiBlitz3.ab2@18253>     BSR.w writelong
0003C4B6 <AmiBlitz3.ab2@18256>     MOVE.l $16(A2),D1
0003C4BE <AmiBlitz3.ab2@18257>     MOVE.w #$FFFF,lasta6
0003C4C2 <AmiBlitz3.ab2@18258>     BSR.w Amakelibsub
0003C4C8 <AmiBlitz3.ab2@18259>     CMPI.w #$FFFE,$4(A2)
0003C4CC <AmiBlitz3.ab2@18260>      BNE.w JL_0_B83A
0003C4D2 <AmiBlitz3.ab2@18261>     MOVE.l intdata1,D1
0003C4D6 <AmiBlitz3.ab2@18262>      BEQ.w JL_0_B83A
0003C4DC <AmiBlitz3.ab2@18263>     MOVE.w putidata1,D1
0003C4E0 <AmiBlitz3.ab2@18264>     BSR.w writeword
0003C4E4 <AmiBlitz3.ab2@18265>     BSR.w addoff
0003C4EA <AmiBlitz3.ab2@18266>     MOVE.l intdata1,D1
0003C4EE <AmiBlitz3.ab2@18267>     BSR.w writelong
0003C4F2 <AmiBlitz3.ab2@18270>     MOVE.w #$2B40,D1
0003C4F6 <AmiBlitz3.ab2@18271>     TST.w $1A(A2)
0003C4FA <AmiBlitz3.ab2@18272>      BEQ.w JL_0_B746
0003C4FE <AmiBlitz3.ab2@18273>      BPL.w JL_0_B84E
0003C502 <AmiBlitz3.ab2@18274>     MOVE.w #$3B40,D1
0003C506 <AmiBlitz3.ab2@18277>     BSR.w writeword
0003C50A <AmiBlitz3.ab2@18278>     MOVE.w $A(A2),D1
0003C50E <AmiBlitz3.ab2@18279>      BSR.w writeword
0003C514 <AmiBlitz3.ab2@18280>     CMPI.w #$FFFA,$4(A2)
0003C518 <AmiBlitz3.ab2@18281>      BNE.w JL_0_B746
0003C51A <AmiBlitz3.ab2@18282>     MOVE.w D7,-(A7)
0003C520 <AmiBlitz3.ab2@18283>     MOVE.w numstatic,D4
0003C524 <AmiBlitz3.ab2@18284>      BEQ.w JL_0_B882
0003C52A <AmiBlitz3.ab2@18285>     MOVE.l staticdata,D3
0003C52E <AmiBlitz3.ab2@18286>      BSR.w datastart
0003C532 <AmiBlitz3.ab2@18287>     MOVE.w #$C500,D1
0003C536 <AmiBlitz3.ab2@18288>      BSR.w tokejsr2
0003C53C <AmiBlitz3.ab2@18291>     MOVE.w maxsused,D4
0003C540 <AmiBlitz3.ab2@18292>      BEQ.w JL_0_B89E
0003C546 <AmiBlitz3.ab2@18293>     MOVE.l maxsat,D3
0003C54A <AmiBlitz3.ab2@18294>      BSR.w datastart
0003C54E <AmiBlitz3.ab2@18295>     MOVE.w #$CF00,D1
0003C552 <AmiBlitz3.ab2@18296>      BSR.w tokejsr2
0003C554 <AmiBlitz3.ab2@18299>     MOVE.w (A7)+,D7
0003C558 <AmiBlitz3.ab2@18300> BRA.w JL_0_B746
0003C55E <AmiBlitz3.ab2@18303>   MOVE.l destpointer,D1
0003C560 <AmiBlitz3.ab2@18304>   CMP.l (A7),D1
0003C564 <AmiBlitz3.ab2@18305>    BNE.w JL_0_B8BC
0003C56C <AmiBlitz3.ab2@18306>   MOVE.w #$0008,noinits+2
0003C570 <AmiBlitz3.ab2@18307> BRA.w JL_0_B8E6
0003C576 <AmiBlitz3.ab2@18310>   CLR.w noinits+2
0003C57C <AmiBlitz3.ab2@18311>   MOVE.w dontwrite,D1
0003C580 <AmiBlitz3.ab2@18312>    BNE.w JL_0_B8DE
0003C586 <AmiBlitz3.ab2@18313>   TST.l newinitaddr
0003C58A <AmiBlitz3.ab2@18314>    BEQ 'l10
0003C590 <AmiBlitz3.ab2@18315>   MOVE.l newinitaddr,D2
0003C596 <AmiBlitz3.ab2@18316>   SUB.l destbufferstart,D2
0003C598 <AmiBlitz3.ab2@18317>   ADDQ.l #2,d2
0003C59E <AmiBlitz3.ab2@18318>   MOVEA.l newinitaddr,A0                                   ;write newinitcode
0003C5A2 <AmiBlitz3.ab2@18320>   MOVE.w #$4EB9,(A0)+
0003C5A4 <AmiBlitz3.ab2@18321>   MOVE.l (A7),(A0)+
0003C5A8 <AmiBlitz3.ab2@18323> BRA 'l20
0003C5AE <AmiBlitz3.ab2@18326>   MOVEA.l destbufferstart,A0                               ;write initcode
0003C5B4 <AmiBlitz3.ab2@18327>   TST.b saved0
0003C5B8 <AmiBlitz3.ab2@18328>   BEQ 'l1
0003C5BC <AmiBlitz3.ab2@18329>   MOVE.w #$23c0,(a0)+
0003C5BE <AmiBlitz3.ab2@18330>   MOVE.l a0,a1
0003C5C0 <AmiBlitz3.ab2@18331>   ADDQ.l #6,a1
0003C5C2 <AmiBlitz3.ab2@18332>   MOVE.l a1,(a0)+
0003C5C4 <AmiBlitz3.ab2@18333>   MOVEQ.l #$02,D2
0003C5C8 <AmiBlitz3.ab2@18334>   BSR.w addhunkoffset
0003C5CC <AmiBlitz3.ab2@18335>   MOVE.w #$6004,(a0)+
0003C5D2 <AmiBlitz3.ab2@18336>   MOVE.l #$4e714e71,(a0)+
0003C5D6 <AmiBlitz3.ab2@18339>   MOVE.w #$4EB9,(A0)+
0003C5D8 <AmiBlitz3.ab2@18340>   MOVE.l (A7),(A0)+
0003C5DA <AmiBlitz3.ab2@18341>   MOVEQ #2,d2
0003C5E0 <AmiBlitz3.ab2@18342>   TST.b saved0
0003C5E4 <AmiBlitz3.ab2@18343>   BEQ 'l20
0003C5E6 <AmiBlitz3.ab2@18344>   MOVEQ.l #14,D2
0003C5EA <AmiBlitz3.ab2@18347>   BSR.w addhunkoffset
0003C5EE <AmiBlitz3.ab2@18348>   MOVE.w #$2039,(a0)+
0003C5F0 <AmiBlitz3.ab2@18349>   MOVE.l a1,(a0)+
0003C5F2 <AmiBlitz3.ab2@18350>   MOVEQ.l #20,d2
0003C5F6 <AmiBlitz3.ab2@18353>   BSR.w addhunkoffset
0003C5FA <AmiBlitz3.ab2@18356>   MOVE.w #$4E75,D1
0003C5FE <AmiBlitz3.ab2@18357>   BSR.w writeword
0003C600 <AmiBlitz3.ab2@18360>   ADDQ.w #4,A7
0003C602 <AmiBlitz3.ab2@18361> RTS
0003C606 <AmiBlitz3.ab2@18366>   Dc.b $22,$2D,$00,$00                                     ;MOVE.L  $0000(A5),D1
0003C60C <AmiBlitz3.ab2@18368>   Dc.b $23,$CD,$00,$00,$00,$00                             ;MOVE.L  A5,$00000000
0003C612 <AmiBlitz3.ab2@18370>   Dc.b $24,$7C,$00,$00,$00,$00                             ;MOVEA.L #$00000000,A2
0003C618 <AmiBlitz3.ab2@18375>   MOVE.l stringbuffer,D1
0003C61C <AmiBlitz3.ab2@18376> BRA.w makesize
0003C61E <AmiBlitz3.ab2@18379>   MOVEQ.l #$00,D1
0003C624 <AmiBlitz3.ab2@18380>   MOVE.w globalvarpointer,D1
0003C628 <AmiBlitz3.ab2@18381>   SUBI.w #$8000,D1
0003C62C <AmiBlitz3.ab2@18382>   BNE.w makesize
0003C62E <AmiBlitz3.ab2@18383>     MOVEQ.l #$08,D1
0003C630 <AmiBlitz3.ab2@18386>   MOVE.l D1,-(A7)
0003C634 <AmiBlitz3.ab2@18387>   MOVE.w #$203C,D1
0003C638 <AmiBlitz3.ab2@18388>   BSR.w writeword
0003C63A <AmiBlitz3.ab2@18389>   MOVE.l (A7)+,D1
0003C63E <AmiBlitz3.ab2@18390> BRA.w writelong
0003C640 <AmiBlitz3.ab2@18398>   MOVEQ.l #$00,D1
0003C646 <AmiBlitz3.ab2@18399>   MOVEA.l libpointer,A1
0003C64A <AmiBlitz3.ab2@18402>     CMPA.w #$0,A1
0003C64E <AmiBlitz3.ab2@18403>     BEQ.w findhilib__done
0003C652 <AmiBlitz3.ab2@18404>       CMP.w $4(A1),D7
0003C656 <AmiBlitz3.ab2@18405>       BLS.w findhilib__next
0003C65A <AmiBlitz3.ab2@18406>         CMP.w $4(A1),D1
0003C65E <AmiBlitz3.ab2@18407>         BCC.w findhilib__next
0003C662 <AmiBlitz3.ab2@18408>           MOVE.w $4(A1),D1
0003C664 <AmiBlitz3.ab2@18409>           MOVEA.l A1,A2
0003C666 <AmiBlitz3.ab2@18412>     MOVEA.l (A1),A1
0003C66A <AmiBlitz3.ab2@18413> BRA.w findhilib__loop
0003C66C <AmiBlitz3.ab2@18416>   MOVE.w D1,D7
0003C66E <AmiBlitz3.ab2@18417> RTS
0003C670 <AmiBlitz3.ab2@18425>   MOVEQ.l #-$01,D1
0003C676 <AmiBlitz3.ab2@18426>   MOVEA.l libpointer,A1
0003C67A <AmiBlitz3.ab2@18429>     CMPA.w #$0,A1
0003C67E <AmiBlitz3.ab2@18430>      BEQ.w findlolib__done
0003C682 <AmiBlitz3.ab2@18431>     CMP.w $4(A1),D7
0003C686 <AmiBlitz3.ab2@18432>      BCC.w findlolib__next
0003C68A <AmiBlitz3.ab2@18433>     CMP.w $4(A1),D1
0003C68E <AmiBlitz3.ab2@18434>      BLS.w findlolib__next
0003C692 <AmiBlitz3.ab2@18435>     MOVE.w $4(A1),D1
0003C694 <AmiBlitz3.ab2@18436>     MOVEA.l A1,A2
0003C696 <AmiBlitz3.ab2@18439>     MOVEA.l (A1),A1
0003C69A <AmiBlitz3.ab2@18440> BRA.w findlolib__loop
0003C69C <AmiBlitz3.ab2@18443>   MOVE.w D1,D7
0003C6A0 <AmiBlitz3.ab2@18444>   CMP.w #-$1,D1
0003C6A2 <AmiBlitz3.ab2@18445> RTS
0003C6A8 <AmiBlitz3.ab2@18449>   ADDQ.w #1,globalvarpointer
0003C6B0 <AmiBlitz3.ab2@18450>   BCLR #$0,globalvarpointer+1
0003C6B2 <AmiBlitz3.ab2@18451>   MOVEQ.l #$00,D7
0003C6B6 <AmiBlitz3.ab2@18454>     BSR.w findlolib
0003C6BA <AmiBlitz3.ab2@18455>     BEQ.w JL_0_BA74
0003C6BE <AmiBlitz3.ab2@18456>     TST.w $C(A2)
0003C6C2 <AmiBlitz3.ab2@18457>     BPL.w JL_0_B99A
0003C6C4 <AmiBlitz3.ab2@18458>     MOVEA.l A2,A1
0003C6C8 <AmiBlitz3.ab2@18459>     ADDA.l $12(A1),A1
0003C6CC <AmiBlitz3.ab2@18460>     TST.w -$2(A1)
0003C6D0 <AmiBlitz3.ab2@18461>     BEQ.w JL_0_BA34
0003C6D4 <AmiBlitz3.ab2@18462>     MOVE.l -$A(A1),D1
0003C6D8 <AmiBlitz3.ab2@18463>     LEA $6(A2,D1.L),A3
0003C6DA <AmiBlitz3.ab2@18466>       TST.w (A3)+
0003C6DE <AmiBlitz3.ab2@18467>       BEQ.w JL_0_B9CC
0003C6E0 <AmiBlitz3.ab2@18468>         ADDQ.w #2,A3
0003C6E4 <AmiBlitz3.ab2@18469> BRA.w JL_0_B9C0
0003C6E8 <AmiBlitz3.ab2@18472>     TST.l $4(A3)
0003C6EC <AmiBlitz3.ab2@18473>     BEQ.w JL_0_BA34
0003C6F0 <AmiBlitz3.ab2@18474>       MOVE.w freemax(PC),D1
0003C6F4 <AmiBlitz3.ab2@18475>       BSR.w writeword
0003C6F8 <AmiBlitz3.ab2@18476>       MOVE.w -$4(A1),D1
0003C6FC <AmiBlitz3.ab2@18477>       BSR.w writeword
0003C702 <AmiBlitz3.ab2@18478>       MOVE.l free,D1
0003C706 <AmiBlitz3.ab2@18479>       MOVE.w -$6(A1),D1
0003C70A <AmiBlitz3.ab2@18480>       BSR.w writelong
0003C710 <AmiBlitz3.ab2@18481>       MOVE.l destpointer,-(A7)
0003C712 <AmiBlitz3.ab2@18482>       MOVEQ.l #$01,D1
0003C716 <AmiBlitz3.ab2@18483>       MOVE.w -$2(A1),D2
0003C718 <AmiBlitz3.ab2@18484>       LSL.w D2,D1
0003C71A <AmiBlitz3.ab2@18485>       MOVE.w D1,-(A7)
0003C71E <AmiBlitz3.ab2@18486>       MOVE.l -$A(A1),D1
0003C722 <AmiBlitz3.ab2@18487>       BSR.w Amakelibsub
0003C726 <AmiBlitz3.ab2@18488>       MOVE.w freemax3(PC),D1
0003C72A <AmiBlitz3.ab2@18489>       BSR.w writeword
0003C72C <AmiBlitz3.ab2@18490>       MOVE.w (A7)+,D1
0003C730 <AmiBlitz3.ab2@18491>       BSR.w writeword
0003C734 <AmiBlitz3.ab2@18492>       MOVE.l freemax2(PC),D1
0003C738 <AmiBlitz3.ab2@18493>       BSR.w writelong
0003C73A <AmiBlitz3.ab2@18494>       MOVE.l (A7)+,D1
0003C740 <AmiBlitz3.ab2@18495>       SUB.l destpointer,D1
0003C744 <AmiBlitz3.ab2@18496>       BSR.w writeword
0003C748 <AmiBlitz3.ab2@18497>       MOVE.w freemax4(PC),D1
0003C74C <AmiBlitz3.ab2@18498>       BSR.w writeword
0003C750 <AmiBlitz3.ab2@18501>     MOVE.l $1C(A2),D1
0003C754 <AmiBlitz3.ab2@18502>     BEQ.w JL_0_B99A
0003C758 <AmiBlitz3.ab2@18504>     MOVE.w $4(A2),D1
0003C75C <AmiBlitz3.ab2@18505>     CMP.w #-$2,D1
0003C760 <AmiBlitz3.ab2@18506>     BNE.w JL_0_BA50
0003C764 <AmiBlitz3.ab2@18507>       BSR.w makevsize
0003C768 <AmiBlitz3.ab2@18508> BRA.w JL_0_BA60
0003C76C <AmiBlitz3.ab2@18511>     CMP.w #-$12D,D1
0003C770 <AmiBlitz3.ab2@18512>     BNE.w JL_0_BA60
0003C774 <AmiBlitz3.ab2@18513>       BSR.w makessize
0003C778 <AmiBlitz3.ab2@18514> BRA.w JL_0_BA60
0003C77C <AmiBlitz3.ab2@18517>     MOVE.l $1C(A2),D1
0003C784 <AmiBlitz3.ab2@18518>     MOVE.w #$FFFF,lasta6
0003C788 <AmiBlitz3.ab2@18519>     BSR.w Amakelibsub
0003C78C <AmiBlitz3.ab2@18520> BRA.w JL_0_B99A
0003C78E <AmiBlitz3.ab2@18523> RTS
0003C792 <AmiBlitz3.ab2@18527> freemax:   Dc.b $3F,$3C,$00,$00                            ;MOVE.W  #$0000,-(A7)
0003C794 <AmiBlitz3.ab2@18529> freemax2:  Dc.b $53,$57                                    ;SUBQ.W  #1,(A7)
0003C798 <AmiBlitz3.ab2@18530>            Dc.b $66,$00,$FF,$FC                            ;BNE.W freemax2
0003C79A <AmiBlitz3.ab2@18531> freemax4:  Dc.b $54,$4F                                    ;ADDQ.W  #2,A7
0003C79E <AmiBlitz3.ab2@18532> freemax3:  Dc.b $47,$EB,$00,$00                            ;LEA $0000(A3),A3
0003C7A4 <AmiBlitz3.ab2@18537>   TST.b debugmode
0003C7A8 <AmiBlitz3.ab2@18538>    BEQ.b chkstak__skip
0003C7AE <AmiBlitz3.ab2@18539>   TST.w debugversion
0003C7B2 <AmiBlitz3.ab2@18540>    BNE.b chkstak__skip
0003C7B6 <AmiBlitz3.ab2@18541>   MOVE.w #$C308,D1
0003C7BA <AmiBlitz3.ab2@18542> BRA.w Atokejsr
0003C7BC <AmiBlitz3.ab2@18545> RTS
0003C7C4 <AmiBlitz3.ab2@18549>   MOVE.w #$FFFF,lasta6
0003C7C8 <AmiBlitz3.ab2@18554>   MOVEM.l D0-d7/A0-a6,-(A7)
0003C7D0 <AmiBlitz3.ab2@18555>   MOVE.b #1,nostringopt
0003C7D6 <AmiBlitz3.ab2@18556>   JSR searchinstr
0003C7D8 <AmiBlitz3.ab2@18557>   MOVE.l A3,D1
0003C7DA <AmiBlitz3.ab2@18558>   SUB.l A2,D1
0003C7DE <AmiBlitz3.ab2@18559>   BSR.w Amakelibsub
0003C7E2 <AmiBlitz3.ab2@18560>   MOVEM.l (A7)+,d0-d7/a0-a6
0003C7E4 <AmiBlitz3.ab2@18561> RTS
0003C7EA <AmiBlitz3.ab2@18568>   MOVE.l libisat,-(A7)                                   ;library write
0003C7F0 <AmiBlitz3.ab2@18569>   MOVE.l A2,libisat
0003C7F2 <AmiBlitz3.ab2@18571>   MOVEA.l A1,A2
0003C7F4 <AmiBlitz3.ab2@18572>   MOVE.w (A2)+,D1
0003C7FA <AmiBlitz3.ab2@18573>   MOVE.l a2,lastinstruction
0003C7FE <AmiBlitz3.ab2@18574>   ANDI.w #$FF,D1
0003C800 <AmiBlitz3.ab2@18575>   ADDA.w D1,A2
0003C802 <AmiBlitz3.ab2@18576>   EXG.l D0,A2
0003C804 <AmiBlitz3.ab2@18577>   ADDQ.l #1,D0
0003C808 <AmiBlitz3.ab2@18578>   BCLR #$0,D0
0003C80A <AmiBlitz3.ab2@18579>   EXG.l D0,A2
0003C80E <AmiBlitz3.ab2@18580> BRA.w JL_0_BB08
0003C814 <AmiBlitz3.ab2@18584>   MOVE.l libisat,-(A7)
0003C81A <AmiBlitz3.ab2@18585>   MOVE.l A2,libisat
0003C81C <AmiBlitz3.ab2@18586>   MOVEA.l A3,A2
0003C820 <AmiBlitz3.ab2@18587> BRA.w JL_0_BB08
0003C822 <AmiBlitz3.ab2@18591>   MOVE.l a1,-(a7)
0003C824 <AmiBlitz3.ab2@18594>   MOVE.l d0,a0
0003C828 <AmiBlitz3.ab2@18595>   MOVE.l $a(a0),d0
0003C82A <AmiBlitz3.ab2@18596>   MOVE.l d0,a1
0003C832 <AmiBlitz3.ab2@18597>   CMP.l #8,4(a1)
0003C836 <AmiBlitz3.ab2@18598>   BLE 'norec
0003C838 <AmiBlitz3.ab2@18599>   MOVE.l a0,-(a7)
0003C83E <AmiBlitz3.ab2@18600>   MOVE.l typebase,-(a7)
0003C840 <AmiBlitz3.ab2@18601>   MOVEQ #0,d0
0003C844 <AmiBlitz3.ab2@18602>   MOVE.w 4(a0),d0
0003C84A <AmiBlitz3.ab2@18603>   ADD.l d0,typebase
0003C84E <AmiBlitz3.ab2@18604>   MOVE.l $4(a1),d0
0003C852 <AmiBlitz3.ab2@18605>   BSR scantype
0003C858 <AmiBlitz3.ab2@18606>   MOVE.l (a7)+,typebase
0003C85A <AmiBlitz3.ab2@18607>   MOVE.l (a7)+,a0
0003C860 <AmiBlitz3.ab2@18610>   CMP.l #newtype_string,d0
0003C864 <AmiBlitz3.ab2@18611>   BNE 'nostring
0003C86A <AmiBlitz3.ab2@18612>   ADDQ #2,a2offset
0003C870 <AmiBlitz3.ab2@18613>   MOVE.l #$3f3c0000,d1
0003C872 <AmiBlitz3.ab2@18614>   MOVEQ #0,d0
0003C876 <AmiBlitz3.ab2@18615>   MOVE.w 4(a0),d0
0003C87C <AmiBlitz3.ab2@18616>   ADD.l typebase,d0
0003C87E <AmiBlitz3.ab2@18617>   MOVE.w d0,d1
0003C882 <AmiBlitz3.ab2@18618>   BSR writelong
0003C888 <AmiBlitz3.ab2@18619>   TST.b debugmode
0003C88C <AmiBlitz3.ab2@18620>   BEQ 'l1a
0003C88E <AmiBlitz3.ab2@18621>   MOVE.l d1,-(a7)
0003C894 <AmiBlitz3.ab2@18622>   MOVE.l #$c308,d1
0003C89A <AmiBlitz3.ab2@18623>   JSR Atokejsr
0003C89C <AmiBlitz3.ab2@18624>   MOVE.l (a7)+,d1
0003C8A0 <AmiBlitz3.ab2@18627>   TST.w 8(a0)
0003C8A4 <AmiBlitz3.ab2@18628>   BEQ 'nostring
0003C8A8 <AmiBlitz3.ab2@18629>   MOVEM.l d2/d3,-(a7)
0003C8AA <AmiBlitz3.ab2@18630>   MOVE.l d1,d2
0003C8AC <AmiBlitz3.ab2@18631>   MOVEQ #0,d3
0003C8B0 <AmiBlitz3.ab2@18632>   MOVE.w 8(a0),d3
0003C8B2 <AmiBlitz3.ab2@18633>   SUBQ.l #1,d3
0003C8B6 <AmiBlitz3.ab2@18634>   BEQ 'nostring2
0003C8B8 <AmiBlitz3.ab2@18637>   ADDQ.l #4,d2
0003C8BA <AmiBlitz3.ab2@18638>   MOVE.l d2,d1
0003C8BE <AmiBlitz3.ab2@18639>   BSR writelong
0003C8C4 <AmiBlitz3.ab2@18640>   TST.b debugmode
0003C8C8 <AmiBlitz3.ab2@18641>   BEQ 'l1
0003C8CE <AmiBlitz3.ab2@18642>   MOVE.l #$c308,d1
0003C8D4 <AmiBlitz3.ab2@18643>   JSR Atokejsr
0003C8DA <AmiBlitz3.ab2@18646>   ADDQ #2,a2offset
0003C8DC <AmiBlitz3.ab2@18647>   SUBQ.l #1,d3
0003C8E0 <AmiBlitz3.ab2@18648>   BNE 'loop
0003C8E4 <AmiBlitz3.ab2@18651>   MOVEM.l (a7)+,d2/d3
0003C8E6 <AmiBlitz3.ab2@18654>   MOVE.l (a0),d0
0003C8EA <AmiBlitz3.ab2@18655>   BNE 'more
0003C8EC <AmiBlitz3.ab2@18656>   MOVE.l (a7)+,a1
0003C8EE <AmiBlitz3.ab2@18657> RTS
0003C8F2 <AmiBlitz3.ab2@18660> libisat:   Ds.l 1
0003C8F8 <AmiBlitz3.ab2@18666>   MOVE.l libisat,-(A7)                                   
0003C8FE <AmiBlitz3.ab2@18667>   MOVE.l A2,libisat
0003C902 <AmiBlitz3.ab2@18668>   LEA $6(A2,D1.L),A2
0003C90A <AmiBlitz3.ab2@18672>   CMP.l #$3e19436c,$1c-8(a2)                               ;clear type
0003C90E <AmiBlitz3.ab2@18673>   BEQ 'dowritevar
0003C916 <AmiBlitz3.ab2@18674>   CMP.l #$3e18436f,$1c-8(a2)                               ;copy type
0003C91A <AmiBlitz3.ab2@18675>   BEQ 'dowritevar
0003C922 <AmiBlitz3.ab2@18676>   CMP.l #$3e175265,$1c(a2)
0003C926 <AmiBlitz3.ab2@18677>   BEQ 'dowritevar
0003C92E <AmiBlitz3.ab2@18678>   CMP.l #$3e165772,$1c(a2)
0003C932 <AmiBlitz3.ab2@18679>   BNE 'nowritef
0003C936 <AmiBlitz3.ab2@18682>   MOVEM.l a0-a2/d2,-(a7)
0003C938 <AmiBlitz3.ab2@18683>   MOVEQ #0,d1
0003C942 <AmiBlitz3.ab2@18684>   MOVE.l #0,typebase
0003C946 <AmiBlitz3.ab2@18685>   MOVE.l $a(a3),a0
0003C94A <AmiBlitz3.ab2@18686>   MOVE.l $4(a0),d0
0003C950 <AmiBlitz3.ab2@18687>   CMP.l #8,d0
0003C954 <AmiBlitz3.ab2@18688>   BLE 'notype
0003C958 <AmiBlitz3.ab2@18689>   BSR scantype
0003C95E <AmiBlitz3.ab2@18692>   MOVE.l #$3f3c0000,d1
0003C964 <AmiBlitz3.ab2@18693>   MOVE.w a2offset,d1
0003C968 <AmiBlitz3.ab2@18694>   BSR writelong
0003C96E <AmiBlitz3.ab2@18695>   MOVE.l #$3f3c0000,d1
0003C972 <AmiBlitz3.ab2@18696>   MOVE.l $a(a3),a0
0003C976 <AmiBlitz3.ab2@18697>   MOVE.w 8(a0),d1
0003C97A <AmiBlitz3.ab2@18698>   BSR writelong
0003C980 <AmiBlitz3.ab2@18699>   MOVE.l #$3f3cab12,d1
0003C984 <AmiBlitz3.ab2@18700>   BSR writelong
0003C98A <AmiBlitz3.ab2@18701>   ADDQ.w #6,a2offset
0003C98E <AmiBlitz3.ab2@18702>   MOVEM.l (a7)+,a0-a2/d2
0003C994 <AmiBlitz3.ab2@18705>   TST.b fpu
0003C998 <AmiBlitz3.ab2@18706>   BEQ 'nofpu2
0003C9A0 <AmiBlitz3.ab2@18707>   CMP.l #$496e7400,$1a(a2)
0003C9A4 <AmiBlitz3.ab2@18708>   BNE 'noint
0003C9A6 <AmiBlitz3.ab2@18709>   MOVEQ #0,d1
0003C9AC <AmiBlitz3.ab2@18710>   SUBQ.l #8,destpointer                                    ;fpu int
0003C9B2 <AmiBlitz3.ab2@18711>   CLR.w a2offset
0003C9B6 <AmiBlitz3.ab2@18712>   CMP.b #2,d2
0003C9BA <AmiBlitz3.ab2@18713>   BGT 'noword
0003C9BE <AmiBlitz3.ab2@18714>   MOVE.w #$48c0,d1
0003C9C4 <AmiBlitz3.ab2@18715>   OR.w regnumstore,d1
0003C9C8 <AmiBlitz3.ab2@18716>   BSR writeword
0003C9CC <AmiBlitz3.ab2@18717> BRA 'exit2
0003C9D0 <AmiBlitz3.ab2@18720>    CMP.b #3,d2
0003C9D4 <AmiBlitz3.ab2@18721>         BNE 'nolong
0003C9D8 <AmiBlitz3.ab2@18722> BRA 'exit2
0003C9DC <AmiBlitz3.ab2@18725>    CMP.b #4,d2
0003C9E0 <AmiBlitz3.ab2@18726>         BNE 'noquick
0003C9E4 <AmiBlitz3.ab2@18727>         MOVE.w #$e080,d1
0003C9EA <AmiBlitz3.ab2@18728>         OR.w regnumstore,d1
0003C9EE <AmiBlitz3.ab2@18729>         BSR writeword
0003C9F2 <AmiBlitz3.ab2@18730>         MOVE.w #$e080,d1
0003C9F8 <AmiBlitz3.ab2@18731>         OR.w regnumstore,d1
0003C9FC <AmiBlitz3.ab2@18732>         BSR writeword
0003CA00 <AmiBlitz3.ab2@18733> BRA 'exit2
0003CA02 <AmiBlitz3.ab2@18736>         MOVEQ #0,d0
0003CA04 <AmiBlitz3.ab2@18737>         MOVEQ #0,d1
0003CA0A <AmiBlitz3.ab2@18738>         MOVE.w regnumstore,d0
0003CA0C <AmiBlitz3.ab2@18739>         ASL.l #7,d0
0003CA12 <AmiBlitz3.ab2@18740>         OR.l #$f23c4428,d1                                 ;fsub.s 0.5,fpx
0003CA14 <AmiBlitz3.ab2@18741>         OR.l d0,d1
0003CA1A <AmiBlitz3.ab2@18743>         MOVE.l #$3f000000,d1
0003CA1C <AmiBlitz3.ab2@18745>         MOVEQ #0,d0
0003CA1E <AmiBlitz3.ab2@18746>         MOVEQ #0,d1
0003CA24 <AmiBlitz3.ab2@18747>         MOVE.w regnumstore,d0
0003CA26 <AmiBlitz3.ab2@18748>         ASL.l #7,d0
0003CA28 <AmiBlitz3.ab2@18749>         MOVE.l d0,d1
0003CA2E <AmiBlitz3.ab2@18750>         OR.l #$f2000003,d1                                 ;fintrz fpx
0003CA30 <AmiBlitz3.ab2@18751>         ASL.l #3,d0
0003CA32 <AmiBlitz3.ab2@18752>         OR.l d0,d1
0003CA36 <AmiBlitz3.ab2@18753>         BSR writelong
0003CA38 <AmiBlitz3.ab2@18754>         MOVEQ #0,d0
0003CA3E <AmiBlitz3.ab2@18755>         MOVE.w regnumstore,d0
0003CA40 <AmiBlitz3.ab2@18756>         ASL.l #7,d0
0003CA46 <AmiBlitz3.ab2@18757>         MOVE.l #$f2006000,d1                               ;fmove.l fp0,d0
0003CA48 <AmiBlitz3.ab2@18758>         OR.l d0,d1
0003CA4A <AmiBlitz3.ab2@18759>         ASL.l #1,d0
0003CA4C <AmiBlitz3.ab2@18760>         ASL.l #8,d0
0003CA4E <AmiBlitz3.ab2@18761>         OR.l d0,d1
0003CA52 <AmiBlitz3.ab2@18762> BRA 'exit
0003CA58 <AmiBlitz3.ab2@18765>   CMP.w #$3c01,24(a2)
0003CA5C <AmiBlitz3.ab2@18766>   BNE 'noval
0003CA5E <AmiBlitz3.ab2@18767>   MOVE.l a2,-(a7)
0003CA62 <AmiBlitz3.ab2@18768>   BSR.w JL_0_BB14
0003CA64 <AmiBlitz3.ab2@18769>   MOVE.l (a7)+,a2
0003CA68 <AmiBlitz3.ab2@18770> BRA 'exit2
0003CA70 <AmiBlitz3.ab2@18787>   CMP.l #$41627300,$1a(a2)
0003CA74 <AmiBlitz3.ab2@18788>   BNE 'noabs
0003CA76 <AmiBlitz3.ab2@18789>   MOVEQ #0,d1
0003CA7C <AmiBlitz3.ab2@18790>   MOVE.w regnumstore,d1
0003CA7E <AmiBlitz3.ab2@18791>   MOVE.w d1,d0
0003CA80 <AmiBlitz3.ab2@18792>   ASL.w #7,d1
0003CA82 <AmiBlitz3.ab2@18793>   ASL.w #8,d0
0003CA84 <AmiBlitz3.ab2@18794>   ASL.w #2,d0
0003CA86 <AmiBlitz3.ab2@18795>   OR.w d0,d1
0003CA8C <AmiBlitz3.ab2@18796>   SUBQ.l #8,destpointer                                    ;fpu abs
0003CA90 <AmiBlitz3.ab2@18797>   MOVEM.l d3/d1,-(a7)
0003CA94 <AmiBlitz3.ab2@18798>   MOVE.w #5,d3
0003CA96 <AmiBlitz3.ab2@18799>   EXG d2,d3
0003CA9C <AmiBlitz3.ab2@18800>   MOVE.w regnum,-(a7)
0003CAA6 <AmiBlitz3.ab2@18801>   MOVE.w regnumstore,regnum
0003CAAA <AmiBlitz3.ab2@18802>   BSR writeconvertcode
0003CAB0 <AmiBlitz3.ab2@18803>   MOVE.w (a7)+,regnum
0003CAB2 <AmiBlitz3.ab2@18804>   EXG d2,d3
0003CAB6 <AmiBlitz3.ab2@18805>   MOVEM.l (a7)+,d3/d1
0003CABC <AmiBlitz3.ab2@18806>   OR.l #$f2000018,d1
0003CAC2 <AmiBlitz3.ab2@18807>   CLR.w a2offset
0003CAC6 <AmiBlitz3.ab2@18808> BRA 'exit
0003CACA <AmiBlitz3.ab2@18811>   CMP.b #5,d2
0003CACE <AmiBlitz3.ab2@18812>   BNE 'nofpu2
0003CAD2 <AmiBlitz3.ab2@18813>   MOVE.b 24(a2),d0
0003CAD6 <AmiBlitz3.ab2@18814>   CMP.b #$60,d0                                            ;nolib $edxx
0003CADA <AmiBlitz3.ab2@18815>   BNE 'nofpu
0003CADC <AmiBlitz3.ab2@18816>   MOVEQ #0,d1
0003CAE2 <AmiBlitz3.ab2@18817>   MOVE.w regnumstore,d1
0003CAE4 <AmiBlitz3.ab2@18818>   MOVE.w d1,d0
0003CAE6 <AmiBlitz3.ab2@18819>   ASL.w #7,d1
0003CAE8 <AmiBlitz3.ab2@18820>   ASL.w #8,d0
0003CAEA <AmiBlitz3.ab2@18821>   ASL.w #2,d0
0003CAEC <AmiBlitz3.ab2@18822>   OR.w d0,d1
0003CAF0 <AmiBlitz3.ab2@18823>   MOVE.b 25(a2),d0
0003CAF4 <AmiBlitz3.ab2@18824>   CMP.b #5,d0
0003CAF8 <AmiBlitz3.ab2@18825>   BNE 'nocos
0003CAFE <AmiBlitz3.ab2@18826>   OR.l #$f200001d,d1                                       ;fpu cos
0003CB02 <AmiBlitz3.ab2@18827> BRA 'exit
0003CB06 <AmiBlitz3.ab2@18830>   CMP.b #$c,d0
0003CB0A <AmiBlitz3.ab2@18831>   BNE 'nosqr
0003CB10 <AmiBlitz3.ab2@18832>   OR.l #$f2000004,d1                                       ;fpu sqr
0003CB14 <AmiBlitz3.ab2@18833> BRA 'exit
0003CB18 <AmiBlitz3.ab2@18836>   CMP.b #$d,d0
0003CB1C <AmiBlitz3.ab2@18837>   BNE 'notan
0003CB22 <AmiBlitz3.ab2@18838>   OR.l #$f200000f,d1                                       ;fpu tan
0003CB26 <AmiBlitz3.ab2@18839> BRA 'exit
0003CB2A <AmiBlitz3.ab2@18842>   CMP.b #$a,d0
0003CB2E <AmiBlitz3.ab2@18843>   BNE 'nosin
0003CB34 <AmiBlitz3.ab2@18844>   OR.l #$f200000e,d1                                       ;fpu sin
0003CB38 <AmiBlitz3.ab2@18845> BRA 'exit
0003CB3C <AmiBlitz3.ab2@18848>   CMP.b #$3,d0
0003CB40 <AmiBlitz3.ab2@18849>   BNE 'noasin
0003CB46 <AmiBlitz3.ab2@18850>   OR.l #$f200000c,d1                                       ;fpu asin
0003CB4A <AmiBlitz3.ab2@18851> BRA 'exit
0003CB4E <AmiBlitz3.ab2@18854>   CMP.b #$2,d0
0003CB52 <AmiBlitz3.ab2@18855>   BNE 'noacos
0003CB58 <AmiBlitz3.ab2@18856>   OR.l #$f200001c,d1                                       ;fpu acos
0003CB5C <AmiBlitz3.ab2@18857> BRA 'exit
0003CB60 <AmiBlitz3.ab2@18860>   CMP.b #$4,d0
0003CB64 <AmiBlitz3.ab2@18861>   BNE 'noatan
0003CB6A <AmiBlitz3.ab2@18862>   OR.l #$f200000a,d1                                       ;fpu atan
0003CB6E <AmiBlitz3.ab2@18863> BRA 'exit
0003CB72 <AmiBlitz3.ab2@18866>   CMP.b #$e,d0
0003CB76 <AmiBlitz3.ab2@18867>   BNE 'nohtan
0003CB7C <AmiBlitz3.ab2@18868>   OR.l #$f2000009,d1                                       ;fpu htan
0003CB80 <AmiBlitz3.ab2@18869> BRA 'exit
0003CB84 <AmiBlitz3.ab2@18872>   CMP.b #$6,d0
0003CB88 <AmiBlitz3.ab2@18873>   BNE 'nohcos
0003CB8E <AmiBlitz3.ab2@18874>   OR.l #$f2000019,d1                                       ;fpu hcos
0003CB92 <AmiBlitz3.ab2@18875> BRA 'exit
0003CB96 <AmiBlitz3.ab2@18878>   CMP.b #$b,d0
0003CB9A <AmiBlitz3.ab2@18879>   BNE 'nohsin
0003CBA0 <AmiBlitz3.ab2@18880>   OR.l #$f2000002,d1                                       ;fpu hsin
0003CBA4 <AmiBlitz3.ab2@18881> BRA 'exit
0003CBA8 <AmiBlitz3.ab2@18884>   CMP.b #$9,d0
0003CBAC <AmiBlitz3.ab2@18885>   BNE 'nolog
0003CBB2 <AmiBlitz3.ab2@18886>   OR.l #$f2000014,d1                                       ;fpu log
0003CBB6 <AmiBlitz3.ab2@18887> BRA 'exit
0003CBBA <AmiBlitz3.ab2@18890>   CMP.b #$8,d0
0003CBBE <AmiBlitz3.ab2@18891>   BNE 'nolog10
0003CBC4 <AmiBlitz3.ab2@18892>   OR.l #$f2000015,d1                                       ;fpu log10
0003CBC8 <AmiBlitz3.ab2@18893> BRA 'exit
0003CBCC <AmiBlitz3.ab2@18896>   CMP.b #$7,d0
0003CBD0 <AmiBlitz3.ab2@18897>   BNE 'noexp
0003CBD6 <AmiBlitz3.ab2@18898>   OR.l #$f2000010,d1                                       ;fpu exp
0003CBDA <AmiBlitz3.ab2@18899> BRA 'exit
0003CBE0 <AmiBlitz3.ab2@18902>   LEA fpuerr,a0
0003CBE2 <AmiBlitz3.ab2@18903>   MOVE.l a0,-(a7)
0003CBE8 <AmiBlitz3.ab2@18904> JMP handle_compileerror
0003CBEC <AmiBlitz3.ab2@18908>   CMP.b #$3c,d0
0003CBF0 <AmiBlitz3.ab2@18909>   BNE 'nofpu2
0003CBF2 <AmiBlitz3.ab2@18910>   MOVEQ #0,d1
0003CBF8 <AmiBlitz3.ab2@18911>       MOVE.w regnumstore,d1
0003CBFA <AmiBlitz3.ab2@18912>       MOVE.w d1,d0
0003CBFC <AmiBlitz3.ab2@18913>       ASL.w #7,d1
0003CBFE <AmiBlitz3.ab2@18914>       ASL.w #8,d0
0003CC00 <AmiBlitz3.ab2@18915>       ASL.w #2,d0
0003CC02 <AmiBlitz3.ab2@18916>       OR.w d0,d1
0003CC08 <AmiBlitz3.ab2@18917>       CMP.b #$03,25(a2)
0003CC0C <AmiBlitz3.ab2@18918>       BNE 'nosgn
0003CC12 <AmiBlitz3.ab2@18921>       SUBQ.l #8,destpointer                                ;fpu sgn
0003CC18 <AmiBlitz3.ab2@18922>         OR.l #$f200003a,d1
0003CC1C <AmiBlitz3.ab2@18923>         BSR writelong
0003CC22 <AmiBlitz3.ab2@18924>         CLR.w a2offset
0003CC28 <AmiBlitz3.ab2@18925>          MOVE.l #$F28E0006,d1
0003CC2C <AmiBlitz3.ab2@18926>          BSR writelong
0003CC32 <AmiBlitz3.ab2@18927>   MOVE.l #$7000600a,d1
0003CC36 <AmiBlitz3.ab2@18928>   BSR writelong
0003CC3C <AmiBlitz3.ab2@18929>   MOVE.l #$70014840,d1
0003CC40 <AmiBlitz3.ab2@18930>   BSR writelong
0003CC46 <AmiBlitz3.ab2@18931>   MOVE.l #$F292,d1
0003CC4A <AmiBlitz3.ab2@18932>   BSR writeword
0003CC50 <AmiBlitz3.ab2@18933>   MOVE.l #$000470FF,d1
0003CC54 <AmiBlitz3.ab2@18934> BRA 'exit
0003CC5C <AmiBlitz3.ab2@18937>   CMP.l #"Frac",$1a(a2)
0003CC60 <AmiBlitz3.ab2@18938>   BNE 'nofrac
0003CC66 <AmiBlitz3.ab2@18939> JMP notwork
0003CC6A <AmiBlitz3.ab2@18980> BRA 'exit
0003CC6E <AmiBlitz3.ab2@18984>   BSR.w JL_0_BB14                                          ;write lib code
0003CC74 <AmiBlitz3.ab2@18985>   MOVE.l (A7)+,libisat
0003CC76 <AmiBlitz3.ab2@18986> RTS
0003CC7A <AmiBlitz3.ab2@18989>   BSR writelong
0003CC80 <AmiBlitz3.ab2@18992>   MOVE.l (A7)+,libisat
0003CC82 <AmiBlitz3.ab2@18993> RTS
0003CC86 <AmiBlitz3.ab2@18997>   BSR.w fetchregs
0003CC8C <AmiBlitz3.ab2@18998>   TST.b debugmode
0003CC90 <AmiBlitz3.ab2@18999>    BEQ.w JL_0_BB76
0003CC92 <AmiBlitz3.ab2@19000>   MOVE.l (A2),D1
0003CC96 <AmiBlitz3.ab2@19001>   OR.l $8(A2),D1
0003CC9A <AmiBlitz3.ab2@19002>   BCLR #$0,D1
0003CC9C <AmiBlitz3.ab2@19003>   TST.l D1
0003CCA0 <AmiBlitz3.ab2@19004>    BEQ.w JL_0_BB76
0003CCA2 <AmiBlitz3.ab2@19005>   MOVE.l (A2)+,D1
0003CCA6 <AmiBlitz3.ab2@19006>   BTST #$0,D1
0003CCAA <AmiBlitz3.ab2@19007>    BEQ.w JL_0_BB60
0003CCB0 <AmiBlitz3.ab2@19008>   TST.w blitzmode
0003CCB4 <AmiBlitz3.ab2@19009>    BPL.w blitzerr
0003CCBA <AmiBlitz3.ab2@19010>   TST.b debugmode
0003CCBE <AmiBlitz3.ab2@19011>    BEQ.w JL_0_BB5C
0003CCC0 <AmiBlitz3.ab2@19012>   MOVE.l D1,-(A7)
0003CCC4 <AmiBlitz3.ab2@19013>   MOVE.w #$C311,D1
0003CCC8 <AmiBlitz3.ab2@19014>    BSR.w makebtst
0003CCCA <AmiBlitz3.ab2@19015>   MOVE.l (A7)+,D1
0003CCCE <AmiBlitz3.ab2@19018>   BCLR #$0,D1
0003CCD0 <AmiBlitz3.ab2@19021>   TST.l D1
0003CCD4 <AmiBlitz3.ab2@19022>    BSR.w JL_0_BBC6
0003CCD6 <AmiBlitz3.ab2@19023>   MOVE.l (A2)+,D1
0003CCDA <AmiBlitz3.ab2@19024>    BSR.w JL_0_BB98
0003CCDC <AmiBlitz3.ab2@19025>   MOVE.l (A2)+,D1
0003CCE0 <AmiBlitz3.ab2@19026>    BSR.w JL_0_BBC6
0003CCE4 <AmiBlitz3.ab2@19027> BRA.w JL_0_BB90
0003CCEA <AmiBlitz3.ab2@19030>   BTST #$0,$3(A2)
0003CCEE <AmiBlitz3.ab2@19031>    BEQ.w JL_0_BB88
0003CCF2 <AmiBlitz3.ab2@19032>   MOVE.w blitzmode(PC),D1
0003CCF6 <AmiBlitz3.ab2@19033>    BPL.w blitzerr
0003CCFA <AmiBlitz3.ab2@19036>   MOVE.l $4(A2),D1
0003CCFE <AmiBlitz3.ab2@19037>    BSR.w JL_0_BB98
0003CD04 <AmiBlitz3.ab2@19040>   MOVEA.l libisat,A2
0003CD06 <AmiBlitz3.ab2@19041> RTS
0003CD0A <AmiBlitz3.ab2@19044>   BTST #$0,D1
0003CD0E <AmiBlitz3.ab2@19045>    BEQ.w JL_0_BBC4
0003CD14 <AmiBlitz3.ab2@19046>   TST.w blitzmode
0003CD18 <AmiBlitz3.ab2@19047>    BMI.w amigaerr
0003CD1E <AmiBlitz3.ab2@19048>   TST.b debugmode
0003CD22 <AmiBlitz3.ab2@19049>    BEQ.w JL_0_BBC0
0003CD24 <AmiBlitz3.ab2@19050>   MOVE.l D1,-(A7)
0003CD28 <AmiBlitz3.ab2@19051>   MOVE.w #$C312,D1
0003CD2C <AmiBlitz3.ab2@19052>    BSR.w makebtst
0003CD2E <AmiBlitz3.ab2@19053>   MOVE.l (A7)+,D1
0003CD32 <AmiBlitz3.ab2@19056>   BCLR #$0,D1
0003CD34 <AmiBlitz3.ab2@19059>   TST.l D1
0003CD38 <AmiBlitz3.ab2@19062>    BEQ.w JL_0_BBD2
0003CD3A <AmiBlitz3.ab2@19063>   MOVE.l A1,-(A7)
0003CD3E <AmiBlitz3.ab2@19064>    BSR.w JL_0_BBD4
0003CD40 <AmiBlitz3.ab2@19065>   MOVEA.l (A7)+,A1
0003CD42 <AmiBlitz3.ab2@19068> RTS
0003CD48 <AmiBlitz3.ab2@19071>   MOVEA.l libisat,A0
0003CD4E <AmiBlitz3.ab2@19072>   TST.w cfetchmode
0003CD52 <AmiBlitz3.ab2@19073>    BEQ.w JL_0_BBF6
0003CD54 <AmiBlitz3.ab2@19074>   ADD.l A0,D1
0003CD56 <AmiBlitz3.ab2@19075>   MOVE.l D1,-(A7)
0003CD5A <AmiBlitz3.ab2@19076>   MOVE.w #$4EB9,D1
0003CD5E <AmiBlitz3.ab2@19077>    BSR.w writeword
0003CD60 <AmiBlitz3.ab2@19078>   MOVE.l (A7)+,D1
0003CD64 <AmiBlitz3.ab2@19079> BRA.w writelong
0003CD68 <AmiBlitz3.ab2@19082>   LEA $0(A0,D1.L),A1
0003CD6E <AmiBlitz3.ab2@19083>   CLR.w inline
0003CD72 <AmiBlitz3.ab2@19086>   CMPI.b #$A0,(A1)+
0003CD76 <AmiBlitz3.ab2@19087>    BNE.w JL_0_BC68
0003CD78 <AmiBlitz3.ab2@19088>   TST.b (A1)+
0003CD7C <AmiBlitz3.ab2@19089>    BEQ.w JL_0_BC18
0003CD82 <AmiBlitz3.ab2@19090>   CMPI.b #$1,-$1(A1)
0003CD86 <AmiBlitz3.ab2@19091>    BEQ.w JL_0_BC24
0003CD8C <AmiBlitz3.ab2@19094>   MOVE.w (A1)+,inline
0003CD8E <AmiBlitz3.ab2@19095>   ADDQ.l #4,D1
0003CD92 <AmiBlitz3.ab2@19096> BRA.w JL_0_BC00
0003CD98 <AmiBlitz3.ab2@19099>   TST.w blitzmode
0003CD9C <AmiBlitz3.ab2@19100>    BPL.w JL_0_BC4A
0003CDA2 <AmiBlitz3.ab2@19101>   TST.b debugmode
0003CDA6 <AmiBlitz3.ab2@19102>    BEQ.w JL_0_BC40
0003CDAA <AmiBlitz3.ab2@19103>   MOVE.w #$C311,D1
0003CDAE <AmiBlitz3.ab2@19104>    BSR.w makebtst
0003CDB0 <AmiBlitz3.ab2@19107>   MOVE.l (A1)+,D1
0003CDB4 <AmiBlitz3.ab2@19108>   LEA $0(A0,D1.L),A1
0003CDB8 <AmiBlitz3.ab2@19109> BRA.w JL_0_BC00
0003CDBE <AmiBlitz3.ab2@19112>   TST.b debugmode
0003CDC2 <AmiBlitz3.ab2@19113>    BEQ.w JL_0_BC60
0003CDC4 <AmiBlitz3.ab2@19114>   MOVE.l D1,-(A7)
0003CDC8 <AmiBlitz3.ab2@19115>   MOVE.w #$C312,D1
0003CDCC <AmiBlitz3.ab2@19116>    BSR.w makebtst
0003CDCE <AmiBlitz3.ab2@19117>   MOVE.l (A7)+,D1
0003CDD0 <AmiBlitz3.ab2@19120>   ADDQ.w #4,A1
0003CDD2 <AmiBlitz3.ab2@19121>   ADDQ.l #6,D1
0003CDD6 <AmiBlitz3.ab2@19122> BRA.w JL_0_BC00
0003CDDC <AmiBlitz3.ab2@19125>   TST.w inline
0003CDE0 <AmiBlitz3.ab2@19126>    BEQ.w JL_0_BC7E
0003CDE2 <AmiBlitz3.ab2@19127>   SUBQ.w #1,A1
0003CDE4 <AmiBlitz3.ab2@19128>   MOVEA.l A1,A0
0003CDE8 <AmiBlitz3.ab2@19129>   ADDA.w inline(PC),A1
0003CDEC <AmiBlitz3.ab2@19130> BRA.w pokecode2
0003CDF0 <AmiBlitz3.ab2@19133>   MOVEM.l a0/D1,-(A7)
0003CDF6 <AmiBlitz3.ab2@19134>   TST.w debugversion
0003CDFA <AmiBlitz3.ab2@19135>   BEQ 'l11
0003CE02 <AmiBlitz3.ab2@19136>   BTST #$7,link_debuginfo
0003CE06 <AmiBlitz3.ab2@19137>   BEQ.w 'l11
0003CE0C <AmiBlitz3.ab2@19138>   MOVE.l lastinstruction,d1
0003CE10 <AmiBlitz3.ab2@19139>   BEQ 'l11
0003CE16 <AmiBlitz3.ab2@19140>   CLR.l lastinstruction
0003CE1C <AmiBlitz3.ab2@19141>   CMP.l #$e000,d1
0003CE20 <AmiBlitz3.ab2@19142>   BGE 'ln99
0003CE26 <AmiBlitz3.ab2@19143>   LEA notf,a0
0003CE2C <AmiBlitz3.ab2@19144>   CMP.l #$c601,d1
0003CE30 <AmiBlitz3.ab2@19145>   BNE 'ln1
0003CE36 <AmiBlitz3.ab2@19146>   LEA strcpy,a0
0003CE3A <AmiBlitz3.ab2@19147> BRA 'ln3
0003CE40 <AmiBlitz3.ab2@19150>   CMP.l #$c700,d1
0003CE44 <AmiBlitz3.ab2@19151>   BNE 'ln2
0003CE4A <AmiBlitz3.ab2@19152>   LEA strvar,a0
0003CE4E <AmiBlitz3.ab2@19153> BRA 'ln3
0003CE54 <AmiBlitz3.ab2@19156>   CMP.l #$ce00,d1
0003CE58 <AmiBlitz3.ab2@19157>   BNE 'ln4
0003CE5E <AmiBlitz3.ab2@19158>   LEA strcmp,a0
0003CE62 <AmiBlitz3.ab2@19159> BRA 'ln3
0003CE68 <AmiBlitz3.ab2@19162>   CMP.l #$ca00,d1
0003CE6C <AmiBlitz3.ab2@19163>   BNE 'ln5
0003CE72 <AmiBlitz3.ab2@19164>   LEA qmul,a0
0003CE76 <AmiBlitz3.ab2@19165> BRA 'ln3
0003CE7C <AmiBlitz3.ab2@19168>   CMP.l #$d000,d1
0003CE80 <AmiBlitz3.ab2@19169>      BNE 'ln6
0003CE86 <AmiBlitz3.ab2@19170>      LEA _MaxLen,a0
0003CE8A <AmiBlitz3.ab2@19171> BRA 'ln3
0003CE90 <AmiBlitz3.ab2@19174>   CMP.l #$cb00,d1
0003CE94 <AmiBlitz3.ab2@19175>   BNE 'ln3
0003CE9A <AmiBlitz3.ab2@19176>   LEA qdiv,a0
0003CE9E <AmiBlitz3.ab2@19177> BRA 'ln3
0003CEA0 <AmiBlitz3.ab2@19180>   MOVE.l d1,a0
0003CEA4 <AmiBlitz3.ab2@19181>   LEA $8(a0),a0
0003CEA8 <AmiBlitz3.ab2@19184>   CMP.w #$ffff,(a0)+
0003CEAC <AmiBlitz3.ab2@19185>   BNE 'l1
0003CEB0 <AmiBlitz3.ab2@19186>   LEA 6(a0),a0
0003CEB4 <AmiBlitz3.ab2@19189>   MOVEM.l a1/a2/d7/d2,-(a7)
0003CEB6 <AmiBlitz3.ab2@19190>   MOVEQ #0,d2
0003CEBC <AmiBlitz3.ab2@19191>   LEA ptr_parameterstore,a1
0003CEBE <AmiBlitz3.ab2@19194>   ADDQ.l #1,d2
0003CEC0 <AmiBlitz3.ab2@19195>   MOVE.b (a0)+,d0
0003CEC4 <AmiBlitz3.ab2@19196>   CMP.b #"$",d0                                         ;A label contain $ does not work for reassembler and assembler.it is replace with S
0003CEC8 <AmiBlitz3.ab2@19197>   BNE 'nodollar
0003CECC <AmiBlitz3.ab2@19198>   MOVE.b #"S",d0
0003CED0 <AmiBlitz3.ab2@19200>   CMP.b #"?",d0
0003CED4 <AmiBlitz3.ab2@19201>   BEQ 'nolabelwrite
0003CED6 <AmiBlitz3.ab2@19202>   MOVE.b d0,(a1)+
0003CEDA <AmiBlitz3.ab2@19203>   BNE 'l2
0003CEE0 <AmiBlitz3.ab2@19204>   MOVE.w #"__",-1(a1)
0003CEE2 <AmiBlitz3.ab2@19205>   ADDQ.l #2,d2
0003CEE6 <AmiBlitz3.ab2@19206>   CLR.b 1(a1)
0003CEEC <AmiBlitz3.ab2@19207>   JSR findlabel2
0003CEF0 <AmiBlitz3.ab2@19208>   BEQ 'l3
0003CEF6 <AmiBlitz3.ab2@19209>   JSR addlabelhash
0003CEFA <AmiBlitz3.ab2@19212>   CLR.l 4(a2)
0003CEFE <AmiBlitz3.ab2@19213>   MOVE.l $14(a7),a0
0003CF02 <AmiBlitz3.ab2@19214>   MOVE.l $10(a7),d1
0003CF06 <AmiBlitz3.ab2@19215>   SUB.l $12(a0),d1
0003CF0A <AmiBlitz3.ab2@19216>   ADD.l $28(a0),d1
0003CF0E <AmiBlitz3.ab2@19217>   MOVE.l d1,8(a2)
0003CF12 <AmiBlitz3.ab2@19218> 'nolabelwrite MOVEM.l (a7)+,a1/a2/d7/d2
0003CF18 <AmiBlitz3.ab2@19221>   TST.b typecheck
0003CF1C <AmiBlitz3.ab2@19222>   BEQ 'p1
0003CF22 <AmiBlitz3.ab2@19230>   TST.b peekaddrsize
0003CF26 <AmiBlitz3.ab2@19231>   BEQ 'p1
0003CF2E <AmiBlitz3.ab2@19232>   CMP.b #3,peekaddrsize
0003CF32 <AmiBlitz3.ab2@19233>   BNE errormsg_onlylong
0003CF38 <AmiBlitz3.ab2@19234>   CLR.b peekaddrsize
0003CF3E <AmiBlitz3.ab2@19242>    TST.b fpu
0003CF42 <AmiBlitz3.ab2@19243>   BNE 'optf
0003CF48 <AmiBlitz3.ab2@19244>   TST.b fast
0003CF4C <AmiBlitz3.ab2@19245>   BEQ JL11a2
0003CF54 <AmiBlitz3.ab2@19252>   CMP.l #"Poke",20(a2)                                     ;poke
0003CF58 <AmiBlitz3.ab2@19253>   BNE peekopt
0003CF5C <AmiBlitz3.ab2@19254>   TST.b 24(a2)
0003CF60 <AmiBlitz3.ab2@19255>   BNE peekopt
0003CF64 <AmiBlitz3.ab2@19256>   CMP.b #3,d2
0003CF68 <AmiBlitz3.ab2@19257>   BNE 'lw1
0003CF6E <AmiBlitz3.ab2@19260>   MOVE.l #$21821990,d1
0003CF72 <AmiBlitz3.ab2@19261> BRA.s 'lpx
0003CF76 <AmiBlitz3.ab2@19264>   CMP.b #2,d2
0003CF7A <AmiBlitz3.ab2@19265>   BNE 'lb1
0003CF80 <AmiBlitz3.ab2@19266>   MOVE.l #$31821990,d1
0003CF84 <AmiBlitz3.ab2@19267> BRA.s 'lpx
0003CF88 <AmiBlitz3.ab2@19270>   CMP.b #1,d2
0003CF8C <AmiBlitz3.ab2@19271>   BNE 'lp3
0003CF92 <AmiBlitz3.ab2@19272>   MOVE.l #$11821990,d1
0003CF96 <AmiBlitz3.ab2@19273> BRA.s 'lpx
0003CF9A <AmiBlitz3.ab2@19276>   CMP.b #5,d2
0003CF9E <AmiBlitz3.ab2@19277>     BNE JL11a2
0003CFA4 <AmiBlitz3.ab2@19278>     TST.b fpu
0003CFA8 <AmiBlitz3.ab2@19279>     BEQ 'll1
0003CFAE <AmiBlitz3.ab2@19280>      MOVE.l destpointer,a4
0003CFB6 <AmiBlitz3.ab2@19281>     CMP.l #$f22d4500,-6(a4)
0003CFBA <AmiBlitz3.ab2@19282>     BNE 'noglob
0003CFC0 <AmiBlitz3.ab2@19283>     TST.b doublepeek
0003CFC4 <AmiBlitz3.ab2@19284>     BNE 'noglob
0003CFCA <AmiBlitz3.ab2@19285>     MOVE.w -2(a4),-4(a4)
0003CFD0 <AmiBlitz3.ab2@19286>     MOVE.w #$21ad,-6(a4)
0003CFD6 <AmiBlitz3.ab2@19287>     MOVE.w #$1990,-2(a4)
0003CFDE <AmiBlitz3.ab2@19288>     MOVE.w #9,peeksize
0003CFE0 <AmiBlitz3.ab2@19289>     ADDQ #8,a7
0003CFE2 <AmiBlitz3.ab2@19290> RTS
0003CFEA <AmiBlitz3.ab2@19293>     CMP.l #$f22c4500,-6(a4)
0003CFEE <AmiBlitz3.ab2@19294>     BNE 'nolocal
0003CFF4 <AmiBlitz3.ab2@19295>     MOVE.w -2(a4),-4(a4)
0003CFFA <AmiBlitz3.ab2@19296>     TST.b doublepeek                                       ;dont move longfix on double floats
0003CFFE <AmiBlitz3.ab2@19297>     BNE 'nolocal
0003D004 <AmiBlitz3.ab2@19298>     MOVE.w #$21ac,-6(a4)
0003D00A <AmiBlitz3.ab2@19299>     MOVE.w #$1990,-2(a4)
0003D012 <AmiBlitz3.ab2@19300>     MOVE.w #9,peeksize
0003D014 <AmiBlitz3.ab2@19301>     ADDQ #8,a7
0003D016 <AmiBlitz3.ab2@19302> RTS
0003D01A <AmiBlitz3.ab2@19305>     MOVE.w #$f230,d1
0003D01E <AmiBlitz3.ab2@19306>     BSR writeword
0003D024 <AmiBlitz3.ab2@19307>   MOVE.l #$65001990,d1
0003D02A <AmiBlitz3.ab2@19308>   TST.b doublepeek
0003D02E <AmiBlitz3.ab2@19309>   BEQ 'lpx
0003D034 <AmiBlitz3.ab2@19310>   OR.l   #$10000000,d1
0003D036 <AmiBlitz3.ab2@19314>   ADDQ #8,a7
0003D03E <AmiBlitz3.ab2@19315>   MOVE.w #9,peeksize
0003D042 <AmiBlitz3.ab2@19316> BRA writelong
0003D04A <AmiBlitz3.ab2@19319>   CMP.l #"Peek",20(a2)
0003D04E <AmiBlitz3.ab2@19320>   BNE 'l10
0003D052 <AmiBlitz3.ab2@19321>   TST.b 24(a2)
0003D056 <AmiBlitz3.ab2@19322>   BNE 'l10
0003D05E <AmiBlitz3.ab2@19323>   CMP.w #7,peeksize
0003D062 <AmiBlitz3.ab2@19324>   BEQ 'l10
0003D06A <AmiBlitz3.ab2@19325>    CMP.w #3,peeksize
0003D06E <AmiBlitz3.ab2@19326>    BNE.s 'lw1
0003D074 <AmiBlitz3.ab2@19329>   MOVE.l #$20301990,d1
0003D078 <AmiBlitz3.ab2@19330> BRA exitjsr
0003D080 <AmiBlitz3.ab2@19333>   CMP.w #2,peeksize
0003D084 <AmiBlitz3.ab2@19334>    BNE.s 'lb1
0003D08A <AmiBlitz3.ab2@19335>    MOVE.l #$30301990,d1
0003D08E <AmiBlitz3.ab2@19336> BRA exitjsr
0003D096 <AmiBlitz3.ab2@19339>   CMP.w #1,peeksize
0003D09A <AmiBlitz3.ab2@19340>    BNE.s 'lf1
0003D0A0 <AmiBlitz3.ab2@19341>    MOVE.l #$10301990,d1
0003D0A4 <AmiBlitz3.ab2@19342> BRA exitjsr
0003D0AC <AmiBlitz3.ab2@19345>   CMP.w #5,peeksize
0003D0B0 <AmiBlitz3.ab2@19346>    BNE 'l10
0003D0B6 <AmiBlitz3.ab2@19347>    TST.b fpu
0003D0BA <AmiBlitz3.ab2@19348>    BEQ 'll1
0003D0BE <AmiBlitz3.ab2@19349>    MOVE.w #$f230,d1
0003D0C2 <AmiBlitz3.ab2@19350>    BSR writeword
0003D0C4 <AmiBlitz3.ab2@19351>    MOVEQ #0,d1
0003D0CA <AmiBlitz3.ab2@19352>    MOVE.w tempregnum,d1
0003D0CC <AmiBlitz3.ab2@19353>    ASL.l #7,d1
0003D0CE <AmiBlitz3.ab2@19354>    ASL.l #8,d1
0003D0D0 <AmiBlitz3.ab2@19355>    ASL.l #8,d1
0003D0D6 <AmiBlitz3.ab2@19356>    ADD.l #$44001990,d1
0003D0DC <AmiBlitz3.ab2@19357>     TST.b doublepeek
0003D0E0 <AmiBlitz3.ab2@19358>     BEQ 'lpx2
0003D0E6 <AmiBlitz3.ab2@19359>     OR.l   #$10000000,d1
0003D0EA <AmiBlitz3.ab2@19361> BRA exitjsr
0003D0EE <AmiBlitz3.ab2@19365>   MOVE.w #$4EB9,D1
0003D0F2 <AmiBlitz3.ab2@19366>    BSR.w writeword                                         ;writesysjsr
0003D0F6 <AmiBlitz3.ab2@19367>   MOVEM.l (A7)+,a0/D1
0003D0FC <AmiBlitz3.ab2@19368>    JSR addoff
0003D100 <AmiBlitz3.ab2@19369>   SUB.l $12(A0),D1
0003D104 <AmiBlitz3.ab2@19370>   ADD.l $28(A0),D1
0003D108 <AmiBlitz3.ab2@19371> BRA.w writelong
0003D10A <AmiBlitz3.ab2@19376>   MOVE.w D1,-(A7)
0003D10E <AmiBlitz3.ab2@19377>   MOVE.w tstmode(PC),D1
0003D112 <AmiBlitz3.ab2@19378>    BSR.w writeword
0003D116 <AmiBlitz3.ab2@19379>    BSR.w getbbase
0003D11A <AmiBlitz3.ab2@19380>    BSR.w writeword
0003D11C <AmiBlitz3.ab2@19381>   MOVE.w (A7)+,D1
0003D120 <AmiBlitz3.ab2@19382>   MOVEM.l D0/D3-D7/A0-A2/A4,-(A7)
0003D124 <AmiBlitz3.ab2@19383>    BSR.w Atokejsr
0003D128 <AmiBlitz3.ab2@19384>   MOVEM.l (A7)+,D0/D3-D7/A0-A2/A4
0003D12A <AmiBlitz3.ab2@19385> RTS
0003D12E <AmiBlitz3.ab2@19393>   MOVE.w blitzoff(PC),D1
0003D132 <AmiBlitz3.ab2@19394>   CMP.w #-$1,D1
0003D136 <AmiBlitz3.ab2@19395>    BNE.w getbbase__done
0003D13C <AmiBlitz3.ab2@19396>   ADDQ.w #1,globalvarpointer
0003D144 <AmiBlitz3.ab2@19397>   BCLR #$0,globalvarpointer+1
0003D14A <AmiBlitz3.ab2@19398>   MOVE.w globalvarpointer,D1
0003D150 <AmiBlitz3.ab2@19399>   MOVE.w D1,blitzoff
0003D156 <AmiBlitz3.ab2@19400>   ADDQ.w #2,globalvarpointer
0003D158 <AmiBlitz3.ab2@19403> RTS
0003D15C <AmiBlitz3.ab2@19407> tstmode:    Dc.b $4A,$6D,$00,$00                           ;TST.W $0000(A5)
0003D15E <AmiBlitz3.ab2@19410> inline:     Ds.w 1
0003D160 <AmiBlitz3.ab2@19411> blitzoff:   Dc.w $FFFF                                   ;-1 org source
0003D162 <AmiBlitz3.ab2@19412> blitzmode:  Ds.w 1                                       ;+=amiga, -=blitz
0003D164 <AmiBlitz3.ab2@19416>   MOVE.w (A2)+,D1
0003D168 <AmiBlitz3.ab2@19417>    BEQ.w fetchregs__done
0003D16A <AmiBlitz3.ab2@19418>   MOVE.w (A2)+,D2
0003D16E <AmiBlitz3.ab2@19419>    BSR.w toreg
0003D172 <AmiBlitz3.ab2@19420> BRA.w fetchregs
0003D174 <AmiBlitz3.ab2@19423> RTS
0003D178 <AmiBlitz3.ab2@19428>   CMP.w #-$100,D2
0003D17C <AmiBlitz3.ab2@19429>    BCC.w toreg__yeah
0003D180 <AmiBlitz3.ab2@19431>   BCLR #$F,D2
0003D184 <AmiBlitz3.ab2@19432>    BEQ.w toreg__nobm
0003D18A <AmiBlitz3.ab2@19434>   TST.w blitzmode
0003D18E <AmiBlitz3.ab2@19435>    BMI.w toreg__yeah
0003D190 <AmiBlitz3.ab2@19436> RTS
0003D194 <AmiBlitz3.ab2@19439>   BCLR #$E,D2
0003D198 <AmiBlitz3.ab2@19440>    BEQ.w toreg__yeah
0003D19E <AmiBlitz3.ab2@19442>   TST.w blitzmode
0003D1A2 <AmiBlitz3.ab2@19443>    BPL.w toreg__yeah
0003D1A4 <AmiBlitz3.ab2@19444> RTS
0003D1AA <AmiBlitz3.ab2@19447>   JSR uselib
0003D1AC <AmiBlitz3.ab2@19448>   TST.b D2
0003D1B0 <AmiBlitz3.ab2@19449>    BEQ.w toreg__norm
0003D1B4 <AmiBlitz3.ab2@19450>   CMP.b #$4,D2
0003D1B8 <AmiBlitz3.ab2@19451>    BNE.w toreg__suv
0003D1BC <AmiBlitz3.ab2@19452>   MOVE.w #$0004,-(A7)
0003D1C2 <AmiBlitz3.ab2@19453>   MOVE.l #$FFFFFFFA,-(A7)                                  ;#-6,-(a7) org source
0003D1C6 <AmiBlitz3.ab2@19454> BRA.w toreg__sendmd
0003D1CA <AmiBlitz3.ab2@19457>   CMP.b #$3,D2
0003D1CE <AmiBlitz3.ab2@19458>    BNE.w toreg__notnmax
0003D1D0 <AmiBlitz3.ab2@19459>   CLR.w -(A7)
0003D1D6 <AmiBlitz3.ab2@19460>   MOVE.l #$FFFFFFFC,-(A7)                                  ;#-4,-(a7) org source
0003D1D8 <AmiBlitz3.ab2@19466>   LSR.w #8,D2
0003D1DC <AmiBlitz3.ab2@19467>   MOVE.w #$303C,D1                                         ;move.w #x,dn
0003D1E0 <AmiBlitz3.ab2@19468>   BTST #$7,D2
0003D1E4 <AmiBlitz3.ab2@19469>    BEQ.w toreg__skipad
0003D1E8 <AmiBlitz3.ab2@19470>   MOVE.w #$307C,D1                                         ;move.w #x,an
0003D1EC <AmiBlitz3.ab2@19471>   CMP.w #$16,D2
0003D1F0 <AmiBlitz3.ab2@19472>    BNE.w toreg__skipad
0003D1F8 <AmiBlitz3.ab2@19473>   MOVE.w #$FFFF,lasta6                                     ;-1 org source
0003D1FC <AmiBlitz3.ab2@19476>   ANDI.w #$7,D2
0003D1FE <AmiBlitz3.ab2@19477>   LSL.w #8,D2
0003D200 <AmiBlitz3.ab2@19478>   LSL.w #1,D2
0003D202 <AmiBlitz3.ab2@19479>   OR.w D2,D1
0003D206 <AmiBlitz3.ab2@19480>    BSR.w writeword
0003D20A <AmiBlitz3.ab2@19481>   MOVE.l $12(A1),D1
0003D20C <AmiBlitz3.ab2@19482>   ADD.l (A7)+,D1
0003D210 <AmiBlitz3.ab2@19483>   MOVE.w $0(A1,D1.L),D1
0003D212 <AmiBlitz3.ab2@19484>   ADD.w (A7)+,D1
0003D216 <AmiBlitz3.ab2@19485> BRA.w writeword
0003D218 <AmiBlitz3.ab2@19488>   MOVE.w D2,-(A7)
0003D21A <AmiBlitz3.ab2@19489>   LSR.w #8,D2
0003D21E <AmiBlitz3.ab2@19490>   CMP.w #$16,D2
0003D222 <AmiBlitz3.ab2@19491>    BNE.w toreg__isnta6
0003D22A <AmiBlitz3.ab2@19492>   MOVE.w #$FFFF,lasta6                                     ;-1 org source
0003D22E <AmiBlitz3.ab2@19495>   MOVE.l $12(A1),D1                                        ;objectspace
0003D232 <AmiBlitz3.ab2@19496>   MOVE.w -$6(A1,D1.L),-(A7)
0003D236 <AmiBlitz3.ab2@19497>    BSR.w makeregop
0003D23A <AmiBlitz3.ab2@19498>    BSR.w writeword
0003D23C <AmiBlitz3.ab2@19499>   MOVE.w (A7)+,D1
0003D23E <AmiBlitz3.ab2@19500>   MOVE.w (A7)+,D2
0003D240 <AmiBlitz3.ab2@19501>   TST.b D2
0003D244 <AmiBlitz3.ab2@19502>    BPL.w toreg__skippy1
0003D248 <AmiBlitz3.ab2@19507>    BSR.w writeword                                         ;move.l x(a5),dn
0003D24A <AmiBlitz3.ab2@19508>   MOVE.w D2,-(A7)                                          ;store reg used
0003D24E <AmiBlitz3.ab2@19510>   ADDA.l $12(A1),A1
0003D250 <AmiBlitz3.ab2@19511>   MOVE.b D2,D1
0003D254 <AmiBlitz3.ab2@19512>   ANDI.w #$7,D1
0003D25A <AmiBlitz3.ab2@19514>   TST.b debugmode
0003D25E <AmiBlitz3.ab2@19515>    BEQ.w toreg__norerr
0003D260 <AmiBlitz3.ab2@19517>   MOVE.w D1,-(A7)
0003D262 <AmiBlitz3.ab2@19518>   LSL.w #8,D1
0003D264 <AmiBlitz3.ab2@19519>   LSL.w #1,D1
0003D268 <AmiBlitz3.ab2@19520>   ORI.w #$B07C,D1                                          ;cmp #x,dn
0003D26C <AmiBlitz3.ab2@19521>    BSR.w writeword
0003D270 <AmiBlitz3.ab2@19522>   MOVE.w -$4(A1),D1
0003D274 <AmiBlitz3.ab2@19523>    BSR.w writeword
0003D278 <AmiBlitz3.ab2@19524>   MOVE.l maxchk(PC),D1                                  ;bcs
0003D27C <AmiBlitz3.ab2@19525>    BSR.w writelong
0003D27E <AmiBlitz3.ab2@19526>   MOVE.l A2,-(A7)
0003D282 <AmiBlitz3.ab2@19527>   MOVE.w #$C30A,D1
0003D286 <AmiBlitz3.ab2@19528>    BSR.w Atokejsr
0003D288 <AmiBlitz3.ab2@19529>   MOVEA.l (A7)+,A2
0003D28A <AmiBlitz3.ab2@19530>   MOVE.w (A7)+,D1
0003D28E <AmiBlitz3.ab2@19533>   MOVE.w -$2(A1),D2                                        ;shift amount
0003D292 <AmiBlitz3.ab2@19536>   CMP.w #$9,D2
0003D296 <AmiBlitz3.ab2@19537>    BCS.w toreg__simp
0003D29A <AmiBlitz3.ab2@19538>   MOVEM.w D1-D2,-(A7)
0003D29C <AmiBlitz3.ab2@19540>   MOVEQ.l #$00,D2                                          ;!!!!!
0003D29E <AmiBlitz3.ab2@19542>   LSL.w #8,D2
0003D2A0 <AmiBlitz3.ab2@19543>   LSL.w #1,D2
0003D2A2 <AmiBlitz3.ab2@19544>   OR.w D2,D1
0003D2A6 <AmiBlitz3.ab2@19545>   OR.w lsldn(PC),D1
0003D2AA <AmiBlitz3.ab2@19546>    BSR.w writeword
0003D2AE <AmiBlitz3.ab2@19547>   MOVEM.w (A7)+,D1-D2
0003D2B0 <AmiBlitz3.ab2@19548>   SUBQ.w #8,D2
0003D2B4 <AmiBlitz3.ab2@19549> BRA.w toreg__shloop
0003D2B6 <AmiBlitz3.ab2@19552>   MOVE.w D1,-(A7)
0003D2BA <AmiBlitz3.ab2@19553>   OR.w #$48c0,d1
0003D2BE <AmiBlitz3.ab2@19554>   BSR writeword
0003D2C0 <AmiBlitz3.ab2@19555>   MOVE.w (a7),d1
0003D2C2 <AmiBlitz3.ab2@19556>   TST.w D2
0003D2C6 <AmiBlitz3.ab2@19557>   BEQ.w toreg__simp2
0003D2CA <AmiBlitz3.ab2@19559>   ANDI.w #$7,D2                                            ;?????
0003D2CC <AmiBlitz3.ab2@19561>   LSL.w #8,D2
0003D2CE <AmiBlitz3.ab2@19562>   LSL.w #1,D2
0003D2D0 <AmiBlitz3.ab2@19563>   OR.w D2,D1
0003D2D4 <AmiBlitz3.ab2@19564>   OR.w lsldn(PC),D1
0003D2D8 <AmiBlitz3.ab2@19565>    BSR.w writeword
0003D2DA <AmiBlitz3.ab2@19571>   MOVE.w (A7)+,D1
0003D2DE <AmiBlitz3.ab2@19572>   ANDI.w #$7,D1
0003D2E2 <AmiBlitz3.ab2@19573>   OR.w maxdo(PC),D1
0003D2E4 <AmiBlitz3.ab2@19574>   MOVE.w (A7)+,D2
0003D2E6 <AmiBlitz3.ab2@19575>   LSL.w #1,D2
0003D2EA <AmiBlitz3.ab2@19576>   ANDI.w #$E00,D2
0003D2EC <AmiBlitz3.ab2@19577>   OR.w D2,D1
0003D2F0 <AmiBlitz3.ab2@19578> BRA.w writeword
0003D2F4 <AmiBlitz3.ab2@19581>   CMP.b #$1,D2
0003D2F8 <AmiBlitz3.ab2@19582>    BEQ.w toreg__skippy
0003D2FA <AmiBlitz3.ab2@19586>   ADDQ.w #4,D1
0003D300 <AmiBlitz3.ab2@19588>   TST.b debugmode
0003D304 <AmiBlitz3.ab2@19589>    BEQ.w toreg__skippy
0003D308 <AmiBlitz3.ab2@19591>    BSR.w writeword
0003D30A <AmiBlitz3.ab2@19592>   SWAP D1
0003D30E <AmiBlitz3.ab2@19593>   MOVE.w toreg__theretest(PC),D1
0003D310 <AmiBlitz3.ab2@19594>   SWAP D1
0003D314 <AmiBlitz3.ab2@19595>    BSR.w writelong
0003D318 <AmiBlitz3.ab2@19596>   MOVE.l toreg__theretest+4(PC),D1
0003D31C <AmiBlitz3.ab2@19597>    BSR.w writelong
0003D320 <AmiBlitz3.ab2@19598>   MOVE.l toreg__theretest+8(PC),D1
0003D324 <AmiBlitz3.ab2@19599> BRA.w writelong
0003D328 <AmiBlitz3.ab2@19602> BRA.w writeword
0003D32C <AmiBlitz3.ab2@19607>             Dc.b $4A,$AD,$00,$00                           ;TST.L  $0000(A5)
0003D330 <AmiBlitz3.ab2@19608>             Dc.b $66,$00,$00,$06                           ;BNE.W  toreg__ttskip
0003D332 <AmiBlitz3.ab2@19609>             Dc.b $70,$01                                   ;MOVEQ  #$01,D0
0003D334 <AmiBlitz3.ab2@19610>             Dc.b $4E,$40                                   ;TRAP   #00
0003D336 <AmiBlitz3.ab2@19615>   LSR.w #8,D2
0003D33A <AmiBlitz3.ab2@19616>   CMP.b #$16,D2
0003D33E <AmiBlitz3.ab2@19617>    BNE.w toreg__nota6
0003D342 <AmiBlitz3.ab2@19618>   MOVE.w $A(A1),D1
0003D348 <AmiBlitz3.ab2@19619>   CMP.w lasta6,D1
0003D34C <AmiBlitz3.ab2@19620>    BEQ.w toreg__sk
0003D352 <AmiBlitz3.ab2@19621>   MOVE.w D1,lasta6
0003D356 <AmiBlitz3.ab2@19624>    BSR.w makeregop
0003D35A <AmiBlitz3.ab2@19625>   TST.w $1A(A1)
0003D35E <AmiBlitz3.ab2@19626>    BPL.w toreg__long
0003D362 <AmiBlitz3.ab2@19627>   CMP.w stackop(PC),D1
0003D366 <AmiBlitz3.ab2@19628>    BNE.w toreg__notst
0003D36C <AmiBlitz3.ab2@19629>   SUBQ.w #2,a2offset
0003D370 <AmiBlitz3.ab2@19632>    ORI.w #$1000,D1
0003D374 <AmiBlitz3.ab2@19635>    BSR.w writeword
0003D378 <AmiBlitz3.ab2@19636>   MOVE.w $A(A1),D1
0003D37C <AmiBlitz3.ab2@19637>    BSR.w writeword
0003D37E <AmiBlitz3.ab2@19640> RTS
0003D380 <AmiBlitz3.ab2@19644> lsldn:      Dc.b $E1,$88                 ;Dc.b $48 ;object long acsess    ;LSL.L   #8,D0
0003D384 <AmiBlitz3.ab2@19645> maxchk:     Dc.b $65,$00,$00,$08                                          ;BCS.W   maxchk__ok
0003D38A <AmiBlitz3.ab2@19646>             Dc.b $4E,$B9,$00,$00,$00,$00                                  ;JSR     $00000000
0003D38C <AmiBlitz3.ab2@19649> maxdo:      Dc.b $D1,$C0                                                  ;ADDA.L  D0,A0        ;old Dc.b $d0 $C0,00   ;ADDA.W  D0,A0
0003D38E <AmiBlitz3.ab2@19652>             Dc.b $00,$00
0003D392 <AmiBlitz3.ab2@19653> stackop:    Dc.b $2F,$2D,$00,$00                                          ;MOVE.L  $0000(A5),-(A7)
0003D396 <AmiBlitz3.ab2@19660>   CMP.b #$FF,D2
0003D39A <AmiBlitz3.ab2@19661>    BNE.w makeregop__notst
0003D39E <AmiBlitz3.ab2@19662>   MOVE.w stackop(PC),D1
0003D3A4 <AmiBlitz3.ab2@19663>   ADDQ.w #4,a2offset
0003D3A6 <AmiBlitz3.ab2@19664> RTS
0003D3A8 <AmiBlitz3.ab2@19667>   MOVE.l A3,-(A7)
0003D3AE <AmiBlitz3.ab2@19668>   LEA regtransd,A3
0003D3B2 <AmiBlitz3.ab2@19669>   BTST #$4,D2
0003D3B6 <AmiBlitz3.ab2@19670>    BEQ.w makeregop__skip
0003D3BC <AmiBlitz3.ab2@19671>   LEA regtransa,A3
0003D3C0 <AmiBlitz3.ab2@19674>   ANDI.w #$7,D2
0003D3C2 <AmiBlitz3.ab2@19675>   MOVE.w D2,D1
0003D3C4 <AmiBlitz3.ab2@19676>   LSL.w #8,D1
0003D3C6 <AmiBlitz3.ab2@19677>   LSL.w #1,D1
0003D3C8 <AmiBlitz3.ab2@19678>   OR.w (A3),D1
0003D3CA <AmiBlitz3.ab2@19679>   MOVEA.l (A7)+,A3
0003D3CC <AmiBlitz3.ab2@19680> RTS
0003D3D0 <AmiBlitz3.ab2@19686>   CMP.w #$3C,D0
0003D3D4 <AmiBlitz3.ab2@19687>    BCS.w ifchar__no
0003D3D8 <AmiBlitz3.ab2@19688>   CMP.w #$3E,D0
0003D3DC <AmiBlitz3.ab2@19689>    BHI.w ifchar__no
0003D3E0 <AmiBlitz3.ab2@19690>   SUBI.w #$3C,D0
0003D3E2 <AmiBlitz3.ab2@19691>   CMP.w D0,D0
0003D3E4 <AmiBlitz3.ab2@19694> RTS
0003D3EE <AmiBlitz3.ab2@19699>   MOVE.w oldqflag,instringon
0003D3F4 <AmiBlitz3.ab2@19700>   MOVEA.l lastsourcepos,A5
0003D3FA <AmiBlitz3.ab2@19703>   MOVE.w regnum,-(A7)
0003D400 <AmiBlitz3.ab2@19704>   CLR.w regnum
0003D406 <AmiBlitz3.ab2@19705>   MOVE.l destpointer,-(A7)
0003D40C <AmiBlitz3.ab2@19706>   MOVE.l destbufferend,-(A7)
0003D412 <AmiBlitz3.ab2@19707>   MOVE.w dontwrite,-(A7)
0003D418 <AmiBlitz3.ab2@19708>   MOVE.w lasta6,-(A7)
0003D41E <AmiBlitz3.ab2@19709>   MOVE.w cfetchmode,-(A7)
0003D422 <AmiBlitz3.ab2@19710>    BNE.w JL_0_BFB6
0003D42C <AmiBlitz3.ab2@19711>   MOVE.l destbufferend,oldlibat
0003D432 <AmiBlitz3.ab2@19712>   MOVEA.l constpcat,A0
0003D438 <AmiBlitz3.ab2@19713>   MOVE.l A0,destpointer
0003D43C <AmiBlitz3.ab2@19714> BRA.w JL_0_BFBC
0003D442 <AmiBlitz3.ab2@19717>   MOVEA.l destpointer,A0
0003D444 <AmiBlitz3.ab2@19720>   MOVE.l A0,-(A7)
0003D44E <AmiBlitz3.ab2@19721>   MOVE.l constlibat,destbufferend
0003D454 <AmiBlitz3.ab2@19722>   CLR.w dontwrite
0003D45C <AmiBlitz3.ab2@19724>   MOVE.w #$FFFF,lasta6
0003D464 <AmiBlitz3.ab2@19725>   MOVE.w #$FFFF,cfetchmode
0003D468 <AmiBlitz3.ab2@19727>     BSR.w arreval
0003D46A <AmiBlitz3.ab2@19728>    MOVE.l (a7),a0
0003D5A6 <AmiBlitz3.ab2@19730>  !newcalc
0003D5AA <AmiBlitz3.ab2@19731>    BEQ 'l10
0003D5AC <AmiBlitz3.ab2@19732>    MOVE.l d0,d3
0003D5AE <AmiBlitz3.ab2@19733>    MOVEA.l (A7)+,A0
0003D5B2 <AmiBlitz3.ab2@19734> BRA bc1
0003D5B6 <AmiBlitz3.ab2@19737>    MOVE.w #$2600,D1
0003D5BC <AmiBlitz3.ab2@19738>   OR.w regnum,D1
0003D5C0 <AmiBlitz3.ab2@19739>    BSR.w writeword
0003D5C4 <AmiBlitz3.ab2@19740>   MOVE.w #$4E75,D1
0003D5C8 <AmiBlitz3.ab2@19741>    BSR.w writeword
0003D5CE <AmiBlitz3.ab2@19742>   MOVE.w dontwrite,D1
0003D5D2 <AmiBlitz3.ab2@19743>    BNE.w conmemerr
0003D5D4 <AmiBlitz3.ab2@19744>   MOVEA.l (A7)+,A0
0003D5D6 <AmiBlitz3.ab2@19745>   NOP
0003D5DC <AmiBlitz3.ab2@19746>    JSR Aclearcache                                         ;simple expression
0003D5DE <AmiBlitz3.ab2@19749>    JSR (A0)                                                ;writeresult
0003D5E4 <AmiBlitz3.ab2@19752>   MOVE.w (A7)+,cfetchmode
0003D5EA <AmiBlitz3.ab2@19753>   MOVE.w (A7)+,lasta6
0003D5F0 <AmiBlitz3.ab2@19754>   MOVE.w (A7)+,dontwrite
0003D5F6 <AmiBlitz3.ab2@19755>   MOVE.l (A7)+,destbufferend
0003D5FC <AmiBlitz3.ab2@19756>   MOVE.l (A7)+,destpointer
0003D602 <AmiBlitz3.ab2@19757>   MOVE.w (A7)+,regnum
0003D608 <AmiBlitz3.ab2@19758> JMP reget
0003D60C <AmiBlitz3.ab2@19761> oldlibat:   Ds.l 1
0003D612 <AmiBlitz3.ab2@19765>   LEA incdir,A0
0003D616 <AmiBlitz3.ab2@19768>   CMP.w #$22,D0
0003D61A <AmiBlitz3.ab2@19769>    BEQ.w JL_0_C052
0003D61C <AmiBlitz3.ab2@19770>   MOVE.b D0,(A0)+
0003D61E <AmiBlitz3.ab2@19771>   TST.w D0
0003D622 <AmiBlitz3.ab2@19772>    BEQ.w JL_0_C05A
0003D626 <AmiBlitz3.ab2@19773>    BMI.w syntaxerr
0003D62C <AmiBlitz3.ab2@19776>   JSR get1bytemain                                         ;_long
0003D630 <AmiBlitz3.ab2@19777> BRA.w JL_0_C03E
0003D632 <AmiBlitz3.ab2@19780> RTS
0003D638 <AmiBlitz3.ab2@19784>   LEA ptr_parameterstore,A1                                ;getparameter
0003D63E <AmiBlitz3.ab2@19785>   LEA incdir,A0
0003D640 <AmiBlitz3.ab2@19786>   MOVEQ.l #-$01,D2
0003D642 <AmiBlitz3.ab2@19789>     ADDQ.w #1,D2
0003D644 <AmiBlitz3.ab2@19790>     MOVE.b (A0)+,(A1)+
0003D648 <AmiBlitz3.ab2@19791>   BNE.w JL_0_C06A
0003D64A <AmiBlitz3.ab2@19792>   SUBQ.w #1,A1
0003D654 <AmiBlitz3.ab2@19794>   MOVE.w oldqflag,instringon
0003D65A <AmiBlitz3.ab2@19795>   MOVEA.l lastsourcepos,A5
0003D660 <AmiBlitz3.ab2@19799>   JSR get1bytemain
0003D662 <AmiBlitz3.ab2@19800>   TST.w D0
0003D666 <AmiBlitz3.ab2@19801>    BMI.w syntaxerr
0003D66A <AmiBlitz3.ab2@19802>   CMP.b #$22,D0
0003D66E <AmiBlitz3.ab2@19803>    BEQ.w JL_0_C078
0003D670 <AmiBlitz3.ab2@19804>   MOVE.b D0,(A1)+
0003D674 <AmiBlitz3.ab2@19805>    BEQ.w JL_0_C096
0003D676 <AmiBlitz3.ab2@19806>   ADDQ.w #1,D2
0003D67A <AmiBlitz3.ab2@19807> BRA.w JL_0_C078
0003D67C <AmiBlitz3.ab2@19810>   TST.w D2
0003D680 <AmiBlitz3.ab2@19811>    BEQ.w syntaxerr
0003D682 <AmiBlitz3.ab2@19812> RTS
0003D688 <AmiBlitz3.ab2@19816>   MOVEA.l constantbase,A2
0003D68C <AmiBlitz3.ab2@19817>   MOVEA.l $E(A2),A5
0003D692 <AmiBlitz3.ab2@19818>   MOVE.l a5,includesourceline
0003D698 <AmiBlitz3.ab2@19819>   LEA inctab,a0
0003D69E <AmiBlitz3.ab2@19820>   MOVE.w ininclude,d0
0003D6A2 <AmiBlitz3.ab2@19821>   MOVE.l $0(a0,d0*4),d0
0003D6A6 <AmiBlitz3.ab2@19822>   MOVEA.l $4(A2),A0
0003D6AA <AmiBlitz3.ab2@19824>   LEA $0(A0,D0.l),A0
0003D6AC <AmiBlitz3.ab2@19825>   MOVEA.l A5,A1
0003D6AE <AmiBlitz3.ab2@19828>     CMPA.l A0,A1
0003D6B2 <AmiBlitz3.ab2@19829>      BCC.w JL_0_C0C6
0003D6B4 <AmiBlitz3.ab2@19830>   TST.b (A1)+
0003D6B8 <AmiBlitz3.ab2@19831>   BNE.w JL_0_C0B6
0003D6BC <AmiBlitz3.ab2@19832> BRA.w JL_0_C112
0003D6C0 <AmiBlitz3.ab2@19835>   MOVEA.l $4(A2),A1
0003D6C2 <AmiBlitz3.ab2@19838>   CMPA.l A0,A5
0003D6C6 <AmiBlitz3.ab2@19839>   BCC.w JL_0_C0D6
0003D6C8 <AmiBlitz3.ab2@19840>   MOVE.b (A5)+,(A1)+
0003D6CC <AmiBlitz3.ab2@19841> BRA.w JL_0_C0CA
0003D6CE <AmiBlitz3.ab2@19844>   MOVE.l A1,D0
0003D6D2 <AmiBlitz3.ab2@19845>   SUB.l $4(A2),D0
0003D6D8 <AmiBlitz3.ab2@19846>   LEA inctab,a0
0003D6DA <AmiBlitz3.ab2@19847>   MOVEQ #0,d1
0003D6E0 <AmiBlitz3.ab2@19848>   MOVE.w ininclude,d1
0003D6E4 <AmiBlitz3.ab2@19849>   MOVE.l d0,0(a0,d1*4)
0003D6EA <AmiBlitz3.ab2@19851>   MOVEA.l _dosbase,A6
0003D6EE <AmiBlitz3.ab2@19852>   MOVE.l $8(A2),D1
0003D6F0 <AmiBlitz3.ab2@19853>   MOVE.l A1,D2
0003D6F6 <AmiBlitz3.ab2@19854>   MOVE.l D2,include_base
0003D6FC <AmiBlitz3.ab2@19856>   MOVE.l #$10000000,d3                                     ;load whole file
0003D6FE <AmiBlitz3.ab2@19857>   SUB.l D0,D3
0003D702 <AmiBlitz3.ab2@19858>    JSR _Read(A6)
0003D704 <AmiBlitz3.ab2@19859>   TST.l D0
0003D708 <AmiBlitz3.ab2@19860>    BMI.w error_reading_file
0003D70C <AmiBlitz3.ab2@19861>    BEQ.w JL_0_C120
0003D712 <AmiBlitz3.ab2@19862>    MOVE.l D0,include_length
0003D754 <AmiBlitz3.ab2@19863>    !ComData_GetL{comPtr_PreProcessor,include_preprocessor}
0003D77E <AmiBlitz3.ab2@19864>    !basic
0003D78E <AmiBlitz3.ab2@19865>    ilen.l  = Peek.l(?include_length)
0003D79E <AmiBlitz3.ab2@19866>    ibase.l = Peek.l(?include_base)
0003D7AE <AmiBlitz3.ab2@19867>    ido.l   = Peek.l(?include_process)
0003D7BE <AmiBlitz3.ab2@19868>    *tn.preprocessor = Peek.l(?include_preprocessor)
0003D7C8 <AmiBlitz3.ab2@19869>    If ido
0003D7DA <AmiBlitz3.ab2@19870>      ioffset.l = SkipXtraHeader{ibase,ilen}
0003D800 <AmiBlitz3.ab2@19871>      nilen.l = preproc_Tokenize{*tn,ibase+ioffset,ibase,ilen-ioffset}
0003D812 <AmiBlitz3.ab2@19872>      If nilen>0
0003D822 <AmiBlitz3.ab2@19876>        Poke.l ?include_length,nilen
0003D840 <AmiBlitz3.ab2@19879>    !asm
0003D84A <AmiBlitz3.ab2@19880>    MOVE.l #0,include_process
0003D850 <AmiBlitz3.ab2@19881>    MOVE.l include_length,D0
0003D856 <AmiBlitz3.ab2@19882>    LEA inctab,a0
0003D858 <AmiBlitz3.ab2@19883>    MOVEQ #0,d1
0003D85E <AmiBlitz3.ab2@19884>    MOVE.w ininclude,d1
0003D862 <AmiBlitz3.ab2@19885>    ADD.l d0,0(a0,d1*4)
0003D866 <AmiBlitz3.ab2@19887>   MOVEA.l $4(A2),A5
0003D86A <AmiBlitz3.ab2@19889>    MOVE.l 0(a0,d1*4),d0
0003D86E <AmiBlitz3.ab2@19890>   CLR.b $0(A5,D0.l)
0003D870 <AmiBlitz3.ab2@19893>   MOVEA.l A5,A0
0003D872 <AmiBlitz3.ab2@19896>     TST.b (A0)+
0003D876 <AmiBlitz3.ab2@19897>   BNE.w JL_0_C114
0003D87A <AmiBlitz3.ab2@19898>   MOVE.l A0,$E(A2)
0003D87C <AmiBlitz3.ab2@19899> RTS
0003D880 <AmiBlitz3.ab2@19902> include_length:        Dc.l 0                              ; for tokenizer!
0003D884 <AmiBlitz3.ab2@19903> include_base:          Dc.l 0
0003D888 <AmiBlitz3.ab2@19904> include_process:       Dc.l 0
0003D88C <AmiBlitz3.ab2@19905> include_preprocessor:  Dc.l 0
0003D890 <AmiBlitz3.ab2@19909>   MOVE.l $8(A2),D1
0003D896 <AmiBlitz3.ab2@19911>   MOVEA.l _dosbase,A6
0003D89A <AmiBlitz3.ab2@19912>   JSR _Close(a6)
0003D8A0 <AmiBlitz3.ab2@19913>   MOVEA.l _execbase,A6
0003D8A4 <AmiBlitz3.ab2@19914>   MOVEA.l $4(A2),A1
0003D8AA <AmiBlitz3.ab2@19915>   MOVE.l #$400*8,D0                                        ;exit include
0003D8AE <AmiBlitz3.ab2@19917>   JSR _FreeVec(a6)
0003D8B4 <AmiBlitz3.ab2@19920>   MOVE.l (A2),constantbase
0003D8B6 <AmiBlitz3.ab2@19921>   MOVEA.l A2,A1
0003D8B8 <AmiBlitz3.ab2@19922>   MOVEQ.l #$00,D0
0003D8BC <AmiBlitz3.ab2@19923>   MOVE.b $12(A2),D0
0003D8C2 <AmiBlitz3.ab2@19924>   MOVEA.l _execbase,A6
0003D8C8 <AmiBlitz3.ab2@19925>   MOVE.l mempool2,a0
0003D8CC <AmiBlitz3.ab2@19926>   JSR _FreePooled(A6)
0003D8D2 <AmiBlitz3.ab2@19927>   JSR zero_includename
0003D8D8 <AmiBlitz3.ab2@19928>   SUBQ.w #1,ininclude
0003D8DC <AmiBlitz3.ab2@19929>   BNE.w AJL_0_C09E
0003D8E2 <AmiBlitz3.ab2@19932>   LEA _include,a0
0003D8E6 <AmiBlitz3.ab2@19933>   MOVEM.l a0-a6/d0-d7,-(a7)
0003D8EC <AmiBlitz3.ab2@19934>   LEA ptr_parameterstore,a1
0003D8EE <AmiBlitz3.ab2@19937>     MOVE.b (a0)+,(a1)+
0003D8F2 <AmiBlitz3.ab2@19938>   BNE 'l1b
0003D8F4 <AmiBlitz3.ab2@19939>   MOVEQ #9,d2
0003D8FA <AmiBlitz3.ab2@19940>   JSR findlabel2
0003D8FE <AmiBlitz3.ab2@19941>   BNE 'd
0003D902 <AmiBlitz3.ab2@19942>   CLR.l 8(a2)
0003D906 <AmiBlitz3.ab2@19945>   MOVEM.l (a7)+,a0-a6/d0-d7
0003D908 <AmiBlitz3.ab2@19946> RTS
0003D90E <AmiBlitz3.ab2@19950>   MOVE.l unusedfunc,d0
0003D912 <AmiBlitz3.ab2@19951>   BEQ 'noclear
0003D916 <AmiBlitz3.ab2@19952>   MOVEM.l d0-d2/a0-a1/a6,-(a7)
0003D918 <AmiBlitz3.ab2@19955>     MOVE.l d0,a1
0003D91C <AmiBlitz3.ab2@19956>     MOVE.l 4(a1),d0
0003D91E <AmiBlitz3.ab2@19957>     MOVE.l (a1),d2
0003D924 <AmiBlitz3.ab2@19958>     MOVE.l _execbase,a6
0003D928 <AmiBlitz3.ab2@19959>     JSR _FreeMem(a6)
0003D92A <AmiBlitz3.ab2@19960>     MOVE.l d2,d0
0003D92E <AmiBlitz3.ab2@19961>   BNE 'f1
0003D934 <AmiBlitz3.ab2@19962>   CLR.l unusedfunc
0003D938 <AmiBlitz3.ab2@19963>   MOVEM.l (a7)+,a0-a1/a6/d0-d2
0003D93A <AmiBlitz3.ab2@19966> RTS
0003D940 <AmiBlitz3.ab2@19970>   MOVEA.l xinclude_base,A2
0003D946 <AmiBlitz3.ab2@19971>   CLR.l xinclude_base
0003D94A <AmiBlitz3.ab2@19974>     CMPA.w #$0,A2
0003D94E <AmiBlitz3.ab2@19975>      BEQ.w JL_0_C186
0003D950 <AmiBlitz3.ab2@19976>     MOVEQ.l #$00,D0
0003D954 <AmiBlitz3.ab2@19977>     MOVE.b 4+8(A2),D0
0003D956 <AmiBlitz3.ab2@19978>     MOVEA.l A2,A1
0003D958 <AmiBlitz3.ab2@19979>     MOVEA.l (A2),A2
0003D95E <AmiBlitz3.ab2@19980>     MOVEA.l _execbase,A6
0003D964 <AmiBlitz3.ab2@19981>     MOVE.l mempool2,a0
0003D968 <AmiBlitz3.ab2@19982>     JSR _FreePooled(A6)
0003D96C <AmiBlitz3.ab2@19983> BRA.w JL_0_C168
0003D96E <AmiBlitz3.ab2@19986> RTS
0003D974 <AmiBlitz3.ab2@19990>   MOVEA.l constantbase,A2
0003D97A <AmiBlitz3.ab2@19991>   CLR.l constantbase
0003D97E <AmiBlitz3.ab2@19994>     CMPA.w #$0,A2
0003D982 <AmiBlitz3.ab2@19995>      BEQ.w JL_0_C1DC
0003D986 <AmiBlitz3.ab2@19996>     MOVE.l $8(A2),D1
0003D98A <AmiBlitz3.ab2@19997>      BEQ.w JL_0_C1AE
0003D990 <AmiBlitz3.ab2@19998>     MOVEA.l _dosbase,A6
0003D994 <AmiBlitz3.ab2@19999>      JSR _Close(A6)
0003D998 <AmiBlitz3.ab2@20002>     MOVE.l $4(A2),D0
0003D99C <AmiBlitz3.ab2@20003>      BEQ.w JL_0_C1C6
0003D99E <AmiBlitz3.ab2@20004>     MOVEA.l D0,A1
0003D9A4 <AmiBlitz3.ab2@20005>     MOVE.l #$400*8,D0
0003D9AA <AmiBlitz3.ab2@20006>     MOVEA.l _execbase,A6
0003D9B0 <AmiBlitz3.ab2@20007>     MOVE.l mempool,a0
0003D9B4 <AmiBlitz3.ab2@20008>     JSR _FreeVec(a6)
0003D9B6 <AmiBlitz3.ab2@20011>     MOVEQ.l #$00,D0
0003D9BA <AmiBlitz3.ab2@20012>     MOVE.b $12(A2),D0
0003D9BC <AmiBlitz3.ab2@20013>     MOVEA.l A2,A1
0003D9BE <AmiBlitz3.ab2@20014>     MOVEA.l (A2),A2
0003D9C4 <AmiBlitz3.ab2@20015>     MOVEA.l _execbase,A6
0003D9CA <AmiBlitz3.ab2@20016>     MOVE.l mempool2,a0
0003D9CE <AmiBlitz3.ab2@20017>     JSR _FreePooled(A6)
0003D9D2 <AmiBlitz3.ab2@20018> BRA.w JL_0_C194
0003D9D4 <AmiBlitz3.ab2@20021> RTS
0003D9D6 <AmiBlitz3.ab2@20025>   SWAP D0
0003D9DA <AmiBlitz3.ab2@20026>    BSR.w JL_0_C1E6
0003D9DC <AmiBlitz3.ab2@20027>   SWAP D0
0003D9E2 <AmiBlitz3.ab2@20030>   MOVEA.l data2,A4
0003D9E8 <AmiBlitz3.ab2@20031>   CMPA.l allat,A4
0003D9EC <AmiBlitz3.ab2@20032>    BCC.w JL_0_C200
0003D9EE <AmiBlitz3.ab2@20033>   MOVE.w D0,(A4)+
0003D9F4 <AmiBlitz3.ab2@20034>   MOVE.l A4,data2
0003D9F6 <AmiBlitz3.ab2@20035> RTS
0003D9FE <AmiBlitz3.ab2@20038>   MOVE.w #$FFFF,dontwrite
0003DA04 <AmiBlitz3.ab2@20039>   ADDQ.l #2,data2
0003DA06 <AmiBlitz3.ab2@20040> RTS
0003DA0C <AmiBlitz3.ab2@20044>   MOVEA.l data2,A4
0003DA12 <AmiBlitz3.ab2@20045>   CMPA.l allat,A4
0003DA16 <AmiBlitz3.ab2@20046>    BCC.w JL_0_C22A
0003DA18 <AmiBlitz3.ab2@20047>   MOVE.b D0,(A4)+
0003DA1E <AmiBlitz3.ab2@20048>   MOVE.l A4,data2
0003DA20 <AmiBlitz3.ab2@20049> RTS
0003DA28 <AmiBlitz3.ab2@20052>   MOVE.w #$FFFF,dontwrite
0003DA2E <AmiBlitz3.ab2@20053>   ADDQ.l #1,data2
0003DA30 <AmiBlitz3.ab2@20054> RTS
0003DA34 <AmiBlitz3.ab2@20058>   CMP.w #$22,D0
0003DA38 <AmiBlitz3.ab2@20059>    BNE.w syntaxerr
0003DA3E <AmiBlitz3.ab2@20063>   JSR get1bytemain
0003DA42 <AmiBlitz3.ab2@20064>   CMP.b #$22,D0
0003DA46 <AmiBlitz3.ab2@20065>    BEQ.w JL_0_C25A
0003DA48 <AmiBlitz3.ab2@20066>   TST.w D0
0003DA4C <AmiBlitz3.ab2@20067>    BEQ.w syntaxerr
0003DA4E <AmiBlitz3.ab2@20068>   MOVE.b D0,(A0)+
0003DA52 <AmiBlitz3.ab2@20069> BRA.w JL_0_C242
0003DA54 <AmiBlitz3.ab2@20072>   CLR.b (A0)
0003DA56 <AmiBlitz3.ab2@20073> RTS
0003DA58 <AmiBlitz3.ab2@20076>   TST.l D3
0003DA5A <AmiBlitz3.ab2@20077> RTS
0003DA60 <AmiBlitz3.ab2@20080>   LEA ptr_parameterstore,A0
0003DA66 <AmiBlitz3.ab2@20081>   LEA namebuff2,A1
0003DA68 <AmiBlitz3.ab2@20084>     MOVE.b (A0)+,D0
0003DA6C <AmiBlitz3.ab2@20085>     BEQ.w JL_0_C27C
0003DA6E <AmiBlitz3.ab2@20086>   CMP.b (A1)+,D0
0003DA72 <AmiBlitz3.ab2@20087>   BEQ.w JL_0_C26E
0003DA74 <AmiBlitz3.ab2@20088> RTS
0003DA76 <AmiBlitz3.ab2@20091>   TST.b (A1)
0003DA7A <AmiBlitz3.ab2@20092>   BNE.w JL_0_C284
0003DA7C <AmiBlitz3.ab2@20093> RTS
0003DA80 <AmiBlitz3.ab2@20096>   CMP.w #$1,D0
0003DA82 <AmiBlitz3.ab2@20097> RTS
0003DA86 <AmiBlitz3.ab2@20101>   CMP.w #$2E,D0                                            ;dodeftype
0003DA8A <AmiBlitz3.ab2@20102>    BNE.w syntaxerr
0003DA8E <AmiBlitz3.ab2@20103>   BSR.w getparameter2
0003DA94 <AmiBlitz3.ab2@20104>   LEA newtypebase,A2
0003DA98 <AmiBlitz3.ab2@20105>   BSR.w findtype
0003DA9C <AmiBlitz3.ab2@20106>    BNE.w notypeerr
0003DAA2 <AmiBlitz3.ab2@20107>   TST.b declare
0003DAA6 <AmiBlitz3.ab2@20108>    BNE 'l1
0003DAAC <AmiBlitz3.ab2@20109>   TST.b declare2
0003DAB0 <AmiBlitz3.ab2@20110>    BEQ 'l2
0003DAB8 <AmiBlitz3.ab2@20113>   MOVE.b #2,nowdeclare
0003DABE <AmiBlitz3.ab2@20117>   JSR reget
0003DAC2 <AmiBlitz3.ab2@20118>    BNE.w JL_0_C2B4
0003DAC8 <AmiBlitz3.ab2@20119>   MOVE.l A2,defaulttype
0003DACA <AmiBlitz3.ab2@20120> RTS
0003DAD0 <AmiBlitz3.ab2@20123>   MOVE.l defaulttype,-(A7)
0003DAD6 <AmiBlitz3.ab2@20124>   MOVE.l A2,defaulttype
0003DADA <AmiBlitz3.ab2@20127>   BSR.w getparameter
0003DADE <AmiBlitz3.ab2@20128>    BSR.w JL_0_8E3C
0003DAE2 <AmiBlitz3.ab2@20129>   CMP.w #$2C,D0
0003DAE6 <AmiBlitz3.ab2@20130>    BNE.w JL_0_C2D8
0003DAEC <AmiBlitz3.ab2@20131>    JSR get1bytemain                                        ; was BSR.w
0003DAF0 <AmiBlitz3.ab2@20132> BRA.w JL_0_C2C0
0003DAF6 <AmiBlitz3.ab2@20135>   MOVE.l (A7)+,defaulttype
0003DAF8 <AmiBlitz3.ab2@20136> RTS
0003DAFC <AmiBlitz3.ab2@20140>   LEA $4(A5),A2                                            ;fehler function
0003DAFE <AmiBlitz3.ab2@20143>   MOVE.l A2,D0
0003DB02 <AmiBlitz3.ab2@20146>   BSR.w getparameter
0003DB06 <AmiBlitz3.ab2@20147>   BSR.w JL_0_8E3C
0003DB0A <AmiBlitz3.ab2@20148>   BSR.w calcvar
0003DB0E <AmiBlitz3.ab2@20149>   CMP.b #$7,D2
0003DB12 <AmiBlitz3.ab2@20150>    BNE.w mismatcherr
0003DB16 <AmiBlitz3.ab2@20151>   MOVE.w varmode(PC),-(A7)
0003DB1A <AmiBlitz3.ab2@20152>   CMP.w #$3D,D0
0003DB1E <AmiBlitz3.ab2@20153>    BNE.w syntaxerr
0003DB22 <AmiBlitz3.ab2@20154>   BTST #$F,D2
0003DB26 <AmiBlitz3.ab2@20155>    BNE.w JL_0_C31C
0003DB2A <AmiBlitz3.ab2@20156>   MOVE.w JL_0_C2E0(PC),D1
0003DB2E <AmiBlitz3.ab2@20157>   BSR.w pokewda5s
0003DB30 <AmiBlitz3.ab2@20158>   MOVE.w D3,D1
0003DB34 <AmiBlitz3.ab2@20159>   BSR.w writeword
0003DB38 <AmiBlitz3.ab2@20162>   MOVE.w L_0_C2E4(PC),D1
0003DB3C <AmiBlitz3.ab2@20163>   BSR.w writeword
0003DB42 <AmiBlitz3.ab2@20164>   ADDQ.w #1,regnum
0003DB44 <AmiBlitz3.ab2@20165>   MOVEQ.l #$03,D2
0003DB48 <AmiBlitz3.ab2@20166>   BSR.w eval
0003DB4E <AmiBlitz3.ab2@20167>   MOVE.l #$D000,D1
0003DB54 <AmiBlitz3.ab2@20168>   MOVE.l d1,lastinstruction
0003DB56 <AmiBlitz3.ab2@20169>   TST.w (A7)+
0003DB5A <AmiBlitz3.ab2@20170>    BEQ.w Atokejsr
0003DB5C <AmiBlitz3.ab2@20171>   ADDQ.w #1,D1
0003DB60 <AmiBlitz3.ab2@20172> BRA.w Atokejsr
0003DB62 <AmiBlitz3.ab2@20176>   MOVE.w D0,D1
0003DB66 <AmiBlitz3.ab2@20177>    BPL.w syntaxerr
0003DB6A <AmiBlitz3.ab2@20178>   BCLR #$F,D1
0003DB70 <AmiBlitz3.ab2@20179>    JSR searchinstr
0003DB74 <AmiBlitz3.ab2@20180>   MOVE.l $12(A2),D0
0003DB78 <AmiBlitz3.ab2@20181>   TST.w -$2(A2,D0.L)
0003DB7C <AmiBlitz3.ab2@20182>    BEQ.w freeerr
0003DB7E <AmiBlitz3.ab2@20183>   MOVEQ.l #$02,D2
0003DB80 <AmiBlitz3.ab2@20184>   MOVE.l A2,-(A7)
0003DB84 <AmiBlitz3.ab2@20185>    BSR.w eval
0003DB86 <AmiBlitz3.ab2@20186>   MOVEA.l (A7)+,A2
0003DB8C <AmiBlitz3.ab2@20187>   MOVE.l A2,mymaxlib
0003DB90 <AmiBlitz3.ab2@20188>   ADDA.l $12(A2),A2
0003DB96 <AmiBlitz3.ab2@20189>   TST.b debugmode
0003DB9A <AmiBlitz3.ab2@20190>    BEQ.w JL_0_C3A8
0003DBA0 <AmiBlitz3.ab2@20191>   MOVE.w regnum,D1
0003DBA2 <AmiBlitz3.ab2@20192>   LSL.w #8,D1
0003DBA4 <AmiBlitz3.ab2@20193>   LSL.w #1,D1
0003DBA8 <AmiBlitz3.ab2@20194>   ORI.w #$B07C,D1
0003DBAC <AmiBlitz3.ab2@20195>    BSR.w writeword
0003DBB0 <AmiBlitz3.ab2@20196>   MOVE.w -$4(A2),D1
0003DBB4 <AmiBlitz3.ab2@20197>    BSR.w writeword
0003DBBA <AmiBlitz3.ab2@20198>   MOVE.l maxchk,D1
0003DBBE <AmiBlitz3.ab2@20199>    BSR.w writelong
0003DBC0 <AmiBlitz3.ab2@20200>   MOVE.l A2,-(A7)
0003DBC4 <AmiBlitz3.ab2@20201>   MOVE.w #$C30A,D1
0003DBC8 <AmiBlitz3.ab2@20202>    BSR.w Atokejsr
0003DBCA <AmiBlitz3.ab2@20203>   MOVEA.l (A7)+,A2
0003DBCE <AmiBlitz3.ab2@20206>   MOVE.w -$2(A2),D2
0003DBD4 <AmiBlitz3.ab2@20209>   MOVE.w regnum,D1
0003DBDA <AmiBlitz3.ab2@20210>   OR.w lslimm,D1
0003DBDE <AmiBlitz3.ab2@20211>   CMP.w #$8,D2
0003DBE2 <AmiBlitz3.ab2@20212>    BCS.w JL_0_C3CE
0003DBE6 <AmiBlitz3.ab2@20213>    BSR.w writeword
0003DBE8 <AmiBlitz3.ab2@20214>   SUBQ.w #8,D2
0003DBEC <AmiBlitz3.ab2@20215>    BNE.w JL_0_C3AC
0003DBF0 <AmiBlitz3.ab2@20216> BRA.w JL_0_C3DA
0003DBF2 <AmiBlitz3.ab2@20219>   MOVE.w D2,D0
0003DBF4 <AmiBlitz3.ab2@20220>   LSL.w #8,D0
0003DBF6 <AmiBlitz3.ab2@20221>   LSL.w #1,D0
0003DBF8 <AmiBlitz3.ab2@20222>   OR.w D0,D1
0003DBFC <AmiBlitz3.ab2@20223>   BSR.w writeword
0003DBFE <AmiBlitz3.ab2@20226> RTS
0003DC02 <AmiBlitz3.ab2@20231>   Dc.b $26,$6D,$00,$00                                     ;MOVEA.L $0000(A5),A3
0003DC04 <AmiBlitz3.ab2@20232>   Dc.b $D6,$C0                                             ;ADDA.W  D0,A3
0003DC08 <AmiBlitz3.ab2@20236> mymaxlib:  Ds.l 1
0003DC0C <AmiBlitz3.ab2@20240>   BSR.w JL_0_C340
0003DC10 <AmiBlitz3.ab2@20241>   LEA free(PC),A0
0003DC14 <AmiBlitz3.ab2@20242>   LEA freef(PC),A1
0003DC1A <AmiBlitz3.ab2@20243>   MOVE.w -$6(A2),$2(A0)
0003DC1E <AmiBlitz3.ab2@20244>   BSR.w pokecode
0003DC22 <AmiBlitz3.ab2@20245>   MOVE.l -$A(A2),D1
0003DC26 <AmiBlitz3.ab2@20248>   BEQ.w nosuperr
0003DC2A <AmiBlitz3.ab2@20249>   MOVEA.l mymaxlib(PC),A2
0003DC2E <AmiBlitz3.ab2@20250> BRA.w Amakelibsub
0003DC32 <AmiBlitz3.ab2@20255>   BSR.w JL_0_C340
0003DC38 <AmiBlitz3.ab2@20256>   LEA use,A0
0003DC3E <AmiBlitz3.ab2@20257>   LEA usef,A1
0003DC44 <AmiBlitz3.ab2@20258>   MOVE.w -$6(A2),$2(A0)
0003DC4A <AmiBlitz3.ab2@20259>   MOVE.w -$6(A2),-$2(A1)
0003DC4E <AmiBlitz3.ab2@20260>   ADDQ.w #4,-$2(A1)
0003DC52 <AmiBlitz3.ab2@20261>   BSR.w pokecode
0003DC56 <AmiBlitz3.ab2@20262>   MOVE.l -$E(A2),D1
0003DC5A <AmiBlitz3.ab2@20263> BRA.w maxjsr
0003DC60 <AmiBlitz3.ab2@20267>   JSR get1bytemain
0003DC66 <AmiBlitz3.ab2@20271>   MOVE.l firstiff,D0
0003DC6A <AmiBlitz3.ab2@20272>    BEQ.w noiferr
0003DC6C <AmiBlitz3.ab2@20273>   MOVEA.l D0,A0
0003DC72 <AmiBlitz3.ab2@20274>   CMPI.b #$1,$D(A0)
0003DC76 <AmiBlitz3.ab2@20275>    BEQ.w illelseerr
0003DC7A <AmiBlitz3.ab2@20276>   MOVE.w #$6000,D1
0003DC80 <AmiBlitz3.ab2@20278>     TST.b fast
0003DC84 <AmiBlitz3.ab2@20279>     BEQ 'l1
0003DC8A <AmiBlitz3.ab2@20280>     OR.l #$ff,d1
0003DC8E <AmiBlitz3.ab2@20281>     BSR writeword
0003DC90 <AmiBlitz3.ab2@20285>   SWAP D1
0003DC94 <AmiBlitz3.ab2@20286>   BSR.w writelong
0003DC96 <AmiBlitz3.ab2@20287>   MOVEQ.l #$00,D1
0003DC9A <AmiBlitz3.ab2@20288>   BSR.w AJL_0_D7B8
0003DCA2 <AmiBlitz3.ab2@20289>   MOVE.l destpointer,$8(A0)
0003DCA6 <AmiBlitz3.ab2@20290> BRA.w do_then
0003DCAC <AmiBlitz3.ab2@20294>   LEA ptr_parameterstore,A0
0003DCAE <AmiBlitz3.ab2@20295>   MOVE.l A0,-(A7)
0003DCB2 <AmiBlitz3.ab2@20296>   BSR.w JL_0_C23A
0003DCB6 <AmiBlitz3.ab2@20297> BRA.w handle_compileerror
0003DCBA <AmiBlitz3.ab2@20301>   BSR.w JL_0_BF6A
0003DCBC <AmiBlitz3.ab2@20302>   MOVEQ.l #$05,D1
0003DCC6 <AmiBlitz3.ab2@20304>   MOVE.w oldqflag,instringon
0003DCCC <AmiBlitz3.ab2@20305>   MOVEA.l lastsourcepos,A5
0003DCD2 <AmiBlitz3.ab2@20306>   LEA AJL_0_C25E,A0
0003DCD6 <AmiBlitz3.ab2@20307> BRA.w JL_0_C4B4
0003DCDC <AmiBlitz3.ab2@20311>   LEA ptr_parameterstore,A0
0003DCE0 <AmiBlitz3.ab2@20312>   BSR.w JL_0_C23A
0003DCE6 <AmiBlitz3.ab2@20313>   JSR get1bytemain
0003DCEA <AmiBlitz3.ab2@20314>   BSR.w JL_0_CCA8
0003DCF0 <AmiBlitz3.ab2@20315>   LEA namebuff2,A0
0003DCF4 <AmiBlitz3.ab2@20316>   BSR.w JL_0_C23A
0003DCFA <AmiBlitz3.ab2@20317>   LEA AJL_0_C262,A0
0003DCFC <AmiBlitz3.ab2@20320>   LSL.w #2,D1
0003DD02 <AmiBlitz3.ab2@20321>   LEA CIF_branches,A1
0003DD06 <AmiBlitz3.ab2@20322>   MOVE.l $0(A1,D1.W),-(A7)
0003DD08 <AmiBlitz3.ab2@20323>   MOVEQ.l #-$01,D1
0003DD0A <AmiBlitz3.ab2@20326>   JSR (A0)
0003DD0C <AmiBlitz3.ab2@20327>   MOVEA.l (A7)+,A1
0003DD0E <AmiBlitz3.ab2@20330> JMP (A1)
0003DD12 <AmiBlitz3.ab2@20334>   BEQ.w JL_0_C4F6
0003DD16 <AmiBlitz3.ab2@20335> BRA.w JL_0_C4F4
0003DD1A <AmiBlitz3.ab2@20339>   BNE.w JL_0_C4F6
0003DD1E <AmiBlitz3.ab2@20340> BRA.w JL_0_C4F4
0003DD22 <AmiBlitz3.ab2@20344>   BLT.w JL_0_C4F6
0003DD26 <AmiBlitz3.ab2@20345> BRA.w JL_0_C4F4
0003DD2A <AmiBlitz3.ab2@20349>   BLE.w JL_0_C4F6
0003DD2E <AmiBlitz3.ab2@20350> BRA.w JL_0_C4F4
0003DD32 <AmiBlitz3.ab2@20354>   BGT.w JL_0_C4F6
0003DD36 <AmiBlitz3.ab2@20355> BRA.w JL_0_C4F4
0003DD3A <AmiBlitz3.ab2@20359>   BGE.w JL_0_C4F6
0003DD3C <AmiBlitz3.ab2@20362>   MOVEQ.l #$00,D1
0003DD42 <AmiBlitz3.ab2@20365>   MOVEA.l concomsp,A0
0003DD48 <AmiBlitz3.ab2@20366>   MOVE.w skipcode,(A0)+
0003DD4E <AmiBlitz3.ab2@20367>   MOVE.l A0,concomsp
0003DD54 <AmiBlitz3.ab2@20368>   MOVE.w D1,skipcode
0003DD5A <AmiBlitz3.ab2@20369>   JSR get1bytemain
0003DD5E <AmiBlitz3.ab2@20370>    BNE.w syntaxerr
0003DD64 <AmiBlitz3.ab2@20371> JMP bakup
0003DD6C <AmiBlitz3.ab2@20375> rescode:   Dc.b $2B,$7c,$00,$00,$00,$00 :   Ds.w 1         ;MOVE.L  #$00000000,$0000(A5)
0003DD70 <AmiBlitz3.ab2@20376> rescode2:  Dc.b $2B,$40                 :   Ds.w 1         ;MOVE.L  D0,$0000(A5)
0003DD74 <AmiBlitz3.ab2@20383>   MOVE.w #$FC17,D1
0003DD7A <AmiBlitz3.ab2@20384>   JSR uselib
0003DD80 <AmiBlitz3.ab2@20386>   JSR reget
0003DD84 <AmiBlitz3.ab2@20387>    BEQ.w do_Restore__resbeg
0003DD88 <AmiBlitz3.ab2@20388>   BSR.w JL_0_AE22                                          ;get label name!
0003DD8C <AmiBlitz3.ab2@20389>   MOVE.w rescode(PC),D1
0003DD90 <AmiBlitz3.ab2@20390>   BSR.w writeword
0003DD96 <AmiBlitz3.ab2@20391>   JSR addoff                                               ;add offset
0003DD9A <AmiBlitz3.ab2@20392>   MOVE.l $C(A2),D1
0003DD9E <AmiBlitz3.ab2@20393>   BSR.w writelong
0003DDA2 <AmiBlitz3.ab2@20394>   MOVE.w rescode+6(PC),D1
0003DDA6 <AmiBlitz3.ab2@20395>   BSR.w writeword
0003DDAA <AmiBlitz3.ab2@20396>   MOVE.l $4(A2),D1                                         ;is it outstanding?
0003DDAE <AmiBlitz3.ab2@20397>   BEQ.w do_Restore__no
0003DDB0 <AmiBlitz3.ab2@20399>   MOVEA.l D1,A1
0003DDB4 <AmiBlitz3.ab2@20400>   ADDQ.l #1,$4(A1)                                         ;make odd - flag for data reference.
0003DDB6 <AmiBlitz3.ab2@20401> RTS
0003DDB8 <AmiBlitz3.ab2@20406> RTS
0003DDBC <AmiBlitz3.ab2@20409>   MOVE.w #$CD00,D1
0003DDC2 <AmiBlitz3.ab2@20410>   JSR Atokejsr
0003DDC6 <AmiBlitz3.ab2@20411>   MOVE.l rescode2(PC),D1
0003DDCC <AmiBlitz3.ab2@20412> JMP writelong
0003DDD0 <AmiBlitz3.ab2@20416>   MOVE.w #$FC17,D1
0003DDD6 <AmiBlitz3.ab2@20417>   JSR uselib
0003DDDC <AmiBlitz3.ab2@20420>   MOVE.l dataget,D1
0003DDE0 <AmiBlitz3.ab2@20421>   BSR.w writelong
0003DDE4 <AmiBlitz3.ab2@20422>   BSR.w getparameter
0003DDE8 <AmiBlitz3.ab2@20423>   BSR.w JL_0_8E3C
0003DDEC <AmiBlitz3.ab2@20424>   BSR.w calcvar
0003DDF0 <AmiBlitz3.ab2@20425>   BTST #$E,D2
0003DDF4 <AmiBlitz3.ab2@20426>    BEQ.w JL_0_C5A6
0003DDF8 <AmiBlitz3.ab2@20427>   MOVE.b #$6,D2
0003DDFA <AmiBlitz3.ab2@20430>   TST.b D2
0003DDFE <AmiBlitz3.ab2@20431>    BEQ.w noleterr
0003DE04 <AmiBlitz3.ab2@20432>   TST.b debugmode
0003DE08 <AmiBlitz3.ab2@20433>    BEQ.w JL_0_C5D0
0003DE0C <AmiBlitz3.ab2@20434>   MOVE.w #$7000,D1
0003DE0E <AmiBlitz3.ab2@20435>   MOVE.b D2,D1
0003DE12 <AmiBlitz3.ab2@20436>   ANDI.b #$F,D1
0003DE16 <AmiBlitz3.ab2@20437>   BSR.w writeword
0003DE1A <AmiBlitz3.ab2@20438>   MOVE.w #$C310,D1
0003DE1C <AmiBlitz3.ab2@20439>   MOVE.w D2,-(A7)
0003DE20 <AmiBlitz3.ab2@20440>   BSR.w Atokejsr
0003DE22 <AmiBlitz3.ab2@20441>   MOVE.w (A7)+,D2
0003DE26 <AmiBlitz3.ab2@20444>   CMP.b #$7,D2
0003DE2A <AmiBlitz3.ab2@20445>    BEQ.w JL_0_C684
0003DE2E <AmiBlitz3.ab2@20446>   CMP.b #$1,D2
0003DE32 <AmiBlitz3.ab2@20447>    BNE.w JL_0_C62A
0003DE38 <AmiBlitz3.ab2@20448>   LEA dataletb2,A0
0003DE3E <AmiBlitz3.ab2@20449>   LEA dataletb2f,A1
0003DE42 <AmiBlitz3.ab2@20450>   BTST #$F,D2
0003DE46 <AmiBlitz3.ab2@20451>    BEQ.w JL_0_C5FC
0003DE4A <AmiBlitz3.ab2@20452>   BSR.w pokecode
0003DE4E <AmiBlitz3.ab2@20453> BRA.w JL_0_C668
0003DE54 <AmiBlitz3.ab2@20456>   LEA dataletb,A0
0003DE5A <AmiBlitz3.ab2@20457>   LEA dataletbf,A1
0003DE60 <AmiBlitz3.ab2@20458>   TST.w varmode
0003DE64 <AmiBlitz3.ab2@20459>    BEQ.w JL_0_C61E
0003DE6A <AmiBlitz3.ab2@20460>   LEA dataletbl,A0
0003DE70 <AmiBlitz3.ab2@20461>   LEA dataletblf,A1
0003DE74 <AmiBlitz3.ab2@20464>   MOVE.w D3,$4(A0)
0003DE78 <AmiBlitz3.ab2@20465>   BSR.w pokecode
0003DE7C <AmiBlitz3.ab2@20466> BRA.w JL_0_C668
0003DE82 <AmiBlitz3.ab2@20469>   LEA dataletw,A0
0003DE86 <AmiBlitz3.ab2@20470>   CMP.b #$3,D2
0003DE8A <AmiBlitz3.ab2@20471>    BCS.w JL_0_C63E
0003DE90 <AmiBlitz3.ab2@20472>   LEA dataletl,A0
0003DE94 <AmiBlitz3.ab2@20475>   BTST #$F,D2
0003DE98 <AmiBlitz3.ab2@20476>    BEQ.w JL_0_C652
0003DE9C <AmiBlitz3.ab2@20477>   MOVE.w $4(A0),D1
0003DEA0 <AmiBlitz3.ab2@20478>    BSR.w writeword
0003DEA4 <AmiBlitz3.ab2@20479> BRA.w JL_0_C668
0003DEAA <AmiBlitz3.ab2@20482>   TST.w varmode
0003DEAE <AmiBlitz3.ab2@20483>    BEQ.w JL_0_C65E
0003DEB0 <AmiBlitz3.ab2@20484>   ADDQ.w #6,A0
0003DEB4 <AmiBlitz3.ab2@20487>   MOVE.w D3,$2(A0)
0003DEB6 <AmiBlitz3.ab2@20488>   MOVE.l (A0),D1
0003DEBA <AmiBlitz3.ab2@20489>   BSR.w writelong
0003DEC0 <AmiBlitz3.ab2@20492>   MOVE.l dataput,D1
0003DEC4 <AmiBlitz3.ab2@20493>    BSR.w writelong
0003DEC8 <AmiBlitz3.ab2@20494>   CMP.w #$2C,D0
0003DECC <AmiBlitz3.ab2@20495>    BEQ.w JL_0_C67C
0003DECE <AmiBlitz3.ab2@20496> RTS
0003DED4 <AmiBlitz3.ab2@20499>   JSR get1bytemain
0003DED8 <AmiBlitz3.ab2@20500> BRA.w JL_0_C584
0003DEDE <AmiBlitz3.ab2@20504>   MOVE.w stlenget,D1
0003DEE2 <AmiBlitz3.ab2@20505>    BSR.w writeword
0003DEE6 <AmiBlitz3.ab2@20506>   BTST #$F,D2
0003DEEA <AmiBlitz3.ab2@20507>    BNE.w JL_0_C6C0
0003DEF0 <AmiBlitz3.ab2@20508>   TST.w varmode
0003DEF4 <AmiBlitz3.ab2@20509>    BEQ.w JL_0_C6B0
0003DEFA <AmiBlitz3.ab2@20510>   MOVE.w D3,leaampl+2
0003DF00 <AmiBlitz3.ab2@20511>   MOVE.l leaampl,D1
0003DF04 <AmiBlitz3.ab2@20512> BRA.w JL_0_C6BC
0003DF0A <AmiBlitz3.ab2@20515>   MOVE.w D3,leaamp+2
0003DF10 <AmiBlitz3.ab2@20516>   MOVE.l leaamp,D1
0003DF14 <AmiBlitz3.ab2@20519>   BSR.w writelong
0003DF18 <AmiBlitz3.ab2@20522>   MOVE.w #$C701,D1
0003DF1E <AmiBlitz3.ab2@20523>   MOVE.w varmode,D2
0003DF22 <AmiBlitz3.ab2@20524>    BEQ.w JL_0_C6D0
0003DF24 <AmiBlitz3.ab2@20525>   SUBQ.w #1,D1
0003DF28 <AmiBlitz3.ab2@20528>   BSR.w Atokejsr
0003DF30 <AmiBlitz3.ab2@20529>   MOVE.w #$FFFF,lasta6
0003DF36 <AmiBlitz3.ab2@20530>   LEA stalign,A0
0003DF3C <AmiBlitz3.ab2@20531>   LEA stalignf,A1
0003DF40 <AmiBlitz3.ab2@20532>   BSR.w pokecode
0003DF44 <AmiBlitz3.ab2@20533> BRA.w JL_0_C668
0003DF48 <AmiBlitz3.ab2@20537>   CMP.w #$2E,D0                                            ;definecode 'lb 'lw 'll
0003DF4C <AmiBlitz3.ab2@20538>    BNE.w JL_0_C720
0003DF52 <AmiBlitz3.ab2@20539>   JSR get1bytemain
0003DF56 <AmiBlitz3.ab2@20540>   CMP.w #$77,D0
0003DF5A <AmiBlitz3.ab2@20541>    BEQ.w JL_0_C71C
0003DF5E <AmiBlitz3.ab2@20542>   CMP.w #$62,D0
0003DF62 <AmiBlitz3.ab2@20543>    BEQ.w JL_0_C718
0003DF66 <AmiBlitz3.ab2@20544>   CMP.w #"s",d0
0003DF6A <AmiBlitz3.ab2@20545>   BEQ single3
0003DF6E <AmiBlitz3.ab2@20546>   CMP.w #"d",d0
0003DF72 <AmiBlitz3.ab2@20547>   BEQ double3
0003DF76 <AmiBlitz3.ab2@20548>   CMP.w #$6C,D0
0003DF7A <AmiBlitz3.ab2@20549>    BNE.w syntaxerr
0003DF7C <AmiBlitz3.ab2@20550>   MOVEQ.l #$02,D1
0003DF7E <AmiBlitz3.ab2@20551> RTS
0003DF86 <AmiBlitz3.ab2@20555>   MOVE.b #1,iee
0003DF88 <AmiBlitz3.ab2@20556>   MOVEQ.l #$3,d1
0003DF8A <AmiBlitz3.ab2@20557> RTS
0003DF92 <AmiBlitz3.ab2@20561>   MOVE.b #1,iee
0003DF94 <AmiBlitz3.ab2@20562>   MOVEQ.l #$4,d1
0003DF96 <AmiBlitz3.ab2@20563> RTS
0003DF98 <AmiBlitz3.ab2@20567>   MOVEQ.l #$00,D1
0003DF9A <AmiBlitz3.ab2@20568> RTS
0003DF9C <AmiBlitz3.ab2@20572>   MOVEQ.l #$01,D1
0003DF9E <AmiBlitz3.ab2@20573> RTS
0003DFA0 <AmiBlitz3.ab2@20577>   MOVEQ.l #$01,D1
0003DFA6 <AmiBlitz3.ab2@20578> JMP bakup
0003DFAA <AmiBlitz3.ab2@20582>   BSR.w JL_0_C6F0
0003DFAC <AmiBlitz3.ab2@20584>   MOVE.w D1,-(A7)
0003DFB0 <AmiBlitz3.ab2@20585>    BSR.w AJL_0_BF6E
0003DFB4 <AmiBlitz3.ab2@20586>   CMP.w #$2C,D0
0003DFB8 <AmiBlitz3.ab2@20587>    BNE.w syntaxerr
0003DFBA <AmiBlitz3.ab2@20588>   MOVE.l D3,-(A7)
0003DFBE <AmiBlitz3.ab2@20589>    BSR.w AJL_0_BF6E
0003DFC0 <AmiBlitz3.ab2@20590>   MOVE.l D3,D1
0003DFC2 <AmiBlitz3.ab2@20591>   MOVE.l (A7)+,D3
0003DFC4 <AmiBlitz3.ab2@20592>   MOVE.w (A7)+,D2
0003DFC8 <AmiBlitz3.ab2@20593>    BEQ.w JL_0_C774
0003DFCC <AmiBlitz3.ab2@20597>   CMP.w #$1,D2
0003DFD0 <AmiBlitz3.ab2@20598>    BEQ.w JL_0_C768
0003DFD2 <AmiBlitz3.ab2@20601>   SWAP D1
0003DFD6 <AmiBlitz3.ab2@20602>    BSR.w writeword
0003DFD8 <AmiBlitz3.ab2@20603>   SWAP D1
0003DFDC <AmiBlitz3.ab2@20604>    BSR.w writeword
0003DFDE <AmiBlitz3.ab2@20605>   SUBQ.l #1,D3
0003DFE2 <AmiBlitz3.ab2@20606>    BNE.w JL_0_C754
0003DFE4 <AmiBlitz3.ab2@20607> RTS
0003DFE8 <AmiBlitz3.ab2@20610>    BSR.w writeword
0003DFEA <AmiBlitz3.ab2@20611>   SUBQ.l #1,D3
0003DFEE <AmiBlitz3.ab2@20612>    BNE.w JL_0_C768
0003DFF0 <AmiBlitz3.ab2@20613> RTS
0003DFF4 <AmiBlitz3.ab2@20616>    BSR.w writebyte
0003DFF6 <AmiBlitz3.ab2@20617>   SUBQ.l #1,D3
0003DFFA <AmiBlitz3.ab2@20618>    BNE.w JL_0_C774
0003DFFC <AmiBlitz3.ab2@20619> RTS
0003E000 <AmiBlitz3.ab2@20623>   BSR.w JL_0_C6F0                                          ;definestorage
0003E002 <AmiBlitz3.ab2@20624>   MOVE.w D1,-(A7)
0003E006 <AmiBlitz3.ab2@20625>   BSR.w AJL_0_BF6E
0003E008 <AmiBlitz3.ab2@20626>   MOVE.w (A7)+,D1
0003E00A <AmiBlitz3.ab2@20627>   LSL.l D1,D3
0003E00C <AmiBlitz3.ab2@20628>   MOVE.l d3,d0
0003E010 <AmiBlitz3.ab2@20629>   BEQ 'll5
0003E012 <AmiBlitz3.ab2@20630>   MOVEQ #0,d1
0003E018 <AmiBlitz3.ab2@20633>     JSR writebyte
0003E01A <AmiBlitz3.ab2@20634>     SUBQ.l #1,d3
0003E01E <AmiBlitz3.ab2@20635>   BNE.s 'll10
0003E020 <AmiBlitz3.ab2@20638> RTS
0003E022 <AmiBlitz3.ab2@20642>   MOVE.w D0,-(A7)
0003E028 <AmiBlitz3.ab2@20643>   LEA dummyasm,A0
0003E02E <AmiBlitz3.ab2@20644>   MOVEA.l destpointer,A1
0003E038 <AmiBlitz3.ab2@20645>   MOVE.w asmlen2,asmlen
0003E03E <AmiBlitz3.ab2@20646>   JSR insasm
0003E040 <AmiBlitz3.ab2@20647>   MOVE.w (A7)+,D0
0003E042 <AmiBlitz3.ab2@20648> RTS
0003E046 <AmiBlitz3.ab2@20652>   BSR.w JL_0_C6F0
0003E050 <AmiBlitz3.ab2@20654>   MOVE.l #ptr_parameterstore,asmbuff
0003E052 <AmiBlitz3.ab2@20655>   TST.w D1
0003E056 <AmiBlitz3.ab2@20656>    BEQ.w JL_0_C7EE
0003E05A <AmiBlitz3.ab2@20657>   CMP.w #$1,D1
0003E05E <AmiBlitz3.ab2@20658>    BEQ.w JL_0_C844
0003E062 <AmiBlitz3.ab2@20659>   CMP.w #$2,d1
0003E066 <AmiBlitz3.ab2@20660>    BEQ long
0003E06A <AmiBlitz3.ab2@20661>   CMP.w #$3,d1
0003E06E <AmiBlitz3.ab2@20662>    BEQ single
0003E070 <AmiBlitz3.ab2@20663>    MOVEQ.l #$0d,D3
0003E076 <AmiBlitz3.ab2@20669>    JSR asmconst
0003E07A <AmiBlitz3.ab2@20670>    BSR.w JL_0_C796
0003E07E <AmiBlitz3.ab2@20671>    BSR.w writelong
0003E082 <AmiBlitz3.ab2@20672>    BSR   writelong
0003E086 <AmiBlitz3.ab2@20673>   CMP.w #$2C,D0
0003E08A <AmiBlitz3.ab2@20674>    BEQ.w JL_0_C7D8b
0003E08C <AmiBlitz3.ab2@20675> RTS
0003E08E <AmiBlitz3.ab2@20679>   MOVEQ.l #$0B,D3
0003E096 <AmiBlitz3.ab2@20683>   MOVE.b #1,_dcb
0003E09C <AmiBlitz3.ab2@20686>   JSR asmconst
0003E0A2 <AmiBlitz3.ab2@20687>   CLR.b _dcb
0003E0A6 <AmiBlitz3.ab2@20688>   BSR.w JL_0_C796
0003E0AA <AmiBlitz3.ab2@20689>   BSR writebyte
0003E0AE <AmiBlitz3.ab2@20690>   BSR writebyte
0003E0B2 <AmiBlitz3.ab2@20691>   BSR writebyte                                            ;long
0003E0B6 <AmiBlitz3.ab2@20692>   BSR writebyte
0003E0BA <AmiBlitz3.ab2@20693>   CMP.w #$2C,D0
0003E0BE <AmiBlitz3.ab2@20694>    BEQ.w JL_0_C7D8
0003E0C0 <AmiBlitz3.ab2@20695> RTS
0003E0C2 <AmiBlitz3.ab2@20699>   MOVEQ.l #$0c,D3
0003E0CA <AmiBlitz3.ab2@20703>   MOVE.b #1,_dcb
0003E0D0 <AmiBlitz3.ab2@20706>   JSR asmconst
0003E0D6 <AmiBlitz3.ab2@20707>   CLR.b _dcb
0003E0DA <AmiBlitz3.ab2@20708>   BSR.w JL_0_C796
0003E0DE <AmiBlitz3.ab2@20709>   BSR.w writebyte
0003E0E2 <AmiBlitz3.ab2@20710>   BSR.w writebyte
0003E0E6 <AmiBlitz3.ab2@20711>   BSR.w writebyte
0003E0EA <AmiBlitz3.ab2@20712>   BSR.w writebyte
0003E0EE <AmiBlitz3.ab2@20713>   CMP.w #$2C,D0
0003E0F2 <AmiBlitz3.ab2@20714>    BEQ.w JL_0_C7D8a
0003E0F4 <AmiBlitz3.ab2@20715> RTS
0003E0F6 <AmiBlitz3.ab2@20720>   MOVEQ.l #$11,D3
0003E0FC <AmiBlitz3.ab2@20723>   JSR get1bytemain
0003E100 <AmiBlitz3.ab2@20724>   CMP.w #$22,D0
0003E104 <AmiBlitz3.ab2@20725>    BNE.w JL_0_C81E
0003E106 <AmiBlitz3.ab2@20728>   MOVE.b (a5)+,d0                                          ;bsr.w get1bytemain ascii dc.b
0003E10A <AmiBlitz3.ab2@20729>    BEQ.w syntaxerr
0003E10E <AmiBlitz3.ab2@20730>   CMP.w #$22,D0
0003E112 <AmiBlitz3.ab2@20731>    BEQ.w JL_0_C816
0003E116 <AmiBlitz3.ab2@20732>   CMP.b #"\",d0
0003E11A <AmiBlitz3.ab2@20733>    BNE 'n1
0003E11E <AmiBlitz3.ab2@20734>   CMP.b #"\",(a5)
0003E122 <AmiBlitz3.ab2@20735>    BEQ 'do1
0003E124 <AmiBlitz3.ab2@20738>   MOVE.w D0,D1
0003E128 <AmiBlitz3.ab2@20739>   BSR.w writebyte
0003E12C <AmiBlitz3.ab2@20740> BRA.w JL_0_C7FC
0003E134 <AmiBlitz3.ab2@20743>   CMP.l #"__DA",1(a5)
0003E138 <AmiBlitz3.ab2@20744>    BNE 'nodate1
0003E140 <AmiBlitz3.ab2@20745>   CMP.l #"TE__",5(a5)
0003E144 <AmiBlitz3.ab2@20746>    BEQ 'c1
0003E14C <AmiBlitz3.ab2@20747>   CMP.l #"TE_G",5(a5)
0003E150 <AmiBlitz3.ab2@20748>    BNE 'nodate1
0003E158 <AmiBlitz3.ab2@20749>   CMP.l #"ER__",9(a5)
0003E15C <AmiBlitz3.ab2@20750>    BNE 'nodate1
0003E162 <AmiBlitz3.ab2@20751>   JSR compiledatedc_ger
0003E166 <AmiBlitz3.ab2@20752> BRA 'n1
0003E16C <AmiBlitz3.ab2@20755>   JSR compiledatedc
0003E170 <AmiBlitz3.ab2@20756> BRA 'n1
0003E178 <AmiBlitz3.ab2@20759>   CMP.l #"__VE",1(a5)
0003E17C <AmiBlitz3.ab2@20760>    BNE 'n1
0003E182 <AmiBlitz3.ab2@20761>   CMP.w #"R_",5(a5)
0003E186 <AmiBlitz3.ab2@20762>    BNE 'n1
0003E18C <AmiBlitz3.ab2@20763>   JSR version_string_dc
0003E190 <AmiBlitz3.ab2@20764> BRA.w JL_0_C7FC
0003E196 <AmiBlitz3.ab2@20768>   CLR.w instringon
0003E19C <AmiBlitz3.ab2@20769>   JSR get1bytemain
0003E1A0 <AmiBlitz3.ab2@20770> BRA.w JL_0_C83A
0003E1AA <AmiBlitz3.ab2@20775>    MOVE.w oldqflag,instringon
0003E1B0 <AmiBlitz3.ab2@20776>   MOVEA.l lastsourcepos,A5
0003E1B6 <AmiBlitz3.ab2@20777>    JSR asmconst
0003E1BC <AmiBlitz3.ab2@20778>   SUBQ.l #1,destpointer
0003E1C0 <AmiBlitz3.ab2@20779>    BSR.w JL_0_C796
0003E1C6 <AmiBlitz3.ab2@20780>   ADDQ.l #1,destpointer
0003E1CA <AmiBlitz3.ab2@20781>    BSR.w writebyte
0003E1CE <AmiBlitz3.ab2@20784>   CMP.w #$2C,D0
0003E1D2 <AmiBlitz3.ab2@20785>    BEQ.w JL_0_C7F0
0003E1D4 <AmiBlitz3.ab2@20786> RTS
0003E1D6 <AmiBlitz3.ab2@20790>   MOVEQ.l #$10,D3
0003E1DE <AmiBlitz3.ab2@20796>   MOVE.b #1,_dcb
0003E1E4 <AmiBlitz3.ab2@20797>   JSR asmconst
0003E1EA <AmiBlitz3.ab2@20798>   CLR.b _dcb
0003E1EE <AmiBlitz3.ab2@20799>   BSR.w JL_0_C796
0003E1F2 <AmiBlitz3.ab2@20800>   BSR.w writebyte
0003E1F6 <AmiBlitz3.ab2@20801>   BSR.w writebyte
0003E1FA <AmiBlitz3.ab2@20802>   CMP.w #$2C,D0
0003E1FE <AmiBlitz3.ab2@20803>    BEQ.w JL_0_C84A
0003E200 <AmiBlitz3.ab2@20804> RTS
0003E206 <AmiBlitz3.ab2@20808>   ADDQ.l #3,destpointer
0003E20E <AmiBlitz3.ab2@20809>   ANDI.w #$FFFC,destpointer+2
0003E210 <AmiBlitz3.ab2@20810> RTS
0003E216 <AmiBlitz3.ab2@20814>   ADDQ.l #7,destpointer
0003E21E <AmiBlitz3.ab2@20815>   ANDI.w #$FFF8,destpointer+2
0003E220 <AmiBlitz3.ab2@20816> RTS
0003E226 <AmiBlitz3.ab2@20820>   ADDQ.l #1,destpointer                                    ;even
0003E22E <AmiBlitz3.ab2@20821>   BCLR #$0,destpointer+3
0003E230 <AmiBlitz3.ab2@20822> RTS
0003E232 <AmiBlitz3.ab2@20825> datasize: Ds.w 1
0003E238 <AmiBlitz3.ab2@20835>   TST.b debugmode
0003E23C <AmiBlitz3.ab2@20836>   BEQ.w pdt__skip
0003E240 <AmiBlitz3.ab2@20837>   MOVE.w #$4420,D0                                         ;'D '
0003E244 <AmiBlitz3.ab2@20838>   MOVE.b datasize+1(PC),D0
0003E248 <AmiBlitz3.ab2@20839> BRA.w JL_0_C1E6
0003E24A <AmiBlitz3.ab2@20842> RTS
0003E24E <AmiBlitz3.ab2@20846>   MOVE.w #$FC17,D1
0003E254 <AmiBlitz3.ab2@20847>    JSR uselib
0003E25E <AmiBlitz3.ab2@20849>    MOVE.w oldqflag,instringon
0003E264 <AmiBlitz3.ab2@20850>   MOVEA.l lastsourcepos,A5
0003E26A <AmiBlitz3.ab2@20851>    JSR AJL_0_498A
0003E270 <AmiBlitz3.ab2@20852>   MOVE.w D1,datasize
0003E274 <AmiBlitz3.ab2@20853>   CMP.w #$7,D1
0003E278 <AmiBlitz3.ab2@20854>    BEQ.w JL_0_C944
0003E27A <AmiBlitz3.ab2@20855>   MOVE.w D1,-(A7)
0003E27E <AmiBlitz3.ab2@20858>   BSR.w pdt
0003E280 <AmiBlitz3.ab2@20859>   MOVE.w (A7),D2
0003E284 <AmiBlitz3.ab2@20860>    BSR.w JL_0_B1D8
0003E286 <AmiBlitz3.ab2@20861>   CMP.w (A7),D2                                            ;datamode
0003E28A <AmiBlitz3.ab2@20862>    BEQ.w JL_0_C920
0003E28C <AmiBlitz3.ab2@20863>   MOVE.w D2,D1
0003E28E <AmiBlitz3.ab2@20864>   MOVE.w (A7),D2
0003E292 <AmiBlitz3.ab2@20865>   CMP.w #$2,D2
0003E296 <AmiBlitz3.ab2@20866>    BNE.w JL_0_C8FE
0003E29A <AmiBlitz3.ab2@20867>   CMP.w #$3,D1
0003E29E <AmiBlitz3.ab2@20868>    BNE.w baddaterr
0003E2A4 <AmiBlitz3.ab2@20869>   CMP.l #$10000,D3
0003E2A8 <AmiBlitz3.ab2@20870>    BCC.w baddaterr
0003E2AC <AmiBlitz3.ab2@20871> BRA.w JL_0_C920
0003E2B0 <AmiBlitz3.ab2@20874>   CMP.w #$1,D2
0003E2B4 <AmiBlitz3.ab2@20875>    BNE.w JL_0_C91C
0003E2B8 <AmiBlitz3.ab2@20876>   CMP.w #$2,D1
0003E2BC <AmiBlitz3.ab2@20877>    BNE.w baddaterr
0003E2C2 <AmiBlitz3.ab2@20878>   CMP.l #$100,D3
0003E2C6 <AmiBlitz3.ab2@20879>    BCC.w baddaterr
0003E2CA <AmiBlitz3.ab2@20880> BRA.w JL_0_C920
0003E2CE <AmiBlitz3.ab2@20883> BRA.w baddaterr
0003E2D2 <AmiBlitz3.ab2@20886>   CMP.w #$3,D2
0003E2D6 <AmiBlitz3.ab2@20887>   BCC.w JL_0_C930
0003E2DA <AmiBlitz3.ab2@20888>   BSR.w JL_0_C1E6
0003E2DE <AmiBlitz3.ab2@20889> BRA.w JL_0_C934
0003E2E4 <AmiBlitz3.ab2@20892>   TST.b iee
0003E2E8 <AmiBlitz3.ab2@20893>   BEQ 'old
0003E2EC <AmiBlitz3.ab2@20894>   CMP.b #5,d2
0003E2F0 <AmiBlitz3.ab2@20895>   BNE 'old
0003E2F4 <AmiBlitz3.ab2@20896>   Dc.l $f2006400                                           ;  fpu data write fmove.s fp0,d0
0003E2F8 <AmiBlitz3.ab2@20900>   BSR.w JL_0_C1DE                                          ;write data >3
0003E2FE <AmiBlitz3.ab2@20903>   JSR reget
0003E302 <AmiBlitz3.ab2@20904>   CMP.w #$2C,D0
0003E306 <AmiBlitz3.ab2@20905>    BEQ.w JL_0_C8CC
0003E308 <AmiBlitz3.ab2@20906>   ADDQ.w #2,A7
0003E30A <AmiBlitz3.ab2@20907> RTS
0003E30E <AmiBlitz3.ab2@20910>    BSR.w pdt
0003E314 <AmiBlitz3.ab2@20911>   MOVE.l data2,-(A7)
0003E318 <AmiBlitz3.ab2@20912>    BSR.w JL_0_C1DE
0003E31A <AmiBlitz3.ab2@20913>   MOVEQ.l #$00,D1
0003E320 <AmiBlitz3.ab2@20914>    JSR get1bytemain
0003E324 <AmiBlitz3.ab2@20915>    BEQ.w JL_0_C9A6
0003E328 <AmiBlitz3.ab2@20916>   CMP.w #$22,D0
0003E32C <AmiBlitz3.ab2@20917>    BEQ.w JL_0_C988
0003E330 <AmiBlitz3.ab2@20918>   CMP.w #$2C,D0
0003E334 <AmiBlitz3.ab2@20919>    BEQ.w JL_0_C9A6
0003E338 <AmiBlitz3.ab2@20922>    BSR.w JL_0_C210
0003E33A <AmiBlitz3.ab2@20923>   ADDQ.w #1,D1
0003E340 <AmiBlitz3.ab2@20924>    JSR getchar
0003E342 <AmiBlitz3.ab2@20925>   TST.w D0
0003E346 <AmiBlitz3.ab2@20926>    BEQ.w JL_0_C9A6
0003E34A <AmiBlitz3.ab2@20927>   CMP.w #$2C,D0
0003E34E <AmiBlitz3.ab2@20928>    BEQ.w JL_0_C9A6
0003E352 <AmiBlitz3.ab2@20929> BRA.w JL_0_C96C
0003E354 <AmiBlitz3.ab2@20933>    MOVEQ #0,d0
0003E356 <AmiBlitz3.ab2@20934>    MOVE.b (a5)+,d0
0003E35A <AmiBlitz3.ab2@20935>    BEQ.w notqerr2
0003E35E <AmiBlitz3.ab2@20936>   CMP.w #$22,D0
0003E362 <AmiBlitz3.ab2@20937>    BEQ.w JL_0_C9A2
0003E366 <AmiBlitz3.ab2@20938>    BSR.w JL_0_C210
0003E368 <AmiBlitz3.ab2@20939>   ADDQ.w #1,D1
0003E36C <AmiBlitz3.ab2@20940> BRA.w JL_0_C988
0003E372 <AmiBlitz3.ab2@20941> notqerr2 JMP notqerr
0003E378 <AmiBlitz3.ab2@20943>   CLR.w instringon
0003E37E <AmiBlitz3.ab2@20944>   JSR get1bytemain
0003E380 <AmiBlitz3.ab2@20947>   MOVEA.l (A7)+,A0
0003E386 <AmiBlitz3.ab2@20948>   MOVE.w dontwrite,D2
0003E38A <AmiBlitz3.ab2@20949>    BNE.w JL_0_C9B4
0003E38C <AmiBlitz3.ab2@20950>   MOVE.l D1,(A0)
0003E392 <AmiBlitz3.ab2@20953>   ADDQ.l #1,data2
0003E39A <AmiBlitz3.ab2@20954>   BCLR #$0,data2+3
0003E39E <AmiBlitz3.ab2@20955>   CMP.w #$2C,D0
0003E3A2 <AmiBlitz3.ab2@20956>    BEQ.w JL_0_C944
0003E3A4 <AmiBlitz3.ab2@20957> RTS
0003E3AA <AmiBlitz3.ab2@20961> JMP vardeclareerr
0003E3B0 <AmiBlitz3.ab2@20964>   MOVE.w proceduremode,D1                                  ;doshared
0003E3B4 <AmiBlitz3.ab2@20966>   BNE.w 'l1
0003E3B6 <AmiBlitz3.ab2@20967>   MOVE.w D1,-(A7)
0003E3BC <AmiBlitz3.ab2@20968>   CLR.w proceduremode
0003E3C2 <AmiBlitz3.ab2@20971>   LEA varbase,a2
0003E3C6 <AmiBlitz3.ab2@20972>   BSR.w getparameter
0003E3C8 <AmiBlitz3.ab2@20973>   MOVE.w d2,-(a7)
0003E3CE <AmiBlitz3.ab2@20974>    JSR findvariable
0003E3D2 <AmiBlitz3.ab2@20975>    BEQ 'checkdim
0003E3D8 <AmiBlitz3.ab2@20976>    LEA sharebase,a2
0003E3DA <AmiBlitz3.ab2@20977>    MOVEQ #$f+4,d7
0003E3DE <AmiBlitz3.ab2@20978>    BSR.w findlab                                         ;find var
0003E3E2 <AmiBlitz3.ab2@20979>    BEQ.b dupsherr
0003E3E6 <AmiBlitz3.ab2@20980>    BSR addlabel
0003E3EA <AmiBlitz3.ab2@20981>    CMP.b #".",d0
0003E3EE <AmiBlitz3.ab2@20982>    BNE JUMP_vardeclareerr
0003E3F0 <AmiBlitz3.ab2@20983>    MOVE.l a2,a3
0003E3F6 <AmiBlitz3.ab2@20984>    JSR JL_0_8EB8b
0003E3F8 <AmiBlitz3.ab2@21015>   MOVE.w (a7)+,d2
0003E3FC <AmiBlitz3.ab2@21016>    CMP.b #",",d0
0003E400 <AmiBlitz3.ab2@21017>    BNE 'ret
0003E406 <AmiBlitz3.ab2@21018>    JSR get1bytemain
0003E40A <AmiBlitz3.ab2@21019> BRA 'again2
0003E410 <AmiBlitz3.ab2@21022>   MOVE.w (A7)+,proceduremode
0003E412 <AmiBlitz3.ab2@21023> RTS
0003E418 <AmiBlitz3.ab2@21030>    CMP.w #2,6(a2)
0003E41C <AmiBlitz3.ab2@21031>    BEQ 'do
0003E422 <AmiBlitz3.ab2@21032>    CMP.w #$102,6(a2)
0003E426 <AmiBlitz3.ab2@21033>    BEQ 'do
0003E42C <AmiBlitz3.ab2@21034> JMP errormsg_declaredtwice                                 ;was BRA 'errormsg_declaredtwice_
0003E432 <AmiBlitz3.ab2@21037>   LEA varbase,a0
0003E434 <AmiBlitz3.ab2@21040>   MOVE.l (A0),D0                                           ;find label
0003E438 <AmiBlitz3.ab2@21041>    BEQ.b 'z1
0003E43A <AmiBlitz3.ab2@21042>    CMP.l d0,a2
0003E43E <AmiBlitz3.ab2@21043>    BEQ 'z1
0003E440 <AmiBlitz3.ab2@21044>    MOVE.l d0,a0
0003E444 <AmiBlitz3.ab2@21045> BRA 'm1
0003E446 <AmiBlitz3.ab2@21048>   MOVE.l (a2),d1
0003E448 <AmiBlitz3.ab2@21049>     MOVE.l d1,(a0)
0003E44A <AmiBlitz3.ab2@21050>     CLR.l (a2)
0003E450 <AmiBlitz3.ab2@21051>     LEA sharebase,a0
0003E452 <AmiBlitz3.ab2@21052>     MOVE.l (a0),(a2)
0003E454 <AmiBlitz3.ab2@21053>     MOVE.l a2,(a0)
0003E45A <AmiBlitz3.ab2@21054>     JSR get1bytemain
0003E460 <AmiBlitz3.ab2@21055>     JSR get1bytemain
0003E464 <AmiBlitz3.ab2@21056> BRA 'domore
0003E46C <AmiBlitz3.ab2@21059>   MOVE.b #1,nowdeclare
0003E46E <AmiBlitz3.ab2@21060>   MOVE.w D1,-(A7)
0003E474 <AmiBlitz3.ab2@21061>   CLR.w proceduremode
0003E478 <AmiBlitz3.ab2@21064>    BSR.w getparameter
0003E47A <AmiBlitz3.ab2@21065>   MOVE.w D2,-(A7)
0003E480 <AmiBlitz3.ab2@21066>   LEA firstglob,A2
0003E484 <AmiBlitz3.ab2@21067>    BSR.w findvariable2
0003E488 <AmiBlitz3.ab2@21068>    BNE.b JL_0_CA06
0003E48E <AmiBlitz3.ab2@21071>   MOVE.b flagmask+1,D1
0003E492 <AmiBlitz3.ab2@21072>   MOVE.b $7(A2),D3
0003E494 <AmiBlitz3.ab2@21073>   EOR.b D3,D1
0003E498 <AmiBlitz3.ab2@21074>    BEQ.w dupsherr
0003E49C <AmiBlitz3.ab2@21075>    BSR.w findlab
0003E4A0 <AmiBlitz3.ab2@21076>    BEQ.b JL_0_C9F0
0003E4A4 <AmiBlitz3.ab2@21079>    BSR.w addlabel
0003E4A6 <AmiBlitz3.ab2@21080>   MOVE.w (A7)+,D2
0003E4A8 <AmiBlitz3.ab2@21081>   MOVE.l A2,-(A7)
0003E4AC <AmiBlitz3.ab2@21082>    BSR.w JL_0_8E3C
0003E4AE <AmiBlitz3.ab2@21083>   MOVEA.l (A7)+,A2
0003E4B0 <AmiBlitz3.ab2@21084>   MOVEQ.l #$04,D1
0003E4B2 <AmiBlitz3.ab2@21085>   ADDQ.w #4,A2
0003E4B4 <AmiBlitz3.ab2@21086>   ADDQ.w #4,A3
0003E4B6 <AmiBlitz3.ab2@21089>     MOVE.w (A3)+,(A2)+
0003E4BA <AmiBlitz3.ab2@21090>   DBF D1,JL_0_CA1A
0003E4C2 <AmiBlitz3.ab2@21092>   BTST #$1,flagmask+1
0003E4C6 <AmiBlitz3.ab2@21093>    BEQ.w JL_0_CA3C
0003E4CC <AmiBlitz3.ab2@21094>    JSR get1bytemain
0003E4D0 <AmiBlitz3.ab2@21095>   CMP.w #$29,D0
0003E4D4 <AmiBlitz3.ab2@21096>    BNE.w syntaxerr
0003E4DA <AmiBlitz3.ab2@21097>    JSR get1bytemain
0003E4DE <AmiBlitz3.ab2@21100>    CMP.w #$2C,D0
0003E4E2 <AmiBlitz3.ab2@21101>    BNE.w JL_0_CA4C
0003E4E8 <AmiBlitz3.ab2@21102>    JSR get1bytemain
0003E4EC <AmiBlitz3.ab2@21103> BRA.w JL_0_C9DE
0003E4F2 <AmiBlitz3.ab2@21106>   MOVE.w (A7)+,proceduremode
0003E4F4 <AmiBlitz3.ab2@21107> RTS
0003E4F8 <AmiBlitz3.ab2@21111>    BSR.w JL_0_C05C
0003E4FE <AmiBlitz3.ab2@21112>    JSR check_incdir                                        ; ergebnis in d2
0003E504 <AmiBlitz3.ab2@21114>    LEA ptr_parameterstore,a1
0003E506 <AmiBlitz3.ab2@21115>    MOVE.l d2,-(a7)
0003E50C <AmiBlitz3.ab2@21116>    LEA includetemp,a0                                      ; filename in includetemp packen
0003E50E <AmiBlitz3.ab2@21119>      MOVE.b (a1)+,(a0)+
0003E512 <AmiBlitz3.ab2@21120>    BNE 'l4
0003E518 <AmiBlitz3.ab2@21122>    LEA ptr_parameterstore,a1
0003E51A <AmiBlitz3.ab2@21123>    MOVE.l a1,a0
0003E51C <AmiBlitz3.ab2@21126>     TST.b (a0)+
0003E520 <AmiBlitz3.ab2@21127>    BNE 'l1
0003E522 <AmiBlitz3.ab2@21130>      MOVE.b -(a0),d0
0003E526 <AmiBlitz3.ab2@21131>      CMP.b #":",d0
0003E52A <AmiBlitz3.ab2@21132>       BEQ 'out
0003E52E <AmiBlitz3.ab2@21133>      CMP.b #"/",d0
0003E532 <AmiBlitz3.ab2@21134>       BEQ 'out
0003E534 <AmiBlitz3.ab2@21135>      CMP.l a1,a0
0003E538 <AmiBlitz3.ab2@21136>       BEQ 'out2
0003E53C <AmiBlitz3.ab2@21137> BRA 'l2
0003E53E <AmiBlitz3.ab2@21140>    ADDQ.l #1,a0                                            ; dateinamen vom pfad extrahiert
0003E540 <AmiBlitz3.ab2@21143>    MOVEQ.l #-$01,D2
0003E542 <AmiBlitz3.ab2@21146>      ADDQ.w #1,D2
0003E544 <AmiBlitz3.ab2@21147>      MOVE.b (a0)+,(a1)+
0003E548 <AmiBlitz3.ab2@21148>    BNE 'l3
0003E54A <AmiBlitz3.ab2@21149>    CLR.b (a1)+
0003E550 <AmiBlitz3.ab2@21151>    LEA ptr_parameterstore,a1
0003E554 <AmiBlitz3.ab2@21152>    BSR.w findxinc                                         ;find include
0003E558 <AmiBlitz3.ab2@21153>     BEQ.w 'outb
0003E55A <AmiBlitz3.ab2@21155>    MOVE.w D2,-(A7)
0003E55E <AmiBlitz3.ab2@21156>    BSR.w addlabel
0003E560 <AmiBlitz3.ab2@21157>    MOVE.w (A7)+,D2
0003E566 <AmiBlitz3.ab2@21159>    LEA ptr_parameterstore,a1
0003E56C <AmiBlitz3.ab2@21160>    LEA includetemp,a0                                      ; namen in includetemp schreiben
0003E56E <AmiBlitz3.ab2@21163>     MOVE.b (a0)+,(a1)+
0003E572 <AmiBlitz3.ab2@21164>    BNE 'l4b
0003E574 <AmiBlitz3.ab2@21166>    MOVE.l (a7)+,d2
0003E57A <AmiBlitz3.ab2@21167>    LEA ptr_parameterstore,a1
0003E57E <AmiBlitz3.ab2@21168> BRA.w JL_0_CB18
0003E584 <AmiBlitz3.ab2@21171>    LEA ptr_parameterstore,a1
0003E58A <AmiBlitz3.ab2@21172>    LEA includetemp,a0
0003E58C <AmiBlitz3.ab2@21175>     MOVE.b (a0)+,(a1)+
0003E590 <AmiBlitz3.ab2@21176>    BNE 'l4b2
0003E592 <AmiBlitz3.ab2@21178>    MOVE.l (a7)+,d2
0003E598 <AmiBlitz3.ab2@21179>    LEA ptr_parameterstore,a1
0003E59A <AmiBlitz3.ab2@21182> RTS
0003E59E <AmiBlitz3.ab2@21186>   BSR.w JL_0_C05C
0003E5A4 <AmiBlitz3.ab2@21187>   MOVE.l #ptr_parameterstore,D1
0003E5A6 <AmiBlitz3.ab2@21188>   MOVEQ.l #-$02,D2
0003E5AC <AmiBlitz3.ab2@21189>   MOVEA.l _dosbase,A6
0003E5B0 <AmiBlitz3.ab2@21190>   JSR _Lock(A6)
0003E5B2 <AmiBlitz3.ab2@21191>   MOVE.l D0,D7
0003E5B6 <AmiBlitz3.ab2@21192>   BEQ.w error_cant_open_include
0003E5B8 <AmiBlitz3.ab2@21193>   MOVE.l D7,D1
0003E5BE <AmiBlitz3.ab2@21194>   MOVE.l ptr_macrobuffer_begin,D2
0003E5C2 <AmiBlitz3.ab2@21195>   JSR _Examine(A6)
0003E5C8 <AmiBlitz3.ab2@21196>   MOVEA.l ptr_macrobuffer_begin,A0
0003E5CC <AmiBlitz3.ab2@21197>   MOVE.l $4(A0),D0
0003E5D0 <AmiBlitz3.ab2@21198>    BPL.w error_cant_open_include
0003E5D4 <AmiBlitz3.ab2@21199>   MOVE.l $7C(A0),D3
0003E5D6 <AmiBlitz3.ab2@21200>   MOVE.l D7,D1
0003E5DA <AmiBlitz3.ab2@21201>    JSR _UnLock(A6)
0003E5E0 <AmiBlitz3.ab2@21202>   MOVE.l #ptr_parameterstore,D1
0003E5E6 <AmiBlitz3.ab2@21203>   MOVE.l #HUNK_RELOC_16__MODE_OLDFILE,D2
0003E5EA <AmiBlitz3.ab2@21204>    JSR _Open(A6)
0003E5EC <AmiBlitz3.ab2@21205>   MOVE.l D0,D7
0003E5F0 <AmiBlitz3.ab2@21206>    BEQ.w error_cant_open_include
0003E5F6 <AmiBlitz3.ab2@21207>   MOVE.l destpointer,D0
0003E5F8 <AmiBlitz3.ab2@21208>   ADD.l D3,D0
0003E5FE <AmiBlitz3.ab2@21209>   CMP.l destbufferend,D0
0003E602 <AmiBlitz3.ab2@21210>    BHI.w JL_0_CAF6
0003E608 <AmiBlitz3.ab2@21211>   MOVE.l destpointer,D2
0003E60A <AmiBlitz3.ab2@21212>   MOVE.l D7,D1
0003E60E <AmiBlitz3.ab2@21213>    JSR _Read(A6)
0003E614 <AmiBlitz3.ab2@21214>   CMP.l #$FFFFFFFF,D0
0003E618 <AmiBlitz3.ab2@21215>    BEQ.w error_reading_file
0003E61E <AmiBlitz3.ab2@21216>   ADD.l D0,destpointer
0003E622 <AmiBlitz3.ab2@21217> BRA.w JL_0_CB04
0003E62A <AmiBlitz3.ab2@21220>   MOVE.w #$FFFF,dontwrite
0003E630 <AmiBlitz3.ab2@21221>   MOVE.l D0,destpointer
0003E632 <AmiBlitz3.ab2@21224>   MOVE.l D7,D1
0003E636 <AmiBlitz3.ab2@21225> JMP _Close(A6)
0003E63C <AmiBlitz3.ab2@21229> JMP illdirerr
0003E642 <AmiBlitz3.ab2@21232>   TST.w dirmode                                            ;include  open
0003E646 <AmiBlitz3.ab2@21233>    BNE.w JUMP_illdirerr
0003E64A <AmiBlitz3.ab2@21234>   BSR.w JL_0_C05C
0003E650 <AmiBlitz3.ab2@21235>   JSR check_incdir
0003E654 <AmiBlitz3.ab2@21238>   BSR.w findconstant
0003E658 <AmiBlitz3.ab2@21239>    BEQ.w alincerr
0003E65E <AmiBlitz3.ab2@21241>   LEA constantbase,A2
0003E662 <AmiBlitz3.ab2@21242>   BSR.w addhere2
0003E666 <AmiBlitz3.ab2@21243>   CLR.w $C(A2)
0003E66A <AmiBlitz3.ab2@21244>   CLR.l $4(A2)
0003E670 <AmiBlitz3.ab2@21246>   MOVE.l #ptr_parameterstore,D1
0003E672 <AmiBlitz3.ab2@21247>   MOVE.l d1,a0
0003E678 <AmiBlitz3.ab2@21248>   LEA includetemp2,a1
0003E67A <AmiBlitz3.ab2@21251>     MOVE.b (a0)+,(a1)+
0003E67E <AmiBlitz3.ab2@21252>   BNE 'l1
0003E684 <AmiBlitz3.ab2@21253>   JSR save_includename
0003E68E <AmiBlitz3.ab2@21254>   MOVE.l #0,include_process
0003E696 <AmiBlitz3.ab2@21256>   CMP.l #$62623200,-4(a0)                                  ;.bb2
0003E69A <AmiBlitz3.ab2@21257>   BEQ 'ok
0003E6A2 <AmiBlitz3.ab2@21258>   CMP.l #$61623300,-4(a0)                                  ;.ab3
0003E6A6 <AmiBlitz3.ab2@21259>   BEQ 'ok_tokenize
0003E6AE <AmiBlitz3.ab2@21260>   CMP.l #$61623200,-4(a0)                                  ;.ab2
0003E6B2 <AmiBlitz3.ab2@21261>   BEQ 'ok_tokenize
0003E6BA <AmiBlitz3.ab2@21262>   CMP.l #$2e626200,-4(a0)                                  ;.bb files
0003E6BE <AmiBlitz3.ab2@21263>   BEQ 'ok
0003E6C4 <AmiBlitz3.ab2@21264> JMP errortoken                                             ;can only include
0003E6CE <AmiBlitz3.ab2@21267>    MOVE.l #-1,include_process                              ; must tokenize the include
0003E6D4 <AmiBlitz3.ab2@21270>   MOVE.l #HUNK_RELOC_16__MODE_OLDFILE,D2
0003E6DA <AmiBlitz3.ab2@21271>   MOVEA.l _dosbase,A6
0003E6DE <AmiBlitz3.ab2@21272>   JSR _Open(A6)
0003E6E2 <AmiBlitz3.ab2@21273>   MOVE.l D0,$8(A2)
0003E6E6 <AmiBlitz3.ab2@21274>   BEQ.w error_cant_open_include
0003E6EC <AmiBlitz3.ab2@21275>   CLR.l includeline
0003E6F0 <AmiBlitz3.ab2@21276>   MOVE.l 8(a2),d1
0003E6F2 <AmiBlitz3.ab2@21277>   MOVE.l d3,-(a7)
0003E6F4 <AmiBlitz3.ab2@21278>   MOVEQ #0,d2
0003E6F6 <AmiBlitz3.ab2@21279>   MOVEQ #1,d3
0003E6FA <AmiBlitz3.ab2@21280>   JSR _Seek(a6)                                            ; -66
0003E6FE <AmiBlitz3.ab2@21281>   MOVE.l 8(a2),d1
0003E700 <AmiBlitz3.ab2@21282>   MOVEQ #0,d2
0003E702 <AmiBlitz3.ab2@21283>   MOVEQ #-1,d3
0003E706 <AmiBlitz3.ab2@21284>   JSR _Seek(a6)                                            ; -66
0003E708 <AmiBlitz3.ab2@21285>   MOVE.l (a7)+,d3
0003E70A <AmiBlitz3.ab2@21286>   ADDQ.l #4,d0
0003E710 <AmiBlitz3.ab2@21288>   MOVE.l #$10000,D1
0003E716 <AmiBlitz3.ab2@21289>   MOVEA.l _execbase,A6
0003E71A <AmiBlitz3.ab2@21292>   JSR _AllocVec(a6)
0003E71E <AmiBlitz3.ab2@21294>   MOVE.l D0,$4(A2)
0003E722 <AmiBlitz3.ab2@21295>   MOVE.l D0,$E(A2)
0003E724 <AmiBlitz3.ab2@21296>   MOVEA.l D0,A5
0003E72A <AmiBlitz3.ab2@21303>   ADDQ.w #1,ininclude                                      ;enter include
0003E730 <AmiBlitz3.ab2@21306>   LEA _include,a0
0003E734 <AmiBlitz3.ab2@21307>   MOVEM.l a0-a6/d0-d7,-(a7)
0003E73A <AmiBlitz3.ab2@21308>   LEA ptr_parameterstore,a1
0003E73C <AmiBlitz3.ab2@21311>     MOVE.b (a0)+,(a1)+
0003E740 <AmiBlitz3.ab2@21312>   BNE 'l1b
0003E742 <AmiBlitz3.ab2@21314>   MOVEQ #9,d2
0003E748 <AmiBlitz3.ab2@21315>   JSR findlabel2
0003E74C <AmiBlitz3.ab2@21316>   BNE 'd
0003E754 <AmiBlitz3.ab2@21317>   MOVE.l #1,8(a2)
0003E758 <AmiBlitz3.ab2@21318>   MOVEM.l (a7)+,a0-a6/d0-d7
0003E75C <AmiBlitz3.ab2@21319> BRA 'd2
0003E762 <AmiBlitz3.ab2@21322>   JSR addlabelhash
0003E76A <AmiBlitz3.ab2@21323>   MOVE.l #$1,$4(A2)
0003E772 <AmiBlitz3.ab2@21324>   MOVE.l #1,8(a2)
0003E776 <AmiBlitz3.ab2@21325>   MOVEM.l (a7)+,a0-a6/d0-d7
0003E77C <AmiBlitz3.ab2@21328>   LEA inctab,a0
0003E77E <AmiBlitz3.ab2@21329>   MOVEQ #0,d1
0003E784 <AmiBlitz3.ab2@21330>   MOVE.w ininclude,d1
0003E788 <AmiBlitz3.ab2@21331>   CLR.l $0(a0,d1*4)
0003E78E <AmiBlitz3.ab2@21332>   MOVEA.l passstack,A7
0003E794 <AmiBlitz3.ab2@21333> JMP AJL_0_413A
0003E796 <AmiBlitz3.ab2@21336> coolnest:   Ds.w 1
0003E79A <AmiBlitz3.ab2@21337> macline:    Ds.l 1
0003E7A4 <AmiBlitz3.ab2@21341>   MOVE.l linenumat,macline
0003E7A8 <AmiBlitz3.ab2@21342>    BSR.w makename2
0003E7AC <AmiBlitz3.ab2@21343>    BEQ.w JUMP_syntaxerr
0003E7B2 <AmiBlitz3.ab2@21345>    CLR.b thenmode
0003E7BC <AmiBlitz3.ab2@21347>    MOVE.w oldqflag,instringon
0003E7C2 <AmiBlitz3.ab2@21348>   MOVEA.l lastsourcepos,A5
0003E7C6 <AmiBlitz3.ab2@21349>    BSR.w findmac
0003E7CA <AmiBlitz3.ab2@21350>    BEQ.w dupmacerr
0003E7CE <AmiBlitz3.ab2@21351>    BSR.w addlabel
0003E7D2 <AmiBlitz3.ab2@21352>   CLR.w $A(A2)
0003E7D8 <AmiBlitz3.ab2@21353>   MOVEA.l ptr_macrobuffer_begin,A0
0003E7DA <AmiBlitz3.ab2@21354>   MOVEQ.l #$00,D2
0003E7E0 <AmiBlitz3.ab2@21355>   CLR.w coolnest
0003E7E2 <AmiBlitz3.ab2@21358>   MOVE.b (a5),d0
0003E7E6 <AmiBlitz3.ab2@21359>      BEQ 'l3
0003E7EA <AmiBlitz3.ab2@21360>      CMP.b #" ",d0
0003E7EE <AmiBlitz3.ab2@21361>       BNE 'l2                                              ;space macro
0003E7F0 <AmiBlitz3.ab2@21362>       ADDQ.l #1,a5
0003E7F4 <AmiBlitz3.ab2@21363> BRA 'l1
0003E7F8 <AmiBlitz3.ab2@21366>    CMP.b #";",d0
0003E7FC <AmiBlitz3.ab2@21367>       BNE 'l3
0003E7FE <AmiBlitz3.ab2@21370>    MOVE.b (a5),d0
0003E802 <AmiBlitz3.ab2@21371>       BEQ 'l5
0003E806 <AmiBlitz3.ab2@21372>       BSR.w JL_0_CC98                                      ;add comment
0003E808 <AmiBlitz3.ab2@21373>       ADDQ.l #1,a5
0003E80C <AmiBlitz3.ab2@21374> BRA 'l4
0003E810 <AmiBlitz3.ab2@21377>    MOVE.b #":",d0
0003E814 <AmiBlitz3.ab2@21378>       BSR.w JL_0_CC98
0003E818 <AmiBlitz3.ab2@21379>       MOVE.b #"@",d0
0003E81C <AmiBlitz3.ab2@21380>       BSR.w JL_0_CC98
0003E824 <AmiBlitz3.ab2@21383>    MOVE.b #0,temp
0003E82C <AmiBlitz3.ab2@21384>       MOVE.b #0,thenmode
0003E832 <AmiBlitz3.ab2@21387>   JSR getcharb
0003E834 <AmiBlitz3.ab2@21388>   TST.w D0
0003E838 <AmiBlitz3.ab2@21389>    BNE.w JL_0_CBDE
0003E83C <AmiBlitz3.ab2@21390>   MOVEM.l D2/A0/A2,-(A7)
0003E842 <AmiBlitz3.ab2@21391>   CMP.w #"@@",-3(a5)
0003E846 <AmiBlitz3.ab2@21392>   BNE 'l2a
0003E84C <AmiBlitz3.ab2@21393>   JSR nextline
0003E850 <AmiBlitz3.ab2@21394>   BEQ.w macenderr
0003E854 <AmiBlitz3.ab2@21395>   MOVEM.l (A7)+,D2/A0/A2
0003E858 <AmiBlitz3.ab2@21396> BRA.w JL_0_CBB6
0003E85E <AmiBlitz3.ab2@21399>    JSR nextline
0003E862 <AmiBlitz3.ab2@21400>    BEQ.w macenderr
0003E866 <AmiBlitz3.ab2@21401>   MOVEM.l (A7)+,D2/A0/A2
0003E868 <AmiBlitz3.ab2@21402>   TST.w D2
0003E86C <AmiBlitz3.ab2@21403>    BEQ.w JL_0_CBB6
0003E86E <AmiBlitz3.ab2@21406>   MOVE.b (a5),d0
0003E872 <AmiBlitz3.ab2@21407>       CMP.b #" ",d0
0003E876 <AmiBlitz3.ab2@21408>       BNE 'l1
0003E878 <AmiBlitz3.ab2@21409>       ADDQ.w #1,a5
0003E87C <AmiBlitz3.ab2@21410> BRA 'l2
0003E882 <AmiBlitz3.ab2@21413>   TST.b thenmode
0003E886 <AmiBlitz3.ab2@21414>      BEQ 'l3
0003E888 <AmiBlitz3.ab2@21415>      MOVEQ #":",d0
0003E88C <AmiBlitz3.ab2@21416>      BSR.w JL_0_CC98
0003E890 <AmiBlitz3.ab2@21417>      MOVE.w #-$7FFE,D0                                     ;write end if
0003E894 <AmiBlitz3.ab2@21418>      BSR macputw
0003E898 <AmiBlitz3.ab2@21419>      MOVE.w #$800b,d0
0003E89C <AmiBlitz3.ab2@21420>      BSR.w macputw
0003E8A2 <AmiBlitz3.ab2@21421>      CLR.b thenmode
0003E8A4 <AmiBlitz3.ab2@21424>    MOVEQ.l #$3A,D0
0003E8AC <AmiBlitz3.ab2@21425>      MOVE.b #1,temp
0003E8B0 <AmiBlitz3.ab2@21427> BRA.w JL_0_CC2A
0003E8B4 <AmiBlitz3.ab2@21431>   BPL.w JL_0_CC2A
0003E8B8 <AmiBlitz3.ab2@21432>   CMP.w #-$7FF3,D0                                         ;macro ?
0003E8BC <AmiBlitz3.ab2@21433>    BNE.w JL_0_CBF4
0003E8C2 <AmiBlitz3.ab2@21434>   ADDQ.w #1,coolnest
0003E8C6 <AmiBlitz3.ab2@21435> BRA.w JL_0_CC22
0003E8CA <AmiBlitz3.ab2@21438>   CMP.w #$80d7,d0                                          ;object ?
0003E8CE <AmiBlitz3.ab2@21439>     BNE 'l1x
0003E8D4 <AmiBlitz3.ab2@21440>     TST.b objectcount
0003E8D8 <AmiBlitz3.ab2@21441>     BNE macnesterr
0003E8DC <AmiBlitz3.ab2@21444>   CMP.w #$8021,d0
0003E8E0 <AmiBlitz3.ab2@21445>     BNE 'nothen
0003E8E8 <AmiBlitz3.ab2@21446>     MOVE.b #1,thenmode
0003E8EE <AmiBlitz3.ab2@21449>   TST.b thenmode
0003E8F2 <AmiBlitz3.ab2@21450>         BEQ 'l1
0003E8F6 <AmiBlitz3.ab2@21451>    CMP.w #$8002,d0                                         ;end if
0003E8FA <AmiBlitz3.ab2@21452>    BNE 'l1
0003E8FE <AmiBlitz3.ab2@21453>    MOVEM.l d0/a5,-(a7)
0003E904 <AmiBlitz3.ab2@21454>    JSR get1bytemain
0003E906 <AmiBlitz3.ab2@21455>    MOVE.w d0,d1
0003E90A <AmiBlitz3.ab2@21456>    MOVEM.l (a7)+,a5/d0
0003E90E <AmiBlitz3.ab2@21457>    CMP.w #$800b,d1
0003E912 <AmiBlitz3.ab2@21458>    BNE 'l1
0003E918 <AmiBlitz3.ab2@21459>    CLR.b thenmode
0003E91C <AmiBlitz3.ab2@21462>    CMP.w #-$7FFE,D0                                        ;end ?
0003E920 <AmiBlitz3.ab2@21463>    BNE.w JL_0_CC22
0003E922 <AmiBlitz3.ab2@21464>    MOVE.l a5,-(a7)
0003E928 <AmiBlitz3.ab2@21465>    JSR get1bytemain
0003E92A <AmiBlitz3.ab2@21466>    MOVE.l (a7)+,a5
0003E92C <AmiBlitz3.ab2@21467>    TST.w d0
0003E930 <AmiBlitz3.ab2@21468>    BEQ 'doend
0003E934 <AmiBlitz3.ab2@21469>    CMP.w #":",d0
0003E938 <AmiBlitz3.ab2@21470>    BEQ 'doend
0003E93C <AmiBlitz3.ab2@21471>    CMP.w #";",d0
0003E940 <AmiBlitz3.ab2@21472>    BEQ 'doend
0003E942 <AmiBlitz3.ab2@21473>    MOVE.l a5,-(a7)
0003E948 <AmiBlitz3.ab2@21474>    JSR get1bytemain
0003E94C <AmiBlitz3.ab2@21475>    MOVE.l -1(a5),d0
0003E94E <AmiBlitz3.ab2@21476>    MOVE.l (a7)+,a5
0003E954 <AmiBlitz3.ab2@21477>    CMP.l #"noa7",d0
0003E958 <AmiBlitz3.ab2@21478>    BEQ 'doend
0003E95C <AmiBlitz3.ab2@21479> BRA 'morechar
0003E960 <AmiBlitz3.ab2@21482>   MOVE.w #$8002,D0
0003E964 <AmiBlitz3.ab2@21483>    BSR.w macputw
0003E968 <AmiBlitz3.ab2@21484> BRA JL_0_CBB6
0003E96E <AmiBlitz3.ab2@21487>   JSR get1bytemain
0003E972 <AmiBlitz3.ab2@21488>    CMP.w #-$7FF3,D0                                        ;end macro
0003E976 <AmiBlitz3.ab2@21489>    BEQ.w 'lo1
0003E97A <AmiBlitz3.ab2@21490>   CMP.w #$80d7,d0                                          ;end object
0003E97E <AmiBlitz3.ab2@21491>   BNE JL_0_CC12
0003E984 <AmiBlitz3.ab2@21492>   SUBQ.b #1,objectcount
0003E98A <AmiBlitz3.ab2@21493>   TST.b developobject
0003E98E <AmiBlitz3.ab2@21494>   BEQ 'lo1
0003E992 <AmiBlitz3.ab2@21495>   BSR skiprest
0003E994 <AmiBlitz3.ab2@21496> RTS
0003E99A <AmiBlitz3.ab2@21499>   SUBQ.w #1,coolnest
0003E99E <AmiBlitz3.ab2@21500>    BMI.w JL_0_CC32
0003E9A0 <AmiBlitz3.ab2@21503>   MOVE.w D0,-(A7)
0003E9A4 <AmiBlitz3.ab2@21504>   MOVE.w #$8002,D0
0003E9A8 <AmiBlitz3.ab2@21505>    BSR.w macputw
0003E9AA <AmiBlitz3.ab2@21506>   MOVE.w (A7)+,D0
0003E9AE <AmiBlitz3.ab2@21507> BRA.w JL_0_CC22
0003E9B2 <AmiBlitz3.ab2@21510>   BSR.w macputw
0003E9B6 <AmiBlitz3.ab2@21511> BRA.w JL_0_CBB6
0003E9BC <AmiBlitz3.ab2@21514>     CMP.w #"@@",-1(a5)                                     ;merge lines
0003E9C0 <AmiBlitz3.ab2@21515>     BNE 'no
0003E9C4 <AmiBlitz3.ab2@21516>      MOVEM.l D2/A0/A2,-(A7)
0003E9CA <AmiBlitz3.ab2@21517>    JSR nextline
0003E9CE <AmiBlitz3.ab2@21518>    BEQ.w macenderr
0003E9D2 <AmiBlitz3.ab2@21519>   MOVEM.l (A7)+,D2/A0/A2
0003E9D4 <AmiBlitz3.ab2@21520>     TST.w D2
0003E9D8 <AmiBlitz3.ab2@21521>    BEQ.w JL_0_CBB6
0003E9DC <AmiBlitz3.ab2@21522> BRA JL_0_CBB6
0003E9E0 <AmiBlitz3.ab2@21525>   BSR.w JL_0_CC98
0003E9E4 <AmiBlitz3.ab2@21526> BRA.w JL_0_CBB6
0003E9E6 <AmiBlitz3.ab2@21529>   ADDQ.w #4,A7
0003E9E8 <AmiBlitz3.ab2@21530>   MOVE.l A0,D0
0003E9EE <AmiBlitz3.ab2@21531>   SUB.l ptr_macrobuffer_begin,D0
0003E9F2 <AmiBlitz3.ab2@21534>    BEQ.w JL_0_CC5E
0003E9F6 <AmiBlitz3.ab2@21535>   CMPI.b #":",-(A0)
0003E9FA <AmiBlitz3.ab2@21536>    BNE.w JL_0_CC5E
0003E9FE <AmiBlitz3.ab2@21537>   CMP.w #$1,D0
0003EA02 <AmiBlitz3.ab2@21538>    BEQ.w JL_0_CC58
0003EA06 <AmiBlitz3.ab2@21539>   TST.b -$1(A0)
0003EA0A <AmiBlitz3.ab2@21540>    BMI.w JL_0_CC5E
0003EA0C <AmiBlitz3.ab2@21543>   SUBQ.w #1,D0
0003EA10 <AmiBlitz3.ab2@21544> BRA.w JL_0_CC3C
0003EA14 <AmiBlitz3.ab2@21547>   MOVE.w D0,$8(A2)
0003EA18 <AmiBlitz3.ab2@21548>    BEQ.w JL_0_CC8E
0003EA1A <AmiBlitz3.ab2@21549>   MOVEQ.l #$01,D1
0003EA20 <AmiBlitz3.ab2@21550>   MOVEA.l _execbase,A6
0003EA26 <AmiBlitz3.ab2@21551>   MOVE.l mempool,a0
0003EA2A <AmiBlitz3.ab2@21552>   JSR _AllocPooled(a6)
0003EA2C <AmiBlitz3.ab2@21554>   MOVEA.l D0,A0
0003EA30 <AmiBlitz3.ab2@21555>   MOVE.l A0,$4(A2)
0003EA34 <AmiBlitz3.ab2@21556>   MOVE.w $8(A2),D1
0003EA38 <AmiBlitz3.ab2@21557>    BEQ.w JL_0_CC8E
0003EA3A <AmiBlitz3.ab2@21558>   SUBQ.w #1,D1
0003EA40 <AmiBlitz3.ab2@21559>   MOVEA.l ptr_macrobuffer_begin,A1
0003EA42 <AmiBlitz3.ab2@21562>     MOVE.b (A1)+,(A0)+
0003EA46 <AmiBlitz3.ab2@21563>   DBF D1,JL_0_CC88
0003EA4C <AmiBlitz3.ab2@21566> JMP get1bytemain
0003EA4E <AmiBlitz3.ab2@21570>   MOVE.w D0,D1
0003EA50 <AmiBlitz3.ab2@21571>   LSR.w #8,D1
0003EA52 <AmiBlitz3.ab2@21572>   MOVE.b D1,(A0)+
0003EA54 <AmiBlitz3.ab2@21575>   MOVEQ.l #-$01,D2
0003EA56 <AmiBlitz3.ab2@21576>   MOVE.b D0,(A0)+
0003EA5C <AmiBlitz3.ab2@21577>   CMPA.l ptr_macrobuffer_end,A0
0003EA60 <AmiBlitz3.ab2@21578>    BCC.w macbigerr
0003EA62 <AmiBlitz3.ab2@21579> RTS
0003EA64 <AmiBlitz3.ab2@21583>   MOVE.l d0,-(a7)
0003EA66 <AmiBlitz3.ab2@21584>   MOVEQ #0,d0
0003EA6C <AmiBlitz3.ab2@21585>   CLR.b skiptoggle
0003EA6E <AmiBlitz3.ab2@21588>     MOVE.b (a5),d0
0003EA72 <AmiBlitz3.ab2@21589>     BEQ 'l3
0003EA76 <AmiBlitz3.ab2@21590>     CMP.b #";",d0
0003EA7A <AmiBlitz3.ab2@21591>     BNE 'l2
0003EA82 <AmiBlitz3.ab2@21592>     MOVE.b #1,skiptoggle
0003EA88 <AmiBlitz3.ab2@21595>     TST.b skiptoggle
0003EA8C <AmiBlitz3.ab2@21596>     BNE 'l4
0003EA90 <AmiBlitz3.ab2@21597>     CMP.b #":",d0
0003EA94 <AmiBlitz3.ab2@21598>     BEQ 'l3
0003EA96 <AmiBlitz3.ab2@21601>     ADDQ #1,a5
0003EA9A <AmiBlitz3.ab2@21602> BRA 'loop
0003EAA0 <AmiBlitz3.ab2@21605>   MOVE.w d0,lastchar
0003EAA2 <AmiBlitz3.ab2@21606>   MOVE.l (a7)+,d0
0003EAA4 <AmiBlitz3.ab2@21607> RTS
0003EAA8 <AmiBlitz3.ab2@21611>   BSR.w ifchar
0003EAAC <AmiBlitz3.ab2@21612>    BNE.w JUMP_syntaxerr
0003EAAE <AmiBlitz3.ab2@21613>   MOVE.w D0,D1
0003EAB4 <AmiBlitz3.ab2@21614>   JSR get1bytemain
0003EAB8 <AmiBlitz3.ab2@21615>   BSR.w ifchar
0003EABC <AmiBlitz3.ab2@21616>    BNE.w JL_0_CCDA
0003EABE <AmiBlitz3.ab2@21617>   ADDQ.w #1,D0
0003EAC0 <AmiBlitz3.ab2@21618>   MOVE.w D0,D2
0003EAC2 <AmiBlitz3.ab2@21619>   ADD.w D0,D0
0003EAC4 <AmiBlitz3.ab2@21620>   ADD.w D2,D0
0003EAC6 <AmiBlitz3.ab2@21621>   ADD.w D0,D1
0003EAC8 <AmiBlitz3.ab2@21622>   MOVE.w D1,D0
0003EACC <AmiBlitz3.ab2@21623>   ANDI.w #$3,D0
0003EAD0 <AmiBlitz3.ab2@21624>   CMP.w #$3,D0
0003EAD4 <AmiBlitz3.ab2@21625>    BEQ.w JUMP_syntaxerr
0003EADA <AmiBlitz3.ab2@21627>   JSR get1bytemain
0003EADC <AmiBlitz3.ab2@21630> RTS
0003EADE <AmiBlitz3.ab2@21636> thetst1:  TST.b D0
0003EAE0 <AmiBlitz3.ab2@21637> thetst2:  TST.w D0
0003EAE2 <AmiBlitz3.ab2@21638> thetst3:  TST.l D0
0003EAE4 <AmiBlitz3.ab2@21639> thetst4:  TST.l (A7)+                                      ;Any Length?
0003EAE8 <AmiBlitz3.ab2@21640> thetst5:  JSR _Reschedule(A6)
0003EAEC <AmiBlitz3.ab2@21642> posbr:    BEQ.w posbr
0003EAF0 <AmiBlitz3.ab2@21643> negbr:    BNE.w negbr
0003EAF2 <AmiBlitz3.ab2@21647>   MOVEQ.l #-$01,D2
0003EAF6 <AmiBlitz3.ab2@21648> BRA.w JL_0_D04C
0003EAFC <AmiBlitz3.ab2@21652>   CLR.l fp0addr
0003EAFE <AmiBlitz3.ab2@21653>   MOVEQ.l #$01,D1                                          ;while flag
0003EB00 <AmiBlitz3.ab2@21654>   MOVEQ.l #$00,D2                                          ;negate flag
0003EB04 <AmiBlitz3.ab2@21655> BRA.w JL_0_D04E
0003EB0A <AmiBlitz3.ab2@21659>   LEA firstrep,A2
0003EB0C <AmiBlitz3.ab2@21660>   MOVEQ.l #$08,D2
0003EB10 <AmiBlitz3.ab2@21661> BRA.w freeslist
0003EB14 <AmiBlitz3.ab2@21665>   LEA firstsel(PC),A2
0003EB16 <AmiBlitz3.ab2@21666>   MOVEQ.l #$0E,D2
0003EB18 <AmiBlitz3.ab2@21671>   MOVEQ.l #$00,D3
0003EB1A <AmiBlitz3.ab2@21679>   MOVE.l (A2),D0
0003EB1C <AmiBlitz3.ab2@21680>   CLR.l (A2)
0003EB1E <AmiBlitz3.ab2@21681>   MOVEA.l D0,A2
0003EB24 <AmiBlitz3.ab2@21682>   MOVEA.l _execbase,A6
0003EB28 <AmiBlitz3.ab2@21685>     CMPA.w #$0,A2
0003EB2C <AmiBlitz3.ab2@21686>      BEQ.w freelist__done
0003EB2E <AmiBlitz3.ab2@21687>     TST.w D3
0003EB32 <AmiBlitz3.ab2@21688>      BEQ.w freelist__skip
0003EB36 <AmiBlitz3.ab2@21689>     MOVEM.l D2-D3/A2,-(A7)
0003EB38 <AmiBlitz3.ab2@21690>     ADDA.w D3,A2
0003EB3A <AmiBlitz3.ab2@21691>     MOVE.l D4,D2
0003EB3E <AmiBlitz3.ab2@21692>     BSR.w freeslist
0003EB42 <AmiBlitz3.ab2@21693>     MOVEM.l (A7)+,D2-D3/A2
0003EB44 <AmiBlitz3.ab2@21696>     MOVEA.l A2,A1
0003EB46 <AmiBlitz3.ab2@21697>     MOVE.l D2,D0
0003EB48 <AmiBlitz3.ab2@21698>     MOVEA.l (A2),A2
0003EB4E <AmiBlitz3.ab2@21699>     MOVE.l mempool,a0
0003EB52 <AmiBlitz3.ab2@21700>     JSR _FreePooled(A6)
0003EB56 <AmiBlitz3.ab2@21701> BRA.w freelist__loop
0003EB58 <AmiBlitz3.ab2@21704> RTS
0003EB5E <AmiBlitz3.ab2@21707> JMP eselerr
0003EB62 <AmiBlitz3.ab2@21710> firstsel:  Ds.l 1
0003EB66 <AmiBlitz3.ab2@21713> selpushb:   Dc.b $02,$40,$00,$FF                           ;ANDI.W  #$00FF,D0
0003EB68 <AmiBlitz3.ab2@21716> selpushw:   MOVE.w D0,-(A7)
0003EB6A <AmiBlitz3.ab2@21718> selpushl:   MOVE.l D0,-(A7)
0003EB6E <AmiBlitz3.ab2@21720> selpushs:   LEA $4(A7),A2                                  ;(a7)=len of string!
0003EB72 <AmiBlitz3.ab2@21723> selcomb:    ANDI.w #$FF,D0
0003EB74 <AmiBlitz3.ab2@21724> selcomw:    CMP.w (A7),D0
0003EB76 <AmiBlitz3.ab2@21726> selcoml:    CMP.l (A7),D0
0003EB7A <AmiBlitz3.ab2@21728> selbne:     BNE.w selbne
0003EB7C <AmiBlitz3.ab2@21730> endsel:     ADDQ.w #8,A7
0003EB80 <AmiBlitz3.ab2@21736>   MOVE.l firstsel(PC),D0                                  
0003EB84 <AmiBlitz3.ab2@21737>    BEQ.w JUMP_eselerr
0003EB86 <AmiBlitz3.ab2@21738>   MOVEA.l D0,A2
0003EB8A <AmiBlitz3.ab2@21739>    BSR.w JL_0_CDFC
0003EB90 <AmiBlitz3.ab2@21742>   MOVEA.l _execbase,A6
0003EB94 <AmiBlitz3.ab2@21745>   MOVE.l $4(A2),D0
0003EB98 <AmiBlitz3.ab2@21746>    BEQ.w doendsel__done
0003EB9A <AmiBlitz3.ab2@21747>   MOVEA.l D0,A3
0003EB9E <AmiBlitz3.ab2@21748>   MOVEA.l $4(A3),A0
0003EBA4 <AmiBlitz3.ab2@21749>   MOVE.l destpointer,D1
0003EBA6 <AmiBlitz3.ab2@21750>   SUB.l A0,D1
0003EBAC <AmiBlitz3.ab2@21752>     TST.b fast
0003EBB0 <AmiBlitz3.ab2@21753>     BEQ doendsel__loop_l1
0003EBB6 <AmiBlitz3.ab2@21754>     MOVE.w dontwrite,D0
0003EBBA <AmiBlitz3.ab2@21755>     BNE.w doendsel__skip
0003EBBC <AmiBlitz3.ab2@21756>     ADDQ.l #2,d1
0003EBC0 <AmiBlitz3.ab2@21757>     MOVE.l d1,-2(a0)
0003EBC4 <AmiBlitz3.ab2@21758>   BRA doendsel__skip
0003EBCA <AmiBlitz3.ab2@21762>   TST.w dontwrite
0003EBCE <AmiBlitz3.ab2@21763>      BNE.w doendsel__skip
0003EBD4 <AmiBlitz3.ab2@21764>   CMP.l #MaxWordSgnd,D1
0003EBD8 <AmiBlitz3.ab2@21765>    BHI.w JUMP_cbraerr
0003EBDA <AmiBlitz3.ab2@21766>   MOVE.w D1,(A0)
0003EBDE <AmiBlitz3.ab2@21769>   MOVE.l (A3),$4(A2)                                       ;next of me is new first
0003EBE0 <AmiBlitz3.ab2@21770>   MOVEA.l A3,A1
0003EBE2 <AmiBlitz3.ab2@21771>   MOVEQ.l #$08,D0
0003EBE8 <AmiBlitz3.ab2@21772>   MOVE.l mempool,a0
0003EBEC <AmiBlitz3.ab2@21773>    JSR _FreePooled(A6)
0003EBF0 <AmiBlitz3.ab2@21774> BRA.w doendsel__loop
0003EBF6 <AmiBlitz3.ab2@21777>   JSR popselect                                            ;fix stack on select
0003EBFA <AmiBlitz3.ab2@21778>   MOVEA.l firstsel(PC),A1
0003EC00 <AmiBlitz3.ab2@21779>   MOVE.l (A1),firstsel
0003EC02 <AmiBlitz3.ab2@21780>   MOVEQ.l #$0E,D0
0003EC08 <AmiBlitz3.ab2@21781>   MOVEA.l _execbase,A6
0003EC0E <AmiBlitz3.ab2@21782>   MOVE.l mempool,a0
0003EC12 <AmiBlitz3.ab2@21783>   JSR _FreePooled(A6)
0003EC18 <AmiBlitz3.ab2@21784> JMP get1bytemain
0003EC1A <AmiBlitz3.ab2@21788>   MOVEA.l (A7)+,A1
0003EC1C <AmiBlitz3.ab2@21789>   SUBQ.w #8,A1
0003EC1E <AmiBlitz3.ab2@21790>   MOVEQ.l #$09,D0
0003EC20 <AmiBlitz3.ab2@21791>   ADD.l (A1),D0
0003EC22 <AmiBlitz3.ab2@21794>   ADDQ.w #2,A7                                             ;for runtime errs!
0003EC26 <AmiBlitz3.ab2@21799>   MOVE.l firstsel(PC),D0
0003EC2A <AmiBlitz3.ab2@21800>    BEQ.w JUMP_defaerr
0003EC2C <AmiBlitz3.ab2@21801>   MOVEA.l D0,A2
0003EC30 <AmiBlitz3.ab2@21802>   BSR.w JL_0_CE26
0003EC34 <AmiBlitz3.ab2@21803>   BSR.w JL_0_CDFC
0003EC38 <AmiBlitz3.ab2@21804>   CLR.l $8(A2)
0003EC3C <AmiBlitz3.ab2@21805>   MOVE.w $C(A2),D2
0003EC40 <AmiBlitz3.ab2@21806> BRA.w JL_0_CE5E
0003EC46 <AmiBlitz3.ab2@21809> JMP defaerr
0003EC4A <AmiBlitz3.ab2@21812>   MOVE.l $8(A2),D0
0003EC4E <AmiBlitz3.ab2@21813>    BEQ.w JL_0_CE24
0003EC50 <AmiBlitz3.ab2@21814>   MOVEA.l D0,A0
0003EC56 <AmiBlitz3.ab2@21815>   MOVE.l destpointer,D1
0003EC58 <AmiBlitz3.ab2@21816>   SUB.l A0,D1
0003EC5E <AmiBlitz3.ab2@21818>     TST.b fast
0003EC62 <AmiBlitz3.ab2@21819>     BEQ 'l1
0003EC68 <AmiBlitz3.ab2@21820>     TST.w dontwrite
0003EC6C <AmiBlitz3.ab2@21821>     BNE.w JL_0_CE24
0003EC6E <AmiBlitz3.ab2@21822>     ADDQ.l #2,d1
0003EC72 <AmiBlitz3.ab2@21823>     MOVE.l D1,-2(A0)
0003EC76 <AmiBlitz3.ab2@21824>   BRA JL_0_CE24
0003EC7C <AmiBlitz3.ab2@21828>   TST.w dontwrite
0003EC80 <AmiBlitz3.ab2@21829>      BNE.w JL_0_CE24
0003EC86 <AmiBlitz3.ab2@21830>    CMP.l #MaxWordSgnd,D1
0003EC8A <AmiBlitz3.ab2@21831>    BHI.w JUMP_cbraerr
0003EC8C <AmiBlitz3.ab2@21832>   MOVE.w D1,(A0)
0003EC8E <AmiBlitz3.ab2@21835> RTS
0003EC94 <AmiBlitz3.ab2@21838> JMP cbraerr
0003EC98 <AmiBlitz3.ab2@21842>   MOVE.l $8(A2),D0
0003EC9C <AmiBlitz3.ab2@21843>    BEQ.w JL_0_CE5C
0003EC9E <AmiBlitz3.ab2@21844>   MOVEA.l D0,A3
0003ECA2 <AmiBlitz3.ab2@21845>   MOVE.w #$6000,D1
0003ECA8 <AmiBlitz3.ab2@21847>    TST.b fast
0003ECAC <AmiBlitz3.ab2@21848>    BEQ 'l1
0003ECB2 <AmiBlitz3.ab2@21849>    OR.l #$ff,d1
0003ECB6 <AmiBlitz3.ab2@21850>    BSR writeword
0003ECBA <AmiBlitz3.ab2@21854>   BSR.w writeword
0003ECBC <AmiBlitz3.ab2@21855>   MOVEQ.l #$08,D0
0003ECBE <AmiBlitz3.ab2@21856>   MOVEQ.l #$01,D1
0003ECC4 <AmiBlitz3.ab2@21857>   MOVEA.l _execbase,A6
0003ECCA <AmiBlitz3.ab2@21858>   MOVE.l mempool,a0
0003ECCE <AmiBlitz3.ab2@21859>   JSR _AllocPooled(a6)
0003ECD0 <AmiBlitz3.ab2@21861>   MOVEA.l D0,A0
0003ECD4 <AmiBlitz3.ab2@21862>   MOVE.l $4(A2),(A0)
0003ECD8 <AmiBlitz3.ab2@21863>   MOVE.l A0,$4(A2)
0003ECE0 <AmiBlitz3.ab2@21864>   MOVE.l destpointer,$4(A0)
0003ECE4 <AmiBlitz3.ab2@21865> BRA.w writeword
0003ECE6 <AmiBlitz3.ab2@21868> RTS
0003ECEC <AmiBlitz3.ab2@21872>   TST.b debugmode
0003ECF0 <AmiBlitz3.ab2@21873>    BEQ.w JL_0_CE7A
0003ECF4 <AmiBlitz3.ab2@21874>   MOVE.w #$C313,D1
0003ECF8 <AmiBlitz3.ab2@21875>   CMP.w #$3,D2
0003ECFC <AmiBlitz3.ab2@21876>    BCS.w JL_0_CE76
0003ECFE <AmiBlitz3.ab2@21877>   ADDQ.w #1,D1
0003ED02 <AmiBlitz3.ab2@21880> BRA.w Atokejsr
0003ED04 <AmiBlitz3.ab2@21883> RTS
0003ED0A <AmiBlitz3.ab2@21887> JMP caseerr
0003ED0E <AmiBlitz3.ab2@21890>   MOVE.l firstsel(PC),D0
0003ED12 <AmiBlitz3.ab2@21891>    BEQ.w JUMP_caseerr
0003ED14 <AmiBlitz3.ab2@21892>   MOVEA.l D0,A2
0003ED18 <AmiBlitz3.ab2@21893>    BSR.w JL_0_CE26
0003ED1C <AmiBlitz3.ab2@21894>    BSR.w JL_0_CDFC
0003ED20 <AmiBlitz3.ab2@21895>   MOVE.w $C(A2),D2
0003ED22 <AmiBlitz3.ab2@21896>   MOVE.w D2,-(A7)
0003ED26 <AmiBlitz3.ab2@21897>    BSR.w JL_0_CE5E
0003ED28 <AmiBlitz3.ab2@21898>   MOVE.w (A7),D2
0003ED2C <AmiBlitz3.ab2@21899>    BSR.w bakeval
0003ED2E <AmiBlitz3.ab2@21900>   MOVE.w (A7)+,D2
0003ED32 <AmiBlitz3.ab2@21901>   LEA selcomb(PC),A0
0003ED36 <AmiBlitz3.ab2@21902>   LEA selcombf(PC),A1
0003ED3A <AmiBlitz3.ab2@21903>   CMP.w #$1,D2
0003ED3E <AmiBlitz3.ab2@21904>    BEQ.w JL_0_CED8
0003ED42 <AmiBlitz3.ab2@21905>   LEA selcomw(PC),A0
0003ED46 <AmiBlitz3.ab2@21906>   CMP.w #$2,D2
0003ED4A <AmiBlitz3.ab2@21907>    BEQ.w JL_0_CED8
0003ED4E <AmiBlitz3.ab2@21908>   LEA selcoml(PC),A0
0003ED52 <AmiBlitz3.ab2@21909>   LEA selcomlf(PC),A1
0003ED56 <AmiBlitz3.ab2@21910>   CMP.w #$7,D2
0003ED5A <AmiBlitz3.ab2@21911>    BCS.w JL_0_CED8
0003ED5E <AmiBlitz3.ab2@21913>   MOVE.w #$CE01,D1
0003ED62 <AmiBlitz3.ab2@21914>    BSR.w Atokejsr
0003ED66 <AmiBlitz3.ab2@21915> BRA.w JL_0_CEDC
0003ED6A <AmiBlitz3.ab2@21918>   BSR.w pokecode
0003ED6E <AmiBlitz3.ab2@21921>   MOVE.w selbne(PC),D1
0003ED74 <AmiBlitz3.ab2@21923>     TST.b fast
0003ED78 <AmiBlitz3.ab2@21924>     BEQ 'l1
0003ED7E <AmiBlitz3.ab2@21925>     ORI.l #$ff,d1
0003ED82 <AmiBlitz3.ab2@21926>     BSR writeword
0003ED86 <AmiBlitz3.ab2@21929>   BSR.w writeword
0003ED8A <AmiBlitz3.ab2@21930>   MOVEA.l firstsel(PC),A0
0003ED92 <AmiBlitz3.ab2@21931>   MOVE.l destpointer,$8(A0)
0003ED96 <AmiBlitz3.ab2@21932> BRA.w writeword
0003ED9A <AmiBlitz3.ab2@21936> pcchk:      Dc.b $3F,$3C,$73,$45                           ;MOVE.W  #$7345,-(A7)   ;#"sE",-(a7) org source
0003ED9C <AmiBlitz3.ab2@21937> clrst:      Dc.b $42,$A7                                   ;CLR.L   -(A7)
0003EDA0 <AmiBlitz3.ab2@21940> sellineat:  Ds.l 1
0003EDA6 <AmiBlitz3.ab2@21946>   TST.b debugmode
0003EDAA <AmiBlitz3.ab2@21947>    BEQ.w JL_0_CF0E
0003EDAE <AmiBlitz3.ab2@21948>   MOVE.l pcchk(PC),D1                                      ;move #"sE",-(a7)
0003EDB2 <AmiBlitz3.ab2@21949>    BSR.w writelong
0003EDBC <AmiBlitz3.ab2@21952>   MOVE.l linenumat,sellineat
0003EDC6 <AmiBlitz3.ab2@21954>    MOVE.l destpointer,pushpc
0003EDD0 <AmiBlitz3.ab2@21955>   MOVE.l hunkoffsetbase,pushoff
0003EDD2 <AmiBlitz3.ab2@21956>   MOVEQ.l #$00,D2
0003EDD6 <AmiBlitz3.ab2@21957>    BSR.w bakevalu                                          ;Evaluate
0003EDDA <AmiBlitz3.ab2@21958>    BSR.w JL_0_B5D2
0003EDDE <AmiBlitz3.ab2@21959>   CMP.w #$7,D2
0003EDE2 <AmiBlitz3.ab2@21960>    BNE.w JL_0_CF36
0003EDE6 <AmiBlitz3.ab2@21961>   MOVE.w clrst(PC),D1
0003EDEA <AmiBlitz3.ab2@21962>    BSR.w writeword
0003EDEE <AmiBlitz3.ab2@21965>    BSR.w JL_0_B63C
0003EDF2 <AmiBlitz3.ab2@21966>   LEA selpushb(PC),A0
0003EDF6 <AmiBlitz3.ab2@21967>   LEA selpushbf(PC),A1
0003EDFA <AmiBlitz3.ab2@21968>   CMP.w #$1,D2
0003EDFE <AmiBlitz3.ab2@21969>    BEQ.w JL_0_CF88
0003EE02 <AmiBlitz3.ab2@21970>   LEA selpushw(PC),A0
0003EE06 <AmiBlitz3.ab2@21971>   CMP.w #$2,D2
0003EE0A <AmiBlitz3.ab2@21972>    BEQ.w JL_0_CF88
0003EE0E <AmiBlitz3.ab2@21973>   LEA selpushl(PC),A0
0003EE12 <AmiBlitz3.ab2@21974>   LEA selpushlf(PC),A1
0003EE16 <AmiBlitz3.ab2@21975>   CMP.w #$7,D2
0003EE1A <AmiBlitz3.ab2@21976>    BCS.w JL_0_CF88
0003EE20 <AmiBlitz3.ab2@21978>   MOVE.w moved0a3,D1                                       ;d0 to a3!
0003EE24 <AmiBlitz3.ab2@21979>    BSR.w writeword
0003EE28 <AmiBlitz3.ab2@21980>   LEA selpushs(PC),A0
0003EE2C <AmiBlitz3.ab2@21981>   LEA selpushsf(PC),A1
0003EE30 <AmiBlitz3.ab2@21982>    BSR.w pokecode
0003EE34 <AmiBlitz3.ab2@21983>   MOVE.w #$C701,D1
0003EE38 <AmiBlitz3.ab2@21984>    BSR.w Atokejsr
0003EE3C <AmiBlitz3.ab2@21985> BRA.w JL_0_CF8C
0003EE40 <AmiBlitz3.ab2@21988>   BSR.w pokecode
0003EE42 <AmiBlitz3.ab2@21991>   MOVEQ.l #$0E,D0
0003EE44 <AmiBlitz3.ab2@21992>   MOVEQ.l #$01,D1
0003EE4A <AmiBlitz3.ab2@21993>   MOVEA.l _execbase,A6
0003EE50 <AmiBlitz3.ab2@21995>   MOVE.l mempool,a0
0003EE54 <AmiBlitz3.ab2@21996>   JSR _AllocPooled(a6)
0003EE56 <AmiBlitz3.ab2@21997>   MOVEA.l D0,A0
0003EE5A <AmiBlitz3.ab2@21998>   MOVE.l firstsel(PC),(A0)
0003EE60 <AmiBlitz3.ab2@21999>   MOVE.l A0,firstsel
0003EE64 <AmiBlitz3.ab2@22000>   CLR.l $4(A0)
0003EE68 <AmiBlitz3.ab2@22001>   CLR.l $8(A0)
0003EE6C <AmiBlitz3.ab2@22002>   MOVE.w D2,$C(A0)
0003EE6E <AmiBlitz3.ab2@22003> RTS
0003EE74 <AmiBlitz3.ab2@22007>   MOVE.l firstrep,D0
0003EE78 <AmiBlitz3.ab2@22008>    BEQ.w JUMP_unterr1
0003EE7C <AmiBlitz3.ab2@22009>   MOVE.w #$6000,D1
0003EE80 <AmiBlitz3.ab2@22010>   BSR.w writeword
0003EE82 <AmiBlitz3.ab2@22011>   MOVEA.l D0,A0
0003EE86 <AmiBlitz3.ab2@22012>   MOVE.l $4(A0),D1
0003EE8C <AmiBlitz3.ab2@22013>   SUB.l destpointer,D1
0003EE8E <AmiBlitz3.ab2@22014>   TST.w D1
0003EE92 <AmiBlitz3.ab2@22015>    BPL.w JUMP_unterr2
0003EE96 <AmiBlitz3.ab2@22016>   BSR.w writeword
0003EE9C <AmiBlitz3.ab2@22017>   MOVEA.l _execbase,A6
0003EEA0 <AmiBlitz3.ab2@22018> BRA.w JL_0_D036
0003EEA6 <AmiBlitz3.ab2@22021> JMP unterr2
0003EEAC <AmiBlitz3.ab2@22024> JMP unterr1
0003EEB2 <AmiBlitz3.ab2@22028>   MOVE.l firstrep,D0
0003EEB6 <AmiBlitz3.ab2@22029>    BEQ.w JUMP_unterr1
0003EEBA <AmiBlitz3.ab2@22030>   BSR.w do_if
0003EEC0 <AmiBlitz3.ab2@22031>   JSR reget
0003EEC4 <AmiBlitz3.ab2@22032>    BNE.w JUMP_syntaxerr
0003EECA <AmiBlitz3.ab2@22033>   MOVE.w dontwrite,D1
0003EECE <AmiBlitz3.ab2@22034>    BNE.w JL_0_D020
0003EED4 <AmiBlitz3.ab2@22035>   MOVEA.l firstrep,A0
0003EEDA <AmiBlitz3.ab2@22036>   MOVEA.l destpointer,A1
0003EEE0 <AmiBlitz3.ab2@22038>     TST.b fast
0003EEE4 <AmiBlitz3.ab2@22039>     BEQ 'l1
0003EEE6 <AmiBlitz3.ab2@22040>     SUBQ.w #4,a1
0003EEEA <AmiBlitz3.ab2@22041>     MOVE.l $4(A0),D2
0003EEEC <AmiBlitz3.ab2@22042>     SUB.l A1,D2
0003EEEE <AmiBlitz3.ab2@22043>     MOVE.l d2,(a1)
0003EEF2 <AmiBlitz3.ab2@22044>   BRA JL_0_D020
0003EEF4 <AmiBlitz3.ab2@22048>   SUBQ.w #2,A1
0003EEF8 <AmiBlitz3.ab2@22049>   MOVE.l $4(A0),D2
0003EEFA <AmiBlitz3.ab2@22050>   SUB.l A1,D2
0003EEFC <AmiBlitz3.ab2@22051>   TST.w D2
0003EF00 <AmiBlitz3.ab2@22052>    BPL.w JUMP_unterr2
0003EF02 <AmiBlitz3.ab2@22053>   MOVE.w D2,(A1)
0003EF08 <AmiBlitz3.ab2@22056>   MOVEA.l firstiff,A1
0003EF0E <AmiBlitz3.ab2@22057>   MOVE.l (A1),firstiff
0003EF10 <AmiBlitz3.ab2@22058>   MOVEQ.l #$0E,D0
0003EF16 <AmiBlitz3.ab2@22059>   MOVEA.l _execbase,A6
0003EF1C <AmiBlitz3.ab2@22060>   MOVE.l mempool,a0
0003EF20 <AmiBlitz3.ab2@22061>   JSR _FreePooled(A6)
0003EF26 <AmiBlitz3.ab2@22064>   MOVEA.l firstrep,A1
0003EF2C <AmiBlitz3.ab2@22065>   MOVE.l (A1),firstrep
0003EF2E <AmiBlitz3.ab2@22066>   MOVEQ.l #$08,D0
0003EF34 <AmiBlitz3.ab2@22067>   MOVE.l mempool,a0
0003EF38 <AmiBlitz3.ab2@22068> JMP _FreePooled(A6)
0003EF3C <AmiBlitz3.ab2@22071> iflineat:   Ds.l 1
0003EF3E <AmiBlitz3.ab2@22075>   MOVEQ.l #$00,D2
0003EF44 <AmiBlitz3.ab2@22076>   TST.b fast
0003EF48 <AmiBlitz3.ab2@22077>   BEQ 'l1
0003EF50 <AmiBlitz3.ab2@22078>   MOVE.b #1,nostringopt
0003EF58 <AmiBlitz3.ab2@22079>   MOVE.b #1,iniffcommand
0003EF5A <AmiBlitz3.ab2@22083>   MOVEQ.l #$00,D1
0003EF5C <AmiBlitz3.ab2@22086>   MOVE.w D1,-(A7)
0003EF62 <AmiBlitz3.ab2@22087>   MOVE.l destpointer,-(A7)
0003EF64 <AmiBlitz3.ab2@22088>   MOVE.w D2,-(A7)
0003EF6E <AmiBlitz3.ab2@22089>   MOVE.l linenumat,iflineat
0003EF70 <AmiBlitz3.ab2@22090>   MOVEQ.l #$00,D2
0003EF7A <AmiBlitz3.ab2@22091>   MOVE.b optistring,optistring2
0003EF82 <AmiBlitz3.ab2@22092>   MOVE.b #1,optistring
0003EF86 <AmiBlitz3.ab2@22093>   BSR.w bakevalu
0003EF90 <AmiBlitz3.ab2@22094>   MOVE.b optistring2,optistring
0003EF94 <AmiBlitz3.ab2@22095>   CMP.w #$5,D2
0003EF98 <AmiBlitz3.ab2@22096>    BEQ.w JL_0_D09C
0003EF9C <AmiBlitz3.ab2@22097>   MOVE.w thetst1(PC),D1
0003EFA0 <AmiBlitz3.ab2@22098>   CMP.w #$1,D2
0003EFA4 <AmiBlitz3.ab2@22099>    BEQ.w writebranchcode
0003EFA8 <AmiBlitz3.ab2@22100>   MOVE.w thetst2(PC),D1
0003EFAC <AmiBlitz3.ab2@22101>   CMP.w #$2,D2
0003EFB0 <AmiBlitz3.ab2@22102>    BEQ.w writebranchcode
0003EFB4 <AmiBlitz3.ab2@22103>   MOVE.w thetst4(PC),D1
0003EFB8 <AmiBlitz3.ab2@22104>   CMP.w #$7,D2
0003EFBC <AmiBlitz3.ab2@22105>    BEQ.w writebranchcode
0003EFC0 <AmiBlitz3.ab2@22106>   MOVE.w thetst3(PC),D1
0003EFC4 <AmiBlitz3.ab2@22107> BRA.w writebranchcode
0003EFCA <AmiBlitz3.ab2@22110>   TST.b fpu
0003EFCE <AmiBlitz3.ab2@22111>   BEQ 'dofpu
0003EFD4 <AmiBlitz3.ab2@22112>   MOVE.l #$f200003a,d1
0003EFD8 <AmiBlitz3.ab2@22113>   BSR writelong
0003EFDC <AmiBlitz3.ab2@22114>   MOVE.w #$f2c1,d1
0003EFE0 <AmiBlitz3.ab2@22115>   BSR writeword
0003EFE4 <AmiBlitz3.ab2@22116>   BSR writelong
0003EFE6 <AmiBlitz3.ab2@22117>   ADDQ.l #2,a7
0003EFEA <AmiBlitz3.ab2@22118> BRA.w br2
0003EFEE <AmiBlitz3.ab2@22121>    MOVE.w #$C900,D1
0003EFF2 <AmiBlitz3.ab2@22122>    BSR.w Atokejsr
0003EFF6 <AmiBlitz3.ab2@22123>   MOVE.l thetst5(PC),D1
0003EFFA <AmiBlitz3.ab2@22124>    BSR.w writelong
0003EFFE <AmiBlitz3.ab2@22125> BRA.w JL_0_D0B4
0003F004 <AmiBlitz3.ab2@22129>          CLR.b iniffcommand
0003F00A <AmiBlitz3.ab2@22130>          TST.b fast                                        ;branchcode
0003F00E <AmiBlitz3.ab2@22131>          BEQ b6
0003F014 <AmiBlitz3.ab2@22132>          TST.b fpu
0003F018 <AmiBlitz3.ab2@22133>          BEQ 'nofpu
0003F01E <AmiBlitz3.ab2@22137>           MOVE.l destpointer,a0
0003F024 <AmiBlitz3.ab2@22138>          SUB.l load_var_addr,a0
0003F02A <AmiBlitz3.ab2@22139>          CMP.l #4,a0
0003F02E <AmiBlitz3.ab2@22140>          BEQ 'nofpu
0003F036 <AmiBlitz3.ab2@22141>          CMP.l #$f2400014,-4(a4)                           ;<
0003F03A <AmiBlitz3.ab2@22142>          BNE 'nolt
0003F040 <AmiBlitz3.ab2@22143>          SUBQ.l #2,destpointer
0003F046 <AmiBlitz3.ab2@22144>          MOVE.w #$f293,-4(a4)                              ;

0003F04A <AmiBlitz3.ab2@22145> BRA 'brf
0003F052 <AmiBlitz3.ab2@22148>   CMP.l #$f2400015,-4(a4)                                  ;<=
0003F056 <AmiBlitz3.ab2@22149>          BNE 'nole
0003F05C <AmiBlitz3.ab2@22150>          SUBQ.l #2,destpointer
0003F062 <AmiBlitz3.ab2@22151>          MOVE.w #$f292,-4(a4)
0003F066 <AmiBlitz3.ab2@22152> BRA 'brf
0003F06E <AmiBlitz3.ab2@22155>   CMP.l #$f2400013,-4(a4)                                  ;=>
0003F072 <AmiBlitz3.ab2@22156>          BNE 'noge
0003F078 <AmiBlitz3.ab2@22157>          SUBQ.l #2,destpointer
0003F07E <AmiBlitz3.ab2@22158>          MOVE.w #$f294,-4(a4)
0003F082 <AmiBlitz3.ab2@22159> BRA 'brf
0003F08A <AmiBlitz3.ab2@22162>   CMP.l #$f2400012,-4(a4)                                  ;>
0003F08E <AmiBlitz3.ab2@22163>          BNE 'nogt
0003F094 <AmiBlitz3.ab2@22164>          SUBQ.l #2,destpointer
0003F09A <AmiBlitz3.ab2@22165>          MOVE.w #$f295,-4(a4)
0003F09E <AmiBlitz3.ab2@22166> BRA 'brf
0003F0A6 <AmiBlitz3.ab2@22169>   CMP.l #$f2400001,-4(a4)                                  ;=
0003F0AA <AmiBlitz3.ab2@22170>          BNE 'noeq
0003F0B0 <AmiBlitz3.ab2@22171>          SUBQ.l #2,destpointer
0003F0B6 <AmiBlitz3.ab2@22172>          MOVE.w #$f28e,-4(a4)
0003F0BA <AmiBlitz3.ab2@22173> BRA 'brf
0003F0C2 <AmiBlitz3.ab2@22176>   CMP.l #$f240000e,-4(a4)                                  ;<>
0003F0C6 <AmiBlitz3.ab2@22177>          BNE 'none
0003F0CC <AmiBlitz3.ab2@22178>          SUBQ.l #2,destpointer
0003F0D2 <AmiBlitz3.ab2@22179>          MOVE.w #$f281,-4(a4)
0003F0D4 <AmiBlitz3.ab2@22182>   ADDQ.l #2,a7
0003F0DA <AmiBlitz3.ab2@22184>     TST.b fast
0003F0DE <AmiBlitz3.ab2@22185>     BEQ 'l1
0003F0E4 <AmiBlitz3.ab2@22186>     OR.b #$40,-3(a4)
0003F0E8 <AmiBlitz3.ab2@22187>     BSR writeword
0003F0EC <AmiBlitz3.ab2@22191>  BSR writeword
0003F0F0 <AmiBlitz3.ab2@22192> BRA.s br2
0003F0F6 <AmiBlitz3.ab2@22196>   MOVE.l destpointer,a0
0003F0FC <AmiBlitz3.ab2@22197>          SUB.l load_var_addr,a0
0003F102 <AmiBlitz3.ab2@22198>          CMP.l #4,a0
0003F106 <AmiBlitz3.ab2@22199>          BEQ JL_0_D0B4
0003F10C <AmiBlitz3.ab2@22200>          CMP.w #$4eb9,-6(a4)
0003F110 <AmiBlitz3.ab2@22201>          BEQ b6
0003F116 <AmiBlitz3.ab2@22202>          CMP.w #$5ec0,-2(a4)                               ;>
0003F11A <AmiBlitz3.ab2@22203>      BNE.s 'lb1
0003F120 <AmiBlitz3.ab2@22204>          MOVE.w #$6f00,-2(a4)                              ;ble
0003F124 <AmiBlitz3.ab2@22205> BRA.s br
0003F12A <AmiBlitz3.ab2@22208>  CMP.w #$5dc0,-2(a4)                                       ;<
0003F12E <AmiBlitz3.ab2@22209>   BNE.s 'lb2
0003F134 <AmiBlitz3.ab2@22210>          MOVE.w #$6c00,-2(a4)                              ;bge
0003F138 <AmiBlitz3.ab2@22211> BRA.s br
0003F13E <AmiBlitz3.ab2@22214>   CMP.w #$57c0,-2(a4)                                      ;=
0003F142 <AmiBlitz3.ab2@22215>   BNE.s 'lb3
0003F148 <AmiBlitz3.ab2@22216>          MOVE.w #$6600,-2(a4)                              ;bne
0003F14C <AmiBlitz3.ab2@22217> BRA.s br
0003F152 <AmiBlitz3.ab2@22220>   CMP.w #$56c0,-2(a4)                                      ;<>
0003F156 <AmiBlitz3.ab2@22221>   BNE.s 'lb4
0003F15C <AmiBlitz3.ab2@22222>          MOVE.w #$6700,-2(a4)                              ;beq
0003F160 <AmiBlitz3.ab2@22223> BRA.s br
0003F166 <AmiBlitz3.ab2@22226>   CMP.w #$5cc0,-2(a4)                                      ;>=
0003F16A <AmiBlitz3.ab2@22227>   BNE.s 'lb5
0003F170 <AmiBlitz3.ab2@22228>          MOVE.w #$6d00,-2(a4)                              ;blt
0003F174 <AmiBlitz3.ab2@22229> BRA.s br
0003F17A <AmiBlitz3.ab2@22232>   CMP.w #$5fc0,-2(a4)                                      ;<=
0003F17E <AmiBlitz3.ab2@22233>         BNE.s b6
0003F184 <AmiBlitz3.ab2@22234>          MOVE.w #$6e00,-2(a4)                              ;bgt
0003F186 <AmiBlitz3.ab2@22237>   TST.w (a7)+
0003F18C <AmiBlitz3.ab2@22239>         TST.b fast
0003F190 <AmiBlitz3.ab2@22240>         BEQ 'l1
0003F196 <AmiBlitz3.ab2@22241>         OR.b #$ff,-1(a4)                                   ;long branches
0003F19A <AmiBlitz3.ab2@22242>         BSR writeword
0003F19E <AmiBlitz3.ab2@22246>         BSR writeword
0003F1A2 <AmiBlitz3.ab2@22247> BRA.s br2
0003F1A6 <AmiBlitz3.ab2@22250>   BSR.w writeword
0003F1AA <AmiBlitz3.ab2@22253>   MOVE.l posbr(PC),D1
0003F1AC <AmiBlitz3.ab2@22254>   TST.w (A7)+
0003F1B0 <AmiBlitz3.ab2@22255>    BEQ.w JL_0_D0C2
0003F1B4 <AmiBlitz3.ab2@22256>   MOVE.l negbr(PC),D1
0003F1BA <AmiBlitz3.ab2@22259>   TST.b fast
0003F1BE <AmiBlitz3.ab2@22260>            BEQ 'l1
0003F1C4 <AmiBlitz3.ab2@22261>            OR.l #$00ff0000,d1
0003F1C8 <AmiBlitz3.ab2@22262>            BSR writelong
0003F1CC <AmiBlitz3.ab2@22263>            BSR writeword
0003F1D0 <AmiBlitz3.ab2@22264> BRA br2
0003F1D4 <AmiBlitz3.ab2@22267>   BSR.w writelong
0003F1D6 <AmiBlitz3.ab2@22270>  MOVEQ.l #$0E,D0
0003F1D8 <AmiBlitz3.ab2@22271>   MOVEQ.l #$01,D1
0003F1DE <AmiBlitz3.ab2@22272>   MOVEA.l _execbase,A6
0003F1E4 <AmiBlitz3.ab2@22274>   MOVE.l mempool,a0
0003F1E8 <AmiBlitz3.ab2@22275>   JSR _AllocPooled(a6)
0003F1EA <AmiBlitz3.ab2@22276>   MOVEA.l D0,A0
0003F1F0 <AmiBlitz3.ab2@22277>   MOVE.l firstiff,(A0)
0003F1F6 <AmiBlitz3.ab2@22278>   MOVE.l A0,firstiff
0003F1FA <AmiBlitz3.ab2@22279>   MOVE.l (A7)+,$4(A0)
0003F202 <AmiBlitz3.ab2@22280>   MOVE.l destpointer,$8(A0)
0003F206 <AmiBlitz3.ab2@22281>   MOVE.w (A7)+,$C(A0)
0003F20C <AmiBlitz3.ab2@22282>    JSR reget
0003F210 <AmiBlitz3.ab2@22283>    BEQ.w JL_0_D10C
0003F216 <AmiBlitz3.ab2@22284>   BSET #$7,$C(A0)
0003F220 <AmiBlitz3.ab2@22288>   MOVE.w oldqflag,instringon
0003F226 <AmiBlitz3.ab2@22289>   MOVEA.l lastsourcepos,A5
0003F22E <AmiBlitz3.ab2@22290>   MOVE.w #$003A,lastchar
0003F230 <AmiBlitz3.ab2@22293> RTS
0003F234 <AmiBlitz3.ab2@22297>   CMP.w #$1,D0
0003F238 <AmiBlitz3.ab2@22298>    BLT.w JL_0_D128
0003F23C <AmiBlitz3.ab2@22299>   CMP.w #$0,D0
0003F240 <AmiBlitz3.ab2@22300>    BGT.w JL_0_D128
0003F242 <AmiBlitz3.ab2@22301>   ADD.w D0,D0
0003F244 <AmiBlitz3.ab2@22302>   ADD.w D0,D0
0003F248 <AmiBlitz3.ab2@22303>   MOVEA.l JL_0_D128(PC,D0.W),A0
0003F24A <AmiBlitz3.ab2@22306> JMP (A0)
0003F24E <AmiBlitz3.ab2@22309> BRA.w JL_0_D128
0003F252 <AmiBlitz3.ab2@22313>   CMP.w #$1,D0
0003F256 <AmiBlitz3.ab2@22314>    BLT.w JL_0_D146
0003F25A <AmiBlitz3.ab2@22315>   CMP.w #$0,D0
0003F25E <AmiBlitz3.ab2@22316>    BGT.w JL_0_D146
0003F260 <AmiBlitz3.ab2@22317>   ADD.w D0,D0
0003F262 <AmiBlitz3.ab2@22318>   ADD.w D0,D0
0003F266 <AmiBlitz3.ab2@22319>   MOVEA.l JL_0_D146(PC,D0.W),A0
0003F268 <AmiBlitz3.ab2@22322>   JSR (A0)
0003F26C <AmiBlitz3.ab2@22325> BRA.w JL_0_D146
0003F270 <AmiBlitz3.ab2@22329>   CMP.w #$1,D0
0003F274 <AmiBlitz3.ab2@22330>    BLT.w JL_0_D168
0003F278 <AmiBlitz3.ab2@22331>   CMP.w #$0,D0
0003F27C <AmiBlitz3.ab2@22332>    BGT.w JL_0_D168
0003F27E <AmiBlitz3.ab2@22333>   ADD.w D0,D0
0003F280 <AmiBlitz3.ab2@22334>   ADD.w D0,D0
0003F284 <AmiBlitz3.ab2@22335>   MOVEA.l JL_0_D168(PC,D0.W),A0
0003F288 <AmiBlitz3.ab2@22338>   MOVE.w #$6753,-(A7)                                      ;#'gS' ;for runtime error checking!
0003F28A <AmiBlitz3.ab2@22341>    JSR (A0)
0003F28E <AmiBlitz3.ab2@22344> BRA.w JL_0_D168
0003F290 <AmiBlitz3.ab2@22347> labcnt:   Ds.w 1
0003F292 <AmiBlitz3.ab2@22354>   MOVEQ.l #$02,D2
0003F296 <AmiBlitz3.ab2@22355>    BSR.w bakeval
0003F29A <AmiBlitz3.ab2@22356>   LEA JL_0_D10E(PC),A0
0003F29E <AmiBlitz3.ab2@22357>   LEA JL_0_D12C(PC),A1
0003F2A2 <AmiBlitz3.ab2@22358>   MOVE.w #$001A,D1
0003F2A6 <AmiBlitz3.ab2@22359>   CMP.w #-$7FFB,D0
0003F2AA <AmiBlitz3.ab2@22360>    BEQ.w JL_0_D1B6
0003F2AE <AmiBlitz3.ab2@22361>   CMP.w #-$7FFA,D0
0003F2B2 <AmiBlitz3.ab2@22362>    BNE.w JUMP_syntaxerr
0003F2B6 <AmiBlitz3.ab2@22363>   LEA JL_0_D12C(PC),A0
0003F2BA <AmiBlitz3.ab2@22364>   LEA JL_0_D14A(PC),A1
0003F2BE <AmiBlitz3.ab2@22365>   MOVE.w #$001A,D1
0003F2C4 <AmiBlitz3.ab2@22366>   TST.b debugmode
0003F2C8 <AmiBlitz3.ab2@22367>    BEQ.b JL_0_D1B6
0003F2CE <AmiBlitz3.ab2@22368>    JSR chkstak
0003F2D2 <AmiBlitz3.ab2@22369>   LEA JL_0_D14A(PC),A0
0003F2D6 <AmiBlitz3.ab2@22370>   LEA labcnt(PC),A1
0003F2DA <AmiBlitz3.ab2@22371>   MOVE.w #$001E,D1
0003F2DC <AmiBlitz3.ab2@22374>   MOVE.w D1,-(A7)
0003F2E2 <AmiBlitz3.ab2@22375>   MOVE.l destpointer,-(A7)                                 ;for when we know number of labels!
0003F2E6 <AmiBlitz3.ab2@22376>    BSR.w pokecode
0003F2EC <AmiBlitz3.ab2@22377>   CLR.w labcnt
0003F2F2 <AmiBlitz3.ab2@22382>    JSR get1bytemain
0003F2F8 <AmiBlitz3.ab2@22383>   SUBQ.l #2,destpointer                                    ;for makealab!
0003F2FC <AmiBlitz3.ab2@22384>    BSR.w JL_0_AE22
0003F302 <AmiBlitz3.ab2@22385>   ADDQ.l #2,destpointer
0003F308 <AmiBlitz3.ab2@22386>    JSR addoff
0003F30C <AmiBlitz3.ab2@22387>   MOVE.l $8(A2),D1
0003F310 <AmiBlitz3.ab2@22388>    BSR.w writelong
0003F316 <AmiBlitz3.ab2@22389>   ADDQ.w #1,labcnt
0003F31C <AmiBlitz3.ab2@22390>    JSR reget
0003F320 <AmiBlitz3.ab2@22391>   CMP.w #$2C,D0
0003F324 <AmiBlitz3.ab2@22392>    BEQ.w JL_0_D1C8
0003F326 <AmiBlitz3.ab2@22393>   MOVEA.l (A7)+,A0
0003F328 <AmiBlitz3.ab2@22394>   MOVE.w (A7)+,D2
0003F32E <AmiBlitz3.ab2@22395>   MOVE.w dontwrite,D1
0003F332 <AmiBlitz3.ab2@22396>    BNE.w JL_0_D21A
0003F336 <AmiBlitz3.ab2@22397>   MOVE.w labcnt(PC),D1
0003F33A <AmiBlitz3.ab2@22398>   MOVE.w D1,$A(A0)
0003F33C <AmiBlitz3.ab2@22399>   ADD.w D1,D1
0003F33E <AmiBlitz3.ab2@22400>   ADD.w D1,D1
0003F340 <AmiBlitz3.ab2@22401>   ADDQ.w #2,D1
0003F344 <AmiBlitz3.ab2@22402>   MOVE.w D1,$2(A0,D2.W)
0003F346 <AmiBlitz3.ab2@22405> RTS
0003F34C <AmiBlitz3.ab2@22409>   TST.b debugmode
0003F350 <AmiBlitz3.ab2@22410>    BEQ.w JL_0_D236
0003F356 <AmiBlitz3.ab2@22411>    JSR chkstak
0003F35C <AmiBlitz3.ab2@22412>   MOVE.l AL_0_D162,D1
0003F360 <AmiBlitz3.ab2@22413>    BSR.w writelong
0003F366 <AmiBlitz3.ab2@22415>   MOVE.w gosubcode,D1
0003F36A <AmiBlitz3.ab2@22416> BRA.w JL_0_D246
0003F370 <AmiBlitz3.ab2@22420>   MOVE.w gotocode,D1
0003F372 <AmiBlitz3.ab2@22423>   MOVE.w D1,-(A7)
0003F376 <AmiBlitz3.ab2@22424>    BSR.w JL_0_AE22
0003F378 <AmiBlitz3.ab2@22425>   MOVE.w (A7)+,D1
0003F37C <AmiBlitz3.ab2@22426>    BSR.w writeword
0003F382 <AmiBlitz3.ab2@22427>    JSR addoff
0003F386 <AmiBlitz3.ab2@22428>   MOVE.l $8(A2),D1
0003F38A <AmiBlitz3.ab2@22429> BRA.w writelong
0003F390 <AmiBlitz3.ab2@22433>   MOVE.w proceduremode,D1
0003F394 <AmiBlitz3.ab2@22434>    BEQ.w JUMP_badpenderr
0003F398 <AmiBlitz3.ab2@22435>   MOVE.w #$4EF9,D1
0003F39C <AmiBlitz3.ab2@22436>    BSR.w writeword
0003F3A2 <AmiBlitz3.ab2@22437>    JSR addoff
0003F3A8 <AmiBlitz3.ab2@22438>   MOVEA.l _execbase,A6
0003F3AA <AmiBlitz3.ab2@22439>   MOVEQ.l #$08,D0
0003F3AC <AmiBlitz3.ab2@22440>   MOVEQ.l #$01,D1
0003F3B2 <AmiBlitz3.ab2@22442>   MOVE.l mempool,a0
0003F3B6 <AmiBlitz3.ab2@22443>   JSR _AllocPooled(a6)
0003F3B8 <AmiBlitz3.ab2@22444>   MOVEA.l D0,A0
0003F3BE <AmiBlitz3.ab2@22445>   MOVE.l firstpend,(A0)
0003F3C4 <AmiBlitz3.ab2@22446>   MOVE.l A0,firstpend
0003F3CC <AmiBlitz3.ab2@22447>   MOVE.l destpointer,$4(A0)
0003F3D0 <AmiBlitz3.ab2@22448> BRA.w writelong
0003F3D4 <AmiBlitz3.ab2@22452>   BSR.w do_AsmExit
0003F3DA <AmiBlitz3.ab2@22453> JMP get1bytemain
0003F3E2 <AmiBlitz3.ab2@22457>   MOVE.b #1,nostringopt
0003F3E8 <AmiBlitz3.ab2@22458>   MOVEA.l currentfunction,A0
0003F3EE <AmiBlitz3.ab2@22459>   CMP.l #0,a0
0003F3F2 <AmiBlitz3.ab2@22460>   BNE 'l1
0003F3F8 <AmiBlitz3.ab2@22461>   JMP errorasmexit
0003F3FA <AmiBlitz3.ab2@22462> 'l1 MOVEQ.l #$00,D2
0003F3FE <AmiBlitz3.ab2@22463>   MOVE.b $5(A0),D2
0003F402 <AmiBlitz3.ab2@22464>   BSR.w eval
0003F406 <AmiBlitz3.ab2@22465> BRA.w do_AsmExit
0003F40C <AmiBlitz3.ab2@22479>   TST.b debugmode
0003F410 <AmiBlitz3.ab2@22480>    BEQ.w JL_0_D2CA
0003F414 <AmiBlitz3.ab2@22481>   MOVE.w #$C305,D1
0003F418 <AmiBlitz3.ab2@22482> BRA.w Atokejsr
0003F41C <AmiBlitz3.ab2@22485>   MOVE.w #$4E75,D1
0003F420 <AmiBlitz3.ab2@22486> BRA.w writeword
0003F424 <AmiBlitz3.ab2@22489> localslist:  Ds.l 1                                        ;all locals for procs.;??Looks like obsovled data??
0003F428 <AmiBlitz3.ab2@22490> proclocals:  Ds.l 1                                        ;for debugga!
0003F42A <AmiBlitz3.ab2@22491> procnum:     Ds.w 1
0003F42C <AmiBlitz3.ab2@22492> procnum2:    Ds.w 1
0003F430 <AmiBlitz3.ab2@22493> prolineat:   Ds.l 1
0003F436 <AmiBlitz3.ab2@22497>    TST.w proceduremode
0003F43A <AmiBlitz3.ab2@22498>    BGT JUMP_sreterr
0003F43E <AmiBlitz3.ab2@22499>    CMP.w #-$7FF9,D0
0003F442 <AmiBlitz3.ab2@22500>    BEQ.w JL_0_D29C
0003F444 <AmiBlitz3.ab2@22501>    MOVEQ.l #-$01,D1
0003F448 <AmiBlitz3.ab2@22502> BRA.w JL_0_D304
0003F44E <AmiBlitz3.ab2@22505> JMP sreterr
0003F454 <AmiBlitz3.ab2@22509>   CLR.b skipfunc
0003F45A <AmiBlitz3.ab2@22510>   TST.l unusedfunc
0003F45E <AmiBlitz3.ab2@22511>   BEQ 'ex
0003F462 <AmiBlitz3.ab2@22512>   MOVEM.l d0-d7/a0-a6,-(a7)
0003F468 <AmiBlitz3.ab2@22513>   MOVE.l unusedfunc,d1
0003F46E <AmiBlitz3.ab2@22514>   LEA ptr_parameterstore,a5
0003F470 <AmiBlitz3.ab2@22517>   MOVE.l d1,a0
0003F474 <AmiBlitz3.ab2@22518>   LEA 12(a0),a2
0003F476 <AmiBlitz3.ab2@22519>   MOVE.l a5,a1
0003F478 <AmiBlitz3.ab2@22521>   CMPM.b (a1)+,(a2)+
0003F47C <AmiBlitz3.ab2@22522>   BNE 'neq
0003F47E <AmiBlitz3.ab2@22523>   TST.b (a2)
0003F482 <AmiBlitz3.ab2@22524>   BNE 'ch
0003F484 <AmiBlitz3.ab2@22525>   TST.b (a1)
0003F488 <AmiBlitz3.ab2@22526>   BNE 'neq
0003F490 <AmiBlitz3.ab2@22527>   MOVE.b #1,skipfunc
0003F494 <AmiBlitz3.ab2@22528> BRA 'out
0003F496 <AmiBlitz3.ab2@22531>   MOVE.l (a0),d1
0003F49A <AmiBlitz3.ab2@22532>   BNE 'ag
0003F49E <AmiBlitz3.ab2@22535>   MOVEM.l (a7)+,d0-d7/a0-a6
0003F4A0 <AmiBlitz3.ab2@22538> RTS
0003F4A6 <AmiBlitz3.ab2@22542> JMP dupprocerr
0003F4AC <AmiBlitz3.ab2@22545> JMP illprocperr
0003F4B4 <AmiBlitz3.ab2@22552>   CMP.w #-1,proceduremode                                  ;was JUMP_sreterr_2
0003F4B8 <AmiBlitz3.ab2@22553>    BEQ JUMP_sreterr
0003F4BC <AmiBlitz3.ab2@22554>   CMP.w #-$7FF9,D0
0003F4C0 <AmiBlitz3.ab2@22555>    BEQ.w JL_0_D2A4
0003F4CA <AmiBlitz3.ab2@22558>   MOVE.w oldqflag,instringon
0003F4D0 <AmiBlitz3.ab2@22559>   MOVEA.l lastsourcepos,A5
0003F4D6 <AmiBlitz3.ab2@22560>   JSR AJL_0_498A
0003F4DC <AmiBlitz3.ab2@22561>   JSR get1bytemain
0003F4E2 <AmiBlitz3.ab2@22564>    TST.b declare
0003F4E6 <AmiBlitz3.ab2@22565>   BEQ 'l1
0003F4EE <AmiBlitz3.ab2@22566>   MOVE.b #1,nowdeclare
0003F4F4 <AmiBlitz3.ab2@22569>   JSR errchx                                           ;writejumpoverfunction
0003F4FA <AmiBlitz3.ab2@22572>   CLR.b fastfunc
0003F504 <AmiBlitz3.ab2@22573>   MOVE.l firstiff,firstiffstore
0003F50C <AmiBlitz3.ab2@22574>   CMP.l #"FAST",-1(a5)
0003F510 <AmiBlitz3.ab2@22575>   BNE 'nofast
0003F516 <AmiBlitz3.ab2@22576>   CMP.b #" ",3(a5)
0003F51A <AmiBlitz3.ab2@22577>   BNE 'nofast
0003F51C <AmiBlitz3.ab2@22578>   ADDQ.l #3,a5
0003F520 <AmiBlitz3.ab2@22581>     CMP.b #" ",(a5)
0003F524 <AmiBlitz3.ab2@22582>      BNE 'x1
0003F526 <AmiBlitz3.ab2@22583>     ADDQ #1,a5
0003F52A <AmiBlitz3.ab2@22584> BRA 'x2
0003F530 <AmiBlitz3.ab2@22587>   MOVE.l a5,lastsourcepos
0003F538 <AmiBlitz3.ab2@22588>   MOVE.b #1,fastfunc
0003F540 <AmiBlitz3.ab2@22591>   CMP.l #"NOOP",-1(a5)                                     ;compile 3* so its deactivate
0003F544 <AmiBlitz3.ab2@22592> BRA 'noopt
0003F54A <AmiBlitz3.ab2@22594>   CMP.w #"T ",3(a5)                                        ;??Looks like dead code??
0003F54E <AmiBlitz3.ab2@22595>   BNE 'noopt
0003F550 <AmiBlitz3.ab2@22596>   ADDQ.l #4,a5
0003F554 <AmiBlitz3.ab2@22599>     CMP.b #" ",(a5)
0003F558 <AmiBlitz3.ab2@22600>      BNE 'x1b
0003F55A <AmiBlitz3.ab2@22601>     ADDQ #1,a5
0003F55E <AmiBlitz3.ab2@22602> BRA 'x2b
0003F564 <AmiBlitz3.ab2@22605>   MOVE.l a5,lastsourcepos
0003F56A <AmiBlitz3.ab2@22607>   JSR makename2
0003F56E <AmiBlitz3.ab2@22608> BRA 'l1
0003F574 <AmiBlitz3.ab2@22612>   JSR makename2
0003F57A <AmiBlitz3.ab2@22613>   JSR checkused
0003F580 <AmiBlitz3.ab2@22614>   TST.b skipfunc
0003F584 <AmiBlitz3.ab2@22615>    BEQ 'l1
0003F58A <AmiBlitz3.ab2@22616>   JSR skipme
0003F590 <AmiBlitz3.ab2@22617>   CLR.b fastfunc
0003F592 <AmiBlitz3.ab2@22618> RTS
0003F59C <AmiBlitz3.ab2@22621>   MOVE.l linenumat,prolineat
0003F5A2 <AmiBlitz3.ab2@22622>   ADDQ.w #1,procnum2
0003F5AA <AmiBlitz3.ab2@22623>   MOVE.w procnum2(PC),procnum
0003F5B0 <AmiBlitz3.ab2@22624>   MOVE.w D1,proceduremode
0003F5B6 <AmiBlitz3.ab2@22625>   CLR.w locvaroff
0003F5BA <AmiBlitz3.ab2@22626>   CMP.w #$7B,D0
0003F5BE <AmiBlitz3.ab2@22627>    BNE.w JUMP_syntaxerr
0003F5C6 <AmiBlitz3.ab2@22628>    MOVE.b #1,infunctioncode
0003F5CC <AmiBlitz3.ab2@22629>   MOVEA.l tempvm,A0
0003F5D4 <AmiBlitz3.ab2@22630>   MOVE.w $C(A0),memlibstat
0003F5DA <AmiBlitz3.ab2@22631>   BCLR #$7,$C(A0)                                          ;Bit out of range
0003F5DE <AmiBlitz3.ab2@22632>   MOVE.w #$4EF9,D1
0003F5E2 <AmiBlitz3.ab2@22633>    BSR.w writeword
0003F5E8 <AmiBlitz3.ab2@22634>    JSR addoff
0003F5EC <AmiBlitz3.ab2@22635>    BSR.w writelong
0003F5F0 <AmiBlitz3.ab2@22636>    BSR.w findproc                                          ;findproc function
0003F5F4 <AmiBlitz3.ab2@22637>    BEQ.w JUMP_dupprocerr
0003F5F8 <AmiBlitz3.ab2@22638>    BSR.w addlabel
0003F5FE <AmiBlitz3.ab2@22639>    MOVE.b #31,$20(a2)                                      ;increase if more pars
0003F604 <AmiBlitz3.ab2@22640>    MOVE.b #0,isfunc(a2)
0003F60C <AmiBlitz3.ab2@22641>   MOVE.l destpointer,$E(A2)
0003F612 <AmiBlitz3.ab2@22642>   MOVE.l A2,currentfunction
0003F618 <AmiBlitz3.ab2@22643>   LEA nops8,A0
0003F61E <AmiBlitz3.ab2@22644>   LEA dataget,A1
0003F622 <AmiBlitz3.ab2@22645>    BSR.w pokecode2
0003F628 <AmiBlitz3.ab2@22646>   TST.b debugmode
0003F62C <AmiBlitz3.ab2@22647>    BEQ.b JL_0_D3AA
0003F62E <AmiBlitz3.ab2@22648>   MOVEQ.l #$04,D1
0003F634 <AmiBlitz3.ab2@22649>    JSR writetrap
0003F63E <AmiBlitz3.ab2@22650>   MOVE.l destpointer,proclocals
0003F642 <AmiBlitz3.ab2@22651>    BSR.w writelong
0003F646 <AmiBlitz3.ab2@22652>    BSR.w writelong
0003F64A <AmiBlitz3.ab2@22655>    LEA $16(A2),A4
0003F652 <AmiBlitz3.ab2@22656>   MOVE.b proceduremode+1,$5(A2)
0003F654 <AmiBlitz3.ab2@22657>   MOVEQ.l #$00,D6
0003F656 <AmiBlitz3.ab2@22658>   MOVEQ.l #$00,D5
0003F65C <AmiBlitz3.ab2@22659>    JSR get1bytemain
0003F660 <AmiBlitz3.ab2@22660>   CMP.w #$7D,D0
0003F664 <AmiBlitz3.ab2@22661>    BEQ.w JL_0_D466
0003F668 <AmiBlitz3.ab2@22664>    CMP.b #"@",d0
0003F66C <AmiBlitz3.ab2@22665>    BNE 'l2
0003F66E <AmiBlitz3.ab2@22666>    MOVE.l a0,-(a7)
0003F674 <AmiBlitz3.ab2@22667>    MOVE.l currentfunction,a0
0003F67A <AmiBlitz3.ab2@22668>    CMP.b #31,$20(a0)                                       ;increase if morepars
0003F67E <AmiBlitz3.ab2@22669>    BNE 'l1
0003F682 <AmiBlitz3.ab2@22670>    MOVE.b d6,$20(a0)                                       ;increase if morepar
0003F688 <AmiBlitz3.ab2@22673>    JSR get1bytemain
0003F68A <AmiBlitz3.ab2@22674>    MOVE.l (a7)+,a0
0003F68E <AmiBlitz3.ab2@22677>    BSR.w getparameter
0003F692 <AmiBlitz3.ab2@22678>    BSR.w JL_0_8E3C
0003F69A <AmiBlitz3.ab2@22679>   CMPI.l #$7,$4(A2)
0003F69E <AmiBlitz3.ab2@22680>    BNE.w JL_0_D3F6
0003F6A4 <AmiBlitz3.ab2@22681>   LEA stbuff,A0
0003F6A6 <AmiBlitz3.ab2@22682>   MOVE.w D5,D1
0003F6A8 <AmiBlitz3.ab2@22683>   LSL.w #2,D1
0003F6AC <AmiBlitz3.ab2@22684>   MOVE.w D6,$0(A0,D1.W)
0003F6B2 <AmiBlitz3.ab2@22685>   MOVE.w $4(A3),$2(A0,D1.W)
0003F6B4 <AmiBlitz3.ab2@22686>   ADDQ.w #1,D5
0003F6B6 <AmiBlitz3.ab2@22687>   MOVEQ.l #$07,D2
0003F6BA <AmiBlitz3.ab2@22688> BRA.w JL_0_D442
0003F6C0 <AmiBlitz3.ab2@22691> JMP toovarerr
0003F6C4 <AmiBlitz3.ab2@22694>   MOVE.w #$2940,D1
0003F6C6 <AmiBlitz3.ab2@22695>   MOVEQ.l #$03,D2
0003F6CE <AmiBlitz3.ab2@22696>   BTST #$0,flagmask+1
0003F6D2 <AmiBlitz3.ab2@22697>    BNE.w JL_0_D430
0003F6DA <AmiBlitz3.ab2@22698>   CMPI.l #$100,$4(A2)
0003F6DE <AmiBlitz3.ab2@22699>    BCC.w JUMP_illprocperr
0003F6E2 <AmiBlitz3.ab2@22700>   MOVE.w $6(A2),D2
0003F6E6 <AmiBlitz3.ab2@22701>   CMP.w #$2,D2
0003F6EA <AmiBlitz3.ab2@22702>    BHI.w JL_0_D430
0003F6EE <AmiBlitz3.ab2@22703>    BEQ.w JL_0_D42C
0003F6F2 <AmiBlitz3.ab2@22704>   EORI.w #$3000,D1
0003F6F6 <AmiBlitz3.ab2@22705> BRA.w JL_0_D430
0003F6FC <AmiBlitz3.ab2@22708> JMP more6pard
0003F700 <AmiBlitz3.ab2@22711>   ORI.w #$1000,D1
0003F702 <AmiBlitz3.ab2@22714>   OR.w D6,D1
0003F708 <AmiBlitz3.ab2@22715>   TST.b fpu
0003F70C <AmiBlitz3.ab2@22716>   BEQ 'nofpu
0003F710 <AmiBlitz3.ab2@22717>   CMP.b #5,d2
0003F714 <AmiBlitz3.ab2@22718>   BNE 'nofpu
0003F718 <AmiBlitz3.ab2@22719>   CMP.w #6,d6
0003F71C <AmiBlitz3.ab2@22720>   BLT 'l10a
0003F722 <AmiBlitz3.ab2@22721>   CMP.l #newtype_double,a2
0003F726 <AmiBlitz3.ab2@22722>   BEQ JUMP_more6pard
0003F72A <AmiBlitz3.ab2@22723> BRA 'nofpu
0003F730 <AmiBlitz3.ab2@22726>   MOVE.l #$f22c6400,d1
0003F734 <AmiBlitz3.ab2@22727>   MOVEM.l d0/a4,-(a7)
0003F736 <AmiBlitz3.ab2@22728>   MOVE.l d6,d0
0003F738 <AmiBlitz3.ab2@22729>   ASL.l #7,d0
0003F73A <AmiBlitz3.ab2@22730>   OR.w d0,d1
0003F740 <AmiBlitz3.ab2@22731>   CMP.l #newtype_double,a2
0003F744 <AmiBlitz3.ab2@22732>   BNE 'l1
0003F74A <AmiBlitz3.ab2@22733>   OR.l #$1000,d1
0003F74E <AmiBlitz3.ab2@22736>   BSR writelong
0003F752 <AmiBlitz3.ab2@22737>   MOVE.w 4(a3),d1
0003F756 <AmiBlitz3.ab2@22738>   BSR writeword
0003F75A <AmiBlitz3.ab2@22739>   MOVEM.l (a7)+,a4/d0
0003F75E <AmiBlitz3.ab2@22740> BRA JL_0_D442
0003F760 <AmiBlitz3.ab2@22743>   MOVE.l A4,-(A7)
0003F764 <AmiBlitz3.ab2@22744>    CMP.w #6,d6
0003F768 <AmiBlitz3.ab2@22745>    BLT 'l10
0003F76C <AmiBlitz3.ab2@22746>    MOVE.w #$c500-4,d1                                      ;savetemp+regnum
0003F76E <AmiBlitz3.ab2@22747>    ADD.w d6,d1
0003F774 <AmiBlitz3.ab2@22748>    JSR Atokejsr
0003F77A <AmiBlitz3.ab2@22749>    TST.w dontwrite
0003F77E <AmiBlitz3.ab2@22750>    BNE 'l10
0003F784 <AmiBlitz3.ab2@22751>    MOVE.l data1start,d1
0003F78A <AmiBlitz3.ab2@22752>    MOVE.l destpointer,a4
0003F78E <AmiBlitz3.ab2@22753>    ADD.l d1,-6(a4)
0003F794 <AmiBlitz3.ab2@22754>    MOVE.l destpointer,d1
0003F796 <AmiBlitz3.ab2@22755>    SUBQ.l #6,d1
0003F79C <AmiBlitz3.ab2@22756>    SUB.l destbufferstart,d1
0003F79E <AmiBlitz3.ab2@22758>    MOVE.l d2,-(a7)
0003F7A0 <AmiBlitz3.ab2@22759>    MOVE.l d1,d2
0003F7A6 <AmiBlitz3.ab2@22760>    JSR addhunkoffset                                       ;move.l $0,-x(a4)
0003F7A8 <AmiBlitz3.ab2@22761>    MOVE.l (a7)+,d2
0003F7AE <AmiBlitz3.ab2@22762>    MOVE.l destpointer,a4
0003F7B2 <AmiBlitz3.ab2@22763>    CMP.w #2,d2
0003F7B6 <AmiBlitz3.ab2@22764>    BNE 'nw1
0003F7BC <AmiBlitz3.ab2@22766>    MOVE.w #$3979,-8(a4)                                    ;move.w $0,-x(a4)
0003F7C4 <AmiBlitz3.ab2@22767>    ADD.l #2,-6(a4)
0003F7C8 <AmiBlitz3.ab2@22770>    CMP.w #1,d2
0003F7CC <AmiBlitz3.ab2@22771>    BNE 'nb
0003F7D2 <AmiBlitz3.ab2@22772>    MOVE.w #$1979,-8(a4)                                    ;move.b $0,-x(a4)
0003F7DA <AmiBlitz3.ab2@22773>    ADD.l #3,-6(a4)
0003F7E0 <AmiBlitz3.ab2@22776>    MOVE.w $4(a3),-2(a4)
0003F7E4 <AmiBlitz3.ab2@22777> BRA 'ne1
0003F7E8 <AmiBlitz3.ab2@22780>   BSR.w writeword                                          ;write storeparameter
0003F7EC <AmiBlitz3.ab2@22783>   MOVE.w $4(A3),D1
0003F7F0 <AmiBlitz3.ab2@22784>    BSR.w writeword
0003F7F2 <AmiBlitz3.ab2@22787>   MOVEA.l (A7)+,A4
0003F7F4 <AmiBlitz3.ab2@22790>   ADDQ.w #1,D6
0003F7F8 <AmiBlitz3.ab2@22791>   CMP.w #11,D6                                             ;max function parameters
0003F7FC <AmiBlitz3.ab2@22792>    BCC.w JUMP_toovarerr
0003F7FE <AmiBlitz3.ab2@22793>   MOVE.b D2,(A4)+
0003F802 <AmiBlitz3.ab2@22794>   CMP.w #$2C,D0
0003F806 <AmiBlitz3.ab2@22795>    BNE.w JL_0_D45E
0003F80C <AmiBlitz3.ab2@22796>    JSR get1bytemain
0003F810 <AmiBlitz3.ab2@22808> BRA.w JL_0_D3C6
0003F814 <AmiBlitz3.ab2@22811>   CMP.w #$7D,D0
0003F818 <AmiBlitz3.ab2@22812>    BNE.w JUMP_syntaxerr
0003F81E <AmiBlitz3.ab2@22815>   MOVEA.l currentfunction,A2
0003F820 <AmiBlitz3.ab2@22816>   LSL.w #4,D5
0003F822 <AmiBlitz3.ab2@22817>   OR.w D5,D6
0003F826 <AmiBlitz3.ab2@22818>   MOVE.b D6,$4(A2)
0003F828 <AmiBlitz3.ab2@22819>   LSR.w #4,D6
0003F82C <AmiBlitz3.ab2@22820>    BEQ.w JL_0_D4C4
0003F832 <AmiBlitz3.ab2@22821>   LEA stbuff,A0
0003F834 <AmiBlitz3.ab2@22822>   SUBQ.w #1,D6
0003F836 <AmiBlitz3.ab2@22825>     MOVE.w D6,D1                                           ;function stringpars
0003F838 <AmiBlitz3.ab2@22826>     LSL.w #2,D1                                            ;stringsize was 2
0003F83A <AmiBlitz3.ab2@22828>       LSL.w #1,d1
0003F83C <AmiBlitz3.ab2@22829>       ADDQ.w #4,d1
0003F83E <AmiBlitz3.ab2@22831>     ADDQ.w #8,D1
0003F844 <AmiBlitz3.ab2@22832>     MOVE.w D1,funcst+2
0003F84A <AmiBlitz3.ab2@22833>     MOVE.l funcst,D1
0003F84E <AmiBlitz3.ab2@22834>     BSR.w writelong
0003F850 <AmiBlitz3.ab2@22835>     MOVE.w (A0)+,D1
0003F854 <AmiBlitz3.ab2@22836>     CMP.b #5,d1
0003F858 <AmiBlitz3.ab2@22837>     BLE 's1
0003F85C <AmiBlitz3.ab2@22838>     MOVE.w #$266c,d1                                       ;native move.l 4(a4),a3
0003F860 <AmiBlitz3.ab2@22839>     BSR writeinstruction
0003F862 <AmiBlitz3.ab2@22840>     MOVE.w D6,D1                                           ;function stringpars
0003F864 <AmiBlitz3.ab2@22841>     LSL.w #2,D1                                            ;stringsize was 2
0003F866 <AmiBlitz3.ab2@22843>       LSL.w #1,d1
0003F868 <AmiBlitz3.ab2@22845>     ADDQ.w #8,D1
0003F86C <AmiBlitz3.ab2@22846>     BSR writeword
0003F870 <AmiBlitz3.ab2@22847>   BRA 's2
0003F876 <AmiBlitz3.ab2@22850>     OR.w movedna3,D1
0003F87A <AmiBlitz3.ab2@22851>      BSR.w writeword
0003F880 <AmiBlitz3.ab2@22854>     MOVE.w (A0)+,least+2
0003F886 <AmiBlitz3.ab2@22855>     MOVE.l least,D1
0003F88A <AmiBlitz3.ab2@22856>      BSR.w writelong
0003F88C <AmiBlitz3.ab2@22857>     MOVE.l A0,-(A7)
0003F890 <AmiBlitz3.ab2@22858>     MOVE.w #$C700,D1
0003F894 <AmiBlitz3.ab2@22859>      BSR.w Atokejsr
0003F896 <AmiBlitz3.ab2@22860>     MOVEA.l (A7)+,A0
0003F89A <AmiBlitz3.ab2@22861>   DBF D6,JL_0_D482
0003F8A0 <AmiBlitz3.ab2@22864> JMP get1bytemain
0003F8A6 <AmiBlitz3.ab2@22868>   MOVE.w dontwrite,D1
0003F8AA <AmiBlitz3.ab2@22869>    BNE.w JL_0_D4F6
0003F8B0 <AmiBlitz3.ab2@22870>   MOVE.l destpointer,-(A7)
0003F8B6 <AmiBlitz3.ab2@22871>   MOVE.l A0,destpointer
0003F8BC <AmiBlitz3.ab2@22872>   MOVE.l linksize,D1
0003F8C0 <AmiBlitz3.ab2@22873>    BSR.w writelong                                         ;writefunctions jumppos
0003F8C6 <AmiBlitz3.ab2@22874>    TST.b fastfunc
0003F8CA <AmiBlitz3.ab2@22875>    BNE 'skip
0003F8CE <AmiBlitz3.ab2@22876>   MOVE.w #$CC00,D1
0003F8D2 <AmiBlitz3.ab2@22877>    BSR.w tokejsr2                                          ;write clearvars
0003F8D8 <AmiBlitz3.ab2@22880>   MOVE.l (A7)+,destpointer
0003F8DA <AmiBlitz3.ab2@22883> RTS
0003F8E0 <AmiBlitz3.ab2@22887>   MOVEA.l currentfunction,A2
0003F8E4 <AmiBlitz3.ab2@22888>   MOVEA.l $E(A2),A0
0003F8E8 <AmiBlitz3.ab2@22889>   MOVE.w $6(A2),D1
0003F8EC <AmiBlitz3.ab2@22890>    BEQ.w JL_0_D538
0003F8F2 <AmiBlitz3.ab2@22891>   MOVE.w D1,linksize+2
0003F8F6 <AmiBlitz3.ab2@22892>   MOVE.w $8(A2),D1                                         ;check if function memalloc need
0003F8FA <AmiBlitz3.ab2@22893>    BNE.w JL_0_D522
0003F8FC <AmiBlitz3.ab2@22894>   ADDQ.w #6,A0
0003F900 <AmiBlitz3.ab2@22895>   MOVE.l A0,$E(A2)
0003F904 <AmiBlitz3.ab2@22896> BRA.w JL_0_D4C8
0003F906 <AmiBlitz3.ab2@22899>   MOVE.l A0,-(A7)
0003F90A <AmiBlitz3.ab2@22900>    BSR.w JL_0_D4C8
0003F90C <AmiBlitz3.ab2@22901>   MOVEA.l (A7)+,A0
0003F910 <AmiBlitz3.ab2@22902>   LEA $A(A0),A0
0003F916 <AmiBlitz3.ab2@22903>   MOVEA.l currentfunction,A2
0003F91A <AmiBlitz3.ab2@22904> BRA.w JL_0_D54A
0003F91E <AmiBlitz3.ab2@22907>   MOVE.w $8(A2),D1
0003F922 <AmiBlitz3.ab2@22908>    BNE.w JL_0_D54A
0003F926 <AmiBlitz3.ab2@22909>   LEA $10(A0),A0
0003F92A <AmiBlitz3.ab2@22910>   MOVE.l A0,$E(A2)
0003F92C <AmiBlitz3.ab2@22911> RTS
0003F932 <AmiBlitz3.ab2@22915> JMP errormsg_nofast
0003F938 <AmiBlitz3.ab2@22918>    MOVE.w dontwrite,D1                                     ;writeallocmem for functions (after releasemem called)
0003F93C <AmiBlitz3.ab2@22919>    BNE.w JL_0_D580
0003F942 <AmiBlitz3.ab2@22920>    TST.b fastfunc
0003F946 <AmiBlitz3.ab2@22921>    BNE JUMP_errormsg_nofast
0003F94C <AmiBlitz3.ab2@22922>   MOVE.l destpointer,-(A7)
0003F952 <AmiBlitz3.ab2@22923>   MOVE.l A0,destpointer
0003F956 <AmiBlitz3.ab2@22924>   MOVE.w #$4EB9,D1
0003F95A <AmiBlitz3.ab2@22925>    BSR.w writeword
0003F960 <AmiBlitz3.ab2@22926>    JSR addoff
0003F964 <AmiBlitz3.ab2@22927>    BSR.w writelong
0003F966 <AmiBlitz3.ab2@22928>   MOVEA.l (A7)+,A0
0003F96C <AmiBlitz3.ab2@22929>   MOVEA.l destpointer,A1
0003F96E <AmiBlitz3.ab2@22930>   MOVE.l A0,-(A1)
0003F974 <AmiBlitz3.ab2@22931>   MOVE.l A0,destpointer
0003F978 <AmiBlitz3.ab2@22934>   MOVE.w $8(A2),D4
0003F97C <AmiBlitz3.ab2@22935>    BPL.w JL_0_D59E
0003F980 <AmiBlitz3.ab2@22936>   MOVE.w #$C004,D1
0003F984 <AmiBlitz3.ab2@22937>    BSR.w tokejsr2
0003F98A <AmiBlitz3.ab2@22938>   MOVEA.l currentfunction,A2
0003F98E <AmiBlitz3.ab2@22939>   MOVE.w $8(A2),D4
0003F992 <AmiBlitz3.ab2@22940>   ANDI.w #$7FFF,D4
0003F996 <AmiBlitz3.ab2@22943>    BEQ.w JL_0_D5E0
0003F99A <AmiBlitz3.ab2@22944>   MOVE.b $4(A2),D1
0003F99E <AmiBlitz3.ab2@22945>   ANDI.w #$F,D1
0003F9A0 <AmiBlitz3.ab2@22946>   MOVE.w D1,-(A7)
0003F9A4 <AmiBlitz3.ab2@22947>   CMP.w #$5,D1
0003F9A8 <AmiBlitz3.ab2@22948>    BCS.w JL_0_D5BC
0003F9AC <AmiBlitz3.ab2@22949>   MOVE.w #$2F04,D1
0003F9B0 <AmiBlitz3.ab2@22950>    BSR.w writeword
0003F9B6 <AmiBlitz3.ab2@22953>   MOVE.l locdatast,D3
0003F9BC <AmiBlitz3.ab2@22954>    JSR datastart
0003F9C0 <AmiBlitz3.ab2@22955>   MOVE.w #$C501,D1
0003F9C4 <AmiBlitz3.ab2@22956>    BSR.w tokejsr2
0003F9C6 <AmiBlitz3.ab2@22957>   MOVE.w (A7)+,D1
0003F9CA <AmiBlitz3.ab2@22958>   CMP.w #$5,D1
0003F9CE <AmiBlitz3.ab2@22959>    BCS.w JL_0_D5E0
0003F9D2 <AmiBlitz3.ab2@22960>   MOVE.w #$281F,D1
0003F9D6 <AmiBlitz3.ab2@22961>    BSR.w writeword
0003F9DA <AmiBlitz3.ab2@22963>   MOVE.w #$4E75,D1
0003F9DE <AmiBlitz3.ab2@22964> BRA.w writeword
0003F9E4 <AmiBlitz3.ab2@22968>   LEA mwait,A0
0003F9EA <AmiBlitz3.ab2@22969>   LEA mwaitf,A1
0003F9EE <AmiBlitz3.ab2@22970> BRA.w pokecode
0003F9F4 <AmiBlitz3.ab2@22974> JMP laberr
0003F9F8 <AmiBlitz3.ab2@22977>   CMP.w #$2E,D0
0003F9FC <AmiBlitz3.ab2@22978>   BNE.w JUMP_syntaxerr
0003FA02 <AmiBlitz3.ab2@22979>   JSR getparameter2
0003FA06 <AmiBlitz3.ab2@22980>   BEQ.w JUMP_laberr
0003FA0C <AmiBlitz3.ab2@22981>   LEA newtypebase,A2
0003FA12 <AmiBlitz3.ab2@22982>   JSR findtype
0003FA16 <AmiBlitz3.ab2@22983>   BNE.w JL_0_D626
0003FA1E <AmiBlitz3.ab2@22984>   CMPI.l #MaxByte,$4(A2)
0003FA22 <AmiBlitz3.ab2@22985>   BNE.w JUMP_typeerr
0003FA26 <AmiBlitz3.ab2@22986> BRA.w JL_0_D62A
0003FA2C <AmiBlitz3.ab2@22989> JMP typeerr
0003FA32 <AmiBlitz3.ab2@22992>   JSR addlabel
0003FA36 <AmiBlitz3.ab2@22995>   CLR.l $4(A2)
0003FA3C <AmiBlitz3.ab2@22996>   MOVE.l A2,thistype
0003FA42 <AmiBlitz3.ab2@22997>   CLR.l prevtype
0003FA48 <AmiBlitz3.ab2@22998>   CLR.w typelen
0003FA4E <AmiBlitz3.ab2@22999>   CLR.w linemode
0003FA54 <AmiBlitz3.ab2@23000>   JSR reget
0003FA58 <AmiBlitz3.ab2@23001>   BNE.w typemode
0003FA5A <AmiBlitz3.ab2@23002> RTS
0003FA5E <AmiBlitz3.ab2@23005>   CMP.w #-$7FFE,D0
0003FA62 <AmiBlitz3.ab2@23006>   BEQ.w JL_0_D82E
0003FA6C <AmiBlitz3.ab2@23008>   MOVE.w oldqflag,instringon
0003FA72 <AmiBlitz3.ab2@23009>   MOVEA.l lastsourcepos,A5
0003FA74 <AmiBlitz3.ab2@23010>   MOVEQ.l #$00,D6
0003FA78 <AmiBlitz3.ab2@23011>   CMP.w #$2A,D0
0003FA7C <AmiBlitz3.ab2@23012>   BNE.w JL_0_D670
0003FA7E <AmiBlitz3.ab2@23013>   MOVEQ.l #$01,D6
0003FA84 <AmiBlitz3.ab2@23014>   JSR get1bytemain
0003FA88 <AmiBlitz3.ab2@23015> BRA.w JL_0_D67E
0003FA8C <AmiBlitz3.ab2@23018>   CMP.w #$40,D0
0003FA90 <AmiBlitz3.ab2@23019>   BNE.w JL_0_D67E
0003FA92 <AmiBlitz3.ab2@23020>   MOVEQ.l #$05,D6
0003FA98 <AmiBlitz3.ab2@23021>   JSR get1bytemain
0003FA9E <AmiBlitz3.ab2@23024>   MOVE.w D6,flagmask
0003FAA4 <AmiBlitz3.ab2@23025>   JSR getparameter2
0003FAA8 <AmiBlitz3.ab2@23026>   BEQ.w JUMP_syntaxerr
0003FAAE <AmiBlitz3.ab2@23027>   MOVEA.l thistype,A2
0003FAB0 <AmiBlitz3.ab2@23028>   ADDQ.w #4,A2
0003FAB6 <AmiBlitz3.ab2@23029>   JSR findvariable2
0003FABA <AmiBlitz3.ab2@23030>   BEQ.w JUMP_dupofferr
0003FAC0 <AmiBlitz3.ab2@23031>   JSR addlabel
0003FAC2 <AmiBlitz3.ab2@23032>   MOVE.l A2,-(A7)
0003FAC6 <AmiBlitz3.ab2@23033>   CMP.w #$2E,D0
0003FACA <AmiBlitz3.ab2@23034>    BEQ.w JL_0_D6CE
0003FACE <AmiBlitz3.ab2@23035>   CMP.w #$24,D0
0003FAD2 <AmiBlitz3.ab2@23036>    BNE.w JL_0_D6C0
0003FAD8 <AmiBlitz3.ab2@23037>   MOVE.l #newtype_string,D2
0003FADE <AmiBlitz3.ab2@23038>    JSR get1bytemain
0003FAE2 <AmiBlitz3.ab2@23039> BRA.w JL_0_D710
0003FAE8 <AmiBlitz3.ab2@23042> JMP dupofferr
0003FAEE <AmiBlitz3.ab2@23045>   MOVE.l prevtype,D2
0003FAF2 <AmiBlitz3.ab2@23046>   BEQ.w JUMP_notypeerr
0003FAF6 <AmiBlitz3.ab2@23047> BRA.w JL_0_D706
0003FAFC <AmiBlitz3.ab2@23050> JMP notypeerr
0003FB02 <AmiBlitz3.ab2@23053>   JSR getparameter2
0003FB06 <AmiBlitz3.ab2@23054>    BEQ.w JUMP_syntaxerr
0003FB0C <AmiBlitz3.ab2@23055>   LEA newtypebase,A2
0003FB12 <AmiBlitz3.ab2@23056>    JSR findtype
0003FB16 <AmiBlitz3.ab2@23057>    BEQ.w JL_0_D704
0003FB1E <AmiBlitz3.ab2@23058>   BTST #$0,flagmask+1
0003FB22 <AmiBlitz3.ab2@23059>    BEQ.w JUMP_notypeerr
0003FB28 <AmiBlitz3.ab2@23060>   JSR addlabel
0003FB30 <AmiBlitz3.ab2@23063>   MOVE.w linenumat+2,$8(A2)
0003FB38 <AmiBlitz3.ab2@23064>   MOVE.l #MaxByte,$4(A2)
0003FB3A <AmiBlitz3.ab2@23067>   MOVE.l A2,D2
0003FB40 <AmiBlitz3.ab2@23070>   CMP.l #newtype_byte,D2
0003FB44 <AmiBlitz3.ab2@23071>    BEQ.w JL_0_D71E
0003FB4A <AmiBlitz3.ab2@23074>   ADDQ.w #1,typelen
0003FB52 <AmiBlitz3.ab2@23075>   BCLR #$0,typelen+1
0003FB54 <AmiBlitz3.ab2@23078>   MOVEQ.l #$00,D3
0003FB56 <AmiBlitz3.ab2@23079>   MOVEA.l D2,A2
0003FB5C <AmiBlitz3.ab2@23080>   MOVE.l A2,prevtype
0003FB60 <AmiBlitz3.ab2@23081>   MOVE.w $8(A2),D3
0003FB62 <AmiBlitz3.ab2@23082>   MOVEA.l (A7)+,A2
0003FB66 <AmiBlitz3.ab2@23083>   MOVE.l D2,$A(A2)
0003FB68 <AmiBlitz3.ab2@23084>   MOVEQ.l #$00,D4
0003FB6E <AmiBlitz3.ab2@23085>   MOVE.w typelen,D4
0003FB72 <AmiBlitz3.ab2@23086>   MOVE.w D4,$4(A2)
0003FB7A <AmiBlitz3.ab2@23087>   BTST #$0,flagmask+1
0003FB7E <AmiBlitz3.ab2@23088>    BEQ.w JL_0_D74C
0003FB80 <AmiBlitz3.ab2@23089>   MOVEQ.l #$04,D3
0003FB84 <AmiBlitz3.ab2@23092>   CMP.w #$5B,D0
0003FB88 <AmiBlitz3.ab2@23093>    BNE.w JL_0_D782
0003FB8C <AmiBlitz3.ab2@23094>   MOVEM.l D3-D4/A2,-(A7)
0003FB90 <AmiBlitz3.ab2@23095>    BSR.w AJL_0_BF6E
0003FB94 <AmiBlitz3.ab2@23096>   CMP.w #$5D,D0
0003FB98 <AmiBlitz3.ab2@23097>    BNE.w JUMP_syntaxerr
0003FB9A <AmiBlitz3.ab2@23098>   TST.w D6
0003FB9E <AmiBlitz3.ab2@23099>    BNE.w JUMP_fpconerr
0003FBA0 <AmiBlitz3.ab2@23100>   MOVE.l D3,D1
0003FBA4 <AmiBlitz3.ab2@23101>   MOVEM.l (A7)+,D3-D4/A2
0003FBAA <AmiBlitz3.ab2@23102>    JSR get1bytemain
0003FBAE <AmiBlitz3.ab2@23103>   MOVE.w D1,$8(A2)
0003FBB2 <AmiBlitz3.ab2@23104>   MULU.l d1,d3                                             ;>32k fix was mulu.w
0003FBBA <AmiBlitz3.ab2@23105>   ORI.w #$2,flagmask
0003FBBC <AmiBlitz3.ab2@23108>   ADD.l D3,D4
0003FBC2 <AmiBlitz3.ab2@23111>     CMP.l #65532,d4
0003FBC6 <AmiBlitz3.ab2@23116>   BCC JUMP_toolongerr
0003FBCE <AmiBlitz3.ab2@23117>   MOVE.w flagmask,$6(A2)
0003FBD4 <AmiBlitz3.ab2@23118>   MOVE.w D4,typelen
0003FBD6 <AmiBlitz3.ab2@23119> RTS
0003FBDC <AmiBlitz3.ab2@23122> JMP badenderr
0003FBE2 <AmiBlitz3.ab2@23125> JMP noiferr
0003FBE8 <AmiBlitz3.ab2@23128> JMP toolongerr
0003FBEE <AmiBlitz3.ab2@23131> JMP fpconerr
0003FBF4 <AmiBlitz3.ab2@23134>   MOVE.l firstiff,D0
0003FBF8 <AmiBlitz3.ab2@23135>    BEQ.w JUMP_noiferr
0003FBFA <AmiBlitz3.ab2@23136>   MOVEA.l D0,A0
0003FBFE <AmiBlitz3.ab2@23137>   MOVE.w $C(A0),D0
0003FC02 <AmiBlitz3.ab2@23138>   ANDI.w #$FF,D0
0003FC04 <AmiBlitz3.ab2@23139>   CMP.w D0,D1
0003FC08 <AmiBlitz3.ab2@23140>    BNE.w JUMP_badenderr
0003FC0C <AmiBlitz3.ab2@23143>   CMP.w #$1,D1
0003FC10 <AmiBlitz3.ab2@23144>   BNE.w JL_0_D7D8
0003FC14 <AmiBlitz3.ab2@23145>   MOVE.w #$6000,D1
0003FC1A <AmiBlitz3.ab2@23148>     TST.b fast
0003FC1E <AmiBlitz3.ab2@23149>     BEQ 'l1
0003FC24 <AmiBlitz3.ab2@23150>     OR.l #$ff,d1
0003FC28 <AmiBlitz3.ab2@23154>   BSR.w writeword
0003FC2E <AmiBlitz3.ab2@23155>   MOVEA.l destpointer,A1
0003FC32 <AmiBlitz3.ab2@23156>   MOVE.l $4(A0),D1
0003FC34 <AmiBlitz3.ab2@23157>   SUB.l A1,D1
0003FC3A <AmiBlitz3.ab2@23160>     TST.b fast
0003FC3E <AmiBlitz3.ab2@23161>     BEQ 'l2
0003FC42 <AmiBlitz3.ab2@23162>     BSR writelong
0003FC46 <AmiBlitz3.ab2@23163>   BRA JL_0_D7D8
0003FC4A <AmiBlitz3.ab2@23167>   BSR.w writeword
0003FC4E <AmiBlitz3.ab2@23170>   MOVEA.l $8(A0),A1                                        ;write if branch destination
0003FC54 <AmiBlitz3.ab2@23171>   MOVE.l destpointer,D1
0003FC56 <AmiBlitz3.ab2@23172>   SUB.l A1,D1
0003FC5C <AmiBlitz3.ab2@23175>     TST.b fast
0003FC60 <AmiBlitz3.ab2@23176>     BEQ 'l1
0003FC62 <AmiBlitz3.ab2@23177>     ADDQ.l #4,D1
0003FC68 <AmiBlitz3.ab2@23178>     MOVE.w dontwrite,D0
0003FC6C <AmiBlitz3.ab2@23179>     BNE.w JL_0_D7FE
0003FC70 <AmiBlitz3.ab2@23180>     MOVE.l d1,-$4(a1)
0003FC74 <AmiBlitz3.ab2@23181>   BRA JL_0_D7FE
0003FC76 <AmiBlitz3.ab2@23185>   ADDQ.l #2,d1
0003FC7C <AmiBlitz3.ab2@23186>   TST.w dontwrite
0003FC80 <AmiBlitz3.ab2@23187>   BNE JL_0_D7FE
0003FC86 <AmiBlitz3.ab2@23188>   CMP.l #MinWordSgnd,D1
0003FC8A <AmiBlitz3.ab2@23189>   BCC.w JUMP_bigiferr
0003FC8E <AmiBlitz3.ab2@23190>   MOVE.w D1,-$2(A1)
0003FC90 <AmiBlitz3.ab2@23193> RTS
0003FC96 <AmiBlitz3.ab2@23196> JMP bigiferr
0003FCA0 <AmiBlitz3.ab2@23201>   MOVE.w oldqflag,instringon
0003FCA6 <AmiBlitz3.ab2@23202>   MOVEA.l lastsourcepos,A5
0003FCA8 <AmiBlitz3.ab2@23205>   MOVEQ.l #$01,D1
0003FCAC <AmiBlitz3.ab2@23206> BRA.w JL_0_D810
0003FCB6 <AmiBlitz3.ab2@23210>   MOVE.w oldqflag,instringon
0003FCBC <AmiBlitz3.ab2@23211>   MOVEA.l lastsourcepos,A5
0003FCBE <AmiBlitz3.ab2@23214>   MOVEQ.l #$00,D1
0003FCC2 <AmiBlitz3.ab2@23217>   BSR.w JL_0_D79E
0003FCC6 <AmiBlitz3.ab2@23218>   BSR.w AJL_0_D81C
0003FCCC <AmiBlitz3.ab2@23219> JMP get1bytemain
0003FCD2 <AmiBlitz3.ab2@23222>   MOVE.l (A0),firstiff
0003FCD4 <AmiBlitz3.ab2@23223>   MOVEA.l A0,A1
0003FCD6 <AmiBlitz3.ab2@23224>   MOVEQ.l #$0E,D0
0003FCDC <AmiBlitz3.ab2@23225>   MOVEA.l _execbase,A6
0003FCE2 <AmiBlitz3.ab2@23226>   MOVE.l mempool,a0
0003FCE6 <AmiBlitz3.ab2@23227> JMP _FreePooled(A6)
0003FCEC <AmiBlitz3.ab2@23231>   JSR get1bytemain
0003FCF0 <AmiBlitz3.ab2@23234>   BEQ.w JL_0_D980
0003FCF8 <AmiBlitz3.ab2@23235>   CMP.l #"noa7",-1(a5)
0003FCFC <AmiBlitz3.ab2@23236>   BNE 'l1
0003FD02 <AmiBlitz3.ab2@23237>   JSR get1bytemain
0003FD08 <AmiBlitz3.ab2@23238>   JSR get1bytemain
0003FD0E <AmiBlitz3.ab2@23239>   JSR get1bytemain
0003FD16 <AmiBlitz3.ab2@23240>   MOVE.w #$3a,lastchar
0003FD1A <AmiBlitz3.ab2@23241> BRA JL_0_D980
0003FD20 <AmiBlitz3.ab2@23244>   CMP.w #"d0",-1(a5)
0003FD24 <AmiBlitz3.ab2@23245>   BNE 'l2
0003FD2C <AmiBlitz3.ab2@23246>   MOVE.b #1,returncode
0003FD32 <AmiBlitz3.ab2@23247>   CLR.w lastchar
0003FD36 <AmiBlitz3.ab2@23248> BRA JL_0_D980
0003FD3A <AmiBlitz3.ab2@23251>   CMP.w #$80d7,d0
0003FD3E <AmiBlitz3.ab2@23252>   BNE JL_0_D836
0003FD44 <AmiBlitz3.ab2@23253>   JSR skiprest
0003FD46 <AmiBlitz3.ab2@23254> RTS
0003FD4A <AmiBlitz3.ab2@23257>   BSR.w JL_0_D844
0003FD50 <AmiBlitz3.ab2@23258>   JSR reget
0003FD54 <AmiBlitz3.ab2@23259>   BNE.w JL_0_D836
0003FD56 <AmiBlitz3.ab2@23260> RTS
0003FD5A <AmiBlitz3.ab2@23263>   CMP.w #-$7FFF,D0
0003FD5E <AmiBlitz3.ab2@23264>    BNE.w JL_0_D87E
0003FD64 <AmiBlitz3.ab2@23265>   MOVE.w linemode,D1
0003FD68 <AmiBlitz3.ab2@23266>    BNE.w JUMP_modeerr
0003FD6E <AmiBlitz3.ab2@23267>   ADDQ.w #1,typelen
0003FD76 <AmiBlitz3.ab2@23268>   BCLR #$0,typelen+1
0003FD7C <AmiBlitz3.ab2@23269>   MOVEA.l thistype,A0
0003FD84 <AmiBlitz3.ab2@23270>   MOVE.w typelen,$8(A0)
0003FD8C <AmiBlitz3.ab2@23271>   MOVE.w #$FFFF,linemode
0003FD92 <AmiBlitz3.ab2@23272> JMP get1bytemain
0003FD98 <AmiBlitz3.ab2@23275> JMP modeerr
0003FD9C <AmiBlitz3.ab2@23278>   CMP.w #-$7FF5,D0
0003FDA0 <AmiBlitz3.ab2@23279>    BEQ.w JL_0_D80E
0003FDA4 <AmiBlitz3.ab2@23280>   CMP.w #-$7FF4,D0
0003FDA8 <AmiBlitz3.ab2@23281>    BEQ.w JL_0_D804
0003FDAC <AmiBlitz3.ab2@23282>   CMP.w #-$7FF8,D0
0003FDB0 <AmiBlitz3.ab2@23283>    BNE.w JL_0_D89A
0003FDB4 <AmiBlitz3.ab2@23286> BRA.w JL_0_D9E8
0003FDBA <AmiBlitz3.ab2@23289> JMP interr3
0003FDBE <AmiBlitz3.ab2@23292>   CMP.w #-$7FF7,D0
0003FDC2 <AmiBlitz3.ab2@23293>    BNE.w JL_0_D8C8
0003FDC8 <AmiBlitz3.ab2@23294>    TST.b fpu
0003FDCC <AmiBlitz3.ab2@23295>    BEQ 'nof
0003FDD2 <AmiBlitz3.ab2@23296>    MOVEA.l currentfunction,A0
0003FDD8 <AmiBlitz3.ab2@23297>    CMP.l #0,a0
0003FDDC <AmiBlitz3.ab2@23298>    BEQ 'nof
0003FDE2 <AmiBlitz3.ab2@23299>    CMP.b #5,$5(a0)
0003FDE6 <AmiBlitz3.ab2@23300>     BNE 'nof
0003FDEC <AmiBlitz3.ab2@23301>    MOVE.l #$f23c5000,d1
0003FDF0 <AmiBlitz3.ab2@23302>    BSR writelong
0003FDF4 <AmiBlitz3.ab2@23303>    MOVE.w #0,d1
0003FDF8 <AmiBlitz3.ab2@23304>    BSR writeword
0003FDFC <AmiBlitz3.ab2@23307>   MOVE.w #$7000,D1                                         ;end function moveq #0,d0
0003FE00 <AmiBlitz3.ab2@23308>    BSR.w writeword
0003FE06 <AmiBlitz3.ab2@23309>   MOVEA.l currentfunction,A0
0003FE0C <AmiBlitz3.ab2@23310>   CMP.l #0,a0
0003FE10 <AmiBlitz3.ab2@23311>   BEQ JL_0_D896
0003FE16 <AmiBlitz3.ab2@23312>   MOVE.l destpointer,d1
0003FE1A <AmiBlitz3.ab2@23313>   SUB.l $e(a0),d1
0003FE1E <AmiBlitz3.ab2@23314>   MOVE.l d1,isfunc+1(a0)
0003FE24 <AmiBlitz3.ab2@23315>   CMPI.b #$7,$5(A0)
0003FE28 <AmiBlitz3.ab2@23316>    BNE.w JL_0_D896
0003FE2E <AmiBlitz3.ab2@23317>   MOVE.w putstlen,D1
0003FE32 <AmiBlitz3.ab2@23318>    BSR.w writeword
0003FE36 <AmiBlitz3.ab2@23319> BRA.w JL_0_D896
0003FE3C <AmiBlitz3.ab2@23322> JMP interr
0003FE40 <AmiBlitz3.ab2@23325>  CMP.w #-$7FD0,D0
0003FE44 <AmiBlitz3.ab2@23326>    BNE.w JL_0_D966
0003FE4A <AmiBlitz3.ab2@23327>   MOVE.w proceduremode,D1
0003FE4E <AmiBlitz3.ab2@23328>    BNE.w JUMP_interr3
0003FE54 <AmiBlitz3.ab2@23329>   TST.b debugmode
0003FE58 <AmiBlitz3.ab2@23330>    BEQ.w JL_0_D90A
0003FE5A <AmiBlitz3.ab2@23331>   MOVEQ.l #$03,D1
0003FE60 <AmiBlitz3.ab2@23332>    JSR writetrap
0003FE66 <AmiBlitz3.ab2@23333>   MOVE.w dontwrite,D1
0003FE6A <AmiBlitz3.ab2@23334>    BNE.w JL_0_D90A
0003FE70 <AmiBlitz3.ab2@23335>   MOVEA.l intcleanat,A0
0003FE76 <AmiBlitz3.ab2@23336>   MOVE.l destpointer,(A0)
0003FE7A <AmiBlitz3.ab2@23337>   MOVE.w #$C30C,D1
0003FE7E <AmiBlitz3.ab2@23338>    BSR.w Atokejsr
0003FE84 <AmiBlitz3.ab2@23341>   MOVE.w intstring,D1
0003FE88 <AmiBlitz3.ab2@23342>    BEQ.w JUMP_interr
0003FE8C <AmiBlitz3.ab2@23343>    BPL.w JL_0_D934
0003FE92 <AmiBlitz3.ab2@23344>   MOVE.w intlevel,D1
0003FE96 <AmiBlitz3.ab2@23345>   ORI.w #$7200,D1
0003FE9A <AmiBlitz3.ab2@23346>    BSR.w writeword
0003FE9E <AmiBlitz3.ab2@23347>   MOVE.w #$C103,D1
0003FEA2 <AmiBlitz3.ab2@23348>    BSR.w Atokejsr
0003FEA8 <AmiBlitz3.ab2@23349>   CLR.w intlevel
0003FEAE <AmiBlitz3.ab2@23352>  CLR.w intstring
0003FEB4 <AmiBlitz3.ab2@23353>   MOVE.l intfin,D1
0003FEB8 <AmiBlitz3.ab2@23354>    BSR.w writelong
0003FEBE <AmiBlitz3.ab2@23355>   MOVE.l #$70004E75,D1
0003FEC2 <AmiBlitz3.ab2@23356>    BSR.w writelong
0003FEC8 <AmiBlitz3.ab2@23357>   MOVE.w dontwrite,D1
0003FECC <AmiBlitz3.ab2@23358>    BNE.w JL_0_D962
0003FED2 <AmiBlitz3.ab2@23359>   MOVEA.l intjmpat,A0
0003FED6 <AmiBlitz3.ab2@23360>   MOVE.l destpointer(PC),(A0)
0003FEDC <AmiBlitz3.ab2@23363> JMP get1bytemain
0003FEE0 <AmiBlitz3.ab2@23367>   CMP.w #-$7FF2,D0
0003FEE4 <AmiBlitz3.ab2@23368>    BEQ.w doendsel
0003FEE8 <AmiBlitz3.ab2@23369>   CMP.w #-$7F4C,D0
0003FEEC <AmiBlitz3.ab2@23370>    BNE.w JL_0_D97C
0003FEF2 <AmiBlitz3.ab2@23371> JMP doendseterr
0003FEF8 <AmiBlitz3.ab2@23375> JMP syntaxerr
0003FEFE <AmiBlitz3.ab2@23379>   TST.w dirmode
0003FF02 <AmiBlitz3.ab2@23380>   BNE.w JUMP_baddirerr
0003FF06 <AmiBlitz3.ab2@23381>   MOVE.w #$C800,D1
0003FF0C <AmiBlitz3.ab2@23382>   JSR Atokejsr                                            ;end
0003FF14 <AmiBlitz3.ab2@23383>   CMP.l #"noa7",-4(a5)
0003FF18 <AmiBlitz3.ab2@23384>   BNE 'l10
0003FF1E <AmiBlitz3.ab2@23385>   TST.w dontwrite
0003FF22 <AmiBlitz3.ab2@23386>   BNE 'l10
0003FF28 <AmiBlitz3.ab2@23387>   MOVE.l destpointer,d1
0003FF2A <AmiBlitz3.ab2@23388>   SUBQ.l #4,d1
0003FF2C <AmiBlitz3.ab2@23389>   MOVE.l a0,-(a7)
0003FF2E <AmiBlitz3.ab2@23390>   MOVE.l d1,a0
0003FF30 <AmiBlitz3.ab2@23391>   MOVE.l (a0),a0
0003FF36 <AmiBlitz3.ab2@23392>   MOVE.l #$60000002,(a0)+
0003FF3A <AmiBlitz3.ab2@23393>   MOVE.w #$588f,(a0)
0003FF3C <AmiBlitz3.ab2@23394>   MOVE.l (a7)+,a0
0003FF3E <AmiBlitz3.ab2@23397> RTS
0003FF44 <AmiBlitz3.ab2@23401>   TST.w dirmode                                            ;stop
0003FF48 <AmiBlitz3.ab2@23402>   BNE.w JUMP_baddirerr
0003FF4A <AmiBlitz3.ab2@23403>   MOVE.w d0,d1
0003FF4E <AmiBlitz3.ab2@23404>   BEQ 'l10
0003FF52 <AmiBlitz3.ab2@23405>   CMP.b #$3a,d0
0003FF56 <AmiBlitz3.ab2@23406>   BEQ 'l10
0003FF5C <AmiBlitz3.ab2@23407>   JSR get1bytemain
0003FF62 <AmiBlitz3.ab2@23410>   TST.b debugmode
0003FF66 <AmiBlitz3.ab2@23411>   BEQ.w newstop
0003FF6A <AmiBlitz3.ab2@23412>   MOVE.w #$D501,D1
0003FF6E <AmiBlitz3.ab2@23413> BRA.w Atokejsr
0003FF70 <AmiBlitz3.ab2@23417>     RTS
0003FF72 <AmiBlitz3.ab2@23419>   MOVE.w d1,d0
0003FF76 <AmiBlitz3.ab2@23420>   BEQ 'l10
0003FF7A <AmiBlitz3.ab2@23421>   CMP.b #$3a,d0
0003FF7E <AmiBlitz3.ab2@23422>   BEQ 'l10
0003FF82 <AmiBlitz3.ab2@23423>   SUB.b #$30,d0
0003FF86 <AmiBlitz3.ab2@23424>   MOVE.w #$4e40,d1
0003FF8A <AmiBlitz3.ab2@23425> BRA 'l11
0003FF8E <AmiBlitz3.ab2@23428>   MOVE.w #$4e4a,d1
0003FF92 <AmiBlitz3.ab2@23429> BRA writeword
0003FF94 <AmiBlitz3.ab2@23432>   ADD.b d0,d1
0003FF98 <AmiBlitz3.ab2@23433> BRA writeword
0003FF9E <AmiBlitz3.ab2@23437> JMP badconterr
0003FFA2 <AmiBlitz3.ab2@23440>   MOVE.w #$4E71,D1
0003FFA6 <AmiBlitz3.ab2@23441> BRA.w writeword
0003FFAC <AmiBlitz3.ab2@23444>   MOVEA.l firstfor,A2
0003FFB2 <AmiBlitz3.ab2@23445>   CLR.l firstfor
0003FFB8 <AmiBlitz3.ab2@23446>   MOVEA.l _execbase,A6
0003FFBC <AmiBlitz3.ab2@23449>   CMPA.w #$0,A2
0003FFC0 <AmiBlitz3.ab2@23450>   BEQ.w JL_0_D9E6
0003FFC2 <AmiBlitz3.ab2@23451>   MOVEA.l A2,A1
0003FFC4 <AmiBlitz3.ab2@23452>   MOVEA.l (A1),A2
0003FFC6 <AmiBlitz3.ab2@23453>   MOVEQ.l #$00,D0
0003FFCC <AmiBlitz3.ab2@23454>   MOVE.l mempool2,a0
0003FFD0 <AmiBlitz3.ab2@23455>   MOVE.b $10(A1),D0
0003FFD4 <AmiBlitz3.ab2@23456>   JSR _FreePooled(A6)                                      ;freememfor_error
0003FFD8 <AmiBlitz3.ab2@23457> BRA.w JL_0_D9CC
0003FFDA <AmiBlitz3.ab2@23460> RTS
0003FFE0 <AmiBlitz3.ab2@23464> JMP badpenderr
0003FFE6 <AmiBlitz3.ab2@23470>   MOVE.w proceduremode,D1
0003FFEA <AmiBlitz3.ab2@23471>    BEQ.w JUMP_badpenderr
0003FFF0 <AmiBlitz3.ab2@23473>   MOVE.w dontwrite,D1
0003FFF4 <AmiBlitz3.ab2@23474>    BNE.w JL_0_DA1A
0003FFFA <AmiBlitz3.ab2@23475>   MOVEA.l firstpend,A2
0003FFFE <AmiBlitz3.ab2@23478>   CMPA.w #$0,A2
00040002 <AmiBlitz3.ab2@23479>    BEQ.w JL_0_DA1A
00040006 <AmiBlitz3.ab2@23480>   MOVEA.l $4(A2),A0
0004000C <AmiBlitz3.ab2@23481>   MOVE.l destpointer,(A0)
0004000E <AmiBlitz3.ab2@23482>   MOVEA.l (A2),A2
00040012 <AmiBlitz3.ab2@23483> BRA.w JL_0_DA02
00040018 <AmiBlitz3.ab2@23486>   TST.b debugmode
0004001C <AmiBlitz3.ab2@23487>    BEQ.b JL_0_DA2A
0004001E <AmiBlitz3.ab2@23488>   MOVEQ.l #$05,D1
00040024 <AmiBlitz3.ab2@23489>   JSR writetrap
0004002A <AmiBlitz3.ab2@23492>   MOVEA.l firstlocal,A2                                    ;firstlocal
00040030 <AmiBlitz3.ab2@23493>   JSR calcstatic2b                                           ;calcstatic
00040036 <AmiBlitz3.ab2@23494>   MOVEA.l currentfunction,A0
0004003C <AmiBlitz3.ab2@23495>   MOVE.l destpointer,d1
00040040 <AmiBlitz3.ab2@23496>   SUB.l $e(a0),d1
00040044 <AmiBlitz3.ab2@23497>   MOVE.l d1,isfunc+1(a0)                                   ;store function size
00040048 <AmiBlitz3.ab2@23498>   MOVE.w D4,$8(A0)                                         ;set if memalloc need
0004004E <AmiBlitz3.ab2@23499>   MOVE.l D3,locdatast
00040054 <AmiBlitz3.ab2@23500>   MOVEA.l tempvm,A1
0004005A <AmiBlitz3.ab2@23501>  CLR.b infunctioncode
00040060 <AmiBlitz3.ab2@23502>   MOVE.l firstiffstore,d1
00040066 <AmiBlitz3.ab2@23503>   CMP.l firstiff,d1
0004006A <AmiBlitz3.ab2@23504>   BNE JUMP_noenderr
0004006E <AmiBlitz3.ab2@23505>   TST.w $C(A1)                                             ;dim
00040072 <AmiBlitz3.ab2@23506>    BPL.w JL_0_DA64
00040078 <AmiBlitz3.ab2@23507>  BSET #$7,$8(A0)
0004007C <AmiBlitz3.ab2@23508>   MOVE.w #$C005,D1
00040080 <AmiBlitz3.ab2@23509>    BSR.w tokejsr2                                          ;writefreememstatement
00040084 <AmiBlitz3.ab2@23510> BRA.w JL_0_DA6C
0004008A <AmiBlitz3.ab2@23513> JMP noenderr
00040092 <AmiBlitz3.ab2@23516>   MOVE.w memlibstat,$C(A1)
00040098 <AmiBlitz3.ab2@23519>   MOVEA.l currentfunction,A0
0004009C <AmiBlitz3.ab2@23520>   MOVE.l $E(A0),-(A7)
000400A4 <AmiBlitz3.ab2@23521>   MOVE.w locvaroff,$6(A0)
000400AA <AmiBlitz3.ab2@23522>   BCLR #$1,$7(A0)
000400B0 <AmiBlitz3.ab2@23523>   BCLR #$0,$7(A0)
000400B6 <AmiBlitz3.ab2@23524>   CMPI.b #$7,$5(A0)
000400BA <AmiBlitz3.ab2@23525>    BNE.w JL_0_DA9E
000400C0 <AmiBlitz3.ab2@23526>   MOVE.w getstlen,D1
000400C4 <AmiBlitz3.ab2@23527>    BSR.w writeword
000400C8 <AmiBlitz3.ab2@23530>   TST.w $6(A0)
000400CC <AmiBlitz3.ab2@23531>    BEQ.w JL_0_DAB8
000400D0 <AmiBlitz3.ab2@23532>   MOVE.w #$FC7B,D1
000400D6 <AmiBlitz3.ab2@23533>    JSR uselib
000400DC <AmiBlitz3.ab2@23534>   MOVE.w unlinka4,D1
000400E0 <AmiBlitz3.ab2@23535>    BSR.w writeword
000400E6 <AmiBlitz3.ab2@23538>   MOVEA.l currentfunction,A0
000400E8 <AmiBlitz3.ab2@23539>   MOVEQ.l #$00,D1
000400EC <AmiBlitz3.ab2@23540>   MOVE.b $4(A0),D1
000400EE <AmiBlitz3.ab2@23541>   LSR.w #4,D1
000400F2 <AmiBlitz3.ab2@23542>    BEQ.w JL_0_DB24
000400F4 <AmiBlitz3.ab2@23544>      LSL.w #1,d1
000400F8 <AmiBlitz3.ab2@23546>   CMP.w #$1,D1
000400FC <AmiBlitz3.ab2@23547>    BNE.w JL_0_DAE0
00040102 <AmiBlitz3.ab2@23548>   MOVE.w fix1,D1
00040106 <AmiBlitz3.ab2@23549>    BSR.w writeword
0004010A <AmiBlitz3.ab2@23550> BRA.w JL_0_DB24
0004010C <AmiBlitz3.ab2@23553>   LSL.w #2,D1
0004010E <AmiBlitz3.ab2@23554>   MOVE.w D1,-(A7)
00040114 <AmiBlitz3.ab2@23555>   MOVE.w D1,moverts+2
0004011A <AmiBlitz3.ab2@23556>   MOVE.l moverts,D1
0004011E <AmiBlitz3.ab2@23557>    BSR.w writelong
00040120 <AmiBlitz3.ab2@23558>   MOVE.w (A7)+,D1
00040124 <AmiBlitz3.ab2@23559>   CMP.w #$8,D1
00040128 <AmiBlitz3.ab2@23560>    BHI.w JL_0_DB14
0004012C <AmiBlitz3.ab2@23561>   ANDI.w #$7,D1
0004012E <AmiBlitz3.ab2@23562>   LSL.w #8,D1
00040130 <AmiBlitz3.ab2@23563>   LSL.w #1,D1
00040136 <AmiBlitz3.ab2@23564>   OR.w fixq,D1
0004013A <AmiBlitz3.ab2@23565>    BSR.w writeword
0004013E <AmiBlitz3.ab2@23566> BRA.w JL_0_DB24
00040144 <AmiBlitz3.ab2@23570>    MOVE.w D1,fixstack+2
0004014A <AmiBlitz3.ab2@23571>   MOVE.l fixstack,D1
0004014E <AmiBlitz3.ab2@23572>    BSR.w writelong
00040152 <AmiBlitz3.ab2@23575>    BSR.w JL_0_D2CA
00040156 <AmiBlitz3.ab2@23576>    BSR.w JL_0_D4F8
00040158 <AmiBlitz3.ab2@23577>   MOVEA.l (A7)+,A0
0004015E <AmiBlitz3.ab2@23578>   MOVE.w dontwrite,D1
00040162 <AmiBlitz3.ab2@23579>    BNE.w JL_0_DB3E
00040168 <AmiBlitz3.ab2@23580>   MOVE.l destpointer,-(A0)
0004016E <AmiBlitz3.ab2@23583>   CLR.w proceduremode
00040174 <AmiBlitz3.ab2@23584>   CLR.l currentfunction
0004017A <AmiBlitz3.ab2@23585>   CLR.w procnum
0004017E <AmiBlitz3.ab2@23586>    BSR.w JL_0_DB5C
00040184 <AmiBlitz3.ab2@23587>    JSR freepends
0004018A <AmiBlitz3.ab2@23588> JMP get1bytemain
0004018C <AmiBlitz3.ab2@23591>   MOVEQ.l #$0C,D0
0004018E <AmiBlitz3.ab2@23592>   MOVEQ.l #$01,D1
00040194 <AmiBlitz3.ab2@23593>   MOVEA.l _execbase,A6
0004019A <AmiBlitz3.ab2@23595>   MOVE.l mempool,a0
0004019E <AmiBlitz3.ab2@23596>   JSR _AllocPooled(a6)
000401A0 <AmiBlitz3.ab2@23597>   MOVEA.l D0,A0
000401A6 <AmiBlitz3.ab2@23598>   MOVE.l alllocals,(A0)
000401AC <AmiBlitz3.ab2@23599>   MOVE.l A0,alllocals
000401B2 <AmiBlitz3.ab2@23600>   MOVE.l firstlocal,D0
000401B8 <AmiBlitz3.ab2@23601>   CLR.l firstlocal
000401BC <AmiBlitz3.ab2@23602>   MOVE.l D0,$4(A0)
000401C2 <AmiBlitz3.ab2@23603>   MOVE.l firstglob,D1
000401C8 <AmiBlitz3.ab2@23604>   CLR.l firstglob
000401CC <AmiBlitz3.ab2@23605>   MOVE.l D1,$8(A0)
000401D2 <AmiBlitz3.ab2@23606>   TST.b debugmode
000401D6 <AmiBlitz3.ab2@23607>    BEQ.b JL_0_DBB0
000401DC <AmiBlitz3.ab2@23608>   TST.w dontwrite
000401E0 <AmiBlitz3.ab2@23609>    BNE.b JL_0_DBB0
000401E4 <AmiBlitz3.ab2@23610>   MOVEA.l proclocals(PC),A0
000401E6 <AmiBlitz3.ab2@23611>   MOVE.l D0,(A0)+
000401E8 <AmiBlitz3.ab2@23612>   MOVE.l D1,(A0)
000401EA <AmiBlitz3.ab2@23615> RTS
000401F0 <AmiBlitz3.ab2@23618> JMP baddirerr
000401F6 <AmiBlitz3.ab2@23622>   TST.w dirmode
000401FA <AmiBlitz3.ab2@23623>    BNE.w JUMP_baddirerr
00040200 <AmiBlitz3.ab2@23624>   MOVE.l firstfor,D1
00040204 <AmiBlitz3.ab2@23625>    BEQ.w JUMP_noforerr
0004020A <AmiBlitz3.ab2@23626>   JSR reget
0004020E <AmiBlitz3.ab2@23627>    BEQ.w JL_0_DC18
00040212 <AmiBlitz3.ab2@23630>   BSR.w getparameter
00040216 <AmiBlitz3.ab2@23631>   MOVEA.l firstfor(PC),A2
00040218 <AmiBlitz3.ab2@23632>   MOVEQ.l #$00,D1
0004021C <AmiBlitz3.ab2@23633>   MOVE.b $10(A2),D1
00040220 <AmiBlitz3.ab2@23634>   SUBI.w #$12,D1
00040222 <AmiBlitz3.ab2@23635>   CMP.w D1,D2
00040226 <AmiBlitz3.ab2@23636>    BNE.w JUMP_noforerr
0004022A <AmiBlitz3.ab2@23637>   LEA ptr_parameterstore(PC),A0
0004022E <AmiBlitz3.ab2@23638>   LEA $11(A2),A1
00040230 <AmiBlitz3.ab2@23639>   SUBQ.w #1,D2
00040232 <AmiBlitz3.ab2@23642>     CMPM.b (A0)+,(A1)+
00040236 <AmiBlitz3.ab2@23643>     BNE.w JUMP_noforerr
0004023A <AmiBlitz3.ab2@23644>   DBF D2,JL_0_DBF0
0004023E <AmiBlitz3.ab2@23646>    BSR.w JL_0_DC1A
00040244 <AmiBlitz3.ab2@23647>    JSR reget
00040248 <AmiBlitz3.ab2@23648>    BEQ.w JL_0_DC16
0004024C <AmiBlitz3.ab2@23649>   CMP.w #$2C,D0
00040250 <AmiBlitz3.ab2@23650>    BNE.w JUMP_syntaxerr
00040256 <AmiBlitz3.ab2@23651>    JSR get1bytemain
0004025A <AmiBlitz3.ab2@23652> BRA.w JL_0_DBCE
00040260 <AmiBlitz3.ab2@23655> JMP noforerr
00040262 <AmiBlitz3.ab2@23658> RTS
00040266 <AmiBlitz3.ab2@23662>   MOVE.l 8(a7),a2
0004026A <AmiBlitz3.ab2@23663>   Dc.l  $f2124400                                          ;fmove.s (a2),fp0
0004026E <AmiBlitz3.ab2@23664>   Dc.l  $F2174422                                          ;fadd.s (a7),fp0
00040272 <AmiBlitz3.ab2@23665>   Dc.l  $F2126400                                          ;fmove.s fp0,(a2)
00040274 <AmiBlitz3.ab2@23669>   MOVEA.l D1,A2
0004027A <AmiBlitz3.ab2@23672>   JSR popnext                                           ;error checking for next.
0004027E <AmiBlitz3.ab2@23673>   MOVE.w $C(A2),D0
00040284 <AmiBlitz3.ab2@23674>   LEA nextb,A0
0004028A <AmiBlitz3.ab2@23675>   LEA nextbf,A1
0004028E <AmiBlitz3.ab2@23676>   CMP.w #$1,D0
00040292 <AmiBlitz3.ab2@23677>    BEQ.w JL_0_DC74
00040298 <AmiBlitz3.ab2@23678>   LEA nextw,A0
0004029E <AmiBlitz3.ab2@23679>   LEA nextwf,A1
000402A2 <AmiBlitz3.ab2@23680>   CMP.w #$2,D0
000402A6 <AmiBlitz3.ab2@23681>    BEQ.w JL_0_DC74
000402AC <AmiBlitz3.ab2@23682>   LEA nextl,A0
000402B2 <AmiBlitz3.ab2@23683>   LEA nextlf,A1
000402B6 <AmiBlitz3.ab2@23684>   CMP.w #$5,D0
000402BA <AmiBlitz3.ab2@23685>    BNE.w JL_0_DC74
000402C0 <AmiBlitz3.ab2@23686>    TST.b fpu
000402C4 <AmiBlitz3.ab2@23687>    BEQ 'old
000402CA <AmiBlitz3.ab2@23688>    LEA fpu2dats,a0                                         ;fpu next code
000402D0 <AmiBlitz3.ab2@23689>    LEA fpu2date,a1
000402D4 <AmiBlitz3.ab2@23690> BRA JL_0_DC74
000402D8 <AmiBlitz3.ab2@23693>   MOVE.w #$C900,D1
000402DC <AmiBlitz3.ab2@23694>    BSR.w Atokejsr
000402E2 <AmiBlitz3.ab2@23695>   LEA nextf,A0
000402E8 <AmiBlitz3.ab2@23696>   LEA nextff,A1
000402EC <AmiBlitz3.ab2@23699>   BSR.w pokecode
000402F2 <AmiBlitz3.ab2@23700>     TST.b fast                                             ;fast for next deactivate
000402F6 <AmiBlitz3.ab2@23701> BRA 'l1
000402FC <AmiBlitz3.ab2@23703>     TST.b onestep
00040300 <AmiBlitz3.ab2@23704>     BEQ 'l1
00040306 <AmiBlitz3.ab2@23705>     CLR.b onestep
0004030C <AmiBlitz3.ab2@23706>     SUBQ.l #4,destpointer
00040310 <AmiBlitz3.ab2@23707>     MOVE.w #$5292,d1
00040314 <AmiBlitz3.ab2@23708>     BSR writeword
00040318 <AmiBlitz3.ab2@23711>   MOVE.l JL_0_DCF4(PC),D1
0004031C <AmiBlitz3.ab2@23712>    BSR.w writelong
00040322 <AmiBlitz3.ab2@23713>   MOVEA.l firstfor,A2
00040328 <AmiBlitz3.ab2@23714>   MOVE.l (A2),firstfor
0004032C <AmiBlitz3.ab2@23715>   MOVEA.l $8(A2),A0
00040332 <AmiBlitz3.ab2@23716>   MOVEA.l destpointer,A1
00040334 <AmiBlitz3.ab2@23717>   MOVE.l A1,D1
00040336 <AmiBlitz3.ab2@23718>   SUB.l A0,D1
00040338 <AmiBlitz3.ab2@23719>   ADDQ.l #2,D1
0004033E <AmiBlitz3.ab2@23720>   CMP.l #MinWordSgnd,D1
00040342 <AmiBlitz3.ab2@23721>    BCC.w JUMP_bigforerr
00040348 <AmiBlitz3.ab2@23722>   TST.w dontwrite
0004034C <AmiBlitz3.ab2@23723>    BNE.w JL_0_DCB4
00040350 <AmiBlitz3.ab2@23724>   MOVE.w D1,-$2(A0)
00040352 <AmiBlitz3.ab2@23727>   MOVE.l A1,D1
00040356 <AmiBlitz3.ab2@23728>   SUB.l $4(A2),D1
00040358 <AmiBlitz3.ab2@23729>   SUBQ.l #6,D1
0004035E <AmiBlitz3.ab2@23730>   CMP.l #MinWordSgnd,D1
00040362 <AmiBlitz3.ab2@23731>    BCC.w JUMP_bigforerr
00040368 <AmiBlitz3.ab2@23732>   TST.w dontwrite
0004036C <AmiBlitz3.ab2@23733>    BNE.w JL_0_DCD6
0004036E <AmiBlitz3.ab2@23734>   NEG.w D1
00040372 <AmiBlitz3.ab2@23735>   MOVE.w D1,-$2(A1)
00040378 <AmiBlitz3.ab2@23738>   JSR popnext3
0004037E <AmiBlitz3.ab2@23739>   MOVEA.l _execbase,A6
00040380 <AmiBlitz3.ab2@23740>   MOVEA.l A2,A1
00040382 <AmiBlitz3.ab2@23741>   MOVEQ.l #$00,D0
00040386 <AmiBlitz3.ab2@23742>   MOVE.b $10(A1),D0
0004038C <AmiBlitz3.ab2@23743>   MOVE.l mempool2,a0
00040390 <AmiBlitz3.ab2@23744>   JSR _FreePooled(A6)
00040396 <AmiBlitz3.ab2@23745> JMP reget
0004039C <AmiBlitz3.ab2@23748> JMP notallowd
000403A2 <AmiBlitz3.ab2@23751> JMP bigforerr
000403A6 <AmiBlitz3.ab2@23758>   MOVE.w #$664F,-(A7)
000403AA <AmiBlitz3.ab2@23761> BRA.w JL_0_DCF4
000403B0 <AmiBlitz3.ab2@23764> JMP error_dublicate_for
000403B4 <AmiBlitz3.ab2@23767> forlineat:   Ds.l 1
000403B6 <AmiBlitz3.ab2@23768> fortemp:     Ds.w 1
000403BC <AmiBlitz3.ab2@23775>   CLR.l fp0addr
000403C2 <AmiBlitz3.ab2@23776>   TST.w dirmode
000403C6 <AmiBlitz3.ab2@23777>    BNE.w JUMP_baddirerr
000403D0 <AmiBlitz3.ab2@23778>   MOVE.l linenumat,forlineat
000403D6 <AmiBlitz3.ab2@23782>   MOVE.l A5,letstart
000403DA <AmiBlitz3.ab2@23783>   BSR.w getparameter
000403E0 <AmiBlitz3.ab2@23784>   MOVE.w D2,fortemp
000403E6 <AmiBlitz3.ab2@23785>   JSR findfor
000403EA <AmiBlitz3.ab2@23786>    BEQ.w JUMP_error_dublicate_for
000403F0 <AmiBlitz3.ab2@23787>   LEA firstfor,A2
000403F6 <AmiBlitz3.ab2@23788>   JSR addhere2
000403F8 <AmiBlitz3.ab2@23789>   MOVE.l A2,-(A7)
000403FE <AmiBlitz3.ab2@23790>   TST.b debugmode
00040402 <AmiBlitz3.ab2@23791>    BEQ.b JL_0_DD4C
00040408 <AmiBlitz3.ab2@23792>   JSR chkstak
0004040E <AmiBlitz3.ab2@23793>   MOVE.l AJL_0_DCF0,D1
00040414 <AmiBlitz3.ab2@23794>   JSR  writelong
00040418 <AmiBlitz3.ab2@23797>   MOVE.w fortemp(PC),D2
00040420 <AmiBlitz3.ab2@23798>   MOVE.b #1,formode
00040424 <AmiBlitz3.ab2@23799>   BSR.w AJL_0_DEA6                                         ;for get 1. value
0004042A <AmiBlitz3.ab2@23800>   CLR.b formode
0004042E <AmiBlitz3.ab2@23801>   CMP.w #-$7FE8,D0
00040432 <AmiBlitz3.ab2@23802>    BNE.w JUMP_syntaxerr
00040438 <AmiBlitz3.ab2@23803>   MOVE.w commode,D1
0004043C <AmiBlitz3.ab2@23804>    BNE.w JUMP_syntaxerr
00040440 <AmiBlitz3.ab2@23805>   CMP.b #$6,D2
00040444 <AmiBlitz3.ab2@23806>    BCC.w JUMP_badforerr
00040448 <AmiBlitz3.ab2@23807>   BTST #$F,D2
0004044C <AmiBlitz3.ab2@23808>    BNE.w JL_0_DD86
00040452 <AmiBlitz3.ab2@23809>   MOVE.w leaamp,D1
00040458 <AmiBlitz3.ab2@23810>   JSR pokewda5s
0004045A <AmiBlitz3.ab2@23811>   MOVE.w D3,D1
00040460 <AmiBlitz3.ab2@23812>   JSR  writeword
00040466 <AmiBlitz3.ab2@23815>   MOVE.w pushindex,D1
0004046C <AmiBlitz3.ab2@23816>   JSR  writeword
00040470 <AmiBlitz3.ab2@23817>   ANDI.w #$FF,D2
00040472 <AmiBlitz3.ab2@23819>   MOVEA.l (A7),A1
00040476 <AmiBlitz3.ab2@23820>   MOVE.w D2,$C(A1)
00040478 <AmiBlitz3.ab2@23821>   MOVE.w D2,-(A7)
0004047C <AmiBlitz3.ab2@23822>    BSR.w eval
00040482 <AmiBlitz3.ab2@23823>    CLR.b onestep
00040486 <AmiBlitz3.ab2@23824>    CMP.w #$8019,d0
0004048A <AmiBlitz3.ab2@23825>    BEQ 'l1
00040492 <AmiBlitz3.ab2@23826>    MOVE.b #1,onestep
00040494 <AmiBlitz3.ab2@23829>   MOVE.w (A7),D2
0004049A <AmiBlitz3.ab2@23830>   MOVE.w pushd0l,D1
0004049E <AmiBlitz3.ab2@23831>   CMP.w #$3,D2
000404A2 <AmiBlitz3.ab2@23832>    BCC.w JL_0_DDB6
000404A8 <AmiBlitz3.ab2@23833>   MOVE.w pushd0wd,D1
000404AA <AmiBlitz3.ab2@23836>    MOVE.w D1,-(A7)
000404B0 <AmiBlitz3.ab2@23837>    TST.b fpu
000404B4 <AmiBlitz3.ab2@23838>    BEQ 'old
000404B8 <AmiBlitz3.ab2@23839>    CMP.b #5,d2
000404BC <AmiBlitz3.ab2@23840>    BNE 'old
000404C2 <AmiBlitz3.ab2@23841>    MOVE.l #$f2276400,d1
000404C8 <AmiBlitz3.ab2@23843>    JSR writelong
000404CC <AmiBlitz3.ab2@23844> BRA 'weit
000404D2 <AmiBlitz3.ab2@23847>    JSR  writeword                                          ;fpu for end value
000404D6 <AmiBlitz3.ab2@23850>   CMP.w #-$7FE7,D0
000404DA <AmiBlitz3.ab2@23851>    BNE.w JL_0_DDCC
000404DE <AmiBlitz3.ab2@23852>    BSR.w eval
000404E4 <AmiBlitz3.ab2@23853>    TST.b fpu
000404E8 <AmiBlitz3.ab2@23854>    BEQ JL_0_DE0C
000404EC <AmiBlitz3.ab2@23855>    CMP.b #5,d2
000404F0 <AmiBlitz3.ab2@23856>    BNE JL_0_DE0C
000404F6 <AmiBlitz3.ab2@23857>    MOVE.l #$f2276400,d1                                    ;write step <> 1
000404FC <AmiBlitz3.ab2@23859>   JSR writelong
000404FE <AmiBlitz3.ab2@23862>    MOVE.w (a7)+,d1
00040502 <AmiBlitz3.ab2@23863> BRA fpur
00040506 <AmiBlitz3.ab2@23866>   CMP.w #$4,D2
0004050A <AmiBlitz3.ab2@23867>    BCC.w JL_0_DDE0
0004050E <AmiBlitz3.ab2@23868>   MOVE.w #$7001,D1
00040514 <AmiBlitz3.ab2@23869>   JSR writeword
00040518 <AmiBlitz3.ab2@23870> BRA.w JL_0_DE0C
0004051E <AmiBlitz3.ab2@23873> JMP badforerr
00040522 <AmiBlitz3.ab2@23876>   BNE.w JL_0_DDFA
00040526 <AmiBlitz3.ab2@23877>   MOVE.w #$7001,D1
0004052C <AmiBlitz3.ab2@23878>   JSR writeword
00040532 <AmiBlitz3.ab2@23879>   MOVE.w swapd0,D1
00040538 <AmiBlitz3.ab2@23880>   JSR writeword
0004053C <AmiBlitz3.ab2@23881> BRA.w JL_0_DE0C
00040542 <AmiBlitz3.ab2@23884>   TST.b fpu
00040546 <AmiBlitz3.ab2@23885>    BEQ 'old
0004054A <AmiBlitz3.ab2@23886>   CMP.b #5,d2
0004054E <AmiBlitz3.ab2@23887>    BNE 'old
00040554 <AmiBlitz3.ab2@23888>   MOVE.l #$f23c5000,d1
0004055A <AmiBlitz3.ab2@23889>   JSR writelong
0004055E <AmiBlitz3.ab2@23890>   MOVE.w #$1,d1
00040564 <AmiBlitz3.ab2@23891>   JSR writeword
0004056A <AmiBlitz3.ab2@23892>   MOVE.l #$f2276400,d1
00040570 <AmiBlitz3.ab2@23893>   JSR writelong
00040572 <AmiBlitz3.ab2@23894>   MOVE.w (a7)+,d1
00040576 <AmiBlitz3.ab2@23895> BRA fpur
0004057A <AmiBlitz3.ab2@23898>   MOVE.w #$203C,D1                                         ;write step 1
00040580 <AmiBlitz3.ab2@23899>   JSR writeword
00040586 <AmiBlitz3.ab2@23900>   MOVE.l #SA_BackFill,D1                                   ;#$80000041,d1 org source  ;ffp '1'
0004058C <AmiBlitz3.ab2@23901>   JSR writelong
0004058E <AmiBlitz3.ab2@23904>   MOVE.w (A7)+,D1
00040594 <AmiBlitz3.ab2@23905>   JSR writeword                                            ;push step on stack
00040596 <AmiBlitz3.ab2@23908>   MOVE.w (A7)+,D2
00040598 <AmiBlitz3.ab2@23909>   MOVEA.l (A7),A1
000405A0 <AmiBlitz3.ab2@23910>   MOVE.l destpointer,$4(A1)
000405A6 <AmiBlitz3.ab2@23911>   LEA forcompb,A0
000405AC <AmiBlitz3.ab2@23912>   LEA forcompbf,A1
000405B0 <AmiBlitz3.ab2@23913>   CMP.w #$1,D2
000405B4 <AmiBlitz3.ab2@23914>    BEQ.w JL_0_DE7E
000405BA <AmiBlitz3.ab2@23915>   LEA forcompw,A0
000405C0 <AmiBlitz3.ab2@23916>   LEA forcompwf,A1
000405C4 <AmiBlitz3.ab2@23917>   CMP.w #$2,D2
000405C8 <AmiBlitz3.ab2@23918>    BEQ.w JL_0_DE7E
000405CE <AmiBlitz3.ab2@23919>   LEA forcompl,A0
000405D4 <AmiBlitz3.ab2@23920>   LEA forcomplf,A1
000405D8 <AmiBlitz3.ab2@23921>   CMP.w #$5,D2
000405DC <AmiBlitz3.ab2@23922>    BNE.w JL_0_DE7E
000405E2 <AmiBlitz3.ab2@23923>   TST.b fpu
000405E6 <AmiBlitz3.ab2@23924>    BEQ 'old
000405EC <AmiBlitz3.ab2@23925>   LEA fpu_start,a0
000405F2 <AmiBlitz3.ab2@23926>   LEA fpu_end,a1
000405F8 <AmiBlitz3.ab2@23927>   JSR pokecode
000405FC <AmiBlitz3.ab2@23928> BRA fpu3
00040602 <AmiBlitz3.ab2@23931>   LEA forcompf,A0                                         ;

00040608 <AmiBlitz3.ab2@23932>   LEA forcompff,A1
0004060E <AmiBlitz3.ab2@23933>   JSR pokecode
00040612 <AmiBlitz3.ab2@23934>   MOVE.w #$C900,D1
00040616 <AmiBlitz3.ab2@23935>   BSR.w Atokejsr
0004061C <AmiBlitz3.ab2@23936>   LEA forcompf2,A0
00040622 <AmiBlitz3.ab2@23937>   LEA forcompf2f,A1
00040628 <AmiBlitz3.ab2@23940>   JSR pokecode
0004062E <AmiBlitz3.ab2@23941>   TST.b fast                                               ;fast for next
00040632 <AmiBlitz3.ab2@23942>    BEQ 's1
00040636 <AmiBlitz3.ab2@23943>   CMP.w #3,d2
0004063A <AmiBlitz3.ab2@23944>    BNE 's1
00040640 <AmiBlitz3.ab2@23945>   TST.b onestep
00040644 <AmiBlitz3.ab2@23946>    BEQ 's1
0004064E <AmiBlitz3.ab2@23947>   SUB.l #10,destpointer
00040652 <AmiBlitz3.ab2@23948>   MOVE.w #$b081,d1
00040658 <AmiBlitz3.ab2@23949>   JSR writeword
0004065C <AmiBlitz3.ab2@23953>   MOVE.l thebgt(PC),D1
00040662 <AmiBlitz3.ab2@23954>   JSR writelong
00040664 <AmiBlitz3.ab2@23957>   MOVEA.l (A7)+,A1
0004066C <AmiBlitz3.ab2@23958>   MOVE.l destpointer,$8(A1)
00040672 <AmiBlitz3.ab2@23959> JMP reget
00040676 <AmiBlitz3.ab2@23962>   MOVEA.l 8(a7),a2
0004067A <AmiBlitz3.ab2@23963>   Dc.l $f2124400                                           ;fmove.s (a2),fp0
00040680 <AmiBlitz3.ab2@23964>   fmove.s 4(a7),fp1
00040684 <AmiBlitz3.ab2@23965>   BTST.b #7,(a7)
00040688 <AmiBlitz3.ab2@23966>   BNE 'negi
0004068C <AmiBlitz3.ab2@23967>   fcmp.x fp1,fp0
00040690 <AmiBlitz3.ab2@23968> BRA 'negi2
00040694 <AmiBlitz3.ab2@23971>   fcmp.x fp0,fp1
00040698 <AmiBlitz3.ab2@23974>   Dc.l $f2920000                                           ;fbgt.w
0004069C <AmiBlitz3.ab2@23978>   BGT.w thebgt
000406A2 <AmiBlitz3.ab2@23981>   MOVE.l A5,letstart
000406A6 <AmiBlitz3.ab2@23982>   BSR.w getparameter
000406B0 <AmiBlitz3.ab2@23988>   MOVE.l destpointer,pushpc
000406BA <AmiBlitz3.ab2@23989>   MOVE.l hunkoffsetbase,pushoff
000406C2 <AmiBlitz3.ab2@23990>   MOVE.w #$0001,regnum
000406C8 <AmiBlitz3.ab2@23991>   JSR JL_0_8E3C
000406CE <AmiBlitz3.ab2@23992>   JSR calcvar
000406D4 <AmiBlitz3.ab2@23993>   TST.b formode
000406D8 <AmiBlitz3.ab2@23994>   BEQ 'lf1
000406DE <AmiBlitz3.ab2@23995>   CMP.l #newtype_double,A2
000406E2 <AmiBlitz3.ab2@23996>   BEQ JUMP_notallowd
000406E8 <AmiBlitz3.ab2@23997>   MOVE.l a2,currtype
000406EE <AmiBlitz3.ab2@24000>   CLR.w startoffsetmore
000406F2 <AmiBlitz3.ab2@24001>   CMP.w #$3d,d0
000406F6 <AmiBlitz3.ab2@24002>   BNE 'l1a
000406FA <AmiBlitz3.ab2@24003>   BTST #15,d2
000406FE <AmiBlitz3.ab2@24004>   BEQ 'l1a
00040702 <AmiBlitz3.ab2@24005>   CMP.b #1,d2
00040706 <AmiBlitz3.ab2@24006>   BNE 'l1a
00040710 <AmiBlitz3.ab2@24007>   MOVE.w leaa0a0+2,startoffsetmore
00040716 <AmiBlitz3.ab2@24010>   CLR.w regnum
0004071A <AmiBlitz3.ab2@24011>   BSR.w JL_0_B5D2
00040720 <AmiBlitz3.ab2@24012>   CLR.w commode
00040726 <AmiBlitz3.ab2@24013>   CLR.w stackcorrect
0004072C <AmiBlitz3.ab2@24014>   CLR.w pcodd
00040732 <AmiBlitz3.ab2@24015>   MOVE.w startoffsetmore,d1
00040736 <AmiBlitz3.ab2@24016>   BTST #0,d1
0004073A <AmiBlitz3.ab2@24017>   BEQ 'l2a
00040742 <AmiBlitz3.ab2@24018>   MOVE.w #1,pcodd
00040746 <AmiBlitz3.ab2@24021>   CMP.w #$3D,D0                                            ;=
0004074A <AmiBlitz3.ab2@24022>   BEQ.w JL_0_DEE0
0004074C <AmiBlitz3.ab2@24025>   MOVE.b (a5)+,d1
00040750 <AmiBlitz3.ab2@24026>   BEQ 'l10
00040754 <AmiBlitz3.ab2@24027>   CMP.b #":",d1
00040758 <AmiBlitz3.ab2@24028>   BEQ 'l10
0004075C <AmiBlitz3.ab2@24029>   CMP.b #";",d1
00040760 <AmiBlitz3.ab2@24030>   BEQ 'l10
00040764 <AmiBlitz3.ab2@24031>   CMP.b #"0",d1
00040768 <AmiBlitz3.ab2@24032>   BLT 'l11
0004076C <AmiBlitz3.ab2@24033>   CMP.b #"9",d1
00040770 <AmiBlitz3.ab2@24034>   BGT 'l11
00040774 <AmiBlitz3.ab2@24035> BRA.s 'l1
0004077C <AmiBlitz3.ab2@24038>   MOVE.b #1,quickadd
00040782 <AmiBlitz3.ab2@24041>   MOVEA.l letstart,A5
00040784 <AmiBlitz3.ab2@24042>   SUBQ.w #1,A5
00040788 <AmiBlitz3.ab2@24045>   CMP.b #$7,D2
0004078C <AmiBlitz3.ab2@24046>    BNE.w JL_0_DF8A
00040790 <AmiBlitz3.ab2@24052>   MOVEM.w D2-D3,-(A7)
00040796 <AmiBlitz3.ab2@24053>   MOVE.l lastoffset_org,-(A7)
0004079C <AmiBlitz3.ab2@24054>   MOVE.w varmode,-(A7)
000407A6 <AmiBlitz3.ab2@24056>    MOVE.l #forthstack,forthsp
000407B0 <AmiBlitz3.ab2@24057>    MOVE.l #precstack,precsp
000407B6 <AmiBlitz3.ab2@24058>    CLR.w regnum
000407BC <AmiBlitz3.ab2@24059>    CLR.w nonew
000407C2 <AmiBlitz3.ab2@24060>    CLR.w sbasegot
000407CC <AmiBlitz3.ab2@24061>    MOVE.w varcodelen,oldvcodelen
000407D2 <AmiBlitz3.ab2@24062>    CLR.w varcodelen
000407DA <AmiBlitz3.ab2@24063>    MOVE.w #$FFFF,lasta6
000407DC <AmiBlitz3.ab2@24066>   MOVEQ.l #$07,D2
000407E0 <AmiBlitz3.ab2@24067>    BSR.w eval
000407E6 <AmiBlitz3.ab2@24068>   MOVE.w (A7)+,varmode
000407EC <AmiBlitz3.ab2@24069>   MOVE.l (A7)+,lastoffset_org
000407F2 <AmiBlitz3.ab2@24070>   MOVE.w moved0a3,D1
000407F8 <AmiBlitz3.ab2@24071>    JSR writeword
000407FE <AmiBlitz3.ab2@24072>   MOVE.w commode,D1
00040802 <AmiBlitz3.ab2@24073>    BEQ.w JL_0_DF38
00040808 <AmiBlitz3.ab2@24074>   LEA pulla2st,A0
0004080E <AmiBlitz3.ab2@24075>   LEA pulla2stf,A1
00040814 <AmiBlitz3.ab2@24076>    JSR pokecode
00040818 <AmiBlitz3.ab2@24077> BRA.w JL_0_DF3C
0004081C <AmiBlitz3.ab2@24080>   BSR.w JL_0_B63C
00040820 <AmiBlitz3.ab2@24083>   MOVEM.w (A7)+,D2-D3
00040824 <AmiBlitz3.ab2@24084>   BTST #$F,D2
00040828 <AmiBlitz3.ab2@24085>   BNE.w JL_0_DF58
0004082E <AmiBlitz3.ab2@24086>     MOVE.w D3,leaa5d3a2+2
00040834 <AmiBlitz3.ab2@24087>     MOVE.l leaa5d3a2,D1
0004083A <AmiBlitz3.ab2@24088>     JSR pokela5s
0004083E <AmiBlitz3.ab2@24091>   MOVE.w #$FE6F,D1
00040844 <AmiBlitz3.ab2@24092>   JSR uselib
0004084A <AmiBlitz3.ab2@24093>   MOVE.l #$C700,D1
00040850 <AmiBlitz3.ab2@24094>   MOVE.l d1,lastinstruction
00040856 <AmiBlitz3.ab2@24095>   MOVE.w varmode,D2
0004085A <AmiBlitz3.ab2@24096>   BNE.w JL_0_DF70
0004085C <AmiBlitz3.ab2@24097>     ADDQ.w #1,D1
00040860 <AmiBlitz3.ab2@24100>   BSR.w Atokejsr
00040864 <AmiBlitz3.ab2@24101>   CMP.w #$2C,D0
00040868 <AmiBlitz3.ab2@24102>   BNE.w JL_0_E0C6
0004086E <AmiBlitz3.ab2@24104>   MOVE.w addq4a2,D1
00040874 <AmiBlitz3.ab2@24105>   JSR writeword
00040878 <AmiBlitz3.ab2@24106> BRA.w JL_0_E018
0004087E <AmiBlitz3.ab2@24109> JMP error4char
00040884 <AmiBlitz3.ab2@24112> JMP error_convert_types
00040888 <AmiBlitz3.ab2@24116>    BTST #$E,D2
0004088C <AmiBlitz3.ab2@24117>    BNE.w JL_0_DF9C
0004088E <AmiBlitz3.ab2@24118>   TST.b D2
00040892 <AmiBlitz3.ab2@24119>    BEQ.w JUMP_noleterr
00040898 <AmiBlitz3.ab2@24120>    TST.b newsyntax
0004089C <AmiBlitz3.ab2@24121>    BEQ JL_0_DFA0
000408A0 <AmiBlitz3.ab2@24124>    CMP.w #$4022,(a5)
000408A4 <AmiBlitz3.ab2@24125>    BNE JL_0_DFA0
000408AA <AmiBlitz3.ab2@24126>    CMP.l #3,d2
000408AE <AmiBlitz3.ab2@24127>    BNE  JUMP_error_convert_types
000408B0 <AmiBlitz3.ab2@24128>    ADDQ #2,a5
000408B2 <AmiBlitz3.ab2@24129>    MOVEQ #0,d0
000408B4 <AmiBlitz3.ab2@24130>    MOVE.b (a5)+,d0
000408B8 <AmiBlitz3.ab2@24131>    BEQ JL_0_DFA0
000408BC <AmiBlitz3.ab2@24132>    CMP.b #$22,d0
000408C0 <AmiBlitz3.ab2@24133>    BNE 'l1
000408C4 <AmiBlitz3.ab2@24134>    MOVE.b #0,d0
000408C8 <AmiBlitz3.ab2@24135> BRA 'do
000408CA <AmiBlitz3.ab2@24138>   ASL.l #8,d0
000408CC <AmiBlitz3.ab2@24139>    MOVE.b (a5)+,d0
000408D0 <AmiBlitz3.ab2@24140>    BEQ JL_0_DFA0
000408D4 <AmiBlitz3.ab2@24141>    CMP.b #$22,d0
000408D8 <AmiBlitz3.ab2@24142>    BNE 'l2
000408DC <AmiBlitz3.ab2@24143>    MOVE.b #0,d0
000408DE <AmiBlitz3.ab2@24144>    ASR.l #8,d0
000408E2 <AmiBlitz3.ab2@24145> BRA 'do
000408E4 <AmiBlitz3.ab2@24148>   ASL.l #8,d0
000408E6 <AmiBlitz3.ab2@24149>     MOVE.b (a5)+,d0
000408EA <AmiBlitz3.ab2@24150>    BEQ JL_0_DFA0
000408EE <AmiBlitz3.ab2@24151>    CMP.b #$22,d0
000408F2 <AmiBlitz3.ab2@24152>    BNE 'l3
000408F6 <AmiBlitz3.ab2@24153>    MOVE.b #0,d0
000408F8 <AmiBlitz3.ab2@24154>    ASR.l #8,d0
000408FC <AmiBlitz3.ab2@24155> BRA 'do
000408FE <AmiBlitz3.ab2@24158>   ASL.l #8,d0
00040900 <AmiBlitz3.ab2@24159>     MOVE.b (a5)+,d0
00040904 <AmiBlitz3.ab2@24160>    BEQ JL_0_DFA0
00040908 <AmiBlitz3.ab2@24161>    CMP.b #$22,d0
0004090C <AmiBlitz3.ab2@24162>    BNE 'l4
00040910 <AmiBlitz3.ab2@24163>    MOVE.b #0,d0
00040912 <AmiBlitz3.ab2@24164>    ASR.l #8,d0
00040916 <AmiBlitz3.ab2@24165> BRA 'do
0004091A <AmiBlitz3.ab2@24168>    CMP.b #$22,(a5)+
0004091E <AmiBlitz3.ab2@24169>    BNE JUMP_error4char
00040922 <AmiBlitz3.ab2@24172>   MOVE.w #$2b7c,d1
00040928 <AmiBlitz3.ab2@24173>    TST.w varmode
0004092C <AmiBlitz3.ab2@24174>    BEQ 'g3
00040930 <AmiBlitz3.ab2@24175>    BCLR #9,d1
00040936 <AmiBlitz3.ab2@24178>     JSR writeword
00040938 <AmiBlitz3.ab2@24179>     MOVE.l d0,d1
0004093E <AmiBlitz3.ab2@24180>     JSR writelong
00040940 <AmiBlitz3.ab2@24181>     MOVE.w d3,d1
00040946 <AmiBlitz3.ab2@24182>     JSR writeword
0004094C <AmiBlitz3.ab2@24183>     JSR get1bytemain
0004094E <AmiBlitz3.ab2@24184> RTS
00040954 <AmiBlitz3.ab2@24190> JMP noleterr
0004095A <AmiBlitz3.ab2@24194>   MOVE.w d2,vartype
0004095E <AmiBlitz3.ab2@24195>   MOVE.b #$3,D2
00040962 <AmiBlitz3.ab2@24198>   CMP.b #5,d2
00040966 <AmiBlitz3.ab2@24199>   BNE 'l1
0004096C <AmiBlitz3.ab2@24200>   MOVE.l a2,currtype
00040970 <AmiBlitz3.ab2@24204>   MOVEM.w D2-D3,-(A7)
00040976 <AmiBlitz3.ab2@24205>   MOVE.w varmode,-(A7)
0004097A <AmiBlitz3.ab2@24206>   ANDI.w #$FF,D2
00040980 <AmiBlitz3.ab2@24207>   MOVE.l lastoffset_org,-(A7)
00040984 <AmiBlitz3.ab2@24208>    BSR.w eval
0004098A <AmiBlitz3.ab2@24209>   MOVE.l (A7)+,lastoffset_org
00040990 <AmiBlitz3.ab2@24210>   MOVE.w commode,D1
00040994 <AmiBlitz3.ab2@24211>    BNE.w JL_0_DFCC
00040998 <AmiBlitz3.ab2@24212>    BSR.w JL_0_B63C
0004099E <AmiBlitz3.ab2@24215>   MOVE.w (A7)+,varmode
000409A2 <AmiBlitz3.ab2@24216>   MOVEM.w (A7)+,D2-D3
000409A6 <AmiBlitz3.ab2@24218>   MOVE.w #$2B40,D1
000409AC <AmiBlitz3.ab2@24219>   MOVE.w varmode,D4
000409B0 <AmiBlitz3.ab2@24220>    BEQ.w JL_0_DFE8
000409B4 <AmiBlitz3.ab2@24221>   BCLR #$9,D1
000409B8 <AmiBlitz3.ab2@24224>   BTST #$F,D2
000409BC <AmiBlitz3.ab2@24225>    BEQ.w JL_0_E090
000409C2 <AmiBlitz3.ab2@24226>    TST.b stackcorrect
000409C6 <AmiBlitz3.ab2@24227>    BNE 'st1
000409CC <AmiBlitz3.ab2@24228>   MOVE.w commode,D1
000409D0 <AmiBlitz3.ab2@24229>    BEQ.w JL_0_E004
000409D6 <AmiBlitz3.ab2@24232>   MOVE.w pulla2,D1
000409DC <AmiBlitz3.ab2@24233>    JSR writeword
000409E0 <AmiBlitz3.ab2@24236>   MOVE.w #$2480,D1
000409E4 <AmiBlitz3.ab2@24237>    MOVEM.l a0/d0,-(a7)
000409EA <AmiBlitz3.ab2@24238>    MOVEA.l lastoffset_org,A0
000409EC <AmiBlitz3.ab2@24239>    MOVE.l A0,D0
000409F0 <AmiBlitz3.ab2@24240>    BEQ.w 'skip
000409F2 <AmiBlitz3.ab2@24241>    MOVEA.l D0,A0
000409FA <AmiBlitz3.ab2@24242>    MOVE.l $A(A0),currtype
000409FE <AmiBlitz3.ab2@24245>   MOVEM.l (a7)+,a0/d0
00040A02 <AmiBlitz3.ab2@24246>   CMP.w #$2C,D0
00040A06 <AmiBlitz3.ab2@24247>    BNE.w JL_0_E090
00040A0A <AmiBlitz3.ab2@24248>     MOVE.w #$24C0,D1
00040A0E <AmiBlitz3.ab2@24249>    BSR.w JL_0_E090                                         ;write store
00040A14 <AmiBlitz3.ab2@24252>    MOVE.l lastoffset_org,D0
00040A1C <AmiBlitz3.ab2@24256>   MOVE.w #$FFFF,commode
00040A22 <AmiBlitz3.ab2@24257>   CLR.w varcodelen
00040A2A <AmiBlitz3.ab2@24258>   MOVE.b #1,optiarray
00040A30 <AmiBlitz3.ab2@24259>   MOVE.w pusha2,D1
00040A36 <AmiBlitz3.ab2@24260>    JSR writeword
00040A3C <AmiBlitz3.ab2@24261>   TST.l lastoffset_org
00040A40 <AmiBlitz3.ab2@24262>   BEQ dimmore
00040A46 <AmiBlitz3.ab2@24263>   MOVEA.l lastoffset_org,A0
00040A48 <AmiBlitz3.ab2@24264>   MOVE.l (A0),D0
00040A4C <AmiBlitz3.ab2@24265>    BEQ.w JUMP_comerr
00040A4E <AmiBlitz3.ab2@24266>   MOVEA.l D0,A0
00040A54 <AmiBlitz3.ab2@24267>   MOVE.l A0,lastoffset_org
00040A5A <AmiBlitz3.ab2@24268>   BTST #$1,$7(A0)
00040A5E <AmiBlitz3.ab2@24269>    BNE.w JUMP_nocomerr
00040A62 <AmiBlitz3.ab2@24270>   MOVEA.l $A(A0),A1
00040A66 <AmiBlitz3.ab2@24271>   MOVE.l $4(A1),D2
00040A6C <AmiBlitz3.ab2@24274>   BTST #$0,$7(A0)
00040A70 <AmiBlitz3.ab2@24275>    BNE.w JL_0_E078
00040A76 <AmiBlitz3.ab2@24276>   CMP.l #$100,D2
00040A7A <AmiBlitz3.ab2@24277>    BCC.l JUMP_nocomerr
00040A7E <AmiBlitz3.ab2@24278> BRA.w JL_0_E088
00040A84 <AmiBlitz3.ab2@24281>         CLR.b optiarray
00040A88 <AmiBlitz3.ab2@24282>         CMP.w #"@@",(a5)
00040A8C <AmiBlitz3.ab2@24283>         BEQ 'n1
00040A90 <AmiBlitz3.ab2@24284> BRA 'd1
00040A96 <AmiBlitz3.ab2@24287>   JSR nextline
00040A98 <AmiBlitz3.ab2@24288>         MOVE.l a5,-(a7)
00040A9A <AmiBlitz3.ab2@24291>   MOVE.b (a5)+,d0
00040A9E <AmiBlitz3.ab2@24292>         CMP.b #$20,d0
00040AA2 <AmiBlitz3.ab2@24293>         BEQ 'l2
00040AA4 <AmiBlitz3.ab2@24294>         MOVE.l (a7)+,a5
00040AA8 <AmiBlitz3.ab2@24295>         CMP.b #";",d0
00040AAC <AmiBlitz3.ab2@24296>         BEQ 'n1
00040AB2 <AmiBlitz3.ab2@24299>         TST.w debugmode
00040AB6 <AmiBlitz3.ab2@24300>         BEQ JL_0_DEE0
00040AB8 <AmiBlitz3.ab2@24301>         MOVE.l a0,-(a7)
00040ABE <AmiBlitz3.ab2@24302>         MOVE.l pushat,a0
00040AC4 <AmiBlitz3.ab2@24303>         CMP.l #0,a0
00040AC8 <AmiBlitz3.ab2@24304>         BNE 'o1
00040ACC <AmiBlitz3.ab2@24305> BRA 'skip
00040AD4 <AmiBlitz3.ab2@24308>         ADD.l #1,2(a0)
00040ADA <AmiBlitz3.ab2@24311>   CLR.w commode
00040AE2 <AmiBlitz3.ab2@24312>         MOVE.b #1,stackcorrect
00040AE4 <AmiBlitz3.ab2@24313>         MOVE.l (a7)+,a0
00040AEA <AmiBlitz3.ab2@24314> JMP JL_0_DEE0
00040AF0 <AmiBlitz3.ab2@24317> JMP nocomerr
00040AF6 <AmiBlitz3.ab2@24320>   CMP.l #$100,D2
00040AFA <AmiBlitz3.ab2@24321>    BCS.w JL_0_E084
00040AFC <AmiBlitz3.ab2@24322>   MOVEQ.l #$00,D2
00040B00 <AmiBlitz3.ab2@24325>   BSET #$E,D2
00040B04 <AmiBlitz3.ab2@24328>   BSET #$F,D2
00040B08 <AmiBlitz3.ab2@24329> BRA.w JL_0_DEE0
00040B0E <AmiBlitz3.ab2@24332>    MOVE.l destpointer,a4
00040B16 <AmiBlitz3.ab2@24333>    MOVE.l #$f22a6400,-4(a4)
00040B1C <AmiBlitz3.ab2@24334>    MOVE.w arrayoffset,d1
00040B22 <AmiBlitz3.ab2@24335> JMP writeword
00040B28 <AmiBlitz3.ab2@24338> JMP comerr
00040B2E <AmiBlitz3.ab2@24341>    TST.b fpu
00040B32 <AmiBlitz3.ab2@24342>    BEQ 'nofloat
00040B36 <AmiBlitz3.ab2@24343>    CMP.b #5,d2
00040B3A <AmiBlitz3.ab2@24344>    BNE 'nofloat
00040B40 <AmiBlitz3.ab2@24345>    CLR.w fp0var
00040B46 <AmiBlitz3.ab2@24346>    LEA regtable,a4
00040B48 <AmiBlitz3.ab2@24347>    TST.l (a4)
00040B4C <AmiBlitz3.ab2@24348>    BEQ 'noreg
00040B50 <AmiBlitz3.ab2@24349>    BTST #15,d2                                             ;regvars
00040B54 <AmiBlitz3.ab2@24350>    BNE 'noreg
00040B58 <AmiBlitz3.ab2@24351>    CMP.w 0+4(a4),d3
00040B5C <AmiBlitz3.ab2@24352>    BNE 'doreg1
00040B62 <AmiBlitz3.ab2@24353>    MOVE.l #$f2000380,d1
00040B68 <AmiBlitz3.ab2@24354>    MOVE.w regnum,d0
00040B6C <AmiBlitz3.ab2@24355>    BNE 'noopt
00040B72 <AmiBlitz3.ab2@24361>    MOVE.l destpointer,a4
00040B7A <AmiBlitz3.ab2@24362>    CMP.l #$f2001c80,-8(a4)
00040B7E <AmiBlitz3.ab2@24363>    BNE 'noopt
00040B86 <AmiBlitz3.ab2@24364>    CMP.l #$f2000422,-4(a4)
00040B8A <AmiBlitz3.ab2@24365>    BNE 'noopt
00040B90 <AmiBlitz3.ab2@24366>    MOVE.l #$f20003a2,d1
00040B9A <AmiBlitz3.ab2@24367>    SUB.l #8,destpointer
00040B9C <AmiBlitz3.ab2@24370>    ASL.w #7,d0
00040B9E <AmiBlitz3.ab2@24371>    OR.w d0,d1
00040BA4 <AmiBlitz3.ab2@24372>    JSR writelong
00040BA6 <AmiBlitz3.ab2@24373> RTS
00040BAA <AmiBlitz3.ab2@24376>   CMP.w 8+4(a4),d3
00040BAE <AmiBlitz3.ab2@24377>    BNE 'doreg2
00040BB4 <AmiBlitz3.ab2@24378>    MOVE.l #$f2000300,d1
00040BBA <AmiBlitz3.ab2@24379>    MOVE.w regnum,d0
00040BBC <AmiBlitz3.ab2@24380>    ASL.w #7,d0
00040BBE <AmiBlitz3.ab2@24381>    OR.w d0,d1
00040BC4 <AmiBlitz3.ab2@24382>    JSR writelong
00040BC6 <AmiBlitz3.ab2@24383> RTS
00040BCA <AmiBlitz3.ab2@24386>   CMP.w 16+4(a4),d3
00040BCE <AmiBlitz3.ab2@24387>    BNE 'doreg3
00040BD4 <AmiBlitz3.ab2@24388>    MOVE.l #$f2000280,d1
00040BDA <AmiBlitz3.ab2@24389>    MOVE.w regnum,d0
00040BDC <AmiBlitz3.ab2@24390>    ASL.w #7,d0
00040BDE <AmiBlitz3.ab2@24391>    OR.w d0,d1
00040BE4 <AmiBlitz3.ab2@24392>    JSR  writelong
00040BE6 <AmiBlitz3.ab2@24393>  RTS
00040BEA <AmiBlitz3.ab2@24396>   CMP.w 24+4(a4),d3
00040BEE <AmiBlitz3.ab2@24397>    BNE 'doreg4
00040BF4 <AmiBlitz3.ab2@24398>    MOVE.l #$f2000200,d1
00040BFA <AmiBlitz3.ab2@24399>    MOVE.w regnum,d0
00040BFC <AmiBlitz3.ab2@24400>    ASL.w #7,d0
00040BFE <AmiBlitz3.ab2@24401>    OR.w d0,d1
00040C04 <AmiBlitz3.ab2@24402>    JSR writelong
00040C06 <AmiBlitz3.ab2@24403> RTS
00040C0A <AmiBlitz3.ab2@24406>   CMP.w 32+4(a4),d3
00040C0E <AmiBlitz3.ab2@24407>    BNE 'noreg
00040C14 <AmiBlitz3.ab2@24408>    MOVE.l #$f2000180,d1
00040C1A <AmiBlitz3.ab2@24409>    MOVE.w regnum,d0
00040C1C <AmiBlitz3.ab2@24410>    ASL.w #7,d0
00040C1E <AmiBlitz3.ab2@24411>    OR.w d0,d1
00040C24 <AmiBlitz3.ab2@24412>    JSR writelong
00040C26 <AmiBlitz3.ab2@24413> RTS
00040C2C <AmiBlitz3.ab2@24416>    TST.w regnum
00040C30 <AmiBlitz3.ab2@24417>    BNE 'nofp0
00040C36 <AmiBlitz3.ab2@24418>    MOVE.l destpointer ,a4
00040C3E <AmiBlitz3.ab2@24419>    CMP.l #$f2304400,-6(a4)
00040C42 <AmiBlitz3.ab2@24420>    BNE 'do
00040C48 <AmiBlitz3.ab2@24421>    CMP.w #$1990,-2(a4)
00040C4C <AmiBlitz3.ab2@24422>    BNE 'do
00040C50 <AmiBlitz3.ab2@24423>    BTST #15,d2                                             ;types ?
00040C54 <AmiBlitz3.ab2@24424>    BNE 'do
00040C5A <AmiBlitz3.ab2@24425>   MOVE.l #$2b701990,d1                                     ;var
00040C60 <AmiBlitz3.ab2@24426>   TST.w varmode
00040C64 <AmiBlitz3.ab2@24427>   BEQ 'glob1
00040C68 <AmiBlitz3.ab2@24428>   BCLR #25,d1
00040C6C <AmiBlitz3.ab2@24431>   MOVE.l d1,-6(a4)
00040C70 <AmiBlitz3.ab2@24432>   MOVE.w d3,-2(a4)
00040C76 <AmiBlitz3.ab2@24433>   CLR.w fp0var
00040C7E <AmiBlitz3.ab2@24434>   MOVE.w #$ffff,fp0mode
00040C80 <AmiBlitz3.ab2@24435> RTS
00040C88 <AmiBlitz3.ab2@24438>    CMP.l #$f22d4400,-6(a4)                                 ;fmove.s (a5),fp0
00040C8C <AmiBlitz3.ab2@24439>    BNE 'do3
00040C96 <AmiBlitz3.ab2@24440>    CMP.l #newtype_double,currtype
00040C9A <AmiBlitz3.ab2@24441>    BEQ 'do4
00040C9E <AmiBlitz3.ab2@24444>   MOVE.w #$2b6d,d1
00040CA4 <AmiBlitz3.ab2@24445>    TST.w varmode
00040CA8 <AmiBlitz3.ab2@24446>    BEQ 'g2
00040CAC <AmiBlitz3.ab2@24447>     BCLR #9,d1
00040CB0 <AmiBlitz3.ab2@24450>     CMP.w #$2b6d,d1
00040CB4 <AmiBlitz3.ab2@24451>     BNE 'd1
00040CB8 <AmiBlitz3.ab2@24452>     CMP.w -2(a4),d3
00040CBC <AmiBlitz3.ab2@24453>     BNE 'd1
00040CC2 <AmiBlitz3.ab2@24454>     SUBQ.l #6,destpointer
00040CC6 <AmiBlitz3.ab2@24455> BRA 'd12
00040CCA <AmiBlitz3.ab2@24458>     MOVE.w d1,-6(a4)                                       ;fmove.s to move.l mem,mem
00040CD0 <AmiBlitz3.ab2@24459>     MOVE.w -2(a4),-4(a4)
00040CD4 <AmiBlitz3.ab2@24460>     MOVE.w d3,-2(a4)
00040CDA <AmiBlitz3.ab2@24463>   CLR.w fp0var
00040CE2 <AmiBlitz3.ab2@24464>     MOVE.w #$ffff,fp0mode
00040CE4 <AmiBlitz3.ab2@24465> RTS
00040CEC <AmiBlitz3.ab2@24468>   CMP.l #$f22c4400,-6(a4)                                  ;fmove.s (a4)
00040CF0 <AmiBlitz3.ab2@24469>    BNE 'do4
00040CF4 <AmiBlitz3.ab2@24470>    MOVE.w #$2b6c,d1
00040CFA <AmiBlitz3.ab2@24471>       TST.w varmode
00040CFE <AmiBlitz3.ab2@24472>    BEQ 'g3
00040D02 <AmiBlitz3.ab2@24473>    BCLR #9,d1
00040D06 <AmiBlitz3.ab2@24476>   MOVE.w d1,-6(a4)
00040D0C <AmiBlitz3.ab2@24477>     MOVE.w -2(a4),-4(a4)
00040D10 <AmiBlitz3.ab2@24478>     MOVE.w d3,-2(a4)
00040D16 <AmiBlitz3.ab2@24479>     CLR.w fp0var
00040D1E <AmiBlitz3.ab2@24480>     MOVE.w #$ffff,fp0mode
00040D20 <AmiBlitz3.ab2@24481> RTS
00040D26 <AmiBlitz3.ab2@24484>   MOVE.w d3,fp0var
00040D30 <AmiBlitz3.ab2@24485>    MOVE.w varmode,fp0mode
00040D32 <AmiBlitz3.ab2@24486>    ADDQ.l #6,a4
00040D38 <AmiBlitz3.ab2@24487>    MOVE.l a4,fp0addr
00040D42 <AmiBlitz3.ab2@24488>    MOVE.l firstiff,fp0iff
00040D46 <AmiBlitz3.ab2@24491>   MOVEM.l d0/d4,-(a7)
00040D48 <AmiBlitz3.ab2@24492>    MOVEQ #0,d0
00040D4E <AmiBlitz3.ab2@24493>     MOVE.w regnum,d0
00040D50 <AmiBlitz3.ab2@24494>    ASL.w #7,d0                                             ;fpu store var
00040D54 <AmiBlitz3.ab2@24495>   BTST #15,d2
00040D58 <AmiBlitz3.ab2@24496>    BEQ 'var
00040D5A <AmiBlitz3.ab2@24497>    MOVE.w d1,d4
00040D5E <AmiBlitz3.ab2@24498>    CMP.w #$24c0,d4
00040D62 <AmiBlitz3.ab2@24499>    BNE 'nopl
00040D68 <AmiBlitz3.ab2@24500>    MOVE.l #$f21a6400,d1
00040D6A <AmiBlitz3.ab2@24501>    MOVEQ #0,d3
00040D6E <AmiBlitz3.ab2@24502> BRA 'glob
00040D74 <AmiBlitz3.ab2@24506>   MOVE.l #$f2126400,d1
00040D76 <AmiBlitz3.ab2@24507>    TST.w d3                                                ;offset =0
00040D7A <AmiBlitz3.ab2@24508>    BNE 'offset
00040D80 <AmiBlitz3.ab2@24509>    MOVE.l #$f2126400,d1
00040D82 <AmiBlitz3.ab2@24517>    MOVEQ #0,d3
00040D86 <AmiBlitz3.ab2@24518> BRA 'glob
00040D8C <AmiBlitz3.ab2@24521>   MOVE.l #$f22d6400,d1                                     ;var
00040D92 <AmiBlitz3.ab2@24522>   TST.w varmode
00040D96 <AmiBlitz3.ab2@24523>   BEQ 'glob
00040D9A <AmiBlitz3.ab2@24524>   BCLR #16,d1
00040D9C <AmiBlitz3.ab2@24525>  'glob OR.l d0,d1
00040DA6 <AmiBlitz3.ab2@24528>   CMP.l #newtype_double,currtype
00040DAA <AmiBlitz3.ab2@24529>   BNE 'dbl1
00040DB0 <AmiBlitz3.ab2@24530>   OR.l #$00001000,d1
00040DB6 <AmiBlitz3.ab2@24533>   JSR writelong
00040DBC <AmiBlitz3.ab2@24534>   CLR.l currtype
00040DC0 <AmiBlitz3.ab2@24535>   MOVEM.l (a7)+,d0/d4
00040DC2 <AmiBlitz3.ab2@24536>   MOVE.l d3,d1
00040DC6 <AmiBlitz3.ab2@24537>   BEQ 'nooffs
00040DCC <AmiBlitz3.ab2@24538> JMP writeword
00040DCE <AmiBlitz3.ab2@24541> RTS
00040DD4 <AmiBlitz3.ab2@24555>     TST.b fast                                             ;write lea->xx(a2)
00040DD8 <AmiBlitz3.ab2@24556>    BEQ 'la10
00040DDE <AmiBlitz3.ab2@24560>    TST.b quickadd
00040DE4 <AmiBlitz3.ab2@24562>      CLR.b quickadd
00040DE8 <AmiBlitz3.ab2@24563>    CMP.w #$2480,d1
00040DEC <AmiBlitz3.ab2@24564>    BNE 'la10
00040DF2 <AmiBlitz3.ab2@24565>    TST.b optiarray
00040DF6 <AmiBlitz3.ab2@24566>    BNE 'la10
00040DFC <AmiBlitz3.ab2@24567>    MOVE.l destpointer,a4
00040E02 <AmiBlitz3.ab2@24568>    CMP.w #$45ea,-4(a4)
00040E06 <AmiBlitz3.ab2@24569>    BNE 'la10
00040E0E <AmiBlitz3.ab2@24570>    CMP.w #8,pushclen
00040E12 <AmiBlitz3.ab2@24571>    BEQ 'la100
00040E1A <AmiBlitz3.ab2@24572>    CMP.w #6,pushclen
00040E1E <AmiBlitz3.ab2@24573>    BNE 'la10
00040E22 <AmiBlitz3.ab2@24574>    CMP.b #3,d2
00040E26 <AmiBlitz3.ab2@24575>    BCS 'la110
00040E2C <AmiBlitz3.ab2@24577>    MOVE.w #$2540,-2(a4)
00040E32 <AmiBlitz3.ab2@24578>    MOVE.w arrayoffset,d1
00040E38 <AmiBlitz3.ab2@24579> JMP writeword
00040E3E <AmiBlitz3.ab2@24582>    CLR.b quickadd
00040E40 <AmiBlitz3.ab2@24583> RTS
00040E44 <AmiBlitz3.ab2@24586>    CMP.b #2,d2
00040E48 <AmiBlitz3.ab2@24587>    BNE 'la120
00040E4E <AmiBlitz3.ab2@24588>     MOVE.w #$3540,-2(a4)
00040E54 <AmiBlitz3.ab2@24589>    MOVE.w arrayoffset,d1
00040E5A <AmiBlitz3.ab2@24590> JMP writeword
00040E5E <AmiBlitz3.ab2@24593>   CMP.b #1,d2
00040E62 <AmiBlitz3.ab2@24594>    BNE.s 'la10
00040E68 <AmiBlitz3.ab2@24595>     MOVE.w #$1540,-2(a4)
00040E6E <AmiBlitz3.ab2@24596>    MOVE.w arrayoffset,d1
00040E74 <AmiBlitz3.ab2@24597> JMP writeword
00040E78 <AmiBlitz3.ab2@24600>    CMP.b #3,d2
00040E7C <AmiBlitz3.ab2@24601>    BCS 'la11
00040E82 <AmiBlitz3.ab2@24602>    MOVE.w #$2540,-4(a4)
00040E84 <AmiBlitz3.ab2@24603> RTS
00040E88 <AmiBlitz3.ab2@24606>    CMP.b #2,d2
00040E8C <AmiBlitz3.ab2@24607>    BNE 'la12
00040E92 <AmiBlitz3.ab2@24608>     MOVE.w #$3540,-4(a4)
00040E94 <AmiBlitz3.ab2@24609> RTS
00040E98 <AmiBlitz3.ab2@24611>  'la12 CMP.b #1,d2
00040E9C <AmiBlitz3.ab2@24612>    BNE.s 'la10
00040EA2 <AmiBlitz3.ab2@24613>     MOVE.w #$1540,-4(a4)
00040EA4 <AmiBlitz3.ab2@24614> RTS
00040EAA <AmiBlitz3.ab2@24617>   CLR.b optiarray
00040EAE <AmiBlitz3.ab2@24618>    CMP.b #$1,D2
00040EB2 <AmiBlitz3.ab2@24619>    BEQ.w JL_0_E0AC
00040EB6 <AmiBlitz3.ab2@24620>    BSR.w varalign
00040EBA <AmiBlitz3.ab2@24621>    CMP.b #$3,D2
00040EBE <AmiBlitz3.ab2@24622>    BCC.w writevarlong
00040EC4 <AmiBlitz3.ab2@24623>    TST.b fast                                              ;optiimmi
00040EC8 <AmiBlitz3.ab2@24624>    BEQ 'l10b
00040ECE <AmiBlitz3.ab2@24629>    MOVE.l destpointer,a0
00040ED4 <AmiBlitz3.ab2@24630>    SUB.l imm_addr,a0
00040EDA <AmiBlitz3.ab2@24631>    CMP.l #4,a0
00040EDE <AmiBlitz3.ab2@24632>    BNE 'l10
00040EE4 <AmiBlitz3.ab2@24633>    CLR.l imm_addr
00040EEA <AmiBlitz3.ab2@24634>    MOVE.l destpointer,a4
00040EEE <AmiBlitz3.ab2@24635>    OR.w #$107c,d1
00040EF2 <AmiBlitz3.ab2@24636>    MOVE.w d1,-4(a4)
00040EF4 <AmiBlitz3.ab2@24637>     MOVE.w D3,D1
00040EFA <AmiBlitz3.ab2@24638> JMP writeword
00040F00 <AmiBlitz3.ab2@24641>   MOVE.l destpointer,a0
00040F06 <AmiBlitz3.ab2@24642>   SUB.l load_var_addr,a0
00040F0C <AmiBlitz3.ab2@24643>   CMP.l #4,a0
00040F10 <AmiBlitz3.ab2@24644>   BNE 'l10b
00040F16 <AmiBlitz3.ab2@24645>   CMP.w #$302d,-4(a4)                                      ;check 68k opcode
00040F1A <AmiBlitz3.ab2@24646>   BNE 'l10b
00040F20 <AmiBlitz3.ab2@24648>   CLR.l load_var_addr
00040F26 <AmiBlitz3.ab2@24649>   MOVE.l destpointer,a4
00040F2A <AmiBlitz3.ab2@24650>   OR.w #$102d,d1
00040F2E <AmiBlitz3.ab2@24651>   MOVE.w d1,-4(a4)
00040F30 <AmiBlitz3.ab2@24652>   MOVE.w d3,d1
00040F36 <AmiBlitz3.ab2@24653> JMP writeword
00040F3A <AmiBlitz3.ab2@24656>   ORI.w #$1000,D1                                          ;word
00040F3E <AmiBlitz3.ab2@24657> BRA.w writestorevar
00040F44 <AmiBlitz3.ab2@24661>    TST.b fast                                              ;optiimmi
00040F48 <AmiBlitz3.ab2@24662>    BEQ 'l10b
00040F4E <AmiBlitz3.ab2@24667>    MOVE.l destpointer,a0
00040F54 <AmiBlitz3.ab2@24668>    SUB.l imm_addr,a0
00040F5A <AmiBlitz3.ab2@24669>    CMP.l #4,a0
00040F5E <AmiBlitz3.ab2@24670>    BNE 'l10
00040F64 <AmiBlitz3.ab2@24671>    CLR.l imm_addr
00040F6A <AmiBlitz3.ab2@24672>    MOVE.l destpointer,a4
00040F6E <AmiBlitz3.ab2@24673>    OR.w #$7c,d1
00040F72 <AmiBlitz3.ab2@24674>    EORI #$3000,d1
00040F76 <AmiBlitz3.ab2@24675>    MOVE.w d1,-4(a4)
00040F78 <AmiBlitz3.ab2@24676>       MOVE.w D3,D1
00040F7E <AmiBlitz3.ab2@24677> JMP writeword
00040F84 <AmiBlitz3.ab2@24680>   MOVE.l destpointer,a0
00040F8A <AmiBlitz3.ab2@24681>   SUB.l load_var_addr,a0
00040F90 <AmiBlitz3.ab2@24682>   CMP.l #4,a0
00040F94 <AmiBlitz3.ab2@24683>   BNE 'l10b
00040F9A <AmiBlitz3.ab2@24684>   CLR.l load_var_addr
00040FA0 <AmiBlitz3.ab2@24685>   MOVE.l destpointer,a4
00040FA6 <AmiBlitz3.ab2@24686>    CMP.w #$1b6d,-4(a4)
00040FAA <AmiBlitz3.ab2@24687>    BNE 'l10b
00040FAE <AmiBlitz3.ab2@24688>    OR.w #$2d,d1
00040FB2 <AmiBlitz3.ab2@24689>    EORI #$3000,d1
00040FB6 <AmiBlitz3.ab2@24690>    MOVE.w d1,-4(a4)
00040FB8 <AmiBlitz3.ab2@24691>   MOVE.w d3,d1
00040FBE <AmiBlitz3.ab2@24692> JMP writeword
00040FC4 <AmiBlitz3.ab2@24695>   ADDQ.w #1,pcodd                                          ;byte
00040FC8 <AmiBlitz3.ab2@24696>   EORI.w #$3000,D1
00040FCE <AmiBlitz3.ab2@24699>   JSR writeword
00040FD2 <AmiBlitz3.ab2@24700>   BTST #$7,D1
00040FD6 <AmiBlitz3.ab2@24701>    BNE JL_0_E0C6
00040FD8 <AmiBlitz3.ab2@24702>   MOVE.w D3,D1
00040FDE <AmiBlitz3.ab2@24703> JMP writeword
00040FE4 <AmiBlitz3.ab2@24706>    TST.b fast                                              ;optiimmi
00040FE8 <AmiBlitz3.ab2@24707>    BEQ 'l10b
00040FEE <AmiBlitz3.ab2@24711>    MOVE.l destpointer,a0
00040FF4 <AmiBlitz3.ab2@24712>    SUB.l imm_addr,a0
00040FFA <AmiBlitz3.ab2@24713>    CMP.l #6,a0
00040FFE <AmiBlitz3.ab2@24714>    BNE 'l10
00041004 <AmiBlitz3.ab2@24715>    CLR.l imm_addr
0004100A <AmiBlitz3.ab2@24716>    MOVE.l destpointer,a4
0004100E <AmiBlitz3.ab2@24717>    OR.w #$7c,d1
00041012 <AmiBlitz3.ab2@24718>    MOVE.w d1,-6(a4)
00041014 <AmiBlitz3.ab2@24719>     MOVE.w D3,D1
0004101A <AmiBlitz3.ab2@24720> JMP writeword
00041020 <AmiBlitz3.ab2@24723>   MOVE.l destpointer,a0
00041026 <AmiBlitz3.ab2@24724>   SUB.l load_var_addr,a0
0004102C <AmiBlitz3.ab2@24725>   CMP.l #4,a0
00041030 <AmiBlitz3.ab2@24726>   BNE 'l10b
00041036 <AmiBlitz3.ab2@24727>   CLR.l load_var_addr
0004103C <AmiBlitz3.ab2@24728>   MOVE.l destpointer,a4
00041042 <AmiBlitz3.ab2@24729>   CMP.w #$245f,-2(a4)
00041046 <AmiBlitz3.ab2@24730>   BEQ 'l10b
0004104A <AmiBlitz3.ab2@24731>   OR.w #$28,d1
0004104E <AmiBlitz3.ab2@24732>   OR.w d1,-4(a4)
00041054 <AmiBlitz3.ab2@24733>   CMP.w #$2b6d,-4(a4)
00041058 <AmiBlitz3.ab2@24734>   BNE 'd1
0004105C <AmiBlitz3.ab2@24735>   CMP.w -2(a4),d3
00041060 <AmiBlitz3.ab2@24736>   BNE 'd1
00041066 <AmiBlitz3.ab2@24737>   SUBQ.l #4,destpointer
00041068 <AmiBlitz3.ab2@24738> RTS
0004106A <AmiBlitz3.ab2@24741>   MOVE.w d3,d1
00041070 <AmiBlitz3.ab2@24742> JMP writeword
00041076 <AmiBlitz3.ab2@24745>   JSR writeword
0004107A <AmiBlitz3.ab2@24746>   BTST #$7,D1
0004107E <AmiBlitz3.ab2@24747>    BNE.b JL_0_E0C6
00041080 <AmiBlitz3.ab2@24748>   MOVE.w D3,D1
00041086 <AmiBlitz3.ab2@24749> JMP writeword
00041088 <AmiBlitz3.ab2@24752> RTS
0004108A <AmiBlitz3.ab2@24756>   MOVE.w D1,-(A7)
0004108E <AmiBlitz3.ab2@24757>   MOVE.w pcodd(PC),D1
00041090 <AmiBlitz3.ab2@24758>   LSR.w #1,D1
00041094 <AmiBlitz3.ab2@24759>    BCC.b JL_0_E0E2
0004109A <AmiBlitz3.ab2@24760>   CLR.w pcodd
000410A0 <AmiBlitz3.ab2@24761>   MOVE.w add1a2,D1
000410A6 <AmiBlitz3.ab2@24762>    JSR writeword
000410A8 <AmiBlitz3.ab2@24765>   MOVE.w (A7)+,D1
000410AA <AmiBlitz3.ab2@24766> RTS
000410AC <AmiBlitz3.ab2@24770> add1a2:     Dc.b $52,$4A                                   ;ADDQ.W  #1,A2
000410AE <AmiBlitz3.ab2@24773> pcodd:     Ds.w 1                                          ;add 1 to this for bytes
000410B0 <AmiBlitz3.ab2@24774> listadd:   Ds.w 1                                          ;set to 8 if it's a list
000410B2 <AmiBlitz3.ab2@24775> listsize:  Ds.w 1
000410B8 <AmiBlitz3.ab2@24779>   ADDQ.w #1,regnum
000410C0 <AmiBlitz3.ab2@24780>   MOVE.b #1,nowdeclare
000410C6 <AmiBlitz3.ab2@24781>   CLR.b dimkeep
000410CE <AmiBlitz3.ab2@24782>    CMP.l #"KEEP",-1(a5)
000410D2 <AmiBlitz3.ab2@24783>   BNE 'nokeep
000410D8 <AmiBlitz3.ab2@24784>   CMP.b #" ",3(a5)
000410DC <AmiBlitz3.ab2@24785>   BNE 'nokeep
000410DE <AmiBlitz3.ab2@24786>   ADDQ.l #3,a5
000410E2 <AmiBlitz3.ab2@24789>     CMP.b #" ",(a5)
000410E6 <AmiBlitz3.ab2@24790>     BNE '1
000410E8 <AmiBlitz3.ab2@24791>    ADDQ #1,a5
000410EC <AmiBlitz3.ab2@24792> BRA '2
000410F2 <AmiBlitz3.ab2@24795>   MOVE.l a5,lastsourcepos
000410FA <AmiBlitz3.ab2@24796>   MOVE.b #1,dimkeep
000410FE <AmiBlitz3.ab2@24804>   MOVE.w #$FF9A,D1
00041104 <AmiBlitz3.ab2@24805>   JSR uselib
0004110A <AmiBlitz3.ab2@24808>   CLR.w listadd
0004110E <AmiBlitz3.ab2@24809>   CMP.w #-$7F4D,D0
00041112 <AmiBlitz3.ab2@24810>    BNE.w JL_0_E11E
0004111A <AmiBlitz3.ab2@24811>   MOVE.w #$0008,listadd
0004111E <AmiBlitz3.ab2@24812>   MOVE.w #$FFFA,D1
00041124 <AmiBlitz3.ab2@24813>    JSR uselib
0004112A <AmiBlitz3.ab2@24814>    JSR get1bytemain
00041130 <AmiBlitz3.ab2@24817>   CLR.w nonew
00041136 <AmiBlitz3.ab2@24818>    JSR getparameter
0004113E <AmiBlitz3.ab2@24819>   BTST #$1,flagmask+1
00041142 <AmiBlitz3.ab2@24820>    BEQ.w JUMP_syntaxerr
00041148 <AmiBlitz3.ab2@24821>    JSR JL_0_8E3C
0004114E <AmiBlitz3.ab2@24822>   MOVE.w notshared,D1
00041152 <AmiBlitz3.ab2@24823>    BNE.w JL_0_E198
0004115A <AmiBlitz3.ab2@24824>   MOVE.w $8(A3),temp1
00041160 <AmiBlitz3.ab2@24825>   MOVE.w proceduremode,D2
00041164 <AmiBlitz3.ab2@24826>    BNE.w JL_0_E176
0004116A <AmiBlitz3.ab2@24827>   MOVE.w globalvarpointer,-(A7)
00041172 <AmiBlitz3.ab2@24828>   MOVE.w $4(A3),globalvarpointer
00041178 <AmiBlitz3.ab2@24829>   ADDQ.w #4,globalvarpointer
0004117C <AmiBlitz3.ab2@24830>    BSR.w write_dim_code
00041182 <AmiBlitz3.ab2@24831>   MOVE.w (A7)+,globalvarpointer
00041186 <AmiBlitz3.ab2@24832> BRA.w JL_0_E1BA
0004118C <AmiBlitz3.ab2@24843>   MOVE.w globalvarpointer,-(A7)
00041192 <AmiBlitz3.ab2@24844>             MOVE.w proceduremode,-(a7)
00041198 <AmiBlitz3.ab2@24845>             CLR.w proceduremode
000411A0 <AmiBlitz3.ab2@24846>   MOVE.w $4(A3),globalvarpointer
000411A6 <AmiBlitz3.ab2@24847>   ADDQ.w #4,globalvarpointer
000411AA <AmiBlitz3.ab2@24848>    BSR.w write_dim_code
000411B0 <AmiBlitz3.ab2@24849>    MOVE.w (a7)+,proceduremode
000411B6 <AmiBlitz3.ab2@24850>   MOVE.w (A7)+,globalvarpointer
000411BA <AmiBlitz3.ab2@24851> BRA.w JL_0_E1BA
000411C2 <AmiBlitz3.ab2@24854>   MOVE.w #$FFFF,temp1
000411C6 <AmiBlitz3.ab2@24855>   MOVE.w listadd(PC),D1
000411CA <AmiBlitz3.ab2@24856>    BEQ.w JL_0_E1B6
000411D2 <AmiBlitz3.ab2@24857>   MOVE.w #$4000,temp1
000411D8 <AmiBlitz3.ab2@24858>   BSET #$0,$6(A3)
000411DE <AmiBlitz3.ab2@24861>         TST.w proceduremode
000411E2 <AmiBlitz3.ab2@24862>        BNE 'l1
000411E8 <AmiBlitz3.ab2@24863>        MOVE.w locvaroff,-(a7)
000411EC <AmiBlitz3.ab2@24866>   BSR.w write_dim_code
000411F2 <AmiBlitz3.ab2@24867>         TST.w proceduremode
000411F6 <AmiBlitz3.ab2@24868>         BNE JL_0_E1BA
000411FC <AmiBlitz3.ab2@24869>        MOVE.w (A7)+,locvaroff
00041202 <AmiBlitz3.ab2@24872>   JSR get1bytemain
00041206 <AmiBlitz3.ab2@24873>   CMP.w #$2C,D0
0004120A <AmiBlitz3.ab2@24874>    BNE.w JL_0_E1CE
00041210 <AmiBlitz3.ab2@24875>    JSR get1bytemain
00041214 <AmiBlitz3.ab2@24876> BRA.w JL_0_E0FC
00041216 <AmiBlitz3.ab2@24879> RTS
0004121E <AmiBlitz3.ab2@24882>   MOVE.w #$FFFF,nonew                                      ;#-1,nonew org source
00041224 <AmiBlitz3.ab2@24883>   MOVE.w beginarr,D1
0004122A <AmiBlitz3.ab2@24884>    JSR writeword
0004122C <AmiBlitz3.ab2@24885>   MOVEQ.l #$00,D1
00041232 <AmiBlitz3.ab2@24886>    JSR writeword
00041234 <AmiBlitz3.ab2@24887>   MOVEQ.l #$04,D1
0004123C <AmiBlitz3.ab2@24888>   BTST #$0,flagmask+1
00041240 <AmiBlitz3.ab2@24889>    BNE.w write_dim_code__pointer
00041244 <AmiBlitz3.ab2@24890>   MOVE.w $8(A2),D1
00041248 <AmiBlitz3.ab2@24893>   ADD.w listadd(PC),D1                                     ;size of one element.
0004124E <AmiBlitz3.ab2@24894>   MOVE.w D1,listsize
00041254 <AmiBlitz3.ab2@24895>    JSR writeword
0004125A <AmiBlitz3.ab2@24896>   CLR.w temp2                                              ;# dim's got
0004125C <AmiBlitz3.ab2@24897>   MOVE.l A3,-(A7)
00041262 <AmiBlitz3.ab2@24900>   ADDQ.w #1,temp2
00041264 <AmiBlitz3.ab2@24901>   MOVEQ.l #$03,D2                                          ;get word
0004126A <AmiBlitz3.ab2@24902>   MOVE.w notshared,-(a7)
00041270 <AmiBlitz3.ab2@24903>    JSR eval
00041276 <AmiBlitz3.ab2@24904>   MOVE.w (a7)+,notshared
0004127C <AmiBlitz3.ab2@24905>   TST.b debugmode
00041280 <AmiBlitz3.ab2@24906>    BEQ.w write_dim_code__norerr0
00041284 <AmiBlitz3.ab2@24907>   MOVE.w #$C30F,D1
00041288 <AmiBlitz3.ab2@24913>       MOVE.w #$5281,d1
0004128E <AmiBlitz3.ab2@24914>       JSR writeword
00041294 <AmiBlitz3.ab2@24915>       MOVE.l #$4c010800,d1                                 ;dim >65536 fix
0004129A <AmiBlitz3.ab2@24916>       JSR writelong
000412A0 <AmiBlitz3.ab2@24917>   MOVE.w proceduremode,D2
000412A4 <AmiBlitz3.ab2@24918>    BEQ.w write_dim_code__global
000412AA <AmiBlitz3.ab2@24919>   SUBQ.w #4,locvaroff
000412B4 <AmiBlitz3.ab2@24920>   MOVE.w locvaroff,putarr+2
000412B8 <AmiBlitz3.ab2@24921> BRA.w write_dim_code__doit
000412BE <AmiBlitz3.ab2@24924> JMP syntaxerr
000412C8 <AmiBlitz3.ab2@24927>   MOVE.w globalvarpointer,putarr+2
000412CE <AmiBlitz3.ab2@24928>   ADDQ.w #4,globalvarpointer
000412D4 <AmiBlitz3.ab2@24931>   TST.b dimkeep
000412D8 <AmiBlitz3.ab2@24932>            BEQ write_dim_code__doit_l1
000412DA <AmiBlitz3.ab2@24933>       MOVEQ #0,d1
000412E0 <AmiBlitz3.ab2@24934>       MOVE.w putarr+2,d1
000412E6 <AmiBlitz3.ab2@24935>       OR.l  #$222d0000,d1
000412EC <AmiBlitz3.ab2@24936>       MOVE.w proceduremode,D2
000412F0 <AmiBlitz3.ab2@24937>       BEQ write_dim_code__doit_l2
000412F6 <AmiBlitz3.ab2@24938>       TST.w notshared
000412FA <AmiBlitz3.ab2@24939>       BEQ write_dim_code__doit_l2
00041300 <AmiBlitz3.ab2@24940>       SUB.l #$00010000,d1
00041306 <AmiBlitz3.ab2@24943>   JSR writelong
0004130C <AmiBlitz3.ab2@24946>   MOVE.l putarr,D1
00041312 <AmiBlitz3.ab2@24947>       TST.w notshared
00041316 <AmiBlitz3.ab2@24948>       BNE write_dim_code__doit_l1a
0004131C <AmiBlitz3.ab2@24949>       JSR writelong
00041320 <AmiBlitz3.ab2@24950> BRA write_dim_code__doit_l4
00041326 <AmiBlitz3.ab2@24953>   JSR pokela5d
0004132A <AmiBlitz3.ab2@24956>   CMP.w #$2C,D0
0004132E <AmiBlitz3.ab2@24957>    BEQ.w write_dim_code__loop
00041332 <AmiBlitz3.ab2@24958>   CMP.w #$29,D0
00041336 <AmiBlitz3.ab2@24959>    BNE.w JUMP_syntaxerr
00041338 <AmiBlitz3.ab2@24960>   MOVEA.l (A7)+,A3
0004133E <AmiBlitz3.ab2@24961>   MOVE.w temp1,D1
00041342 <AmiBlitz3.ab2@24962>    BMI.w write_dim_code__nocare
00041346 <AmiBlitz3.ab2@24966>   BTST #$E,D1
0004134A <AmiBlitz3.ab2@24967>    BEQ.w write_dim_code__notl
00041352 <AmiBlitz3.ab2@24968>   CMPI.w #$1,temp2
00041356 <AmiBlitz3.ab2@24969>    BNE.w JUMP_redimerr
0004135A <AmiBlitz3.ab2@24970> BRA.w write_dim_code__nocare
00041360 <AmiBlitz3.ab2@24973> JMP redimerr
00041366 <AmiBlitz3.ab2@24976>   CMP.w temp2,D1
0004136A <AmiBlitz3.ab2@24977>    BNE.w JUMP_redimerr                                      ;range too long
00041370 <AmiBlitz3.ab2@24980>   LEA globalvarpointer,A0
00041376 <AmiBlitz3.ab2@24981>   MOVE.w proceduremode,D1
0004137A <AmiBlitz3.ab2@24982>   BEQ.w write_dim_code__gskip
00041380 <AmiBlitz3.ab2@24983>   LEA locvaroff,A0
00041386 <AmiBlitz3.ab2@24986>   MOVE.W  extraword,(A0)
0004138A <AmiBlitz3.ab2@24987>   BRA.W   write_dim_code__care
00041392 <AmiBlitz3.ab2@24990>   MOVE.w temp2,$8(A3)                                      ;set # dim's
00041398 <AmiBlitz3.ab2@24993>   LEA doarr,A0
0004139E <AmiBlitz3.ab2@24994>   MOVE.w $4(A3),$2(A0)
000413A6 <AmiBlitz3.ab2@24995>   MOVE.w putarr+2,$6(A0)
000413A8 <AmiBlitz3.ab2@24996>   MOVE.l (A0)+,D1
000413AE <AmiBlitz3.ab2@24997>    JSR writelong
000413B0 <AmiBlitz3.ab2@24998>   MOVE.l (A0),D1
000413B6 <AmiBlitz3.ab2@24999>    JSR writelong
000413BC <AmiBlitz3.ab2@25000>    TST.b dimkeep
000413C0 <AmiBlitz3.ab2@25001>   BNE write_dim_code__care_l3
000413C4 <AmiBlitz3.ab2@25004>   MOVE.w #$C400,D1
000413C8 <AmiBlitz3.ab2@25005> BRA write_dim_code__care_l2
000413CC <AmiBlitz3.ab2@25008>   MOVE.w #$C405,d1
000413D2 <AmiBlitz3.ab2@25011>   MOVE.w proceduremode,D2
000413D6 <AmiBlitz3.ab2@25012>    BEQ.w write_dim_code__isg
000413DC <AmiBlitz3.ab2@25013>    TST.w notshared
000413E0 <AmiBlitz3.ab2@25014>    BEQ write_dim_code__isg
000413E2 <AmiBlitz3.ab2@25015>   ADDQ.w #1,D1
000413E6 <AmiBlitz3.ab2@25018>   MOVE.w listadd(PC),D2
000413EA <AmiBlitz3.ab2@25019>    BEQ.w write_dim_code__isrg
000413EC <AmiBlitz3.ab2@25020>   MOVE.w D1,-(A7)
000413F0 <AmiBlitz3.ab2@25021>   MOVE.w setles(PC),D1
000413F6 <AmiBlitz3.ab2@25022>    JSR writeword
000413FA <AmiBlitz3.ab2@25023>   MOVE.w listsize(PC),D1
00041400 <AmiBlitz3.ab2@25024>    JSR writeword
00041402 <AmiBlitz3.ab2@25025>   MOVE.w (A7)+,D1
00041404 <AmiBlitz3.ab2@25026>   ADDQ.w #3,D1
00041408 <AmiBlitz3.ab2@25029> BRA.w Atokejsr
0004140E <AmiBlitz3.ab2@25036>     MOVE.l #$f23c4400,d1
00041414 <AmiBlitz3.ab2@25038>   MOVE.w regnum,d0
00041416 <AmiBlitz3.ab2@25039>   ASL.w #7,d0
00041418 <AmiBlitz3.ab2@25040>   OR.w d0,d1
0004141E <AmiBlitz3.ab2@25041>   JSR writelong
00041424 <AmiBlitz3.ab2@25047>     MOVE.l #$40490fd9,d1
0004142A <AmiBlitz3.ab2@25049>   JSR writelong
00041430 <AmiBlitz3.ab2@25050> JMP get1bytemain
00041434 <AmiBlitz3.ab2@25054> setles:   Dc.b $38,$3C,$00,$00                             ;MOVE.W  #$0000,D4
00041438 <AmiBlitz3.ab2@25061> vbr:                Ds.l 1
0004143A <AmiBlitz3.ab2@25062> cfetchmode:         Ds.w 1                               ;1=fetching a constant
00041440 <AmiBlitz3.ab2@25064> constlibs           Dc.w $FDA7,$FCDF,$FD43               ;64935,64735,64835  org source
00041444 <AmiBlitz3.ab2@25068> constpcat:          Ds.l 1
00041448 <AmiBlitz3.ab2@25069> constlibat:         Ds.l 1
0004144C <AmiBlitz3.ab2@25070> constmaxpc:         Dc.l $400
00041450 <AmiBlitz3.ab2@25072> stacksize:          Dc.l 32768                           ;stackfuck org source
00041454 <AmiBlitz3.ab2@25073> currentlabeladdr:   Dc.l labelbase                       ;lastrescon org source
00041458 <AmiBlitz3.ab2@25074> currentmacroaddr:   Dc.l macrobase                       ;lastresmac org source
0004145C <AmiBlitz3.ab2@25075> lastrestype:        Dc.l newtype_string
0004145E <AmiBlitz3.ab2@25076> rescnt:             Ds.w 1                               ;# resident
00041460 <AmiBlitz3.ab2@25077> state_of_residents: Ds.w 1                               ;reschg org source ;flag for if res's have changed
00041464 <AmiBlitz3.ab2@25078> resat:              Dc.l residents_table                 ;??looks like not used anymore??
00041466 <AmiBlitz3.ab2@25079> linedone:           Ds.w 1
0004147C <AmiBlitz3.ab2@25080> directbuffer:       Ds.w 11                              ;dirpcat  dc.w 0 org source
00041480 <AmiBlitz3.ab2@25089>   Dc.l 0                                        ; bytetobyte
00041484 <AmiBlitz3.ab2@25090>   Dc.l convert_byte_to_word                     ; bytetoword
00041488 <AmiBlitz3.ab2@25091>   Dc.l convert_byte_to_long                     ; bytetolong
0004148C <AmiBlitz3.ab2@25092>   Dc.l convert_byte_to_quick                    ; bytetoquick
00041490 <AmiBlitz3.ab2@25093>   Dc.l convert_byte_to_float                    ; bytetofloat
00041494 <AmiBlitz3.ab2@25094>   Dc.l convert_byte_to_long                     ; bytetolong
00041498 <AmiBlitz3.ab2@25095>   Dc.l error_convert_types                      ; noconerr
0004149C <AmiBlitz3.ab2@25098>   Dc.l convert_word_to_byte                     ; wordtobyte
000414A0 <AmiBlitz3.ab2@25099>   Dc.l 0                                        ; wordtoword
000414A4 <AmiBlitz3.ab2@25100>   Dc.l convert_word_to_long                     ; wordtolong
000414A8 <AmiBlitz3.ab2@25101>   Dc.l convert_word_to_quick                    ; wordtoquick
000414AC <AmiBlitz3.ab2@25102>   Dc.l convert_word_to_float                    ; wordtofloat
000414B0 <AmiBlitz3.ab2@25103>   Dc.l convert_word_to_long                     ; wordtolong
000414B4 <AmiBlitz3.ab2@25104>   Dc.l error_convert_types                      ; noconerr
000414B8 <AmiBlitz3.ab2@25107>   Dc.l convert_long_to_byte                     ; longtobyte
000414BC <AmiBlitz3.ab2@25108>   Dc.l convert_long_to_word                     ; longtoword
000414C0 <AmiBlitz3.ab2@25109>   Dc.l 0                                        ; longtolong
000414C4 <AmiBlitz3.ab2@25110>   Dc.l convert_long_to_quick                    ; longtoquick
000414C8 <AmiBlitz3.ab2@25111>   Dc.l convert_long_to_float                    ; longtofloat
000414CC <AmiBlitz3.ab2@25112>   Dc.l 0                                        ; longtolong
000414D0 <AmiBlitz3.ab2@25113>   Dc.l error_convert_types                      ; noconerr
000414D4 <AmiBlitz3.ab2@25116>   Dc.l convert_quick_to_byte                    ; quicktobyte
000414D8 <AmiBlitz3.ab2@25117>   Dc.l convert_quick_to_word                    ; quicktoword
000414DC <AmiBlitz3.ab2@25118>   Dc.l convert_quick_to_long                    ; quicktolong
000414E0 <AmiBlitz3.ab2@25119>   Dc.l 0                                        ; quicktoquick
000414E4 <AmiBlitz3.ab2@25120>   Dc.l convert_quick_to_float                   ; quicktofloat
000414E8 <AmiBlitz3.ab2@25121>   Dc.l convert_quick_to_long                    ; quicktolong
000414EC <AmiBlitz3.ab2@25122>   Dc.l error_convert_types                      ; noconerr
000414F0 <AmiBlitz3.ab2@25125>   Dc.l convert_float_to_byte                    ; floattobyte
000414F4 <AmiBlitz3.ab2@25126>   Dc.l convert_float_to_word                    ; floattoword
000414F8 <AmiBlitz3.ab2@25127>   Dc.l convert_float_to_long                    ; floattolong
000414FC <AmiBlitz3.ab2@25128>   Dc.l convert_float_to_quick                   ; floattoquick
00041500 <AmiBlitz3.ab2@25129>   Dc.l 0                                        ; floattofloat
00041504 <AmiBlitz3.ab2@25130>   Dc.l convert_float_to_long                    ; floattolong
00041508 <AmiBlitz3.ab2@25131>   Dc.l error_convert_types                      ; noconerr
0004150C <AmiBlitz3.ab2@25134>   Dc.l convert_long_to_byte                     ; longtobyte
00041510 <AmiBlitz3.ab2@25135>   Dc.l convert_long_to_word                     ; longtoword
00041514 <AmiBlitz3.ab2@25136>   Dc.l 0                                        ; longtolong
00041518 <AmiBlitz3.ab2@25137>   Dc.l convert_long_to_quick                    ; longtoquick
0004151C <AmiBlitz3.ab2@25138>   Dc.l convert_long_to_float                    ; longtofloat
00041520 <AmiBlitz3.ab2@25139>   Dc.l 0                                        ; longtolong
00041524 <AmiBlitz3.ab2@25140>   Dc.l error_convert_types                      ; noconerr
00041528 <AmiBlitz3.ab2@25143>   Dc.l error_convert_types                      ; noconerr
0004152C <AmiBlitz3.ab2@25144>   Dc.l error_convert_types                      ; noconerr
00041530 <AmiBlitz3.ab2@25145>   Dc.l string_to_long                           ; stringtolong
00041534 <AmiBlitz3.ab2@25146>   Dc.l error_convert_types                      ; noconerr
00041538 <AmiBlitz3.ab2@25147>   Dc.l error_convert_types                      ; noconerr
0004153C <AmiBlitz3.ab2@25148>   Dc.l string_to_long                           ; stringtolong
00041540 <AmiBlitz3.ab2@25149>   Ds.l 1
00041542 <AmiBlitz3.ab2@25155>   Dc.b $00,$2B                                  ;+ ; add
00041546 <AmiBlitz3.ab2@25156>   Dc.l do_plus_byte                             ;doplusb
0004154A <AmiBlitz3.ab2@25157>   Dc.l do_plus_word                             ;doplusw
0004154E <AmiBlitz3.ab2@25158>   Dc.l do_plus_long                             ;doplusl
00041552 <AmiBlitz3.ab2@25159>   Dc.l do_plus_long                             ;doplusl
00041556 <AmiBlitz3.ab2@25160>   Dc.l do_plus_float                            ;doplusf
0004155A <AmiBlitz3.ab2@25161>   Ds.l 1
0004155E <AmiBlitz3.ab2@25162>   Dc.l add_strings                              ;addstrings
00041560 <AmiBlitz3.ab2@25163>   Dc.b $0B,$B8
00041562 <AmiBlitz3.ab2@25165>   Dc.b $00,$2D                                  ;- ; sub
00041566 <AmiBlitz3.ab2@25166>   Dc.l do_minus_byte                            ;dominusb
0004156A <AmiBlitz3.ab2@25167>   Dc.l do_minus_word                            ;dominusw
0004156E <AmiBlitz3.ab2@25168>   Dc.l do_minus_long                            ;dominusl
00041572 <AmiBlitz3.ab2@25169>   Dc.l do_minus_long                            ;dominusl
00041576 <AmiBlitz3.ab2@25170>   Dc.l do_minus_float                           ;dominusf
0004157E <AmiBlitz3.ab2@25171>   Ds.l 2
00041580 <AmiBlitz3.ab2@25172>   Dc.b $0B,$B8
00041582 <AmiBlitz3.ab2@25174>   Dc.b $00,$2A                                  ;* ; mul
00041586 <AmiBlitz3.ab2@25175>   Dc.l do_times_byte                            ;dotimesb
0004158A <AmiBlitz3.ab2@25176>   Dc.l do_times_word                            ;dotimesw
0004158E <AmiBlitz3.ab2@25177>   Dc.l do_times_long                            ;dotimesl
00041592 <AmiBlitz3.ab2@25178>   Dc.l do_times_quick                           ;dotimesq
00041596 <AmiBlitz3.ab2@25179>   Dc.l do_times_float                           ;dotimesf
0004159E <AmiBlitz3.ab2@25180>   Ds.l 2
000415A0 <AmiBlitz3.ab2@25181>   Dc.b $0F,$A0
000415A2 <AmiBlitz3.ab2@25183>   Dc.b $00,$2F                                  ;/ ; div
000415A6 <AmiBlitz3.ab2@25184>   Dc.l do_Div_byte                              ;dodivb
000415AA <AmiBlitz3.ab2@25185>   Dc.l do_Div_word                              ;dodivb
000415AE <AmiBlitz3.ab2@25186>   Dc.l do_Div_long                              ;dodivl
000415B2 <AmiBlitz3.ab2@25187>   Dc.l do_Div_quick                             ;dodivq
000415B6 <AmiBlitz3.ab2@25188>   Dc.l do_Div_float                             ;dodivf
000415BE <AmiBlitz3.ab2@25189>   Ds.l 2
000415C0 <AmiBlitz3.ab2@25190>   Dc.b $0F,$A0
000415C2 <AmiBlitz3.ab2@25192>   Dc.b $00,$26                                  ;& ; & int
000415C6 <AmiBlitz3.ab2@25193>   Dc.l do_AND_byte                              ;doandb
000415CA <AmiBlitz3.ab2@25194>   Dc.l do_AND_word                              ;doandw
000415CE <AmiBlitz3.ab2@25195>   Dc.l do_AND_long                              ;doandl
000415D2 <AmiBlitz3.ab2@25196>   Dc.l do_AND_long                              ;doandl
000415DE <AmiBlitz3.ab2@25197>   Ds.l 3
000415E0 <AmiBlitz3.ab2@25198>   Dc.b $13,$88
000415E2 <AmiBlitz3.ab2@25200>   Dc.b $00,$7C                                  ;| ;or int ;
000415E6 <AmiBlitz3.ab2@25201>   Dc.l do_OR_byte                               ;doorb
000415EA <AmiBlitz3.ab2@25202>   Dc.l do_OR_word                               ;doorw
000415EE <AmiBlitz3.ab2@25203>   Dc.l do_OR_long                               ;doorl
000415F2 <AmiBlitz3.ab2@25204>   Dc.l do_OR_long                               ;doorl
000415FE <AmiBlitz3.ab2@25205>   Ds.l 3
00041600 <AmiBlitz3.ab2@25206>   Dc.b $13,$88
00041602 <AmiBlitz3.ab2@25208>   Dc.b $80,$42                                  ; AND int  ;(opand-opabcd)/$1c+$8000+fnum
00041606 <AmiBlitz3.ab2@25209>   Dc.l do_AND_byte                              ;doandb
0004160A <AmiBlitz3.ab2@25210>   Dc.l do_AND_word                              ;doandw
0004160E <AmiBlitz3.ab2@25211>   Dc.l do_AND_long                              ;doandl
00041612 <AmiBlitz3.ab2@25212>   Dc.l do_AND_long                              ;doandl
0004161E <AmiBlitz3.ab2@25213>   Ds.l 3
00041620 <AmiBlitz3.ab2@25214>   Dc.b $03,$E8
00041622 <AmiBlitz3.ab2@25216>   Dc.b $80,$8A                                  ; OR int   ;(opor-opabcd)/$1c+$8000+fnum
00041626 <AmiBlitz3.ab2@25217>   Dc.l do_OR_byte                               ;doorb
0004162A <AmiBlitz3.ab2@25218>   Dc.l do_OR_word                               ;doorw
0004162E <AmiBlitz3.ab2@25219>   Dc.l do_OR_long                               ;doorl
00041632 <AmiBlitz3.ab2@25220>   Dc.l do_OR_long                               ;doorl
0004163E <AmiBlitz3.ab2@25221>   Ds.l 3
00041640 <AmiBlitz3.ab2@25222>   Dc.b $03,$E8
00041642 <AmiBlitz3.ab2@25224>   Dc.b $80,$73                                  ; EOR int  ;(opeor-opabcd)/$1c+$8000+fnum
00041646 <AmiBlitz3.ab2@25225>   Dc.l do_EOR_byte                              ;doeorb
0004164A <AmiBlitz3.ab2@25226>   Dc.l do_EOR_word                              ;doeorw
0004164E <AmiBlitz3.ab2@25227>   Dc.l do_EOR_long                              ;doeorl
00041652 <AmiBlitz3.ab2@25228>   Dc.l do_EOR_long                              ;doeorl
0004165E <AmiBlitz3.ab2@25229>   Ds.l 3
00041660 <AmiBlitz3.ab2@25230>   Dc.b $03,$E8
00041662 <AmiBlitz3.ab2@25232>   Dc.b $80,$7C                                  ; LSL int  ;(oplsl-opabcd)/$1c+$8000+fnum
00041666 <AmiBlitz3.ab2@25233>   Dc.l do_LSL                                   ;dolslb
0004166A <AmiBlitz3.ab2@25234>   Dc.l do_LSL                                   ;dolslw
0004166E <AmiBlitz3.ab2@25235>   Dc.l do_LSL                                   ;dolsll
00041672 <AmiBlitz3.ab2@25236>   Dc.l do_LSL                                   ;dolsll
0004167E <AmiBlitz3.ab2@25237>   Ds.l 3
00041680 <AmiBlitz3.ab2@25238>   Dc.b $17,$70
00041682 <AmiBlitz3.ab2@25240>   Dc.b $80,$44                                  ; ASL int  ;(opasl-opabcd)/$1c+$8000+fnum
00041686 <AmiBlitz3.ab2@25241>   Dc.l do_LSL                                   ;dolslb
0004168A <AmiBlitz3.ab2@25242>   Dc.l do_LSL                                   ;dolslw
0004168E <AmiBlitz3.ab2@25243>   Dc.l do_LSL                                   ;dolsll
00041692 <AmiBlitz3.ab2@25244>   Dc.l do_LSL                                   ;dolsll
0004169E <AmiBlitz3.ab2@25245>   Ds.l 3
000416A0 <AmiBlitz3.ab2@25246>   Dc.b $17,$70
000416A2 <AmiBlitz3.ab2@25248>   Dc.b $80,$7D                                  ; LSR int  ;(oplsr-opabcd)/$1c+$8000+fnum
000416A6 <AmiBlitz3.ab2@25249>   Dc.l do_LSR                                   ;dolsrb
000416AA <AmiBlitz3.ab2@25250>   Dc.l do_LSR                                   ;dolsrw
000416AE <AmiBlitz3.ab2@25251>   Dc.l do_LSR                                   ;dolsrl
000416B2 <AmiBlitz3.ab2@25252>   Dc.l do_LSR                                   ;dolsrl
000416BE <AmiBlitz3.ab2@25253>   Ds.l 3
000416C0 <AmiBlitz3.ab2@25254>   Dc.b $17,$70
000416C2 <AmiBlitz3.ab2@25256>   Dc.b $80,$45                                  ; ASR int  ;(opasr-opabcd)/$1c+$8000+fnum
000416C6 <AmiBlitz3.ab2@25257>   Dc.l do_ASR                                   ;doasrb
000416CA <AmiBlitz3.ab2@25258>   Dc.l do_ASR                                   ;doasrw
000416CE <AmiBlitz3.ab2@25259>   Dc.l do_ASR                                   ;doasrl
000416D2 <AmiBlitz3.ab2@25260>   Dc.l do_ASR                                   ;doasrl
000416DE <AmiBlitz3.ab2@25261>   Ds.l 3
000416E0 <AmiBlitz3.ab2@25262>   Dc.b $17,$70
000416E2 <AmiBlitz3.ab2@25264>   Dc.b $80,$B9                                  ;mod       ;$8006+tnum
000416E6 <AmiBlitz3.ab2@25265>   Dc.l do_mod_byte                              ;domodb
000416EA <AmiBlitz3.ab2@25266>   Dc.l do_mod_word                              ;domodw
000416EE <AmiBlitz3.ab2@25267>   Dc.l do_mod_long                              ;domodl
000416F2 <AmiBlitz3.ab2@25268>   Dc.l do_mod_quick                             ;domodq
000416F6 <AmiBlitz3.ab2@25269>   Dc.l do_mod_float                             ;domodf
000416FE <AmiBlitz3.ab2@25270>   Ds.l 2
00041700 <AmiBlitz3.ab2@25271>   Dc.b $13,$88
00041702 <AmiBlitz3.ab2@25274>   Dc.b $00,$5E                                  ;^
00041706 <AmiBlitz3.ab2@25275>   Dc.l do_pow                                   ;dopow
0004170A <AmiBlitz3.ab2@25276>   Dc.l do_pow                                   ;dopow
0004170E <AmiBlitz3.ab2@25277>   Dc.l do_pow                                   ;dopow
00041712 <AmiBlitz3.ab2@25278>   Dc.l do_pow                                   ;dopow
00041716 <AmiBlitz3.ab2@25279>   Dc.l do_pow                                   ;dopow
0004171E <AmiBlitz3.ab2@25280>   Ds.l 2
00041720 <AmiBlitz3.ab2@25281>   Dc.b $1B,$58                                  ;7000
00041722 <AmiBlitz3.ab2@25284>   Dc.b $00,$3D                                  ;=
00041726 <AmiBlitz3.ab2@25285>   Dc.l do_equal_byte                            ;doeqb
0004172A <AmiBlitz3.ab2@25286>   Dc.l do_equal_word                            ;doeqw
0004172E <AmiBlitz3.ab2@25287>   Dc.l do_equal_long                            ;doeql
00041732 <AmiBlitz3.ab2@25288>   Dc.l do_equal_long                            ;doeql
00041736 <AmiBlitz3.ab2@25289>   Dc.l do_equal_float                           ;doeqf
0004173A <AmiBlitz3.ab2@25290>   Dc.l do_equal_long                            ;doeql
0004173E <AmiBlitz3.ab2@25291>   Dc.l do_equal_string                          ;doeqs
00041740 <AmiBlitz3.ab2@25292>   Dc.b $07,$D0                                  ;2000
00041742 <AmiBlitz3.ab2@25295>   Dc.b $3C,$3E                                  ;<>
00041746 <AmiBlitz3.ab2@25296>   Dc.l do_not_equal_byte                        ;doneb
0004174A <AmiBlitz3.ab2@25297>   Dc.l do_not_equal_word                        ;donew
0004174E <AmiBlitz3.ab2@25298>   Dc.l do_not_equal_long                        ;donel
00041752 <AmiBlitz3.ab2@25299>   Dc.l do_not_equal_long                        ;donel
00041756 <AmiBlitz3.ab2@25300>   Dc.l do_not_equal_float                       ;donef
0004175A <AmiBlitz3.ab2@25301>   Dc.l do_not_equal_long                        ;donel
0004175E <AmiBlitz3.ab2@25302>   Dc.l do_not_equal_string                      ;dones
00041760 <AmiBlitz3.ab2@25303>   Dc.b $07,$D0                                  ;2000
00041762 <AmiBlitz3.ab2@25306>   Dc.b $00,$3C                                  ;<
00041766 <AmiBlitz3.ab2@25307>   Dc.l do_littler_byte                          ;doltb
0004176A <AmiBlitz3.ab2@25308>   Dc.l do_littler_word                          ;doltw
0004176E <AmiBlitz3.ab2@25309>   Dc.l do_littler_long                          ;doltl
00041772 <AmiBlitz3.ab2@25310>   Dc.l do_littler_long                          ;doltl
00041776 <AmiBlitz3.ab2@25311>   Dc.l do_littler_float                         ;doltf
0004177A <AmiBlitz3.ab2@25312>   Dc.l do_littler_long                          ;doltl
0004177E <AmiBlitz3.ab2@25313>   Dc.l do_littler_string                        ;dolts
00041780 <AmiBlitz3.ab2@25314>   Dc.b $07,$D0                                  ;2000
00041782 <AmiBlitz3.ab2@25317>   Dc.b $3C,$3D                                  ;<=
00041786 <AmiBlitz3.ab2@25318>   Dc.l do_littler_equal_byte                    ;doleb
0004178A <AmiBlitz3.ab2@25319>   Dc.l do_littler_equal_word                    ;doleb
0004178E <AmiBlitz3.ab2@25320>   Dc.l do_littler_equal_long                    ;dolel
00041792 <AmiBlitz3.ab2@25321>   Dc.l do_littler_equal_long                    ;dolel
00041796 <AmiBlitz3.ab2@25322>   Dc.l do_littler_equal_float                   ;dolef
0004179A <AmiBlitz3.ab2@25323>   Dc.l do_littler_equal_long                    ;dolel
0004179E <AmiBlitz3.ab2@25324>   Dc.l do_littler_equal_string                  ;doles
000417A0 <AmiBlitz3.ab2@25325>   Dc.b $07,$D0                                  ;2000
000417A2 <AmiBlitz3.ab2@25328>   Dc.b $00,$3E                                  ;>
000417A6 <AmiBlitz3.ab2@25329>   Dc.l do_greater_byte                          ;dogtb
000417AA <AmiBlitz3.ab2@25330>   Dc.l do_greater_word                          ;dogtw
000417AE <AmiBlitz3.ab2@25331>   Dc.l do_greater_long                          ;dogtl
000417B2 <AmiBlitz3.ab2@25332>   Dc.l do_greater_long                          ;dogtl
000417B6 <AmiBlitz3.ab2@25333>   Dc.l do_greater_float                         ;dogtf
000417BA <AmiBlitz3.ab2@25334>   Dc.l do_greater_long                          ;dogtl
000417BE <AmiBlitz3.ab2@25335>   Dc.l do_greater_string                        ;dogts
000417C0 <AmiBlitz3.ab2@25336>   Dc.b $07,$D0                                  ;2000
000417C2 <AmiBlitz3.ab2@25339>   Dc.b $3E,$3D                                  ;>=
000417C6 <AmiBlitz3.ab2@25340>   Dc.l do_greater_equal_byte                    ;dogeb
000417CA <AmiBlitz3.ab2@25341>   Dc.l do_greater_equal_word                    ;dogew
000417CE <AmiBlitz3.ab2@25342>   Dc.l do_greater_equal_long                    ;dogel
000417D2 <AmiBlitz3.ab2@25343>   Dc.l do_greater_equal_long                    ;dogel
000417D6 <AmiBlitz3.ab2@25344>   Dc.l do_greater_equal_float                   ;dogef
000417DA <AmiBlitz3.ab2@25345>   Dc.l do_greater_equal_long                    ;dogel
000417DE <AmiBlitz3.ab2@25346>   Dc.l do_greater_equal_string                  ;doges
000417E0 <AmiBlitz3.ab2@25347>   Dc.b $07,$D0                                  ;2000
000417E2 <AmiBlitz3.ab2@25349>   Dc.b $80,$CD                                  ;$8000+26+tnum
000417E6 <AmiBlitz3.ab2@25350>   Dc.l _BitTst
000417EA <AmiBlitz3.ab2@25351>   Dc.l _BitTst
000417EE <AmiBlitz3.ab2@25352>   Dc.l _BitTst
000417F2 <AmiBlitz3.ab2@25353>   Dc.l _BitTst
000417FE <AmiBlitz3.ab2@25354>   Ds.l 3
00041800 <AmiBlitz3.ab2@25355>   Dc.b $1F,$40                                  ;8000
00041802 <AmiBlitz3.ab2@25357>   Dc.b $80,$CE                                  ;$8000+27+tnum
00041806 <AmiBlitz3.ab2@25358>   Dc.l _BitSet
0004180A <AmiBlitz3.ab2@25359>   Dc.l _BitSet
0004180E <AmiBlitz3.ab2@25360>   Dc.l _BitSet
00041812 <AmiBlitz3.ab2@25361>   Dc.l _BitSet
0004181E <AmiBlitz3.ab2@25362>   Ds.l 3
00041820 <AmiBlitz3.ab2@25363>   Dc.b $1F,$40                                  ;8000
00041822 <AmiBlitz3.ab2@25365>   Dc.b $80,$CF                                  ;$8000+28+tnum
00041826 <AmiBlitz3.ab2@25366>   Dc.l _BitClr
0004182A <AmiBlitz3.ab2@25367>   Dc.l _BitClr
0004182E <AmiBlitz3.ab2@25368>   Dc.l _BitClr
00041832 <AmiBlitz3.ab2@25369>   Dc.l _BitClr
0004183E <AmiBlitz3.ab2@25370>   Ds.l 3
00041840 <AmiBlitz3.ab2@25371>   Dc.b $1F,$40                                  ;8000
00041842 <AmiBlitz3.ab2@25373>   Dc.b $80,$D0                                  ;$8000+29+tnum
00041846 <AmiBlitz3.ab2@25374>   Dc.l _BitChg
0004184A <AmiBlitz3.ab2@25375>   Dc.l _BitChg
0004184E <AmiBlitz3.ab2@25376>   Dc.l _BitChg
00041852 <AmiBlitz3.ab2@25377>   Dc.l _BitChg
0004185E <AmiBlitz3.ab2@25378>   Ds.l 3
00041860 <AmiBlitz3.ab2@25379>   Dc.b $1F,$40                                  ;8000
00041862 <AmiBlitz3.ab2@25381>   Dc.b $00,$00
00041866 <AmiBlitz3.ab2@25386> modetable:   Dc.l typemode
0004186A <AmiBlitz3.ab2@25389> newtypebase: Dc.l newtype_byte
00041872 <AmiBlitz3.ab2@25392>   Dc.l newtype_word,$01                                    
00041874 <AmiBlitz3.ab2@25393>   Dc.w $0001
00041878 <AmiBlitz3.ab2@25394>   Dc.b 13,"b",0,0
00041880 <AmiBlitz3.ab2@25397>   Dc.l newtype_long,$02
00041882 <AmiBlitz3.ab2@25398>   Dc.w $0002
00041886 <AmiBlitz3.ab2@25399>   Dc.b 13,"w",0,0
0004188E <AmiBlitz3.ab2@25402>   Dc.l newtype_quick,$03                                   
00041890 <AmiBlitz3.ab2@25403>   Dc.w $0004
00041894 <AmiBlitz3.ab2@25404>   Dc.b 13,"l",0,0
0004189C <AmiBlitz3.ab2@25407>   Dc.l newtype_float,$04                                   
0004189E <AmiBlitz3.ab2@25408>   Dc.w $0004
000418A2 <AmiBlitz3.ab2@25409>   Dc.b 13,"q",0,0
000418AA <AmiBlitz3.ab2@25413>   Dc.l newtype_double,$05                                  ;make problems on old residents
000418AC <AmiBlitz3.ab2@25414>   Dc.w $0004
000418B0 <AmiBlitz3.ab2@25415>   Dc.b 13,"f",0,0
000418B8 <AmiBlitz3.ab2@25418>   Dc.l newtype_double,$06
000418BA <AmiBlitz3.ab2@25419>   Dc.w $0004
000418BE <AmiBlitz3.ab2@25420>   Dc.b 13,"a",0,0
000418C6 <AmiBlitz3.ab2@25423>   Dc.l newtype_string,$05                                  ;?? has to by $06 becous is number 6 not 5
000418C8 <AmiBlitz3.ab2@25424>   Dc.w $0008
000418CC <AmiBlitz3.ab2@25425>   Dc.b 13,"d",0,0
000418D4 <AmiBlitz3.ab2@25429>   Dc.l $0000000,$07                                        ;stringtype
000418D6 <AmiBlitz3.ab2@25430>   Dc.w $0004
000418DA <AmiBlitz3.ab2@25431>   Dc.b 13,"s",0,0
000418E2 <AmiBlitz3.ab2@25434>   Dc.l $00,$00
000418E4 <AmiBlitz3.ab2@25435>   Dc.w $0000
000418E8 <AmiBlitz3.ab2@25436>   Dc.b $01,$00,$00,$00
00041948 <AmiBlitz3.ab2@25439> incdir:               Ds.l 24                              ;dcb.b   96,0    org source
0004194A <AmiBlitz3.ab2@25443> dirmode:              Ds.w 1                               ;shows if directmode is on
0004194E <AmiBlitz3.ab2@25445>                       Ds.l 1                               ;int org source ;intuition!
00041950 <AmiBlitz3.ab2@25446> maxobject_pos:        Ds.w 1                               ;maxat org source ;max at
00041954 <AmiBlitz3.ab2@25447> maxsat:               Ds.l 1                               ;data1 info pos
00041956 <AmiBlitz3.ab2@25448> number_of_objects:    Ds.w 1                               ;nummaxs org source ;number of maximums
00041958 <AmiBlitz3.ab2@25450> maxsused:             Ds.w 1                               ;maximums used in prog
0004195A <AmiBlitz3.ab2@25454> dark:                 Ds.w 1                               ;dark compile?
0004195C <AmiBlitz3.ab2@25455> qlab:                 Ds.w 1                               ;quick lab allocate
00041960 <AmiBlitz3.ab2@25456> defaulttype:          Dc.l newtype_quick                   ;dc.l quicktype org source
00041962 <AmiBlitz3.ab2@25461> anyerrs:              Dc.w -1                              ;Any Errors in compile ?
00041964 <AmiBlitz3.ab2@25462> debugversion:         Ds.w 1                               ;makeexec org source ;make an executable file!
00041968 <AmiBlitz3.ab2@25463> noinits:              Ds.l 1                               ;flag for if we have any init routines!
0004196C <AmiBlitz3.ab2@25465> letstart:             Ds.l 1
0004196E <AmiBlitz3.ab2@25466> dontwrite:            Ds.w 1                               ;nomemleft org source
000419EE <AmiBlitz3.ab2@25467> lastgloballabel:      Ds.l 32                              ;lastbiglab ds.b 128 org source
000419F2 <AmiBlitz3.ab2@25469> locdatast:            Ds.l 1
000419F6 <AmiBlitz3.ab2@25470> firstpend:            Ds.l 1
000419FA <AmiBlitz3.ab2@25474> data2at:              Ds.l 1
000419FE <AmiBlitz3.ab2@25475> data2:                Ds.l 1
00041A02 <AmiBlitz3.ab2@25476> data1start:           Ds.l 1                               ;data1at org source
00041A06 <AmiBlitz3.ab2@25477> data1:                Ds.l 1                               ;pc for initialized data!
00041A0A <AmiBlitz3.ab2@25478> destbufferstart:      Ds.l 1                               ;pcat org source
00041A0E <AmiBlitz3.ab2@25482> destbufferend:        Ds.l 1                               ;libat org source
00041A12 <AmiBlitz3.ab2@25483> libend:               Ds.l 1                               ;lib org source
00041A16 <AmiBlitz3.ab2@25484> allat:                Ds.l 1                               ;highest allocmemd location for code
00041A20 <AmiBlitz3.ab2@25485> dummyasm:             Dc.w 0,0,0,0,0
00041A24 <AmiBlitz3.ab2@25486>                       Dc.l 0
00041A26 <AmiBlitz3.ab2@25487>                       Dc.w 0
00041A2A <AmiBlitz3.ab2@25491> buff1:                Ds.l 1                               ;buffer for text get
00041A2E <AmiBlitz3.ab2@25492> buff2:                Ds.l 1                               ;ditto for dest
00041A30 <AmiBlitz3.ab2@25493> constmode:            Ds.w 1                               ;0 for norm, <>0 for assembler
00041A32 <AmiBlitz3.ab2@25494> asmtype:              Ds.w 1                               ;0=contains no prog reference
00041A34 <AmiBlitz3.ab2@25495> extraword:            Ds.w 1                               ;the extension word for assembler
00041A36 <AmiBlitz3.ab2@25496> extraword2:           Ds.w 1                               ;ditto
00041A38 <AmiBlitz3.ab2@25497> asmsize:              Ds.w 1
00041A3C <AmiBlitz3.ab2@25498> asmbuff:              Ds.l 1
00041A3E <AmiBlitz3.ab2@25499> asmlen:               Ds.w 1                               ;first (src) text len
00041A40 <AmiBlitz3.ab2@25500> asmlen2:              Ds.w 1                               ;second (dest)
00041A44 <AmiBlitz3.ab2@25501> templabel:            Ds.l 1                               ;linked list of expressions to resolve
00041A46 <AmiBlitz3.ab2@25504> macnum:               Ds.w 1
00041A4A <AmiBlitz3.ab2@25506>                       Dc.l 0                               ;address of next 0 in include fil
00041A4E <AmiBlitz3.ab2@25507> titleat:              Ds.l 1                               ;5 longs for compile streaks
00041A58 <AmiBlitz3.ab2@25508> progress_per_line:    Ds.w 5                               ;titleadd ds 5 org source ;5 adds for compile streaks
00041A5A <AmiBlitz3.ab2@25509> connest:              Ds.w 1                               ;conditional nest level
00041A5E <AmiBlitz3.ab2@25510> firstconst:           Ds.l 1                               ;first constant (#a)
00041A60 <AmiBlitz3.ab2@25511> numarg:               Ds.w 1                               ;number of macro arguements
00041A64 <AmiBlitz3.ab2@25512> myoline:              Ds.l 1                               ;macro done yet?
00041A68 <AmiBlitz3.ab2@25513> myline:               Ds.l 1                               ;pointer to some memory to create
00041A6C <AmiBlitz3.ab2@25516>                       Ds.l 1
00041AAC <AmiBlitz3.ab2@25517> concomstack:          Ds.l 16                              ;32 deep conditional compilation
00041AB0 <AmiBlitz3.ab2@25518> concomsp:             Dc.l concomstack                     ;stack pointer
00041AB2 <AmiBlitz3.ab2@25519> oldqflag:             Ds.w 1
00041AB6 <AmiBlitz3.ab2@25522>                       Ds.l 1
00041AB8 <AmiBlitz3.ab2@25524>                       Ds.w 1
00041ABC <AmiBlitz3.ab2@25525> firstfor:             Ds.l 1                               ;first for
00041ABE <AmiBlitz3.ab2@25526> stackpar:             Ds.w 1                               ;pushflag org source ;1 par to stack 0 normal
00041AC0 <AmiBlitz3.ab2@25527> sbgot:                Ds.w 1                               ;flag for string got 2
00041AC2 <AmiBlitz3.ab2@25528> convsize:             Ds.w 1                               ;usertype org source
00041AC4 <AmiBlitz3.ab2@25529> userp:                Ds.w 1
00041AC8 <AmiBlitz3.ab2@25534> ptr_userlibs_list:    Ds.l 1                               ;libslist org source
00041ACA <AmiBlitz3.ab2@25535> a2offset:             Ds.w 1                               ;stackuse org source ;stack used when gathering lib parameters
00041ACC <AmiBlitz3.ab2@25536> numreps:              Ds.w 1                               ;number of repeats in a repeatable
00041AD0 <AmiBlitz3.ab2@25538> locloc:               Ds.l 1
00041AD2 <AmiBlitz3.ab2@25539> locchar:              Ds.w 1
00041B52 <AmiBlitz3.ab2@25540> stbuff:               Ds.l 32                              ;was 8    ;six string varoffs
00041B54 <AmiBlitz3.ab2@25541> commode:              Ds.w 1                               ;in comma mode...
00041B58 <AmiBlitz3.ab2@25542> lastoffset_org:       Ds.l 1                               ;lastoffset org source ;last offset in calcvar!
00041B5C <AmiBlitz3.ab2@25543> linenumat:            Dc.l $FFFFFFFF                       ;linecounter ;dc -1 org source ;line being processed
00041B60 <AmiBlitz3.ab2@25544> compilelinecounter:   Dc.l $FFFFFFFF                       ;menuret dc -1 org source ;menu return code
00041B62 <AmiBlitz3.ab2@25546>                       Ds.w 1                               ;opt reset offset
00041C62 <AmiBlitz3.ab2@25548>                       Ds.l 64                              ;Ds.b vcodelen org source ;code used to generate
00041D62 <AmiBlitz3.ab2@25550>                       Ds.l 64                              ;Ds.b vcodelen org source ;above for let.....
00041D64 <AmiBlitz3.ab2@25551> varcodelen:           Ds.w 1                               ;and length
00041D66 <AmiBlitz3.ab2@25553>                       Ds.w 1
00041D6C <AmiBlitz3.ab2@25554> oldvcodelen:          Ds.w 3                               ;old varcodelen
00041D70 <AmiBlitz3.ab2@25558> tempvm:               Ds.l 1                               ;memlib org source ;address of memory library
00041D72 <AmiBlitz3.ab2@25559> memlibstat:           Ds.w 1                               ;status of memory library during
00041D74 <AmiBlitz3.ab2@25562>                       Dc.w 0
00041D76 <AmiBlitz3.ab2@25564>                       Dc.w 0
00041D78 <AmiBlitz3.ab2@25566> varmode:              Ds.w 1                               ;0 a5 pointer to global
00041D7C <AmiBlitz3.ab2@25568> currentfunction:      Ds.l 1                               ;thisproc org source
00041D80 <AmiBlitz3.ab2@25569> firstproc:            Ds.l 1                               ;firstproc org source ;this procedure being 'done'
00041D82 <AmiBlitz3.ab2@25570> proceduremode:        Ds.w 1                               ;-1=statement/ function return type ;procmode org source  ;1 if statement, 2 if function
00041D84 <AmiBlitz3.ab2@25572> skipcode:             Ds.w 1                               ;nocompile ;comflag org source ;0 if no compile
00041D88 <AmiBlitz3.ab2@25573> passstack:            Ds.l 1
00041D8C <AmiBlitz3.ab2@25574> zero:                 Ds.l 1                               ;ZERO!
00041D8E <AmiBlitz3.ab2@25575> ininclude:            Ds.w 1                               ;numincs org source ;number of include files
00041D92 <AmiBlitz3.ab2@25577> xinclude_base:        Ds.l 1                               ;firstxinc org source ;first exclusive include.
00041D96 <AmiBlitz3.ab2@25578> constantbase:         Ds.l 1                               ;firstinc org source ;first include
00041D98 <AmiBlitz3.ab2@25579> lasta6:               Dc.w $FFFF                           ;-1 org source
00041D9A <AmiBlitz3.ab2@25580> instringon:           Ds.w 1                               ;quoteflag org source
00041D9E <AmiBlitz3.ab2@25581> ptr_macrobuffer_begin:Ds.l 1                               ;macrobuff org source ;pointer to macro collection buffer ;begin
00041DA2 <AmiBlitz3.ab2@25582> ptr_macrobuffer_end:  Ds.l 1                               ;macrobufff org source ;end of above ;end of
00041DA6 <AmiBlitz3.ab2@25583> macrobase:            Ds.l 1                               ;firstmacro org source ;linked list of macro's ;macrolist
00041DAA <AmiBlitz3.ab2@25584> endop:                Ds.l 1                               ;end of program pc - before finishups!
00041DAE <AmiBlitz3.ab2@25585> labelbase:            Ds.l 1                               ;firstlabel org source ;first lib struct
00041DB2 <AmiBlitz3.ab2@25586> end_of_tokenlist:     Ds.l 1                               ;lasttoken org source
00041DB4 <AmiBlitz3.ab2@25587> numstatic:            Ds.w 1                               ;number of static structs
00041DB8 <AmiBlitz3.ab2@25588> staticdata:           Ds.l 1                               ;data1 val for statics
00041DBC <AmiBlitz3.ab2@25589> libpointer:           Ds.l 1                               ;firstlib org source ;first lib struct
00041DBE <AmiBlitz3.ab2@25590> sbasegot:             Ds.w 1                               ;string base got?
00041DC2 <AmiBlitz3.ab2@25591> litdata1:             Ds.l 1
00041DC6 <AmiBlitz3.ab2@25595> objlen:               Ds.l 1
00041DCA <AmiBlitz3.ab2@25596> hunkoffsetcounter:    Ds.l 1                               ;numoffs org source
00041DCE <AmiBlitz3.ab2@25597> hunkoffsetbase:       Ds.l 1                               ;firstoff org source ;pointer to linked list
00041DD0 <AmiBlitz3.ab2@25599> flagmask:             Ds.w 1                               ;mask for flag of variable when
00041DD2 <AmiBlitz3.ab2@25601> notshared:            Ds.w 1                               ;added org source ;flag for seeing if variable was added!
00041DD4 <AmiBlitz3.ab2@25602> nonew:                Ds.w 1                               ;1 to inhibit new variable creation
00041DD8 <AmiBlitz3.ab2@25603> temp1:                Ds.l 1
00041DDC <AmiBlitz3.ab2@25604> temp2:                Ds.l 1
00041DE0 <AmiBlitz3.ab2@25606> ptr_parameterstore:   Ds.l 1                               ;namebuff ds.b 128 org source
00041DE4 <AmiBlitz3.ab2@25607> fib_DirEntryType:     Ds.l 1                               ;namebuff+4 org source
00041E58 <AmiBlitz3.ab2@25608> fib_FileName:         Ds.l 29                              ;namebuff+8 org source
00041E5C <AmiBlitz3.ab2@25609> fib_Size:             Ds.l 1                               ;namebuff+124 org source
00041EDC <AmiBlitz3.ab2@25611> namebuff2:            Ds.b 128
00041EE4 <AmiBlitz3.ab2@25612>                       Ds.b 8                               ;for fileinfoblock
00041F24 <AmiBlitz3.ab2@25615> optstuff:             Ds.b 64                              ;temp opt make buffer
00041F62 <AmiBlitz3.ab2@25623>   !ComData_GetL{comFunc_OpenCompilerWindow,A1}
00041F68 <AmiBlitz3.ab2@25624>   MOVE.l #1000,D0
00041F6A <AmiBlitz3.ab2@25625>   JSR (A1)
00041F6C <AmiBlitz3.ab2@25626> RTS
00041F6E <AmiBlitz3.ab2@25632>   Dc.b $00,$01                                             ; 1 byte schreiben ;one byte stuff...
00041F72 <AmiBlitz3.ab2@25633>   Dc.l xtra_versionnumber                                  ; vers org source
00041F76 <AmiBlitz3.ab2@25634>   Dc.l create_iconfile                                     ; create icon for executable
00041F7A <AmiBlitz3.ab2@25635>   Ds.l 1
00041F7C <AmiBlitz3.ab2@25637>   Dc.b $00,$02                                             ; 2 bytes schreiben  ;two byte stuff...
00041F80 <AmiBlitz3.ab2@25640>   Dc.l set_use_debugger
00041F84 <AmiBlitz3.ab2@25641>   Dc.l AL_0_11010                                          ;+obsolet: debugger
00041F88 <AmiBlitz3.ab2@25642>   Dc.l AL_0_1103C                                          ;+obsolet: long arrays
00041F8C <AmiBlitz3.ab2@25643>   Dc.l AL_0_11068                                          ;+obsolet: expand macros
00041F90 <AmiBlitz3.ab2@25644>   Dc.l AL_0_11094                                          ;+obsolet: quoted macros
00041F94 <AmiBlitz3.ab2@25645>   Dc.l set_make_smallestcode
00041F98 <AmiBlitz3.ab2@25646>   Dc.l set_link_debuginfo
00041F9C <AmiBlitz3.ab2@25647>   Dc.l set_autorun
00041FA0 <AmiBlitz3.ab2@25648>   Dc.l set_interruptcheck
00041FA4 <AmiBlitz3.ab2@25649>   Dc.l set_assemblercheck
00041FA8 <AmiBlitz3.ab2@25651>   Dc.l set_overflowcheck
00041FAC <AmiBlitz3.ab2@25652>   Dc.l default_obsolete                                    ;+obsolet: ohne inhalt
00041FB0 <AmiBlitz3.ab2@25653>   Dc.l default_interruptcheck                              ;+obsolet: interruptcheck vorgabe
00041FB4 <AmiBlitz3.ab2@25654>   Dc.l default_overflowcheck                               ;+obsolet: overflow vorgabe
00041FB8 <AmiBlitz3.ab2@25657>   Ds.l 1
00041FBA <AmiBlitz3.ab2@25659>   Dc.b $00,$04                                             ; 4 bytes schreiben..  ;four byte stuff...
00041FBE <AmiBlitz3.ab2@25666>   Dc.l objectbuffer
00041FC2 <AmiBlitz3.ab2@25667>   Dc.l libsbuffer
00041FC6 <AmiBlitz3.ab2@25668>   Dc.l systembuffer
00041FCA <AmiBlitz3.ab2@25669>   Dc.l databuffer
00041FCE <AmiBlitz3.ab2@25670>   Dc.l macrobuffer_size
00041FD2 <AmiBlitz3.ab2@25671>   Dc.l stringbuffer
00041FD6 <AmiBlitz3.ab2@25674>   Ds.l 1
00041FD8 <AmiBlitz3.ab2@25678>   Dc.b $02,$20                                             ;dc 68*8; 544 bytes schreiben.
00041FE0 <AmiBlitz3.ab2@25679>   Dc.l residents_table,0
00041FE2 <AmiBlitz3.ab2@25683>   Dc.b $01,$80                                             ;dc 192*2; 384 bytes schreiben
00041FEA <AmiBlitz3.ab2@25684>   Dc.l exepath,0                                           ; exepath und exefilename jeweils 192 bytes
00041FEC <AmiBlitz3.ab2@25685>   Ds.w 1
000420E8 <AmiBlitz3.ab2@25689>   Ds.l 63
000421E4 <AmiBlitz3.ab2@25690>   Ds.l 63
000422E0 <AmiBlitz3.ab2@25691>   Ds.l 63
000423C2 <AmiBlitz3.ab2@25692>   Ds.w 113
000423C4 <AmiBlitz3.ab2@25695> comsettings_message:  Ds.w 1                               ;allchg org source
000423C6 <AmiBlitz3.ab2@25696> xtra_versionnumber:   Ds.w 1                               ;vers org source
000423CC <AmiBlitz3.ab2@25700>   CLR.b exefilename
000423CE <AmiBlitz3.ab2@25701>   TST.l d0
000423D2 <AmiBlitz3.ab2@25702>   BNE read_xtrafile__l10
000423D4 <AmiBlitz3.ab2@25703> RTS
000423DA <AmiBlitz3.ab2@25706>   JSR free_residents                                       ;jsr freeres2 org source
000423E0 <AmiBlitz3.ab2@25707>   LEA ptr_xtradata,A2
000423E2 <AmiBlitz3.ab2@25708>   MOVEQ.l #$00,D4
000423E4 <AmiBlitz3.ab2@25711>     MOVE.w (A2)+,D4                                        ; anzahl bytes zum lesen
000423E8 <AmiBlitz3.ab2@25712>     BEQ.b read_xtrafile__done
000423EA <AmiBlitz3.ab2@25715>     MOVE.l (A2)+,D2
000423EE <AmiBlitz3.ab2@25716>   BEQ.b read_xtrafile__loop
000423F0 <AmiBlitz3.ab2@25718>   MOVE.l D4,D3
000423F2 <AmiBlitz3.ab2@25719>   MOVE.l D7,D1
000423F6 <AmiBlitz3.ab2@25720>   JSR _Read(A6)                                            ; d1: file, d2: buffer, d3:length
000423F8 <AmiBlitz3.ab2@25721>   TST.l D0
000423FC <AmiBlitz3.ab2@25722>   BNE.b read_xtrafile__loop2
00042400 <AmiBlitz3.ab2@25723> BRA.w read_xtrafile__done2
00042406 <AmiBlitz3.ab2@25726>   TST.b xtra_versionnumber
0004240A <AmiBlitz3.ab2@25727>    BNE.b read_xtrafile__nover0
00042412 <AmiBlitz3.ab2@25728>   MOVE.w #$0080,set_autorun                                ;auto run on
0004241C <AmiBlitz3.ab2@25729>   MOVE.w default_interruptcheck,set_interruptcheck         ;interupt checking on
00042422 <AmiBlitz3.ab2@25730>   CLR.w set_assemblercheck                                 ;assembler checking off
0004242C <AmiBlitz3.ab2@25731>   MOVE.w default_overflowcheck,set_overflowcheck           ;overflow chex
00042430 <AmiBlitz3.ab2@25732> BRA.b read_xtrafile__ver0
00042432 <AmiBlitz3.ab2@25735>   MOVE.l D7,D1                                             ;load cli arg!
00042438 <AmiBlitz3.ab2@25736>   MOVE.l #str_cliarguments,D2
0004243E <AmiBlitz3.ab2@25737>   MOVE.l #116,D3                                           ; vorher 128 , jetzt 8 weniger fuer die Versionsdaten
00042442 <AmiBlitz3.ab2@25738>   JSR _Read(A6)                                            ; d1: file, d2: buffer, d3:length
00042448 <AmiBlitz3.ab2@25739>   MOVE.l #str_cliarguments,A0
0004244E <AmiBlitz3.ab2@25740>   ADDA.l #115,A0
00042454 <AmiBlitz3.ab2@25741>   MOVE.l #0,(a0) ; terminate it!
00042456 <AmiBlitz3.ab2@25743>   MOVE.l D7,D1                                             ; I know, I know. Honitos started this horrible thing, see below...
0004245C <AmiBlitz3.ab2@25744>   MOVE.l #stacksize,D2
00042462 <AmiBlitz3.ab2@25745>   MOVE.l #4,D3
00042466 <AmiBlitz3.ab2@25746>   JSR _Read(A6)
00042470 <AmiBlitz3.ab2@25747>   CMP.l ##MIN_STACKSIZE,stacksize
00042474 <AmiBlitz3.ab2@25748>   BGE 'stackok
0004247E <AmiBlitz3.ab2@25749>   MOVE.l ##MIN_STACKSIZE,stacksize
00042480 <AmiBlitz3.ab2@25752>   MOVE.l D7,D1
00042486 <AmiBlitz3.ab2@25753>   MOVE.l #versioninformation,D2
0004248C <AmiBlitz3.ab2@25754>   MOVE.l #4,D3
00042490 <AmiBlitz3.ab2@25755>   JSR _Read(A6)
00042492 <AmiBlitz3.ab2@25757>   MOVE.l D7,D1
00042498 <AmiBlitz3.ab2@25758>   MOVE.l #number_of_builds,D2
0004249E <AmiBlitz3.ab2@25759>   MOVE.l #4,D3
000424A2 <AmiBlitz3.ab2@25760>   JSR _Read(A6)
000424A8 <AmiBlitz3.ab2@25766>   MOVE.l A7,errstack
000424B2 <AmiBlitz3.ab2@25767>   MOVE.l #read_xtrafile__done2,errcont
000424BA <AmiBlitz3.ab2@25768>   MOVE.w #$FFFF,ezerr
000424C0 <AmiBlitz3.ab2@25771>     MOVE.l #temp1,D2                                   ;LOAD maxobjectsvalues
000424C2 <AmiBlitz3.ab2@25772>     MOVEQ.l #$04,D3
000424C4 <AmiBlitz3.ab2@25773>     MOVE.l D7,D1
000424C8 <AmiBlitz3.ab2@25774>     JSR _Read(A6)
000424CA <AmiBlitz3.ab2@25775>     TST.l D0
000424CE <AmiBlitz3.ab2@25776>     BEQ.b read_xtrafile__done2
000424D4 <AmiBlitz3.ab2@25777>     MOVE.w temp1,D1
000424D6 <AmiBlitz3.ab2@25778>     TST.w d1                                               ;new
000424DA <AmiBlitz3.ab2@25779>     BEQ read_xtrafile__done2                                         ;new
000424E0 <AmiBlitz3.ab2@25780>      JSR AJL_0_6F1A
000424E6 <AmiBlitz3.ab2@25782>     CMP.l #0,a1
000424EA <AmiBlitz3.ab2@25783>     BEQ read_xtrafile__dloop
000424EE <AmiBlitz3.ab2@25784>     MOVE.l $12(A1),D0
000424F6 <AmiBlitz3.ab2@25785>     MOVE.w temp1+2,-$4(A1,D0.L)
000424FA <AmiBlitz3.ab2@25786> BRA.b read_xtrafile__dloop
000424FE <AmiBlitz3.ab2@25792>   LEA residents_table(PC),A0
00042500 <AmiBlitz3.ab2@25793>   MOVEQ.l #$07,D0
00042504 <AmiBlitz3.ab2@25796>     CLR.l $40(A0)
00042508 <AmiBlitz3.ab2@25797>     LEA $44(A0),A0
0004250C <AmiBlitz3.ab2@25798>   DBF D0,read_xtrafile__loop3
00042510 <AmiBlitz3.ab2@25800>   MOVEM.l D7/A6,-(A7)
00042516 <AmiBlitz3.ab2@25801>   JSR init_buffers
0004251C <AmiBlitz3.ab2@25802>   JSR reloadresident
00042520 <AmiBlitz3.ab2@25803>   MOVEM.l (A7)+,D7/A6
00042522 <AmiBlitz3.ab2@25804> RTS
0004252A <AmiBlitz3.ab2@25808>   MOVE.b #$1,xtra_versionnumber                            ;.xtra version number...
00042530 <AmiBlitz3.ab2@25817>   LEA ptr_xtradata,A2
00042532 <AmiBlitz3.ab2@25818>   MOVEQ.l #$00,D4
00042534 <AmiBlitz3.ab2@25822>   MOVE.w (A2)+,D4                                          ; anzahl bytes zu schreiben
00042538 <AmiBlitz3.ab2@25823>   BEQ.b write_xtrafile__done
0004253A <AmiBlitz3.ab2@25826>    MOVE.l (A2)+,D2
0004253E <AmiBlitz3.ab2@25827>    BEQ.b write_xtrafile__loop
00042540 <AmiBlitz3.ab2@25829>    MOVE.l D4,D3
00042542 <AmiBlitz3.ab2@25830>    MOVE.l D7,D1                                            ; schreiben der daten in ptr_xtradata
00042546 <AmiBlitz3.ab2@25831>    JSR _Write(A6)                                          ; d1: file, d2: buffer, d3:length
0004254A <AmiBlitz3.ab2@25832> BRA.b write_xtrafile__loop2
0004254C <AmiBlitz3.ab2@25835>   MOVE.l D7,D1
00042552 <AmiBlitz3.ab2@25836>   MOVE.l #str_cliarguments,D2
00042558 <AmiBlitz3.ab2@25837>   MOVE.l #116,D3
0004255C <AmiBlitz3.ab2@25838>   JSR _Write(A6)                                           ; hier werden 116 bytes an cli_arguments geschrieben !!
0004255E <AmiBlitz3.ab2@25840>   MOVE.l D7,D1
00042564 <AmiBlitz3.ab2@25841>   MOVE.l #stacksize,D2
0004256A <AmiBlitz3.ab2@25842>   MOVE.l #4,D3
0004256E <AmiBlitz3.ab2@25843>   JSR _Write(A6)
00042570 <AmiBlitz3.ab2@25845>   MOVE.l D7,D1
00042576 <AmiBlitz3.ab2@25846>   MOVE.l #versioninformation,D2
0004257C <AmiBlitz3.ab2@25847>   MOVE.l #4,D3
00042580 <AmiBlitz3.ab2@25848>   JSR _Write(A6)
00042582 <AmiBlitz3.ab2@25850>   MOVE.l D7,D1
00042588 <AmiBlitz3.ab2@25851>   MOVE.l #number_of_builds,D2
0004258E <AmiBlitz3.ab2@25852>   MOVE.l #4,D3
00042592 <AmiBlitz3.ab2@25853>   JSR _Write(A6)
00042598 <AmiBlitz3.ab2@25859>   LEA libpointer,A2
0004259A <AmiBlitz3.ab2@25862>     MOVE.l (A2),D0
0004259E <AmiBlitz3.ab2@25863>     BEQ.w write_xtrafile__done2
000425A0 <AmiBlitz3.ab2@25864>     MOVEA.l D0,A2
000425A4 <AmiBlitz3.ab2@25865>     MOVE.l $12(A2),D4
000425A8 <AmiBlitz3.ab2@25866>     TST.w -$2(A2,D4.L)
000425AC <AmiBlitz3.ab2@25867>     BEQ.w write_xtrafile__loop3
000425B0 <AmiBlitz3.ab2@25869>     LEA $4(A2),A0
000425B2 <AmiBlitz3.ab2@25870>     MOVE.l A0,D2
000425B4 <AmiBlitz3.ab2@25871>     MOVEQ.l #$02,D3
000425B6 <AmiBlitz3.ab2@25872>     MOVE.l D7,D1                                           ; schreiben der Libnum mit 2 bytes
000425BA <AmiBlitz3.ab2@25873>     JSR _Write(A6)                                         ; d1: file, d2: buffer, d3:length
000425BE <AmiBlitz3.ab2@25875>     LEA -$4(A2,D4.L),A0
000425C0 <AmiBlitz3.ab2@25876>     MOVE.l A0,D2
000425C2 <AmiBlitz3.ab2@25877>     MOVEQ.l #$02,D3
000425C4 <AmiBlitz3.ab2@25878>     MOVE.l D7,D1                                           ; schreiben der Max Objects mit 2 bytes
000425C8 <AmiBlitz3.ab2@25879>     JSR _Write(A6)                                         ; d1: file, d2: buffer, d3:length
000425CC <AmiBlitz3.ab2@25880> BRA.w write_xtrafile__loop3
000425D2 <AmiBlitz3.ab2@25885>   LEA XTRAEndPadBytes,A2 ; get the start address off the 4 fill/pad/termination bytes
000425D4 <AmiBlitz3.ab2@25886>   MOVE.l A2,D2           ; move the address to d2
000425DA <AmiBlitz3.ab2@25887>   MOVE.l #4,D3           ; we only need 4 bytes to save
000425DC <AmiBlitz3.ab2@25888>   MOVE.l D7,D1           ; we set the file handle
000425E0 <AmiBlitz3.ab2@25889>   JSR _Write(A6)         ; and we write it.
000425E2 <AmiBlitz3.ab2@25891> RTS
000425E8 <AmiBlitz3.ab2@25895>   LEA optssave,A0
000425EE <AmiBlitz3.ab2@25896>   LEA ptr_xtradata,A1
000425F0 <AmiBlitz3.ab2@25899>   MOVE.w (A1)+,D0                                          ;length of data move
000425F4 <AmiBlitz3.ab2@25900>   BEQ.b menu_compileroptions__done
000425F6 <AmiBlitz3.ab2@25901>   SUBQ.w #1,D0
000425F8 <AmiBlitz3.ab2@25904>     MOVE.l (A1)+,D1
000425FC <AmiBlitz3.ab2@25905>     BEQ.b menu_compileroptions__loop
000425FE <AmiBlitz3.ab2@25906>     MOVEA.l D1,A2
00042600 <AmiBlitz3.ab2@25907>     MOVE.w D0,D1
00042602 <AmiBlitz3.ab2@25910>       MOVE.b (A2)+,(A0)+
00042606 <AmiBlitz3.ab2@25911>   DBF D1,menu_compileroptions__loop3
0004260A <AmiBlitz3.ab2@25913> BRA.w menu_compileroptions__loop2
00042610 <AmiBlitz3.ab2@25917>   LEA bufferlist,A1
00042612 <AmiBlitz3.ab2@25920>     MOVE.l (A1)+,D2
00042616 <AmiBlitz3.ab2@25921>     BEQ.b menu4c
00042618 <AmiBlitz3.ab2@25923>     MOVEA.l D2,A0
0004261A <AmiBlitz3.ab2@25924>     MOVE.l (A0),D2
0004261C <AmiBlitz3.ab2@25925>     ADDQ.w #8,A0
00042622 <AmiBlitz3.ab2@25926>     JSR makelong
00042626 <AmiBlitz3.ab2@25927> BRA.b menu_compileroptions__loop4
0004262C <AmiBlitz3.ab2@25930>   CLR.w state_of_residents                                 ;resident change
00042632 <AmiBlitz3.ab2@25931>   CLR.w comsettings_message                                ;alloc change
00042638 <AmiBlitz3.ab2@25932>   CLR.w maxobject_pos
0004263E <AmiBlitz3.ab2@25935>     Gosub newoptionsfunc
00042642 <AmiBlitz3.ab2@25947>     CMP.w #-$1,D7
00042646 <AmiBlitz3.ab2@25948>      BNE.w settings_events
0004264A <AmiBlitz3.ab2@25949>     CMP.w #$5,D6                                           ; vorher $6
0004264E <AmiBlitz3.ab2@25950>      BHI.w menu4c__notmax2                                      ; 6, 9, F, 10, 11, 14
00042654 <AmiBlitz3.ab2@25951>     MOVE.w D6,comsettings_message
00042658 <AmiBlitz3.ab2@25952> BRA.w settings_events
0004265C <AmiBlitz3.ab2@25955>   CMP.w #$A,D6
00042660 <AmiBlitz3.ab2@25956>   BNE.w JL_0_10084                                         ; JL_0_1003C
00042668 <AmiBlitz3.ab2@25958>   BTST #$7,use_debugger                                    ;runtime ERROR
0004266C <AmiBlitz3.ab2@25959>   BNE 'debugon
00042672 <AmiBlitz3.ab2@25960>   CLR.w debugmode
00042676 <AmiBlitz3.ab2@25961> BRA.b 'debugoff
0004267C <AmiBlitz3.ab2@25964>   SNE debugmode
0004267E <AmiBlitz3.ab2@25967>   MOVE.l a0,-(a7)
000426B6 <AmiBlitz3.ab2@25970>   !ComData_SetB{comByte_DebugMode,debugmode}
000426B8 <AmiBlitz3.ab2@25971>   MOVE.l (a7)+,a0
000426BC <AmiBlitz3.ab2@25973> BRA.w settings_events
000426C0 <AmiBlitz3.ab2@25977>   CMP.w #$11,D6
000426C4 <AmiBlitz3.ab2@25978>    BCS.w settings_events
000426C8 <AmiBlitz3.ab2@25979>   CMP.w #$14,D6
000426CC <AmiBlitz3.ab2@25980>    BHI.w settings_events
000426D0 <AmiBlitz3.ab2@25981>   BEQ.w menu4canc
000426D2 <AmiBlitz3.ab2@25984>   MOVE.w D6,-(A7)
000426D8 <AmiBlitz3.ab2@25985>   MOVE.w comsettings_message,D0
000426DC <AmiBlitz3.ab2@25986>    BEQ.w menu4c__skip
000426E2 <AmiBlitz3.ab2@25987>   JSR init_buffers
000426E8 <AmiBlitz3.ab2@25990>   MOVE.w state_of_residents,D0
000426EC <AmiBlitz3.ab2@25991>    BEQ.w menu4c__zdone
000426F2 <AmiBlitz3.ab2@25992>   JSR reloadresident
000426F4 <AmiBlitz3.ab2@25995>   MOVE.w (A7)+,D6
000426F8 <AmiBlitz3.ab2@25997>   CMP.w #$12,D6
000426FC <AmiBlitz3.ab2@25998>    BEQ.w JUMP_menu_compile_run
00042700 <AmiBlitz3.ab2@25999>   CMP.w #$13,D6
00042704 <AmiBlitz3.ab2@26000>    BEQ.w JUMP_menu_createexecutable
00042706 <AmiBlitz3.ab2@26001> RTS
0004270C <AmiBlitz3.ab2@26004> JMP menu_compile_run
00042712 <AmiBlitz3.ab2@26007> JMP menu_createexecutable
00042718 <AmiBlitz3.ab2@26011>   LEA optssave,A0
0004271E <AmiBlitz3.ab2@26012>   LEA ptr_xtradata,A1
00042720 <AmiBlitz3.ab2@26015>   MOVE.w (A1)+,D0
00042724 <AmiBlitz3.ab2@26016>   BEQ.b menu4canc__done
00042726 <AmiBlitz3.ab2@26017>   SUBQ.w #1,D0
00042728 <AmiBlitz3.ab2@26020>     MOVE.l (A1)+,D1
0004272C <AmiBlitz3.ab2@26021>     BEQ.b menu4canc__loop
0004272E <AmiBlitz3.ab2@26022>     MOVEA.l D1,A2
00042730 <AmiBlitz3.ab2@26023>     MOVE.w D0,D1
00042732 <AmiBlitz3.ab2@26026>       MOVE.b (A0)+,(A2)+
00042736 <AmiBlitz3.ab2@26027>   DBF D1,menu4canc__loop3
0004273A <AmiBlitz3.ab2@26029> BRA.b menu4canc__loop2
0004273C <AmiBlitz3.ab2@26032> RTS
0004273E <AmiBlitz3.ab2@26036>   MOVE.l d0,a1
00042744 <AmiBlitz3.ab2@26037>   MOVEA.l libpointer,A2
00042748 <AmiBlitz3.ab2@26040>     MOVE.l $12(A2),D0
0004274C <AmiBlitz3.ab2@26041>     TST.w -$2(A2,D0.L)
00042750 <AmiBlitz3.ab2@26042>      BEQ.w JL_0_102AAa
00042752 <AmiBlitz3.ab2@26043>     SUBQ.w #1,D1
00042756 <AmiBlitz3.ab2@26044>      BPL.w JL_0_102AAa
0004275A <AmiBlitz3.ab2@26045>     MOVEA.l -$1A(A2,D0.L),A3
0004275C <AmiBlitz3.ab2@26046>     ADDA.l A2,A3
0004275E <AmiBlitz3.ab2@26049>       MOVE.b (A3)+,(A1)+
00042762 <AmiBlitz3.ab2@26050>     BNE.w JL_0_10294a
00042764 <AmiBlitz3.ab2@26052>     CLR.b -(A1)
00042768 <AmiBlitz3.ab2@26053>     MOVE.w -$4(A2,D0.L),D0
0004276E <AmiBlitz3.ab2@26054>     AND.l #$ffff,d0
00042770 <AmiBlitz3.ab2@26055> RTS
00042772 <AmiBlitz3.ab2@26058>     MOVEA.l (A2),A2
00042776 <AmiBlitz3.ab2@26059> BRA.w JL_0_1027Ca
00042786 <AmiBlitz3.ab2@26064> str_maxobjects_name:   Dc.b "              ",0 : Even
00042796 <AmiBlitz3.ab2@26065> str_maxobjects_name2:  Dc.b "              ",0 : Even
00042798 <AmiBlitz3.ab2@26066> objectbuffer:          Ds.w 1
0004279B <AmiBlitz3.ab2@26067>                        Dc.b "@",0,0
0004279E <AmiBlitz3.ab2@26068>                        Ds.b 3
000427A5 <AmiBlitz3.ab2@26069> str_objectbuffer:      Dc.b "16384",0,0
000427AA <AmiBlitz3.ab2@26070>                        Ds.b 5
000427AC <AmiBlitz3.ab2@26071> libsbuffer:            Ds.w 1
000427B0 <AmiBlitz3.ab2@26072>                        Dc.b $80,$00,$00,$00
000427B2 <AmiBlitz3.ab2@26073>                        Ds.w 1
000427B9 <AmiBlitz3.ab2@26074> str_libsbuffer:        Dc.b "16384",0,0
000427BE <AmiBlitz3.ab2@26075>                        Ds.b 5
000427C0 <AmiBlitz3.ab2@26076> systembuffer:          Ds.w 1                              ; systen buffer
000427C4 <AmiBlitz3.ab2@26077>                        Dc.b $10,$00,$00,$00
000427C6 <AmiBlitz3.ab2@26078>                        Ds.w 1
000427CC <AmiBlitz3.ab2@26079> str_systembuffer:      Dc.b "4096",0,0
000427D2 <AmiBlitz3.ab2@26080>                        Ds.w 3
000427D4 <AmiBlitz3.ab2@26081> databuffer:            Ds.w 1                              ; data buffer
000427D8 <AmiBlitz3.ab2@26082>                        Dc.b $10,$00,$00,$00
000427DA <AmiBlitz3.ab2@26083>                        Ds.w 1
000427E0 <AmiBlitz3.ab2@26084> str_databuffer:        Dc.b "4096",0,0
000427E6 <AmiBlitz3.ab2@26085>                        Ds.w 3
000427E8 <AmiBlitz3.ab2@26086> macrobuffer_size:      Ds.w 1                              ; macro buffer
000427EB <AmiBlitz3.ab2@26087>                        Dc.b " ",0,0
000427EE <AmiBlitz3.ab2@26088>                        Ds.b 3
000427F4 <AmiBlitz3.ab2@26089> str_macrobuffer:       Dc.b "8192",0,0
000427FA <AmiBlitz3.ab2@26090>                        Ds.w 3
000427FC <AmiBlitz3.ab2@26091> stringbuffer:          Ds.w 1                              ; string buffer
000427FF <AmiBlitz3.ab2@26092>                        Dc.b "(",0,0
00042802 <AmiBlitz3.ab2@26093>                        Ds.b 3
00042809 <AmiBlitz3.ab2@26094> str_stringbuffer:      Dc.b "10240",0,0                    ; stringbuff
0004280E <AmiBlitz3.ab2@26095>                        Ds.b 5
00042812 <AmiBlitz3.ab2@26096> maxobjects_value:      Dc.b $00,$64,$00,$00
00042814 <AmiBlitz3.ab2@26097>                        Ds.w 1
00042819 <AmiBlitz3.ab2@26098> str_maxobjects_value:  Dc.b "100",0,0
00042820 <AmiBlitz3.ab2@26099>                        Ds.b 7
00042824 <AmiBlitz3.ab2@26100> maxobjects_value2:     Dc.b $00,$14,$00,$00
00042828 <AmiBlitz3.ab2@26102> str_maxobjects_value2: Dc.b "20",0,0
00042830 <AmiBlitz3.ab2@26103>                        Ds.l 2
00042831 <AmiBlitz3.ab2@26105> set_create_iconfile:   Dc.b $00
00042834 <AmiBlitz3.ab2@26106> create_iconfile:       Dc.b $80,$01,$01                    ;create icon
00042836 <AmiBlitz3.ab2@26107>                        Dc.b $00,$01
00042837 <AmiBlitz3.ab2@26109> set_use_debugger:      Dc.b $00                            ; Flags.w
0004283A <AmiBlitz3.ab2@26110> use_debugger:          Dc.b $80,$01,$01                    ; Activation.w
0004283C <AmiBlitz3.ab2@26111>                        Dc.b $00,$01                        ; GadgetType.w
00042840 <AmiBlitz3.ab2@26112> AL_0_11010:            Dc.b $00,$80,$01,$01                ; flags, activation
00042844 <AmiBlitz3.ab2@26113> AL_0_1103C:            Dc.b $00,$80,$01,$01                ; flags, activation
00042848 <AmiBlitz3.ab2@26114> AL_0_11068:            Dc.b $00,$80,$01,$01                ; flags, activation
0004284A <AmiBlitz3.ab2@26115> AL_0_11094:            Ds.w 1
0004284B <AmiBlitz3.ab2@26117> set_make_smallestcode: Ds.b 1
0004284E <AmiBlitz3.ab2@26118> make_smallestcode:     Dc.b $00,$01,$01                    ;make smallest
00042850 <AmiBlitz3.ab2@26119>                        Dc.b $00,$01
00042851 <AmiBlitz3.ab2@26120> set_link_debuginfo:    Ds.b 1
00042854 <AmiBlitz3.ab2@26121> link_debuginfo:        Dc.b $00,$01,$01                    ;create debuginfo
00042856 <AmiBlitz3.ab2@26122>                        Dc.b $00,$01
0004289A <AmiBlitz3.ab2@26127>   Ds.l 17          ;resident files STEP $44 piece 8
00042996 <AmiBlitz3.ab2@26129>   Ds.l 63
00042A32 <AmiBlitz3.ab2@26130>   Ds.l 39
00042A76 <AmiBlitz3.ab2@26132>   Ds.l 17
00042AF6 <AmiBlitz3.ab2@26135> str_calcexpression:    Ds.l 32
00042AFA <AmiBlitz3.ab2@26136> AL_0_11A20:            Ds.l 1
00042B04 <AmiBlitz3.ab2@26141>   MOVE.l destbufferend,AL_0_11A20
00042B0A <AmiBlitz3.ab2@26142>   MOVE.l A7,errstack
00042B14 <AmiBlitz3.ab2@26143>   MOVE.l #AJL_0_11C00,errcont
00042B1A <AmiBlitz3.ab2@26144>   CLR.b str_calcexpression
00042B44 <AmiBlitz3.ab2@26145>   !basic
00042B6C <AmiBlitz3.ab2@26146>   If Peek.l(Addr Window(3))=0
00042B88 <AmiBlitz3.ab2@26147>     FindScreen 0
00042BE6 <AmiBlitz3.ab2@26148>     WZWindow 3,?wzgui,128,-2,-2,-2,-2,3
00042BF6 <AmiBlitz3.ab2@26149>     Poke.w ?button_bin_flags, $00
00042C06 <AmiBlitz3.ab2@26150>     Poke.w ?button_dec_flags, $80
00042C28 <AmiBlitz3.ab2@26152>     activategadget{"CALC_EXPRESSION"}
00042C2E <AmiBlitz3.ab2@26153>     calc_exit.l = False
00042C38 <AmiBlitz3.ab2@26155>       ev.l = WaitEvent
00042C3E <AmiBlitz3.ab2@26156>       Select ev
00042C4C <AmiBlitz3.ab2@26158>         Case #IDCMP_IDCMPUPDATE
00042C74 <AmiBlitz3.ab2@26159>           Select WZGadName
00042C98 <AmiBlitz3.ab2@26161>             Case "CALC_EXPRESSION"
00042CE6 <AmiBlitz3.ab2@26162>               calc_expression$ = WZGetString("CALC_EXPRESSION")
00042D1E <AmiBlitz3.ab2@26163>               Poke$ ?str_calcexpression,calc_expression$
00042D48 <AmiBlitz3.ab2@26165>             Case "BIN"
00042D58 <AmiBlitz3.ab2@26166>               Poke.w ?button_bin_flags, $80
00042D68 <AmiBlitz3.ab2@26167>               Poke.w ?button_dec_flags, $00
00042D92 <AmiBlitz3.ab2@26169>             Case "HEX"
00042DA2 <AmiBlitz3.ab2@26170>               Poke.w ?button_bin_flags, $00
00042DB2 <AmiBlitz3.ab2@26171>               Poke.w ?button_dec_flags, $00
00042DDC <AmiBlitz3.ab2@26173>             Case "DEC"
00042DEC <AmiBlitz3.ab2@26174>               Poke.w ?button_bin_flags, $00
00042DFC <AmiBlitz3.ab2@26175>               Poke.w ?button_dec_flags, $80
00042E26 <AmiBlitz3.ab2@26177>             Case "CALC_CLOSE"
00042E2C <AmiBlitz3.ab2@26178>               calc_exit = True
00042E3A <AmiBlitz3.ab2@26180>           End Select
00042E72 <AmiBlitz3.ab2@26181>           If calc_expression$<>""
00042E90 <AmiBlitz3.ab2@26182>             !asm
00042E94 <AmiBlitz3.ab2@26183>             BSR examine_expression
00042EBE <AmiBlitz3.ab2@26184>             !basic
00042EE8 <AmiBlitz3.ab2@26185>             calc_expression$ = Peek$(?str_calcexpression)
00042F22 <AmiBlitz3.ab2@26186>             WZPrint "CALC_EXPRESSION",&calc_expression$
00042F36 <AmiBlitz3.ab2@26189>         Case #IDCMP_CLOSEWINDOW
00042F3C <AmiBlitz3.ab2@26190>           calc_exit = True
00042F3E <AmiBlitz3.ab2@26192>       End Select
00042F60 <AmiBlitz3.ab2@26193>       activategadget{"CALC_EXPRESSION"}
00042F6A <AmiBlitz3.ab2@26194>     Until calc_exit
00042F7E <AmiBlitz3.ab2@26195>     WZCloseWindow 3
00042F9C <AmiBlitz3.ab2@26196>     !asm
00042F9E <AmiBlitz3.ab2@26197>   RTS
00042FBC <AmiBlitz3.ab2@26199>   !asm
00042FC2 <AmiBlitz3.ab2@26203>   LEA str_calcexpression,A0
00042FC8 <AmiBlitz3.ab2@26211>   JSR setcvars
00042FCE <AmiBlitz3.ab2@26212>   JSR setsvars
00042FD4 <AmiBlitz3.ab2@26213>   CLR.w connest
00042FDA <AmiBlitz3.ab2@26214>   LEA str_calcexpression,A5
00042FE0 <AmiBlitz3.ab2@26215>   JSR AJL_0_BF6E
00042FE6 <AmiBlitz3.ab2@26216>   LEA str_calcexpression,A0
00042FE8 <AmiBlitz3.ab2@26217>   TST.l D3
00042FEC <AmiBlitz3.ab2@26218>    BPL.w JL_0_11AE8
00042FF0 <AmiBlitz3.ab2@26219>   MOVE.b #$2D,(A0)+
00042FF2 <AmiBlitz3.ab2@26220>   NEG.l D3
00042FFA <AmiBlitz3.ab2@26223>   CMPI.w #$80,button_dec_flags
00042FFE <AmiBlitz3.ab2@26224>    BEQ.w JL_0_11B74
00043000 <AmiBlitz3.ab2@26225>   MOVEQ.l #$00,D1
00043008 <AmiBlitz3.ab2@26226>   CMPI.w #$80,button_bin_flags
0004300C <AmiBlitz3.ab2@26227>    BNE.w JL_0_11B36
0004300E <AmiBlitz3.ab2@26228>   MOVEQ.l #$1F,D0
00043012 <AmiBlitz3.ab2@26229>   MOVE.b #$25,(A0)+
00043014 <AmiBlitz3.ab2@26232>       LSL.l #1,D3
00043018 <AmiBlitz3.ab2@26233>        BCC.w JL_0_11B18
0004301C <AmiBlitz3.ab2@26234>       MOVE.b #"1",(A0)+
0004301E <AmiBlitz3.ab2@26235>       MOVEQ.l #-$01,D1
00043022 <AmiBlitz3.ab2@26236>   BRA.w JL_0_11B22
00043024 <AmiBlitz3.ab2@26239>       TST.w D1
00043028 <AmiBlitz3.ab2@26240>       BEQ.w JL_0_11B22
0004302C <AmiBlitz3.ab2@26241>       MOVE.b #"0",(A0)+
00043030 <AmiBlitz3.ab2@26244>  DBF D0,JL_0_11B08
00043032 <AmiBlitz3.ab2@26247>   TST.w D1
00043036 <AmiBlitz3.ab2@26248>   BNE.w JL_0_11B30
0004303A <AmiBlitz3.ab2@26249>   MOVE.b #"0",(A0)+
0004303C <AmiBlitz3.ab2@26252>   CLR.b (A0)
00043040 <AmiBlitz3.ab2@26253> BRA.w JL_0_11B7C
00043042 <AmiBlitz3.ab2@26256>   MOVEQ.l #$07,D0
00043046 <AmiBlitz3.ab2@26257>   MOVE.b #$24,(A0)+
00043048 <AmiBlitz3.ab2@26260>     MOVE.l D3,D2
0004304A <AmiBlitz3.ab2@26261>     SWAP D2
0004304C <AmiBlitz3.ab2@26262>     LSR.w #8,D2
0004304E <AmiBlitz3.ab2@26263>     LSR.w #4,D2
00043052 <AmiBlitz3.ab2@26264>     ADDI.w #$30,D2
00043056 <AmiBlitz3.ab2@26265>     CMP.w #$3A,D2
0004305A <AmiBlitz3.ab2@26266>      BCS.w JL_0_11B52
0004305C <AmiBlitz3.ab2@26267>     ADDQ.w #7,D2
00043060 <AmiBlitz3.ab2@26270>     CMP.w #$30,D2
00043064 <AmiBlitz3.ab2@26271>     BEQ.w JL_0_11B62
00043066 <AmiBlitz3.ab2@26272>     MOVE.b D2,(A0)+
00043068 <AmiBlitz3.ab2@26273>     MOVEQ.l #-$01,D1
0004306C <AmiBlitz3.ab2@26274>   BRA.w JL_0_11B6A
0004306E <AmiBlitz3.ab2@26277>     TST.w D1
00043072 <AmiBlitz3.ab2@26278>      BEQ.w JL_0_11B6A
00043074 <AmiBlitz3.ab2@26279>     MOVE.b D2,(A0)+
00043076 <AmiBlitz3.ab2@26282>     LSL.l #4,D3
0004307A <AmiBlitz3.ab2@26283>  DBF D0,JL_0_11B3C
0004307E <AmiBlitz3.ab2@26285> BRA.w JL_0_11B26
00043080 <AmiBlitz3.ab2@26288>   MOVE.l D3,D2
00043086 <AmiBlitz3.ab2@26289>   JSR makelong
00043088 <AmiBlitz3.ab2@26292> RTS
00043092 <AmiBlitz3.ab2@26296>   MOVE.l AL_0_11A20,destbufferend
00043098 <AmiBlitz3.ab2@26297>   CLR.b str_calcexpression
0004309C <AmiBlitz3.ab2@26298> BRA.w JL_0_11B7C
0004319B <AmiBlitz3.ab2@26302> str_cliarguments: Ds.b 255   ; a command line can acutally be 255 characters long
0004319C <AmiBlitz3.ab2@26304> Even
000431DA <AmiBlitz3.ab2@26309>   !ComData_GetL{comFunc_OpenCompilerWindow,A1}
000431E0 <AmiBlitz3.ab2@26310>   MOVE.l #1001,D0
000431E6 <AmiBlitz3.ab2@26311>   MOVE.l #str_cliarguments,D1
000431E8 <AmiBlitz3.ab2@26312>   JSR (A1)
000431EA <AmiBlitz3.ab2@26313> RTS
000431EC <AmiBlitz3.ab2@26318>     MOVE.b (a5)+,d0
000431F0 <AmiBlitz3.ab2@26319>     BEQ 'l2
000431F4 <AmiBlitz3.ab2@26320>     CMP.b #$80,d0
000431F8 <AmiBlitz3.ab2@26321>     BNE 'l1
000431FA <AmiBlitz3.ab2@26322>     MOVE.b (a5)+,d0
000431FE <AmiBlitz3.ab2@26323>     BEQ 'l2
00043202 <AmiBlitz3.ab2@26324>     CMP.b #$02,d0
00043206 <AmiBlitz3.ab2@26325>   BNE 'l1
0004320A <AmiBlitz3.ab2@26328>     CMP.b #$20,(a5)+
0004320E <AmiBlitz3.ab2@26329>   BEQ 'l3
00043210 <AmiBlitz3.ab2@26330>   SUBQ.l #1,a5
00043212 <AmiBlitz3.ab2@26331>   TST.b (a5)
00043216 <AmiBlitz3.ab2@26332>   BEQ 'l2
0004321A <AmiBlitz3.ab2@26333>   CMP.w #$8008,(a5)
0004321E <AmiBlitz3.ab2@26334>   BEQ 'l4
00043222 <AmiBlitz3.ab2@26335>   CMP.w #$8009,(a5)
00043226 <AmiBlitz3.ab2@26336>   BEQ 'l4
0004322A <AmiBlitz3.ab2@26337> BRA 'l1
0004322C <AmiBlitz3.ab2@26340>   ADDQ.l #2,a5
00043232 <AmiBlitz3.ab2@26341>   JSR skiprest
00043234 <AmiBlitz3.ab2@26342> RTS
0004323A <AmiBlitz3.ab2@26345>   JSR nextline
0004323E <AmiBlitz3.ab2@26346>   BNE 'l1
00043240 <AmiBlitz3.ab2@26347> RTS
0004326A <AmiBlitz3.ab2@26351>   !basic
00043274 <AmiBlitz3.ab2@26352>   DateFormat 1
00043282 <AmiBlitz3.ab2@26353>   i.l=SystemDate
000432A8 <AmiBlitz3.ab2@26354>   a$=Date$ (i)
00043326 <AmiBlitz3.ab2@26355>   a$=Replace$(a$,"/",".")
0004332C <AmiBlitz3.ab2@26356>   GetD0 &a$
0004332E <AmiBlitz3.ab2@26357>   MOVEQ #8,d2
00043330 <AmiBlitz3.ab2@26358>   MOVE.l d0,a0
00043332 <AmiBlitz3.ab2@26361>     MOVE.b (a0)+,d1
00043338 <AmiBlitz3.ab2@26362>     JSR pokedata1b
0004333C <AmiBlitz3.ab2@26363>  DBF d2,'l1
0004333E <AmiBlitz3.ab2@26365>   MOVEQ #0,d0
00043340 <AmiBlitz3.ab2@26366>   MOVE.b (a0)+,d0
0004335E <AmiBlitz3.ab2@26367>   !asm
00043364 <AmiBlitz3.ab2@26368>   ADD.l #9,d2
0004336A <AmiBlitz3.ab2@26369>   ADD.l #9,a5
0004336C <AmiBlitz3.ab2@26370> RTS
00043396 <AmiBlitz3.ab2@26374>   !basic
000433A0 <AmiBlitz3.ab2@26375>   DateFormat 0
000433AE <AmiBlitz3.ab2@26376>   i.l=SystemDate
000433D4 <AmiBlitz3.ab2@26377>   a$=Date$ (i)
00043452 <AmiBlitz3.ab2@26378>   a$=Replace$(a$,"/",".")
00043458 <AmiBlitz3.ab2@26379>   GetD0 &a$
0004345A <AmiBlitz3.ab2@26380>   MOVEQ #8,d2
0004345C <AmiBlitz3.ab2@26381>   MOVE.l d0,a0
0004345E <AmiBlitz3.ab2@26384>     MOVE.b (a0)+,d1
00043464 <AmiBlitz3.ab2@26385>     JSR pokedata1b
00043468 <AmiBlitz3.ab2@26386>  DBF d2,'l1
0004346A <AmiBlitz3.ab2@26388>   MOVEQ #0,d0
0004346C <AmiBlitz3.ab2@26389>   MOVE.b (a0)+,d0
0004348A <AmiBlitz3.ab2@26390>   !asm
00043490 <AmiBlitz3.ab2@26391>   ADD.l #9,d2
00043496 <AmiBlitz3.ab2@26392>   ADD.l #13,a5
00043498 <AmiBlitz3.ab2@26393> RTS
000434C2 <AmiBlitz3.ab2@26397>   !basic
000434CC <AmiBlitz3.ab2@26398>   DateFormat 1
000434DA <AmiBlitz3.ab2@26399>   i.l = SystemDate
00043500 <AmiBlitz3.ab2@26400>   a$ = Date$ (i)
0004357E <AmiBlitz3.ab2@26401>   a$ = Replace$(a$,"/",".")
00043584 <AmiBlitz3.ab2@26402>   GetD0 &a$
00043586 <AmiBlitz3.ab2@26403>   MOVEQ #8,d2
00043588 <AmiBlitz3.ab2@26404>   MOVE.l d0,a0
0004358A <AmiBlitz3.ab2@26407>     MOVE.b (a0)+,d1
00043590 <AmiBlitz3.ab2@26408>     JSR writebyte
00043594 <AmiBlitz3.ab2@26409>  DBF d2,'l1
00043596 <AmiBlitz3.ab2@26411>   MOVEQ #0,d0
00043598 <AmiBlitz3.ab2@26412>   MOVE.b (a0)+,d0
000435B6 <AmiBlitz3.ab2@26413>   !asm
000435BC <AmiBlitz3.ab2@26414>   ADD.l #9,a5
000435BE <AmiBlitz3.ab2@26415> RTS
000435E8 <AmiBlitz3.ab2@26419>   !basic
000435F2 <AmiBlitz3.ab2@26420>   DateFormat 0
00043600 <AmiBlitz3.ab2@26421>   i.l=SystemDate
00043626 <AmiBlitz3.ab2@26422>   a$=Date$ (i)
000436A4 <AmiBlitz3.ab2@26423>   a$=Replace$(a$,"/",".")
000436AA <AmiBlitz3.ab2@26424>   GetD0 &a$
000436AC <AmiBlitz3.ab2@26425>   MOVEQ #8,d2
000436AE <AmiBlitz3.ab2@26426>   MOVE.l d0,a0
000436B0 <AmiBlitz3.ab2@26429>     MOVE.b (a0)+,d1
000436B6 <AmiBlitz3.ab2@26430>     JSR writebyte
000436BA <AmiBlitz3.ab2@26431>  DBF d2,'l1
000436BC <AmiBlitz3.ab2@26433>   MOVEQ #0,d0
000436BE <AmiBlitz3.ab2@26434>   MOVE.b (a0)+,d0
000436DC <AmiBlitz3.ab2@26435>   !asm
000436E2 <AmiBlitz3.ab2@26436>   ADD.l #13,a5
000436E4 <AmiBlitz3.ab2@26437> RTS
000436E6 <AmiBlitz3.ab2@26441>   MOVE.l d2,-(a7)                                          ; D2 -> stack
000436E8 <AmiBlitz3.ab2@26442>   MOVE.l a5,d0
00043712 <AmiBlitz3.ab2@26443>   !basic
00043716 <AmiBlitz3.ab2@26444>   _myD0.l = PutD0
00043720 <AmiBlitz3.ab2@26445>   If _myD0
00043766 <AmiBlitz3.ab2@26446>     verstring$ = Left$(Peek.s(_myD0),9+3)
000437B8 <AmiBlitz3.ab2@26447>     verstring$ = UnRight$(verstring$,3)                      ; Compilerkonstantenbeginn \__ entfernen
000437BE <AmiBlitz3.ab2@26448>   Else
000437EC <AmiBlitz3.ab2@26449>     error{"INTERNAL: Invalid pointer in version_string!"}
000437FC <AmiBlitz3.ab2@26454>   actual_version.l = Peek.l(?versioninformation)
0004380C <AmiBlitz3.ab2@26455>   actual_build.l   = Peek.l(?number_of_builds)
00043830 <AmiBlitz3.ab2@26457>   Format "00"
00043866 <AmiBlitz3.ab2@26458>   Select verstring$
0004388A <AmiBlitz3.ab2@26460>     Case "VER_MAJOR"
000438C6 <AmiBlitz3.ab2@26461>      put_versionstr$ = Str$(actual_version LSR 24)
000438F0 <AmiBlitz3.ab2@26463>     Case "VER_MINOR"
00043934 <AmiBlitz3.ab2@26464>      put_versionstr$ = Str$((actual_version LSL 8) LSR 24)
0004395E <AmiBlitz3.ab2@26466>     Case "VER_PATCH"
000439A2 <AmiBlitz3.ab2@26467>      put_versionstr$ = Str$((actual_version LSL 16) LSR 24 )
000439CC <AmiBlitz3.ab2@26469>     Case "VER_BUILD"
000439F0 <AmiBlitz3.ab2@26470>      Format ""
00043A24 <AmiBlitz3.ab2@26471>      put_versionstr$ = Str$(actual_build)
00043A2A <AmiBlitz3.ab2@26473>     Default
00043A52 <AmiBlitz3.ab2@26474>      put_versionstr$ = "{unknown compilerconstant}"
00043A60 <AmiBlitz3.ab2@26477>   End Select
00043A84 <AmiBlitz3.ab2@26478>   Format ""
00043A94 <AmiBlitz3.ab2@26480>   GetD0 FLen(put_versionstr$)                              ; laenge zielstring -> Stack
00043A96 <AmiBlitz3.ab2@26481>   MOVE.l d0,d2
00043A98 <AmiBlitz3.ab2@26482>   MOVE.l d2,-(a7)
00043A9C <AmiBlitz3.ab2@26483>   SUB #1,d2
00043AA2 <AmiBlitz3.ab2@26485>   GetD0 &put_versionstr$                                   ; kopieren des neuen Strings in den Zielstring
00043AA4 <AmiBlitz3.ab2@26486>   MOVE.l d0,a0
00043AA6 <AmiBlitz3.ab2@26489>     MOVE.b (a0)+,d1
00043AAC <AmiBlitz3.ab2@26490>     JSR pokedata1b
00043AB0 <AmiBlitz3.ab2@26491>  DBF d2,'l1
00043AB2 <AmiBlitz3.ab2@26493>   MOVEQ #0,d0
00043AD0 <AmiBlitz3.ab2@26494>   !asm
00043AD2 <AmiBlitz3.ab2@26495>   MOVE.l (a7)+,d0                                          ; laenge Zielstring <- Stack
00043AD4 <AmiBlitz3.ab2@26496>   MOVE.l (a7)+,d2                                          ; d2 <-Stack
00043AD6 <AmiBlitz3.ab2@26497>   ADD.l d0,d2
00043ADC <AmiBlitz3.ab2@26498>   ADD.l #12,a5                                             ; string_ptr um konstante weitersetzen
00043ADE <AmiBlitz3.ab2@26499>   MOVEQ #0,d0
00043AE0 <AmiBlitz3.ab2@26500> RTS
00043AE2 <AmiBlitz3.ab2@26504>   MOVE.l a5,d0
00043B0C <AmiBlitz3.ab2@26505>   !basic
00043B10 <AmiBlitz3.ab2@26506>   _myD0.l = PutD0
00043B1A <AmiBlitz3.ab2@26507>   If _myD0
00043B60 <AmiBlitz3.ab2@26508>     verstring$ = Left$(Peek.s(_myD0),9+3)
00043BB2 <AmiBlitz3.ab2@26509>     verstring$ = UnRight$(verstring$,3)                      ; Compilerkonstantenbeginn \__ entfernen
00043BB8 <AmiBlitz3.ab2@26510>   Else
00043BE6 <AmiBlitz3.ab2@26511>     error{"INTERNAL: Invalid pointer in version_string_dc!"}
00043BF6 <AmiBlitz3.ab2@26516>   actual_version.l = Peek.l(?versioninformation)
00043C06 <AmiBlitz3.ab2@26517>   actual_build.l   = Peek.l(?number_of_builds)
00043C2A <AmiBlitz3.ab2@26519>   Format ""
00043C60 <AmiBlitz3.ab2@26520>   Select verstring$
00043C84 <AmiBlitz3.ab2@26522>     Case "VER_MAJOR"
00043CC0 <AmiBlitz3.ab2@26523>      put_versionstr$ = Str$(actual_version LSR 24)
00043CEA <AmiBlitz3.ab2@26525>     Case "VER_MINOR"
00043D2E <AmiBlitz3.ab2@26526>      put_versionstr$ = Str$((actual_version LSL 8) LSR 24)
00043D58 <AmiBlitz3.ab2@26528>     Case "VER_PATCH"
00043D9C <AmiBlitz3.ab2@26529>      put_versionstr$ = Str$((actual_version LSL 16) LSR 24 )
00043DC6 <AmiBlitz3.ab2@26531>     Case "VER_BUILD"
00043DEA <AmiBlitz3.ab2@26532>      Format ""
00043E1E <AmiBlitz3.ab2@26533>      put_versionstr$ = Str$(actual_build)
00043E24 <AmiBlitz3.ab2@26535>     Default
00043E4C <AmiBlitz3.ab2@26536>      put_versionstr$ = "{unknown compilerconstant}"
00043E5A <AmiBlitz3.ab2@26538>   End Select
00043E7E <AmiBlitz3.ab2@26539>   Format ""
00043E94 <AmiBlitz3.ab2@26541>   GetD0 FLen(put_versionstr$)-1
00043E96 <AmiBlitz3.ab2@26542>   MOVE.l d0,d2
00043E9C <AmiBlitz3.ab2@26544>   GetD0 &put_versionstr$                                   ; kopieren des neuen Strings in den Zielstring
00043E9E <AmiBlitz3.ab2@26545>   MOVE.l d0,a0
00043EA0 <AmiBlitz3.ab2@26548>     MOVE.b (a0)+,d1
00043EA6 <AmiBlitz3.ab2@26549>     JSR writebyte
00043EAA <AmiBlitz3.ab2@26550>  DBF d2,'l1
00043EAC <AmiBlitz3.ab2@26552>   MOVEQ #0,d0
00043EAE <AmiBlitz3.ab2@26553>   MOVE.b -(a0),d0                                          ; letztes Zeichen in D0
00043ECC <AmiBlitz3.ab2@26554>   !asm
00043ED2 <AmiBlitz3.ab2@26555>   ADD.l #12,a5                                             ; string_ptr um konstante weitersetzen
00043ED4 <AmiBlitz3.ab2@26556> RTS
00043ED6 <AmiBlitz3.ab2@26561>   MOVE.l d2,-(a7)                                          ; D2 -> stack
00043ED8 <AmiBlitz3.ab2@26562>   MOVE.l a5,d0
00043F02 <AmiBlitz3.ab2@26563>   !basic
00043F06 <AmiBlitz3.ab2@26564>   _myD0.l = PutD0
00043F10 <AmiBlitz3.ab2@26565>   If _myD0
00043F56 <AmiBlitz3.ab2@26566>     constring$ = Left$(Peek.s(_myD0),13 + 3)
00043FA8 <AmiBlitz3.ab2@26567>     constring$ = UnRight$(constring$,3)                      ; Compilerkonstantenbeginn \__ entfernen
00043FAE <AmiBlitz3.ab2@26568>   Else
00043FDC <AmiBlitz3.ab2@26569>     error{"INTERNAL: Invalid pointer in insert_functionname!"}
0004402A <AmiBlitz3.ab2@26571>   Select LCase$(constring$)
0004404E <AmiBlitz3.ab2@26573>    Case "this_function"
0004406E <AmiBlitz3.ab2@26574>     If Peek.l(?currentfunction)<>0
0004407E <AmiBlitz3.ab2@26575>       currentfuncP.l = Peek.l(?currentfunction)
00044088 <AmiBlitz3.ab2@26576>       If currentfuncP
000440BC <AmiBlitz3.ab2@26577>         condata$ = Peek.s(currentfuncP + 48 + 1)
000440C2 <AmiBlitz3.ab2@26578>       Else
000440EA <AmiBlitz3.ab2@26579>         condata$ = "???"
00044118 <AmiBlitz3.ab2@26580>         error{"INTERNAL: Invalid pointer in currentfunction!"}
0004411E <AmiBlitz3.ab2@26582>     Else
00044146 <AmiBlitz3.ab2@26583>       condata$ = "GLOBAL"
0004414C <AmiBlitz3.ab2@26586>    Default
00044180 <AmiBlitz3.ab2@26587>     condata$ = constring$
0004418E <AmiBlitz3.ab2@26589>   End Select
000441BC <AmiBlitz3.ab2@26590>   GetD0 Len(condata$)                                      ; laenge zielstring -> Stack
000441BE <AmiBlitz3.ab2@26591>   MOVE.l d0,d2
000441C0 <AmiBlitz3.ab2@26592>   MOVE.l d2,-(a7)
000441C6 <AmiBlitz3.ab2@26594>   GetD0 &condata$                                          ; kopieren des neuen Strings in den Zielstring
000441C8 <AmiBlitz3.ab2@26595>   MOVE.l d0,a0
000441CA <AmiBlitz3.ab2@26598>     MOVE.b (a0)+,d1
000441D0 <AmiBlitz3.ab2@26599>     JSR pokedata1b
000441D4 <AmiBlitz3.ab2@26600>  DBF d2,'l1
000441F2 <AmiBlitz3.ab2@26602>   !asm
000441F4 <AmiBlitz3.ab2@26603>   MOVE.l (a7)+,d0                                          ; laenge Zielstring <- Stack
000441F6 <AmiBlitz3.ab2@26604>   MOVE.l (a7)+,d2                                          ; d2 <-Stack
000441F8 <AmiBlitz3.ab2@26605>   ADD.l d0,d2                                              ; eingefuegte chars zu D2 dazu
000441FE <AmiBlitz3.ab2@26606>   ADD.l #16,a5                                             ; string_ptr um konstante weitersetzen
00044200 <AmiBlitz3.ab2@26607> RTS
00044202 <AmiBlitz3.ab2@26612>   MOVE.l d2,-(a7)                                          ; D2 -> stack
00044204 <AmiBlitz3.ab2@26613>   MOVE.l a5,d0
0004422E <AmiBlitz3.ab2@26614>   !basic
00044232 <AmiBlitz3.ab2@26615>   _myD0.l = PutD0
0004423C <AmiBlitz3.ab2@26616>   If _myD0
00044282 <AmiBlitz3.ab2@26617>     constring$ = Left$(Peek.s(_myD0),8 + 3)
000442D4 <AmiBlitz3.ab2@26618>     constring$ = UnRight$(constring$,3)                      ; Compilerkonstantenbeginn \__ entfernen
000442DA <AmiBlitz3.ab2@26619>   Else
00044308 <AmiBlitz3.ab2@26620>     error{"INTERNAL: Invalid pointer in insert_codeline!"}
00044330 <AmiBlitz3.ab2@26621>     constring$ = "???"
0004437E <AmiBlitz3.ab2@26623>   Select LCase$(constring$)
000443A2 <AmiBlitz3.ab2@26625>    Case "codeline"
000443DE <AmiBlitz3.ab2@26626>     condata$ = Str$(Peek.l(?globallinecount))
000443E4 <AmiBlitz3.ab2@26628>    Default
00044418 <AmiBlitz3.ab2@26629>     condata$ = constring$
00044426 <AmiBlitz3.ab2@26631>   End Select
00044454 <AmiBlitz3.ab2@26633>   GetD0 Len(condata$)                                      ; laenge zielstring -> Stack
00044456 <AmiBlitz3.ab2@26634>   MOVE.l d0,d2
00044458 <AmiBlitz3.ab2@26635>   MOVE.l d2,-(a7)
0004445C <AmiBlitz3.ab2@26636>   SUB #1,d2
00044462 <AmiBlitz3.ab2@26638>   GetD0 &condata$                                          ; kopieren des neuen Strings in den Zielstring
00044464 <AmiBlitz3.ab2@26639>   MOVE.l d0,a0
00044466 <AmiBlitz3.ab2@26642>     MOVE.b (a0)+,d1
0004446C <AmiBlitz3.ab2@26643>     JSR pokedata1b
00044470 <AmiBlitz3.ab2@26644>  DBF d2,'l1
00044472 <AmiBlitz3.ab2@26646>   MOVEQ #0,d0
00044490 <AmiBlitz3.ab2@26647>   !asm
00044492 <AmiBlitz3.ab2@26648>   MOVE.l (a7)+,d0                                          ; laenge Zielstring <- Stack
00044494 <AmiBlitz3.ab2@26649>   MOVE.l (a7)+,d2                                          ; d2 <-Stack
00044496 <AmiBlitz3.ab2@26650>   ADD.l d0,d2
0004449C <AmiBlitz3.ab2@26651>   ADD.l #11,a5                                             ; string_ptr um konstante weitersetzen
0004449E <AmiBlitz3.ab2@26652>   MOVEQ #0,d0
000444A0 <AmiBlitz3.ab2@26653> RTS
000444CA <AmiBlitz3.ab2@26656> Function.l ab3_GetIncludeLock{filename.s}
000444EA <AmiBlitz3.ab2@26657>   incLock.l  = Lock_ (&filename,#ACCESS_READ)   ; try bla.blub
00044542 <AmiBlitz3.ab2@26658>   ex.s       = dos_GetExt{filename}
00044556 <AmiBlitz3.ab2@26660>   If incLock = False
000445CA <AmiBlitz3.ab2@26661>     filename = dos_SetExt{filename,"ab3"}
000445EA <AmiBlitz3.ab2@26662>     incLock  = Lock_ (&filename,#ACCESS_READ)   ; try bla.ab3
000445FE <AmiBlitz3.ab2@26665>   If incLock = False
00044672 <AmiBlitz3.ab2@26666>     filename = dos_SetExt{filename,"ab2"}
00044692 <AmiBlitz3.ab2@26667>     incLock  = Lock_ (&filename,#ACCESS_READ)   ; try bla.ab2
000446A6 <AmiBlitz3.ab2@26670>   If incLock = False
0004471A <AmiBlitz3.ab2@26671>     filename = dos_SetExt{filename,"bb2"}
0004473A <AmiBlitz3.ab2@26672>     incLock  = Lock_ (&filename,#ACCESS_READ)   ; try bla.bb2
0004474E <AmiBlitz3.ab2@26675>   If incLock = False
000447E0 <AmiBlitz3.ab2@26676>     filename = dos_SetExt{filename,ex+".ab3"}
00044800 <AmiBlitz3.ab2@26677>     incLock  = Lock_ (&filename,#ACCESS_READ)   ; try bla.blub.ab3
00044814 <AmiBlitz3.ab2@26680>   If incLock = False
00044888 <AmiBlitz3.ab2@26681>     filename = dos_SetExt{filename,"ab2"}
000448A8 <AmiBlitz3.ab2@26682>     incLock  = Lock_ (&filename,#ACCESS_READ)   ; try bla.blub.ab2
000448BC <AmiBlitz3.ab2@26685>   If incLock = False
00044930 <AmiBlitz3.ab2@26686>     filename = dos_SetExt{filename,"bb2"}
00044950 <AmiBlitz3.ab2@26687>     incLock  = Lock_ (&filename,#ACCESS_READ)   ; try bla.blub.bb2
0004495A <AmiBlitz3.ab2@26690>  Function Return incLock
00044974 <AmiBlitz3.ab2@26691> End Function
0004499E <AmiBlitz3.ab2@26695>   !basic
000449C8 <AmiBlitz3.ab2@26696>   incString.s = Peek$(?ptr_parameterstore)
000449FC <AmiBlitz3.ab2@26697>   incFile.s   = incString
00044A2E <AmiBlitz3.ab2@26698>   incLock.l   = ab3_GetIncludeLock{incFile}
00044A42 <AmiBlitz3.ab2@26700>   If incLock = False ; not found => check default Include Directory
00044A52 <AmiBlitz3.ab2@26701>     incDirP.l = Peek.l(?incd)
00044A5C <AmiBlitz3.ab2@26702>     If incDirP
00044A84 <AmiBlitz3.ab2@26703>       incDir_.s = Peek.s(incDirP)
00044A8A <AmiBlitz3.ab2@26704>     Else
00044AF4 <AmiBlitz3.ab2@26705>       incDir_.s = dos_AddPart{Peek.s(?str_blitz3assign),"Sourcecodes/Includes"}
00044B74 <AmiBlitz3.ab2@26707>     incFile.s = dos_AddPart{incDir_,incString}
00044BA6 <AmiBlitz3.ab2@26708>     incLock.l = ab3_GetIncludeLock{incFile}
00044BBA <AmiBlitz3.ab2@26711>   If incLock = False ; not found => check relative to current source
00044BD2 <AmiBlitz3.ab2@26712>     incDepth.l = Peek.w(?ininclude)-1
00044BF8 <AmiBlitz3.ab2@26713>     If incDepth >= 0 AND incDepth < #maxincludes
00044C58 <AmiBlitz3.ab2@26714>       incDir_.s = dos_PathPart{incdim (incDepth)} ;= Peek.s(?includetemp2)
00044CD8 <AmiBlitz3.ab2@26715>       incFile.s = dos_AddPart{incDir_,incString}
00044D0A <AmiBlitz3.ab2@26716>       incLock.l = ab3_GetIncludeLock{incFile}
00044D1E <AmiBlitz3.ab2@26720>   If incLock = False ; still not found => check default Include Directory and name only
00044D2E <AmiBlitz3.ab2@26721>     incDirP.l = Peek.l(?incd)
00044D38 <AmiBlitz3.ab2@26722>     If incDirP
00044D60 <AmiBlitz3.ab2@26723>       incDir_.s = Peek.s(incDirP)
00044D66 <AmiBlitz3.ab2@26724>     Else
00044DD0 <AmiBlitz3.ab2@26725>       incDir_.s = dos_AddPart{Peek.s(?str_blitz3assign),"Sourcecodes/Includes"}
00044E7E <AmiBlitz3.ab2@26727>     incFile.s = dos_AddPart{incDir_,dos_FilePart{incString}}
00044EB0 <AmiBlitz3.ab2@26728>     incLock.l = ab3_GetIncludeLock{incFile}
00044EBA <AmiBlitz3.ab2@26731>   If incLock
00044ED0 <AmiBlitz3.ab2@26732>     MaxLen incFile = 1024
00044EF4 <AmiBlitz3.ab2@26733>     NameFromLock_ incLock,&incFile,1024
00044F1E <AmiBlitz3.ab2@26734>     incFile = Peek.s(&incFile)
00044F56 <AmiBlitz3.ab2@26735>     Poke$ ?ptr_parameterstore,incFile
00044F6A <AmiBlitz3.ab2@26736>     i = FLen(incFile)
00044F76 <AmiBlitz3.ab2@26737>     GetReg d0,i
00044F7C <AmiBlitz3.ab2@26738>     MOVE.l d0,tempstore
00044F8C <AmiBlitz3.ab2@26739>     UnLock_ incLock
00044FAA <AmiBlitz3.ab2@26742>   !asm
00044FB0 <AmiBlitz3.ab2@26743>   TST.l tempstore
00044FB4 <AmiBlitz3.ab2@26744>    BEQ 'l1
00044FBA <AmiBlitz3.ab2@26745>   MOVE.l tempstore,d2
00044FBC <AmiBlitz3.ab2@26748> RTS
00044FC2 <AmiBlitz3.ab2@26759>   JSR Aclearallvars
00044FC8 <AmiBlitz3.ab2@26760>   JSR free_unusedfunctions
00044FD2 <AmiBlitz3.ab2@26775>   MOVE.l #"NORE",reqmode
00044FD8 <AmiBlitz3.ab2@26776> JSR handle_compileerror
00044FDA <AmiBlitz3.ab2@26779>   MOVE.l d0,-(a7)
00044FDC <AmiBlitz3.ab2@26780>   MOVE.l a5,d0
00044FE6 <AmiBlitz3.ab2@26781>   !basica7
00044FEA <AmiBlitz3.ab2@26782>   i.l = PutD0
00044FF4 <AmiBlitz3.ab2@26783>   If i
0004501C <AmiBlitz3.ab2@26784>     a$ = Peek$(i)
0004504E <AmiBlitz3.ab2@26785>     b$ = Peeks$(i-7,7)
00045134 <AmiBlitz3.ab2@26786>     i = Request(!TRANS{"Do workaround ?"},b$ + a$,!TRANS{"Yes|No"})
0004513A <AmiBlitz3.ab2@26787>     MOVE.l d0,result
0004513E <AmiBlitz3.ab2@26789>   !asma7
00045140 <AmiBlitz3.ab2@26790>   MOVE.l (a7)+,d0
00045142 <AmiBlitz3.ab2@26791> RTS
0004516C <AmiBlitz3.ab2@26795>   !basic
0004519A <AmiBlitz3.ab2@26796>   !ComData_LEA{comStr_CurrentDir,D0}
0004519E <AmiBlitz3.ab2@26797>   currentDirP.l = PutD0
000451CC <AmiBlitz3.ab2@26799>   !ComData_LEA{comStr_SourceName,D0}
000451D0 <AmiBlitz3.ab2@26800>   fileNameP.l = PutD0
000451F8 <AmiBlitz3.ab2@26802>   check_dirname$  = Peek$(currentDirP)
00045220 <AmiBlitz3.ab2@26803>   check_filename$ = Peek$(fileNameP)
000452AA <AmiBlitz3.ab2@26804>   If (olddirname$<>check_dirname$) OR (oldfilename$<>check_filename$)
000452B0 <AmiBlitz3.ab2@26805>     JSR free_unusedfunctions
000452FA <AmiBlitz3.ab2@26807>   olddirname$ = Peek$(check_dirname$)
00045344 <AmiBlitz3.ab2@26808>   oldfilename$ = Peek$(check_filename$)
0004536E <AmiBlitz3.ab2@26809>   For i = 0 To #maxincludes-1
00045382 <AmiBlitz3.ab2@26810>     incline(i) = 0
00045392 <AmiBlitz3.ab2@26811>   Next
000453B0 <AmiBlitz3.ab2@26812>   !asm
000453B2 <AmiBlitz3.ab2@26813> RTS
000453B4 <AmiBlitz3.ab2@26817>   MOVEQ #0,d1
000453B6 <AmiBlitz3.ab2@26820>   MOVE.b (a5)+,d0
000453BA <AmiBlitz3.ab2@26821>   BEQ 'er1
000453BE <AmiBlitz3.ab2@26822>   CMP.b #$20,d0
000453C2 <AmiBlitz3.ab2@26823>   BEQ 'l1
000453C4 <AmiBlitz3.ab2@26824>   ADDQ #1,d1
000453C8 <AmiBlitz3.ab2@26825>   CMP.b #$22,d0
000453CC <AmiBlitz3.ab2@26826>   BNE 'l1
000453CE <AmiBlitz3.ab2@26827> RTS
000453D4 <AmiBlitz3.ab2@26830> JMP syntaxerr
000453F8 <AmiBlitz3.ab2@26841> erro1t   Dc.b "Only one BSS / Chip Segment allowed",0 : Even
00045416 <AmiBlitz3.ab2@26842> nodata   Dc.b "BSS Segment contains Data!!!!",0       : Even
0004541C <AmiBlitz3.ab2@26847>   TST.b exdebug
00045420 <AmiBlitz3.ab2@26848>   BNE 'l10
00045426 <AmiBlitz3.ab2@26849>   MOVE.l #$4e71,d1
0004542C <AmiBlitz3.ab2@26850>   JSR writeword
00045432 <AmiBlitz3.ab2@26851>   MOVE.l destpointer,d0
00045434 <AmiBlitz3.ab2@26852>   MOVE.l d0,d1
00045436 <AmiBlitz3.ab2@26853>   ADDQ.l #3,d1
0004543C <AmiBlitz3.ab2@26854>   AND.l #$fffffffc,d1
00045442 <AmiBlitz3.ab2@26855>   MOVE.l d1,destpointer
00045448 <AmiBlitz3.ab2@26856>   SUB.l destpointer,d0
0004544C <AmiBlitz3.ab2@26857>   BEQ 'lnf1
00045456 <AmiBlitz3.ab2@26858>   CMP.l #-1,bssstart
0004545A <AmiBlitz3.ab2@26859>   BNE 'lnf1
00045464 <AmiBlitz3.ab2@26860>   CMP.l #-1,chipstart
00045468 <AmiBlitz3.ab2@26861>   BNE 'lnf1
0004546E <AmiBlitz3.ab2@26862>   MOVE.l destpointer,a4
00045474 <AmiBlitz3.ab2@26863>   TST.w dontwrite
00045478 <AmiBlitz3.ab2@26864>   BNE 'lnf1
0004547E <AmiBlitz3.ab2@26865>   MOVE.w #$4e71,-2(a4)
00045488 <AmiBlitz3.ab2@26868>   CMP.l #-1,bssstart
0004548C <AmiBlitz3.ab2@26869>   BEQ 'l11
00045492 <AmiBlitz3.ab2@26870>   MOVE.l #erro1t,-(a7)
00045498 <AmiBlitz3.ab2@26871> JMP handle_compileerror
000454A2 <AmiBlitz3.ab2@26874>   MOVE.l destpointer,bssstart
000454AA <AmiBlitz3.ab2@26875>   MOVE.b #1,bssmode
000454B0 <AmiBlitz3.ab2@26878>   TST.b chipmode
000454B4 <AmiBlitz3.ab2@26879>   BEQ 'l10
000454BE <AmiBlitz3.ab2@26880>   MOVE.l destpointer,chipend
000454C4 <AmiBlitz3.ab2@26881>   CLR.b chipmode
000454CA <AmiBlitz3.ab2@26884>   JSR get1bytemain
000454CC <AmiBlitz3.ab2@26885> RTS
000454D2 <AmiBlitz3.ab2@26889>    TST.b exdebug
000454D6 <AmiBlitz3.ab2@26890>   BNE 'x1
000454DC <AmiBlitz3.ab2@26891>   MOVE.l destpointer,d0
000454E2 <AmiBlitz3.ab2@26892>   MOVE.l d0,realbssend
000454E8 <AmiBlitz3.ab2@26893>   MOVE.l #$4e71,d1
000454EE <AmiBlitz3.ab2@26894>   JSR writeword
000454F4 <AmiBlitz3.ab2@26895>   MOVE.l destpointer,d0
000454F6 <AmiBlitz3.ab2@26896>   MOVE.l d0,d1
000454F8 <AmiBlitz3.ab2@26897>   ADDQ.l #3,d1
000454FE <AmiBlitz3.ab2@26898>   AND.l #$fffffffc,d1
00045504 <AmiBlitz3.ab2@26899>   MOVE.l d1,destpointer
0004550A <AmiBlitz3.ab2@26900>   SUB.l destpointer,d0
0004550E <AmiBlitz3.ab2@26901>   BEQ 'lnf1
00045514 <AmiBlitz3.ab2@26902>   MOVE.l destpointer,a4
0004551E <AmiBlitz3.ab2@26903>   CMP.l #-1,bssstart
00045522 <AmiBlitz3.ab2@26904>   BNE 'lnf1
0004552C <AmiBlitz3.ab2@26905>   CMP.l #-1,chipstart
00045530 <AmiBlitz3.ab2@26906>   BNE 'lnf1
00045536 <AmiBlitz3.ab2@26907>   TST.w dontwrite
0004553A <AmiBlitz3.ab2@26908>   BNE 'lnf1
00045540 <AmiBlitz3.ab2@26909>   MOVE.w #$4e71,-2(a4)
00045546 <AmiBlitz3.ab2@26912>   TST.b bssmode
0004554A <AmiBlitz3.ab2@26913>   BEQ 'l10
00045554 <AmiBlitz3.ab2@26914>   MOVE.l destpointer,bssend
0004555A <AmiBlitz3.ab2@26915>   CLR.b bssmode
00045564 <AmiBlitz3.ab2@26920>   CMP.l #-1,chipstart
00045568 <AmiBlitz3.ab2@26921>   BEQ 'l11
0004556E <AmiBlitz3.ab2@26922>   MOVE.l #erro1t,-(a7)
00045574 <AmiBlitz3.ab2@26923> JMP handle_compileerror
0004557E <AmiBlitz3.ab2@26926>   MOVE.l destpointer,chipstart
00045586 <AmiBlitz3.ab2@26927>   MOVE.b #1,chipmode
0004558C <AmiBlitz3.ab2@26930>   JSR get1bytemain
0004558E <AmiBlitz3.ab2@26931> RTS
000455B8 <AmiBlitz3.ab2@26935>   !basic
000455CA <AmiBlitz3.ab2@26945>   i.l = Peek.w(?ininclude)
000455F0 <AmiBlitz3.ab2@26946>   If i>=0 AND i<#maxincludes
00045622 <AmiBlitz3.ab2@26947>     incdim (i) = Peek.s(?includetemp2)
0004563C <AmiBlitz3.ab2@26948>     incline(i) = Peek.l(?includeline)
00045646 <AmiBlitz3.ab2@26950>     If CLIMode
000456F4 <AmiBlitz3.ab2@26951>       If cli_verbose>=2 Then NPrint "  -> Compiling ",incdim(i),"..."
00045712 <AmiBlitz3.ab2@26955>   !asm
00045714 <AmiBlitz3.ab2@26956> RTS
0004573E <AmiBlitz3.ab2@26960>   !basic
00045750 <AmiBlitz3.ab2@26961>   i.l = Peek.w(?ininclude)
00045776 <AmiBlitz3.ab2@26962>   If i>=0 AND i<#maxincludes
000457A6 <AmiBlitz3.ab2@26963>     incdim (i) = ""
000457BA <AmiBlitz3.ab2@26964>     incline(i) = 0
000457F2 <AmiBlitz3.ab2@26965>     If i>0 Then Poke.l (?includeline),incline(i-1)+1
00045810 <AmiBlitz3.ab2@26967>   !asm
00045812 <AmiBlitz3.ab2@26968> RTS
00045818 <AmiBlitz3.ab2@26972>   LEA replacedat,a0
0004581C <AmiBlitz3.ab2@26973>   Dc.w $3181,$0A00                                         ;MOVE.w d1,0(a0,d0.l*2)
0004581E <AmiBlitz3.ab2@26974> RTS
00045824 <AmiBlitz3.ab2@26978>   TST.b fpu
00045828 <AmiBlitz3.ab2@26979>   BEQ 'l1
00045832 <AmiBlitz3.ab2@26982>   MOVE.l destpointer,newinitaddr
00045838 <AmiBlitz3.ab2@26983>   JSR writeword
0004583E <AmiBlitz3.ab2@26984>   JSR writelong
00045840 <AmiBlitz3.ab2@26985> RTS
00045842 <AmiBlitz3.ab2@26990>   TST.b (a5)
00045846 <AmiBlitz3.ab2@26991>    BEQ.s 'll20
0004584A <AmiBlitz3.ab2@26992>   CMP.b #$20,(a5)
0004584E <AmiBlitz3.ab2@26993>    BNE.s 'll10
00045850 <AmiBlitz3.ab2@26994>   ADDQ.l #1,a5
00045854 <AmiBlitz3.ab2@26995> BRA.s 'll21
00045858 <AmiBlitz3.ab2@26998>   CMP.b #";",(a5)
0004585C <AmiBlitz3.ab2@26999>   BNE.s 'll20
0004585E <AmiBlitz3.ab2@27002>   TST.b (a5)+
00045862 <AmiBlitz3.ab2@27003>   BEQ.s 'll23
00045866 <AmiBlitz3.ab2@27004> BRA.s 'll25
00045868 <AmiBlitz3.ab2@27007>   SUBQ.l #1,a5
0004586A <AmiBlitz3.ab2@27010> RTS
0004586E <AmiBlitz3.ab2@27014>   MOVEM.l a2/d2,-(a7)
00045870 <AmiBlitz3.ab2@27015>   MOVEQ #0,d2
00045876 <AmiBlitz3.ab2@27016>   LEA ptr_parameterstore,a0
0004587C <AmiBlitz3.ab2@27017>   LEA chartab,a2
0004587E <AmiBlitz3.ab2@27020>   MOVE.b (a5),d0
00045882 <AmiBlitz3.ab2@27021>   TST.b 0(a2,d0)
00045886 <AmiBlitz3.ab2@27022>   BNE 'l10
00045888 <AmiBlitz3.ab2@27023>   ADDQ.l #1,a5
0004588A <AmiBlitz3.ab2@27024>   MOVE.b d0,(a0)+
0004588C <AmiBlitz3.ab2@27025>   ADDQ.l #1,d2
00045890 <AmiBlitz3.ab2@27026> BRA fc2
00045892 <AmiBlitz3.ab2@27029>   CLR.b (a0)+
00045898 <AmiBlitz3.ab2@27030>   JSR findlabel2
0004589A <AmiBlitz3.ab2@27031>   MOVE.l a2,a0
0004589E <AmiBlitz3.ab2@27032>   MOVEM.l (a7)+,a2/d2
000458A0 <AmiBlitz3.ab2@27033> RTS
000458A2 <AmiBlitz3.ab2@27037>   TST.l d0
000458A6 <AmiBlitz3.ab2@27038>   BNE 'l10
000458AC <AmiBlitz3.ab2@27039>     MOVE.l #syntax_,-(a7)
000458B2 <AmiBlitz3.ab2@27040> JMP handle_compileerror
000458B8 <AmiBlitz3.ab2@27043>   CMP.l #1,d0
000458BC <AmiBlitz3.ab2@27044>   BNE 'l20
000458C2 <AmiBlitz3.ab2@27045>     MOVE.l #overflow,-(a7)
000458C8 <AmiBlitz3.ab2@27046> JMP handle_compileerror
000458CA <AmiBlitz3.ab2@27049>   ADD.l a2,d0
000458CC <AmiBlitz3.ab2@27050>   MOVE.l d0,-(a7)
000458D2 <AmiBlitz3.ab2@27051> JMP handle_compileerror
000458D8 <AmiBlitz3.ab2@27055>   JMP _return
000458DE <AmiBlitz3.ab2@27056>   JMP _return
000458E4 <AmiBlitz3.ab2@27057>   JMP _return
000458EA <AmiBlitz3.ab2@27058>   JMP _return
000458F0 <AmiBlitz3.ab2@27059>   JMP _return
000458F6 <AmiBlitz3.ab2@27060>   JMP _return
000458FC <AmiBlitz3.ab2@27061>   JMP _return
00045902 <AmiBlitz3.ab2@27062>   JMP _return
00045908 <AmiBlitz3.ab2@27063>   JMP _return
0004590E <AmiBlitz3.ab2@27064>   JMP _return
00045914 <AmiBlitz3.ab2@27065>   JMP Atokejsr
0004591A <AmiBlitz3.ab2@27066>   JMP writeinit
00045920 <AmiBlitz3.ab2@27067>   JMP macroexecute
00045926 <AmiBlitz3.ab2@27068>   JMP findnext
0004592C <AmiBlitz3.ab2@27069>   JMP replacelib
00045932 <AmiBlitz3.ab2@27070>   JMP findconstant2
00045938 <AmiBlitz3.ab2@27071>   JMP findchar                                             ;char in d1
0004593E <AmiBlitz3.ab2@27072>   JMP stripspaces
00045944 <AmiBlitz3.ab2@27073>   JMP calc                                                 ;d0 varmode
0004594A <AmiBlitz3.ab2@27074>   JMP error
00045950 <AmiBlitz3.ab2@27075>   JMP writelong                                            ;d1 value
00045956 <AmiBlitz3.ab2@27076>   JMP writeword                                            ;d1 value
0004595C <AmiBlitz3.ab2@27077>   JMP writebyte                                            ;d1 value
00045962 <AmiBlitz3.ab2@27078> JMP exit
00045966 <AmiBlitz3.ab2@27082>   destpointer:    Ds.l 1                                ;pc org source      ;Ds.w 1
00045968 <AmiBlitz3.ab2@27085>   fast            Dc.w 0
0004596A <AmiBlitz3.ab2@27086>   fpu             Dc.w 0
0004596C <AmiBlitz3.ab2@27087>   newsyntax       Dc.w 0
0004596D <AmiBlitz3.ab2@27089>   optistring      Dc.b 0
0004596E <AmiBlitz3.ab2@27090>   optistring2     Dc.b 0
0004596F <AmiBlitz3.ab2@27091>   optiarray       Dc.b 0
00045970 <AmiBlitz3.ab2@27092>   quickadd        Dc.b 0
00045972 <AmiBlitz3.ab2@27093>   newmode         Dc.w 0
00045974 <AmiBlitz3.ab2@27094>   mode            Dc.w 0
00045976 <AmiBlitz3.ab2@27095>   string1         Dc.w 0
00045978 <AmiBlitz3.ab2@27096>   load_var_size   Dc.w 0
0004597A <AmiBlitz3.ab2@27097>   load_var_reg    Dc.w 0
0004597E <AmiBlitz3.ab2@27098>   load_var_addr   Dc.l 0
00045980 <AmiBlitz3.ab2@27099>   imm_size        Dc.w 0
00045982 <AmiBlitz3.ab2@27100>   imm_reg         Dc.w 0
00045986 <AmiBlitz3.ab2@27101>   imm_addr        Dc.l 0
00045987 <AmiBlitz3.ab2@27102>   iee             Dc.b 0
00045988 <AmiBlitz3.ab2@27103>   _dcb            Dc.b 0
0004598C <AmiBlitz3.ab2@27104>   nohunkoffset    Dc.l 0
00045990 <AmiBlitz3.ab2@27107> teddata:        Dc.l tokens
00045994 <AmiBlitz3.ab2@27108>                 Dc.l 0 ;compilermenu_entries               ; NOT used anymore
00045998 <AmiBlitz3.ab2@27109>                 Dc.l read_xtrafile
0004599C <AmiBlitz3.ab2@27110>                 Dc.l write_xtrafile
000459A0 <AmiBlitz3.ab2@27111>                 Dc.l call_menuentry                        ; compile AND RUN ?
000459A4 <AmiBlitz3.ab2@27112>                 Dc.l 0
000459A8 <AmiBlitz3.ab2@27113>                 Dc.b ":",34,".;"
000459AC <AmiBlitz3.ab2@27114>                 Dc.l "NEW1"
000459B0 <AmiBlitz3.ab2@27115>                 Dc.l newtypebase
000459B4 <AmiBlitz3.ab2@27116> realconstbase:  Dc.l labelbase
000459B8 <AmiBlitz3.ab2@27117> deflib          Dc.l 0
000459BC <AmiBlitz3.ab2@27118> incd            Dc.l 0
000459C0 <AmiBlitz3.ab2@27119>                 Dc.l 0
000459C4 <AmiBlitz3.ab2@27120>                 Dc.l 0
000459C8 <AmiBlitz3.ab2@27121>                 Dc.l 0
000459CA <AmiBlitz3.ab2@27122> _return         RTS
000459CB <AmiBlitz3.ab2@27123>                 Dc.b 0
00045DCB <AmiBlitz3.ab2@27124> chartab2        Ds.l 256
00045DCF <AmiBlitz3.ab2@27125> codeend         Dc.l 0
00045DD3 <AmiBlitz3.ab2@27126> hunkoffsetnum   Dc.l 0
00045DD7 <AmiBlitz3.ab2@27127> chipsize        Dc.l 0
00045DDB <AmiBlitz3.ab2@27128> bsssize         Dc.l 0
00045DDF <AmiBlitz3.ab2@27129> bssstart        Dc.l -1
00045DE3 <AmiBlitz3.ab2@27130> bssend          Dc.l -1
00045DE7 <AmiBlitz3.ab2@27131> chipstart       Dc.l -1
00045DEB <AmiBlitz3.ab2@27132> chipend         Dc.l -1
00045DEC <AmiBlitz3.ab2@27133> bssmode         Dc.b 0
00045DED <AmiBlitz3.ab2@27134> chipmode        Dc.b 0
00045DEE <AmiBlitz3.ab2@27135> newhunk         Dc.b 0
00045DF2 <AmiBlitz3.ab2@27136> bssnum          Dc.l 0
00045DF6 <AmiBlitz3.ab2@27137> chipnum         Dc.l 0
00045DFA <AmiBlitz3.ab2@27138> lastinstruction Dc.l 0
00045E0E <AmiBlitz3.ab2@27139> hunkbegin       Dc.l $03F3,$00,$02,$00,$01
00045E12 <AmiBlitz3.ab2@27140> tstsize1b:      Ds.l 1
00045E16 <AmiBlitz3.ab2@27141> bsssize2        Dc.l 1
00045E1A <AmiBlitz3.ab2@27142>                 Dc.l $03E9
00045E1E <AmiBlitz3.ab2@27143> tstsize2b:      Dc.l $100
00045E32 <AmiBlitz3.ab2@27144> hunkbegin2      Dc.l $03F3,$00,$03,$00,$02
00045E36 <AmiBlitz3.ab2@27145> tstsize1c:      Ds.l 1
00045E3A <AmiBlitz3.ab2@27146> bsssize3        Dc.l 1
00045E3E <AmiBlitz3.ab2@27147> chipsize2       Dc.l 1
00045E42 <AmiBlitz3.ab2@27148>                 Dc.l $3e9
00045E46 <AmiBlitz3.ab2@27149> tstsize2c       Dc.l 0
00045E56 <AmiBlitz3.ab2@27150> hunkend         Dc.l $3f2,$3eb,0,$3f2
00045E66 <AmiBlitz3.ab2@27151> hunkend2        Dc.l $3f2,$3ea,0,$3f2
00045E6D <AmiBlitz3.ab2@27152> strcpy          Dc.b "strcpy",0
00045E74 <AmiBlitz3.ab2@27153> strcmp          Dc.b "strcmp",0
00045E7B <AmiBlitz3.ab2@27154> strvar          Dc.b "strvar",0
00045E80 <AmiBlitz3.ab2@27155> qmul            Dc.b "qmul",0
00045E85 <AmiBlitz3.ab2@27156> qdiv            Dc.b "qdiv",0
00045E8C <AmiBlitz3.ab2@27157> _MaxLen         Dc.b "maxlen",0
00045E91 <AmiBlitz3.ab2@27158> notf            Dc.b "????",0
00045EB4 <AmiBlitz3.ab2@27160> errtext         Dc.b "only reg addressing Mode supported",0
00045EDE <AmiBlitz3.ab2@27161> fpuerr          Dc.b "Instruction not yet supported by 68K FPU ",0
00045F20 <AmiBlitz3.ab2@27162> cmplxerr        Dc.b "Formula too complex for 68K FPU or too much regload register used",0 : Even
00045F22 <AmiBlitz3.ab2@27163> peeksize        Dc.w 0
00045F26 <AmiBlitz3.ab2@27165> mainstart       Dc.l 0
00045F27 <AmiBlitz3.ab2@27167> infunctioncode  Dc.b 0
00045F29 <AmiBlitz3.ab2@27168> regnumstore     Dc.w 0
00045F56 <AmiBlitz3.ab2@27169>                 Dc.b "$VER: AmiBlitz3 \\__VER_MAJOR.\\__VER_MINOR (\\__DATE_GER__) Build \\__VER_PATCH.\\__VER_BUILD",0 : Even
00045F5E <AmiBlitz3.ab2@27170> testcode        Dc.b "print i",0
00045FC2 <AmiBlitz3.ab2@27171>                 Ds.b 100
00045FD0 <AmiBlitz3.ab2@27172> devo            Dc.b "developobject",0 : Even
00045FE2 <AmiBlitz3.ab2@27173> autostorename   Dc.b "__autoconstantnum",0
00045FEC <AmiBlitz3.ab2@27174> _include        Dc.b "__include",0
00045FF4 <AmiBlitz3.ab2@27175> _debug          Dc.b "__debug",0
00045FF8 <AmiBlitz3.ab2@27176> unusedfunc      Dc.l 0
00045FFA <AmiBlitz3.ab2@27180>   MOVE.l a0,-(a7)
00045FFC <AmiBlitz3.ab2@27181>   MOVE.l a0,d0
00045FFE <AmiBlitz3.ab2@27182>   MOVE.l a5,a0                                             ;macro title
00046028 <AmiBlitz3.ab2@27183>   !basic
0004602C <AmiBlitz3.ab2@27184>   i = PutD0
0004602E <AmiBlitz3.ab2@27185>   MOVEQ #20,d0
00046030 <AmiBlitz3.ab2@27188>     MOVE.b -(a0),d1
00046034 <AmiBlitz3.ab2@27189>     BEQ 'l1
00046038 <AmiBlitz3.ab2@27190>     CMP.b #":",d1
0004603C <AmiBlitz3.ab2@27191>     BEQ 'l1
0004603E <AmiBlitz3.ab2@27192>     SUBQ.l #1,d0
00046042 <AmiBlitz3.ab2@27193>     BNE 'l2
00046044 <AmiBlitz3.ab2@27196>   ADDQ #1,a0
00046046 <AmiBlitz3.ab2@27197>   MOVE.l a0,d0
0004604A <AmiBlitz3.ab2@27198>   i2.l = PutD0
00046066 <AmiBlitz3.ab2@27199>   If Peek.w (?ininclude)>0
000460C0 <AmiBlitz3.ab2@27200>     Poke.s (?includetemp2),incdim(Peek.w(?ininclude)-1)
000460D0 <AmiBlitz3.ab2@27201>     errorline.l = Peek.l(?includeline);-1
000460F8 <AmiBlitz3.ab2@27202>     Poke.l ?compilelinecounter,Peek.l(?includeline) - 1
00046122 <AmiBlitz3.ab2@27203>     errorfile.s = Peek.s(?includetemp2)
00046128 <AmiBlitz3.ab2@27204>   Else
00046160 <AmiBlitz3.ab2@27205>     Poke.s (?includetemp2),Peek.s(?ptr_parameterstore)
00046176 <AmiBlitz3.ab2@27206>     errorline.l = Peek.l(?compilelinecounter) + 1
000461AA <AmiBlitz3.ab2@27207>     errorfile.s = cli_sourcefile
000461B4 <AmiBlitz3.ab2@27210>   If i
00046258 <AmiBlitz3.ab2@27211>     errortext.s = !TRANS{Replace$(Peek.s(i),"\\0a","\n")}
0004625E <AmiBlitz3.ab2@27212>   Else
00046286 <AmiBlitz3.ab2@27213>     errortext.s = "???"
000463F8 <AmiBlitz3.ab2@27216>   NPrint "\\1b[1m",!TRANS{"Compiler Error"}," <",errorfile,"@",errorline,">\\1b[0m ",errortext
00046416 <AmiBlitz3.ab2@27220>   !asm
00046418 <AmiBlitz3.ab2@27221>   MOVE.l (a7)+,a0
0004641A <AmiBlitz3.ab2@27222> RTS
0004641C <AmiBlitz3.ab2@27226>   MOVE.l a0,-(a7)
0004641E <AmiBlitz3.ab2@27227>   MOVE.l a0,d0
00046420 <AmiBlitz3.ab2@27228>   MOVE.l a5,a0                                             ;macro title
0004644A <AmiBlitz3.ab2@27229>   !basic
0004644E <AmiBlitz3.ab2@27230>   i = PutD0
00046450 <AmiBlitz3.ab2@27231>   MOVEQ #20,d0
00046452 <AmiBlitz3.ab2@27234>     MOVE.b -(a0),d1
00046456 <AmiBlitz3.ab2@27235>     BEQ 'l1
0004645A <AmiBlitz3.ab2@27236>     CMP.b #":",d1
0004645E <AmiBlitz3.ab2@27237>     BEQ 'l1
00046460 <AmiBlitz3.ab2@27238>     SUBQ.l #1,d0
00046464 <AmiBlitz3.ab2@27239>     BNE 'l2
00046466 <AmiBlitz3.ab2@27242>   ADDQ #1,a0
00046468 <AmiBlitz3.ab2@27243>   MOVE.l a0,d0
0004646C <AmiBlitz3.ab2@27244>   i2.l = PutD0
000464F0 <AmiBlitz3.ab2@27245>   fid.l = file_Open{dos_AddPart{my_systemdir$,"ab_compileerror.txt"},#file_forcewrite}
00046504 <AmiBlitz3.ab2@27246>   If fid <> -1
00046520 <AmiBlitz3.ab2@27247>     If Peek.w (?ininclude)>0
0004657A <AmiBlitz3.ab2@27248>       Poke$(?includetemp2),incdim(Peek.w(?ininclude)-1)
00046580 <AmiBlitz3.ab2@27249>     Else
000465AC <AmiBlitz3.ab2@27250>       Poke$(?includetemp2),""
000465D6 <AmiBlitz3.ab2@27252>     a$ = Peek$(?includetemp2)
00046648 <AmiBlitz3.ab2@27253>     x$ = Replace$(Peek$(i),"\\0a","\n")
0004667A <AmiBlitz3.ab2@27254>     file_WriteLine{fid,x$}
000466C4 <AmiBlitz3.ab2@27255>     file_WriteLine{fid,Str$(Peek.l(?compilelinecounter) + 1)}
000466F0 <AmiBlitz3.ab2@27256>     If a$
00046722 <AmiBlitz3.ab2@27257>       file_WriteLine{fid,a$}
0004676C <AmiBlitz3.ab2@27258>       file_WriteLine{fid,Str$(Peek.l(?includeline)-1)}
00046794 <AmiBlitz3.ab2@27259>       Poke.l ?compilelinecounter,Peek.l(?includeline) - 1
0004679A <AmiBlitz3.ab2@27260>     Else
000467C0 <AmiBlitz3.ab2@27261>       file_WriteLine{fid,"none"}
000467F0 <AmiBlitz3.ab2@27263>     file_WriteLine{fid,Peek$(i2)}
00046846 <AmiBlitz3.ab2@27264>     file_WriteLine{fid,Str$(Peek.l(?globallinecount))+" line(s) compiled"}
00046890 <AmiBlitz3.ab2@27265>     file_WriteLine{fid,Hex$(Peek.w(?globalvarpointer))+" global var base"}
0004689A <AmiBlitz3.ab2@27266>     file_Close{fid}
000468B8 <AmiBlitz3.ab2@27268>   !asm
000468BA <AmiBlitz3.ab2@27269>   MOVE.l (a7)+,a0
000468BC <AmiBlitz3.ab2@27270> RTS
000468E6 <AmiBlitz3.ab2@27274>   !basic
000468EA <AmiBlitz3.ab2@27275>   progress.l     = PutD0
000468FC <AmiBlitz3.ab2@27276>   total.l        = Peek.w(?progressbar_width)
0004691A <AmiBlitz3.ab2@27277>   calcpro.l      = (progress * 100) / total +1
0004692C <AmiBlitz3.ab2@27278>   pass.l         = Peek.w(?pass)
0004693E <AmiBlitz3.ab2@27279>   typ.l          = Peek.w(?compiler_job)
0004695C <AmiBlitz3.ab2@27281>   If pass><pass_old.l OR typ><typ_old.l
00046962 <AmiBlitz3.ab2@27282>     pass_old = pass
00046968 <AmiBlitz3.ab2@27283>     typ_old  = typ
00046990 <AmiBlitz3.ab2@27284>     comstatus$ = "Initializing Compiler..."
000469A2 <AmiBlitz3.ab2@27285>     If typ=0
00046A82 <AmiBlitz3.ab2@27286>       comstatus$ = !TRANS{"Pass"}+" "+Str$(pass)+": "+!TRANS{"Compiling Sources..."}
00046A94 <AmiBlitz3.ab2@27288>     If typ=1
00046B74 <AmiBlitz3.ab2@27289>       comstatus$ = !TRANS{"Pass"}+" "+Str$(pass)+": "+!TRANS{"Building Executable..."}
00046B9C <AmiBlitz3.ab2@27292>     If Peek.l(Addr Window(4))<>0
00046BB2 <AmiBlitz3.ab2@27293>       Use Window 4
00046BEC <AmiBlitz3.ab2@27294>       WZPrint "COMPILE_INFO",&comstatus$
00046BF2 <AmiBlitz3.ab2@27295>     Else
00046C48 <AmiBlitz3.ab2@27296>       If cli_verbose>=2 Then NPrint comstatus$
00046C56 <AmiBlitz3.ab2@27300>   If (calcpro >< calcpro_old)
00046C7E <AmiBlitz3.ab2@27301>     If Peek.l(Addr Window(4))<>0
00046CB0 <AmiBlitz3.ab2@27302>       If (((calcpro & $7)=0) OR (calcpro=100))
00046CF6 <AmiBlitz3.ab2@27303>         testpr$ = Str$(calcpro)+"%%"
00046D46 <AmiBlitz3.ab2@27304>         WZPrint "COMPILE_GAUGE",calcpro,100,&testpr$
00046D4C <AmiBlitz3.ab2@27306>     Else
00046DA0 <AmiBlitz3.ab2@27310>       If cli_verbose>=3 Then NPrint calcpro,"% compiled..."
00046DA6 <AmiBlitz3.ab2@27312>     calcpro_old = calcpro
00046DC4 <AmiBlitz3.ab2@27314>   !asm
00046DC6 <AmiBlitz3.ab2@27315> RTS
00046DF0 <AmiBlitz3.ab2@27319>   !basic
00046E06 <AmiBlitz3.ab2@27320>   MaxLen a$ = 5000
00046E10 <AmiBlitz3.ab2@27321>   var.l = ?residents_table
00046E22 <AmiBlitz3.ab2@27322>   If winon.l = 0
00046E3E <AmiBlitz3.ab2@27323>     FindScreen 0
00046F02 <AmiBlitz3.ab2@27324>     WZWindow 1,?wzgui,256,-2,ScreenHeight/6,-2,ScreenHeight/1.5,1
00046F2A <AmiBlitz3.ab2@27325>     WZ_SetFont{"WIN_CPREFS"}
00046F70 <AmiBlitz3.ab2@27326>     WZ_InitTable{"WIN_CPREFS","OBJECTS",2,0}
00046FAA <AmiBlitz3.ab2@27327>     WZ_SetTableColors{"OBJECTS",1,0,2,3,3}
00047050 <AmiBlitz3.ab2@27330>     WZ_SetTableTitle{"OBJECTS","Objects","Max"}
000470AC <AmiBlitz3.ab2@27333>     WZ_SetPriority{"OBJECTS",3,1}
00047104 <AmiBlitz3.ab2@27336>     WZ_SetEditable{"OBJECTS",False,True}
0004712A <AmiBlitz3.ab2@27339>     WZ_SetSortable{"OBJECTS",Off}
00047162 <AmiBlitz3.ab2@27342>     For i = 0 To Peek.w(?number_of_objects)-1
0004718A <AmiBlitz3.ab2@27343>       a$ = ""
0004719E <AmiBlitz3.ab2@27344>       GetD0 &a$,i:JSR getobjectentry : a.l = PutD0
00047266 <AmiBlitz3.ab2@27345>       WZ_AddRow{"OBJECTS",Peek$(&a$),Str$(a)}
00047276 <AmiBlitz3.ab2@27346>     Next
00047298 <AmiBlitz3.ab2@27347>     WZ_DrawTable{"OBJECTS"}
000472BA <AmiBlitz3.ab2@27349>     WZ_UpdateTable{"OBJECTS"}
000472C2 <AmiBlitz3.ab2@27350>     winon = 1
000472CC <AmiBlitz3.ab2@27351>     var.l = ?residents_table
000472F4 <AmiBlitz3.ab2@27352>     a$ = Peek$(var)
0004731E <AmiBlitz3.ab2@27353>     For i = 0 To 6
00047364 <AmiBlitz3.ab2@27354>       a$ = a$ + "\\0a"
00047372 <AmiBlitz3.ab2@27355>       var + $44
000473C2 <AmiBlitz3.ab2@27356>       a$ = a$ + Peek$(var)
000473D2 <AmiBlitz3.ab2@27357>     Next
0004740C <AmiBlitz3.ab2@27358>     WZPrint "RESIDENTS",&a$
0004741C <AmiBlitz3.ab2@27360>     i = Peek.l(?stringbuffer)
00047454 <AmiBlitz3.ab2@27361>     WZPrint "STRINGBUFFER",i
00047464 <AmiBlitz3.ab2@27363>     i = Peek.l(?stacksize)                            ;get stacksize  tomsmart1
0004749C <AmiBlitz3.ab2@27364>     WZPrint "STACKSIZE",i                             ;print it  tomsmart1
000474A4 <AmiBlitz3.ab2@27366>     var.l = 0
000474AC <AmiBlitz3.ab2@27367>     BTST #7,create_iconfile
000474B0 <AmiBlitz3.ab2@27368>     BEQ 'noi
000474B8 <AmiBlitz3.ab2@27369>     var = 1
000474F0 <AmiBlitz3.ab2@27372>     WZPrint "ICON",var
000474F8 <AmiBlitz3.ab2@27373>     var = 0
00047500 <AmiBlitz3.ab2@27374>     BTST #7,make_smallestcode
00047504 <AmiBlitz3.ab2@27375>     BEQ 'nos
0004750C <AmiBlitz3.ab2@27376>     var = 1
00047544 <AmiBlitz3.ab2@27379>     WZPrint "SMALLEST",var
0004754C <AmiBlitz3.ab2@27380>     var = 0
00047554 <AmiBlitz3.ab2@27381>     BTST #7,link_debuginfo
00047558 <AmiBlitz3.ab2@27382>     BEQ 'nodi
00047560 <AmiBlitz3.ab2@27383>     var = 1
00047598 <AmiBlitz3.ab2@27386>     WZPrint "DEBUGINFO",var
000475A0 <AmiBlitz3.ab2@27388>     var = 0
000475DE <AmiBlitz3.ab2@27390>     !ComData_GetW{comWord_CreateDebugFile,D0}            ; get status of Create.dbg file  tomsmart1
000475E2 <AmiBlitz3.ab2@27391>     var = PutD0                                          ; save status to var  tomsmart1
0004761A <AmiBlitz3.ab2@27392>     WZPrint "DBGFILE",var                                ; show status in the GUI tomsmart1
00047622 <AmiBlitz3.ab2@27394>     var = 0                                              ; no runtime Debugging
00047646 <AmiBlitz3.ab2@27395>     WZDisable "AUTORUN"                                  ; disable all Debugger settings  tomsmart1
0004766A <AmiBlitz3.ab2@27396>     WZDisable "CHECK_INTERRUPT"                          ;                "
0004768E <AmiBlitz3.ab2@27397>     WZDisable "CHECK_ASSEMBLER"                          ;                "
000476B2 <AmiBlitz3.ab2@27398>     WZDisable "CHECK_OVERFLOW"                           ;                "
000476BA <AmiBlitz3.ab2@27399>     BTST #7,use_debugger                                 ; check status
000476BE <AmiBlitz3.ab2@27400>     BEQ 'nod
000476C6 <AmiBlitz3.ab2@27401>     var = 1                                              ; yes runtime Debugging
000476EA <AmiBlitz3.ab2@27402>     WZEnable "AUTORUN"                                   ; enable all Debugger settings  tomsmart1
0004770E <AmiBlitz3.ab2@27403>     WZEnable "CHECK_INTERRUPT"                           ;               "
00047732 <AmiBlitz3.ab2@27404>     WZEnable "CHECK_ASSEMBLER"                           ;               "
00047756 <AmiBlitz3.ab2@27405>     WZEnable "CHECK_OVERFLOW"                            ;               "
0004778E <AmiBlitz3.ab2@27408>     WZPrint "DEBUG",var
00047796 <AmiBlitz3.ab2@27409>     var = 0
0004779E <AmiBlitz3.ab2@27410>     BTST #7,autorun
000477A2 <AmiBlitz3.ab2@27411>     BEQ 'nod4
000477AA <AmiBlitz3.ab2@27412>     var = 1
000477E2 <AmiBlitz3.ab2@27415>     WZPrint "AUTORUN",var
000477EA <AmiBlitz3.ab2@27416>     var.l = 0
000477F2 <AmiBlitz3.ab2@27417>     BTST #7,interruptcheck
000477F6 <AmiBlitz3.ab2@27418>     BEQ 'nod1
000477FE <AmiBlitz3.ab2@27419>     var = 1
00047836 <AmiBlitz3.ab2@27422>     WZPrint "CHECK_INTERRUPT",var
0004783E <AmiBlitz3.ab2@27423>     var.l = 0
00047846 <AmiBlitz3.ab2@27424>     BTST #7,assemblercheck
0004784A <AmiBlitz3.ab2@27425>     BEQ 'nod2
00047852 <AmiBlitz3.ab2@27426>     var = 1
0004788A <AmiBlitz3.ab2@27429>     WZPrint "CHECK_ASSEMBLER",var
00047892 <AmiBlitz3.ab2@27430>     var.l = 0
0004789A <AmiBlitz3.ab2@27431>     BTST #7,overflowcheck
0004789E <AmiBlitz3.ab2@27432>     BEQ 'nod3
000478A6 <AmiBlitz3.ab2@27433>     var = 1
000478DE <AmiBlitz3.ab2@27436>     WZPrint "CHECK_OVERFLOW",var
000478E6 <AmiBlitz3.ab2@27439>   exit.l = 0
000478EE <AmiBlitz3.ab2@27440>   mess.l = 0
000478F8 <AmiBlitz3.ab2@27441>   ev.l = WaitEvent
00047908 <AmiBlitz3.ab2@27442>   WZ_CheckTableEvent{ev}
0004790E <AmiBlitz3.ab2@27443>   Select ev
0004791C <AmiBlitz3.ab2@27445>    Case #IDCMP_IDCMPUPDATE
0004795C <AmiBlitz3.ab2@27446>     Select LCase$(WZGadName)
00047980 <AmiBlitz3.ab2@27448>      Case "autorun"
0004798E <AmiBlitz3.ab2@27449>        If WZInput
00047996 <AmiBlitz3.ab2@27450>          BSET #7,autorun
0004799C <AmiBlitz3.ab2@27451>        Else
000479A4 <AmiBlitz3.ab2@27452>          BCLR #7,autorun
000479CE <AmiBlitz3.ab2@27455>      Case "check_interrupt"
000479DC <AmiBlitz3.ab2@27456>        If WZInput
000479E4 <AmiBlitz3.ab2@27457>          BSET #7,interruptcheck
000479EA <AmiBlitz3.ab2@27458>        Else
000479F2 <AmiBlitz3.ab2@27459>          BCLR #7,interruptcheck
00047A1C <AmiBlitz3.ab2@27462>      Case "check_assembler"
00047A2A <AmiBlitz3.ab2@27463>        If WZInput
00047A32 <AmiBlitz3.ab2@27464>          BSET #7,assemblercheck
00047A38 <AmiBlitz3.ab2@27465>        Else
00047A40 <AmiBlitz3.ab2@27466>          BCLR #7,assemblercheck
00047A6A <AmiBlitz3.ab2@27469>      Case "check_overflow"
00047A78 <AmiBlitz3.ab2@27470>        If WZInput
00047A80 <AmiBlitz3.ab2@27471>          BSET #7,overflowcheck
00047A86 <AmiBlitz3.ab2@27472>        Else
00047A8E <AmiBlitz3.ab2@27473>          BCLR #7,overflowcheck
00047AB8 <AmiBlitz3.ab2@27476>      Case "residents"
00047AE2 <AmiBlitz3.ab2@27478>      Case "stacksize"                                   ; stacksize changed  tomsmart1
00047AEC <AmiBlitz3.ab2@27479>        tempsize.l=WZInput                               ; save the valu to a temporay variable  tomsmart1
00047AFE <AmiBlitz3.ab2@27480>        If tempsize >= #MIN_STACKSIZE                    ; check size  tomsmart1
00047B0E <AmiBlitz3.ab2@27481>          Poke.l ?stacksize,tempsize                     ; save it.  tomsmart1
00047B14 <AmiBlitz3.ab2@27482>        Else                                             ; its not big enough  tomsmart1
00047B1C <AmiBlitz3.ab2@27483>          tempsize = #MIN_STACKSIZE                      ; set it to the min size  tomsmart1
00047B2C <AmiBlitz3.ab2@27484>          Poke.l ?stacksize,tempsize                     ; save it  tomsmart1
00047B64 <AmiBlitz3.ab2@27485>          WZPrint "STACKSIZE",tempsize                   ; print it  tomsmart1
00047B8E <AmiBlitz3.ab2@27488>      Case "stringbuffer"
00047BAA <AmiBlitz3.ab2@27490>        Poke.l ?stringbuffer,WZInput
00047BB2 <AmiBlitz3.ab2@27491>        mess = $6
00047BDC <AmiBlitz3.ab2@27493>      Case "debug"
00047BEA <AmiBlitz3.ab2@27494>        If WZInput
00047BF2 <AmiBlitz3.ab2@27495>          BSET #7,use_debugger                           ; yes runtime Debugging
00047C16 <AmiBlitz3.ab2@27496>          WZEnable "AUTORUN"                             ; enable all Debugger settings  tomsmart1
00047C3A <AmiBlitz3.ab2@27497>          WZEnable "CHECK_INTERRUPT"                     ;               "
00047C5E <AmiBlitz3.ab2@27498>          WZEnable "CHECK_ASSEMBLER"                     ;               "
00047C82 <AmiBlitz3.ab2@27499>          WZEnable "CHECK_OVERFLOW"                      ;               "
00047C88 <AmiBlitz3.ab2@27500>        Else
00047C90 <AmiBlitz3.ab2@27501>          BCLR #7,use_debugger                           ; no runtime Debugging
00047CB4 <AmiBlitz3.ab2@27502>          WZDisable "AUTORUN"                            ; disable all Debugger settings  tomsmart1
00047CD8 <AmiBlitz3.ab2@27503>          WZDisable "CHECK_INTERRUPT"                    ;                "
00047CFC <AmiBlitz3.ab2@27504>          WZDisable "CHECK_ASSEMBLER"                    ;                "
00047D20 <AmiBlitz3.ab2@27505>          WZDisable "CHECK_OVERFLOW"                     ;                "
00047D28 <AmiBlitz3.ab2@27507>        mess = $a
00047D52 <AmiBlitz3.ab2@27509>      Case "icon"
00047D60 <AmiBlitz3.ab2@27510>        If WZInput
00047D68 <AmiBlitz3.ab2@27511>          BSET #7,create_iconfile
00047D6E <AmiBlitz3.ab2@27512>        Else
00047D76 <AmiBlitz3.ab2@27513>          BCLR #7,create_iconfile
00047D7E <AmiBlitz3.ab2@27515>        mess = $9
00047DA8 <AmiBlitz3.ab2@27517>      Case "smallest"
00047DB6 <AmiBlitz3.ab2@27518>        If WZInput
00047DBE <AmiBlitz3.ab2@27519>          BSET #7,make_smallestcode
00047DC4 <AmiBlitz3.ab2@27520>        Else
00047DCC <AmiBlitz3.ab2@27521>          BCLR #7,make_smallestcode
00047DD4 <AmiBlitz3.ab2@27523>        mess = $f
00047DFE <AmiBlitz3.ab2@27525>      Case "debuginfo"                                      ; check "Create Debug info" (Symbols)
00047E0C <AmiBlitz3.ab2@27526>        If WZInput
00047E14 <AmiBlitz3.ab2@27527>          BSET #7,link_debuginfo
00047E1A <AmiBlitz3.ab2@27528>        Else
00047E22 <AmiBlitz3.ab2@27529>          BCLR #7,link_debuginfo
00047E2A <AmiBlitz3.ab2@27531>        mess = $10
00047E54 <AmiBlitz3.ab2@27533>      Case "dbgfile"                                        ; check "Create .dbg File"   tomsmart1
00047E62 <AmiBlitz3.ab2@27534>        If WZInput
00047E98 <AmiBlitz3.ab2@27535>          !ComData_SetW{comWord_CreateDebugFile,#1}         ; yes we create it  tomsmart1
00047E9E <AmiBlitz3.ab2@27536>        Else
00047ED4 <AmiBlitz3.ab2@27537>          !ComData_SetW{comWord_CreateDebugFile,#0}         ; no we don't  tomsmart1
00047EFE <AmiBlitz3.ab2@27540>      Case "cr"                                             ; compile and run in compiler prefs
00047F0E <AmiBlitz3.ab2@27541>       mess = $12 : exit = 1
00047F38 <AmiBlitz3.ab2@27543>      Case "ce"                                             ; compile und create exe in compile prefs
00047F64 <AmiBlitz3.ab2@27544>       Poke$ (?exefilename),""
00047F74 <AmiBlitz3.ab2@27545>       mess = $13 : exit = 1
00047F9E <AmiBlitz3.ab2@27551>      Case "cancel"
00047FAE <AmiBlitz3.ab2@27552>       mess.l = $14 : exit = 1
00047FD8 <AmiBlitz3.ab2@27554>      Case "ok"
00047FE8 <AmiBlitz3.ab2@27555>       mess = $11 : exit = 1
00047FF6 <AmiBlitz3.ab2@27557>     End Select
00047FF8 <AmiBlitz3.ab2@27559>   End Select
00048020 <AmiBlitz3.ab2@27561>   If ev = $200 Then mess = $11:exit = 1
00048032 <AmiBlitz3.ab2@27562>   If mess = $11
00048064 <AmiBlitz3.ab2@27563>     For i = 1 To Peek.w(?number_of_objects)
000480BA <AmiBlitz3.ab2@27564>       a$ = WZ_GetCell{"OBJECTS",i,2}
00048110 <AmiBlitz3.ab2@27565>       i2 = Val(a$):If i2 = 0 Then i2 = 1
00048120 <AmiBlitz3.ab2@27566>       Poke.w ?maxobjects_value,i2
00048136 <AmiBlitz3.ab2@27567>       Poke.w ?maxobject_pos,i-1
0004813C <AmiBlitz3.ab2@27568>       Gosub storemaxobjects
0004814C <AmiBlitz3.ab2@27569>     Next
00048152 <AmiBlitz3.ab2@27570>     Gosub stringtores
00048164 <AmiBlitz3.ab2@27573>   If exit = 1
0004816C <AmiBlitz3.ab2@27574>     MOVE.w #$FFFF,state_of_residents                       ;load resident
0004818E <AmiBlitz3.ab2@27575>     WZ_KillTable{"OBJECTS"}
000481A2 <AmiBlitz3.ab2@27576>     WZCloseWindow 1
000481AA <AmiBlitz3.ab2@27577>     winon = 0
000481AE <AmiBlitz3.ab2@27580>   GetD0 mess
000481CC <AmiBlitz3.ab2@27581>   !asm
000481CE <AmiBlitz3.ab2@27582>   MOVEQ #-1,d7
000481D0 <AmiBlitz3.ab2@27583>   MOVE.l d0,d6
000481D2 <AmiBlitz3.ab2@27584> Return
000481FA <AmiBlitz3.ab2@27588>   i.l = WZInput("RESIDENTS")
00048222 <AmiBlitz3.ab2@27589>   a$ = Peek$(i)
0004824E <AmiBlitz3.ab2@27590>   InitArgParse a$
00048258 <AmiBlitz3.ab2@27591>   var.l = ?residents_table
00048282 <AmiBlitz3.ab2@27592>   For i = 0 To 7
000482A8 <AmiBlitz3.ab2@27593>     p$ = NextArgChar$ ($a)
000482DE <AmiBlitz3.ab2@27594>     Poke$ var,p$
000482EC <AmiBlitz3.ab2@27595>     var + $44
000482FC <AmiBlitz3.ab2@27596>   Next
000482FE <AmiBlitz3.ab2@27597> Return
00048304 <AmiBlitz3.ab2@27601>   MOVE.w maxobject_pos,D5                                  ;max objects 1. visible
0004830A <AmiBlitz3.ab2@27602>   LEA maxobjects_value,A3                                  ;current value
00048310 <AmiBlitz3.ab2@27603>   MOVEA.l libpointer,A2
00048314 <AmiBlitz3.ab2@27606>   CMPA.w #$0,A2
00048318 <AmiBlitz3.ab2@27607>   BEQ.w menu4c__igotb
0004831A <AmiBlitz3.ab2@27608>   MOVEA.l A2,A1
0004831E <AmiBlitz3.ab2@27609>   ADDA.l $12(A1),A1
00048322 <AmiBlitz3.ab2@27610>   TST.w -$2(A1)
00048326 <AmiBlitz3.ab2@27611>   BEQ.w JL_0_FFF6b
00048328 <AmiBlitz3.ab2@27612>   SUBQ.w #1,D5
0004832C <AmiBlitz3.ab2@27613>   BMI.w JL_0_FFFCb
0004832E <AmiBlitz3.ab2@27616>   MOVEA.l (A2),A2
00048332 <AmiBlitz3.ab2@27617> BRA.w JL_0_FFDAb
00048336 <AmiBlitz3.ab2@27620>   MOVE.w (A3),-$4(A1)
00048338 <AmiBlitz3.ab2@27623> RTS
0004833E <AmiBlitz3.ab2@27627>   MOVE.w debugnest,d0
00048344 <AmiBlitz3.ab2@27628>   LEA storedebugmode, a0
0004834C <AmiBlitz3.ab2@27629>   MOVE.b 0(a0,d0.w),debugmode
00048352 <AmiBlitz3.ab2@27630>   TST.w debugnest
00048356 <AmiBlitz3.ab2@27631>   BEQ JUMP_unpairrunerrs
0004835C <AmiBlitz3.ab2@27632>   SUBQ.w #1,debugnest
0004835E <AmiBlitz3.ab2@27633> RTS
00048364 <AmiBlitz3.ab2@27636> JMP runerrsoverflow
0004836A <AmiBlitz3.ab2@27639> JMP unpairrunerrs
00048372 <AmiBlitz3.ab2@27643>   BCHG #$7,use_debugger
0004837A <AmiBlitz3.ab2@27645>   BTST #$7,use_debugger
0004837E <AmiBlitz3.ab2@27646>   BNE 'debugon
00048384 <AmiBlitz3.ab2@27647>   CLR.w debugmode
00048388 <AmiBlitz3.ab2@27648> BRA.b 'debugoff
0004838E <AmiBlitz3.ab2@27651>   SNE debugmode
00048390 <AmiBlitz3.ab2@27654>   MOVE.l a0,-(a7)
000483C8 <AmiBlitz3.ab2@27657>   !ComData_SetB{comByte_DebugMode,debugmode}
000483CA <AmiBlitz3.ab2@27662>   MOVE.l (a7)+,a0
000483CC <AmiBlitz3.ab2@27663> RTS
000483D4 <AmiBlitz3.ab2@27668>   BTST #$7,use_debugger
000483D8 <AmiBlitz3.ab2@27669>   BNE 'debugon
000483DE <AmiBlitz3.ab2@27670>   CLR.w debugmode
000483E2 <AmiBlitz3.ab2@27671> BRA.b 'debugoff
000483E8 <AmiBlitz3.ab2@27674>   SNE debugmode
000483EA <AmiBlitz3.ab2@27677> RTS
000483F0 <AmiBlitz3.ab2@27681>   ADDQ.w #1,debugnest
000483F6 <AmiBlitz3.ab2@27682>   MOVE.w debugnest,d0
000483FA <AmiBlitz3.ab2@27683>   CMP.w #18,d0
000483FE <AmiBlitz3.ab2@27684>    BGE JUMP_runerrsoverflow
00048404 <AmiBlitz3.ab2@27685>   LEA storedebugmode, a0
0004840C <AmiBlitz3.ab2@27686>   MOVE.b debugmode,0( a0,d0.w)
00048412 <AmiBlitz3.ab2@27689>   SF debugmode
00048414 <AmiBlitz3.ab2@27690> RTS
00048494 <AmiBlitz3.ab2@27693> usedpath:  Ds.l 32
00048498 <AmiBlitz3.ab2@27697>   BEQ.w JUMP_syntaxerr
0004849E <AmiBlitz3.ab2@27698>   LEA lastpath,A0
000484A2 <AmiBlitz3.ab2@27699>   MOVEM.l a0-a1/d0,-(a7)
000484A8 <AmiBlitz3.ab2@27700>   LEA lastpath2,a1
000484AA <AmiBlitz3.ab2@27703>     MOVE.b (a0)+,(a1)+
000484AE <AmiBlitz3.ab2@27704>   BNE 'l2
000484B2 <AmiBlitz3.ab2@27705>   MOVEM.l (a7)+,a0-a1/d0
000484B6 <AmiBlitz3.ab2@27706>   LEA usedpath(PC),A0
000484BA <AmiBlitz3.ab2@27707>   MOVEM.l a0-a1/d0,-(a7)
000484C0 <AmiBlitz3.ab2@27708>   LEA lastpath,a1
000484C2 <AmiBlitz3.ab2@27711>     MOVE.b (a0)+,(a1)+
000484C6 <AmiBlitz3.ab2@27712>   BNE 'l1
000484CA <AmiBlitz3.ab2@27713>   MOVEM.l (a7)+,a0-a1/d0
000484CC <AmiBlitz3.ab2@27716>   TST.w D0
000484D0 <AmiBlitz3.ab2@27717>    BMI.w JUMP_syntaxerr
000484D2 <AmiBlitz3.ab2@27718>   MOVE.b D0,(A0)+
000484D6 <AmiBlitz3.ab2@27719>   BSR.w JUMP_get1bytemain
000484DA <AmiBlitz3.ab2@27720>    BNE.w JL_0_4AA8
000484DE <AmiBlitz3.ab2@27721>   MOVE.b #$2,(A0)
000484E0 <AmiBlitz3.ab2@27722> RTS
000484E4 <AmiBlitz3.ab2@27726>   BEQ.w JUMP_syntaxerr
000484EA <AmiBlitz3.ab2@27727>   LEA path2,A0
000484EC <AmiBlitz3.ab2@27737>   TST.w D0
000484F0 <AmiBlitz3.ab2@27738>    BMI.w JUMP_syntaxerr
000484F2 <AmiBlitz3.ab2@27739>   MOVE.b D0,(A0)+
000484F6 <AmiBlitz3.ab2@27740>   BSR.w JUMP_get1bytemain
000484FA <AmiBlitz3.ab2@27741>    BNE.w JL_0_4AA8b
000484FE <AmiBlitz3.ab2@27742>   MOVE.b #$2,(A0)
00048500 <AmiBlitz3.ab2@27743> RTS
00048506 <AmiBlitz3.ab2@27752> JMP errormsg_reg
00048510 <AmiBlitz3.ab2@27756>   MOVE.l #$f22d6780,fpucodeglobal
0004851A <AmiBlitz3.ab2@27757>   MOVE.l #$f22c6780,fpucodelocal
00048520 <AmiBlitz3.ab2@27758>   LEA regtable,a0
0004852A <AmiBlitz3.ab2@27759>   MOVE.l #7,maxregs
0004852C <AmiBlitz3.ab2@27762>   MOVE.l (a0),d0
00048530 <AmiBlitz3.ab2@27763>   BEQ 'e1
00048532 <AmiBlitz3.ab2@27764>   CLR.l (a0)
00048536 <AmiBlitz3.ab2@27765>   MOVE.w 4(a0),d0
00048540 <AmiBlitz3.ab2@27766>   MOVE.l fpucodeglobal,fpucode
00048544 <AmiBlitz3.ab2@27767>   TST.w 6(a0)
00048548 <AmiBlitz3.ab2@27768>   BEQ 'glob
00048552 <AmiBlitz3.ab2@27769>   MOVE.l fpucodelocal,fpucode
00048558 <AmiBlitz3.ab2@27772>   MOVE.l fpucode,d1
0004855E <AmiBlitz3.ab2@27773>   JSR writelong
00048568 <AmiBlitz3.ab2@27774>   SUB.l #$80,fpucodelocal
00048572 <AmiBlitz3.ab2@27775>   SUB.l #$80,fpucodeglobal
00048574 <AmiBlitz3.ab2@27776>   MOVE.w d0,d1
0004857A <AmiBlitz3.ab2@27777>   JSR writeword
0004857C <AmiBlitz3.ab2@27778>   ADDQ #8,a0
00048580 <AmiBlitz3.ab2@27779> BRA 'again
00048582 <AmiBlitz3.ab2@27782> RTS
00048588 <AmiBlitz3.ab2@27789> JMP notypeerr
0004858E <AmiBlitz3.ab2@27792> JMP illtypeerr
00048598 <AmiBlitz3.ab2@27795>   MOVE.l #$f22d4780,fpucodeglobal
000485A2 <AmiBlitz3.ab2@27796>   MOVE.l #$f22c4780,fpucodelocal
000485A8 <AmiBlitz3.ab2@27797>   LEA regtable,a0
000485AA <AmiBlitz3.ab2@27798>   TST.l (a0)
000485AE <AmiBlitz3.ab2@27799>    BNE JUMP_errormsg_reg
000485B0 <AmiBlitz3.ab2@27800>   MOVE.l d7,-(a7)
000485B2 <AmiBlitz3.ab2@27801>   SUBQ.l #1,a5
000485B8 <AmiBlitz3.ab2@27804>   JSR getparameter2
000485BC <AmiBlitz3.ab2@27805>   BEQ.w 'nopar
000485C2 <AmiBlitz3.ab2@27806>   MOVE.w d0,lastchar
000485C8 <AmiBlitz3.ab2@27807>   JSR findvariable
000485CC <AmiBlitz3.ab2@27808>   BNE 'islocal
000485D6 <AmiBlitz3.ab2@27809>   MOVE.l fpucodeglobal,fpucode
000485E0 <AmiBlitz3.ab2@27810>   MOVE.l #3,maxregs
000485E2 <AmiBlitz3.ab2@27811>   MOVEQ #0,d7
000485EA <AmiBlitz3.ab2@27814>   CMP.l #newtype_float,$a(a2)                              ;is float type
000485EE <AmiBlitz3.ab2@27815>    BEQ 'doit
000485F6 <AmiBlitz3.ab2@27816>   CMP.l #newtype_double,$a(a2)
000485FA <AmiBlitz3.ab2@27817>    BNE JUMP_illtypeerr
00048600 <AmiBlitz3.ab2@27820>   LEA regtable,a0
00048602 <AmiBlitz3.ab2@27821>   MOVEQ #0,d0
00048604 <AmiBlitz3.ab2@27824>   TST.l (a0)
00048608 <AmiBlitz3.ab2@27825>    BEQ 'store
0004860A <AmiBlitz3.ab2@27826>   ADDQ.l #4,d0
0004860C <AmiBlitz3.ab2@27827>   ADDQ.l #8,a0
00048612 <AmiBlitz3.ab2@27828>   CMP.l #16,d0
00048616 <AmiBlitz3.ab2@27829>    BCS 'loop
00048620 <AmiBlitz3.ab2@27830>   MOVE.l #2,maxregs
00048626 <AmiBlitz3.ab2@27831>   CMP.l #20,d0
0004862A <AmiBlitz3.ab2@27832>    BCS 'loop
00048634 <AmiBlitz3.ab2@27833>   MOVE.l #1,maxregs
0004863A <AmiBlitz3.ab2@27834>   CMP.l #24,d0
0004863E <AmiBlitz3.ab2@27835>    BCS 'loop
00048644 <AmiBlitz3.ab2@27836> JMP toovarerr
0004864A <AmiBlitz3.ab2@27839>   TST.b fpu
0004864E <AmiBlitz3.ab2@27840>    BEQ 'nofpu
00048650 <AmiBlitz3.ab2@27841>   MOVE.l a2,(a0)
00048656 <AmiBlitz3.ab2@27842>   MOVE.w 4(a2),4(a0)
0004865A <AmiBlitz3.ab2@27843>   MOVE.w d7,6(a0)
00048660 <AmiBlitz3.ab2@27844>   MOVE.l fpucode,d1
0004866A <AmiBlitz3.ab2@27845>   SUB.l #$80,fpucodeglobal
00048674 <AmiBlitz3.ab2@27846>   SUB.l #$80,fpucodelocal
0004867A <AmiBlitz3.ab2@27847>   JSR writelong
0004867E <AmiBlitz3.ab2@27848>   MOVE.w 4(a2),d1
00048684 <AmiBlitz3.ab2@27849>   JSR writeword
0004868A <AmiBlitz3.ab2@27852>   MOVE.w lastchar,d0
0004868E <AmiBlitz3.ab2@27853>   CMP.w #":",d0
00048692 <AmiBlitz3.ab2@27854>    BEQ 'nopar
00048694 <AmiBlitz3.ab2@27855>   TST.w d0
00048698 <AmiBlitz3.ab2@27856>    BEQ 'nopar
0004869C <AmiBlitz3.ab2@27857>   CMP.w #",",d0
000486A0 <AmiBlitz3.ab2@27858>   BNE JUMP_syntaxerr
000486A4 <AmiBlitz3.ab2@27859> BRA 'l2
000486A6 <AmiBlitz3.ab2@27862>    MOVE.l (a7)+,d7
000486A8 <AmiBlitz3.ab2@27863> RTS
000486AA <AmiBlitz3.ab2@27866>   MOVEQ #1,d7
000486B2 <AmiBlitz3.ab2@27867>   MOVE.b #1,newvariable
000486B8 <AmiBlitz3.ab2@27868>   LEA firstlocal,a2
000486BE <AmiBlitz3.ab2@27869>   JSR findvariable
000486C4 <AmiBlitz3.ab2@27870>   CLR.b newvariable
000486CA <AmiBlitz3.ab2@27871>   CMP.l #-1,d0
000486CE <AmiBlitz3.ab2@27872>   BEQ.w JUMP_notypeerr2
000486D8 <AmiBlitz3.ab2@27873>   MOVE.l fpucodelocal,fpucode
000486DC <AmiBlitz3.ab2@27874> BRA 'go
000486E0 <AmiBlitz3.ab2@27877>   CMP.b #".",d0
000486E4 <AmiBlitz3.ab2@27878>    BNE 'l1
000486E8 <AmiBlitz3.ab2@27879>   BSR JUMP_get1bytemain
000486EC <AmiBlitz3.ab2@27880>   BSR JUMP_get1bytemain
000486F0 <AmiBlitz3.ab2@27883>   ORI .b #$20,d0
000486F4 <AmiBlitz3.ab2@27884>   CMP.b #"d",d0
000486F8 <AmiBlitz3.ab2@27885>    BNE JUMP_illeaerr
000486FC <AmiBlitz3.ab2@27886>   BSR JUMP_get1bytemain
00048700 <AmiBlitz3.ab2@27887>   SUB.b #$30,d0
00048704 <AmiBlitz3.ab2@27888>   CMP.b #$7,d0
00048708 <AmiBlitz3.ab2@27889>    BGT JUMP_syntaxerr
0004870C <AmiBlitz3.ab2@27890>   MOVE.w #$49c0,d1
0004870E <AmiBlitz3.ab2@27891>   ADD.b d0,d1
00048714 <AmiBlitz3.ab2@27892>   JSR writeword
00048718 <AmiBlitz3.ab2@27893>   BSR JUMP_get1bytemain
0004871A <AmiBlitz3.ab2@27894> RTS
00048720 <AmiBlitz3.ab2@27898>   LEA lastpath,a0
00048724 <AmiBlitz3.ab2@27899>   LEA usedpath(PC),A1
00048726 <AmiBlitz3.ab2@27902>     MOVE.b (a0)+,(a1)+
0004872A <AmiBlitz3.ab2@27903>   BNE 'l1
00048730 <AmiBlitz3.ab2@27905>   LEA lastpath2,a0
00048736 <AmiBlitz3.ab2@27906>   LEA lastpath,A1
00048738 <AmiBlitz3.ab2@27909>     MOVE.b (a0)+,(a1)+
0004873C <AmiBlitz3.ab2@27910>   BNE 'l2
0004873E <AmiBlitz3.ab2@27911> RTS
00048744 <AmiBlitz3.ab2@27915>   TST.b objectcount
00048748 <AmiBlitz3.ab2@27916>   BEQ 'l2a
0004874E <AmiBlitz3.ab2@27917> JMP macnesterr
00048754 <AmiBlitz3.ab2@27920>   LEA devo,a0
0004875A <AmiBlitz3.ab2@27921>   ADDQ.b #1,objectcount
0004875E <AmiBlitz3.ab2@27922>   MOVEM.l a1/d2,-(a7)
00048764 <AmiBlitz3.ab2@27923>   LEA ptr_parameterstore,a1
00048766 <AmiBlitz3.ab2@27926>     MOVE.b (a0)+,(a1)+
0004876A <AmiBlitz3.ab2@27927>   BNE 'l1
0004876C <AmiBlitz3.ab2@27929>   MOVEQ #13,d2
00048772 <AmiBlitz3.ab2@27930>   JSR findlabel2
00048776 <AmiBlitz3.ab2@27931>   BNE 'd
0004877A <AmiBlitz3.ab2@27932>   TST.l 8(a2)
0004877E <AmiBlitz3.ab2@27933>   BEQ 'd
00048784 <AmiBlitz3.ab2@27934>   SUBQ.b #1,objectcount
00048788 <AmiBlitz3.ab2@27935>   MOVEM.l (a7)+,a1/d2
0004878E <AmiBlitz3.ab2@27936>   JSR skiprest
00048796 <AmiBlitz3.ab2@27937>   MOVE.b #1,developobject
00048798 <AmiBlitz3.ab2@27938> RTS
0004879C <AmiBlitz3.ab2@27941>   MOVEM.l (a7)+,a1/d2
000487A4 <AmiBlitz3.ab2@27942>   MOVE.b #1,resdisable
000487AA <AmiBlitz3.ab2@27945>   CLR.b developobject
000487B0 <AmiBlitz3.ab2@27946> JMP do_Macro
000487B6 <AmiBlitz3.ab2@27950> JMP illeaerr
000487BC <AmiBlitz3.ab2@27954>   CLR.b typecheck
000487C2 <AmiBlitz3.ab2@27955>   CLR.b declare
000487C8 <AmiBlitz3.ab2@27956>   CLR.b declare2
000487CC <AmiBlitz3.ab2@27957>   SUB.b #$30,d0
000487D0 <AmiBlitz3.ab2@27958>   BTST #0,d0
000487D4 <AmiBlitz3.ab2@27959>   BEQ 'l1
000487DC <AmiBlitz3.ab2@27960>   MOVE.b #1,declare
000487E0 <AmiBlitz3.ab2@27963>   BTST #1,d0
000487E4 <AmiBlitz3.ab2@27964>   BEQ 'l2
000487EC <AmiBlitz3.ab2@27965>   MOVE.b #1,declare2
000487F0 <AmiBlitz3.ab2@27968>   BTST #2,d0
000487F4 <AmiBlitz3.ab2@27969>   BEQ 'l3
000487FC <AmiBlitz3.ab2@27970>   MOVE.b #1,typecheck
00048800 <AmiBlitz3.ab2@27973>   BSR.w JUMP_get1bytemain
00048802 <AmiBlitz3.ab2@27974> RTS
00048808 <AmiBlitz3.ab2@27977> JMP get1bytemain
0004880A <AmiBlitz3.ab2@27982>   MOVE.l d2,-(a7)                                          ; D2 -> stack
0004880C <AmiBlitz3.ab2@27983>   ADDQ #1,a5
0004880E <AmiBlitz3.ab2@27984>   MOVE.l a5,-(a7)
00048838 <AmiBlitz3.ab2@27985>   !basic
0004883E <AmiBlitz3.ab2@27986>   MOVE.l (a7)+,d0 : _myD0.l = PutD0
00048848 <AmiBlitz3.ab2@27987>   If _myD0
00048888 <AmiBlitz3.ab2@27988>     newconst$ = UCase$(Peek.s(_myD0))
0004888E <AmiBlitz3.ab2@27989>   Else
000488BC <AmiBlitz3.ab2@27990>     error{"INTERNAL: invalid pointer in check_newconstants!"}
000488E4 <AmiBlitz3.ab2@27991>     nwconst$="xxx"
0004890C <AmiBlitz3.ab2@27993>   condata$ =""
0004891C <AmiBlitz3.ab2@27994>   Poke.b ?skip_bytes,0
00048978 <AmiBlitz3.ab2@27995>   If Left$(newconst$,2) = "__"
000489D2 <AmiBlitz3.ab2@27996>     Select Mid$(newconst$,3,4)
000489F6 <AmiBlitz3.ab2@27998>      Case "DATE"
00048A50 <AmiBlitz3.ab2@27999>       Select Mid$(newconst$,3,6)
00048A8E <AmiBlitz3.ab2@28000>       Case "DATE__" : DateFormat 1 : Poke.b ?skip_bytes,8
00048AD2 <AmiBlitz3.ab2@28001>       Case "DATE_G" : DateFormat 0 : Poke.b ?skip_bytes,12
00048AE0 <AmiBlitz3.ab2@28002>       End Select
00048AEE <AmiBlitz3.ab2@28003>       i.l=SystemDate
00048B14 <AmiBlitz3.ab2@28004>       condata$ = Date$ (i)
00048B92 <AmiBlitz3.ab2@28005>       condata$ = Replace$(condata$,"/",".")
00048BBC <AmiBlitz3.ab2@28007>      Case "VER_"
00048BCC <AmiBlitz3.ab2@28010>       actual_version.l = Peek.l(?versioninformation)
00048BDC <AmiBlitz3.ab2@28011>       actual_build.l   = Peek.l(?number_of_builds)
00048C00 <AmiBlitz3.ab2@28013>       Format ""
00048C5A <AmiBlitz3.ab2@28014>       Select Mid$(newconst$,3,9)
00048C7E <AmiBlitz3.ab2@28016>        Case "VER_MAJOR"
00048CBA <AmiBlitz3.ab2@28017>         condata$ = Str$(actual_version LSR 24)
00048CE4 <AmiBlitz3.ab2@28019>        Case "VER_MINOR"
00048D28 <AmiBlitz3.ab2@28020>         condata$ = Str$((actual_version LSL 8) LSR 24)
00048D52 <AmiBlitz3.ab2@28022>        Case "VER_PATCH"
00048D96 <AmiBlitz3.ab2@28023>         condata$ = Str$((actual_version LSL 16) LSR 24 )
00048DC0 <AmiBlitz3.ab2@28025>        Case "VER_BUILD"
00048DE4 <AmiBlitz3.ab2@28026>         Format ""
00048E18 <AmiBlitz3.ab2@28027>         condata$ = Str$(actual_build)
00048E1E <AmiBlitz3.ab2@28029>        Default
00048E46 <AmiBlitz3.ab2@28030>         condata$ = "{unknown compiler constant}"
00048E54 <AmiBlitz3.ab2@28032>       End Select
00048E78 <AmiBlitz3.ab2@28033>       Format ""
00048E88 <AmiBlitz3.ab2@28034>       Poke.b ?skip_bytes,11
00048EB2 <AmiBlitz3.ab2@28036>      Case "THIS"
00048F0C <AmiBlitz3.ab2@28037>       Select Mid$(newconst$,3,9)
00048F30 <AmiBlitz3.ab2@28039>        Case "THIS_FUNC"
00048F40 <AmiBlitz3.ab2@28040>         Poke.b ?skip_bytes,15
00048F60 <AmiBlitz3.ab2@28041>         If Peek.l(?currentfunction)<>0
00048FAC <AmiBlitz3.ab2@28042>           condata$ = Peek.s(Peek.l(?currentfunction) + 32 + #funcentry_extend + 1)
00048FB2 <AmiBlitz3.ab2@28043>         Else
00048FDA <AmiBlitz3.ab2@28044>           condata$ = "GLOBAL"
00049004 <AmiBlitz3.ab2@28047>        Case "THIS_INCL"
00049014 <AmiBlitz3.ab2@28048>         Poke.b ?skip_bytes,14
00049034 <AmiBlitz3.ab2@28049>         If Peek.l(?includetemp2)<>0
00049082 <AmiBlitz3.ab2@28050>           condata$ = dos_FilePart{Peek$(?includetemp2)}
000490AC <AmiBlitz3.ab2@28053>        Case "THIS_POIN"
000490BC <AmiBlitz3.ab2@28054>         Poke.b ?skip_bytes,14
000490DC <AmiBlitz3.ab2@28055>         If Peek.l(?currentfunction)<>0
0004910A <AmiBlitz3.ab2@28056>           condata$ = Hex$(Peek.l(?currentfunction))
00049118 <AmiBlitz3.ab2@28059>       End Select
00049142 <AmiBlitz3.ab2@28061>      Case "CODE"
00049152 <AmiBlitz3.ab2@28062>       Poke.b ?skip_bytes,10
000491B4 <AmiBlitz3.ab2@28063>       If Mid$(newconst$,3,8) = "CODELINE"
000491F0 <AmiBlitz3.ab2@28064>         condata$ = Str$(Peek.l(?globallinecount))
000491FE <AmiBlitz3.ab2@28067>     End Select
00049204 <AmiBlitz3.ab2@28069>   Else
00049258 <AmiBlitz3.ab2@28070>     Select Left$(newconst$,1)
0004927C <AmiBlitz3.ab2@28072>      Case "R"
0004928C <AmiBlitz3.ab2@28073>       Poke.b ?skip_bytes,3
00049304 <AmiBlitz3.ab2@28074>       For i = 1 To Vallong(Mid$(newconst$,2,2))
00049384 <AmiBlitz3.ab2@28075>         condata$ = condata$ + Mid$(newconst$,4,1)
00049394 <AmiBlitz3.ab2@28076>       Next
000493BE <AmiBlitz3.ab2@28078>      Case "N"
000493CE <AmiBlitz3.ab2@28079>       Poke.b ?skip_bytes,1
000493F2 <AmiBlitz3.ab2@28080>       condata$ = Chr$(10)
000493F8 <AmiBlitz3.ab2@28082>      Default
0004940A <AmiBlitz3.ab2@28083>       char1.b = Peek.b(&newconst$)
00049422 <AmiBlitz3.ab2@28084>       char2.b = Peek.b(&newconst$+1)
0004942E <AmiBlitz3.ab2@28085>       nibble1.l = -1
0004943A <AmiBlitz3.ab2@28086>       nibble2.l = -1
0004947E <AmiBlitz3.ab2@28088>       If (char1>=@"0" AND char1<=@"9") Then nibble1 = char1-@"0"
000494C2 <AmiBlitz3.ab2@28089>       If (char2>=@"0" AND char2<=@"9") Then nibble2 = char2-@"0"
0004950C <AmiBlitz3.ab2@28091>       If (char1>=@"a" AND char1<=@"f") Then nibble1 = char1-@"a" + 10
00049556 <AmiBlitz3.ab2@28092>       If (char2>=@"a" AND char2<=@"f") Then nibble2 = char2-@"a" + 10
000495A0 <AmiBlitz3.ab2@28094>       If (char1>=@"A" AND char1<=@"F") Then nibble1 = char1-@"A" + 10
000495EA <AmiBlitz3.ab2@28095>       If (char2>=@"A" AND char2<=@"F") Then nibble2 = char2-@"A" + 10
00049610 <AmiBlitz3.ab2@28097>       If nibble1>=0 AND nibble2>=0
00049626 <AmiBlitz3.ab2@28098>         newchar.l = (nibble1 LSL 4) + (nibble2)
0004964A <AmiBlitz3.ab2@28099>         condata$ = Chr$(newchar)
0004965A <AmiBlitz3.ab2@28100>         Poke.b ?skip_bytes,2
00049668 <AmiBlitz3.ab2@28103>     End Select
000496CA <AmiBlitz3.ab2@28105>   If condata$ = "" AND Peek.b(?skip_bytes)=0
000497F0 <AmiBlitz3.ab2@28106>     !cout{"detected unknown const: " + newconst$}
00049824 <AmiBlitz3.ab2@28107>     condata$ = newconst$
0004983A <AmiBlitz3.ab2@28110>   GetD0 FLen(condata$)-1                                    ; laenge zielstring -> Stack
0004983C <AmiBlitz3.ab2@28111>   MOVE.l d0,d2
0004983E <AmiBlitz3.ab2@28112>   MOVE.l d2,-(a7)
00049844 <AmiBlitz3.ab2@28114>   GetD0 &condata$                                          ; kopieren des neuen Strings in den Zielstring
00049846 <AmiBlitz3.ab2@28115>   MOVE.l d0,a0
00049848 <AmiBlitz3.ab2@28118>     MOVE.b (a0)+,d1
0004984E <AmiBlitz3.ab2@28119>     JSR pokedata1b
00049852 <AmiBlitz3.ab2@28120>  DBF d2,'l1
00049870 <AmiBlitz3.ab2@28122>   !asm
00049872 <AmiBlitz3.ab2@28123>   MOVE.l (a7)+,d0                                          ; laenge Zielstring <- Stack
00049874 <AmiBlitz3.ab2@28124>   MOVE.l (a7)+,d2                                          ; d2 <-Stack
00049876 <AmiBlitz3.ab2@28125>   ADD.l d0,d2                                              ; eingefuegte chars zu D2 dazu
0004987C <AmiBlitz3.ab2@28126>   ADD.l #1,d2
00049882 <AmiBlitz3.ab2@28128>   MOVE.l #0,d0                                             ; a5 um konstantennamen weiterschieben
00049888 <AmiBlitz3.ab2@28129>   MOVE.b skip_bytes,D0
0004988A <AmiBlitz3.ab2@28130>   ADD.l D0,a5
0004988C <AmiBlitz3.ab2@28131> RTS
0004988C <internal_commands.ab2@1> INCLUDE "internal_commands.ab2"
00049890 <internal_commands.ab2@13> .system1lib:    Dc.l AL_0_892           ;make sure if you change a instruction
00049892 <internal_commands.ab2@15>                 Dc.b $00,$01            ; Tokennumber
0004989A <internal_commands.ab2@16>                 Dc.b "NEWTYPE",0        ; Tokenname
000498A6 <internal_commands.ab2@17>                 Dc.b "<.Typename>",0    ; helptext ?
000498AA <internal_commands.ab2@21> AL_0_892:       Dc.l AL_0_8DE
000498AC <internal_commands.ab2@22>                 Dc.b $00,$02
000498B0 <internal_commands.ab2@23>                 Dc.b "End",0
000498F9 <internal_commands.ab2@24>                 Dc.b "[If|While|Select|Statement|Function|SetInt|SetErr|NEWTYPE|MACRO|d0|noa7]",0
000498FA <internal_commands.ab2@25>                 Even
000498FE <internal_commands.ab2@28> AL_0_8DE:       Dc.l AL_0_902
00049900 <internal_commands.ab2@29>                 Dc.b $00,$03
00049904 <internal_commands.ab2@30>                 Dc.b "Let",0
00049920 <internal_commands.ab2@31>                 Dc.b "<Var = Operator Expression>",0
00049924 <internal_commands.ab2@35> AL_0_902:       Dc.l AL_0_93A
00049926 <internal_commands.ab2@36>                 Dc.b $00,$04
0004992A <internal_commands.ab2@37>                 Dc.b "Dim",0
00049987 <internal_commands.ab2@38>                 Dc.b "<Arrayname> [KEEP]|[List] (Dimension1[,Dimension2..])  # KEEP : resize without loosing datas",0
00049988 <internal_commands.ab2@39>                 Even
0004998C <internal_commands.ab2@42> AL_0_93A:       Dc.l AL_0_954
0004998E <internal_commands.ab2@43>                 Dc.b $00,$05
00049993 <internal_commands.ab2@44>                 Dc.b "Goto",0
000499A3 <internal_commands.ab2@45>                 Dc.b "<Program Label>",0
000499A4 <internal_commands.ab2@46>                 Even
000499A8 <internal_commands.ab2@49> AL_0_954:       Dc.l AL_0_96E
000499AA <internal_commands.ab2@50>                 Dc.b $00,$06
000499B0 <internal_commands.ab2@51>                 Dc.b "Gosub",0
000499C0 <internal_commands.ab2@52>                 Dc.b "<Program Label>",0
000499C4 <internal_commands.ab2@56> AL_0_96E:       Dc.l AL_0_97C
000499C6 <internal_commands.ab2@57>                 Dc.b $00,$07
000499CD <internal_commands.ab2@58>                 Dc.b "Return",0
000499CE <internal_commands.ab2@59>                 Dc.b 0
000499D2 <internal_commands.ab2@63> AL_0_97C:       Dc.l AL_0_9B8
000499D4 <internal_commands.ab2@64>                 Dc.b $00,$08
000499DE <internal_commands.ab2@65>                 Dc.b "Statement",0
00049A11 <internal_commands.ab2@66>                 Dc.b "[FAST] Procedurename{[Parameter1[,Parameter2...]]}",0
00049A12 <internal_commands.ab2@67>                 Even
00049A16 <internal_commands.ab2@70> AL_0_9B8:       Dc.l AL_0_9FC
00049A18 <internal_commands.ab2@71>                 Dc.b $00,$09
00049A21 <internal_commands.ab2@72>                 Dc.b "Function",0
00049A5C <internal_commands.ab2@73>                 Dc.b "[.Type] [FAST] Procedurename{[Parameter1[,Parameter2...]]}",0
00049A60 <internal_commands.ab2@77> AL_0_9FC:       Dc.l AL_0_A0E
00049A62 <internal_commands.ab2@78>                 Dc.b $00,$0A
00049A6C <internal_commands.ab2@79>                 Dc.b "MouseWait",0
00049A6D <internal_commands.ab2@80>                 Dc.b 0
00049A6E <internal_commands.ab2@81>                 Even
00049A72 <internal_commands.ab2@84> AL_0_A0E:       Dc.l AL_0_A2C
00049A74 <internal_commands.ab2@85>                 Dc.b $00,$0B
00049A77 <internal_commands.ab2@86>                 Dc.b "If",0
00049A8E <internal_commands.ab2@87>                 Dc.b "<Expression> [Then...]",0
00049A92 <internal_commands.ab2@91> AL_0_A2C:       Dc.l AL_0_A44
00049A94 <internal_commands.ab2@92>                 Dc.b $00,$0C
00049A9A <internal_commands.ab2@93>                 Dc.b "While",0
00049AA7 <internal_commands.ab2@94>                 Dc.b "<Expression>",0
00049AA8 <internal_commands.ab2@95>                 Even
00049AAC <internal_commands.ab2@98> AL_0_A44:       Dc.l AL_0_A5A
00049AAE <internal_commands.ab2@99>                 Dc.b $00,$0D
00049AB4 <internal_commands.ab2@100>                 Dc.b "Macro",0
00049AC0 <internal_commands.ab2@101>                 Dc.b "<Macroname>",0
00049AC4 <internal_commands.ab2@105> AL_0_A5A:       Dc.l AL_0_A72
00049AC6 <internal_commands.ab2@106>                 Dc.b $00,$0E
00049ACD <internal_commands.ab2@107>                 Dc.b "Select",0
00049ADA <internal_commands.ab2@108>                 Dc.b "<Expression>",0
00049ADE <internal_commands.ab2@112> AL_0_A72:       Dc.l AL_0_A88
00049AE0 <internal_commands.ab2@113>                 Dc.b $00,$0F
00049AE5 <internal_commands.ab2@114>                 Dc.b "Case",0
00049AF2 <internal_commands.ab2@115>                 Dc.b "<Expression>",0
00049AF6 <internal_commands.ab2@119> AL_0_A88:       Dc.l AL_0_A98
00049AF8 <internal_commands.ab2@120>                 Dc.b $00,$10
00049B00 <internal_commands.ab2@121>                 Dc.b "Default",0
00049B01 <internal_commands.ab2@122>                 Dc.b 0
00049B02 <internal_commands.ab2@123>                 Even
00049B06 <internal_commands.ab2@126> AL_0_A98:       Dc.l AL_0_AA8
00049B08 <internal_commands.ab2@127>                 Dc.b $00,$11
00049B10 <internal_commands.ab2@128>                 Dc.b "AsmExit",0
00049B11 <internal_commands.ab2@129>                 Dc.b 0
00049B12 <internal_commands.ab2@130>                 Even
00049B16 <internal_commands.ab2@133> AL_0_AA8:       Dc.l AL_0_AC0
00049B18 <internal_commands.ab2@134>                 Dc.b $00,$12
00049B21 <internal_commands.ab2@135>                 Dc.b "XINCLUDE",0
00049B2C <internal_commands.ab2@136>                 Dc.b "<Filename>",0
00049B30 <internal_commands.ab2@140> AL_0_AC0:       Dc.l AL_0_AD8
00049B32 <internal_commands.ab2@141>                 Dc.b $00,$13
00049B3A <internal_commands.ab2@142>                 Dc.b "INCLUDE",0
00049B45 <internal_commands.ab2@143>                 Dc.b "<Filename>",0
00049B46 <internal_commands.ab2@144>                 Even
00049B4A <internal_commands.ab2@147> AL_0_AD8:       Dc.l AL_0_AE4
00049B4C <internal_commands.ab2@148>                 Dc.b $00,$14
00049B53 <internal_commands.ab2@149>                 Dc.b "Syntax",0
00049BB5 <internal_commands.ab2@150>                 Dc.b " <mode>   # bit0(1) vars need declaration, bit1(2) a.l=x/a$=x =declare, bit2(4) typecheck +=force",0
00049BB6 <internal_commands.ab2@151>                 Even
00049BBA <internal_commands.ab2@154> AL_0_AE4:       Dc.l AL_0_AFE
00049BBC <internal_commands.ab2@155>                 Dc.b $00,$15
00049BC3 <internal_commands.ab2@156>                 Dc.b "SHARED",0
00049BD2 <internal_commands.ab2@157>                 Dc.b "<Var[,Var...]>",0
00049BD6 <internal_commands.ab2@161> AL_0_AFE:       Dc.l AL_0_B3A
00049BD8 <internal_commands.ab2@162>                 Dc.b $00,$16
00049BDC <internal_commands.ab2@163>                 Dc.b "For",0
00049C12 <internal_commands.ab2@164>                 Dc.b "<Var = Expression1 To Expression2 [Step Expression3]>",0
00049C16 <internal_commands.ab2@168> AL_0_B3A:       Dc.l AL_0_B54
00049C18 <internal_commands.ab2@169>                 Dc.b $00,$17
00049C1D <internal_commands.ab2@170>                 Dc.b "Next",0
00049C2C <internal_commands.ab2@171>                 Dc.b "[Var[,Var...]]",0
00049C30 <internal_commands.ab2@175> AL_0_B54:       Dc.l AL_0_B7C
00049C32 <internal_commands.ab2@176>                 Dc.b $00,$18
00049C35 <internal_commands.ab2@177>                 Dc.b "To",0
00049C56 <internal_commands.ab2@178>                 Dc.b "<Expression2 [Step Expression3]>",0
00049C5A <internal_commands.ab2@182> AL_0_B7C:       Dc.l AL_0_B92
00049C5C <internal_commands.ab2@183>                 Dc.b $00,$19
00049C61 <internal_commands.ab2@184>                 Dc.b "Step",0
00049C6D <internal_commands.ab2@185>                 Dc.b "<increment>",0
00049C6E <internal_commands.ab2@186>                 Even
00049C72 <internal_commands.ab2@189> AL_0_B92:       Dc.l AL_0_BB4
00049C74 <internal_commands.ab2@190>                 Dc.b $00,$1A
00049C79 <internal_commands.ab2@191>                 Dc.b "Data",0
00049C90 <internal_commands.ab2@192>                 Dc.b "[.Type] Item[,Item...]",0
00049C94 <internal_commands.ab2@196> AL_0_BB4:       Dc.l AL_0_BCC
00049C96 <internal_commands.ab2@197>                 Dc.b $00,$1B
00049C9B <internal_commands.ab2@198>                 Dc.b "Read",0
00049CAA <internal_commands.ab2@199>                 Dc.b "<Var[,Var...]>",0
00049CAE <internal_commands.ab2@203> AL_0_BCC:       Dc.l AL_0_BF4
00049CB0 <internal_commands.ab2@204>                 Dc.b $00,$1C
00049CB5 <internal_commands.ab2@205>                 Dc.b "CNIF",0
00049CD4 <internal_commands.ab2@206>                 Dc.b "<Constant Comparison Constant>",0
00049CD8 <internal_commands.ab2@210> AL_0_BF4:       Dc.l AL_0_C1C
00049CDA <internal_commands.ab2@211>                 Dc.b $00,$1D
00049CDF <internal_commands.ab2@212>                 Dc.b "CSIF",0
00049CFE <internal_commands.ab2@213>                 Dc.b "<",34,"String",34," Comparison ",34,"String",34,">",0
00049D02 <internal_commands.ab2@217> AL_0_C1C:       Dc.l AL_0_C2A
00049D04 <internal_commands.ab2@218>                 Dc.b $00,$1E
00049D0A <internal_commands.ab2@219>                 Dc.b "CELSE",0
00049D0B <internal_commands.ab2@220>                 Dc.b 0
00049D0C <internal_commands.ab2@221>                 Even
00049D10 <internal_commands.ab2@224> AL_0_C2A:       Dc.l AL_0_C36
00049D12 <internal_commands.ab2@225>                 Dc.b $00,$1F
00049D17 <internal_commands.ab2@226>                 Dc.b "CEND",0
00049D18 <internal_commands.ab2@227>                 Dc.b 0
00049D1C <internal_commands.ab2@231> AL_0_C36:       Dc.l AL_0_C4E
00049D1E <internal_commands.ab2@232>                 Dc.b $00,$20
00049D23 <internal_commands.ab2@233>                 Dc.b "CERR",0
00049D30 <internal_commands.ab2@234>                 Dc.b "Errormessage",0
00049D34 <internal_commands.ab2@238> AL_0_C4E:       Dc.l AL_0_C66
00049D36 <internal_commands.ab2@239>                 Dc.b $00,$21
00049D3B <internal_commands.ab2@240>                 Dc.b "Then",0
00049D4A <internal_commands.ab2@241>                 Dc.b "<statement...>",0
00049D4E <internal_commands.ab2@245> AL_0_C66:       Dc.l AL_0_C80
00049D50 <internal_commands.ab2@246>                 Dc.b $00,$22
00049D55 <internal_commands.ab2@247>                 Dc.b "Else",0
00049D64 <internal_commands.ab2@248>                 Dc.b "[Statement...]",0
00049D68 <internal_commands.ab2@252> AL_0_C80:       Dc.l AL_0_CA8
00049D6A <internal_commands.ab2@253>                 Dc.b $00,$23
00049D70 <internal_commands.ab2@254>                 Dc.b "Even4",0
00049D8D <internal_commands.ab2@255>                 Dc.b "  # align to 4 byte boundary",0
00049D8E <internal_commands.ab2@256>                 Even
00049D92 <internal_commands.ab2@259> AL_0_CA8:       Dc.l AL_0_CD0
00049D94 <internal_commands.ab2@260>                 Dc.b $00,$24
00049D9A <internal_commands.ab2@261>                 Dc.b "Even8",0
00049DB7 <internal_commands.ab2@262>                 Dc.b "  # align to 8 byte boundary",0
00049DB8 <internal_commands.ab2@263>                 Even
00049DBC <internal_commands.ab2@266> AL_0_CD0:       Dc.l AL_0_CF0
00049DBE <internal_commands.ab2@267>                 Dc.b $00,$25
00049DC1 <internal_commands.ab2@268>                 Dc.b "Dc",0
00049DD8 <internal_commands.ab2@269>                 Dc.b "[.Size] Data[,Data...]",0
00049DDC <internal_commands.ab2@273> AL_0_CF0:       Dc.l AL_0_D08
00049DDE <internal_commands.ab2@274>                 Dc.b $00,$26
00049DE1 <internal_commands.ab2@275>                 Dc.b "Ds",0
00049DF0 <internal_commands.ab2@276>                 Dc.b "[.Size] Length",0
00049DF4 <internal_commands.ab2@280> AL_0_D08:       Dc.l AL_0_D14
00049DF6 <internal_commands.ab2@281>                 Dc.b $00,$27
00049DFB <internal_commands.ab2@282>                 Dc.b "Even",0
00049DFC <internal_commands.ab2@283>                 Dc.b 0
00049E00 <internal_commands.ab2@287> AL_0_D14:       Dc.l AL_0_D34
00049E02 <internal_commands.ab2@288>                 Dc.b $00,$28
00049E06 <internal_commands.ab2@289>                 Dc.b "Dcb",0
00049E1B <internal_commands.ab2@290>                 Dc.b "[.Size] Repeats,Data",0
00049E1C <internal_commands.ab2@291>                 Even
00049E20 <internal_commands.ab2@294> AL_0_D34:       Dc.l AL_0_D56
00049E22 <internal_commands.ab2@295>                 Dc.b $00,$29
00049E29 <internal_commands.ab2@296>                 Dc.b "GetReg",0
00049E42 <internal_commands.ab2@297>                 Dc.b "<68000 Reg>,<Expression>",0
00049E46 <internal_commands.ab2@301> AL_0_D56:       Dc.l AL_0_D6C
00049E48 <internal_commands.ab2@302>                 Dc.b $00,$2A
00049E4F <internal_commands.ab2@303>                 Dc.b "IncBin",0
00049E5A <internal_commands.ab2@304>                 Dc.b "<Filename>",0
00049E5E <internal_commands.ab2@308> AL_0_D6C:       Dc.l AL_0_D8A
00049E60 <internal_commands.ab2@309>                 Dc.b $00,$2B
00049E65 <internal_commands.ab2@310>                 Dc.b "Free",0
00049E7C <internal_commands.ab2@311>                 Dc.b "<Objectname> <Object#>",0
00049E80 <internal_commands.ab2@315> AL_0_D8A:       Dc.l AL_0_DA8
00049E82 <internal_commands.ab2@316>                 Dc.b $00,$2C
00049E86 <internal_commands.ab2@317>                 Dc.b "Use",0
00049E9D <internal_commands.ab2@318>                 Dc.b "<Objectname> <Object#>",0
00049E9E <internal_commands.ab2@319>                 Even
00049EA2 <internal_commands.ab2@322> AL_0_DA8:       Dc.l AL_0_DB4
00049EA4 <internal_commands.ab2@323>                 Dc.b $00,$2D
00049EA9 <internal_commands.ab2@324>                 Dc.b "Stop",0
00049EAA <internal_commands.ab2@325>                 Dc.b 0
00049EAE <internal_commands.ab2@329> AL_0_DB4:       Dc.l AL_0_DC4
00049EB0 <internal_commands.ab2@330>                 Dc.b $00,$2E
00049EB5 <internal_commands.ab2@331>                 Dc.b "Cont",0
00049EB9 <internal_commands.ab2@332>                 Dc.b "[N]",0
00049EBA <internal_commands.ab2@333>                 Even
00049EBE <internal_commands.ab2@336> AL_0_DC4:       Dc.l AL_0_DE8
00049EC0 <internal_commands.ab2@337>                 Dc.b $00,$2F
00049EC7 <internal_commands.ab2@338>                 Dc.b "SizeOf",0
00049EDF <internal_commands.ab2@339>                 Dc.b "<.Typename[,Entrypath]>",0
00049EE0 <internal_commands.ab2@340>                 Even
00049EE4 <internal_commands.ab2@343> AL_0_DE8:       Dc.l AL_0_DFA
00049EE6 <internal_commands.ab2@344>                 Dc.b $00,$30
00049EED <internal_commands.ab2@345>                 Dc.b "SetInt",0
00049EF2 <internal_commands.ab2@346>                 Dc.b "Type",0
00049EF6 <internal_commands.ab2@350> AL_0_DFA:       Dc.l AL_0_E0C
00049EF8 <internal_commands.ab2@351>                 Dc.b $00,$31
00049EFF <internal_commands.ab2@352>                 Dc.b "ClrInt",0
00049F04 <internal_commands.ab2@353>                 Dc.b "Type",0
00049F08 <internal_commands.ab2@357> AL_0_E0C:       Dc.l AL_0_E2E
00049F0A <internal_commands.ab2@358>                 Dc.b $00,$32
00049F11 <internal_commands.ab2@359>                 Dc.b "MaxLen",0
00049F2C <internal_commands.ab2@360>                 Dc.b "<StringVar> = <Expression>",0
00049F30 <internal_commands.ab2@364> AL_0_E2E:       Dc.l AL_0_E56
00049F32 <internal_commands.ab2@365>                 Dc.b $00,$33
00049F3A <internal_commands.ab2@366>                 Dc.b "DEFTYPE",0
00049F53 <internal_commands.ab2@367>                 Dc.b ".Typename [Var[,Var...]]",0
00049F54 <internal_commands.ab2@368>                 Even
00049F58 <internal_commands.ab2@371> AL_0_E56:       Dc.l AL_0_E64
00049F5A <internal_commands.ab2@372>                 Dc.b $00,$34
00049F60 <internal_commands.ab2@373>                 Dc.b "BLITZ",0
00049F61 <internal_commands.ab2@374>                 Dc.b 0
00049F62 <internal_commands.ab2@375>                 Even
00049F66 <internal_commands.ab2@378> AL_0_E64:       Dc.l AL_0_E72
00049F68 <internal_commands.ab2@379>                 Dc.b $00,$35
00049F6E <internal_commands.ab2@380>                 Dc.b "AMIGA",0
00049F6F <internal_commands.ab2@381>                 Dc.b 0
00049F70 <internal_commands.ab2@382>                 Even
00049F74 <internal_commands.ab2@385> AL_0_E72:       Dc.l AL_0_E80
00049F76 <internal_commands.ab2@386>                 Dc.b $00,$36
00049F7D <internal_commands.ab2@387>                 Dc.b "QAMIGA",0
00049F7E <internal_commands.ab2@388>                 Dc.b 0
00049F82 <internal_commands.ab2@392> AL_0_E80:       Dc.l AL_0_E96
00049F84 <internal_commands.ab2@393>                 Dc.b $00,$37
00049F8A <internal_commands.ab2@394>                 Dc.b "VWait",0
00049F93 <internal_commands.ab2@395>                 Dc.b "[Frames]",0
00049F94 <internal_commands.ab2@396>                 Even
00049F98 <internal_commands.ab2@399> AL_0_E96:       Dc.l AL_0_EB2
00049F9A <internal_commands.ab2@400>                 Dc.b $00,$38
00049FA2 <internal_commands.ab2@401>                 Dc.b "ALibJsr",0
00049FAF <internal_commands.ab2@402>                 Dc.b "Token[,Form]",0
00049FB0 <internal_commands.ab2@403>                 Even
00049FB4 <internal_commands.ab2@406> AL_0_EB2:       Dc.l AL_0_ECE
00049FB6 <internal_commands.ab2@407>                 Dc.b $00,$39
00049FBE <internal_commands.ab2@408>                 Dc.b "TokeJsr",0
00049FCB <internal_commands.ab2@409>                 Dc.b "Token[,Form]",0
00049FCC <internal_commands.ab2@410>                 Even
00049FD0 <internal_commands.ab2@413> AL_0_ECE:       Dc.l AL_0_EEA
00049FD2 <internal_commands.ab2@414>                 Dc.b $00,$3A
00049FDA <internal_commands.ab2@415>                 Dc.b "BLibJsr",0
00049FE7 <internal_commands.ab2@416>                 Dc.b "Token[,Form]",0
00049FE8 <internal_commands.ab2@417>                 Even
00049FEC <internal_commands.ab2@420> AL_0_EEA:       Dc.l opabcd
00049FEE <internal_commands.ab2@421>                 Dc.b $00,$3B
00049FF3 <internal_commands.ab2@422>                 Dc.b "EXTB",0
00049FF4 <internal_commands.ab2@423>                 Dc.b 0
00049FF8 <internal_commands.ab2@437> opabcd:         Dc.l opadd
00049FFA <internal_commands.ab2@438>                 Dc.b $00,$3C
00049FFF <internal_commands.ab2@439>                 Dc.b "ABCD",0
0004A000 <internal_commands.ab2@440>                 Dc.b 0
0004A002 <internal_commands.ab2@443>                 Dc.w $C100
0004A006 <internal_commands.ab2@444>                 Dc.w $0011,$0011
0004A008 <internal_commands.ab2@445>                 Dc.b $90,$00
0004A00A <internal_commands.ab2@446>                 Dc.w $FFF0
0004A00E <internal_commands.ab2@447>                 Dc.l _abcdchk
0004A010 <internal_commands.ab2@448>                 Dc.w $0000
0004A014 <internal_commands.ab2@452> opadd:          Dc.l opaddi
0004A016 <internal_commands.ab2@453>                 Dc.b $00,$3D
0004A01A <internal_commands.ab2@454>                 Dc.b "ADD",0
0004A01B <internal_commands.ab2@455>                 Dc.b 0
0004A01C <internal_commands.ab2@456>                 Even
0004A01E <internal_commands.ab2@458>                 Dc.w $D000
0004A022 <internal_commands.ab2@459>                 Dc.w $0FFF,$01FD
0004A024 <internal_commands.ab2@460>                 Dc.b $03,$9F
0004A026 <internal_commands.ab2@461>                 Dc.w $6210
0004A02A <internal_commands.ab2@462>                 Dc.l _addchk
0004A02C <internal_commands.ab2@463>                 Dc.w $8003
0004A030 <internal_commands.ab2@467> opaddi:         Dc.l opadda
0004A032 <internal_commands.ab2@468>                 Dc.b $00,$3E
0004A037 <internal_commands.ab2@469>                 Dc.b "ADDI",0
0004A038 <internal_commands.ab2@470>                 Dc.b 0
0004A03A <internal_commands.ab2@473>                 Dc.w $0600
0004A03E <internal_commands.ab2@474>                 Dc.w $0800,$01FD
0004A040 <internal_commands.ab2@475>                 Dc.b $FF,$03
0004A042 <internal_commands.ab2@476>                 Dc.w $6210
0004A046 <internal_commands.ab2@477>                 Dc.l $00000000
0004A048 <internal_commands.ab2@478>                 Dc.w $0000
0004A04C <internal_commands.ab2@482> opadda:         Dc.l opaddq
0004A04E <internal_commands.ab2@483>                 Dc.b $00,$3F
0004A053 <internal_commands.ab2@484>                 Dc.b "ADDA",0
0004A054 <internal_commands.ab2@485>                 Dc.b 0
0004A056 <internal_commands.ab2@488>                 Dc.w $D0C0
0004A05A <internal_commands.ab2@489>                 Dc.w $0FFF,$0002
0004A05C <internal_commands.ab2@490>                 Dc.b $03,$9F
0004A05E <internal_commands.ab2@491>                 Dc.w $810F
0004A062 <internal_commands.ab2@492>                 Dc.l $00000000
0004A064 <internal_commands.ab2@493>                 Dc.w $0000
0004A068 <internal_commands.ab2@497> opaddq:         Dc.l opaddx
0004A06A <internal_commands.ab2@498>                 Dc.b $00,$40
0004A06F <internal_commands.ab2@499>                 Dc.b "ADDQ",0
0004A070 <internal_commands.ab2@500>                 Dc.b 0
0004A072 <internal_commands.ab2@503>                 Dc.w $5000
0004A076 <internal_commands.ab2@504>                 Dc.w $0800,$01FF
0004A078 <internal_commands.ab2@505>                 Dc.b $FF,$03
0004A07A <internal_commands.ab2@506>                 Dc.w $6210
0004A07E <internal_commands.ab2@507>                 Dc.l $00000000
0004A080 <internal_commands.ab2@508>                 Dc.w $0001
0004A084 <internal_commands.ab2@512> opaddx:         Dc.l opand
0004A086 <internal_commands.ab2@513>                 Dc.b $00,$41
0004A08B <internal_commands.ab2@514>                 Dc.b "ADDX",0
0004A08C <internal_commands.ab2@515>                 Dc.b 0
0004A08E <internal_commands.ab2@518>                 Dc.w $D100
0004A092 <internal_commands.ab2@519>                 Dc.w $0011,$0011
0004A094 <internal_commands.ab2@520>                 Dc.b $0F,$9F
0004A096 <internal_commands.ab2@521>                 Dc.w $6210
0004A09A <internal_commands.ab2@522>                 Dc.l _abcdchk
0004A09C <internal_commands.ab2@523>                 Dc.w $0000
0004A0A0 <internal_commands.ab2@527> opand:          Dc.l opandi
0004A0A2 <internal_commands.ab2@528>                 Dc.b $00,$42
0004A0A6 <internal_commands.ab2@529>                 Dc.b "AND",0
0004A0A7 <internal_commands.ab2@530>                 Dc.b 0
0004A0A8 <internal_commands.ab2@531>                 Even
0004A0AA <internal_commands.ab2@533>                 Dc.w $C000
0004A0AE <internal_commands.ab2@534>                 Dc.w $0FFD,$01FD
0004A0B0 <internal_commands.ab2@535>                 Dc.b $03,$9F
0004A0B2 <internal_commands.ab2@536>                 Dc.w $6210
0004A0B6 <internal_commands.ab2@537>                 Dc.l _addchk
0004A0B8 <internal_commands.ab2@538>                 Dc.w $0000
0004A0BC <internal_commands.ab2@542> opandi:         Dc.l opasl
0004A0BE <internal_commands.ab2@543>                 Dc.b $00,$43
0004A0C3 <internal_commands.ab2@544>                 Dc.b "ANDI",0
0004A0C4 <internal_commands.ab2@545>                 Dc.b 0
0004A0C6 <internal_commands.ab2@548>                 Dc.w $0200
0004A0CA <internal_commands.ab2@549>                 Dc.w $0800,$39FD
0004A0CC <internal_commands.ab2@550>                 Dc.b $FF,$03
0004A0CE <internal_commands.ab2@551>                 Dc.w $6210
0004A0D2 <internal_commands.ab2@552>                 Dc.l _andichk
0004A0D4 <internal_commands.ab2@553>                 Dc.w $0000
0004A0D8 <internal_commands.ab2@557> opasl:          Dc.l opasr
0004A0DA <internal_commands.ab2@558>                 Dc.b $00,$44
0004A0DE <internal_commands.ab2@559>                 Dc.b "ASL",0
0004A0DF <internal_commands.ab2@560>                 Dc.b 0
0004A0E0 <internal_commands.ab2@561>                 Even
0004A0E2 <internal_commands.ab2@563>                 Dc.w $E100
0004A0E6 <internal_commands.ab2@564>                 Dc.w $09FD,$0001
0004A0E8 <internal_commands.ab2@565>                 Dc.b $FF,$FF
0004A0EA <internal_commands.ab2@566>                 Dc.w $F210
0004A0EE <internal_commands.ab2@567>                 Dc.l _aslchk
0004A0F0 <internal_commands.ab2@568>                 Dc.w $0001
0004A0F4 <internal_commands.ab2@572> opasr:          Dc.l opbcc
0004A0F6 <internal_commands.ab2@573>                 Dc.b $00,$45
0004A0FA <internal_commands.ab2@574>                 Dc.b "ASR",0
0004A0FB <internal_commands.ab2@575>                 Dc.b 0
0004A0FC <internal_commands.ab2@576>                 Even
0004A0FE <internal_commands.ab2@578>                 Dc.w $E000
0004A102 <internal_commands.ab2@579>                 Dc.w $09FD,$0001
0004A104 <internal_commands.ab2@580>                 Dc.b $FF,$FF
0004A106 <internal_commands.ab2@581>                 Dc.w $F210
0004A10A <internal_commands.ab2@582>                 Dc.l _aslchk
0004A10C <internal_commands.ab2@583>                 Dc.w $0001
0004A110 <internal_commands.ab2@587> opbcc:          Dc.l opbcs
0004A112 <internal_commands.ab2@588>                 Dc.b $00,$46
0004A116 <internal_commands.ab2@589>                 Dc.b "BCC",0
0004A117 <internal_commands.ab2@590>                 Dc.b 0
0004A118 <internal_commands.ab2@591>                 Even
0004A11A <internal_commands.ab2@593>                 Dc.w $6400
0004A11E <internal_commands.ab2@594>                 Dc.w $0200,$0000
0004A120 <internal_commands.ab2@595>                 Dc.b $FF,$FF
0004A122 <internal_commands.ab2@596>                 Dc.w $F000
0004A126 <internal_commands.ab2@597>                 Dc.l $00000000
0004A128 <internal_commands.ab2@598>                 Dc.w $0002
0004A12C <internal_commands.ab2@602> opbcs:          Dc.l opbeq
0004A12E <internal_commands.ab2@603>                 Dc.b $00,$47
0004A132 <internal_commands.ab2@604>                 Dc.b "BCS",0
0004A133 <internal_commands.ab2@605>                 Dc.b 0
0004A134 <internal_commands.ab2@606>                 Even
0004A136 <internal_commands.ab2@608>                 Dc.w $6500
0004A13A <internal_commands.ab2@609>                 Dc.w $0200,$0000
0004A13C <internal_commands.ab2@610>                 Dc.b $FF,$FF
0004A13E <internal_commands.ab2@611>                 Dc.w $F000
0004A142 <internal_commands.ab2@612>                 Dc.l $00000000
0004A144 <internal_commands.ab2@613>                 Dc.w $0002
0004A148 <internal_commands.ab2@617> opbeq:          Dc.l opbqe
0004A14A <internal_commands.ab2@618>                 Dc.b $00,$48
0004A14E <internal_commands.ab2@619>                 Dc.b "BEQ",0
0004A14F <internal_commands.ab2@620>                 Dc.b 0
0004A150 <internal_commands.ab2@621>                 Even
0004A152 <internal_commands.ab2@623>                 Dc.w $6700
0004A156 <internal_commands.ab2@624>                 Dc.w $0200,$0000
0004A158 <internal_commands.ab2@625>                 Dc.b $FF,$FF
0004A15A <internal_commands.ab2@626>                 Dc.w $F000
0004A15E <internal_commands.ab2@627>                 Dc.l $00000000
0004A160 <internal_commands.ab2@628>                 Dc.w $0002
0004A164 <internal_commands.ab2@632> opbqe:          Dc.l opbgt
0004A166 <internal_commands.ab2@633>                 Dc.b $00,$49
0004A16A <internal_commands.ab2@634>                 Dc.b "BGE",0
0004A16B <internal_commands.ab2@635>                 Dc.b 0
0004A16C <internal_commands.ab2@636>                 Even
0004A16E <internal_commands.ab2@638>                 Dc.w $6C00
0004A172 <internal_commands.ab2@639>                 Dc.w $0200,$0000
0004A174 <internal_commands.ab2@640>                 Dc.b $FF,$FF
0004A176 <internal_commands.ab2@641>                 Dc.w $F000
0004A17A <internal_commands.ab2@642>                 Dc.l $00000000
0004A17C <internal_commands.ab2@643>                 Dc.w $0002
0004A180 <internal_commands.ab2@647> opbgt:          Dc.l opbhi
0004A182 <internal_commands.ab2@648>                 Dc.b $00,$4A
0004A186 <internal_commands.ab2@649>                 Dc.b "BGT",0
0004A187 <internal_commands.ab2@650>                 Dc.b 0
0004A188 <internal_commands.ab2@651>                 Even
0004A18A <internal_commands.ab2@653>                 Dc.w $6E00
0004A18E <internal_commands.ab2@654>                 Dc.w $0200,$0000
0004A190 <internal_commands.ab2@655>                 Dc.b $FF,$FF
0004A192 <internal_commands.ab2@656>                 Dc.w $F000
0004A196 <internal_commands.ab2@657>                 Dc.l $00000000
0004A198 <internal_commands.ab2@658>                 Dc.w $0002
0004A19C <internal_commands.ab2@662> opbhi:          Dc.l opble
0004A19E <internal_commands.ab2@663>                 Dc.b $00,$4B
0004A1A2 <internal_commands.ab2@664>                 Dc.b "BHI",0
0004A1A3 <internal_commands.ab2@665>                 Dc.b 0
0004A1A4 <internal_commands.ab2@666>                 Even
0004A1A6 <internal_commands.ab2@668>                 Dc.w $6200
0004A1AA <internal_commands.ab2@669>                 Dc.w $0200,$0000
0004A1AC <internal_commands.ab2@670>                 Dc.b $FF,$FF
0004A1AE <internal_commands.ab2@671>                 Dc.w $F000
0004A1B2 <internal_commands.ab2@672>                 Dc.l $00000000
0004A1B4 <internal_commands.ab2@673>                 Dc.w $0002
0004A1B8 <internal_commands.ab2@677> opble:          Dc.l opbls
0004A1BA <internal_commands.ab2@678>                 Dc.b $00,$4C
0004A1BE <internal_commands.ab2@679>                 Dc.b "BLE",0
0004A1BF <internal_commands.ab2@680>                 Dc.b 0
0004A1C0 <internal_commands.ab2@681>                 Even
0004A1C2 <internal_commands.ab2@683>                 Dc.w $6F00
0004A1C6 <internal_commands.ab2@684>                 Dc.w $0200,$0000
0004A1C8 <internal_commands.ab2@685>                 Dc.b $FF,$FF
0004A1CA <internal_commands.ab2@686>                 Dc.w $F000
0004A1CE <internal_commands.ab2@687>                 Dc.l $00000000
0004A1D0 <internal_commands.ab2@688>                 Dc.w $0002
0004A1D4 <internal_commands.ab2@692> opbls:          Dc.l opblt
0004A1D6 <internal_commands.ab2@693>                 Dc.b $00,$4D
0004A1DA <internal_commands.ab2@694>                 Dc.b "BLS",0
0004A1DB <internal_commands.ab2@695>                 Dc.b 0
0004A1DC <internal_commands.ab2@696>                 Even
0004A1DE <internal_commands.ab2@698>                 Dc.w $6300
0004A1E2 <internal_commands.ab2@699>                 Dc.w $0200,$0000
0004A1E4 <internal_commands.ab2@700>                 Dc.b $FF,$FF
0004A1E6 <internal_commands.ab2@701>                 Dc.w $F000
0004A1EA <internal_commands.ab2@702>                 Dc.l $00000000
0004A1EC <internal_commands.ab2@703>                 Dc.w $0002
0004A1F0 <internal_commands.ab2@707> opblt:          Dc.l opbmi
0004A1F2 <internal_commands.ab2@708>                 Dc.b $00,$4E
0004A1F6 <internal_commands.ab2@709>                 Dc.b "BLT",0
0004A1F7 <internal_commands.ab2@710>                 Dc.b 0
0004A1F8 <internal_commands.ab2@711>                 Even
0004A1FA <internal_commands.ab2@713>                 Dc.w $6D00
0004A1FE <internal_commands.ab2@714>                 Dc.w $0200,$0000
0004A200 <internal_commands.ab2@715>                 Dc.b $FF,$FF
0004A202 <internal_commands.ab2@716>                 Dc.w $F000
0004A206 <internal_commands.ab2@717>                 Dc.l $00000000
0004A208 <internal_commands.ab2@718>                 Dc.w $0002
0004A20C <internal_commands.ab2@722> opbmi:          Dc.l opbne
0004A20E <internal_commands.ab2@723>                 Dc.b $00,$4F
0004A212 <internal_commands.ab2@724>                 Dc.b "BMI",0
0004A213 <internal_commands.ab2@725>                 Dc.b 0
0004A214 <internal_commands.ab2@726>                 Even
0004A216 <internal_commands.ab2@728>                 Dc.w $6B00
0004A21A <internal_commands.ab2@729>                 Dc.w $0200,$0000
0004A21C <internal_commands.ab2@730>                 Dc.b $FF,$FF
0004A21E <internal_commands.ab2@731>                 Dc.w $F000
0004A222 <internal_commands.ab2@732>                 Dc.l $00000000
0004A224 <internal_commands.ab2@733>                 Dc.w $0002
0004A228 <internal_commands.ab2@737> opbne:          Dc.l opbpl
0004A22A <internal_commands.ab2@738>                 Dc.b $00,$50
0004A22E <internal_commands.ab2@739>                 Dc.b "BNE",0
0004A22F <internal_commands.ab2@740>                 Dc.b 0
0004A230 <internal_commands.ab2@741>                 Even
0004A232 <internal_commands.ab2@743>                 Dc.w $6600
0004A236 <internal_commands.ab2@744>                 Dc.w $0200,$0000
0004A238 <internal_commands.ab2@745>                 Dc.b $FF,$FF
0004A23A <internal_commands.ab2@746>                 Dc.w $F000
0004A23E <internal_commands.ab2@747>                 Dc.l $00000000
0004A240 <internal_commands.ab2@748>                 Dc.w $0002
0004A244 <internal_commands.ab2@752> opbpl:          Dc.l opbvc
0004A246 <internal_commands.ab2@753>                 Dc.b $00,$51
0004A24A <internal_commands.ab2@754>                 Dc.b "BPL",0
0004A24B <internal_commands.ab2@755>                 Dc.b 0
0004A24C <internal_commands.ab2@756>                 Even
0004A24E <internal_commands.ab2@758>                 Dc.w $6A00
0004A252 <internal_commands.ab2@759>                 Dc.w $0200,$0000
0004A254 <internal_commands.ab2@760>                 Dc.b $FF,$FF
0004A256 <internal_commands.ab2@761>                 Dc.w $F000
0004A25A <internal_commands.ab2@762>                 Dc.l $00000000
0004A25C <internal_commands.ab2@763>                 Dc.w $0002
0004A260 <internal_commands.ab2@767> opbvc:          Dc.l opbvs
0004A262 <internal_commands.ab2@768>                 Dc.b $00,$52
0004A266 <internal_commands.ab2@769>                 Dc.b "BVC",0
0004A267 <internal_commands.ab2@770>                 Dc.b 0
0004A268 <internal_commands.ab2@771>                 Even
0004A26A <internal_commands.ab2@773>                 Dc.w $6800
0004A26E <internal_commands.ab2@774>                 Dc.w $0200,$0000
0004A270 <internal_commands.ab2@775>                 Dc.b $FF,$FF
0004A272 <internal_commands.ab2@776>                 Dc.w $F000
0004A276 <internal_commands.ab2@777>                 Dc.l $00000000
0004A278 <internal_commands.ab2@778>                 Dc.w $0002
0004A27C <internal_commands.ab2@782> opbvs:          Dc.l opbchg
0004A27E <internal_commands.ab2@783>                 Dc.b $00,$53
0004A282 <internal_commands.ab2@784>                 Dc.b "BVS",0
0004A283 <internal_commands.ab2@785>                 Dc.b 0
0004A284 <internal_commands.ab2@786>                 Even
0004A286 <internal_commands.ab2@788>                 Dc.w $6900
0004A28A <internal_commands.ab2@789>                 Dc.w $0200,$0000
0004A28C <internal_commands.ab2@790>                 Dc.b $FF,$FF
0004A28E <internal_commands.ab2@791>                 Dc.w $F000
0004A292 <internal_commands.ab2@792>                 Dc.l $00000000
0004A294 <internal_commands.ab2@793>                 Dc.w $0002
0004A298 <internal_commands.ab2@797> opbchg:         Dc.l opbclr
0004A29A <internal_commands.ab2@798>                 Dc.b $00,$54
0004A29F <internal_commands.ab2@799>                 Dc.b "BCHG",0
0004A2A0 <internal_commands.ab2@800>                 Dc.b 0
0004A2A2 <internal_commands.ab2@803>                 Dc.w $0140
0004A2A6 <internal_commands.ab2@804>                 Dc.w $0801,$01FD
0004A2A8 <internal_commands.ab2@805>                 Dc.b $FF,$03
0004A2AA <internal_commands.ab2@806>                 Dc.w $F210
0004A2AE <internal_commands.ab2@807>                 Dc.l _bitchk
0004A2B0 <internal_commands.ab2@808>                 Dc.w $0000
0004A2B4 <internal_commands.ab2@812> opbclr:         Dc.l opbset
0004A2B6 <internal_commands.ab2@813>                 Dc.b $00,$55
0004A2BB <internal_commands.ab2@814>                 Dc.b "BCLR",0
0004A2BC <internal_commands.ab2@815>                 Dc.b 0
0004A2BE <internal_commands.ab2@818>                 Dc.w $0180
0004A2C2 <internal_commands.ab2@819>                 Dc.w $0801,$01FD
0004A2C4 <internal_commands.ab2@820>                 Dc.b $FF,$03
0004A2C6 <internal_commands.ab2@821>                 Dc.w $F210
0004A2CA <internal_commands.ab2@822>                 Dc.l _bitchk
0004A2CC <internal_commands.ab2@823>                 Dc.w $0000
0004A2D0 <internal_commands.ab2@827> opbset:         Dc.l opbtst
0004A2D2 <internal_commands.ab2@828>                 Dc.b $00,$56
0004A2D7 <internal_commands.ab2@829>                 Dc.b "BSET",0
0004A2D8 <internal_commands.ab2@830>                 Dc.b 0
0004A2DA <internal_commands.ab2@833>                 Dc.w $01C0
0004A2DE <internal_commands.ab2@834>                 Dc.w $0801,$01FD
0004A2E0 <internal_commands.ab2@835>                 Dc.b $FF,$03
0004A2E2 <internal_commands.ab2@836>                 Dc.w $F210
0004A2E6 <internal_commands.ab2@837>                 Dc.l _bitchk
0004A2E8 <internal_commands.ab2@838>                 Dc.w $0000
0004A2EC <internal_commands.ab2@842> opbtst:         Dc.l opbra
0004A2EE <internal_commands.ab2@843>                 Dc.b $00,$57
0004A2F3 <internal_commands.ab2@844>                 Dc.b "BTST",0
0004A2F4 <internal_commands.ab2@845>                 Dc.b 0
0004A2F6 <internal_commands.ab2@848>                 Dc.w $0100
0004A2FA <internal_commands.ab2@849>                 Dc.w $0801,$01FD
0004A2FC <internal_commands.ab2@850>                 Dc.b $FF,$03
0004A2FE <internal_commands.ab2@851>                 Dc.w $F210
0004A302 <internal_commands.ab2@852>                 Dc.l _bitchk
0004A304 <internal_commands.ab2@853>                 Dc.w $0000
0004A308 <internal_commands.ab2@857> opbra:          Dc.l opbsr
0004A30A <internal_commands.ab2@858>                 Dc.b $00,$58
0004A30E <internal_commands.ab2@859>                 Dc.b "BRA",0
0004A30F <internal_commands.ab2@860>                 Dc.b 0
0004A310 <internal_commands.ab2@861>                 Even
0004A312 <internal_commands.ab2@863>                 Dc.w $6000
0004A316 <internal_commands.ab2@864>                 Dc.w $0200,$0000
0004A318 <internal_commands.ab2@865>                 Dc.b $FF,$FF
0004A31A <internal_commands.ab2@866>                 Dc.w $0000                                 ;dc.w $FFFF
0004A31E <internal_commands.ab2@867>                 Dc.l $00000000
0004A320 <internal_commands.ab2@868>                 Dc.w $0002
0004A324 <internal_commands.ab2@872> opbsr:          Dc.l opchk
0004A326 <internal_commands.ab2@873>                 Dc.b $00,$59
0004A32A <internal_commands.ab2@874>                 Dc.b "BSR",0
0004A32B <internal_commands.ab2@875>                 Dc.b 0
0004A32C <internal_commands.ab2@876>                 Even
0004A32E <internal_commands.ab2@878>                 Dc.w $6100
0004A332 <internal_commands.ab2@879>                 Dc.w $0200,$0000
0004A334 <internal_commands.ab2@880>                 Dc.b $FF,$FF
0004A336 <internal_commands.ab2@881>                 Dc.w $0000                                 ;dc.w $FFFF
0004A33A <internal_commands.ab2@882>                 Dc.l $00000000
0004A33C <internal_commands.ab2@883>                 Dc.w $0002
0004A340 <internal_commands.ab2@887> opchk:          Dc.l opclr
0004A342 <internal_commands.ab2@888>                 Dc.b $00,$5A
0004A346 <internal_commands.ab2@889>                 Dc.b "CHK",0
0004A347 <internal_commands.ab2@890>                 Dc.b 0
0004A348 <internal_commands.ab2@891>                 Even
0004A34A <internal_commands.ab2@893>                 Dc.w $4180
0004A34E <internal_commands.ab2@894>                 Dc.w $0FFD,$0001
0004A350 <internal_commands.ab2@895>                 Dc.b $03,$9F
0004A352 <internal_commands.ab2@896>                 Dc.w $FF1F
0004A356 <internal_commands.ab2@897>                 Dc.l $00000000
0004A358 <internal_commands.ab2@898>                 Dc.w $0000
0004A35C <internal_commands.ab2@902> opclr:          Dc.l opcmp
0004A35E <internal_commands.ab2@903>                 Dc.b $00,$5B
0004A362 <internal_commands.ab2@904>                 Dc.b "CLR",0
0004A363 <internal_commands.ab2@905>                 Dc.b 0
0004A364 <internal_commands.ab2@906>                 Even
0004A366 <internal_commands.ab2@908>                 Dc.w $4200
0004A36A <internal_commands.ab2@909>                 Dc.w $01FD,$0000
0004A36C <internal_commands.ab2@910>                 Dc.b $03,$FF
0004A36E <internal_commands.ab2@911>                 Dc.w $6210
0004A372 <internal_commands.ab2@912>                 Dc.l $00000000
0004A374 <internal_commands.ab2@913>                 Dc.w $0000
0004A378 <internal_commands.ab2@917> opcmp:          Dc.l opcmpi
0004A37A <internal_commands.ab2@918>                 Dc.b $00,$5C
0004A37E <internal_commands.ab2@919>                 Dc.b "CMP",0
0004A37F <internal_commands.ab2@920>                 Dc.b 0
0004A380 <internal_commands.ab2@921>                 Even
0004A382 <internal_commands.ab2@923>                 Dc.w $B000
0004A386 <internal_commands.ab2@924>                 Dc.w $0FFF,$0001
0004A388 <internal_commands.ab2@925>                 Dc.b $03,$9F
0004A38A <internal_commands.ab2@926>                 Dc.w $6210
0004A38E <internal_commands.ab2@927>                 Dc.l $00000000
0004A390 <internal_commands.ab2@928>                 Dc.w $8003
0004A394 <internal_commands.ab2@932> opcmpi:         Dc.l opcmpa
0004A396 <internal_commands.ab2@933>                 Dc.b $00,$5D
0004A39B <internal_commands.ab2@934>                 Dc.b "CMPI",0
0004A39C <internal_commands.ab2@935>                 Dc.b 0
0004A39E <internal_commands.ab2@938>                 Dc.w $0C00
0004A3A2 <internal_commands.ab2@939>                 Dc.w $0800,$01FD
0004A3A4 <internal_commands.ab2@940>                 Dc.b $FF,$03
0004A3A6 <internal_commands.ab2@941>                 Dc.w $6210
0004A3AA <internal_commands.ab2@942>                 Dc.l $00000000
0004A3AC <internal_commands.ab2@943>                 Dc.w $0000
0004A3B0 <internal_commands.ab2@947> opcmpa:         Dc.l opcmpm
0004A3B2 <internal_commands.ab2@948>                 Dc.b $00,$5E
0004A3B7 <internal_commands.ab2@949>                 Dc.b "CMPA",0
0004A3B8 <internal_commands.ab2@950>                 Dc.b 0
0004A3BA <internal_commands.ab2@953>                 Dc.w $B0C0
0004A3BE <internal_commands.ab2@954>                 Dc.w $0FFF,$0002
0004A3C0 <internal_commands.ab2@955>                 Dc.b $03,$9F
0004A3C2 <internal_commands.ab2@956>                 Dc.w $810F
0004A3C6 <internal_commands.ab2@957>                 Dc.l $00000000
0004A3C8 <internal_commands.ab2@958>                 Dc.w $0000
0004A3CC <internal_commands.ab2@962> opcmpm:         Dc.l opdbcc
0004A3CE <internal_commands.ab2@963>                 Dc.b $00,$5F
0004A3D3 <internal_commands.ab2@964>                 Dc.b "CMPM",0
0004A3D4 <internal_commands.ab2@965>                 Dc.b 0
0004A3D6 <internal_commands.ab2@968>                 Dc.w $B108
0004A3DA <internal_commands.ab2@969>                 Dc.w $0008,$0008
0004A3DC <internal_commands.ab2@970>                 Dc.b $0F,$9F
0004A3DE <internal_commands.ab2@971>                 Dc.w $6210
0004A3E2 <internal_commands.ab2@972>                 Dc.l $00000000
0004A3E4 <internal_commands.ab2@973>                 Dc.w $0000
0004A3E8 <internal_commands.ab2@977> opdbcc:         Dc.l opdbcs
0004A3EA <internal_commands.ab2@978>                 Dc.b $00,$60
0004A3EF <internal_commands.ab2@979>                 Dc.b "DBCC",0
0004A3F0 <internal_commands.ab2@980>                 Dc.b 0
0004A3F2 <internal_commands.ab2@983>                 Dc.w $54C8
0004A3F6 <internal_commands.ab2@984>                 Dc.w $0001,$0200
0004A3F8 <internal_commands.ab2@985>                 Dc.b $FF,$FF
0004A3FA <internal_commands.ab2@986>                 Dc.w $FFFF
0004A3FE <internal_commands.ab2@987>                 Dc.l $00000000
0004A400 <internal_commands.ab2@988>                 Dc.w $0005
0004A404 <internal_commands.ab2@992> opdbcs:         Dc.l opdbeq
0004A406 <internal_commands.ab2@993>                 Dc.b $00,$61
0004A40B <internal_commands.ab2@994>                 Dc.b "DBCS",0
0004A40C <internal_commands.ab2@995>                 Dc.b 0
0004A40E <internal_commands.ab2@998>                 Dc.w $55C8
0004A412 <internal_commands.ab2@999>                 Dc.w $0001,$0200
0004A414 <internal_commands.ab2@1000>                 Dc.b $FF,$FF
0004A416 <internal_commands.ab2@1001>                 Dc.w $FFFF
0004A41A <internal_commands.ab2@1002>                 Dc.l $00000000
0004A41C <internal_commands.ab2@1003>                 Dc.w $0005
0004A420 <internal_commands.ab2@1007> opdbeq:         Dc.l opdbge
0004A422 <internal_commands.ab2@1008>                 Dc.b $00,$62
0004A427 <internal_commands.ab2@1009>                 Dc.b "DBEQ",0
0004A428 <internal_commands.ab2@1010>                 Dc.b 0
0004A42A <internal_commands.ab2@1013>                 Dc.w $57C8
0004A42E <internal_commands.ab2@1014>                 Dc.w $0001,$0200
0004A430 <internal_commands.ab2@1015>                 Dc.b $FF,$FF
0004A432 <internal_commands.ab2@1016>                 Dc.w $FFFF
0004A436 <internal_commands.ab2@1017>                 Dc.l $00000000
0004A438 <internal_commands.ab2@1018>                 Dc.w $0005
0004A43C <internal_commands.ab2@1022> opdbge:         Dc.l opdbgt
0004A43E <internal_commands.ab2@1023>                 Dc.b $00,$63
0004A443 <internal_commands.ab2@1024>                 Dc.b "DBGE",0
0004A444 <internal_commands.ab2@1025>                 Dc.b 0
0004A446 <internal_commands.ab2@1028>                 Dc.w $5CC8
0004A44A <internal_commands.ab2@1029>                 Dc.w $0001,$0200
0004A44C <internal_commands.ab2@1030>                 Dc.b $FF,$FF
0004A44E <internal_commands.ab2@1031>                 Dc.w $FFFF
0004A452 <internal_commands.ab2@1032>                 Dc.l $00000000
0004A454 <internal_commands.ab2@1033>                 Dc.w $0005
0004A458 <internal_commands.ab2@1037> opdbgt:         Dc.l opdbhi
0004A45A <internal_commands.ab2@1038>                 Dc.b $00,$64
0004A45F <internal_commands.ab2@1039>                 Dc.b "DBGT",0
0004A460 <internal_commands.ab2@1040>                 Dc.b 0
0004A462 <internal_commands.ab2@1043>                 Dc.w $5EC8
0004A466 <internal_commands.ab2@1044>                 Dc.w $0001,$0200
0004A468 <internal_commands.ab2@1045>                 Dc.b $FF,$FF
0004A46A <internal_commands.ab2@1046>                 Dc.w $FFFF
0004A46E <internal_commands.ab2@1047>                 Dc.l $00000000
0004A470 <internal_commands.ab2@1048>                 Dc.w $0005
0004A474 <internal_commands.ab2@1052> opdbhi:         Dc.l opdble
0004A476 <internal_commands.ab2@1053>                 Dc.b $00,$65
0004A47B <internal_commands.ab2@1054>                 Dc.b "DBHI",0
0004A47C <internal_commands.ab2@1055>                 Dc.b 0
0004A47E <internal_commands.ab2@1058>                 Dc.w $52C8
0004A482 <internal_commands.ab2@1059>                 Dc.w $0001,$0200
0004A484 <internal_commands.ab2@1060>                 Dc.b $FF,$FF
0004A486 <internal_commands.ab2@1061>                 Dc.w $FFFF
0004A48A <internal_commands.ab2@1062>                 Dc.l $00000000
0004A48C <internal_commands.ab2@1063>                 Dc.w $0005
0004A490 <internal_commands.ab2@1067> opdble:         Dc.l opdbls
0004A492 <internal_commands.ab2@1068>                 Dc.b $00,$66
0004A497 <internal_commands.ab2@1069>                 Dc.b "DBLE",0
0004A498 <internal_commands.ab2@1070>                 Dc.b 0
0004A49A <internal_commands.ab2@1073>                 Dc.w $5FC8
0004A49E <internal_commands.ab2@1074>                 Dc.w $0001,$0200
0004A4A0 <internal_commands.ab2@1075>                 Dc.b $FF,$FF
0004A4A2 <internal_commands.ab2@1076>                 Dc.w $FFFF
0004A4A6 <internal_commands.ab2@1077>                 Dc.l $00000000
0004A4A8 <internal_commands.ab2@1078>                 Dc.w $0005
0004A4AC <internal_commands.ab2@1082> opdbls:         Dc.l opdblt
0004A4AE <internal_commands.ab2@1083>                 Dc.b $00,$67
0004A4B3 <internal_commands.ab2@1084>                 Dc.b "DBLS",0
0004A4B4 <internal_commands.ab2@1085>                 Dc.b 0
0004A4B6 <internal_commands.ab2@1088>                 Dc.w $53C8
0004A4BA <internal_commands.ab2@1089>                 Dc.w $0001,$0200
0004A4BC <internal_commands.ab2@1090>                 Dc.b $FF,$FF
0004A4BE <internal_commands.ab2@1091>                 Dc.w $FFFF
0004A4C2 <internal_commands.ab2@1092>                 Dc.l $00000000
0004A4C4 <internal_commands.ab2@1093>                 Dc.w $0005
0004A4C8 <internal_commands.ab2@1097> opdblt:         Dc.l opdbmi
0004A4CA <internal_commands.ab2@1098>                 Dc.b $00,$68
0004A4CF <internal_commands.ab2@1099>                 Dc.b "DBLT",0
0004A4D0 <internal_commands.ab2@1100>                 Dc.b 0
0004A4D2 <internal_commands.ab2@1103>                 Dc.w $5DC8
0004A4D6 <internal_commands.ab2@1104>                 Dc.w $0001,$0200
0004A4D8 <internal_commands.ab2@1105>                 Dc.b $FF,$FF
0004A4DA <internal_commands.ab2@1106>                 Dc.w $FFFF
0004A4DE <internal_commands.ab2@1107>                 Dc.l $00000000
0004A4E0 <internal_commands.ab2@1108>                 Dc.w $0005
0004A4E4 <internal_commands.ab2@1112> opdbmi:         Dc.l opdbne
0004A4E6 <internal_commands.ab2@1113>                 Dc.b $00,$69
0004A4EB <internal_commands.ab2@1114>                 Dc.b "DBMI",0
0004A4EC <internal_commands.ab2@1115>                 Dc.b 0
0004A4EE <internal_commands.ab2@1118>                 Dc.w $5BC8
0004A4F2 <internal_commands.ab2@1119>                 Dc.w $0001,$0200
0004A4F4 <internal_commands.ab2@1120>                 Dc.b $FF,$FF
0004A4F6 <internal_commands.ab2@1121>                 Dc.w $FFFF
0004A4FA <internal_commands.ab2@1122>                 Dc.l $00000000
0004A4FC <internal_commands.ab2@1123>                 Dc.w $0005
0004A500 <internal_commands.ab2@1127> opdbne:         Dc.l opdbpl
0004A502 <internal_commands.ab2@1128>                 Dc.b $00,$6A
0004A507 <internal_commands.ab2@1129>                 Dc.b "DBNE",0
0004A508 <internal_commands.ab2@1130>                 Dc.b 0
0004A50A <internal_commands.ab2@1133>                 Dc.w $56C8
0004A50E <internal_commands.ab2@1134>                 Dc.w $0001,$0200
0004A510 <internal_commands.ab2@1135>                 Dc.b $FF,$FF
0004A512 <internal_commands.ab2@1136>                 Dc.w $FFFF
0004A516 <internal_commands.ab2@1137>                 Dc.l $00000000
0004A518 <internal_commands.ab2@1138>                 Dc.w $0005
0004A51C <internal_commands.ab2@1142> opdbpl:         Dc.l opdbvc
0004A51E <internal_commands.ab2@1143>                 Dc.b $00,$6B
0004A523 <internal_commands.ab2@1144>                 Dc.b "DBPL",0
0004A524 <internal_commands.ab2@1145>                 Dc.b 0
0004A526 <internal_commands.ab2@1148>                 Dc.w $5AC8
0004A52A <internal_commands.ab2@1149>                 Dc.w $0001,$0200
0004A52C <internal_commands.ab2@1150>                 Dc.b $FF,$FF
0004A52E <internal_commands.ab2@1151>                 Dc.w $FFFF
0004A532 <internal_commands.ab2@1152>                 Dc.l $00000000
0004A534 <internal_commands.ab2@1153>                 Dc.w $0005
0004A538 <internal_commands.ab2@1157> opdbvc:         Dc.l opdbvs
0004A53A <internal_commands.ab2@1158>                 Dc.b $00,$6C
0004A53F <internal_commands.ab2@1159>                 Dc.b "DBVC",0
0004A540 <internal_commands.ab2@1160>                 Dc.b 0
0004A542 <internal_commands.ab2@1163>                 Dc.w $58C8
0004A546 <internal_commands.ab2@1164>                 Dc.w $0001,$0200
0004A548 <internal_commands.ab2@1165>                 Dc.b $FF,$FF
0004A54A <internal_commands.ab2@1166>                 Dc.w $FFFF
0004A54E <internal_commands.ab2@1167>                 Dc.l $00000000
0004A550 <internal_commands.ab2@1168>                 Dc.w $0005
0004A554 <internal_commands.ab2@1172> opdbvs:         Dc.l opdbf
0004A556 <internal_commands.ab2@1173>                 Dc.b $00,$6D
0004A55B <internal_commands.ab2@1174>                 Dc.b "DBVS",0
0004A55C <internal_commands.ab2@1175>                 Dc.b 0
0004A55E <internal_commands.ab2@1178>                 Dc.w $59C8
0004A562 <internal_commands.ab2@1179>                 Dc.w $0001,$0200
0004A564 <internal_commands.ab2@1180>                 Dc.b $FF,$FF
0004A566 <internal_commands.ab2@1181>                 Dc.w $FFFF
0004A56A <internal_commands.ab2@1182>                 Dc.l $00000000
0004A56C <internal_commands.ab2@1183>                 Dc.w $0005
0004A570 <internal_commands.ab2@1186> opdbf:          Dc.l opdbra
0004A572 <internal_commands.ab2@1187>                 Dc.b $00,$6E
0004A576 <internal_commands.ab2@1188>                 Dc.b "DBF",0
0004A577 <internal_commands.ab2@1189>                 Dc.b 0
0004A578 <internal_commands.ab2@1190>                 Even
0004A57A <internal_commands.ab2@1192>                 Dc.w $51C8
0004A57E <internal_commands.ab2@1193>                 Dc.w $0001,$0200
0004A580 <internal_commands.ab2@1194>                 Dc.b $FF,$FF
0004A582 <internal_commands.ab2@1195>                 Dc.w $FFFF
0004A586 <internal_commands.ab2@1196>                 Dc.l $00000000
0004A588 <internal_commands.ab2@1197>                 Dc.w $0005
0004A58C <internal_commands.ab2@1201> opdbra:         Dc.l opdbt
0004A58E <internal_commands.ab2@1202>                 Dc.b $00,$6F
0004A593 <internal_commands.ab2@1203>                 Dc.b "DBRA",0
0004A594 <internal_commands.ab2@1204>                 Dc.b 0
0004A596 <internal_commands.ab2@1207>                 Dc.w $51C8
0004A59A <internal_commands.ab2@1208>                 Dc.w $0001,$0200
0004A59C <internal_commands.ab2@1209>                 Dc.b $FF,$FF
0004A59E <internal_commands.ab2@1210>                 Dc.w $FFFF
0004A5A2 <internal_commands.ab2@1211>                 Dc.l $00000000
0004A5A4 <internal_commands.ab2@1212>                 Dc.w $0005
0004A5A8 <internal_commands.ab2@1216> opdbt:          Dc.l opdivs
0004A5AA <internal_commands.ab2@1217>                 Dc.b $00,$70
0004A5AE <internal_commands.ab2@1218>                 Dc.b "DBT",0
0004A5AF <internal_commands.ab2@1219>                 Dc.b 0
0004A5B0 <internal_commands.ab2@1220>                 Even
0004A5B2 <internal_commands.ab2@1222>                 Dc.w $50C8
0004A5B6 <internal_commands.ab2@1223>                 Dc.w $0001,$0200
0004A5B8 <internal_commands.ab2@1224>                 Dc.b $FF,$FF
0004A5BA <internal_commands.ab2@1225>                 Dc.w $FFFF
0004A5BE <internal_commands.ab2@1226>                 Dc.l $00000000
0004A5C0 <internal_commands.ab2@1227>                 Dc.w $0005
0004A5C4 <internal_commands.ab2@1231> opdivs:         Dc.l opdivu
0004A5C6 <internal_commands.ab2@1232>                 Dc.b $00,$71
0004A5CB <internal_commands.ab2@1233>                 Dc.b "DIVS",0
0004A5CC <internal_commands.ab2@1234>                 Dc.b 0
0004A5CE <internal_commands.ab2@1237>                 Dc.w $81C0
0004A5D2 <internal_commands.ab2@1238>                 Dc.w $0FFD,$0001
0004A5D4 <internal_commands.ab2@1239>                 Dc.b $03,$9F
0004A5D6 <internal_commands.ab2@1240>                 Dc.w $FF1F
0004A5DA <internal_commands.ab2@1241>                 Dc.l $00000000
0004A5DC <internal_commands.ab2@1242>                 Dc.w $0000
0004A5E0 <internal_commands.ab2@1246> opdivu:         Dc.l opeor
0004A5E2 <internal_commands.ab2@1247>                 Dc.b $00,$72
0004A5E7 <internal_commands.ab2@1248>                 Dc.b "DIVU",0
0004A5E8 <internal_commands.ab2@1249>                 Dc.b 0
0004A5EA <internal_commands.ab2@1252>                 Dc.w $80C0
0004A5EE <internal_commands.ab2@1253>                 Dc.w $0FFD,$0001
0004A5F0 <internal_commands.ab2@1254>                 Dc.b $03,$9F
0004A5F2 <internal_commands.ab2@1255>                 Dc.w $FF1F
0004A5F6 <internal_commands.ab2@1256>                 Dc.l $00000000
0004A5F8 <internal_commands.ab2@1257>                 Dc.w $0000
0004A5FC <internal_commands.ab2@1261> opeor:          Dc.l opeori
0004A5FE <internal_commands.ab2@1262>                 Dc.b $00,$73
0004A602 <internal_commands.ab2@1263>                 Dc.b "EOR",0
0004A603 <internal_commands.ab2@1264>                 Dc.b 0
0004A604 <internal_commands.ab2@1265>                 Even
0004A606 <internal_commands.ab2@1267>                 Dc.w $B100
0004A60A <internal_commands.ab2@1268>                 Dc.w $0001,$01FD
0004A60C <internal_commands.ab2@1269>                 Dc.b $9F,$03
0004A60E <internal_commands.ab2@1270>                 Dc.w $6210
0004A612 <internal_commands.ab2@1271>                 Dc.l $00000000
0004A614 <internal_commands.ab2@1272>                 Dc.w $8002
0004A618 <internal_commands.ab2@1276> opeori:         Dc.l opexg
0004A61A <internal_commands.ab2@1277>                 Dc.b $00,$74
0004A61F <internal_commands.ab2@1278>                 Dc.b "EORI",0
0004A620 <internal_commands.ab2@1279>                 Dc.b 0
0004A622 <internal_commands.ab2@1282>                 Dc.w $0A00
0004A626 <internal_commands.ab2@1283>                 Dc.w $0800,$39FD
0004A628 <internal_commands.ab2@1284>                 Dc.b $FF,$03
0004A62A <internal_commands.ab2@1285>                 Dc.w $6210
0004A62E <internal_commands.ab2@1286>                 Dc.l _andichk
0004A630 <internal_commands.ab2@1287>                 Dc.w $0000
0004A634 <internal_commands.ab2@1291> opexg:          Dc.l opext
0004A636 <internal_commands.ab2@1292>                 Dc.b $00,$75
0004A63A <internal_commands.ab2@1293>                 Dc.b "EXG",0
0004A63B <internal_commands.ab2@1294>                 Dc.b 0
0004A63C <internal_commands.ab2@1295>                 Even
0004A63E <internal_commands.ab2@1297>                 Dc.w $C100
0004A642 <internal_commands.ab2@1298>                 Dc.w $0003,$0003
0004A644 <internal_commands.ab2@1299>                 Dc.b $9F,$0F
0004A646 <internal_commands.ab2@1300>                 Dc.w $F2FF
0004A64A <internal_commands.ab2@1301>                 Dc.l _exgchk
0004A64C <internal_commands.ab2@1302>                 Dc.w $0000
0004A650 <internal_commands.ab2@1306> opext:          Dc.l opillegal
0004A652 <internal_commands.ab2@1307>                 Dc.b $00,$76
0004A656 <internal_commands.ab2@1308>                 Dc.b "EXT",0
0004A657 <internal_commands.ab2@1309>                 Dc.b 0
0004A658 <internal_commands.ab2@1310>                 Even
0004A65A <internal_commands.ab2@1312>                 Dc.w $4800
0004A65E <internal_commands.ab2@1313>                 Dc.w $0001,$0000
0004A660 <internal_commands.ab2@1314>                 Dc.b $0F,$FF
0004A662 <internal_commands.ab2@1315>                 Dc.w $632F
0004A666 <internal_commands.ab2@1316>                 Dc.l $00000000
0004A668 <internal_commands.ab2@1317>                 Dc.w $0000
0004A66C <internal_commands.ab2@1321> opillegal:      Dc.l opjmp
0004A66E <internal_commands.ab2@1322>                 Dc.b $00,$77
0004A676 <internal_commands.ab2@1323>                 Dc.b "ILLEGAL",0
0004A677 <internal_commands.ab2@1324>                 Dc.b 0
0004A678 <internal_commands.ab2@1325>                 Even
0004A67A <internal_commands.ab2@1327>                 Dc.w $4AFC
0004A67E <internal_commands.ab2@1328>                 Dc.w $0000,$0000
0004A680 <internal_commands.ab2@1329>                 Dc.b $FF,$FF
0004A682 <internal_commands.ab2@1330>                 Dc.w $FFFF
0004A686 <internal_commands.ab2@1331>                 Dc.l $00000000
0004A688 <internal_commands.ab2@1332>                 Dc.w $0000
0004A68C <internal_commands.ab2@1336> opjmp:          Dc.l opjsr
0004A68E <internal_commands.ab2@1337>                 Dc.b $00,$78
0004A692 <internal_commands.ab2@1338>                 Dc.b "JMP",0
0004A693 <internal_commands.ab2@1339>                 Dc.b 0
0004A694 <internal_commands.ab2@1340>                 Even
0004A696 <internal_commands.ab2@1342>                 Dc.w $4EC0
0004A69A <internal_commands.ab2@1343>                 Dc.w $07E4,$0000
0004A69C <internal_commands.ab2@1344>                 Dc.b $03,$FF
0004A69E <internal_commands.ab2@1345>                 Dc.w $FFFF
0004A6A2 <internal_commands.ab2@1346>                 Dc.l $00000000
0004A6A4 <internal_commands.ab2@1347>                 Dc.w $0000
0004A6A8 <internal_commands.ab2@1351> opjsr:          Dc.l oplea
0004A6AA <internal_commands.ab2@1352>                 Dc.b $00,$79
0004A6AE <internal_commands.ab2@1353>                 Dc.b "JSR",0
0004A6AF <internal_commands.ab2@1354>                 Dc.b 0
0004A6B0 <internal_commands.ab2@1355>                 Even
0004A6B2 <internal_commands.ab2@1357>                 Dc.w $4E80
0004A6B6 <internal_commands.ab2@1358>                 Dc.w $07E4,$0000
0004A6B8 <internal_commands.ab2@1359>                 Dc.b $03,$FF
0004A6BA <internal_commands.ab2@1360>                 Dc.w $FFFF
0004A6BE <internal_commands.ab2@1361>                 Dc.l $00000000
0004A6C0 <internal_commands.ab2@1362>                 Dc.w $0000
0004A6C4 <internal_commands.ab2@1366> oplea:          Dc.l oplink
0004A6C6 <internal_commands.ab2@1367>                 Dc.b $00,$7A
0004A6CA <internal_commands.ab2@1368>                 Dc.b "LEA",0
0004A6CB <internal_commands.ab2@1369>                 Dc.b 0
0004A6CC <internal_commands.ab2@1370>                 Even
0004A6CE <internal_commands.ab2@1372>                 Dc.w $41C0
0004A6D2 <internal_commands.ab2@1373>                 Dc.w $07E4,$0002
0004A6D4 <internal_commands.ab2@1374>                 Dc.b $03,$9F
0004A6D6 <internal_commands.ab2@1375>                 Dc.w $F2FF
0004A6DA <internal_commands.ab2@1376>                 Dc.l $00000000
0004A6DC <internal_commands.ab2@1377>                 Dc.w $0000
0004A6E0 <internal_commands.ab2@1381> oplink:         Dc.l oplsl
0004A6E2 <internal_commands.ab2@1382>                 Dc.b $00,$7B
0004A6E7 <internal_commands.ab2@1383>                 Dc.b "LINK",0
0004A6E8 <internal_commands.ab2@1384>                 Dc.b 0
0004A6EA <internal_commands.ab2@1387>                 Dc.w $4E50
0004A6EE <internal_commands.ab2@1388>                 Dc.w $0002,$0800
0004A6F0 <internal_commands.ab2@1389>                 Dc.b $0F,$FF
0004A6F2 <internal_commands.ab2@1390>                 Dc.w $FFFF
0004A6F6 <internal_commands.ab2@1391>                 Dc.l $00000000
0004A6F8 <internal_commands.ab2@1392>                 Dc.w $0000
0004A6FC <internal_commands.ab2@1396> oplsl:          Dc.l oplsr
0004A6FE <internal_commands.ab2@1397>                 Dc.b $00,$7C
0004A702 <internal_commands.ab2@1398>                 Dc.b "LSL",0
0004A703 <internal_commands.ab2@1399>                 Dc.b 0
0004A704 <internal_commands.ab2@1400>                 Even
0004A706 <internal_commands.ab2@1402>                 Dc.w $E108
0004A70A <internal_commands.ab2@1403>                 Dc.w $09FD,$0001
0004A70C <internal_commands.ab2@1404>                 Dc.b $FF,$FF
0004A70E <internal_commands.ab2@1405>                 Dc.w $F210
0004A712 <internal_commands.ab2@1406>                 Dc.l _lslchk
0004A714 <internal_commands.ab2@1407>                 Dc.w $0001
0004A718 <internal_commands.ab2@1411> oplsr:          Dc.l opmove
0004A71A <internal_commands.ab2@1412>                 Dc.b $00,$7D
0004A71E <internal_commands.ab2@1413>                 Dc.b "LSR",0
0004A71F <internal_commands.ab2@1414>                 Dc.b 0
0004A720 <internal_commands.ab2@1415>                 Even
0004A722 <internal_commands.ab2@1417>                 Dc.w $E008
0004A726 <internal_commands.ab2@1418>                 Dc.w $09FD,$0001
0004A728 <internal_commands.ab2@1419>                 Dc.b $FF,$FF
0004A72A <internal_commands.ab2@1420>                 Dc.w $F210
0004A72E <internal_commands.ab2@1421>                 Dc.l _lslchk
0004A730 <internal_commands.ab2@1422>                 Dc.w $0001
0004A734 <internal_commands.ab2@1426> opmove:         Dc.l opmovep
0004A736 <internal_commands.ab2@1427>                 Dc.b $00,$7E
0004A73B <internal_commands.ab2@1428>                 Dc.b "MOVE",0
0004A73C <internal_commands.ab2@1429>                 Dc.b 0
0004A73E <internal_commands.ab2@1432>                 Dc.w $0000
0004A742 <internal_commands.ab2@1433>                 Dc.w $7FFF,$71FD
0004A744 <internal_commands.ab2@1434>                 Dc.b $03,$96
0004A746 <internal_commands.ab2@1435>                 Dc.w $F210
0004A74A <internal_commands.ab2@1436>                 Dc.l _movechk
0004A74C <internal_commands.ab2@1437>                 Dc.w $8001
0004A750 <internal_commands.ab2@1441> opmovep:        Dc.l opmovea
0004A752 <internal_commands.ab2@1442>                 Dc.b $00,$7F
0004A757 <internal_commands.ab2@1443>                 Dc.b "Chip",0                             ;Dc.b "movep",0 org source
0004A758 <internal_commands.ab2@1444>                 Dc.b 0
0004A75A <internal_commands.ab2@1447>                 Dc.w $0108
0004A75E <internal_commands.ab2@1448>                 Dc.w $0021,$0021
0004A760 <internal_commands.ab2@1449>                 Dc.b $9F,$0F
0004A762 <internal_commands.ab2@1450>                 Dc.w $610F
0004A766 <internal_commands.ab2@1451>                 Dc.l _movepchk
0004A768 <internal_commands.ab2@1452>                 Dc.w $0000
0004A76C <internal_commands.ab2@1457> opmovea:        Dc.l opmoveq
0004A76E <internal_commands.ab2@1458>                 Dc.b $00,$80
0004A774 <internal_commands.ab2@1459>                 Dc.b "MOVEA",0
0004A775 <internal_commands.ab2@1460>                 Dc.b 0
0004A776 <internal_commands.ab2@1461>                 Even
0004A778 <internal_commands.ab2@1463>                 Dc.w $0040
0004A77C <internal_commands.ab2@1464>                 Dc.w $0FFF,$0002
0004A77E <internal_commands.ab2@1465>                 Dc.b $03,$9F
0004A780 <internal_commands.ab2@1466>                 Dc.w $C23F
0004A784 <internal_commands.ab2@1467>                 Dc.l $00000000
0004A786 <internal_commands.ab2@1468>                 Dc.w $0000
0004A78A <internal_commands.ab2@1472> opmoveq:        Dc.l opmovem
0004A78C <internal_commands.ab2@1473>                 Dc.b $00,$81
0004A792 <internal_commands.ab2@1474>                 Dc.b "MOVEQ",0
0004A793 <internal_commands.ab2@1475>                 Dc.b 0
0004A794 <internal_commands.ab2@1476>                 Even
0004A796 <internal_commands.ab2@1478>                 Dc.w $7000
0004A79A <internal_commands.ab2@1479>                 Dc.w $0800,$0001
0004A79C <internal_commands.ab2@1480>                 Dc.b $FF,$9F
0004A79E <internal_commands.ab2@1481>                 Dc.w $F2FF
0004A7A2 <internal_commands.ab2@1482>                 Dc.l $00000000
0004A7A4 <internal_commands.ab2@1483>                 Dc.w $0003
0004A7A8 <internal_commands.ab2@1487> opmovem:        Dc.l opmuls
0004A7AA <internal_commands.ab2@1488>                 Dc.b $00,$82
0004A7B0 <internal_commands.ab2@1489>                 Dc.b "MOVEM",0
0004A7B1 <internal_commands.ab2@1490>                 Dc.b 0
0004A7B2 <internal_commands.ab2@1491>                 Even
0004A7B4 <internal_commands.ab2@1493>                 Dc.w $4880
0004A7B8 <internal_commands.ab2@1494>                 Dc.w $87FC,$87FC
0004A7BA <internal_commands.ab2@1495>                 Dc.b $03,$03
0004A7BC <internal_commands.ab2@1496>                 Dc.w $610F
0004A7C0 <internal_commands.ab2@1497>                 Dc.l _movemchk_new
0004A7C2 <internal_commands.ab2@1498>                 Dc.w $0000
0004A7C6 <internal_commands.ab2@1502> opmuls:         Dc.l opmulu
0004A7C8 <internal_commands.ab2@1503>                 Dc.b $00,$83
0004A7CD <internal_commands.ab2@1504>                 Dc.b "MULS",0
0004A7CE <internal_commands.ab2@1505>                 Dc.b 0
0004A7D0 <internal_commands.ab2@1508>                 Dc.w $C1C0
0004A7D4 <internal_commands.ab2@1509>                 Dc.w $0FFD,$0001
0004A7D6 <internal_commands.ab2@1510>                 Dc.b $03,$9F
0004A7D8 <internal_commands.ab2@1511>                 Dc.w $FF1F
0004A7DC <internal_commands.ab2@1512>                 Dc.l $00000000
0004A7DE <internal_commands.ab2@1513>                 Dc.w $0000
0004A7E2 <internal_commands.ab2@1517> opmulu:         Dc.l opnbcd
0004A7E4 <internal_commands.ab2@1518>                 Dc.b $00,$84
0004A7E9 <internal_commands.ab2@1519>                 Dc.b "MULU",0
0004A7EA <internal_commands.ab2@1520>                 Dc.b 0
0004A7EC <internal_commands.ab2@1523>                 Dc.w $C0C0
0004A7F0 <internal_commands.ab2@1524>                 Dc.w $0FFD,$0001
0004A7F2 <internal_commands.ab2@1525>                 Dc.b $03,$9F
0004A7F4 <internal_commands.ab2@1526>                 Dc.w $FF1F
0004A7F8 <internal_commands.ab2@1527>                 Dc.l $00000000
0004A7FA <internal_commands.ab2@1528>                 Dc.w $0000
0004A7FE <internal_commands.ab2@1532> opnbcd:         Dc.l opneg
0004A800 <internal_commands.ab2@1533>                 Dc.b $00,$85
0004A805 <internal_commands.ab2@1534>                 Dc.b "NBCD",0
0004A806 <internal_commands.ab2@1535>                 Dc.b 0
0004A808 <internal_commands.ab2@1538>                 Dc.w $4800
0004A80C <internal_commands.ab2@1539>                 Dc.w $01FD,$0000
0004A80E <internal_commands.ab2@1540>                 Dc.b $03,$FF
0004A810 <internal_commands.ab2@1541>                 Dc.w $FFF0
0004A814 <internal_commands.ab2@1542>                 Dc.l $00000000
0004A816 <internal_commands.ab2@1543>                 Dc.w $0000
0004A81A <internal_commands.ab2@1547> opneg:          Dc.l opnegx
0004A81C <internal_commands.ab2@1548>                 Dc.b $00,$86
0004A820 <internal_commands.ab2@1549>                 Dc.b "NEG",0
0004A821 <internal_commands.ab2@1550>                 Dc.b 0
0004A822 <internal_commands.ab2@1551>                 Even
0004A824 <internal_commands.ab2@1553>                 Dc.w $4400
0004A828 <internal_commands.ab2@1554>                 Dc.w $01FD,$0000
0004A82A <internal_commands.ab2@1555>                 Dc.b $03,$FF
0004A82C <internal_commands.ab2@1556>                 Dc.w $6210
0004A830 <internal_commands.ab2@1557>                 Dc.l $00000000
0004A832 <internal_commands.ab2@1558>                 Dc.w $0000
0004A836 <internal_commands.ab2@1562> opnegx:         Dc.l opnop
0004A838 <internal_commands.ab2@1563>                 Dc.b $00,$87
0004A83D <internal_commands.ab2@1564>                 Dc.b "NEGX",0
0004A83E <internal_commands.ab2@1565>                 Dc.b 0
0004A840 <internal_commands.ab2@1568>                 Dc.w $4000
0004A844 <internal_commands.ab2@1569>                 Dc.w $01FD,$0000
0004A846 <internal_commands.ab2@1570>                 Dc.b $03,$FF
0004A848 <internal_commands.ab2@1571>                 Dc.w $6210
0004A84C <internal_commands.ab2@1572>                 Dc.l $00000000
0004A84E <internal_commands.ab2@1573>                 Dc.w $0000
0004A852 <internal_commands.ab2@1577> opnop:          Dc.l opnot
0004A854 <internal_commands.ab2@1578>                 Dc.b $00,$88
0004A858 <internal_commands.ab2@1579>                 Dc.b "NOP",0
0004A859 <internal_commands.ab2@1580>                 Dc.b 0
0004A85A <internal_commands.ab2@1581>                 Even
0004A85C <internal_commands.ab2@1583>                 Dc.w $4E71
0004A860 <internal_commands.ab2@1584>                 Dc.w $0000,$0000
0004A862 <internal_commands.ab2@1585>                 Dc.b $FF,$FF
0004A864 <internal_commands.ab2@1586>                 Dc.w $FFFF
0004A868 <internal_commands.ab2@1587>                 Dc.l $00000000
0004A86A <internal_commands.ab2@1588>                 Dc.w $0000
0004A86E <internal_commands.ab2@1592> opnot:          Dc.l opor
0004A870 <internal_commands.ab2@1593>                 Dc.b $00,$89
0004A874 <internal_commands.ab2@1594>                 Dc.b "NOT",0
0004A875 <internal_commands.ab2@1595>                 Dc.b 0
0004A876 <internal_commands.ab2@1596>                 Even
0004A878 <internal_commands.ab2@1598>                 Dc.w $4600
0004A87C <internal_commands.ab2@1599>                 Dc.w $01FD,$0000
0004A87E <internal_commands.ab2@1600>                 Dc.b $03,$FF
0004A880 <internal_commands.ab2@1601>                 Dc.w $6210
0004A884 <internal_commands.ab2@1602>                 Dc.l $00000000
0004A886 <internal_commands.ab2@1603>                 Dc.w $0000
0004A88A <internal_commands.ab2@1607> opor:           Dc.l opori
0004A88C <internal_commands.ab2@1608>                 Dc.b $00,$8A
0004A88F <internal_commands.ab2@1609>                 Dc.b "OR",0
0004A890 <internal_commands.ab2@1610>                 Dc.b 0
0004A892 <internal_commands.ab2@1613>                 Dc.w $8000
0004A896 <internal_commands.ab2@1614>                 Dc.w $0FFD,$01FD
0004A898 <internal_commands.ab2@1615>                 Dc.b $03,$9F
0004A89A <internal_commands.ab2@1616>                 Dc.w $6210
0004A89E <internal_commands.ab2@1617>                 Dc.l _addchk
0004A8A0 <internal_commands.ab2@1618>                 Dc.w $8002
0004A8A4 <internal_commands.ab2@1622> opori:          Dc.l oppea
0004A8A6 <internal_commands.ab2@1623>                 Dc.b $00,$8B
0004A8AA <internal_commands.ab2@1624>                 Dc.b "ORI",0
0004A8AB <internal_commands.ab2@1625>                 Dc.b 0
0004A8AC <internal_commands.ab2@1626>                 Even
0004A8AE <internal_commands.ab2@1628>                 Dc.w $0000
0004A8B2 <internal_commands.ab2@1629>                 Dc.w $0800,$39FD
0004A8B4 <internal_commands.ab2@1630>                 Dc.b $FF,$03
0004A8B6 <internal_commands.ab2@1631>                 Dc.w $6210
0004A8BA <internal_commands.ab2@1632>                 Dc.l _andichk
0004A8BC <internal_commands.ab2@1633>                 Dc.w $0000
0004A8C0 <internal_commands.ab2@1637> oppea:          Dc.l opreset
0004A8C2 <internal_commands.ab2@1638>                 Dc.b $00,$8C
0004A8C6 <internal_commands.ab2@1639>                 Dc.b "PEA",0
0004A8C7 <internal_commands.ab2@1640>                 Dc.b 0
0004A8C8 <internal_commands.ab2@1641>                 Even
0004A8CA <internal_commands.ab2@1643>                 Dc.w $4840
0004A8CE <internal_commands.ab2@1644>                 Dc.w $07E4,$0000
0004A8D0 <internal_commands.ab2@1645>                 Dc.b $03,$FF
0004A8D2 <internal_commands.ab2@1646>                 Dc.w $F2FF
0004A8D6 <internal_commands.ab2@1647>                 Dc.l $00000000
0004A8D8 <internal_commands.ab2@1648>                 Dc.w $0000
0004A8DC <internal_commands.ab2@1652> opreset:        Dc.l oprol
0004A8DE <internal_commands.ab2@1653>                 Dc.b $00,$8D
0004A8E4 <internal_commands.ab2@1654>                 Dc.b "RESET",0
0004A8E5 <internal_commands.ab2@1655>                 Dc.b 0
0004A8E6 <internal_commands.ab2@1656>                 Even
0004A8E8 <internal_commands.ab2@1658>                 Dc.w $4E70
0004A8EC <internal_commands.ab2@1659>                 Dc.w $0000,$0000
0004A8EE <internal_commands.ab2@1660>                 Dc.b $FF,$FF
0004A8F0 <internal_commands.ab2@1661>                 Dc.w $FFFF
0004A8F4 <internal_commands.ab2@1662>                 Dc.l $00000000
0004A8F6 <internal_commands.ab2@1663>                 Dc.w $0000
0004A8FA <internal_commands.ab2@1667> oprol:          Dc.l opror
0004A8FC <internal_commands.ab2@1668>                 Dc.b $00,$8E
0004A900 <internal_commands.ab2@1669>                 Dc.b "ROL",0
0004A901 <internal_commands.ab2@1670>                 Dc.b 0
0004A902 <internal_commands.ab2@1671>                 Even
0004A904 <internal_commands.ab2@1673>                 Dc.w $E118
0004A908 <internal_commands.ab2@1674>                 Dc.w $09FD,$0001
0004A90A <internal_commands.ab2@1675>                 Dc.b $FF,$FF
0004A90C <internal_commands.ab2@1676>                 Dc.w $F210
0004A910 <internal_commands.ab2@1677>                 Dc.l _rolchk
0004A912 <internal_commands.ab2@1678>                 Dc.w $0001
0004A916 <internal_commands.ab2@1682> opror:          Dc.l oproxl
0004A918 <internal_commands.ab2@1683>                 Dc.b $00,$8F
0004A91C <internal_commands.ab2@1684>                 Dc.b "ROR",0
0004A91D <internal_commands.ab2@1685>                 Dc.b 0
0004A91E <internal_commands.ab2@1686>                 Even
0004A920 <internal_commands.ab2@1688>                 Dc.w $E018
0004A924 <internal_commands.ab2@1689>                 Dc.w $09FD,$0001
0004A926 <internal_commands.ab2@1690>                 Dc.b $FF,$FF
0004A928 <internal_commands.ab2@1691>                 Dc.w $F210
0004A92C <internal_commands.ab2@1692>                 Dc.l _rolchk
0004A92E <internal_commands.ab2@1693>                 Dc.w $0001
0004A932 <internal_commands.ab2@1697> oproxl:         Dc.l oproxr
0004A934 <internal_commands.ab2@1698>                 Dc.b $00,$90
0004A939 <internal_commands.ab2@1699>                 Dc.b "ROXL",0
0004A93A <internal_commands.ab2@1700>                 Dc.b 0
0004A93C <internal_commands.ab2@1703>                 Dc.w $E110
0004A940 <internal_commands.ab2@1704>                 Dc.w $09FD,$0001
0004A942 <internal_commands.ab2@1705>                 Dc.b $FF,$FF
0004A944 <internal_commands.ab2@1706>                 Dc.w $F210
0004A948 <internal_commands.ab2@1707>                 Dc.l _roxlchk
0004A94A <internal_commands.ab2@1708>                 Dc.w $0001
0004A94E <internal_commands.ab2@1712> oproxr:         Dc.l oprte
0004A950 <internal_commands.ab2@1713>                 Dc.b $00,$91
0004A955 <internal_commands.ab2@1714>                 Dc.b "ROXR",0
0004A956 <internal_commands.ab2@1715>                 Dc.b 0
0004A958 <internal_commands.ab2@1718>                 Dc.w $E010
0004A95C <internal_commands.ab2@1719>                 Dc.w $09FD,$0001
0004A95E <internal_commands.ab2@1720>                 Dc.b $FF,$FF
0004A960 <internal_commands.ab2@1721>                 Dc.w $F210
0004A964 <internal_commands.ab2@1722>                 Dc.l _roxlchk
0004A966 <internal_commands.ab2@1723>                 Dc.w $0001
0004A96A <internal_commands.ab2@1727> oprte:          Dc.l oprtr
0004A96C <internal_commands.ab2@1728>                 Dc.b $00,$92
0004A970 <internal_commands.ab2@1729>                 Dc.b "RTE",0
0004A971 <internal_commands.ab2@1730>                 Dc.b 0
0004A972 <internal_commands.ab2@1731>                 Even
0004A974 <internal_commands.ab2@1733>                 Dc.w $4E73
0004A978 <internal_commands.ab2@1734>                 Dc.w $0000,$0000
0004A97A <internal_commands.ab2@1735>                 Dc.b $FF,$FF
0004A97C <internal_commands.ab2@1736>                 Dc.w $FFFF
0004A980 <internal_commands.ab2@1737>                 Dc.l $00000000
0004A982 <internal_commands.ab2@1738>                 Dc.w $0000
0004A986 <internal_commands.ab2@1742> oprtr:          Dc.l oprts
0004A988 <internal_commands.ab2@1743>                 Dc.b $00,$93
0004A98C <internal_commands.ab2@1744>                 Dc.b "RTR",0
0004A98D <internal_commands.ab2@1745>                 Dc.b 0
0004A98E <internal_commands.ab2@1746>                 Even
0004A990 <internal_commands.ab2@1748>                 Dc.w $4E77
0004A994 <internal_commands.ab2@1749>                 Dc.w $0000,$0000
0004A996 <internal_commands.ab2@1750>                 Dc.b $FF,$FF
0004A998 <internal_commands.ab2@1751>                 Dc.w $FFFF
0004A99C <internal_commands.ab2@1752>                 Dc.l $00000000
0004A99E <internal_commands.ab2@1753>                 Dc.w $0000
0004A9A2 <internal_commands.ab2@1757> oprts:          Dc.l opsbcd
0004A9A4 <internal_commands.ab2@1758>                 Dc.b $00,$94
0004A9A8 <internal_commands.ab2@1759>                 Dc.b "RTS",0
0004A9A9 <internal_commands.ab2@1760>                 Dc.b 0
0004A9AA <internal_commands.ab2@1761>                 Even
0004A9AC <internal_commands.ab2@1763>                 Dc.w $4E75
0004A9B0 <internal_commands.ab2@1764>                 Dc.w $0000,$0000
0004A9B2 <internal_commands.ab2@1765>                 Dc.b $FF,$FF
0004A9B4 <internal_commands.ab2@1766>                 Dc.w $FFFF
0004A9B8 <internal_commands.ab2@1767>                 Dc.l $00000000
0004A9BA <internal_commands.ab2@1768>                 Dc.w $0000
0004A9BE <internal_commands.ab2@1772> opsbcd:         Dc.l opscc
0004A9C0 <internal_commands.ab2@1773>                 Dc.b $00,$95
0004A9C5 <internal_commands.ab2@1774>                 Dc.b "SBCD",0
0004A9C6 <internal_commands.ab2@1775>                 Dc.b 0
0004A9C8 <internal_commands.ab2@1778>                 Dc.w $8100
0004A9CC <internal_commands.ab2@1779>                 Dc.w $0011,$0011
0004A9CE <internal_commands.ab2@1780>                 Dc.b $90,$00
0004A9D0 <internal_commands.ab2@1781>                 Dc.w $FFF0
0004A9D4 <internal_commands.ab2@1782>                 Dc.l _abcdchk
0004A9D6 <internal_commands.ab2@1783>                 Dc.w $0000
0004A9DA <internal_commands.ab2@1787> opscc:          Dc.l opscs
0004A9DC <internal_commands.ab2@1788>                 Dc.b $00,$96
0004A9E0 <internal_commands.ab2@1789>                 Dc.b "SCC",0
0004A9E1 <internal_commands.ab2@1790>                 Dc.b 0
0004A9E2 <internal_commands.ab2@1791>                 Even
0004A9E4 <internal_commands.ab2@1793>                 Dc.w $54C0
0004A9E8 <internal_commands.ab2@1794>                 Dc.w $01FD,$0000
0004A9EA <internal_commands.ab2@1795>                 Dc.b $03,$FF
0004A9EC <internal_commands.ab2@1796>                 Dc.w $FFF0
0004A9F0 <internal_commands.ab2@1797>                 Dc.l $00000000
0004A9F2 <internal_commands.ab2@1798>                 Dc.w $0000
0004A9F6 <internal_commands.ab2@1802> opscs:          Dc.l opscq
0004A9F8 <internal_commands.ab2@1803>                 Dc.b $00,$97
0004A9FC <internal_commands.ab2@1804>                 Dc.b "SCS",0
0004A9FD <internal_commands.ab2@1805>                 Dc.b 0
0004A9FE <internal_commands.ab2@1806>                 Even
0004AA00 <internal_commands.ab2@1808>                 Dc.w $55C0
0004AA04 <internal_commands.ab2@1809>                 Dc.w $01FD,$0000
0004AA06 <internal_commands.ab2@1810>                 Dc.b $03,$FF
0004AA08 <internal_commands.ab2@1811>                 Dc.w $FFF0
0004AA0C <internal_commands.ab2@1812>                 Dc.l $00000000
0004AA0E <internal_commands.ab2@1813>                 Dc.w $0000
0004AA12 <internal_commands.ab2@1817> opscq:          Dc.l opsge
0004AA14 <internal_commands.ab2@1818>                 Dc.b $00,$98
0004AA18 <internal_commands.ab2@1819>                 Dc.b "SEQ",0
0004AA19 <internal_commands.ab2@1820>                 Dc.b 0
0004AA1A <internal_commands.ab2@1821>                 Even
0004AA1C <internal_commands.ab2@1823>                 Dc.w $57C0
0004AA20 <internal_commands.ab2@1824>                 Dc.w $01FD,$0000
0004AA22 <internal_commands.ab2@1825>                 Dc.b $03,$FF
0004AA24 <internal_commands.ab2@1826>                 Dc.w $FFF0
0004AA28 <internal_commands.ab2@1827>                 Dc.l $00000000
0004AA2A <internal_commands.ab2@1828>                 Dc.w $0000
0004AA2E <internal_commands.ab2@1832> opsge:          Dc.l opsgt
0004AA30 <internal_commands.ab2@1833>                 Dc.b $00,$99
0004AA34 <internal_commands.ab2@1834>                 Dc.b "SGE",0
0004AA35 <internal_commands.ab2@1835>                 Dc.b 0
0004AA36 <internal_commands.ab2@1836>                 Even
0004AA38 <internal_commands.ab2@1838>                 Dc.w $5CC0
0004AA3C <internal_commands.ab2@1839>                 Dc.w $01FD,$0000
0004AA3E <internal_commands.ab2@1840>                 Dc.b $03,$FF
0004AA40 <internal_commands.ab2@1841>                 Dc.w $FFF0
0004AA44 <internal_commands.ab2@1842>                 Dc.l $00000000
0004AA46 <internal_commands.ab2@1843>                 Dc.w $0000
0004AA4A <internal_commands.ab2@1847> opsgt:          Dc.l opshi
0004AA4C <internal_commands.ab2@1848>                 Dc.b $00,$9A
0004AA50 <internal_commands.ab2@1849>                 Dc.b "SGT",0
0004AA51 <internal_commands.ab2@1850>                 Dc.b 0
0004AA52 <internal_commands.ab2@1851>                 Even
0004AA54 <internal_commands.ab2@1853>                 Dc.w $5EC0
0004AA58 <internal_commands.ab2@1854>                 Dc.w $01FD,$0000
0004AA5A <internal_commands.ab2@1855>                 Dc.b $03,$FF
0004AA5C <internal_commands.ab2@1856>                 Dc.w $FFF0
0004AA60 <internal_commands.ab2@1857>                 Dc.l $00000000
0004AA62 <internal_commands.ab2@1858>                 Dc.w $0000
0004AA66 <internal_commands.ab2@1862> opshi:          Dc.l opsle
0004AA68 <internal_commands.ab2@1863>                 Dc.b $00,$9B
0004AA6C <internal_commands.ab2@1864>                 Dc.b "SHI",0
0004AA6D <internal_commands.ab2@1865>                 Dc.b 0
0004AA6E <internal_commands.ab2@1866>                 Even
0004AA70 <internal_commands.ab2@1868>                 Dc.w $52C0
0004AA74 <internal_commands.ab2@1869>                 Dc.w $01FD,$0000
0004AA76 <internal_commands.ab2@1870>                 Dc.b $03,$FF
0004AA78 <internal_commands.ab2@1871>                 Dc.w $FFF0
0004AA7C <internal_commands.ab2@1872>                 Dc.l $00000000
0004AA7E <internal_commands.ab2@1873>                 Dc.w $0000
0004AA82 <internal_commands.ab2@1877> opsle:          Dc.l opsls
0004AA84 <internal_commands.ab2@1878>                 Dc.b $00,$9C
0004AA88 <internal_commands.ab2@1879>                 Dc.b "SLE",0
0004AA89 <internal_commands.ab2@1880>                 Dc.b 0
0004AA8A <internal_commands.ab2@1881>                 Even
0004AA8C <internal_commands.ab2@1883>                 Dc.w $5FC0
0004AA90 <internal_commands.ab2@1884>                 Dc.w $01FD,$0000
0004AA92 <internal_commands.ab2@1885>                 Dc.b $03,$FF
0004AA94 <internal_commands.ab2@1886>                 Dc.w $FFF0
0004AA98 <internal_commands.ab2@1887>                 Dc.l $00000000
0004AA9A <internal_commands.ab2@1888>                 Dc.w $0000
0004AA9E <internal_commands.ab2@1892> opsls:          Dc.l opslt
0004AAA0 <internal_commands.ab2@1893>                 Dc.b $00,$9D
0004AAA4 <internal_commands.ab2@1894>                 Dc.b "SLS",0
0004AAA5 <internal_commands.ab2@1895>                 Dc.b 0
0004AAA6 <internal_commands.ab2@1896>                 Even
0004AAA8 <internal_commands.ab2@1898>                 Dc.w $53C0
0004AAAC <internal_commands.ab2@1899>                 Dc.w $01FD,$0000
0004AAAE <internal_commands.ab2@1900>                 Dc.b $03,$FF
0004AAB0 <internal_commands.ab2@1901>                 Dc.w $FFF0
0004AAB4 <internal_commands.ab2@1902>                 Dc.l $00000000
0004AAB6 <internal_commands.ab2@1903>                 Dc.w $0000
0004AABA <internal_commands.ab2@1907> opslt:          Dc.l opsmi
0004AABC <internal_commands.ab2@1908>                 Dc.b $00,$9E
0004AAC0 <internal_commands.ab2@1909>                 Dc.b "SLT",0
0004AAC1 <internal_commands.ab2@1910>                 Dc.b 0
0004AAC2 <internal_commands.ab2@1911>                 Even
0004AAC4 <internal_commands.ab2@1913>                 Dc.w $5DC0
0004AAC8 <internal_commands.ab2@1914>                 Dc.w $01FD,$0000
0004AACA <internal_commands.ab2@1915>                 Dc.b $03,$FF
0004AACC <internal_commands.ab2@1916>                 Dc.w $FFF0
0004AAD0 <internal_commands.ab2@1917>                 Dc.l $00000000
0004AAD2 <internal_commands.ab2@1918>                 Dc.w $0000
0004AAD6 <internal_commands.ab2@1922> opsmi:          Dc.l opsne
0004AAD8 <internal_commands.ab2@1923>                 Dc.b $00,$9F
0004AADC <internal_commands.ab2@1924>                 Dc.b "SMI",0
0004AADD <internal_commands.ab2@1925>                 Dc.b 0
0004AADE <internal_commands.ab2@1926>                 Even
0004AAE0 <internal_commands.ab2@1928>                 Dc.w $5BC0
0004AAE4 <internal_commands.ab2@1929>                 Dc.w $01FD,$0000
0004AAE6 <internal_commands.ab2@1930>                 Dc.b $03,$FF
0004AAE8 <internal_commands.ab2@1931>                 Dc.w $FFF0
0004AAEC <internal_commands.ab2@1932>                 Dc.l $00000000
0004AAEE <internal_commands.ab2@1933>                 Dc.w $0000
0004AAF2 <internal_commands.ab2@1937> opsne:          Dc.l opspl
0004AAF4 <internal_commands.ab2@1938>                 Dc.b $00,$A0
0004AAF8 <internal_commands.ab2@1939>                 Dc.b "SNE",0
0004AAF9 <internal_commands.ab2@1940>                 Dc.b 0
0004AAFA <internal_commands.ab2@1941>                 Even
0004AAFC <internal_commands.ab2@1943>                 Dc.w $56C0
0004AB00 <internal_commands.ab2@1944>                 Dc.w $01FD,$0000
0004AB02 <internal_commands.ab2@1945>                 Dc.b $03,$FF
0004AB04 <internal_commands.ab2@1946>                 Dc.w $FFF0
0004AB08 <internal_commands.ab2@1947>                 Dc.l $00000000
0004AB0A <internal_commands.ab2@1948>                 Dc.w $0000
0004AB0E <internal_commands.ab2@1952> opspl:          Dc.l opsvc
0004AB10 <internal_commands.ab2@1953>                 Dc.b $00,$A1
0004AB14 <internal_commands.ab2@1954>                 Dc.b "SPL",0
0004AB15 <internal_commands.ab2@1955>                 Dc.b 0
0004AB16 <internal_commands.ab2@1956>                 Even
0004AB18 <internal_commands.ab2@1958>                 Dc.w $5AC0
0004AB1C <internal_commands.ab2@1959>                 Dc.w $01FD,$0000
0004AB1E <internal_commands.ab2@1960>                 Dc.b $03,$FF
0004AB20 <internal_commands.ab2@1961>                 Dc.w $FFF0
0004AB24 <internal_commands.ab2@1962>                 Dc.l $00000000
0004AB26 <internal_commands.ab2@1963>                 Dc.w $0000
0004AB2A <internal_commands.ab2@1967> opsvc:          Dc.l opsvs
0004AB2C <internal_commands.ab2@1968>                 Dc.b $00,$A2
0004AB30 <internal_commands.ab2@1969>                 Dc.b "SVC",0
0004AB31 <internal_commands.ab2@1970>                 Dc.b 0
0004AB32 <internal_commands.ab2@1971>                 Even
0004AB34 <internal_commands.ab2@1973>                 Dc.w $58C0
0004AB38 <internal_commands.ab2@1974>                 Dc.w $01FD,$0000
0004AB3A <internal_commands.ab2@1975>                 Dc.b $03,$FF
0004AB3C <internal_commands.ab2@1976>                 Dc.w $FFF0
0004AB40 <internal_commands.ab2@1977>                 Dc.l $00000000
0004AB42 <internal_commands.ab2@1978>                 Dc.w $0000
0004AB46 <internal_commands.ab2@1982> opsvs:          Dc.l opst
0004AB48 <internal_commands.ab2@1983>                 Dc.b $00,$A3
0004AB4C <internal_commands.ab2@1984>                 Dc.b "SVS",0
0004AB4D <internal_commands.ab2@1985>                 Dc.b 0
0004AB4E <internal_commands.ab2@1986>                 Even
0004AB50 <internal_commands.ab2@1988>                 Dc.w $59C0
0004AB54 <internal_commands.ab2@1989>                 Dc.w $01FD,$0000
0004AB56 <internal_commands.ab2@1990>                 Dc.b $03,$FF
0004AB58 <internal_commands.ab2@1991>                 Dc.w $FFF0
0004AB5C <internal_commands.ab2@1992>                 Dc.l $00000000
0004AB5E <internal_commands.ab2@1993>                 Dc.w $0000
0004AB62 <internal_commands.ab2@1997> opst:           Dc.l opsf
0004AB64 <internal_commands.ab2@1998>                 Dc.b $00,$A4
0004AB67 <internal_commands.ab2@1999>                 Dc.b "ST",0
0004AB68 <internal_commands.ab2@2000>                 Dc.b 0
0004AB6A <internal_commands.ab2@2003>                 Dc.w $50C0
0004AB6E <internal_commands.ab2@2004>                 Dc.w $01FD,$0000
0004AB70 <internal_commands.ab2@2005>                 Dc.b $03,$FF
0004AB72 <internal_commands.ab2@2006>                 Dc.w $FFF0
0004AB76 <internal_commands.ab2@2007>                 Dc.l $00000000
0004AB78 <internal_commands.ab2@2008>                 Dc.w $0000
0004AB7C <internal_commands.ab2@2012> opsf:           Dc.l opstop
0004AB7E <internal_commands.ab2@2013>                 Dc.b $00,$A5
0004AB81 <internal_commands.ab2@2014>                 Dc.b "SF",0
0004AB82 <internal_commands.ab2@2015>                 Dc.b 0
0004AB84 <internal_commands.ab2@2018>                 Dc.w $51C0
0004AB88 <internal_commands.ab2@2019>                 Dc.w $01FD,$0000
0004AB8A <internal_commands.ab2@2020>                 Dc.b $03,$FF
0004AB8C <internal_commands.ab2@2021>                 Dc.w $FFF0
0004AB90 <internal_commands.ab2@2022>                 Dc.l $00000000
0004AB92 <internal_commands.ab2@2023>                 Dc.w $0000
0004AB96 <internal_commands.ab2@2027> opstop:         Dc.l opsub
0004AB98 <internal_commands.ab2@2028>                 Dc.b $00,$A6
0004AB9D <internal_commands.ab2@2029>                 Dc.b "STOP",0
0004AB9E <internal_commands.ab2@2030>                 Dc.b 0
0004ABA0 <internal_commands.ab2@2033>                 Dc.w $4E72
0004ABA4 <internal_commands.ab2@2034>                 Dc.w $0800,$0000
0004ABA6 <internal_commands.ab2@2035>                 Dc.b $FF,$FF
0004ABA8 <internal_commands.ab2@2036>                 Dc.w $FFFF
0004ABAC <internal_commands.ab2@2037>                 Dc.l $00000000
0004ABAE <internal_commands.ab2@2038>                 Dc.w $0000
0004ABB2 <internal_commands.ab2@2042> opsub:          Dc.l opsubi
0004ABB4 <internal_commands.ab2@2043>                 Dc.b $00,$A7
0004ABB8 <internal_commands.ab2@2044>                 Dc.b "SUB",0
0004ABB9 <internal_commands.ab2@2045>                 Dc.b 0
0004ABBA <internal_commands.ab2@2046>                 Even
0004ABBC <internal_commands.ab2@2048>                 Dc.w $9000
0004ABC0 <internal_commands.ab2@2049>                 Dc.w $0FFF,$01FD
0004ABC2 <internal_commands.ab2@2050>                 Dc.b $03,$9F
0004ABC4 <internal_commands.ab2@2051>                 Dc.w $6210
0004ABC8 <internal_commands.ab2@2052>                 Dc.l _addchk
0004ABCA <internal_commands.ab2@2053>                 Dc.w $8003
0004ABCE <internal_commands.ab2@2057> opsubi:         Dc.l opsuba
0004ABD0 <internal_commands.ab2@2058>                 Dc.b $00,$A8
0004ABD5 <internal_commands.ab2@2059>                 Dc.b "SUBI",0
0004ABD6 <internal_commands.ab2@2060>                 Dc.b 0
0004ABD8 <internal_commands.ab2@2063>                 Dc.w $0400
0004ABDC <internal_commands.ab2@2064>                 Dc.w $0800,$01FD
0004ABDE <internal_commands.ab2@2065>                 Dc.b $FF,$03
0004ABE0 <internal_commands.ab2@2066>                 Dc.w $6210
0004ABE4 <internal_commands.ab2@2067>                 Dc.l $00000000
0004ABE6 <internal_commands.ab2@2068>                 Dc.w $0000
0004ABEA <internal_commands.ab2@2072> opsuba:         Dc.l opsubq
0004ABEC <internal_commands.ab2@2073>                 Dc.b $00,$A9
0004ABF1 <internal_commands.ab2@2074>                 Dc.b "SUBA",0
0004ABF2 <internal_commands.ab2@2075>                 Dc.b 0
0004ABF4 <internal_commands.ab2@2078>                 Dc.w $90C0
0004ABF8 <internal_commands.ab2@2079>                 Dc.w $0FFF,$0002
0004ABFA <internal_commands.ab2@2080>                 Dc.b $03,$9F
0004ABFC <internal_commands.ab2@2081>                 Dc.w $810F
0004AC00 <internal_commands.ab2@2082>                 Dc.l $00000000
0004AC02 <internal_commands.ab2@2083>                 Dc.w $0000
0004AC06 <internal_commands.ab2@2087> opsubq:         Dc.l opsubx
0004AC08 <internal_commands.ab2@2088>                 Dc.b $00,$AA
0004AC0D <internal_commands.ab2@2089>                 Dc.b "SUBQ",0
0004AC0E <internal_commands.ab2@2090>                 Dc.b 0
0004AC10 <internal_commands.ab2@2093>                 Dc.w $5100
0004AC14 <internal_commands.ab2@2094>                 Dc.w $0800,$01FF
0004AC16 <internal_commands.ab2@2095>                 Dc.b $FF,$03
0004AC18 <internal_commands.ab2@2096>                 Dc.w $6210
0004AC1C <internal_commands.ab2@2097>                 Dc.l $00000000
0004AC1E <internal_commands.ab2@2098>                 Dc.w $0001
0004AC22 <internal_commands.ab2@2102> opsubx:         Dc.l opswap
0004AC24 <internal_commands.ab2@2103>                 Dc.b $00,$AB
0004AC29 <internal_commands.ab2@2104>                 Dc.b "SUBX",0
0004AC2A <internal_commands.ab2@2105>                 Dc.b 0
0004AC2C <internal_commands.ab2@2108>                 Dc.w $9100
0004AC30 <internal_commands.ab2@2109>                 Dc.w $0011,$0011
0004AC32 <internal_commands.ab2@2110>                 Dc.b $0F,$9F
0004AC34 <internal_commands.ab2@2111>                 Dc.w $6210
0004AC38 <internal_commands.ab2@2112>                 Dc.l _abcdchk
0004AC3A <internal_commands.ab2@2113>                 Dc.w $0000
0004AC3E <internal_commands.ab2@2117> opswap:         Dc.l optas
0004AC40 <internal_commands.ab2@2118>                 Dc.b $00,$AC
0004AC45 <internal_commands.ab2@2119>                 Dc.b "SWAP",0
0004AC46 <internal_commands.ab2@2120>                 Dc.b 0
0004AC48 <internal_commands.ab2@2123>                 Dc.w $4840
0004AC4C <internal_commands.ab2@2124>                 Dc.w $0001,$0000
0004AC4E <internal_commands.ab2@2125>                 Dc.b $0F,$FF
0004AC50 <internal_commands.ab2@2126>                 Dc.w $FF1F
0004AC54 <internal_commands.ab2@2127>                 Dc.l $00000000
0004AC56 <internal_commands.ab2@2128>                 Dc.w $0000
0004AC5A <internal_commands.ab2@2132> optas:          Dc.l optrap
0004AC5C <internal_commands.ab2@2133>                 Dc.b $00,$AD
0004AC60 <internal_commands.ab2@2134>                 Dc.b "BSS",0                               ;Dc.b "TAS",0 org source
0004AC61 <internal_commands.ab2@2135>                 Dc.b 0
0004AC62 <internal_commands.ab2@2136>                 Even
0004AC64 <internal_commands.ab2@2138>                 Dc.w $4AC0
0004AC68 <internal_commands.ab2@2139>                 Dc.w $01FD,$0000
0004AC6A <internal_commands.ab2@2140>                 Dc.b $03,$FF
0004AC6C <internal_commands.ab2@2141>                 Dc.w $FFF0
0004AC70 <internal_commands.ab2@2142>                 Dc.l $00000000
0004AC72 <internal_commands.ab2@2143>                 Dc.w $0000
0004AC76 <internal_commands.ab2@2147> optrap:         Dc.l optrapv
0004AC78 <internal_commands.ab2@2148>                 Dc.b $00,$AE
0004AC7D <internal_commands.ab2@2149>                 Dc.b "TRAP",0
0004AC7E <internal_commands.ab2@2150>                 Dc.b 0
0004AC80 <internal_commands.ab2@2153>                 Dc.w $4E40
0004AC84 <internal_commands.ab2@2154>                 Dc.w $0800,$0000
0004AC86 <internal_commands.ab2@2155>                 Dc.b $FF,$FF
0004AC88 <internal_commands.ab2@2156>                 Dc.w $FFFF
0004AC8C <internal_commands.ab2@2157>                 Dc.l $00000000
0004AC8E <internal_commands.ab2@2158>                 Dc.w $0004
0004AC92 <internal_commands.ab2@2162> optrapv:        Dc.l optst
0004AC94 <internal_commands.ab2@2163>                 Dc.b $00,$AF
0004AC9A <internal_commands.ab2@2164>                 Dc.b "TRAPV",0
0004AC9B <internal_commands.ab2@2165>                 Dc.b 0
0004AC9C <internal_commands.ab2@2166>                 Even
0004AC9E <internal_commands.ab2@2168>                 Dc.w $4E76
0004ACA2 <internal_commands.ab2@2169>                 Dc.w $0000,$0000
0004ACA4 <internal_commands.ab2@2170>                 Dc.b $FF,$FF
0004ACA6 <internal_commands.ab2@2171>                 Dc.w $FFFF
0004ACAA <internal_commands.ab2@2172>                 Dc.l $00000000
0004ACAC <internal_commands.ab2@2173>                 Dc.w $0000
0004ACB0 <internal_commands.ab2@2177> optst:          Dc.l opunlk
0004ACB2 <internal_commands.ab2@2178>                 Dc.b $00,$B0
0004ACB6 <internal_commands.ab2@2179>                 Dc.b "TST",0
0004ACB7 <internal_commands.ab2@2180>                 Dc.b 0
0004ACB8 <internal_commands.ab2@2181>                 Even
0004ACBA <internal_commands.ab2@2183>                 Dc.w $4A00
0004ACBE <internal_commands.ab2@2184>                 Dc.w $01FD,$0000
0004ACC0 <internal_commands.ab2@2185>                 Dc.b $03,$FF
0004ACC2 <internal_commands.ab2@2186>                 Dc.w $6210
0004ACC6 <internal_commands.ab2@2187>                 Dc.l $00000000
0004ACC8 <internal_commands.ab2@2188>                 Dc.w $0000
0004ACCC <internal_commands.ab2@2192> opunlk:         Dc.l AL_0_1BE8
0004ACCE <internal_commands.ab2@2193>                 Dc.b $00,$B1
0004ACD3 <internal_commands.ab2@2194>                 Dc.b "UNLK",0
0004ACD4 <internal_commands.ab2@2195>                 Dc.b 0
0004ACD6 <internal_commands.ab2@2198>                 Dc.w $4E58
0004ACDA <internal_commands.ab2@2199>                 Dc.w $0002,$0000
0004ACDC <internal_commands.ab2@2200>                 Dc.b $0F,$FF
0004ACDE <internal_commands.ab2@2201>                 Dc.w $FFFF
0004ACE2 <internal_commands.ab2@2202>                 Dc.l $00000000
0004ACE4 <internal_commands.ab2@2203>                 Dc.w $0000
0004ACE8 <internal_commands.ab2@2208> AL_0_1BE8:      Dc.l AL_0_1E5A
0004ACEA <internal_commands.ab2@2209>                 Dc.b $00,$B2
0004ACF1 <internal_commands.ab2@2210>                 Dc.b "EndAsm",0
0004ACF2 <internal_commands.ab2@2211>                 Dc.b 0
0004ACF4 <internal_commands.ab2@2230>       MOVEQ #$00,D0
0004ACF6 <internal_commands.ab2@2231>       RTS
0004ACF8 <internal_commands.ab2@2235>       MOVEQ #-$01,D0
0004ACFA <internal_commands.ab2@2236>       RTS
0004ACFC <internal_commands.ab2@2240>       MOVEQ #-$02,D0
0004ACFE <internal_commands.ab2@2241>       RTS
0004AD00 <internal_commands.ab2@2245>       MOVEQ #$01,D0
0004AD02 <internal_commands.ab2@2246>       RTS
0004AD04 <internal_commands.ab2@2251>   TST.l d5
0004AD08 <internal_commands.ab2@2252>   BNE 'l1
0004AD0A <internal_commands.ab2@2253>     MOVEQ #0,d5
0004AD0C <internal_commands.ab2@2254>     BSET d4,d5
0004AD0E <internal_commands.ab2@2255>     MOVE.l d5,d4
0004AD10 <internal_commands.ab2@2256>     MOVEQ #$f,d5
0004AD14 <internal_commands.ab2@2257>     BRA _movemchk                                          ;was JMP
0004AD1A <internal_commands.ab2@2260>   CMP.l #1,d5
0004AD1E <internal_commands.ab2@2261>   BNE 'l10
0004AD20 <internal_commands.ab2@2262>     MOVEQ #0,d5
0004AD22 <internal_commands.ab2@2263>     ADDQ #8,d4
0004AD24 <internal_commands.ab2@2264>     BSET d4,d5
0004AD26 <internal_commands.ab2@2265>     MOVE.l d5,d4
0004AD28 <internal_commands.ab2@2266>     MOVEQ #$f,d5
0004AD2A <internal_commands.ab2@2273>       CMP.W D3,D5
0004AD2E <internal_commands.ab2@2274>       BEQ.W eaerror
0004AD32 <internal_commands.ab2@2275>       CMP.W #$000F,D3
0004AD36 <internal_commands.ab2@2276>       BEQ.W _movemchk__regscr
0004AD3A <internal_commands.ab2@2277>       CMP.W #$000F,D5
0004AD3E <internal_commands.ab2@2278>       BNE.W eaerror
0004AD40 <internal_commands.ab2@2281>       MOVEQ #$00,D0
0004AD42 <internal_commands.ab2@2282>       BSET  D3,D0
0004AD46 <internal_commands.ab2@2283>       ANDI.W  #$0813,D0
0004AD4A <internal_commands.ab2@2284>       BNE.W eaerror
0004AD4E <internal_commands.ab2@2285>       BSET  #010,D1
0004AD52 <internal_commands.ab2@2286>       BRA.W swapem
0004AD54 <internal_commands.ab2@2289>       MOVEQ #$00,D0
0004AD56 <internal_commands.ab2@2290>       BSET  D5,D0
0004AD5A <internal_commands.ab2@2291>       ANDI.W  #$0E0B,D0
0004AD5E <internal_commands.ab2@2292>       BNE.W eaerror
0004AD62 <internal_commands.ab2@2293>       CMP.W #$0004,D5
0004AD66 <internal_commands.ab2@2294>       BNE.W noerror
0004AD68 <internal_commands.ab2@2295>       MOVEQ #$0F,D0
0004AD6A <internal_commands.ab2@2298>        LSL.W #1,D2
0004AD6C <internal_commands.ab2@2299>        ROXR.W  #1,D6
0004AD70 <internal_commands.ab2@2300>       DBF D0,_movemchk__loop
0004AD72 <internal_commands.ab2@2302>       MOVE.W  D6,D2
0004AD76 <internal_commands.ab2@2303>       BRA.W noerror
0004AD78 <internal_commands.ab2@2307>       CMP.W D3,D5
0004AD7C <internal_commands.ab2@2308>       BEQ.W eaerror
0004AD7E <internal_commands.ab2@2309>       TST.W D3
0004AD82 <internal_commands.ab2@2310>       BNE.W noerror
0004AD86 <internal_commands.ab2@2311>       BSET  #7,D1
0004AD8A <internal_commands.ab2@2312>       BRA.W noerror
0004AD8E <internal_commands.ab2@2316>       CMP.W #$000C,D3
0004AD92 <internal_commands.ab2@2317>       BCS.W _movechk__notform
0004AD96 <internal_commands.ab2@2319>       CMP.W #$000C,D5
0004AD9A <internal_commands.ab2@2320>       BCC.W eaerror
0004AD9E <internal_commands.ab2@2321>       CMP.W #$000C,D3
0004ADA2 <internal_commands.ab2@2322>       BEQ.W _movechk__fromccr
0004ADA6 <internal_commands.ab2@2323>       CMP.W #$000D,D3
0004ADAA <internal_commands.ab2@2324>       BEQ.W _movechk__fromsr
0004ADAE <internal_commands.ab2@2325>       CMP.W #$000E,D3
0004ADB2 <internal_commands.ab2@2326>       BEQ.W _movechk__fromusp
0004ADB6 <internal_commands.ab2@2328>       BRA.W eaerror
0004ADBA <internal_commands.ab2@2331>       CMP.W #$000C,D5
0004ADBE <internal_commands.ab2@2332>       BCS.W _movechk__dosize
0004ADC2 <internal_commands.ab2@2334>       CMP.W #$000C,D3
0004ADC6 <internal_commands.ab2@2335>       BCC.W eaerror
0004ADCA <internal_commands.ab2@2336>       CMP.W #$000C,D5
0004ADCE <internal_commands.ab2@2337>       BEQ.W _movechk__toccr
0004ADD2 <internal_commands.ab2@2338>       CMP.W #$000D,D5
0004ADD6 <internal_commands.ab2@2339>       BEQ.W _movechk__tosr
0004ADDA <internal_commands.ab2@2340>       CMP.W #$000E,D5
0004ADDE <internal_commands.ab2@2341>       BEQ.W _movechk__tousp
0004ADE2 <internal_commands.ab2@2343>       BRA.W eaerror
0004ADE6 <internal_commands.ab2@2346>       MOVE.W  #$1000,D1
0004ADE8 <internal_commands.ab2@2347>       TST.W D6
0004ADEC <internal_commands.ab2@2348>       BEQ.W noerror
0004ADF0 <internal_commands.ab2@2349>       MOVE.W  #$3000,D1
0004ADF4 <internal_commands.ab2@2350>       CMP.W #$0004,D6
0004ADF8 <internal_commands.ab2@2351>       BEQ.W noerror
0004ADFC <internal_commands.ab2@2352>       MOVE.W  #$2000,D1
0004AE00 <internal_commands.ab2@2353>       BRA.W noerror
0004AE04 <internal_commands.ab2@2356>       CMP.W #$0001,D5                                      ;to address reg?
0004AE08 <internal_commands.ab2@2357>       BNE.W eaerror
0004AE0C <internal_commands.ab2@2358>       MOVE.W  #$4E68,D1
0004AE0E <internal_commands.ab2@2359>       OR.W  D4,D1
0004AE10 <internal_commands.ab2@2362>       MOVEQ #$00,D2
0004AE12 <internal_commands.ab2@2363>       MOVEQ #$00,D3
0004AE14 <internal_commands.ab2@2364>       MOVEQ #$00,D4
0004AE16 <internal_commands.ab2@2365>       MOVEQ #$00,D5
0004AE1A <internal_commands.ab2@2366>       BRA.W noerror
0004AE1E <internal_commands.ab2@2369>       CMP.W #$0001,D3
0004AE22 <internal_commands.ab2@2370>       BNE.W eaerror
0004AE26 <internal_commands.ab2@2371>       MOVE.W  #$4E60,D1
0004AE28 <internal_commands.ab2@2372>       OR.W  D2,D1
0004AE2C <internal_commands.ab2@2373>       BRA.W _movechk__usp
0004AE30 <internal_commands.ab2@2376>       MOVE.W  #$42C0,D1
0004AE34 <internal_commands.ab2@2379>       CMP.W #$0004,D6
0004AE38 <internal_commands.ab2@2380>       BNE.W szerror
0004AE3A <internal_commands.ab2@2381>       MOVEQ #$00,D3
0004AE3C <internal_commands.ab2@2382>       MOVEQ #$00,D2
0004AE40 <internal_commands.ab2@2383>       BRA.W swapem
0004AE44 <internal_commands.ab2@2386>       MOVE.W  #$40C0,D1
0004AE48 <internal_commands.ab2@2387>       BRA.W _movechk__from
0004AE4C <internal_commands.ab2@2390>       MOVE.W  #$44C0,D1
0004AE50 <internal_commands.ab2@2393>       CMP.W #$0004,D6
0004AE54 <internal_commands.ab2@2394>       BNE.W szerror
0004AE56 <internal_commands.ab2@2395>       MOVEQ #$00,D5
0004AE58 <internal_commands.ab2@2396>       MOVEQ #$00,D4
0004AE5C <internal_commands.ab2@2397>       BRA.W noerror
0004AE60 <internal_commands.ab2@2400>       MOVE.W  #$46C0,D1
0004AE64 <internal_commands.ab2@2401>       BRA.W _movechk__to
0004AE66 <internal_commands.ab2@2405>       CMP.W D3,D5
0004AE6A <internal_commands.ab2@2406>       BEQ.W _exgchk__skip
0004AE6E <internal_commands.ab2@2407>       ORI.W #$0088,D1
0004AE70 <internal_commands.ab2@2408>       TST.W D3
0004AE74 <internal_commands.ab2@2409>       BEQ.W noerror
0004AE78 <internal_commands.ab2@2410>       BRA.W swapem
0004AE7A <internal_commands.ab2@2413>       TST.W D3
0004AE7E <internal_commands.ab2@2414>       BEQ.W _exgchk__data
0004AE82 <internal_commands.ab2@2415>       ORI.W #$0048,D1
0004AE86 <internal_commands.ab2@2416>       BRA.W noerror
0004AE8A <internal_commands.ab2@2419>       ORI.W #$0040,D1
0004AE8E <internal_commands.ab2@2420>       BRA.W noerror
0004AE90 <internal_commands.ab2@2424>       TST.W D3
0004AE94 <internal_commands.ab2@2425>       BNE.W _bitchk__notdn
0004AE96 <internal_commands.ab2@2426>       LSL.W #8,D2
0004AE98 <internal_commands.ab2@2427>       LSL.W #1,D2
0004AE9A <internal_commands.ab2@2428>       OR.W  D2,D1
0004AE9E <internal_commands.ab2@2429>       BRA.W noerror
0004AEA2 <internal_commands.ab2@2432>       CMP.W #$0008,D6
0004AEA6 <internal_commands.ab2@2433>       BCC.W szerror
0004AEAA <internal_commands.ab2@2434>       EORI.W  #$0900,D1
0004AEAE <internal_commands.ab2@2435>       BRA.W noerror
0004AEB2 <internal_commands.ab2@2439>       MOVE.W  #$E4C0,D0
0004AEB6 <internal_commands.ab2@2440>       BRA.W _aslchk2
0004AEBA <internal_commands.ab2@2444>       MOVE.W  #$E6C0,D0
0004AEBE <internal_commands.ab2@2445>       BRA.W _aslchk2
0004AEC2 <internal_commands.ab2@2449>       MOVE.W  #$E2C0,D0
0004AEC6 <internal_commands.ab2@2450>       BRA.W _aslchk2
0004AECA <internal_commands.ab2@2454>       MOVE.W  #$E0C0,D0
0004AECC <internal_commands.ab2@2456>       TST.W D5
0004AED0 <internal_commands.ab2@2457>       BMI.W _aslchk2__word
0004AED4 <internal_commands.ab2@2458>       BNE.W eaerror
0004AED6 <internal_commands.ab2@2459>       LSL.W #4,D6
0004AED8 <internal_commands.ab2@2460>       OR.W  D6,D1
0004AEDA <internal_commands.ab2@2461>       OR.W  D4,D1
0004AEDE <internal_commands.ab2@2462>       CMP.W #$000B,D3
0004AEE2 <internal_commands.ab2@2463>       BEQ.W noerror
0004AEE4 <internal_commands.ab2@2464>       TST.W D3
0004AEE8 <internal_commands.ab2@2465>       BNE.W eaerror
0004AEEA <internal_commands.ab2@2466>       LSL.W #8,D2
0004AEEC <internal_commands.ab2@2467>       LSL.W #1,D2
0004AEEE <internal_commands.ab2@2468>       OR.W  D2,D1
0004AEF2 <internal_commands.ab2@2469>       BSET  #5,D1
0004AEF6 <internal_commands.ab2@2470>       BRA.W noerror
0004AEF8 <internal_commands.ab2@2473>       MOVEQ #$00,D5                                        ;dummy d0
0004AEFA <internal_commands.ab2@2474>       TST.W D3
0004AEFE <internal_commands.ab2@2475>       BEQ.W eaerror
0004AF02 <internal_commands.ab2@2476>       CMP.W #$0004,D6
0004AF06 <internal_commands.ab2@2477>       BNE.W szerror
0004AF0A <internal_commands.ab2@2478>       ANDI.W  #$0100,D1
0004AF0C <internal_commands.ab2@2479>       OR.W  D0,D1
0004AF10 <internal_commands.ab2@2480>       MOVEM.W D2/D3,-(A7)
0004AF14 <internal_commands.ab2@2481>       CMP.W #$0007,D3
0004AF18 <internal_commands.ab2@2482>       BCS.W _aslchk2__skip
0004AF1A <internal_commands.ab2@2483>       MOVE.W  D3,D2
0004AF1C <internal_commands.ab2@2484>       SUBQ.W  #7,D2
0004AF1E <internal_commands.ab2@2485>       MOVEQ #$07,D3
0004AF20 <internal_commands.ab2@2488>       OR.W  D2,D1
0004AF22 <internal_commands.ab2@2489>       LSL.W #3,D3
0004AF24 <internal_commands.ab2@2490>       OR.W  D3,D1
0004AF28 <internal_commands.ab2@2491>       MOVEM.W (A7)+,D2/D3
0004AF2C <internal_commands.ab2@2492>       BRA.W noerror
0004AF2E <internal_commands.ab2@2496>       CMP.W D3,D5
0004AF32 <internal_commands.ab2@2497>       BNE.W eaerror
0004AF34 <internal_commands.ab2@2498>       TST.W D3
0004AF38 <internal_commands.ab2@2499>       BEQ.W _abcdchk__ok
0004AF3C <internal_commands.ab2@2500>       BSET  #3,D1
0004AF3E <internal_commands.ab2@2501>       CMP.W D3,D3
0004AF40 <internal_commands.ab2@2504>       RTS
0004AF42 <internal_commands.ab2@2508>       TST.W D5                                             ;if dest is dn, ok
0004AF46 <internal_commands.ab2@2509>       BEQ.W _addchk__ok
0004AF48 <internal_commands.ab2@2510>       TST.W D3
0004AF4C <internal_commands.ab2@2511>       BNE.W eaerror                                        ;src not dn - fuct
0004AF50 <internal_commands.ab2@2512>       BSET  #008,D1                                        ;turn into dn,<ea>
0004AF54 <internal_commands.ab2@2513>       BRA.W swapem
0004AF56 <internal_commands.ab2@2516>       RTS
0004AF5A <internal_commands.ab2@2520>       CMP.W #$000C,D5                                      ;dest ccr?
0004AF5E <internal_commands.ab2@2521>       BNE.W _andichk__notccr
0004AF60 <internal_commands.ab2@2522>       TST.W D6
0004AF64 <internal_commands.ab2@2523>       BNE.W szerror
0004AF68 <internal_commands.ab2@2524>       BRA.W noerror
0004AF6C <internal_commands.ab2@2527>       CMP.W #$000D,D5                                      ;or ccr?
0004AF70 <internal_commands.ab2@2528>       BNE.W noerror
0004AF74 <internal_commands.ab2@2529>       CMP.W #$0004,D6
0004AF78 <internal_commands.ab2@2530>       BNE.W szerror
0004AF7C <internal_commands.ab2@2531>       BRA.W noerror
0004AF80 <internal_commands.ab2@2538> AL_0_1E5A:      Dc.l AL_0_1E66
0004AF82 <internal_commands.ab2@2539>                 Dc.b $00,$B3
0004AF87 <internal_commands.ab2@2540>                 Dc.b "List",0
0004AF88 <internal_commands.ab2@2541>                 Dc.b 0
0004AF8C <internal_commands.ab2@2545> AL_0_1E66:      Dc.l AL_0_1E74
0004AF8E <internal_commands.ab2@2546>                 Dc.b $00,$B4
0004AF95 <internal_commands.ab2@2547>                 Dc.b "SetErr",0
0004AF96 <internal_commands.ab2@2548>                 Dc.b 0
0004AF9A <internal_commands.ab2@2552> AL_0_1E74:      Dc.l AL_0_1E82
0004AF9C <internal_commands.ab2@2553>                 Dc.b $00,$B5
0004AFA3 <internal_commands.ab2@2554>                 Dc.b "ClrErr",0
0004AFA4 <internal_commands.ab2@2555>                 Dc.b 0
0004AFA8 <internal_commands.ab2@2559> AL_0_1E82:      Dc.l AL_0_1E92
0004AFAA <internal_commands.ab2@2560>                 Dc.b $00,$B7
0004AFB2 <internal_commands.ab2@2561>                 Dc.b "ErrFail",0
0004AFB3 <internal_commands.ab2@2562>                 Dc.b 0
0004AFB4 <internal_commands.ab2@2563>                 Even
0004AFB8 <internal_commands.ab2@2566> AL_0_1E92:      Dc.l AL_0_1EB2
0004AFBA <internal_commands.ab2@2567>                 Dc.b $00,$B8
0004AFBF <internal_commands.ab2@2568>                 Dc.b "Addr",0
0004AFD3 <internal_commands.ab2@2569>                 Dc.b "Objectname(Object#)",0
0004AFD4 <internal_commands.ab2@2570>                 Even
0004AFD8 <internal_commands.ab2@2573> AL_0_1EB2:      Dc.l AL_0_1EBE
0004AFDA <internal_commands.ab2@2574>                 Dc.b $00,$B9
0004AFDE <internal_commands.ab2@2575>                 Dc.b "MOD",0
0004AFDF <internal_commands.ab2@2576>                 Dc.b 0
0004AFE0 <internal_commands.ab2@2577>                 Even
0004AFE4 <internal_commands.ab2@2580> AL_0_1EBE:      Dc.l AL_0_1EC8
0004AFE6 <internal_commands.ab2@2581>                 Dc.b $00,$BA
0004AFE9 <internal_commands.ab2@2582>                 Dc.b "Pi",0
0004AFEA <internal_commands.ab2@2583>                 Dc.b 0
0004AFEE <internal_commands.ab2@2587> AL_0_1EC8:      Dc.l AL_0_1ED6
0004AFF0 <internal_commands.ab2@2588>                 Dc.b $00,$BB
0004AFF7 <internal_commands.ab2@2589>                 Dc.b "Repeat",0
0004AFF8 <internal_commands.ab2@2590>                 Dc.b 0
0004AFFC <internal_commands.ab2@2594> AL_0_1ED6:      Dc.l AL_0_1EEE
0004AFFE <internal_commands.ab2@2595>                 Dc.b $00,$BC
0004B004 <internal_commands.ab2@2596>                 Dc.b "Until",0
0004B011 <internal_commands.ab2@2597>                 Dc.b "<Expression>",0
0004B012 <internal_commands.ab2@2598>                 Even
0004B016 <internal_commands.ab2@2601> AL_0_1EEE:      Dc.l AL_0_1F0E
0004B018 <internal_commands.ab2@2602>                 Dc.b $00,$BD
0004B01F <internal_commands.ab2@2603>                 Dc.b "PutReg",0
0004B037 <internal_commands.ab2@2604>                 Dc.b "<68000 Reg>, <Variable>",0
0004B038 <internal_commands.ab2@2605>                 Even
0004B03C <internal_commands.ab2@2608> AL_0_1F0E:      Dc.l AL_0_1F3A
0004B03E <internal_commands.ab2@2609>                 Dc.b $00,$BE
0004B042 <internal_commands.ab2@2610>                 Dc.b "Pop",0
0004B065 <internal_commands.ab2@2611>                 Dc.b "<Gosub|For|Select|If|While|Repeat>",0
0004B066 <internal_commands.ab2@2612>                 Even                             
0004B06A <internal_commands.ab2@2615> AL_0_1F3A:      Dc.l AL_0_1F50
0004B06C <internal_commands.ab2@2616>                 Dc.b $00,$BF
0004B073 <internal_commands.ab2@2617>                 Dc.b "INCDIR",0
0004B07E <internal_commands.ab2@2618>                 Dc.b "<Pathname>",0
0004B082 <internal_commands.ab2@2622> AL_0_1F50:      Dc.l AL_0_1F5E
0004B084 <internal_commands.ab2@2623>                 Dc.b $00,$C0
0004B08A <internal_commands.ab2@2624>                 Dc.b "EndIf",0
0004B08B <internal_commands.ab2@2625>                 Dc.b 0
0004B08C <internal_commands.ab2@2626>                 Even
0004B090 <internal_commands.ab2@2629> AL_0_1F5E:      Dc.l AL_0_1F6A
0004B092 <internal_commands.ab2@2630>                 Dc.b $00,$C1
0004B097 <internal_commands.ab2@2631>                 Dc.b "Wend",0
0004B098 <internal_commands.ab2@2632>                 Dc.b 0
0004B09C <internal_commands.ab2@2636> AL_0_1F6A:      Dc.l AL_0_1F80
0004B09E <internal_commands.ab2@2637>                 Dc.b $00,$C2
0004B0A5 <internal_commands.ab2@2638>                 Dc.b "SysJsr",0
0004B0B7 <internal_commands.ab2@2639>                 Dc.b "<Routine address>",0
0004B0B8 <internal_commands.ab2@2640>                 Even
0004B0BC <internal_commands.ab2@2643> AL_0_1F80:      Dc.l AL_0_1F92
0004B0BE <internal_commands.ab2@2644>                 Dc.b $00,$C3
0004B0C8 <internal_commands.ab2@2645>                 Dc.b "WBStartup",0
0004B0C9 <internal_commands.ab2@2646>                 Dc.b 0
0004B0CA <internal_commands.ab2@2647>                 Even
0004B0CE <internal_commands.ab2@2650> AL_0_1F92:      Dc.l AL_0_1FAC
0004B0D0 <internal_commands.ab2@2651>                 Dc.b $00,$C4
0004B0D8 <internal_commands.ab2@2652>                 Dc.b "Maximum",0
0004B0E5 <internal_commands.ab2@2653>                 Dc.b "<Objectname>",0
0004B0E6 <internal_commands.ab2@2654>                 Even
0004B0EA <internal_commands.ab2@2657> AL_0_1FAC:      Dc.l AL_0_1FEC
0004B0EC <internal_commands.ab2@2658>                 Dc.b $00,$C5
0004B0EF <internal_commands.ab2@2659>                 Dc.b "On",0
0004B12A <internal_commands.ab2@2660>                 Dc.b "<Expression> Goto|Gosub <Program Label[,Program Label...]>",0
0004B12E <internal_commands.ab2@2664> AL_0_1FEC:      Dc.l AL_0_1FF8
0004B130 <internal_commands.ab2@2665>                 Dc.b $00,$C6
0004B134 <internal_commands.ab2@2666>                 Dc.b "Off",0
0004B135 <internal_commands.ab2@2667>                 Dc.b 0
0004B136 <internal_commands.ab2@2668>                 Even
0004B13A <internal_commands.ab2@2671> AL_0_1FF8:      Dc.l AL_0_2008
0004B13C <internal_commands.ab2@2672>                 Dc.b $00,$C7
0004B144 <internal_commands.ab2@2673>                 Dc.b "Forever",0
0004B145 <internal_commands.ab2@2674>                 Dc.b 0
0004B146 <internal_commands.ab2@2675>                 Even
0004B14A <internal_commands.ab2@2678> AL_0_2008:      Dc.l AL_0_2026
0004B14C <internal_commands.ab2@2679>                 Dc.b $00,$C8
0004B154 <internal_commands.ab2@2680>                 Dc.b "Restore",0
0004B164 <internal_commands.ab2@2681>                 Dc.b "[Program Label]",0
0004B168 <internal_commands.ab2@2685> AL_0_2026:      Dc.l AL_0_203E
0004B16A <internal_commands.ab2@2686>                 Dc.b $00,$C9
0004B173 <internal_commands.ab2@2687>                 Dc.b "Exchange",0
0004B17B <internal_commands.ab2@2688>                 Dc.b "Var,Var",0
0004B17C <internal_commands.ab2@2689>                 Even
0004B180 <internal_commands.ab2@2692> AL_0_203E:      Dc.l AL_0_2056
0004B182 <internal_commands.ab2@2693>                 Dc.b $00,$CA
0004B18A <internal_commands.ab2@2694>                 Dc.b "USEPATH",0
0004B193 <internal_commands.ab2@2695>                 Dc.b "Pathtext",0
0004B194 <internal_commands.ab2@2696>                 Even
0004B198 <internal_commands.ab2@2699> AL_0_2056:      Dc.l AL_0_2066
0004B19A <internal_commands.ab2@2700>                 Dc.b $00,$CB
0004B1A2 <internal_commands.ab2@2701>                 Dc.b "CloseEd",0
0004B1A3 <internal_commands.ab2@2702>                 Dc.b 0
0004B1A4 <internal_commands.ab2@2703>                 Even
0004B1A8 <internal_commands.ab2@2706> AL_0_2066:      Dc.l AL_0_2074
0004B1AA <internal_commands.ab2@2707>                 Dc.b $00,$CC
0004B1B0 <internal_commands.ab2@2708>                 Dc.b "NoCli",0
0004B1B1 <internal_commands.ab2@2709>                 Dc.b 0
0004B1B2 <internal_commands.ab2@2710>                 Even
0004B1B6 <internal_commands.ab2@2713> AL_0_2074:      Dc.l AL_0_2082
0004B1B8 <internal_commands.ab2@2714>                 Dc.b $00,$CD
0004B1BF <internal_commands.ab2@2715>                 Dc.b "BitTst",0
0004B1C0 <internal_commands.ab2@2716>                 Dc.b 0
0004B1C4 <internal_commands.ab2@2720> AL_0_2082:      Dc.l AL_0_2090
0004B1C6 <internal_commands.ab2@2721>                 Dc.b $00,$CE
0004B1CD <internal_commands.ab2@2722>                 Dc.b "BitSet",0
0004B1CE <internal_commands.ab2@2723>                 Dc.b 0
0004B1D2 <internal_commands.ab2@2727> AL_0_2090:      Dc.l AL_0_209E
0004B1D4 <internal_commands.ab2@2728>                 Dc.b $00,$CF
0004B1DB <internal_commands.ab2@2729>                 Dc.b "BitClr",0
0004B1DC <internal_commands.ab2@2730>                 Dc.b 0
0004B1E0 <internal_commands.ab2@2734> AL_0_209E:      Dc.l AL_0_20AC
0004B1E2 <internal_commands.ab2@2735>                 Dc.b $00,$D0
0004B1E9 <internal_commands.ab2@2736>                 Dc.b "BitChg",0
0004B1EA <internal_commands.ab2@2737>                 Dc.b 0
0004B1EE <internal_commands.ab2@2741> AL_0_20AC:      Dc.l AL_0_20CC
0004B1F0 <internal_commands.ab2@2742>                 Dc.b $00,$D1
0004B1F5 <internal_commands.ab2@2743>                 Dc.b "Used",0
0004B20B <internal_commands.ab2@2744>                 Dc.b "<Objectname(Object#)>",0
0004B20C <internal_commands.ab2@2745>                 Even
0004B210 <internal_commands.ab2@2748> AL_0_20CC:      Dc.l AL_0_20DE
0004B212 <internal_commands.ab2@2749>                 Dc.b $00,$D2
0004B21C <internal_commands.ab2@2750>                 Dc.b "RunErrsOn",0
0004B21D <internal_commands.ab2@2751>                 Dc.b 0
0004B21E <internal_commands.ab2@2752>                 Even
0004B222 <internal_commands.ab2@2755> AL_0_20DE:      Dc.l  _uselastpath
0004B224 <internal_commands.ab2@2756>                 Dc.b $00,$D3
0004B22F <internal_commands.ab2@2757>                 Dc.b "RunErrsOff",0
0004B230 <internal_commands.ab2@2758>                 Dc.b 0
0004B234 <internal_commands.ab2@2762> _uselastpath:   Dc.l _regload
0004B236 <internal_commands.ab2@2763>                 Dc.b $00,$D4
0004B242 <internal_commands.ab2@2764>                 Dc.b "USELASTPATH",0
0004B26F <internal_commands.ab2@2765>                 Dc.b "   # Uses the previous path set with usepath",0
0004B270 <internal_commands.ab2@2766>                 Even
0004B274 <internal_commands.ab2@2769> _regload:       Dc.l _regsave
0004B276 <internal_commands.ab2@2770>                 Dc.b $00,$D5
0004B27E <internal_commands.ab2@2771>                 Dc.b "RegLoad",0
0004B2B5 <internal_commands.ab2@2772>                 Dc.b "<regs>   # load max. 5 Vars to FPU regs for faster use",0
0004B2B6 <internal_commands.ab2@2773>                 Even
0004B2BA <internal_commands.ab2@2776> _regsave:       Dc.l _object
0004B2BC <internal_commands.ab2@2777>                 Dc.b $00,$D6
0004B2C4 <internal_commands.ab2@2778>                 Dc.b "RegSave",0
0004B2E3 <internal_commands.ab2@2779>                 Dc.b "   # store changed loaded regs",0
0004B2E4 <internal_commands.ab2@2780>                 Even
0004B2E8 <internal_commands.ab2@2783> _object:        Dc.l _usepath2
0004B2EA <internal_commands.ab2@2784>                 Dc.b $00,$D7
0004B2F1 <internal_commands.ab2@2785>                 Dc.b "Object",0
0004B327 <internal_commands.ab2@2786>                 Dc.b "<Name>    # define object #developobject=1 disable it",0
0004B328 <internal_commands.ab2@2787>                 Even
0004B32C <internal_commands.ab2@2790> _usepath2:      Dc.l _lastrunerr
0004B32E <internal_commands.ab2@2791>                 Dc.b $00,$D8
0004B337 <internal_commands.ab2@2792>                 Dc.b "USEPATH2",0
0004B36C <internal_commands.ab2@2793>                 Dc.b "<Pathtext>   # a second type path can acsess with \\",0
0004B370 <internal_commands.ab2@2797> _lastrunerr:    Dc.l 0
0004B372 <internal_commands.ab2@2798>                 Dc.b $00,$D9
0004B382 <internal_commands.ab2@2799>                 Dc.b "LastRunErrsMode",0
0004B3B9 <internal_commands.ab2@2800>                 Dc.b "   # Set the runerror state that was before RunErrsOff",0
0004B3BA <internal_commands.ab2@2801>                 Even
0004B3BA <AmiBlitz3.ab2@28209> ; ///////////////////////////////////////////////////////////////////////////////////////
0004B3BE <AmiBlitz3.ab2@28214>            Dc.l cif_lt                                     ;ciflt
0004B3C2 <AmiBlitz3.ab2@28215>            Dc.l cif_eq                                     ;cifeq
0004B3C6 <AmiBlitz3.ab2@28216>            Dc.l cif_gt                                     ;cifgt
0004B3CA <AmiBlitz3.ab2@28217>            Ds.l 1                                          ;0
0004B3CE <AmiBlitz3.ab2@28218>            Dc.l cif_le                                     ;cifle
0004B3D2 <AmiBlitz3.ab2@28219>            Dc.l cif_ne                                     ;cifne
0004B3D6 <AmiBlitz3.ab2@28220>            Dc.l cif_le                                     ;cifge
0004B3DA <AmiBlitz3.ab2@28221>            Ds.l 1                                          ;0
0004B3DE <AmiBlitz3.ab2@28222>            Dc.l cif_ge                                     ;cifge
0004B3E2 <AmiBlitz3.ab2@28223>            Dc.l cif_ne                                     ;cifne
0004B3E6 <AmiBlitz3.ab2@28224>            Dc.l cif_ge                                     ;cifge
0004B3EA <AmiBlitz3.ab2@28225>            Ds.l 1                                          ;0
0004B3EE <AmiBlitz3.ab2@28228>            Dc.l do_newtype                                 ;donewtype
0004B3F2 <AmiBlitz3.ab2@28229>            Dc.l do_end                                     ;doend
0004B3F6 <AmiBlitz3.ab2@28230>            Dc.l do_let                                     ;dolet
0004B3FA <AmiBlitz3.ab2@28231>            Dc.l do_dim                                     ;dodim
0004B3FE <AmiBlitz3.ab2@28232>            Dc.l do_goto                                    ;dogoto
0004B402 <AmiBlitz3.ab2@28233>            Dc.l do_gosub                                   ;dogosub
0004B406 <AmiBlitz3.ab2@28234>            Dc.l do_return                                  ;doreturn
0004B40A <AmiBlitz3.ab2@28235>            Dc.l do_statement                               ;dostatement
0004B40E <AmiBlitz3.ab2@28236>            Dc.l do_function                                ;dofunc
0004B412 <AmiBlitz3.ab2@28237>            Dc.l do_mousewait                               ;domwait
0004B416 <AmiBlitz3.ab2@28238>            Dc.l do_if                                      ;doif
0004B41A <AmiBlitz3.ab2@28239>            Dc.l do_while                                   ;dowhile
0004B41E <AmiBlitz3.ab2@28240>            Dc.l do_Macro                                   ;domacro
0004B422 <AmiBlitz3.ab2@28241>            Dc.l do_select                                  ;doselect
0004B426 <AmiBlitz3.ab2@28242>            Dc.l do_case                                    ;docase
0004B42A <AmiBlitz3.ab2@28243>            Dc.l do_default                                 ;dodefault
0004B42E <AmiBlitz3.ab2@28244>            Dc.l do_AsmExit                                 ;doasmexit
0004B432 <AmiBlitz3.ab2@28245>            Dc.l do_xinclude                                ;doxinclude
0004B436 <AmiBlitz3.ab2@28246>            Dc.l do_INCLUDE                                 ;doinclude
0004B43A <AmiBlitz3.ab2@28247>            Dc.l do_syntax                                  ;syntaxerr
0004B43E <AmiBlitz3.ab2@28248>            Dc.l do_shared                                  ;doshared
0004B442 <AmiBlitz3.ab2@28249>            Dc.l do_for                                     ;dofor
0004B446 <AmiBlitz3.ab2@28250>            Dc.l do_next                                    ;donext
0004B44A <AmiBlitz3.ab2@28251>            Dc.l syntaxerr                                  ; To
0004B44E <AmiBlitz3.ab2@28252>            Dc.l syntaxerr                                  ; Step
0004B452 <AmiBlitz3.ab2@28253>            Dc.l do_data                                    ;dodata
0004B456 <AmiBlitz3.ab2@28254>            Dc.l do_read                                    ;doread
0004B45A <AmiBlitz3.ab2@28258>            Dc.l syntaxerr                                  ; CNIF
0004B45E <AmiBlitz3.ab2@28259>            Dc.l syntaxerr                                  ; CSIF
0004B462 <AmiBlitz3.ab2@28260>            Dc.l syntaxerr                                  ; CELSE
0004B466 <AmiBlitz3.ab2@28261>            Dc.l syntaxerr                                  ; CEND
0004B46A <AmiBlitz3.ab2@28262>            Dc.l do_cerr                                    ;docerr
0004B46E <AmiBlitz3.ab2@28263>            Dc.l do_then                                    ;dothen
0004B472 <AmiBlitz3.ab2@28264>            Dc.l do_else                                    ;doelse
0004B476 <AmiBlitz3.ab2@28265>            Dc.l do_even4                                   ;doeven4
0004B47A <AmiBlitz3.ab2@28266>            Dc.l do_even8                                   ;doeven8
0004B47E <AmiBlitz3.ab2@28268>            Dc.l do_dc                                      ;dodc
0004B482 <AmiBlitz3.ab2@28269>            Dc.l do_ds                                      ;dods
0004B486 <AmiBlitz3.ab2@28270>            Dc.l do_even                                    ;doeven
0004B48A <AmiBlitz3.ab2@28271>            Dc.l do_dcb                                     ;dodcb
0004B48E <AmiBlitz3.ab2@28272>            Dc.l do_setreg                                  ;dosetreg
0004B492 <AmiBlitz3.ab2@28273>            Dc.l do_IncBin                                  ;doincbin
0004B496 <AmiBlitz3.ab2@28274>            Dc.l do_free                                    ;dofree
0004B49A <AmiBlitz3.ab2@28275>            Dc.l do_use                                     ;douse
0004B49E <AmiBlitz3.ab2@28276>            Dc.l do_Stop                                    ;dostop
0004B4A2 <AmiBlitz3.ab2@28277>            Dc.l do_Cont                                    ;docont
0004B4A6 <AmiBlitz3.ab2@28278>            Dc.l syntaxerr                                  ;syntaxeer
0004B4AA <AmiBlitz3.ab2@28279>            Dc.l do_SetInt                                  ;dosetint
0004B4AE <AmiBlitz3.ab2@28280>            Dc.l do_ClrInt                                  ;doclrint
0004B4B2 <AmiBlitz3.ab2@28281>            Dc.l do_MaxLen                                  ;domaxlen
0004B4B6 <AmiBlitz3.ab2@28282>            Dc.l do_DEFTYPE                                 ;dodeftype
0004B4BA <AmiBlitz3.ab2@28283>            Dc.l do_BLITZ                                   ;doblitz
0004B4BE <AmiBlitz3.ab2@28284>            Dc.l do_AMIGA                                   ;doamiga
0004B4C2 <AmiBlitz3.ab2@28285>            Dc.l do_QAMIGA                                  ;doqamiga
0004B4C6 <AmiBlitz3.ab2@28286>            Dc.l do_VWait                                   ;dovwait
0004B4CA <AmiBlitz3.ab2@28287>            Dc.l do_LibJsr                                  ;dolibjsr
0004B4CE <AmiBlitz3.ab2@28288>            Dc.l do_TokeJsr                                 ;dotokejsr
0004B4D2 <AmiBlitz3.ab2@28289>            Dc.l do_BLibJsr                                 ;doblibjsr
0004B4D6 <AmiBlitz3.ab2@28290>            Dc.l _extb                                      ;syntaxerr
0004B4DA <AmiBlitz3.ab2@28294>            Dc.l syntaxerr                                  ;syntaxerr      ;flash2 ; for list
0004B4DE <AmiBlitz3.ab2@28295>            Dc.l do_SetErr                                  ;doseterr
0004B4E2 <AmiBlitz3.ab2@28296>            Dc.l do_ClrErr                                  ;doclrerr
0004B4E6 <AmiBlitz3.ab2@28297>            Dc.l syntaxerr                                  ;syntaxerr
0004B4EA <AmiBlitz3.ab2@28298>            Dc.l do_ErrFail                                 ;doerrfail
0004B4EE <AmiBlitz3.ab2@28299>            Dc.l syntaxerr
0004B4F2 <AmiBlitz3.ab2@28300>            Dc.l syntaxerr                                  ;mod
0004B4F6 <AmiBlitz3.ab2@28301>            Dc.l syntaxerr                                  ;Pi
0004B4FA <AmiBlitz3.ab2@28302>            Dc.l do_Repeat                                  ;dorepeat
0004B4FE <AmiBlitz3.ab2@28303>            Dc.l do_Until                                   ;dountil
0004B502 <AmiBlitz3.ab2@28304>            Dc.l do_PutReg                                  ;doputreg
0004B506 <AmiBlitz3.ab2@28305>            Dc.l do_Pop                                     ;dopop
0004B50A <AmiBlitz3.ab2@28306>            Dc.l do_INCDIR                                  ;doincdir
0004B50E <AmiBlitz3.ab2@28307>            Dc.l mydo_Endif2                                ;mydoendif2
0004B512 <AmiBlitz3.ab2@28308>            Dc.l do_Wend                                    ;dowend
0004B516 <AmiBlitz3.ab2@28309>            Dc.l do_SysJsr                                  ;dosysjsr
0004B51A <AmiBlitz3.ab2@28310>            Dc.l do_WBStartup                               ;dowbstartup
0004B51E <AmiBlitz3.ab2@28311>            Dc.l syntaxerr
0004B522 <AmiBlitz3.ab2@28312>            Dc.l do_Ongo                                    ;doongo
0004B526 <AmiBlitz3.ab2@28313>            Dc.l syntaxerr
0004B52A <AmiBlitz3.ab2@28314>            Dc.l do_Forever                                 ;doforever
0004B52E <AmiBlitz3.ab2@28315>            Dc.l do_Restore                                 ;dorestore
0004B532 <AmiBlitz3.ab2@28316>            Dc.l do_Exchange                                ;doexchange
0004B536 <AmiBlitz3.ab2@28317>            Dc.l do_USEPATH                                 ;dousepath
0004B53A <AmiBlitz3.ab2@28318>            Dc.l do_CloseEd                                 ;doclosed
0004B53E <AmiBlitz3.ab2@28319>            Dc.l do_NoCli                                   ;donocli
0004B542 <AmiBlitz3.ab2@28320>            Dc.l syntaxerr                                  ;syntaxerr
0004B546 <AmiBlitz3.ab2@28321>            Dc.l syntaxerr                                  ;syntaxerr
0004B54A <AmiBlitz3.ab2@28322>            Dc.l syntaxerr                                  ;syntaxerr
0004B54E <AmiBlitz3.ab2@28323>            Dc.l syntaxerr                                  ;syntaxerr
0004B552 <AmiBlitz3.ab2@28324>            Dc.l syntaxerr                                  ;syntaxerr
0004B556 <AmiBlitz3.ab2@28325>            Dc.l do_runerrson                               ;dorunerrson
0004B55A <AmiBlitz3.ab2@28326>            Dc.l do_runerrsoff                              ;dorunerrsoff
0004B55E <AmiBlitz3.ab2@28327>            Dc.l do_uselastpath
0004B562 <AmiBlitz3.ab2@28328>            Dc.l do_regload
0004B566 <AmiBlitz3.ab2@28329>            Dc.l do_regsave
0004B56A <AmiBlitz3.ab2@28330>            Dc.l do_Object
0004B56E <AmiBlitz3.ab2@28331>            Dc.l do_usepath2
0004B572 <AmiBlitz3.ab2@28332>            Dc.l do_LastRunErrsMode
0004B576 <AmiBlitz3.ab2@28355> menu_items:Dc.l menu_compile_run                                ;menuadds oreg source
0004B57A <AmiBlitz3.ab2@28356>            Dc.l menu_run
0004B57E <AmiBlitz3.ab2@28357>            Dc.l menu_createexecutable
0004B582 <AmiBlitz3.ab2@28358>            Dc.l menu_compileroptions
0004B586 <AmiBlitz3.ab2@28359>            Dc.l menu_createresidentfile
0004B58A <AmiBlitz3.ab2@28360>            Dc.l menu_viewnewtypes
0004B58E <AmiBlitz3.ab2@28361>            Dc.l menu_simcliarguments
0004B592 <AmiBlitz3.ab2@28362>            Dc.l menu_calculator
0004B596 <AmiBlitz3.ab2@28363>            Dc.l menu_reloadlibs
0004B59A <AmiBlitz3.ab2@28364>            Dc.l menu_loaddebugmodule
0004B59E <AmiBlitz3.ab2@28365>            Dc.l menu_dummyfunc
0004B5A2 <AmiBlitz3.ab2@28366>            Dc.l menu_newcreate
0004B5A6 <AmiBlitz3.ab2@28367>            Dc.l menu_dummyfunc
0004B5AA <AmiBlitz3.ab2@28368>            Dc.l toggledebug
0004B5AE <AmiBlitz3.ab2@28369>            Dc.l menu_dummyfunc
0004B5B2 <AmiBlitz3.ab2@28370>            Dc.l menu_dummyfunc
0004B5B4 <AmiBlitz3.ab2@28371> Even4
0004B5DE <AmiBlitz3.ab2@28375> !basic
0004B60C <AmiBlitz3.ab2@28376> error{"Inavlid amiblitz3 menu item called!"}
0004B62A <AmiBlitz3.ab2@28377> !asm
0004B62C <AmiBlitz3.ab2@28378> RTS
0004B62D <AmiBlitz3.ab2@28384> set_autorun:               Dc.b $00
0004B632 <AmiBlitz3.ab2@28385> autorun:                   Dc.b $80,$01,$01,$00,$01
0004B633 <AmiBlitz3.ab2@28387> set_interruptcheck:        Dc.b $00
0004B638 <AmiBlitz3.ab2@28388> interruptcheck             Dc.b $80,$01,$01,$00,$01
0004B639 <AmiBlitz3.ab2@28390> set_assemblercheck:        Ds.b 1
0004B63E <AmiBlitz3.ab2@28391> assemblercheck:            Dc.b $00,$01,$01,$00,$01
0004B63F <AmiBlitz3.ab2@28393> set_overflowcheck:         Ds.b 1
0004B644 <AmiBlitz3.ab2@28394> overflowcheck:             Dc.b $00,$01,$01,$00,$01
0004B64A <AmiBlitz3.ab2@28396> default_obsolete:          Dc.b $00,$80,$01,$01,$00,$01
0004B650 <AmiBlitz3.ab2@28397> default_interruptcheck:    Dc.b $00,$80,$01,$01,$00,$01
0004B656 <AmiBlitz3.ab2@28398> default_overflowcheck:     Dc.b $00,$80,$01,$01,$00,$01
0004B658 <AmiBlitz3.ab2@28399> Even4
0004B664 <AmiBlitz3.ab2@28402> tsthead:                   Dc.l $000003F3,$00000000,$00000001
0004B66C <AmiBlitz3.ab2@28403>                            Dc.l $00000000,$00000000
0004B674 <AmiBlitz3.ab2@28404> tstsize1:                  Dc.l $00000100,$000003E9
0004B678 <AmiBlitz3.ab2@28405> tstsize2:                  Dc.l $00000100
0004B67C <AmiBlitz3.ab2@28406> tstend:                    Dc.l $000003EC
0004B684 <AmiBlitz3.ab2@28407> tstsize3:                  Ds.l 2
0004B688 <AmiBlitz3.ab2@28408> tstdone:                   Dc.l $000003F2
0004B68C <AmiBlitz3.ab2@28411> edstruct:                  Dc.l tokens                     ;data for ted
0004B690 <AmiBlitz3.ab2@28415>                            Dc.l 0
0004B694 <AmiBlitz3.ab2@28417>                            Dc.l read_xtrafile              ;load .xtra routine
0004B698 <AmiBlitz3.ab2@28418>                            Dc.l write_xtrafile             ;save .xtra routine
0004B69C <AmiBlitz3.ab2@28419>                            Dc.l call_menuentry             ;Menu Routine
0004B6A0 <AmiBlitz3.ab2@28420>                            Ds.l 1                          ;cleanup (?)
0004B6A4 <AmiBlitz3.ab2@28421>                            Dc.b ":",34,".;"
0004B7A0 <AmiBlitz3.ab2@28424> asmpnts:                   Ds.l 63                                                  ;Ds.l tnum-fnum org source  hat was mit tok zu tun
0004B880 <AmiBlitz3.ab2@28425>                            Ds.l 56
0004B882 <AmiBlitz3.ab2@28430> lslimm:                    Dc.b $E1,$48                                             ;LSL.W   #8,D0
0004B886 <AmiBlitz3.ab2@28433> use:                       Dc.b $26,$6D,$00,$00                                     ;MOVEA.L $0000(A5),A3
0004B888 <AmiBlitz3.ab2@28434>                            Dc.b $D6,$C0                                             ;ADDA.W  D0,A3
0004B88C <AmiBlitz3.ab2@28435>                            Dc.b $2B,$4B,$00,$00                                     ;MOVE.L  A3,$0000(A5)
0004B892 <AmiBlitz3.ab2@28439> beginarr:                  Dc.b $20,$3C,$00,$00,$00,$00                             ;MOVE.L  #$00000000,D0
0004B894 <AmiBlitz3.ab2@28443>                            Dc.b $C0,$C1                                             ;MULU.W  D1,D0
0004B898 <AmiBlitz3.ab2@28446> putarr:                    Dc.b $2B,$40 :                            Dc.b $00,$00   ;MOVE.L  D0,$0000(A5)
0004B89C <AmiBlitz3.ab2@28449> doarr:                     Dc.b $34,$3C,$00,$00                                     ;MOVE.W  #$0000,D2
0004B8A0 <AmiBlitz3.ab2@28450>                            Dc.b $36,$3C,$00,$00                                     ;MOVE.W  #$0000,D3
0004B8A2 <AmiBlitz3.ab2@28456>                            Dc.b $4A,$40                                             ;TST.W   D0
0004B8A4 <AmiBlitz3.ab2@28460>                            Dc.b $4A,$80                                             ;TST.L   D0
0004B8A6 <AmiBlitz3.ab2@28463> nops8:                     Dc.b $4E,$71                                             ;NOP
0004B8A8 <AmiBlitz3.ab2@28464>                            Dc.b $4E,$71                                             ;NOP
0004B8AA <AmiBlitz3.ab2@28465>                            Dc.b $4E,$71                                             ;NOP
0004B8AC <AmiBlitz3.ab2@28466>                            Dc.b $4E,$71                                             ;NOP
0004B8AE <AmiBlitz3.ab2@28467> nops4:                     Dc.b $4E,$71                                             ;NOP
0004B8B0 <AmiBlitz3.ab2@28469>                            Dc.b $4E,$71                                             ;NOP
0004B8B2 <AmiBlitz3.ab2@28470>                            Dc.b $4E,$71                                             ;NOP
0004B8B4 <AmiBlitz3.ab2@28471>                            Dc.b $4E,$71                                             ;NOP
0004B8B8 <AmiBlitz3.ab2@28475> dataget:                   Dc.b $26,$6D :                            Dc.b $00,$00   ;MOVEA.L $0000(A5),A3
0004B8BC <AmiBlitz3.ab2@28478> dataput:                   Dc.b $2B,$4B :                            Dc.b $00,$00   ;MOVE.L  A3,$0000(A5)
0004B8BE <AmiBlitz3.ab2@28481> stlenget:                  Dc.b $2F,$1B                                             ;MOVE.L  (A3)+,-(A7)
0004B8C0 <AmiBlitz3.ab2@28484> stalign:                   Dc.b $52,$4B                                             ;ADDQ.W  #1,A3
0004B8C2 <AmiBlitz3.ab2@28485>                            Dc.b $C1,$8B                                             ;EXG D0,A3
0004B8C6 <AmiBlitz3.ab2@28486>                            Dc.b $08,$80,$00,$00                                     ;BCLR    #0,D0
0004B8C8 <AmiBlitz3.ab2@28487>                            Dc.b $C1,$8B                                             ;EXG D0,A3
0004B8CA <AmiBlitz3.ab2@28493> dataletb:                  Dc.b $52,$4B                                             ;ADDQ.W  #1,A3
0004B8CE <AmiBlitz3.ab2@28494>                            Dc.b $1B,$5B,$00,$00                                     ;MOVE.B  (A3)+,$0000(A5)
0004B8D0 <AmiBlitz3.ab2@28499> dataletbl:                 Dc.b $52,$4B                                             ;ADDQ.W  #1,A3
0004B8D4 <AmiBlitz3.ab2@28500>                            Dc.b $19,$5B,$00,$00                                     ;MOVE.B  (A3)+,$0000(A4)
0004B8D6 <AmiBlitz3.ab2@28504> dataletb2:                 Dc.b $52,$4B                                             ;ADDQ.W  #1,A3
0004B8D8 <AmiBlitz3.ab2@28505>                            Dc.b $14,$9B                                             ;MOVE.B  (A3)+,(A2)
0004B8DC <AmiBlitz3.ab2@28511> dataletw:                  Dc.b $3B,$5B,$00,$00                                     ;MOVE.W  (A3)+,$0000(A5)
0004B8DE <AmiBlitz3.ab2@28512>                            Dc.b $34,$9B                                             ;MOVE.W  (A3)+,(A2)
0004B8E2 <AmiBlitz3.ab2@28513>                            Dc.b $39,$5B,$00,$00                                     ;MOVE.W  (A3)+,$0000(A4)
0004B8E6 <AmiBlitz3.ab2@28517> dataletl:                  Dc.b $2B,$5B,$00,$00                                     ;MOVE.L  (A3)+,$0000(A5)
0004B8E8 <AmiBlitz3.ab2@28518>                            Dc.b $24,$9B                                             ;MOVE.L  (A3)+,(A2)
0004B8EC <AmiBlitz3.ab2@28519>                            Dc.b $29,$5B,$00,$00                                     ;MOVE.L  (A3)+,$0000(A4)
0004B8EE <AmiBlitz3.ab2@28522> nextfixw:                  Dc.b $50,$4F                                             ;ADDQ.W  #8,A7
0004B8F2 <AmiBlitz3.ab2@28525> nextfixw2:                 Dc.b $4F,$EF,$00,$0A                                     ;LEA $000A(A7),A7
0004B8F6 <AmiBlitz3.ab2@28528> nextfixl:                  Dc.b $4F,$EF,$00,$0C                                     ;LEA $000C(A7),A7
0004B8FA <AmiBlitz3.ab2@28531> nextfixl2:                 Dc.b $4F,$EF,$00,$0E                                     ;LEA $000E(A7),A7
0004B8FE <AmiBlitz3.ab2@28535>                            Dc.b $24,$6F,$00,$04                                     ;MOVEA.L $0004(A7),A2
0004B900 <AmiBlitz3.ab2@28536>                            Dc.b $30,$17                                             ;MOVE.W  (A7),D0
0004B902 <AmiBlitz3.ab2@28537>                            Dc.b $D1,$12                                             ;ADD.B   D0,(A2)
0004B906 <AmiBlitz3.ab2@28542>                            Dc.b $24,$6F,$00,$04                                     ;MOVEA.L $0004(A7),A2
0004B908 <AmiBlitz3.ab2@28543>                            Dc.b $30,$17                                             ;MOVE.W  (A7),D0
0004B90A <AmiBlitz3.ab2@28544>                            Dc.b $D1,$52                                             ;ADD.W   D0,(A2)
0004B90E <AmiBlitz3.ab2@28549>                            Dc.b $24,$6F,$00,$08                                     ;MOVEA.L $0008(A7),A2
0004B910 <AmiBlitz3.ab2@28550>                            Dc.b $20,$17                                             ;MOVE.L  (A7),D0
0004B912 <AmiBlitz3.ab2@28551>                            Dc.b $D1,$92                                             ;ADD.L   D0,(A2)
0004B916 <AmiBlitz3.ab2@28556>                            Dc.b $24,$6F,$00,$08                                     ;MOVEA.L $0008(A7),A2
0004B918 <AmiBlitz3.ab2@28557>                            Dc.b $20,$12                                             ;MOVE.L  (A2),D0
0004B91A <AmiBlitz3.ab2@28558>                            Dc.b $22,$17                                             ;MOVE.L  (A7),D1
0004B91E <AmiBlitz3.ab2@28559>                            Dc.b $4E,$AE,$FF,$BE                                     ;JSR -$0042(A6)
0004B920 <AmiBlitz3.ab2@28560>                            Dc.b $24,$80                                             ;MOVE.L  D0,(A2)
0004B924 <AmiBlitz3.ab2@28565>                            Dc.b $24,$6F,$00,$04                                     ;MOVEA.L $0004(A7),A2
0004B926 <AmiBlitz3.ab2@28566>                            Dc.b $10,$12                                             ;MOVE.B  (A2),D0
0004B92A <AmiBlitz3.ab2@28567>                            Dc.b $32,$2F,$00,$02                                     ;MOVE.W  $0002(A7),D1
0004B92C <AmiBlitz3.ab2@28568>                            Dc.b $4A,$57                                             ;TST.W   (A7)
0004B930 <AmiBlitz3.ab2@28569>                            Dc.b $6A,$00,$00,$04                                     ;BPL.W   L000001         ;.skip org source
0004B932 <AmiBlitz3.ab2@28570>                            Dc.b $C1,$41                                             ;EXG D0,D1
0004B934 <AmiBlitz3.ab2@28573>                            Dc.b $B0,$01                                             ;CMP.B   D1,D0
0004B938 <AmiBlitz3.ab2@28578>                            Dc.b $24,$6F,$00,$04                                     ;MOVEA.L $0004(A7),A2
0004B93A <AmiBlitz3.ab2@28579>                            Dc.b $30,$12                                             ;MOVE.W  (A2),D0
0004B93E <AmiBlitz3.ab2@28580>                            Dc.b $32,$2F,$00,$02                                     ;MOVE.W  $0002(A7),D1
0004B940 <AmiBlitz3.ab2@28581>                            Dc.b $4A,$57                                             ;TST.W   (A7)
0004B944 <AmiBlitz3.ab2@28582>                            Dc.b $6A,$00,$00,$04                                     ;BPL.W   L000002         ;.skip org source
0004B946 <AmiBlitz3.ab2@28583>                            Dc.b $C1,$41                                             ;EXG D0,D1
0004B948 <AmiBlitz3.ab2@28586>                            Dc.b $B0,$41                                             ;CMP.W   D1,D0
0004B94C <AmiBlitz3.ab2@28591>                            Dc.b $24,$6F,$00,$08                                     ;MOVEA.L $0008(A7),A2
0004B94E <AmiBlitz3.ab2@28592>                            Dc.b $20,$12                                             ;MOVE.L  (A2),D0
0004B952 <AmiBlitz3.ab2@28593>                            Dc.b $22,$2F,$00,$04                                     ;MOVE.L  $0004(A7),D1
0004B954 <AmiBlitz3.ab2@28594>                            Dc.b $4A,$57                                             ;TST.W   (A7)
0004B958 <AmiBlitz3.ab2@28595>                            Dc.b $6A,$00,$00,$04                                     ;BPL.W   L000003         ;.skip org source
0004B95A <AmiBlitz3.ab2@28596>                            Dc.b $C1,$41                                             ;EXG D0,D1
0004B95C <AmiBlitz3.ab2@28599>                            Dc.b $B0,$81                                             ;CMP.L   D1,D0
0004B960 <AmiBlitz3.ab2@28604>                            Dc.b $24,$6F,$00,$08                                     ;MOVEA.L $0008(A7),A2
0004B962 <AmiBlitz3.ab2@28605>                            Dc.b $20,$12                                             ;MOVE.L  (A2),D0
0004B966 <AmiBlitz3.ab2@28606>                            Dc.b $22,$2F,$00,$04                                     ;MOVE.L  $0004(A7),D1
0004B96C <AmiBlitz3.ab2@28607>                            Dc.b $08,$2F,$00,$07,$00,$03                             ;BTST    #7,$0003(A7)
0004B970 <AmiBlitz3.ab2@28608>                            Dc.b $67,$00,$00,$04                                     ;BEQ.W   L000004
0004B972 <AmiBlitz3.ab2@28609>                            Dc.b $C1,$41                                             ;EXG D0,D1
0004B976 <AmiBlitz3.ab2@28616>                            Dc.b $4E,$AE,$FF,$D6                                     ;JSR -$002A(A6)
0004B978 <AmiBlitz3.ab2@28620> swapd0:                    Dc.b $48,$40                                             ;SWAP    D0
0004B97A <AmiBlitz3.ab2@28623> pushindex:                 Dc.b $2F,$0A                                             ;MOVE.L  A2,-(A7)
0004B97E <AmiBlitz3.ab2@28626> leaamp:                    Dc.b $45,$ED :                            Dc.b $00,$00   ;LEA $0000(A5),A2
0004B980 <AmiBlitz3.ab2@28627> leaamp2:                   Dc.b $20,$0A                                             ;MOVE.L  A2,D0
0004B984 <AmiBlitz3.ab2@28630> leaampl:                   Dc.b $45,$EC :                            Dc.b $00,$00   ;LEA $0000(A4),A2
0004B986 <AmiBlitz3.ab2@28633> stamp:                     Dc.b $20,$12                                             ;MOVE.L  (A2),D0
0004B98A <AmiBlitz3.ab2@28636> stamp2:                    Dc.b $24,$6D :                            Dc.b $00,$00   ;MOVEA.L $0000(A5),A2
0004B98C <AmiBlitz3.ab2@28640>                            Dc.b $58,$4F                                             ;ADDQ.W  #4,A7
0004B98E <AmiBlitz3.ab2@28643> pushd0wd:                  Dc.b $3F,$00                                             ;MOVE.W  D0,-(A7)
0004B990 <AmiBlitz3.ab2@28646> pushd0l:                   Dc.b $2F,$00                                             ;MOVE.L  D0,-(A7)
0004B994 <AmiBlitz3.ab2@28649> movenumrep:                Dc.b $3E,$3C :                            Dc.b $00,$00   ;MOVE.W  #$0000,D7
0004B998 <AmiBlitz3.ab2@28652> preplibst:                 Dc.b $45,$EF :                            Dc.b $00,$00   ;LEA $0000(A7),A2
0004B99C <AmiBlitz3.ab2@28655> fixlibst:                  Dc.b $4F,$EF :                            Dc.b $00,$00   ;LEA $0000(A7),A7
0004B99E <AmiBlitz3.ab2@28658> pushdn:                    Dc.b $2F,$00                                             ;MOVE.L  D0,-(A7)
0004B9A0 <AmiBlitz3.ab2@28661> movea3a7:                  Dc.b $2F,$0B                                             ;MOVE.L  A3,-(A7)
0004B9A4 <AmiBlitz3.ab2@28664> movestst2:                 Dc.b $20,$2F :                            Dc.b $00,$06   ;MOVE.L  $0006(A7),D0
0004B9AA <AmiBlitz3.ab2@28665>                            Dc.b $3F,$6F,$00,$04,$00,$08                             ;MOVE.W  $0004(A7),$0008(A7)
0004B9AC <AmiBlitz3.ab2@28666>                            Dc.b $2E,$9F                                             ;MOVE.L  (A7)+,(A7)
0004B9B0 <AmiBlitz3.ab2@28670> movea7dn:                  Dc.b $20,$2F :                            Dc.b $00,$04   ;MOVE.L  $0004(A7),D0
0004B9B2 <AmiBlitz3.ab2@28671>                            Dc.b $2E,$9F                                             ;MOVE.L  (A7)+,(A7)
0004B9B4 <AmiBlitz3.ab2@28675> moved0a3:                  Dc.b $26,$40                                             ;MOVEA.L D0,A3
0004B9B8 <AmiBlitz3.ab2@28678> movestdn:                  Dc.b $20,$2D :                            Dc.b $00,$00   ;MOVE.L  $0000(A5),D0
0004B9BA <AmiBlitz3.ab2@28682>                            Dc.b $20,$0B                                             ;MOVE.L  A3,D0
0004B9BC <AmiBlitz3.ab2@28686>                            Dc.b $2F,$00                                             ;MOVE.L  D0,-(A7)
0004B9BE <AmiBlitz3.ab2@28690>                            Dc.b $20,$1F                                             ;MOVE.L  (A7)+,D0
0004B9C2 <AmiBlitz3.ab2@28693> moverts:                   Dc.b $2F,$57 :                            Dc.b $00,$00   ;MOVE.L  (A7),$0000(A7)
0004B9C6 <AmiBlitz3.ab2@28696> fixstack:                  Dc.b $4F,$EF :                            Dc.b $00,$00   ;LEA $0000(A7),A7
0004B9C8 <AmiBlitz3.ab2@28699> fixq:                      Dc.b $50,$4F                                             ;ADDQ.W  #8,A7
0004B9CA <AmiBlitz3.ab2@28702> fix1:                      Dc.b $2E,$9F                                             ;MOVE.L  (A7)+,(A7)
0004B9CC <AmiBlitz3.ab2@28705> movedna3:                  Dc.b $26,$40                                             ;MOVEA.L D0,A3
0004B9D0 <AmiBlitz3.ab2@28708> least:                     Dc.b $45,$EC :                            Dc.b $00,$00   ;LEA $0000(A4),A2
0004B9D4 <AmiBlitz3.ab2@28711> funcst:                    Dc.b $2F,$2C :                            Dc.b $00,$00   ;MOVE.L  $0000(A4),-(A7)
0004B9D6 <AmiBlitz3.ab2@28714> addq4a2:                   Dc.b $58,$4A                                             ;ADDQ.W  #4,A2
0004B9D8 <AmiBlitz3.ab2@28718>                            Dc.b $2F,$0B                                             ;MOVE.L  A3,-(A7)
0004B9DC <AmiBlitz3.ab2@28721>                            Dc.b $2B,$4B,$00,$00                                     ;MOVE.L  A3,$0000(A5)
0004B9DE <AmiBlitz3.ab2@28727>                            Dc.b $26,$5F                                             ;MOVEA.L (A7)+,A3
0004B9E2 <AmiBlitz3.ab2@28730>                            Dc.b $2B,$4B,$00,$00                                     ;MOVE.L  A3,$0000(A5)
0004B9E4 <AmiBlitz3.ab2@28736>                            Dc.b $CB,$4C                                             ;EXG A5,A4
0004B9E8 <AmiBlitz3.ab2@28740> linksize:                  Dc.b $4E,$54 :                            Dc.b $00,$00   ;LINK    A4,#-$0000
0004B9EA <AmiBlitz3.ab2@28743> unlinka4:                  Dc.b $4E,$5C                                             ;UNLK    A4
0004B9EC <AmiBlitz3.ab2@28747>                            Dc.b $2F,$0A                                             ;MOVE.L  A2,-(A7)
0004B9EE <AmiBlitz3.ab2@28751>                            Dc.b $24,$5F                                             ;MOVEA.L (A7)+,A2
0004B9F4 <AmiBlitz3.ab2@28754> gotocode:                  Dc.b $4E,$F9,$00,$00,$00,$00                             ;JMP $00000000
0004B9FA <AmiBlitz3.ab2@28757> gosubcode:                 Dc.b $4E,$B9,$00,$00,$00,$00                             ;JSR $00000000
0004BA02 <AmiBlitz3.ab2@28761> mwait:                     Dc.b $08,$39,$00,$06,$00,$BF,$E0,$01                     ;BTST    #6,$00BFE001
0004BA06 <AmiBlitz3.ab2@28762>                            Dc.b $66,$00,$FF,$F6                                     ;BNE.W   L000005       ;mwait: org source
0004BA08 <AmiBlitz3.ab2@28766> libreg:                    Dc.b $20,$00                                             ;MOVE.L  D0,D0
0004BA0C <AmiBlitz3.ab2@28769> libbase:                   Dc.b $2C,$6D :                            Dc.b $00,$00   ;MOVEA.L $0000(A5),A6
0004BA10 <AmiBlitz3.ab2@28772> libjsr:                    Dc.b $4E,$AE :                            Dc.b $00,$00   ;JSR $0000(A6)
0004BA14 <AmiBlitz3.ab2@28775> regtransd:                 Dc.b $20,$2D,$00,$00                                     ;MOVE.L  $0000(A5),D0
0004BA18 <AmiBlitz3.ab2@28776> regtransa:                 Dc.b $20,$6D,$00,$00                                     ;MOVEA.L $0000(A5),A0
0004BA1C <AmiBlitz3.ab2@28780>                            Dc.b $26,$7C,$00,$00                                     ;MOVEA.L #$00000000,A3
0004BA20 <AmiBlitz3.ab2@28782>                            Dc.l $3F1B                                               ;MOVE.W  (A3)+,-(A7)
0004BA22 <AmiBlitz3.ab2@28785> movea2dn:                  Dc.b $20,$12                                             ;MOVE.L  (A2),D0
0004BA26 <AmiBlitz3.ab2@28788> moved3a5dn:                Dc.b $20,$2D,$00,$00                                     ;MOVE.L  $0000(A5),D0
0004BA28 <AmiBlitz3.ab2@28791> stvarget2:                 Dc.b $70,$00                                             ;MOVEQ   #$00,D0
0004BA2A <AmiBlitz3.ab2@28792>                            Dc.b $2F,$00                                             ;MOVE.L  D0,-(A7)
0004BA2C <AmiBlitz3.ab2@28793>                            Dc.b $4A,$92                                             ;TST.L   (A2)
0004BA30 <AmiBlitz3.ab2@28794>                            Dc.b $67,$00,$00,$0E                                     ;BEQ.W   L000006        ;varget2skip org source
0004BA32 <AmiBlitz3.ab2@28795>                            Dc.b $20,$52                                             ;MOVEA.L (A2),A0
0004BA34 <AmiBlitz3.ab2@28796>                            Dc.b $59,$48                                             ;SUBQ.W  #4,A0
0004BA36 <AmiBlitz3.ab2@28797>                            Dc.b $2E,$98                                             ;MOVE.L  (A0)+,(A7)
0004BA3C <AmiBlitz3.ab2@28799>                            Dc.b $4E,$B9,$00,$00,$00,$00                             ;JSR $00000000
0004BA3E <AmiBlitz3.ab2@28804> addcode:                   Dc.b $20,$1F                                             ;MOVE.L  (A7)+,D0
0004BA40 <AmiBlitz3.ab2@28805>                            Dc.b $D1,$97                                             ;ADD.L   D0,(A7)
0004BA42 <AmiBlitz3.ab2@28809> pushlen:                   Dc.b $2F,$18                                             ;MOVE.L  (A0)+,-(A7)
0004BA46 <AmiBlitz3.ab2@28812> leaa5d3a2:                 Dc.b $45,$ED :                            Dc.b $00,$00   ;LEA $0000(A5),A2
0004BA48 <AmiBlitz3.ab2@28815> pusha2:                    Dc.b $2F,$0A                                             ;MOVE.L  A2,-(A7)
0004BA4A <AmiBlitz3.ab2@28819>                            Dc.b $24,$57                                             ;MOVEA.L (A7),A2
0004BA4C <AmiBlitz3.ab2@28822> pulla2:                    Dc.b $24,$5F                                             ;MOVEA.L (A7)+,A2
0004BA50 <AmiBlitz3.ab2@28825> pulla2st:                  Dc.b $24,$6F,$00,$04                                     ;MOVEA.L $0004(A7),A2
0004BA52 <AmiBlitz3.ab2@28826>                            Dc.b $2E,$9F                                             ;MOVE.L  (A7)+,(A7)
0004BA56 <AmiBlitz3.ab2@28830> pusha3:                    Dc.b $2F,$2D :                            Dc.b $00,$00   ;MOVE.L  $0000(A5),-(A7)
0004BA5A <AmiBlitz3.ab2@28831> pusha32:                   Dc.b $2B,$4B :                            Dc.b $00,$00   ;MOVE.L  A3,$0000(A5)
0004BA5E <AmiBlitz3.ab2@28835> pulla3:                    Dc.b $2B,$5F :                            Dc.b $00,$00   ;MOVE.L  (A7)+,$0000(A5)
0004BA62 <AmiBlitz3.ab2@28839> geta3:                     Dc.b $26,$6D :                            Dc.b $00,$00   ;MOVEA.L $0000(A5),A3
0004BA68 <AmiBlitz3.ab2@28843> numtoa0:                   Dc.b $20,$7C,$00,$00,$00,$00                             ;MOVEA.L #$00000000,A0
0004BA6E <AmiBlitz3.ab2@28846> numtoa2:                   Dc.b $24,$7C,$00,$00,$00,$00                             ;MOVEA.L #$00000000,A2
0004BA72 <AmiBlitz3.ab2@28850> endarray:                  Dc.b $38,$3C :                            Dc.b $00,$00   ;MOVE.W  #$0000,D4
0004BA76 <AmiBlitz3.ab2@28854>                            Dc.b $34,$3C,$00,$00                                     ;MOVE.W  #$0000,D2
0004BA7A <AmiBlitz3.ab2@28855>                            Dc.b $36,$3C,$00,$00                                     ;MOVE.W  #$0000,D3
0004BA80 <AmiBlitz3.ab2@28860>                            Dc.b $20,$3C,$00,$00,$00,$04                             ;MOVE.L  #$00000004,D0
0004BA84 <AmiBlitz3.ab2@28865>                            Dc.b $2B,$40,$00,$00                                     ;MOVE.L  D0,$0000(A5)
0004BA86 <AmiBlitz3.ab2@28870>                            Dc.b $C0,$C1                                             ;MULU.W  D1,D0
0004BA8A <AmiBlitz3.ab2@28874>                            Dc.b $2B,$40,$00,$00                                     ;MOVE.L  D0,$0000(A5)
0004BA8C <AmiBlitz3.ab2@28878> movea0:                    Dc.b $24,$52                                             ;MOVEA.L (A2),A2
0004BA8E <AmiBlitz3.ab2@28881> adda0a0:                   Dc.b $D5,$CA                                             ;ADDA.L  A2,A2
0004BA90 <AmiBlitz3.ab2@28882>                            Dc.b $D5,$CA                                             ;ADDA.L  A2,A2
0004BA94 <AmiBlitz3.ab2@28886>                            Dc.b $2C,$78,$00,$04                                     ;MOVEA.L $0004,A6
0004BA98 <AmiBlitz3.ab2@28890> movea5a0:                  Dc.b $24,$6D :                            Dc.b $00,$00   ;MOVEA.L $0000(A5),A2
0004BA9C <AmiBlitz3.ab2@28893> movea0a0:                  Dc.b $24,$6A :                            Dc.b $00,$00   ;MOVEA.L $0000(A2),A2
0004BA9E <AmiBlitz3.ab2@28896> addqa0:                    Dc.b $52,$4A                                             ;ADDQ.W  #1,A2
0004BAA2 <AmiBlitz3.ab2@28899> leaa0a0:                   Dc.b $45,$EA :                            Dc.b $00,$00   ;LEA $0000(A2),A2
0004BAA4 <AmiBlitz3.ab2@28902> addrega2:                  Dc.b $D4,$C0                                             ;ADDA.W  D0,A2
0004BAAD <AmiBlitz3.ab2@28906>                            Dc.b "ram:test",0
0004BAAE <AmiBlitz3.ab2@28907> Even
0004BAB2 <AmiBlitz3.ab2@28911>                            Dc.l  0                          ;was  Ds.w 3 org source
0004BAB4 <AmiBlitz3.ab2@28913>                            Dc.w  0
0004BAB8 <AmiBlitz3.ab2@28916> _mathffpbase:              Ds.l 1                           ;maths org source
0004BABA <AmiBlitz3.ab2@28917> regnum:                    Ds.w 1                           ;regat org source       ;register being used!
0004BABC <AmiBlitz3.ab2@28918> typelen:                   Ds.w 1
0004BAC0 <AmiBlitz3.ab2@28919> prevtype:                  Ds.l 1
0004BAC4 <AmiBlitz3.ab2@28920> lastsourcepos:             Ds.l 1                           ;prevloc org source
0004BAC6 <AmiBlitz3.ab2@28921> lastchar:                  Ds.w 1
0004BACA <AmiBlitz3.ab2@28922> thistype:                  Ds.l 1
0004BACE <AmiBlitz3.ab2@28923> errstack:                  Ds.l 1
0004BAD2 <AmiBlitz3.ab2@28924> errcont:                   Ds.l 1
0004BAD4 <AmiBlitz3.ab2@28925> linemode:                  Ds.w 1                          ;0 if norm, 1 if newtype
0004BAD6 <AmiBlitz3.ab2@28926> linesleft:                 Ds.w 1
0004BADA <AmiBlitz3.ab2@28927> sourceline:                Ds.l 1                          ;thisitem org source
0004BADE <AmiBlitz3.ab2@28928> varbase:                   Ds.l 1                          ;firstvar org source
0004BAE2 <AmiBlitz3.ab2@28929> alllocals:                 Ds.l 1
0004BAE6 <AmiBlitz3.ab2@28930> firstlocal:                Ds.l 1
0004BAEA <AmiBlitz3.ab2@28931> firstglob:                 Ds.l 1
0004BAEC <AmiBlitz3.ab2@28932> globalvarpointer:          Ds.w 1                          ;varoff org source
0004BAEE <AmiBlitz3.ab2@28933> locvaroff:                 Ds.w 1
0004BAF2 <AmiBlitz3.ab2@28934> firstitem_:                 Ds.l 1
0004BAF4 <AmiBlitz3.ab2@28935> numlines_org:              Ds.w 1                          ;numlines org source
0004BAF6 <AmiBlitz3.ab2@28936> returncode_org:            Ds.w 1                          ;returncode org source
0004BAFA <AmiBlitz3.ab2@28937> firstiff:                  Ds.l 1                          ;firstif org source
0004BAFE <AmiBlitz3.ab2@28938> ptr_seg_ped:               Ds.l 1                          ;segadd org source
0004BCFE <AmiBlitz3.ab2@28939> str_pedfile:               Ds.b #MAX_STRINGSIZE            ;segname org source
0004BD0E <AmiBlitz3.ab2@28940> str_mathffpname:           Dc.b "mathffp.library",0 : Even ;mathsname org source
0004BF0E <AmiBlitz3.ab2@28941> str_libfilename:           Ds.b #MAX_STRINGSIZE
0004C10E <AmiBlitz3.ab2@28942> str_path_userlibs:         Ds.b #MAX_STRINGSIZE
0004C30E <AmiBlitz3.ab2@28943> str_defaultdbug:           Ds.b #MAX_STRINGSIZE            ;debugname org source
0004C312 <AmiBlitz3.ab2@28945> ptr_seg_debugger:          Ds.l 1                          ;dseg org source
0004C512 <AmiBlitz3.ab2@28946> str_blitz3assign:          Ds.b #MAX_STRINGSIZE            ;dpath org source
0004C712 <AmiBlitz3.ab2@28948> str_path_acidlibs:         Ds.b #MAX_STRINGSIZE            ;acidname org source
0004C716 <AmiBlitz3.ab2@28949> size_acidlibs:             Ds.l 1                          ;acidlibs org source
0004C916 <AmiBlitz3.ab2@28950> str_path_deflibs:          Ds.b #MAX_STRINGSIZE            ;defname org source
0004C91A <AmiBlitz3.ab2@28951> size_deflibs:              Ds.l 1                          ;deflibs org source
0004CB1A <AmiBlitz3.ab2@28952> str_tempfilename:          Ds.b #MAX_STRINGSIZE
0004CD1A <AmiBlitz3.ab2@28954> str_temp_debugmodulename:  Ds.b #MAX_STRINGSIZE            ;dname org source
0004CD1E <AmiBlitz3.ab2@28955> ptr_temp_debugmodule:      Ds.l 1                          ;dname2 org source
0004CF1E <AmiBlitz3.ab2@28957> str_path_includes:         Ds.b #MAX_STRINGSIZE            ;acidname org source
0004CF22 <AmiBlitz3.ab2@28963>   Dc.b $E3,$10,$00,$01                                     ;icondata  
0004CF26 <AmiBlitz3.ab2@28964>   Dc.b $00,$00,$00,$00
0004CF2A <AmiBlitz3.ab2@28965>   Dc.b $00,$19,$00,$11
0004CF2E <AmiBlitz3.ab2@28966>   Dc.b $00,$2E,$00,$18
0004CF32 <AmiBlitz3.ab2@28967>   Dc.b $00,$04,$00,$03
0004CF36 <AmiBlitz3.ab2@28968>   Dc.b $00,$01,$00,$22
0004CF3A <AmiBlitz3.ab2@28969>   Dc.b $73,$68,$00,$00
0004CF3E <AmiBlitz3.ab2@28970>   Dc.b $00,$00,$00,$00
0004CF42 <AmiBlitz3.ab2@28971>   Dc.b $00,$00,$00,$00
0004CF46 <AmiBlitz3.ab2@28972>   Dc.b $00,$00,$00,$00
0004CF4A <AmiBlitz3.ab2@28973>   Dc.b $00,$00,$00,$00
0004CF4E <AmiBlitz3.ab2@28974>   Dc.b $00,$00,$00,$00
0004CF52 <AmiBlitz3.ab2@28975>   Dc.b $03,$22,$00,$21
0004CF56 <AmiBlitz3.ab2@28976>   Dc.b $3C,$28,$00,$22
0004CF5A <AmiBlitz3.ab2@28977>   Dc.b $6E,$C0,$00,$00
0004CF5E <AmiBlitz3.ab2@28978>   Dc.b $00,$12,$00,$00
0004CF62 <AmiBlitz3.ab2@28979>   Dc.b $00,$0E,$00,$00
0004CF66 <AmiBlitz3.ab2@28980>   Dc.b $00,$00,$00,$00
0004CF6A <AmiBlitz3.ab2@28981>   Dc.b $00,$00,$00,$00
0004CF6E <AmiBlitz3.ab2@28982>   Dc.b $00,$00,$00,$00
0004CF72 <AmiBlitz3.ab2@28983>   Dc.b $00,$00,$00,$2E
0004CF76 <AmiBlitz3.ab2@28984>   Dc.b $00,$17,$00,$02
0004CF7A <AmiBlitz3.ab2@28985>   Dc.b $00,$01,$8E,$80
0004CF7E <AmiBlitz3.ab2@28986>   Dc.b $03,$00,$00,$00
0004CF82 <AmiBlitz3.ab2@28987>   Dc.b $00,$00,$FF,$FF
0004CF86 <AmiBlitz3.ab2@28988>   Dc.b $FF,$FF,$FF,$FC
0004CF8A <AmiBlitz3.ab2@28989>   Dc.b $80,$00,$00,$00
0004CF8E <AmiBlitz3.ab2@28990>   Dc.b $00,$00,$80,$00
0004CF92 <AmiBlitz3.ab2@28991>   Dc.b $00,$3F,$BB,$40
0004CF96 <AmiBlitz3.ab2@28992>   Dc.b $80,$1F,$C0,$00
0004CF9A <AmiBlitz3.ab2@28993>   Dc.b $00,$00,$80,$3F
0004CF9E <AmiBlitz3.ab2@28994>   Dc.b $C0,$0F,$BB,$40
0004CFA2 <AmiBlitz3.ab2@28995>   Dc.b $80,$1F,$C0,$00
0004CFA6 <AmiBlitz3.ab2@28996>   Dc.b $00,$00,$8E,$00
0004CFAA <AmiBlitz3.ab2@28997>   Dc.b $F8,$00,$00,$00
0004CFAE <AmiBlitz3.ab2@28998>   Dc.b $8F,$01,$FF,$00
0004CFB2 <AmiBlitz3.ab2@28999>   Dc.b $3B,$40,$81,$E3
0004CFB6 <AmiBlitz3.ab2@29000>   Dc.b $F7,$C0,$00,$00
0004CFBA <AmiBlitz3.ab2@29001>   Dc.b $80,$7F,$F8,$70
0004CFBE <AmiBlitz3.ab2@29002>   Dc.b $3B,$40,$80,$0F
0004CFC2 <AmiBlitz3.ab2@29003>   Dc.b $7C,$E0,$00,$00
0004CFC6 <AmiBlitz3.ab2@29004>   Dc.b $80,$00,$FD,$80
0004CFCA <AmiBlitz3.ab2@29005>   Dc.b $00,$00,$80,$01
0004CFCE <AmiBlitz3.ab2@29006>   Dc.b $F6,$00,$FB,$40
0004CFD2 <AmiBlitz3.ab2@29007>   Dc.b $80,$03,$EF,$00
0004CFD6 <AmiBlitz3.ab2@29008>   Dc.b $00,$00,$80,$07
0004CFDA <AmiBlitz3.ab2@29009>   Dc.b $87,$80,$3B,$40
0004CFDE <AmiBlitz3.ab2@29010>   Dc.b $80,$0F,$01,$C0
0004CFE2 <AmiBlitz3.ab2@29011>   Dc.b $00,$00,$80,$03
0004CFE6 <AmiBlitz3.ab2@29012>   Dc.b $F0,$70,$1D,$40
0004CFEA <AmiBlitz3.ab2@29013>   Dc.b $80,$00,$18,$1C
0004CFEE <AmiBlitz3.ab2@29014>   Dc.b $00,$00,$80,$00
0004CFF2 <AmiBlitz3.ab2@29015>   Dc.b $10,$06,$03,$40
0004CFF6 <AmiBlitz3.ab2@29016>   Dc.b $80,$00,$20,$1F
0004CFFA <AmiBlitz3.ab2@29017>   Dc.b $00,$00,$80,$00
0004CFFE <AmiBlitz3.ab2@29018>   Dc.b $00,$00,$01,$40
0004D002 <AmiBlitz3.ab2@29019>   Dc.b $80,$00,$00,$00
0004D006 <AmiBlitz3.ab2@29020>   Dc.b $00,$00,$80,$00
0004D00A <AmiBlitz3.ab2@29021>   Dc.b $00,$00,$00,$00
0004D00E <AmiBlitz3.ab2@29022>   Dc.b $00,$00,$00,$00
0004D012 <AmiBlitz3.ab2@29023>   Dc.b $00,$00,$00,$00
0004D016 <AmiBlitz3.ab2@29024>   Dc.b $00,$00,$00,$04
0004D01A <AmiBlitz3.ab2@29025>   Dc.b $00,$3F,$FC,$01
0004D01E <AmiBlitz3.ab2@29026>   Dc.b $BB,$44,$00,$60
0004D022 <AmiBlitz3.ab2@29027>   Dc.b $FE,$00,$00,$04
0004D026 <AmiBlitz3.ab2@29028>   Dc.b $00,$CF,$FF,$01
0004D02A <AmiBlitz3.ab2@29029>   Dc.b $BB,$44,$1F,$EF
0004D02E <AmiBlitz3.ab2@29030>   Dc.b $FF,$00,$00,$04
0004D032 <AmiBlitz3.ab2@29031>   Dc.b $33,$FF,$FF,$E0
0004D036 <AmiBlitz3.ab2@29032>   Dc.b $00,$04,$37,$FE
0004D03A <AmiBlitz3.ab2@29033>   Dc.b $7F,$FC,$1B,$44
0004D03E <AmiBlitz3.ab2@29034>   Dc.b $0F,$9C,$FF,$FF
0004D042 <AmiBlitz3.ab2@29035>   Dc.b $00,$04,$03,$E3
0004D046 <AmiBlitz3.ab2@29036>   Dc.b $FF,$FF,$DB,$44
0004D04A <AmiBlitz3.ab2@29037>   Dc.b $00,$7F,$BF,$FF
0004D04E <AmiBlitz3.ab2@29038>   Dc.b $80,$04,$00,$0F
0004D052 <AmiBlitz3.ab2@29039>   Dc.b $3F,$FE,$00,$04
0004D056 <AmiBlitz3.ab2@29040>   Dc.b $00,$06,$7F,$F8
0004D05A <AmiBlitz3.ab2@29041>   Dc.b $1B,$44,$00,$0C
0004D05E <AmiBlitz3.ab2@29042>   Dc.b $F7,$FC,$00,$04
0004D062 <AmiBlitz3.ab2@29043>   Dc.b $00,$19,$F9,$FE
0004D066 <AmiBlitz3.ab2@29044>   Dc.b $1B,$44,$00,$33
0004D06A <AmiBlitz3.ab2@29045>   Dc.b $FE,$7F,$00,$04
0004D06E <AmiBlitz3.ab2@29046>   Dc.b $00,$0F,$FF,$BF
0004D072 <AmiBlitz3.ab2@29047>   Dc.b $CD,$44,$00,$03
0004D076 <AmiBlitz3.ab2@29048>   Dc.b $EF,$EF,$F0,$04
0004D07A <AmiBlitz3.ab2@29049>   Dc.b $00,$00,$7F,$DF
0004D07E <AmiBlitz3.ab2@29050>   Dc.b $FB,$44,$00,$00
0004D082 <AmiBlitz3.ab2@29051>   Dc.b $FF,$A7,$FC,$04
0004D086 <AmiBlitz3.ab2@29052>   Dc.b $00,$00,$7E,$3F
0004D08A <AmiBlitz3.ab2@29053>   Dc.b $FD,$44,$00,$00
0004D08E <AmiBlitz3.ab2@29054>   Dc.b $00,$00,$00,$04
0004D092 <AmiBlitz3.ab2@29055>   Dc.b $7F,$FF,$FF,$FF
0004D096 <AmiBlitz3.ab2@29056>   Dc.b $FF,$FC,$00,$00
0004D09A <AmiBlitz3.ab2@29057>   Dc.b $00,$01,$00,$00
0004D09D <AmiBlitz3.ab2@29058>   Dc.b $00,$00,$04
0004D0A3 <AmiBlitz3.ab2@29061> str_infoextention2:  Dc.b ".info",0                           ;infoname org source
0004D0A4 <AmiBlitz3.ab2@29062> Even
0004D0A8 <AmiBlitz3.ab2@29064> sysdebug:            Dc.l $3F0
0004D0AC <AmiBlitz3.ab2@29068> exelock              Ds.l 1
000502EC <AmiBlitz3.ab2@29070> wzgui                IncBin "compiler.wizard"
000502F0 <AmiBlitz3.ab2@29072> includesourceline    Dc.l 0
000502F4 <AmiBlitz3.ab2@29073> linenum              Ds.l 1
000502F8 <AmiBlitz3.ab2@29074> globallinecount      Ds.l 1
00050316 <AmiBlitz3.ab2@29075> myversion            Dc.b "\\__VER_MAJOR.\\__VER_MINOR (\\__DATE_GER__) Build \\__VER_PATCH.\\__VER_BUILD",0 : Even
0005031A <AmiBlitz3.ab2@29076> calc_option          Dc.l 1
0005031E <AmiBlitz3.ab2@29077> versioninformation   Dc.l $00
00050322 <AmiBlitz3.ab2@29078> number_of_builds     Dc.l $00
00050324 <AmiBlitz3.ab2@29081> BSS
00050326 <AmiBlitz3.ab2@29082> debugnest            Ds.w 1
0005032A <AmiBlitz3.ab2@29083> instringf            Ds.l 1
0005032E <AmiBlitz3.ab2@29084> funcscanon           Ds.l 1
00050342 <AmiBlitz3.ab2@29085> storedebugmode       Ds.b 20
00050346 <AmiBlitz3.ab2@29086> firsttimepref        Ds.l 1
00050348 <AmiBlitz3.ab2@29087> funcparloop          Ds.w 1
0005034A <AmiBlitz3.ab2@29088> nostringopt          Ds.w 1
000503CA <AmiBlitz3.ab2@29089> path2:               Ds.l 32
000503CE <AmiBlitz3.ab2@29090> typebase             Dc.l 0
000503D0 <AmiBlitz3.ab2@29091> doublepeek           Dc.w 0
000503D4 <AmiBlitz3.ab2@29092> lastoffset           Dc.l 0
000503D6 <AmiBlitz3.ab2@29093> firsttime            Dc.w 0
000503DA <AmiBlitz3.ab2@29094> lastdestpointer      Dc.l 0
000503DE <AmiBlitz3.ab2@29095> prevwritedat         Dc.l 0
000503E2 <AmiBlitz3.ab2@29096> lastsourceline       Dc.l 0
000503E6 <AmiBlitz3.ab2@29097> lastwritedat         Dc.l 0
000503E8 <AmiBlitz3.ab2@29098> makeexec             Dc.w 0
000503EA <AmiBlitz3.ab2@29099> makeexec_remember    Dc.w 0
000503EE <AmiBlitz3.ab2@29100> sharebase            Ds.l 1
000503F2 <AmiBlitz3.ab2@29101> tempa7               Ds.l 1
000503F4 <AmiBlitz3.ab2@29102> incnif               Ds.w 1
000503F8 <AmiBlitz3.ab2@29103> tempstore            Ds.l 1
000503FC <AmiBlitz3.ab2@29104> result               Ds.l 1
000503FE <AmiBlitz3.ab2@29105> automode             Ds.w 1
00050400 <AmiBlitz3.ab2@29106> stackcorrect         Ds.w 1
00050402 <AmiBlitz3.ab2@29107> formode              Ds.w 1
00050406 <AmiBlitz3.ab2@29108> limitregs            Ds.l 1
00050408 <AmiBlitz3.ab2@29109> onestep              Ds.w 1
0005040C <AmiBlitz3.ab2@29110> reqmode              Ds.l 1
000504AC <AmiBlitz3.ab2@29111> inctab               Ds.l 40
000504AE <AmiBlitz3.ab2@29112> funcoptimize         Ds.w 1
000504B2 <AmiBlitz3.ab2@29113> includeline          Ds.l 1
000504B6 <AmiBlitz3.ab2@29114> morememadd           Ds.l 1
000504B8 <AmiBlitz3.ab2@29115> objectcount          Ds.w 1
000504BC <AmiBlitz3.ab2@29116> savefuncspace        Ds.l 1
000504C0 <AmiBlitz3.ab2@29117> lasttrap1            Ds.l 1
000504C4 <AmiBlitz3.ab2@29118> currentfunccall      Ds.l 1
000504C5 <AmiBlitz3.ab2@29119> skipfunc             Ds.b 1
000504C6 <AmiBlitz3.ab2@29120> resdisable           Ds.b 1
000504C7 <AmiBlitz3.ab2@29121> skiptoggle           Ds.b 1
000504C8 <AmiBlitz3.ab2@29122> developobject        Ds.b 1
000504CA <AmiBlitz3.ab2@29123> iniffcommand         Ds.w 1
000504CC <AmiBlitz3.ab2@29124> startoffsetmore      Ds.w 1
000504CE <AmiBlitz3.ab2@29125> olddebugmode         Ds.w 1
000504D2 <AmiBlitz3.ab2@29126> fpucodeglobal        Ds.l 1
000504D6 <AmiBlitz3.ab2@29127> fpucodelocal         Ds.l 1
000504DA <AmiBlitz3.ab2@29128> maxregs              Ds.l 1
000504DE <AmiBlitz3.ab2@29129> fpucode              Ds.l 1
000504E0 <AmiBlitz3.ab2@29130> firstmline           Ds.w 1
00050520 <AmiBlitz3.ab2@29131> regtable             Ds.l 16
00050522 <AmiBlitz3.ab2@29132> exdebug              Ds.w 1
00050524 <AmiBlitz3.ab2@29133> a2offset2            Ds.w 1
00050528 <AmiBlitz3.ab2@29134> parnumtemp           Ds.l 1
00050529 <AmiBlitz3.ab2@29135> doimmediate          Ds.b 1
0005052A <AmiBlitz3.ab2@29136> notypecheck          Ds.b 1
0005052C <AmiBlitz3.ab2@29137> vartype              Ds.w 1
0005052D <AmiBlitz3.ab2@29138> peekaddrsize         Ds.b 1
0005052E <AmiBlitz3.ab2@29139> declare2             Ds.b 1
00050530 <AmiBlitz3.ab2@29140> parameternum         Ds.w 1
00050534 <AmiBlitz3.ab2@29141> lasttoken            Ds.l 1
00050536 <AmiBlitz3.ab2@29142> newvariable          Ds.w 1
00050537 <AmiBlitz3.ab2@29143> declare              Ds.b 1
00050538 <AmiBlitz3.ab2@29144> typecheck            Ds.b 1
00050539 <AmiBlitz3.ab2@29145> nowdeclare           Ds.b 1
0005053A <AmiBlitz3.ab2@29146> dimkeep              Ds.b 1
0005053E <AmiBlitz3.ab2@29148> firstiffstore        Ds.l 1
00050542 <AmiBlitz3.ab2@29149> destpointer2         Ds.l 1
00050546 <AmiBlitz3.ab2@29150> stackaddr            Ds.l 1
0005064A <AmiBlitz3.ab2@29151> allowtab             Ds.b 260
0005074A <AmiBlitz3.ab2@29152> templine             Ds.b 256
0005074C <AmiBlitz3.ab2@29153> thenmode             Ds.w 1
0005074E <AmiBlitz3.ab2@29154> temp                 Ds.w 1
00050750 <AmiBlitz3.ab2@29155> tempregnum           Ds.w 1
00050754 <AmiBlitz3.ab2@29157> numlines2            Ds.l 1
00050758 <AmiBlitz3.ab2@29158> numlines             Ds.l 1
0005075A <AmiBlitz3.ab2@29159> exmac                Ds.w 1
0005075C <AmiBlitz3.ab2@29160> returncode           Ds.w 1
00050760 <AmiBlitz3.ab2@29161> fp0iff               Ds.l 1
00050764 <AmiBlitz3.ab2@29162> fp0addr              Ds.l 1
00050766 <AmiBlitz3.ab2@29163> fp0mode              Ds.w 1
00050768 <AmiBlitz3.ab2@29164> fp0var               Ds.w 1
0005076A <AmiBlitz3.ab2@29165> fastfunc             Ds.w 1
0005076C <AmiBlitz3.ab2@29166> retmode              Ds.w 1
0005076E <AmiBlitz3.ab2@29167> parnum               Ds.w 1
00050770 <AmiBlitz3.ab2@29168> regmask              Ds.w 1
00050772 <AmiBlitz3.ab2@29169> regnumfunc           Ds.w 1
00050774 <AmiBlitz3.ab2@29170> libmode              Ds.w 1
00050778 <AmiBlitz3.ab2@29171> oldline              Ds.l 1
0005077C <AmiBlitz3.ab2@29172> sourceline3          Ds.l 1
00050844 <AmiBlitz3.ab2@29173> debugstore           Ds.b 200
00050848 <AmiBlitz3.ab2@29174> deststore            Ds.l 1
0005084C <AmiBlitz3.ab2@29176> loada                Ds.l 1
00050850 <AmiBlitz3.ab2@29178> currtype             Ds.l 1
00050854 <AmiBlitz3.ab2@29179> arrayoffset          Ds.l 1
00050858 <AmiBlitz3.ab2@29180> lastlabel            Ds.l 1
0005085C <AmiBlitz3.ab2@29181> curtemplabel         Ds.l 1
00050860 <AmiBlitz3.ab2@29182> sourceline2          Ds.l 1
00050960 <AmiBlitz3.ab2@29183> chartab              Ds.b 256
000509D8 <AmiBlitz3.ab2@29184> tempspace            Ds.b 120
000D09E8 <AmiBlitz3.ab2@29185> instrtab             Ds.l 65538*2
000D89E8 <AmiBlitz3.ab2@29187> labelhash            Ds.l 8192                             ;-bssstore clear every compile pass
000F89EC <AmiBlitz3.ab2@29188> replacedat           Ds.w 65538
001009EC <AmiBlitz3.ab2@29189> variablehash         Ds.l 8192
001009F0 <AmiBlitz3.ab2@29190> newinitaddr          Ds.l 1
001009F4 <AmiBlitz3.ab2@29191> realbssend           Ds.l 1
001009F5 <AmiBlitz3.ab2@29192> saved0               Ds.b 1
00100A75 <AmiBlitz3.ab2@29193> lastpath             Ds.b 128
00100AF5 <AmiBlitz3.ab2@29194> lastpath2            Ds.b 128
00100BBD <AmiBlitz3.ab2@29195> fpustackbase         Ds.w 100
00100BC1 <AmiBlitz3.ab2@29198> trap15temp           Ds.l 1
00100BC5 <AmiBlitz3.ab2@29199> trap15temp2          Ds.l 1
00100BC9 <AmiBlitz3.ab2@29200> templibend           Ds.l 1
00100BCD <AmiBlitz3.ab2@29201> tempdata1start       Ds.l 1
00100BCE <AmiBlitz3.ab2@29202> pad2                 Ds.b 1
00100BD2 <AmiBlitz3.ab2@29203> stacktrack           Ds.l 1
00100BD6 <AmiBlitz3.ab2@29204> pad                  Ds.l 1
00100CD6 <AmiBlitz3.ab2@29205> includetemp          Ds.b 256
001016D6 <AmiBlitz3.ab2@29206> includetemp2         Ds.b 256*10
001016D8 <AmiBlitz3.ab2@29207> funccall             Ds.w 1
001016DC <AmiBlitz3.ab2@29210> ptr_resfile          Ds.l 1
001016DE <AmiBlitz3.ab2@29211> button_bin_flags:    Ds.w 1
001016E0 <AmiBlitz3.ab2@29212> button_dec_flags:    Ds.w 1
001016E4 <AmiBlitz3.ab2@29213> ped_startup_addr:    Ds.l 1
001016E5 <AmiBlitz3.ab2@29214> start_without_libs:  Ds.b 1
001016E6 <AmiBlitz3.ab2@29215> skip_bytes:          Ds.b 1
001016E7 <AmiBlitz3.ab2@29216> iserror              Ds.b 1
001016E8 <AmiBlitz3.ab2@29217> Even
001016EC <AmiBlitz3.ab2@29219> CLIMode:             Dc.l 0
001016F0 <AmiBlitz3.ab2@29220> XTRAEndPadBytes:     Dc.l 0                             ; 4 fill/pad/termination bytes for the xtra write function  tomsmart1
